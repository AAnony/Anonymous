0	Integrate plugins.
1	Retrieve recent conversations
2	Compute the product of two Pauli operators.

        Parameters
        ----------
        p1 : PauliOperator
            The first Pauli operator.
        p2 : PauliOperator
            The second Pauli operator.
3	Find the path of a command
4	Retrieve the data for a given environment.
5	Raise a server error.
6	Optimal marginal branch length.
7	Returns the name of the storage directory.
8	Check that intervals are valid.
9	End of cluster function
10	Upload a file to H2O.

    Parameters
    ----------
    path : str
        The path to the file to upload.
    destination_frame : str, optional
        The name of the destination H2O frame.
    header : int, optional
        The number of columns in the destination H2O frame.
    sep : str, optional
        The separator between columns in the destination H2O frame.
    col_names : list, optional
        The names of the columns in the destination H2O frame.
    col_types : list, optional
        The types of the columns in the destination H2O frame.
    na_strings : list, optional
        The names of the NA columns in the destination H2O frame.
    skipped_columns : list, optional
        The names of the skipped columns in the destination H2O frame.
11	Add a state.

        Parameters
        ----------
        s : State
12	Computes empirical statistics of a time series.
13	Calculate the branch-site mutation matrix.

        Parameters
        ----------
        node : Node
            The node of interest.
        full_sequence : bool
            Whether to calculate the full sequence or not.
14	Decorate a function with annotations.
15	Call the object.
16	Write the object to the output stream.
17	KL(d1, d2) = KL(d1, d2, name="kl_beta_beta")
18	Parses Ensembl gene information from the request.
19	Save a nifti image from numpy data.

    Parameters
    ----------
    nifti_filename : str
        The filename to save the nifti image to.
    numpy_data : ndarray
        The numpy data to save.

    Returns
    -------
    nifti_filename : str
20	Returns the prefix that should be used.
21	Called when the worker connection is lost.
22	Search for dates.
23	Called when a new connection is received.
24	Writes a table.
25	Returns (sx,sy,ex,ey)
26	Returns the parameters as a dictionary.
27	Given a list of qubits and a list of gates, apply the gates to the qubits

        Parameters
        ----------
        qubits : list
            The list of qubits to apply the gates to
        gates : list
            The list of gates to apply

        Returns
        -------
        None
28	Convert boolean values from config file
29	Run the object and profile it.
30	Parses an Ensembl line and returns an Ensembl object
31	Align end of hierarchies
32	Save a local file
33	Convert an object to its primitive form.
34	Prune the tree by removing nodes whose name is in `leaf_names`.
35	Return True if value is None or is a tuple of two elements, both of which must be
        Registers and the second of which must be an integer.
36	Retrieve combined credits.

        .. versionadded:: 2018.5.0

        **REST API**

        :param kwargs: Dictionary of arguments to be passed to the API

        .. versionchanged:: 2018.5.0

        :return: API response
        :rtype: dict
37	Run a single step of backward smoothing.
38	Calculate the quantiles of the frame.

        Parameters
        ----------
        prob : list, optional
            List of probabilities (0.01, 0.1, 0.25, 0.333, 0.5, 0.667, 0.75, 0.9, 0.99)
        combine_method : {'interpolate', 'nearest'}
            Interpolate or NearestNeighbor quantile method.
        weights_column : str, optional
            Name of the column containing the weights.
39	Resolve a symbol to a class or host form.
40	Print the given figure.
41	Write a single word to the device.
42	Main entry point.
43	Show about dialog
44	Create the server.
45	Given a path, guess what type of object it is.
46	Refactor a single step.
47	Create a new job

        :param task:
        :param person:
        :param tank:
        :param target_host:
        :param target_port:
        :param loadscheme:
        :param detailed_time:
        :param notify_list:
        :param trace:
48	Add parameters to the trajectory.
49	Convert a MIDI number to a musical note.
50	Concatenate video files.

    Parameters
    ----------
    video_list : list
        Video files to concatenate.
    out_file : str
        Output file.
    vcodec : str, optional
        Video codec.
    acodec : str, optional
        Audio codec.
    log_level : str, optional
        Log level.
    print_cmd : bool, optional
        Print command line.
51	Create a secret link to the record.
52	Push the current module stack onto the stack.
53	Returns a list of tuples of the form:

    (fname, start, stop, expr)

    where `fname` is the name of the function, `start` and `stop`
    are the start and stop indices of the function, and `expr` is the
    expression of the function.
54	Create a MIME text object.

        :param text: The text to be encoded.
        :type text: str
        :param subtype: The subtype of the text.
        :type subtype: str
        :param charset: The charset of the text.
        :type charset: str
55	Execute DML statements in a transaction.
56	Calculates the histogram of `x`.

    Args:
      x: A `Tensor`.
      edges: A `Tensor`.
      axis: A `Tensor`.
      extend_lower_interval: A `bool`.
      extend_upper_interval: A `bool`.
57	Checks that `o` is an instance of one of `acceptable_types`.
58	Ensures that `fn` is wrappable.
59	Write data to output file.
60	Closes the rpc system.
61	Recv sub
62	Returns a list of columns that match the given ucds.
63	Write the default config.
64	Register blueprints
65	Return a list of all classes defined in the given module.

    :param mname: The module name.
    :param cls_filter: A list of class names to include.
    :return: A list of classes.
66	Add a default statement.

        :param statements:
        :return:
67	Transpiles the circuits and assembles them into a qobj to be run on the backend

    Parameters
    ----------
    experiments : list
        circuits to be transpiled and assembled

    basis_gates : list
        gates to be used in the transpiled circuits

    coupling_map : list
        mapping of qubits to be used in the transpiled circuits

    backend_properties : dict
        properties of the backend to be used in the transpiled circuits

    initial_layout : dict
        initial layout of the qubits to be used in the transpiled circuits

    seed_transpiler : int
        seed of the transpiler

    optimization_level : int
        optimization level of the transpiler

    pass_manager : int
        pass manager to be used in the transpiled circuits

    seed_mapper : int
        seed mapper to be used in the transpiled circuits

    shots : int
        number of shots to be used in the transpiled circuits

    memory : int
        number of memory slots to be used in the transpiled circuits

    max_credits : int
        maximum number of credits to be used in the transpiled circuits

    
68	Builds an iterator over training and validation data.
69	Count the number of bytes for each filter predicate.
70	Download and generate Enrichr library gene sets
71	Returns the positions of newlines in the text.
72	Representation of a KMIP 1.3 ValidationInformation object.

        Attributes:
            validation_authority_type (enums.ValidationAuthorityType):
                The type of the validation authority.
            validation_authority_country (TextString):
                The country of the validation authority.
            validation_authority_uri (TextString):
                The URI of the validation authority.
            validation_version_major (Integer):
                The major version of the validation.
            validation_version_minor (Integer):
                The minor version of the validation.
            validation_type (enums.ValidationType):
                The type of the validation.
            validation_level (Integer):
                The level of the validation.
            validation_certificate_identifier (TextString):
                The identifier of the validation certificate.
            validation_certificate_uri (TextString):
                The URI of the validation certificate.
            validation_vendor_uri (TextString):
                The URI of the validation vendor.
73	Parses the command-line arguments and creates a context object.
74	Returns a list of albums for the artist.
75	Find the URL file.
76	Return a dictionary of plugins.
77	Decode the output of the model.
78	Returns a hash of the token.
79	Change the configuration of a deployment.
80	Reverses the output of `kl_div`.
81	Overridden method.
82	Arrange the graph.
83	Reads an entry from the cache
84	Converts an etree element to a Rule object.

    :param entry_element: The etree element to convert.
    :return: The Rule object.
85	Calculate Shannon entropy.

    Parameters
    ----------
    pvec : array_like
        Probability vector.
    base : int, optional
        Base of logarithm.

    Returns
    -------
    float
        Shannon entropy.
86	Send data to the server.
87	Create a pipeline of functions.
88	Initialize all bars.
89	Remove a task from the registry.
90	Returns the size hint of the control.
91	Change the mode of a file or directory.
92	Run the mining logic.
93	Return the value of the element.
94	Gets a list of consumer groups.
95	Fetch issue data
96	Confirm user input
97	Deliver the packet to the receiver.
98	Connect to the server.
99	Errors in parameters.
100	Replace old pages with new ones.
101	Yield blocks of tuples.
102	Close the connection.
103	List objects in the account

        CLI Example:

        .. code-block:: bash

            salt '*' cli.get_account_listing
104	Translate the given message.
105	Add an array of summaries to the file.
106	Lookup a key.
107	Returns a list of module names from the given module.

    Parameters
    ----------
    mname : str
        The module name.

    Returns
    -------
    list
        A list of module names.
108	Decorator to add attributes to an object
109	def write_fcs(filename, chn_names, data,
                endianness="big",
                compat_chn_names=True,
                compat_copy=True,
                compat_negative=True,
                compat_percent=True,
                compat_max_int16=10000):
    """
    Write a FCS file.

    Parameters
    ----------
    filename : pathlib.Path
        The path of the FCS file to be written.
    chn_names : list
        The names of the channels.
    data : ndarray
        The data to be written.
    endianness : str
        The endianness of the FCS file.
    compat_chn_names : bool
        Compatibility mode.
    compat_copy : bool
        Compatibility mode.
    compat_negative : bool
        Compatibility mode.
    compat_percent : bool
        Compatibility mode.
    compat_max_int16 : int
        Compatibility mode.
110	Relate two instances.

    :param from_instance:
    :param to_instance:
    :param rel_id:
    :param phrase:
    :return:
111	Transplant a class from one module to another.
112	Build a class from a callable.
113	<noinput>
114	Calculate the KL divergence between a and b.

  Args:
    a: A `Tensor`.
    b: A `Tensor`.
    name: An optional name for the operation.

  Returns:
    A scalar `Tensor`.
115	Spins forever.
116	Returns the bit address of the array.
117	Return True if the element is expired.
118	Check if client authentication is required.
119	Demonstration of HPSS.
120	Subsample the input file.
121	Leave function definition.
122	Main function.
123	Send a shared pin.

        Parameters
        ----------
        topics : list
            The topics to send the pin to.
        pin : dict
            The pin to send.
124	Print a progress message.
125	Verify that the given node is not recursively defined.
126	Return the coordinate of this descriptor.
127	Checks if the given type name is known.
128	Create a new session.
129	Run the glut main loop.

    Parameters
    ----------
    None
130	Returns the value of the given field from the given kernel_results.
131	Diagonal filter
132	Retrieve a chunk from S3.
133	Converts context to airflow variables
134	Given a list of indices, return a list of block indices.
135	Retrieve a token from the API.

        :param code: The code from the authorization request.
        :type code: string
        :param grant_type: The grant type from the authorization request.
        :type grant_type: string
        :param client_id: The client id from the authorization request.
        :type client_id: string
        :param client_secret: The client secret from the authorization request.
        :type client_secret: string
        :param redirect_uri: The redirect uri from the authorization request.
        :type redirect_uri: string
136	Same as :py:meth:`~.APIClient.syncState`.

        .. versionadded:: 3.0.0
137	Create a EC2 instance from a boto instance.
138	Adapt a sequence of rows into a sequence of strings.
139	Shuffles the playback queue.
140	Adds new variants and case data to clinvar submission
141	Calculate character to length mapping.
142	Returns the basename of a path.
143	Delete an app.
144	Transform the current matrix.
145	Iterate over all processes.
146	Update the path.
147	Returns the indices of the features that are above the given threshold.

        Parameters
        ----------
        features : str or list of str
            The features to search for.
        threshold : float, optional
            The threshold to use.
        func : function, optional
            The function to apply to the feature weights.
        get_weights : bool, optional
            Whether to return the weights or not.

        Returns
        -------
        list of int
            The indices of the features that are above the given threshold.

        Examples
        --------
        >>> from sklearn.datasets import make_blobs
        >>> X, y = make_blobs(n_samples=100, n_features=2, centers=4, random_state=42)
        >>> from sklearn.cluster import KMeans
        >>> kmeans = KMeans(n_clusters=4, random_state=42)
        >>> kmeans.fit(X)
        >>> kmeans.predict(X)
        array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
148	Create an index from a stream of data.

        Parameters
        ----------
        stream : object
            A stream of data to create the index from.

        Returns
        -------
        handle : IndexStreamHandle
            A handle to the index.
149	Returns the timestamp of when the item's metadata was updated.
150	Returns a form instance.
151	Returns the filtered root folder.
152	Checks if the given position is within the given coordinates.
153	Remove a logical interface from a thing type.
154	Calculate the next run time.
155	Return the physical qubits.
156	Get all pipelines
157	Generate a credit note from an invoice.
158	Prepare the object
159	Create a sitetree node from a template.
160	Download a video from YouTube
161	Replace the config with the given name.

    :param config: The config to replace.
    :param name: The name of the config to replace.
    :return: The new pipeline.
162	Create a function call node
163	Parse OMIM morbidity lines.
164	Resize an image to a specified size

    :param image:
    :param size:
    :param resample:
    :return:
165	Return True if text can be pasted.
166	Quit the debugger.
167	Checks if a user is an effective member of a group.

        Args:
            group_id (str): The ID of the group.
            netid (str): The ID of the user.

        Returns:
            bool: Whether the user is an effective member of the group.
168	Apply a function to each element of a list in parallel.

    Parameters
    ----------
    func : Callable
        Function to apply to each element of the list.
    data : List[Any]
        List of elements to apply the function to.
    cpu_cores : int, optional
        Number of cores to use for parallelization.

    Returns
    -------
    List[Any]
        List of transformed elements.
169	Short summary of the review.
170	Send the message.
171	Add additional arguments to the parser.
172	Create a new LAS object from a string.
173	Summarize a sequence of images.
174	Resume the command.
175	Given a full string and a part, return the substring after the part.
176	Returns an associative map with the given key/value pairs.
177	Get text from the clipboard.
178	Fill missing values with a given value.

        Parameters
        ----------
        value : scalar or array-like
            Value to fill missing values with.
        fill_nan : bool, default True
            Fill missing values with `value`.
        fill_masked : bool, default True
            Fill missing values with `value`.
        column_names : list, default None
            List of column names to fill.
        prefix : str, default '__original_'
            Prefix for column names.
179	Intern a variable.
180	Run a line magic.

        Parameters
        ----------
        magic_name : str
            The name of the line magic to run.
        line : str
            The line of code to run the magic on.

        Returns
        -------
        result : str
            The output of the line magic.
181	Returns the bound method for the given instruction.
182	Add subparsers to the parser.
183	Trace plots for a subset of samples.
184	Builds the data set from the fields.
185	Decorator for command line options.
186	Configure a profile.
187	Serialize a metric
188	Executes the given query and returns the result.
189	Returns a list of attributes of the class.
190	Compute framesync times.
191	Return a list of unique items in a sequence.
192	Register with boss.
193	Validates `target_accept_prob` if `validate_args` is True.
194	Retrieve the parameters from the object.
195	Retrieve the streams from the server.
196	Retrieve the value of a child variable.

        Parameters
        ----------
        name : str
            Name of the variable to retrieve.

        Returns
        -------
        value : float
            The value of the variable.
197	Given a list of blocks and a default block, ask the user to select a block
    to be marked.
198	Return a string representation of a number.
199	Dump a Python object to JSON.

    Parameters
    ----------
    obj : object
        The object to dump.
    **kwargs : dict
        Keyword arguments to pass to :meth:`json.dumps`.

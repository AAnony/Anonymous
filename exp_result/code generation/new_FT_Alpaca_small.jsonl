{"task_id": "HumanEval/0", "completion": "    for num1, num2 in numbers:\n        if abs(num1 - num2) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    def separate_paren_groups(paren_string: str) -> List[str]:\n        \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n        separate those group into separate strings and return the list of those.\n        Separate groups are balanced (each open brace is properly closed) and not nested within each other\n        Ignore any spaces in the input string.\n        >>> separate_paren_groups('( ) (( )) (( )( ))')\n        ['()', '(())', '(()())']\n        \"\"\"\n        result = []\n        for m in re.findall(r'(\\()', paren_string):\n            result.append(m.group())\n        return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    if sum(operations) < 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/4", "completion": "    def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0"}
{"task_id": "HumanEval/5", "completion": "    def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    def parse_nested_parens(paren_string: str) -> List[int]:\n        stack = []\n        for i in paren_string:\n            if i == '(':\n                stack.append(0)\n            elif i == ')':\n                if len(stack) == 0:\n                    return 0\n                else:\n                    stack.pop()\n        return len(stack)"}
{"task_id": "HumanEval/7", "completion": "    filtered_strings = []\n    for string in strings:\n        if string.find(substring) != -1:\n            filtered_strings.append(string)\n    return filtered_strings"}
{"task_id": "HumanEval/8", "completion": "    return sum(numbers), product(numbers)"}
{"task_id": "HumanEval/9", "completion": "    def rolling_min(numbers: List[int]) -> List[int]:\n        \"\"\" From a given list of integers, generate a list of rolling minimum element found until given moment\n        in the sequence.\n        >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n        [1, 2, 3, 3, 3, 4, 4]\n        \"\"\"\n\n\nif __name__ == '__main__':\n    rolling_max([1, 2, 3, 2, 3, 4, 2])\n    rolling_min([1, 2, 3, 2, 3, 4, 2])"}
{"task_id": "HumanEval/10", "completion": "    def make_palindrome(string: str) -> str:\n        \"\"\" Find the shortest palindrome that begins with a supplied string.\n        Algorithm idea is simple:\n        - Find the longest postfix of supplied string that is a palindrome.\n        - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n        >>> make_palindrome('')\n        ''\n        >>> make_palindrome('cat')\n        'catac'\n        >>> make_palindrome('cata')\n        'catac'"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == '1':\n            result = result ^ b[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "    def longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'"}
{"task_id": "HumanEval/13", "completion": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/14", "completion": "    prefixes = ['a', 'ab', 'abc']"}
{"task_id": "HumanEval/15", "completion": "    output = \"\"\n    for i in range(n):\n        output += str(i)\n        if i < n-1:\n            output += \" \"\n    return output"}
{"task_id": "HumanEval/16", "completion": "    count = 0\n    for char in string:\n        if char.isalpha():\n            count += 1\n    return count"}
{"task_id": "HumanEval/17", "completion": "    result = [4, 2, 1, 2, 1, 1, 1, 1, 4, 4]"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    for i in range(len(string)):\n        if string[i] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    numbers = ['one', 'three', 'five']\n    sorted_numbers = sorted(numbers)\n    return ' '.join(sorted_numbers)\n\nif __name__ == '__main__':\n    print(sort_numbers('three one five'))"}
{"task_id": "HumanEval/20", "completion": "    def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n        \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n        other and return them in order (smaller number, larger number).\n        >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n        (2.0, 2.2)\n        >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n        (2.0, 2.0)\n        \"\"\"\n        closest = numbers.copy()\n        closest.remove(numbers[0])\n        closest.remove(numbers["}
{"task_id": "HumanEval/21", "completion": "    rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    # Output: [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "HumanEval/22", "completion": "    filtered_list = []\n    for value in values:\n        if isinstance(value, int):\n            filtered_list.append(value)\n    return filtered_list"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    if n < 0:\n        print(\"Incorrect input\")\n    elif n == 0:\n        return 1\n    else:\n        for i in range(2, n):\n            if n % i == 0 and i < n:\n                return i\n        return n - n % 5"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    while n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                break\n        else:\n            factors.append(n)\n        n //= i\n\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    numbers = [1, 2, 3, 4]"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(reversed(string))"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return strings.filter(lambda s: s.startswith(prefix))"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    if len(xs) % 2 == 0:\n        for i in range(len(xs) // 2):\n            if xs[i] != 0:\n                break\n        else:\n            return 0"}
{"task_id": "HumanEval/33", "completion": "    def sort_third(l: list):\n        l.sort()\n        return l[::3]"}
{"task_id": "HumanEval/34", "completion": "    unique_list = []\n    for num in l:\n        if num not in unique_list:\n            unique_list.append(num)\n    return unique_list"}
{"task_id": "HumanEval/35", "completion": "    return max(l)"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    def sort_even(l: list):\n        l.sort()\n        return l"}
{"task_id": "HumanEval/38", "completion": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    else:\n        for i in range(len(l)):\n            for j in range(i+1, len(l)):\n                if l[i] + l[j] + l[i+1] == 0:\n                    return True\n        return False"}
{"task_id": "HumanEval/41", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        return 1 + car_race_collision(n-1)"}
{"task_id": "HumanEval/42", "completion": "    def incr_list(l: list):\n        for i in l:\n            l.append(i + 1)\n        return l"}
{"task_id": "HumanEval/43", "completion": "    for i in l:\n        for j in l:\n            if i + j == 0:\n                return True\n        return False"}
{"task_id": "HumanEval/44", "completion": "    def change_base(x: int, base: int):\n        if base < 10:\n            result = bin(x).replace(b'0b', str(base))\n        else:\n            result = bin(x).replace(b'0', str(base))\n        return result\n\n    print(change_base(8, 3))\n    print(change_base(8, 2))\n    print(change_base(7, 2))"}
{"task_id": "HumanEval/45", "completion": "    return (a * (a + h) ** 2) / 2"}
{"task_id": "HumanEval/46", "completion": "    def fib4(n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 0\n        else:\n            return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"}
{"task_id": "HumanEval/47", "completion": "    if len(l) % 2 == 0:\n        n = len(l) // 2\n        return (l[n-1] + l[n-1]) / 2\n    else:\n        return l[len(l) // 2]"}
{"task_id": "HumanEval/48", "completion": "    if text == text[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/49", "completion": "    if n % p == 0:\n        return n // p\n    else:\n        return n - p + 1"}
{"task_id": "HumanEval/50", "completion": "    decoded_string = \"\"\n    for char in s:\n        decoded_string += chr(ord(char) - 5)\n    return decoded_string"}
{"task_id": "HumanEval/51", "completion": "    def remove_vowels(text):\n        vowels = set(['a', 'e', 'i', 'o', 'u'])\n        result = ''\n        for char in text:\n            if char not in vowels:\n                result += char\n        return result"}
{"task_id": "HumanEval/52", "completion": "    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    if s0 == s1:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/55", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "    if len(brackets) == 0:\n        return False\n    for i in range(len(brackets)-1):\n        if brackets[i] != brackets[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/57", "completion": "    if len(l) == 0:\n        return False\n    elif len(l) == 1:\n        return l[0] >= l[1]\n    else:\n        for i in range(1, len(l)):\n            if l[i] < l[i-1]:\n                return False\n        return True"}
{"task_id": "HumanEval/58", "completion": "    result = []\n    for i in l1:\n        if i in l2:\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/59", "completion": "    if n > 1 and n % 2 == 0:\n        return n // 2\n    else:\n        return n - 1"}
{"task_id": "HumanEval/60", "completion": "    def sum_to_n(n: int):\n        result = 0\n        for i in range(1, n+1):\n            result = result + i\n        return result"}
{"task_id": "HumanEval/61", "completion": "    if len(brackets) % 2 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/62", "completion": "    return [1, 4, 12, 20]"}
{"task_id": "HumanEval/63", "completion": "    def fibfib(n):\n        if n<0:\n            print(\"Incorrect input\")\n        elif n==1:\n            return 0\n        elif n==2:\n            return 1\n        else:\n            return fibfib(n-1)+fibfib(n-2)+fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "    def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_count = 0\n    for char in s:\n        if char in vowels:\n            vowels_count += 1\n    return vowels_count"}
{"task_id": "HumanEval/65", "completion": "    if shift > len(str(x)):\n        return str(x)[:-shift]\n    else:\n        return str(x)[-shift:]"}
{"task_id": "HumanEval/66", "completion": "    def digitSum(s):\n        sum = 0\n        for char in s:\n            sum += ord(char)\n        return sum\n\ndigitSum(\"\") # returns 0\ndigitSum(\"abAB\") # returns 131\ndigitSum(\"abcCd\") # returns 67\ndigitSum(\"helloE\") # returns 69\ndigitSum(\"woArBld\") # returns 131\ndigitSum(\"aAaaaXa\") # returns 153"}
{"task_id": "HumanEval/67", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 4\n    elif n == 6:\n        return 5\n    elif n == 7:\n        return 6\n    elif n == 8:\n        return 7\n    elif n == 9:\n        return 8\n    elif n == 10:\n        return 9\n    elif n == 11:\n        return 10\n    elif n == 12:\n        return 11\n    elif n == 13:\n        return 12\n    elif n == 14:\n        re"}
{"task_id": "HumanEval/68", "completion": "    def pluck(arr):\n        smallest_value = arr[0]\n        smallest_index = 0\n        for i in range(1, len(arr)):\n            if arr[i] % 2 == 0:\n                smallest_value = arr[i]\n                smallest_index = i\n        return [smallest_value, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "    def search(lst):\n    greatest = -1\n    for i in lst:\n        if i > 0 and (i > greatest or (i == greatest and lst.count(i) >= i)):\n            greatest = i\n    return greatest"}
{"task_id": "HumanEval/70", "completion": "    result = []\n    while len(lst) > 0:\n        min_idx = 0\n        max_idx = 0\n        for i in range(len(lst)):\n            if lst[i] < lst[min_idx]:\n                min_idx = i\n        for i in range(len(lst)):\n            if lst[i] > lst[max_idx]:\n                max_idx = i\n        lst.remove(lst[min_idx])\n        lst.remove(lst[max_idx])\n        result.append(lst.pop(min_idx))\n        result.append(lst.pop(max_idx))\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if (a + b > c) and (a + c > b) and (b + c > a):\n        area = (a + b + c) / 2\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    def will_it_fly(q, w):\n        if len(q) == 1:\n            return q[0] < w\n        elif len(q) == 2:\n            return q[0] + q[1] < w\n        else:\n            return False"}
{"task_id": "HumanEval/73", "completion": "    arr = [1, 2, 3, 4, 5, 6, 7, 9]\n    smallest_change(arr) == 4"}
{"task_id": "HumanEval/74", "completion": "    def total_match(lst1, lst2):\n        if len(lst1) != len(lst2):\n            if len(lst1) < len(lst2):\n                return lst1\n        else:\n            return lst2"}
{"task_id": "HumanEval/75", "completion": "    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True"}
{"task_id": "HumanEval/76", "completion": "    def is_simple_power(x, n):\n        if int(x**n) == x:\n            return True\n        else:\n            return False"}
{"task_id": "HumanEval/77", "completion": "    def iscube(a):\n        if a == 0:\n            return True\n        if a % 3 == 0:\n            return True\n        return False"}
{"task_id": "HumanEval/78", "completion": "    def hex_key(num):\n        hex_num = num.upper()\n        count = 0\n        for i in range(len(hex_num)):\n            if hex_num[i] in ('A', 'B', 'C', 'D', 'E', 'F'):\n                count += 1\n        return count"}
{"task_id": "HumanEval/79", "completion": "    def decimal_to_binary(decimal):\n    binary = bin(decimal)\n    binary = binary[2:]\n    return ''.join(reversed(binary)) + 'db' + ''.join(reversed(binary))"}
{"task_id": "HumanEval/80", "completion": "    if len(s) >= 3 and all(letters.isupper() for letters in s):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/81", "completion": "    def numerical_letter_grade(grades):\n        letter_grades = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n        return [letter_grades[x] for x in grades]"}
{"task_id": "HumanEval/82", "completion": "    def prime_length(string):\n        if len(string) <= 1:\n            return True\n        for i in range(2, len(string)):\n            if string[i] == string[i-1] + 1:\n                return False\n        return True"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(2,n):\n        if (n % i == 0 and i == 1 or n % i == 1 and i > 1):\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "    result = bin(N)\n    while len(result) < 8:\n        result = '0' + result\n    return result"}
{"task_id": "HumanEval/85", "completion": "    return lst[::2]"}
{"task_id": "HumanEval/86", "completion": "    def anti_shuffle(s):\n        arr = sorted(s.lower().ascii_lowercase())\n        return ''.join(reversed(arr))"}
{"task_id": "HumanEval/87", "completion": "    def get_row(lst, x):\n        \"\"\"\n        You are given a 2 dimensional data, as a nested lists,\n        which is similar to matrix, however, unlike matrices,\n        each row may contain a different number of columns.\n        Given lst, and integer x, find integers x in the list,\n        and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n        each tuple is a coordinate - (row, columns), starting with 0.\n        Sort coordinates initially by rows in ascending order.\n        Also, sort coordinates of the row by columns in descending order.\n        \n        Examples:\n        get_row([\n          [1,2,3,4,5,6],\n          [1,2,3,4,1,6],\n          [1,2,3,4"}
{"task_id": "HumanEval/88", "completion": "    def sort_array(array):\n        if sum(array) % 2 == 0:\n            return array[::-1]\n        else:\n            return array"}
{"task_id": "HumanEval/89", "completion": "    def encrypt(s):\n        encrypted_string = \"\"\n        for char in s:\n            index = ord(char) + 2 * (len(s) - 1)\n            encrypted_string += chr(index)\n        return encrypted_string"}
{"task_id": "HumanEval/90", "completion": "    def next_smallest(lst):\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        min_idx = 0\n        for i in range(1, len(lst)):\n            if lst[i] < lst[min_idx]:\n                min_idx = i\n        return lst[min_idx]"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    for word in S.split():\n        if word.startswith(\"I\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    def any_int(x, y, z):\n        if int(x) + int(y) + int(z) == 0:\n            return True\n        else:\n            return False"}
{"task_id": "HumanEval/93", "completion": "    def encode(message):\n        output = \"\"\n        for char in message:\n            index = ord(char)\n            if char.isalpha():\n                if char.islower():\n                    output += chr(index + 2)\n                elif char.isupper():\n                    output += chr(index + 1)\n                else:\n                    output += char\n        return output"}
{"task_id": "HumanEval/94", "completion": "    result = 0\n    for i in lst:\n        result = result * 10 + int(i)\n    return result"}
{"task_id": "HumanEval/95", "completion": "    def check_dict_case(dict):\n        if not dict:\n            return False\n        for key in dict:\n            if key.isupper():\n                return False\n        return True"}
{"task_id": "HumanEval/96", "completion": "    def count_up_to(n):\n        primes = []\n        for i in range(2,n+1):\n            for j in range(2,i):\n                if i % j == 0:\n                    break\n            else:\n                primes.append(i)\n        return primes"}
{"task_id": "HumanEval/97", "completion": "    if int(a) * int(b) > 0:\n        return int(a) * int(b)\n    else:\n        return 0"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    def closest_integer(value):\n        low = 0\n        high = abs(value)\n        while low <= high:\n            mid = (low + high) // 2\n            if mid * 2 == value:\n                return mid\n            elif mid * 2 < value:\n                low = mid + 1\n            else:\n                high = mid - 1\n\n        return low - 1"}
{"task_id": "HumanEval/100", "completion": "    if n % 2 == 0:\n        return [0, 0, 0]\n    else:\n        return [1, 3, 5]"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "    if x > y:\n        return x - y + 1\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": "    def rounded_avg(n, m):\n        if n > m:\n            return -1\n        sum = 0\n        for i in range(n, m + 1):\n            sum += bin(i)\n        return round(sum, 2)"}
{"task_id": "HumanEval/104", "completion": "    unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    unique_digits([152, 323, 1422, 10])\n    []"}
{"task_id": "HumanEval/105", "completion": "    arr = [2, 1, 1, 4, 5, 8, 2, 3]\n    result = [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    return result"}
{"task_id": "HumanEval/106", "completion": "    def f(n):\n        result = [1]\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                result.append(factorial(i))\n            else:\n                result.append(sum(range(1, i)))\n        return result"}
{"task_id": "HumanEval/107", "completion": "    def even_odd_palindrome(n):\n        even = 0\n        odd = 0\n        for i in range(1, n):\n            if n % i == 0:\n                even += 1\n            else:\n                odd += 1\n        return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "    def count_nums(arr):\n        count = 0\n        for num in arr:\n            if num > 0:\n                count += 1\n        return count\n\n    assert count_nums([]) == 0\n    assert count_nums([-1, 11, -11]) == 1\n    assert count_nums([1, 1, 2]) == 3"}
{"task_id": "HumanEval/109", "completion": "    arr = [3, 4, 5, 1, 2]\n    if move_one_ball(arr):\n        print(\"Possible\")\n    else:\n        print(\"Impossible\")"}
{"task_id": "HumanEval/110", "completion": "    if len(lst1) != len(lst2):\n        return \"NO\"\n\n    for i in range(len(lst1)):\n        if lst1[i] != lst2[i]:\n            return \"NO\"\n\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "    result = {}\n    for letter in test.lower():\n        if letter in result:\n            result[letter] += 1\n        else:\n            result[letter] = 1\n    \n    return result"}
{"task_id": "HumanEval/112", "completion": "    def reverse_delete(s,c):\n        result = \"\"\n        for i in range(len(s)):\n            if s[i] != c:\n                result += s[i]\n        return result, True\n\n    reverse_delete(\"abcde\", \"ae\")\n    # Output: ('bcd', False)\n\n    reverse_delete(\"abcdef\", \"b\")\n    # Output: ('acdef', False)\n\n    reverse_delete(\"abcdedcba\", \"ab\")\n    # Output: ('cdedc', True)"}
{"task_id": "HumanEval/113", "completion": "    output = []\n    for i in range(len(lst)):\n        num = 0\n        for j in range(len(lst[i])):\n            if lst[i][j] % 2 != 0:\n                num += 1\n        output.append(num)\n    return output"}
{"task_id": "HumanEval/114", "completion": "    def minSubArraySum(nums):\n        min_sum = nums[0]\n        for i in range(1, len(nums)):\n            min_sum = min(min_sum + nums[i], nums[i])\n        return min_sum"}
{"task_id": "HumanEval/115", "completion": "    def max_fill(grid, capacity):\n        import math\n        \"\"\"\n        You are given a rectangular grid of wells. Each row represents a single well,\n        and each 1 in a row represents a single unit of water.\n        Each well has a corresponding bucket that can be used to extract water from it, \n        and all buckets have the same capacity.\n        Your task is to use the buckets to empty the wells.\n        Output the number of times you need to lower the buckets.\n\n        Example 1:\n            Input: \n                grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n                bucket_capacity : 1\n            Output: 6\n\n        Example 2:\n            Input: \n                grid : [[0,0,1,1],"}
{"task_id": "HumanEval/116", "completion": "    def sort_array(arr):\n        arr.sort()\n        return arr"}
{"task_id": "HumanEval/117", "completion": "    def select_words(s, n):\n        result = []\n        for word in s.split():\n            if len(word.split()) == n:\n                result.append(word)\n        return result"}
{"task_id": "HumanEval/118", "completion": "    def get_closest_vowel(word):\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        start = 0\n        end = len(word)-1\n        while start < end:\n            mid = (start+end) // 2\n            if word[mid] in vowels:\n                return word[mid]\n            elif word[mid] == 'y':\n                start = mid + 1\n            else:\n                end = mid - 1\n        return ''"}
{"task_id": "HumanEval/119", "completion": "    if len(lst) == 1:\n        if lst[0] == '(':\n            return 'Yes'\n        else:\n            return 'No'\n    elif len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    sum = 0\n    for num in lst:\n        if num % 2 != 0:\n            sum += num\n    return sum"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(k):\n        sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    def get_odd_collatz(n):\n        if n < 0:\n            print(\"Incorrect input\")\n        elif n == 0:\n            return [1]\n        elif n == 1:\n            return [1]\n        else:\n            odd_list = []\n            while n > 1:\n                odd_list.append(n % 2)\n                n //= 2\n            return sorted(odd_list)"}
{"task_id": "HumanEval/124", "completion": "    def valid_date(date):\n        if date is not None and len(date.split('-')) == 3 and int(date.split('-')[0]) < 1 and int(date.split('-')[1]) < 12 and int(date.split('-')[2]) < 30 and int(date.split('-')[2]) % 4 == 0 and int(date.split('-')[2]) % 100 == 0 and int(date.split('-')[2]) % 400 == 0:\n            return True\n        else:\n            return False\n\n    print(valid_date('03-11-2000'))\n    print(valid_date('15-01-2012'))\n    print(valid_date('04-0-2040'))\n    pr"}
{"task_id": "HumanEval/125", "completion": "    def split_words(txt):\n        words = txt.split()\n        return words\n\n    print(split_words(\"Hello world!\"))\n    print(split_words(\"Hello, world!\"))\n    print(split_words(\"abcdef\"))"}
{"task_id": "HumanEval/126", "completion": "    def is_sorted(lst):\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)):\n                if lst[i] > lst[j]:\n                    return False\n        return True"}
{"task_id": "HumanEval/127", "completion": "    if (start1 <= end1) and (start2 <= end2):\n        if (start1 == end1) and (start2 == end2):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "    if arr:\n        result = 0\n        for i in arr:\n            result = result * i\n        return result\n    else:\n        return None"}
{"task_id": "HumanEval/129", "completion": "    def minPath(grid, k):\n        min_path = []\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == k:\n                    min_path.append(grid[i][j])\n        return min_path"}
{"task_id": "HumanEval/130", "completion": "    def tri(n):\n        if n < 0:\n            print(\"Incorrect input\")\n        elif n == 0:\n            return [0]\n        elif n == 1:\n            return [1]\n        elif n == 2:\n            return [1, 1]\n        else:\n            return [tri(n-1), tri(n-2), tri(n-1) + tri(n-2) + tri(n+1)]"}
{"task_id": "HumanEval/131", "completion": "    if len(str(n)) % 2 != 0:\n        return n % 10**(len(str(n))//2)\n    else:\n        return 0"}
{"task_id": "HumanEval/132", "completion": "    def is_nested(string):\n        stack = []\n        for char in string:\n            if char == '[':\n                stack.append(char)\n            elif char == ']':\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n        return len(stack) >= 1 and is_nested(stack.pop())"}
{"task_id": "HumanEval/133", "completion": "    sum = 0\n    for num in lst:\n        sum += round(num, 0)**2\n    return round(sum, 0)"}
{"task_id": "HumanEval/134", "completion": "    def check_if_last_char_is_a_letter(txt):\n        last_char = txt[-1]\n        if last_char.isalpha() and last_char != ' ':\n            return True\n        else:\n            return False"}
{"task_id": "HumanEval/135", "completion": "    def can_arrange(arr):\n        arr.sort()\n        return arr.index(arr[0]) + 1"}
{"task_id": "HumanEval/136", "completion": "    def largest_smallest_integers(lst):\n        if not lst:\n            return (None, None)\n\n        largest = max(lst)\n        smallest = min(lst)\n\n        if smallest > 0:\n            return (largest, smallest)\n        else:\n            return (None, None)"}
{"task_id": "HumanEval/137", "completion": "    def compare_one(a, b):\n        if type(a) is int:\n            if type(b) is int:\n                if a > b:\n                    return a\n                else:\n                    return b\n        elif type(a) is float:\n            if type(b) is float:\n                if a > b:\n                    return a\n                else:\n                    return b\n        elif type(a) is str:\n            if type(b) is str:\n                if a > b:\n                    return a\n                else:\n                    return b\n        else:\n            return None"}
{"task_id": "HumanEval/138", "completion": "    if n == 4:\n        return True\n    elif n == 6:\n        return False\n    elif n == 8:\n        return True"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    def fix_spaces(text):\n        text = text.replace(\" \", \"_\")\n        if text.count(\" \") > 2:\n            text = text.replace(\" \", \"-\")\n        return text\n    \n    print(fix_spaces(\"Example\"))\n    print(fix_spaces(\"Example 1\"))\n    print(fix_spaces(\" Example 2\"))\n    print(fix_spaces(\" Example   3\"))"}
{"task_id": "HumanEval/141", "completion": "    def file_name_check(file_name):\n        if re.match(\"^[a-zA-Z0-9]{1,3}\\.([a-zA-Z0-9]{1,3}\\.[a-zA-Z0-9]{1,3}$\", file_name):\n            return \"Yes\"\n        else:\n            return \"No\""}
{"task_id": "HumanEval/142", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/143", "completion": "    def words_in_sentence(sentence):\n        words = sentence.split()\n        result = []\n        for word in words:\n            if len(word) % 1 == 0:\n                result.append(word)\n        return ' '.join(result)"}
{"task_id": "HumanEval/144", "completion": "    def simplify(x, n):\n        if int(x) * int(n) == int(x * n):\n            return True\n        else:\n            return False"}
{"task_id": "HumanEval/145", "completion": "    def order_by_points(nums):\n        sorted_list = []\n        for num in nums:\n            sum = 0\n            for digit in num:\n                sum += digit\n            sorted_list.append(num)\n        return sorted_list\n\n    assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]"}
{"task_id": "HumanEval/146", "completion": "    def specialFilter(nums):\n        count = 0\n        for num in nums:\n            if (num % 10) % 2 == 1 and (num % 10) % 2 == 1:\n                count += 1\n        return count"}
{"task_id": "HumanEval/147", "completion": "    a = [1, 3, 7, 13, 21]\n    return 1"}
{"task_id": "HumanEval/148", "completion": "    def bf(planet1, planet2):\n        planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n        if planet1 not in planets or planet2 not in planets:\n            return planets\n        else:\n            return planets.remove(planet1), planets.remove(planet2)"}
{"task_id": "HumanEval/149", "completion": "    def list_sort(lst):\n    sorted_list = []\n    for word in lst:\n        if len(word) % 2 != 0:\n            continue\n        sorted_list.append(word)\n    return sorted_list"}
{"task_id": "HumanEval/150", "completion": "    if n % 2 == 0:\n        return y\n    else:\n        return x"}
{"task_id": "HumanEval/151", "completion": "    def double_the_difference(lst):\n        result = 0\n        for num in lst:\n            if num % 2 != 0:\n                result += num ** 2\n        return result"}
{"task_id": "HumanEval/152", "completion": "    def compare(game, guess):\n        diff = 0\n        for i in range(len(game)):\n            if game[i] != guess:\n                diff += abs(game[i] - guess)\n        return diff"}
{"task_id": "HumanEval/153", "completion": "    def Strongest_Extension(class_name, extensions):\n        extensions.sort()\n        return class_name + \".\" + extensions[0]"}
{"task_id": "HumanEval/154", "completion": "    if (a.find(b) != -1 or a.find(b.upper()) != -1 or a.find(b.lower()) != -1):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/155", "completion": "    def even_odd_count(num):\n        if int(num) % 2 == 0:\n            return (1, 0)\n        else:\n            return (0, 1)"}
{"task_id": "HumanEval/156", "completion": "    def int_to_mini_roman(number):\n        result = \"\"\n        while number > 0:\n            remainder = number % 1000\n            result = f'{remainder}{result}'\n            number //= 1000\n        return result.lower()\n\nint_to_mini_roman(19) == 'xix'\nint_to_mini_roman(152) == 'clii'\nint_to_mini_roman(426) == 'cdxxvi'"}
{"task_id": "HumanEval/157", "completion": "    if (a**2 + b**2 == c**2):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    def find_max(words):\n        max_chars = 0\n        max_word = \"\"\n        for word in words:\n            char_count = len(word)\n            if char_count > max_chars:\n                max_chars = char_count\n                max_word = word\n        return max_word"}
{"task_id": "HumanEval/159", "completion": "    def eat(number, need, remaining):\n        \"\"\"\n        You're a hungry rabbit, and you already have eaten a certain number of carrots,\n        but now you need to eat more carrots to complete the day's meals.\n        you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n        if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n        Example:\n        * eat(5, 6, 10) -> [11, 4]\n        * eat(4, 8, 9) -> [12, 1]\n        * eat(1, 10, 10) -> [11, 0]\n        *"}
{"task_id": "HumanEval/160", "completion": "    result = 0\n    for i in range(len(operator) - 1):\n        result = result * operator[i](operand[i], operand[i + 1])\n    return result"}
{"task_id": "HumanEval/161", "completion": "    def solve(s):\n    if s[i] in string.ascii_lowercase:\n        return s[i].upper()\n    elif s[i] in string.ascii_uppercase:\n        return s[i].lower()\n    else:\n        return s[i]\n\n    return s"}
{"task_id": "HumanEval/162", "completion": "    if text:\n        return hashlib.md5(text).hexdigest()\n    else:\n        return None"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    while a < b:\n        result.append(a)\n        a = a * 10 + b % 10\n        b = b // 10\n    return result"}

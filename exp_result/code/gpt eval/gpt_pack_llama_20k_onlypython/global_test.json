[{"instruction": "Create a Python class for a car with two methods.", "input": "", "output": "class Car:\n    def __init__(self, color, model):\n        self.color = color\n        self.model = model\n    \n    def start(self):\n        print(\"Starting car\")\n\n    def stop(self):\n        print(\"Stopping car\")", "category": "Python"}, {"instruction": "How can a string be converted to a list in Python?", "input": "", "output": "A string can be converted to a list in Python by using the list() function. The syntax for this is: \n\nlist(string);\n\nFor example, to convert the string \"apple\" to a list, you would use: \n\nlist(\"apple\");", "category": "Python"}, {"instruction": "Write a code to get the age of a person given their year of birth.", "input": "born_year = 2003", "output": "# Get the age of a person given their year of birth\nfrom datetime import date\n\ndef get_age(born_year):\n    # Get current year\n    today_year = date.today().year\n    \n    # Compute the age\n    age = today_year - born_year\n    \n    # Return the result\n    return age", "category": "Python"}, {"instruction": "Generate a syntax correct program which reverses a given linked list", "input": "", "output": "def reverse_list(head): \n    curr = head \n    prev = None\n\n    while curr is not None: \n        next_ = curr.next\n        curr.next = prev \n        prev = curr \n        curr = next_\n\n    head = prev \n    return head", "category": "Python"}, {"instruction": "Write a code to generate a random password with a given length.", "input": "", "output": "import random\nimport string\n\ndef generate_password(length):\n    chars = string.ascii_letters + string.digits + '!@#$%^&*()'\n    random.seed = (random.SystemRandom().random())\n    return ''.join(random.choice(chars) for i in range(length))\n\nprint(generate_password(10))  # Output is an alphanumeric string of length 10", "category": "Python"}, {"instruction": "Write a Python script to convert the given list of strings into a comma separated string.", "input": "[ 'John', 'Julia', 'JeY', 'Jill' ]", "output": "list = [ 'John', 'Julia', 'JeY', 'Jill' ]\nprint( ', '.join(list) )", "category": "Python"}, {"instruction": "Given the python code below, reverse the order of the lines to form a valid program.", "input": "def myFunc(): \n    print(1) \n    return \nprint(2)", "output": "def myFunc(): \n    print(2) \n    return \nprint(1)", "category": "Python"}, {"instruction": "Write a Python program to replace the last element in a list with another given element.", "input": "lst = [1, 2, 3, 4]\nelement = 5", "output": "def replace_last(lst, element):\n    lst[-1] = element\n    return lst", "category": "Python"}, {"instruction": "Find the maximum number in the given array without using an inbuilt function", "input": "Array = [3, 1, 7, 5, 8]", "output": "maxNum = 0\nfor num in array: \n    if num > maxNum: \n        maxNum = num \n\nOutput:\n8", "category": "Python"}, {"instruction": "Rewrite the following Python program to sort the numbers in an array in ascending order.", "input": "list = [5, 1, 0, 4, 7]", "output": "def sort(list): \n    for i in range(len(list)-1): \n        for j in range(0, len(list)-i-1): \n            if list[j] > list[j+1] : \n                list[j], list[j+1] = list[j+1], list[j] \n                \nlist = [5, 1, 0, 4, 7]\nsort(list) \n\nprint (\"Sorted list is:\") \nprint(list)", "category": "Python"}, {"instruction": "Create a function to find the position of a substring in a string", "input": "", "output": "def find_substring(string, substring):\n    \"\"\"\n    Find the position of a substring in a string\n    :param string: the string\n    :param substring: the substring to find\n    :return: the position of the substring in the string\n    \"\"\"\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            return i\n    return -1  # substring not found", "category": "Python"}, {"instruction": "Create a command to delete a folder with all its contents.", "input": "/root/folder", "output": "import os \ndef remove_folder(folder): \n    for filename in os.listdir(folder): \n        file_path = os.path.join(folder, filename) \n        try: \n            if os.path.isfile(file_path) or os.path.islink(file_path): \n                os.unlink(file_path) \n            elif os.path.isdir(file_path): \n                shutil.rmtree(file_path) \n        except Exception as e: \n            print('Failed to delete %s. Reason: %s' % (file_path, e))   \nremove_folder('/root/folder')", "category": "Python"}, {"instruction": "Identify all person names in the following text using python.", "input": "John, Paul, and George went to the park.", "output": "import re\ntext = \"John, Paul, and George went to the park.\"\npersons = re.findall(r\"\\w+\", text)\nprint(persons) # [\"John\", \"Paul\", \"and\", \"George\"]", "category": "Python"}, {"instruction": "Write a code snippet to find all the Pythagorean triplets which sum up to the given number.", "input": "", "output": "def find_triplet(n):\n    \"\"\"\n    @brief: Finds all Pythagorean triplets which sum upto the given number n\n    @param n: the sum which is the given number \n    @return: a list of all Pythagorean triplets which might sum upto n, or an empty list if none are found\n    \"\"\"\n    triplets = []\n    for a in range(1, n):\n        for b in range(a + 1, n - a):\n            c = int(n - a - b)\n            if (a*a) + (b*b) == (c*c):\n                triplets.append((a, b, c))\n    return triplets", "category": "Python"}, {"instruction": "Write a TensorFlow program to construct a basic neural network", "input": "", "output": "import tensorflow as tf\n\n# Set up the layers for the model\nmodel = tf.keras.models.Sequential([\n    # Set up the first layer\n    tf.keras.layers.Dense(64, input_shape = (784, ), activation = 'relu'),\n    # Set up the second layer\n    tf.keras.layers.Dense(64, activation = 'relu'),\n    # Set up the output layer\n    tf.keras.layers.Dense(10, activation = 'softmax')\n])\n\n# Compile the model\nmodel.compile(\n  optimizer = 'adam',\n  loss = 'sparse_categorical_crossentropy',\n  metrics = ['accuracy']\n)", "category": "Python"}, {"instruction": "Construct an algorithm to delete duplicate characters from a string", "input": "", "output": "def delete_duplicates(string):\n    letters = set()\n    newstring = \"\"\n    for char in string:\n        if char in letters:\n            continue\n        else:\n            letters.add(char)\n            newstring += char\n    return newstring", "category": "Python"}, {"instruction": "Create a function to generate a random number within the range of 0 and 1000.", "input": "", "output": "import random\n\ndef random_in_range():\n    return random.randint(0, 1000)", "category": "Python"}, {"instruction": "Write a Python function to calculate the factorial of a number (a non-negative integer).", "input": "", "output": "def factorial(num):\n    \"\"\"\n    Calculates factorial of a given number.\n    \"\"\"\n    # Base case\n    if num == 0:\n        return 1\n    # Recursion\n    else:\n        return num * factorial(num-1)", "category": "Python"}, {"instruction": "Write a function that returns the day of the week given a date.", "input": "date = '2020-12-30'", "output": "date = '2020-12-30'\n\nimport datetime\n\ndef getDayofWeek(date):\n    # Convert the string to datetime\n    d = datetime.datetime.strptime(date, \"%Y-%m-%d\")\n    # Return the day of the week\n    return d.strftime(\"%A\")\n\nprint(f\"The day of the week for {date} is {getDayofWeek(date)}.\")", "category": "Python"}, {"instruction": "What does the 'break' keyword do in a loop structure in Python and how is it used?", "input": "", "output": "The 'break' keyword is used to break out of a loop prematurely. It causes an immediate exit from the loop, bypassing any remaining code in the loop. It is generally used inside a conditional statement, such as an 'if' statement, as it can be used to stop the loop from executing when a certain condition is satisfied. For example:\n\nfor number in range(10):\n if number == 5:\n  break\n print(number)\n\nThis code will print the numbers 0 through 4 and will exit the loop once it reaches the number 5. If the 'break' statement is not used the loop will continue and print all the numbers up to 9.", "category": "Python"}, {"instruction": "Create a function to accept an array of integers and return an array with the corresponding squares of each element.", "input": "arr = [1, 2, 3, 4]", "output": "def array_sqr(arr):\n    return [x*x for x in arr]\n\nprint(array_sqr(arr))", "category": "Python"}, {"instruction": "Convert the following SQL query to its equivalent Python expression.\n\nSELECT name FROM students WHERE age > 18", "input": "", "output": "[student['name'] for student in students if student['age'] > 18]", "category": "Python"}, {"instruction": "Write a function to generate a random 5 letter string.", "input": "", "output": "import random\n\ndef generate_random_5_letter_string():\n    res = \"\"\n    for i in range(5):\n        res += chr(random.randint(97, 122))\n    return res\n\nif __name__ == '__main__':\n    print(generate_random_5_letter_string())", "category": "Python"}, {"instruction": "Create a Python script that converts temperatures from Fahrenheit to Celsius.", "input": "", "output": "def fahrenheit_to_celsius(temperature):\n    \"\"\"\n    This function converts temperatures in Fahrenheit to Celsius.\n    \"\"\"\n    celsius = (temperature - 32) * 5/9 \n    return celsius\n\nif __name__ == '__main__':\n    temperature = float(input('Enter temperature in Fahrenheit: '))\n    print('Temperature in Celcius is: {:.2f}'.format(fahrenheit_to_celsius(temperature)))", "category": "Python"}, {"instruction": "Given two strings, write a Python function to check if they are anagrams.", "input": "", "output": "def check_anagrams(str1, str2): \n \n    if (len(str1) != len(str2)): \n        return False \n  \n    # sorting both strings \n    str1_list = sorted(str1) \n    str2_list = sorted(str2) \n  \n    # Check if both lists are equal \n    for i in range(0, len(str1_list)): \n        if str1_list[i] != str2_list[i]: \n            return False \n  \n    # If all characters were same \n    return True", "category": "Python"}, {"instruction": "Add a comment to explain the purpose of the following code.", "input": "for i in range(100):\n    print(i)", "output": "# Prints all numbers from 0 to 99\nfor i in range(100):\n    print(i)", "category": "Python"}, {"instruction": "Create a function to create a multiplication table for a given number.", "input": "Number: 5", "output": "def multiplication_table(num): \n      \n    for i in range(1, 11): \n        print(num, '*', i, '=', num*i) \n          \n# Driver code  \nmultiplication_table(5)", "category": "Python"}, {"instruction": "Write a script in Python to sort a list of words alphabetically.", "input": "", "output": "words = ['Apple','Banana','Cherry','Orange']\n\nwords.sort()\n\nprint(words)", "category": "Python"}, {"instruction": "How would you debug the following code?", "input": "def findNumberSum(numbers):\n    total = 0\n    for n in numbers:\n        total += n\n    return total", "output": "To debug the code, you could start by adding print statements at different places in the code to find out the output at each step. For instance, you could add print statements to print out the value of the \"total\" variable at the beginning, during and after the for loop, or to see the contents of the list \"numbers\". Then you can check what value is expected and what value is actually produced for every step, to identify the issue.", "category": "Python"}, {"instruction": "Complete the following function so that all strings in the list have a length of 5 characters.", "input": "lst = [\"aaa\", \"bb\", \"ccccc\", \"dddddd\"]", "output": "def make_length_five(lst):\n    '''This function will ensure that all strings in the list have a length of 5 characters.'''\n    for i in range(len(lst)):\n        if len(lst[i]) < 5:\n            lst[i] = lst[i] + ' ' * (5 - len(lst[i]))\n        elif len(lst[i]) > 5:\n            lst[i] = lst[i][:5]\n    return lst", "category": "Python"}, {"instruction": "Write a code in Python that takes two lists of equal lengths and generates a new list with the elements of both lists combined.", "input": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]", "output": "list3 = []\n\nfor i in range(len(list1)):\n    list3.append(list1[i])\n    list3.append(list2[i])", "category": "Python"}, {"instruction": "Suggest a design pattern to solve the following problem", "input": "A system needs to access different types of data from multiple data sources.", "output": "A good design pattern for solving this problem is the Adapter Pattern. This pattern allows the adapter to abstract away the different types of data sources and provide an interface for accessing the data from a single source. With this pattern, the system can easily access different types of data from multiple sources without having to handle the different data sources directly.", "category": "Python"}, {"instruction": "Create a program that outputs the results of an election.", "input": "votes = [(\"A\", 55), (\"B\", 43), (\"C\", 21)]", "output": "votes = [(\"A\", 55), (\"B\", 43), (\"C\", 21)]\n\ntotal = 0\nfor name, count in votes:\n    total += count\n\nfor name, count in votes:\n    print(\"{}: {:.2f}%\".format(name, count/total*100))\n\n# Output: \n# A: 59.77%\n# B: 47.60%\n# C: 23.63%", "category": "Python"}, {"instruction": "Find the longest increasing subsequence of a given array of numbers.", "input": "[10,22,9,33,21,50,41,60]", "output": "def longest_increasing_subsequence(arr):\n\n    n = len(arr)\n    lis = [1] * n \n\n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n    return max(lis)\n\narr = [10,22,9,33,21,50,41,60]\nlongest_increasing_subsequence(arr) # Returns 5", "category": "Python"}, {"instruction": "Create a function in Python to replace a specified element in a given list", "input": "", "output": "def replace_in_list(list, old_element, new_element):\n  for i, element in enumerate(list):\n    if element == old_element:\n      list[i] = new_element\n  return list", "category": "Python"}, {"instruction": "Write a code to generate a random password consisting of 8 characters with atleast one lowercase letter, one uppercase letter and one number.", "input": "", "output": "import string\nimport random \n\ndef generate_password():\n    password_characters = string.ascii_letters + string.digits\n    password = ''.join(random.choice(password_characters) for i in range(8))\n    if not any(char.islower() for char in password):\n        password = password[:7] + random.choice(string.ascii_lowercase)\n    if not any(char.isupper() for char in password):\n        password = password[:7] + random.choice(string.ascii_uppercase)\n    if not any(char.isdigit() for char in password):\n        password = password[:7] + random.choice(string.digits)\n    return password", "category": "Python"}, {"instruction": "Create a function that takes a string and converts the string to CamelCase.", "input": "string = \"this_is_a_string\"", "output": "def toCamelCase(string):\n    s = string.split('_')\n    return s[0] + ''.join(x.title() for x in s[1:])", "category": "Python"}, {"instruction": "Write a function that takes in a string and a character and returns the first index at which the character appears.", "input": "str = 'Hello World'\nchar = 'o'", "output": "def firstIndex(str, char): \n    index = -1\n    for i in range(len(str)):  \n        if (str[i] == char):  \n            index = i \n            break\n    return index \n\nresult = firstIndex(str, char) \nprint(result) # prints 4", "category": "Python"}, {"instruction": "Make a function which takes two numbers as arguments and returns their sum.", "input": "", "output": "\"\"\"\nFunction which takes two numbers as arguments and returns their sum\n\"\"\"\n\ndef add_numbers(x, y):\n    return x + y\n    \nif __name__ == '__main__':\n    x = int(input())\n    y = int(input())\n    print(add_numbers(x, y))", "category": "Python"}, {"instruction": "Write a Python function that takes two lists and returns a new list which contains only the unique elements from both of the lists.", "input": "list1=[1,2,3,4]\nlist2=[3,4,5,6]", "output": "def unique_from_two_lists(list1,list2):\n  return list(set(list1 + list2))", "category": "Python"}, {"instruction": "Describe a method for sorting a list of integers using selection sort.", "input": "list = [3, 6, 8, 9, 5]", "output": "def selection_sort(list):\n    # Traverse through all array elements \n    for i in range(len(list)): \n      \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        list[i], list[min_idx] = list[min_idx], list[i] \n  \n# Driver code to test above \nlist = [3, 6, 8, 9, 5] \nselection_sort(list) \nprint (\"Sorted array\") \nfor i in range(len(list)): \n    print(\"%d\" %list[i])", "category": "Python"}, {"instruction": "Generate a list with the numbers from 1 to 10 using Python.", "input": "", "output": "# Generate a list with the numbers from 1 to 10\nlistA = []\nfor i in range(1,11):\n    listA.append(i)\n    \nprint(listA)", "category": "Python"}, {"instruction": "generate a function minL that takes two lists and returns the smallest element from both lists.", "input": "list1 = [9, 11, 8, 10, 20] \nlist2 = [3, 10, 12]", "output": "\"\"\"\nGenerate a function minL that takes two lists and returns the smallest element from both lists.\n\"\"\"\n\ndef minL(list1, list2):\n    min_list = sorted(list1 + list2)\n    print('The minimum of list1 and list2 is: ', min_list[0]) \n\nif __name__ == '__main__': \n    list1 = [9, 11, 8, 10, 20] \n    list2 = [3, 10, 12] \n    minL(list1, list2)", "category": "Python"}, {"instruction": "Generate a dictionary with the name of the person as key and the cower letter of their name as value.", "input": "names = ['John', 'Max', 'Alice']", "output": "result = {} \nfor name in names: \n    # get the first letter from the name \n    first_letter = name[0] \n    result[name] = first_letter \n\nprint(result) \n# {'John': 'J', 'Max': 'M', 'Alice': 'A'}", "category": "Python"}, {"instruction": "Write a Python script to remove all the elements with value 3 from the following list.", "input": "[1, 2, 3, 4, 3, 5, 3]", "output": "my_list = [1, 2, 3, 4, 3, 5, 3]\n\nfiltered_list = [number for number in my_list if number != 3]", "category": "Python"}, {"instruction": "You need add two numbers without using '+' operator.", "input": "2 and 3", "output": "The solution is to use the bitwise XOR operator. The XOR operator will return a 1 if either of the two given numbers is a 1, but will return a 0 if both of them are either 1 or 0.\n\nTherefore, the solution is:\n\nnum1 = 2\nnum2 = 3\nresult = num1 ^ num2", "category": "Python"}, {"instruction": "Create a function in Python which takes in a list of numbers and returns the sum of all numbers.", "input": "[1,2,3,4,5]", "output": "def list_sum(num_list): \n \n    # initialize sum\n    Sum = 0\n \n    # traverse through all numbers\n    for num in num_list: \n        Sum += num \n  \n    # return Sum\n    return Sum \n  \n# test the above code\nlist1 = [1,2,3,4,5] \nprint(list_sum(list1)) \n\n# Output:\n15", "category": "Python"}, {"instruction": "Write a function for finding the minimum value in a given array.", "input": "", "output": "def find_min(arr):\n    min_value = arr[0]\n    for element in arr:\n        if (element < min_value):\n            min_value = element\n    return min_value", "category": "Python"}, {"instruction": "Complete the following line of code to successfully initiate a pandas dataframe without specifying column names or data.", "input": "", "output": "df = pd.DataFrame(data=None, columns=None)", "category": "Python"}, {"instruction": "Write a function that takes a string, checks if it is a palindrome, and returns a corresponding boolean value.", "input": "string = \"racecar\"", "output": "def is_palindrome(string):\n    # Reverse string \n    reversed_string = string[::-1]\n    # Compare strings\n    if string == reversed_string:\n        return True\n    else:\n        return False\n\n# Example\nstring = \"racecar\"\nprint(is_palindrome(string))\n# Output: True", "category": "Python"}, {"instruction": "Create a list of 10 strings in Python and print each string in a separate line.", "input": "", "output": "mylist = ['string1', 'string2', 'string3', 'string4', 'string5', 'string6', 'string7', 'string8', 'string9', 'string10']\nfor item in mylist:\n  print(item)", "category": "Python"}, {"instruction": "Design a data structure in Python to store customer contact details.", "input": "", "output": "#Create a class to store customer information\nclass ContactData:\n    def __init__(self, name, email, phone):\n        self.name = name\n        self.email = email\n        self.phone = phone\n\n#Create a dictionary to store the customer contact details\ncustomer_details = {}\n\n# function to add customer details in the dictionary\ndef add_customer_details(name, email, phone):\n    customer_details[name] = ContactData(name, email, phone)\n\n#Function to display customer details\ndef display_customer_details():\n    for key in customer_details.keys():\n        customer = customer_details[key]\n        print(\"Name: {}, Email: {}, Phone: {}\".format( \n            customer.name, customer.email, customer.phone))", "category": "Python"}, {"instruction": "Write a Python script to remove all the values that are greater than 30 from the list", "input": "list_of_num = [25, 12, 36, 118, 200, 30]", "output": "new_list = [num for num in list_of_num if num <= 30]", "category": "Python"}, {"instruction": "Build an algorithm to check if a given number is a prime number or not.", "input": "", "output": "def is_prime_number(num):\n    '''This algorithm will check if a given number is a prime number or not.'''\n    if num <= 1:\n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    return True\n\nif __name__ == '__main__':\n    num = 7\n    print(is_prime_number(num))", "category": "Python"}, {"instruction": "Edit this code to add a try-except block to catch any errors.", "input": "def repeat(string, repeats): \n    for i in range(repeats): \n        print(string) \n \nrepeat(\"Hello World!\", 5)", "output": "def repeat(string, repeats): \n    try:\n        for i in range(repeats): \n            print(string)\n    except:\n        print(\"Error occured\")\n \nrepeat(\"Hello World!\", 5)", "category": "Python"}, {"instruction": "Given an array of integers, calculate the sum of all even numbers in the array.", "input": "[ 5, 10, 15, 11, 22, 33, 28, 9]", "output": "def sum_even_numbers(arr):\n sum = 0\n for i in arr:\n if i % 2 == 0:\n sum += i\n return sum\n \nprint(sum_even_numbers([5, 10, 15, 11, 22, 33, 28, 9]))\n# Output: 70", "category": "Python"}, {"instruction": "Using the Python requests library, implement a call to the given URL and print the response.", "input": "URL: http://example.com", "output": "import requests\n\nresp = requests.get('http://example.com')\nprint(resp.text)", "category": "Python"}, {"instruction": "Create two classes in Python which inherits from a parent class called **Shape**.", "input": "", "output": "class Shape(object):\n  pass\n  \nclass Square(Shape):\n  def __init__(self, side):\n    self.side = side\n    \nclass Circle(Shape):\n  def __init__(self, radius):\n    self.radius = radius", "category": "Python"}, {"instruction": "Return the number of elements in a dictionary.", "input": "myDict = {'a':1, 'b':2, 'c':3}", "output": "def count_dict_elements(myDict):\n    count = 0\n    for key in myDict:\n        count += 1\n    return count\n        \nelement_nums = count_dict_elements(myDict)", "category": "Python"}, {"instruction": "Write a basic routine that takes in a JSON string and outputs the longest word found inside.", "input": "data = '{\"John\": 56, \"Ann\":64, \"Victor\": 23}'", "output": "def get_longest_word(json_string):\n    \"\"\"Return the longest word found inside the given json_string\"\"\"\n    words = []\n    data = json.loads(json_string)\n    for key,val in data.items():\n        words.append(key)\n    return max(words, key=len)", "category": "Python"}, {"instruction": "Sort a given list of strings in ascending order by length in Python.", "input": "list1 = [\"cat\", \"apple\", \"dog\", \"banana\"]", "output": "list2 = sorted(list1, key=len)\nprint(list2) #['cat', 'dog', 'apple', 'banana']", "category": "Python"}, {"instruction": "Write a Python program to create a list containing the squares of numbers between 1 and 50.", "input": "", "output": "def squares_list():\n squares = []\n for i in range(1, 51):\n squares.append(i**2)\n return squares", "category": "Python"}, {"instruction": "Write a code to search a word in a given string and get the index position.", "input": "word = 'Hello'\n\nstring = 'Hello World'", "output": "\"\"\"\nWrite a code to search a word in a given string and get the index position\n\"\"\"\n\ndef search_word(word, string):\n    return string.find(word)\n\nword = 'Hello'\nstring = 'Hello World'\n\nprint(search_word(word, string)) # print 0", "category": "Python"}, {"instruction": "Create a function to convert a given integer to a string in Python.", "input": "", "output": "def intToStr(n): \n\treturn str(n)\n\n# Driver Program \nintNum = 55\n  \n# Print the output \nprint(intToStr(intNum))", "category": "Python"}, {"instruction": "Create a program in Python to print the first 5 multiples of a number", "input": "Number: 7", "output": "for i in range(1, 6):\n    print(i * 7)", "category": "Python"}, {"instruction": "Create a program that ciphers a given text using the caesar cipher.", "input": "text = \"This is a secret message\"\nkey = 3", "output": "def caesar_cipher(text, key):\n    \"\"\"Cipher a given text using the Caesar Cipher.\"\"\"\n    ciphertext = \"\"\n    for char in text: \n        if not char.isalpha():\n            ciphertext += char\n            continue\n        offset = ord('a') if char.islower() else ord('A')\n        new_char = (ord(char) - offset + key) % 26\n        ciphertext += chr(offset + new_char)\n    return ciphertext", "category": "Python"}, {"instruction": "Design a basic game of rock, paper, scissors", "input": "", "output": "import random\n\ndef game():\n    options = ['rock', 'paper', 'scissors']\n\n    player1 = random.choice(options)\n    player2 = random.choice(options)\n\n    if player1 == 'rock' and player2 == 'scissors':\n        print(\"Player 1 Wins!\")\n    elif player1 == 'paper' and player2 == 'rock':\n        print(\"Player 1 Wins!\")\n    elif player1 == 'scissors' and player2 == 'paper':\n        print(\"Player 1 Wins!\")\n    elif player1 == 'scissors' and player2 == 'rock':\n        print(\"Player 2 Wins!\")\n    elif player1 == 'rock' and player2 == 'paper':\n        print(\"Player 2 Wins!\")\n    elif player1 == 'paper' and player2 == 'scissors':\n        print(\"Player 2 Wins!\")\n    else:\n        print(\"It's a draw!\")", "category": "Python"}, {"instruction": "Generate a python script that concatenates two strings.", "input": "String 1: \"foo\" \nString 2: \"bar\"", "output": "str1 = \"foo\" \nstr2 = \"bar\"\nconcatenated_str = str1 + str2\nprint(concatenated_str)", "category": "Python"}, {"instruction": "In Python, how can you iterate a list in reverse order?", "input": "", "output": "We can use the reversed() function to iterate a list in reverse order in Python. For example:\n\nmy_list = [1, 2, 3, 4]\n\nfor element in reversed(my_list):\n    print(element)", "category": "Python"}, {"instruction": "Write a function to tokenize a string into its characters.", "input": "sentence = \"Hello world!\"", "output": "def tokenize(sentence):\n    tokens = []\n    # loop through the characters in the sentence\n    for letter in sentence:\n        # append each character to the tokens list\n        tokens.append(letter)\n    return tokens", "category": "Python"}]
[{"instruction": "Compare two given lists to find the common elements and store the output in a new list.", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [2, 4, 6, 8, 10]", "output": "common_list = []\nfor num in list1:\n    if num in list2:\n        common_list.append(num)", "category": "Python"}, {"instruction": "Debug the following code and make sure the program runs as expected.", "input": "def number_divisible(x, y):\n      for i in range(x):\n            if i % y = 0 :\n                  print(i)", "output": "def number_divisible(x, y):\n      for i in range(x):\n            if i % y == 0 :\n                  print(i)", "category": "Python"}, {"instruction": "Use the requests library to write a Python program that sends an HTTP GET request.", "input": "url = \"http://example.com\"", "output": "import requests\n\nresponse = requests.get(url)", "category": "Python"}, {"instruction": "Create a Python class object to store data about a basketball player.", "input": "", "output": "class BasketballPlayer:\n def __init__(self, name, age, height, weight):\n self.name = name\n self.age = age\n self.height = height\n self.weight = weight", "category": "Python"}, {"instruction": "Use the numpy library to write a function that takes an array of integer values, and returns the average of all the values.", "input": "arr = [1, 2, 3, 4, 5]", "output": "import numpy as np\ndef average(arr):\n return np.average(arr)", "category": "Python"}, {"instruction": "Develop a Python code that takes a string as input and converts it to all uppercase.", "input": "string = \"Hello World\"", "output": "def toUpperCase(string):\n    return string.upper()", "category": "Python"}, {"instruction": "Generate a code in Python to generate a list containing multiplication table up to 10.", "input": "", "output": "multiplication_table = []\nfor i in range(1, 11):\n    multiplication_table.append([x*i for x in range(1, 11)])\nprint(multiplication_table)", "category": "Python"}, {"instruction": "Generate a Python function to generate Fibonacci sequence given a number n.", "input": "n = 5", "output": "def Fibonacci(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b", "category": "Python"}, {"instruction": "Describe the Pandas feature \"DataFrame\"", "input": "", "output": "Pandas DataFrame is a two-dimensional data structure, i.e. data is aligned in a tabular fashion in rows and columns. It is a widely used tool for data manipulation and analysis in Python. It offers a variety of features such as filtering, sorting, adding/removing columns, updating the data, indexing, and many others.", "category": "Python"}, {"instruction": "Write a code in Python to toggle all characters in a string.", "input": "The string is: \"Hello World!\"", "output": "s = \"Hello World!\" \nres = \"\" \nfor char in s: \n    if char.islower():\n        res += char.upper() \n    elif char.isupper():\n        res += char.lower()\nprint(res)", "category": "Python"}, {"instruction": "Write a Python code to print a Pascal's triangle with five rows.", "input": "", "output": "def pascal_triangle(n): \n    trow = [1] \n    y = [0] \n    for x in range(max(n, 0)): \n        print(trow) \n        trow = [ l + r for l, r in zip(trow + y, y + trow)] \n        if(x > 0):\n            trow.append(1)\n    return n >= 1\npascal_triangle(5)", "category": "Python"}, {"instruction": "Write a Python code to calculate the number of unique combinations of three digits from 0 to 9.", "input": "", "output": "def combinations(n, k):\n    from itertools import combinations\n    return len(list(combinations(range(n), k)))\n \ncomb = combinations(10, 3)\nprint(comb)", "category": "Python"}, {"instruction": "Design a function in Python to calculate the Fibonacci sequence up to a particular number.", "input": "", "output": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nfor i in range(1, n+1):\n    print(fibonacci(i))", "category": "Python"}, {"instruction": "Print all possible combination and permutations with length 3 for a given array.", "input": "[1, 2, 3]", "output": "def get_permutations(array):\n  results = []\n  if len(array) == 0:\n    return results\n  if len(array) == 1:\n    results.append([array[0]])\n    return results\n  for i in range(len(array)):\n  permutations = get_permutations(array[:i] + array[i+1:])\n    for permutation in permutations:\n      results.append([array[i]] + permutation)\n  return results", "category": "Python"}, {"instruction": "Create an array of 15 random floats in Python between 0 and 1.", "input": "", "output": "import random\n\nrandom_floats = [random.uniform(0, 1) for _ in range(15)]", "category": "Python"}, {"instruction": "Divide a list of numbers into two smaller lists, one with even numbers and one with odd numbers.", "input": "[1, 2, 3, 4, 5, 6]", "output": "def divide_list(numbers):\n    even_list = []\n    odd_list = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return even_list, odd_list\n\n# Driver Code\nnumbers = [1, 2, 3, 4, 5, 6]\neven_list, odd_list = divide_list(numbers)\nprint(even_list) # [2, 4, 6]\nprint(odd_list)  # [1, 3, 5]", "category": "Python"}, {"instruction": "Create a function to normalize a given pandas dataframe.", "input": "", "output": "def normalize_df(df): \n    normalized_df=(df-df.min())/(df.max()-df.min())\n    return normalized_df\n\nnorm_df = normalize_df(df)", "category": "Python"}, {"instruction": "Generate a list of all the prime numbers in the range from 0 to the given number n.", "input": "", "output": "def is_prime(n):\n    \"\"\"\n    This function will check if a given number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef generate_list_of_primes(n):\n    \"\"\"\n    This function will generate a list of all the prime numbers in the range from 0 to the given number n.\n    \"\"\"\n    primes = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "category": "Python"}, {"instruction": "Write a Python code to calculate the sum of three given numbers, if the values are equal, then return triple their sum", "input": "", "output": "def sumThree(n1, n2, n3):\n    \"\"\"\n    This function returns the sum of three numbers\n\tIf the values are equal, it will return triple their sum\n    \"\"\"\n    if n1 == n2 == n3:\n        return 3 * (n1 + n2 + n3)\n    else:\n        return n1 + n2 + n3", "category": "Python"}, {"instruction": "Create a function in Python to return the approximate value of sin(x) using degrees", "input": "", "output": "import math\ndef sin_deg(x):\n   \"\"\"\n   Returns the approximate value of the sine of x, given in degrees.\n   \"\"\"\n   return math.sin(math.radians(x))", "category": "Python"}, {"instruction": "Create an algorithm in Python to combine two sorted lists into a single sorted list.", "input": "list1 = [3, 5, 7]\nlist2 = [1, 2, 4]", "output": "def merge_lists(lst1, lst2): \n  sorted_list = []\n  i=j=0\n  while (i<len(lst1) and j<len(lst2)):\n    if lst1[i] <= lst2[j]:\n      sorted_list.append(lst1[i])\n      i+=1\n    else:\n      sorted_list.append(lst2[j])\n      j+=1\n\n  sorted_list  += lst1[i:]\n  sorted_list += lst2[j:]\n \n  return sorted_list\n\nlist1 = [3, 5, 7]\nlist2 = [1, 2, 4]\n \nprint(merge_lists(list1, list2))", "category": "Python"}, {"instruction": "Describe the purpose of machine learning.", "input": "", "output": "The purpose of machine learning is to develop algorithms and models that are able to learn from data and make predictions or decisions without being explicitly programmed. Machine learning algorithms can discover hidden patterns from large amounts of data and use the knowledge acquired to improve the accuracy of predictions and enhance decision making. Machine learning is used in many application areas, including natural language processing, computer vision, speech recognition, robotics, recommendation systems, and data mining.", "category": "Python"}, {"instruction": "Create a program to enter the data for user registration.", "input": "", "output": "def get_user_data():\n    username = input('Enter your desired username: ')\n    email = input('Enter your email address: ')\n    password = input('Enter a password: ')\n    confirm_password = input('Confirm your password: ')\n\n    # check if the passwords match\n    if password != confirm_password:\n        print('Passwords do not match')\n        return\n    \n    # save username, email, and password\n    user_data = {\n        'username': username,\n        'email': email,\n        'password': password\n    }\n\n    return user_data", "category": "Python"}, {"instruction": "Print prime numbers in the given range.", "input": "Lower range: 10\nUpper range: 30", "output": "for num in range(10, 30 + 1):\n   # prime numbers are greater than 1\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)", "category": "Python"}, {"instruction": "Add two matrices of size 3x3.", "input": "mat1 = [[1,2,3],\n        [4,5,6],\n        [7,8,9]]\nmat2 = [[10,11,12],\n        [13,14,15],\n        [16,17,18]]", "output": "# adding two matrices\nres = [[0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0]]\n\n# iterating through rows\nfor i in range(3):\n  # iterating through columns\n  for j in range(3):\n    res[i][j] = mat1[i][j] + mat2[i][j]\n\n# printing the result\nfor i in range(3):\n  for j in range(3):\n    print(res[i][j], end=\" \")\n  print()\n\n# Output:\n11 13 15\n17 19 21\n23 25 27", "category": "Python"}, {"instruction": "Write a Python program to abbreviate a name.", "input": "name = \"John Smith\"", "output": "def abbreviateName(name): \n    split_name = name.split(' '); \n    abbrev_name = str(split_name[0][0] + '.' + split_name[1]); \n    return abbrev_name;", "category": "Python"}, {"instruction": "Given a dictionary, write a function to count the number of items in the dictionary.", "input": "dictionary = {'name': 'John', 'age': 30}", "output": "def count_items(dict):\n    item_count = 0\n    for key in dict:\n        item_count += 1\n    return item_count", "category": "Python"}, {"instruction": "Which keyword is used to define a function in Python?", "input": "", "output": "The keyword used to define a function in Python is \"def\".", "category": "Python"}, {"instruction": "Implement the insertion sort algorithm.", "input": "[4, 6, 3, 8, 1, 8]", "output": "def insertion_sort(input_list):\n    for index in range(1, len(input_list)):\n        current_value = input_list[index]\n        position = index\n\n        while position > 0 and input_list[position - 1] > current_value:\n            input_list[position] = input_list[position - 1]\n            position = position - 1\n\n        input_list[position] = current_value\n    return input_list", "category": "Python"}, {"instruction": "Write a code that migrates data from one database to another", "input": "", "output": "import MySQLdb\nimport pymongo\n\n# Establishing the connection mysql\nmysql_con = MySQLdb.connect( <MySQL connection details> )\ncursor = mysql_con.cursor()\n\n# Establishing the connection mongodb\nmongo_con = pymongo.MongoClient( <MongoDB connection details> )\ndb = mongo_con.mydatabase\n\n# Migrating the data\ncursor.execute( \"SELECT * FROM users\" )\nrecords = cursor.fetchall()\n\nfor record in records:\n    db.users.insert_one({\n        'name': record[0],\n        'age' : record[1],\n        'email': record[2]\n    })", "category": "Python"}, {"instruction": "Write a Python program to test whether all elements of a given list are equal or not.", "input": "[3,3,3]", "output": "def all_elements_equal(lst):\n return lst[1:] == lst[:-1]", "category": "Python"}, {"instruction": "Write a Python function to decode a given string (with special characters) to its original form.", "input": "", "output": "def decode_string(string):\n return string.encode().decode('unicode_escape')", "category": "Python"}, {"instruction": "Write a Python function that takes in a string and outputs a dictionary where the keys are the characters in the string and the values are the frequency of the characters in the string.", "input": "", "output": "def freq_dict(string):\n freq = {}\n for c in string:\n if c in freq:\n freq[c] += 1\n else:\n freq[c] = 1\n return freq", "category": "Python"}, {"instruction": "What is object-oriented programming, and what are the benefits of using it?", "input": "", "output": "Object-oriented programming (OOP) is a programming approach that is based on the concept of objects. It is used to create a model of a real or abstract system to make programming more efficient, easier to debug, and more maintainable. OOP allows developers to write code that is reusable and maintainable, as it enables the creation of components that can be adapted and used in a variety of different contexts. Additionally, OOP allows for better communication between different parts of a program, as components can communicate with each other in a simpler and more understandable manner.", "category": "Python"}, {"instruction": "Develop a new class in Python to represent a Rectangle object with getArea() and getPerimeter() methods.", "input": "", "output": "class Rectangle: \n    def __init__(self, length, width): \n        self.length = length \n        self.width = width \n\n    def getArea(self): \n        return self.length * self.width \n\n    def getPerimeter(self): \n        return 2 * (self.length + self.width)", "category": "Python"}, {"instruction": "Write a function to compute the Fibonacci numbers and the sum of their squares.", "input": "", "output": "def fibonacci (n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\ndef sum_of_squares (n):\n    result = 0\n    for i in range(n+1):\n        result += fibonacci(i)**2\n    return result", "category": "Python"}, {"instruction": "Create a class in Python that implements the __len__ method to return the length of a given string.", "input": "", "output": "class StringLength:\n    def __len__(self, string):\n        return len(string)", "category": "Python"}, {"instruction": "Develop a program to convert an infix expression to prefix notation.", "input": "A*(B+C)-D/(E+F)", "output": "def infix_to_prefix(exp): \n\t# stack to store operators\n\tstack = [] \n\n\t# prefix expression\n\tpref_exp = \"\" \n\t\n\t# traverse through the expression\n\tfor char in exp: \n\t\t\n\t\t# if the character is an operand \n\t\t# add it to prefix expression\n\t\tif char.isalpha(): \n\t\t\tpref_exp += char \n\t\t\n\t\t# if the character is an operator\n\t\telif char in \"*/+-^\": \n\t\t\t\n\t\t\t# push the operator to the stack \n\t\t\tstack.append(char) \n\n\t\t# if the character is ')' \n\t\telif char == ')': \n\t\t\t\n\t\t\t# pop all the operators from \n\t\t\t# the stack until '(' is found \n\t\t\twhile(stack[-1] != '('): \n\t\t\t\tpref_exp += stack.pop() \n\t\t\t\n\t\t\t# remove '(' from the stack \n\t\t\tstack.pop() \n\t\t\t\n\t# add all the operators to the prefix expression \n\twhile len(stack) != 0: \n\t\tpref_exp += stack.pop() \n        \n\treturn pref_exp", "category": "Python"}, {"instruction": "In Python, construct a function to fit a curve to a given set of data points.", "input": "xdata = [0, 1, 2, 4, 11, 18]\nydata = [2, 3, 4, 6, 12, 17]", "output": "from scipy.optimize import curve_fit\n\ndef func(x, a, b, c):\n    return a*x**2 + b*x + c\n\nxdata = [0, 1, 2, 4, 11, 18]\nydata = [2, 3, 4, 6, 12, 17]\n\npopt, pcov = curve_fit(func, xdata, ydata)", "category": "Python"}, {"instruction": "How would you use a for loop in Python to print the sum of all even numbers between 50 and 100?", "input": "", "output": "total = 0\nfor i in range(50, 101):\n    if i % 2 == 0:\n        total += i\nprint(f\"The sum of all even numbers between 50 and 100 is {total}\")", "category": "Python"}, {"instruction": "Write a short piece of code in Python to calculate the area of a triangle with the sides 6 cm, 8 cm, and 10 cm.", "input": "", "output": "def calculate_triangle_area(side1, side2, side3):\n    '''This function calculates the area of a triangle given three sides.'''\n    s = (side1 + side2 + side3) / 2\n    return ((s*(s-side1)*(s-side2)*(s-side3))**0.5)\n\narea = calculate_triangle_area(6,8,10)\nprint(f\"The area of the triangle is {area} cm2\")", "category": "Python"}, {"instruction": "Write a basic script in Python that counts from 0 to 10.", "input": "", "output": "for i in range(11):\n    print(i)", "category": "Python"}, {"instruction": "Debug the given code and explain your solution.", "input": "words = ['hello', 'world', 'foo', 'bar']\nfor i in words:\n   if i == 'foo':\n      break\nprint('Done')", "output": "The code will not print out \"Done\" as it is inside an infinite loop. To fix this, we can either remove the 'break' statement or add an else statement after the if statement as a way of exiting the loop when the condition is not satisfied. \n\nwords = ['hello', 'world', 'foo', 'bar']\nfor i in words:\n   if i == 'foo':\n      break\nelse:\n    print('Done')", "category": "Python"}, {"instruction": "Create a function that calculates the total amount of money after 5 years given an initial amount of money and a certain rate of interest.", "input": "Initial amount: 1000\nRate of interest: 2%", "output": "def total_amount(initial, interest): \n    total = initial \n    for i in range(1, 5): \n        total += total * (interest/100) \n    return total", "category": "Python"}, {"instruction": "Retrieve the word with the second highest frequency from a given text.", "input": "Text: This is a sample text with a lot of words.", "output": "words = text.split()\nfreq_dict = {}\nfor word in words:\n    if word in freq_dict.keys():\n        freq_dict[word] += 1\n    else:\n        freq_dict[word] = 1\nsorted_words = sorted(freq_dict.items(), reverse=True, key=lambda x: x[1])\nsecond_highest_freq_word = sorted_words[1][0]\nprint(second_highest_freq_word)", "category": "Python"}, {"instruction": "Retrieve the third item from a linked list.", "input": "", "output": "def get_third_item(linked_list):\n    curr_node = linked_list\n    for i in range(2):\n        curr_node = curr_node.next # Moves onto the third item. \n    return curr_node.data # Returns the data of the third item.", "category": "Python"}, {"instruction": "Given a string s, write a program to classify it as a palindrome or not.", "input": "s = \u201cmalayalam\u201d", "output": "def is_palindrome(s):\n    n = len(s)\n    for i in range(n//2):\n        if s[i] != s[n-1-i]:\n            return False\n    return True", "category": "Python"}, {"instruction": "Create a function in Python that performs a web scrape and returns the most frequent words from the resulting text.", "input": "", "output": "def scrape_frequent_words(url):\n    try:\n        from bs4 import BeautifulSoup\n        from collections import Counter\n    \n        # Get html from the given url\n        html_content = requests.get(url).text\n        # Parse the html\n        soup = BeautifulSoup(html_content)\n        \n        # Get all text from the page\n        all_texts = soup.find_all(text=True)\n\n        # Extract only words\n        words = [word for text in all_texts for word in text.split()]\n\n        # Calculate frequency \n        frequency = dict(Counter(words))\n        \n        # Return the word with most frequency \n        return max(frequency, key=frequency.get)", "category": "Python"}, {"instruction": "Write a function that takes two strings and determines if they are an anagram.", "input": "string1 = \"converse\"\nstring2 = \"conserve\"", "output": "def is_anagram(str1, str2): \n    # Get lengths of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If the length of both strings are not same,  \n    # then they cannot be anagram \n    if n1 != n2: \n        return 0\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return 0\n  \n    return 1\n\nis_anagram(string1, string2) // 1", "category": "Python"}, {"instruction": "Given two linked list, write a Python program to compare them and output true if they are equal, false if not", "input": "head1 -> 20 -> 40 -> 60 -> 90\nhead2 -> 60 -> 20 -> 90 -> 70", "output": "false", "category": "Python"}, {"instruction": "3D print a model of a house.", "input": "", "output": "import stl\nfrom mpl_toolkits import mplot3d\nfrom matplotlib import pyplot\n\n# Create the mesh\ndata = stl.mesh.Mesh.from_file(\"house.stl\")\n\n# 3D plot\npyplot.figure()\nax = pyplot.axes(projection ='3d')\nax.add_collection3d(mplot3d.art3d.Poly3DCollection(data.vectors))\n\n# Set size\nscale = data.points.flatten(-1)\nax.auto_scale_xyz(scale, scale, scale)\n\n# Save to file\npyplot.savefig('house.png', dpi = 600)", "category": "Python"}, {"instruction": "Define a function which can generate a list of 15 random numbers between 1 to 30.", "input": "", "output": "\"\"\"\nDefine a function which can generate a list of 15 random numbers between 1 to 30\n\"\"\"\nimport random\n\ndef generate_random_list():\n    return [random.randint(1,30) for _ in range(15)]\n    \nif __name__ == '__main__':\n    print(generate_random_list())", "category": "Python"}, {"instruction": "Given an array of integers, return an array of twice the values", "input": "arr = [1, 2, 3, 4]", "output": "def double_array(arr):\n    doubled_arr = []\n    for i in arr:\n        doubled_arr.append(i*2)\n    return doubled_arr", "category": "Python"}, {"instruction": "Implement a computationally efficient algorithm to solve the following problem", "input": "Given an array of integers, check if the sum of any two integers in the array is divisible by 10", "output": "def check_divisible(arr):\n    arr.sort()\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] + arr[j]) % 10 == 0:\n                return True\n    return False", "category": "Python"}, {"instruction": "Update the following code to return the key of the highest value in the dictionary.", "input": "sample_dict = {\"a\":1, \"b\":2, \"c\": 3}", "output": "sample_dict = {\"a\":1, \"b\":2, \"c\": 3}\n\ndef get_key_highest_value(dict):\n    highest_value = max(dict.values())\n    for key, value in dict.items():\n        if value == highest_value:\n            return key", "category": "Python"}, {"instruction": "Design an algorithm that searches for a target element in an array", "input": "arr = [1,3,5,6,7]\ntarget = 6", "output": "def search(arr, target): \n    for i in range(len(arr)): \n        if arr[i] == target: \n            return i\n    return -1\n\nprint(\"Index of 6 is\", search(arr, target))", "category": "Python"}, {"instruction": "Design a neural network to classify the outcome of a coin toss.", "input": "", "output": "import numpy as np \nimport keras \nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation\n\nmodel = Sequential()\nmodel.add(Dense(2, input_dim=2))\nmodel.add(Activation('relu'))\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))\n\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=50, batch_size=32)", "category": "Python"}, {"instruction": "Output an array that contains all the unique elements from two input arrays", "input": "arr1 = [1, 2, 3], arr2 = [2, 3, 4]", "output": "def unique_elements(arr1, arr2):\n    res = [] \n    i = j = 0\n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] == arr2[j]: \n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]: \n            res.append(arr1[i]) \n            i += 1\n        else: \n            res.append(arr2[j]) \n            j += 1\n    res.extend(arr1[i:]) \n    res.extend(arr2[j:]) \n    return list(set(res))", "category": "Python"}, {"instruction": "Write a Python program to find the simple interest.", "input": "principle = 1000, rate of interest = 5%, time duration = 5 years", "output": "# Simple Interest\n\nprinciple = 1000; \nrate = 5; \ntime = 5; \n\n# Calculate simple interest \nSimple_Interest = (principle*time*rate)/100; \n\nprint(\"Simple Interest = %.2f\" %Simple_Interest);", "category": "Python"}, {"instruction": "Write a code to create a FizzBuzz game, that prints the numbers from 1 to 50, replacing all the numbers divisible by 3 with the word \"Fizz\" and the numbers divisible by 5 with the word \"Buzz\".", "input": "", "output": "\"\"\"\nWrite a code to create a FizzBuzz game\n\"\"\"\n\ndef fizz_buzz():\n    for i in range(1, 51):\n        if i % 3 == 0 and i % 5 == 0:\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            print(\"Fizz\")\n        elif i % 5 == 0:\n            print(\"Buzz\")\n        else:\n            print(i)\n\nif __name__ == '__main__':\n    fizz_buzz()", "category": "Python"}, {"instruction": "Generate a 2D list of size 5x5 with random numbers between 0 and 9.", "input": "", "output": "\"\"\"\nGenerate a 2D list of size 5x5 with random numbers between 0 and 9\n\"\"\"\n\nimport random\n\ndef generate_2d_list(rows, columns):\n    matrix = [[random.randint(0, 9) for i in range(columns)] for j in range(rows)]\n    return matrix\n\nif __name__ == '__main__':\n    rows = 5\n    columns = 5\n    matrix = generate_2d_list(rows, columns)\n    print(matrix)", "category": "Python"}, {"instruction": "Code a program that takes a list and removes all the duplicate numbers.", "input": "mylist = [1, 2, 3, 1, 2, 4, 5]", "output": "\"\"\"\nRemove all duplicate numbers from a list\n\"\"\"\n\ndef remove_duplicates(mylist):\n    mylist = list(dict.fromkeys(mylist))\n    return mylist\n\nif __name__ == '__main__':\n    mylist = [1, 2, 3, 1, 2, 4, 5]\n    mylist = remove_duplicates(mylist)\n    print(mylist)", "category": "Python"}, {"instruction": "Modify the given code to be able to print an asterisk pyramid as specified in the output.", "input": "rows = 5\n\nfor i in range(0, rows):\n    for j in range(0, i + 1):\n        print(\"*\", end=' ')\n    print(\"\\r\")", "output": "rows = 5\n\nfor i in range(0, rows):\n    for j in range(0, rows-i-1):\n        print(end=\" \")\n    for j in range(0, i + 1):\n        print(\"*\", end=' ')\n    print(\"\\r\")", "category": "Python"}, {"instruction": "Write a code to print a count-down timer.", "input": "", "output": "import time\n \nfor i in range(10, 0, -1):\n    print(i)\n    time.sleep(1)", "category": "Python"}, {"instruction": "Complete the following Python program for converting the given list into a dictionary.", "input": "list1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]\n\ndef to_dict(list1, list2):\n    ???", "output": "list1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]\n\ndef to_dict(list1, list2):\n    return dict(zip(list1, list2))", "category": "Python"}, {"instruction": "Explain what an interpreter is and how it works in programming.", "input": "", "output": "An interpreter is a type of computer program that translates and executes code written in a programming language. The interpreter reads in the source code, analyses it and then executes the instructions. The interpreter executes the instructions line by line, stopping each time it encounters an error and displaying an error message. This helps the programmer quickly identify and fix errors in the code.", "category": "Python"}, {"instruction": "Write a function that parses a json string into a Python dict.", "input": "", "output": "def parse_json_to_dict(json_string):\n    return json.loads(json_string)", "category": "Python"}, {"instruction": "Generate a Python program to perform matrix multiplication.", "input": "", "output": "# Python program to multiply two matrices \n# 3x3 matrix \nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n# 3x4 matrix\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\n# result is 3x4\nresult = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\n# iterate through rows of X\nfor i in range(len(X)):\n   # iterate through columns of Y\n   for j in range(len(Y[0])):\n       # iterate through rows of Y\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\nfor r in result:\n   print(r)", "category": "Python"}, {"instruction": "Create a three-dimensional array with all elements set to 0 of length 3\u00d72\u00d72.", "input": "", "output": "import numpy as np\n\nx = np.zeros((3,2,2))", "category": "Python"}, {"instruction": "Create a lambda function in Python to fetch the age of a person from their given DOB.", "input": "", "output": "import datetime\n\ncalculate_age = lambda dob: int((datetime.date.today() - dob).days / 365.25)", "category": "Python"}, {"instruction": "Create a function that takes in a string and returns a dictionary with each word as a key and its count as the value.", "input": "string = \"This is a test string\"", "output": "def word_count_dict(string):\n    word_list = string.split()\n    word_dict = {}\n    for word in word_list:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    return word_dict\n\nstring = \"This is a test string\"\nprint(word_count_dict(string))", "category": "Python"}, {"instruction": "Write a Swift program to convert a Python dictionary to a Swift dictionary.", "input": "py_dict = {\"a\": 1, \"b\": 2, \"c\": 3}", "output": "let sw_dict = py_dict as! [String: Int]", "category": "Python"}, {"instruction": "Generate a Vue.js component to display a table.", "input": "", "output": "Vue.component('Table', { \n  props: { \n    list: Array \n  }, \n  template: ` \n    <div> \n      <div> \n        <table border=\"1\">\n          <tr v-for=\"item in list\">\n            <td v-for=\"detail in item\">{{ detail }}</td>\n          </tr>\n        </table> \n      </div> \n    </div> \n  `\n})", "category": "Python"}, {"instruction": "Parse this string to extract the integer value.", "input": "value = 'The integer value is 12'", "output": "import re\nvalue = 'The integer value is 12'\n \nm = re.search(r'\\d+', value)\nprint(int(m.group(0)))", "category": "Python"}, {"instruction": "Given two strings s1 and s2, write a program to edit s1 to s2 by removing, inserting or replacing one character in s1.", "input": "s1 = \u201ccat\u201d\ns2 = \u201chat\u201d", "output": "def edit_strings(s1, s2):\n    s1_arr = list(s1)\n    s2_arr = list(s2)\n\n    i = 0\n    while i < len(s1):\n        if s1[i] == s2[i]:\n            i += 1\n        else:\n            # remove character\n            del s1_arr[i]\n            if s1_arr == s2_arr:\n                return 'removal'\n            # insert character\n            s1_arr.insert(i, s2[i])\n            if s1_arr == s2_arr:\n                return 'insertion'\n            # replace character\n            s1_arr[i] = s2[i]\n            if s1_arr == s2_arr:\n                return 'replacement'\n            break\n    return None", "category": "Python"}, {"instruction": "Given two lists of strings, write a program to combine them into a dictionary whose keys are the strings in one list and values are the strings in the other list.", "input": "list1 = [\u201ccat\u201d, \u201cdog\u201d, \u201chorse\u201d]\nlist2 = [\u201cmeow\u201d, \u201cbark\u201d, \u201cneigh\u201d]", "output": "def combine_lists(list1, list2):\n    dictionary = dict()\n    for i in range(len(list1)):\n        dictionary[list1[i]] = list2[i]\n    return dictionary", "category": "Python"}, {"instruction": "Implement a class to represent a vector, with initial vector and a scaler. Include methods to add, subtract and multiply two vectors.", "input": "", "output": "class Vector():\n    def __init__(self, vector, scaler):\n        self.vector = vector\n        self.scaler = scaler\n\n    def add_vector(self, other_vector):\n        result_vector = []\n        for i in range(len(self.vector)):\n            result_vector.append(self.vector[i] + other_vector.vector[i])\n        return Vector(result_vector, self.scaler)\n    \n    def sub_vector(self, other_vector):\n        result_vector = []\n        for i in range(len(self.vector)):\n            result_vector.append(self.vector[i] - other_vector.vector[i])\n        return Vector(result_vector, self.scaler)\n\n    def mul_vector(self, scaler):\n        result_vector = []\n        for element in self.vector:\n            result_vector.append(element * scaler)\n        return Vector(result_vector, self.scaler)", "category": "Python"}, {"instruction": "Implement a function to remove all occurrences of string t from string s.", "input": "s = 'The quick brown fox jumps over the lazy dog.'\nt = 'the'", "output": "def remove_string(s, t):\n    if t not in s:\n        return s\n    s = s.lower()\n    t = t.lower()\n    indices = []\n    start = 0\n    while True:\n        index = s.find(t, start)\n        if index == -1:\n            break\n        indices.append(index)\n        start = index + 1\n    offset = 0\n    for index in indices:\n        s = s[:index - offset] + s[index - offset + len(t):]\n        offset += len(t)\n    return s", "category": "Python"}, {"instruction": "Compute the sum of numbers in a given tree.", "input": "Tree Structure\n    5\n   / \\\n  3   7", "output": "def compute_sum(root):\n    if not root:\n        return 0\n    left_sum = compute_sum(root.left)\n    right_sum = compute_sum(root.right)\n    return root.val + left_sum + right_sum", "category": "Python"}, {"instruction": "Write a function in Python to compute average of the numbers in a given list.", "input": "[2, 4, 5, 7]", "output": "def compute_avg(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total/len(numbers)", "category": "Python"}, {"instruction": "Write a function that accepts an integer value n and creates an n by n matrix, with all elements initialised to zero.", "input": "", "output": "def create_matrix(n):\n    matrix = []\n    for i in range(n):\n        row = []\n        for j in range(n):\n            row.append(0)\n        matrix.append(row)\n    return matrix", "category": "Python"}, {"instruction": "Create a computer algorithm to determine the validity of a sudoku puzzle", "input": "", "output": "def is_valid_sudoku(puzzle): \n  size = len(puzzle) \n  for row in range(len(puzzle)): \n    seen = set() \n    for col in range(size): \n      number = puzzle[row][col] \n      if number != 0: \n        if number in seen: \n          return False \n        seen.add(number) \n  for col in range(3): \n    seen = set() \n    for row in range(size): \n      number = puzzle[row][col] \n      if number != 0: \n        if number in seen: \n          return False \n        seen.add(number) \n  # and so on \n  return True", "category": "Python"}, {"instruction": "Scramble a given array so that it appears in a random order", "input": "[3, 7, 8, 2. 5]", "output": "def scramble(arr): \n  for i in range(len(arr) - 1): \n      j = random.randint(0, len(arr)-1) \n      arr[i], arr[j] = arr[j], arr[i] \n  return arr \n\nscramble([3, 7, 8, 2, 5])", "category": "Python"}, {"instruction": "Come up with some ideas to design a user interface for an online database", "input": "", "output": "Some ideas for designing a user interface for an online database include:\n- Using a search bar for users to easily find the information they are looking for quickly. \n- Creating a filter search to allow users to narrow down relevant results as needed.\n- Offering a progress bar to show the status of database operations. \n- Creating a database dashboard to give users an overview of data. \n- Implementing database notifications to alert users when tasks or operations are completed or if any errors occur.", "category": "Python"}, {"instruction": "Compute the natural logarithm of 500 using Python.", "input": "", "output": "import math\n \nprint(math.log(500))", "category": "Python"}, {"instruction": "Construct a pandas dataframe from 4 dictionaries.", "input": "d1 = {\n 'name' : [\"Alice\", \"Bob\", \"Charlie\"],\n 'age' : [24, 45, 37],\n}\n \nd2 = {\n 'weight' : [87, 66, 65],\n 'height' : [165, 179, 173],\n}\n \nd3 = {\n 'income' : [3000, 4500, 4800],\n 'job' : [\"engineer\", \"teacher\", \"secretary\"],\n}\n \nd4 = {\n 'city' : [\"Glasgow\", \"New York\", \"Paris\"],\n 'country' : [\"Scotland\", \"USA\", \"France\"],\n}", "output": "import pandas as pd\n \ndf = pd.DataFrame({\n 'name': d1['name'], \n 'age': d1['age'],\n 'weight': d2['weight'],\n 'height': d2['height'],\n 'income': d3['income'],\n 'job': d3['job'],\n 'city': d4['city'],\n 'country': d4['country']\n })", "category": "Python"}, {"instruction": "Generate a random password with a combination of letters, numbers and special characters.", "input": "", "output": "import random\n\ndef generate_password():\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    numbers = '0123456789'\n    special_characters = '@#$%^&*()'\n    \n    password = ''\n\n    password += random.choice(letters)\n    password += random.choice(numbers)\n    password += random.choice(special_characters)\n\n    for _ in range(6):\n        source = random.choice([letters, numbers])\n        password += random.choice(source)\n\n    return password\n\nprint(generate_password())", "category": "Python"}, {"instruction": "Given two sorted lists of numbers, write a code to merge them.", "input": "list1 = [1, 2, 3, 4]\nlist2 = [3, 4, 5, 6]", "output": "def merge_lists(list1, list2):\n    merged_list = []\n \n    i, j = 0, 0 \n    while i < len(list1) and j < len(list2):\n        if list1[i] <= list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n \n    if i == len(list1):\n        merged_list.extend(list2[j:])\n    else:\n        merged_list.extend(list1[i:])\n \n    return merged_list\n\nmerged_list = merge_lists(list1, list2)\nprint(merged_list)", "category": "Python"}, {"instruction": "Reconstruct the given code snippet.", "input": "", "output": "def is_year_leap(year):\n    # leap year is divisible by 4\n    # However, if year is divisible by 100, then it is not a leap year\n    # Unless year is divisible by 400\n    leap_year = (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)\n    return leap_year", "category": "Python"}, {"instruction": "Create an array with 10 random numbers in the range of 1 to 50.", "input": "", "output": "import random\n\nnums = [random.randint(1, 50) for _ in range(10)]\nprint(nums) # Output: [7, 44, 15, 47, 1, 31, 29, 39, 33, 11]", "category": "Python"}, {"instruction": "Generate a piece of code that defines and calls a function in Python.", "input": "", "output": "def myFunction():\n   print(\"Hello World\")\nmyFunction()", "category": "Python"}, {"instruction": "Given a list of strings, use Python to print the count of strings that start with the letter 'a'.", "input": "string_list = [\"apple\",\"mango\",\"banana\",\"avocado\"]", "output": "count = 0\nfor string in string_list:\n    if string.startswith(\"a\"):\n        count += 1\n \nprint(\"The count of strings starting with 'a' is:\", count)", "category": "Python"}, {"instruction": "Define a class named \"Day\" in Python to represent a day of the week.", "input": "", "output": "class Day:\n    def __init__(self):\n        self.day = \"\"\n\n    def set_day(self, day):\n        self.day = day\n\n    def get_day(self):\n        return self.day", "category": "Python"}, {"instruction": "Write a class that simulates a die with 6 sides.", "input": "", "output": "import random\n\nclass Die:\n    def __init__(self):\n        self.sides = 6\n\n    def roll(self):\n        return random.randint(1, self.sides)", "category": "Python"}, {"instruction": "Write an application that keeps track of tasks and provides status updates for the tasks.", "input": "", "output": "import sys\n\n#Defining the Task class\nclass Task(object):\n    \"\"\"\n    Class to keep track of tasks and provide status updates.\n    \"\"\"\n    def __init__(self, name, status):\n        \"\"\"Initializing instance attributes\"\"\"\n        self.name = name\n        self.status = status\n        self.status_dict = {\n            \"Not Started\": 0,\n            \"In Progress\": 1,\n            \"Completed\": 2\n        }\n\n    def get_status(self):\n        \"\"\"Returns the current status of the task\"\"\"\n        return self.status\n\n    def set_status(self, status):\n        \"\"\"Method to update the status of the task\"\"\"\n        if(status not in self.status_dict.keys()):\n            sys.exit(\"Invalid status!! Please enter a valid status\")\n\n        #Valid status so updating the task's status\n        self.status = status", "category": "Python"}, {"instruction": "Recreate the same result from the given sample output.", "input": "Sample output:\n\n1\n11\n21\n1211\n111221", "output": "n = '1'\n\nfor x in range(5):\n    a, b = '', '' \n    count = 1\n  \n    for i in range(1, len(n)): \n        if(n[i] != n[i-1]): \n            a += str(count) \n            a += n[i-1] \n            count = 1\n        else: \n            count+=1\n    \n    if(n[i] == n[i-1]): \n        a += str(count) \n        a += n[i] \n  \n    n = a\n    print(n)", "category": "Python"}, {"instruction": "Generate a random password.", "input": "", "output": "import string\nimport random\n\ndef generate_password():\n    length = random.randint(12, 24)\n    pwd = ''.join(random.choice(string.ascii_letters + string.digits) for i in range(length))\n    return pwd", "category": "Python"}, {"instruction": "Write your own version of Fisher-Yates algorithm for shuffling an array.", "input": "", "output": "def shuffle(arr): \n    for i in range(len(arr)-1, 0, -1): \n        j = random.randint(0, i) \n        arr[i], arr[j] = arr[j], arr[i] \n    return arr", "category": "Python"}, {"instruction": "Parse this JSON data and print the names of all the users.", "input": "{ \n  \"users\": [\n    {\n      \"name\": \"John\"\n    },\n    {\n      \"name\": \"Jill\"\n    },\n    {\n      \"name\": \"Harry\"\n    }\n  ]\n}", "output": "import json \n\ndata = json.loads(input) \nfor user in data['users']: \n  print(user['name'])", "category": "Python"}, {"instruction": "Edit the following Python code to print a date in a human-readable form.", "input": "print(date.today())", "output": "from datetime import date \nprint(date.today().strftime(\"%B %d, %Y\"))", "category": "Python"}, {"instruction": "Create a loop that prints all numbers 1 to 100 with the exception of multiples of 5.", "input": "", "output": "for i in range(1,101):\n  if i % 5 != 0:\n    print(i)", "category": "Python"}, {"instruction": "Implement a decision tree as a class in Python.", "input": "", "output": "class DecisionTree:\n    def __init__(self,X,y):\n        self.X = X\n        self.y = y\n\n    def fit(self, X,y):\n        # Implement decision tree fitting algorithm\n\n    def predict(self,X):\n        # Implement decision tree prediction algorithm", "category": "Python"}, {"instruction": "Write a Python program to analyze the sentiment of a given text.", "input": "The restaurant food was terrible.", "output": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsia = SentimentIntensityAnalyzer()\nsentiment = sia.polarity_scores(input_text)\nprint(sentiment)\n# {'neg': 0.404, 'neu': 0.596, 'pos': 0.0, 'compound': -0.7424}", "category": "Python"}, {"instruction": "Iterate through a list and print only the elements that include the character 'a'.", "input": "list_items = [\"apple\", \"banana\", \"carrot\", \"durian\"]", "output": "for item in list_items:\n    if 'a' in item:\n        print(item)\n\n# Output\napple\nbanana\ncarrot", "category": "Python"}, {"instruction": "Create an array of length 10 and fill each element randomly from 0 to 9.", "input": "", "output": "import random\n\narr = []\nfor i in range(10):\n    arr.append(random.randint(0, 9))\n\nprint(arr)", "category": "Python"}, {"instruction": "Generate a random string of length 8 with characters from a-zA-Z0-9.", "input": "", "output": "import random\nimport string\n\ndef random_string():\n    letters = string.ascii_letters + string.digits\n    return ''.join(random.choice(letters) for i in range(8))", "category": "Python"}, {"instruction": "Given a string s and a list of words words, write a program to find all occurrences of words in the string s.", "input": "s = 'The quick brown fox jumps over the lazy dog.'\nwords = ['quick', 'fox', 'dog']", "output": "def find_words(s, words):\n    occurrence_indices = []\n    for word in words:\n        start = 0\n        while True:\n            index = s.find(word, start)\n            if index == -1:\n                break\n            else:\n                occurrence_indices.append(index)\n                start = index + 1\n    return occurrence_indices", "category": "Python"}, {"instruction": "Check if the following statement is a valid python syntax", "input": "Statement: for x in range(0, len(listname))", "output": "Yes, the statement is a valid Python syntax.", "category": "Python"}, {"instruction": "Use Python to filter out all the numbers divisible by 3 from a given list.", "input": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "def filter_list(numbers):\n    return [x for x in numbers if x % 3 == 0]\n\nfilter_list(numbers) # Output: [3, 6, 9]", "category": "Python"}, {"instruction": "Write a Python program to check if a substring is present in a set of strings", "input": "substring: \"abc\"\nstrings: [\"hoabcll\", \"aaabcbc\", \"abcbal\"]", "output": "True", "category": "Python"}, {"instruction": "Given a two-dimensional array, write a Python code to sum each row in the array and store it in a new array.", "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def sum_row_in_2d_array(arr):\n    result = []\n    # iterating through array\n    for sub_arr in arr:\n        sum=0\n        # iterating through sub array\n        for element in sub_arr:\n            sum += element\n        # Adding sum to result list\n        result.append(sum)\n \n    return result", "category": "Python"}, {"instruction": "Construct a for loop in Python to iterate through the list [3, 2, 5, 4, 6] in reverse order.", "input": "", "output": "for num in reversed([3, 2, 5, 4, 6]):\n    print(num)", "category": "Python"}, {"instruction": "Create a Python function that takes an object as an input and returns its names and values.", "input": "Input: {\"name\": \"John\", \"age\": 25, \"cities\": [\"New York\", \"Boston\"]}", "output": "def get_object_details(input_obj):\n    output = []\n    for key, value in input_obj.items():\n        if type(value) == list:\n            value = \", \".join(value)\n        output.append(f\"{key}: {value}\")\n    return \"\\n\".join(output)", "category": "Python"}, {"instruction": "Create a function to print out a multiplication table of two given multidimensional arrays.", "input": "arr1 = [ [1,2] , [3,4] ]\narr2 = [ [5,6] , [7,8] ]", "output": "def mult_table(arr1, arr2):\n    for i in range(len(arr1)):\n        for j in range(len(arr2[0])):\n            for k in range(len(arr2)):\n                print(arr1[i][k] * arr2[k][j], end=\" \")\n        print()\n\narr1 = [ [1,2] , [3,4] ]\narr2 = [ [5,6] , [7,8] ]\n\nmult_table(arr1, arr2)\n\n# Output: \n5 12 \n15 24", "category": "Python"}, {"instruction": "Write a code that takes a given list and sorts them using heapsort.", "input": "arr = [1, 6, 5, 4, 8, 2]", "output": "def heapsort(arr):\n    # Build the max heapify \n    n = len(arr) \n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n\n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i] # swap \n        heapify(arr, i, 0) \n\ndef heapify(arr, n, i): \n    largest = i # Initialize largest as root \n    l = 2 * i + 1     # left = 2*i + 1 \n    r = 2 * i + 2     # right = 2*i + 2 \n  \n    # check if left child of root exists and is \n    # greater than root \n    if l < n and arr[i] < arr[l]: \n        largest = l \n  \n    # check if right child of root exists and is \n    # greater than root \n    if r < n and arr[largest] < arr[r]: \n        largest = r \n  \n    # Change root, if needed \n    if largest != i: \n        arr[i],arr[largest] = arr[largest],arr[i] # swap \n  \n        # Heapify the root. \n        heapify(arr, n, largest) \n\n# Driver code \nif __name__ == \"__main__\":\n    arr = [1, 6, 5, 4, 8, 2]\n    heapsort(arr) \n    n = len(arr) \n    print (\"Sorted array is\") \n    for i in range(n): \n        print (\"%d\" %arr[i]),", "category": "Python"}, {"instruction": "Develop a machine learning model in Python to classify emails as either important or not important.", "input": "", "output": "import numpy as np\nimport pandas as pd\nimport sklearn\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Read the dataset\ndata = pd.read_csv('emails.csv')\n\n# Pre-process the dataset for label encoding and feature extraction\nlabel_encoder = LabelEncoder()\ny = label_encoder.fit_transform(data.category.values)\n\ntfidf_vectorizer = TfidfVectorizer(stop_words='english', min_df=2)\nX = tfidf_vectorizer.fit_transform(data.body.values)\n\n# Split the dataset into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train the Multinomial Naive Bayes model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\nscore = model.score(X_test, y_test)\nprint('Test accuracy: ', score)", "category": "Python"}, {"instruction": "Write a Python code to sort the names into ascending order.", "input": "names = [\"Vladimir Putin\",\"Joe Biden\",\"Xi Jinping\"]", "output": "names.sort()", "category": "Python"}, {"instruction": "What are the similarities between dictionaries and Lists in Python?", "input": "", "output": "Both dictionaries and lists are container data structures in Python which allow for the storage and retrieval of data. They are both mutable, meaning the contents can be updated, changed and manipulated. They also both contain an ordered sequence of elements, allowing for indexing into each one. However, dictionaries use a key:value pair, whereas lists contain only values.", "category": "Python"}, {"instruction": "Separate the numbers in the given string variable.", "input": "String: 1a2b34c", "output": "nums = [int(x) for x in my_string if x.isdigit()]", "category": "Python"}, {"instruction": "Create a function to combine two arrays, sorting first by grade in ascending order, and then by age in descending order.", "input": "Array 1: [['Tom', 10], ['Sam', 8], ['Bob', 8]]\nArray 2: [['Tom', 15], ['Sam', 12], ['Bob', 13]]", "output": "def combine(arr1, arr2): \n  res = [] \n  # Combine two arrays \n  for i in range(len(arr1)): \n    res.append(arr1[i] + arr2[i]) \n  \n  # Sort by grade in ascending order\n  res.sort(key=lambda x: x[1]) \n  \n  # Sort by age in descending order\n  res.sort(key=lambda x: x[2], reverse=True) \n  \n  return res", "category": "Python"}, {"instruction": "Given a matrix, write a program that finds its determinant in Python.", "input": "[[a, b], \u00a0[c, d]]", "output": "def determinant(matrix): \n  a = matrix[0][0]\n  b = matrix[0][1]\n  c = matrix[1][0]\n  d = matrix[1][1]\n  return a*d - b*c", "category": "Python"}, {"instruction": "Suggest ways to improve the performance of the following list implementation.", "input": "class List: \n  def __init__(self): \n    self.items = [] \n  \n  def append(self, item):\n    self.items.append(item) \n    \n  def remove(self, item): \n     self.items.remove(item)", "output": "class List: \n   def __init__(self): \n     self.items = [] \n   \n   def append(self, item):\n     if item not in self.items:\n       self.items.append(item) \n       \n   def remove(self, item): \n      try:\n        self.items.remove(item)\n      except ValueError:\n        pass\n  \n   def remove_at_index(self, index):\n    del self.items[index]\n  \n   def search(self, item):\n    return item in self.items", "category": "Python"}, {"instruction": "How would you store the location of a person in a database?", "input": "", "output": "The location of a person can be stored in a database in the form of a latitude and longitude pair, as a set of geographic coordinates or as a physical address.", "category": "Python"}, {"instruction": "Design a function to get the length of the longest increasing subsequence in a given list of integers.", "input": "", "output": "def longest_increasing_subsequence_length(nums):\n    n = len(nums)\n    LIS = [1] * n\n\n    for i in range(1, n):\n        for j in range(0, i):\n            if nums[i] > nums[j] and LIS[i] < LIS[j] + 1:\n                LIS[i] = LIS[j] + 1\n\n    return max(LIS)", "category": "Python"}, {"instruction": "Write a function which takes a list of integers and returns an integer which is the product of all the integers in the list.", "input": "", "output": "def product_of_list(nums):\n    product = 1\n    for num in nums:\n        product *= num\n    return product", "category": "Python"}, {"instruction": "Given a Python list, display the total number of elements in the list.", "input": "mylist = [1, 2, 3, 4, 5]", "output": "The total number of elements in the list is 5.", "category": "Python"}, {"instruction": "Create a function that checks for a specific word in the string.", "input": "myString = \"This is a simple sentence.\"", "output": "def check_word(myString, word):\n    if word in myString:\n        return True\n    return False", "category": "Python"}, {"instruction": "Create a class \"Addition\" with a method called \"add\" which takes two integers as inputs and returns the sum of the two numbers?", "input": "", "output": "class Addition:\n    def add(self, x, y):\n        return x + y", "category": "Python"}, {"instruction": "Create a class named \"Vector\" with two attributes \"x\" and \"y\" and define a \"length\" method that returns the length of the vector.", "input": "", "output": "class Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def length(self):\n        return (self.x**2 + self.y**2)**0.5", "category": "Python"}, {"instruction": "Create a function that takes two arguments, \"start\" and \"end\", and returns a list of all the prime numbers between the two.", "input": "", "output": "def get_prime_numbers(start, end):\n    \"\"\"\n    Function to return a list of all the prime numbers between start and end\n    \"\"\"\n    prime_numbers = []\n    for num in range(start, end + 1):\n        if num > 1:\n            is_prime = True\n            for j in range(2, int(num/2) + 1):\n                if num % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                prime_numbers.append(num)\n    return prime_numbers\n    \nprint(get_prime_numbers(2, 10)) # prints [2, 3, 5, 7]", "category": "Python"}, {"instruction": "create a function to compare two strings and return a boolean depending on their equality or inequality.", "input": "string1 = 'hello' \nstring2 = 'world'", "output": "def compare_strings(string1, string2):\n    \"\"\"\n    This function will compare two strings and return a boolean \n    depending on their equality or inequality. \n    \"\"\"\n    is_same = string1 == string2\n    return is_same\n\nstring1 = 'hello' \nstring2 = 'world'\n\nprint(compare_strings(string1, string2))", "category": "Python"}, {"instruction": "Create a function that will validate if a given date is in the correct format.", "input": "date = '12/04/2021'", "output": "def validate_date(date):\n    \"\"\"\n    This function will validate if a given date is in the correct format.\n    \"\"\"\n    try:\n        year, month, day = date.split('/')\n        int(year)\n        int(month)\n        int(day)\n        isValidDate = True\n    except:\n        isValidDate = False\n    return isValidDate\n\ndate = '12/04/2021'\n\nprint(validate_date(date))", "category": "Python"}, {"instruction": "Write a code to create a list that preserves the order of the original input and contains only the odd numbers from it?", "input": "[1,2,3,4,5,6,7,8,9]", "output": "def odd_numbers_list(input_data):\n    \"\"\"Function to create a list that preserves the order of the original input and contains only the odd numbers from it\"\"\"\n    output_list = [] \n    for el in input_data: \n        if el % 2 != 0:\n            output_list.append(el) \n    return output_list\n\nif __name__ == '__main__':\n    input_data = [1,2,3,4,5,6,7,8,9]\n    output_list = odd_numbers_list(input_data)\n    print(output_list)", "category": "Python"}, {"instruction": "Using the input as a guide, write code that prints out a copy of the 2d matrix with its elements transposed.", "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]]", "output": "def transpose_matrix(matrix):\n    \"\"\"Function to transpose 2d list matrix\"\"\"\n    row = len(matrix) \n    col = len(matrix[0]) \n  \n    transpose = [[0 for j in range(row)] for i in range(col)] \n  \n    for i in range(row): \n        for j in range(col): \n            transpose[j][i] = matrix[i][j] \n  \n    for i in range(col): \n        print(transpose[i]) \n\nif __name__ == '__main__':\n    matrix = [[1,2,3],[4,5,6],[7,8,9]]\n    transpose_matrix(matrix)", "category": "Python"}, {"instruction": "Write a Python program that parses a JSON object and returns only the values of a specific key.", "input": "JSON object: {\n    \"name\": \"John\",\n    \"age\": 42,\n    \"location\": \"New York\"\n}\n\nKey: \"name\"", "output": "import json\n\n# Load JSON data\ndata_str = '''\n{\n    \"name\": \"John\",\n    \"age\": 42,\n    \"location\": \"New York\"\n}\n'''\ndata_dict = json.loads(data_str)\n\n# Get the value of the given key\nname = data_dict.get('name') # John", "category": "Python"}, {"instruction": "Change the following linked list into an array.", "input": "Linked list: 1->3->5->7->9", "output": "# Create a linked list\nclass Node: \n    def __init__(self, data): \n        self.data = data\n        self.next = None\n\n# Function to convert linked list to array\ndef list_to_array(head): \n    arr = []\n    if head is None: \n        return arr\n    cur = head\n    while cur is not None: \n        arr.append(cur.data) \n        cur = cur.next\n    return arr\n\narr = list_to_array(head) \nprint(arr)", "category": "Python"}, {"instruction": "Retrieve the data in the given URL.", "input": "URL: https://www.example.com/", "output": "import requests\n\nurl = 'https://www.example.com/'\n\n# Make an API call and store the response\nres = requests.get(url)\n\n# Retrieve the data\ndata = res.text", "category": "Python"}, {"instruction": "Generate a code to form a Pascal Triangle with the given input.", "input": "n = 5", "output": "def pascal(n): \n    # An auxiliary array to store \n    # generated pascal triangle values \n    arr =[[0 for x in range(n)] for x in range(n)] \n      \n    # Iterate through every line and  \n    # print integer(s) in it \n    for line in range(0, n): \n          \n        # Every line has number of  \n        # integers equal to line number \n        for i in range(0, line + 1): \n              \n            # First and last values  \n            # in every row are 1 \n            if (i == 0 or i == line): \n                arr[line][i] = 1\n                print(arr[line][i], end=\" \") \n            else: \n                arr[line][i] = (arr[line - 1][i - 1] +\n                                arr[line - 1][i]) \n                print(arr[line][i], end=\" \") \n        print(\"\\r\")", "category": "Python"}, {"instruction": "You are given two arrays, A and B. Write a program to determine if B is a subset of A.", "input": "A = [1, 2, 3, 4, 5]\nB = [2, 3, 5]", "output": "def is_subset(A, B):\n    for i in B:\n        if i not in A:\n            return False\n    \n    return True", "category": "Python"}, {"instruction": "You are given two matrices, M1 and M2. Write a python code to multiply them.", "input": "M1 : \n[[2, 3], \n [5, 6]]\n\nM2 : \n[[1, 2], \n [3, 4]]", "output": "def matrix_multiply(M1, M2):\n    M3 = [[0, 0], [0, 0]]\n    for i in range(len(M1)):\n        for j in range(len(M2[0])):\n            for k in range(len(M2)):\n                M3[i][j] += M1[i][k] * M2[k][j]\n    \n    return M3", "category": "Python"}, {"instruction": "What is a state machine in software engineering?", "input": "", "output": "A state machine in software engineering is a model of computation used to design programs and algorithms that have an input, a process, and an output. A state machine is built from a set of states, any of which can be the current state at any given time, and it transitions from one state to another in reaction to events or inputs. The process of the state machine is the set of predefined operations associated with each state and the set of transitions that dictate how the state machine moves from one state to another.", "category": "Python"}, {"instruction": "What type of loop can be used to iterate through the items of a list in Python?", "input": "", "output": "The most common type of loop for iterating through the items of a list in Python is the for loop. This loop iterates through each item in the list one by one, allowing the programmer to perform operations on each item in the list. For example:\n\nmy_list = [1, 2, 3]\nfor item in my_list:\n    print(item)\n\n# Output\n# 1\n# 2\n# 3", "category": "Python"}, {"instruction": "Write a function that takes an integer parameter and find the maximum of the three numbers with the help of ternary operator.", "input": "", "output": "def find_max_of_three(a, b, c):\n    \"\"\"Function that takes an integer parameter and find the maximum of the three numbers with the help of ternary operator\"\"\"\n    max_value = a if a > b and a > c else (b if b > a and b > c else c)\n    return max_value\n\nif __name__ == '__main__':\n    a = 1\n    b = 5\n    c = 3\n    max_value = find_max_of_three(a, b, c)\n    print(max_value)", "category": "Python"}, {"instruction": "Write a Python program to create a dictionary containing students and their scores.", "input": "", "output": "# Declare an empty dictionary\nscores = {}\n\n# Enter some students and their scores\nscores['student1'] = 90\nscores['student2'] = 85\nscores['student3'] = 100\n\n# Print the scores\nprint(scores)\n\n# Output - {'student1': 90, 'student2': 85, 'student3': 100}", "category": "Python"}, {"instruction": "Calculate the sum of all the multiples of 3 and 5 between 0 and n", "input": "n = 10", "output": "def sum_multiples(n):\n    result = 0\n    for i in range(1, n):\n        if i % 3 == 0 or i % 5 == 0:\n            result += i\n    return result\n\nif __name__ == '__main__':\n    print(sum_multiples(n))", "category": "Python"}, {"instruction": "Identify which line of code contains a syntax error?", "input": "def getFibonacciNumber(n):\n  a, b = 0, 1\n  for i in range 0, n\n    a, b = b, a + b\n  return a", "output": "The line \"for i in range 0, n\" contains a syntax error. The syntax for the for loop should be \"for i in range(0, n)\".", "category": "Python"}, {"instruction": "Identify the Python command to search a string for a specific keyword.", "input": "", "output": "string.find('keyword') or string.index('keyword')", "category": "Python"}, {"instruction": "Construct a for loop that prints out all prime numbers between 500 and 1000", "input": "", "output": "for i in range(500, 1000):\n    flag = 1\n    for j in range(2, i):\n        if i % j == 0:\n            flag = 0\n            break\n    if flag == 1:\n        print(i)", "category": "Python"}, {"instruction": "Implement a Fibonacci series generator using Python.", "input": "", "output": "def generate_fibonacci(n):\n a, b = 0, 1\n fibonacci_series = [a]\n for i in range(n-1):\n a, b = b, a+b\n fibonacci_series.append(b)\n return fibonacci_series", "category": "Python"}, {"instruction": "Write a class in Python to represent a division with two integers and the following operations: addition, subtraction, multiplication and division.", "input": "", "output": "class Division():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        \n    def add(self):\n        return self.x + self.y\n    \n    def subtract(self):\n        return self.x - self.y\n    \n    def multiply(self):\n        return self.x * self.y\n    \n    def divide(self):\n        return self.x / self.y\n    \n    \ndiv = Division(10, 5)\nprint(\"Addition of the two numbers:\", div.add())\nprint(\"Subtraction of the two numbers:\", div.subtract())\nprint(\"Multiplication of the two numbers:\", div.multiply())\nprint(\"Division of the two numbers:\", div.divide())", "category": "Python"}, {"instruction": "Write code to detect the dominant language in a string.", "input": "This is a test string with multiple languages, including French, Spanish, and English.", "output": "import langdetect\n\ndef detect_language(s):\n    \"\"\"\n    Detects the dominant language from a given string.\n\n    Parameters\n    ----------\n    s : str\n        A string containing multiple languages\n\n    Returns\n    -------\n    str\n        The dominant language found in the given string\n    \"\"\"\n    return langdetect.detect(s)\n\ntext = \"This is a test string with multiple languages, including French, Spanish, and English.\"\nlang = detect_language(text)\nprint('The dominant language found in the text is:', lang)", "category": "Python"}, {"instruction": "Train a machine learning model to classify cats and dogs.", "input": "", "output": "\"\"\"\nTrain a machine learning model to classify cats and dogs\n\"\"\"\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers import Activation, Dropout, Flatten, Dense\nfrom keras import backend as K\n\n# Setting up Image Data Generator\ntrain_data_dir = 'data/train'\nvalidation_data_dir = 'data/validation'\n\nimg_width, img_height = 100, 100\ntrain_datagen = ImageDataGenerator(\n rescale=1. / 255,\n shear_range=0.2,\n zoom_range=0.2,\n horizontal_flip=True)\n\ntest_datagen = ImageDataGenerator(rescale=1. / 255)\n\ntrain_generator = train_datagen.flow_from_directory(\n train_data_dir,\n target_size=(img_width, img_height),\n batch_size=32,\n class_mode='binary')\n\nvalidation_generator = test_datagen.flow_from_directory(\n validation_data_dir,\n target_size=(img_width, img_height),\n batch_size=32,\n class_mode='binary')\n\n# Setting up the model\nmodel = Sequential()\nmodel.add(Conv2D(32, (3, 3), input_shape=(img_width, img_height, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(32, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(64, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(64))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))\n\nmodel.compile(loss='binary_crossentropy',\n optimizer='rmsprop',\n metrics=['accuracy'])\n\n# Training the model\nmodel.fit_generator(\n train_generator,\n steps_per_epoch=2000,\n epochs=50,\n validation_data=validation_generator,\n validation_steps=800)", "category": "Python"}, {"instruction": "Explain how to detect prime numbers in Python.", "input": "", "output": "We can detect prime numbers in Python by using a for loop. The for loop will iterate over all numbers from 2 up to the given number. For each number we loop through, we check to see if the number is divisible by any other number greater than 1. If the number is divisible by any other number, then we know it is not a prime number. If the number is only divisible by 1 and itself, then we know it is a prime number.", "category": "Python"}, {"instruction": "Suggest a method in Python for sorting a list of strings on the basis of their length in ascending order.", "input": "", "output": "We can use the built-in sorted() function to sort the list of strings on the basis of their length in ascending order. The syntax for sorting is as follows:\n\nsorted(list_of_strings, key=len)\n\nwhere 'list_of_strings' is the list of strings we want to sort and 'len' is the length function for getting the length of each string.", "category": "Python"}, {"instruction": "Generate pseudo code for a function that swaps two numbers x and y.", "input": "", "output": "// Function to swap two numbers\ndef swap(x, y):\n    // Store the value of x into a temporary variable  \n    temp = x\n\n    // Store y in x  \n    x = y\n\n    // Store temp in y  \n    y = temp\n    return x,y", "category": "Python"}, {"instruction": "Write a python code to find median of two sorted arrays.", "input": "A = [1,4,6,7]B = [3,5,8,9]", "output": "def find_median(A, B):\n    \"\"\"Function to find median of two sorted arrays\"\"\"\n    m = len(A)\n    n = len(B)\n    if m > n:\n        A,B,m,n = B,A,n,m\n    imin, imax, half_len = 0, m , (m+n+1) // 2\n    while imin <= imax:\n        i = (imin+imax) // 2\n        j = half_len -i\n        if i < m and B[j-1] > A[i]:\n            # i is too small, must increase it\n            imin = i + 1\n        elif i > 0 and A[i-1] > B[j]:\n            # i is too big, must decrease it\n            imax = i - 1\n        else:\n            # i is perfect\n            if i == 0:\n                max_of_left = B[j-1] \n            elif j == 0:\n                max_of_left = A[i-1] \n            else:\n                max_of_left = max(A[i-1], B[j-1]) \n \n            if (m + n) % 2 == 1:\n                return max_of_left \n \n            if i == m:\n                min_of_right = B[j] \n            elif j == n:\n                min_of_right = A[i] \n            else:\n                min_of_right = min(A[i], B[j]) \n \n            return (max_of_left + min_of_right) / 2.0\n\nif __name__ == '__main__':\n    A = [1,4,6,7]\n    B = [3,5,8,9]\n    median = find_median(A, B)\n    print(median)", "category": "Python"}, {"instruction": "Identify all the statements that are erroneous or have logical errors.", "input": "a = 2\nb = 1\nif a > b\n    print(\"a is greater than b\")\nelif a == b\n    print(\"a is equal to b\")\nelse\n    print(\"b is greater than a\")", "output": "The statements that are erroneous or have logical errors are:\n1) There is no colon (:) after the 'if' and 'elif' statements\n2) There is no colon (:) after the 'else' statement.\n3) The parentheses after 'print' are unnecessary.", "category": "Python"}, {"instruction": "Write a code to generate a dictionary that contains the frequencies of all English alphabets in a given sentence.", "input": "Sentence: The brain is a powerful tool", "output": "def get_alphabet_frequencies(sentence):\n    \"\"\"Function to generate a dictionary that contains the frequencies of all English alphabets in a given sentence\"\"\"\n    alphabet_freq = dict()\n    for el in sentence:\n        if el.isalpha():\n            el = el.lower()\n            if el in alphabet_freq:\n                alphabet_freq[el] += 1\n            else:\n                alphabet_freq[el] = 1\n    return alphabet_freq\n\nif __name__ == '__main__':\n    sentence = \"The brain is a powerful tool\"\n    alphabet_freq = get_alphabet_frequencies(sentence)\n    print(alphabet_freq)", "category": "Python"}, {"instruction": "Create a hash table in Python using a dictionary.", "input": "", "output": "h = {}\n\n# Add key:value pairs\nh['key1'] = 'value1'\nh['key2'] = 'value2'\nh['key3'] = 'value3'", "category": "Python"}, {"instruction": "Create a nested For loop in Python with the outer loop counting from 0  to 3 and the inner loop counting from 5 to 10.", "input": "", "output": "for i in range(0,4):\n  for j in range(5,11):\n    print(\"outer loop at: \"+str(i)+\" inner loop at: \"+str(j))", "category": "Python"}, {"instruction": "Write an API call in Python using the request module to get data from a URL.", "input": "https://www.example.com", "output": "import requests \n\nr = requests.get(url = \"https://www.example.com\") \ndata = r.json()", "category": "Python"}, {"instruction": "Create a for loop in Python for the range between 0 and 10.", "input": "", "output": "for i in range(0,11):\n\tprint(i)", "category": "Python"}, {"instruction": "Create a softmax activation function in Python.", "input": "", "output": "def softmax(x):\n  \"\"\"Compute softmax values for each sets of scores in x.\"\"\"\n  e_x = np.exp(x - np.max(x))\n  return e_x / e_x.sum(axis=0)", "category": "Python"}, {"instruction": "Code a solution in Python to replace all the occurences of a specific word in a string.", "input": "sentence = \"I like apples\"\nword = \"apples\"\nreplacement = \"bananas\"", "output": "def replace_word(sentence, word, replacement):\n    words = sentence.split(\" \")\n    new_sentence = \"\"\n    for w in words:\n        if w == word:\n            w = replacement\n        new_sentence += w + \" \"\n    return new_sentence\n\nsentence = \"I like apples\"\nword = \"apples\"\nreplacement = \"bananas\"\n\nprint(replace_word(sentence, word, replacement))", "category": "Python"}, {"instruction": "Write a function that takes a single parameter and returns the absolute value of the parameter.", "input": "", "output": "def absolute_value(x):\n    if x < 0:\n        return -x\n    else:\n        return x", "category": "Python"}, {"instruction": "Create a class with two methods, one to return the name and the other to return the age.", "input": "", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def get_name(self):\n        return self.name\n\n    def get_age(self):\n        return self.age", "category": "Python"}, {"instruction": "Write a function, which given an array and a number, returns the array with the number added.", "input": "arr = [1, 2, 3, 4]\nnum = 10", "output": "def add_num(arr, num):\n    return [x + num for x in arr]", "category": "Python"}, {"instruction": "Suggest a vector representation for the following phrases.", "input": "happy, angry", "output": "happy = [1, 0, 0, 0]\nangry = [0, 1, 0, 0]", "category": "Python"}, {"instruction": "Combine a loop and a conditional statement to output the following", "input": "[2, 3, 4, 5]", "output": "arr = [2, 3, 4, 5] \n\nfor i in arr: \n    if i % 2 == 0: \n        print(i) \n\n# Output: \n2\n4", "category": "Python"}, {"instruction": "Suggest a technique to optimize memory usage", "input": "", "output": "One way to optimize memory usage is to use strategic data structures like hash tables and trees that can store data in a more space-efficient manner. Additionally, one can use code optimization techniques such as code reuse and memory caching to reduce memory usage. One should also think carefully about data structure design choices, such as choosing between an array and linked list, to minimize memory usage.", "category": "Python"}, {"instruction": "Suggest a way to secure user passwords", "input": "", "output": "One way to secure user passwords is to use a secure hash algorithm such as bcrypt, scrypt, etc. to hash the passwords before storing them in the database. This ensures that even if the passwords are exposed, they will not be easily readable. Furthermore, it is important to use a secure server and to monitor the database for any suspicious activity.", "category": "Python"}, {"instruction": "Write a user authentication code in Python", "input": "", "output": "def authentication(username,password): \n    if username == \"username\" and password == \"password\": \n        print (\"Login successful\") \n    else: \n        print (\"Incorrect username or password\") \n\nusername = input(\"Enter your username: \")\npassword = input(\"Enter your password: \")\n\nauthentication(username, password)", "category": "Python"}, {"instruction": "Update the following function so that it returns the greatest among three numbers", "input": "def find_max(a, b):\n    if a > b:\n        return a\n    else:\n        return b", "output": "def find_max(a, b, c):\n    if a >= b and a >= c:\n        return a\n    elif b >= a and b >= c:\n        return b\n    else:\n        return c", "category": "Python"}, {"instruction": "Rewrite the following code snippet so that it is compatible with Python 3", "input": "sum = 0\nfor num in range(10):\n   sum = sum + num\nprint sum", "output": "sum = 0\nfor num in range(10):\n   sum += num\n\nprint(sum)", "category": "Python"}, {"instruction": "Define a command line application that prints \u201cHello, world.\u201d", "input": "", "output": "import argparse\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\"--print_hello\", help=\"print hello, world\", action=\"store_true\")\n\nif __name__ == \"__main__\":\n    args = parser.parse_args()\n    \n    if args.print_hello:\n       print(\"Hello, world.\")", "category": "Python"}, {"instruction": "Write a Python algorithm to find the most common value in an array.", "input": "arr = [1, 2, 3, 3, 3, 3, 4, 4, 5]", "output": "def most_common(arr):\n    freq = {}\n    \n    # Count the frequency of each element\n    for el in arr:\n        if el not in freq:\n            freq[el] = 1\n        else:\n            freq[el] += 1\n            \n    # Find the maximum frequency\n    max_freq = -1\n    for el, freq in freq.items():\n        max_freq = max(max_freq, freq)\n    \n    # Find the element with maximum frequency\n    most_common_el = None\n    for el, freq in freq.items():\n        if freq == max_freq:\n            most_common_el = el\n    \n    return most_common_el", "category": "Python"}, {"instruction": "Create a program to convert a given time in GMT form to local time.", "input": "", "output": "from datetime import datetime, timezone\n\ndef local_time(gmt_time):\n    utc_time = datetime.fromisoformat(gmt_time.replace(\"Z\", \"+00:00\"))\n \n    local_time = utc_time.astimezone()\n \n    return local_time.isoformat()", "category": "Python"}, {"instruction": "Given a string s and an integer k, write a code to find the kth most frequent element in the string", "input": "String s: \"hello world hello\"\nInteger k: 2", "output": "# Counting frequencies \ncounts = dict() \nwords = s.split(' ') \nfor word in words: \n    if word in counts: \n        counts[word] += 1\n    else: \n        counts[word] = 1\n  \n# Getting the kth most frequent element \nkth_most_frequent = sorted(counts, key = counts.get, reverse = True)[k-1] \n  \nprint(kth_most_frequent) \n\n# Output: hello", "category": "Python"}, {"instruction": "Construct a for loop in Python to print the array in descending order.", "input": "my_array = [4, 3, 5, 7, 1]", "output": "for i in sorted(my_array, reverse=True):\n  print(i)\n\n# Output:\n# 7\n# 5\n# 4\n# 3\n# 1", "category": "Python"}, {"instruction": "Generate a Python code to add two numbers using a lambda expression.", "input": "num1 = 10\nnum2 = 25", "output": "add = lambda num1, num2: num1 + num2\n\nprint(add(num1, num2))  # Output: 35", "category": "Python"}, {"instruction": "Create a dictionary of items with the corresponding price in Python.", "input": "items = ['book', 'pen', 'chair']\nprices = [10, 2, 5]", "output": "prices_dict = dict(zip(items, prices))\n# prices_dict = {'book': 10, 'pen': 2, 'chair': 5}", "category": "Python"}, {"instruction": "Create a script in Python which takes a number as an argument and prints its corresponding nth Fibonacci number.", "input": "", "output": "def fibonacci(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)", "category": "Python"}, {"instruction": "Create a user interface to display a chart showing the number of people of a certain gender and age group.", "input": "Sample JSON data to be used: \n\n[\n  {\n    \"name\": \"John\",\n    \"age\": 25,\n    \"gender\": \"male\"\n  },\n  {\n    \"name\": \"Jane\",\n    \"age\": 22,\n    \"gender\": \"female\"\n  },\n  {\n    \"name\": \"Bob\",\n    \"age\": 28,\n    \"gender\": \"male\"\n  },\n  {\n    \"name\": \"Jill\",\n    \"age\": 24,\n    \"gender\": \"female\"\n  }\n]", "output": "import json\nimport plotly.graph_objs as go\n\ndef create_chart():\n    data = json.load('data.json')\n    males = 0 \n    females = 0\n    male_ages = [0] * 100\n    females_ages = [0] * 100\n\n    # count males/females and age group \n    for person in data:\n        if person['gender'] == 'male':\n            males += 1\n            age = int(person['age'])\n            male_ages[age] += 1\n        else:\n            females += 1\n            age = int(person['age'])\n            females_ages[age] += 1\n\n    # create data\n    data = [\n        go.Bar(\n            name='Males',\n            x=list(range(100)),\n            y=male_ages\n        ),\n        go.Bar(\n            name='Females',\n            x=list(range(100)),\n            y=females_ages\n        )\n    ]\n\n    # Create Layout\n    layout = go.Layout(\n        title='Number of People by Gender and Age Group',\n        yaxis=dict(title='Number of People'),\n        xaxis=dict(title='Age')\n    )\n\n    # Create Figure\n    figure = go.Figure(data=data, layout=layout)\n\n    # Plot and save the chart\n    figure.show()\n    figure.write_image('gender_age.png')\n\ncreate_chart()", "category": "Python"}, {"instruction": "Create a function in Python which takes a string as an argument and returns the first character of the string in upper case.", "input": "", "output": "def first_upper_char(input_string):\n    if len(input_string) == 0:\n        return ''\n    else:\n        return input_string[0].upper()", "category": "Python"}, {"instruction": "Develop a program that prints out the output of the following expression.", "input": "[2, 4, 6, 8]", "output": "def expression_output(lst):\n    s = 0\n    for i in lst:\n        s += i**2 - 5*i + 6\n    return s", "category": "Python"}, {"instruction": "Write a python script to identify a palindrome from a given input string", "input": "inputString = \"abacab\"", "output": "def checkPalindrome(inputString): \n  \n    # reverse the given string \n    reverseString = inputString[::-1] \n  \n    # check if the string is equal to its reverse \n    if (inputString == reverseString): \n        return True\n    else: \n        return False\n  \n# Driver code \nif __name__ == \"__main__\": \n    inputString = \"abacab\"\n    print(checkPalindrome(inputString))", "category": "Python"}, {"instruction": "Create a Python dictionary that includes the keys \"name\", \"age\", and \"location\", and set the values to your name, age, and location.", "input": "", "output": "my_dict = {\n \"name\": \"John Smith\",\n \"age\": 28,\n \"location\": \"New York\"\n}", "category": "Python"}, {"instruction": "Write a Python script that converts the number 122 to binary.", "input": "", "output": "def dec_to_bin(n):\n binary_num = bin(n) \n print(binary_num[2:])\ndec_to_bin(122)", "category": "Python"}, {"instruction": "Write a code for creating a Fibonacci sequence", "input": "n = 10", "output": "def fibonacci_seq(n):\n    seq = [0, 1]\n    for i in range(2, n):\n        seq.append(seq[i-1] + seq[i-2])\n    return seq\n\nif __name__ == '__main__':\n    n = 10\n    result = fibonacci_seq(n)\n    print(result)  # prints [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "category": "Python"}, {"instruction": "Create a program to find the maximum length common subsequence of two given strings.", "input": "String1: \"abcdgf\" \nString2: \"abcdhfe\"", "output": "def find_max_subseq(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    dp = [[0 for _ in range(n2 + 1)] for _ in range(n1 + 1)]\n\n    for i in range(1, n1 + 1):\n        for j in range(1, n2 + 1):\n            if(str1[i - 1] == str2[j - 1]):\n                dp[i][j] = dp[i - 1][j - 1] + 1 \n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n1][n2]\n\nif __name__ == '__main__':\n    str1 = \"abcdgf\"\n    str2 = \"abcdhfe\"\n    result = find_max_subseq(str1, str2)\n    print(result)  # prints 5", "category": "Python"}, {"instruction": "Write code for a substring search", "input": "String: \"Hello World\"\nSubstring: \"llo\"", "output": "def search_substring(string, substr):\n    if substr in string:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    string = \"Hello World\"\n    substr = \"llo\"\n    result = search_substring(string, substr)\n    print(result)  # prints True", "category": "Python"}, {"instruction": "Convert a given number from degrees to radians.", "input": "90", "output": "def deg_to_rad(deg):\n    return (deg * 3.14)/180\n    \nif __name__ == '__main__':\n    deg = 90\n    rad = deg_to_rad(deg)\n    print(rad)  # prints 1.571", "category": "Python"}, {"instruction": "Write a code to split a list of numbers into two sets with equal sum", "input": "[1, 2, 3, 4, 5, 6, 7]", "output": "def split_list(list):\n    start = 0\n    end = len(list) - 1\n\n    left_sum = 0\n    right_sum = sum(list[start:end+1])\n\n    while start < end:\n        right_sum -= list[end]\n        if left_sum == right_sum:\n            break\n        left_sum += list[start]\n        start += 1\n\n    if left_sum == right_sum:\n        return list[:start], list[start:]\n    else:\n        return None\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    left, right = split_list(arr)\n    print(\"left set:\", left)  # prints [1, 2, 3, 4]\n    print(\"right set:\", right)  # prints [5, 6, 7]", "category": "Python"}, {"instruction": "Using a try-except statement, write a Python code to handle a ValueError which arises if the input is not a number.", "input": "", "output": "try:\n  input_num = int(input(\"Enter a number: \"))\nexcept ValueError:\n  print(\"Please enter a valid number\")", "category": "Python"}, {"instruction": "Create a Python class for a product that includes data fields for name, description, and price.", "input": "", "output": "class Product:\n  def __init__(self, name, description, price):\n    self.name = name\n    self.description = description\n    self.price = price\n\n  def __str__(self):\n    return f\"Name: {self.name}\\nDescription: {self.description}\\nPrice: {self.price}\"", "category": "Python"}, {"instruction": "Construct a Python script to print a specific character from a string.", "input": "str = \"Hello world!\"\nindex = 5", "output": "testString = \"Hello world!\"\nprint(testString[index])\n# Output will be: w", "category": "Python"}, {"instruction": "How would you use an if-else statement to test whether a number is even or odd?", "input": "", "output": "def test_even_odd(num):\n  if num % 2 == 0:\n    print(\"The number is even\")\n  else:\n    print(\"The number is odd\")", "category": "Python"}, {"instruction": "Write a code to delete a node from a given BST.", "input": "", "output": "# Node class to define a node of a BST \nclass Node(object): \n  \n    # Constructor \n    def __init__(self, data): \n        self.data = data \n        self.left = None\n        self.right = None\n  \n# Function to delete a given node from BST \ndef delete_node(root, key): \n  \n    # base case \n    if root is None: \n        return None\n  \n    # If the key to be delete is smaller than the root's \n    # key then it lies in left subtree \n    if key < root.data: \n        root.left = delete_node(root.left, key) \n  \n    # If the kye to be delete is greater than the root's key \n    # then it lies in right subtree \n    elif(key > root.data): \n        root.right = delete_node(root.right, key) \n  \n    # if key is same as root's key, then this is the node \n    # to be deleted \n    else: \n        # Node with only one child or no child \n        if root.left is None : \n            temp = root.right \n            root = None\n            return temp \n              \n        elif root.right is None : \n            temp = root.left \n            root = None\n            return temp \n  \n        # Node with two children: Get the inorder successor \n        # (smallest in the right subtree) \n        temp = find_min(root.right) \n  \n        # Copy the inorder successor's content to this node \n        root.data = temp.data \n  \n        # Delete the inorder successor \n        root.right = delete_node(root.right , temp.data) \n  \n  \n    return root \n  \n\"\"\" Helper Functions \"\"\"\n  \n# Function to find the minimum node \ndef find_min(node): \n    current = node \n  \n    # loop down to find the leftmost leaf \n    while(current.left is not None): \n        current = current.left  \n  \n    return current", "category": "Python"}, {"instruction": "Import a module in Python and store it in a variable named \u201cimport_module\u201d.", "input": "", "output": "import_module = importlib.import_module(\"<module name>\")", "category": "Python"}, {"instruction": "Write a code snippet for a function that deletes a specific element from an array.", "input": "", "output": "def delete_element(arr, element):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == element:\n            while count < len(arr)-1:\n                arr[i] = arr[i+1]\n                i+=1\n            count+=1\n    arr.pop()\n    return arr", "category": "Python"}, {"instruction": "Why is a dictionary in Python often called an associative array?", "input": "", "output": "A dictionary in Python is often called an associative array because of the manner in which it stores data. The structure of a dictionary maps keys (strings, numbers, etc.) to their associated values in an associative manner, as in a mathematical mapping or function. This makes dictionaries an ideal choice for storing key-value pairs or to associate an item of data with a particular value.", "category": "Python"}, {"instruction": "Using the comment as a guide, fill in the gaps in the following code.", "input": "input_list = [1, 2, 3, 4]\n\ndef transform_list (input_list):\n    '''Transform the list by adding 5 to each element'''\n    # TODO", "output": "input_list = [1, 2, 3, 4]\n\ndef transform_list (input_list):\n    '''Transform the list by adding 5 to each element'''\n    transformed_list = [x+5 for x in input_list]\n    return transformed_list", "category": "Python"}, {"instruction": "Use Python to generate a random string of length 8 using lowercase alphabetic characters.", "input": "", "output": "import random\n\ndef random_string():\n  chars = 'abcdefghijklmnopqrstuvwxyz'\n  return ''.join(random.choice(chars) for i in range(8))\n\nrandom_string() // 'fldmgnkd'", "category": "Python"}, {"instruction": "Define a function called my_function that will take a string as an argument and returns the string with all the vowels removed.", "input": "", "output": "def my_function(string):\n    vowels = 'aeiouAEIOU'\n    newString = ''\n    for char in string:\n       if char not in vowels:\n          newString += char\n    return newString", "category": "Python"}, {"instruction": "Write a code in Python to count the number of words in the sentence \"Hello World\".", "input": "", "output": "# Count the number of words in the sentence\nsentence = \"Hello World\"\n\nnum_words = len(sentence.split())\n\nprint(num_words) # prints 2", "category": "Python"}, {"instruction": "Sort the following list using a bubble sort algorithm.", "input": "[36, 71, 16, 21, 73]", "output": "# Bubble sort function\ndef bubble_sort(my_list):\n    # Do n times\n    for i in range(0, len(my_list) - 1):\n        # Do n - i - 1 times\n        for j in range(0, len(my_list) - 1 - i):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n    return my_list\n\n# Test data\nmy_list = [36, 71, 16, 21, 73]\n\n# Call the function\nsorted_list = bubble_sort(my_list)\n\nprint(sorted_list) # prints [16, 21, 36, 71, 73]", "category": "Python"}, {"instruction": "Write a Python function to print a string of given length n filled with asterisks.", "input": "", "output": "def print_asterisks(n):\n    for i in range(n):\n        print(\"*\", end=\"\")\n    print(\"\")", "category": "Python"}, {"instruction": "Write the code to print a given table format in Python.", "input": "Table with 4 columns and 5 rows", "output": "for i in range(1,6):\n    print('{:<10}{:<10}{:<10}{:<10}'.format(i, i**2, i**3, i**4))", "category": "Python"}, {"instruction": "Input a two-dimensional array and calculate the sum of each row.", "input": "arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def row_sum(arr): \n    row_sum = [] \n    for row in arr:\n        sum = 0 \n        for ele in row: \n            sum += ele \n        row_sum.append(sum) \n    return row_sum", "category": "Python"}, {"instruction": "Create a function that takes a 2D array of numerical values and returns the number of times the maximum value appears.", "input": "my_array = [[1, 2, 4, 1],\n            [2, 3, 3, 2],\n            [3, 4, 3, 3]]", "output": "def count_max(arr):\n    max_val = 0\n    count = 0\n    for row in arr:\n        max_val = max(max_val, max(row))\n\n    for row in arr:\n        if max(row) == max_val:\n            count += 1\n    \n    return count", "category": "Python"}, {"instruction": "Code a function to clamp a given number between a minimum value and maximum value.", "input": "Number: 8, Minimum: 3, Maximum: 10", "output": "def clamp_number(num, min_value, max_value):\n    if num < min_value: \n        return min_value \n    elif num > max_value: \n        return max_value \n    else: \n        return num", "category": "Python"}, {"instruction": "Print out the string formed by repeating each character in a given string n times.", "input": "String: \"abc\", n: 3", "output": "def repeat_string(string, n):\n    repeated = \"\"\n    for letter in string:\n        for _ in range(n):\n            repeated += letter\n    return repeated", "category": "Python"}, {"instruction": "Write a code to get the top 10 trending topics on Twitter with their volume using the Twitter API.", "input": "", "output": "\"\"\"\nGet the top 10 trending topics on Twitter with their volume using the Twitter API\n\"\"\"\n\nimport tweepy\n\n#Authenticate to Twitter\nauth = tweepy.OAuthHandler(\"CONSUMER_KEY\", \"CONSUMER_SECRET\")\nauth.set_access_token(\"ACCESS_KEY\", \"ACCESS_SECRET\")\n\n#Create API Object\napi = tweepy.API(auth)\n\n#Get top 10 trending topics\ntrends = api.trends_place(23424975) # 23424975 is the WOEID code for the US\n\n#Print the top 10 trending topics\nfor trend in trends[0][\"trends\"][:10]:\n    print(trend[\"name\"] + \" (Volume: \" + str(trend[\"tweet_volume\"]) + \")\")", "category": "Python"}, {"instruction": "Develop an algorithm in Python to determine whether two strings are anagrams.", "input": "", "output": "def is_anagram(string1, string2):\n    # Create a dictionaries for strings\n    string1_dict = {}\n    string2_dict = {}\n  \n    # Add the chars from each string to the dictionaries\n    for char in string1:\n        if char not in string1_dict:\n            string1_dict[char] = 1\n        else:\n            string1_dict[char] += 1\n    \n    for char in string2:\n        if char not in string2_dict:\n            string2_dict[char] = 1\n        else:\n            string2_dict[char] += 1\n    \n    # Check if the dictionaries have the same entries\n    for key in string1_dict:\n        if key not in string2_dict:\n            return False\n        elif string1_dict[key] != string2_dict[key]:\n            return False\n    \n    return True\n  \n# Test the algorithm\nstring1 = \"listen\"\nstring2 = \"silent\"\n\nif(is_anagram(string1, string2)):\n    print(\"The strings are anagrams\")\nelse:\n    print(\"The strings are not anagrams\")", "category": "Python"}, {"instruction": "Write a Python function that takes an array of strings as an argument and returns a boolean.", "input": "", "output": "def check_array(arr):\n  if len(arr) == 0:\n    return False\n\n  for str in arr:\n    if len(str) == 0:\n      return False\n   \n  return True", "category": "Python"}, {"instruction": "Create a new Python dictionary with numbers 1-10 as keys and their corresponding squares as values.", "input": "", "output": "squares = {1:1, 2:4, 3:9, 4:16, 5:25, 6:36, 7:49, 8:64, 9:81, 10:100}", "category": "Python"}, {"instruction": "How do you calculate the sum of a list of numbers in Python?", "input": "", "output": "The sum of a list of numbers in Python can be calculated using the built-in sum() function. This function takes an iterable object (such as a list or tuple) containing numbers as its argument and returns the sum of all the elements in the object. For example, sum([1,2,3]) will return 6.", "category": "Python"}, {"instruction": "Write a Python code that prints out the first 5 elements of a tuple.", "input": "", "output": "tup=(1,2,3,4,5,6,7,8,9,10)\n\nfor i in range(0,5): \n    print (tup[i])", "category": "Python"}, {"instruction": "How can you sort an array using insertion sort?", "input": "", "output": "Insertion sort is a sorting algorithm in which each item of the array is inserted at its correct position in the sorted list. It involves scanning the array and comparing each element with its adjacent elements in the array. If the element is smaller than its neighbors, it is swapped with its left neighbor, and if the element is larger, it is swapped with its right neighbor. This process is repeated until the array is sorted.", "category": "Python"}, {"instruction": "Create a program to find the longest substring with unique characters", "input": "", "output": "def longest_substring(string): \n    n = len(string) \n  \n    ''' Initialization of stings, \n    a and b ''' \n    a = \"\" \n    b = \"\"  \n  \n    ''' Initialization of maximum length substring \n    having distinct characters ''' \n    maxlen = 0  \n  \n    ''' 1. Pick starting point \n    2. intialise substrng \"a\"\n    3. Find the longest such \n    substring by comparing \n    current and previous  \n    substring ''' \n    for i in range(n):\n        a += string[i] \n        b = \"\" \n        for j in range(i + 1, n): \n            if string[j] not in a:              \n                b += string[j] \n            else: \n                break\n        if len(a) > maxlen: \n            maxlen = len(a) \n        a += b\n    return maxlen", "category": "Python"}, {"instruction": "Construct a program that can calculate the factorial of a number using a while loop", "input": "", "output": "def factorial_while(n):\n    factorial = 1\n    while n>0:\n        factorial = factorial * n\n        n = n - 1\n    return factorial", "category": "Python"}, {"instruction": "Write a function to compute the factorial of a number using recursion.", "input": "", "output": "def factorial_recursion( n ):\n   if n == 1:\n       return n\n   else:\n       return n * factorial_recursion( n - 1 )", "category": "Python"}, {"instruction": "Analyze the given text using opinion mining.", "input": "The new iPhone is awesome, I love it!", "output": "import nltk \nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer \nsid = SentimentIntensityAnalyzer() \nss = sid.polarity_scores(text) \n\n# Output\n{'neg': 0.0, 'neu': 0.49, 'pos': 0.51, 'compound': 0.7717}", "category": "Python"}, {"instruction": "Translate the following Python programme into JavaScript.", "input": "num1 = 8\nnum2 = 0\n\nif num1 > num2:\n  print(\"num1 is greater than num2\")\nelse:\n  print(\"num2 is greater than num1\")", "output": "let num1 = 8;\nlet num2 = 0;\n\nif (num1 > num2) {\n  console.log(\"num1 is greater than num2\");\n} else {\n  console.log(\"num2 is greater than num1\");\n}", "category": "Python"}, {"instruction": "Use NumPy to create a 3x3 array of random numbers from 0 to 1.", "input": "", "output": "import numpy as np\narr = np.random.rand(3, 3)\nprint(arr)\n\n# Output\n[[0.78000621 0.36251339 0.91162219]\n [0.52734163 0.56699849 0.03191476]\n [0.81245571 0.21147751 0.72691151]]", "category": "Python"}, {"instruction": "Read the given JSON data and display the value of the \"Name\" field.", "input": "{\n  \"Name\": \"Text Analyzer\",\n  \"Version\": \"1.0.0\",\n  \"Author\": \"John Doe\"\n}", "output": "import json\n\n# Reading data\ndata = {\n  \"Name\": \"Text Analyzer\",\n  \"Version\": \"1.0.0\",\n  \"Author\": \"John Doe\"\n}\n\n# Printing the value of the \"Name\" field\nprint(json.dumps(data['Name']))\n\n# Output\nText Analyzer", "category": "Python"}, {"instruction": "Find the similarity between two given sentences using NLTK library.", "input": "sentence1 = \"This has been an exciting journey\"\nsentence2 = \"It's been a thrilling ride\"", "output": "import nltk\nfrom nltk.corpus import wordnet\nsentence1 = \"This has been an exciting journey\"\ns1 = nltk.word_tokenize(sentence1) \nsentence2 = \"It's been a thrilling ride\"\ns2 = nltk.word_tokenize(sentence2) \n\n# First we convert the words into their respective synonyms\nsyn1 = []\nfor word in s1:\n    for syn in wordnet.synsets(word): \n        for l in syn.lemmas(): \n            syn1.append(l.name())\n\nsyn2 = []\nfor word in s2:\n    for syn in wordnet.synsets(word): \n        for l in syn.lemmas(): \n            syn2.append(l.name())\n\n# Calculating similarity using Path_Similarity \nsimilarity = []\nfor word1 in syn1:\n    for word2 in syn2:\n        p_sim = wordnet.path_similarity(wordnet.synset(word1),wordnet.synset(word2))\n        similarity.append(p_sim)\n       \n# Calculate the average of all similarity scores\nresult = sum(similarity)/len(similarity)\n\n# Output\n0.6521739130434783", "category": "Python"}, {"instruction": "Suggest a way to complete the following Python program which takes two strings as input and prints out the longer string.", "input": "first_str = 'hello'\nsecond_str = 'world'", "output": "if len(first_str) == len(second_str):\n    print('The two strings are of equal length.')\nelif len(first_str) > len(second_str):\n    print(first_str)\nelse:\n    print(second_str)", "category": "Python"}, {"instruction": "Create a function in Python to insert a new item into an existing list.", "input": "new_item = 5\nexisting_list = [1, 2, 3, 4]", "output": "def insert_new_item(new_item, existing_list):\n    \"\"\"Inserts a new item into an existing list.\n    \n    Args:\n        new_item (int): The item to be inserted.\n        existing_list (list): The existing list.\n    \n    Returns:\n        list: List with the new item inserted.\n    \"\"\"\n    existing_list.append(new_item)\n    return existing_list", "category": "Python"}, {"instruction": "Create a Python class to store a customer's name, address, and phone number.", "input": "", "output": "class Customer:\n    def __init__(self, name, address, phone):\n        self.name = name\n        self.address = address\n        self.phone = phone", "category": "Python"}, {"instruction": "Use Python to sort a given list of strings.", "input": "myList = [\"bananas\", \"oranges\", \"apples\", \"peaches\"]", "output": "sortedList = sorted(myList)\nprint(sortedList)", "category": "Python"}, {"instruction": "Use NumPy to extract the top 10 rows from a given matrix.", "input": "import numpy as np\narr = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])", "output": "top_10 = arr[:10,]\nprint(top_10)", "category": "Python"}, {"instruction": "Create a function that returns the sum of all elements in a given array of numbers.", "input": "", "output": "def array_sum(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum", "category": "Python"}, {"instruction": "Suggest a solution to store years in ISO 8601 format in Python.", "input": "", "output": "We can use the datetime.date class to store dates in ISO 8601 format. We just need to create an instance of datetime.date using the year, month and day. Then, we can convert it to the ISO 8601 format string using isoformat() method of datetime.date. For example:\nimport datetime\ndate = datetime.date(2016, 1, 1)\niso_date = date.isoformat()\nprint(iso_date) // Output: '2016-01-01'", "category": "Python"}, {"instruction": "Use the given JSON data to create a function that returns the number of males in the dataset.", "input": "Sample JSON data:\n\n[\n  {\n    \"name\": \"John\",\n    \"age\": 25,\n    \"gender\": \"male\"\n  },\n  {\n    \"name\": \"Jane\",\n    \"age\": 22,\n    \"gender\": \"female\"\n  },\n  {\n    \"name\": \"Bob\",\n    \"age\": 28,\n    \"gender\": \"male\"\n  },\n  {\n    \"name\": \"Jill\",\n    \"age\": 24,\n    \"gender\": \"female\"\n  }\n]", "output": "def get_num_males(data):\n    # create a counter variable\n    num_males = 0\n    # loop through the data\n    for person in data:\n        if person['gender'] == 'male':\n            num_males += 1\n    # return the number of males\n    return num_males", "category": "Python"}, {"instruction": "Create a function in Python that takes two strings and checks if the characters in the second string exist in the first string.", "input": "s1 = \"hello world\"\ns2 = \"llo\"", "output": "def char_exists_in_string(s1, s2):\n    for char in s2:\n        if char not in s1:\n            return False\n    \n    return True\n\nif __name__ == '__main__':\n    s1 = \"hello world\"\n    s2 = \"llo\"\n    print(char_exists_in_string(s1, s2))", "category": "Python"}, {"instruction": "Generate an array of random numbers with a size of 10.", "input": "", "output": "import random\n\nmy_arr = [random.randint(1,100) for _ in range(10)]\n\nprint(my_arr) # Output: [76, 64, 26, 62, 59, 35, 66, 18, 52, 49]", "category": "Python"}, {"instruction": "Compute the sum of all the even numbers and odd numbers in an array of numbers.", "input": "[1, 2, 3, 4, 5, 6]", "output": "def sum_of_even_odd(arr):\n  even_sum = 0\n  odd_sum = 0\n  for i in arr:\n    if i % 2 == 0:\n      even_sum += i\n    else:\n      odd_sum += i\n  return even_sum, odd_sum", "category": "Python"}, {"instruction": "Implement the algorithm to reverse a singly linked list.", "input": "", "output": "# Node class  \nclass Node:\n    def __init__(self, data):\n        self.data = data   \n        self.next = None \n  \n# LinkedList class \nclass LinkedList:  \n    # Function to initialize head \n    def __init__(self):\n        self.head = None\n  \n    def reverse(self): \n        prev = None\n        current = self.head \n        while(current is not None): \n            next = current.next\n            current.next = prev \n            prev = current \n            current = next\n        self.head = prev", "category": "Python"}, {"instruction": "Create a Python script to print out all prime numbers up to and including a given number n.", "input": "", "output": "def print_prime_numbers(n):  \n    for num in range(2, n + 1):  \n        is_prime = True \n        for i in range(2, num):  \n            if (num % i) == 0:  \n                is_prime = False\n                break\n        if is_prime:\n            print(num)", "category": "Python"}, {"instruction": "Design a function to find the Fibonacci sequence numbers given n.", "input": "n = 5", "output": "def Fibonacci(n):  \n    if n == 0:   \n        return 0  \n    elif n == 1:  \n        return 1  \n    else:  \n        return Fibonacci(n-1) + Fibonacci(n-2)", "category": "Python"}, {"instruction": "Design an algorithm that computes the minimum number of moves taking an array of integers to a sorted array.", "input": "[1, 3, 5, 4, 2]", "output": "def minMoves(arr): \n    n = len(arr) \n    moves = 0\n    for i in range(n):  \n        for j in range(n - 1):\n            if arr[j] > arr[j + 1]:  \n                temp = arr[j]\n                arr[j] = arr[j + 1] \n                arr[j + 1] = temp\n                moves += 1\n\n    return moves", "category": "Python"}, {"instruction": "Compute the sum of all integers from 1 to the given number n.", "input": "", "output": "def print_sum(n):\n sum = 0\n for i in range(1, n+1):\n sum += i\n return sum", "category": "Python"}, {"instruction": "Given a string in Python, generate a new string with the same set of characters but in the reverse order.", "input": "str = \"abcdefg\"", "output": "str = \"gfedcba\"", "category": "Python"}, {"instruction": "Given the following Python code, identify if it is syntactically correct or not.", "input": "def add(a\nb):\nreturn a+b", "output": "false", "category": "Python"}, {"instruction": "Implement an algorithm to subtract two strings, represented as a linked list, in the order they appear in and return the result as a linked list.", "input": "l1 = [\"1\",\"2\",\"3\"],\nl2 = [\"9\",\"2\"]", "output": "def linkedListSubtract(l1, l2):\n    dummy_node = ListNode(0)\n    current = dummy_node\n \n    carry = 0\n    while l1 or l2:\n        curr_value1 = 0\n        curr_value2 = 0\n        if l1 :\n            curr_value1 += int(l1.val)\n            l1 = l1.next\n        if l2 :\n            curr_value2 += int(l2.val)\n            l2 = l2.next\n        curr_value = curr_value1 - curr_value2 - carry\n        if curr_value < 0 :\n            curr_value += 10\n            carry = 1\n        else :\n            carry = 0\n        current.next = ListNode(str(curr_value))\n        current = current.next\n \n    if carry > 0 :\n        current.next = ListNode(str(carry))\n    return dummy_node.next", "category": "Python"}, {"instruction": "Generate code which returns a random character from a given list of strings.", "input": "['apple','orange','pineapple','grape']", "output": "import random \n\ndef random_character(strings): \n    return random.choice(strings)\n\nrandom_character(['apple','orange','pineapple','grape'])", "category": "Python"}, {"instruction": "Design a function to parse the given URL and return its components.", "input": "url = \"https://www.example.com/path/to/file.php?query=123&param=value\"", "output": "def parse_url(url):\n    parsed = {}\n    parsed[\"domain\"], parsed[\"path\"] = url.split('/', 2)[2:4]\n    params = parsed[\"path\"].split('?')[1] if \"?\" in parsed[\"path\"] else None\n    parsed[\"query\"] = params.split('&') if params else None\n    return parsed", "category": "Python"}, {"instruction": "Edit a first person narrative created by a GPT model in order to make the narrative more coherent.", "input": "I was walking in the forest and suddenly I saw a dragon. It was huge and its scales glimmered in the sunlight. It had sharp claws and its eyes were red.", "output": "I was strolling through the dense forest when, out of the corner of my eye, I noticed something large and shimmering in the sunlight. As I approached, I saw a magnificent dragon lounging among the trees. Its scales glinted in the sun's rays and its massive, sharply-clawed feet were planted firmly into the ground. Its eyes burned a deep red as it watched my slow approach.", "category": "Python"}, {"instruction": "Analyze an object-oriented program written in Python and suggest changes to improve its technical quality.", "input": "def main():\n  my_list = [1,2,3,4] \n\n  for element in my_list:\n    print(element)\n\nif __name__== \"__main__\"\n  main()", "output": "The program can be improved to make use of better data structure, such as a list comprehension. This would allow faster iteration over the list and reduce duplicate lines of code.\n\ndef main():\n  my_list = [1,2,3,4] \n\n  my_list = [element for element in my_list] \n\n  for element in my_list:\n    print(element)\n\nif __name__== \"__main__\"\n  main()", "category": "Python"}, {"instruction": "Write a Python Function to implement the game of Tic-Tac-Toe.", "input": "", "output": "class GameState:\n    def __init__(self):\n        self.board = [[None, None, None],\n                      [None, None, None],\n                      [None, None, None]\n        ]\n    \n    def is_game_over(self):\n        b = self.board\n        # Check if a player won\n        if b[0][0] == b[0][1] == b[0][2] != None or b[1][0] == b[1][1] == b[1][2] != None or b[2][0] == b[2][1] == b[2][2] != None:\n            return True\n        elif b[0][0] == b[1][0] == b[2][0] != None or b[0][1] == b[1][1] == b[2][1] != None or b[0][2] == b[1][2] == b[2][2] != None:\n            return True\n        elif b[0][0] == b[1][1] == b[2][2] != None or b[0][2] == b[1][1] == b[2][0] != None:\n            return True\n        # Check if the board is full\n        elif any(None in row for row in b):\n            return False\n        # All positions filled, no winner\n        else:\n            return True", "category": "Python"}, {"instruction": "Arrange the following characters in a valid Python expression.", "input": "<, 1, %, (", "output": "(1 % <)", "category": "Python"}, {"instruction": "Define a class in Python that represents a currency.", "input": "", "output": "class Currency:\n    def __init__(self, currency_name, currency_symbol, currency_value):\n        self.name = currency_name\n        self.symbol = currency_symbol\n        self.value = currency_value\n        \n    def __str__(self):\n        return f\"{self.name}: {self.symbol}{self.value}\"", "category": "Python"}, {"instruction": "Write a Python function to convert a given Unix timestamp to a readable format like \"day, month, date, hours:minutes:seconds, year\".", "input": "", "output": "import datetime\n\ndef timestamp_to_readable(unix_timestamp):\n    return datetime.datetime.fromtimestamp(unix_timestamp).strftime(\"%A, %B %d, %H:%M:%S, %Y\")", "category": "Python"}, {"instruction": "Submit an optimized solution to the following leetcode problem.", "input": "Problem: Given two binary trees, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.", "output": "def isSameTree(p, q):\n    if p is None and q is None:\n        return True\n    if p is None or q is None:\n        return False\n    if p.val != q.val:\n        return False\n    return isSameTree(p.left, q.left) and isSameTree(p.right, q.right)", "category": "Python"}, {"instruction": "Write a Python function to calculate the power of a number raised to the nth power.", "input": "", "output": "def calculate_power(base, power):\n    if power == 0:\n        return 1\n    else:\n        return base * calculate_power(base, power - 1)", "category": "Python"}, {"instruction": "Generate a password that is at least 8 characters long and contains at least one letter, one number, and one special character.", "input": "", "output": "import random\nimport string\n\ndef generate_password():\n    characters = string.ascii_letters + string.digits + string.punctuation\n    length = 8\n    password = ''.join(random.choice(characters) for _ in range(length))\n    while not (any(c.isdigit() for c in password) and any(c.isalpha() for c in password)\n           and any(c in string.punctuation for c in password)):\n        password = ''.join(random.choice(characters) for _ in range(length))\n    return password", "category": "Python"}, {"instruction": "Generate a code snippet to calculate the sum of an array", "input": "arr = [1, 23, 4, 3, 5]", "output": "def summation(arr):\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n\nprint(summation(arr)) # Output: 36", "category": "Python"}, {"instruction": "Create a class for constructing a new tree", "input": "", "output": "class TreeNode:\n\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n    \n    def Insert(self, data):\n        if self.data:\n            if data < self.data:\n                if self.left is None:\n                    self.left = TreeNode(data)\n                else:\n                    self.left.Insert(data)\n            elif data > self.data:\n                if self.right is None:\n                    self.right = TreeNode(data)\n                else:\n                    self.right.Insert(data)\n        else:\n            self.data = data", "category": "Python"}, {"instruction": "Train a machine learning algorithm to classify objects into one of two classes.", "input": "", "output": "from sklearn.svm import SVC \nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\n\n# Load the iris dataset \niris = load_iris()\n\n# Split the data into train and test sets \nX_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, \n                                                    random_state=0)\n\n# Train the model using SVC \nclf = SVC(kernel='linear', C=1).fit(X_train, y_train)\n\n# Predict the labels of the test set \ny_pred = clf.predict(X_test)", "category": "Python"}, {"instruction": "Write a Python script to check if two string variables are anagrams or not.", "input": "", "output": "def is_anagram(str1, str2):\n    # removing all whitespace from strings \n    str1 = ''.join(str1.split())\n    str2 = ''.join(str2.split()) \n\n    # create list for each string \n    list_str1 = list(str1.upper()) \n    list_str2 = list(str2.upper()) \n\n    # sort the list \n    list_str1.sort() \n    list_str2.sort() \n\n    # checking if both lists are identical or not \n    if (list_str1 == list_str2): \n        return True\n    else: \n        return False", "category": "Python"}, {"instruction": "Generate a web service function in Python to return the current date and time.", "input": "", "output": "import datetime\n\ndef get_current_time():\n    now = datetime.datetime.now()\n    return now.strftime(\"%Y-%m-%d %H:%M:%S\")", "category": "Python"}, {"instruction": "Model a NoSQL database using CosmosDB", "input": "The database should store user posts, which consists of the post ID, content text, user ID and date of creation.", "output": "Azure Cosmos DB is a NoSQL database-as-a-service model that provides a schema-free data model and supports automatic indexing of all data. \nTo model a posts database with CosmosDB, create a database and a container. \nThen create item in the container, each item should contain the fields \"Post ID\", \"ContentText\", \"User ID\" and \"Date of Creation\". \nThese fields should be indexed to allow for efficient queries and retrieval of the posts data.", "category": "Python"}, {"instruction": "A function needs to be created that will take a list of strings and return a list of the same strings without duplicates.", "input": "list_of_strings = [\"a\", \"b\", \"c\", \"a\", \"d\"]", "output": "def remove_duplicates(list_of_strings):\n    \"\"\"\n    This function will take a list of strings and return a list of the same strings without duplicates.\n    \"\"\"\n    unique_strings = list(set(list_of_strings))\n    return unique_strings\n\nlist_of_strings = [\"a\", \"b\", \"c\", \"a\", \"d\"]\nprint(remove_duplicates(list_of_strings))", "category": "Python"}, {"instruction": "Create a program to find the largest common factor in two numbers.", "input": "24 and 48", "output": "def hcf(x, y): \n  \n    if x > y: \n        smaller = y \n    else: \n        smaller = x \n    \n    for i in range(1, smaller+1): \n        if((x % i == 0) and (y % i == 0)): \n            hcf = i \n            \n    return hcf \n\nx = 24\ny = 48\n\nprint (\"The H.C.F. of 24 and 48 is\", hcf(x, y))", "category": "Python"}, {"instruction": "Create a program that prints out a list of all numbers from 0 to 10, except for five.", "input": "", "output": "for num in range(11):\n    if num != 5:\n        print(num)", "category": "Python"}, {"instruction": "You need to write a function to check if given input is a palindrome string.", "input": "string = \"level\"", "output": "def is_palindrome(string): \n    left = 0\n    right = len(string) - 1\n  \n    while right >= left: \n        if string[left] != string[right]: \n            return False\n        left += 1\n        right -= 1\n    return True", "category": "Python"}, {"instruction": "Write a Python script that randomly shuffles the elements of a given array.", "input": "list = [1, 2, 3, 4, 5]", "output": "import random\n\ndef shuffle(arr):\n    random.shuffle(arr)\n    return arr\n\nresult = shuffle([1, 2, 3, 4, 5])\nprint(result)", "category": "Python"}, {"instruction": "Describe how you would use a dictionary to reverse a string.", "input": "", "output": "A dictionary can be used to reverse a string by mapping each character to its reversed counterpart. Create a dictionary with all the characters from the string as keys and their reversed version as the values. To reverse a string, iterate through it and look up each character in the dictionary and add its value to a new string. Once all the characters have been reversed, the new string is the reversed version of the original.", "category": "Python"}, {"instruction": "Write a Python function to generate a list of Fibonacci numbers up to the given limit n.", "input": "", "output": "def generate_fibonacci(n):\n fibonacci_list = [0, 1]\n for i in range(2, n+1):\n fibonacci_list.append(fibonacci_list[i-2] + fibonacci_list[i-1])\n return fibonacci_list", "category": "Python"}, {"instruction": "Given a list of positive integers, write a program to find two elements whose sum equals a given target value.", "input": "[1, 2, 3, 4, 5], 4", "output": "def find_sum_target(nums, target):\n for i in range(len(nums) - 1):\n for j in range(i+1, len(nums)):\n if nums[i] + nums[j] == target:\n return [nums[i], nums[j]]\n return []", "category": "Python"}, {"instruction": "Write a Python function to remove punctuation from a given sentence.", "input": "The quick brown fox jumps over the lazy dog!", "output": "def remove_punctuation(sentence):\n punctuation_marks = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n new_sentence = \"\"\n for char in sentence:\n if char not in punctuation_marks:\n new_sentence += char\n return new_sentence", "category": "Python"}, {"instruction": "Create a GUI that displays text and a button.", "input": "", "output": "import tkinter as tk \n\nroot = tk.Tk() \n\ntk.Label(root, text='Hello World!').pack() \ntk.Button(root, text=\"Click Me!\").pack() \n\nroot.mainloop()", "category": "Python"}, {"instruction": "Write a function which takes in a list containing integers, strings and floats and returns the sum of all numbers in the list.", "input": "list = [2, 'John', 8.2, 3.4, 11]", "output": "def sum_numbers(lst): \n    sum = 0\n    for item in lst: \n        if type(item) == int or type(item) == float: \n            sum += item \n    return sum", "category": "Python"}, {"instruction": "Write a function which takes a list and an additional argument, and returns the elements of the list which are greater than the argument.", "input": "list = [10, 20, 30, 40, 50, 60]\nargument = 25", "output": "def greater(list, argument):\n    output = [] \n    for int in list:\n        if int > argument:\n            output.append(int)\n    return output", "category": "Python"}, {"instruction": "Create a Python dictionary object", "input": "{'a':1, 'b':2, 'c':3}", "output": "mydict = {'a':1, 'b':2, 'c':3}", "category": "Python"}, {"instruction": "How can you use a function to determine whether a given array is in increasing or decreasing order or unordered?", "input": "", "output": "def check_order(arr):\n     order = 0\n     if arr[0] < arr[1]:\n         order = 1\n     elif arr[0] > arr[1]:\n         order = -1\n     \n     for i in range(1, len(arr)-1):\n        if arr[i] > arr[i+1] and order == 1:\n            return 0\n        elif arr[i] < arr[i+1] and order == -1:\n            return 0\n     return order", "category": "Python"}, {"instruction": "Create a sorting algorithm to order a given array.", "input": "[ 2 , 8 , 3 , 10 , 16 ]", "output": "def sort_array(arr):\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]  # swap\n    return arr", "category": "Python"}, {"instruction": "Design an algorithm in Python to retrieve all elements in a given array that occur only once.", "input": "", "output": "def singleOccurence(arr): \n    ans = []\n    for i in range(len(arr)): \n        count = 0\n        for j in range(len(arr)): \n            if arr[i] == arr[j]: \n                count+=1\n        if count == 1: \n            ans.append(arr[i]) \n    return ans", "category": "Python"}, {"instruction": "Create a function in Python to find all pairs of integers that sum up to k.", "input": "", "output": "def find_pair(arr,k):\n  pairs = []\n  found_elements = set()\n  for num in arr:\n    diff = k - num\n    if diff in found_elements:\n      pairs.append([min(num,diff), max(num,diff)])\n    found_elements.add(num)\n  return pairs", "category": "Python"}, {"instruction": "Explain in plain English the difference between the set() and list() methods in Python.", "input": "", "output": "The main difference between sets and lists in Python is the way the elements are stored. Lists store the elements in an ordered sequence, whereas sets store the elements in an unordered set. Sets are faster in terms of performance because they do not have duplicate elements. This means that when checking if an element exists in a set, the process is faster than checking for elements in a list. Furthermore, sets also do not allow for indexing, as the elements are unordered.", "category": "Python"}, {"instruction": "Propose an algorithm in Python for sorting a given list of numbers in descending order.", "input": "", "output": "One possible solution would be to use a variation of the bubble sort algorithm, where the elements are being swapped from the last element to the first element.\n\ndef sort_numbers_descending(elements):\n  n = len(elements)\n  # Traverse through all elements\n  for i in range(n-1):\n    # Last i elements are already in place\n    for j in range(n-1-i):\n      # Swap if the element found is greater\n      # than the next element\n      if elements[j] < elements[j+1]:\n        temp = elements[j]\n        elements[j] = elements[j+1]\n        elements[j+1] = temp\n  return elements", "category": "Python"}, {"instruction": "Manipulate a 2D array in Python such that it consists of the maximum value of each column.", "input": "array = [[1, 2, 3], \n        [4, 5, 6], \n        [7, 8, 9]]", "output": "array = [[7, 8, 9], \n        [7, 8, 9], \n        [7, 8, 9]]\n\ndef max_columns(array): \n    for col in range(len(array[0])): \n        m = array[0][col] \n        for row in array:\n            if row[col] > m: \n                m = row[col]\n        for row in range(len(array)):\n            array[row][col] = m \n    return array", "category": "Python"}, {"instruction": "Implement a recursive function that finds the nth number in the Fibonacci sequence.", "input": "", "output": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(5)) # outputs 5", "category": "Python"}, {"instruction": "Given an array, find the 2 elements which have the largest sum.", "input": "arr = [2, 8, 3, 5, 10, 1]", "output": "def find_largest_sum(arr):\n  max_sum = 0\n  first_ele = arr[0]\n  sec_ele = arr[1]\n\n  for i in range(0, len(arr)):\n    for j in range(i+1, len(arr)):\n      curr_sum = arr[i] + arr[j]\n      if curr_sum > max_sum:\n        max_sum = curr_sum\n        first_ele = arr[i]\n        sec_ele = arr[j]\n  return [first_ele, sec_ele]\n\nprint(find_largest_sum(arr)) # outputs [10, 8]", "category": "Python"}, {"instruction": "Write code using the NumPy random library to simulate the rolling of two fair six-sided dice.", "input": "", "output": "import numpy as np\nnp.random.seed(0)\n\n# simulate the rolling of two fair six-sided dice\noutcomes = np.random.randint(1,7, size=(2,2))\nprint(outcomes)", "category": "Python"}, {"instruction": "Write a function to generate anagrams for a given string", "input": "str = \"cat\"", "output": "import itertools\n\ndef anagrams(str):\n    return [\"\".join(permutation) for permutation in itertools.permutations(str)]\n\nprint(anagrams(str)) # Output: ['cat', 'cta', 'act', 'atc', 'tca', 'tac']", "category": "Python"}, {"instruction": "Design a function to create a secure password", "input": "", "output": "import random\nimport string\n\ndef secure_password(strong=False):\n    length = random.randint(8, 16)\n    letters = string.ascii_lowercase+string.ascii_uppercase+string.digits\n    if strong:\n        symbols = string.punctuation\n        letters += symbols\n    return ''.join(random.choice(letters) for i in range(length))", "category": "Python"}, {"instruction": "Write a function to compare two strings and return the number of different characters in each string.", "input": "", "output": "def compare_strings(s1, s2):\n    s1_chars = list(s1)\n    s2_chars = list(s2)\n    num_diff_chars = 0\n    for char in s1_chars:\n        if char not in s2_chars:\n            num_diff_chars += 1\n    for char in s2_chars:\n        if char not in s1_chars:\n            num_diff_chars += 1\n    return num_diff_chars", "category": "Python"}, {"instruction": "Write a Python function that takes a list of integers and returns True if any of the integers is divisible by 7.", "input": "", "output": "def is_divisible_by_seven(ints):\n    return any(num % 7 == 0 for num in ints)", "category": "Python"}, {"instruction": "Modify the function such that it takes two arrays, one containing numbers and the other containing symbols as arguments and returns a string where each number is replaced with its associated symbol.", "input": "nums = [1,2,3,4,5]\nsymbols = [\"A\",\"B\",\"C\",\"D\",\"E\"]", "output": "def join_nums_symbols(nums, symbols):\n    assert len(nums) == len(symbols), \"length of nums and symbols should be equal\"\n\n    result = \"\"\n    for i in range(len(nums)):\n        result += str(nums[i]) + symbols[i]\n    return result", "category": "Python"}, {"instruction": "Generate a program to calculate the combination of n elements taken k at a time.", "input": "n = 8\nk = 3", "output": "def combinations(n, k):\n    if k == 0 or k > n:\n        return []\n    result = []\n    def dfs(start,n,k):\n        if k == 0:\n            result.append(temp[:])\n            return \n        for i in range(start, n):\n            temp.append(i)\n            dfs(i+1, n, k-1)\n            temp.pop()\n            \n    temp = []\n    dfs(0, n, k)\n    return result", "category": "Python"}, {"instruction": "When given a list of strings, identify which strings are palindromes", "input": "list = ['abc', 'abb', 'cba']", "output": "result = []\nfor s in list:\n    if s == s[::-1]:\n        result.append(s)\n\nprint(result) #['abb']", "category": "Python"}, {"instruction": "Write a code that returns a 2-dimensional array of size n by m containing all 0s", "input": "n = 3 and m = 5", "output": "def create2DArray(n, m):\n    array = [[0 for x in range(m)] for y in range(n)]\n    return array\n\nprint(create2DArray(3, 5)) \n# prints [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]", "category": "Python"}, {"instruction": "Write a function that returns the larger number from two numbers provided.", "input": "4, 5", "output": "def largest(a, b):\n    \"\"\"Returns the larger number from two numbers provided.\"\"\"\n    if a > b:\n        return a\n    else:\n        return b\n\nnum1 = 4\nnum2 = 5\nprint(largest(num1, num2))", "category": "Python"}, {"instruction": "Convert this Python data structure into a valid JSON string.", "input": "data = {\n    \"key1\" : [1,2,3],\n    \"key2\" : {\n        'subkey1' : True,\n        'subkey2' : 'Hello World'\n    }\n}", "output": "json_string = json.dumps(data)", "category": "Python"}, {"instruction": "Build a state machine in Python to process incoming keyboard events", "input": "", "output": "# Define a StateMachine class\nclass StateMachine: \n    def __init__(self): \n        self.handlers = {} \n        self.startState = None\n        self.endStates = [] \n  \n    def add_state(self, state): \n        self.handlers[state.name] = state\n  \n    def set_start(self, name): \n        self.startState = name\n  \n    def set_end(self, name): \n        self.endStates.append(name) \n  \n    def run(self): \n        try: \n            handler = self.handlers[self.startState] \n        except: \n            raise(Exception, \"Must call .set_start() before .run()\")\n        while True:\n            # Get the next keyboard event\n            event = get_event()\n            if event:\n                newState = handler.run(event) \n            if newState.name in self.endStates: \n                break \n            else: \n                handler = self.handlers[newState.name]", "category": "Python"}, {"instruction": "Implement a web scraper in Python to fetch all the URLs from a given website.", "input": "The website URL is https://www.example.com", "output": "import re\nimport requests\n\nurls = set()\n \ndef get_urls(url):\n    website = requests.get(url)\n    content = website.text\n    links = re.findall(r'<a .*?href=[\\'\"](.*?)[\\'\"].*?>', content)\n \n    for i in links:\n        if i.startswith(\"/\"):\n            base_url = url\n            i = base_url + i\n            if i in urls:\n                continue\n            urls.add(i)\n            get_urls(i)\n        elif url in i:\n            if i in urls:\n                continue\n            urls.add(i)\n            get_urls(i)\n \nif __name__ == \"__main__\":\n    get_urls(\"https://www.example.com\")\n    for i in urls:\n        print(i)", "category": "Python"}, {"instruction": "Create some sample data to test a supervised learning algorithm.", "input": "", "output": "import numpy as np\nX = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ny = np.array([1, 0, -1])", "category": "Python"}, {"instruction": "Write an iterator in Python to iterate through the given list and output each element", "input": "myList = ['Hi', 'Bye', 'Hello', 'World']", "output": "def iterateMyList(myList):\n    iterator = iter(myList)\n    while True:\n        try: \n            print(next(iterator))\n        except StopIteration: \n            break", "category": "Python"}, {"instruction": "Create a TensorFlow tensor with the following data", "input": "[[1, 2],\n[3, 4],\n[5, 6]]", "output": "tf.constant([[1., 2.], [3., 4.], [5., 6.]])", "category": "Python"}, {"instruction": "Develop a program in Python that takes two array elements as input and finds their product", "input": "Array1: [1, 5, 8, 9]\nArray2: [2, 3, 4, 6]", "output": "import numpy as np\n\narr1 = np.array([1,5,8,9])\narr2 = np.array([2,3,4,6])\n\nresult = arr1 * arr2\n\nprint(f'Product of the two arrays: {result}')", "category": "Python"}, {"instruction": "Suggest a use case for reinforcement learning in business.", "input": "", "output": "Reinforcement learning can be used in business to automate processes, optimize products and services, improve marketing campaigns, and develop better customer experiences. For example, a reinforcement learning model can learn the best way to stock products in a store and optimize product placement to maximize sales. Additionally, reinforcement learning can also be used to automate customer service tasks, adjust product prices in real-time based on customer demand, and optimize marketing campaigns with personalized content.", "category": "Python"}, {"instruction": "Create a class in Python which models a bank account using the concept of class and object.", "input": "", "output": "class BankAccount: \n def __init__(self, name, balance): \n  self.name = name \n  self.balance = balance \n def deposit(self, amount): \n  self.balance += amount \n def withdraw(self, amount): \n  self.balance -= amount", "category": "Python"}, {"instruction": "How would you reverse the order of the elements in a given singly linked list in-place?", "input": "", "output": "def reverse_inplace(head): \n    if head is None or head.next is None: \n        return head  \n        \n    prev_node = None\n    next_node = None\n    curr_node = head  \n    \n    while curr_node is not None: \n        next_node = curr_node.next\n        curr_node.next = prev_node\n        prev_node = curr_node\n        curr_node = next_node\n        \n    return prev_node", "category": "Python"}, {"instruction": "Take the following string and read it into a list in Python.", "input": "\"apple, banana, peach, orange\"", "output": "list = [x.strip() for x in \"apple, banana, peach, orange\".split(\",\")]", "category": "Python"}, {"instruction": "Write a code to calculate the sum of the cubes of the numbers in the list.", "input": "[1,2,3,4,5]", "output": "\"\"\"\nFunction to calculate the sum of the cubes of the numbers in the list\n\"\"\"\ndef list_cube_sum(list):\n    \"\"\"\n    Calculate the sum of the cubes of the numbers in the list\n    \"\"\"\n    total = 0\n    for i in list:\n        total += i**3\n    return total\n\nif __name__ == '__main__':\n    print(list_cube_sum([1, 2, 3, 4, 5])) # prints 225", "category": "Python"}, {"instruction": "Write a code to format a number with two decimal places.", "input": "23.14159", "output": "\"\"\"\nFunction to format a number with two decimal places\n\"\"\"\n\ndef two_decimals(num):\n    \"\"\"\n    Format a number with two decimal places\n    \"\"\"\n    return \"{:.2f}\".format(num)\n\nif __name__ == '__main__':\n    print(two_decimals(23.14159)) # prints 23.14", "category": "Python"}, {"instruction": "Create a Python dictionary with three elements and print the key-value pairs.", "input": "", "output": "my_dict = {\n    'name': 'John',\n    'age': 30,\n    'city': 'New York'\n}\n\nfor key, value in my_dict.items():\n    print(f'{key}: {value}')", "category": "Python"}, {"instruction": "Create a Python class with an instance method that prints the number of objects created.", "input": "", "output": "class Person:\n     num_objects = 0\n\n     def __init__(self):\n          Person.num_objects += 1\n    \n     def print_num_objects(self):\n          print(Person.num_objects)", "category": "Python"}, {"instruction": "How would you implement Skip-Gram model in TensorFlow?", "input": "", "output": "To implement a Skip-Gram model in TensorFlow, you would need to define the model architecture. You would then need to define the training data, which can be done using tf.data packages. Finally, you would need to use an optimization algorithm such as the AdamOptimizer to train the model.", "category": "Python"}, {"instruction": "Write Python code to print the last three elements from a given list.", "input": "[2, 4, 6, 8, 10, 12]", "output": "my_list = [2, 4, 6, 8, 10, 12]\nprint(my_list[-3:]) # Output: [10, 12]", "category": "Python"}, {"instruction": "Write a function to compare two lists and print out whether they are equal or not.", "input": "list1 = [1, 2, 3]\nlist2 = [2, 3, 4]", "output": "def compare_lists(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i] != list2[i]:\n                return False\n        return True\n\nlist1 = [1, 2, 3]\nlist2 = [2, 3, 4]    \nprint(compare_lists(list1, list2)) # Output: False", "category": "Python"}, {"instruction": "Generate a function that takes an array of integers and rearranges the elements in a cyclical fashion, such that the element at index 0 comes last, the element at index 1 goes to the front, the element at index 2 is inserted after the element at the last index and so on.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def rearrange_array(arr):\n    output = []\n    for i in range(len(arr)):\n        idx = (i + 1) % len(arr)\n        output.append(arr[idx])\n    return output", "category": "Python"}, {"instruction": "Write a function that will format a given string in proper title case.", "input": "title = 'the quick brown fox'", "output": "def format_title(title):\n    \"\"\"\n    This function will format a given string in proper title case.\n    \"\"\"\n    formatted_title = ' '.join([word[0].upper() + word[1:] for word in title.split()])\n    return formatted_title\n\ntitle = 'the quick brown fox'\n\nprint(format_title(title))", "category": "Python"}, {"instruction": "Create a Python function and call it split_string that takes a string and a delimiter as arguments and returns a list containing the string split by the delimiter.", "input": "my_string = \"hello, world\"\ndelimiter = ','", "output": "def split_string(string, delimiter):\n    strList = string.split(delimiter)\n    return strList", "category": "Python"}, {"instruction": "How to retrieve the data of the first element in a JSON array?", "input": "", "output": "The data of the first element in a JSON array can be retrieved using the index \"0\". For example, if the JSON array is [\"apple\", \"banana\", \"cherry\"], then the data of the first element can be retrieved by \"array[0]\". It would return the data \"apple\".", "category": "Python"}, {"instruction": "Add a method to the following class which prints the student's name in upper case.", "input": "class Student:\n  def __init__(self, name):\n    self.name = name", "output": "class Student:\n  def __init__(self, name):\n    self.name = name\n  \n  def print_name_upper(self):\n    print(self.name.upper())", "category": "Python"}, {"instruction": "Write a function in Python to remove all 'null' values from a nested dictionary.", "input": "", "output": "def remove_nulls(dictionary):\n    if isinstance(dictionary, dict):\n        return {key: remove_nulls(value) \n        for key, value in dictionary.items() if not value == None}\n    else:\n        return dictionary", "category": "Python"}, {"instruction": "Given the following code, write a function to validate the input dates are in increasing order.", "input": "# Validate if the inputs are valid dates\ndef validate_dates(date_list):\n    pass", "output": "# Validate if the inputs are valid dates\ndef validate_dates(date_list):\n    if len(date_list) == 0:\n        return True\n    prev_date = date_list[0]\n    for date in date_list[1:]:\n        if date < prev_date:\n            return False\n        prev_date = date\n    return True", "category": "Python"}, {"instruction": "Write a Scala function to generate a range of numbers.", "input": "", "output": "def generateRange(start:Int, end:Int): List[Int] = {     \n   if (start > end) List(end)\n   else start :: generateRange(start+1, end)\n}", "category": "Python"}, {"instruction": "Create a KMP algorithm in Python to find a pattern in a given text.", "input": "Text: abcabdababd\nPattern:abd", "output": "def KMPSearch(pat, txt): \n    M = len(pat) \n    N = len(txt) \n  \n    # create lps[] that will hold the longest prefix suffix  \n    # values for pattern \n    lps = [0]*M \n    j = 0 # index for pat[] \n  \n    # Preprocess the pattern (calculate lps[] array) \n    computeLPSArray(pat, M, lps) \n  \n    i = 0 # index for txt[] \n    while i < N: \n        if pat[j] == txt[i]: \n            i += 1\n            j += 1\n  \n        if j == M: \n            print(\"Found pattern at index \" + str(i-j)) \n            j = lps[j-1] \n  \n        # mismatch after j matches \n        elif i < N and pat[j] != txt[i]: \n            # Do not match lps[0..lps[j-1]] characters, \n            # they will match anyway \n            if j != 0: \n                j = lps[j-1] \n            else: \n                i += 1\n        \ndef computeLPSArray(pat, M, lps): \n    len = 0 # length of the previous longest prefix suffix \n  \n    lps[0] # lps[0] is always 0 \n    i = 1\n  \n    # the loop calculates lps[i] for i = 1 to M-1 \n    while i < M: \n        if pat[i]== pat[len]: \n            len += 1\n            lps[i] = len\n            i += 1\n        else: \n            # This is tricky. Consider the example. \n            # AAACAAAA and i = 7. The idea is similar  \n            # to search step. \n            if len != 0: \n                len = lps[len-1] \n  \n                # Also, note that we do not increment i here \n            else: \n                lps[i] = 0\n                i += 1", "category": "Python"}, {"instruction": "Write a code to generate all possible binary strings of length 5.", "input": "", "output": "def gen_binary_strings(n):\n    result = []\n    for i in range(2**n):\n        s = bin(i)[2:]\n        s = s.zfill(n)\n        result.append(s)\n    return result\n\nprint(gen_binary_strings(5))\n# Output: ['00000', '00001', '00010', '00011', '00100', '00101', '00110', '00111', '01000', '01001', '01010', '01011', '01100', '01101', '01110', '01111', '10000', '10001', '10010', '10011', '10100', '10101', '10110', '10111', '11000', '11001', '11010', '11011', '11100', '11101', '11110', '11111']", "category": "Python"}, {"instruction": "Suggest a way to scale the following function for n values.", "input": "def scale(x):\n    return x * 2", "output": "def scale(arr, n):\n    return [x * 2  for x in arr[:n]]", "category": "Python"}, {"instruction": "Create a code to get the difference between two timestamps in seconds.", "input": "timestamp1 = \"2020-07-02 14:13:37\"\ntimestamp2 = \"2020-07-03 13:21:46\"", "output": "import datetime\n\ndef get_difference_in_seconds(timestamp1, timestamp2):\n    datetime1 = datetime.datetime.strptime(timestamp1, \"%Y-%m-%d %H:%M:%S\")\n    datetime2 = datetime.datetime.strptime(timestamp2, \"%Y-%m-%d %H:%M:%S\")\n    difference = (datetime2 - datetime1).total_seconds()\n    return difference", "category": "Python"}, {"instruction": "Write a code to filter out the names longer than 5 characters from the following list.", "input": "data = [\"James\", \"John\", \"Susan\", \"Bella\", \"Natalie\", \"Adam\", \"Sam\", \"Eric\"]", "output": "data = [\"James\", \"John\", \"Susan\", \"Bella\", \"Natalie\", \"Adam\", \"Sam\", \"Eric\"]\n\nfiltered_data = [name for name in data if len(name) > 5]\n\nprint(filtered_data) \n# Output: [\"James\", \"John\", \"Bella\", \"Natalie\", \"Sam\"]", "category": "Python"}, {"instruction": "Write a Python function to generate a random password with length 8 containing any combination of upper and lowercase letters, numbers, and symbols.", "input": "", "output": "import string \nimport random \n\ndef generate_password(): \n\tletter_lower = string.ascii_lowercase\n\tletter_upper = string.ascii_uppercase\n\tsymbols = string.punctuation\n\tdigits = string.digits\n\tpassword = ''.join(random.choice(letter_lower + letter_upper + symbols + digits) for i in range(8))\n\treturn password\n\npassword = generate_password()\nprint(password)", "category": "Python"}, {"instruction": "Implement a queue following the classic FIFO (First-in-first-out) principle using Python.", "input": "", "output": "class Queue:\n    def __init__(self):\n        self.queue = []\n\n    def enqueue(self, val):\n        self.queue.append(val)\n\n    def dequeue(self):\n        if self.queue:\n            return self.queue.pop(0)\n        else:\n            return None\n\n    def peek(self):\n        if self.queue:\n            return self.queue[0]\n        else:\n            return None", "category": "Python"}, {"instruction": "Write a function to find the path from a source point to a destination point in a given 2D array.", "input": "Array: [[0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [1, 0, 0, 1, 0], [0, 0, 0, 1, 0]]\nSource Point: [0, 0]\nDestination Point: [3, 4]", "output": "def find_path(array, source, dest):\n    path = [source]\n    sx, sy = source\n    while path[-1] != dest:\n        dx, dy = path[-1]\n        if dx > 0 and array[dx - 1][dy] == 0:\n            path.append([dx-1, dy])\n        elif dy > 0 and array[dx][dy-1] == 0:\n            path.append([dx, dy-1])\n        elif dx < len(array)-1 and array[dx + 1][dy] == 0:\n            path.append([dx+1, dy])\n        elif dy < len(array[0])-1 and array[dx][dy+1] == 0:\n            path.append([dx, dy+1])\n    return path", "category": "Python"}, {"instruction": "Calculate the sum of the cube of integers from 1 to n.", "input": "", "output": "def cube_sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum", "category": "Python"}, {"instruction": "Train a Naive Bayes model in Python to classify emails into spam and non-spam classes.", "input": "", "output": "# import libraries \nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# read in the data \ndata = pd.read_csv('email_data.csv')\n\n# split into training and test data\nX_train, X_test, y_train, y_test = train_test_split(data['text'], data['label'], test_size=0.33, random_state=42)\n\n# create vectorizer and transform training data\ncount_vector = CountVectorizer()\ncount_train = count_vector.fit_transform(X_train)\n\n# create and train a Naive Bayes model\nNB_classifier = MultinomialNB()\nNB_classifier.fit(count_train,y_train)\n\n# transform test data\ncount_test = count_vector.transform(X_test)\n\n# predict test labels\npreds = NB_classifier.predict(count_test)", "category": "Python"}, {"instruction": "You need to debug this code and ensure that it runs properly.", "input": "def cost_calc(product, quantity): \n    total_cost = 0\n    for i, q in zip(products, quantity):\n        cost = i.cost * q \n        total_cost = total_cost + cost \n        return total_cost:", "output": "def cost_calc(products, quantity): \n    total_cost = 0\n    for i, q in zip(products, quantity):\n        cost = i.cost * q \n        total_cost += cost \n    return total_cost", "category": "Python"}, {"instruction": "Write a function in Python to check if two lists have the same elements regardless of their order.", "input": "list1 = [\"cat\", \"dog\", \"mouse\"]\nlist2 = [\"mouse\", \"dog\", \"cat\"]", "output": "def is_similar(list_1, list_2):\n  if len(list_1) != len(list_2):\n    return False\n  list_1.sort()\n  list_2.sort()\n  for i, j in zip(list_1, list_2):\n    if i != j:\n      return False\n  return True", "category": "Python"}, {"instruction": "Determine if a given word is a valid word of English language.", "input": "Word: lycanthropy", "output": "Yes, lycanthropy is a valid word of English language.", "category": "Python"}, {"instruction": "Develop an algorithm to reverse an integer.", "input": "123", "output": "def reverse(num): \n    reversed_num = 0\n    while num>0:\n        last = num%10\n        reversed_num = (reversed_num*10)+last\n        num = num//10\n    return reversed_num\n\nnum = 123\nprint(\"Reverse of\", num, \"is\", reverse(num)) \n# Output: Reverse of 123 is 321", "category": "Python"}, {"instruction": "Augment an integer list with zeros after every 4 elements.", "input": "List = [1,2,3,4,5,6,7,8]", "output": "def list_augment(int_list):\n    \"\"\"\n    This function takes in a list of integers and \n    augments it with zeros after every 4 elements.\n    \"\"\"\n    augmented_list = []\n    for i in range(0, len(int_list), 4):\n        augmented_list.append(int_list[i:i + 4])\n        augmented_list.append(0)\n    augmented_list.pop()\n    return [item for sublist in augmented_list for item in sublist]\n    \nint_list = [1,2,3,4,5,6,7,8]\nprint(list_augment(int_list))\n\n# Output: [1, 2, 3, 4, 0, 5, 6, 7, 8, 0]", "category": "Python"}, {"instruction": "Write a code to calculate the age in years and months given the date of birth.", "input": "Date of Birth: 4 June 1998", "output": "def age_calc(date_of_birth):\n    \"\"\"\n    This function takes in a date of birth and calculates \n    the age in years and months.\n    \"\"\"\n    today = datetime.date.today()\n    age_years = today.year - date_of_birth.year\n    age_months = today.month - date_of_birth.month\n    if age_months < 0:\n        age_years -= 1\n        age_months += 12\n    return age_years, age_months\n\ndate_of_birth = datetime.date(1998, 6, 4)\nprint(age_calc(date_of_birth))\n\n# Output: (21, 10)", "category": "Python"}, {"instruction": "You are given two strings. Write a function that checks whether the two strings are an anagram or not.", "input": "\"listen\", \"silent\"", "output": "def is_anagram(str1, str2):\n  str1 = str1.lower()\n  str2 = str2.lower()\n  if sorted(str1) == sorted(str2):\n    return True\n  else:\n    return False\n\nprint(is_anagram('listen', 'silent'))", "category": "Python"}, {"instruction": "You are given an array of integers. Write a program to find the maximum number in this array.", "input": "[10, 5, 11, 23, 9]", "output": "def max_int(arr):\n  max_val = arr[0]\n  for i in range(1, len(arr)):\n    if arr[i] > max_val:\n      max_val = arr[i]\n  return max_val\n\nprint(max_int([10, 5, 11, 23, 9]))", "category": "Python"}, {"instruction": "When should the `break` keyword be used in a loop?", "input": "", "output": "The break keyword should be used in a loop when the loop needs to be terminated before it has finished executing its normal iterations. The break statement will cause the loop to exit immediately, bypassing any remaining code in the loop.", "category": "Python"}, {"instruction": "What is the purpose of a try-catch block in Python?", "input": "", "output": "The try-catch block is used in Python to handle exceptions. It is a construct used to catch and handle any unexpected errors that may occur in a program, allowing the program to continue running instead of crashing. The statements under the try block are the ones that may raise the exception, and the except block contains code that will be executed if an error does occur. The finally block is generally used to perform clean-up operations, regardless of whether an error occurs or not.", "category": "Python"}, {"instruction": "Identify the bug in the given code snippet.", "input": "function double_sum(nums) {\n for (let i = 0; i <= nums.length; i++) {\n  sum += nums[i] * 2;\n }\n}", "output": "The bug in the code is that it is looping one time too many. The correct version should use a less than or equal operator ('<=') instead of a less than operator ('<') in the for loop.", "category": "Python"}, {"instruction": "Construct a program to parse a JSON array.", "input": "[{\"name\":\"John\", \"age\":30},{\"name\":\"Alice\", \"age\":25}]", "output": "import json\n\ndata = [{\"name\":\"John\", \"age\":30},{\"name\":\"Alice\", \"age\":25}]\n\nfor entry in data:\n    name = entry['name']\n    age = entry['age']\n    print(f'The name is {name} and age is {age}')", "category": "Python"}, {"instruction": "Create a function that outputs the minimum and maximum ofa list of numbers.", "input": "list = [1, 3, 7, -2, 4]", "output": "def minmax(list)\n    min = list[0]\n    max = list[0]\n    for num in list[1:]:\n        if num < min:\n            min = num\n        if num > max:\n            max = num\n\n    return min, max", "category": "Python"}, {"instruction": "Write a Python function to compute the factorial of an integer.", "input": "", "output": "def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)", "category": "Python"}, {"instruction": "Write a function that takes a string as an argument, reverses the characters, and returns the reversed string.", "input": "", "output": "def reverse_string(string):\n    reversed_string = \"\"\n    for i in range(len(string)-1, -1, -1):\n        reversed_string += string[i]\n    return reversed_string", "category": "Python"}, {"instruction": "How can you count the frequency of each word in a given string?", "input": "This is a string", "output": "str = \"This is a string\" \nwords = str.split()\ncount = {} \n  \nfor word in words: \n    if word in count: \n        count[word] += 1\n    else: \n        count[word] = 1\n        \nprint(count)\n\n# Output: {'This': 1, 'is': 1, 'a': 1, 'string': 1}", "category": "Python"}, {"instruction": "Create a basic REST API in python that takes a string as input and returns the reversed string", "input": "", "output": "from fastapi import FastAPI\n@app.get(\"/reverse-string/{string}\")\n\ndef reverse_string(string: str):\n    return string[::-1]", "category": "Python"}, {"instruction": "Build a model using scikit-learn that classifies the given text data into \u2018Positive\u2019 or \u2018Negative\u2019.", "input": "The customer service was great, and I will definitely recommend this product to others.", "output": "from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LogisticRegression\n\n# Create arrays for the features and the label\nX = ['The customer service was great, and I will definitely recommend this product to others.'] \ny = ['Positive']\n\n# Create a CountVectorizer for parsing/counting words\ncv = CountVectorizer()\n \n# Parse the data with the vectorizer\nX = cv.fit_transform(X)\n \n# Create train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n \n# Create the model, train it, then test it\nmodel = LogisticRegression() \nmodel.fit(X_train, y_train) \nmodel.score(X_test, y_test)", "category": "Python"}, {"instruction": "How would you write a program to find the number of prime numbers between 0 and 100?", "input": "", "output": "def count_prime_num(x, y): \n  \n    prime_count = 0\n  \n    for num in range(x, y + 1): \n       \n       if num > 1: \n           for i in range(2, num): \n               if (num % i) == 0: \n                   break\n           else: \n               prime_count += 1\n  \n    return prime_count \n\nprint(count_prime_num(0, 100))", "category": "Python"}, {"instruction": "Write an algorithm to remove vowels from a string.", "input": "", "output": "def remove_vowels(string): \n      \n    # vowels list\n    vowels = ['a', 'e', 'i', 'o', 'u']  \n    stringWithoutVowels = \"\" \n      \n    for x in string: \n        if x not in vowels: \n            stringWithoutVowels += x \n              \n    return stringWithoutVowels", "category": "Python"}, {"instruction": "Build a Python program to transform a string in a dictionary.", "input": "String: \" John, 26, Movie Watch, Jane, 31, Book Reader, Charlotte, 25, Music Listener\"", "output": "people_dict = {\n    'John': {'age': 26, 'hobby': 'Movie Watch'},\n    'Jane': {'age': 31, 'hobby': 'Book Reader'}, \n    'Charlotte': {'age': 25, 'hobby': 'Music Listener'}\n}", "category": "Python"}, {"instruction": "Create a function to find the index of the first occurrence of a given number in a list", "input": "", "output": "def find_index(lst, num):\n  for index, val in enumerate(lst):\n    if val == num:\n      return index", "category": "Python"}, {"instruction": "How do you remove the last item from a list in Python?", "input": "", "output": "list.pop()", "category": "Python"}, {"instruction": "Write a function to check if a given binary tree is a valid binary search tree", "input": "", "output": "def isValidBST(root): \n      \n    # Check empty tree  \n    if root is None: \n        return True\n          \n    # Check left subtree recursively  \n    if not isValidBST(root.left): \n        return False\n  \n    # if left is not None then check it has \n    # correct data or not i.e. left node's data \n    # should be less than root's data \n    if (root.left is not None and\n        root.data < root.left.data): \n        return False\n      \n    # Check right subtree recursively  \n    if not isValidBST(root.right): \n        return False\n      \n    # if right is not None then check it has \n    # correct data or not i.e. right node's data \n    # should be greater than root's data \n    if (root.right is not None and\n        root.data > root.right.data): \n        return False\n      \n    # If all conditions satisfied  \n    # then return True  \n    return True", "category": "Python"}, {"instruction": "Write a loop in Python to print all the numbers from 0 to 10", "input": "", "output": "for i in range(0, 11):\n  print(i)", "category": "Python"}, {"instruction": "How to check if a given number is even or odd using Python?", "input": "", "output": "def is_even_or_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"", "category": "Python"}, {"instruction": "Write a function in Python for printing a given 2D array.", "input": "arr = [[1,2,3], [4,5,6], [7,8,9]]", "output": "def print_2D_array(arr):\n  for row in arr:\n    for element in row:\n      print(element,end=\" \")\n    print()\n\nprint_2D_array(arr)", "category": "Python"}, {"instruction": "Given a number, create a function that returns a list that contains its divisors.", "input": "num = 20", "output": "def get_divisors(num):\n    \"\"\"This function returns a list that contains the divisors of a given number\"\"\"\n    return [x for x in range(1, num + 1) if num % x == 0]", "category": "Python"}, {"instruction": "Create a function in Python for reversing a list.", "input": "my_list = [1,2,3,4,5]", "output": "def reverse_list (my_list):\n  return my_list[::-1]\n  \nreverse_list(my_list)", "category": "Python"}, {"instruction": "Generate an array of 20 random numbers between 0 and 10 (inclusive).", "input": "", "output": "import random \n  \narr = [] \nfor i in range(20): \n    arr.append(random.randint(0, 10))\n    \narr", "category": "Python"}, {"instruction": "Toast a Python function to swap the values of two given variables.", "input": "a = 10, b= 20", "output": "def swap(a, b): \n    a, b = b, a \n    return (a,b)", "category": "Python"}, {"instruction": "Softmax a list of numbers and then sum the output.", "input": "[1, 2, 3]", "output": "def softmax(arr): \n    a = np.exp(arr)\n    return a / np.sum(a) \ndef sum_softmax(arr): \n    return np.sum(softmax(arr))", "category": "Python"}, {"instruction": "Find all substrings from a given string.", "input": "", "output": "def find_substring(str):\n    substrings = []\n    for length in range(1, len(str)+1):\n        for start in range(len(str)- length + 1):\n            substrings.append(str[start:start+length])\n    return substrings", "category": "Python"}, {"instruction": "Pre-process the following dataset and convert it into a tabular format using Pandas.", "input": "data = [{\"name\": \"john\", \"age\": 20, \"location\": \"New York\"},\n        {\"name\": \"sarah\", \"age\": 30, \"location\": \"Los Angeles\"}]", "output": "import pandas as pd\n\ndf = pd.DataFrame(data)\n\n# Create tabular format \n df = df[[\"name\", \"age\", \"location\"]]", "category": "Python"}, {"instruction": "Convert the following nested for loop into a single line list comprehension.", "input": "a = [1, 2, 3, 4]\nb = [5, 6, 7, 8]\n\nresult = []\nfor i in a:\n    for j in b:\n        result.append((i, j))", "output": "result = [(i,j) for i in a for j in b]", "category": "Python"}, {"instruction": "Re-write the following function to use list comprehension.", "input": "def negative_list(numbers):\n    negative = []\n    for num in numbers:\n        if num < 0:\n            negative.append(num)\n    return negative", "output": "def negative_list(numbers):\n    return [num for num in numbers if num < 0]", "category": "Python"}, {"instruction": "Create an array of size n filled with the string \"hello\".", "input": "", "output": "def fillWithHello(n):\n    arr = [] \n    for i in range(0, n): \n        arr.append(\"hello\") \n    return arr", "category": "Python"}, {"instruction": "Write code for displaying the Fibinacci sequence up to the nth term.", "input": "", "output": "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Explain the term \"backtracking\".", "input": "", "output": "Backtracking is a general algorithm for finding all (or some) solutions to some computational problems, that incrementally builds candidates to the solutions and abandons each partial candidate c (\"backtracks\") as soon as it determines that c cannot possibly be completed to a valid solution.", "category": "Python"}, {"instruction": "Given a positive integer, find the sum of its digits.", "input": "", "output": "def findSum(num): \n    res = 0\n    num = str(num)\n    for i in range(0, len(num)): \n        res = res + int(num[i]) \n    \n    return res", "category": "Python"}, {"instruction": "Create a function in Python that returns all permutations of a string.", "input": "", "output": "def get_all_permutations(string):\n \n  if len(string) == 1:\n    return [string]\n \n  permutations = []\n  for index, char in enumerate(string):\n    slice_string  = string[:index] + string[index+1:]\n    for permutation in get_all_permutations(slice_string):\n      permutations.append(char + permutation)\n\n  return permutations", "category": "Python"}, {"instruction": "Create a function to generate a random integer between two given numbers.", "input": "", "output": "import random\ndef rand_int(low, high):\n\treturn random.randint(low,high)", "category": "Python"}, {"instruction": "Using the existing code as a guide, construct a function to validate user input.", "input": "username=input(\"Enter your username: \")\npassword=input(\"Enter your password: \")", "output": "def validate_input(username, password):\n\tif len(username) < 5 or len(username) > 80:\n\t\treturn False\n\tif len(password) < 8 or len(password) > 16:\n\t\treturn False\n\treturn True", "category": "Python"}, {"instruction": "Create a list containing a given number of random numbers.", "input": "", "output": "import random\n\ndef random_list(length):\n\trand_list = []\n\tfor i in range(length):\n\t\trand_list.append(random.randint(0,100))\n\treturn rand_list", "category": "Python"}, {"instruction": "Write a sorting algorithm that sorts an array using a bubble sort.", "input": "nums=[3,4,1,2,9,6]", "output": "def bubble_sort(nums):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums", "category": "Python"}, {"instruction": "Write a function in Python that takes two parameters and returns a list containing those two numbers", "input": "", "output": "def make_list(a, b):\n  return [a, b]", "category": "Python"}, {"instruction": "Given a Python list, write the code to flatten it", "input": "l1=[1,2,3,[4,[5,6]]]", "output": "def flatten(nums):\n    flattened_list = []\n    for elem in nums:\n        if type(elem) == list:\n            flattened_list.extend(flatten(elem))\n        else:\n            flattened_list.append(elem)\n    return flattened_list\n\nflatten(l1)", "category": "Python"}, {"instruction": "Train a sentiment classification model on the given data.", "input": "Training Data:\n\nI love this new phone!  Positive\nThis phone is terrible!  Negative", "output": "import nltk \nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\n\n# Preprocess data\ntraining_data = [('I love this new phone!', 'positive'), ('This phone is terrible!', 'negative')]\nall_words = []\ndocuments = []\nfor (sent, category) in training_data:\n    words = word_tokenize(sent)\n    words = [word.lower() for word in words if word not in stopwords.words()]\n    documents.append((words, category))\n    all_words.extend(words)\n\n# Create feature set\ndistinct_words = set(all_words)\nfeature_set = [({word: (word in tokenized_sentence) for word in distinct_words}, category) for (tokenized_sentence, category) in documents]\n\n# Train model\nclassifier = nltk.NaiveBayesClassifier.train(feature_set)", "category": "Python"}, {"instruction": "Build a flask server to handle a GET request to the route '/test'.", "input": "", "output": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/test', methods=['GET'])\ndef test():\n    return \"This is a test\"\n\nif __name__ == '__main__':\n    app.run()", "category": "Python"}, {"instruction": "Generate a string of 5 random characters from the characters A through Z.", "input": "", "output": "import random\n\ndef random_string():\n    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    random_string = ''.join(random.choice(chars) for i in range(5))\n    return random_string\n\nprint(random_string())", "category": "Python"}, {"instruction": "Write an API endpoint to get the average annual temperature of a given city.", "input": "", "output": "@app.route(\"/get_average_annual_temp/<city>\", methods=['GET'])\ndef get_average_annual_temp(city):\n    # Get the average annual temperature of the given city\n    temp = get_average_annual_temperature(city)\n    # Return the average temperature in json format\n    return jsonify({'temp': temp})", "category": "Python"}, {"instruction": "Write a function in Python for calculating the area of a circle.", "input": "", "output": "def area_circle(r):\n  return 3.14 * r**2", "category": "Python"}, {"instruction": "Write a code snippet for generating a unique identifier for a particular object.", "input": "", "output": "import uuid\n\ndef generate_id(object): \n  return uuid.uuid4()", "category": "Python"}, {"instruction": "Develop an algorithm for sorting a given list in ascending order.", "input": "my_list = [5,1,4,2,8]", "output": "def sort_list(my_list): \n  for i in range(len(my_list)):\n    for j in range(i+1, len(my_list)):\n      if my_list[i] > my_list[j]: \n        my_list[i], my_list[j] = my_list[j], my_list[i]\n  return my_list\n\nsort_list(my_list)", "category": "Python"}, {"instruction": "Design a function to find the average of a given array.", "input": "array = [1, 2, 3]", "output": "def array_mean(array):\n    total = 0\n    for num in array:\n        total += num\n    mean = total / len(array)\n    return mean", "category": "Python"}, {"instruction": "Describe the details of the try-except statement in Python.", "input": "", "output": "The try-except statement in Python is used to handle exceptions in code. All the code that has a potential for raising an exception is placed in the \"try\" block and the code that is executed if an exception is raised is placed in the \"except\" block. The \"Except\" block is also used to catch a specific exception and handle it accordingly.", "category": "Python"}, {"instruction": "How can you get the length of a list in Python?", "input": "", "output": "You can use the built-in function len() to get the length of a list in Python.", "category": "Python"}, {"instruction": "Write a code to check whether the input string is a palindrome or not.", "input": "a man a plan a canal panama", "output": "\"\"\"\nWrite a code to check whether the input string is a palindrome or not\n\"\"\"\n\ndef check_palindrome(input_string):\n    rev_str = input_string[::-1]\n \n    # Checking if both string are equal or not\n    if rev_str == input_string:\n        return True\n    return False\n  \n# main function\nif __name__ == \"__main__\":\n    str = \"a man a plan a canal panama\"\n    if check_palindrome(str):\n        print(\"String is Palindrome\")\n    else:\n        print(\"String is not Palindrome\")", "category": "Python"}, {"instruction": "Create a class in Python to represent a Person.", "input": "", "output": "class Person:\n    # Constructor \n    def __init__(self, name, age): \n         \n        # instance attributes \n        self.name = name \n        self.age = age \n  \n    # instance method \n    def greeting(self): \n        print(\"My name is\", self.name) \n  \n# construct an object \nperson1 = Person(\"John\", 36) \n  \n# call a method of the object \nperson1.greeting()", "category": "Python"}, {"instruction": "Create a function in Python which takes two parameters and returns their product.", "input": "", "output": "def product(a, b):\n    return a*b", "category": "Python"}, {"instruction": "Write a Python program to loop through all the items in a given list.", "input": "List: [1, 2, 3, 4, 5, 6]", "output": "my_list = [1, 2, 3, 4, 5, 6]\nfor item in my_list:\n    print(item)", "category": "Python"}, {"instruction": "Design a function in Python to delete duplicates from a list.", "input": "The list is: [2, 3, 2, 4, 5, 5, 6]", "output": "def remove_duplicates(list): \n      \n    unique_list = [] \n      \n    for x in list: \n        if x not in unique_list: \n            unique_list.append(x) \n    return unique_list \n  \nlist = [2, 3, 2, 4, 5, 5, 6] \nprint (\"Original List: \", list) \nprint (\"Unique List: \", remove_duplicates(list)) \n\nOutput: \nOriginal List: [2, 3, 2, 4, 5, 5, 6]\nUnique List: [2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Create a function that takes in a list of numbers and returns true if the list contains at least one positive number", "input": "list_of_numbers = [-2, -5, 0, 3]", "output": "def is_positive_number(numbers):\n    for num in numbers:\n        if num > 0:\n            return True\n    return False", "category": "Python"}, {"instruction": "Create a function that takes in a string and replaces all punctuation with a space", "input": "", "output": "import string\n\ndef replace_punctuation(string):\n    for char in string:\n        if char in string.punctuation:\n            string = string.replace(char, \" \")\n    return string", "category": "Python"}, {"instruction": "Write a function that takes in a string and returns a list of all the words that have more than 5 characters", "input": "", "output": "def long_words(string):\n    words = string.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > 5:\n            long_words_list.append(word)\n    return long_words_list", "category": "Python"}, {"instruction": "Create a function that takes in a string and counts the number of vowels in it", "input": "", "output": "def count_vowels(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "In a given string, create a function that returns the longest consecutive sequence of characters.", "input": "my_string = \u201cabccdeefghj\"", "output": "def longest_consecutive(string):\n    character_list = []\n    max_length = 0\n    max_sequence = ''\n    for char in string:\n        if char in character_list:\n            continue\n        else:\n            character_list.append(char)\n            current_length = 1\n            for i in range(1, len(string)):\n                if string[i-1] == char and string[i] == char:\n                    current_length += 1\n            if current_length>max_length:\n                max_length = current_length\n                max_sequence = char*max_length\n    return max_sequence", "category": "Python"}, {"instruction": "Create a dictionary containing the key-value pair of a given string.", "input": "string = \"test string\"", "output": "\"\"\"\nCreate a dictionary containing the key-value pair of a given string\n\"\"\"\n\n# Given string\nstring = \"test string\"\n\n# Initialising an empty dictionary\nmy_dict = {}\n\n# Looping through the given string\nfor char in string:\n    # If the character is not already in dictionary\n    if char not in my_dict:\n        # Adding the character to the dictionary\n        my_dict[char] = 1\n    # If the character already exists in dictionary\n    else:\n        # Incrementing the frequency\n        my_dict[char] += 1\n        \n# Printing the dictionary\nprint(my_dict)", "category": "Python"}, {"instruction": "You are given a list of numbers. Create a function that returns a new list with duplicates removed", "input": "list_of_numbers = [3, 6, 5, 5, 7, 6, 3]", "output": "def remove_duplicates(numbers):\n    new_list = []\n    for num in numbers:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list", "category": "Python"}, {"instruction": "Create a for loop that goes through every element of list_of_words and prints \u2018success\u2019 if an element is equal to \u201cexample\u201d and prints \u2018failure\u2019 in any other case.", "input": "list_of_words = [\"hello\", \"example\", \"world\"]", "output": "for word in list_of_words:\n    if word == \"example\":\n        print(\"success\")\n    else:\n        print(\"failure\")", "category": "Python"}, {"instruction": "You are given a matrix of m rows and n columns. Write a function that calculates the transpose of the given matrix.", "input": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def transpose(matrix):\n    m = len(matrix)\n    n = len(matrix[0])\n\n    transpose_matrix = [[0] * m for _ in range(n)]\n    for i in range(m):\n        for j in range(n):\n            transpose_matrix[j][i] = matrix[i][j]\n\n    return transpose_matrix", "category": "Python"}, {"instruction": "Construct an if-else statement that returns \u2018even\u2019 if the given number is even and \u2018odd\u2019 if the given number is odd.", "input": "", "output": "if n % 2 == 0:\n    return 'even'\nelse:\n    return 'odd'", "category": "Python"}, {"instruction": "Write a Python program to generate the first n Fibonacci numbers.", "input": "", "output": "def generate_fibonacci_numbers(n):\n   if n==1:\n       return [0]\n   elif n==2:\n       return [0,1]\n   else:\n       fib_list = [0,1]\n       for i in range(2,n):\n           fib_list.append(fib_list[i-1]+fib_list[i-2])\n       return fib_list", "category": "Python"}, {"instruction": "Write a Python program to remove all instances of a given value from a given list.", "input": "[1, 2, 3, 2, 3, 4], 2", "output": "def remove_value(nums, val):\n    res = []\n    for num in nums:\n        if num != val:\n            res.append(num)\n    return res", "category": "Python"}, {"instruction": "Generate a dictionary of 10 key-value pairs, where the key is a string and the values are random numbers from 1 to 100.", "input": "", "output": "import random\n\nd = dict()\n\nkeys = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"]\n\nfor key in keys:\n    d[key] =  random.randint(1,100)\n\nprint(d)", "category": "Python"}, {"instruction": "Write a function to find the number of occurrences of an element in a list.", "input": "arr = [10, 20, 10, 40, 40, 40, 50]", "output": "def count_occurrences(arr, element):\n    count = 0\n    for e in arr:\n        if e == element:\n            count += 1\n    return count\n\nprint(count_occurrences(arr, 40)) # Outputs: 3", "category": "Python"}, {"instruction": "Create a program to generate a histogram using data from a set of numbers.", "input": "values = [3, 4, 2, 5, 8, 1, 2, 6]", "output": "import matplotlib.pyplot as plt\n\nvalues = [3, 4, 2, 5, 8, 1, 2, 6]\n\nplt.hist(values, bins= 10, edgecolor='black', color='b')\n\nplt.xlabel('Values')\nplt.ylabel('Frequency')\n\nplt.title('Histogram')\n\nplt.show()", "category": "Python"}, {"instruction": "Write a code to add two linked lists of different sizes.", "input": "list1 = [2->4->3]\nlist2 = [5->6->4->1]", "output": "# adding two linked lists\nclass Node: \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\n\ndef addTwoLists(first, second):\n    # defining current and prev variables\n    prev = None\n    carry = 0\n    temp = None\n\n    # looping until one list has all nodes added\n    while(first is not None or second is not None): \n        Node = Node() \t\t# Node data\n\n        Node.data = carry + (first.data if first else 0) + (second.data if second else 0) \n\t\t\n        # update carry\n        if Node.data >= 10: \n            Node.data = Node.data % 10\n            carry = 1\n        else: \n            carry = 0\n \n        temp = Node\n        # Move first, second pointers ahead\n        if first is not None: \n            first = first.next\n        if second is not None: \n            second = second.next\n\n        # Attach the previous node to the current node\n        if prev is not None: \n            prev.next = Node \n        prev = Node\n\t\t\n    if carry > 0: \n        temp.next = Node \n        temp.data = carry \n    return result", "category": "Python"}, {"instruction": "Write a code to access the nth element of a linked list.", "input": "", "output": "# defining the Node class\nclass Node: \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\n\ndef getNthElement(head, n): \n\tcurrent = head \n\tcount = 0\n\n\t# looping through the linked list\n\twhile(current is not None): \n\t\tif (count == n): \n\t\t\treturn current.data \n\t\tcount += 1\n\t\tcurrent = current.next\n\treturn -1", "category": "Python"}, {"instruction": "Create a function that takes in a list of temperatures and returns the average temperature", "input": "list_of_temperatures = [20, 24, 26, 18]", "output": "def average_temperature(temperatures):\n    num_items = len(temperatures)\n    sum_items = 0\n    for temperature in temperatures:\n        sum_items += temperature\n    return sum_items / num_items", "category": "Python"}, {"instruction": "Write a code to create a 3 x 3 matrix containing all 0s.", "input": "", "output": "\"\"\"\nWrite a code to create a 3 x 3 matrix containing all 0s\n\"\"\"\n\n# Creating an empty 3 x 3 matrix\nmatrix = [[0 for x in range(3)] for y in range(3)] \n  \n# Printing the matrix\nprint(matrix)", "category": "Python"}, {"instruction": "Write a code to check whether two strings are anagrams or not.", "input": "first = \"listen\"\nsecond = \"silent\"", "output": "\"\"\"\nWrite a code to check whether two strings are anagrams or not\n\"\"\"\n\n# Strings to be checked\nfirst = \"listen\"\nsecond = \"silent\"\n\n# Sorting the strings\nfirst_sorted = \"\".join(sorted(first))\nsecond_sorted = \"\".join(sorted(second))\n\n# Checking if both sorted strings are equal or not\nif first_sorted == second_sorted:\n    print(\"Strings are Anagrams\")\nelse:\n    print(\"Strings are not Anagrams\")", "category": "Python"}, {"instruction": "Write a code to delete all the vowels from a given string.", "input": "string = \"hello world\"", "output": "\"\"\"\nWrite a code to delete all the vowels from a given string\n\"\"\"\n\n# Given string\nstring = \"hello world\"\n\n# Removing all the vowels from the string\nno_vowels = \"\".join([letter for letter in string if letter not in \"aeiouAEIOU\"])\n\n# Printing the new string\nprint(\"String without vowels is\", no_vowels)", "category": "Python"}, {"instruction": "Given a list of strings, write a code to find the longest string.", "input": "lst = ['one', 'two', 'three', 'four', 'five']", "output": "# initial max length\nmax_length = 0\n# empty string to store the max length string\nmax_str = ''\n\n# iterate through the list\nfor string in lst:\n    # get the length\n    length = len(string)\n    # update the max length\n    if length > max_length:\n        # get the string\n        max_str = string\n        # update max length\n        max_length = len(string)\n\nprint(max_str)", "category": "Python"}, {"instruction": "Write a code to take two string inputs and generate the output string containing alternate characters from each string.", "input": "str1 = 'abc'\nstr2 = '123'", "output": "def alternate_char(str1, str2):\n    # get the length of string\n    n = len(str1)\n\n    # initialize the output string\n    output_str = ''\n\n    # generate the output string\n    for i in range(n):\n        output_str += str1[i] + str2[i]\n    \n    return output_str\n\nprint(alternate_char(str1, str2))", "category": "Python"}, {"instruction": "Write a function that takes a list of integers as inputs and returns the sum of the square of all the even numbers.", "input": "lst = [2, 8, 9, 5, 3, 10]", "output": "def sum_square_even(lst):\n    result = 0\n    for num in lst:\n        if (num % 2 == 0):\n            result += num ** 2\n    return result\n\nprint(sum_square_even(lst))", "category": "Python"}, {"instruction": "Write a function to compare two strings and return True if they are anagrams.", "input": "str1 = 'silent'\nstr2 = 'listen'", "output": "def anagram(str1, str2): \n\n    # Get lenghts of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If lengths are not same, then strings   \n    # are not anagrams \n    if n1 != n2:\n        return False\n    str1 = ''.join(sorted(str1))\n    str2 = ''.join(sorted(str2))\n    # Comparing sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n\n    return True\n\nprint(anagram(str1, str2))", "category": "Python"}, {"instruction": "Edit the following code so it outputs the odd numbers between 1 and 50.", "input": "for i in range(1,51):\n    print(i)", "output": "for i in range(1,51):\n    if i % 2 != 0:\n        print(i)", "category": "Python"}, {"instruction": "Write a Python program that tests if a given number is divisible by 3.", "input": "num = 51", "output": "if (num % 3 == 0):\n    print(\"The number is divisible by 3\")\nelse:\n    print(\"The number is not divisible by 3\")", "category": "Python"}, {"instruction": "Write a Python program to split special characters with a given string.", "input": "string = \"Hello@#World\"", "output": "string = \"Hello @# World\"", "category": "Python"}, {"instruction": "Create a program that extracts a given pattern from a given string", "input": "text = \"Hello world!\", pattern = \"l\"", "output": "\"\"\"\nCreate a program that extracts a given pattern from a given string\n\"\"\"\n\ndef extract_pattern(text, pattern):\n    result = []\n    for i in range(len(text)):\n        if text[i] == pattern:\n            result.append(i)\n    return result\n\nif __name__ == '__main__':\n    text = \"Hello world!\"\n    pattern = \"l\"\n    print(extract_pattern(text, pattern))", "category": "Python"}, {"instruction": "Create a program to generate all possible pairs of a given list of numbers", "input": "[1, 2, 3]", "output": "\"\"\"\nCreate a program to generate all possible pairs of a given list of numbers\n\"\"\"\n\ndef generate_pairs(nums):\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            pairs.append((nums[i], nums[j]))\n    return pairs\n\nif __name__ == '__main__':\n    print(generate_pairs([1, 2, 3]))", "category": "Python"}, {"instruction": "Create a program to check if a given string is a palindrome", "input": "\"racecar\"", "output": "\"\"\"\nCreate a program to check if a given string is a palindrome\n\"\"\"\n\ndef is_palindrome(string):\n    n = len(string)\n    for i in range(n // 2):\n        if string[i] != string[n-i-1]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    print(is_palindrome(\"racecar\"))", "category": "Python"}, {"instruction": "Create a program to find all the factors of a given number", "input": "24", "output": "\"\"\"\nCreate a program to find all the factors of a given number \n\"\"\"\n\ndef find_factors(num):\n    factors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            factors.append(i)\n    return factors\n\nif __name__ == '__main__':\n    print(find_factors(24))", "category": "Python"}, {"instruction": "Create a program to generate the sum of all the elements in a given list", "input": "[1, 2, 3, 4, 5]", "output": "\"\"\"\nCreate a program to generate the sum of all the elements in a given list\n\"\"\"\n\ndef sum_list(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total\n\nif __name__ == '__main__':\n    print(sum_list([1, 2, 3, 4, 5]))", "category": "Python"}, {"instruction": "Create a program to classify whether the given number is even or odd", "input": "5", "output": "\"\"\"\nCreate a program to classify whether the given number is even or odd\n\"\"\"\n\ndef even_or_odd(number: int) -> str:\n    if number % 2 == 0:\n        return 'even'\n    else:\n        return 'odd'\n\nif __name__ == '__main__':\n    print(even_or_odd(5))", "category": "Python"}, {"instruction": "Create a program to parse a given string and return a dictionary with all the words and their frequency", "input": "\"this is a practice string to learn the parsing of strings\"", "output": "\"\"\"\nCreate a program to parse a given string and return a dictionary with all the words and their frequency\n\"\"\"\n\ndef parse_string(string):\n    words = string.split()\n    word_dict = {}\n    for word in words:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    return word_dict\n\nif __name__ == '__main__':\n    print(parse_string(\"this is a practice string to learn the parsing of strings\"))", "category": "Python"}, {"instruction": "Create a program to compute the checksum of a given data packet", "input": "data_packet = [0xff, 0x0a, 0x1b, 0x3f]", "output": "\"\"\"\nCreate a program to compute the checksum of a given data packet\n\"\"\"\n\ndef compute_checksum(data_packet):\n    checksum = 0\n    for x in data_packet:\n        checksum += x\n    return checksum\n\nif __name__ == '__main__':\n    data_packet = [0xff, 0x0a, 0x1b, 0x3f]\n    print(compute_checksum(data_packet))", "category": "Python"}, {"instruction": "rewrite the following for-loop as a while-loop", "input": "for i in range(0, 5):\n    print(i)", "output": "\"\"\"\nRewrite the following for-loop as a while-loop\n\"\"\"\n\ni = 0\nwhile i < 5:\n    print(i)\n    i += 1", "category": "Python"}, {"instruction": "Create a program to create a list of all the numbers from 1 to 10 which are divisible by 3", "input": "", "output": "\"\"\"\nCreate a program to create a list of all the numbers from 1 to 10 which are divisible by 3\n\"\"\"\n\ndef divisible_by_three():\n    divisible_by_three_list = []\n    for i in range(1, 11):\n        if i % 3 == 0:\n            divisible_by_three_list.append(i)\n    return divisible_by_three_list\n\nif __name__ == '__main__':\n    print(divisible_by_three())", "category": "Python"}, {"instruction": "Write a function that sorts the given list of numbers in descending order", "input": "[1, 2, 3, 5, 8, 10]", "output": "\"\"\"\nWrite a function that sorts the given list of numbers in descending order\n\"\"\"\n\ndef sort_list_descending(numbers):\n    numbers.sort(reverse = True)\n    return numbers\n\nif __name__ == '__main__':\n    print(sort_list_descending([1, 2, 3, 5, 8, 10]))", "category": "Python"}, {"instruction": "Create a program to write an overwriting if-else logic for the following switch statement", "input": "switch(a) {\n  case 1: \n    func1();\n    break;\n  case 2: \n    func2();\n    break;\n}", "output": "\"\"\"\nCreate a program to write an overwriting if-else logic for the following switch statement\n\"\"\"\n\ndef switch_to_if_else(a):\n  if a == 1:\n    func1()\n  elif a == 2:\n    func2()\n\nif __name__ == '__main__':\n    switch_to_if_else(a)", "category": "Python"}, {"instruction": "Create a program to convert the input sentence to Pig Latin.", "input": "I am a computer programmer", "output": "\"\"\"\nCreate a program to convert the input sentence to Pig Latin.\n\"\"\"\n\ndef pig_latin(sentence):\n    words = sentence.split()\n    new_words = []\n    for word in words:\n        if word[0] in 'aeiou':\n            new_words.append(word + 'ay')\n        else:\n            new_words.append(word[1:] + word[0] + 'ay')\n    return ' '.join(new_words)\n\nif __name__ == '__main__':\n    print(pig_latin('I am a computer programmer'))", "category": "Python"}, {"instruction": "Write a code to generate the multiplication table of a given integer.", "input": "x = 5", "output": "\"\"\"\nWrite a code to generate the multiplication table of a given integer\n\"\"\"\n\n# Number for which multiplication table will be generated\nx = 5\n\n# Generating the multiplication table\nfor i in range(1,11):\n    # Printing each row of the table\n    print(\"{} x {} = {}\".format(x,i,x*i))", "category": "Python"}, {"instruction": "Write a code to find the maximum in a given list of integers.", "input": "mylist = [1,2,3,4,5]", "output": "\"\"\"\nWrite a code to find the maximum in a given list of integers\n\"\"\"\n\n# List containing the elements\nmylist = [1,2,3,4,5]\n\n# Finding the maximum element\nmax = mylist[0]\n\n# Looping through each element to find if it is the maximum\nfor i in range(1,len(mylist)):\n    # Comparing the element with the maximum\n    if mylist[i] > max:\n        max = mylist[i]\n\n# Printing the maximum element\nprint(\"Maximum element of the list is\", max)", "category": "Python"}, {"instruction": "Write a code to convert a given list of strings to uppercase.", "input": "mylist = [\"hello\",\"world\"]", "output": "\"\"\"\nWrite a code to convert a given list of strings to uppercase\n\"\"\"\n\n# List containing the strings\nmylist = [\"hello\",\"world\"]\n\n# Converting the list of strings to uppercase\nupper_list = [string.upper() for string in mylist]\n \n# Printing the new list\nprint(\"List with strings in uppercase is\", upper_list)", "category": "Python"}, {"instruction": "Write a code to connect to a remote database.", "input": "username: john\npassword: john123\nIP: 100.10.0.10", "output": "import psycopg2\n\nconn = psycopg2.connect(host=\"100.10.0.10\", database=\"mydb\", user=\"john\", password=\"john123\")", "category": "Python"}, {"instruction": "Write a function to get the mean of the given list of numbers.", "input": "lst = [1, 4, 5, 9, 3]", "output": "def mean(lst):\n    # calculate the sum\n    total = 0\n    for item in lst:\n        total += item\n    \n    # calculate the mean\n    mean = total / len(lst)\n    return mean\n\nprint(mean(lst))", "category": "Python"}, {"instruction": "Write a code to get the time difference between two date-time objects.", "input": "date1: 2019-05-11 21:00:00\ndate2: 2019-05-13 10:00:00", "output": "from datetime import datetime\n\ndef time_difference(date1, date2):\n    date1_obj = datetime.strptime(date1, '%Y-%m-%d %H:%M:%S')\n    date2_obj = datetime.strptime(date2, '%Y-%m-%d %H:%M:%S')\n\n    return (date2_obj - date1_obj).total_seconds() // 3600\n\nprint(time_difference('2019-05-11 21:00:00', '2019-05-13 10:00:00')) # prints 33.0", "category": "Python"}, {"instruction": "Write a code to sort the following array in increasing order.", "input": "[10, 2, 7, 8, 32, 4]", "output": "# sorting array using insertion sort\narr = [10, 2, 7, 8, 32, 4] \n\n# traverse through all array elements \nfor i in range(1, len(arr)):\n    key = arr[i]\n\n    # move elements of arr[0..i-1], that are greater than key,\n    # to one position ahead of their current position\n    j = i-1\n    while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n    arr[j + 1] = key\n  \n#print the sorted array\nprint(arr)", "category": "Python"}, {"instruction": "Write a function to print all prime numbers between two given numbers.", "input": "", "output": "def print_prime_numbers_in_range(start, end):\n  # start = starting number\n  # end = ending number\n\n  for num in range(start, end+1):\n    # Prime numbers are greater than 1\n    if num > 1:\n      for i in range(2, num):\n        if (num % i) == 0:\n          break\n      else:\n        print(num)\n---\n\n11. Instruction: Generate a snippet of code to reverse given string\n11. Input:\n<noinput>\n11. Output:\ndef reverse_string(input_string):\n  string_length = len(input_string)\n  reversed_string = \"\"\n  \n  for i in range(string_length-1,-1,-1):\n    reversed_string += input_string[i]\n  \n  return reversed_string", "category": "Python"}, {"instruction": "Design a program to find the longest element in the given list.", "input": "[10, 100, 200, 500, 400]", "output": "def longest_element(list):\n  max_length = 0\n  max_length_item = None\n\n  for item in list:\n    if len(item) > max_length:\n      max_length = len(item)\n      max_length_item = item\n\n  return max_length_item\n\nlist = [10, 100, 200, 500, 400]\nlongest_element(list) # 500", "category": "Python"}, {"instruction": "Write a code to convert a given spredsheet in csv format to json format.", "input": "", "output": "import csv\nimport json\n\ndef csv_to_json():\n    # Path of csv file\n    file_csv = 'mycsvfile.csv'\n    \n    # Path of json file\n    file_json = 'myjsonfile.json'\n    \n    with open(file_csv, 'r') as input_file:\n        reader = csv.DictReader(input_file)\n        data = list(reader)\n    \n    with open(file_json, 'w') as output_file:\n        json.dump(data, output_file)\n\ncsv_to_json()", "category": "Python"}, {"instruction": "Generate a snippet of code to extract all the URLs from the given string.", "input": "This string contains some urls such as https://www.google.com and https://www.facebook.com.", "output": "import re\n\nstring = \"This string contains some urls such as https://www.google.com and https://www.facebook.com.\"\n\nurls = re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', string) \n\nprint(urls)", "category": "Python"}, {"instruction": "Generate a random integer between 4 and 8 (inclusively).", "input": "", "output": "import random\nx = random.randint(4, 8)", "category": "Python"}, {"instruction": "Create a function that takes an array as an argument and returns the sum of all the elements in the array.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def arraySum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total", "category": "Python"}, {"instruction": "Edit the Python code so that it prints out the total number of elements in the list.", "input": "list = [1, 2, 3, 4, 5]", "output": "list = [1, 2, 3, 4, 5]\nprint(\"Total number of elements in the list: \", len(list))", "category": "Python"}, {"instruction": "Write a Python function to convert a given string to lowercase.", "input": "string = \"FOO\"", "output": "def to_lowercase(string):\n    return string.lower()\n\nstring = \"FOO\"\nprint(to_lowercase(string))", "category": "Python"}, {"instruction": "Follow the comments to complete the code that finds the maximum value in an array.", "input": "# Find the maximum value in an array\narr = [4, 5, 2, 8, 7]\n# TODO", "output": "# Find the maximum value in an array\narr = [4, 5, 2, 8, 7]\n\nmax_value = arr[0]\nfor i in range(1, len(arr)):\n    if arr[i] > max_value:\n        max_value = arr[i]\n\nprint(max_value)", "category": "Python"}, {"instruction": "Create a dictionary for counting the occurrence of each letter in the given string.", "input": "string = \"hello world\"\n#TODO", "output": "string = \"hello world\"\nletter_counts = {}\n\nfor letter in string:\n    if letter in letter_counts:\n       letter_counts[letter] += 1\n    else:\n        letter_counts[letter] = 1\n\nprint(letter_counts)", "category": "Python"}, {"instruction": "Write an algorithm in Python to determine if a number is even or odd.", "input": "", "output": "def is_even(num): \n    if num % 2 == 0: \n        return True \n    else: \n        return False", "category": "Python"}, {"instruction": "Remove the boilerplate code from the program for printing 10 random numbers.", "input": "import random\n\n# Generate 10 random numbers\nfor i in range(10):\n    # TODO", "output": "import random\n\n# Generate 10 random numbers\nfor i in range(10):\n    print(random.randrange(1, 101))", "category": "Python"}, {"instruction": "Develop a classification algorithm in Python to predict whether a bird is a hawk or a falcon.", "input": "", "output": "import pandas as pd\nimport numpy as np\n\n# Define features\nfeatures = [\"wing_shape\", \"size\", \"tails_length\", \"color_pattern\"] \n\n# Load the data\ndata = pd.read_csv(\"birds.csv\")\n\n# Preprocess the data to generate feature vectors\nX = np.array(data[features]) \n\n# Make a target vector \ny = np.array(data[\"species\"]) \n\n# Divide the data into training and test sets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train a classification model\nfrom sklearn.tree import DecisionTreeClassifier\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Generate evaluation metrics\nfrom sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_test, y_pred)\n\nprint(\"Model accuracy: %.2f\" % accuracy)", "category": "Python"}, {"instruction": "Follow the comments in the code to complete the program which prints a conversion table from Fahrenheit to Celsius.", "input": "# This program prints a conversion table from Fahrenheit to Celsius\n\n# Print a heading for the table\n# TODO\n\n# Print the column headings\n# TODO\n\n# Calculate and print the table body\n# TODO", "output": "# This program prints a conversion table from Fahrenheit to Celsius\n\n# Print a heading for the table\nprint(\"Fahrenheit to Celsius Conversion Table\")\n\n# Print the column headings\nprint(\"Fahrenheit \\t Celsius\")\n\n# Calculate and print the table body\nfor fahr in range(-50 , 121):\n  celsius = (fahr - 32) * 5 / 9\n  print(\"%3d \\t\\t %.2f\" % (fahr, celsius))", "category": "Python"}, {"instruction": "Edit the following code to print out all even numbers from 1 to 10.", "input": "for i in range(1,11):\n    print(i)", "output": "for i in range(1,11):\n    if i % 2 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Write code to create a list of all prime numbers between 2 and 100.", "input": "", "output": "def find_primes(n): \n    prime_list = [2] \n    for number in range(2, n + 1): \n        is_prime = True\n        for k in range(2, number): \n            if number % k == 0: \n                is_prime = False \n        if is_prime: \n            prime_list.append(number) \n    return prime_list", "category": "Python"}, {"instruction": "Write a function that checks if a give number is even or odd.", "input": "", "output": "def is_even(n):\n    if n%2 == 0:\n        return True  \n    else:\n        return False", "category": "Python"}, {"instruction": "Write a class to represent a 2D point with x and y coordinates.", "input": "", "output": "class Point:\n    def __init__(self, x, y):\n        self.x = x \n        self.y = y \n   \n    def __str__(self): \n        return \"({0},{1})\".format(self.x, self.y)", "category": "Python"}, {"instruction": "Write a function to generate the nth Fibonacci number.", "input": "< noinput >", "output": "def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-2) + fib(n-1)", "category": "Python"}, {"instruction": "Write a function to find the maximum difference between two numbers in a given array.", "input": "arr = [5, 3, 17, 11, 9]", "output": "def max_difference(arr):\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = arr[i+1] - arr[i]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff", "category": "Python"}, {"instruction": "Create a nested loop to print every combination of numbers between 0-9", "input": "", "output": "for i in range(10):\n    for j in range(10):\n        print(i, j)", "category": "Python"}, {"instruction": "Write a function to find the number of distinct states in a given matrix.", "input": "matrix = [[1, 0, 0],\n          [1, 0, 1],\n          [1, 1, 1]]", "output": "def find_num_distinct_states(matrix):\n    states = set()\n    for row in matrix:\n        state = \"\".join([str(x) for x in row])\n        states.add(state)\n    return len(states)", "category": "Python"}, {"instruction": "Re-write the code segment as a list comprehension.", "input": "numbers = []\nfor i in range(10):\n    if i % 2 == 0:\n        numbers.append(i)", "output": "numbers = [i for i in range(10) if i % 2 == 0]", "category": "Python"}, {"instruction": "How can we encrypt a string in Python?", "input": "", "output": "We can encrypt a string in Python using the cryptography module. The cryptography module provides high level cryptographic primitives using the Fernet cipher. The Fernet cipher uses AES-128 in CBC mode and PKCS7 padding to encrypt the string.", "category": "Python"}, {"instruction": "Using the following code, clean up the bugs and make sure the output functions correctly.", "input": "def example_func(lst):\n   for element in lst:\n      if (type(element) == int):\n         lst.append(element + 5)\n   return lst\n \nexample_func([1, 2, \"hello\"])", "output": "def example_func(lst):\n   output_lst = []\n   for element in lst:\n      if (type(element) == int):\n         output_lst.append(element + 5)\n   return output_lst\n \nexample_func([1, 2, \"hello\"])", "category": "Python"}, {"instruction": "Read the JSON string below and convert it into a dictionary.", "input": "jsonString = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'", "output": "import json\n\njsonObject = json.loads(jsonString)\ndictionary = dict(jsonObject)\nprint(dictionary)", "category": "Python"}, {"instruction": "Create a new folder called 'data' within the current working directory.", "input": "", "output": "import os\n\n# create 'data' folder in the current working directory\ncurrent_directory = os.getcwd()\nnew_directory = os.path.join(current_directory, 'data')\nos.mkdir(new_directory)", "category": "Python"}, {"instruction": "Rewrite the following Python code using a for-loop.", "input": "i = 0\nwhile i <= 10:\n    print(i)\n    i += 1", "output": "for i in range(11):\n    print(i)", "category": "Python"}, {"instruction": "Write a Python program to concatenate all elements in a list into a string separated by a given separator.", "input": "input_list = [\"Python\", \"is\", \"a\", \"programming\", \"language\"]\nseparator = \"-\"", "output": "def list_to_string(input_list, separator):\n    return separator.join(input_list)", "category": "Python"}, {"instruction": "Write a Python program to print out an ASCII art of a given word.", "input": "word = \"happy\"", "output": "def draw_word(word):\n    art = \"\"\"\n                 __\n           _   /  \\\\\n           \\\\_/\\_/\\_/\n           /    |\n           \\___/\n          \\\\\\\\_//\n           \\/ \\/\n            \\/\n        \"\"\"\n    for letter in word:\n        art += \"  \" + letter\n    print(art)", "category": "Python"}, {"instruction": "Write a Python program to get the day of week from a given date and time.", "input": "from datetime import datetime\ndate = datetime(2020, 4, 20, 19, 15, 0)", "output": "from datetime import datetime\n\ndef get_day_of_week(date):\n    return date.strftime(\"%A\")", "category": "Python"}, {"instruction": "Write a Python program to split a string on a given character separator.", "input": "mystring = \"Hello, World!\"\nseparator = \",\"", "output": "def split(mystring, separator):\n    return mystring.split(separator)", "category": "Python"}, {"instruction": "Create a function to calculate the maximum of two numbers.", "input": "", "output": "def max_of_two(x, y):\n    if x > y:\n        return x\n    else:\n        return y", "category": "Python"}, {"instruction": "Find the second smallest element in an integer array of size n.", "input": "array = [4, 5, 8, 2, 9, 13]", "output": "def second_smallest(array):\n\nsmallest = min(array)\nsecond_smallest = float('inf')\n\nfor num in array:\n    if num > smallest and num < second_smallest:\n        second_smallest = num\n        \nreturn second_smallest", "category": "Python"}, {"instruction": "Create a program that can calculate the distance between two points in three-dimensional space.", "input": "point1 = (1, 5, 9)\npoint2 = (4, 2, 8)", "output": "def dist_points_3d(point1, point2):\n    \"\"\"Calculate the distance between two points in three-dimensional space.\"\"\"\n    distance = ((point1[0] - point2[0]) ** 2 + \n                (point1[1] - point2[1]) ** 2 + \n                (point1[2] - point2[2]) ** 2) ** 0.5\n    return distance", "category": "Python"}, {"instruction": "Create a program that can filter out words of a string that contain a specific character.", "input": "string = \"This is a sentence\"\ncharacter = 's'", "output": "def filter_string(string, character):\n    \"\"\"Filter out words of a string that contain a specific character.\"\"\"\n    words = string.split(' ')\n    filtered_words = []\n    for word in words:\n        if character not in word:\n            filtered_words.append(word)\n    return ' '.join(filtered_words)", "category": "Python"}, {"instruction": "FOr a given list, create a program that prints out the standard deviation of the elements in the list.", "input": "list = [1, 4, 9, 16]", "output": "def std_dev(list):\n    \"\"\"Print the standard deviation of elements in a given list.\"\"\"\n    numerator = 0\n    mean = sum(list) / len(list)\n    for num in list:\n        numerator += (num - mean) ** 2\n    sd = (numerator / (len(list) - 1)) ** 0.5\n    return sd", "category": "Python"}, {"instruction": "Design an algorithm that creates a random password of 8 characters.", "input": "", "output": "def generate_password():\n    \"\"\"Generate a random password of 8 characters.\"\"\"\n    import random\n    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()'\n    password = ''\n    for i in range(8):\n        password += random.SystemRandom().choice(chars)\n    return password", "category": "Python"}, {"instruction": "Write a function that takes in a matrix of numbers and reverses the order of the rows and columns.", "input": "matrix = [[1, 2, 3], \n          [4, 5, 6], \n          [7, 8, 9]\n         ]", "output": "def reverse_matrix(matrix):\n    \"\"\"Reverse the order of the rows and columns in a matrix of numbers.\"\"\"\n    reversed_matrix = [[0 for i in range(len(matrix[0]))] for j in range(len(matrix))]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            reversed_matrix[j][i] = matrix[i][j]\n    return reversed_matrix", "category": "Python"}, {"instruction": "Design an algorithm that takes a list of strings and returns the longest string.", "input": "list = [\"cat\", \"dog\", \"lion\", \"bird\"]", "output": "def find_longest(list):\n    \"\"\"Return the longest string from a list of strings.\"\"\" \n    longest = list[0]\n    for item in list:\n        if len(item) > len(longest):\n            longest = item\n    return longest", "category": "Python"}, {"instruction": "Write a function that takes in a list of numbers and prints out the greatest number.", "input": "list = [8, 2, 14, 25]", "output": "def find_greatest(list):\n    \"\"\"Print out the greatest number from a list of numbers.\"\"\"\n    greatest = list[0]\n    for num in list:\n        if num > greatest:\n            greatest = num\n    print('The greatest number is: ', greatest)", "category": "Python"}, {"instruction": "Create a program that finds all the prime numbers less than or equal to a given number.", "input": "", "output": "def find_primes(num):\n    \"\"\"Find all the prime numbers less than or equal to a given number.\"\"\"\n    primes = []\n    for i in range(2, num + 1):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes", "category": "Python"}, {"instruction": "Develop an algorithm to find the value of n where n is the index of the Fibonacci sequence.", "input": "", "output": "def nth_fibonacci_number(n):\n    \"\"\"Find the value of n where n is the index of the Fibonacci Sequence.\"\"\" \n    if n < 2:\n        return n \n    elif n == 2:\n        return 1\n    else:\n        return nth_fibonacci_number(n-1) + nth_fibonacci_number(n-2)", "category": "Python"}, {"instruction": "Create a quick-sort algorithm in Python.", "input": "", "output": "def quick_sort(arr):\n    \"\"\"Sort a list of numbers in ascending order using the Quick-Sort algorithm\"\"\"\n    if len(arr) == 0:\n        return []\n\n    pivot = arr[0]\n    left_arr = [x for x in arr if x < pivot]\n    right_arr = [x for x in arr if x > pivot]\n    return quick_sort(left_arr) + [pivot] + quick_sort(right_arr)", "category": "Python"}, {"instruction": "Write a Python function that takes two lists of equal length and creates a dictionary of the elements in each list that have the same index.", "input": "list_one = [1, 2, 3, 4]\nlist_two = [\"a\", \"b\", \"c\", \"d\"]", "output": "def list_dict(list_one, list_two):\n    \"\"\"Create a dictionary of elements in the two lists which have the same index.\"\"\"\n    assert len(list_one) == len(list_two), \"lists must be same length\"\n    dict = {}\n    for i in range(len(list_one)):\n        dict[list_one[i]] = list_two[i]\n    return dict", "category": "Python"}, {"instruction": "Edit the following code to remove the bugs.", "input": "def reverse_string(user_string): \n  if len(user_string) == 0: \n    return \"\" \n  else: \n    return reverse_string(user_string[1:]) + user_string[0] \n    \nprint(reverse_string(\u201ctest\u201d))", "output": "def reverse_string(user_string): \n  reversed_string = ''\n  if len(user_string) == 0: \n    return \"\" \n  else: \n    reversed_string = reverse_string(user_string[1:]) + user_string[0] \n    return reversed_string\n\nuser_string = 'test'\nprint(reverse_string(user_string))", "category": "Python"}, {"instruction": "Validate whether the string contains only alphabets or not.", "input": "myString = \"abc123\"", "output": "def check_string_alphabets(myString):\n    for character in myString:\n        if (not character.isalpha()):\n            return False\n    return True\n\nmyString = \"abc123\"\nif (check_string_alphabets(myString)):\n    print(\"String contains only alphabets\")\nelse:\n    print(\"String contains numbers\")", "category": "Python"}, {"instruction": "Implement a function that finds the maximum element in a given array.", "input": "arr = [45, 7, 0, 82, 23]", "output": "def find_max_element(arr): \n    max_element = arr[0] \n    for index in range(1, len(arr)): \n        if arr[index] > max_element: \n            max_element = arr[index] \n    return max_element\n  \narr = [45, 7, 0, 82, 23]\nmax_element = find_max_element(arr) \nprint(max_element)", "category": "Python"}, {"instruction": "Write a Python code to calculate the mean of a given array.", "input": "[1,2,3,4]", "output": "# calculate the mean of given array\narr = [1,2,3,4]\n\ndef calc_mean(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum / len(arr)\n\nprint(calc_mean(arr)) # prints 2.5", "category": "Python"}, {"instruction": "Write a Django Model API to store status and published date for a blog post.", "input": "", "output": "from django.db import models\n\nclass BlogPost(models.Model):\n    # post title\n    title = models.CharField(max_length = 200)\n    # post status (draft / published)\n    status = models.CharField(max_length = 20)\n    # post publish date\n    published = models.DateTimeField(auto_now_add = True)", "category": "Python"}, {"instruction": "Write a code to compare two lists and find the common elements.", "input": "list1 = [3, 6, 9, 12]\nlist2 = [2, 4, 5, 6, 8, 9]", "output": "def find_common(list1, list2):\n    # initial list to store common elements\n    result = []\n\n    # iterate through the list\n    for num in list1:\n        # check if the number is in list2\n        if num in list2:\n            # append the element\n            result.append(num)\n\n    return result\n    \nprint(find_common(list1, list2))", "category": "Python"}, {"instruction": "Write an algorithm to check if an array contains a given value", "input": "arr = [1, 7, 5, 8, 44]\nvalue = 5", "output": "def check_value(arr, value):\n    for item in arr:\n        if item == value:\n            return True\n    return False", "category": "Python"}, {"instruction": "Explain the concept of inheritance in Python?", "input": "", "output": "Inheritance in Python allows a class to inherit attributes and behavior from another class, called the parent class. Inheritance enables code reuse, making it an important part of object-oriented programming (OOP). A class that inherits attributes and behavior from a parent is called a child class or derived class. The parent class is also known as the base class or superclass.\n\nIn Python, inheritance is specified by placing classes in parentheses after the class name: class DerivedClass(BaseClass):. This syntax allows the DerivedClass to inherit all attributes and methods from the BaseClass. It also allows the DerivedClass to override methods of the BaseClass, and add new attributes and methods.", "category": "Python"}, {"instruction": "Name a few Python libraries used for data analysis.", "input": "", "output": "Data analysis libraries in Python include Pandas, NumPy, SciPy, Matplotlib, Scikit-Learn and Seaborn.", "category": "Python"}, {"instruction": "Write a Python function to generate the powerset of a given list.", "input": "list = [2, 4, 6]", "output": "def generate_powerset(list):\n powerset = []\n for i in range(2**len(list)):\n  subset = [list[bit] for bit in range(len(list)) if is_bit_set(i, bit)]\n  powerset.append(subset)\n return powerset\n\ndef is_bit_set(num, bit):\n return (num & (1 << bit)) != 0", "category": "Python"}, {"instruction": "Write a Python script to count the number of occurances of each character in a given string.", "input": "string = \"Mississippi\"", "output": "def count_chars(string):\n char_occurrences = {}\n for char in string:\n  if char not in char_occurrences:\n   char_occurrences[char] = 1\n  else:\n   char_occurrences[char] += 1\n return char_occurrences", "category": "Python"}, {"instruction": "Write a Python function to compute the maximum value for each key in a given dictionary.", "input": "d = {'a':10, 'b':20, 'c':30}", "output": "def max_values(d):\n return {key: max(d.values()) for key in d}", "category": "Python"}, {"instruction": "Write a Python function to replace all the occurrences of a given substring with another.", "input": "string = \"Hello World\"\nsubstring = \"World\"\nreplacement = \"Universe\"", "output": "def replace_substring(string, substring, replacement):\n return string.replace(substring, replacement)", "category": "Python"}, {"instruction": "Write a Python function to create a two-dimensional array of specified dimensions.", "input": "", "output": "def create_2D_array(rows, columns):\n arr = [[] * columns] * rows\n return arr", "category": "Python"}, {"instruction": "Write a Python function to check if a given string is an anagram of another or not.", "input": "word1 = \"cat\"\nword2 = \"tac\"", "output": "def is_anagram(word1, word2):\n return sorted(word1) == sorted(word2)", "category": "Python"}, {"instruction": "Generate a random 5-character string using the letters a-z.", "input": "", "output": "import random\n\ncharacters = \"abcdefghijklmnopqrstuvwxyz\"\n\nrandom_string = \"\"\nfor i in range(5):\n    random_string += random.choice(characters)\n\nprint(random_string)", "category": "Python"}, {"instruction": "Write a Python program to print the following pattern.", "input": "", "output": "for i in range(1,6):\n  for j in range(1,i+1):\n    print(\"*\", end=\" \")\n  print()", "category": "Python"}, {"instruction": "Name the components of a typical machine learning pipeline.", "input": "", "output": "A typical machine learning pipeline consists of data pre-processing, model training, model evaluation and model deployment. Data pre-processing involves cleaning, formatting, and transforming the data, while model training involves selecting an appropriate model and using it to learn from the data. Model evaluation evaluates the models and assists in model selection. The final step is deployment of the model, to enable inference from and prediction on new data points.", "category": "Python"}, {"instruction": "Reverse a string using Python code.", "input": "input_str = \"Hello world!\"", "output": "def reverse_string(input_str): \n    new_string = \"\" \n    for char in input_str: \n        new_string = char + new_string\n  \n    return new_string \n  \ninput_str = \"Hello world!\"\n\nprint(reverse_string(input_str))\n##\n5. Instruction: Create a program that prints a multiplication table that shows the product of any two numbers between 1 and 10.\n5. Input:\n<noinput>\n5. Output:\nfor i in range(1, 11): \n    for j in range(1, 11): \n        product = i * j\n        print(str(i) + '*' + str(j) +'=' + str(product), end = '  ') \n    print()", "category": "Python"}, {"instruction": "Write a Python code snippet to print the pyramid structure with the given number of lines.", "input": "4", "output": "*   \n   ***\n  *****\n *******", "category": "Python"}, {"instruction": "Compare and contrast  two sorting algorithms: Bubble sort and Quick sort.", "input": "", "output": "Bubble sort is an algorithm that compares adjacent elements and swaps positions if they are out of order. It continues in this manner with loops until all elements of the array are in their correct order. Quick sort is very similar in its approach, but chooses a \"pivot\" element and divides the remaining array into two parts based on whether the elements are less than or greater than the pivot element. Bubble sort is simpler but has worse time complexity than Quick sort, which is more efficient.", "category": "Python"}, {"instruction": "Write a codde fragment to print out the most frequent element in an array.", "input": "arr = [1, 2, 2, 3, 4, 4, 5]", "output": "freq = {}\n\nfor el in arr:\n    if el in freq:\n        freq[el] += 1\n    else:\n        freq[el] = 1\n        \nmax_el, max_freq = None, 0\nfor el, freq in freq.items():\n    if freq > max_freq:\n        max_el = el\n        max_freq = freq\n        \nprint(max_el, max_freq)  # Output: 2 2", "category": "Python"}, {"instruction": "You need to find the largest subset of an array that sums up to a given value.", "input": "arr = [1, 2, 3, 4, 5], target = 8", "output": "def find_largest_subset(arr, target):\n    curr_sums, max_sum_list = [], []\n    for num in arr:\n        for curr_sum in curr_sums[:]:\n            new_sum = curr_sum + num\n            if new_sum == target:\n                if new_sum > sum(max_sum_list):\n                    max_sum_list = curr_sum + [num]\n            else:\n                curr_sums.append(new_sum)\n    return max_sum_list", "category": "Python"}, {"instruction": "What is the command to print \"Hello World\" twelve times in Python?", "input": "", "output": "for i in range(12):\n    print(\"Hello World\")", "category": "Python"}, {"instruction": "Generate a random string of 12 characters using Python.", "input": "", "output": "import string\nimport random\n\n''.join(random.choices(string.ascii_letters + string.digits, k=12))", "category": "Python"}, {"instruction": "Classify the following transaction as valid or invalid using Python.", "input": "Transaction ID: 101\nTransaction Amount: -200", "output": "\"invalid\"", "category": "Python"}, {"instruction": "Generate a 15-digit random number using Python.", "input": "", "output": "import random\n\nrandom.randint(100000000000000, 999999999999999)", "category": "Python"}, {"instruction": "Count the number of words in this sentence using Python.", "input": "This sentence has a total of eight words.", "output": "8", "category": "Python"}, {"instruction": "Given a string, write a Python program to find the first non-repeating character in it.", "input": "input_str = \"aaaaabbbbccc\"", "output": "def first_non_repeating_char(input_str): \n \n    char_count = {}\n \n    for ch in input_str: \n \n        if ch in char_count: \n \n            char_count[ch] += 1\n \n        else: \n \n            char_count[ch] = 1\n \n    for ch in input_str: \n \n        if char_count[ch] == 1: \n            return ch \n \n    return None\n\nprint(first_non_repeating_char(input_str))", "category": "Python"}, {"instruction": "Summarize the given paragraph in < 100 words.", "input": "Ada Lovelace is widely considered to be the world's first computer programmer. She was born to the poet Lord Byron and Lady Byron in 1815. She was fascinated by mathematics and charmed Charles Babbage, who is known as the father of computers, into teaching her about his Analytical Engine. Lovelace wrote a detailed description of the machine in 1843, and also outlines how it could be used to carry out complex calculations.", "output": "Ada Lovelace was born in 1815 to Lord Byron and Lady Byron and is widely acknowledged as the world\u2019s first computer programmer. She was fascinated by mathematics and was able to learn about Charles Babbage\u2019s Analytical Engine from him. In 1843, she wrote a detailed description of the machine and how it could be used for complex calculations.", "category": "Python"}, {"instruction": "Describe how to create a 'dockerfile'", "input": "", "output": "A Dockerfile is created by specifying a set of instructions for how to build an image for a Docker container. A Dockerfile should specify a base image and the desired version, update the package manager, set environment variables, run commands, define the port mapping for the application, add files from the host filesystem to the image, and set an entrypoint for the container.", "category": "Python"}, {"instruction": "Purge all rows from the following dataframe that have a negative value in the Age column.", "input": "import pandas as pd \n\ndata = {'Name': ['Jerry', 'Peter', 'Paul', 'John'], \n'Age': [20, 22, -18, 24]} \n\ndf = pd.DataFrame(data)", "output": "import pandas as pd \n\ndata = {'Name': ['Jerry', 'Peter', 'Paul', 'John'], \n'Age': [20, 22, -18, 24]} \n\ndf = pd.DataFrame(data)\n\ndf = df[df['Age'] >= 0]", "category": "Python"}, {"instruction": "Change the following code snippet to generate a random integer from 0 to 10.", "input": "", "output": "import random\n\nrandom_int = random.randint(0, 10)", "category": "Python"}, {"instruction": "Write a function in Python to calculate the value of \"e\" to 4 decimal places.", "input": "", "output": "from math import e\n\ndef calc_e():\n    \"\"\"This function calculates the value of e to 4 decimal places\"\"\"\n    return round(e, 4)", "category": "Python"}, {"instruction": "What type of object is \"None\" in Python?", "input": "", "output": "None is a special constant in Python and is of type NoneType.", "category": "Python"}, {"instruction": "Create a function to check if an item is in a list", "input": "", "output": "def check_list_contains(item_list, item):\n    \"\"\"This function checks if an item is in a list\"\"\"\n    return item in item_list", "category": "Python"}, {"instruction": "Create a python class called \"Employee\" that contains 3 instance variables.", "input": "", "output": "class Employee:\n    \"\"\"A class for representing an employee\"\"\"\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary", "category": "Python"}, {"instruction": "Create a function in Python that prints out a stringified version of a list.", "input": "[1, 4, 6, 8]", "output": "def print_str_list(in_list):\n    \"\"\"This function takes a list and returns a stringified version of it\"\"\"\n    return \" \".join(str(x) for x in in_list)", "category": "Python"}, {"instruction": "Edit the following function so that it counts the even numbers in the given array.", "input": "arr = [1, 2, 3, 4]", "output": "def countEvens(arr):\n count = 0\n for num in arr:\n  if num % 2 == 0:\n   count += 1\n return count", "category": "Python"}, {"instruction": "Write a Python program to determine if a given number is an Armstrong number.", "input": "", "output": "def isArmstrongNumber(num):\n sum = 0\n temp = num\n while temp > 0:\n  digit = temp % 10\n  sum += digit ** 3\n  temp //= 10\n if num == sum:\n  return True\n else:\n  return False", "category": "Python"}, {"instruction": "Create a Python program to find the maximum value in the given array.", "input": "[2, 4, 5, 7, 8]", "output": "def find_max(arr): \n    max_val = arr[0] \n    for i in range(len(arr)): \n        if max_val < arr[i]: \n            max_val = arr[i] \n    return max_val \n\narr = [2, 4, 5, 7, 8] \nmax_val = find_max(arr) \nprint(max_val)", "category": "Python"}, {"instruction": "Write a Python function to find the intersection between two lists.", "input": "list1 = [1, 2, 3, 5, 7]\nlist2 = [3, 4, 5, 6]", "output": "def intersection(list1, list2):\n    result = []\n    for i in list1:\n        for j in list2:\n            if i==j:\n                result.append(i)\n    return result", "category": "Python"}, {"instruction": "Create a function to convert a given number from decimal to binary representation using Python.", "input": "", "output": "def dec_to_binary(num):\n    binary = \"\"\n    while num > 0:\n        binary+= str(num % 2)\n        num = num // 2\n    return binary[::-1]", "category": "Python"}, {"instruction": "Write a Python function to remove the characters which have odd index values of a given string.", "input": "string = \"Hello World\"", "output": "def remove_odd_index(string):\n    result = \"\" \n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result", "category": "Python"}, {"instruction": "Calculate the sum of all elements in a given list using Python.", "input": "list1 = [1, 2 ,3, 4, 5]", "output": "sum_list = 15", "category": "Python"}, {"instruction": "Find the longest palindrome in a given string using Python.", "input": "string = \"My name is John\"", "output": "def longest_palindrome(string):\n    palindrome = ''\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            if substring == substring[::-1] and len(substring) > len(palindrome):\n                palindrome = substring\n    return palindrome", "category": "Python"}, {"instruction": "Write a Python function to format a specified string to limit the number of characters to 6.", "input": "string = \"Hello world\"", "output": "def limit_char(string):\n    if len(string) > 6 :\n        return string[:6]\n    else:\n        return string", "category": "Python"}, {"instruction": "Convert the following number into binary representation using Python.", "input": "12", "output": "binary = \"0b1100\"", "category": "Python"}, {"instruction": "Using Python, create a function to check if a given string contains an uppercase letter.", "input": "", "output": "def contains_uppercase(text):\n  for char in text:\n    if char.isupper():\n      return True\n  return False", "category": "Python"}, {"instruction": "Compute the result of the following mathematical expression in Python.", "input": "(4 + 5 * 7 - 9) / 2", "output": "result = 17", "category": "Python"}, {"instruction": "Write a Python script to find the common elements in two given lists.", "input": "list1 = [1, 2, 3, 5, 7]\nlist2 = [2, 3, 4, 5, 6]", "output": "def common_elements(list1, list2):\n    common_ele = []   \n    for i in list1:\n        for j in list2:\n            if i==j:\n                common_ele.append(i)\n    return common_ele", "category": "Python"}, {"instruction": "Create a function to find the greatest common divisor of two numbers in Python.", "input": "", "output": "def gcd(a, b):\n     while b != 0:\n        a, b = b, a % b\n     return a", "category": "Python"}, {"instruction": "Sort the given list of numbers in ascending order using Python.", "input": "numbers = [3, 5, 7, 1, 2]", "output": "sorted_numbers = [1, 2, 3, 5, 7]", "category": "Python"}, {"instruction": "Using Python, create a list containing the first 20 prime numbers.", "input": "", "output": "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]", "category": "Python"}, {"instruction": "Create a pandas dataframe from the following dictionary.", "input": "data = {'Name': ['Jerry', 'Peter', 'Paul', 'John'], \n'Age': [20, 22, 18, 24]}", "output": "import pandas as pd\n\ndf = pd.DataFrame(data)", "category": "Python"}, {"instruction": "Define a function to check if a number is odd.", "input": "", "output": "def is_odd(num):\n    if num % 2 != 0:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Write an algorithm to perform binary search on a sorted array.", "input": "", "output": "def binarySearch(array, item):\n  low = 0\n  high = len(array) - 1\n\n  while low <= high:\n    mid = (low + high) // 2\n    guess = array[mid]\n    if guess == item:\n      return mid\n    if guess > item:\n      high = mid - 1\n    else:\n      low = mid + 1\n  return None", "category": "Python"}, {"instruction": "What is data transformation and how is it used?", "input": "", "output": "Data transformation is the process of converting data from one format to another format. It is mainly used for cleaning and normalizing data before it is used for further analysis or machine learning. Data transformation involves a range of operations from removing outliers and duplicates, performing calculations to creating new columns and more.", "category": "Python"}, {"instruction": "Given a string, create a function that takes out all the duplicated characters in the string.", "input": "string = 'Keeep Learning'", "output": "def remove_duplicates(s):\n  seen = []\n  res = \"\"\n  for char in s:\n    if(char in seen):\n      continue\n    else:\n      seen.append(char)\n      res += char\n  return res\n\nstring = 'Keeep Learning'\nprint(remove_duplicates(string)) # Keep Larning", "category": "Python"}, {"instruction": "Write a code to multiple two numbers without using the multiplication operator.", "input": "", "output": "def multiply(x,y):\n  if(y == 0):\n    return 0\n  return x + multiply(x,y-1)\n\nmultiply(5,4) # 20", "category": "Python"}, {"instruction": "Write code to remove all occurrences of a given element from a list", "input": "", "output": "def remove_element(list, element):\n    \"\"\"\n    Remove all occurrences of a given element from a list\n    :param list: the list\n    :param element: the element to remove\n    :return: the filtered list\n    \"\"\"\n    filtered_list = [item for item in list if item != element]\n    return filtered_list", "category": "Python"}, {"instruction": "Write code to flatten a nested list", "input": "", "output": "def flatten_list(list):\n    \"\"\"\n    Flatten a nested list\n    :param list: the nested list to flatten\n    :return: a flattened list\n    \"\"\"\n    flattened_list = []\n    for item in list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list", "category": "Python"}, {"instruction": "Write code to find the intersection of two sorted lists", "input": "list1 = [1, 3, 4, 6]\nlist2 = [1, 2, 5, 6]", "output": "def find_intersection(list1, list2):\n    \"\"\"\n    Find the intersection of two sorted lists\n    :param list1: the first sorted list\n    :param list2: the second sorted list\n    :return: a list with elements found in both lists\n    \"\"\"\n    intersection = []\n    p1 = p2 = 0\n    while p1 < len(list1) and p2 < len(list2):\n        if list1[p1] == list2[p2]:\n            intersection.append(list1[p1])\n            p1 += 1\n            p2 += 1\n        elif list1[p1] < list2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n    return intersection\n\nlist1 = [1, 3, 4, 6]\nlist2 = [1, 2, 5, 6]\nprint(find_intersection(list1, list2))", "category": "Python"}, {"instruction": "Implement a function to extract the last two words from a string of words", "input": "", "output": "def get_last_two_words(string):\n    \"\"\"\n    Extract and return the last two words from a string of words\n    :param string: the input string\n    :return: the last two words\n    \"\"\"\n    words = string.split(\" \")\n    return words[-2:]", "category": "Python"}, {"instruction": "Write a function to find the longest string in a list of strings.", "input": "", "output": "def find_longest_string(strings):\n    \"\"\"\n    Find and return the longest string in a list of strings.\n    :param strings: the list of strings\n    :return: the longest string\n    \"\"\"\n    longest = \"\"\n    for string in strings:\n        if len(string) > len(longest):\n            longest = string\n    return longest", "category": "Python"}, {"instruction": "Write a function to calculate the average score of a list of numbers.", "input": "", "output": "def get_average(numbers):\n    \"\"\"\n    Calculate and return the average of a list of numbers\n    :param numbers: the list of numbers\n    :return: the average of the numbers\n    \"\"\"\n    total = 0\n    for number in numbers:\n        total += number\n    return total / len(numbers)", "category": "Python"}, {"instruction": "convert all words in a sentence to camelCase", "input": "The quick brown fox jumps over the lazy dog", "output": "\"\"\"\nConvert all words in a sentence to camelCase\n\nInput: The quick brown fox jumps over the lazy dog\n\nOutput: theQuickBrownFoxJumpsOverTheLazyDog\n\"\"\"\n\ndef toCamelCase(sentence):\n    words = sentence.split(\" \")\n    result = \"\"\n    for index, word in enumerate(words):\n        if index > 0:\n            small_word = word.capitalize()\n            result += small_word\n        else:\n            result += word\n    return result\n\nsentence = \"The quick brown fox jumps over the lazy dog\"\nprint(toCamelCase(sentence))", "category": "Python"}, {"instruction": "classify the following sentence using a sentiment analysis model.", "input": "The movie is awesome.", "output": "\"\"\"\nClassify the following sentence using a sentiment analysis model.\nSentence: The movie is awesome.\n\"\"\"\n\nfrom textblob import TextBlob\n\nsentence = \"The movie is awesome.\"\n\n# convert the sentence to a TextBlob object\nblob = TextBlob(sentence)\n\n# get the sentiment\nsentiment = blob.sentiment\n\nif sentiment.polarity > 0:  # positive sentiment\n    print(\"This sentence is classified as Positive.\")\nelif sentiment.polarity == 0:  # neutral sentiment\n    print(\"This sentence is classified as Neutral.\")\nelse:  # negative sentiment\n    print(\"This sentence is classified as Negative.\")", "category": "Python"}, {"instruction": "Given a string, write a function to remove all the duplicate characters.", "input": "string = \"apple\"", "output": "def remove_duplicates(string): \n    new_string = \"\" \n    for char in string:\n        if char not in new_string:\n            new_string += char \n    return new_string", "category": "Python"}, {"instruction": "Given a binary tree, write a code snippet to list all of its descendant leafs.", "input": "", "output": "def listDescendantLeaves(root):\n    if not root: \n        return\n    elif not root.left and not root.right: \n        print(root.val) \n    listDescendantLeaves(root.left) \n    listDescendantLeaves(root.right)", "category": "Python"}, {"instruction": "Generate a unique and random password for a user using python.", "input": "", "output": "import random \ncharacters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+-=[ ]{}:'\npassword = random.choices(characters, k = 16) \nprint(\"\".join(password))", "category": "Python"}, {"instruction": "Create a Linked List Node with the data of type integer.", "input": "", "output": "class Node: \n  \n  # Function to initializaee the node object \n  def __init__(self, data): \n    self.data = data # Assign data \n    self.next = None # Initialize next as null", "category": "Python"}, {"instruction": "Using the numpy library, create a 3x3 Identity Matrix.", "input": "", "output": "iden_matrix = numpy.identity(3) \nprint(iden_matrix)", "category": "Python"}, {"instruction": "For the following two arrays, create a code snippet to return the intersecting element.", "input": "arr1 = [1, 9, 4, 10]\narr2 = [2, 4, 7, 8]", "output": "intersect_arr = [] \nfor i in arr1:\n    if i in arr2:\n        intersect_arr.append(i)\nreturn intersect_arr", "category": "Python"}, {"instruction": "Create a new array that contains only the even numbers from a given array.", "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8]", "output": "arr = [x for x in arr if x % 2 == 0]", "category": "Python"}, {"instruction": "Write a code to delete all items from a list with a value of 3.", "input": "mylist = [2, 3, 3, 4, 5, 6, 4, 7]", "output": "mylist = [item for item in mylist if item != 3]", "category": "Python"}, {"instruction": "Change the following array so that it only contains numbers divisible by 3", "input": "mylist = [2, 4, 5, 6, 7, 11, 12, 22]", "output": "mylist = [x for x in mylist if x % 3 == 0]", "category": "Python"}, {"instruction": "Read the following two JSON strings and merge them", "input": "json1 = {\n    \"name\": \"John\",\n    \"age\": 20\n}\n\njson2 = {\n    \"address\": \"123 Street\"\n}", "output": "import json\n\njson1 = json.loads(json1)\njson2 = json.loads(json2)\nmerged_json = {**json1, **json2}", "category": "Python"}, {"instruction": "Parse the string \"Hello[1]World[4]123[3]\" into a list.", "input": "string = \"Hello[1]World[4]123[3]\"", "output": "my_list = string.split('[')\nmy_list = [item.replace(']', '') for item in my_list]\nmy_list = [int(item) for item in my_list[1::2]]", "category": "Python"}, {"instruction": "Write a simple calculator program.", "input": "", "output": "def calculator():\n    number1 = int(input(\"Please enter first number: \"))\n    number2 = int(input(\"Please enter second number: \"))\n    print(\"Please choose operation -\\n\" \\\n          \"1. Add\\n\" \\\n          \"2. Subtract\\n\" \\\n          \"3. Multiply\\n\" \\\n          \"4. Divide\\n\") \n\n    choice = int(input(\"Enter your choice: \"))\n    if choice == 1:\n        ans = number1 + number2\n        print(\"Answer={}\".format(ans))\n    elif choice == 2:\n        ans = number1 - number2\n        print(\"Answer={}\".format(ans))\n    elif choice == 3:\n        ans = number1 * number2\n        print(\"Answer={}\".format(ans))\n    elif choice == 4:\n        ans = number1 / number2\n        print(\"Answer={}\".format(ans))\n    else:\n        print(\"Invalid Choice\")", "category": "Python"}, {"instruction": "Write a function that checks if a string is a palindrome or not.", "input": "string = \"ana\"", "output": "def is_palindrome(string):\n    rev = ''.join(reversed(string))\n    if rev == string:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Write an algorithm to generate the Fibonacci series up to the nth term", "input": "", "output": "def fibonacci(n):  \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Write a function to determine if two strings are anagrams of each other", "input": "", "output": "def are_anagrams(str1, str2):\n    if len(str1) != len(str2):\n        return False\n\n    freq1 = {}\n    freq2 = {}\n\n    for char in str1:\n        if char not in freq1:\n            freq1[char] = 1\n        else:\n            freq1[char] += 1\n\n    for char in str2:\n        if char not in freq2:\n            freq2[char] = 1\n        else:\n            freq2[char] += 1\n\n    for key in freq1:\n        if key not in freq2 or freq2[key] != freq1[key]:\n            return False\n    \n    return True", "category": "Python"}, {"instruction": "Generate pseudocode for a matrix multiplication algorithm.", "input": "", "output": "\"\"\"\nGenerate pseudocode for a matrix multiplication algorithm.\n\"\"\"\n\n# Create an NxN matrix result, initialized to 0\nresult = zeros(NxN)\n\n# loop through matrix A and B\nfor i in range(N):\n    for j in range(N):\n        for k in range(N):\n            # multiply the elements of A and B\n            result[i][j] += A[i][k] * B[k][j]\n\n# return the result matrix\nreturn result", "category": "Python"}, {"instruction": "Create a function in Python to calculate the factorial of a number.", "input": "", "output": "def factorial(n):\n    \"\"\"This function returns the factorial of a given integer\"\"\"\n    if n == 0:\n        return 1\n    else: \n        return n * factorial(n-1)", "category": "Python"}, {"instruction": "Create a function to generate a random password of length n", "input": "", "output": "import random\n\ndef generate_password(n):\n    \"\"\"\n    Create a function to generate a random password of length n\n    :param n: the length of the password\n    :return: a random password of length n\n    \"\"\" \n    # create a character list of symbols, alphabets, and numbers\n    characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+-='\n    # create a list of length n with random characters\n    password = [random.choice(characters) for _ in range(n)] \n    # convert the list to a string\n    password = ''.join(password)  \n    # return the password\n    return password", "category": "Python"}, {"instruction": "Generate a data structure that can efficiently store an array of words", "input": "", "output": "\"\"\"\nGenerate a data structure that can efficiently store an array of words\n\"\"\"\n\n# create a trie (a node with 26 references to other nodes)\nclass TrieNode:\n    def __init__(self):\n        self.children = dict()\n        self.end = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word):\n        node = self.root\n        for c in word:\n            if c not in node.children:\n                node.children[c] = TrieNode()\n            node = node.children[c]\n        node.end = True\n\n# create an empty array\nword_array = []\n\n# create a new trie\ntrie = Trie()\n\n# iterate over the array and insert the words into the trie\nfor word in word_array:\n    trie.insert(word)", "category": "Python"}, {"instruction": "How do you declare a variable in Python?", "input": "", "output": "In Python, you can declare a variable by assigning a value to it. For example, x = 1 is a variable declaration which creates a variable named x with the value of 1.", "category": "Python"}, {"instruction": "Write a Python function to check if a value exists in a list.", "input": "", "output": "def is_in_list(lst, val):\n    return val in lst", "category": "Python"}, {"instruction": "Explain the concept of object-oriented programming.", "input": "", "output": "Object-oriented programming (OOP) is a programming paradigm based on the concept of \"objects\", which can contain data and code: data in the form of fields and code in the form of procedures. OOP is used to design objects which contain both data and functions as one unit and help in creating reusable code.", "category": "Python"}, {"instruction": "Write a code to remove the oldest elements from a list until the list contains at most 10 elements.", "input": "list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "output": "def remove_old_elements(lst):\n  for i in range(len(lst) - 10):\n    lst.pop(0)\n  return lst\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(remove_old_elements(list)) # [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "category": "Python"}, {"instruction": "Create a program to display all prime numbers between a given range.", "input": "a, b = 2, 8", "output": "def prime_numbers_in_range(a, b):\n    \"\"\"\n    Displays all prime numbers between a given range.\n    \"\"\"\n    for num in range(a, b+1):\n        if is_prime(num):\n            print(num,' is prime.')\n\ndef is_prime(num):\n    \"\"\"\n    Checks if a number is prime or not.\n    \"\"\"\n    if num == 1:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False \n    return True", "category": "Python"}, {"instruction": "Write code to find the most frequent item in an array", "input": "arr = [1, 4, 6, 8, 9, 1, 4, 6]", "output": "def most_frequent_item(arr):\n    \"\"\"\n    Finds the most frequent item in an array.\n    \"\"\"\n    dictionary = {}\n    for i in arr:\n        if i in dictionary:\n            dictionary[i] += 1\n        else:\n            dictionary[i] = 1\n\n    max_count = 0\n    max_item = 0\n\n    for k, v in dictionary.items():\n        if v > max_count:\n            max_item = k\n            max_count = v\n    return max_item", "category": "Python"}, {"instruction": "Find the index of a given item in an array", "input": "arr = [1, 4, 6, 8, 9]\nitem = 8", "output": "def find_index(arr, item):\n    \"\"\"\n    Finds the index of a given item in an array\n    \"\"\"\n    for i, num in enumerate(arr):\n        if num == item:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Write code to find the longest substring of unique characters in a given string.", "input": "string = 'abcabcbb'", "output": "def find_longest_substring(string):\n    \"\"\"\n    Finds the longest substring of unique characters in a given string.\n    \"\"\"\n    longest_substring = ''\n    current_substring = ''\n    for ch in string:\n        if ch not in current_substring:\n            current_substring += ch\n            if len(current_substring) > len(longest_substring):\n                longest_substring = current_substring\n        else:\n            current_substring = ch\n    return longest_substring", "category": "Python"}, {"instruction": "Write code to implement Bubble Sort.", "input": "arr = [5, 8, 2, 4, 7, 10]", "output": "def bubble_sort(arr):\n    \"\"\"\n    Implementation of the Bubble Sort algorithm.\n    \"\"\"\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-1-i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr", "category": "Python"}, {"instruction": "Write a function to calculate the arithmetic mean of an array of numbers", "input": "arr = [5, 8, 2, 4, 7, 10]", "output": "def calculate_mean(arr):\n    \"\"\"\n    Calculate the arithmetic mean of an array of numbers.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    \n    return sum(arr) / len(arr)", "category": "Python"}, {"instruction": "Write code to find the smallest number in an array of numbers.", "input": "arr = [5, 8, 2, 4, 7, 10]", "output": "def find_smallest_number(arr):\n    \"\"\"\n    Finds the smallest number in an array of numbers.\n    \"\"\"\n    min_num = arr[0]\n    for num in arr[1:]:\n        if num < min_num:\n            min_num = num\n    return min_num", "category": "Python"}, {"instruction": "Create a program which will take the user's name and output a custom message depending on the supplied name", "input": "name = 'John'", "output": "def greet_user(name):\n    \"\"\"\n    Greet the user with a custom message depending on the supplied name.\n    \"\"\"\n    if name == 'John':\n        print('Hey there John! Welcome back!')\n    elif name == 'Mary':\n        print('Good morning Mary! How are you doing today?')\n    else:\n        print('Hi there! Welcome to our service!')", "category": "Python"}, {"instruction": "Write a code to check whether a given year is a leap year or not", "input": "", "output": "def is_leap_year(year):\n    \"\"\"\n    Checks if the given year is a leap year or not.\n    \"\"\"\n    if ((year % 4 == 0) and (year % 100 != 0)) or (year % 400 == 0):  \n        return True  \n    else:  \n        return False", "category": "Python"}, {"instruction": "Write a function that takes a string and returns a boolean based on whether the string is a palindrome or not.", "input": "", "output": "def is_palindrome(str):\n    \"\"\"\n    Checks if the given input string is a palindrome or not.\n    \"\"\"\n    return str == str[::-1]", "category": "Python"}, {"instruction": "Find the top 5 most common words in a given string.", "input": "s = \"Hello world, this is a sample string for the task\"", "output": "\"\"\"\nFind the top 5 most common words in a given string\n\"\"\"\n\nfrom collections import Counter\n\ndef get_top_five_words(s):\n    \"\"\"Get the top five most common words in a given string.\n    \n    Args:\n        s (str): The string to process.\n        \n    Returns:\n        list: A list of (word, count) tuples sorted in descending order\n            of the most common words.\n    \"\"\"\n    words = s.split()\n    counts = Counter(words).most_common(5)\n    return counts\n    \nif __name__ == '__main__':\n    s = \"Hello world, this is a sample string for the task\"\n    print(get_top_five_words(s))", "category": "Python"}, {"instruction": "Find the longest common substring between two strings.", "input": "s1 = \"Tangible\"\ns2 = \"Non-Tangible\"", "output": "\"\"\"\nFind the longest common substring between two strings\n\"\"\"\n\ndef longest_common_substring(s1, s2):\n    \"\"\"Find the longest common substring between two strings.\n    \n    Args:\n        s1 (str): The first string.\n        s2 (str): The second string.\n        \n    Returns:\n        str: The longest common substring.\n    \"\"\"\n    max_length = 0\n    longest_substring = \"\"\n    len1, len2 = len(s1), len(s2)\n    for i in range(len1): \n        for j in range(len2):\n            length = 0\n            while i + length < len1 and j + length < len2:\n                if s1[i + length] != s2[j + length]:\n                    break \n                length += 1\n            if length > max_length:\n                max_length = length\n                longest_substring = s1[i : i + length]\n    return longest_substring\n    \nif __name__ == '__main__':\n    s1 = \"Tangible\"\n    s2 = \"Non-Tangible\"\n    print(longest_common_substring(s1, s2))", "category": "Python"}, {"instruction": "Create a function to reverse a string.", "input": "s = \"hello world\"", "output": "\"\"\"\nReverse string\n\"\"\"\n\ndef reverse_string(s):\n    \"\"\"Reverse a given string.\n    \n    Args:\n        s (str): The string to reverse.\n        \n    Returns:\n        str: The reversed string.\n    \"\"\"\n    return s[::-1]\n    \nif __name__ == '__main__':\n    s = \"hello world\"\n    print(reverse_string(s))", "category": "Python"}, {"instruction": "Create a program that prints the first 10 Fibonacci numbers.", "input": "", "output": "\"\"\"\nPrint the first ten Fibonacci numbers\n\"\"\"\n\ndef print_first_ten_fibonacci_numbers():\n    \"\"\"Print the first ten Fibonacci numbers.\"\"\"\n\n    n1, n2 = 0, 1\n    num = 0\n    while num < 10:\n        print(n1)\n        nth= n1 + n2\n        n1 = n2\n        n2 = nth\n        num += 1\n        \nif __name__ == '__main__':\n    print_first_ten_fibonacci_numbers()", "category": "Python"}, {"instruction": "Redesign the following Python program with functions.", "input": "my_list = [5, 10, 15, 20]\nsum = 0\nfor number in my_list:\nsum = sum + number", "output": "def sum_of_list(my_list):\n  sum = 0\n  for number in my_list:\n    sum = sum + number\n  return sum\n\nmy_list = [5, 10, 15, 20]\nresult = sum_of_list(my_list)", "category": "Python"}, {"instruction": "Design a function in Python that returns the median of an array of integers.", "input": "", "output": "def median(arr):\n  sortedArr = sorted(arr)\n  length = len(arr)\n  if length % 2 == 0:\n    return ((sortedArr[length//2-1] + sortedArr[length//2])/2)\n  else:\n    return sortedArr[length//2]", "category": "Python"}, {"instruction": "Reorder a given array in specialized order", "input": "", "output": "def reorder_array(arr):\n    \"\"\"\n    Reorder a given array in specialized order\n    :param arr: the input array to reorder\n    :return: the reordered array\n    \"\"\"\n    # determine the size of the array\n    n = len(arr)\n    \n    # create a new array to store the reordered results\n    reordered = [0] * n\n    \n    # loop through the array \n    for i in range(n):\n        # calculate the position of the current element\n        pos = 2 * (arr[i] % (1 + n // 2))\n        # find the first vacant position in the new array\n        while reordered[pos] != 0:\n            pos += 1\n        # assign the current element to the vacant position\n        reordered[pos] = arr[i]\n    \n    return reordered", "category": "Python"}, {"instruction": "Debug the following Python code", "input": "def f(x):\n    if x > 0:\n        return -1\n    else:\n        return 1", "output": "\"\"\"\nDebug the following Python code\n\ndef f(x):\n    if x > 0:\n        return -1\n    else:\n        return 1\n\"\"\"\n\n# incorrect indentation of the else statement\ndef f(x):\n    if x > 0:\n        return -1\n    else:\n        return 1   # correct indentation", "category": "Python"}, {"instruction": "Write a Python script that reads in a string and checks if it is a palindrome.", "input": "\"Radar\"", "output": "The given string is a palindrome.", "category": "Python"}, {"instruction": "Develop an algorithm to print out the following pattern.", "input": "", "output": "def print_pattern():\n    for i in range(1, 5):\n        for j in range(1,i+1):\n            print(j, end=\" \")\n        print()", "category": "Python"}, {"instruction": "Create a function that calculates the average of given list of numbers.", "input": "[10, 15, 20, 25, 30]", "output": "def mean(nums):\n    sum = 0\n    for i in nums:\n      sum += i\n    return sum / len(nums)", "category": "Python"}, {"instruction": "Create a function to return the largest element from a list.", "input": "[3, 9, 6, 2, 5]", "output": "def largest_element(lst):\n    largest = lst[0]\n    for num in lst:\n        if num > largest:\n            largest = num\n    return largest", "category": "Python"}, {"instruction": "What is the output of the following code?\n\nlist1 = [1, 2, 3]\nlist2 = list1\nlist1[0] = 'a'", "input": "", "output": "The output of the code is ['a', 2, 3] because list2 is just a reference to the same object as list1, so when list1 is changed the changes are reflected in the list2 as well.", "category": "Python"}, {"instruction": "Create a function to merge two dictionaries in Python.", "input": "", "output": "def merge_dicts(dict1, dict2):\n    merged_dict = {**dict1, **dict2}\n    return merged_dict", "category": "Python"}, {"instruction": "Create a function to generate a list of all prime numbers in a given range.", "input": "", "output": "def prime_nums(n): \n    prime_list = [] \n    for i in range(2, n + 1): \n        for j in range(2,i): \n            if (i % j) == 0: \n                break\n        else: \n            prime_list.append(i)\n    return prime_list", "category": "Python"}, {"instruction": "Use the given function to detect if a given string is a palindrome.", "input": "", "output": "def is_palindrome(str):\n    reversedStr = str[::-1]\n    if reversedStr == str:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Use the given function to generate a random password of the specified length.", "input": "", "output": "import random\n\ndef generate_password(length):\n    alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'\n    password = ''\n    for i in range(length):\n        password += random.choice(alphabet)\n    return password", "category": "Python"}, {"instruction": "Write a Python program to print the multiplication table of a number.", "input": "", "output": "def print_mult_table(n):\n    for i in range(1, 11):\n        print('{} x {} = {}'.format(n, i, n*i))", "category": "Python"}, {"instruction": "Replace the \"TODO\" with the appropriate code for implementing a binary search algorithm in Python.", "input": "# TODO", "output": "def binarySearch(arr, target):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == target:\n            return mid\n\n        elif arr[mid] < target:\n            low = mid + 1\n\n        else:\n            high = mid - 1\n\n    return -1", "category": "Python"}, {"instruction": "Generate a code that concatenates a reversed copy of a given string to itself.", "input": "Python", "output": "def concatenate_reversed(s):\n    \"\"\"This function takes a string as input and concatenates a reversed copy of it to itself\"\"\"\n    return s + s[::-1]", "category": "Python"}, {"instruction": "Write a python program to determine whether a given number is a perfect square or not.", "input": "", "output": "def is_perfect_square(n):\n    \"\"\"This function takes a number as input and determines whether it is a perfect square or not\"\"\"\n    i = 1\n    while i*i < n:\n        i += 1\n    if i*i == n:\n        return True\n    return False", "category": "Python"}, {"instruction": "Can you explain the bubble sort algorithm?", "input": "", "output": "Bubble sort is a simple sorting algorithm which iterates through a list and compares adjacent elements, swapping them if they are in the incorrect order. This process is repeated until the list is sorted in its correct order. It is a slow algorithm as it requires multiple iterations of the list, but it is simple to understand and implement.", "category": "Python"}, {"instruction": "Create a code to find all prime numbers between 2 and a given integer.", "input": "", "output": "def find_primes_below(n):\n    \"\"\"This function finds all prime numbers between 2 and a given integer\"\"\"\n    primes = [True] * n\n    primes[0], primes[1] = False, False\n\n    # Find prime numbers\n    for i, is_prime in enumerate(primes):\n      if is_prime:\n        for num in range(i*i, n, i):\n            primes[num] = False\n\n    # Filter out primes\n    return [i for i, prime in enumerate(primes) if prime]", "category": "Python"}, {"instruction": "Write code for sorting an array in-place.", "input": "", "output": "def quicksort(arr):\n    \"\"\"This function takes an array as parameter and sorts it in-place\"\"\"\n    if len(arr) <= 1:\n        return\n    pivot = arr[0]\n    left, right = [], []\n    for i in range(1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    quicksort(left)\n    quicksort(right)\n    arr[:] = left + [pivot] + right", "category": "Python"}, {"instruction": "Create an algorithm that finds the maximum element of an array.", "input": "[2, 3, 5, 1, 4]", "output": "def find_max_element(arr):\n    \"\"\"This function takes an array and returns the maximum element\"\"\"\n    max_el = arr[0]\n    for el in arr:\n        if el > max_el:\n            max_el = el\n    return max_el", "category": "Python"}, {"instruction": "Create a function that takes in a list of strings and returns a new list of only the strings longer than 4 characters.", "input": "['Python', 'JavaScript', 'C++', 'Scala', 'Haskell']", "output": "def filter_long_words(str_list):\n    \"\"\"This function takes a list of strings and returns a new list of only the strings longer than 4 characters\"\"\"\n    result = []\n    for word in str_list:\n        if len(word) > 4:\n            result.append(word)\n    return result", "category": "Python"}, {"instruction": "Generate a function that takes a list of strings and returns a list that includes capitalized version of all strings", "input": "['hello', 'world', 'my', 'name', 'is']", "output": "def capitalize_list(words):\n    \"\"\"This function takes a list of strings and returns a list that \n    includes capitalized version of all strings\n    \"\"\"\n\n    capitalized_list = []\n\n    for word in words:\n        capitalized_word = word.capitalize()\n        capitalized_list.append(capitalized_word)\n    \n    return capitalized_list", "category": "Python"}, {"instruction": "Create a program that prints out an Egyptian multiplication table up to twelve", "input": "", "output": "def print_egyptian_table():\n    print(\"Egyptian Multiplication Table\")\n    print(\"----------------------------\")\n\n    for i in range(1,13):\n        for j in range(1,13):\n            product = i * j\n            print(f\"{i} x {j} = {product}\")\n        print(\"----------------------------\")\n\nif __name__ == \"__main__\":\n    print_egyptian_table()", "category": "Python"}, {"instruction": "Edit the code to add each item to a dictionary.", "input": "def add_to_dict(input_dict, key, value):\n    return", "output": "def add_to_dict(input_dict, key, value):\n    if key in input_dict:\n        input_dict[key].append(value)\n    else:\n        input_dict[key] = [value]\n    return input_dict", "category": "Python"}, {"instruction": "Find all occurrences of a substring in a given string.", "input": "string = \"the cat in the hat\"\nsubstring = \"cat\"", "output": "def find_substring_occurrences(string, substring):\n    occurrence_list = []\n    index = 0\n    while string.find(substring, index) != -1:\n        index = string.find(substring, index)\n        occurrence_list.append(index)\n        index += 1\n    return occurrence_list", "category": "Python"}, {"instruction": "Given a list of lists, find the longest sublist.", "input": "list = [[1,2,3], [2,3,4,5], [4,5,6]]", "output": "def find_longest_sublist(list):\n    longestList = []\n    for subList in list:\n        if len(subList) > len(longestList):\n            longestList = subList\n    return longestList", "category": "Python"}, {"instruction": "Given a string, find the word with the longest length.", "input": "input_string = \"Hello World\"", "output": "def find_longest_word(input_string):\n    longest_word = ''\n    for word in input_string.split():\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word", "category": "Python"}, {"instruction": "Find the most frequent character in an inputted string.", "input": "input_string = \"Hello, world\"", "output": "def find_most_frequent_character(input_string):\n    char_count_dict = {}\n    for char in input_string:\n        if char in char_count_dict.keys():\n            char_count_dict[char] += 1\n        else:\n            char_count_dict[char] = 1\n    max_count = 0\n    max_char = ''\n    for char in char_count_dict.keys():\n        if char_count_dict[char] > max_count:\n            max_count = char_count_dict[char]\n            max_char = char\n    return max_char", "category": "Python"}, {"instruction": "Generate code to generate a random number between 0 and 5, both inclusive.", "input": "", "output": "import random\n\ndef random_num0_to_5():\n    \"\"\"This function generates a random number between 0 and 5, both inclusive\"\"\"\n    return random.randint(0, 5)", "category": "Python"}, {"instruction": "What are the differences between a class and an object?", "input": "", "output": "A class is a blueprint or template for objects. It is a definition of the object\u2019s properties, methods and behaviors. An object is an instance of a class, meaning it takes on the properties, methods and behaviors defined by the class. A class can have multiple objects, and each object can have different values for its properties. Objects allow us to model real-world objects in software.", "category": "Python"}, {"instruction": "Create a Python class called \"Person\" with name and age as attributes.", "input": "", "output": "class Person:\n def __init__(self, name, age):\n     self.name = name\n     self.age = age", "category": "Python"}, {"instruction": "Given a Python dictionary with integer keys, write a function to convert the dictionary into a list of tuples.", "input": "d = {1: 'a', 2: 'b'}", "output": "def dict_to_tuple(d):\n  return list(d.items())", "category": "Python"}, {"instruction": "Create a function which takes a string as an input and checks if it is a palindrome.", "input": "string = \"level\"", "output": "def is_palindrome(string): \n    if string == string[::-1]: \n        return True\n    return False\n  \nstring = \"level\"\nresult = is_palindrome(string)\nprint(result)", "category": "Python"}, {"instruction": "Our program should accept an arbitrary number of integers and output a list of the largest number from each.", "input": "1 2 3 4 5", "output": "def largest_number(nums):\n    largest = []\n    for num in nums:\n        if len(largest) == 0 or num > largest[-1]:\n            largest.append(num)\n    return largest\n\nnums = [1,2,3,4,5]\nresult = largest_number(nums)\nprint(result)", "category": "Python"}, {"instruction": "Create a function to determine the output of", "input": "def my_func(x):\n    if x == 0:\n        return 1\n    else:\n        return x * my_func(x-1)\n\nx = 5", "output": "def my_func(x):\n    if x == 0:\n        return 1\n    else: \n        return x * my_func (x-1) \n\ndef solve(x): \n    return my_func(x)\n\nx = 5\nresult = solve(x)\nprint(result)", "category": "Python"}, {"instruction": "Create a function which takes a list and a value and returns true if the value is present in the list, otherwise false", "input": "list = [1, 2, 3, 4, 5]\nval = 3", "output": "def check_val(lst, val): \n    return val in lst", "category": "Python"}, {"instruction": "Write a Python program to combine the elements of two lists of equal length into a dictionary.", "input": "list1 = ['a', 'b', 'c'] \nlist2 = [1, 2, 3]", "output": "dict = {}\nfor i in range(len(list1)): \n    dict[list1[i]] = list2[i] \n  \nprint(dict)", "category": "Python"}, {"instruction": "Create an algorithm to generate all possible subsets of a given set of elements.", "input": "", "output": "The following algorithm can be used to generate all possible subsets of a given set of elements:\n1. Create an empty list to store the subsets.\n2. Iterate over each element in the given set and for each element:\n     a. Add the element to the list of subsets.\n     b. For each subset in the list:\n        i. Create a new subset with the element added to the existing subset.\n        ii. Add the new subset to the list of subsets.\n3. Return the list of subsets.", "category": "Python"}, {"instruction": "Given two string parameters,  s1 and s2, construct a function that returns the longest common subsequence between the two strings.", "input": "s1 = \"Hello there!\"\ns2 = \"Hi there!\"", "output": "def longest_common_subsequence(s1, s2):\n    # Init matrix \n    num_rows = len(s1) + 1\n    num_cols = len(s2) + 1\n    matrix = [[0 for x in range(num_cols)] for y in range(num_rows)]\n    # Populate matrix\n    for r in range(1, num_rows):\n        for c in range(1, num_cols):\n            if s1[r-1] == s2[c-1]:\n                matrix[r][c] = matrix[r-1][c-1] + 1\n            else:\n                matrix[r][c] = max(matrix[r-1][c], matrix[r][c-1])\n    # Create result\n    result = \"\"\n    r = num_rows - 1\n    c = num_cols - 1\n    while r > 0 and c > 0:\n        if s1[r-1] == s2[c-1]:\n            result = s1[r-1] + result\n            r -= 1\n            c -= 1\n        elif matrix[r-1][c] > matrix[r][c-1]:\n            r -= 1\n        else:\n            c -= 1\n    return result", "category": "Python"}, {"instruction": "Describe an algorithm to sort an array of integers in increasing order.", "input": "[4, 3, 1, 9, 11]", "output": "A simple bubble sort algorithm can be used to sort an array of integers in increasing order. We start at the beginning of the array and compare each pair of adjacent items and swap them if they are in the wrong order. We repeat this process until the array is sorted. For the input array [4, 3, 1, 9, 11], a single pass of bubble sorting the array would go as follows:\n[4, 3, 1, 9, 11] -> [3, 4, 1, 9, 11] -> [3, 1, 4, 9, 11] -> [3, 1, 4, 9, 11] -> [1, 3, 4, 9, 11]. The algorithm is then done since no swaps have been made in the last pass. The final sorted array is [1, 3, 4, 9, 11].", "category": "Python"}, {"instruction": "Create an API endpoint for handling user authentication.", "input": "Endpoint URL: www.example.com/auth", "output": "@app.route(\"/auth\", methods=['POST'])\ndef auth():\n    data = request.get_json()\n    username = data.get(\"username\")\n    password = data.get(\"password\")\n\n    user = User.check_user_auth(username, password)\n    if user:\n        session['username'] = username\n        return jsonify(success=True)\n    else:\n        return jsonify(success=False)", "category": "Python"}, {"instruction": "Write a function that calculates the sum of the digits of a number.", "input": "Number: 13", "output": "def sum_of_digits(n): \n    # handle negative numbers \n    n = abs(n)\n\n    # base case when n has only one digit\n    if n < 10: \n        return n \n\n    # calculate the sum of the digits recursively  \n    else: \n        return (n % 10 + sum_of_digits(int(n / 10))) \n\nprint(sum_of_digits(13))", "category": "Python"}, {"instruction": "Complete the function so that it returns the minimum element in the provided list.", "input": "def min_element(lis):\n    # TODO: write code to find and return the minimum element in the list", "output": "def min_element(lis):\n    # set min to first element in the list\n    min = lis[0]\n  \n    # iterate over the list and compare each element to \n    # the current minimum. If a smaller element is found, \n    # update min. \n    for x in lis:\n        if x < min: \n            min = x\n  \n    # return min\n    return min", "category": "Python"}, {"instruction": "Complete this function to add two matrices.", "input": "def add_matrices(a, b):\n    # TODO: write code to add two matrices\n    # matrix a and b have the same dimensions", "output": "def add_matrices(a, b):\n    # create a new empty matrix, use the same dimensions as a and b\n    result = [[0 for x in range(len(a[0]))] for y in range(len(a))]\n\n    # iterate over a and b to complete the matrix addition \n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            result[i][j] = a[i][j] + b[i][j]\n\n    return result", "category": "Python"}, {"instruction": "Run the same transormation to the text using the provided code.", "input": "Text: \"He was very happy!\"\nCode: \ntext = text.lower()\ntext = text.replace('!', '.')", "output": "\"he was very happy.\"", "category": "Python"}, {"instruction": "Write the output of this Python code.", "input": "a = 10\nb = 5\nc = 6\n\nprint(a + b * c)", "output": "56", "category": "Python"}, {"instruction": "Write a function in Python to calculate the Euclidean Distance between two points.", "input": "point1 = [-1, 0]\npoint2 = [4, 7]", "output": "def euclidean_distance(point1, point2):\n from math import sqrt\n return sqrt(sum([(x - y)**2 for x, y in zip(point1, point2)]))\n\ndistance = euclidean_distance(point1, point2)\nprint(distance)", "category": "Python"}, {"instruction": "Create a Python function to insert a new element in a list at the given index.", "input": "list1 = [1, 2, 3, 4, 5]\nindex = 3\nelement = 6", "output": "def insert_element(lst, idx, element):\n lst.insert(idx, element)\n return lst\n\nlist1 = insert_element(list1, index, element)\nprint(list1)", "category": "Python"}, {"instruction": "Write a function in Python to convert JSON data into a Python dictionary.", "input": "json_data = '{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}'", "output": "import json\n\ndef json_to_dict(json_data):\n return json.loads(json_data)\n\ndata = json_to_dict(json_data)\nprint(data)", "category": "Python"}, {"instruction": "Edit the given Python code to make the algorithm run faster.", "input": "def slow_algo(n):\n    result = 0\n    for i in range(n):\n        result += i\n    return result", "output": "def fast_algo(n):\n    result = (n * (n + 1))// 2\n    return result", "category": "Python"}, {"instruction": "Create a Python class with the same content as a JSON string.", "input": "myjson_string = '{\"name\": \"John\", \"age\": 20}'", "output": "import json\n\nclass Person:\n def __init__(self, json_string):\n  data = json.loads(json_string)\n  self.name = data['name']\n  self.age = data['age']\n\nmyjson_string = '{\"name\": \"John\", \"age\": 20}'\nperson = Person(myjson_string)\nprint(person.name, person.age)", "category": "Python"}, {"instruction": "Create a Python program to remove the characters from specific index within a string.", "input": "mystring = \"Hello, World!\"\nindex = 5", "output": "mystring = \"Hello, World!\"\nindex = 5\n\nresult = mystring[:index] + mystring[index+1:]\n\nprint(\"Result after removing characters from index {}: {}\".format(index, result))", "category": "Python"}, {"instruction": "Write a code snippet using Python to print the following sentence \"Programming is fun!\".", "input": "", "output": "print(\"Programming is fun!\")", "category": "Python"}, {"instruction": "Write a Python code snippet to calculate the area of a triangle with side lengths 3, 4, and 5.", "input": "", "output": "def area(a, b, c):\n    s = (a + b + c) / 2\n    return (s*(s-a)*(s-b)*(s-c)) ** 0.5\n\nprint(area(3, 4, 5)) # 6.0", "category": "Python"}, {"instruction": "What is the purpose of an immutable object in Python?", "input": "", "output": "The purpose of an immutable object in Python is to make sure that once an object is created, it cannot be modified. This is useful when data must not change between multiple parts of a program. Immutable objects can also help ensure thread safety by preventing different threads from modifying the same data.", "category": "Python"}, {"instruction": "Edit the code to check whether the given number is a triangle number.", "input": "def is_triangle_number(num):\n    return num == num", "output": "def is_triangle_number(num):\n    number = 0\n    for i in range(num+1):\n        number += i\n        if number == num:\n            return True\n    return False", "category": "Python"}, {"instruction": "Create a Python function to calculate the area of a triangle using Heron\u2019s formula.", "input": "a = 4\nb = 5\nc = 7", "output": "def triangle_area(a, b, c):\n    \"\"\"Calculate the area of a triangle using Heron's formula\"\"\"\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\n\nprint(triangle_area(a, b, c))", "category": "Python"}, {"instruction": "Find the number of words in a given sentence using a Python function.", "input": "sentence = \"This is a test sentence\"", "output": "def word_count(sentence):\n  return len(sentence.split())", "category": "Python"}, {"instruction": "Create a function to extract the top 10 keywords from a given text.", "input": "text = \"This is some text that I am using to test the extractKeywords function.\"", "output": "import nltk\n\ndef extractKeywords(text):\n    tokens = nltk.word_tokenize(text)\n    tags = nltk.pos_tag(tokens)\n    keywords = [word for word,pos in tags \n            if (pos == 'NN' or pos == 'NNP' or pos == 'NNS' or pos == 'NNPS')]\n    freqs = nltk.FreqDist(keywords)\n    top_ten = freqs.most_common(10)\n    return top_ten\n \nif __name__ == \"__main__\": \n    text = \"This is some text that I am using to test the extractKeywords function.\"\n    top_ten = extractKeywords(text)\n    print(top_ten)", "category": "Python"}, {"instruction": "Create a function to print all permutations of a string without duplicates.", "input": "string = \"abc\"", "output": "def permutations(string):\n    res = set()\n    if len(string) == 1:\n        res.add(string)\n    else:\n        for i, char in enumerate(string):\n            for perm in permutations(string[:i], string[i+1:]):\n                res.add(char + perm)\n    return res\n\n# Output\n{'abc', 'acb', 'bac', 'bca', 'cab', 'cba'}", "category": "Python"}, {"instruction": "Create a program to create a dictionary with words and their frequencies from a given sentence.", "input": "sentence = \"Python is an easy, powerful language with a simple syntax and high readability\"", "output": "def create_dict(sentence):\n    words = sentence.split()\n    res = {}\n    for word in words:\n        res[word] = words.count(word)\n    return res\n\n# Output\n{'Python': 1, 'is': 1, 'an': 1, 'easy,': 1, 'powerful': 1, 'language': 1, 'with': 1, 'a': 1, 'simple': 1, 'syntax': 1, 'and': 1, 'high': 1, 'readability': 1}", "category": "Python"}, {"instruction": "Convert the following csv data into a JSON object.", "input": "id,name,age\n1,John,12\n2,Jack,15", "output": "import json\n\ncsv_data = '''id,name,age\n1,John,12\n2,Jack,15'''\n\n# Split the CSV data into individual lists.\ncsv_rows = [row.strip().split(',') for row in csv_data.split('\\n')]\n# Create a dictionary from the list of values.\ndata_objects = [dict(zip(csv_rows[0], row)) for row in csv_rows[1:]]\n# Convert the dictionary to a JSON object.\njson_data = json.dumps(data_objects)\nprint(json_data)", "category": "Python"}, {"instruction": "Delete redundant if-else statements from the following code.", "input": "if x < 0:\n    result = 0\nelif x == 0:\n    result = 0\nelif x == 1:\n    result = 1\nelse:\n    result = 2", "output": "if x < 0:\n    result = 0\nelif x in [0, 1]:\n    result = x\nelse:\n    result = 2", "category": "Python"}, {"instruction": "How would you make the following function more efficient?", "input": "def find_longest_word(words):\n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word", "output": "def find_longest_word(words):\n    longest_word = words[0]\n    for word in words[1:]:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word", "category": "Python"}, {"instruction": "Create a function which takes two lists and outputs all the common elements.", "input": "list1=[2,4,6,8]\nlist2=[1,2,3,4]", "output": "def common_elements(list1, list2):\n    list3 = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                list3.append(i)\n    return list3", "category": "Python"}, {"instruction": "Create a function in Python to multiply two matrices.", "input": "matrixA = [[1, 2], [3, 4]], matrixB = [[5, 6], [7, 8]]", "output": "def multiplyMatrix(A, B):\n    rowsA = len(A)\n    columnsA = len(A[0])\n    rowsB = len(B)\n    columnsB = len(B[0])\n    \n    if columnsA != rowsB:\n        print(\"Cannot multiply\")\n        return\n    \n    result = [[0 for row in range(columnsB)] for col in range(rowsA)]\n    \n    # Compute matrix multiplication\n    for i in range(rowsA):\n        for j in range(columnsB):\n            for k in range(columnsA):\n                result[i][j] += A[i][k] * B[k][j]\n    \n    return result\n\nA = [[1, 2], [3, 4]]\nB = [[5, 6], [7, 8]]\n\n print(\"Result:\")\n result = multiplyMatrix(A, B) \n  \nfor i in result: \n    print(i)", "category": "Python"}, {"instruction": "Generate a random number between 0-100 in Python.", "input": "", "output": "import random \n  \n#Generate a random number between 0-100\nrandomNum =  random.randint(0, 100) \nprint (\"Random number:\", randomNum)", "category": "Python"}, {"instruction": "Generate an array of numbers from 0-10 in Python.", "input": "", "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Modify the given python program to accept an input string and output the length of that string.", "input": "def func():\n    print(\"Hello World!\")", "output": "def func(s):\n    print(\"Length of the string is: \" + str(len(s)))", "category": "Python"}, {"instruction": "Create a function to calculate the sum of the Triangle Series up to the given number n.", "input": "", "output": "def sum_triangle(n): \n    if n<=0: \n        return 0\n    res = (n * (n + 1)) // 2\n    return res", "category": "Python"}, {"instruction": "Create a function in Python to find the highest common factor (HCF) of two numbers.", "input": "a = 30 / b = 12", "output": "def hcf(a, b):\n    j = min(a,b)\n    hcf = 1\n    for i in range(2, j+1):\n        if(a%i == 0 and b%i == 0):\n            hcf = i\n    \n    return hcf", "category": "Python"}, {"instruction": "Generate a random string of 5 characters containing a-z and 0-9.", "input": "", "output": "import string \nimport random\n  \n# Get all ASCII uppercase letters\nstring_all = string.ascii_letters + string.digits\n  \n# Get random 5 upper case letters\nrandom_string = ''.join(random.choice(string_all) for i in range(5))\nprint(random_string)\n\n# Ex: ZV7b1", "category": "Python"}, {"instruction": "Write a function to search for an element within a linked list.", "input": "", "output": "def search(head, target): \n    curr = head\n    while (curr!= None): \n        if (curr.data == target): \n            return curr.data \n        curr = curr.next\n    return -1", "category": "Python"}, {"instruction": "Update the following code, to use Python's modern type hint annotation.", "input": "def my_func(list):\n    '''Some docstring'''\n    result = 0\n    for l in list:\n        result += l\n    return result", "output": "def my_func(list: list) -> int:\n    '''Some docstring'''\n    result = 0\n    for l in list:\n        result += l\n    return result", "category": "Python"}, {"instruction": "Translate the following word problem into Python code.", "input": "Gary has 45 dollars, John has 11 dollars and Sam has 3 dollars. They decide to split their money equally.", "output": "gary_share = 45 // 3\njohn_share = 11 // 3\nsam_share = 3 // 3\ntotal_share = gary_share + john_share + sam_share\n\nprint('Gary has {} dollars, John has {} dollars and Sam has {} dollars. The each get {} dollars in total.'.format(gary_share, john_share, sam_share, total_share))", "category": "Python"}, {"instruction": "Write a function to create a frequency table from a list of integers.", "input": "list = [1, 2, 3, 1, 4, 5, 5, 2]", "output": "def create_freq_table(lst): \n    freq_table = {} \n    for item in lst: \n        if (item in freq_table): \n            freq_table[item] += 1\n        else: \n            freq_table[item] = 1\n  \n    return freq_table", "category": "Python"}, {"instruction": "Write a Python program to check if a given number is divisible by 5 and 11 or not?", "input": "", "output": "def checkDivisibility(n):\n    if n % 5 == 0 and n % 11 == 0: \n        print(\"It is divisible by 5 and 11.\")\n    else: \n        print(\"It is not divisible by 5 and 11.\")\n     \n# Driver code \nn = 55\ncheckDivisibility(n)", "category": "Python"}, {"instruction": "Modify the following code to turn it into an Insertion Sort algorithm.", "input": "def sort_numbers(arr):\n    pass", "output": "def insertion_sort(arr): \n    for i in range(1, len(arr)):\n        x = arr[i]\n        j = i-1\n        while j >= 0 and arr[j] > x:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = x\n    return arr", "category": "Python"}, {"instruction": "Modify the following code so that it returns the lowest common multiple of two given numbers?", "input": "def lowest_common_multiple(x, y):\n    pass", "output": "def lowest_common_multiple(x, y): \n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while(True): \n        if((greater % x == 0) and (greater % y == 0)): \n            lcm = greater \n            break\n        greater += 1\n    return lcm", "category": "Python"}, {"instruction": "Create a stack data structure using Python.", "input": "", "output": "class Stack: \n  \n    def __init__(self): \n        self.stack = []\n    \n    def push(self, item):\n        self.stack.append(item)\n    \n    def is_empty(self):\n        return self.stack == []\n  \n    def pop(self): \n        if self.is_empty():\n            return None\n          \n        return self.stack.pop()", "category": "Python"}, {"instruction": "Implement a binary search algorithm using Python.", "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "def binary_search(nums, target): \n    start = 0\n    end = len(nums) - 1\n\n    while start <= end:\n        mid = start + (end - start)//2\n\n        if nums[mid] == target:\n            return mid\n\n        if nums[mid] > target:\n            end = mid - 1\n\n        else: \n            start = mid + 1\n\n    return -1", "category": "Python"}, {"instruction": "Write a function to perform regex match in Python.", "input": "", "output": "def regex_match(string, pattern):\n  return re.match(pattern, string)", "category": "Python"}]
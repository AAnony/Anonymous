[{"instruction": "Write a Python code to generate Fibonacci sequence up to 'n' numbers, where 'n' is a given integer.", "input": "", "output": "def generateFib(n): \n    fib = [0, 1] \n    while len(fib) < n : \n        fib.append(fib[-1] + fib[-2]) \n          \n    return fib[:n]", "category": "Python"}, {"instruction": "Convert the Python code using the range function in the for loop to a list comprehension statement.", "input": "my_list = []\nfor i in range(10):\n    my_list.append(i)", "output": "my_list = [i for i in range(10)]", "category": "Python"}, {"instruction": "Create a variable in Python to store 10 multidimensional arrays.", "input": "", "output": "arrays = [[[1,2], [3,4]],\n          [[5,6], [7,8]],\n          [[9,10], [11,12]],\n          [[13,14], [15,16]],\n          [[17,18], [19,20]],\n          [[21,22], [23,24]],\n          [[25,26], [27,28]],\n          [[29,30], [31,32]],\n          [[33,34], [35,36]],\n          [[37,38], [39,40]]]", "category": "Python"}, {"instruction": "Create a Python Exception to handle Nonetype Error.", "input": "", "output": "try:\n    my_list = [1, 2, 3]\n    my_list[3]\nexcept TypeError:\n    print(\"Error: Nonetype Found\")", "category": "Python"}, {"instruction": "Write a multi-line comment in Python describing what the following program does.", "input": "def hello():\n    print(\"Hello World\")", "output": "\"\"\"\nThis program prints \"Hello World\" when executed. \nIt defines a function called \"hello\" that does not take any parameters \nand simply prints out \"Hello World\" when it is called.\n\"\"\"", "category": "Python"}, {"instruction": "Create a function that takes a list and returns a tuple containing the maximum and minimum values of the list.", "input": "[1, 4, 7, 3, 8]", "output": "def maxMin(arr):\n    # Initialize the maximum and the minimum value\n    maxi = arr[0] \n    mini = arr[0] \n  \n    # Iterate each element in arr to find the maximum and minimum\n    for i in range(1, len(arr)): \n        if arr[i] > maxi: \n            maxi = arr[i] \n        elif arr[i] < mini: \n            mini = arr[i]\n  \n    return (maxi, mini)", "category": "Python"}, {"instruction": "Create a function to get the intersection of two sorted arrays", "input": "arr1 = [1, 3, 4, 5, 6] \narr2 = [3, 5, 7, 8]", "output": "def intersection(arr1, arr2):\n    # Initialize a result array\n    res = [] \n\n    # Iterate each element of the first array and find in second array\n    for i in range(len(arr1)): \n        for j in range(len(arr2)):\n            # If element is present then append it to result array\n            if arr1[i] == arr2[j]: \n                res.append(arr1[i])\n  \n    return res", "category": "Python"}, {"instruction": "Create a regex pattern in Python that can extract URL from a text string.", "input": "text = \"Visit http://www.example.com for more information.\"", "output": "import re\n\npattern = re.compile(r'(https?://\\S+)')\nurls = re.findall(pattern, text)", "category": "Python"}, {"instruction": "Given a list of integers, determine the sum of all of elements in the list.", "input": "[3, 4, 5, 6]", "output": "def get_sum(nums):\n    total_sum = 0\n    for num in nums:\n        total_sum += num\n    return total_sum", "category": "Python"}, {"instruction": "Develop a machine learning model in Python to predict the credit risk of a customer based on their bank transaction data.", "input": "<100 rows of bank transaction data>", "output": "#import necessary models\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n#split data into train and test sets\nx_train, x_test, y_train, y_test = train_test_split(bank_data, credit_risk, test_size = 0.3)\n\n#create the machine learning model\nlr_model = LogisticRegression()\n\n#train the model\nlr_model.fit(x_train, y_train)", "category": "Python"}, {"instruction": "Generate a random password using a given string of characters.", "input": "String: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()\"", "output": "\"\"\"\nGenerate a random password using a given string of characters\n\"\"\"\n\nimport random \n\ndef generate_password(string):\n    password = ''\n    for _ in range(16):\n        password += random.choice(string)\n    return password\n\nif __name__ == '__main__':\n    string = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()\"\n    print(generate_password(string))", "category": "Python"}, {"instruction": "Write a function in Python to remove the element with the value of \u2018apple\u2019 from the list.", "input": "fruits =[\"banana\", \"apple\", \"mango\", \"orange\"]", "output": "def removeValue(fruits, elem):\n    for e in fruits:\n        if e == elem:\n            fruits.remove(e)\n            break\n\nremoveValue(fruits, \"apple\")\n\nprint(fruits) # ['banana', 'mango', 'orange']", "category": "Python"}, {"instruction": "Use the input to write a loop in Python to print each product details.", "input": "products = [\n  { \"name\": \"iPhone XS\", \"price\": 1000 },\n  { \"name\": \"iPhone XR\", \"price\": 800 },\n  { \"name\": \"iPad Air\", \"price\": 600 }\n]", "output": "for product in products:\n    print(\"Product name: \" + product['name'] + \", Price: \" + str(product['price']))\n\n# Output\n# Product name: iPhone XS, Price: 1000\n# Product name: iPhone XR, Price: 800\n# Product name: iPad Air, Price: 600", "category": "Python"}, {"instruction": "Find the length of a Python list.", "input": "List = [1,2,3]", "output": "List = [1,2,3]\n\nlength = len(List)\nprint(length)\n\n# Output\n3", "category": "Python"}, {"instruction": "Generate a random 2D array with the given dimensions.", "input": "Rows: 5 \nColumns: 3", "output": "import numpy as np\n\nrows = 5\ncolumns = 3\n\narr = np.random.randint(0, 11, size=(rows, columns)) \n\nprint(arr)", "category": "Python"}, {"instruction": "Write a Python program to insert a given string into another string at a certain index.", "input": "Variable String = \"The quick brown fox\" \nString To Insert = \"jumps over\"\nIndex = 16", "output": "The quick brown jumps over fox", "category": "Python"}, {"instruction": "Generate a random letter from the string provided.", "input": "string = \"Hello World\"", "output": "import random\n\nrandom_letter = random.choice(string) # Output: a randomly generated letter from the string", "category": "Python"}, {"instruction": "Determine if the word \"hello\" is present in the provided list.", "input": "words = [\"hi\", \"goodbye\", \"apple\", \"orange\"]", "output": "if \"hello\" in words:\n  print(\"Yes, the word hello is present in the provided list.\")\nelse:\n  print(\"No, the word hello is not present in the provided list.\")", "category": "Python"}, {"instruction": "Write a code snippet to find all the elements in a list that are greater than a specified number.", "input": "lst = [1, 5, 10, 15, 27]\nk = 10", "output": "# Initializing an empty list\nnew_lst = []\n\n# Iterating over the given list\nfor elem in lst:\n  # Appending elements that are greater than 10\n  if elem > k:\n    new_lst.append(elem)\n\n# Printing corresponding result \nprint(new_lst) # Output: [15, 27]", "category": "Python"}, {"instruction": "Rewrite the following code in a more descriptive style and make it easier to read.", "input": "for i in range(1, n):\n    for j in range(1, n):\n        if i + j == n:\n            print(i, j)", "output": "for i in range(1, n):\n    for j in range(1, n):\n        # check if the sum of i and j is equal to n\n        if (i + j) == n:\n            print(i, j)", "category": "Python"}, {"instruction": "Create a Python code snippet to identify the root cause of a Software Bug.", "input": "", "output": "def find_causes(data):\n    # identify the root cause of the bug\n\n    causes = set()\n    for line in data:\n        for cause in line.get('causes', []):\n            causes.add(cause)\n\n    # filter insignificant causes\n    causes = [cause for cause in causes if cause not in insignificant_causes]\n\n    return causes", "category": "Python"}, {"instruction": "Write a function in Python to generate a list with the numbers from 0 to the provided number.", "input": "num = 10", "output": "def generateList(n):\n    list = []\n    for i in range(n+1):\n        list.append(i)\n    return list\n\nprint(generateList(num)) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Write a TensorFlow code snippet to build a convolutional neural network and display the results of the training process.", "input": "", "output": "import tensorflow as tf\n\n# define a convolutional neural network\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# compile and fit model\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=5)\n\n# display results\nmodel.evaluate(x_test, y_test)\n['loss', 'accuracy']\n[0.32971992206192017, 0.8856600217819214]", "category": "Python"}, {"instruction": "Rewrite the following code so that it is easier to read and understand.", "input": "def is_string_palindrome(str):\n    revstr=str[::-1] \n    if revstr==str: \n            return true \n    else: \n            return false", "output": "def is_string_palindrome(str):\n    reverse_str = str[::-1] \n    if reverse_str == str:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Design a Python program to find the longest increasing subsequence in a given array.", "input": "", "output": "def long_increasing_subsequence(arr):\n    # Number of items in given array\n    n = len(arr)\n \n    # Initialize 'lengths' values for all indices\n    lengths = [1]*n\n \n    # Find the longest increasing subsequence\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i] and lengths[j] + 1 > lengths[i]:\n                lengths[i] = lengths[j] + 1\n \n    return lengths", "category": "Python"}, {"instruction": "Create a Python function that takes an array of numbers and returns a string that represent the mean and median of the numbers.", "input": "[1, 2, 3, 4, 5]", "output": "def get_mean_and_median(numbers):\n    mean = sum(numbers)/len(numbers)\n    sorted_numbers = sorted(numbers)\n    index = int(len(sorted_numbers) / 2)\n    median = sorted_numbers[index]\n    return \"Mean: {}, Median: {}\".format(mean, median)", "category": "Python"}, {"instruction": "Given a matrix of X, Y coordinates, write a Python function that returns the angle between the two points.", "input": "X1 = 2\nY1 = 3\nX2 = 7\nY2 = 10", "output": "import math\n\ndef calculate_angle(X1, Y1, X2, Y2):\n    deltaY = Y2 - Y1\n    deltaX = X2 - X1\n    angleInDegrees = (math.atan2(deltaY, deltaX)) * 180 / math.pi\n    return angleInDegrees", "category": "Python"}, {"instruction": "You will be given a list of strings as input. Write a program to print out the longest string in the list.", "input": "['Hello', 'World', 'I', 'Am', 'Here']", "output": "def get_longest_str(str_list):\n    longest_str = str_list[0]\n    for str in str_list:\n        if len(str) > len(longest_str):\n            longest_str = str\n    \n    return longest_str", "category": "Python"}, {"instruction": "You will be given a list of numbers as input. Write a program to remove the duplicates and return only the distinct values.", "input": "[1, 1, 2, 3, 4, 4, 5]", "output": "def remove_duplicates(arr):\n    no_duplicates = []\n    for i in arr:\n        if i not in no_duplicates:\n            no_duplicates.append(i)\n    return no_duplicates", "category": "Python"}, {"instruction": "Create a program to find out the most frequent letter in a sentence.", "input": "The quick brown fox jumps over the lazy dog.", "output": "def most_frequent_letter(sentence):\n    freq_dict = {}\n    for letter in sentence:\n        if letter in freq_dict:\n            freq_dict[letter] += 1\n        else:\n            freq_dict[letter] = 1\n    \n    most_freq_letter = max(freq_dict, key = freq_dict.get)\n    return most_freq_letter", "category": "Python"}, {"instruction": "Write a function to create a list with all the prime numbers in the range of 0 to 100.", "input": "", "output": "def create_prime_list(upper_limit):\n    prime_list = []\n    for num in range(2,upper_limit+1):\n        flag=0\n        for i in range(2,num):\n            if num % i == 0:\n                flag=1\n        if flag==0:\n            prime_list.append(num)\n    return prime_list", "category": "Python"}, {"instruction": "Parse the following XML data using Python.", "input": "<students>\n    <student>\n        <name>John</name>\n        <age>24</age>\n    </student>\n    <student>\n        <name>Jack</name>\n        <age>22</age>\n    </student>\n    <student>\n        <name>Sam</name>\n        <age>25</age>\n    </student>\n</students>", "output": "import xml.etree.ElementTree as ET\n\nroot = ET.fromstring('<students>  <student>    <name>John</name>    <age>24</age>  </student>  <student>    <name>Jack</name>    <age>22</age>  </student>  <student>    <name>Sam</name>    <age>25</age>  </student></students>')\n\nstudents = root.findall('student')\nfor student in students:\n    name = student.find('name').text\n    age = student.find('age').text\n    print(name, age)", "category": "Python"}, {"instruction": "Use a loop to find the average of all given numbers.", "input": "[1, 2, 3, 4, 5]", "output": "def find_avg(nums):\n total = 0\n for num in nums:\n  total += num\n\nreturn total / len(nums)\n\nlist = [1, 2, 3, 4, 5]\nprint(find_avg(list))\n# Output: 3.0", "category": "Python"}, {"instruction": "Generate a string representation of a binary tree.", "input": "", "output": "def tree_str(root):\n    if root is None:\n        return ''\n\n    left_str = tree_str(root.left)\n    right_str = tree_str(root.right)\n\n    if left_str != '' and right_str != '':\n        return '(' + left_str + ')' + str(root.val) + '(' + right_str + ')'\n    if left_str != '' and right_str == '':\n        return '(' + left_str + ')' + str(root.val)\n    if left_str == '' and right_str != '':\n        return  str(root.val) + '(' + right_str + ')'\n    else:\n        return str(root.val)", "category": "Python"}, {"instruction": "Explain what a while loop is.", "input": "", "output": "A while loop is a control flow statement that repeats a set of instructions while a certain condition is true. It consists of a loop condition and a set of instructions that are to be executed as long as the condition remains true. The loop condition is evaluated first, and if it returns true then the instruction set is executed, after which the condition is evaluated again. This process is repeated until the condition returns false, at which point the loop terminates and execution continues at the statement after the loop.", "category": "Python"}, {"instruction": "Create an algorithm to find the median of a given list of numbers.", "input": "[2, 5, 7, 4, 3]", "output": "def find_median(list_of_numbers):\n    sorted_list = sorted(list_of_numbers)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        median1 = sorted_list[length // 2]\n        median2 = sorted_list[(length // 2) - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = sorted_list[length // 2]\n    return median", "category": "Python"}, {"instruction": "Write a method that produces a random password with the specified number of characters.", "input": "", "output": "import string\nimport random\n\ndef generate_password(characters):\n  password = ''\n\n  for _ in range(characters):\n    password += random.choice(string.ascii_letters + string.digits)\n\n  return password", "category": "Python"}, {"instruction": "Write a function to convert a 3 letter acronym to its full form.", "input": "Acronym: \"GDP\"", "output": "\"\"\"\nConvert a 3 letter acronym to its full form\n\"\"\"\n\ndef acronym_to_full_form(acronym):\n    acronyms = {\n        'GDP': 'Gross Domestic Product',\n        'CIA': 'Central Intelligence Agency',\n        'NASA': 'National Aeronautics and Space Administration'\n    }\n\n    return acronyms[acronym]\n\nif __name__ == '__main__':\n    acronym = \"GDP\"\n    print(acronym_to_full_form(acronym))", "category": "Python"}, {"instruction": "Extract a numeric value from the following string in Python.", "input": "myString = \"The length of the tree is 25 meters\"", "output": "import re\n\nnewString = re.findall(r\"[\\d.]+\", myString)\nprint(newString[0]) # 25", "category": "Python"}, {"instruction": "Find the 5th element of the list in Python.", "input": "list = [12, 34, 87, 90, 80, 21]", "output": "element = list[4]\nprint(element) # 80", "category": "Python"}, {"instruction": "How can you create a for loop in Python to loop through a list?", "input": "", "output": "# loop through a list\nlist = [1, 2, 3, 4, 5]\nfor item in list:\n    print(item)", "category": "Python"}, {"instruction": "Describe the basics of programming for a beginner.", "input": "", "output": "Programming is the process of writing computer code to create programs that can perform specific tasks or operations. It involves using a programming language to give instructions to a computer to carry out a specific task. A program can involve calculations, data processing, and more complex tasks such as simulation, game-playing, and artificial intelligence. A programmer typically communicates their code in a language that can be understood by the computer, such as HTML, Python, or Java. Programming can be a rewarding and challenging experience, as programmers are often creating something that did not previously exist.", "category": "Python"}, {"instruction": "Rewrite the following Python function so it returns the opposite of the original output.", "input": "def returnsThree() :\n return 3", "output": "def returnsThree():\n    return -3", "category": "Python"}, {"instruction": "What is a common use case for a ternary operator?", "input": "", "output": "A common use case for a ternary operator is to use it as a shortcut for an if/else statement. A ternary operator can be used to quickly assign the result of a boolean expression to a variable. For example, the following code is similar to an if/else statement:\n\na = 5\nb = 10\nresult = a if a > b else b\n\nIn this example, if a is greater than b, then result will be assigned the value of a. Otherwise, it will be assigned the value of b.", "category": "Python"}, {"instruction": "Reverse an array of integers using Python.", "input": "arr = [1, 2, 3, 4, 5]", "output": "arr = [1, 2, 3, 4, 5]\n \n# reversing the array\narr.reverse()\n \n# print the reversed array\nprint(arr)\n \n# Output:\n[5, 4, 3, 2, 1]", "category": "Python"}, {"instruction": "Construct a basic data structure to store a dictionary of words and their definitions.", "input": "", "output": "class WordDictionary(object): \n    def __init__(self): \n        self.words = {} \n\n    def add_definition(self, word, definition): \n        self.words[word] = definition\n\n    def lookup_definition(self, word): \n        if word in self.words: \n            return self.words[word]\n        else: \n            return None\n\n    def delete_word(self, word): \n        del self.words[word]", "category": "Python"}, {"instruction": "Format the following array of numbers using Python.", "input": "arr = [3, 1, 4, 5, 9, 8]", "output": "arr = [3, 1, 4, 5, 9, 8]\n\n# sorting the array\narr.sort()\n\n# print the array\nprint(arr)\n\n# Output:\n[1, 3, 4, 5, 8, 9]", "category": "Python"}, {"instruction": "Write a function to check if the given string `str1` is a permutation of the string `str2`", "input": "str1 = 'program'\nstr2 = 'gramopr'", "output": "def is_permutation(str1, str2): \n    \"\"\"\n    Function to check if the given string str1 is a permutation of the string str2 \n    \n    Parameters: \n    str1 (str): first string \n    str2 (str): second string \n    \n    Returns: \n    bool: True if str1 is a permutation of str2, False otherwise\n    \"\"\"\n    if (len(str1) != len(str2)): \n        return False\n    else: \n        count = [0] * 128\n        for i in range(len(str1)):\n            count[ord(str1[i])] +=1\n            count[ord(str2[i])] -=1\n        for i in range(128):\n            if count[i] != 0: \n                return False\n        return True", "category": "Python"}, {"instruction": "Create a TensorFlow 2.0 program that takes a 3D array and normalizes the values by dividing each element by the sum of all elements in the array.", "input": "", "output": "import numpy as np \nimport tensorflow as tf\n\n# Function to normalize a 3D array  \n# by dividing each element by the sum of all elements \ndef normalize3d(arr): \n   \n    # Shape of the array \n    m, n, o = arr.shape\n   \n    # Calculating sum \n    sum_ = np.sum(arr) \n      \n    # Initializing the output array \n    output = np.empty_like(arr) \n      \n    # calculating the normalized value \n    # and storing in output array \n    for i in range(m): \n        for j in range(n): \n            for k in range(o): \n                    output[i][j][k] = arr[i][j][k]/sum_ \n                      \n    # returning the normalized array \n    return output \n\n# Initializing the array\narr = np.random.randint(1, 10, (2, 2, 4))\n\n# Using tensorflow method\noutput = tf.expand_dims(tf.constant(arr, dtype=tf.float32), axis=-1) / tf.math.reduce_sum(tf.constant(arr))\n\n# Printing the normalized array using both methods\nprint(normalize3d(arr))\nprint(output)", "category": "Python"}, {"instruction": "Input two arrays and write a program to merge the two given sorted arrays into one sorted array.", "input": "arr1 = [3, 5, 7]\narr2 = [2, 4]", "output": "def merge_arrays(arr1, arr2):\n    # creating a new list to store the result\n    merged_arr = []\n    # looping over the two arrays\n    for i in range(len(arr1)):\n        merged_arr.append(arr1[i])\n    for i in range(len(arr2)):\n        merged_arr.append(arr2[i])\n    # sorting function to sort the merged array\n    merged_arr.sort()\n    return merged_arr\n\n# Driver code\nnew_arr = merge_arrays(arr1, arr2)\n\n# to print the sorted merged array\nprint(new_arr)\n# Output: [2, 3, 4, 5, 7]", "category": "Python"}, {"instruction": "Input a sentence with repeated words and write a Python code to remove all the repeated words.", "input": "sentence = 'The the cat cat sat sat on on the the mat'", "output": "def remove_repeated_words(sentence):\n    words = sentence.split(\" \")\n    result = []\n\n    for word in words:\n        if word not in result:\n            result.append(word)\n    return \" \".join(result)\n\nprint(remove_repeated_words(sentence))\n# Output: The cat sat on the mat", "category": "Python"}, {"instruction": "Input an array and remove all duplicates from the given array.", "input": "arr = [1, 2, 3, 1, 2]", "output": "def remove_duplicates(arr): \n    result = [] \n    for item in arr: \n        if item not in result: \n            result.append(item) \n    return result\n\nprint(remove_duplicates(arr)) \n# Output: [1, 2, 3]", "category": "Python"}, {"instruction": "Design a Python program which prints the elements in reverse order", "input": "my_list = [1,2,3,4,5]", "output": "def print_reverse(my_list):\n    for i in range(len(my_list)-1, -1, -1):\n        print(my_list[i])\n\nprint_reverse(my_list)", "category": "Python"}, {"instruction": "Create a program in Python which takes any string as an input and prints the number of each of its characters", "input": "hello", "output": "character_count = {'h':1, 'e':1, 'l':2, 'o':1}", "category": "Python"}, {"instruction": "Using this list, write a Python program to print out all the duplicate elements", "input": "my_list = [1, 2, 3, 2, 4, 3]", "output": "duplicate = []\n\nfor value in my_list:\n    if my_list.count(value) > 1:\n        if value not in duplicate:\n            duplicate.append(value)\n\nprint(duplicate)", "category": "Python"}, {"instruction": "Find the most suitable 10-lines python code to generate all permutations of a 3 letters word", "input": "", "output": "from itertools import permutations \ndef all_permutations(str): \n    permList = permutations(str) \n  \n    for perm in list(permList): \n        print(''.join(perm)) \n  \nif __name__ == \"__main__\": \n    string = \"ABC\"\n    all_permutations(string)", "category": "Python"}, {"instruction": "Generate a valid python loop to print out the elements of a list.", "input": "List = [1,2,3,4,5]", "output": "for element in List:\n    print(element)", "category": "Python"}, {"instruction": "Design a Python program to read string inputs and print out the reverse of the same", "input": "", "output": "def reverse_string(string):\n  string = string[::-1]\n  return string", "category": "Python"}, {"instruction": "Implement a function to calculate the sum of digits of a given positive integer.", "input": "", "output": "def sum_digits(n):\n  total = 0\n  while n:\n    total += n % 10\n    n //= 10\n  return total", "category": "Python"}, {"instruction": "Generate a list of all pairwise combinations of the numbers in the given list.", "input": "[1,2,3,4]", "output": "def combinations(list_of_numbers):\n  result = []\n\n  for i in range(len(list_of_numbers)):\n    for j in range(len(list_of_numbers)):\n      if i != j:\n        result.append([list_of_numbers[i], list_of_numbers[j]])\n  \n  return result", "category": "Python"}, {"instruction": "Given a list of student's grades, write a program to calculate their average.", "input": "Grades = [90, 95, 80, 75]", "output": "\"\"\"\nCalculate the average of a given list of grades\n\"\"\"\n\ndef average(grades):\n    sum = 0\n    for grade in grades:\n        sum += grade\n    \n    return sum / len(grades)\n\nif __name__ == '__main__':\n    grades = [90, 95, 80, 75]\n    print(average(grades))", "category": "Python"}, {"instruction": "Create a program that will guess a number between 0 and 10.", "input": "", "output": "import random\n\ndef guessing_game():\n    secret_number = random.randint(0, 10)\n    guess = int(input(\"Guess a number between 0 and 10: \"))\n    while guess != secret_number:\n        print(\"Incorrect! Try again.\")\n        guess = int(input(\"Guess a number between 0 and 10: \")) \n    print(\"Correct!\")", "category": "Python"}, {"instruction": "Read a code that prints out the Fibonacci Series.", "input": "", "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "You are given a list of integers and need to calculate the maximum number in the list.", "input": "[3, 4, 7, 1]", "output": "def get_max(numbers):\n    max_value = numbers[0]\n    for number in numbers:\n        if (number > max_value):\n            max_value = number\n    return max_value", "category": "Python"}, {"instruction": "What's the output of this program in Python given the following input?", "input": "input_string = \"Hello, World!\"   \nlist_of_chars = list(input_string)\n\nfor current_char in list_of_chars:\n print(current_char)", "output": "H\ne\nl\nl\no\n,\n \nW\no\nr\nl\nd\n!", "category": "Python"}, {"instruction": "Create a code to format the given text using a given indentation level.", "input": "text = \"This is a sample text to format.\"\nindentation = 4", "output": "def indent_text(text, indentation):\n    \"\"\"\n    A function to format the given text using a given indentation level.\n    Input: string, integer\n    Output: string\n    \"\"\"\n    # Split the text into lines\n    lines = text.splitlines()\n    # Iterate through each line of the text\n    for i in range(len(lines)):\n        # Add the indentation to each line\n        lines[i] = \" \" * indentation + lines[i]\n    # Join all the lines\n    indented_text = \"\\n\".join(lines)\n    \n    return indented_text", "category": "Python"}, {"instruction": "Create a code to search a given string for a specific keyword and return the index of the keyword.", "input": "text = \"Report on the COVID-19 pandemic\"\nkeyword = \"COVID-19\"", "output": "def search_string(text, keyword):\n    \"\"\"\n    A function to search a given string for a specific keyword and return the index of the keyword.\n    Input: string, keyword\n    Output: integer or None\n    \"\"\"\n    # Use the find() method to search the string\n    index = text.find(keyword)\n    \n    # Return None if the keyword was not found\n    if index == -1:\n        return None\n    # Return the index if the keyword was found\n    else:\n        return index", "category": "Python"}, {"instruction": "Write a code to take in a string and determine if the string is a palindrome or not.", "input": "string = \"civic\"", "output": "def is_palindrome(string):\n    \"\"\"\n    Return True is the input string is a Palindrome, False if not.\n    Input: string\n    Output: Boolean\n    \"\"\"\n    # Cast input to string\n    if not isinstance(string, str):\n        string = str(string)\n    \n    # Reverse the string\n    rev_string = string[::-1]\n    \n    #Compare original string with reversed string\n    if string == rev_string:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Create a function to flatten a 2D array.", "input": "[[1, 2], [3, 4], [5, 6]]", "output": "def flatten_2D_array(arr):\n    \"\"\"\n    A function to flatten a 2D array.\n    Input: A 2D array.\n    Output: A 1D array.\n    \"\"\"\n    flattened_arr = []\n    for sub_arr in arr:\n        flattened_arr += sub_arr\n    return flattened_arr", "category": "Python"}, {"instruction": "Write a Python code snippet to sum up all the elements in a given dictionary.", "input": "{\n  'a': 10,\n  'b': 15,\n  'c': 20\n}", "output": "d = {'a': 10, 'b': 15, 'c': 20} \n\nprint(sum(d.values())) # Output: 45", "category": "Python"}, {"instruction": "Write a Python code snippet to get the first 1000 prime numbers.", "input": "", "output": "primes = []\nn = 2\nwhile len(primes) < 1000:\n if is_prime(n):\n primes.append(n)\n n += 1\n\nprint(primes)", "category": "Python"}, {"instruction": "Create a program to sum numbers in a given range m to n inclusive.", "input": "m = 4, n = 8", "output": "def sum_in_range(m, n):\n    sum = 0\n    for i in range(m, n+1):\n        sum+=i\n    return sum", "category": "Python"}, {"instruction": "Build a TensorFlow model to perform sentiment analysis on text.", "input": "", "output": "import tensorflow as tf\n\n# Get the data\ndataset = tf.keras.utils.get_file(\n  'aclImdb_v1.tar.gz', \n  'http://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz')\n\n# Load the data and prepare it for the model\nreviews_train, reviews_test, labels_train, labels_test \\\n  = tf.keras.datasets.imdb.load_data(\n    path=str(dataset)[:-7] + \"/aclImdb/train/\")\n\n# Convert the integers back to words\nword2id = tf.keras.datasets.imdb.get_word_index()\nword2id = {k:(v+3) for k,v in word2id.items()}\nword2id[\"<PAD>\"] = 0\nword2id[\"<START>\"] = 1\nword2id[\"<UNK>\"] = 2 \nword2id[\"<UNUSED>\"] = 3\n\nid2word = {value:key for key,value in word2id.items()}\n\n# Model for sentiment analysis\nmodel = tf.keras.Sequential([\n  tf.keras.layers.Embedding(input_dim=len(word2id)+1, output_dim=256),\n  tf.keras.layers.GlobalAveragePooling1D(),\n  tf.keras.layers.Dense(256, activation=tf.nn.relu),\n  tf.keras.layers.Dropout(0.2),\n  tf.keras.layers.Dense(1, activation=tf.nn.sigmoid)\n])\n\nmodel.compile(\n  optimizer='adam', \n  loss='binary_crossentropy', \n  metrics=['accuracy']\n)\n\nmodel.fit(\n  reviews_train, \n  labels_train, \n  epochs=10,\n  validation_data=(reviews_test, labels_test)\n)", "category": "Python"}, {"instruction": "Generate a list in Python that contains the numbers from 0 to 50 that are divisible by 7.", "input": "", "output": "numbers = []\nfor i in range(51):\n  if i % 7 == 0:\n    numbers.append(i)\nprint(numbers)\n# output: [0, 7, 14, 21, 28, 35, 42, 49]", "category": "Python"}, {"instruction": "Edit the following Python code to make it error-free.", "input": "a = 33\nab = a +", "output": "a = 33\nab = a + b", "category": "Python"}, {"instruction": "Build a Lambda function using Python to calculate the sum of two numbers.", "input": "n1 = 5\nn2 = 8", "output": "def add_two_numbers(n1, n2):\n return n1 + n2", "category": "Python"}, {"instruction": "Create a function to calculate the factorial of 5 using Python.", "input": "", "output": "def factorial(n): \n   if n == 0: \n       return 1\n   else: \n       return n * factorial(n-1) \nprint(factorial(5)) # Output: 120", "category": "Python"}, {"instruction": "Given a list of integers, write a Python code to return the most frequent item.", "input": "num_list = [3, 7, 8, 8, 5, 7, 8, 6, 8]", "output": "ModeElement = max(set(num_list), key = num_list.count) \nprint(\"Most Frequent Element : \", ModeElement)", "category": "Python"}, {"instruction": "Write a Python script to find the maximum depth of a given nested list.", "input": "nested_list = [[1,2], [3,4], [5,6,7]]", "output": "def max_depth_of_nested_list(nested_list):\n    max_depth = 1\n    for inner_list in nested_list:\n        depth = 1\n        if type(inner_list) == list:\n            depth += max_depth_of_nested_list(inner_list)\n        max_depth=max(depth, max_depth)\n    return max_depth", "category": "Python"}, {"instruction": "Write a Python script to calculate the total of all the elements in a nested list.", "input": "nested_list = [[1,2,3], [4,5,6], [7,8,9]]", "output": "def sum_of_nested_list(nested_list):\n    total = 0\n    for internal_list in nested_list:\n        for num in internal_list:\n            total += num\n    return total", "category": "Python"}, {"instruction": "Given a list of numbers and a target number, write a Python program to find if there exists a sublist whose sum equals the target.", "input": "numbers = [2, 4, 8, 9, 5, 7], target = 15", "output": "def sublist_sum(numbers, target) : \n    n = len(numbers) \n  \n    # Consider all sublists of arr[] and return \n    # true if given sum is present in any of them \n    for i in range(n) : \n        curr_sum = numbers[i] \n  \n        # Try different endpoints for current subarray \n        j = i+1\n        while j<=n : \n  \n            if curr_sum == target : \n                return True\n  \n            if curr_sum > target or j == n: \n                break\n  \n            curr_sum = curr_sum + numbers[j] \n            j += 1\n  \n    return False", "category": "Python"}, {"instruction": "Create a class to store a given list of strings.", "input": "List: ['hello', 'world', 'hi']", "output": "class StrList:\n def __init__(self, str_list):\n    self.str_list = str_list\n   \n  def get_list(self):\n    return self.str_list", "category": "Python"}, {"instruction": "Grant access to content by creating a function that takes in an age and returns a boolean.", "input": "Age: 20", "output": "def check_age(age):\n  if age < 18:\n    return False\n  else:\n    return True", "category": "Python"}, {"instruction": "Retrieve all the values from the nested dictionary.", "input": "data_dict = {\n'key1': {\n  'inner_key1': \"1\",\n  'inner_key2': \"2\"\n},\n'key2': {\n  'inner_key1': \"3\",\n  'inner_key2': \"4\"\n}\n}", "output": "for key1_value in data_dict.values():\n  for (inner_key1, inner_key2) in key1_value.items():\n    print(inner_key1, inner_key2)", "category": "Python"}, {"instruction": "Implement a function to remove all occurrences of an element in a given list", "input": "", "output": "def remove_element(list, element): \n    return [x for x in list if x != element]", "category": "Python"}, {"instruction": "Create a bash script to print the version of python installed in the computer.", "input": "", "output": "#!/bin/bash\npython --version", "category": "Python"}, {"instruction": "Create a function to check if two strings are an anagram of one another using Python.", "input": "str1 = 'cat'\nstr2 = 'tac'", "output": "def anagram_checker(str1, str2): \n    if (len(str1)==len(str2)): \n        if (\"\".join(sorted(str1.lower())) == \"\".join(sorted(str2.lower()))): \n            return True\n        else: \n            return False", "category": "Python"}, {"instruction": "Convert the following recursive function to an iterative one.", "input": "def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n - 1)", "output": "def factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result = result * i\n    return result", "category": "Python"}, {"instruction": "Generate a Python class definition for a pig object that includes the following properties.", "input": "name: string\ncolor: string\nage: integer", "output": "class Pig(object):\n    def __init__(self, name, color, age):\n        self.name = name\n        self.color = color\n        self.age = age\n    \n    def set_name(self, name):\n        self.name = name\n    \n    def set_color(self, color):\n        self.color = color\n    \n    def set_age(self, age):\n        self.age = age", "category": "Python"}, {"instruction": "Edit this code so it can classify whether a number is even or odd.", "input": "def classify_number(num):", "output": "def classify_number(num):\n    if num % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"", "category": "Python"}, {"instruction": "Write a Python function to compare two lists and return the elements that are in both of them.", "input": "list1 = [3, 5, 7, 8]\nlist2 = [3, 5, 10, 12]", "output": "def compare_lists(list1, list2):\n    return [x for x in list1 if x in list2]", "category": "Python"}, {"instruction": "Write a function to convert a Roman numeral to an integer.", "input": "", "output": "def roman_to_integer(numeral):\n  romans = {\"I\": 1,\n            \"V\": 5,\n            \"X\": 10,\n            \"L\": 50,\n            \"C\": 100,\n            \"D\": 500,\n            \"M\": 1000\n            }\n  num = 0\n  i = 0\n  while i < len(numeral):\n    if i+1 < len(numeral):\n      if romans[numeral[i]] >= romans[numeral[i+1]]:\n        num = num + romans[numeral[i]]\n      else :\n        num = num + romans[numeral[i+1]] - romans[numeral[i]]\n        i+=1\n    else:\n      num = num + romans[numeral[i]]\n    i+=1\n  return num", "category": "Python"}, {"instruction": "Write a Python program to find all the factors of an integer.", "input": "number = 16", "output": "def find_factors(number):\n    factors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            factors.append(i)\n    return factors", "category": "Python"}, {"instruction": "Modify the 'Bike' class so that when instances are created they are assigned a unique ID.", "input": "", "output": "# Define a class for a bike\nclass Bike:\n _id = 0\n\n def __init__(self, color, make, description): \n  Bike._id += 1\n  self.id = Bike._id\n  self.color = color\n  self.make = make\n  self.description = description", "category": "Python"}, {"instruction": "Create a class for a bike which has a color, make and description as attributes.", "input": "", "output": "# Define a class for a bike\nclass Bike:\n def __init__(self, color, make, description): \n  self.color = color\n  self.make = make\n  self.description = description", "category": "Python"}, {"instruction": "Add a constructor to the above class to make sure that firstname and lastname are provided when creating a new instance.", "input": "", "output": "# Define a python class \nclass Person: \n def __init__(self, firstname, lastname, address): \n  # make sure that firstname and lastname are provided when creating a new instance\n  if (firstname == \"\" or lastname == \"\"): \n   raise ValueError(\"firstname and lastname can't be empty\")\n  self.firstname = firstname\n  self.lastname = lastname\n  self.address = address", "category": "Python"}, {"instruction": "Create a Python class with the following attributes: firstname, lastname and address.", "input": "", "output": "# Define a python class \nclass Person: \n def __init__(self, firstname, lastname, address): \n  self.firstname = firstname\n  self.lastname = lastname\n  self.address = address", "category": "Python"}, {"instruction": "Find the smallest missing positive number in an array.", "input": "[-2, 0, 1, 3]", "output": "# Find the smallest missing positive number\ndef smallest_positive(arr): \n s = set(arr) \n i = 1 \n while i in s: \n i += 1\n return i\n\narr = [-2, 0, 1, 3] \nsmallest = smallest_positive(arr)\nprint(smallest) # 2", "category": "Python"}, {"instruction": "Create a Python dictionary which contains the student name and their grade for the course.", "input": "{\n \"John\": 85, \n \"Alice\": 91,\n \"Bob\": 74\n}", "output": "student_grades = {\n \"John\": 85, \n \"Alice\": 91,\n \"Bob\": 74\n}", "category": "Python"}, {"instruction": "Perform sentiment analysis on the given text using NLTK library in Python.", "input": "The food here is amazing.", "output": "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentences = [\"The food here is amazing!\"]\n\nsid = SentimentIntensityAnalyzer()\n\nfor sentence in sentences:\n    ss = sid.polarity_scores(sentence)\n    print(\"for sentence: {}, sentiment analysis: {}\".format(sentence, ss))\n\n# Output\n# for sentence: The food here is amazing!, sentiment analysis: {'neg': 0.0, 'neu': 0.436, 'pos': 0.564, 'compound': 0.6249}", "category": "Python"}, {"instruction": "Deploy the following ML model on the Cloud.", "input": "", "output": "1. Prepare the model:\n- Download, install and configure Cloud platform with the required SDKs.\n- Upload the ML model on the Cloud.\n- Perform necessary pre-processing steps.\n\n2. Deploy the model:\n- Use a deployment framework to deploy the model on the Cloud. \n- containerize the model using Docker. \n- provide appropriate access for the model for it to be queried.\n\n3. Test the model:\n- Run test cases for the model and assess the accuracy and performance of the model.\n- Set up a monitoring system for the model.", "category": "Python"}, {"instruction": "Check this code and add an if statement to print out \u201ceven\u201d if the number is divisible by 2 and \u201codd\u201d if not.", "input": "for n in range (1,10):\n\tprint(n)", "output": "for n in range (1, 10):\n    if n % 2 == 0:\n        print(n, \"even\")\n    else:\n        print(n, \"odd\")", "category": "Python"}, {"instruction": "Write a code in Python to print out the common elements of two lists which are [2, 4, 6, 8] and [3, 6, 9, 12].", "input": "", "output": "#Function to print out the common elements of two lists\ndef commonElements(l1, l2):\n    result = [value for value in l1 if value in l2]\n    return result\n\n# Lists to compare\nlist1 = [2, 4, 6, 8] \nlist2 = [3, 6, 9, 12] \n\n# Output  \nprint(commonElements(list1, list2)) \n\n# Output: [6]", "category": "Python"}, {"instruction": "Write a Python code to calculate the total price of a given list of items including taxes.", "input": "items = [\n  {\"name\": \"apple\", \"price\": 10},\n  {\"name\": \"orange\", \"price\": 20},\n  {\"name\": \"banana\", \"price\": 5}\n]\ntax_rate = 5", "output": "#Calculate total price of a given list of items including taxes\n\nitems = [\n  {\"name\": \"apple\", \"price\": 10},\n  {\"name\": \"orange\", \"price\": 20},\n  {\"name\": \"banana\", \"price\": 5}\n]\ntax_rate = 5\n\ntotal_price = 0\n\nfor item in items:\n  total_price += item['price']\n\ntotal_price = total_price + (total_price * (tax_rate/100))\n\nprint(total_price)", "category": "Python"}, {"instruction": "Write a Python class that has two variables 'name' and 'age' and a method to print the values of both variables.", "input": "", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def print_values(self):\n        print(\"Name:\", self.name)\n        print(\"Age:\", self.age)", "category": "Python"}, {"instruction": "What is the complexity class of the below Python code snippet for adding an item to a list?", "input": "list = [1, 2, 3]\nlist.append(4)", "output": "The complexity class of this code snippet is O(1) since appending an item to a list has constant time complexity.", "category": "Python"}, {"instruction": "Write a code in Python that returns an inversion of a given string.", "input": "tea", "output": "def reverseStr(s): \n    return s[::-1] \n  \ns = \"tea\"\nprint(reverseStr(s))", "category": "Python"}, {"instruction": "Create an array in Python that contains numbers from 1 to 5.", "input": "", "output": "my_array = [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Solve the following programming puzzle using Python.", "input": "A rope connected two opposite trees.  You need to cut the rope so the rope is never longer than 10 meters.  What is the shortest distance you can cut?", "output": "def closest_cutting_distance(total_rope_length):\n    '''This function will calculate the shortest distance you can cut a rope so the rope is never longer than 10 meters.'''\n    if total_rope_length <= 10:\n        return total_rope_length\n    else:\n        return total_rope_length - 10", "category": "Python"}, {"instruction": "Create a new dictionary that contains the intersection between the following two dictionaries.", "input": "d1 = {'a': 1, 'b': 2, 'c': 3}\nd2 = {'b': 2, 'c': 4, 'd': 5}", "output": "d1 = {'a': 1, 'b': 2, 'c': 3}\nd2 = {'b': 2, 'c': 4, 'd': 5}\nd3 = { k:v for k,v in d1.items() if k in d2.keys() }", "category": "Python"}, {"instruction": "Create a function that will calculate the cumulative sum of a list.", "input": "[1, 2, 3, 4, 5]", "output": "def cumulative_sum(lst):\n    '''This function will calculate the cumulative sum of a list.'''\n    result = []\n    s = 0\n    for item in lst:\n        s += item\n        result.append(s)\n    return result", "category": "Python"}, {"instruction": "Create a function that will return the total number of specific items in a list.", "input": "[1, 1, 2, 3, 3, 3]", "output": "def count_items(lst, item):\n    '''This function will return the total number of specific items in a list.'''\n    return len([x for x in lst if x == item])", "category": "Python"}, {"instruction": "Suggest a way to check if a given string contains alphanumeric characters", "input": "", "output": "The simplest way to check if a given string contains alphanumeric characters is to use the built-in isalnum() method which will return True if the string contains at least one alphanumeric character and False otherwise. Example:\n\nmy_string = 'Hello123'\n\nif my_string.isalnum():\n    print('Contains alphanumeric characters')\nelse:\n    print('Does not contain alphanumeric characters')", "category": "Python"}, {"instruction": "Suggest a method to run a python program from an interactive terminal session.", "input": "", "output": "The simplest way to run a python program from an interactive terminal session is to use the \"python\" command. For example, if you have a file called \"myprog.py\", you can type \"python myprog.py\" at the command line and the program will be executed. Alternately, you can use the \"execfile\" command, which takes a file name as an argument and executes it.", "category": "Python"}, {"instruction": "Create a function that takes a list of strings as input and returns a string of the list sorted in the alphabetical order.", "input": "[\"apple\", \"banana\", \"cherry\"]", "output": "def sort_strings_alphabetically(words):\n# Use the built-in sorted() function to sort the list of strings\nsorted_words = sorted(words)\n# Join the sorted list of words separated by spaces\nreturn \" \".join(sorted_words)", "category": "Python"}, {"instruction": "Write a function to remove duplicate elements from a list keeping only the first occurrence of each element.", "input": "[1, 2, 3, 3, 3, 4, 4, 5]", "output": "def remove_duplicates(nums):\n # Create a list to store the first occurrence of each number\n seen = []\n # Iterate over the list\n for num in nums:\n  # If the number is not in the seen list, add it\n  if num not in seen:\n   seen.append(num)\n return seen", "category": "Python"}, {"instruction": "Provide the logic for sorting an array of strings alphabetically.", "input": "", "output": "for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n        if arr[i] > arr[j]:\n            arr[i], arr[j] = arr[j], arr[i]", "category": "Python"}, {"instruction": "Create a Visual Studio Code extension that provides auto-complete features for a specific language.", "input": "", "output": "This Visual Studio Code extension will create an Auto-Complete Provider for a specific language (e.g. JavaScript, Python, etc.). It will analyze the syntax of a given language and provide word suggestions while typing in the source code. The extension should be able to detect the language type from the file extension and then provide the auto-complete suggestions accordingly.", "category": "Python"}, {"instruction": "Why is HashTable data structure the best choice for fast lookup operations?", "input": "", "output": "HashTable data structure is the best choice for fast lookup operations because it stores the data in key-value pairs and uses hashing algorithms to quickly identify the location of the data in memory. With this data structure, lookups can be done in O(1) time complexity, which is much more efficient than other data structures.", "category": "Python"}, {"instruction": "Write a Python function to sort the given array of dictionaries by key value.", "input": "arr = [{'name': 'Jose', 'age': 32}, {'name': 'Ravi', 'age': 23}, {'name': 'Paul', 'age': 26}]", "output": "def sort_by_key(arr):\n return sorted(arr, key=lambda i: i['name'])", "category": "Python"}, {"instruction": "Write a function that prints Fibonacci numbers up to N (N>1).", "input": "", "output": "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2, n+1): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Fix the bug in this code.", "input": "def calculate_area(length, width):\narea = (length * width)\nif area > 20:\n    return 'Area too large'", "output": "def calculate_area(length, width):\narea = (length * width)\nif area > 20:\n    return 'Area too large'\nelse:\n    return area", "category": "Python"}, {"instruction": "Create a new class in Python named \"Employee\".", "input": "", "output": "class Employee:\n    def __init__(self):\n        pass", "category": "Python"}, {"instruction": "In the following Python function, insert code to check if the given number is even or odd.", "input": "def check_num(num):\n    # TODO\n    if num % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")", "output": "def check_num(num):\n    assert isinstance(num, int), \"num must be an integer value\"\n    if num % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")", "category": "Python"}, {"instruction": "Given a list of sentence fragments, use a loop in Python to print each fragment on a separate line.", "input": "sentences = [\"Hello\", \"My name is\", \"John\", \"Nice to meet you!\"]", "output": "for sentence in sentences:\n    print(sentence)", "category": "Python"}, {"instruction": "Write a function in Python to generate a list of numbers that is the square of all numbers between 1 and the number provided.", "input": "num = 10", "output": "def generate_square_list(num):\n    result = []\n    for i in range(1, num+1):\n        result.append(i*i)\n    return result", "category": "Python"}, {"instruction": "Write a for loop that iterates through a list of numbers and prints only the even numbers.", "input": "[1, 2, 3, 4, 5, 6]", "output": "for i in [1,2,3,4,5,6]:\n    if i % 2 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Create a generator expression to print the square of a list of numbers.", "input": "numbers = [1, 2, 3, 4, 5]", "output": "numbers = [1, 2, 3, 4, 5]\n\n# generator expression\nsquares = (num ** 2 for num in numbers)\n\nfor square in squares: \n    print(square)", "category": "Python"}, {"instruction": "Extend the given list of numbers by adding all odd numbers from 0 to 10.", "input": "my_list = [0, 2, 4, 6, 8, 10]", "output": "my_list = [0, 2, 4, 6, 8, 10]\nmy_list.extend([num for num in range(11) if num % 2 != 0])", "category": "Python"}, {"instruction": "Using list comprehension, create a list of all even numbers from 0 to 10.", "input": "", "output": "even_numbers = [num for num in range(11) if num % 2 == 0]", "category": "Python"}, {"instruction": "Generate a function `recursive_sum` that computes the sum of a list of integers recursively.", "input": "", "output": "def recursive_sum(lst): \n    # Base case\n    if not len(lst): \n        return 0\n    return lst[0] + recursive_sum(lst[1:])", "category": "Python"}, {"instruction": "What does a negative index signify in a Python array?", "input": "", "output": "A negative index in a Python array is used to access elements from the end of the array, where the last element of the array is at index -1.", "category": "Python"}, {"instruction": "Write a code to find the day of the week corresponding to a given date using the calendar module?", "input": "Day: 25\nMonth: December\nYear: 2020", "output": "\"\"\"\nFind the day of the week corresponding to a given date using calendar module\n\"\"\"\n\nimport calendar\n\ndef get_day_of_week(day, month, year):\n    dayNumber = calendar.weekday(year,month,day)\n    dayName = calendar.day_name[dayNumber] \n    return dayName\n    \nif __name__ == '__main__':\n    day = 25\n    month = 12\n    year = 2020\n    print(get_day_of_week(day, month, year))", "category": "Python"}, {"instruction": "Explain the practical application of sorting algorithms", "input": "", "output": "Sorting algorithms are used in many practical applications, such as sorting data in databases, large scale data analysis, and search engine optimization. They are also used in sorting algorithms used in operating system kernels and in finding the shortest path in graph theory. Sorting algorithms can also be used to improve the performance of applications by sorting data according to certain criteria, thus reducing the amount of computation time required. In addition, sorting algorithms are used in designing algorithms for data compression and in machine learning. Generally, sorting algorithms are used to bring data into some form of order so that it can be searched or traversed more easily. By improving the efficiency of data retrieval, sorting algorithms can improve the overall performance of applications.", "category": "Python"}, {"instruction": "What is the difference between supervised learning and unsupervised learning?", "input": "", "output": "Supervised learning is a type of machine learning where the algorithm is given a labelled dataset and its goal is to learn a mapping between the given input and the given output. The labels in the dataset act as a supervisor to guide the algorithm towards its learning path.\nUnsupervised learning is a type of machine learning where the algorithm is given an unlabelled dataset and its goal is to learn from the data and discover patterns and insights from the data without being given any explicit guidance. The algorithm must learn by itself how to organize the data and extract useful information from it.", "category": "Python"}, {"instruction": "Generate the output given the following input to the Python function you wrote in  task 11.", "input": "print_primes(5, 15)", "output": "5\n7\n11\n13", "category": "Python"}, {"instruction": "Create a function in Python that prints out all prime numbers between two given numbers.", "input": "", "output": "def print_primes(start, end):\n    for num in range(start, end):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                print(num)", "category": "Python"}, {"instruction": "Complete the following function in Python which will return all the numbers in a list between a given minimum and maximum.", "input": "def getRange(min, max):", "output": "def getRange(min, max):\n  return [i for i in range(min, max+1)]", "category": "Python"}, {"instruction": "Suggest a possible numpy code to normalize a data in the following manner.", "input": "Normalize the data such that the values lie in the range 0-1.", "output": "import numpy as np\n\ndef normalize(arr):\n    arr = np.array(arr)\n    return (arr - arr.min()) / (arr.max() - arr.min())", "category": "Python"}, {"instruction": "Write a function that takes a list of words and detects if they are anagrams.", "input": "a_list=[\"potato\",\"tomato\"]", "output": "def is_anagram(a_list):\n    \n    l1 = [''.join(sorted(word)) for word in a_list[0]]\n    l2 = [''.join(sorted(word)) for word in a_list[1]]\n    return l1 == l2", "category": "Python"}, {"instruction": "Suggest a python code to print all the even numbers from the given list.", "input": "list_of_numbers = [11, 22, 31, 37, 44]", "output": "list_of_numbers = [11, 22, 31, 37, 44]\nfor num in list_of_numbers:\n    if num % 2 == 0:\n        print(num)", "category": "Python"}, {"instruction": "Design a function to generate the random password", "input": "", "output": "import random\n\ndef generate_password():\n    #Declare a string of all possible characters\n    all_chars = \"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+=-`'\"\n    #Declare the length of password\n    password_len = 8\n    #Create empty string\n    password = \"\"\n    for i in range(password_len):\n        #Generate a random index\n        rand_index = random.randint(0, len(all_chars)-1)\n        #Append character at the index to password\n        password += all_chars[rand_index]\n    return password", "category": "Python"}, {"instruction": "Write a Python script that uses regular expressions to check whether a given URL is correctly formatted or not.", "input": "", "output": "import re\n\ndef is_valid_url(url):\n # Check if the URL is valid using a regex\n regex = re.compile(r\"^(?:http|ftp)s?://([^/]+[.])*[^/]+/?.*$\")\n if regex.match(url):\n  return True\n return False", "category": "Python"}, {"instruction": "Write a function to implement the Levenshtein Distance algorithm. The Levenshtein Distance algorithm calculates the minimum number of single-character edits (insertions, deletions, or substitutions) necessary to transform one string into another string.", "input": "\"cats\", \"dogs\"", "output": "def levenshtein_distance(str1, str2):\n # Create a matrix for storing the distances\n m = [[0 for x in range(len(str2) + 1)] for x in range(len(str1) + 1)]\n # Mark the first Edit Distance value as 0\n m[0][0] = 0\n \n # Iterate over the matrix \n for i in range(0, len(str1) + 1):\n  for j in range(0, len(str2) + 1):\n   # If we are at the first row or first col, mark the cells with corresponding numbers\n   if i == 0:\n    m[i][j] = j\n   elif j == 0:\n    m[i][j] = i\n   # Otherwise, calculate the distance according to the  formula\n   else:\n    if str1[i-1] == str2[j-1]:\n     m[i][j] = m[i-1][j-1]\n    else:\n     m[i][j] = min(m[i-1][j], m[i-1][j-1], m[i][j-1]) + 1\n  \n # Return the last element in the matrix, which is the Levenshtein Distance\n return m[-1][-1]", "category": "Python"}, {"instruction": "Create a program to determine whether a given sequence is an arithmetic progression or not.", "input": "[-6, -2, 2, 6]", "output": "def is_arithmetic_progression(arr):\n # Check if the given array is empty\n if len(arr) == 0:\n  return False\n # Initialize the common difference and the first element\n commonDifference = arr[1] - arr[0]\n firstElement = arr[0]\n # Iterate over the array\n for i in range(len(arr)):\n  if arr[i] != firstElement + (i * commonDifference):\n   return False\n # If all elements are in an arithmetic progression\n return True", "category": "Python"}, {"instruction": "Construct an algorithm to predict the next 3 days' stock market movements given the stock prices from the past 5 days.", "input": "[69.04, 67.07, 68.3, 68.91, 70.09]", "output": "def predict_stock_movements(data):\n# Initialize empty list to store predicted values\npredictions = []\n\n# Iterate over the given data\nfor i in range(len(data)-2):\n # Calculate the average of the 5 days\n avg = sum(data[i:i+3])/3\n # Calculate the current and past day market movement\n curr_mov = data[i+2] - data[i+1]\n past_mov = data[i+1] - data[i]\n # Predict the next day\n prediction = avg + curr_mov + past_mov\n predictions.append(prediction)\n\nreturn predictions", "category": "Python"}, {"instruction": "Create a report in PDF format that displays the most frequent words used in the New York Times articles.", "input": "", "output": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nfrom textblob import TextBlob\nfrom nltk.tokenize import word_tokenize \nfrom nltk.tokenize import sent_tokenize\nfrom nltk.probability import FreqDist\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib.backends.backend_pdf import PdfPages\n\ndef get_top_words(string):\n tokenized_words = word_tokenize(string)\n freqdist = FreqDist(tokenized_words)\n return freqdist.most_common(15)\n\n# Download nltk dependencies\n# nltk.download('punkt')\n# nltk.download('vader_lexicon')\n\n# Scrape news articles\narticles = scrape_nyt()\n\n# Get top words\ntop_words = []\nfor article in articles:\n top_words.append(get_top_words(article))\n\n# Create PDF report\npp = PdfPages('nyt_word_freq.pdf')\nplt.figure(figsize=(15,10))\nplt.bar(*zip(*top_words))\nplt.xticks(rotation=90)\npp.savefig()\npp.close()", "category": "Python"}, {"instruction": "Modify the code below to pull data from the API endpoint provided.", "input": "Endpoint: https://jsonplaceholder.typicode.com/posts", "output": "import requests\n\nurl = 'https://jsonplaceholder.typicode.com/posts'\n\nresponse = requests.get(url)\ndata = response.json()\n\nfor post in data:\n    title = post['title']\n    body = post['body']\n    \n    print('Title: ', title)\n    print('Body: ', body)", "category": "Python"}, {"instruction": "Calculate the maximum element in the given list.", "input": "my_list = [2, 1, 7, 5, 3]", "output": "def max_element(my_list): \n    max_num = my_list[0] \n    for num in my_list: \n        if num > max_num: \n            max_num = num\n    return max_num", "category": "Python"}, {"instruction": "How can you generate a random number in the range of 1 to 10 in Python?", "input": "", "output": "import random\nrandom_number = random.randint(1, 10)", "category": "Python"}, {"instruction": "In Python, write a function to print out a sequence of numbers from 1 to 10.", "input": "", "output": "def print_sequence():\n  for i in range(1, 11):\n    print(i)\n\nprint_sequence() # Output: 1 2 3 4 5 6 7 8 9 10", "category": "Python"}, {"instruction": "In Python, create a function that takes a string as an argument and returns a string with the vowels replaced with an asterisk (*).", "input": "", "output": "def replace_vowels(string):\n\tvowels = \"aeiou\"\n\tresult = \"\"\n\tfor char in string:\n\t\tif char in vowels:\n\t\t\tchar = \"*\"\n\t\tresult += char\n\treturn result", "category": "Python"}, {"instruction": "Create an algorithm to calculate the mean, mode and median in a given set of numbers.", "input": "", "output": "def mean(nums):\n    return sum(nums)/len(nums)\n\ndef mode(nums):\n    countDict = {}\n    for num in nums:\n        if num in countDict:\n            countDict[num] += 1\n        else:\n            countDict[num] = 1\n    maxValue = 0\n    maxKey = -1\n    for key, value in countDict.items():\n        if value > maxValue:\n            maxValue = value\n            maxKey = key\n    return maxKey\n\ndef median(nums):\n    nums.sort()\n    if len(nums) % 2 == 0:\n        return (nums[len(nums)//2] + nums[len(nums)//2-1])/2\n    else:\n        return nums[(len(nums)-1)//2]\n\nif __name__ == '__main__':\n    nums = [1,2,2,2,3,4,5]\n    print(\"Mean: \", mean(nums))\n    print(\"Mode: \", mode(nums))\n    print(\"Median: \", median(nums))", "category": "Python"}, {"instruction": "Write a Python script to compute Pi to the Nth digit.", "input": "", "output": "import math\n\nn = int(input(\"Enter the number of digits of pi to compute: \"))\n\n# Compute pi to nth decimal place\npi = round(math.pi, n)\n\nprint(\"The value of pi to {0} decimal places is: {1}\".format(n, pi))", "category": "Python"}, {"instruction": "Create an algorithm to classify a given set of data into three classes.", "input": "", "output": "from sklearn.neighbors import KNeighborsClassifier\nimport numpy as np\n\n# X is the training data\nX = np.array([[0, 0], [1, 1], [1, 0], [0, 1], [1, 2], [2, 1], [2, 2]])\n\n# y is the labels of the classes\ny = np.array([0, 0, 1, 1, 2, 2, 2])\n\n# Create the model\nmodel = KNeighborsClassifier(n_neighbors=3)\n\n# Fit the model using the training data\nmodel.fit(X, y)\n\n# Use the model to make predictions \nprediction = model.predict([[2, 3]])\n\nprint(prediction)", "category": "Python"}, {"instruction": "Create a python function that computes the area of a rectangle given the length and width.", "input": "", "output": "def calculateRectangleArea(length, width):\n  area = length * width\n  return area", "category": "Python"}, {"instruction": "Change the following list of strings to uppercase in Python.", "input": "List: ['one', 'two', 'three']", "output": "list_strings = [\"one\", \"two\", \"three\"]\n\nlist_strings = [string.upper() for string in list_strings]\n\nprint(list_strings)", "category": "Python"}, {"instruction": "How can we dynamically add an element to a set in Python?", "input": "", "output": "In Python, we can dynamically add an element to a set using the add() method. For example, \n\ns = set()\ns.add(4)\nprint(s)", "category": "Python"}, {"instruction": "Write a code to flatten a two-dimensional list into one-dimensional list in Python.", "input": "Two-dimensional List: [[1,2], [3,4], [5,6]]", "output": "def flatten_2d_list(lst):\n  flat_list = []\n  for elem in lst:\n    for item in elem:\n      flat_list.append(item)\n  return flat_list\n\ntest_list = [[1,2], [3,4], [5,6]] \nprint(flatten_2d_list(test_list))", "category": "Python"}, {"instruction": "Write a Python code to print the following output:\nday     temperature\nMonday    20\nTuesday   25", "input": "", "output": "print(\"day     temperature\")\nprint(\"Monday    20\")\nprint(\"Tuesday   25\")", "category": "Python"}, {"instruction": "Develop a solution to this algorithm problem.", "input": "Given an int array A, find the min absolute difference between any two of its elements.", "output": "def minAbsDifference(arr):\n    min_difference = float(\"inf\")\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_difference:\n                min_difference = diff\n    return min_difference", "category": "Python"}, {"instruction": "Create an RNN model to classify emails into spam and not spam.", "input": "", "output": "#imports\nimport tensorflow as tf \nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout \n#Model\nmodel = tf.keras.models.Sequential([\n    Embedding(vocab_size, embedding_dim, input_length = max_len),\n    LSTM(128),\n    Dense(64, activation = 'relu'),\n    Dropout(0.25),\n    Dense(1, activation = 'sigmoid')\n])", "category": "Python"}, {"instruction": "Reverse a string using a stack.", "input": "string: hello", "output": "def reverse_string_using_stack(string): \n    stack = []\n    for char in string:\n        stack.append(char)\n    reversed_string = ''\n    while len(stack) > 0: \n        reversed_string += stack.pop()\n    return reversed_string", "category": "Python"}, {"instruction": "Develop a Python function that returns the first two characters of a string.", "input": "string = \"GPT-3\"", "output": "def first_two_chars(string):\n  return string[:2]", "category": "Python"}, {"instruction": "Inside a Python program, how would you convert a float number to a string?", "input": "", "output": "str_number = str(float_number)", "category": "Python"}, {"instruction": "Create a pandas DataFrame based on the given input CSV.", "input": "EmployeeID,EmployeeName,Salary\n1,John,12345\n2,David,23456\n3,Steve,34567", "output": "import pandas as pd\n\ndf = pd.read_csv(\"input.csv\")\nprint(df)", "category": "Python"}, {"instruction": "Create a nested loop that increments a variable from 0 to 5.", "input": "", "output": "for i in range(0, 5):\n    for j in range(0, 5):\n        var += 1", "category": "Python"}, {"instruction": "Create a program to find the most frequently used word in a given text.", "input": "Text: Machine learning is a subset of artificial intelligence and is a powerful tool in data science.", "output": "import collections \n  \n# function to get most frequently used word \ndef most_frequent(string): \n  \n    # split the string into list of words \n    split_it = string.split() \n      \n    # pass the split_it list to instance of Counter class. \n    Counter = collections.Counter(split_it) \n  \n    # most_common() produces k frequently encountered \n    # input values and their respective counts. \n    most_occur = Counter.most_common(1) \n  \n    return most_occur[0][0]  \n  \n#Driver function \ntext = \"Machine learning is a subset of artificial intelligence and is a powerful tool in data science.\"\nprint(most_frequent(text))", "category": "Python"}, {"instruction": "Create a program to filter out keywords from a given text.", "input": "Text: This is a text containing some keywords\nKeywords: [\"keywords\", \"text\"]", "output": "def filter_keywords(text, keywords):\n  words = text.split()\n  filtered_words = [word for word in words if word not in keywords]\n  return ' '.join(filtered_words)\n  \ntext = 'This is a text containing some keywords'\nkeywords = ['keywords', 'text']\n\nprint(filter_keywords(text, keywords))", "category": "Python"}, {"instruction": "Design an algorithm that sorts a given array of integers in ascending order.", "input": "[5, 4, 2, 6, 1]", "output": "def sort_array(arr):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] = arr[j+1], arr[j]\n  return arr", "category": "Python"}, {"instruction": "Write Python code to find the nth element of a Fibonacci sequence.", "input": "", "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)", "category": "Python"}, {"instruction": "Find the length of the longest substring without repeating characters", "input": "string = \"abcabcbb\"", "output": "def longest_substring(string):\n    longest_substring = \"\"\n    curr_substring = \"\"\n    char_set = set()\n    for char in string:\n        if char not in char_set:\n            curr_substring += char\n            char_set.add(char)\n        else:\n            if len(curr_substring) > len(longest_substring):\n                longest_substring = curr_substring\n            curr_substring = char\n            char_set = set(char)\n    if len(curr_substring) > len(longest_substring):\n        longest_substring = curr_substring\n    return len(longest_substring)", "category": "Python"}, {"instruction": "How can you remove the duplicate items from a list of integers in Python?", "input": "", "output": "You can remove the duplicate items from a list of integers in Python by using the set() function. For example:\n\na = [1, 2, 3, 3, 4]\nb = list(set(a))\nprint(b)\n# Output: [1, 2, 3, 4]", "category": "Python"}, {"instruction": "How can you sort a list of integers by their absolute value in Python?", "input": "", "output": "You can sort a list of integers by their absolute value using the sort() method. For example: \n \nnumbers = [2, -1, 5, 0, -4] \nnumbers.sort(key = lambda x: abs(x)) \nprint(numbers)\n# Output: [0, -1, 2, -4, 5]", "category": "Python"}, {"instruction": "Suggest a way to gracefully handle errors in Python code.", "input": "", "output": "In Python, errors can be handled gracefully using try and except blocks. The try block contains the code that might throw an exception and the except block is used to handle the exception. In addition, the finally block is used to perform any clean up after the code is executed. Additionally, custom exception classes can be implemented and used to handle errors more granularly.", "category": "Python"}, {"instruction": "What is the algorithm used in the following python snippet?", "input": "defbinarySearch( arr, low, high, x): \n   \n    if high >= low: \n  \n        mid = (high + low) // 2\n  \n        # Check if x is present at mid \n        if arr[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        elif arr[mid] < x: \n            return binarySearch(arr, mid + 1, high, x) \n  \n        # If x is smaller, ignore right half \n        else: \n            return binarySearch(arr, low, mid - 1, x)", "output": "The algorithm used in this python snippet is a binary search algorithm. Binary search is an efficient search algorithm that searches a sorted array for a specified element in O(log n) time complexity. The algorithm works by first determining the median of the array, and then comparing the value at the median to the value being searched for. If the value at the median is the same as the value being searched for, the algorithm returns the index at which it found the element. Otherwise, it will either ignore the left or right half of the array depending on whether the value at the median is larger or smaller than the value being searched for. The algorithm then repeats this step on the narrowed down subarray until the element is found.", "category": "Python"}, {"instruction": "Create a class in Python named 'Foo' that has two methods named 'add' and 'subtract' to add and subtract two given numbers respectively.", "input": "", "output": "class Foo:\n  def add(self, num1, num2):\n    return num1 + num2\n\n  def subtract(self, num1, num2):\n    return num1 - num2", "category": "Python"}, {"instruction": "Translate a given string of comma-separated words into a list of words in Python.", "input": "\"apple, orange, grape\"", "output": "words = \"apple, orange, grape\".split(\", \")\nprint(words) # ['apple', 'orange', 'grape']", "category": "Python"}, {"instruction": "Create a class in Python named 'Bar' that has an attribute named 'fname' and a single method named 'sayHello'.", "input": "", "output": "class Bar:\n  def __init__(self, fname):\n    self.fname = fname\n  \n  def sayHello(self):\n    print \"Hello, \" + self.fname + \"!\"", "category": "Python"}, {"instruction": "How can we inverse the numerical order of elements stored in an array?", "input": "", "output": "To invert the order of elements stored in an array, we can use the reverse() function. This function takes in an array and reverses the order of the elements in-place, returning nothing. The syntax is as follows:\n\narray.reverse()", "category": "Python"}, {"instruction": "Write a python program to remove all the elements from a list that are less than 10.", "input": "mylist = [4, 7, 21, 24, 88, 12]", "output": "def remove_less_than_10(mylist):\n    return [n for n in mylist if n >= 10]", "category": "Python"}, {"instruction": "Create a dictionary to store the phone numbers of your friends.", "input": "list_friends = [\"John\", \"Doe\", \"Jane\", \"Smith\"]", "output": "friends_phone_numbers = {}\nfor name in list_friends:\n    phone_number = input(f'Please enter the phone number for {name}: ')\n    friends_phone_numbers[name] = phone_number", "category": "Python"}, {"instruction": "Use the given code to create a Pandas Dataframe.", "input": "data = {'Name': ['Jack', 'James', 'Joe'], \n        'Age': [21, 22, 23]}", "output": "import pandas as pd\ndf = pd.DataFrame(data)", "category": "Python"}, {"instruction": "Create a program that prints out the set of all prime divisors of a given number", "input": "num = 50", "output": "primes = []\nfor i in range(2, num+1):\n    is_prime = True\n    for j in range(2, int(i**0.5)+1):\n        if (i % j) == 0:\n            is_prime = False\n            break\n\n    if is_prime:\n        primes.append(i)\n\nprime_divisors = {i for i in primes if num % i == 0}\nprint(prime_divisors)", "category": "Python"}, {"instruction": "Sort an array of integers according to their frequency of occurrence", "input": "arr = [1, 1, 2, 2, 2, 3, 4, 4]", "output": "freq = {}\nfor i in arr:\n    if i in freq.keys():\n        freq[i] += 1\n    else: \n        freq[i] = 1\n\n# Create list of tuple\nfreq_lst = []\nfor k,v in freq.items():\n    freq_lst.append((k,v))\n\n# Sort the list of tuple in descending order\nfreq_lst = sorted(freq_lst, key = lambda x : x[1], reverse = True)\n\n# Create list from sorted tuple\nsorted_arr = [i[0] for i in freq_lst]\nprint(sorted_arr)", "category": "Python"}, {"instruction": "Design a program that takes a date in the format dd/mm/yyyy as input and prints the day of that given date", "input": "01/02/2020", "output": "day = int(input(\"Enter date in dd/mm/yyyy format: \").split('/')[0])\nmonth = int(input(\"Enter date in dd/mm/yyyy format: \").split('/')[1])\nyear = int(input(\"Enter date in dd/mm/yyyy format: \").split('/')[2])\n\n# Determine day name\nday_num = datetime(year, month, day).weekday()\ndays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\nday_name = days[day_num]\n\nprint(\"The day is: \", day_name)", "category": "Python"}, {"instruction": "Create a program that finds all the prime numbers between 1-100", "input": "", "output": "for number in range(1,101):\n    # To check if a number is prime or not\n    is_prime = True\n  \n    # We need to check until the square root of that number\n    for i in range(2, int(number**0.5)+1):\n        if number % i == 0:\n            is_prime = False\n            break\n  \n    if is_prime:\n        print(number, end=\" \")", "category": "Python"}, {"instruction": "Modify the previous program to also print the sum of the subarray elements", "input": "arr = [1, 4, 6, 8, -5, 7], k = 11", "output": "max_sum = 0 \nstart = 0 \nend = 0\n\n# Loop through each element of the array\nfor i in range(len(arr)): \n    sum = 0\n  \n    # Find maximum sum subarray\n    for j in range(i, len(arr)): \n        sum += arr[j] \n        if (sum > max_sum and sum <= k): \n            max_sum = sum \n            start = i \n            end = j \n  \n# Print maximum subarray and its sum\nprint(\"Maximum sum subarray with sum <=\", k, \"is\") \nprint(\"[\", end=\"\") \nfor i in range(start, end+1): \n    print(arr[i], end=\", \") \nprint(\"]\")\nprint(\"Sum of the subarray elements:\", max_sum)", "category": "Python"}, {"instruction": "Given an array of n elements and an integer k, find the subarray with the maximum sum less than k.", "input": "arr = [1, 4, 6, 8, -5, 7], k = 11", "output": "max_sum = 0 \nstart = 0 \nend = 0\n\n# Loop through each element of the array\nfor i in range(len(arr)): \n    sum = 0\n  \n    # Find maximum sum subarray\n    for j in range(i, len(arr)): \n        sum += arr[j] \n        if (sum > max_sum and sum <= k): \n            max_sum = sum \n            start = i \n            end = j \n  \n# Print maximum subarray\nprint(\"Maximum sum subarray with sum <=\", k, \"is\") \nprint(\"[\", end=\"\") \nfor i in range(start, end+1): \n    print(arr[i], end=\", \") \nprint(\"]\")", "category": "Python"}, {"instruction": "Parse data from a given JSON object.", "input": "data:\n{\n  \"data\": [\n    {\n      \"name\": \"John\",\n      \"age\": 24\n    },\n    {\n      \"name\": \"Bob\",\n      \"age\": 26\n    }\n  ]\n}", "output": "import json\n\ndata = '{\"data\":[{\"name\":\"John\",\"age\":24},{\"name\":\"Bob\",\"age\":26}]}'\n\nparsed_data = json.loads(data)\n\nfor item in parsed_data['data']:\n  print(item['name'] + \" is \" + str(item['age']) + \"years old.\")", "category": "Python"}, {"instruction": "Create a function to reverse a list without using the reverse() method.", "input": "", "output": "def reverse_list(lst): \n    reversed_list = [] \n    for i in range(len(lst) - 1, -1, -1): \n        reversed_list.append(lst[i]) \n    return reversed_list", "category": "Python"}, {"instruction": "Create a script in Python for printing the Fibonacci series for a given range of numbers.", "input": "start = 1\nend = 10", "output": "a,b = 0,1\nfor i in range(start, end+1):\n    print(a)\n    a,b = b,a+b", "category": "Python"}, {"instruction": "How can we sort a dictionary by value in Python?", "input": "", "output": "We can use the sorted() function in combination with the operator.itemgetter() operator to sort the dictionary by value in Python. The syntax is as follows:\n\nsorted(dictionary.items(), key=operator.itemgetter(1))", "category": "Python"}, {"instruction": "Update a given line of code to make a function return 'True' if both values are equal.", "input": "def compare(val1, val2):\n    if val1 == val2:", "output": "def compare(val1, val2):\n    if val1 == val2:\n      return True", "category": "Python"}, {"instruction": "Generate a unique key using the following string.", "input": "my_str = \"Hello World\"", "output": "import uuid \n \nkey = uuid.uuid5(uuid.NAMESPACE_DNS, my_str)", "category": "Python"}, {"instruction": "Write a function in Python to print a diamond pattern of stars.", "input": "", "output": "def diamond_pattern():\n row = 5\n for i in range(1, row + 1):\n  print(\" \"*(row-i)+\"*\"*(2*i-1))\n if row > 1:\n  for i in range(row-1, 0, -1):\n   print(\" \"*(row-i)+\"*\"*(2*i-1))", "category": "Python"}, {"instruction": "Create a Python Search Algorithm to search for a given number in a given sorted array.", "input": "data = [1, 7, 11, 14, 16]\nsearch_num = 14", "output": "def search(data, search_num):\n for i in range(len(data)):\n  if data[i] == search_num:\n   return i\n return -1", "category": "Python"}, {"instruction": "Write a function in Python to generate all permutations of the given list of letters.", "input": "['a','b','c','d']", "output": "def permutations(letters):\n permutations = []\n for a in letters:\n for b in letters:\n for c in letters:\n for d in letters:\n permutations.append(''.join(sorted([a, b, c, d])))\n return permutations", "category": "Python"}, {"instruction": "Create a Python class to represent a Person object. The class should contain the person's name, age, and occupation.", "input": "", "output": "class Person:\n  def __init__(self, name, age, occupation):\n    self.name = name\n    self.age = age\n    self.occupation = occupation", "category": "Python"}, {"instruction": "Create a program that reverses an array", "input": "Array = [1,2,3,4,5]", "output": "def reverse(arr):\n    start = 0\n    end = len(arr)-1\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n    return arr\n\narr = [1,2,3,4,5]\n\nprint(reverse(arr))", "category": "Python"}, {"instruction": "Create a code that removes all duplicates from an input array", "input": "Array = [1,2,3,3,2,1]", "output": "def remove_duplicates(arr):\n    result = []\n    for i in arr:\n        if i not in result:\n            result.append(i)\n    return result\n\narr = [1,2,3,3,2,1]\n\nprint(remove_duplicates(arr))", "category": "Python"}, {"instruction": "Write a Python script to generate random passwords with a combinations of 6 letters and numbers.", "input": "", "output": "import random\n\ndef generate_password(): \n    chars = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    password = ''\n    for i in range(6):\n        password += random.choice(chars)\n    return password\n\nprint(generate_password())", "category": "Python"}, {"instruction": "Create a class Animal with two methods: speak(), which prints out the sound the animal makes, and eat() which prints out the food the animal eats.", "input": "", "output": "class Animal():\n    def __init__(self):\n        pass\n    def speak(self):\n        print(\"Animal sound\")\n    def eat(self):\n        print(\"Animal food\")", "category": "Python"}, {"instruction": "Create a code that sums the first n Fibonacci numbers.", "input": "num = 5", "output": "def sum_n_fibonacci_numbers(num):\n    \"\"\"This function takes in a number, n, and sums\n    the first n Fibonacci numbers.\n    \n    Parameters\n    ----------\n    num : int\n        The number of Fibonacci numbers to sum.\n    \n    Returns\n    -------\n    The sum of the first n Fibonacci numbers.\n    \"\"\"\n    \n    fib = [0, 1]\n    if num < 0:\n        return None\n    elif num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        for i in range(2, num + 1):\n            fib.append(fib[i-2] + fib[i-1])\n        return sum(fib)", "category": "Python"}, {"instruction": "Create a function that takes in two lists of numbers and returns a new list of numbers in which each element is the sum of the corresponding elements in the two input lists.", "input": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]", "output": "def add_lists_elementwise(list1, list2):\n    \"\"\"This function takes in two lists of numbers and \n    returns a new list of numbers in which each element\n    is the sum of the corresponding elements in the \n    two input lists.\n    \n    Parameters\n    ----------\n    list1 : list\n        The first list of numbers.\n    list2 : list\n        The second list of numbers.\n    \n    Returns\n    -------\n    A new list in which each element is the sum of the\n    corresponding elements in the two input lists.\n    \"\"\"\n    \n    return [x + y for x, y in zip(list1, list2)]", "category": "Python"}, {"instruction": "Create a code to sort a list of strings based on the length of the strings.", "input": "my_list = ['apples', 'bananas', 'oranges']", "output": "def sort_strings_by_length(my_list):\n    \"\"\"This function takes in a list of strings and sorts\n    them based on the length of the strings.\n    \n    Parameters\n    ----------\n    my_list : list\n        The list of strings.\n    \n    Returns\n    -------\n    The sorted list of strings.\n    \"\"\"\n    \n    return sorted(my_list, key=len)", "category": "Python"}, {"instruction": "Create a function that takes in a dictionary and returns a new dictionary with the values squared.", "input": "my_dict = {1:5, 2:6, 3:7}", "output": "def squared_values(my_dict):\n    \"\"\"This function takes in a dictionary as an argument,\n    and returns a new dictionary containing the values of the\n    original dictionary squared.\n    \n    Parameters\n    ----------\n    my_dict : dict\n        The input dictionary.\n    Returns\n    -------\n    A new dictionary with the values of the original\n    dictionary squared.\n    \"\"\"\n    \n    return {k : v**2 for k, v in my_dict.items()}", "category": "Python"}, {"instruction": "Create a function to search a list l for the value v.", "input": "list l = [1, 2, 3, 4, 5, 6]\nvalue v = 4", "output": "def search_list(l, v):\n    # Iterate through the list\n    for i in l:\n        # Check if the current item is equal to v\n        if i == v:\n            return True\n    \n    # Return False if we did not find the value\n    return False\n\n# Search for the value 4\nsearch_list([1, 2, 3, 4, 5, 6], 4) # Output: True", "category": "Python"}, {"instruction": "Design a function in Python to split a sentence into words", "input": "", "output": "def split_sentence(sentence):\n    return sentence.split(' ')", "category": "Python"}, {"instruction": "Write the following pseudocode in python", "input": "\"for each element in the list, check if the number is even\"", "output": "for element in some_list:\n    if element % 2 == 0:\n        # do something", "category": "Python"}, {"instruction": "Design a function in Python that takes two parameters, a list and a number, and returns a list where all elements are multiplied by the number.", "input": "[1,2,3], 4", "output": "def mul_list(input_list, number): \n    return [x*number for x in input_list]", "category": "Python"}, {"instruction": "Define a class in Python to represent a rectangle and add a method to calculate its area.", "input": "", "output": "class Rectangle:\n    def __init__(self, length, width):\n         self.length = length\n         self.width = width\n\n    def area(self):\n        return self.length * self.width", "category": "Python"}, {"instruction": "Given a list of words, create a reverse lookup dictionary (word as key, indices as values).", "input": "words = ['apple', 'ball', 'cat', 'ball']", "output": "words = ['apple', 'ball', 'cat', 'ball']\n\nreverse_lookup = {word: [i for i, v in enumerate(words) if v == word] for word in set(words)}", "category": "Python"}, {"instruction": "Complete the given function to print the Cartesian product of two sets.", "input": "A = {0, 1, 2}\nB = {3, 4, 5, 6}\n\ndef cartesian_product(A, B):", "output": "A = {0, 1, 2}\nB = {3, 4, 5, 6}\n\ndef cartesian_product(A, B):\n\tC = set()\n\tfor a in A:\n\t\tfor b in B:\n\t\t\tC.add((a, b))\n\treturn C", "category": "Python"}, {"instruction": "Add the `color` parameter to this function and make sure it works properly.", "input": "def printShape(num, shape):\n    for i in range(0,num):\n        print(shape)", "output": "def printShape(num, shape, color):\n\tfor i in range(0, num):\n\t\tprint(color + shape)", "category": "Python"}, {"instruction": "Given the following function that takes in a string and returns true if it is a palindrone. Rewrite the function to make it more optimized.", "input": "def is_palindrome(s):\n    s = str(s).lower().replace(\" \",\"\")\n    return s == s[::-1]", "output": "def is_palindrome(s):\n    s = ''.join(char.lower() for char in s if char.isalpha())\n    return s == s[::-1]", "category": "Python"}, {"instruction": "Create an inheritance hierarchy of three classes, \"Person\", \"Student\" and \"Professor\"", "input": "", "output": "class Person { \n  // properties and methods\n} \n  \nclass Student extends Person { \n  // properties and methods\n} \n  \nclass Professor extends Person { \n  // properties and methods\n}", "category": "Python"}, {"instruction": "Answer the following question: What is the difference between a keyword and an identifier in Python?", "input": "", "output": "In Python, a keyword is a reserved word that has a specific pre-defined meaning and purpose in the language, while an identifier is any name that you assign to a variable, function, class, module or any other object. Keywords are words that are reserved for specific functions and operations, while identifiers are used to name user-defined objects.", "category": "Python"}, {"instruction": "Write a Python script to Iterate over a given list and print the square of the numbers in the list.", "input": "list = [3, 4, 5]", "output": "for num in list:\n  print(num*num)", "category": "Python"}, {"instruction": "Write a function in Python to implement a linear search algorithm. The algorithm should return the index of the number in the array if found, otherwise -1.", "input": "data = [7, 13, 11, 9, 12]\nsearch_num = 9", "output": "def linear_search(data, search_num):\n for index, num in enumerate(data):\n  if num == search_num:\n   return index\n return -1", "category": "Python"}, {"instruction": "Implement a function in Python to reverse the contents of a given dictionary.", "input": "dictionary = {\n    \"name\": \"John Doe\", \n    \"age\": 30,\n    \"city\": \"New York\"\n    }", "output": "def reverse_dictionary(d): \n    return dict(zip(d.values(), d.keys())) \n\nprint(reverse_dictionary(dictionary))", "category": "Python"}, {"instruction": "Convert this function written in Python to JavaScript code.", "input": "def divide_two_numbers(a, b):\n    if b == 0: \n        return \"Division by 0 not allowed!\"\n    return a / b", "output": "function divide_two_numbers(a, b) {\n    if(b == 0) {\n        return \"Division by 0 not allowed!\";\n    }\n    return a / b;\n}", "category": "Python"}, {"instruction": "Write a function that prints values from the given list in one line separated by a comma and a space.", "input": "list = [4, 10, 15]", "output": "def print_list(list):\n    for item in list:\n        print(item, end=', ')\n\nprint_list(list) # Output: 4, 10, 15,", "category": "Python"}, {"instruction": "Create an object-oriented Python program to simulate a simple calculator with a add, subtract and \\multiply\" function", "input": "", "output": "\"\"\"Object-oriented Python program to simulate a simple calculator with add, subtract and multiply function\"\"\"\n\n# create a class Calculator\nclass Calculator:\n\n    def add(self, x, y):\n        return x + y\n\n    def subtract(self, x, y):\n        return x - y\n\n    def multiply(self, x, y):\n        return x * y\n\n# create an instance of class Calculator\ncalc = Calculator()\n\n# call the add, subtract and multiply functions \nprint(calc.add(5,5))\nprint(calc.subtract(5,5))\nprint(calc.multiply(5,5))", "category": "Python"}, {"instruction": "Convert the following timestamp to ISO 8601 format", "input": "1579183000", "output": "import time\n\ndef timestamp_to_iso8601(timestamp):\n    \"\"\"Convert the given timestamp to ISO 8601 format\"\"\"\n    return time.strftime('%Y-%m-%dT%H:%M:%SZ', time.localtime(timestamp))", "category": "Python"}, {"instruction": "Create a function to check if an array contains any duplicate elements", "input": "[1, 3, 5, 7, 9]", "output": "def has_duplicates(arr):\n    \"\"\"Check if an array contains any duplicate elements.\"\"\"\n    return len(arr) != len(set(arr))", "category": "Python"}, {"instruction": "Write a function to sort a list of integers in non-increasing order", "input": "[9, 6, 7, 4, 3, 5]", "output": "def sort_desc(arr):\n    \"\"\"Sort a list of integers in non-increasing order.\"\"\"\n    return sorted(arr, reverse=True)", "category": "Python"}, {"instruction": "encode a given string using the Base64 algorithm", "input": "String: MySuperSecretString", "output": "import base64\n\ndef encode_base64(string):\n    \"\"\"Encode the given string using the Base64 algorithm\"\"\"\n    byte_string = string.encode('utf-8')\n    return base64.b64encode(byte_string).decode('utf-8')", "category": "Python"}, {"instruction": "Create a function which takes an array as input and check if any of its elements are equal to the given value.", "input": "Array: [1, 2, 3, 4, 5]\nValue: 4", "output": "def element_equal(arr, value):\n    \"\"\"Check if any element in the array is equal to the given value.\"\"\"\n    for ele in arr:\n        if ele == value:\n            return True\n    return False", "category": "Python"}, {"instruction": "Write a code that converts a given binary number to its equivalent decimal number.", "input": "", "output": "def binary_to_decimal(binary): \n    decimal = 0\n    base = 1\n    binary = str(binary)\n    length = len(binary) \n    for i in range(length-1, -1, -1): \n        if (binary[i] == '1'):      \n            decimal += base\n        base = base * 2\n    return decimal", "category": "Python"}, {"instruction": "What is the mathematical expression for calculating next fibonacci number from any number?", "input": "", "output": "The mathematical expression for calculating the next fibonacci number from any number is F(n+1)=F(n)+F(n-1) where n is the number for which we want to calculate the next fibonacci number.", "category": "Python"}, {"instruction": "How do you install a Python package on Windows?", "input": "", "output": "The easiest way to install a Python package on Windows is to open the Command Prompt and type the command 'pip install <package name>'. This will install the package using pip, the Python package manager. Alternatively, Python packages can be installed using the Windows Subsystem for Linux (WSL). To do this, open a bash shell using the Windows Key + x and typing 'bash'. Then, type 'sudo apt install <package name>'. This will install the package from the Ubuntu repositories.", "category": "Python"}, {"instruction": "Create a program to calculate the total marks of a student.", "input": "Marks of 5 Subjects:\nEnglish: 35\nMaths: 88\nChemistry: 70\nPhysics: 45\nComputer: 80", "output": "def calculate_total(marks):\n    total = 0\n    for mark in marks:\n        total += mark\n    return total\n\nscores = {\n    \"English\": 35,\n    \"Maths\": 88,\n    \"Chemistry\": 70,\n    \"Physics\": 45,\n    \"Computer\": 80\n}\n\ntotal_marks = calculate_total(scores.values())\nprint(total_marks) # Output: 328", "category": "Python"}, {"instruction": "Generate a random text using the given code.", "input": "seed_text = \"This is starting sentence.\"", "output": "This is starting sentence. It was a sunny day with a gentle breeze. I walked slowly, taking in the scenery around me. The birds were singing and the grass was swaying in the wind. The sky was a brilliant blue with white clouds drifting by. I felt a peace come over me, a peace that I hadn't felt in a long time.", "category": "Python"}, {"instruction": "Generate a function to flatten a nested list.", "input": "list = [1, 2, [3, 4, [5]], [[6], 7]]", "output": "def flatten_list(list):\n    s=[]\n    \n    for v in list:\n        if isinstance(v, list):\n            s+=flatten_list(v)\n        else:\n            s.append(v)\n    \n    return s", "category": "Python"}, {"instruction": "Generate a function that prints all combination of unique integer elements from an array.", "input": "Array: [1,2,3]", "output": "def print_all_combinations(arr):\n    n = len(arr)\n    result = []\n    def combinations(arr, start, end, index, r):\n        if index == r: \n            result.append(list(arr[start : end + 1]))  \n            return\n        for i in range(start, end + 1): \n            arr[start], arr[i] = arr[i], arr[start]  \n            combinations(arr, start + 1, end, index + 1, r) \n            arr[start], arr[i] = arr[i], arr[start] \n  \n    for i in range(1, n + 1):\n        combinations(arr, 0, n - 1, 0, i)\n    print(*result, sep = \"\\n\")", "category": "Python"}, {"instruction": "Implement a class to calculate the sum of two numbers.", "input": "", "output": "# Program to calculate sum of two numbers\n\nclass Sum:\n    def __init__(self, num1, num2):\n        self.num1 = num1\n        self.num2 = num2\n    \n    def calculate_sum(self):\n        return self.num1 + self.num2\n\nnum1 = 10\nnum2 = 20\n\ns = Sum(num1, num2)\nprint(f\"The sum of {num1} and {num2} is {s.calculate_sum()}.\")", "category": "Python"}, {"instruction": "Check if the following word is a palindrome", "input": "word = \"level\"", "output": "word = \"level\"\n\n# Program to check if a word is a palindrome\n\nis_palindrome = True\nfor i in range(len(word)//2):\n    if word[i] != word[len(word)-1-i]:\n        is_palindrome = False\n        break\n\nif is_palindrome:\n    print(f\"{word} is a palindrome.\")\nelse:\n    print(f\"{word} is not a palindrome.\")", "category": "Python"}, {"instruction": "Implement a custom defined length function that works with strings.", "input": "", "output": "# Implementation of custom length function\n\ndef length(string):\n    count = 0\n    for char in string:\n        count += 1\n    return count\n\nprint(length(\"Hello World!\"))", "category": "Python"}, {"instruction": "Construct a python program to determine if a number is prime or composite.", "input": "", "output": "# Program to determine whether a number is prime or composite\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nnumber = int(input(\"Enter a number: \"))\nif is_prime(number):\n    print(f\"{number} is a prime number.\")\nelse:\n    print(f\"{number} is a composite number.\")", "category": "Python"}, {"instruction": "Construct a Fibonacci Heap class.", "input": "", "output": "\"\"\"\nConstruct a Fibonacci Heap class\n\"\"\"\n\nclass FibonacciHeap:\n    def __init__(self):\n        self.min = None\n        self.nodes = []\n    \n    def insert(self, node):\n        self.nodes.append(node)\n        if self.min is None or node.key < self.min.key:\n            self.min = node\n    \n    def extract_min(self):\n        min_node = self.min\n        self.min = None\n        return min_node \n\nif __name__ == '__main__':\n    heap = FibonacciHeap()\n    node1 = Node(3)\n    node2 = Node(10)\n    heap.insert(node1)\n    heap.insert(node2)\n    print(heap.extract_min().data) # prints 3", "category": "Python"}, {"instruction": "Construct a Linked List class.", "input": "", "output": "\"\"\"\nConstruct a Linked List class\n\"\"\"\n\nclass Node: \n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    \n    def add_node(self, data):\n        temp = Node(data) \n        temp.next = self.head\n        self.head = temp\n    \n    def print_list(self):\n        current = self.head\n        while current:\n            print(current.data)\n            current = current.next\n\nif __name__ == '__main__':\n    llist = LinkedList()\n    llist.add_node(1)\n    llist.add_node(3)\n    llist.add_node(5)\n    llist.add_node(7)\n    llist.print_list() # prints 7 5 3 1", "category": "Python"}, {"instruction": "How can you convert a binary search tree into an array?", "input": "", "output": "One way to convert a binary search tree into an array is to first use an inorder traversal to visit all the nodes of the tree in order. We can then store the node values into an array as we traverse. This will result in an array containing the elements in ascending order, which is the same order they would appear in the binary search tree. This approach runs in O(n) time complexity.", "category": "Python"}, {"instruction": "Describe an efficient way to find the minimum value in an unsorted array.", "input": "", "output": "One efficient way to find the minimum value in an unsorted array is to make use of the divide-and-conquer approach. We can split the array into two halves and find the minimum element in each of them. Then we can compare the two minimum elements to find the global minimum in the array. This approach runs in O(log n) time complexity.", "category": "Python"}, {"instruction": "Generate a method to print the Nth element of a Fibonacci sequence.", "input": "N: 5", "output": "def Fibonacci(n): \n    f1 = 0 \n    f2= 1\n    if n<1: \n        print(\"Incorrect input\") \n    elif n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else:\n        for x in range(2, n): \n            next = f1 + f2 \n            f1 = f2 \n            f2 = next \n        return f2", "category": "Python"}, {"instruction": "Write a code to reverse a sentence word by word.", "input": "This is a sentence", "output": "def reverse_words(sentence):\n    words = sentence.split(' ')\n    reversed_words = [word[::-1] for word in words]\n    return ' '.join(reversed_words)\n    \nprint(reverse_words('This is a sentence')) # Output: sihT si a ecnetnes", "category": "Python"}, {"instruction": "Generate a random number between 0 and 1 using the random module in Python.", "input": "", "output": "import random\n\nrandom_number = random.random()\nprint(random_number) # Output: 0.00549342319234", "category": "Python"}, {"instruction": "Create a generator which generates the first ten square numbers.", "input": "", "output": "def generate_squares():\n    for num in range(1, 11):\n        yield num**2\n\nfor square in generate_squares():\n    print(square, end=', ') # Output: 1, 4, 9, 16, 25, 36, 49, 64, 81, 100,", "category": "Python"}, {"instruction": "Write a Python code to compute the dot product of two given vectors.", "input": "[1, 2, 3] and [4, 5, 6]", "output": "def dot_product(v1, v2):\n    product = 0\n    for i in range(len(v1)):\n        product += v1[i] * v2[i]\n    return product", "category": "Python"}, {"instruction": "Write a Python code that checks if a given string only contains alphabets.", "input": "", "output": "import re \n  \ndef is_alphabetic(string):  \n    Pattern = re.compile(\"^[a-zA-Z]*$\")\n    return bool(Pattern.match(string))", "category": "Python"}, {"instruction": "How do you add an element to the end of an array in Python?", "input": "", "output": "To add an element to the end of an array in Python, use the append() method. For example, to add the element \"apple\" to the end of the array [\"orange\", \"banana\"], use the following code:\n\nmy_array = [\"orange\", \"banana\"]\nmy_array.append(\"apple\")", "category": "Python"}, {"instruction": "Write a Python class for a Person with attributes name, age, and address.", "input": "", "output": "class Person:\n  def __init__(self, name, age, address):\n    self.name = name\n    self.age = age\n    self.address = address\n    \n  def setName(self, name):\n    self.name = name\n  \n  def getName(self):\n    return self.name\n  \n  def setAge(self, age):\n    self.age = age\n  \n  def getAge(self):\n    return self.age\n  \n  def setAddress(self, address):\n    self.address = address\n  \n  def getAddress(self):\n    return self.address", "category": "Python"}, {"instruction": "Develop a Python script to print out a given string 5 times.", "input": "str = \"Hello World!\"", "output": "for i in range(5):\n  print(str)", "category": "Python"}, {"instruction": "Compute the product of two matrices.", "input": "A [[2, 4], [3, 7]]\nB [[9, 2], [7, 1]]", "output": "# Python Program to calculate the product of two matrices \n\nA = [[2, 4], [3, 7]] \nB = [[9, 2], [7, 1]] \n  \n\n# function to calculate the product of two matrices \ndef multiplyMatrix(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    if colsA != rowsB: \n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\") \n        return\n  \n    # Create an empty product matrix C[rowA][colB] \n    C = [[0 for row in range(colsB)] for col in range(rowsA)] \n  \n    # Multiply and fill in the product matrix \n    for i in range(rowsA): \n        for j in range(colsB): \n            for k in range(colsA): \n                  C[i][j] += A[i][k] * B[k][j] \n  \n    return C \n  \n  \n# Print the product \nresult = multiplyMatrix(A, B) \nfor r in result: \n    print(r)", "category": "Python"}, {"instruction": "Create a new virtual environment for Python.", "input": "", "output": "Convert your current directory to a virtual environment:\n\npython3 -m venv <name of virtual environment>\n\nActivate the virtual environment:\n\nsource <name of virtual environment>/bin/activate\n    \nDeactivate the virtual environment:\n\ndeactivate", "category": "Python"}, {"instruction": "Given the following list, create a Python dictionary having the ID as the key and the full name as the value.", "input": "my_list = [('John', '1'), ('Alice', '2'), ('Bob', '3')]", "output": "my_dict = dict(my_list)\nprint(my_dict)\n# Output: {'John': '1', 'Alice': '2', 'Bob': '3'}", "category": "Python"}, {"instruction": "Using the input list, write a function to calculate the sum of all the elements in the list.", "input": "my_list = [1, 2, 3, 4]", "output": "def calculate_sum(my_list):\n    sum = 0\n    for i in my_list:\n        sum += i\n    return sum\n\nprint(calculate_sum(my_list))\n# Output: 10", "category": "Python"}, {"instruction": "Write a function in Python to calculate the number of minutes a user has been logged in.", "input": "log_in_time = '11:30:00', log_out_time = '13:30:00'", "output": "def calculate_time_difference(log_in_time, log_out_time) :\n  time_in = datetime.strptime(log_in_time, '%H:%M:%S')\n  time_out = datetime.strptime(log_out_time, '%H:%M:%S')\n  diff = time_out - time_in\n  minute_difference = diff.seconds // 60\n  return minute_difference\n\nprint(calculate_time_difference('11:30:00', '13:30:00'))\n# Output: 120", "category": "Python"}, {"instruction": "Summarize the key concepts in this Python code snippet.", "input": "import random\n\nfor x in range(0, 10):\n  print(\"Random number generated: \", random.randrange(1, 10))", "output": "This Python code snippet generates and prints out 10 random numbers between 1 and 10 using the \"random.randrange()\" function.", "category": "Python"}, {"instruction": "Compare two given arrays and find the common elements present in both", "input": "arr1 = [1, 2, 3, 5], arr2 = [3, 5, 7, 8]", "output": "def get_common_elements(arr1, arr2):\n    common_elements = []\n    for a in arr1:\n        if a in arr2:\n            common_elements.append(a)\n    return common_elements", "category": "Python"}, {"instruction": "Iterate over a given array and modify each element by adding a constant value to it.", "input": "arr = [3, 7, 8], constant = 4", "output": "def modify_elements(arr, constant):\n    for i in range(len(arr)):\n        arr[i] += constant", "category": "Python"}, {"instruction": "Create a function that examines the character and determines if it's an uppercase letter or not.", "input": "", "output": "def is_uppercase(character):\n    if character.isalpha and character.isupper():\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Identify the bug in the following code and provide a solution.", "input": "def calculate_average(numbers):\n    sum = 0\n    for number in numbers:\n       sum += numbers\n    return sum/len(numbers)", "output": "The bug in the code is that the variable \"number\" is not used inside the for loop. Instead, the variable \"numbers\" is used. To fix this, the line \"sum += numbers\" should be replaced with \"sum += number\". This will ensure that the correct variable is used inside the loop and the code will execute as expected.", "category": "Python"}, {"instruction": "What needs to be done to use the random module in Python?", "input": "", "output": "The random module needs to be imported in order to use it in Python. To do this, you can use the following line of code: \"import random\". Once the module has been imported, you can use the functions provided by the module in your code.", "category": "Python"}, {"instruction": "Edit the following program to output a list of the numbers that are divisible by 3", "input": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nresult = []\nfor num in numbers:\n    if num % 3 == 0:\n        result.append(num)\n\nprint(result)", "category": "Python"}, {"instruction": "Use a nested loop to print the output.", "input": "", "output": "for i in range(3):\n    for j in range(3):\n        print('*', end=' ')\n    print()", "category": "Python"}, {"instruction": "Implement a breadth-first search algorithm to find the shortest path between two nodes.", "input": "", "output": "def BFS(graph, start, end):\n\t# Create an empty queue \n    queue = []\n    # Create a set to store visited nodes\n    visited = set()\n    # Enqueue the starting node\n    queue.append([start])\n    while queue:\n        # Get the first path and process it\n        path = queue.pop()\n        # Get the last node from the path\n        node = path[-1]\n        \n        if node == end:\n            return path\n        elif node not in visited:\n            # Create a list of neighbours\n            neighbours = graph[node]\n            # Go through all neighbours\n            for neighbour in neighbours:\n                # Create a new path with the neighbour\n                new_path = list(path)\n                new_path.append(neighbour)\n                # Add the new path to the queue\n                queue.append(new_path)\n            # Mark the node as visited\n            visited.add(node)\n    return None", "category": "Python"}, {"instruction": "Generate a 5 rows by 4 columns matrix of random numbers between 0 and 10 in Python", "input": "", "output": "import random \n\nmatrix = [] \nfor i in range(5): \n    matrix.append([random.randint(0, 10) for j in range(4)]) \n\nprint(matrix)", "category": "Python"}, {"instruction": "Write a Python script to find all the numbers which are divisible by 7, but are not multiples of 5; between 2000 and 3200 (both included).", "input": "", "output": "res = []\nfor i in range(2000, 3200):\n    if (i%7 == 0) and (i%5 != 0):\n        res.append(str(i))\n\nprint(','.join(res))", "category": "Python"}, {"instruction": "Store the given data in a dictionary structure in python.", "input": "key: name \nvalue: John", "output": "mydict = {\n    \"name\": \"John\"\n}", "category": "Python"}, {"instruction": "Write a Python program to find all pairs of numbers in the given list whose sum is equal to the given number.", "input": "nums = [1, 2, 3, 4, 5], sum = 8", "output": "def find_pairs(nums, sum):\n  result = []\n  for i in range(len(nums)):\n    for j in range(i+1, len(nums)):\n      if nums[i] + nums[j] == sum:\n        result.append((nums[i], nums[j]))\n  return result\n\nres = find_pairs(nums, sum)\nprint(res)\n# Output: [(2, 6), (3, 5)]", "category": "Python"}, {"instruction": "Create a for loop in Python to find the combined length of all the strings in a list.", "input": "list = ['Data', 'Science', 'AI']", "output": "total_length = 0\n\nfor s in list:\n   total_length += len(s)\n\nprint(total_length)", "category": "Python"}, {"instruction": "Rewrite the above function in Python to use binary search algorithm instead of linear search.", "input": "data = [7, 13, 11, 9, 12]\nsearch_num = 9", "output": "def binary_search(data, search_num):\n low = 0\n high = len(data) - 1\n while low <= high:\n  mid = (low + high)//2\n  if data[mid] == search_num:\n   return mid\n  elif data[mid] < search_num:\n   low = mid + 1\n  else:\n   high = mid - 1\n return -1", "category": "Python"}, {"instruction": "Write a Python function to calculate the sum of the series 1^2 + 2^2 + 3^2 + ... + n^2.", "input": "n = 8", "output": "def sum_series(n):\n sum = 0 \n for num in range(1, n + 1):\n sum += num**2\n return sum", "category": "Python"}, {"instruction": "How can this code be refactored to make it more efficient?", "input": "x = 100\nif (x > 50)\n  y = x + 20\nelse\n  y = x - 20", "output": "The code can be refactored as follows: y = x+20 if x > 50 else x-", "category": "Python"}, {"instruction": "Suggest a Python program to execute a given block of code a specified number of times.", "input": "execute_n_times(5, print(\"Hello World!\"))", "output": "def execute_n_times(n, code):\n    for _ in range(n):\n        exec(code)", "category": "Python"}, {"instruction": "Write a Python program to remove duplicates from a list of dictionaries based on their values for a given key.", "input": "original_list = [{'name':'John', 'age': 25}, {'name':'Jim', 'age': 25}, {'name':'Lisa', 'age': 20}]", "output": "def remove_duplicates(original_list, key):\n    seen = set()\n    new_list = [item for item in original_list if key not in seen and (seen.add(item[key]) if item[key] is not None else True)]\n    return new_list", "category": "Python"}, {"instruction": "Write a Python function that takes a list of strings as parameter and returns a dictionary with the strings as keys and the length of each string as value.", "input": "words = ['apple', 'banana', 'cat']", "output": "def string_lengths(words):\n    return {word:len(word) for word in words}", "category": "Python"}, {"instruction": "Suggest a Python code for sorting a list of dictionaries based on ascending order of a given key.", "input": "original_list = [{'name':'John', 'age': 25}, {'name':'Jim', 'age': 18}, {'name':'Lisa', 'age': 20}]", "output": "def sort_by_age(original_list):\n    Return sorted(original_list, key = lambda i: i['age'])", "category": "Python"}, {"instruction": "Create a python script that takes three required parameters 'x', 'y' and 'z' and prints the result of x * y * z", "input": "x=4\ny=3\nz=2", "output": "def multiply(x, y, z):\n  return x * y * z\n  \nprint(multiply(4, 3, 2)) //output 24", "category": "Python"}, {"instruction": "Write a function to print a given character N times.", "input": "", "output": "def print_n_times(character, times):\n    for _ in range(times):\n        print(character, end=\"\")\n\nprint_n_times(\"*\", 5)", "category": "Python"}, {"instruction": "Enter the variables from the equation below into Python code.", "input": "2x + 5y - 7z = 9", "output": "x = 2\ny = 5\nz = -7", "category": "Python"}, {"instruction": "How do you debug an application in Python?", "input": "", "output": "Debugging an application in Python can be done using a variety of methods such as using a debugger like pdb, setting breakpoints, using logging, using the assert statement, etc. Additionally, tools like PyCharm and Visual Studio Code come with built-in debugging capabilities.", "category": "Python"}, {"instruction": "How would you extract emails from a given string using regex in Python?", "input": "", "output": "import re\n\ns = 'This string contains an email address: email@example.com'\n\nemails = re.findall(r'[\\w\\.-]+@[\\w\\.-]+', s)", "category": "Python"}, {"instruction": "Describe the differences between a static website and a dynamic website.", "input": "", "output": "static websites contain fixed content that is served whenever a user requests a page, while dynamic websites store content in a database and generate the page content based on user input or other variables. Static websites are faster to build and are easier to maintain, while dynamic websites can provide users with more interactive experiences.", "category": "Python"}, {"instruction": "Write a Python program to create a function that takes two numbers as arguments and returns a list of all odd numbers between them.", "input": "start_range = 2\nend_range = 10", "output": "def get_odds(start_range, end_range):\n    return [num for num in range(start_range, end_range+1) if num % 2 != 0]", "category": "Python"}, {"instruction": "Write a code to make an API call to a remote server.", "input": "", "output": "import requests\n\nurl = \"http://example.com/api\"\n\nresponse = requests.get(url)\ndata = response.json()", "category": "Python"}, {"instruction": "Assign ``num = 5`` to the ``num`` variable using the Python assignment operator.", "input": "", "output": "num = 5", "category": "Python"}, {"instruction": "Create a class in python with three functions, two of which must be called `add` and `subtract`.", "input": "", "output": "class MathOperations:\n    def add(self, a, b):\n        return a + b\n    \n    def subtract(self, a, b):\n        return a - b\n    \n    def multiply(self, a, b):\n        return a * b", "category": "Python"}, {"instruction": "Identify which elements in an array are even numbers.", "input": "nums = [1, 2, 3, 4, 5]", "output": "def is_even_num(nums):\n    result = []\n    for num in nums:\n        if num % 2 == 0:\n            result.append(num)\n    \n    return result", "category": "Python"}, {"instruction": "Design a function to get the user input and print the maximum among them.", "input": "", "output": "def getMaxNumber():\n    numbers = []\n    \n    num = int(input(\"Enter how many numbers: \"))\n    \n    for i in range(num):\n        numbers.append(int(input(\"Enter a number: \")))\n        \n    maxNum = max(numbers)\n    print(\"The maximum number is\", maxNum)", "category": "Python"}, {"instruction": "Write a code to find the sum of values present in two dimensional array", "input": "arr = [[1,2], [3,4], [5,6]]", "output": "def sum_two_dimensional_array(arr):\n    total = 0\n    for sublist in arr:\n        for i in sublist:\n            total += i\n    return total", "category": "Python"}, {"instruction": "Create a function to find all anagrams of a given word.", "input": "word = \"abbac\"", "output": "def anagrams(word):\n    if len(word) == 1:\n        return [word]\n    else:\n        anagrams_list = []\n        for i, letter in enumerate(word):\n            for j in anagrams(word[:i]+word[i+1:]):\n                anagrams_list.append(letter+j)\n        return anagrams_list", "category": "Python"}, {"instruction": "Write a code to convert an input string of numbers to an integer.", "input": "input_str = '1234'", "output": "def str_to_int(input_str):\n    num = 0\n    for i in input_str:\n        num = num * 10 + (ord(i) - ord('0')) \n    return num", "category": "Python"}, {"instruction": "Create a function to return the count of even numbers in a list", "input": "list_num = [4, 5, 6, 7, 8]", "output": "def count_even_numbers(list_num):\n    count = 0\n    for i in list_num:\n        if (i % 2 == 0):\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Design a program to search a list for a specified item", "input": "", "output": "def search_list(array, item):\n    for i in range(len(array)):\n        if array[i] == item:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Modify the following code so that it prints the Fibonacci numbers up to the given number", "input": "x = 10", "output": "def fibonacci(x):\n    a = 0\n    b = 1\n    if x < 0:\n        return []\n    elif x == 0:\n        return 0\n    elif x == 1:\n        return [0, 1]\n    else:\n        c = a + b\n        res = [a, b, c]\n        while c < x:\n            a = b\n            b = c\n            c = a + b\n            res.append(c)\n        return res", "category": "Python"}, {"instruction": "Rearrange the given fragments of code in order to build an ``if ... else ...`` statement in Python.", "input": "print('Success!')\nelse:\nif a > b", "output": "if a > b:\n    print('Success!')\nelse:", "category": "Python"}, {"instruction": "Write a Python program to convert an integer to a Roman numeral.", "input": "number = 2019", "output": "def to_roman(num):\n    thousands = [\"\", \"M\", \"MM\", \"MMM\"]\n    hundreds = [\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"]\n    tens = [\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"]\n    ones = [\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"]\n    \n    return thousands[num//1000] + hundreds[(num%1000)//100] + tens[(num%100)//10] + ones[num%10]", "category": "Python"}, {"instruction": "Write a Python program to compare two given lists and return True if their contents are the same.", "input": "list1 = [1, 3, 8, 9]\nlist2 = [1, 3, 8, 9]", "output": "def compare_lists(list1, list2):\n    return list1 == list2", "category": "Python"}, {"instruction": "Suggest a Python code for printing the sum, minimum and maximum of a given list.", "input": "list_elements = [1, 2, 4, 6, 8, 9]", "output": "def list_calculations(list_elements):\n    print('sum:', sum(list_elements))\n    print('min:', min(list_elements))\n    print('max:', max(list_elements))", "category": "Python"}, {"instruction": "Create an array containing 10 random numbers between 0 and 10.", "input": "", "output": "import random\n\n# Create an array with 10 random numbers\narray = []\nfor i in range(10):\n    array.append(random.randint(0,10))\n\n# Print the array\nprint(array)", "category": "Python"}, {"instruction": "Use .split() in Python to break the following text into a list of sentences.", "input": "text = \"Hello! My name is John. What is your name?\"", "output": "text = \"Hello! My name is John. What is your name?\"\n\nsentences = text.split(\". \")\nprint(sentences) # ['Hello! My name is John', 'What is your name?']", "category": "Python"}, {"instruction": "Write an algorithm to find the middle item in a linked list.", "input": "", "output": "# Finds the middle node in a linked list \n# Input: head of the linked list \n# Return: the middle element of the linked list \ndef findMiddleNode(head): \n\t# If the linked list is empty \n\tif (head is None): \n\t\treturn None\n\n\t# Find the length of the linked list \n\tlength, node = 0, head \n\twhile (node is not None): \n\t\tlength += 1\n\t\tnode = node.next\n\n\t# Jump to the middle of linked list \n\tnode = head \n\tfor _ in range(length // 2): \n\t\tnode = node.next\n\t\t\n\treturn mid", "category": "Python"}, {"instruction": "Create an array that contains the elements 1, 3, 5, 7, and 9 in random order.", "input": "", "output": "import random\n\n# Create an array with all our values\narray = [1, 3, 5, 7, 9]\n\n# Use the shuffle function to randomize\nrandom.shuffle(array)\n\n# Print out the randomized array\nprint(array)", "category": "Python"}, {"instruction": "Create a variable to store the text \"Python is a programming language\" and then print it.", "input": "", "output": "text = \"Python is a programming language\"\nprint(text)", "category": "Python"}, {"instruction": "Write a function to compare two lists of numbers and return a new list with the elements which are common to both the lists.", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [3, 5, 6, 7, 8]", "output": "def compare_lists(list1, list2):\n    new_list = []\n    for element in list1:\n        if element in list2:\n            new_list.append(element)\n    return new_list\n    \n# Call the compare_lists()\nlist_common = compare_lists(list1, list2)\n\n# Print the new_list\nprint(list_common) # [3, 5]", "category": "Python"}, {"instruction": "Write a code snippet that prints the current date and time in the format YYYY-MM-DD HH:MM:SS.", "input": "", "output": "import datetime\n\n# Get the current datetime\nnow = datetime.datetime.now()\n\n# Prints the current datetime in YYYY-MM-DD HH:MM:SS format\nprint(now.strftime(\"%Y-%m-%d %H:%M:%S\"))", "category": "Python"}, {"instruction": "Create a program that takes a given string and returns the frequency of each alphabet character.", "input": "", "output": "def get_character_frequency(str):\n    char_freq = {}\n    for char in str:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    return char_freq\n\nget_character_frequency(\"Hello World!\") # Output: { 'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1 }", "category": "Python"}, {"instruction": "Create a function that takes two strings and finds the longest common substring between them.", "input": "", "output": "def longest_common_substring(s1, s2): \n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]", "category": "Python"}, {"instruction": "Write a Python program to find the four letter words from a given list.", "input": "[\"tree\", \"door\", \"apple\", \"ball\", \"house\", \"cat\", \"wood\"].", "output": "\"\"\"\nA Python program to find the four letter words from a given list\n\"\"\"\n\n# Initializing the list \nwords = [\"tree\", \"door\", \"apple\", \"ball\", \"house\", \"cat\", \"wood\"] \n\n# Using list comprehension to extract four letter words \nfour_letter_words = [word for word in words if len(word) == 4] \n\n# Printing the four letter words \nprint(\"Four letter words:\", four_letter_words)", "category": "Python"}, {"instruction": "Create a program to print the FizzBuzz series", "input": "Up to the number 25", "output": "def fizzbuzz(n): \n    for num in range(1, n+1):\n        if num % 3 == 0 and num % 5 == 0:\n            print(\"FizzBuzz\")\n        elif num % 3 == 0: \n            print(\"Fizz\") \n        elif num % 5 == 0: \n            print(\"Buzz\")\n        else: \n            print(num)", "category": "Python"}, {"instruction": "Create a python program to determine the comprehesive count of words in a given string", "input": "Given the string s =\"python programming is fun\"", "output": "def count_words(s):\n    words = s.split(' ')\n    count = len(words)\n    return count", "category": "Python"}, {"instruction": "Create a function to print an inverted triangle", "input": "It should display 8 lines with 5 asterisks", "output": "def print_inverted_triangle():\n    for i in range(8, 0, -1):\n        print(\"*\" * i)", "category": "Python"}, {"instruction": "Create a function to generate Pythagorean Triples up to a given limit.", "input": "Limit: 20", "output": "# Create a function to generate pythagorean triples\ndef generator(limit):\n\t# Create an empty list to store the result\n\tresult = []\n    # Iterate over limit\n\tfor n in range(1, limit + 1):\n\t\tfor m in range(n + 1, limit +1):\n\t\t\ta = m*m - n*n\n\t\t\tb = 2*m*n\n\t\t\tc = m*m + n*n\n\t\t\tif c > limit:\n\t\t\t\tbreak\n\t\t\tif a > b:\n\t\t\t\tresult.append([a, b, c])\n\t\t\tif a < b:\n\t\t\t\tresult.append([b, a, c])\n\treturn result\n\n# Driver code\nlimit = 20\npythagorean_triples = generator(limit)\nprint(pythagorean_triples)", "category": "Python"}, {"instruction": "Calculate the Hamming distance of two binary strings.", "input": "String1: 1001100 \nString2: 1010101", "output": "def hammingDistance(str1, str2): \n    # Iterate through all possibles index of the strings \n    # and counting the number of different characters and return it.\n    distance = 0\n    for index in range(len(str1)): \n        if str1[index] != str2[index]: \n            distance += 1\n  \n    return distance \n\n# Driver code \nstr1 = '1001100'\nstr2 = '1010101'\nprint(hammingDistance(str1, str2))", "category": "Python"}, {"instruction": "Integrate the plotting library Matplotlib into this Python script.", "input": "import pandas as pd\ndata = pd.read_csv('data.csv')", "output": "import pandas as pd\nimport matplotlib.pyplot as plt \n\n# Read csv file \ndata = pd.read_csv('data.csv')  \n\n# Data visualization \nplt.plot(data) \nplt.xlabel('x-axis') \nplt.ylabel('y-axis')  \nplt.title('Plot of data')  \nplt.show()", "category": "Python"}, {"instruction": "Default a neural network architecture to classify the handwritten digit from 0 to 9.", "input": "", "output": "# Define the architecture\ndef model(input_shape):\n    model = tf.keras.Sequential([\n        tf.keras.layers.Flatten(input_shape=input_shape),\n        tf.keras.layers.Dense(128, activation='relu'),\n        tf.keras.layers.Dense(10, activation='softmax')\n    ]) \n    \n    model.compile(optimizer='adam',\n                  loss='sparse_categorical_crossentropy',\n                  metrics=['accuracy']) \n    \n    return model", "category": "Python"}, {"instruction": "Write a code for extracting the last n elements of a list.", "input": "List: [1, 2, 3, 4, 5], n = 3", "output": "# Define a function to extract the required elements\ndef extract_last_elements(list, n): \n    # Get the length of list \n    l = len(list)    \n    # Check if n is negative or greater than length \n    if n <= 0 or n > l: \n        return [] \n  \n    # return the last n elements \n    return list[l - n:]\n\n# Driver code\nlist = [1, 2, 3, 4, 5]\nn = 3\nprint (extract_last_elements(list, n))", "category": "Python"}, {"instruction": "Compute the cosine similarity of two vectors.", "input": "Vectors: [2, 3] and [4, -5]", "output": "def cosine_similarity(v1, v2):\n    dot = 0\n    mag1 = 0\n    mag2 = 0\n    for a, b in zip(v1, v2):\n        dot += a*b\n        mag1 += a**2\n        mag2 += b**2\n    return dot/(mag1**0.5 * mag2**0.5)\n\nv1 = [2, 3]\nv2 = [4, -5]\n\ncosine_sim = cosine_similarity(v1, v2)\n\nprint(cosine_sim)", "category": "Python"}, {"instruction": "Create a loop to print out all odd number from 0 to 10.", "input": "", "output": "for i in range(0, 11): \n    if i % 2 != 0:\n        print(i)", "category": "Python"}, {"instruction": "Write a python script to print out a list comprehension that prints out all the integers in a given range", "input": "1-10", "output": "my_list = [x for x in range(1, 11)]  \nprint(my_list)", "category": "Python"}, {"instruction": "Without using any built-in functions, generate a Python code to remove the duplicated elements in a list", "input": "", "output": "def remove_duplicates(l): \n    res = [] \n    for i in l: \n        if i not in res: \n            res.append(i) \n    return res", "category": "Python"}, {"instruction": "Write a Python program to shuffle the items of a given list in random order.", "input": "list_elements = [1, 2, 3, 4, 5]", "output": "from random import shuffle\n\ndef shuffle_list(list_elements):\n    shuffle(list_elements)\n    return list_elements", "category": "Python"}, {"instruction": "Using the comment as a guide, write a nested loop to iterate over all elements of a multi-dimensional array", "input": "[[1, 2, 3], \n [4, 5, 6], \n [7, 8, 9]]", "output": "for i in range(len(array)):\n    for j in range(len(array[i])):\n        print(array[i][j])", "category": "Python"}, {"instruction": "Devise a recursive solution to the problem.", "input": "Find the sum of all numbers from 1 to N", "output": "def sum_recursive(n):\n    if n == 0:\n        return 0\n    else:\n        return n + sum_recursive(n-1)", "category": "Python"}, {"instruction": "How do you create a new list in Python from a given list that contains the square of each element?", "input": "", "output": "The following code creates a new list from the given list by squaring each element using a list comprehension: new_list = [el**2 for el in original_list]", "category": "Python"}, {"instruction": "Create a class called Vehicle in Python with attributes for type (car, truck, motorcycle etc.), make, model, year, and speed.", "input": "", "output": "class Vehicle:\n    def __init__(self, type, make, model, year, speed):\n        self.type = type\n        self.make = make\n        self.model = model\n        self.year = year\n        self.speed = speed", "category": "Python"}, {"instruction": "How to select data from a Pandas DataFrame?", "input": "", "output": "Pandas DataFrames can be queried by selecting specific columns and/or rows.\n\nTo select a single column from a DataFrame, you can use the following syntax:\n\ndf['column_name']\n\nTo select multiple columns from a DataFrame, you can use the following syntax:\n\ndf[['column_1', 'column_2', 'column_3']]\n\nTo select rows from a DataFrame, you can use the following syntax:\n\ndf[(df['column_name'] == condition) & (df['column_name_2'] > condition)]", "category": "Python"}, {"instruction": "What is the most efficient way to delete a key from a Python dictionary?", "input": "", "output": "The most efficient way to delete a key from a Python dictionary is to use the del keyword. This will delete the specified key and its associated value from the dictionary.", "category": "Python"}, {"instruction": "Using Python, create a function that takes a string as an argument and returns a updated string where each character is repeated twice.", "input": "inputValue = \"Hello\"", "output": "def repeatCharacters(inputValue):\n  outputValue = \"\"\n  for char in inputValue: \n    outputValue += char * 2 \n  return outputValue", "category": "Python"}, {"instruction": "Write a function in Python which takes a list of integers as an argument and returns a new list which contains the maximum value of each unique number in the input list.", "input": "intList = [1, 4, 2, 9, 3, 5, 1, 9]", "output": "def maxValuesInList(intList):\n  uniqueValues = set(intList)\n  maxValuesList = []\n  for value in uniqueValues:\n    maxValue = max([item for item in intList if item == value])\n    maxValuesList.append(maxValue)\n  return maxValuesList", "category": "Python"}, {"instruction": "Using Python, make a function that takes a list of strings as an argument and returns a new list of all the strings in uppercase.", "input": "listOfStrings = [\"apple\", \"banana\", \"mango\"]", "output": "def convertStringsToUppercase(listOfStrings):\n  return [string.upper() for string in listOfStrings]", "category": "Python"}, {"instruction": "Remove all the punctuation from a given string", "input": "\"Welcome to the world of computers!\"", "output": "import string\n\ndef remove_punctuation(text):\n    punctuations = string.punctuation\n    no_punct = \"\"\n    for char in text:\n        if char not in punctuations:\n            no_punct += char\n    return no_punct\n\nif __name__ == '__main__':\n    text = 'Welcome to the world of computers!'\n    print(remove_punctuation(text))", "category": "Python"}, {"instruction": "Given a binary tree, write a function to determine whether it is a valid binary search tree.", "input": "", "output": "def is_valid_bst(root):\n\n    def helper(node, lower_limit, upper_limit):\n        # base case\n        if not node:\n            return True\n        \n        val = node.val\n        if val <= lower_limit or val >= upper_limit:\n            return False\n\n        if not helper(node.right, val, upper_limit):\n            return False\n        if not helper(node.left, lower_limit, val):\n            return False\n        return True\n    \n    return helper(root, float('-inf'), float('inf'))\n\nif __name__ == '__main__':\n    # Assume a binary tree is defined\n    root = Node().root\n    result = is_valid_bst(root)\n    print(result)", "category": "Python"}, {"instruction": "Write an algorithm to find the maximum subarray sum within the provided input array.", "input": "[-2, 1, -3, 4, -1, 2, 1, -5, 4]", "output": "def max_subarray_sum(arr):\n    max_sum = 0\n    curr_sum = 0\n    for x in arr:\n        curr_sum += x\n        if curr_sum < 0:\n            curr_sum = 0\n        elif curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n\nif __name__ == '__main__':\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n    print(max_subarray_sum(arr))", "category": "Python"}, {"instruction": "Given a linked list, write a function to find the nth to last node.", "input": "", "output": "def nth_to_last_node(head, n):\n    left_ptr = head\n    right_ptr = head\n    for _ in range(n-1):\n        if not right_ptr.nextnode:\n            raise LookupError('Error: n is larger than the linked list')\n        right_ptr = right_ptr.nextnode \n    while right_ptr.nextnode:\n        left_ptr = left_ptr.nextnode\n        right_ptr = right_ptr.nextnode\n    return left_ptr\n\nif __name__ == '__main__':\n    ll = LinkedList() # Assume LinkedList with nodes is defined\n    head = ll.head\n    result = nth_to_last_node(head, 3)\n    print(result.value)", "category": "Python"}, {"instruction": "Create a function that filters a list of strings based on their length.", "input": "List = [\"Carrot\", \"Apple\", \"Orange\", \"Banana\", \"Pear\"]", "output": "def filter_string_length(strings):\n    \"\"\"\n    This function takes in a list of strings and filters out those\n    that are not longer than 5 characters.\n    \"\"\"\n    return [s for s in strings if len(s) > 5]\n\nlist_strings = [\"Carrot\", \"Apple\", \"Orange\", \"Banana\", \"Pear\"]\nfiltered_list = filter_string_length(list_strings)\nprint(filtered_list)\n\n# Output: [\"Carrot\", \"Orange\", \"Banana\"]", "category": "Python"}, {"instruction": "How to loop over a key-value pair in a dictionary?", "input": "", "output": "A key-value pair in a dictionary can be looped over using the \"for\" loop with the \"items()\" method. For example, if the dictionary is {'a': 1, 'b': 2, 'c': 3}, it can be looped over as:\n\nfor key, value in dictionary.items():\n  print(key, value)\n\nIt will print the key-value pairs as:\na 1\nb 2\nc 3", "category": "Python"}, {"instruction": "How to convert a list of words into a set?", "input": "", "output": "A list of words can be converted into a set by using the built-in \"set()\" function. For example, if the list is [\"apple\", \"banana\", \"cherry\"], the set converted from this list will look like {\"apple\", \"banana\", \"cherry\"}.", "category": "Python"}, {"instruction": "Given a string, write an algorithm to remove all occurrences of a given letter.", "input": "my_string = \"Python is a popular programming language\"\nletter = 'o'", "output": "def remove_letter(string, letter):\n    output = \"\"\n    for s in string:\n        if s != letter:\n            output += s\n    return output", "category": "Python"}, {"instruction": "Create a basic Python script to accept two numbers from the user and \nprint out the sum.", "input": "", "output": "num1 = int(input(\"Enter the first number: \"))\nnum2 = int(input(\"Enter the second number: \"))\n\n# add two numbers\nsum = num1 + num2\n\n# display the sum\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, sum))", "category": "Python"}, {"instruction": "Create a function that returns the sum of the Fibonacci sequence to the nth number", "input": "", "output": "def FibonacciSum(n): \n    fib1 = 0\n    fib2 = 1\n    if n < 0: \n        return \"Incorrect input\"\n    elif n == 0:\n        return 0\n    elif n == 1: \n        return 0\n    else: \n        sum = 0\n        for i in range(2,n+1): \n            fib_n = fib1 + fib2\n            fib1 = fib2\n            fib2 = fib_n\n            sum = sum + fib_n\n        return sum", "category": "Python"}, {"instruction": "Write a code to identify the longest palindrome in a given string", "input": "String: kayakracecar", "output": "def get_longest_palindrome(s):\n    longest_palindrome = ''\n    s_length = len(s)\n    for i in range(s_length):\n        for j in range(i, s_length):\n            substring = s[i:j + 1]\n            if len(substring) > len(longest_palindrome) and substring == substring[::-1]:\n                longest_palindrome = substring\n    return longest_palindrome\n\n# Verify it works\nprint(get_longest_palindrome('kayakracecar'))", "category": "Python"}, {"instruction": "Design an algorithm to find the longest increasing subsequence in an array.", "input": "input = [9, 8, 4, 12, 2, 10, 6, 14, 1, 16, 3, 11, 5, 15, 7]", "output": "def get_longest_increasing_subsequence(input):\n    '''This algorithm will find the longest increasing subsequence in an array.'''\n    n = len(input)\n    leng = [1]*n\n    for i in range(n):\n        for j in range(i):\n            if(input[i] > input[j] and leng[i] < leng[j] + 1):\n                leng[i] = leng[j]+1\n    max_seq_len = max(leng)\n    max_seq = []\n    for i in range(n):\n        if(leng[i] == max_seq_len):\n            max_seq.append(input[i])\n            max_seq_len -= 1\n    max_seq.reverse()\n    return max_seq\n\nif __name__ == '__main__':\n    input = [9, 8, 4, 12, 2, 10, 6, 14, 1, 16, 3, 11, 5, 15, 7]\n    print(get_longest_increasing_subsequence(input))", "category": "Python"}, {"instruction": "Create a function to convert an integer to its binary representation.", "input": "num = 15", "output": "def int_to_binary(num):\n    '''This function will convert an integer to its binary representation.'''\n    binary = ''\n    while num > 0:\n        binary += str(num % 2)\n        num //= 2\n    return binary[::-1]\n\nif __name__ == '__main__':\n    num = 15\n    print(int_to_binary(num))", "category": "Python"}, {"instruction": "Design and implement an algorithm to add two integers.", "input": "num1 = 4\nnum2 = 5", "output": "def add_integers(num1, num2):\n    '''This function will add two integers.'''\n    return num1 + num2\n\nif __name__ == '__main__':\n    num1 = 4\n    num2 = 5\n    print(add_integers(num1, num2))", "category": "Python"}, {"instruction": "Create a Python function that takes a list of strings and removes any words that include numbers.", "input": "list_of_strings = [\"hello123\", \"world456\", \"foo\", \"bar7\"]", "output": "def remove_numbers_from_list(list_of_strings):\n    '''This function will take a list of strings and remove any words that include numbers.'''\n    modified_list = []\n    for word in list_of_strings:\n        if not any(char.isdigit() for char in word):\n            modified_list.append(word)\n    return modified_list\n    \nif __name__ == '__main__':\n    list_of_strings = [\"hello123\", \"world456\", \"foo\", \"bar7\"]\n    print(remove_numbers_from_list(list_of_strings))", "category": "Python"}, {"instruction": "Describe what an else clause does in an if statement.", "input": "", "output": "An else clause is used in an if statement as a way to define an alternative block of code that will be executed when the condition of the if statement is not met.", "category": "Python"}, {"instruction": "Design a program for implementing a linear search algorithm", "input": "[3, 6, 8, 9, 15], 8", "output": "def linear_search(list, item):\n    for i in range(len(list)):\n        if list[i] == item:\n            return i \n    return -1", "category": "Python"}, {"instruction": "Request the average temperature of the city 'Boston' from the Weather API.", "input": "", "output": "import requests\ndef get_average_temperature(city):\n    api_url = 'http://api.openweathermap.org/data/2.5/weather?q='+city+'&APPID=your_api_key'\n    response = requests.get(api_url)\n    data = response.json()\n    temp = data['main']['temp']\n    return temp - 273.15", "category": "Python"}, {"instruction": "Create a function that takes a list of words and returns a list of capitalized words.", "input": "['apple', 'orange', 'grape']", "output": "def capitalize_words(words):\n    result = []\n    for word in words:\n        result.append(word.capitalize())\n    return result", "category": "Python"}, {"instruction": "Create a program that will filter out all numbers divisible by 3 from the given list of integers.", "input": "[2, 3, 4, 6, 8, 9, 10, 12]", "output": "def filter_3(nums):\n    result = []\n    for num in nums:\n        if num % 3 != 0:\n            result.append(num)\n    return result", "category": "Python"}, {"instruction": "Define a Python class called \u201cPerson\u201d.", "input": "", "output": "class Person:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\n \n  def speak(self, message):\n    print(f\"{self.name} says: {message}\")", "category": "Python"}, {"instruction": "Write a code to generate a list of common elements from two given lists.", "input": "list_1 = [1, 2, 3, 4]\nlist_2 = [2, 4, 8, 16]", "output": "def common_list(list_1, list_2):\n    output = []\n    for i in list_1:\n        if i in list_2:\n            output.append(i)\n    return output\n\n# Result:\ncommon_list(list_1, list_2)  # [2, 4]", "category": "Python"}, {"instruction": "Compute the standard deviation of the given array.", "input": "data = [10, 15, 20, 25, 30]", "output": "import numpy as np\n\ndata = [10, 15, 20, 25, 30]\nstandard_deviation = np.std(data)\nprint(f\"Standard deviation of the given array is {standard_deviation}.\")", "category": "Python"}, {"instruction": "Perform a linear search on the given array for the target value.", "input": "arr = [2, 7, 4, 8, 10] \ntarget = 8", "output": "def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\nlinear_search(arr, target) # returns 3", "category": "Python"}, {"instruction": "Write code to parse the given JSON dataset.", "input": "{\n \"name\": \"John\",\n \"age\": 20,\n \"location\": \"Texas\"\n}", "output": "import json\n\ndata = '{\"name\": \"John\", \"age\": 20, \"location\": \"Texas\"}'\ndata = json.loads(data)\nname = data[\"name\"]\nage = data[\"age\"]\nlocation = data[\"location\"]\n\nprint(f\"Name: {name}\")\nprint(f\"Age: {age}\")\nprint(f\"Location: {location}\")", "category": "Python"}, {"instruction": "Given a BST, write a function to find the number of values greater than the root node.", "input": "25 \n   /    \\          \n  15     35\n /  \\    /  \\ \n10  20  30  40", "output": "def count_values_greater_than_root(root):\n    count = 0\n    if root.right:\n        count += 1 + count_values_greater_than_root(root.right)\n    if root.left:\n        count += count_values_greater_than_root(root.left)\n    return count", "category": "Python"}, {"instruction": "Which of the following type is used to store characters in memory?", "input": "", "output": "The data type used to store characters in memory is the character data type, also known as the char type in most programming languages.", "category": "Python"}, {"instruction": "Write a function in Python to check if a string consists of only alphabetic characters.", "input": "", "output": "def check_alphabetic(s):\n    for c in s:\n        if not c.isalpha():\n            return False\n    return True", "category": "Python"}, {"instruction": "Create a program that prints out triangle of stars.", "input": "", "output": "def print_triangle(n):\n    for i in range(1, n * 2): \n        for j in range(1, i + 1): \n            print(\"*\", end = \" \")\n        print(\"\\r\")", "category": "Python"}, {"instruction": "Write a code to parse the following JSON into a dictionary", "input": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25\n}", "output": "import json \n\ndef parse_json(json_data):\n    data = json.loads(json_data)\n    return {key: data[key] for key in data}", "category": "Python"}, {"instruction": "Given a list of names, capitalize the first letter of each name.", "input": "names = [\"john\", \"sarah\", \"joe\", \"dave\"]", "output": "def capitalize_names(names):\n    capitalized_names = []\n    for name in names:\n        capitalized_name = name[0].upper() + name[1:]\n        capitalized_names.append(capitalized_name)\n    return capitalized_names", "category": "Python"}, {"instruction": "Compute the Minkowski distance between two lists.", "input": "list_1 = [1, 2, 3]\nlist_2 = [-1, -2, -3]", "output": "def minkowski_distance(list_1, list_2, p):\n    return (sum([abs(x-y)**p for x, y in zip(list_1, list_2)]))**(1/p)\n\n# Result:\nminkowski_distance(list_1, list_2, 3)  # 6.0", "category": "Python"}, {"instruction": "Create a function to find the maximum element of a 3x3 matrix.", "input": "myMatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def find_max_element_of_matrix(matrix):\n  # declare a variable to store the max value \n  max = matrix[0][0]\n  \n  # loop through the matrix \n  for row in range(len(matrix)):\n    # loop through each element in the matrix \n    for col in range(len(matrix[row])):\n      # if the elements value is greater then the max value, set the max value to that element \n      if matrix[row][col] > max:\n        max = matrix[row][col]\n  \n  # return the max value\n  return max", "category": "Python"}, {"instruction": "Create a function that compares two binary strings and returns the number of differences between them.", "input": "string1 = \"100100\"\nstring2 = \"100011\"", "output": "def differences_in_binary_strings(string1, string2):\n  # initialise a variable to store total differences\n  total_differences = 0\n\n  # loop through each digit in the strings\n  for i in range(len(string1)):\n    # check if the digits in the same position in each string are different\n    if string1[i] != string2[i]:\n      # increment the total differences\n      total_differences += 1\n\n  return total_differences", "category": "Python"}, {"instruction": "Create a function which takes two strings as parameters and return the concatenating of the two strings.", "input": "string_1 = \"hello\"\nstring_2 = \"world\"", "output": "def concatenate_strings(s1, s2):\n    \"\"\"\n    This function takes two strings as parameters and returns the concatenation of the two strings.\n    \"\"\"\n    return s1 + s2\n\nprint(concatenate_strings(string_1, string_2)) # prints \"helloworld\"", "category": "Python"}, {"instruction": "Generate a random 10-character string with an even distribution of lowercase letters and numbers.", "input": "", "output": "import string\nimport random\n\ndef random_str():\n    chars = string.ascii_lowercase + string.digits\n    return ''.join(random.choice(chars) for _ in range(10))", "category": "Python"}, {"instruction": "Write a basic encryption function using Caesar Cipher.", "input": "", "output": "def caesar_encrypt(plaintext, key): \n    ciphertext = \"\" \n    for char in plaintext: \n        if (char.isupper()): \n            ciphertext += chr((ord(char) + key-65) % 26 + 65) \n        else: \n            ciphertext += chr((ord(char) + key - 97) % 26 + 97)\n    return ciphertext", "category": "Python"}, {"instruction": "Write a function to find the longest substring without repetition.", "input": "str = \"pwwkew\"", "output": "def longest_substring(str):\n    start = 0\n    max_length = 0\n    used_char = {}\n\n    for i, char in enumerate(str):\n        if char in used_char and start <= used_char[char]:\n            start = used_char[char] + 1\n        else:\n            max_length = max(max_length, i - start + 1)\n\n        used_char[char] = i\n\n    return max_length", "category": "Python"}, {"instruction": "Write a function to calculate the Average True Range of a given array of price data", "input": "[10, 15, 8, 11]", "output": "def calculate_ATR(data):\n    max_diff = 0\n    for i in range(1, len(data)):\n        diff = abs(data[i] - data[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff/len(data)\n\ndata = [10, 15, 8, 11]\nprint(calculate_ATR(data)) # 2.25", "category": "Python"}, {"instruction": "Compute the average value in an array of integers", "input": "[1, 2, 3, 4, 5]", "output": "def find_average(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum/len(arr)\n\narr = [1, 2, 3, 4, 5]\nprint(find_average(arr)) # 3.0", "category": "Python"}, {"instruction": "Parse the JSON string and convert it into an object.", "input": "{\"name\" : \"John\", \"Age\" : 25}", "output": "import json\n\ndef convert_to_object(data):\n    json_obj = json.loads(data)\n    return json_obj\n    \ndata = '{\"name\":\"John\", \"age\": 25}'\nobj = convert_to_object(data)\n\nprint(obj['name']) #John\nprint(obj['age']) #25", "category": "Python"}, {"instruction": "Output the first 10 numbers in the Fibonacci series.", "input": "", "output": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n    \nfor i in range(10):\n    print(fibonacci(i))", "category": "Python"}, {"instruction": "Generate a unique alphanumeric string of length 5.", "input": "", "output": "def generate_string():\n    import string\n    import random\n    characters = string.ascii_letters + string.digits\n    return ''.join(random.choice(characters) for i in range(5))", "category": "Python"}, {"instruction": "Design a basic linked list structure for storing integers.", "input": "", "output": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.length = 0\n\n    def isEmpty(self):\n        return self.head == None\n    \n    def insert(self, value):\n        node = Node(value)\n        node.next = self.head\n        self.head = node\n        self.length += 1\n        \n    def getSize(self):\n        return self.length", "category": "Python"}, {"instruction": "Create a Python class for a 3\u00d73 matrix.", "input": "", "output": "class Matrix3x3:\n\n    def __init__(self):\n        # Set the default 3x3 matrix values to 0\n        self.matrix = [[0,0,0],[0,0,0],[0,0,0]]\n\n    def set_value(self, x, y, value): \n        # Set the value in the matrix at position x and y\n        self.matrix[x][y] = value\n\n    def get_value(self, x, y): \n        # Get the value in the matrix at position x and y\n        return self.matrix[x][y]\n\n    def multiply_scalar(self, scalar): \n        # Multiply the matrix with a scalar\n        for i in range(3): \n            for j in range(3): \n                self.matrix[i][j] *= scalar", "category": "Python"}, {"instruction": "Suggest a way to count the number of two letter words in a string.", "input": "", "output": "def count_two_letter_words(string):\n    words = string.split()\n    count = 0\n    for word in words:\n        if len(word) == 2:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    string = \"This is a sample string with two letter words.\"\n    print(count_two_letter_words(string))", "category": "Python"}, {"instruction": "Write a Python program to convert all strings in a list to lower case", "input": "", "output": "def convert_to_lowercase(list_of_strings):\n    return [string.lower() for string in list_of_strings]\n\nif __name__ == '__main__':\n    string_list = [\"UPPERCASE\", \"lOwErCaSe\", \"MiXeDcAsE\"]\n    print(convert_to_lowercase(string_list))", "category": "Python"}, {"instruction": "How would you print the contents of a 2D array in Python?", "input": "", "output": "def print_2d_array(arr):\n    for row in arr:\n        for value in row:\n            print(value, end=\" \")\n        print()\n\nif __name__ == '__main__':\n    arr = [[1,2,3], [4,5,6], [7,8,9]]\n    print_2d_array(arr)", "category": "Python"}, {"instruction": "Create a function to iterate a list of strings and print them.", "input": "", "output": "def iterate_strings(string_list):\n    for string in string_list:\n        print(string)\n\nif __name__ == '__main__':\n    string_list = [\"apple\", \"banana\", \"cherry\"]\n    iterate_strings(string_list)", "category": "Python"}, {"instruction": "Implement a function which will take a list of numbers as an input and return a sorted list", "input": "", "output": "def sort_list(numbers):\n    #Base case\n    if len(numbers) <= 1:\n        return numbers\n\n    pivot = numbers[0]\n    left = []\n    right = []\n    #Divide\n    for num in numbers[1:]:\n        if num < pivot:\n            left.append(num)\n        else:\n            right.append(num)\n    #Conquer\n    left = sort_list(left)\n    right = sort_list(right)\n    #Combine\n    return left + [pivot] + right\n\nif __name__ == '__main__':\n    arr = [7, 3, 1, 9, 0]\n    print(sort_list(arr))", "category": "Python"}, {"instruction": "What is the best way to generate a random number in Python?", "input": "", "output": "The best way to generate a random number in Python is to use the random module. The random module provides access to functions  that are used to generate a random number in various distributions such as uniform, normal, exponential, and others.\n\nThe most basic function in random module is the function random(), which generates a random number from range [0, 1).\n\nFor example, the following code will generate a random number from range [1, 10):\n\n    import random\n\n    num = random.random() * 9 + 1  # Generates a random number from range [1, 10)", "category": "Python"}, {"instruction": "Implement a version of your own version of quicksort in Python", "input": "", "output": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    pivot = arr[0]\n    left = []\n    right = []\n\n    for num in arr[1:]:\n        if num < pivot:\n            left.append(num)\n        else:\n            right.append(num)\n\n    return quicksort(left) + [pivot] + quicksort(right)\n\nif __name__ == '__main__':\n    arr = [7, 3, 1, 9, 0]\n    print(quicksort(arr))", "category": "Python"}, {"instruction": "Create a Python program to calculate the product of a list of integers.", "input": "", "output": "def calculate_product(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product\n\nif __name__ == \"__main__\":\n    print(calculate_product([1,2,3,4,5]))", "category": "Python"}, {"instruction": "Produce an output string with the first two letters of the words in the given string capitalized.", "input": "string = \"hello world\"", "output": "def capitalized(string):\n    \"\"\"\n    This function takes a string as a parameter and returns a new string with the first two letters of the words in the string capitalized.\n    \"\"\"\n    output_string = \"\"\n    words = string.split()\n    for word in words:\n        output_string += word[0].upper() + word[1].upper() + word[2:] + \" \"\n    return output_string.strip()\n\nprint(capitalized(string)) # prints \"HeLlO WoRlD\"", "category": "Python"}, {"instruction": "Create a game of rock-paper-scissors using functions and conditionals.", "input": "", "output": "def play_game():\n    \"\"\"\n    This function is a game of rock-paper-scissors.\n    \"\"\"\n    import random\n    player_input = input(\"Choose rock(r), paper(p) or scissors(s): \")\n    computer_choice = random.choice([\"r\", \"p\", \"s\"])\n    if player_input == computer_choice:\n        return \"It is a draw\"\n    elif player_input == \"r\":\n        if computer_choice == \"p\":\n            return \"Computer Wins!\"\n        else:\n            return \"Player Wins!\"\n    elif player_input == \"p\":\n        if computer_choice == \"s\":\n            return \"Computer Wins!\"\n        else:\n            return \"Player Wins!\"\n    elif player_input == \"s\":\n        if computer_choice == \"r\":\n            return \"Computer Wins!\"\n        else:\n            return \"Player Wins!\"\n    else:\n        return \"Invalid input\"\n\nprint(play_game())", "category": "Python"}, {"instruction": "Algorithmically classify a given word as either a verb (action word) or a noun (object).", "input": "word = \"write\"", "output": "def classify_word(word):\n    \"\"\"\n    This function takes a word as a parameter and returns its classification - verb or noun.\n    \"\"\"\n    if word in [\"run\", \"jump\", \"swim\"]:\n        return \"verb\"\n    else: \n        return \"noun\"\n\nprint(classify_word(\"write\")) # prints \"verb\"", "category": "Python"}, {"instruction": "Analyze the given list and return the index of the first occurrence of the number 7.", "input": "numbers = [1, 2, 3, 5, 4, 7, 9, 8, 7]", "output": "numbers = [1, 2, 3, 5, 4, 7, 9, 8, 7]\n\ndef find_index(lst):\n    \"\"\"\n    This function takes a list of numbers as a parameter and returns the index of the first occurrence of the number 7.\n    \"\"\"\n    for i in range(len(lst)):\n        if lst[i] == 7:\n            return i\n        \nprint(find_index(numbers)) # prints 5", "category": "Python"}, {"instruction": "Write a code to implement a basic calculator to add two numbers.", "input": "", "output": "def add_numbers(num1, num2):\n    \"\"\"\n    This function takes two numbers as parameters and returns their sum.\n    \"\"\"\n    return num1 + num2 \n\nif __name__ == \"__main__\":\n    num1 = float(input(\"Enter first number: \"))\n    num2 = float(input(\"Enter second number: \"))\n    print(add_numbers(num1, num2))", "category": "Python"}, {"instruction": "Modify the following function to ensure that the number is always greater than zero.", "input": "def get_random_number():\n    return random.randint(-10, 10)", "output": "import random \n\ndef get_random_number():\n    num = random.randint(-10, 10)\n    if num < 0:\n        num = -num\n    return num", "category": "Python"}, {"instruction": "Code a function in Python to output the words \"Retrieved successfully\" if a web page request is successful.", "input": "", "output": "def check_status_success(request):\n    if request.status_code == 200:\n        print(\"Retrieved successfully\")\n    else:\n        print(\"Error connecting\")", "category": "Python"}, {"instruction": "Using numpy, write a function to check if a given matrix is symmetric.", "input": "my_matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]", "output": "import numpy as np \n\ndef check_symmetric(matrix):\n    matrix_np = np.array(matrix)\n    return np.array_equal(matrix_np, matrix_np.T)", "category": "Python"}, {"instruction": "Given a list of numbers, write a function to check for odd numbers.", "input": "my_list = [-1, 0, 1, 2, 3]", "output": "def is_odd_number(list):\n    for num in list:\n        if num % 2 != 0:\n           return True \n    return False", "category": "Python"}, {"instruction": "Explain what a hash table is.", "input": "", "output": "A hash table is a data structure used to store key-value pairs efficiently. It uses a hashing function to map each key to a unique memory address, which is used to store the associated value. Hash tables are used for fast lookups, as the time taken to find an item does not depend on the number of items stored, but rather on the size of the hash table, making them more efficient than searching through a linear list. They are also used for dynamic programming and caching data.", "category": "Python"}, {"instruction": "Devise a programming logic to find the sum of odd numbers between 1 and 50.", "input": "", "output": "total = 0\nfor i in range(1,51):\n    if (i % 2 == 1):\n        total += i\nprint(total)", "category": "Python"}, {"instruction": "Convert the following function to use the reduce method in Python.", "input": "def sum_list(nums):\n  total = 0\n  for num in nums:\n    total += num\n  return total", "output": "def sum_list(nums):\n    return reduce(lambda x,y: x + y, nums)", "category": "Python"}, {"instruction": "Create a custom function to use in a python program that checks whether a given number is even or odd.", "input": "", "output": "def even_odd(num):\n    '''This function will check if a number is even or odd\n    and return 'even' or 'odd'.\n    '''\n    if num % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"", "category": "Python"}, {"instruction": "Design a function to convert a given numerical grade to a corresponding letter grade.", "input": "", "output": "def grade_to_letter(grade):\n    if grade >= 90:\n        return 'A'\n    elif grade >= 80:\n        return 'B'\n    elif grade >= 70:\n        return 'C'\n    elif grade >= 60:\n        return 'D'\n    else:\n        return 'F'", "category": "Python"}, {"instruction": "Create a Python class \"Point\" that has two instance variables x and y.", "input": "", "output": "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y", "category": "Python"}, {"instruction": "Edit the following code in Python to swap two elements in a list.", "input": "list1 = [1, 2, 4]\n\nlist1[0], list1[1] = list1[1], list1[0]", "output": "list1 = [1, 2, 4]\n\nlist1[0], list1[2] = list1[2], list1[0]", "category": "Python"}, {"instruction": "Edit the given code to add a function that calculates the area of a circle given its radius.", "input": "def circumference(r):\n    '''Calculates the circumference of a circle given its radius'''\n    return 2* PI * r", "output": "def circumference(r):\n    '''Calculates the circumference of a circle given its radius'''\n    return 2* PI * r\n\ndef area(r):\n    '''Calculates the area of a circle given its radius'''\n    return PI * r * r", "category": "Python"}, {"instruction": "Write a function in Python that takes in two lists and returns the lengths of the lists and the values that are common in both.", "input": "list1 = [1, 2, 3, 4, 6]\nlist2 = [2, 4, 8, 10]", "output": "def compare_lists(list1, list2):\n    length1 = len(list1) \n    length2 = len(list2) \n    common_values = list(set(list1).intersection(list2)) \n    return length1, length2, common_values", "category": "Python"}, {"instruction": "Write a function in Python to merge two sorted arrays.", "input": "arr1 = [1, 5, 9]\narr2 = [2, 3, 6, 8]", "output": "def merge_sorted_arrays(arr1, arr2):\n    n1, n2 = len(arr1), len(arr2)\n    i, j, k = 0, 0, 0\n    arr3 = [0] * (n1 + n2)\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            arr3[k] = arr1[i]\n            i += 1\n        else:\n            arr3[k] = arr2[j]\n            j += 1\n        k += 1\n\n    # Copy remaining elements \n    while i < n1:\n        arr3[k] = arr1[i]\n        i += 1\n        k += 1\n\n    while j < n2:\n        arr3[k] = arr2[j]\n        j += 1\n        k += 1\n\n    return arr3", "category": "Python"}, {"instruction": "Explain how a Depth-First-Search (DFS) algorithm works.", "input": "", "output": "A Depth-First-Search (DFS) algorithm is a graph traversal technique used to traverse a graph or tree. It starts at the root node of the graph and visits each of its adjacent nodes in a pre-defined order. For each adjacent node, it visits the node and checks to see if the node has been visited. If the node has not been visited, the algorithm visits the node and adds it to the visited set. The algorithm then recursively visits the adjacent nodes of the node it just visited. It repeats this process until it has visited all the nodes in the graph.", "category": "Python"}, {"instruction": "Create a function to check if a string contains only unique characters.", "input": "string = \"Programming\"", "output": "def unique_chars(string):\n    # List to keep track of characters \n    characters = []\n    \n    for c in string:\n        if c not in characters:\n            characters.append(c)\n        else:  \n            return False\n    \n    return True", "category": "Python"}, {"instruction": "Write a Python program to find all the prime numbers in the range between 1 to 1000.", "input": "", "output": "# Python program to find all the prime numbers in a \n# given range using Sieve of Eratosthenes \n\ndef SieveOfEratosthenes(n): \n    # Create a boolean array \"prime[0..n]\" and \n    # initialize all entries it as true. A value   \n    # in prime[i] will finally be False if i is \n    # Not a prime, else True. \n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n          \n        # If prime[p] is not changed, then it is  \n        # a prime \n        if (prime[p] == True): \n              \n            # Update all multiples of p \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n    \n    # Print all prime numbers \n    prime_nums_list = [] \n    for p in range(2, n): \n        if prime[p]: \n            prime_nums_list.append(p) \n    \n    return prime_nums_list \n  \n# Driver code \nn = 1000\nprint(SieveOfEratosthenes(n))", "category": "Python"}, {"instruction": "Add a condition to the following code in Python to check if the given number is greater or less than 5.", "input": "num = 3", "output": "if num > 5:\n    print(\"The number is greater than 5\")\nelif num < 5:\n    print(\"The number is less than 5\")", "category": "Python"}, {"instruction": "Rewrite the code to implement a shell sort algorithm in Python.", "input": "", "output": "def shell_sort(arr):\n    n = len(arr)\n    gap = n//2\n \n    while gap > 0:\n \n        for i in range(gap,n):\n            temp = arr[i]\n            j = i\n            while  j >= gap and arr[j-gap] >temp:\n                arr[j] = arr[j-gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2", "category": "Python"}, {"instruction": "Write a Python code to convert the given temperature from Celsius to Fahrenheit.", "input": "25", "output": "Celsius = 25\nFahrenheit = (Celsius * 9/5) + 32\n\nprint('{} degrees Celsius is equal to {} degrees Fahrenheit.'.format(Celsius, Fahrenheit))\n# Output: 25 degrees Celsius is equal to 77 degrees Fahrenheit.", "category": "Python"}, {"instruction": "Write a Python function to find the number of odd numbers in the given list.", "input": "[1, 4, 2, 6, 3, 9]", "output": "def countOddNumbers(numbers):\n  odd_numbers = 0\n  for i in numbers:\n    if i % 2 == 1: \n      odd_numbers += 1\n  return odd_numbers\n  \nprint(countOddNumbers([1, 4, 2, 6, 3, 9]))\n# Output: 3", "category": "Python"}, {"instruction": "Design a data structure to find the first and last occurrence of a number in an array.", "input": "array = [1, 5, 7, 8, 8, 10]", "output": "class FindFirstLastOccurrence:\n    def __init__(self, arr):\n        self.arr = arr\n        self.first_occurrence = -1\n        self.last_occurrence = -1\n    \n    def findFirstLastOccurrence(self, k):\n        #Find the first occurrence\n        left = 0\n        right = len(self.arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if self.arr[mid] == k and (mid == 0 or self.arr[mid-1] < k):\n                self.first_occurrence = mid\n                break\n            elif self.arr[mid] < k:\n                left = mid+1\n            else:\n                right = mid-1\n        #Find the last occurrence\n        left = 0\n        right = len(self.arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if self.arr[mid] == k and (mid == len(self.arr)-1 or self.arr[mid+1] > k):\n                self.last_occurrence = mid\n                break\n            elif self.arr[mid] > k:\n                right = mid-1\n            else:\n                left = mid+1\n        \n        return self.first_occurrence, self.last_occurrence\n\nif __name__ == \"__main__\":\n    finder = FindFirstLastOccurrence([1, 5, 7, 8, 8, 10])\n    print(finder.findFirstLastOccurrence(8)) # (3,4)", "category": "Python"}, {"instruction": "Compare the insertion sort and the merge sort algorithms.", "input": "", "output": "Insertion sort is an in-place sorting algorithm that compares and inserts elements one at a time into a sorted list. It starts off with a single element and compares it to every element in the list. If the element is smaller than the element to the left, it moves the left element over and continues down the list until it reaches a spot where it is no longer smaller than the elements to the left, then it will insert the element in that spot. Insertion sort is a simple algorithm and is relatively fast for small lists. However, for larger lists, the time complexity can become large and the algorithm can be more expensive. \n\nMerge sort is an efficient, divide-and-conquer sorting algorithm that works by continuously dividing a list in half until it is broken down into individual elements, which are then recombined in sorted order. It has a time complexity of O(nlogn) in all cases, making it a very efficient algorithm for large lists. It also does not need additional memory for sorting, unlike some other sort algorithms. However, merge sort is not an in-place sorting algorithm and requires additional memory to perform the sorting.", "category": "Python"}, {"instruction": "Write a code to sort an array of integers using the quicksort algorithm.", "input": "array = [2, 4, 5, 1, 9, 0]", "output": "def quicksort(arr):\n    if len(arr) == 0 or len(arr) == 1:\n        return arr\n    else:\n        pivot = arr[0]\n        arr.remove(arr[0])\n        left_arr = []\n        right_arr = []\n        for element in arr:\n            if element <= pivot:\n                left_arr.append(element)\n            else:\n                right_arr.append(element)\n        left_arr = quicksort(left_arr)\n        right_arr = quicksort(right_arr)\n        sorted_arr = left_arr + [pivot] + right_arr\n        return sorted_arr\n\nif __name__ == \"__main__\":\n    array = [2, 4, 5, 1, 9, 0]\n    sorted_arr = quicksort(array)\n    print(sorted_arr)\n\n# Output: [0, 1, 2, 4, 5, 9]", "category": "Python"}, {"instruction": "Design a distributed system for an online pharmacy.", "input": "", "output": "The distributed system for an online pharmacy should consist of the following components: \n\n1. Database Server: Stores customer information, product inventory, and transaction data.\n2. Web Server: Serves web pages, process customer orders, and handles payment transactions.\n3. Application Server: Processes customer orders, handles inventory management tasks, and communicates with the pharmacy's service providers (such as shipping and billing).\n4. Messaging Server: Used to communicate with customers, send notifications, and handle customer service inquiries.\n5. Analytics Server: Collects data from the other components and used to generate reports and provide business insights.\n6. Warehouse Management System (WMS): Used by warehouse personnel to maintain inventory levels and fulfill customer orders. \n7. Payment Gateway: Provides payment processing services for customers. \n8. Content Delivery Network (CDN): Used to store and serve static content (such as images, videos, and audio files).", "category": "Python"}, {"instruction": "Write a Python program to inverse a dictionary, so that the keys become values and values become keys.", "input": "dictionary = {1:'Apple', 2:'Orange', 3:'Banana'}", "output": "# Python program to inverse a dictionary \n  \n# Function to inverse a dictionary\ndef inverse_dict(dictionary): \n    inverse = dict() \n    for key in dictionary: \n        linverse = inverse.setdefault(dictionary[key], []) \n        linverse.append(key) \n    return inverse\n  \n# example dictionary  \ndictionary = {1:'Apple', 2:'Orange', 3:'Banana'}\n  \n# Print the inverse dictionary\nprint(inverse_dict(dictionary))", "category": "Python"}, {"instruction": "Summarize how to handle missing data in Pandas.", "input": "", "output": "There are a few different approaches to handling missing data in Pandas. The most common is to fill the null values with a placeholder value such as 0 or NaN. Alternatively, you can drop the rows containing the missing values. Depending on the dataset, you may also be able to fill the missing values in with a suitable statistical or machine learning model or use a backfill or forward fill method to fill in the gaps.", "category": "Python"}, {"instruction": "List three differences between a list and a tuple in Python.", "input": "", "output": "The three main differences between a list and a tuple in Python are:\n1. Lists are mutable and tuples are immutable. That is, changes can be made to a list whereas elements of a tuple cannot be changed.\n2. Lists use square brackets and tuples use parentheses.\n3. Lists store arbitrary objects, whereas tuples store data of a specific type. For example, a list could contain integers, strings and objects while a tuple can only contain a predetermined number of elements.", "category": "Python"}, {"instruction": "Suggest a way to optimize a given code segment.", "input": "x = 0\nfor i in range(100):\n    for j in range(100):\n        x = x + 1", "output": "To optimize this code segment, you can use the NumPy library to take advantage of vectorized operations and reduce the number of iterations. Additionally, you can use MultiProcessing to run the code in parallel, taking advantage of multiple cores on the machine:\n\nimport numpy as np\n\nx = np.zeros((100, 100))\n\nfor i in range(100):\n    x[i] = x[i] + 1", "category": "Python"}, {"instruction": "Write a function that takes two numbers as inputs and returns the larger number.", "input": "", "output": "def max_num(a, b):\n    if a > b:\n        return a\n    else:\n        return b", "category": "Python"}, {"instruction": "Write a for loop in Python to print the first 10 even numbers.", "input": "", "output": "for i in range(2, 21, 2): \n    print(i)", "category": "Python"}, {"instruction": "Write an algorithm in Python to search for the first non-repeating element in a given array.", "input": "array = [4,6,4,1,8,6,44,21];", "output": "def find_non_repeating(array):\n  for i in array:\n    if array.count(i) == 1:\n      return i\n  \nfind_non_repeating(array); // Output: 1", "category": "Python"}, {"instruction": "Write a function in Python to print out the elements of a given array in reverse order.", "input": "array = [1,2,3,4,5];", "output": "def reverse_array(array): \n  for i in reversed(array): \n    print(i) \n\nreverse_array(array); // Output: 5,4,3,2,1", "category": "Python"}, {"instruction": "Determine if a given number is prime using Python.", "input": "Input: 20", "output": "def is_prime(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\nis_prime(20)\n\n# Output:\nFalse", "category": "Python"}, {"instruction": "Search the string for duplicates and remove them.", "input": "Input: \"googleeee\"", "output": "def remove_duplicates(str):\n    result = \"\"\n    for i in str:\n        if i not in result:\n            result += i\n    return result\n\nremove_duplicates(\"googleeee\")\n\n# Output:\n\"gole\"", "category": "Python"}, {"instruction": "Convert the following array to a dictionary using Python.", "input": "[('A', 5), ('B', 3), ('C', 4), ('D', 7)]", "output": "def to_dictionary(arr):\n    dict = {}\n    for i in arr:\n        dict[i[0]] = i[1]\n    return dict\n\nto_dictionary([('A',5), ('B', 3), ('C', 4), ('D', 7)])\n\n# Output:\n{'A': 5, 'B': 3, 'C': 4, 'D': 7}", "category": "Python"}, {"instruction": "Create a function to find the sum of all the multiples of 3 or 5 below 1000.", "input": "", "output": "def sum_multiples():\n    sum = 0\n    for num in range(1000):\n        if num % 3 == 0 or num % 5 == 0:\n            sum += num\n    return sum", "category": "Python"}, {"instruction": "Create a function to search a list of numbers and return the first index of the searched number, or -1 if the number does not exist.", "input": "[1,2,3], 3", "output": "def linear_search(array, num):\n    for index, element in enumerate(array):\n        if element == num:\n            return index\n    return -1", "category": "Python"}, {"instruction": "Write a code that takes in a string and returns the total count of each letter of the alphabet it contains.", "input": "example123", "output": "def letter_count(string):\n    string = string.lower()\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    counts = {letter: 0 for letter in alphabet}\n    \n    for letter in string:\n        if letter in alphabet:\n            counts[letter] += 1\n    \n    return counts", "category": "Python"}, {"instruction": "Create a code to generate a unique 7-character string of random numbers and letters.", "input": "", "output": "import random, string\n\ndef random_string():\n    random_str = ''.join([random.choice(string.ascii_letters + string.digits) for i in range(7)])\n    return random_str", "category": "Python"}, {"instruction": "Create a Python script to scrape all links from a web page.", "input": "<link to web page>", "output": "import requests\nfrom bs4 import BeautifulSoup\n\npage = requests.get('<link to web page>')\nsoup = BeautifulSoup(page.text, 'html.parser')\n\nlinks = []\nfor link in soup.find_all('a'):\n    links.append(link.get('href'))\n\n# Usage\nprint(links)", "category": "Python"}, {"instruction": "Create a Python program to create a list of the first 10 prime numbers.", "input": "", "output": "def prime_numbers(n): \n  primes = [2] \n  num = 3\n \n  while len(primes) < n: \n    for i in range(2, num): \n      if (num % i == 0): \n        break\n    else: \n      primes.append(num) \n    num += 1\n  \n  return primes\n\n# Usage\nprint(prime_numbers(10)) # [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]", "category": "Python"}, {"instruction": "Generate a function in Python to calculate the total cost of an item given its price and quantity", "input": "Price=10 and Quantity=5", "output": "def calculate_total_cost(price, quantity):\n    return price * quantity", "category": "Python"}, {"instruction": "Develop a python code to sort an array of numbers", "input": "", "output": "def bubble_sort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]", "category": "Python"}, {"instruction": "Compare inheritance and composition in Python", "input": "", "output": "Inheritance and composition in Python are two approaches for achieving code reuse. Inheritance involves creating a parent class which contains method and member field definitions. These are then used in a subclass and can be overridden to make them more specialized. Composition involves designing objects that contain references to other objects, using instance variables whose types are interfaces or classes. This way, the composition object can act as a proxy to the inner objects, passing requests on to them as required. The advantages of composition over inheritance include greater control over class dependencies and better encapsulation.", "category": "Python"}, {"instruction": "What is type hinting in Python?", "input": "", "output": "Type hinting is a feature of the Python language that allows one to add type information to a variable, a function, and its parameters. The type hinting allows Python to infer the type of data to be used and this helps the interpreter to identify any errors and provide more feedback during the development process. It also makes the code more readable and maintainable since type information can be used to provide auto-complete and better error messages.", "category": "Python"}, {"instruction": "Write a code that prints the reversed version of a given Python list.", "input": "list = [1, 2, 3, 4]", "output": "def reverse_list(lst):\n    reversed_list = lst[::-1]\n    return reversed_list\n\nprint(reverse_list([1, 2, 3, 4]))", "category": "Python"}, {"instruction": "What is stdin and stdout in Python?", "input": "", "output": "In Python, stdin and stdout are two objects used to read standard input and print standard output respectively. stdin is used to read input from the command line or a script and stdout is used to write the output back to the command line or script. The advantage of using stdin and stdout is that they are portable and work on all versions of Python, whereas using input() and print() functions work only if the code is executed directly in Python interactive shell.", "category": "Python"}, {"instruction": "Write a code to print out all dates between two given dates in Python", "input": "start_date = '08/20/2020'\nend_date = '08/30/2020'", "output": "from datetime import timedelta, date\n\ndef daterange(start_date, end_date):\n    for n in range(int ((end_date - start_date).days)):\n        yield start_date + timedelta(n)\n\nstart_date = date(2020, 8, 20)\nend_date = date(2020, 8, 30)\nfor single_date in daterange(start_date,end_date):\n    print(single_date.strftime(\"%d/%m/%Y\"))", "category": "Python"}, {"instruction": "Modify the following code to print out all even numbers in the list.", "input": "lst = [1, 2, 3, 4, 5]", "output": "for i in lst:\n    if i % 2 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Write a function that takes in a list and an element, and returns the index of the element in the list.", "input": "list = [1, 2, 5, 8, 9]\nelement = 5", "output": "def find_index(lst, element):\n    for i,num in enumerate(lst):\n        if num == element:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Debug the following code to print a list of all prime numbers between 1 and 10", "input": "for i in range(1, 10):\n    for x n range 2, i // 2\n    if i % x == 0 \n    print(i)", "output": "for i in range(2, 10): \n    is_prime = True\n    for x in range(2, i // 2 + 1): \n        if i % x == 0: \n            is_prime = False\n            break\n    if is_prime: \n        print(i)", "category": "Python"}, {"instruction": "What is the purpose of the \"os\" module in Python?", "input": "", "output": "The \"os\" module in Python provides a way of using operating system dependent functionality. It includes functions for interacting with the filesystem, manipulating paths, and creating and interpreting file descriptors. It also provides miscellaneous operating system interfaces, such as tools for accessing environmental variables and for changing the current working directory.", "category": "Python"}, {"instruction": "Create a code snippet for making a POST request using Python.", "input": "", "output": "import requests \nurl = 'https://www.example.com' \ndata = {'var1': 'value1', 'var2': 'value2'} \nresponse = requests.post(url, data=data)", "category": "Python"}, {"instruction": "Create a code to save the first ten prime numbers in an array.", "input": "", "output": "# prime number sieve\ndef prime_numbers(n): \n \n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime[p] == True): \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n  \n    prime_numbers = []\n    for p in range(2, n): \n        if prime[p]: \n            prime_numbers.append(p)\n    return prime_numbers[:10]\n  \nif __name__ == \"__main__\":\n    n = 100\n    print(prime_numbers(n))", "category": "Python"}, {"instruction": "Write a code to construct a BST with the elements 11, 18, 14, 6 and 7.", "input": "", "output": "# A node  \nclass Node:  \n    def __init__(self,key): \n        self.left = None\n        self.right = None\n        self.val = key \n\n# A function to insert a new node with the given key  \ndef insert(root,node): \n    if root is None: \n        root = node \n    else: \n        if root.val < node.val: \n            if root.right is None: \n                root.right = node \n            else: \n                insert(root.right, node) \n        else: \n            if root.left is None: \n                root.left = node \n            else: \n                insert(root.left, node) \n\n# Create root node with the key 11  \nroot = Node(11)  \ninsert(root,Node(18))  \ninsert(root,Node(14))  \ninsert(root,Node(6))  \ninsert(root,Node(7))", "category": "Python"}, {"instruction": "Write code in python to find the biggest number in a given list.", "input": "my_list = [1, 25, 8, 10, 6]", "output": "def find_biggest_number(my_list):\n    biggest_number = my_list[0]\n    for i in range(0, len(my_list)):\n        if my_list[i] > biggest_number:\n            biggest_number = my_list[i]\n    return biggest_number", "category": "Python"}, {"instruction": "You need to generate an API which returns the first 10 Fibonacci numbers.", "input": "", "output": "def FibApi():\n   def fibonacci(n):\n      if n < 0: \n         print(\"Incorrect input\") \n      elif n == 1: \n         return 0\n      elif n == 2: \n         return 1\n      else: \n         return fibonacci(n-1) + fibonacci(n-2) \n   fib_list = [] \n   for i in range(1,11): \n      fib_list.append(fibonacci(i)) \n   return fib_list", "category": "Python"}, {"instruction": "How can one randomly shuffle a list using Python?", "input": "", "output": "import random\n\ndef shuffle(list):\n    random.shuffle(list)\n    return list", "category": "Python"}, {"instruction": "What is the stack overflow limit of Python?", "input": "", "output": "The stack overflow limit of Python is 2800 frames.", "category": "Python"}, {"instruction": "You need to write code for adding a column to a pandas DataFrame.", "input": "import pandas as pd\ndf = pd.DataFrame({'A': [12, 4, 5, None, 1],\n                   'B': [7, 2, 54, 3, None],\n                   'C': [20, 16, 11, 3, 8],\n                   'D': [14, 3, 17, 2, 6]})\n\nnew_col_data = [1, 1, 15, 6, 96]", "output": "import pandas as pd\ndf = pd.DataFrame({'A': [12, 4, 5, None, 1],\n                   'B': [7, 2, 54, 3, None],\n                   'C': [20, 16, 11, 3, 8],\n                   'D': [14, 3, 17, 2, 6]})\n\nnew_col_data = [1, 1, 15, 6, 96]\n\ndf['new_col'] = new_col_data", "category": "Python"}, {"instruction": "Develop an algorithm for counting the number of unique characters in a string.", "input": "str = \"Hello World!\"", "output": "def uniqueChars(str): \n    charCount = dict() \n    for ch in str: \n        if ch in charCount: \n            charCount[ch] += 1\n        else: \n            charCount[ch] = 1\n    return len(charCount)", "category": "Python"}, {"instruction": "Create an algorithm with pseudocode to find maximum and minimum element of an array.", "input": "", "output": "Algorithm findMaxMin(arr)\n  Input: arr - an array of integers\n  Output: maxEle - the maximum element in the array, minEle - the minimum element in the array\nBegin\n  maxEle <- arr[0]\n  minEle <- arr[0]\n  for i = 0 to length(arr)-1 do\n    if arr[i] > maxEle then\n      maxEle <- arr[i]\n    end if\n    if arr[i] < minEle then\n      minEle <- arr[i]\n    end if\n  end for\n  return maxEle, minEle\nEnd", "category": "Python"}, {"instruction": "Write a function in Python that takes two arguments, a list of strings and a letter, and returns the strings which contain the letter.", "input": "lst = [\"apple\",\"banana\",\"kiwi\",\"pear\"], letter = \"a\"", "output": "def find_with_letter(lst, letter):\n    result = []\n    for s in lst:\n        if letter in s:\n            result.append(s)\n    \n    return result", "category": "Python"}, {"instruction": "Given a dictionary of words, write Python code to find out the longest word in the dictionary.", "input": "dictionary = [\"apple\", \"orange\", \"pineapple\", \"banana\"]", "output": "def findLongestWord(dictionary):\n    longestWord = ''\n    longestLength = 0\n    for word in dictionary:\n        if len(word) > longestLength:\n            longestWord = word\n            longestLength = len(word)\n    return longestWord", "category": "Python"}, {"instruction": "Write Python code to print out an inverse dictionary where the original key becomes the value and the original value become the key.", "input": "original_dict = {'a':1, 'b':2, 'c':3}", "output": "inverse_dict = {value:key for key, value in original_dict.items()}\nprint(inverse_dict)", "category": "Python"}, {"instruction": "Construct an if condition in Python to check if a given number is within the range of [2, 12].", "input": "", "output": "if 2 <= x <= 12:\n    # do something", "category": "Python"}, {"instruction": "Given two strings s1 and s2, write a Python program to find whether s1 is an anagram of s2.", "input": "s1 = 'listen'\ns2 = 'silent'", "output": "def isAnagram(s1, s2): \n    if (sorted(s1) == sorted(s2)): \n        print(\"The strings are anagrams.\") \n    else: \n        print(\"The strings aren't anagrams.\")\n  \nisAnagram(s1, s2)", "category": "Python"}, {"instruction": "Create a function to find the total of all elements in the list", "input": "nums = [1, 2, 3, 4, 5]", "output": "def find_total(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total", "category": "Python"}, {"instruction": "Create a function that takes in a 2D list and prints the contents of the list in a 2D format", "input": "matrix = [\n    [1, 2],\n    [3, 4],\n    [5, 6]\n]", "output": "def print_matrix(matrix):\n    for row in matrix:\n        for num in row:\n            print(num, end=\" \")\n        print()", "category": "Python"}, {"instruction": "Using the given data, write a function that returns the average of the given numbers", "input": "a_list = [1, 2, 3, 4, 5]", "output": "def average(a_list):\n    total = 0\n    for num in a_list:\n        total += num\n    return total / len(a_list)", "category": "Python"}, {"instruction": "Implement a function that checks if two strings are anagrams.", "input": "", "output": "def is_anagram(a, b):\n    char_to_count = {}\n    \n    if len(a) != len(b):\n        return False\n  \n    for char in a:\n        if char in char_to_count:\n            char_to_count[char] += 1\n        else:\n            char_to_count[char] = 1\n    \n    for char in b:\n        if char not in char_to_count:\n            return False\n        else:\n            char_to_count[char] -= 1\n\n    for count in char_to_count.values():\n        if count != 0:\n            return False\n\n    return True", "category": "Python"}, {"instruction": "Write a function to remove all words that contain a certain letter from an array.", "input": "arr = [\"apple\", \"banana\", \"orange\", \"grape\"];\nletter = 'a'", "output": "def remove_words_by_letter(arr, letter):\n  return [word for word in arr if letter not in word]\n\n# Testing\narr = [\"apple\", \"banana\", \"orange\", \"grape\"]\nfiltered_arr = remove_words_by_letter(arr, 'a')\nprint(\"Filtered array: \", filtered_arr)", "category": "Python"}, {"instruction": "Given a dictionary, write a function to get all the keys with a given value.", "input": "my_dict = {'a': 1, 'b': 2, 'c': 2};", "output": "def get_keys_by_value(my_dict, value):\n  keys = []\n  for k, v in my_dict.items():\n    if v == value:\n      keys.append(k)\n\n  return keys\n\n# Testing\nmy_dict = {'a': 1, 'b': 2, 'c': 2}\nkeys = get_keys_by_value(my_dict, 2)\nprint(\"Keys with the value 2 are: \", keys)", "category": "Python"}, {"instruction": "Given an array of integers, find the pair of elements that have the greatest difference.", "input": "arr = [2, 5, 9, 11, 15, 27];", "output": "def find_greatest_difference(arr):\n  max_diff = 0\n  for i in range(len(arr)):\n    for j in range(i+1, len(arr)):\n      diff = abs(arr[i] - arr[j])\n      if diff > max_diff:\n        max_diff = diff\n\n  return max_diff\n\n# Testing\narr = [2, 5, 9, 11, 15, 27]\nmax_diff = find_greatest_difference(arr)\nprint(\"Greatest difference is: \", max_diff)", "category": "Python"}, {"instruction": "Find the index of the element that occurs only once in the array.", "input": "arr = [1, 1, 5, 5, 6, 8];", "output": "def find_unique_element(arr):\n index = -1\n for i in range(len(arr)):\n  freq = 0\n  for j in range(len(arr)):\n   if arr[i] == arr[j]:\n    freq += 1\n if freq == 1:\n  index = i\n  break\n return index\n\n# Testing\narr = [1, 1, 5, 5, 6, 8]\nindex = find_unique_element(arr)\nprint(\"Index of the unique element is: \", index)", "category": "Python"}, {"instruction": "Design a function with two inputs that returns the maximum of the two.", "input": "", "output": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b", "category": "Python"}, {"instruction": "Given a list of numbers, write code using Python to print the sum of all elements.", "input": "list_numbers = [2, 3, 4, 5, 6]", "output": "sum_of_numbers = 0\n\nfor i in list_numbers:\n    sum_of_numbers += i\n\nprint(sum_of_numbers)", "category": "Python"}, {"instruction": "Write Python code to reverse the letters in the string \"hello\".", "input": "", "output": "def reverseString(s): \n    return s[::-1]\n\nprint(reverseString('hello'))", "category": "Python"}, {"instruction": "Write a function that takes in two numbers in Roman numerals and outputs the sum.", "input": "Roman numeral 1: XVI\nRoman numeral 2: IX", "output": "def roman_numerals_sum(num1, num2):\n    \"\"\"This function takes two Roman numerals as parameters and outputs their sum in Roman numerals.\"\"\"\n    Int1 = int(roman.fromRoman(num1))\n    Int2 = int(roman.fromRoman(num2))\n    Sum = Int1 + Int2\n    return roman.toRoman(Sum)", "category": "Python"}, {"instruction": "Create a function that returns an array of the three most common elements in an array.", "input": "lst = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]", "output": "def three_most_common(lst):\n    \"\"\"This function takes in an array and returns an array of the three most common elements.\"\"\"\n    lst_len = len(lst)\n    lst_dic = dict()\n \n    for n in lst:\n        if n in lst_dic:\n            lst_dic[n] += 1\n        else:\n            lst_dic[n] = 1\n \n    max_val = 0\n    max_key = 0\n    sec_key = 0\n    last_key = 0\n \n    for key, val in lst_dic.items():\n        if val > max_val:\n            max_val = val\n            last_key = sec_key\n            sec_key = max_key\n            max_key = key\n        elif val > sec_key:\n            last_key = sec_key\n            sec_key = key\n        elif val > last_key:\n            last_key = key\n    return [max_key, sec_key, last_key]", "category": "Python"}, {"instruction": "Write a function to concatenate two strings in Python.", "input": "", "output": "def concat_strings(string1, string2): \n    return string1 + string2", "category": "Python"}, {"instruction": "How does the Binary Search algorithm work?", "input": "", "output": "The Binary Search algorithm works by repeatedly dividing an ordered list of items into half and searching for the desired element in that half. If the desired element is not present in the current half, the algorithm moves to the other half and the search continues until either the desired element is found or the list is exhausted.", "category": "Python"}, {"instruction": "Write code in Python to calculate the number of times a given number appears in a list.", "input": "list = [2, 4, 3, 5, 4, 2, 3]\nNumber to find: 4", "output": "count = 0\nfor x in list:\n  if x == 4:\n    count = count +1\n\nprint(\"The number 4 appears in the list \", count, \" times.\")", "category": "Python"}, {"instruction": "What is a linked list?", "input": "", "output": "A linked list is a data structure in which each element contains data as well as a link to the next element in the list. Linked lists provide a dynamic allocation of memory which can be useful for certain applications.", "category": "Python"}, {"instruction": "Drop all duplicates from a NumPy array.", "input": "arr = [10, 20, 30, 10, 30, 20]", "output": "import numpy as np\n\ndef drop_duplicates(arr):\n    return np.unique(arr)", "category": "Python"}, {"instruction": "Create a Python class with methods that accept a value and increase the stored value by 5.", "input": "", "output": "class MyClass:\n    def __init__(self, value):\n        self.value = value\n        \n    def increase_by_five(self):\n        self.value += 5", "category": "Python"}, {"instruction": "Write a Python program to calculate the median of three given numbers.", "input": "", "output": "def median_num(n1, n2, n3):\n    if n1 > n2 and n2 > n3:\n        return n2\n    elif n3 > n2 and n2 > n1:\n        return n2\n    elif n1 > n3 and n3 > n2:\n        return n3\n    elif n2 > n3 and n3 > n1:\n        return n3\n    elif n2 > n1 and n1 > n3:\n        return n1\n    else:\n        return n1", "category": "Python"}, {"instruction": "Create an algorithm to evaluate a given expression.", "input": "(3 + 5) * 2", "output": "1. Initialize result as 0.\n2. Save 3 plus 5 in a variable.\n3. Multiply the variable by 2 and save it in another variable.\n4. Set result as the value of the new variable.\n5. Return result.", "category": "Python"}, {"instruction": "Find the length of the longest increasing subsequence in an array.", "input": "arr = [10, 22, 9, 33, 21, 50, 41, 60]", "output": "def longest_increasing_subsequence(arr):\n    n = len(arr)\n\n    # L[i] stores the length of the Longest Increasing \n    # Subsequence ending with arr[i]\n    L = [1]*n\n  \n    # consider all the elements of the array in turn\n    for i in range(1, n):\n        for j in range(i):\n\n            # if the element is larger then the prev element\n            # update L[i] with the maximum of all such\n            # possible values of L[j] + 1\n            if arr[i] > arr[j]:\n                L[i] = max(L[i], L[j] + 1)\n  \n    # L[i] now stores the LIS ending with arr[i]\n    # find the maximum of all the stored values\n    longest_length = 0\n    for i in range(n):\n        longest_length = max(longest_length, L[i])\n    return longest_length\n\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]))", "category": "Python"}, {"instruction": "Write an algorithm to sort data in an array in ascending order.", "input": "arr = [8, 0, 5, 10, 4, 6]", "output": "def bubble_sort(arr):\n    n = len(arr)\n\n    # Traverse through all array elements\n    for i in range(n-1):\n\n        # Last i elements are already in place\n        for j in range(0, n-i-1):\n\n            # traverse the array from 0 to n-i-1\n            # Swap if the element found is greater\n            # than the next element\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\nbubble_sort(arr)\nprint(arr)", "category": "Python"}, {"instruction": "Write a function that takes a sentence as an argument and returns a Dictionary of all the words and their counts in the sentence.", "input": "'The quick brown fox jumps over the lazy dog'", "output": "def count_words(sentence):\n    words_counts = {}\n\n    words = sentence.split(\" \")\n    for word in words:\n        if word not in words_counts:\n            words_counts[word] = 0\n        words_counts[word] += 1\n    return words_counts\n\nprint(count_words('The quick brown fox jumps over the lazy dog'))", "category": "Python"}, {"instruction": "Write a function that takes a list of integers and returns a new list with all duplicate numbers removed.", "input": "[3, 6, 8, 10, 10, 11, 15, 15, 15]", "output": "def remove_duplicate_integers(nums):\n    new_list = []\n    for num in nums:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list\n\nprint(remove_duplicate_integers([3, 6, 8, 10, 10, 11, 15, 15, 15]))", "category": "Python"}, {"instruction": "Generate a random number between -1 and 1 using a Python library.", "input": "", "output": "import random\nrandom_num = random.uniform(-1,1)\nprint(random_num)", "category": "Python"}, {"instruction": "How do you use a \u2018for\u2019 loop in Python to iterate over a list of strings?", "input": "list=[\"Dog\",\"Cat\",\"Cow\"]", "output": "for string in list:\n    print(string)", "category": "Python"}, {"instruction": "Build a Python dictionary that contains the names of the months as keys and the numbers of days in each month as values.", "input": "", "output": "months = {\"January\":31, \"February\":28, \"March\":31, \"April\":30, \"May\":31, \"June\":30, \"July\":31, \"August\":31, \"September\":30, \"October\":31, \"November\":30, \"December\":31}", "category": "Python"}, {"instruction": "Given two strings, create a function to find the total number of occurrences of the second string in the first string.", "input": "str1 = \"Hello World!\"\nstr2 = \"lo\"", "output": "def count_string_occurrences(str1, str2):\n    \"\"\"This function takes in two strings and returns the total number of occurrences of the second string in the first string.\"\"\"\n    count = 0\n    for i in range(len(str1) - len(str2) + 1):\n        if str1[i:i + len(str2)] == str2:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Create a function to generate a list with length n of numbers from 0 to n-1.", "input": "n = 5", "output": "def generate_list(n):\n    \"\"\"This function takes an integer n and returns a list with length n of numbers from 0 to n-1.\"\"\"\n    return [i for i in range(n)]", "category": "Python"}, {"instruction": "Create a function to detect whether a given character is a vowel or not.", "input": "", "output": "def is_vowel(char):\n    \"\"\"This function takes in a character and returns true if the character is a vowel, false otherwise.\"\"\"\n    vowels = 'aeiouAEIOU'\n    return char in vowels", "category": "Python"}, {"instruction": "Create a function to filter out elements in an array that meet a given criteria.", "input": "lst = [2, 3, 4, 5, 6, 7, 8, 9] \ncriteria = lambda x: x % 2 == 0", "output": "def filter_by(lst, criteria):\n    \"\"\"This function takes an array of elements and a criteria and returns an array of elements filtered by the criteria.\"\"\"\n    return [x for x in lst if criteria(x)]", "category": "Python"}, {"instruction": "Create a function that takes in a string and a number and returns a new string with the character at the given index replaced with another character.", "input": "str = \"Hello World!\"\n index = 3\n new_char = 'a'", "output": "def replace_char_at(str, index, new_char):\n    \"\"\"This function takes in a string and a number and returns a new string with the character at the given index replaced with another character.\"\"\"\n    return str[:index] + new_char + str[index + 1:]", "category": "Python"}, {"instruction": "Create a function to filter out strings that have more than n number of characters in an array.", "input": "lst = ['book', 'pen', 'pencil', 'eraser', 'ruler']\n n = 4", "output": "def filter_strings(lst, n):\n    \"\"\"This function takes in an array of strings and an integer n and returns an array of strings with more than n characters.\"\"\"\n    return [word for word in lst if len(word) > n]", "category": "Python"}, {"instruction": "Create a function that takes an array of integers and returns an array where each index is the product of all the numbers except for the number at that index.", "input": "lst = [1, 2, 3, 4, 5]", "output": "def product_of_all_except_self(lst):\n    \"\"\"This function takes an array of integers and returns an array where each index is the product of all the numbers except for the number at that index.\"\"\"\n    products = []\n    n = len(lst)\n    for i in range(n):\n        product = 1\n        for j in range(n):\n            if i != j:\n                product *= lst[j]\n        products.append(product)\n    return products", "category": "Python"}, {"instruction": "Create a function that filters an array of elements based on a given criteria and returns an array of the resulting elements.", "input": "lst = [2, 3, 4, 5, 6, 7, 8, 9]  # elements to filter\ncriteria = lambda x: x > 5  # criterion to filter by", "output": "def filter_by(lst, criteria):\n    \"\"\"This function takes an array of elements and a criteria and returns an array of elements filtered by the criteria.\"\"\"\n    return [x for x in lst if criteria(x)]", "category": "Python"}, {"instruction": "Describe the necessary steps to debug a python program.", "input": "", "output": "Steps to debug a python program:\n\n1. Check the syntax of your code to look for any obvious mistakes\n2. Use print statement to understand the the variables in your program and the flow of execution.\n3. Working your way through the program line by line to identify the source of the bug.\n4. Use debugging tools such as pdb to step through the code and look for any unexpected values or flow. \n5. If the bug is in a library that you're using, try to look into its source code to look for the bug.\n6. Test small pieces of your code in isolation.\n7. Take a break and come back to it with a fresh mind.\n8. Ask for help from other programmers.", "category": "Python"}, {"instruction": "Create a TCP server program using Python.", "input": "", "output": "import socket\n\n# create a socket object\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# get local machine name\nhost = socket.gethostname()\n\nport = 9999\n\n# bind to the port\ns.bind((host, port))\n\n# queue up to 5 requests\ns.listen(5)\n\nwhile True:\n   # establish a connection\n   clientsocket,addr = s.accept()\n   print(\"Got a connection from %s\" % str(addr))\n\n   msg = 'Thank you for connecting' + \"\\r\\n\"\n   clientsocket.send(msg.encode('ascii'))\n   clientsocket.close()", "category": "Python"}, {"instruction": "Create a function that takes a list and removes duplicates of the same element.", "input": "myList4 = [1,2,2,3,3,3]", "output": "def removeDuplicate(myList4):\n    result = []\n    for x in myList4:\n        if x not in result:\n            result.append(x)\n    return result\n\nremoveDuplicate = removeDuplicate(myList4)\nprint(removeDuplicate)", "category": "Python"}, {"instruction": "Create a function that takes 2 strings as arguments, and returns the longest string.", "input": "", "output": "def longestString(str1, str2):\n    if len(str1) > len(str2):\n        longestString = str1\n    else:\n        longestString = str2\n    return longestString\n\nlongestString = longestString(\"Hello\", \"World\")\nprint(longestString)", "category": "Python"}, {"instruction": "Design a class to represent a person's name.", "input": "", "output": "class PersonName:\n    \"\"\"Represents a person's name\"\"\"\n\n    # Instance Variables\n    first_name = \"\"\n    middle_name = \"\"\n    last_name = \"\"\n    \n    def __init__(self, first_name, middle_name, last_name):\n        \"\"\"Constructor to initialize the PersonName object\"\"\"\n        self.first_name = first_name\n        self.middle_name = middle_name\n        self.last_name = last_name\n  \n    # Other methods for getting, setting and printing the name", "category": "Python"}, {"instruction": "Implement a function to convert USD dollars to Euro.", "input": "amount = 100", "output": "def convert_usd_to_euro(amount):\n    \"\"\"This function takes a given amount of USD and returns the equivalent amount in Euro \"\"\"\n    euro_amount = amount * 0.82\n    return euro_amount\n    \n# Example Usage\nusd_amount = 100\neuro_amount = convert_usd_to_euro(usd_amount)\n# euro_amount should be 82.0", "category": "Python"}, {"instruction": "Given a list of numbers, write a Python function to find out the sum of the squares of all the numbers.", "input": "[1, 2, 3]", "output": "def sumSquares(numbers):\n  sum = 0\n  for num in numbers:\n    sum += (num ** 2)\n  return sum", "category": "Python"}, {"instruction": "Create a program that checks for duplicates in a list and removes them.", "input": "", "output": "def remove_duplicates(lst):\n    res = []\n    for ele in lst:\n        if ele not in res:\n            res.append(ele)\n    return res", "category": "Python"}, {"instruction": "For the following sentence, produce an output that prints the position and letter of each vowel.", "input": "text = \"Programming is fun\"", "output": "for index, letter in enumerate(text):\n    if letter in 'aeiou':\n        print(f'The letter {letter} is in position {index}.')", "category": "Python"}, {"instruction": "Create a program to calculate the Greatest Common Denominator (GCD) of two numbers.", "input": "", "output": "def gcd(a, b):\n    while b != 0:\n        c = a % b\n        a = b\n        b = c\n    return a", "category": "Python"}, {"instruction": "In a given list of integers, find the value that appears most frequently.", "input": "nums = [2,2,2,2,3,4,5,6,6,7]", "output": "def most_frequent(nums):\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 1\n        else:\n            count[num] += 1\n    max_count = 0\n    res = 0\n    for key, val in count.items():\n        if val > max_count:\n            res = key\n        max_count = max(max_count, val)\n    return res", "category": "Python"}, {"instruction": "Design a classifier using Machine Learning in Python", "input": "", "output": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n# Load the data\ndata = pd.read_csv('data.csv')\n\n# Split dataset into training and testing sets\nX, y = data.iloc[:, 0: -1], data.iloc[:, -1]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, \n                                                    random_state=42)\n\n# Preprocess by scaling the data\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n# Create the model \nclf = GradientBoostingClassifier(n_estimators=100, max_depth=4, \n                                 learning_rate=0.1)\n\n# Train the model\nclf.fit(X_train_scaled, y_train)\n\n# Test the model\ny_pred = clf.predict(X_test_scaled)", "category": "Python"}, {"instruction": "Insert a node at a specific position in the linked list.", "input": "Linked List: 0->3->4->7\nNode: 5\nPosition: 2", "output": "def insert_at_pos(head, node_data, pos):\n    new_node = Node(node_data)\n    if pos == 0:\n        new_node.next = head\n        return new_node\n    temp = head \n    for i in xrange(pos-1):\n        temp = temp.next\n    new_node.next = temp.next\n    temp.next = new_node\n    return head", "category": "Python"}, {"instruction": "Construct a linked list using the given data.", "input": "Data: [5, 6, 2, 9, 0]", "output": "class LinkedList:\n    def __init__(self):\n        self.head = None\n    def insert(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n# Given data\ndata = [5, 6, 2, 9, 0]\n\n# Create linked list\nlinked_list = LinkedList()\n\nfor i in data:\n    linked_list.insert(i)", "category": "Python"}, {"instruction": "Find the maximum subarray sum in an array of integers.", "input": "arr = [-2, -3, 4, -1, -2, 1, 5, -3]", "output": "def max_subarray_sum(arr):\n    \"\"\"This function takes an array of integers and returns the maximum subarray sum \"\"\"\n    current_max = arr[0]\n    overall_max = arr[0]\n\n    for num in arr[1:]:\n        current_max = max(current_max + num, num)\n        overall_max = max(current_max, overall_max)\n\n    return overall_max\n\n# Example Usage\narr = [-2, -3, 4, -1, -2, 1, 5, -3]\nmax_sum = max_subarray_sum(arr)\n# max_sum should be 7", "category": "Python"}, {"instruction": "Compute the length of a given string without using in built length function.", "input": "String: Hello", "output": "def calculate_length(string):\n    count = 0\n    for letter in string:\n        count += 1\n    return count", "category": "Python"}, {"instruction": "If a given string contains four consecutive identical characters, write a code to print the string and the count of the consecutive characters.", "input": "String: aaaagood", "output": "def four_consecutive_chars(input_string): \n    count = 1\n    prev_char = \"\" \n    result = \"\" \n    for char in input_string: \n        if prev_char == char:\n            count += 1 \n            if count == 4:\n                result += char + \" : \" + str(count) \n        else: \n            result += char + \" : \" + str(count) \n            count = 1\n        prev_char = char \n    print(input_string)\n    print(result)", "category": "Python"}, {"instruction": "Write a code that inverts the case for the given string.", "input": "String: wElCOme", "output": "def invert_case(input_string):\n    result = \"\"\n    for x in input_string: \n        if x.isupper():\n            result += x.lower() \n        else: \n            result += x.upper() \n    return result", "category": "Python"}, {"instruction": "Given a list, print all its elements in reverse order.", "input": "list = [2, 3, 4, 5, 6]", "output": "def reverse_print(num_list):\n  for i in range(len(num_list)-1, -1, -1):\n    print(num_list[i])\n\n# Driver code\nif __name__ == \"__main__\":\n   list = [2, 3, 4, 5, 6]\n   reverse_print(list)\nOutput:\n6\n5\n4\n3\n2", "category": "Python"}, {"instruction": "Given a list, remove all elements that are divisible by 4.", "input": "list = [8, 5, 6, 8, 9, 3, 10]", "output": "def remove_elements_divisible_by_four(num_list):\n   modified_list = []\n   for num in num_list:\n      if num % 4 != 0:\n         modified_list.append(num)\n   return modified_list\n   \n# Driver code\nif __name__ == \"__main__\":\n   list = [8, 5, 6, 8, 9, 3, 10]\n   print(remove_elements_divisible_by_four(list))\nOutput:\n[5, 9, 3]", "category": "Python"}, {"instruction": "Reorder the code snippet so that the loop terminates when i is equal to 5.", "input": "i = 0\nwhile i < 5:\n\tprint(i)\n\ti += 1", "output": "i = 0\nwhile i < 5:\n\tprint(i)\n\tif i == 5:\n\t\tbreak\n\ti += 1", "category": "Python"}, {"instruction": "Select a random element from a given list.", "input": "list = [1, 5, 8, 10]", "output": "import random\n\ndef select_random_element(list):\n    index = random.randint(0, len(list)-1)\n    return list[index]\n\nif __name__ == \"__main__\":\n    list = [1, 5, 8, 10]\n    print(select_random_element(list))", "category": "Python"}, {"instruction": "Modify the code snippet so that it prints the **largest** element in the given list.", "input": "list = [1, 5, 8, 10]", "output": "list = [1, 5, 8, 10]\n\n# This code will print the largest element in the list\nlargest = list[0]\n\nfor item in list:\n    if item > largest:\n        largest = item\n\nprint(largest)", "category": "Python"}, {"instruction": "Write a code to create a sentence from a given list of words.", "input": "words = [\"Today\",\"I\",\"am\",\"happy\"]", "output": "def create_sentence(words):\n   sentence = \"\"\n   for word in words:\n      sentence += word + \" \"\n   return sentence.strip()\n   \nif __name__ == \"__main__\":\n   words = [\"Today\",\"I\",\"am\",\"happy\"]\n   print(create_sentence(words))\nOutput:\nToday I am happy", "category": "Python"}, {"instruction": "Generate a code to execute a block of code 10 times in Python.", "input": "", "output": "for i in range(10): \n  # execute code here", "category": "Python"}, {"instruction": "Create a code to import a module called 'math' in Python.", "input": "", "output": "import math", "category": "Python"}, {"instruction": "Create a function to print the result of a multiplication table.", "input": "Table Size: 5", "output": "def print_multiplication_table(size):\n    for i in range(1, size+1): \n        for j in range(1, size+1): \n            print(str(i*j) + \"\\t\", end=' ') \n        print()", "category": "Python"}, {"instruction": "Write a Python program to create a histogram for a given list of numbers.", "input": "list = [2, 3, 6, 5]", "output": "import matplotlib.pyplot as plt\n\nplt.hist(list)\n\nplt.title(\"Histogram of numbers\")\nplt.xlabel(\"Values\")\nplt.ylabel(\"Frequency\")\n\nplt.show()", "category": "Python"}, {"instruction": "Create a Python function to print out the last n items from a given list.", "input": "list = [1, 2, 3, 4, 5], n = 3", "output": "def last_n_items(arr, n):\n    if len(arr) < n:\n        return arr\n    return arr[-n:]\n    \n# Example\nlast_n_items(list, n) # returns [3, 4, 5]", "category": "Python"}, {"instruction": "Generate a Python script that iterates over a list and prints each item.", "input": "list = [1, 2, 3, 4]", "output": "for item in list:\n    print(item)", "category": "Python"}, {"instruction": "Create a Dictionary where the list items are the keys and the square of the items are the values", "input": "myList1 = [1, 2, 3, 4, 5, 6]", "output": "def myDict(myList1):\n    result = {}\n    for i in myList1:\n        result[i] = i**2\n    return result\n\nmyDict = myDict(myList1)\nprint(myDict)", "category": "Python"}, {"instruction": "Determine which elements of the given list are strings.", "input": "data = [0, 'a', 99, [], 'b', None]", "output": "def isString(data):\n    strings = []\n    for element in data:\n        if isinstance(element, str):\n            strings.append(element)\n    return strings\n\nprint(isString(data))", "category": "Python"}, {"instruction": "Parse a given expression tree to evaluate the result", "input": "", "output": "def evaluate(root):\n    # empty tree\n    if root is None:\n        return 0\n    # leaf node\n    if root.left is None and root.right is None:\n        return int(root.data)\n    # evaluate left tree\n    left_sum = evaluate(root.left)\n \n    # evaluate right tree\n    right_sum = evaluate(root.right)\n \n    # check which operation to apply\n    if root.data == '+':\n        return left_sum + right_sum\n \n    elif root.data == '-':\n        return left_sum - right_sum\n \n    elif root.data == '*':\n        return left_sum * right_sum\n \n    else:\n        return left_sum / right_sum", "category": "Python"}, {"instruction": "Replace all vowels in a string with a specified letter", "input": "string = 'hello world'", "output": "def replaceVowels(string, ch): \n    vowels = \"aeiouAEIOU\"\n    for x in string:\n        if x in vowels:\n            string = string.replace(x, ch) \n    return string", "category": "Python"}, {"instruction": "Implement a function to retrieve the nth node of the singly-linked list", "input": "", "output": "def getNthNode(head, n): \n    if n == 0:\n        return head.value \n    current = head \n    for _ in range (n):\n        if not current.next : \n            return None\n        current = current.next \n    return current.value", "category": "Python"}, {"instruction": "Compress a given string using Run Length Encoding", "input": "string=\"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW\"", "output": "def RunLengthEncoding(string):\n    result = \"\" \n    count = 0\n    current = string[0] \n  \n    for i in range(len(string)): \n        if (string[i] == current): \n            count+= 1 \n        else: \n            result += current + str(count) \n            current = string[i] \n            count = 1\n    result += current + str(count)\n  \n    return result", "category": "Python"}, {"instruction": "Write Python code to return all indices of substrings in a given string.", "input": "string= \"hi world bye world\"", "output": "def substring_indices(string): \n    lengths = []\n    # calculate length of substring \n    for i in range(len(string)): \n        for j in range(i+1, len(string)+1): \n            lengths.append(string[i:j]) \n\n    # create array to hold all indices \n    indices = []\n    for length in lengths:\n        indices.append([i for i in range(len(string)) if string.startswith(length, i)])\n\n    return indices", "category": "Python"}, {"instruction": "Find the longest substring of a string without repeating characters", "input": "string=\"abcabcbb\"", "output": "def longestSubstring(string): \n    start_index = max_length = 0\n    visited = {} \n  \n    # traverse through the string  \n    for i in range(len(string)):  \n        if string[i] in visited and start_index <= visited[string[i]]: \n            start_index = visited[string[i]] + 1\n        else: \n            max_length = max(max_length, i - start_index + 1) \n  \n        visited[string[i]] = i \n  \n    return max_length", "category": "Python"}, {"instruction": "What is tail recursion?", "input": "", "output": "Tail recursion is a special form of recursion in which the recursive call is the last statement in the function. This form of recursion improves space efficiency of the algorithm, since only one activation record is needed at any given time, as there is no need to hold onto the history of the recursive call stack. This form of recursion can often be replaced by iterative solution for better performance.", "category": "Python"}, {"instruction": "Using the given array, create a function that returns a new array that contains elements that are greater than the given number.", "input": "arr = [2, 3, 6, 9, 5]\nnum = 4", "output": "def greater_than(arr, num):\n    result = []\n    for el in arr:\n        if el > num:\n            result.append(el)\n    return result\n\nprint(greater_than(arr, num))", "category": "Python"}, {"instruction": "In Python, write a code snippet to calculate the average of numbers in a list.", "input": "listOfNumbers = [2, 4, 6, 8]", "output": "def avg(listOfNumbers):\n    total = 0\n    for number in listOfNumbers:\n        total += number\n    return total / len(listOfNumbers)\n\nprint(avg(listOfNumbers))", "category": "Python"}, {"instruction": "Using the given array, write a function to return the count of elements next to each other that are equal.", "input": "a = [1,1,1,2,2,3,4,4,4,4]", "output": "def adjacent_elements_count(arr):\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            count += 1\n\n    return count\n\nprint(adjacent_elements_count(a))", "category": "Python"}, {"instruction": "Given the example JSON string, neatly organize the contents of the object using Python code.", "input": "{ \"1\": \"Apple\", \"2\": \"Orange\", \"3\": {\"A\": \"Banana\", \"B\": \"Grape\"} }", "output": "import json\n\ndata = { \"1\": \"Apple\", \"2\": \"Orange\", \"3\": {\"A\": \"Banana\", \"B\": \"Grape\"} }\n\ndata_json = json.dumps(data, indent=4)\n\nprint(data_json)", "category": "Python"}, {"instruction": "Write an algorithm to search an element in a linked list.", "input": "", "output": "def search_node(node, target):\n    while node is not None: \n        if node.data == target: \n            return node\n        else: \n            node = node.next\n    return None", "category": "Python"}, {"instruction": "What is the most efficient way to check if a given number is a prime in Python?", "input": "", "output": "The most efficient way to check if a given number is a prime in Python is to use the numpy.prime() function. This function returns a boolean value indicating whether the given number is a prime or not. The syntax is as follows:\n\nnumpy.prime(n)\n\nThe argument n must be a positive integer.\n\nFor example, to check if the number 7 is prime, you can use the following code:\n\nimport numpy as np\n\nnumber = 7\nprint(np.isprime(number)) # returns True", "category": "Python"}, {"instruction": "What is the best way to print something to the console in Python?", "input": "", "output": "The best way to print something to the console in Python is by using the built-in print() function. The syntax of this function is as follows:\n\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nThe print() function prints the given object to the standard output. The sep and end are keyword-only arguments which specify string to separate and end the output respectively. The default separator is a single space and the default end-string is a newline. The file argument specifies an open file object, for printing to a file, or an object with a write() method.\n\nFor example, to print the string \"hello\" to the console, you can use this code:\n\nprint(\"hello\")", "category": "Python"}, {"instruction": "Create a program to apply upper case to a given string.", "input": "String = \"welcome to The world Of gEEks\"", "output": "def upperCaseString(str): \n    res = \"\" \n    for i in range(len(str)):\n        if i==0 or (str[i-1]==' '): \n            res = res + str[i].upper()\n        else:\n            res = res + str[i]\n    return res \n\nstr = \"welcome to The world Of gEEks\"\nprint(upperCaseString(str))", "category": "Python"}, {"instruction": "Create a program to output an array of words from a given string.", "input": "String = \"Welcome to the world of Geeks\"", "output": "def extract_words(str): \n    \n    # to store the extracted words \n    words = [] \n  \n    # split the string \n    word = \"\" \n    for i in str: \n        if i is not \" \": \n            word = word + i \n        else: \n            words.append(word) \n            word = \"\"             \n    words.append(word) \n      \n    # return the list of words \n    return words  \n  \n# Driver code \nstr = \"Welcome to the world of Geeks\"\nwords = extract_words(str) \nfor i in words: \n    print(i)", "category": "Python"}, {"instruction": "Design and write a code to detect and count the number of occurrences of a particular substring in a string.", "input": "String = \"Please find the number of occurrences of this string\"\nSubstring = \"string\"", "output": "def count_occurrences(str, substr):\n    count = 0\n    start_index = -1 \n    while True:\n        start_index = str.find(substr, start_index + 1)\n        if start_index == -1:\n            break \n        count = count + 1\n    return count \nprint(\"Number of occurrences:\",count_occurrences(\"Please find the number of occurrences of this string\", \"string\"))", "category": "Python"}, {"instruction": "Create a program to output the items in a list that appear only once.", "input": "list = [50, 10, 20, 30, 10, 50, 44, 55, 44]", "output": "items_set = set(list)\nunique_items = []\n\nfor item in items_set:\n    if list.count(item) == 1:\n        unique_items.append(item)\n\nprint(\"Unique items:\",unique_items)", "category": "Python"}, {"instruction": "Design and write a code to identify the maximum number of vowels contained in any given string.", "input": "String = \"Queensland\"", "output": "def vowel_count(str): \n    # making a set of vowels \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'} \n  \n    # counter variable to store the count of vowels \n    count = 0\n  \n    #a loop to check every character in a given string\n    for alphabet in str: \n  \n        # if statement to check if the character is in set of vowels \n        if alphabet in vowels: \n            count = count + 1\n  \n    #returning the count \n    return count \n  \n# Driver code \nstr = \"Queensland\"\nprint(\"No. of vowels :\", vowel_count(str))", "category": "Python"}, {"instruction": "In Python, define a function to extract characters after a given substring.", "input": "String = \"Hello-world-123\"\nSubstring = \"-world\"", "output": "def extract_string(str, substr):\n    start_index = str.find(substr)\n    if start_index == -1:\n        return \"\"\n    else:\n        end_index = start_index + len(substr)\n        return str[end_index:] \n   \nx = extract_string(\"Hello-world-123\", \"-world\")\nprint(x)", "category": "Python"}, {"instruction": "Create a Python program to validate an email address according to RFC5322 syntax.", "input": "", "output": "import re\ndef validate(email):\n    regex = r'^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n    if re.search(regex, email):\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Convert the given list to a dictionary where the items are the keys and the values are square of the keys.", "input": "myList3 = [1, 2, 3, 4, 5]", "output": "def myDict(myList3):\n    result = {}\n    for i in myList3:\n        result[i] = i**2\n    return result\n\nmyDict = myDict(myList3)\nprint(myDict)", "category": "Python"}, {"instruction": "Implement a function for generating a list of Fibonacci numbers up to n.", "input": "", "output": "def fibonacci_list(n): \n    fib_list = [1,1] \n    while fib_list[-1] < n: \n        next_num = fib_list[-1] + fib_list[-2] \n        fib_list.append(next_num)\n    return fib_list", "category": "Python"}, {"instruction": "Design a class for an Employee with attributes name, experience, and salary.", "input": "", "output": "class Employee: \n    def __init__(self, name, experience, salary):\n        self.name = name\n        self.experience = experience\n        self.salary = salary\n        \n    def get_name(self):\n        return self.name\n    \n    def get_experience(self):\n        return self.experience\n    \n    def get_salary(self):\n        return self.salary", "category": "Python"}, {"instruction": "Construct an if/else statement that checks if a number is between 1 and 10.", "input": "", "output": "if n >= 1 and n <= 10:\n    # do something\nelse:\n    # do something else", "category": "Python"}, {"instruction": "Develop an algorithm to process a given matrix.", "input": "", "output": "def processMatrix(matrix):\n  result_matrix = [[0 for i in range(len(matrix[0]))] for j in range(len(matrix))] \n  for row in range(len(matrix)):\n    for col in range(len(matrix[0])):\n      element = matrix[row][col]\n      # perform processing on element here\n      result_matrix[row][col] = element\n  return result_matrix", "category": "Python"}, {"instruction": "Develop a Python class for handling the API calls.", "input": "", "output": "class APIHandler:\n    def __init__(self, base_url, api_key):\n        self.base_url = base_url\n        self.api_key = api_key\n    \n    def get(self, endpoint):\n        response = requests.get(self.base_url + endpoint)\n        return response\n    \n    def post(self, endpoint, data):\n        headers = {'Authorization': 'Bearer ' + self.api_key}\n        response = requests.post(self.base_url + endpoint, headers=headers, data=data)\n        return response", "category": "Python"}, {"instruction": "Please write a program that prints out the Fibonacci sequence from 1 to n.", "input": "n = 10", "output": "\"\"\"\nPlease write a program that prints out the Fibonacci sequence from 1 to n.\n\"\"\"\ndef fibonacci(n):\n    fib = [1, 1]\n    for i in range(2, n):\n        a = fib[i-2]\n        b = fib[i-1]\n        fib.append(a+b)\n    return fib[:n]\n\nprint(fibonacci(n)) # [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]", "category": "Python"}, {"instruction": "Create a program that sorts an array of integers in ascending order.", "input": "arr = [5, 9, 1, 4, 3]", "output": "\"\"\"\nCreate a program that sorts an array of integers in ascending order.\n\"\"\"\ndef sort(arr): \n    for i in range(len(arr)-1): \n        min_index = i \n        for j in range(i+1, len(arr)): \n            if arr[min_index] > arr[j]: \n                min_index = j       \n        arr[i], arr[min_index] = arr[min_index], arr[i]\n\nsort(arr)\nprint(arr) # [1, 3, 4, 5, 9]", "category": "Python"}, {"instruction": "Create a code that summation of all numbers between 1 to n.", "input": "n = 5", "output": "\"\"\"\nCreate a code that summation of all numbers between 1 to n.\n\"\"\"\ndef sum_all_nums(n):\n    res = 0\n    \n    for i in range(1, n+1):\n        res += i\n    \n    return res\n\nprint(sum_all_nums(n)) # 15", "category": "Python"}, {"instruction": "What is a text editor?", "input": "", "output": "A text editor is a computer program used for entering, editing, formatting and displaying text. Some text editors support syntax coloring, code completion and autopairing for programming languages. Text editors are used for programming, writing, composition, web design and many other forms of text-related work.", "category": "Python"}, {"instruction": "Given an array of strings, find the longest common prefix string.", "input": "arr = [\"Code\", \"Coder\", \"Codecademy\", \"Codesigner\"]", "output": "\"\"\"\nGiven an array of strings, find the longest common prefix string.\n\"\"\"\ndef longest_common_prefix(arr): \n    if len(arr) == 0: \n        return \"\" \n \n    min_length = len(min(arr, key = len)) \n  \n    result = \"\" \n    i = 0\n    while i < min_length: \n        char = arr[0][i] \n        for j in range(1, len(arr)): \n            if arr[j][i] != char: \n                return result \n        result += char \n        i += 1\n    return result\n\nprint(longest_common_prefix(arr)) # Code", "category": "Python"}, {"instruction": "Given a matrix of size m x n, transpose it.", "input": "matrix = [[1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9]]", "output": "\"\"\"\nGiven a matrix of size m x n, transpose it.\n\"\"\"\ndef transpose_matrix(matrix):\n    t_matrix = []\n    for i in range(len(matrix[0])):\n        temp = []\n        for j in range(len(matrix)):\n            temp.append(matrix[j][i])\n        t_matrix.append(temp)\n    return t_matrix\n    \nprint(transpose_matrix(matrix)) # [[1, 4, 7], [2, 5, 8], [3, 6, 9]]", "category": "Python"}, {"instruction": "How would you code a function that takes a string and returns true if it is a palindrome, and false otherwise?", "input": "", "output": "\"\"\"\nHow would you code a function that takes a string and returns true if it is a palindrome, and false otherwise?\n\"\"\"\ndef is_palindrome(string):\n    n = len(string)\n    for i in range(n // 2):\n        if string[i] != string[n - i - 1]:\n            return False\n    return True", "category": "Python"}, {"instruction": "How can you optimize this code to improve its efficiency?", "input": "def multiply_lists(first_list, second_list): \n    result = 0\n    for element in first_list: \n        for value in second_list: \n\t        result += element * value \n    return result", "output": "\"\"\"\nHow can you optimize this code to improve its efficiency?\n\"\"\"\ndef multiply_lists(first_list, second_list): \n    result = 0\n    for element in first_list:\n        result += element * sum(second_list)\n    return result", "category": "Python"}, {"instruction": "Write a function to fetch the first N elements from a given array.", "input": "array = [1,2,3,4,5,6,7,8,9,10]", "output": "def fetchFirstNElements(array, n):\n  firstNElements = []\n  for i in range(n):\n    firstNElements.append(array[i])\n  return firstNElements", "category": "Python"}, {"instruction": "Given an array of integers, find the sum of the numbers that are divisible by 3.", "input": "nums = [1, 5, 6, 9, 10, 12, 15]", "output": "\"\"\"\nGiven an array of integers, find the sum of the numbers that are divisible by 3.\n\"\"\"\ndef find_sum_divisible_by_3(nums):\n    total = 0\n    for num in nums:\n        if num % 3 == 0:\n            total += num\n    return total\n\nprint(find_sum_divisible_by_3(nums)) # 18", "category": "Python"}, {"instruction": "Create a class for doubly linked list in Python.", "input": "", "output": "class DoublyLinkedList:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n        self.previous = None\n\n    def append(self, val): \n        current = self \n        while current.next is not None: \n            current = current.next\n        current.next = DoublyLinkedList(val) \n        current.next.previous = current", "category": "Python"}, {"instruction": "Develop a Python program", "input": "Create a program to validate an ISBN number.", "output": "def is_valid_isbn(isbn):\n    isbn_length = len(isbn)\n    if isbn_length != 10:\n        return False\n   \n    # Calculate the check digit\n    sum = 0\n    for i in range(9):\n        sum += (i+1) * int(isbn[i])\n    check_digit = sum % 11\n   \n    # Check if the check digit matches the last character of the ISBN.\n    if check_digit == 10 and isbn[-1].upper() != 'X':\n        return False\n    elif check_digit < 10 and int(isbn[-1]) != check_digit:\n        return False\n    else:\n        return True", "category": "Python"}, {"instruction": "Write a Python script to call a web API", "input": "Call openweathermap.org's API with a given city name.", "output": "import requests \n  \napi_key = \"YOURAPIKEY\"\n  \n# base_url variable to store url \nbase_url = \"http://api.openweathermap.org/data/2.5/weather?\"\n  \n# Give city name \ncity_name = input(\"Enter city name : \") \n  \n# complete_url variable to store \n# complete url address \ncomplete_url = base_url + \"appid=\" + api_key + \"&q=\" + city_name \n\n# get method of requests module \n# return response object \nresponse = requests.get(complete_url) \n  \n# json method of response object  \n# convert json format data into \n# python format data \nx = response.json() \n  \n# Now x contains list of nested dictionaries \n# Check the value of \"cod\" key is equal to \n# \"404\", means city is found otherwise, \n# city is not found \nif x[\"cod\"] != \"404\": \n  \n    # store the value of \"main\" \n    # key in variable y \n    y = x[\"main\"] \n  \n    # store the value corresponding \n    # to the \"temp\" key of y \n    current_temperature = y[\"temp\"] \n  \n    # store the value corresponding \n    # to the \"pressure\" key of y \n    current_pressure = y[\"pressure\"] \n  \n    # store the value corresponding \n    # to the \"humidity\" key of y \n    current_humidiy = y[\"humidity\"] \n  \n    # store the value of \"weather\" \n    # key in variable z \n    z = x[\"weather\"] \n  \n    # store the value corresponding  \n    # to the \"description\" key at  \n    # the 0th index of z \n    weather_description = z[0][\"description\"] \n  \n    # print following values \n    print(\" Temperature (in kelvin unit) = \" +\n                    str(current_temperature) + \n          \"\\n atmospheric pressure (in hPa unit) = \" +\n                    str(current_pressure) +\n          \"\\n humidity (in percentage) = \" +\n                    str(current_humidiy) +\n          \"\\n description = \" +\n                    str(weather_description)) \n  \nelse: \n    print(\" City Not Found \")", "category": "Python"}, {"instruction": "Generate a class that manages the customer data", "input": "The class should have attributes of customer name, address, phone number, and email address.", "output": "class CustomerData:\n    def __init__(self, name, address, phone_number, email_address):\n        self.name = name\n        self.address = address\n        self.phone_number = phone_number\n        self.email_address = email_address\n\n    def get_name(self):\n        return self.name\n    \n    def get_address(self):\n        return self.address\n    \n    def get_phone_number(self):\n        return self.phone_number\n    \n    def get_email_address(self):\n        return self.email_address", "category": "Python"}, {"instruction": "Generate a random 8 digit string composed of numbers and letters in Python 3.", "input": "", "output": "import string\nimport random\n \n#Generate 8 character random string\ndef generate_random_string(stringLength=8):\n    lettersAndDigits = string.ascii_letters + string.digits\n    return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))\n\n#Driver code \nrandom_string = generate_random_string()\nprint(f\"Random String Generator: {random_string}\")", "category": "Python"}, {"instruction": "Implement a function in Python 3 to get the largest element from a sequence.", "input": "numbers = [2, 4, 7, 8, 10]", "output": "def get_largest_element(seq):\n  return max(seq)\n\n#Usage \nlargest_element = get_largest_element(numbers)\n#largest_element is 10", "category": "Python"}, {"instruction": "Design a Python function that computes the sum of two numbers.", "input": "", "output": "def sum_two_numbers(num1, num2):\n    \"\"\"\n    This function will take two numbers as inputs and return their sum.\n    \"\"\"\n    return num1 + num2", "category": "Python"}, {"instruction": "Create an recursive algorithm in Python to find the nth number in Fibonacci sequence.", "input": "", "output": "def fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2)", "category": "Python"}, {"instruction": "Create a python function to return the highest value in a given list of numbers.", "input": "", "output": "def get_max(list):\n    max_value = list[0]\n    for value in list:\n        if value > max_value:\n            max_value = value\n    return max_value", "category": "Python"}, {"instruction": "Write a while loop in Python which prints numbers from 1 to 10.", "input": "", "output": "i = 1\nwhile i <= 10:\n  print(i)\n  i += 1", "category": "Python"}, {"instruction": "define a function \"gcd\" which finds the greatest common divisor of two numbers.", "input": "", "output": "\"\"\"\nDefine a function \"gcd\" which finds the greatest common divisor of two numbers.\n\"\"\"\ndef gcd(x, y): \n  \n   while(y): \n       x, y = y, x % y \n  \n   return x \n\n\"\"\"\nTest the function gcd \n\"\"\"\n\na = 98\nb = 56\nprint(\"The gcd of\", a, \"and\", b, \"is\", gcd(a, b))", "category": "Python"}, {"instruction": "Write code that transforms input data into a given format.", "input": "data = {\n  'name': 'John',\n  'age': 30,\n  'email': 'john@example.com'\n}", "output": "def transformData(data):\n  result_data = {}\n  for key, value in data.items():\n    result_data[key+'_uppercase'] = str(value).upper()\n  return result_data", "category": "Python"}, {"instruction": "Create a function that counts the number of an specific letter in a given string.", "input": "string = \"hello, world\"\nletter = \"l\"", "output": "def countLetter(string, letter):\n  count = 0\n  for char in string:\n    if char == letter:\n      count += 1\n  return count", "category": "Python"}, {"instruction": "Generate a list containing all the names of the students in a given class.", "input": "class_list = ['John', 'Jane', 'Daniel', 'Nina']", "output": "def generateStudentNamesList(class_list):\n  student_names_list = []\n  for student in class_list:\n    student_names_list.append(student)\n  return student_names_list", "category": "Python"}, {"instruction": "Convert a given number from base 10 to base 16.", "input": "Number: 245", "output": "def base10_to_base16(num):\n    return hex(num).upper()[2:]\n\nif __name__ == '__main__':\n    print(base10_to_base16(245))", "category": "Python"}, {"instruction": "Create an array of Unicode objects from the given string.", "input": "String: Hello World", "output": "import unicodedata\n\ndef string_to_unicode_array(string):\n    return [unicodedata.lookup(ord(char)) for char in string]\n\nif __name__ == '__main__':\n    print(string_to_unicode_array('Hello World'))", "category": "Python"}, {"instruction": "Write a code to find the cost of the cheapest product from a list of products in JSON format.", "input": "[\n    {\n      \"Name\": \"Biscuit\",\n      \"Price\": 3.00\n    },\n    {\n      \"Name\": \"Cake\",\n      \"Price\": 2.50 \n    },\n    {\n      \"Name\": \"Chocolate\",\n      \"Price\": 4.00\n    }\n]", "output": "\"\"\"\nFind the cost of the cheapest product from a list of products in JSON format\n\"\"\"\n\nimport json\n\ndef find_cheapest_product(products):\n    cheapest_product = (None, float('inf'))\n    for product in products:\n        if product['Price'] < cheapest_product[1]:\n            cheapest_product = (product['Name'], product['Price'])\n            \n    return cheapest_product[1]\n\nif __name__ == '__main__':\n    products = [\n        {\n            \"Name\": \"Biscuit\",\n            \"Price\": 3.00\n        },\n        {\n            \"Name\": \"Cake\",\n            \"Price\": 2.50 \n        },\n        {\n            \"Name\": \"Chocolate\",\n            \"Price\": 4.00\n        }\n    ]\n    \n    print(find_cheapest_product(products))", "category": "Python"}, {"instruction": "Design a program in Python for searching for a given item in a list.", "input": "list_items = ['apple', 'banana', 'cake', 'orange']\nitem_to_search = 'cake'", "output": "def search_item(list_items, item_to_search): \n    for item in list_items: \n        if item == item_to_search: \n            return True \n    return False \n\nlist_items = ['apple', 'banana', 'cake', 'orange']\nitem_to_search = 'cake'\n\nprint(search_item(list_items, item_to_search))", "category": "Python"}, {"instruction": "Using Python, find the number of unique characters in the string \"hello world\".", "input": "", "output": "len(set(\"hello world\")) # 10 unique characters", "category": "Python"}, {"instruction": "Use the re module in Python to extract the numbers from a given string.", "input": "Input string: \u201cThere are 9 dogs and 8 cats here\u201d", "output": "import re\n\ninput_string = \"There are 9 dogs and 8 cats here\"\n\n# Get the numbers from the string\nnumbers = re.findall('\\d+', input_string) \n\nprint(numbers)\n# Output ['9', '8']", "category": "Python"}, {"instruction": "Construct a function to print out the odd numbers in a given array", "input": "", "output": "def odd_numbers(arr):\n    for i in range(len(arr) ):\n        if arr[i] % 2 != 0:\n            print(arr[i])", "category": "Python"}, {"instruction": "Implement a function to delete a node in a linked list", "input": "", "output": "def delete_node(node):\n  if node is None or node.next is None:\n    return\n  \n  next_node = node.next\n  node.data = next_node.data\n  node.next = next_node.next\n  next_node = None", "category": "Python"}, {"instruction": "Write a python program to find all anagrams in a given string", "input": "str = \u201cabc\u201d", "output": "def find_anagrams(str):\n    # list to store anagrams\n    anagrams = [] \n      \n    # create a frequency array of alphabets present in string \n    freq = [0] * 26\n    for char in str: \n        freq[ord(char) - ord('a')] += 1\n          \n    # Loop through all the elements from 0 to ( 2^length of string \u2013 1 ) \n    for i in range(1<<len(str)): \n          \n        # Convert the number to binary string \n        # and calculate its frequency array \n        temp_freq = list(freq)\n        str_bin = bin(i)[2:] \n        n = len(str_bin) \n        for j in range(n): \n            if str_bin[j] == '1': \n                temp_freq[j] -= 1\n              \n        # temp_freq is anagram if all element are 0 \n        if all(x == 0 for x in temp_freq): \n            anagram = \"\" \n            for j in range(n):\n                if str_bin[j] == '1': \n                    anagram += str[j]\n            anagrams.append(anagram)\n                  \n    print(\"All anagrams for '\"+str +\"' are :\" + str(anagrams))", "category": "Python"}, {"instruction": "Create a Python script that adds two numbers together and returns the result.", "input": "", "output": "def add_numbers(a, b):\n return a + b", "category": "Python"}, {"instruction": "Generate a secure password using the following algorithm.", "input": "", "output": "import string \nimport random\n\ndef generate_password():\n\t# Create a string of lowercase and uppercase letters and numbers\n    chars = string.ascii_letters + string.digits\n\t#randomly select 8 characters\n    return ''.join(random.choice(chars) for _ in range(8))\n\npassword = generate_password()\nprint(password)", "category": "Python"}, {"instruction": "Write a code for an object-oriented Bubble Sort algorithm.", "input": "", "output": "class Bubble:\n    def sort(self, list):\n        # iterate over the list\n        for i in range(len(list) - 1):\n            for j in range(len(list) - 1 - i): # loop from the first until the last\n                if list[j] > list[j+1]:  # if order is broken\n                    list[j], list[j+1] = list[j+1], list[j]  # swap the elements\n\n# Driver Code \nif __name__ == '__main__': \n    list = [ 64, 34, 25, 12, 22, 11, 90 ]\n    bubble = Bubble() \n    bubble.sort(list) \n   \n    print (\"Sorted array :\") \n    for i in range(len(list)): \n        print (\"%d\" %list[i])", "category": "Python"}, {"instruction": "Use the following list to create an array in Python.", "input": "", "output": "list = [1, 2, 3, 4, 5]\narray = np.array(list)", "category": "Python"}, {"instruction": "Use the following code to create a dictionary of the words in the text and the frequency of their occurrence.", "input": "text = \u201ca happy day makes a happy life\u201d", "output": "text = \u201ca happy day makes a happy life\u201d\nwords_dict = {}\n\nfor word in text.split():\n    if word not in words_dict:\n        words_dict[word] = 1\n    else:\n        words_dict[word] += 1", "category": "Python"}, {"instruction": "Using the Python library `pygame`, create a simple game where the player is able to move a character on screen using the arrow keys.", "input": "", "output": "import pygame \npygame.init()  \n  \n# setting up the display window \nwin = pygame.display.set_mode((500, 500)) \n\n# creating a character that is used to move in the window \nx = 50 \ny = 50 \nvel = 5\n\n# The main game loop \nrun = True\nwhile run: \n  \n    # reacts to the event from keyboard \n    for event in pygame.event.get(): \n        if event.type == pygame.QUIT: \n            run = False\n          \n    # checks if the key pressed is left or right\n    # and moves the character accordingly \n    keys = pygame.key.get_pressed() \n\n    if keys[pygame.K_LEFT]: \n        x -= vel\n\n    if keys[pygame.K_RIGHT]: \n        x += vel\n\n    # draws the character at its x and y position \n    pygame.draw.rect(win, (255, 0, 0), (x, y, 40, 40))\n\npygame.quit()", "category": "Python"}, {"instruction": "Write a Python code snippet that creates a dictionary containing the numbers 1 to 10 as the keys and their squares as the values.", "input": "", "output": "squares_dict = { i:i*i for i in range(1, 11) }", "category": "Python"}, {"instruction": "Explain how to set up an XOR gate using two NAND gates and one NOT gate.", "input": "", "output": "To set up an XOR gate using two NAND gates and one NOT gate, connect the two NAND gates in series and connect the output from the second NAND gate to the NOT gate's input. Connect the output from the NOT gate to the input of the first NAND gate. The output from the first NAND gate is the output of the XOR gate.", "category": "Python"}, {"instruction": "Choose a suitable data structure to store a collection of products.", "input": "", "output": "The most suitable data structure for storing a collection of products is a dictionary where a unique identifier is used as the key and the product attributes are stored in values associated with that key.", "category": "Python"}, {"instruction": "Design a program that returns the length of a given string.", "input": "String = \"Hello World\"", "output": "def stringLength(mystring): \n    counter = 0\n    for char in mystring: \n        counter += 1\n    return counter", "category": "Python"}, {"instruction": "Write a Python script to generate a random number between two numbers.", "input": "", "output": "import random\n\ndef rand_num(min_num,max_num):\n    return random.randrange(min_num,max_num)", "category": "Python"}, {"instruction": "Compose a program to sort an array of integers using bubble sort.", "input": "", "output": "def bubbleSort(arr): \n    n = len(arr) \n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]", "category": "Python"}, {"instruction": "Develop a program to identify the longest common prefix between two strings.", "input": "String1 = \"Hellocat\"\nString2 = \"Hellokong\"", "output": "def longestCommonPrefix(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    result = \"\" \n    j = 0\n    i = 0\n    while(i <= n1 - 1 and j <= n2 - 1): \n        if (str1[i] != str2[j]): \n            break\n        result += str1[i] \n        i += 1\n        j += 1\n  \n    return result", "category": "Python"}, {"instruction": "Write a function that removes all occurrences of a character from a given string.", "input": "string = \"happiness\"\nchar = \"p\"", "output": "def removeCharFromString(string, char):\n  result_string = []\n  for c in string:\n    if c != char:\n      result_string.append(c)\n  return ''.join(result_string)", "category": "Python"}, {"instruction": "Write a for loop in Python to sum up the elements of an array.", "input": "[5, 9, 2]", "output": "arr = [5, 9, 2]\ntotal = 0\n\nfor num in arr:\n    total+=num\n\nprint(total)\n\nOutput: 16", "category": "Python"}, {"instruction": "Reverse a Python dictionary.", "input": "{ 1: 'A', 2: 'B', 3: 'C' }", "output": "def reverse_dict(d):\n    return {v: k for k, v in d.items()}\n\nif __name__ == '__main__':\n    print(reverse_dict({ 1: 'A', 2: 'B', 3: 'C' }))", "category": "Python"}, {"instruction": "How can we select unique elements from a list in Python?", "input": "", "output": "We can select unique elements from a list in Python using the set() and list() functions. The set() function takes an iterable object, such as a list, and returns the unique elements of that object in the form of a set. The list() function takes the set and returns its elements as a list.\n\nExample:\n\noriginal_list = [1, 2, 3, 1, 4, 2]\nunique_list = list(set(original_list))\n\nprint(unique_list)\n\nOutput: [1, 2, 3, 4]", "category": "Python"}, {"instruction": "Write a python snippet to reverse the words in a sentence.", "input": "This sentence should be reversed.", "output": "''.join(reversed(sentence.split()))", "category": "Python"}, {"instruction": "Write a TensorFlow code to classify MNIST.", "input": "", "output": "# Load the MNIST dataset\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n\n# Reshape and normalize the input data\nx_train = x_train.reshape(x_train.shape[0], 28, 28, 1)\nx_test = x_test.reshape(x_test.shape[0], 28, 28, 1)\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\nx_train /= 255\nx_test /= 255\n\n# Build the model\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train and evaluate the model\nmodel.fit(x_train, y_train, epochs=10)\nmodel.evaluate(x_test, y_test)", "category": "Python"}, {"instruction": "Output all the prime numbers between 1 and 50.", "input": "", "output": "# Output all the prime numbers between 1 and 50\n\nfor num in range(1,51):\n   # prime numbers are greater than 1\n   if num > 1:\n       for i in range(2,num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)\n           \n# Output: 2,3,5,7,11,13,17,19,23,29,31,37,41,43,47", "category": "Python"}, {"instruction": "Find the most frequently occurring element in an array.", "input": "", "output": "def most_frequent_element(arr): \n    # Create a dictionary to store the frequency of each element\n    freq = {} \n    max_freq = 0\n    max_freq_elem = -1\n    \n    # Iterate through an array \n    for elem in arr: \n        if elem in freq.keys(): \n            freq[elem] += 1\n        else: \n            freq[elem] = 1\n  \n    # Find the most frequent element\n    for key,val in freq.items(): \n        # Update the maximum frequency and the corresponding element\n        if (max_freq < val): \n            max_freq_elem = key \n            max_freq = val \n    return max_freq_elem", "category": "Python"}, {"instruction": "Write a python code to multiply two given numbers.", "input": "x = 10\ny = 5", "output": "# Multiply two given numbers\nx = 10\ny = 5\n\n# Calculate the multiplication\nresult = x * y\nprint(result) # Output: 50", "category": "Python"}, {"instruction": "How can we evaluate a given Python expression dynamically?", "input": "", "output": "We can use the eval() function to evaluate a Python expression dynamically. \n\nExample:\n\nexpr = '2 + 3'\nresult = eval(expr) # result will be 5", "category": "Python"}, {"instruction": "Create a loop that prints the values from a and b in the ascending order.", "input": "a = 5\nb = 10", "output": "# Initialize variable\na = 5\nb = 10\n\n# Loop for print in ascending order\nfor i in range(a,b+1):\n    print(i)", "category": "Python"}, {"instruction": "How can we join two lists in Python?", "input": "", "output": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n# Join two lists\nlist3 = list1 + list2", "category": "Python"}, {"instruction": "Write a function in Python to print out the sum of the squares of its input.", "input": "", "output": "def sum_of_squares(nums):\n    \"\"\"This function calculates the sum of the squares of a given list of numbers\"\"\"\n    return sum(x**2 for x in nums)", "category": "Python"}, {"instruction": "Write a Python script to print out the max and min values from the given list.", "input": "[2,10,18,24,36,95]", "output": "list = [2,10,18,24,36,95]\nmax_value = max(list)\nmin_value = min(list)\nprint(\"Max value: \", max_value)\nprint(\"Min value: \", min_value)", "category": "Python"}, {"instruction": "Write a function to shift the elements of a list by one position to the left.", "input": "[2, 4, 6, 8]", "output": "def shift_left(arr): \n    # Shifting the array elements from position 1 to n-1 \n    for i in range(1, len(arr)): \n        arr[i - 1] = arr[i] \n  \n    # Replacing the last element with 0 \n    arr[len(arr) - 1] = 0\n    return arr", "category": "Python"}, {"instruction": "Take input of a Python list and return its reversed version", "input": "list_in = [3,5,7,9]", "output": "list_in.reverse() \nlist_out = list_in \nprint(list_out) \n\n# Output \n# [9,7,5,3]", "category": "Python"}, {"instruction": "Write a Python script to generate Fibonacci sequence upto n", "input": "", "output": "def generate_fibonacci(n): \n    FibArray = [0, 1] \n    while len(FibArray) < n: \n        FibArray.append(FibArray[-1]+FibArray[-2]) \n  \n    return FibArray", "category": "Python"}, {"instruction": "Write a code that will produce a list containing the first and last element of each inner list inside a list of lists.", "input": "my_list = [[1,2,3], [4,5,6], [7,8,9]]", "output": "def get_first_and_last(my_list):\n    result = [] \n    for lst in my_list:\n        result.append([lst[0], lst[-1]]) \n    return result\n\nif __name__ == '__main__':\n    my_list = [[1,2,3], [4,5,6], [7,8,9]]\n    print(get_first_and_last(my_list)) # Output: [[1, 3], [4, 6], [7, 9]]", "category": "Python"}, {"instruction": "Implement a code that will group a series of numbers into groups of three.", "input": "nums = [1, 2, 3, 4, 5, 6]", "output": "def group_three(nums): \n    result = []\n    nums_length = len(nums)\n\n    for index in range(0, nums_length, 3):\n        result.append(nums[index:index + 3])\n\n    return result\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6]\n    print(group_three(nums)) # Output: [[1, 2, 3], [4, 5, 6]]", "category": "Python"}, {"instruction": "Write a code that performs binary search on a given list.", "input": "my_array = [1,3,5,7,9]", "output": "def binary_search(my_array, x): \n    start = 0\n    end = len(my_array) - 1\n  \n    while start <= end: \n  \n        mid = (start + end) // 2 # calculate mid\n  \n        # Check if x is present at mid \n        if my_array[mid] < x: \n            start = mid + 1\n  \n        # If x is greater, ignore left half \n        elif my_array[mid] > x: \n            end = mid - 1\n  \n        # If x is smaller, ignore right half \n        else: \n            return mid \n    # If we reach here, then the element \n    # was not present \n    return -1", "category": "Python"}, {"instruction": "Implement a function that will return the intersection of two given arrays.", "input": "arr_1 = [2,3,4,7]\narr_2 = [1,3, 5, 6, 7]", "output": "def intersection(arr_1, arr_2):\n    intersect = []\n\n    for i in arr_1:\n        if i in arr_2:\n            intersect.append(i)\n\n    return intersect\n\nif __name__ == '__main__':\n    arr_1 = [2,3,4,7]\n    arr_2 = [1,3, 5, 6, 7]\n    print(intersection(arr_1, arr_2)) # Output: [3, 7]", "category": "Python"}, {"instruction": "Create a function that takes two strings as arguments and checks if the two strings are anagrams (same letters arranged differently).", "input": "str_1 = \"rat\"\nstr_2 = \"tar\"", "output": "def is_anagram(str_1, str_2):\n    str_1 = sorted(str_1)\n    str_2 = sorted(str_2)\n\n    if str_1 == str_2:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    str_1 = \"rat\"\n    str_2 = \"tar\"\n    print(is_anagram(str_1, str_2)) # Output: True", "category": "Python"}, {"instruction": "Create a function that takes two strings as arguments, and decides if either of them is a palindrome.", "input": "str_1 = \"racecar\"\nstr_2 = \"noon\"", "output": "def is_palindrome(str_1, str_2):\n    str_1_reverse = str_1 [::-1]\n    if str_1 == str_1_reverse or str_2 == str_2[::-1]:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    str_1 = \"racecar\"\n    str_2 = \"noon\"\n    print(is_palindrome(str_1, str_2)) # Output: True", "category": "Python"}, {"instruction": "Implement a function that will sort the array using insertion sort.", "input": "nums=[5,2,4,6,1,3]", "output": "def insertion_sort(nums):\n    for i in range(1,len(nums)):\n        item_to_insert = nums[i]\n        j = i - 1\n        while j >= 0 and nums[j] > item_to_insert:\n            nums[j+1] = nums[j]\n            j -= 1\n        nums[j+1] = item_to_insert\n\n    return nums\n\n\nif __name__ == '__main__':\n    nums = [5,2,4,6,1,3]\n    print(insertion_sort(nums)) # Output: [1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Suggest a solution to the following problem: given an array of numbers, find all pairs of numbers whose product is equal to the given target number.", "input": "arr = [1,5,3,2], target = 10", "output": "def find_pairs(arr, target):\n\tpairs = []\n\tfor i in range(len(arr)):\n\t\tfor j in range(i+1, len(arr)):\n\t\t\tif arr[i]*arr[j] == target:\n\t\t\t\tpairs.append((arr[i], arr[j]))\n\treturn pairs", "category": "Python"}, {"instruction": "Convert a given string to camel case.", "input": "", "output": "def to_camel_case(string):\n    result = \"\" \n    for word in string.split(' '): \n        result += word.title() \n    return result", "category": "Python"}, {"instruction": "Parse a given json string and retrieve a dictionary object.", "input": "json_string = '{\"name\": \"John Smith\", \"age\": 31}'", "output": "import json\n\ndef parse(json_string):\n    return json.loads(json_string)", "category": "Python"}, {"instruction": "How can we check whether a given number is prime or not using a loop?", "input": "num = 17", "output": "def is_prime(num):\n    if num < 2: \n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    num = 17\n    print(is_prime(num)) # Output: True", "category": "Python"}, {"instruction": "Create a Python program to convert a given number of inches to centimeters", "input": "inches = 5", "output": "def convert(inches): \n    cm = inches * 2.54\n    return cm \n  \n# Convert inches to cm \nresult = convert(5) \n  \n# Output \nprint(\"5 inches =\",result,\"cm\") \n\n# Output\n# 5 inches = 12.7 cm", "category": "Python"}, {"instruction": "Convert the following Python dictionary to a JSON String", "input": "data = {\"name\": \"John Doe\", \"age\": 37, \"hobby\": \"reading\"}", "output": "import json\n\ndata_json_string = json.dumps(data)", "category": "Python"}, {"instruction": "Write a Python program to sort the list of dictionaries by values in ascending order.", "input": "data = [{'name': 'John', 'age': 23}, \n        {'name': 'Joe', 'age': 28}, \n        {'name': 'Jack', 'age': 25}]", "output": "def sort_by_age(data):\n  return sorted(data, key=lambda k: k['age'], reverse=False)\n\nsorted_list = sort_by_age(data)\nprint(sorted_list)", "category": "Python"}, {"instruction": "Write a Python script to fetch the top 10 latest YouTube videos.", "input": "", "output": "import requests\nimport json\n\n#Generating Youtube API URL\nurl = 'https://www.googleapis.com/youtube/v3/videos?part=snippet&chart=mostPopular&maxResults=10&regionCode=US&key={YOUR_API_KEY}'\n\n#Sending a GET request to API for obtaining data\nresponse = requests.get(url)\n\n#Data parsing and extracting top 10 latest YouTube Videos\ndata = json.loads(response.text)\nlatest_videos = []\nfor items in data['items']:\n    latest_videos.append(items['snippet']['title'])\n\nprint(\"Top 10 latest videos : \")\nfor item in latest_videos:\n    print(item)", "category": "Python"}, {"instruction": "Rewrite the following code so that it is more efficient.", "input": "odds = []\nfor num in range(10):\n if num % 2 != 0:\n odds.append(num)", "output": "odds = [num for num in range(10) if num % 2 != 0]", "category": "Python"}, {"instruction": "Write a Python loop to find the number of elements in a given list that are between 0 and 10 (inclusive).", "input": "array = [3, 7, 11, 15]", "output": "def count_elements(array):\n count = 0 \n for item in array:\n if 0 <= item <= 10:\n count += 1\n return count", "category": "Python"}, {"instruction": "Change the given Python code to an equivalent expression using list comprehension.", "input": "mylist = []\nfor x in range(1, 10):\n    mylist.append(x*x)", "output": "mylist = [x*x for x in range(1, 10)]", "category": "Python"}, {"instruction": "Perform string manipulation to generate the word 'happy' by starting with the word 'sad'", "input": "", "output": "word = 'sad'\nword = word[0] + word[2:] + 'py'", "category": "Python"}, {"instruction": "Create a guide to explain the usage of the built-in Python sort() function.", "input": "", "output": "The Python sort() function is used to sort a list of elements. It takes two parameters: the list to be sorted and a function (optional) that defines the sorting criteria. The sorted list is returned in ascending order by default. The sort() function is stable, meaning that the original positions of equal elements will be preserved.", "category": "Python"}, {"instruction": "Rewrite the given python program to generate the same output but using a while loop instead of a for loop.", "input": "mylist = [1, 2, 3, 4, 5]\nfor i in mylist:\n    print(i)", "output": "i = 0\nmylist = [1, 2, 3, 4, 5]\nwhile i < len(mylist):\n    print(mylist[i])\n    i += 1", "category": "Python"}, {"instruction": "Suggest a way to explore a large dataset efficiently in Python.", "input": "", "output": "We can explore a large dataset efficiently in Python by using the built-in Pandas library. The features of the Pandas library, such as its ability to read CSV files, make it a great tool for exploring large datasets. Additionally, Pandas provides convenient methods such as head() and tail() to quickly explore the first and last elements of a dataset, as well as info() and describe() methods to provide a better understanding of the entire dataset.", "category": "Python"}, {"instruction": "How would you remove all punctuation marks in a given string?", "input": "", "output": "We can remove all punctuation marks in a given string by using the regular expression library in Python. We can create a pattern and use the re.sub() function to replace a matched pattern and remove the punctuation marks from the given string. This can be done with the following code:\n\nimport re \n\nstring = \"This is a test string! With [special] ^characters.\"\n\nremove_punct = re.sub(r'[^\\w\\s]','',string) \n\nprint(remove_punct) # Output = This is a test string With special characters", "category": "Python"}, {"instruction": "Split a string by a number greater than the length of the string in Python.", "input": "string = \"Hello World\"", "output": "split_string = string[:11]\nprint(split_string) # Output = \"Hello World\"", "category": "Python"}, {"instruction": "What is the best data structure for searching a value in a large set of data?", "input": "", "output": "The best data structure for searching a value in a large set of data is a data structure that supports fast search and retrieval of data such as a hash table or a binary search tree. Hash tables are particularly efficient because they allow for constant time search and retrieval, while binary search trees have a time complexity of O(log n). Additionally, hash tables are typically more space efficient than binary search trees. However, binary search trees also have their uses, as they allow for data to be sorted and can easily handle dynamic changes in the size of the data set.", "category": "Python"}, {"instruction": "Write a code snippet in Python for converting Unix timestamp to date and time.", "input": "1594102055", "output": "import datetime\n \n# Unix timestamp\nunix = 1594102055\n \n# Convert Unix timestamp to Date\ndate_time = datetime.datetime.fromtimestamp(unix).strftime('%Y-%m-%d %H:%M:%S')\n \nprint(\"Date & Time (UTC):\", date_time)", "category": "Python"}, {"instruction": "Create an algorithm to calculate the Fibonacci series up to n numbers where n is a given number.", "input": "", "output": "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Create a program to accept two strings and find if one string is a substring of the other or not.", "input": "'abc', 'ccc'", "output": "def is_substring(s1, s2):\n  return s1 in s2", "category": "Python"}, {"instruction": "Train a machine learning model for text categorization with an input text and labels.", "input": "Text = \"This is an example of text\"\nLabels = [\"example\", \"text\"]", "output": "from sklearn.svm import SVC\n\n# Create a support vector machine for text categorization\nclf = SVC()\n\n# Train the model\nclf.fit(Text, Labels)", "category": "Python"}, {"instruction": "Create a scatterplot of some toy dataset using a python library.", "input": "import numpy as np\nX_train = np.array([[1,2], [3,4], [5,6]])\nY_train = np.array([1,2,3])", "output": "import matplotlib.pyplot as plt\nplt.scatter(X_train[:, 0], X_train[:, 1], c=Y_train)", "category": "Python"}, {"instruction": "Create a function in Python to generate a Fibonacci sequence.", "input": "", "output": "def fibonacci_sequence(n):  \n    a = 0 \n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else:  \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Given a string and an integer, write a code to find the index of first occurrence of the integer in the string.", "input": "my_string = \"abcdef\"\nmy_int = 2", "output": "def find_index(str, num):\n    for i in range(len(str)):\n        if str[i] == num:\n            return i\n    return -1\n \nmy_string = \"abcdef\"\nmy_int = 2\nprint(find_index(my_string,my_int))", "category": "Python"}, {"instruction": "Using the list as an example, remove all elements from the list that have a value of 0.", "input": "my_list = [0, 5, 7, 0, 9]", "output": "my_list = [5, 7, 9]\n \nmy_list = [0, 5, 7, 0, 9]\nmy_list = [x for x in my_list if x != 0]\nprint(my_list)", "category": "Python"}, {"instruction": "Given a string and an integer, write a program to compare the string with the integer and return the longer string.", "input": "my_string = \"Hello\"\nmy_int = 1", "output": "def compare_str_int(str, num):\n    if len(str) > num:\n        return str\n    else:\n        return \"{i} is greater than {s}\".format(i=num, s=str)\n\nmy_string = \"Hello\"\nmy_int = 1\nprint(compare_str_int(my_string, my_int))", "category": "Python"}, {"instruction": "What is the difference between preemptive multitasking and non-preemptive multitasking?", "input": "", "output": "Preemptive multitasking is a form of multitasking in which the operating system slices the CPU time and dedicates a slot to each of the programs. The operating system may terminate the process at any given point of time and switch to another process. It depends on the priority of the process. \n\nNon-preemptive multitasking is a form of multitasking in which the operating system does not slice the CPU time in between processes and processes are given CPU time to complete their execution. It does not depend on the priority of the process.", "category": "Python"}, {"instruction": "Write a Python method to determine if a string contains all unique characters.", "input": "string variable: str =\u201cIm so excited to learn GPT\u201d", "output": "def isUnique(str): \n\tstr_set = set() \n\tfor ch in str: \n\t\tif ch in str_set: \n\t\t\treturn False\n\t\telse:\n\t\t\tstr_set.add(ch)\n\t\t\t\n\treturn True", "category": "Python"}, {"instruction": "Print out all the numbers between 1 and 100 that are divisible by 3.", "input": "", "output": "for i in range (1, 101):\n  if i % 3 == 0:\n    print(i)", "category": "Python"}, {"instruction": "Describe how to use a while loop in python.", "input": "", "output": "A while loop in Python is a loop that runs until a certain condition is met. The syntax is similar to an if statement, but the condition is evaluated after each iteration of the loop. The code within the loop is executed until the condition evaluates to False.\n\nExample:\n\ni = 0\nwhile i < 10:\n    print(i)\n    i += 1\n\nThis will print out the numbers from 0 to 9 as the condition is evaluated after each iteration.", "category": "Python"}, {"instruction": "Add two numbers using Python.", "input": "Numbers: 5, 7", "output": "def add_two_numbers(x, y):\n    return x + y\n\nif __name__ == '__main__':\n    print(add_two_numbers(5, 7))", "category": "Python"}, {"instruction": "What is a ternary operator?", "input": "", "output": "A ternary operator is a conditional expression operator that can be used to return one of two values based on the evaluation of a boolean expression. In Python, the ternary operator is written as a ? expression. For example, a ? b : c is a shorthand for \"if a then b else c\", where a is a boolean expression.", "category": "Python"}, {"instruction": "Write an if..elif..else statement to check if a number is positive, negative or zero.", "input": "", "output": "if num > 0:\n    print(\"The number is positive\")\nelif num < 0:\n    print(\"The number is negative\")\nelse:\n    print(\"The number is zero\")", "category": "Python"}, {"instruction": "Given an array of integers find the index of the element that appears an odd number of times.", "input": "[2, 3, 2, 4, 5, 3]", "output": "def find_odd_element(arr):\n    elements = set()\n    for x in arr:\n        if x in elements:\n            elements.remove(x)\n        else:\n            elements.add(x)\n    return arr.index(list(elements)[0])", "category": "Python"}, {"instruction": "Find the indices of the all occurrence of a specified element in an array.", "input": "Array: [2, 3, 2, 4, 5]\nElement: 2", "output": "def find_element(arr, element):\n    result = []\n    for i in range(len(arr)):\n        if arr[i] == element:\n            result.append(i)\n    return result", "category": "Python"}, {"instruction": "Implement the Quick Sort algorithm with a list of numbers.", "input": "[2, 5, 4, 1, 6, 2, 9, 3]", "output": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr)//2]\n    left, right, equal = [], [], []\n    for x in arr:\n        if x < pivot:\n            left.append(x)\n        elif x > pivot:\n            right.append(x)\n        else:\n            equal.append(x)\n    return quicksort(left) + equal + quicksort(right)", "category": "Python"}, {"instruction": "Given an array of integers, write a function to sum all the integers in the array.", "input": "", "output": "def sum_array(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total", "category": "Python"}, {"instruction": "What is the purpose of neural networks?", "input": "", "output": "The purpose of neural networks is to recognize patterns in data and make predictions or decisions based on those patterns. Neural networks are an approach to artificial intelligence, modeled after the neural networks in the human brain. They allow computers to learn by processing large amounts of data and identifying patterns and trends in it.", "category": "Python"}, {"instruction": "Explain what is Closure in Python Programming?", "input": "", "output": "In Python, a closure is a higher order function (a function that takes one or more functions as arguments or returns a function) that allows a function to remember or access the variables or arguments of the enclosing scope\u2014even after the execution of the outer function has finished. A closure is created when a nested function is defined, and an inner function remembers the variables of its enclosing scope even after the execution of the outer function has finished.", "category": "Python"}, {"instruction": "Given two sets, setA and setB, write a function to find the intersection of both sets.", "input": "setA = {1, 2, 3, 4, 5}\nsetB = {4, 5, 6, 7, 8}", "output": "def intersection(setA, setB):\n    return [x for x in setA if x in setB] # output: {4, 5}", "category": "Python"}, {"instruction": "Write a function to find all the prime numbers from 2 to n (where n is a given input).", "input": "", "output": "def find_primes(n):\n    primes=[]\n    for num in range(2, n+1):\n        for n in range(2, num):\n            if num%n==0:\n                break\n            \n        else:\n            primes.append(num)\n    return primes", "category": "Python"}, {"instruction": "Reverse the following string using a Python program", "input": "\"Hello World!\"", "output": "def reverse_string(str):\n  return str[::-1]\n\nreverse_string('Hello World!') # output: '!dlroW olleH'", "category": "Python"}, {"instruction": "Convert the following code to efficiently use list comprehensions.", "input": "# define a function to generate a list of cubed numbers\ndef generate_cubes(n):\n    result = []\n    for num in range(1, n+1):\n        result.append(num ** 3)\n    return result", "output": "# define a function to generate a list of cubed numbers\ndef generate_cubes(n):\n    return [num ** 3 for num in range(1, n+1)]", "category": "Python"}, {"instruction": "Using the input list, generate a random permutation of the given list.", "input": "[1, 2, 3, 4, 5]", "output": "import random\ndef get_random_permutation(list):\n    random.shuffle(list)\n    return list", "category": "Python"}, {"instruction": "Create a python class to manage a sports team.", "input": "", "output": "# define a class to manage a sports team\nclass SportsTeam:\n    def __init__(self, name):\n        # store the team name\n        self.name = name\n        # create an empty list for team members\n        self.team_members = []\n\n    # create a method to add a new player to the team\n    def add_player(self, player_name):\n        if player_name not in self.team_members:\n            self.team_members.append(player_name)\n    \n    # create a method to remove a player from the team\n    def remove_player(self, player_name):\n        if player_name in self.team_members:\n            self.team_members.remove(player_name)", "category": "Python"}, {"instruction": "Design a function that takes in a list of numbers and returns a dictionary with the frequency of each element.", "input": "", "output": "def element_frequency(arr):\n    # use a dictionary to store the frequency of each element\n    frequency = {}\n\n    # loop through the list and keep a count of each element\n    for elem in arr:\n        if elem in frequency:\n            frequency[elem] += 1\n        else:\n            frequency[elem] = 1\n\n    return frequency", "category": "Python"}, {"instruction": "Create a Python script to delete all the even numbers in the original list.", "input": "", "output": "# function to delete all the even numbers in the original list\ndef remove_even_elements(arr):\n    return [num for num in arr if num % 2 != 0]", "category": "Python"}, {"instruction": "From the input list, create a dictionary containing only key-value pairs for even integers.", "input": "[4, 7, 9, 10, 16, 18]", "output": "# function to create a dictionary containing only key-value pairs for even integers\ndef even_dict(arr):\n    return {i : i for i in arr if i % 2 == 0}", "category": "Python"}, {"instruction": "Create a Python function that takes in a list of integers and returns a list containing only the odd numbers from the original.", "input": "", "output": "def get_odd_elements(arr):\n    return [num for num in arr if num % 2 != 0]", "category": "Python"}]
[{"instruction": "Using the given data point, train a linear regression model.", "input": "[4, 7], [2, 5], [3, 6]", "output": "import numpy as np\n\nX = np.array([[4,7], [2,5], [3,6]])\ny = np.array([7, 5, 6])\n\nfrom sklearn.linear_model import LinearRegression  \nmodel = LinearRegression()  \nmodel.fit(X, y)", "category": "Python"}, {"instruction": "Create a list comprehension expression to generate a list of the squares of all even numbers from 1 to 10.", "input": "", "output": "[x**2 for x in range(1, 11) if x % 2 == 0]", "category": "Python"}, {"instruction": "Calculate the number of minutes in 3 hours using Python.", "input": "", "output": "minutes = 3 * 60\nprint(minutes)", "category": "Python"}, {"instruction": "Write a function in Python that accepts a list of numbers and returns a list of the squares of the numbers.", "input": "", "output": "def power_list(numbers):\n  return [num**2 for num in numbers]", "category": "Python"}, {"instruction": "Sum the numbers from 1 to 10 using a for loop in Python.", "input": "", "output": "total = 0\nfor i in range(1, 11):\n  total += i\n\nprint(total)", "category": "Python"}, {"instruction": "Write a Python program to create a dictionary with values being doubled for every key.", "input": "{'a':4, 'b':7}", "output": "my_dict = {'a': 4, 'b': 7} \ndouble_dict = {k : 2*v for (k,v) in my_dict.items()} \nprint(double_dict)", "category": "Python"}, {"instruction": "You need to parse a JSON string and access a value from it.", "input": "jsonString = {\n  \"name\": \"John Smith\",\n  \"age\": 25\n}", "output": "import json\n\njsonObject = json.loads(jsonString)\nname = jsonObject[\"name\"]", "category": "Python"}, {"instruction": "There is an array of integer numbers. You need to replace all the odd numbers with 0.", "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "def replace_odds_with_zero(arr):\n  for i in range(len(arr)):\n    if arr[i] % 2 == 1:\n      arr[i] = 0\n  return arr", "category": "Python"}, {"instruction": "How do you implement depth-first search in Python?", "input": "", "output": "def depth_first_search(graph, start):\n    explored = [] # List of already explored nodes\n    stack = [start] # Stack of nodes to explore\n\n    while stack:\n        node = stack.pop() # Pop the next node from stack\n        if node not in explored:\n            explored.append(node) # Add the node to explored\n            neighbors = graph[node] # List of neighbors of node\n            for neighbor in neighbors:\n                stack.append(neighbor) # Add neighbors to stack\n    \n    return explored", "category": "Python"}, {"instruction": "What is a lambda expression in Python?", "input": "", "output": "A lambda expression is an anonymous function in Python, which can take any number of arguments and return any type of expression or value. Lambda functions are mainly used for functional programming and can be used wherever normal functions can be used, such as in the filter, map, and reduce functions.", "category": "Python"}, {"instruction": "Create a function that deletes all non-alphanumeric characters from an input string.", "input": "", "output": "def clean_string(input_string):\n    alphaNumericString = [ch for ch in input_string if ch.isalnum()]\n    return ''.join(alphaNumericString)", "category": "Python"}, {"instruction": "How do you extract all the unique words from a string in Python?", "input": "", "output": "def get_unique_words(input_string):\n    words = input_string.split()\n    unique_words = set(words)\n    return list(unique_words) # Retruns a list of all unique words present in the string.", "category": "Python"}, {"instruction": "You mustreverse a given array of numbers in-place.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def reverse_array(arr):\n    low = 0\n    high = len(arr)-1\n    while low<high:\n        arr[low], arr[high] = arr[high], arr[low]\n        low += 1\n        high -= 1\n    return arr", "category": "Python"}, {"instruction": "You must refactor a code to reduce the complexity and improve its readability.", "input": "def is_even(num):\n    if num == 0:\n        return True\n    else:\n        return is_odd(num - 1)\n\ndef is_odd(num):\n    if num == 0:\n        return False\n    else:\n        return is_even(num - 1)", "output": "def is_even(num):\n    return num % 2 == 0\n\ndef is_odd(num):\n    return num % 2 != 0", "category": "Python"}, {"instruction": "You are given a string. Remove duplicated characters from the string and return the output.", "input": "string = \"Mississippi\"", "output": "def remove_duplicates(string): \n    new_string = [] \n    for i in string: \n        if i not in new_string: \n            new_string.append(i)    \n    return ''.join(new_string)", "category": "Python"}, {"instruction": "Create a function to convert a string of words into a dictionary with the words as keys.", "input": "string = \"Hello World Bye World\"", "output": "def string_to_dict(string):\n    data = string.split(' ') \n    answer = dict() \n    for element in data: \n        if element in answer: \n            answer[element] += 1\n        else: \n            answer[element] = 1\n    return answer", "category": "Python"}, {"instruction": "Perform insertion sort on a given array.", "input": "arr = [5, 1, 6, 2, 4, 3]", "output": "def insertionSort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and key < arr[j]:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = key\n    return arr\n\narr = [5, 1, 6, 2, 4, 3]\nprint(insertionSort(arr)) # output: [1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Write a function to retrieve and reverse the order of all words in a sentence.", "input": "sentence = \"This is a sentence.\"", "output": "def reverseSentence(sentence):\n    words = sentence.split()\n    rev_words = [word[::-1] for word in words]\n    return \" \".join(rev_words)\n\nsentence = \"This is a sentence.\"\nprint(reverseSentence(sentence)) # output: sihT si a ecnetnes.", "category": "Python"}, {"instruction": "Write a function to determine if two rectangles intersect.", "input": "rect1 = (x1, y1, w1, h1)\nrect2 = (x2, y2, w2, h2)", "output": "def is_intersect(rect1, rect2):\n    if rect1[0] > rect2[0] + rect2[2] or rect1[0] + rect1[2] < rect2[0] or rect1[1] > rect2[1] + rect2[3] or rect1[1] + rect1[3] < rect2[1]:\n        return False\n    else:\n        return True", "category": "Python"}, {"instruction": "Create a function that checks if a string contains all the vowels.", "input": "", "output": "def check_if_string_contains_all_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str_vowels = [ltr for ltr in string.lower() if ltr in vowels]\n    return len(str_vowels) == len(vowels)", "category": "Python"}, {"instruction": "Write a code snippet to print the minutes between two timestamps.", "input": "t1 = datetime.datetime(2020, 1, 1, 12, 0)\nt2 = datetime.datetime(2020, 1, 1, 15, 30)", "output": "from datetime import datetime, timedelta\n\nt1 = datetime(2020, 1, 1, 12, 0)\nt2 = datetime(2020, 1, 1, 15, 30)\n\nminutes_difference = int((t2-t1).total_seconds()/60)\nprint(\"The difference in minutes between the two timestamps is: \" + str(minutes_difference) + \" minutes.\")", "category": "Python"}, {"instruction": "Create a simple Python program that prints the characters of a string in reverse order.", "input": "String to be printed: \"Hello\"", "output": "string = \"Hello\" \n\nrevString = \"\" \nfor i in range(len(string)-1,-1,-1): \n\trevString = revString + string[i] \n  \nprint(revString)", "category": "Python"}, {"instruction": "let A be a n x n matrix, write a function to calculate the trace of A", "input": "A = [[1,2,3],[4,5,6],[7,8,9]]", "output": "def trace(A):\n    # initialize trace\n    trace = 0\n    \n    # loop through matrix A\n    for i in range(len(A)):\n        for j in range(len(A)):\n            # when i equals j\n            if i == j:\n                trace += A[i][j]\n\n    return trace", "category": "Python"}, {"instruction": "Generate a program to delete a node with a given value from the Linked List.", "input": "linked_list = [10, 5, 3, 4, 6, 5]\nvalue = 5", "output": "# Delete a Node from a Linked List\n \n# Node class \nclass Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \n# LinkedList class \nclass LinkedList: \n    def __init__(self): \n        self.head = None\n  \n    # Function to delete a node with a given value \n    def delete_by_value(self, value): \n        # Check if Linked List is empty \n        if self.head is None: \n            return \n  \n        # Keep a track of the current node\n        current = self.head \n  \n        # Check to delete the head node \n        if current.data == value: \n            self.head = current.next\n            current = None\n            return \n  \n        # Iterate through the Linked List\n        while current.next is not None: \n            # Get the next node \n            next_node = current.next\n            # Check if the node contains the value \n            if next_node.data == value: \n                # Delete the node and break out of the loop\n                current.next = None\n                current.next = next_node.next\n                break\n  \n            # Step to the next node\n            current = current.next\n  \n# Main Program \nlinked_list = LinkedList()\nlinked_list.head = Node(10)\nlinked_list.head.next = Node(5)\nlinked_list.head.next.next = Node(3)\nlinked_list.head.next.next.next = Node(4)\nlinked_list.head.next.next.next.next = Node(6)\nlinked_list.head.next.next.next.next.next = Node(5)\nvalue = 5\nlinked_list.delete_by_value(value)", "category": "Python"}, {"instruction": "Edit the code so that it can handle the fractions.", "input": "def calculate(x, y): \n    if isinstance(x, int) and isinstance(y, int): \n        return x + y \n    else: \n        return \"Please use integers only.\"", "output": "def calculate(x, y): \n    # Check if the numbers are integers or floats \n    if isinstance(x, (int, float)) and isinstance(y, (int, float)): \n        return x + y \n    else: \n        return \"Please use numbers only.\"", "category": "Python"}, {"instruction": "Generate a function that takes an array and computes the minimum element within the array.", "input": "array = [2,3,5,1,4]", "output": "# Calculate Minimum Element\ndef find_min(arr):\n    # Set a variable to store the minimum element of the array \n    minimum = arr[0] \n    # Compare each element of the array with the current min element \n    for i in range(1, len(arr)): \n        if arr[i] < minimum: \n            minimum = arr[i] \n    return minimum \n\n# Main Program\narray = [2,3,5,1,4]\nresult = find_min(array)\nprint(result)", "category": "Python"}, {"instruction": "Submit an algorithm to find the first non-repeating character of the given string.", "input": "string = \"bacdedbage\"", "output": "# Find First Non-Repeating Character\ndef first_non_repeat(string): \n    seen = {} \n\n    for char in string: \n        if char not in seen: \n            seen[char] = 0 \n        seen[char] += 1\n\n    # Find the first character that appears once\n    for i in range(len(string)): \n        if seen[string[i]] == 1: \n            return string[i] \n      \n    return '_'\n\n\n# Main Program\nstring = \"bacdedbage\"\nresult = first_non_repeat(string)\nprint(result)", "category": "Python"}, {"instruction": "Print the longest substring of a string that does not have any repeated characters.", "input": "string = \"abcaabccbad\"", "output": "# Longest Substring with no repeated chars\ndef longestSubstringWithoutDuplication(string): \n    longest = \"\" \n    start = 0 \n    seen = {} \n      \n    for i, char in enumerate(string): \n         # Stop current substring when repeating character is found\n        if char in seen and start <= seen[char]: \n            start = seen[char] + 1\n        # Add the character to the dictionary\n        seen[char] = i \n        # Update longest substring\n        longest = max(longest, string[start:i + 1], key = len) \n      \n    return longest\n\n# Main Program\nstring = \"abcaabccbad\"\nresult = longestSubstringWithoutDuplication(string)\nprint(result)", "category": "Python"}, {"instruction": "Submit a program to a computer that takes an array and reverses it.", "input": "array = [1,2,3,4,5]", "output": "# Reverse an Array\n\ndef reverse_array(arr): \n    return [arr[i] for i in range(len(arr)-1, -1, -1)] \n  \n# Driver program \narr = [1, 2, 3, 4, 5] \nresult = reverse_array(arr) \nprint(result)", "category": "Python"}, {"instruction": "Update the code to add to a given list all even numbers between 0 and 10 (inclusive).", "input": "my_list = []", "output": "my_list = []\nfor i in range(11):\n    if i % 2 == 0:\n        my_list.append(i)\n\nprint(my_list)  # prints [0, 2, 4, 6, 8, 10]", "category": "Python"}, {"instruction": "Using the comment as a guide, complete the code to reverse an array in-place.", "input": "def reverse_arr(arr):\n    \"\"\"Reverses an array in-place. This means the existing array will be modified!\"\"\"\n    # TODO: write the code here", "output": "def reverse_arr(arr):\n    \"\"\"Reverses an array in-place. This means the existing array will be modified!\"\"\"\n    # reverse the array in-place\n    for i in range(len(arr)//2): \n        arr[i], arr[len(arr)-i-1] = arr[len(arr)-i-1], arr[i]", "category": "Python"}, {"instruction": "Create a class called `Employee` that contains instances of a name, age, and salary.", "input": "", "output": "class Employee:\n    \"\"\"\n    This class contains instance variables of a name, age, and salary.\n    \"\"\"\n\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary", "category": "Python"}, {"instruction": "Write an algorithm to count the number of distinct values in an array", "input": "arr = [1, 2, 3, 2, 4, 5, 3, 2]", "output": "def count_distinct_values(arr):\n    # use a set to store the distinct values\n    distinct_values = set()\n    \n    # loop through the array\n    for i in arr:\n        # add each value to the set\n        distinct_values.add(i)\n    # return the size of the set\n    return len(distinct_values)", "category": "Python"}, {"instruction": "Write a Python while loop that iterates through the list `my_list` and prints each item.", "input": "my_list = [1, 2, 3, 4, 5]", "output": "i = 0\nwhile i < len(my_list):\n    print(my_list[i])\n    i += 1", "category": "Python"}, {"instruction": "Create a class for a bank account and include the following functions: deposit() and withdraw().", "input": "", "output": "class BankAccount:\n    def __init__(self, balance):\n        self.balance = balance\n    \n    def deposit(self, amount):\n        self.balance += amount\n    \n    def withdraw(self, amount):\n        self.balance -= amount", "category": "Python"}, {"instruction": "You need to provide an efficient way to implement a stack.", "input": "", "output": "class Stack:\n    def __init__(self):\n        self.items = []\n    \n    def push(self,item):\n        self.items.append(item)\n    \n    def pop(self):\n        return self.items.pop()\n    \n    def isEmpty(self):\n        return (self.items == [])", "category": "Python"}, {"instruction": "Write a function that produces an array of Fibonacci numbers with n numbers.", "input": "", "output": "def fibonacci(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    elif n > 2:\n        fib_nums = [0, 1]\n        for i in range(2, n):\n            fib_nums.append(fib_nums[i-1] + fib_nums[i-2])\n        return fib_nums", "category": "Python"}, {"instruction": "Create a function that takes an array as input and returns true if all elements in the array are similarly oriented (i.e. either all positive or all negative).", "input": "[-2, -4, -7, -9]", "output": "def is_all_same_sign(arr):\n    is_same_sign = True\n    for i in range(len(arr)):\n        if i == 0:\n            sign = (arr[i] >= 0)\n        else:\n            if (arr[i] < 0) != sign:\n                is_same_sign = False\n    return is_same_sign", "category": "Python"}, {"instruction": "Create a function that produces input strings for a calculator.", "input": "", "output": "def create_input_string(nums, ops):\n    input_str = \"\"\n    \n    for i in range(len(nums)):\n        if i == 0:\n            input_str += str(nums[i])\n        else:\n            input_str += ops[i - 1] + str(nums[i])\n    \n    return input_str", "category": "Python"}, {"instruction": "Create a dictionary where the keys are the integers up to 10, and the values are the cubes of those same integers.", "input": "", "output": "def create_dict():\n    cube_dict = {}\n    for i in range(1,11):\n        cube_dict[i] = i**3\n    return cube_dict", "category": "Python"}, {"instruction": "Write a Python script that takes in a string and prints out the frequency distribution of the letters in the string.", "input": "apple", "output": "def frequency_distribution(string):\n    \n    # create a dictionary of frequencies    \n    freq_dict = {}\n    for i in string:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    \n    # print the result\n    for key, value in freq_dict.items():\n        print (key + ': ' + str(value))", "category": "Python"}, {"instruction": "Design an algorithm that can be used to identify if a given binary tree is a valid BST.", "input": "", "output": "def isValidBST(root): \n\t\n\t# Base Case \n\tif root is None: \n\t\treturn True\n\t\t\n\t# Check recursive if left is valid \n\tif not isValidBST(root.left): \n\t\treturn False\n\n\t# If root's value is smaller than left subtree, not valid \n\tif root.left is not None and root.data < root.left.data: \n\t\treturn False\n\n\t# Check recursive if right is valid \n\tif not isValidBST(root.right): \n\t\treturn False\n\n\t# If root's value is greater than right subtree, not valid \n\tif root.right is not None and root.data > root.right.data: \n\t\treturn False\n\n\treturn True", "category": "Python"}, {"instruction": "Enhance the given code to add a search function.", "input": "def display_list(list):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for item in list:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(item)", "output": "def display_list(list, search_term=None):\n    for item in list:\n        if search_term is None or search_term in item:\n            print(item)", "category": "Python"}, {"instruction": "Debug the following code to correct a logical error.", "input": "def sort_list(nums):\n    sorted_nums = []\n    for i in range(len(nums)):\n        print(max(nums))\n        sorted_nums.append(max(nums))\n        nums.remove(max(nums))\n    return sorted_nums", "output": "def sort_list(nums):\n    sorted_nums = []\n    for i in range(len(nums)):\n        max_num = max(nums)\n        sorted_nums.append(max_num)\n        nums.remove(max_num)\n    return sorted_nums", "category": "Python"}, {"instruction": "Write a Python program to count the number of upper and lower case letters in a given string.", "input": "s = \u201cHello World\u201d", "output": "def count_letters(s):\n    upper_count = 0\n    lower_count = 0\n    for c in s:\n        if c.isupper():\n            upper_count += 1 \n        elif c.islower():\n            lower_count += 1 \n    return upper_count, lower_count", "category": "Python"}, {"instruction": "Write a function which takes in two parameters and returns the largest of them", "input": "num1 = 4, num2 = 3", "output": "def find_largest(num1, num2):\n    if num1 > num2:\n        return num1\n    else:\n        return num2", "category": "Python"}, {"instruction": "Construct a class in Python that describes a car", "input": "", "output": "class Car:\n    def __init__(self, brand, color):\n        self.brand = brand\n        self.color = color\n    def describe(self):\n        return \u201cThis car is a {} and it is {}.\u201d.format(self.brand, self.color)", "category": "Python"}, {"instruction": "Write a function to convert a timestamp from epoch time to human readable time", "input": "epoch = 1597968470", "output": "import datetime\ndef epoch_to_human_time(epoch):\n    # convert timestamp to human readable time\n    human_time = datetime.datetime.utcfromtimestamp(epoch).strftime('%Y-%m-%d %H:%M:%S')\n    # return human readable time\n    return human_time", "category": "Python"}, {"instruction": "Construct a binary search tree from the given array of integers.", "input": "[ 10, 5, 15, 1, 8, 12, 2 ]", "output": "class Node: \n    def __init__(self, data): \n        self.data = data  \n        self.left = None\n        self.right = None\n  \ndef insert(root,data): \n    if root is None: \n        return Node(data) \n    else: \n        if root.data > data: \n            root.left=insert(root.left,data) \n        else: \n            root.right=insert(root.right, data) \n        return root \n\nroot = None\nnodes = [10, 5, 15, 1, 8, 12, 2] \nfor data in nodes:\n    root = insert(root, data)", "category": "Python"}, {"instruction": "Convert the binary input to its decimal value.", "input": "binary = \"1101\"", "output": "def binary_to_decimal(binary):\n    decimal = 0\n    for digit in binary:\n        decimal = decimal * 2 + int(digit)\n    return decimal\n\nprint(binary_to_decimal(\"1101\"))\n\n# Output:\n13", "category": "Python"}, {"instruction": "Generate 10 random numbers between 5 to 10.", "input": "", "output": "import random\n\n# Generate 10 random numbers between 5 and 10\nrandom_numbers = [random.randint(5, 10) for _ in range(10)]\n\nprint(\"The 10 random numbers are: \", random_numbers)", "category": "Python"}, {"instruction": "Compute the centroid of given points using mathematical formulas.", "input": "points = [(2, 3), (4, 7), (6, 9)]", "output": "def calculate_centroid(points): \n    n = len(points) \n  \n    centroidX = sum(row[0] for row in points) / n\n    centroidY = sum(row[1] for row in points) / n\n     \n    return [centroidX, centroidY] \n  \npoints = [(2, 3), (4, 7), (6, 9)] \nprint(calculate_centroid(points))", "category": "Python"}, {"instruction": "What are lambda expressions in Python?", "input": "", "output": "Lambda expressions in Python are anonymous functions that can take in arguments and return a value. They are commonly used for performing operations on collections of data, or for making code more concise.", "category": "Python"}, {"instruction": "Using the below array, create an object with key for individual item and value for the count of the item.", "input": "['Apple', 'Apple', 'Orange', 'Banana']", "output": "items = ['Apple', 'Apple', 'Orange', 'Banana']\n\ncount = {}\nfor item in items:\n    if item in count:\n        count[item] += 1\n    else:\n        count[item] = 1\n\nprint(count)", "category": "Python"}, {"instruction": "Create a function in Python that prints out the numbers from 0 to the given parameter.", "input": "10", "output": "def printnumbers(n):\n    for i in range(n+1):\n        print(i)\n\nprintnumbers(10)", "category": "Python"}, {"instruction": "Create a Python script for removing all whitespace from a given string.", "input": "string = \" Hi There \"", "output": "no_whitespace = string.replace(\" \", \"\")\nprint(no_whitespace)", "category": "Python"}, {"instruction": "Create a function to calculate the value of \"e\" to the nth term.", "input": "term = 5", "output": "def calculate_e(term): \n    e = 0\n    for i in range(term + 1): \n        e += 1 / math.factorial(i) \n    return e", "category": "Python"}, {"instruction": "Using the list of numbers, create a filter in Python that removes all odd numbers from the list.", "input": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "filtered_list = list(filter(lambda x: x % 2 == 0, numbers))", "category": "Python"}, {"instruction": "Create a class called Person with two variables, name and age, and two methods, getName() and setAge().", "input": "", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n \n    def getName(self):\n        return self.name\n \n    def setAge(self, age):\n        self.age = age", "category": "Python"}, {"instruction": "Output the command line argument received by a Python function.", "input": "", "output": "import sys\n\ndef get_command_line_arg():\n    print(sys.argv[1])", "category": "Python"}, {"instruction": "Describe the different data types available in Python.", "input": "", "output": "The different data types available in Python include strings, integers, floats, tuples, lists, dictionaries, sets, booleans, and None.", "category": "Python"}, {"instruction": "Define a function to calculate the median of a given array of numbers.", "input": "", "output": "def median(numbers):\n    sorted_numbers = sorted(numbers)\n\n    if len(numbers) % 2 == 1:\n        return sorted_numbers[len(numbers)//2]\n    else:\n        middle1 = sorted_numbers[len(numbers)//2]\n        middle2 = sorted_numbers[len(numbers)//2 - 1]\n        return (middle1 + middle2) / 2", "category": "Python"}, {"instruction": "What are the different ways to loop through a list in Python?", "input": "", "output": "The different ways of looping through a list in Python are the for loop, the while loop, the list comprehension, and the map() function.", "category": "Python"}, {"instruction": "Add the two given integer variables using a Python script.", "input": "a = 5\nb = 10", "output": "sum = a + b\nprint(sum)", "category": "Python"}, {"instruction": "Write a function that given a positive number, returns the sum of all positive numbers from 1 to the given number.", "input": "number = 10", "output": "def sum_numbers(number):\n    # Initialize sum\n    total = 0\n    # Iterate through 1 to number\n    for i in range(1, number + 1):\n        total += i\n    return total\n\nsum_result = sum_numbers(10)\nprint('Total sum: {}'.format(sum_result))", "category": "Python"}, {"instruction": "Given a list of numbers, construct a function that returns the highest and the lowest numbers.", "input": "numbers = [3, 10, 2, 8, 5]", "output": "def get_min_max(numbers):\n    # Set min and max to first number\n    lowest = numbers[0]\n    highest = numbers[0]\n    # Iterate through each number \n    for num in numbers:\n        if num < lowest:\n            lowest = num\n        if num > highest:\n            highest = num\n    # Return min and max in a tuple\n    return (lowest, highest)\n\nmin_max_nums = get_min_max([3, 10, 2, 8, 5])\nprint(min_max_nums)", "category": "Python"}, {"instruction": "Create a function that given a string of words, counts the frequency of each word.", "input": "word_string = \"I am learning a lot of new things!\"", "output": "def count_word_frequencies(word_string):\n    # Split string into separate words\n    words = word_string.split()\n    # Initialize dictionary for word frequencies\n    word_freqs = {}\n    # Iterate through each word\n    for word in words:\n        if word in word_freqs:\n            # Increment count if word already in dictionary\n            word_freqs[word] += 1\n        else:\n            # Add word if first time it appears\n            word_freqs[word] = 1\n\n    return word_freqs\n\nword_frequencies = count_word_frequencies(\"I am learning a lot of new things!\")\nprint(word_frequencies)", "category": "Python"}, {"instruction": "Write a function that given a list of strings, filters out empty strings.", "input": "string_list = [\"Hello\", \"\", \"Bye\", \"\", \"See you!\"]", "output": "def filter_empty_strings(string_list):\n    return [string for string in string_list if string]", "category": "Python"}, {"instruction": "Write a code to display the current directory path in the terminal.", "input": "", "output": "import os\n\ncurrdir = os.getcwd()\nprint(currdir)", "category": "Python"}, {"instruction": "Create a function to generate a random string with the given length.", "input": "Length = 8", "output": "import string\nimport random\n\ndef generate_random_string(length):\n    char_list = \"\".join(random.sample(string.ascii_letters, length))\n    return char_list", "category": "Python"}, {"instruction": "Write a function that takes a string and returns the number of times the string occurs in the given array", "input": "string = \"hello\", arr = [\"hello\", \"hi\", \"hello\", \"salut\"]", "output": "def count_string_occurrences(string, arr):\n    # initialize count\n    count = 0\n    # loop through array\n    for i in arr:\n        # if element equals string, increment count\n        if i == string:\n            count += 1\n    # return count\n    return count", "category": "Python"}, {"instruction": "Offer a solution to the following programming problem", "input": "Given a list of strings, return the longest string", "output": "def longest_string(string_list):\n    longest_string = \"\"\n    for s in string_list:\n        if len(s) > len(longest_string): \n            longest_string = s\n    return longest_string", "category": "Python"}, {"instruction": "Develop a python program to search for a substring in a string.", "input": "String = \"This is a sample string\"\nSubstring = \"sample\"", "output": "def search_substring(string, substring):\n    start = 0\n    index = -1\n\n    while start < len(string):\n        i = string.find(substring, start)\n        if i == -1:\n            break\n        else:\n            index = i\n            start = i + 1\n\n    return index", "category": "Python"}, {"instruction": "Write an algorithm to find the maximum substring in the given string.", "input": "abcadefghi", "output": "def findMaxSubstring(string):\n    max_len = 0\n    max_substring = \"\"\n    for i in range(len(string)):\n        current_substring = []\n        for j in range(i, len(string)):\n            if string[j] not in current_substring:\n                current_substring.append(string[j])\n            else:\n                break\n        if len(current_substring) > max_len:\n            max_len = len(current_substring)\n            max_substring = ''.join(current_substring)\n    return max_substring", "category": "Python"}, {"instruction": "Write a function which checks if a number is a prime number.", "input": "", "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Suggest a suitable algorithm for sorting an array of numbers in increasing order.", "input": "", "output": "A suitable algorithm for sorting an array of numbers in increasing order could be the Quick Sort algorithm. This algorithm has an average time complexity of O(nlog(n)), making it an efficient sorting algorithm for large datasets.", "category": "Python"}, {"instruction": "Suggest a suitable data structure for storing employee information.", "input": "", "output": "A suitable data structure for storing employee information could be a hash table, where the keys are the employee IDs, and the values are the employee details such as name, role, and contact details. This data structure would provide efficient lookups, while being easy to maintain and update.", "category": "Python"}, {"instruction": "Construct a custom data type that is capable of representing the information of a student in a college.", "input": "", "output": "A custom data type that is capable of representing the information of a student in a college could be a dictionary where the keys represent different student details, such as name, student ID, GPA, and course load. The values for each key would be the respective information for a particular student.", "category": "Python"}, {"instruction": "Define an application programming interface (API) for a given program.", "input": "", "output": "An application programming interface (API) for a program can be defined as a set of routines, protocols, and tools that provide access services for a software component. An API can expose some aspects of a program's functionality, such as creating a user or managing database records, so that other programs can interact with it and access its data.", "category": "Python"}, {"instruction": "Complete the function below to make a list of n numbers and return the result.", "input": "n = 5", "output": "def create_list(n):\n  result = [] \n  for i in range(0,n): \n    result.append(i) \n  return result", "category": "Python"}, {"instruction": "Parse the following JSON string and extract all the keys into a list.", "input": "jsonString = '{\"name\": \"John\", \"age\": 20, \"location\": \"New York\"}'", "output": "import json\n\njsonString = '{\"name\": \"John\", \"age\": 20, \"location\": \"New York\"}'\n\n# Use json.loads to parse the string\ndata = json.loads(jsonString)\n\n# initializing a list\nlist = []\n\n# extract the keys \nfor key in data:\n    list.append(key)\n    \nprint(list)\n\n# Output: ['name', 'age', 'location']", "category": "Python"}, {"instruction": "Create a for-loop in Python that iterates through a list of numbers and prints out only the numbers in the list that are divisible by 5.", "input": "myList = [10,11,20,21,30,31,40]", "output": "for i in myList:\n    if i % 5 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Write a function that returns the largest number in a list.", "input": "List: [1,2,3,4,5,6]", "output": "def get_largest(lst):\n    largest = 0\n    for i in range (0,len(lst)):\n        if lst[i] > largest:\n            largest = lst[i]\n    return largest\n\n# Driver code\nmyList = [1,2,3,4,5,6]\nprint(get_largest(myList)) # Output: 6", "category": "Python"}, {"instruction": "Write a function to generate a random password based on the given parameters.", "input": "Parameters: Length of password must be 8 characters, must contain at least one uppercase letter, contain at least one lowercase letter and must include at least one number", "output": "import random\nimport string\n\ndef generate_password(min_length, max_length, upper_case, lower_case, number):\n    password = []\n    for _ in range(min_length, max_length + 1):\n        password.append(random.choice(string.ascii_lowercase if lower_case else '') +\n                        random.choice(string.ascii_uppercase if upper_case else '') +\n                        random.choice(string.digits if number else ''))\n    \n    random.shuffle(password)\n    return ''.join(password)\n\n# Driver code\nprint(generate_password(8, 8, True, True, True))", "category": "Python"}, {"instruction": "Write a list comprehension to generate a list of all prime numbers less than 100.", "input": "[noinput]", "output": "# An efficient list comprehension to generate a list of prime numbers\n# less than 100\nprime_numbers = [num for num in range(2, 100) \n                 if all(num % i != 0 for i in range(2, int(pow(num, 0.5) + 1)))]", "category": "Python"}, {"instruction": "Write a Python script to return the index of a specific value from a given list.", "input": "List: [1,2,3,4,5]\nValue: 4", "output": "list = [1,2,3,4,5]\nvalue = 4\n\nindex_value = list.index(value)\nprint(index_value) # 3", "category": "Python"}, {"instruction": "Write a Python program to find the number of days in a month specified by the user.", "input": "Month: February", "output": "days = 28\n\nif month == 'February':\n    print(days)\nelse:\n    print('Invalid Month')", "category": "Python"}, {"instruction": "Create a data frame that for a given set of students contains their name, age, and grade level.", "input": "John (age 18, grade 12),\nJane (age 17, grade 11),\nTom (age 19, grade 13),\nEmily (age 17, grade 11).", "output": "import pandas as pd\n\ndf = pd.DataFrame({\n    \"Name\": [\"John\",\"Jane\",\"Tom\",\"Emily\"],\n    \"Age\": [18,17,19,17],\n    \"Grade Level\": [12,11,13,11]\n})\n\nprint(df)", "category": "Python"}, {"instruction": "Create a new class 'Dog' with a private attribute 'name' and two public methods 'bark' and 'setName'.", "input": "", "output": "class Dog:\n    __name = \"\"\n    \n    def __init__(self, name):\n        self.__name = name\n    \n    def bark(self):\n        print(\"Woof!\")\n    \n    def setName(self, name):\n        self.__name = name", "category": "Python"}, {"instruction": "Write a Python for loop to produces the following output:", "input": "", "output": "for i in range(1, 11):\n    print(f\"{i}x{i} = {i*i}\")\n\n// Output:\n1x1 = 1\n2x2 = 4\n3x3 = 9\n4x4 = 16\n5x5 = 25\n6x6 = 36\n7x7 = 49\n8x8 = 64\n9x9 = 81\n10x10 = 100", "category": "Python"}, {"instruction": "Find the frequency of each letter in the given string.", "input": "string = \"banana\"", "output": "freq = {} \n  \nfor i in string: \n    if i in freq: \n        freq[i] += 1\n    else: \n        freq[i] = 1\n# freq is {'b': 1, 'a': 3, 'n': 2}", "category": "Python"}, {"instruction": "Format the following list of strings according to the desired output.", "input": "input_strings = [\"Hello\", \"world\", \"in\", \"Python\"]", "output": "input_strings = [\"Hello\", \"world\", \"in\", \"Python\"]\n\noutput_string = ' '.join(input_strings)\noutput_string = output_string.capitalize() + '!'\nprint(output_string) \n# Output: Hello world in python!", "category": "Python"}, {"instruction": "Create a function to check if a given string contains valid JSON data and returns true if it does.", "input": "string_to_check = \"{'name': 'John', 'age': 30}\"", "output": "def check_valid_json(string_to_check):\n    try:\n        json.loads(string_to_check)\n        return True\n    except Exception as e:\n        return False", "category": "Python"}, {"instruction": "Develop a program to generate a random integer from 1 to 100.", "input": "", "output": "import random\n \nrandom_int = random.randint(1,100)\nprint(random_int)", "category": "Python"}, {"instruction": "Create a function that takes in two parameters ``str_1``and ``str_2``and returns a boolean indicating whether or not ``str_1`` is contained in ``str_2``.", "input": "str_1 = \"hello\", str_2 = \"hello world\"", "output": "def is_string_contained(str_1, str_2):\n    return str_1 in str_2", "category": "Python"}, {"instruction": "Rewrite the following code snippet to an equivalent code in Python.", "input": "int i = 0;\nwhile (i < 10)\n{\n   System.out.println(i);\n   i++;\n}", "output": "i = 0\nwhile i < 10:\n    print(i)\n    i += 1", "category": "Python"}, {"instruction": "Create an array of 10 people in Python.", "input": "", "output": "people = [\"John\", \"Mia\", \"Nick\", \"Sarah\", \"Emma\", \"Alex\", \"Jayden\", \"Olivia\", \"Lucas\", \"Ava\"]", "category": "Python"}, {"instruction": "Write a code to get the top 5 Twitter trends in the US.", "input": "", "output": "\"\"\"\nGet the top 5 Twitter trends in the US\n\"\"\"\n\nimport tweepy\n\ndef get_top_trends():\n    # Setup authorization\n    auth = tweepy.OAuthHandler('','')\n    auth.set_access_token('','')\n    api = tweepy.API(auth)\n\n    # Get trends\n    trends_result = api.trends_place(23424977)\n    trends = trends_result[0]['trends']\n\n    # Get top 5 trends\n    top_trends = []\n    for trend in trends:\n        if trend['tweet_volume'] is not None and len(top_trends) < 5:\n            top_trends.append(trend['name'])\n\n    return top_trends\n\nif __name__ == '__main__':\n    print(get_top_trends())", "category": "Python"}, {"instruction": "Modify the following code to handle large numbers correctly.", "input": "def factorial(n):  \n   fact = 1\n   for i in range(1, n+1): \n       fact *= i \n   return fact", "output": "def factorial(n):\n    fact = 1\n    for i in range(1, n+1): \n        fact = fact*i % 10**10\n    return fact % 10**10", "category": "Python"}, {"instruction": "Write a Python function to create an empty dictionary.", "input": "", "output": "def create_empty_dict():\n  return {}", "category": "Python"}, {"instruction": "Write a Python program to display even numbers between two intervals.", "input": "", "output": "def print_even_numbers_in_range(start, end):\n    for i in range(start, end+1):\n        if i % 2 == 0:\n            print(i)\n\nprint_even_numbers_in_range(2, 10)", "category": "Python"}, {"instruction": "Write a function to fill an array of size n with random integers in the range 0...k-1.", "input": "", "output": "def random_fill_array(n, k):\n    arr = []\n    for _ in range(n):\n        arr.append(random.randint(0, k-1))\n    return arr", "category": "Python"}, {"instruction": "Implement a method that verifies whether an array of numbers is in increasing order.", "input": "arr = [2, 3, 5, 10, 15]", "output": "def is_increasing_order(arr):\n    for i in range(len(arr)-1):\n        if arr[i+1] <= arr[i]:\n            return False\n    return True", "category": "Python"}, {"instruction": "How do you sort an array of integers in ascending and descending order?", "input": "", "output": "The easiest way to sort an array of integers in ascending order is to use the built-in sorting function in the programming language of your choice. For example, in Python, the sorted() function can be used. Similarly, to sort an array of integers in descending order, you can use the sorted() function with the reverse argument set to True.", "category": "Python"}, {"instruction": "Write a code that finds the most frequent element in a list.", "input": "data = [1, 2, 3, 2, 3, 2, 1, 2, 3]", "output": "def find_most_frequent(data):\n    counts = {}\n    for item in data:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n    most_frequent_item = max(counts, key=counts.get)\n    return most_frequent_item", "category": "Python"}, {"instruction": "Is it possible to create a copy of a multi-dimensional array in Python?", "input": "", "output": "Yes, it is possible to create a copy of a multi-dimensional array in Python using the copy or deepcopy methods from the copy module. These methods return a new object that is a shallow or deep copy of an array respectively.", "category": "Python"}, {"instruction": "Implement the function compute_sum() that takes an array of integers and return their sum.", "input": "arr = [1, 5, 7, -2, 3]", "output": "def compute_sum(arr):\n    result = 0\n    for num in arr:\n        result += num\n    return result", "category": "Python"}, {"instruction": "Use Python to design a function that concatenates two given strings.", "input": "\"Hello\" and \"World\"", "output": "def concatStrings(a, b): \n\treturn a + \" \" + b \n \nstring1 = \"Hello\"\nstring2 = \"World\"\n \nprint(concatStrings(string1, string2)) # Output: Hello World", "category": "Python"}, {"instruction": "Write a Python program to check if a string starts with a letter 'A'.", "input": "str = \"I love apples\"", "output": "if str.startswith(\"A\"):\n  print(\"The string starts with 'A'.\")\nelse:\n  print(\"The string does not start with 'A'.\")", "category": "Python"}, {"instruction": "Rewrite the following code snippet in Python to multiply an array of two numbers with each element in the array.", "input": "var numbers = [3, 5];\n\nfor (var i = 0; i < numbers.length; i++) {\n  numbers[i] = numbers[i] * 2;\n}", "output": "numbers = [3, 5]\n\nfor i in range(len(numbers)):\n  numbers[i] *= 2", "category": "Python"}, {"instruction": "Explain the differences between the sorting algorithms Insertion Sort and Bubble Sort", "input": "", "output": "Insertion sort and bubble sort are two of the most common sorting algorithms. Insertion sort is based on iterating and swapping through a list to find the right location for each element. Each element is compared to the previous element and swapped if it is out of order. Bubble sort is based on comparing each pair of adjacent elements and swapping them if they are out of order. Insertion sort has a time complexity of O(n^2) in average and worst-case scenarios, while bubble sort has a time complexity of O(n^2) in both. Bubble sort requires fewer comparison compared to insertion sort, however insertion sort requires fewer swaps. Therefore, insertion sort is usually more efficient when sorting a partially sorted list.", "category": "Python"}, {"instruction": "Write a Python function for transforming all characters of a string to upper case.", "input": "string: 'Hello World!'", "output": "def toUpperCase(string):\n    return string.upper()\n\n# Output: HELLO WORLD!", "category": "Python"}, {"instruction": "Generate a custom URL for a Google search.", "input": "Search: Python Programming", "output": "https://www.google.com/search?q=python+programming", "category": "Python"}, {"instruction": "Create a function to calculate the total discount when given items to purchase and their corresponding discounts.", "input": "item_list = [\"shirt\", \"trees\", \"shoes\"]\ndiscount_list = [0.25, 0.3, 0.2]", "output": "def calculate_total_discount(items, discounts):\n    total_discount = 0\n    for i in range(len(items)):\n        total_discount += discounts[i]\n    return total_discount", "category": "Python"}, {"instruction": "Create a block of code which sorts the given list in increasing order.", "input": "List = [10, 4, 5, 7, 2]", "output": "# Create a new list to store the sorted elements\nsortedList = []\n\n# Loop through the given list and add the sorted elements to the new list\nwhile List:\n    minimum = List[0]\n    for x in List: \n        if x < minimum:\n            minimum = x\n    sortedList.append(minimum)\n    List.remove(minimum)\n\n# Print the sorted list\nprint(sortedList) # Output: [2, 4, 5, 7, 10]", "category": "Python"}, {"instruction": "Create a request handler for a POST request in Python Flask.", "input": "", "output": "# Import the necessary libraries\nfrom flask import Flask, request\n\n# Initialize the app\napp = Flask(__name__) \n  \n@app.route('/post_request_handler', methods = ['POST']) \ndef post_request_handler(): \n\n    # Extract the data from POST request \n    data = request.get_json()  \n\n    # Do something with the data\n\n    # Return a response\n    return \"Post request handled\", 200", "category": "Python"}, {"instruction": "Write a for loop in python for printing the square of numbers from 0 to 4.", "input": "", "output": "for num in range(5):\n    print(num**2)", "category": "Python"}, {"instruction": "Implement a function that is able to sum two integers, without using the '+' operator.", "input": "x = 10\ny = 20", "output": "def sum_without_plus(x,y):\n    while y != 0:\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n    return x\n\nresult = sum_without_plus(x, y)\nprint (result)\n# Output: 30", "category": "Python"}, {"instruction": "Develop a function that is able to print a list of consecutive numbers between 1 and N, given an integer N as argument.", "input": "N = 5", "output": "def print_n_numbers(N):\n    for x in range(1,N+1):\n        print (x) \n\nprint_n_numbers(N) \n# Output: 1 2 3 4 5", "category": "Python"}, {"instruction": "Develop a function that is able to compute the number of days between two dates.", "input": "date1 = \"27 April, 2020\"\ndate2 = \"8 May, 2020\"", "output": "from datetime import datetime \n  \ndef days_between_dates(date1, date2): \n    date1 = datetime.strptime(date1, \"%d %B, %Y\") \n    date2 = datetime.strptime(date2, \"%d %B, %Y\") \n    return (date2 - date1).days \n\noutput = days_between_dates(date1, date2) \nprint (output) \n# Output: 11", "category": "Python"}, {"instruction": "Output a list that contains all the non-repeating characters from a given string.", "input": "string = \u201cthequickbrownfoxjumpsoverthelazydog\u201d", "output": "def non_repeating_characters(string):\n    character_set = set() \n    for c in string: \n        if c not in character_set: \n            character_set.add(c)\n    return list(character_set)\n\noutput = non_repeating_characters(string)\n# Output: ['h', 'd', 'g', 'u', 'e', 'm', 'o', 'p', 'q', 't', 'v', 'i', 'c', 'b', 'k', 'x', 'f', 'z', 'a', 'y', 'r', 'w', 'l', 'n', 's', 'j']", "category": "Python"}, {"instruction": "Develop a function to compute the cost of a route.", "input": "distance_matrix=[\n [ 0, 10, 15, 20 ], \n [ 10, 0, 35, 25 ], \n [ 15, 35, 0, 30 ], \n [ 20, 25, 30, 0 ]\n]\n\nroute = [0, 2, 3, 1]", "output": "def get_route_cost(distance_matrix,route):\n    cost = 0\n    for i in range(len(route)-1):\n        cost += distance_matrix[route[i]][route[i+1]]\n    return cost\n  \nroute_cost = get_route_cost(distance_matrix, route) \nprint (route_cost) \n# Output: 90", "category": "Python"}, {"instruction": "What is the most efficient way to search for a specific item in an array?", "input": "", "output": "The most efficient way to search for a specific item in an array is to use a binary search algorithm. Binary search works by repeatedly dividing the array in half until the desired item is found. This method has a time complexity of O(log n).", "category": "Python"}, {"instruction": "How do you check if a given string is in a list?", "input": "", "output": "You can check if a given string is in a list by using the \"in\" keyword. For example, if you have a list of strings [\"apple\", \"banana\", \"orange\"] and you want to check if the string \"banana\" is in the list, you can use the following syntax: \n\nif \"banana\" in lst:\n    print(\"String is in list\")", "category": "Python"}, {"instruction": "Using binary search, find the index of a given number in an array of length n.", "input": "", "output": "def binary_search(arr, x):\n    low = 0\n    high = len(arr)-1\n    while low<=high:\n        mid = (low+high)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1", "category": "Python"}, {"instruction": "Given a list of words, write a Python program to find all pairs of distinct indices (i, j) in the given list, so that the concatenation of the two words, i.e. words[i] + words[j] is a palindrome.", "input": "words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"]", "output": "def find_palindrome_pairs(words): \n    res = [] \n    for i in range(len(words)): \n  \n        for j in range(len(words)): \n            if i != j: \n                word = words[i] + words[j] \n                if word == word[::-1]: \n                    res.append((i, j)) \n    return res \nprint(find_palindrome_pairs(words))", "category": "Python"}, {"instruction": "Create a function in Python that takes a sentence as an argument and returns the formatted sentence with the first letter of each word capitalized.", "input": "sentence = \"this is a sentence\"", "output": "def capitalize_sentence(sentence):\n  words = sentence.split()\n  capitalized_words = [word.capitalize() for word in words]\n  return \" \".join(capitalized_words)", "category": "Python"}, {"instruction": "Given an array of numbers, write a Python function to remove even numbers from the array.", "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "def remove_even_numbers(arr):\n    return [x for x in arr if x % 2 != 0]", "category": "Python"}, {"instruction": "Create a NumPy array to store the values of a given function.", "input": "import numpy as np\n\ndef f(x):\n    return x**2", "output": "xs = np.linspace(0,10,100)\nys = np.array([f(x) for x in xs])", "category": "Python"}, {"instruction": "Read in a 2D array with three columns.", "input": "[[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9]]", "output": "# Create an empty list\narray = []\n\n# Iterate over the 2D array\nfor row in array_input:\n    \n    # Create a temporary list\n    temp_list = []\n\n    # Iterate over each column\n    for col in row:\n        temp_list.append(col)\n\n    # Append the temporary list to the array\n    array.append(temp_list)", "category": "Python"}, {"instruction": "Normalize a given vector.", "input": "vector = [2, 5, 6]", "output": "# Calculate sum of vector elements\nvector_sum = 0\nfor x in vector:\n    vector_sum += x\n\n# Normalize vector\nnormalized_vector = [x/vector_sum for x in vector]\n\n# Print the normalized vector\nprint(normalized_vector)", "category": "Python"}, {"instruction": "Write code to store an input string in a hashmap with the count of its occurrence as the value", "input": "The input string is \"apple\".", "output": "string = \"apple\"\ncount_map = dict()\n\nfor char in string:\n    if char in count_map:\n        count_map[char] += 1\n    else:\n        count_map[char] = 1\n\nprint(count_map)", "category": "Python"}, {"instruction": "Describe a method for adding two numbers that uses a stack data structure", "input": "", "output": "A method for adding two numbers using a stack data structure involves the following steps: \n1. Push the two numbers onto the stack. \n2. Pop the two numbers off the stack and add them together. \n3. Push the result onto the stack.\n4. Pop the result off the stack and return it as the final answer.", "category": "Python"}, {"instruction": "Describe an algorithm for sorting an array of n integers in O(n log n) time.", "input": "", "output": "A sorting algorithm applicable to an array of n integers in O(n log n) time is Merge Sort. Its procedure first divides the input array into two halves until there are no more divisions are possible. This is the \"divide and conquer\" step of the algorithm. Then, each pair of divided arrays is sorted and merged into a single, sorted array. This is the \"combine\" step of the sorting algorithm. Finally, the sorted sub-arrays are combined in an organized manner to obtain the final sorted array. This algorithm is considered to be efficient, as it runs in O(n log n) time, where n is the number of elements in the array.", "category": "Python"}, {"instruction": "Write a Python script to merge two given dictionaries into one", "input": "dict1 = {'a': 1, 'c': 3, 'd': 4}\ndict2 = {'a': 6, 'b': 2, 'c': 4}", "output": "dict1 = {'a': 1, 'c': 3, 'd': 4}\ndict2 = {'a': 6, 'b': 2, 'c': 4}\n\ndict3 = {**dict1, **dict2}\nprint(dict3) # {'a': 6, 'c': 4, 'd': 4, 'b': 2}", "category": "Python"}, {"instruction": "Create a python program to implement a Binary Search in an array", "input": "arr = [2, 3, 4, 10, 40]\nx = 10", "output": "def binarySearch(arr, x):\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = int((low + high)/2)\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            return mid\n    return -1\narr = [2, 3, 4, 10, 40]\nx = 10\nresult = binarySearch(arr, x)\nif result != -1:\n    print(\"Element is present at index\",result) \nelse:\n    print(\"Element is not present in array\")", "category": "Python"}, {"instruction": "Write a python program to extract the substring from a string after a specific character", "input": "string = \"Hello,World!\"\ncharacter = \",\"", "output": "string = \"Hello,World!\"\ncharacter = \",\"\nresult = string[string.find(character)+1:]\nprint(result) # World!", "category": "Python"}, {"instruction": "Construct a while loop statement to print only even numbers between 0 to 10 in Python.", "input": "", "output": "i = 0\n\nwhile i <= 10: \n if i % 2 == 0:\n print(i)\n i = i + 1", "category": "Python"}, {"instruction": "Add up the elements of a given matrix.", "input": "matrix = [[1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9]]", "output": "# Initialize the sum\nsum = 0\n\n# Iterate over the matrix\nfor row in matrix:\n    # Iterate over the elements of each row\n    for elem in row:\n        # Add up the elements\n        sum += elem\n\n# Print the sum\nprint(sum)", "category": "Python"}, {"instruction": "How to generate all permutations of a given list of items?", "input": "", "output": "def permutation(lst):\n \n if len(lst) == 0:\n return []\n \n if len(lst) == 1:\n return [lst]\n \n l = []\n \n for i in range(len(lst)):\n m = lst[i]\n remLst = lst[:i] + lst[i+1:]\n \n for p in permutation(remLst):\n l.append([m] + p)\n \n return l", "category": "Python"}, {"instruction": "Using a for loop and an if statement, count how many even numbers are in the given array.", "input": "[1,2,3,4]", "output": "count = 0\nfor num in [1,2,3,4]:\n if num % 2 == 0:\n count += 1", "category": "Python"}, {"instruction": "Change the following variable declaration into Python.", "input": "int num = 10;", "output": "num = 10", "category": "Python"}, {"instruction": "Write code to check if the word 'python' is present in a given string.", "input": "string = 'I love the programming language Python'", "output": "def string_has_python(string):\n  return 'python' in string", "category": "Python"}, {"instruction": "Given a list of strings, write a Python program to print each individual string in uppercase.", "input": "string_list = [\"apple\",\"banana\",\"oranges\"]", "output": "def print_uppercase(string_list):\n  for string in string_list:\n    print(string.upper())", "category": "Python"}, {"instruction": "From a list of numbers, find the smallest number using Python.", "input": "[21, 9, 67, 34]", "output": "\"\"\"\nFrom a list of numbers, find the smallest number using Python.\n\"\"\"\n\n# Initialize the list of numbers\nlist_of_nums = [21, 9, 67, 34]\n\n# Sort the list in order\nlist_of_nums.sort()\n\n# Print the first element of the sorted list\nprint(list_of_nums[0])", "category": "Python"}, {"instruction": "Sort all strings in a list alphabetically, using Python.", "input": "[\"apple\", \"dog\", \"cat\", \"banana\"]", "output": "\"\"\"\nSort all strings in a list alphabetically, using Python.\n\"\"\"\n\n# Initialize the list of strings\nlist_of_strings = [\"apple\", \"dog\", \"cat\", \"banana\"]\n\n# Sort the list alphabetically\nlist_of_strings.sort()\n\n# Print the sorted list\nprint(list_of_strings)", "category": "Python"}, {"instruction": "Write a Python program to convert a string to a list. The string is \"This is a test\".", "input": "\"This is a test\"", "output": "\"\"\"\nWrite a Python program to convert a string to a list.\n\"\"\"\ndef string_to_list(str):\n    return str.split()\n\nif __name__ == '__main__':\n    str = \"This is a test\"\n    print(string_to_list(str))", "category": "Python"}, {"instruction": "Given a 2-d array, write a method to flatten the array.", "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def flatten(arr):\n    flat_list = []\n    for sublist in arr:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list", "category": "Python"}, {"instruction": "Construct a class in Python named \"Person\" which stores first name and last name in instance variables", "input": "", "output": "class Person:\n  def __init__(self, first_name, last_name):\n    self.first_name = first_name\n    self.last_name = last_name", "category": "Python"}, {"instruction": "Create a function in Python to take two numbers as input and return their sum.", "input": "", "output": "def add_nums(num1, num2):\n    return num1 + num2", "category": "Python"}, {"instruction": "Print all the elements of the given 2D array in row-wise order.", "input": "arr = [[1,2], [3,4]]", "output": "for row in arr:\n for ele in row:\n print(ele)", "category": "Python"}, {"instruction": "Create a list of numbers in the range [0, 10) that are divisible by 3.", "input": "", "output": "# Initialize an empty list\nlist_by_3 = []\n\n# Iterate over the range\nfor i in range(0, 10):\n    # Check if the number is divisible by 3    \n    if i % 3 == 0:\n        # Append it to the list\n        list_by_3.append(i)\n\n# Print the list\nprint(list_by_3)", "category": "Python"}, {"instruction": "Generate a dictionary with keys being the list elements and values being the list indexes.", "input": "mylist = ['a','b','c','d']", "output": "# Initialize an empty dictionary\ndict_list = {}\n\n# Iterate over the list\nfor i, item in enumerate(mylist):\n    # Add the elements of the list as keys with the index as their value\n    dict_list[item] = i\n\n# Print the dictionary\nprint(dict_list)", "category": "Python"}, {"instruction": "Calculate the maximum of an input array.", "input": "mylist = [1, 4, 5, 6, 8, -3]", "output": "# Initialize the max\nmax = mylist[0]\n\n# Iterate over the list\nfor i in mylist:\n    # Check for bigger value\n    if i > max:\n        # Update the max\n        max = i\n\n# Print the max\nprint(max)", "category": "Python"}, {"instruction": "Using Python, write a code snippet to identify the capital of a given country.", "input": "Country: India", "output": "if country == 'India':\n  capital = 'New Delhi'\nprint(capital)", "category": "Python"}, {"instruction": "Add a method to a given class to check if an element is present in it.", "input": "", "output": "class MyClass:\n  def __init__(self, elements):\n    self.elements = elements\n\n  def contains(self, element):\n    return element in self.elements", "category": "Python"}, {"instruction": "Using TensorFlow, create a model that predicts the price of an item from its features.", "input": "", "output": "import tensorflow as tf\n\n# Define the inputs, weights and bias.\ninputs = tf.keras.Input(shape=(features))\nweights = tf.keras.layers.Dense(3, activation='relu')(inputs)\nbias = tf.Variable(tf.random_normal([1]))\n\n# Create the model.\nmodel = tf.keras.Model(inputs, weights + bias)\n\n# Compile and fit the model.\nmodel.compile(optimizer='adam', loss='mse', metrics=['accuracy'])\nmodel.fit(x_train, y_train, validation_split=0.2, epochs=50)", "category": "Python"}, {"instruction": "Convert the following code snippet from Python 2 code to Python 3 code.", "input": "x = raw_input(\"What is your name? \")", "output": "x = input(\"What is your name? \")", "category": "Python"}, {"instruction": "List the primitive data types of the language Python.", "input": "", "output": "Python data types include integers, floating-point numbers, strings, Booleans, lists, sets, dictionaries, tuples, and None.", "category": "Python"}, {"instruction": "Explain how a hash table works.", "input": "", "output": "A hash table is a data structure that stores key-value pairs where the key is used to generate a unique index, or \"hash\". The hash is then used to access the value associated with the key. This allows for quick lookups of the data as the index is calculated from the key, resulting in an efficient way to store and retrieve the data.", "category": "Python"}, {"instruction": "Differentiate between a stack and a queue.", "input": "", "output": "A stack is a data structure that operates on a Last-In-First-Out (LIFO) principle, meaning the element that was added last will be removed first. A queue is a data structure that works on a First-In-First-Out (FIFO) principle, meaning the element that was added first will be removed first. Stacks are often used to reverse the order of elements or to store data temporarily, while queues are used for processing queues of data such as tasks and messages.", "category": "Python"}, {"instruction": "Provide an example of a memoization technique in programming.", "input": "", "output": "An example of a memoization technique in programming is to store the result of a function call in a lookup table. When the function is called for the same input in the future, the stored result can be accessed quickly from the lookup table instead of needing to calculate it again, resulting in improved performance.", "category": "Python"}, {"instruction": "How does a recursive function work?", "input": "", "output": "A recursive function is a function that calls itself in order to complete its task. When a recursive function is called, it will break the problem into smaller sub-problems, and call itself with the smaller sub-problems. This process will repeat until the smallest sub-problem is solved, at which point the recursive function will return the result of all the sub-problems it encountered.", "category": "Python"}, {"instruction": "Summarize the following article in less than 100 words.", "input": "Machine Learning is an advanced course that is currently trending in the tech world. With the help of machine learning, many complex patterns and functions can be solved using algorithms and mathematical models. The ever-increasing advancements in technology also mean that the applications of machine learning are also widening every day.", "output": "Machine Learning is a powerful tool utilized in the tech industry to unlock complex patterns and functions. Advances in hardware and software technologies are allowing machine learning to be used in wider applications than ever before, making it a growing trend in the industry. It involves algorithms and mathematical models to complete tasks, resulting in improved efficiency and practical solutions to existing problems.", "category": "Python"}, {"instruction": "Write code to find the longest word in the given list and output it.", "input": "words_list = [\"apple\", \"mango\", \"banana\", \"blueberry\"]", "output": "def find_longest_word(lst):\n    longest_word = \"\"\n    for word in lst:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word", "category": "Python"}, {"instruction": "Output code for a function that will remove all instances of an element from a given list.", "input": "my_list = [1, 3, 5, 3, 7, 9, 3]", "output": "def remove_element(lst, element):\n    return [x for x in lst if x != element]", "category": "Python"}, {"instruction": "Write a function to sum up all the elements in a given list and output the result.", "input": "my_list = [2, 4, 9, 16]", "output": "def sum_list_elements(lst):\n    result = 0\n    for num in lst:\n        result += num\n    return result", "category": "Python"}, {"instruction": "Output the code for a function to generate the Fibonacci sequence up to the given number n.", "input": "", "output": "def generate_fibonacci(n):\n    fibonacci_list = [0, 1]\n    i = 1\n    while i < n:\n        fibonacci_list.append(fibonacci_list[i] + fibonacci_list[i-1])\n        i = i + 1\n    return fibonacci_list", "category": "Python"}, {"instruction": "Output code for a function that prints the multiplication table of a given number.", "input": "", "output": "def multiplication_table(num):\n    for i in range(1, 11):\n        print(num, 'x', i, '=', num*i)", "category": "Python"}, {"instruction": "How can you sort a list in decending order in Python?", "input": "", "output": "my_list = [4, 8, 19, 6, 17, 11]\n\nsorted_list = sorted(my_list, reverse=True)", "category": "Python"}, {"instruction": "Create a class with two methods which will print out strings \"Hello\" and \"Goodbye\".", "input": "", "output": "class MyClass:\n    def hello_method(self):\n        print(\"Hello\")\n    \n    def goodbye_method(self):\n        print(\"Goodbye\")", "category": "Python"}, {"instruction": "How can you concatenate two strings in Python?", "input": "", "output": "# Using the + operator \nstr1 = \"Hi\"\nstr2 = \" there!\"\nstr3 = str1 + str2 \nprint(str3)\n\n# Output: Hi there!\n\n# Using the join() method\nstr1 = \"Hi\"\nstr2 = \" there!\"\nstr3 = \"\".join([str1, str2]) \nprint(str3)\n\n# Output: Hi there!", "category": "Python"}, {"instruction": "Write an algorithm to calculate the nth Fibonacci number.", "input": "", "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)", "category": "Python"}, {"instruction": "Write a class to represent a point in a 2-D plane.", "input": "", "output": "class Point: \n    \n    def __init__(self, x_coordinate, y_coordinate): \n        self.x = x_coordinate \n        self.y = y_coordinate \n  \n    def get_x(self): \n        return self.x \n  \n    def get_y(self): \n        return self.y \n  \n    def set_x(self, x_coordinate): \n        self.x = x_coordinate \n  \n    def set_y(self, y_coordinate): \n        self.y = y_coordinate \n  \n    def distance(self, other_point): \n        x_diff_sq = (self.x - other_point.x) * (self.x - other_point.x) \n        y_diff_sq = (self.y - other_point.y) * (self.y - other_point.y) \n          \n        return (x_diff_sq + y_diff_sq) ** 0.5 \n  \np1 = Point(1, 2) \np2 = Point(3, 4) \n\nprint(p1.distance(p2))", "category": "Python"}, {"instruction": "Find the index of the first character in a string that is not a space.", "input": "string: \"    Hello world!\"", "output": "def find_index(string): \n    for i in range(len(string)):  \n        if string[i] != ' ': \n            return i \n    return -1\n\nstring = \"    Hello world!\"\nprint(find_index(string))", "category": "Python"}, {"instruction": "Write a recursive function to calculate the Fibonacci sequence.", "input": "", "output": "def fibo(n): \n  \n    if n <= 1: \n        return n \n    else: \n        return(fibo(n-1) + fibo(n-2)) \n  \n# take input from the user \nnterms = 10\n\n# check if the number of terms is valid \nif nterms <= 0: \n   print(\"Please enter a positive integer\") \nelse: \n   print(\"Fibonacci sequence:\") \n   for i in range(nterms): \n       print(fibo(i))", "category": "Python"}, {"instruction": "Create a function that takes a list of numbers and removes all elements that occur more than once.", "input": "[1, 2, 3, 1, 2, 5]", "output": "def remove_duplicates(numbers): \n    new_list = [] \n    for num in numbers: \n        if num not in new_list: \n            new_list.append(num) \n    return new_list \n\nprint (remove_duplicates([1, 2, 3, 1, 2, 5]))", "category": "Python"}, {"instruction": "Generate a properly formatted JSON object in Python to represent the following details: name = John, age = 34", "input": "", "output": "{\n  \"name\": \"John\",\n  \"age\": 34\n}", "category": "Python"}, {"instruction": "Write a Tensorflow code for building a neural network with two input layers, two hidden layers and one output layer.", "input": "", "output": "model = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(64, activation='relu', input_shape=[2]),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(1)\n])", "category": "Python"}, {"instruction": "Alter the following python code such that it prints \"Hello, world!\"", "input": "for x in range(1,10):\n    print(x)", "output": "for x in range(1,10):\n    if x == 5:\n        print('Hello, world!')\n    else:\n        print(x)", "category": "Python"}, {"instruction": "Visualize the following dataset using a bar chart in matplotlib.", "input": "labels = ['A', 'B', 'C', 'D', 'E', 'F']\nvalues = [8, 5, 7, 12, 4, 10]", "output": "import matplotlib.pyplot as plt\n\nlabels = ['A', 'B', 'C', 'D', 'E', 'F']\nvalues = [8, 5, 7, 12, 4, 10]\n\nplt.bar(labels, values)\nplt.title('Dataset')\nplt.xlabel('Category') \nplt.ylabel('Value')\nplt.show()", "category": "Python"}, {"instruction": "Create a loop in Python that prints the integers between 1 and 10 (including 1 and 10).", "input": "", "output": "for i in range(1, 11):\n  print(i)", "category": "Python"}, {"instruction": "Create a for loop to print all the even numbers between 1 and 10 (including 1 and 10).", "input": "", "output": "for i in range(1, 11):\n    if i % 2 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Analyze the following list of strings and find the most frequent character.", "input": "strings = [\"hello\", \"world\", \"foo\", \"bar\"]", "output": "strings = [\"hello\", \"world\", \"foo\", \"bar\"]\n\nchar_counts = {}\nfor string in strings:\n    for char in string:\n        if char not in char_counts:\n            char_counts[char] = 0\n        char_counts[char] += 1\n\nmost_frequent = max(char_counts, key=lambda k: char_counts[k])\nprint(most_frequent) # prints l", "category": "Python"}, {"instruction": "Given an array of integers and an integer k, write a program to find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k.", "input": "[1,3,5,7,3,9], k=3", "output": "def solution(arr, target):\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, i + target + 1):\n            if j >= len(arr):\n                break\n            if arr[i] == arr[j]:\n                return True\n    return False", "category": "Python"}, {"instruction": "Generate a Delete API endpoint in Python Flask for a user to delete their data from a database.", "input": "", "output": "@app.route('/delete/<int:user_id>', methods=['DELETE'])\ndef delete(user_id):\n   user = db.query.get(user_id)\n   db.session.delete(user)\n   db.session.commit()\n   return jsonify({'message':'User deleted successfully'})", "category": "Python"}, {"instruction": "Construct a Django view that outputs the following string", "input": "Hello World!", "output": "from django.http import HttpResponse\n\ndef hello_world(request):\n return HttpResponse(\"Hello World!\")", "category": "Python"}, {"instruction": "Construct a loop to apply a function to each element of a list", "input": "[2, 5, 8], function square", "output": "def apply_function(list, f):\n    for i in range(len(list)):\n        list[i] = f(list[i])\n    return list\n\ndef square(x):\n    return x*x\n\nlist = [2, 5, 8]\napply_function(list, square)", "category": "Python"}, {"instruction": "Generate code to create a PDF report from a given dataset.", "input": "The dataset contains information about customer orders.", "output": "def generate_report(data):\n    doc = PDFDocument()\n    title = doc.add_heading('Customer Report', 0)\n    doc.add_page_break()\n\n    table = doc.add_table(rows=1, cols=2)\n    table.style = 'TableGrid'\n    header_row = table.rows[0]\n    header_row.cells[0].text = 'Order ID'\n    header_row.cells[1].text = 'Amount'\n\n    rows = len(data)\n    for row in range(rows):\n        new_row = table.add_row()\n        new_row.cells[0].text = str(data[row][0])\n        new_row.cells[1].text = '{:.2f}'.format(data[row][1])\n\n    doc.add_page_break()\n    doc.save('Customer_Report.pdf')", "category": "Python"}, {"instruction": "Write a Python program to divide the numbers in the list by a given number", "input": "[2, 4, 10], 2", "output": "def divide_list(list, n):\n    return [x/n for x in list]", "category": "Python"}, {"instruction": "Generate a 10x10 multiplication table in Python.", "input": "", "output": "for i in range(1,11): \n   for j in range(1,11): \n        print(i*j, end = \"\\t\") \n   print()", "category": "Python"}, {"instruction": "Write a Python snippet to print from 1 to 10 (inclusive) using a for loop", "input": "", "output": "for i in range(1, 11):\n  print(i)", "category": "Python"}, {"instruction": "How would you solve this leetcode problem in Python?", "input": "Problem: Implement the following function\n\n```def majorityElement(self, nums: List[int]) -> int:```\n\nGiven an array of size n, find the majority element. The majority element is the element that appears more than \u230a n/2 \u230b times.", "output": "def majorityElement(self, nums: List[int]):\n    majority_count = len(nums)//2\n    num_count = {}\n    for num in nums:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    for key, value in num_count.items():\n        if value > majority_count:\n            return key", "category": "Python"}, {"instruction": "Create a python program that takes a keyword as an input and prints the top 10 relevant Wikipedia articles for that keyword", "input": "", "output": "import wikipedia\n\ndef get_top_ten_results(keyword):\n    results = wikipedia.search(keyword, results=10)\n    for result in results:\n        print(result)", "category": "Python"}, {"instruction": "Change the following code from Python to JavaScript", "input": "def add_numbers(a, b):\n    return a + b", "output": "function addNumbers(a, b) {\n    return a + b; \n}", "category": "Python"}, {"instruction": "How can you make a dictionary key iterable in Python?", "input": "", "output": "A dictionary in Python can be made iterable using a for loop. To iterate over the keys of a dictionary, we can use the ``dict.keys()`` method which returns an iterable object of the keys in the dictionary. This iterable can then be used to iterate over the keys of the dictionary.", "category": "Python"}, {"instruction": "Given an array of integers, sort the array in-place using quick sort.", "input": "[12, 8, 9, 10, 4]", "output": "def quickSort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    pivot = arr[len(arr)//2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n\n    return quickSort(left) + middle + quickSort(right)", "category": "Python"}, {"instruction": "For a given array of numbers, find the length of the longest increasing subsequence", "input": "[1, 5, 4, 3, 8, 10, 6]", "output": "def longest_increasing_subsequence(arr):\n    n = len(arr)\n    lis = [1] * n \n  \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n    return maximum", "category": "Python"}, {"instruction": "Create a code that can be used to perform a linear search in an array.", "input": "[1, 3, 5, 7, 8, 9], 8", "output": "func linearSearch(_ array: [Int], _ x: Int) -> Int {\n    for (index, value) in array.enumerated() {\n        if value == x {\n            return index\n        }\n    }\n    return -1\n}\n\nprint(linearSearch([1, 3, 5, 7, 8, 9], 8))", "category": "Python"}, {"instruction": "Generate a random password with at least 8 characters and with at least 1 number and 1 letter.", "input": "", "output": "import string \nimport random \n\ndef generate_password(n):  # n is the length of the password\n  \n    alphabet = string.ascii_letters + string.digits\n    password = ''.join(random.choice(alphabet) for i in range(n))\n    while not any(c.isdigit() for c in password) or not any(c.isalpha() for c in password):\n        password = ''.join(random.choice(alphabet) for i in range(n))\n    return password\n\nprint(generate_password(8))", "category": "Python"}, {"instruction": "Come up with a Python generator expression to iterate over a given list and return only even elements.", "input": "[1, 2, 3, 4, 5, 6, 7, 8]", "output": "even_list = (x for x in [1, 2, 3, 4, 5, 6, 7, 8] if x%2 == 0)", "category": "Python"}, {"instruction": "Modify the following python code to calculate the average of a list of numbers.", "input": "def list_average(numbers):\n    '''This function will calculate the average of a list of numbers.'''", "output": "def list_average(numbers):\n    '''This function will calculate the average of a list of numbers.'''\n    return sum(numbers) / len(numbers)", "category": "Python"}, {"instruction": "Compare and contrast the advantages and disadvantages of using AJAX for a website.", "input": "", "output": "AJAX provides several advantages for a website. It allows for asynchronus data transfer between the server and the client, making it possible to update a web page without refreshing the whole page. It also improves the user experience by providing a faster, smoother interface. By minimizing server load, AJAX facilitates better scalability.\n\nOn the other hand, AJAX can lead to slower response times, especially if a large amount of data is being transferred. It can also be difficult to debug since errors are often not visible to the user or the developer. Additionally, AJAX requires JavaScript to be enabled, which may not be the case for all users.", "category": "Python"}, {"instruction": "How to debug a program in Python?", "input": "", "output": "In Python, debugging a program can be done by using a debugger to step through code line by line and checking the current state of the values, variables, objects, and functions. Using a debugger is useful for understanding the exact flow of code and finding errors or unexpected behavior. Python also provides a number of built-in debugging tools such as the ``pdb`` module which can be used to debug a program.", "category": "Python"}, {"instruction": "Write a Python snippet to print the same message 10 times.", "input": "", "output": "for _ in range(10):\n  print(\"Hello World!\")", "category": "Python"}, {"instruction": "Write a function in Python to move the last element of a given list to the beginning of the list.", "input": "", "output": "def move_last_to_front(list):\n  list[0], list[-1] = list[-1], list[0]\n  return list", "category": "Python"}, {"instruction": "Reverse the order of the values in the input list using Python.", "input": "list = [1, 4, 5, 6, 7]", "output": "list = [7, 6, 5, 4, 1]\n\ndef reverse_list(input_list):\n    \"\"\"Reverse the order of the values in the input list.\"\"\"\n    return input_list[::-1]\n\nif __name__ == '__main__':\n    list = [1, 4, 5, 6, 7]\n    print(reverse_list(list))", "category": "Python"}, {"instruction": "Create a loop in Python to find the sum of all integers from 1 to 100.", "input": "", "output": "total = 0\nfor num in range(1, 101): \n    total+= num \n\nprint(\"Sum of all integers from 1 to 100 is\", total)", "category": "Python"}, {"instruction": "Create a Python dictionary with key-values pairs (fruit-quantity) as listed below.", "input": "apple = 5, banana = 10, orange = 15", "output": "fruit_dict = {\n    \"apple\":5,\n    \"banana\":10,\n    \"orange\":15\n    }", "category": "Python"}, {"instruction": "Design an algorithm for sorting data in ascending order using selection sort.", "input": "", "output": "def selection_sort(arr):\n\n    for i in range(len(arr)):\n        min_index = i\n        for j in range(i+1, len(arr)):\n            if arr[min_index] > arr[j]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n\n    return arr", "category": "Python"}, {"instruction": "Write a Python program to sort the dictionary by key.", "input": "myDict = {'a': 1, 'c': 3, 'b': 2}", "output": "sortedDict = sorted(myDict)\nfor key in sortedDict:\n    print(key, ':', myDict[key])", "category": "Python"}, {"instruction": "Write a function to reverse the contents of a stack.", "input": "", "output": "def reverseStack(stack):\n    revStack = []\n \n    while len(stack) > 0:\n        top = stack.pop()\n        revStack.append(top)\n \n    return revStack", "category": "Python"}, {"instruction": "How would you print the sum of all elements in a 2-dimensional array?", "input": "array=[[1,2], [3,4], [5,6]]", "output": "sum=0\nfor i in range(len(array)):\n    for j in range(len(array[i])):\n        sum+= array[i][j] \n\nprint(sum)", "category": "Python"}, {"instruction": "Rewrite the following code snippet from an object-oriented programming perspective.", "input": "def find_greeting(name):\n    if name == \"Alice\":\n        return \"Hi Alice!\"\n    else:\n        return \"Hello!\"", "output": "This code snippet can be rewritten using an object-oriented programming approach by creating two classes - Greeting and Person. \n\nclass Person:\n    def __init__(self, name):\n        self.name = name\n\nclass Greeting:\n    def __init__(self):\n        self.greetings = {\"Alice\": \"Hi Alice!\",\n                          \"default\": \"Hello!\"}\n\n    def find_greeting(self, person):\n        if person.name in self.greetings:\n            return self.greetings[person.name]\n        else:\n            return self.greetings[\"default\"]", "category": "Python"}, {"instruction": "Rewrite this code snippet from a functional programming perspective.", "input": "def is_even_sum(nums):\n    return sum([1 for x in nums if x % 2 == 0]) > 0", "output": "This code snippet can be rewritten using a functional programming approach by using the built-in any() function.\n\ndef is_even_sum(nums):\n    return any(x % 2 == 0 for x in nums)", "category": "Python"}, {"instruction": "How would you improve the efficiency of the following code snippet?", "input": "def get_total(list):\n    total = 0 \n    for item in list:\n        total += item\n    return total", "output": "One way to improve the efficiency of this code snippet is to use the built-in sum() function. This avoids having to manually iterate over the list and keep a running total. So the code can be rewritten as:\n\ndef get_total(list):\n    return sum(list)", "category": "Python"}, {"instruction": "Explain what the following python code prints out.", "input": "for i in range(10):\n    print(i**2)", "output": "The code prints out the squares of the numbers 0 to 9, i.e., 0, 1, 4, 9, 16, 25, 36, 49, 64 and 81.", "category": "Python"}, {"instruction": "Write a code that prints all the possible outcomes of rolling two dice.", "input": "", "output": "def roll_two_dices():\n    for i in range(1, 7):\n        for j in range(1, 7):\n            print(f\"({i}, {j})\")", "category": "Python"}, {"instruction": "Remove the extra spaces from a given string and make the spaces between letters and words consistent.", "input": "\"  The  quick  brown fox  jumps  over  the lazy  dog  \"", "output": "def remove_extra_spaces(s):\n    s = s.strip()\n    words = s.split(\" \")\n    result = \"\"\n    for word in words:\n        if word:\n            result += word + \" \"\n    return result.strip()", "category": "Python"}, {"instruction": "Write a Python code that reverses the order of words in a sentence.", "input": "\"This is a sentence\"", "output": "def reverseWords(sentence): \n  return ' '.join(sentence.split()[::-1])\n\n# Output: \"sentence a is This\"", "category": "Python"}, {"instruction": "Write a Python code to find all the prime numbers below a given number.", "input": "", "output": "def get_primes(n): \n  primes = [] \n  for num in range(2, n+1): \n    is_prime = True     \n    for div in range(2, n): \n      if (num % div == 0): \n        is_prime = False      \n    if is_prime: \n      primes.append(num) \n  return primes", "category": "Python"}, {"instruction": "Given a binary search tree and a target value, write a python function to search for the closest node value to the target.", "input": "", "output": "def closestInBST(root, target):\n  res = root.val\n  while root:\n    if root.val == target:\n      return root.val\n    if abs(root.val-target) < abs(res-target):\n      res = root.val\n    if target < root.val:\n      root = root.left\n    else:\n      root = root.right\n  return res", "category": "Python"}, {"instruction": "Construct an array in Python of size 10 and fill it with random integers from 0 to 5.", "input": "", "output": "import random\n\narray = []\nfor i in range(10):\n  array.append(random.randint(0,5))\n  \nprint(array)", "category": "Python"}, {"instruction": "Create a Python program that takes two lists as arguments, and returns a list that contains the elements present in both lists.", "input": "list1 = [2, 3, 4, 5] \nlist2 = [1, 4, 6]", "output": "def common_elements_of_two_lists(list1, list2): \n    result = [] \n    for element in list1: \n        if element in list2: \n            result.append(element) \n    return result", "category": "Python"}, {"instruction": "Edit the following code to make the output more reusable.", "input": "def get_name(names):\n    print(\"Here's my name:\")\n    for name in names:\n        print(name)\n    return", "output": "def get_name(names):\n    result = []\n    for name in names:\n        result.append(name)\n    return result", "category": "Python"}, {"instruction": "Construct the code which will generate addition equations with randomized numbers ranging from 0 to 5.", "input": "", "output": "import random\n\ndef generate_addition_equation():\n\n    a = random.randrange(0, 6)\n    b = random.randrange(0, 6)\n\n    equation = str(a) + \" + \" + str(b) + \" = \"\n\n    return equation", "category": "Python"}, {"instruction": "Using the function you wrote in 4.\nWrite a Python program to convert a binary list to an integer", "input": "binary_list = [1, 0, 1, 0]", "output": "def binary_list_to_int(binary_list):\n    return int(''.join(str(x) for x in binary_list), 2)", "category": "Python"}, {"instruction": "Add a new key-value pair (\"year\": 2020) to the given dictionary using Python.", "input": "dictionary = {\"name\": \"John\", \"age\": 30}", "output": "dictionary = {\"name\": \"John\", \"age\": 30}\n\ndef add_year(dictionary):\n    \"\"\"Add a new key-value pair (\"year\": 2020) to the dictionary\"\"\"\n    dictionary[\"year\"] = 2020\n    return dictionary\n\nif __name__ == '__main__':\n    dictionary = {\"name\": \"John\", \"age\": 30}\n    print(add_year(dictionary))", "category": "Python"}, {"instruction": "Create a Python script to combine two lists into a dictionary", "input": "list1 = [1, 2, 3]\nlist2 = [\"a\", \"b\", \"c\"]", "output": "list1 = [1, 2, 3]\nlist2 = [\"a\", \"b\", \"c\"]\n\ndef combine_lists(list1, list2):\n    \"\"\"Combine two lists into a dictionary\"\"\"\n    return {key: value for key, value in zip(list1, list2)}\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3]\n    list2 = [\"a\", \"b\", \"c\"]\n    print(combine_lists(list1, list2))", "category": "Python"}, {"instruction": "Create a function in Python to generate a list of consecutive natural numbers starting from 1 up to a given number.", "input": "n = 8", "output": "def gen_list_of_consecutive_numbers(n):\n    \"\"\"Generate a list of consecutive natural numbers up to a given number n\"\"\"\n    return list(range(1, n + 1))\n\nif __name__ == '__main__':\n    n = 8\n    print(gen_list_of_consecutive_numbers(n))", "category": "Python"}, {"instruction": "What is the difference between a software engineer and a software developer?", "input": "", "output": "Software engineers focus on developing and building software. They design software, maintenance and testing. They may also be involved in the development of applications, the creation of databases, and hardware integration. \n \nSoftware developers focus on coding, debugging, testing and maintenance of existing software. Developers may also be involved in the development of new applications. They are generally experts in one or more programming languages.", "category": "Python"}, {"instruction": "Compose a Python code for computing the factorial of a given number.", "input": "", "output": "def factorial(n): \n\tif n <= 1 : \n\t\treturn 1 \n\telse : \n\t\treturn n * factorial(n-1)", "category": "Python"}, {"instruction": "Develop a function that converts an array of real numbers to its nearest integer values.", "input": "Array: [3.5, 4.7, 7.9]", "output": "def to_nearest_int(real_num_list):\n    return [round(x) for x in real_num_list] \n\nto_nearest_int([3.5,4.7,7.9])\n\nResult: [4, 5, 8]", "category": "Python"}, {"instruction": "Create a function that takes a 2D array as the argument and returns an array that contains the sums of each row.", "input": "[[0, 2, 3],\n [1, 2, 3],\n [2, 2, 3]\n]", "output": "def row_sum(A): \n    result = [] \n  \n    for row in A: \n        sum = 0  \n        for element in row: \n           sum = sum + element \n        result.append(sum) \n  \n    return result", "category": "Python"}, {"instruction": "Generate an array that contains the first n Fibonacci numbers", "input": "n = 10", "output": "def generate_fibonacci_numbers(n):\n    arr =[0, 1]\n    for i in range (2, n):\n        arr.append(arr[i-1] + arr[i-2])\n    return arr", "category": "Python"}, {"instruction": "Generate an array of length n that contains the square of the numbers from 1 to n.", "input": "n = 10", "output": "def generate_square_numbers(n):\n    arr = []\n    for i in range(1, n+1):\n        arr.append(i*i)\n    return arr", "category": "Python"}, {"instruction": "Create an algorithm to detect whether an array is sorted in a given order.", "input": "array = [1, 2, 4, 7, 10, 11]", "output": "def is_sorted(arr, order = \"asc\"):\n    #check if array is sorted in ascending or descending order\n    if order == \"asc\":\n        for i in range(0, len(arr)-1):\n            if arr[i] > arr[i+1]:\n                return False\n    elif order == \"desc\":\n        for i in range(0, len(arr)-1):\n            if arr[i] < arr[i+1]:\n                return False\n    else:\n        print(\"Error: Invalid sort order!\")\n    return True", "category": "Python"}, {"instruction": "Given a dictionary with keys as strings and values as numbers, calculate the sum of the values", "input": "myDict = {'x': 12, 'y': 23, 'z': 8}", "output": "def sum_of_dict(myDict):\n    result = 0\n    for key in myDict:\n        result += myDict[key]\n    return result\n\nprint(sum_of_dict(myDict))", "category": "Python"}, {"instruction": "Write a Python function to remove the whitespace from the beginning and end of a string", "input": "myStr = \"   hello   \"", "output": "def trim_whitespace(myStr):\n  myStr = myStr.strip()\n  return myStr\n\nprint(trim_whitespace(myStr))", "category": "Python"}, {"instruction": "Create a program to generate the Pascal's triangle", "input": "", "output": "def pascal_triangle(n): \n  \n    # Create an empty list \n    pascal=[]\n  \n    for line in range(1, n+1): \n        l=[1]\n        for i in range(1,line): \n            l.append(pascal[line-2][i-1]+pascal[line-2][i]) \n        l.append(1) \n        pascal.append(l)\n                     \n    return pascal \n  \nprint(pascal_triangle(6))\n# Output -> [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]", "category": "Python"}, {"instruction": "How can you find all the subsets of a set in Python?", "input": "", "output": "In Python, you can use the itertools.combinations module to find all the subsets of a set. The syntax is as follows: \n\nimport itertools\nlist(itertools.combinations(<list or set>, <length of subset>)) \n\nFor example, to find all the subsets of a set [1,2,3] of length 2, you can run: list(itertools.combinations([1,2,3], 2)) // Output -> [(1,2), (1,3), (2,3)]", "category": "Python"}, {"instruction": "Sum the integers from 0 to 10", "input": "", "output": "def sum(start, end):\n    sum = 0\n    for i in range(start, end+1):\n        sum += i\n    return sum\n\nprint(sum(0, 10)) # Output -> 55", "category": "Python"}, {"instruction": "How can you delete an element from a tuple in Python?", "input": "", "output": "You cannot delete an element from a tuple in Python because tuples are immutable. However, you can create a new tuple with all elements except the one you want to delete. For example, if you want to delete the element at index 3, you can create a new tuple by slicing the tuple from 0 to 3 and then adding the remaining elements after index 3. For example:\n\ntup = (1, 2, 3, 4, 5)\ntup = tup[:3] + tup[3+1:]  # Output -> (1, 2, 3, 5)", "category": "Python"}, {"instruction": "Determine whether a given string contains a valid number", "input": "String : abc123", "output": "def is_valid_number(string):\n    for c in string:\n        if not c.isdigit():\n            return False\n    return True\n\nprint(is_valid_number('abc123')) # Output -> False", "category": "Python"}, {"instruction": "Write code to return the kth element in the Fibonacci sequence.", "input": "", "output": "def return_fibonacci(k):\n    a = 0\n    b = 1\n    if k < 0:\n        return \"Incorrect input\"\n    elif k == 0:\n        return a\n    elif k == 1:\n        return b\n    else:\n        for i in range(2, k+1):\n            c = a + b\n            a = b\n            b = c\n        return b", "category": "Python"}, {"instruction": "Create a program to convert a string of ASCII characters to its equivalent decimal value", "input": "String : hello", "output": "def ascii_to_decimal(string):\n    decimal_value = 0\n    for c in string:\n        decimal_value += ord(c)\n    return decimal_value\n\nprint(ascii_to_decimal('hello')) # Output -> 104 101 108 108 111", "category": "Python"}, {"instruction": "Parses the following JSON object and create an object from it.", "input": "{\n  \"name\": \"John\",\n  \"age\": 25,\n  \"address\": \"123 Main Street\"\n}", "output": "import json\n\ndata = {\n  \"name\": \"John\", \n  \"age\": 25,\n  \"address\": \"123 Main Street\"\n}\n\nuserObject = json.loads(data)\nprint(userObject)", "category": "Python"}, {"instruction": "Write a code to encrypt a text using a Ceasar cipher", "input": "", "output": "def ceasar_cipher(plaintext, shift): \n    ciphertext = \"\" \n    for i in range(len(plaintext)): \n        char = plaintext[i] \n        if (char.isupper()): \n            ciphertext += chr((ord(char) + shift - 65) % 26 + 65)\n        else: \n            ciphertext += chr((ord(char) + shift - 97) % 26 + 97)\n    return ciphertext", "category": "Python"}, {"instruction": "Write a piece of code in Python that prints a multiplication table", "input": "", "output": "def multiplication_table(n):\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            print(\"{}x{}={}\".format(i, j, i*j))\n        print(\"\")", "category": "Python"}, {"instruction": "Write a Python program to collect the data from the form below.", "input": "Name: John \nEmail: john@email.com \nPhone: (999)-999-9999", "output": "name = input(\"Name: \")\nemail = input(\"Email: \")\nphone = input(\"Phone: \")\n\ndata = {\n    \"name\": name,\n    \"email\": email,\n    \"phone\": phone\n}", "category": "Python"}, {"instruction": "Construct a Python dictionary with the countries and their total population.", "input": "countries = [\"USA\", \"Canada\", \"India\", \"China\", \"Japan\"]", "output": "population = {\"USA\": 331, \n              \"Canada\": 37, \n              \"India\": 1351, \n              \"China\": 1414, \n              \"Japan\": 126}", "category": "Python"}, {"instruction": "Give an example of inheritance in Python", "input": "", "output": "class Animal:\n  def __init__(self, name):\n    self.name = name\n   \n  def eat(self):\n    print(f\"{self.name} is eating\")\n\nclass Dog(Animal):\n  def bark(self):\n    print(f\"{self.name} is barking\")\n\ndog = Dog(\"Fido\")\ndog.eat()\ndog.bark()\n\n# Output:\n# Fido is eating\n# Fido is barking", "category": "Python"}, {"instruction": "Implement the quicksort algorithm.", "input": "[12, -6, 47, 18, 0, -3]", "output": "def quicksort(alist):\n    quicksort_helper(alist, 0, len(alist)-1)\n\ndef quicksort_helper(alist, first, last):\n    if first < last:\n        splitpoint = partition(alist, first, last)\n        quicksort_helper(alist, first, splitpoint-1)\n        quicksort_helper(alist, splitpoint+1, last)\n\ndef partition(alist, first, last):\n    pivot = alist[first]\n\n    leftmark = first+1\n    rightmark = last\n\n    done = False\n    while not done:\n        while leftmark <= rightmark and alist[leftmark] <= pivot:\n            leftmark = leftmark + 1\n\n        while alist[rightmark] >= pivot and rightmark >= leftmark:\n            rightmark = rightmark - 1\n\n        if rightmark < leftmark:\n            done = True\n        else:\n            temp = alist[leftmark]\n            alist[leftmark] = alist[rightmark]\n            alist[rightmark] = temp\n\n    temp = alist[first]\n    alist[first] = alist[rightmark]\n    alist[rightmark] = temp\n\n    return rightmark", "category": "Python"}, {"instruction": "Create an algorithm that prints the common elements of two arrays.", "input": "arr1 = [3, 10, 15, 7]\narr2 = [7, 8, 5, 10]", "output": "def common_elements(arr1, arr2):\n   result = []\n   for numbers in arr1:\n       if numbers in arr2:\n           result.append(numbers)\n   return result\n\nprint(common_elements(arr1, arr2)) # Output: [7, 10]", "category": "Python"}, {"instruction": "Write a Python program to compute the summation of a list of numbers.", "input": "list = [1, 2, 3, 4, 5]", "output": "def compute_summation(list):\n    result = 0\n    for i in list:\n        result += i\n    return result", "category": "Python"}, {"instruction": "Write a Python program to truncate a string after a given number of characters.", "input": "string = \"Hello World!\", limit = 6", "output": "def truncate_string(string, limit):\n    return string[:limit]", "category": "Python"}, {"instruction": "How can you detect the version of Python installed?", "input": "", "output": "You can detect the version of Python installed by running `python -V` in the command line. This will print the version of Python installed. Alternatively, you can execute `import sys; print(sys.version)` in the Python shell.", "category": "Python"}, {"instruction": "Find all the factors of N (greater than 0), add them together and return the result.", "input": "N = 30", "output": "def sum_factors_of_N(N):\n    sum = 0\n    for i in range(1, N+1):\n        if N % i == 0:\n            sum += i\n    return sum", "category": "Python"}, {"instruction": "Compute the maximum sum of m consecutive values in a given array.", "input": "arr = [2, 6, 1, 3, 7, 4, 9]\nm = 3", "output": "def max_m_consecutive_sum(arr, m):\n    max_sum = 0\n    for i in range(len(arr) - m + 1):\n        curr_sum = 0\n        for j in range(i, i + m):\n            curr_sum += arr[j]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum", "category": "Python"}, {"instruction": "Write a code to generate random words from a given text.", "input": "text = \"Hello World!\"", "output": "import random\n\ndef generate_random_word_from_text(text):\n    words = text.split()\n    return random.choice(words)\n\nif __name__ == '__main__':\n    text = \"Hello World!\"\n    print(generate_random_word_from_text(text))", "category": "Python"}, {"instruction": "Create a dictionary in Python to store the frequency of characters in a string.", "input": "string = \"Hello World!\"", "output": "# Empty dictionary\nfrequencies = {}\n\n# Iterate over each character in the string\nfor char in string:\n    # Check if the character exists as a key in the dictionary\n    if char in frequencies:\n        # Increase the count by 1 if it exists\n        frequencies[char] += 1\n    else:\n        # Set the count to 1 for a new character\n        frequencies[char] = 1", "category": "Python"}, {"instruction": "Create a list comprehension to extract unique characters from a string.", "input": "string = \"Hello World\"", "output": "unique_characters = [char for char in string if string.count(char) == 1]\nprint(unique_characters)", "category": "Python"}, {"instruction": "For the following array of integers, find the number of instances of 6:", "input": "[1,2,3,4,5,6,7,8,9,10,6,6]", "output": "count = 0\nfor i in [1,2,3,4,5,6,7,8,9,10,6,6]:\n    if i == 6:\n        count += 1\nprint (\"Number of instances of 6:\",count)", "category": "Python"}, {"instruction": "Determine if all the elements in a list are unique.", "input": "[3,4,5,5,6]", "output": "def has_unique_elements(arr):\n    unique_elements = set(arr)\n    if len(unique_elements) == len(arr):\n        return True\n    return False", "category": "Python"}, {"instruction": "Write a function to print an array without duplicate elements.", "input": "[4,3,6,5,4,7]", "output": "def remove_duplicates(arr):\n    seen = set()\n    for x in arr:\n        if x not in seen:\n            seen.add(x)\n            print(x)", "category": "Python"}, {"instruction": "Determine the number of ints in a list.", "input": "[2, 5, 7, 3, 8]", "output": "def count_int(arr):\n    count = 0\n    for n in arr:\n        if type(n) == int:\n            count +=1\n    return count", "category": "Python"}, {"instruction": "Print out all even elements in an array.", "input": "[1,2,3,4,5]", "output": "def print_even(arr):\n    even = []\n    for num in arr:\n        if num % 2 == 0:\n            even.append(num)\n    return even", "category": "Python"}, {"instruction": "Compute the sum of each separate element in an array.", "input": "[1,2,3,4]", "output": "def sum_of_elements(arr): \n    total = 0\n    for num in arr: \n        total += num  \n    return total", "category": "Python"}, {"instruction": "Write a code that finds the largest palindromic number in a given array", "input": "[73, 111, 109]", "output": "def largest_palindromic_number(arr):\n    largest = 0\n\n    for i in arr:\n        s = str(i)\n        if s == s[::-1]:\n            largest = max(i, largest) \n    return largest\n\nlargest = largest_palindromic_number([73, 111, 109])\nprint(\"The largest palindromic number is:\", largest)", "category": "Python"}, {"instruction": "Filter the following list of integer using python, so that only the numbers divisible by 2 are left", "input": "[1, 2, 3, 4, 5, 6, 7, 8]", "output": "def filter_list(list): \n    new_list = []\n    for item in list:\n        if item % 2 == 0:\n            new_list.append(item)\n    return new_list \n\nlist = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(filter_list(list))\n\n# Output: [2, 4, 6, 8]", "category": "Python"}, {"instruction": "Using list comprehension, write a Python code to get a list of all possible subsets of the list [1, 2, 3]", "input": "[1, 2, 3]", "output": "subsets = [[x for x in [1, 2, 3]] for y in range(0, 2**len([1, 2, 3]))]", "category": "Python"}, {"instruction": "Implement a method to generate a random password with 8 characters, which at least contain one capital letter, one small letter, and one digit.", "input": "", "output": "import string\nimport random\n\ndef passwordGenerator(length):\n    str = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    passwd = \"\".join(random.choice(str) for x in range(length))\n    if (any(x.isupper() for x in passwd) and any(x.islower() for x in passwd) and any(x.isdigit() for x in passwd)): \n        return passwd\n    else:\n        return passwordGenerator(length)\n\nprint(passwordGenerator(8))", "category": "Python"}, {"instruction": "Using the Python language, sort the following list in ascending order.", "input": "mylist = [5, 2, 3, 1, 4]", "output": "mylist.sort() \n# mylist is now [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Using the Python 3 language, access the second character of the string.", "input": "string = \"Hello!\"", "output": "print(string[1])", "category": "Python"}, {"instruction": "Create a validation function in Python 3 that checks if the value is an integer", "input": "", "output": "def validate_integer(val):\n    if isinstance(val, int):\n        return True\n    else: \n        return False", "category": "Python"}, {"instruction": "Write a Python code that prints the longest continuous increasing sequence of integers within a given list.", "input": "[1, 2, 3, 4, 5, 6, 7, 8, 4, 5, 6, 7, 8, 9]", "output": "def longest_continuous_increasing(arr):\n  \"\"\"Function to return the length of the longest continuous increasing sequence of integers within a given list\n  \n  Args:\n      arr (list): a list of integers\n  \n  Returns:\n      int: the length of the longest continuous increasing sequence\n  \"\"\"\n  n = len(arr)\n  max_len = 0\n  curr_len = 1\n\n  for i in range(1, n): \n    if arr[i] > arr[i-1]: \n      curr_len += 1\n    else: \n      # update current length of the increasing sequence\n      max_len = max(curr_len, max_len) \n      curr_len = 1\n  return max(max_len, curr_len) \n \n# Driver code \narr = [1, 2, 3, 4, 5, 6, 7, 8, 4, 5, 6, 7, 8, 9] \nprint(longest_continuous_increasing(arr)) # Output: 9", "category": "Python"}, {"instruction": "Write a Python program to make a dictionary that contains a number as a key, and its cube as the corresponding value.", "input": "", "output": "def cube_dictionary(n):\n    d = {}\n    for i in range(1, n+1):\n        d[i] = i**3\n    return d", "category": "Python"}, {"instruction": "Design a sorting algorithm to order a list of integers in descending order.", "input": "[4,7,2,8,9,1]", "output": "def descend_sort(nums):\n    for i in range(len(nums)-1): \n      for j in range(i+1,len(nums)): \n        if nums[i]<nums[j]: \n          nums[i],nums[j]=nums[j],nums[i] \n    return nums", "category": "Python"}, {"instruction": "Describe what a hash function is.", "input": "", "output": "A hash function is a function which maps a given input of arbitrary or variable length to a fixed length output. It is deterministic, meaning that the same input will always result in the same output, and it is a one-way function, meaning that it is not possible to reconstruct the input from the output. The main purpose of a hash function is to act as a digital fingerprint for data or messages, allowing them to be quickly compared with other fingerprints to determine whether they are the same or different.", "category": "Python"}, {"instruction": "Explain why object-oriented programming is useful?", "input": "", "output": "Object-oriented programming (OOP) is a programming paradigm that uses objects and their interactions to design applications and computer programs. OOP allows for efficient development and maintenance of large scale software systems by allowing developers to create objects which have their own independent properties and methods. OOP programming also provides for abstraction, which allows for complex software systems to be broken down into simpler, more manageable components. OOP also provides for better code reuse, which allows developers to easily reuse code that has been written before, instead of having to rewrite it from scratch. Finally, OOP allows for better data security, as all data related to an object can be stored in one place and accessed only by that object, which makes it more difficult for malicious actors to access or tamper with a system's data.", "category": "Python"}, {"instruction": "You need to read a code and count the number of lines of code.", "input": "def function(a, b):\n    c = a + b\n    d = a * b\n    return c + d", "output": "def count_lines_of_code(code):\n    lines = code.splitlines()\n    return len(lines)\n\nif __name__ == '__main__':\n    code=\"\"\"\ndef function(a, b):\n    c = a + b\n    d = a * b\n    return c + d\n    \"\"\"\n    print(count_lines_of_code(code))", "category": "Python"}, {"instruction": "Write a code to check if one given string is a substring of another.", "input": "string1=\"programming\"\nstring2=\"gram\"", "output": "def is_substring(string1, string2):\n    return string2 in string1\n\nif __name__ == '__main__':\n    string1=\"programming\"\n    string2=\"gram\"\n    print(is_substring(string1, string2))", "category": "Python"}, {"instruction": "Write a Python expression to compute the exponential of a given number.", "input": "x = 3", "output": "import math\nmath.exp(x)", "category": "Python"}, {"instruction": "Write a Python expression to generate a list containing numbers from 0 to 12 (not including 12).", "input": "", "output": "[x for x in range(0, 12)]", "category": "Python"}, {"instruction": "Write a Python expression to compute the GCD (Greatest Common Divisor) of two numbers.", "input": "a = 10, b = 15", "output": "def compute_gcd(a, b):\n    while b:\n        a, b = b, a % b\n    \n    return a", "category": "Python"}, {"instruction": "Construct correctly a for-loop in Python that iterates 6 times from 0 to 5", "input": "", "output": "for i in range(6):\n    print(i)", "category": "Python"}, {"instruction": "Change the following code so that it will still print the same output but with a better runtime complexity.", "input": "def find_duplicates(list):\n    duplicates = []\n    for i in range(len(list)):\n        current = list[i]\n        for j in range(len(list)):\n            if i != j and list[j] == current:\n                duplicates.append(current)\n    return duplicates", "output": "def find_duplicates(list):\n    duplicates = []\n    seen = set()\n    for i in range(len(list)):\n        current = list[i]\n        if current in seen:\n            duplicates.append(current)\n        else:\n            seen.add(current)\n    return duplicates", "category": "Python"}, {"instruction": "Write a Python program that takes two numbers as input and outputs the greatest common divisor (GCD) between them.", "input": "18 9", "output": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\nx = int(input(\"Enter the first number: \"))\ny = int(input(\"Enter the second number: \"))\n\nprint(\"The GCD of {} and {} is {}\".format(x, y, gcd(x, y)))", "category": "Python"}, {"instruction": "Implement a function to check whether a given array contains an odd number or not.", "input": "array = [2, 3, 5, 9, 22, 13]", "output": "def check_odd(array): \n    for i in array:\n        if (i % 2 != 0):\n            return True\n    return False \n  \narray = [2, 3, 5, 9, 22, 13] \nif (check_odd(array)): \n    print(\"Array contains an odd number\") \nelse: \n    print(\"Array does not contain an odd number\")", "category": "Python"}, {"instruction": "Create a function in Python that takes two list of strings as parameters and returns a third list of strings which are the elements common in both lists.", "input": "list1 = [\"apple\", \"orange\", \"banana\", \"cherry\"] \nlist2 = [\"apple\", \"grapes\", \"banana\", \"watermelon\"]", "output": "def common(list1, list2): \n    ans_list = [] \n    \n    for i in list1: \n        for j in list2: \n            if i == j: \n                ans_list.append(i) \n    return ans_list \n  \nif __name__ == \"__main__\": \n    list1 = [\"apple\", \"orange\", \"banana\", \"cherry\"] \n    list2 = [\"apple\", \"grapes\", \"banana\", \"watermelon\"]\n    print(common(list1, list2)) # ['apple', 'banana']", "category": "Python"}, {"instruction": "Create a machine learning algorithm to classify emails as spam or not spam.", "input": "", "output": "import numpy as np \nfrom sklearn.naive_bayes import MultinomialNB \nfrom sklearn.feature_extraction.text import CountVectorizer \n\n# Create feature vectors \nvectorizer = CountVectorizer() \n\n# Train the model \nclassifier = MultinomialNB() \n\n# training data \ntraining_data = [\n   (\"cheap replica watches\", \"spam\"), \n   (\"click here to win money\", \"spam\"), \n   (\"I like your offer\", \"not spam\")]\n\n# Extract feature vectors \ntrain_features = vectorizer.fit_transform([data[0] for data in training_data]) \n\n# Train classifier \nclassifier.fit(train_features, [data[1] for data in training_data]) \n\n# Test email \ntest_email = \"Click here to get special offers\"\ntest_features = vectorizer.transform([test_email]) \nprediction = classifier.predict(test_features) \n\nif prediction[0] == \"spam\": \n   print(\"Test email is marked as spam\") \nelif prediction[0] == \"not spam\": \n   print(\"Test email is marked as not spam\")", "category": "Python"}, {"instruction": "Construct an algorithm to apply merge sort to an array of integers.", "input": "[1, 10, 2, 5, 8, 7]", "output": "# Python program for Merge Sort\n\n# Merges two subarrays of arr[]. \n# First subarray is arr[l..m] \n# Second subarray is arr[m+1..r] \ndef merge(arr, l, m, r): \n\tn1 = m - l + 1\n\tn2 = r- m \n\n# create temp arrays \n\tL = [0] * (n1) \n\tR = [0] * (n2) \n\n# Copy data to temp arrays L[] and R[] \n\tfor i in range(0 , n1): \n\t\tL[i] = arr[l + i] \n\n\tfor j in range(0 , n2): \n\t\tR[j] = arr[m + 1 + j] \n\n# Merge the temp arrays back into arr[l..r] \n\ti = 0\t # Initial index of first subarray \n\tj = 0\t # Initial index of second subarray \n\tk = l\t # Initial index of merged subarray \n\n\twhile i < n1 and j < n2 : \n\t\tif L[i] <= R[j]: \n\t\t\tarr[k] = L[i] \n\t\t\ti += 1\n\t\telse: \n\t\t\tarr[k] = R[j] \n\t\t\tj += 1\n\t\tk += 1\n\n# Copy the remaining elements of L[], if there \n# are any \n\twhile i < n1: \n\t\tarr[k] = L[i] \n\t\ti += 1\n\t\tk += 1\n\n# Copy the remaining elements of R[], if there \n# are any \n\twhile j < n2: \n\t\tarr[k] = R[j] \n\t\tj += 1\n\t\tk += 1\n\n# l is for left index and r is right index of the \n# sub-array of arr to be sorted \ndef mergeSort(arr,l,r): \n\tif l < r: \n\t\t\n\t\t# Same as (l+r)//2, but avoids overflow for \n\t\t# large l and h \n\t\tm = (l+(r-1))//2\n\t\t\n\t\t# Sort first and second halves \n\t\tmergeSort(arr, l, m) \n\t\tmergeSort(arr, m+1, r) \n\t\tmerge(arr, l, m, r) \n\n# Driver code to test above \narr = [1, 10, 2, 5, 8, 7] \nn = len(arr) \nprint (\"Given array is\") \nfor i in range(n): \n\tprint (\"%d\" %arr[i]), \n\nmergeSort(arr,0,n-1) \nprint (\"\\n\\nSorted array is\") \nfor i in range(n): \n\tprint (\"%d\" %arr[i]), \n\n# This code is contributed by Shreyanshi Arun", "category": "Python"}, {"instruction": "What is principle of DRY (Don\u2019t Repeat Yourself) in coding?", "input": "", "output": "The principle of DRY (Don\u2019t Repeat Yourself) states that code should not be written twice, and instead should be reused. This means that code should be organized such that similar functionalities are grouped together so as to avoid duplication, making the code more efficient, robust, and maintainable. It also allows for code to be more easily refactored in order to correct errors or to add new features.", "category": "Python"}, {"instruction": "Which library should be used to process data in Scala?", "input": "", "output": "The Apache Spark library is the most common library used to process data in Scala. Apache Spark provides an easy-to-use, distributed environment for analytics and data processing applications. It offers APIs in Java, Python, and Scala, allowing users to neatly integrate data processing with high-level programming languages.", "category": "Python"}, {"instruction": "Create a list comprehension that returns the even numbers in a given list.", "input": "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "output": "even_nums = [num for num in my_list if num % 2 == 0]", "category": "Python"}, {"instruction": "Write a Python script to display the numbers from 1 to 10 in ascending order.", "input": "", "output": "for num in range(1, 11):\n    print(num)", "category": "Python"}, {"instruction": "Write a function to convert a string of digits to the corresponding integer value.", "input": "string = \"12345\"", "output": "def toInt(string):\n    number = 0\n    for char in string:\n        number = (number * 10) + int(char)\n    return number\n\n# Test\nprint(toInt(string)) #12345", "category": "Python"}, {"instruction": "Use Python to print a multiplication table for the numbers from 1 to 10.", "input": "", "output": "# Print multiplication table\nfor i in range(1, 11):\n    for j in range(1, 11):\n        print('{0} x {1} = {2}'.format(i, j, i*j))\n    print('\\n')", "category": "Python"}, {"instruction": "Compose an if-else block in Python for checking if a string is empty.", "input": "str1 = \"My String\"\nstr2 = \"\"", "output": "if len(str1) > 0:\n    print(\"Not empty\")\nelse:\n    print(\"Empty\")", "category": "Python"}, {"instruction": "Construct an if-else statement in Python that swaps the values of two variables.", "input": "a = 2\nb = 5", "output": "if a > b:\n    temp = a\n    a = b\n    b = temp\nelse:\n    temp = a\n    a = b\n    b = temp", "category": "Python"}, {"instruction": "Using a while loop in Python, print numbers from 5 to 19.", "input": "", "output": "i = 5\nwhile i < 20:\n    print(i)\n    i += 1", "category": "Python"}, {"instruction": "Formulate a loop in Python that prints 7 to 18.", "input": "", "output": "for i in range(7, 19):\n    print(i)", "category": "Python"}, {"instruction": "Write a Python code snippet to display the multiplication table of 5.", "input": "", "output": "for i in range(1, 11):\n    print(f\"5 * {i} = {5 * i}\")", "category": "Python"}, {"instruction": "Create a script in Python to search a given string for a substring", "input": "string = \"Hello World!\"\nsubstring = \"llo\"", "output": "def searchSubstring(string, substring): \n    results = [] \n    n = len(string) \n    m = len(substring) \n\n    for i in range(n - m + 1): \n        j = 0\n\n        while(j < m): \n            if(string[i + j] != substring[j]): \n                break\n            j += 1\n\n        if j == m: \n            results.append(i)\n  \n    print(results) \n\nstring = \"Hello World!\" \nsubstring = \"llo\"\nsearchSubstring(string, substring)", "category": "Python"}, {"instruction": "Write a function to generate valid random passwords.", "input": "passwordlen = 8", "output": "import string\nimport random\n\ndef generate_password(passwordlen):\n    ''' \n    This function generates a random password of the given length\n    '''\n    code_str = string.ascii_letters + string.digits\n    password = ''.join(random.choice(code_str) for i in range(passwordlen))\n    return password\n\nif __name__ == '__main__':\n    passwordlen = 8\n    print(generate_password(passwordlen))", "category": "Python"}, {"instruction": "Join two dictionaries by adding the values with the same key.", "input": "d1 = {\"a\": 1, \"b\": 2, \"c\": 3}\nd2 = {\"a\": 10, \"d\": 20, \"e\": 30}", "output": "def join_dictionaries(d1, d2):\n    ''' \n    This function joins two dictionaries by adding their values with\n    the same key\n    '''\n    result = {}\n    for k1, v1 in d1.items():\n        result[k1] = v1\n    \n    for k2, v2 in d2.items():\n        if k2 in result.keys():\n            result[k2] += v2\n        else:\n            result[k2] = v2\n            \n    return result\n\nif __name__ == '__main__':\n    d1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n    d2 = {\"a\": 10, \"d\": 20, \"e\": 30}\n    print(join_dictionaries(d1, d2))", "category": "Python"}, {"instruction": "Compute the edits between two strings.", "input": "str1 = \"I am eating\"\nstr2 = \"I am eating a sandwich\"", "output": "def edit_distance(str1, str2):\n    \"\"\"\n    Compute the edit distance between two strings\n    \"\"\"\n    m = len(str1)\n    n = len(str2)\n\n    distance = [[0 for i in range(n+1)] for j in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n\n            # If first string is empty, only option is to insert all characters of second string\n            if i == 0:\n                distance[i][j] = j\n\n            # If second string is empty, only option is to remove all characters of first string\n            elif j == 0:\n                distance[i][j] = i\n\n            # If last characters are same, ignore last char and recur for remaining string\n            elif str1[i-1] == str2[j-1]:\n                distance[i][j] = distance[i-1][j-1]\n\n            # If last characters are not same, consider all possibilities and find minimum\n            else:\n                replace_cost = distance[i-1][j-1] + 1\n                remove_cost = distance[i-1][j] + 1\n                insert_cost = distance[i][j-1] + 1\n                distance[i][j] = min(replace_cost, remove_cost, insert_cost)\n\n    return distance[m][n]\nif __name__ == '__main__':\n    str1 = \"I am eating\"\n    str2 = \"I am eating a sandwich\"\n    print(edit_distance(str1, str2))", "category": "Python"}, {"instruction": "Generate a number in range between 1 to 10  randomly.", "input": "", "output": "import random\n\ndef random_num():\n    return random.randint(1, 10)\n\nif __name__ == '__main__':\n    print(random_num())", "category": "Python"}, {"instruction": "Write an algorithm to calculate the median of a given array.", "input": "Array=[7, 4, 5, 2, 6]", "output": "Step 1: Start \nStep 2: Set an empty array, called median_arr.\nStep 3: Sort the given array.\nStep 4: Check if the length of the array is even or odd. \nStep 5: If even, calculate the average of the middle two elements and store it in median_arr. \nStep 6: If odd, store the middle element in the median_arr.\nStep 7: Return the array median_arr containing the median. \nStep 8: End.", "category": "Python"}, {"instruction": "Write a recursive version of the following code.", "input": "def factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result", "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)", "category": "Python"}, {"instruction": "Develop a logistic regression model using Python to predict the outcome of a binary classification dataset.", "input": "", "output": "import pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n \n# Load the dataset\ndf = pd.read_csv(\"data.csv\")\n \n# Split the data into features (X) and targets (y)\nX= df.drop(\"target\",axis=1)\ny = df[\"target\"]\n \n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2)\n \n# Initialize and fit the logistic regression model\nclf = LogisticRegression().fit(X_train, y_train)\n \n# Make predictions on the test set\npredictions = clf.predict(X_test)", "category": "Python"}, {"instruction": "Implement a Python function to check if an integer is even or odd.", "input": "", "output": "def is_even(num):\n  return num % 2 == 0", "category": "Python"}, {"instruction": "Implement a function in Python that takes two parameters, an array and a number, and sorts the array in ascending order by the number.", "input": "[5, 29, 4, 7, 28], 3", "output": "def sort_array_by_nth_parameter(arr, n):\n  return sorted(arr, key=lambda x: x[n])\n\nnumbers = [5, 29, 4, 7, 28]\nsorted_numbers = sort_array_by_nth_parameter(numbers, 3)\nprint(sorted_numbers)", "category": "Python"}, {"instruction": "Write a function to generate a random password that is 10 characters long.", "input": "", "output": "import random\nimport string\n\ndef generate_password(length):\n    chars = string.ascii_letters + string.digits\n    return ''.join(random.choice(chars) for _ in range(length))\n\nprint(generate_password(10))", "category": "Python"}, {"instruction": "Create an array with 5 elements in Python.", "input": "", "output": "arr = [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Describe what a closure is in programming.", "input": "", "output": "A closure is a special type of function that allows a program to access variables and functions from an outer (or parent) scope, even after that outer scope has been closed or finished executing. The closure essentially \"closes\" the variables and functions from the outer scope, making them available for use in the inner scope of the function.", "category": "Python"}, {"instruction": "Create a Python program to convert an input string to Morse code.", "input": "", "output": "def string_to_morse(user_string):\n morse_code = \"\"\n for ch in user_string:\n if ch.lower() in Morse.alpha:\n morse_code += Morse.alpha[ch.lower()] + \" \"\n return morse_code", "category": "Python"}, {"instruction": "Given an array of numbers, write a Python program to find the second highest element in the array.", "input": "[1, 3, 5, 4, 7, 9]", "output": "def second_highest(arr):\n arr.sort()\n return arr[-2]", "category": "Python"}, {"instruction": "Given a list of strings, write a Python program to remove all duplicates from the list.", "input": "[\u201ccat\u201d, \u201cdog\u201d, \u201ccat\u201d, \u201cparrot\u201d, \u201cgoat\u201d, \u201cdog\u201d]", "output": "def remove_duplicates(list):\n res = [] \n for str in list:\n if str not in res:\n res.append(str)\n return res", "category": "Python"}, {"instruction": "Create a Python program to generate a random 8-character alphanumeric string. The string should contain at least one lowercase letter, one uppercase letter, one digit and one special character.", "input": "", "output": "import string\nimport random\n\ndef generate_random_string():\n chars = string.ascii_letters + string.digits + string.punctuation\n string_length = 8\n random_string = ''.join(random.choice(chars) for _ in range(string_length))\n return random_string", "category": "Python"}, {"instruction": "Use a machine learning model to predict the next number in a given sequence.", "input": "Sequence: [1, 4, 9, 16, 25]", "output": "The next number in the given sequence is 36.\n\nTo use a machine learning model, the dataset should be split into features and labels. The features could be the numbers in the sequence, and the label could be the next number. The model can be trained on this dataset to accurately predict the next number in a sequence.", "category": "Python"}, {"instruction": "Create a low-level PyTorch implementation of the following neural network structure, using the class PyTorch provides.", "input": "Input shape: (300, 100)\n\nOutput shape: (2, 5)", "output": "import torch\n\nclass MyNetwork(torch.nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.fc1 = torch.nn.Linear(300, 150)\n        self.fc2 = torch.nn.Linear(150, 100)\n        self.fc3 = torch.nn.Linear(100, 50)\n        self.fc4 = torch.nn.Linear(50, 5)\n        self.softmax = torch.nn.Softmax(dim=1)\n\n\n    def forward(self, x):\n        x = self.fc1(x)\n        x = self.fc2(x)\n        x = self.fc3(x)\n        x = self.fc4(x)\n        \n        return self.softmax(x)", "category": "Python"}, {"instruction": "Train a neural network using TensorFlow to predict housing prices.", "input": "", "output": "import tensorflow as tf\nimport numpy as np\nfrom tensorflow import keras\n\n# Load the dataset\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.housing_prices.load_data()\n\n# Normalize the input data\nx_train = x_train / 255.0\nx_test = x_test / 255.0\n\n# Build the model\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Flatten(input_shape=(x_train.shape[1], x_train.shape[2])),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(1)\n])\n\n# Compile and fit the model\nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=10)\n\n# Evaluate the model\ntest_loss, test_accuracy = model.evaluate(x_test, y_test)\nprint('Test accuracy {:.2f}%'.format(test_accuracy*100))", "category": "Python"}, {"instruction": "Train a logistic regression model on the housing prices dataset with 5 features.", "input": "", "output": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n#read in the dataset\ndata = pd.read_csv('housing_prices.csv')\n\n#inspect the data\ndata.info()\ndata.describe()\n\n#split the data into train & test\nX = data[['Bedrooms','Bathrooms','Square_Feet','Parking','Yard']]\ny = data['Price']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n#train the logistic regression model\nlogreg = LogisticRegression().fit(X_train, y_train)\n\n#evaluate model performance\nprint(\"Training set score: {:.3f}\".format(logreg.score(X_train, y_train)))\nprint(\"Test set score: {:.3f}\".format(logreg.score(X_test, y_test)))", "category": "Python"}, {"instruction": "Write a Lambda function in Python to generate random numbers in the range of 10 to 50.", "input": "", "output": "import random\ndef random_num():\n    return random.randint(10,50)", "category": "Python"}, {"instruction": "Develop a Python program to calculate the area of a triangle given its three sides.", "input": "", "output": "# Function to calculate area of triangle  \ndef calculateArea(a, b, c): \n     \n    # Calculating the semi-perimeter of triangle  \n    s = (a + b + c) / 2\n  \n    # Calculate the area  \n    area = (s*(s - a)*(s - b)*(s - c)) ** 0.5    \n    \n    return area \n\n# Driver code  \na = 5\nb = 6\nc = 7\nprint(\"Area of triangle is %0.2f\" %calculateArea(a, b, c))", "category": "Python"}, {"instruction": "Construct a Pandas dataframe that contains the average monthly temperatures of a given location over the year.", "input": "", "output": "import pandas as pd\n\n# define the year \nyear = 2020\n\n# define the list of months\nmonths = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n          \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n\n# define the list of temperatures\ntemperatures =[32.2, 37.3, 43.3, 51.4, 63.4, 70.4, \n               72.7, 73.4, 68.7, 56.4, 43.7, 34.2]\n\n# construct the dataframe\ndf = pd.DataFrame({\n    'month': months,\n    'temperature': temperatures\n})\n\n# set the index to the month column\ndf.set_index('month', inplace=True)", "category": "Python"}, {"instruction": "Write a code to create Fibonacci sequence in Python", "input": "", "output": "def Fibonacci(n): \n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else: \n        return Fibonacci(n-1) + Fibonacci(n-2)", "category": "Python"}, {"instruction": "Create a script in Python to sort a given array.", "input": "[1, 5, 4, 3, 6, 2]", "output": "sorted_array = [1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Construct an array which contains the count of each character present in the given string.", "input": "String: \u201cHello world\u201d", "output": "def characterCount(str): \n    # create a dictionary and store count \n    # of every character \n    freq = {} \n  \n    for i in str: \n        if i in freq: \n            freq[i] += 1\n        else: \n            freq[i] = 1\n          \n    # return the dictionary    \n    return freq \n  \n# Driver code \nstr = \"Hello world\"\nprint(characterCount(str))", "category": "Python"}, {"instruction": "Develop an algorithm to traverse a two-dimensional array.", "input": "A two-dimensional array with 3 rows and 4 columns.", "output": "One possible algorithm to traverse a two-dimensional array is an in-place spiral traversal. Start at the top left corner of the array and traverse in a clockwise direction while updating the location at each step. Each time move one step in the direction you are currently going, then turn right and continue in the new direction. When you reach the end of a row or column, turn right and continue in the new direction until you have traversed the entire array. \n\nFor example, for an array of 3 rows and 4 columns: \n\nStep 1: [0, 0] \nStep 2: [0, 1] \nStep 3: [0, 2] \nStep 4: [0, 3] \nStep 5: [1, 3] \nStep 6: [2, 3] \nStep 7: [2, 2] \nStep 8: [2, 1] \nStep 9: [2, 0] \nStep 10: [1, 0] \nStep 11: [1, 1] \nStep 12: [1, 2]", "category": "Python"}, {"instruction": "Assign values to a given linked list", "input": "A linked list with 4 nodes", "output": "class Node: \n    def __init__(self,data): \n        self.data = data\n        self.next = None\n  \nclass LinkedList: \n    def __init__(self):  \n        self.head = None\n  \n    def assignValues(self, dataList): \n        node1 = Node(dataList[0]) \n        node2 = Node(dataList[1]) \n        node3 = Node(dataList[2]) \n        node4 = Node(dataList[3]) \n  \n        self.head = node1 \n        node1.next = node2 \n        node2.next = node3 \n        node3.next = node4 \n\ndataList = [1, 2, 3, 4] \nllist = LinkedList() \nllist.assignValues(dataList)", "category": "Python"}, {"instruction": "Create a program to check if two binary trees are identical.", "input": "", "output": "def is_identical(root1, root2): \n    #Check if root1 and root2 are both none\n    if root1 == None and root2 == None:\n        return True\n    #Check if root1 and root2 are none\n    if root1 == None or root2 == None:\n        return False\n    #Check if their data is same\n    if root1.data == root2.data:\n        #Check if their left subtrees are same\n        left_identical = is_identical(root1.left, root2.left)\n        #Check if their right subtrees are same\n        right_identical = is_identical(root1.right, root2.right)\n        if left_identical and right_identical:\n            return True\n    return False", "category": "Python"}, {"instruction": "Define a tuple in Python.", "input": "", "output": "my_tuple = (1, 2, 3)  # Output: (1, 2, 3)", "category": "Python"}, {"instruction": "Create a class in Python which contains three attributes and a method.", "input": "", "output": "class MyClass:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def get_values(self):\n        return self.x, self.y, self.z", "category": "Python"}, {"instruction": "Use numpy to create a 3x3 matrix full of zeros.", "input": "", "output": "import numpy as np \n  \n  \n# create a 3x3 matrix full of zeros using numpy\nmatrix_zeros = np.zeros( (3,3) )\nprint(matrix_zeros)", "category": "Python"}, {"instruction": "Create a Python program to accept a string from the user and print out the number of vowels in the string.", "input": "Hello World", "output": "def countVowels(str): \n\tvowel = 0\n\tfor i in str: \n\t\tif i.lower() in ['a', 'e', 'i', 'o', 'u']: \n\t\t\tvowel += 1\n\treturn vowel \n\n# Driver code \nstr = \"Hello World\"\nprint(\"Number of vowels are:\", countVowels(str))", "category": "Python"}, {"instruction": "Write a code to print out a multiplication table of a number in Python.", "input": "", "output": "def print_multiplication_table(num): \n    for i in range(1,11):  \n       print(num,'x',i,'=',num*i)\n\nprint_multiplication_table(5) \n# OUTPUT: 5 x 1 = 5\n        5 x 2 = 10\n        5 x 3 = 15\n        5 x 4 = 20\n        5 x 5 = 25\n        5 x 6 = 30\n        5 x 7 = 35\n        5 x 8 = 40\n        5 x 9 = 45\n        5 x 10 = 50", "category": "Python"}, {"instruction": "How would you design a game of hangman using object-oriented programming?", "input": "", "output": "In designing a game of hangman using object-oriented programming, one could create separate classes for a Hangman game, a player, a puzzle, and a set of words. The Hangman class would be responsible for managing the game overall and for handling the interactions between the player and the puzzle. The player class would store the players name, number of guesses, and score. The puzzle class would manage the state of the puzzle and handle updates when new letters are guessed. Finally, the Words class would handle the management and loading of word data.", "category": "Python"}, {"instruction": "Design a Python program to identify odd numbers in a given range.", "input": "10-20", "output": "# set a range for the numbers\nmin = 10\nmax = 20\n\n# iterate and print odd numbers\nfor num in range(min,max+1): \n    if num % 2 != 0: \n        print(num, end=\" \")", "category": "Python"}, {"instruction": "Implement a function in Python to convert a given sentence into title case.", "input": "This is a sentence.", "output": "def to_title_case(sentence):\n    words = sentence.split()\n    titlecase_words = []\n    for word in words:\n        titlecase_words.append(word.title())\n    return ' '.join(titlecase_words)", "category": "Python"}, {"instruction": "Which of the following is a valid operator in Python?", "input": "", "output": "The following are valid Python operators: '+', '-', '*', '/', '%', '//', '**', '&', '|', '^', '<<', '>>'.", "category": "Python"}, {"instruction": "Edit the following code so that it prints an appropriate error message.", "input": "def divide(num1, num2):\n result = num1 // num2\n return result", "output": "def divide(num1, num2):\n if num2 == 0:\n print('Error: Invalid operation. num2 cannot be zero.')\n else:\n result = num1 // num2\n return result", "category": "Python"}, {"instruction": "Write a code to categorize the given number according to their divisibility by a certain number.", "input": "number = 9\ndivisible_number = 3", "output": "def categorize_number_divisibility(number, divisible_number):\n    if number % divisible_number == 0:\n        return 'divisible'\n    else:\n        return 'not divisible'\n        \nnumber = 9\ndivisible_number = 3\nresult = categorize_number_divisibility(number, divisible_number)\nprint(result)", "category": "Python"}, {"instruction": "Write a code to filter out all the words from a input list of strings, containing the letter 'a'.", "input": "words = ['apple', 'book', 'zebra', 'banana', 'ball']", "output": "def filter_words_with_letter_a(words):\n    filtered_words = []\n    for word in words:\n        if 'a' in word:\n            filtered_words.append(word)\n    return filtered_words\n\nwords = ['apple', 'book', 'zebra', 'banana', 'ball']\nresult = filter_words_with_letter_a(words)\nprint(result)", "category": "Python"}, {"instruction": "Create a function to identify whether a given number is a power of two.", "input": "num = 8", "output": "\"\"\"\nFunction to identify whether a given number is a power of two\n\"\"\"\n\nconst isPowerOfTwo = (num) => {\n  let i = 0\n  while (2 ** i <= num) {\n    if (2 ** i === num) {\n      return true\n    }\n    i++\n  }\n  return false\n}\n\nconsole.log(isPowerOfTwo(num)) // true", "category": "Python"}, {"instruction": "Write a code to find the shortest possible palindrome.", "input": "string = 'race'", "output": "\"\"\"\nFunction to find the shortest possible palindrome\n\"\"\"\n\nconst findShortestPalindrome = (string) => {\n  let reversedString = string.split('').reverse().join('')\n  let newString = string + '#' + reversedString\n  let lps = []\n  let i = 1\n  let j = 0\n  while (i < newString.length) {\n    if (newString[i] === newString[j]) {\n      lps[i] = j + 1\n      i++\n      j++\n    } else {\n      if (j !== 0) {\n        j = lps[j - 1]\n      } else {\n        lps[i] = 0\n        i++\n      }\n    }\n  }\n  return string + reversedString.substring(lps[newString.length - 1])\n}\n\nconsole.log(findShortestPalindrome(string)) // 'ecarace'", "category": "Python"}, {"instruction": "Write a Python code to print the multiplication table upto 10.", "input": "", "output": "for i in range(1, 11): \n    for j in range(1, 11): \n     print(i*j, end=\"  \") \n    print()", "category": "Python"}, {"instruction": "Write a Python program to calculate the sum of all integers up to the given number.", "input": "", "output": "def sum_of_integers(num):\n    total = 0\n    for i in range(1, num + 1):\n        total += i\n    return total", "category": "Python"}, {"instruction": "Add a simple login feature to a given website.", "input": "A given website with HTML and CSS content", "output": "To add a simple login feature, you will need to create a page with a form that will take the username and password input from the user. The form should contain an input field for the username, an input field for the password, and a submit button. The page should also include an action link to a page that will process the login information. This page should use server-side code (such as PHP) to check the login credentials entered against a database, and then either allow or deny login depending on the result of that check. Finally, the login form should also contain a link to a forgotten password page to enable users to reset their passwords.", "category": "Python"}, {"instruction": "Write a Python function to calculate the hypotenuse of a right angled triangle given the length of the two sides.", "input": "side1 = 7\nside2 = 5", "output": "import math\ndef calculate_hypotenuse(side1, side2):\n    hypotenuse = math.sqrt(side1**2 + side2**2)\n    return hypotenuse", "category": "Python"}, {"instruction": "Write a Python program to print the Odd numbers from 1 to 50.", "input": "", "output": "for i in range(1, 51):\n    if i%2 == 1:\n        print(i)", "category": "Python"}, {"instruction": "Write a Python program to output an array with dimensions [N, M] filled with random numbers between 0 and 1", "input": "N = 5\nM = 4", "output": "import numpy as np\nnp.random.seed(0)\nnums=np.random.rand(N,M)\nprint(nums)", "category": "Python"}, {"instruction": "Create a function that takes a number and checks if it is even or odd.", "input": "", "output": "def check_even_odd(num):\n    \"\"\"\n    Takes a number and checks if it is even or odd.\n    \"\"\"\n    if num % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"", "category": "Python"}, {"instruction": "Write a code to construct a new array with the elements reversed.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def reverse_array(arr):\n    \"\"\"\n    Construct a new array with the elements reversed.\n    \"\"\"\n    new_arr = []\n    for i in range(len(arr)-1, -1, -1):\n        new_arr.append(arr[i])\n    return new_arr", "category": "Python"}, {"instruction": "Construct a loop in Python that iterates through each row of a dataframe", "input": "Dataframe: df", "output": "for index, row in df.iterrows(): \n    # do something with each row", "category": "Python"}, {"instruction": "Create a program which takes an array of integers and an integer as input, and returns the index of the integer in the array.", "input": "array = [1, 2, 3, 4];\nnumber = 3;", "output": "def indexof(nums, target): \n    for i in range(len(nums)): \n        if nums[i] == target: \n            return i \n    return -1", "category": "Python"}, {"instruction": "Explain what a Python dictionary is.", "input": "", "output": "\"\"\"\nExplain what a Python dictionary is.\n\"\"\"\n\nA Python dictionary is a collection of key-value pairs. Each key is associated with a single value, and each key is unique. Dictionaries are mutable, meaning that their values can be changed after they are created. Dictionaries are commonly used for storing data in a structured form, as well as for rapidly looking up values associated with a given key. They are also commonly used for storing metadata and other related information.", "category": "Python"}, {"instruction": "Split a string in such a way that all spaces, punctuation, and special characters are removed from the output.", "input": "mystring = 'My,string:is-Awes 0me*!'", "output": "\"\"\"\nSplit a string in such a way that all spaces, punctuation, and special characters are removed from the output.\n\"\"\"\n\ndef split_string(mystring):\n    \"\"\"\n    This function splits the string into words, removing all of the\n    spaces, punctuation, and special characters.\n    \"\"\"\n    # Remove all non-alphanumeric characters\n    mystring = ''.join(c for c in mystring if c.isalnum())\n\n    # Split the string into words\n    words = mystring.split()\n\n    return words\n\nif __name__ == \"__main__\":\n    mystring = 'My,string:is-Awes 0me*!'\n    print(split_string(mystring))", "category": "Python"}, {"instruction": "Implement a function that copies a 2D array.", "input": "array = [[1, 2, 3], [4, 5, 6]]", "output": "\"\"\"\nFunction to copy a 2D array.\n\"\"\"\ndef copy_2d_array(arr):\n    \"\"\"Returns a copy of the given 2D array.\"\"\"\n    copied_arr = []\n    for sublist in arr:\n        copied_arr.append(list(sublist))\n    return copied_arr\n\nif __name__ == \"__main__\":\n    array = [[1, 2, 3], [4, 5, 6]]\n    print(copy_2d_array(array))", "category": "Python"}, {"instruction": "Write a Python function to edit a given list by replacing an existing element with a new value.", "input": "mylist = [\"Apple\", \"Banana\", \"Cherry\"]\nold_value = \"Banana\"\nnew_value = \"Strawberry\"", "output": "def replace_value(mylist, old_value, new_value):\n    if old_value in mylist:\n        mylist[mylist.index(old_value)] = new_value\n    return mylist", "category": "Python"}, {"instruction": "Convert the given JSON data into an Excel spreadsheet.", "input": "{\n  \"products\": [\n    {\n      \"id\": 1,\n      \"name\": \"Apple\",\n      \"price\": 3.50\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Orange\",\n      \"price\": 2.50\n    },\n    {\n      \"id\": 3,\n      \"name\": \"Banana\",\n      \"price\": 1.25\n    }\n  ]\n}", "output": "Using a programming language such as Python, first use the JSON library to decode the JSON data. Then use a library such as Openpyxl or XlsxWriter to write the data from the JSON object into an Excel spreadsheet.", "category": "Python"}, {"instruction": "Construct a for loop in Python for summing up the elements of a given list.", "input": "List of integers: [1, 2, 3, 4, 5]", "output": "total = 0\nfor i in [1, 2, 3, 4, 5]:\n total += i\nprint(total)\n\n# the output will be 15", "category": "Python"}, {"instruction": "Create a Python program to check if all items in a list are unique.", "input": "list_items = [1,2,3,2,3]", "output": "def is_unique(list_items):\n  s = set(list_items)\n  if len(list_items) == len(s):\n    return True\n  else:\n    return False\n\nprint(is_unique(list_items))\n\n# The output will be False", "category": "Python"}, {"instruction": "Create a class that implements a set data structure.", "input": "", "output": "class Set:\n    def __init__(self):\n        self.elements = []\n\n    def add(self, element):\n        if element not in self.elements:\n            self.elements.append(element)\n\n    def remove(self, element):\n        if element in self.elements:\n            self.elements.remove(element)", "category": "Python"}, {"instruction": "Write an algorithm to split a given list into two sublists with equal sums", "input": "[1, 4, 2, 5, 3]", "output": "def find_sublist(lst):\n    total_sum = sum(lst)\n    half = total_sum//2\n    taken = [False]*len(lst)\n    curr_sum = lst[0]\n    taken[0] = True\n    idx = 0\n    flag = False\n    for i in range(1, len(lst)):\n        if curr_sum < half:\n            taken[i] = True\n            curr_sum += lst[i]\n            flag = True\n        else:\n            if not flag:\n                taken[i] = True\n                curr_sum += lst[i]\n                flag = True\n            continue\n    list1 = list2 = []\n\n    for k in range(len(lst)):\n        if taken[k]:\n            list1.append(lst[k])\n        else:\n            list2.append(lst[k])\n    return list1, list2", "category": "Python"}, {"instruction": "Implement a function to implement Bubble Sort.", "input": "", "output": "def bubbleSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [64, 34, 25, 12, 22, 11, 90] \n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "category": "Python"}, {"instruction": "Write a function that takes an array of numbers and prints out all the pairs of numbers whose sum is equal to a given number.", "input": "targetSum = 8 \nnumbers = [1,9,4,3,8]", "output": "def print_pairs_with_sum(numbers, targetSum): \n    for i in range(len(numbers)): \n        for j in range(i + 1, len(numbers)): \n            if (numbers[i] + numbers[j] == targetSum):\n                print (\"(\", numbers[i], \",\", numbers[j], \")\")", "category": "Python"}, {"instruction": "What is the difference between len() and index() methods in Python?", "input": "", "output": "The len() method returns the length of a string, while the index() method returns the index of a substring or character in the string. The len() method returns the number of characters or elements in the string, while the index() method returns the starting index of the substring in the string.", "category": "Python"}, {"instruction": "What is the data type of a variable that can only contain boolean values in Python?", "input": "", "output": "The data type of a variable that can only contain boolean values in Python is a bool.", "category": "Python"}, {"instruction": "Create a Python function 'findPattern' with two parameters which takes two strings and returns 1 if the second string is a subsequence of the first string, otherwise 0.", "input": "", "output": "def findPattern(str1, str2): \n \n    ind = 0\n    for ch in str2: \n        if ch not in str1[ind:]: \n            return 0\n  \n        ind = str1.index(ch, ind) + 1\n \n    return 1\n  \n# Driver code \nif findPattern(\"timetopractice\", \"top\"): \n    print(\"Subsequence Found\") \nelse: \n    print(\"Subsequence Not Found\")", "category": "Python"}, {"instruction": "Create a Python function that takes two arguments: a list and an integer. The function should add the given integer to each element of the list and return the new list.", "input": "list = [2, 3, 5]\ninteger = 4", "output": "def addToList(list, int):\n    new_list = []\n    for l in list:\n        new_list.append(l + int)\n    return new_list\n\nresult = addToList(list, integer)\nprint(result) # [6, 7, 9]", "category": "Python"}, {"instruction": "Using the 'arrays' library in Python, generate a random array of 10 numbers.", "input": "", "output": "import numpy as np\n\nrandom_array = np.random.random_integers(1,10,10)\nprint(random_array)", "category": "Python"}, {"instruction": "Create a class in python with 4 functions.", "input": "", "output": "class MyClass:\n  def __init__(self):\n    pass\n\n  def function1(self):\n    pass\n\n  def function2(self):\n    pass\n  \n  def function3(self):\n    pass\n  \n  def function4(self):\n    pass", "category": "Python"}, {"instruction": "Write a Python script to find the area of a triangle with sides 18, 24, and 30.", "input": "", "output": "def triangle_area(a, b, c):\n    '''This function computes the area of a triangle given its side lengths.'''\n    # Calculate semi-perimeter\n    s = (a + b + c) / 2\n    # Calculate the area\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return area\n\nprint(\"The area of the triangle is:\", triangle_area(18, 24, 30))", "category": "Python"}, {"instruction": "Create a program that will take a number from the user and print out whether the number is odd or even.", "input": "", "output": "# Take a number from user \nnum = int(input(\"Enter a number: \")) \n\n# Check whether the number is odd or even \nif num % 2 == 0: \n    print(\"Number is even.\")\nelse:\n    print(\"Number is odd.\")", "category": "Python"}, {"instruction": "Create a program that prompts the user to enter two strings. The program will compare the two strings and, if the two strings are the same, print out \"Equal strings\" otherwise, print out \u201cUnequal strings\u201d", "input": "", "output": "# Take two strings from user \nstr1 = input('Enter first string: ') \nstr2 = input('Enter second string: ') \n\n# Compare strings \nif str1 == str2: \n    print (\"Equal strings\") \nelse : \n    print (\"Unequal strings\")", "category": "Python"}, {"instruction": "From the provided input, create a program name \"shopping.py\" that prompts the user to enter a price and prints out the amount of discount the user gets. The discount rate is 10%.", "input": "", "output": "# shopping.py\nprice = float(input(\"Enter the price: \")) \ndiscount = price * 0.10 \nprint(\"Discount:\", discount)", "category": "Python"}, {"instruction": "Write a Python program to convert Fahrenheit to Celsius for a temperature of 56.4F.", "input": "", "output": "F = 56.4\nC = (F - 32) * 5/9\nprint(\"Fahrenheit to Celsius:\", C)", "category": "Python"}, {"instruction": "Create a function to return the minimum value in a given array and output it.", "input": "[6, 3, 9, 5, 8, -2, 10]", "output": "def minimum_value(A):\n    min=-float('inf')\n    for a in A: \n        if a < min:\n            min = a\n    return min\n\nprint(minimum_value([6, 3, 9, 5, 8, -2, 10]))\n\n# Output: -2", "category": "Python"}, {"instruction": "Produce a program that takes in two strings and check if they are anagrams.", "input": "silent and listen", "output": "def is_anagram(s1, s2):\n    if sorted(s1) == sorted(s2):\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Develop a program that takes in two numbers and returns the bigger one.", "input": "2 and 3", "output": "def max_num(a,b):\n    if a > b:\n        return a\n    else:\n        return b", "category": "Python"}, {"instruction": "Create an algorithm that takes in an array of strings and returns a new array containing only the strings that start with the letter \"a\".", "input": "[apple, banana, alabama, arkansas]", "output": "def start_with_a(arr):\n    new_arr = []\n    for s in arr:\n        if s[0] == 'a':\n            new_arr.append(s)\n    return new_arr", "category": "Python"}, {"instruction": "Create an algorithm that takes in two sorted arrays and merges them together.", "input": "arr1 = [1,3,5,7,9]\narr2 = [2,4,6,8,10]", "output": "def merge_arrays(arr1, arr2):\n    merged = []\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n    return merged", "category": "Python"}, {"instruction": "Write a function that takes in an array of integers and returns a string with each number in reverse order.", "input": "[1,2,3,4,5]", "output": "def reverse_string(arr):\n    res = ''\n    for num in arr:\n        res = str(num) + res\n    return res", "category": "Python"}, {"instruction": "Sort an array of integers in ascending order by implementing a Bubble Sort algorithm.", "input": "unsorted_list = [8, 5, 3, 1, 9, 6, 0, 7, 4, 2, 5]", "output": "def bubble_sort(nums): \n  # Traverse through all array elements \n  for i in range(len(nums)): \n    # Last i elements are already in place \n    for j in range(0, len(nums)-i-1): \n      # traverse the array from 0 to n-i-1 \n      # Swap if the element found is greater \n      # than the next element \n      if nums[j] > nums[j+1] : \n        nums[j], nums[j+1] = nums[j+1], nums[j]\n\n# Print the sorted array \nif __name__ == '__main__': \n    bubble_sort(unsorted_list) \n    print (\"Sorted array is:\") \n    print(unsorted_list)", "category": "Python"}, {"instruction": "How to extract numbers from a given string in Python?", "input": "", "output": "Using the regular expression library re in Python, you can extract numbers from a given string. For example,\n\nimport re\n\nstring = \"My age is 22 and my lucky number is 7\"\n\nmatches = re.findall(r'\\d+', string)\n# matches will be [22, 7]", "category": "Python"}, {"instruction": "Rewrite this function in Python to take advantage of list comprehensions.", "input": "def double_list(original_list):\n    doubled_list = []\n    for item in original_list:\n        doubled_list.append(item * 2)\n    return doubled_list", "output": "def double_list(original_list):\n    return [item * 2 for item in original_list]", "category": "Python"}, {"instruction": "Find the shortest path between two nodes using Dijkstra's algorithm", "input": "A graph with 5 nodes and 7 edges", "output": "import networkx as nx\n\nG = nx.DiGraph()\n\nG.add_nodes_from([1,2,3,4,5])\n\nG.add_edge(1,4,weight=4)\nG.add_edge(1,2,weight=7)\nG.add_edge(1,3,weight=2)\nG.add_edge(2,3,weight=6)\nG.add_edge(2,5,weight=5)\nG.add_edge(3,4,weight=3)\nG.add_edge(3,5,weight=2)\nG.add_edge(4,5,weight=2)\n\nstart = 1\nend = 5\n\nshortest_path = nx.dijkstra_path(G, start, end, weight='weight')\n\nprint('Shortest path from node 1 to node 5 is:', shortest_path)", "category": "Python"}, {"instruction": "Edit this Python program so that it logs a message whenever an error occurs.", "input": "def divide_nums(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError as e:\n        print('Error:', e)", "output": "def divide_nums(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError as e:\n        print('Error:', e)\n        logging.error('An error occurred during division.')", "category": "Python"}, {"instruction": "Create a script in Python to convert fahrenheit temperatures to celsius.", "input": "", "output": "def fahren_to_celsius(fahren):\n    celsius = (fahren - 32) * (5 / 9)\n    return celsius\n\nprint(fahren_to_celsius(50)) \n\n# Output: 10.0", "category": "Python"}, {"instruction": "Create a 3D array of size 3 x 3 x 3 which contains all elements equal to 0.", "input": "", "output": "import numpy as np\narr = np.zeros((3, 3, 3))\nprint(arr)", "category": "Python"}, {"instruction": "Construct an artificial neural network of 3-layers to classify handwritten digits.", "input": "", "output": "import numpy as np\nfrom tensorflow.keras.utils import to_categorical\n\n# Create a 3-layer neural network\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(10, input_dim=784, activation='relu'))\nmodel.add(tf.keras.layers.Dense(50, activation='relu'))\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))\n\n# Compile the model\nmodel.compile(\n\toptimizer='adam',\n\tloss='categorical_crossentropy',\n\tmetrics=['accuracy']\n)\n\n# Train the model\nmodel.fit(x_train, y_train, epochs=30, batch_size=128)", "category": "Python"}, {"instruction": "Write a Python algorithm to search a list of numbers for the index of the given element.", "input": "nums = [5,7,11,23,44,30]\nx = 11", "output": "def search(nums, x):\n    for i, n in enumerate(nums):\n        if n == x:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Make the following Python function for generating powerset.", "input": "", "output": "def powerset(s):\n    result = [[]]\n    for x in s:\n        result.extend([y + [x] for y in result])\n    return result", "category": "Python"}, {"instruction": "Suggest a completion for the following Python code to find the depth of a given binary tree.", "input": "class Node:\n    def __init__(self, data):\n        self.left = None\n        self.right = None\n        self.data = data\n\ndef maxDepth(node):", "output": "class Node:\n    def __init__(self, data):\n        self.left = None\n        self.right = None\n        self.data = data\n\ndef maxDepth(node):\n    if node is None:\n        return 0\n    else:\n        leftDepth = maxDepth(node.left)\n        rightDepth = maxDepth(node.right)\n\n        if leftDepth > rightDepth: \n            return leftDepth+1\n        else: \n            return rightDepth+1", "category": "Python"}, {"instruction": "Show an example of using the Python module, os.", "input": "", "output": "import os\n\ndirectory = os.getcwd() \nprint(\"The current working directory is\", directory)\n\nfiles = os.listdir(directory) \nprint(\"The files in the current directory are\", files)\n\nfor file in files:\n    if file.endswith(\".py\"):\n        print(\"The Python script\", file, \"is in the current directory\")", "category": "Python"}, {"instruction": "Given a sorted array of size n, create a program to return the kth smallest element.", "input": "", "output": "def findKthSmallestElement(arr, n, k): \n  \n    # To return kth smallest element in \n    # the given array \n    return arr[k-1]", "category": "Python"}, {"instruction": "Create a Django model class to represent a User.", "input": "", "output": "from django.db import models\n\nclass User(models.Model):\n    first_name = models.CharField(max_length=50)\n    last_name = models.CharField(max_length=50)\n    email = models.EmailField(unique=True)\n    birth_date = models.DateField()\n    is_active = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)", "category": "Python"}, {"instruction": "Compare the performance of quicksort, mergesort and heapsort on an unsorted array of size 1000.", "input": "", "output": "Quick sort is the fastest amongst quicksort, mergesort, and heapsort. It is an efficient, widely-used sorting algorithm. Quicksort is typically faster than mergesort and heapsort for sorting an unsorted array of size 1000. The worst-case performance of quicksort is O(n^2) and the average-case performance is O(nlogn).\n\nMergesort is an efficient sorting algorithm with worst-case performance of O(nlogn) and the average-case performance of O(nlogn). It is a stable sort, meaning that the relative order of equal sort items is preserved. Mergesort is slower than quicksort for sorting an unsorted array of size 1000 because it has a higher memory footprint due to the need to split and merge the input array.\n\nHeapsort is an efficient sorting algorithm with worst-case performance of O(nlogn) and the average-case performance of O(nlogn) as well. Like quicksort, it is an in-place algorithm, meaning that it does not require additional space for the result. Heapsort is slower than quicksort and mergesort for sorting an unsorted array of size 1000 because it requires more complex data structures and operations to build the heap and find the max or min elements.", "category": "Python"}, {"instruction": "Write a function to check if a string contains either 'a' or 'e' or 'i' or 'o' or 'u'.", "input": "", "output": "def contains_vowel(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in string.lower():\n        if char in vowels:\n            return True\n    return False", "category": "Python"}, {"instruction": "Given a list of numbers, write a function that returns the index of minimum element.", "input": "[22, 11, 13, 66]", "output": "def min_index(list):\n    min_val = list[0]\n    min_index = 0\n    for i, val in enumerate(list):\n        if val < min_val:\n            min_val = val\n            min_index = i\n    return min_index", "category": "Python"}, {"instruction": "Create a function to check an array of strings and return a list of strings that have length of 5.", "input": "[\"Ironman\", \"Spiderman\", \"Hulk\", \"Captain America\", \"Thor\"]", "output": "def filter_5_length(arr):\n    res = []\n    for string in arr:\n        if len(string) == 5:\n            res.append(string)\n    return res", "category": "Python"}, {"instruction": "Write a function that takes an array of integers and returns an array of the same size with each element equal to the product of all the elements in the original array except itself.", "input": "[1, 2, 3]", "output": "def product_array(arr):\n    res = []\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    for i in range(len(arr)):\n        res.append(int(product/arr[i]))\n    return res", "category": "Python"}, {"instruction": "Count the number of times the letter \"o\" appears in this string.", "input": "\"Hello, World!\"", "output": "string = \"Hello, World!\"\ncount = 0\nfor char in string: \n    if char == 'o': \n        count += 1\nprint(count)", "category": "Python"}, {"instruction": "Generate a function in Python to print all prime numbers in a given range.", "input": "", "output": "def print_prime_numbers(start, end): \n      \n    for i in range(start, end + 1): \n        if is_prime_number(i): \n            print(i, end = \" \")\n  \ndef is_prime_number(num): \n      \n    if num > 1: \n          \n        # Iterate from 2 to n / 2  \n        for i in range(2, num//2):  \n            if (num % i) == 0: \n                return False\n        return True\n    else: \n        return False", "category": "Python"}, {"instruction": "Create an algorithm for finding the factorial of a number using a for loop.", "input": "", "output": "def factorial(num):\n    final_factorial = 1\n    for i in range(1, num + 1):\n        final_factorial *= i\n    return final_factorial", "category": "Python"}, {"instruction": "Remove the element at a given index from an array.", "input": "arr = [4, 10, 15, 23, 0]\nindex = 3", "output": "def removeIndex(arr, index):   \n    if index < 0 or index >= len(arr): \n        return arr \n    \n    arr.pop(index)  \n    return arr\n\n# driver code\narr = [4, 10, 15, 23, 0]\nindex = 3\nprint(\"Array after removing element at index 3 is:\", removeIndex(arr, index))", "category": "Python"}, {"instruction": "Write a code to replace a substring inside a string with another substring.", "input": "string = \"I am coding in python\"\nsubstring1 = \"coding\"\nsubstring2 = \"hacking\"", "output": "def replaceSubstring(string, substring1, substring2): \n    string = string.replace(substring1, substring2) \n    return string  \n  \n# Driver code\nstring = \"I am coding in python\"\nsubstring1 = \"coding\"\nsubstring2 = \"hacking\"\nprint(\"String after replacement is:\", replaceSubstring(string, substring1, substring2))", "category": "Python"}, {"instruction": "Compare two strings and output true if they are an anagram.", "input": "s1 = \"listen\"\ns2 = \"silent\"", "output": "def isAnagram(s1, s2): \n  \n    # Get lengths of both strings \n    n1 = len(s1) \n    n2 = len(s2) \n  \n    # If lengths of both strings are not same, then they are not anagram \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    s1 = sorted(s1) \n    s2 = sorted(s2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if s1[i] != s2[i]: \n            return False\n  \n    return True\n\n# driver code\ns1 = \"listen\"\ns2 = \"silent\"\nprint(\"The two strings are anagrams:\", isAnagram(s1, s2))", "category": "Python"}, {"instruction": "Write a function to search for an input string in a given paragraph.", "input": "Paragraph:The quick brown fox jumps over the lazy dog\nString: brown", "output": "def searchString(para, string):\n    for word in para.split(): \n        if word == string:\n            return True \n    return False", "category": "Python"}, {"instruction": "Using data from the Wikipedia API, write a Python program to list the population of India.", "input": "", "output": "import json\nimport requests\n\nurl = 'https://en.wikipedia.org/w/api.php?action=query&format=json&prop=revisions&titles=India'\nresponse = requests.get(url)\ndata = json.loads(response.text)\npopulation = data['query']['pages']['571045']['revisions'][0]['*'].split('\\n')[3].split('=')[1].strip().split('|')[0]\nprint('The population of India is', population)", "category": "Python"}, {"instruction": "Build a classifier in Python using the Scikit-learn library.", "input": "", "output": "# Load the libraries\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\n\n# Split the data\nX = data.iloc[:, :-1]\ny = data.iloc[:, -1]\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, random_state=42)\n\n# Train the model\nsvm_model = SVC(gamma='auto')\nsvm_model.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_predictions = svm_model.predict(X_test)\n\n# Evaluate Model Performance\nprint(\"Accuracy:\", metrics.accuracy_score(y_test, y_predictions))", "category": "Python"}, {"instruction": "Rock-paper-scissors is a classic two player game. Create a program to generate all the possible outcomes of individual rounds in Rock Paper Scissors.", "input": "", "output": "def generate_outcomes():\n    outcomes = []\n    for p1 in ['rock', 'paper', 'scissors']:\n        for p2 in ['rock', 'paper', 'scissors']:\n            outcomes.append((p1, p2))\n    return outcomes", "category": "Python"}, {"instruction": "Given a list of numbers, return the list with each number multiplied by two.", "input": "[2, 4, 6, 8]", "output": "def double_list(nums):\n    return [num * 2 for num in nums]", "category": "Python"}, {"instruction": "Construct a program to shuffle the content of a list.", "input": "", "output": "import random\ndef shuffle_list(lst):\n    for i in range(len(lst)-1, 0, -1):\n        j = random.randint(0, i)\n        lst[i], lst[j] = lst[j], lst[i]\n    return lst", "category": "Python"}, {"instruction": "Create a program that implements a queue.", "input": "", "output": "class Queue:\n    def __init__(self):\n        self.queue = []\n \n    def enqueue(self, data):\n        self.queue.append(data) \n \n    def dequeue(self):\n        return self.queue.pop(0)\n \n    def is_empty(self):\n        return len(self.queue) == 0", "category": "Python"}, {"instruction": "Generate a function in Python that takes a number and a list as input and finds the number of occurrences of the number in the list.", "input": "", "output": "def count_occurrence(number, input_list):\n    return input_list.count(number)", "category": "Python"}, {"instruction": "Construct a Python class to model a circle.", "input": "", "output": "class Circle: \n    def __init__(self, radius, color): \n        self.radius = radius \n        self.color = color \n  \n    def getArea(self): \n        return 3.14 * self.radius * self.radius \n  \n    def getCircumference(self): \n        return 2 * 3.14 * self.radius", "category": "Python"}, {"instruction": "Create an algorithm to compress a string by removing consecutive duplicate characters.", "input": "string = \"aabcccccaaa\"", "output": "def compress_string(string):\n    current_char = string[0]\n    compressed_string = current_char\n    count = 1\n\n    for char in string[1:]:\n        if char == current_char: \n            count += 1\n        else: \n            compressed_string = compressed_string + str(count) + char\n            current_char = char \n            count = 1\n    compressed_string = compressed_string + str(count)\n    return compressed_string\n\nprint(compress_string(string))\n\n# Output: a2b1c5a3", "category": "Python"}, {"instruction": "Write a code in Python to output all the combinations of two given lists.", "input": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]", "output": "combinations = []\nfor i in list1:\n    for j in list2:\n        combinations.append([i, j])\n\nprint(combinations)\n\n# Output: [[1, 4], [1, 5], [1, 6], [2, 4], [2, 5], [2, 6], [3, 4], [3, 5], [3, 6]]", "category": "Python"}, {"instruction": "Generate an array of increasing numbers beginning from 1 of length n.", "input": "n=5", "output": "def generate_array(n):\n    \"\"\"\n    Generate an array of increasing numbers beginning from 1 of length n\n    \"\"\"\n    return [i for i in range(1, n+1)]\n\n\nprint(generate_array(5))", "category": "Python"}, {"instruction": "Write a code to search a list of integers and print the index of the first matched item.", "input": "nums=[4, 7, 1, 2, 5], target=7", "output": "def search_list(nums, target):\n    \"\"\"\n    Function to search a list of integers and print the index of the first matched item \n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1\n\nprint(search_list([4, 7, 1, 2, 5], 7))", "category": "Python"}, {"instruction": "Generate a random string with the specified length n.", "input": "n=10", "output": "import string\nimport random\n\ndef generate_random_string(n):\n    \"\"\"\n    Generate a random string with the length n \n    \"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=n))\n\nprint(generate_random_string(10))", "category": "Python"}, {"instruction": "Write a Python program to calculate the hypotenuse of a right triangle with base and Height of 8 and 6 respectively.", "input": "", "output": "base = 8\nheight = 6\nhypotenuse = (base**2 + height**2)**0.5\nprint(hypotenuse) // Output: 10.0", "category": "Python"}, {"instruction": "Write a Python function to shuffle (randomly reorder) a list of numbers", "input": "nums = [1, 2, 3, 4, 5]", "output": "def shuffle_nums(nums):\n    from random import shuffle\n    shuffle(nums) \n    return nums", "category": "Python"}, {"instruction": "Given a list of strings and a single character, write a Python function to return the count of strings containing that character.", "input": "strings = [\"Hello\", \"World\", \"Cat\", \"Dog\", \"Elephant\"] \ncharacter = \"e\"", "output": "def count_character_in_strings(strings, character): \n  count = 0\n  for string in strings:\n    if character in string.lower():\n      count += 1\n  return count", "category": "Python"}, {"instruction": "Create an array containing the alphabet in lowercase in Python.", "input": "", "output": "Using the string.ascii_lowercase constant, an array containing the alphabet in lowercase can be created.\n\nExample:\n\nimport string \nalphabet_array = list(string.ascii_lowercase) \nprint(\"Array containing the alphabet in lowercase:\", alphabet_array) \n\n# Output: Array containing the alphabet in lowercase: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']", "category": "Python"}, {"instruction": "Write a function that uses recursion to return the Fibonacci of a given number.", "input": "", "output": "def fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\")\n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2)", "category": "Python"}, {"instruction": "Generate an array of numbers containing only prime numbers between 10 and 50.", "input": "", "output": "def prime_numbers():\n    prime_nums = []\n    for i in range(10, 50):\n        is_prime = True\n        for j in range(2, i):\n            if i%j ==0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_nums.append(i)\n    return prime_nums", "category": "Python"}, {"instruction": "Write an expression in Python to remove all punctuation from a given string.", "input": "string = \"This, is a test string!\"", "output": "import re\n\nstring = re.sub(r'[^\\w\\s]','',string)\n\nprint(string) # Output: This is a test string", "category": "Python"}, {"instruction": "Edit the given function so that it returns the sum of all numbers in the input array.", "input": "def get_sum(arr):\n    return arr[0]", "output": "def get_sum(arr):\n    sum = 0\n    for item in arr:\n        sum += item\n    return sum", "category": "Python"}, {"instruction": "Write a Python program that adds two numbers and multiplies them.", "input": "4, 6", "output": "num1 = 4\nnum2 = 6\n\nresult = (num1 + num2) * num2\n\nprint(result)", "category": "Python"}, {"instruction": "Create a function to perform recursive binary search in a sorted array", "input": "", "output": "#returns the index of the target, if it is found\ndef binary_search(arr,left,right,target):\n    # Check base case \n    if right >= left:\n        mid = left + (right - left) // 2 \n  \n        # If element is present at the middle itself \n        if arr[mid] == target:\n            return mid \n          \n        # If element is smaller than mid, then it  \n        # can only be present in left subarray\n        elif arr[mid] > target:\n            return binary_search(arr, left, mid-1,target)\n       \n        # Else the element can only be present  \n        # in right subarray\n        else:\n            return binary_search(arr, mid + 1, right,target) \n\n    else: \n        # Element is not present in the array \n        return -1", "category": "Python"}, {"instruction": "Generate a code to extract the key-value pairs from a JSON string", "input": "", "output": "def extract_key_value_pairs(json_string):\n    data = json.loads(json_string)\n    \n    key_value_pairs = {}\n    \n    for key,value in data.items():\n        key_value_pairs[key] = value\n        \n    return key_value_pairs", "category": "Python"}, {"instruction": "Create a function to determine if a String contains a valid US phone number", "input": "", "output": "def isValidPhoneNumber(s):\n    # strip all the non-numeric characters\n    nums = ''.join(filter(str.isalnum, s))\n    \n    # ensure it is 10 digits long\n    if len(nums) != 10:\n        return False\n    \n    # ensure the last 7 digits are valid\n    if nums[3:10] in set('2', '3', '4', '5', '6', '7', '8', '9'):\n        return False\n    \n    # ensure first 3 digits are valid\n    area_codes = set('201', '202', '203', '205', '206', '207', '208', '209', \n                     '210', '212', '213', '214', '215', '216', '217', '218',\n                     '219', '224', '225', '226', '228', '229', '231', '234',\n                     '239', '240', '242', '244', '245', '248', '250', '251', \n                     '252', '253', '254', '256', '260', '262', '264', '267', \n                     '268', '269', '270', '276', '281', '284', '289', '301', \n                     '302', '303', '304', '305', '306', '307', '308', '309', \n                     '310', '312', '313', '314', '315', '316', '317', '318',\n                     '319', '320', '321', '323', '330', '331', '334', '336',\n                     '337', '339', '340', '347', '351', '352', '360', '362',\n                     '386', '401', '402', '403', '404', '405', '406', '407',\n                     '408', '409', '410', '412', '413', '414', '415', '417',\n                     '418', '419', '423', '424', '425', '430', '431', '432',\n                     '434', '435', '440', '441', '443', '450', '468', '473',\n                     '478', '479', '480', '484', '501', '502', '503', '504', \n                     '505', '506', '507', '508', '509', '510', '512', '513', \n                     '515', '516', '517', '518', '519', '520', '530', '540', \n                     '541', '551', '557', '559', '561', '562', '563', '564', \n                     '567', '570', '571', '573', '574', '580', '585', '586', \n                     '601', '602', '603', '605', '606', '607', '608', '609', \n                     '610', '612', '614', '615', '616', '617', '618', '619', \n                     '620', '623', '626', '628', '630', '631', '636', '641', \n                     '646', '650', '651', '661', '662', '678', '681', '682', \n                     '701', '702', '703', '704', '705', '706', '707', '708', \n                     '712', '713', '714', '715', '716', '717', '718', '719', \n                     '720', '724', '725', '727', '731', '732', '734', '737', \n                     '740', '754', '757', '758', '760', '762', '763', '765', \n                     '769', '770', '772', '773', '774', '775', '778', '780', \n                     '781', '784', '785', '786', '787', '801', '802', '803', \n                     '804', '805', '806', '807', '808', '809', '810', '812', \n                     '813', '814', '815', '816', '817', '818', '828', '830', \n                     '831', '832', '843', '845', '847', '848', '850', '856', \n                     '857', '858', '859', '860', '862', '863', '864', '865', \n                     '870', '872', '878', '901', '903', '904', '906', '907', \n                     '908', '909', '910', '912', '913', '914', '915', '916', \n                     '917', '918', '919', '920', '925', '927', '928', '931',\n                     '936', '937', '940', '941', '947', '949', '951', '952', \n                     '954', '956', '970', '971', '972', '973', '978', '979', \n                     '980', '984', '985', '989')\n    if nums[:3] not in area_codes:\n        return False\n\n    return True", "category": "Python"}, {"instruction": "Develop a function to replace all consecutive whitespaces in a given string with a single space.", "input": "", "output": "def collapse_whitespace(str):\n    return ' '.join([x for x in str.split(' ') if x != ''])", "category": "Python"}, {"instruction": "Create a 3x4 NumPy array of random integers from 0 to 5.", "input": "", "output": "import numpy as np\narray = np.random.randint(0, 6, size=(3,4))\nprint(array)\n\nOutput:\n[[4 5 4 0]\n [2 1 5 4]\n [3 0 2 0]]", "category": "Python"}, {"instruction": "Read two numbers and output the smallest one.", "input": "7, 4", "output": "def min_num(n1, n2):\n    if n1 < n2:\n        return n1\n    else:\n        return n2\n \nprint(min_num(7, 4))", "category": "Python"}, {"instruction": "Write a function to perform vector addition for two 1D arrays.", "input": "[3, 4], [5, 6]", "output": "def add_vectors(v1, v2):\n    result = []\n    for i in range(len(v1)):\n        result.append(v1[i] + v2[i])\n    return result\n \nprint(add_vectors([3, 4], [5, 6]))", "category": "Python"}, {"instruction": "Explain the algorithm used in linear search.", "input": "", "output": "Linear search is an algorithm for finding a particular value in an array. It works by sequentially going through each item in the array, comparing the desired value with each item until it is either found or the end of the array is reached. If the item is found, it's index in the array is returned, otherwise, -1 is returned indicating the value wasn't found.", "category": "Python"}, {"instruction": "Suggest an algorithm in Python for sorting an array of integers from smallest to largest.", "input": "nums = [3, 7, 5, 6, 1]", "output": "def sortInts(nums): \n    # Traverse through all array elements \n    for i in range(len(nums)): \n  \n        # Last i elements are already in place \n        for j in range(0, len(nums)-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if nums[j] > nums[j+1] : \n                nums[j], nums[j+1] = nums[j+1], nums[j] \n                \n    return nums", "category": "Python"}, {"instruction": "Write a function that generates a unique integer ID given a string input.", "input": "", "output": "def generateId(string):\n    hashValue = hash(string)\n    id = 0\n    while hashValue > 0:\n        id += hashValue % 10\n        hashValue //= 10\n    return id", "category": "Python"}, {"instruction": "You need to rearrange the characters in a given string such that no two same characters are adjacent to each other.", "input": "abccab", "output": "def rearrange(string):\n    seen = set()\n    result = []\n    for char in string:\n        if char not in seen:\n            seen.add(char)\n            result.append(char)\n        else:\n            for ch in string:\n                if ch not in seen:\n                    seen.add(ch)\n                    result.append(ch)\n    return ''.join(result)", "category": "Python"}, {"instruction": "Develop a code to check whether a number is a palindrome.", "input": "Number: 1234321", "output": "\"\"\"\ndef is_palindrome(num):\n    # Initializing variables\n    n = num\n    rev = 0\n    while (n > 0):\n        # Storing the remainder\n        rev = (rev * 10) + n % 10\n\n        # Updating n\n        n //= 10\n\n    # Checking if the reversed number is equal to the given number\n    if (num == rev):\n        return True\n\n    return False\n\n# Function call\nprint(is_palindrome(1234321))\n\"\"\"\n\nOutput: True", "category": "Python"}, {"instruction": "Write a function to check whether a given number can be expressed as the power of some other number", "input": "Number: 8", "output": "\"\"\"\ndef is_power_of(x):\n    # Initializing the counter\n    i = 0\n  \n    # Iterating through possible exponents\n    while (x > 1):\n        if (x % 2 == 0): \n            x /= 2\n        else: \n            return False\n        i += 1\n        \n    return True\n\n# Function call\nprint(is_power_of(8))\n\"\"\"\n\nOutput: True", "category": "Python"}, {"instruction": "How can you check if a string is a substring of another string in Python?", "input": "", "output": "You can check if a string is a substring of another string in Python by using the \"in\" operator. For example, if you want to check if the string \"hello\" is a substring of a variable called \"my_string\", you can do:\n\nif 'hello' in my_string:\n    # do something", "category": "Python"}, {"instruction": "Given two arrays of integers, find the common elements.", "input": "arr1 = [1, 2, 3, 4, 5]; arr2 = [4, 5, 6, 7, 8]", "output": "def common_elements(arr1, arr2):\n    common = []\n    for item in arr1:\n        if item in arr2:\n            common.append(item)\n\n    return common", "category": "Python"}, {"instruction": "Compute the n-th Fibonacci number.", "input": "", "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    \n    if n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Print all powers of 2 less than or equal to n.", "input": "n = 10", "output": "def power_of_2(n): \n    res = []\n    for i in range(n+1):\n        if i & (i-1) == 0:\n            res.append(i)\n        \n    return res", "category": "Python"}, {"instruction": "Output all numbers between 1 to 5 except for 3 using Python.", "input": "", "output": "for x in range(1, 6):\n    if x != 3:\n        print(x)", "category": "Python"}, {"instruction": "Write a code to convert all the letters of a string to lowercase.", "input": "Input string: \"HELLO WORLD\"", "output": "def lowercase_string(input_str):\n    output_str = \"\"\n    \n    for char in input_str:\n        output_str += char.lower()\n    return output_str\n\nif __name__ == '__main__':\n    print(lowercase_string(\"HELLO WORLD\"))", "category": "Python"}, {"instruction": "Implement an algorithm in Python to find the size of a Binary tree.", "input": "", "output": "def size(node): \n    if node is None: \n        return 0\n    else: \n        return (size(node.left) + 1 + size(node.right))", "category": "Python"}, {"instruction": "Write a Python function that prints out a staircase pattern.", "input": "", "output": "def staircase(n): \n    for i in range(1, n + 1): \n        for j in range(1, n + 1): \n            if (j <= (n - i)):   \n                print(end=\"\\t\") \n            else: \n                print(\"#\\t\", end=\"\") \n        print()", "category": "Python"}, {"instruction": "Perform linear search on a given list of numbers to check if a given number is present in the list.", "input": "List: [1, 2, 3, 4]\nNumber: 2", "output": "\"\"\"\ndef linear_search(arr, n):\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the given number is found\n        if arr[i] == n:\n            return True\n    \n    # Return False if the given number is not present\n    return False\n\n# Function call\nprint(linear_search([1, 2, 3, 4], 2))\n\"\"\"\n\nOutput: True", "category": "Python"}, {"instruction": "Design a data structure for efficiently finding the closest input to a given input in a set of inputs.", "input": "", "output": "An efficient data structure for finding the closest element to a given element in a set of elements is the KD Tree. The KD Tree is a space-partitioning data structure for organizing points in a k-dimensional space and taking advantage of their spacial locality. A KD Tree is a binary tree with each node containing a set of coordinates, or an element, and the corresponding subtree referring to elements closer to the coordinates of the current node in the tree. By recursively dividing the space into smaller parts, the search time for a specific element or coordinates can be significantly reduced, making finding the closest element a much faster process.", "category": "Python"}, {"instruction": "Create a machine learning model to predict the probability of a patient having a certain type of cancer.", "input": "features = [Height, Weight, Age, Gender]", "output": "import numpy as np\nimport pandas as pd\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# read in the data\ndf = pd.read_csv('data.csv')\n\n# separate the features and labels\nX = df.drop('cancer', axis=1)\ny = df['cancer']\n\n# split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# create a support vector machine model\nmodel = SVC()\n\n# fit the model on the data\nmodel.fit(X_train, y_train)\n\n# make predictions\npredictions = model.predict(X_test)\n\n# measure the accuracy of the model\nscore = accuracy_score(y_test, predictions)\nprint(score)", "category": "Python"}, {"instruction": "Create a simple Python script to print the first 10 prime numbers.", "input": "", "output": "prime_numbers = [] \nfor num in range(1, 11):   \n   if num > 1:  \n       for i in range(2, num):  \n           if (num % i) == 0:  \n               break  \n       else:  \n           prime_numbers.append(num)\n  \nprint(prime_numbers)", "category": "Python"}, {"instruction": "Create a GraphQL API to serve data from a database in Python.", "input": "", "output": "The GraphQL API should use Python's Graphene library to create the schema. The API should have a root query and necessary fields, as well as a Global ID and Node interface for each of the database's tables. The API should also support CRUD operations, enabling the clients to query or modify the database tables.", "category": "Python"}, {"instruction": "Construct a code to find the sum of all elements in a given 2D matrix", "input": "matrix = [[1, 2, 3],[4, 5, 6],[7, 8, 9]]", "output": "def sum_elements(matrix):\n    result = 0\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            result = result + matrix[i][j]\n    return result\n\nprint(sum_elements(matrix))", "category": "Python"}, {"instruction": "Compute 2 to the 3rd power using Python.", "input": "", "output": "result = 2 ** 3\nprint(result)  # Outputs 8", "category": "Python"}, {"instruction": "What is a 2D array?", "input": "", "output": "A 2D array (or two-dimensional array) is an array of arrays, meaning it is a collection of elements which are themselves arrays. Each element in the 2D array can be thought of as a row, and the elements inside that row can be thought of as columns. The elements all have the same data type.", "category": "Python"}, {"instruction": "What is the purpose of a pivot table in Excel?", "input": "", "output": "The purpose of a pivot table in Excel is to summarize and analyze data. It can quickly summarize large amounts of data and create useful summaries with a few clicks. Pivot tables are useful for quickly analyzing data in different ways, such as sorting and filtering, and deriving meaningful insights.", "category": "Python"}, {"instruction": "Create a function that prints the multiplication table for a provided integer", "input": "x = 8", "output": "def print_multiplication_table(x):\n  for i in range(1, 11):\n    ans = i*x\n    print(f\"{i} x {x} = {ans}\")\n\nprint_multiplication_table(x)", "category": "Python"}, {"instruction": "Replance the character on odd index positions with '#'.", "input": "\"Hello World!\"", "output": "\"\"\"\nReplace the character on odd index positions with '#'.\n\"\"\"\n\ndef add_pound_signs(string):\n    result_string = \"\"\n    for i in range(len(string)):\n        if i % 2 == 1:\n            result_string += \"#\"\n        else:\n            result_string += string[i]\n    return result_string\n\nif __name__ == '__main__': \n    string = \"Hello World!\"\n    print(add_pound_signs(string))", "category": "Python"}, {"instruction": "Given an array containing words and a string, find the shortest word in the array that is a substring of the string", "input": "words = [\"apple\", \"banana\", \"cat\", \"dog\"], string = \"aquickbrownfoxjumpsoverthelazydog\"", "output": "\"\"\"\nGiven an array containing words and a string, find the shortest word in the array that is a substring of the string.\n\"\"\"\n\ndef find_shortest_substring(words, string): \n    min_length = float(\"inf\")\n    min_word = None\n    for word in words:\n        j = string.find(word)\n        if j>-1 and len(word)<min_length:\n            min_length = len(word)\n            min_word = word\n    return min_word\n\nif __name__ == '__main__': \n    words = [\"apple\", \"banana\", \"cat\", \"dog\"]\n    string = \"aquickbrownfoxjumpsoverthelazydog\"\n    print(find_shortest_substring(words, string))", "category": "Python"}, {"instruction": "Explore the data_df dataframe and build a visualization that answers the following question: what is the correlation between number of tweets sent and positive sentiment?", "input": "data_df: DataFrame containing columns such as n_tweets,pos_sentiment", "output": "import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Explore data\nsns.pairplot(data_df, hue='pos_sentiment')\nplt.show()\n\n# Fit a regression line\nsns.regplot(x=\"n_tweets\", y=\"pos_sentiment\", data=data_df)\nplt.xlabel('Number of Tweets')\nplt.ylabel('Positive Sentiment')\nplt.show()", "category": "Python"}, {"instruction": "Given a string, write a Python program to remove all special characters from it.", "input": "", "output": "def remove_special_characters(string): \n    final_string = \"\" \n    for character in string: \n        if character.isalnum(): \n            final_string += character \n    return final_string", "category": "Python"}, {"instruction": "Create a dictionary that stores the number of occurrences of each character in a given string.", "input": "string = \"Hello World!\"", "output": "char_frequency_dict = {}\n\nfor char in string:\n    if char in char_frequency_dict:\n        char_frequency_dict[char] += 1\n    else:\n        char_frequency_dict[char] = 1", "category": "Python"}, {"instruction": "Write a code to print the even numbers in the range of a given two numbers.", "input": "start = 10\nend = 20", "output": "for num in range(start, end+1):\n    if num % 2 == 0:\n        print(num)", "category": "Python"}, {"instruction": "Implement the following function using a stack.", "input": "def isPalindrome(string):\n    '''This function will return whether or not a string is a palindrome.'''", "output": "def isPalindrome(string):\n    '''This function will return whether or not a string is a palindrome.'''\n    stack = [] \n    for letter in string:\n        stack.append(letter)\n\n    reverse = ''\n    while stack:\n        reverse += stack.pop()\n\n    if reverse == string:\n        return True\n    return False", "category": "Python"}, {"instruction": "Given a linked list, design an algorithm to reverse it.", "input": "", "output": "The algorithm must traverse the list and keep track of the nodes as it moves through it. The algorithm should create a new linked list with the elements in reverse order. To do this, the algorithm should traverse the original linked list and push every element onto a stack. Then, the algorithm should pop each element off the stack and insert it as the head of the new linked list. This process is iterative until the stack is empty.", "category": "Python"}, {"instruction": "How to create a dictionary of length four in Python?", "input": "", "output": "The simplest way to create a dictionary of length four in Python is by using the built-in dict() function. For example:\n\nmyDict = dict(key1 = \"value1\", key2 = \"value2\", key3 = \"value3\", key4 = \"value4\")", "category": "Python"}, {"instruction": "What is the result of the following operation in Python?", "input": "x = 1\ny = 3\nz = 4\n\nx = y - z", "output": "x = -3", "category": "Python"}, {"instruction": "How to install the Python package called Pillow?", "input": "", "output": "The easiest way to install the Pillow package is through pip, the official package manager for Python. To install Pillow using pip, open the command line interface and type \"pip install Pillow\".", "category": "Python"}, {"instruction": "Given a list of numbers, create a function that prints the elements of the list that are divisible by 5.", "input": "[1, 20, 30, 15, 60]", "output": "def print_divisible_by_5(input_list):\n    for num in input_list:\n        if num % 5 == 0:\n            print(num)", "category": "Python"}, {"instruction": "Write a function that takes an integer n and prints the n x n grid with stars.", "input": "3", "output": "def print_grid(n): \n    for r in range(n):\n        print(\"* \"*n)", "category": "Python"}, {"instruction": "Return a dictionary containing the number of occurrences of each word in the string.", "input": "s = \"this string should contain 4 occurrences of the word should\"", "output": "def count_words(s): \n    words = s.split() \n    returnCounter = dict.fromkeys(words, 0) \n    for word in words: \n        returnCounter[word] += 1\n    return returnCounter", "category": "Python"}, {"instruction": "Explain how a neural network works.", "input": "", "output": "Neural networks are inspired by the structure and function of biological neural networks. They are composed of layers of interconnected \u2018neurons\u2019, which contain adjustable weights that represent the strength of the connection between each neuron. The neurons receive an input from a source, process the input from individual or multiple layers according to their weights, and output a result. Each layer typically performs a different mathematical operation, such as multiplication, addition or nonlinear activation functions. This allows the network to process complex patterns and extract insights from the data. The weights of the neural network are adjusted each time a new set of data is input, which makes it possible for the network to \u2018learn\u2019 from the data and increase its accuracy.", "category": "Python"}, {"instruction": "Compare and contrast the differences between sets and lists in Python.", "input": "", "output": "A set is an unordered collection of items while a list is an ordered collection of items. Sets have no duplicate elements so all the elements in a set must be unique. The elements inside a list may or may not be unique. Sets are faster when compared to lists for retrieving elements since lookups of items don't require continuous search whereas lists need linear search. The sets built-in functions such as union, intersection give us a quick way of performing mathematical set operations. The elements of set are unchangeable and once you create a set the element in the set remain the same. But, items in a list can be modified.", "category": "Python"}, {"instruction": "Transform the following JSON object into a Python dictionary.", "input": "{ \"name\": \"John Doe\", \"age\": 25, \"address\": { \"street\": \"123 Main Street\", \"city\": \"Los Angeles\", \"state\": \"CA\", \"zip\": 90001}}", "output": "import json\n\ndef json_to_dict(json_str):\n   \n    return json.loads(json_str)\n\nif __name__ == \"__main__\":\n    json_str = \"\"\"\n    {\n        \"name\": \"John Doe\",\n        \"age\": 25,\n        \"address\": {\n            \"street\": \"123 Main Street\",\n            \"city\": \"Los Angeles\",\n            \"state\": \"CA\",\n            \"zip\": 90001\n        }\n    }\n    \"\"\"\n    \n    print(json_to_dict(json_str))", "category": "Python"}, {"instruction": "How would you find the maximum 3 elements from a list of numbers?", "input": "[20, -50, 15, 55, 0 , 40]", "output": "def find_max_three(nums):\n    max1 = - float('inf')\n    max2 = - float('inf')\n    max3 = - float('inf')\n\n    for num in nums:\n        if num > max1:\n            max3 = max2\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max3 = max2\n            max2 = num\n        elif num > max3:\n            max3 = num\n            \n    return max1, max2, max3\n\nprint(find_max_three([20, -50, 15, 55, 0, 40]))", "category": "Python"}, {"instruction": "Create a function to convert a given string to its lowercase equivalent, disregarding any non-alphabetical characters.", "input": "", "output": "def to_lowercase(string):\n    new_string = \"\"\n    for char in string:\n        if char.isalpha():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string", "category": "Python"}, {"instruction": "Find the sum of the series n3/(3n+1).", "input": "14", "output": "def sum_series(n):\n    result = 0\n    for x in range(1, n+1):\n        result += (x**3) / (3*x+1)\n    return result\n\nprint(sum_series(14))", "category": "Python"}, {"instruction": "Calculate the linear regression line for the following data.", "input": "X: [1, 2, 3, 4, 5]\nY: [6, 8, 10, 11, 12]", "output": "\"\"\"\nCalculate the linear regression line for the given data\n\"\"\"\nimport numpy as np\n\ndef linear_regression_line(X, Y):\n    mean_x = np.mean(X)\n    mean_y = np.mean(Y) \n    stdev_x = np.std(X)\n    stdev_y = np.std(Y)\n\n    numerator = 0\n    for x, y in zip(X, Y):\n        numerator += (x - mean_x) * (y - mean_y) \n    beta_1 = numerator/ (stdev_x * stdev_y)\n\n    beta_0 = mean_y - (beta_1 * mean_x)\n    \n    return (beta_1, beta_0)\n\nif __name__ == \"__main__\":\n   X = [1, 2, 3, 4, 5]\n   Y = [6, 8, 10, 11, 12]\n   print(\"Linear Regression Line: {}\".format(linear_regression_line(X, Y)))", "category": "Python"}, {"instruction": "Find the greatest common divisor for two integer inputs using the Euclidean Algorithm.", "input": "30, 60", "output": "\"\"\"\nFind the greatest common divisor for two integer inputs using the Euclidean Algorithm\n\"\"\"\n\ndef greatest_common_divisor(int1, int2):\n  if int1 == 0:\n    return int2\n  elif int2 == 0:\n    return int1\n  elif int1 == int2:\n    return int1\n  else:\n    if int1 > int2:\n      return greatest_common_divisor(int2, int1 % int2)\n    else:\n      return greatest_common_divisor(int1, int2 % int1)\n\nif __name__ == \"__main__\":\n   print(greatest_common_divisor(30, 60))", "category": "Python"}, {"instruction": "How would you find the area of a rectangle in Python?", "input": "", "output": "\"\"\"\nFind the area of a rectangle in Python\n\"\"\"\n\ndef area_of_rectangle(width, height):\n    \"\"\"\n    Returns the area of a rectangle given its width and height.\n    \"\"\"\n    return width * height\n\nif __name__ == \"__main__\":\n   print(area_of_rectangle(2, 4))", "category": "Python"}, {"instruction": "Write a Python program that generates a random integer between 1 and 5 and prints it out.", "input": "", "output": "import random\n\nrandom_integer = random.randint(1, 5)\n\nprint(random_integer)", "category": "Python"}, {"instruction": "Design a REST API in Python that would return a list of customer information.", "input": "", "output": "# Create a customer information API\n@app.route(\"/customers\", methods=[\"GET\"])\ndef customers():\n    # Get a list of customer data\n    customer_list = get_customers()\n    # Create a list of customer dictionaries\n    customer_info = [{'name': customer.name,\n                    'age': customer.age,\n                    'address': customer.address} \n                    for customer in customer_list]\n    # Return a json object with list of customer data\n    return jsonify(customer_info)", "category": "Python"}, {"instruction": "Write a function in the Python language to convert a string to a list.", "input": "my_string = \"Welcome to the world of GPT models\"", "output": "def string_to_list(my_string):\n    return my_string.split()", "category": "Python"}, {"instruction": "Edit the given code to calculate the sum of given numbers using a for loop.", "input": "numbers = [2, 4, 6, 8]\nsum = 0", "output": "\"\"\"\nEdit the given code to calculate the sum of given numbers using a for loop\n\"\"\"\n\nnumbers = [2, 4, 6, 8]\nsum = 0\n\nfor number in numbers:\n    sum += number\n\nprint(sum)", "category": "Python"}, {"instruction": "Generate a dataframe with 5 rows and 3 columns.", "input": "", "output": "import pandas as pd \n\ndata = {'Column1': [1, 2, 3, 4, 5], \n        'Column2': [5, 4, 3, 2, 1],\n        'Column3': [1, 2, 3, 4, 5]\n        }\n\ndf = pd.DataFrame(data)", "category": "Python"}, {"instruction": "Create a function that takes a list of strings and a string as inputs and finds all the strings in the list which contain the given string.", "input": "string_list = [\"hello\", \"world\", \"google\", \"apple\"]\nsub_string = \u201coo\u201d", "output": "def find_strings(string_list, sub_string):\n    results = []\n    for string in string_list:\n        if sub_string in string:\n            results.append(string)\n    return results", "category": "Python"}, {"instruction": "Given an array of English words, find any word which is an anagram of another word in the same array.", "input": "[\"listen\", \"pot\", \"part\", \"opt\", \"trap\", \"silent\", \"top\"]", "output": "\"\"\"\nGiven an array of English words, find any word which is an anagram of another word in the same array.\n\"\"\"\n\ndef find_anagrams(words):\n    anagrams = [] \n    for i in range(len(words)): \n        for j in range(i+1, len(words)): \n            if (sorted(words[i]) == sorted(words[j])): \n                anagrams.append((words[i],words[j])) \n    return anagrams\n\nif __name__ == '__main__':\n    words = [\"listen\", \"pot\", \"part\", \"opt\", \"trap\", \"silent\", \"top\"]\n    print(find_anagrams(words))", "category": "Python"}, {"instruction": "You need to classify a given sentence into one of 5 categories.", "input": "This sentence is about sports", "output": "def classify(sentence):\n    if 'sports' in sentence.lower():\n        return 'sports'\n    elif 'entertainment' in sentence.lower():\n        return 'entertainment'\n    elif 'politics' in sentence.lower():\n        return 'politics'\n    elif 'finance' in sentence.lower():\n        return 'finance'\n    elif 'science' in sentence.lower():\n        return 'science'\n    else:\n        return 'other'", "category": "Python"}, {"instruction": "Edit the following code to make it terminate in a finite number of steps", "input": "def foo():\n    while True:\n        print(\"Hello\")", "output": "\"\"\"\nEdit the following code to make it terminate in a finite number of steps.\n\"\"\"\n\ndef foo():\n    for _ in range(10):\n        print(\"Hello\")", "category": "Python"}, {"instruction": "Implement the Levenshtein distance algorithm in Python.", "input": "", "output": "\"\"\"\nImplementing the Levenshtein distance algorithm in Python\n\"\"\"\n\ndef levenshtein(word1, word2):\n    \"\"\"Calculate the Levenshtein distance between two words\"\"\"\n    size_x = len(word1) + 1\n    size_y = len(word2) + 1\n    matrix = [[0 for i in range(size_x)] for j in range(size_y)] \n    for x in range(size_x):\n        matrix[0][x] = x\n    for y in range(size_y):\n        matrix[y][0] = y\n\n    for x in range(1, size_x):\n        for y in range(1, size_y):\n            if word1[x-1] == word2[y-1]:\n                matrix[y][x] = min(\n                    matrix[y-1][x] + 1,\n                    matrix[y-1][x-1],\n                    matrix[y][x-1] + 1\n                )\n            else:\n                matrix[y][x] = min(\n                    matrix[y-1][x] + 1,\n                    matrix[y-1][x-1] + 1,\n                    matrix[y][x-1] + 1\n                )\n\n    return matrix[size_y-1][size_x-1]", "category": "Python"}, {"instruction": "Design a function to clean binary data (strings) by keeping only printable characters.", "input": "binary_data = b'h\\x9Fl\\x04o'", "output": "def clean_binary_data(binary_data):\n    return ''.join(map(lambda x:chr(x) if 32 <= x <= 126 else '', binary_data))", "category": "Python"}, {"instruction": "Create a network topology using the following input.", "input": "nodes = ['A', 'B', 'C', 'D', 'E']\nlinks = [('A', 'B'), ('B', 'C'), ('D', 'E'),('E', 'D')]", "output": "from networkx import nx\n\nG = nx.Graph()\nG.add_nodes_from(nodes)\nfor link in links:\n    G.add_edge(link[0], link[1])", "category": "Python"}, {"instruction": "Convert the following function into a recursive version.", "input": "def factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result", "output": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)", "category": "Python"}, {"instruction": "Create a function that removes all the repeated elements from a list.", "input": "lst = [3, 5, 1, 3, 7, 5]", "output": "def remove_repeats(lst):\n    new_lst = []\n    for item in lst:\n        if item not in new_lst:\n            new_lst.append(item)\n    return new_lst", "category": "Python"}, {"instruction": "Make the following piece of code functional for priority queues.", "input": "class PriorityQueue():\n    #TODO", "output": "class PriorityQueue():\n    def __init__(self):\n        self.elements = []\n    \n    def insert(self, item, priority):\n        self.elements.append((priority, item))\n        \n    def pop(self):\n        _, item = heappop(self.elements)\n        return item", "category": "Python"}, {"instruction": "Create a parameterized query in Python to find the details of a person.", "input": "", "output": "# define the query\nquery = \"SELECT * FROM people WHERE name = %s AND age = %s\"\n\n# provide the parameters\nparams = ('John', 22)\n\n# execute the query\ncursor.execute(query, params)", "category": "Python"}, {"instruction": "Create a program that prints all unique permutations of the given string.", "input": "", "output": "def permutations(string):\n    result = []\n    if len(string) == 1:\n        result=[string]\n    else:\n        for i, letter in enumerate(string):\n            for perm in permutations(string[:i] + string[i+1:]):\n                result.append(letter + perm)\n    return result", "category": "Python"}, {"instruction": "Create a program that draws a triangle with stars (*) with a given height.", "input": "", "output": "def draw_triangle(n): \n    for i in range(0, n): \n        for j in range(0, i+1): \n            print(\"*\",end=\"\") \n        print(\"\\r\")", "category": "Python"}, {"instruction": "Complete the program by filling in the missing code to call the appropriate function", "input": "def search(items, item): \n    for ____ in ____: \n    if ____ == ____:\n        found = ____ \n    if ____: \n        return found \n    else: \n        return -1", "output": "def search(items, item): \n    for i in range(len(items)): \n    if items[i] == item:\n        found = i \n    if found: \n        return found \n    else: \n        return -1", "category": "Python"}, {"instruction": "How can you detect if there is an infinite loop in a code?", "input": "", "output": "One way of detecting if there is an infinite loop in a code is by using a counter to count the number of iterations the loop is performing. If the number of iterations exceeds some predefined threshold value, we can conclude that the code is executing an infinite loop. Another technique to detect an infinite loop is to keep track of all the loop variables and compare the values at two different points in the loop. If it detects a repeating pattern, it may indicate that the loop is stuck in an infinite loop.", "category": "Python"}, {"instruction": "Make the following code work in a multithreading environment.", "input": "x = 0\ndef incrementer():\n    #TODO", "output": "import threading\n\nx = 0\nlock = threading.Lock()\n\ndef incrementer():\n    global x\n    with lock:\n        x +=  1\n        return x", "category": "Python"}, {"instruction": "Use the NLTK library to tokenize the following sentence.", "input": "sentence = \"This is a sentence.\"", "output": "import nltk\n\nsentence = \"This is a sentence.\"\n\ntokens = nltk.word_tokenize(sentence)\n\nprint(tokens) # Output: ['This', 'is', 'a', 'sentence', '.']", "category": "Python"}, {"instruction": "Use an API to fetch and print the current weather information of a given city.", "input": "City Name: New York", "output": "import requests \n\n# API endpoint \nurl = \"http://api.openweathermap.org/data/2.5/weather?\"\n\n# API key\napi_key = \"YOUR_API_KEY\"\n \n# City name \ncity_name = \"New York\"\n\n# parameter for API call \nparams = {\n    'q': city_name, \n    'appid': api_key \n} \n\n# get method of requests module \n# return response object \nres = requests.get(url, params=params) \n\n# json method of response object convert \n# json format data into python format data \ndata = res.json() \n\n# fetch current weather information \n# get method of dictionary \ncurrent = data[\"main\"] \n\n# Now print the current weather \n# get method of dictionary \ntemp = current[\"temp\"] \nprint(\" Temperature (in kelvin unit) = \" +\n            str(temp) + \n        \"\\n atmospheric pressure (in hPa unit) = \" +\n            str(current[\"pressure\"]) +\n        \"\\n humidity (in percentage) = \" +\n            str(current[\"humidity\"]) +\n        \"\\n minimum temperature (in kelvin unit) = \" +\n            str(current[\"temp_min\"]) +\n        \"\\n maximum temperature (in kelvin unit) = \" +\n            str(current[\"temp_max\"]))", "category": "Python"}, {"instruction": "Write a function in Python to convert a 2D array into a single column array.", "input": "arr = [[0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8]]", "output": "def convert_to_single_column_array(arr):\n    single_column_arr = []\n\n    for sub_arr in arr:\n        for val in sub_arr:\n            single_column_arr.append(val)\n    \n    return single_column_arr", "category": "Python"}, {"instruction": "Generate a new list with all the even numbers from the given list", "input": "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "output": "# Generating a new list with all the even numbers from the given list\n\ndef get_even_numbers(input_list):\n  even_numbers = []\n  for num in input_list:\n    if num % 2 == 0:\n      even_numbers.append(num)\n  return even_numbers\n\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(get_even_numbers(my_list))\n\n# Output: [2, 4, 6, 8, 10]", "category": "Python"}, {"instruction": "Write a code which reverses the order of items in an array", "input": "my_list = [1,2,3,4,5]", "output": "# Reversing the order of items in an array\n\ndef reverse_order(input_list):\n return input_list[::-1] \n\nmy_list = [1,2,3,4,5]\nprint(reverse_order(my_list))\n\n# Output: [5, 4, 3, 2, 1]", "category": "Python"}, {"instruction": "Create a variable in Python to hold a list of numbers from 0 to 10", "input": "", "output": "my_list = list(range(0,11))", "category": "Python"}, {"instruction": "Construct a Regex expression in Python to extract words from a given URL.", "input": "", "output": "import re\np = re.compile(r'https?://(?:[-\\w.]|(?:%[\\da-fA-F]{2}))+')\nwords = p.findall(url)", "category": "Python"}, {"instruction": "Generate a list comprehension to find the highest number in the given list.", "input": "List = [2, 74, 8, 9, 34, 67]", "output": "highest_number = [i for i in List if i == max(List)]", "category": "Python"}, {"instruction": "You need to build a function that take a given tree and returns a list containing the data stored at each level.", "input": "1\n        /   \\\n       2     3\n      / \\    /\n     4   5  6", "output": "def traverseTree(node):\n    result = []\n    if node is None:\n        return []\n    else:\n        result.append(node.data)\n        result += traverseTree(node.left)\n        result += traverseTree(node.right)\n    return result", "category": "Python"}, {"instruction": "Generate a random string with length 100 consisting of lowercase letters.", "input": "", "output": "import random\n\ndef randomString():\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    result = []\n    for _ in range(100):\n        letter = random.choice(letters)\n        result.append(letter)\n    return ''.join(result)", "category": "Python"}, {"instruction": "You need to build a code editor with basic features like search, replace, undo, and redo.", "input": "", "output": "def codeEditor():\n    # Initialize the editor\n    editor = texteditor.Editor()\n    \n    # Create buttons for search, replace, undo and redo\n    searchButton = texteditor.Button(caption=\"Search\", onclick=editor.search)\n    replaceButton = texteditor.Button(caption=\"Replace\", onclick=editor.replace)\n    undoButton = texteditor.Button(caption=\"Undo\", onclick=editor.undo)\n    redoButton = texteditor.Button(caption=\"Redo\", onclick=editor.redo)\n    \n    # Create the layout\n    layout = texteditor.layout(\n        [\n            [searchButton, replaceButton],\n            [undoButton, redoButton]\n        ]\n    )\n    \n    # Create the window\n    window = texteditor.Window(layout)\n    \n    # Return the window\n    return window", "category": "Python"}, {"instruction": "Write a Python code to fetch the top three trending topics from Twitter.", "input": "", "output": "import tweepy\n\n# create OAuth handler\nconsumer_key = \"YOUR_CONSUMER_KEY\"\nconsumer_secret = \"YOUR_CONSUMER_SECRET\"\naccess_token = \"YOUR_ACCESS_TOKEN\"\naccess_token_secret = \"YOUR_ACCESS_TOKEN_SECRET\"\n\n# authenticate \nauth = tweepy.OAuthHandler(consumer_key, consumer_secret) \nauth.set_access_token(access_token, access_token_secret) \n  \n# overridable get method\napi = tweepy.API(auth, wait_on_rate_limit=True, wait_on_rate_limit_notify=True) \n \n# results\ntrends = api.trends_place(1) \ndata = trends[0]\ntrends_list = data['trends']\n\n# top 3 trending topics \nfor i in range(3): \n    print(trends_list[i]['name'])", "category": "Python"}, {"instruction": "Convert pyramid of numbers to a single number.", "input": "9\n    2   3\n  9   3   5\n1   8   6   8", "output": "def pyramid_to_num(pyramid):\n    num = 0\n    val = 0\n\n    for line in pyramid:\n        val = int(line[0]) * 10**(len(line) - 1)\n        num += val * 2**len(line)\n\n    return num\n\n# Test\npyramid = [['9'],['2', '3'],['9', '3', '5'],['1', '8', '6', '8']]\nprint(pyramid_to_num(pyramid))", "category": "Python"}, {"instruction": "Resolve the issue in the code causing a \"TypeError\" to be thrown", "input": "names = [\"John\", \"James\", 10]\n\nfor name in names:\n  print(name)", "output": "\"\"\"\nResolve the issue in the code causing a TypeError to be thrown\n\"\"\"\n\nnames = [\"John\", \"James\", 10]\n\nfor name in names:\n  # Check the type of the element and only display it if it's a string\n  if type(name) == str:\n    print(name)\n\n\"\"\"\nOutput:\nJohn\nJames\n\"\"\"", "category": "Python"}, {"instruction": "For the given Python dictionary, list all its keys and values in the following format.", "input": "{\n  \"name\": \"John Doe\",\n  \"age\": 40,\n  \"address\": {\n    \"street\": \"123 Main Street\",\n    \"city\": \"Albany\",\n    \"state\": \"NY\"\n  }\n}", "output": "\"\"\"\nFor the given dictionary, list all its keys and values in the following format\n\"\"\"\n\ndata = {\n  \"name\": \"John Doe\",\n  \"age\": 40,\n  \"address\": {\n    \"street\": \"123 Main Street\",\n    \"city\": \"Albany\",\n    \"state\": \"NY\"\n  }\n}\n\nfor key, value in data.items():\n    print(f\"{key}: {value}\")\n    if isinstance(value, dict):\n        for k,v in value.items():\n            print(f\"  {k}: {v}\")\n\n\"\"\"\nOutput:\nname: John Doe\nage: 40\naddress: {'street': '123 Main Street', 'city': 'Albany', 'state': 'NY'}\n  street: 123 Main Street\n  city: Albany\n  state: NY\n\"\"\"", "category": "Python"}, {"instruction": "Explain the use of webhooks in server-side applications", "input": "", "output": "Webhooks are useful for server-side applications as they allow programs to receive real-time updates from external services. Instead of the application periodically polling for changes, webhooks allow for the external service to make an HTTP POST request to the application each time an event occurs. This provides a more efficient way of sending notifications as the application is only notified when there are new events. This approach is particularly popular with applications that integrate with third-party services.", "category": "Python"}, {"instruction": "Create a permutation of characters in a string.", "input": "str = \"CAT\"", "output": "def permutation(str):\n    if len(str) == 0: \n        return [''] \n    prev_list = permutation(str[1:len(str)]) \n    next_list = [] \n    for i in range(0,len(prev_list)): \n        for j in range(0,len(str)): \n            new_str = prev_list[i][0: j]+str[0]+prev_list[i][j: len(str)-1] \n            if new_str not in next_list: \n                next_list.append(new_str) \n    return next_list\n\n# Test\nstr = 'CAT'\nperm = permutation(str)\n\n# Output\nprint(perm)\n# ['CAT', 'CTA', 'ACT', 'ATC', 'TCA', 'TAC']", "category": "Python"}, {"instruction": "Convert this string to a float in Python.", "input": "string = \"1.25\"", "output": "string = \"1.25\"\nfloat_value = float(string)", "category": "Python"}, {"instruction": "Perform K-Means Clustering on this dataset.", "input": "dataset = [[5,7], [1,2], [7,9], [10,2], [2,5]]", "output": "import numpy as np\nfrom sklearn.cluster import KMeans\n\n# Create dataset\ndataset = np.array([[5,7], [1,2], [7,9], [10,2], [2,5]])\n\n# Create KMeans object\nkmeans = KMeans(n_clusters=2)\n\n# Fit the model\nkmeans.fit(dataset)\n\n# Get labels\nlabels = kmeans.labels_\n\n# Calculate cluster centers using the average of the datapoints in the cluster\ncluster_centers = kmeans.cluster_centers_\n\n# Print the results\nprint(\"Labels: \", labels)\nprint(\"Cluster Centers: \", cluster_centers)", "category": "Python"}, {"instruction": "Create a GCP Cloud Function that sends an email with input \"name\" and \"message\".", "input": "", "output": "import os\nimport smtplib\nfrom email.message import EmailMessage\n\ndef sendEmail(request):\n    request_json = request.get_json()\n    name = request_json.get('name')\n    message = request_json.get('message')\n  \n    SENDER = os.environ.get('SENDER')\n    RECEIVER = os.environ.get('RECEIVER')\n    PASSWORD = os.environ.get('PASSWORD')\n  \n    msg = EmailMessage()\n    msg.set_content(f'Hello,\"\\n\\n{message}\"\\n\\nRegards,\\n{name}')\n\n    msg['Subject'] = 'Message Sent Via Cloud Function'\n    msg['From'] = SENDER\n    msg['To'] = RECEIVER\n  \n    s = smtplib.SMTP('smtp.gmail.com', 587)\n    s.starttls()\n    s.login(SENDER, PASSWORD)\n    s.send_message(msg)\n    s.quit()", "category": "Python"}, {"instruction": "Compose a Python script to convert a string to an all-uppercase string.", "input": "String: 'Experiment'", "output": "# converting the string to upper-case \nstring = \"Experiment\"\nprint(\"Old String:\", string) \nstring = string.upper() \nprint(\"New String:\", string)", "category": "Python"}, {"instruction": "Design a code to generate Fibonacci numbers.", "input": "", "output": "def Fibonacci(num): \n    a = 0\n    b = 1  \n    if num < 0: \n        print(\"Incorrect input\")\n    elif num == 0: \n        return a \n    elif num == 1: \n        return b \n    else: \n        for i in range(2,num): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Can you print out a multiplication table of size 12 by 12?", "input": "", "output": "def multiple_table():\n    for i in range(1, 13):\n        for j in range(1, 13):\n            print(\"%2d x %2d = %3d\" %(i, j, i*j))\n        print(\"\\n\")\nmultiple_table()", "category": "Python"}, {"instruction": "Design an algorithm for multiplying two matrices.", "input": "A = [[1, 2,],\n     [3, 4]] \nB = [[5, 6], \n     [7, 8]]", "output": "def multiply(A, B): \n    # initialize result matrix \n    rows_A = len(A) \n    cols_A = len(A[0]) \n    rows_B = len(B) \n    cols_B = len(B[0]) \n  \n    if cols_A != rows_B: \n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\") \n        return  \n    # construct result matrix  \n    C = [[0 for row in range(cols_B)] for col in range(rows_A)] \n  \n    # iterate through and multiply\n    for i in range(rows_A): \n        for j in range(cols_B): \n            for k in range(cols_A): \n                C[i][j] += A[i][k] * B[k][j] \n  \n    return C", "category": "Python"}, {"instruction": "Create a program to detect the type of a given character.", "input": "", "output": "def detect_char_type(ch):\n  char_type = \"\"\n\n  if ch.isalpha():\n    char_type = \"Letter\"\n  elif ch.isdigit():\n    char_type = \"Digit\"\n  elif ch.isspace():\n    char_type = \"Space\"\n  elif ch in string.punctuation:\n    char_type = \"Punctuation\"\n  else:\n    char_type = \"Special Character\"\n  \n  return char_type", "category": "Python"}, {"instruction": "Convert this Python list of dictionaries to JSON.", "input": "list_of_dictionaries=[\n  { \n         \"name\" : \"John\", \n         \"age\" : 30, \n         \"city\" : \"New York\"\n     }, \n     { \n         \"name\" : \"Mike\", \n         \"age\" : 25, \n         \"city\" : \"California\"\n     }\n ]", "output": "[ \n    { \n        \"name\" : \"John\", \n        \"age\" : 30, \n        \"city\" : \"New York\"\n    }, \n    { \n        \"name\" : \"Mike\", \n        \"age\" : 25, \n        \"city\" : \"California\"\n    } \n]", "category": "Python"}, {"instruction": "Write a TensorFlow code to build a convolutional neural network to predict the digits from the MNIST dataset.", "input": "", "output": "model = tf.keras.models.Sequential()\n\n# Add a convolutional layer\nmodel.add(tf.keras.layers.Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=(28, 28, 1)))\n\n# Add a max pooling layer\nmodel.add(tf.keras.layers.MaxPooling2D(2,2))\n\n# Add a flatten layer\nmodel.add(tf.keras.layers.Flatten())\n\n# Add a hidden layer\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\n\n# Add an output layer\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))\n\n# Compile the model\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])", "category": "Python"}, {"instruction": "Create a program for sorting a given array in O(n) time complexity.", "input": "", "output": "def sort_array(arr):\n    n = len(arr) \n    for i in range(n): \n        min_idx = i \n        for j in range(i+1, n): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n    return arr", "category": "Python"}, {"instruction": "Create a code to read a textfile line by line and print out the lines that have the word \"Python\".", "input": "", "output": "with open('textfile.txt') as f:\n    for line in f:\n        if 'Python' in line:\n            print(line)", "category": "Python"}, {"instruction": "What is the most efficient way to iterate through a list of dictionaries in Python?", "input": "", "output": "The most efficient way to iterate through a list of dictionaries in Python is to use the \"for-in\" loop. This loop iterates over the elements of the list and accesses the values of the dictionary using the \"key\" argument. The syntax would be: for item in list: do_something(item[key]).", "category": "Python"}, {"instruction": "What is the Python library used to parse a JSON string?", "input": "", "output": "The Python library used to parse a JSON string is json. The json library provides functions for encoding and decoding a JSON string. The syntax for decoding would be: json.loads(data). The syntax for encoding would be: json.dumps(data).", "category": "Python"}, {"instruction": "How can you search for and replace a string with a substring in Python?", "input": "", "output": "You can search for and replace a string with a substring in Python by using the \"replace\" method. The syntax would be: string.replace(\"string_to_be_replaced\", \"new_string\"). For example: \"Hello, world\".replace(\"world\", \"there\") would return \"Hello, there\".", "category": "Python"}, {"instruction": "Print the name of the day depending on the given integer.", "input": "day = 0", "output": "def get_name_of_day(day):\n    days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n    \n    if day >= 0 and day <= 6:\n        return days[day]\n    else:\n        return None", "category": "Python"}, {"instruction": "String concatenation is the process of combining two individual strings into one. Write a Python program to concatenate two strings using the + operator.", "input": "str1 = 'Hello'\nstr2 = 'World'", "output": "def concatenate(str1, str2):\n    return str1 + str2\n\nprint (concatenate(str1, str2))", "category": "Python"}, {"instruction": "Write a function to sort the elements of a list based on their frequency.", "input": "arr = [2, 5, 9, 8, 8, 5, 9, 2]", "output": "def frequencySort(arr): \n    eleFreq = {} \n    sortedList = [] \n  \n    # Create a dictionary with frequency of element as key and element as value\n    for i in arr: \n        if i in eleFreq: \n            eleFreq[i] += 1\n        else: \n            eleFreq[i] = 1\n  \n    # Sort the dictionary \n    sortedFreq = sorted(eleFreq.items(), key = lambda eleFreq: eleFreq[1], reverse = True) \n  \n    # Store the elements in an output list with the same frequency \n    for i in sortedFreq: \n        sortedList.extend([i[0]] * i[1])\n  \n    return sortedList", "category": "Python"}, {"instruction": "Create a dictionary in Python and store the names of four countries and the cities within them.", "input": "", "output": "# Create a Dictionary \ndict = { \n    \"India\" : [\"Delhi\", \"Mumbai\", \"Chennai\"], \n    \"USA\" : [\"New York\", \"Washington\", \"Los Angeles\"],\n    \"Canada\" : [\"Toronto\", \"Vancouver\", \"Ottawa\"],\n    \"France\" : [\"Paris\", \"Marseille\", \"Lyon\"]\n} \n\n# Print the Dictionary \nprint(dict)", "category": "Python"}, {"instruction": "Return an array which contains all the words of the given string in reverse order.", "input": "string = \"This is a test sentence.\"", "output": "\"\"\"\nReturn an array which contains all the words of the given string in reverse order\n\"\"\"\n\nstring = \"This is a test sentence.\"\n\n# Split the string into a list\nwords = string.split(' ')\n\n# Reverse the list of words\nreversed_words = words[::-1]\n\n# Construct the output array\noutput_array = [word[::-1] for word in reversed_words]\n\nprint(output_array)\n\n\"\"\"\nOutput: ['ecnetnes', 'tset', 'a', 'si', 'sihT']\n\"\"\"", "category": "Python"}, {"instruction": "Generate a JSON response which contains the age of all users in the database.", "input": "", "output": "\"\"\"\nGenerate a JSON response which contains the age of all users in  the database\n\"\"\"\n\nimport json\n\n# Database of users\nusers = [\n  {'name': 'John Doe', 'age': 40},\n  {'name': 'Bob Jones', 'age': 30},\n  {'name': 'Alice Smith', 'age': 20}\n]\n\n# Generate the json response\nresponse = {'ages': [user['age'] for user in users]}\n\n# Print the response\nprint(json.dumps(response))\n\n\"\"\"\nOutput: {\"ages\": [40, 30, 20]}\n\"\"\"", "category": "Python"}, {"instruction": "Write code to check if a given string contains only alpha-numeric characters.", "input": "Hello World!", "output": "\"\"\"\nWrite code to check if a given string contains only alpha-numeric characters.\n\"\"\"\n\ndef is_alnum(string):\n    return string.isalnum()\n\nif __name__ == '__main__': \n    string = 'Hello World!'\n    print(is_alnum(string))", "category": "Python"}, {"instruction": "Write a function in Python that should take two lists and return the intersection.", "input": "list_a = [1, 2, 3, 4, 5]\nlist_b = [2, 5, 7, 10]", "output": "def intersection(list_a, list_b):\n    return [element for element in list_a if element in list_b]", "category": "Python"}, {"instruction": "Construct an algorithm to print out the binomial coefficients of a given number n.", "input": "", "output": "def binomial_coefficients(n):\n    coefficients = []\n    for i in range(n+1):\n        coefficients.append(int(math.factorial(n) / (math.factorial(i)*math.factorial(n-i))))\n    return coefficients\n\n# Usage:\nprint(binomial_coefficients(7)) # Outputs [1,7,21,35,35,21,7,1]", "category": "Python"}, {"instruction": "Construct a function to check if a string is a pangram.", "input": "", "output": "def is_pangram(s):\n    s = s.lower()\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in alphabet:\n        if letter not in s:\n            return False\n    return True", "category": "Python"}, {"instruction": "Create a class to create a Complex Number with real and imaginary parts.", "input": "", "output": "class ComplexNumber:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n    \n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result", "category": "Python"}, {"instruction": "Write a Python program that can accept an array and returns the column-wise sum of the given array.", "input": "[[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9]]", "output": "def col_sum(arr):\n    col_sum_arr = []\n    for j in range(len(arr[0])):\n        s = 0\n        for i in range(len(arr)):\n            s += arr[i][j]\n        col_sum_arr.append(s)\n    return col_sum_arr\n\nprint(col_sum([[1, 2, 3],\n               [4, 5, 6],\n               [7, 8, 9]]))\n# Output: [12, 15, 18]", "category": "Python"}, {"instruction": "Where would you place the import statement when using the pandas library in Python?", "input": "", "output": "The import statement should be placed at the beginning of the program, before any other statements are executed. This ensures that the Pandas library is available when we write code referring to the Pandas library.", "category": "Python"}, {"instruction": "Suggest a code segment to generate a random integer in the range of 0 to 100 using Python.", "input": "", "output": "import random\n\nrandom_int = random.randint(0, 100)", "category": "Python"}, {"instruction": "Suggest a code segment to render a greeting message in a terminal window using Python.", "input": "", "output": "print(\"Hello World!\")", "category": "Python"}, {"instruction": "Create a Python program for identifying the common elements between two lists.", "input": "list1 = [1, 2, 3, 4]\nlist2 = [2, 4, 6, 8]", "output": "def commonElements(list1, list2):\n    list1_set = set(list1) \n    list2_set = set(list2) \n    common_elements = list1_set.intersection(list2_set) \n    return common_elements", "category": "Python"}, {"instruction": "Design a class in Python that creates objects based on user input.", "input": "", "output": "class UserInput:\n    def __init__(self):\n        self.data = None\n\n    def get_data(self):\n        self.data = input(\"Enter something: \")\n        return self.data", "category": "Python"}, {"instruction": "Create a function in Python that takes in a string as an argument and replaces all occurances of 'e' with an asterisk ('*').", "input": "mystring = 'hello world'", "output": "def replace_e(mystring):\n    return mystring.replace('e', '*')", "category": "Python"}, {"instruction": "How to convert a pandas DataFrame to a python list?", "input": "", "output": "The DataFrame can be converted to a list using the tolist() method. For example:\n\nimport pandas as pd\n\ndf = pd.DataFrame([[1, 2], [3, 4], [5, 6]])\nmy_list = df.tolist()\nprint(my_list)\n\n# Output: [[1, 2], [3, 4], [5, 6]]", "category": "Python"}, {"instruction": "Describe a use case of the ternary operator in Python.", "input": "", "output": "The ternary operator can be used to conditionally assign a value. For example, the following code assigns max to the larger value of x and y:\n\nmax = x if x > y else y", "category": "Python"}, {"instruction": "Construct a binary tree using an array representation in Python.", "input": "[4, 2, 6, 1, 3, 5, 7]", "output": "class TreeNode:\n    def __init__(self, data):\n        self.data = data  \n        self.left = None\n        self.right = None\n      \ndef constructTree(arr): \n    root = TreeNode(arr[0])\n    root.left = TreeNode(arr[1])\n    root.right = TreeNode(arr[2])\n    root.left.left = TreeNode(arr[3])\n    root.left.right = TreeNode(arr[4])\n    root.right.left = TreeNode(arr[5])\n    root.right.right = TreeNode(arr[6])\n    return root", "category": "Python"}, {"instruction": "How many types of methods are available in Python?", "input": "", "output": "There are two types of methods available in Python: instance methods and class methods.", "category": "Python"}, {"instruction": "Convert this NumPy array to a list.", "input": "import numpy as np \nmy_array = np.array([[1,2,3], [4,5,6], [7,8,9]])", "output": "def convert_array(array):\n    \"\"\"\n    This function takes a NumPy array and\n    converts it to a list.\n    \"\"\"\n    return array.tolist()", "category": "Python"}, {"instruction": "Given a string, classify the sentiment of the text as either positive or negative.", "input": "The GPT model is amazing.", "output": "def classify_sentiment(string):\n    \"\"\"\n    This function takes a string and \n    classifies its sentiment as either\n    positive or negative.\n    \"\"\"\n    if string.lower().find(\"positive\") != -1 or string.lower().find(\"amazing\") !=-1:\n        return \"positive\"\n    elif string.lower().find(\"negative\") != -1:\n        return \"negative\"\n    else:\n        return \"neutral\"", "category": "Python"}, {"instruction": "Suggest a completion for the following to convert a date string to datetime format.", "input": "import datetime \n\ndef convert_date_string(date_string):", "output": "import datetime \n\ndef convert_date_string(date_string):\n   return datetime.datetime.strptime(date_string, \"%d-%m-%y\")", "category": "Python"}, {"instruction": "Modify the following code to skip the test if the platform is not windows.", "input": "import platform\n\ndef test_windows():\n    if platform.system() == 'Windows':\n        # Do test", "output": "import platform\n\ndef test_windows():\n    if platform.system() != 'Windows':\n        return\n    # Do test", "category": "Python"}, {"instruction": "Convert the following SQL query to Pandas to group the data by Country.", "input": "SELECT Country, COUNT(*) as Total_Orders\nFROM Orders\nGROUP BY Country", "output": "import pandas as pd\n\ndf = pd.read_sql_query('''SELECT Country, COUNT(*) as Total_Orders\nFROM Orders\nGROUP BY Country''', conn)\n\ndf.groupby('Country').agg({'Total_Orders':['count']})", "category": "Python"}, {"instruction": "Create a class in Python to represent an employee and define the attributes.", "input": "", "output": "class Employee:\n    def __init__(self, id, name, salary, job_title):\n        self.id = id\n        self.name = name\n        self.salary = salary\n        self.job_title = job_title", "category": "Python"}, {"instruction": "Create a code which takes in a list of strings, and returns a string with all the characters of the strings sequentially.", "input": "strings = [\"Hello\", \"World\"]", "output": "def merge_strings(strings):\n    merged_string = ''\n    for string in strings:\n        merged_string += string\n    return merged_string\n\nmerge_strings(strings)", "category": "Python"}, {"instruction": "Create a code to input a sentence and output the number of vowels in the sentence.", "input": "sentence = \"This is a sentence with vowels.\"", "output": "def count_vowels(sentence):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in sentence.lower():\n        if char in vowels:\n            count += 1\n    return count\n\ncount_vowels(sentence)", "category": "Python"}, {"instruction": "Write a code that takes in a list of names and creates a dictionary with the names as keys and their lengths as values.", "input": "names = [\"Mary\", \"John\", \"Mike\"]", "output": "def name_length_dict(names):\n    name_length_dict = dict()\n    for name in names:\n        name_length_dict[name] = len(name)\n    return name_length_dict \n\nname_length_dict(names)", "category": "Python"}, {"instruction": "Create a code to input a 2D matrix and output \nthe sum of each row.", "input": "[[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9]]", "output": "def row_sum(matrix):\n    row_sums = []\n    for row in matrix:\n        row_sum = 0 \n        for col in row:\n            row_sum += col\n        row_sums.append(row_sum)\n    return row_sums\n    \nrow_sum(matrix)", "category": "Python"}, {"instruction": "Given a list of strings, write a Python program to capitalize the first letter of each word.", "input": "words = ['The', 'quick', 'brown', 'fox']", "output": "capitalized_words = [word.capitalize() for word in words]\nprint(capitalized_words) # Output: ['The', 'Quick', 'Brown', 'Fox']", "category": "Python"}, {"instruction": "Use the list comprehension feature of Python to create a list of words with length more than 5", "input": "", "output": "words_list = [word for word in words if len(word) > 5]", "category": "Python"}, {"instruction": "Write a Pandas code snippet to filter the table based on a given condition.", "input": "Table: df\nCondition: df['Age'] > 25", "output": "filtered_df = df[df['Age'] > 25]", "category": "Python"}, {"instruction": "Write a NumPy code snippet to create a matrix of given shape and fill it with ones.", "input": "Shape: (3,4)", "output": "np.ones((3,4))", "category": "Python"}, {"instruction": "Create a Wordpress theme from scratch.", "input": "", "output": "Create a new folder for your theme, name it \"mytheme\". Open a text editor and a web browser.\n\nCreate a style.css file in your theme folder. Add all the CSS styles as required to make your theme looks as desired.\n\nCreate an index.php file in your theme folder, and add the code to create a basic layout of your theme in HTML.\n\nCreate any other files you may need, such as a template file (example: page.php), functions.php and scripts.php, in order to make your theme fully functional.\n\nAdd code to your functions.php file to add different features to your theme.\n\nCreate a screenshot.png image of your theme inside your theme folder, to show in the WordPress dashboard.\n\nZip your theme folder and upload it to WordPress from the \u201cAppearance\u201d menu.", "category": "Python"}, {"instruction": "Update this script in Python to print the number of months since an employee started working.", "input": "start_date = \"1 March 2020\"", "output": "import datetime\n\nstart_date = datetime.datetime.strptime(\"1 March 2020\", \"%d %B %Y\")\n\ncurrent_date = datetime.datetime.now()\n\nnumber_of_months = current_date.month - start_date.month\n\nprint(\"The employee has been working for {} months\".format(number_of_months))", "category": "Python"}, {"instruction": "Implement a function in Python to compute the average of an array containing floating-point numbers.", "input": "[1.5, 2.3, 3.8, 4.2]", "output": "import numpy as np\n\ndef calculate_average(arr):\n    return np.mean(arr)\n    \nprint(calculate_average([1.5, 2.3, 3.8, 4.2]))", "category": "Python"}, {"instruction": "You are given a string and a substring. Output the index of the first occurrence of the substring in the string.", "input": "\"Hello World\" and \"Wor\"", "output": "def get_index(text, substring):\n    for i in range(len(text)-len(substring)+1):\n        if text[i:i+len(substring)] == substring:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Write a function to count the number of times a given character is found in an input string.", "input": "\"Hello World\" and \"l\"", "output": "def count_characters(text, char):\n    count = 0\n    for c in text:\n        if c == char:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "You are given a string and a letter. Output a new string where the occurances of the given letter are replaced with its index in the given string.", "input": "\"apple\" and \"l\"", "output": "def replace_letters(text, letter):\n  new_text = \"\"\n  for i, char in enumerate(text):\n    if char == letter:\n       new_text += str(i)\n    else:\n       new_text += char\n  return new_text", "category": "Python"}, {"instruction": "Write a code to compare two numbers in python", "input": "num1= 5\nnum2 = 7", "output": "if num1 < num2: \n    print(\"num1 is smaller than num2\") \nelif num1 > num2: \n    print(\"num1 is greater than num2\") \nelse: \n    print(\"num1 is equal to num2\")", "category": "Python"}, {"instruction": "Design an algorithm in Python that takes an array of classmates' age and returns the median age.", "input": "ages = [10, 9, 12, 14, 11]", "output": "def median_age(ages):\n    ages.sort()\n    mid_index = len(ages)//2\n\n    if len(ages)%2 == 0:\n        return (ages[mid_index-1] + ages[mid_index])/2\n    else:\n        return ages[mid_index]", "category": "Python"}, {"instruction": "Output the numbers which are divisible by both 10 and 15 from a list of numbers.", "input": "number_list = [10, 15, 20, 25, 30, 35, 40]", "output": "def divisible_by_10_15(number_list):\n    divisible_numbers = []\n    for num in number_list:\n        if num % 10 == 0 and num % 15 == 0:\n            divisible_numbers.append(num)\n    return divisible_numbers\n    \nif __name__ == '__main__':\n    number_list = [10, 15, 20, 25, 30, 35, 40]\n    print(divisible_by_10_15(number_list))", "category": "Python"}, {"instruction": "Write a function that takes two lists as parameters, and returns a third list, containing the elements that occur on both the given lists.", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [2, 3, 4, 5, 6]", "output": "def common_elements(lst1, lst2):\n    common = []\n    for i in range(len(lst1)):\n        if lst1[i] in lst2:\n            common.append(lst1[i])\n    return common\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [2, 3, 4, 5, 6]\n    print(common_elements(list1, list2))", "category": "Python"}, {"instruction": "Create a python script to filter a list of words, and return only those with even length characters.", "input": "word_list = [\"Python\", \"C++\", \"Java\", \"JavaScript\", \"Ruby\"]", "output": "def even_length_words(word_list):\n    even_words = []\n    for word in word_list:\n        if len(word) % 2 == 0:\n            even_words.append(word)\n    return even_words\n    \nif __name__ == '__main__':\n    print(even_length_words(word_list))", "category": "Python"}, {"instruction": "Generate a Python generator to produce a sequence of the first N numbers", "input": "5", "output": "def my_generator(N):\n    for i in range(N):\n        yield i\n\ng = my_generator(5)\nprint(list(g)) # [0, 1, 2, 3, 4]", "category": "Python"}, {"instruction": "Create a Python script to find the maximum value of a list containing both strings and numbers", "input": "L = [1, 'a', 4, 3, 'b', 6, 'c']", "output": "L = [1, 'a', 4, 3, 'b', 6, 'c']\n\ndef Max_in_List(L):\n    max_num = 0\n    for item in L:\n        if type(item) == int and item > max_num:\n            max_num = item\n    return max_num\n\nprint(Max_in_List(L))", "category": "Python"}, {"instruction": "Write a Python function using the Pandas library to filter out the rows with a missing value in the specified column.", "input": "Dataframe:\n\nName\tAge\nJohn\t25\nJane\t\nMaria\t30\n\nColumn Name: Age", "output": "import pandas as pd \n   \n# Input Data \ndf = pd.DataFrame({'Name': ['John','Jane','Maria'], \n                   'Age': [25, None, 30]}) \n  \n# Filter the Data \nfiltered_df = df.loc[df['Age'].notnull()]\n\nprint(filtered_df)", "category": "Python"}, {"instruction": "Design a Python script that takes an array of integers and finds the median.", "input": "", "output": "def find_median(arr): \n\tarr.sort() \n\tif len(arr) % 2 != 0: \n\t\treturn arr[len(arr)//2] \n\treturn (arr[(len(arr)//2)-1] + arr[len(arr)//2])/2", "category": "Python"}, {"instruction": "Given a tree, traverse it in the pre-order manner.", "input": "", "output": "def pre_order_traversal(tree):\n  \n    # Visit the root\n    print(tree.value)\n  \n    # Traverse the left subtree, if it exists\n    if tree.left:\n        pre_order_traversal(tree.left)\n  \n    # Traverse the right subtree, if it exists\n    if tree.right:\n        pre_order_traversal(tree.right)", "category": "Python"}, {"instruction": "Perform data validation on two strings s1 and s2 according to the given conditions on the length and special characters.", "input": "s1 = \"Hello@world\"\ns2 = \"Test\"", "output": "def validate_strings(s1, s2):\n    if len(s1) > 10 and '@' not in s1:\n        return False\n    if len(s2) < 5 and '@' in s2:\n        return False\n    return True", "category": "Python"}, {"instruction": "Write a function to determine if a given number is prime and returns true or false.", "input": "", "output": "def is_prime(num):\n    if num <= 1:  \n        return False\n    for i in range(2, num):  \n        if num % i == 0:  \n            return False\n\n    return True", "category": "Python"}, {"instruction": "Find the largest and smallest number in a given list.", "input": "[5, 10, 20, 7, -8, 15]", "output": "import math \n\nmy_list = [5, 10, 20, 7, -8, 15]\n  \nlargest = max(my_list) \nsmallest = min(my_list) \n  \nprint(\"Largest element is:\", largest) \nprint(\"Smallest element is:\", smallest)", "category": "Python"}, {"instruction": "Generate the list of all prime numbers between 0 and 99.", "input": "", "output": "prime_list = [] \nfor num in range(100): \n    if num > 1:\n        for i in range(2, num): \n            if (num % i) == 0: \n                break\n        else:\n            prime_list.append(num) \nprint(prime_list)", "category": "Python"}, {"instruction": "Write a function that takes a given string and its length as input arguments and then prints the string reversely.", "input": "string = \"Hello world\"", "output": "def stringReverse(string, length): \n    for i in range(length - 1, -1, -1): \n        print(string[i], end=\"\") \n  \nstringReverse(\"Hello world\", 11)", "category": "Python"}, {"instruction": "Construct an algorithm to solve this coding problem", "input": "Given two sorted linked lists, print a list with all the integers of the two lists as a single sorted list.", "output": "def print_sorted_list(list1, list2): \n    result = [] \n    while list1 and list2: \n        if list1.value > list2.value: \n            result.append(list2.value) \n            list2 = list2.next \n        else: \n            result.append(list1.value) \n            list1 = list1.next \n    if list1: \n        result.extend(list1) \n    if list2: \n        result.extend(list2) \n    return result", "category": "Python"}, {"instruction": "Provide output for given input using this Python code", "input": "message = \"Hello World!\"\nfunction(message)\n\ndef function(x): \n    return x[::-1]", "output": "\"!dlroW olleH\"", "category": "Python"}, {"instruction": "Create a code that take an input of the list of integers, and outputs even numbers from the list.", "input": "numbers = [2, 3, 4, 5, 6, 7, 8]", "output": "def get_even_numbers(numbers):\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n\nget_even_numbers(numbers)", "category": "Python"}, {"instruction": "Given a vector x containing N elements, write a Python function to compute and return the sum.", "input": "x = [2, 3, 5, 7, 11]", "output": "def sum_vector(x):\n    \"\"\"Returns the sum of all elements in a vector x.\"\"\"\n    total = 0\n    for num in x:\n        total += num\n    return total\n\nsum_vector(x) # returns 28", "category": "Python"}, {"instruction": "Create a code that takes in a sentence and outputs counts of each word and its frequency (how often it occurred).", "input": "sentence = \"This is an example sentence to test the word count code.\"", "output": "def count_words(sentence):\n    word_count = {}\n    for word in sentence.split():\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count\n\ncount_words(sentence)", "category": "Python"}, {"instruction": "Edit this code to make the function take an integer n as an argument and print the fibonacci series till nth term.", "input": "n = 10", "output": "def fibonacci(n):\n    \"\"\"Prints the fibonacci series till the nth term\"\"\"\n    # set initial values\n    a = 0\n    b = 1\n    # check for valid input\n    if n < 0:\n        print('Please enter a positive number')\n    elif n == 0:\n        print('0')\n    elif n == 1:\n        print('0, 1')\n    else:\n        # print first two terms\n        print('0, 1', end=', ')\n        for i in range(2,n):\n            c = a + b\n            print(c, end=', ')\n            # update values\n            a = b\n            b = c\n\nn = 10\nfibonacci(n) # 0, 1, 1, 2, 3, 5, 8, 13, 21, 34", "category": "Python"}, {"instruction": "Create a loop that prints out numbers from 0 to 15, except skip numbers 6, 7, and 12.", "input": "", "output": "for num in range(16):\n if num not in [6, 7, 12]:\n    print(num)", "category": "Python"}, {"instruction": "Parse an XML document using Python.", "input": "", "output": "import xml.etree.ElementTree as ET\n\ntree = ET.parse(\"file.xml\")\nroot = tree.getroot()\n\nfor child in root:\n    print(f\"{child.tag}: {child.text}\")", "category": "Python"}, {"instruction": "Generate a Python function to get the index of a given string from a list of strings.", "input": "list_of_strings = [\"apple\", \"banana\", \"cherry\"]", "output": "def find_index(list_of_strings, target_string):\n    for i, string in enumerate(list_of_strings):\n        if string == target_string:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Manipulate a given list in Python where every element in the list has to be doubled.", "input": "my_list = [1, 2, 3, 4]", "output": "my_list = [2, 4, 6, 8]", "category": "Python"}, {"instruction": "Create a tensorflow model that recognizes handwritten digits from the MNIST dataset.", "input": "", "output": "import tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Flatten\nfrom tensorflow.keras.models import Sequential\n\n# Load the MNIST data\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n\n# Normalizing the intensities\nx_train = x_train/255\nx_test = x_test/255\n\n# Build the model\nmodel = Sequential()\nmodel.add(Flatten(input_shape=(28, 28)))  # flattening input data\nmodel.add(Dense(128, activation='relu'))  # hidden layers\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))  # output layer\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(x_train, y_train, validation_split=0.2, epochs=3)\n\n# Evaluate the model\nmodel.evaluate(x_test, y_test)", "category": "Python"}, {"instruction": "Create a Boolean expression in Python to check if a number is a multiple of 5.", "input": "", "output": "# Boolean expression\n# Checks to see if x is a multiple of 5\ndef is_multiple_of_5(x):\n    return x % 5 == 0", "category": "Python"}, {"instruction": "Underline the correct option regarding the statement below\nA Python code to print the first 5 Fibonacci numbers is:", "input": "", "output": "A. print(1, 1, 2, 3, 5) \nB. print(0, 1, 2, 3, 5) \nC. print(1, 1, 3, 5, 8) \nD. print(0, 1, 1, 2, 3)\n\nD. print(0, 1, 1, 2, 3)", "category": "Python"}, {"instruction": "Write a function to find the first prime number after the given number.", "input": "num = 5", "output": "def find_next_prime(num):\n    # check for all the numbers starting from num\n    for number in range(num+1, num + 1000):\n        # iterate from 2 to number\n        for factor in range(2, number):\n            # check if the number is prime\n            if number % factor == 0:\n                break\n        else:\n            # return the first prime\n            return number\n\nif __name__ == \"__main__\":\n    print(find_next_prime(5)) # prints 7", "category": "Python"}, {"instruction": "Write an algorithm that returns the word with the most vowels in the sentence.", "input": "The quick brown fox jumps over the lazy dog.", "output": "def most_vowels(sentence):\n    # Split sentence into words\n    words = sentence.split(\" \")\n    # Keep track of our highest vowel count and the associated word\n    highest_count = 0\n    most_vowels_word = \"\"\n    # Count the number of vowels in each word\n    for word in words:\n        num_vowels = 0\n        for c in word:\n            if c.lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                num_vowels += 1\n        # Store word if it has the highest vowel count\n        if num_vowels > highest_count:\n            highest_count = num_vowels\n            most_vowels_word = word\n    return most_vowels_word\n\nif __name__ == \"__main__\":\n    print(most_vowels(\"The quick brown fox jumps over the lazy dog.\")) # prints brown", "category": "Python"}, {"instruction": "Write a function in Python to generate a random alphanumeric string with a length of 5 characters.", "input": "", "output": "import random\nimport string\n\ndef generate_random_str():\n    letters = string.ascii_letters + string.digits\n    return ''.join(random.choice(letters) for i in range(5))", "category": "Python"}, {"instruction": "Write a function to calculate the value of the mathematical series:", "input": "x = 2", "output": "def calculate_series(x):\n    \"\"\" Calculate the value of the mathematical series \"\"\"\n    result = 0\n    for i in range(1, x + 1):\n        result += (1 / (i * i))\n    return result\n    \nif __name__ == \"__main__\":\n    result = calculate_series(2)\n    print(result) # prints 1.25", "category": "Python"}, {"instruction": "Keep only the characters from the input string that have a numerical value from 0 to 9.", "input": "The number is 559", "output": "input_str = \"The number is 559\"\n\noutput_str = \"\".join([i for i in input_str if i.isnumeric()])\n\nprint(output_str) # prints 559", "category": "Python"}, {"instruction": "Create a class in Python that keeps the track records of animals in the zoo.", "input": "", "output": "class Zoo:\n    def __init__(self):\n        self.records = {}\n\n    def add_record(self, animal, count):\n        if animal in self.records:\n            self.records[animal] += count\n        else:\n            self.records[animal] = count\n\n    def get_count(self, animal):\n        if animal in self.records:\n            return self.records[animal]\n        else:\n            return 0", "category": "Python"}, {"instruction": "Write a Python code snippet to find the index of the second occurrence of a substring in a given string.", "input": "\"Python is an interpreted, high-level, general-purpose programming language.\"\n\"general-purpose\"", "output": "import re \n  \nstring = \"Python is an interpreted, high-level, general-purpose programming language.\"\nsubstring = \"general-purpose\"\n\nsecond_occurrence = [(m.start(0)) for m in re.finditer(substring, string)][1]\nprint('The second occurrence of the substring starts at index:', second_occurrence)", "category": "Python"}, {"instruction": "Using the code given below, add classes to the navigation links on the page to make them display horizontally instead of vertically.", "input": "<ul>\n  <li><a href=\"#\">Home</a></li>\n  <li><a href=\"#\">About</a></li>\n  <li><a href=\"#\">Contact</a></li>\n</ul>", "output": "<ul class=\"horizontal-list\">\n  <li><a href=\"#\" class=\"horizontal-item\">Home</a></li>\n  <li><a href=\"#\" class=\"horizontal-item\">About</a></li>\n  <li><a href=\"#\" class=\"horizontal-item\">Contact</a></li>\n</ul>", "category": "Python"}, {"instruction": "Edit the following code to allow for the user to input an unlimited list of numbers.", "input": "", "output": "# Prime numbers between 2 and n\n\nn = int(input(\"Enter a positive integer: \"))\n\n# Initially assuming all integers between 2 and n are prime\nprimeArray = [True] * (n + 1)\n\n# Create list of prime numbers\nfor p in range(2, n+1): \n    # If prime[p] is not changed, then it is a prime \n    if primeArray[p]== True: \n        # Update all multiples of p \n        for i in range(2*p,n+1,p): \n            primeArray[i] = False\n\n# Print all prime numbers \nfor i in range(2,n+1): \n    if primeArray[i]: \n        print(i, end=\" \")", "category": "Python"}, {"instruction": "Write a code to store the user input in a list and then find the average of the items in the list.", "input": "", "output": "numbers = []\nwhile True:\n    user_input = input('input a number (input \"done\" to finish): ')\n    if user_input.lower() == \"done\":\n        break\n    numbers.append(float(user_input))\n\navg = sum(numbers) / len(numbers)\nprint('The average is', avg)", "category": "Python"}, {"instruction": "What are the benefits of using the break statement in a loop?", "input": "", "output": "The break statement is often used to terminate a loop prematurely if a certain condition is met. This can provide an efficient way to end a loop when a condition is found and can help improve the readability and performance of the code. Additionally, it can be used to handle any exceptions that may occur while the loop is running.", "category": "Python"}, {"instruction": "Import the pandas library in Python.", "input": "", "output": "import pandas as pd", "category": "Python"}, {"instruction": "Given a list of strings, return a new list with the longest strings.", "input": "str_list = [\"Hello\", \"world\", \"This\", \"is\", \"a\", \"sentence\"]", "output": "def longest_strings(str_list): \n\tlongest_str = [] \n\t\n\tfor s in str_list: \n\t\tif len(s) == max(map(len, str_list)): \n\t\t\tlongest_str.append(s) \n\t\n\treturn longest_str \n\nprint(longest_strings([\"Hello\", \"world\", \"This\", \"is\", \"a\", \"sentence\"])) # Output: [\"Hello\", \"world\", \"sentence\"]", "category": "Python"}, {"instruction": "Create an array of size 10, initialize the array elements with random values between 1 to 10.", "input": "", "output": "import random \narr = []\n\nfor _ in range(10):\n    elem = random.randint(1,10)\n    arr.append(elem)\n\nprint(arr)", "category": "Python"}, {"instruction": "Create a FizzBuzz program.", "input": "", "output": "\"\"\"\nCreate a FizzBuzz program\n\"\"\"\nfor num in range(1, 101):\n    if num % 3 == 0 and num % 5 == 0:\n        print(\"FizzBuzz\")\n    elif num % 3 == 0:\n        print(\"Fizz\")\n    elif num % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print(num)", "category": "Python"}, {"instruction": "Write code in Python to retrieve the top 10 Rated Movies in IMDB.", "input": "", "output": "import requests\nimport json\n\nurl = 'https://imdb-api.com/documentation/top-rated/all}'\nresponse = requests.get(url)\ndata = json.loads(response.text)\nmovies = data['results'][:10]\n\nfor movie in movies:\n    title = movie['title']\n    rating = movie['rating']\n    print(f\"{title}: {rating}\")", "category": "Python"}, {"instruction": "Edit the code in Python so that the function returns the highest odd number in the list.", "input": "def highest_odd_number(numbers):\n    highest = 0\n    for number in numbers:\n        if number % 2 != 0 and number > highest:\n            highest = number\n    return number", "output": "def highest_odd_number(numbers):\n    highest = 0\n    for number in numbers:\n        if number % 2 != 0 and number > highest:\n            highest = number\n    return highest", "category": "Python"}, {"instruction": "Create a program in Python to generate a random string using the given characters.", "input": "characters = 'abcdefghijklmnopqrstuvwxyz'", "output": "import random\n\ndef generate_random_string(characters):\n    random_string = \"\"\n    for i in range(10):\n        random_string += random.choice(characters)\n    return random_string\n\ncharacters = 'abcdefghijklmnopqrstuvwxyz'\nprint(generate_random_string(characters))", "category": "Python"}, {"instruction": "Convert this code to a function which takes a dictionary as an argument and adds the given key value pair to it.", "input": "my_dict = {'name': 'John'}\nkey = 'age'\nvalue = 18", "output": "def add_key_value_pair(my_dict, key, value):\n    \"\"\"Adds the given key value pair to the dictionary\"\"\"\n    if key not in my_dict:\n        my_dict[key] = value\n    return my_dict\n\nmy_dict = {'name': 'John'}\nkey = 'age'\nvalue = 18\n\nupdated_dict = add_key_value_pair(my_dict, key, value)\nprint(updated_dict) # {'name': 'John', 'age': 18}", "category": "Python"}, {"instruction": "Create a singleton class.", "input": "", "output": "class SingletonClass:\n    _instance = None\n \n    def __new__(self):\n        if not self._instance:\n            self._instance = super().__new__(self)\n        return self._instance\n\n# testing\nobj1 = SingletonClass()\nobj2 = SingletonClass()\n\nif obj1 is obj2:\n    print('obj1 and obj2 are the same instance')", "category": "Python"}, {"instruction": "Generate a random password which contains 8 characters including characters, digits, and symbols.", "input": "", "output": "import string\nimport random\n\ndef generate_password():\n    # get all letters and digits\n    chars = string.ascii_letters + string.digits + string.punctuation\n\n    # generate a 8 character password from chars\n    password = ''.join(random.sample(chars, 8))\n\n    return password\n\n# example\npassword = generate_password()\nprint(password) # >$z]e#43", "category": "Python"}, {"instruction": "Modify this code to make it a function which takes a list of numbers and returns their average.", "input": "list_of_numbers = [1, 4, 5, 6, 8]", "output": "def get_average(list_of_numbers):\n    \"\"\"Returns average of the given list of numbers\"\"\"\n    if list_of_numbers:\n        return sum(list_of_numbers)/len(list_of_numbers)\n    return\n\nlist_of_numbers = [1, 4, 5, 6, 8]\n\naverage = get_average(list_of_numbers)\n\nprint(average) # 5", "category": "Python"}, {"instruction": "Design a password validation system using Python code.", "input": "", "output": "import re\n\nMIN_LENGTH = 8\nMAX_LENGTH = 15\n\ndef is_valid_password(password):\n    \n    #check password length\n    if len(password) < MIN_LENGTH or len(password) > MAX_LENGTH:\n        return False\n\n    #check for at least one digit\n    if re.search(r\"[0-9]\",password) is None:\n        return False\n    \n    #check for at least one uppercase letter\n    if re.search(r\"[A-Z]\",password) is None:\n        return False\n    \n    #check for at least one lowercase letter\n    if re.search(r\"[a-z]\",password) is None:\n        return False\n    \n    #check for at least one special character  \n    if re.search(r\"[!#$%&'()*+,-./:;<=>?@[\\] ^_`{|}~]\",password) is None:\n        return False\n\n    #if all conditions are met, password is valid\n    return True", "category": "Python"}, {"instruction": "Generate a function to check for the largest common divisor between two numbers.", "input": "", "output": "def gcd(a, b): \n    if a == 0 : \n        return b \n    return gcd(b % a, a)", "category": "Python"}, {"instruction": "Generate a function to calculate the grade of a student based on their marks.", "input": "", "output": "def calculateGrade(score):\n    if score >= 90:\n        return \"A\"\n    elif score >= 80:\n        return \"B\"\n    elif score >= 70:\n        return \"C\"\n    elif score >= 60:\n        return \"D\"\n    else:\n        return \"F\"", "category": "Python"}, {"instruction": "Construct a for-loop with a break clause.", "input": "", "output": "for i in range(0, 10):\n    if i == 7:\n        break\n    print(i)", "category": "Python"}, {"instruction": "Write a code to simulate Conway\u2019s Game of Life.", "input": "", "output": "\"\"\"\nWrite a code to simulate Conway\u2019s Game of Life\n\"\"\"\n\nimport numpy as np\n\ndef conways_game_of_life(state, iterations):\n    # make a copy of the game state\n    game_state = np.copy(state)\n    # loop over the number of iterations\n    for _ in range(iterations):\n        # calculate the number of neighbors for each cell\n        num_neighbors = (game_state[0:-2,0:-2] + game_state[0:-2,1:-1] + game_state[0:-2,2:] +\n                        game_state[1:-1,0:-2] + game_state[1:-1,2:] +\n                        game_state[2:,0:-2] + game_state[2:,1:-1] + game_state[2:,2:]).astype(np.uint8)\n        # decide if a cell should live or die based on the number of neighbors\n        game_state[1:-1, 1:-1][(num_neighbors == 2) | (num_neighbors == 3)] = 1\n        game_state[1:-1, 1:-1][(num_neighbors != 2) & (num_neighbors != 3)] = 0\n    # return the modified current state\n    return game_state", "category": "Python"}, {"instruction": "Write a code to train a random forest classifier for a given dataset.", "input": "Dataset features: 5 features, 100 instances, 1000 estimators", "output": "\"\"\"\nWrite a code to train a random forest classifier for a given dataset\n\"\"\"\n\n# import the packages\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import make_classification\n\n# Create the dataset\nX, y = make_classification(n_samples=100, n_features=5, n_classes=2)\n\n# Create and train the random forest classifier\nclf = RandomForestClassifier(n_estimators=1000)\nclf.fit(X, y)", "category": "Python"}, {"instruction": "Count the number of vowels in the given sentence and print the result.", "input": "Sentence: There is no shortcut to success", "output": "\"\"\"\nCount the number of vowels in the given sentence and print the result\n\"\"\"\n\n# given sentence\nsentence = 'There is no shortcut to success'\n\n# count the vowels in the sentence\nvowels = 0\nfor char in sentence:\n    if char in 'aeiou':\n        vowels += 1\n# Print the number of vowels\nprint('Number of Vowels: ', vowels)", "category": "Python"}, {"instruction": "Generate the Fibonacci sequence of length 10 and print the result.", "input": "", "output": "\"\"\"\nGenerate the Fibonacci sequence of length 10 and print the result\n\"\"\"\n\ndef get_fibonacci_sequence(length):\n    a, b = 0, 1\n    # generate the Fibonacci sequence\n    sequence = []\n    for _ in range(length):\n        sequence.append(a)\n        a, b = b, a + b\n    # return the Fibonacci sequence\n    return sequence\n\n# get the Fibonacci sequence of length 10\nfib_sequence = get_fibonacci_sequence(10)\n# print the Fibonacci sequence\nprint(fib_sequence)", "category": "Python"}, {"instruction": "Compute the hamming distance between two strings and print the result.", "input": "String1: 'hello'\nString2: 'world'", "output": "\"\"\"\nCompute the hamming distance between two strings and print the result\n\"\"\"\n\ndef calc_hamming_distance(str1, str2):\n    # Calculate the hamming distance\n    dist = 0\n    for i, j in zip(str1, str2):\n        if i != j:\n            dist+=1\n    # Print the Hamming Distance\n    print('Hamming Distance: ', dist)\n    \ncalc_hamming_distance('hello','world')", "category": "Python"}, {"instruction": "Design an algorithm to detect the pattern of spikes in an EEG.", "input": "", "output": "\"\"\"\nDesign an algorithm to detect the pattern of spikes in an EEG\n\"\"\"\n\nimport numpy as np\n\ndef detect_spike_pattern(eeg_data):\n    # Compute power spectrum of the EEG data\n    power_spectra = np.abs(np.fft.rfft(eeg_data))\n    # Detect spikes by finding peaks in the power spectrum\n    spikes = np.where(power_spectra > np.mean(power_spectra) + np.std(power_spectra))[0]\n    # Construct the spike pattern using differences between consecutive spikes\n    pattern = [spikes[i+1] - spikes[i] for i in range(len(spikes)-1)]\n    return pattern", "category": "Python"}, {"instruction": "Given a list of strings, write a function that filters out all strings that have length less than two characters.", "input": "my_list = [\"Hello\",\"Hi\",\"How\",\"Are\",\"You\"]", "output": "def filter_length(strings):\n    new_list = []\n    for string in strings:\n        if len(string) >= 2:\n            new_list.append(string)\n    return new_list\n\nmy_list = [\"Hello\",\"Hi\",\"How\",\"Are\",\"You\"]\n\nprint(filter_length(my_list))", "category": "Python"}, {"instruction": "Generate a class like this using SQLAlchemy.", "input": "class Foo:\n    id = Column(Integer, primary_key=True)\n    bar = Column(String)", "output": "from sqlalchemy import Column, Integer, String\n\nclass Foo(Base):\n    __tablename__ = 'foo'\n    id = Column(Integer, primary_key=True)\n    bar = Column(String)", "category": "Python"}, {"instruction": "Construct an API call in Python that returns information about a given book.", "input": "", "output": "import requests\n\nurl = \"http://openlibrary.org/api/books\"\n \nquerystring = {\"bibkeys\":\"ISBN:0201558025\",\"format\":\"json\",\"jscmd\":\"data\"}\n\nheaders = {\n    'cache-control': \"no-cache\",\n    }\n \nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n \nprint(response.text)", "category": "Python"}, {"instruction": "Convert this JSON string into a dictionary in Python: {\"Name\": \"John\", \"Age\": 35}.", "input": "{\"Name\": \"John\", \"Age\": 35}", "output": "my_dictionary = {\n  'Name': 'John',\n  'Age': 35\n  }", "category": "Python"}, {"instruction": "Construct an object in Python containing three elements.", "input": "", "output": "my_object = {\n  'element1': 1,\n  'element2': 2,\n  'element3': 3\n}", "category": "Python"}, {"instruction": "Replace the \u201cTODO\u201d comment in the code with the proper code to print each element of the list on a new line using Python.", "input": "input_list = [10, 15, 20, 25, 30]", "output": "for element in input_list:\n    print(element)", "category": "Python"}, {"instruction": "Write an efficient Python program to reverse a string.", "input": "testString = \"Hello World\"", "output": "def reverseString(testString): \n    reversedString = \"\"\n    for char in testString: \n        reversedString = char + reversedString\n    return reversedString\n\nprint(reverseString(testString))", "category": "Python"}, {"instruction": "Reorganize the given Python code such that two functions are created.", "input": "def greet_to(name):\n    \"\"\"Print a greeting to the name provided.\"\"\"\n    # assert name is a string\n    assert isinstance(name, str), \"name must be a string\"\n    print(\"Hello, \" + name + \"!\")", "output": "def check_name(name):\n    \"\"\"Check whether the name is a string\"\"\"\n    assert isinstance(name, str), \"name must be a string\"\n\ndef greet_to(name):\n    \"\"\"Print a greeting to the name provided.\"\"\"\n    check_name(name)\n    print(\"Hello, \" + name + \"!\")", "category": "Python"}, {"instruction": "Write code in Python to create a dictionary with names as keys and phone numbers as values.", "input": "names = [\"Alice\", \"Bob\", \"Peter\", \"John\"]\nphone_numbers = [\"1234567\", \"7654321\", \"246810\", \"13579\"]", "output": "names = [\"Alice\", \"Bob\", \"Peter\", \"John\"]\nphone_numbers = [\"1234567\", \"7654321\", \"246810\", \"13579\"]\n\nname_and_phone = dict(zip(names, phone_numbers))\nprint(name_and_phone)", "category": "Python"}, {"instruction": "Write a code in Python to convert a string of text to its equivalent uppercase characters.", "input": "str_lower_case = \"hello world\"", "output": "str_upper_case = str_lower_case.upper()", "category": "Python"}, {"instruction": "Create a function to return all students with a given grade.", "input": "students = [\n {'name': 'John', 'grade': 'A'},\n {'name': 'Jane', 'grade': 'B'},\n {'name': 'Dave', 'grade': 'A'},\n {'name': 'Chris', 'grade': 'C'},\n]", "output": "def get_students_by_grade(students,grade):\n    \"\"\"Returns a list of students with a given grade.\"\"\"\n    filtered_list = []\n    for student in students:\n        if student[\"grade\"] == grade:\n            filtered_list.append(student)\n    return filtered_list\n\nget_students_by_grade(students, 'A') # returns [{'name': 'John', 'grade': 'A'}, {'name': 'Dave', 'grade': 'A'}]", "category": "Python"}, {"instruction": "Write a Python 3 script to print out all the words in the string 'I love coding'.", "input": "", "output": "words = \"I love coding\"\nfor word in words.split():\n    print(word)", "category": "Python"}, {"instruction": "Analyze the given JSON data and find the name of the user with the highest 'score' attribute.", "input": "[\n {\n \u201cname\u201d: \u201cJohn\u201d,\n \u201cscore\u201d: 80\n },\n {\n \u201cname\u201d: \u201cJane\u201d,\n \u201cscore\u201d: 95\n },\n {\n \u201cname\u201d: \u201cTom\u201d,\n \u201cscore\u201d: 67\n }\n]", "output": "import json\n\ndata = json.loads(input)\nhighestScore = 0\nhighestName = \"\"\n\nfor d in data:\n    if d[\"score\"] > highestScore:\n        highestScore = d[\"score\"]\n        highestName = d[\"name\"]\n\nprint(highestName)", "category": "Python"}, {"instruction": "Write a code to convert a given English sentence into Pig Latin.", "input": "", "output": "\"\"\"\nWrite a code to convert a given English sentence into Pig Latin.\n\"\"\"\n\ndef pig_latin(sentence):\n    vowel = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    words = sentence.split(\" \")\n    pig_latin_words = []\n\n    for word in words:\n        if word[0] in vowel:\n            pig_latin_words.append(word + \"way\")\n        else:\n            pig_latin_words.append(word[1:] + word[0] + \"ay\")\n    \n    return \" \".join(pig_latin_words)\n\nif __name__ == \"__main__\":\n    sentence = \"This is a sample sentence\"\n    print(pig_latin(sentence))", "category": "Python"}, {"instruction": "Write a Python program to group the values of a given list of elements based on the size of the elements.", "input": "", "output": "\"\"\"\nWrite a Python program to group the values of a given list of elements based on the size of the elements.\n\"\"\"\n\ndef group_values(values):\n    result = {}\n    for value in values:\n        size = len(value)\n        if size not in result:\n            result[size] = []\n        result[size].append(value)\n    return result\n\nif __name__ == \"__main__\":\n    values = ['cat', 'dog', 'monkey', 'elephant', 'giraffe']\n    print(group_values(values))", "category": "Python"}, {"instruction": "Create a function that sorts a dictionary of words and their frequencies alphabetically.", "input": "dict = {\n  'the': 10,\n  'at': 3,\n  'hello': 5,\n  'cat': 1,\n  'counter': 2\n}", "output": "\"\"\"\nCreate a function that sorts a dictionary of words and their frequencies alphabetically.\n\"\"\"\n\ndef sort_dictionary(dictionary):\n    return dict(sorted(dictionary.items(), key=lambda x: x[0]))\n\nif __name__ == \"__main__\":\n    dict = {\n        'the': 10,\n        'at': 3,\n        'hello': 5,\n        'cat': 1,\n        'counter': 2\n    }\n\n    print(sort_dictionary(dict))", "category": "Python"}, {"instruction": "Write a Python code to calculate the maximum temperature for today based on a forecast of the seven-day forecast.", "input": "forecast = [\n  {'day': 'Monday', 'description': 'sunny', 'temperature': 28},\n  {'day': 'Tuesday', 'description': 'sunny', 'temperature': 30},\n  {'day': 'Wednesday', 'description': 'cloudy', 'temperature': 28},\n  {'day': 'Thursday', 'description': 'raining', 'temperature': 25},\n  {'day': 'Friday', 'description': 'raining', 'temperature': 24},\n  {'day': 'Saturday', 'description': 'cloudy', 'temperature': 25},\n  {'day': 'Sunday', 'description': 'sunny', 'temperature': 27}\n]", "output": "\"\"\"\nWrite a Python code to calculate the maximum temperature for today based on a forecast of the seven-day forecast\n\"\"\"\n\nimport datetime\n\ndef get_max_temperature_today(forecast):\n    today = datetime.datetime.today().weekday()\n    \n    max_temp = None\n    for day in forecast:\n        if day['day'] == today:\n            max_temp = max(max_temp, day['temperature'])\n    \n    return max_temp\n  \nif __name__ == \"__main__\":\n    forecast = [\n  {'day': 'Monday', 'description': 'sunny', 'temperature': 28},\n  {'day': 'Tuesday', 'description': 'sunny', 'temperature': 30},\n  {'day': 'Wednesday', 'description': 'cloudy', 'temperature': 28},\n  {'day': 'Thursday', 'description': 'raining', 'temperature': 25},\n  {'day': 'Friday', 'description': 'raining', 'temperature': 24},\n  {'day': 'Saturday', 'description': 'cloudy', 'temperature': 25},\n  {'day': 'Sunday', 'description': 'sunny', 'temperature': 27}\n]\n\nprint(get_max_temperature_today(forecast))", "category": "Python"}, {"instruction": "Create a tree structure using the provided Python dictionary.", "input": "dict = {\n  1: {\n    'parent': 0,\n    'children': [2, 3, 4]\n  },\n  2: {\n    'parent': 1,\n    'children': []\n  },\n  3: {\n    'parent': 1,\n    'children': [5, 6]\n  },\n  4: {\n    'parent': 1,\n    'children': [7]\n  },\n  5: {\n    'parent': 3,\n    'children': []\n  },\n  6: {\n    'parent': 3,\n    'children': []\n  }\n  7: {\n    'parent': 4,\n    'children': []\n  }\n}", "output": "\"\"\"\nCreate a tree structure using the Python dictionary provided\n\"\"\"\n\nclass TreeNode:\n    def __init__(self, value=None, parent=None, children=None):\n        self.value = value\n        self.parent = parent\n        self.children = children if children is not None else []\n    \n    def __repr__(self):\n        return f\"TreeNode({self.value}, {self.parent.value}, {[c.value for c in self.children]})\"\n    \n    def __str__(self):\n        return self.__repr__()\n\ndef create_tree_structure(data):\n    tree = dict()\n    for k, v in data.items():\n        parent = v[\"parent\"]\n        tree[k] = TreeNode(value=k, parent=tree.get(parent), children=list())\n        if parent in tree:\n            tree[parent].children.append(tree[k])\n    return tree\n\nif __name__ == \"__main__\":\n    dict = {\n        1: {\n            'parent': 0,\n            'children': [2, 3, 4]\n        },\n        2: {\n            'parent': 1,\n            'children': []\n        },\n        3: {\n            'parent': 1,\n            'children': [5, 6]\n        },\n        4: {\n            'parent': 1,\n            'children': [7]\n        },\n        5: {\n            'parent': 3,\n            'children': []\n        },\n        6: {\n            'parent': 3,\n            'children': []\n        },\n        7: {\n            'parent': 4,\n            'children': []\n        }\n    }\n    tree = create_tree_structure(dict)\n    print(tree)", "category": "Python"}, {"instruction": "Edit the following code to print a statement if the given list has no elements.", "input": "def print_list_elements(list):\n    if len(list)>0:\n        for element in list:\n            print(element)", "output": "def print_list_elements(list):\n    if len(list)>0:\n        for element in list:\n            print(element)\n    else:\n        print(\"The list has no elements.\") #This edited code will print a statement if the given list has no elements.", "category": "Python"}, {"instruction": "Write a Python program to fetch and print the top five headlines from a given news website.", "input": "News Website: CNN", "output": "import requests\nfrom bs4 import BeautifulSoup\n \nurl = 'http://www.cnn.com/'\nresponse = requests.get(url)\nhtml_content = response.text\n \nsoup = BeautifulSoup(html_content, \"lxml\")\ntop_headlines = soup.find_all('h3',{'class':'cd__headline'})\n \nfor headline in top_headlines[:5]:\n print(headline.text)", "category": "Python"}, {"instruction": "Write an efficient Python program to remove duplicate characters from the given string.", "input": "String: Hello world", "output": "He lwrd", "category": "Python"}, {"instruction": "Write a function to give the intersection of two unsorted linked lists.", "input": "", "output": "def intersection(head1, head2):\n    s = set()\n    current1 = head1\n    current2 = head2\n    while current1 is not None:\n        s.add(current1.data)\n        current1 = current1.next\n    result = []\n    while current2 is not None:\n        if current2.data in s:\n            result.append(current2.data)\n        current2  = current2.next\n    return result", "category": "Python"}, {"instruction": "Suggest a better approach to sort the given array.", "input": "[4, 3, 8, 6, 7, 9, 2, 1]", "output": "def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range (1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    left = quick_sort(left)\n    right = quick_sort(right)\n    return left + [pivot] + right", "category": "Python"}, {"instruction": "Add the following Python function to generate a Fibonacci sequence.", "input": "def fibonacci_sequence(n):\n    \"\"\"Generate a Fibonacci sequence up to n.\"\"\"", "output": "def fibonacci_sequence(n):\n    \"\"\"Generate a Fibonacci sequence up to n.\"\"\"\n    result = []\n\n    first, second = 0, 1\n    while first < n:\n        result.append(first)\n        first, second = second, first + second\n    \n    return result", "category": "Python"}, {"instruction": "Create a Python program to merge two lists by alternating elements.", "input": "list1 = [2, 3, 5, 7]; \nlist2 = [4, 8, 10];", "output": "def merge(list1, list2):\n    mergedList = []\n    for x,y in zip_longest(list1,list2): \n        mergedList.extend([x,y]) \n    return mergedList", "category": "Python"}, {"instruction": "Sort an array of characters in alphabetic order.", "input": "['x', 'q', 'b', 'j']", "output": "\"\"\"\nSort an array of characters in alphabetic order\n\"\"\"\n\ndef sort_alphabetically(arr):\n    arr.sort()\n    return arr\n\nif __name__ == '__main__':\n    print(sort_alphabetically(['x', 'q', 'b', 'j']))", "category": "Python"}, {"instruction": "Code a function to solve the Tower of Hanoi puzzle.", "input": "", "output": "\"\"\"\nCode a function to solve the Tower of Hanoi puzzle\n\"\"\"\n\ndef tower_of_hanoi(n, source, aux, dest): \n    if n == 1: \n        print(\"Move disk 1 from rod\", source, \"to rod\", dest)\n        return\n    tower_of_hanoi(n-1, source, dest, aux) \n    print(\"Move disk\", n, \"from rod\", source, \"to rod\", dest) \n    tower_of_hanoi(n-1, aux, source, dest) \n\nif __name__ == '__main__':\n    n = 3\n    tower_of_hanoi(n, 'A', 'B', 'C')", "category": "Python"}, {"instruction": "Create a program to calculate the area and the perimeter of a rectangle.", "input": "length = 4\nwidth = 5", "output": "\"\"\"\nCreate a program to calculate the area and the perimeter of a rectangle\n\"\"\"\n\ndef area_perimeter(length, width): \n    area = length * width\n    perimeter = 2 * (length + width)\n    return area, perimeter\n\nif __name__ == '__main__':\n    print(area_perimeter(4, 5))", "category": "Python"}, {"instruction": "Write a code which generates the Fibonacci sequence.", "input": "", "output": "\"\"\"\nWrite a code which generates the Fibonacci sequence\n\"\"\"\n\ndef generate_fibonacci_sequence(n): \n    a = 0\n    b = 1\n    if n == 1: \n        print(a) \n    else: \n        print(a) \n        print(b) \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n            print(c) \n\nif __name__ == '__main__':\n    n = 9\n    generate_fibonacci_sequence(n)", "category": "Python"}, {"instruction": "Create a function that takes in a list and an index and swaps the elements at the given indices.", "input": "list = [1, 2, 3, 4]\nindex_1 = 0\nindex_2 = 2", "output": "def swap_elements(lst, index_1, index_2):\n    '''This function takes in a list and two indices and swaps the elements at the given indices.'''\n    lst[index_1], lst[index_2] = lst[index_2], lst[index_1]\n    return lst", "category": "Python"}, {"instruction": "Create a function to determine whether one string is a substring of another.", "input": "string_1 = \"abcdefgh\"\nstring_2 = \"efg\"", "output": "def is_substring(string_1, string_2):\n    '''This function takes two strings and returns a boolean indicating whether\n    string_2 is a substring of string_1.'''\n    return string_2 in string_1", "category": "Python"}, {"instruction": "Create a function to find common elements in two lists.", "input": "list_1 = [1, 2, 3]\nlist_2 = [2, 3, 4]", "output": "def find_common_elements(list_1, list_2):\n    '''This function will find the common elements in two lists.'''\n    return [val for val in list_1 if val in list_2]", "category": "Python"}]
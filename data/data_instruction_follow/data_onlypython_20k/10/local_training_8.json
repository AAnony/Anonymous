[{"instruction": "Write a function to parse a string and return a set of unique words.", "input": "string = \"Hello world this is a test string\"", "output": "def parse(string):\n    words = set()\n    for word in string.split(\" \"):\n        words.add(word)\n    return words", "category": "Python"}, {"instruction": "You need to build an API endpoint to support role-based authentication.", "input": "User roles: 'admin', 'manager', 'employee'", "output": "def authentication(role):\n    if role == 'admin':\n        return 'Admin privileges granted.'\n    elif role == 'manager':\n        return 'Manager privileges granted.'\n    elif role == 'employee':\n        return 'Employee privileges granted.'\n    else:\n        return 'Login failed. Invalid role.'", "category": "Python"}, {"instruction": "Create a function \"getGrade\" to get a grade based on a numeric score.", "input": "", "output": "def getGrade(score):\n    if score >= 90:\n        return \"A\"\n    elif score >= 80:\n        return \"B\"\n    elif score >= 70:\n        return \"C\"\n    elif score >= 60:\n        return \"D\"\n    else:\n        return \"F\"", "category": "Python"}, {"instruction": "Generate a code that prints out all the perfect squares between 1 and 500.", "input": "", "output": "for i in range(1,501):\n    num = i**2\n    if num < 501:\n        print(num)", "category": "Python"}, {"instruction": "Generate a program that accepts an integer array and returns its median value", "input": "", "output": "def median(arr):\n    arr.sort()\n    if len(arr)%2 != 0:\n        return arr[len(arr)//2]\n    else:\n        return (arr[(len(arr)//2)-1]+arr[len(arr)//2])/2", "category": "Python"}, {"instruction": "Generate a python code program that removes punctuation from a given string.", "input": "", "output": "def remove_punctuation(s):\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    s_without_punct = \"\"\n    for char in s:\n        if char not in punctuations:\n            s_without_punct = s_without_punct + char\n    return s_without_punct", "category": "Python"}, {"instruction": "Rewrite the following function so that it takes in an int argument and returns the factorial of that number.", "input": "def calc_factorial(x):\n    total = 1\n    if x == 0:\n        return 1\n    for num in range(1, x+1):\n        total *= num \n    return total", "output": "def calc_factorial(x):\n    if x == 0:\n        return 1\n    else: \n        return x * calc_factorial(x - 1)", "category": "Python"}, {"instruction": "Given a list of integers, write a function that takes the list and returns only the odd numbers in the list.", "input": "", "output": "def extract_odd_numbers(numbers):\n    return [x for x in numbers if x % 2 != 0]", "category": "Python"}, {"instruction": "Create a code to generate a list of all numbers between a given start and end number.", "input": "start = 10\nend = 20", "output": "def create_list(start, end):\n    \"\"\"\n    Create a code to generate a list of all numbers between a given start and end number\n    \"\"\"\n    number_list = []\n    for num in range(start, end+1):\n        number_list.append(num)\n    return number_list\n\nstart = 10\nend = 20\n\nresult = create_list(start, end)\nprint(result) #[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]", "category": "Python"}, {"instruction": "For the given string, write a code to print out the longest word in the string.", "input": "test_string = \"This is an example sentence.\"", "output": "def longest_word_in_string(string):\n    \"\"\"\n    A function to print out the longest word in a given string\n    \"\"\"\n    words = string.split(\" \")\n    longest_word =  max(words, key=len)\n    return longest_word\n\ntest_string = \"This is an example sentence.\"\n\nlongest = longest_word_in_string(test_string)\nprint(longest) # example", "category": "Python"}, {"instruction": "Use TensorFlow to build a multi-layer perceptron to classify the MNIST digits.", "input": "", "output": "import tensorflow as tf\nimport numpy as np\n\n# Hyperparameters\nn_inputs = 784  # MNIST\nn_hidden1 = 512\nn_hidden2 = 256\nn_outputs = 10\n\n# Build a model\nX = tf.placeholder(tf.float32, shape=(None, n_inputs), name=\"X\")\ny = tf.placeholder(tf.int64, shape=(None), name=\"y\")\n\nwith tf.name_scope(\"dnn\"):\n    hidden1 = tf.layers.dense(X, n_hidden1, name=\"hidden1\",\n                              activation=tf.nn.relu)\n    hidden2 = tf.layers.dense(hidden1, n_hidden2, name=\"hidden2\",\n                              activation=tf.nn.relu)\n    logits = tf.layers.dense(hidden2, n_outputs, name=\"outputs\")", "category": "Python"}, {"instruction": "Calculate the frequency of occurrence of each letter in a word.", "input": "word = \"programming\"", "output": "def frequency_count(word):\n    # dictionary to store the frequency of occurrence\n    frequency = {}\n\n    # iterate through each character\n    for char in word:\n        # if the character is present in the frequency dictionary\n        if char in frequency:\n            # increase the count of the character\n            frequency[char] += 1\n        else:\n            # add the character to the dictionary and set its count to 1\n            frequency[char] = 1\n\n    return frequency\n\n# Calculate the frequency of occurrence\nfrequencies = frequency_count(word)\nprint(frequencies) # Output: {'p': 1, 'r': 2, 'o': 2, 'g': 2, 'a': 1, 'm': 1, 'i': 1, 'n': 1}", "category": "Python"}, {"instruction": "Write a Python script that prints out all of the letters of the alphabet one per line.", "input": "", "output": "for letter in 'abcdefghijklmnopqrstuvwxyz':\n    print(letter)", "category": "Python"}, {"instruction": "Write code to encrypt a string", "input": "", "output": "def encrypt_string(string):\n    encrypted_string = \"\" \n\n    for char in string:\n        encrypted_string += chr(ord(char) + 5)\n\n    return encrypted_string", "category": "Python"}, {"instruction": "Create a loop to print \"I love Python\" five times", "input": "", "output": "for i in range(5):\n    print(\"I love Python\")", "category": "Python"}, {"instruction": "Replace the placeholder text with a valid statement that sets the default value for the 'count' parameter of the function", "input": "def prints(word, count=TODO):\n    for i in range(count):\n        print(word)", "output": "def prints(word, count=0):\n    for i in range(count):\n        print(word)", "category": "Python"}, {"instruction": "Add a class attribute to the given Python class.", "input": "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "output": "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        self.grade = None", "category": "Python"}, {"instruction": "Edit this piece of code to work with negative numbers", "input": "def sum_positive(arr): \n    result = 0\n    for num in arr:\n        if num >= 0:\n            result += num\n    return result", "output": "def sum_positive(arr): \n    result = 0\n    for num in arr:\n        if num != 0:\n            result += abs(num)\n    return result", "category": "Python"}, {"instruction": "Write code to create a list of tuples that contains all the possible combinations of two elements taken from two different lists.", "input": "list1 = [1, 2, 3, 4]\nlist2 = [5, 6, 7, 8]", "output": "def combo(list1, list2):\n    result = []\n    for i in list1:\n        for j in list2:\n            result.append((i, j))\n    return result\n\ncombos = combo(list1, list2) # [(1, 5), (1, 6), (1, 7), (1, 8), (2, 5), (2, 6), (2, 7), (2, 8), (3, 5), (3, 6), (3, 7), (3, 8), (4, 5), (4, 6), (4, 7), (4, 8)]", "category": "Python"}, {"instruction": "Implement a code to print the indices of all occurrences of a number x in an array arr.", "input": "x = 5\narr = [1, 5, 2, 8, 5, 10]", "output": "def print_indices(x, arr):\n    indices = []\n    for i in range(len(arr)):\n        if arr[i] == x:\n            indices.append(i)\n    return indices\n\nprint(print_indices(x, arr))  # [1, 4]", "category": "Python"}, {"instruction": "Refactor this line of code to make it more concise.", "input": "tasks = [t for t in tasks if t.completed == False]", "output": "tasks = [t for t in tasks if not t.completed]", "category": "Python"}, {"instruction": "Create a class in Python thattracks the number of objects created.", "input": "", "output": "class CountObjects:\n  count = 0\n  def __init__(self):\n    CountObjects.count += 1\n \n  @classmethod\n  def get_count(cls):\n    return cls.count", "category": "Python"}, {"instruction": "Find the minimum among a list of integers.", "input": "[1, 15, 22, -5, 87]", "output": "def find_min(numbers):\n  min_value = numbers[0]\n  for n in numbers:\n    if n < min_value:\n      min_value = n\n  \n  return min_value\n  \nif __name__ == '__main__':\n  numbers = [1, 15, 22, -5, 87]\n  print(find_min(numbers))", "category": "Python"}, {"instruction": "Generate a syntax-correct program to calculate the sum of the elements in a given 2D array", "input": "", "output": "def sum_elements(arr):\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            sum += arr[i][j]\n    return sum", "category": "Python"}, {"instruction": "Print out the first 10 elements in the sequence interpreted by the rule F(n) = F(n-1) + F(n-2).", "input": "", "output": "def fibonacci(n): \n    \n    # Creating an array to store the sequence \n    f = [0] * (n + 2) \n      \n    # Initial values   \n    f[1] = 1\n      \n    # Calculating the terms \n    for i in range(2, n + 2): \n        f[i] = f[i - 1] + f[i - 2] \n    return f[1:n+1]\n  \nn = 10\nprint(fibonacci(n))", "category": "Python"}, {"instruction": "Create an object oriented program to print the Fibonacci sequence.", "input": "", "output": "class Fibonacci:\n    def __init__(self, num):\n        self.num = num\n \n    def fibo(self):\n        prev = 0\n        current = 1\n        next = 0\n        print(prev)\n        print(current)\n        for i in range(2,self.num):\n            next=prev+current\n            print(next)\n            prev=current\n            current=next\n \n# main program starts from here\nn= int(input(\"how many numbers to print: \"))\nfibo_obj=Fibonacci(n)\nfibo_obj.fibo()", "category": "Python"}, {"instruction": "Create a function that generates a random string of length n using alphabet characters.", "input": "", "output": "import string\nimport random\ndef random_string_generator(n):\n    letters = string.ascii_letters\n    return ''.join(random.choice(letters) for i in range(n))", "category": "Python"}, {"instruction": "Construct a sorting algorithm to sort an array in increasing order.", "input": "array = [4,7,1,3,9]", "output": "def bubble_sort(arr): \n    arr_length = len(arr)\n    # Iterate through entire array \n    for i in range(arr_length): \n        # Iterate through unsorted subarray \n        for j in range(0, arr_length-i-1): \n            # Swap items if needed\n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Test our Bubble sort implementation\narr = [4,7,1,3,9] \nbubble_sort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i])", "category": "Python"}, {"instruction": "Create a Python program that'll take two lists and return a combined list.", "input": "list_1 = [2, 4, 6]\nlist_2 = [3, 5, 7]", "output": "def combine_lists(list_1, list_2):\n    return list_1 + list_2\n\nlist_1 = [2, 4, 6]\nlist_2 = [3, 5, 7]\n\nprint(combine_lists(list_1, list_2))", "category": "Python"}, {"instruction": "Generate a code to transform the list of strings into the upper case.", "input": "list = ['apple', 'banana', 'cherry']", "output": "list = ['apple', 'banana', 'cherry']\n\ndef transform_list(list):\n    upper_list = [i.upper() for i in list]\n    return upper_list\n\nprint(transform_list(list))", "category": "Python"}, {"instruction": "Generate a program to flip a coin.", "input": "", "output": "from random import choice \n\ndef flip_coin(): \n\tresult = choice(['Heads', 'Tails']) \n\n\tprint(result) \n\nif __name__ == \"__main__\": \n\tflip_coin()", "category": "Python"}, {"instruction": "Write a Python script to detect if a given text contains any URL.", "input": "", "output": "import re\n\ndef has_url(text):\n  pattern = r\"(http|ftp|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;:/~\\+#]*[\\w\\-\\@?^=%&amp;/~\\+#])?\"\n  matches = re.findall(pattern, text) \n  if matches:\n    return True\n  return False", "category": "Python"}, {"instruction": "Write a code snippet to convert the following list of dictionaries into a pandas dataframe.", "input": "students = [{\"name\":\"John\", \"age\": 18, \"grade\": 85},\n            {\"name\":\"James\", \"age\": 16, \"grade\": 82},\n            {\"name\":\"Jill\", \"age\": 17, \"grade\": 89}]", "output": "# Convert the list of dictionaries to pandas dataframe\nimport pandas as pd\ndf = pd.DataFrame(students)\n\n# Print the dataframe\nprint(df)\n# Outputs:\n   name  age  grade\n0  John   18     85\n1  James  16     82\n2  Jill   17     89", "category": "Python"}, {"instruction": "Write a code snippet that adds two matrices of equal sizes.", "input": "matrix1 = [[1, 2],\n\t\t   [3, 4]]\n\nmatrix2 = [[5, 6],\n\t\t   [7, 8]]", "output": "def add_matrices(matrix1, matrix2):\n    # assert that the matrices are of equal size\n    assert len(matrix1) == len(matrix2), \"Matrices should have the same size\"\n    assert len(matrix1[0]) == len(matrix2[0]), \"Matrices should have the same size\"\n\n    # add the elements\n    for i in range(len(matrix1)):\n        for j in range(len(matrix2[0])):\n            matrix1[i][j] += matrix2[i][j]\n\n    return matrix1", "category": "Python"}, {"instruction": "Design a class in python to find the reverse of a number.", "input": "", "output": "class ReverseNumber(): \n    def __init__(self): \n        pass\n    \n    def reverse_number(self, num): \n      \n        reverse = 0\n  \n        # Iterate over the given number \n        while(num > 0): \n            reminder = num % 10\n  \n            # Constructing the reverse number\n            reverse = (reverse * 10) + reminder \n  \n            # Floor division\n            num = num // 10\n  \n        return reverse \n  \n# Driver Code \nif __name__ == '__main__': \n    rev = ReverseNumber()\n    print(rev.reverse_number(123))", "category": "Python"}, {"instruction": "Generate a random DNA sequence of length 50.", "input": "", "output": "\"\"\"\nGenerate a random DNA sequence of length 50\n\"\"\"\n\nimport random\n\ndef random_dna_sequence(length):\n    bases = [\"A\",\"T\",\"G\",\"C\"]\n    sequence = \"\".join([random.choice(bases) for _ in range(length)])\n    return sequence\n\nif __name__ == '__main__':\n  print(random_dna_sequence(50))", "category": "Python"}, {"instruction": "You need to check a given list of strings to determine it contains all valid English words. Output true if so, output false otherwise.", "input": "list = [\"hello\", \"world\", \"fksgks\"]", "output": "import requests \n  \n# Creating list of words \nlist = [\"hello\", \"world\", \"fksgks\"] \n  \n# Iterating in the list of words \nfor i in list: \n    url = \"https://www.dictionary.com/browse/\"+i \n    try: \n        webpage = requests.get(url) \n  \n        # Valid word if request status  \n        # code is 200 \n        if webpage.status_code == 200: \n            valid = True\n        else: \n            valid = False\n    except: \n        valid = False\n              \nif valid == False: \n    print(\"False\")\nelse:\n    print(\"True\")", "category": "Python"}, {"instruction": "Given a matrix, write a program to rotate it by 90 degrees clockwise.", "input": "matrix = [[1,2,3], \n          [4,5,6], \n          [7,8,9]]", "output": "def rotateMatrix(matrix):\n    N = len(matrix[0])\n    for i in range(N // 2):\n        for j in range(i, N - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[N - 1 - j][i]\n            matrix[N - 1 - j][i] = matrix[N - 1 - i][N - 1 - j]\n            matrix[N - 1 - i][N - 1 - j] = matrix[j][N - 1 - i]\n            matrix[j][N - 1 - i] = temp\n\nrotateMatrix(matrix)", "category": "Python"}, {"instruction": "Write a Python script to compare two lists and print out missing and same elements.", "input": "list1 = [1, 2, 3, 4]\nlist2 = [2, 3, 4, 5]", "output": "same_elements = []\nmissing_elements = []\n\nfor i in list1:\n  if i in list2:\n   same_elements.append(i)\n  else:\n    missing_elements.append(i)\n\nfor i in list2:\n  if i not in list1:\n    missing_elements.append(i)\n\nprint(\"Same elements:\",same_elements)\nprint(\"Missing elements:\",missing_elements)\n# Output: Same elements: [2, 3, 4] \n#        Missing elements: [1, 5]", "category": "Python"}, {"instruction": "Design a Python class structure for playing cards with two classes: Deck and Card.", "input": "", "output": "class Deck: \n    def __init__(self):\n        self.cards = []\n    \n    def populate(self):\n        suits = ['Hearts', 'Spades', 'Clubs', 'Diamonds']\n        numbers = [2,3,4,5,6,7,8,9,10,'Jack','Queen','King','Ace']\n\n        for suit in suits:\n            for number in numbers:\n                self.cards.append(Card(suit, number))\n\n    def shuffle(self):\n        random.shuffle(self.cards)\n        \n    def deal(self):\n        card = self.cards.pop()\n        return card\n \nclass Card:\n    def __init__(self, suit, number):\n        self.suit = suit\n        self.number = number", "category": "Python"}, {"instruction": "Design a data visualization to show the average salary per gender", "input": "", "output": "import matplotlib.pyplot as plt\n  \nmale_salaries = [3000, 3500, 3000, 3500, 4000] \nfemale_salaries = [2500, 3000, 2500, 3000, 3500] \n  \nplt.bar(range(len(male_salaries)), male_salaries, width=0.35, \n            label='Male Salaries') \n  \nplt.bar([x+0.35 for x in range(len(female_salaries))], \n            female_salaries, width=0.35, \n            label='Female Salaries') \n  \nplt.xlabel('Employee') \nplt.ylabel('Salaries') \nplt.title('Salaries per Gender') \nplt.legend(loc=\"upper right\") \nplt.show()", "category": "Python"}, {"instruction": "Construct an API using Flask that returns an array of integers in response to a request", "input": "", "output": "from flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/api/v1/get_data', methods=['GET'])\ndef get_data():\n    data = [1, 2, 3, 4, 5]\n    return jsonify(data)\n\nif __name__ == '__main__':\n    app.run()", "category": "Python"}, {"instruction": "Generate a random sample of size 10 using numpy", "input": "", "output": "import numpy as np\n\nrand_sample = np.random.randint(low=0, high=100, size=10)", "category": "Python"}, {"instruction": "Implement an algorithm to select k elements from an array such that the sum of those elements is maximized", "input": "", "output": "def maximize_sum(arr, k):\n    arr.sort()\n    result = 0\n    for i in range(len(arr)-1, len(arr)-k-1, -1):\n        result += arr[i]\n    return result", "category": "Python"}, {"instruction": "Create an algorithm to find the longest continuous increasing subarray.", "input": "", "output": "def longestIncreasingSubarray(arr):\n    n = len(arr)\n    max_len = 1\n    curr_len = 1\n    for i in range(1, n): \n     \n        #if current element is greater than its previous element \n        if (arr[i] > arr[i-1]):\n            curr_len += 1\n        else:\n            if (curr_len > max_len):\n                max_len = curr_len\n            curr_len = 1\n    #Compare the length of the last \n    #subarray with max_len and \n    #update max_len if needed \n    if (curr_len > max_len):\n        max_len = curr_len \n    \n    return max_len", "category": "Python"}, {"instruction": "Implement a function that takes two parameters, an array and a value, and returns true if the array contains the value and false if it does not.", "input": "let myArray = [1, 2, 3, 4, 5];\nlet myValue = 3;", "output": "def containsValue(arr, value):\n    for item in arr:\n        if item == value:\n            return True\n    return False\n\nprint(containsValue(myArray, myValue))", "category": "Python"}, {"instruction": "Using a loop and a conditional statement in Python, check if the number is a prime number.", "input": "let number = 13;", "output": "def is_prime(number):\n    if (number <= 1):\n        return False\n    if (number <= 3):\n        return True\n\n    if (number % 2 == 0 or number % 3 == 0):\n        return False\n\n    i = 5\n    while (i * i <= number):\n        if (number % i == 0 or number % (i + 2) == 0):\n            return False\n        i +=6\n\n    return True", "category": "Python"}, {"instruction": "Parse this JSON data and print out the \u201crating\u201d of every item in the list.", "input": "{\n    \"ratings\": [\n        {\"title\": \"Frozen II\", \"rating\": 7.5},\n        {\"title\": \"The Irishman\", \"rating\": 8.2},\n        {\"title\": \"Parasite\", \"rating\": 8.5},\n    ]\n}", "output": "import json\n\ndata = {\n    \"ratings\": [\n        {\"title\": \"Frozen II\", \"rating\": 7.5},\n        {\"title\": \"The Irishman\", \"rating\": 8.2},\n        {\"title\": \"Parasite\", \"rating\": 8.5},\n    ]\n}\n\ndata = json.loads(data)\n\nfor item in data['ratings']:\n    print(\"Rating for %s: %f\" % (item['title'], item['rating']))", "category": "Python"}, {"instruction": "Find all the multiples of a number in between two given numbers.", "input": "", "output": "def find_multiples(base, lower, upper):\n    output = []\n    for i in range(lower, upper+1):\n        if i % base == 0:\n            output.append(i)\n    return output", "category": "Python"}, {"instruction": "Write a function to create a new nested list with twice the length of the original.", "input": "original_list = [1, 2, [3, 4], 5]", "output": "def nested_list_doubled(original_list):\n  new_list = []\n  for item in original_list:\n    if isinstance(item, list):\n      new_list.append(nested_list_doubled(item))\n    else:\n      new_list.append(item)\n    new_list.append(item)\n  return new_list", "category": "Python"}, {"instruction": "Calculate the factorial of an integer using recursion.", "input": "", "output": "def factorial(n):\n  if n == 0:\n    return 1\n  else :\n    return n*factorial(n-1)", "category": "Python"}, {"instruction": "Implement an algorithm to print the steps of the Tower of Hanoi problem.", "input": "", "output": "def hanoi(num_disks, from_peg, to_peg, aux_peg):\n    if num_disks == 1:\n        print(\"Move disk 1 from peg\", from_peg,\"to peg\", to_peg)\n        return\n\n    hanoi(num_disks-1, from_peg, aux_peg, to_peg)\n    print(\"Move disk\",num_disks,\"from peg\",from_peg,\"to peg\",to_peg)\n    hanoi(num_disks-1, aux_peg, to_peg, from_peg)", "category": "Python"}, {"instruction": "Summarize the given text in 3-5 sentences.", "input": "REST is an architectural style that defines a set of constraints and properties based on HTTP. It basically uses HTTP for communication between services. It stands for Representational State Transfer, and defines the various ways by which services can provide data and be interacted with.", "output": "#Summarize the given text in 3-5 sentences\n\nREST (Representational State Transfer) is an architecture style used to communicate between services over HTTP. It is composed of a set of constraints and properties that define how the services communicate and exchange data. REST is useful in implementing a distributed system, as it follows client-server model of communication and thus, simplifies the interaction between different services. Furthermore, REST is a stateless protocol, meaning that the server does not store any state about the client session. Instead, each request and responses are self-contained, eliminating the need to maintain any client-specific state.", "category": "Python"}, {"instruction": "Write a function that takes two parameters, a list and a number. If a number is found in the list, the function should return its index, else it should return -1.", "input": "[1, 2, 3, 4, 9], 2", "output": "#Write a function that takes two parameters, a list and a number.\ndef find_number(list_num, num):\n    '''This function takes in a list of numbers and \na number and returns the index of the number if it is found, \nelse return -1.'''\n    \n    # Traverse through the list\n    for i in range(len(list_num)):\n        # If the number is found\n        if list_num[i] == num:\n            # return its index\n            return i\n    # Number not found\n    return -1", "category": "Python"}, {"instruction": "Implement a function that takes in 2 strings and returns a new string consisting of alternating characters from the strings passed in.", "input": "\"hello\"\n\"world\"", "output": "#Implement a function that takes in 2 strings and returns a new string consisting of alternating characters\ndef alt_string(str1, str2):\n    alt_str = \"\" \n    length = len(str1) if len(str1) <= len(str2) else len(str2)\n    \n    for i in range(length):\n        alt_str += str1[i] + str2[i]\n    \n    if len(str1) > len(str2):\n        alt_str += str1[length:]\n    elif len(str2) > len(str1):\n        alt_str += str2[length:]\n    \n    return alt_str", "category": "Python"}, {"instruction": "Find the maximum sum of a subarray of size 'k' in a given array.", "input": "arr = [1, 4, 2, 10, 23, 3, 1, 0, 20]\nk = 4", "output": "def max_sum_subarray(arr, k):\n    max_sum = 0\n    for i in range(len(arr) - k + 1):\n        curr_sum = 0\n        for j in range(i, i + k):\n            curr_sum += arr[j]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum", "category": "Python"}, {"instruction": "Create a function to check the validity of an email address.", "input": "", "output": "def validate_email(email):\n    regex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n    if re.search(regex,email):\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Design a function to take a URL and return the content of the URL.", "input": "", "output": "import requests\n\ndef get_content(url):\n    response = requests.get(url)\n    html = response.content\n    return html", "category": "Python"}, {"instruction": "Create a program to group the numbers in the given list into odd and even groups.", "input": "[1,2,3,4,5,6]", "output": "nums = [1,2,3,4,5,6]\n\nodd_nums = []\neven_nums = []\n\nfor num in nums:\n    if num % 2 == 0:\n        even_nums.append(num)\n    else:\n        odd_nums.append(num)\n\nprint('Odd numbers:', odd_nums)\nprint('Even numbers:', even_nums)", "category": "Python"}, {"instruction": "Parse a JSON string and print all the key-value pairs in alphabetical order.", "input": "{\n \"orange\": 4,\n \"apple\": 1,\n \"banana\": 2\n}", "output": "import json\n\ndef parse_json(json_str):\n    data = json.loads(json_str)\n\n    for key, values in sorted(data.items()):\n        print(key, \"=\", values)\n\nparse_json('{\"orange\": 4, \"apple\": 1, \"banana\": 2 }')", "category": "Python"}, {"instruction": "Given a dictionary, write a program to create a new dictionary where the values are the keys and the keys are the values.", "input": "{\"apple\": 1, \"banana\": 2, \"carrot\": 3}", "output": "def reverse_dict(d):\n    new_d = {v:k for k, v in d.items()}\n    return new_d\n\nd = {\"apple\": 1, \"banana\": 2, \"carrot\": 3}\nprint(reverse_dict(d))", "category": "Python"}, {"instruction": "Detect if a particular character is included in a string or not.", "input": "string = \"Hello World!\"\ncharacter = '!'", "output": "def character_check(string, character):\n    if character in string:\n        return True\n    else:\n        return False\n\ncheck = character_check(string, character)\nprint(check) # Output: True", "category": "Python"}, {"instruction": "Develop a function in Python which prints the name of the day (eg. \"Monday\") given any date as an argument.", "input": "Date: October 13th, 2020", "output": "def get_day(date):\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n    day_index = date.weekday()\n    return days[day_index]\n\nprint(get_day(date(2020, 10, 13)))", "category": "Python"}, {"instruction": "Given a string consisting of alphanumeric characters, separate it into left and right parts so that the left part contains only digits and the right part contains only letters.", "input": "String: Ab243rG", "output": "left, right = '', ''\nfor char in string:\n    if char.isdigit():\n        left += char\n    else:\n        right += char", "category": "Python"}, {"instruction": "Write a code to add two matrices of any size.", "input": "[[1, 2, 3],\n [4, 5, 6]]\n+\n[[7, 8, 9],\n [10, 11, 12]]", "output": "def matrix_addition(mat1, mat2):\n    # check whether two matrices are of same size\n    if(len(mat1) != len(mat2)):\n        return 'Not possible to add matrices'\n    else: \n        # adding elements of mat1 and mat2\n        result = [[0 for col in range(len(mat1[0]))] for row in range(len(mat1))]\n        for i in range(len(mat1)):\n            for j in range(len(mat1[0])):\n                result[i][j] = mat1[i][j] + mat2[i][j]\n    return result\n\n# initializing two matrices\nmat1 = [[1, 2, 3], [4, 5, 6]]\nmat2 = [[7, 8, 9], [10, 11, 12]]\n\nprint(matrix_addition(mat1, mat2))", "category": "Python"}, {"instruction": "Given a list of strings and an input string, find the index of the input string in the list.", "input": "list = [\"red\", \"blue\", \"green\", \"yellow\"]\nstring = \"green\"", "output": "def find_string(list, target):\n    for index, value in enumerate(list):\n        if value == target:\n            return index\n\nlist = [\"red\", \"blue\", \"green\", \"yellow\"]\nstring = \"green\"\nprint(find_string(list, string)) # Output 2", "category": "Python"}, {"instruction": "Construct a matrix in Python containing 5 rows and 4 columns of random floating point numbers between 0 and 1.", "input": "", "output": "import numpy as np\n\nmatrix = np.random.uniform(0,1, (5,4))", "category": "Python"}, {"instruction": "Create a script to connect to a MySQL database using Python.", "input": "", "output": "import mysql.connector\n\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"yourusername\",\n  passwd=\"yourpassword\",\n  database=\"mydatabase\"\n)", "category": "Python"}, {"instruction": "Generate a pandas DataFrame with three columns containing random integer numbers between 0 and 10.", "input": "", "output": "import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randint(0, 11, size=(3, 3)), \n                  columns=['Column1', 'Column2', 'Column3'])", "category": "Python"}, {"instruction": "Using the given snippet of code, create a compiler to check if a given string is valid Python code.", "input": "", "output": "import ast \ndef check_syntax(code): \n  try: \n    ast.parse(code) \n  except SyntaxError: \n    return False\n  else: \n    return True", "category": "Python"}, {"instruction": "Describe an algorithm for finding the maximum value in a given list of integers.", "input": "", "output": "A simple algorithm to find the maximum value in a given list of integers is to start with the first element and compare it with the subsequent elements. If a larger element is found, update the maximum value and continue comparing. At the end of the loop, the maximum value will hold the maximum value from the given list.", "category": "Python"}, {"instruction": "Create a string of length 100 using a Python loop and save it into a variable named 'string_100'.", "input": "", "output": "string_100 = ''\nfor i in range(100):\n string_100 += 'x'", "category": "Python"}, {"instruction": "Create a linear regression model using TensorFlow.", "input": "", "output": "import tensorflow as tf\n\n# Create array of feature vectors\nX = tf.constant([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]])\n\n# Create array of labels\ny = tf.constant([[10.0], [", "category": "Python"}, {"instruction": "Train a model to predict the labels of a handwritten digits dataset.", "input": "", "output": "import numpy as np\nfrom sklearn.datasets import load_digits\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Load the data\ndigits = load_digits()\nX = digits.data\ny = digits.target\n\n# Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# Train the model\nmodel = KNeighborsClassifier(n_neighbors=5)\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\nacc = model.score(X_test, y_test)\n\nprint(\"Accuracy:\", acc)", "category": "Python"}, {"instruction": "Write a function to compress a string by counting the characters.", "input": "", "output": "def compressString(s): \n\tcomp_string = \"\"\n\tcount = 1\n\tfor i in range(len(s) - 1): \n\t\tif(s[i] == s[i+1]): \n\t\t\tcount+= 1\n\t\telse: \n\t\t\tcomp_string += s[i] + str(count) \n\t\t\tcount = 1\n\tcomp_string += s[i] + str(count) \n\treturn comp_string", "category": "Python"}, {"instruction": "Modify the given Python code to remove any punctuations from the given string.", "input": "string = \"Hello, how are you?\"", "output": "import string\n\ndef remove_punctuation(string):\n    for punct in string.punctuation:\n        string = string.replace(punct, '')\n    return string\n\nstring = \"Hello, how are you?\"\nprint(remove_punctuation(string)) # output 'Hello how are you'", "category": "Python"}, {"instruction": "Write a function to traverse a dictionary recursively and print all the keys.", "input": "", "output": "def printAllKeys(dictionary): \n    if type(dictionary) == dict: \n        for key in dictionary: \n            print(key) \n            printAllKeys(dictionary[key])", "category": "Python"}, {"instruction": "Segregate the negative numbers to the left side and positive numbers to the right side of an array.", "input": "", "output": "def segregate_numbers(array): \n    j = 0\n    for i in range(len(array)): \n        if (array[i] <= 0): \n            array[i], array[j] = array[j], array[i] \n            j+=1\n    return array", "category": "Python"}, {"instruction": "Compile and Run this program in Python.", "input": "a = 10\nb = 5\n\nprint(\"The sum of a and b is \", a + b)", "output": "The sum of a and b is 15", "category": "Python"}, {"instruction": "Given a linked list, write a function to reverse it.", "input": "", "output": "def reverse_linked_list(head):\n    if head is None or head.next is None:\n        return head\n\n    # Get second node\n    current = head.next\n    # Set first node as tail\n    head.next = None\n    # Set next of second node as third node\n    next = current.next\n\n    while(next):\n        # reverse pointer\n        current.next = head\n        # Move head pointer one position forward\n        head = current\n        # Move current pointer one position forward\n        current = next\n        # Move next pointer one position forward\n        next = current.next\n    # Append last node\n    current.next = head\n    return current", "category": "Python"}, {"instruction": "Given a list of numbers, write a function to return a list containing the cumulative sum of all elements in the input list.", "input": "[1, 2, 3, 4]", "output": "def cumulative_sum(lst):\n    res = []\n    sums = 0\n    for num in lst:\n        sums += num\n        res.append(sums)\n    return res\n\n# Example\ncumulative_sum([1, 2, 3, 4]) # Output: [1, 3, 6, 10]", "category": "Python"}, {"instruction": "Create a function \u2018fibonacci\u2019 which takes an argument \u2018n\u2019 and prints the Fibonacci series up to the nth term.", "input": "", "output": "def fibonacci(n):\n  a = 0\n  b = 1\n  if n < 0:\n    print(\"Incorrect input\")\n  elif n == 0:\n    return a\n  elif n == 1:\n    return b\n  else:\n     for i in range(2,n):\n       c = a + b\n       a = b\n       b = c\n     return b", "category": "Python"}, {"instruction": "Which type of loops can be used in Python?", "input": "", "output": "Python supports for loops, while loops, and nested loops. Additionally, the loop statement can be used to construct an infinite loop.", "category": "Python"}, {"instruction": "Design a function in Python to calculate the area of an equilateral triangle.", "input": "", "output": "def triangle_area(side):\n return side * (side ** 0.5) / 2", "category": "Python"}, {"instruction": "How to compare two lists in Python?", "input": "", "output": "def compare_lists(l1, l2):\n    if len(l1) != len(l2):\n        return False\n\n    for i in range(len(l1)):\n        if l1[i] != l2[i]:\n            return False\n\n    return True", "category": "Python"}, {"instruction": "How to create a loop in Python which will iterate over a list?", "input": "", "output": "#Iterate over a list \nlist = [1, 2, 3, 4, 5]\n\nfor item in list:\n    print(item)", "category": "Python"}, {"instruction": "Create a class in Python for performing basic math calculations", "input": "", "output": "class MathCalculations:\n    \"\"\"\n    Class to perform math calculations \n    \"\"\"\n\n    def __init__(self):\n        pass\n\n    def add(self, num1, num2):\n        \"\"\"\n        Add two numbers\n        \"\"\"\n        return num1 + num2\n\n    def subtract(self, num1, num2):\n        \"\"\"\n        Subtract two numbers\n        \"\"\"\n        return num1 - num2\n\n    def multiply(self, num1, num2):\n        \"\"\"\n        Multiply two numbers\n        \"\"\"\n        return num1 * num2\n\n    def divide(self, num1, num2):\n        \"\"\"\n        Divide two numbers\n        \"\"\"\n        return num1 / num2", "category": "Python"}, {"instruction": "Given a pair of same-length strings, identify character matches in the same position.", "input": "str1 = 'Hello'\nstr2 = 'World'", "output": "def character_match(str1, str2):\n  match_list = []\n  for i in range(len(str1)):\n    if str1[i] == str2[i]:\n      match_list.append(str1[i])\n  return match_list", "category": "Python"}, {"instruction": "Edit the given Python code to remove duplicate items from the given list.", "input": "my_list = [1, 2, 2, 3, 4, 5, 4]", "output": "def remove_duplicate(my_list):\n    return list(set(my_list))\n\nmy_list = [1, 2, 2, 3, 4, 5, 4]\nprint(remove_duplicate(my_list)) # Output [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Create a web browser automation script in Python to scrape the data from a website.", "input": "", "output": "from selenium import webdriver\n\n# Create webdriver object\ndriver = webdriver.Chrome()\n\n# Put target website URL\nurl = 'https://www.example.com/'\n\n# Navigate to the website\ndriver.get(url)\n\n# Scrape the data\ndata = driver.find_elements_by_xpath('//*[@class=\"data-class\"]')\nfor element in data:\n    print(element.text)\n\n# Close the browser\ndriver.close()", "category": "Python"}, {"instruction": "Create a list of five randomly generated integers from 1 to 10 in Python.", "input": "", "output": "import random\n\nrandom_list = [random.randint(1, 10) for int_num in range(5)]\n\nprint(random_list)", "category": "Python"}, {"instruction": "Implement a function that takes a 2D matrix and rotates the matrix 90 degrees clockwise.", "input": "[[1,2,3],\n [4,5,6],\n [7,8,9]]", "output": "def rotate_2d_matrix(matrix):\n    n = len(matrix[0])\n    m = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            m[i][j] = matrix[n-j-1][i]\n    return m", "category": "Python"}, {"instruction": "Create a function that takes two strings as input and returns true if the characters in one of the string appear in order in the other string.", "input": "mystring isthis", "output": "\"\"\"\nCreate a function that takes two strings as input and returns true if the characters in one of the string appear in order in the other string\n\"\"\"\ndef is_substring(str1, str2):\n  i = 0\n  for char in str2:\n    if char == str1[i]:\n      i += 1\n    if i == len(str1):\n      return True\n  return False\n\nif __name__ == '__main__':\n    print(is_substring('mystring', 'isthis')) # True", "category": "Python"}, {"instruction": "Create a function that can transform a string of text into an object containing the number of occurrences of each letter in the string.", "input": "Hello World", "output": "\"\"\"\nCreate a function that can tranform a string of text into an object containing the number of occurrences of each letter in the string\n\"\"\"\ndef count_letters(s):\n  letter_dict = {}\n  for letter in s:\n    if letter in letter_dict:\n      letter_dict[letter] += 1\n    else:\n      letter_dict[letter] = 1\n  \n  return letter_dict\n\nif __name__ == '__main__':\n    print(count_letters('Hello World')) # {'H': 1, 'e': 1, 'l': 3, 'o': 2, 'W': 1, 'r': 1, 'd': 1}", "category": "Python"}, {"instruction": "Given a set of points and an origin point, calculate the distance between the origin point and each point in the set.", "input": "[(1,1),(4,4),(3,3)] (0,0)", "output": "\"\"\"\nGiven a set of points and an origin point, calculate the distance between the origin point and each point in the set\n\"\"\"\nimport math \n\ndef points_distance(points, origin):\n    distances = []\n    for point in points:\n        distances.append(math.sqrt((point[0]-origin[0])**2 + (point[1]-origin[1])**2))\n    return distances\n\nif __name__ == '__main__':\n    print(points_distance([(1,1),(4,4),(3,3)], (0,0))) # [1.4142135623730951, 5.65685424949238, 4.242640687119285]", "category": "Python"}, {"instruction": "Create a class that can represent a 2D coordinate system.", "input": "", "output": "\"\"\"\nCreate a class that can represent a 2D coordinate system\n\"\"\"\nclass CoordinateSystem:\n  def __init__(self,x,y):\n    self.x = x\n    self.y = y\n  \n  def add(self,other):\n    x = self.x + other.x\n    y = self.y + other.y\n    return CoordinateSystem(x,y)\n\nif __name__ == '__main__':\n    a = CoordinateSystem(1,2)\n    b = CoordinateSystem(3,4)\n    print(a.add(b)) # <__main__.CoordinateSystem object at 0x000002B50FE37B70>", "category": "Python"}, {"instruction": "Create a function that can concatenate two lists into a string separated by comma.", "input": "[1, 2, 3] [4, 5, 6]", "output": "\"\"\"\nCreate a function that can concatenate two lists into a string separated by comma\n\"\"\"\ndef concat_lists(list1, list2):\n  return ','.join([str(i) for i in list1 + list2]) \n  \nif __name__ == '__main__':\n    print(concat_lists([1, 2, 3], [4, 5, 6]))", "category": "Python"}, {"instruction": "Generate a random password of length 16 using the letters a-z.", "input": "", "output": "\"\"\"\nGenerate a random password of length 16 using the letters a-z\n\"\"\"\nimport random\n\ndef generate_password():\n  letters = 'abcdefghijklmnopqrstuvwxyz'\n  return ''.join(random.choice(letters) for i in range(16))\n\nif __name__ == '__main__':\n    print(generate_password())", "category": "Python"}, {"instruction": "Sort a list of words by the frequency of their occurrence.", "input": "dog cat bed dog mouse rat", "output": "\"\"\"\nSort a list of words by the frequency of their occurrence\n\"\"\"\n\ndef sort_words_by_frequency(words):\n    frequency_dict = {}\n    for word in words:\n        if word in frequency_dict:\n            frequency_dict[word] += 1\n        else:\n            frequency_dict[word] = 1\n\n    sorted_words = sorted(frequency_dict.items(), key=lambda x: x[1], reverse=True)\n    return [word for word, _ in sorted_words]\n\nif __name__ == '__main__':\n    print(sort_words_by_frequency(['dog', 'cat', 'bed', 'dog', 'mouse', 'rat']))", "category": "Python"}, {"instruction": "Create a deep learning model to output a sentence in French when given an English sentence as input.", "input": "I like to eat apples.", "output": "\"\"\"\nCreate a deep learning model to output a sentence in French when given an English sentence as input\n\"\"\"\nimport tensorflow as tf\nimport numpy as np\n\n# Input and output languages\ninput_lang = 'EN'\noutput_lang = 'FR'\n\n# Define the model\nmodel = tf.keras.Sequential([\n  tf.keras.layers.Embedding(input_dim=vocab_size, output_dim=128, input_length=10),\n  tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64)),\n  tf.keras.layers.Dense(vocab_size, activation='softmax')\n])\n\n# Compile and train the model\nmodel.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              optimizer=tf.keras.optimizers.Adam())\nmodel.fit(input_tensor, output_tensor, epochs=100) \n\n# Make a prediction\nsentence = 'I like to eat apples.'\npredicted_sentence = translate(sentence, input_lang, output_lang, model) \n\nprint(predicted_sentence) # J'aime manger des pommes.", "category": "Python"}, {"instruction": "Write a code to change a string to have its first letter capitalized and the remaining characters in lower case.", "input": "mySTRING", "output": "\"\"\"\nChange a string to have its first letter capitalized and the remaining characters in lower case\n\"\"\"\n\ndef capitalize_string(s):\n  return s[0].upper() + s[1:].lower()\n  \nif __name__ == '__main__':\n    print(capitalize_string('mySTRING'))", "category": "Python"}, {"instruction": "Develop a Python program to remove elements from a dictionary.", "input": "my_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}", "output": "my_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n\n# remove element 'd'\nmy_dict.pop('d', None)\n\n# print resulting dictionary\nprint(my_dict)\n\n# Output: {'a': 1, 'b': 2, 'c': 3}", "category": "Python"}, {"instruction": "Test the following Python code for any errors.", "input": "def calculate_mean(numbers):\n    total_sum = 0;\n    for n in numbers:\n        total_sum += n\n    mean = total_sum / 10   # length of numbers", "output": "No errors have been found in the code.", "category": "Python"}, {"instruction": "Modify the program to take a given list of integers and returns the maximum and minimum values.", "input": "list_of_numbers = [3, 8, -1, 5]", "output": "def min_max(list_of_numbers):\n    min = list_of_numbers[0]\n    max = list_of_numbers[0]\n    for number in list_of_numbers:\n        if number > max:\n            max = number\n        elif number < min:\n            min = number\n    return min, max", "category": "Python"}, {"instruction": "Implement a Python code that takes a string and reverses the characters in place.", "input": "string = \"This is easy\"", "output": "def reverse_in_place(string):\n    return string[::-1]", "category": "Python"}, {"instruction": "Generate a python code that takes a list of integers, prints out an array that is all True if the values are in the input list and all False otherwise.", "input": "list_of_numbers = [5, 7, 10, 2]", "output": "def boolean_search(list_of_numbers):\n    result_array = []\n    for elem in list_of_numbers:\n        result_array.append(elem in list_of_numbers)\n    return result_array", "category": "Python"}, {"instruction": "Write a function that takes an input string and finds the number of non-printable characters.", "input": "", "output": "def count_non_printable_characters(string):\n    non_printable = ''.join(chr(i) for i in range(0, 32))\n    counter = 0\n    for char in string:\n        if char in non_printable:\n            counter+= 1\n    return counter", "category": "Python"}, {"instruction": "Generate a function to create a list of factors for a given integer.", "input": "", "output": "def factor_list(number):    \n    factors = []\n \n    i = 2\n    while i * i <= number:\n        if number % i:\n            i += 1\n        else:\n            number //= i\n            factors.append(i)\n    if number > 1:\n        factors.append(number)\n \n    return factors", "category": "Python"}, {"instruction": "Create a calculator program using Python to do the following calculations.", "input": "A = 30;\nB = 15;\nC = 4;", "output": "def calculator(A, B, C):\n    add = A + B\n    subtract = A - B\n    multiply = A * C\n    divide = A / B\n    remainder = A % B\n    return add, subtract, multiply, divide, remainder", "category": "Python"}, {"instruction": "Generate a general shopping list using Python.", "input": "", "output": "def generate_shopping_list():\n    list_items = ['Bread', 'Milk', 'Butter', 'Eggs', 'Cereal', 'Fruits', 'Veggies', 'Canned food', 'Frozen food', 'Cheese', 'Meat', 'Snacks', 'Coffee', 'Tea', 'Sugar', 'Salt', 'Herbs', 'Cooking oil', 'Detergent', 'Toilet paper']\n    return list_items", "category": "Python"}, {"instruction": "Modify the code in Python to convert a lower case string to an upper case string.", "input": "'hello world'", "output": "string = 'hello world'\nstring = string.upper()\nprint(string)", "category": "Python"}, {"instruction": "Generate a function which takes a two-dimensional array of integers as an argument and prints out the elements in spiral order.", "input": "[[1,2,3],\n[4,5,6],\n[7,8,9]]", "output": "def printSpiral(arr):\n    # track the current row and columns\n    cur_row = 0\n    cur_col = 0\n    \n    # track the starting and ending columns of the row and rows of the column\n    start_col = 0\n    end_col = len(arr[0]) - 1\n    start_row = 0\n    end_row = len(arr) - 1\n    \n    while start_col <= end_col and start_row <= end_row:\n        # move right\n        for i in range(start_col, end_col + 1):\n            print(arr[cur_row][i])\n        start_row += 1\n        cur_row = start_row\n        \n        # move down\n        for i in range(start_row, end_row + 1):\n            print(arr[i][end_col])\n        end_col -= 1\n        cur_col = end_col\n        \n        # move left\n        for i in range(end_col, start_col - 1, -1):\n            print(arr[end_row][i])\n        end_row -= 1\n        cur_row = end_row\n        \n        # move up\n        for i in range(end_row, start_row - 1, -1):\n            print(arr[i][start_col])\n        start_col += 1\n        cur_col = start_col", "category": "Python"}, {"instruction": "Design an algorithm to find the two numbers in an array that have the largest sum.", "input": "[1,3,4,6,7]", "output": "# Finds two numbers in an array that have the largest sum\ndef getMaxSum(arr):\n    # Initialize the sum to the maximum possible value\n\tmaxSum = -float('inf')\n\t\n\t# Iterate over all elements of the array\n\tfor i in range(len(arr)):\n\t\tfor j in range(i+1, len(arr)):\n\t\t\t# Compare the current sum to the maximum sum\n\t\t\tmaxSum = max(maxSum, arr[i] + arr[j])\n\n    # Return the largest sum\n\treturn maxSum", "category": "Python"}, {"instruction": "Define a function to remove all the even numbers from a list in Python.", "input": "sample_list = [1,2,3,4,5,6,7,8]", "output": "sample_list = [1,2,3,4,5,6,7,8]\n\ndef remove_even_numbers(lst):\n    for num in lst:\n        if num % 2 == 0:\n            lst.remove(num)\n    return lst\n\nprint(remove_even_numbers(sample_list))", "category": "Python"}, {"instruction": "In the following code, identify the bug and suggest a fix.", "input": "def add_two_strings(string1, string2):\n    return string1 + string2", "output": "def add_two_strings(string1, string2):\n    \"\"\"A function to add two strings together and return the concatenated result.\"\"\"\n    if isinstance(string1, str) and isinstance(string2, str):\n        return string1 + string2\n    else:\n        raise TypeError(\"Both arguments must be strings\")", "category": "Python"}, {"instruction": "How would you modify the following code to add a time delay of 1 second between each iteration of the loop?", "input": "for i in range(10):\n    print(i)", "output": "import time\n\nfor i in range(10):\n    print(i)\n    time.sleep(1)", "category": "Python"}, {"instruction": "Identify the bugs in the following python code and fix them.", "input": "def multiply_dicts(d1, d2):\n    for key in d1:\n        d1[key] = d2[d1[key]]", "output": "def multiply_dicts(d1, d2):\n    for key in d1:\n        if key in d2:\n            d1[key] = d2[key]", "category": "Python"}, {"instruction": "Create a constructor for the following class in Python.", "input": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "category": "Python"}, {"instruction": "Suggest a Python code to match the substring \"is\" in the given string \"This is a programming task\".", "input": "", "output": "import re\n\nstring = \"This is a programming task\"\n\npattern = r\"is\"\n\nif re.search(pattern, string):\n  print(\"Match found\")\nelse:\n  print(\"No match found\")", "category": "Python"}, {"instruction": "Suggest a Python code to filter a list of numbers so that all even numbers are removed.", "input": "", "output": "numbers = [1, 2, 3, 4, 5, 6, 7, 8]\nnew_list = [num for num in numbers if num % 2 != 0]\nprint(new_list)", "category": "Python"}, {"instruction": "Suggest a Python code to create a list containing the first five positive numbers.", "input": "", "output": "numbers = []\nfor i in range(1, 6):\n numbers.append(i)\nprint(numbers)", "category": "Python"}, {"instruction": "Re-write the following method to use a single loop instead of two.", "input": "def sum_special(arr):\n    temp = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            temp += arr[i] * arr[j]\n    return temp", "output": "def sum_special(arr):\n    temp = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            temp += arr[i] * arr[j]\n    return temp", "category": "Python"}, {"instruction": "Produce a program to print out the frequency of characters in a word.", "input": "Python", "output": "def character_frequency(word):\n    freq_dict = {}\n    for char in word:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    return freq_dict\n\nword = 'Python'\nprint(character_frequency(word))\n# {'P': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}", "category": "Python"}, {"instruction": "Generate a code to identify duplicate elements in a list", "input": "", "output": "def find_duplicates(lst):\n    duplicate_elements = []\n    for element in lst:\n        if lst.count(element) > 1 and element not in duplicate_elements:\n            duplicate_elements.append(element)\n    return duplicate_elements\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5, 6, 1]\n    print(find_duplicates(lst))", "category": "Python"}, {"instruction": "Generate an algorithm that creates a Fibonacci sequence", "input": "", "output": "def Fibonacci_sequence(length): \n    fib_seq = [0, 1]\n    if length == 1:\n        return [0]\n    elif length == 2:\n        return fib_seq\n    else:\n        for i in range(2, length):\n            fib_seq.append(fib_seq[i - 1] + fib_seq[i - 2])\n        return fib_seq\n\nif __name__ == '__main__':\n    length = 7\n    print(Fibonacci_sequence(length))", "category": "Python"}, {"instruction": "Write a code to calculate the gravitational force between two objects", "input": "Two objects with a mass of 3kg and 10kg are separated by 10m.", "output": "def gravitational_force(m1, m2, r):\n    G = 6.67 * 10**-11\n    f = G*(m1*m2/r**2)\n    return f\n    \nif __name__ == '__main__':\n    m1 = 3\n    m2 = 10\n    r = 10\n    force = gravitational_force(m1, m2, r)\n    print(force)", "category": "Python"}, {"instruction": "Output the output of the following python script.", "input": "Python Script:\n\nx = 5\ny = 7\n\ndef add(x, y):\n    return x + y\n\nadd(x, y)", "output": "12", "category": "Python"}, {"instruction": "Suggest a code to do the following task: Input a string and output the count of all the characters occuring in the string.", "input": "String: \"Hello World\"", "output": "string = \"Hello World\"\n\ndef count_characters(string):\n    count_dict = {}\n    for char in string:\n        if char not in count_dict:\n            count_dict[char] = 1\n        else:\n            count_dict[char] += 1\n    return count_dict\n\nprint(count_characters(string))", "category": "Python"}, {"instruction": "Write a code to generate a random password containing at least one symbol, one number, one lowercase letter and one uppercase letter", "input": "", "output": "import string\nimport random\n\ndef generate_password(length):\n    symbols = string.punctuation\n    numbers = string.digits\n    lowercase = string.ascii_lowercase\n    uppercase = string.ascii_uppercase\n    \n    characters = symbols + numbers + lowercase + uppercase\n    password = random.choice(symbols) + random.choice(numbers) + random.choice(lowercase) + random.choice(uppercase)\n    \n    for _ in range(length-4):\n        password += random.choice(characters)\n        \n    return password", "category": "Python"}, {"instruction": "Edit the following code to generate a boolean array with True for odd numbers and False for even numbers", "input": "a = [1, 2, 3, 4, 5]", "output": "import numpy as np\n\na = [1, 2, 3, 4, 5]\nb = np.array([i % 2 for i in a])", "category": "Python"}, {"instruction": "Write a Python program to find the group of three numbers in a list that has the greatest product.", "input": "list = [2, 3, -2, -3, 4, -5]", "output": "def find_greatest_product(lst):\n    products = []\n    for i in range(len(lst)-2):\n        for j in range(i+1, len(lst)-1):\n            for k in range(j+1, len(lst)):\n                products.append(lst[i] * lst[j] * lst[k])\n    return max(products)", "category": "Python"}, {"instruction": "Write a code to get the current weather information for a given city.", "input": "city = \"New York\"", "output": "import requests\nimport json\n\ndef get_weather_information(city):\n    url = 'http://api.openweathermap.org/data/2.5/weather?q={},<APIKEY>'.format(city)\n\n    response = requests.get(url)\n    data = json.loads(response.text)\n    return data\n\nif __name__ == '__main__':\n    print(get_weather_information(\"New York\"))", "category": "Python"}, {"instruction": "Write a function that expects a string as a parameter and returns all the words in the string with the length greater than three", "input": "This is a test string", "output": "def greater_than_three(string):\n    words = string.split(\" \")\n    result = []\n    for word in words:\n        if len(word) > 3:\n            result.append(word)\n    return result", "category": "Python"}, {"instruction": "Write a Python function to create a matrix of given size filled with zeros.", "input": "3", "output": "def create_matrix(size):\n    matrix = []\n    for i in range(size):\n        row = []\n        for j in range(size):\n            row.append(0)\n        matrix.append(row)\n    return matrix", "category": "Python"}, {"instruction": "Write a function to add one to every element in an array of integers.", "input": "arr = [1,3,5,7]", "output": "def add_one(arr): \n    for i in range(len(arr)): \n        arr[i] += 1 \n    return arr", "category": "Python"}, {"instruction": "Create a function that takes three parameters, a start number, an end number, and a step. It should return a list containing all the numbers between the start and end numbers in steps of the given size.", "input": "start = 0\nend = 10\nstep = 2", "output": "def create_list(start, end, step): \n    list = [] \n    while start < end: \n        list.append(start) \n        start += step \n    return list", "category": "Python"}, {"instruction": "Add the following line to the top of this Python code to make it syntactically correct.", "input": "begin\ndef test_it();\n    print(\"This is a test\")", "output": "# Add the following line to the top of this Python code to make it syntactically correct.\ndef test_it():\n    print(\"This is a test\")", "category": "Python"}, {"instruction": "Create a function that takes a string and an integer as input and returns the string repeated n times.", "input": "", "output": "def repeat_string(string, n):\n    \"\"\"\n    This function takes a string and an integer as input and returns the \n    string repeated n times.\n\n    Parameters:\n    string (string): The string that needs to be repeated.\n    n (int): The number of times the string needs to be repeated.\n\n    Returns:\n    string: The repeated string\n    \"\"\"\n    return string * n", "category": "Python"}, {"instruction": "Write a code to print out all numbers between 1 and n divisible by 3 and 5 without using a loop.", "input": "", "output": "def print_numbers(n): \n    x = list(range(1,n+1)) \n    print([i for i in x if i % 3 == 0 and i % 5 == 0]) \n \n# Driver code \nn = 15\nprint_numbers(n)", "category": "Python"}, {"instruction": "Write a code to train a sentiment classification model on the IMDB sentiment analysis dataset.", "input": "", "output": "# import libraries \nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# load the data\nimdb = pd.read_csv('imdb.csv')\n\n# Create feature vectors for training\nvectorizer = CountVectorizer() \nX = vectorizer.fit_transform(imdb.TEXT)\ny = imdb.SENTIMENT\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=42)\n \n# Train a logistic regression classifier\nlr = LogisticRegression(solver='lbfgs').fit(X_train, y_train)\n\n# Evaluate the model performance\naccuracy = lr.score(X_test, y_test)\nprint('Accuracy of sentiment classification model:', accuracy)", "category": "Python"}, {"instruction": "Create a function to find the area of a circle by taking the radius as an argument.", "input": "", "output": "def area_of_circle(radius):\n    \"\"\"\n    This function takes a radius as input and returns the area of the circle.\n\n    Parameters:\n    radius (float): The radius of the circle.\n\n    Returns:\n    float: The area of the circle.\n    \"\"\"\n    return 3.14 * (radius ** 2)", "category": "Python"}, {"instruction": "Write a code to find the longest consecutive sequence inside of a given list of numbers.", "input": "[1, 3, 5, 7, 8, 2, 4, 9]", "output": "def find_longest_seq(arr):\n    max_len = 0\n    curr_seq = []\n    for num in arr:\n        if not curr_seq or num == curr_seq[-1] + 1:\n            curr_seq.append(num)\n            max_len = max(max_len, len(curr_seq))\n        else: \n            curr_seq = [num]\n    return max_len", "category": "Python"}, {"instruction": "Write a function that takes a list of integers and returns the shortest continuous increasing subarray in the list.", "input": "[2,3,3,4,3,4,5,6,7]", "output": "def shortest_increasing_subarray(nums):\n    res, curr = float('inf'), 0\n    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]: \n            curr += 1\n        else:\n            res = min(res, curr)\n            curr = 0\n    return max(res, curr) + 1", "category": "Python"}, {"instruction": "Write a Python class for a Rectangle object with two instance attributes, length and width.", "input": "", "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length \n        self.width = width", "category": "Python"}, {"instruction": "Create a sorting algorithm to sort a given list of numbers from lowest to highest.", "input": "[1, 4, 3, 7, 8, 10]", "output": "def sort_list(arr):\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        if min_index != i:\n            arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr", "category": "Python"}, {"instruction": "Using the given Python class, write a constructor and a method to display the details.", "input": "class Customer:", "output": "class Customer:\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address\n   \n    def display_details(self):\n        print(f\"Name: {self.name}\\nAge: {self.age}\\nAddress: {self.address}\")", "category": "Python"}, {"instruction": "Write a Python code that turns the given input into a list of dictionaries.", "input": "['John,21', 'Jane,27', 'Jack,38']", "output": "[{'name': 'John', 'age': '21'},\n {'name': 'Jane', 'age': '27'},\n {'name': 'Jack', 'age': '38'}]", "category": "Python"}, {"instruction": "Identify the vulnerabilities in the given program", "input": "def transferMoney(username,amount):\n    #read from db their current balance\n    curBalance=readDB(\"SELECT bankBalance from users where username=\" + username)\n    #update the current balance\n    curBalance+=amount\n    #write to the db with the new balance\n    writeDB(\"UPDATE users SET bankBalance = \" + curBalance + \" where username=\" + username)", "output": "The code is vulnerable to SQL injection when inserting username into the database queries as the parameter is not sanitized properly. It is also vulnerable to Race Condition attack if two threads try to update the same user's balance simultaneously. It is also vulnerable to Integer Overflow attack if the amount is greater than the maximum value allowed.", "category": "Python"}, {"instruction": "Modify the code to account for a list containing only one item.", "input": "def sum_list(list):\n    result=0\n    for number in list:\n        result+=number\n    return result", "output": "def sum_list(list):\n    if len(list) == 0:\n        return 0\n    elif len(list) == 1:\n        return list[0]\n    else:\n        result=0\n        for number in list:\n            result+=number\n        return result", "category": "Python"}, {"instruction": "Create a basic GUI with a button in Python.", "input": "", "output": "from tkinter import *\n\n# create GUI window\nroot = Tk()\n\n# create the button\nbtn = Button(root,text=\"Click me!\",width=10)\n\n# add the button to the window\nbtn.pack()\n\n# enter the mainloop\nroot.mainloop()", "category": "Python"}, {"instruction": "What is the correct syntax to create a dictionary in Python?", "input": "", "output": "my_dict = {'key1':'value1','key2':'value2'}", "category": "Python"}, {"instruction": "Write a Python function that takes in one argument and prints out the Fibonacci number for that argument.", "input": "", "output": "def Fibonacci(x): \n    if x == 0: \n        return 0\n    elif x == 1: \n        return 1\n    else: \n        return Fibonacci(x-1)+Fibonacci(x-2) \n\nif __name__ == '__main__':\n    print(Fibonacci(5))  # Output: 5", "category": "Python"}, {"instruction": "Write a Python script to send an email using the smtplib module.", "input": "", "output": "import smtplib\n\nsender = 'from@example.com'\nrecipients = ['to@example.com']\n\nmessage = \"\"\"Subject: Test Email\n\nThis is a test email message.\n\"\"\"\n\nwith smtplib.SMTP('localhost') as server:\n  server.sendmail(sender, recipients, message)", "category": "Python"}, {"instruction": "Construct a while loop in Python which runs until user input is equal to 5.", "input": "", "output": "userInput = 0\nwhile userInput != 5:\n    userInput = int(input('Enter a number: '))", "category": "Python"}, {"instruction": "Create a function in Python which takes a string and reverses it.", "input": "", "output": "def reverse_string(my_string):\n    return my_string[::-1]", "category": "Python"}, {"instruction": "Create a program to execute a given command-line argument.", "input": "", "output": "import sys\n\nif __name__ == '__main__':\n    args = sys.argv\n    if len(args) > 1:\n        command = args[1]\n        print(f'Executing command: {command}')\n        os.system(command)", "category": "Python"}, {"instruction": "Generate code to create a Numpy array with 3 rows and 4 columns.", "input": "", "output": "import numpy as np \narr = np.array([[0, 1, 2, 3], \n                [4, 5, 6, 7],\n                [8, 9, 10, 11]])", "category": "Python"}, {"instruction": "Develop a program that prints all the prime numbers between 0 and n.", "input": "", "output": "def prime_numbers(n): \n    primes = [] \n    for num in range(2, n+1): \n        is_prime = True\n        for i in range(2, num): \n            if (num % i == 0): \n                is_prime = False\n        if is_prime: \n            primes.append(num) \n    return primes", "category": "Python"}, {"instruction": "Write a loop in Python to create a multiplication table.", "input": "", "output": "for x in range(1, 11):\n   for y in range(1, 11):\n       print(x, 'x', y, '=', x*y)", "category": "Python"}, {"instruction": "Use TensorFlow to create a convolutional neural network to classify handwritten digits.", "input": "", "output": "import tensorflow as tf \n\n# Create a model\nmodel = tf.keras.models.Sequential([\n    # Add a convolutional layer with a 3x3 window\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)),\n    # Add a Max Pooling layer\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    # Add a Flatten layer\n    tf.keras.layers.Flatten(),\n    # Add a Dense layer with 10 neurons and a softmax activation function \n    tf.keras.layers.Dense(10, activation='softmax')\n])\n# Compile the model\nmodel.compile(optimizer='adam',\n   loss='sparse_categorical_crossentropy',\n   metrics=['accuracy'])", "category": "Python"}, {"instruction": "Given an array of numbers, provide a nested for loop to calculate the sum of elements in the array.", "input": "", "output": "sum = 0\nfor row in arr:\n for el in row: \n  sum += el \n\nprint(\"The sum of elements in the array is:\",sum)", "category": "Python"}, {"instruction": "Write the code to sort a dictionary by values in Python.", "input": "my_dict = {\n    \"a\": 10,\n    \"b\": 5,\n    \"c\": 15\n}", "output": "my_dict = {\n    \"a\": 10,\n    \"b\": 5,\n    \"c\": 15\n}\n\nsorted_dict = {k: v for k, v in sorted(my_dict.items(), key=lambda item: item[1])}\n\nprint(sorted_dict)\n#output: {\"b\": 5, \"a\": 10, \"c\": 15}", "category": "Python"}, {"instruction": "List the type of loops in Python.", "input": "", "output": "In Python, there are two types of loops - for loop and while loop. A for loop is used to iterate over a sequence (list, tuple, string). A while loop is used to iterate until a condition is met.", "category": "Python"}, {"instruction": "Write a function that takes an array of numbers and returns an array whose elements are the product of all the elements except the element at the current index.", "input": "arr = [2, 3, 4, 5]", "output": "def get_products(arr):\n    left = [1]\n    right = [1]\n    ans = []\n\n    # Traverse from left to right\n    for i in range(1, len(arr)):\n        left.append(arr[i-1] * left[i-1])\n\n    # Traverse from right to left\n    for i in reversed(range(len(arr)-1)):\n        right.insert(0, arr[i+1] * right[0])\n\n    # Compute the product of all elements except itself\n    for i in range(len(arr)):\n        ans.append(left[i] * right[i])\n\n    return ans\n\nget_products(arr) # returns [20, 15, 12, 10]", "category": "Python"}, {"instruction": "Write a function in Python that takes a number n as its parameter and returns the sum of the squares of the first n natural numbers", "input": "", "output": "def sum_of_squares(n):\n    result = 0\n    for i in range(1, n + 1):\n        result += i**2\n    return result", "category": "Python"}, {"instruction": "How does Python handle data types?", "input": "", "output": "Python uses dynamic typing, meaning that the type of data in a variable is not explicitly declared, instead it is automatically determined by the interpreter when a value is assigned to a variable. This allows for data types to be changed throughout the course of a program.", "category": "Python"}, {"instruction": "Construct an if/else statement in Python to print \"Welcome new user\" if the value of variable \"userID\" is greater than 0.", "input": "userID = 5", "output": "if userID > 0:\n    print(\"Welcome new user\")\nelse:\n    print(\"User ID is invalid\")", "category": "Python"}, {"instruction": "Find a tree traversal algorithm in Python.", "input": "", "output": "def tree_traversal(root): \n    if root is None: \n        return\n  \n    # First print the data of node \n    print(root.data) \n  \n    # Then recur on left child \n    tree_traversal(root.left) \n  \n    # Finally recur on right child \n    tree_traversal(root.right)", "category": "Python"}, {"instruction": "Generate a random list containing 10 elements in the range of 0-20", "input": "", "output": "import random \n\ndef generate_list(): \n    random_list = []\n    for i in range(10): \n        random_list.append(random.randint(0, 20)) \n  \n    return random_list", "category": "Python"}, {"instruction": "Improve the following implementation of a binary search algorithm.", "input": "def binary_search(array, target):\n  low = 0\n  high = len(array)-1\n  while low <= high:\n    mid = (low+high)//2\n    if array[mid] == target:\n      return mid\n    elif array[mid] < target:\n      low = mid+1\n    else:\n      high = mid-1", "output": "def binary_search(array, target):\n  low = 0\n  high = len(array)-1\n  while low <= high:\n    mid = (low+high)//2\n    if array[mid] == target:\n      return mid\n    elif array[mid] < target:\n      low = mid+1\n    else:\n      high = mid-1\n  return -1 # target not found", "category": "Python"}, {"instruction": "Write code to solve this DP(Dynamic Programming) problem from LeetCode.", "input": "You are given coins of different denominations and a total amount of money. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.", "output": "def coinChange(coins, amount):\n    dp = [float(\"inf\")] * (amount + 1)\n    dp[0] = 0\n\n    for coin in coins:\n        for x in range(coin, amount + 1):\n            dp[x] = min(dp[x], dp[x - coin] + 1)\n    if dp[amount] == float(\"inf\"):\n        return -1\n    return dp[amount]", "category": "Python"}, {"instruction": "Find a Python solution for this leetcode problem.", "input": "Given an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.", "output": "def twoSum(nums, target):\n    numDict = dict()\n    for index, num in enumerate(nums):\n        if num in numDict.keys():\n            return [numDict[num], index]\n        else:\n            numDict[target-num] = index", "category": "Python"}, {"instruction": "Given a list of words, write a function to check if the list contains any palindrome words.", "input": "words = [\"racecar\", \"level\", \"tot\", \"trot\"]", "output": "def contains_palindrome(words):\n    for word in words:\n        if word == word[::-1]:\n            return True\n    return False", "category": "Python"}, {"instruction": "Create four classes for a digital banking application.", "input": "", "output": "Class 1: BankAccount - Responsible for creating, deleting, and managing bank accounts\nClass 2: Transaction - Responsible for storing and tracking transaction histories\nClass 3: User - Responsible for managing user access information \nClass 4: Customer - Responsible for storing customer data and providing customer service", "category": "Python"}, {"instruction": "Use TensorFlow to build a deep learning model for predicting the price of a given stock.", "input": "", "output": "import tensorflow as tf\n\n# define the model\nmodel = tf.keras.Sequential([\n tf.keras.layers.Input(shape=(1,), name=\"Input_Layer\", dtype=tf.float32),\n tf.keras.layers.Dense(32, activation='relu', name=\"Hidden_Layer_1\"),\n tf.keras.layers.Dense(32, activation='relu', name=\"Hidden_Layer_2\"),\n tf.keras.layers.Dense(1, activation='sigmoid', name=\"Output_Layer\")\n])\n\n# compile the model\nmodel.compile(\noptimizer=tf.keras.optimizers.Adam(),\nloss=tf.keras.losses.MeanSquaredError(),\nmetrics=[tf.keras.metrics.MeanAbsoluteError()],\n)\n\n# fit the model\nmodel.fit(x_train, y_train, batch_size=32, epochs=10, validation_data=(x_val, y_val))", "category": "Python"}, {"instruction": "Create a Flask endpoint for displaying a list of items from a database.", "input": "Table name: 'items'\nColumns: id, name, price", "output": "@app.route('/items', methods = ['GET'])\ndef display_items():\n # write your code here\n items = []\n # query the database\n items = db.session.query(Items).all()\n # return the list of items\n return jsonify(items)", "category": "Python"}, {"instruction": "Implement a game of Hangman in Python.", "input": "", "output": "import random\n\n# list of words\nword_list = [\"python\", \"java\", \"computer\", \"programming\", \"hangman\"]\n\n# randomly select a word\nword = random.choice(word_list)\n\n# set initial lives\nlives = 6\n\n# write your code here\ndef hangman(word, lives):\n  return # write your code here", "category": "Python"}, {"instruction": "Create a program to find the nth element of the Fibonacci sequence.", "input": "", "output": "def nth_element(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1 \n    else:\n        return nth_element(n-1) + nth_element(n-2)", "category": "Python"}, {"instruction": "Find the number of combinations of a given length from the characters in a given string.", "input": "string: \"ABCD\"\nlength: 2", "output": "def count_combinations(string, length):\n    result = 1\n    for i in range(length):\n        result *= len(string)\n    return result", "category": "Python"}, {"instruction": "Find the first non-repeating character in a string.", "input": "string: \"abcdabcd\"", "output": "def find_first_non_repeating(string):\n    seen = {}\n    for char in string:\n        if char in seen:\n            seen[char] +=1 \n        else:\n            seen[char] = 1\n    return [char for char in string if seen[char] == 1][0]", "category": "Python"}, {"instruction": "Calculate the Fibonacci sequence up to the n-th number where n is provided as an argument.", "input": "", "output": "def fibonacci(n):\n    if n == 0:\n        return 0 \n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)", "category": "Python"}, {"instruction": "Create a program in Python for converting Fahrenheit to Celsius.", "input": "", "output": "def fahrenheit_to_celsius(temp): \n    return (temp - 32) * 5/9;  \n  \n# Driver code \ntemperature = float(input(\"The temperature in Fahrenheit: \")) \nprint(\"Temperature in Celsius: {}\".format( fahrenheit_to_celsius(temperature)))", "category": "Python"}, {"instruction": "Given two numbers N and M, write a program to find the number of numbers from 1 to N where the last digit is less than or equal to M.", "input": "N = 30, M = 7", "output": "def findNumbers(N, M): \n    count = 0\n    for i in range(1, N+1): \n        if i % 10 <= M: \n            count += 1\n    return count", "category": "Python"}, {"instruction": "Create an array of all the odd numbers between 0 and n (inclusive).", "input": "", "output": "def odd_numbers_array(n):\n    array = []\n    for i in range(0,n+1):\n        if i%2 != 0:\n            array.append(i)\n    return array", "category": "Python"}, {"instruction": "Create a function to search a given string for the first vowel.", "input": "", "output": "def first_vowel(string): \n    index = 0\n    for char in string:\n        if char in [\"a\", \"e\", \"i\", \"o\", \"u\"]: \n            return index\n        else: \n            index+= 1 \n    return -1", "category": "Python"}, {"instruction": "Sort the following array of numbers in-place using the bubble sort algorithm: [5, 3, 2, 8, 1].", "input": "", "output": "for i in range(len(arr)):\n    for j in range(len(arr)-i-1): \n        if arr[j] > arr[j+1] :\n            arr[j], arr[j+1] = arr[j+1], arr[j]\n            \nResulting array = [1, 2, 3, 5, 8]", "category": "Python"}, {"instruction": "Generate a random phone number using random numbers in Python.", "input": "", "output": "import random\n\ndef generatePhoneNumber():\n  nums = [str(random.randint(0, 9) for _ in range(10))]\n  return '-'.join([''.join(nums[:3]), ''.join(nums[3:6]), ''.join(nums[6:])])\n\nprint(generatePhoneNumber() // \"567-444-0116\"", "category": "Python"}, {"instruction": "Given a string s and an integer k, find the kth largest character of s.", "input": "s = \"hello\"\nk = 3", "output": "def kthLargestCharacter(s, k):\n  char_dict = {}\n  for c in s:\n    if c not in char_dict:\n      char_dict[c] = 1\n    else:\n      char_dict[c] += 1\n\n  char_list = sorted(char_dict.items(), key=lambda x : x[1], reverse = True)\n  \n  return char_list[k - 1][0]\n\nprint(kthLargestCharacter(s, k)) // l", "category": "Python"}, {"instruction": "Given two unsorted arrays, merge them in a sorted form without using any extra space.", "input": "nums1 = [5, 8, 2]\nnums2 = [7, 1]", "output": "def mergeArrays2(nums1, nums2):\n  i = j = 0\n  while i < len(nums1) and j < len(nums2):\n    if nums1[i] > nums2[j]:\n      nums1[i], nums2[j] = nums2[j], nums1[i]\n      j += 1\n    else:\n      i += 1\n  \n  nums1.sort()\n  nums2.sort()\n\nprint(nums1) // [1, 2, 5]\nprint(nums2) // [7, 8]", "category": "Python"}, {"instruction": "Write a function to determine if a given string is a valid English word or not.", "input": "s = \"construct\"", "output": "def isValidWord(s):\n  words = open(\"words_alpha.txt\").readlines()\n  return s in words\n\nprint(isValidWord(s)) // true", "category": "Python"}, {"instruction": "Given two sorted arrays nums1 and nums2, combine their elements into a single array that is sorted.", "input": "nums1 = [1, 2, 3]\nnums2 = [2, 4, 5]", "output": "def mergeArrays(nums1, nums2):\n  result = []\n  i = j = 0\n  while i < len(nums1) and j < len(nums2):\n    if nums1[i] < nums2[j]:\n      result.append(nums1[i])\n      i += 1\n    else:\n      result.append(nums2[j])\n      j += 1\n  result += nums1[i:] + nums2[j:]\n \u00a7\u00a7 1080\n  return result\n\nprint(mergeArrays(nums1, nums2)) // [1, 2, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Given a set of strings s, find an algorithm to determine if the set is a palindrome.", "input": "s = {\"b\", \"c\", \"a\", \"a\", \"c\", \"b\"}", "output": "def isSetPalindrome(s):\n  n = len(s)\n  for i in range(int(n/2)):\n    if s[i] != s[n - i - 1]:\n      return False\n  return True\n \u00a7\u00a7 1060\n\nprint(isSetPalindrome(s)) // True", "category": "Python"}, {"instruction": "Write a function in Python which takes the information from the following dictionary and prints out the total price of all the items in it.\n \u00a7\u00a7 1020", "input": "my_dict = {\n  'item1': {'price': 20, 'quantity': 5},\n  'item2': {'price': 10, 'quantity': 3},\n}", "output": "def get_total(my_dict):\n  total = 0\n  for item in my_dict.values():\n    total += item['price'] * item['quantity']\n  return total\n\nprint(get_total(my_dict)) // 90", "category": "Python"}, {"instruction": "How can you use a for loop to traverse a dictionary?", "input": "", "output": "You can use a for loop to traverse a dictionary by iterating over the dictionary's keys or key-value pairs.\n\nFor example, you can loop through all the keys of a dictionary like this:\n\ndictionary = { 'a':1, 'b':2, 'c':3 } \nfor key in dictionary: \n    print(key) \n\nOr you can loop through all the key-value pairs like this:\n\ndictionary = { 'a':1, 'b':2, 'c':3 } \nfor key, value in dictionary.items(): \n    print(key, ':', value)", "category": "Python"}, {"instruction": "Construct a Python loop to display the elements in the following list.", "input": "my_list = [1, 2, 3, 4]", "output": "for element in my_list: \n    print(element)", "category": "Python"}, {"instruction": "Given a sequence of numbers, write a program to find the length of the longest subsequence in which all numbers are in increasing order.", "input": "arr = [1, 7, 4, 3, 2, 8]", "output": "def findLongestSubsequence(arr): \n    n = len(arr)\n    dp = [1]*n \n    for i in range(1, n): \n        for j in range(i): \n            if arr[i] > arr[j] and dp[i] < dp[j] + 1 : \n                dp[i] = dp[j]+1\n    return max(dp)", "category": "Python"}, {"instruction": "How can you check the memory used by a Python object?", "input": "", "output": "You can use the sys module\u2019s \"getsizeof()\" function to check the memory used by an object. The getsizeof() method returns the memory size of the specified object in bytes. For example, sys.getsizeof(data) will return the size of the data object in bytes.", "category": "Python"}, {"instruction": "Edit an existing Python script to read a 3D array of size 3 x 3 x 3", "input": "", "output": "arr = [[[0 for x in range(3)] for y in range(3)] for z in range(3)]\nfor x in range(3):\n    for y in range(3):\n        for z in range(3):\n            arr[x][y][z] = int(input())", "category": "Python"}, {"instruction": "Given two strings s1 and s2, write a function to return a new string containing the characters present only in s1.", "input": "s1 = \"abcdef\"\ns2 = \"fghijk\"", "output": "def unique_str(s1, s2):\n    res = \"\"\n    for i in s1:\n        if i not in s2:\n            res += i\n    return res", "category": "Python"}, {"instruction": "Re-write the code in the given input to make it more efficient.", "input": "def fibonacci(n):\n   if n <= 1:\n      return n\n   else:\n      return(fibonacci(n-1) + fibonacci(n-2))", "output": "def fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==0: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==1: \n        return 1\n    else: \n        a = 0\n        b = 1\n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "You need to add a feature to the existing code in the given input.", "input": "class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year", "output": "class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.mileage = 0\n\n    def getMileage(self):\n        return self.mileage", "category": "Python"}, {"instruction": "Reverse a given string using recursive function in Python.", "input": "", "output": "def reverse_string(str):\n    if len(str) == 0: \n        return str \n    else:\n        return reverse_string(str[1:]) + str[0]", "category": "Python"}, {"instruction": "Create a python program to return a new list with each item multiplied by 2 in an existing list.", "input": "[1, 2, 3, 4, 5]", "output": "def mult_by_two(nums):\n    \"\"\"\n    Returns a new list with each item multiplied by 2 in an existing list\n    :param nums: a list of numbers\n    :return: a list of numbers with each item multiplied by 2\n    \"\"\"\n    new_list = []\n    for num in nums:\n        new_list.append(num * 2)\n    return new_list\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5]\n    print(mult_by_two(nums))", "category": "Python"}, {"instruction": "Create a dockerfile to deploy a python app.", "input": "", "output": "FROM python:3.7-alpine\n\nWORKDIR /app\n\n# Copy and install dependencies\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\n# Copy application source\nCOPY src ./src\n\n# Set environment variables\nENV DJANGO_SETTINGS_MODULE=app.settings\n\nEXPOSE 8000\n\n# Run server\nENTRYPOINT [\"python\", \"src/manage.py\"]\nCMD [\"runserver\", \"0.0.0.0:8000\"]", "category": "Python"}, {"instruction": "Suggest a better algorithm for finding a prime number.", "input": "", "output": "def is_prime(n): \n    \"\"\" \n    A better algorithm for determining if a number is prime \n    :param n: The number to determine whether is prime \n    :return: a boolean if the number is prime\n    \"\"\"\n    if (n <= 1): \n        return False\n    if (n <= 3): \n        return True\n    if (n % 2 == 0 or n % 3 == 0): \n        return False\n  \n    i = 5\n    while(i * i <= n): \n        if (n % i == 0 or n % (i + 2) == 0): \n            return False\n        i = i + 6\n  \n    return True", "category": "Python"}, {"instruction": "Write a Kotlin class to represent a book. It should contain the title, author name, year of publication and ISBN.", "input": "", "output": "class Book {\n\n    private var title: String\n    private var authorName: String\n    private var yearOfPublication: Int\n    private var ISBN: String\n\n    constructor(title: String, authorName: String, yearOfPublication: Int, ISBN: String) {\n        this.title = title\n        this.authorName = authorName\n        this.yearOfPublication = yearOfPublication\n        this.ISBN = ISBN\n    }\n\n    fun getTitle(): String {\n        return title\n    }\n\n    fun setTitle(title: String) {\n        this.title = title\n    }\n\n    fun getAuthorName(): String {\n        return authorName\n    }\n\n    fun setAuthorName(authorName: String) {\n        this.authorName = authorName\n    }\n\n    fun getYearOfPublication(): Int {\n        return yearOfPublication\n    }\n\n    fun setYearOfPublication(yearOfPublication: Int) {\n        this.yearOfPublication = yearOfPublication\n    }\n\n    fun getISBN(): String {\n        return ISBN\n    }\n\n    fun setISBN(ISBN: String) {\n        this.ISBN = ISBN\n    }\n    \n}", "category": "Python"}, {"instruction": "Implement a recursive method to find the sum of all numbers from 1 to n. The method should take an integer n as its argument.", "input": "4", "output": "def sumNums(n): \n    if n == 0: \n        return 0\n    else: \n        return n + sumNums(n-1) \n  \n# Driver Code \nn = 4\nprint(sumNums(n))", "category": "Python"}, {"instruction": "What should be written in place of \"___\" to make the following code a valid if-else statement in Python?", "input": "if x >= 0:\n ___", "output": "if x >= 0:\n    print(\"x is positive\")", "category": "Python"}, {"instruction": "Improve the following code by implementing a more efficient algorithm.", "input": "def FunctionA(arr):\n    output = []\n    for elem in arr:\n        if elem > 0 and not elem in output:\n            output.append(elem)\n    return output", "output": "def FunctionA(arr):\n    output = set()\n    for elem in arr:\n        if elem > 0:\n            output.add(elem)\n    return list(output)", "category": "Python"}, {"instruction": "How can you create a string of all random characters of length 10 in Python?", "input": "", "output": "import random\nrandom_string = ''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ') for _ in range(10))", "category": "Python"}, {"instruction": "Write a code to find the longest common prefix among a given set of strings.", "input": "", "output": "\"\"\"\nA code to find the longest common prefix among a given set of strings\n\"\"\"\n\ndef longest_common_prefix(strs): \n  \n    if not strs: \n        return \"\" \n  \n    shortest_str = min(strs,key=len) \n   \n    for i, ch in enumerate(shortest_str): \n        for other in strs: \n            if other[i] != ch: \n                return shortest_str[:i]  \n    return shortest_str \n  \nif __name__ == '__main__': \n    strs = [\"flower\",\"flow\",\"flight\"] \n    print(\"The longest common prefix is: %s\" % longest_common_prefix(strs))", "category": "Python"}, {"instruction": "What libraries are commonly used in data science?", "input": "", "output": "\"\"\"\nSome of the most commonly used libraries in data science are NumPy, pandas, Matplotlib, Scikit-Learn, TensorFlow, Theano, Seaborn, Keras, NLTK, Apache Spark, and Bokeh. These libraries are used for a variety of tasks such as data manipulation, machine learning, visualization, natural language processing, and big data analysis.\n\"\"\"", "category": "Python"}, {"instruction": "What is the difference between Python 2 and Python 3?", "input": "", "output": "\"\"\"\nThe main difference between Python 2 and Python 3 is in how strings are treated. In Python 2, strings are written in byte strings or fully Unicode strings; in Python 3, strings are written in Unicode by default. Other differences include the import statement, integer division, integer in range function, function print, raising and catching exceptions, binary revisers, and many more.\n\"\"\"", "category": "Python"}, {"instruction": "Write a code that takes the input of two strings, and returns the longest common substring in them.", "input": "", "output": "\"\"\"\nA code that takes the input of two strings, and returns the longest common substring in them\n\"\"\"\n\ndef longest_common_substring(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\nif __name__ == '__main__': \n    s1 = \"Hello World\"\n    s2 = \"Hey World\"\n    print(\"The longest common substring is: %s\" % longest_common_substring(s1, s2))", "category": "Python"}, {"instruction": "Create a Python code for a basic for loop.", "input": "", "output": "\"\"\"\nA Python code for a basic for loop\n\"\"\"\n\nfor i in range(10):\n    print(i)", "category": "Python"}, {"instruction": "Write a code to perform a depth-first search on a binary search tree.", "input": "", "output": "\"\"\"\nA code to perform a depth-first search on a binary search tree\n\"\"\"\n\n# Node class \nclass Node: \n  \n    # Constructor to create a new node \n    def __init__(self, key): \n        self.key = key  \n        self.left = None\n        self.right = None\n  \n# A function to do inorder tree traversal \ndef depth_first_search(root): \n  \n    if root is not None: \n        print(root.key, end=\" \") \n        depth_first_search(root.left) \n        depth_first_search(root.right) \n  \nif __name__ == '__main__': \n    root = Node(1) \n    root.left      = Node(2) \n    root.right     = Node(3) \n    root.left.left  = Node(4) \n    root.left.right  = Node(5) \n  \n    print(\"Depth First Search:\")\n    depth_first_search(root)", "category": "Python"}, {"instruction": "What is pandas and why would someone use it?", "input": "", "output": "\"\"\"\nPandas is a Python library used for data analysis and manipulation. It is used for data wrangling, data preparation, and data exploration. Pandas allows for easy manipulation and analysis of data, as well as performing high-level operations on it. It also supports several data formats including CSV, JSON, SQlite, HDF5, and many more. Pandas is a powerful tool for data analysis as it is flexible, functional, and easy to use. It offers a wide range of tools for data analysis, including data filtering and data aggregation. With Pandas, it is possible to quickly convert, clean, and manipulate data into an easily understandable format, enabling the user to easily explore and identify trends and patterns.", "category": "Python"}, {"instruction": "Create a class in Python for a student which should include the following fields: first name, last name, age, and grade.", "input": "", "output": "class Student:\n    def __init__(self, first_name, last_name, age, grade):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n        self.grade = grade", "category": "Python"}, {"instruction": "Write a function to print out the triangle pattern as shown in the example.", "input": "height = 3", "output": "def triangle_pattern(height):\n    star = \"*\"\n    for i in range(height):\n        print(star*(i+1))", "category": "Python"}, {"instruction": "Using the data provided, create a function to calculate the mean value of the elements inside the dictionary.", "input": "data = {\"John\": 8.5, \"Jane\": 9, \"Bob\": 5}", "output": "def mean_value(data):\n    sum = 0\n    count = 0\n    for value in data.values():\n        sum += value\n        count += 1\n    \n    return round(sum/count, 2)", "category": "Python"}, {"instruction": "Write a function to take a list of strings and return only the words made up of the same letter.", "input": "word_list = [\"aaa\", \"cab\", \"bba\"]", "output": "def same_letter_words(word_list):\n    same_letter_words = [word for word in word_list if len(set(word)) == 1]\n    return same_letter_words", "category": "Python"}, {"instruction": "Generate python code to replace each character in a string with the next character in the alphabet.", "input": "", "output": "def replace_with_next_char(string):\n    output = \"\"\n    for char in string:\n        output += chr(ord(char) + 1)\n    return output", "category": "Python"}, {"instruction": "Implement a function in Python that calculates the Levenshtein Distance of two strings.", "input": "str1 = \"hackathon\"\nstr2 = \"hack\"", "output": "def calculate_levenshtein_distance(str1, str2):    \n    distances = np.zeros((len(str1)+1, len(str2)+1))\n    for i in range(0, len(str1)+1):\n        distances[i, 0] = i\n    for j in range(0, len(str2)+1):\n        distances[0, j] = j\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                distances[i, j] = distances[i-1, j-1]\n            else:\n                distances[i, j] = min(distances[i-1, j], distances[i, j-1], distances[i-1, j-1]) + 1\n    return distances[len(str1), len(str2)]", "category": "Python"}, {"instruction": "Write a code to sum all the values of the following dictionary.", "input": "d = {'a':2, 'b':3, 'c':4}", "output": "d = {'a':2, 'b':3, 'c':4}\n\ndef dictSum(d):\n    total = 0\n    for key in d:\n        total += d[key]\n    return total\n\nif __name__ == \"__main__\":\n    print(dictSum(d))", "category": "Python"}, {"instruction": "Construct a code segment to find all unique characters in a given string.", "input": "String: Geeksforgeeks", "output": "def find_unique(string): \n    uniq_char = [] \n    for i in string: \n        if i not in uniq_char: \n            uniq_char.append(i) \n    return uniq_char \n\nprint(find_unique(\"Geeksforgeeks\"))", "category": "Python"}, {"instruction": "What is the minimum requirements to become an AI Engineer?", "input": "", "output": "To be an AI engineer, at a minimum, a person must have a bachelor\u2019s degree in computer science, mathematics, or a related field. It is also beneficial for a person to have an understanding of artificial intelligence and machine learning principles, and to be familiar with programming languages, such as Python and C++. In addition, a working knowledge of data structures and algorithms, and experience with debugging and software development are important. Experience and/or certification in data engineering frameworks, such as TensorFlow or PyTorch, are also recommended.", "category": "Python"}, {"instruction": "Split a string into its individual words and store it in a list.", "input": "string = \"Hello world, this is a test string.\"", "output": "def split_to_words(string):\n    \"\"\"\n    Split a string into its individual words and store it in a list.\n    \"\"\"\n    return string.split()", "category": "Python"}, {"instruction": "Print all the prime numbers in the range of 2 to n.", "input": "n = 10", "output": "def print_all_primes(n):\n    \"\"\"\n    Print all the prime numbers in the range of 2 to n.\n    \"\"\"\n    for num in range(2, n+1):\n        if all(num % i != 0 for i in range(2, num)):\n            print(num)", "category": "Python"}, {"instruction": "Using the provided input, calculate the SHA256 checksum in Python.", "input": "string = \"Hello World!\"", "output": "import hashlib\n \ndef sha256_calc(string):\n    \"\"\"\n    Calculate SHA256 checksum in Python.\n    \"\"\"\n    sha_signature = hashlib.sha256(string.encode()).hexdigest()\n    return sha_signature", "category": "Python"}, {"instruction": "Given an array of integers, write a function to check if the sum of any two of them equals the given parameter \u2018n\u2019.", "input": "array = [2, 4, 6, 8]\nn = 10", "output": "def check_sum(array, n):\n    \"\"\"\n    Given an array of integers, returns True if the sum of any two of them equals the given parameter 'n'. \n    \"\"\"\n    for i in range(len(array)):\n        for j in range(i + 1, len(array)):\n            if array[i] + array[j] == n:\n                return True\n    return False", "category": "Python"}, {"instruction": "Create a class called Cat to represent a type of pet.", "input": "", "output": "class Cat:\n    def __init__(self, name, color, age):\n        self.name = name\n        self.color = color\n        self.age = age \n    \n    def eat(self):\n        print(f\"{self.name} is eating\")\n\n    def sleep(self):\n        print(f\"{self.name} is sleeping\")\n    \n    def play(self):\n        print(f\"{self.name} is playing\")\n\n    def __repr__(self):\n        return f\"<Cat {self.name}, {self.color}, {self.age}>\"", "category": "Python"}, {"instruction": "Given a text string, generate a Python code snippet to find the number of occurrences of a given word", "input": "The quick brown fox jumped over the lazy dog", "output": "def num_occurrences(text, word):\n    count = 0\n    words = text.split()\n    for w in words:\n        if w == word:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Create a simple program to capitalize the first letter of every sentence", "input": "", "output": "def capitalize_sentences(text): \n   sent_list = text.split(\".\")\n   cap_sent_list = [sentence.capitalize() for sentence in sent_list]\n   output = '.'.join(cap_sent_list)\n   return output", "category": "Python"}, {"instruction": "Create a code to calculate the most frequent character in a given string", "input": "s = \"Hello world!\"", "output": "def most_frequent_char(s):\n    counts = {}\n    max_char = \"\"\n    max_count = 0\n    for c in s:\n        if c in counts:\n            counts[c] += 1\n        else:\n            counts[c] = 1\n        if counts[c] > max_count:\n            max_char = c\n            max_count = counts[c]\n    return max_char\n  \n# example\ns = \"Hello world!\"\nprint(most_frequent_char(s))", "category": "Python"}, {"instruction": "Generate a code to find the power of n to m.", "input": "n = 3, m = 7", "output": "def pow_n_m(n, m):\n    result = 1\n    for i in range(1, m+1):\n        result *= n\n    return result\n  \n# example  \nn = 3 \nm = 7\nprint(pow_n_m(n, m))", "category": "Python"}, {"instruction": "In Python, define a class for a rectangle object.", "input": "", "output": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    \n    def __str__(self):\n        return f\"This is a rectangle with width of {self.width} and height of {self.height}.\"", "category": "Python"}, {"instruction": "Implement selection sort to sort a list in non-decreasing order", "input": "list = [9, 5, 3, 1, 8]", "output": "def selection_sort(list): \n    for i in range(len(list)): \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n        list[i], list[min_idx] = list[min_idx], list[i]\n    return list\n  \n# example  \nlist = [9, 5, 3, 1, 8]\nprint(selection_sort(list))", "category": "Python"}, {"instruction": "Suggest an appropriate algorithm to filter out unwanted words from a given paragraph of text.", "input": "", "output": "A possible approach to filter out unwanted words from a given paragraph of text is to use a hash table or dictionary. By creating a dictionary using key-value pairs of words and their frequencies, it becomes possible to compare the words found in a given text against the words in the dictionary to determine their relevance. If a word is not found in the dictionary, it can be assumed to be an unwanted word and can thus be discarded.", "category": "Python"}, {"instruction": "Create a function that takes in two integer values and prints out the larger one.", "input": "", "output": "def print_greater_value(num1, num2):\n    if num1 > num2:\n        print(num1)\n    else:\n        print(num2)", "category": "Python"}, {"instruction": "From the given list, create a dictionary where keys will be the elements and the values will be their corresponding indices.", "input": "elements = [\"one\", \"two\", \"three\", \"four\"]", "output": "def list_to_dict(elements):\n    return {el: i for i, el in enumerate(elements)}", "category": "Python"}, {"instruction": "Generate an array containing the next n numbers in the Fibonacci sequence.", "input": "", "output": "def generate_fibonacci_sequence(n):\n    sequence = [0, 1] \n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence", "category": "Python"}, {"instruction": "Write a function to create a random sequence of 0s and 1s.", "input": "", "output": "import random\n\ndef generate_random_sequence(length):\n    sequence = []\n    for i in range(length):\n        sequence.append(random.choice([0, 1]))\n    return sequence", "category": "Python"}, {"instruction": "Write a function to transform a dataset into a matrix, where rows represent data points followed by their labels.", "input": "dataset=[(2, 3, 1), (5, 4, -1), (1, 8, 1)]", "output": "def dataset_to_matrix(dataset):\n    matrix = [[x, y, z] for x, y, z in dataset]\n    return matrix", "category": "Python"}, {"instruction": "In the following code, modify the function to take the type of an argument as an input and perform the necessary conversion before returning the result.", "input": "def get_string(input): \n    return str(input)", "output": "def get_string(input, type): \n    if type == 'int':\n        return str(int(input))\n    elif type == 'float':\n        return str(float(input))\n    elif type == 'str':\n        return str(input)", "category": "Python"}, {"instruction": "Write a Python program to print the right angled triangle using asterisk.", "input": "", "output": "for i in range(0, 6): \n\tfor j in range(0, i + 1): \n\t\tprint(\"* \", end=\"\")\n\tprint(\"\\r\")", "category": "Python"}, {"instruction": "Create a function in Python that takes three numerical inputs and returns the maximum value.", "input": "", "output": "def max_value(num1, num2, num3):\n    max_num = max(num1, num2, num3)\n    return max_num", "category": "Python"}, {"instruction": "How do you retrieve the 3rd element of a set in Python?", "input": "", "output": "In Python, you can retrieve the 3rd element of a set by using the index operator []. The 3rd element of a set can be accessed by using the syntax set[2]. Note that the indexing in Python starts from 0, so the 3rd element will have index 2.", "category": "Python"}, {"instruction": "Create a function to sort items in a list alphabetically in Python.", "input": "", "output": "def alphabetical_sort(lst):\n    sorted_list = sorted(lst, key=lambda x: x.lower())\n    return sorted_list", "category": "Python"}, {"instruction": "How do you use the built-in function filter() in  Python?", "input": "", "output": "The filter() function in Python takes a function and an iterable as input arguments. The filter() function filters out elements from the given iterable (for example, a list) that don't satisfy the given condition determined by the function. It returns an iterator containing the filtered elements. Syntax: filter(function, iterable) Example: my_list = [1,4,5,6,7] filtered_list = filter(lambda x: x % 2 == 0, my_list) print(list(filtered_list)) Output: [4, 6]", "category": "Python"}, {"instruction": "Create a Python script to add a new field of \u201ccar color\u201d to the given JSON object.", "input": "{\n\"id\": \"12345\",\n\"model\": \"Honda\",\n\"year\": 2021\n}", "output": "import json\n\ndata = [\n    {\n        \"id\": \"12345\",\n        \"model\": \"Honda\",\n        \"year\": 2021\n    }\n]\n\ndata[0][\"color\"] = \"red\"\n\njson_object = json.dumps(data, indent = 4)\nprint(json_object)\n\nOutput: \n[\n    {\n        \"id\": \"12345\",\n        \"model\": \"Honda\",\n        \"year\": 2021,\n        \"color\": \"red\"\n    }\n]", "category": "Python"}, {"instruction": "Go through the following list of car models, and print out only the names of all-electric vehicles.", "input": "Tesla Model 3\nTesla Model X\nToyota Corolla\nKia Soul EV\nFord Fusion", "output": "cars = [\"Tesla Model 3\", \"Tesla Model X\", \"Toyota Corolla\", \"Kia Soul EV\", \"Ford Fusion\"]\n\nfor car in cars:\n    if \"EV\" in car:\n        print(car)\n\nOutput:\nTesla Model X\nKia Soul EV", "category": "Python"}, {"instruction": "Construct a code that takes a list of words as input and changes the case of each item in the list.", "input": "[cat, dog, apple]", "output": "def toUpperCase(words):\n    upper_words=[]\n    for word in words:\n      upper_words.append(word.upper())\n    return upper_words\n\nif __name__ == \"__main__\":\n    print(toUpperCase(['cat','dog','apple']))", "category": "Python"}, {"instruction": "Create a function that takes a given sentence as input and outputs a list of all its words.", "input": "Sentence: I am learning to code", "output": "def stringsplit(sentence):\n    words=sentence.split(' ')\n    return words\n\nif __name__ == \"__main__\":\n    print(stringsplit('I am learning to code'))", "category": "Python"}, {"instruction": "Write a class that has a method to return the smallest element in a given list of integers.", "input": "[12, 24, 72, 1, 4]", "output": "class MinValue:\n    def getMin(self, numList):\n        minVal = numList[0]\n        for i in numList:\n            if i < minVal:\n                minVal = i\n        return minVal\n\nif __name__ == \"__main__\":\n    obj = MinValue()\n    numList = [12, 24, 72, 1, 4]\n    print(obj.getMin(numList))", "category": "Python"}, {"instruction": "Run the following code in Python 3.", "input": "num1 = 10\nnum2 = 20", "output": "num1 = 10\nnum2 = 20\n\nresult = num1 + num2\n\nprint(result)\n\n# Output\n30", "category": "Python"}, {"instruction": "Given a binary tree, write a code to search a given value in the tree.", "input": "", "output": "def search_tree(tree, value):\n    # If the tree is empty\n    if not tree:\n        return False\n \n    if value == tree.val:\n        return True\n \n    # If the given value is less than the tree's value\n    # search left subtree\n    elif value < tree.val:\n        return search_tree(tree.left, value)\n \n    # If the given value is more than tree's value\n    # search right subtree\n    else:\n        return search_tree(tree.right, value)", "category": "Python"}, {"instruction": "Generate a random string of length 10 consisting of letters and numbers.", "input": "", "output": "import random\nimport string\n\ndef generate_random_string():\n    rand_string = ''.join(random.choices(string.ascii_lowercase +\n                                        string.digits,\n                                        k=10))\n    return rand_string\n\n# testing\nrandom_string = generate_random_string()\nprint(random_string)", "category": "Python"}, {"instruction": "Given a string and a character, write a program that counts the number of occurrences of the character in the string.", "input": "string = 'Hello World!' \ncharacter = 'l'", "output": "def count_occurrences(string, character): \n  count = 0\n  for i in range(len(string)):\n    if string[i] == character:\n      count += 1\n  return count", "category": "Python"}, {"instruction": "Create a function to generate a list of prime numbers between 2 and n.", "input": "", "output": "def prime_numbers(n):\n    prime_nums = []\n    for num in range(2, n + 1):\n        if num > 1:\n            for i in range(2, num): \n                if (num % i) == 0: \n                    break\n            else:\n                prime_nums.append(num)\n    return prime_nums", "category": "Python"}, {"instruction": "Read a given text and classify each sentence as true or false.", "input": "text = \"The sky is blue, the sea is blue. The grass is green.\"", "output": "text = \"The sky is blue, the sea is blue. The grass is green.\"\n\nsentences = text.split(\".\")\ntrue_sentences = []\nfalse_sentences = []\n\nfor sentence in sentences:\n    if sentence.endswith(\"true\"):\n        true_sentences.append(sentence)\n    else:\n        false_sentences.append(sentence)\n\nprint(\"True sentences:\")\nprint(*true_sentences, sep=\"\\n\")\n\nprint(\"False sentences:\")\nprint(*false_sentences, sep=\"\\n\")", "category": "Python"}, {"instruction": "Split a string into an array of words and return the length of the longest word.", "input": "", "output": "def longest_word(string):\n    words = string.split(\" \")\n    longest_word_length = 0\n    for word in words:\n        if len(word) > longest_word_length:\n            longest_word_length = len(word)\n    return longest_word_length", "category": "Python"}, {"instruction": "Parse a given JSON object and output the contents in a tabular format", "input": "json_object = {\n    'name': 'John',\n    'age': 20,\n    'location': 'New York'\n}", "output": "import json\n\njson_object = {\n    'name': 'John',\n    'age': 20,\n    'location': 'New York'\n}\n\ndata = json.loads(json_object)\n\nfor key, value in data.items():\n    print(key + \": \" + str(value))", "category": "Python"}, {"instruction": "What is the time complexity of linear search in an unsorted array?", "input": "", "output": "The time complexity of linear search in an unsorted array is O(n), where n is the number of elements in the array. This is because in linear search, the algorithm has to inspect each element in the array in order sequentially until it finds the desired element. As the size of the array increases, the time taken to search increases linearly.", "category": "Python"}, {"instruction": "Implement a function that prints all prime numbers up to the provided number.", "input": "", "output": "def print_prime_numbers(n):\n    # iterate through all numbers up to the provided number\n    for num in range(2, n+1):\n        is_prime = True\n        # check if a number is prime\n        for j in range(2, num):\n            if num % j == 0:\n                is_prime = False\n        # if prime print it\n        if is_prime:\n            print(num)\n\nprint_prime_numbers(20) # prints 2, 3, 5, 7, 11, 13, 17, 19", "category": "Python"}, {"instruction": "Debug the following program and make it function correctly", "input": "def count_words(text):\n    words = text.split()\n    count = 0\n    for word in words:\n        count += 1\n    return count\n\nstring = \"Hello world\"\n\nprint(count_words(string))", "output": "def count_words(text):\n    words = text.split()\n    count = 0\n    for word in words:\n        count += 1\n    return count\n\nstring = \"Hello world\"\n\n# we need to add a check for empty string\nif string != '':\n    print(count_words(string))\nelse:\n    print(0)", "category": "Python"}, {"instruction": "Rewrite the following Python function to include a try/except block.", "input": "def multiply(num1, num2):\n\tresult = num1 * num2\n\treturn result", "output": "def multiply(num1, num2):\n\ttry:\n\t\tresult = num1 * num2\n\t\treturn result\n\texcept TypeError:\n\t\tprint(\"Error: Inputs must be numbers\")", "category": "Python"}, {"instruction": "Write a code that prints the even numbers from 10 to 0 in descending order.", "input": "", "output": "for num in range(10,0,-1):\n    if(num % 2 == 0):\n        print(num)", "category": "Python"}, {"instruction": "Create a Python class called \"Car\" which has the \"model\" and \"year\" parameters.", "input": "", "output": "class Car:\n  def __init__(self, model, year):\n    self.model = model\n    self.year = year", "category": "Python"}, {"instruction": "Create a program to compare two strings and print the result.", "input": "str1 = \u201cHello\u201d, str2 = \u201cWorld\u201d", "output": "def compare_strings (str1, str2):\nif str1 == str2:\n    print (\"The strings are equal\")\nelse:\n    print (\"The strings are not equal\")", "category": "Python"}, {"instruction": "You need to write a function that takes an array and returns the count of even elements in the array.", "input": "[1, 2, 3, 4, 5, 6]", "output": "def even_count(arr):\n count = 0\n for i in arr:\n  if i % 2 == 0:\n   count += 1\n return count", "category": "Python"}, {"instruction": "Create a basic python object that stores the length and width of an rectangle.", "input": "", "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width", "category": "Python"}, {"instruction": "How can we store data persistently on the user's machine?", "input": "", "output": "Data can be stored persistently on the user's machine with various web storage APIs such as localStorage and sessionStorage. LocalStorage enables an application to store data on the user's computer with no expiration date, while sessionStorage stores information that can only be accessed while the application is open in the browser.", "category": "Python"}, {"instruction": "Create a Python program to find the average of the given numbers in the list", "input": "", "output": "my_list = [2, 4, 10, 20]\n\ndef average(nums):\n    return sum(nums) / len(nums)\n\nprint(average(my_list))\n\nOutput:\n8.0", "category": "Python"}, {"instruction": "Create a Python script to convert the given JSON object into an XML document.", "input": "{\n \"username\": \"John123\", \n \"age\": 23,\n \"country\": \"USA\"\n}", "output": "import xmltodict\nimport json\n\njson_object = {\n \"username\": \"John123\", \n \"age\": 23,\n \"country\": \"USA\"\n}\n\nxml_message = xmltodict.unparse(json.loads(json.dumps(json_object)), pretty=True)\n\nprint(xml_message)\n\nOutput:\n<root>\n  <username>John123</username>\n  <age>23</age>\n  <country>USA</country>\n</root>", "category": "Python"}, {"instruction": "Create a loop that takes a given number as input and outputs its prime factors.", "input": "Number: 35", "output": "n = 35\nfor i in range(2, 35):\n    while n % i == 0:\n        print(i)\n        n = n / i", "category": "Python"}, {"instruction": "Create a function in Python that takes two parameters and returns the sum of squares of all numbers between them", "input": "", "output": "def sum_of_square_range(a, b):\n    sum = 0\n    for i in range(a, b+1):\n        sum += i * i\n    return sum", "category": "Python"}, {"instruction": "Given a list of numbers, design a function in Python to check if all numbers in the list are even", "input": "", "output": "def all_even(lst):\n    for num in lst:\n        if num % 2 != 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Create a dictionary in Python whose keys are strings and values are integers", "input": "", "output": "my_dict = {\n  \"one\": 1,\n  \"two\": 2,\n  \"three\": 3\n}", "category": "Python"}, {"instruction": "Explain the concept of Binary Indexed Tree.", "input": "", "output": "Binary Indexed Tree (BIT) is a data structure that leverages the advantages of both an array and a binary tree. It is also known as a Fenwick tree. It can be used to efficiently compute the sum of given range of elements in an array. BIT is a type of tree data structure in which the values stored at each node represent the sum of all the elements in the subarrays rooted at the given node. The time complexity of operation in BIT is O(logN), where N is the size of the array.", "category": "Python"}, {"instruction": "Describe the runtime complexity of segment tree.", "input": "", "output": "Segment tree is a data structure used to efficiently query certain operations regarding a range of values. A segment tree is a binary tree, with each of its internal nodes containing a range and its leaf nodes reresenting the elements in the given range. The runtime complexity of a segment tree is O(logN), where N is the number of elements in the range. This makes it an efficient data structure for range queries. Additionally, the tree can be updated in logarithmic time.", "category": "Python"}, {"instruction": "Create a program to list all the prime numbers between two numbers", "input": "", "output": "def list_primes(start, end):\n    prime_list = [2]\n    for num in range(start, end + 1):\n        if all(num % i != 0 for i in range(2, num)):\n            prime_list.append(num)\n\n    return prime_list", "category": "Python"}, {"instruction": "You are given two strings, find the minimum number of edits required to make them equal.", "input": "", "output": "def edit_distance(str1, str2):\n    edits = 0\n    m = len(str1)\n    n = len(str2)\n    if m < n:\n        for i in range(m, n):\n            edits += 1\n        for i in range(m):\n            if str1[i] != str2[i]:\n                edits += 1\n    else:\n        for i in range(n, m):\n            edits += 1\n        for i in range(n):\n            if str1[i] != str2[i]:\n                edits += 1\n    return edits", "category": "Python"}, {"instruction": "Define a function which takes two strings as arguments and returns a list containing all characters that appear in either string.", "input": "string_1 = 'Apple'\nstring_2 = 'Banana'", "output": "def common_chars(string_1, string_2):\n    char_list = [] \n    for char in string_1:\n        if char in string_2 and char not in char_list:\n            char_list.append(char)\n    for char in string_2:\n        if char in string_1 and char not in char_list:\n            char_list.append(char)\n    return char_list", "category": "Python"}, {"instruction": "What are the benefits of using a hash table?", "input": "", "output": "The main benefits of using a hash table are faster search times, insertion/deletion time, and less space required to store data. Hash tables are most commonly used for storing key-value pairs, and can be used to quickly search for a value corresponding to a given key. They also provide a constant time for lookups, even for large data sets.", "category": "Python"}, {"instruction": "Create a dictionary containing the frequencies for each character in the given string.", "input": "string = \"hello world\"", "output": "def count_characters(string):\n\u00a0\u00a0\u00a0\u00a0freq_chars = {}\n\u00a0\u00a0\u00a0\u00a0for char in string:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if char in freq_chars:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0freq_chars[char] += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0freq_chars[char] = 1\n\u00a0\u00a0\u00a0\u00a0return freq_chars", "category": "Python"}, {"instruction": "Using Python, write a code to generate the Fibonacci series up to the given number.", "input": "num = 10", "output": "def generateFibonacciSeries(num): \n    series = [0, 1] \n    for i in range(2, num): \n        series.append(series[i - 2] + series[i - 1]) \n    return series\n\nprint(generateFibonacciSeries(num)) # prints [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "category": "Python"}, {"instruction": "Construct a program that takes integers x and y and swaps their values.", "input": "x = 5\ny = 10", "output": "# get two integers from the user\nx = int(input(\"Enter value for x: \"))\ny = int(input(\"Enter value for y: \"))\n\n# swap\ntmp = x\nx = y\ny = tmp\n\n# print the swapped values\nprint(\"x =\", x, \"and y =\", y)", "category": "Python"}, {"instruction": "How to find the most common integer in a list?", "input": "", "output": "The most common integer in a list can be found using the collections.Counter module. The Counter class creates a dictionary with the elements in the list as keys and the number of occurrences as values. The most_common() method can then be used to find the element with the highest number of occurrences.", "category": "Python"}, {"instruction": "Design a data structure to track the frequency of words in a given text.", "input": "", "output": "A HashMap can be used to track the frequency of words in a given text. The keys of the map would represent the words in the text and the associated values would represent the frequency of that word. The time complexity for retrieving the frequency of a given word in hashmap will be O(1).", "category": "Python"}, {"instruction": "Write a function that takes a string and returns the letter which appears most frequently.", "input": "s = \"apple\"", "output": "def most_frequent_letter(s):\n    # get the letter frequency\n    letter_frequency = {}\n    for ch in s:\n        if ch in letter_frequency:\n            letter_frequency[ch] += 1\n        else:\n            letter_frequency[ch] = 1\n\n    # find the letter with the max frequency\n    max_frequency = 0\n    max_frequency_letter = ''\n    for letter, frequency in letter_frequency.items():\n        if frequency > max_frequency:\n            max_frequency = frequency\n            max_frequency_letter = letter\n\n    return max_frequency_letter\n\nprint(most_frequent_letter(\"apple\")) # 'p'", "category": "Python"}, {"instruction": "Write a Python script to check for syntactic correctness of an algorithm.", "input": "Algorithm = \"1. Read input\n2. Initialize variables\n3. Process input\n4. Output result\"", "output": "def is_algorithm_syntactically_correct(algorithm):\n    algorithm = algorithm.replace('\\n', ' ').replace('\\t ', ' ').lower()\n    \n    required_words = ['read', 'input', 'initialize', 'variables', 'process', 'output', 'result']\n    for word in required_words:\n        if word not in algorithm:\n            return False\n    return True", "category": "Python"}, {"instruction": "Reverse the following string without using in-built functions in Python.", "input": "Hello World", "output": "dlroW olleH", "category": "Python"}, {"instruction": "Convert the following range to list elements in Python.", "input": "range(2, 8)", "output": "list(range(2, 8)) # [2, 3, 4, 5, 6, 7]", "category": "Python"}, {"instruction": "Create a code to check whether two words are nearly identical.", "input": "Word A: bte\nWord B: tree", "output": "def is_nearly_identical(str1, str2): \n    edit_dist = 0\n    m = len(str1)\n    n = len(str2)\n\n    # Create matrix to store results of  subproblems \n    dp = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n    for i in range(m + 1): \n        for j in range(n + 1):  \n            if i == 0: \n                dp[i][j] = j   \n            elif j == 0: \n                dp[i][j] = i    \n            elif str1[i - 1] == str2[j - 1]: \n                dp[i][j] = dp[i - 1][j - 1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j - 1],      # Insert \n                                   dp[i - 1][j],      # Remove \n                                   dp[i - 1][j - 1])  # Replace \n\n    edit_dist = dp[m][n]\n\n    if edit_dist == 1: \n        return True\n    else:\n        return False\n\n# Driver code\nif is_nearly_identical(\"bte\",\"tree\"): \n    print(\"Words are nearly identical\") \nelse: \n    print(\"Words are not nearly identical\")", "category": "Python"}, {"instruction": "Write a code to find the sum of the multiples of 3 and 5 up to a given number.", "input": "Number: 15", "output": "def sum_of_multiples(num): \n    sum = 0 \n    for i in range(num):\n            if i % 3 == 0: \n                sum += i\n            elif i % 5 == 0: \n                sum += i\n    return sum\n\n# Driver code \nsum = sum_of_multiples(15)\nprint(\"Sum of multiples of 3 and 5 =\",sum)", "category": "Python"}, {"instruction": "Write a code snippet to find the most frequent word in a given sentence.", "input": "Sentence: The quick brown fox ate the lazy dog", "output": "def most_frequent_word(str): \n    split_str = str.split() \n\n    frequencies = {} \n    for word in split_str: \n        if word in frequencies: \n            frequencies[word] += 1\n        else: \n            frequencies[word] = 1\n  \n    most_frequent_word = \"\" \n    highest_freq = 0\n    for key, value in frequencies.items(): \n        if value > highest_freq: \n            highest_freq = value \n            most_frequent_word = key \n  \n    return most_frequent_word \n\n# Driver code   \nprint(most_frequent_word('The quick brown fox ate the lazy dog'))", "category": "Python"}, {"instruction": "Implement a function to check for balanced parentheses in a given string.", "input": "String: (((())()))", "output": "def is_balanced(s): \n    stack = [] \n    for letter in s: \n        if letter in [\"(\", \"[\", \"{\"]: \n            stack.append(letter) \n        else: \n            if len(stack) == 0: \n                return False\n            top = stack.pop(-1) \n            if top == '(': \n                if letter == ')':             \n                    continue\n                else: \n                    return False\n            elif top == '[': \n                if letter == ']': \n                    continue\n                else: \n                    return False\n            elif top == '{': \n                if letter == '}': \n                    continue\n                else: \n                    return False\n    if len(stack) == 0: \n        return True \n    return False \n\n# Driver code\nprint(is_balanced('(((())()))')) # True\nprint(is_balanced('(((()))')) # False", "category": "Python"}, {"instruction": "Create a simple chatbot using Python.", "input": "", "output": "print(\"Hello, I am your chatbot!\")\n\nwhile True:\n user_input = input(\"What would you like to talk about?\\n\")\n\n if user_input == \"bye\":\n  print(\"Bye! It was nice talking to you.\")\n  break\n\n if user_input == \"weather\":\n  print(\"It is sunny outside!\")\n else:\n  print(\"I am sorry, I don't understand your query.\")", "category": "Python"}, {"instruction": "Given a string s, write a Python function that returns the longest substring of the given string that is a palindrome.", "input": "s = \"abcbabcd\"", "output": "def longest_palindrome_substring(s):\n n = len(s)\n if n == 0:\n return \"\"\n dp = [[False for _ in range(n)] for _ in range(n)]\n start = 0\n max_length = 1\n # All substrings of length 1 are palindrome\n for i in range(n):\n  dp[i][i] = True\n # Check for substring of length 2. \n for i in range(n-1):\n  if s[i] == s[i+1]:\n   dp[i][i+1] = True\n   start = i\n   max_length = 2\n # Check for lengths greater than 2\n # k is length of substring\n for k in range(3, n+1):\n  # Fix the starting index \n  for i in range(n-k+1):\n   # Get the ending index of substring from\n   # starting index i and length k\n   j = i + k - 1\n   # checking for sub-string from ith index to\n   # jth index iff str[i+1] to str[j-1] is a\n   # palindrome\n   if dp[i+1][j-1] and s[i] == s[j]:\n    dp[i][j] = True\n    if k > max_length:\n     start = i\n     max_length = k\n # return the longest palindromic substring\n return s[start:start+max_length]", "category": "Python"}, {"instruction": "Given a string s, reverse its characters and return the resulting string.", "input": "s = \"apple\"", "output": "def reverse_string(s):\n  # initialize an empty string\n  reversed_string = \"\"\n\n  # loop through the string and concatenate the characters in reverse order\n  for i in range(len(s) - 1, -1, -1):\n    reversed_string += s[i]\n  return reversed_string\n  \nprint(reverse_string(\"apple\")) # elppa", "category": "Python"}, {"instruction": "Explain the importance of using functions in programming.", "input": "", "output": "Using functions in programming is important for a few reasons. Functions can be used to divide a program into smaller, more manageable pieces, making it easier to read, debug, and maintain code. Additionally, functions can be reused across multiple programs by creating libraries that can be imported, saving time and effort. The use of functions also promotes code modularity and re-usability, allowing developers to write code once and use or modify it for different applications. Finally, functions can help to improve the overall performance of code by optimizing execution time because process and code only needs to be run once per function call.", "category": "Python"}, {"instruction": "Write a Python function that takes as input an array of numbers and returns the maximum positive number.", "input": "arr = [3, -2, -1, 7, 12]", "output": "def find_max_positive(arr):\n    max_num = 0\n    for num in arr:\n        if num > 0 and num > max_num:\n            max_num = num\n    return max_num", "category": "Python"}, {"instruction": "Explain why software developers should follow coding style guidelines.", "input": "", "output": "Software developers should follow coding style guidelines for a few reasons. First and foremost, adherence to coding style is essential for creating code that is easy to read, understand and maintain. Especially when working on a team, consistency in style allows developers to understand each other\u2019s code more quickly. Coding style can also be used to organize code so that it\u2019s easier to identify certain sections and make changes as needed. Additionally, coding style can give developers more control over potential errors, such as typos, by providing guidelines that can help to reduce the possibility of making such errors.", "category": "Python"}, {"instruction": "Add a new column to a Pandas DataFrame called \"age_group\" that contains categorical values \"young\",\"adult\",\"elderly\".", "input": "name\tage\nJohn\t25\nMark\t45\nIsabelle\t75", "output": "import pandas as pd\n\n# Read in the data\ndf = pd.DataFrame({'name': ['John', 'Mark', 'Isabelle'], \n                   'age': [25, 45, 75]})\n\n# Add a new column \"age_group\"\ndef categorize_age(age):\n    if age < 18:\n        return \"young\"\n    elif 18 <= age < 65:\n        return \"adult\"\n    else:\n        return \"elderly\"\n\ndf['age_group'] = df['age'].apply(categorize_age)", "category": "Python"}, {"instruction": "Write a recursive method to calculate the Fibonacci number of a given index", "input": "", "output": "def fibonacci(n): \n  # base case \n  if n <= 1: \n    return n \n  # recursive case \n  else:\n    return(fibonacci(n-1) + fibonacci(n-2))", "category": "Python"}, {"instruction": "Create a program to find the maximum and minimum from a given list", "input": "my_list = [5, 7, 6, 3]", "output": "def max_min(my_list):\n    max_val = my_list[0]\n    min_val = my_list[0]\n\n    for val in my_list:\n        if val > max_val:\n            max_val = val\n        \n        if val < min_val:\n            min_val = val\n    \n    return (max_val, min_val)", "category": "Python"}, {"instruction": "Design a function which can check if a given year is a leap year", "input": "", "output": "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Edit the code to construct a bubble sort algorithm.", "input": "arr = [5, 2, 1, 7, 8]", "output": "def bubble_sort(arr):\n    n = len(arr)\n\n    # Traverse through all array elements\n    for i in range(n):\n        # Last i elements are already in place\n        for j in range(0, n-i-1):\n            # traverse the array from 0 to n-i-1\n            # Swap if the element found is greater\n            # than the next element\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]", "category": "Python"}, {"instruction": "Construct a code that takes in an object and checks whether each property includes a certain value", "input": "my_dict = {\n    'name': 'John',\n    'age': 23,\n    'pet_name': 'Maggy'\n}\nvalue = 'John'", "output": "def check_value(obj, value):\n    for key, val in obj.items():\n        if val == value:\n            return True\n    return False", "category": "Python"}, {"instruction": "Using list comprehension, create a new list that contains values less than 5", "input": "my_list = [7, 2, 5, 8, 4, 9, 6]", "output": "new_list = [x for x in my_list if x < 5]", "category": "Python"}, {"instruction": "Construct a loop that checks whether each item in a list is greater than 10", "input": "my_list = [5, 11, 8, 15]", "output": "for x in my_list:\n    if x > 10:\n        print(\"{0} is greater than 10\".format(x))", "category": "Python"}, {"instruction": "Write a function which prints out odd numbers from a given list", "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "output": "def print_odd_num(my_list):\n    for num in my_list:\n        if num % 2 != 0:\n            print(num)", "category": "Python"}, {"instruction": "Design a class named \"Rectangle\" that prints out the length, width, area and perimeter of a given rectangle.", "input": "", "output": "\"\"\"\nDesign a class named 'Rectangle' that prints out the length, width, area and perimeter of a given rectangle\n\"\"\"\n\nclass Rectangle:\n    def __init__(self, l, w):\n        self.length = l\n        self.width = w\n        \n    def area(self):\n        return self.length * self.width\n    \n    def perimeter(self):\n        return 2 * (self.length + self.width)\n    \n    def __str__(self):\n        return 'Rectangle with length {0} and width {1}'.format(self.length, self.width)", "category": "Python"}, {"instruction": "Given two arrays of integers, write a Python function which is able to identify common elements.", "input": "arr1 = [1,2,3,4,5]\narr2 = [3,4,5,6,7]", "output": "def common_elements(arr1, arr2):\n  return [x for x in arr1 if x in arr2]", "category": "Python"}, {"instruction": "Given a text string, write a function in Python to identify all the words that have more than 3 characters.", "input": "text = \"Python is an easy to learn language\"", "output": "def longer_words(text):\n words = text.split()\n longer = [word for word in words if len(word) > 3]\n return longer", "category": "Python"}, {"instruction": "Write a Python function that prints the square of a given number.", "input": "", "output": "def square(num):\n  return num ** 2", "category": "Python"}, {"instruction": "Generate multiple Fibonacci numbers in Python.", "input": "", "output": "def Fibonacci(n): \n  a = 0\n  b = 1\n  if n < 0:\n    print(\"Incorrect input\") \n  elif n == 0:\n    return a\n  elif n == 1:\n    return b\n  else:\n    for i in range(2,n):\n      c = a + b\n      a = b\n      b = c\n  return b\n\nfor i in range(10):\n  print(Fibonacci(i))", "category": "Python"}, {"instruction": "Describe the concept of machine learning in your own words.", "input": "", "output": "Machine learning is a field of Artificial Intelligence that focuses on developing algorithms for computers to learn from data and to make predictions about their environment. It can involve supervised and unsupervised learning techniques, such as classification and clustering, to analyze data and make predictions. Machine learning algorithms are also used to detect patterns and make decisions, enabling computers to automate tasks and learn from experience.", "category": "Python"}, {"instruction": "Create a loop in Python with the given requirements.", "input": "Print out the numbers from 1 to 10, inclusive", "output": "for x in range(1, 11):\n  print(x)", "category": "Python"}, {"instruction": "Construct a code to get the last index of a given substring in a string.", "input": "\"hi hi hello\", \"hi\"", "output": "def lastIndexOf(st, substr): \n    if substr in st: \n        start = -1 \n        while True: \n            pos = st.find(substr, start + 1) \n            if pos == -1: \n                break \n            start = pos \n            \n        return start \n    else: \n        return -1 \n    \nprint(lastIndexOf(\"hi hi hello\", \"hi\")) \n\n# output \n3", "category": "Python"}, {"instruction": "Create a filter to remove all integers from an array of mixed data types.", "input": "[\"Hello\", 3, 5.4, \"World\", 6]", "output": "def removeInts(arr): \n    return [x for x in arr if type(x) is not int] \n\nprint(removeInts([\"Hello\", 3, 5.4, \"World\", 6])) \n\n# output\n['Hello', 5.4, 'World']", "category": "Python"}, {"instruction": "Answer what is the longest palindrome in a given string.", "input": "\"Run, spot, run. He ran up red hills\"", "output": "def longestPalindrome(st): \n    palindromes = []\n    for i in range(len(st)): \n        for j in range(i, len(st)): \n            curr = st[i:j+1] \n            rev = curr[::-1] \n            if (curr == rev): \n                palindromes.append(curr) \n    res = max(palindromes, key = len) \n        \n    return res\n\nprint(longestPalindrome(\"Run, spot, run. He ran up red hills\")) \n\n# output\nrun", "category": "Python"}, {"instruction": "Develop an algorithm for reversing a string without using any reverse string methods.", "input": "Hello World", "output": "def reverseString(str):\n    reversed_str = \"\"\n    for i in range(len(str)-1, -1, -1):\n        reversed_str += str[i]\n    return reversed_str\n\nprint(reverseString(\"Hello World\"))", "category": "Python"}, {"instruction": "Find the maximum value of an array without using any built-in functions", "input": "[7, 9, -2, 15, 3]", "output": "def find_max(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n\narr = [7, 9, -2, 15, 3]\nprint(find_max(arr))", "category": "Python"}, {"instruction": "Create a hashtable in Python of size 8 and insert five elements.", "input": "", "output": "class HashTable:\n    def __init__(self, size):\n        self.size = size\n        self.table = [None] * size\n\n    def insert(self, key, value):\n        hash_value = hash(key)\n        index = hash_value%self.size\n        if self.table[index] == None:\n            self.table[index] = [key, value]\n        else:\n            self.table[index].append([key,value])\n\n    # Other methods go here\n\n# Create a hashtable\nht = HashTable(8)\n\n# Insert elements\nht.insert('apple', 5)\nht.insert('banana', 8)\nht.insert('strawberry', 11)\nht.insert('kiwi', 2)\nht.insert('mango', 6)", "category": "Python"}, {"instruction": "Find the median of the given array [3,7,2,1,9].", "input": "", "output": "def find_median(arr):\n    arr.sort()\n    if len(arr) % 2 == 0: \n        median = (arr[(len(arr)//2)-1] + arr[len(arr)//2])/2 \n    else: \n        median = arr[len(arr)//2] \n    return median\n\nmedian = find_median([3,7,2,1,9])\nprint(median) # Prints 3.5", "category": "Python"}, {"instruction": "Generate a matrix with 5 rows and 7 columns containing random numbers in it.", "input": "", "output": "import numpy as np\n\n# Create a matrix with 5 rows and 7 columns\nmatrix = np.random.rand(5,7)", "category": "Python"}, {"instruction": "Create a function to print out the Fibonacci numbers starting from 0 to the nth number.", "input": "n = 7", "output": "def print_fibonacci(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        print(a, end=' ')\n        temp = a \n        a = b \n        b = temp + b\n\n# The output of the function would be\n# 0 1 1 2 3 5 8", "category": "Python"}, {"instruction": "Create a class \"MyDict\" that inherits from the Python built-in \"dict\" class.", "input": "", "output": "class MyDict(dict):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def __getitem__(self, key): \n        if key in self:\n            return super().__getitem__(key)\n        else: \n            return None", "category": "Python"}, {"instruction": "Create a class 'Stack' that has a method 'max_stack' that returns the maximum element in the stack.", "input": "", "output": "class Stack():\n    def __init__(self): \n        self.stack = []\n\n    # Inserts an element in the stack\n    def push(self, item):\n        self.stack.append(item)\n \n    # Return the maximum element in a stack\n    def max_stack(self): \n        max_elem = self.stack[0] \n        for i in range(1,len(self.stack)): \n            if self.stack[i]>max_elem:\n                    max_elem = self.stack[i] \n        return max_elem", "category": "Python"}, {"instruction": "Write a function in Python to get the IPv6 address of a given domain name.", "input": "", "output": "import socket\n\ndef get_IPv6_address(domain_name):\n    \"\"\"\n    Function to get the IPv6 address of a given domain name\n    \"\"\"\n\n    # get the ip_addres\n    ip_address = socket.getaddrinfo(domain_name, 0, socket.AF_INET6)\n\n    # return the ip address\n    return ip_address[0][4][0]", "category": "Python"}, {"instruction": "Write a Python program to create a dictionary with three elements.", "input": "", "output": "d = { \n    \"one\" : 1, \n    \"two\" : 2, \n    \"three\" : 3\n}", "category": "Python"}, {"instruction": "Create a function to print all the paths in a binary tree.", "input": "", "output": "def print_paths(root): \n    path = [] \n    print_paths_util(root, path, 0) \n  \ndef print_paths_util(root, path, pathLen): \n    if root is None: \n        return\n  \n    if (len(path) > pathLen):  \n        path[pathLen] = root.data\n    else: \n        path.append(root.data) \n  \n    pathLen = pathLen + 1\n  \n    if root.left is None and root.right is None: \n        for i in range(pathLen):\n            print(path[i],end=\" \")\n        print() \n    else: \n        print_paths_util(root.left, path, pathLen) \n        print_paths_util(root.right, path, pathLen)", "category": "Python"}, {"instruction": "Create an algorithm to find the second minimum element from a given array of 7 elements.", "input": "[87, 34, 56, 12, 21, 45, 67]", "output": "1. Set a variable, secondMinimum, to the first element of the array.\n2. Iterate through the array. \n3. For every element check if it is smaller than secondMinimum, but bigger than the smallest element in the array. \n4. If it is, set secondMinimum to that element. \n5. When the iteration is finished, return secondMinimum.", "category": "Python"}, {"instruction": "Design an algorithm to get the maximum value from a given array of four elements.", "input": "[-5, 2, 45, 9]", "output": "1. Set a variable, maxValue, and initialize it to the first element in the array.\n2. Iterate through the array, comparing each element to maxValue.\n3. If the element is bigger than maxValue, replace maxValue with the element.\n4. When the loop is finished, save maxValue and return it as the maximum value from the array.", "category": "Python"}, {"instruction": "Construct a Numpy array of shape 2x3 containing all 7s.", "input": "", "output": "arr = np.array([[7, 7, 7],\n                [7, 7, 7]])", "category": "Python"}, {"instruction": "Parse the following JSON string and print out all the key-value pairs:\n{\u201cname\u201d:\u201dJohn\u201d,\u201dage\u201d:25,\u201dcity\u201d:\"New York\"", "input": "String = '{\"name\":\"John\",\"age\":25,\"city\":\"New York\"}'", "output": "import json \n  \nString = '{\"name\":\"John\",\"age\":25,\"city\":\"New York\"}'\n  \n# Parse the string\njs = json.loads(String)\n  \n# Print all key-value pairs\nfor k, v in js.items():\n    print(k, \":\", v)", "category": "Python"}, {"instruction": "How can you remove all blank spaces from a given string in Python?", "input": "", "output": "You can remove all blank spaces from a given string in Python using the replace() function. This function takes two arguments, the first is the substring to be replaced and the second is the substring to be inserted in its place. In this case, you can use an empty string as the second argument to remove any instance of the white space from the string. \n\nFor example:\n\nstring_with_spaces = \"   Hello  World  \" \nno_spaces = string_with_spaces.replace(\" \", \"\") \nprint(no_spaces)  # Output: \"HelloWorld\"", "category": "Python"}, {"instruction": "Create an array where each element is the maximum of each row in a given matrix.", "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def max_elements(matrix):\n    max_elements = []\n    for row in matrix:\n        max_elements.append(max(row))\n    return max_elements", "category": "Python"}, {"instruction": "Design a basic graphic user interface (GUI) for a calculator.", "input": "", "output": "import tkinter as tk\n\nroot = tk.Tk()\n\n# design the window\nroot.title(\"Calculator\")\nroot.geometry(\"200x250\")\n\n# create the buttons\nbutton1 = tk.Button(root, text=\"1\", width=5, height=2)\nbutton1.grid(row=0, column=0, padx=4, pady=4)\n\nbutton2 = tk.Button(root, text=\"2\", width=5, height=2)\nbutton2.grid(row=0, column=1, padx=4, pady=4)\n\nbutton3 = tk.Button(root, text=\"3\", width=5, height=2)\nbutton3.grid(row=0, column=2, padx=4, pady=4)\n\n# create more buttons\n# and so on\n\nroot.mainloop()", "category": "Python"}, {"instruction": "Compute the surface area of a pyramid with a base area of 10 cm and a height of 7 cm.", "input": "", "output": "The surface area of the pyramid is 24 cm\u00b2.", "category": "Python"}, {"instruction": "Using a for loop, create a list of integers that are multiples of 4 from 0 to 50.", "input": "", "output": "multiples_of_four = [n for n in range(0, 51) if n % 4 == 0]", "category": "Python"}, {"instruction": "Write a Python function to convert an array of integers into their respective strings.", "input": "arr = [1, 2, 3]", "output": "def array_int_string(arr):\n    \"\"\"Converts an array of integers into strings.\"\"\"\n    return [str(num) for num in arr]\n\narray_int_string(arr)  # returns [\"1\", \"2\", \"3\"]", "category": "Python"}, {"instruction": "How can we delete all the elements of a list in Python?", "input": "", "output": "def delete_all_elements(lst):\n    del lst[:]", "category": "Python"}, {"instruction": "How would you print all the key-value pairs of an already existing dictionary?", "input": "", "output": "def print_dict_key_value(dic):\n    for key, value in dic.items():\n        print(f\"{key}: {value}\")", "category": "Python"}, {"instruction": "Given a string and an integer N, write a Python function to construct the Nth palindromic string.", "input": "", "output": "def construct_palindrome(string, N):\n    length = len(string)\n    mid = length // 2\n\n    left = string[:mid]\n    right = left[::-1]\n\n    if length % 2 == 0:\n        left = string[:mid - (N - 1)]\n        right = left[::-1]\n    else:\n        left = string[:mid - N]\n        right = string[mid + 1:(mid + 1) + N][::-1]\n\n    return left + string[mid] + right", "category": "Python"}, {"instruction": "Given a dictionary, write a Python function to print all the key-value pairs in the dictionary.", "input": "", "output": "def print_dict_key_value(dic):\n    for key, value in dic.items():\n        print(f\"{key}: {value}\")", "category": "Python"}, {"instruction": "Given a list of numbers, write a Python function to count how many numbers in the list are greater than 10.", "input": "", "output": "def count_greater_than_ten(nums):\n    return len([n for n in nums if n > 10])", "category": "Python"}, {"instruction": "Create a function to classify an array as odd or even length.", "input": "", "output": "def classify_array_length(arr):\n    if len(arr) % 2 == 0:\n        return 'even'\n    else:\n        return 'odd'", "category": "Python"}, {"instruction": "Edit the following code to generate a list of the vowels in a given string.", "input": "", "output": "def get_vowels(str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    res = []\n    for letter in str:\n        if letter.lower() in vowels:\n            res.append(letter)\n    return res", "category": "Python"}, {"instruction": "Create an algorithm that finds the maximum subarray sum in a given array.", "input": "[-2, 1, -3, 4, -1, 2, 1, -5, 4]", "output": "def max_subarray_sum(arr):\n    max_sum = 0\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum", "category": "Python"}, {"instruction": "Print out the prime numbers between 0 to 100.", "input": "", "output": "for n in range(2, 101): \n    for i in range(2, n): \n        if n % i == 0: \n            break\n    else: \n        print(n, end = ' ')", "category": "Python"}, {"instruction": "Create a program in Python to return the first n elements from an array", "input": "", "output": "def first_n_elements(array, n):\n    return array[:n]", "category": "Python"}, {"instruction": "What is the maximum value of a byte in a binary system?", "input": "", "output": "The maximum value of a byte in a binary system is 255. This is because there are 8 bits in a byte, and the maximum value each bit can have is 1, giving a maximum value of 8 ones, or 255 in the denary system.", "category": "Python"}, {"instruction": "Create an identifier in Python that starts with an underscore followed by the letter 'a'.", "input": "", "output": "_a", "category": "Python"}, {"instruction": "Create a function to return a random letter from a given string.", "input": "", "output": "import random \n  \ndef random_letter(string): \n    \"\"\" \n    Function to return a random letter \n    from a given string \n    \"\"\"\n  \n    # Get the length of the string \n    length = len(string) \n  \n    # Get a random index  \n    # from 0 to length - 1 \n    index = random.randint(0, length - 1) \n  \n    # Return the letter at the  \n    # randomly generated index \n    return string[index] \n  \n# Driver Code \nstring = \"Geek\"\nprint(random_letter(string))", "category": "Python"}, {"instruction": "Create a class named Animal with a few methods describing different attributes of animals.", "input": "", "output": "class Animal:\n    def __init__(self):\n        pass\n    \n    def is_mammal(self):\n        \"\"\"Return True if animal is a mammal, False otherwise\"\"\"\n        pass\n\n    def is_reptile(self):\n        \"\"\"Return True if animal is a reptile, False otherwise\"\"\"\n        pass\n    \n    def is_amphibian(self):\n        \"\"\"Return True if animal is an amphibian, False otherwise\"\"\"\n        pass\n\n    def is_bird(self):\n        \"\"\"Return True if animal is a bird, False otherwise\"\"\"\n        pass", "category": "Python"}, {"instruction": "Convert the following code to Python and make it object-oriented.", "input": "function celsius_to_fahrenheit(celsius) { \n  let fahrenheit = (celsius * 9/5) + 32\n  return fahrenheit \n}", "output": "class TemperatureConverter:\n    def celsius_to_fahrenheit(self, celsius):\n        fahrenheit = (celsius * 9/5) + 32\n        return fahrenheit", "category": "Python"}, {"instruction": "Produce a Python script that generates a random string of length 10", "input": "", "output": "import random\nimport string\n\ndef get_random_string(stringLength=10):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(stringLength))\n\nrandomString = get_random_string()\nprint(randomString) # outputs a random string of length 10", "category": "Python"}, {"instruction": "Create a list in Python of all integers from -5 to 10.", "input": "", "output": "list_nums = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Write a function in Python to convert miles to kilometers.", "input": "7", "output": "def miles_to_km(miles):\n return miles * 1.609\n\nconverted_km = miles_to_km(7)\nprint(converted_km)", "category": "Python"}, {"instruction": "Import the numpy library into the program", "input": "", "output": "import numpy as np", "category": "Python"}, {"instruction": "Generate a list of all words in the input string longer than 4 characters.", "input": "my_string = \"This is a sentence\"", "output": "word_list = [word for word in my_string.split() if len(word)>4]", "category": "Python"}, {"instruction": "Write a python script to convert a given number to a string.", "input": "num = 1234", "output": "def num_to_str(num):\n    return str(num)", "category": "Python"}, {"instruction": "Modify the following function to return the maximum value in a list.", "input": "def max_list(lst):\n    max = 0\n    for x in lst:\n        max = x\n    return max", "output": "def max_list(lst):\n    max = None\n    for x in lst:\n        if max is None or x > max:\n            max = x\n    return max", "category": "Python"}, {"instruction": "Create a program to reverse an array in place, i.e. without creating a copy.", "input": "", "output": "def reverse_in_place(arr):\n    n = len(arr)\n    for i in range(n//2):\n        arr[i], arr[n-i-1] = arr[n-i-1], arr[i]", "category": "Python"}, {"instruction": "Suggest a solution to print the prime factorization of a number.", "input": "", "output": "def prime_factors(num):\n    factors = []\n    i = 2\n    while num > 1:\n        if num % i == 0:\n            factors.append(i)\n            num = num // i\n        else:\n            i += 1\n    return factors", "category": "Python"}, {"instruction": "Generate a code snippet to clone/copy a dictionary.", "input": "", "output": "import copy\n\ndef clone_dict(dict):\n    return copy.deepcopy(dict)", "category": "Python"}, {"instruction": "Formulate a solution to print out each letter of a string individually.", "input": "", "output": "def print_letters(string):\n    for letter in string:\n        print(letter)", "category": "Python"}, {"instruction": "Create a program to generate a sequence of integers that starts at k and ends at n in the following format: [k, k+1, ..., n-1, n]", "input": "", "output": "def generate_seq(k, n):\n    seq = []\n    for i in range(k, n+1):\n        seq.append(i)\n    return seq", "category": "Python"}, {"instruction": "Write a code to recognize the most likely language of a given text.", "input": "", "output": "import langdetect\n\ndef detect_language(text):\n    language = langdetect.detect(text)\n    return language", "category": "Python"}, {"instruction": "Create a Python script to parse a JSON string and print the value corresponding to the key 'name'.", "input": "{\"name\": \"John Doe\", \"age\": 25}", "output": "import json\n\ndata = '{\"name\": \"John Doe\", \"age\": 25}'\n\ndata = json.loads(data) \n\nprint(data[\"name\"])", "category": "Python"}, {"instruction": "Output an array of even numbers from 0 to 20 using a for loop in Python.", "input": "", "output": "even_nums = []\nfor num in range(0, 21):\n    if num % 2 == 0:\n        even_nums.append(num)\nprint(even_nums)", "category": "Python"}, {"instruction": "Write a web scraper in Python to get all the external links from a webpage.", "input": "url = 'https://en.wikipedia.org/wiki/Web_scraping'", "output": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://en.wikipedia.org/wiki/Web_scraping'\npage = requests.get(url)\nsoup = BeautifulSoup(page.text, 'html.parser')\nlinks = [link.get('href') for link in soup.find_all('a') if 'http' in link.get('href')]\nprint(links)", "category": "Python"}, {"instruction": "Create a Python program that prints all numbers in the range 1-10.", "input": "", "output": "for number in range(1, 11):\n print(number)", "category": "Python"}, {"instruction": "Design a neural network for facial recognition using TensorFlow.", "input": "", "output": "import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    # First convolutional layer\n    tf.keras.layers.Conv2D(64, (3, 3), activation='relu', padding='same', input_shape=(64, 64, 3)),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    # Second convolutional layer\n    tf.keras.layers.Conv2D(128, (3, 3), activation='relu', padding='same'),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    # Third convolutional layer\n    tf.keras.layers.Conv2D(128, (3, 3), activation='relu', padding='same'),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    # Fourth convolutional layer\n    tf.keras.layers.Conv2D(128, (3, 3), activation='relu', padding='same'),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    # Flatten the output\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(2048, activation='relu'),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(1024, activation='relu'),\n    tf.keras.layers.Dropout(0.5),\n    # Output decode layer\n    tf.keras.layers.Dense(2, activation='softmax')\n])", "category": "Python"}, {"instruction": "Parse the following JSON objects, convert all the values to strings and create a dictionary named \"parsed_data\".", "input": "{\n \"name\": \"John Doe\",\n \"age\": 33,\n \"locations\": [\"NYC\", \"LA\"]\n}", "output": "import json\n\nparsed_data = {}\n\ndata = {\n    \"name\": \"John Doe\",\n    \"age\": 33,\n    \"locations\": [\"NYC\", \"LA\"]\n}\nfor key, val in data.items():\n    parsed_data[key] = str(val)", "category": "Python"}, {"instruction": "Extract the phone number from given string and output it as an integer.", "input": "Hi, my number is +1-345--678-9012", "output": "\"\"\"\nExtract the phone number from given string and output it as an integer\n\"\"\"\n\ndef extract_phone_number(s):\n    s = s.replace('+', '')\n    numbers = \"\"\n    for c in s:\n        if c.isdigit():\n            numbers += c\n    return int(numbers)\n\nif __name__ == '__main__':\n    s = \"Hi, my number is +1-345--678-9012\"\n    num = extract_phone_number(s)\n    print(num)", "category": "Python"}, {"instruction": "Write a code to implement quicksort.", "input": "arr = [6, 1, 8, 4, 9, 5]", "output": "\"\"\"\nImplement quicksort\n\"\"\"\n\ndef quicksort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n\nif __name__ == '__main__':\n    arr = [6, 1, 8, 4, 9, 5]\n    result = quicksort(arr)\n    print(result)", "category": "Python"}, {"instruction": "Write a code to fetch the last ten news headlines from HackerNews using their API.", "input": "", "output": "\"\"\"\nFetch the last ten news headlines from HackerNews using their API\n\"\"\"\n\nimport requests\n\ndef get_headlines():\n    url = \"https://hacker-news.firebaseio.com/v0/topstories.json\"\n    ids = requests.get(url).json()\n    headlines = []\n    for id in ids[:10]:\n        item = requests.get(f\"https://hacker-news.firebaseio.com/v0/item/{id}.json\").json()\n        headlines.append(item['title'])\n    return headlines\n\nif __name__ == '__main__':\n    headlines = get_headlines()\n    for headline in headlines:\n        print(headline)", "category": "Python"}, {"instruction": "How to check if an item exists in a list in Python?", "input": "my_list = [1, 2, 3, 4]", "output": "# Check if item exists in list \nif 4 in my_list: \n    print(\"Exists\") \nelse: \n    print(\"Doesn't Exist\")", "category": "Python"}, {"instruction": "Given the JSON data below, find the count of each type of fruit.", "input": "{\n    \"fruits\": [\n        { \"type\": \"apple\", \"count\": 10 },\n        { \"type\": \"orange\", \"count\": 5 },\n        { \"type\": \"banana\", \"count\": 15 }\n    ]\n}", "output": "import json\n\ndata = \"\"\"\n{\n    \"fruits\": [\n        { \"type\": \"apple\", \"count\": 10 },\n        { \"type\": \"orange\", \"count\": 5 },\n        { \"type\": \"banana\", \"count\": 15 }\n    ]\n}\n\"\"\"\n\ndata = json.loads(data)\n\n# Get the count for each type of fruit\napple_count = 0\norange_count = 0\nbanana_count = 0\nfor fruit in data['fruits']:\n    if fruit['type'] == 'apple':\n        apple_count = fruit['count']\n    elif fruit['type'] == 'orange':\n        orange_count = fruit['count']\n    elif fruit['type'] == 'banana':\n        banana_count = fruit['count']\n\nprint(\"Apple count = %d\" % apple_count)\nprint(\"Orange count = %d\" % orange_count)\nprint(\"Banana count = %d\" % banana_count)", "category": "Python"}, {"instruction": "Create a python function that takes a single integer as an argument and prints out the corresponding multiplication table.", "input": "", "output": "def print_table(n):\n    for i in range(1, 11):\n        table = n * i\n        print(f\"{n} X {i} = {table}\")", "category": "Python"}, {"instruction": "Develop a program to accept one number from the user and display its factorial using a Python function.", "input": "5", "output": "def factorial(num):\n    if num <= 1:\n        return 1\n    else:\n        return num * factorial(num-1) \n    \nnum = int(input('Enter number to find factorial: '))\nfactorial = factorial(num)\nprint('Factorial of', num, 'is', factorial)", "category": "Python"}, {"instruction": "Develop a Python script to sum up all the individual digits of a given number", "input": "354", "output": "def sum_digits(input_number):\n \n    sum_of_digits = 0\n    while input_number > 0:\n        last_digit = input_number % 10\n        sum_of_digits += last_digit\n        input_number //= 10\n \n    return sum_of_digits\n \nsum_digits(354)", "category": "Python"}, {"instruction": "Write a Python code to convert a binary tree to its mirror tree", "input": "", "output": "def mirror_tree(root): \n    if root is None: \n        return\n  \n    # Do the postorder traversal to traverse down to leaf nodes \n    mirror_tree(root.left) \n    mirror_tree(root.right) \n  \n    # Swap the pointers in this node \n    root.left, root.right = root.right, root.left", "category": "Python"}, {"instruction": "Generate a dictionary out of two lists by matching each element in the two lists", "input": "list_a =[2, 3, 4]\nlist_b = [\"a\", \"b\", \"c\"]", "output": "def make_dict(list_a, list_b):\n  dict = {}\n  for a, b in zip(list_a, list_b):\n    dict[a] = b\n\n  return dict", "category": "Python"}, {"instruction": "Compare two Python lists having integers and write a function to output the differences", "input": "list_a = [1, 2, 3]\nlist_b = [2, 3, 4]", "output": "def get_diff(list_a, list_b):\n  diff = list_a\n  for i in list_b:\n    if i in list_a:\n      diff.remove(i)   \n  return diff", "category": "Python"}, {"instruction": "Write a code for linear search algorithm.", "input": "[4, 5, 2, 3]\n2", "output": "def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    \n    return None\n\nprint(linear_search([4, 5, 2, 3], 2)) # Output: 2", "category": "Python"}, {"instruction": "Define a function to check whether string a is an anagram of string b.", "input": "\"silent\" \n\"listen\"", "output": "def is_anagram(a, b):\n    a = a.lower()\n    b = b.lower()\n\n    if len(a) != len(b):\n        return False\n    \n    for char in a:\n        if char not in b:\n            return False\n        b = b.replace(char, '', 1)\n    \n    return True\n\nprint(is_anagram(\"silent\", \"listen\")) # Output: True", "category": "Python"}, {"instruction": "Write a code to convert a given string of English characters to corresponding Morse code.", "input": "\"Hello World!\"", "output": "def morse_encode(input_string):\n    morse_encoder = {\n        \"A\":\".- \",\n        \"B\":\"-... \",\n        \"C\":\"-.-. \",\n        \"D\":\"-.. \",\n        \"E\":\" . \",\n        \"F\":\"..-. \",\n        \"G\":\"--. \",\n        \"H\":\".... \",\n        \"I\":\".. \",\n        \"J\":\".--- \",\n        \"K\":\"-.- \",\n        \"L\":\".-.. \",\n        \"M\":\"-- \",\n        \"N\":\"-. \",\n        \"O\":\"--- \",\n        \"P\":\".--. \",\n        \"Q\":\"--.- \",\n        \"R\":\".-. \",\n        \"S\":\"... \",\n        \"T\":\"- \",\n        \"U\":\"..- \",\n        \"V\":\"...- \",\n        \"W\":\".-- \",\n        \"X\":\"-..- \",\n        \"Y\":\"-.-- \",\n        \"Z\":\"--.. \",\n        \" \": \"  \"\n    }\n    morse_string = []\n\n    for char in input_string.upper():\n        encoded_char = morse_encoder.get(char)\n        morse_string.append(encoded_char)\n    \n    return ''.join(morse_string)\n\nprint(morse_encode(\"Hello World!\")) # Output: \".... . .-.. .-.. ---  .-- --- .-. .-.. -.. ! \"", "category": "Python"}, {"instruction": "Create a function that returns a list of all the factors of a given number.", "input": "64", "output": "def factor(x): \n    factors = []\n    for i in range(1, x + 1): \n        if x % i == 0: \n            factors.append(i) \n    return factors\n\nprint(factor(64)) # Output: [1, 2, 4, 8, 16, 32, 64]", "category": "Python"}, {"instruction": "Create a text classification model using Scikit-learn to classify a message with either \"positive\" or \"negative\" sentiment.", "input": "", "output": "from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\n# Vectorize the message into a format that the model can accept\nvect = CountVectorizer().fit(X_train)\nX_train_vectorized = vect.transform(X_train)\n\n# Train a Logistic Regression model\nmodel = LogisticRegression()\nmodel.fit(X_train_vectorized, y_train)\n\n# Use the model to predict the sentiment of a given message\nmessage_sentiment = model.predict([vect.transform([message])])", "category": "Python"}, {"instruction": "Name five different Python libraries used for visualization.", "input": "", "output": "Matplotlib, Seaborn, Bokeh, Plotly, and Altair.", "category": "Python"}, {"instruction": "How could you read a specific compression format such as .zip in Python?", "input": "", "output": "Python has a built-in zipfile module which provides support for reading and writing zip archives in native Python code. The module provides a ZipFile object with methods to read and extract contents of the archive, as well as a class representing individual entries such as files and directories.\n\nFor example, to extract an archive using the ZipFile object, you can do the following:\n\nimport zipfile\n\nwith zipfile.ZipFile(\"path/to/archive.zip\", \"r\") as zf:\n zf.extractall(\"path/to/destination/directory\")", "category": "Python"}, {"instruction": "Create an object method to calculate the area of a triangle in Python.", "input": "", "output": "def calculate_area(self):\n  return (self.base * self.height) / 2", "category": "Python"}, {"instruction": "How would you print \"Goodbye\" ten times in Python?", "input": "", "output": "for i in range(10):\n print(\"Goodbye\")", "category": "Python"}, {"instruction": "Suggest a python code to print a 2D board with 'X' and 'O'.", "input": "[['X', 'O', 'X'], ['O', 'X', 'O'], ['X', 'X', 'O']]", "output": "board = [['X', 'O', 'X'], ['O', 'X', 'O'], ['X', 'X', 'O']]\n\nfor row in board:\n    for cell in row:\n        print(cell, end=\" \")\n    print()", "category": "Python"}, {"instruction": "Alter the code to return the last element of a linked list.", "input": "", "output": "def getLastElement(head): \n    # Base case \n    if head == None: \n        return None\n  \n    # If list is not empty, traverse \n    # to the last node \n    start = head \n    while (start.next != None): \n        start = start.next\n  \n    # return last element \n    return start", "category": "Python"}, {"instruction": "Suggest a way to serialize a binary tree in python.", "input": "", "output": "def serializeBinaryTree(root):\n    if root == None:\n        return \"#\"\n    \n    serializedTree = \"\"\n    serializedTree += str(root.val) + ','\n    serializedTree += serializeBinaryTree(root.left) + ','\n    serializedTree += serializeBinaryTree(root.right)\n\n    return serializedTree", "category": "Python"}, {"instruction": "Alter the following code to detect a loop in a linked list", "input": "", "output": "def detectLoop(head): \n    slow_p = head  \n    fast_p = head  \n  \n    while (slow_p and fast_p and \n             fast_p.next): \n        slow_p = slow_p.next\n        fast_p = fast_p.next.next\n          \n        if slow_p == fast_p: \n            return 1\n  \n    return 0", "category": "Python"}, {"instruction": "Write a python code to print every key and its corresponding value in a dictionary.", "input": "{\"Name\": \"John\", \"Age\": 20, \"Country\": \"USA\"}", "output": "dic = {\"Name\": \"John\", \"Age\": 20, \"Country\": \"USA\"} \nfor key, value in dic.items():  \n    print(key + \" : \" + str(value))", "category": "Python"}, {"instruction": "Alter the following code to create a function called \"find_largest\" to find the largest number in a given list.", "input": "[9, 11, 7, 16, 20]", "output": "def find_largest(lst):\n    largest_number = lst[0]\n    for num in lst:\n        if num > largest_number:\n            largest_number = num\n    return largest_number", "category": "Python"}, {"instruction": "Write an algorithm to store the data in a 2D array.", "input": "[[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16]]", "output": "def storeDataIn2DArray(data):\n    rowLength = len(data[0])\n    columnLength = len(data)\n    twoDArray = []\n  \n    for row in range(rowLength):\n        twoDArrayRow = []\n\n        for column in range(columnLength):\n            twoDArrayRow.append(data[column][row])\n\n        twoDArray.append(twoDArrayRow)\n\n    return twoDArray", "category": "Python"}, {"instruction": "Create a data structure to store the 5 highest scores of a given game", "input": "", "output": "# create a priority queue \n# score will be the priority and name will be stored as data\nimport queue\nscores = queue.PriorityQueue(maxsize=5)\n\ndef add_score(score, name):\n    if scores.full():\n        min_score = scores.get()\n        if min_score[0] < score:\n            scores.put((score, name))\n        else:\n            scores.put(min_score)\n    else:\n        scores.put((score, name))", "category": "Python"}, {"instruction": "Create a TensorFlow program to implement a multi-layer neural network", "input": "", "output": "import tensorflow as tf\n\n# create the model\nmodel = tf.keras.models.Sequential()\n\n# add layers to the model\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\nmodel.add(tf.keras.layers.Dense(64, activation='relu'))\nmodel.add(tf.keras.layers.Dense(32, activation='relu'))\nmodel.add(tf.keras.layers.Dense(16, activation='relu'))\nmodel.add(tf.keras.layers.Dense(8, activation='sigmoid'))\nmodel.add(tf.keras.layers.Dense(4, activation='softmax'))\n\n# compile the model\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])", "category": "Python"}, {"instruction": "Create a linked list to store the values ```[10, 20, 30]```.", "input": "", "output": "class Node:\n def __init__(self, data):\n   self.data = data\n   self.next = None\n\nclass LinkedList:\n def __init__(self):\n   self.head = None\n\nlist = [10, 20, 30]\nllist = LinkedList()\nllist.head = Node(list[0])\n \ntemp = llist.head\n \nfor i in range(1, len(list)):\n temp.next = Node(list[i])\n temp = temp.next", "category": "Python"}, {"instruction": "Find the average of five numbers.", "input": "11, 15, 20, 7, 19", "output": "def avg(nums):\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum/len(nums)", "category": "Python"}, {"instruction": "Given a list of strings, reverse the order of each string in the list.", "input": "[\"hello\", \"world\", \"this\", \"is\", \"amazing\"]", "output": "def reverse_words(words):\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return reversed_words", "category": "Python"}, {"instruction": "Generate a random 10 character password with at least one uppercase letter and one number.", "input": "", "output": "import random\n\ndef generate_password():\n    uppercase_characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    numbers = '0123456789'\n    password = ''\n\n    for i in range(5):\n        password += random.choice(uppercase_characters)\n        password += random.choice(numbers)\n\n    password += random.choice(list(set(uppercase_characters + numbers)))\n\n    return password\n\nif __name__ == '__main__':\n    print(generate_password())", "category": "Python"}, {"instruction": "Prepare a code to select all rows that have more than one occurrence of the same value in a given column.", "input": "column = \"color\"\ndata = {\n \"color\": [\"red\", \"blue\", \"red\", \"yellow\", \"blue\"] \n}", "output": "def duplicate_rows(column, data):\n    duplicates = []\n    for row in data:\n        if data[column].count(row[column]) > 1:\n            duplicates.append(row)\n    return duplicates", "category": "Python"}, {"instruction": "Given a list of numbers and a number k, return whether any two numbers from the list add up to k.", "input": "nums = [10, 15, 3, 7]\nk = 17", "output": "def two_sum(nums, k):\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == k:\n                return True\n    return False", "category": "Python"}, {"instruction": "Using the comment as a guide, replace the placeholder with the proper code to remove all duplicates from a list.", "input": "mylist = [1, 2, 3, 2, 4, 2]\n# TODO: write code to remove all duplicates from mylist", "output": "def remove_duplicates(mylist):\n    mylist = list(dict.fromkeys(mylist))\n    return mylist\n\nif __name__ == '__main__':\n    mylist = [1, 2, 3, 2, 4, 2]\n    print(remove_duplicates(mylist))", "category": "Python"}, {"instruction": "Write a function that takes an array and returns the number of elements that are even.", "input": "arr = [1, 5, 7, 4, 9, 17]", "output": "def count_even_elements(arr):\n    even_count = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n    return even_count\n\nif __name__ == '__main__':\n    arr = [1, 5, 7, 4, 9, 17]\n    print(count_even_elements(arr))", "category": "Python"}, {"instruction": "Create a function that takes two integers, A and B, and returns the largest common divisor between A and B.", "input": "", "output": "def get_largest_common_divisor(a, b):\n    while a != 0 and b != 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return a + b\n\nif __name__ == '__main__':\n    print(get_largest_common_divisor(15, 9))", "category": "Python"}, {"instruction": "Using the comment as a guide, write the proper code to calculate the sum of the values in an array", "input": "arr = [1, 2, 3, 4, 5]\n# TODO: write code to calculate the sum of the values in arr", "output": "def calculate_sum(arr):\n    sum = 0\n    for x in arr:\n        sum += x\n    return sum\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    print(calculate_sum(arr))", "category": "Python"}, {"instruction": "Write a code that takes a list of numbers, and outputs the 10th largest value.", "input": "mylist = [2, 4, 54, 31, 34, 77, 29, 11, 44, 78, 65, 23]", "output": "def find_10th_largest(input_list):\n    sorted_list = sorted(input_list)\n    return sorted_list[-10]\n\nif __name__ == '__main__':\n    mylist = [2, 4, 54, 31, 34, 77, 29, 11, 44, 78, 65, 23]\n    print(find_10th_largest(mylist))", "category": "Python"}, {"instruction": "Create a neural network class in Python using NumPy.", "input": "", "output": "import numpy as np\n\nclass NeuralNetwork():\n    \n    def __init__(self):\n        np.random.seed(1)\n\n        self.weights = 2 * np.random.random((3,1)) - 1\n\n    def sigmoid(self, x):\n        return 1 / (1 + np.exp(-x))\n\n    def sigmoid_derivative(self, x):\n        return x * (1 - x)\n\n    def train(self, training_inputs, training_outputs, training_iterations):\n        for iteration in range(training_iterations):\n            output = self.think(training_inputs)\n            error = training_outputs - output\n            adjustments = np.dot(training_inputs.T, error * self.sigmoid_derivative(output))\n            self.weights += adjustments\n\n    def think(self, inputs):\n        inputs = inputs.astype(float)\n        output = self.sigmoid(np.dot(inputs, self.weights))\n        return output", "category": "Python"}, {"instruction": "Merge two sorted lists of integers using Python.", "input": "list_1 = [2, 5, 9]\nlist_2 = [1, 4, 6, 7]", "output": "def merge_lists(list_1, list_2):\n    merged_list = []\n    l1, l2 = 0, 0\n\n    while l1 < len(list_1) and l2 < len(list_2):\n        if list_1[l1] <= list_2[l2]:\n            merged_list.append(list_1[l1])\n            l1 += 1\n        else:\n            merged_list.append(list_2[l2])\n            l2 += 1\n\n    merged_list += list_1[l1:]\n    merged_list += list_2[l2:]\n\n    return merged_list", "category": "Python"}, {"instruction": "Build a function in Python for selecting all rows from a Pandas DataFrame where a column value is equal to a given value.", "input": "df = pd.DataFrame({'A':[1, 2, 3, 4, 5],\n                   'B':[2, 3, 4, 5, 6],\n                   'C':[3, 4, 5, 6, 7],\n                   'D':[4, 5, 6, 7, 8]})\ncol_1 = 'A' \nvalue = 3", "output": "def select_rows(df, col_1, value): \n    return df[df[col_1] == value]", "category": "Python"}, {"instruction": "Modify the function to include a message about the length of the string.", "input": "message = \"The length of the string is:\"", "output": "def find_length(string):\n\tcount = 0\n\tfor char in string:\n\t\tcount += 1\n\tprint(message, count)\n\treturn count", "category": "Python"}, {"instruction": "Compute the sum of two matrices of size m x n.", "input": "A = [[1, 2], \n     [4, 5]]\nB = [[3, 6], \n     [7, 8]]", "output": "def matrix_sum(A, B): \n    m = len(A) \n    n = len(A[0]) \n    C = [[0 for i in range(n)] for j in range(m)] \n    for i in range(m):\n        for j in range(n):\n            C[i][j] = A[i][j] + B[i][j]\n    return C\n\nA = [[1, 2], \n     [4, 5]]\nB = [[3, 6], \n     [7, 8]]\n\nres = matrix_sum(A, B)\nprint(res)", "category": "Python"}, {"instruction": "Write a function to get the length of a given string without using any built-in function.", "input": "text = \"Hello world!\"", "output": "def get_length(text):\n    counter = 0\n    for i in text:\n        counter += 1\n    return counter\n\nres = get_length(text)\nprint(res)", "category": "Python"}, {"instruction": "Find the runtime complexity of this Python program.", "input": "def EvenOrOdd(items):\n    if len(items) == 0:\n        return 0\n\n    even_count = 0\n    for item in items:\n        if item % 2 == 0:\n            even_count += 1\n\n    return even_count", "output": "This program has a runtime complexity of O(n), where n is the number of items in the list. This is because the time taken to complete the program increases linearly with the number of items in the list.", "category": "Python"}, {"instruction": "Write a code snippet to display the Fibonacci sequence up to 50 numbers.", "input": "", "output": "def Fibonacci(n): \n\ta = 0\n\tb = 1\n\tif n < 0: \n\t\tprint(\"Incorrect input\") \n\telif n == 0: \n\t\treturn a \n\telif n == 1: \n\t\treturn b \n\telse: \n\t\tfor i in range(2,n): \n\t\t\tc = a + b \n\t\t\ta = b \n\t\t\tb = c \n\t\treturn b \n  \n# Driver Code \nprint(\"Fibonacci Sequence:\")\nfor i in range(50):\n\tprint(Fibonacci(i), end = ' ')", "category": "Python"}, {"instruction": "Edit the below program to print the square of numbers from 0 to 10.\n\ndef printSquare():\n  for i in range(10):\n    print(i)", "input": "", "output": "def printSquare():\n  for i in range(10):\n    print(i**2)", "category": "Python"}, {"instruction": "What type of sorting algorithm does the following Python code implement?\n\ndef sort(nums):\n  for i in range(len(nums)):\n    for j in range(i+1, len(nums)):\n      if nums[j] < nums[i]:\n        nums[j], nums[i] = nums[i], nums[j]", "input": "", "output": "The code implements Bubble Sort, which is a type of comparison sorting algorithm. It works by repeatedly swapping adjacent elements if they are in the wrong order.", "category": "Python"}, {"instruction": "Construct a function that removes any non-alphanumeric characters from a string.", "input": "Hello world!", "output": "def remove_non_alphanumeric(string):\n    return ''.join(c for c in string if c.isalnum())\n\nremove_non_alphanumeric(\"Hello world!\")", "category": "Python"}, {"instruction": "Create a class in Python that contains the following methods:", "input": "", "output": "class Student:\n    def __init__(self, name, grade):\n        self.name = name\n        self.grade = grade\n\n    def getName(self):\n        return self.name\n\n    def getGrade(self):\n        return self.grade", "category": "Python"}, {"instruction": "Rotate a list of elements by a certain number of times.", "input": "[1, 2, 3, 4], 2", "output": "def rotate_array(arr, n): \n    \"\"\"\n    This function rotates a list of elements by a certain number of times\n    \"\"\"  \n    return arr[n:] + arr[:n]\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4]\n    n = 2\n    print(rotate_array(arr, n))", "category": "Python"}, {"instruction": "Create a function that takes 3 parameters and returns the maximum of them.", "input": "6, 7, 4", "output": "def find_max_of_three(a, b, c): \n    \"\"\"\n    This function finds the maximum of three numbers\n    \"\"\"  \n    return max(a, b, c)\n\nif __name__ == '__main__':\n    a = 6\n    b = 7\n    c = 4\n    print(find_max_of_three(a, b, c))", "category": "Python"}, {"instruction": "Create an array of prime numbers between 0 and 100 and print them out.", "input": "", "output": "Array = []\n\nfor num in range(2,101):\n    if all(num % i != 0 for i in range(2,num)):\n        Array.append(num)\n\nprint(Array)", "category": "Python"}, {"instruction": "Return the \"name\" field of the JSON object given below.", "input": "{\n\t\"name\": \"John Doe\",\n\t\"age\": 28,\n\t\"country\": \"United States\"\n}", "output": "import json\n\ninput_json = {\n        \"name\": \"John Doe\",\n        \"age\": 28,\n        \"country\": \"United States\"\n}\n\ndef get_name(json):\n    json_dict = json.loads(json)\n    name = json_dict['name']\n    return name\n\nif __name__ == '__main__':\n    print(get_name(input_json))", "category": "Python"}, {"instruction": "Generate code for printing a given 2D matrix in spiral order", "input": "matrix = [[1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9]]", "output": "def print_spiral(matrix):\n    # matrix is an 2D array \n    row_start = 0\n    row_end = len(matrix)-1\n    col_start = 0\n    col_end = len(matrix[0])-1\n\n    while row_start <= row_end and col_start <= col_end:\n        # print top row \n        for i in range(col_start, col_end+1):\n            print(matrix[row_start][i])\n        # increment row start \n        row_start += 1\n\n        # print right column\n        for i in range(row_start, row_end+1):\n            print(matrix[i][col_end])\n        # decrement col end\n        col_end -= 1\n        \n        # print bottom row\n        if row_start <= row_end:\n            for i in range(col_end, col_start-1, -1):\n                print(matrix[row_end][i])\n            # decrement row end\n            row_end -= 1\n\n        # print left column\n        if col_start <= col_end:\n            for i in range(row_end, row_start-1, -1):\n                print(matrix[i][col_start])\n            # increment col start\n            col_start += 1", "category": "Python"}, {"instruction": "Write a code to show the rating of a movie based on the review comments", "input": "rev_comments = [\"Great movie!\", \"The movie was average.\", \"Didn't enjoy it that much\"]", "output": "def rating(reviews):\n    score = 0\n    \n    positive = [\"great\", \"amazing\", \"funny\", \"entertaining\"]\n    negative = [\"bad\", \"mediocre\", \"average\", \"boring\"]\n    \n    for comment in reviews:\n        for word in positive:\n            if word in comment.lower():\n                score += 1\n        for word in negative:\n            if word in comment.lower():\n                score -= 1\n    \n    return score / len(reviews)", "category": "Python"}, {"instruction": "Generate code to print all unique 4 digit combos", "input": "", "output": "def unique_4_digit_combos():\n    # initialize a set to store the combinations \n    combos = set()\n    # loop through integers between 0000 and 9999\n    for i in range(10000):\n        # convert integer to string\n        digits = str(i).zfill(4)\n        # check if not repeated characters\n        if len(digits) == len(set(digits)):\n            # add to set \n            combos.add(digits)\n    # print the combinations \n    for c in combos:\n        print(c)", "category": "Python"}, {"instruction": "Answer the following question: What is the purpose of software testing?", "input": "", "output": "Software testing is the process of evaluating a software product in order to identify any potential issues and ensure that the end product meets the user's requirements. It is an essential part of the software development process, as it provides feedback about the product's quality and performance. Testing also helps ensure that a product is safe and secure, as it can detect potential problems and errors before the product is released.", "category": "Python"}, {"instruction": "Find the two adjacent elements in the array with the largest sum.", "input": "Array: [3, 6, 8, -10, 5]", "output": "def find_adjacent(arr):\n  max_sum = -1\n  for i in range(len(arr)-1):\n    if arr[i] + arr[i+1] > max_sum:\n      max_sum = arr[i] + arr[i+1]\n  return max_sum", "category": "Python"}, {"instruction": "Train a Machine Learning model using scikit-learn that can solve a binary classification problem.", "input": "Dataset - number of samples 1000, number of features 5, target label - binary", "output": "from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)\n\nlogreg = LogisticRegression(random_state=0).fit(X_train, y_train)", "category": "Python"}, {"instruction": "Parse the sentence and extract all the verbs from it.", "input": "Sentence: \"She ran quickly to catch the bus.\"", "output": "def extract_verbs(sentence):\n  verbs = []\n  words = sentence.split(\" \")\n  for w in words:\n    if w.endswith(\"ed\") or w.endswith(\"ing\"):\n      verbs.append(w)\n  return verbs", "category": "Python"}, {"instruction": "What do we mean by immutability in Python?", "input": "", "output": "Immutability in Python refers to the concept of objects that are unable to be modified. Immutable objects are specified when they are created and cannot be changed beyond that point. For example, tuples and strings are always immutable.", "category": "Python"}, {"instruction": "Convert a given JSON string to its Python dictionary equivalent.", "input": "json_string = '{\"name\":\"John\",\"age\":30}'", "output": "import json\npython_dict = json.loads(json_string)", "category": "Python"}, {"instruction": "Rewrite the following code to delete the elements from the list which are not even.", "input": "x = [1, 2, 3, 4, 5]", "output": "x = [i for i in x if i % 2 == 0]", "category": "Python"}, {"instruction": "Write a function to identify leap year.", "input": "", "output": "def isLeapYear(year): \n    if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0: \n        return True \n    else: \n        return False", "category": "Python"}, {"instruction": "Write a Python class to print the sum of an array elements", "input": "", "output": "class ArraySum: \n    def __init__(self, arr):\n        self.arr = arr\n\n    def sum(self):\n        total = 0\n        for i in self.arr:\n            total += i\n        return total", "category": "Python"}, {"instruction": "Write a Python program to create a random string of size 10 consisting of alphabets and digits.", "input": "", "output": "import random \n  \ndef randomString(stringLength=10): \n    lettersAndDigits = string.ascii_letters + string.digits \n    return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))", "category": "Python"}, {"instruction": "Generate a dictionary that contains all the words in a string of text, and the number of times each word occurs.", "input": "Text: \"I like dogs and cats and I like cats more than dogs\"", "output": "def create_dict(text):\n  text_list = text.split(' ')\n  count_dict = {}\n  for word in text_list:\n    count_dict[word] = count_dict.get(word, 0) + 1\n  return count_dict", "category": "Python"}, {"instruction": "Given a list of numbers, write a function that returns the sum without using the built-in 'sum()' function.", "input": "arr = [3, 4, 2, 5, 9]", "output": "def add_nums(arr):\n    total = 0\n    for x in arr:\n        total += x\n    return total", "category": "Python"}, {"instruction": "Create a function that takes an integer n as an argument and returns the sum of all numbers from 1 to n.", "input": "n = 10", "output": "def sum_to_n(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total", "category": "Python"}, {"instruction": "Suggest a way to find all the divisors of a number, n.", "input": "", "output": "We can find all the divisors of a number by using a for loop to iterate from 1 to n. For each number, we check if it is a divisor of n. If it is, then we add it to a list of divisors. At the end of the loop, we will have the list of all divisors of n.", "category": "Python"}, {"instruction": "Describe the purpose of the else statement in an if-else statement.", "input": "", "output": "The else statement in an if-else statement is used to execute a block of code when the expression in the if statement returns false. It provides an alternate option if the condition in the if statement is not satisfied. The else statement can be followed by an additional if-else statement in order to create an if-else-if ladder.", "category": "Python"}, {"instruction": "Generate a token based on the given parameters.", "input": "Parameters: Algorithm (SHA-256), Size (32 characters), Encode (Hexadecimal)", "output": "import hashlib\n\ndef generate_token(algorithm, size, encoding):\n\ttoken = hashlib.sha256(os.urandom(size//2)).hexdigest()[:size]\n\treturn token", "category": "Python"}, {"instruction": "Given a string s, create a function to find the character that appears the most and return its index.", "input": "s = \"Big Data\"", "output": "def most_freq_char(s):\n freq_dict = {}\n \n for char in s:\n if char in freq_dict:\n freq_dict[char] += 1\n else:\n freq_dict[char] = 1\n \n max_freq = 0\n max_char = \"\"\n \n for key in freq_dict:\n if max_freq < freq_dict[key]:\n max_freq = freq_dict[key]\n max_char = key\n \n return s.index(max_char)", "category": "Python"}, {"instruction": "Write a Python program to check if a list contains a specific item.", "input": "data = [3, 4, 5, 6, 7]", "output": "def contains_item(data, item):\n    return item in data", "category": "Python"}, {"instruction": "Write a Python function to split a list of items into groups of n.", "input": "list = [\"red\", \"green\", \"orange\", \"blue\", \"pink\", \"purple\"]", "output": "def split_list(data, n):\n    output = [data[i:i+n] for i in range(0, len(data), n)]\n    return output", "category": "Python"}, {"instruction": "Write a python program to replace the character \u2018e' with the character \u2018E' for strings of length more than 5", "input": "text = \"Hello world!\"", "output": "def replace_char(text):\n    if len(text) > 5:\n        return text.replace('e','E')\n    else:\n        return text", "category": "Python"}, {"instruction": "Modify the following code to print all words with more than 5 characters in a given string.", "input": "text = \"This is an example string\"", "output": "text = \"This is an example string\"\nwords = text.split() \nfor word in words: \n    if len(word) > 5: \n        print(word)", "category": "Python"}, {"instruction": "Modify the code to make it compatible with Python 3.", "input": "mylist = range(20)\n\nfor i in mylist:\n    print i", "output": "mylist = list(range(20))\n\nfor i in mylist: \n    print(i)", "category": "Python"}, {"instruction": "Find the max 2 numbers in a list of 5 numbers without using any comparison operator.", "input": "arr = [3, 10, 2, 5, 9]", "output": "def findMax2Numbers(arr): \n    max1 = 0\n    max2 = 0\n    \n    for i in range(len(arr)): \n        temp = arr[i] + max1 \n        max2 = max1 \n        if temp > max2: \n            max1 = temp \n        elif max2 > temp: \n            max1 = max2 \n    \n    return max1, max2", "category": "Python"}, {"instruction": "Create a new list object by selecting the names that start with a \u2018A\u2019 from the given list", "input": "[Alfred, John, Anthony, Paula]", "output": "Name_list = [name for name in input_list if name[0] == 'A']", "category": "Python"}, {"instruction": "Edit the following Python code to print out \u201cThe answer is X\u201d", "input": "print(\"X + 5 = 10\")", "output": "print(\"The answer is \" + str(10 - 5))", "category": "Python"}, {"instruction": "Create a rectangle using the turtle library in Python", "input": "", "output": "import turtle\nt = turtle.Turtle() \nt.forward(100) \nt.left(90) \nt.forward(50) \nt.left(90) \nt.forward(100) \nt.left(90) \nt.forward(50) \nt.left(90)", "category": "Python"}, {"instruction": "Given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digits. Add the two numbers and return the sum as a linked list.", "input": "", "output": "class Solution:\n    def addTwoNumbers(self, l1, l2):\n        # Initialize current, previous and \n        # next pointers \n        curr1 = l1\n        curr2 = l2\n        head = None\n        prev = None\n        \n        carry = 0\n        while curr1 != None or curr2 != None or carry != 0:\n            val1 = 0\n            if curr1 != None:\n                val1 = curr1.val\n                curr1 = curr1.next\n            \n            val2 = 0\n            if curr2 != None:\n                val2 = curr2.val\n                curr2 = curr2.next\n                \n            val = val1 + val2 + carry\n            carry = val // 10\n            temp = ListNode(val%10)\n\n            if prev == None:\n                head = temp\n            else:\n                prev.next = temp\n            \n            prev = temp\n\n        return head", "category": "Python"}, {"instruction": "You are given a string \"hello\". Write a function to print out all the possible subsets of that string.", "input": "", "output": "def generate_subsets(string):\n    if len(string) == 0:\n        return ['']\n    else:\n        results = list()\n        for s in generate_subsets(string[1:]):\n            results.append(s)\n            results.append(string[0] + s)\n        return results\n\nprint(generate_subsets('hello'))", "category": "Python"}, {"instruction": "Define a python function called ``string_length`` that can take a string as an argument and output the length of that string.", "input": "", "output": "def string_length(str):\n  return len(str)", "category": "Python"}, {"instruction": "Suggeste a completion of the following code:", "input": "def flatten(nested_list):", "output": "def flatten(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten(item))\n        else:\n            flat_list.append(item)\n    return flat_list", "category": "Python"}, {"instruction": "What should this function take as input and return?", "input": "def find_longest_word(words):", "output": "def find_longest_word(words):\n    '''This function takes a list of words as input and returns a string containing the longest word'''\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word", "category": "Python"}, {"instruction": "What should the following code print out?", "input": "def f(n):\n    if n == 0:\n        return 0\n    else:\n        return n + f(n-1)\n\nprint(f(5))", "output": "def f(n):\n    if n == 0:\n        return 0\n    else:\n        return n + f(n-1)\n\nprint(f(5)) # prints 15", "category": "Python"}, {"instruction": "What should the following function return?", "input": "def calculate_sd(numbers):", "output": "def calculate_sd(numbers):\n    mean = sum(numbers) / len(numbers)\n    variance = sum((x - mean) ** 2 for x in numbers) / len(numbers)\n    sd = variance ** 0.5\n    return sd", "category": "Python"}, {"instruction": "Edit this regression model to predict continuous values.", "input": "import numpy as np\n\ndef model(x):\n    return np.mean(x)", "output": "import numpy as np\n\ndef model(x):\n    return np.mean(x) + np.poly1d(np.polyfit(x, y, 2))(x)", "category": "Python"}, {"instruction": "Assign a random value to each item in a given list.", "input": "my_list = [1, 2, 3]", "output": "import random\n\ndef assign_random_value(my_list):\n    \"\"\"Assign a random value to each item in a given list.\"\"\"\n    # iterate through each item in the list\n    for i in range(len(my_list)):\n        # generate a random integer between 0 and 1\n        random_int = random.randint(0, 1)\n        # assign the random integer to the current item in the list\n        my_list[i] = random_int\n    return my_list", "category": "Python"}, {"instruction": "Calculate the maximum value in a dictionary.", "input": "d = {'a': 1, 'b': 3, 'c': 5}", "output": "def get_max_value(d):\n    \"\"\"Calculate the maximum value in a dictionary.\"\"\"\n    max_value = 0\n    for key in d:\n        if d[key] > max_value:\n            max_value = d[key]\n    return max_value", "category": "Python"}, {"instruction": "Write code to determine if a word is a palindrome or not.", "input": "word = \"noon\"", "output": "def palindrome_check(word):\n    \"\"\"Check if a given word is a palindrome.\"\"\"\n    # reverse the given word\n    reversed_word = word[::-1]\n    if word == reversed_word:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Compare two strings and return true if both strings have the same number of characters.", "input": "string1 = \"hello\"\nstring2 = \"world\"", "output": "def compare_strings(string1, string2):\n    \"\"\"Compare two strings and return True if both strings have the same number of characters.\"\"\"\n    if len(string1) == len(string2):\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Compare two strings and count the number of characters that are different.", "input": "str1 = 'hello'\nstr2 = 'hallo'", "output": "def countTextDifference(str1, str2):  \n    # store length of both strings  \n    len1 = len(str1)   \n    len2 = len(str2)   \n  \n    # store the number of characters  \n    # which are different  \n    count = 0 \n  \n    # compare and count the number  \n    # of characters which are different \n    for i in range(0, len1):      \n        if (i >= len2): \n            count += (len1 - len2) \n            break\n        if (str1[i] == str2[i]):  \n            continue\n        else:      \n            count += 1\n    \n    # return different character count \n    return count", "category": "Python"}, {"instruction": "Write a code to print out a two-dimensional array.", "input": "A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "for row in A:\n    for elem in row:\n        print(elem, end=' ')\n    print()", "category": "Python"}, {"instruction": "Write a function for removing duplicates from a given list", "input": "list = [1, 2, 3, 3, 4, 2]", "output": "def removeDuplicates(list):\n    # create a new set with unique elements from list\n    unique_set = set(list)\n    # convert set back to list\n    unique_list = list(unique_set) \n    return unique_list", "category": "Python"}, {"instruction": "Create a function that takes a string and checks if it's a valid email or not.", "input": "string = 'example[at]gmail.com'", "output": "import re\n\ndef isValidEmail(string):\n    # regex to check for valid email address\n    regex = '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n    if(re.search(regex,string)):  \n        return True  \n    else:  \n        return False", "category": "Python"}, {"instruction": "Implement a function for searching an item in the given list.", "input": "list = [1, 4, 5, 6, 8, 9]\nitem = 5", "output": "def search(list, item):\n    for i in range(len(list)):\n        if list[i] == item:\n            return True\n    return False", "category": "Python"}, {"instruction": "Write a computer program to print all primes in an inputted range.", "input": "", "output": "def print_primes(start, end):\n    for num in range(start, end + 1):\n        # all prime numbers are greater than 1\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                print(num)", "category": "Python"}, {"instruction": "Make a matrix multiplication program that takes an arbitrary number of matrices as input.", "input": "", "output": "def matrix_multiplication(*matrices):\n    res = [[0 for _ in range(len(matrices[0][0]))]\n        for _ in range(len(matrices[0]))]\n    for y in range(len(matrices[0])):\n        for x in range(len(matrices[0][0])):\n            for m in range(len(matrices)):\n                res[y][x] += matrices[m][y][x]\n    return res", "category": "Python"}, {"instruction": "Given a positive integer number, generate the Fibonacci series.", "input": "", "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)", "category": "Python"}, {"instruction": "Summarize the article 'X' in one or two paragraphs.", "input": "Article 'X':\n\nThis article is about the history of the city of Rome. Rome was founded in 753 BCE by two brothers, Romulus and Remus. Since then, Rome has been a powerful city that has played a huge role in the formation of Western civilization. The Roman Republic was established in 509 BCE, and the Roman Empire followed in 27 BCE. During its long reign, Rome expanded its borders and implemented various laws and policies that shaped the legal systems of many countries.", "output": "Rome is one of the oldest cities in the world, having been founded in 753 BCE by Romulus and Remus. Following its founding, Rome quickly developed into a powerful city-state, establishing the Roman Republic in 509 BCE and the Roman Empire in 27 BCE. During its reign, Rome significantly expanded its reach and instituted laws and policies that influenced much of Western civilization. It eventually fell in 476 CE, yet its legacy continues to impact many countries today.", "category": "Python"}, {"instruction": "Create a pandas dataframe containing the following columns and their respective values:", "input": "A, B, C\nA= 12, 15, 20\nB= 30, 25, 35\nC= 40, 45, 50", "output": "df = pd.DataFrame({\"A\": [12,15,20], \n                    \"B\": [30,25,35], \n                    \"C\": [40,45,50]})", "category": "Python"}, {"instruction": "Create a algorithm to calculate the fibonacci number of nth term.", "input": "", "output": "def fib(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2,n):\n            c = a + b\n            a = b\n            b = c\n        return b", "category": "Python"}, {"instruction": "Create a function to calculate the total cost of the items in a cart.", "input": "items = [{\"item\":\"apple\", \"cost\":3.00}, {\"item\":\"orange\", \"cost\":2.50}]", "output": "def total_cost(items):\n    total = 0\n    for item in items:\n        total += item['cost']\n    return total", "category": "Python"}, {"instruction": "Create a Python variable a with value 5.", "input": "", "output": "a = 5", "category": "Python"}, {"instruction": "Given a variable arr containing integers, write python code to remove all duplicate elements from the array and return the new array.", "input": "arr = [1, 2, 2, 3, 4, 4, 4, 5, 6, 6]", "output": "arr = list(set(arr)) # [1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Construct an algorithm that checks if the given sequence is an arithmetic sequence.", "input": "", "output": "def is_arithmetic_sequence(sequence):\n    is_arithmetic = True\n    diff = 0\n    for i in range(1, len(sequence)):\n        if i ==1:\n            diff = sequence[i]-sequence[i-1]\n        else:\n            new_diff = sequence[i]-sequence[i-1]\n            if new_diff != diff:\n                is_arithmetic = False\n                break\n    return is_arithmetic", "category": "Python"}, {"instruction": "Create a class that can be used to filter a given list of numbers using a given condition.", "input": "nums = [3,6,7,2,1,12,14]\ncondition = lambda x: x>5", "output": "class FilterList:\n    def __init__(self, nums, condition):\n        self.nums = nums\n        self.condition = condition\n       \n    def __iter__(self):\n        for num in self.nums:\n            if self.condition(num):\n                yield num", "category": "Python"}, {"instruction": "Find the nth Fibonacci number in a given range.", "input": "", "output": "def get_nth_fibonacci_number(n):\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return get_nth_fibonacci_number(n-1)+get_nth_fibonacci_number(n-2)", "category": "Python"}, {"instruction": "For each tuple in a given list, write a function to get the first element.", "input": "[(1,2), (3,4), (5,6)]", "output": "def get_first_element(tuples):\n  return [t[0] for t in tuples]", "category": "Python"}, {"instruction": "Write a function to compute the maximum depth of binary tree from a given list of numbers.", "input": "nums = [3,9,20,None,None,15,7]", "output": "def get_max_depth(nums):\n    max_depth = 0\n    curr_depth = 0\n    for n in nums:\n        if n is None:\n            max_depth = max(max_depth, curr_depth)\n            curr_depth -= 1\n        else:\n            curr_depth += 1\n    return max_depth", "category": "Python"}, {"instruction": "Find all prime numbers up to a given number.", "input": "", "output": "def list_primes(n): \n    primes = [] \n    for num in range(2, n+1): \n        prime=True\n        for i in range(2, int(num/2)+1):\n            if num%i == 0:\n                prime=False\n        if prime:\n            primes.append(num)\n    return primes", "category": "Python"}, {"instruction": "Write a logic to obtain boolean output from a given comparison.", "input": "", "output": "def compare(a, b):\n    if a < b:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Suggest an enhancement to the following code to support unicode strings.", "input": "def replace_char(string, char_old, char_new):\n    for i in range(len(string)):\n       if string[i] == char_old:\n            string[i] = char_new\n    return string", "output": "def replace_char(string, char_old, char_new):\n    new_string = ''\n    for char in string:\n        if char == char_old:\n            new_string = new_string + char_new\n        else:\n            new_string = new_string + char\n    return new_string", "category": "Python"}, {"instruction": "Modify the given code to handle errors in the following Python script.", "input": "num = int(input('Enter a number'))\nprint(num * 5)", "output": "try:\n    num = int(input('Enter a number'))\n    print(num * 5)\nexcept Exception as e:\n    print(\"Error: {}\".format(e))", "category": "Python"}, {"instruction": "Create a header comment for the following python script.", "input": "def add(x, y):\n    return x + y", "output": "\"\"\"\nThis python script contains a function which takes in two arguments and \nreturns the sum of the two arguments.\n\"\"\"\n\ndef add(x, y):\n    return x + y", "category": "Python"}, {"instruction": "Create a function that takes a string representation of a JSON object and converts it into a Python dictionary.", "input": "", "output": "def json_to_dict(json_str):\n    return json.loads(json_str)", "category": "Python"}, {"instruction": "Design an algorithm that calculates the sum of all numbers in a given array.", "input": "[2, 4, 7, 10]", "output": "def array_sum(arr): \n    total = 0\n    # Iterate through arr and add elements to total  \n    for i in range (0, len(arr)): \n        total += arr[i] \n    return total \n  \n# Driver code \narr = [2, 4, 7, 10] \nsum = array_sum(arr) \nprint (sum) # -> 23", "category": "Python"}, {"instruction": "Design an algorithm that determines the greatest common multiple of two numbers.", "input": "", "output": "def gcm(x, y): \n    if(x > y): \n        gcm = x \n    else: \n        gcm = y \n  \n    while(True): \n        if((gcm % x == 0) and (gcm % y == 0)): \n            return gcm \n        gcm = gcm + 1\n  \n# Driver Program \nx = 12\ny = 18\nprint(gcm(x, y))", "category": "Python"}, {"instruction": "Transform the following string in Python into a dictionary whose keys are the names of the colors and the values are the hex codes for the colors.", "input": "\"red #FF0000, blue #0000FF, green #00FF00\"", "output": "colors = 'red #FF0000, blue #0000FF, green #00FF00'\n\ndict_colors = {i.split()[0]:i.split()[1] for i in colors.split(', ')} # returns {'red': '#FF0000', 'blue': '#0000FF', 'green': '#00FF00'}", "category": "Python"}, {"instruction": "Transform the following array into a string of comma-separated values in Python.", "input": "[1, 2, 3, 4]", "output": "','.join([str(i) for i in [1, 2, 3, 4]]) # returns \"1,2,3,4\"", "category": "Python"}, {"instruction": "How can we sort an array of numbers in ascending order in Python?", "input": "", "output": "sorted_numbers = sorted(numbers)  # returns a sorted list of numbers in ascending order.", "category": "Python"}, {"instruction": "Create a data visualization of the following data set with the target variable as red and the predictor variables as blue.", "input": "data = [[1, 2, 1, 0],\n        [2, 4, 0, 1],\n        [2, 3, 0, 1],\n        [3, 6, 1, 0]]", "output": "import matplotlib.pyplot as plt \n\nx_1 = [1, 2, 2, 3]\nx_2 = [2, 4, 3, 6]\n\ntarget = [1, 0, 1, 0]\n\nfor i in range(len(x_1)):\n    c = 'r' if target[i] == 1 else 'b'\n    plt.scatter(x_1[i], x_2[i], marker='o', c=c) \n\nplt.title(\"Data Visualization\") \nplt.xlabel(\"x_1\") \nplt.ylabel(\"x_2\") \n  \nplt.show()", "category": "Python"}, {"instruction": "Describe a classification problem in machine learning.", "input": "", "output": "In machine learning, classification is the process of predicting a class label for an input sample. A class label is a discrete value that describes a group or category that an input belongs to. The input may have multiple features, also known as attributes or predictors, that can be used in the prediction process. A classification algorithm takes these features as input and assigns a label to the given input sample. Examples of classification problems include image recognition, medical diagnosis, language processing, and fraud detection.", "category": "Python"}, {"instruction": "Create a list of strings in Python with 4 elements.", "input": "", "output": "mylist = ['Hello', 'World', 'This', 'Is']", "category": "Python"}, {"instruction": "Construct a program to find the index of a given element in a sorted array with binary search.", "input": "list = [-1, 0, 2, 3, 9, 10]\ntarget = 3", "output": "def binarySearch(arr, target):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end)//2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            end = mid - 1\n        else:\n            start = mid + 1 \n    return -1\n\nindex = binarySearch([-1, 0, 2, 3, 9, 10], 3)", "category": "Python"}, {"instruction": "Rewrite the following recursive function such that it runs in iterative manner.", "input": "def f(n):\n    if n <= 1:\n        return n\n    else:\n        return f(n-1) + f(n-2)", "output": "def f(n):\n    if n <= 1:\n        return n\n    else: \n        a, b = 1, 1\n        for _ in range(n-1):\n            a, b = b, a+b\n        return b", "category": "Python"}, {"instruction": "Deploy a model server on AWS Lambda to serve a machine learning model.", "input": "", "output": "import json\nimport os\nimport boto3\nimport numpy as np\nimport io\nfrom PIL import Image\nimport tensorflow as tf\nfrom tensorflow.keras.models import load_model\n\n\nmodel_path = os.environ['MODEL_PATH']\nmodel_class_name = os.environ['MODEL_CLASS_NAME']\nmodel = load_model(model_path)\n\ndef model_predict(event, context):\n    body = json.loads(event['body'])\n    img_data = body['img_data']\n    img_bytes = base64.b64decode(img_data)\n    pil_img = Image.open(io.BytesIO(img_bytes))\n\n    # compress the image\n    img_raw = pil_img.resize((224, 224))\n\n    # convert image to array\n    input_img = np.expand_dims(np.array(img_raw), axis=0)\n\n    # predict\n    results = model.predict(input_img)\n    res = {\n        'statusCode': 200,\n        'body': json.dumps(results.tolist())\n    }\n\n    return res", "category": "Python"}, {"instruction": "Create a Python script that sets the value of a variable from the command-line.", "input": "", "output": "import sys\n\n# Set a variable\nvariableName = sys.argv[1]\n\n# Get a value from command line argument\nvalue = sys.argv[2]\n\n# Set the value of the variable\nexec(variableName + \"=\" + value)\n\nprint(variableName)", "category": "Python"}, {"instruction": "Create a program that takes a number n and prints the pattern given below.", "input": "n = 3", "output": "for i in range(n):\n    for j in range(i+1):\n        print('*', end=\" \")\n    print()", "category": "Python"}, {"instruction": "Alter the following program such that it returns the complement of the given list.", "input": "def get_complement(lst):\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(1 - lst[i])\n    return new_lst", "output": "def get_complement(lst):\n    return [1 - item for item in lst]", "category": "Python"}, {"instruction": "Implement a quicksort algorithm in Python to sort a list of 6 integers [52,85,23,6,37,77].", "input": "[52,85,23,6,37,77]", "output": "def quicksort(nums):\n    if len(nums) <= 1:\n        return nums\n    else:\n        pivot = nums[0]\n        less = [i for i in nums[1:] if i <= pivot]\n        greater = [i for i in nums[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n\nprint(quicksort([52,85,23,6,37,77]))", "category": "Python"}, {"instruction": "Write an algorithm to generate a random string of length n.", "input": "8", "output": "import random \n\ndef randomString(n): \n    # Choose a character set\n    charSet = \"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    # Generate a string of length n\n    myString = \"\" \n    for i in range(n):  \n        myString += random.choice(charSet)  \n    return myString", "category": "Python"}, {"instruction": "Develop a DFS algorithm in Python.", "input": "", "output": "def dfs(graph, start, end):\n    # create a visited array\n    visited = [False] * len(graph)\n\n    # create a stack\n    stack = []\n\n    # mark the starting node as visited and push it in the stack\n    stack.append(start)\n\n    while stack:\n        # get the current node\n        node = stack.pop()\n\n        # if the node hasn't been visited\n        if not visited[node]:\n            # mark the node as visited\n            visited[node] = True\n\n            # check for the end node\n            if node == end:\n                return True\n\n            # append the neighbors of the node to the stack\n            neighbors = graph[node]\n            for neighbor in neighbors:\n                stack.append(neighbor)\n\n    # end node not found\n    return False", "category": "Python"}, {"instruction": "Construct an algorithm for reversing a string.", "input": "", "output": "def reverse_string(s):\n    # Initialize empty string\n    rev_string = \"\"\n    # Traverse over each letter in the string in reverse order\n    for letter in s[::-1]:\n        # Append the current letter to the end of rev_string\n        rev_string = rev_string + letter\n    # Return the reversed string\n    return rev_string", "category": "Python"}, {"instruction": "Create a data structure for a streaming interface that holds a maximum of 5 numbers.", "input": "", "output": "class Stream:\n    def __init__(self):\n        self.stream = [None, None, None, None, None]\n\n    # This function adds a number to the start (index 0) of the stream and then shifts the other elements to the right\n    def add(self, num):\n        for i in reversed(range(1, len(self.stream))):\n            self.stream[i] = self.stream[i-1]\n\n        self.stream[0] = num\n\n    # This function returns a list of the current elements from the stream\n    def list(self):\n        return self.stream", "category": "Python"}, {"instruction": "Construct an if-else statement to print \"Good Evening\" if the time is past 5pm and print \"Good Morning\" otherwise.", "input": "", "output": "import time\n\nt = time.localtime()\n\nif t.tm_hour >= 17: \n    print(\"Good Evening!\")\nelse: \n    print(\"Good Morning!\")", "category": "Python"}, {"instruction": "Given an integer 'base' and an integer 'exponent', write a function to calculate the result of 'base' raised to the power of 'exponent'.", "input": "base: 2 \nexponent: 3", "output": "def power(base, exponent):\n    result = 1\n    for _ in range(exponent):\n        result *= base\n    return result", "category": "Python"}, {"instruction": "Create a list in Python called \"my_list\" and populate it with five integers ranging from 0 to 5.", "input": "", "output": "my_list = [0, 1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Create a Numpy array with 3 columns and 4 rows and assign it to the variable \"my_array\".", "input": "", "output": "my_array = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])", "category": "Python"}, {"instruction": "Evaluate a mathematical expression given as a string.", "input": "expression = \"2 + 3 * 5\"", "output": "import math\n\ndef evaluate_expression(expression):\n    '''Returns the evaluation of a given mathematical expression.'''\n    return eval(expression)\n\n# example\nprint(evaluate_expression(\"2 + 3 * 5\")) # output: 17", "category": "Python"}, {"instruction": "Define a class for a student.", "input": "", "output": "class Student:\n    '''Creates a class object to represent a student.'''\n \n    def __init__(self, name, age, grade):\n        '''Initiate the class with name, age, and grade.'''\n        self.name = name\n        self.age = age\n        self.grade = grade\n \n    def get_name(self): \n        '''Return the student name.'''\n        return self.name\n \n    def get_age(self): \n        '''Return the student age.'''\n        return self.age\n \n    def get_grade(self): \n        '''Return the student grade.'''\n        return self.grade", "category": "Python"}, {"instruction": "Compare two strings and remove all letters from the first string which are present in the second string and vice versa.", "input": "string1 = \"Hello World!\"\nstring2 = \"Bye World!\"", "output": "def compare_and_remove_letters(string1, string2):\n    result = \"\"\n    for i in string1:\n        if i not in string2:\n            result += i\n    for i in string2:\n        if i not in string1:\n            result += i\n    return result\n\n# example\nprint(compare_and_remove_letters(\"Hello World!\", \"Bye World!\")) # output: Byelo!", "category": "Python"}, {"instruction": "What are the benefits of Polymorphism in Object-Oriented Programming?", "input": "", "output": "Polymorphism in Object-Oriented Programming (OOP) allows for objects of different types to share the same interface and behave differently according to their type. This allows a more flexible and efficient codebase, as it eliminates the need to write code specifically for each object type. It also improves the reusability of the code, as a single function can be used to manipulate many different types of objects. Polymorphism also improves readability, as it allows for generic functions and methods to be used without having to know the exact type of the input.", "category": "Python"}, {"instruction": "Given the following code in Python, identify the mistake and fix it.", "input": "name = input(\"What is your name? \"", "output": "name = input(\"What is your name? \") # Missing closing quotation mark", "category": "Python"}, {"instruction": "Name three principles of Object-Oriented Programming.", "input": "", "output": "The three principles of Object-Oriented Programming (OOP) are encapsulation, abstraction, and inheritance. Encapsulation is the process of combining together data and functions in a single unit, such as a class. Abstraction is the process of organizing and simplifying complex data by hiding unnecessary details from the user. Inheritance is the process of establishing a parent-child relationship between two classes and allowing the child class to acquire the properties and behaviors of the parent class.", "category": "Python"}, {"instruction": "Using python, limit the number of characters printed in the following statement to only 10:", "input": "statement = \"Hello, World!\"", "output": "statement = \"Hello, World!\"\n\nprint(statement[:10])", "category": "Python"}, {"instruction": "Modify the following python program to return the sum of even numbers from the input list.", "input": "def sum_list(input):\n    sum = 0\n    for num in input:\n        sum += num\n    return sum", "output": "def sum_list(input):\n    sum = 0\n    for num in input:\n        if num % 2 == 0:\n            sum += num\n    return sum", "category": "Python"}, {"instruction": "Write a script in Python to remove the characters from the given string which are not in the alphabet.", "input": "string=\"!!He##ll%o W..or##ld!!\"", "output": "new_string = \"\"\nfor char in string:\n    if char.isalpha():\n        new_string += char\n\nprint (new_string)", "category": "Python"}, {"instruction": "Modify the Python code so that it can be used to find the GCD of 3 numbers.", "input": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n\n    return a", "output": "def gcd(a, b, c): \n    if(b==0 and c==0): \n        return a \n    if(c==0): \n        return gcd(b, a % b) \n    return gcd(gcd(a, b), c)", "category": "Python"}, {"instruction": "Write a function to convert a given integer number toRoman numerals.", "input": "", "output": "def intToRoman(num): \n  \n    val = [ \n            1000, 900, 500, 400, \n            100, 90, 50, 40, \n            10, 9, 5, 4, \n            1 \n            ] \n    rom_num = [ \n                \"M\", \"CM\", \"D\", \"CD\", \n                \"C\", \"XC\", \"L\", \"XL\", \n                \"X\", \"IX\", \"V\", \"IV\", \n                \"I\"\n                ] \n  \n    res = \"\" \n    i = 0\n    while num > 0: \n  \n        # Find the greatest value smaller \n        # than the given number num \n        div = num // val[i] \n  \n        # Update the number after each \n        # iteration \n        num = num % val[i] \n  \n        # Concatenate the roman characters \n        # equal to the power value of div \n        while div > 0: \n            res = res + rom_num[i] \n            div = div - 1\n        \n        i = i + 1\n  \n    return res \n  \n# Driver code \nnum = 12\nprint(intToRoman(num))", "category": "Python"}, {"instruction": "Suggest a way of converting the following JSON object into CSV format.", "input": "data = {\n    \"Name\": \"John Doe\",\n    \"Age\": \"50\",\n    \"Gender\": \"Male\"\n}", "output": "import csv \n\ndef json_to_csv(data):\n    csv_data = [list(data.values())]\n    with open('data.csv', 'w') as f:\n        writer = csv.writer(f)\n        writer.writerows(csv_data)\n    \njson_to_csv(data)", "category": "Python"}, {"instruction": "Find an example of a sorting algorithm in Python.", "input": "", "output": "Example of a sorting algorithm in Python:\n\ndef selection_sort(arr):\n    for i in range(len(arr)):\n        # Find the minimum element in remaining\n        # unsorted array\n        min_idx = i\n        for j in range(i + 1, len(arr)):\n            if arr[min_idx] > arr[j]:\n                min_idx = j\n \n        # Swap the found minimum element with\n        # the first element\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]", "category": "Python"}, {"instruction": "Write a function to return the count of all prime numbers from 1 to n (inclusive).", "input": "", "output": "def count_primes(n):\n  count = 0\n  for i in range(2, n+1):\n    is_prime = True\n    for j in range(2, i):\n      if i % j == 0:\n        is_prime = False\n        break\n    if is_prime:\n      count += 1\n  return count", "category": "Python"}, {"instruction": "Write a function to search in a 1D array of integers, and return the index of the target if it is present.", "input": "arr = [1, 4, 5, 6, 7, 9, 3, 2]\ntarget = 8", "output": "def linear_search(arr, target):\n  for i in range(len(arr)):\n    if arr[i] == target:\n      return i\n  return -1 # target not found", "category": "Python"}, {"instruction": "Construct an algorithm to check if two strings have the same characters and same frequency of characters.", "input": "String A: hello \nString B: ollhe", "output": "def is_anagram(str1, str2):\n    char_map1 = {}\n    char_map2 = {}\n\n    for char in str1:\n        if char in char_map1:\n            char_map1[char] += 1\n        else:\n            char_map1[char] = 1\n    \n    for char in str2:\n        if char in char_map2:\n            char_map2[char] += 1\n        else:\n            char_map2[char] = 1\n    \n    return char_map1 == char_map2", "category": "Python"}, {"instruction": "Generate a ternary tree data structure in Python.", "input": "", "output": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.center = None\n        self.right = None", "category": "Python"}, {"instruction": "How would you create a for-loop in Python to iterate through all the integers from 1 to 10?", "input": "", "output": "for i in range(1,11):\n  print(i)", "category": "Python"}, {"instruction": "Write an expression to check if a given number is a perfect square", "input": "num = 16", "output": "# Write an expression to check if a given number is a perfect square\n\nimport math\n\ndef is_perfect_square(num):\n    return math.sqrt(num).is_integer()\n    \n# Check the given number\nprint(is_perfect_square(16)) # Output: True", "category": "Python"}, {"instruction": "How would you merge two sorted linked lists into one?", "input": "", "output": "def mergeLists(l1, l2): \n    dummy = curr = ListNode(0)  \n    while l1 and l2: \n        if l1.val < l2.val: \n            curr.next = l1 \n            l1 = l1.next\n        else: \n            curr.next = l2 \n            l2 = l2.next\n        curr = curr.next\n    curr.next = l1 or l2\n    return dummy.next", "category": "Python"}, {"instruction": "Write a regular expression in Python to find all words that start with \"A\".", "input": "", "output": "import re\n\nwords = re.findall(r'\\bA\\w+', text)", "category": "Python"}, {"instruction": "Implement a binary search algorithm in Python for searching for a specific element in a given list of numbers.", "input": "list = [1, 3, 5, 7, 9, 11 ] and target number =7", "output": "def binary_search(lst, target):\n\n    \"\"\"\n    Implements a binary search algorithm \n    in Python for searching for a specific \n    element in the given list of numbers.\n    \"\"\"\n    low = 0\n    high = len(lst)-1\n\n    while low <= high:\n        mid = (low + high)//2\n        if lst[mid] == target:\n            return mid\n\n        elif lst[mid] < target:\n            low = mid + 1\n\n        else:\n            high = mid - 1\n\n    return -1", "category": "Python"}, {"instruction": "Given a list of integers and a target sum, write a function that returns a pair of said integers that add up to the target sum.", "input": "list = [3, 9, -4, 0, -7, 8] and target sum = -4", "output": "def find_pair(lst, target_sum):\n    \"\"\"\n    Given a list of integers and a target sum, \n    this function returns a pair of said integers \n    that add up to the target sum.\n    \"\"\"\n    seen = set()\n    for num in lst:\n        inverse = target_sum - num\n        if inverse in seen:\n            return (num, inverse)\n        seen.add(num)", "category": "Python"}, {"instruction": "Create a class in Python that can be used to store the details of a student.", "input": "", "output": "class Student:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n    \n    def set_details(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n    \n    def get_details(self):\n        return f'Name: {self.name}, Age: {self.age}, Gender: {self.gender}'", "category": "Python"}, {"instruction": "Write a Python function to analyze the performance of different sorting algorithms.", "input": "List = [6, 8, 0, 1, 4, 5, 7, 3, 2, 9]", "output": "def analyze_sorting_performance(list):\n    \"\"\"\n    Analyze the performance of different sorting algorithms \n    on the given list. \n    \"\"\"\n    insertion_sort_list = list.copy()\n    insertion_sort(insertion_sort_list)\n    bubble_sort_list = list.copy()\n    bubble_sort(bubble_sort_list)\n    merge_sort_list = list.copy()\n    merge_sort(merge_sort_list)\n    quick_sort_list = list.copy()\n    quick_sort(quick_sort_list)\n    \n    print(\"Insertion Sort: {}\".format(insertion_sort_list))\n    print(\"Bubble Sort: {}\".format(bubble_sort_list))\n    print(\"Merge Sort: {}\".format(merge_sort_list))\n    print(\"Quick Sort: {}\".format(quick_sort_list))", "category": "Python"}, {"instruction": "Modify the following Python program to contain an input.", "input": "num1 = 10\nnum2 = 20\nsum = num1 + num2\n\nprint(\"The sum of two numbers is\",sum)", "output": "num1 = int(input(\"Enter the first number: \"))\nnum2 = int(input(\"Enter the second number: \"))\nsum = num1 + num2\n\nprint(\"The sum of the two numbers is\", sum)", "category": "Python"}, {"instruction": "Generate a correct Python code for a data structure which supports the following operations -", "input": "insert(key, value)\nget(key)\ndelete(key)", "output": "class Map(object):\n    \n    def __init__(self): \n        # a dictionary-based data structure \n        # to store (key, value) pairs \n        self.data = {} \n  \n    # insert the given value with the given key \n    def insert(self, key, value): \n        self.data[key] = value     \n  \n    # get the value for the given key \n    def get(self, key): \n        return self.data[key] \n  \n    # delete the datapoint with the given key \n    def delete(self, key): \n        self.data.pop(key)", "category": "Python"}, {"instruction": "Extract the domain names from the given list of URLs", "input": "url_list = [ \"www.abcd.com\", \"www.something.co.in\", \"www.example.ng\" ]", "output": "def extract_domain(url_list): \n    domains = list() \n    for url in url_list: \n        url_parts = url.split('.')\n        domains.append(url_parts[-2]+'.'+url_parts[-1]) \n    return domains\n\ndomain_list = extract_domain(url_list)", "category": "Python"}, {"instruction": "Sort a list of integers using quicksort", "input": "list = [4,2,1,5,3]", "output": "def quicksort(arr): \n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\n\nsorted_list = quicksort(list)", "category": "Python"}, {"instruction": "How to remove the last character of a string in Python?", "input": "word = \"Hello\"", "output": "word = word[:len(word)-1]", "category": "Python"}, {"instruction": "How to decode a Base64 string to its corresponding string representation in Python?", "input": "base64_string = \"SGVsbG8gV29ybGQ=\"", "output": "import base64\nstring = base64.b64decode(base64_string).decode(\"utf-8\")", "category": "Python"}, {"instruction": "Design a pipeline in Scikit-learn to preprocess a given dataset.", "input": "", "output": "from sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\n\npipeline = Pipeline(steps=[\n    ('scaler', StandardScaler()),\n    ('pca', PCA())\n])", "category": "Python"}, {"instruction": "Create a switch-case statement for a shopping cart to print out the items and their prices.", "input": "Item1: $25.00\nItem2: $13.50\nItem3: $3.99", "output": "def items_and_prices(item1, item2, item3):\n    switch = {\n    'item1': item1,\n    'item2': item2,\n    'item3': item3\n    }\n    for key, value in switch.items():\n        print(key + \": \" + str(value))\n\nitems_and_prices(25.00, 13.50, 3.99)", "category": "Python"}, {"instruction": "Write a function to calculate median of array elements", "input": "", "output": "def get_median(arr):\n    sorted_arr = sorted(arr)\n    length = len(sorted_arr)\n    if length % 2 == 0:\n        median1 = sorted_arr[int(length/2) - 1]\n        median2 = sorted_arr[int(length/2)]\n        median = (median1 + median2) / 2\n    else:\n        median = sorted_arr[int((length-1)/2)]\n    return median", "category": "Python"}, {"instruction": "Write a Python program that prints out the magnitude of the three-dimensional vector with the following components: (x, y, z).", "input": "(1, 2, 3)", "output": "import math\n\ndef magnitude(x, y, z):\n    return math.sqrt(x * x + y * y + z * z)\n\nprint(magnitude(1, 2, 3))", "category": "Python"}, {"instruction": "Generate a while loop in python to find out the sum of first 5 even numbers.", "input": "", "output": "i = 2\nsum = 0\n\nwhile i < 10:\n    sum += i\n    i += 2\n\nprint(\"The sum of first 5 even numbers is: \", sum)", "category": "Python"}, {"instruction": "Design a user interface for a book library application.", "input": "", "output": "The user interface should include a search bar to search for books, a list of books with details such as title, author, year published, and a button to select a book and checkout. Additionally, it should include a navigation header with various sections such as 'My Books', 'Favorites', 'Recommendations' and 'Account Settings'.", "category": "Python"}, {"instruction": "Given a list of strings, write a program to return a new list of all strings which have length greater than 4 in Python.", "input": "lst = ['cat', 'dog', 'apple', 'banana']", "output": "new_lst = [x for x in lst if len(x) > 4] # ['apple', 'banana']", "category": "Python"}, {"instruction": "Count the number of occurrences of a given string in another string in Python.", "input": "string1 = 'A quick brown fox jumps over the lazy dog.'\nstring2 = 'dog'", "output": "string1.count(string2) # 1", "category": "Python"}, {"instruction": "Write an algorithm to find the missing number in an array of n consecutive integers in Python.", "input": "arr = [1, 2, 3, 5, 6, 7, 8]", "output": "def find_missing_num(arr):\n    missing = 0\n    for i in range(arr[0], arr[-1] + 1):\n        if i not in arr:\n            missing = i\n    return missing  # 4", "category": "Python"}, {"instruction": "Create a dictionary in Python whose keys are the integers from 1 to 10 and whose values are the squares of the keys.", "input": "", "output": "d = {i: i*i for i in range(1, 11)} # {1:1, 2:4, etc.}", "category": "Python"}, {"instruction": "In Python, how could you print a list from the last element to the first element?", "input": "", "output": "for element in reversed(my_list):\n    print(element)", "category": "Python"}, {"instruction": "Construct a Python class to save details of student.", "input": "", "output": "class Student():\n    def __init__(self, name, age, year):\n        self.name = name\n        self.age = age\n        self.year = year\n  \n    def get_name(self):\n        return self.name\n  \n    def get_age(self):\n        return self.age\n  \n    def get_year(self):\n        return self.year", "category": "Python"}, {"instruction": "Develop a function in Python to filter out all negative numbers in a given list.", "input": "[2, 3, -1, 4, -5, 6]", "output": "def filter_negative_numbers(nums):\n    # return only positive numbers\n    return [num for num in nums if num >= 0]\n\nprint(filter_negative_numbers([2, 3, -1, 4, -5, 6]))", "category": "Python"}, {"instruction": "Change the following code to use the ternary operator.", "input": "def compare_num(a, b):\n    if a < b:\n        return -1\n    elif a == b:\n        return 0\n    else:\n        return 1", "output": "def compare_num(a, b):\n    return -1 if a < b else 0 if a == b else 1", "category": "Python"}, {"instruction": "Describe a sorting algorithm that works by putting an algorithm that works by putting elements in the right place.", "input": "", "output": "Insertion sort is an in-place comparison sort algorithm that works by iterating through the input array, removing one element at a time and inserting it in the correct position in the sorted array. It is a comparison-based algorithm that blocks an element from its position until it finds the correct location for it in the sorted array by comparing with adjacent element and shifting it until the correct position is found.", "category": "Python"}, {"instruction": "Recreate this nested for loop in a single line of code.", "input": "Final_list = []\nfor i in range(10):\n    for j in range(10):\n        Final_list.append(i+j)", "output": "Final_list = [i+j for i in range(10) for j in range(10)]", "category": "Python"}, {"instruction": "Create a class in python to store a collection of words and their frequency count.", "input": "", "output": "class FreqCollection(object):\n\n    def __init__(self):\n        self.words = {}\n\n    def add_word(self, word):\n        if word in self.words:\n            self.words[word] += 1\n        else:\n            self.words[word] = 1\n\n    def get_word_freq(self, word):\n        if word in self.words:\n            return self.words[word]\n        return 0", "category": "Python"}, {"instruction": "Explain why using \"For\" loops can be a better choice than using \"While\" loops in Python.", "input": "", "output": "For loops are better than while loops in Python because they provide a clearer syntax and are easier to debug due to their predictable and structured behavior. For loops are also more efficient than while loops since they don't require explicit initialization and condition checking, while while loops need to check if a condition is true on each iteration. This makes for loops faster and more memory-efficient, as it requires fewer operations compared to while loops.", "category": "Python"}, {"instruction": "Create a method to find all valid IP addresses that can be formed using a given string.", "input": "string = \"25525511135\"", "output": "def find_all_valid_ip_addresses(string):\n    valid_ips = []\n    for i in range(1,4):\n        for j in range(1,4):\n            for k in range(1,4):\n                if i+j+k == len(string):\n                    ip_string = string[:i]+\".\"+string[i:i+j]+\".\"+string[i+j:i+j+k]+\".\"+string[i+j+k:]\n                    if is_valid_ip_address(ip_string):\n                        valid_ips.append(ip_string)\n    return valid_ips\n\ndef is_valid_ip_address(ip_string):\n    nums = ip_string.split(\".\")\n    for num in nums:\n        if (int(num) < 0 or int(num) > 255):\n            return False\n    return True", "category": "Python"}, {"instruction": "How would you write a function to find the highest frequency character in a string?", "input": "string = \"Hello world!\"", "output": "def find_highest_freq_char(string):\n    counts = {}\n    max_freq_char = \"\"\n    max_freq = 0\n    for ch in string:\n        counts[ch] = counts.get(ch, 0) + 1\n        if counts[ch] > max_freq:\n            max_freq = counts[ch]\n            max_freq_char = ch\n    return max_freq_char", "category": "Python"}, {"instruction": "Help complete the implementation of the following function", "input": "def true_false_sum(x):\n    true_sum = 0\n    false_sum = 0\n    for i in range(x):\n        if x[i] == booleanTrue:\n            *\n    return true_sum, false_sum", "output": "def true_false_sum(x):\n    true_sum = 0\n    false_sum = 0\n    for i in range(x):\n        if x[i] == booleanTrue:\n            true_sum += 1\n        else:\n            false_sum += 1\n    return true_sum, false_sum", "category": "Python"}, {"instruction": "Implement a linear search in a list.", "input": "list = [1, 5, 9, 10]", "output": "def linear_search(list, key):\n    for index, value in enumerate(list):\n        if value == key:\n            return index\n    return -1", "category": "Python"}, {"instruction": "Generate a python class for calculating prime numbers up to n.", "input": "n = 10", "output": "class PrimeCalculator:\n    def __init__(self, n):\n        self.n = n\n    \n    def get_primes(self):\n        primes = []\n        for number in range(2, self.n+1):\n            is_prime = True\n            for divisor in range(2, number):\n                if number % divisor == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(number)\n        return primes", "category": "Python"}, {"instruction": "Create a function to calculate Fibonacci sequence number based on the index of the number.", "input": "index = 6", "output": "def calc_fibonacci_number(index):\n    if index == 0 or index == 1:\n        return index\n    first_num = 0\n    second_num = 1\n    for i in range(2, index+1):\n        next_num = first_num + second_num\n        first_num, second_num = second_num, next_num\n    return second_num", "category": "Python"}, {"instruction": "How would you write a function to find the mode in an array of numbers?", "input": "nums = [2, 3, 4, 5, 5, 6, 7, 8]", "output": "def find_mode(nums):\n    mode = 0\n    max_occurrence = 0\n    for num in nums:\n        occurrences = nums.count(num)\n        if occurrences > max_occurrence:\n            max_occurrence = occurrences\n            mode = num\n    return mode", "category": "Python"}, {"instruction": "Create a method to compute the sum of squares of numbers from 0 up to n.", "input": "n = 4", "output": "def sum_of_squares(n):\n    total_sum = 0\n    for i in range(n + 1):\n        total_sum += i ** 2\n    return total_sum", "category": "Python"}, {"instruction": "Write a function that, given a string, returns a dictionary of all the characters in the string and their respective frequencies.", "input": "text = \"Hello World\"", "output": "def letter_frequency(text):\n    d = {}\n    for char in text:\n        if char not in d:\n            d[char] = 1\n        else:\n            d[char] += 1\n    return d\n\nprint(letter_frequency(text))", "category": "Python"}, {"instruction": "Implement a function in Python that prints out the grade for a student, given their marks in a particular subject.", "input": "marks = 90", "output": "def get_grade(marks):\n    if marks>=90:\n        return \"A\"\n    elif marks>=80 and marks<90:\n        return \"B\"\n    elif marks>=70 and marks<80:\n        return \"C\"\n    elif marks>=60 and marks<70:\n        return \"D\"\n    else:\n        return \"F\"\n\nprint(get_grade(marks))", "category": "Python"}, {"instruction": "Write a Python program to delete a given key from a dictionary.", "input": "", "output": "def delete_key(d, key):\n if key in d:\n del d[key]\n\nd = {'a':1, 'b':2}\ndelete_key(d, 'a')", "category": "Python"}, {"instruction": "Write a Python function to calculate the sum of the areas of a given list of circles, where each circle is defined as a dictionary containing 'radius' and 'x' as keys.", "input": "[{'radius': 3, 'x': 5}, {'radius': 4, 'x': 7}, {'radius': 5, 'x': 9}]", "output": "def sum_areas(circles):\n total = 0\n for circle in circles:\n area = 3.14 * circle['radius'] ** 2\n total += area\n return total", "category": "Python"}, {"instruction": "Create a Python program that takes a comma-separated string and outputs a dictionary of words and the frequency of their occurrences.", "input": "apple, banana, apple, orange", "output": "def get_word_frequency(string):\n words = string.split(', ')\n frequencies = {}\n for word in words:\n if word in frequencies:\n frequencies[word] += 1\n else:\n frequencies[word] = 1\n return frequencies", "category": "Python"}, {"instruction": "Using the given code, write a function that finds the highest value in the array.", "input": "array = [5, 2, 8, 7, 1]", "output": "def find_largest(array):\n    largest = array[0] \n    for x in array:\n        if x > largest: \n            largest = x\n\n    return largest", "category": "Python"}, {"instruction": "Iterate through the given array and print the even numbers.", "input": "array = [1, 2, 3, 4, 5, 6]", "output": "for x in array:\n    if x % 2 == 0: \n        print(x)", "category": "Python"}, {"instruction": "Visualize the given data using a bar chart.", "input": "data = [['January', 10], ['February', 15], ['March', 20], ['April', 17]]", "output": "import matplotlib.pyplot as plt\n\nmonths = [x[0] for x in data]\nvalues = [x[1] for x in data]\n\nplt.bar(months, values)\nplt.xlabel(\"Month\") \nplt.ylabel(\"Number\") \nplt.show()", "category": "Python"}, {"instruction": "Using the given code, construct a json request payload.", "input": "data = {\n    \"name\": \"John Doe\",\n    \"age\": 30\n}", "output": "import json\n\nrequest_payload = json.dumps(data)", "category": "Python"}, {"instruction": "Write a function that returns 'true' if the number is an even number, and 'false' otherwise.", "input": "", "output": "def is_even(num): \n    if(num % 2 == 0): \n        return True\n    else: \n        return False", "category": "Python"}, {"instruction": "Reverse a linked list.", "input": "", "output": "def reverseList(node): \n    prev = None\n    while (node != None): \n        next = node.next\n        node.next = prev \n        prev = node  \n        node = next\n    return prev", "category": "Python"}, {"instruction": "Implement a priority queue.", "input": "", "output": "class PriorityQueue(): \n   \n    def __init__(self): \n        self.elements = [] \n  \n    def is_empty(self): \n        return len(self.elements) == 0 \n  \n    def enqueue(self, item, priority): \n        self.elements.append((item, priority)) \n  \n    def dequeue(self): \n        max_priority_index = 0\n        for index, element in enumerate(self.elements): \n            if element[1] > self.elements[max_priority_index][1]: \n                max_priority_index = index \n        element = self.elements[max_priority_index] \n        del self.elements[max_priority_index] \n        return element", "category": "Python"}, {"instruction": "Given a binary tree, find the height of the tree.", "input": "", "output": "def maxDepth(self, root: TreeNode):\n    if root is None:\n      return 0\n\n    leftDepth = self.maxDepth(root.left)\n    rightDepth = self.maxDepth(root.right)\n\n    return max(leftDepth, rightDepth) + 1", "category": "Python"}, {"instruction": "Suggest a machine learning model for predicting stock prices.", "input": "", "output": "A possible machine learning model for predicting stock prices is the Long Short-Term Memory (LSTM) Neural Network. This model is widely used for forecasting time-series data, such as stock prices. It is capable of capturing long-term dependencies and has been used successfully to make accurate predictions in many areas.", "category": "Python"}, {"instruction": "Using string functions, capitalize each word in the given sentence.", "input": "sentence = \"python is a programming language\"", "output": "sentence = \"python is a programming language\"\n\n# split the sentence into individual words\nwords = sentence.split(\" \")\n\n# capitalize each word in the sentence\ncapitalized_words = [word.capitalize() for word in words]\n\n# join the words back together\ncapitalized_sentence = \" \".join(capitalized_words)\n\nprint(capitalized_sentence) # prints \"Python Is A Programming Language\"", "category": "Python"}, {"instruction": "Given the following matrix, delete the row or column that contains the least number of elements.", "input": "[[0, 1, 2], \n [3, 4, 5], \n [6, 7, 8]]", "output": "import numpy as np\n\n# Create the matrix\nmatrix = np.array([[0, 1, 2], \n                   [3, 4, 5], \n                   [6, 7, 8]])\n\n# Get the lengths of each row\nrow_lengths = [len(row) for row in matrix]\n\n# Delete the row with the minimum length and print the result\ndel matrix[row_lengths.index(min(row_lengths))]\nprint(matrix) # prints [[0 1 2] \n                  #        [3 4 5] \n                  #        [6 7 8]]", "category": "Python"}, {"instruction": "Write a Python program to calculate the sum of two numbers entered by the user.", "input": "", "output": "num1 = float(input(\"Enter first number: \"))\nnum2 = float(input(\"Enter second number: \"))\n\n# Adding two numbers\nsum = num1 + num2\n\n# Display the sum\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))", "category": "Python"}, {"instruction": "Develop a program that picks a random item from a given list of strings.", "input": "words = [\"Python\", \"programming\", \"language\"]", "output": "import random\ndef random_word(words):\n return random.choice(words)\n \nprint(random_word(words))", "category": "Python"}, {"instruction": "Code a function that takes an array and counts the odd numbers in it.", "input": "input_array = [1, 2, 3, 4, 5]", "output": "def countOddNumbers(input_array): \n count = 0\n for num in input_array:\n  if num % 2 != 0: \n   count += 1\n return count\n\nprint(countOddNumbers(input_array))", "category": "Python"}, {"instruction": "Program to swap all even and odd elements in a given array.", "input": "my_list = [1, 2, 3, 4, 5, 6, 7, 8]", "output": "def swap_even_and_odd(my_list):\n for i in range(len(my_list)-1):\n if i % 2 == 0 and my_list[i] % 2 != 0:\n my_list[i], my_list[i+1] = my_list[i+1], my_list[i]\n return my_list\n\nprint(swap_even_and_odd(my_list))", "category": "Python"}, {"instruction": "You need to code a program that prints out the nth Fibonacci number.", "input": "n=10", "output": "def Fibonacci(n): \n if n<0: \n print(\"Incorrect input\") \n elif n==1: \n return 0 \n elif n==2: \n return 1 \n else: \n return Fibonacci(n-1)+Fibonacci(n-2) \n\nprint(Fibonacci(10))", "category": "Python"}, {"instruction": "Write a Python program to fill a matrix with random numbers.", "input": "rows = 4 \ncolumns = 3", "output": "matrix = [[randint(0, 99) for x in range(columns)] for y in range(rows)]", "category": "Python"}, {"instruction": "Describe succinctly the benefits of using a database for storing Big Data.", "input": "", "output": "Using a database for storing Big Data can provide many benefits, such as scalability, improved data consistency and integrity, improved data security, and decreased maintenance costs. Database technologies also facilitate the ability to perform various analytics techniques, such as mining and predictive analytics, on large datasets.", "category": "Python"}, {"instruction": "Create a function that takes two strings and out put the number of similar characters in both strings.", "input": "String 1: coding\nString 2: debugging", "output": "def char_count(str1, str2): \n    count = 0\n    for i in str1:\n        if i in str2: \n            count = count + 1\n    return count", "category": "Python"}, {"instruction": "Implement an algorithm with Big O notation of O(n).", "input": "", "output": "def O_n(items):\n  n = len(items)\n  for i in range(n):\n    print (items[i])", "category": "Python"}, {"instruction": "Given a list of integers, write a Python program to create a new list that contains the square of every element in the original list.", "input": "", "output": "def square_numbers(nums):\n  return [num**2 for num in nums]", "category": "Python"}, {"instruction": "Write a class in Python for representing a rectangle. This class should store the length and width of the rectangle, and be able to compute its area.", "input": "", "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n \n    def area(self):\n        return self.length * self.width", "category": "Python"}, {"instruction": "Search a given list for a specific element and return its position.", "input": "list_a = [\"apple\", \"banana\", \"cherry\", \"date\"]\nelement = \"date", "output": "def search_list(list_a, element):\n    for i in range(len(list_a)):\n        if list_a[i]==element:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Edit this piece of Python code to make sure that the decimal is rounded off correctly.", "input": "a = round(0.54678, 2)", "output": "a = round(0.54678, 2)  # rounds off to 2 decimal places", "category": "Python"}, {"instruction": "Explain what a stack overflow is and how to try to avoid it.", "input": "", "output": "A stack overflow is an error condition in which the program attempts to use more memory space than the stack can hold. It occurs when a program pushes more data onto the stack than the maximum limit (e.g., when a recursive function recurses too many times), or when the recursive calls are too deeply nested. To avoid stack overflows, you should use a modular approach when writing code, set realistic limits for the depth of recursion, and opt for an iterative solution rather than a recursive one whenever possible.", "category": "Python"}, {"instruction": "Write code to convert a given number expressed in hexidecimal representation to binary.", "input": "", "output": "def hex_to_bin(hex_str):\n    #validating the input\n    if hex_str[-1] not in \"0123456789ABCDEF\":\n        return \"Invalid Hexadecimal!!\"\n     \n    #using bin() function to get the binary value  \n    return bin(int(hex_str, 16))[2:]", "category": "Python"}, {"instruction": "Suggest a cleaner and more concise way to implement the following code snippet.", "input": "def find_matching_number(nums, target):\n  for num in nums:\n    if num == target:\n      return True\n  return False", "output": "def find_matching_number(nums, target):\n  return target in nums", "category": "Python"}, {"instruction": "Implement a function that takes 2 numbers as parameters and returns the greatest common divisor of both numbers.", "input": "a = 20\nb = 25", "output": "def gcd(a, b): \n  if a == 0: \n    return b \n  return gcd(b % a, a) \n\nprint(gcd(20, 25)) # 5", "category": "Python"}, {"instruction": "Rewrite the following code snippet to use the arcpy module.", "input": "import os\n\nfile_paths = [os.path.join('data', f) for f in os.listdir('data') if f.endswith('.tif')]", "output": "import os\nimport arcpy\n\nfile_paths = [os.path.join('data', f) for f in arcpy.ListRasters('*.tif')]", "category": "Python"}, {"instruction": "Suggest an elegant way to print out a list of numbers without using a loop in Python.", "input": "lst = [1, 2, 3, 4]", "output": "print(*lst) # 1 2 3 4", "category": "Python"}, {"instruction": "Given a Python list, write a program to convert all its numbers to strings.", "input": "lst = [1, 2, 3, 4]", "output": "lst = [str(x) for x in lst]", "category": "Python"}, {"instruction": "Remove the redundancy in the following code and make it more concise.", "input": "def sum_of_lists(lists):\n  result = []\n  for i in range(len(lists)):\n    current_list = lists[i]\n    for j in range(len(current_list)):\n      result.append(current_list[j])\n  return sum(result)", "output": "def sum_of_lists(lists):\n  flattened_list = [item for sublist in lists for item in sublist]\n  return sum(flattened_list)", "category": "Python"}, {"instruction": "Suggest an alternative for the following code snippet which is faster and less memory intensive.", "input": "arr = [2, 3, 5, 7]\nresult = []\nfor i in range(len(arr)):\n  for j in range(i + 1, len(arr)):\n    result.append((arr[i], arr[j]))", "output": "arr = [2, 3, 5, 7]\nresult = [(arr[i],arr[j]) for i in range(len(arr)-1) for j in range(i+1,len(arr))]", "category": "Python"}, {"instruction": "Make a program to return the longest word in a given list of strings.", "input": "input_list = [\"The\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"]", "output": "def find_longest_word(input_list):\n    longest_word = \"\"\n    for i in input_list:\n        if len(i) > len(longest_word):\n            longest_word = i\n    \n    return longest_word", "category": "Python"}, {"instruction": "Write a function to calculate the standard deviation of data points in Python.", "input": "", "output": "def stdev(data):\n    avg = sum(data) / len(data)\n    total = 0\n    for x in data:\n        total += (x - avg) ** 2\n    return (total / (len(data) - 1)) ** 0.5", "category": "Python"}, {"instruction": "Rewrite the following program to make it print out the smallest number in a given list.", "input": "def smallestNumber(numbers):\n    largest = numbers[0]\n    for number in numbers:\n        if largest < number:\n            largest = number\n    return largest", "output": "def smallestNumber(numbers):\n    smallest = numbers[0]\n    for number in numbers:\n        if smallest > number:\n            smallest = number\n    return smallest", "category": "Python"}, {"instruction": "Refactor the code to use a recursive algorithm instead of a loop to find the factorial of a given number.", "input": "", "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "category": "Python"}, {"instruction": "Find and return the longest string in the given array.", "input": "[\"hello\", \"how\", \"are\", \"you\", \"doing\"]", "output": "def longestString(arr):\n    longest_str = ''\n    for s in arr:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "category": "Python"}, {"instruction": "Using numpy, find the mean of array 'arr'.", "input": "arr = [1, 2, 3, 4, 5]", "output": "import numpy as np\nnp.mean(arr)", "category": "Python"}, {"instruction": "Create a class 'Fruit' to define a fruit.", "input": "", "output": "class Fruit:\n    def __init__(self, name, color, weight):\n        self.name = name\n        self.color = color\n        self.weight = weight\n\n    def print_info(self):\n        print(f'Name: {self.name}')\n        print(f'Color: {self.color}')\n        print(f'Weight: {self.weight}')", "category": "Python"}, {"instruction": "Write a function 'play_game' that plays a simple game of rock paper scissors.", "input": "", "output": "def play_game():\n    options = ['rock', 'paper', 'scissors']\n    computer_choice = random.choice(options)\n    user_choice = input('Choose \"rock\", \"paper\", or \"scissors\": ')\n\n    if user_choice == computer_choice:\n        print('It is a tie!')\n    elif user_choice == 'rock':\n        if computer_choice == 'paper':\n            print('Computer wins!')\n        else:\n            print('You win!')\n    elif user_choice == 'paper':\n        if computer_choice == 'scissors':\n            print('Computer wins!')\n        else:\n            print('You win!')\n    elif user_choice == 'scissors':\n        if computer_choice == 'rock':\n            print('Computer wins!')\n        else:\n            print('You win!')", "category": "Python"}, {"instruction": "Create a new array 'b' from array 'a' containing only even numbers.", "input": "a = [1, 2, 3, 4, 5, 6]", "output": "b = [num for num in a if num % 2 == 0]", "category": "Python"}, {"instruction": "Compute the prime numbers between 1 to 10", "input": "", "output": "primes = [2, 3, 5, 7]\n\nfor num in range(1, 11):\n    if num > 1:\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n\nprint(primes)\n\n# Output: [2, 3, 5, 7] (all the prime numbers between 1 to 10)", "category": "Python"}, {"instruction": "You are given a string and asked to find the frequency of each character in the string", "input": "str = \"GPT Model\"", "output": "from collections import Counter \n\ndef char_frequency(str): \n    return Counter(str) \n\nstr = \"GPT Model\"\nprint (char_frequency(str))\n\n# Output: {'G': 1, 'P': 1, 'T': 1, ' ': 1, 'M': 1, 'o': 2, 'd': 1, 'e': 1, 'l': 1}", "category": "Python"}, {"instruction": "You are asked to create an array of three random numbers between 1 to 10", "input": "", "output": "import random\n\nrandom_nums = []\nfor i in range(3):\n    random_nums.append(random.randint(1,10))\n\nprint(random_nums)\n\n# Output: [2, 8, 6] (new set of 3 random numbers)", "category": "Python"}, {"instruction": "Name all the built-in functions in Python", "input": "", "output": "abs(), all(), any(), ascii(), bin(), bool(), bytearray(), calls(), chr(), dir(), divmod(), enumerate(), eval(), filter(), float(), format(), frozenset(), hex(), int(), isinstance(), len(), list(), map(), max(), min(), oct(), open(), ord(), pow(), print(), range(), reversed(), round(), set(), slice(), sorted(), str(), sum(), tuple(), type(), zip()", "category": "Python"}, {"instruction": "From a given list of words, create a new list with only the words that contain the letter 'a'.", "input": "my_list = [\"cat\", \"dog\", \"apple\", \"pear\"]", "output": "new_list = [word for word in my_list if \"a\" in word] # Output: [\"cat\", \"apple\", \"pear\"]", "category": "Python"}, {"instruction": "Explain why the given function will not work as expected.", "input": "def greet(name):\nprint(\"Hello,\" + name)\n\ngreet(\"John\")", "output": "The given function will not work as expected because it does not contain a return statement. The function will print \"Hello, John\", but it will not return anything and thus the result of the function will be None. Additionally, the function will not raise an error, which may lead to confusion. Therefore, it is important to make sure that the function contains a return statement.", "category": "Python"}, {"instruction": "Create a Python script to print the 3rd element in a given list.", "input": "[1,2,3,4,5,6]", "output": "list = [1,2,3,4,5,6]\n\nprint(list[2]) # Output: 3", "category": "Python"}, {"instruction": "Design an algorithm to traverse a tree in level-order.", "input": "", "output": "def traverseLevelOrder(root): \n    if root is None: \n        return\n  \n    # Create an empty queue for level order traversal \n    queue = [] \n  \n    # Enqueue root and initialize height \n    queue.append(root) \n  \n    while (len(queue) > 0): \n        # Print front of queue and remove it from queue \n        node = queue.pop(0) \n        print node.data, \n  \n        # Enqueue left child \n        if node.left is not None: \n            queue.append(node.left) \n  \n        # Enqueue right child \n        if node.right is not None: \n            queue.append(node.right)", "category": "Python"}, {"instruction": "What is the Big-O notation of a given algorithm", "input": "", "output": "Big-O notation is a method of expressing the time complexity of an algorithm. It quotes the upper bound of an algorithm\u2019s running time in terms of a function of the size of the input data. This is useful for determining the efficacy of an algorithm as different inputs of different sizes require different run times from the same algorithm. Big-O notation is typically expressed in terms of the number of operations on the input data, with each scale increasing the complexity exponentially.", "category": "Python"}, {"instruction": "Create a program in Python that takes two strings as input and determines if they are anagrams of each other", "input": "string1=\"listen\";\nstring2=\"silent\";", "output": "def isAnagram(str1, str2): \n\n # convert both strings into lowercase \n str1 = str1.lower()\n str2 = str2.lower()\n  \n # sort both strings \n sortedStr1 = ''.join(sorted(str1)) \n sortedStr2 = ''.join(sorted(str2)) \n  \n # check if sorted strings are equal \n if sortedStr1 == sortedStr2: \n     return True\n else: \n     return False\n\nresult = isAnagram(string1, string2)\nprint(result)", "category": "Python"}, {"instruction": "Explain the concept of recurrence relations in algorithms", "input": "", "output": "A recurrence relation is an equation that defines a sequence of terms in terms of the values of the preceding terms. It is typically used to define a sequence in which each term depends on the values of previous terms. Recurrence relations are used in algorithms and computer programs to recursively calculate a sequence of values. For example, the Fibonacci sequence is a famous sequence whose terms are defined by recurrence relation F_(n+1) = F_n + F_(n-1). This means that each term in that sequence is the sum of the previous two terms.", "category": "Python"}, {"instruction": "Create a for loop in Python that iterates through the list [1,2,3,4,5].", "input": "", "output": "for item in [1,2,3,4,5]:\n    print(item)", "category": "Python"}, {"instruction": "Classify a given string as either a palindrome, a word or a phrase.", "input": "racecar", "output": "def classify_string(string):\n    if string == string[::-1]: \n        return \"Palindrome\"\n    elif \" \" in string:\n        return \"Phrase\"\n    else:\n        return \"Word\"\n\ninput_string = \"racecar\"\nprint(classify_string(input_string)) # Palindrome", "category": "Python"}, {"instruction": "Write a function that returns True if a given number is prime and False if it is not.", "input": "", "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Design a class to hold calendar date-related information.", "input": "", "output": "class CalendarDate:\n    def __init__(self, day, month, year):\n        self.day = day\n        self.month = month\n        self.year = year\n\n    def get_date(self):\n        return self.day, self.month, self.year", "category": "Python"}, {"instruction": "Using an existing loop, create code to calculate the sum of all odd numbers up to a given number.", "input": "", "output": "def sum_odd_numbers(num):\n    result = 0\n    for i in range(1, num+1):\n        if i % 2 != 0:\n            result += i\n    return result", "category": "Python"}, {"instruction": "Write code to calculate statistical measures such as Standard Deviation, Median and Mean from a given set of numbers.", "input": "array = [2, 4, 8, 7, 5]", "output": "import statistics\n\nmean = statistics.mean(array)\nmedian = statistics.median(array)\nstd_dev = statistics.stdev(array)", "category": "Python"}, {"instruction": "Rewrite the following code snippet to improve readability.", "input": "def f(x):\n  return [x * i for i in range(1, x + 1)]", "output": "def f(x):\n  numbers = []\n  for i in range(1, x + 1):\n    numbers.append(x * i)\n  return numbers", "category": "Python"}, {"instruction": "Use the input data to create a bar chart.", "input": "Data: [(\"Apple\", 20), (\"Samsung\", 16), (\"Google\", 11), (\"Sony\", 14)]", "output": "import matplotlib.pyplot as plt\n\nitems = [x[0] for x in data]\nvalues = [x[1] for x in data]\n\nplt.bar(items, values)\nplt.show()", "category": "Python"}, {"instruction": "Create an API endpoint in Python with Flask that requires authentication.", "input": "users = {\"John\": \"123456\", \"Jenny\": \"456789\"}", "output": "from flask import Flask, request\n\napp = Flask(__name__)\n\nusers = {\"John\": \"123456\", \"Jenny\": \"456789\"}\n\n@app.route('/', methods=['GET'])\ndef root():\n    if request.authorization and request.authorization.username in users \\\n            and request.authorization.password == users[request.authorization.username]:\n        return 'Authentication successful!' \n    else:\n        return 'Authentication failed!'\n        \nif __name__ == '__main__':\n    app.run(debug=True)", "category": "Python"}, {"instruction": "Calculate the percentage of numbers in an array that is greater than 5.", "input": "[3, 4, 7, 8, 9, 11]", "output": "def calc_perc(arr):\n  count = 0\n  for num in arr:\n    if num > 5:\n      count +=1\n  return count/len(arr) *100\n\ncalc_perc([3, 4, 7, 8, 9, 11])", "category": "Python"}, {"instruction": "Write a Python code to find the largest and the second largest numbers in a list.", "input": "List: [2, 9, 12, 45, 10, 20]", "output": "def getLargestTwo(l):\n    first_largest = second_largest = float('-inf')\n    for num in l:\n        if num > first_largest:\n            second_largest = first_largest\n            first_largest = num\n        elif num > second_largest and num != first_largest:\n            second_largest = num\n    return (first_largest, second_largest)", "category": "Python"}, {"instruction": "Write a code snippet to create an array filled with alternating 0s and 1s.", "input": "Array size: 5", "output": "def createAlternateArray(n):\n    result = [False] * n\n    for i in range(n):\n        if i % 2 == 0:\n            result[i] = True\n    return result", "category": "Python"}, {"instruction": "Create a logic using Python that checks if a string contains only alphabetical characters or not.", "input": "", "output": "def checkAlphabet(string): \n\n   alphabets = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\n   for i in string: \n      if i not in alphabets: \n         return False\n   return True", "category": "Python"}, {"instruction": "What are the reachable, non-reachable and partially reachable states in a DFA?", "input": "", "output": "In a Deterministic Finite Automaton (DFA), there are three types of states: reachable states, non-reachable states, and partially reachable states. Reachable states are those states which can be reached from the start state. Non-reachable states are those which can never be reached from the start state. Partially reachable states are those that can only be reached from the start state through some other states.", "category": "Python"}, {"instruction": "Print out the sum of even numbers from the following range.", "input": "range(1,10)", "output": "sum = 0\nfor num in range(1,10):\n    if num % 2 == 0:\n        sum += num\nprint(sum) // Output: 20", "category": "Python"}, {"instruction": "Generate code to return a fibonacci sequence up to n elements.", "input": "n = 10", "output": "def Fibonacci(n): \n  \n    #taking 1st two fibonacci nubers as 0 and 1 \n    FibArray = [0, 1] \n      \n    while len(FibArray) < n: \n        next_fib = FibArray[-1] + FibArray[-2] \n        FibArray.append(next_fib) \n          \n    return FibArray \n    \n# Driver Code \nprint(Fibonacci(n))", "category": "Python"}, {"instruction": "Create an algorithm that computes the sum of its maximum K (given) digits", "input": "arr = [1, 2, 3, 4, 5], K = 3", "output": "def max_sum_digits(arr, K):\n    max_sum = 0\n    arr.sort()\n    for i in range(K):\n        max_sum += arr[len(arr)-1-i]\n    return max_sum", "category": "Python"}, {"instruction": "Design a GUI app to welcome the user and output a message", "input": "", "output": "import tkinter as tk \n\nwindow = tk.Tk()\nwindow.title(\"Welcome App\") \n\nframe = tk.Frame(window) \nframe.grid(row=0, column=0) \n\nlabel = tk.Label(frame, text=\"Welcome\", font=(\"Arial\", 40))\nlabel.grid(row=0, column=0) \n\nmessage = tk.Message(frame, text=\"Hello user!\", width=1000)\nmessage.grid(row=2, column=0)  \n\nwindow.mainloop()", "category": "Python"}, {"instruction": "Design an algorithm for finding the frequency of occurrence of each character in a given string", "input": "str = \"hello world\"", "output": "def char_frequency(str):\n    freq = {}\n    for char in str:\n        if char in freq: \n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq", "category": "Python"}, {"instruction": "Define a function that takes a string as input and returns true if it is a valid IP address.", "input": "ip_str = \"127.0.0.1\"", "output": "def is_valid_ip(ip_str):\n    ip_addr = ip_str.split('.')\n\n    if len(ip_addr) != 4:\n        return False\n    for item in ip_addr:\n        if not 0 <= int(item) <= 255:\n            return False\n    return True", "category": "Python"}, {"instruction": "Perform a binary search on the following list of integers: [0, 1, 2, 3, 4, 5, 6, 7, 8].", "input": "", "output": "def binary_search(nums, target):\n  low = 0\n  high = len(nums) - 1\n\n  while low <= high:\n    mid = (low + high) // 2\n    if target == nums[mid]:\n      return mid\n    elif target < nums[mid]:\n      high = mid - 1\n    else:\n      low = mid + 1\n  \n  return -1", "category": "Python"}, {"instruction": "Given a hash table, write a program to print the keys and values in sequence.", "input": "data = {\n    \"Name\": \"John\",\n    \"Age\": 25,\n    \"Country\": \"USA\"\n}", "output": "def print_hash_table(data):\n    for key in data:\n        print(key + \": \" + str(data[key]))", "category": "Python"}, {"instruction": "Re-implement this Ruby code in Python", "input": "def fibonacci(n)\n  return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2)\nend", "output": "def fibonacci(n): \n    if n < 2: \n        return n \n    return fibonacci(n - 1) + fibonacci(n - 2) \n  \nprint(fibonacci(7)) # Outputs: 13", "category": "Python"}, {"instruction": "Write a function that reduces an array of numbers to a single number.", "input": "[2, 4, 6, 8, 10]", "output": "def reduceArray(arr):\n    if not arr:\n        return 0\n    result = arr[0]\n    for num in arr[1:]:\n        result = result + num\n    return result\n\nprint(reduceArray([2, 4, 6, 8, 10])) # Outputs: 30", "category": "Python"}, {"instruction": "Write an algorithm to convert a given 2D matrix into a 1D array.", "input": "matrix = [[1,2,3],[4,5,6]]", "output": "def convert_matrix_to_array(matrix):\n    res = []\n    for row in matrix:\n        for element in row:\n            res.append(element)\n    return res\n\n# Output: [1,2,3,4,5,6]", "category": "Python"}, {"instruction": "Create a method that deletes all the empty elements from a given array of strings.", "input": "arr = [\"a\", \"\", \"b\", \"\", \"c\"]", "output": "def delete_empty_elements(arr):\n    return [e for e in arr if e]\n\n# Output: [\"a\", \"b\", \"c\"]", "category": "Python"}, {"instruction": "Given a string of integers, create a method to generate an array in which each integer is added to the sum of its neighbors.", "input": "s = \"3456\"", "output": "def generate_sum_array(s):\n    res = [int(s[0])]\n    for i in range(1, len(s)):\n        res.append(int(s[i-1]) + int(s[i]))\n    res.append(int(s[-1]))\n    return res\n\n# Output: [3, 8, 11, 13]", "category": "Python"}, {"instruction": "In Python, write a script that prints out the elements of a list.", "input": "list = [1, 2, 3, 4, 5]", "output": "list = [1, 2, 3, 4, 5]\n\nfor x in list:\n    print(x)", "category": "Python"}, {"instruction": "Design a network for sending data from a server to a client.", "input": "", "output": "The network should include a server to send data, and a client to receive data. The server should have a dedicated IP address and listening port to receive instructions from the client, such as HTTP requests. The client should have a unique IP address, and should connect to the server to request data. Both the client and server should have the necessary network infrastructure for data transmission, such as routers, gateways, and firewalls.", "category": "Python"}, {"instruction": "Describe the data structures used to implement a stack data structure.", "input": "", "output": "Data structures used to implement a stack data structure are as follows - linked lists, arrays, dynamic arrays, and resizable arrays. Linked lists are used when the stack size needs to change frequently as this ensures that space is not wasted. Whereas, for a fixed stack size, arrays can be used. A dynamic array is an array with a pre-allocated capacity, so if the stack size exceeds the capacity of the array then it will resize itself to accommodate the new stack size. Lastly, resizable arrays adjust the capacity automatically when new items are added or existing items are removed.", "category": "Python"}, {"instruction": "Create a functional programming paradigm in Python.", "input": "", "output": "def functional_programming(lst):\n    return list(map(lambda x : x*2, filter(lambda x : x % 2 == 0, lst)))\n \nprint(functional_programming([1,2,3,4,5]))      \n# Output: [4, 8]", "category": "Python"}, {"instruction": "How does the Fibonacci number sequence work?", "input": "", "output": "The Fibonacci sequence is a sequence of numbers where each number in the sequence is the sum of the two numbers preceding it. The first two numbers in the sequence are 0 and 1. The sequence starts with 0 and 1 and continues by adding the two previous numbers to get the next number in the sequence. For example, the first six numbers in the Fibonacci sequence are 0, 1, 1, 2, 3, 5. The sequence can be represented as 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, and so on.", "category": "Python"}, {"instruction": "Given a data table, write a function to select the columns.", "input": "table = [['Name', 'Age', 'Score', 'City'],\n         ['Alice', '21', '85', 'New York'],\n         ['Bob', '23', '92', 'Los Angeles'],\n         ['Cathy', '20', '73', 'London']]", "output": "def select_columns(table, columns):\n    output = [table[0]] + [[row[i] for i in columns] for row in table[1:]]\n    return output", "category": "Python"}, {"instruction": "Explain the differences between Bitwise AND, OR, and XOR operations.", "input": "", "output": "The bitwise AND (&) operation returns a 1 in a given bit position if both bits being compared are equal to 1. The bitwise OR (|) operation returns a 1 in a given bit position if either or both of the bits being compared are equal to 1. The bitwise XOR (^) operation produces a result of 1 if the two bits being compared are different and 0 if both bits are the same.", "category": "Python"}, {"instruction": "Find the length of the longest common subsequence in the following two strings: \"ABCBDAB\" and \"BDCABA\".", "input": "", "output": "def longest_common_subsequence(str1, str2):\n  n = len(str1)\n  m = len(str2)\n  \n  dp = [[0] * (m+1) for _ in range(n+1)]\n\n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if str1[i-1] == str2[j-1]:\n        dp[i][j] = 1 + dp[i-1][j-1]\n      else:\n        dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n  \n  return dp[n][m]", "category": "Python"}, {"instruction": "Create a one line solution in Python to remove all vowels from a string.", "input": "", "output": "my_string = 'This is a sentence without any vowels'\nnew_string = ''.join([i for i in my_string if i not in 'aeiouAEIOU']) \nprint(new_string)", "category": "Python"}, {"instruction": "Parse the JSON data stored in a variable 'data' and print out the value of the key 'name'.", "input": "data = {\n \"name\": \"John\", \n \"age\": 30,\n \"status\": \"single\"\n}", "output": "import json\n\ndata = {\n \"name\": \"John\", \n \"age\": 30,\n \"status\": \"single\"\n}\n\ndata =json.loads(data)\nprint(data['name'])", "category": "Python"}]
[{"instruction": "Write a replace method for a string class which replaces the given string with a given set of characters.", "input": "string = \"Hello World!\"\nreplace_with = \"Greetings!\"", "output": "def replace(self, replace_with):\n    new_string = \"\"\n    for char in self:\n        if char == \" \":\n            new_string += replace_with\n        else:\n            new_string += char\n    return new_string", "category": "Python"}, {"instruction": "Describe how language models can be used in natural language processing.", "input": "", "output": "Language models are used in natural language processing to enable machines to understand and generate natural language. Language models assign a probability to a sequence of natural language words to improve the accuracy of predictions in language processing tasks. They are used for automatic speech recognition, machine translation, text summarization, essay grading, and natural language understanding.", "category": "Python"}, {"instruction": "Create a class in Python called Math that can calculate the average of two numbers.", "input": "", "output": "class Math:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n \n    def average(self):\n        return (self.x + self.y) / 2", "category": "Python"}, {"instruction": "Construct a for loop in Python to output the numbers from 1 to 5.", "input": "", "output": "for i in range(1,6):\n  print(i)", "category": "Python"}, {"instruction": "Generate the class diagrams for a System class and a Database class.", "input": "<nopinput>", "output": "System Class Diagram: \n\n[![system class diagram](https://i.ibb.co/MfXN7xN/system-class-diagram.png)]\n\nDatabase Class Diagram:[![database class diagram](https://i.ibb.co/6WHWKV8/database-class-diagram.png)]", "category": "Python"}, {"instruction": "Convert a given string into Pig Latin.", "input": "string = \"Hello\"", "output": "def pig_latin(string):\n    vowels = \"aeiou\"\n    if string[0].lower() in vowels:\n        return string+\"way\"\n    else:\n        return string[1:]+string[0]+\"ay\"", "category": "Python"}, {"instruction": "Print all permutations of an input array.", "input": "array = [1,2,3]", "output": "def permutations(array):\n    if len(array) == 0:\n        return\n    if len(array) == 1:\n        return [array]\n    perms = []\n    for i in range(len(array)):\n        elem = array[i]\n        rem_perms = permutations(array[:i] + array[i+1:])\n        for perm in rem_perms:\n            perms.append([elem] + perm)\n    return perms", "category": "Python"}, {"instruction": "Generate a list of length n containing all numbers from 1 to n.", "input": "", "output": "def gen_list(n):\n    list = []\n    for i in range(1, n+1):\n        list.append(i)\n    return list", "category": "Python"}, {"instruction": "Create a loop that prints out the even numbers from the given list.", "input": "lst = [1, 2, 3, 4, 5]", "output": "for i in lst:\n  if i % 2 == 0:\n    print(i)", "category": "Python"}, {"instruction": "Given a dictionary of words and a set of characters, how would you find the longest word which can be constructed from the given set of characters?", "input": "", "output": "One way to find the longest word which can be constructed from a set of characters is by using a trie data structure. To do this, first create the trie from the given dictionary of words, then traverse it to look for the longest word which can be constructed from the given set of characters. At each node, check if the character at the current node is present in the given set, and if yes, traverse down. If no, then backtrack until a valid character is found.", "category": "Python"}, {"instruction": "Write a code to generate a random 7 digit phone number.", "input": "", "output": "\"\"\"\nWrite a code to generate a random 7 digit phone number.\n\"\"\"\n\nimport random\n\ndef generate_random_phone_number():\n    # create a list of digits\n    lst = [str(i) for i in range(10)]\n    \n    # randomly select one digit\n    random.shuffle(lst)\n    \n    # generate a 7-digit phone number\n    phone_number = ''.join(lst[:7])\n    \n    return phone_number\n    \nif __name__ == '__main__':\n    print(generate_random_phone_number()) # Output: e.g. 8247036", "category": "Python"}, {"instruction": "What is a Python tuple?", "input": "", "output": "A Python tuple is an immutable sequence of objects which is ordered and indexed. Tuples are usually used to store collections of data that are related, but may be of different data types. Tuples are used instead of lists because they are more memory efficient and can be used as elements of sets and as keys in dictionaries.", "category": "Python"}, {"instruction": "Create a function to check whether a number is a prime number using the Sieve of Eratosthenes algorithm.", "input": "", "output": "\"\"\"\nCreate a function to check whether a number is a prime number using the Sieve of Eratosthenes algorithm.\n\"\"\"\n\ndef is_prime(n): \n    if n <= 1: \n        return False\n  \n    # create a list of all numbers from 0 to n\n    nums = [True for _ in range(n + 1)] \n  \n    p = 2\n    while (p * p <= n): \n        # If prime[p] is not changed, it is a prime \n        if nums[p] is True: \n\n            # Update all multiples of p \n            for i in range(p * 2, n + 1, p): \n                nums[i] = False\n        p += 1\n\n    return nums[n]\n\nif __name__ == '__main__':\n    n = 37\n    print(is_prime(n)) # Output: True", "category": "Python"}, {"instruction": "Use the Pandas library to find the mean rental price for a property in a particular city in the US.", "input": "The property is located in Miami, Florida.", "output": "\"\"\"\nFind the mean rental price for a property in Miami, Florida using the Pandas library.\n\"\"\"\n\nimport pandas as pd\n\n# read the dataset\ndf = pd.read_csv('data.csv')\n\n# filter the data by city\ndf_miami = df[df['city'] == 'Miami, Florida']\n\n# calculate the mean rental price\nmean_price = df_miami['rental_price'].mean()\n\n# print the result\nprint(f'The mean rental price in Miami, Florida is ${mean_price:.2f}')", "category": "Python"}, {"instruction": "Use the following JSON data to output information about all the users in the array.", "input": "[\n    {\n        \"name\": \"Peter\",\n        \"age\": 25\n    },\n    {\n        \"name\": \"Theresa\",\n        \"age\": 30\n    },\n    {\n        \"name\": \"John\",\n        \"age\": 22\n    }\n]", "output": "import json\n\nusers = [\n    {\n        \"name\": \"Peter\",\n        \"age\": 25\n    },\n    {\n        \"name\": \"Theresa\",\n        \"age\": 30\n    },\n    {\n        \"name\": \"John\",\n        \"age\": 22\n    }\n]\n\nfor user in users:\n    print(\"Name: \"+ user[\"name\"] + \", Age: \" + str(user[\"age\"]))", "category": "Python"}, {"instruction": "Write a function in Python which takes an array of integers and returns a list of all distinct pairs whose sum is equal to a given value.", "input": "arr = [1, 2, 3, 4, 5]\nvalue = 7", "output": "def pairs_with_sum(arr, value):\n    pairs = []\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if (arr[i] + arr[j] == value):\n                pairs.append((arr[i], arr[j]))\n    return pairs", "category": "Python"}, {"instruction": "Answer this logic programming question: What is the transitive closure of the binary relation \"less than\" on the set of integers?", "input": "", "output": "The transitive closure of the 'less than' relation on the set of integers is defined as: if (x,y) belongs to the set of integers, then for all n, x < n and n < y implies x < y.", "category": "Python"}, {"instruction": "How can you convert a number from one base to another?", "input": "", "output": "def convert_base(num, from_base, to_base):\n    if isinstance(num, str):\n        n = int(num, from_base)\n    else:\n        n = int(num)\n    alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    if n < to_base: \n        return alphabet[(n)]\n    else:\n        return convert_base(n // to_base, from_base, to_base) + alphabet[n % to_base]", "category": "Python"}, {"instruction": "Give a function to get an array of n-dimensional vectors.", "input": "", "output": "def get_n_dimensional_vectors(n):\n     vectors = [[0 for x in range(n)] for x in range(len(arr))] \n     for vector in vectors:\n         for i in range(n):\n             vector[i] = arr[i]\n     return vectors", "category": "Python"}, {"instruction": "Create a dictionary containing the characters from the given string as keys and their frequency in the string as values.", "input": "string = 'google'", "output": "def create_frequency_dict(string):\n    \"\"\"Create a dictionary containing the characters from the given string as keys and their frequency in the string as values.\"\"\"\n    # Initialize empty dictionary\n    freq_dict = {}\n    # Iterate over the string\n    for char in string:\n        # Check if char is in dictionary\n        if char in freq_dict:\n            # Increase its frequency\n            freq_dict[char] += 1\n        else:\n            # Add to dictionary\n            freq_dict[char] = 1\n    return freq_dict\n\ncreate_frequency_dict('google') # Outputs {'g': 2, 'o': 2, 'l': 1, 'e': 1}", "category": "Python"}, {"instruction": "In the given string, split the words and remove empty strings.", "input": "string = \"    Hello    World    \"", "output": "def split_and_remove(string):\n    \"\"\"In the given string, split the words and remove empty strings.\"\"\"\n    # Split the string by spaces\n    arr = string.split(' ')\n    # Initialize empty list\n    new_arr = []\n    # Iterate over array\n    for word in arr:\n        # Check if not empty\n        if word != '':\n            # Append to list\n            new_arr.append(word)\n    return new_arr\n\nsplit_and_remove('    Hello    World    ') # Outputs ['Hello', 'World']", "category": "Python"}, {"instruction": "Multiply each element in the given array by 3 and return the new array.", "input": "[1, 2, 3]", "output": "def multiply_by_3(arr):\n    \"\"\"Multiply each element in the given array by 3 and return the new array.\"\"\"\n    # Initialize empty array\n    new_arr = []\n    # Iterate over the array\n    for num in arr:\n        # Multiply by 3\n        num *= 3\n        # Append to new array\n        new_arr.append(num)\n    return new_arr\n\nmultiply_by_3([1, 2, 3]) # Outputs [3, 6, 9]", "category": "Python"}, {"instruction": "Write a code to convert a given date string into a timestamp.", "input": "date_string = \"2020-07-24 14:50:00\"", "output": "import datetime\n\ndef convert_to_timestamp(date_string):\n    \"\"\"Write a code to convert a given date string into a timestamp.\"\"\"\n    date_object = datetime.datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S')\n    timestamp = datetime.datetime.timestamp(date_object)\n    return timestamp\n\nconvert_to_timestamp(\"2020-07-24 14:50:00\") # Outputs 1595538200.0", "category": "Python"}, {"instruction": "Create a Python function which takes in a list and returns the length of the longest common subsequence of consecutive elements in the list.", "input": "[1, 3, 5, 8, 9, 10, 11, 15]", "output": "\"\"\"\nCreate a Python function which takes in a list and returns the length of the longest common subsequence of consecutive elements.\n\"\"\"\n\ndef long_consec_sequence(lst):\n    if not lst:\n        return 0\n    \n    # initialize the size of the longest subsequence \n    max_seq_len = 0\n    \n    # iterate through the list \n    for i in range(len(lst)-1) : \n        \n        # create a new sequence \n        curr_seq = 1\n    \n        j = i+1\n        while (j < len(lst)): \n            if (lst[j] - lst[j-1]) == 1 : \n                curr_seq += 1 \n            else: \n                break\n            j += 1\n        \n        # update the length of the maximum subsequence\n        if curr_seq > max_seq_len: \n            max_seq_len = curr_seq \n    \n    # return the length of the maximum consecutive subsequence\n    return max_seq_len \n\nif __name__ == '__main__':\n    lst = [1, 3, 5, 8, 9, 10, 11, 15]\n    print(long_consec_sequence(lst)) # Output: 4", "category": "Python"}, {"instruction": "Write an IF ELSE statement in Python to print either \"Number is even\" or \"Number is odd\" depending on the number input.", "input": "", "output": "if (num % 2 == 0):\n    print(\"Number is even\")\nelse:\n    print(\"Number is odd\")", "category": "Python"}, {"instruction": "design a functions which removes the duplicate elements from a list", "input": "", "output": "def remove_duplicates(x):\n    res = []\n    for i in x:\n        if i not in res:\n            res.append(i)\n    return res", "category": "Python"}, {"instruction": "Extract the name of the given website link", "input": "https://www.example.com", "output": "\"\"\"\nExtract the name of the given website link \n\"\"\"\n\nimport re\n\ndef extract_name(url):\n    return re.search('https://www.(.*?).com', url).group(1)\n\nif __name__ == '__main__':\n    url = \"https://www.example.com\"\n    print(extract_name(url))", "category": "Python"}, {"instruction": "Make a Python program to delete elements from a given list at particular indices.", "input": "list_of_numbers = [0, 1, 2, 3, 4, 5]\nindices = [2, 3, 5]", "output": "def remove_elements_at_indices(numbers, indices):\n    for index in sorted(indices, reverse=True):\n        del numbers[index]\n    return numbers\n\nmodified_list = remove_elements_at_indices(list_of_numbers, indices)\nprint(modified_list) # prints [0, 1, 4]", "category": "Python"}, {"instruction": "Create a Python program to remove all whitespace from the given string.", "input": "text = \"   This is a    sentence    with some whitespace!   \"", "output": "def remove_whitespace(text):\n    return text.replace(\" \", \"\")\n\ntext_without_whitespace = remove_whitespace(text)\nprint(text_without_whitespace) # prints \"Thisisasentencewithsomewhitespace!\"", "category": "Python"}, {"instruction": "Make a Python program to generate all permutations of a given list.", "input": "", "output": "def permutations(nums):\n    if len(nums) == 0:\n        return []\n\n    if len(nums) == 1:\n        return [[nums[0]]]\n    \n    perms = []\n\n    for i, n in enumerate(nums):\n        sub_perms = permutations(nums[:i] + nums[i+1:])\n\n        for perm in sub_perms:\n            perms.append([n] + perm)\n\n    return perms", "category": "Python"}, {"instruction": "Create a Python function to remove all elements of the given list that are equal to the given value.", "input": "list_of_numbers = [1, 2, 3, 4, 2, 3] \nvalue = 2", "output": "def remove_val(numbers, val):\n    result = []\n    for n in numbers:\n        if n != val:\n            result.append(n)\n    return result\n\nlist_without_2 = remove_val(list_of_numbers, value)\nprint(list_without_2) # prints [1, 3, 4, 3]", "category": "Python"}, {"instruction": "Write a Python program to create a new list which contains all even numbers from the given list.", "input": "list_of_numbers = [1, 2, 3, 4, 5, 6]", "output": "def get_even_numbers(numbers):\n    even_numbers = []\n    for n in numbers:\n        if n % 2 == 0:\n            even_numbers.append(n)\n    return even_numbers\n\neven_numbers = get_even_numbers(list_of_numbers)\nprint(even_numbers) # prints [2, 4, 6]", "category": "Python"}, {"instruction": "Create a Python program to sort of given list of strings in alphabetical order.", "input": "list_of_strings = [\"apple\", \"banana\", \"cherry\", \"dog\"]", "output": "def sort_words(words):\n    return sorted(words)\n\nlist_of_strings_sorted = sort_words(list_of_strings)\nprint(list_of_strings_sorted)", "category": "Python"}, {"instruction": "Parse a given string to create a tree data structure.", "input": "expr = \"a + b * c\"", "output": "def parse_string(expr):\n  root = Node(expr[0])\n  current_node = root\n  \n  for i in range(1, len(expr), 2):\n    node = Node(expr[i])\n    current_node.right = node\n    node.left = current_node\n    current_node = node\n  \n  return root\n\nclass Node:\n  def __init__(self, data):\n    self.data = data\n    self.left = None\n    self.right = None", "category": "Python"}, {"instruction": "Create an algorithm to produce a Fibonacci number.", "input": "", "output": "def fibonacci(n):\n  if n <= 1:\n    return n\n  else:\n    return fibonacci(n-1) + fibonacci(n-2)", "category": "Python"}, {"instruction": "Make a program that takes in a non-empty string and finds its longest palindrome.", "input": "", "output": "def longest_palindrome(text):\n  longest_palindrome = \"\"\n  for i in range(len(text)):\n    for j in range(len(text), i, -1):\n      substring = text[i:j]\n      if substring == substring[::-1] and len(substring) > len(longest_palindrome):\n        longest_palindrome = substring\n  return longest_palindrome", "category": "Python"}, {"instruction": "Rearrange the code to print the hierarchy of students in a Python class", "input": "students = [\n  {\n    \"name\": \"John Smith\",\n    \"role\": \"student\"\n  },\n  {\n    \"name\": \"Alice Johnson\",\n    \"role\": \"student\"\n  },\n  {\n    \"name\": \"Bob Williams\",\n    \"role\": \"teacher\"\n  },\n  {\n    \"name\": \"Cecilia Brown\",\n    \"role\": \"teacher\"\n  }\n]", "output": "students = [\n  {\n    \"name\": \"John Smith\",\n    \"role\": \"student\"\n  },\n  {\n    \"name\": \"Alice Johnson\",\n    \"role\": \"student\"\n  },\n  {\n    \"name\": \"Bob Williams\",\n    \"role\": \"teacher\"\n  },\n  {\n    \"name\": \"Cecilia Brown\",\n    \"role\": \"teacher\"\n  }\n]\n\nteachers = []\nstudents_list = []\n\nfor student in students:\n  if student[\"role\"] == \"teacher\":\n    teachers.append(student)\n  else:\n    students_list.append(student)\n\nprint(\"Teachers:\")\nfor teacher in teachers:\n  print(teacher[\"name\"])\n\nprint(\"Students:\")\nfor student in students_list:\n  print(student[\"name\"])", "category": "Python"}, {"instruction": "Generate a data set using RandomSample()", "input": "", "output": "from random import Random\n\ndef RandomSample(number_of_samples):\n    sample = []\n    random_generator = Random()\n    for i in range(number_of_samples):\n        sample.append(random_generator.random())\n    return sample", "category": "Python"}, {"instruction": "Edit the vector below such that all elements are greater than five.", "input": "[1, 5, 3, 7, 6, 4]", "output": "def edit_vec(vec): \n    for i in range(len(vec)): \n        if vec[i] <= 5: \n            vec[i] = 5\n    return vec", "category": "Python"}, {"instruction": "Create a loop to traverse through a tree using depth-first search.", "input": "", "output": "def traverse_tree(node): \n    print(node.data) \n\n    if node.left: \n        traverse_tree(node.left) \n    if node.right: \n        traverse_tree(node.right)", "category": "Python"}, {"instruction": "Scale a vector of 10 numbers from 0 to 10.", "input": "[2.5, 3.5, 5.5, 7.5, 1.5, 8.5, 0.5, 4.5, 6.5, 9.5]", "output": "def scale(vector): \n    scaled_vector = []\n    for i in vector: \n        scaled_vector.append(i/10*10) \n    return scaled_vector", "category": "Python"}, {"instruction": "Design a function to convert Fahrenheit to Celsius in Python.", "input": "", "output": "def fahrenheit_to_celsius(f):\n    celsius = (f - 32) * 5/9\n    return celsius", "category": "Python"}, {"instruction": "Simulate a coin toss in Python and get the results in a list.", "input": "", "output": "import random\n\nresults = []\nfor i in range(10):\n    if random.random() < 0.5:\n        results.append('heads')\n    else:\n        results.append('tails')\n\nprint(results)", "category": "Python"}, {"instruction": "Create a list comprehension in Python to double each element in the list.", "input": "list = [1, 2, 3, 4, 5]", "output": "result = [x*2 for x in list]", "category": "Python"}, {"instruction": "Add this method to the Person class.", "input": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def intro(self):\n        print(\"Hi, my name is %s and I am %d years old.\" % (self.name, self.age))", "category": "Python"}, {"instruction": "Make changes to this code to fix the bug.", "input": "def example_function(a, b):\n    c = 0\n    for i in range(a, b+1):\n        c -= i\n    return c", "output": "def example_function(a, b):\n    c = 0\n    for i in range(a, b+1):\n        c += i\n    return c", "category": "Python"}, {"instruction": "Parse this JSON string and print the value of the \"name\" field.", "input": "json_string = '{\"name\":\"John\", \"age\":25}'", "output": "import json\ndata = json.loads(json_string)\nprint(data['name'])", "category": "Python"}, {"instruction": "Write a postfix expression to an infix expression", "input": "3 4 + 5 *", "output": "def postfix_to_infix(expression):\n    stack = []\n    for c in expression.split():\n        if c in \"+-*/\":\n            operand1 = stack.pop()\n            operand2 = stack.pop()\n            stack.append(\"({} {} {})\".format(operand2, c, operand1))\n        else:\n            stack.append(c)\n    return stack[0]\n\nif __name__ == '__main__':\n    expression = '3 4 + 5 *'\n    print(postfix_to_infix(expression))", "category": "Python"}, {"instruction": "Identify if the given number is prime", "input": "n = 13", "output": "def is_prime(n):\n  for i in range(2, n):\n    if n % i == 0:\n      return False\n  return True\n\nif __name__ == '__main__':\n  n = 13\n  print(\"Is {} prime? {}\".format(n, is_prime(n)))", "category": "Python"}, {"instruction": "print the values of a dictionary in first-in, first-out order", "input": "my_dict = {\n 'a': 1,\n 'b': 2,\n 'c': 3\n}", "output": "def print_dict(d):\n    queue = [key for key in d.keys()]\n    while len(queue) > 0:\n        key = queue.pop(0)\n        print(d[key])\n        \nif __name__ == '__main__':\n    my_dict = {\n     'a': 1,\n     'b': 2,\n     'c': 3\n    }\n    print_dict(my_dict)", "category": "Python"}, {"instruction": "Sort the list in reverse order using insertion sort.", "input": "[4, 2, 0, 6, 1, 7, 3]", "output": "def insertion_sort_reverse(arr):\n    \"\"\" Sort the list in reverse order using insertion sort. \"\"\"\n    # Iterate over the list\n    for i in range(1, len(arr)):\n        current_value = arr[i]\n        # Keep track of position\n        position = i\n        # Iterate over the sorted part of the list\n        while position > 0 and arr[position - 1] < current_value:\n            # Shift one place to the right\n            arr[position] = arr[position - 1]\n            # Move position back\n            position = position - 1\n        # Insert current value at the position\n        arr[position] = current_value\n    return arr\n\ninsertion_sort_reverse([4, 2, 0, 6, 1, 7, 3]) # Outputs[7, 6, 4, 3, 2, 1, 0]", "category": "Python"}, {"instruction": "Sort an array of numbers in descending order using the bubble sort algorithm.", "input": "`array = [10, 5, 2, 7, 6]`", "output": "def bubble_sort(arr): \n    for i in range(len(arr)): \n        for j in range(0, len(arr)-i-1): \n            if arr[j] < arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]\n  \narray = [10, 5, 2, 7, 6]\nbubble_sort(array)\nprint(array) # Output: [10, 7, 6, 5, 2]", "category": "Python"}, {"instruction": "Remove the duplicates from the list without using built-in methods.", "input": "[1, 2, 1, 2, 3, 2, 4, 2]", "output": "def remove_duplicates(arr):\n    \"\"\"Remove the duplicates from the list without using built-in methods.\"\"\"\n    # Initialize empty list\n    new_list = []\n    # Iterate through array\n    for num in arr:\n        # Check if element is not in list\n        if num not in new_list:\n            # Add element to list\n            new_list.append(num)\n    return new_list\n\nremove_duplicates([1, 2, 1, 2, 3, 2, 4, 2]) # Outputs [1, 2, 3, 4]", "category": "Python"}, {"instruction": "Fix the following Python code to create a dictionary.", "input": "dic = {\u201cmin\u201d, 10, \u201cmax\u201d, 20}", "output": "dic = {\"min\": 10, \"max\": 20}", "category": "Python"}, {"instruction": "Using the list of strings, create a new list without any vowels.", "input": "strings = ['apple', 'ball', 'cat']", "output": "def remove_vowels(strings):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_strings = []\n    for string in strings: \n        new_strings.append(''.join([char for char in string if char.lower() not in vowels]))\n    \n    return new_strings", "category": "Python"}, {"instruction": "Create a function named \"parse_urls\" which takes a single string parameter and returns a dictionary of queries from the URL.", "input": "url=\"https://www.example.com/product?color=red&size=small\"", "output": "def parse_urls(url): \n    queries = url.split('?')[1]\n    queries_dict = {}\n    for query in queries.split('&'): \n        key, value = query.split('=') \n        queries_dict[key] = value \n    return queries_dict", "category": "Python"}, {"instruction": "Using the given list, write a code to get a list of all the words starting with \"T\"", "input": "words_list = ['Meteor', 'Timeline', 'Tablet', 'Timeframe', 'Trophy']", "output": "words_starting_with_T = [word for word in words_list if word.startswith('T')]", "category": "Python"}, {"instruction": "Given a list of integers, remove all negative numbers.", "input": "numbers_list = [-2,-3,4,5,-6,7]", "output": "def remove_negative_numbers(numbers_list):\n  result_list = []\n  \n  for number in numbers_list:\n    if number >= 0:\n      result_list.append(number)\n  \n  return result_list\n\nnumbers_list = [-2,-3,4,5,-6,7]\nprint(remove_negative_numbers(numbers_list))", "category": "Python"}, {"instruction": "Create a function which detects overlapping dates from a given list.", "input": "dates_list = [\n  (2018,1,1,2018,3,1),\n  (2018,12,1,2018,9,30),\n  (2018,2,15,2018,5,10)\n]", "output": "def detect_overlapping_dates(dates_list): \n  overlaps = set()\n\n  for i in range(len(dates_list)-1):\n    for j in range(i+1, len(dates_list)):\n      date1_start_year, date1_start_month, date1_start_day, date1_end_year, date1_end_month, date1_end_day = dates_list[i]\n      date2_start_year, date2_start_month, date2_start_day, date2_end_year, date2_end_month, date2_end_day = dates_list[j]\n      # check if the two dates overlap\n      if (date1_start_year <= date2_end_year and date2_start_year <= date1_end_year) and (date1_start_month <= date2_end_month and date2_start_month <= date1_end_month) and (date1_start_day <= date2_end_day and date2_start_day <= date1_end_day):\n        # if the two dates overlap, add to the overlapping set\n        overlaps.add(dates_list[i])\n        overlaps.add(dates_list[j])\n  \n  return list(overlaps)\n \ndates_list = [\n  (2018,1,1,2018,3,1),\n  (2018,12,1,2018,9,30),\n  (2018,2,15,2018,5,10)\n]\n\nprint(detect_overlapping_dates(dates_list))", "category": "Python"}, {"instruction": "Find all the possible permutations in a string without using any built-in functions.", "input": "string = \"ABC\"", "output": "def permute(string):\n  \n  # base case\n  if len(string) == 1:\n    return [string]\n  \n  results = set()\n  # iterate through each character in the string\n  for i in range(len(string)):\n    # select the ith character\n    char = string[i]\n    # generate all the permutations from the remaining characters\n    remaining_characters = string[:i] + string[i+1:]\n    permutations = permute(remaining_characters)\n    # append the ith character to the beginning of each permutation and add to the result set\n    for permutation in permutations:\n      results.add(char + permutation)\n  \n  return list(results)\n\nprint(permute(\"ABC\"))", "category": "Python"}, {"instruction": "Create a function that removes duplicates from an array and returns an array of the unique values.", "input": "array = [5,5,5,10,10,15]", "output": "def remove_duplicates(array):\n \n  new_array = []\n  for number in array:\n    if number not in new_array:\n      new_array.append(number)\n \n  return new_array\n\nprint(remove_duplicates([5,5,5,10,10,15]))", "category": "Python"}, {"instruction": "List out all the sorting algorithms supported in Python.", "input": "", "output": "The sorting algorithms supported in Python include bubble sort, insertion sort, selection sort, merge sort, quick sort, and heap sort.", "category": "Python"}, {"instruction": "Define the term variable.", "input": "", "output": "A variable is a named container for storing data values. Variables are usually used in programming to store and access data in a program. It is important to use a descriptive name for the variable, as it can be used to access the data within it.", "category": "Python"}, {"instruction": "Explain the advantages of using the following linear regression algorithm in Python.", "input": "Linear Regression using Stochastic Gradient Descent", "output": "The advantages of using the Linear Regression algorithm with Stochastic Gradient Descent (SGD) in Python include:\n\n1. It is relatively fast to train, as it only has to go through each sample in the dataset once in order to generate the coefficients.\n2. It requires small datasets and low complexity models, so it can be utilized on limited hardware systems.\n3. It is well suited for problems where the number of features is quite high, and the relationships between features is non-linear.\n4. It can exploit sparse data, which can make it perfect for certain types of data, such as text.", "category": "Python"}, {"instruction": "Create a data visualization in Python using the given dataset.", "input": "Dataset: \nThe data contains information about the latest coronavirus cases per US state", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n \n# Read the dataset\ndf = pd.read_csv('data.csv')\n \n# Create visualization\nfig, ax = plt.subplots(figsize=(10,8))\nax.bar(df['State'], df['Cases'], color='#88e398')\nplt.xlabel('States')\nplt.ylabel('Coronavirus Cases')\nplt.title('Covid-19 Cases per US State')\nplt.xticks(rotation=45)\nplt.show()", "category": "Python"}, {"instruction": "Fill in the blanks in the following code to make it an executable program.", "input": "def\t main():\n    temp = _____\n    if _____:\n        print('It is a hot day')\n    elif _____:\n        print('It is a cold day')\n    else:\n        print('It is a lovely day')\n\nmain()", "output": "def main():\n    temp = 22\n    if temp > 30:\n        print('It is a hot day')\n    elif temp < 10:\n        print('It is a cold day')\n    else:\n        print('It is a lovely day')\n\nmain()", "category": "Python"}, {"instruction": "What is this coding question asking you to do?", "input": "Write a Python function to check whether a number is prime or not", "output": "This coding question is asking you to write a Python function to check whether a given number is prime or not. The function should take an integer as an argument and return a boolean indicating if the number is prime or not.", "category": "Python"}, {"instruction": "Write a function that takes an array of integers and multiplies them together.", "input": "arr = [3, 5, 4]", "output": "def multiplyArray(arr):\n    result = 1\n    for x in arr:\n        result = result * x\n    return result", "category": "Python"}, {"instruction": "You are given a string. Count the total number of lowercase letters in the string.", "input": "", "output": "def count_lowercase(string):\n    count = 0\n    for char in string:\n        if char.islower():\n            count += 1\n    return count", "category": "Python"}, {"instruction": "You are given a list of numbers. Find the maximum sum of any subsequence in the list.", "input": "", "output": "def max_sum_subsequence(nums):\n    max_sum = 0\n    curr_sum = 0\n \n    for num in nums:\n        curr_sum = max(num + curr_sum, 0)\n        max_sum = max(curr_sum, max_sum)\n \n    return max_sum", "category": "Python"}, {"instruction": "Given a string of text, find the total number of characters in the string.", "input": "text = \"You have to do it\"", "output": "def char_count(text):\n    count = 0\n    for char in text:\n        count += 1\n    return count", "category": "Python"}, {"instruction": "You are given a string of words. Count how many words the string contains.", "input": "words = \"This is a testing string\"", "output": "def word_count(words):\n    count = 0\n    for word in words.split():\n        count+=1\n    return count", "category": "Python"}, {"instruction": "Given an array of integers, remove all the duplicated elements from the array and return the distinct array.", "input": "nums=[3, 4, 5, 5, 6, 6, 6, 7]", "output": "def uniq_array(nums):\n    distinct_arr = []\n    for num in nums:\n        if num not in distinct_arr:\n            distinct_arr.append(num)\n    return distinct_arr", "category": "Python"}, {"instruction": "Given a number N find the square root of N.", "input": "", "output": "def sqrt(N): \n    guess = N/2 \n    \n    while abs(guess*guess - N) >= 0.001: \n        guess = 0.5 * (guess + N/guess) \n          \n    return guess", "category": "Python"}, {"instruction": "Design an algorithm to eliminate duplicate elements in a given array.", "input": "Array: [1, 5, 1, -2, 5]", "output": "def remove_duplicates(arr):\n    result = [] \n    for el in arr:\n        if el not in result:\n            result.append(el)\n    return result", "category": "Python"}, {"instruction": "Preprocess a given document, removing stopwords and punctuations.", "input": "document = \"Hello! This is a test document for preprocessing\"", "output": "from nltk.corpus import stopwords\nimport string\n\ndef preprocess_document(document):\n    \"\"\"\n    Preprocess a given document, removing stopwords and punctuations.\n\n    Parameters\n    ----------\n    document : str\n        The document to preprocess\n\n    Returns\n    -------\n    clean_word_list : list\n        The preprocessed word list\n    \"\"\"\n    # Split the document into word list\n    word_list = document.split()\n    stopwords_list = stopwords.words('english')\n\n    # Remove punctuation\n    word_list = [word.strip(string.punctuation) for word in word_list]\n    \n    # Remove words with 2 or fewer characters\n    word_list = [word for word in word_list if len(word) > 2]\n\n    # Remove stopwords\n    clean_word_list = [word for word in word_list if word not in stopwords_list]\n\n    return clean_word_list\n\ndocument = \"Hello! This is a test document for preprocessing\"\nprint(preprocess_document(document)) # Outputs ['Hello', 'test', 'document', 'preprocessing']", "category": "Python"}, {"instruction": "Edit the code such that it prints the same output.", "input": "str1 = \"python \"\nstr2 = \"programming\"\nprint(str1 + str2)", "output": "str1 = \"python\"\nstr2 = \" programming\"\nprint(str1 + str2)", "category": "Python"}, {"instruction": "Train a machine learning algorithm from a given dataset.", "input": "Dataset: The data contains information about students' results in an exam.", "output": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Read the dataset\ndata = pd.read_csv(\"data.csv\")\n\n# Split the data into features and labels\nX = data.drop(['result'], axis=1)\ny = data['result']\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y, \n                                                    test_size=0.2, \n                                                    random_state=0)\n\n# Train the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)", "category": "Python"}, {"instruction": "How are objects instantiated in Python?", "input": "", "output": "Objects are instantiated in Python by using the keyword \"class\". Python then creates a new instance of the class and assigns it a unique object ID. This object is then used as the basis for the object's other attributes and methods, which are defined within the class definition. Object instantiation is usually used to create objects that inherit from other classes, or that contain data that need to be initialized.", "category": "Python"}, {"instruction": "What is the purpose of a join operation in a relational database?", "input": "", "output": "A join operation in a relational database is used to combine data from two or more tables based on a common field. This is done to match and retrieve related data from one or multiple tables and then use it as a single result. The most common type of join is an inner join, which combines only the matching records from both tables. Other types of join operations are left join and right join, which combines all the data from a specified table and contains only the matching data from the other table.", "category": "Python"}, {"instruction": "Parse a JSON response into a Python dictionary.", "input": "{\n    \"name\": \"John Doe\",\n    \"age\": \"35\"\n}", "output": "import json\n\ndef parse_json(json_data):\n    data = json.loads(json_data)\n    return data\n\nif __name__ == '__main__':\n    json_data = '{\"name\": \"John Doe\", \"age\": \"35\"}'\n    print(parse_json(json_data))", "category": "Python"}, {"instruction": "Suggest a valid Python code to print unique characters of a given string", "input": "", "output": "def print_unique(s):\n    output = set()\n    for char in s:\n        if char not in output:\n            output.add(char)\n            print(char)", "category": "Python"}, {"instruction": "Generate an algorithm to multiply two numbers without using multiplication operator", "input": "", "output": "def multiply_without_operator(a, b): \n    # If either a or b = 0, return 0\n    if (a == 0 or b == 0): \n        return 0\n  \n    # Initialize result \n    result = 0\n  \n    # Add a, b number of times \n    for i in range(min(a, b)): \n        result = result + max(a, b) \n  \n    # Return the multiplication result \n    return result", "category": "Python"}, {"instruction": "Suggest a valid Python code to add two numbers", "input": "", "output": "def add_two_numbers(a, b):\n    return a + b", "category": "Python"}, {"instruction": "Reverse a given list without using any predefined functions.", "input": "", "output": "def reverse_list(lst):\n    n = len(lst)\n    for i in range(n // 2): \n        lst[i], lst[n-i-1] = lst[n-i-1], lst[i]\n    return lst", "category": "Python"}, {"instruction": "Design an algorithm to check if a string contains a given substring.", "input": "", "output": "\"\"\"\ndef isSubstring(string, sub): \n    l1 = len(string) \n    l2 = len(sub) \n\n    if l2> l1: \n        return False\n\n    # Sliding window approach\n    for i in range(l1): \n        if string[i:i+l2] == sub : \n            return True \n\n    return False \n\"\"\"", "category": "Python"}, {"instruction": "Create a class in Python named 'Rectangle' which can compute the area of a rectangle.", "input": "", "output": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\t\n    def get_area(self):\n        return self.width * self.height", "category": "Python"}, {"instruction": "Design an algorithm for finding the nth node from the tail of a linked list.", "input": "", "output": "\"\"\"\ndef nthFromLast(head, n): \n    # Initialize slow and fast pointers \n    slow  = head \n    fast = head \n  \n    # Move fast pointer n-1 times \n    while (n > 0): \n        if (fast == None): \n            return None\n  \n        fast = fast.next\n        n = n - 1\n  \n    # Move both slow and fast pointer together \n    while (fast.next != None): \n        slow = slow.next\n        fast = fast.next\n  \n    return slow\n\"\"\"", "category": "Python"}, {"instruction": "Create an algorithm to check if a binary tree is univalued.", "input": "", "output": "\"\"\"\ndef isUnivalTree(root):\n    is_uni = True\n    if root is None:\n        return is_uni\n    else:\n        val = root.val\n        if root.left:\n            is_uni &= root.left.val == val\n        if root.right:\n            is_uni &= root.right.val == val\n        is_uni &= isUnivalTree(root.left)\n        is_uni &= isUnivalTree(root.right)\n    return is_uni\n\"\"\"", "category": "Python"}, {"instruction": "Find the minimum number of coins required to make a given amount", "input": "amount = 93", "output": "def min_coins(amount):\n    # list of coin denominations\n    coins = [1, 5, 10, 25]\n    min_coins = 0\n    i = len(coins) - 1\n    while(amount > 0):\n        if (amount >= coins[i]):\n            amount -= coins[i]\n            min_coins += 1\n        else:\n            i -= 1\n    return min_coins\n\n# Output\nmin_coins(amount)\n\n# Output\n7", "category": "Python"}, {"instruction": "Create a function to generate the weight of a given sequence of DNA", "input": "DNA = \"GTCATCTGAG\"", "output": "def generate_DNA_weight(DNA):\n    \n    # Initialize the weights dict\n    weights = {\n        \"G\": 57.02,\n        \"A\": 71.04,\n        \"T\": 89.09,\n        \"C\": 103.01    \n    }\n\n    # Calculate the weight\n    weight = 0.0\n    for character in DNA:\n        weight += weights[character]\n    return weight\n\n# Output\ngenerate_DNA_weight(DNA)\n\n# Output\n698.22", "category": "Python"}, {"instruction": "Implement a in-order traversal of a binary tree in Python.", "input": "", "output": "class Node: \n    def __init__(self, data): \n        self.data = data  \n        self.left = None\n        self.right = None\n\ndef inOrderTraversal(root):  \n    if root is not None: \n        inOrderTraversal(root.left)\n        print(root.data)\n        inOrderTraversal(root.right)\n\nroot = Node(1)\nroot.left = Node(7)\nroot.right = Node(9)\nroot.left.left = Node(4)\nroot.left.right = Node(8)\n\ninOrderTraversal(root)\n\n# Output\n4\n7\n1\n8\n9", "category": "Python"}, {"instruction": "Extract the phone numbers from a string of text", "input": "text = \"My number is (202) 555-0123 and my friend's number is (703) 555-9876\"", "output": "import re\n\ndef extract_phone_numbers(text): \n    phones = re.findall(\"\\(\\d{3}\\) \\d{3}\\-\\d{4}\",text) \n    return phones\n\nprint(extract_phone_numbers(text))\n\n# Output\n['(202) 555-0123', '(703) 555-9876']", "category": "Python"}, {"instruction": "Create a new Python class called Area to calculate the area of different shapes.", "input": "", "output": "class Area:\n    def __init__(self):\n        pass\n\n    def calculate_area_rectangle(self, length, width):\n        return length * width\n\n    def calculate_area_triangle(self, base, height):\n        return 0.5 * base * height\n\n    def calculate_area_circle(self, radius):\n        return 3.14 * radius**2", "category": "Python"}, {"instruction": "Write a callback function for the following requirements", "input": "This callback should be able to store the input emit it when triggered", "output": "def store_and_emit(data):\n    stored_data = data\n    def emit_stored_data():\n        return stored_data\n    return emit_stored_data", "category": "Python"}, {"instruction": "Rewrite the given Python code snippet using list comprehensions .", "input": "even_list = []\nfor x in my_list:\n    if x % 2 == 0:\n        even_list.append(x)", "output": "even_list = [x for x in my_list if x % 2 == 0]", "category": "Python"}, {"instruction": "Write Python code to store odd numbers from the given list in a separate list.", "input": "list = [1, 2, 3, 4, 5, 6, 7]", "output": "odds = []\nfor num in list:\n    if num % 2 != 0:\n        odds.append(num)", "category": "Python"}, {"instruction": "Implement a neural network from scratch", "input": "", "output": "class NeuralNetwork:\n  def __init__(self, num_inputs, num_hidden_layers, num_outputs):\n    self.num_inputs = num_inputs\n    self.num_hidden_layers = num_hidden_layers\n    self.num_outputs = num_outputs\n\n    self.weights_input_to_hidden = np.random.randn(num_inputs, num_hidden_layers) \n    self.bias_hidden = np.zeros(num_hidden_layers)\n    self.weights_hidden_to_output = np.random.randn(num_hidden_layers, num_outputs)\n    self.bias_output = np.zeros(num_outputs)\n    \n    self.activation_function = lambda x : 1/(1+np.exp(-x))\n\n  def forward_propagation(self, inputs):\n    # Compute the inputs to the hidden layer\n    hidden_in = np.dot(inputs, self.weights_input_to_hidden) + self.bias_hidden\n    # Compute the hidden layer output\n    hidden_out = self.activation_function(hidden_in)\n    # Compute the inputs to the output layer\n    output_in = np.dot(hidden_out, self.weights_hidden_to_output) + self.bias_output\n    # Return the output layer output\n    return output_in", "category": "Python"}, {"instruction": "Find all the elements in a Python list that correspond to a certain condition using list comprehension", "input": "list = [-3, -2, -1, 0, 1, 2, 3]", "output": "[x for x in list if x >= 0]", "category": "Python"}, {"instruction": "Write a function to parse a string and return a dictionary where each character in the string is mapped to its frequency.", "input": "\"hello world\"", "output": "def get_frequency_map(string): \n    frequency_map = {}\n    # count the frequency of each character\n    for char in string: \n        if char in frequency_map:\n            frequency_map[char] += 1\n        else:\n            frequency_map[char] = 1\n    return frequency_map\n\nstring = \"hello world\"\n\nfrequency_map = get_frequency_map(string)\nprint(frequency_map)  # {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}", "category": "Python"}, {"instruction": "Create a final list of all unique elements in list_1 and list_2.", "input": "list_1 = [1, 2, 3, 4, 5]\nlist_2 = [2, 4, 6, 8, 10]", "output": "def get_unique_elements(list1, list2):\n    unique_elements = []\n\n    for element in list1:\n        if element not in list2:\n            unique_elements.append(element)\n\n    for element in list2:\n        if element not in list1:\n            unique_elements.append(element)\n\n    return unique_elements\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [2, 4, 6, 8, 10]\n\nunique_list = get_unique_elements(list1, list2)\n\nprint(unique_list)  # [1, 3, 5, 6, 8, 10]", "category": "Python"}, {"instruction": "How are dictionaries implemented in Python?", "input": "", "output": "Dictionaries in Python are implemented as hash tables. Each key-value pair is stored as an entry in the hash table, and a hash function is used to map the key to its corresponding index in the table. This allows fast lookups of the associated value of a given key and makes dictionary operations such as insertion, deletion, and retrieval very efficient. Furthermore, dictionaries are mutable, meaning they can be changed after they are created.", "category": "Python"}, {"instruction": "Generate a dictionary with the key-value pairs {1:1, 2:4, 3:9, 4:16}", "input": "", "output": "def generate_dict():\n    \"\"\"Generate a dictionary with the key-value pairs {1:1, 2:4, 3:9, 4:16}\"\"\"\n    my_dict = {}\n    for i in range(1, 5):\n        my_dict[i] = i**2\n    return my_dict\n\ngenerate_dict() # Outputs {1:1, 2:4, 3:9, 4: 16}", "category": "Python"}, {"instruction": "Create a histogram chart of the given data.", "input": "dataset = [2, 3, 5, 6, 7, 4]", "output": "import matplotlib.pyplot as plt\n\ndef create_histogram(dataset):\n    \"\"\"\n    Create a histogram chart of the given data.\n\n    Parameters\n    ----------\n    dataset : list\n        The data to plot on the chart\n\n    Returns\n    -------\n    None\n    \"\"\"\n    plt.hist(dataset, bins=7, facecolor=\"blue\", alpha=0.5)\n    plt.title(\"Histogram\")\n    plt.xlabel(\"Values\")\n    plt.ylabel(\"Frequency\")\n    plt.show()\n\ndataset = [2, 3, 5, 6, 7, 4]\ncreate_histogram(dataset) # Outputs a histogram chart of the given data", "category": "Python"}, {"instruction": "What is an exception handling code in Python?", "input": "", "output": "Exception handling in Python is a process in which errors or exceptions in a program are handled using certain programming construct such as try-except or try-finally blocks so that the program can recover from such exceptions and continue running. Exception handling helps prevent critical errors in the program from crashing the entire program and allows developers to write more robust codes.", "category": "Python"}, {"instruction": "Modify the following code so that it takes a user input for the numbers for which to calculate the sum.", "input": "", "output": "def sum_numbers():\n    number_list = []\n    input_numbers = input(\"Please enter the numbers you want to sum up (enter q to exit): \")\n    while input_numbers != \"q\":\n        number_list.append(int(input_numbers))\n        input_numbers = input(\"Please enter the numbers you want to sum up (enter q to exit): \")\n    return sum(number_list)", "category": "Python"}, {"instruction": "Create a function in Python which takes an integer n and an unsorted list of numbers as input and returns the nth smallest number in the list.", "input": "[5, 8, 1, 9, 4], 3", "output": "def nth_smallest(nums, n):\n    sorted_nums = sorted(nums)\n    return sorted_nums[n-1]\n\nprint(nth_smallest([5, 8, 1, 9, 4], 3)) # Output: 5", "category": "Python"}, {"instruction": "How would you verify that a given string is a valid email address?", "input": "", "output": "To verify that a given string is a valid email address, you should use a regular expression. A regular expression is a sequence of characters which can be used to check if the string matches a predefined pattern. The pattern for a valid email address should ensure that it contains the symbol \"@\" and at least one period (.) in the domain name.", "category": "Python"}, {"instruction": "Write a Python program to reverse each word of a given sentence.", "input": "This is a test", "output": "def reverse_words(sentence):\n    words = sentence.split()\n    reversed_words = [word[::-1] for word in words]\n    return ' '.join(reversed_words)\n\nprint(reverse_words(\"This is a test\")) # Output: sihT si a tset", "category": "Python"}, {"instruction": "Create a function in Python which takes a string and an integer n as input and returns a string with the first n characters of the given string.", "input": "", "output": "def get_first_n_chars(string, n):\n    return string[:n]", "category": "Python"}, {"instruction": "Explain why recursion is a powerful technique for solving problems.", "input": "", "output": "Recursion is a powerful technique for solving problems because it allows for decomposing complex problems into simpler subproblems. By breaking down a problem into smaller components, it becomes easier to solve. This process can be repeated until a base case is reached, providing a way to reach a solution for the original problem. Additionally, recursive solutions tend to be shorter and easier to comprehend than iterative solutions.", "category": "Python"}, {"instruction": "Design an efficient algorithm to search for an item in an array.", "input": "", "output": "One efficient algorithm to search for an item in an array is the binary search algorithm. The binary search algorithm works by dividing the array into two parts and then searching through the divided parts in logarithmic time. The algorithm starts by comparing the item to be searched with the middle element of the array. If the item is smaller than the middle element, then the algorithm searches the first part of the array. If the item is larger than the middle element, then the algorithm searches the second part of the array. The process is then repeated until the item is found or the algorithm reaches the end of the array.", "category": "Python"}, {"instruction": "Write code to create a bar chart comparing the performance of two different algorithms.", "input": "Algorithm 1: [90, 91, 95, 94, 99]\nAlgorithm 2: [83, 89, 95, 91, 99]", "output": "import matplotlib.pyplot as plt \n  \n# Data to plot \nalgorithm1 = [90, 91, 95, 94, 99]\nalgorithm2 = [83, 89, 95, 91, 99]\n  \n# plotting a bar chart \nplt.bar([1, 2, 3, 4, 5], algorithm1, label = \"Algorithm1\", width = 0.25, color = 'b') \nplt.bar([1.25, 2.25, 3.25, 4.25, 5.25], algorithm2, \n        label = \"Algorithm2\", width = 0.25, color = 'r') \n  \n# Naming X-axes \nplt.title('Performance Comparison') \nplt.xlabel('Runs') \nplt.ylabel('Accuracy %') \nplt.xticks([1.125, 2.125, 3.125, 4.125, 5.125], ['1', '2', '3', '4', '5']) \n  \n# Show the legend \nplt.legend() \n  \n# Function to show the plot \nplt.show()", "category": "Python"}, {"instruction": "Read this JSON structure, parse it and print the value of \"name\".", "input": "{ \n  \"person\": { \n    \"name\":\"John\", \n    \"age\": 30, \n    \"location\": \"USA\"\n  }\n}", "output": "import json \n  \n# input JSON \njson_data = '{ \"person\": { \"name\":\"John\", \"age\":30, \"location\":\"USA\" } }'\n\n# parse json\ndata = json.loads(json_data) \n\n# get the name\nname = data[\"person\"][\"name\"] \n\n# print the name\nprint(name)", "category": "Python"}, {"instruction": "Write a Tensorflow model to classify a given X and Y as either positive or negative.", "input": "X = [1, 1, 2, 4]\nY = [3, 1, 0, 4]", "output": "import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n  tf.keras.layers.Dense(8, input_dim=2, activation=\"relu\"), \n  tf.keras.layers.Dense(1, activation=\"sigmoid\")\n])\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer=tf.keras.optimizers.Adam(0.01),\n              metrics=['accuracy'])\n\nX_list = [X, Y] \ny = [1, 0]\n\nmodel.fit(X_list, y, batch_size=4, epochs=4)", "category": "Python"}, {"instruction": "Modify the previous code so that it is now optimized for time complexity?", "input": "def quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quick_sort(less) + [pivot] + quick_sort(greater)", "output": "def quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        i = 1\n        for j in range(1, len(arr)):\n            if arr[j] < pivot:\n                arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n        arr[0], arr[i-1] = arr[i-1], arr[0]\n        left = quick_sort(arr[:i-1])\n        right = quick_sort(arr[i:])\n        return left + [arr[i-1]] + right", "category": "Python"}, {"instruction": "Create the following table using the Python language:", "input": "", "output": "table = [[\"Name\", \"Age\", \"Gender\"],[\"John\", 20, \"Male\"], [\"Anna\", 18, \"Female\"],[\"Adam\", 22, \"Male\"], [\"Sophie\", 19, \"Female\"]]", "category": "Python"}, {"instruction": "Develop a code in python to list the elements present in a given dictionary.", "input": "dictionary = {\n    \"name\": \"John\",\n    \"age\": 20,\n    \"location\": \"London\"\n}", "output": "def list_elements(dict):\n    for item in dict:\n        print(item, \":\", dict[item])\n\nlist_elements(dictionary)\n\n# Output:\n# name : John\n# age : 20\n# location : London", "category": "Python"}, {"instruction": "Design a program that automatically refactors a python code to improve readability and reduce complexity.", "input": "def myfunc():\nx = 1\ny = 5\nreturn x + y", "output": "def myfunc():\n    x = 1\n    y = 5\n    return x + y", "category": "Python"}, {"instruction": "Output the items in a list with the length less than or equal to the given number.", "input": "list_items = [1, 2, 3, 4, 5]\ngiven_number = 3", "output": "output_items = [item for item in list_items if len(str(item)) <= given_number]\nprint(output_items)\n\n# Output\n[1, 2, 3]", "category": "Python"}, {"instruction": "Create a function that takes in an array and displays all of the elements in the array in reverse order.", "input": "list_elements = [15,19,20]", "output": "def reverse_list_elements(list_elements):\n    list_elements.reverse()\n    for element in list_elements:\n        print(element)", "category": "Python"}, {"instruction": "Debug the following code by finding the syntax error.", "input": "def calculate_value(nums):\n    result = 0\n    for num in nums\n        result += num\n    return result", "output": "def calculate_value(nums):\n    result = 0\n    for num in nums: # missing colon\n        result += num\n    return result", "category": "Python"}, {"instruction": "Write an algorithm to check if a number is even or not without using modulus (%) operator", "input": "", "output": "def is_even(num):\n\tif num & 1 == 0:\n\t\treturn True\n\telse:\n\t\treturn False", "category": "Python"}, {"instruction": "Create a Python program that accepts input from the user and prints out the result for Fibonacci sequence", "input": "", "output": "def print_fibonacci(n):\n  a = 0\n  b = 1\n  print('Fibonacci sequence:')\n  while a < n:\n    print(a, end=' ')\n    tmp_var = a\n    a = b\n    b = tmp_var + b\n\nnum = int(input(\"Enter positive number: \"))\nprint_fibonacci(num)", "category": "Python"}, {"instruction": "Given two arrays of integers, find a pair of values (one from each array) that you can swap to give the two arrays the same sum.", "input": "[1, 2, 3, 4], [3, 2, 1, 4]", "output": "def find_pair(arr1, arr2):\n    sum_arr1 = sum(arr1)\n    sum_arr2 = sum(arr2)\n    diff = abs(sum_arr1 - sum_arr2)\n\n    for x in arr1:\n        for y in arr2:\n            if x + y == diff:\n                return (x, y)\n\n    return -1", "category": "Python"}, {"instruction": "Generate a hash of a given string using the SHA-256 algorithm in Python.", "input": "string = \"Hello World\"", "output": "import hashlib\n\nstring = \"Hello World\"\nresult = hashlib.sha256(string.encode()).hexdigest()\nprint(result)  # output: \"a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e\"", "category": "Python"}, {"instruction": "How would you collect data from websites using Scrapy?", "input": "", "output": "Scrapy is a Python framework used for web scraping. It can be used to extract data from websites using a variety of techniques. The first step is to create a Scrapy project and define the items you want to scrape. After that, create a Spider class which is responsible for crawling and extracting the data. Finally, you can use a range of methods like XPath and CSS selectors to collect the data.", "category": "Python"}, {"instruction": "Write a function to generate a random permutation of a given array.", "input": "[1, 2, 3, 4, 5]", "output": "import random \n  \ndef random_permutation(input_list): \n    n = len(input_list) \n    for i in range( n - 1 ):\n        j = random.randint(i, n-1)\n        input_list[i], input_list[j] = input_list[j], input_list[i] \n    return input_list", "category": "Python"}, {"instruction": "Develop a function in python to check if a given word can be formed with the given set of letters.", "input": "Set of letters: 'abeos'\nWord: 'seabed'", "output": "def can_form_word(set_letters, word):\n    flag = True\n    for letter in word:\n        if letter not in set_letters:\n            flag = False\n            break\n    return flag", "category": "Python"}, {"instruction": "Come up with a python code to find the mean of a list of numbers.", "input": "nums = [78, 79, 79, 79, 79, 80]", "output": "total = 0\nfor num in nums:\n    total += num\nmean = total/len(nums)\nprint(mean)", "category": "Python"}, {"instruction": "Implement a function which takes an array and returns the maximum number.", "input": "[2, 4, 8, 6]", "output": "def max_num(arr):\n    n = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > n:\n            n = arr[i]\n    return n\n\nmax_num([2, 4, 8, 6]) # Output: 8", "category": "Python"}, {"instruction": "Suggest a code to add the values of all odd numbers in an array.", "input": "arr = [1, 2, 3, 4, 5, 6]", "output": "total = 0\nfor num in arr:\n    if num % 2 == 1:  # Check if num is odd\n        total += num", "category": "Python"}, {"instruction": "What is the meaning of the modulo operator in python?", "input": "", "output": "In Python, the modulo operator (also known as the \u201cremainder\u201d or \u201cmodulus\u201d operator) is the percentage sign (%). It is used to calculate the remainder after division of one number by another. For example, the expression \u201c7 % 3\u201d will evaluate to 1. This means that the remainder after 7 is divided by 3 is 1. Generally, the syntax for this operation is \u201ca % b\u201d, where a and b are numbers. The result of this operation is the remainder after a is divided by b.", "category": "Python"}, {"instruction": "For the following function, suggest a test case that can be used to check the correctness of the function.", "input": "def find_mode(arr):\n    \"\"\"\n    Function to find the mode of a list\n    Parameters:\n        arr: The list of values\n    Returns:\n        The mode of the list\n    \"\"\"", "output": "A test case that can be used to check the correctness of the function is to pass the list [1, 1, 2, 3, 3, 3] to the function. The function should return 3 as the mode, which is the element that appears most frequently in the list.", "category": "Python"}, {"instruction": "Suggest a code to get the smallest and largest number in an unsorted list.", "input": "", "output": "def get_smallest_largest(arr):\n    \"\"\"\n    Function to return the smallest and largest numbers in a list\n    Parameters:\n        arr: An unsorted list of numbers\n    Returns:\n        A tuple containing the smallest and largest numbers in the list\n    \"\"\"\n    smallest = arr[0]\n    largest = arr[0]\n\n    for elem in arr:\n        if elem < smallest:\n            smallest = elem\n        if elem > largest:\n            largest = elem\n    \n    return (smallest, largest)", "category": "Python"}, {"instruction": "Convert the following python code to an equivalent JavaScript code.", "input": "for item in items:\n    print(item)", "output": "items.forEach(item => {\n    console.log(item);\n});", "category": "Python"}, {"instruction": "How do you compare two numbers, num1 and num2, in python?", "input": "", "output": "We can compare two numbers, num1 and num2, in Python using the comparison operators. These are the equality operators (== and !=), the relational operators (> and <) and the logical operators (and, or, not). For example, ``num1 == num2`` checks if two numbers are equal, ``num1 > num2`` checks if num1 is greater than num2, and ``num1 < num2`` checks if num1 is less than num2. We can also use logical operators like ``num1 > num2 and num2 < num3``, which checks if num1 is greater than num2 and num2 is less than num3.", "category": "Python"}, {"instruction": "Create a neural network to classify types of dogs", "input": "", "output": "import keras\nimport numpy as np\nfrom keras.layers import Dense\nfrom keras.models import Sequential\n\n# Building a Sequential model\nmodel = Sequential()\n# Input layer with 2 neurons\nmodel.add(Dense(2, input_dim=64, activation='relu'))\n# Hidden layer with 3 neurons\nmodel.add(Dense(3, activation='relu'))\n# Output layer with 15 neurons (15 classes)\nmodel.add(Dense(15, activation='softmax'))\n\n# Compiling and training the model\nmodel.compile(loss='mean_squared_error',\n              optimizer='adam',\n              metrics=['accuracy'])\nmodel.fit(training_samples, labels, epochs=100)", "category": "Python"}, {"instruction": "Merge two sorted linked lists and return it as a new list.", "input": "", "output": "def merge_sorted_lists(list1, list2):\n    \"\"\" Merges two sorted linked lists and returns it as a new list\n    \n    Args:\n        list1 (list): The first sorted linked list \n        list2 (list): The second sorted linked list\n        \n    Returns:\n        list: The merged sorted linked list\n    \"\"\"\n    # Initialize the merged list\n    merged_list = []\n    \n    # Initialize the pointers\n    i = 0\n    j = 0\n\n    # Iterate over the two lists\n    while i < len(list1) and j < len(list2):\n        # Add the element with the smaller value to the merged list\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    \n    # Add the remaining elements to the merged list\n    while i < len(list1):\n        merged_list.append(list1[i])\n        i += 1\n    \n    while j < len(list2):\n        merged_list.append(list2[j])\n        j += 1\n    \n    return merged_list", "category": "Python"}, {"instruction": "Print the nth element from a spin lock sequence using only O(1) space.", "input": "", "output": "def get_spinlock_element(n):\n    \"\"\" Prints the nth element from a spin lock sequence using only O(1) space\n    \n    Args:\n        n (int): The number of the element to be retrieved\n        \n    Returns:\n        int: The nth element\n    \"\"\"\n    # Initialize the step size\n    step_size = 343\n    \n    # Find the previous two elements in the iteration\n    first = 0\n    second = 0\n    \n    # Initialize the index of the element to be retrieved\n    index = 0\n    \n    # Iterate over the elements until we reach the desired element\n    while index < n:\n        # Generate the next element in the sequence\n        element = first + second + 1\n        \n        # Update the previous two elements\n        first, second = second, element\n        \n        # Move the index\n        index += step_size\n    \n    # Return the element at the nth position\n    return element", "category": "Python"}, {"instruction": "Write a code to generate n terms of the Fibonacci sequence.", "input": "", "output": "def get_fibonacci(n):\n    \"\"\" Generates n terms of the Fibonacci sequence\n    \n    Args:\n        n (int): The number of Fibonacci terms to generate\n        \n    Returns:\n        list: A list of the first n Fibonacci numbers\n    \"\"\"\n    # Initialize first two Fibonacci numbers\n    a = 0\n    b = 1\n\n    # Initialize the Fibonacci Sequence list\n    fibonacci_sequence = []\n    fibonacci_sequence.append(a)\n    fibonacci_sequence.append(b)\n\n    # Generate the Fibonacci Sequence\n    while len(fibonacci_sequence) < n:\n        c = a + b\n        fibonacci_sequence.append(c)\n        a = b\n        b = c\n\n    return fibonacci_sequence", "category": "Python"}, {"instruction": "Write a code snippets in Python to print the contents of a dictionary.", "input": "{\"key1\": \"value1\", \"key2\": \"value2\"}", "output": "for key, value in dict.items():\n   print(\"Key: {}, Value: {}\".format(key, value))", "category": "Python"}, {"instruction": "Explain in detail what is the significance of a local variable in Python", "input": "", "output": "A local variable in Python is a variable that is declared within a function or a class. It is a variable that only exists in the context of that function or class, and cannot be accessed outside the function or class in which it is declared. Local variables are also referred to as \"lexical\" or \"automatic\" variables because they are automatically scoped to the function or class in which they are declared. They are different from global variables, which are available to the entire program. Local variables are helpful in limiting the scope of a variable, which means that the variable is only accessible in the function or class in which it is declared. This can help make code more efficient, clear, and secure.", "category": "Python"}, {"instruction": "Construct a regular expression pattern in Python that matches all emails.", "input": "", "output": "pattern = r\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,63}$\"", "category": "Python"}, {"instruction": "Create a function to search for a given element in a list and output its index.", "input": "list_numbers = [1, 2, 3, 4, 5]", "output": "def search_list(list_numbers, element):\n    for i in range(len(list_numbers)):\n        if list_numbers[i] == element:\n            return i", "category": "Python"}, {"instruction": "Output the total number of elements in a given list.", "input": "list_numbers = [1, 2, 3, 4, 5]", "output": "def count_list_elements(list_numbers):\n    count = 0\n    for element in list_numbers:\n        count += 1\n    return count", "category": "Python"}, {"instruction": "Create a function to compare two strings and output their similarity score.", "input": "string_1 = \"python\"\nstring_2 = \"coding\"", "output": "def compare_strings(string_1, string_2):\n    similarity_score = 0\n    n = min(len(string_1), len(string_2))\n    for i in range(n): \n        if string_1[i] == string_2[i]: \n            similarity_score += 1\n    return similarity_score", "category": "Python"}, {"instruction": "What is the command to run a Python script from the command line?", "input": "", "output": "The command to run a Python script from the command line is `python filename.py`.", "category": "Python"}, {"instruction": "What data structure would be best to store an employee roster containing their name, age, and gender?", "input": "", "output": "The best data structure for storing an employee roster containing their name, age, and gender would be a hash table. A hash table is a data structure that allows for fast lookups and inserts by mapping values to keys. Each employee can be stored as a key-value pair, with their name, age, and gender as the respective values.", "category": "Python"}, {"instruction": "Create a Python function that prints all the values in a dictionary.", "input": "Dictionary:  { \"a\": 1, \"b\": 2, \"c\": 3 }", "output": "def printDictValues(dict):\n\u00a0\u00a0\u00a0\u00a0for key, value in dict.items():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(value)\n\nprintDictValues({\"a\": 1, \"b\": 2, \"c\": 3})", "category": "Python"}, {"instruction": "Create a code snippet to print the star pattern below in Python.", "input": "", "output": "# Print the pattern \nrows = 5\nfor i in range(0, rows): \n    for j in range(0, i + 1): \n        print(\"*\", end=' ') \n    print(\"\\r\")", "category": "Python"}, {"instruction": "Create a function to calculate the sum of numbers from a given list in Python.", "input": "", "output": "def sum_list(list):\n    \"\"\"Calculate the sum of numbers from a given list\"\"\"\n    # Initialize sum\n    s = 0\n    # Sum the list\n    for number in list:\n        s += number\n    # Return the result\n    return s", "category": "Python"}, {"instruction": "Improve the following code snippet to make it more efficient and organized.", "input": "def printElements(list):\n  for element in list:\n    print(element)", "output": "def printElements(list):\n    \"\"\"Print all elements of a given list.\"\"\"\n    # Check if list is empty\n    if not list:\n        print(\"List is empty\")\n    # Loop through the list\n    else:\n        for element in list:\n            print(element)", "category": "Python"}, {"instruction": "Develop a Python function to append a number with zeros to a given string up to a maximum number of characters.", "input": "string = \"some_string\", max_len = 10", "output": "def append_num_with_zeros(string, max_len):\n    \"\"\"Append a number with zeros to a given string up to a maximum number of characters.\"\"\"\n    # Convert string to list\n    ls = list(string)\n    # Calculate number of zeros required to append\n    num_zeros = max_len - len(string)\n    # Append zeros\n    for i in range(num_zeros):\n        ls.append('0')\n    # Convert list back to string\n    return ''.join(ls)", "category": "Python"}, {"instruction": "Use conditionals and a for loop to return the sum of all odd numbers up to a given number.", "input": "", "output": "def sum_odd_nums(n):\n    total = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            total += i\n    return total", "category": "Python"}, {"instruction": "Generate a code that creates a dictionary from two different lists with equal length.", "input": "list1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]", "output": "def create_dictionary(list1, list2):\n    if len(list1) != len(list2):\n        return \"lists have different lengths\"\n    else:\n        my_dict = dict(zip(list1, list2))\n        return my_dict\n\nlist1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]\nprint(create_dictionary(list1, list2)) #output: {'a': 1, 'b': 2, 'c': 3}", "category": "Python"}, {"instruction": "Explain the concept of assembly language.", "input": "", "output": "Assembly language is a low-level programming language that provides a symbolic representation of the machine instructions for a specific processor or family of processors. It is typically used when writing code for embedded systems, or when the target processor and/or instruction set of the program is not well-known. Assembly language is generally used when more control over the memory management and data layout of a program is desired. It also allows for generating more efficient code since the code can be tailored for the target processor and instruction set.", "category": "Python"}, {"instruction": "Construct an algorithm to fulfill the following purpose", "input": "Find the two numbers that add up to a given number N.", "output": "def twoSum(N, arr):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == N:\n                return (arr[i], arr[j])", "category": "Python"}, {"instruction": "Implement Quicksort in Python to sort this list of integers.", "input": "[8, 5, 3, 9, 1]", "output": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n\n    return quicksort(left) + middle + quicksort(right)\n\nsorted_arr = quicksort([8, 5, 3, 9, 1])\n \nprint(sorted_arr)", "category": "Python"}, {"instruction": "What is aHeap data structure?", "input": "", "output": "A heap is a specialized tree-based data structure in which the root-node key is compared with the keys of its children and arranged accordingly. It is typically used to implement priority queues where the key for each item is based on its priority. Heaps are also used for sorting, representing graphs, and as a data structure for the heapsort sorting algorithm.", "category": "Python"}, {"instruction": "Create a function my_func in Python that accepts three integers x, y and z as parameters and returns the maximum.", "input": "", "output": "def my_func(x, y, z):\n  max_num = max(x, y, z)\n  return max_num", "category": "Python"}, {"instruction": "Why is overflow an issue in computer science?", "input": "", "output": "In computer science, overflow occurs when the result of a computation exceeds the capacity of its data type, resulting in Loss of accuracy or erroneous answers from a computation. Certain programming errors lead to overflow, such as incrementing a counter past the capacity of its assigned data type, or calculating a value far greater than the data type is designed to handle. Overflow can result in critical errors like stepping off the end of an array or incorrect mathematical expressions. It is important to be aware of overflow and anticipate it in order to be able to prevent it with proper error checking.", "category": "Python"}, {"instruction": "Build a machine learning model using scikit-learn to predict the house prices in Boston.", "input": "- Number of rooms: 3 \n- Average number of rooms per dwelling: 6 \n- Proportion of residential land zoned for lots over 25,000 sq.ft: 0.4\n- Index of accessibility to radial highways: 4\n- Full-valuation property-tax rate per $10,000: 300", "output": "import sklearn\nfrom sklearn.linear_model import LinearRegression\n\n# Create feature and label\nX = [[3,6,0.4,4,300]]\ny = [[BostonHousePrice]]\n\n# Create and fit the linear regression model\nreg = LinearRegression().fit(X, y)\n\n# Predict the output\nprediction = reg.predict([[3,6,0.4,4,300]])[0][0]", "category": "Python"}, {"instruction": "Convert this list into a numpy array and sort it.", "input": "[3, 5, 1, 9, 6]", "output": "import numpy as np\n\n# Convert to numpy array\narr = np.array([3, 5, 1, 9, 6])\n\n# Sort the array\narr.sort()\n\n# Print the sorted array\nprint(arr)", "category": "Python"}, {"instruction": "Construct a for loop to print a user-defined pattern.", "input": "*\n**\n***\n****", "output": "for i in range(1, 5):\n    for j in range(0, i):\n        print(\"*\", end=\"\")\n    print() # add a new line", "category": "Python"}, {"instruction": "Write a code to print out all the even numbers in the range 0 to 10.", "input": "", "output": "for i in range(0, 11):\n    if i%2 == 0:\n        print(i)", "category": "Python"}, {"instruction": "What is the standard indentation size for Python code?", "input": "", "output": "The standard indentation size for Python code is 4 spaces.", "category": "Python"}, {"instruction": "Create a class to create a naive bayes model.", "input": "", "output": "class NaiveBayesModel: \n    def __init__(self): \n        pass \n      \n    def train(self, data, labels): \n        self.prior_probability = self.calculatePriorProbabilities(labels)\n        self.likelihoods = self.calculateLikelihoods(data, labels)\n    \n    def calculatePriorProbabilities(self, labels): \n        labels_counts = {} \n        for label in labels: \n            if label not in labels_counts: \n                labels_counts[label] = 0 \n            labels_counts[label] += 1 \n              \n        return {label: count/len(labels)\n                for label, count in labels_counts.items()} \n\n    def calculateLikelihoods(self, data, labels): \n        likelihoods = {} \n        for feature, values in data.items(): \n            likelihoods[feature] = {} \n            for label in labels: \n                for value in values: \n                    pass # complete the calculation\n                    \n        return likelihoods", "category": "Python"}, {"instruction": "Write a function to find all distinct permutations of a given list", "input": "[1,2,3]", "output": "def permute(nums):\n    # base case when only one element in the list\n    if len(nums) == 1:\n        return [nums] \n  \n    permutations = []\n    for i in range(len(nums)): \n        m = nums[i] \n \n        # extract remaining list \n        remain = nums[:i] + nums[i+1:] \n  \n        # Iterate over remaining list and \n        # generate all permutations \n        for p in permute(remain): \n            permutations.append([m] + p) \n  \n    return permutations", "category": "Python"}, {"instruction": "Generate a method in Python to sort a given list of dictionaries.", "input": "list_dict = [{'name': 'a', 'age': 23}, {'name': 'b', 'age': 19}, {'name': 'c','age': 36}]", "output": "def dict_sort(list_dict): \n    sorted_dict = sorted(list_dict, key = lambda x: x['age']) \n    return sorted_dict", "category": "Python"}, {"instruction": "Generate a shorthand method in Python to replace all 0s with 1.", "input": "input_list = [1, 0, 1, 0, 0]", "output": "def replace_zeros(input_list): \n    output_list = [x if x != 0 else 1 for x in input_list] \n    return output_list", "category": "Python"}, {"instruction": "Create a function in python that takes a string and returns a new string with the same letter count but in ascending order", "input": "word = \u201ctweet\u201d", "output": "def ascending_order(word):\n    list = []\n    for letter in word:\n        list.append(letter)\n    sorted_list = sorted(list)\n    return \"\".join(sorted_list)", "category": "Python"}, {"instruction": "Add a function to the existing code that takes an integer value as input and prints a square of '*' characters.", "input": "def print_square(length):", "output": "def print_square(length):\n  for i in range(0, length):\n    for j in range(0, length):\n      print(\"*\", end=\"\")\n    print(\"\")", "category": "Python"}, {"instruction": "Create a loop in Python that counts down from 10 to 0.", "input": "", "output": "for i in range(10, 0, -1):\n  print(i)", "category": "Python"}, {"instruction": "Create an algorithm in Python to calculate the compound interest", "input": "", "output": "def compound_interest(principal, rate, time): \n  \n    # Calculates compound interest\n    CI = principal * (pow((1 + rate / 100), time))  \n    return CI \n  \n# Driver Code \nprincipal=8000\nrate=3\ntime=5\n  \nprint(\"Compound interest is\", compound_interest(principal, rate, time))", "category": "Python"}, {"instruction": "Create a NumPy array containing three zeros and three ones.", "input": "", "output": "np.array([0, 0, 0, 1, 1, 1])", "category": "Python"}, {"instruction": "Find all substrings of a string that are palindromes in Python.", "input": "", "output": "def get_all_palindromes(input_string):\n    palindromes = []\n    for substring_length in range(len(input_string)):\n        for i in range(len(input_string) - substring_length + 1):\n            sub_string = input_string[i: i + substring_length]\n            if sub_string == sub_string[::-1]:\n                palindromes.append(sub_string)\n    return palindromes\n\n# Usage\npalindromes = get_all_palindromes(\"banana\")\nprint(palindromes) # ['a', 'ana', 'anana', 'b', 'na', 'nana']", "category": "Python"}, {"instruction": "Generate a recursive function for calculating the factorial of a number.", "input": "", "output": "def factorial(num):\n    # base case\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)\n\n# Usage\nprint(factorial(3)) # 6", "category": "Python"}, {"instruction": "What type of data structure would you use to store key-value pairs in a Python program?", "input": "", "output": "The data structure to use for key-value pairs in Python is a dictionary. A dictionary is a data type that consists of key-value pairs, and is denoted by {} in Python. Each key has a unique value associated with it that can be accessed using the key. For example, a dictionary called \"person\" could look like this: \n\nperson = {'name':'John', 'age': 32} \n\nThe value of the key \"name\" can be accessed using person['name'] which returns \"John\".", "category": "Python"}, {"instruction": "Modify the given Python code to calculate the sum of the given list and print the output.", "input": "list = [1,2,3,4,5]", "output": "def sumList(list): \n    sum = 0\n    for i in list:\n        sum = sum + i\n    return sum\n\nprint(sumList(list))", "category": "Python"}, {"instruction": "Create a generator to produce \"hello world\" ten times", "input": "", "output": "def hello_world_generator():\n    for _ in range(10):\n        yield \"Hello World\"", "category": "Python"}, {"instruction": "Edit the existing code to accept more than two arguments", "input": "def get_sum(a, b):\n    return a + b", "output": "def get_sum(*args):\n    sum = 0\n    for number in args:\n        sum += number\n\n    return sum", "category": "Python"}, {"instruction": "What are the advantages of using a while loop over a for loop in Python?", "input": "", "output": "The main advantages of using a while loop over a for loop in Python are that it is more concise and allows the user to have better control over the iteration process. For example, the while loop allows the user to specify an exit condition if a certain condition is met, mid-way through the loop. Furthermore, while loop allows the user to dynamically change the number of times the loop is executed based on a condition or an expression. This is not possible in for loops as the user needs to specify the exact number of iterations beforehand.", "category": "Python"}, {"instruction": "Create a sorting algorithm", "input": "", "output": "def sort(arr):\n    n = len(arr)\n    \n    # Various loops to sort the array \n    for i in range(n): \n        min_idx = i \n        for j in range(i+1, n): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n    return arr", "category": "Python"}, {"instruction": "Solve the following problem", "input": "Given two strings s and t, find the minimum window in s which will contain all the characters in t.", "output": "def minWindow(s, t): \n    # Initialize with None \n    minWindowLength = None\n    leftIndex = 0 \n          \n    # Balance will act as alphabet to store the occurrence of each character in t \n    balance = {}\n    for char in t:\n        if char not in balance:\n            balance[char] = 1\n        else:\n            balance[char] += 1\n              \n    # leftIndex and rightIndex act as two poiners to traverse the list\n    leftIndex = 0\n    rightIndex = 0\n    charactersFound = 0\n    # Start traversal from left \n    for i in range(len(s)): \n          \n        # If character present in t \n        if s[i] in balance: \n              \n            # Decrease its counter by 1 \n            balance[s[i]] -= 1  \n              \n            # if the character is found first time \n            if balance[s[i]] == 0: \n                charactersFound += 1\n                  \n        # If all characters present \n        if charactersFound == len(balance): \n            # Check the right side window \n            while(rightIndex <= i and charactersFound == len(balance)): \n                  \n                # remove the left side character \n                if s[leftIndex] in balance: \n                    if balance[s[leftIndex]] == 0: \n                        charactersFound -= 1\n  \n                    # Increase the counter of that character \n                    balance[s[leftIndex]] += 1\n                      \n                # Calculate the minimum window\n                if minWindowLength == None or (i-leftIndex+1) < minWindowLength: \n                    minWindowLength = i-leftIndex+1\n                      \n                leftIndex += 1\n                  \n    return minWindowLength", "category": "Python"}, {"instruction": "Design an algorithm to find the maximum subarray of an array of numbers.", "input": "", "output": "def max_subarray(arr): \n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(len(arr)): \n        max_ending_here = max_ending_here + arr[i] \n        if max_ending_here < 0: \n            max_ending_here = 0\n        if (max_so_far < max_ending_here): \n            max_so_far = max_ending_here \n    return max_so_far", "category": "Python"}, {"instruction": "Create a function that takes two strings and returns a boolean representing whether or not the strings are anagrams of one another.", "input": "", "output": "def is_anagram(string1, string2):\n\n    # remove whitespaces\n    string1 = string1.replace(\" \",\"\")\n    string2 = string2.replace(\" \",\"\")\n\n    # check length\n    if len(string1) != len(string2):\n        return False\n\n    # create counters\n    counter = {}\n    for letter in string1:\n        if letter in counter :\n            counter[letter] += 1\n        else:\n            counter[letter] = 1\n            \n    for letter in string2:\n        if letter in counter:\n            counter[letter] -= 1\n        else:\n            return False\n        \n    # Check all values are 0\n    for key in counter:\n        if counter[key] != 0:\n            return False\n    \n    return True", "category": "Python"}, {"instruction": "Find the number of times the substring \u201cab\u201d appears in the given string.", "input": "text = \"abraacadabrabracabracabracabra\"", "output": "def count_substring(string, sub_string): \n    count = 0\n  \n    #Loop over the length of string \n    for i in range(0, len(string)): \n        # If a part of string matches with sub_string \n        #increment count  \n        if (string[i:i+ len(sub_string)] ==sub_string): \n            count += 1\n  \n    return count \n\ncount = count_substring(text, 'ab') \nprint(\"Number of substring occurrences: \", count)", "category": "Python"}, {"instruction": "Design a function that takes a number, n, and returns the n\u2019th Fibonacci number. Remember that the Fibonacci sequence begins with 0, 1, and each subsequent number is the sum of the previous two numbers.", "input": "", "output": "def Fibonacci_number(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci_number(n-1)+Fibonacci_number(n-2)", "category": "Python"}, {"instruction": "Construct a Python program to print the numbers from 1 to 10 on a single line.", "input": "", "output": "for i in range(1,11):\n  print(i, end=\" \")", "category": "Python"}, {"instruction": "Create a stand-alone Python script to print the sum of all the divisors of a number.", "input": "", "output": "def printDivisorSum(num): \n   \n    sum = 0\n    i = 1\n  \n    while i <= num / 2: \n  \n        if num % i == 0: \n            sum = sum + i \n        i = i + 1\n  \n    print(\"Sum of divisors of \" + str(num) + \" is \" + str(sum)) \n\nnum = 16\nprintDivisorSum(num)", "category": "Python"}, {"instruction": "Explain the basic logic for a linear search algorithm.", "input": "", "output": "A linear search algorithm is a basic searching algorithm for finding an item in an array of items. It operates by comparing each item in the array sequentially with the target value until the target value is found or the end of the array is reached. To perform a linear search, the algorithm begins by considering the first element of the array and then moving on to every subsequent element in order until the target value is found. If the target value is not found, a linear search terminates when the end of the elements is reached.", "category": "Python"}, {"instruction": "Given a matrix, write a program to fill it with zeroes in constant time and space complexity.", "input": "", "output": "def fill_matrix_zeros(matrix):\n    n, m = len(matrix), len(matrix[0])\n    col0_zero = False\n    for i in range(n):\n        if matrix[i][0] == 0:\n            col0_zero = True\n        for j in range(1, m):\n            if matrix[i][j] == 0:\n                matrix[i][0] = 0\n                matrix[0][j] = 0\n\n    for i in range(1, n):\n        for j in range(1, m):\n            if matrix[i][0] == 0 or matrix[0][j] == 0:\n                matrix[i][j] = 0\n\n    if matrix[0][0] == 0:\n        for j in range(m):\n            matrix[0][j] = 0\n\n    if col0_zero:\n        for i in range(n):\n            matrix[i][0] = 0", "category": "Python"}, {"instruction": "Given an array of integers, write a program to find the number of triplets that satisfy the triangle inequality.", "input": "", "output": "def find_num_triplets(arr):\n    arr.sort()\n    count = 0\n    for i in range(len(arr) - 2):\n        for j in range(i + 1, len(arr) - 1):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] > arr[k]:\n                    count += 1\n    return count", "category": "Python"}, {"instruction": "Given a linked list, reverse its order of nodes.", "input": "", "output": "def reverse_linked_list(head):\n    if head is None or head.next is None:\n        return head\n    prev = None\n    curr = head\n    while curr is not None:\n        prev, curr.next, curr = curr, prev, curr.next\n    return prev", "category": "Python"}, {"instruction": "Given an array of words, replace each character with the corresponding number from the English alphabet (e.g. a=1, b=2 ...z=26), and find the computed sum.", "input": "[\"cat\", \"dog\"]", "output": "def find_sum(words):\n    total_sum = 0 \n    for word in words: \n        for c in word:\n            total_sum += ord(c) - 96\n    return total_sum", "category": "Python"}, {"instruction": "Suggest a suitable algorithm for clustering data points.", "input": "", "output": "The k-means clustering algorithm is a suitable algorithm for clustering data points. It is an iterative algorithm that works by assigning data points to clusters and then computing the centroids of the clusters. The algorithm is repeated until a desired outcome is reached. This algorithm works well for grouping similar data points in a dataset.", "category": "Python"}, {"instruction": "Explain how to find the sum of all elements in an array using recursive approach.", "input": "", "output": "The recursive approach to finding the sum of all elements in an array is to consider the array as a combination of two subarrays. We first calculate the sum of the first subarray and then for the second subarray. The total sum of elements in the array can be found by adding the sum of the two subarrays. This process is repeated until the size of the array is 0, at which point the final sum is returned. This approach is known as the divide and conquer algorithm.", "category": "Python"}, {"instruction": "Write a web crawler in Python to extract only the text content from a given website.", "input": "", "output": "# import the necessary libraries\nimport requests\nfrom bs4 import BeautifulSoup\n\n# define the web crawler\ndef web_crawler(url):\n    # make the request to the specified url\n    page = requests.get(url)\n    page_content = page.content\n    # parse the received content\n    soup = BeautifulSoup(page_content, 'lxml')\n    text_content = soup.find_all(text=True)\n    # return only the text content\n    return [s.strip() for s in text_content if s.strip()]", "category": "Python"}, {"instruction": "Code a function in Python to generate random numbers within a given range.", "input": "", "output": "import random\n\ndef random_num_gen(start, end):\n    return random.randint(start, end)", "category": "Python"}, {"instruction": "Design a function using Python to remove all vowels from a string.", "input": "", "output": "def remove_vowels(string):\n    vowels = 'aeiouAEIOU'\n    new_string = ''\n    for char in string:\n        if char not in vowels:\n            new_string += char\n            \n    return new_string", "category": "Python"}, {"instruction": "Write a Python method to extract only the numeric values from a string.", "input": "", "output": "def extract_num(string): \n    return [word for word in string.split() if word.isdigit()]", "category": "Python"}, {"instruction": "Use the provided dataset to create a Corpus of English words in Python.", "input": "https://storage.googleapis.com/download.tensorflow.org/data/grammar_corpus.txt", "output": "f = open('grammar_corpus.txt', 'r')\n\n# Create an empty list to store the corpus\ncorpus = []\n\n# Loop through the file line by line \nfor line in f: \n    # Split the line into words \n    words = line.lower().strip().split()\n    \n    # Check if the word is an english word \n    if words[1].isalpha(): \n        corpus.append(words[1]) \n \nf.close()\nprint(corpus)", "category": "Python"}, {"instruction": "Compute the area of the circle where the radius is 5 inches in Python.", "input": "", "output": "import math \n  \nradius = 5 \narea = math.pi * (radius**2) \n\nprint(\"The area of the circle is\", area)", "category": "Python"}, {"instruction": "What is the maximum length of a string in Python?", "input": "", "output": "The maximum length of a string in Python is sys.maxsize, which is typically 2^63 - 1 on a 64-bit machine. This means that the maximum length of a string is 18,446,744,073,709,551,615 characters.", "category": "Python"}, {"instruction": "Write a code to convert HTML to Markdown using Python.", "input": "", "output": "import markdown\nimport re\n\ndef convert_html_to_markdown(html):\n  lines = html.split('\\n')\n  for line in lines:\n    line = markdown.markdown(line)\n    # remove HTML tags\n    line = re.sub(r'<[^>]*>', '', line)\n    # strip whitespace\n    line = line.strip()\n    print line\n\nhtml = '<p>This is an example of HTML text.</p>'\nconvert_html_to_markdown(html)\n\n# Output\nThis is an example of HTML text.", "category": "Python"}, {"instruction": "Generate a permutation of a given list of numbers.", "input": "", "output": "import itertools \n  \ndef perms(lst): \n  perm = itertools.permutations(lst) \n  for i in list(perm): \n    print(i)", "category": "Python"}, {"instruction": "Parse a given string and extract the name from it.", "input": "string = \"Hi! My name is John Smith\"", "output": "def extract_name(string):\n    \"\"\"\n    Parse a given string and extract the name from it.\n\n    Parameters\n    ----------\n    string : str\n        The string to parse\n\n    Returns\n    -------\n    name : str\n        The extracted name\n    \"\"\"\n    # Split the string by words\n    words = string.split()\n    \n    # The last word is the name\n    name = words[-1]\n\n    return name\n\nstring = \"Hi! My name is John Smith\"\nprint(extract_name(string)) # Outputs \"John Smith\"", "category": "Python"}, {"instruction": "Search a list to find a string and return its index.", "input": "string_list = [\"apple\", \"banana\", \"orange\"]\nsearch_term = \"orange\"", "output": "def search_list(string_list, search_term):\n    \"\"\"\n    Search a list for a given string and return its index.\n\n    Parameters\n    ----------\n    string_list : list\n        The list to search\n    search_term : str\n        The string to search for\n\n    Returns\n    -------\n    index : int\n        The index of the string in the list,\n        returns -1 if the string is not found\n    \"\"\"\n    for i, s in enumerate(string_list):\n        if s == search_term:\n            return i\n\n    return -1\n\nstring_list = [\"apple\", \"banana\", \"orange\"] \nsearch_term = \"orange\"\nprint(search_list(string_list, search_term)) # Outputs 2", "category": "Python"}, {"instruction": "Compute the number of ways for a host to select 3 items from a list of 8 options.", "input": "", "output": "def compute_combination(n, r):\n    \"\"\"\n    Compute the number of ways for a host to select 'r' items from\n    a list of 'n' options.\n\n    Parameters\n    ----------\n    n : int\n        The total number of items\n    r : int\n        The number of items to select\n\n    Returns\n    -------\n    num : int\n        The number of ways to select\n    \"\"\"\n    num = 1\n\n    # Calculate combination\n    for i in range(r):\n        num *= n - i\n    num //= math.factorial(r)\n    \n    return num\n\nn = 8\nr =  3\nprint(compute_combination(n, r)) # Outputs 336", "category": "Python"}, {"instruction": "Write a Python function that prints the first n even numbers.", "input": "", "output": "def print_even_numbers(n):\n    for i in range(2, n*2, 2): \n        print(i)", "category": "Python"}, {"instruction": "Write a code snippet to loop through an array and check if the element is a number or not.", "input": "data = [1, 'a', 'b', 2]", "output": "for item in data:\n    if type(item) == int:\n        print(\"Element is a number!\")\n    else:\n        print(\"Element is not a number!\")", "category": "Python"}, {"instruction": "Create a function to represent a decimal number in its binary form.", "input": "", "output": "def decimal_to_binary(num):\n\nresult = \"\"\n\nwhile num > 0:\n remainder = num % 2 \n result = str(remainder) + result\n num = num // 2\n\nreturn result", "category": "Python"}, {"instruction": "Transform a given XML document into a JSON object using Python.", "input": "", "output": "import xmltodict\n\n# open the XML document\nwith open(\"document.xml\") as f:\n  xml_data = f.read()\n\n# convert to json\njson_data = xmltodict.parse(xml_data)\n\n# print the JSON object\nprint(json.dumps(json_data, indent=2))", "category": "Python"}, {"instruction": "Write a code to check for a valid zip code in US.", "input": "", "output": "def is_valid_zip_code(zip_code):\n    \"\"\" Function to check whether the given zip code is valid in the US \"\"\"\n    valid_zip_code_pattern = re.compile(r\"^[0-9]{5}(?:-[0-9]{4})?$\")\n    if valid_zip_code_pattern.match(zip_code):\n        return True\n    return False\n\n# Let's test it\nzip_code = \"12345\"\nprint(is_valid_zip_code(zip_code)) # Output: True", "category": "Python"}, {"instruction": "Write a code to extract all the hyperlinks from a Wikipedia page.", "input": "", "output": "# Importing necessary libraries\nimport bs4\nimport requests\n\n# Fetching the data\nurl = \"https://en.wikipedia.org/wiki/Main_Page\"\nresponse = requests.get(url)\nsoup = bs4.BeautifulSoup(response.text)\n\n# Extracting hyperlinks\nlinks = []\nfor link in soup.find_all('a'):\n    links.append(link.get('href'))\n\n# Printing all hyperlinks present in the page\nprint(links)", "category": "Python"}, {"instruction": "Create a function that takes two parameters and returns an array with those two numbers in it.", "input": "", "output": "def create_array(param1, param2):\n    \"\"\"A function that takes two parameters and returns an array with those two numbers in it.\"\"\"\n    arr = [param1, param2]\n    return arr\n\n# Let's test it\narr = create_array(1, 5)\nprint(arr) # Output: [1, 5]", "category": "Python"}, {"instruction": "Write a code to classify emails as spam or not-spam using Naive Bayes algorithms.", "input": "", "output": "# Importing necessary libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Loading the dataset\ndf = pd.read_csv('emails.csv')\n\n# Feature engineering\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(df['message'])\ny = df['label']\n\n# Training the model\nnb = MultinomialNB()\nnb.fit(X,y)\n\n# Classification \nexample_emails = [\"You won the lottery!\", \"I need some help with my homework\"]\nX_example = vectorizer.transform(example_emails)\npredicted_labels = nb.predict(X_example)\nprint(predicted_labels) # Output: [spam, not-spam]", "category": "Python"}, {"instruction": "Write a script in Python to take an age as an input and return a boolean which indicates if a person is a minor or not.", "input": "", "output": "def is_minor(age):\n    \"\"\"\n    Function to determine if a person is a minor or not\n    \"\"\"\n    if age < 18:\n        return True\n    else:\n        return False\n\n# Let's test it\nage = 18\nprint(is_minor(age)) # Output: False", "category": "Python"}, {"instruction": "Generate a HTTP request using Python to send a GET request to https://www.wikihow.com/Main-Page", "input": "", "output": "import requests\n\nurl = 'https://www.wikihow.com/Main-Page'\n\nresponse = requests.get(url)\n\nprint(response)", "category": "Python"}, {"instruction": "Given two data sets, one containing the user id (user_id) and first name (firstname) and another data set containing user_id and last name (lastname), write a Python function to join the two sets and create a new data set with firstname, lastname and user_id.", "input": "user_id: [1,3,4,7] \nfirstname: [\"John\", \"Alice\", \"Madison\", \"Peter\"] \nuser_id: [1,2,3,6]\nlastname: [\"Smith\", \"Jones\", \"Brown\", \"Miller\"]", "output": "def join_sets(user_id1, firstname, user_id2, lastname):\n    user_id = user_id1 + user_id2\n    names = firstname + lastname\n    result = []\n    for id in user_id:\n        firstname = [name for id, name in zip(user_id1, firstname) if id == id][0]\n        lastname = [name for id, name in zip(user_id2, lastname) if id == id][0]\n        result.append({\"user_id\": id, \"firstname\": firstname, \"lastname\": lastname})\n    return result", "category": "Python"}, {"instruction": "Generate a random string of a given length using different uppercase, lowercase characters, and digits.", "input": "", "output": "import string\nimport random\n\ndef random_string(length):\n    characters = string.ascii_letters + string.digits \n    return ''.join(random.choice(characters) for i in range(length))\n\nif __name__ == '__main__':\n    print(random_string(10))", "category": "Python"}, {"instruction": "Write an algorithm to determine if an input string is a palindrome.", "input": "racecar", "output": "def is_palindrome(string):\n      string = string.lower()\n      rev_string = string[::-1]\n      if string == rev_string:\n          return True\n      return False\n\nif __name__ == '__main__':\n  print(is_palindrome('racecar'))", "category": "Python"}, {"instruction": "Generate a unique 8 character string that contains a lowercase letter, an uppercase letter, a numerical digit, and a special character.", "input": "", "output": "import string\nimport random\n\ndef random_password_string():\n    characters = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.sample(characters, 8))\n    return password\n\nif __name__ == '__main__':\n    print(random_password_string())", "category": "Python"}, {"instruction": "Write a Python function to generate a random integer in the range of 1 to 10.", "input": "", "output": "import random\n\ndef random_int_1_10():\n    return random.randint(1, 10)\n\n\nif __name__ == '__main__':\n    print(random_int_1_10())", "category": "Python"}, {"instruction": "Create a Python code for printing the following pattern.", "input": "", "output": "# Pattern \nfor i in range(1,6):\n for j in range(1,i+1):\n  print(i,end=\"\")\n print(\"\")", "category": "Python"}, {"instruction": "Write a Python code that prints out the following patterns:", "input": "", "output": "# Pattern 1\nfor i in range(1, 10):\n    for j in range(1, i + 1):\n        print(\"*\", end=\" \")\n    print(\" \")\n\n# Pattern 2\nfor i in range(10, 0, -1):\n    for j in range(i, 0, -1):\n        print(\"*\", end=\" \")\n    print(\" \")", "category": "Python"}, {"instruction": "Find the number of times the element 2 appears in the following array", "input": "arr = [2, 3, 5, 7, 2, 6, 2]", "output": "count = 0\nfor num in arr:\n    if num == 2:\n        count += 1\nprint(count)", "category": "Python"}, {"instruction": "Modify the given code to sanitize the user input.", "input": "string = raw_input(\"Enter your text here: \")", "output": "import re\n\ndef sanitize(string):\n    string = re.sub(r'[^\\w\\s]','',string)\n    return string\n\nstring = sanitize(raw_input(\"Enter your text here: \"))", "category": "Python"}, {"instruction": "Create a dataframe in pandas", "input": "List of 7 employees, each with first name and last name.", "output": "import pandas as pd\n\ndata = [{\"first_name\":\"John\", \"last_name\":\"Doe\"},\n        {\"first_name\":\"Jane\", \"last_name\":\"Smith\"},\n        {\"first_name\":\"Tom\", \"last_name\":\"Johnson\"},\n        {\"first_name\":\"Sandy\", \"last_name\":\"Robinson\"},\n        {\"first_name\":\"Roger\", \"last_name\":\"McDonald\"},\n        {\"first_name\":\"Linda\", \"last_name\":\"Williams\"},\n        {\"first_name\":\"David\", \"last_name\":\"Miller\"}]\n\ndf = pd.DataFrame(data)", "category": "Python"}, {"instruction": "Given an array containing a string with duplicates, output an array with only unique strings.", "input": "['apple', 'apple', 'orange', 'kiwi', 'apple', 'banana', 'banana']", "output": "def remove_duplicates(arr): \n    unique_arr = []\n    for item in arr:\n        if item not in unique_arr:\n            unique_arr.append(item)\n    return unique_arr\n\n# Driver code \narr = ['apple', 'apple', 'orange', 'kiwi', 'apple', 'banana', 'banana'] \nprint (remove_duplicates(arr))", "category": "Python"}, {"instruction": "Write a code to print the power of 2 up to the given limit.", "input": "8", "output": "def power_of_two(n):\n    for i in range(0,n):\n        print(2**i,end=\" \")\n\nif __name__ == '__main__':\n    power_of_two(8)", "category": "Python"}, {"instruction": "Using the given list of strings, create a function to count and return the number of capital letters in the list.", "input": "", "output": "def count_capital_letters(string_list):\n  count = 0\n  for string in string_list:\n    for char in string:\n      if char.isupper():\n        count += 1\n  return count", "category": "Python"}, {"instruction": "Write a Python program to compute and return a list that contains every possible combination of two given lists.", "input": "list1 = [1,2]\nlist2 = [3,4]", "output": "def combine_lists(list1,list2):\n  result = []\n  for i in list1:\n    for j in list2:\n      result.append([i,j])\n  return result", "category": "Python"}, {"instruction": "Create a function to return all the indices in a string where a given substring occurs.", "input": "", "output": "def find_substring(main_string, substring):\n  indices = []\n  position = -1\n  while True:\n    position = main_string.find(substring, position + 1)\n    if position == -1:\n      break\n    indices.append(position)\n  return indices", "category": "Python"}, {"instruction": "Create a method that takes a string as a parameter and returns the number of unique characters present in the string.", "input": "python", "output": "def count_unique_characters(str):\n    characters = set()\n    for char in str:\n        characters.add(char)\n    return len(characters)", "category": "Python"}, {"instruction": "Write a test suite to test an arithmetic function that takes two arguments and returns the sum.", "input": "", "output": "import unittest\n\nclass TestArithmeticFunction(unittest.TestCase):\n    def test_sum(self):\n        self.assertEqual(arithmetic_function(2, 5), 7)\n        self.assertEqual(arithmetic_function(-4, 9), 5)\n        self.assertEqual(arithmetic_function(-2, 0), -2)\n\nif __name__ == '__main__':\n    unittest.main()", "category": "Python"}, {"instruction": "Create a function to calculate the sum of 2 numbers and return 'None' if both the parameters are not numbers.", "input": "", "output": "def sum_of_two_numbers(x, y):\n    if type(x) is not int or type(y) is not int:\n        return None\n    return x + y", "category": "Python"}, {"instruction": "Write an algorithm that takes a set of numbers and returns the sum of all numbers in the set.", "input": "my_set = {2, 3, 4, 5}", "output": "def sum_set(my_set):\n    total = 0 # Initialize total\n    for num in my_set: \n        total += num\n    return total\n\nmy_set = {2, 3, 4, 5}\ntotal = sum_set(my_set)\nprint(total)  # Output 14", "category": "Python"}, {"instruction": "Design a class BankAccount that represents a bank account with the attributes name, balance, and interest_rate.", "input": "", "output": "class BankAccount:\n    def __init__(self, name, balance, interest_rate):\n        self.name = name\n        self.balance = balance\n        self.interest_rate = interest_rate\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdraw(self, amount):\n        self.balance -= amount", "category": "Python"}, {"instruction": "Write a function in Python that accepts an array as an argument and returns the index of the item with the maximum value.", "input": "arr = [2, 5, 9, 4, 10]", "output": "def find_max_index(arr):\n    if len(arr) == 0:\n        return None\n    max_val = arr[0]\n    max_index = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n            max_index = i\n    return max_index\n\narr = [2, 5, 9, 4, 10]\nmax_index = find_max_index(arr)\nprint(max_index)  # Output 4", "category": "Python"}, {"instruction": "How to check for a key in a dictionary in Python?", "input": "", "output": "if key in dictionary:\n    # execute this block of code\nelse:\n    # execute this block of code", "category": "Python"}, {"instruction": "What is the syntax for filtering a DataFrame using an OR condition in Pandas?", "input": "", "output": "df.loc[(condition1) | (condition2)]", "category": "Python"}, {"instruction": "Create a function in Python that takes a number as an argument and displays the corresponding day from Monday to Sunday.", "input": "", "output": "def getDay(num):\n    days = {\n        0: 'Monday',\n        1: 'Tuesday',\n        2: 'Wednesday',\n        3: 'Thursday',\n        4: 'Friday',\n        5: 'Saturday',\n        6: 'Sunday',\n    }\n    return days[num]", "category": "Python"}, {"instruction": "Change the following Python program so that it prints out the palindromic substrings.", "input": "string = 'mom'", "output": "def palindromicSubstrings(string): \n    for start in range(len(string) + 1):\n        for end in range(start + 1, len(string) + 1):\n            substring = string[start:end]\n            if substring == substring[::-1]:\n                print(substring) \npalindromicSubstrings(string)", "category": "Python"}, {"instruction": "Make a class in Python which will represent a binary search tree.", "input": "", "output": "class BinarySearchTree:\n \n    def __init__(self, value): \n        self.left = None\n        self.right = None\n        self.value = value\n \n    def inorder(self):\n        if self.left:\n            self.left.inorder()\n        print(self.value)\n        if self.right:\n            self.right.inorder()\n \n    def insert(self, value):\n        if value <= self.value:\n            if self.left is None:\n                self.left = BinarySearchTree(value)\n            else:\n                self.left.insert(value)\n        elif value > self.value:\n            if self.right is None:\n                self.right = BinarySearchTree(value)\n            else:\n                self.right.insert(value)", "category": "Python"}, {"instruction": "Create a Python script that find the number of occurrences of a specific word in a given sentence.", "input": "This is a sample sentence.", "output": "sentence_input = \"This is a sample sentence.\"\n\ndef count_keyword(sentence_input, keyword):\n    return sentence_input.lower().count(keyword.lower())\n\ncount = count_keyword(sentence_input, \"sentence\")\nprint(\"The word 'sentence' occurs \" + str(count) + \" times.\")", "category": "Python"}, {"instruction": "Construct a loop to print numbers from 1 to 10 using a while loop in Python.", "input": "", "output": "i = 1\nwhile i <= 10:\n    print(i)\n    i += 1", "category": "Python"}, {"instruction": "Calculate the square root of a number using bisection search.", "input": "number = 9", "output": "low = 0\nhigh = number\nanswer = (high + low) / 2\n#Store the difference between the answer and the number\ndiff = (answer ** 2) - number\n#Loop until the difference is within a very small tolerance\nwhile abs(diff) > 0.00001:\n    if diff > 0:\n        #the answer is too high\n        high = answer\n    else:\n        #the answer is too low\n        low = answer\n    #compute a new answer\n    answer = (high + low) /2\n    #and compute a new diff\n    diff = (answer ** 2) - number\nprint(answer)", "category": "Python"}, {"instruction": "Use the Python built-in function filter() to find all numbers divisible by 5.", "input": "mylist = [10, 21, 32, 45, 56, 77]", "output": "list(filter(lambda x: (x % 5 == 0), mylist))", "category": "Python"}, {"instruction": "Write a Python function to check if a number is perfect or not. A number is said to be a perfect number if its sum of divisors is equal to itself.", "input": "", "output": "def is_perfect(n):\n s = 0\n for i in range(1, n):\n if n % i == 0:\n s += i\n return s == n", "category": "Python"}, {"instruction": "Write a virtual assistant in Python to gauge the sentiment of a given string.", "input": "string = \"I had a terrible day\"", "output": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef sentiment_analyzer(string):\n sid = SentimentIntensityAnalyzer()\n snt = sid.polarity_scores(string)\n return snt[\"compound\"]\n\nsentiment_analyzer(string)", "category": "Python"}, {"instruction": "Write a Python program to find all the Armstrong numbers between the given two numbers. An Armstrong number is a number such that the sum of its digits raised to the third power is equal to the number itself.", "input": "lower = 100\nupper = 2000", "output": "def isArmstrong(num):\n s = 0\n temp = num\n while temp > 0:\n digit = temp % 10\n s += digit ** 3\n temp //= 10\n if num == s:\n return True\n else:\n return False\n\nfor num in range(lower, upper + 1):\n if isArmstrong(num):\n print(num)", "category": "Python"}, {"instruction": "Create a class to store student names, ages and grades.", "input": "", "output": "class Student:\n  def __init__(self,name,age,grade):\n    self.name = name\n    self.age = age\n    self.grade = grade\n\n  def get_name(self):\n    return self.name\n\n  def set_name(self,name):\n    self.name = name\n\n  def get_age(self):\n    return self.age\n\n  def set_age(self,age):\n    self.age = age\n\n  def get_grade(self):\n    return self.grade\n\n  def set_grade(self,grade):\n    self.grade = grade", "category": "Python"}, {"instruction": "Generate a function that computes the sum of the numbers in a given list.", "input": "", "output": "def compute_sum(numbers):\n  total = 0\n  for num in numbers:\n    total += num\n  return total", "category": "Python"}, {"instruction": "Parse a JSON object and print out the elements.", "input": "data = {\n  'name': 'John Doe',\n  'age': 32,\n  'address': {\n    'street': '123 Main St',\n    'city': 'New York',\n    'zip': 10010\n  }\n}", "output": "import json\n\ndata = json.loads(data)\n\nprint('Name:', data['name'])\nprint('Age:', data['age'])\nprint('Street:', data['address']['street'])\nprint('City:', data['address']['city'])\nprint('Zip:', data['address']['zip'])", "category": "Python"}, {"instruction": "Create a function to detect even numbers.", "input": "", "output": "def is_even(number):\n  if (number % 2 == 0):\n    return True\n  else:\n    return False", "category": "Python"}, {"instruction": "Generate a python program to solve the Tower of Hanoi problem with n discs", "input": "", "output": "def TowerOfHanoi(n, from_rod, to_rod, aux_rod): \n    if n == 1: \n        print(\"Move disk 1 from rod\",from_rod,\"to rod\",to_rod)\n        return\n    TowerOfHanoi(n-1, from_rod, aux_rod, to_rod) \n    print(\"Move disk\",n,\"from rod\",from_rod,\"to rod\",to_rod)\n    TowerOfHanoi(n-1, aux_rod, to_rod, from_rod) \n        \n# Driver code \nn = 3\nTowerOfHanoi(n, 'A', 'C', 'B')", "category": "Python"}, {"instruction": "Using the input provided, generate a random string consisting of 8 characters.", "input": "[a, b, c, d, e, f, g, h]", "output": "import random\n\ndef random_string(arr):\n    return ''.join(random.sample(arr, 8))", "category": "Python"}, {"instruction": "Describe the structure of JSON data", "input": "", "output": "JSON (JavaScript Object Notation) data is structured in a hierarchical way. It consists of data stored in key-value pairs. The JSON object typically contains a set of key-value pairs, or nested objects. Data is organized and encoded in a way that makes it easier for programs to read and interpret the data stored in the JSON object. The structure of a JSON object may look like this: \n \n{ \n  \"Key1\": \"Value1\", \n  \"Key2\": \"Value2\", \n  \"NestedObject\": { \n    \"NestedKey1\": \"NestedValue1\", \n    \"NestedKey2\": \"NestedValue2\" \n  } \n}", "category": "Python"}, {"instruction": "How would you extend the following code to add the features \"undo\" and \"redo\"?", "input": "def add_item(item, list):\n\tlist.append(item)", "output": "def add_item(item, list):\n    list.append(item)\n    undo_list.append(item)\n\u200b\ndef undo_item(item, list):\n    if len(list) > 0:\n        last_item = list.pop()\n        redo_list.append(last_item)\n    \ndef redo_item(item, list):\n    if len(redo_list) > 0:\n        last_item = redo_list.pop()\n        list.append(last_item)", "category": "Python"}, {"instruction": "Create a function which takes two arguments, a string and a list, and prints out the list with each element preceded by the string", "input": "my_string = \"Example: \"\nmy_list = [\"a\", \"b\", \"c\"]", "output": "def prepend_list_items(str, lst):\n  for item in lst:\n    print(str + item)\n\nprepend_list_items(my_string, my_list)", "category": "Python"}, {"instruction": "Print the current system date and time in a readable format", "input": "", "output": "import datetime\n\ndate_time = datetime.datetime.now()\nprint(date_time.strftime(\"%A %d %B, %Y, %I:%M %p\"))\n\n# Output: Tuesday 12 November, 2019, 11:17 PM", "category": "Python"}, {"instruction": "Create an array of 10 non-repeating random integers.", "input": "", "output": "import random\n\narr = []\nwhile len(arr) < 10:\n    rand = random. randint(0, 10000)\n    if rand not in arr:\n        arr.append(rand)\n\narr", "category": "Python"}, {"instruction": "Create a method that returns all elements in an array that are larger than the given value x.", "input": "[2, 3, 5, 7, 11, 13] and x = 4", "output": "def elements_greater_than_x(arr, x):\n  result = []\n\n  for el in arr:\n    if el > x:\n      result.append(el)\n\n  return result", "category": "Python"}, {"instruction": "Write a Python function to check if an element is present in a given list or not.", "input": "", "output": "def is_in_list(element, input_list):\n    return element in input_list", "category": "Python"}, {"instruction": "Change the following Python code to convert the list to a dictionary of key-value pairs.", "input": "mylist  = [1, 2, 3, 4, 5]", "output": "mydict = {}\nfor i in range(len(mylist)):\n    mydict[i] = mylist[i]", "category": "Python"}, {"instruction": "Create a function that takes an array and returns true if it contains all the elements in an another array.", "input": "array1 = [1, 2, 3, 4]\narray2 = [1, 2, 3]", "output": "def checkArray(array1, array2): \n\tfor element in array2: \n\t\tif element not in array1: \n\t\t\treturn False\n\treturn True\n\narray1 = [1, 2, 3, 4]\narray2 = [1, 2, 3]\n\nprint(checkArray(array1, array2))\n\n# Output\n# True", "category": "Python"}, {"instruction": "Produce a function that takes in an array of integers and returns an array with all the prime numbers in it.", "input": "arr = [2, 11, 9, 5, 4, 7]", "output": "def findPrimeNumbers(arr): \n\tprime_list = []\n\tfor number in arr: \n\t\tisPrime = True\n\t\tfor i in range(2, number): \n\t\t\tif number % i == 0: \n\t\t\t\tisPrime = False\n\t\tif isPrime: \n\t\t\tprime_list.append(number)\n\n\treturn prime_list \n\narr = [2, 11, 9, 5, 4, 7]\n\nprint(findPrimeNumbers(arr))\n\n# Output\n# [2, 11, 5, 7]", "category": "Python"}, {"instruction": "Write a function that takes in a list of numbers and creates a new list with only the even numbers from the list.", "input": "numbers = [2, 3, 4, 5, 6, 7, 8, 9]", "output": "def findEvenNumbers(numbers): \n\teven_list = []\n\tfor number in numbers: \n\t\tif number % 2 == 0: \n\t\t\teven_list.append(number)\n\treturn even_list \n\nnumbers = [2, 3, 4, 5, 6, 7, 8, 9]\n\nprint(findEvenNumbers(numbers))\n\n# Output\n# [2, 4, 6, 8]", "category": "Python"}, {"instruction": "Create a Python function that generates a random number between two specified numbers.", "input": "lower_bound = 10\nupper_bound = 20", "output": "def random_num(lower_bound, upper_bound):\n\timport random\n\treturn random.randint(lower_bound, upper_bound)\n\nlower_bound = 10\nupper_bound = 20\n\nprint(random_num(lower_bound, upper_bound))\n\n# Output\n# [random number between 10 and 20]", "category": "Python"}, {"instruction": "Run a regression on the given dataset and print the coefficients", "input": "", "output": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# fit the model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# print the coefficients \ncoeff = model.coef_\nprint(coeff)", "category": "Python"}, {"instruction": "Implement a function to calculate the total amount of money earned from a given array of stock prices.", "input": "arr = [5, 7, 15.5, 6, 10, 11]", "output": "def calculateTotalEarnings(arr): \n\ttotalEarnings = 0 \n\t\n\tfor i in range(1, len(arr)): \n\t\ttotalEarnings += max(arr[i] - arr[i - 1], 0) \n\t\t\n\treturn totalEarnings \n\narr = [5, 7, 15.5, 6, 10, 11] \n\ntotalEarnings = calculateTotalEarnings(arr) \n\nprint(\"Total earnings: \", totalEarnings) \n\n# Output\n# Total earnings:  9.5", "category": "Python"}, {"instruction": "Write a function that finds the largest number in an array of integers.", "input": "", "output": "def largest(arr): \n    max = arr[0] \n    for i in arr: \n        if i > max: \n            max = i \n    return max", "category": "Python"}, {"instruction": "How many elements are in list1 after executing the following Python code?", "input": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nlist1.extend(list2)", "output": "6", "category": "Python"}, {"instruction": "Construct an algorithm to find all possible combinations of a string of characters.", "input": "", "output": "A possible algorithm is to use a recursive approach. The algorithm would start from the beginning of the string and for each character, generate all possible combinations for the rest of the string. Then, for each combination, the character can either be included or excluded from the combination. Finally, return the list of all possible combinations.\n\ndef find_combinations(string):\n if len(string) == 0:\n return []\n \n result = []\n for i in range(len(string)):\n prefix = string[i]\n suffix = string[i+1:]\n combinations = find_combinations(suffix)\n \n if len(combinations) == 0:\n result.append(prefix)\n else:\n for combination in combinations:\n result.append(prefix + combination)\n result.append(combination)\n \n return result", "category": "Python"}, {"instruction": "Create a function to delete an item from a linked list given the head and the item.", "input": "", "output": "def delete_item(head, item):\n curr = head\n prev = None\n while curr:\n if curr.val == item:\n if prev is None:\n head = curr.next\n else:\n prev.next = curr.next\n return head\n prev = curr\n curr = curr.next\n \n return head", "category": "Python"}, {"instruction": "You have a list of employee records. Each record contains the employee's name, age, salary and department. Write an algorithm to sort the list by age in ascending order.", "input": "", "output": "def sort_by_age(employees):\n sorted_records = []\n while employees:\n record = employees.pop(0)\n inserted = False\n for i in range(len(sorted_records)):\n if record['age'] < sorted_records[i]['age']:\n sorted_records.insert(i, record)\n inserted = True\n break\n if not inserted:\n sorted_records.append(record)\n return sorted_records", "category": "Python"}, {"instruction": "Write a function to find the closest pair of points in a given array of points.", "input": "", "output": "def find_closest_pair(points):\n min_dist = float('inf')\n closest_pair = None\n\n for i in range(len(points)):\n for j in range(i + 1, len(points)):\n dist = ((points[i][0] - points[j][0])**2 + (points[i][1] - points[j][1])**2)**0.5\n if dist < min_dist:\n min_dist = dist\n closest_pair = (points[i], points[j])\n \n return closest_pair", "category": "Python"}, {"instruction": "Create a class in Python with methods \"add\" and \"find\" to add a value to a dictionary and find the value in it, respectively.", "input": "", "output": "class Dictionary:\n def __init__(self):\n     self.data = {}\n\ndef add(self, key, value):\n self.data[key] = value\n\ndef find(self, key):\n if key in self.data:\n return self.data[key]\n return None", "category": "Python"}, {"instruction": "Write a code that takes a sentence as input and prints the longest word in that sentence.", "input": "This is a test sentence", "output": "def longest_word(sentence):\n longest_word = \"\"\n words = sentence.split()\n for word in words:\n if len(word) > len(longest_word):\n longest_word = word\n return longest_word", "category": "Python"}, {"instruction": "Construct an algorithm to calculate the GCD of two numbers.", "input": "", "output": "A possible algorithm is the Euclidean algorithm. It works by repeatedly dividing the larger number by the smaller number and replace the larger number with the remainder until the remainder becomes zero and the last non-zero remainder is the GCD.\n\ndef gcd(a,b):\n  if a == 0:\n    return b\n  if b == 0:\n    return a\n\n  if a > b:\n    return gcd(a % b, b)\n  else:\n    return gcd(a, b % a)", "category": "Python"}, {"instruction": "Design a search system in Python with two methods (or functions) one method \"add\" to add a keyword and value, the other \"search\" to search by a keyword return the corresponding value.", "input": "", "output": "class SearchSystem:\n\n def __init__(self):\n     self.data = {}\n\ndef add(self, keyword, value):\n self.data[keyword] = value\n\ndef search(self, keyword):\n if keyword in self.data:\n return self.data[keyword]\n return None", "category": "Python"}, {"instruction": "How many elements will the array arr have after executing the following Python code?", "input": "arr = [1, 2, 3]\narr.pop(1)", "output": "2", "category": "Python"}, {"instruction": "Analyze a given text and generate a dictionary of frequency of each word in the text.", "input": "text = \"This is a sample text to analyze the frequency of the words\"", "output": "def analyze_text(text):\n    text = text.lower().split()\n    freqDict = {}\n    for word in text:\n        if word in freqDict:\n            freqDict[word] += 1\n        else:\n            freqDict[word] = 1\n    return freqDict\n\nif __name__ == '__main__':\n    text = \"This is a sample text to analyze the frequency of the words\"\n    print(analyze_text(text))\n\nOutput:\n{'this': 1, 'is': 1, 'a': 1, 'sample': 1, 'text': 1, 'to': 1, 'analyze': 1, 'the': 1, 'frequency': 1, 'of': 1, 'words': 1}", "category": "Python"}, {"instruction": "Describe the programming language used for the given project", "input": "Project: Building an e-commerce website using Django.", "output": "The programming language used for the project is Python with Django web framework. Django is an open source framework for developing web applications. It uses the Model-View-Template architecture pattern for developing web applications. It provides useful features like built-in admin interface, secure authentication and authorization, support for AJAX and Python libraries.", "category": "Python"}, {"instruction": "How can we improve the following code?", "input": "def multiply(x, y):\n    z = 0\n    for i in range(y): \n        z += x\n    return z", "output": "We can improve the code by adding an additional parameter to multiply() to check for a zero value of y. This additional \"check\" parameter will immediately return 0 if the value of y is 0, reducing the time complexity. Additionally, we can also remove the for loop and replace it with a multiplication operator to speed up the process. The updated code would look like: \n\ndef multiply(x, y, check = False):\n    if check and y == 0 : return 0\n    return x*y", "category": "Python"}, {"instruction": "Suggest a method to optimize the following code.", "input": "def find_max(arr):\n    max = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    \n    return max", "output": "def find_max(arr):\n    max = arr[0]\n    \n    for i in range(1, len(arr)):\n        max = max if max > arr[i] else arr[i]\n    \n    return max", "category": "Python"}, {"instruction": "Create an AI chatbot that can answer questions about the given topic \"Covid-19\".", "input": "Topic: Covid-19", "output": "# Imports \nfrom chatterbot import ChatBot\nfrom chatterbot.trainers import ChatterBotCorpusTrainer\n\n# Create the AI Chatbot \nbot = ChatBot(\"CovidBot\") \n\n# Train the bot on the corpus \ntrainer = ChatterBotCorpusTrainer(bot) \ntrainer.train(\"chatterbot.corpus.english.covid19\")\n\n# Start the chatbot \nwhile True:\n    user_input = input(\"User: \")\n    if user_input == 'exit':\n        break\n    bot_response = bot.get_response(user_input)\n    print(\"CovidBot:\",bot_response)", "category": "Python"}, {"instruction": "Design and implement a genetic algorithm for finding the optimal solution for a given problem.", "input": "", "output": "# Define the population size\nPOPULATION_SIZE = 100\n\n# Define the parameters for the genetic algorithm \nMUTATION_RATE = 0.2 \nCROSSOVER_RATE = 0.7 \nMAX_ITERATIONS = 10 \n\n# Create the initial population\npopulation = create_population(POPULATION_SIZE) \n\n# Run the genetic algorithm\nfor iteration in range(MAX_ITERATIONS):\n  # Select the fittest individuals to reproduce\n  selected_pop = select_fittest(population)\n  \n  # Crossover two individuals to form a new population\n  children_pop = crossover(selected_pop, CROSSOVER_RATE)\n  \n  # Mutate the new population \n  mutate_pop = mutate(children_pop, MUTATION_RATE)\n  \n  # Replace the population with the mutated population \n  population = mutate_pop \n\n# Return the optimal solution\nreturn best_solution(population)", "category": "Python"}, {"instruction": "Create a program to detect spam emails.", "input": "", "output": "import nltk\nfrom nltk.tokenize import word_tokenize\n\n# Create a list of \"spammy\" words\nspammy_words = ['free', 'discount', 'offer', 'win', 'prize', 'billion', 'million', 'cash']\n\n# Define a function for detecting spam\ndef detect_spam(email):\n    # Tokenize the email\n    words = word_tokenize(email)\n    spam_score = 0\n    for word in words:\n        if word.lower() in spammy_words:\n            spam_score += 1\n    # Return the spam score\n    return spam_score", "category": "Python"}, {"instruction": "Write a code for sorting the given array of numbers in ascending order.", "input": "", "output": "def sort_array(numbers):\n    # Bubble sort algorithm \n    for i in range(len(numbers)): \n      for j in range(0, len(numbers)-i-1): \n        if numbers[j] > numbers[j+1]: \n          numbers[j], numbers[j+1] = numbers[j+1], numbers[j] \n    return numbers", "category": "Python"}, {"instruction": "Create a search engine to process natural language queries.", "input": "", "output": "# Imports \nimport nltk \nfrom nltk.tokenize import word_tokenize\nfrom nltk.tag import pos_tag\n\n# Tokenize the natural language query \nresponse = input(\"What would you like to search for? \")\nwords = word_tokenize(response)\ntagged_words = pos_tag(words)\n\n# Process the query and search for relevant results\nsearch_results = []\nfor word in tagged_words:\n    if word[1] == \"NN\":\n        search_results.append(search_for_nn(word))\n    elif word[1] == \"VBP\":\n        search_results.append(search_for_vbp(word))\n    else:\n        search_results.append(\"No results found.\")\n\n# Print the results \nfor result in search_results:\n    print(result)", "category": "Python"}, {"instruction": "Create an example Word Cloud from the given text.", "input": "Text: Machine Learning is an area of computer science that gives computers the ability to learn without explicit programming.", "output": "import matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\n\n# Generate a word cloud image\ntext = \"Machine Learning is an area of computer science that gives computers the ability to learn without explicit programming.\"\nwordcloud = WordCloud().generate(text)\n\n# Show the generated image\nplt.imshow(wordcloud, interpolation='bilinear') \nplt.axis(\"off\") \nplt.show()", "category": "Python"}, {"instruction": "Write a code to optimize the parsing of a given sentence using CKY parsing.", "input": "Sentence: \"The cat chased the dog around the corner of the house.\"", "output": "# Imports\nimport nltk\n\n# CKY Parsing\ndef cky_parse(sentence):\n  \"\"\"Given a sentence, apply CKY parsing to optimize the parsing of it\"\"\"\n  \n  words = nltk.word_tokenize(sentence)\n  \n  # Create tree structure\n  table = [[None for i in range(len(words))] for j in range(len(words))]\n  for j in range(len(words)):\n    for i in reversed(range(j)):\n      parts_of_speech = nltk.pos_tag(words[i:j+1])\n      part_of_speech = tuple(tag for word,tag in parts_of_speech)\n      if part_of_speech in grammar.productions():\n        table[i][j] = part_of_speech\n        break\n  return table", "category": "Python"}, {"instruction": "Create an example chatbot dialogue using the given context.", "input": "Context: You're a pizza maker", "output": "User: Hi, I'm looking for a pizza\nBot: Hi there! What kind of pizza are you looking for?\nUser: I'd like a pepperoni pizza with extra cheese\nBot: Sure, one pepperoni pizza with extra cheese coming right up! Anything else I can do for you?", "category": "Python"}, {"instruction": "Using TensorFlow, define a neural network for classifying a set of language data as either English or Spanish.", "input": "Training data of 1000 samples with 500 English sentences and 500 Spanish sentences.", "output": "model = tf.keras.Sequential() \nmodel.add(tf.keras.layers.Input(shape=(1000,))) \nmodel.add(tf.keras.layers.Dense(units=128, activation='relu')) \nmodel.add(tf.keras.layers.Dense(units=2, activation='softmax')) \nmodel.compile(optimizer='Adam', loss = 'categorical_crossentropy',metrics=['accuracy']) \nmodel.fit(X,y, epochs=10)", "category": "Python"}, {"instruction": "Using the input provided, write a code in Python to print the elements of a given dictionary along with the corresponding keys.", "input": "my_dict = {'one':1, 'two':2, 'three':3}", "output": "for key, value in my_dict.items():\n    print(key + ':', value)", "category": "Python"}, {"instruction": "Write a script in Python for printing the given second level sub-dictionary.", "input": "data = {'first': {'A': 1, 'B': 2}, 'second': {'C': 3, 'D': 4}}", "output": "second_dict = data.get('second')\nfor key, value in second_dict.items():\n    print(key, value)", "category": "Python"}, {"instruction": "Edit the statement to make it a valid expression in Python.", "input": "x = y =", "output": "x = y = 0", "category": "Python"}, {"instruction": "Write a for loop in Python which prints out the contents of the given stack.", "input": "sample_stack = [\"first\", \"second\", \"third\"]", "output": "for item in sample_stack:\n    print(item)", "category": "Python"}, {"instruction": "Reverse a given string without using built-in library functions", "input": "", "output": "def reverse_string(string):\n    rev_string = ''\n    for i in range(len(string) - 1, -1, -1):\n        rev_string += string[i]\n    return rev_string", "category": "Python"}, {"instruction": "Write an algorithm to find the number of times a given number appears in an array", "input": "[5, 2, 4, 2, 5, 2, 5], number: 5", "output": "def count_number(arr, number):\n    count = 0\n    for num in arr:\n        if num == number:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Write an algorithm to add a new user (name, email, password, address) to a table called 'users'.", "input": "name: John\nemail: john@example.com\npassword: 1234\naddress: 999 Main St.", "output": "def add_user(name, email, password, address):\n    sql = 'INSERT INTO users (name, email, password, address) VALUES (%s, %s, %s, %s)'\n    try:\n        conn = connect_to_database()\n        cur = conn.cursor()\n        cur.execute(sql, (name, email, password, address))\n        conn.commit()\n        cur.close()\n        conn.close()\n        return True\n    except Exception as e:\n        raise e", "category": "Python"}, {"instruction": "Design an algorithm to insert a new row into a table named 'products' with the following columns: title, description and price.", "input": "title: \"New product\"\ndescription: \"This is an amazing product, it can do anything!\"\nprice: 10", "output": "def insert_row_products(title, description, price):\n    sql = 'INSERT INTO products (title, description, price) VALUES (%s, %s, %s)'\n    try:\n        conn = connect_to_database()\n        cur = conn.cursor()\n        cur.execute(sql, (title, description, price))\n        conn.commit()\n        cur.close()\n        conn.close()\n        return True\n    except Exception as e:\n        raise e", "category": "Python"}, {"instruction": "Implement a function in Python to convert a given RGB color to Hexadecimal format.", "input": "rgb_color = [255, 232, 154]", "output": "def rgb_to_hex(rgb_color):\n    hex_code = ''\n    for color in rgb_color:\n        hex_code += f'{color:02x}'\n    return hex_code\n\nhex_code = rgb_to_hex(rgb_color) # hex_code = \"ffe89a\"", "category": "Python"}, {"instruction": "Generate a function to check if parameter is equal to a specific string.", "input": "", "output": "def is_equal(parameter, string):\n    if parameter == string:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "How do you represent a database table and its columns in an object-oriented programming language?", "input": "", "output": "Classes are typically used to represent a database table in an object-oriented programming language. Each of the database table's columns can be represented as fields in the class. The values for those fields can then be accessed though the class' accessor methods.", "category": "Python"}, {"instruction": "How would you add the following list to a JSON document using Python?\n[1,2,3]", "input": "", "output": "import json\n\ndata = [1,2,3]\n\nwith open('my-json-file.json', 'w') as outfile:\n  json.dump(data, outfile)", "category": "Python"}, {"instruction": "Convert the following pseudocode into code that implements a binary search", "input": "Input: Array, Item\n\nSet low to the first index of the array\nSet high to the last index of the array\n\nwhile low is less than or equal to high\n  set mid to the average of low and high\n  if the item is found at mid, then return mid\n  else if the item is less than what is found at mid,\n    set high to mid - 1\n  else\n    set low to mid + 1\n\nreturn null", "output": "def binarySearch(list, item):\n    low = 0\n    high = len(list) - 1\n\n    while low <= high: \n        mid = (low + high) // 2\n        guess = list[mid] \n        if guess == item:\n            return mid\n        if guess > item:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return None", "category": "Python"}, {"instruction": "Explain the working of a function that takes a string as an argument, removes all the duplicate characters from it and returns the modified string", "input": "", "output": "The given function takes a string as an argument, creates an empty string to store unique characters from the given string. It then iterates through the given string and checks if the character is already present in the new string. If the character is not present, it adds the character to the new string. After iterating through the entire string, the modified string which doesn\u2019t contain any duplicate characters is returned.", "category": "Python"}, {"instruction": "Rewrite the following python code to an equivalent code using lambda and sorted function.", "input": "def sort_by_length(words):\n    return sorted(words, key=lambda x: len(x))", "output": "sort_by_length = lambda words: sorted(words, key=len)", "category": "Python"}, {"instruction": "Create a Django application to store and retrieve questions and answers.", "input": "", "output": "# Project Name\nproject = 'questions_and_answers'\n\n# Application Name\napplication = 'qa_app'\n\n# Create the project directory\nimport os\nif not os.path.exists(project):\n    os.mkdir(project)\n\n# Create the Django application\nfrom django.core.management import call_command\ncall_command('startapp', application, project)\n\n# Setup the database\nfrom django.conf import settings\n\ndefault_db_name = project + '.sqlite3'\nsettings.configure(\n    DATABASES = {\n        'default': {\n            'ENGINE': 'django.db.backends.sqlite3',\n            'NAME': os.path.join(project, default_db_name),\n        }\n    }\n)\n\nfrom django.db import models\n\n# Create the models\nclass Question(models.Model):\n    question_text = models.CharField(max_length=200)\n    pub_date = models.DateTimeField('date published')\n\nclass Answer(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    answer_text = models.CharField(max_length=200)\n\n# Make and apply the migrations\ncall_command('makemigrations', application)\ncall_command('migrate')", "category": "Python"}, {"instruction": "Write a code to print the Fibonacci series of n terms.", "input": "", "output": "def printFibonacciSeries(n):\n    a, b = 0, 1\n    for i in range(0, n):\n        print(a)\n        c = a + b\n        a = b\n        b = c\n\nprintFibonacciSeries(10)", "category": "Python"}, {"instruction": "Modify the following code so that it takes a list of numbers and calculates their median.", "input": "def median(data):", "output": "def median(data):\n    data.sort()\n    length = len(data)\n    if length == 0:\n        return 0\n    if length % 2 == 0:\n        return (data[length // 2] + data[length // 2 - 1]) / 2\n    elif length % 2 == 1:\n        return data[length // 2]", "category": "Python"}, {"instruction": "What is the difference between shallow copying and deep copying?", "input": "", "output": "Shallow copying is the process of creating a copy of the original object which only contains references to the values contained in the original instance. This means that any shallow copy only contains references to the same objects as the original instance, while any changes made to the copy will be reflected in the original object as well. Deep copying on the other hand, is the process of creating a new instance of the original object with all of its values copied over. This means that any changes made to the copy are not reflected in the original object.", "category": "Python"}, {"instruction": "Implement a recursive algorithm to count the number of elements that are divisible by k in an array.", "input": "[2, 4, 8, 10, 11], k = 3", "output": "def countK(arr, k): \n    if len(arr) == 0: \n        return 0\n    if arr[0] % k == 0: \n        return 1 + countK(arr[1:], k)\n    else: \n        return 0 + countK(arr[1:], k)", "category": "Python"}, {"instruction": "What is deadlock and how to prevent it?", "input": "", "output": "Deadlock is a state in which two or more processes wait for each other to finish, but none of the processes can finish because each is waiting for the other. To prevent deadlock, one can employ the use of a deadlock avoidance algorithm which typically checks for whether a particular set of conditions exist that can lead to deadlock. Additionally, locks can be applied liberally, but with caution, while avoiding circular wait.", "category": "Python"}, {"instruction": "Write a Python script that takes a string as input and outputs a string with the same characters in reverse order.", "input": "hello", "output": "def reverse_string(str):\n  return str[::-1]\n\nprint(reverse_string('hello'))", "category": "Python"}, {"instruction": "Write a function in Python that takes two parameters, a list of integers and a target integer. The function should return the number of times the target integer appears in the list.", "input": "list = [12, 4, 1, 18, 7, 15, 6, 11, 4]\ntarget = 4", "output": "def count_target(lst, target):\n    count = 0\n    for i in lst:\n        if i == target:\n            count += 1\n    return count\n\nprint(count_target(list, target))", "category": "Python"}, {"instruction": "Define a python function that returns an array of the numbers from 0 to n", "input": "", "output": "def create_array(n): \n    # create an empty list \n    mylist=[] \n    # add elements to the list by looping n times \n    for i in range(0, n + 1): \n        mylist.append(i) \n    # return the list \n    return mylist", "category": "Python"}, {"instruction": "Create a class definition in python with one variable and one method", "input": "", "output": "class Example:\n  def __init__(self, variable):\n    self.variable = variable\n\n  def method(self):\n    return self.variable + 1", "category": "Python"}, {"instruction": "Read the given list and filter out the elements containing the number '3'.", "input": "mylist = [13, 23, 32, 31, 14]", "output": "filteredlist = []\nfor num in mylist:\n    if '3' not in str(num):\n        filteredlist.append(num)\n\nprint(filteredlist)", "category": "Python"}, {"instruction": "Create a program in Python that will take a list of strings and output a list containing the lengths of each string.", "input": "mylist = [\"Hello\", \"World\", \"WDI\", \"Class\"]", "output": "length_list = []\nfor string in mylist:\n    length_list.append(len(string))\n\nprint(length_list)", "category": "Python"}, {"instruction": "Create a program that uses a loop to generate 25 random numbers from 0 to 8.", "input": "", "output": "import random\n\n# Generate 25 random numbers\nrandom_list = []\nfor i in range(25):\n    random_list.append(random.randint(0, 8))\n\nprint(random_list)", "category": "Python"}, {"instruction": "Read the given list and filter out the odd numbers.", "input": "mylist = [1,2,3,4,5]", "output": "even_list = []\nfor num in mylist:\n    if num % 2 == 0:\n        even_list.append(num)\n\nprint(even_list)", "category": "Python"}, {"instruction": "Write a function in Python that takes a sentence and a number as inputs, and returns the number of words in that sentence that are longer than the given number.", "input": "Sentence = \"Hello, this is a sentence\";\nNumber = 3;", "output": "def count_words_longer_than_number(text, number):\n  words = text.split()\n  count = 0\n  for word in words:\n    if len(word) > number:\n      count += 1\n\n  return count\n\ncount_words_longer_than_number(Sentence, Number)", "category": "Python"}, {"instruction": "Create a program in Python that will take in a list of strings and print out each unique string in the list.", "input": "mylist = [\"Hello\", \"World\", \"Hello\", \"WDI\", \"Class\"]", "output": "uniquelist = []\nfor string in mylist:\n    if string not in uniquelist:\n        uniquelist.append(string)\n\nprint(uniquelist)", "category": "Python"}, {"instruction": "Write a Python function to subtract two given numberss.", "input": "", "output": "def subtract_numbers(num1, num2):\n  return num1 - num2", "category": "Python"}, {"instruction": "Write a Python function to filter a given list of strings and return the list with the strings having length greater than the given number.", "input": "list = ['Example', 'cat', 'dog', 'hello', 'word']\nlength = 4", "output": "def filter_list(list, length):\n  return [string for string in list if len(string) > length]", "category": "Python"}, {"instruction": "Use linear regression to predict the price of a car based on its make and model.", "input": "make = ['Mazda', 'Volkswagen', 'Chevrolet']\n model = ['3', 'PASSAT', 'Malibu']", "output": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# load data\ndata = pd.read_csv('cars.csv')\n\n# create feature matrix\nX = data[['make', 'model']]\n\n# set target variable\ny = data['price']\n\n# one-hot encode categorical make and model data\nX = pd.get_dummies(X, columns=['make', 'model'])\n\n# create and fit model\nmodel = LinearRegression()\nmodel.fit(X, y)", "category": "Python"}, {"instruction": "Create a python script to check if a substring exists in a given string", "input": "", "output": "def is_substring(s1, s2):\n    return s2 in s1", "category": "Python"}, {"instruction": "Write a function to identify the most frequent letter in a string.", "input": "string = \"Hello Universe\"", "output": "from collections import Counter \n\ndef most_frequent_letter(string): \n  # Count the letter frequency \n  words = Counter(string) \n  \n  # Identify the most frequent letter \n  most_common = words.most_common(1)[0][0]\n  \n  # Return the most frequent letter \n  return most_common\n\nprint(most_frequent_letter(string)) # l", "category": "Python"}, {"instruction": "Given a list of integers, return a new list with even numbers doubled.", "input": "lst = [1, 2, 3, 4, 5, 6]", "output": "def double_even_numbers(lst): \n  # Iterate through the list and double the even numbers \n  double_lst = [] \n  for num in lst: \n    if num % 2 == 0: \n      double_lst.append(num * 2) \n    else: \n      double_lst.append(num)\n  \n  # Return the new list \n  return double_lst \n\nprint(double_even_numbers(lst)) # [1, 4, 3, 8, 5, 12]", "category": "Python"}, {"instruction": "Create a program that implements an autocomplete or predictive search feature.", "input": "words = [\"Apple\", \"App\", \"Application\", \"Applications\", \"Apples\", \"Ace\", \"Acer\"]", "output": "def autocomplete(user_input, words): \n  # Store the output words in a list \n  output = [] \n  \n  # Iterate through the words and check if the user input matches the beginning of the word \n  for word in words: \n    if word.startswith(user_input): \n      output.append(word)\n  \n  # Return the output words \n  return output \n\nprint(autocomplete(\"app\", words)) # [\"App\", \"Application\", \"Applications\", \"Apples\"]", "category": "Python"}, {"instruction": "Display the multiplication table for a given number.", "input": "num = 6", "output": "def num_mult_table(num): \n  # Iterate through the numbers from 1 to 10 \n  for i in range(1,11): \n    # Print the multiplication table for the given number \n    print(\"{} x {} = {}\".format(num, i, num*i))\n    \nnum_mult_table(num) \n\n# Output \n# 6 x 1 = 6 \n# 6 x 2 = 12 \n# 6 x 3 = 18 \n# 6 x 4 = 24 \n# 6 x 5 = 30 \n# 6 x 6 = 36 \n# 6 x 7 = 42 \n# 6 x 8 = 48 \n# 6 x 9 = 54 \n# 6 x 10 = 60 \n#", "category": "Python"}, {"instruction": "Create a program in Python that takes a list of numbers as input and sorts it in ascending order.", "input": "mylist = [3, 2, 5, 4, 1]", "output": "def list_sort(list): \n    for i in range(0, len(list)): \n        min_index = i \n        for j in range(i+1, len(list)): \n            if list[min_index] > list[j]: \n                min_index = j             \n        list[i], list[min_index] = list[min_index], list[i]\n    return list\n\nlist_sort(mylist)", "category": "Python"}, {"instruction": "Given the following line of code, explain what it does.", "input": "a = [i for i in range(5)]", "output": "The given line of code creates a list from 0 to 4 (inclusive) using a list comprehension. It is equivalent to the following code:\n\na = []\nfor i in range(5):\n    a.append(i)\n\nTherefore, it creates a list 'a' with elements \"0\", \"1\", \"2\", \"3\", and \"4\".", "category": "Python"}, {"instruction": "Write a code to find the most frequently occurring item in the list.", "input": "[17, 25, 6, 30, 14, 28, 6, 20, 13, 25]", "output": "def most_frequent(data):\n    freq = {}\n    for x in data:\n        if x in freq:\n            freq[x] += 1\n        else:\n            freq[x] = 1\n    max_freq = 0\n    for x in freq.values():\n        if x > max_freq:\n            max_freq = x\n    most_frequent_item = []\n    for x in freq.keys():\n        if freq[x] == max_freq:\n            most_frequent_item.append(x)\n    return most_frequent_item\n\ndata = [17, 25, 6, 30, 14, 28, 6, 20, 13, 25]\n\nprint(most_frequent(data))", "category": "Python"}, {"instruction": "Write a code to generate a random float between -5 and 5.", "input": "", "output": "import random\n\nrandom_float = random.uniform(-5, 5)\nprint(random_float)", "category": "Python"}, {"instruction": "Create a Tkinter window with a label that says \u201cHello World!\u201d", "input": "", "output": "import tkinter\n\nroot = tkinter.Tk()\nlabel = tkinter.Label(root, text=\"Hello World!\")\nlabel.pack()\nroot.mainloop()", "category": "Python"}, {"instruction": "Design a data structure for a deck of cards", "input": "", "output": "A data structure for a deck of cards could involve creating an array of objects or associative arrays, where each object or associative array corresponds to a card in the deck. The object or associative array should include properties such as suit, rank, and value to store information about the card. Additionally, the data structure should also include functions to manipulate the deck such as shuffle, draw, and sort.", "category": "Python"}, {"instruction": "Translate the following sentiment analysis model written in Python to JavaScript", "input": "model = tf.keras.models.Sequential([\n tf.keras.layers.Dense(128, activation='relu', input_shape=(tem_train_data.shape[1],)),\n tf.keras.layers.Dense(2, activation='softmax')\n])", "output": "const model = tf.sequential();\nmodel.add(tf.layers.dense({units: 128, activation: 'relu', inputShape: tem_train_data.shape[1]}));\nmodel.add(tf.layers.dense({units: 2, activation: 'softmax'}));", "category": "Python"}, {"instruction": "Create a Django application to serve an API endpoint", "input": "The API endpoint should take an ID and return a user's name and age.", "output": "The output would involve creating a Django application with an API view that takes in the ID as the parameter and returns a dictionary containing the user's name and age. The Django application should also include the necessary models and associated functions, a URL configuration, and a core application to be used in the root project directory.", "category": "Python"}, {"instruction": "Acquire the necessary data to apply linear regression on the following problem statement", "input": "Predict the average property value in a particular city given population density, housing costs and average income.", "output": "The necessary data to apply linear regression on the problem statement would include population density, housing costs and average income of the particular city. Additionally, the average property value should also be collected as the target variable to be predicted. The data could be collected from public sources like census websites or through primary data collection methods such as surveys.", "category": "Python"}, {"instruction": "Describe a good object oriented design approach for the following problem statement:", "input": "Design an application that provides a way for users to store and access their banking records.", "output": "An object oriented design approach for the problem statement would involve the following: creating a base class for the banking records which has properties to store user details and banking information, providing a way to create a savings account and checking account class that can be derived from the base class and a set of methods which can add, delete, update, retrieve and access information from the banking records. Additionally, methods which securely store and access the data should be implemented to ensure the safety of the users' data.", "category": "Python"}, {"instruction": "Design a program to detect an infinite loop in a given program.", "input": "", "output": "def detectInfiniteLoop(program):\n  setOfInstructions = set()\n  for line in program.split('\\n'):\n    if line in setOfInstructions:\n      return True\n    setOfInstructions.add(line)\n  return False", "category": "Python"}, {"instruction": "Create a stack and add two elements to it.", "input": "", "output": "class Stack():\n  def __init__(self):\n    self.items = []\n  \n  def push(self, item):\n    self.items.append(item)\n  \n  def pop(self):\n    return self.items.pop()\n\nstack = Stack()\nstack.push(5)\nstack.push(7)", "category": "Python"}, {"instruction": "Create a 2D array with n columns and m rows and fill it with random numbers.", "input": "Rows: 6, Columns: 8", "output": "import random\n\ndef create2DArray(row, col):\n  arr = [[random.randint(1,100) for j in range(col)] for i in range(row)]\n  return arr", "category": "Python"}, {"instruction": "Write an algorithm to search for numbers in an array and replace them with their square roots.", "input": "[1,2,3,4,5]", "output": "Function searchAndReplace(nums):\n  for i in range(len(nums)):\n    if nums[i] >= 0:\n      nums[i] = math.sqrt(nums[i])\n  return nums", "category": "Python"}, {"instruction": "Update the following code to add a method to retrieve elements from the list.", "input": "class MyList\n  def initialize\n    @list = []\n  end\nend", "output": "class MyList\n  def initialize\n    @list = []\n  end\n\n  def get(index)\n    @list[index]\n  end\n\nend", "category": "Python"}, {"instruction": "Refactor this function to be less complex and more readable.", "input": "def calculate_price(products):\n  total_price=0\n  for p in products:\n    total_price+=p[0]*p[1]\n  return total_price", "output": "def calculate_price(products):\n  total_price = 0\n  for price, quantity in products: \n    total_price += price * quantity\n  return total_price", "category": "Python"}, {"instruction": "Why is indexing important in databases?", "input": "", "output": "Indexing in databases is important because it allows for faster access to data. Indexing works by creating an index data structure that stores a specific value or field in the database and a pointer to the data record containing that value. This strategy increases the speed of the query operations by allowing programs to quickly search the index to find the data instead of searching each record in the database one-by-one.", "category": "Python"}, {"instruction": "Write a function that takes a string as an input and returns a list of all the substring of the given string.", "input": "string = \"hello\"", "output": "def substrings(string):\n    substrings_list = []\n    for i in range(len(string)+1):\n        for j in range(i+1, len(string)+1):\n            substrings_list.append(string[i:j])\n    return substrings_list", "category": "Python"}, {"instruction": "Sort a given array of integers using Quick Sort", "input": "", "output": "def quickSort(arr): \n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quickSort(left) + middle + quickSort(right)", "category": "Python"}, {"instruction": "Create a virtual environment in Python using the \"virtualenv\" tool.", "input": "", "output": "python -m pip install virtualenv\nvirtualenv envname\nsource envname/bin/activate", "category": "Python"}, {"instruction": "How can you check if the given word is a palindrome in Python?", "input": "", "output": "word = \"madam\"\n\nif word == word[::-1]:\n  print(\"It is a palindrome\")\nelse:\n  print(\"It is not a palindrome\")", "category": "Python"}, {"instruction": "How can you access the last element of the following Python array?", "input": "arr = [\"A\",\"B\",\"C\",\"D\",\"E\"]", "output": "arr[-1]", "category": "Python"}, {"instruction": "Describe the purpose of Asynchronous programming.", "input": "", "output": "Asynchronous programming is a method of concurrent programming in which a unit of work runs separately from the main application thread and notifies the calling thread of its completion, failure or progress. It enables programs to run multiple operations at the same time without blocking other operations. This helps improve the performance of applications by allowing them to do work in parallel.", "category": "Python"}, {"instruction": "Explain the use of 'break' and 'continue' in for loops.", "input": "", "output": "The \u201cbreak\u201d keyword is used to exit from the loop and continues to execute the code after the loop. The \"continue\" keyword is used to skip the rest of the loop and start from the beginning of the loop again. It is used mostly when you have defined certain condition and want to skip some codes when that condition is being met.", "category": "Python"}, {"instruction": "Create a function to group a given set of numbers into a continuous range", "input": "Set of numbers: [1, 3, 4, 6, 7, 8, 10]", "output": "\"\"\"\nFunction group_numbers: Groups a given set of numbers into a continuous range.\n\"\"\"\n\ndef group_numbers(nums):\n    # Initialize left and right pointers\n    l = 0\n    r = 1\n    # Initialize ranges list\n    ranges = []\n    \n    while r < len(nums):\n        # If the end of the range is not same as the \n        # start of the next range, append the current range \n        if nums[r - 1] + 1 != nums[r]:\n            ranges.append(str(nums[l]) + \"->\" + str(nums[r - 1]))\n            l = r\n\n        r += 1\n\n    # Append the last range\n    ranges.append(str(nums[l]) + '->' + str(nums[r - 1]))\n\n    return ranges\n\nif __name__ == '__main__':\n    nums = [1, 3, 4, 6, 7, 8, 10]\n    print(group_numbers(nums))", "category": "Python"}, {"instruction": "Compute the maximum amount of money X which can be obtained using two given coins of denomination A and B.", "input": "A = 5 \nB = 7\nX = 31", "output": "\"\"\"\nFunction max_money: Computes the maximum amount of money X which can be obtained using two given coins of denomination A and B.\n\"\"\"\n\ndef max_money(A, B, X):\n    max_A = X // A # maximum coins A can be used\n    max_B = X // B # maximum coins B can be used\n    \n    # Try all possible combinations between coins of A and B\n    max_money = 0\n    for a in range(max_A + 1):\n        for b in range(max_B + 1):\n            money = a * A + b * B\n            if money <= X:\n                max_money = max(max_money, money)\n  \n    return max_money\n\nif __name__ == '__main__':\n    A = 5\n    B = 7\n    X = 31\n    print(max_money(A, B, X))", "category": "Python"}, {"instruction": "Create a function to register a new user using a given username, email and password.", "input": "username: angelina \nemail: angelina@example.com\npassword: abc12345", "output": "\"\"\"\nFunction register: Registers a new user using a given username, email and password\n\"\"\"\n\ndef register(username, email, password):\n    # initialize user database\n    user_db = {}\n    # add user info to database\n    user_db[username] = {\n        'email': email,\n        'password': password\n    }\n    # return user database\n    return user_db\n\nif __name__ == '__main__':\n    username = 'angelina'\n    email = 'angelina@example.com'\n    password = 'abc12345'\n    print(register(username, email, password))", "category": "Python"}, {"instruction": "Modify the code below to create a new function called \"addSquares()\" that adds the squares of two numbers and returns the result.", "input": "def add(x, y):\n   return x + y", "output": "def add(x, y):\n   return x + y\n\ndef addSquares(x, y):\n   return x*x + y*y", "category": "Python"}, {"instruction": "What is the argument type of the function \"len()\" in Python?", "input": "", "output": "The argument type of the function \"len()\" in Python is an object.", "category": "Python"}, {"instruction": "Write an Apache VTL code to check if the user is logged in or not.", "input": "", "output": "#if(${user.loggedIn})\n  You are logged in.\n#else\n  You are not logged in.\n#end", "category": "Python"}, {"instruction": "Create a random list of 10 numbers in the range of -10 to 10 in Python.", "input": "", "output": "import random\n \nrandom_list = [random.randint(-10, 10) for i in range(10)] \nprint(random_list)", "category": "Python"}, {"instruction": "Make a prediction using the following machine learning model in Python.", "input": "", "output": "svm_model = SVC()\nsvm_model.fit(X_train, y_train)\npredictions = svm_model.predict(X_test)", "category": "Python"}, {"instruction": "Convert the following array of strings to a set of tuples in Python.", "input": "['Python', 'Java', 'JavaScript']", "output": "arr =  ['Python', 'Java', 'JavaScript']\narr_tuple = tuple(arr)\nprint(arr_tuple)", "category": "Python"}, {"instruction": "Create a python script to determine whether a number is odd or even.", "input": "15", "output": "number = 15 \nif (number % 2 == 0): \n    print(\"even\") \nelse: \n    print(\"odd\")", "category": "Python"}, {"instruction": "Create a bar chart in Python, plotting the following integer data set.", "input": "[1, 2, 4, 8, 16, 32]", "output": "import matplotlib.pyplot as plt\n \ndata_set = [1, 2, 4, 8, 16, 32]\n \nplt.bar(range(len(data_set)), data_set)\nplt.show()", "category": "Python"}, {"instruction": "Create an array in Python that contains five different values.", "input": "", "output": "arr = [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Write a code snippet to determine the number of odd numbers in a given array.", "input": "", "output": "def count_odds(arr):\n    \"\"\"\n    @brief: Counts the number of odd numbers in a given array\n    @param arr: array whose odd numbers are to be counted\n    @return: the number of odd numbers in the given array\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num % 2 == 1:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Design a program to find all prime numbers up to a given limit n.", "input": "", "output": "def find_primes(limit):\n    \"\"\"\n    @brief: Finds all prime numbers up to a given limit n\n    @param limit: the upper limit to find prime numbers\n    @return: a list of all prime numbers found\n    \"\"\"\n    primes = []\n    for n in range(2, limit + 1):\n        is_prime = True\n        for prime in primes:\n            if n % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(n)\n    return primes", "category": "Python"}, {"instruction": "Edit the given list to only include even numbers.", "input": "list = [2,3,4,5,6,7,8]", "output": "for i in list:\n  if i % 2 != 0:\n    list.remove(i)\n\nprint(list)", "category": "Python"}, {"instruction": "Implement a simple search engine using recursion.", "input": "query = \"computer\"\ndata = [\"mobile\",\"computer\",\"laptop\",\"tablet\"]", "output": "def search(query, data):\n  # base case\n  if len(data) == 0:\n    return False\n  # recursive step\n  else:\n    if data[0] == query:\n      return True\n    else:\n      return search(query, data[1:])\n\nquery = \"computer\"\ndata = [\"mobile\",\"computer\",\"laptop\",\"tablet\"]\n\nprint(search(query, data))", "category": "Python"}, {"instruction": "Make an API call to get the current weather in a given city.", "input": "", "output": "import requests\n\napi_key = \"<Enter API key here>\"\ncity = \"London\"\nurl = \"http://api.openweathermap.org/data/2.5/weather?q={}&appid={}\".format(city, api_key)\n\nres = requests.get(url)\ndata = res.json()\n \nprint(\"Current temperature in {} is {}\u00b0F\".format(city, data[\"main\"][\"temp\"]-273.15 * 9/5 + 32))", "category": "Python"}, {"instruction": "Write a function that takes in a max number and returns the sum of all numbers between 0 and the max number.", "input": "10", "output": "def sumFromZeroToMax(n):\n  sum = 0\n  for x in range(n+1):\n    sum += x\n  return sum\n\nprint(sumFromZeroToMax(10))", "category": "Python"}, {"instruction": "Alter the following given code so that it will implement the Bubble Sort Algorithm", "input": "def mySort(arr): \n\tn = len(arr) \n\n\tfor i in range(n-1): \n\t\tfor j in range(0, n-i-1): \n\t\t\tif arr[j] > arr[j+1] : \n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]", "output": "def bubbleSort(arr):\n    n = len(arr) \n\n    for i in range(n): \n  \n        for j in range(0, n-i-1): \n  \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]", "category": "Python"}, {"instruction": "Create a program that takes in a numeric value, X, and prints all the positive divisors of that number.", "input": "X = 8", "output": "def print_divisors(x):\n    divisors = []\n    for i in range(1, x + 1):\n        if(x % i == 0):\n            divisors.append(i)\n    print(divisors)", "category": "Python"}, {"instruction": "Create a code to insert an item in a given position in a linked list.", "input": "Insert \"Hello\" at position 2 in the list {1->2->3->4->5}", "output": "def insertAtPos(head, pos, data): \n    if head is None: \n        return\n    else:\n        temp = head\n        newNode = Node(data)\n        count = 0\n        while (count < pos-1) : \n            temp = temp.next\n            count += 1\n        newNode.next = temp.next\n        temp.next = newNode", "category": "Python"}, {"instruction": "Create a method to calculate the sum of the cubes of the elements in an array.", "input": "arr = [1,2,3,4]", "output": "def sumCubes(arr):\n  sum = 0\n  for i in arr:\n    sum += i**3\n  return sum", "category": "Python"}, {"instruction": "Write a python loop to print all the even numbers between 2 and 15 (inclusive).", "input": "", "output": "for i in range(2, 16):\n    if i % 2 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Create a python anonymous function that squares an input number.", "input": "", "output": "square_num = lambda x: x ** 2", "category": "Python"}, {"instruction": "Write code to delete all elements in a given Python list which are NOT integer type.", "input": "lst = [1, \"a\", 2.3, False, 4, \"abc\"]", "output": "for item in lst[:]:\n    if not isinstance(item, int):\n        lst.remove(item)", "category": "Python"}, {"instruction": "Construct a for loop in Python to iterate through the items in the list and print their corresponding index.", "input": "lst = [1,2,3]", "output": "for i, num in enumerate(lst):\n    print(i, num)", "category": "Python"}, {"instruction": "What is polymorphism and how it is used in object-oriented programming?", "input": "", "output": "Polymorphism is the ability of an object to be interpreted and used differently in different contexts. In object-oriented programming, it allows operations to be performed on objects despite different underlying data types. For example, it allows functions to take multiple types of arguments and still be able to process them, without requiring different lines of code for each data type. Polymorphism also allows for code reuse through the concept of inheritance, where subclasses can inherit all the methods and properties of their parent class. As a result, objects can be written more efficiently and with less repetition.", "category": "Python"}, {"instruction": "Writing a Python function which takes a 2D array as an argument and transposes it.", "input": "arr = [[4, 5, 44], [3, 8, 20], [2, 5, 10]]", "output": "def transpose_(arr):\n  transposedarr = []\n  for i in range(len(arr[0])):\n    row = []\n    for j in range(len(arr)):\n      row.append(arr[j][i])\n    transposedarr.append(row)\n  return transposedarr", "category": "Python"}, {"instruction": "Write a Python script to detect if two numbers have the same frequency of digits.", "input": "", "output": "def same_frequency(num1,num2):\n    str1 = str(num1)\n    str2 = str(num2)\n    if len(str1) != len(str2):\n        return False\n    dict = {}\n    for char in str1:\n        if char in dict:\n            dict[char] += 1\n        else:\n            dict[char] = 1\n    for char in str2:\n        if not char in dict:\n            return False\n        dict[char] -= 1\n    for k in dict:\n        if dict[k] != 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Write a Python function to check if a given string is a palindrome and has all the vowels in it.", "input": "", "output": "def all_vowels_palindrome(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if not word == word[::-1]:\n        return False\n    for char in vowels:\n        if char not in word:\n            return False\n    return True", "category": "Python"}, {"instruction": "Sort the list using Quick Sort", "input": "[2, 3, 5, 6, 1, 4]", "output": "def quick_sort(arr): \n\tif len(arr) <= 1:\n\t\treturn arr\n\tpivot = arr[len(arr) // 2]\n\tleft = [x for x in arr if x < pivot]\n\tright = [x for x in arr if x > pivot]\n\treturn quick_sort(left) + [pivot] + quick_sort(right)", "category": "Python"}, {"instruction": "Input two numbers and output the maximum one in Python", "input": "3, 5", "output": "a = 3\nb = 5\n\nif a > b:\n    print(a)\nelse:\n    print(b)", "category": "Python"}, {"instruction": "Write a python statement to calculate the factorial of 6.", "input": "", "output": "import math\n\nfactorial = math.factorial(6)", "category": "Python"}, {"instruction": "Given an input list of integers, sort the list in ascending order", "input": "", "output": "def sortAsc(lst): \n    for i in range(len(lst)): \n        for j in range(i+1, len(lst)): \n            if lst[i] > lst[j]: \n                lst[i], lst[j] = lst[j], lst[i] \n    return lst", "category": "Python"}, {"instruction": "Write a function to move all zeros in an array to the end.", "input": "[1, 2, 0, 3, 4, 0, 5]", "output": "def moveZeroes(nums):\n    zeros = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeros += 1\n        else:\n            nums[i-zeros] = nums[i]\n    nums[len(nums)-zeros:] = [0] * zeros", "category": "Python"}, {"instruction": "Convert this CSV data into a Pandas DataFrame.", "input": "name,age\nJohn,20\nJames,31", "output": "import pandas as pd\n\ndata = pd.read_csv('data.csv')\n\ndf = pd.DataFrame(data)", "category": "Python"}, {"instruction": "Run the program located in 'helloworld.py'", "input": "", "output": "python helloworld.py", "category": "Python"}, {"instruction": "Write a class definition for a Box class.", "input": "", "output": "class Box:\n    def __init__(self, width, length, height):\n        self.width = width\n        self.length = length\n        self.height = height\n\n    def calculate_volume(self):\n        return self.width * self.length * self.height", "category": "Python"}, {"instruction": "Generate a random 5-element list of integers between 0 and 10.", "input": "", "output": "import random\n\nrandom_list = [random.randint(0, 10) for _ in range(5)]", "category": "Python"}, {"instruction": "Write a Python program to print a random integer between 0 and 5.", "input": "", "output": "import random \n  \n# Print random integer  \nprint(random.randint(0, 5))", "category": "Python"}, {"instruction": "Create a variables in Python to store the following information.", "input": "Name: John, Age: 35", "output": "name = \"John\"\nage = 35", "category": "Python"}, {"instruction": "Code a solution to remove any element from given list if it appears more than 3 times.", "input": "[1,2,3,1,1,1,2]", "output": "def remove_excess_lst(lst): \n    # Count the frequency of each element in the list \n    cnt = Counter(lst)\n\n    # Return the list with elements appearing more than 3 times removed \n    return list(filter(lambda x: cnt[x] <= 3, lst))", "category": "Python"}, {"instruction": "Convert the given list of dictionaries to a tuple of tuples.", "input": "lst = [{\"name\":\"John\", \"age\":21}, {\"name\":\"Bill\", \"age\":30}]", "output": "def convert_to_tuple(lst):\n    tup = [(x['name'], x['age']) for x in lst]\n    return tuple(tup)", "category": "Python"}, {"instruction": "Edit the code below to calculate minimum of 3 numbers.", "input": "def min(a, b):\n    if a < b:\n        return a\n    else:\n        return b", "output": "def min(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c", "category": "Python"}, {"instruction": "Write a method to compare two unsorted arrays of integers and find the number of mismatches.", "input": "[1, 3, 2, 5], [2, 4, 1, 5]", "output": "def get_mismatches(arr1, arr2):\n    mismatches = 0\n    if len(arr1) != len(arr2):\n        return -1\n    for i in range(len(arr1)):\n        if arr1[i] != arr2[i]:\n            mismatches += 1\n    return mismatches", "category": "Python"}, {"instruction": "Make a program to determine if the elements of the array are in increasing order", "input": "[3, 5, 7]", "output": "def isIncreasing(arr):\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return False\n    return True", "category": "Python"}, {"instruction": "Suggest a code snippet to detect a cycle in a linked list", "input": "", "output": "def contains_cycle(head):\n    slow = head\n    fast = head\n    while fast is not None and fast.next is not None:\n        fast = fast.next.next\n        slow = slow.next\n        if slow is fast:\n            return True\n    return False", "category": "Python"}, {"instruction": "Given a list of integers, write a function in Python to sort and reverse the list.", "input": "input_list = [3, 8, 10, 1, 9]", "output": "def sort_and_reverse(list): \n  res_list = sorted(list, reverse=True) \n  return res_list \n  \nsort_and_reverse(input_list) \n\n# Output \n[10, 9, 8, 3, 1]", "category": "Python"}, {"instruction": "Calculate the factorial of n using a recursive function.", "input": "", "output": "def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n-1)", "category": "Python"}, {"instruction": "Create a code in Python to get the current stock price of a company from yahoo finance.", "input": "ticker = \"AAPL\"", "output": "\"\"\"\nCreate a code in Python to get the current stock price of a company from yahoo finance.\n\nInput: ticker = \"AAPL\"\n\"\"\"\n\nimport requests\n\ndef get_stock_price(ticker):\n    url = 'https://finance.yahoo.com/quote/' + ticker\n    response = requests.get(url)\n    data = response.text.split('\"regularMarketPrice\":{\"raw\":')[1].split(',\"fmt\"')[0]\n    return float(data)\n\nprint(get_stock_price('AAPL'))", "category": "Python"}, {"instruction": "Create a method which receives a list of names and outputs the name which occurs the most in that list.", "input": "list = ['Jon', 'Arya', 'Jon', 'Tyrion', 'Cersei', 'Jon']", "output": "\"\"\"\nCreate a method which receives a list of names and outputs the name which occurs the most in that list.\n\nInput: list = ['Jon', 'Arya', 'Jon', 'Tyrion', 'Cersei', 'Jon']\n\"\"\"\n\ndef getMostFrequent(list):\n    frequency = dict()\n    holder = None\n    max_count = 0\n\n    for name in list:\n        if name in frequency: \n            frequency[name] += 1\n        else: \n            frequency[name] = 1\n\n        if frequency[name] > max_count: \n            max_count = frequency[name] \n            holder = name\n\n    return holder \n\nlist = ['Jon', 'Arya', 'Jon', 'Tyrion', 'Cersei', 'Jon']\nprint(getMostFrequent(list))", "category": "Python"}, {"instruction": "Write a code to get the current exchange rate between two currency using the OpenExchangeRates API.", "input": "fromCurrency = \"USD\"\ntoCurrency = \"GBP\"", "output": "\"\"\"\nWrite a code to get the current exchange rate between two currency using the OpenExchangeRates API.\n\nInput: fromCurrency = \"USD\"\n        toCurrency = \"GBP\"\n\"\"\"\n\nimport requests\nimport json\n\ndef get_exchange_rate(fromCurrency, toCurrency):\n    baseUrl = 'https://openexchangerates.org/api/latest.json?app_id=YOUR_APP_ID'\n    response = requests.get(baseUrl)\n    data = json.loads(response.text)\n    rates = data['rates']\n    fromRate = rates[fromCurrency]\n    toRate = rates[toCurrency]\n    return (toRate/fromRate)\n            \nif __name__ == '__main__':\n    print(get_exchange_rate(\"USD\", \"GBP\"))", "category": "Python"}, {"instruction": "Create a program to determine the type of triangle given 3 side lengths", "input": "[5, 4, 3]", "output": "def determine_triangle_type(triangle_sides):\n    if triangle_sides[0] == triangle_sides[1] and triangle_sides[1]  == triangle_sides[2]:\n        return 'equilateral'\n    elif triangle_sides[0] == triangle_sides[1] or triangle_sides[1] == triangle_sides[2] or triangle_sides[2] == triangle_sides[0]:\n        return 'isosceles'\n    else:\n        return 'scalene'", "category": "Python"}, {"instruction": "Write a code that takes a list as an input and returns the elements in reverse order", "input": "['apple', 'banana', 'cherry']", "output": "def reverse_list(input_list):\n    reversed_list = []\n    for i in range(len(input_list)-1,-1,-1):\n        reversed_list.append(input_list[i])\n    return reversed_list", "category": "Python"}, {"instruction": "Write a code that takes a numeric value and returns the factorial of that number", "input": "3", "output": "def factorial(n):\n    result = 1\n    for i in range(1,n+1):\n        result *= i\n    return result", "category": "Python"}, {"instruction": "Create a code that edits a list by adding two to each element", "input": "[1, 2, 3]", "output": "def add_two(input_list):\n    new_list = []\n    for num in input_list:\n        new_list.append(num + 2)\n    return new_list", "category": "Python"}, {"instruction": "Write a code that takes a string and a character as an argument and counts the number of occurrences of that character in the string", "input": "Avengers: \"He brought the team together\"\nCharacter: t", "output": "def count_character(input_string, character):\n    count = 0\n    for char in input_string:\n        if char == character:\n            count +=1\n    return count", "category": "Python"}, {"instruction": "Write a code that takes a list as input and returns a list of every permutation of that list", "input": "[1, 2, 3]", "output": "def get_permutations(input_list): \n    result = [] \n    if len(input_list) == 0: \n        return [] \n    if len(input_list) == 1: \n        return [input_list] \n    for i in range(len(input_list)): \n        x = input_list[i] \n        xs = input_list[:i] + input_list[i+1:] \n        for p in get_permutations(xs): \n            result.append([x] + p) \n    return result", "category": "Python"}, {"instruction": "Merge the following two linked lists.", "input": "Linked List 1: 1->3->5\nLinked List 2: 2->4", "output": "def merge(head1, head2):\n    # If either is empty\n    if not head1 or not head2:\n        return head1 or head2\n    # if first linked list is smaller \n    if head1.data < head2.data:\n        head1.next = merge(head1.next, head2)\n        return head1\n    else: # if second linked list is smaller or equal\n        head2.next = merge(head1, head2.next)\n        return head2", "category": "Python"}, {"instruction": "Suggest the missing line of code in the following Python program.", "input": "nums = [1, 2, 3]\nfor n in nums:\n    print(n)", "output": "nums = [1, 2, 3]\nfor n in nums:\n    print(n)\n\n#Print the sum of the list\nprint(sum(nums))", "category": "Python"}, {"instruction": "Create a function in Python that can compute the area of a rectangular room in square feet.", "input": "length = 20\nwidth = 15", "output": "def findArea(length, width):\n  area = length * width\n  return area\n\n# Call the function\narea = findArea(20, 15)\nprint(\"The area of the room is: \" + str(area) + \"sq.ft\")", "category": "Python"}, {"instruction": "Using Python, reverse a given string \"Hello World!\".", "input": "", "output": "\"!dlroW olleH\"", "category": "Python"}, {"instruction": "Given a list, write a Python code snippet to print the elements of the list in reverse order.", "input": "my_list = [\"one\", \"two\", \"three\", \"four\", \"five\"]", "output": "for element in reversed(my_list):\n    print(element)", "category": "Python"}, {"instruction": "How can you create a dictionary in Python with 3 key-value pairs?", "input": "", "output": "We can create a dictionary in Python with 3 key-value pairs by declaring a dictionary variable with the desired contents. For example:\n\nmy_dict = {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\",\n    \"key3\": \"value3\"\n}", "category": "Python"}, {"instruction": "Write Python code to extract the title from a URL.", "input": "url = \"https://www.google.com/search?q=gpt-3&oq=GPT+3\"", "output": "def get_title(url): \n    url_parsed = urlparse(url)\n    query_parsed = parse_qs(url_parsed.query)\n    title = query_parsed['q'][0]\n    return title\n\nprint(get_title(url))\n\n# Output: GPT 3", "category": "Python"}, {"instruction": "Find the reverse of an array in Python.", "input": "arr = [1, 2, 3, 4, 5]", "output": "arr = [5, 4, 3, 2, 1]", "category": "Python"}, {"instruction": "Generate a list of all even numbers between 20 and 40.", "input": "", "output": "even_numbers = []\nfor num in range(20, 41): \n  if num % 2 == 0: \n    even_numbers.append(num) \n  \nprint(even_numbers) \n\n# Output: [20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]", "category": "Python"}, {"instruction": "Convert a given number to its corresponding Roman numeral.", "input": "", "output": "def convertToRoman(num): \n  val = [ \n            1000, 900, 500, 400, \n            100, 90, 50, 40, \n            10, 9, 5, 4, \n            1 \n        ] \n  syb = [ \n            \"M\", \"CM\", \"D\", \"CD\", \n            \"C\", \"XC\", \"L\", \"XL\", \n            \"X\", \"IX\", \"V\", \"IV\", \n            \"I\"\n        ]\n\n        roman_num = '' \n        i = 0\n        while  num > 0: \n            for _ in range(num // val[i]): \n                roman_num += syb[i] \n                num -= val[i] \n            i += 1\n        return roman_num\n\n# Driver Code\nnum = 13 \nprint(convertToRoman(num)) \n\n# Output: XIII", "category": "Python"}, {"instruction": "Generate a unique ID string of length 12 using a Python function.", "input": "", "output": "import string, random\ndef generate_unique_id(stringLength=12):\n  lettersAndDigits = string.ascii_letters + string.digits\n  return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))\n\nunique_string = generate_unique_id()\nprint(\"unique string: \",unique_string)", "category": "Python"}, {"instruction": "Write a Python program to sort the given list of dictionary elements by the score value", "input": "lst = [{\"score\":1},{\"score\":5},{\"score\":8}]", "output": "def sort_by_score(lst):\n    lst.sort(key=lambda item: item['score'])\n    return lst", "category": "Python"}, {"instruction": "Given the following array and a number k, write a program to determine if it contains a pair of numbers that add up to k.", "input": "arr = [1, 2, 3, 4, 5]\nk = 7", "output": "def has_pair_with_sum(arr, k): \n    temp_set = set() \n  \n    for i in range(len(arr)): \n        temp = k - arr[i] \n        if temp in temp_set: \n            return True\n        temp_set.add(arr[i]) \n  \n    return False", "category": "Python"}, {"instruction": "Create a program that takes two parameters and print out the result of the larger one.", "input": "param1 = 20\nparam2 = 50", "output": "def largest_param(param1, param2):\n    if param1 > param2:\n        return param1\n    else:\n        return param2", "category": "Python"}, {"instruction": "Implement a function to return the element that appears most frequently in a list.", "input": "[5,5,5,5,6,6,7,7,7]", "output": "def find_most_frequent_element(arr):\n    d = {}\n    for num in arr:\n        if num in d: \n            d[num] += 1\n        else:\n            d[num] = 1\n    \n    max_freq = 0\n    most_frequent_element = None\n    for num in d:\n        if d[num] > max_freq:\n            max_freq = d[num]\n            most_frequent_element = num\n\n    return most_frequent_element", "category": "Python"}, {"instruction": "Program a function to get the next element of a list.", "input": "mylist = [1,3,5,7]", "output": "def get_next(mylist):\n    for i in range(len(mylist)-1):\n        return mylist[i+1]\n\nprint(get_next(mylist))", "category": "Python"}, {"instruction": "Develop a code to generate a random port number in the range of 1 to 65535.", "input": "", "output": "import random\n\ndef get_random_port():\n    return random.randint(1, 65535)\n\nrandom_port = get_random_port()\nprint(random_port)", "category": "Python"}, {"instruction": "How do you calculate the hamming distance between two strings?", "input": "str1 = \"abc\"\nstr2 = \"abd\"", "output": "def hamming_distance(str1, str2):\n    # length of the strings must be equal\n    if len(str1) != len(str2):\n        return -1\n    \n    distance = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            distance += 1\n    \n    return distance", "category": "Python"}, {"instruction": "Write code to remove the first item from a list of integers in Python.", "input": "numbers = [2, 3, 4, 5]", "output": "numbers.pop(0)", "category": "Python"}, {"instruction": "How do you run a Python script from the command line?", "input": "", "output": "In order to run a python script from the command line, the \"@python\" command and the path to the file should be used. For example, to execute the \"input.py\" file, the command would be \"@python C:\\Path\\input.py\".", "category": "Python"}, {"instruction": "Write a Python code snippet for printing the items in a given set.", "input": "my_set = {1, 3, 5, 7, 9}", "output": "for item in my_set:\n    print(item)", "category": "Python"}, {"instruction": "Using the provided data, generate a heatmap that contains the temperature readings for each hour.", "input": "data = [[7,15,22], [2,7,23], [9,12,25]]", "output": "from matplotlib.pyplot import imshow\nfrom matplotlib import pyplot as plt\nfrom numpy import array\n\n# Convert data to numpy array\ndata_array = array(data)\n\n# Plot heatmap\nfig, ax = plt.subplots()\nim = ax.imshow(data_array)\nfig.colorbar(im)\nplt.show()", "category": "Python"}, {"instruction": "Generate a unique 8-digit number using the Python Random module", "input": "", "output": "import random \n\nrandom.seed(32) \nunique_id = random.randint(100000000, 999999999)\nprint(\"unique 8-digit number:\", unique_id)", "category": "Python"}, {"instruction": "Create and run a Python script that prints \"Hello, World!\"", "input": "", "output": "# A simple python script\nprint(\"Hello, World!\")", "category": "Python"}, {"instruction": "How would you convert an integer to a float in Python?", "input": "", "output": "You can convert an integer to a float in Python using the float() function. For example, float(4) would return 4.0.", "category": "Python"}, {"instruction": "Debug the following piece of code so that the program functions properly.", "input": "def sub_array(array, num):\n    for i in range(len(array) - 1, 0, -1):\n        if array[i] == num:\n            del array[i]", "output": "def sub_array(array, num):\n    for i in range(len(array) - 1, 0, -1):\n        if array[i] == num:\n            del array[i]\n        else:\n            break", "category": "Python"}, {"instruction": "Write a function to multiply an array of 3 numbers by their sum.", "input": "[4, 5, 6]", "output": "def multiply_array(arr): \n  sum_of_arr = sum(arr)\n  for i in range(len(arr)): \n    arr[i] = arr[i] * sum_of_arr \n  return arr", "category": "Python"}, {"instruction": "Write code to create a list of length 10 with random integers.", "input": "", "output": "import random \n\nmyList = [] \nfor i in range(10): \n     myList.append(random.randint(0,10)) \n\nprint(myList)", "category": "Python"}, {"instruction": "Create a code to display all unique pairs from the following list.", "input": "[1,2,3,4,5,6]", "output": "pairs = []\nfor i in range(len(list)):\n    for j in range(i+1, len(list)):\n        pairs.append((list[i], list[j])) \n\nprint(pairs)", "category": "Python"}, {"instruction": "Implement a recursive function to calculate the factorial of a number, given by the user as an argument.", "input": "", "output": "def calculate_factorial(num):\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return num * calculate_factorial(num-1)", "category": "Python"}, {"instruction": "Create a python dictionary of two elements 'name' and 'age' with the corresponding values John and 25.", "input": "", "output": "my_dict = {'name': 'John', 'age': 25}", "category": "Python"}, {"instruction": "Create an iOS table view to display the list of items.", "input": "", "output": "class TableViewController: UITableViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.dataSource = self\n    }\n    \n    override func numberOfSections(in tableView: UITableView) -> Int {\n        // Number of sections your table view has\n        return 1\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        // Number of rows the table view should have\n        return items.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"Cell\", for: indexPath)\n        cell.textLabel?.text = items[indexPath.row]\n        return cell\n    }\n\n    var items = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\", \"Item 5\"]\n    \n}", "category": "Python"}, {"instruction": "Create a Python function that takes a string and prints out its reverse.", "input": "string = \"Hello world!\"", "output": "def reverseString(string):\n  return string[::-1]\n\nprint(reverseString(string)) # Output: !dlrow olleH", "category": "Python"}, {"instruction": "Create a program which takes two strings and checks if they are anagrams of one another.", "input": "Input string 1: eats\nInput string 2: seat", "output": "def is_anagram(str1, str2):\n    if (sorted(str1)== sorted(str2)):\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    str1 = input(\"Input string 1: \")\n    str2 = input(\"Input string 2: \")\n    print(is_anagram(str1, str2))", "category": "Python"}, {"instruction": "Write a code that takes in two strings that are anagrams of each other and determines whether they are anagrams.", "input": "str1 = 'martha'\nstr2 = 'hartma'", "output": "def is_anagram(str1, str2):\n    if (sorted(str1)== sorted(str2)):\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    str1 = 'martha'\n    str2 = 'hartma'\n    print(is_anagram(str1, str2))", "category": "Python"}, {"instruction": "Create a function that takes two arguments, a list of strings and a string and returns the number of times the passed in string appears in the list.", "input": "words = ['hello', 'hi', 'world', 'foo', 'bar', 'hello']\ngiven_string = 'hello'", "output": "def find_words(words, given_string):\n    count = 0\n    for word in words:\n        if word == given_string:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    words = ['hello', 'hi', 'world', 'foo', 'bar', 'hello']\n    given_string = 'hello'\n    print(find_words(words, given_string))", "category": "Python"}, {"instruction": "Design a class named Circle that can store information about a circle and perform calculations on it.", "input": "", "output": "class Circle:\n    \n    def __init__(self, radius):\n        self.radius = radius\n    \n    def calculate_area(self):\n        return 3.14 * self.radius * self.radius\n    \n    def calculate_circumference(self):\n        return 2 * 3.14 * self.radius", "category": "Python"}, {"instruction": "Format the following list in descending order of number of characters in each string.", "input": "list = ['Hello', 'World', 'Technology']", "output": "def sort_list(list):\n    for i in range(len(list)):\n        for j in range(0, len(list)-i-1):\n            if len(list[j]) < len(list[j+1]):\n                list[j], list[j+1] = list[j+1], list[j]\n    return list\n\nsort_list([\"Hello\", \"World\", \"Technology\"])", "category": "Python"}, {"instruction": "Create an algorithm to find out the longest common sub-sequence between two string inputs.", "input": "\"AGGTAB\"\n\"GXTXAYB\"", "output": "def LCSubStr(Str1, Str2): \n    n = len(Str1)\n    m = len(Str2)\n    LCSuff = [0] * (n + 1)\n    LCSuff = [[0 for k in range(m + 1)] for l in range(n + 1)]   \n    result = 0    \n    for i in range(n): \n        for j in range(m):  \n            if (Str1[i] == Str2[j]): \n                LCSuff[i + 1][j + 1] =LCSuff[i][j] + 1\n                if (LCSuff[i + 1][j + 1] > result): \n                    result = LCSuff[i + 1][j + 1]\n    return result", "category": "Python"}, {"instruction": "Create a function to return the subset of an array which has the lengths of its elements smaller than the given threshold.", "input": "[1, 5, 2, 8], threshold = 5", "output": "def filter_length(arr, th):\n  subset = []\n  for el in arr:\n    if len(el) <= th:\n      subset.append(el)\n  return subset", "category": "Python"}, {"instruction": "Create a function in Python to generate n permutations of a given array.", "input": "arr = [1, 2, 3]\nn = 6", "output": "import itertools \n\n# Function to generate \n# n permutations of the given array \ndef permutation(arr, n): \n\t\n\t# Get all permutations \n\tpermList = list(itertools.permutations(arr, n)) \n\t\n\t# Converting each tuple in the \n\t# list of tuples to list \n\tres = [list(ele) for ele in permList] \n\n\t# Returning the list of lists \n\treturn res", "category": "Python"}, {"instruction": "Write a function to check whether two lists are equal.", "input": "list1=[1,2,3,4,5]\nlist2=[1,2,3,4,5]", "output": "def equal(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    \n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    return True", "category": "Python"}, {"instruction": "Can you code a solution to Bubble Sort an array of integers?", "input": "[5, 4, 3, 2, 1]", "output": "def bubbleSort(arr): \n    n = len(arr)\n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [5, 4, 3, 2, 1] \n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "category": "Python"}, {"instruction": "Edit this code snippet to reverse a string in Python.", "input": "def reverse_string(s):\n    # Edit here\n    return reversed_string", "output": "def reverse_string(s):\n    reversed_string = \"\"\n    for char in s:\n        reversed_string = char + reversed_string\n    return reversed_string", "category": "Python"}, {"instruction": "Create a quick calculator in Python based on the user input.", "input": "2 * 3 + 5", "output": "def quick_calc(string):\n    result = 0 \n    calculation = string.split(\" \")\n    for item in calculation:\n        try:\n            result += int(item)\n        except:\n            if item.lower() == \"*\":\n                result *= int(calculation[calculation.index(item) + 1])\n    return result\n\nprint(quick_calc(\"2 * 3 + 5\"))\n11", "category": "Python"}, {"instruction": "Create a function in Python that adds two numbers.", "input": "", "output": "def add(x, y):\n    \"\"\"Return the sum of x and y.\"\"\"\n    return x + y", "category": "Python"}, {"instruction": "Implement Binary Search in Python", "input": "[2, 3, 4, 5, 11, 19, 20]", "output": "# function to do binary search\ndef binarySearch(array, x): \n    l, r = 0, len(array)-1 \n    while l <= r: \n  \n        mid = l + (r - l)//2; \n          \n        # Check if x is present at mid \n        if array[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        elif array[mid] < x: \n            l = mid + 1\n  \n        # If x is smaller, ignore right half \n        else: \n            r = mid - 1\n      \n    # If we reach here, then the element \n    # was not present \n    return -1\n  \narray = [2, 3, 4, 5, 11, 19, 20] \nx = 11\n\nresult = binarySearch(array, x) \nif result != -1: \n    print (\"Element is present at index\", \n            result) \nelse: \n    print (\"Element is not present in array\")", "category": "Python"}, {"instruction": "Use the following input to write a python code for calculating the area of a triangle", "input": "Base = 6cm, Height = 4.5cm", "output": "# calculate the area of a triangle\n# define the constant base and height\nbase = 6.0\nheight = 4.5\n# calculate the area\narea = 0.5 * base * height\n# print the result\nprint('The area of the triangle is: %0.2f cm^2' %area)", "category": "Python"}, {"instruction": "Write the code for the following sorting algorithm.", "input": "Bubble Sort", "output": "def bubbleSort(arr): \n  \n    # Traverse through all array elements \n    for i in range(len(arr)): \n  \n        # Last i elements are already in place \n        for j in range(0, len(arr)-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [64, 34, 25, 12, 22, 11, 90] \n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "category": "Python"}, {"instruction": "Write a TensorFlow program to compute the sum of two tensors.", "input": "x = [[1,2],[3,4]] \ny = [[5,6],[7,8]]", "output": "import tensorflow as tf\n\nx = tf.constant([[1,2],[3,4]], dtype=tf.int32) \ny = tf.constant([[5,6],[7,8]], dtype=tf.int32)\n\n#Sum operation\nz = tf.add(x, y)\n\n#Run in session\nwith tf.Session() as session:\n  print(session.run(z))\n\n# Output: \n# [[ 6  8]\n#  [10 12]]", "category": "Python"}, {"instruction": "Write a code to print out the union of two sets using Python.", "input": "", "output": "def find_union(A, B):\n    return list(set(A).union(set(B)))\n\nA = [1, 2, 3, 4] \nB = [4, 5, 6, 7] \nprint(find_union(A, B))", "category": "Python"}, {"instruction": "Create a function to find the number of elements in the list which have a value larger than the given number 'k'.", "input": "[10, 15, 20, 25], k = 15", "output": "def count_larger(lst, k):\n    count = 0\n    for i in lst:\n        if i > k:\n            count += 1\n    return count\n        \nprint(count_larger([10, 15, 20, 25], 15))", "category": "Python"}, {"instruction": "Generate a code to perform a Merge Sort on an unsorted array of numbers.", "input": "", "output": "def mergeSort(arr): \n    if len(arr) >1: \n        mid = len(arr)//2 \n        L = arr[:mid] \n        R = arr[mid:] \n  \n        mergeSort(L) \n        mergeSort(R) \n  \n        i = j = k = 0\n          \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                arr[k] = L[i] \n                i+=1\n            else: \n                arr[k] = R[j] \n                j+=1\n            k+=1\n          \n        while i < len(L): \n            arr[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            arr[k] = R[j] \n            j+=1\n            k+=1", "category": "Python"}, {"instruction": "Edit the following Python class 'Foo' to accept a list of numbers upon instantiation.", "input": "class Foo():\n    def __init__(self):\n        self.lst = []", "output": "class Foo():\n    def __init__(self, lst):\n        self.lst = lst", "category": "Python"}, {"instruction": "Output a list of each element in the input increase twice.", "input": "[1,10,20]", "output": "def double_each(lst):\n    return [x*2 for x in lst]\n\nprint(double_each([1,10,20]))", "category": "Python"}, {"instruction": "Given the input list of size N, write a code to print out the sum of the first N-1 elements.", "input": "X = [10, 20, 30, 40, 50]", "output": "def sum_firstN_minusOne(X):\n    total = 0\n    for i in range(len(X)-1):\n        total += X[i]\n    return total\n\nprint(sum_firstN_minusOne(X))", "category": "Python"}, {"instruction": "Modify the input so that the following Python program returns 'Yes'", "input": "num = 10\n\nif num > 5:\n    print('No')", "output": "num = 10\n\nif num > 5:\n    print('Yes')", "category": "Python"}, {"instruction": "Create a Python script to output the sum of the elements in a given 2-D array.", "input": "X = [[11, 18], [20, 1], [12, 16]]", "output": "def sum_elements(X):\n    sums = 0\n    for i in range(len(X)):\n        for j in range(len(X[i])):\n            sums+=X[i][j]\n    return sums\n\nprint(sum_elements(X))", "category": "Python"}, {"instruction": "Given a Python function, edit the function such that it correctly prints the second highest value of the list.", "input": "def getSecondMax(a):\n    print(max(a))", "output": "def getSecondMax(a):\n    s = sorted(a)[-2]\n    print(s)", "category": "Python"}, {"instruction": "Using the input, write a function that prints out the Nth Fibonacci number.", "input": "", "output": "def Fibonacci(n): \n    if n < 0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n == 0: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n == 1: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)", "category": "Python"}, {"instruction": "Implement a function in Python that takes a list of strings as parameter and prints out the longest string.", "input": "strings = [\"Hello\", \"world\", \"Welcome\",\"to\", \"my\", \"programming\", \"challenge\"]", "output": "def print_longest_string(strings):\n  longest_string = \"\"\n  for string in strings:\n    if len(string) > len(longest_string):\n      longest_string = string\n  print(longest_string)\n\nprint_longest_string(strings)", "category": "Python"}, {"instruction": "Generate a Python code that flattens a two-dimensional array.", "input": "[[1, 2], [3, 4]]", "output": "def flatten_2d_array(arr):\n    flat_arr = []\n    for subarr in arr:\n        flat_arr += subarr\n    return flat_arr\n\n# Driver code\ninput_list = [[1, 2], [3, 4]]\nprint(flatten_2d_array(input_list))", "category": "Python"}, {"instruction": "Create a python class \"Car\" with fields \"make\" and \"model\".", "input": "", "output": "class Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model", "category": "Python"}, {"instruction": "Identify the type of a variable in a Python program.", "input": "x = [1, 2, 3]", "output": "type(x) # List", "category": "Python"}, {"instruction": "Describe your approach to sorting a variety of data with a single sorting algorithm.", "input": "", "output": "My approach to sorting a variety of data would involve using a single sorting algorithm. Depending on the type of data, I would select the most appropriate sorting algorithm which would involve understanding the complexity of the data and the type of sorting required. Generally, I would use quick sort or merge sort as they are efficient and have good performance. However, if needed, I would be open to using insertion or bubble sort as well.", "category": "Python"}, {"instruction": "Create a custom exception class for a restaurant that has no menu items.", "input": "", "output": "class NoMenuItemsError(Exception): \n    def __init__(self, message): \n        super().__init__(message)\n        self.message = message \n\ndef raise_error():\n    raise NoMenuItemsError(\"No menu items are available\")", "category": "Python"}, {"instruction": "Create a dictionary in which keys are characters and values are the occurences of that character in a given string.", "input": "string = \"apple\"", "output": "def get_char_count(string):\n    char_count = {}\n    for char in string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    return char_count", "category": "Python"}, {"instruction": "Use the information provided to initialize a dictionary in Python.", "input": "keys = [\"name\", \"age\", \"gender\"]\nvalues = [\"John Doe\", 25, \"Male\"]", "output": "my_dict = dict(zip(keys, values))", "category": "Python"}, {"instruction": "Generate a code in Lua to find the maximum number in a given array.", "input": "", "output": "function findMax(arr)\n    local maxValue = -math.huge\n    for i = 1, #arr do\n        if arr[i] > maxValue then\n            maxValue = arr[i]\n        end\n    end\n    return maxValue\nend", "category": "Python"}, {"instruction": "Suggest a solution to convert a given number from one base to another.", "input": "", "output": "def base_conversion(num, base_from, base_to):\n if base_from == 10:\n  num = int(num, base_to)\n elif base_to == 10:\n  num = int(str(num), base_from)\n else:\n  num = int(str(int(str(num), base_from)), base_to) \n return num", "category": "Python"}, {"instruction": "Write a Python parser to parse the json string to a dictionary.", "input": "{\"name\": \"John\", \"age\": 23}", "output": "import json\n\ndef json_parser(string):\n  data = json.loads(string)\n  return data", "category": "Python"}, {"instruction": "Implement an algorithm to generate the permutations of a string", "input": "", "output": "def permutations(string):\n    if len(string) <= 1:\n        return set([string])\n\n    # get the last character\n    last_char = string[-1]\n\n    # get all permutations for the remaining characters\n    all_permutations = permutations(string[:-1])\n\n    # create permutations for including the last character\n    permutations_with_last_char = set()\n    for permutation in all_permutations:\n        for idx in range(len(string)):\n            permutation_with_last_char = permutation[:idx] + last_char + permutation[idx:]\n            permutations_with_last_char.add(permutation_with_last_char)\n\n    return permutations_with_last_char", "category": "Python"}, {"instruction": "Given an array of integers, write a recursive program to merge two sorted subarrays ar1 and ar2", "input": "ar1 = [1, 4, 7, 9]\nar2 = [2, 5, 6, 8]", "output": "def mergeSortedSubarrays(ar1, ar2): \n    # if ar1 is empty \n    if len(ar1) == 0: \n        return ar2   \n    # if ar2 is empty \n    if len(ar2) == 0: \n        return ar1 \n  \n    # compare the first elements of each array\n    if ar1[0] < ar2[0]: \n        # add the smaller element to the result\n        result = [ar1[0]] \n        # remove the element from the first array \n        ar1.remove(ar1[0]) \n    else: \n        result = [ar2[0]] \n        ar2.remove(ar2[0]) \n  \n    # call the same function over the remaining elements in the both arrays\n    result = result + mergeSortedSubarrays(ar1, ar2) \n    return result", "category": "Python"}, {"instruction": "List all the methods available in axelrod python library", "input": "", "output": "Methods available in axelrod Python library are constructor method, player_names method, init method, play method, get_history method, reset method, sign_string method, find_conformers method, oppose_strategy method, strategy method, final_score method, cooperation method, defect method, normalised_score method, and elo_rating method.", "category": "Python"}, {"instruction": "Create a function that takes two strings's, two string length's and returns true if the second string is a rotation of the first.", "input": "string1 = \"Hello World\"\nstring2 = \"WorldHello\"\nlength1 = 11\nlength2 = 11", "output": "def isRotation(string1, string2, length1, length2):\n    if length1 == length2 and len(string1)>0:\n        string1string1 = string1 + string1\n        return string2 in string1string1", "category": "Python"}, {"instruction": "Create a program to take a string of words and return the count of each word.", "input": "word_string = \"This is a sentence of words\"", "output": "def countWords(word_string):\n    words = word_string.split()\n    count_dict = {}\n    for word in words:\n        count_dict[word] = words.count(word)\n    return count_dict", "category": "Python"}, {"instruction": "Create a python class that stores the name of the student, their total marks and return the student name with their total marks.", "input": "name = 'John'\nmarks = 75", "output": "class Student:\n    def __init__(self, name, marks):\n        self.name = name\n        self.marks = marks\n\n    def get_details(self):\n        return self.name + \": \" + str(self.marks)", "category": "Python"}, {"instruction": "Define an absolute difference function in Python to find the difference between two numbers.", "input": "", "output": "def absolute_difference(x, y):\n    return abs(x - y)", "category": "Python"}, {"instruction": "Write a python program that takes a string as a parameter and prints the character at index 4 if the length of the string is greater than 4.", "input": "astring = \"Python\"", "output": "def character_at_index(astring):\n    if len(astring) > 4:\n        print(astring[4])", "category": "Python"}, {"instruction": "We need to find the maximum element in a given array of numbers.", "input": "[1, 2, 3, 4, 5]", "output": "def find_max(arr):\n maximum = arr[0]\n for i in arr[1:]:\n if i > maximum:\n maximum = i\n return maximum", "category": "Python"}, {"instruction": "We need to build a function to compute the product of the elements of a given array.", "input": "[1, 2, 3, 4, 5]", "output": "def product_of_array(arr):\n prod = 1\n for i in arr:\n prod *= i\n return prod", "category": "Python"}, {"instruction": "We need to write a program to generate all permutations of a given string.", "input": "", "output": "def generate_permutations(s):\n results = []\n if len(s) == 1:\n results.append(s)\n else:\n for i, c in enumerate(s):\n for perm in generate_permutations(s[:i] + s[i + 1:]):\n results.append(c + perm)\n return results", "category": "Python"}, {"instruction": "We need to find all unique combinations of elements from a given list of items.", "input": "[1, 2, 3, 4]", "output": "def find_unique_combinations(items):\n result = []\n for i in range(1, len(items) + 1):\n for combination in itertools.combinations(items, i):\n result.append(list(combination))\n return result", "category": "Python"}, {"instruction": "You are given a list of numbers and you need to calculate the standard deviation of the numbers.", "input": "[1, 2, 3, 4, 5]", "output": "import statistics\n\ndef calculate_std_dev(nums):\n return statistics.stdev(nums)", "category": "Python"}, {"instruction": "Generate a classification network in a deep learning framework.", "input": "", "output": "import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation\n\nmodel = Sequential()\n\nmodel.add(Dense(64, input_dim = 8))\nmodel.add(Activation('relu'))\nmodel.add(Dense(16))\nmodel.add(Activation('sigmoid'))\nmodel.add(Dense(2))\nmodel.add(Activation('softmax'))\n\nmodel.compile(loss = 'categorical_crossentropy',\n              optimizer = 'adam',\n              metrics = ['accuracy'])", "category": "Python"}, {"instruction": "Create a function to test if an integer is prime or not.", "input": "", "output": "def is_prime(x):\n    if x < 2: \n        return False\n    for n in range(2, x - 1):\n        if x % n == 0: \n            return False\n    return True", "category": "Python"}, {"instruction": "What is deadlock in operating system?", "input": "", "output": "Deadlock is a situation in an operating system where two or more processes are unable to move forward due to the resources already being used by some of the other processes. This is a state of equilibrium where no progress can be made in executing the processes due to a circular wait for resources. A process might be waiting indefinitely for an event that will never occur. This can cause a system to become unresponsive as no progress can be made in execution. It is important for operating system designers to identify potential deadlocks and manage them effectively.", "category": "Python"}, {"instruction": "Explain the purpose of a deadlock in a multithreaded program.", "input": "", "output": "A deadlock occurs in a multithreaded program when two or more threads are blocked from accessing a resource, because each thread is waiting for a resource that is being held by one of the other threads. This results in all threads being stuck, unable to proceed.", "category": "Python"}, {"instruction": "Implement a function to generate the Fibonacci series upto 'n' terms.", "input": "n = 10", "output": "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Create a python function which finds the intersection of two lists", "input": "list1=[2, 5, 8, 10]\nlist2=[3, 5, 8, 10]", "output": "def intersect(list1,list2):\n    return [i for i in list1 if i in list2]", "category": "Python"}, {"instruction": "Given two lists, write a Python code to find the common elements in both the lists", "input": "list1 = [3, 7, 14, 19]\nlist2 = [6, 8, 14, 17]", "output": "common_elements = [element for element in list1 if element in list2]\n\nprint(common_elements) #[14]", "category": "Python"}, {"instruction": "Explain the use of the continue keyword in Python", "input": "", "output": "The continue keyword can be used to skip over certain elements in a loop body. It is often used to skip over certain unwanted elements. It works by returning to the loop condition by stopping the current iteration of the loop and jumping straight to the next iteration.", "category": "Python"}, {"instruction": "Using the following data, generate a random string in Python", "input": "data = [\u201cH\u201d, \u201ce\u201d, \u201cl\u201d, \u201cl\u201d, \u201co\u201d]", "output": "import random\n\nrandom_string = \"\".join(random.choices(data, k=5))\n\nprint(random_string) #helll or olleh or leloh or any other combination", "category": "Python"}, {"instruction": "Design a program to reverse a string without using the built-in 'reverse' method.", "input": "string = \"Hello World\"", "output": "def reverseStr(str):\n    revStr = \"\" \n    i = len(str) - 1\n    while i >= 0: \n        revStr += str[i] \n        i = i - 1\n    return revStr", "category": "Python"}, {"instruction": "Create code to check if the number is a power of three.", "input": "num = 8", "output": "def is_power_of_3(num):\n  if num == 1:\n    return True\n  elif num % 3 != 0:\n    return False\n  else:\n    return is_power_of_3(num / 3)", "category": "Python"}, {"instruction": "Create a python function that takes a string as input and returns a boolean if the string contains only upper case letters.", "input": "", "output": "def all_upper(s):\n        return s.isupper()", "category": "Python"}, {"instruction": "Rewrite the given recursive Python program as a loop.", "input": "def factorial(n): \n   if (n == 1): \n       return n\n   else: \n       return n * factorial(n-1)", "output": "def factorial(n): \n    result = 1\n    for i in range(n): \n        result = result * (i + 1)\n    return result", "category": "Python"}, {"instruction": "Compile a program to find the number of a specific digit in a given number.", "input": "Number = 1234, Digit = 3", "output": "def count_digit(num, digit):\n    count = 0\n    while num > 0:\n        if num % 10 == digit:\n            count += 1\n        num //= 10\n    \n    return count\n\nNumber = 1234\nDigit = 3\nprint(count_digit(Number, Digit))", "category": "Python"}, {"instruction": "Compile a program to check whether an array is a subset of another array", "input": "example1 = [4, 5, 6]\nexample2 = [5, 6, 7]", "output": "def is_subset(a, b): \n    for i in a: \n        if i not in b: \n            return False \n    return True", "category": "Python"}, {"instruction": "Design a series of methods that would be used to implement a card game", "input": "", "output": "The methods that could be used to implement a card game would include the following: \n\n- drawCard(): To retrieve a card from the deck. \n- shuffleDeck(): To mix up the cards in the deck. \n- getValue(): To get the numerical value of a card. \n- compareCards(): To compare two cards. \n- checkForWinner(): To check if a player has won or not. \n- dealCards(): To distribute the cards to players. \n- removeCard(): To remove a card from the deck. \n- printScore(): To print out the scores of a player.", "category": "Python"}, {"instruction": "Why is it important to document each step of the code development process?", "input": "", "output": "It is important to document each step of the code development process to ensure that all of the code is easily understandable and maintainable. Documentation can explain how the code works, which can be useful for other developers that may need to modify or debug the code. Additionally, it can explain the logic and any decisions that were made while writing the code, as well as provide any additional information that may be useful. Ultimately, documenting each step of the code development process helps to ensure that the code can be easily understood and maintained.", "category": "Python"}, {"instruction": "How can we use try\u2026except blocks in Python to handle errors?", "input": "", "output": "Try...except blocks are used in Python to handle errors gracefully. They provide a way for Python to execute a code block and gracefully handle any errors that may occur. The code block inside the try is executed first and if an error occurs, it will be caught by the except block and handled. For example, if we have a function that might generate an error, we can use a try...except block to gracefully handle the error and prevent the program from crashing. The try...except block allows us to execute the code and gracefully handle any errors that may occur.", "category": "Python"}, {"instruction": "Discuss the potential performance impacts of using a Numpy array for a given task", "input": "", "output": "Using a Numpy array for a given task can potentially have a positive performance impact in terms of memory usage and computation speed. Numpy arrays are stored contiguously in memory, making them much faster to access than an array stored in traditional Python lists whose elements are stored separately. Additionally, when performing element-wise operations, such as mathematical computations across arrays, Numpy arrays can be much faster than using regular Python loops. Since they are stored contiguosly, they benefit from the processor's usage of cache coherency. Therefore, using Numpy arrays can greatly reduce latency and increase the computational performance of a task.", "category": "Python"}, {"instruction": "Write a function to check if an array is sorted according to given constraints.", "input": "arr = [2, 3, 15, 9, 5]", "output": "def isSorted(arr) : \n\tn = len(arr) \n\tfor i in range(0,n-1): \n\t\tif arr[i] > arr[i+1]:\n\t\t\treturn False\n\treturn True", "category": "Python"}, {"instruction": "Create a class to represent a 3D point(x,y,z).", "input": "", "output": "class Point3D(object):\n    def __init__(self, x, y, z):\n        self.x = x \n        self.y = y \n        self.z = z\n    \n    def __repr__(self):\n        return \"Point3D(%d, %d, %d)\" % (self.x, self.y, self.z)", "category": "Python"}, {"instruction": "Write a code that checks if two String are anagrams.", "input": "s1 = \"listen\", s2 = \"silent\"", "output": "def areAnagrams(s1, s2): \n  \n    if (len(s1) != len(s2)): \n        return False\n  \n    s1 = sorted(s1) \n    s2 = sorted(s2) \n  \n    for i in range(len(s1)): \n        if (s1[i] != s2[i]):\n          return False\n  \n    return True", "category": "Python"}, {"instruction": "How can you create a dictionairy from the following two lists in Python?", "input": "list1 = [\"a\", \"b\", \"c\"]\nlist2 = [1, 2, 3]", "output": "dict_from_lists = dict(zip(list1, list2))", "category": "Python"}, {"instruction": "Write a function that takes two inputs, a list and a target number, and prints only the list items whose total add up to the target number.", "input": "list = [1, 5, 9, 10], target = 10", "output": "def sum_of_list(lst, target):\n    \"\"\"\n    This function takes a list and a target number as inputs, and prints only the list items whose total add up to the target number.\n    \"\"\"\n    for i in range(len(lst)-1):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                print (lst[i], lst[j])\n\nsum_of_list(list, target)", "category": "Python"}, {"instruction": "Explain what is meant by recursion in programming.", "input": "", "output": "Recursion is a programming technique which involves a function calling itself in order to solve a problem. It allows the function to repeat itself until a certain condition is met, by breaking the problem down into simpler versions of itself. This is done by using a base case, which is a smaller version of the problem that can be solved without using recursion, and the recursive case, which is the same problem but broken down in a way that it can call itself as a subproblem. This technique can be used to solve complex problems and be used for things such as sorting algorithms, tree traversals, and graph algorithms.", "category": "Python"}, {"instruction": "Implement a search algorithm with the given data structure.", "input": "def searchTree(T, k):\n    \"\"\"\n    Tree T is either empty or a node with two subtrees, left and right. \n    The value at the root is a[0]\n    \"\"\"", "output": "def searchTree(T, k):\n    if not T:\n        return False\n\n    if k == T[0]:\n        return True\n    elif k < T[0]:\n        return searchTree(T[1], k)\n    else:\n        return searchTree(T[2], k)", "category": "Python"}, {"instruction": "Use the provided text to generate a python ``dict``.", "input": "KEY1:VALUE1,KEY2:VALUE2,KEY3:VALUE3", "output": "{'KEY1': 'VALUE1', 'KEY2': 'VALUE2', 'KEY3': 'VALUE3'}", "category": "Python"}, {"instruction": "Check whether all elements in the array are equal using Python.", "input": "arr = [2,2,2]", "output": "# Check whether all elements in the array are equal\nif all(x == arr[0] for x in arr):\n    print(\"All elements are equal\")\nelse:\n    print(\"Elements are not equal\")", "category": "Python"}, {"instruction": "Create a class named Square and create a method to calculate the area.", "input": "", "output": "class Square:\n    def __init__(self, side):\n        self.side = side\n \n    def area(self):\n        return self.side * self.side", "category": "Python"}, {"instruction": "Find the smallest number in the array using the reduce method.", "input": "array = [2, 7, 3, 8, 5]", "output": "import functools\n\narray = [2, 7, 3, 8, 5]\n\nsmallest = functools.reduce(lambda x,y: x if x < y else y, array)\n\nprint(smallest)", "category": "Python"}, {"instruction": "Write a Python code to classify the following sentence", "input": "It's raining cats and dogs", "output": "import nltk\nfrom nltk.tokenize import word_tokenize\n\nsentence = \"It's raining cats and dogs\"\ntokens = word_tokenize(sentence)\ntagged = nltk.pos_tag(tokens)\n\nprint(tagged) #[('It', 'PRP'), (\"'s\", 'VBZ'), ('raining', 'VBG'), ('cats', 'NNS'), ('and', 'CC'), ('dogs', 'NNS')]", "category": "Python"}, {"instruction": "Generate a unit test for the following bubble sort algorithm", "input": "def bubble_sort(arr): \n    n = len(arr) \n    for i in range(n-1): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]", "output": "import unittest\n\nclass TestBubbleSort(unittest.TestCase):\n    def test_sort(self):\n        arr = [5, 2, 3, 7, 1]\n        bubble_sort(arr)\n        self.assertEqual(arr, [1, 2, 3, 5, 7])\n\nif __name__ == '__main__':\n    unittest.main()", "category": "Python"}, {"instruction": "Write a pseudocode to compare two strings and determine which is longer.", "input": "", "output": "Function CompareStrings(str1, str2)\n  if Length(str1) > Length(str2)\n    return str1\n  else\n    return str2\nEnd Function", "category": "Python"}, {"instruction": "Define a function to compare two strings", "input": "", "output": "def compareStrings(string1, string2):  \n    if(string1 == string2): \n        return 0\n    elif(string1 > string2): \n        return 1\n    else: \n        return -1", "category": "Python"}, {"instruction": "Suggest an additional function needed to complete the following programme.", "input": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None", "output": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \n    def getData(self):\n        return self.data", "category": "Python"}, {"instruction": "Write a function in Python that takes four strings as parameters and returns a single string with all strings concatenated together.", "input": "", "output": "def concatenate(str1, str2, str3, str4):\n  return str1 + str2 + str3 + str4", "category": "Python"}, {"instruction": "Design a class to normalize the salary of an employee with a minimum salary of 20,000.", "input": "", "output": "class SalaryNormalizer:\n    def __init__(self, salary):\n        self.minimum = 20000\n        self.input_salary = salary\n \n    def normalize(self):\n        if self.input_salary < self.minimum:\n            self.normalized_salary = self.minimum\n        else:\n            self.normalized_salary = self.input_salary\n \n        return self.normalized_salary", "category": "Python"}, {"instruction": "Write a code to print out an array of the first ten positive even numbers.", "input": "", "output": "def printEvenNumbers():\n    my_list = []\n    for item in range(2,21,2):\n        my_list.append(item) \n    print(my_list)\n\nprintEvenNumbers() # prints [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]", "category": "Python"}, {"instruction": "What is the GIL in Python and what is its purpose?", "input": "", "output": "The Global Interpreter Lock (GIL) is a mechanism used by Python to manage and control access to shared data and resources. It prevents multiple threads from accessing the same data or using shared resources at the same time. The purpose of the GIL is to prevent the Python interpreter from crashing due to race conditions.", "category": "Python"}, {"instruction": "What data type is returned by the Python function pow()?", "input": "", "output": "The Python function pow() returns a float data type.", "category": "Python"}, {"instruction": "Write a python command which prompts the user to input text", "input": "", "output": "input_text = input(\"Enter some text: \")", "category": "Python"}, {"instruction": "Which sorting algorithm is the best for linked lists?", "input": "", "output": "The best sorting algorithm for linked lists is Merge Sort. Merge Sort is more efficient than other sorting algorithms such as Quicksort or Insertion Sort because it does not require extra space. Furthermore, it is an in-place sorting algorithm, which means that resources are used to sort the linked list without the need to use extra space.", "category": "Python"}, {"instruction": "Answer the following question: What Python library is used for web scraping?", "input": "", "output": "The Python library used for web scraping is called 'BeautifulSoup'.", "category": "Python"}, {"instruction": "Write a python command which prints the text \u201cHello World\u201d if a given number is even.", "input": "number = 10", "output": "if number % 2 == 0:\n    print(\"Hello World\")", "category": "Python"}, {"instruction": "Write a short python script to determine whether a given number is divisible by 5.", "input": "", "output": "def is_divisible_by_5(number):\n    \"\"\"Check whether a given number is divisible by 5 or not.\"\"\"\n    if number % 5 == 0:\n        return True\n    return False", "category": "Python"}, {"instruction": "Suggest an algorithm to search for a matching string in a large text", "input": "Text: \u201cThis is a long piece of text with a searching string\u201d\nSearching string: \u201csearching string\u201d", "output": "The most efficient algorithm for this task would be the KMP (Knuth-Morris-Pratt) algorithm. This is an efficient string matching algorithm that is used to match a pattern string in a given text string. The KMP algorithm is more efficient than traditional string matching algorithms as it pre-processes the pattern string to generate a lps (longest proper prefix which is also a suffix) array, which is then used to compare characters in the text string with characters in the pattern string.", "category": "Python"}, {"instruction": "Create a Bash script that runs a Python code", "input": "Python code:\n\ndef hello_world():\n    print(\"Hello World!\")", "output": "#!/bin/bash\n \npython << END\ndef hello_world():\n    print(\"Hello World!\")\nhello_world()\nEND", "category": "Python"}, {"instruction": "Generate a programming workflow for analyzing a large text dataset.", "input": "Dataset size: 1 million words", "output": "1. Pre-process the input text dataset to remove punctuation and special characters. \n2. Split the dataset into equal chunks for easier parallel processing \n3. Use a language model such as BERT or GPT-2 to tokenize the chunks \n4. Use embeddings to represent words in the dataset \n5. Perform descriptive analytics such as identifying highest frequency words, collocations, etc. \n6. Perform prediction tasks such as sentiment analysis, parts-of-speech analysis, topic modeling, etc. \n7. Pattern recognition tasks such as document classification and clustering. \n8. Generate visualizations such as word clouds, topic maps, etc.", "category": "Python"}, {"instruction": "Construct a python list comprehension", "input": "List of numbers from 2 to 8", "output": "list_nums = [x for x in range(2, 9)]", "category": "Python"}, {"instruction": "Write an algorithm for computing the sum of all digits between 1 to N.", "input": "", "output": "def sum_digits(n):\n    sum = 0\n    for i in range(1, n+1):\n        digits = list(str(i))\n        for digit in digits:\n            sum += int(digit)\n    return sum", "category": "Python"}, {"instruction": "Create a matrix of size 3 x 3 in Python.", "input": "", "output": "# 3x3 matrix \nmatrix3x3 = [[10, 20, 30],  \n             [15, 25, 35],  \n             [27, 29, 37]]", "category": "Python"}, {"instruction": "Count the number of quadruples that sum up to zero", "input": "arr = [-2, -1, 0, 1, 2]", "output": "def countQuadruplesSumZero(arr):\n    \"\"\"\n    This function returns the number of quadruples that sum up to zero.\n    \"\"\"\n    quad = 0\n           \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                for l in range(k+1, len(arr)):\n                    if arr[i] + arr[j] + arr[k] + arr[l] == 0:\n                        quad += 1\n                            \n    return quad", "category": "Python"}, {"instruction": "Print the longest palindrome from the given string", "input": "s = \"abbaba\"", "output": "def longestPalindrome(s):\n    \"\"\"\n    This function prints the longest palindrome from the given string.\n    \"\"\"\n    longest_str = \"\"\n    n = len(s) \n  \n    for i in range(n): \n        # check for odd conditions\n        middle = s[i] \n        left = i-1\n        right = i+1\n        while (left >= 0 and right < n and s[left] == s[right]): \n            middle = s[left] + middle + s[right] \n            left -= 1\n            right += 1\n  \n        longest_str = middle if len(middle) > len(longest_str) else longest_str\n        # check for even conditions\n        middle = ''\n        left = i \n        right = i+1\n        while (left >= 0 and right < n and s[left] == s[right]): \n            middle = s[left] + middle + s[right] \n            left -= 1\n            right += 1\n  \n        longest_str = middle if len(middle) > len(longest_str) else longest_str\n  \n    return longest_str", "category": "Python"}, {"instruction": "Given an array of positive numbers, write a function to return the maximum number of adjacent numbers with the same sign.", "input": "arr = [5, 2, 3, -2, 4, -5, 2, 3]", "output": "def maxAdjSameSign(arr): \n    \"\"\"\n    This function returns the maximum number of adjacent numbers with the same sign.\n    \"\"\"\n    max_count = 0\n    count = 1\n  \n    for i in range(0, len(arr)-1):\n        # If current element and the next element\n        # have the same sign \n        if (arr[i] > 0 and arr[i+1] > 0) or (arr[i] < 0 and arr[i+1] < 0):\n            count += 1\n        else: \n            max_count = max(max_count, count) \n  \n        # Reset count to 1\n        count = 1\n  \n    return max(max_count, count)", "category": "Python"}, {"instruction": "Change the function to eliminate passing by reference", "input": "def f(arr):\n    arr.remove(arr[0])", "output": "def f(arr):\n    arr_copy = arr[::]\n    arr_copy.remove(arr_copy[0])\n    return arr_copy", "category": "Python"}, {"instruction": "Write a code snippet to loop over the characters in a string and add them to an array in Python.", "input": "", "output": "def loop_over_string(s):\n    arr = []\n    for c in s:\n        arr.append(c)\n    return arr", "category": "Python"}, {"instruction": "Using python, create two variables that are equal to each other.", "input": "", "output": "x = 5\ny = 5", "category": "Python"}, {"instruction": "Write a Python code to initialize a 10 x 10 matrix with random values.", "input": "", "output": "import random\n\ndef init_matrix():\n    matrix = [[0 for _ in range(10)] for _ in range(10)]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            matrix[i][j] = random.randint(0,100)\n    return matrix", "category": "Python"}, {"instruction": "Write a function to calculate all the possible paths for a N x N matrix.", "input": "", "output": "def calculate_paths(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n  \n    dp = [[0 for _ in range(cols)] for _ in range(rows)] \n  \n    dp[0][0] = 1\n  \n    for i in range(rows):\n        for j in range(cols): \n            if i-1 >= 0: \n                dp[i][j] = dp[i][j] + dp[i-1][j]\n            if j-1 >= 0:\n                dp[i][j] = dp[i][j] + dp [i][j-1]\n  \n    return dp[rows-1][cols-1]", "category": "Python"}, {"instruction": "Compute the square root of a number without using the square root function.", "input": "number = 4", "output": "def sqrt(number):\n    x = number\n    y = 1\n    epsilon = 0.000001\n    while x-y > epsilon:\n        x = (x + y)/2\n        y = number/x\n    return x\n\nsqrt(number) # returns 2.0", "category": "Python"}, {"instruction": "Develop an algorithm to delete a given node from a linked list.", "input": "Node 3 in the list {1->2->3->4->5}", "output": "def deleteNode(head, node): \n  \n    # If head node itself holds the data to be deleted \n    if (head == node): \n        head = node.next\n  \n    # Find the previous node \n    prev = None\n    curr = head \n    while (curr.data != node.data): \n        prev = curr \n        curr = curr.next\n  \n    # Unlink the node from linked list \n    prev.next = curr.next", "category": "Python"}, {"instruction": "Create a function to check if a given triangle is an equilateral triangle.", "input": "a = 5, b = 5, c = 5", "output": "def isEquilateral(a, b, c):\n    if (a == b == c): \n        return True\n    else: \n        return False\n  \nisEquilateral(a, b, c) # returns True", "category": "Python"}, {"instruction": "How can you check if a given key exists in a dictionary?", "input": "", "output": "You can check if a given key exists in a dictionary using the `in` keyword. For example:\n\nmy_dict = {\n    'name': 'John',\n    'age': 20\n}\nif 'name' in my_dict:\n    print('Key found')", "category": "Python"}, {"instruction": "Define the term \"polymorphism\" in programming.", "input": "", "output": "Polymorphism is a feature in object-oriented programming that allows objects to behave differently depending on the context. It is used to reduce the amount of code needed for different operations and to increase the code's maintainability. Polymorphism allows objects to be defined from a common class in which each instance can be used in a different way based on its particular context. This enables a code to work in multiple forms depending on the data input. It simplifies the coding process by allowing for a single interface to access multiple objects at the same time.", "category": "Python"}, {"instruction": "Write Python code to fill missing values in a Pandas dataframe with a given value.", "input": "import pandas as pd\n\ndf = pd.DataFrame([\n    [8, 'B', 'G'],\n    [28, 'B', np.nan],\n    [22, np.nan, 'G'],\n    [2, 'A', np.nan] \n])", "output": "import pandas as pd\n\ndf = pd.DataFrame([\n    [8, 'B', 'G'],\n    [28, 'B', np.nan],\n    [22, np.nan, 'G'],\n    [2, 'A', np.nan] \n])\n\ndf.fillna(value='NA', inplace=True)", "category": "Python"}, {"instruction": "Design a program to select the names of the students who have secured more than 80% marks in a given exam.", "input": "students = [(\"John\", 75), (\"Mary\", 90), (\"Simon\", 80), (\"Rose\", 80)]", "output": "def get_high_scorers(students):\n    # Get the names of students with marks greater than 80\n    high_scorers = []\n    for student in students:\n        if student[1] > 80:\n            high_scorers.append(student[0])\n    return high_scorers\n\nstudents = [(\"John\", 75), (\"Mary\", 90), (\"Simon\", 80), (\"Rose\", 80)]\nprint(get_high_scorers(students)) # Output will be [\"Mary\"]", "category": "Python"}, {"instruction": "Explain a Python program to check whether a number is Armstrong or not.", "input": "", "output": "def is_armstrong(num):\n    digits = [int(d) for d in str(num)]\n    num_digits = len(digits)\n    armstrong_sum = 0\n    for digit in digits:\n        armstrong_sum += digit ** num_digits\n    return num == armstrong_sum\n\n#Test code\nnum = 153\nprint(is_armstrong(num)) # Output will be True", "category": "Python"}, {"instruction": "Create a class definition in Python for a vehicle with attributes like make, model, year.", "input": "", "output": "class Vehicle:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n \n    # Other methods...", "category": "Python"}, {"instruction": "Create a function that returns true if a given set is a subset of another set.", "input": "set1 = {1,2,3}\nset2 = {1,2,3,4,5,6}", "output": "def is_subset(s1, s2):\n    for e in s1:\n        if e not in s2:\n            return False\n    return True\n\nis_subset({1,2,3}, {1,2,3,4,5,6}) # Output: True", "category": "Python"}, {"instruction": "Find the sum of factors of a given number.", "input": "", "output": "def sum_factors(n):\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    return total\n\nsum_factors(12) # Output: 28", "category": "Python"}, {"instruction": "Generate a numpy array of shape (3,3) with random values between 0 and 10.", "input": "", "output": "import numpy as np\n\narray = np.random.randint(0, 10, size=(3, 3))\nprint(array)\n\n# Output: \n[[5 4 9]\n [6 8 5]\n [4 7 6]]", "category": "Python"}, {"instruction": "Using the Pandas library, parse the given json object.", "input": "{\n   \"name\": \"James\",\n   \"age\": \"60\",\n   \"address\":{\n      \"street\": \"123 Fake Street\",\n      \"city\": \"Springfield\",\n      \"state\": \"MA\"\n }\n}", "output": "import pandas as pd\n\ndata = {\n    'name': [\"James\"],\n    'age': [60],\n    'street': [\"123 Fake Street\"],\n    'city': [\"Springfield\"],\n    'state': [\"MA\"],\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n\n# Output: \n  name  age         street       city state\n0 James   60  123 Fake Street  Springfield    MA", "category": "Python"}, {"instruction": "Create a machine learning model that predicts whether an email is spam or not.", "input": "", "output": "import scikit-learn as sklearn\n\n# Load the data\nX = dataset[['email_body', 'send_from', 'subject', 'num_links']]\ny = dataset['is_spam']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0, stratify=y)\n\n# Train the model\nclassifier = sklearn.linear_model.LogisticRegression()\nclassifier.fit(X_train, y_train)\n\n# Test the model\ny_predicted = classifier.predict(X_test)\n\n# Check the accuracy\naccuracy = sklearn.metrics.accuracy_score(y_test, y_predicted) \nprint(\"Accuracy score: {:.2f}\".format(accuracy)) # Output: Accuracy score: 0.95", "category": "Python"}, {"instruction": "Create a text classifier using supervised learning.", "input": "", "output": "import scikit-learn as sklearn\n\n# Load the data\nX_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# Train the classifier\nclassifier = sklearn.naive_bayes.MultinomialNB()\nclassifier.fit(X_train, y_train)\n\n# Test the classifier\ny_predicted = classifier.predict(X_test)\n\n# Check the accuracy\naccuracy = sklearn.metrics.accuracy_score(y_test, y_predicted) \nprint(\"Accuracy score: {:.2f}\".format(accuracy)) # Output: Accuracy score: 0.89", "category": "Python"}, {"instruction": "Write a function to output the maximum value possible from a given array.", "input": "[-1, 2, 4, 6, -3, 5]", "output": "def max_val(arr):\n    maximum = arr[0]\n    for i in arr:\n        if i > maximum:\n            maximum = i\n    return maximum\n\nmax_val([-1, 2, 4, 6, -3, 5])  # Output: 6", "category": "Python"}, {"instruction": "Output a string which is the reverse of the input string.", "input": "\"Hello World\"", "output": "\"\"\"\nFunction to reverse a given string \n\nInput: String\nOutput: Reversed string\n\"\"\"\n\ndef reverse_string(string): \n    # Create an empty string to store the reversed string \n    reversed_string = \"\"\n\n    # Iterate over the string from the last character \n    for i in range(len(string)-1, -1, -1): \n        reversed_string += string[i] \n  \n    return reversed_string\n\n\nif __name__ == '__main__': \n    # Input \n    string = \"Hello World\"\n  \n    # Result \n    print(reverse_string(string))", "category": "Python"}, {"instruction": "Write a Python program that reads a list of words and prints the most frequently used one.", "input": "['apple', 'banana', 'orange', 'apple']", "output": "\"\"\"\nProgram to read a list of words and print the most frequently used one\n\nInput: List of words\nOutput: Most frequently used word\n\"\"\"\n\ndef most_freq_word(words): \n    # Create an empty dictionary \n    freq = {} \n  \n    # Iterate over the list of words \n    for word in words: \n        # Check if word is already present in the freq dictionary \n        if (word in freq): \n            #Increment the count of word \n            freq[word] += 1\n        else: \n            # Add it to the dictionary with a count of one \n            freq[word] = 1\n  \n    # Get the count of most frequent word \n    max_count = max(freq.values()) \n  \n    # Loop over words and return the most frequent one \n    for key, value in freq.items(): \n        if value == max_count: \n            return key \n\n\nif __name__ == '__main__': \n    # Input\n    words = ['apple', 'banana', 'orange', 'apple']\n\n    # Result\n    print(most_freq_word(words))", "category": "Python"}, {"instruction": "Given a list of numbers, implement a quick sort algorithm.", "input": "[7, 4, 5, 9, 1]", "output": "def quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n \n    pivot = arr[0]\n    less = [i for i in arr[1:] if i <= pivot]\n    greater = [i for i in arr[1:] if i > pivot]\n \n    return quick_sort(less) + [pivot] + quick_sort(greater)\n\nif __name__ == '__main__':\n    arr = [7, 4, 5, 9, 1]\n    print(quick_sort(arr)) # Output:[1, 4, 5, 7, 9]", "category": "Python"}, {"instruction": "Design a data structure to model the evolution of a population.", "input": "", "output": "\"\"\"\nModel the evolution of a population\n\"\"\"\n\nclass Population:\n    def __init__(self):\n        self.population = []\n        self.generation = 0\n\n    def add_member(self, member):\n        self.population.append(member)\n\n    def next_generation(self):\n        self.generation += 1\n        self.population = self.population.create_next_generation()\n\nclass Member:\n    def __init__(self, data):\n        self.data = data\n\n\n    def create_next_generation(self):\n        next_gen_data = []\n        # perform population evolution algorithm\n        # ...\n        return [Member(g) for g in next_gen_data]", "category": "Python"}, {"instruction": "Convert the following data into Excel Format.", "input": "[\n    {'name': 'John', 'age': 20},\n    {'name': 'Paul', 'age': 22},\n    {'name': 'Ringo', 'age': 19}\n]", "output": "\"\"\"\nConvert data into Excel format\n\"\"\"\n\nimport csv\n\ndef to_excel(data):\n    with open('data.csv', 'w', newline='') as csvfile:\n        fieldnames = ['name', 'age']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n\n        writer.writeheader()\n        for row in data:\n            writer.writerow(row)\n\nif __name__ == '__main__':\n    data = [\n        {'name': 'John', 'age': 20},\n        {'name': 'Paul', 'age': 22},\n        {'name': 'Ringo', 'age': 19}\n    ]\n\n    to_excel(data)", "category": "Python"}, {"instruction": "Reverse this array in-place using Python.", "input": "arr = [4, 2, 8, 6]", "output": "arr.reverse() # arr is now [6, 8, 2, 4]", "category": "Python"}, {"instruction": "Write a function in Python to split a given string into the words in the string.", "input": "", "output": "def split_string(string):\n    return string.split()", "category": "Python"}, {"instruction": "Write a function in Python that takes a list of integers as an argument and calculates the mean average.", "input": "", "output": "def calculate_mean(numbers):\n    total_sum = 0; \n    for num in numbers:\n        total_sum += num\n    \n    mean_average = total_sum / len(numbers)\n    return mean_average", "category": "Python"}, {"instruction": "Generate a random hex color in Python.", "input": "", "output": "import random \n  \ndef random_hex_colour_code(): \n    return '#' + ''.join([random.choice('0123456789ABCDEF') for x in range(6)]) \n  \nprint (\"Random Hex Color Code:\", random_hex_colour_code())", "category": "Python"}, {"instruction": "Make a list of numbers from 0 to 20 that are divisible by 3.", "input": "", "output": "numbers = [x for x in range(21) if x % 3 == 0]", "category": "Python"}, {"instruction": "Compare two objects and return 0 if they are equal, -1 if the first is less than the second, and 1 if the first is greater than the second.", "input": "object1 = 7\nobject2 = 8", "output": "def compare(object1, object2):\n    if object1 == object2:\n        return 0\n    elif object1 < object2:\n        return -1\n    else:\n        return 1", "category": "Python"}, {"instruction": "Is the following code valid Python?", "input": "if bool == true:\n    print(\"True\")", "output": "False", "category": "Python"}, {"instruction": "Write code to convert a given string to all uppercase letters in Python.", "input": "", "output": "string_org = \"convert this to uppercase\"\nstring_uppercase = string_org.upper() \nprint(string_uppercase) \n# OUTPUT: CONVERT THIS TO UPPERCASE", "category": "Python"}, {"instruction": "Create a function that takes in an integer and returns true if the number is prime or false if the number is not prime.", "input": "", "output": "def is_prime(num):\n    for n in range(2, num):\n        if(num % n == 0):\n            return False\n    else:\n        return True", "category": "Python"}, {"instruction": "Rewrite the following code to use loop instead of recursion.", "input": "def longest_substring(input_string):\n    if len(input_string) <= 1:\n        return input_string\n    else:\n        first_letter = input_string[0]\n        rest_substring = input_string[1:]\n        sub_string = longest_substring(rest_substring)\n        if first_letter in sub_string:\n            return sub_string\n        else:\n            return first_letter + sub_string", "output": "def longest_substring(input_string):\n    longest_substring = \"\"\n    for i in range(len(input_string)):\n        current_substring = \"\"\n        for j in range(i, len(input_string)):\n            if input_string[j] not in current_substring:\n                current_substring += input_string[j]\n            else:\n                break\n        if len(current_substring) > len(longest_substring):\n            longest_substring = current_substring\n    return longest_substring", "category": "Python"}, {"instruction": "Use the requests library to make an API call and return the response as JSON", "input": "url = http://example.com", "output": "import requests\n\nurl = 'http://example.com'\nresponse = requests.get(url)\ndata = response.json()", "category": "Python"}, {"instruction": "Using the requests library, post a JSON object to a specified URL.", "input": "URL: http://example.com\nJSON object: {\"Name\": \"John\", \"Gender\": \"Male\", \"Age\": 10}", "output": "import requests\n\nurl = 'http://example.com'\ndata = {\"Name\": \"John\", \"Gender\": \"Male\", \"Age\": 10}\n\nrequests.post(url, data=data)", "category": "Python"}, {"instruction": "Using Pandas, count how many rows have a value of \"United States\" in the \"Country\" column.", "input": "Data: \n\nCountry\tState\nUnited States\tNew York\nCanada\tOntario\nUnited Kingdom\tLondon\nUnited States\tCalifornia", "output": "import pandas as pd\n\ndf = pd.DataFrame({'Country':['United States', 'Canada', 'United Kingdom', 'United States'],\n                   'State':['New York', 'Ontario', 'London', 'California']})\n\ncount = df[df['Country'] == 'United States'].shape[0]\nprint(count)\n# Output: 2", "category": "Python"}, {"instruction": "Create a function to format a given phone number \u201c(123) 456-7890\u201d and output a string with canonical format of \u201c+11234567890\u201d.", "input": "Phone number: (123) 456-7890", "output": "def format_phone_number(number):\n    parts = number.split('-')\n    digits = []\n    for part in parts:\n        for char in part:\n            if char.isdigit():\n                digits.append(char)\n    return '+1' + ''.join(digits)\n\nif __name__ == '__main__':\n    number = '(123) 456-7890'\n    canon_number = format_phone_number(number)\n    print(canon_number)", "category": "Python"}, {"instruction": "Create the following function that parses a valid IP address from a string and returns the address string without delimiters and periods.", "input": "String = \u2018192.168.137.8\u2019", "output": "def parse_ip_address(ip_string):\n    ip_list = ip_string.split(\".\")\n    ip_str = \"\".join(ip_list)\n    return ip_str\n\nif __name__ == '__main__':\n    ip_str = parse_ip_address(\"192.168.137.8\")\n    print(ip_str)", "category": "Python"}, {"instruction": "Write a MIPS code that adds two numbers and stores the result in a given memory address.", "input": "num1 = 10\nnum2 = 15\nmemory address = $t0", "output": "addi $t1, $zero, 10 #store num1 in $t1\naddi $t2, $zero, 15 #store num2 in $t2\n\nadd $t0, $t1, $t2 #add num1 and num2 and store result in $t0\nsw $t0, ($memory address) #store result in specified memory address", "category": "Python"}, {"instruction": "Write a function in Python that takes two numbers and swaps the values of the two numbers.", "input": "", "output": "def swap(x, y): \n    temp = x \n    x = y \n    y = temp \n  \nx = 10\ny = 5\n\nswap(x, y) \n\nprint(\"x =\", x, \"y =\", y)\n\n# Output: x = 5 y = 10", "category": "Python"}, {"instruction": "Implement an algorithm with the input that calculates the greatest common factor of two numbers.", "input": "8, 32", "output": "def greatestCommonFactor(num1, num2):\n    while num2 != 0:\n        temp = num2\n        num2 = num1 % num2\n        num1 = temp\n \n    return num1\n \ngcf = greatestCommonFactor(8, 32) \nprint(gcf) \n \n# Output: 8", "category": "Python"}, {"instruction": "Generate a code to create a Pyramid of stars with the given height.", "input": "", "output": "def print_pyramid(height):\n    for row in range(1, height + 1):\n        for col in range(1, row + 1):\n            print('*', end=\" \")\n        print('\\n')", "category": "Python"}, {"instruction": "Construct a code to detect if a character is an uppercase letter or not.", "input": "", "output": "def is_uppercase(char): \n   if (char >= 'A' and char <= 'Z'): \n     return True\n   else: \n     return False", "category": "Python"}, {"instruction": "Create a method to build a dictionary that contains all even numbers from the given list.", "input": "[2, 3, 7, 8, 10, 11]", "output": "def build_even_dict(numbers): \n even_dict = {key: value for key, value in enumerate(numbers) if value % 2 == 0} \n return even_dict", "category": "Python"}, {"instruction": "Rewrite this program to use an embedded loop instead of recursion:\n\ndef fibonacci(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return fibonacci(num-1) + fibonacci(num-2)", "input": "", "output": "def fibonacci(num):\n    first = 0\n    second = 1\n    for i in range(num):\n        temp = first\n        first = second\n        second = temp + second\n    return first", "category": "Python"}, {"instruction": "Write a code to compute the XOR of two bits", "input": "A = 1; B = 0;", "output": "def xor(A, B):\n    if (A == B): \n        return 0  \n    else: \n        return 1", "category": "Python"}, {"instruction": "Create a function to perform insertion sorting", "input": "list = [5, 3, 8, 7, 1]", "output": "def insertion_sort(list):\n    for i in range(1, len(list)):\n        key = list[i]\n        j = i -1\n        while j >=0 and list[j] > key:\n            list[j+1] = list[j]\n            j -= 1\n        list[j+1] = key\n    return list", "category": "Python"}, {"instruction": "Create a Python dictionary to store employee details.", "input": "Name: John Doe\nAge: 25\nRole: Sales Manager", "output": "employee = {\n 'name': 'John Doe',\n 'age': 25,\n 'role': 'Sales Manager',\n}", "category": "Python"}, {"instruction": "Develop a function to calculate the total amount of the order for an online store.", "input": "ProductA: 15\nProductB: 10\nPriceForProductA: 5\nPriceForProductB: 10", "output": "def calculate_total_amount(products, prices):\n total_amount = 0 \n for i in range(len(products)):\n total_amount = total_amount + (products[i] * prices[i])\n return total_amount", "category": "Python"}, {"instruction": "Write a code to send a message \"Hello World!\" using the Twilio API.", "input": "", "output": "from twilio.rest import Client\n\n# Your Account SID from twilio.com/console\naccount_sid = \"XXXXXXXXXXXXXXXXXXXXXXX\"\n# Your Auth Token from twilio.com/console\nauth_token  = \"XXXXXXXXXXXXXXXXXXXXXXX\"\n\nclient = Client(account_sid, auth_token)\n\nmessage = client.messages.create(\n    to=\"+123456789\", \n    from_=\"+0987654321\",\n    body=\"Hello World!\")\n\nprint(message.sid)   # Output the message id", "category": "Python"}, {"instruction": "Create a matrix of zeros with shape 4x3 using the NumPy library.", "input": "", "output": "import numpy as np\n\nmatrix = np.zeros((4,3))\nprint(matrix)   # Output the matrix of zeros", "category": "Python"}, {"instruction": "Create a web page with the headline \"Welcome to Python programming\".", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Welcome to Python Programming</title>\n</head>\n<body>\n    <h1>Welcome to Python Programming</h1>\n</body>\n</html>", "category": "Python"}, {"instruction": "Design an algorithm that prints all the permutations of a given string.", "input": "", "output": "def generate_permutations(string):\n    if len(string) == 1:\n        return [string]\n \n    all_perms = []\n    for i, c in enumerate(string):\n        other_chars = string[:i] + string[i+1:]\n        other_perms = generate_permutations(other_chars)\n        for perm in other_perms:\n            all_perms.append(c + perm)\n    return all_perms", "category": "Python"}, {"instruction": "Write a code snippet that prints out the number of times each character appears in a given string.", "input": "Given string = \"welcome\"", "output": "def char_frequency(string):\n    freq = {}\n    for c in string:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    for c, count in freq.items():\n        print('{0} : {1}'.format(c, count))", "category": "Python"}, {"instruction": "Convert a given array of numbers into a square matrix.", "input": "Given array = [1, 2, 3, 4]", "output": "def arrayToMatrix(array):\n    n = int(len(array)**0.5)\n    matrix = []\n \n    for i in range(n):\n        matrix.append(array[i*n:(i+1)*n])\n \n    return matrix", "category": "Python"}, {"instruction": "Write a function to implement the sequential search algorithm", "input": "arr = [8, 2, 5, 6, 9]", "output": "def sequential_search(arr, x): \n    for i in range(len(arr)): \n        if arr[i] == x: \n            return i\n    return -1", "category": "Python"}, {"instruction": "Make an array containing all elements of the given list that are even.", "input": "[43,55,12,23,44]", "output": "even_array = [i for i in [43, 55, 12, 23, 44] if i % 2 == 0]", "category": "Python"}, {"instruction": "Make a function in Python which calculates the covariance between two given lists.", "input": "list1: [1, 2, 3, 4, 5]\nlist2: [3, 4, 2, 4, 5]", "output": "def cov(list1, list2): \n    mean1 = sum(list1)/len(list1) \n    mean2 = sum(list2)/len(list2) \n    total = 0\n\tfor i in range(len(list1)): \n        total += (list1[i] - mean1)*(list2[i] - mean2) \n    return total/len(list1)", "category": "Python"}, {"instruction": "Here's some Python code that finds the smallest number in a list. Edit it\nto find the greatest number in a list.", "input": "# list of numbers\nlist = [20, 10, 4, 45, 99]\n\n# printing the smallest number\nprint(min(list))", "output": "# list of numbers\nlist = [20, 10, 4, 45, 99]\n\n# printing the greatest number\nprint(max(list))", "category": "Python"}, {"instruction": "Update the following code snippet to ensure that the values in the dictionary are unique.", "input": "mydict = {\"a\":1, \"b\":2, \"c\":3, \"d\":4, \"e\":5}", "output": "mydict = {}\nfor key, value in mydict.items():\n    if value not in mydict.values():\n        mydict[key]=value", "category": "Python"}, {"instruction": "Write a function to filter a list of strings based on a search term", "input": "", "output": "def filter_by_search_term(strings, search_term):\n    return [string for string in strings if search_term in string]", "category": "Python"}, {"instruction": "Write a code that generates a random password of 8 characters including numerical and alphabetic characters.", "input": "", "output": "import string\nimport random\n\ndef generate_password():\n    alpha_list = list(string.ascii_letters) + list(string.digits)\n    return ''.join([random.choice(alpha_list) for _ in range(8)])\n\nrandom_password = generate_password()\nprint(random_password)\n// Output: 4U4K5U6L", "category": "Python"}, {"instruction": "Given an array of integers, write a method to return the indices of the two numbers such that they add up to a specific target.", "input": "nums = [2, 5, 11, 15], target = 9", "output": "def twoSum(nums, target): \n    result = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i]+nums[j] == target:\n                result.append(i)\n                result.append(j)\n    return result\n\nindices = twoSum(nums, 9)\nprint(indices)\n// Output: [0, 2]", "category": "Python"}, {"instruction": "You are given a list of float numbers. Write a code to sort them in ascending order.", "input": "arr = [2.5, 3.2, 2.1, 4.6, 1.6]", "output": "def bubbleSort(arr): \n    n = len(arr)\n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n    return arr\n\nsorted_arr = bubbleSort(arr) \nprint(sorted_arr)\n// Output: [1.6, 2.1, 2.5, 3.2, 4.6]", "category": "Python"}, {"instruction": "Write a function in Python that returns the greatest common divisor (GCD) of two numbers.", "input": "n1 = 18, n2 = 15", "output": "def greatest_common_divisor(n1, n2): \n    while n2 > 0: \n        n1, n2 = n2, n1 % n2 \n    return n1 \n\nresult = greatest_common_divisor(18, 15)\nprint(result)\n// Output: 3", "category": "Python"}, {"instruction": "Write a code that takes a list of integers and output the frequencies of odd and even numbers within the list.", "input": "list_of_ints = [7, 21, 22, 23, 24, 25]", "output": "def find_odd_even_frequencies(list_of_ints):\n    \n    count_odd = 0 \n    count_even = 0\n    \n    for num in list_of_ints:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n            \n    return {\"odd\": count_odd, \"even\": count_even}\n\nresult = find_odd_even_frequencies(list_of_ints)\nprint(result)\n// Output: {'odd': 3, 'even': 3}", "category": "Python"}, {"instruction": "Develop a function in Python that takes two arguments, a base number and an exponent number, and prints out the result of the power operation.", "input": "Base = 5\nExponent = 3", "output": "\"\"\"\nDevelop a function in Python that takes two arguments, a base number and an exponent number, and prints out the result of the power operation.\n\"\"\"\ndef power(base, exponent):\n    result = base**exponent;\n    return result;\n\nbase = 5\nexponent = 3\nprint(power(base, exponent))", "category": "Python"}, {"instruction": "Write a script in Python that takes a list of strings and prints out the first letter of each string in uppercase.", "input": "A = [\"apple\", \"banana\", \"grapes\"]", "output": "\"\"\"\nWrite a script in Python that takes a list of strings and prints out the first letter of each string in uppercase\n\"\"\"\n# create the function\ndef uppercase_first_letters(list_of_strings):\n    for string in list_of_strings:\n        print(string[0].upper())\n\n# call the function with the list\nA = [\"apple\", \"banana\", \"grapes\"]\nuppercase_first_letters(A)", "category": "Python"}, {"instruction": "Develop an algorithm in Python that detects any outliers in an array.", "input": "A = [1, 5, 2, 10, 8, 5, 9, 15]", "output": "\"\"\"\nDevelop an algorithm in Python that detects any outliers in an array\n\"\"\"\n#define function to detect outliers\ndef detect_outliers(data):\n  outliers = []\n  threshold = 3\n  \n  mean = sum(data)/len(data)\n  std = np.std(data)\n  \n  for i in data:\n    z_score = (i - mean)/std \n    if np.abs(z_score) > threshold:\n      outliers.append(i)\n  \n  return outliers\n\n#call the function to find outliers\nA = [1, 5, 2, 10, 8, 5, 9, 15]\nprint(\"outliers: \", detect_outliers(A))", "category": "Python"}, {"instruction": "Generate a best-fit line for data points {(2,4), (4,7), (6,8), (7,11)} in Python.", "input": "", "output": "\"\"\"\nGenerate a best fit line for data points in Python\n\"\"\"\nimport numpy as np\n\ndata = [(2,4), (4,7), (6,8), (7, 11)]\n\nx = np.array([x[0] for x in data])\ny = np.array([y[1] for y in data])\n\nm, c = np.polyfit(x, y, 1)\n\nprint(\"Best-fit line equation: y = {:.2f}x + {:.2f}\".format(m,c))", "category": "Python"}, {"instruction": "How could we access the third element of a list in Python?", "input": "", "output": "The third element of a list can be accessed using the index value 2, as Python indexing starts from 0. For example, if x is a list containing the elements [1, 2, 3], x[2] will return the third element of the list i.e. 3.", "category": "Python"}, {"instruction": "Suggest a better way to compare two strings in Python.", "input": "", "output": "Using Python's Standard Library function `difflib.SequenceMatcher` is a more efficient way to compare two strings. This function uses an algorithm to compute the longest common subsequence between the two strings which is then used to calculate the similarity score of the given strings.", "category": "Python"}, {"instruction": "Write a Python code to count the number of uppercase characters in the given string.", "input": "\"Hello World\"", "output": "string = \"Hello World\"\n\ncount = 0\nfor char in string:\n  if char.isupper():\n    count += 1\n\nprint(\"The number of uppercase characters are:\", count)", "category": "Python"}, {"instruction": "Write a code in Python to convert the following string to an integer.", "input": "\"12345\"", "output": "string = \"12345\"\n\nnumber = int(string)\n\nprint(number)", "category": "Python"}, {"instruction": "Return the maximum number from a given array of integers.", "input": "[6,4,7,1,3]", "output": "arr = [6,4,7,1,3]\n\n#Find max number\ndef find_max(arr):\n  max_num = arr[0]\n  for num in arr:\n    if num > max_num:\n      max_num = num\n  return max_num\n\nresult = find_max(arr)\nprint(\"The maximum number is:\", result)", "category": "Python"}, {"instruction": "Create a random password generator in Python that outputs 10 characters of random alphanumeric characters.", "input": "", "output": "import random\nimport string\n\ndef random_password_generator():\n  charsds = string.ascii_letters + string.digits\n  password = ''.join(random.choice(charsds) for i in range(10))\n  return password\n\nprint(random_password_generator())", "category": "Python"}, {"instruction": "Using Python, write a piece of code to convert Celsius temperatures to Fahrenheit.", "input": "Celsius: 20", "output": "Fahrenheit = 68", "category": "Python"}, {"instruction": "Generate a random array of size n in Python.", "input": "Size of array: 5", "output": "import numpy as np\n\nsize = 5\n\n# Create an array of size 5\narr = np.random.randint(100, size = (size))\nprint (arr)", "category": "Python"}, {"instruction": "Create a list of all numbers that are divisible by 5 between 0 and 25.", "input": "", "output": "list_divisible_by_5 = [x for x in range(0, 26) if x%5 == 0]", "category": "Python"}, {"instruction": "Create a dictionary using comprehension technique in Python.", "input": "original_dict = {'a':1, 'b':2, 'c':3, 'd':4}", "output": "new_dict = {key: value ** 2 for key, value in original_dict.items()}", "category": "Python"}, {"instruction": "So you need to design a class for a Linked List.", "input": "", "output": "class ListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        \n    def is_empty(self):\n        return self.head == None\n    \n    # Other method implementations go here", "category": "Python"}, {"instruction": "What data structure can be used to store words of the same length?", "input": "", "output": "A data structure that can be used to store words of the same length is a Trie. A Trie is a tree-based data structure which stores characters of strings as nodes in a tree. The advantage of using a Trie for storing words of the same length is that it is an efficient data structure for retrieving words quickly. Furthermore, its storage space is optimized as it uses only the required amount of memory for storing words, regardless of the length of the words.", "category": "Python"}, {"instruction": "Create an algorithm to find the longest substring of a given string with distinct characters.", "input": "Given string = \"abcabcabc\"", "output": "def find_longest_substring(string):\n    max_length = 0\n    for i in range(len(string)):\n        seen_chars = set()\n        length = 0\n        for j in range(i, len(string)):\n            if string[j] not in seen_chars:\n                seen_chars.add(string[j])\n                length += 1\n            else:\n                break\n        max_length = max(max_length, length)\n    return max_length", "category": "Python"}, {"instruction": "Create a function in Python to convert time from 12 hour to 24 hour format.", "input": "", "output": "def convert12to24(time12h):\n    # Check if last two elements of time is AM and first two are 12\n    if time12h[-2:] == \"AM\" and time12h[:2] == \"12\": \n        return \"00\" + time12h[2:-2] \n          \n    # If last two elements of time is AM\n    elif time12h[-2:] == \"AM\": \n        return time12h[:-2] \n      \n    # If last two elements of time is PM and first two are 12    \n    elif time12h[-2:] == \"PM\" and time12h[:2] == \"12\": \n        return time12h[:-2] \n          \n    else: \n          \n        # add 12 to hours and remove AM\n        return str(int(time12h[:2]) + 12) + time12h[2:8]", "category": "Python"}, {"instruction": "Design an algorithm to check for missing numbers in an array of size n.", "input": "", "output": "def find_missing(nums):\n    count = 1\n    for num in nums:\n        if not count in nums:\n            return count\n        count += 1\n    return None", "category": "Python"}, {"instruction": "Generate the following string from a list.", "input": "[1, 2, 3, 4]", "output": "def generate_string(lst):\n    s = \"\"\n    for i in lst:\n        s+=str(i)\n    return s\n\nlst = [1, 2, 3, 4]\ns = generate_string(lst)\nprint(s)", "category": "Python"}, {"instruction": "Write a function in Python that takes a string and splits it into a list of words.", "input": "\"Hello, World!\"", "output": "def split_string(text):\n  \"\"\"Split a given string into a list of words.\"\"\"\n  return text.split()", "category": "Python"}, {"instruction": "Write a function in Python that takes a sentence and removes all spaces.", "input": "\"Hello, World!\"", "output": "def remove_spaces(sentence):\n  \"\"\"Remove all spaces from a given sentence.\"\"\"\n  return sentence.replace(\" \", \"\")", "category": "Python"}, {"instruction": "Given a string of characters, write a function in Python that returns only the uppercase characters.", "input": "\"Hello, World!\"", "output": "def get_upper(string):\n  \"\"\"Return only uppercase characters from given string.\"\"\"\n  return ''.join([c for c in string if c.isupper()])", "category": "Python"}, {"instruction": "Explain the following Python statement.", "input": "sorted_list = sorted(input_list)", "output": "This statement uses the sorted() function to sort the elements in the list 'input_list' in ascending order. The elements in the list will be compared using their default ordering and then sorted accordingly. The sorted list is returned and stored in a new list called 'sorted_list'.", "category": "Python"}, {"instruction": "Given a pandas dataframe, identify the columns and rows of the table.", "input": "import pandas as pd \n\ndata = {'fruit': ['apple', 'banana', 'mango'], \n        'price': [2.99, 4.99, 5.99], \n        'quantity': [3, 5, 7]}\n\ndf = pd.DataFrame(data)", "output": "The columns of the table are: fruit, price, and quantity. \nThe rows of the table are: apple, banana, and mango.", "category": "Python"}, {"instruction": "Explain the difference between a parameter and an argument in Python.", "input": "", "output": "A parameter is a variable in a method definition. When a method is called, the arguments are the data you pass into the method's parameters. Parameters are specified after the method name, inside the parentheses. They are used to pass values to a method. An argument is the actual value of this variable that gets passed to the method. Arguments are the data you pass into the method's parameters when you call the method. Parameters are like empty vessels that are waiting to be filled as a result of calling the method. Arguments are like the values that are placed inside the vessels. In a nutshell, Parameters are variable in the declaration of function. Arguments are the actual values of these variables that get passed to function.", "category": "Python"}, {"instruction": "Write a code to add two numbers given as input.", "input": "a = 1\nb = 5", "output": "def add(a,b):\n    return a + b\n\nif __name__ == '__main__':\n    print(add(a,b))", "category": "Python"}, {"instruction": "Write a code to replace all the \"A\"s in the string with a \"#\".", "input": "sentence = \"Hello WAAorld\"", "output": "def replace_A(sentence):\n     return sentence.replace('A','#')\n\nif __name__ == '__main__':\n print(replace_A(sentence))", "category": "Python"}, {"instruction": "Convert the Python list below to a nested dictionary of countries and their populations.", "input": "List = [[\"United_Kingdom\", 66_000_000],[\"United_States\", 323_000_000]]", "output": "countries = {\n    \"United_Kingdom\": 66_000_000,\n    \"United_States\": 323_000_000\n}", "category": "Python"}, {"instruction": "Write a code to find the longest substring of given string with length greater than or equal to 2 without repeating letters.", "input": "string = \"abcdexyeffgghh\"", "output": "# Function to find the longest substring of given string with length greater than or equal to 2 without repeating letters\ndef find_longest_substring(string):\n    # Variable to store the starting index of the substring\n    start_index = 0\n    \n    # Hashset to store characters in string\n    visited = set()\n    \n    # Variables to store the length and the result substring\n    length = 0\n    result = \"\"\n    \n    # Iterate over the string\n    for i in range(len(string)):\n        # If the character is already in the hashset, then remove characters until this character from the hashset \n        if string[i] in visited:\n            visited.remove(string[start_index])\n            start_index += 1\n            \n        # Add the current character to the hashset\n        visited.add(string[i])\n        \n        # Update length and result if length is greater than before\n        if length < i - start_index + 1:\n            length = i - start_index + 1\n            result = string[start_index:i+1]\n        \n    # Return the result substring\n    return result\n\n# Test the function\nprint(find_longest_substring(string))", "category": "Python"}, {"instruction": "Write a function in Python that takes a 2D array and returns the product of all elements in it.", "input": "[[1, 2],[3, 4]]", "output": "def product_of_elements(arr):\n  \"\"\"Return product of all elements in a given 2D array.\"\"\"\n  product = 1\n  for row in arr:\n    for ele in row:\n      product *= ele\n  return product", "category": "Python"}, {"instruction": "Randomly rearrange the elements of the given array.", "input": "nums = [12, 23, 34, 45]", "output": "# Function to randomly rearrange the elements of the given array\nimport random \ndef shuffle_array(nums):\n    # Initialize a result array\n    result = nums.copy()\n    \n    # Iterate over the array\n    for i in range(len(nums)): \n        # Generate a random index between 0 and the current index\n        j = random.randrange(0, i + 1)\n        \n        # Swap elements at the current and random indices\n        result[i], result[j] = result[j], result[i] \n        \n    # Return the result array\n    return result\n\n# Test the function by printing the shuffled array\nprint(shuffle_array(nums))", "category": "Python"}, {"instruction": "Given a string, remove all consecutive duplicates in the string.", "input": "string = \"aabbccddeeff\"", "output": "# Function to remove all consecutive duplicates in the string\ndef remove_duplicates(string):\n    # Empty string to store the result\n    result = ''\n    \n    # Iterate over the string and keep track of the previous character seen\n    prev = ''\n    for char in string:\n        # If the current character is not the same as the previous, then add it to the result\n        if char != prev:\n            result += char\n        # Change the previous character seen to the current character\n        prev = char\n        \n    # Return the result string\n    return result\n\n# Test the function by printing the string without consecutive duplicates\nprint(remove_duplicates(string))", "category": "Python"}, {"instruction": "Create a function in Python to rearrange the characters of each word in a given string.", "input": "string = \"Welcome to the world of Python\"", "output": "def rearrangeWord(string): \n     temp_string = string.split(\" \") \n     rearranged_string = [word[::-1] for word in temp_string] \n     return \" \".join(rearranged_string) \nprint(rearrangeWord(string))", "category": "Python"}, {"instruction": "Construct a for-loop for finding all prime numbers between 1 and 50 in Python.", "input": "", "output": "for num in range(1, 51):\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)", "category": "Python"}, {"instruction": "Extract the common key words from the given two strings using a Python script.", "input": "String 1: This programming language is easy to learn\nString 2: Comparing to other languages, this language is simpler", "output": "common_key_words = [\"language\", \"easy\", \"learn\", \"comparing\", \"other\", \"simpler\"]", "category": "Python"}, {"instruction": "Define a function in Python to print a pattern of right-angled triangles of different sizes", "input": "", "output": "def rightangle_triangles_pattern(n): \n    pattern = \"\" \n    \n    \n    for i in range(1,n+1): \n        for j in range(1,i+1): \n            pattern = pattern + \" * \"\n        pattern = pattern + \"\\n\"\n  \n   \n    print(pattern) \n    \n    \nrightangle_triangles_pattern(5)", "category": "Python"}, {"instruction": "Create a Fibonacci sequence of 5 numbers using Python.", "input": "", "output": "fib_sequence = [0, 1, 1, 2, 3]", "category": "Python"}, {"instruction": "Construct a for-loop for calculating the factorial of a given number.", "input": "Number: 5", "output": "def factorial(x): \n    fact = 1\n\n    for i in range(1,x+1):\n        fact = fact*i\n        \n    return fact\n\nprint(factorial(5))", "category": "Python"}, {"instruction": "Design a data structure to store an undo history of size k.", "input": "", "output": "class HistoryDataStruct:\n    def __init__(self, k):\n        self.history_size = k\n        self.history = [] # list of (undo command, state of only that undo command) of size k\n        self.current_state = None # Current state of the data structure\n\n    def save_states(self, state):\n        self.history.append((state, self.current_state))\n\n        if len(self.history) > self.history_size:\n            self.history.pop(0)\n\n        self.current_state = state\n\n    def undo(self):\n        command, prev_state = self.history[-1]\n        self.history.pop(-1)\n        self.current_state = prev_state\n        return command", "category": "Python"}, {"instruction": "Create a program to print out all prime numbers below 100.", "input": "", "output": "# Function to print prime numbers \ndef prime_numbers_below_100(): \n    for num in range(2, 100): \n        prime = True\n        for i in range(2, num//2 + 1): \n            if num % i == 0: \n                prime = False\n                break\n        if prime: \n            print(num, end=\" \") \n  \nprint(\"Prime numbers below 100 are:\") \nprime_numbers_below_100()", "category": "Python"}, {"instruction": "You need to design a calculator class with methods to perform basic calculations (add, subtract, multiply, divide, etc.).", "input": "", "output": "class Calculator:\n    def __init__(self):\n        # initializing the calculator\n        pass\n\n    def add(self, a, b):\n        return a + b\n\n    def subtract(self, a, b):\n        return a - b\n\n    def multiply(self, a, b):\n        return a * b\n\n    def divide(self, a, b):\n        return a / b", "category": "Python"}, {"instruction": "Reverse the order of the given array without using inbuilt functions.", "input": "nums = [12, 23, 34, 45]", "output": "# Function to reverse the order of the given array \ndef reverse_array(nums):\n    # Variable to store the result \n    result = []\n    \n    # Iterate over the provided array starting from the last element\n    for i in range(len(nums) -1, -1, -1):\n        # Append each number to the result array\n        result.append(nums[i]) \n        \n    # Return the result array\n    return result\n\n# Test the function by printing the array in reverse order\nprint(reverse_array(nums))", "category": "Python"}, {"instruction": "Write a function in Python that takes two strings and returns a single string with the characters in alternating order.", "input": "\"Hello\", \"World!\"", "output": "def alternate_string(str1, str2):\n  \"\"\"Return a string with characters in alternating order from two given strings.\"\"\"\n  result = \"\"\n  for i in range(min(len(str1), len(str2))):\n      result += str1[i] + str2[i]\n  result += str1[i + 1:] + str2[i + 1:]\n  return result", "category": "Python"}, {"instruction": "Write a function in Python that takes an integer and returns a boolean value specifying whether the number is a prime number or not.", "input": "9", "output": "def is_prime(num):\n  \"\"\"Check if a number is a prime number.\"\"\"\n  if num <= 1:\n    return False\n  for i in range(2,num):\n    if num % i == 0:\n      return False\n  return True", "category": "Python"}, {"instruction": "Write a function in Python that takes a list of strings and checks whether the list is empty or not.", "input": "[\"Hello\", \"World\"]", "output": "def is_list_empty(list_str):\n  \"\"\"Check if a list is empty or not.\"\"\"\n  return len(list_str) == 0", "category": "Python"}, {"instruction": "How can a string be encoded in base64?", "input": "", "output": "A string can be encoded in base64 by using the string's bytes as input to the base64 encoding algorithm. The base64 encoding algorithm works by taking 3 bytes of input data and converting them into 4 bytes of output data. Each of these 4 bytes represent 6 bits of the original string, which is represented by 4 characters in the base64 string.", "category": "Python"}, {"instruction": "Explain how Python List Comprehensions work?", "input": "", "output": "Python List Comprehensions allow users to quickly build a list from another list or an iterable. List Comprehensions use a syntax that consists of an expression followed by a \u2018for\u2019 statement and then zero or more \u2018for\u2019 or \u2018if\u2019 clauses. The expression is evaluated once for each item in the list. List Comprehensions can be used to perform filtering and mapping operations over the lists, or any other iterable. The output is a new list that can be formed from items in the original list, or any of its combinations.", "category": "Python"}, {"instruction": "Describe how the for loop works in Python?", "input": "", "output": "A for loop in Python is a type of looping construct that is used to iterate over a sequence of objects including strings, lists, tuples, dictionaries, and sets. A for loop has three components, the iterator (variable), sequence, and statements. With each iteration, the iterator is assigned the value of the next element in the sequence and the statements are executed. When all the elements in the sequence have been exhausted, the loop terminates.", "category": "Python"}, {"instruction": "Convert the following English sentence into a Python function definition: \"Prints a string on the screen\".", "input": "", "output": "def printString(string):\n  print(string)", "category": "Python"}]
[{"instruction": "Complete the function to correctly check if a number is even.", "input": "def is_even(number):\n    '''This function should return true if the number is even and false if the number is odd.'''\n    # TODO", "output": "def is_even(number):\n    '''This function should return true if the number is even and false if the number is odd.'''\n    return (number % 2) == 0", "category": "Python"}, {"instruction": "Create a basic API that queries a database and returns a result in a certain format", "input": "", "output": "import\u00a0sqlite3\n\n# Create a connection to the db\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\n# Define a function that queries the db and fetches the required table\ndef query_db(table):\n\tquery = f\"SELECT * FROM {table}\"\n\tc.execute(query)\n\tall_rows = c.fetchall()\n\treturn all_rows\n\n# Create a function to format the result in json\ndef format_result(rows):\n\tjson_result = []\n\tfor row in rows:\n\t\trow_dict = {\n\t\t\t\"id\": row[0], \n\t\t\t\"value\": row[1]\n\t\t\t}\n\t\tjson_result.append(row_dict)\n\treturn json_result\n\n# Define a basic API endpoint to fetch the db result\nimport flask\napp = flask.Flask(__name__)\n@app.route('/api/result', methods=['GET'])\ndef fetch_result():\n\trows = query_db('table')\n\tresult = format_result(rows)\n\treturn flask.jsonify(result)\n\nif __name__ == \"__main__\":\n\tapp.run()", "category": "Python"}, {"instruction": "Write a function that takes two strings and returns the total number of occurrences of the second string in the first.", "input": "string1 = \"hello world\"\nstring2 = \"world\"", "output": "def count_occurrences(string1, string2): \n    \n    # Initialize count to 0\n    count = 0\n    \n    # Iterate over the first string\n    for i in range(len(string1)): \n        # Slice the element from i to length of second string\n        temp = string1[i: i + len(string2)] \n  \n        # If sliced string and second string are equal, \n        # increase count by one\n        if temp == string2: \n            count+= 1\n  \n    return count", "category": "Python"}, {"instruction": "Create a program which calculates the median of an array.", "input": "[3, 5, 4, 1, 7]", "output": "\"\"\"\nCreate a program which calculates the median of an array\n\"\"\"\n\ndef median(arr): \n    n = len(arr) \n    arr.sort() \n  \n    if n % 2 == 0: \n        return (arr[n//2] + arr[n//2-1])/2\n    else: \n        return arr[n//2]\n\nif __name__ == '__main__':\n    print(median([3, 5, 4, 1, 7]))", "category": "Python"}, {"instruction": "Rewrite the following Python code so that it uses a for loop instead of a while loop.", "input": "i = 0\nwhile i < 11:\n    print(i)\n    i += 1", "output": "for i in range(11):\n    print(i)", "category": "Python"}, {"instruction": "Write a code to get the current time in New York City in 24-hour format.", "input": "", "output": "import pytz\nfrom datetime import datetime\n\ndef get_time():\n    new_york = pytz.timezone('America/New_York')\n    curr_time = datetime.now(new_york).strftime('%H:%M')\n    return curr_time\n\nif __name__ == '__main__':\n    print(get_time()) #this will print the current time in 24-hour format in New York City", "category": "Python"}, {"instruction": "Write code to print a multiplication table.", "input": "", "output": "def print_multiplication_table():\n    \"\"\"Prints a multiplication table.\"\"\"\n    # Print the header of the table\n    print('  |  '.join(str(i).ljust(4) for i in range(1, 11)))\n    print('-' * 46)\n\n    # Print the rows of the table\n    for row in range(1, 11):\n        print('  |  '.join(str(row * col).ljust(4) for col in range(1, 11)))\n    \nif __name__ == '__main__':\n    print_multiplication_table()", "category": "Python"}, {"instruction": "Create a program that reads an array of numbers and prints the maximum and minimum values.", "input": "[3.2, 8.5, 1.6, 6.3]", "output": "arr = [3.2, 8.5, 1.6, 6.3]\nmax_val = arr[0]\nmin_val = arr[0]\n\nfor num in arr:\n    if num > max_val:\n        max_val = num\n    if num < min_val:\n        min_val = num\n    \nprint(\"Max:\", max_val) # Outputs 8.5\nprint(\"Min:\", min_val) # Outputs 1.6", "category": "Python"}, {"instruction": "Edit the following code to print out the maximum value from an array of numbers.", "input": "[7, 8, 2, 9, 4]", "output": "arr = [7, 8, 2, 9, 4]\nmax_val = 0\nfor num in arr:\n    if num > max_val:\n        max_val = num\nprint(max_val) # Outputs 9", "category": "Python"}, {"instruction": "Identify the highest pricing plan from the given list.", "input": "plans = [{\"name\": \"Basic\", \"price\": 10},\n         {\"name\": \"Pro\", \"price\": 20},\n         {\"name\": \"Premium\", \"price\": 30}\n        ]", "output": "def highest_priced_plan(plans):\n    max_price = 0\n    max_name = \"\"\n\n    for plan in plans:\n        if plan[\"price\"] > max_price:\n            max_price = plan[\"price\"]\n            max_name = plan[\"name\"]\n\n    return max_name", "category": "Python"}, {"instruction": "Compare two strings and return \"bigger\", \"smaller\" or \"equal\" depending on the lexicographical order.", "input": "string1 = \"zebra\"\nstring2 = \"zeal\"", "output": "def compare_strings(string1, string2):\n    i = 0\n    length = min(len(string1), len(string2))\n\n    while i < length:\n        if string1[i] < string2[i]:\n            return 'smaller'\n        elif string1[i] > string2[i]:\n            return 'bigger'\n        i += 1\n    \n    if len(string1) > len(string2):\n        return 'bigger'\n    else:\n        return 'equal'", "category": "Python"}, {"instruction": "Implement quick sort to sort the given array of integers.", "input": "[9, 5, 8, 1, 3, 6, 7]", "output": "def partition(nums, low, high):\n    i = low-1\n    # set pivot as last element in array\n    pivot = nums[high]\n    \n    for j in range(low, high):\n        # if element is smaller than pivot, increment i and swap elements\n        if nums[j] < pivot:\n            i += 1\n            nums[i], nums[j] = nums[j], nums[i]\n\n    # swap pivot \n    nums[i+1], nums[high] = nums[high], nums[i+1] \n    return i+1\n\ndef quick_sort(nums, low, high):\n    if low < high:\n        # set partition index\n        part_idx = partition(nums, low, high)\n        # sort left side of partition index \n        quick_sort(nums, low, part_idx-1)\n        # sort right side of partition index \n        quick_sort(nums, part_idx+1, high)\n\nnums = [9, 5, 8, 1, 3, 6, 7]\nquick_sort(nums, 0, len(nums)-1)\nprint(\"Sorted array:\", nums)", "category": "Python"}, {"instruction": "Given an array of integers, implement insertion sort to sort the array.", "input": "[1, 4, 2, 7, 5]", "output": "def insertion_sort(nums):\n    # iterate over the array\n    for i in range(1, len(nums)):\n        j = i-1\n        # hold element to be inserted\n        temp = nums[i]\n        # shift elements right if greater than element to be inserted\n        while nums[j] > temp and j >= 0: \n            nums[j+1] = nums[j]\n            j -= 1\n        # insert element at the found position\n        nums[j+1] = temp\n    return nums\n\nnums = [1, 4, 2, 7, 5]\nprint(insertion_sort(nums))", "category": "Python"}, {"instruction": "Identify errors in the following code and suggest corrections.", "input": "def fucntion_1():\n    param1 = input(\"enter-parameter\")\n    print(\"The parameter is:\" + param1)", "output": "def function_1():\n    param1 = input(\"Enter parameter: \")\n    print(\"The parameter is: \" + param1)\n\nThe issue with the code is that it has a misspelling in the function name (fucntion_1 instead of function_1). The input prompt also lacks a space after \"Enter-parameter\" and a colon should be used at the end of the prompt. Finally, there should be a space between \"The parameter is:\" and the variable param1 in the print statement.", "category": "Python"}, {"instruction": "Create a function to take two input strings and return the longest common substring.", "input": "Input 1: ababcd\nInput 2: abxyz", "output": "def longest_common_substring(str1, str2):\n    # keep track of the longest substring\n    longest_substring = \"\"\n    \n    # iterate over each character in the first string\n    for i in range(len(str1)):\n        # iterate over each sub sequence of the first string\n        for j in range(i+1, len(str1)+1):\n            # compare the substring to each substring in the second string\n            for k in range(len(str2)-(j-i)+1):\n                # update longest_substring if we have a longer common substring\n                if str1[i:j] == str2[k:k+(j-i)] and len(str1[i:j]) > len(longest_substring):\n                    longest_substring = str1[i:j]\n\n    return longest_substring", "category": "Python"}, {"instruction": "Create a Python function to swap key-value pairs in a dictionary.", "input": "", "output": "def swap_dict_keys(d):\n    return {v: k for k, v in d.items()}", "category": "Python"}, {"instruction": "Provide an example of a JSON structure which has the same data as the following Python dictionary.", "input": "user_info = {\n    'name': 'John',\n    'age': 42,\n    'address': {\n        'street': '123 Main Street',\n        'city': 'San Francisco',\n        'state': 'CA'\n    }\n}", "output": "{\n    \"name\": \"John\",\n    \"age\": 42,\n    \"address\": {\n        \"street\": \"123 Main Street\",\n        \"city\": \"San Francisco\",\n        \"state\": \"CA\"\n    }\n}", "category": "Python"}, {"instruction": "How can you execute the following Python code to get the output printed?", "input": "def greeting():\n    print(\"Hello World!\")", "output": "The code can be executed by calling the function greeting:\n\ngreeting() #prints \"Hello World!\"", "category": "Python"}, {"instruction": "Draft a Python code to sort an array containing 3 integers in ascending order.", "input": "Array=[5,2,8]", "output": "Array.sort()\nprint(Array) # prints [2,5,8]", "category": "Python"}, {"instruction": "Explain the difference between the 'for' and 'while' loop", "input": "", "output": "The main difference between a 'for' loop and a 'while' loop is that a 'for' loop is used to iterate through a set of numbers, whereas a 'while' loop is used to continue executing a code block until the condition becomes false. A 'for' loop is generally used when there is an established number of iterations or until a certain condition is met, whereas a 'while' loop is used when the exact number of iterations is not known. Additionally, 'for' loops usually contain a counter that is initialized, tested and incremented at the beginning of each iteration, whereas a 'while' loop will only check its condition at the beginning of each iteration.", "category": "Python"}, {"instruction": "Make changes to the following code to include a 'break' statement.", "input": "while True:\n    print(\"Hello\")", "output": "while True:\n    print(\"Hello\")\n    if condition is met: \n        break", "category": "Python"}, {"instruction": "Create an object in Python which will store the following information", "input": "Name: John Doe\nAge: 34\nGender: Male", "output": "person = {\n  'name': 'John Doe',\n  'age': 34,\n  'gender': 'Male'\n}", "category": "Python"}, {"instruction": "Convert this program from procedural to object-oriented.", "input": "def calculate_mortgage(principle, years, rate):\n    # calculation\n    return monthly_payment\n\ndef calculate_interest_rate(value):\n    # calculation\n    return interest_rate", "output": "class MortgageCalculator:\n    def __init__(self, principle, years, rate):\n        self.principle = principle\n        self.years = years\n        self.rate = rate\n    \n    def calculate_mortgage(self):\n        # calculation\n        return monthly_payment\n\n    def calculate_interest_rate(self, value):\n        # calculation\n        return interest_rate", "category": "Python"}, {"instruction": "Create a function to calculate the total cost after N discounts.", "input": "discounts = [10, 15, 20]", "output": "def calculate_total(discounts):\n    total = 0\n    for discount in discounts:\n        total -= total * (discount / 100)\n    return total", "category": "Python"}, {"instruction": "Convert this program into an AsyncIO based one.", "input": "import time\n\ndef calculate_sum(numbers):\n    result = 0\n    for num in numbers:\n        result += num\n        time.sleep(2)\n    return result", "output": "import asyncio\n\nasync def calculate_sum(numbers):\n    result = 0\n    for num in numbers:\n        result += num\n        await asyncio.sleep(2)\n    return result", "category": "Python"}, {"instruction": "Suggest a code to find the longest sub-string in a string.", "input": "string = \"The quick brown fox jump over lazy dog\"", "output": "def find_longest_substring(string):\n    # get the length of the string\n    length = len(string)\n     \n    # variable to store the longest substring length\n    longest_substring_length = 0\n     \n    # variable to store the longest substring\n    longest_substring = ''\n     \n    # loop through the string\n    for i in range(length):\n      tmp_str = ''\n      for j in range(i, length):\n        if string[j] not in tmp_str:\n          tmp_str += string[j]\n        else:\n            break\n      if len(tmp_str) > longest_substring_length:\n        longest_substring_length = len(tmp_str)\n        longest_substring = tmp_str\n    return longest_substring\n\nprint(find_longest_substring(string)) # 'brownfoxjump'", "category": "Python"}, {"instruction": "Create another function to remove duplicates from the array.", "input": "arr = [1, 1, 2, 3, 4, 5, 5, 6, 7]", "output": "def remove_duplicates(arr):\n    result = []\n    for num in arr:\n        if num not in result: # if current element is unique, add to the list.\n            result.append(num)\n    return result\n    \nnew_arr = remove_duplicates(arr)\nprint(new_arr) # [1, 2, 3, 4, 5, 6, 7]", "category": "Python"}, {"instruction": "Parse the following JSON string and print out how many objects are there?", "input": "resp = '[{\"name\": \"john\", \"age\": 25}, {\"name\": \"Anna\", \"age\": 17}, {\"name\": \"Rick\", \"age\": 46}]'", "output": "import json\n\nresp = '[{\"name\": \"john\", \"age\": 25}, {\"name\": \"Anna\", \"age\": 17}, {\"name\": \"Rick\", \"age\": 46}]'\n\ndata = json.loads(resp)\nprint(len(data)) # 3 objects", "category": "Python"}, {"instruction": "Using the \"requests\" library, write a code to get the data from the endpoint http://jsonplaceholder.typicode.com/users", "input": "", "output": "import requests\n\ndef get_api_data():\n    url = 'http://jsonplaceholder.typicode.com/users'\n    response = requests.get(url)\n    return response.json()\n    \nif __name__ == '__main__':\n    data = get_api_data()\n    print(data)", "category": "Python"}, {"instruction": "Use a Tensorflow model to predict a numerical output from an input.", "input": "Input: [1, 2, 3]\nOutput: 8.5", "output": "import tensorflow as tf\n\n# Define the model.\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(10, activation=\"relu\"),\n    tf.keras.layers.Dense(1)\n])\n\n# Compile the model.\nmodel.compile(optimizer=\"adam\", loss=\"mse\")\n\n# Train the model.\nmodel.fit([1, 2, 3], [8.5], epochs=50)", "category": "Python"}, {"instruction": "Create a Racket function that takes two strings as an input and returns the length of the longest common substring.", "input": "String1 = \"hello world\"\nString2 = \"world hello\"", "output": "(define (getLongestCommonSubstring string1 string2)\n    (define max-len 0)\n    (define s1-len (string-length string1))\n    (define s2-len (string-length string2))\n    (for ((i 0 (+ i 1)))\n        (< i s1-len)\n        (for ((j 0 (+ j 1)))\n            (< j s2-len)\n            (let ((cur-len 0))\n            (when (equal? (string-ref string1 i) (string-ref string2 j))\n                (while (and (< i s1-len)\n                       (< j s2-len)\n                       (equal? (string-ref string1 i) (string-ref string2 j))) \n                (set! cur-len (+ cur-len 1))\n                (set! i (+ i 1))\n                (set! j (+ j 1)))\n            (when (> cur-len max-len)\n                (set! max-len cur-len))\n            )\n        )\n    )\n    max-len\n)", "category": "Python"}, {"instruction": "Write a function that takes two lists as an argument and returns the elements that are common to both the lists in Python.", "input": "list1 = [1, 2, 3, 4]\nlist2 = [2, 3, 4, 5]", "output": "def common_elements(list1, list2):\n    common_list = [element for element in list1 if element in list2]\n    return common_list", "category": "Python"}, {"instruction": "How would you remove duplicates from a Python list?", "input": "", "output": "The most straight-forward approach is to add the elements to a set while iterating over the original list and then build a new list out of the set.\n\nExample: \n\noriginal_list = [1,2,2,3,3,4] \n\nnew_list = list(set(original_list)) \n\nprint(new_list) \n# Output [1, 2, 3, 4]", "category": "Python"}, {"instruction": "Complete the following Python code so it prints even numbers from 0 to 10.", "input": "for num in range(0, 10):\n    if", "output": "for num in range(0, 10):\n    if num % 2 == 0:\n        print(num)", "category": "Python"}, {"instruction": "Suggest a method to print out a list of prime numbers below a given number n.", "input": "", "output": "def prime_numbers(n): \n    numbers = list(range(2, n + 1)) \n    for i in range(2, n+1): \n        for j in range(i + 1, n+1): \n            if j % i == 0: \n                numbers[j - 2] = 0 \n  \n    return [number for number in numbers if number != 0]", "category": "Python"}, {"instruction": "Given the following input, suggest a python code for computing the Fibonacci number for n.", "input": "", "output": "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n<0: \n        print(\"Incorrect input\") \n    elif n==0: \n        return a \n    elif n==1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n    return b", "category": "Python"}, {"instruction": "Suggest an efficient algorithm for sorting the following list.", "input": "[7, 1, 4, 8, 9, 2]", "output": "def sort(array): \n    length = len(array) \n  \n    for i in range(length): \n  \n        j = i \n        while j > 0 and array[j-1] > array[j]: \n            # Swap elements\n            array[j], array[j-1] = array[j-1], array[j] \n            j -= 1\n\n    return array", "category": "Python"}, {"instruction": "Write a function that takes two input parameters, a list and a number, and returns true if the number occurs in the list more than twice.", "input": "", "output": "def appears_twice(lst, num):\n    c = 0\n    for n in lst:\n        if n == num:\n            c += 1\n    if c > 2:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Create a program to input numerical data which can then be stored and retrieved into/from a database.", "input": "", "output": "def store_data(table_name, data):\n    conn = sqlite3.connect('database.db') \n    cursor = conn.cursor()\n\n    cursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS \"\"\" + table_name + \"(data text)\") \n  \n    insert_query = \"INSERT INTO \" + table_name + \" VALUES (?)\"\n    cursor.execute(insert_query, (data,))\n  \n    conn.commit() \n  \ndef retrieve_data(table_name):\n    conn = sqlite3.connect('database.db')\n    cursor = conn.cursor()\n\n    return_query = \"SELECT * FROM \" + table_name\n    cursor.execute(return_query) \n    return cursor.fetchall()", "category": "Python"}, {"instruction": "Given a tree, write a program to find the maximum depth of the tree.", "input": "", "output": "def max_depth(node):\n    if node is None:\n        return 0\n    else:\n        left_depth = max_depth(node.left)\n        right_depth = max_depth(node.right)\n        if left_depth > right_depth:\n            return left_depth + 1\n        else: \n            return right_depth + 1", "category": "Python"}, {"instruction": "Given a JSON string, try to parse it into a Python dictionary.", "input": "myJSON = '{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}'", "output": "import json\n\nmyDict = json.loads(myJSON)\nprint(myDict)", "category": "Python"}, {"instruction": "Given a number n, generate a list of tuples of the form (x,n/x) where x divides n.", "input": "n = 30", "output": "def generate_tuples(n):\n    tuples=[]\n    for x in range (1,n+1):\n        if n % x == 0:\n            tuples.append((x,int(n/x)))\n    return tuples", "category": "Python"}, {"instruction": "Write a Python program to remove the elements that occur only once from a given array.", "input": "[1, 2, 2, 3, 3, 3, 4, 4]", "output": "def remove_once(arr): \n    freq_table  = {} \n    for num in arr: \n        if num in freq_table.keys(): \n            freq_table[num] += 1\n        else: \n            freq_table[num] = 1\n\n    filtered_array = [] \n    for num, freq in freq_table.items(): \n        if freq > 1: \n            filtered_array.append(num) \n    return filtered_array\n\nremove_once([1, 2, 2, 3, 3, 3, 4, 4])\n\n#Output: [2, 3, 4]", "category": "Python"}, {"instruction": "Create a list of 3 objects in Python.", "input": "", "output": "list = [1, \"hello\", {'name': 'John'}]", "category": "Python"}, {"instruction": "Create an api with Django that is able to search through an inputed text.", "input": "", "output": "from django.contrib.auth.models import User\nfrom django.http import HttpResponse\nfrom django.shortcuts import render\nfrom django.views.decorators.csrf import csrf_exempt\nfrom .models import Search\n\n@csrf_exempt\ndef search_text(request):\n    if request.method == 'PUT':\n        data = request.PUT\n        text = data.get('text',None)\n        if text:\n            matches = Search.objects.filter(text__icontains=text)\n            return HttpResponse(matches)\n        else:\n            return HttpResponse(\"Error: No text was provided\")", "category": "Python"}, {"instruction": "Write a function to check if a given number is an Armstrong number or not. An Armstrong number is a-number when the sum of the cubes of its own digits is equal to the number itself.", "input": "", "output": "def isArmstrong(num):\n   # obtain number of digits \n   digits = len(str(num))\n\n   # initialize sum\n   Sum = 0\n\n   # find sum of nth power of digits \n   temp = num \n   while temp > 0:\n      digit = temp % 10\n      Sum = Sum + digit ** digits\n      temp //= 10\n   # return true or false\n   return Sum == num", "category": "Python"}, {"instruction": "Edit the code to print out that \"Index not found\".", "input": "nums = [1, 2, 3, 4, 5]\ntarget = 6", "output": "def Contains(nums, target):\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return True\n    print(\"Index not found\")\n    return False", "category": "Python"}, {"instruction": "Edit the code so it can detect if an array is already sorted", "input": "arr = [1, 2, 4, 5, 6, 7]", "output": "def is_sorted(arr): \n    n = len(arr) \n    for i in range (0, n-1): \n        if (arr[i] > arr[i+1] ): \n            return False\n    return True", "category": "Python"}, {"instruction": "Come up with a program that takes in two strings and returns the number of characters that are shared between them", "input": "str1 = \"Greatest\"\nstr2 = \"Gifted\"", "output": "def num_common_chars(str1, str2):\n    count = 0\n    for x in str1:\n        if x in str2:\n           count += 1\n           \n    return count", "category": "Python"}, {"instruction": "Write a function in Python that takes a number as input and prints out if the number is odd or even.", "input": "Number = 23", "output": "def OddEven(num):\n    if num%2 == 0 :\n        print(\"{} is Even\".format(num))\n    else :\n        print(\"{} is Odd\".format(num))\n\nOddEven(23)", "category": "Python"}, {"instruction": "Write an algorithm in Python that takes an array as input and prints all the duplicate values in it.", "input": "arr = [1, 4, 7, 2, 6, 1, 7, 2]", "output": "def find_duplicates(arr): \n    result = [] \n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] == arr[j]: \n                result.append(arr[i]) \n    return result\n\narr = [1, 4, 7, 2, 6, 1, 7, 2] \n  \nresult = find_duplicates(arr) \n  \nprint(result)", "category": "Python"}, {"instruction": "Translate the following sentence to Python code.", "input": "Input the hours, rate and the tax rate.", "output": "hours = float(input(\"Input the hours: \"))\nrate = float(input(\"Input the rate: \"))\ntax_rate = float(input(\"Input the tax rate: \"))", "category": "Python"}, {"instruction": "Write a code to get the median of four numbers", "input": "x = 11, y = 12, z = 13, w = 14", "output": "def median(x,y,z,w):\n    nums = [x,y,z,w]\n    nums.sort()\n    mid =len(nums)//2\n    if len(nums)%2 == 0:\n        median = (nums[mid] + nums[mid-1])/2\n    else:\n        median = nums[mid]\n    return median\n\nif __name__ == '__main__':\n    print(median(11,12,13,14))", "category": "Python"}, {"instruction": "Create a python class to represent a 3x3 matrix", "input": "", "output": "class Matrix:\n    def __init__(self, array):\n        self.array = array\n        self.rows = len(array)\n        self.cols = len(array[0])\n\n    def get_matrix(self):\n        return self.array\n\n    def set_matrix(self, array):\n        self.rows = len(array)\n        self.cols = len(array[0])\n        self.array = array\n\nif __name__ == '__main__':\n    matrix = [[1,2,3],[4,5,6],[7,8,9]]\n    m = Matrix(matrix)", "category": "Python"}, {"instruction": "Write a code to check if an element is present in an array", "input": "array = ['apple','dog','cat','mouse','ball']\nelement = 'cat'", "output": "def is_present(array, element):\n    if element in array:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    print(is_present(array, element))", "category": "Python"}, {"instruction": "Write a code to reverse each element of an array", "input": "array = ['apple','dog','cat','mouse','ball']", "output": "def reverse_array(array):\n    reversed_array = []\n\n    for elem in array:\n        reversed_array.append(elem[::-1])\n    \n    return reversed_array\n\nif __name__ == '__main__':\n    print(reverse_array(array))", "category": "Python"}, {"instruction": "Write a Question answer system for the given paragraph.", "input": "Paragraph: The current century is the 21st century and it started in 2001", "output": "def QASystem(paragraph):\n    words = paragraph.split()\n    answer = words[-1]\n\n    while True:\n        user_input = input('What is the first year of this century? ')\n        if user_input == answer:\n            print('Your answer is correct!')\n            break\n        else:\n            print('Incorrect! Please try again')\n\nQASystem(paragraph)", "category": "Python"}, {"instruction": "Generate a python code to remove all the occurrences of the element x from a list y.", "input": "", "output": "def remove_x(x, y):  \n    while x in y: \n        y.remove(x) \n    return y", "category": "Python"}, {"instruction": "Create a for loop in Python to print all elements in a given numpy array.", "input": "import numpy as np \nmyArray = np.array([1, 2, 3, 4])", "output": "for element in myArray:\n print(element)", "category": "Python"}, {"instruction": "Suggest a python code that returns the average of all the elements in a list.", "input": "", "output": "def avg_list(lst): \n    return sum(lst) / len(lst)", "category": "Python"}, {"instruction": "Write a python code to generate permutations of an input string.", "input": "\"abc\"", "output": "def permutations(string): \n    if len(string) == 0: \n        return [] \n  \n    if len(string) == 1: \n        return [string] \n  \n    l = [] \n    for i in range(len(string)): \n       m = string[i] \n       rem_string = string[:i] + string[i+1:] \n       for p in permutations(rem_string): \n           l.append(m + p) \n    return l", "category": "Python"}, {"instruction": "Write a code to generate all string combinations of a given alphabet", "input": "", "output": "def generate_strings(alphabet): \n    n = len(alphabet)  \n  \n    # Run a loop for all elements in array one by one \n    for i in range(1 << n): \n  \n        # Create a string s of length n \n        s = \"\" \n        for j in range(n): \n  \n            # Check if jth bit of i is set or not \n            # and if set append character j to s \n            if i & (1 << j): \n                s += alphabet[j] \n  \n        # Print the generated string \n        print(s)", "category": "Python"}, {"instruction": "Write a Python script that can convert a string to pig latin", "input": "", "output": "def pig_latin(text):\n    words = text.split()\n    Latin_words = []\n    # loop through every word \n    for word in words:\n        # seperate consonants from vowels\n        firstletter = word[0]\n        if firstletter.lower() in 'aeiou':\n            Latin_word = word+'ay'\n        else:\n            Latin_word = word[1:]+firstletter+'ay'\n        Latin_words.append(Latin_word)\n    return \" \".join(Latin_words)", "category": "Python"}, {"instruction": "Discuss the purpose of data cleaning", "input": "", "output": "The purpose of data cleaning is to ensure that the data is in an accurate and usable form. This involves eliminating or correcting errors such as missing data, incorrect data, duplicate data, and outliers. It also involves replacing invalid values with valid ones, standardizing data formats and converting data from one format to another, and filling in missing values with imputed values. Data cleaning is an important step in the data analysis pipeline, and it is necessary to ensure that your data is in an appropriate and reliable form before performing any analysis on it.", "category": "Python"}, {"instruction": "Construct a simple algorithm to check if a number is prime", "input": "11", "output": "def is_prime(n):\n    # check if n is divisible by any number between 2 and n-1 \n    for i in range (2, n):\n        # if a number is divisible, then return False\n        if (n % i == 0):\n            return False\n    # if n is only divisible by itself, return True\n    return True\n\nif __name__ == '__main__':\n    n = 11\n    if(is_prime(n)):\n        print(n, \"is a prime number\")\n    else:\n        print(n, \"is not a prime number\")", "category": "Python"}, {"instruction": "Discuss some of the common applications of ranking algorithms.", "input": "", "output": "Ranking algorithms are commonly used for a wide range of applications such as web search, recommender systems, spam filtering, and sentiment analysis. In web search, ranking algorithms are used to rank websites according to relevance, so that the most relevant website appears first in the search results. Recommender systems use ranking algorithms to rank items according to user preference, so that the user can be recommended the item that best suits their preferences. Spam filtering is another application where ranking algorithms are used to identify and filter out unsolicited messages. Last but not least, sentiment analysis also uses ranking algorithms to analyze customer feedback, so that companies can identify customer sentiment and take the necessary steps to address it.", "category": "Python"}, {"instruction": "Compare and contrast function overloading and function overriding.", "input": "", "output": "Function overloading is when two or more functions have the same name but different parameters. This can be used to create multiple definitions of a single function that can be used to support different data types. Function overriding is when a derived class extends a base class and redefines its virtual methods. This allows for derived classes to have specialized behavior for a certain method, while still allowing for the base class to be used when that behavior isn't needed. Thus, function overloading allows for a single function to have different behavior, while function overriding allows a derived class to specialize a method of the base class.", "category": "Python"}, {"instruction": "You need to write a program that finds all elements in a given array which are larger than their immediate neighbours.", "input": "[3, 5, 1, 6, 8, 4]", "output": "def find_elements_larger_than_neighbours(arr):\n    result = []\n    for index, value in enumerate(arr):\n        if index > 0 and index < len(arr)-1 and value > arr[index-1] and value > arr[index+1]:\n            result.append(value)\n    return result", "category": "Python"}, {"instruction": "Given an input string, write a function that will remove all non-alphanumeric characters.", "input": "Hello World!", "output": "def remove_non_alphanumeric_chars(input):\n    output = \"\"\n    for char in input:\n        if char.isalnum():\n            output += char\n    return output", "category": "Python"}, {"instruction": "Given a list of integers, write a function that will return the largest sum of any two consecutive integers in the list.", "input": "[7, 2, 5, 3]", "output": "def largest_sum_of_consecutive_ints(arr):\n    largest_sum = 0\n    for i in range(len(arr)):\n        if i < len(arr)-1:\n            current_sum = arr[i] + arr[i+1]\n            largest_sum = max(largest_sum, current_sum)\n    return largest_sum", "category": "Python"}, {"instruction": "Given a list of strings, write a function which will return only strings which start with an uppercase letter.", "input": "String List = [\"hello\", \"World\", \"foo\", \"bar\"]", "output": "def extract_capital_words(string_list):\n    capital_words = []\n    for word in string_list:\n        if word[0].isupper():\n            capital_words.append(word)\n    return capital_words", "category": "Python"}, {"instruction": "Given a string and a list of words, count the frequency of each word in the string.", "input": "String = \"This is a test string to check the frequency of words\"\nWord List = [\"this\", \"is\", \"test\", \"string\"]", "output": "def count_frequency_of_words(string, word_list):\n    frequency_dict = {}\n    string_words = string.split()\n    for word in word_list:\n        count = 0\n        for s_word in string_words:\n            if s_word.lower() == word.lower():\n                count += 1\n        frequency_dict[word] = count\n    return frequency_dict", "category": "Python"}, {"instruction": "You have been provided with a list of integers. Write a function that multiplies each number in the list by 5.", "input": "[1, 20, 0, 5, 2]", "output": "def multiply_list_by_five(arr):\n    result = []\n    for num in arr:\n        result.append(num * 5)\n    return result", "category": "Python"}, {"instruction": "Suggest a code that takes a two-dimensional array as input and flattens it.", "input": "arr = [[1,2],[3,4],[5,6]]", "output": "# Suggest a code that takes a two-dimensional array as input and flattens it\ndef flatten_array(arr):\n    # Initialize the result array\n    result_arr = []\n\n    # Iterate the input array\n    for subarr in arr:\n        # Iterate each sub-array and add each element to the result array\n        for elem in subarr:\n            result_arr.append(elem)\n    \n    # Return the result\n    return result_arr", "category": "Python"}, {"instruction": "Suggest a method to validate whether an input string is a valid JSON document or not.", "input": "", "output": "# Method to validate whether an input string is a valid JSON document\ndef is_valid_json(input_string):\n    # Try to parse the given string with the json library\n    try:\n        json.loads(input_string)\n        return True\n    # If there is an error while parsing the string, it is not a valid JSON document\n    except json.JSONDecodeError:\n        return False", "category": "Python"}, {"instruction": "Suggest the best data structure to store a small dictionary of words and their meanings.", "input": "", "output": "# The best data structure to store a small dictionary of words and their meanings is a hash table (dictionary/dict).\n# A hash table is an efficient data structure that uses key-value pairs to store and retrieve data quickly. \n# It performs well in cases where there is a need to search, add and delete elements in a collection. \n# A hash table will allow the user to look up a word in the dictionary quickly.", "category": "Python"}, {"instruction": "Given a list of numbers, suggest code that returns the number of distinct elements in the list.", "input": "numbers_list = [1, 2, 3, 2, 4, 5, 1]", "output": "# Get the number of distinct elements in a list\nnumbers_list = [1, 2, 3, 2, 4, 5, 1]\n\n# Create a set from the list \ndistinct_elements = set(numbers_list)\n\n# Return the number of distinct elements \nreturn len(distinct_elements)", "category": "Python"}, {"instruction": "Suggest an algorithm to compute the sum of all prime numbers from 2 to n.", "input": "", "output": "def sum_primes(n):\n    # Initialize sum to 0\n    sum_prime = 0\n\n    # Iterate through all numbers from 0 to n\n    for num in range(2, n+1):\n        is_prime = True\n        \n        # Check whether the number is prime\n        for div in range(2, num):\n            if num % div == 0:\n                is_prime = False\n                break\n        \n        # If the number is prime, add it to the sum\n        if is_prime:\n            sum_prime += num\n\n    # Return the sum\n    return sum_prime", "category": "Python"}, {"instruction": "Rewrite the following Python code to include proper exception handling.", "input": "f = open(\"myfile.txt\")\ntext = f.read()", "output": "try:\n    f = open(\"myfile.txt\")\n    text = f.read()\nexcept IOError:\n    print(\"Error: Could not open file\")\nfinally:\n    f.close()", "category": "Python"}, {"instruction": "Perform an in-place reversal of a linked list", "input": "", "output": "def reverse_list(head): \n    curr = head \n    prev = None\n    while curr: \n        next = curr.next\n        curr.next = prev \n\n        prev = curr \n        curr = next\n\n    head = prev \n    return head", "category": "Python"}, {"instruction": "List the methods used by the os module in python.", "input": "", "output": "The methods used by the os module are: getcwd(), listdir(), mkdir(), rename(), chdir(), rmdir(), stat(), chmod(), remove(), chown(), and many more.", "category": "Python"}, {"instruction": "Write a Python snippet that prints out each item in a given list.", "input": "list = [\"Apple\", \"Banana\", \"Cherry\"]", "output": "for item in list:\n  print(item)", "category": "Python"}, {"instruction": "Design a code to generate a histogram from given data.", "input": "[2, 3, 5, 6, 9]", "output": "def histogram(lst): \n    frequency = {} \n  \n    for item in lst: \n        frequency[item] = frequency.get(item, 0) + 1 \n  \n    for item in frequency: \n        print(item, '-->', '*' * frequency[item])", "category": "Python"}, {"instruction": "Generate a code to make all the elements of a list positive.", "input": "", "output": "def make_positive(lst): \n    return [abs(x) for x in lst]", "category": "Python"}, {"instruction": "Create a program to list the 3 most frequent words in a string.", "input": "string = \"I am learning Python programming language\"", "output": "def top_three_words(string):\n    words = string.split()\n    word_dict = {}\n    for word in words:\n        if word in word_dict:\n            word_dict[word] +=1\n        else:\n            word_dict[word] = 1\n    sorted_dict = sorted(word_dict.items(), key = lambda x: x[1], reverse = True)\n    top_three = [word[0] for word in sorted_dict[:3]]\n    return top_three", "category": "Python"}, {"instruction": "Create a program to find the closest string to the given string from a list of strings.", "input": "string = \"text\"\nstrings = [\"tens\", \"tent\", \"teach\", \"tewksbury\"]", "output": "def closest_string_match(string, strings):\n    min_distance = float(\"inf\")\n    min_string = \"\"\n    for s in strings:\n        distance = levenshtein_distance(string, s)\n        if distance < min_distance:\n            min_distance = distance \n            min_string = s\n    return min_string\n\ndef levenshtein_distance(s1, s2):\n    if len(s1) > len(s2):\n        s1, s2 = s2, s1\n\n    distances = range(len(s1) + 1)\n    for i2, c2 in enumerate(s2):\n        distances_ = [i2+1]\n        for i1, c1 in enumerate(s1):\n            if c1 == c2:\n                distances_.append(distances[i1])\n            else:\n                distances_.append(\n                    1 + min((distances[i1], distances[i1 + 1], distances_[-1])))\n        distances = distances_\n    return distances[-1]", "category": "Python"}, {"instruction": "Create a function that checks if a given string is a palindrome (a string which reads the same forward and backward).", "input": "string = \"racecar\"", "output": "def isPalindrome(string): \n    rev_string = string[::-1] \n    if (string == rev_string): \n        return True \n    return False", "category": "Python"}, {"instruction": "Create a function that takes as input a string and evaluates its quantity to true or false.", "input": "", "output": "def is_empty(str):\n  ''' This function takes as input a string and evaluates its \n      quantity to true or false.\n  '''\n  if len(str.strip()) == 0:\n    return True\n  else:\n    return False", "category": "Python"}, {"instruction": "Suggest a data structure in Python to represent a binary search tree.", "input": "", "output": "A Binary Search Tree (BST) can be represented using the dictionary data structure in Python. Each node in the tree will be represented by a dictionary containing the keys: \u2018value\u2019, \u2018left\u2019, and \u2018right\u2019. \u2018value\u2019 refers to the numeric or string value of the node, \u2018left\u2019 refers to the dictionary representation of the left child and \u2018right\u2019 refers to the dictionary representation of the right child.", "category": "Python"}, {"instruction": "Construct a bubblesort algorithm in Python.", "input": "", "output": "def bubbleSort(array): \n\tn = len(array) \n\tfor i in range (n): \n\t\tfor j in range(0, n-i-1): \n\t\t\tif array[j] > array[j+1] : \n\t\t\t\tarray[j], array[j+1] = array[j+1], array[j] \n\narr = [64, 34, 25, 12, 22, 11, 90] \nbubbleSort(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(n): \n\tprint (\"%d\" %arr[i]),", "category": "Python"}, {"instruction": "Populate an array with numbers from 1 to 10 in Python.", "input": "", "output": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Create a program to encrypt a given text using any encryption technique.", "input": "Hello", "output": "# Using Python:\n \nplain_text = \"Hello\"\n\n# Simple substitution encryption\nalphabet = ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\nencrypted_text = \"\"\n\nfor plain_letter in plain_text:\n    if plain_letter in alphabet:\n        encrypted_letter = alphabet[(alphabet.index(plain_letter) + 3) % 26]\n    else:\n        encrypted_letter = plain_letter\n    encrypted_text += encrypted_letter\n    \nprint(\"Encrypted Text:\", encrypted_text) # Output: Khoor", "category": "Python"}, {"instruction": "Define a function in Python that takes a number as an argument and returns its cube.", "input": "", "output": "def cube(number):\n    return number**3", "category": "Python"}, {"instruction": "Write a Python program for calculating the sum of a given array of numbers.", "input": "[2, 3, 4, 5]", "output": "def calculateSum(arr): \n   sum = 0\n   for num in arr: \n      sum += num  \n   return sum \n\nprint(calculateSum([2, 3, 4, 5]))", "category": "Python"}, {"instruction": "Write a function to compare two strings and return the number of character positions at which the strings in the two strings differ from each other.", "input": "str1 = \"apple\"\nstr2 = \"animal\"", "output": "def compare_strings(s1, s2):\n    count = 0\n    for i in range(min(len(s1), len(s2))):\n        if s1[i] != s2[i]:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Describe the purpose of an API.", "input": "", "output": "An API (Application Programming Interface) is a set of programming instructions and standards used for interacting with a software application or web service. It generally enables a developer to access specific features of an application or web service, such as data or functionality, to build integrated applications. APIs provide a way to write code which interacts with other external services in a secure and efficient manner.", "category": "Python"}, {"instruction": "Install Numpy in Python using pip.", "input": "", "output": "pip install numpy", "category": "Python"}, {"instruction": "Train a machine learning model to predict whether a customer is likely to purchase a product.", "input": "", "output": "import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Read data and split into training and test sets\ndata = pd.read_csv(\"customer_data.csv\")\nX = data.drop(\"target\", axis=1)\ny = data.target\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Train the model\nclf = RandomForestClassifier()\nclf.fit(X_train, y_train)\n\n# Evaluate the model\nscore = clf.score(X_test, y_test)\nprint(\"Model accuracy:\", score)", "category": "Python"}, {"instruction": "Write a function to output \"Thank you\" three times.", "input": "", "output": "def say_thanks():\n\tfor i in range(3):\n\t\tprint(\"Thank you\")", "category": "Python"}, {"instruction": "Create a method to find the shortest word in a given array of strings.", "input": "", "output": "def shortest_word(arr):\n    shortest_word = arr[0]\n    for word in arr[1:]:\n        if len(word) < len(shortest_word):\n            shortest_word = word\n    return shortest_word", "category": "Python"}, {"instruction": "Design an algorithm to summarize a long text.", "input": "", "output": "def summarize_text(text): \n    # Split the text into sentences \n    sentences = text.split('.') \n    # Compute the frequency of each sentence \n    sentence_frequencies = {} \n    for sent in sentences: \n        # Clean the sentences \n        clean_sent = sent.strip().lower() \n        # Count the frequency of the sentence \n        if clean_sent in sentence_frequencies: \n            sentence_frequencies[clean_sent] += 1\n        else: \n            sentence_frequencies[clean_sent] = 1\n  \n    # Rank the sentences based on frequency \n    ranked_sentences = sorted(sentence_frequencies.items(), key=lambda x: x[1], reverse=True) \n  \n    # Return the top 3 sentences as the summary \n    summary = [] \n    for sent in ranked_sentences[:3]: \n        summary.append(sent[0]) \n  \n    return \".\".join(summary)", "category": "Python"}, {"instruction": "Implement a function that can convert a number from one number system to another.", "input": "Input: The number 60 in binary to be converted to decimal.", "output": "def binary_to_decimal(binary):\n    decimal = 0 \n    length = len(binary) \n    for digit in range(0, length): \n        decimal += int(binary[digit]) * pow(2, length - digit - 1) \n    return decimal \n\nprint(binary_to_decimal(\"60\"))\nOutput: 24", "category": "Python"}, {"instruction": "Write a `Python` program to parse an HTML document and store the tags in a list.", "input": "", "output": "from bs4 import BeautifulSoup \n  \n# data stored in a string \nhtml_doc = \"\"\" \n<html><head><title>Parser Demo</title></head> \n<body> \n<h1>This is Heading1</h1> \n<h2>This is Heading2</h2> \n</body></html> \n\"\"\"\n  \n# passing the html document to \n# BeautifulSoup() for parsing \nsoup = BeautifulSoup(html_doc, 'html.parser') \n  \n# parsing tags from the document \ntags = [tag.name for tag in soup.find_all()] \n\nprint(tags)", "category": "Python"}, {"instruction": "Create a Python dictionary with the student's name as the key and marks as the value.", "input": "data = {\n    \"Ann\": 78, \n    \"John\": 92,\n    \"Bob\": 67\n}", "output": "student_marks = {\n    \"Ann\": 78, \n    \"John\": 92,\n    \"Bob\": 67\n}", "category": "Python"}, {"instruction": "Write a function 'hasRepeats' that checks if a list has two of the same elements.", "input": "list = [1, 3, 9, 5, 3]", "output": "def hasRepeats(list):\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[i] == list[j]:\n                return True\n    return False\n\nprint(hasRepeats([1, 3, 9, 5, 3]))\n\nOUTPUT:\nTrue", "category": "Python"}, {"instruction": "Write a function 'divideList' which takes a list and an integer, and divides the list into n groups.", "input": "list = [1, 2, 3, 4, 5]\nn = 2", "output": "def divideList(list, n):\n    nList = [[] for _ in range(n)]\n    for item in list:\n        nList[item % n].append(item)\n    return nList\n\nprint(divideList([1, 2, 3, 4, 5], 2))\n\nOUTPUT:\n[[1, 3, 5], [2, 4]]", "category": "Python"}, {"instruction": "Design a function 'sortString' which takes a string of words and sorts each word alphabetically.", "input": "string = \"zebra cat dog\"", "output": "def sortString(string):\n    words = string.split(\" \")\n    sortedWords = [word for word in words]\n    for i in range(len(sortedWords)):\n        sortedWords[i] = \"\".join(sorted(sortedWords[i]))\n    return \" \".join(sortedWords)\n\nprint(sortString(\"zebra cat dog\"))\n\nOUTPUT:\n abcerz cdgot", "category": "Python"}, {"instruction": "Create a Python function 'checkInteger' that takes a number and returns true if the number is an integer, false otherwise.", "input": "number = 3.2", "output": "def checkInteger(number):\n    if number == int(number):\n        return True\n    else:\n        return False\n\nprint(checkInteger(3.2))\n\nOUTPUT:\nFalse", "category": "Python"}, {"instruction": "Write a Python code to check if the given string contains only digits.", "input": "string = \"12345\"", "output": "def checkDigits(string):\n    for char in string:\n        if char not in '1234567890':\n            return False\n    return True\n\nprint(checkDigits('12345'))\n\nOUTPUT:\nTrue", "category": "Python"}, {"instruction": "Given a sentence, create a method to capitalize every word in the sentence.", "input": "hello world", "output": "def capitalize_words(string):\n    return ' '.join(word.capitalize() for word in string.split())", "category": "Python"}, {"instruction": "Write a function that takes an array of integers and returns an array of the same length with each element multiplied by 2.", "input": "[1, 2, 3]", "output": "def multiplyByTwo(arr):\n    multipliedArr = []\n    for i in arr:\n        multipliedArr.append(i*2)\n    return multipliedArr", "category": "Python"}, {"instruction": "Construct a machine learning model to classify a given dataset into two class labels.", "input": "Dataset", "output": "Using a dataset with two class labels (e.g., yes/no, 0/1, etc.), a machine learning model can be constructed, for example, by using a Support Vector Machine (SVM) method with a suitable kernel. The inputs to the model would be the features from the dataset and the output would be the predicted class labels. The SVM algorithm would be trained with the input dataset and the class labels, and then tested with a test dataset to measure the accuracy of the model.", "category": "Python"}, {"instruction": "Create a tensorflow model to predict the probability of rain given an input dataset.", "input": "Weather dataset", "output": "The following steps can be taken to create a tensorflow model to predict the probability of rain given an input dataset:\n\n1. Preprocess and clean the input data.\n2. Split the data into training and testing datasets.\n3. Build a neural network model with the input dataset.\n4. Compile the model with a suitable loss function, optimizer, and metrics.\n5. Train the model and evaluate the performance.\n6. Predictions can be made by passing a new input into the model.", "category": "Python"}, {"instruction": "Write a function in Python to return the first n digits of the Fibonacci sequence.", "input": "n = 5", "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n\nfibonacci(n)", "category": "Python"}, {"instruction": "Write a Python program to determine if an input string is a valid IP address.", "input": "", "output": "import re\ndef isValidIP(ip): \n    # check if the string is a valid IP address\n    regex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)'''\n    # compile the regex \n    pattern = re.compile(regex) \n    \n    # Pass the string in search() method\n    if(pattern.search(ip)):  \n        return True\n    else:  \n        return False\n    \n# Driver Code\nprint(isValidIP(\"192.168.0.1\"))", "category": "Python"}, {"instruction": "Given two strings, sort them in alphabetically ascending order.", "input": "\"javascript\"\n\"python\"", "output": "def sort_str(str1, str2): \n    # extract the words from the strings \n    str1_list = list (map (str, str1)) \n    str2_list = list (map (str, str2)) \n  \n    # sort the strings \n    str1_list.sort() \n    str2_list.sort() \n  \n    # join the chars of the strings \n    sorted_str1 = ''.join(str1_list) \n    sorted_str2 = ''.join(str2_list) \n  \n    # check if the words are the same \n    if (sorted_str1 == sorted_str2): \n        return True\n    else: \n        return False\n            \nprint(sort_str(\"javascript\", \"python\"))", "category": "Python"}, {"instruction": "Create an algorithm to traverse a binary tree in pre-order in Python.", "input": "", "output": "# A function to do preorder tree traversal\ndef preOrder(root):\n  \n    # Base Case\n    if root is None:\n        return\n \n    # First print the data of node\n    print(root.data),\n \n    # Then recur on left child\n    preOrder(root.left)\n \n    # Finally recur on right child\n    preOrder(root.right)", "category": "Python"}, {"instruction": "Write code in Python to extract all the words from a sentence and store them in an array.", "input": "\"Hello World!\"", "output": "words = sentence.split(\" \")", "category": "Python"}, {"instruction": "What is the difference between deep learning and traditional AI?", "input": "", "output": "The primary difference between deep learning and traditional AI is the way they process and interpret data. Deep learning uses a multi-layered artificial neural network in order to learn the patterns and features in data, while traditional AI uses symbolic reasoning and rule-based algorithms to process data. Deep learning is capable of learning complex patterns and features, often outperforming traditional AI methods, while traditional AI is limited to processing pre-defined and structured data.", "category": "Python"}, {"instruction": "Write a code for creating multiple variables with a single statement in Python.", "input": "", "output": "x, y, z = 1, 2, 3", "category": "Python"}, {"instruction": "Write a function that receives an array and removes every odd element from it.", "input": "[1, 2, 3, 4, 5, 6, 7, 8]", "output": "def remove_odd(arr):\n    return [i for i in arr if i % 2 == 0]", "category": "Python"}, {"instruction": "explain the concept of static variables in a programming language", "input": "", "output": "Static variables are variables which retain their value over multiple function calls. They are declared with the \"static\" keyword and can be accessed within the same scope in which they were declared. Static variables can be declared at the class level or at the function level and are typically used to maintain some state information across multiple calls to the same function or data between multiple instances of the same class. Static variables are commonly used to maintain a count of the number of times a function has been called, to store configuration information for the entire program, or to maintain a cumulative data value that is modified within a loop.", "category": "Python"}, {"instruction": "Generate an array with the following pattern [2, 4, 8, 16, ....1024]", "input": "", "output": "def generate_pattern(x):\n    arr = []\n    for i in range(11):\n        arr.append(x**i)\n    return arr", "category": "Python"}, {"instruction": "Write a code to filter out numbers which are divisible by 3 and 5 from a given list.", "input": "list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "output": "def filter_3_5(nums): \n    return [num for num in nums if num % 3 == 0 and num % 5 == 0]\n\nprint(filter_3_5(list))", "category": "Python"}, {"instruction": "Write a Python program to create a Caesar Cipher encryption algorithm.", "input": "", "output": "def cipher(input_str, key):\n  output_str = \"\"\n\n  for char in input_str:\n    if char.isalpha():\n      # Encrypt each character\n      ascii_value = ord(char)\n      ascii_value = ascii_value + (key % 26)\n      if char.isupper():\n        if ascii_value > ord(\"Z\"):\n          ascii_value -= 26\n      elif char.islower():\n        if ascii_value > ord(\"z\"):\n          ascii_value -= 26  \n      output_str += chr(ascii_value)\n    else:\n      output_str += char\n\n  return output_str\n\nif __name__ == '__main__':\n  # Sample input\n  input_str = 'Hello World!'\n  key = 5\n  print('Original input: {}'.format(input_str))\n\n  # Encryting the string\n  cipher_str = cipher(input_str, key)\n  print('Encrypted input: {}'.format(cipher_str))\n\n  # Decrypting the string\n  plain_text = cipher(cipher_str, -key)\n  print('Decrypted input: {}'.format(plain_text))", "category": "Python"}, {"instruction": "Given a sequence of strings, write a code to check if all the strings in the sequence are unique.", "input": "arr = [\"cat\",\"dog\",\"mouse\"]", "output": "arr = [\"cat\",\"dog\",\"mouse\"]\n\n# Check if the strings are unique\ndef is_unique(arr):\n    seen = set()\n    for item in arr:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True\n\nif is_unique(arr):\n    print(\"All the strings in the sequence are unique.\")\nelse:\n    print(\"Some of the strings in the sequence are not unique.\")", "category": "Python"}, {"instruction": "Take a string and remove all the duplicated words within it.", "input": "", "output": "def remove_duplicates(string):\n    \"\"\"Removes all repeated words from a string.\"\"\"\n    words = string.split()\n    seen = set()\n    result = []\n    for word in words:\n        if word not in seen:\n            seen.add(word)\n            result.append(word)\n    return \" \".join(result)", "category": "Python"}, {"instruction": "Write code to take two numbers and determine if their product is even.", "input": "8, 12", "output": "def is_sum_even(num1, num2):\n    \"\"\"Checks if the product of two numbers is even or odd.\"\"\"\n    sum = num1 * num2\n    return sum % 2 == 0\n\nif __name__ == \"__main__\":\n    is_even = is_sum_even(8, 12)\n    print(\"Is the sum even? \", is_even)", "category": "Python"}, {"instruction": "Manipulate the string \"Hello, World!\" using the correct Python function that will replace the word \"Hello\" with \"Goodbye\".", "input": "", "output": "def goodbye_world(string):\n    \"\"\"Replaces the word Hello with Goodbye in the string.\"\"\"\n    return string.replace(\"Hello\", \"Goodbye\")", "category": "Python"}, {"instruction": "Write a Python program that uses the function \"get_name\" to ask the user for their full name and then prints it back to them.", "input": "", "output": "def get_name():\n    \"\"\"Gets a user's full name .\"\"\"\n    first_name = input(\"What is your first name? \")\n    last_name = input(\"What is your last name? \")\n    return first_name + \" \" + last_name\n\nif __name__ == '__main__':\n    name = get_name()\n    print(\"Your name is\", name)", "category": "Python"}, {"instruction": "Implement a comparison operator that takes two strings as arguments and returns true if the strings are equal and false otherwise.", "input": "", "output": "def equals(str1, str2):\n    \"\"\"Compares two strings to see if they are equal.\"\"\"\n    return str1 == str2", "category": "Python"}, {"instruction": "Write a Python program to find the sum of Fibonacci numbers till the number 7.", "input": "", "output": "def fibonacci(n): \n    f1 = 0\n    f2 = 1\n    sum_fib = 0\n    for i in range(2, n + 1): \n        next_term = f1 + f2 \n        sum_fib += next_term\n        f1 = f2\n        f2 = next_term \n    return sum_fib\n\nprint(fibonacci(7))", "category": "Python"}, {"instruction": "Generate a random string of length 5 with only lowercase alphabetic characters.", "input": "", "output": "import string\nimport random\n\ndef generate_random_string(length):\n    allowed_characters = string.ascii_lowercase\n    return ''.join(random.choices(allowed_characters, k=length))\n\nrandom_string = generate_random_string(5)\nprint(random_string)", "category": "Python"}, {"instruction": "Generate code for a function that takes a string and returns its reverse.", "input": "", "output": "def reverseStr(string): \n    reversedString = \"\" \n    for i in range(len(string) -1, -1, -1): \n        reversedString += string[i] \n    return reversedString", "category": "Python"}, {"instruction": "Convert the following list into a dictionary in Python: [1, 2, 3, 4, 5].", "input": "", "output": "my_dict = {1:1, 2:2, 3:3, 4:4, 5:5}", "category": "Python"}, {"instruction": "What is the output of the following Python code?\n\nstring = \"Hello World\"\nstring = string[::-1]", "input": "", "output": "dlroW olleH", "category": "Python"}, {"instruction": "Create a Python loop that iterates for 10 times.", "input": "", "output": "for i in range(10):\n    ...", "category": "Python"}, {"instruction": "Create a function 'removeLetters' that takes a string and removes all instances of a given letter from it.", "input": "String = \"This string contains multiple letter t's.\"\nLetter = 't'", "output": "def removeLetters(inputString, letter):\n    outputString = \"\"\n    for c in inputString:\n        if c != letter:\n            outputString = outputString + c\n    return outputString\n\nprint(removeLetters(\"This string contains multiple letter t's.\", 't'))\n\nOUTPUT:\n\"This string contains multiple letter s.\"", "category": "Python"}, {"instruction": "Create an algorithm in Python to print the string \u201cwelcome\u201d n times.", "input": "", "output": "def print_welcome(n):\n    for i in range(n):\n        print(\"Welcome\")", "category": "Python"}, {"instruction": "Generate a random password consisting of alphanumeric characters and special characters.", "input": "", "output": "import string \nimport random \n  \ndef randomPassword(): \n    password_characters = string.ascii_letters +  string.digits + '!@#$%^&*()'\n    password = random.choice(string.ascii_lowercase) #Include atleast one lowercase\n    password += random.choice(string.ascii_uppercase) #Include atleast one uppercase\n    password += random.choice(string.digits) #Include atleast one number\n    password += random.choice(string.punctuation) #Include atleast one special character\n\n    for i in range(8):\n        password += random.choice(password_characters)\n\n    return password", "category": "Python"}, {"instruction": "Implement a text classifier for recognizing phrases that are indicative of anger in a sentence.", "input": "He threw the ball so hard, his anger couldn't be concealed.", "output": "def is_angry(sentence): \n    angry_phrases = [\"angry\", \"enraged\", \"aggrieved\", \"ineluctably\", \"ireful\", \n                    \"lusty\", \"tedious\", \"vexed\", \"irked\", \"wrath\"] \n    words_in_sentence = sentence.lower().split(\" \")\n\n    for phrase in angry_phrases: \n        if phrase in words_in_sentence: \n            return True \n    return False", "category": "Python"}, {"instruction": "Using the given input, output the longest word in the array.", "input": "words = [\"water\", \"grand\", \"piano\", \"mountain\"]", "output": "def longest(words): \n    max_len = 0\n    \n    for i in range(0, len(words)): \n        if (len(words[i]) > max_len): \n            max_len = len(words[i])\n            longest = words[i] \n  \n    return longest", "category": "Python"}, {"instruction": "Make a function that adds two lists of numbers together element-wise.", "input": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]", "output": "def add_lists(list1, list2): \n    res = [] \n    for i in range(0, len(list1)): \n        res.append(list1[i] + list2[i]) \n    return res", "category": "Python"}, {"instruction": "Create a function that evaluates the quadratic equation.", "input": "", "output": "def quadratic_equation(a,b,c):\n   discriminant = pow(b,2)-4*a*c\n   if(discriminant < 0):\n      return \"No real solutions\"\n   elif(discriminant == 0):\n      return (-b + pow(discriminant, 0.5))/(2*a)\n   else:\n      return ((-b + pow(discriminant, 0.5))/(2*a), (-b - pow(discriminant, 0.5))/(2*a))", "category": "Python"}, {"instruction": "Write a Python function that calculates the cosine distance between two vectors.", "input": "vector1 = [1, 2, 3]\nvector2 = [4, 5, 6]", "output": "def cosine_distance(a, b):\n  numerator = 0 \n  sum_a_sq = 0 \n  sum_b_sq = 0\n  for (x, y) in zip(a, b):\n    numerator += x*y\n    sum_a_sq += x**2\n    sum_b_sq += y**2\n  \n  denominator = (sum_a_sq * sum_b_sq)**.5\n  return numerator/denominator\n\ncosine_distance(vector1, vector2)", "category": "Python"}, {"instruction": "Create a function that takes in two parameters\u2015a main word and a searching word\u2015and checks if the searching word is present in the main word.", "input": "main_word = \"Hello\"\nsearching_word = \"el\"", "output": "def search_word(main_word, searching_word):\n    \"\"\"Check if the searching word is present in the main word.\"\"\"\n\n    # iterate over the main word, and check if \n    # any substring is equal to the searching word\n    for i in range(0, len(main_word)):\n        if main_word[i:(i + len(searching_word))] == searching_word:\n            return True\n\n    return False", "category": "Python"}, {"instruction": "Modify the given code to find the factorial of a specified number.", "input": "def factorial_(num):\n    \"\"\"Find the factorial of a given number\"\"\"\n    # TODO\n    return 1", "output": "def factorial_(num):\n    \"\"\"Find the factorial of a given number\"\"\"\n\n    # initialize the value of factorial\n    factorial = 1\n\n    # multiply the number with the numbers \n    # below its value to get the factorial\n    for i in range(1, num+1):\n        factorial *= i\n    \n    return factorial", "category": "Python"}, {"instruction": "Create a function that takes in three parameters, a main string, searching substring, and a replacement string, and returns the main string with all occurrences of the searching substring replaced by the replacement string.", "input": "main_string = \"Helllllllllllo World\"\nsearching_substring = \"lllllllll\"\nreplacement_string = \"y\"", "output": "def replace_string(main_string, searching_substring, replacement_string):\n    \"\"\"Replace all occurrences of the searching substring in the main string with the replacement string.\"\"\"\n    \n    # replace all occurrences of the searching substring with the replacement string\n    replaced_string = main_string.replace(searching_substring, replacement_string)\n\n    return replaced_string", "category": "Python"}, {"instruction": "Create a function that searches for elements in an array and returns the index position of the element.", "input": "array = [3, 7, 11, 14, 19]\nelement = 11", "output": "def search_for_element(array, element):\n    \"\"\"Search array for element and return index position.\"\"\"\n\n    for i in range (0, len(array)): #loop through array\n        if array[i] == element: #check if element is equal to the value in the array\n            return i #return index position\n\n    return -1 #if element is not found, return -1", "category": "Python"}, {"instruction": "Parse a list of numbers from a string in Python.", "input": "s = \"1, 2, 3, 4, 5, 6\"", "output": "import re\nlist = re.findall(r'\\d+', s)", "category": "Python"}, {"instruction": "Rewrite this function to use a binary search instead.", "input": "def linear_search(arr, x): \n    for i in range (len(arr)): \n        if arr[i] == x: \n            return i \n    return -1", "output": "def binary_search(arr, x): \n    start = 0\n    end = len(arr) - 1\n  \n    while start <= end: \n        mid = start + (end - start) // 2 \n        if arr[mid] == x: \n            return mid \n        elif arr[mid] < x: \n            start = mid + 1\n        else: \n            end = mid - 1  \n    return -1", "category": "Python"}, {"instruction": "Describe how to use the reduce() function in Python.", "input": "", "output": "The reduce() function in Python is used to apply a particular function passed in its argument to all of the list elements mentioned in the sequence passed along. This function is defined in the \u201cfunctools\u201d module. It applies the function in a manner that the resultant of the function of the current element and the next element is the new element, and so the process continues until the end of the list is reached. For example, to find the sum of all elements in a list:\n\nlist_nums = [2, 3, 4]\n\ndef list_sum(x, y):\n     return x + y\n\nlist_sum = reduce(list_sum, list_nums)\n\nprint(\"Output:\", list_sum)", "category": "Python"}, {"instruction": "Output true if a given expression evaluates to true and false if it doesn't.", "input": "expression = \"2 + 2 == 4\"", "output": "\"\"\"\nOutput true if a given expression evaluates to true and false if it doesn't\n\"\"\"\n\nexpression = \"2 + 2 == 4\"\n\ndef evaluate_expression(expression):\n    return eval(expression)\n\nif __name__ == '__main__': \n    print(evaluate_expression(expression))", "category": "Python"}, {"instruction": "Write a code to find the two largest numbers in an array and return them in reverse order.", "input": "array = [7,2,9,3,1,5]", "output": "\"\"\"\nFind the two largest numbers in an array and return them in reverse order\n\"\"\" \n\narray = [7,2,9,3,1,5]\n\ndef largest_numbers(array):\n    largest = 0\n    second_largest = 0\n    for i in array:\n        if i > largest:\n            second_largest = largest\n            largest = i\n        elif i > second_largest:\n            second_largest = i\n    return [largest, second_largest]\n \nif __name__ == '__main__':\n    print(largest_numbers(array))", "category": "Python"}, {"instruction": "Create a text-based game in Python.", "input": "", "output": "print(\"Welcome to the Text-Based Adventure Game!\") \n    \nplayer_name = input(\"What is your name? \") \n    \nprint(\"Hello \" + player_name + \", let's begin!\") \n    \nprint(\"You are walking through a dark forest, it is very quiet and there is a strange feeling of unease\") \n\nwhile True: \n    print(\"What do you want to do? (Enter 'help' for a list of commands)\") \n\n    player_action = input() \n\n    if player_action == 'help': \n        print(\"Here are the commands you can use: move, search, look, take, inventory\") \n    elif player_action == 'move': \n        print(\"Which direction do you want to move? Enter 'north', 'south', 'east' or 'west'\") \n    elif player_action == 'search':\n        print(\"You search the area and find a mysterious-looking object\") \n    elif player_action == 'look': \n        print(\"You look around and see nothing special\") \n    elif player_action == 'take': \n        print(\"You take the item and add it to your inventory\") \n    elif player_action == 'inventory': \n        print(\"You check your inventory and see the mysterious-looking object\") \n    else: \n        print(\"That command does not exist. Please enter 'help' for a list of commands\")", "category": "Python"}, {"instruction": "Given a 2D array of binary values and another 2D array, find the indices of the first array where the values of both arrays are equivalent.", "input": "array1 = [[1, 0, 0, 1],[1, 0, 1, 0],[0, 0, 0, 1],[1, 0, 1, 0]]\narray2 = [[1, 0, 1, 0], [1, 0, 0, 1], [0, 0, 0, 1], [1, 0, 0, 1]]", "output": "def find_empty_position(array1, array2):\n    results = []\n    for i in range(len(array1)):\n        for j in range(len(array1[0])):\n            if array1[i][j] == array2[i][j] and array1[i][j] == 0:\n                results.append((i, j))\n    return results", "category": "Python"}, {"instruction": "Write a function that checks if a given list of integers is sorted in ascending order.", "input": "", "output": "def is_ascending_order(nums):\n    if len(nums) == 0 or len(nums) == 1:\n        return True\n    if nums[0] < nums[1]:\n        return is_ascending_order(nums[1:])\n    return False", "category": "Python"}, {"instruction": "Given a 2D matrix of integers, retrive the maximum sum submatrix.", "input": "[[2,-2,3,4],[-4,-3,1,1],[-1,5,5,-3]]", "output": "def max_sum_submatrix(matrix):\n    rows, columns = len(matrix), len(matrix[0])\n    dp = [[0] * columns for _ in range(rows)]\n    for i in range(rows):\n        for j in range(columns):\n            dp[i][j] = matrix[i][j]\n            if i > 0:\n                dp[i][j] += dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i][j-1]\n            if i > 0 and j > 0:\n                dp[i][j] -= dp[i-1][j-1]\n                \n    max_sum = float('-inf')\n    for r1 in range(rows):\n        for r2 in range(r1, rows):\n            for c1 in range(columns):\n                for c2 in range(c1, columns):\n                    current_sum = dp[r2][c2]\n                    if r1 > 0:\n                        current_sum -= dp[r1-1][c2]\n                    \n                    if c1 > 0:\n                        current_sum -= dp[r2][c1-1]\n                    \n                    if r1 > 0 and c1 > 0:\n                        current_sum += dp[r1-1][c1-1]\n                    \n                    max_sum = max(max_sum, current_sum)\n    return max_sum", "category": "Python"}, {"instruction": "Given a 2D matrix of integers, find a path from the leftmost column to the right-most column that maximises the sum of numbers.", "input": "[[3,4,7,2],\n[2,7,4,1],\n[7,1,2,4],\n[8,2,2,7]]", "output": "def max_sum_path(matrix):\n    rows, columns = len(matrix), len(matrix[0])\n    dp = [[float(\"-inf\") for i in range(columns)] for j in range(rows)]\n    dp[0][0] = matrix[0][0]\n    for i in range(rows):\n        for j in range(columns):\n            if i > 0:\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + matrix[i][j])\n            if j > 0:\n                dp[i][j] = max(dp[i][j], dp[i][j-1] + matrix[i][j])\n    return dp[-1][-1]", "category": "Python"}, {"instruction": "Create a class in Python to build a Frequency Table from a given array of numbers.", "input": "[1,1,1,2,2,3,3,3]", "output": "class FrequencyTable:\n    def __init__(self, arr):\n        self.table = {}\n        for num in arr:\n            if num in self.table:\n                self.table[num] += 1\n            else:\n                self.table[num] = 1\n    def query(self, num):\n        return self.table.get(num, 0)", "category": "Python"}, {"instruction": "Write a function to create a deep copy of a JSON object.", "input": "", "output": "def deep_copy(json_object):\n    import json\n    return json.loads(json.dumps(json_object))", "category": "Python"}, {"instruction": "How would you check if a list of integers contains only even numbers?", "input": "", "output": "The easiest way to check if a list of integers contains only even numbers is to iterate over the list and check if each element is divisible by 2. If all elements are divisible by 2, then the list contains only even numbers.\n\n\ndef check_even(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return False \n    return True\n        \n\nlist_of_nums = [2, 4, 6]\n\nresult = check_even(list_of_nums)\nprint(result) # Output: True", "category": "Python"}, {"instruction": "Create a Python program to define a factorial of a given number.", "input": "", "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)", "category": "Python"}, {"instruction": "Define a function to print out the elements in a list without using a loop.", "input": "", "output": "def print_elements(my_list):\n    if not my_list: \n        return\n    print(my_list[0])\n    print_elements(my_list[1:])", "category": "Python"}, {"instruction": "Make an algorithm to rotate a matrix by 90 degrees.", "input": "[[1,2,3], \n[4,5,6], \n[7,8,9]]", "output": "def rotate_90_degrees(matrix):\n    n = len(matrix[0]) \n    result = [[0 for x in range(n)] for y in range(n)]  \n    for i in range(n): \n        for j in range(n): \n            result[j][n-i-1] = matrix[i][j] \n    return result", "category": "Python"}, {"instruction": "Design an algorithm to rotate a given array in clockwise direction by a given index.", "input": "array = [1, 2, 3, 4, 5] index = 2", "output": "def rotateArray(arr, index):\n    n = len(arr)\n    temp = []\n\n    for i in range(n):\n        temp.append(arr[(i + index) % n])\n    \n    for i in range(n):\n        arr[i] = temp[i]\n        \n    return arr\n\n# Test\narr = [1, 2, 3, 4, 5] \nindex = 2\nrotated = rotateArray(arr, index)\n\n# Output  \nprint(rotated)\n# [3, 4, 5, 1, 2]", "category": "Python"}, {"instruction": "Given a binary tree, write a function to print out the elements in level order.", "input": "", "output": "def levelOrder(root): \n    if root is None: \n        return\n    queue = [] \n    queue.append(root)  \n    while(len(queue) > 0): \n        print (queue[0].data), \n        node = queue.pop(0)  \n        if node.left is not None: \n            queue.append(node.left) \n        if node.right is not None: \n            queue.append(node.right)", "category": "Python"}, {"instruction": "Create a function to filter out all numbers evenly divisible by 5.", "input": "numbers = [10, 30, 45, 50, 16, 41]", "output": "def divisible_by_five(numbers):\n  new_list = []\n  for num in numbers:\n    if num % 5 == 0:\n      new_list.append(num)\n  return new_list", "category": "Python"}, {"instruction": "Create an HTTP request to get the data from the given API and parse it into a JSON object.", "input": "https://example.com/api/getData", "output": "import requests \n\nurl = \"https://example.com/api/getData\"\nresponse = requests.get(url)\ndata = response.json()", "category": "Python"}, {"instruction": "Write a shell script that download and install the latest version of Python 3.", "input": "", "output": "# Get the latest version of Python\nlatest_python=$(curl -s https://www.python.org/ftp/python/)\n# Get the filename from the link\npython_filename=\"${latest_python##*/}\"\n# Download the version\nwget https://www.python.org/ftp/python/$python_filename\n# Unpack the file\ntar -xzf $python_filename\n# Install Python\ncd $python_filename\n./configure --prefix=/usr/local/bin\nmake\nmake install", "category": "Python"}, {"instruction": "Write a function that transposes a 2D array from column-major format to row-major format.", "input": "The array is [[1,2,3],[4,5,6],[7,8,9]]", "output": "def transpose(matrix):\n    row_major = []\n    row, col = len(matrix), len(matrix[0])\n    for i in range(col):\n        row_major.append([])\n        for j in range(row):\n            row_major[i].append(matrix[j][i])\n\n    return row_major", "category": "Python"}, {"instruction": "Given the following list, write a program to sort it in ascending order.", "input": "[3, 4, -5, 6, 1, -2]", "output": "def bubbleSort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                \n    return arr \n\narr = [3, 4, -5, 6, 1, -2]\nprint(bubbleSort(arr))", "category": "Python"}, {"instruction": "Build a Python program to generate a prime numbers list in a given range.", "input": "", "output": "def prime_numbers(start_num, end_num):\n    prime_nums_list = []\n    for num in range(start_num, end_num + 1):  \n        # all prime numbers are greater than 1  \n        if num > 1:  \n            for i in range(2,num):  \n                if (num % i) == 0:  \n                    break  \n            else:  \n                prime_nums_list.append(num)\n\n    return prime_nums_list", "category": "Python"}, {"instruction": "You are given a 2D array and you need to rotate it 90 degrees clockwise.", "input": "array = [\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12],\n    [13, 14, 15, 16],\n  ]", "output": "def rotate90(arr):\n    new_arr = [[row[i] for row in arr[::-1]] for i in range(len(arr[0]))]\n    return new_arr", "category": "Python"}, {"instruction": "How can we create an exclusive truth table using the boolean operators in Python?", "input": "", "output": "truth_table = {\"p\": [True, False],\n               \"q\": [True, False], \n               \"p \u2295 q\": [(not(p) and q) or (p and not(q)) for p in truth_table[\"p\"] for q in truth_table[\"q\"]]}", "category": "Python"}, {"instruction": "Write a short class in Python that will print a custom message when created.", "input": "", "output": "class CustomMessage:\n    def __init__(self):\n        print(\"This is a custom message!\")", "category": "Python"}, {"instruction": "Convert this function from a for loop to a while loop.", "input": "def cumsum(lst):\n    sum = 0\n    new_lst = []\n    for n in lst:\n        sum += n\n        new_lst.append(sum)\n    return new_lst", "output": "def cumsum(lst):\n    sum = 0\n    new_lst = []\n    i = 0\n    while i < len(lst):\n        sum += lst[i]\n        new_lst.append(sum)\n        i += 1\n    return new_lst", "category": "Python"}, {"instruction": "Explain why this code doesn't work.", "input": "def celsius_to_fahrenheit(celsius):\n    return celsius + 5", "output": "This code doesn't work because it doesn't follow the formula for converting Celsius temperatures to Fahrenheit. The formula for converting Celsius to Fahrenheit is F = (C * 9/5) + 32, where F is the Fahrenheit temperature and C is the Celsius temperature. The code provided only adds 5 to the Celsius temperature, which is incorrect and results in an incorrect conversion.", "category": "Python"}, {"instruction": "Create a function to filter out positive numbers from a given array.", "input": "numbers = [-5, 3, 7, -2, 4, 9]", "output": "def filter_positives(numbers):\n    result_list = []\n    for element in numbers:\n        if element >= 0:\n            result_list.append(element)\n    return result_list", "category": "Python"}, {"instruction": "From a given list, remove all elements that have a prime index.", "input": "list = [4, 7, 10, 11, 14]", "output": "def remove_primes(list):\n   modified_list = []\n   for idx, num in enumerate(list):\n       if is_prime(idx) == False:\n           modified_list.append(num)\n   return modified_list", "category": "Python"}, {"instruction": "give an example of a natural language processing task solved using supervised learning.", "input": "", "output": "One example of a natural language processing task solved using supervised learning is sentiment analysis. Through supervised learning, sentiment analysis models classify text as sentimentally positive or negative, with inputs such as words, phrases, and conversations. Supervised learning algorithms are often used to train the model by using labeled data, such as customer reviews that have been labeled as positive or negative. With enough data, supervised learning algorithms learn to determine the sentiment associated with given text.", "category": "Python"}, {"instruction": "Write an algorithm that verifies whether an integer is a prime number", "input": "", "output": "def prime_check(n):\n    if n < 2: \n        return False\n    if n == 2: \n        return True\n    if not n & 1: \n        return False\n    for x in range(3, int(n**0.5) + 1, 2):\n        if n % x == 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Create a function that filters an array for all numbers greater than the given number.", "input": "", "output": "def filter_array(arr, num):\n    return [x for x in arr if x > num]", "category": "Python"}, {"instruction": "Build a convolution neural network using tensorflow that takes a single input and classify it into one of three categories.", "input": "", "output": "import tensorflow as tf\n\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Conv2D(32, 3, activation=\"relu\", input_shape=(28, 28, 1)))\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(64, activation=\"relu\"))\nmodel.add(tf.keras.layers.Dense(3, activation=\"softmax\"))\n\nmodel.compile(optimizer=\"adam\",\n              loss=\"categorical_crossentropy\",\n              metrics=[\"accuracy\"])", "category": "Python"}, {"instruction": "Create a Tkinter app with a label and a button.", "input": "", "output": "import tkinter as tk\n\nroot = tk.Tk()\nframe = tk.Frame(root)\nframe.pack()\n\nlabel = tk.Label(frame, text=\"Hello World!\")\nlabel.pack()\n\nbutton = tk.Button(frame, text=\"Exit\", command=frame.quit)\nbutton.pack()\n\nroot.mainloop()", "category": "Python"}, {"instruction": "Write a POST request to update a user's name in the following JSON format.", "input": "{\n \"id\": \"123456\",\n \"name\": \"John Doe\"\n}", "output": "import requests\n\ndata = {\n \"id\": \"123456\",\n \"name\": \"John Doe\"\n}\n\nurl = \"http://example.com/update-user-name\"\n\nresponse = requests.post(url, json=data)", "category": "Python"}, {"instruction": "Analyze the following modified code and explain what the modified code does", "input": "int x = 10;\nif (x == 10)\n  x = x + 10;\nelse\n  x = x - 10;", "output": "The modified code checks if the value of the variable x is equal to 10. If it is, it adds 10 to x, otherwise it subtracts 10. So the value of x will now be 20 if it was 10 initially, or 0 if it was not.", "category": "Python"}, {"instruction": "Design a recursive algorithm to generate the Fibonacci sequence.", "input": "", "output": "def Fibonacci(n): \n   if n<0: \n      print(\"Incorrect input\") \n   # First Fibonacci number is 0 \n   elif n==0: \n      return 0\n   # Second Fibonacci number is 1 \n   elif n==1: \n      return 1\n   else: \n      return Fibonacci(n-1)+Fibonacci(n-2)", "category": "Python"}, {"instruction": "Modify a given program to replace each element in an array with the sum of all elements before it.", "input": "[1,2,3,4]", "output": "def pref_sum(a):\n    output = [a[0]]\n    for i in range(1, len(a)):\n        output.append(a[i] + output[i-1])\n    return output", "category": "Python"}, {"instruction": "Write a python script that takes user input and prints out the squares of the numbers", "input": "", "output": "# Take input from user\nnumbers = input(\"Enter numbers: \") \n  \n# split the string \nnumbers = list(map(int, numbers.split(' '))) \n  \n# Loop to print the squares of numbers\nfor number in numbers:\n    print(number*number)", "category": "Python"}, {"instruction": "Create and fill a 2-dimensional list with the dimensions n and m.", "input": "n = 3, m = 5", "output": "list_2d = [[0 for i in range(m)] for j in range(n)]", "category": "Python"}, {"instruction": "Generate a Jupyter notebook to display a scatterplot of a given dataset.", "input": "Data: [[5.1, 3.5], [1.4, 2.3], [3.3, 4.3], [3.6, 2.7]]", "output": "#Import relevant packages \nimport pandas as pd \nimport matplotlib.pyplot as plt\n\n#Create dataframe\ndata = [[5.1, 3.5], [1.4, 2.3], [3.3, 4.3], [3.6, 2.7]]\ndf = pd.DataFrame(data, columns = ['x','y']) \n  \n#Create scatterplot\nplt.scatter(x=df[\"x\"], y=df[\"y\"])\n\n#Name axes\nplt.xlabel('x')\nplt.ylabel('y')\n\n#Show figure\nplt.show()", "category": "Python"}, {"instruction": "Write a script in Python that can classify a sentence as positive or negative.", "input": "The movie was terrible and boring.", "output": "import nltk\nfrom nltk.sentiment import SentimentIntensityAnalyzer\n\nsentence = \"The movie was terrible and boring.\"\nanalysis = SentimentIntensityAnalyzer()\nscore = analysis.polarity_scores(sentence)\nif score[\"compound\"] >= 0.5:\n    output = \"positive\"\nelse:\n    output = \"negative\"\n\nprint(\"The sentiment of the sentence is:\", output)", "category": "Python"}, {"instruction": "Write code in Python to calculate the area of a triangle given 3 sides.", "input": "side1 = 12\nside2 = 15\nside3 = 10", "output": "def areaTriangle( side1, side2, side3): \n    # calculate the semi-perimeter \n    s = (side1 + side2 + side3) / 2\n    \n    # calculate the area \n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    return area \n\n# Driver code \nside1 = 12\nside2 = 15\nside3 = 10\n\n# calculate area \narea = areaTriangle(side1, side2, side3) \n\n# print\nprint(\"Area of a triangle is :{0:0.2f}\".format(area))", "category": "Python"}, {"instruction": "Design a function in Python for computing the multiplication of 3 numbers.", "input": "4, 5, 6", "output": "def multiply_three(a, b, c):\n    return a * b * c\n\nmultiply_three(4, 5, 6) # returns 120", "category": "Python"}, {"instruction": "Design a program to generate prime numbers between 1 and 50.", "input": "", "output": "# Program to print the prime numbers between 1 and 50\n \nfor num in range(1, 51):\n\n   # prime numbers are greater than 1\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:  \n           print(num)", "category": "Python"}, {"instruction": "Formulate an algorithm that helps you arrange a given set of numbers in ascending order.", "input": "[7, 4, 8, 9, 11]", "output": "1. Take two variables, say x and y. \n2. Assign x the value of the first element in the list and y the value of the second element.\n3. Compare x and y. \n4. If x > y, swap them.\n5. Now x is the smallest and move to the next element in the list. Repeat from step 2 with y and new element.\n6. At the end of the array, the list is sorted.", "category": "Python"}, {"instruction": "What is the command to delete all occurrences of the element \"5\" from a given Python array?", "input": "", "output": "arr = [3, 4, 5, 2, 5, 1, 5]\narr = [x for x in arr if x != 5]", "category": "Python"}, {"instruction": "Compute the square root of the number 25 and store the output in a variable called 'output'.", "input": "", "output": "import math\noutput = math.sqrt(25)", "category": "Python"}, {"instruction": "Create a function that takes a String and adds a period punctuation mark at the end.", "input": "phrase = \"I am having a good day\"", "output": "def add_period(phrase):\n    if not isinstance(phrase, str):\n        raise ValueError(\"phrase should be a String\")\n    return phrase + \".\"", "category": "Python"}, {"instruction": "Design a program to solve a 3x3 Sudoku puzzle.", "input": "", "output": "# A Backtracking program  \n# in Python to solve Sudoku problem  \n  \n# A Utility Function to print the Grid  \ndef print_grid(arr): \n    for i in range(9): \n        for j in range(9): \n            print(arr[i][j]), \n        print ('n') \n  \n# Function to Find the entry in the Grid that is still  not used \n# Searches the grid to find an entry that is still unassigned. If \n# found, the reference parameters row, col will be set the location \n# that is unassigned, and true is returned. If no unassigned entries \n# remain, false is returned. \n# 'l' is a list  variable that has been passed from the solve_sudoku function \n# to keep track of incrementation of Rows and Columns \ndef find_empty_location(arr,l): \n    for row in range(9): \n        for col in range(9): \n            if(arr[row][col]==0): \n                l[0]=row \n                l[1]=col \n                return True\n    return False\n  \n# Returns a boolean which indicates whether any assigned entry \n# in the specified row matches the given number. \ndef used_in_row(arr,row,num): \n    for i in range(9): \n        if(arr[row][i] == num): \n            return True\n    return False\n  \n# Returns a boolean which indicates whether any assigned entry \n# in the specified column matches the given number. \ndef used_in_col(arr,col,num): \n    for i in range(9): \n        if(arr[i][col] == num): \n            return True\n    return False\n  \n# Returns a boolean which indicates whether any assigned entry \n# within the specified 3x3 box matches the given number \ndef used_in_box(arr,row,col,num): \n    for i in range(3): \n        for j in range(3): \n            if(arr[i+row][j+col] == num): \n                return True\n    return False\n  \n# Checks whether it will be legal to assign num to the given row,col \n# Returns a boolean which indicates whether it will be legal to assign \n# num to the given row,col location. \ndef check_location_is_safe(arr,row,col,num): \n      \n    # Check if 'num' is not already placed in current row, \n    # current column and current 3x3 box \n    return not used_in_row(arr,row,num) and not used_in_col(arr,col,num) and not used_in_box(arr,row - row%3,col - col%3,num) \n  \n# Takes a partially filled-in grid and attempts to assign values to \n# all unassigned locations in such a way to meet the requirements \n# for Sudoku solution (non-duplication across rows, columns, and boxes) \ndef solve_sudoku(arr): \n      \n    # 'l' is a list variable that keeps the record of row and col in find_empty_location Function     \n    l=[0,0] \n      \n    # If there is no unassigned location, we are done     \n    if(not find_empty_location(arr,l)): \n        return True\n      \n    # Assigning list values to row and col that we got from the above Function  \n    row=l[0] \n    col=l[1] \n      \n    # consider digits 1 to 9 \n    for num in range(1,10): \n          \n        # if looks promising \n        if(check_location_is_safe(arr,row,col,num)): \n              \n            # make tentative assignment \n            arr[row][col]=num \n  \n            # return, if success, ya! \n            if(solve_sudoku(arr)): \n                return True\n  \n            # failure, unmake & try again \n            arr[row][col] = 0\n              \n    # this triggers backtracking         \n    return False \n  \n# Driver main function to test above functions \nif __name__==\"__main__\": \n      \n    # creating a 2D array for the grid \n    grid=[[0 for x in range(9)]for y in range(9)] \n      \n    # assigning values to the grid \n    grid=[[3,0,6,5,0,8,4,0,0], \n          [5,2,0,0,0,0,0,0,0], \n          [0,8,7,0,0,0,0,3,1], \n          [0,0,3,0,1,0,0,8,0], \n          [9,0,0,8,6,3,0,0,5], \n          [0,5,0,0,9,0,6,0,0], \n          [1,3,0,0,0,0,2,5,0], \n          [0,0,0,0,0,0,0,7,4], \n          [0,0,5,2,0,6,3,0,0]] \n      \n    # if sucess print the grid \n    if(solve_sudoku(grid)): \n        print_grid(grid)\n    else: \n        print \"No solution exists\"", "category": "Python"}, {"instruction": "Offer a solution for converting a bank of binary strings, represented as an array, to Decimal numbers.", "input": "", "output": "def binaryToDecimal(binary): \n    # to store decimal number \n    decimal, i = 0, 0\n    while(binary != 0): \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i = i + 1\n    return decimal", "category": "Python"}, {"instruction": "Design a program to search for a given string within an array of strings.", "input": "arr = ['hello', 'world', 'how', 'are', 'you']\ngiven_str = 'how'", "output": "def search(arr, given_str):\n    for item in arr:\n        if item == given_str:\n            return True\n    return False", "category": "Python"}, {"instruction": "Suppose you are given a array of 0s,1s and 2s . Write a program to sort the given input array.", "input": "", "output": "def sortArray(arr): \n      \n    # loop to run for every element in the array \n    for i in range(len(arr)): \n          \n        # loop to run for elements till the sorted part \n        for j in range(0, len(arr)-i-1): \n  \n            # If a element is found to be greater than its next element then swap them \n            if arr[j] == 2 and arr[j+1] in [0,1]: \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n            elif arr[j] == 1 and arr[j+1] == 0: \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n                  \n    return arr", "category": "Python"}, {"instruction": "Write a function to compare two strings. The function should return true if the strings are equal and false if the strings are not equal.", "input": "string_1 = \"Hello\"\nstring_2 = \"World\"", "output": "def compare_strings(string_1, string_2):\n if string_1 == string_2:\n    return True\n else:\n    return False", "category": "Python"}, {"instruction": "Create a program in Python that sorts the following list and prints the sorted version of the list.", "input": "mylist = [1, 5, 9, 2, 6, 8]", "output": "mylist = [1, 5, 9, 2, 6, 8]\nmylist.sort()\nprint(mylist)", "category": "Python"}, {"instruction": "Create a machine learning model to predict a binary class.", "input": "", "output": "# import the necessary libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# preprocess the data\ndf = pd.read_csv('data.csv')\nX = df.drop('target', axis=1)\ny = df['target']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# train the model\nlr = LogisticRegression().fit(X_train, y_train)\n\n# evaluate the model\ntrain_score = lr.score(X_train, y_train)\ntest_score = lr.score(X_test, y_test)\nprint(f\"Train score: {train_score}\")\nprint(f\"Test score: {test_score}\")", "category": "Python"}, {"instruction": "Inspect the given code and find any possible bugs.", "input": "def find_sum(lst):\n    \"\"\"Return the sum of a given list of numbers.\"\"\"\n    res = 0\n    for x in list:\n        res += x\n    return res", "output": "def find_sum(lst):\n    \"\"\"Return the sum of a given list of numbers.\"\"\"\n    res = 0\n    for x in lst:\n        res += x\n    return res # was missing, was iterating over list instead of lst.", "category": "Python"}, {"instruction": "Create a function in Python that takes two lists as arguments and returns a dictionary with elements of the first list as keys and elements of the second list as values.", "input": "list1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]", "output": "def zip_lists(list1, list2):\n  zipped_dict = {}\n  for k, v in zip(list1, list2):\n    zipped_dict[k] = v\n  return zipped_dict\n\nprint(zip_lists(list1, list2))", "category": "Python"}, {"instruction": "Explain the use of a for loop in programming and when you would use it.", "input": "", "output": "A for loop is a type of loop used in programming to execute a set of code multiple times. For loops use an iterable object to iterate over a sequence of statements, such as a list or a string. For loops are typically used to traverse through a sequence of elements, perform a set of calculations or operations on each element, and once the operations are complete, move on to the next element until the list has been exhausted. For loops can also be used to execute a set of statements a certain number of times, or while a certain condition is true. One example would be iterating through a list of numbers and printing their sum to the console. Another example would be running a loop until a certain value is reached or exceeded, such as in calculating the factorial of a number.", "category": "Python"}, {"instruction": "A given array contains the numbers 1, 5, 9 and 13. Write a function to find out if 15 is present in the array or not.", "input": "array = [1, 5, 9, 13]", "output": "def findNumber(array):\n    return 15 in array", "category": "Python"}, {"instruction": "Develop a function in Python to delete the duplicates of a given string.", "input": "string = 'Hello World!'", "output": "def deleteDuplicates(string):\n    unique_string = ''\n    for i in string:\n        if i not in unique_string:\n            unique_string += i\n    return unique_string", "category": "Python"}, {"instruction": "Suppose you have a dictionary containing the records of some student marks. Write a Python program to calculate the average marks of all the students.", "input": "student_mark_dict = {\n    'John': [50, 70, 60],\n    'Harry': [20, 60, 80],\n    'Tom': [90, 70, 80] \n}", "output": "def averageMarks(student_mark_dict):\n    total = 0\n    total_marks = 0\n    for key, value in student_mark_dict.items():\n        total += sum(value)\n        total_marks += len(value)\n        \n    return total/total_marks", "category": "Python"}, {"instruction": "Develop a Python function to calculate a Fibonacci number based on a given index.", "input": "", "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n        \n    elif n==1: \n        return 0\n    \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)", "category": "Python"}, {"instruction": "Create a program in Python that takes two numbers as input and prints the result of the multiplication of those numbers.", "input": "num_1 = 10\nnum_2 = 15", "output": "num_1 = 10\nnum_2 = 15\nprint(num_1 * num_2)", "category": "Python"}, {"instruction": "Write a function to remove a given element from an array of integers.", "input": "arr = [2, 3, 4, 5, 6]\nremove_element = 4", "output": "def remove_element(arr, remove_element):\n    new_arr = []\n    for item in arr:\n        if item != remove_element: \n            new_arr.append(item)\n    return new_arr", "category": "Python"}, {"instruction": "Write Python code to group list elements into sublists of particular length.", "input": "[1,2,3,4,5,6,7,8]", "output": "def group_by_length(arr, k): \n\tn = len(arr)\n\tgroups = [arr[i:i+k] for i in range(0, n, k)] \n\treturn groups\n\na = [1,2,3,4,5,6,7,8] \nk = 3\nprint(group_by_length(a, k))", "category": "Python"}, {"instruction": "Convert a number from decimal to octal in Python.", "input": "number = 109", "output": "decimal  = 109    \noctal = format(decimal, 'o')  \n\nprint(\"Decimal:\", decimal)\nprint(\"Octal:\", octal)", "category": "Python"}, {"instruction": "Implement a Python class that prints a given given text when a certain condition is satisfied.", "input": "Print a text \"Endless fun\" when the numbers given in a list equals to 10", "output": "class MyClass:\n    def __init__(self, given_list):\n        self.given_list = given_list\n    \n    def check_equal_to_10(self):\n        if len(self.given_list) == 0:\n            return False\n        for num in self.given_list:\n            if num != 10:\n                return False\n        print(\"Endless fun\")\n        return True", "category": "Python"}, {"instruction": "Perform an insertion sort on the given list.", "input": "List: [9, 5, 4, 8, 6]", "output": "def insertionSort(arr):\n   # Traverse through 1 to len(arr) \n   for i in range(1, len(arr)): \n  \n     key = arr[i] \n  \n     # Move elements of arr[0..i-1], that are \n     # greater than key, to one position ahead \n     # of their current position\n     j = i-1\n     while j >= 0 and key < arr[j] : \n             arr[j + 1] = arr[j] \n             j -= 1\n     arr[j + 1] = key \n  \n  \n# Driver code\narr = [9, 5, 4, 8, 6]\ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"% d\" % arr[i])\n# Output: Sorted array is: 4 5 6 8 9", "category": "Python"}, {"instruction": "Generate a list of 10 numbers in Python where each number is a multiple of 7 and greater than 40", "input": "", "output": "[x for x in range(41, 100) if x % 7 == 0]\n# Output: [42, 49, 56, 63, 70, 77, 84, 91, 98]", "category": "Python"}, {"instruction": "Edit the code given below so it can compute the sum of two numeric inputs.", "input": "def add_two_numbers(x, y):\n\t# TODO: Write code that computes and returns the sum of two numeric inputs", "output": "def add_two_numbers(x, y):\n  # Compute and return the sum of two numeric inputs\n  return x + y", "category": "Python"}, {"instruction": "Create a code to update the values of an array elements with their cube.", "input": "[1, 2, 3, 4, 5]", "output": "def cubeArrayElements(arr): \n  \n    for i in range(0, len(arr)): \n        arr[i] = arr[i]*arr[i]*arr[i] \n    \n    return arr", "category": "Python"}, {"instruction": "Write a code snippet to find the most frequent number greater than 100 from a list of numbers.", "input": "[102, 130, 102, 140, 150, 60, 70, 102, 140]", "output": "def most_frequent(nums):\n    # Initialize a dictionary to count the frequency \n    # of each number in the list\n    count = {}\n\n    # Iterate through the list and increase the \n    # count of each number in the dictionary\n    for num in nums:\n        if num> 100:\n            if num not in count:\n                count[num] = 1\n            else:\n                count[num] += 1\n    \n    # Find the most frequent number\n    max_count = 0\n    most_frequent_num = 0\n    for k,v in count.items():\n        if v> max_count:\n            most_frequent_num = k\n            max_count = v\n    return most_frequent_num", "category": "Python"}, {"instruction": "Write a code to find elements in an array that is divisible by a given number.", "input": "arr = [5, 15, 20, 25, 30]", "output": "# Function to find elements in an array that is \n# divisible by a given number \ndef isDivisible(arr, num): \n  \n    # Stores result \n    res = [] \n  \n    # Iterate over all elements \n    for i in range(0,len(arr)): \n  \n        # If remainder is 0 then add elements \n        # to result \n        if (arr[i] % num == 0): \n            res.append(arr[i]) \n  \n    return res \n  \n# Driver code \narr = [5, 15, 20, 25, 30] \nnum = 5\n  \n# Print result \nprint(isDivisible(arr,num))", "category": "Python"}, {"instruction": "Parse and extract the dates from a given text.", "input": "The conference will be held on Wednesday, June 16th, 2021", "output": "import re\n\ntext = \"The conference will be held on Wednesday, June 16th, 2021\"\n\n# Extract dates\ndates = re.findall(r'\\d{1,2}[-/.]\\d{1,2}[-/.]\\d{2,4}',text) \n\n# Print the dates\nfor date in dates:\n    print(date)\n    \n# Output\n# 06/16/2021", "category": "Python"}, {"instruction": "Create a new class in Python that extends the existing class named 'Base'.", "input": "", "output": "Class NewClass (Base):\n  def __init__(self):\n    super().__init__()", "category": "Python"}, {"instruction": "Create a pseudocode to solve the FizzBuzz problem.", "input": "", "output": "```\n#For numbers from 1 through 100\nfor i from 1 to 100:\n    #If the number is divisible by both 3 and 5\n    if i is divisible by 3 and 5:\n        #Print FizzBuzz\n        print \"FizzBuzz\"\n    #If the number is divisible only by 3\n    elif i is divisible by 3:\n        #Print Fizz\n        print \"Fizz\"\n    #If the number is divisible only by 5\n    elif i is divisible by 5:\n        #Print Buzz\n        print \"Buzz\"\n    #Otherwise\n    else: \n        #Print the number\n        print i\n```", "category": "Python"}, {"instruction": "Explain different types of sorting algorithms in brief.", "input": "", "output": "There are several types of sorting algorithms which can be used to sort a list of items. The most common ones are Bubble Sort, Insertion Sort, Selection Sort, Quick Sort, Merge Sort and Heap Sort. \n\nBubble Sort works by repeatedly swapping adjacent elements if they are in the wrong order. Insertion Sort works by inserting elements one by one into the correct sorted position. Selection Sort works by repeatedly selecting the minimum (or maximum) element of the unsorted part and placing it at the beginning of the sorted part. Quick Sort works by selecting a pivot element and partitioning the array around the pivot in order to find the correct position of the pivot. Merge Sort works by dividing the array into two halves, sorting each half recursively, and then merging them back together. Heap Sort works by first creating a Max Heap from the list, and then continuously extracting the maximum element from the heap until the list is sorted.", "category": "Python"}, {"instruction": "Create an example of data visualization using Python's matplotlib library.", "input": "", "output": "\"\"\"\nExample of data visualization using Python's matplotlib library\n\"\"\"  \nimport matplotlib.pyplot as plt\n\n#Create two datasets\nx_values = [1, 2, 3, 4, 5]\ny_values = [1, 4, 9, 16, 25]\n\n#Plot the data\nplt.plot(x_values, y_values)\n\n#Label the axes\nplt.xlabel('x values')\nplt.ylabel('y values')\n\n#Show the plot\nplt.show()", "category": "Python"}, {"instruction": "Construct a function to check for an anagram in Python.", "input": "", "output": "def anagram_check(s1, s2):\n    s1 = s1.replace(' ','').lower()\n    s2 = s2.replace(' ','').lower()\n    \n    if(sort(s1) == sort(s2)):\n        return True\n    \n    return False\n    \ndef sort(s):\n    return sorted(s)", "category": "Python"}, {"instruction": "Update the given Python program to reverse a string.", "input": "def reverse_string(s): \n    #insert code here\n    return s", "output": "def reverse_string(s):\n    return s[::-1]", "category": "Python"}, {"instruction": "Construct a function to convert currency amount from USD to INR.", "input": "Current USD to INR ratio: 1 USD = 73.20 INR", "output": "def currency_convert(amount):\n   \n    #Convert amount from USD to INR\n    inr = amount * 73.20 \n    \n    #return the converted currency\n    return inr\n  \n#Test\namount = int(input(\"Enter amount of currency in USD:\")) \n  \nprint(\"The amount in INR:\",currency_convert(amount))", "category": "Python"}, {"instruction": "Reverse the following list of numbers.", "input": "[1, 2, 3, 4]", "output": "def reverse_list(nums):\n    return nums[::-1]\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4]\n    reversed_list = reverse_list(numbers)\n    print(reversed_list)", "category": "Python"}, {"instruction": "Write a function that takes a list of strings and counts the number of each string that contains the letter \"a\".", "input": "['foo', 'bar', 'baz']", "output": "def count_words_with_letter_a(arr):\n    count = 0\n    for s in arr:\n        if 'a' in s:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    words = ['foo', 'bar', 'baz']\n    count = count_words_with_letter_a(words)\n    print(count)", "category": "Python"}, {"instruction": "Edit the following code to make it generate a random number between 1 and 10.", "input": "import random\n\ndef generate_random_number():\n    return random.randint(0, 11)", "output": "import random\n\ndef generate_random_number():\n    return random.randint(1, 10)", "category": "Python"}, {"instruction": "Write a function that takes a numerical parameter and returns True if it is positive and False if it is negative.", "input": "", "output": "def is_positive(num):\n    if num > 0:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    num = 5\n    result = is_positive(num)\n    print(result)", "category": "Python"}, {"instruction": "Modify the following function to only take numbers greater than 10.", "input": "def filter(numbers):\n    return [n for n in numbers if n % 2 == 0]\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "output": "def filter(numbers):\n    return [n for n in numbers if n > 10 and n % 2 == 0]\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Write a function that takes two strings as parameters and returns whether they are an anagram of each other or not.", "input": "string1 = \"abcde\"\n\nstring2 = \"edcba\"", "output": "def is_anagram(string1, string2):\n    if sorted(string1) == sorted(string2):\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    string1 = \"abcde\"\n    string2 = \"edcba\"\n\n    result = is_anagram(string1, string2)\n    print(result)", "category": "Python"}, {"instruction": "Define a class named 'Employee' that stores the ID, name, and age of a person.", "input": "", "output": "class Employee:\n    def __init__(self, ID, name, age):\n        self.ID = ID\n        self.name = name\n        self.age = age\n \n    def get_info(self):\n        return (self.ID, self.name, self.age)", "category": "Python"}, {"instruction": "Create a list comprehension that finds all elements that are divisible by 3 in a given list.", "input": "numbers =[1, 5, 8, 10, 15, 20]", "output": "def divisible_by_three(numbers):\n    res = [num for num in numbers if num % 3 == 0]\n    return res", "category": "Python"}, {"instruction": "How would you define a class in Python to represent a college student?", "input": "", "output": "class CollegeStudent:\n    def __init__(self, name, year, major):\n        self.name=name\n        self.year=year\n        self.major=major\n        \n    def get_name(self): \n       return self.name \n   \n    def get_year(self): \n       return self.year \n       \n    def get_major(self): \n       return self.major", "category": "Python"}, {"instruction": "Use Tensorflow to classify a given input dataset of animals as cats or dogs.", "input": "Input dataset contains images of cats and dogs.", "output": "import tensorflow as tf \n#get the dataset\ndataset = load_dataset()\n\n# create the input pipeline\niterator = dataset.make_initializable_iterator()\nnext_element = iterator.get_next()\n\n#build the model\nmodel=Sequential()\n#input layer\nmodel.add(Conv2D(32,(3,3), activation='relu',input_shape=(input_width,input_height,input_channels)))\n#max pooling\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n#flatten\nmodel.add(Flatten)\n#hidden layer\nmodel.add(Dense(64,activation='relu'))\n#output layer\nmodel.add(Dense(2,activation='sigmoid'))\n\n#train model\nmodel.compile(optimizer='SGD', Loss=\"binary_crossentropy\",metrics=['accuracy'])\nmodel.fit(dataset,epochs=5)", "category": "Python"}, {"instruction": "Extract the first 3 characters of an input string using Python.", "input": "String = \"Hello World!\"", "output": "string = \"Hello World!\"\n\n#Extract first 3 characters \nfirst_3_characters = string[0:3]\n\nprint(first_3_characters)", "category": "Python"}, {"instruction": "Implement a function in Python that calculates the median of a given input array.", "input": "[5, 2, 6, 8, 10]", "output": "def calculateMedian(arr):\n    n = len(arr)\n    arr.sort()\n \n    if n % 2 == 0:\n        median1 = arr[n//2]\n        median2 = arr[n//2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = arr[n // 2]\n \n    return median\n \nprint(\"Median is: \" + str(calculateMedian([5, 2, 6, 8, 10])))", "category": "Python"}, {"instruction": "You are given a matrix. Construct a for loop to check if any of the elements in the matrix is 0.", "input": "matrix = [[1,2,3],[4,0,6],[7,8,9]]", "output": "def check_zero(matrix):\n    for row in matrix:\n        for num in row:\n            if num == 0:\n                return True\n    return False\n\nprint(check_zero(matrix))", "category": "Python"}, {"instruction": "Generate a random password that complies with certain conditions.", "input": "", "output": "import random\nimport string\n\ndef generate_password(length):\n    password = ''.join(random.choice(string.ascii_letters + string.digits) for i in range(length))\n    if any(char.islower() for char in password) and any(char.isupper() for char in password) and any(char.isdigit() for char in password):\n        return password\n\ngenerated_password = generate_password(8)\nprint(generated_password)", "category": "Python"}, {"instruction": "You are given a list of numbers. Construct a for loop to filter out the odd numbers from the list.", "input": "arr = [1,2,3,4,5]", "output": "odds = []\nfor num in arr:\n  if num % 2 == 1:\n    odds.append(num)\nprint(odds)", "category": "Python"}, {"instruction": "Create a function in Python that takes one parameter, a list, and outputs the list in reverse.", "input": "myList = [1, 2, 3, 4]", "output": "def reverseList (list): \n  list.reverse() \n  return list\n  \nreverseList(myList) # Returns [4, 3, 2, 1]", "category": "Python"}, {"instruction": "Create a function to classify the following sentence into \"positive\" or \"negative\".", "input": "The movie was bad", "output": "def classify_sentence(sentence):\n  if \"bad\" in sentence:\n    return \"negative\"\n  else:\n    return \"positive\"\n\n# Driver code\nsentence = \"The movie was bad\"\nprint(\"Sentence is classified as:\", classify_sentence(sentence))\n\nOutput: Sentence is classified as: negative", "category": "Python"}, {"instruction": "Edit this code to fix the bug in the program", "input": "def print_longest_word(words):\n longest_word = \"\"\n for word in words:\n if len(word) > len(longest_word):\n longest_word = word\n print(longest_word)\nwords = [\"hello\", \"cat\"]\nprint_longest_word(words)", "output": "def print_longest_word(words):\n longest_word = \"\"\n for word in words:\n if len(word) > len(longest_word):\n longest_word = word\n print(longest_word)\nwords = [\"hello\", \"cat\"]\nprint_longest_word(words)\n\nif len(words) > 0:\n longest_word = words[0]\n for word in words:\n if len(word) > len(longest_word):\n longest_word = word\n print(longest_word)", "category": "Python"}, {"instruction": "Create a machine learning model in Python to predict the total surface area of a cube given its side length", "input": "side_length = 3", "output": "import numpy as np\nfrom sklearn.linear_model import LinearRegression \n\n# Data\nX_train = np.array([1, 2, 3, 4, 5]).reshape(-1, 1)\ny_train = np.array([6, 12, 18, 24, 30])\n\n# Model \nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Prediction\nside_length = 3 \npred = model.predict([[side_length]])\nprint('The surface area for a cube with side length %.2f is %.2f' % (side_length, pred[0]))", "category": "Python"}, {"instruction": "Suggest a function to convert a given tuple of strings into a dictionary.", "input": "", "output": "def tuple_to_dict(tup):\n    return {tup[i] : tup[i+1] for i in range(0, len(tup), 2)}", "category": "Python"}, {"instruction": "Construct a loop through this string of characters to check for the letter \u2018x\u2019. Report what the loop index was when the letter \u2018x\u2019 was found.", "input": "string = \"abcedfghijx\"", "output": "string = \"abcedfghijx\"\n\nfor idx, char in enumerate(string):\n    if char == 'x':\n        print(f\"The loop index was {idx} when the letter 'x' was found.\")\n        break", "category": "Python"}, {"instruction": "Write a code in Python that will take a string as input and return it with the words in reverse order.", "input": "", "output": "def reverseWords(s):\n    words = s.split(\" \")\n    words.reverse()\n    return \" \".join(words)", "category": "Python"}, {"instruction": "An array of integers is given, write a function to print the second largest element of the array.", "input": "", "output": "def secondLargest(arr):\n    first = 0\n    second = 0\n    for i in range(len(arr)):\n        if arr[i] > first:\n            second, first = first, arr[i]\n        elif (arr[i] > second and arr[i] < first):\n            second = arr[i]\n    return second", "category": "Python"}, {"instruction": "Create a function in Python that will return the maximum difference between any two numbers present in an array.", "input": "", "output": "def max_difference(arr):\n    difference = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[j] - arr[i] > difference:\n                difference = arr[j] - arr[i]\n    return difference", "category": "Python"}, {"instruction": "Given a list of numbers and a target, write an algorithm to determine if the list contains a subset that sums up to the target.", "input": "", "output": "def subsetsum(arr, target):\n    n = len(arr)\n    dp = [[False for x in range(target + 1)] for y in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n+1):\n        for j in range(target + 1):\n            dp[i][j] = dp[i-1][j] or (arr[i-1] <= j and dp[i-1][j - arr[i-1]])\n    return dp[n][target]", "category": "Python"}, {"instruction": "Generate a list of all the divisors of a given number.", "input": "", "output": "def generateDivisors(n): \n    divisors = [] \n    for i in range(1, n + 1): \n        if n % i == 0: \n            divisors.append(i) \n              \n    return divisors", "category": "Python"}, {"instruction": "Implement a quick sort algorithm for a given array list.", "input": "", "output": "def quick_sort(A):\n    quick_sort_helper(A, 0, len(A) - 1)\n\ndef quick_sort_helper(A, start, end):\n    if start < end:\n        p_index = partition_list(A, start, end)\n        quick_sort_helper(A, start, p_index - 1)\n        quick_sort_helper(A, p_index + 1, end)\n\ndef partition_list(A, start, end):\n    pivot = A[end]\n    p_index = start\n    for i in range(start, end):\n        if A[i] <= pivot:\n            A[i], A[p_index] = A[p_index], A[i]\n            p_index += 1\n    A[p_index], A[end] = A[end] , A[p_index]\n    return p_index", "category": "Python"}, {"instruction": "Take the following pandas DataFrame, and convert it to a NumPy array.", "input": "import pandas as pd\n\ndf = pd.DataFrame([[1,2,3], [4,5,6], [7,8,9]])", "output": "import numpy as np\n\ndf_array = np.array(df)", "category": "Python"}, {"instruction": "Create a new list of strings of length greater than 5 from another list", "input": "[\"apple\", \"banana\", \"carrot\"]", "output": "long_words = [word for word in [\"apple\", \"banana\", \"carrot\"] if len(word) > 5]", "category": "Python"}, {"instruction": "Design a stack class for a language of your choice", "input": "", "output": "class Stack:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, item):\n        self.stack.append(item)\n\n    def pop(self):\n        self.stack.pop()\n\n    def peek(self):\n        return self.stack[-1]\n\n    def is_empty(self):\n        return not self.stack", "category": "Python"}, {"instruction": "Generate a data frame with two columns: 'product' and 'price'", "input": "product1: Burger\nprice1: $6\nproduct2: Fries\nprice2: $2", "output": "import pandas as pd\n\ndata = {'product':['Burger', 'Fries'], 'price':[6, 2]}\n\ndf = pd.DataFrame(data)\n\nprint(df)", "category": "Python"}, {"instruction": "Provide an example of using Python's range() function to generate a range of numbers.", "input": "", "output": "# Print numbers from 0 to 9\nfor x in range(10):\n  print(x)\n\n# Print numbers from 3 to 8\nfor x in range(3, 9):\n  print(x)\n\n# Print numbers from 3 to 8 incrementing by 2\nfor x in range(3, 9, 2):\n  print(x)", "category": "Python"}, {"instruction": "Given an integer, calculate the sum of the numbers till that number.", "input": "num = 7", "output": "# set the sum to 0\nsum = 0\n\n# loop from 1 to 7\nfor i in range(1, num+1):\n   # add each number to \"sum\"\n   sum += i\n\n# print the sum\nprint(sum)\n28", "category": "Python"}, {"instruction": "Write a function in Python to iterate over the items in a dictionary.", "input": "dict = {'Apple':1, 'Orange':2, 'Mango':3}", "output": "def iterate_dictionary(dict): \n  for key in dict: \n    print(key, ':', dict[key]) \n\niterate_dictionary(dict)", "category": "Python"}, {"instruction": "Construct a while loop in Python to print all numbers less or equal to 10.", "input": "", "output": "i = 1\n\nwhile(i <= 10):\n  print(i)\n  i += 1", "category": "Python"}, {"instruction": "Reverse the words of a given sentence but keep the order of the words intact.", "input": "I am a programmer", "output": "def reverse_words(sentence):\n    words = sentence.split(' ')\n    reversed_words = [word[::-1] for word in words]\n    return ' '.join(reversed_words)\n\nprint(reverse_words('I am a programmer')) # Outputs: \"I ma a remmargorp\"", "category": "Python"}, {"instruction": "Write a Python function to check whether a string is a palindrome or not, ignoring spaces and special characters.", "input": "", "output": "def is_palindrome_ignore_space(word):\n    filtered_word = [i.lower() for i in word if i.isalpha()] \n    return filtered_word == filtered_word[::-1]", "category": "Python"}, {"instruction": "Create a program to convert a bi-dimensional array into a single array.", "input": "[[1, 2], [3, 4]]", "output": "def flatten_array(array):\nresult = []\nfor sub_array in array:\n    result.extend(sub_array)\nreturn result\n\nprint(flatten_array([[1, 2], [3, 4]])) # Outputs: [1,2,3,4]", "category": "Python"}, {"instruction": "Write a function that given a list of unique integers, returns the sum of the non-duplicated integer elements.", "input": "[1, 2, 2, 3, 4, 5, 6]", "output": "def sumNonDuplicates(arr):\n    sum = 0\n    for num in arr:\n        if arr.count(num) == 1:\n            sum += num\n    return sum", "category": "Python"}, {"instruction": "Given a list of words, write a Python function to print the frequency of occurrence of each word in the list.", "input": "['foo', 'bar', 'foo', 'baz', 'bar']", "output": "def word_frequency(words):\n    freq = {}\n    for word in words:\n        if word not in freq:\n            freq[word] = 0\n        freq[word] += 1    \n    for word, count in freq.items():\n        print('{}: {}'.format(word, count))\n        \nword_frequency(['foo', 'bar', 'foo', 'baz', 'bar'])", "category": "Python"}, {"instruction": "Design an API to pull company data from an external source.", "input": "", "output": "\"\"\"\nAPI to pull company data from an external source.\n\nParameters:\n1. company_id: Unique id of the company\n2. fields: List of strings of fields to include in the response\n\nReturns:\nA JSON containing the specified fields from the external source.\n\"\"\"\n\ndef get_company_data(company_id, fields):\n    # use an external API to fetch the data\n    response = requests.get(f\"http://example.com/api/company?id={company_id}\")\n    data = response.json()\n    response_data = {}\n    for field in fields:\n        response_data[field] = data[field]\n    return response_data", "category": "Python"}, {"instruction": "Create a function to convert a given quantiy of money from one currency to another.", "input": "amount: 10\nfrom_currency: USD\nto_currency: GBP", "output": "def convert_currency(amount, from_currency, to_currency):\n    # use a free online currency conversion API like Fixer\n    # to convert an amount from one currency to another\n    response = requests.get(f\"http://data.fixer.io/api/convert?access_key=<your_key>&from={from_currency}&to={to_currency}&amount={amount}\")\n    return response.json()[\"result\"]", "category": "Python"}, {"instruction": "Using a hash table, construct a program to find all of the pairs of an array whose sum is equal to a given target", "input": "arr = [2,7,5,3,1,9]\ntarget = 8", "output": "# Using a hash table, construct a program to find all of the pairs of an array whose sum is equal to a given target\n\ndef find_pairs(arr, target):\n    seen = {}\n    pairs = []\n    for num in arr:\n        if target-num in seen:\n            pairs.append((num, target-num))\n        seen[num] = True\n    return pairs\n\nprint(find_pairs(arr, target)) # [(2, 6), (1, 7)]", "category": "Python"}, {"instruction": "Replace every character in a given string with its corresponding ASCII code", "input": "string = \"Hello\"", "output": "# Replace every character in a given string with its corresponding ASCII code\n\ndef encode_string(string):\n    result = \"\"\n    for char in string:\n        result += str(ord(char))\n    return result\n\nprint(encode_string(string)) # \"72 101 108 108 111\"", "category": "Python"}, {"instruction": "Create a function to allocate resources to parties", "input": "data = [[\"Joe\",5],[\"John\",3],[\"Mary\",2]]", "output": "# Create a function to allocate resources to parties\n\ndef allocate(data):\n    total = 0\n    for item in data: \n        total += item[1] \n    allocation = [i[1]/total for i in data] \n    return allocation\n\nprint(allocate(data)) # [0.5, 0.3, 0.2]", "category": "Python"}, {"instruction": "Print all unique combinations of an array of integers", "input": "nums = [1,2,3]", "output": "# Print all unique combinations of an array of integers\n\ndef all_combinations(nums):\n  result = [[]]\n  for num in nums:\n    temp_result = []\n    for res in result:\n      temp_result.append(res + [num])\n    result.extend(temp_result)\n  return result\n\nprint(all_combinations(nums)) # [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]", "category": "Python"}, {"instruction": "Develop an algorithm for bubble sorting.", "input": "[5, 2, 1, 8, 0, 9, 4]", "output": "#Function to sort an array using bubble sort\ndef bubbleSort(arr):\n  #Loop through all elements in the array\n  for i in range(len(arr)):\n    #Loop through all elements up to the one larger than the one at the current position\n    for j in range(0, len(arr)-i-1):\n      #Swap elements if necessary\n      if arr[j] > arr[j+1] :\n        arr[j], arr[j+1] = arr[j+1], arr[j]\n\n#Driver code\narr = [5,2,1,8,0,9,4]\nbubbleSort(arr)", "category": "Python"}, {"instruction": "Generate a Python code to calculate the compound interest.", "input": "Principal = 2000 \nRate of Interest = 0.09 \nTime = 5", "output": "# Python program to calculate compound interest \n\ndef compound_interest(principal, rate, time): \n\n    # Calculates compound interest \n    CI = principal * (pow((1 + rate / 100), time)) \n\n    print(\"Compound interest is\", CI) \n\n# Driver Code \ncompound_interest(2000, 0.09, 5)", "category": "Python"}, {"instruction": "Create an algorithm for counting the occurences of a specific character in a string.", "input": "String: \"GPT Learning\"\nCharacter: \"t\"", "output": "//Declare a variable to store the count \nint count = 0\n\n//Loop through the string\nfor i = 0 to (string length) { \n\n   //Check if the character matches the given one \n   if string[i] == character{ \n       //Increment the count \n       count++ \n   } \n\n} \n\n//Print out the count \nprint(count)", "category": "Python"}, {"instruction": "Generate pseudocode for a program that takes in an integer and prints out all the factors of the given integer.", "input": "int num = 18", "output": "//Pseudocode \n \n//Function to obtain the factors of given input\nfunction obtainFactors(int num){ \n\n //Variable to store the factors \n List factors = [] \n\n //Loop through all number less than the given input \n for i = 1 to num { \n\n    //Check if a particular number is a factor of the given input \n    if num % i == 0 { \n\n       //Add the number to the list of factors \n       factors.add(i) \n    } \n } \n \n //Print out the list of factors \n print(factors) \n}", "category": "Python"}, {"instruction": "Write a Python code snippet to generate a list of the first five powers of the number 2.", "input": "", "output": "[2**0, 2**1, 2**2, 2**3, 2**4]", "category": "Python"}, {"instruction": "Create a lambda function in Python that collects all the numbers between 0 and 10 that are divisible by 3.", "input": "", "output": "lambda x: [x for x in range(0, 11) if x % 3 == 0]", "category": "Python"}, {"instruction": "Create a python dictionary consisting of the names of the seven dwarfs and a list of their ages.", "input": "", "output": "\"\"\"\nCreate a python dictionary consisting of the names of the seven dwarfs and a list of their ages\n\"\"\"\n\ndwarfs = {\"Doc\": 84, \n          \"Grumpy\": 67,\n          \"Happy\": 76,\n          \"Sleepy\": 75,\n          \"Sneezy\": 71,\n          \"Dopey\": 76,\n          \"Bashful\": 70}\nprint(dwarfs)", "category": "Python"}, {"instruction": "Add 'excellent' as the last element in this list.", "input": "sports_list = ['soccer', 'rugby', 'hockey']", "output": "\"\"\"\nAdd 'excellent' as the last element in this list\n\"\"\"\n\nsports_list = ['soccer', 'rugby', 'hockey']\n\n# Add 'excellent' as the last element in this list\nsports_list.append('excellent')\nprint(sports_list)", "category": "Python"}, {"instruction": "Calculate the sum of the elements in this list.", "input": "my_list = [2,5,4,7,5]", "output": "\"\"\"\nCalculate the sum of the elements in this list\n\"\"\"\n\nmy_list = [2,5,4,7,5]\n\n# Calculate the sum of the elements in this list\ntotal = 0\nfor num in my_list:\n    total += num\n\nprint(total)", "category": "Python"}, {"instruction": "Format this list such that each element is in a new line.", "input": "list_of_numbers = [1,2, 3, 4, 5]", "output": "\"\"\"\nFormat this list such that each element is in a new line\n\"\"\"\n\nlist_of_numbers = [1,2, 3, 4, 5]\n\n# Format the list such that each element is in a new line\nfor num in list_of_numbers:\n    print(num)", "category": "Python"}, {"instruction": "Design a simple calculator program using a switch statement.", "input": "", "output": "\"\"\"\nDesign a simple calculator program using a switch statement\n\"\"\"\n\ndef calculator(operator, x, y):\n    switch = {\n        '+': x + y,\n        '-': x - y,\n        '*': x * y,\n        '/': x / y\n    }\n    return switch.get(operator, \"Invalid operator\")\n\nif __name__ == \"__main__\":\n    print(calculator('+', 2, 3))\n    print(calculator('*', 4, 2))\n    print(calculator('/', 6, 3))\n    print(calculator('&', 8, 2))", "category": "Python"}, {"instruction": "Write a function that takes a sentence and returns the reversed version of that sentence.", "input": "Hello, world!", "output": "\"\"\"\nWrite a function that takes a sentence and returns the reversed version of that sentence\n\"\"\"\n\ndef reverse_sentence(sentence):\n    word_list = sentence.split()\n    reversed_str = \" \".join(word_list[::-1])\n    return reversed_str\n\nif __name__ == \"__main__\":\n    print(reverse_sentence(\"Hello, world!\"))", "category": "Python"}, {"instruction": "Create a class called \"Vector\" with x and y coordinates.", "input": "", "output": "\"\"\"\nCreate a class called \"Vector\" with x and y coordinates\n\"\"\"\nclass Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nif __name__ == \"__main__\":\n    v = Vector(2, 3)\n    print (v.x, v.y)", "category": "Python"}, {"instruction": "Given a string, print all its permutations.", "input": "british", "output": "\"\"\"\nGiven a string, print all its permutations\n\"\"\"\ndef permute(string):\n    if len(string) == 1:\n        return string\n    permutations = []\n    for i,c in enumerate(string):\n        for perm in permute(string[:i]+string[i+1:]):\n            permutations.append(c+perm)\n    return permutations\n\nif __name__ == \"__main__\":\n    print (permute(\"british\"))", "category": "Python"}, {"instruction": "Create an algorithm that takes two numbers a and b and returns the largest number.", "input": "a = 5, b = 6", "output": "\"\"\"\nAn algorithm that takes two numbers a and b and returns the largest number\n\"\"\"\n\ndef get_largest_number(a, b):\n    if (a > b):\n        return a\n    else:\n        return b\n    \nif __name__ == \"__main__\":\n    print (get_largest_number(5, 6))", "category": "Python"}, {"instruction": "Find the two elements in a given array that sums up to the target number.", "input": "[1, 8, 10, 12], target = 18", "output": "def two_sum_elements(arr, target):\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return [arr[i], arr[j]]\n    return None\n\nprint(two_sum_elements([1, 8, 10, 12], 18)) # Outputs: [8, 10]", "category": "Python"}, {"instruction": "Using the \"for\" loop, print out all odd numbers from 1 to 10.", "input": "", "output": "for i in range(1, 11):\n    if i%2 != 0:\n        print(i)\n\n# Output: 1, 3, 5, 7, 9", "category": "Python"}, {"instruction": "Create a function that takes a single-level JSON object as an argument and prints out all keys with a value of type string.", "input": "{\n \"name\": \"John\",\n \"age\": 34,\n \"isMarried\": True \n}", "output": "def print_string_keys(json_object):\n  for key in json_object:\n      if isinstance(json_object[key], str):\n          print(key)", "category": "Python"}, {"instruction": "Write a function that takes a string and returns the number of substrings with at least k different characters", "input": "\"abacdc\"", "output": "def num_distinct_substrings(S, k):\n   n = len(S)\n   distinct_substrings = set()\n   for i in range(n):\n      for j in range(i+k, n+1):\n         distinct_substring = \"\".join(sorted(list(set(S[i:j]))))\n         distinct_substrings.add(distinct_substring)\n   return len(distinct_substrings)", "category": "Python"}, {"instruction": "Design an algorithm in Python for reversing a linked list.", "input": "", "output": "def reverse(head): \n    prev = None\n    curr = head \n    while(curr is not None): \n        next = curr.next\n        curr.next = prev \n        prev = curr \n        curr = next\n    head = prev \n    return head", "category": "Python"}, {"instruction": "Create a function to take in a given array, rotate it by one, so that the last element of the array is now the first element.", "input": "[1, 2, 3, 4, 5]", "output": "def rotate_list(arr):\n     length = len(arr) \n     temp = arr[length - 1] \n\n     for i in range(length-1, 0, -1):\n        arr[i] = arr[i-1] \n     arr[0] = temp \n      \n     return arr\n \nmy_list = [1, 2, 3, 4, 5]\nprint(rotate_list(my_list))  #Output: [5, 1, 2, 3, 4]", "category": "Python"}, {"instruction": "Create a sorting algorithm that sorts an array from lowest to highest numbers using the bubble sort approach.", "input": "[5, 1, 7, 3, 2]", "output": "def bubblesort(arr):\n    for i in range(len(arr)-1, 0, -1): \n        for j in range(i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\nmy_list = [5, 1, 7, 3, 2]  \nbubblesort(my_list) \nprint(my_list)\n# Output: [1, 2, 3, 5, 7]", "category": "Python"}, {"instruction": "Mix the given list of numbers in a random order", "input": "[5, 1, 7, 3, 2]", "output": "import random\n\nmy_list = [5, 1, 7, 3, 2]\nrandom.shuffle(my_list)\nprint(my_list)  #Output: [7, 2, 5, 1, 3]", "category": "Python"}, {"instruction": "Parse a JSON string and print its value.", "input": "data = '{\"name\":\"John\", \"age\":30}'", "output": "import json\n\ndata_dict = json.loads(data)\nname = data_dict[\"name\"]\nage = data_dict[\"age\"]\nprint(name)\nprint(age)", "category": "Python"}, {"instruction": "Create a loop in Python to print the fibonacci sequence of the given number.", "input": "n = 10", "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    print(\"Fibonacci Series:\")\n    for i in range(n): \n        print(a, end = \" \")\n        c = a + b \n        a = b \n        b = c\n\nfibonacci(n)", "category": "Python"}, {"instruction": "How would you add elements from one list to another list in Python?", "input": "", "output": "You can add elements from one list to another list in Python using the extend() method, which adds all elements of one list to another list.\n\nFor example, if you have the lists list1 and list2, you can add all elements of list2 to list1 with the following code:\n\nlist1.extend(list2)\n\nAlternatively, you can use the list.append() method to add each element of list2 to list1 one-by-one. For example:\n\nfor element in list2:\n    list1.append(element)", "category": "Python"}, {"instruction": "Compare the features of Mercurial and Git.", "input": "", "output": "Mercurial and Git are both distributed version control systems, meaning that all users have a complete copy of the repository. Both are extremely fast, with Git being slightly faster than Mercurial. Mercurial has a few advantages over Git, such as better merging capabilities, sophisticated branch management, and better backwards compatibility. Git, on the other hand, has some advantages over Mercurial in terms of speed and lightweight branching, as well as a larger user base. \n\nUltimately, the choice depends on the specific needs of the user or organisation.", "category": "Python"}, {"instruction": "Create an algorithm to determine the most common element in an array", "input": "[2, 3, 5, 3, 7, 2, 8, 1, 3]", "output": "def most_common(arr):\n    counts = {}\n    for i in arr:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    \n    max_count = 0\n    max_item = None\n    for item, count in counts.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    return max_item", "category": "Python"}, {"instruction": "Create a function to calculate the number of different ways to climb n stairs", "input": "", "output": "def count_ways(n): \n    if n==1 or n==0: \n        return 1\n    elif n==2: \n        return 2\n    else: \n        return count_ways(n-1) + count_ways(n-2) + count_ways(n-3)", "category": "Python"}, {"instruction": "Create a function that finds the highest peak in an array of elevation data.", "input": "[9, 10, 12, 15, 7, 8, 11]", "output": "def find_peak(arr):\n    max_h = arr[0]\n    max_i = 0\n    # traverse the array\n    for i in range(len(arr)):\n        if arr[i] > max_h:\n            max_h = arr[i]\n            max_i = i \n    return max_h, max_i", "category": "Python"}, {"instruction": "Convert the Python Dictionary given below into a valid JSON", "input": "{\n    \"firstName\":  \"John\",\n    \"lastName\":  \"Doe\",\n    \"age\":  23\n}", "output": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"age\": 23\n}", "category": "Python"}, {"instruction": "Write a function to generate Fibonacci numbers in Python.", "input": "", "output": "def fibonacci(num):\n  fib_list = [0, 1]\n  if num == 0:\n    return []\n  elif num == 1:\n    return [0]\n  else:\n    for _ in range(2, num):\n      nxt_num = fib_list[-1] + fib_list[-2]\n      fib_list.append(nxt_num)\n    return fib_list", "category": "Python"}, {"instruction": "Create a function to calculate the volume of the given 3D shape.", "input": "type: \"cube\"\nside: 6", "output": "def calculate_volume(shape, side):\n  if shape == \"cube\":\n    return side ** 3", "category": "Python"}, {"instruction": "How does dynamic programming work?", "input": "", "output": "Dynamic programming is a way of solving problems by breaking them down into a collection of smaller subproblems. It works by storing solutions to subproblems so that each subproblem is only solved once. This allows for faster computation and efficient memory usage, as solutions are stored and reused instead of having to be recalculated every time they are needed. This approach is useful in situations where a given problem can be divided into multiple, overlapping subproblems, such as in optimization problems.", "category": "Python"}, {"instruction": "Write a Python function to find the maximum and minimum numbers from a sequence of numbers.", "input": "", "output": "def min_max(data):\n    min_value = min(data)\n    max_value = max(data)\n    return min_value, max_value", "category": "Python"}, {"instruction": "Add a method called \u201cisEmpty\u201d to the following Python class to check if the list is empty or not.", "input": "class List:\n    def __init__(self, data):\n        self.data = data", "output": "class List:\n    def __init__(self, data):\n        self.data = data\n    \n    def isEmpty(self):\n        return not self.data", "category": "Python"}, {"instruction": "Amend the following Python code to add error handling to the function print_score.", "input": "def print_score(score):\n    print(f'The score is {score}')", "output": "def print_score(score):\n    try:\n        score = int(score)\n        print(f'The score is {score}')\n    except ValueError:\n        print(\"The score must be an integer.\")", "category": "Python"}, {"instruction": "Add a method called \"printTitle\" to the \u201cBook\u201d class defined above.", "input": "", "output": "class Book():\n  def __init__(self, name, author):\n    self.name = name\n    self.author = author\n  \n  def printTitle(self):\n      print(\"The book title is: \"+ self.name)", "category": "Python"}, {"instruction": "Amend the following Python function to calculate the sum of all even numbers in the given range.", "input": "def sum_even_numbers(n):\n    '''This function will calculate the sum of all numbers in the given range.'''\n    total = 0\n    for i in range(n):\n        total += i\n    return total", "output": "def sum_even_numbers(n):\n    '''This function will calculate the sum of all even numbers in the given range.'''\n    total = 0\n    for i in range(n):\n        if i%2==0:\n            total += i\n    return total", "category": "Python"}, {"instruction": "Create a 4x4 matrix filled with random numbers between 0 and 9.", "input": "", "output": "import random\n\ndef generate_random_matrix(rows, cols):\n    matrix = []\n    for i in range(rows):\n        matrix.append([])\n        for j in range(cols):\n            matrix[i].append(random.randint(0, 9))\n    return matrix\n\nif __name__ == '__main__':\n    rows = 4\n    cols = 4\n    print(generate_random_matrix(rows, cols))", "category": "Python"}, {"instruction": "Write a function to convert the given list of integers into a dictionary of lists.", "input": "my_list = [1, 2, 3, 4]", "output": "def list_to_dict(lst):\n    my_dict = {}\n    for i in lst:\n        my_dict[str(i)] = [i]\n    return my_dict\n\nif __name__ == '__main__':\n    my_list = [1, 2, 3, 4]\n    print(list_to_dict(my_list))", "category": "Python"}, {"instruction": "Write code for reversing a list in Python", "input": "[1,2,3,4]", "output": "def reverse_list(l):\n    return l[::-1]", "category": "Python"}, {"instruction": "Write a code to calculate the mean of the list of integers provided.", "input": "nums = [10, 20, 30, 40, 50]", "output": "def calc_mean(nums):\n    \"\"\"\n    Calculate the mean of a list of integers\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    else:\n        sum_of_nums = sum(nums)\n        mean = sum_of_nums/len(nums)\n        return mean\n\nnums = [10, 20, 30, 40, 50]\nmean = calc_mean(nums)\nprint(mean) # 30", "category": "Python"}, {"instruction": "Write a code to check whether two numbers are divisible by each other.", "input": "num1 = 8\nnum2 = 4", "output": "def divisible_by_each_other(num1, num2):\n    \"\"\"\n    A function to check whether two numbers are divisible by each other\n    \"\"\"\n    if num1 % num2 == 0 or num2 % num1 == 0:\n        return True\n    else:\n        return False\n\nnum1 = 8\nnum2 = 4\n\nresult = divisible_by_each_other(num1, num2)\nprint(result) # True", "category": "Python"}, {"instruction": "Create a code to find all common elements in two list and store it in a new list.", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]", "output": "def find_common(list1, list2):\n    \"\"\"\n    Find all common elements in two list and store it in a new list\n    \"\"\"\n    new_list = []\n    for item1 in list1:\n        for item2 in list2:\n            if item1 == item2:\n                new_list.append(item1)\n                \n    return new_list\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\n\nresult = find_common(list1, list2)\nprint(result) # [3, 4, 5]", "category": "Python"}, {"instruction": "Extend the following python code to include a new field 'type' with the value 'dog'.", "input": "animal = {\n 'name': 'Rex',\n 'age': 10\n}", "output": "animal = {\n 'name': 'Rex',\n 'age': 10,\n 'type': 'dog'\n}", "category": "Python"}, {"instruction": "Write a code to perform linear search in an array of integers.", "input": "", "output": "def linear_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Rewrite the following code to use the ternary operator in Python:\n\nif x > 0:\n    result = \"positive\"\nelse:\n    result = \"negative\"", "input": "", "output": "result = \"positive\" if x > 0 else \"negative\"", "category": "Python"}, {"instruction": "How would you create a function that takes a list of strings as an argument and returns the total number of characters in all the strings together?", "input": "", "output": "def count_characters(stringList):\n    count = 0\n    for string in stringList: \n        count += len(string)\n    return count", "category": "Python"}, {"instruction": "Create a Python function to find the pair of numbers that have the highest product in an array of numbers", "input": "[1, 2, 4, 8, 10]", "output": "def find_max_product(nums):\n  max_product = 0\n  for i in range(len(nums)):\n    for j in range(i+1, len(nums)):\n      product = nums[i] * nums[j]\n      if product > max_product:\n        max_product = product\n  return max_product", "category": "Python"}, {"instruction": "Create a Python function that takes two arguments, a positive integer and a boolean, and return the word \"yes\" if the boolean is true and the number is even, else it should return the word \"no\".", "input": "", "output": "def check_number(number, condition):\n    if condition and number % 2 == 0:\n        return \"yes\"\n    else:\n        return \"no\"", "category": "Python"}, {"instruction": "Given a string, write a Python function that will remove all the vowels from it.", "input": "", "output": "def remove_vowels(string):\n    vowels = {'a', 'e', 'i', 'o', 'u'}  \n    return ''.join(c for c in string if c not in vowels)", "category": "Python"}, {"instruction": "Look at the code and explain what is it doing.", "input": "def double_list(list):\n    \"\"\"Doubles every value in the list.\"\"\"\n    for idx, item in enumerate(list):\n        list[idx] = item * 2", "output": "This code takes a list as an argument and iterates through it using a for loop. For each element in the list, the code multiplies it to 2 and assigns it back (replacing the existing element) in the same list. At the end, every element in the list is doubled in value.", "category": "Python"}, {"instruction": "Compute the sum of 2 numbers using Python code.", "input": "a = 10\nb = 5", "output": "a + b = 15", "category": "Python"}, {"instruction": "Create a unit test for a given function to reverse a list of strings.", "input": "", "output": "import unittest \n\ndef reverse_strings_list(lst):\n  return lst[::-1]\n\nclass TestReverseStrings(unittest.TestCase):\n  def test_reverse_strings_list(self):\n    self.assertEqual(reverse_strings_list([\"one\",\"two\",\"three\"]), \n      [\"three\", \"two\", \"one\"])", "category": "Python"}, {"instruction": "Use a neural network to classify handwritten digits from the MNIST dataset.", "input": "", "output": "import tensorflow as tf\nfrom tensorflow.keras.datasets import mnist\n\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n# Reshape and normalize the data\nx_train = x_train.reshape((60000, 28, 28, 1))\nx_train = x_train / 255.0\nx_test = x_test.reshape((10000, 28, 28, 1)) \nx_test = x_test / 255.0\n\n# Build and compile the model\nmodel = tf.keras.models.Sequential([\n tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(28, 28, 1)),\n tf.keras.layers.MaxPooling2D(2, 2),\n tf.keras.layers.Flatten(),\n tf.keras.layers.Dense(128, activation='relu'),\n tf.keras.layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n loss='sparse_categorical_crossentropy', \n metrics=['accuracy'])\n\n# Train the model\nmodel.fit(x_train, y_train, epochs=5)\n\n# Evaluate the model\ntest_loss, test_acc = model.evaluate(x_test, y_test)\n\nprint('Test accuracy:', test_acc)", "category": "Python"}, {"instruction": "You need to implement a depth-first search algorithm to search for a value in a given tree.", "input": "", "output": "def dfs(root, value):\n    if root is None:\n        return False\n    if root.val == value:\n        return True\n\n    left = dfs(root.left, value)\n    right = dfs(root.right, value)\n    return left or right", "category": "Python"}, {"instruction": "You need to collect user input to get the total sum of numbers.", "input": "", "output": "total = 0\nwhile True:\n    num = input(\"Please enter a number (enter '0' to finish): \")\n    if num == '0':\n        break\n    total += int(num)\n\nprint(\"The total sum of numbers is:\", total)", "category": "Python"}, {"instruction": "Given a string, find the longest palindrome within it.", "input": "string = \"ananabay\"", "output": "def longest_palindrome(string):\n  \"\"\"\n  Find the longest palindrome within a given string\n  \"\"\"\n\n  start, end, max_len = 0, 0, 0\n  for i in range(len(string)):\n      # Odd length of palindrome\n      left, right = i, i\n      while left >= 0 and right < len(string) and string[left] == string[right]:\n          length = right - left + 1\n          if max_len < length:\n              max_len = length\n              start = left\n              end = right\n          left -= 1\n          right += 1\n\n\n      # Even length of palindrome\n      left, right = i, i+1\n      while left >= 0 and right < len(string) and string[left] == string[right]:\n          length = right - left + 1\n          if max_len < length:\n              max_len = length\n              start = left\n              end = right\n          left -= 1\n          right += 1\n\n  return string[start:end+1]", "category": "Python"}, {"instruction": "Create a function to print out a numbered list of items from an array.", "input": "array = [\u2018apple\u2019, \u2018banana\u2019, \u2018orange\u2019]", "output": "def print_numbered_list(array):\n  \"\"\"Prints out a numbered list based on an array of items.\"\"\"\n  for i, item in enumerate(array, start=1):\n    print(f\"{i}. {item}\")", "category": "Python"}, {"instruction": "Construct a function that prints the first n terms in a Fibonacci sequence.", "input": "", "output": "def print_fibonacci(n):\n    fib1 = 0\n    fib2 = 1\n    for i in range(n):\n        print(fib1)\n        temp = fib1\n        fib1 = fib2\n        fib2 = temp + fib2", "category": "Python"}, {"instruction": "Can you write a function that returns the sum of the elements of a given array?", "input": "arr = [2, 3, 4, 5]", "output": "def sum_array(arr):\n    sum = 0\n    for ele in arr:\n        sum += ele\n    return sum", "category": "Python"}, {"instruction": "You need to create a Python class to represent a 3-dimensional point.", "input": "", "output": "class Point3D:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __str__(self):\n        return '({}, {}, {})'.format(self.x, self.y, self.z)", "category": "Python"}, {"instruction": "You need to create a Python function to detect if a given number is prime or not.", "input": "", "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "You need to write a Python function to find all substrings of a given string in order.", "input": "string = 'hello'", "output": "def find_all_substrings(string):\n    substrings = []\n    for i in range(len(string)):\n        for j in range(len(string)+1):\n            substrings.append(string[i:j])\n    return substrings", "category": "Python"}, {"instruction": "Create a Python code to find all uncommon characters between two strings.", "input": "string1 = 'green', string2 = 'blue'", "output": "def uncommon_chars(string1, string2):\n    uncommon = []\n    for char in string1:\n        if char not in string2:\n            uncommon.append(char)\n    for char in string2:\n        if char not in string1:\n            uncommon.append(char)\n    return uncommon", "category": "Python"}, {"instruction": "Generate a Python code to convert list of strings to list of integers.", "input": "strings = ['23', '45', '7', '67']", "output": "def convert_to_ints(strings):\n    ints = []\n    for s in strings:\n        ints.append(int(s))\n    return ints", "category": "Python"}, {"instruction": "Create a Python code that takes in two strings and finds all common characters from the strings.", "input": "string1 = 'abcd', string2 = 'acde'", "output": "def common_chars(string1, string2):\n    common = []\n    for char in string1:\n        if char in string2:\n            common.append(char)\n    return common", "category": "Python"}, {"instruction": "Create a Python function to sort a list of strings based on a given alphabetical order.", "input": "alphabet = 'bdhajfz', strings = ['bad', 'hfja', 'abd', 'zaj']", "output": "def sort_string_list(strings, alphabet):\n    sorted_list = sorted(strings, key=lambda x:(alphabet.index(x[0]),x))\n    return sorted_list", "category": "Python"}, {"instruction": "You are provided with a list of integers and a given number. Generate Python code that detects if the given number is in the list or not.", "input": "list = [11,22,33,44,77], number = 44", "output": "def check_number(list, number):\n    if number in list:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Develop a Python3 program to extract the words of length 3 from a given sentence.", "input": "\"The quick brown fox jumped over the lazy dog\"", "output": "def extract_words(s):   \n    words = s.split()\n    length_3_words = []\n    for word in words:\n        if len(word) == 3:\n            length_3_words.append(word)\n    return length_3_words\n\ns = \"The quick brown fox jumped over the lazy dog\"\nprint(extract_words(s))", "category": "Python"}, {"instruction": "Create a python list with the following numbers: 27, 44, 28, 34", "input": "", "output": "my_list = [27, 44, 28, 34]", "category": "Python"}, {"instruction": "Edit the Python code block below to print the text in reverse.", "input": "word = \"Hello\"\nprint (word)", "output": "word = \"Hello\"\nprint (word[::-1])", "category": "Python"}, {"instruction": "Using the given list, create a code that will generate a unique list of numbers", "input": "x = [4, 10, 16, 22, 28, 34]", "output": "new_list = []\nfor num in x:\n    if num not in new_list:\n        new_list.append(num)\nprint(new_list)", "category": "Python"}, {"instruction": "Write a script in Python that will find the average of a list of numbers.", "input": "[2.3, 6.7, 8.2, 4.3, 9.1]", "output": "import numpy as np\n\ndata = [2.3, 6.7, 8.2, 4.3, 9.1] \navg = np.mean(data)\nprint(\"Average of the list of numbers is:\", avg)", "category": "Python"}, {"instruction": "Write a Python program that uses recursion to calculate the Fibonacci sequence up to the 25th number.", "input": "", "output": "def Fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return Fibonacci(n-1) + Fibonacci(n-2)\n\nfibonacci_list = []\n\nfor i in range(26):\n    fibonacci_list.append(Fibonacci(i))\n\nprint(fibonacci_list)", "category": "Python"}, {"instruction": "Create a content aggregator application in Python.", "input": "", "output": "import requests\nimport json \n\ndef content_aggregator():\n    api_url = \"https://www.example.com/api/\"\n    response = requests.get(api_url)\n    response_data = json.loads(response.text)\n    for item in response_data:\n        print(item)\n\nif __name__ == '__main__':\n    content_aggregator()", "category": "Python"}, {"instruction": "Update the existing code to have a shape of (3,3) when an array of size (2,2) is reshaped.", "input": "import numpy as np\n\narr = np.arange(4).reshape(2,2)", "output": "import numpy as np\n\narr = np.arange(9).reshape(3,3)", "category": "Python"}, {"instruction": "Write a code that can generate a list of random numbers between 0 to 100", "input": "", "output": "import random\n\n# Function to generate a list of random numbers between 0 to 100\ndef generate_random_number_list():\n  random_number_list = []\n  for i in range(0,101):\n    random_number_list.append(random.randint(0,100))\n  return random_number_list\n\n# call the function\nrandom_number_list = generate_random_number_list()\nprint(random_number_list)", "category": "Python"}, {"instruction": "Convert the list of numbers below to a numpy array.", "input": "[2, 4, 6, 8, 10]", "output": "import numpy as np \n\narr = np.array([2,4,6,8,10])", "category": "Python"}, {"instruction": "Edit the following code such that the output is reversed", "input": "def reverse_string(s):\n    n = len(s)\n    result = \"\"\n    for i in range(n):\n        result += s[i]\n    return result", "output": "def reverse_string(s):\n    n = len(s)\n    result = \"\"\n    for i in range(n-1, -1, -1):\n        result += s[i]\n    return result", "category": "Python"}, {"instruction": "Create a program in Python to compute the sum of two numbers.", "input": "", "output": "def add_numbers(num1, num2):\n  sum_nums = num1 + num2\n  return sum_nums", "category": "Python"}, {"instruction": "Create an array of 10 randomly generated integers between 0 and 10.", "input": "", "output": "import random\n\ndef generate_random_array():\n    return [random.randint(0, 10) for _ in range(10)]", "category": "Python"}, {"instruction": "Write a Python program to verify if an integer is odd or even.", "input": "num = 8", "output": "False", "category": "Python"}, {"instruction": "Find the index of the maximum value in an array of numbers in Python.", "input": "[1, 6, 2, 8, 4, 9]", "output": "list = [1, 6, 2, 8, 4, 9]\nmax_index = list.index(max(list))\nprint(max_index) # Output: 4", "category": "Python"}, {"instruction": "Write a Python code to generate a random password of 12 characters containing a mix of numbers, alphabets, and special characters.", "input": "", "output": "password = DX$bf7uj3@q3", "category": "Python"}, {"instruction": "Implement a function to print the Fibonacci series up to the nth term.", "input": "", "output": "def FibonacciSeries(n): \n    a = 0\n    b = 1 \n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "List the advantages of using a linked list over an array.", "input": "", "output": "The advantages of using a linked list over an array include:\n\n1. Insertion and deletion operations are faster since individual elements do not have to be rearranged in memory.\n2. Elements can be stored in any order, as opposed to an array which requires elements to be stored contiguously.\n3. Linked lists have an arbitrary number of elements, unlike an array which has a fixed size. \n4. Linked lists do not require the memory allocation of an entire block at once, making it suitable for dynamic memory allocation.", "category": "Python"}, {"instruction": "Parse the following HTML code and store the data in a Python dictionary.", "input": "<div><h2>Header</h2><p>Text</p></div>", "output": "data = {\n \"header\": \"Header\",\n \"text\": \"Text\"\n}", "category": "Python"}, {"instruction": "Explain the main difference between an array and a linked list.", "input": "", "output": "The main difference between an array and a linked list is that an array stores data items contiguously in memory, while a linked list stores them in individual elements linked together with references. An array can be accessed faster than a linked list since elements can be accessed directly by their index. On another hand, inserting and deleting elements from a linked list is faster since elements don't have to be rearranged in memory like in an array. Additionally, linked lists can have an arbitrary number of elements unlike arrays which have a fixed size.", "category": "Python"}, {"instruction": "Create a while loop in Python that runs while the given condition is true", "input": "while x is greater than 10", "output": "while x > 10:\n    # do something\n    x = x - 1", "category": "Python"}, {"instruction": "Create a function \" avg_grade\" that would take a list of grades and return the average of the grades", "input": "list = [84, 89, 94, 81]", "output": "def avg_grade(list):\n    total = 0\n    for num in list:\n        total += num\n    return total / len(list)", "category": "Python"}, {"instruction": "Iterate over the list and calculate the average", "input": "arr = [1,2,3,4,5]", "output": "def average(arr):\n    sum = 0\n    for i in arr:\n        sum+=i\n    return sum/len(arr)", "category": "Python"}, {"instruction": "Generate a code to compare two strings and return a boolean result.", "input": "", "output": "def compare(string1, string2):\n    if string1 == string2:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Generate a code to filter out any value that is greater than the given number.", "input": "my_list = [2, 4, 5, 6, 7]\nand the number = 5", "output": "def filter_gt(my_list, number):\n    return [x for x in my_list if x <= number]", "category": "Python"}, {"instruction": "Using the given input, generate a code to print in reverse order.", "input": "a_list = ['a', 'b', 'c', 'd', 'e']", "output": "def print_reverse(a_list):\n    for i in range(len(a_list)-1, -1, -1):\n        print(a_list[i])", "category": "Python"}, {"instruction": "Write a Python program to print the combination of the given list.", "input": "list = [1, 2, 3]", "output": "from itertools import combinations\n\nlist1 = [1, 2, 3]\n\ncombinations = list(combinations(list1, 2))\nprint(combinations)\n\n# Output: [(1, 2), (1, 3), (2, 3)]", "category": "Python"}, {"instruction": "Implement the bubble sort algorithm for an array of integers.", "input": "arr = [34, 16, 12, 9, 5]", "output": "def bubbleSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above\narr = [34, 16, 12, 9, 5]\n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "category": "Python"}, {"instruction": "Compose a python function to find the maximum element in a 2-dimensional array.", "input": "array = [[2, 4, 7, 1], [8, 12, 9, 5]]", "output": "def max_element(arr): \n    max_value = arr[0][0] \n    for i in range(len(arr)): \n        for j in range(len(arr[i])): \n            if arr[i][j] > max_value: \n                max_value = arr[i][j] \n    return max_value \n  \n# Driver code \narr = [[2, 4, 7, 1], [8, 12, 9, 5]] \nmax_val = max_element(arr) \nprint(\"The maximum element in 2-dimensional array is\",max_val)", "category": "Python"}, {"instruction": "Implement a function to search an element in a BST.", "input": "root:\n        5\n      /   \\\n     3     8\n    / \\   / \\\n   2   4  6   9\n\nkey: 3", "output": "def search_BST(root, key): \n  \n    # Base Condition \n    if root is None or root.val == key: \n        return root \n  \n    # If key is greater than root's key \n    if root.val < key: \n        return search_BST(root.right, key) \n  \n    # If key is smaller than root's key \n    return search_BST(root.left, key) \n  \n# Driver Code \nroot = Node(5)\nroot.left = Node(3) \nroot.right = Node(8)\nroot.left.left = Node(2) \nroot.left.right = Node(4) \nroot.right.left = Node(6) \nroot.right.right = Node(9) \n  \nkey = 3\nnode = search_BST(root, key) \nif node:\n    print(\"Found\") \nelse: \n    print(\"Not Found\")", "category": "Python"}, {"instruction": "Modify the following code to output Odd numbers from 1 to 10", "input": "for num in range(1, 10):\n    print( num )", "output": "for num in range(1, 10):\n    if num % 2 == 1:\n        print( num )", "category": "Python"}, {"instruction": "Create a function that will accept a list and return the sum of all elements in the list", "input": "", "output": "def sum_list(mylist):\n    s = 0\n    for x in mylist:\n        s += x \n    return s", "category": "Python"}, {"instruction": "Make the following code more efficient", "input": "def remove_dups(mylist):\n    newlist = []\n    for item in mylist:\n        if not item in newlist:\n            newlist.append(item)\n    return newlist", "output": "def remove_dups(mylist):\n    seen = set()\n    newlist = []\n    for item in mylist:\n        if item not in seen:\n            seen.add(item)\n            newlist.append(item)\n    return newlist", "category": "Python"}, {"instruction": "Provide a demo snippet to illustrate different ways of looping through a Python dictionary.", "input": "", "output": "#Looping through a dictionary using a for loop \ndict = {'a': 1, 'b': 2, 'c': 3, 'd': 4} \n  \nfor key in dict: \n    print(\"% s : % s\" %(key, dict[key])) \n  \n#Looping through a dictionary using items() method \nfor key, value in dict.items(): \n    print(\"% s : % s\" %(key, value)) \n  \n#Looping through dictionary keys \nfor key in dict.keys(): \n    print(\"% s : % s\" %(key, dict[key])) \n  \n#Looping through dictionary values \nfor value in dict.values(): \n    print(\"% s\" %value)", "category": "Python"}, {"instruction": "Write a python program to filter a list of numbers to only include even numbers", "input": "[1, 2, 3, 4]", "output": "def filter_even(nums):\n    even_nums = []\n    for num in nums:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums", "category": "Python"}, {"instruction": "What are the main differences between a stack and a queue?", "input": "", "output": "The main differences between a stack and a queue are their insertion and deletion methods. Stacks use a Last In First Out (LIFO) approach for insertion and deletion, while queues use a First In First Out (FIFO) approach. Stacks are used when order is important, while queues are used when order is not important.", "category": "Python"}, {"instruction": "Determine the size of an array in bytes.", "input": "", "output": "The size of an array in bytes is equal to the number of elements in the array multiplied by the size of each element in bytes. For example, an array of 10 integers requires 10 * 4 = 40 bytes of memory.", "category": "Python"}, {"instruction": "How many trailing zeros are in the factorial of the number \"n\"?", "input": "n = 20", "output": "The number of trailing zeros in 20! is 4.\n\ndef trailing_zeros(n):\n count = 0\n i = 5\n while (n/i >= 1): \n  count += int(n/i) \n  i *= 5\n return count\n\nprint(\"The number of trailing zeros in 20! is\", trailing_zeros(20))", "category": "Python"}, {"instruction": "Implement a backtracking algorithm to solve a sudoku puzzle.", "input": "[\n    [7, 8, 0, 4, 0, 0, 1, 2, 0],\n    [6, 0, 0, 0, 7, 5, 0, 0, 9],\n    [0, 0, 0, 6, 0, 1, 0, 7, 8],\n    [0, 0, 7, 0, 4, 0, 2, 6, 0],\n    [0, 0, 1, 0, 5, 0, 9, 3, 0],\n    [9, 0, 4, 0, 6, 0, 0, 0, 5],\n    [0, 7, 0, 3, 0, 0, 0, 1, 2],\n    [1, 2, 0, 0, 0, 7, 4, 0, 0],\n    [0, 4, 9, 2, 0, 6, 0, 0, 7]\n]", "output": "def solve(bo):\n    find = find_empty(bo)\n    if not find:\n        return True\n    else:\n        row, col = find\n\n    for i in range(1,10):\n        if valid(bo, i, (row, col)):\n            bo[row][col] = i\n\n            if solve(bo):\n                return True\n\n            bo[row][col] = 0\n\n    return False\n\n\ndef valid(bo, num, pos):\n    # Check row\n    for i in range(len(bo[0])):\n        if bo[pos[0]][i] == num and pos[1] != i:\n            return False\n\n    # Check column\n    for i in range(len(bo)):\n        if bo[i][pos[1]] == num and pos[0] != i:\n            return False\n\n    # Check box\n    box_x = pos[1] // 3\n    box_y = pos[0] // 3\n\n    for i in range(box_y*3, box_y*3 + 3):\n        for j in range(box_x * 3, box_x*3 + 3):\n            if bo[i][j] == num and (i,j) != pos:\n                return False\n\n    return True\n\n\ndef find_empty(bo):\n    for i in range(len(bo)):\n        for j in range(len(bo[0])):\n            if bo[i][j] == 0:\n                return (i, j)  # row, col\n\nprint(solve([\n    [7, 8, 0, 4, 0, 0, 1, 2, 0],\n    [6, 0, 0, 0, 7, 5, 0, 0, 9],\n    [0, 0, 0, 6, 0, 1, 0, 7, 8],\n    [0, 0, 7, 0, 4, 0, 2, 6, 0],\n    [0, 0, 1, 0, 5, 0, 9, 3, 0],\n    [9, 0, 4, 0, 6, 0, 0, 0, 5],\n    [0, 7, 0, 3, 0, 0, 0, 1, 2],\n    [1, 2, 0, 0, 0, 7, 4, 0, 0],\n    [0, 4, 9, 2, 0, 6, 0, 0, 7]\n]))", "category": "Python"}, {"instruction": "You are given a set of numbers and a number \"n\". Find the sum of all numbers in the given set greater than \"n\".", "input": "[4, 7, 10, 11], n = 6", "output": "total = 18\ndef sum_greater_than_n(arr, n):\n total = 0\n for num in arr:\n if num > n:\n total += num\n return total\n\nprint(sum_greater_than_n([4, 7, 10, 11], 6))", "category": "Python"}, {"instruction": "Calculate the factorial of the integer \"n\".", "input": "n = 5", "output": "def findFactorial(n): \n fact = 1\n while(n> 0): \n fact = fact * n \n n = n - 1\n return fact \n \nprint(find_factorial(5))", "category": "Python"}, {"instruction": "Write an algorithm to detect the longest common subsequence of two given strings.", "input": "str1 = \"ABCGDH\", str2 = \"ADGH\"", "output": "// Input two strings\nstr1 = \"ABCGDH\"\nstr2 = \"ADGH\"\n\n// Create a two dimensional matrix arr to store the lcs\nint arr[len(str1)+1][len(str2)+1]\n\nint maxLength = 0\n\n// Initialize all elements of arr to zero\nfor i in range(len(str1)+1): \n    for j in range(len(str2)+1): \n        arr[i][j] = 0\n\n// Calculate the value of arr[i][j] \nfor i in range(1,len(str1)+1):\n    for j in range(1,len(str2)+1):\n        if str1[i-1] == str2[j-1]:\n            arr[i][j] = arr[i-1][j-1] + 1\n            maxLength = max(arr[i][j], maxLength)\n        else:\n            arr[i][j] = max(arr[i][j-1], arr[i-1][j])\nreturn maxLength", "category": "Python"}, {"instruction": "Develop a Python program to calculate the greatest common factor of two positive integers.", "input": "", "output": "def gcd(x, y): \n  \n    # base case \n    if x == 0: \n        return y \n    \n    # a is greater \n    if x > y: \n        return gcd(x % y, y) \n    \n    # b is greater\n    return gcd(x, y % x) \n\n# Driver code\n# x and y are the two positive integers\nx = 16\ny = 24\ngcd_val = gcd(x, y)\nprint(\"The greatest common factor of\",x,\"and\",y,\"is\",gcd_val)", "category": "Python"}, {"instruction": "Transform the following Python function to a pseudo code.", "input": "def find_max(x):\n max_val = -1\n for i in x:\n if i > max_val:\n max_val = i\n return max_val", "output": "# Find the maximum value in x\nmax_val = -1\nFOR each i in x\n    IF i > max_val\n        max_val = i\nEND FOR\nRETURN max_val", "category": "Python"}, {"instruction": "Suggest a completion for the following code to generate a random string of the given length from a given set.", "input": "length = 10\ncharset = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'", "output": "import random\n\ndef generate_random_string(length, charset):\n  output_str = ''\n  for i in range(length):\n    output_str += random.choice(charset)\n  return output_str", "category": "Python"}, {"instruction": "In the given code, add an environment variable that should be used to set the desired version of Python.", "input": "", "output": "import os\nos.environ[\"PYTHON_VERSION\"] = \"3.7\"", "category": "Python"}, {"instruction": "Update the given code to add a statement to check if the input number is a prime or not.", "input": "num = 5", "output": "flag = 0\nfor i in range(2, num):\n  if num % i == 0:\n    flag = 1\nif flag == 0:\n  print(\"The number is a prime.\")", "category": "Python"}, {"instruction": "Add a function to the code that will calculate the average of the input array.", "input": "array = [1,2,3,4]", "output": "def calculate_average(array):\n  total = 0\n  for num in array:\n    total += num\n  avg = total/len(array)\n  return avg", "category": "Python"}, {"instruction": "Write a function that takes two parameters and will print out the maximum of the two.", "input": "", "output": "def max_of_two(x, y):\n  if x > y:\n    return x\n  else:\n    return y", "category": "Python"}, {"instruction": "Reverse a string in place", "input": "word = 'hello'", "output": "def reverse_string_in_place(word): \n    # Get the input string length \n    n = len(word) \n\n    # Swap character starting  \n    # from two corners \n    for i in range(n // 2): \n        word[i], word[n - i - 1] = word[n - i - 1], word[i] \n\nword = list('hello') \nreverse_string_in_place(word) \nprint(''.join(word))", "category": "Python"}, {"instruction": "Implement the bubble sort algorithm for a linked list.", "input": "link_list = [10->9->8->7->6]", "output": "class Node:\n    # initialization of node\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \n# bubble sort of linked_list\ndef bubble_sort(head):\n    # Store last node\n    end = None\n\n    while end != head.next:\n        p = head\n        while p.next != end:\n            q = p.next\n            if p.data > q.data:\n                p.data, q.data = q.data, p.data\n            p = p.next\n        end = p\n\n# driver code\nhead =  Node(10) \nhead.next = Node(9) \nhead.next.next = Node(8) \nhead.next.next.next = Node(7)\nhead.next.next.next.next = Node(6)\n    \nbubble_sort(head) \n<insert code to print the data of the linked list>", "category": "Python"}, {"instruction": "Find the GCD of two integers.", "input": "a = 8, b = 12", "output": "def gcd(a, b): \n\n    # Base case \n    if a == 0:\n        return b \n      \n    return gcd(b % a, a) \n  \n# Driver code\na = 8\nb = 12\nprint(\"GCD of\",a,\"and\",b,\"is\", gcd(a, b))", "category": "Python"}, {"instruction": "Code a function that takes a list of strings and checks if it is ordered lexicographically.", "input": "list_of_strings = ['algorithm', 'coding', 'novel']", "output": "def ordered_list(list_of_strings): \n    for i in range(len(list_of_strings) - 1): \n        if list_of_strings[i] >= list_of_strings[i+1]: \n            return False\n    return True \n  \n# Driver Code \nlist_of_strings = ['algorithm', 'coding', 'novel']\nprint(ordered_list(list_of_strings))", "category": "Python"}, {"instruction": "Code a Python algorithm to reverse a given string.", "input": "\"Hello, World!\"", "output": "def reverse(s):  \n    return s[::-1] \n\nx = \"Hello, World!\"\n  \nprint(reverse(x))", "category": "Python"}, {"instruction": "Replace the following python code to print out the length of a given string.", "input": "string = 'Hello world'\nprint(string)", "output": "string = 'Hello world'\nprint(len(string))", "category": "Python"}, {"instruction": "Find the sum of the elements of an array.", "input": "arr = [1,2,3,4]", "output": "def find_sum(arr):\n    \"\"\"This function finds the sum of the elements of an array\"\"\"\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n\nsum = find_sum(arr)\nprint(\"The sum of the elements of the array is:\", sum)", "category": "Python"}, {"instruction": "Implement quick sort on an array.", "input": "unsorted_nums = [2, 8, 1, 5, 9]", "output": "def partition(arr, low, high): \n    i = (low-1)\n    pivot = arr[high]\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i = i+1\n            arr[i], arr[j] = arr[j], arr[i] \n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return (i+1) \n\ndef quick_sort(arr, low, high): \n    if low < high:\n        pi = partition(arr, low, high) \n        quick_sort(arr, low, pi-1) \n        quick_sort(arr, pi+1, high)\n\nquick_sort(unsorted_nums, 0, len(unsorted_nums)-1)\nprint(unsorted_nums)", "category": "Python"}, {"instruction": "Create a code to get the average value of a given list.", "input": "numbers = [1, 4, 9, 5]", "output": "def get_average(numbers):\n    sum_nums = 0\n    for num in numbers:\n        sum_nums += num\n    return sum_nums / len(numbers)\n\nprint(get_average(numbers))", "category": "Python"}, {"instruction": "Need to write a function to encrypt a message using the caesar cipher, which takes the key as an argument.", "input": "message = \"Hello World\"\nkey = 3", "output": "def encrypt_caesar_cipher(message, key):\n    encrypted_message = \"\"\n    for char in message: \n        if not char.isalpha():\n            encrypted_message += char\n        else:\n            encrypted_char = chr((ord(char) + key - 97) % 26 + 97)\n            encrypted_message += encrypted_char\n    return encrypted_message\n\nprint(encrypt_caesar_cipher(message, key))", "category": "Python"}, {"instruction": "Create a function that takes in two arguments \"a\" and \"b\" and prints out the greatest common divisor between them.", "input": "a = 6\nb = 36", "output": "def gcd(a, b): \n    if (a == 0): \n        return b \n    return gcd(b % a, a)\n\nprint(gcd(a, b))", "category": "Python"}, {"instruction": "Create a function that takes in an integer \"n\" and prints all perfect numbers between 0 to n.", "input": "n = 20", "output": "def perfect_numbers(n):\n    perfect_numbers = []\n    for number in range(1, n+1):\n        sum_divisors = 0\n        for divisor in range(1, number):\n            if number % divisor == 0:\n                sum_divisors += divisor\n        if sum_divisors == number:\n            perfect_numbers.append(number)\n    return perfect_numbers\n \nprint(perfect_numbers(n))", "category": "Python"}, {"instruction": "Create a list comprehension to generate a list of all the words in the sentence \"Python is amazing\".", "input": "", "output": "words = [word for word in \"Python is amazing\".split(' ')]", "category": "Python"}, {"instruction": "Create a function that takes as argument the number of elements and return a list containing the Fibonacci sequence up to that number.", "input": "n = 10", "output": "def get_fibonacci_sequence(n):\n    \"\"\"Returns a list containing the Fibonacci sequence up to number n\"\"\"\n    fib_list = [0, 1]\n    if n <= 2:\n        return fib_list[:n]\n    \n    for i in range(2, n):\n        fib_list.append(fib_list[i-2] + fib_list[i-1])\n    \n    return fib_list\n\nn = 10\n\nfib_sequence = get_fibonacci_sequence(n)\nprint(fib_sequence) # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "category": "Python"}, {"instruction": "Create a program that takes as input an array of numbers and calculates the sum of all numbers in the array.", "input": "arr = [10,20,30,40]", "output": "def get_sum(input_arr):\n    \"\"\"Returns the sum of all numbers in an input array\"\"\"\n    sum = 0\n    for num in input_arr:\n        sum += num\n    return sum\n\narr = [10,20,30,40]\ntotal = get_sum(arr)\nprint(total) # Output: 100", "category": "Python"}, {"instruction": "Create a Python program that takes as input an email address and validates it using a regex pattern.", "input": "email = 'example@gmail.com'", "output": "import re\n\ndef validate_email(email):\n    \"\"\"Validates an email address using regex\"\"\"\n    pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n    match = re.search(pattern, email)\n    if match:\n        return True\n    else:\n        return False\n\nemail = 'example@gmail.com'\n\nis_valid_email = validate_email(email)\nprint(is_valid_email) # Output: True", "category": "Python"}, {"instruction": "Write an algorithm that prints the first 10 Fibonacci numbers in descending order.", "input": "", "output": "# Initialize the first two numbers\na = 0\nb = 1\n\n# Print the first 10 Fibonacci numbers\nfor i in range(10):\n    # Swap the values\n    a, b = b, a + b\n    # Print the current Fibonacci number\n    print(b)\n# Reverse the list\nfor _ in range(9, 0, -1):\n    print(_)", "category": "Python"}, {"instruction": "Using Python, create a loop that prints each element in a given list.", "input": "List = [\"A\", \"B\", \"C\"]", "output": "for item in List:\n    print(item)", "category": "Python"}, {"instruction": "Create a function to calculate the binomial coefficient for two integers.", "input": "n = 5\nr = 3", "output": "def binomial_coefficient(n, r):\n    fact = 1 \n    if r > n - r:\n        r = n - r \n    for i in range(r):\n        fact *= (n) - i \n        fact /= (i+1) \n    return int(fact)\n\nprint(binomial_coefficient(n, r))", "category": "Python"}, {"instruction": "Create a Python class \"Book\" with name and price properties.", "input": "", "output": "class Book:\n def __init__(self, name, price):\n  self.name = name\n  self.price = price", "category": "Python"}, {"instruction": "Update the following code to make it pass all test cases.", "input": "def divisible_by_two(numbers): \n    result = []\n    for num in numbers:\n        if num % 2 == 0:\n            result.append(True)\n        else:\n            result.append(False)\n    return result", "output": "def divisible_by_two(numbers): \n    result = []\n    for num in numbers:\n        if num % 2 == 0:\n            result.append(True)\n        else:\n            result.append(False)\n    return result\n\ndef divisible_by_two(numbers):\n    return [True if num % 2 == 0 else False for num in numbers]", "category": "Python"}, {"instruction": "Explain the difference between a local and a global variable in Python.", "input": "", "output": "In Python, a local variable is a variable that is only accessible within the scope of where it is defined, while a global variable is accessible throughout the program. All variables declared outside of a function are globally scoped, while variables declared inside a function are locally scoped. Global variables carry their value throughout the program, while a local variable will lose its value when the function containing it is exited.", "category": "Python"}, {"instruction": "Debug the following code so it can print the corresponding JSON data correctly.", "input": "import json\npeople_string = '{\"name\": \"John Smith\", \"age\": 50, \"profession\": \"engineer\"}'\n\ndata = json.loads(people_string)\nprint(\"Name:           \", data[\"name\"])", "output": "import json\npeople_string = '{\"name\": \"John Smith\", \"age\": 50, \"profession\": \"engineer\"}'\n\ndata = json.loads(people_string)\nprint(\"Name:           \", data[\"name\"])\nprint(\"Age:            \", data[\"age\"])\nprint(\"Profession:     \", data[\"profession\"])", "category": "Python"}, {"instruction": "Write a code to return the key of the minimum element in a dictionary.", "input": "dict: {'a': 1, 'b': 20, 'c': 3}", "output": "\"\"\"\nWrite a code to return the key of the minimum element in a dictionary.\n\"\"\"\n\ndef min_key(d):\n    if not d:\n        return None\n    min_val = min(d.values())\n    return [key for key, val in d.items() if val == min_val][0]\n\nif __name__ == '__main__':\n    d = {'a': 1, 'b': 20, 'c': 3}\n    print(min_key(d))", "category": "Python"}, {"instruction": "Explain how to make a Python script executable on Unix-like systems.", "input": "", "output": "To make a Python script executable on Unix-like systems, you must make the script file executable and specify the path to the Python interpreter. To do this, you need to add a \"shebang\" line at the beginning of the script, which should point to the path of the Python interpreter. This can be done by adding the following line to your script: #!/usr/bin/env python. Next, you must make the script file executable by running the chmod +x command. Finally, you need to specify the path of your script in the system's PATH environment variable so that it can be accessed from anywhere.", "category": "Python"}, {"instruction": "Write a Python function to find the largest prime factor of a given integer.", "input": "", "output": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n = n / i\n        else:\n            i += 1\n    return n", "category": "Python"}, {"instruction": "Implement a recursive solution to calculate the nth Fibonacci number.", "input": "", "output": "def fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2)", "category": "Python"}, {"instruction": "Write a Python code snippet to print the minimum value of a given list of numbers.", "input": "list = [7, 8, 10, 4]", "output": "min_val = min(list)\nprint('Minimum Value:', min_val)", "category": "Python"}, {"instruction": "Translate the following sentence into its Python equivalent.", "input": "\"If the number is greater than 10, print 'Success'.\"", "output": "if num > 10:\n    print('Success')", "category": "Python"}, {"instruction": "Suggest an algorithm to determine whether a string is a palindrome", "input": "", "output": "A palindrome is a word, phrase, or sequence that reads the same backward as forward. To determine whether a string is a palindrome, one algorithm could be to compare the reversed characters in the string with the original characters. We can start at the ends of the string, and check if the characters at each end of the string are equal. If they are, we move to the next pair in the middle, and if they are not equal, then the string is not a palindrome.", "category": "Python"}, {"instruction": "Compute the number of ways to make a change of N with coins of given denominations.", "input": "N = 4; Coins = {1,2,3}", "output": "def change(n, coins): \n    m = len(coins) \n    table = [[0 for x in range(m)] for x in range(n+1)] \n\n    # Fill the entries for 0 value case (n = 0) \n    for i in range(m): \n        table[0][i] = 1\n\n    # Fill rest of the table entries in bottom-up manner \n    for i in range(1, n+1): \n        for j in range(m): \n            # Count of solutions including coins[j] \n            x = table[i - coins[j]][j] if i-coins[j] >= 0 else 0\n\n            # Count of solutions excluding coins[j] \n            y = table[i][j-1] if j >= 1 else 0 \n\n            # total count \n            table[i][j] = x + y \n    return table[n][m-1]", "category": "Python"}, {"instruction": "Develop an algorithm to determine if a given integer is an Armstrong number or not.", "input": "153", "output": "def is_armstrong_number(num): \n  \n    # initialize sum \n    sum = 0\n    temp = num \n    while temp > 0: \n        digit = temp % 10\n        sum += digit ** 3 \n        temp //= 10\n  \n    if num == sum: \n        return True\n    return False", "category": "Python"}, {"instruction": "Create an algorithm for finding the minimum element in an array of integers.", "input": "[3, 7, 14, 2, 11]", "output": "def find_min(array):\n    min_element = array[0] \n    for i in range(1, len(array)):\n        if array[i] < min_element: \n            min_element = array[i] \n    return min_element", "category": "Python"}, {"instruction": "Construct an if statement for Python that checks if a given number is greater than 5.", "input": "", "output": "num = 7\nif num > 5:\n print(\"The number is greater than 5\")", "category": "Python"}, {"instruction": "Write Python code to generate a random integer between 1 and 10,000 (inclusive).", "input": "", "output": "import random\n\nnum = random.randint(1, 10000)\nprint(\"Random integer between 1 and 10,000:\", num)", "category": "Python"}, {"instruction": "Solve this math problem using Python code.", "input": "Problem: Find the 3 terms in an arithmetic progression whose sum is 42 and the common difference is 5.", "output": "#Find the first term\na = (42/3) - (2*5)\na = 10\n\n#Find the other two terms\nb = a + 5\nc = b + 5\n\n#Print the answer\nprint(\"The 3 terms in an arithmetic progression whose sum is 42 and the common difference is 5 are:\", a, b, c)", "category": "Python"}, {"instruction": "Create a dictionary from a given list of tuples.", "input": "[('a', 1), ('b', 2), ('c', 3)]", "output": "def list_to_dict(tuples_list):\n    result = {}\n    for tuple_ in tuples_list:\n        result[tuple_[0]] = tuple_[1]\n    \n    return result", "category": "Python"}, {"instruction": "Create a function that given two strings, returns a new string with the characters of the two strings alternating.", "input": "('abcd', 'efgh')", "output": "def alternating_strings(str1, str2):\n    result = \"\"\n    \n    for i in range(min(len(str1), len(str2))):\n        result += str1[i] + str2[i]\n    \n    # take care of the rest of the elements\n    if len(str1) > len(str2):\n        result += str1[len(str1)-1]\n    else:\n        result += str2[len(str2)-1]\n    \n    return result", "category": "Python"}, {"instruction": "Write a code to get the current US Dollar to Euro exchange rate from the European Central Bank.", "input": "", "output": "\"\"\"\nGet the current Euro to US Dollar exchange rate from the European Central Bank\n\"\"\"\n\nimport requests\nimport json\n\ndef get_currency_exchange_rate():\n    url = 'https://api.exchangeratesapi.io/latest?base=USD'\n    response = requests.get(url)\n    data = json.loads(response.text)\n    return data['rates']['EUR']\n\nif __name__ == '__main__':\n    print(get_currency_exchange_rate())", "category": "Python"}, {"instruction": "Develop a Python program that creates a random password of length 8 characters.", "input": "", "output": "import string\nimport random\n\nlength = 8\nall_characters = string.ascii_letters + string.digits + string.punctuation\n\npassword = \"\".join(random.choice(all_characters) for i in range(length))\n\nprint(password)", "category": "Python"}, {"instruction": "Edit the following Python code to combine two lists.", "input": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]", "output": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n# Combine both the lists\ncombined_list = list1 + list2\n# Print the combined list\nprint(combined_list)\n\nOutput:\n[1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Create a Python script for creating a random string of given length.", "input": "Length of 8", "output": "import random\nimport string\n\ndef random_string(length):\n    # Create a list of characters to be used in the random string\n    char_list = list(string.ascii_letters + string.digits)\n\n    # Create the random string with the given length\n    random_string = ''.join([random.choice(char_list) for i in range(length)])\n    \n    # Return the random string\n    return random_string\n\nif __name__ == '__main__':\n    # Define the length of the random string\n    length = 8\n    # Call the function to generate the random string\n    random_str = random_string(length)\n    # print the generated string\n    print('Random string:', random_str)\n\nOutput:\nRandom string: fdLbBi49", "category": "Python"}, {"instruction": "Develop an algorithm to traverse a linked list in a reverse order.", "input": "", "output": "def traverseReverse(head):\n    if head is None:\n        return\n\n    stack = []\n    curr = head\n    while curr is not None:\n        stack.append(curr) \n        curr = curr.next \n\n    while len(stack) > 0:\n        curr = stack.pop()\n        print(curr.val)", "category": "Python"}, {"instruction": "Design an algorithm to search for a particular node in a binary tree using breadth-first search.", "input": "", "output": "def breadthFirstSearch(root, target):\n\n    if root is None:\n        return False\n    \n    queue = [root]\n\n    while len(queue) > 0:\n        node = queue.pop(0)\n        if node.val == target:\n            return True\n\n        if node.left is not None:\n            queue.append(node.left)\n        if node.right is not None:\n            queue.append(node.right)\n\n    return False", "category": "Python"}, {"instruction": "Generate a list comprehension in Python to generate a list of integers from 1 to 50.", "input": "", "output": "[x for x in range(1, 51)]", "category": "Python"}, {"instruction": "Develop a program to delete all nodes of a linked list at a given position.", "input": "[3, 9, 1, 5], position to delete: 2", "output": "# Node class \nclass Node: \n\t\n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\n\n# Linked List class \nclass LinkedList: \n\t\n\tdef __init__(self): \n\t\tself.head = None\n\n\t# function to add a node at the given position \n\tdef deleteNode(self, pos): \n\n\t\t# if list is empty \n\t\tif self.head == None: \n\t\t\treturn\n\n\t\t# store head node \n\t\ttemp = self.head \n\n\t\t# if head needs to be removed \n\t\tif pos == 0: \n\t\t\tself.head = temp.next\n\t\t\ttemp = None\n\t\t\treturn\n\n\t\t# find previous node of the node to be deleted \n\t\tfor i in range(pos -1 ): \n\t\t\ttemp = temp.next\n\t\t\tif temp is None: \n\t\t\t\tbreak\n\n\t\t# if position is more than number of nodes \n\t\tif temp is None: \n\t\t\treturn \n\t\tif temp.next is None: \n\t\t\treturn\n\n\t\t# Node temp.next is the node to be deleted \n\t\t# store pointer to the next of node to be deleted \n\t\tnext = temp.next.next\n\n\t\t# Unlink the node from linked list \n\t\ttemp.next = None\n\n\t\ttemp.next = next", "category": "Python"}, {"instruction": "Develop an algorithm to search for a particular element in an array.", "input": "[1, 9, 5, 8, 4, 9], element to search for: 9", "output": "def search(arr, el):\n    for i in range(len(arr)):\n        if arr[i] == el:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Design a function in Python that takes a list of strings and returns a new list with words in reverse order.", "input": "", "output": "def reverse_words(words):\n    return [word[::-1] for word in words]", "category": "Python"}, {"instruction": "Modify the following code to take in a list of numbers and return the average.", "input": "", "output": "def average(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total / len(numbers)", "category": "Python"}, {"instruction": "Write a code snippet to read characters from a given string until a whitespace is encountered", "input": "", "output": "def read_until_space(string):\n result = \"\"\n for char in string:\n     if char == \" \":\n         break\n     result += char\n return result", "category": "Python"}, {"instruction": "Write a loop statement to delete all even numbers from the given array.", "input": "[1, 2, 3, 4, 5]", "output": "arr = [1, 2, 3, 4, 5]\nfor i in range(len(arr)):\n    if arr[i] % 2 == 0:\n        del arr[i]", "category": "Python"}, {"instruction": "Create an algorithm in Python that converts a given number from base 10 to binary.", "input": "8", "output": "def base10_to_binary(n):\n\n    # Create an empty binary array\n    binary_arr = [0] * (int(math.log2(n)) + 1) \n  \n    # Iterate through binary array\n    for i in range(len(binary_arr) - 1, -1, -1): \n        if n >= pow(2, i): \n            n -= pow(2, i) \n            binary_arr[len(binary_arr) - i - 1] = 1\n  \n    return binary_arr \n  \n# Driver Code \nn = 8\nprint(base10_to_binary(n)) # [1, 0, 0, 0]", "category": "Python"}, {"instruction": "Find the product of the elements of a given array in Python.", "input": "[1, 2, 3]", "output": "def product(arr): \n    product = 1\n  \n    # Iterate the array \n    for i in arr: \n        product = product * i \n  \n    return product \n  \n# Driver Code \narr = [1, 2, 3] \nprint(product(arr)) # 6", "category": "Python"}, {"instruction": "Develop an algorithm to find the maximum consecutive repeating character in a given string.", "input": "\"aaaaabcdddddefgggg\"", "output": "def find_max_consecutive_repeating_character(str): \n    maxCount = 0\n    tempCount = 1\n    previous = ''\n\n    # count the number of occurrences\n    # of same character. \n    for i in range(len(str)): \n        if str[i] == previous:\n            tempCount += 1\n\n        else: \n            # Update maximum if required \n            if tempCount > maxCount: \n                maxCount = tempCount \n\n            tempCount = 1\n            previous= str[i] \n\n    return maxCount", "category": "Python"}, {"instruction": "Find the maximum of the numbers in a given array.", "input": "[1, 23, 87, -5, 33]", "output": "def find_max(arr): \n    max_element = arr[0] \n    for i in range(1, len(arr)):\n        if arr[i] > max_element:\n            max_element = arr[i]\n    return max_element", "category": "Python"}, {"instruction": "Develop a program to generate a random number in a given range.", "input": "Lower = 5 and Upper = 20", "output": "import random\n\ndef generate_random_number(lower, upper):\n    return random.randint(lower, upper)", "category": "Python"}, {"instruction": "Create a function that accepts two parameters, a string and a list, and returns the length of the string in the list.", "input": "string = 'FooBar'\nlist = [\"FooBar\", \"Foo\", \"BarFoo\"]", "output": "def getLength(string, list):\n    return len([x for x in list if x == string])", "category": "Python"}, {"instruction": "What is a syntax error in programming?", "input": "", "output": "A syntax error is an error in writing code which causes the code to be incorrect according to the programming language's syntax rules. This type of error prevents the code from being executed and can be identified by the compiler or interpreter. Examples of syntax errors include: putting a string in the wrong form, forgetting to add a semicolon at the end of a line, or missing a bracket.", "category": "Python"}, {"instruction": "How do functions help with code organization?", "input": "", "output": "Functions help with code organization by breaking the program up into smaller logical blocks. This makes the code easier to read and maintain. Separating the code into functions also makes it easier to debug and test, as it allows for individual parts of the code to be tested and debugged. Having code organized into functions also makes it easier to reuse code as the functions can be called multiple times.", "category": "Python"}, {"instruction": "Using the given input, write a function to produce a desired output.", "input": "Input: [1, 4, 8, 9, 10] \nDesired Output: [[1, 4, 8], [9, 10]]", "output": "def split_list(lst):\n    # Create an empty list\n    result = []\n    \n    # Iterate through the list and divide it into two parts\n    for i in range(0, len(lst), 3):\n        result.append(lst[i:i+3])\n        \n    # Return the result\n    return result", "category": "Python"}, {"instruction": "Simulate a coin toss using Python.", "input": "", "output": "import random\n\ndef coin_toss():\n  result = random.choice([\"heads\", \"tails\"])\n  return result\n\nprint(coin_toss())", "category": "Python"}, {"instruction": "Given two strings s1 and s2, how can you check if s2 is a substring of s1?", "input": "s1 = \"testString\"\ns2 = \"String\"", "output": "if s2 in s1:\n  print(\"s2 is a substring of s1\")\nelse:\n  print(\"s2 is not a substring of s1\")", "category": "Python"}, {"instruction": "Given a list of strings, how can you categorize each string into one of the two categories: short and long?", "input": "list = [\"Hello\", \"World\", \"Foo\", \"Bar\"]", "output": "for s in list:\n    if len(s) <=3:\n        category = \"short\"\n    else:\n        category = \"long\"\n    print(f\"{s} : {category}\")", "category": "Python"}, {"instruction": "How can you fill a 2D array with zeros?", "input": "", "output": "my_2d_array = [[0 for col in range(3)] for row in range(3)]", "category": "Python"}, {"instruction": "Given a unsorted array, sort it using the quick sort algorithm.", "input": "[5, 4, 8, 7, 1, 3, 10, 9]", "output": "def quickSort(nums): \n    if len(nums) <= 1: \n        return nums\n    pivot = nums[len(nums) // 2] \n    left = [x for x in nums if x < pivot]\n    middle = [x for x in nums if x == pivot] \n    right = [x for x in nums if x > pivot] \n    return quickSort(left) + middle + quickSort(right)\n  \n   \nnums = [5, 4, 8, 7, 1, 3, 10, 9] \nprint(quickSort(nums))", "category": "Python"}, {"instruction": "Write a TensorFlow 2.0 program that calculates the mean of an array.", "input": "[1, 2, 3, 4, 5]", "output": "import tensorflow as tf\n\narr = [1, 2, 3, 4, 5]\n\narr_tensor = tf.constant(arr)\nmean_tensor = tf.reduce_mean(arr_tensor)\n\nwith tf.Session() as sess:\n    mean_value = sess.run(mean_tensor)\nprint(mean_value)", "category": "Python"}, {"instruction": "Suggest an algorithm for finding the maximum sum for all subarrays.", "input": "arr = [2, 3, -5, 4]", "output": "The algorithm for finding the maximum sum for all subarrays can be solved using a divide and conquer approach.\n\nFirst, divide the array into two parts by splitting it in half at its middle index. Then, calculate the maximum subarray sum for each of the two parts recursively. Finally, return the greater of the two sums plus the value at the middle index of the array. This will be the maximum sum of all subarrays.", "category": "Python"}, {"instruction": "Create a custom min-heap data structure in Python.", "input": "", "output": "class MinHeap:\n    def __init__(self):\n        self.heap = [] \n \n    def parent(self, i): \n        return (i-1)/2 \n \n    def insertKey(self, k): \n        self.heap.append(k) # Insert the new element at the end of the heap \n        i = len(self.heap)-1 \n        self.heapifyup(i) \n  \n    def heapifyup(self, i): \n        # If the current node is smaller than the parent node \n        # Swap the two nodes \n        if i != 0 and self.heap[int(self.parent(i))] > self.heap[i]: \n            self.heap[int(self.parent(i))], self.heap[i] = self.heap[i], self.heap[int(self.parent(i))]\n            self.heapifyup(self.parent(i))\n  \n    def remove(self):\n        # Get the value of the root node \n        root = self.heap[0] \n        # Move the last element of the heap to the top \n        self.heap[0] = self.heap[-1] \n        # Delete the last element of the heap \n        self.heap.pop()\n        if len(self.heap) > 0:\n            self.heapifydown(0)\n        return root\n  \n    def heapifydown(self, i):\n        # Get the left and right indices \n        left = 2*i+1\n        right = 2*i+2\n        small = i # Make the current node the small node \n  \n        # Compare the left child with the small node \n        if left < len(self.heap) and self.heap[left] < self.heap[small]:\n            small = left\n  \n        # Compare the right child with the small node \n        if right < len(self.heap) and self.heap[right] < self.heap[small]:\n            small = right\n \n        # If any of the children of the current node is smaller than \n        # the current node, then swap the current node with the small node \n        if small != i:\n            self.heap[small], self.heap[i] = self.heap[i], self.heap[small] \n            self.heapifydown(small)", "category": "Python"}, {"instruction": "Find all the prime factors of a given integer.", "input": "100", "output": "def prime_factors(n):\n    # Empty list to store prime factors \n    lst = [] \n    \n    # Divide by 2 while the number is \n    # divisible by 2  \n    while n % 2 == 0: \n        lst.append(2)\n        n = n / 2\n          \n    # n must be odd, now \n    # check all the numbers from 3 to \n    # the square root of n  \n    for i in range(3, int(n**0.5)+1): \n        # check for divisibility of i by n  \n        while n % i== 0: \n            lst.append(i) \n            n = n / i \n          \n    # If n is a prime number then it \n    # will only be divisible by itself  \n    if n > 2:\n        lst.append(n)\n      \n    return lst\n\n# Test  \nprint(prime_factors(100))\n\n# Output\n[2, 2, 5, 5]", "category": "Python"}, {"instruction": "Generate a list that contains the Armstrong numbers in a given range.", "input": "100", "output": "# Code \ndef armstrong_numbers(n): \n    # Empty list to store Armstrong numbers \n    lst = [] \n  \n    for i in range(1, n + 1): \n        s = 0\n        # To find the power \n        m = len(str(i)) \n  \n        # Finding Armstrong numbers \n        temp = i \n        while temp > 0: \n            digit = temp % 10\n            s += digit ** m \n            temp //= 10\n  \n        # Adding the number to list \n        if i == s: \n            lst.append(i) \n  \n    return lst\n\n# Test    \nprint(armstrong_numbers(100)) \n\n# Output\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 153, 370, 371, 407]", "category": "Python"}, {"instruction": "Automatically remove vowels from a sentence.", "input": "Hello, World!", "output": "def remove_vowels(sentence):\n    # Create an empty string.  \n    result = \"\" \n    for letter in sentence:  \n        # Select those characters that are not vowels. \n        if letter not in \"aeiouAEIOU\": \n            result += letter  \n  \n    return result\n\n# Test\nprint(remove_vowels(\"Hello, World!\")) \n\n# Output\nHll, Wrld!", "category": "Python"}, {"instruction": "Create a Python class to encode a string of characters using a Caesar cipher.", "input": "", "output": "class CaesarCipher:\n  \n    def __init__(self, shift):\n        self.shift = shift\n    \n    def encode(self, string):\n        cipher = ''\n        for char in string: \n            if char == ' ':\n                cipher = cipher + char\n            elif  char.isupper():\n                cipher = cipher + chr((ord(char) + self.shift - 65) % 26 + 65)\n            else:\n                cipher = cipher + chr((ord(char) + self.shift - 97) % 26 + 97)\n        return cipher\n\n# Test \ncipher = CaesarCipher(3)\nprint(cipher.encode(\"Hello, World!\"))\n\n# Output\nKhoor, Zruog!", "category": "Python"}, {"instruction": "Create a custom encryption algorithm to encode a string of characters.", "input": "Test", "output": "def custom_encrypt(string):\n    result = ''\n    \n    # Loop over each character\n    for character in string: \n        # Get the Unicode code point of the character \n        # and add two to it\n        code = ord(character) + 2 \n        # Convert the code point back to character \n        # and add it to the result\n        result += chr(code) \n\n    # Return the encrypted string\n    return result\n\n# Test the custom_encrypt() function\nencoded_str = custom_encrypt('Test')\nprint(encoded_str)\n# Output: Vguv", "category": "Python"}, {"instruction": "Design a loop in Python to find the maximum value from a given array.", "input": "array = [50, 10, 8, 1000, 1024]", "output": "maxValue = array[0]\nfor i in range(1, len(array)): \n    if array[i] > maxValue: \n        maxValue = array[i] \nprint(maxValue)", "category": "Python"}, {"instruction": "Implement a code which reverses a given string.", "input": "String: \"Hello World\"", "output": "def reverse_string(string): \n    rev_string = \"\" \n    for i in range(len(string)-1, -1, -1): \n        rev_string += string[i] \n    return rev_string \n\nprint(reverse_string(\"Hello World\"))\n\nOutput:\ndlroW olleH", "category": "Python"}, {"instruction": "Create a code which prints a multiplication table of given size.", "input": "Size: 4", "output": "def print_multiplication_table(n): \n    for i in range(1, n+1): \n        for j in range(1, n+1): \n            print(i*j, end=\"\\t\") \n        print(\"\\n\") \n\nprint_multiplication_table(4)\n\nOutput:\n1\t2\t3\t4\t\n2\t4\t6\t8\t\n3\t6\t9\t12\t\n4\t8\t12\t16", "category": "Python"}, {"instruction": "Rotate the given array by k steps.", "input": "Array: [1,2,3,4,5]\nk: 2", "output": "def rotate_array(arr, k): \n    for i in range(k): \n        arr.insert(0, arr.pop()) \n    return arr\n\nprint(rotate_array([1,2,3,4,5],2))\n\nOutput:\n[4, 5, 1, 2, 3]", "category": "Python"}, {"instruction": "Compute the maximum subarray sum for the given array.", "input": "Array: [-2,1,-3,4,-1,2,1,-5,4]", "output": "def max_subarray_sum(arr): \n    max_so_far = 0 \n    max_ending_here = 0\n\n    for i in range(len(arr)): \n        max_ending_here += arr[i] \n\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here \n\n        if max_ending_here < 0: \n            max_ending_here = 0 \n    \n    return max_so_far\n\nprint(max_subarray_sum([-2,1,-3,4,-1,2,1,-5,4]))\n\nOutput:\n6", "category": "Python"}, {"instruction": "Write a code which takes two strings and prints its longest common subsequence.", "input": "String1: \"ABCDGH\"\nString2: \"AEDFHR\"", "output": "def longest_common_subsequence(str1, str2): \n    m = len(str1) \n    n = len(str2) \n\n    matrix = [[0 for x in range(n+1)] for x in range(m+1)] \n\n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0: \n                matrix[i][j] = 0\n            elif str1[i-1] == str2[j-1]: \n                matrix[i][j] = matrix[i-1][j-1] + 1\n            else: \n                matrix[i][j] = max(matrix[i-1][j], matrix[i][j-1]) \n\n    result = \"\"\n    i = m \n    j = n \n\n    while i > 0 and j > 0: \n\n        if str1[i-1] == str2[j-1]: \n            result += str1[i-1] \n            i -= 1\n            j -= 1\n\n        elif matrix[i-1][j] > matrix[i][j-1]: \n            i -= 1\n        else: \n            j -= 1\n    \n    return result[::-1] \n\nprint(longest_common_subsequence(\"ABCDGH\", \"AEDFHR\"))\n\nOutput:\nADH", "category": "Python"}, {"instruction": "Write a code for creating an array with values from 0 to n.", "input": "n = 5", "output": "def create_array(n): \n    array = []\n    for i in range(n+1): \n        array.append(i)\n    return array\n\nprint(create_array(5))\n\nOutput:\n[0, 1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Implement a code that checks if a given word is palindrome.", "input": "Word: malayalam", "output": "def is_palindrome(word): \n    reversed_word = word[::-1]\n    if reversed_word == word: \n        return True\n    else: \n        return False\n\nprint(is_palindrome(\"malayalam\"))\n\nOutput:\nTrue", "category": "Python"}, {"instruction": "Provide a code for creating a function which receives an array of characters and prints them.", "input": "['A', 'B', 'C', 'D']", "output": "def print_array_of_chars(arr): \n    for ch in arr: \n        print(ch) \n        \nprint_array_of_chars(['A', 'B', 'C', 'D'])\n\nOutput:\nA\nB\nC\nD", "category": "Python"}, {"instruction": "Create a function to capitalize all the words of a sentence.", "input": "sentence = \"this is a test\"", "output": "def capitalize_words(sentence):\n    \"\"\"This function capitalizes all the words of a sentence\"\"\"\n    words = sentence.split()\n    capitalized_words = []\n    for word in words:\n        capitalized_words.append(word.capitalize())\n    return ' '.join(capitalized_words)\n\nprint(capitalize_words(sentence))", "category": "Python"}, {"instruction": "Replace all vowels with 'x' in a given string.", "input": "myString = \"Python Programmer\"", "output": "def replace_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    new_string = \"\"\n    for char in string:\n        if char in vowels:\n            new_string += \"x\"\n        else:\n            new_string += char\n    return new_string\n\nprint(replace_vowels(myString))\n\n# Output\n# Pxthxn Prxgrxmmxr", "category": "Python"}, {"instruction": "Use a while loop to iterate over a list of numbers and find the first even number", "input": "numbers = [7, 3, 5, 11, 13]", "output": "# while loop to iterate over list of numbers\ni = 0 \nwhile i < len(numbers):\n    if numbers[i] % 2 == 0:\n        break\n    i += 1\n\n# main program\nif i < len(numbers):\n    print(\"First even number is \", numbers[i])\nelse:\n    print(\"No even numbers found\")", "category": "Python"}, {"instruction": "Generate 5 random numbers from 1 to 10.", "input": "", "output": "import random\n\nnumbers = random.sample(range(1, 11), 5)\nprint(numbers)\n\n# Output\n# [3, 9, 6, 8, 5]", "category": "Python"}, {"instruction": "Find the most frequent value in a list", "input": "mylist = [1,2,3,4,4,4,4,5,5]", "output": "from collections import Counter\n\ndef get_most_frequent_value(mylist):\n    counted_list = Counter(mylist)\n    return counted_list.most_common(1)[0][0]\n\nmost_frequent_value = get_most_frequent_value(mylist)\nprint(most_frequent_value)\n\n# Output\n# 4", "category": "Python"}, {"instruction": "Write a function that takes a string and a key as parameters and encrypts the string with the key.", "input": "", "output": "def encrypt(string, key):\n    # Create an empty string that will hold the result\n    encrypted_string = \"\"\n    \n    # Loop through the string and encrypt each character\n    for i in range(len(string)):\n        char = string[i]\n        encrypted_char = chr(ord(char) + key)\n        encrypted_string += encrypted_char\n        \n    # Return the encrypted string\n    return encrypted_string", "category": "Python"}, {"instruction": "Rewrite the following piece of code in Python.", "input": "for (i = 0; i < 10; i++)\n    if (i % 2 == 0)\n        printf(\"%d\", i);", "output": "for i in range(10):\n    if i % 2 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Create a program in Python that searches for a word in a string.", "input": "This is a sample string\nword", "output": "def search(string, word):\n    if word in string:\n       return \"The word is present in the sentence\"\n    else: \n       return  \"The word is not present in the sentence\"", "category": "Python"}, {"instruction": "Write a Python function that finds and returns the number of occurrences of a particular character in a string.", "input": "", "output": "def countChar(string, char):\n  ctr = 0\n  for s in string:\n    if s == char:\n      ctr += 1\n  return ctr", "category": "Python"}, {"instruction": "Compute the edit distance between two provided words using the Levenshtein algorithm.", "input": "word1 = \"cat\"\nword2 = \"bat\"", "output": "def levenshteinDistance(word1, word2):\n  m = len(word1)\n  n = len(word2)\n  \n  dp = [[0 for i in range(n + 1)] for j in range(m + 1)] \n  \n  for i in range(m + 1): \n    for j in range(n + 1): \n      if i == 0: \n        dp[i][j] = j\n        \n      elif j == 0: \n        dp[i][j] = i\n      \n      elif word1[i - 1] == word2[j - 1]: \n        dp[i][j] = dp[i - 1][j - 1] \n      \n      else: \n        dp[i][j] = 1 + min(dp[i][j - 1],  \n                            dp[i - 1][j],  \n                            dp[i - 1][j - 1]) \n\n  return dp[m][n]", "category": "Python"}, {"instruction": "Implement a python class named 'Temperature' that ranks a temperature value as cold, warm, or hot given a threshold value of 30.", "input": "", "output": "class Temperature:\n  def __init__(self, value, threshold=30):\n    self.value = value\n    self.threshold = threshold\n\n  def rank(self):\n    if self.value < self.threshold:\n        return \"cold\"\n    elif self.value == self.threshold:\n        return \"warm\"\n    else:\n        return \"hot\"", "category": "Python"}, {"instruction": "Write Python code to extend a string to be twice as long as the original string", "input": "Example string: \"Hello world\"", "output": "input = \"Hello world\"\noutput = input + input", "category": "Python"}, {"instruction": "Write a Python script to create a webserver that can respond to \"GET\" requests from a web browser.", "input": "", "output": "import http.server\nimport socketserver\n\nPORT = 8080\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n    print(\"Serving at port\", PORT)\n    httpd.serve_forever()", "category": "Python"}, {"instruction": "Fix the bug in the following code by modifying the function is_star_jumping_high_enough:\n\ndef is_star_jumping_high_enough(star_height):\n    \"\"\"return true if star height is greater than 5\"\"\"\n    if star_height < 5:\n        return True", "input": "", "output": "def is_star_jumping_high_enough(star_height):\n    \"\"\"return true if star height is greater than 5\"\"\"\n    if star_height > 5:\n        return True", "category": "Python"}, {"instruction": "Create a function in Python that will take two parameters: a string and an integer, and return the string repeated the amount of times specified by the integer.", "input": "", "output": "def repeat(string, num_repetitions):\n    return string * num_repetitions", "category": "Python"}, {"instruction": "Write a Python code snippet to prompt the user to enter their age and store that value in a variable called \"age\".", "input": "", "output": "age = int(input(\"Please enter your age: \"))", "category": "Python"}, {"instruction": "Create a list comprehension statement in Python that prints all the even numbers from a list of numbers from 1 to 10.", "input": "", "output": "[n for n in range(1, 11) if n % 2 == 0]", "category": "Python"}, {"instruction": "Write a Python program that prints all numbers from 1 to 100 that are divisible by both 5 and 7.", "input": "", "output": "for num in range(1, 101):\n    if (num%5==0) and (num%7==0):\n        print(num)", "category": "Python"}, {"instruction": "What is a stack in Computer Science?", "input": "", "output": "A stack is a data structure that works on the principle of Last in First Out (LIFO). It is used to store and retrieve elements in a particular order, and all operations of insertion and retrieval are performed at one end of the stack, referred to as the top. There are two main operations in a stack: Push - adds an item to the top, and Pop - removes an item from the top.", "category": "Python"}, {"instruction": "Create a function for printing each letter of a string on a separate line.", "input": "str = \"Hello World\"", "output": "def print_letter_separately(str): \n\tfor letter in str: \n\t\tprint(letter) \n\n# Output \nprint_letter_separately(str)", "category": "Python"}, {"instruction": "What are the properties of a good algorithm?", "input": "", "output": "A good algorithm should have the following properties: correctness, completeness, accuracy, robustness, time complexity, memory complexity, scalability, and reusability. The correctness of an algorithm means that it should produce the correct output for every possible input. The completeness refers to whether the algorithm will terminate and produce a result for every input. Accuracy refers to the correctness of the results. Robustness refers to the ability of the algorithm to handle unpredictable input and produce the same output every time. Time and memory complexity refers to how much time and memory the algorithm takes to execute. Scalability indicates how well the algorithm can handle larger inputs and outputs, and reusability means how easy it is for other programmers to use the algorithms for their own purposes.", "category": "Python"}, {"instruction": "Compare two dictionaries for equality and return the result.", "input": "a = {1:4, 2:5, 3:6} \nb = {2:5, 3:6, 1:4}", "output": "def compare_dicts(a, b): \n\t# Check key-value pairs in both dicts \n\tif a.items() == b.items(): \n\t\treturn True\n\telse: \n\t\treturn False\n\n# Output \nprint(compare_dicts(a, b))", "category": "Python"}, {"instruction": "Explain the use of try-except statements in Python", "input": "", "output": "Try-except statements are used to handle errors and exceptions in Python. The general syntax for a try-except statement is try: ...except: ... The code that could potentially raise an exception is put inside the try block, while the code to handle the exception is put inside the except block. If an exception occurs, the code inside the except block is executed and the program execution continues normally afterwards. If no exception occurs, the code inside the except block is skipped.", "category": "Python"}, {"instruction": "Rewrite the following selection sort algorithm in Python.", "input": "def selectionSort(arr):\n  for i in range(len(arr)):\n    minIndex = i\n    for j in range(i + 1, len(arr)):\n      if arr[minIndex] > arr[j]:\n        minIndex = j\n    arr[i], arr[minIndex] = arr[minIndex], arr[i]", "output": "def selection_sort(arr):\n  for i in range(len(arr)):\n    min_index = i\n    for j in range(i + 1, len(arr)):\n      if arr[min_index] > arr[j]:\n        min_index = j\n    arr[i], arr[min_index] = arr[min_index], arr[i]", "category": "Python"}, {"instruction": "How can we convert a sql query into pandas code?", "input": "", "output": "We can use the read_sql_query() function in the pandas library to convert a SQL query into pandas code. The read_sql_query() function takes the SQL query and a connection object as argument and returns the corresponding DataFrame object.", "category": "Python"}, {"instruction": "Given a Python dictionary, create a function to return the most common key in the dictionary.", "input": "d = {\n  'a': 4,\n  'b': 3,\n  'c': 2,\n  'd': 2\n}", "output": "def most_common_key(d):\n  counts = [(key, value) for key, value in d.items()]\n  max_count = max(counts, key=lambda item: item[1])\n  return max_count[0]", "category": "Python"}, {"instruction": "What is the difference between a static method and an instance method in Python?", "input": "", "output": "A static method is a method that does not have access to the instance of the class and so it can't be used to access instance variables. A static method is associated with the class itself, not with any particular instance. A static method is often used to create utility functions that don't need to be accessed from instance level. \n\nAn instance method requires an object or instance of a class to work. An instance method can access the instance variables of the class and has access to the self object which is an instance of the class. An instance method can also access static methods and static variables of the class.", "category": "Python"}, {"instruction": "Measure the execution time of a given python script.", "input": "", "output": "import time\n \ndef measure_time():\n  # Start the timer\n  start = time.time()\n \n  # Execute the code\n  # ----- Code to be measured ------\n  # -------------------------------\n \n  # Stop the timer\n  end = time.time()\n  \n  # Return the difference\n  return end - start\n\nexecution_time = measure_time()\nprint(execution_time)", "category": "Python"}, {"instruction": "Find all unique values in a given dataset", "input": "dataset = [['A', 4], ['B', 5], ['A', 3], ['C', 2]]", "output": "# Get all the values from the dataset\nall_values = [value for _, value in dataset]\n\n# Get the unique values\nunique_values = set(all_values)\n\nprint(unique_values)\n\n# Output\n# {2, 3, 4, 5}", "category": "Python"}, {"instruction": "Create a function that returns the `n`th number in the Fibonacci sequence.", "input": "", "output": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)", "category": "Python"}, {"instruction": "Create a function to count the number of characters in a string, without using the len() function.", "input": "", "output": "def count_characters(string):\n    count = 0\n    for char in string:\n        count +=1\n    return count", "category": "Python"}, {"instruction": "Make a class called 'Car' that stores information about a car and contains a function called 'start' which when called, prints out \"Car has started\".", "input": "", "output": "class Car:\n    def __init__(self):\n        self.model = \"\"\n        self.year = 0\n    \n    def start(self):\n        print(\"Car has started\")", "category": "Python"}, {"instruction": "In Python, write code to identify whether a given string contains only numeric values.", "input": "", "output": "# To identify whether a given string contains only numeric values in Python:\n# 1. Use the isdigit method of the str object\n# 2. Pass the given string as an argument to the isdigit method\n# 3. The method will return True if the given string contains only numeric values,\n#    and False otherwise\n\n# Example\ngiven_string = \"1234\"\n\nif given_string.isdigit():\n    print(\"The given string contains only numeric values\")  \nelse:\n    print(\"The given string does not contain only numeric values\")", "category": "Python"}, {"instruction": "Generate a Frequency Table for the following sequence of characters using Python.", "input": "'aabbccddee'", "output": "# Create a frequency table for the given sequence\n# using Python\nfrom collections import Counter\n\nstring = 'aabbccddee'\n# create the Counter object\nfreq_table = Counter(string)\n# print the output\nprint(freq_table)\n\n# Output\nCounter({'a': 2, 'b': 2, 'c': 2, 'd': 2, 'e': 2})", "category": "Python"}, {"instruction": "Describe how to use the following code to generate random numbers.", "input": "import random\n\ndef random_with_N_digits(n):\n    range_start = 10**(n-1)\n    range_end = (10**n)-1\n    return random.randint(range_start, range_end)", "output": "// To generate random numbers using the code provided:\n// 1. Specify number of digits to generate\n// 2. Use the random_with_N_digits function to generate the random number\n// 3. Pass the desired number of digits as the argument in the function\n// 4. The function will return a random number between 10^(n-1) and 10^n-1\n// 5. Use the returned random number for the desired purpose", "category": "Python"}, {"instruction": "Suggest a Python code to parse an XML document.", "input": "", "output": "# Parse an XML document using Python\nimport xml.etree.ElementTree as ET\n\n# load the XML document\ntree = ET.parse('document.xml')\n# get the root element\nroot = tree.getroot()\n# loop through all the elements\nfor element in root.findall('element'):\n    # print the attributes of all elements\n    print(element.attrib)", "category": "Python"}, {"instruction": "Describe how to add an element in a linked list in Python.", "input": "", "output": "// To add an element in a linked list in Python:\n// 1. Create a new node containing the value to be added\n// 2. Set the \"next\" attribute of the new node to point to the current head node\n// 3. Set the head node to be the newly created node\n// 4. Increase the size of the linked list by 1", "category": "Python"}, {"instruction": "Create a function that takes a string and returns a new string with each character capitalized.", "input": "String = \"hello!\"", "output": "\"\"\"\nCreate a function that takes a string and returns a new string with each character capitalized\n\"\"\"\n\ndef capitalize(string):\n    new_string = \"\"\n    for c in string:\n        new_string += c.upper()\n    return new_string\n    \nif __name__ == '__main__':\n    string = \"hello!\"\n    result = capitalize(string)\n    print(result)\n\n# Output\n# HELLO!", "category": "Python"}, {"instruction": "Implement a binary search on the given array.", "input": "Array = [1, 4, 5, 6, 7, 9]", "output": "\"\"\"\nImplement a binary search on a given array\n\"\"\"\n\ndef binary_search(arr, element):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end)//2\n        if arr[mid] == element:\n            return True\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return False\n\nif __name__ == '__main__':\n    arr = [1, 4, 5, 6, 7, 9]\n    element = 7\n    result = binary_search(arr, element)\n    print(result)\n\n# Output\n# True", "category": "Python"}, {"instruction": "Visualize the following on a line chart.", "input": "Data points = [12, 13, 19, 20, 25]", "output": "import matplotlib.pyplot as plt\n\ndata_points = [12, 13, 19, 20, 25]\n\nplt.plot(data_points)\nplt.ylabel(\"data points\")\nplt.xlabel(\"index\")\nplt.title(\"Line chart of data points\")\n\nplt.show()", "category": "Python"}, {"instruction": "Write a code to get the value of pi (to 6 decimal places) using mathematical methods.", "input": "", "output": "\"\"\"\nCalculate the value of pi using mathematical methods\n\"\"\"\n\ndef calculate_pi():\n    pi = 0  \n    n = 1000\n    for n in range(n):\n        pi += ((-1)**n)/(2*n+1)\n    pi = pi*4\n    return round(pi, 6)\n\nif __name__ == '__main__':\n    print(calculate_pi())\n\n# Output\n# 3.141593", "category": "Python"}, {"instruction": "Create a Python function which takes an array and returns true if the array contains all unique values.", "input": "array = [1, 2, 3, 2]", "output": "\"\"\"\nCreate a Python function which takes an array and returns \ntrue if the array contains all unique values\n\"\"\"\n\ndef is_unique(arr):\n    seen = set()\n    for x in arr: \n        if x in seen: \n            return False\n        seen.add(x)\n    return True\n    \nif __name__ == '__main__':\n    arr = [1,2,3,2]\n    result = is_unique(arr)\n    print(result)\n    \n# Output\n# False", "category": "Python"}, {"instruction": "Create a class in Python that implements a stack.", "input": "", "output": "class Stack: \n    def __init__(self): \n        self.stack = []\n\n    def push(self,element): \n        self.stack.append(element)  \n\n    def pop(self): \n        return self.stack.pop()\n\n    def peek(self):\n        return self.stack[-1]", "category": "Python"}, {"instruction": "Make sure the following code runs without errors.", "input": "def calculate_sum(numbers):\n      total = 0\n      for number in numbers\n          total += number\n      return total", "output": "def calculate_sum(numbers):\n      total = 0\n      for number in numbers:\n          total += number\n      return total", "category": "Python"}, {"instruction": "Write a function in Python that takes a list of numbers and returns the greatest difference between any two numbers in the list.", "input": "test_list = [4, 6, 8, 10, 3, 1, 9]", "output": "def greatest_difference(numbers_list):\n    max_difference = 0\n    for num1 in numbers_list:\n        for num2 in numbers_list:\n            if num1 != num2:\n                difference = abs(num1 - num2)\n                if difference > max_difference:\n                    max_difference = difference\n    \n    return max_difference\n\ngreatest_difference(test_list)", "category": "Python"}, {"instruction": "Build a deep learning model in Python to predict the stock price of a given company.", "input": "", "output": "# import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# import data\ndata = pd.read_csv('stock_data.csv')\n\n# preprocess data\nX = data.iloc[:,:-1].values\ny = data.iloc[:,-1].values\n\n# split into training set and test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# feature scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\n# build the model\nimport keras\nfrom keras.layers import Dense\nfrom keras.models import Sequential\n\nmodel = Sequential()\nmodel.add(Dense(units=6, activation='relu', input_dim=4))\nmodel.add(Dense(units=4, activation='sigmoid'))\nmodel.add(Dense(units=1, activation='linear'))\nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae','accuracy'])\nmodel.fit(X_train, y_train, epochs=20, batch_size=10)\n\n# test the model\ny_pred = model.predict(X_test)\n\n# evaluate the model\nfrom sklearn.metrics import r2_score\nr2_score(y_test, y_pred)", "category": "Python"}, {"instruction": "Print out the content of a two-dimensional array.", "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def print_2d_array(arr):\n    for row in arr:\n        for el in row:\n            print(el, end=' ')\n        print(\"\")", "category": "Python"}, {"instruction": "Create a method to reverse a linked list.", "input": "", "output": "def reverse_list(head): \n  \n    prev = None\n    current = head \n    while(current is not None): \n        next = current.next\n        current.next = prev \n        prev = current \n        current = next\n    head = prev \n    return head", "category": "Python"}, {"instruction": "Create a function to find if a given input is a prime number or not.", "input": "", "output": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False        \n    return True", "category": "Python"}, {"instruction": "Create a program to find the sum of all the even numbers from 1 to n.", "input": "", "output": "def find_sum(n):  \n    sum = 0\n    for i in range (1, n): \n        if (i % 2 == 0): \n            sum = sum + i \n    return sum", "category": "Python"}, {"instruction": "You need to read a list of strings, split each into 2 substrings, and output the 2 substrings as a tuple.", "input": "['international', 'imagination', 'skyscraper']", "output": "def split_words(string_list):\n    new_list = []\n    for string in string_list:\n        mid = int(len(string)/2) \n        new_list.append( (string[:mid], string[mid:]) )\n    return new_list", "category": "Python"}, {"instruction": "Create a method to checkout the content of dictionary.", "input": "", "output": "def check_dict(dictionary):\n    for key in dictionary:\n        print(key + \": \" + str(dictionary[key]))", "category": "Python"}, {"instruction": "Implement a reverse method to reverse the content of an array.", "input": "[1, 2, 3, 4, 5]", "output": "def reverse(arr): \n    n =len(arr) \n    for i in range(n // 2): \n        temp = arr[i] \n        arr[i] = arr[n - i - 1] \n        arr[n - i - 1] = temp\n  \n    return arr", "category": "Python"}, {"instruction": "Create a method to print all the prime numbers up to n.", "input": "", "output": "def print_prime_numbers(n):\n    primes = [] \n    for num in range(2, n + 1): \n        is_prime = True\n        for i in range(2, num): \n            if (num % i == 0): \n                is_prime = False\n                break\n        if is_prime: \n            primes.append(num) \n    print(primes)", "category": "Python"}, {"instruction": "Create a Python program to generate the Fibonacci series between 0 and 10.", "input": "", "output": "def FibonacciSequence():\n  a, b = 0, 1\n  for _ in range(10):\n    yield a\n    a, b = b, a + b\n\nfor num in FibonacciSequence():\n  print(num)", "category": "Python"}, {"instruction": "Create a Python program to extract all unique words from a given sentence.", "input": "This sentence contains multiple words.", "output": "sentence_words = set(sentence.split())\nunique_words = set(word for word in sentence_words if word not in visited_words)\nprint(unique_words)\n# Output: {'contains', 'words', 'multiple', 'This'}", "category": "Python"}, {"instruction": "Write a function in Python that takes in two strings and concatenates them together with a space in between.", "input": "", "output": "def my_concat(string1, string2)\n    return string1 + ' ' + string2", "category": "Python"}, {"instruction": "Find the minimum element in an unordered array given in Python.", "input": "arr = [17, 21, 4, 7, 29, 34, 11]", "output": "min_ele = arr[0]\nfor i in range (1, len(arr)):\n    if (min_ele > arr[i]):\n       min_ele = arr[i] \n    \nprint(\"Minimum element in array is\", min_ele)", "category": "Python"}, {"instruction": "Write Python code to generate a random password of 8 alphanumeric characters.", "input": "", "output": "import string\nimport random\n\ndef generate_password():\n    chars = string.ascii_letters + string.digits\n    size = 8\n    return ''.join(random.choice(chars) for _ in range(size))\n\nprint(generate_password())\n\n// Output:\n// h5Kp0FHc", "category": "Python"}, {"instruction": "Clean the given data in Python by replacing NaN and None with 0.", "input": "import pandas as pd\n\ndata = [[1, 'John', None], [2, 'Jane', 18], [3, 'Rudy', NaN]]\ndf = pd.DataFrame(data, columns = ['id', 'name', 'age'])", "output": "import pandas as pd\n\ndata = [[1, 'John', None], [2, 'Jane', 18], [3, 'Rudy', NaN]]\ndf = pd.DataFrame(data, columns = ['id', 'name', 'age'])\n\ndf.fillna(0, inplace = True)", "category": "Python"}, {"instruction": "Write a function returning the factorial of a given number in Python.", "input": "", "output": "def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n-1)", "category": "Python"}, {"instruction": "Build a linear regression model using Python's scikit learn library.", "input": "import pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame({\n    'x': [2.5, 0.5, 2.2, 1.9, 3.1, 2.3, 2, 1, 1.5, 1.1],\n    'y': [2.4, 0.7, 2.9, 2.2, 3, 2.7, 1.6, 1.1, 1.6, 0.9]\n    })\n\nX = data['x'].values.reshape(-1, 1)\ny = data['y'].values.reshape(-1, 1)", "output": "from sklearn.linear_model import LinearRegression\n\n# Create linear regression model\nmodel = LinearRegression()\n\n# Train the model using the training set\nmodel.fit(X, y)\n\n# Make predictions using the testing set\ny_pred = model.predict(X)", "category": "Python"}, {"instruction": "Fix the Python code below to make the script work.", "input": "import json\n\ndata = {\n  \"name\": \"John Doe\",\n  \"age\": 20\n}\n\nwith open(\"data.txt\", \"w\") as outfile:\n    json.dump(data, outfile)", "output": "import json\n\ndata = {\n  \"name\": \"John Doe\",\n  \"age\": 20\n}\n\nwith open(\"data.txt\", \"w\") as outfile:\n    json.dump(data, outfile, indent=4)", "category": "Python"}, {"instruction": "Change the variable names in the following Python code.", "input": "x1 = 10\ny1 = 20", "output": "a = 10\nb = 20", "category": "Python"}, {"instruction": "What is the primary purpose of object-oriented programming?", "input": "", "output": "The primary purpose of object-oriented programming is to create software systems that are modular, reusable, and maintainable. By modeling real-world objects and their behavior as individual components, object-oriented programming enables developers to create and manage complex systems in an organized and efficient manner. It also allows the code to be easily modified and adapted to fit the changing needs of the user. Additionally, object-oriented programming makes software more secure, as all the code is contained within individual objects which can be handled securely.", "category": "Python"}, {"instruction": "What is the purpose of an abstract data type in software engineering?", "input": "", "output": "The purpose of an abstract data type in software engineering is to allow for the creation of data structures which have a certain behavior, without having to specify exactly how the data is represented in memory. Abstract data types are useful for organizing large amounts of data in complex systems, as they provide a clear interface for users to interact with the data without requiring them to understand the underlying implementation. By separating the data structures from the algorithms that operate on them, abstract data types can also reduce the complexity of software development.", "category": "Python"}, {"instruction": "Explain what a Turing machine is.", "input": "", "output": "A Turing machine is a mathematical model of computation that was initially developed by Alan Turing in 1936. It is a device that can read and write symbols on a strip of tape according to a set of instructions. The tape is divided into individual squares, each of which can hold one symbol at a time. The machine can move either right or left one square at a time, and has a set of instructions that determine how its internal state changes based on which symbol it reads. The Turing machine is a powerful tool for understanding computation, as it can be used to simulate any algorithm or computation.", "category": "Python"}, {"instruction": "Identify a potential bug in the following code.", "input": "def add(a, b):\n    c = a + b\n    return c", "output": "A potential bug in this code is that if the parameters a and b are passed in as strings instead of numbers, then the resulting c will be a concatenation of the two strings rather than a mathematical addition. To avoid this error, the parameters should be converted to the appropriate data type before performing the addition.", "category": "Python"}, {"instruction": "Implement a linked list in Python.", "input": "", "output": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert_at_head(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def append(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            return\n        curr_node = self.head\n        while curr_node.next is not None: \n            curr_node = curr_node.next\n        curr_node.next = new_node\n\n    def delete_by_value(self, data):\n        if self.head is None:\n            return\n        curr_node = self.head\n        if curr_node.data == data:\n            self.head = curr_node.next\n            return\n        prev_node = curr_node\n        while curr_node is not None:\n            if curr_node.data == data:\n                break\n            prev_node = curr_node\n            curr_node = curr_node.next\n        if curr_node is None:\n            return\n        prev_node.next = curr_node.next", "category": "Python"}, {"instruction": "Compare the performance of Grover's algorithm and classical search algorithms.", "input": "", "output": "Grover's algorithm is a quantum algorithm that offers exponential speedup over classical search algorithms. As an example of how it works, assume we want to find an element in a database of size N. For a classical algorithm, the best search time is O(log N). In contrast, Grover's algorithm provides a search time of only O((log N)^2). Thus, using Grover's algorithm, the search time is reduced by a factor of log N for a given problem size. Furthermore, Grover's algorithm does not require any additional memory to store data, as it operates directly on the states of the quantum system. This can also provide significant advantages compared to classical search algorithms.", "category": "Python"}, {"instruction": "Create a class to represent a two-dimensional vector.", "input": "", "output": "class Vector2D(object):\n  '''Class to represent a two-dimensional vector'''\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n  \n  def __add__(self, other):\n    return Vector2D(self.x + other.x, self.y + other.y)\n  \n  def __sub__(self, other):\n    return Vector2D(self.x - other.x, self.y - other.y)\n  \n  def __mul__(self, scalar):\n    return Vector2D(self.x * scalar, self.y * scalar)", "category": "Python"}, {"instruction": "Write a Python code to print \"Hello World!\" on the console.", "input": "", "output": "print(\"Hello World!\")", "category": "Python"}, {"instruction": "Manipulate the given list in Python to include the new element at the beginning.", "input": "list = [1, 2, 3]\nnew_element = 0", "output": "list = [0] + list \nlist.insert(0, new_element)", "category": "Python"}, {"instruction": "Create a Python program to generate a random string of 5 characters.", "input": "", "output": "import random\n\ndef generate_random_string():\n  characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n  random_string = ''\n  for x in range(5):\n    random_string += random.choice(characters)\n  \n  return random_string\n\nprint(generate_random_string())", "category": "Python"}, {"instruction": "Write a function in Python to check if two strings are an anagram or not.", "input": "", "output": "def is_anagram(str1, str2): \n    if len(str1) != len(str2): \n        return False \n  \n    s1 = sorted(str1) \n    s2 = sorted(str2) \n  \n    if s1 == s2: \n        return True\n  \n    return False", "category": "Python"}, {"instruction": "Generate a 5-element tuple of random numbers between 5 and 15 using Python.", "input": "", "output": "import random\n\nrandom_tuple = tuple(random.randint(5, 15) for _ in range(5))", "category": "Python"}, {"instruction": "Write a Python function to count the letters in a given sentence and return a dictionary of letter counts.", "input": "sentence = \"Hello World!\"", "output": "def letter_counts(sentence):\n  count_dict = {}\n  for char in sentence:\n    if char.isalpha():\n      if char in count_dict:\n        count_dict[char] += 1\n      else:\n        count_dict[char] = 1\n  return count_dict", "category": "Python"}, {"instruction": "Rewrite the following code into a generator.", "input": "def some_function(nums):\n  output = []\n  for x in nums:\n    y = x ** 2\n    output.append(y)\n  return output", "output": "def some_function(nums):\n  for x in nums:\n    yield x ** 2", "category": "Python"}, {"instruction": "Generate a 3x3 matrix of random real numbers in the range of 0.0 to 1.0.", "input": "", "output": "import numpy as np\nnp.random.RandomState(0).rand(3, 3)", "category": "Python"}, {"instruction": "Suggest a sorting algorithm to sort the following array in descending order.", "input": "arr = [17, 21, 4, 7, 29, 34, 11]", "output": "A Bubble Sort algorithm could be used to sort the given array in descending order. This algorithm compares adjacent elements in the array and swaps them if the element on the left is larger than the element on the right. This process is continued until the array is sorted.", "category": "Python"}, {"instruction": "Write a function that takes a string and returns a dictionary counting each character in the string.", "input": "", "output": "def character_count(str): \n    res = {} \n  \n    for keys in str: \n        res[keys] = res.get(keys, 0)+1\n        \n    return res", "category": "Python"}, {"instruction": "Generate a random number between 1 and 10, inclusive.", "input": "", "output": "import random\n\nrandom_num = random.randint(1, 10)\nprint(random_num)", "category": "Python"}, {"instruction": "Generate an array of 10 random numbers between 1 and 100 using Python", "input": "", "output": "import random\n\ndef generate_random_array(n):\n    array= []\n    for _ in range(n):\n        array.append(random.randint(1, 100))\n    return array\n\nprint(generate_random_array(10))\n\n// Output\n// [14, 20, 32, 84, 59, 45, 11, 34, 57, 19]", "category": "Python"}, {"instruction": "Perform a linear search in a list named 'mylist' and return the index of the first occurrence of a target value.", "input": "mylist = [1, 2, 3, 4, 5, 6, 7]\ntarget = 4", "output": "def linear_search(mylist, target):\n for i in range(len(mylist)):\n if mylist[i] == target:\n return i\n return -1", "category": "Python"}, {"instruction": "Initialize an empty list in Python and then add three items to it.", "input": "", "output": "my_list = []\nmy_list.append(\"item1\")\nmy_list.append(\"item2\")\nmy_list.append(\"item3\")", "category": "Python"}, {"instruction": "Create a function to check whether a number entered is prime or not.", "input": "", "output": "def is_prime(number):\n   # If given number is greater than 1\n   if number > 1:\n       # Iterate from 2 to n / 2\n       for i in range(2, number//2):\n           # If num is divisible by any number between \n           # 2 and n / 2, it is not prime\n           if (number % i) == 0:\n               return False\n       else:\n           return True\n# If the number is less than or equal to 1\n   else:\n       return False", "category": "Python"}, {"instruction": "Create a function that takes a number and returns the sum of all its divisors.", "input": "", "output": "def get_divisor_sum(n):\n    divisor_sum = 0\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            divisor_sum += i\n    return divisor_sum", "category": "Python"}, {"instruction": "Make a code to determine whether a given number is prime or not.", "input": "", "output": "def is_prime(x):\n    for i in range(2,int(x**0.5)+1):\n        if x % i == 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Write a function in Python that takes a string and a set of characters as inputs and removes all characters in the string that are in the set.", "input": "string = \"Hello, world!\"\ncharset = [\"o\", \"!\"]", "output": "def removeChars(string, charset):\n\tresult = \"\"\n\tfor c in string:\n\t\tif c not in charset:\n\t\t\tresult += c\n\treturn result", "category": "Python"}, {"instruction": "Given the following array of dictionaries, write a function in Python to find and return the longest common prefix in the keys of dictionaries.", "input": "arr_of_dictionaries = [\n    {\n        \"name\": \"John Doe\",\n        \"country\": \"United States\"\n    },\n    {\n        \"name\": \"Jane Doe\",\n        \"state\": \"New York\"\n    }\n]", "output": "def longest_common_prefix(arr_of_dictionaries):\n    prefix = ''\n    if len(arr_of_dictionaries) == 0:\n        return prefix\n    first_dict_keys = arr_of_dictionaries[0].keys()\n    for i in range(len(list(first_dict_keys)[0])):\n        char = list(first_dict_keys)[0][i]\n        for dict in arr_of_dictionaries:\n            if list(dict.keys())[0][i] != char:\n                return prefix\n        prefix += char\n    return prefix", "category": "Python"}, {"instruction": "Using the given list, create a function in Python that classifies each number as odd or even.", "input": "lst = [1, 2, 6, 8, 4]", "output": "def classifyList(lst):\n    result = []\n    for num in lst: \n        if num % 2 == 0: \n            result.append('even')\n        else:\n            result.append('odd')\n    return result", "category": "Python"}, {"instruction": "Edit the original code snippet so that it prints in the correct syntax for a Python 3 script.", "input": "#!/usr/bin/python\nprint \"Hello, World!\"", "output": "#!/usr/bin/python\nprint(\"Hello, World!\")", "category": "Python"}, {"instruction": "Create a function to generate the nth term in the Fibonacci sequence.", "input": "n = 3", "output": "def get_fib_term(n): \n    if n <= 1: \n        return n \n    else: \n        return get_fib_term(n-1) + get_fib_term(n-2)\n  \nprint(get_fib_term(3))", "category": "Python"}, {"instruction": "Create a program to generate an XOR linked list.", "input": "", "output": "class Node: \n    def __init__(self, data): \n        self.data = data \n        self.npx = None\n  \nclass XORLinkedList: \n    def __init__(self): \n        self.head = None\n  \n    def add(self, item): \n        new_node = Node(item) \n        new_node.npx = self.head \n        if self.head is not None: \n            self.head.npx = new_node.npx ^ self.head.npx \n        self.head = new_node \n  \n    def printList(self): \n        temp = self.head \n        while(temp): \n            print(temp.data), \n            prev = temp \n            temp = self.XOR(temp.npx, prev) \n  \n    def XOR(self, a, b): \n        return (a or b) and (not a or not b) \n  \na = XORLinkedList() \na.add(2) \na.add(3) \na.add(4) \na.add(5) \na.printList()", "category": "Python"}, {"instruction": "Given an array, write a program that checks if any two numbers sum to 0.", "input": "arr = [-3, -2, 1, 2, 3]", "output": "def check_if_sum_zero(arr): \n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] + arr[j] == 0): \n                return True\n    return False\n\nprint(check_if_sum_zero([-3, -2, 1, 2, 3]))", "category": "Python"}, {"instruction": "Using an object-oriented programming language, create a class that has two methods - one to calculate the area of a circle and another to calculate the circumference.", "input": "", "output": "class Circle():\n    def __init__(self, radius):\n        self.radius = radius\n    def area(self): \n        return self.radius ** 2 * 3.14 \n    def circumference(self): \n        return 2 * self.radius * 3.14", "category": "Python"}, {"instruction": "Create an algorithm to sort a list of numbers in ascending order.", "input": "lst = [2, 5, 1, 7, 4]", "output": "def sort_list_ascending(lst):\n    # Traverse through all array elements \n    for i in range(len(lst)): \n  \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(lst)): \n            if lst[min_idx] > lst[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        lst[i], lst[min_idx] = lst[min_idx], lst[i] \n  \n    return lst\n  \n# Driver code to test above \nlst = [2, 5, 1, 7, 4] \nprint(sort_list_ascending(lst))", "category": "Python"}, {"instruction": "Design a function to remove duplicates from an array", "input": "", "output": "def remove_duplicates(arr):\n    # Stores the unique elements\n    unique = []\n\n    # Iterate through the array\n    for elem in arr:\n        # If the element is not already in the unique list\n        if elem not in unique:\n            # Add it to the unique list\n            unique.append(elem)\n\n    # Return the array without duplicates\n    return unique", "category": "Python"}, {"instruction": "Write a Python program to print out the Fibonacci sequence up to 20 numbers", "input": "", "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b \n\n# Driver Program \nprint(\"Fibonacci sequence:\") \nfor i in range(20): \n    print(fibonacci(i))", "category": "Python"}, {"instruction": "Parse the following JSON and extract the value of the variable 'price'.", "input": "`{\n \"item\": \"Shoes\",\n \"price\": 125\n}`", "output": "import json \n\n# parse the JSON string\ndata = json.loads(input_json)\n\n# extract the value of the price variable\nprice = data['price']", "category": "Python"}, {"instruction": "Create a function in Python to evaluate if a given number is prime.", "input": "", "output": "def is_prime(num):\n    if num <= 1: \n        return False\n    for i in range(2, num//2 + 1): \n        if num % i == 0: \n            return False\n    return True", "category": "Python"}, {"instruction": "Write a code to find the maximum subarray sum in an array using dynamic programming.", "input": "", "output": "def maxSubArraySum(arr): \n    n = len(arr) \n  \n    max_so_far = -float('inf') \n    max_ending_here = 0\n  \n    for i in range(0, n): \n        max_ending_here = max_ending_here + arr[i] \n        if (max_so_far < max_ending_here): \n            max_so_far = max_ending_here \n  \n        if max_ending_here < 0: \n            max_ending_here = 0   \n    return max_so_far", "category": "Python"}, {"instruction": "Implement a function in Python to convert a string containing dates from the format MM/DD/YYYY to DD-MM-YYYY.", "input": "\"02/20/2020\"", "output": "def mmddyyyy2ddmmyyyy(date_string):\n    if len(date_string) != 10:\n        raise ValueError('Invalid date format')\n    mm, dd, yyyy = date_string.split('/')\n    new_date_string = '{}-{}-{}'.format(dd, mm, yyyy)\n    return new_date_string", "category": "Python"}, {"instruction": "Rewrite the given JavaScript code in Python.", "input": "let array = [0,1,2,3];\n  const newArray = array.map(item => item + 3);", "output": "array = [0,1,2,3]\nnew_array = list(map(lambda item: item + 3, array))", "category": "Python"}, {"instruction": "Determine the output of the given Python code.", "input": "x = [1, 2, 3, 4, 5] \ny = x \ny[2] = 6", "output": "The output of the given Python code is [1, 2, 6, 4, 5].", "category": "Python"}, {"instruction": "Write a Python code to calculate the sum of natural numbers up to n.", "input": "", "output": "def n_sum(n):\n    sum = 0\n    for i in range(n+1):\n        sum += i\n    return sum", "category": "Python"}, {"instruction": "Create an if-else statement in Python that checks if an integer is even or odd.", "input": "", "output": "if num % 2 == 0:\n    print(\"The number is even\")\nelse:\n    print(\"The number is odd\")", "category": "Python"}, {"instruction": "Given a list of numbers, write a function to find the largest value in the list.", "input": "lst = [1, 5, 9, 12, 8]", "output": "def get_largest_value(lst):\n    max_value = lst[0]\n    for num in lst:\n        if num > max_value:\n            max_value = num\n    return max_value\n\nprint(get_largest_value(lst))", "category": "Python"}, {"instruction": "Concisely describe how a Linked List works.", "input": "", "output": "A linked list is a linear data structure in which each node is comprised of a data element as well as a pointer to the next node in the list. This allows it to form a chain, with each node pointing to the next node in the list and the last node pointing to null.", "category": "Python"}, {"instruction": "Create a program in Python that calculates the average of numbers in a list.", "input": "[9, 5, 10, 12]", "output": "def average(numbers):\n    return sum(numbers) / len(numbers)\n\nprint(average([9, 5, 10, 12]))   # Output: 9.5", "category": "Python"}, {"instruction": "Create a Python function to parse a string and remove all special characters.", "input": "", "output": "import re\n\ndef remove_special_chars(s):\n    return re.sub(r'[^\\w\\s]','', s)", "category": "Python"}, {"instruction": "Create a class in Python called 'Car' and add instance variables for the car's make, model and year.", "input": "", "output": "class Car:\n    \n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year", "category": "Python"}, {"instruction": "Write a Python program to print out the list of even numbers from 0 to given limit.", "input": "limit = 10", "output": "# declare list of numbers\nnumbers = [x for x in range(0, limit+1)]\n\n# declare empty list of even numbers\neven_numbers = []\n\n# loop through list of numbers\nfor num in numbers:\n    # if number is even, append to even_numbers list\n    if num % 2 == 0:\n        even_numbers.append(num)\n\n# print even numbers\nprint(even_numbers) # Output: [0, 2, 4, 6, 8, 10]", "category": "Python"}, {"instruction": "Complete the following code to shuffle an array of elements.", "input": "#Declaring an array\narr = [1, 2, 3, 4, 5]\n\n# Your code\ndef shuffle(arr):", "output": "#Declaring an array\narr = [1, 2, 3, 4, 5]\n\n# Your code\ndef shuffle(arr):  \n    for i in range(len(arr)-1, 0, -1): \n        j = random.randint(0, i+1)\n        arr[i], arr[j] = arr[j], arr[i] \n    return arr", "category": "Python"}, {"instruction": "Suggest a better algorithm to find the minimum element in a given array.", "input": "", "output": "The better algorithm would be to use a divide and conquer approach. This approach involves splitting the array into two halves, finding the minimum element in each half and then comparing the two elements to determine the overall minimum. This is a faster algorithm than the linear search approach in which we traverse the array from start to end and compare each element with the current minimum.", "category": "Python"}, {"instruction": "Explain what a for loop does in Python.", "input": "", "output": "A for loop in Python is used to iterate over a sequence (list, tuple, string) or other iterable objects. It executes a set of statements specified in the for loop for each item of the sequence. It makes it easier to write and execute code multiple times without having to write the same code multiple times.", "category": "Python"}, {"instruction": "Edit a python function to generate the fibonacci sequence.", "input": "def fibonacci(n):\n    a = 1\n    b = 0\n    for i in range(n):\n        print(a)\n        a, b = b, a+b", "output": "def fibonacci(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        print(a)\n        a, b = b, a+b", "category": "Python"}, {"instruction": "Create a loop to traverse a given binary tree.", "input": "", "output": "def traverse_tree(root):\n\n    # Initialize the stack\n    stack = [root]\n\n    # traversal loop\n    while stack:\n        node = stack.pop()\n\n        # Do something with the node\n        ...\n\n        # Push the left and right nodes to the stack\n        if node.right:\n            stack.append(node.right)\n        if node.left:\n            stack.append(node.left)", "category": "Python"}, {"instruction": "Design a program to find the occurrence of a given character in a given string.", "input": "Given string: \"Hello World!\"\nCharacter to find: o", "output": "def occurance_count(str, char):\n    count = 0\n    for c in str:\n        if c == char:\n            count += 1\n    \n    return count", "category": "Python"}, {"instruction": "Design a program to find the nth Fibonacci number.", "input": "n: 10", "output": "def nth_fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        n1, n2 = 1, 1\n        for i in range(2, n):\n            n1, n2 = n2, n1 + n2\n        return n2", "category": "Python"}, {"instruction": "Design a program to find the intersection of two given arrays.", "input": "list_one=[5, 10, 15, 20, 25]\nlist_two=[15, 17, 20, 22, 25, 27]", "output": "def intersection(list_one, list_two):\n    lst = []\n    for i in list_one:\n        if i in list_two:\n            lst.append(i)\n    return lst", "category": "Python"}, {"instruction": "Design a program to flatten a given list.", "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def flatten_list(lst):\n    res = []\n    for l in lst:\n        for i in l:\n            res.append(i)\n    return res", "category": "Python"}, {"instruction": "Design a program to compare two sorted lists and returning list with the common elements.", "input": "list_one=[5, 10, 15, 20, 25]\nlist_two=[15, 17, 20, 22, 25, 27]", "output": "def compare_list(list_one, list_two):\n    common_list = []\n    i, j = 0, 0\n    while (i < len(list_one) and j < len(list_two)):\n        if list_one[i] == list_two[j]:\n            common_list.append(list_one[i])\n            i += 1\n            j += 1\n        elif list_one[i] < list_two[j]:\n            i += 1\n        else:\n            j += 1\n    return common_list", "category": "Python"}, {"instruction": "Rewrite the following code so it can take a list as input instead of an integer.", "input": "def list_sum(num):\n    total = 0\n    for x in range(num):\n        total += x\n    return total", "output": "def list_sum(input_list):\n    total = 0\n    for item in input_list:\n        total += item\n    return total", "category": "Python"}, {"instruction": "Write a Python function to check whether a string has all unique characters.", "input": "", "output": "def all_unique(string): \n  # loops through each character in string \n  for char in string: \n  \n    # if character appears more than once, \n    # return False \n    if string.count(char) > 1: \n      return False \n      \n  # return True if no characters appear more than once\n  return True", "category": "Python"}, {"instruction": "Write a Python program to find out the common items from two given arrays.", "input": "arr1 = [1, 2, 3, 5, 7 ]\narr2 = [2, 3, 5, 6, 7]", "output": "common_items = []\n\nfor item in arr1:\n  if item in arr2:\n    common_items.append(item)\n\nprint(common_items)  # Output: [2, 3, 5, 7]", "category": "Python"}, {"instruction": "Edit the following code snippet to add an error handling that allows the function to return an appropriate message when an invalid input is received.", "input": "def factorial(n):\n  \tif n == 0:\n  \t   return 1\n\telse:\n  \t   return n * factorial(n-1)", "output": "def factorial(n):\n  if n < 0:\n    return \"Invalid input!\"\n  elif n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)", "category": "Python"}, {"instruction": "Modify the following code to handle an input which is a negative number.", "input": "def power_func(number):\n    if number >= 0:\n        return number**2", "output": "def power_func(number):\n    if number < 0:\n        return \"Invalid input!\"\n    else:\n        return number**2", "category": "Python"}, {"instruction": "Improve the following code to handle an input which is an empty list.", "input": "def check_even(arr):\n    if arr == []:\n        return \"The list is empty!\"\n    else:\n        return all(x % 2 == 0 for x in arr)", "output": "def check_even(arr):\n    if arr == []:\n        return \"The list is empty!\"\n    elif not arr:\n        return \"The list is empty!\"\n    else:\n        return all(x % 2 == 0 for x in arr)", "category": "Python"}, {"instruction": "What data type should you use to store a list like [4, 7, 2] in a Python variable?", "input": "", "output": "The data type you should use to store a list like [4, 7, 2] in a Python variable is a list. The list type is specified using square brackets when declaring the variable. For example: my_list = [4, 7, 2].", "category": "Python"}, {"instruction": "Write a function to remove all duplicate elements in an array.", "input": "data = [1, 2, 3, 2, 4, 5]", "output": "def remove_duplicates(data):\n    \"\"\"Remove all duplicate elements in an array\"\"\"\n    \n    # Initialize an empty list\n    unique_data = []\n\n    # Iterate over the data\n    for i in data:\n        # Check if element is not already in list\n        if i not in unique_data:\n            # If not, then add to list\n            unique_data.append(i)\n    \n    return unique_data\n\nprint(remove_duplicates(data)) # prints [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Write a code to print out all the prime numbers between 2 and 10.", "input": "", "output": "# initialize an empty list to store prime numbers\nprime_numbers = []\n\n# Iterate over the range from 2 to 10\nfor num in range(2, 11):\n    cnt = 0\n    # check if the number is divisible by any natural number from 2 to num-1\n    for i in range(2, num):\n        if num % i == 0:\n            cnt += 1\n    # if the number is not divisible by any of the numbers then add to the list\n    if cnt == 0:\n        prime_numbers.append(num)\n\nprint(prime_numbers) # prints [2, 3, 5, 7]", "category": "Python"}, {"instruction": "Write a code to find the square of the first n numbers.", "input": "", "output": "def square_of_first_n_number(n):\n    \"\"\"Find the square of the first n numbers\"\"\"\n    \n    # Initialize an empty list\n    squares = []\n\n    # Iterate to the first n numbers\n    for i in range(n):\n        # Compute the square and append to the list\n        squares.append(i * i)\n\n    return squares", "category": "Python"}, {"instruction": "Modify the function to also remove all whitespace from the string.", "input": "", "output": "import re\n\ndef remove_special_chars_and_whitespace(s):\n    return re.sub(r'\\s','', re.sub(r'[^\\w\\s]','', s))", "category": "Python"}, {"instruction": "Group a list of dictionaries by a shared key.", "input": "mylist = [{'name': 'john', 'age': 20}, {'name': 'jane', 'age': 19}, {'name': 'bob', 'age': 22}]", "output": "from collections import defaultdict\n\ngrouped_dicts = defaultdict(list)\n\nfor x in mylist:\n grouped_dicts[x['name']].append(x)", "category": "Python"}, {"instruction": "Using list comprehension, create a list of even numbers between 1 and 20 in Python.", "input": "", "output": "even_nums_list = [num for num in range(1, 21) if num % 2 == 0]", "category": "Python"}, {"instruction": "Debug the code to encounter the issue mentioned in the comment.", "input": "def validate_password(password):\n    if len(password) < 8:\n        # bug: print message\n        return False\n    else:\n        return True", "output": "def validate_password(password):\n    if len(password) < 8:\n        # bug: print message\n        print('Password must be at least 8 characters.')\n        return False\n    else:\n        return True", "category": "Python"}, {"instruction": "Reverse a given string.", "input": "\"Hello World!\"", "output": "# Initialize the input string\nstring = \"Hello World!\"\n \n# Get the string length\nstringLength = len(string)\n \n# Create an empty string for storing the reversed string\nreversedString = \"\"\n \n# Iterate over the input string in reverse order\nfor i in range(stringLength -1, -1, -1):\n    reversedString += string[i]\n \n# Print the reversed string\nprint(reversedString) # Prints !dlroW olleH", "category": "Python"}, {"instruction": "Implement a non-recursive algorithm to compute the factorial of a given number", "input": "7", "output": "def factorial(n): \n    res = 1 \n    # Calculate value of \n    # factorial in for loop \n    for i in range(2,n+1): \n        res = res * i \n    return res \n\nn = 7\nprint(\"Factorial of\",n,\"is\",factorial(n))", "category": "Python"}, {"instruction": "Return a new array after removing duplicates from a given array.", "input": "[1, 2, 3, 2, 3, 4]", "output": "def remove_duplicates(arr):\n    \"\"\"\n    Return a new array after removing duplicates from a given array.\n    \"\"\"\n    new_arr = []\n    for num in arr:\n        if num not in new_arr:\n            new_arr.append(num)\n    return new_arr\n\narr = [1, 2, 3, 2, 3, 4]\nnew_arr = remove_duplicates(arr)\nprint(new_arr)", "category": "Python"}, {"instruction": "Return the index of a given value in a list.", "input": "[1,2,3], 3", "output": "def find_index(lst, value):\n    \"\"\"\n    Return the index of a given value in a list.\n    \"\"\"\n    for i, v in enumerate(lst):\n        if v == value:\n            return i\n    return -1\n\nlst = [1,2,3]\nval = 3\nfind_index(lst, val)", "category": "Python"}, {"instruction": "Generate a list comprehension that has the multiples of 3 between 0 and 30", "input": "", "output": "multiples_of_3 = [x for x in range(0, 31) if x % 3 == 0]", "category": "Python"}, {"instruction": "Sort the given array using insertion sort", "input": "[5, 1, 4, 2, 8]", "output": "def insertion_sort(arr):\n    \"\"\"\n    Sort given array using insertion sort\n    \"\"\"\n    # Traverse through the array \n    for i in range(1, len(arr)): \n        key = arr[i] \n  \n        # Move elements of arr[0..i-1], that are \n        # greater than key, to one position ahead \n        # of their current position \n        j = i - 1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \n    return arr\n\narr = [5, 1, 4, 2, 8]\nsorted_arr = insertion_sort(arr)\nprint(sorted_arr)", "category": "Python"}, {"instruction": "Find the minimum of two given numbers.", "input": "4, 6", "output": "def min_two(a, b):\n  if a < b:\n    return a\n  else:\n    return b\n\nmin_val = min_two(4, 6)\nprint(min_val)", "category": "Python"}, {"instruction": "Implement the code in the input to the output", "input": "def do_something(data):\n    # TODO: Your code here\n    pass", "output": "def do_something(data):\n    # Your code here\n    result = 1\n    for num in data:\n        result *= num\n    return result", "category": "Python"}, {"instruction": "Create a class that creates a stack object and implements push and pop functions", "input": "", "output": "class Stack: \n\tdef __init__(self): \n\t\tself.stack = [] \n\n\t# This method adds an element at the top of the stack \n\tdef push(self, item): \n\t\tself.stack.append(item) \n \n\t# This method removes the topmost element and returns it \n\tdef pop(self): \n\t\tif self.is_empty(): \n\t\t\treturn None\n\t\treturn self.stack.pop() \n  \n\t# This method returns the topmost element without removing it \n\tdef peek(self): \n\t\tif self.is_empty(): \n\t\t\treturn None\n\t\treturn self.stack[-1] \n  \n\t# This method returns true or false depending on whether the stack is empty or not \n\tdef is_empty(self): \n\t\treturn len(self.stack) == 0", "category": "Python"}, {"instruction": "Generate a list that has the all even numbers between 1 and 50, inclusive.", "input": "", "output": "even_nums_list = [x for x in range(1,51) if x % 2 == 0]", "category": "Python"}, {"instruction": "Write a function to return the index of an item in an array.", "input": "arr = [1, 2, 3, 4, 5]\nx = 4", "output": "def index(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Compute the sum of two given lists", "input": "[2,3,4], [1,2,3]", "output": "def sum_lists(lst1, lst2):\n    \"\"\"\n    Compute the sum of two given lists.\n    \"\"\"\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i] + lst2[i])\n    return new_list\n\nlst1 = [2,3,4]\nlst2 = [1,2,3]\nsum_lst = sum_lists(lst1, lst2)\nprint(sum_lst)", "category": "Python"}, {"instruction": "Modify the given code to multiply two n x n matrices.", "input": "def multiply(m1, m2, n):\n    result = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        for j in range(n): \n            result[i][j] = 0", "output": "def multiply(m1, m2, n):\n    result = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                result[i][j] += m1[i][k] * m2[k][j]\n    return result", "category": "Python"}, {"instruction": "Modify the following code to get the desired output.", "input": "for i in range(1, 7):\n    for j in range(1, i):\n        print(j)", "output": "for i in range(1, 7):\n    for j in range(1, i+1):\n        print(j, end=' ')\n    print()", "category": "Python"}, {"instruction": "Provide a function to find the length of a string.", "input": "", "output": "def length(s):\n    i = 0\n    for ch in s:\n        i += 1\n    return i", "category": "Python"}, {"instruction": "Create an algorithm to detect if a string is a palindrome or not.", "input": "", "output": "def isPalindrome(s): \n    reversedString = s[::-1] \n  \n    if (s == reversedString): \n        return True\n    return False", "category": "Python"}, {"instruction": "Read the given code block and debug it.", "input": "def main():\n print(\"Hey I'm here\")\n if n == 0: \n  print(\"Hey I'm there\")\nmain()", "output": "Error: n is not defined.\n\nThe given code is trying to use the variable n, which is not declared. To fix this, it should be declared before the if statement. The modified code is as follows:\n\ndef main():\n print(\"Hey I'm here\")\n n = 0\n if n == 0: \n  print(\"Hey I'm there\")\nmain()", "category": "Python"}, {"instruction": "Create a basic neural network model to distinguish between cats and dogs.", "input": "", "output": "Model Building Code:\nmodel = Sequential([\n    Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),\n    MaxPooling2D(2,2),\n    Conv2D(64, (3,3), activation='relu'),\n    MaxPooling2D(2,2),\n    Flatten(),\n    Dense(512, activation='relu'),\n    Dense(1, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])", "category": "Python"}, {"instruction": "Write a function that takes a sentence and returns the string with all occurrences of the longest word removed.", "input": "\"This is a very long sentence\"", "output": "def remove_longest_word(sentence): \n    # Split the sentence into words \n    words = sentence.split(' ')\n\n    # Find the longest word \n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word): \n            longest_word = word \n\n    # Remove all occurrences of the longest word\n    new_sentence = [] \n    for word in words:\n        if word != longest_word: \n            new_sentence.append(word) \n    \n    # Join the list back into a string and return it \n    return \" \".join(new_sentence)\n\nprint(remove_longest_word(\"This is a very long sentence\")) # This is a sentence", "category": "Python"}, {"instruction": "Create a function that takes a list of numbers and returns the index of the largest number.", "input": "[2, 5, 12, 3, 4]", "output": "def find_largest_number(nums): \n    # Initialize the index of the largest number.\n    largest_index = 0\n\n    # Loop through the list of numbers and\n    # compare each number to the other. \n    # Update the index of the largest number. \n    for i in range(len(nums)):\n        if nums[i] > nums[largest_index]:\n            largest_index = i\n    \n    # Return the index of the largest number.\n    return largest_index\n\nprint(find_largest_number([2, 5, 12, 3, 4])) # 2", "category": "Python"}, {"instruction": "How would you modify the following code to make it more efficient?", "input": "def find_word(word, text):\n    if word in text:\n        return \"Word found\"\n    else:\n        return \"Word not found\"", "output": "def find_word(word, text):\n    # Use the 'in' operator to check if the word is in the text\n    if word in text:\n        return \"Word found\"\n    else:\n        return \"Word not found\"\n\n# Use the 'count' method to check if the word is in the text more efficiently\nif text.count(word) > 0:\n    return \"Word found\"\nelse:\n    return \"Word not found\"", "category": "Python"}, {"instruction": "Create a function that takes the string of the current time and returns the time in minutes.", "input": "\"12:30PM\"", "output": "def convert_to_minutes(time): \n    # Split the time into hours and minutes \n    h, m = map(int, time.split(':'))\n\n    # Add 12 to the hours if the time is PM \n    if time.endswith('PM'): \n        h += 12\n    return h * 60 + m\n\nprint(convert_to_minutes(\"12:30PM\")) # 750", "category": "Python"}, {"instruction": "Write a function that takes a string of numbers separated by commas and returns the sum of all the numbers.", "input": "\"1,2,3,4\"", "output": "def sum_numbers(nums): \n    nums = nums.split(',')\n    total = 0\n  \n    # Traverse the string and add all elements \n    # of it to the total. \n    for i in range(len(nums)): \n        total += int(nums[i]) \n  \n    # return total \n    return total \n\nprint(sum_numbers(\"1,2,3,4\")) # 10", "category": "Python"}, {"instruction": "Write a function that takes in two strings as input and outputs True if they are anagrams, False otherwise.", "input": "s1 = \u201csilent\u201d\ns2 = \u201clisten\u201d", "output": "def anagrams(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    s1_arr = list(s1)\n    s2_arr = list(s2)\n    s1_arr.sort()\n    s2_arr.sort()\n    for i in range(len(s1_arr)):\n        if s1_arr[i] != s2_arr[i]:\n            return False\n    return True", "category": "Python"}, {"instruction": "Construct a class to represent a student", "input": "", "output": "class Student():\n  def __init__(self, first_name, last_name, email, street, city, state, zip_code):\n    self.first_name = first_name\n    self.last_name = last_name\n    self.email = email\n    self.street = street\n    self.city = city\n    self.state = state\n    self.zip_code = zip_code\n  \n  def change_email(self, new_email):\n    self.email = new_email", "category": "Python"}, {"instruction": "Create a function to compute the square root of a given number", "input": "9", "output": "def sqrt(n):\n    \"\"\"\n    Compute the square root of a given number\n    \"\"\"\n    r = n\n    while r*r > n:\n        r = (r + n/r) // 2\n    return r\n\nn = 9\nval = sqrt(n)\nprint(val)", "category": "Python"}, {"instruction": "Create a method that prints all elements of an array", "input": "[1,2,3]", "output": "def print_elements(arr):\n    \"\"\"\n    Print all elements of an array.\n    \"\"\"\n    for num in arr:\n        print(num)\n\narr = [1,2,3]\nprint_elements(arr)", "category": "Python"}, {"instruction": "Develop a function to find all elements in a given array which appear more than once.", "input": "nums = [4, 3, 6, 7, 3, 8, 4, 9]", "output": "def find_duplicates(nums):\n    duplicates = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j]:\n                duplicates.append(nums[i])\n    return duplicates", "category": "Python"}, {"instruction": "Develop a program that takes a number and prints \"true\" if it is a prime number, and \"false\" otherwise.", "input": "", "output": "def is_prime(number):\n  if number<1:\n    return False\n  for check in range(2,number):\n    if number%check==0:\n      return False\n  return True", "category": "Python"}, {"instruction": "Create a coding program that sorts a given list of numbers into ascending order.", "input": "[4, 3, 2, 5, 9, 1, 8]", "output": "def ascending_order(arr): \n\n# Bubble sort algorithm. \n    n = len(arr) \n   \n    # Traverse through all array elements \n    for i in range(n): \n   \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n   \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n                \n    return arr\n\n# Test \narr = [4, 3, 2, 5, 9, 1, 8]\n\nascending_order(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "category": "Python"}, {"instruction": "Develop an algorithm in Python to calculate the factorial of a given number n.", "input": "", "output": "def factorial(n): \n   if n == 0: \n       return 1\n   elif n > 0: \n       return n * factorial(n-1) \n   else: \n       return \"Enter a positive integer\"", "category": "Python"}, {"instruction": "Generate a random string of 8 characters with at least 1 digit.", "input": "", "output": "import random\n\ndef generate_random_string():\n    chars = string.ascii_letters + string.digits\n    return ''.join(random.choice(chars) for _ in range(8))", "category": "Python"}, {"instruction": "Edit the following code to check for even numbers in the array.", "input": "arr = [1, 2, 3, 4, 5]", "output": "arr = [1, 2, 3, 4, 5]\n\nfor i in arr: \n if i % 2 == 0 : \n print(i)", "category": "Python"}, {"instruction": "Create an algorithm for searching for an element in a sorted array.", "input": "arr = [2, 4, 6, 8, 10]\ntarget = 6", "output": "def binary_search(arr, target):\n  low = 0\n  high = len(arr) - 1\n\n  while low <= high: \n    mid = (low + high) // 2\n    if arr[mid] == target: \n      return mid \n    elif arr[mid] < target: \n      low = mid + 1\n    else: \n      high = mid - 1\n  return -1", "category": "Python"}, {"instruction": "Sort the following array using the merge sort algorithm.", "input": "arr = [4, 10, 5, 1, 8, 9]", "output": "def merge_sort(arr):\n    if len(arr) > 1: \n      mid = len(arr)//2\n      left_arr = arr[:mid]\n      right_arr = arr[mid:]\n\n      merge_sort(left_arr)\n      merge_sort(right_arr)\n\n      i = j = k = 0\n\n      while i < len(left_arr) and j < len(right_arr): \n        if left_arr[i] < right_arr[j]: \n            arr[k] = left_arr[i] \n            i+=1\n        else: \n            arr[k] = right_arr[j] \n            j+=1\n        k+=1\n      while i < len(left_arr): \n        arr[k] = left_arr[i] \n        i+=1\n        k+=1\n      \n      while j < len(right_arr): \n        arr[k] = right_arr[j] \n        j+=1\n        k+=1", "category": "Python"}, {"instruction": "Create an algorithm to find the smallest positive integer not present in an array.", "input": "arr = [2, 3, 7, 6, 8, -1, -10, 15]", "output": "def find_missing(arr):\n  # sort the array\n  arr.sort()\n  \n  # iterate through the array \n  # to find the smallest positive integer not present \n  for i in range(len(arr)):\n    if arr[i] > 0:\n      if arr[i+1] != arr[i] + 1:\n        return arr[i] + 1\n  return arr[-1] + 1", "category": "Python"}, {"instruction": "Write a function that takes an array of integers and returns the minimum difference between two consecutive elements.", "input": "arr = [4, 2, 7, 5, 1]", "output": "def min_difference(arr):\n  min_diff = abs(arr[1] - arr[0])\n  for i in range(1, len(arr)-1):\n    diff = abs(arr[i+1] - arr[i])\n    if diff < min_diff:\n      min_diff = diff\n  return min_diff", "category": "Python"}, {"instruction": "Create a program to compare the elements of three arrays and print the elements that are present in all the arrays.", "input": "arr1 = [2, 3, 4]\narr2 = [1, 2, 5]\narr3 = [2, 4, 6]", "output": "def compare_arrays(arr1, arr2, arr3):\n  common_elements = []\n  for elem in arr1:\n    if elem in arr2 and elem in arr3:\n      common_elements.append(elem)\n  print(common_elements)", "category": "Python"}, {"instruction": "Write a function that prints an array elements in a reverse order.", "input": "arr = [0, 1, 2, 3, 4, 5]", "output": "def reverse_print_array(arr):\n  for i in range(len(arr)-1, -1, -1):\n    print(arr[i])", "category": "Python"}, {"instruction": "Create a function that takes a number \"n\" as an argument and returns the nth Fibonacci number", "input": "n = 15", "output": "def fibonacci(n): \n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return fibonacci(n-1) + fibonacci(n-2) \n  \nfibonacci(15)", "category": "Python"}, {"instruction": "What is Big O notation?", "input": "", "output": "Big O notation is a measure of the complexity of an algorithm. It describes the worst-case complexity of a given algorithm in terms of time and/or space as the problem size increases.  It can indicate whether an algorithm's performance increases linearly or exponentially as the problem size increases.", "category": "Python"}, {"instruction": "Write a Python program to find the unique elements in a list.", "input": "2, 3, 9, 5, 2, 4, 9", "output": "def unique_elements(input_list): \n    result_list = []\n    for item in input_list: \n        if item not in result_list: \n            result_list.append(item)\n    return result_list\n\ninput_list = [2, 3, 9, 5, 2, 4, 9]\nprint(unique_elements(input_list))\n# Output: [2, 3, 9, 5, 4]", "category": "Python"}, {"instruction": "What is the difference between a sequential and a parallel collection?", "input": "", "output": "The difference between a sequential and a parallel collection is the way in which data is processed. A sequential collection is processed one item at a time, from start to finish in a single thread. A parallel collection is processed in chunks at the same time, using multiple threads. The main advantage of using a parallel collection is that it can take advantage of multiple cores in a processor, allowing for faster data processing.", "category": "Python"}, {"instruction": "What is the importance of writing unit tests?", "input": "", "output": "The importance of writing unit tests is to ensure that the code works correctly and produce the expected results. By writing automated unit tests, developers can quickly and easily detect bugs and errors in their code. Unit tests also help with the building of reliable system architectures since the code is thoroughly tested even before the application is released. Unit tests also help in the code maintenance process since programmers can quickly identify changes made in the code that introduces bugs.", "category": "Python"}, {"instruction": "Complete the following code to implement a binary search.", "input": "def binary_search(arr, x):", "output": "def binary_search(arr, x):\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1", "category": "Python"}, {"instruction": "Generate an artificial neural network code to recognize alphanumeric digits.", "input": "", "output": "import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPool2D\n\n# define model\nmodel = Sequential()\n\n# add layers\nmodel.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 3)))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))\n\n# compile model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# fit model\nmodel.fit(x_train, y_train, epochs=10)\n\n# evaluate model\nscore = model.evaluate(x_test, y_test, verbose=0)", "category": "Python"}, {"instruction": "What is the cut-off frequency of a high-pass filter?", "input": "", "output": "The cut-off frequency of a high-pass filter is the frequency at which the output signal is significantly reduced in magnitude compared with the input signal. It is used to remove low frequency components from a signal. It is commonly measured in hertz (Hz).", "category": "Python"}, {"instruction": "Write a code to create a 2-D array with size (4,4) and fill it with 1's.", "input": "", "output": "arr = [[1 for _ in range(4)] for _ in range(4)]", "category": "Python"}, {"instruction": "Merge two sorted lists into a single sorted list", "input": "list1 = [1,3,5,7] \nlist2 = [2,4,6,8]", "output": "def merge_sorted_lists(list1, list2):\n    merged_list = []\n    i = 0\n    j = 0\n\n    # Iterate through the lists until all elements have been merged\n    while (i < len(list1) and j < len(list2)):\n        # If the element from the first list is smaller, add it \n        # to the merged list\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i+=1\n        # Otherwise add the element from the second list\n        else:\n            merged_list.append(list2[j])\n            j+=1\n \n    # Append any remaining elements from the first list\n    while i < len(list1):\n        merged_list.append(list1[i])\n        i+=1\n \n    # Append any remaining elements from the second list\n    while j < len(list2):\n        merged_list.append(list2[j])\n        j+=1\n \n    return merged_list", "category": "Python"}, {"instruction": "Replace the \"TODO\" placeholder in the following python code.", "input": "def add_two_numbers(a, b):\n    '''This function takes two numbers and returns their sum.'''\n    # TODO", "output": "def add_two_numbers(a, b):\n    '''This function takes two numbers and returns their sum.'''\n    return a + b", "category": "Python"}, {"instruction": "Create a neural network in Python to recognize handwriting.", "input": "MNIST hand-written digit dataset", "output": "The code to create a neural network in Python to recognize handwriting should consist of several parts. These parts include importing the MNIST dataset, preprocessing the data, building the neural network model, training the network, evaluting the network's performance, and improving the accuracy using hyperparameters.", "category": "Python"}, {"instruction": "Create a program to check if two given strings are a rotation of each other.", "input": "string1 = \"abcd\", string2= \"cdab\"", "output": "def isRotation(s1, s2):   \n    if len(s1) != len(s2): \n        return False\n  \n    temp = s1 + s1 \n    return (temp.count(s2) > 0)", "category": "Python"}, {"instruction": "Create an algorithm to sort a given array in ascending order using Bubble sort.", "input": "", "output": "def bubble_sort(arr): \n    # length of the array \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n-1): \n   \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]", "category": "Python"}, {"instruction": "Create a function to calculate the Levenshtein distance between two strings", "input": "str1 = \"geeks\", str2 = \"geek\"", "output": "def lev_dist(str1, str2):\n    if len(str1) < len(str2):\n        return lev_dist(str2, str1)\n    \n    if len(str2) == 0:\n        return len(str1)\n \n    previous_row = range(len(str2) + 1)\n    for i, c1 in enumerate(str1):\n        current_row = [i + 1]\n        for j, c2 in enumerate(str2):\n            insertions = previous_row[j + 1] + 1\n            deletions = current_row[j] + 1\n            substitutions = previous_row[j] + (c1 != c2)\n            current_row.append(min(insertions, deletions, substitutions))\n        previous_row = current_row\n    \n    return previous_row[-1]", "category": "Python"}, {"instruction": "You are given a list of numbers. Write a program to check if the given list is a palindrome or not.", "input": "[1, 2, 3, 2, 1]", "output": "def is_palindrome(arr):\n  rev_arr = arr[::-1]\n  if arr == rev_arr:\n    return True\n  else:\n    return False\n\nprint(is_palindrome([1, 2, 3, 2, 1]))", "category": "Python"}, {"instruction": "Manipulate a given list to get a single string.", "input": "[\"Hello\", \"World\", \"!\"]", "output": "def create_string(arr):\n  string = ''\n  for elem in arr:\n    string += elem\n  return string\n\nprint(create_string(['Hello', 'World', '!']))", "category": "Python"}, {"instruction": "You are given a string of symbols. Write a program to remove all the symbols and get a valid text string.", "input": "\"This , is an example string %\"", "output": "def remove_symbols(string):\n  text_string = ''\n  for c in string:\n    if c.isalpha() or c.isdigit():\n      text_string += c\n  \n  return text_string\n\nprint(remove_symbols(\"This , is an example string %\"))", "category": "Python"}]
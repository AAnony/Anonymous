[{"instruction": "Write a replace method for a string class which replaces the given string with a given set of characters.", "input": "string = \"Hello World!\"\nreplace_with = \"Greetings!\"", "output": "def replace(self, replace_with):\n    new_string = \"\"\n    for char in self:\n        if char == \" \":\n            new_string += replace_with\n        else:\n            new_string += char\n    return new_string", "category": "Python"}, {"instruction": "Describe how language models can be used in natural language processing.", "input": "", "output": "Language models are used in natural language processing to enable machines to understand and generate natural language. Language models assign a probability to a sequence of natural language words to improve the accuracy of predictions in language processing tasks. They are used for automatic speech recognition, machine translation, text summarization, essay grading, and natural language understanding.", "category": "Python"}, {"instruction": "Create a class in Python called Math that can calculate the average of two numbers.", "input": "", "output": "class Math:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n \n    def average(self):\n        return (self.x + self.y) / 2", "category": "Python"}, {"instruction": "Construct a for loop in Python to output the numbers from 1 to 5.", "input": "", "output": "for i in range(1,6):\n  print(i)", "category": "Python"}, {"instruction": "Generate the class diagrams for a System class and a Database class.", "input": "<nopinput>", "output": "System Class Diagram: \n\n[![system class diagram](https://i.ibb.co/MfXN7xN/system-class-diagram.png)]\n\nDatabase Class Diagram:[![database class diagram](https://i.ibb.co/6WHWKV8/database-class-diagram.png)]", "category": "Python"}, {"instruction": "Convert a given string into Pig Latin.", "input": "string = \"Hello\"", "output": "def pig_latin(string):\n    vowels = \"aeiou\"\n    if string[0].lower() in vowels:\n        return string+\"way\"\n    else:\n        return string[1:]+string[0]+\"ay\"", "category": "Python"}, {"instruction": "Print all permutations of an input array.", "input": "array = [1,2,3]", "output": "def permutations(array):\n    if len(array) == 0:\n        return\n    if len(array) == 1:\n        return [array]\n    perms = []\n    for i in range(len(array)):\n        elem = array[i]\n        rem_perms = permutations(array[:i] + array[i+1:])\n        for perm in rem_perms:\n            perms.append([elem] + perm)\n    return perms", "category": "Python"}, {"instruction": "Generate a list of length n containing all numbers from 1 to n.", "input": "", "output": "def gen_list(n):\n    list = []\n    for i in range(1, n+1):\n        list.append(i)\n    return list", "category": "Python"}, {"instruction": "Create a loop that prints out the even numbers from the given list.", "input": "lst = [1, 2, 3, 4, 5]", "output": "for i in lst:\n  if i % 2 == 0:\n    print(i)", "category": "Python"}, {"instruction": "Given a dictionary of words and a set of characters, how would you find the longest word which can be constructed from the given set of characters?", "input": "", "output": "One way to find the longest word which can be constructed from a set of characters is by using a trie data structure. To do this, first create the trie from the given dictionary of words, then traverse it to look for the longest word which can be constructed from the given set of characters. At each node, check if the character at the current node is present in the given set, and if yes, traverse down. If no, then backtrack until a valid character is found.", "category": "Python"}, {"instruction": "Write a code to generate a random 7 digit phone number.", "input": "", "output": "\"\"\"\nWrite a code to generate a random 7 digit phone number.\n\"\"\"\n\nimport random\n\ndef generate_random_phone_number():\n    # create a list of digits\n    lst = [str(i) for i in range(10)]\n    \n    # randomly select one digit\n    random.shuffle(lst)\n    \n    # generate a 7-digit phone number\n    phone_number = ''.join(lst[:7])\n    \n    return phone_number\n    \nif __name__ == '__main__':\n    print(generate_random_phone_number()) # Output: e.g. 8247036", "category": "Python"}, {"instruction": "What is a Python tuple?", "input": "", "output": "A Python tuple is an immutable sequence of objects which is ordered and indexed. Tuples are usually used to store collections of data that are related, but may be of different data types. Tuples are used instead of lists because they are more memory efficient and can be used as elements of sets and as keys in dictionaries.", "category": "Python"}, {"instruction": "Create a function to check whether a number is a prime number using the Sieve of Eratosthenes algorithm.", "input": "", "output": "\"\"\"\nCreate a function to check whether a number is a prime number using the Sieve of Eratosthenes algorithm.\n\"\"\"\n\ndef is_prime(n): \n    if n <= 1: \n        return False\n  \n    # create a list of all numbers from 0 to n\n    nums = [True for _ in range(n + 1)] \n  \n    p = 2\n    while (p * p <= n): \n        # If prime[p] is not changed, it is a prime \n        if nums[p] is True: \n\n            # Update all multiples of p \n            for i in range(p * 2, n + 1, p): \n                nums[i] = False\n        p += 1\n\n    return nums[n]\n\nif __name__ == '__main__':\n    n = 37\n    print(is_prime(n)) # Output: True", "category": "Python"}, {"instruction": "Use the Pandas library to find the mean rental price for a property in a particular city in the US.", "input": "The property is located in Miami, Florida.", "output": "\"\"\"\nFind the mean rental price for a property in Miami, Florida using the Pandas library.\n\"\"\"\n\nimport pandas as pd\n\n# read the dataset\ndf = pd.read_csv('data.csv')\n\n# filter the data by city\ndf_miami = df[df['city'] == 'Miami, Florida']\n\n# calculate the mean rental price\nmean_price = df_miami['rental_price'].mean()\n\n# print the result\nprint(f'The mean rental price in Miami, Florida is ${mean_price:.2f}')", "category": "Python"}, {"instruction": "Use the following JSON data to output information about all the users in the array.", "input": "[\n    {\n        \"name\": \"Peter\",\n        \"age\": 25\n    },\n    {\n        \"name\": \"Theresa\",\n        \"age\": 30\n    },\n    {\n        \"name\": \"John\",\n        \"age\": 22\n    }\n]", "output": "import json\n\nusers = [\n    {\n        \"name\": \"Peter\",\n        \"age\": 25\n    },\n    {\n        \"name\": \"Theresa\",\n        \"age\": 30\n    },\n    {\n        \"name\": \"John\",\n        \"age\": 22\n    }\n]\n\nfor user in users:\n    print(\"Name: \"+ user[\"name\"] + \", Age: \" + str(user[\"age\"]))", "category": "Python"}, {"instruction": "Write a function in Python which takes an array of integers and returns a list of all distinct pairs whose sum is equal to a given value.", "input": "arr = [1, 2, 3, 4, 5]\nvalue = 7", "output": "def pairs_with_sum(arr, value):\n    pairs = []\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if (arr[i] + arr[j] == value):\n                pairs.append((arr[i], arr[j]))\n    return pairs", "category": "Python"}, {"instruction": "Answer this logic programming question: What is the transitive closure of the binary relation \"less than\" on the set of integers?", "input": "", "output": "The transitive closure of the 'less than' relation on the set of integers is defined as: if (x,y) belongs to the set of integers, then for all n, x < n and n < y implies x < y.", "category": "Python"}, {"instruction": "How can you convert a number from one base to another?", "input": "", "output": "def convert_base(num, from_base, to_base):\n    if isinstance(num, str):\n        n = int(num, from_base)\n    else:\n        n = int(num)\n    alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    if n < to_base: \n        return alphabet[(n)]\n    else:\n        return convert_base(n // to_base, from_base, to_base) + alphabet[n % to_base]", "category": "Python"}, {"instruction": "Give a function to get an array of n-dimensional vectors.", "input": "", "output": "def get_n_dimensional_vectors(n):\n     vectors = [[0 for x in range(n)] for x in range(len(arr))] \n     for vector in vectors:\n         for i in range(n):\n             vector[i] = arr[i]\n     return vectors", "category": "Python"}, {"instruction": "Create a dictionary containing the characters from the given string as keys and their frequency in the string as values.", "input": "string = 'google'", "output": "def create_frequency_dict(string):\n    \"\"\"Create a dictionary containing the characters from the given string as keys and their frequency in the string as values.\"\"\"\n    # Initialize empty dictionary\n    freq_dict = {}\n    # Iterate over the string\n    for char in string:\n        # Check if char is in dictionary\n        if char in freq_dict:\n            # Increase its frequency\n            freq_dict[char] += 1\n        else:\n            # Add to dictionary\n            freq_dict[char] = 1\n    return freq_dict\n\ncreate_frequency_dict('google') # Outputs {'g': 2, 'o': 2, 'l': 1, 'e': 1}", "category": "Python"}, {"instruction": "In the given string, split the words and remove empty strings.", "input": "string = \"    Hello    World    \"", "output": "def split_and_remove(string):\n    \"\"\"In the given string, split the words and remove empty strings.\"\"\"\n    # Split the string by spaces\n    arr = string.split(' ')\n    # Initialize empty list\n    new_arr = []\n    # Iterate over array\n    for word in arr:\n        # Check if not empty\n        if word != '':\n            # Append to list\n            new_arr.append(word)\n    return new_arr\n\nsplit_and_remove('    Hello    World    ') # Outputs ['Hello', 'World']", "category": "Python"}, {"instruction": "Multiply each element in the given array by 3 and return the new array.", "input": "[1, 2, 3]", "output": "def multiply_by_3(arr):\n    \"\"\"Multiply each element in the given array by 3 and return the new array.\"\"\"\n    # Initialize empty array\n    new_arr = []\n    # Iterate over the array\n    for num in arr:\n        # Multiply by 3\n        num *= 3\n        # Append to new array\n        new_arr.append(num)\n    return new_arr\n\nmultiply_by_3([1, 2, 3]) # Outputs [3, 6, 9]", "category": "Python"}, {"instruction": "Write a code to convert a given date string into a timestamp.", "input": "date_string = \"2020-07-24 14:50:00\"", "output": "import datetime\n\ndef convert_to_timestamp(date_string):\n    \"\"\"Write a code to convert a given date string into a timestamp.\"\"\"\n    date_object = datetime.datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S')\n    timestamp = datetime.datetime.timestamp(date_object)\n    return timestamp\n\nconvert_to_timestamp(\"2020-07-24 14:50:00\") # Outputs 1595538200.0", "category": "Python"}, {"instruction": "Create a Python function which takes in a list and returns the length of the longest common subsequence of consecutive elements in the list.", "input": "[1, 3, 5, 8, 9, 10, 11, 15]", "output": "\"\"\"\nCreate a Python function which takes in a list and returns the length of the longest common subsequence of consecutive elements.\n\"\"\"\n\ndef long_consec_sequence(lst):\n    if not lst:\n        return 0\n    \n    # initialize the size of the longest subsequence \n    max_seq_len = 0\n    \n    # iterate through the list \n    for i in range(len(lst)-1) : \n        \n        # create a new sequence \n        curr_seq = 1\n    \n        j = i+1\n        while (j < len(lst)): \n            if (lst[j] - lst[j-1]) == 1 : \n                curr_seq += 1 \n            else: \n                break\n            j += 1\n        \n        # update the length of the maximum subsequence\n        if curr_seq > max_seq_len: \n            max_seq_len = curr_seq \n    \n    # return the length of the maximum consecutive subsequence\n    return max_seq_len \n\nif __name__ == '__main__':\n    lst = [1, 3, 5, 8, 9, 10, 11, 15]\n    print(long_consec_sequence(lst)) # Output: 4", "category": "Python"}, {"instruction": "Write an IF ELSE statement in Python to print either \"Number is even\" or \"Number is odd\" depending on the number input.", "input": "", "output": "if (num % 2 == 0):\n    print(\"Number is even\")\nelse:\n    print(\"Number is odd\")", "category": "Python"}, {"instruction": "design a functions which removes the duplicate elements from a list", "input": "", "output": "def remove_duplicates(x):\n    res = []\n    for i in x:\n        if i not in res:\n            res.append(i)\n    return res", "category": "Python"}, {"instruction": "Extract the name of the given website link", "input": "https://www.example.com", "output": "\"\"\"\nExtract the name of the given website link \n\"\"\"\n\nimport re\n\ndef extract_name(url):\n    return re.search('https://www.(.*?).com', url).group(1)\n\nif __name__ == '__main__':\n    url = \"https://www.example.com\"\n    print(extract_name(url))", "category": "Python"}, {"instruction": "Make a Python program to delete elements from a given list at particular indices.", "input": "list_of_numbers = [0, 1, 2, 3, 4, 5]\nindices = [2, 3, 5]", "output": "def remove_elements_at_indices(numbers, indices):\n    for index in sorted(indices, reverse=True):\n        del numbers[index]\n    return numbers\n\nmodified_list = remove_elements_at_indices(list_of_numbers, indices)\nprint(modified_list) # prints [0, 1, 4]", "category": "Python"}, {"instruction": "Create a Python program to remove all whitespace from the given string.", "input": "text = \"   This is a    sentence    with some whitespace!   \"", "output": "def remove_whitespace(text):\n    return text.replace(\" \", \"\")\n\ntext_without_whitespace = remove_whitespace(text)\nprint(text_without_whitespace) # prints \"Thisisasentencewithsomewhitespace!\"", "category": "Python"}, {"instruction": "Make a Python program to generate all permutations of a given list.", "input": "", "output": "def permutations(nums):\n    if len(nums) == 0:\n        return []\n\n    if len(nums) == 1:\n        return [[nums[0]]]\n    \n    perms = []\n\n    for i, n in enumerate(nums):\n        sub_perms = permutations(nums[:i] + nums[i+1:])\n\n        for perm in sub_perms:\n            perms.append([n] + perm)\n\n    return perms", "category": "Python"}, {"instruction": "Create a Python function to remove all elements of the given list that are equal to the given value.", "input": "list_of_numbers = [1, 2, 3, 4, 2, 3] \nvalue = 2", "output": "def remove_val(numbers, val):\n    result = []\n    for n in numbers:\n        if n != val:\n            result.append(n)\n    return result\n\nlist_without_2 = remove_val(list_of_numbers, value)\nprint(list_without_2) # prints [1, 3, 4, 3]", "category": "Python"}, {"instruction": "Write a Python program to create a new list which contains all even numbers from the given list.", "input": "list_of_numbers = [1, 2, 3, 4, 5, 6]", "output": "def get_even_numbers(numbers):\n    even_numbers = []\n    for n in numbers:\n        if n % 2 == 0:\n            even_numbers.append(n)\n    return even_numbers\n\neven_numbers = get_even_numbers(list_of_numbers)\nprint(even_numbers) # prints [2, 4, 6]", "category": "Python"}, {"instruction": "Create a Python program to sort of given list of strings in alphabetical order.", "input": "list_of_strings = [\"apple\", \"banana\", \"cherry\", \"dog\"]", "output": "def sort_words(words):\n    return sorted(words)\n\nlist_of_strings_sorted = sort_words(list_of_strings)\nprint(list_of_strings_sorted)", "category": "Python"}, {"instruction": "Parse a given string to create a tree data structure.", "input": "expr = \"a + b * c\"", "output": "def parse_string(expr):\n  root = Node(expr[0])\n  current_node = root\n  \n  for i in range(1, len(expr), 2):\n    node = Node(expr[i])\n    current_node.right = node\n    node.left = current_node\n    current_node = node\n  \n  return root\n\nclass Node:\n  def __init__(self, data):\n    self.data = data\n    self.left = None\n    self.right = None", "category": "Python"}, {"instruction": "Create an algorithm to produce a Fibonacci number.", "input": "", "output": "def fibonacci(n):\n  if n <= 1:\n    return n\n  else:\n    return fibonacci(n-1) + fibonacci(n-2)", "category": "Python"}, {"instruction": "Make a program that takes in a non-empty string and finds its longest palindrome.", "input": "", "output": "def longest_palindrome(text):\n  longest_palindrome = \"\"\n  for i in range(len(text)):\n    for j in range(len(text), i, -1):\n      substring = text[i:j]\n      if substring == substring[::-1] and len(substring) > len(longest_palindrome):\n        longest_palindrome = substring\n  return longest_palindrome", "category": "Python"}, {"instruction": "Rearrange the code to print the hierarchy of students in a Python class", "input": "students = [\n  {\n    \"name\": \"John Smith\",\n    \"role\": \"student\"\n  },\n  {\n    \"name\": \"Alice Johnson\",\n    \"role\": \"student\"\n  },\n  {\n    \"name\": \"Bob Williams\",\n    \"role\": \"teacher\"\n  },\n  {\n    \"name\": \"Cecilia Brown\",\n    \"role\": \"teacher\"\n  }\n]", "output": "students = [\n  {\n    \"name\": \"John Smith\",\n    \"role\": \"student\"\n  },\n  {\n    \"name\": \"Alice Johnson\",\n    \"role\": \"student\"\n  },\n  {\n    \"name\": \"Bob Williams\",\n    \"role\": \"teacher\"\n  },\n  {\n    \"name\": \"Cecilia Brown\",\n    \"role\": \"teacher\"\n  }\n]\n\nteachers = []\nstudents_list = []\n\nfor student in students:\n  if student[\"role\"] == \"teacher\":\n    teachers.append(student)\n  else:\n    students_list.append(student)\n\nprint(\"Teachers:\")\nfor teacher in teachers:\n  print(teacher[\"name\"])\n\nprint(\"Students:\")\nfor student in students_list:\n  print(student[\"name\"])", "category": "Python"}, {"instruction": "Generate a data set using RandomSample()", "input": "", "output": "from random import Random\n\ndef RandomSample(number_of_samples):\n    sample = []\n    random_generator = Random()\n    for i in range(number_of_samples):\n        sample.append(random_generator.random())\n    return sample", "category": "Python"}, {"instruction": "Edit the vector below such that all elements are greater than five.", "input": "[1, 5, 3, 7, 6, 4]", "output": "def edit_vec(vec): \n    for i in range(len(vec)): \n        if vec[i] <= 5: \n            vec[i] = 5\n    return vec", "category": "Python"}, {"instruction": "Create a loop to traverse through a tree using depth-first search.", "input": "", "output": "def traverse_tree(node): \n    print(node.data) \n\n    if node.left: \n        traverse_tree(node.left) \n    if node.right: \n        traverse_tree(node.right)", "category": "Python"}, {"instruction": "Scale a vector of 10 numbers from 0 to 10.", "input": "[2.5, 3.5, 5.5, 7.5, 1.5, 8.5, 0.5, 4.5, 6.5, 9.5]", "output": "def scale(vector): \n    scaled_vector = []\n    for i in vector: \n        scaled_vector.append(i/10*10) \n    return scaled_vector", "category": "Python"}, {"instruction": "Design a function to convert Fahrenheit to Celsius in Python.", "input": "", "output": "def fahrenheit_to_celsius(f):\n    celsius = (f - 32) * 5/9\n    return celsius", "category": "Python"}, {"instruction": "Simulate a coin toss in Python and get the results in a list.", "input": "", "output": "import random\n\nresults = []\nfor i in range(10):\n    if random.random() < 0.5:\n        results.append('heads')\n    else:\n        results.append('tails')\n\nprint(results)", "category": "Python"}, {"instruction": "Create a list comprehension in Python to double each element in the list.", "input": "list = [1, 2, 3, 4, 5]", "output": "result = [x*2 for x in list]", "category": "Python"}, {"instruction": "Add this method to the Person class.", "input": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def intro(self):\n        print(\"Hi, my name is %s and I am %d years old.\" % (self.name, self.age))", "category": "Python"}, {"instruction": "Make changes to this code to fix the bug.", "input": "def example_function(a, b):\n    c = 0\n    for i in range(a, b+1):\n        c -= i\n    return c", "output": "def example_function(a, b):\n    c = 0\n    for i in range(a, b+1):\n        c += i\n    return c", "category": "Python"}, {"instruction": "Parse this JSON string and print the value of the \"name\" field.", "input": "json_string = '{\"name\":\"John\", \"age\":25}'", "output": "import json\ndata = json.loads(json_string)\nprint(data['name'])", "category": "Python"}, {"instruction": "Write a postfix expression to an infix expression", "input": "3 4 + 5 *", "output": "def postfix_to_infix(expression):\n    stack = []\n    for c in expression.split():\n        if c in \"+-*/\":\n            operand1 = stack.pop()\n            operand2 = stack.pop()\n            stack.append(\"({} {} {})\".format(operand2, c, operand1))\n        else:\n            stack.append(c)\n    return stack[0]\n\nif __name__ == '__main__':\n    expression = '3 4 + 5 *'\n    print(postfix_to_infix(expression))", "category": "Python"}, {"instruction": "Identify if the given number is prime", "input": "n = 13", "output": "def is_prime(n):\n  for i in range(2, n):\n    if n % i == 0:\n      return False\n  return True\n\nif __name__ == '__main__':\n  n = 13\n  print(\"Is {} prime? {}\".format(n, is_prime(n)))", "category": "Python"}, {"instruction": "print the values of a dictionary in first-in, first-out order", "input": "my_dict = {\n 'a': 1,\n 'b': 2,\n 'c': 3\n}", "output": "def print_dict(d):\n    queue = [key for key in d.keys()]\n    while len(queue) > 0:\n        key = queue.pop(0)\n        print(d[key])\n        \nif __name__ == '__main__':\n    my_dict = {\n     'a': 1,\n     'b': 2,\n     'c': 3\n    }\n    print_dict(my_dict)", "category": "Python"}, {"instruction": "Sort the list in reverse order using insertion sort.", "input": "[4, 2, 0, 6, 1, 7, 3]", "output": "def insertion_sort_reverse(arr):\n    \"\"\" Sort the list in reverse order using insertion sort. \"\"\"\n    # Iterate over the list\n    for i in range(1, len(arr)):\n        current_value = arr[i]\n        # Keep track of position\n        position = i\n        # Iterate over the sorted part of the list\n        while position > 0 and arr[position - 1] < current_value:\n            # Shift one place to the right\n            arr[position] = arr[position - 1]\n            # Move position back\n            position = position - 1\n        # Insert current value at the position\n        arr[position] = current_value\n    return arr\n\ninsertion_sort_reverse([4, 2, 0, 6, 1, 7, 3]) # Outputs[7, 6, 4, 3, 2, 1, 0]", "category": "Python"}, {"instruction": "Sort an array of numbers in descending order using the bubble sort algorithm.", "input": "`array = [10, 5, 2, 7, 6]`", "output": "def bubble_sort(arr): \n    for i in range(len(arr)): \n        for j in range(0, len(arr)-i-1): \n            if arr[j] < arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]\n  \narray = [10, 5, 2, 7, 6]\nbubble_sort(array)\nprint(array) # Output: [10, 7, 6, 5, 2]", "category": "Python"}, {"instruction": "Remove the duplicates from the list without using built-in methods.", "input": "[1, 2, 1, 2, 3, 2, 4, 2]", "output": "def remove_duplicates(arr):\n    \"\"\"Remove the duplicates from the list without using built-in methods.\"\"\"\n    # Initialize empty list\n    new_list = []\n    # Iterate through array\n    for num in arr:\n        # Check if element is not in list\n        if num not in new_list:\n            # Add element to list\n            new_list.append(num)\n    return new_list\n\nremove_duplicates([1, 2, 1, 2, 3, 2, 4, 2]) # Outputs [1, 2, 3, 4]", "category": "Python"}, {"instruction": "Fix the following Python code to create a dictionary.", "input": "dic = {\u201cmin\u201d, 10, \u201cmax\u201d, 20}", "output": "dic = {\"min\": 10, \"max\": 20}", "category": "Python"}, {"instruction": "Using the list of strings, create a new list without any vowels.", "input": "strings = ['apple', 'ball', 'cat']", "output": "def remove_vowels(strings):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_strings = []\n    for string in strings: \n        new_strings.append(''.join([char for char in string if char.lower() not in vowels]))\n    \n    return new_strings", "category": "Python"}, {"instruction": "Create a function named \"parse_urls\" which takes a single string parameter and returns a dictionary of queries from the URL.", "input": "url=\"https://www.example.com/product?color=red&size=small\"", "output": "def parse_urls(url): \n    queries = url.split('?')[1]\n    queries_dict = {}\n    for query in queries.split('&'): \n        key, value = query.split('=') \n        queries_dict[key] = value \n    return queries_dict", "category": "Python"}, {"instruction": "Using the given list, write a code to get a list of all the words starting with \"T\"", "input": "words_list = ['Meteor', 'Timeline', 'Tablet', 'Timeframe', 'Trophy']", "output": "words_starting_with_T = [word for word in words_list if word.startswith('T')]", "category": "Python"}, {"instruction": "Given a list of integers, remove all negative numbers.", "input": "numbers_list = [-2,-3,4,5,-6,7]", "output": "def remove_negative_numbers(numbers_list):\n  result_list = []\n  \n  for number in numbers_list:\n    if number >= 0:\n      result_list.append(number)\n  \n  return result_list\n\nnumbers_list = [-2,-3,4,5,-6,7]\nprint(remove_negative_numbers(numbers_list))", "category": "Python"}, {"instruction": "Create a function which detects overlapping dates from a given list.", "input": "dates_list = [\n  (2018,1,1,2018,3,1),\n  (2018,12,1,2018,9,30),\n  (2018,2,15,2018,5,10)\n]", "output": "def detect_overlapping_dates(dates_list): \n  overlaps = set()\n\n  for i in range(len(dates_list)-1):\n    for j in range(i+1, len(dates_list)):\n      date1_start_year, date1_start_month, date1_start_day, date1_end_year, date1_end_month, date1_end_day = dates_list[i]\n      date2_start_year, date2_start_month, date2_start_day, date2_end_year, date2_end_month, date2_end_day = dates_list[j]\n      # check if the two dates overlap\n      if (date1_start_year <= date2_end_year and date2_start_year <= date1_end_year) and (date1_start_month <= date2_end_month and date2_start_month <= date1_end_month) and (date1_start_day <= date2_end_day and date2_start_day <= date1_end_day):\n        # if the two dates overlap, add to the overlapping set\n        overlaps.add(dates_list[i])\n        overlaps.add(dates_list[j])\n  \n  return list(overlaps)\n \ndates_list = [\n  (2018,1,1,2018,3,1),\n  (2018,12,1,2018,9,30),\n  (2018,2,15,2018,5,10)\n]\n\nprint(detect_overlapping_dates(dates_list))", "category": "Python"}, {"instruction": "Find all the possible permutations in a string without using any built-in functions.", "input": "string = \"ABC\"", "output": "def permute(string):\n  \n  # base case\n  if len(string) == 1:\n    return [string]\n  \n  results = set()\n  # iterate through each character in the string\n  for i in range(len(string)):\n    # select the ith character\n    char = string[i]\n    # generate all the permutations from the remaining characters\n    remaining_characters = string[:i] + string[i+1:]\n    permutations = permute(remaining_characters)\n    # append the ith character to the beginning of each permutation and add to the result set\n    for permutation in permutations:\n      results.add(char + permutation)\n  \n  return list(results)\n\nprint(permute(\"ABC\"))", "category": "Python"}, {"instruction": "Create a function that removes duplicates from an array and returns an array of the unique values.", "input": "array = [5,5,5,10,10,15]", "output": "def remove_duplicates(array):\n \n  new_array = []\n  for number in array:\n    if number not in new_array:\n      new_array.append(number)\n \n  return new_array\n\nprint(remove_duplicates([5,5,5,10,10,15]))", "category": "Python"}, {"instruction": "List out all the sorting algorithms supported in Python.", "input": "", "output": "The sorting algorithms supported in Python include bubble sort, insertion sort, selection sort, merge sort, quick sort, and heap sort.", "category": "Python"}, {"instruction": "Define the term variable.", "input": "", "output": "A variable is a named container for storing data values. Variables are usually used in programming to store and access data in a program. It is important to use a descriptive name for the variable, as it can be used to access the data within it.", "category": "Python"}, {"instruction": "Explain the advantages of using the following linear regression algorithm in Python.", "input": "Linear Regression using Stochastic Gradient Descent", "output": "The advantages of using the Linear Regression algorithm with Stochastic Gradient Descent (SGD) in Python include:\n\n1. It is relatively fast to train, as it only has to go through each sample in the dataset once in order to generate the coefficients.\n2. It requires small datasets and low complexity models, so it can be utilized on limited hardware systems.\n3. It is well suited for problems where the number of features is quite high, and the relationships between features is non-linear.\n4. It can exploit sparse data, which can make it perfect for certain types of data, such as text.", "category": "Python"}, {"instruction": "Create a data visualization in Python using the given dataset.", "input": "Dataset: \nThe data contains information about the latest coronavirus cases per US state", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n \n# Read the dataset\ndf = pd.read_csv('data.csv')\n \n# Create visualization\nfig, ax = plt.subplots(figsize=(10,8))\nax.bar(df['State'], df['Cases'], color='#88e398')\nplt.xlabel('States')\nplt.ylabel('Coronavirus Cases')\nplt.title('Covid-19 Cases per US State')\nplt.xticks(rotation=45)\nplt.show()", "category": "Python"}, {"instruction": "Fill in the blanks in the following code to make it an executable program.", "input": "def\t main():\n    temp = _____\n    if _____:\n        print('It is a hot day')\n    elif _____:\n        print('It is a cold day')\n    else:\n        print('It is a lovely day')\n\nmain()", "output": "def main():\n    temp = 22\n    if temp > 30:\n        print('It is a hot day')\n    elif temp < 10:\n        print('It is a cold day')\n    else:\n        print('It is a lovely day')\n\nmain()", "category": "Python"}, {"instruction": "What is this coding question asking you to do?", "input": "Write a Python function to check whether a number is prime or not", "output": "This coding question is asking you to write a Python function to check whether a given number is prime or not. The function should take an integer as an argument and return a boolean indicating if the number is prime or not.", "category": "Python"}, {"instruction": "Write a function that takes an array of integers and multiplies them together.", "input": "arr = [3, 5, 4]", "output": "def multiplyArray(arr):\n    result = 1\n    for x in arr:\n        result = result * x\n    return result", "category": "Python"}, {"instruction": "You are given a string. Count the total number of lowercase letters in the string.", "input": "", "output": "def count_lowercase(string):\n    count = 0\n    for char in string:\n        if char.islower():\n            count += 1\n    return count", "category": "Python"}, {"instruction": "You are given a list of numbers. Find the maximum sum of any subsequence in the list.", "input": "", "output": "def max_sum_subsequence(nums):\n    max_sum = 0\n    curr_sum = 0\n \n    for num in nums:\n        curr_sum = max(num + curr_sum, 0)\n        max_sum = max(curr_sum, max_sum)\n \n    return max_sum", "category": "Python"}, {"instruction": "Given a string of text, find the total number of characters in the string.", "input": "text = \"You have to do it\"", "output": "def char_count(text):\n    count = 0\n    for char in text:\n        count += 1\n    return count", "category": "Python"}, {"instruction": "You are given a string of words. Count how many words the string contains.", "input": "words = \"This is a testing string\"", "output": "def word_count(words):\n    count = 0\n    for word in words.split():\n        count+=1\n    return count", "category": "Python"}, {"instruction": "Given an array of integers, remove all the duplicated elements from the array and return the distinct array.", "input": "nums=[3, 4, 5, 5, 6, 6, 6, 7]", "output": "def uniq_array(nums):\n    distinct_arr = []\n    for num in nums:\n        if num not in distinct_arr:\n            distinct_arr.append(num)\n    return distinct_arr", "category": "Python"}, {"instruction": "Given a number N find the square root of N.", "input": "", "output": "def sqrt(N): \n    guess = N/2 \n    \n    while abs(guess*guess - N) >= 0.001: \n        guess = 0.5 * (guess + N/guess) \n          \n    return guess", "category": "Python"}, {"instruction": "Design an algorithm to eliminate duplicate elements in a given array.", "input": "Array: [1, 5, 1, -2, 5]", "output": "def remove_duplicates(arr):\n    result = [] \n    for el in arr:\n        if el not in result:\n            result.append(el)\n    return result", "category": "Python"}, {"instruction": "Preprocess a given document, removing stopwords and punctuations.", "input": "document = \"Hello! This is a test document for preprocessing\"", "output": "from nltk.corpus import stopwords\nimport string\n\ndef preprocess_document(document):\n    \"\"\"\n    Preprocess a given document, removing stopwords and punctuations.\n\n    Parameters\n    ----------\n    document : str\n        The document to preprocess\n\n    Returns\n    -------\n    clean_word_list : list\n        The preprocessed word list\n    \"\"\"\n    # Split the document into word list\n    word_list = document.split()\n    stopwords_list = stopwords.words('english')\n\n    # Remove punctuation\n    word_list = [word.strip(string.punctuation) for word in word_list]\n    \n    # Remove words with 2 or fewer characters\n    word_list = [word for word in word_list if len(word) > 2]\n\n    # Remove stopwords\n    clean_word_list = [word for word in word_list if word not in stopwords_list]\n\n    return clean_word_list\n\ndocument = \"Hello! This is a test document for preprocessing\"\nprint(preprocess_document(document)) # Outputs ['Hello', 'test', 'document', 'preprocessing']", "category": "Python"}, {"instruction": "Edit the code such that it prints the same output.", "input": "str1 = \"python \"\nstr2 = \"programming\"\nprint(str1 + str2)", "output": "str1 = \"python\"\nstr2 = \" programming\"\nprint(str1 + str2)", "category": "Python"}, {"instruction": "Train a machine learning algorithm from a given dataset.", "input": "Dataset: The data contains information about students' results in an exam.", "output": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Read the dataset\ndata = pd.read_csv(\"data.csv\")\n\n# Split the data into features and labels\nX = data.drop(['result'], axis=1)\ny = data['result']\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y, \n                                                    test_size=0.2, \n                                                    random_state=0)\n\n# Train the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)", "category": "Python"}, {"instruction": "How are objects instantiated in Python?", "input": "", "output": "Objects are instantiated in Python by using the keyword \"class\". Python then creates a new instance of the class and assigns it a unique object ID. This object is then used as the basis for the object's other attributes and methods, which are defined within the class definition. Object instantiation is usually used to create objects that inherit from other classes, or that contain data that need to be initialized.", "category": "Python"}, {"instruction": "What is the purpose of a join operation in a relational database?", "input": "", "output": "A join operation in a relational database is used to combine data from two or more tables based on a common field. This is done to match and retrieve related data from one or multiple tables and then use it as a single result. The most common type of join is an inner join, which combines only the matching records from both tables. Other types of join operations are left join and right join, which combines all the data from a specified table and contains only the matching data from the other table.", "category": "Python"}, {"instruction": "Parse a JSON response into a Python dictionary.", "input": "{\n    \"name\": \"John Doe\",\n    \"age\": \"35\"\n}", "output": "import json\n\ndef parse_json(json_data):\n    data = json.loads(json_data)\n    return data\n\nif __name__ == '__main__':\n    json_data = '{\"name\": \"John Doe\", \"age\": \"35\"}'\n    print(parse_json(json_data))", "category": "Python"}, {"instruction": "Suggest a valid Python code to print unique characters of a given string", "input": "", "output": "def print_unique(s):\n    output = set()\n    for char in s:\n        if char not in output:\n            output.add(char)\n            print(char)", "category": "Python"}, {"instruction": "Generate an algorithm to multiply two numbers without using multiplication operator", "input": "", "output": "def multiply_without_operator(a, b): \n    # If either a or b = 0, return 0\n    if (a == 0 or b == 0): \n        return 0\n  \n    # Initialize result \n    result = 0\n  \n    # Add a, b number of times \n    for i in range(min(a, b)): \n        result = result + max(a, b) \n  \n    # Return the multiplication result \n    return result", "category": "Python"}, {"instruction": "Suggest a valid Python code to add two numbers", "input": "", "output": "def add_two_numbers(a, b):\n    return a + b", "category": "Python"}, {"instruction": "Reverse a given list without using any predefined functions.", "input": "", "output": "def reverse_list(lst):\n    n = len(lst)\n    for i in range(n // 2): \n        lst[i], lst[n-i-1] = lst[n-i-1], lst[i]\n    return lst", "category": "Python"}, {"instruction": "Design an algorithm to check if a string contains a given substring.", "input": "", "output": "\"\"\"\ndef isSubstring(string, sub): \n    l1 = len(string) \n    l2 = len(sub) \n\n    if l2> l1: \n        return False\n\n    # Sliding window approach\n    for i in range(l1): \n        if string[i:i+l2] == sub : \n            return True \n\n    return False \n\"\"\"", "category": "Python"}, {"instruction": "Create a class in Python named 'Rectangle' which can compute the area of a rectangle.", "input": "", "output": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\t\n    def get_area(self):\n        return self.width * self.height", "category": "Python"}, {"instruction": "Design an algorithm for finding the nth node from the tail of a linked list.", "input": "", "output": "\"\"\"\ndef nthFromLast(head, n): \n    # Initialize slow and fast pointers \n    slow  = head \n    fast = head \n  \n    # Move fast pointer n-1 times \n    while (n > 0): \n        if (fast == None): \n            return None\n  \n        fast = fast.next\n        n = n - 1\n  \n    # Move both slow and fast pointer together \n    while (fast.next != None): \n        slow = slow.next\n        fast = fast.next\n  \n    return slow\n\"\"\"", "category": "Python"}, {"instruction": "Create an algorithm to check if a binary tree is univalued.", "input": "", "output": "\"\"\"\ndef isUnivalTree(root):\n    is_uni = True\n    if root is None:\n        return is_uni\n    else:\n        val = root.val\n        if root.left:\n            is_uni &= root.left.val == val\n        if root.right:\n            is_uni &= root.right.val == val\n        is_uni &= isUnivalTree(root.left)\n        is_uni &= isUnivalTree(root.right)\n    return is_uni\n\"\"\"", "category": "Python"}, {"instruction": "Find the minimum number of coins required to make a given amount", "input": "amount = 93", "output": "def min_coins(amount):\n    # list of coin denominations\n    coins = [1, 5, 10, 25]\n    min_coins = 0\n    i = len(coins) - 1\n    while(amount > 0):\n        if (amount >= coins[i]):\n            amount -= coins[i]\n            min_coins += 1\n        else:\n            i -= 1\n    return min_coins\n\n# Output\nmin_coins(amount)\n\n# Output\n7", "category": "Python"}, {"instruction": "Create a function to generate the weight of a given sequence of DNA", "input": "DNA = \"GTCATCTGAG\"", "output": "def generate_DNA_weight(DNA):\n    \n    # Initialize the weights dict\n    weights = {\n        \"G\": 57.02,\n        \"A\": 71.04,\n        \"T\": 89.09,\n        \"C\": 103.01    \n    }\n\n    # Calculate the weight\n    weight = 0.0\n    for character in DNA:\n        weight += weights[character]\n    return weight\n\n# Output\ngenerate_DNA_weight(DNA)\n\n# Output\n698.22", "category": "Python"}, {"instruction": "Implement a in-order traversal of a binary tree in Python.", "input": "", "output": "class Node: \n    def __init__(self, data): \n        self.data = data  \n        self.left = None\n        self.right = None\n\ndef inOrderTraversal(root):  \n    if root is not None: \n        inOrderTraversal(root.left)\n        print(root.data)\n        inOrderTraversal(root.right)\n\nroot = Node(1)\nroot.left = Node(7)\nroot.right = Node(9)\nroot.left.left = Node(4)\nroot.left.right = Node(8)\n\ninOrderTraversal(root)\n\n# Output\n4\n7\n1\n8\n9", "category": "Python"}, {"instruction": "Extract the phone numbers from a string of text", "input": "text = \"My number is (202) 555-0123 and my friend's number is (703) 555-9876\"", "output": "import re\n\ndef extract_phone_numbers(text): \n    phones = re.findall(\"\\(\\d{3}\\) \\d{3}\\-\\d{4}\",text) \n    return phones\n\nprint(extract_phone_numbers(text))\n\n# Output\n['(202) 555-0123', '(703) 555-9876']", "category": "Python"}, {"instruction": "Create a new Python class called Area to calculate the area of different shapes.", "input": "", "output": "class Area:\n    def __init__(self):\n        pass\n\n    def calculate_area_rectangle(self, length, width):\n        return length * width\n\n    def calculate_area_triangle(self, base, height):\n        return 0.5 * base * height\n\n    def calculate_area_circle(self, radius):\n        return 3.14 * radius**2", "category": "Python"}, {"instruction": "Write a callback function for the following requirements", "input": "This callback should be able to store the input emit it when triggered", "output": "def store_and_emit(data):\n    stored_data = data\n    def emit_stored_data():\n        return stored_data\n    return emit_stored_data", "category": "Python"}, {"instruction": "Rewrite the given Python code snippet using list comprehensions .", "input": "even_list = []\nfor x in my_list:\n    if x % 2 == 0:\n        even_list.append(x)", "output": "even_list = [x for x in my_list if x % 2 == 0]", "category": "Python"}, {"instruction": "Write Python code to store odd numbers from the given list in a separate list.", "input": "list = [1, 2, 3, 4, 5, 6, 7]", "output": "odds = []\nfor num in list:\n    if num % 2 != 0:\n        odds.append(num)", "category": "Python"}, {"instruction": "Implement a neural network from scratch", "input": "", "output": "class NeuralNetwork:\n  def __init__(self, num_inputs, num_hidden_layers, num_outputs):\n    self.num_inputs = num_inputs\n    self.num_hidden_layers = num_hidden_layers\n    self.num_outputs = num_outputs\n\n    self.weights_input_to_hidden = np.random.randn(num_inputs, num_hidden_layers) \n    self.bias_hidden = np.zeros(num_hidden_layers)\n    self.weights_hidden_to_output = np.random.randn(num_hidden_layers, num_outputs)\n    self.bias_output = np.zeros(num_outputs)\n    \n    self.activation_function = lambda x : 1/(1+np.exp(-x))\n\n  def forward_propagation(self, inputs):\n    # Compute the inputs to the hidden layer\n    hidden_in = np.dot(inputs, self.weights_input_to_hidden) + self.bias_hidden\n    # Compute the hidden layer output\n    hidden_out = self.activation_function(hidden_in)\n    # Compute the inputs to the output layer\n    output_in = np.dot(hidden_out, self.weights_hidden_to_output) + self.bias_output\n    # Return the output layer output\n    return output_in", "category": "Python"}, {"instruction": "Find all the elements in a Python list that correspond to a certain condition using list comprehension", "input": "list = [-3, -2, -1, 0, 1, 2, 3]", "output": "[x for x in list if x >= 0]", "category": "Python"}, {"instruction": "Write a function to parse a string and return a dictionary where each character in the string is mapped to its frequency.", "input": "\"hello world\"", "output": "def get_frequency_map(string): \n    frequency_map = {}\n    # count the frequency of each character\n    for char in string: \n        if char in frequency_map:\n            frequency_map[char] += 1\n        else:\n            frequency_map[char] = 1\n    return frequency_map\n\nstring = \"hello world\"\n\nfrequency_map = get_frequency_map(string)\nprint(frequency_map)  # {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}", "category": "Python"}, {"instruction": "Create a final list of all unique elements in list_1 and list_2.", "input": "list_1 = [1, 2, 3, 4, 5]\nlist_2 = [2, 4, 6, 8, 10]", "output": "def get_unique_elements(list1, list2):\n    unique_elements = []\n\n    for element in list1:\n        if element not in list2:\n            unique_elements.append(element)\n\n    for element in list2:\n        if element not in list1:\n            unique_elements.append(element)\n\n    return unique_elements\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [2, 4, 6, 8, 10]\n\nunique_list = get_unique_elements(list1, list2)\n\nprint(unique_list)  # [1, 3, 5, 6, 8, 10]", "category": "Python"}, {"instruction": "How are dictionaries implemented in Python?", "input": "", "output": "Dictionaries in Python are implemented as hash tables. Each key-value pair is stored as an entry in the hash table, and a hash function is used to map the key to its corresponding index in the table. This allows fast lookups of the associated value of a given key and makes dictionary operations such as insertion, deletion, and retrieval very efficient. Furthermore, dictionaries are mutable, meaning they can be changed after they are created.", "category": "Python"}, {"instruction": "Generate a dictionary with the key-value pairs {1:1, 2:4, 3:9, 4:16}", "input": "", "output": "def generate_dict():\n    \"\"\"Generate a dictionary with the key-value pairs {1:1, 2:4, 3:9, 4:16}\"\"\"\n    my_dict = {}\n    for i in range(1, 5):\n        my_dict[i] = i**2\n    return my_dict\n\ngenerate_dict() # Outputs {1:1, 2:4, 3:9, 4: 16}", "category": "Python"}, {"instruction": "Create a histogram chart of the given data.", "input": "dataset = [2, 3, 5, 6, 7, 4]", "output": "import matplotlib.pyplot as plt\n\ndef create_histogram(dataset):\n    \"\"\"\n    Create a histogram chart of the given data.\n\n    Parameters\n    ----------\n    dataset : list\n        The data to plot on the chart\n\n    Returns\n    -------\n    None\n    \"\"\"\n    plt.hist(dataset, bins=7, facecolor=\"blue\", alpha=0.5)\n    plt.title(\"Histogram\")\n    plt.xlabel(\"Values\")\n    plt.ylabel(\"Frequency\")\n    plt.show()\n\ndataset = [2, 3, 5, 6, 7, 4]\ncreate_histogram(dataset) # Outputs a histogram chart of the given data", "category": "Python"}, {"instruction": "What is an exception handling code in Python?", "input": "", "output": "Exception handling in Python is a process in which errors or exceptions in a program are handled using certain programming construct such as try-except or try-finally blocks so that the program can recover from such exceptions and continue running. Exception handling helps prevent critical errors in the program from crashing the entire program and allows developers to write more robust codes.", "category": "Python"}, {"instruction": "Modify the following code so that it takes a user input for the numbers for which to calculate the sum.", "input": "", "output": "def sum_numbers():\n    number_list = []\n    input_numbers = input(\"Please enter the numbers you want to sum up (enter q to exit): \")\n    while input_numbers != \"q\":\n        number_list.append(int(input_numbers))\n        input_numbers = input(\"Please enter the numbers you want to sum up (enter q to exit): \")\n    return sum(number_list)", "category": "Python"}, {"instruction": "Create a function in Python which takes an integer n and an unsorted list of numbers as input and returns the nth smallest number in the list.", "input": "[5, 8, 1, 9, 4], 3", "output": "def nth_smallest(nums, n):\n    sorted_nums = sorted(nums)\n    return sorted_nums[n-1]\n\nprint(nth_smallest([5, 8, 1, 9, 4], 3)) # Output: 5", "category": "Python"}, {"instruction": "How would you verify that a given string is a valid email address?", "input": "", "output": "To verify that a given string is a valid email address, you should use a regular expression. A regular expression is a sequence of characters which can be used to check if the string matches a predefined pattern. The pattern for a valid email address should ensure that it contains the symbol \"@\" and at least one period (.) in the domain name.", "category": "Python"}, {"instruction": "Write a Python program to reverse each word of a given sentence.", "input": "This is a test", "output": "def reverse_words(sentence):\n    words = sentence.split()\n    reversed_words = [word[::-1] for word in words]\n    return ' '.join(reversed_words)\n\nprint(reverse_words(\"This is a test\")) # Output: sihT si a tset", "category": "Python"}, {"instruction": "Create a function in Python which takes a string and an integer n as input and returns a string with the first n characters of the given string.", "input": "", "output": "def get_first_n_chars(string, n):\n    return string[:n]", "category": "Python"}, {"instruction": "Explain why recursion is a powerful technique for solving problems.", "input": "", "output": "Recursion is a powerful technique for solving problems because it allows for decomposing complex problems into simpler subproblems. By breaking down a problem into smaller components, it becomes easier to solve. This process can be repeated until a base case is reached, providing a way to reach a solution for the original problem. Additionally, recursive solutions tend to be shorter and easier to comprehend than iterative solutions.", "category": "Python"}, {"instruction": "Design an efficient algorithm to search for an item in an array.", "input": "", "output": "One efficient algorithm to search for an item in an array is the binary search algorithm. The binary search algorithm works by dividing the array into two parts and then searching through the divided parts in logarithmic time. The algorithm starts by comparing the item to be searched with the middle element of the array. If the item is smaller than the middle element, then the algorithm searches the first part of the array. If the item is larger than the middle element, then the algorithm searches the second part of the array. The process is then repeated until the item is found or the algorithm reaches the end of the array.", "category": "Python"}, {"instruction": "Write code to create a bar chart comparing the performance of two different algorithms.", "input": "Algorithm 1: [90, 91, 95, 94, 99]\nAlgorithm 2: [83, 89, 95, 91, 99]", "output": "import matplotlib.pyplot as plt \n  \n# Data to plot \nalgorithm1 = [90, 91, 95, 94, 99]\nalgorithm2 = [83, 89, 95, 91, 99]\n  \n# plotting a bar chart \nplt.bar([1, 2, 3, 4, 5], algorithm1, label = \"Algorithm1\", width = 0.25, color = 'b') \nplt.bar([1.25, 2.25, 3.25, 4.25, 5.25], algorithm2, \n        label = \"Algorithm2\", width = 0.25, color = 'r') \n  \n# Naming X-axes \nplt.title('Performance Comparison') \nplt.xlabel('Runs') \nplt.ylabel('Accuracy %') \nplt.xticks([1.125, 2.125, 3.125, 4.125, 5.125], ['1', '2', '3', '4', '5']) \n  \n# Show the legend \nplt.legend() \n  \n# Function to show the plot \nplt.show()", "category": "Python"}, {"instruction": "Read this JSON structure, parse it and print the value of \"name\".", "input": "{ \n  \"person\": { \n    \"name\":\"John\", \n    \"age\": 30, \n    \"location\": \"USA\"\n  }\n}", "output": "import json \n  \n# input JSON \njson_data = '{ \"person\": { \"name\":\"John\", \"age\":30, \"location\":\"USA\" } }'\n\n# parse json\ndata = json.loads(json_data) \n\n# get the name\nname = data[\"person\"][\"name\"] \n\n# print the name\nprint(name)", "category": "Python"}, {"instruction": "Write a Tensorflow model to classify a given X and Y as either positive or negative.", "input": "X = [1, 1, 2, 4]\nY = [3, 1, 0, 4]", "output": "import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n  tf.keras.layers.Dense(8, input_dim=2, activation=\"relu\"), \n  tf.keras.layers.Dense(1, activation=\"sigmoid\")\n])\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer=tf.keras.optimizers.Adam(0.01),\n              metrics=['accuracy'])\n\nX_list = [X, Y] \ny = [1, 0]\n\nmodel.fit(X_list, y, batch_size=4, epochs=4)", "category": "Python"}, {"instruction": "Modify the previous code so that it is now optimized for time complexity?", "input": "def quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quick_sort(less) + [pivot] + quick_sort(greater)", "output": "def quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        i = 1\n        for j in range(1, len(arr)):\n            if arr[j] < pivot:\n                arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n        arr[0], arr[i-1] = arr[i-1], arr[0]\n        left = quick_sort(arr[:i-1])\n        right = quick_sort(arr[i:])\n        return left + [arr[i-1]] + right", "category": "Python"}, {"instruction": "Create the following table using the Python language:", "input": "", "output": "table = [[\"Name\", \"Age\", \"Gender\"],[\"John\", 20, \"Male\"], [\"Anna\", 18, \"Female\"],[\"Adam\", 22, \"Male\"], [\"Sophie\", 19, \"Female\"]]", "category": "Python"}, {"instruction": "Develop a code in python to list the elements present in a given dictionary.", "input": "dictionary = {\n    \"name\": \"John\",\n    \"age\": 20,\n    \"location\": \"London\"\n}", "output": "def list_elements(dict):\n    for item in dict:\n        print(item, \":\", dict[item])\n\nlist_elements(dictionary)\n\n# Output:\n# name : John\n# age : 20\n# location : London", "category": "Python"}, {"instruction": "Design a program that automatically refactors a python code to improve readability and reduce complexity.", "input": "def myfunc():\nx = 1\ny = 5\nreturn x + y", "output": "def myfunc():\n    x = 1\n    y = 5\n    return x + y", "category": "Python"}, {"instruction": "Output the items in a list with the length less than or equal to the given number.", "input": "list_items = [1, 2, 3, 4, 5]\ngiven_number = 3", "output": "output_items = [item for item in list_items if len(str(item)) <= given_number]\nprint(output_items)\n\n# Output\n[1, 2, 3]", "category": "Python"}, {"instruction": "Create a function that takes in an array and displays all of the elements in the array in reverse order.", "input": "list_elements = [15,19,20]", "output": "def reverse_list_elements(list_elements):\n    list_elements.reverse()\n    for element in list_elements:\n        print(element)", "category": "Python"}, {"instruction": "Debug the following code by finding the syntax error.", "input": "def calculate_value(nums):\n    result = 0\n    for num in nums\n        result += num\n    return result", "output": "def calculate_value(nums):\n    result = 0\n    for num in nums: # missing colon\n        result += num\n    return result", "category": "Python"}, {"instruction": "Write an algorithm to check if a number is even or not without using modulus (%) operator", "input": "", "output": "def is_even(num):\n\tif num & 1 == 0:\n\t\treturn True\n\telse:\n\t\treturn False", "category": "Python"}, {"instruction": "Create a Python program that accepts input from the user and prints out the result for Fibonacci sequence", "input": "", "output": "def print_fibonacci(n):\n  a = 0\n  b = 1\n  print('Fibonacci sequence:')\n  while a < n:\n    print(a, end=' ')\n    tmp_var = a\n    a = b\n    b = tmp_var + b\n\nnum = int(input(\"Enter positive number: \"))\nprint_fibonacci(num)", "category": "Python"}, {"instruction": "Given two arrays of integers, find a pair of values (one from each array) that you can swap to give the two arrays the same sum.", "input": "[1, 2, 3, 4], [3, 2, 1, 4]", "output": "def find_pair(arr1, arr2):\n    sum_arr1 = sum(arr1)\n    sum_arr2 = sum(arr2)\n    diff = abs(sum_arr1 - sum_arr2)\n\n    for x in arr1:\n        for y in arr2:\n            if x + y == diff:\n                return (x, y)\n\n    return -1", "category": "Python"}, {"instruction": "Generate a hash of a given string using the SHA-256 algorithm in Python.", "input": "string = \"Hello World\"", "output": "import hashlib\n\nstring = \"Hello World\"\nresult = hashlib.sha256(string.encode()).hexdigest()\nprint(result)  # output: \"a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e\"", "category": "Python"}, {"instruction": "How would you collect data from websites using Scrapy?", "input": "", "output": "Scrapy is a Python framework used for web scraping. It can be used to extract data from websites using a variety of techniques. The first step is to create a Scrapy project and define the items you want to scrape. After that, create a Spider class which is responsible for crawling and extracting the data. Finally, you can use a range of methods like XPath and CSS selectors to collect the data.", "category": "Python"}, {"instruction": "Write a function to generate a random permutation of a given array.", "input": "[1, 2, 3, 4, 5]", "output": "import random \n  \ndef random_permutation(input_list): \n    n = len(input_list) \n    for i in range( n - 1 ):\n        j = random.randint(i, n-1)\n        input_list[i], input_list[j] = input_list[j], input_list[i] \n    return input_list", "category": "Python"}, {"instruction": "Develop a function in python to check if a given word can be formed with the given set of letters.", "input": "Set of letters: 'abeos'\nWord: 'seabed'", "output": "def can_form_word(set_letters, word):\n    flag = True\n    for letter in word:\n        if letter not in set_letters:\n            flag = False\n            break\n    return flag", "category": "Python"}, {"instruction": "Come up with a python code to find the mean of a list of numbers.", "input": "nums = [78, 79, 79, 79, 79, 80]", "output": "total = 0\nfor num in nums:\n    total += num\nmean = total/len(nums)\nprint(mean)", "category": "Python"}, {"instruction": "Implement a function which takes an array and returns the maximum number.", "input": "[2, 4, 8, 6]", "output": "def max_num(arr):\n    n = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > n:\n            n = arr[i]\n    return n\n\nmax_num([2, 4, 8, 6]) # Output: 8", "category": "Python"}, {"instruction": "Suggest a code to add the values of all odd numbers in an array.", "input": "arr = [1, 2, 3, 4, 5, 6]", "output": "total = 0\nfor num in arr:\n    if num % 2 == 1:  # Check if num is odd\n        total += num", "category": "Python"}, {"instruction": "What is the meaning of the modulo operator in python?", "input": "", "output": "In Python, the modulo operator (also known as the \u201cremainder\u201d or \u201cmodulus\u201d operator) is the percentage sign (%). It is used to calculate the remainder after division of one number by another. For example, the expression \u201c7 % 3\u201d will evaluate to 1. This means that the remainder after 7 is divided by 3 is 1. Generally, the syntax for this operation is \u201ca % b\u201d, where a and b are numbers. The result of this operation is the remainder after a is divided by b.", "category": "Python"}, {"instruction": "For the following function, suggest a test case that can be used to check the correctness of the function.", "input": "def find_mode(arr):\n    \"\"\"\n    Function to find the mode of a list\n    Parameters:\n        arr: The list of values\n    Returns:\n        The mode of the list\n    \"\"\"", "output": "A test case that can be used to check the correctness of the function is to pass the list [1, 1, 2, 3, 3, 3] to the function. The function should return 3 as the mode, which is the element that appears most frequently in the list.", "category": "Python"}, {"instruction": "Suggest a code to get the smallest and largest number in an unsorted list.", "input": "", "output": "def get_smallest_largest(arr):\n    \"\"\"\n    Function to return the smallest and largest numbers in a list\n    Parameters:\n        arr: An unsorted list of numbers\n    Returns:\n        A tuple containing the smallest and largest numbers in the list\n    \"\"\"\n    smallest = arr[0]\n    largest = arr[0]\n\n    for elem in arr:\n        if elem < smallest:\n            smallest = elem\n        if elem > largest:\n            largest = elem\n    \n    return (smallest, largest)", "category": "Python"}, {"instruction": "Convert the following python code to an equivalent JavaScript code.", "input": "for item in items:\n    print(item)", "output": "items.forEach(item => {\n    console.log(item);\n});", "category": "Python"}, {"instruction": "How do you compare two numbers, num1 and num2, in python?", "input": "", "output": "We can compare two numbers, num1 and num2, in Python using the comparison operators. These are the equality operators (== and !=), the relational operators (> and <) and the logical operators (and, or, not). For example, ``num1 == num2`` checks if two numbers are equal, ``num1 > num2`` checks if num1 is greater than num2, and ``num1 < num2`` checks if num1 is less than num2. We can also use logical operators like ``num1 > num2 and num2 < num3``, which checks if num1 is greater than num2 and num2 is less than num3.", "category": "Python"}, {"instruction": "Create a neural network to classify types of dogs", "input": "", "output": "import keras\nimport numpy as np\nfrom keras.layers import Dense\nfrom keras.models import Sequential\n\n# Building a Sequential model\nmodel = Sequential()\n# Input layer with 2 neurons\nmodel.add(Dense(2, input_dim=64, activation='relu'))\n# Hidden layer with 3 neurons\nmodel.add(Dense(3, activation='relu'))\n# Output layer with 15 neurons (15 classes)\nmodel.add(Dense(15, activation='softmax'))\n\n# Compiling and training the model\nmodel.compile(loss='mean_squared_error',\n              optimizer='adam',\n              metrics=['accuracy'])\nmodel.fit(training_samples, labels, epochs=100)", "category": "Python"}, {"instruction": "Merge two sorted linked lists and return it as a new list.", "input": "", "output": "def merge_sorted_lists(list1, list2):\n    \"\"\" Merges two sorted linked lists and returns it as a new list\n    \n    Args:\n        list1 (list): The first sorted linked list \n        list2 (list): The second sorted linked list\n        \n    Returns:\n        list: The merged sorted linked list\n    \"\"\"\n    # Initialize the merged list\n    merged_list = []\n    \n    # Initialize the pointers\n    i = 0\n    j = 0\n\n    # Iterate over the two lists\n    while i < len(list1) and j < len(list2):\n        # Add the element with the smaller value to the merged list\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    \n    # Add the remaining elements to the merged list\n    while i < len(list1):\n        merged_list.append(list1[i])\n        i += 1\n    \n    while j < len(list2):\n        merged_list.append(list2[j])\n        j += 1\n    \n    return merged_list", "category": "Python"}, {"instruction": "Print the nth element from a spin lock sequence using only O(1) space.", "input": "", "output": "def get_spinlock_element(n):\n    \"\"\" Prints the nth element from a spin lock sequence using only O(1) space\n    \n    Args:\n        n (int): The number of the element to be retrieved\n        \n    Returns:\n        int: The nth element\n    \"\"\"\n    # Initialize the step size\n    step_size = 343\n    \n    # Find the previous two elements in the iteration\n    first = 0\n    second = 0\n    \n    # Initialize the index of the element to be retrieved\n    index = 0\n    \n    # Iterate over the elements until we reach the desired element\n    while index < n:\n        # Generate the next element in the sequence\n        element = first + second + 1\n        \n        # Update the previous two elements\n        first, second = second, element\n        \n        # Move the index\n        index += step_size\n    \n    # Return the element at the nth position\n    return element", "category": "Python"}, {"instruction": "Write a code to generate n terms of the Fibonacci sequence.", "input": "", "output": "def get_fibonacci(n):\n    \"\"\" Generates n terms of the Fibonacci sequence\n    \n    Args:\n        n (int): The number of Fibonacci terms to generate\n        \n    Returns:\n        list: A list of the first n Fibonacci numbers\n    \"\"\"\n    # Initialize first two Fibonacci numbers\n    a = 0\n    b = 1\n\n    # Initialize the Fibonacci Sequence list\n    fibonacci_sequence = []\n    fibonacci_sequence.append(a)\n    fibonacci_sequence.append(b)\n\n    # Generate the Fibonacci Sequence\n    while len(fibonacci_sequence) < n:\n        c = a + b\n        fibonacci_sequence.append(c)\n        a = b\n        b = c\n\n    return fibonacci_sequence", "category": "Python"}, {"instruction": "Write a code snippets in Python to print the contents of a dictionary.", "input": "{\"key1\": \"value1\", \"key2\": \"value2\"}", "output": "for key, value in dict.items():\n   print(\"Key: {}, Value: {}\".format(key, value))", "category": "Python"}, {"instruction": "Explain in detail what is the significance of a local variable in Python", "input": "", "output": "A local variable in Python is a variable that is declared within a function or a class. It is a variable that only exists in the context of that function or class, and cannot be accessed outside the function or class in which it is declared. Local variables are also referred to as \"lexical\" or \"automatic\" variables because they are automatically scoped to the function or class in which they are declared. They are different from global variables, which are available to the entire program. Local variables are helpful in limiting the scope of a variable, which means that the variable is only accessible in the function or class in which it is declared. This can help make code more efficient, clear, and secure.", "category": "Python"}, {"instruction": "Construct a regular expression pattern in Python that matches all emails.", "input": "", "output": "pattern = r\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,63}$\"", "category": "Python"}, {"instruction": "Create a function to search for a given element in a list and output its index.", "input": "list_numbers = [1, 2, 3, 4, 5]", "output": "def search_list(list_numbers, element):\n    for i in range(len(list_numbers)):\n        if list_numbers[i] == element:\n            return i", "category": "Python"}, {"instruction": "Output the total number of elements in a given list.", "input": "list_numbers = [1, 2, 3, 4, 5]", "output": "def count_list_elements(list_numbers):\n    count = 0\n    for element in list_numbers:\n        count += 1\n    return count", "category": "Python"}, {"instruction": "Create a function to compare two strings and output their similarity score.", "input": "string_1 = \"python\"\nstring_2 = \"coding\"", "output": "def compare_strings(string_1, string_2):\n    similarity_score = 0\n    n = min(len(string_1), len(string_2))\n    for i in range(n): \n        if string_1[i] == string_2[i]: \n            similarity_score += 1\n    return similarity_score", "category": "Python"}, {"instruction": "What is the command to run a Python script from the command line?", "input": "", "output": "The command to run a Python script from the command line is `python filename.py`.", "category": "Python"}, {"instruction": "What data structure would be best to store an employee roster containing their name, age, and gender?", "input": "", "output": "The best data structure for storing an employee roster containing their name, age, and gender would be a hash table. A hash table is a data structure that allows for fast lookups and inserts by mapping values to keys. Each employee can be stored as a key-value pair, with their name, age, and gender as the respective values.", "category": "Python"}, {"instruction": "Create a Python function that prints all the values in a dictionary.", "input": "Dictionary:  { \"a\": 1, \"b\": 2, \"c\": 3 }", "output": "def printDictValues(dict):\n\u00a0\u00a0\u00a0\u00a0for key, value in dict.items():\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(value)\n\nprintDictValues({\"a\": 1, \"b\": 2, \"c\": 3})", "category": "Python"}, {"instruction": "Create a code snippet to print the star pattern below in Python.", "input": "", "output": "# Print the pattern \nrows = 5\nfor i in range(0, rows): \n    for j in range(0, i + 1): \n        print(\"*\", end=' ') \n    print(\"\\r\")", "category": "Python"}, {"instruction": "Create a function to calculate the sum of numbers from a given list in Python.", "input": "", "output": "def sum_list(list):\n    \"\"\"Calculate the sum of numbers from a given list\"\"\"\n    # Initialize sum\n    s = 0\n    # Sum the list\n    for number in list:\n        s += number\n    # Return the result\n    return s", "category": "Python"}, {"instruction": "Improve the following code snippet to make it more efficient and organized.", "input": "def printElements(list):\n  for element in list:\n    print(element)", "output": "def printElements(list):\n    \"\"\"Print all elements of a given list.\"\"\"\n    # Check if list is empty\n    if not list:\n        print(\"List is empty\")\n    # Loop through the list\n    else:\n        for element in list:\n            print(element)", "category": "Python"}, {"instruction": "Develop a Python function to append a number with zeros to a given string up to a maximum number of characters.", "input": "string = \"some_string\", max_len = 10", "output": "def append_num_with_zeros(string, max_len):\n    \"\"\"Append a number with zeros to a given string up to a maximum number of characters.\"\"\"\n    # Convert string to list\n    ls = list(string)\n    # Calculate number of zeros required to append\n    num_zeros = max_len - len(string)\n    # Append zeros\n    for i in range(num_zeros):\n        ls.append('0')\n    # Convert list back to string\n    return ''.join(ls)", "category": "Python"}, {"instruction": "Use conditionals and a for loop to return the sum of all odd numbers up to a given number.", "input": "", "output": "def sum_odd_nums(n):\n    total = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            total += i\n    return total", "category": "Python"}, {"instruction": "Generate a code that creates a dictionary from two different lists with equal length.", "input": "list1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]", "output": "def create_dictionary(list1, list2):\n    if len(list1) != len(list2):\n        return \"lists have different lengths\"\n    else:\n        my_dict = dict(zip(list1, list2))\n        return my_dict\n\nlist1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]\nprint(create_dictionary(list1, list2)) #output: {'a': 1, 'b': 2, 'c': 3}", "category": "Python"}, {"instruction": "Explain the concept of assembly language.", "input": "", "output": "Assembly language is a low-level programming language that provides a symbolic representation of the machine instructions for a specific processor or family of processors. It is typically used when writing code for embedded systems, or when the target processor and/or instruction set of the program is not well-known. Assembly language is generally used when more control over the memory management and data layout of a program is desired. It also allows for generating more efficient code since the code can be tailored for the target processor and instruction set.", "category": "Python"}, {"instruction": "Construct an algorithm to fulfill the following purpose", "input": "Find the two numbers that add up to a given number N.", "output": "def twoSum(N, arr):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == N:\n                return (arr[i], arr[j])", "category": "Python"}, {"instruction": "Implement Quicksort in Python to sort this list of integers.", "input": "[8, 5, 3, 9, 1]", "output": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n\n    return quicksort(left) + middle + quicksort(right)\n\nsorted_arr = quicksort([8, 5, 3, 9, 1])\n \nprint(sorted_arr)", "category": "Python"}, {"instruction": "What is aHeap data structure?", "input": "", "output": "A heap is a specialized tree-based data structure in which the root-node key is compared with the keys of its children and arranged accordingly. It is typically used to implement priority queues where the key for each item is based on its priority. Heaps are also used for sorting, representing graphs, and as a data structure for the heapsort sorting algorithm.", "category": "Python"}, {"instruction": "Create a function my_func in Python that accepts three integers x, y and z as parameters and returns the maximum.", "input": "", "output": "def my_func(x, y, z):\n  max_num = max(x, y, z)\n  return max_num", "category": "Python"}, {"instruction": "Why is overflow an issue in computer science?", "input": "", "output": "In computer science, overflow occurs when the result of a computation exceeds the capacity of its data type, resulting in Loss of accuracy or erroneous answers from a computation. Certain programming errors lead to overflow, such as incrementing a counter past the capacity of its assigned data type, or calculating a value far greater than the data type is designed to handle. Overflow can result in critical errors like stepping off the end of an array or incorrect mathematical expressions. It is important to be aware of overflow and anticipate it in order to be able to prevent it with proper error checking.", "category": "Python"}, {"instruction": "Build a machine learning model using scikit-learn to predict the house prices in Boston.", "input": "- Number of rooms: 3 \n- Average number of rooms per dwelling: 6 \n- Proportion of residential land zoned for lots over 25,000 sq.ft: 0.4\n- Index of accessibility to radial highways: 4\n- Full-valuation property-tax rate per $10,000: 300", "output": "import sklearn\nfrom sklearn.linear_model import LinearRegression\n\n# Create feature and label\nX = [[3,6,0.4,4,300]]\ny = [[BostonHousePrice]]\n\n# Create and fit the linear regression model\nreg = LinearRegression().fit(X, y)\n\n# Predict the output\nprediction = reg.predict([[3,6,0.4,4,300]])[0][0]", "category": "Python"}, {"instruction": "Convert this list into a numpy array and sort it.", "input": "[3, 5, 1, 9, 6]", "output": "import numpy as np\n\n# Convert to numpy array\narr = np.array([3, 5, 1, 9, 6])\n\n# Sort the array\narr.sort()\n\n# Print the sorted array\nprint(arr)", "category": "Python"}, {"instruction": "Construct a for loop to print a user-defined pattern.", "input": "*\n**\n***\n****", "output": "for i in range(1, 5):\n    for j in range(0, i):\n        print(\"*\", end=\"\")\n    print() # add a new line", "category": "Python"}, {"instruction": "Write a code to print out all the even numbers in the range 0 to 10.", "input": "", "output": "for i in range(0, 11):\n    if i%2 == 0:\n        print(i)", "category": "Python"}, {"instruction": "What is the standard indentation size for Python code?", "input": "", "output": "The standard indentation size for Python code is 4 spaces.", "category": "Python"}, {"instruction": "Create a class to create a naive bayes model.", "input": "", "output": "class NaiveBayesModel: \n    def __init__(self): \n        pass \n      \n    def train(self, data, labels): \n        self.prior_probability = self.calculatePriorProbabilities(labels)\n        self.likelihoods = self.calculateLikelihoods(data, labels)\n    \n    def calculatePriorProbabilities(self, labels): \n        labels_counts = {} \n        for label in labels: \n            if label not in labels_counts: \n                labels_counts[label] = 0 \n            labels_counts[label] += 1 \n              \n        return {label: count/len(labels)\n                for label, count in labels_counts.items()} \n\n    def calculateLikelihoods(self, data, labels): \n        likelihoods = {} \n        for feature, values in data.items(): \n            likelihoods[feature] = {} \n            for label in labels: \n                for value in values: \n                    pass # complete the calculation\n                    \n        return likelihoods", "category": "Python"}, {"instruction": "Write a function to find all distinct permutations of a given list", "input": "[1,2,3]", "output": "def permute(nums):\n    # base case when only one element in the list\n    if len(nums) == 1:\n        return [nums] \n  \n    permutations = []\n    for i in range(len(nums)): \n        m = nums[i] \n \n        # extract remaining list \n        remain = nums[:i] + nums[i+1:] \n  \n        # Iterate over remaining list and \n        # generate all permutations \n        for p in permute(remain): \n            permutations.append([m] + p) \n  \n    return permutations", "category": "Python"}, {"instruction": "Generate a method in Python to sort a given list of dictionaries.", "input": "list_dict = [{'name': 'a', 'age': 23}, {'name': 'b', 'age': 19}, {'name': 'c','age': 36}]", "output": "def dict_sort(list_dict): \n    sorted_dict = sorted(list_dict, key = lambda x: x['age']) \n    return sorted_dict", "category": "Python"}, {"instruction": "Generate a shorthand method in Python to replace all 0s with 1.", "input": "input_list = [1, 0, 1, 0, 0]", "output": "def replace_zeros(input_list): \n    output_list = [x if x != 0 else 1 for x in input_list] \n    return output_list", "category": "Python"}, {"instruction": "Create a function in python that takes a string and returns a new string with the same letter count but in ascending order", "input": "word = \u201ctweet\u201d", "output": "def ascending_order(word):\n    list = []\n    for letter in word:\n        list.append(letter)\n    sorted_list = sorted(list)\n    return \"\".join(sorted_list)", "category": "Python"}, {"instruction": "Add a function to the existing code that takes an integer value as input and prints a square of '*' characters.", "input": "def print_square(length):", "output": "def print_square(length):\n  for i in range(0, length):\n    for j in range(0, length):\n      print(\"*\", end=\"\")\n    print(\"\")", "category": "Python"}, {"instruction": "Create a loop in Python that counts down from 10 to 0.", "input": "", "output": "for i in range(10, 0, -1):\n  print(i)", "category": "Python"}, {"instruction": "Create an algorithm in Python to calculate the compound interest", "input": "", "output": "def compound_interest(principal, rate, time): \n  \n    # Calculates compound interest\n    CI = principal * (pow((1 + rate / 100), time))  \n    return CI \n  \n# Driver Code \nprincipal=8000\nrate=3\ntime=5\n  \nprint(\"Compound interest is\", compound_interest(principal, rate, time))", "category": "Python"}, {"instruction": "Create a NumPy array containing three zeros and three ones.", "input": "", "output": "np.array([0, 0, 0, 1, 1, 1])", "category": "Python"}, {"instruction": "Find all substrings of a string that are palindromes in Python.", "input": "", "output": "def get_all_palindromes(input_string):\n    palindromes = []\n    for substring_length in range(len(input_string)):\n        for i in range(len(input_string) - substring_length + 1):\n            sub_string = input_string[i: i + substring_length]\n            if sub_string == sub_string[::-1]:\n                palindromes.append(sub_string)\n    return palindromes\n\n# Usage\npalindromes = get_all_palindromes(\"banana\")\nprint(palindromes) # ['a', 'ana', 'anana', 'b', 'na', 'nana']", "category": "Python"}, {"instruction": "Generate a recursive function for calculating the factorial of a number.", "input": "", "output": "def factorial(num):\n    # base case\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)\n\n# Usage\nprint(factorial(3)) # 6", "category": "Python"}, {"instruction": "What type of data structure would you use to store key-value pairs in a Python program?", "input": "", "output": "The data structure to use for key-value pairs in Python is a dictionary. A dictionary is a data type that consists of key-value pairs, and is denoted by {} in Python. Each key has a unique value associated with it that can be accessed using the key. For example, a dictionary called \"person\" could look like this: \n\nperson = {'name':'John', 'age': 32} \n\nThe value of the key \"name\" can be accessed using person['name'] which returns \"John\".", "category": "Python"}, {"instruction": "Modify the given Python code to calculate the sum of the given list and print the output.", "input": "list = [1,2,3,4,5]", "output": "def sumList(list): \n    sum = 0\n    for i in list:\n        sum = sum + i\n    return sum\n\nprint(sumList(list))", "category": "Python"}, {"instruction": "Create a generator to produce \"hello world\" ten times", "input": "", "output": "def hello_world_generator():\n    for _ in range(10):\n        yield \"Hello World\"", "category": "Python"}, {"instruction": "Edit the existing code to accept more than two arguments", "input": "def get_sum(a, b):\n    return a + b", "output": "def get_sum(*args):\n    sum = 0\n    for number in args:\n        sum += number\n\n    return sum", "category": "Python"}, {"instruction": "What are the advantages of using a while loop over a for loop in Python?", "input": "", "output": "The main advantages of using a while loop over a for loop in Python are that it is more concise and allows the user to have better control over the iteration process. For example, the while loop allows the user to specify an exit condition if a certain condition is met, mid-way through the loop. Furthermore, while loop allows the user to dynamically change the number of times the loop is executed based on a condition or an expression. This is not possible in for loops as the user needs to specify the exact number of iterations beforehand.", "category": "Python"}, {"instruction": "Create a sorting algorithm", "input": "", "output": "def sort(arr):\n    n = len(arr)\n    \n    # Various loops to sort the array \n    for i in range(n): \n        min_idx = i \n        for j in range(i+1, n): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n    return arr", "category": "Python"}, {"instruction": "Solve the following problem", "input": "Given two strings s and t, find the minimum window in s which will contain all the characters in t.", "output": "def minWindow(s, t): \n    # Initialize with None \n    minWindowLength = None\n    leftIndex = 0 \n          \n    # Balance will act as alphabet to store the occurrence of each character in t \n    balance = {}\n    for char in t:\n        if char not in balance:\n            balance[char] = 1\n        else:\n            balance[char] += 1\n              \n    # leftIndex and rightIndex act as two poiners to traverse the list\n    leftIndex = 0\n    rightIndex = 0\n    charactersFound = 0\n    # Start traversal from left \n    for i in range(len(s)): \n          \n        # If character present in t \n        if s[i] in balance: \n              \n            # Decrease its counter by 1 \n            balance[s[i]] -= 1  \n              \n            # if the character is found first time \n            if balance[s[i]] == 0: \n                charactersFound += 1\n                  \n        # If all characters present \n        if charactersFound == len(balance): \n            # Check the right side window \n            while(rightIndex <= i and charactersFound == len(balance)): \n                  \n                # remove the left side character \n                if s[leftIndex] in balance: \n                    if balance[s[leftIndex]] == 0: \n                        charactersFound -= 1\n  \n                    # Increase the counter of that character \n                    balance[s[leftIndex]] += 1\n                      \n                # Calculate the minimum window\n                if minWindowLength == None or (i-leftIndex+1) < minWindowLength: \n                    minWindowLength = i-leftIndex+1\n                      \n                leftIndex += 1\n                  \n    return minWindowLength", "category": "Python"}, {"instruction": "Design an algorithm to find the maximum subarray of an array of numbers.", "input": "", "output": "def max_subarray(arr): \n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(len(arr)): \n        max_ending_here = max_ending_here + arr[i] \n        if max_ending_here < 0: \n            max_ending_here = 0\n        if (max_so_far < max_ending_here): \n            max_so_far = max_ending_here \n    return max_so_far", "category": "Python"}, {"instruction": "Create a function that takes two strings and returns a boolean representing whether or not the strings are anagrams of one another.", "input": "", "output": "def is_anagram(string1, string2):\n\n    # remove whitespaces\n    string1 = string1.replace(\" \",\"\")\n    string2 = string2.replace(\" \",\"\")\n\n    # check length\n    if len(string1) != len(string2):\n        return False\n\n    # create counters\n    counter = {}\n    for letter in string1:\n        if letter in counter :\n            counter[letter] += 1\n        else:\n            counter[letter] = 1\n            \n    for letter in string2:\n        if letter in counter:\n            counter[letter] -= 1\n        else:\n            return False\n        \n    # Check all values are 0\n    for key in counter:\n        if counter[key] != 0:\n            return False\n    \n    return True", "category": "Python"}, {"instruction": "Find the number of times the substring \u201cab\u201d appears in the given string.", "input": "text = \"abraacadabrabracabracabracabra\"", "output": "def count_substring(string, sub_string): \n    count = 0\n  \n    #Loop over the length of string \n    for i in range(0, len(string)): \n        # If a part of string matches with sub_string \n        #increment count  \n        if (string[i:i+ len(sub_string)] ==sub_string): \n            count += 1\n  \n    return count \n\ncount = count_substring(text, 'ab') \nprint(\"Number of substring occurrences: \", count)", "category": "Python"}, {"instruction": "Design a function that takes a number, n, and returns the n\u2019th Fibonacci number. Remember that the Fibonacci sequence begins with 0, 1, and each subsequent number is the sum of the previous two numbers.", "input": "", "output": "def Fibonacci_number(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci_number(n-1)+Fibonacci_number(n-2)", "category": "Python"}, {"instruction": "Construct a Python program to print the numbers from 1 to 10 on a single line.", "input": "", "output": "for i in range(1,11):\n  print(i, end=\" \")", "category": "Python"}, {"instruction": "Create a stand-alone Python script to print the sum of all the divisors of a number.", "input": "", "output": "def printDivisorSum(num): \n   \n    sum = 0\n    i = 1\n  \n    while i <= num / 2: \n  \n        if num % i == 0: \n            sum = sum + i \n        i = i + 1\n  \n    print(\"Sum of divisors of \" + str(num) + \" is \" + str(sum)) \n\nnum = 16\nprintDivisorSum(num)", "category": "Python"}, {"instruction": "Explain the basic logic for a linear search algorithm.", "input": "", "output": "A linear search algorithm is a basic searching algorithm for finding an item in an array of items. It operates by comparing each item in the array sequentially with the target value until the target value is found or the end of the array is reached. To perform a linear search, the algorithm begins by considering the first element of the array and then moving on to every subsequent element in order until the target value is found. If the target value is not found, a linear search terminates when the end of the elements is reached.", "category": "Python"}, {"instruction": "Given a matrix, write a program to fill it with zeroes in constant time and space complexity.", "input": "", "output": "def fill_matrix_zeros(matrix):\n    n, m = len(matrix), len(matrix[0])\n    col0_zero = False\n    for i in range(n):\n        if matrix[i][0] == 0:\n            col0_zero = True\n        for j in range(1, m):\n            if matrix[i][j] == 0:\n                matrix[i][0] = 0\n                matrix[0][j] = 0\n\n    for i in range(1, n):\n        for j in range(1, m):\n            if matrix[i][0] == 0 or matrix[0][j] == 0:\n                matrix[i][j] = 0\n\n    if matrix[0][0] == 0:\n        for j in range(m):\n            matrix[0][j] = 0\n\n    if col0_zero:\n        for i in range(n):\n            matrix[i][0] = 0", "category": "Python"}, {"instruction": "Given an array of integers, write a program to find the number of triplets that satisfy the triangle inequality.", "input": "", "output": "def find_num_triplets(arr):\n    arr.sort()\n    count = 0\n    for i in range(len(arr) - 2):\n        for j in range(i + 1, len(arr) - 1):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] > arr[k]:\n                    count += 1\n    return count", "category": "Python"}, {"instruction": "Given a linked list, reverse its order of nodes.", "input": "", "output": "def reverse_linked_list(head):\n    if head is None or head.next is None:\n        return head\n    prev = None\n    curr = head\n    while curr is not None:\n        prev, curr.next, curr = curr, prev, curr.next\n    return prev", "category": "Python"}, {"instruction": "Given an array of words, replace each character with the corresponding number from the English alphabet (e.g. a=1, b=2 ...z=26), and find the computed sum.", "input": "[\"cat\", \"dog\"]", "output": "def find_sum(words):\n    total_sum = 0 \n    for word in words: \n        for c in word:\n            total_sum += ord(c) - 96\n    return total_sum", "category": "Python"}, {"instruction": "Suggest a suitable algorithm for clustering data points.", "input": "", "output": "The k-means clustering algorithm is a suitable algorithm for clustering data points. It is an iterative algorithm that works by assigning data points to clusters and then computing the centroids of the clusters. The algorithm is repeated until a desired outcome is reached. This algorithm works well for grouping similar data points in a dataset.", "category": "Python"}, {"instruction": "Explain how to find the sum of all elements in an array using recursive approach.", "input": "", "output": "The recursive approach to finding the sum of all elements in an array is to consider the array as a combination of two subarrays. We first calculate the sum of the first subarray and then for the second subarray. The total sum of elements in the array can be found by adding the sum of the two subarrays. This process is repeated until the size of the array is 0, at which point the final sum is returned. This approach is known as the divide and conquer algorithm.", "category": "Python"}, {"instruction": "Write a web crawler in Python to extract only the text content from a given website.", "input": "", "output": "# import the necessary libraries\nimport requests\nfrom bs4 import BeautifulSoup\n\n# define the web crawler\ndef web_crawler(url):\n    # make the request to the specified url\n    page = requests.get(url)\n    page_content = page.content\n    # parse the received content\n    soup = BeautifulSoup(page_content, 'lxml')\n    text_content = soup.find_all(text=True)\n    # return only the text content\n    return [s.strip() for s in text_content if s.strip()]", "category": "Python"}, {"instruction": "Code a function in Python to generate random numbers within a given range.", "input": "", "output": "import random\n\ndef random_num_gen(start, end):\n    return random.randint(start, end)", "category": "Python"}, {"instruction": "Design a function using Python to remove all vowels from a string.", "input": "", "output": "def remove_vowels(string):\n    vowels = 'aeiouAEIOU'\n    new_string = ''\n    for char in string:\n        if char not in vowels:\n            new_string += char\n            \n    return new_string", "category": "Python"}, {"instruction": "Write a Python method to extract only the numeric values from a string.", "input": "", "output": "def extract_num(string): \n    return [word for word in string.split() if word.isdigit()]", "category": "Python"}, {"instruction": "Use the provided dataset to create a Corpus of English words in Python.", "input": "https://storage.googleapis.com/download.tensorflow.org/data/grammar_corpus.txt", "output": "f = open('grammar_corpus.txt', 'r')\n\n# Create an empty list to store the corpus\ncorpus = []\n\n# Loop through the file line by line \nfor line in f: \n    # Split the line into words \n    words = line.lower().strip().split()\n    \n    # Check if the word is an english word \n    if words[1].isalpha(): \n        corpus.append(words[1]) \n \nf.close()\nprint(corpus)", "category": "Python"}, {"instruction": "Compute the area of the circle where the radius is 5 inches in Python.", "input": "", "output": "import math \n  \nradius = 5 \narea = math.pi * (radius**2) \n\nprint(\"The area of the circle is\", area)", "category": "Python"}, {"instruction": "What is the maximum length of a string in Python?", "input": "", "output": "The maximum length of a string in Python is sys.maxsize, which is typically 2^63 - 1 on a 64-bit machine. This means that the maximum length of a string is 18,446,744,073,709,551,615 characters.", "category": "Python"}, {"instruction": "Write a code to convert HTML to Markdown using Python.", "input": "", "output": "import markdown\nimport re\n\ndef convert_html_to_markdown(html):\n  lines = html.split('\\n')\n  for line in lines:\n    line = markdown.markdown(line)\n    # remove HTML tags\n    line = re.sub(r'<[^>]*>', '', line)\n    # strip whitespace\n    line = line.strip()\n    print line\n\nhtml = '<p>This is an example of HTML text.</p>'\nconvert_html_to_markdown(html)\n\n# Output\nThis is an example of HTML text.", "category": "Python"}, {"instruction": "Generate a permutation of a given list of numbers.", "input": "", "output": "import itertools \n  \ndef perms(lst): \n  perm = itertools.permutations(lst) \n  for i in list(perm): \n    print(i)", "category": "Python"}, {"instruction": "Parse a given string and extract the name from it.", "input": "string = \"Hi! My name is John Smith\"", "output": "def extract_name(string):\n    \"\"\"\n    Parse a given string and extract the name from it.\n\n    Parameters\n    ----------\n    string : str\n        The string to parse\n\n    Returns\n    -------\n    name : str\n        The extracted name\n    \"\"\"\n    # Split the string by words\n    words = string.split()\n    \n    # The last word is the name\n    name = words[-1]\n\n    return name\n\nstring = \"Hi! My name is John Smith\"\nprint(extract_name(string)) # Outputs \"John Smith\"", "category": "Python"}, {"instruction": "Search a list to find a string and return its index.", "input": "string_list = [\"apple\", \"banana\", \"orange\"]\nsearch_term = \"orange\"", "output": "def search_list(string_list, search_term):\n    \"\"\"\n    Search a list for a given string and return its index.\n\n    Parameters\n    ----------\n    string_list : list\n        The list to search\n    search_term : str\n        The string to search for\n\n    Returns\n    -------\n    index : int\n        The index of the string in the list,\n        returns -1 if the string is not found\n    \"\"\"\n    for i, s in enumerate(string_list):\n        if s == search_term:\n            return i\n\n    return -1\n\nstring_list = [\"apple\", \"banana\", \"orange\"] \nsearch_term = \"orange\"\nprint(search_list(string_list, search_term)) # Outputs 2", "category": "Python"}, {"instruction": "Compute the number of ways for a host to select 3 items from a list of 8 options.", "input": "", "output": "def compute_combination(n, r):\n    \"\"\"\n    Compute the number of ways for a host to select 'r' items from\n    a list of 'n' options.\n\n    Parameters\n    ----------\n    n : int\n        The total number of items\n    r : int\n        The number of items to select\n\n    Returns\n    -------\n    num : int\n        The number of ways to select\n    \"\"\"\n    num = 1\n\n    # Calculate combination\n    for i in range(r):\n        num *= n - i\n    num //= math.factorial(r)\n    \n    return num\n\nn = 8\nr =  3\nprint(compute_combination(n, r)) # Outputs 336", "category": "Python"}, {"instruction": "Write a Python function that prints the first n even numbers.", "input": "", "output": "def print_even_numbers(n):\n    for i in range(2, n*2, 2): \n        print(i)", "category": "Python"}, {"instruction": "Write a code snippet to loop through an array and check if the element is a number or not.", "input": "data = [1, 'a', 'b', 2]", "output": "for item in data:\n    if type(item) == int:\n        print(\"Element is a number!\")\n    else:\n        print(\"Element is not a number!\")", "category": "Python"}, {"instruction": "Create a function to represent a decimal number in its binary form.", "input": "", "output": "def decimal_to_binary(num):\n\nresult = \"\"\n\nwhile num > 0:\n remainder = num % 2 \n result = str(remainder) + result\n num = num // 2\n\nreturn result", "category": "Python"}, {"instruction": "Transform a given XML document into a JSON object using Python.", "input": "", "output": "import xmltodict\n\n# open the XML document\nwith open(\"document.xml\") as f:\n  xml_data = f.read()\n\n# convert to json\njson_data = xmltodict.parse(xml_data)\n\n# print the JSON object\nprint(json.dumps(json_data, indent=2))", "category": "Python"}, {"instruction": "Write a code to check for a valid zip code in US.", "input": "", "output": "def is_valid_zip_code(zip_code):\n    \"\"\" Function to check whether the given zip code is valid in the US \"\"\"\n    valid_zip_code_pattern = re.compile(r\"^[0-9]{5}(?:-[0-9]{4})?$\")\n    if valid_zip_code_pattern.match(zip_code):\n        return True\n    return False\n\n# Let's test it\nzip_code = \"12345\"\nprint(is_valid_zip_code(zip_code)) # Output: True", "category": "Python"}, {"instruction": "Write a code to extract all the hyperlinks from a Wikipedia page.", "input": "", "output": "# Importing necessary libraries\nimport bs4\nimport requests\n\n# Fetching the data\nurl = \"https://en.wikipedia.org/wiki/Main_Page\"\nresponse = requests.get(url)\nsoup = bs4.BeautifulSoup(response.text)\n\n# Extracting hyperlinks\nlinks = []\nfor link in soup.find_all('a'):\n    links.append(link.get('href'))\n\n# Printing all hyperlinks present in the page\nprint(links)", "category": "Python"}, {"instruction": "Create a function that takes two parameters and returns an array with those two numbers in it.", "input": "", "output": "def create_array(param1, param2):\n    \"\"\"A function that takes two parameters and returns an array with those two numbers in it.\"\"\"\n    arr = [param1, param2]\n    return arr\n\n# Let's test it\narr = create_array(1, 5)\nprint(arr) # Output: [1, 5]", "category": "Python"}, {"instruction": "Write a code to classify emails as spam or not-spam using Naive Bayes algorithms.", "input": "", "output": "# Importing necessary libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Loading the dataset\ndf = pd.read_csv('emails.csv')\n\n# Feature engineering\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(df['message'])\ny = df['label']\n\n# Training the model\nnb = MultinomialNB()\nnb.fit(X,y)\n\n# Classification \nexample_emails = [\"You won the lottery!\", \"I need some help with my homework\"]\nX_example = vectorizer.transform(example_emails)\npredicted_labels = nb.predict(X_example)\nprint(predicted_labels) # Output: [spam, not-spam]", "category": "Python"}, {"instruction": "Write a script in Python to take an age as an input and return a boolean which indicates if a person is a minor or not.", "input": "", "output": "def is_minor(age):\n    \"\"\"\n    Function to determine if a person is a minor or not\n    \"\"\"\n    if age < 18:\n        return True\n    else:\n        return False\n\n# Let's test it\nage = 18\nprint(is_minor(age)) # Output: False", "category": "Python"}, {"instruction": "Generate a HTTP request using Python to send a GET request to https://www.wikihow.com/Main-Page", "input": "", "output": "import requests\n\nurl = 'https://www.wikihow.com/Main-Page'\n\nresponse = requests.get(url)\n\nprint(response)", "category": "Python"}, {"instruction": "Given two data sets, one containing the user id (user_id) and first name (firstname) and another data set containing user_id and last name (lastname), write a Python function to join the two sets and create a new data set with firstname, lastname and user_id.", "input": "user_id: [1,3,4,7] \nfirstname: [\"John\", \"Alice\", \"Madison\", \"Peter\"] \nuser_id: [1,2,3,6]\nlastname: [\"Smith\", \"Jones\", \"Brown\", \"Miller\"]", "output": "def join_sets(user_id1, firstname, user_id2, lastname):\n    user_id = user_id1 + user_id2\n    names = firstname + lastname\n    result = []\n    for id in user_id:\n        firstname = [name for id, name in zip(user_id1, firstname) if id == id][0]\n        lastname = [name for id, name in zip(user_id2, lastname) if id == id][0]\n        result.append({\"user_id\": id, \"firstname\": firstname, \"lastname\": lastname})\n    return result", "category": "Python"}, {"instruction": "Generate a random string of a given length using different uppercase, lowercase characters, and digits.", "input": "", "output": "import string\nimport random\n\ndef random_string(length):\n    characters = string.ascii_letters + string.digits \n    return ''.join(random.choice(characters) for i in range(length))\n\nif __name__ == '__main__':\n    print(random_string(10))", "category": "Python"}, {"instruction": "Write an algorithm to determine if an input string is a palindrome.", "input": "racecar", "output": "def is_palindrome(string):\n      string = string.lower()\n      rev_string = string[::-1]\n      if string == rev_string:\n          return True\n      return False\n\nif __name__ == '__main__':\n  print(is_palindrome('racecar'))", "category": "Python"}, {"instruction": "Generate a unique 8 character string that contains a lowercase letter, an uppercase letter, a numerical digit, and a special character.", "input": "", "output": "import string\nimport random\n\ndef random_password_string():\n    characters = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.sample(characters, 8))\n    return password\n\nif __name__ == '__main__':\n    print(random_password_string())", "category": "Python"}, {"instruction": "Write a Python function to generate a random integer in the range of 1 to 10.", "input": "", "output": "import random\n\ndef random_int_1_10():\n    return random.randint(1, 10)\n\n\nif __name__ == '__main__':\n    print(random_int_1_10())", "category": "Python"}, {"instruction": "Create a Python code for printing the following pattern.", "input": "", "output": "# Pattern \nfor i in range(1,6):\n for j in range(1,i+1):\n  print(i,end=\"\")\n print(\"\")", "category": "Python"}, {"instruction": "Write a Python code that prints out the following patterns:", "input": "", "output": "# Pattern 1\nfor i in range(1, 10):\n    for j in range(1, i + 1):\n        print(\"*\", end=\" \")\n    print(\" \")\n\n# Pattern 2\nfor i in range(10, 0, -1):\n    for j in range(i, 0, -1):\n        print(\"*\", end=\" \")\n    print(\" \")", "category": "Python"}, {"instruction": "Find the number of times the element 2 appears in the following array", "input": "arr = [2, 3, 5, 7, 2, 6, 2]", "output": "count = 0\nfor num in arr:\n    if num == 2:\n        count += 1\nprint(count)", "category": "Python"}, {"instruction": "Modify the given code to sanitize the user input.", "input": "string = raw_input(\"Enter your text here: \")", "output": "import re\n\ndef sanitize(string):\n    string = re.sub(r'[^\\w\\s]','',string)\n    return string\n\nstring = sanitize(raw_input(\"Enter your text here: \"))", "category": "Python"}, {"instruction": "Create a dataframe in pandas", "input": "List of 7 employees, each with first name and last name.", "output": "import pandas as pd\n\ndata = [{\"first_name\":\"John\", \"last_name\":\"Doe\"},\n        {\"first_name\":\"Jane\", \"last_name\":\"Smith\"},\n        {\"first_name\":\"Tom\", \"last_name\":\"Johnson\"},\n        {\"first_name\":\"Sandy\", \"last_name\":\"Robinson\"},\n        {\"first_name\":\"Roger\", \"last_name\":\"McDonald\"},\n        {\"first_name\":\"Linda\", \"last_name\":\"Williams\"},\n        {\"first_name\":\"David\", \"last_name\":\"Miller\"}]\n\ndf = pd.DataFrame(data)", "category": "Python"}, {"instruction": "Given an array containing a string with duplicates, output an array with only unique strings.", "input": "['apple', 'apple', 'orange', 'kiwi', 'apple', 'banana', 'banana']", "output": "def remove_duplicates(arr): \n    unique_arr = []\n    for item in arr:\n        if item not in unique_arr:\n            unique_arr.append(item)\n    return unique_arr\n\n# Driver code \narr = ['apple', 'apple', 'orange', 'kiwi', 'apple', 'banana', 'banana'] \nprint (remove_duplicates(arr))", "category": "Python"}, {"instruction": "Write a code to print the power of 2 up to the given limit.", "input": "8", "output": "def power_of_two(n):\n    for i in range(0,n):\n        print(2**i,end=\" \")\n\nif __name__ == '__main__':\n    power_of_two(8)", "category": "Python"}, {"instruction": "Using the given list of strings, create a function to count and return the number of capital letters in the list.", "input": "", "output": "def count_capital_letters(string_list):\n  count = 0\n  for string in string_list:\n    for char in string:\n      if char.isupper():\n        count += 1\n  return count", "category": "Python"}, {"instruction": "Write a Python program to compute and return a list that contains every possible combination of two given lists.", "input": "list1 = [1,2]\nlist2 = [3,4]", "output": "def combine_lists(list1,list2):\n  result = []\n  for i in list1:\n    for j in list2:\n      result.append([i,j])\n  return result", "category": "Python"}, {"instruction": "Create a function to return all the indices in a string where a given substring occurs.", "input": "", "output": "def find_substring(main_string, substring):\n  indices = []\n  position = -1\n  while True:\n    position = main_string.find(substring, position + 1)\n    if position == -1:\n      break\n    indices.append(position)\n  return indices", "category": "Python"}, {"instruction": "Create a method that takes a string as a parameter and returns the number of unique characters present in the string.", "input": "python", "output": "def count_unique_characters(str):\n    characters = set()\n    for char in str:\n        characters.add(char)\n    return len(characters)", "category": "Python"}, {"instruction": "Write a test suite to test an arithmetic function that takes two arguments and returns the sum.", "input": "", "output": "import unittest\n\nclass TestArithmeticFunction(unittest.TestCase):\n    def test_sum(self):\n        self.assertEqual(arithmetic_function(2, 5), 7)\n        self.assertEqual(arithmetic_function(-4, 9), 5)\n        self.assertEqual(arithmetic_function(-2, 0), -2)\n\nif __name__ == '__main__':\n    unittest.main()", "category": "Python"}, {"instruction": "Create a function to calculate the sum of 2 numbers and return 'None' if both the parameters are not numbers.", "input": "", "output": "def sum_of_two_numbers(x, y):\n    if type(x) is not int or type(y) is not int:\n        return None\n    return x + y", "category": "Python"}, {"instruction": "Write an algorithm that takes a set of numbers and returns the sum of all numbers in the set.", "input": "my_set = {2, 3, 4, 5}", "output": "def sum_set(my_set):\n    total = 0 # Initialize total\n    for num in my_set: \n        total += num\n    return total\n\nmy_set = {2, 3, 4, 5}\ntotal = sum_set(my_set)\nprint(total)  # Output 14", "category": "Python"}, {"instruction": "Design a class BankAccount that represents a bank account with the attributes name, balance, and interest_rate.", "input": "", "output": "class BankAccount:\n    def __init__(self, name, balance, interest_rate):\n        self.name = name\n        self.balance = balance\n        self.interest_rate = interest_rate\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdraw(self, amount):\n        self.balance -= amount", "category": "Python"}, {"instruction": "Write a function in Python that accepts an array as an argument and returns the index of the item with the maximum value.", "input": "arr = [2, 5, 9, 4, 10]", "output": "def find_max_index(arr):\n    if len(arr) == 0:\n        return None\n    max_val = arr[0]\n    max_index = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n            max_index = i\n    return max_index\n\narr = [2, 5, 9, 4, 10]\nmax_index = find_max_index(arr)\nprint(max_index)  # Output 4", "category": "Python"}, {"instruction": "How to check for a key in a dictionary in Python?", "input": "", "output": "if key in dictionary:\n    # execute this block of code\nelse:\n    # execute this block of code", "category": "Python"}, {"instruction": "What is the syntax for filtering a DataFrame using an OR condition in Pandas?", "input": "", "output": "df.loc[(condition1) | (condition2)]", "category": "Python"}, {"instruction": "Create a function in Python that takes a number as an argument and displays the corresponding day from Monday to Sunday.", "input": "", "output": "def getDay(num):\n    days = {\n        0: 'Monday',\n        1: 'Tuesday',\n        2: 'Wednesday',\n        3: 'Thursday',\n        4: 'Friday',\n        5: 'Saturday',\n        6: 'Sunday',\n    }\n    return days[num]", "category": "Python"}, {"instruction": "Change the following Python program so that it prints out the palindromic substrings.", "input": "string = 'mom'", "output": "def palindromicSubstrings(string): \n    for start in range(len(string) + 1):\n        for end in range(start + 1, len(string) + 1):\n            substring = string[start:end]\n            if substring == substring[::-1]:\n                print(substring) \npalindromicSubstrings(string)", "category": "Python"}, {"instruction": "Make a class in Python which will represent a binary search tree.", "input": "", "output": "class BinarySearchTree:\n \n    def __init__(self, value): \n        self.left = None\n        self.right = None\n        self.value = value\n \n    def inorder(self):\n        if self.left:\n            self.left.inorder()\n        print(self.value)\n        if self.right:\n            self.right.inorder()\n \n    def insert(self, value):\n        if value <= self.value:\n            if self.left is None:\n                self.left = BinarySearchTree(value)\n            else:\n                self.left.insert(value)\n        elif value > self.value:\n            if self.right is None:\n                self.right = BinarySearchTree(value)\n            else:\n                self.right.insert(value)", "category": "Python"}, {"instruction": "Create a Python script that find the number of occurrences of a specific word in a given sentence.", "input": "This is a sample sentence.", "output": "sentence_input = \"This is a sample sentence.\"\n\ndef count_keyword(sentence_input, keyword):\n    return sentence_input.lower().count(keyword.lower())\n\ncount = count_keyword(sentence_input, \"sentence\")\nprint(\"The word 'sentence' occurs \" + str(count) + \" times.\")", "category": "Python"}, {"instruction": "Construct a loop to print numbers from 1 to 10 using a while loop in Python.", "input": "", "output": "i = 1\nwhile i <= 10:\n    print(i)\n    i += 1", "category": "Python"}, {"instruction": "Calculate the square root of a number using bisection search.", "input": "number = 9", "output": "low = 0\nhigh = number\nanswer = (high + low) / 2\n#Store the difference between the answer and the number\ndiff = (answer ** 2) - number\n#Loop until the difference is within a very small tolerance\nwhile abs(diff) > 0.00001:\n    if diff > 0:\n        #the answer is too high\n        high = answer\n    else:\n        #the answer is too low\n        low = answer\n    #compute a new answer\n    answer = (high + low) /2\n    #and compute a new diff\n    diff = (answer ** 2) - number\nprint(answer)", "category": "Python"}, {"instruction": "Use the Python built-in function filter() to find all numbers divisible by 5.", "input": "mylist = [10, 21, 32, 45, 56, 77]", "output": "list(filter(lambda x: (x % 5 == 0), mylist))", "category": "Python"}, {"instruction": "Write a Python function to check if a number is perfect or not. A number is said to be a perfect number if its sum of divisors is equal to itself.", "input": "", "output": "def is_perfect(n):\n s = 0\n for i in range(1, n):\n if n % i == 0:\n s += i\n return s == n", "category": "Python"}, {"instruction": "Write a virtual assistant in Python to gauge the sentiment of a given string.", "input": "string = \"I had a terrible day\"", "output": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef sentiment_analyzer(string):\n sid = SentimentIntensityAnalyzer()\n snt = sid.polarity_scores(string)\n return snt[\"compound\"]\n\nsentiment_analyzer(string)", "category": "Python"}, {"instruction": "Write a Python program to find all the Armstrong numbers between the given two numbers. An Armstrong number is a number such that the sum of its digits raised to the third power is equal to the number itself.", "input": "lower = 100\nupper = 2000", "output": "def isArmstrong(num):\n s = 0\n temp = num\n while temp > 0:\n digit = temp % 10\n s += digit ** 3\n temp //= 10\n if num == s:\n return True\n else:\n return False\n\nfor num in range(lower, upper + 1):\n if isArmstrong(num):\n print(num)", "category": "Python"}, {"instruction": "Create a class to store student names, ages and grades.", "input": "", "output": "class Student:\n  def __init__(self,name,age,grade):\n    self.name = name\n    self.age = age\n    self.grade = grade\n\n  def get_name(self):\n    return self.name\n\n  def set_name(self,name):\n    self.name = name\n\n  def get_age(self):\n    return self.age\n\n  def set_age(self,age):\n    self.age = age\n\n  def get_grade(self):\n    return self.grade\n\n  def set_grade(self,grade):\n    self.grade = grade", "category": "Python"}, {"instruction": "Generate a function that computes the sum of the numbers in a given list.", "input": "", "output": "def compute_sum(numbers):\n  total = 0\n  for num in numbers:\n    total += num\n  return total", "category": "Python"}, {"instruction": "Parse a JSON object and print out the elements.", "input": "data = {\n  'name': 'John Doe',\n  'age': 32,\n  'address': {\n    'street': '123 Main St',\n    'city': 'New York',\n    'zip': 10010\n  }\n}", "output": "import json\n\ndata = json.loads(data)\n\nprint('Name:', data['name'])\nprint('Age:', data['age'])\nprint('Street:', data['address']['street'])\nprint('City:', data['address']['city'])\nprint('Zip:', data['address']['zip'])", "category": "Python"}, {"instruction": "Create a function to detect even numbers.", "input": "", "output": "def is_even(number):\n  if (number % 2 == 0):\n    return True\n  else:\n    return False", "category": "Python"}, {"instruction": "Generate a python program to solve the Tower of Hanoi problem with n discs", "input": "", "output": "def TowerOfHanoi(n, from_rod, to_rod, aux_rod): \n    if n == 1: \n        print(\"Move disk 1 from rod\",from_rod,\"to rod\",to_rod)\n        return\n    TowerOfHanoi(n-1, from_rod, aux_rod, to_rod) \n    print(\"Move disk\",n,\"from rod\",from_rod,\"to rod\",to_rod)\n    TowerOfHanoi(n-1, aux_rod, to_rod, from_rod) \n        \n# Driver code \nn = 3\nTowerOfHanoi(n, 'A', 'C', 'B')", "category": "Python"}, {"instruction": "Using the input provided, generate a random string consisting of 8 characters.", "input": "[a, b, c, d, e, f, g, h]", "output": "import random\n\ndef random_string(arr):\n    return ''.join(random.sample(arr, 8))", "category": "Python"}, {"instruction": "Describe the structure of JSON data", "input": "", "output": "JSON (JavaScript Object Notation) data is structured in a hierarchical way. It consists of data stored in key-value pairs. The JSON object typically contains a set of key-value pairs, or nested objects. Data is organized and encoded in a way that makes it easier for programs to read and interpret the data stored in the JSON object. The structure of a JSON object may look like this: \n \n{ \n  \"Key1\": \"Value1\", \n  \"Key2\": \"Value2\", \n  \"NestedObject\": { \n    \"NestedKey1\": \"NestedValue1\", \n    \"NestedKey2\": \"NestedValue2\" \n  } \n}", "category": "Python"}, {"instruction": "How would you extend the following code to add the features \"undo\" and \"redo\"?", "input": "def add_item(item, list):\n\tlist.append(item)", "output": "def add_item(item, list):\n    list.append(item)\n    undo_list.append(item)\n\u200b\ndef undo_item(item, list):\n    if len(list) > 0:\n        last_item = list.pop()\n        redo_list.append(last_item)\n    \ndef redo_item(item, list):\n    if len(redo_list) > 0:\n        last_item = redo_list.pop()\n        list.append(last_item)", "category": "Python"}, {"instruction": "Create a function which takes two arguments, a string and a list, and prints out the list with each element preceded by the string", "input": "my_string = \"Example: \"\nmy_list = [\"a\", \"b\", \"c\"]", "output": "def prepend_list_items(str, lst):\n  for item in lst:\n    print(str + item)\n\nprepend_list_items(my_string, my_list)", "category": "Python"}, {"instruction": "Print the current system date and time in a readable format", "input": "", "output": "import datetime\n\ndate_time = datetime.datetime.now()\nprint(date_time.strftime(\"%A %d %B, %Y, %I:%M %p\"))\n\n# Output: Tuesday 12 November, 2019, 11:17 PM", "category": "Python"}, {"instruction": "Create an array of 10 non-repeating random integers.", "input": "", "output": "import random\n\narr = []\nwhile len(arr) < 10:\n    rand = random. randint(0, 10000)\n    if rand not in arr:\n        arr.append(rand)\n\narr", "category": "Python"}, {"instruction": "Create a method that returns all elements in an array that are larger than the given value x.", "input": "[2, 3, 5, 7, 11, 13] and x = 4", "output": "def elements_greater_than_x(arr, x):\n  result = []\n\n  for el in arr:\n    if el > x:\n      result.append(el)\n\n  return result", "category": "Python"}, {"instruction": "Write a Python function to check if an element is present in a given list or not.", "input": "", "output": "def is_in_list(element, input_list):\n    return element in input_list", "category": "Python"}, {"instruction": "Change the following Python code to convert the list to a dictionary of key-value pairs.", "input": "mylist  = [1, 2, 3, 4, 5]", "output": "mydict = {}\nfor i in range(len(mylist)):\n    mydict[i] = mylist[i]", "category": "Python"}, {"instruction": "Create a function that takes an array and returns true if it contains all the elements in an another array.", "input": "array1 = [1, 2, 3, 4]\narray2 = [1, 2, 3]", "output": "def checkArray(array1, array2): \n\tfor element in array2: \n\t\tif element not in array1: \n\t\t\treturn False\n\treturn True\n\narray1 = [1, 2, 3, 4]\narray2 = [1, 2, 3]\n\nprint(checkArray(array1, array2))\n\n# Output\n# True", "category": "Python"}, {"instruction": "Produce a function that takes in an array of integers and returns an array with all the prime numbers in it.", "input": "arr = [2, 11, 9, 5, 4, 7]", "output": "def findPrimeNumbers(arr): \n\tprime_list = []\n\tfor number in arr: \n\t\tisPrime = True\n\t\tfor i in range(2, number): \n\t\t\tif number % i == 0: \n\t\t\t\tisPrime = False\n\t\tif isPrime: \n\t\t\tprime_list.append(number)\n\n\treturn prime_list \n\narr = [2, 11, 9, 5, 4, 7]\n\nprint(findPrimeNumbers(arr))\n\n# Output\n# [2, 11, 5, 7]", "category": "Python"}, {"instruction": "Write a function that takes in a list of numbers and creates a new list with only the even numbers from the list.", "input": "numbers = [2, 3, 4, 5, 6, 7, 8, 9]", "output": "def findEvenNumbers(numbers): \n\teven_list = []\n\tfor number in numbers: \n\t\tif number % 2 == 0: \n\t\t\teven_list.append(number)\n\treturn even_list \n\nnumbers = [2, 3, 4, 5, 6, 7, 8, 9]\n\nprint(findEvenNumbers(numbers))\n\n# Output\n# [2, 4, 6, 8]", "category": "Python"}, {"instruction": "Create a Python function that generates a random number between two specified numbers.", "input": "lower_bound = 10\nupper_bound = 20", "output": "def random_num(lower_bound, upper_bound):\n\timport random\n\treturn random.randint(lower_bound, upper_bound)\n\nlower_bound = 10\nupper_bound = 20\n\nprint(random_num(lower_bound, upper_bound))\n\n# Output\n# [random number between 10 and 20]", "category": "Python"}, {"instruction": "Run a regression on the given dataset and print the coefficients", "input": "", "output": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# fit the model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# print the coefficients \ncoeff = model.coef_\nprint(coeff)", "category": "Python"}, {"instruction": "Implement a function to calculate the total amount of money earned from a given array of stock prices.", "input": "arr = [5, 7, 15.5, 6, 10, 11]", "output": "def calculateTotalEarnings(arr): \n\ttotalEarnings = 0 \n\t\n\tfor i in range(1, len(arr)): \n\t\ttotalEarnings += max(arr[i] - arr[i - 1], 0) \n\t\t\n\treturn totalEarnings \n\narr = [5, 7, 15.5, 6, 10, 11] \n\ntotalEarnings = calculateTotalEarnings(arr) \n\nprint(\"Total earnings: \", totalEarnings) \n\n# Output\n# Total earnings:  9.5", "category": "Python"}, {"instruction": "Write a function that finds the largest number in an array of integers.", "input": "", "output": "def largest(arr): \n    max = arr[0] \n    for i in arr: \n        if i > max: \n            max = i \n    return max", "category": "Python"}, {"instruction": "How many elements are in list1 after executing the following Python code?", "input": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nlist1.extend(list2)", "output": "6", "category": "Python"}, {"instruction": "Construct an algorithm to find all possible combinations of a string of characters.", "input": "", "output": "A possible algorithm is to use a recursive approach. The algorithm would start from the beginning of the string and for each character, generate all possible combinations for the rest of the string. Then, for each combination, the character can either be included or excluded from the combination. Finally, return the list of all possible combinations.\n\ndef find_combinations(string):\n if len(string) == 0:\n return []\n \n result = []\n for i in range(len(string)):\n prefix = string[i]\n suffix = string[i+1:]\n combinations = find_combinations(suffix)\n \n if len(combinations) == 0:\n result.append(prefix)\n else:\n for combination in combinations:\n result.append(prefix + combination)\n result.append(combination)\n \n return result", "category": "Python"}, {"instruction": "Create a function to delete an item from a linked list given the head and the item.", "input": "", "output": "def delete_item(head, item):\n curr = head\n prev = None\n while curr:\n if curr.val == item:\n if prev is None:\n head = curr.next\n else:\n prev.next = curr.next\n return head\n prev = curr\n curr = curr.next\n \n return head", "category": "Python"}, {"instruction": "You have a list of employee records. Each record contains the employee's name, age, salary and department. Write an algorithm to sort the list by age in ascending order.", "input": "", "output": "def sort_by_age(employees):\n sorted_records = []\n while employees:\n record = employees.pop(0)\n inserted = False\n for i in range(len(sorted_records)):\n if record['age'] < sorted_records[i]['age']:\n sorted_records.insert(i, record)\n inserted = True\n break\n if not inserted:\n sorted_records.append(record)\n return sorted_records", "category": "Python"}, {"instruction": "Write a function to find the closest pair of points in a given array of points.", "input": "", "output": "def find_closest_pair(points):\n min_dist = float('inf')\n closest_pair = None\n\n for i in range(len(points)):\n for j in range(i + 1, len(points)):\n dist = ((points[i][0] - points[j][0])**2 + (points[i][1] - points[j][1])**2)**0.5\n if dist < min_dist:\n min_dist = dist\n closest_pair = (points[i], points[j])\n \n return closest_pair", "category": "Python"}, {"instruction": "Create a class in Python with methods \"add\" and \"find\" to add a value to a dictionary and find the value in it, respectively.", "input": "", "output": "class Dictionary:\n def __init__(self):\n     self.data = {}\n\ndef add(self, key, value):\n self.data[key] = value\n\ndef find(self, key):\n if key in self.data:\n return self.data[key]\n return None", "category": "Python"}, {"instruction": "Write a code that takes a sentence as input and prints the longest word in that sentence.", "input": "This is a test sentence", "output": "def longest_word(sentence):\n longest_word = \"\"\n words = sentence.split()\n for word in words:\n if len(word) > len(longest_word):\n longest_word = word\n return longest_word", "category": "Python"}, {"instruction": "Construct an algorithm to calculate the GCD of two numbers.", "input": "", "output": "A possible algorithm is the Euclidean algorithm. It works by repeatedly dividing the larger number by the smaller number and replace the larger number with the remainder until the remainder becomes zero and the last non-zero remainder is the GCD.\n\ndef gcd(a,b):\n  if a == 0:\n    return b\n  if b == 0:\n    return a\n\n  if a > b:\n    return gcd(a % b, b)\n  else:\n    return gcd(a, b % a)", "category": "Python"}, {"instruction": "Design a search system in Python with two methods (or functions) one method \"add\" to add a keyword and value, the other \"search\" to search by a keyword return the corresponding value.", "input": "", "output": "class SearchSystem:\n\n def __init__(self):\n     self.data = {}\n\ndef add(self, keyword, value):\n self.data[keyword] = value\n\ndef search(self, keyword):\n if keyword in self.data:\n return self.data[keyword]\n return None", "category": "Python"}, {"instruction": "How many elements will the array arr have after executing the following Python code?", "input": "arr = [1, 2, 3]\narr.pop(1)", "output": "2", "category": "Python"}, {"instruction": "Analyze a given text and generate a dictionary of frequency of each word in the text.", "input": "text = \"This is a sample text to analyze the frequency of the words\"", "output": "def analyze_text(text):\n    text = text.lower().split()\n    freqDict = {}\n    for word in text:\n        if word in freqDict:\n            freqDict[word] += 1\n        else:\n            freqDict[word] = 1\n    return freqDict\n\nif __name__ == '__main__':\n    text = \"This is a sample text to analyze the frequency of the words\"\n    print(analyze_text(text))\n\nOutput:\n{'this': 1, 'is': 1, 'a': 1, 'sample': 1, 'text': 1, 'to': 1, 'analyze': 1, 'the': 1, 'frequency': 1, 'of': 1, 'words': 1}", "category": "Python"}, {"instruction": "Describe the programming language used for the given project", "input": "Project: Building an e-commerce website using Django.", "output": "The programming language used for the project is Python with Django web framework. Django is an open source framework for developing web applications. It uses the Model-View-Template architecture pattern for developing web applications. It provides useful features like built-in admin interface, secure authentication and authorization, support for AJAX and Python libraries.", "category": "Python"}, {"instruction": "How can we improve the following code?", "input": "def multiply(x, y):\n    z = 0\n    for i in range(y): \n        z += x\n    return z", "output": "We can improve the code by adding an additional parameter to multiply() to check for a zero value of y. This additional \"check\" parameter will immediately return 0 if the value of y is 0, reducing the time complexity. Additionally, we can also remove the for loop and replace it with a multiplication operator to speed up the process. The updated code would look like: \n\ndef multiply(x, y, check = False):\n    if check and y == 0 : return 0\n    return x*y", "category": "Python"}, {"instruction": "Suggest a method to optimize the following code.", "input": "def find_max(arr):\n    max = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    \n    return max", "output": "def find_max(arr):\n    max = arr[0]\n    \n    for i in range(1, len(arr)):\n        max = max if max > arr[i] else arr[i]\n    \n    return max", "category": "Python"}, {"instruction": "Create an AI chatbot that can answer questions about the given topic \"Covid-19\".", "input": "Topic: Covid-19", "output": "# Imports \nfrom chatterbot import ChatBot\nfrom chatterbot.trainers import ChatterBotCorpusTrainer\n\n# Create the AI Chatbot \nbot = ChatBot(\"CovidBot\") \n\n# Train the bot on the corpus \ntrainer = ChatterBotCorpusTrainer(bot) \ntrainer.train(\"chatterbot.corpus.english.covid19\")\n\n# Start the chatbot \nwhile True:\n    user_input = input(\"User: \")\n    if user_input == 'exit':\n        break\n    bot_response = bot.get_response(user_input)\n    print(\"CovidBot:\",bot_response)", "category": "Python"}, {"instruction": "Design and implement a genetic algorithm for finding the optimal solution for a given problem.", "input": "", "output": "# Define the population size\nPOPULATION_SIZE = 100\n\n# Define the parameters for the genetic algorithm \nMUTATION_RATE = 0.2 \nCROSSOVER_RATE = 0.7 \nMAX_ITERATIONS = 10 \n\n# Create the initial population\npopulation = create_population(POPULATION_SIZE) \n\n# Run the genetic algorithm\nfor iteration in range(MAX_ITERATIONS):\n  # Select the fittest individuals to reproduce\n  selected_pop = select_fittest(population)\n  \n  # Crossover two individuals to form a new population\n  children_pop = crossover(selected_pop, CROSSOVER_RATE)\n  \n  # Mutate the new population \n  mutate_pop = mutate(children_pop, MUTATION_RATE)\n  \n  # Replace the population with the mutated population \n  population = mutate_pop \n\n# Return the optimal solution\nreturn best_solution(population)", "category": "Python"}, {"instruction": "Create a program to detect spam emails.", "input": "", "output": "import nltk\nfrom nltk.tokenize import word_tokenize\n\n# Create a list of \"spammy\" words\nspammy_words = ['free', 'discount', 'offer', 'win', 'prize', 'billion', 'million', 'cash']\n\n# Define a function for detecting spam\ndef detect_spam(email):\n    # Tokenize the email\n    words = word_tokenize(email)\n    spam_score = 0\n    for word in words:\n        if word.lower() in spammy_words:\n            spam_score += 1\n    # Return the spam score\n    return spam_score", "category": "Python"}, {"instruction": "Write a code for sorting the given array of numbers in ascending order.", "input": "", "output": "def sort_array(numbers):\n    # Bubble sort algorithm \n    for i in range(len(numbers)): \n      for j in range(0, len(numbers)-i-1): \n        if numbers[j] > numbers[j+1]: \n          numbers[j], numbers[j+1] = numbers[j+1], numbers[j] \n    return numbers", "category": "Python"}, {"instruction": "Create a search engine to process natural language queries.", "input": "", "output": "# Imports \nimport nltk \nfrom nltk.tokenize import word_tokenize\nfrom nltk.tag import pos_tag\n\n# Tokenize the natural language query \nresponse = input(\"What would you like to search for? \")\nwords = word_tokenize(response)\ntagged_words = pos_tag(words)\n\n# Process the query and search for relevant results\nsearch_results = []\nfor word in tagged_words:\n    if word[1] == \"NN\":\n        search_results.append(search_for_nn(word))\n    elif word[1] == \"VBP\":\n        search_results.append(search_for_vbp(word))\n    else:\n        search_results.append(\"No results found.\")\n\n# Print the results \nfor result in search_results:\n    print(result)", "category": "Python"}, {"instruction": "Create an example Word Cloud from the given text.", "input": "Text: Machine Learning is an area of computer science that gives computers the ability to learn without explicit programming.", "output": "import matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\n\n# Generate a word cloud image\ntext = \"Machine Learning is an area of computer science that gives computers the ability to learn without explicit programming.\"\nwordcloud = WordCloud().generate(text)\n\n# Show the generated image\nplt.imshow(wordcloud, interpolation='bilinear') \nplt.axis(\"off\") \nplt.show()", "category": "Python"}, {"instruction": "Write a code to optimize the parsing of a given sentence using CKY parsing.", "input": "Sentence: \"The cat chased the dog around the corner of the house.\"", "output": "# Imports\nimport nltk\n\n# CKY Parsing\ndef cky_parse(sentence):\n  \"\"\"Given a sentence, apply CKY parsing to optimize the parsing of it\"\"\"\n  \n  words = nltk.word_tokenize(sentence)\n  \n  # Create tree structure\n  table = [[None for i in range(len(words))] for j in range(len(words))]\n  for j in range(len(words)):\n    for i in reversed(range(j)):\n      parts_of_speech = nltk.pos_tag(words[i:j+1])\n      part_of_speech = tuple(tag for word,tag in parts_of_speech)\n      if part_of_speech in grammar.productions():\n        table[i][j] = part_of_speech\n        break\n  return table", "category": "Python"}, {"instruction": "Create an example chatbot dialogue using the given context.", "input": "Context: You're a pizza maker", "output": "User: Hi, I'm looking for a pizza\nBot: Hi there! What kind of pizza are you looking for?\nUser: I'd like a pepperoni pizza with extra cheese\nBot: Sure, one pepperoni pizza with extra cheese coming right up! Anything else I can do for you?", "category": "Python"}, {"instruction": "Using TensorFlow, define a neural network for classifying a set of language data as either English or Spanish.", "input": "Training data of 1000 samples with 500 English sentences and 500 Spanish sentences.", "output": "model = tf.keras.Sequential() \nmodel.add(tf.keras.layers.Input(shape=(1000,))) \nmodel.add(tf.keras.layers.Dense(units=128, activation='relu')) \nmodel.add(tf.keras.layers.Dense(units=2, activation='softmax')) \nmodel.compile(optimizer='Adam', loss = 'categorical_crossentropy',metrics=['accuracy']) \nmodel.fit(X,y, epochs=10)", "category": "Python"}, {"instruction": "Using the input provided, write a code in Python to print the elements of a given dictionary along with the corresponding keys.", "input": "my_dict = {'one':1, 'two':2, 'three':3}", "output": "for key, value in my_dict.items():\n    print(key + ':', value)", "category": "Python"}, {"instruction": "Write a script in Python for printing the given second level sub-dictionary.", "input": "data = {'first': {'A': 1, 'B': 2}, 'second': {'C': 3, 'D': 4}}", "output": "second_dict = data.get('second')\nfor key, value in second_dict.items():\n    print(key, value)", "category": "Python"}, {"instruction": "Edit the statement to make it a valid expression in Python.", "input": "x = y =", "output": "x = y = 0", "category": "Python"}, {"instruction": "Write a for loop in Python which prints out the contents of the given stack.", "input": "sample_stack = [\"first\", \"second\", \"third\"]", "output": "for item in sample_stack:\n    print(item)", "category": "Python"}, {"instruction": "Reverse a given string without using built-in library functions", "input": "", "output": "def reverse_string(string):\n    rev_string = ''\n    for i in range(len(string) - 1, -1, -1):\n        rev_string += string[i]\n    return rev_string", "category": "Python"}, {"instruction": "Write an algorithm to find the number of times a given number appears in an array", "input": "[5, 2, 4, 2, 5, 2, 5], number: 5", "output": "def count_number(arr, number):\n    count = 0\n    for num in arr:\n        if num == number:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Write an algorithm to add a new user (name, email, password, address) to a table called 'users'.", "input": "name: John\nemail: john@example.com\npassword: 1234\naddress: 999 Main St.", "output": "def add_user(name, email, password, address):\n    sql = 'INSERT INTO users (name, email, password, address) VALUES (%s, %s, %s, %s)'\n    try:\n        conn = connect_to_database()\n        cur = conn.cursor()\n        cur.execute(sql, (name, email, password, address))\n        conn.commit()\n        cur.close()\n        conn.close()\n        return True\n    except Exception as e:\n        raise e", "category": "Python"}, {"instruction": "Design an algorithm to insert a new row into a table named 'products' with the following columns: title, description and price.", "input": "title: \"New product\"\ndescription: \"This is an amazing product, it can do anything!\"\nprice: 10", "output": "def insert_row_products(title, description, price):\n    sql = 'INSERT INTO products (title, description, price) VALUES (%s, %s, %s)'\n    try:\n        conn = connect_to_database()\n        cur = conn.cursor()\n        cur.execute(sql, (title, description, price))\n        conn.commit()\n        cur.close()\n        conn.close()\n        return True\n    except Exception as e:\n        raise e", "category": "Python"}, {"instruction": "Implement a function in Python to convert a given RGB color to Hexadecimal format.", "input": "rgb_color = [255, 232, 154]", "output": "def rgb_to_hex(rgb_color):\n    hex_code = ''\n    for color in rgb_color:\n        hex_code += f'{color:02x}'\n    return hex_code\n\nhex_code = rgb_to_hex(rgb_color) # hex_code = \"ffe89a\"", "category": "Python"}, {"instruction": "Generate a function to check if parameter is equal to a specific string.", "input": "", "output": "def is_equal(parameter, string):\n    if parameter == string:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "How do you represent a database table and its columns in an object-oriented programming language?", "input": "", "output": "Classes are typically used to represent a database table in an object-oriented programming language. Each of the database table's columns can be represented as fields in the class. The values for those fields can then be accessed though the class' accessor methods.", "category": "Python"}, {"instruction": "How would you add the following list to a JSON document using Python?\n[1,2,3]", "input": "", "output": "import json\n\ndata = [1,2,3]\n\nwith open('my-json-file.json', 'w') as outfile:\n  json.dump(data, outfile)", "category": "Python"}, {"instruction": "Convert the following pseudocode into code that implements a binary search", "input": "Input: Array, Item\n\nSet low to the first index of the array\nSet high to the last index of the array\n\nwhile low is less than or equal to high\n  set mid to the average of low and high\n  if the item is found at mid, then return mid\n  else if the item is less than what is found at mid,\n    set high to mid - 1\n  else\n    set low to mid + 1\n\nreturn null", "output": "def binarySearch(list, item):\n    low = 0\n    high = len(list) - 1\n\n    while low <= high: \n        mid = (low + high) // 2\n        guess = list[mid] \n        if guess == item:\n            return mid\n        if guess > item:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return None", "category": "Python"}, {"instruction": "Explain the working of a function that takes a string as an argument, removes all the duplicate characters from it and returns the modified string", "input": "", "output": "The given function takes a string as an argument, creates an empty string to store unique characters from the given string. It then iterates through the given string and checks if the character is already present in the new string. If the character is not present, it adds the character to the new string. After iterating through the entire string, the modified string which doesn\u2019t contain any duplicate characters is returned.", "category": "Python"}, {"instruction": "Rewrite the following python code to an equivalent code using lambda and sorted function.", "input": "def sort_by_length(words):\n    return sorted(words, key=lambda x: len(x))", "output": "sort_by_length = lambda words: sorted(words, key=len)", "category": "Python"}, {"instruction": "Create a Django application to store and retrieve questions and answers.", "input": "", "output": "# Project Name\nproject = 'questions_and_answers'\n\n# Application Name\napplication = 'qa_app'\n\n# Create the project directory\nimport os\nif not os.path.exists(project):\n    os.mkdir(project)\n\n# Create the Django application\nfrom django.core.management import call_command\ncall_command('startapp', application, project)\n\n# Setup the database\nfrom django.conf import settings\n\ndefault_db_name = project + '.sqlite3'\nsettings.configure(\n    DATABASES = {\n        'default': {\n            'ENGINE': 'django.db.backends.sqlite3',\n            'NAME': os.path.join(project, default_db_name),\n        }\n    }\n)\n\nfrom django.db import models\n\n# Create the models\nclass Question(models.Model):\n    question_text = models.CharField(max_length=200)\n    pub_date = models.DateTimeField('date published')\n\nclass Answer(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    answer_text = models.CharField(max_length=200)\n\n# Make and apply the migrations\ncall_command('makemigrations', application)\ncall_command('migrate')", "category": "Python"}, {"instruction": "Write a code to print the Fibonacci series of n terms.", "input": "", "output": "def printFibonacciSeries(n):\n    a, b = 0, 1\n    for i in range(0, n):\n        print(a)\n        c = a + b\n        a = b\n        b = c\n\nprintFibonacciSeries(10)", "category": "Python"}, {"instruction": "Modify the following code so that it takes a list of numbers and calculates their median.", "input": "def median(data):", "output": "def median(data):\n    data.sort()\n    length = len(data)\n    if length == 0:\n        return 0\n    if length % 2 == 0:\n        return (data[length // 2] + data[length // 2 - 1]) / 2\n    elif length % 2 == 1:\n        return data[length // 2]", "category": "Python"}, {"instruction": "What is the difference between shallow copying and deep copying?", "input": "", "output": "Shallow copying is the process of creating a copy of the original object which only contains references to the values contained in the original instance. This means that any shallow copy only contains references to the same objects as the original instance, while any changes made to the copy will be reflected in the original object as well. Deep copying on the other hand, is the process of creating a new instance of the original object with all of its values copied over. This means that any changes made to the copy are not reflected in the original object.", "category": "Python"}, {"instruction": "Implement a recursive algorithm to count the number of elements that are divisible by k in an array.", "input": "[2, 4, 8, 10, 11], k = 3", "output": "def countK(arr, k): \n    if len(arr) == 0: \n        return 0\n    if arr[0] % k == 0: \n        return 1 + countK(arr[1:], k)\n    else: \n        return 0 + countK(arr[1:], k)", "category": "Python"}, {"instruction": "What is deadlock and how to prevent it?", "input": "", "output": "Deadlock is a state in which two or more processes wait for each other to finish, but none of the processes can finish because each is waiting for the other. To prevent deadlock, one can employ the use of a deadlock avoidance algorithm which typically checks for whether a particular set of conditions exist that can lead to deadlock. Additionally, locks can be applied liberally, but with caution, while avoiding circular wait.", "category": "Python"}, {"instruction": "Write a Python script that takes a string as input and outputs a string with the same characters in reverse order.", "input": "hello", "output": "def reverse_string(str):\n  return str[::-1]\n\nprint(reverse_string('hello'))", "category": "Python"}, {"instruction": "Write a function in Python that takes two parameters, a list of integers and a target integer. The function should return the number of times the target integer appears in the list.", "input": "list = [12, 4, 1, 18, 7, 15, 6, 11, 4]\ntarget = 4", "output": "def count_target(lst, target):\n    count = 0\n    for i in lst:\n        if i == target:\n            count += 1\n    return count\n\nprint(count_target(list, target))", "category": "Python"}, {"instruction": "Define a python function that returns an array of the numbers from 0 to n", "input": "", "output": "def create_array(n): \n    # create an empty list \n    mylist=[] \n    # add elements to the list by looping n times \n    for i in range(0, n + 1): \n        mylist.append(i) \n    # return the list \n    return mylist", "category": "Python"}, {"instruction": "Create a class definition in python with one variable and one method", "input": "", "output": "class Example:\n  def __init__(self, variable):\n    self.variable = variable\n\n  def method(self):\n    return self.variable + 1", "category": "Python"}, {"instruction": "Read the given list and filter out the elements containing the number '3'.", "input": "mylist = [13, 23, 32, 31, 14]", "output": "filteredlist = []\nfor num in mylist:\n    if '3' not in str(num):\n        filteredlist.append(num)\n\nprint(filteredlist)", "category": "Python"}, {"instruction": "Create a program in Python that will take a list of strings and output a list containing the lengths of each string.", "input": "mylist = [\"Hello\", \"World\", \"WDI\", \"Class\"]", "output": "length_list = []\nfor string in mylist:\n    length_list.append(len(string))\n\nprint(length_list)", "category": "Python"}, {"instruction": "Create a program that uses a loop to generate 25 random numbers from 0 to 8.", "input": "", "output": "import random\n\n# Generate 25 random numbers\nrandom_list = []\nfor i in range(25):\n    random_list.append(random.randint(0, 8))\n\nprint(random_list)", "category": "Python"}, {"instruction": "Read the given list and filter out the odd numbers.", "input": "mylist = [1,2,3,4,5]", "output": "even_list = []\nfor num in mylist:\n    if num % 2 == 0:\n        even_list.append(num)\n\nprint(even_list)", "category": "Python"}, {"instruction": "Write a function in Python that takes a sentence and a number as inputs, and returns the number of words in that sentence that are longer than the given number.", "input": "Sentence = \"Hello, this is a sentence\";\nNumber = 3;", "output": "def count_words_longer_than_number(text, number):\n  words = text.split()\n  count = 0\n  for word in words:\n    if len(word) > number:\n      count += 1\n\n  return count\n\ncount_words_longer_than_number(Sentence, Number)", "category": "Python"}, {"instruction": "Create a program in Python that will take in a list of strings and print out each unique string in the list.", "input": "mylist = [\"Hello\", \"World\", \"Hello\", \"WDI\", \"Class\"]", "output": "uniquelist = []\nfor string in mylist:\n    if string not in uniquelist:\n        uniquelist.append(string)\n\nprint(uniquelist)", "category": "Python"}, {"instruction": "Write a Python function to subtract two given numberss.", "input": "", "output": "def subtract_numbers(num1, num2):\n  return num1 - num2", "category": "Python"}, {"instruction": "Write a Python function to filter a given list of strings and return the list with the strings having length greater than the given number.", "input": "list = ['Example', 'cat', 'dog', 'hello', 'word']\nlength = 4", "output": "def filter_list(list, length):\n  return [string for string in list if len(string) > length]", "category": "Python"}, {"instruction": "Use linear regression to predict the price of a car based on its make and model.", "input": "make = ['Mazda', 'Volkswagen', 'Chevrolet']\n model = ['3', 'PASSAT', 'Malibu']", "output": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# load data\ndata = pd.read_csv('cars.csv')\n\n# create feature matrix\nX = data[['make', 'model']]\n\n# set target variable\ny = data['price']\n\n# one-hot encode categorical make and model data\nX = pd.get_dummies(X, columns=['make', 'model'])\n\n# create and fit model\nmodel = LinearRegression()\nmodel.fit(X, y)", "category": "Python"}, {"instruction": "Create a python script to check if a substring exists in a given string", "input": "", "output": "def is_substring(s1, s2):\n    return s2 in s1", "category": "Python"}, {"instruction": "Write a function to identify the most frequent letter in a string.", "input": "string = \"Hello Universe\"", "output": "from collections import Counter \n\ndef most_frequent_letter(string): \n  # Count the letter frequency \n  words = Counter(string) \n  \n  # Identify the most frequent letter \n  most_common = words.most_common(1)[0][0]\n  \n  # Return the most frequent letter \n  return most_common\n\nprint(most_frequent_letter(string)) # l", "category": "Python"}, {"instruction": "Given a list of integers, return a new list with even numbers doubled.", "input": "lst = [1, 2, 3, 4, 5, 6]", "output": "def double_even_numbers(lst): \n  # Iterate through the list and double the even numbers \n  double_lst = [] \n  for num in lst: \n    if num % 2 == 0: \n      double_lst.append(num * 2) \n    else: \n      double_lst.append(num)\n  \n  # Return the new list \n  return double_lst \n\nprint(double_even_numbers(lst)) # [1, 4, 3, 8, 5, 12]", "category": "Python"}, {"instruction": "Create a program that implements an autocomplete or predictive search feature.", "input": "words = [\"Apple\", \"App\", \"Application\", \"Applications\", \"Apples\", \"Ace\", \"Acer\"]", "output": "def autocomplete(user_input, words): \n  # Store the output words in a list \n  output = [] \n  \n  # Iterate through the words and check if the user input matches the beginning of the word \n  for word in words: \n    if word.startswith(user_input): \n      output.append(word)\n  \n  # Return the output words \n  return output \n\nprint(autocomplete(\"app\", words)) # [\"App\", \"Application\", \"Applications\", \"Apples\"]", "category": "Python"}, {"instruction": "Display the multiplication table for a given number.", "input": "num = 6", "output": "def num_mult_table(num): \n  # Iterate through the numbers from 1 to 10 \n  for i in range(1,11): \n    # Print the multiplication table for the given number \n    print(\"{} x {} = {}\".format(num, i, num*i))\n    \nnum_mult_table(num) \n\n# Output \n# 6 x 1 = 6 \n# 6 x 2 = 12 \n# 6 x 3 = 18 \n# 6 x 4 = 24 \n# 6 x 5 = 30 \n# 6 x 6 = 36 \n# 6 x 7 = 42 \n# 6 x 8 = 48 \n# 6 x 9 = 54 \n# 6 x 10 = 60 \n#", "category": "Python"}, {"instruction": "Create a program in Python that takes a list of numbers as input and sorts it in ascending order.", "input": "mylist = [3, 2, 5, 4, 1]", "output": "def list_sort(list): \n    for i in range(0, len(list)): \n        min_index = i \n        for j in range(i+1, len(list)): \n            if list[min_index] > list[j]: \n                min_index = j             \n        list[i], list[min_index] = list[min_index], list[i]\n    return list\n\nlist_sort(mylist)", "category": "Python"}, {"instruction": "Given the following line of code, explain what it does.", "input": "a = [i for i in range(5)]", "output": "The given line of code creates a list from 0 to 4 (inclusive) using a list comprehension. It is equivalent to the following code:\n\na = []\nfor i in range(5):\n    a.append(i)\n\nTherefore, it creates a list 'a' with elements \"0\", \"1\", \"2\", \"3\", and \"4\".", "category": "Python"}, {"instruction": "Create a program that generates a random integer from 1 to 10.", "input": "", "output": "import random\n\nrandom_number = random.randint(1, 10)\nprint(\"A random number between 1 and 10 is: \" + str(random_number))", "category": "Python"}, {"instruction": "Write a method in Python which takes a positive integer and returns the sum of squares of all numbers smaller than the given number.", "input": "5", "output": "def sum_of_squares(n): \n    if n == 1: \n        return 1\n    else: \n        return n*n + sum_of_squares(n-1) \n\nnumber = 5\nresult = sum_of_squares(number)\nprint('The sum of squares of numbers smaller than {} is {}.'.format(number, result))", "category": "Python"}, {"instruction": "Sort a list of numbers so that the lowest number appears first.", "input": "n_list = [3, 9, 1, 4, 5]", "output": "def sort_list(n_list):\n    \"\"\"\n    Sort a given list of numbers in ascending order.\n\n    Parameters\n    ----------\n    n_list: list\n        The list of numbers to sort\n\n    Returns\n    -------\n    sorted_list : list\n        The sorted list\n    \"\"\"\n    sorted_list = sorted(n_list)\n    return sorted_list\n\nn_list = [3, 9, 1, 4, 5]\nprint(sort_list(n_list)) # Outputs [1, 3, 4, 5, 9]", "category": "Python"}, {"instruction": "Generate a random PIN of 8 characters.", "input": "", "output": "import random\n\ndef generate_pin():\n    \"\"\"\n    This function generates a random PIN of 8 characters.\n\n    Parameters\n    ----------\n    None\n\n    Returns\n    -------\n    pin : str\n        The generated PIN\n    \"\"\"\n    characters= \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n    pin = \"\"\n\n    for _ in range(8):\n        pin += random.choice(characters)\n    \n    return pin\n\nprint(generate_pin()) # Outputs a random PIN of 8 characters", "category": "Python"}, {"instruction": "Write a function to convert an array of strings to an array of floats.", "input": "string_arr=['1.1', '2.3', '3.4']", "output": "def array_to_floats(string_arr):\n    # Create an array to store the float values\n    float_arr = []\n    # Iterate over the given array and convert to float\n    for s in string_arr:\n        float_arr.append(float(s))\n    # Return the new array\n    return float_arr\n\nstring_arr=['1.1', '2.3', '3.4']\nresult = array_to_floats(string_arr)\nprint(\"The array as floats is:\", result)", "category": "Python"}, {"instruction": "Write a function to generate an array of all possible permutations of N numbers.", "input": "", "output": "def generate_permutations(n): \n  \n    if n == 0: \n        return [] \n    \n    if n == 1: \n        return [[1]] \n  \n    permutations = [] \n    for i in range(n): \n        permutations_n_1 = generate_permutations(n - 1) \n  \n        for perm in permutations_n_1: \n            for j in range(n): \n                r = perm.copy() \n                r.insert(j, n) \n                permutations.append(r) \n  \n    return permutations", "category": "Python"}, {"instruction": "Given a string, write code to remove all the consecutive characters and output the new string.", "input": "string='AAABBBCCC'", "output": "def remove_consecutive_chars(string):\n  # create an empty string\n  new_string = ''\n\n  # iterate over the characters of the given string\n  for i in range(len(string)-1):\n    if string[i] != string[i+1]:\n      new_string += string[i]\n  \n  # add the last character of the string to the output\n  new_string += string[-1]\n  # return the new string\n  return new_string\n\nstring='AAABBBCCC'\nresult = remove_consecutive_chars(string)\nprint(\"The new string is:\", result)", "category": "Python"}, {"instruction": "Complete the following function to return the indices at which the binary representation of a given number has no consecutive 1s.", "input": "num = 12", "output": "def find_indices(num):\n    # convert given number to binary\n    binary_num = bin(num)[2:]\n\n    # create an empty list to store required indices\n    indices_list = []\n    \n    # iterate over the binary number\n    for i in range(len(binary_num)-1):\n        if binary_num[i+1] != '1' or binary_num[i] != '1':\n            indices_list.append(i)\n   \n    # return the required indices\n    return indices_list\n\nnum = 12\nresult = find_indices(num)\nprint(\"The indices with no consecutive 1s are:\", result)", "category": "Python"}, {"instruction": "Implement a function to solve the following equation: x2+y2=z2", "input": "", "output": "def solve_eq(x, y, z):\n  '''This function will solve the equation: x^2 + y^2 = z^2.'''\n\n  # Use the Pythagorean Theorem\n  if x**2 + y**2 == z**2:\n    return True\n  else:\n    return False", "category": "Python"}, {"instruction": "Create a program that takes in two lists and prints out a new list with the elements from the first list followed by the elements from the second list.", "input": "list_1 = [1, 2, 3]\nlist_2 = [4, 5, 6]", "output": "# define a function to combine two lists into one\ndef combine_lists(list_1, list_2):\n    # create a new list\n    combined_list = []\n    \n    # append the elements from list 1\n    for ele in list_1:\n        combined_list.append(ele)\n\n    # append the elements from list 2    \n    for ele in list_2:\n        combined_list.append(ele)\n    \n    # return the combined list\n    return combined_list\n\n# input two lists\nlist_1 = [1, 2, 3]\nlist_2 = [4, 5, 6]\n\n# output the combined list\ncombined_list = combine_lists(list_1, list_2)\nprint(\"The combined list is \" + str(combined_list))", "category": "Python"}, {"instruction": "Create a Python class called Employee which contains the employee id and the name.", "input": "", "output": "# define the Employee class\nclass Employee:\n    # construct a new Employee instance\n    def __init__(self, id, name):\n        self.id = id\n        self.name = name\n\n# create a new Employee object\nemployee1 = Employee(1, \"John Doe\")\n\n# access the employee id and name\nprint(employee1.id)\nprint(employee1.name)", "category": "Python"}, {"instruction": "Create a class named 'Circle' which calculates the area and circumference given a radius.", "input": "", "output": "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * (self.radius**2)\n\n    def circumference(self):\n        return 2 * 3.14 * self.radius", "category": "Python"}, {"instruction": "Generate a python program to create a n-dimensional array filled with zeros.", "input": "n = 4", "output": "# Program to create a n-dimensional array filled with zeros \n\nimport numpy as np\n\n# Get the number of dimensions \nn = 4\n\n# Create an array of zeros of given size \narr = np.zeros((n,n,n,n))\n\nprint(arr)", "category": "Python"}, {"instruction": "Write a code to implement a round-robin scheduling algorithm.", "input": "processes = [10, 5, 7]\ntime_slice = 2", "output": "# Program to implement a round-robin scheduling algorithm\n\n# Get the list of processes and the time slice \nprocesses = [10, 5, 7]\ntime_slice = 2\n\n# Create an empty list to store the remaining burst time \nremaining_burst = []\n\n# Loop through all processes to get the remaining burst time \nfor process in processes:\n  remaining_burst.append(process)\n\n# Keep track of current time cycle \ntime = 0\n\n# Loop through the processes and implement round-robin scheduling\nwhile True:\n  done = True\n  \n  # Iterate through the processes\n  for i in range(len(processes)):\n    if remaining_burst[i] > 0:\n      done = False # Not done yet\n      \n      if remaining_burst[i] > time_slice:\n        # Increment timeline\n        time += time_slice\n        \n        # Reduce the remaining burst time \n        remaining_burst[i] -= time_slice\n      else:\n        # Increment timeline\n        time += remaining_burst[i]\n        \n        # Set remaining burst to 0 \n        remaining_burst[i] = 0\n\n  # Break the loop if all processes are done \n  if done:\n    break\n\nprint('Total time to schedule the processes is', time)", "category": "Python"}, {"instruction": "Write a code to simulate a random walk in two-dimensional space.", "input": "x_steps = 10", "output": "# Program to simulate a random walk in two-dimensional space\n\nimport random\n\nx_steps = 10\n\n# Initialize starting positions\nx = 0\ny = 0\n\n# Take a random step on each iteration\nfor _ in range(x_steps):\n  direction = random.randint(0, 3)\n  if direction == 0:\n    x += 1\n  elif direction == 1:\n    x -= 1\n  elif direction == 2:\n    y += 1\n  else:\n    y -= 1\n  \nprint(f'Final position is ({x},{y})')", "category": "Python"}, {"instruction": "Create a program to generate a random password of 10 characters consisting of both alphabets and numbers.", "input": "", "output": "# Program to generate a random password of 10 characters\n\nimport string \nimport random \n\n# Get all the symbols to use in the password \nsymbols = string.ascii_letters + string.digits \n\n# Generate a random password \npassword = ''.join(random.choice(symbols) for _ in range(10)) \n\nprint(password)", "category": "Python"}, {"instruction": "Rewrite the following code using the set module in Python", "input": "a = [1, 1, 2, 3, 4, 5, 5, 5]", "output": "import set\n\na = [1, 1, 2, 3, 4, 5, 5, 5]\na_set = set(a)\nnew_list = list(a_set)\nprint(new_list)", "category": "Python"}, {"instruction": "Find all duplicates in an array.", "input": "arr = [1, 2, 4, 2, 1, 5]", "output": "def find_duplicates(arr):\n    duplicates = []\n    seen = set()\n    for elem in arr:\n        if elem in seen:\n            duplicates.append(elem)\n        else:\n            seen.add(elem)\n    return duplicates", "category": "Python"}, {"instruction": "Generate a random code string with each character from A-Z and 0-10.", "input": "", "output": "import random\n\ndef random_code_string(length):\n    chars = [chr(i) for i in range(65, 91)] + [str(digit) for digit in range(10)]\n    code_string = \"\"\n    for _ in range(length):\n        random_char = random.choice(chars)\n        code_string += random_char\n    return code_string", "category": "Python"}, {"instruction": "Identify if a given integer is odd or even.", "input": "43", "output": "def identify_odd_even(num):\n    if num % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"", "category": "Python"}, {"instruction": "Sum every second element in an array.", "input": "arr = [1, 5, 4, 8, 10, 12]", "output": "def sum_second_elements(arr):\n    sum_num = 0\n    for i in range(1, len(arr), 2):\n        sum_num += arr[i]\n    return sum_num", "category": "Python"}, {"instruction": "Given a list of strings and a target string, return a list of strings which contain the target string", "input": "list_of_strings = [\"cat\", \"dog\", \"rat\", \"bat\"]\ntarget_string = \"at\"", "output": "list_of_strings = [\"cat\", \"dog\", \"rat\", \"bat\"]\ntarget_string = \"at\"\n\nresult = [string for string in list_of_strings if target_string in string]\n\nprint(result)", "category": "Python"}, {"instruction": "Given a 2D array, return the sums of all columns", "input": "arr = [[1,2,3],\n       [4,5,6],\n       [7,8,9]]", "output": "arr = [[1,2,3],\n       [4,5,6],\n       [7,8,9]]\n\nsums = []\n\nfor i in range(len(arr[0])):\n    total = 0\n    for row in arr:\n        total += row[i]\n    sums.append(total)\n\nprint(sums)", "category": "Python"}, {"instruction": "Given a collection of email addresses, group them by the domain", "input": "emails = [\"test@example.com\", \"example@example.org\", \"test@test.co.uk\"]", "output": "emails = [\"test@example.com\", \"example@example.org\", \"test@test.co.uk\"]\n\nfrom collections import defaultdict\n\nby_domain = defaultdict(list)\n\nfor email in emails:\n    domain = email.split(\"@\")[-1]\n    by_domain[domain].append(email)\n\nprint(dict(by_domain))", "category": "Python"}, {"instruction": "Given a list of words and a target word, determine if the target word is in the list", "input": "list_words = [\"apple\", \"banana\", \"orange\", \"mango\"]\ntarget_word = \"pineapple\"", "output": "list_words = [\"apple\", \"banana\", \"orange\", \"mango\"]\ntarget_word = \"pineapple\"\n\nif target_word in list_words:\n  print (\"Target word is in the list\")\nelse:\n  print (\"Target word is not in the list\")", "category": "Python"}, {"instruction": "Create a process to reverse a string without using any built-in functions.", "input": "string = \"Hello world\"", "output": "def reverse_string(string): \n  # Create an empty string \n  rev_string = \"\" \n  \n  # Iterate through the string and build the reversed string \n  for char in string: \n    rev_string = char + rev_string \n  \n  # Return the reversed string \n  return rev_string \n\nprint(reverse_string(string)) # dlrow olleH", "category": "Python"}, {"instruction": "Create an algorithm that uses a hash table to detect if an element is a duplicate.", "input": "array = [2, 3, 4, 5, 6, 3]", "output": "def detect_duplicate(array): \n  # Create a hash table to store elements in the array \n  hash_table = dict() \n  \n  # Iterate through the array, check if the elements are already stored in the hash table  \n  # If the elements are already stored in the hash table, return True \n  for element in array: \n    if element in hash_table: \n      return True \n    else: \n      # Else, add the element to the hash table \n      hash_table[element] = 1\n    \n  # Return False if no duplicates are found \n  return False\n\nprint(detect_duplicate(array)) # True", "category": "Python"}, {"instruction": "Create a process to sort an array of numbers from least to greatest.", "input": "arr = [3, 4, 12, 1, 5, 85]", "output": "def sort_array(arr): \n  # Loop through the array, swap each element until it is in order (ascending)\n  for i in range(len(arr) - 1): \n    for j in range(i + 1, len(arr)): \n      if arr[i] > arr[j]: \n        temp = arr[i] \n        arr[i] = arr[j] \n        arr[j] = temp \n  \n  # Return the sorted array \n  return arr\n\nprint(sort_array(arr)) # [1, 3, 4, 5, 12, 85]", "category": "Python"}, {"instruction": "Write a Python function that takes a string as an argument and checks if it contains the word \u201cPython\u201d.", "input": "text = \"This sentence does not contain the word Python\"", "output": "def contains_python(string): \n  if \"Python\" in string: \n    return True\n  else: \n    return False\n\nprint(contains_python(text)) # False", "category": "Python"}, {"instruction": "Create a class to save data of a user's account.", "input": "", "output": "class Account:\n    def __init__(self, username, password, email):\n        self.username = username\n        self.password = password\n        self.email = email\n    \n    def get_info(self):\n        return (self.username, self.password, self.email)", "category": "Python"}, {"instruction": "List all the prime numbers less than a specified number \u2018n\u2019", "input": "n = 10", "output": "def is_prime(n):\n    \"\"\"Returns True if n is a prime number and False otherwise.\"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef prime_numbers_less_than(n):\n    \"\"\"Returns a list of all prime numbers less than n.\"\"\"\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\nn = 10\nprint(prime_numbers_less_than(n)) # [2, 3, 5, 7]", "category": "Python"}, {"instruction": "Count the number of leaf nodes in a binary tree.", "input": "tree = \n{ \n    \"data\": 10, \n    \"left\": { \n        \"data\": 20, \n        \"left\": { \n            \"data\": 40 \n        }, \n        \"right\": { \n            \"data\": 50 \n        } \n    }, \n    \"right\": { \n        \"data\": 30, \n        \"left\": { \n            \"data\": 60 \n        } \n    } \n}", "output": "def countLeafNodes(tree):\n    if tree is None:\n        return 0\n    if tree[\"left\"] is None and tree[\"right\"] is None:\n        return 1 \n    leftLeaf = countLeafNodes(tree[\"left\"])\n    rightLeaf = countLeafNodes(tree[\"right\"])\n    return leftLeaf + rightLeaf\n\ntree = { \n    \"data\": 10, \n    \"left\": { \n        \"data\": 20, \n        \"left\": { \n            \"data\": 40 \n        }, \n        \"right\": { \n            \"data\": 50 \n        } \n    }, \n    \"right\": { \n        \"data\": 30, \n        \"left\": { \n            \"data\": 60 \n        } \n    } \n} \n\nprint(countLeafNodes(tree)) # 3", "category": "Python"}, {"instruction": "Rewrite the code so that it can run in Python 3 instead of Python 2.", "input": "#!/usr/bin/env python\nprint 'Hello, world!'", "output": "#!/usr/bin/env python\n\nprint('Hello, world!')", "category": "Python"}, {"instruction": "Build a TensorFlow model for classification of a 2-D dataset.", "input": "X = [[1, 2], [3, 4], [5, 6]]\nY = [0, 1, 1]", "output": "\"\"\"\nBuild a TensorFlow model for classification of a 2-D dataset.\n\nInput:\nX = [[1, 2], [3, 4], [5, 6]]\nY = [0, 1, 1]\n\nOutput:\nimport tensorflow as tf\n\n# data\nX = tf.constant([[1, 2], [3, 4], [5, 6]], dtype=tf.float32)\nY = tf.constant([0, 1, 1], dtype=tf.float32)\n\n# model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(2, activation='relu'))\nmodel.add(tf.keras.layers.Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(X, Y, epochs=50, batch_size=3)\n\"\"\"", "category": "Python"}, {"instruction": "Design a code snippet to sort a hashtable by its keys.", "input": "{8: \"hello\", 3: \"goodbye\", 2: \"aloha\", 4: \"bonjour\", 6: \"ni hao\"}", "output": "// a function to sort the hashtable by its keys\nfunc sortHashTableKeys(hashTable map[int]string) map[int]string {\n    // a slice to store the keys in order\n    var keys []int\n    for key := range hashTable {\n        keys = append(keys, key)\n    }\n\n    // sort the slice \n    sort.Ints(keys)\n    \n    // create a new map with the sorted keys\n    sortedHashTable := make(map[int]string)\n    for _, key := range keys {\n        sortedHashTable[key] = hashTable[key]\n    }\n\n    return sortedHashTable\n}", "category": "Python"}, {"instruction": "Write a python code snippet to calculate the sum of any number of integers.", "input": "num1 = 10\nnum2 = 6 \nnum3 = 8", "output": "sum = num1 + num2 + num3\nprint(\"The sum is\", sum)", "category": "Python"}, {"instruction": "Create a function that takes a single argument and returns a string describing the type of argument.", "input": "", "output": "def get_argument_type(arg):\n    if isinstance(arg, str):\n        return 'string'\n    if isinstance(arg, int):\n        return 'integer'\n    if isinstance(arg, float):\n        return 'float'\n    if isinstance(arg, list):\n        return 'list'\n    if isinstance(arg, dict):\n        return 'dictionary'", "category": "Python"}, {"instruction": "Suggest an algorithm to find the longest common sub-string in two strings", "input": "Two strings of length n and m", "output": "A possible algorithm to find the longest common sub-string in two strings is the dynamic programming approach. The algorithm works by comparing the two given strings letter by letter and storing the results in a two-dimensional array. The algorithm checks the characters at each index of the given strings and if they are equal, the value of the corresponding cell is set to 1 plus the previous diagonal cell's value. If the characters are not equal, the cell is set to 0. The longest sub-string is then determined by traversing through the matrix and looking for the maximum value.", "category": "Python"}, {"instruction": "Suggest an appropriate data structure to store the test scores of a class", "input": "Test scores of each student in the class", "output": "An appropriate data structure to store the test scores of a class is a nested dictionary. The outer dictionary will have the student's name as the key and the inner dictionary will have the test name as the key and the score as the value. For example, if we have the test scores for three students for two tests, we can store it as follows: \n\nscores = { \n    'John': { \n        'Test1': 95,\n        'Test2': 73\n    }, \n    'Adam': { \n        'Test1': 87, \n        'Test2': 86 \n    }, \n    'Sarah': { \n        'Test1': 76, \n        'Test2': 75 \n    }\n}", "category": "Python"}, {"instruction": "Suggest a data structure and implementation to store a list of vehicles", "input": "A list of cars and buses", "output": "A list of vehicles can be stored in an adjacency list data structure. Each node in the graph represents either a car or a bus. The edges link the respective cars and buses, indicating their connectivity. For example, if we have a list of cars and buses, we can store it as follows: \n\ngraph = {\n    'cars': {'car1', 'car2', ...}, \n    'buses': {'bus1', 'bus2', ...}, \n    'edges': { \n        ('car1', 'bus1'), \n        ('car2', 'bus2'), \n        ...\n    } \n}", "category": "Python"}, {"instruction": "Given the following code snippet, write the code to achieve the expected output", "input": "def convert_to_title_case(input):\n    # Expected Output:\n    # input = \"this is a Title\"\n    # Output = This Is A Title", "output": "def convert_to_title_case(input):\n    words = input.split(' ')\n    output = []\n    for word in words:\n        output.append(word.capitalize())\n    return ' '.join(output)\n\n# Expected Output:\ninput = \"this is a title\"\n# Output = This Is A Title\nprint(convert_to_title_case(input))", "category": "Python"}, {"instruction": "Explain why the following code snippet produces the output it does", "input": "lst = [[1, 2], [1, 2], [3, 4]]\n[x for i in lst for x in i]", "output": "The code snippet is using a nested list comprehension to flatten the list ``lst``. The outer loop iterates over each sublist in the list while the inner loop iterates over each element of the sublist. As a result, the output is a flattened list containing all the elements in the original list. In this case, the output is [1, 2, 1, 2, 3, 4].", "category": "Python"}, {"instruction": "Write a Python function that prints the frequencies of even and odd numbers in a given array.", "input": "[2, 5, 4, 6, 8, 10]", "output": "def frequency_of_odd_and_even(arr):\n    freq_even = 0\n    freq_odd = 0\n    for i in arr:\n        if i % 2 == 0:\n            freq_even += 1\n        else:\n            freq_odd += 1\n    print(\"Frequency of even numbers:\", freq_even)\n    print(\"Frequency of odd numbers:\", freq_odd)", "category": "Python"}, {"instruction": "Create a function to sort a list of numbers without using python's built-in sort function.", "input": "[3,5,4,2,1]", "output": "# Function to sort a list of numbers without using Python's built-in sort function\ndef my_sort(numbers):\n    n = len(numbers)\n\n    for i in range(n): \n        for j in range(0, n-i-1):\n            if numbers[j] > numbers[j+1] :\n                numbers[j], numbers[j+1] = numbers[j+1], numbers[j]\n                \n    return numbers\n\n# Example list\nlist = [3,5,4,2,1]\nprint(my_sort(list))", "category": "Python"}, {"instruction": "Create an HTTP request to retrieve data from an API.", "input": "API_URL = \"https://example.com/api/get_data\"", "output": "import requests\n\nresponse = requests.get(API_URL)\ndata = response.json()", "category": "Python"}, {"instruction": "Create a for loop for copying an array.", "input": "arr = [1, 2, 3, 4, 5]", "output": "arr_copy = []\nfor i in arr:\n    arr_copy.append(i)", "category": "Python"}, {"instruction": "Insert a line into the code to improve its efficiency.", "input": "def double_list(lst):\n    for i in range(len(lst)):\n        lst[i] *= 2", "output": "def double_list(lst):\n    output_list = [x * 2 for x in lst]\n    return output_list", "category": "Python"}, {"instruction": "Find the sum of all even numbers in the following list (Python code):", "input": "[1, 4, 6, 7, 8, 12, 19]", "output": "sum_even_num = 0\nfor num in [1, 4, 6, 7, 8, 12, 19]:\n    if num % 2 == 0:\n        sum_even_num = sum_even_num + num \nprint(sum_even_num)", "category": "Python"}, {"instruction": "Create a program that prints a given 2D array in a spiral form.", "input": "a = [[1,2,3],[4,5,6],[7,8,9]]", "output": "def spiral_print(a):\n    m = len(a)\n    n = len(a[0])\n \n    t = 0   #top\n    b = m-1 #bottom\n    l = 0   #left\n    r = n-1 #right\n\n    dir = 0\n    while l<=r and t<=b:\n\n        if dir == 0:\n            for i in range(l, r+1):\n                print(a[t][i], end=\" \")\n            t += 1\n        elif dir == 1:\n            for i in range(t, b+1):\n                print(a[i][r], end=\" \")\n            r -= 1\n        elif dir == 2:\n            for i in range(r, l-1, -1):\n                print(a[b][i], end=\" \")\n            b -= 1\n        elif dir == 3:\n            for i in range(b, t-1, -1):\n                print(a[i][l], end=\" \")\n            l += 1\n\n        dir=(dir+1)%4", "category": "Python"}, {"instruction": "Create a function that takes a string as an argument and checks if all the characters in the string are unique, and returns a boolean.", "input": "", "output": "def are_all_characters_unique(string):\n    seen_characters = set()\n    for c in string:\n        if c in seen_characters:\n            return False\n        seen_characters.add(c)\n    return True", "category": "Python"}, {"instruction": "Create a function that takes a list of strings and returns a new list of strings with the first letter of each string as capital.", "input": "names = [\"mary\", \"john\", \"joseph\"]", "output": "def capitalize_names(names):\n new_names = []\n for name in names:\n    new_name = name[0].capitalize() + name[1:]\n    new_names.append(new_name)\n return new_names", "category": "Python"}, {"instruction": "Write a code to identify palindromic numbers between 1 and a given number n.", "input": "", "output": "def printPalindromicNumbers(n): \n    for num in range(1, n + 1):\n        s = str(num)\n        if(s == s[::-1]):\n            print(num, end=\" \")\n\nprintPalindromicNumbers(100)", "category": "Python"}, {"instruction": "Describe the differences between np.array and a list.", "input": "", "output": "Numpy arrays are more efficient than lists as they are homogeneous in nature. This means that all the items in a numpy array must be of the same data type, while a list can contain items of any data type. Additionally, numpy arrays can be multi-dimensional while lists are only one-dimensional. Numpy arrays can be indexed and sliced the same way as lists. However, operations on numpy arrays are much faster than operations on lists. Lastly, numpy arrays support vectorization which allows for efficient computation.", "category": "Python"}, {"instruction": "Construct a boolean check to detect if a given string contains the word \"hello\".", "input": "", "output": "def contains_hello(input_string):\n    return \"hello\" in input_string", "category": "Python"}, {"instruction": "Use NLTK to analyse the sentiment of a given text.", "input": "The movie is awesome", "output": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n \nsid = SentimentIntensityAnalyzer()\n \ntext = \"The movie is awesome\"\n  \nscores = sid.polarity_scores(text)\n  \nprint(scores['compound'])\n\n# Output\n0.6249", "category": "Python"}, {"instruction": "Write a Python script to determine how many lowercase letters are in a given string.", "input": "string = \"Hello World!\"", "output": "\"\"\"\nPython script to determine how many lowercase letters are in a given string \n\"\"\"\n\n# Initialize a variable to count the lowercase letters\nlowercase_letter_count = 0\n\n# Loop through each character in the string\nfor char in string:\n    # Check if the character is a lowercase letter\n    if char.islower():\n        # If yes, then increment the counter\n        lowercase_letter_count += 1\n\n# Print the total number of lowercase letters\nprint(lowercase_letter_count)", "category": "Python"}, {"instruction": "Write a code to construct the following rectangle pattern", "input": "6", "output": "def drawRectangle(size):\n    for i in range(size):\n        print(\"* \" * size) \ndrawRectangle(6)", "category": "Python"}, {"instruction": "Implement a function to calculate the greatest common divisor", "input": "42, 56", "output": "def gcd(a, b):\n    while b > 0:\n        a, b = b, a % b\n    return a\nprint(gcd(42, 56))", "category": "Python"}, {"instruction": "Write a python function that takes two strings as an argument and returns the True if they are anagrams of each other, else False.", "input": "\"rat\" and \"tar\"", "output": "def check_anagrams(str1,str2):\n    str1_list = list(str1) \n    str1_list.sort() \n    str2_list = list(str2) \n    str2_list.sort() \n    return (str1_list == str2_list) \n  \n# Driver code  \nstr1 = \"rat\"\nstr2 = \"tar\"\nif check_anagrams(str1, str2): \n    print(\"The strings are anagrams.\")\nelse:\n    print(\"The strings aren't anagrams.\")", "category": "Python"}, {"instruction": "Update the given code to generate the correct output", "input": "def func(x, n):\n    s = 0\n    for i in range (n):\n        s += (x**i)\n    return s\n\nOutput: The sum of series x^1 + x^2 + x^3 + ... + x^n is", "output": "def func(x, n):\n    s = 0\n    for i in range (n):\n        s += (x**i)\n    return s\n\ndef generateSumString(x, n):\n    result = \"The sum of series \"\n    for i in range(1, n+1):\n        result += x + \"^\" + str(i)\n        if(i != n):\n            result += \" + \"\n        else:\n            result += \" is\"\n    return result\n\ndef main():\n   x = 4\n   n = 5 \n   print(generateSumString(x, n), func(x,n))\n\nmain()", "category": "Python"}, {"instruction": "Find out the number of odd numbers in an array", "input": "[2, 9, 0, 5, 3]", "output": "def odd_num(arr): \n    count = 0\n    for num in arr: \n        if num % 2 != 0: \n            count += 1\n    return count \n        \n# Test Array \narr = [2, 9, 0, 5, 3] \n# Function Call \nodd_num(arr)", "category": "Python"}, {"instruction": "In Python, write code to sort a list of integers in ascending order.", "input": "[9, 15, 5, 11, 4]", "output": "def sort_list(list_of_numbers):\n   list_of_numbers.sort()\n   return list_of_numbers\n\nprint(sort_list([9, 15, 5, 11, 4])) # Output: [4, 5, 9, 11, 15]", "category": "Python"}, {"instruction": "Output a list of all even numbers between two given positive integers m and n.", "input": "m=2, n=10", "output": "def evenNumbers(m,n):\n    evenNum=[]\n    for i in range(m,n+1):\n        if i%2 == 0:\n            evenNum.append(i)\n    return evenNum", "category": "Python"}, {"instruction": "Create a Python class named 'Student' that contains the name, age and grade of a student.", "input": "", "output": "class Student:\n  def __init__(self, name, age, grade):\n    self.name = name\n    self.age = age\n    self.grade = grade", "category": "Python"}, {"instruction": "Write a code to print the common elements of two given arrays", "input": "arr1 = [2, 3, 4, 5]\narr2 = [3, 6, 7, 8]", "output": "def common_elements(arr1, arr2):\n    common = []\n    for i in arr1:\n        if i in arr2:\n            common.append(i)\n    return common", "category": "Python"}, {"instruction": "Create a class in Python that takes a list of numbers and finds the average.", "input": "list: [4, 5, 6]", "output": "class AverageCalculator:\n    def __init__(self, numbers):\n        self.numbers = numbers\n    \n    def calculate_average(self): \n        total = 0\n        for item in self.numbers:\n            total += item\n        return total / len(self.numbers)", "category": "Python"}, {"instruction": "Generate an algorithm in any language that can find the sum of the numbers in a given array", "input": "", "output": "Function sumArray (arr[])\n{\n    sum = 0\n    for i = 0 to arr.length - 1\n        sum += arr[i]\n    end for\n    return sum\n}", "category": "Python"}, {"instruction": "Create a Python code to print out all the common elements in two lists.", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [2, 3, 4, 6]", "output": "def get_common_elements(list1, list2):\n    \"\"\"\n    Function to get all the common elements in two lists.\n    \n    Arguments:\n        list1 {list}: The first list.\n        list2 {list}: The second list.\n    \n    Returns:\n        list: A list containing all the common elements in both lists.\n    \"\"\"\n    common_elements = []\n    for element in list1:\n        if element in list2:\n            common_elements.append(element)\n    return common_elements", "category": "Python"}, {"instruction": "Create a Python function to find all unique values in a list.", "input": "L = [1, 2, 4, 2, 1]", "output": "def find_unique_values(L):\n    \"\"\"\n    Function to find all the unique values in a list.\n    \n    Arguments:\n        L {list}: The list to search in.\n    \n    Returns:\n        set: The set of unique values.\n    \"\"\"\n    unique_values = set()\n    for item in L:\n        if item not in unique_values:\n            unique_values.add(item)\n    return unique_values", "category": "Python"}, {"instruction": "Create a Python function to return the frequency table of a list of words.", "input": "words = [\"apple\", \"mango\", \"cherry\", \"banana\", \"apple\", \"mango\"]", "output": "def create_frequency_table(words):\n    \"\"\"\n    Function to create a frequency table for a given list of words.\n    \n    Arguments:\n        words {list}: List of words.\n    \n    Returns:\n        dictionary: Frequency table of words.\n    \"\"\"\n    frequency_table = dict()\n    for word in words:\n        if word in frequency_table:\n            frequency_table[word] += 1\n        else:\n            frequency_table[word] = 1\n    return frequency_table", "category": "Python"}, {"instruction": "Create a function in Python to take a positive integer and return its factorial.", "input": "num = 5", "output": "def factorial(num): \n    \"\"\"Function to return the factorial of a positive integer\"\"\"\n    if(num <=1): \n        return 1\n    else: \n        return(num*factorial(num-1))", "category": "Python"}, {"instruction": "Explain the functional programming paradigm.", "input": "", "output": "Functional Programming is a programming paradigm that emphasizes the use of functions, or predefined sequences of commands, to produce desired results. This paradigm tries to avoid state and mutable data, and instead use higher-order functions to pass functions as arguments. This makes it easier to understand, debug, and test code as functions are isolated from one another, making it less prone to errors.", "category": "Python"}, {"instruction": "Generate a list of unique numbers between A and B where both A and B are input parameters.", "input": "a = 0\nb = 5", "output": "def create_list(a, b):\n\tresult = []\n\tfor i in range(a, b+1):\n\t\tif i not in result:\n\t\t\tresult.append(i)\n\treturn result\n\na = 0\nb = 5", "category": "Python"}, {"instruction": "Write a function to check if the parentheses in given expression are balanced or not.", "input": "expression = \"((A+B)-C)*D+((E-F)*G\"", "output": "def is_balanced(expression):\n\topen_paratheses = 0\n\tfor char in expression:\n\t\tif char == '(':\n\t\t\topen_paratheses += 1\n\t\telif char == ')':\n\t\t\topen_paratheses -= 1\n\t\tif open_paratheses < 0:\n\t\t\treturn False\n\treturn open_paratheses == 0\n\nexpression = \"((A+B)-C)*D+((E-F)*G\"", "category": "Python"}, {"instruction": "Suggest a code in Python that will calculate the area of any given shape.", "input": "", "output": "def area(shape):\n    if shape == \"rectangle\":\n        length = float(input(\"Please enter the length: \"))\n        width = float(input(\"Please enter the width: \"))\n        return length * width\n\n    elif shape == \"triangle\":\n        base = float(input(\"Please enter the base: \"))\n        height = float(input(\"Please enter the height: \"))\n        return 0.5 * base * height\n\n    elif shape == \"circle\":\n        r = float(input(\"Please enter the radius: \"))\n        return 3.14 * r * r", "category": "Python"}, {"instruction": "Generate a function in python that takes two lists and returns the product of their longest common substrings.", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [2, 3, 5, 7]", "output": "def longest_common_substring(list1, list2):\n    longest_substring = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                current_substring = 1\n                k, l = i+1, j+1\n                while k < len(list1) and l < len(list2) and list1[k] == list2[l]:\n                    current_substring += 1\n                    k += 1\n                    l += 1\n                longest_substring = max(longest_substring, current_substring)\n\n    if longest_substring == 0:\n        return 0\n    else:\n        return list1[0] * list2[0] * longest_substring", "category": "Python"}, {"instruction": "Write a Python function that takes a number n as parameter and prints out all even numbers from 2 to n.", "input": "", "output": "def printEven(n): \n   for i in range(2, n+1): \n      if(i % 2 == 0): \n         print(i, end = \" \")", "category": "Python"}, {"instruction": "Modify the following Python code to print the program output unique and ordered.", "input": "x = [1, 2, 3, 4, 4, 3, 1]\nprint(x)", "output": "x = [1, 2, 3, 4]\ny = list(set(x))\ny.sort()\nprint(y)", "category": "Python"}, {"instruction": "Generate a graphical representation of a dataset.", "input": "The following data describes the height of students in grade 8:\n\nX: 155 cm , 159 cm , 166 cm , 165 cm, 186 cm\n\nY: 50 kg , 60 kg , 55 kg, 45 kg , 75 kg", "output": "import matplotlib.pyplot as plt\n\nx_list = [155, 159, 166, 165, 186]\ny_list = [50, 60, 55, 45, 75]\n\nplt.scatter(x_list, y_list )\n\nplt.xlabel(\"Height (cm)\")\nplt.ylabel(\"Weight (kg)\")\nplt.title(\"Height vs Weight of Grade 8 Students\")\n\nplt.show()", "category": "Python"}, {"instruction": "Train an AI model to predict whether an email is spam or not.", "input": "", "output": "import nltk\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# loading data\ndata = [('This is an email about about a promotion', 'spam'),\n\t('We want to transfer money to your account', 'spam'),\n\t('This email is about programming', 'not_spam'),\n\t('There is a new version of python', 'not_spam'),\n]\n\n# extracting features\nX, y = [], []\nfor feat, lab in data:\n\tX.append(feat)\n\ty.append(lab)\n\ncv = CountVectorizer()\nX_vect = cv.fit_transform(X)\n\n# training the model\nmodel = MultinomialNB()\nmodel.fit(X_vect, y)\n\n# predicting\nprediction = model.predict(cv.transform([\"This is an email about a discount sale\"]))\nprint(prediction)\n\n# Output\n['spam']", "category": "Python"}, {"instruction": "Develop an algorithm that checks for balanced parentheses in a given string.", "input": "", "output": "def is_balanced(input_string):\n    stack = []\n    for char in input_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0", "category": "Python"}, {"instruction": "Estimate the area of a shape using data from the given Pandas dataframe.", "input": "Stored in the form of a Pandas dataframe.\n0    1    2   \na    5    b   \n4    4    5", "output": "", "category": "Python"}, {"instruction": "Design a machine learning model to classify an article as either a sports article or a food article.", "input": "", "output": "The machine learning model can be designed as a sequence of layers built with Keras, followed by a dense layer with two units \u2013 one for sports and one for food, and a softmax activation function to achieve the final output. We can feed the model with a dataset consisting of article texts labeled as 'sports' or 'food'. Then, the model can be trained using gradient descent. After training is complete, the model can be used to classify new articles as either 'sports' or 'food' articles.", "category": "Python"}, {"instruction": "Write a paint program that displays a 10x10 blue square on the screen.", "input": "", "output": "import tkinter as tk\n\n# Create a window\nroot = tk.Tk()\n\n# Create a canvas \ncanvas = tk.Canvas(root, width=100, height=100)\n\n# Create a blue square\ncanvas.create_rectangle(0, 0, 100, 100, fill=\"blue\")\n\n# Pack the canvas\ncanvas.pack()\n\n# Display the window\nroot.mainloop()", "category": "Python"}, {"instruction": "Create a class in Python named 'Car' with attributes 'color' and 'make', and methods 'start' and 'stop'.", "input": "", "output": "class Car:\n    def __init__(self, color, make):\n        self.color = color\n        self.make = make\n    \n    def start(self):\n        print(\"Car started.\")\n        \n    def stop(self):\n        print(\"Car stopped.\")", "category": "Python"}, {"instruction": "Write a Python program to prompt the user for a string and print the number of unique characters it contains.", "input": "", "output": "user_string = input(\"Please enter a string: \")\n\nunique_chars = set()\n\nfor char in user_string:\n    unique_chars.add(char)\n\nprint(\"The string contains\", len(unique_chars), \"unique character(s).\")", "category": "Python"}, {"instruction": "Explain the difference between subclasses and superclasses.", "input": "", "output": "A superclass is a class from which other classes can inherit methods and properties. A subclass is a class that has inherited a superclass' methods and properties. In object-oriented programming (OOP), a class can be both a superclass and a subclass simultaneously. When a class inherits from another class it is said to extend the superclass, thereby creating a subclass. As such, a subclass has all the properties and methods of its superclass, as well as additional properties and methods that are unique to the subclass itself.", "category": "Python"}, {"instruction": "Create a python program that takes a string as input and prints the length of the longest substring without repeatingcharacters.", "input": "\"abcabcbb\"", "output": "def find_longest_substring(s):\n  max_length = 0\n  start = 0\n  usedChar = {}\n\n  for i in range(len(s)):\n    if s[i] in usedChar and start <= usedChar[s[i]]:\n        start = usedChar[s[i]] + 1\n    else:\n        max_length = max(max_length, i - start + 1)\n\n    usedChar[s[i]] = i\n\n  return max_length\n\ninput_string = \"abcabcbb\"\n\nprint(\"The length of longest substring without repeating characters is: {}\".format(find_longest_substring(input_string)))", "category": "Python"}, {"instruction": "Suggest a technique to detect plagiarism in programming assignments.", "input": "", "output": "One technique to detect plagiarism in programming assignments is to compute the similarity between submissions and reference solutions. This can be done by extracting the key pieces of code from submissions, such as functions and loops, and then comparing them against the reference solution. If the extracted pieces of code are more similar than would be expected by chance, it could be an indication of plagiarism.", "category": "Python"}, {"instruction": "Add a try-catch block around the code example that catches an exception if it is thrown.", "input": "with open(\"myfile.txt\") as f:\n    for line in f:\n        print(line)", "output": "try:\n    with open(\"myfile.txt\") as f:\n        for line in f:\n            print(line)\nexcept:\n    print(\"An exception has been thrown\")", "category": "Python"}, {"instruction": "Write a Python program to parse a date string and display the date in ISO 8601 format.", "input": "date_string = '21 May 2021'", "output": "from datetime import datetime\nimport re\n\n# Parse the date string \ndate = datetime.strptime(date_string, '%d %B %Y')\n\n# Convert the date to ISO 8601 format\niso_8601 = date.strftime(\"%Y-%m-%d\")\n\n# Print the ISO 8601 formatted date\nprint(iso_8601)", "category": "Python"}, {"instruction": "Convert an array of tuples of 2 numbers into an array of complex numbers.", "input": "tuple_array = [(3,4), (5,6), (7,8)]", "output": "import numpy as np \n\n# Convert the array of tuples into an array of complex numbers \ncomplex_arr = np.array(tuple_array, dtype=complex)\n\n# Print the complex array\nprint(complex_arr)", "category": "Python"}, {"instruction": "Perform a linear search on an array of 10 numbers and return the index for the target number.", "input": "nums = [2, 8, -4, 1, 0, 5, 3, 9, 6, 10]\ntarget_num = 8", "output": "def linear_search(nums, target_num):\n    # Get the length of the array\n    len_nums = len(nums)\n\n    # Loop through the array to find the index of the target number\n    for i in range(len_nums):\n        if nums[i] == target_num:\n            # Return the index of the target number\n            return i\n\n# Get the index of the target number\nindex = linear_search(nums, target_num)\n\n# Print the index\nprint(index)", "category": "Python"}, {"instruction": "Using the turtle module, create a drawing of a triangle.", "input": "import turtle\n<noinput>", "output": "import turtle\n# create an instance of Turtle class\nmy_turtle = turtle.Turtle()\nmy_turtle.speed(0)\n# draw a triangle\nmy_turtle.forward(100)\nmy_turtle.left(120)\nmy_turtle.forward(100)\nmy_turtle.left(120)\nmy_turtle.forward(100)\n# finish the drawing\nmy_turtle.done()", "category": "Python"}, {"instruction": "Compare two strings and return the index of the first character that is unequal in the two strings.", "input": "string1 = \"Hello world!\"\nstring2 = \"Howdy world!\"", "output": "def get_index_of_first_diff(string1, string2):\n    # Get the length of the strings \n    len_1 = len(string1)\n    len_2 = len(string2)\n\n    # Get the length of the shorter string\n    len_shorter = min(len_1, len_2)\n\n    # Compare the two strings character by character\n    for i in range(len_shorter):\n        if string1[i] != string2[i]:\n            # Return the index of the first differing character\n            return i\n\n# Get the index of first differing character\nindex = get_index_of_first_diff(string1, string2)\n\n# Print the index\nprint(index)", "category": "Python"}, {"instruction": "Create an instance of an Apache Spark DataFrame using an existing Pandas dataframe.", "input": "import pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})", "output": "from pyspark.sql import SparkSession\n\n# Create SparkSession object\nspark = SparkSession.builder.getOrCreate()\n\n# Create Spark DataFrame using Pandas df\nspark_df = spark.createDataFrame(df)", "category": "Python"}, {"instruction": "Explain the purpose of the %i in a Python format string.", "input": "", "output": "The %i in Python is a special format specifier used to format integer numbers. When used in a format string, it will convert the number to an integer and insert it into the output string. This can be used to easily format numbers when printing output.", "category": "Python"}, {"instruction": "Re-write this Python code as a JavaScript function.", "input": "def double_number(num):\n  return num * 2", "output": "function doubleNumber(num) {\n  return num * 2;\n}", "category": "Python"}, {"instruction": "Multiply two input matrices using numpy.", "input": "matrix A:\n[[1,2],\n[3,4]]\n\nmatrix B:\n[[5,6],\n[7,8]]", "output": "import numpy as np\nA = np.array([[1,2], [3,4]]) \nB = np.array([[5,6], [7,8]]) \n\nC = np.matmul(A,B)\nprint(C)", "category": "Python"}, {"instruction": "Create a function in Python that takes two integers N and M and prints out all possible combinations of numbers that add up to N and are at most M.", "input": "N=8, M=3", "output": "def combinations_with_sum(n, m): \n  for i in range(1, m): \n    for j in range(i, m):\n      if i + j == n:\n        print(i, '+', j, '=', n)", "category": "Python"}, {"instruction": "Create an asyncio event loop and execute a coroutine.", "input": "", "output": "import asyncio\n\nasync def myfunc():\n   print(\"I'm in a coroutine\")\n\nloop = asyncio.get_event_loop()\ntry:\n    loop.run_until_complete(myfunc())\n\nfinally:\n    loop.close()", "category": "Python"}, {"instruction": "Create a Python program that finds the highest number in a list of numbers.", "input": "[2, 4, 32, 41, 19]", "output": "# Initializing list\nlist_of_numbers = [2, 4, 32, 41, 19]\n\n# Finding the highest number\nmax_number = max(list_of_numbers)\n\n# Printing the result\nprint(max_number)\n\n# Output: 41", "category": "Python"}, {"instruction": "Create a function that takes in an array of strings and outputs an array of tuples of the first and last word in each string.", "input": "array = [\"Hello World\", \"Foo Bar\", \"Goodbye Moon\"]", "output": "def first_last_words(arr):\n    \"\"\"Gets the first and last word from each string.\n    \n    Parameters:\n    arr (list): array of strings\n    \"\"\"\n    result = []\n    for string in arr:\n        words = string.split()\n        result.append((words[0], words[-1]))\n    return result\n\nif __name__ == '__main__':\n    array = [\"Hello World\", \"Foo Bar\", \"Goodbye Moon\"]\n    print(first_last_words(array))", "category": "Python"}, {"instruction": "Write a code to check if a string contains only digits and output true or false.", "input": "string = \"1234567890\"", "output": "def is_digits(str):\n    \"\"\"Checks if a string contains only digits.\n    \n    Parameters:\n    str (str): string to be tested\n    \"\"\"\n    return str.isdigit()\n\nif __name__ == '__main__':\n    string = \"1234567890\"\n    print(is_digits(string))", "category": "Python"}, {"instruction": "Find the number of different words in a string of unlimited length.", "input": "string = \"This is a long sentence about nothing.\"", "output": "def word_count(str):\n    \"\"\"Counts the number of different words in a string of unlimited length.\n    \n    Parameters:\n    str (str): string to be counted\n    \"\"\"\n    words = str.split()\n    return len(set(words))\n\nif __name__ == '__main__':\n    string = \"This is a long sentence about nothing.\"\n    print(word_count(string))", "category": "Python"}, {"instruction": "Compute the sum of all elements in a numpy array.", "input": "import numpy as np\narr = np.array([[1,2,3],[4,5,6]])", "output": "import numpy as np\narr = np.array([[1,2,3],[4,5,6]])\n\n# Get the sum of all elements in the array\ntotal_sum = np.sum(arr)\n\n# Print the sum\nprint(total_sum)", "category": "Python"}, {"instruction": "Create a dictionary such that each element in the list is a key and the respective value is its length.", "input": "words = ['cat', 'dog', 'elephant']", "output": "#Create a new dictionary\nwordLengths = {}\n\n#Fill in the dictionary with the words as keys and their respective lengths as values\nfor word in words:\n    wordLengths[word] = len(word)\n\n#Print the populated dictionary\nprint(wordLengths)", "category": "Python"}, {"instruction": "Create a function that filters the numbers in the list and returns a list of prime numbers only.", "input": "list3 = [3, 4, 5, 7, 11, 13]", "output": "def primeNums(inputList):\n    #Create an empty list\n    primes = []\n\n    #Iterate over the list\n    for num in inputList:\n        #Check if the number is prime\n        isPrime = True\n        for i in range(2, num):\n            if num % i == 0:\n                isPrime = False\n        #Add the number to the list if prime\n        if isPrime:\n            primes.append(num)\n\n    #Return the list\n    return primes\n\n#Print the list\nprint(primeNums(list3))", "category": "Python"}, {"instruction": "Provide an example of a Python class and its elements.", "input": "", "output": "class Car: \n    def __init__(self, color, make, model): \n        self.color = color \n        self.make = make \n        self.model = model \n    \n    def start(self): \n        print(\"Engine started!\") \n\nford_mustang = Car('Red', 'Ford', 'Mustang') \nford_mustang.start()", "category": "Python"}, {"instruction": "Compose a program to reverse a list of numbers", "input": "", "output": "def reverse_nums(num_list):\n    n = len(num_list)\n    for i in range(n//2):\n        num_list[i], num_list[n-i-1] = num_list[n-i-1], num_list[i]\n    return num_list", "category": "Python"}, {"instruction": "Given an integer n, write a program to print out the prime numbers up to n.", "input": "", "output": "def is_prime(n):\n if n <= 1:\n return False\n for i in range(2, int(n**0.5) + 1):\n if n % i == 0:\n return False\n return True\n\ndef find_prime_numbers(n):\n primes = []\n for i in range(2, n + 1):\n if is_prime(i):\n primes.append(i)\n return primes", "category": "Python"}, {"instruction": "Complete the following function to output a reversed string", "input": "", "output": "def reverse(s):\n    rev = \"\"\n \n    i = len(s)\n    while i > 0:\n        rev += s[ i - 1 ]\n        i = i - 1\n \n    return rev", "category": "Python"}, {"instruction": "Write a function that returns the length of the longest common substring between two strings.", "input": "s1 = 'abcde'\ns2 = 'abfghe'", "output": "def longest_common_substring(s1, s2): \n    m = len(s1) \n    n = len(s2) \n  \n    # initialize matrix \n    L = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n    # To store the length of longest common substring \n    length = 0 \n  \n    # Comparing each character of s1 and s2 \n    for i in range(m + 1): \n        for j in range(n + 1): \n  \n            # If current character of s1 and s2 matches \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]: \n                L[i][j] = L[i - 1][j - 1] + 1\n                length = max(length, L[i][j]) \n            else: \n                L[i][j] = 0\n  \n    return length \n\n# Driver code \ns1 = 'abcde'\ns2 = 'abfghe'\nprint(\"Length of Longest Common Substring is: \", longest_common_substring(s1, s2))", "category": "Python"}, {"instruction": "Generate a code to reverse a string without using any loop.", "input": "Input String = \"Hello World!\"", "output": "input_string = 'Hello World!'\n\ndef reverse_string(input_string):\n    if len(input_string) == 0:\n        return \"\" \n    else:\n        return reverse_string(input_string[1:]) + input_string[0] \n \nres = reverse_string(input_string) \nprint(res)", "category": "Python"}, {"instruction": "Change the given array to a singly linked list without using a loop.", "input": "array = [1, 2, 3, 4, 5]", "output": "class Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \ndef convertToLinkedList(arr):\n    # Last Node \n    last = None\n  \n    # convert given array to linked list \n    for i in range(len(arr) - 1, -1, -1): \n        # create a new node \n        node = Node(arr[i]) \n  \n        # link existing list with new node \n        node.next = last\n        last = node\n  \n    return node\n\n# Driver code\narray = [1, 2, 3, 4, 5]\nhead = convertToLinkedList(array) \nwhile head != None: \n    print(head.data) \n    head = head.next", "category": "Python"}, {"instruction": "Create a program that prints the greatest common divisor between two numbers.", "input": "num1 = 99\nnum2 = 77", "output": "def gcd(num1, num2): \n      \n    if(num2 == 0): \n        return num1 \n    else: \n        return gcd(num2, num1 % num2) \n  \n# Driver code \nnum1 = 99\nnum2 = 77\nprint (\"The GCD of\", num1, \"and\", num2, \"is\", gcd(num1, num2))", "category": "Python"}, {"instruction": "Construct a python code to print the following text in reverse.", "input": "Hello World", "output": "text = 'Hello World'\nprint(text[::-1])", "category": "Python"}, {"instruction": "Select the Python data types which can store a sequence of items.", "input": "", "output": "Sequence data types in Python include lists, tuples and range objects.", "category": "Python"}, {"instruction": "How to check if a given number is an Armstrong number in Python?", "input": "", "output": "#Function to check if a number is an Armstrong number\ndef isArmstrong(number):\n   sum  = 0\n   temp = number\n\n   while temp > 0:\n    digit = temp % 10\n    sum += digit ** 3\n    temp //= 10\n \n   if number == sum:\n       return True\n   else:\n       return False\n   \n#Usage\nnumber = 9\nif(isArmstrong(number)):\n    print(f\"{number} is an Armstrong number\")\nelse:\n    print(f\"{number} is not an Armstrong number\")", "category": "Python"}, {"instruction": "Explain how to use Binary Search in Python?", "input": "", "output": "Binary search is an efficient search algorithm for sorted arrays. In Python, the bisect module can be used for binary search. The bisect.bisect() function finds the position of the number in the list or a place for the number if it is not present. The bisect.bisect_left() function does the same, but carefully chooses its insertion point to the left of any existing entries of the same value.\n\nFor example, to search for an element in a list, one can use the following code:\n\nimport bisect\n\ndef binary_search(list, item):\n    pos = bisect.bisect_left(list, item)\n    if pos != len(list) and list[pos] == item:\n        return pos\n    else:\n        return -1\n\nlist = [1, 2, 4, 7, 8]\nprint(binary_search(list, 2))  # Outputs 1", "category": "Python"}, {"instruction": "Create a program in Go that will take an array of integers and return the smallest number.", "input": "", "output": "func min(numbers []int) int {\n\tmin := numbers[0]\n\tfor _, number := range numbers {\n\t\tif min > number {\n\t\t\tmin = number\n\t\t}\n\t}\n\treturn min \n}", "category": "Python"}, {"instruction": "Suggest an algorithm in Python that will detect an anomaly in time-series data.", "input": "", "output": "We can use Gaussian Mixture Models to detect anomalies in time-series data. This method takes the time-series data as input and trains a model using the data. The model defines a probability distribution for the time-series data, and the anomalies are detected as those data points which have a low probability of occurring according to the distribution.", "category": "Python"}, {"instruction": "Use Django to create a basic website for a restaurant.", "input": "", "output": "We can use Django to create a basic website for a restaurant by following the steps below: \n\n1. Design a template for the website using HTML and CSS\n2. Create a Django project with the basic layout as given by the template\n3. Create views that will be used to render different pages (eg. home page, menu page, contact page, etc.)\n4. Create models in the Django project which will store information related to the restaurant, such as menu items, pricing, opening times, etc.\n5. Create URLs for each of the views\n6. Add the necessary code to link the models and views together\n7. Create a form for customers to submit their queries\n8. Add necessary functionality to the website, such as a search feature and ordering system", "category": "Python"}, {"instruction": "Train a model to classify text into two categories, positive and negative.", "input": "", "output": "import nltk\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# tokenize text\ndef tokenize(text):\n    tokens = nltk.word_tokenize(text)\n    return tokens\n\n# build a Bag of Words model\ncountVec = CountVectorizer(tokenizer=tokenize)\n\n# load training data\ntrainData, trainLabels = loadTrainingData()\n\n# Learn a vocabulary dictionary\ncountVec.fit(trainData)\n\n# transform training data into a document-term matrix\nX_train = countVec.transform(trainData)\n\n# split data into training and validation sets\nX_train, X_valid, y_train, y_valid = train_test_split(X_train, trainLabels, test_size = 0.2, random_state = 0)\n\n# train a Multinomial Naive Bayes classifier \nclf = MultinomialNB().fit(X_train, y_train)\n\n# predict sentiment on validation data\npredicted = clf.predict(X_valid)", "category": "Python"}, {"instruction": "Implement a function which will take two strings as input and reverse their order while maintaining the same character at each index.", "input": "s1 = \"hello\"\ns2 = \"world\"", "output": "def reverse_string_order(s1, s2):\n    result = \"\"\n    for i in range(len(s1)):\n        result += s2[i] + s1[i]\n    return result", "category": "Python"}, {"instruction": "Design a function that takes in an integer and prints the multiplication table till that input number.", "input": "", "output": "def print_multiplication_table(n):\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            print(i*j, end=\" \")\n        print()\n\nprint_multiplication_table(n)", "category": "Python"}, {"instruction": "Modify the code provided so it prints the first 10 prime numbers.", "input": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True", "output": "def is_prime(n): \n    if n == 1: \n        return False\n    for i in range(2, n): \n        if n % i == 0: \n            return False\n    return True\n\ndef print_primes():\n    count = 0\n    number = 2\n    while(count != 10):\n        if is_prime(number):\n            print(number)\n            count += 1\n        number += 1\n\nprint_primes()", "category": "Python"}, {"instruction": "Change the response to now fulfill the following purpose", "input": "Find the number of ones in a binary number 101011", "output": "def find_ones(n):\n    count = 0\n    while n > 0:\n        if n % 10 == 1:\n            count += 1\n        n //= 10        \n    return count", "category": "Python"}, {"instruction": "Generate a program that finds the sum of all natural numbers from 0 to n", "input": "", "output": "def find_sum(n): \n    sum = 0\n    for i in range(n+1): \n        sum += i \n    return sum", "category": "Python"}, {"instruction": "Give an example of the binary search algorithm", "input": "", "output": "def binary_search(arr, target): \n    low = 0\n    high = len(arr) - 1\n  \n    while low <= high: \n  \n        mid = (low+high) // 2\n  \n        # Check if target is present at mid \n        if arr[mid] == target: \n            return mid \n  \n        # If target is greater than mid, ignore left half \n        elif arr[mid] < target: \n            low = mid + 1\n  \n        # If target is smaller than mid, ignore right half \n        else: \n            high = mid - 1\n  \n    # If we reach here, then the element was not present \n    return -1", "category": "Python"}, {"instruction": "Generate code to remove duplicate characters from a string.", "input": "string = \"google\"", "output": "def remove_duplicates(string):\n    res = \"\" \n    for i in string: \n        if i not in res: \n            res = res + i\n    return res", "category": "Python"}, {"instruction": "Replace each character of a string with the next character in alphabetic order.", "input": "", "output": "def replace_chars(s): \n    chars = list(s) \n    res = \"\" \n    for char in chars: \n        res += chr(ord(char) + 1) \n  \n    return res", "category": "Python"}, {"instruction": "Replace the comments in the code with the proper Python code.", "input": "#TODO: get the date from the user\n#TODO: get the month from the user", "output": "date = int(input(\"Enter the date: \"))\nmonth = int(input(\"Enter the month: \"))", "category": "Python"}, {"instruction": "Program a function to remove all the even numbers from an array", "input": "", "output": "def remove_even(arr):\n    new_arr = []\n    for num in arr:\n        if num % 2 != 0:\n            new_arr.append(num)\n    return new_arr", "category": "Python"}, {"instruction": "Create a function to output true if the given string is a palindrome, otherwise output false.", "input": "string = \"racecar\"", "output": "def is_palindrome(str):\n    \"\"\"Checks if a given string is a palindrome.\n    \n    Parameters:\n    str (str): string to be tested\n    \"\"\"\n    str = str.lower()\n    return str[::-1] == str\n\nif __name__ == '__main__':\n    string = \"racecar\"\n    print(is_palindrome(string))", "category": "Python"}, {"instruction": "Change the code to make it an Expression Statement in Python", "input": "x + 1", "output": "print(x + 1)", "category": "Python"}, {"instruction": "Use nltk package in Python and remove stopwords from the given text.", "input": "Text: \"I am wondering what is the best way to learn English.\"", "output": "import nltk\nfrom nltk.corpus import stopwords\n\ntxt = \"I am wondering what is the best way to learn English.\"\nwords = nltk.word_tokenize(txt)\nfiltered_words = [w for w in words if not w in stopwords.words('english')] \n  \nprint(filtered_words)", "category": "Python"}, {"instruction": "Visit the API documentation and create code to make a POST request using Python.", "input": "", "output": "import requests \n  \ndata = {'name': 'John Doe', 'age': '25'} \n  \nheaders = {'Content-type': 'application/x-www-form-urlencoded', 'Accept': 'text/plain'} \n  \nresponse = requests.post('https://example.com/api/v1/data', data=data, headers=headers)", "category": "Python"}, {"instruction": "Code a function in Python to calculate the nth value of the Fibonacci sequence.", "input": "", "output": "def fibonacci(n): \n    if n <= 0: \n        return 0 \n    elif n == 1: \n        return 1\n    else: \n        return fibonacci(n-1) + fibonacci(n-2)", "category": "Python"}, {"instruction": "Take the following array as an argument and output the sum of all the numbers in the array using Python.", "input": "[1, 2, 3, 4, 5]", "output": "def sum_of_array(arr):\n  return sum(arr)\n\narray = [1, 2, 3, 4, 5]\nresult = sum_of_array(array)\n\nprint(resutl) # Output: 15", "category": "Python"}, {"instruction": "Suggest a way to convert the following XML code into JSON in Python.", "input": "<data>\n  <records> \n  \t<record name=\"John Smith\" age=\"27\">\n   \t\t<address>123 Main Street</address>\n   \t</record>\n    <record name=\"Jane Smith\" age=\"18\">\n    \t<address>167 King Avenue</address>\n    </record>\n  </records>\n</data>", "output": "import json \nimport xmltodict \n  \nxml_data = \"\"\"\n<data> \n  <records> \n    <record name=\"John Smith\" age=\"27\"> \n      <address>123 Main Street</address> \n    </record> \n    <record name=\"Jane Smith\" age=\"18\"> \n      <address>167 King Avenue</address> \n    </record> \n  </records>\n</data> \n\"\"\"\n  \nxml_dict = xmltodict.parse(xml_data)  \njson_data = json.dumps(xml_dict) \nprint(json_data)", "category": "Python"}, {"instruction": "Create an algorithm to find the longest common substring from two given strings.", "input": "String1: 'Hello World', String2: 'Hey World'", "output": "def longest_common_substring(s1, s2): \n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))] \n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)): \n        for y in range(1, 1 + len(s2)): \n            if s1[x - 1] == s2[y - 1]: \n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else: \n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\nprint(longest_common_substring('Hello World', 'Hey World'))  # Result: 'ello Wo'", "category": "Python"}, {"instruction": "Implement an algorithm to find all the sets of three numbers in an array which adds up to a given number.", "input": "Array: [2, 5, 8], Number: 10", "output": "def three_sum(array, number):\n   result_sets = [] \n   for i in range(len(array) - 2):\n       for j in range(i+1, len(array) - 1):\n           for k in range(j+1, len(array)):\n               if array[i] + array[j] + array[k] == number: \n                   result_sets.append([array[i], array[j], array[k]])\n   return result_sets \n\nprint(three_sum([2, 5, 8], 10)) # Result: [[2, 5, 8]]", "category": "Python"}, {"instruction": "Give an algorithm to delete a key, say k, from a binary search tree (BST).", "input": "", "output": "1. If the tree is empty, then return \n2. Find the key to be deleted in the tree and store it in a temporary node. \n3. Check if the key to be deleted has zero children or one child. \n    a. If the key has one child, then copy the child to the temporary node and delete the key. \n    b. If the key has two children, then find inorder successor of the key, copy it to the temporary node and delete the key.\n4. Free the memory occupied by the temporary node.", "category": "Python"}, {"instruction": "Create a Python 3 script that prints out the total number of days in the current month.", "input": "", "output": "import calendar\n\nprint(calendar.monthrange(2020, 11)[1])", "category": "Python"}, {"instruction": "Edit the following code so that it prints the first odd number in a given list.", "input": "nums = [2, 3, 4, 5, 6]", "output": "for num in nums:\n    if num % 2 == 1:\n        print(num)\n        break", "category": "Python"}, {"instruction": "Build a web scraper in Python to fetch the restaurant details from the website.", "input": "<uri of the website>", "output": "import requests \nfrom bs4 import BeautifulSoup \n  \npage = requests.get(<uri of website>) \nsoup = BeautifulSoup(page.content, 'html.parser') \n  \nrests = soup.find_all('div', class_='restaurant-item')\n\n# Parse the details of restaurants one by one\nfor rest in rests:  \n    name = rest.find('div', class_='restaurant-name') \n    cuisine = rest.find('li', class_='cuisine-list-item') \n    location = rest.find('li', class_='restaurant-location') \n    rating = rest.find('span', class_='star-rating-text') \n      \n    # Print details of restaurant \n    print(name.text, cuisine.text, location.text, rating.text)", "category": "Python"}, {"instruction": "Describe the working of a set in Python.", "input": "", "output": "A set in Python is an unordered collection of unique elements. It is an efficient data structure which provides a variety of operations such as membership testing, intersection, union and difference. Sets in Python do not allow duplicate elements and also do not maintain any particular order of the elements. Sets are mutable meaning that elements can be added or removed from them.", "category": "Python"}, {"instruction": "Generate a list comprehension in Python to get the cube of all the numbers between 1 to 10", "input": "", "output": "cubes_list = [x**3 for x in range(1, 11)]", "category": "Python"}, {"instruction": "Create a Python class that processes a string of text", "input": "String = \"Hello World\"", "output": "class StringProcessor:\n    def __init__(self, String):\n        self.string = String\n\n    def processString(self):\n        myString = \"\"\n        for char in self.string:\n            if char.isalnum():\n                myString += char.lower()\n        return myString", "category": "Python"}, {"instruction": "Create a sorting algorithm in Python that will sort an array of numbers in ascending order", "input": "[3, 1, 5, 2, 4, 6]", "output": "def sort_nums_asc(arr):\n    for i in range(len(arr)):\n        lowest_value_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[lowest_value_index]:\n                lowest_value_index = j\n        arr[i], arr[lowest_value_index] = arr[lowest_value_index], arr[i]\n    return arr", "category": "Python"}, {"instruction": "Explain the principle of dynamic programming.", "input": "", "output": "Dynamic programming is a technique for solving complex problems by breaking them down into smaller subproblems. The subproblems are solved and stored in a table, which is reused to solve future subproblems. This technique allows for efficient solutions regardless of the complexity of the problem, as it exploits the overlapping subproblems property to reduce time complexity.", "category": "Python"}, {"instruction": "You are given two strings, A and B. Write a function to delete the characters in A that also appear in B.", "input": "A = 'abcbbdef'\nB = 'abcdc'", "output": "def delete(A, B):\n    for i in B:\n        if i in A:\n            A = A.replace(i, '')\n    return A\n\ndelete(A, B) # Output: 'bdef'", "category": "Python"}, {"instruction": "What data structure can you use to store a set of unique values?", "input": "", "output": "A set is a data structure that stores a collection of unique values. A set is efficient for checking if a particular value exists in the collection, as the existence of the value can be checked in constant time.", "category": "Python"}, {"instruction": "Write a function in Python that takes an integer as an input and prints the number of digits in the integer.", "input": "num = 1234", "output": "def countDigits(num):\n    count = 0\n    while(num > 0):\n        num = num//10\n        count += 1\n    return count\n\nprint(countDigits(num)) # Output: 4", "category": "Python"}, {"instruction": "What is a hashmap, and what is it used for?", "input": "", "output": "A hashmap (also known as a dictionary or associative array) is a data structure that stores key-value pairs. It is used to store and retrieve information using a keyword or search term as the key. The key can then be used to quickly fetch the associated value from the hashmap. This makes hashmaps a powerful tool for storing and accessing large amounts of data efficiently.", "category": "Python"}, {"instruction": "Create a Python function that takes in a time string in the format hh:mm:ss and returns the time in seconds.", "input": "time_string = '01:10:30'", "output": "def time_in_seconds(time_string):\n    hour, minutes, seconds = map(int, time_string.split(':'))\n    return second + minutes * 60 + hour * 3600\ntime_in_seconds(time_string) # 4290", "category": "Python"}, {"instruction": "What is the definition of polymorphism in programming?", "input": "", "output": "Polymorphism in programming is a principle allowing the same code to be used for objects of different types, or for a given object to behave differently in different contexts. Polymorphism is an essential element of object-oriented programming, as it allows for code reusability, among other benefits. Polymorphism is achieved in programming by using inheritance and abstraction, along with virtual functions and templates. Examples of polymorphism include the various forms of overloading and overriding, and type punning.", "category": "Python"}, {"instruction": "Create an array of length n, containing all even numbers starting from 0.", "input": "", "output": "def create_array(n):\n    arr = []\n    for i in range(0, n, 2):\n        arr.append(i)\n    return arr", "category": "Python"}, {"instruction": "Given a JSON object, encode it using Base64.", "input": "{\n\"name\":\"John Doe\",\n\"age\":25\n}", "output": "import base64\n\njson_object = '{\"name\":\"John Doe\",\"age\":25}'\nencoded_object = base64.b64encode(bytes(json_object, 'utf-8'))\nprint(encoded_object)", "category": "Python"}, {"instruction": "Develop a program to spell a given word.", "input": "\"Hello\"", "output": "def spellWord(word):\n    words = list(word)\n    for i in range(len(words)):\n        print(words[i])", "category": "Python"}, {"instruction": "Write a Python program to remove the nth index character from a nonempty string.", "input": "var_str = Python, n = 0", "output": "def remove_character(var_str, n):\n  first_part = var_str[:n] \n  last_part = var_str[n+1:]\n  return first_part + last_part\n\nprint(remove_character('Python', 0))\n\nOutput: ython", "category": "Python"}, {"instruction": "Change the code to make it a valid Python program.", "input": "x = \"hello world", "output": "x = \"hello world\"", "category": "Python"}, {"instruction": "What data type does the output of this Python code have?", "input": "x = 5", "output": "integer", "category": "Python"}, {"instruction": "Create a Python class to hold a student's information: name, age and major.", "input": "", "output": "class Student:\n def __init__(self, name, age, major):\n self.name = name\n self.age = age\n self.major = major\n\ndef get_name(self):\n return self.name\n\ndef get_age(self):\n return self.age\n\ndef get_major(self):\n return self.major", "category": "Python"}, {"instruction": "Create a program to split the given string on a specific character.", "input": "String: \"A/B/C/D\"\nCharacter: \"/\"", "output": "def split_string(string, character):\n    return string.split(character)\n    \nif __name__ == '__main__':\n    string = \"A/B/C/D\"\n    character = \"/\"\n    print(split_string(string, character)) # outputs ['A', 'B', 'C', 'D']", "category": "Python"}, {"instruction": "Generate all combinations of the string \"abcd\".", "input": "", "output": "def generate_combinations(string):\n    result = []\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            result.append(string[i:j])\n    return result\n\nif __name__ == '__main__':\n    string = \"abcd\"\n    print(generate_combinations(string)) # outputs ['a', 'ab', 'abc', 'abcd', 'b', 'bc', 'bcd', 'c', 'cd', 'd']", "category": "Python"}, {"instruction": "Explain what is the purpose of a classifier model in machine learning", "input": "", "output": "The purpose of a classifier model in machine learning is to predict the class or category of an input data point. A classifier acts as a decision boundary between different categories of data points. It takes a set of input features, applies a set of mathematical operations to them, and uses them to make a prediction about the class of the input data point.", "category": "Python"}, {"instruction": "Given a list of integers, write a function to compute their average.", "input": "List of integers: [1, 2, 3, 4, 5]", "output": "def compute_average(lst): \n    total = 0\n    for num in lst: \n        total += num \n        \n    # calculate the average \n    avg = total / len(lst) \n    \n    return avg\n\n# Driver Code \nlst = [1, 2, 3, 4, 5] \nprint(\"Average of the list =\", round(compute_average(lst), 2))", "category": "Python"}, {"instruction": "Create a function that takes in two strings and determines of the strings are anagrams", "input": "String 1: \"spite\"\nString 2: \"pists\"", "output": "def is_anagram(str1, str2): \n    # convert the strings to lowercase \n    str1 = str1.lower() \n    str2 = str2.lower() \n\n    # sorting both the strings \n    s1 = sorted(str1) \n    s2 = sorted(str2) \n\n    if len(s1) != len(s2): \n        return False\n\n    # compare character by character \n    for i in range(len(s1)): \n        if s1[i] != s2[i]: \n            return False\n    return True\n\n# Driver code \nif is_anagram(\"spite\", \"pists\"):\n    print(\"Strings are anagrams\")\nelse:\n    print(\"Strings are not anagrams\")", "category": "Python"}, {"instruction": "Rewrite this code into Python.", "input": "ArrayList<Integer> arr = new ArrayList<>();\nfor (int i = 0; i < 10; i++) {\n    arr.add(i);\n}\n\nint sum = 0;\nfor(int num : arr){\n    sum += num;\n}", "output": "arr = []\nfor i in range(10):\n    arr.append(i)\n\nsum = 0\nfor num in arr:\n    sum += num", "category": "Python"}, {"instruction": "Find a way to calculate the power of a number without using * or **", "input": "base = 3\nexponent = 4", "output": "def power(base, exponent): \n    result = 1\n    for _ in range(exponent):\n        result *= base \n    return result", "category": "Python"}, {"instruction": "Create a function that reverses a given string without using the built-in parity.", "input": "str = 'I am here for the coding challenge\"", "output": "def reverse_string_without_parity(str):\n  # Create empty string \n  reversed_str = \"\" \n  # Iterate through the input string in the reverse order\n  for i in range(len(str)-1,-1,-1): \n    reversed_str += str[i] \n  return reversed_str", "category": "Python"}, {"instruction": "Edit the following code so that it prints out all powers of 2 up to 2^n", "input": "n = 5", "output": "def power_of_2(n):\n    result = 1\n    for i in range(n):\n        print(result)\n        result *= 2", "category": "Python"}, {"instruction": "Write a function to find the smallest subarray with a given sum.", "input": "arr = [3, 4, 5, 6, 7], sum = 11", "output": "def smallest_subarray_sum(arr, sum):\n\n    start = 0\n    end = 1\n    min_length = float('inf')\n    current_sum = arr[start]\n    while(end < len(arr)):\n        while(current_sum < sum and end < len(arr)):\n            current_sum += arr[end]\n            end += 1\n\n        while(start < end and current_sum >= sum):\n            min_length = min(min_length, end-start)\n            current_sum -= arr[start]\n            start += 1\n    \n    return min_length", "category": "Python"}, {"instruction": "Find a way to get the size of a linked list without traversing it.", "input": "head: 1 -> 2 -> 3 -> 4 -> 5 -> null", "output": "def get_list_size(head):\n    count = 0\n    temp = head\n    while(temp):\n        count += 1\n        temp = temp.next\n    return count", "category": "Python"}, {"instruction": "Implement a method that reverses a linked list", "input": "head = 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> null", "output": "// A linked list node \nclass Node: \n    # Constructor to create a new node \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n\n# Function to reverse the linked list  \ndef reverse(head): \n    prev = None\n    current = head\n    while(current is not None): \n        next = current.next\n        current.next = prev \n        prev = current \n        current = next\n    head = prev \n    return head", "category": "Python"}, {"instruction": "Find a way to randomly swap two elements of an array.", "input": "[1, 2, 3, 4, 5]", "output": "import random \n# Function to swap two elements \n# in a list at positions i and j  \ndef swap(arr, i, j): \n    arr[i], arr[j] = arr[j], arr[i] \n\n# Function to generate a random \n# permutation of arr[]  \ndef randomize ( arr, n ) : \n    # Start from the last element and swap \n    # one by one. We don't need to run for\n    # the first element that's why i > 0 \n    for i in range(n-1,0,-1): \n        # Pick a random index from 0\n        # to i \n        j = random.randint(0,i+1) \n        # Swap arr[i] with the element \n        # at random index \n        swap(arr, i, j)", "category": "Python"}, {"instruction": "Modify the following code so that it takes a string as a parameter, reverses it and prints out the reversed string.", "input": "str = \"Hello World!\"", "output": "def reverse_string(str):\n  reverse = \"\" \n  # Traverse through each letter of the input string \n  for i in range(len(str) - 1, -1, -1): \n    reverse = reverse + str[i] \n  print(reverse)", "category": "Python"}, {"instruction": "Edit the given code to ensure it outputs appropriate messages for successful and unsuccessful output.", "input": "def handleInput(name):\n  if len(name) > 0:\n    print('Hello, ' + name)", "output": "def handleInput(name):\n    if len(name) > 0:\n        print('Hello, ' + name)\n    else:\n        print('No name provided.')", "category": "Python"}, {"instruction": "You are given a list of numbers. Count how many of them are prime numbers.", "input": "[1,2,3,4,5,6,7]", "output": "def count_primes(numbers):\n    count = 0\n    for number in numbers:\n        if is_prime(number):\n            count += 1\n    return count\n \ndef is_prime(number):\n    if number <= 1:\n        return False\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Get all permutations of string.", "input": "string = \"abc\"", "output": "from itertools import permutations \n  \ndef permutations_string(string):\n    return list(permutations(string))\n\npermutations_string(\"abc\")\n\nOutput: [('a', 'b', 'c'), ('a', 'c', 'b'), ('b', 'a', 'c'), ('b', 'c', 'a'), ('c', 'a', 'b'), ('c', 'b', 'a')]", "category": "Python"}, {"instruction": "Given a number n, print \u201cHello\u201d n times.", "input": "n = 5", "output": "def print_hello(n):\n    for i in range (n):\n        print(\"Hello\")\n\nprint_hello(5)\n\nOutput: \nHello \nHello \nHello \nHello \nHello", "category": "Python"}, {"instruction": "Determine the longest word in a given string.", "input": "sentence = \"I am Python Programmer\"", "output": "def longest_word(sentence):\n    words = sentence.split()\n    max_len = len(words[0])\n     \n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n     \n    return max_word\n \nprint(longest_word('I am Python Programmer'))\n\nOutput: Programmer", "category": "Python"}, {"instruction": "Iterate over a list and count the number of occurrences of each item.", "input": "list1 = [10, 20, 30, 10, 10, 40, 10]", "output": "def count_instances(list1):\n    count_dict = dict() \n\n    for item in list1: \n        if (item in count_dict): \n            count_dict[item] += 1\n        else: \n            count_dict[item] = 1\n   \n    for key, value in count_dict.items(): \n        print(f\"{key} : {value}\") \n  \ncount_instances(list1)\n\nOutput: 10 : 4, 20 : 1, 30 : 1, 40 : 1", "category": "Python"}, {"instruction": "Count how many words are in a string and output the count.", "input": "string = \"Hello world!\"", "output": "def count_words(str):\n    \"\"\"Counts how many words are in a string.\n    \n    Parameters:\n    str (str): string to be counted\n    \"\"\"\n    return len(str.split())\n\nif __name__ == '__main__':\n    string = \"Hello world!\"\n    print(count_words(string))", "category": "Python"}, {"instruction": "Rewrite the program to get the same output", "input": "def find_sum(x):\n   sum = 0\n   for i in range(1,x):\n      if i % 3 == 0 or i % 5 == 0:\n        sum += i\n   return sum", "output": "def find_sum(x):\n    sum = 0\n    for i in range(1, x):\n        if i % 3 == 0:\n            sum += i\n        elif i % 5 == 0:\n            sum += i\n    return sum", "category": "Python"}, {"instruction": "Create a program to determine if a number is divisible by another number", "input": "", "output": "def is_divisible(n, m):\n    if n % m == 0:\n        return True\n    return False", "category": "Python"}, {"instruction": "Write a code to encode a given body of text into base64", "input": "text=\"Hello World\"", "output": "import base64\ndef encode_base64(text):\n return base64.b64encode(text.encode()).decode()", "category": "Python"}, {"instruction": "Create a new array of integers which contains the sum of corresponding elements of two existing arrays.", "input": "arr1 = [1, 2, 3]\narr2 = [4, 5, 6]", "output": "arr1 = [1, 2, 3]\narr2 = [4, 5, 6]\n\n# Initialize new array\narr_sum = [0 for _ in range(len(arr1))]\n\n# Add the values of both arrays\nfor i in range(len(arr1)):\n    arr_sum[i] = arr1[i] + arr2[i]\n\nprint(arr_sum)\n# Output: [5, 7, 9]", "category": "Python"}, {"instruction": "Write a web scraper in Python to collect the data from the top 1000 IMDB movies", "input": "", "output": "import requests\nfrom bs4 import BeautifulSoup\n \nurl = 'https://www.imdb.com/search/title/?title_type=feature&sort=num_votes,desc&view=simple&count=250&start=1'\nhtml_doc = requests.get(url).text\nsoup = BeautifulSoup(html_doc, 'html.parser')\n\n# extract data from HTML table\ntable = soup.find('table', attrs={'class': 'chart'})\nmovies = []\nfor row in table.find_all('tr')[1:]:\n    title = row.find('td', style='').get_text()\n    rating = row.find('td', class_='ratingColumn imdbRating').get_text().strip()\n    movies.append({'title': title, 'rating': rating})\n\nprint(movies)", "category": "Python"}, {"instruction": "Develop a Python code to extract all words from a sentence that begin with a specific letter.", "input": "sentence = \"I love coding in Python\"\nletter = \"P\"", "output": "sentence = \"I love coding in Python\"\nletter = \"P\"\n\nwords_starting_with_P = [word for word in sentence.split() if word.startswith(letter)]\n\nprint(words_starting_with_P)\n# Output: ['Python']", "category": "Python"}, {"instruction": "Describe how a linked list data structure works in pseudo code.", "input": "", "output": "A linked list is a linear data structure that consists of a sequence of elements, each element containing a pointer to the next element in the list. Some implementations may also contain a pointer to the previous element in the list. Pseudo-code would look like:\n\nSTART \nClass Node \n   int data \n   Node next \nEND Class \n\nNode head  // the start of the list \n\n// traverse the list \nwhile (current != NULL) {\n   // process node \n   current = current.next \n}\n\nEND", "category": "Python"}, {"instruction": "Find the minimum value from a given array.", "input": "[3, -2, 4, 7]", "output": "def findMin(arr):\n    current_min = arr[0]\n    for num in arr:\n        if num < current_min:\n            current_min = num\n    return current_min", "category": "Python"}, {"instruction": "Create a machine learning model in Python using the given data that classifies the data into either 'positive' or 'negative'.", "input": "<contents of the dataset>, data type: binary classification", "output": "# Load the dataset\nX, y = <contents of the dataset>\n\n# Split the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Train the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\n\nprint(\"Accuracy score: \", accuracy)", "category": "Python"}, {"instruction": "Create an algorithm that iterates through a given string and returns the number of alphabets present in the string.", "input": "\"abracadabra\"", "output": "def count_alphabets(string):\n  count = 0\n  for i in range(len(string)):\n    if string[i].isalpha():\n      count += 1\n  return count", "category": "Python"}, {"instruction": "Design a function which prints all the permutations of a given list of numbers.", "input": "", "output": "def permutations(nums):\n    if len(nums) == 1:\n        return [nums]\n    res = []\n    for i in range(len(nums)):\n        for p in permutations(nums[:i] + nums[i+1:]):\n            res.append([nums[i]] + p)\n    return res\n\nif __name__ == '__main__':\n    nums = [1, 2, 3]\n    print(permutations(nums)) # [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]", "category": "Python"}, {"instruction": "Design a function which takes two numbers as input and returns the largest one as output.", "input": "", "output": "def largest_of_two(num1, num2):\n  if num1 > num2:\n    return num1\n  else:\n    return num2", "category": "Python"}, {"instruction": "Modify the following code to compute the sum of squares of the numbers from k to n.", "input": "def sum(k, n):\n    sum = 0\n    for i in range(k, n+1):\n        sum += i\n    return sum", "output": "def sum_squares(k, n):\n    sum = 0\n    for i in range(k, n+1):\n        sum += i**2\n    return sum", "category": "Python"}, {"instruction": "Debug the following function.", "input": "def f(n):\n    i = 0\n    while i < n:\n        i+=1\n        if i % 5 == 0:\n        print(i)", "output": "def f(n): \n    i = 0\n    while i < n:\n        i+=1\n\t\t# Fixed missing indentation\n        if i % 5 == 0:\n            print(i)\n\t\t# Added missing closing bracket after print() statement", "category": "Python"}, {"instruction": "Rewrite the following code snippet in Python to print out the word \"Hello\":\n\nprint(\"Hello\")", "input": "", "output": "print(\"Hello\")", "category": "Python"}, {"instruction": "Analyze the following code and explain what it does:\n\ndef func(n):\n    if n == 0:\n        return 0\n    else:\n        return n + func(n - 1)", "input": "", "output": "This code implements a recursive function to compute the sum of numbers from 1 to n. Specifically, the base case is when n is 0, and the recursive case is when n is greater than 0. In the recursive case, the function will call itself with n-1 as the argument, and then adds n to the result of that call. Thus, each recursive call will add one more number until it reaches the base case. This is known as the base case and recursion principle. The result of the function will be the sum of the numbers from 1 to n.", "category": "Python"}, {"instruction": "Implement a for loop in Python to iterate through a given list of numbers.", "input": "[1, 2, 3, 4]", "output": "for num in [1, 2, 3, 4]:\n    print(num)", "category": "Python"}, {"instruction": "Identify the bug in the following python code:\n\ndef foo(x):\n    x[0] = 2", "input": "[0, 1, 2]", "output": "This code is trying to modify an immutable object (a tuple) as it is attempting to assign a value to the first element in a tuple. The correct way to do this is with a list, not a tuple. The code should be changed to:\n\ndef foo(x):\n    x[0] = 2\n    \nwhere the input x is a list instead of a tuple.", "category": "Python"}, {"instruction": "Convert the following paragraph from English to Python code:\n\n\"Given a list of numbers, find the largest number\".", "input": "", "output": "def find_largest(nums):\n    largest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n    return largest", "category": "Python"}, {"instruction": "Convert the following matrix into a list of lists in Python.", "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "list_of_lists = [[1,2,3], [4,5,6], [7,8,9]]", "category": "Python"}, {"instruction": "Create a class in Python named 'Circle' with a parameterized constructor to take the radius of the circle as input.", "input": "", "output": "class Circle():\n    def __init__(self, radius):\n        self.radius = radius", "category": "Python"}, {"instruction": "Explain why software design patterns are important in software development.", "input": "", "output": "Software design patterns are important because they allow developers to create extensible and maintainable software applications. Design patterns provide a way of reusing the same code and structure across multiple applications, while allowing the application to remain logically organized. This can reduce the amount of time it takes to develop and debug applications, as well as prevent bugs from arising due to unfamiliar code structures. Additionally, well-designed applications can be easier for new developers to understand and contribute to. Lastly, design patterns can help improve the overall organization and scalability of a codebase.", "category": "Python"}, {"instruction": "Suggest the best algorithm to reverse a string.", "input": "", "output": "# Algorithm to reverse a string\ndef reverse_string(s):\n# Create a result string\n result = \"\"\n # Iterate through the string in reverse order\n for i in range(len(s)-1, -1, -1):\n result += s[i]\nreturn result", "category": "Python"}, {"instruction": "Describe an algorithm to convert an array of numbers into an array of its squares.", "input": "", "output": "def calculate_squares(arr):\n result = []\n for num in arr:\n result.append(num ** 2)\n return result", "category": "Python"}, {"instruction": "Sort the list below using insertion sort in Python:", "input": "list = [1,12,1,4,8,10,13]", "output": "list = [1,1,4,8,10,12,13]\n\ndef insertion_sort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key\narr = [1,12,1,4,8,10,13]\ninsertion_sort(arr)\nprint (arr)", "category": "Python"}, {"instruction": "Identify the data type of the following Python expression:\n\n{\"name\": \"John\", \"age\": 40}", "input": "", "output": "This expression is a dictionary, which is a type of data structure in Python. A dictionary is a key-value pair, where the key is unique and the value can be a list of data items or a single item. In this example, the key is \"name\" and the value is \"John\", and the key is \"age\" and the value is 40.", "category": "Python"}, {"instruction": "Construct an object-oriented code for a Book class.", "input": "", "output": "class Book:\n    def __init__(self, title, author, year):\n        self.title = title\n        self.author = author\n        self.year = year\n        \n    def get_title(self):\n        return self.title\n    \n    def get_author(self):\n        return self.author\n    \n    def get_year(self):\n        return self.year\n    \n    def set_title(self, new_title):\n        self.title = new_title\n        \n    def set_author(self, new_author):\n        self.author = new_author\n        \n    def set_year(self, new_year):\n        self.year = new_year", "category": "Python"}, {"instruction": "Suggest a better algorithm for calculating Fibonacci sequence.", "input": "", "output": "A better algorithm for calculating Fibonacci sequence is the iterative method. Instead of making recursive calls, this method computes each element of the Fibonacci sequence in a loop. This method is more efficient and requires less memory overhead. The algorithm is as follows:\n\ndef iterative_fibonacci(n):\n    a = 0\n    b = 1\n    for i in range(1,n+1):\n        c = a + b\n        a = b\n        b = c\n    return a", "category": "Python"}, {"instruction": "Write a generic code for traversing a tree.", "input": "", "output": "def traverse_tree(root): \n  if root is None: \n    return\n\t\n  traverse_tree(root.left) \n  print(root.data) \n  traverse_tree(root.right)", "category": "Python"}, {"instruction": "Generate the Fibonacci sequence in a given range in Python.", "input": "n = 8", "output": "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \nFibonacci(n)", "category": "Python"}, {"instruction": "For a given programming language, list the data types supported by that language.", "input": "", "output": "In Java, the supported data types include primitive data types like int, float, char, as well as non-primitive types such as String, Array, List, Set, and Map.", "category": "Python"}, {"instruction": "Create a correlation heatmap in Python using a given dataset.", "input": "import pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame(np.random.randint(0,100,size=(100, 4)), columns=list('ABCD'))", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\n\ncorr = data.corr()\n\nsns.heatmap(corr, \n        xticklabels=corr.columns,\n        yticklabels=corr.columns)\nplt.show()", "category": "Python"}, {"instruction": "Provide a function to implement a Binary Tree traversal.", "input": "", "output": "def printTree(root): \n    \n    # Check if tree is empty\n    if root == None: \n        return\n    \n    # First print the root data\n    print(root.data, end=\" \")\n    \n    # First recur on left child\n    printTree(root.left)\n    \n    # the recur on right child\n    printTree(root.right)", "category": "Python"}, {"instruction": "Describe the working of a Recurrent Neural Network (RNN).", "input": "", "output": "A Recurrent Neural Network (RNN) is a type of artificial neural network that is widely used for natural language processing, dialogue systems, and time series prediction. RNNs have the ability to process data sequences, which gives them an advantage over traditional neural networks. This is done by using recurrent connections between the hidden layers of the network. In this type of network architecture, the outputs from the previous layer are used as inputs to the next layer. This allows the network to remember the context of the data sequentially, which makes it suitable for problems with a temporal component. RNNs can also be used to train the model to produce a sequence output by predicting the next item in the sequence.", "category": "Python"}, {"instruction": "How can you handle errors in Python?", "input": "", "output": "Python provides two ways to handle errors: \n\n1. The try and except statement, and \n2. The raise statement.\n\nThe try and except statement is used to catch and handle exceptions, while the raise statement is used to explicitly raise an exception.", "category": "Python"}, {"instruction": "Implement the bottom up cut rod algorithm in Python.", "input": "", "output": "def bottomUpCutRod(prices, n): \n \n    # Create an array of size n+1 \n    temp_array = [0 for i in range(n+1)] \n    for i in range(1, n+1): \n        tempval = -float('inf') \n        for j in range(i): \n            tempval = max(tempval, prices[j] + temp_array[i-j-1]) \n        temp_array[i] = tempval \n  \n    return temp_array[n]", "category": "Python"}, {"instruction": "Implement a class to implement a Huffman coding algorithm.", "input": "", "output": "class HuffmanCoding:\n \n    def __init__(self, inp_string):\n        self.inp_string = inp_string\n        self.string_length = len(inp_string)\n        self.frequency_table = self.get_frequency_table(inp_string)\n        self.huff_tree = self.build_huffman_tree(self.frequency_table)\n \n    def get_frequency_table(self, inp_string):\n        # Create dictionary to store frequencies\n        freq_table = {}\n        # Count frequency of characters in the string\n        for char in inp_string:\n            if char in freq_table:\n                freq_table[char] += 1\n            else:\n                freq_table[char] = 1\n        # Return the frequency table\n        return freq_table\n \n    def build_huffman_tree(self, frequency_table):\n        # Create a priority queue to store the trees \n        pq = PriorityQueue()\n        # Create a tree for each value\n        for value in frequency_table:\n            pq.put((frequency_table[value], Node(value)))\n        # Start the loop with two trees\n        while pq.qsize() > 1:\n            left_node = pq.get()\n            right_node = pq.get()\n            combined_freq = left_node[0] + right_node[0]\n            new_node = Node(left=left_node[1], right=right_node[1])\n            pq.put((combined_freq, new_node))\n        # Return the tree\n        return pq.get()[1]", "category": "Python"}, {"instruction": "Create a user-defined type in Python to store information about a person.", "input": "", "output": "class Person:\n    def __init__(self, firstname, lastname, age):\n        self.firstname = firstname\n        self.lastname = lastname\n        self.age = age\n\nperson1 = Person('John', 'Smith', 25)", "category": "Python"}, {"instruction": "Suggest one line of code that should be added to the following function to make it more efficient.", "input": "def search_prime_numbers(n):\n    for num in range(2, n + 1):\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            print(num)", "output": "def search_prime_numbers(n):\n    for num in range(2, n + 1):\n        if num > 2 and num % 2 == 0: // This line can be added to make the function more efficient by avoiding the check for even numbers greater than 2.\n            continue\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            print(num)", "category": "Python"}, {"instruction": "Suggest a data structure that can be used to store contacts information (name, email, phone number).", "input": "", "output": "A hash table can be used to store the contacts information as it provides a key-value mapping of the information. Keys can be either the name, email or phone number depending on the mapping pattern desired. A set or LinkedList can also be used for this purpose, as the information does not have any orders associated with it.", "category": "Python"}, {"instruction": "Suggest a method to search for a specified character in a string.", "input": "", "output": "One approach is to loop through each character in the string and check if it matches the character to be searched for. If it does, the index of the character can be returned, or a boolean indicating whether the character is present in the string or not can be returned. Another approach is to use built-in string functions such as .indexOf() or .includes() to search for the specified character.", "category": "Python"}, {"instruction": "Suggest an improvement to make the code more efficient.", "input": "a = [1,2,3,4,5]\nloop_count = len(a)\nwhile loop_count > 0:\n    print(loop_count)\n    loop_count -= 1", "output": "a = [1,2,3,4,5]\nfor number in a:\n    print(number) // Instead of looping through the number of items in 'a', loop through the items of 'a' directly.", "category": "Python"}, {"instruction": "Create a class that contains two methods: one to generate a random number between a given range, and one to create a list of \"n\" random numbers.", "input": "n = 10, min = 0, max = 100", "output": "class RandomNumberList:\n    def __init__(self):\n        self.numbers = []\n    \n    def generate_random(self, min, max):\n        return random.randint(min, max) \n    \n    def create_list(self, n, min, max):\n \u00a0 \u00a0# Generate a list of n random numbers between min and max\n \u00a0 \u00a0 \u00a0 \u00a0self.numbers = [self.generate_random(min, max) for _ in range(n)]\n        return self.numbers", "category": "Python"}, {"instruction": "Create a loop in Python to multiply each element of a list with 10.", "input": "lst = [1, 2, 3, 4, 5]", "output": "def multiply_list(lst):\n    for i in range(len(lst)):\n        lst[i] *= 10\n    return lst", "category": "Python"}, {"instruction": "Print the maximum element in a linked list.", "input": "head - [1, 3, 4, 10, 8]", "output": "def maximum(head): \n    max = head.data \n    while head is not None: \n        if max < head.data: \n            max = head.data \n        head = head.next\n    return max", "category": "Python"}, {"instruction": "Create a multi-dimensional array in Python.", "input": "", "output": "arr = [[1,2,3], [4,5,6], [7,8,9]]", "category": "Python"}, {"instruction": "Replace the placeholders in the following Python code snippet with appropriate values.", "input": "for x in range(__, __):\n    print(x)", "output": "for x in range(0, 10):\n    print(x)", "category": "Python"}, {"instruction": "Create a program to generate the n-th Fibonacci number.", "input": "", "output": "def fibonacci(n):\n    '''This function returns the n-th Fibonacci number.'''\n\n    if n == 0 or n == 1:\n        return n\n    \n    fib_n_1 = 0\n    fib_n_2 = 1\n\n    for i in range(2, n+1):\n        fib_n = fib_n_1 + fib_n_2\n        fib_n_1, fib_n_2 = fib_n_2, fib_n\n\n    return fib_n", "category": "Python"}, {"instruction": "Identify and correct the bug in the following program.", "input": "def square_numbers(lst):\n    lst_sq = []\n    lst_sq.append(lst[i] ** 2 for i in range(len(lst)))\n    return lst_sq", "output": "def square_numbers(lst):\n    lst_sq = []\n    for i in range(len(lst)):\n        lst_sq.append(lst[i] ** 2)\n    return lst_sq", "category": "Python"}, {"instruction": "Suggest a way of decoding a string encoded using Base64.", "input": "encoded_string = \"SGVsbG8gV29ybGQ=\"", "output": "import base64\n\ndef decodeBase64(encoded_string):\n    return base64.b64decode(encoded_string).decode('utf-8')\n\nprint(decodeBase64(encoded_string))\n# Output: Hello World", "category": "Python"}, {"instruction": "Suggest a way of encrypting text using a Caesar cipher.", "input": "plaintext = \"Hello World\"", "output": "def caesar_encrypt(plaintext, k):\n    ciphertext = \"\" \n  \n    # traverse text \n    for i in range(len(plaintext)): \n        char = plaintext[i] \n  \n        # Encrypt uppercase characters \n        if (char.isupper()): \n            ciphertext += chr((ord(char) + k-65) % 26 + 65) \n  \n        # Encrypt lowercase characters \n        else: \n            ciphertext += chr((ord(char) + k - 97) % 26 + 97) \n  \n    return ciphertext \n\nprint(caesar_encrypt(plaintext, 3))\n# Output: Khoor Zruog", "category": "Python"}, {"instruction": "Suggest a way of replacing all the vowels in a string with a star (*).", "input": "string = \"Hello World!\"", "output": "print(''.join([x if x not in 'aeiou' else '*' for x in string]))\n# Output: H*ll* W*rld!", "category": "Python"}, {"instruction": "Create a class in Python that creates an immutable list.", "input": "", "output": "class ImmutableList:\n    def __init__(self, list_values):\n        self._dict = dict()\n        for i, elem in enumerate(list_values):\n            self._dict[i] = elem\n    \n    def __getitem__(self, item):\n        return self._dict[item]\n    \n    def __len__(self):\n        return len(self._dict)", "category": "Python"}, {"instruction": "Suggest a completion to the following python code to print the square of a number.", "input": "number = 5\n\nprint(number)", "output": "number = 5\n\nprint(number*number) # Output: 25", "category": "Python"}, {"instruction": "Create a decision tree to classify if a given student's grade ranges from A to D.", "input": "", "output": "# Decision Tree\ndef classify_grades_decision_tree(grade):\n    if grade in range(90, 101): # A range\n        return 'A'\n    elif grade in range(80,90): # B range\n        return 'B'\n    elif grade in range(70,80): # C range\n        return 'C'\n    elif grade in range(60,70): # D range\n        return 'D'\n    else:\n        return 'Error: Grade not in range'\n\n# Driver code\n# Testing\nprint(classify_grades_decision_tree(87)) # Output: B", "category": "Python"}, {"instruction": "Using the given list of names, create a new set that contains only the names with length greater than 6.", "input": "names = [\"John\", \"Jacob\", \"Sophia\", \"Olivia\", \"Michael\"]", "output": "names = [\"John\", \"Jacob\", \"Sophia\", \"Olivia\", \"Michael\"]\n\nlong_names = {name for name in names if len(name) > 6}\nprint(long_names) # Output: {'Sophia', 'Olivia', 'Michael'}", "category": "Python"}, {"instruction": "Design a function in Python to automate the extraction of emails from a single HTML page.", "input": "<html>\n<body>\n Janice's email is janice@example.com, and Susie's is susie@example.com.\n </body>\n </html>", "output": "def extract_emails(html_page):\n emails = []\n soup = BeautifulSoup(html_page)\n for a in soup.find_all('a'):\n  if a.get('href') and (a.get('href').startswith('mailto:')):\n  emails.append(a.get('href')[7:])\n return emails\n\n# Usage \npage = '<html>\n <body>\n  Janice's email is janice@example.com, and Susie's is susie@example.com.\n </body>\n </html>'\n\nemails = extract_emails(page)\nprint(emails)\n# Output: ['janice@example.com', 'susie@example.com']", "category": "Python"}, {"instruction": "Flatten this nested list into a single list.", "input": "nested_list = [[1,2], [3,4], [5,6]]", "output": "import itertools\nflattened_list = list(itertools.chain.from_iterable(nested_list))\nprint(flattened_list)\n# Output: [1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Write a function in Python to sort this dictionary by values.", "input": "my_dict = {\"Jerry\": 10, \"Marcus\": 3, \"Hanna\": 5}", "output": "def sort_dict_by_values(d):\n    sorted_dict = dict(sorted(d.items(), key=lambda x: x[1])) \n    return sorted_dict\n\nprint(sort_dict_by_values(my_dict))\n# Output: {'Marcus': 3, 'Hanna': 5, 'Jerry': 10}", "category": "Python"}, {"instruction": "Find the longest palindromic substring of this string.", "input": "string = \"carrace\"", "output": "def longest_palindrome_substring(string):\n    n = len(string)\n    t = [[False for _ in range(n)] for _ in range(n)]  \n    max_length = 1\n    i = 0\n    while (i < n): \n        t[i][i] = True\n        i = i + 1\n    start = 0\n    i = 0\n    while i < n - 1: \n        if (string[i] == string[i + 1]): \n            t[i][i + 1] = True\n            start = i \n            max_length = 2\n        i = i + 1\n    k = 3\n    while k <= n: \n        i = 0\n        while i < (n - k + 1): \n            j = i + k - 1\n            if (t[i + 1][j - 1] and \n                    string[i] == string[j]): \n                t[i][j] = True\n                if (k > max_length): \n                    start = i \n                    max_length = k \n            i = i + 1\n        k = k + 1\n    longest_palindrome = string[start:start+max_length]\n    return longest_palindrome\n  \nprint(longest_palindrome_substring(string))\n# Output: carrac", "category": "Python"}, {"instruction": "Given a list of student records, write a Python code snippet to find all the students who scored above 80.", "input": "studentList = [ \n    {'name': 'John', 'score': 80},\n    {'name': 'Jane', 'score': 90},\n    {'name': 'Tom', 'score': 75},\n    {'name': 'Eric', 'score': 85}\n  ]", "output": "highScoringStudents = [student for student in studentList if student['score'] > 80]", "category": "Python"}, {"instruction": "Given an array of integers, find the longest subarray with total sum less than the given sum.", "input": "arr = [1, -2, 2, 4, 3], sum = 3", "output": "arr = [1, -2, 2, 4, 3]\nsum = 3\n\n# create an empty list to store the longest subarray\nlongest = []\n\n# loop through the array\nfor i in range(len(arr)):\n    # set the sum of current subarray to 0 \n    curr_sum = 0\n    # another loop to check if any subarray of the array\n    # has a sum less than the given sum\n    for j in range(i, len(arr)):\n        curr_sum += arr[j]\n        # if any subarray is found update the longest list\n        if curr_sum < sum:\n            longest = arr[i: j + 1]\n\nprint(\"The longest subarray with total sum less than the given sum is:\", longest)", "category": "Python"}, {"instruction": "Extract a character's count from a given string.", "input": "string = \"this is a sample string\"", "output": "def count_characters(string):\n    '''This function takes a string as argument and returns a dictionary\n       that contains the count of characters in the given string.''' \n    # create an empty dictionary\n    char_count = {}\n    # iterate over the characters and add to dictionary if not already present\n    for char in string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            # Increment the count if already present\n            char_count[char] += 1 \n    return char_count", "category": "Python"}, {"instruction": "Given an array of numbers, find the maximum product of any three numbers in the array.", "input": "arr = [2, 5, 6, 9, -2, -7, -1]", "output": "arr = [2, 5, 6, 9, -2, -7, -1]\n\n# create an empty list to store the products of all triplets\ntriplets = []\n\n# loop through the array\nfor i in range(len(arr)):\n    for j in range(i+1,len(arr)):\n        for k in range(j+1,len(arr)):\n            # calculate and append the product of each triplet to the list\n            triplets.append(arr[i]*arr[j]*arr[k])\n\n# get the maximum product from the list\nmax_product = max(triplets)\n\nprint(\"The maximum product of any three numbers in the array is:\", max_product)", "category": "Python"}, {"instruction": "Given a target number, find two numbers in the list whose sum is equal to the target number.", "input": "list = [2, 7, 11, 15], target = 9", "output": "list = [2, 7, 11, 15]\ntarget = 9\n\nfor i in range(0, len(list) - 1):\n    for j in range(i + 1, len(list)):\n        if list[i] + list[j] == target:\n            print('The two numbers in the list whose sum is equal to the target number are %d and %d' %(list[i], list[j]))", "category": "Python"}, {"instruction": "Generate a 4 by 4 multiplication table.", "input": "", "output": "for i in range(1, 5):\n    for j in range(1, 5):\n        print(i*j, end=\"\\t\")\n    print()\n\n# Output\n1\t2\t3\t4\t\n2\t4\t6\t8\t\n3\t6\t9\t12\t\n4\t8\t12\t16", "category": "Python"}, {"instruction": "Generate a 10 character random user password with at least one Upper Case letter, one lower case letter, one number, and one special character.", "input": "", "output": "import random\nimport string\n\ndef generate_password(length):\n    char_types = list(string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation)\n    password = []\n    for _ in range(length):\n        ch = random.choice(char_types)\n        while ch in password:\n            ch = random.choice(char_types)\n        password.append(ch)\n \n    return ''.join(password)\n\npassword = generate_password(10)\nprint(password) # e.W8.vHc2e", "category": "Python"}, {"instruction": "Create a class called \"Computer\" with two attributes \"name\" and \"model\" and two methods \"get_name\" and \"get_model\".", "input": "", "output": "class Computer:\n    def __init__(self, name, model):\n        self.name = name\n        self.model = model\n    \n    def get_name(self):\n        return self.name\n    \n    def get_model(self):\n        return self.model", "category": "Python"}, {"instruction": "Implement a sorting algorithm which takes an array of integers as input and sorts it in ascending order.", "input": "[34, 19, 42, -9, 2018, 0, 105]", "output": "def sorting_algorithm(arr):\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n\n# Test\narr = [34, 19, 42, -9, 2018, 0, 105]\nprint(sorting_algorithm(arr)) # [-9, 0, 19, 34, 42, 105, 2018]", "category": "Python"}, {"instruction": "Using Numpy, create an array of size 10 and fill it with random integer numbers between 0 and 9.", "input": "", "output": "import numpy as np\n\narr = np.random.randint(low=0, high=10, size=10)", "category": "Python"}, {"instruction": "Take an array of strings and a character and return an array containing only the strings containing the given character.", "input": "", "output": "def filter_by_character(str_arr, char):\n    filtered_arr = []\n    for string in str_arr:\n        if char in string:\n            filtered_arr.append(string)\n    return filtered_arr", "category": "Python"}, {"instruction": "Create a function that takes a matrix (MxN array) and returns the transposed matrix.", "input": "", "output": "def transpose(matrix):\n    tr_matrix = [[None for i in range(len(matrix))] for j in range(len(matrix[0]))]\n    for i, row in enumerate(matrix):\n        for j, col in enumerate(row):\n            tr_matrix[j][i] = col\n    return tr_matrix", "category": "Python"}, {"instruction": "Output the longest consecutive character string in a given string.", "input": "", "output": "def longest_consecutive_str(s):\n    longest_str = \"\"\n    cur_str = \"\"\n\n    for char in s:\n        if not cur_str or char == cur_str[-1]:\n            cur_str += char\n        else:\n            if len(cur_str) > len(longest_str):\n                longest_str = cur_str\n            cur_str = char\n\n    if len(cur_str) > len(longest_str):\n            longest_str = cur_str\n\n    return longest_str", "category": "Python"}, {"instruction": "Take an array of strings and return a new array containing only the strings with the longest length.", "input": "", "output": "def longest_strings(str_arr):\n    longest = 0\n    strings = []\n    for string in str_arr:\n        if len(string) > longest:\n            strings = [string]\n            longest = len(string)\n        elif len(string) == longest:\n            strings.append(string)\n    return strings", "category": "Python"}, {"instruction": "Compile a function that checks if a number is prime. Output true if prime, false if not.", "input": "", "output": "def is_prime(num):\n    # form 2 to num-1\n    for i in range(2, num):\n        # percentage to check, output False if divisible by any number\n        if num % i == 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Take an array of integers and return true if there is a triplet whose sum is equals to the given target.", "input": "arr = [1, 4, 45, 6, 10, -8], target = 16", "output": "def find_triplet_sum(arr, target):\n    arr.sort()\n    for i in range(0, len(arr)-2):\n        left = i + 1\n        right = len(arr) - 1\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n\n            if curr_sum == target:\n                return True \n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False", "category": "Python"}, {"instruction": "Output the below tree structure in Python.", "input": "", "output": "print('  *  ')\nprint(' *** ')\nprint('*****')", "category": "Python"}, {"instruction": "Write a code to decrypt a given cipher text using the Caesar cipher", "input": "cipher_text=\"dfwlrq\"", "output": "def decrypt_caesar_cipher(cipher_text):\n alphabet=\"abcdefghijklmnopqrstuvwxyz\"\n output=\"\"\n for char in cipher_text:\n   i=(alphabet.index(char)-3)%26\n   output+=alphabet[i]\n return output", "category": "Python"}, {"instruction": "Write a code to determine if a given list contains a particular element", "input": "nums=[1,2,3,4]", "output": "def contains(nums, element):\n return element in nums", "category": "Python"}, {"instruction": "Write a Python script which checks if an input string is a palindrome.", "input": "", "output": "def is_palindrome(input_string):\n    input_string = input_string.lower()\n    if len(input_string) == 0:\n        return False\n    if len(input_string) == 1:\n        return True\n\n    if input_string[0] == input_string[-1]:\n        return is_palindrome(input_string[1:-1])\n\n    return False\n\n# Usage \nstring = 'RADAR'\nresult = is_palindrome(string)\nprint(result) # Output: True", "category": "Python"}, {"instruction": "Create a program in Python to remove duplicate values from a list.", "input": "list_a = [1, 2, 2, 3, 4, 4]", "output": "def remove_duplicates(list): \n    unique = [] \n    for item in list: \n        if item not in unique: \n            unique.append(item) \n    return unique \n\nlist_a = [1, 2, 2, 3, 4, 4]\nlist_a = remove_duplicates(list_a)\nprint(list_a)", "category": "Python"}, {"instruction": "Design a function in Python to toggle whether a given HTML tag has a given class.", "input": "<div class=\"myClass\">Hello world</div>", "output": "def toggle_class(html_string, tag, tag_class):\n    soup = BeautifulSoup(html_string, 'html.parser')\n    tag_html = soup.find(tag)\n\n    if tag_html:\n        classes = tag_html.get('class')\n        if classes and tag_class in classes:\n            classes.remove(tag_class)\n        else:\n            classes.append(tag_class)\n        tag_html['class'] = classes\n    return soup.decode()\n\n# Usage\nhtml_string = '<div class=\"myClass\">Hello world</div>'\ntag = 'div'\ntag_class = 'myClass'\nnew_html_string = toggle_class(html_string, tag, tag_class)\nprint(new_html_string)\n# Output: <div>Hello world</div>", "category": "Python"}, {"instruction": "Build a class in Python with three methods.", "input": "", "output": "class MyClass:\n  def __init__(self):\n   # initialization code \n   self.data = []\n   self.count = 0\n \n  def add_data(self, data_element):\n   # add data to a list\n   self.data.append(data_element)\n   self.count += 1 \n \n  def get_data_count(self):\n   # return number of data elements\n   return self.count", "category": "Python"}, {"instruction": "Create a function to print the numbers from 1 to 20, and also print \"skip\" for multiplies of 3 and 5.", "input": "", "output": "def print_numbers():\n    '''This function prints numbers from 1 to 20, and also prints \"skip\" for the multiplies of 3 and 5.'''\n    for num in range(1, 21):\n        if num % 3 == 0 and num % 5 == 0:\n            print(\"skip\")\n        else:\n            print(num)\n\nprint_numbers()\n# Output: 1 2 skip 4 5 skip 7 8 skip 10 11 skip 13 14 skip 16 17 skip 19 20", "category": "Python"}, {"instruction": "Update the given function to return the greatest common divisor of two numbers.", "input": "def divisor_function(a, b):\n    \"\"\"Returns the greatest common divisor of two numbers.\"\"\"\n    return a % b", "output": "def divisor_function(a, b):\n    \"\"\"Returns the greatest common divisor of two numbers.\"\"\"\n    if b == 0:\n        return a\n    else:\n        return divisor_function(b, a % b)", "category": "Python"}, {"instruction": "Construct a Python program to print out the biggest number from a given list.", "input": "my_list = [6, 5, 9, 1, 8, 2]", "output": "def find_max(my_list):\n    max_num = my_list[0]\n    for num in my_list:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nprint(find_max(my_list))", "category": "Python"}, {"instruction": "Generate a Matrix with random integers between 1-50 and output the Matrix.", "input": "rows = 5\ncolumns = 6", "output": "import random\n\nrows = 5\ncolumns = 6\n\nmatrix = [[random.randint(1,50) for c in range(columns)]for r in range(rows)]\n\nfor row in matrix:\n    print(row)", "category": "Python"}, {"instruction": "Write a code that will check if a given string is a palindrome or not without using extra space.", "input": "string = \"level\"", "output": "def is_palindrome(string):\n    left, right = 0, len(string)-1\n    \n    while right >= left:\n        if string[left] != string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \nif is_palindrome(string):\n    print(\"The string is a palindrome\")\nelse:\n    print(\"The string is not a palindrome\")", "category": "Python"}, {"instruction": "Write a code that will delete a node in a Linked List at a given position.", "input": "# Node class \nclass Node: \n    # Function to initialise the node object \n    def __init__(self, data): \n        self.data = data  # Assign data \n        self.next = None  # Initialize next as null \n  \n# Linked List class \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n        \n# Given Position\nposition = 5", "output": "# Node class \nclass Node: \n    # Function to initialise the node object \n    def __init__(self, data): \n        self.data = data  # Assign data \n        self.next = None  # Initialize next as null \n  \n# Linked List class \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n\n    # Function to delete given node at position \n    def delete_node(self, position): \n  \n        # If linked list is empty \n        if self.head == None: \n            return \n  \n        # Store head node \n        temp = self.head \n  \n        # If head needs to be removed \n        if position == 0: \n            self.head = temp.next\n            temp = None\n            return \n  \n        # Find previous node of the node to be deleted \n        for i in range(position -1 ): \n            temp = temp.next\n            if temp is None: \n                break\n  \n        # If position is more than number of nodes \n        if temp is None: \n            return \n        if temp.next is None: \n            return \n  \n        # Node temp.next is the node to be deleted \n        # store pointer to the next of node to be deleted \n        next = temp.next.next\n  \n        # Unlink the node from linked list \n        temp.next = None\n  \n        temp.next = next \n  \n# Given Position\nposition = 5\n\n# Create a linked list with four nodes\nlinked_list = LinkedList()\nlinked_list.head = Node(1)\nsecond = Node(2)\nthird = Node(3)\nfourth = Node(4)\n\n# Now connect the linked list \nlinked_list.head.next = second\nsecond.next = third\nthird.next = fourth\n\n# Delete the node from given position\nlinked_list.delete_node(position)", "category": "Python"}, {"instruction": "Create a function that returns true if the given number is a prime number.", "input": "number = 9", "output": "def is_prime(number):\n    if number < 2:\n        return False\n    for i in range(2, number // 2 + 1):\n        if number % i == 0:\n            return False\n    return True\n\nif is_prime(number):\n    print(\"The number is a prime number\")\nelse:\n    print(\"The number is not a prime number\")", "category": "Python"}, {"instruction": "Rewrite the loop as a generator expression.", "input": "arr = []\nfor i in range(5):\n    arr.append(i)", "output": "arr = [i for i in range(5)]\narr = (i for i in range(5))", "category": "Python"}, {"instruction": "Write a Python program to compare two lists and print the elements which are not common between the two.", "input": "list_a = [1, 2, 3, 4, 5]\nlist_b = [3, 4, 5, 6, 7]", "output": "list_a = [1, 2, 3, 4, 5]\nlist_b = [3, 4, 5, 6, 7]\n\nnot_common_elements = [i for i in list_a if not(i in list_b)] + [i for i in list_b if not(i in list_a)]\n\nprint(not_common_elements)", "category": "Python"}, {"instruction": "Modify the code so that it prints \"Python is the best language\" five times.", "input": "for i in range(10):\n    print(\"Python is great!\")", "output": "for i in range(5):\n    print(\"Python is the best language!\")", "category": "Python"}, {"instruction": "Create a print statement in Python to print the first 5 elements in a list.", "input": "[2, 3, 4, 5, 6, 7, 8]", "output": "print(list[:5])", "category": "Python"}, {"instruction": "Create a Flask route for handling GET requests with the path \"/hello\".", "input": "", "output": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/hello\", methods=[\"GET\"]) \ndef hello(): \n    return \"Hello!\"", "category": "Python"}, {"instruction": "How would you implement a function to determine if a number is even or odd in Python?", "input": "", "output": "def even_odd(number):\n    if number % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")", "category": "Python"}, {"instruction": "Create a function that takes a list of strings as an argument and returns a list containing only non-duplicate strings.", "input": "my_list = [\"Apple\", \"Orange\", \"Grapes\", \"Apple\", \"Watermelon\"]", "output": "def remove_duplicates(arr):\n    final_list = []\n    for i in arr:\n        if i not in final_list:\n            final_list.append(i)\n    return final_list", "category": "Python"}, {"instruction": "Count and return the number of lowercase and uppercase characters in a given string.", "input": "my_str = \"Hello World!\"", "output": "def count_cases(s):\n    num_lower = 0\n    num_upper = 0\n    for char in s:\n        if char.islower():\n            num_lower += 1\n        elif char.isupper():\n            num_upper += 1\n    return num_lower, num_upper", "category": "Python"}, {"instruction": "Decompose the following code into two different functions.", "input": "def calculateMinimumDifference(nums):\n    if len(nums) <= 1: return 0\n    min_diff = float('inf')\n    for x in range(1, len(nums)):\n        min_diff = min(min_diff, abs(nums[x] - nums[x-1]))\n    return min_diff", "output": "def calculate_diff(arr):\n    return abs(arr[0] - arr[1])\n\ndef calculate_minimum_difference(nums):\n    if len(nums) <= 1: return 0\n    min_diff = float('inf')\n    for x in range(1, len(nums)):\n        min_diff = min(min_diff, calculate_diff(nums[x-1:x+1]))\n    return min_diff", "category": "Python"}, {"instruction": "Given a range of numbers, write a python program to find the sum of the elements within that range.", "input": "range: 1 to 10", "output": "def sum_range(start, end):\n    res = 0\n    for i in range(start, end+1):\n        res += i\n    return res\n\nsum_range(1, 10)", "category": "Python"}, {"instruction": "Write a python code to insert a new node at the head of a linked list", "input": "", "output": "# Node class \nclass Node: \n \n\t# Function to initialise the node object \n\tdef __init__(self, data): \n\t\tself.data = data # Assign data \n\t\tself.next = None # Initialize next as null \n\n# Linked List class \nclass LinkedList: \n\n\t# Function to initialize head \n\tdef __init__(self): \n\t\tself.head = None\n\n\t# Function to insert a new node at the beginning \n\tdef insert_at_head(self, new_data): \n\t\t\n\t\t# Create a new node \n\t\tnew_node = Node(new_data) \n\n\t\t# update the new nodes next to old head\n\t\tnew_node.next = self.head \n\n\t\t# update head to new node \n\t\tself.head = new_node", "category": "Python"}, {"instruction": "Develop a code to get the current date and time and print it", "input": "", "output": "from datetime import datetime\n\ndef get_current_datetime():\n    # Get the current date and time\n    current_datetime = datetime.now()\n    # Print the current date and time\n    print(\"Current date and time:\", current_datetime)\n\n# Call the function\nget_current_datetime()", "category": "Python"}, {"instruction": "Create a class with the name \"Animal\" and add the methods \"make_sound\" and \"eat\".", "input": "", "output": "class Animal:\n\n    def make_sound(self):\n        \"\"\"Makes a sound specific to the animal.\"\"\"\n        pass\n    \n    def eat(self):\n        \"\"\"Eats food.\"\"\"\n        pass", "category": "Python"}, {"instruction": "Write the code to create a one-dimensional array and initialize it with random numbers of length 4.", "input": "", "output": "import random\n\ndef create_random_array():\n    lst = []\n    for i in range(4):\n        lst.append(random.randint(1,10))\n\n    return lst", "category": "Python"}, {"instruction": "Write the code for a function that takes two parameters n and m and returns the sum of the first n odd integers starting with m.", "input": "", "output": "def sum_of_odd_integers(n,m):\n    total_sum = 0\n    for i in range(m,m+(2*n-1),2):\n        total_sum += i\n    return total_sum", "category": "Python"}, {"instruction": "Fix the following code so that it works without errors.", "input": "```\ndef remove_characters(name, characters):\n    for c in characters:\n        name.replace(c, '')\n    return name\n\nname = \"Alice\"\ncharacters = [\"A\", \"e\"]\n```", "output": "```\ndef remove_characters(name, characters):\n    for c in characters:\n        name = name.replace(c, '')\n    return name\n\nname = \"Alice\"\ncharacters = [\"A\", \"e\"]\n```", "category": "Python"}, {"instruction": "Design a function in Python to format a given string as a URL slug.", "input": "string = \"This is a sample string to be converted\"", "output": "def format_as_slug(string):\n    slug = string.lower()\n    slug = slug.strip()\n    slug = slug.replace(' ', '-')\n    slug = re.sub('[^a-zA-Z0-9_\\-]', '', slug)\n    return slug\n\n# Usage \nstring = \"This is a sample string to be converted\"\nresult = format_as_slug(string)\nprint(result) # Output: this-is-a-sample-string-to-be-converted", "category": "Python"}, {"instruction": "You need to design a database for a school where multiple students can have a tutor of a subject. What is the best way to design the database?", "input": "", "output": "The best way to design the database is to create three tables: students, tutors and subjects. The students table would contain columns for each student's name, ID and contact details. The tutors table would contain the tutor's name, ID and contact details. The subjects table would contain the subject name, description and number of available tutors. The three tables would then be linked by a linking table, which would contain two columns - one for the student ID, one for the tutor ID - and an extra column to identify which subject the tutor-student pair is associated with.", "category": "Python"}, {"instruction": "Write code to sort a Python list of tuples based on their second element in the tuple.", "input": "list_of_tuples = [('a', 5), ('b', 1), ('c', 10)]", "output": "list_of_tuples.sort(key=lambda tup: tup[1])", "category": "Python"}, {"instruction": "Write an algorithm to print all possible combinations of balanced parentheses.", "input": "", "output": "def generateParenthesis(N): \n    string = \"\" \n    result = [] \n  \n    # dfs on the result \n    def generate(left, right, string): \n        if (left == 0 and right == 0): \n            result.append(string) \n            return\n  \n        if left > 0: \n            generate(left - 1, right, string + \"(\") \n  \n        if left < right: \n            generate(left, right - 1, string + \")\") \n  \n    # calling the function \n    if N > 0: \n        generate(N, N, string) \n    return result \n  \n# Driver function \nprint(generateParenthesis(3))", "category": "Python"}, {"instruction": "Write a function in Python to encourage user input by prompting the user \"Please enter a valid email address.\"", "input": "", "output": "def get_email(): \n  email = input(\"Please enter a valid email address: \")\n  return email", "category": "Python"}, {"instruction": "Explain what the \"continue\" statement does.", "input": "", "output": "The \"continue\" statement is used to skip the current iteration of a loop and continue with the next iteration. It is commonly used to ignore certain items in a list or when the program should take a different action based on a particular condition.", "category": "Python"}, {"instruction": "Given two lists, create a function that finds the common elements between the two lists.", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [2, 3, 4, 6, 7]", "output": "def find_common(list1, list2):\n    common_elems = []\n    for elem in list1:\n        if elem in list2:\n            common_elems.append(elem)\n    return common_elems", "category": "Python"}, {"instruction": "Create a Python class 'Calculator' with two methods: 'add' and 'sub'.", "input": "", "output": "class Calculator:\n def add(self, x, y):\n  return x + y\n\n def sub(self, x, y):\n  return x - y", "category": "Python"}, {"instruction": "Edit the given function in Python to convert the given list of integers a into a multidimensional list of size len(a) X len(a).", "input": "def convert_to_multi(a):\n    return [a]", "output": "def convert_to_multi(a):\n    result = []\n    for i in range(len(a)):\n        row = []\n        for j in range(len(a)):\n            row.append(a[j])\n        result.append(row)\n    return result", "category": "Python"}, {"instruction": "Create a function that compares two numbers and returns 'lower', 'higher', or 'equal' based on the comparison.", "input": "", "output": "def compare_numbers(num1, num2):\n    if num1<num2:\n        return 'lower'\n    elif num1>num2:\n        return 'higher'\n    else:\n        return 'equal'", "category": "Python"}, {"instruction": "Design a class that stores the data of an individual employee", "input": "", "output": "class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary\n\n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n\n    def get_salary(self):\n        return self.salary", "category": "Python"}, {"instruction": "Using a conditional statement, print a message depending on the day of the week.", "input": "day_of_week = \"Thursday\"", "output": "if day_of_week == \"Monday\":\n    print(\"It's Monday\")\nelif day_of_week == \"Tuesday\":\n    print(\"It's Tuesday\")\nelif day_of_week == \"Wednesday\":\n    print(\"It's Wednesday\")\nelif day_of_week == \"Thursday\":\n    print(\"It's Thursday\")\nelif day_of_week == \"Friday\":\n    print(\"It's Friday\")\nelif day_of_week == \"Saturday\":\n    print(\"It's Saturday\")\nelif day_of_week == \"Sunday\":\n    print(\"It's Sunday\")", "category": "Python"}, {"instruction": "Write a function that takes an array and prints every element in a single line.", "input": "my_array = [1, 2, 3]", "output": "def print_array(arr):\n    for element in arr:\n        print(element, end=' ')", "category": "Python"}, {"instruction": "Construct a JSON structure from its respective python dictionaries", "input": "a = {\n  \"name\": \"John\",\n  \"age\": 32\n}\n\nb = {\n  \"cars\": [\"Ford\", \"BMW\", \"Fiat\"]\n}", "output": "import json\n\ndata = {**a, **b}\njson_data = json.dumps(data)", "category": "Python"}, {"instruction": "Create a code block that calculates the root of a given number", "input": "Find the square root of 16", "output": "#calculate the square root of a given number\ndef get_square_root(num):\n    root = num ** 0.5\n    return root\nif __name__ == '__main__':\n    number = 16\n    root = get_square_root(number)\n    print(\"Square root of {} is {}\".format(number, root))", "category": "Python"}, {"instruction": "Using the provided class, add a new method to print the age of employees.", "input": "class Employee: \n    def __init__(self, name, age): \n        self.name = name\n        self.age = age", "output": "class Employee: \n    def __init__(self, name, age): \n        self.name = name\n        self.age = age \n\n    def get_age(self): \n        print(self.age)", "category": "Python"}, {"instruction": "In a given list, replace the even numbers by their square.", "input": "[1, 2, 3, 4, 5, 6]", "output": "def even_nums_square(nums): \n    for i in range(len(nums)): \n        # check for even number \n        if nums[i] % 2 == 0: \n            # square the number \n            nums[i] = nums[i] * nums[i] \n    return nums", "category": "Python"}, {"instruction": "Given a 2D array, replace every element with the greatest element on its row.", "input": "[[6, 2, 9],\n [3, 8, 7],\n [1, 4, 5]]", "output": "def greatest_element(arr): \n    # loop through elements of 1D array \n    for i in range(len(arr)): \n        max_element = arr[i][0] \n  \n        # loop through elements of 2D array \n        for j in range(len(arr[i])):  \n            if arr[i][j] > max_element: \n                max_element = arr[i][j] \n              \n        # replace every element with max_element \n        for j in range(len(arr[i])): \n            arr[i][j] = max_element \n    return arr", "category": "Python"}, {"instruction": "Initialize a 2D array with `0`s.", "input": "", "output": "def init2DArray(rows, cols): \n    # initialize the array \n    arr = [[0 for i in range(cols)] for j in range(rows)]\n    return arr", "category": "Python"}, {"instruction": "Generate a URL to search the desired content on Google using Python.", "input": "Search Keyword: Covid-19 Pandemic", "output": "import urllib\nurl = 'https://www.google.com/search?q=Covid-19+Pandemic'\nurllib.request.urlopen(url)", "category": "Python"}, {"instruction": "Write a Python code snippet to evaluate an expression stored as a string.", "input": "expression = '2+2*2'", "output": "def evaluate_expression(expression):\n    return eval(expression)\n\nprint(evaluate_expression(expression))", "category": "Python"}, {"instruction": "Write a Python program to get the IP address from a given hostname", "input": "google.com", "output": "import socket\n\ndef get_ip(hostname):\n    return socket.gethostbyname(hostname)\n\nprint(get_ip('google.com'))", "category": "Python"}, {"instruction": "Convert the following JS code from a callback to a promise.", "input": "function downloadData(url, callback) {\n  // Code to download data\n  if (/* success */) {\n    callback(null, data)\n  } else {\n    callback(err, null)\n  }\n}", "output": "function downloadData(url) {\n  return new Promise((resolve, reject) => {\n    // Code to download data\n    if (/* success */) {\n      resolve(data)\n    } else {\n      reject(err)\n    }\n  })\n}", "category": "Python"}, {"instruction": "Write an algorithm in Python to find the number of distinct words in a given sentence.", "input": "\"This is a test sentence.\"", "output": "def count_distinct_words(sentence):\n    distinct_words = set([word.lower() for word in sentence.split()])\n    return len(distinct_words)\n    \nprint(count_distinct_words(\"This is a test sentence.\")) # Outputs: 4", "category": "Python"}, {"instruction": "Create a function which takes two parameters and returns true if the second parameter is a power of the first parameter.", "input": "x = 16\ny = 4", "output": "def is_a_power_of(x, y):\n    if x == y:\n        return True\n\n    if x > y and y != 0:\n        return is_a_power_of(x/y, y) \n    else:\n        return False\n\npower_of = is_a_power_of(x, y)", "category": "Python"}, {"instruction": "Implement a k-nearest neighbors algorithm to predict point labels.", "input": "", "output": "# k-nearest neighbor algorithm\ndef knn(k, data, targets, query):\n    # find k nearest neighbors of the query\n\tindices = get_neighbors(k, data, query)\n\t\n\t# find most common label among the neighbors\n\tcounts = {}\n\tfor index in indices:\n\t\tlabel = targets[index]\n\t\tcounts[label] = counts.get(label, 0) + 1\n\t\n\t# from the most to the least occurring \n\tlabels = sorted(counts, key=counts.get, reverse=True)\n\treturn labels[0]", "category": "Python"}, {"instruction": "how to implement a recursive function for computing Fibonacci numbers?", "input": "max_num = 5", "output": "def Fibonacci(n):\n    if n==0 or n==1:\n        return n \n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)\n\ndef Fibonacci_Series(max_num):\n    for n in range(max_num+1):\n        print(Fibonacci(n))\n\n# Output: 0 1 1 2 3 5", "category": "Python"}, {"instruction": "Develop a code that can calculate the cumulative sum of an array", "input": "[2, 4, 6, 8, 10]", "output": "def cummulative_sum(arr):\n    cum_sum = 0 \n    for num in arr:\n       cum_sum += num\n    return cum_sum\nif __name__ == '__main__':\n    test_list = [2, 4, 6, 8, 10]\n    print('Cumulative Sum:', cummulative_sum(test_list))", "category": "Python"}, {"instruction": "Given a function that takes two parameters \"a\" and \"b\", write a code to add the two parameters together and return the result.", "input": "a = 1, b = 2", "output": "#Add two parameters together and return the result\ndef add_two_params(a, b):\n    return a + b\nresult = add_two_params(1, 2)\nprint('The result is', result)", "category": "Python"}, {"instruction": "Write a code to find control characters such as carriage returns inside a given string", "input": "'This is a string\\r\\nwith some control characters'", "output": "#Function to find control characters\ndef find_control_chars(string):\n    control_chars = [\n        '\\r', \n        '\\n'\n    ]\n    for char in control_chars:\n        if char in string:\n            return True\n    return False\n    \nstring = 'This is a string\\r\\nwith some control characters'\ncontrol_char_exists = find_control_chars(string)\nprint('Control character exists:', control_char_exists)", "category": "Python"}, {"instruction": "Generate a new list from an old list by multiplying each element of the old list with a given number", "input": "numbers = [2, 4, 6]\nmultiply = 5", "output": "def multiply_elements(numbers, multiply):\n    new_list = []\n    for num in numbers:\n        new_list.append(num * multiply)\n    return new_list\n\nnumbers = [2, 4, 6]\nmultiply = 5\n\nprint(multiply_elements(numbers, multiply))", "category": "Python"}, {"instruction": "Write a Python code that takes a string and replace all the non-alphanumeric characters with a given character.", "input": "string = 'Hello, world!'\ncharacter = '#'", "output": "import re\n\ndef replace_non_alphanum(string, character):\n    return re.sub(r'\\W', character, string)\n\nstring = 'Hello, world!'\ncharacter = '#'\n\nprint(replace_non_alphanum(string, character))", "category": "Python"}, {"instruction": "Write a code that takes two lists and find the longest common starting substring", "input": "list1 = ['cat', 'car', 'camel']\nlist2 = ['carry', 'cap', 'caterpillar']", "output": "def find_longest_substring(list1, list2):\n    string1 = list1[0]\n    string2 = list2[0]\n    min_length = min(len(string1), len(string2))\n    longest_substring = \"\"\n    \n    for i in range(min_length):\n        if string1[i] == string2[i]:\n            longest_substring += string1[i]\n        else:\n            break\n    return longest_substring\n    \nprint(find_longest_substring(list1, list2))", "category": "Python"}, {"instruction": "Write a Python code take a given string and return the string in reverse.", "input": "hello", "output": "def reverse_string(string):\n    return string[::-1]\n\nprint(reverse_string('hello'))", "category": "Python"}, {"instruction": "Take the following array and add up all of the numbers", "input": "numbers = [4,15,7,10,45]", "output": "def sum_numbers(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\nprint(sum_numbers(numbers))", "category": "Python"}, {"instruction": "Fix the bug in the following code that causes the output to be incorrect.", "input": "def calculate_sum(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\nnumbers = [2, 3, 5]\nresult = calculate_sum(numbers)\n\nprint(f'Sum of {numbers} is {result}')", "output": "def calculate_sum(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\nnumbers = [2, 3, 5]\nresult = calculate_sum(numbers)\n\nprint(f'Sum of {numbers} is {result}.')", "category": "Python"}, {"instruction": "Implement a class to create an object with the given characteristics", "input": "Characteristics: Name, Age, Gender", "output": "class Person:\n    def __init__(self, name, age, gender):\n        self.name = name \n        self.age = age \n        self.gender = gender \n\n    def get_details(self):\n        return f\"Name: {self.name}, Age: {self.age}, Gender: {self.gender}\"", "category": "Python"}, {"instruction": "Implement a function that creates a dictionary from two lists which contain the keys and values, respectively.", "input": "keys = [\"name\", \"age\", \"city\"]\nvalues = [\"John\", 30, \"New York\"]", "output": "def create_dictionary(keys, values):\n    # Create an empty dictionary\n    my_dict = {}\n    # Populate the dictionary with elements from lists\n    for i in range(len(keys)): \n        my_dict[keys[i]] = values[i]\n    return my_dict", "category": "Python"}, {"instruction": "How can you print the Hello World message using the Tkinter module in Python?", "input": "", "output": "\"\"\"Print the Hello World message using the Tkinter module in Python\"\"\"\nimport tkinter as tk\n\n# Create the main window\nwindow = tk.Tk()\n\n# Create the label with the text\nhello_label = tk.Label(window, text=\"Hello World\")\n\n# Pack the label to the window\nhello_label.pack()\n\n# Main loop\nwindow.mainloop()", "category": "Python"}, {"instruction": "Create a Python function to sort a list of dictionaries in ascending order of \"count\".", "input": "data = [\n    {'name': 'Alice', 'count': 5}, \n    {'name': 'Bob', 'count': 3}, \n    {'name': 'John', 'count': 7},\n    {'name': 'David', 'count': 4},\n]", "output": "def sort_dict_list(data):\n    \"\"\"Sort a list of dictionaries in ascending order of 'count'\n   \n    Args:\n        data (list): A list of dictionaries\n   \n    Returns:\n        list: A sorted list of dictionaries\n    \"\"\"\n \n    sorted_data = sorted(data, key=lambda x: x['count'])\n    return sorted_data\n\nif __name__ == '__main__':\n    data = [\n        {'name': 'Alice', 'count': 5}, \n        {'name': 'Bob', 'count': 3}, \n        {'name': 'John', 'count': 7},\n        {'name': 'David', 'count': 4},\n    ]\n    sorted_data = sort_dict_list(data)\n    print(sorted_data)", "category": "Python"}, {"instruction": "Construct an if-statement to check whether the given element is present in an array or not.", "input": "arr = [4, 5, 6]\nelement = 5", "output": "if element in arr:\n    print(\"Element is present in array\")", "category": "Python"}, {"instruction": "Write a Python script to calculate the total and the average of an array of numbers.", "input": "arr = [56, 23, 89, 17, 13, 10]", "output": "total=sum(arr)\navg=sum(arr)/len(arr)\nprint(\"Total of the array elements is: \"+str(total))\nprint(\"Average of the array elements is: \"+str(avg))", "category": "Python"}, {"instruction": "Write a Python function to calculate the sum of all items in a given dictionary with integer values.", "input": "dict = {'a': 5, 'b': 10, 'c': 3}", "output": "def dict_sum(nums):\n sum = 0\n for key, val in nums.items():\n  sum +=val\n return sum\n\nprint(dict_sum(dict)) //Output is: 18", "category": "Python"}, {"instruction": "Given an array of strings, write a code snippet in Python that finds the longest string and prints its length.", "input": "arr = [\"Dog\",\"Cat\",\"Mouse\"]", "output": "arr = [\"Dog\",\"Cat\",\"Mouse\"]\nlongest_str = max(arr, key=len)\nprint(len(longest_str))", "category": "Python"}, {"instruction": "Write a Python program to create a list of n numbers (where n is the input) and print the list in reverse order.", "input": "n=5", "output": "n = 5\nlst = list(range(n, 0, -1))\nprint(lst)", "category": "Python"}, {"instruction": "Write a Python script that extracts the name and age of all customers from the customer table in a database.", "input": "", "output": "import MySQLdb \n\n# connect to database\ndb = MySQLdb.connect(host=\"localhost\", user=\"user\", passwd=\"password\", db=\"customers\")  \n\n# create a cursor \ncursor = db.cursor()\n\n# execute SQL query \ncursor.execute(\"SELECT name, age FROM customers\")  \n\n# fetch the rows \nrows = cursor.fetchall() \n\n# traverse over the results \nfor row in rows: \n    name = row[0] \n    age = row[1] \n    print(\"Name = {}, Age = {}\".format(name, age))", "category": "Python"}, {"instruction": "Create a function that takes a list of strings and combines them together into one string", "input": "[\"This\", \"is\", \"a\", \"list\", \"of\", \"strings\"]", "output": "def combineStrings(strings):\n    combined_string = \"\"\n    for string in strings:\n        combined_string += string + \" \"\n    return combined_string\n\ncombined_string = combineStrings([\"This\", \"is\", \"a\", \"list\", \"of\", \"strings\"])", "category": "Python"}, {"instruction": "Write a function in Python to calculate the length and breadth of a given rectangle.", "input": "", "output": "def calculate_rectangle_length_and_breadth(x, y):\n    length = x\n    breadth = y\n    return length, breadth", "category": "Python"}, {"instruction": "Generate three different sorting algorithms for a list of integers.", "input": "", "output": "# Bubble Sort algorithm\ndef bubble_sort(lst):\n    for i in range(len(lst)-1):\n        for j in range(len(lst)-1-i):\n            if lst[j] > lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst\n\n# Insertion Sort algorithm\ndef insertion_sort(lst):\n    for i in range(1, len(lst)):\n        key = lst[i]\n        j = i - 1\n        while j >= 0 and key < lst[j]:\n            lst[j+1] = lst[j]\n            j -= 1\n        lst[j+1] = key\n    return lst\n\n# Heap Sort algorithm\ndef heap_sort(lst):\n    # build max heap\n    for i in range(len(lst) // 2 - 1, -1, -1):\n        heapify(lst, len(lst), i)\n   \n    # extract elements\n    for i in range(len(lst) - 1, 0, -1):\n        lst[i], lst[0] = lst[0], lst[i]\n        heapify(lst, i, 0)\n    return lst\n\ndef heapify(lst, n, i):\n    # Find largest among root, left child and right child\n    largest = i \n    l = 2 * i + 1\n    r = 2 * i + 2 \n  \n    if l < n and lst[i] < lst[l]:\n        largest = l\n  \n    if r < n and lst[largest] < lst[r]:\n        largest = r\n  \n    # change root, if needed\n    if largest != i:\n        lst[i], lst[largest] = lst[largest], lst[i]\n        heapify(lst, n, largest)", "category": "Python"}, {"instruction": "Write a code block to return a random value from a given list", "input": "[1, 4, 8, 12]", "output": "#Return a random value from a given list\nimport random\n\ndef get_random_value(lst):\n    n = random.randint(0, len(lst) - 1)\n    return lst[n]\n\ntest_list = [1, 4, 8, 12]\nrandom_value = get_random_value(test_list)\nprint('Random value:', random_value)", "category": "Python"}, {"instruction": "Create a method to calculate the amount of tax to be paid based on the inputs of income and country.", "input": "income = 20000, country = Ireland", "output": "#Calculate the applicable tax amount \ndef get_tax_amount(income, country):\n    #Country specific logic\n    if country == 'Ireland':\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.15\n    #Calulate tax amount\n    tax_amount = income * tax_rate\n    return tax_amount\nif __name__ == '__main__':\n    income = 20000\n    country = 'Ireland'\n    tax_amount = get_tax_amount(income, country)\n    print('Tax amount:', tax_amount)", "category": "Python"}, {"instruction": "Convert the following SQL statement into a Python def() and write the code.", "input": "SELECT order_id, order_time, subtotal FROM orders WHERE order_time > NOW()", "output": "def get_order_info(order_time):\n    query = \"SELECT order_id, order_time, subtotal FROM orders WHERE order_time > %s\"\n    cursor.execute(query, (order_time, ))\n    rows = cursor.fetchall()\n    return rows", "category": "Python"}, {"instruction": "What command should be added to the function to make sure the input list is sorted?", "input": "def remove_duplicates(list):\n    # TODO: add command\n    new_list = []\n    for element in list:\n        if element not in new_list:\n            new_list.append(element)\n    return new_list", "output": "def remove_duplicates(list):\n    # sort the list\n    list.sort()\n    new_list = []\n    for element in list:\n        if element not in new_list:\n            new_list.append(element)\n    return new_list", "category": "Python"}, {"instruction": "Construct a class in Python that contains three variables and two methods.", "input": "", "output": "class myClass():\n    def __init__(self):\n        self.var1 = \"Hello\"\n        self.var2 = \"World!\"\n        self.var3 = 5\n    def method1(self):\n        print(self.var1)\n    def method2(self):\n        print(self.var2)", "category": "Python"}, {"instruction": "Construct a for loop in Python to find the sum of all the the numbers between 15 and 30 (inclusive).", "input": "", "output": "total_sum = 0 \nfor num in range(15, 31): \n    total_sum += num \nprint(total_sum)", "category": "Python"}, {"instruction": "Create a function that prints a provided message 3 times", "input": "message = \"Hello World!\"", "output": "def print_message(message): \n for i in range(3): \n  print(message)", "category": "Python"}, {"instruction": "Create a new array from the given array by replacing all the odd numbers with 0.", "input": "arr = [3, 5, 7, 9, 1]", "output": "arr = [3, 5, 7, 9, 1]\n\nnew_arr = [num if num % 2 == 0 else 0 for num in arr]\nprint(new_arr)", "category": "Python"}, {"instruction": "Extract all the words that begin with 's' from the given list.", "input": "list_of_strings = ['stack', 'super', 'stone', 'sit']", "output": "list_of_strings = ['stack', 'super', 'stone', 'sit']\n\nwords_start_s = [word for word in list_of_strings if word.startswith('s')]\nprint(words_start_s)", "category": "Python"}, {"instruction": "Generate a new array and store only elements that are greater than 5.", "input": "arr = [3, 9, 8, 1, 6, 4]", "output": "arr = [3, 9, 8, 1, 6, 4]\n\nnew_arr = [num for num in arr if num > 5]\nprint(new_arr)", "category": "Python"}, {"instruction": "Re-write this algorithm in pseudo-code.", "input": "def checkEven(number): \n\tif(number % 2 == 0): \n\t\treturn True\n\telse: \n\t\treturn False", "output": "function checkEven(number)\n\tif number modulo 2 = 0\n\t\treturn true\n\telse\n\t\treturn false\nend function", "category": "Python"}, {"instruction": "Use a random number generator to generate random numbers between 1 and 10.", "input": "", "output": "import random\n\ndef random_numbers():\n    for _ in range(10):\n        num = random.randint(1, 10)\n        print(num)\n\nrandom_numbers()", "category": "Python"}, {"instruction": "Create a function to decrypt an encrypted string.", "input": "", "output": "def decrypt(enc_string):\n    s = 0\n    decrypted = ''\n \n    for i in range(len(enc_string)):\n        s += ord(enc_string[i])\n        decrypted += chr(s)\n \n    return decrypted", "category": "Python"}, {"instruction": "Explain the differences between a multi-threaded application and a multi-process application.", "input": "", "output": "A multi-threaded application is an application that uses multiple threads of execution to execute different tasks simultaneously. All threads share the same address space, so multiple threads can access the same data in memory. This provides a more optimized use of resources, as one thread does not need to wait for another thread to finish before accessing the same data.\n\nA multi-process application is an application that uses multiple processes to execute different tasks simultaneously. Each process has its own separate address space, meaning the processes do not share the same data in memory. This means that the processes can\u2019t directly access data from each other, and communication between processes must be established through inter-process communication mechanisms like pipes, sockets, and message queues.", "category": "Python"}, {"instruction": "Write a loop that iterates over the characters in a string, and if the character is an 'o', print the character.", "input": "\"Hello World\"", "output": "for char in \"Hello World\":\n    if char == 'o':\n        print(char)", "category": "Python"}, {"instruction": "Create a simple calculator program in Python.", "input": "", "output": "def add(num1, num2): \n  return num1 + num2 \n\ndef subtract(num1, num2): \n  return num1 - num2 \n\ndef multiply(num1, num2): \n  return num1 * num2 \n\ndef divide(num1, num2): \n  return num1 / num2 \n\n# Infinite loop until user chooses to exit \nwhile True: \n    print(\"Select operation:\") \n    print(\"1. Add\") \n    print(\"2. Subtract\") \n    print(\"3. Multiply\") \n    print(\"4. Divide\")\n    print(\"5. Exit\") \n    choice = input(\"Enter choice (1/2/3/4):\") \n  \n    # Check if choice is one of the four options \n    if choice in ('1', '2', '3', '4', '5'): \n        num1 = float(input(\"Enter first number: \")) \n        num2 = float(input(\"Enter second number: \")) \n  \n        if choice == '1': \n            print(num1, \"+\", num2, \"=\", add(num1, num2)) \n\n        elif choice == '2': \n            print(num1, \"-\", num2, \"=\", subtract(num1, num2)) \n  \n        elif choice == '3': \n            print(num1, \"*\", num2, \"=\", multiply(num1, num2)) \n\n        elif choice == '4': \n            print(num1, \"/\", num2, \"=\", divide(num1, num2))\n        elif choice == '5':\n            break\n        else: \n            print(\"Invalid Input\") \n    else: \n        print(\"Invalid Input\")", "category": "Python"}, {"instruction": "Fix this indentation error in the following Python code", "input": "def double(number):\n return number * 2", "output": "def double(number):\n    return number * 2", "category": "Python"}, {"instruction": "Write a code to find the maximum value in a numeric array using recursion.", "input": "array = [1, -2, 3, -4, 5]", "output": "def find_max(arr): \n  #base case \n  if len(arr) == 1: \n      return arr[0] \n  else: \n      max_n = find_max(arr[1:]) \n      #compare the maximum element with the first element of the array \n      if arr[0] > max_n: \n          return arr[0] \n      else: \n          return max_n \n  \n# Print maximum value in the array \nprint(find_max(array)) \n\n#output \n5", "category": "Python"}, {"instruction": "Summarize the features of the Python pandas library.", "input": "", "output": "Pandas is a Python library used for data manipulation and analysis. It provides an efficient and flexible data structure for labeled and relational data called DataFrame, and operations for groupby aggregation, merging, joining, reshaping, and other manipulations. It also offers statistical functions for descriptive statistics, optimization, plotting, and visualization. Finally, pandas is designed to be fast and efficient, with powerful options for indexing, handling missing data, time-series, and automatic conversion of data.", "category": "Python"}, {"instruction": "Generate a Python Fibonacci sequence of length n", "input": "n = 7", "output": "def fibonacci_sequence(n): \n    nums = []\n    a, b = 0,1\n    for i in range(n): \n        nums.append(a)\n        a, b = b, a + b \n    return nums\n\nprint(fibonacci_sequence(7))", "category": "Python"}, {"instruction": "Suggest two ways to loop through a python dictionary", "input": "", "output": "1. Using for loop: \n\nfor key, value in dict.items(): \n    # Do something with key and value\n\n2. Using while loop:\n\nkeys = list(dict.keys()) \ni = 0\nwhile i < len(keys):\n    key = keys[i] \n    value = dict[key]\n    # Do something with key and value\n    i += 1", "category": "Python"}, {"instruction": "Create a for loop to output the square roots of the numbers between 0 and 10 using the math library.", "input": "", "output": "import math\n\nfor i in range(0,11):\n    print(math.sqrt(i))", "category": "Python"}, {"instruction": "Create two functions to check if a given list contains a specific element.", "input": "list = [4, 1, 6, 9, 8]\nitem = 8", "output": "def check_list(lst, item):\n    return item in lst\n\ndef check_list_version2(lst, item):\n    for x in lst:\n        if x == item: \n            return True\n    return False", "category": "Python"}, {"instruction": "Write a Python program to count how many times a given element appears in the list.", "input": "my_list = [1, 2, 5, 4, 2, 1, 5]", "output": "my_list = [1, 2, 5, 4, 2, 1, 5]\ncount = 0\nfor i in my_list:\n  if i == 5:\n    count += 1\nprint(count) #2", "category": "Python"}, {"instruction": "Read the given Python code and generate the output for the following input.", "input": "my_list = range(1, 11)", "output": "my_list = range(1, 11)\noutput = 0\nfor i in my_list:\n output += i\nprint(output) #55", "category": "Python"}, {"instruction": "Write a code snippet to compute the average of a set of integers.", "input": "[3, 7, 11, 15]", "output": "def avg(arr): \n    sum = 0 \n    for num in arr:\n        sum += num \n    return sum/len(arr)  \n  \nnumbers = [3, 7, 11, 15]\naverage = avg(numbers) \nprint(\"Average of the numbers:\",average)  // Output: 9.5", "category": "Python"}, {"instruction": "Implement a Vue component that displays a table layout.", "input": "", "output": "The component can be implemented in the following way: \n\n<template> \n  <div> \n    <table> \n      <tr v-for=\"row in rows\"> \n        <td v-for=\"item in row\">{{item}}</td> \n      </tr> \n    </table>\n  </div>\n</template> \n\n<script> \nexport default { \n  name: 'TableComponent', \n  props: { \n    rows: { \n      type: Array \n    } \n  } \n} \n</script>", "category": "Python"}, {"instruction": "Design a web scraper in Python to extract the text content from Wikipedia articles.", "input": "", "output": "The web scraper can be designed using the Python library BeautifulSoup. The scraper can take a url of a wiki article as an argument and extract the text content using the method find_all('p'). The text content of the article can then be extracted using the get_text() method.", "category": "Python"}, {"instruction": "Write a python program to create a class called cube.", "input": "", "output": "class Cube:\n    def __init__(self, length, width, height):\n        self.length = length\n        self.width = width\n        self.height = height\n\n    def calculate_volume(self):\n        return self.length * self.width * self.height", "category": "Python"}, {"instruction": "Create code that given two linked lists, determine if they intersect", "input": "Two linked lists: list1 = [3, 7, 8, 10] and list2 = [99, 1, 8, 10]", "output": "def are_lists_intersect(list1, list2): \n  \n    # Set pointer to head node \n    temp1 = list1 \n    temp2 = list2 \n  \n    # Get lengths \n    list1_length = 0\n    list2_length = 0\n  \n    # Count length for each list \n    while (temp1): \n        list1_length += 1\n        temp1 = temp1.next\n  \n    while (temp2): \n        list2_length += 1\n        temp2 = temp2.next\n  \n    # Store longer list in tem1 \n    if list1_length > list2_length: \n        temp1 = list1 \n        temp2 = list2 \n    else: \n        temp1 = list2 \n        temp2 = list1 \n  \n    # Take difference to get number of nodes to \n    # traverse for longer list \n    diff = abs(list1_length - list2_length) \n  \n    # Move pointer for longer list to  \n    # difference node to get same position \n    # node in both list \n    for i in range(diff): \n        temp1 = temp1.next\n  \n    # Move all pointer together till they meet \n    while(temp1 and temp2): \n        if (temp1 == temp2): \n            return True\n  \n        temp1 = temp1.next\n        temp2 = temp2.next\n  \n    # Return false if no common node found \n    return False", "category": "Python"}, {"instruction": "Edit this code so that it can marshall a json object", "input": "import json\ndata = {\n    \"name\": \"John Doe\",\n    \"age\": 30\n}", "output": "import json\n\ndata = {\n    \"name\": \"John Doe\",\n    \"age\": 30\n}\n\nmarshalled_data = json.dumps(data)", "category": "Python"}, {"instruction": "Create code that will reverse the order of elements in this list.", "input": "list = [1, 2, 3, 4]", "output": "def reverse_list(list): \n    start = 0\n    end = len(list) - 1\n    while start < end: \n        list[start], list[end] = list[end], list[start] \n        start += 1\n        end -= 1\n    return list", "category": "Python"}, {"instruction": "Explain how to find the minimum value of a list.", "input": "", "output": "We can use the built-in min() function to find the minimum value in a list. This function takes an iterable such as a list, tuple or set as an argument and returns the smallest item in the iterable. For example, if given a list of numbers, the min() function would return the number with the lowest value.\n\nExample: \n\nmy_list = [3, 6, 2, 8, 4]\nmin_val = min(my_list)\nprint(min_val)  # 2", "category": "Python"}, {"instruction": "How can we use a list comprehension to make a copy of a given list?", "input": "", "output": "list_copy = [x for x in given_list]", "category": "Python"}, {"instruction": "Generate a two-dimensional array of 3 rows and 3 columns with all elements equal to 1.", "input": "", "output": "import numpy as np\n\narr = np.ones((3,3))\nprint(arr)", "category": "Python"}, {"instruction": "Write a code in Python for comparing two strings without using a built-in function.", "input": "string1 = \"apple\"\nstring2 = \"orange\"", "output": "string1 = \"apple\" \nstring2 = \"orange\" \nlength = min(len(string1), len(string2))\n\nfor i in range(length):\n  if string1[i] != string2[i]:\n    result = string1[i] < string2[i]\n    break\n\nif result == True:\n  print(string1 + \" follows \" + string2 + \" alphabetically.\")\nelse:\n  print(string2 + \" follows \" + string1 + \" alphabetically.\")", "category": "Python"}, {"instruction": "Write a function that takes two arguments, an array arr and a value x, and returns the number of times x appears in the array arr.", "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 5]\nx = 5", "output": "def count_val(arr, x):\n    count = 0 \n    for i in arr:\n        if i == x:\n            count += 1\n    return count\n\ncount_val(arr, x)", "category": "Python"}, {"instruction": "Generate a random password of 16 characters that includes a mix of alphanumeric characters and punctuation.", "input": "", "output": "import string\nimport random\n\ndef random_password(str_len):\n    alphanumeric = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(alphanumeric) for i in range(str_len))\n\nrandom_password(16)", "category": "Python"}, {"instruction": "Declare a variable named 'items' and assign it a list containing the elements \u2018pen\u2019, \u2018paper\u2019 and \u2018pencil\u2019 in Python.", "input": "", "output": "items = ['pen', 'paper', 'pencil']", "category": "Python"}, {"instruction": "Change the following code to implement the Observer Design Pattern in Python.", "input": "class Publisher: \n    def __init__(self): \n        self.observers = [] \n  \n    def add(self, observer): \n        if observer not in self.observers: \n            self.observers.append(observer) \n        else: \n            print('Failed to add: {}'.format(observer)) \n  \n    def remove(self): \n        self.observers.remove(observer) \n  \n    def notifyAll(self, *args, **kwargs): \n        for observer in self.observers: \n            observer.notify(self, *args, **kwargs)", "output": "class Publisher: \n\n    def __init__(self): \n        self.observers = [] \n        self.state = None\n    \n    def getState(self): \n        return self.state \n\n    def setState(self, state): \n        self.state = state \n        self.notifyAll() \n\n    def add(self, observer): \n        if observer not in self.observers: \n            self.observers.append(observer) \n        else: \n            print('Failed to add: {}'.format(observer)) \n  \n    def remove(self): \n        self.observers.remove(observer) \n  \n    def notifyAll(self, *args, **kwargs): \n        for observer in self.observers: \n            if args and kwargs: \n                observer.notify(self, *args, **kwargs) \n            else: \n                observer.notify(self)", "category": "Python"}, {"instruction": "Modify the following code to kill a thread after 10 seconds.", "input": "import threading \nfrom time import sleep\n  \ndef worker(): \n    try: \n        while True: \n            print(\"Thread\") \n            sleep(1) \n\nthreads = [] \nfor x in range(40): \n    t = threading.Thread(target=worker) \n    threads.append(t) \n    t.start()", "output": "import threading \nimport signal \nfrom time import sleep \n\ndef exitThread(signum, frame): \n    raise SystemExit \n\ndef worker(): \n    try: \n        signal.signal(signal.SIGALRM, exitThread) \n        signal.alarm(10) \n        while True: \n            print(\"Thread\")  \n            sleep(1) \n\nthreads = [] \nfor x in range(40): \n    t = threading.Thread(target=worker) \n    threads.append(t) \n    t.start()", "category": "Python"}, {"instruction": "Compact a given list into a dictionary with unique items as keys.", "input": "given_list = [1,1,1,2,2,3]", "output": "uniques = {}\nfor item in given_list:\n     if item not in uniques:\n        uniques[item] = 1\n     else:\n        uniques[item] += 1\n\n# result: {1: 3, 2: 2, 3: 1}", "category": "Python"}, {"instruction": "Implement the merge sort algorithm to sort a given array ascending.", "input": "given_array = [7,9,3,8,1]", "output": "def merge_sort(arr):\n    if len(arr) > 1: \n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n\n        #calling merge sort function on left and right arrays\n        merge_sort(L) \n        merge_sort(R) \n\n        i = j = k = 0\n        # Copying data to temp arrays L[] and R[] \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                arr[k] = L[i] \n                i+=1\n            else: \n                arr[k] = R[j] \n                j+=1\n            k+=1\n  \n        # Checking if any element was left \n        while i < len(L): \n            arr[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            arr[k] = R[j] \n            j+=1\n            k+=1\n\nar =[7,9,3,8,1]\nmerge_sort(ar)\n\n# printing sorted array \nprint (ar)", "category": "Python"}, {"instruction": "Generate a gradient descent algorithm to optimize a cost function.", "input": "", "output": "def gradient_descent(cost_function, theta, eta, tolerance):\n    cost = cost_function(theta)\n    diff = tolerance + 1\n    while diff > tolerance:\n        theta_updated = theta\n        for i in range(len(theta)):\n            theta[i] = theta[i] - eta * cost_function.gradient_wrt_theta(theta, i)\n            diff = sum((theta_updated[i] - theta[i])**2 for i in range(len(theta)))\n    return theta", "category": "Python"}, {"instruction": "Get the top ten most used words within a string.", "input": "", "output": "import collections\n\ndef get_most_used_words(string):\n    # Tokenize the string\n    words = string.split()\n\n    # Calculate frequency of each word\n    freq = {}\n    for word in words:\n       if word in freq:\n           freq[word] += 1\n       else:\n           freq[word] = 1\n\n    # Sort the words in descending order of frequency\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n\n    # Get the top ten most used words\n    most_used_words = [word for word, count in sorted_freq[:10]]\n\n    return most_used_words", "category": "Python"}, {"instruction": "Make a REST API call to get the latest version of Python.", "input": "", "output": "import requests\n\ndef get_latest_python_version():\n    url = 'https://www.python.org/ftp/python/'\n    response = requests.get(url)\n    \n    if response.status_code == 200:\n        html = response.text\n        start_index = html.find('<a href=\"')\n        \n        if start_index != -1:\n            end_index = html.find('/\">', start_index + 1)\n\n            if end_index != -1:\n                version = html[start_index + 9:end_index]\n                return version\n\n    return None", "category": "Python"}, {"instruction": "Create a user interface for a customer order system.", "input": "", "output": "import tkinter\n\n# create the main window \nroot = Tk() \n  \n# create the user interface \nroot.title(\"Order System\") \nroot.geometry(\"400x200\") \n  \n# create widgets \nLabel(root, text = 'Name:').grid(row = 0, column = 0, padx = 10, pady = 10) \nEntry(root).grid(row = 0, column = 1, columnspan = 2, padx = 10, pady = 10) \nLabel(root, text = 'Email address:').grid(row = 1, column = 0, padx = 10, pady = 10) \nEntry(root).grid(row = 1, column = 1, columnspan = 2, padx = 10, pady = 10) \nButton(root, text = 'Submit').grid(row = 2, column = 1, padx = 10, pady = 10) \nButton(root, text = 'Cancel').grid(row = 2, column = 2, padx = 10, pady = 10) \n\n# enter main event loop \nroot.mainloop()", "category": "Python"}, {"instruction": "Write a code snippet to store the output of an API call into a variable.", "input": "url = 'http://example.com/api/v1/data'", "output": "import requests\n\nurl = 'http://example.com/api/v1/data'\nresponse = requests.get(url)\ndata = response.json()", "category": "Python"}, {"instruction": "Create a function to build a queue (i.e., a sequence of objects)", "input": "", "output": "class Queue: \n      \n    def __init__(self): \n        self.items = [] \n  \n    def enqueue(self, item): \n        self.items.insert(0, item) \n  \n    def dequeue(self): \n        if not self.is_empty(): \n            return self.items.pop() \n  \n    def is_empty(self): \n        return len(self.items) == 0 \n  \n    def peek(self): \n        if not self.is_empty(): \n            return self.items[-1].value \n  \n    def __len__(self): \n        return self.size() \n  \n    def size(self): \n        return len(self.items)", "category": "Python"}, {"instruction": "Create code that given a stack (i.e., a sequence of objects), returns the reversed stack", "input": "stack = [1, 2, 3, 4]", "output": "def reverse_stack(stack): \n\tif len(stack) == 0: \n\t\treturn \n\t\n\t# Pop the first element from the stack \n\ttemp = stack.pop()\n\n\t# Call the reverse_stack method on the remaining elements \n\treverse_stack(stack) \n\n\t# Push the poped element to the bottom of the stack \n\tinsert_at_bottom(stack, temp) \n\n\treturn stack\n\ndef insert_at_bottom(stack, item): \n\tif len(stack) == 0: \n\t\tstack.append(item) \n\t\n\telse: \n\t\ttemp = stack.pop() \n\t\tinsert_at_bottom(stack, item) \n\t\tstack.append(temp)", "category": "Python"}, {"instruction": "Create a function that will add two numbers (represented as linked lists)", "input": "Linked lists: list1 = [2, 4, 3] and list2 = [5, 6, 4]", "output": "def add_numbers(list1, list2): \n    start = result = ListNode(0)\n    carry = 0\n\n    # Iterate both Lists until the end \n    while list1 or list2 or carry: \n        val1 = 0\n        val2 = 0\n\n        # If l1 is not None, add data\n        if list1: \n            val1 = list1.data \n            list1 = list1.next \n\n        # If l2 is not None, add data\n        if list2: \n            val2 = list2.data \n            list2 = list2.next \n\n        # Calculate sum\n        total = val1 + val2 + carry \n\n        # Update result list present node\n        result.next = ListNode(total % 10) \n        result = result.next \n        carry = total // 10\n  \n    # Return head node of the result list \n    return start.next", "category": "Python"}, {"instruction": "Create code that given two binary search trees, determine if they are identical", "input": "Two Binary Search Trees: Tree1 and Tree2", "output": "def are_identical(Tree1, Tree2): \n    # Both trees are empty \n    if Tree1==None and Tree2==None: \n        return True\n  \n    # If only one of them is empty \n    if (Tree1==None or Tree2==None): \n        return False\n  \n    # Both non-empty, compare the data and \n    # recur for left and right sub-tree \n    if (Tree1.data==Tree2.data and \n        are_identical(Tree1.left, Tree2.left)and\n        are_identical(Tree1.right, Tree2.right)): \n        return True \n    else: \n        return False", "category": "Python"}, {"instruction": "Create code to find the longest subarray with equal number of 0's and 1's", "input": "list = [0, 0, 1, 0, 1, 0, 0, 1]", "output": "def longest_subarray(arr): \n    # Stores index of previos zero \n    prev_zero = -1 \n  \n    # Stores index and length of longest subarray with equal 0 and 1 \n    max_len = 0\n    start_index = 0\n  \n    # Traverse the given array \n    for i in range(len(arr)): \n        # Update previous zero \n        if arr[i] == 0: \n            prev_zero = i \n  \n        # Calculate difference b/w current and previous zero \n        diff = i - prev_zero \n  \n        # Update max_len if required \n        if (diff > max_len): \n            max_len = diff \n            start_index = prev_zero + 1\n  \n    # Return longest sub-array \n    return arr[start_index:start_index + max_len]", "category": "Python"}, {"instruction": "Create code that, given a string, returns the longest permutation of the same character", "input": "str = \"abcccdef\"", "output": "def longest_consecutive_character(str):\n\t# Store character, length of longest permutation, and current length\n    max_char = str[0]\n    max_length = 1\n    cur_length = 1\n    \n    # Iterate over the string\n    for i in range(1, len(str)):\n        # If the characters are the same\n        if str[i] == str[i-1]:\n            cur_length += 1\n            \n            # Check if the current permutation is longest\n            if cur_length > max_length:\n                max_char = str[i]\n                max_length = cur_length\n        # Reset count if character changes\n        else: \n            cur_length = 1\n    \n    return max_char, max_length", "category": "Python"}, {"instruction": "Create a function that will find the maximum length of increasing subarray in a list", "input": "list = [2, 3, 3, 1, 4, 5, 8, 4]", "output": "def longest_increasing_subarray(arr):\n    max_length = 1\n    curr_length = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            curr_length += 1\n        else:\n            if curr_length > max_length:\n                max_length = curr_length\n            curr_length = 1\n    \n    if curr_length > max_length:\n        max_length = curr_length\n    \n    return max_length", "category": "Python"}, {"instruction": "Construct a switch-case statement to output \"Monthly\" if the user enters \"M\" to output \"Yearly\" if the user enters \"Y\", and \"Invalid\" if the user enters neither \"M\" nor \"Y\".", "input": "", "output": "def printOption(option):\nswitch(option):\n    case \"M\":\n        print(\"Monthly\")\n        break\n    case \"Y\":\n        print(\"Yearly\")\n        break\n    default:\n        print(\"Invalid\")", "category": "Python"}, {"instruction": "Write a code to find the maximum of three numbers using if else.", "input": "", "output": "def maximum_of_three(x, y, z): \n    if x > y and x > z: \n        max = x \n    elif y > x and y > z: \n        max = y \n    else: \n        max = z \n    return max", "category": "Python"}, {"instruction": "Generate a recursive function for the following task:", "input": "Given a list of integers, \"find the max element present in the list\".", "output": "def find_max(list):\n    # base condition\n    if len(list) == 1:\n        return list[0] \n    else:\n        # compare the current element to the next element\n        max_element = max(list[0], list[1])\n        # remove the compared element\n        list.pop(1)\n        # call the function on the remaining list\n        return find_max(list[:1] + [max_element] + list[1:])", "category": "Python"}, {"instruction": "You are passed an array and a value. Write a Python program to insert the value in the array at the end.", "input": "array = [1, 2, 3, 4], value = 7", "output": "array = [1, 2, 3, 4, 7]", "category": "Python"}, {"instruction": "Create a function that takes two numbers as an argument and compares them to find the highest number.", "input": "x = 5\ny = 8", "output": "def highest_number(num1, num2):\n  if num1 > num2:\n    return num1\n  else:\n    return num2\n\nhighest_number(x, y)   # returns 8", "category": "Python"}, {"instruction": "Write a code to find the maximum of 3 arguments.", "input": "", "output": "def find_max(a, b, c):\n    max_value = a\n    if b > max_value:\n        max_value = b\n    if c > max_value:\n        max_value = c\n    return max_value\n\nprint(find_max(1, 2, 3))  # Output: 3", "category": "Python"}, {"instruction": "What does the `filter()` method do in Python?", "input": "", "output": "The filter() method in Python takes in a function and a list as arguments. The function is called with all the items in the list and a new list is returned which contains items\nfor which the function evaluates to True.\nIt is typically used to filter out elements from a list based on a certain condition.", "category": "Python"}, {"instruction": "Create a FOR loop to print out the odd numbers between a given range.", "input": "min = 1, max = 10", "output": "\"\"\"\nCreate a FOR loop to print out the odd numbers between a given range\n\"\"\"\n\n# define the range\nmin = input[0]\nmax = input[1]\n\n# iterate through the range\nfor i in range(min, max+1):\n    # check for odd numbers\n    if i % 2 == 1:\n        print(i)", "category": "Python"}, {"instruction": "Design a linked list data structure.", "input": "", "output": "\"\"\"\nDesign a linked list data structure\n\"\"\"\n\nclass ListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def append(self, data):\n        new_node = ListNode(data)\n\n        if self.head is None:\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next is not None:\n                current = current.next\n            current.next = new_node\n\n    def search(self, target):\n        current = self.head\n        while current is not None:\n            if current.data == target:\n                return current\n            current = current.next\n        return None\n\n    def print_list(self):\n        current = self.head\n        while current is not None:\n            print(current.data)\n            current = current.next", "category": "Python"}, {"instruction": "Write a code to fetch the last 4 commits of a git repository.", "input": "user: 'rnyagah', repo: 'GPT-Evaluation'", "output": "\"\"\"\nWrite a code to fetch the last 4 commits of a git repository\n\"\"\"\n\nimport requests\n\nuser = 'rnyagah'\nrepo = 'GPT-Evaluation'\n\nurl = f'https://api.github.com/repos/{user}/{repo}/commits'\n\nresponse = requests.get(url)\ndata = response.json()\n\n# get the last 4 commits\ncommits = data[:4]\n\nfor commit in commits:\n    print(f'commit {commit[\"sha\"]}: {commit[\"commit\"][\"message\"]}')", "category": "Python"}, {"instruction": "Write a code to create a 3x3 matrix with all elements 1.", "input": "", "output": "#import numpy library\nimport numpy as np\n\n#create a 3x3 matrix with all elements 1 \nx = np.ones((3,3))\nprint(x)", "category": "Python"}, {"instruction": "Create a text classifier using a Random Forest algorithm.", "input": "[['Ready Player One', 'Adventure'],\n['IT', 'Drama'],\n['Halloween', 'Horror'],\n['Pirates of the Caribbean', 'Adventure']]", "output": "\"\"\"\nCreate a text classifier using a Random Forest algorithm\n\"\"\"\n \nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\n\n# create the dataframe from the given input\ndf = pd.DataFrame(columns=['text', 'category'], data=input)\n\n# define the features and labels\nX = df['text']\ny = df['category']\n\n# create and train the model\nmodel = RandomForestClassifier(n_estimators=100, random_state=0)\nmodel = model.fit(X, y)", "category": "Python"}, {"instruction": "Construct a Python class to represent a student with attributes such as name, age, and course. The class should have a method that returns the student information in a formatted output", "input": "Student Name: John Smith\nAge: 17\nCourse: Computer Science", "output": "class Student: \n    def __init__(self, name, age, course): \n        self.name = name \n        self.age = age\n        self.course = course\n\n    def get_info(self): \n        return f\"Name: {self.name}, Age: {self.age}, Course: {self.course}\"\n\nstudent = Student(\"John Smith\", 17, \"Computer Science\")\n\nprint(student.get_info()) # Name: John Smith, Age: 17, Course: Computer Science", "category": "Python"}, {"instruction": "Modify a given code to sort a two-dimensional array (matrix) using bubble sort.", "input": "Matrix: \n[[1, 5, 2], \n[8, 4, 6],\n[3, 7, 9]]", "output": "def bubble_sort(arr): \n    n = len(arr) \n    for i in range(n):\n        for j in range(0, n-i-1): \n            for k in range(0, 3): \n                if arr[j][k] > arr[j+1][k] : \n                    arr[j][k], arr[j+1][k] = arr[j+1][k], arr[j][k]\n  \narr = [[1, 5, 2], \n       [8, 4, 6], \n       [3, 7, 9]]\n\nbubble_sort(arr)\nprint(\"Sorted matrix: \") \nfor row in arr: \n    print(row)", "category": "Python"}, {"instruction": "Below is the code of a shopping list application. Modify it to add a function to calculate the total cost of all items in the list.", "input": "shopping_list = {\n    'item1': 2.5,\n    'item2': 3.5,\n    'item3': 4.25\n}", "output": "shopping_list = {\n    'item1': 2.5,\n    'item2': 3.5,\n    'item3': 4.25\n}\n\ndef calculate_cost(list):\n    cost = 0\n    for item in list:\n        cost += list[item]\n    return cost\n\ntotal_cost = calculate_cost(shopping_list)\nprint(total_cost)  # prints 10.25", "category": "Python"}, {"instruction": "Write a code to implement insertion sort on a given list.", "input": "List: [4, 3, 6, 1, 5]", "output": "def insertionSort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key \n  \narr = [4, 3, 6, 1, 5]\ninsertionSort(arr)\nprint (\"Sorted array is: \") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i])", "category": "Python"}, {"instruction": "Write a code to get the IP address of a system.", "input": "", "output": "import socket \n  \nhostname = socket.gethostname() \nIPAddr = socket.gethostbyname(hostname) \n  \nprint(\"The IP address of the system is:\" + IPAddr)", "category": "Python"}, {"instruction": "Write a code to establish a connection between your server and a remote database.", "input": "Server host: 127.0.0.1\nDatabase Name: my_db\nUsername: root\nPassword: pw123", "output": "\"\"\"\nEstablish a connection between your server and a remote database\n\"\"\"\n\nimport pymysql\n\ndb = pymysql.connect(host='127.0.0.1', user='root', \n                      password='pw123', db='my_db')", "category": "Python"}, {"instruction": "Write a code to retrieve tweets from a specific Twitter account by using their API.", "input": "Twitter account: \"@twitter\"", "output": "\"\"\"\nRetrieve tweets from a specific Twitter account\n\"\"\"\n\nimport tweepy\n\n#Enter the respective information \nconsumer_key = 'XXXXXXXXXX'\nconsumer_secret = 'XXXXXXXXXX'\naccess_token = 'XXXXXXXXXX'\naccess_token_secret = 'XXXXXXXXXX'\n\n#Authentication using the given keys \nauth = tweepy.OAuthHandler(consumer_key, consumer_secret) \nauth.set_access_token(access_token, access_token_secret) \n\n#getting the API  \napi = tweepy.API(auth) \n\n#fetch tweets related to \"@twitter\"\ntweets = api.user_timeline(\"@twitter\") \n\n#display first five tweets \nfor tweet in tweets[:5]: \n    print(tweet.text)", "category": "Python"}, {"instruction": "Modify the following code to generate the Fibonacci sequence up to the nth term", "input": "", "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Edit the following code to calculate the standard deviation of a given list", "input": "", "output": "def calculate_std_dev(nums):\n    mean = sum(nums)/len(nums)\n    sum_deviation = 0\n    for num in nums:\n        diff = num - mean\n        squared_deviation = diff ** 2\n        sum_deviation += squared_deviation\n    std_dev = (sum_deviation/(len(nums)-1)) ** 0.5\n    return std_dev", "category": "Python"}, {"instruction": "Modify the following given program to print all prime number between 1 and n", "input": "", "output": "def check_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef print_prime_numbers(n):\n    for num in range(1, n + 1):\n        if check_prime(num):\n            print(num)", "category": "Python"}, {"instruction": "Design a code to check if a given list is ordered in an increasing order.", "input": "lst = [1, 2, 3, 5, 4]", "output": "def is_increasing(lst):\n    for i in range(len(lst)-1):\n        if lst[i] >= lst[i+1]:\n            return False\n    return True", "category": "Python"}, {"instruction": "Design a program in Python to remove all even elements from a given list.", "input": "lst = [2, 4, 5, 6, 8, 10]", "output": "def remove_even(lst):\n    evens = []\n    for num in lst:\n        if num % 2 != 0:\n            evens.append(num)\n    return evens", "category": "Python"}, {"instruction": "Design a program in Python which takes a string as input and returns a list of words from the string.", "input": "string1 = 'Python Programming is Fun!'", "output": "def get_words(string1):\n    words = string1.split()\n    return words", "category": "Python"}, {"instruction": "Create a code that removes all duplicate elements in a given array.", "input": "Array: [5, 10, 5, 7, 10]", "output": "def unique_elements(arr): \n    new_arr = [] \n    for i in arr:\n        if i not in new_arr: \n            new_arr.append(i) \n    return new_arr \n  \narr = [5, 10, 5, 7, 10] \n\nprint(unique_elements(arr)) # [5, 10, 7]", "category": "Python"}, {"instruction": "Write a code to input an array and find the maximum and minimum element in it.", "input": "arr = [1, 2, 3, 4, 5, 6]", "output": "def find_min_max(arr):\n    min_num = arr[0]\n    max_num = arr[0]\n    for num in arr:\n        if num < min_num:\n            min_num = num \n        if num > max_num:\n            max_num = num \n    return max_num, min_num\n\nmax_num, min_num = find_min_max(arr)\nprint('Max element is', max_num, 'and min element is', min_num)  # prints Max element is 6 and min element is 1", "category": "Python"}, {"instruction": "Write a Python code using list comprehension to get the power of each element in a list.", "input": "list_num = [1, 2, 3, 4, 5]", "output": "power_list = [num**2 for num in list_num]\nprint(power_list)  # prints [1, 4, 9, 16, 25]", "category": "Python"}, {"instruction": "Edit the following code to insert a new item at the end of a given Python list.", "input": "items = [1, 2, 3]\nnew_item = 4", "output": "items = [1, 2, 3] + [new_item]\nprint(items)  # prints [1, 2, 3, 4]", "category": "Python"}, {"instruction": "Calculate the number of valid permutations of length n with respect to a given set of n distinct elements.", "input": "n=5", "output": "#Calculate the number of valid permutations of length n with respect to a given set of n distinct elements.\n\ndef num_permutations(n):\n    if n == 0:\n        return 0\n    else:\n        return math.factorial(n)\n\nif __name__ == '__main__':\n    print(num_permutations(5))", "category": "Python"}, {"instruction": "Create a function to calculate log base 10 in Python.", "input": "", "output": "import math\n\ndef log10(x):\n    return math.log10(x)\n\nif __name__ == '__main__':\n    print(log10(10))", "category": "Python"}, {"instruction": "Design a data structure to store books that keeps track of page numbers.", "input": "", "output": "class Book:\n    def __init__(self, title, num_pages):\n        self.title = title\n        self.num_pages = num_pages\n        self.pages_read = 0\n    \n    def read(self, num_pages):\n        self.pages_read += num_pages\n\n# Create an instance\nbook = Book(\"War and Peace\", 1220)\n\n# Read some pages\nbook.read(50)\n\n# Check the number of pages read\nbook.pages_read # returns 50", "category": "Python"}, {"instruction": "Create a list in Python of elements 0-9 in random order.", "input": "", "output": "import random \n\n# Generate a list of 10 numbers\nnums = [i for i in range(10)]\n\n# Shuffle the list\nrandom.shuffle(nums) \n\n# Print the shuffled list\nprint(nums) # [5, 0, 2, 3, 9, 8, 4, 1, 7, 6]", "category": "Python"}, {"instruction": "Given an array of integers, write an algorithm to find the maximum difference between any two elements in the array.", "input": "nums = [3, 2, 7, 1, 4]", "output": "def find_max_difference(nums):\n    # Initialize a max difference\n    max_diff = float('-inf')\n    \n    # Iterate through the array\n    for i in range(1, len(nums)):\n        diff = nums[i] - nums[i-1]\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n\n# Call the function\nfind_max_difference([3, 2, 7, 1, 4]) # returns 6", "category": "Python"}, {"instruction": "Create a class in Python and define several functions for that class.", "input": "", "output": "class MyClass:\n    def __init__(self):\n        pass \n\n    def add(self, x, y):\n        return x + y\n\n    def subtract(self, x, y):\n        return x - y\n\n    def multiply(self, x, y):\n        return x * y\n\n    def divide(self, x, y):\n        return x / y", "category": "Python"}, {"instruction": "Find the longest substring of two characters that is a palindrome.", "input": "string = \"banana\"", "output": "def longest_palindrome(string):\n    # Create an empty substring\n    longest_substring = ''\n    \n    # Iterate through the string\n    for i in range(len(string)-1): \n        for j in range(i+1, len(string)):\n            substring = string[i:j+1]\n            if substring == substring[::-1] and len(substring) > len(longest_substring):\n                longest_substring = substring\n    return longest_substring\n\n# Call the function\nlongest_palindrome('banana') # returns 'anana'", "category": "Python"}, {"instruction": "Implement a random number generator in Python that returns a random number in the range of 1-100.", "input": "", "output": "import random\n\ndef rand_num():\n    return random.randint(1, 100)", "category": "Python"}, {"instruction": "Create a program that assigns an ID to each element of an array.", "input": "arr = [\"Car\", \"Bike\", \"Bus\"]", "output": "# Create program that assigns an ID to each element of an array\n\narr = [\"Car\", \"Bike\", \"Bus\"]\n\n# Initialize a counter\ncounter = 0\n\n# Loop over each element of the array\nfor element in arr:\n    # Assign an ID to the element (in this case, the counter value)\n    element_id = counter\n\n    # Print the assigned ID\n    print(f\"Element {element} is assigned ID {element_id}\")\n\n    # Increment the counter\n    counter += 1", "category": "Python"}, {"instruction": "Find the longest word in a piece of text.", "input": "The quick brown fox jumps over the lazy dog", "output": "# Find the longest word in a piece of text\n\n# Split the text into a list of words\nwords =  \"The quick brown fox jumps over the lazy dog\".split()\n\n# Initialize a variable to keep track of the longest word\nlongest_word = \"\"\n\n# Loop over each word in the list\nfor word in words:\n    # Check if the current word is longer than the longest word\n    if len(word) > len(longest_word):\n        # Update the longest word\n        longest_word = word\n\n# Print the longest word\nprint(longest_word)", "category": "Python"}, {"instruction": "Create a function that takes an array as a parameter and continuously adds each item to the total sum.", "input": "arr = [6, 4, 3, 10]", "output": "def addItems(arr):\n  total = 0\n  for number in arr:\n    total = total + number\n  return total", "category": "Python"}, {"instruction": "Construct a loop that prints the even numbers from 0 to 20, one number per line.", "input": "", "output": "for i in range(0, 21):\n    if i % 2 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Suggest a way to generate random passwords using Python.", "input": "", "output": "One way to generate random passwords using Python is to use the string module's methods. Using the string.ascii_letters and string.digits sequences, we can create a random sequence of alphanumeric characters. The string module's choice() function can then be used to randomly select characters from this sequence to create a new password string. The length of the password should be specified as an argument to the choice() function. For example, to generate an 8 character long password, you can use string.choice(string.ascii_letters + string.digits, 8).", "category": "Python"}, {"instruction": "Write a script in Python to make an http request and extract the title of the web page.", "input": "url = 'https://en.wikipedia.org/wiki/Deep_learning'", "output": "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_page_title(url):\n    \"\"\"\n    This function makes an HTTP request to the given URL and extracts the title of the web page.\n    \"\"\"\n    response = requests.get(url)\n    soup = BeautifulSoup(response.content, 'html.parser')\n    return soup.title.string\n\nprint(get_page_title('https://en.wikipedia.org/wiki/Deep_learning'))", "category": "Python"}, {"instruction": "Explain what is Cross-validation in Machine Learning.", "input": "", "output": "Cross-validation is a technique used to evaluate a machine learning model by dividing the dataset into training and validation sets. The model is trained on the training set, and its performance is evaluated on the validation set. In other words, cross-validation is a method for selecting model hyperparameters and for assessing performance of a model. It is a technique used to ensure that we are not overfitting to the training data and evaluate the accuracy of a model on unseen data. This can be done by splitting the data into a set of folds, typically 5 - 10, and running model training and testing k times, with each time one of the folds as the validation set and the other folds as the training set. The result of this process is the average validation accuracy across the k folds of the data. This gives us a better understanding of how the model will perform in production.", "category": "Python"}, {"instruction": "Create a class called 'Product' in Python and assign the following attributes to it.", "input": "name, price, description", "output": "class Product:\n    \"\"\"\n    A class that represents a product with its attributes.\n    \"\"\"\n    def __init__(self, name, price, description):\n        \"\"\"\n        Initialize a Product object.\n        \"\"\"\n        self.name = name \n        self.price = price \n        self.description = description", "category": "Python"}, {"instruction": "Suggest a way to filter out comments containing profane language in a text corpus.", "input": "", "output": "One way to filter out comments containing profane language in a text corpus is to use a rule-based algorithm with a list of profane words and phrases. This algorithm can be configured to identify words or phrases in a given corpus that match the list of profane words and phrases, and flag them as inappropriate. A second approach is to use natural language processing to identify profane content. This involves training a machine learning model to detect profanity by analyzing patterns in the text, such as its word or phrase context, structure, and so on.", "category": "Python"}, {"instruction": "Translate the following statement from English to Python code: \"If the value of x is greater than 10, print 'x is greater than 10.\"", "input": "", "output": "if x > 10:\n    print(\"x is greater than 10.\")", "category": "Python"}, {"instruction": "Write a reusuable function in Python that takes two string variables and returns the longest string.", "input": "", "output": "def longest_string(str1, str2):\n    if len(str1) > len(str2):\n        return str1\n    else:\n        return str2", "category": "Python"}, {"instruction": "What is abstraction in computer programming?", "input": "", "output": "Abstraction in computer programming is the process of hiding details of how the code is implemented and only exposing the information that is necessary. It involves separating a complex task into simpler and smaller units in order to solve problems efficiently. It also helps to break down a complex system into its fundamental parts and allow a programmer to focus on the most important parts.", "category": "Python"}, {"instruction": "Write a code to traverse a matrix in spiral form.", "input": "", "output": "def spiral_traverse(matrix):\n    top = 0\n    left = 0\n    right = len(matrix[0])-1\n    bottom = len(matrix)-1\n    while top <= bottom and left <= right:\n        for i in range(left, right+1):\n            print(matrix[top][i], end = ' ')\n        top += 1\n        for i in range(top, bottom+1):\n            print(matrix[i][right], end = ' ')\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left-1, -1):\n                print(matrix[bottom][i], end = ' ')\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top-1, -1):\n                print(matrix[i][left], end = ' ')\n            left += 1", "category": "Python"}, {"instruction": "Implement a search algorithm to search a node in a binary search tree.", "input": "", "output": "def search(node, key):\n   if node is None or node.key == key:\n        return node\n \n   if node.key < key:\n        return search(node.right, key)\n \n    return search(node.left, key)", "category": "Python"}, {"instruction": "Write a code in Python to remove all the duplicate elements from a list and print the result.", "input": "list: [2, 3, 3, 4, 5, 5]", "output": "\"\"\"\nWrite a code in Python to remove all the duplicate elements from a list and print the result\n\"\"\"\n\ndef remove_duplicates(lst):\n    new_list = []\n    for i in lst:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n\nif __name__ == '__main__':\n    lst = [2,3,3,4,5,5]\n    print(\"List with duplicates removed:\", remove_duplicates(lst))", "category": "Python"}, {"instruction": "Given two lists, write a Python program to print all common elements in them.", "input": "list1 = [10, 20, 30, 40] \nlist2 = [30, 40, 50, 60]", "output": "def common_elements(list1, list2):\n    common = []\n    for elem in list1:\n        if elem in list2:\n            common.append(elem)\n    return common", "category": "Python"}, {"instruction": "Write a Python program to insert a given string at a specific position within another given string.", "input": "string1 = 'Python is fun' \nstring2 = 'awesome '\nposition = 7", "output": "def insert_string(string1, string2, pos):\n    return string1[:pos] + string2 + string1[pos:]", "category": "Python"}, {"instruction": "Given the following nested loop structure, write code to print all elements in the array.", "input": "arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "for row in arr:\n    for elem in row:\n        print(elem, end=' ')\n    print()\n\n# Output\n# 1 2 3\n# 4 5 6\n# 7 8 9", "category": "Python"}, {"instruction": "Write a Python code snippet to check if an integer is between 5 and 10 (including both).", "input": "x = 8", "output": "if 5 <= x <= 10:\n    print('The integer is between 5 and 10.')\nelse:\n    print('The integer is not between 5 and 10.')", "category": "Python"}, {"instruction": "Write a Python code to construct a dictionary from the given input.", "input": "key_arr = [100, 200, 300]\nvalue_arr = [\"apple\", \"banana\", \"mango\"]", "output": "def dict_from_arrs(key_arr, value_arr):\n    return dict(zip(key_arr, value_arr))", "category": "Python"}, {"instruction": "Write a Python function to find the minimum element from the given array.", "input": "arr = [11, 9, 10, 14]", "output": "def find_min(arr):\n    return min(arr)", "category": "Python"}, {"instruction": "Create an array of the squared values of all elements of the given array.", "input": "arr = [2, 3, 6, 8]", "output": "def square_arr(arr):\n    return [x**2 for x in arr]", "category": "Python"}, {"instruction": "Explain how a support vector machine works.", "input": "", "output": "A Support Vector Machine (SVM) is a supervised learning algorithm that can be used for binary classification, regression, or outlier detection. SVMs use a hyperplane to separate data points into two categories, each represented by a different class. The hyperplane divides data points into classes by minimizing the distance between them and maximizing the margin between the two classes, while creating a decision boundary. SVMs then use a kernel function to project the data into a higher dimensional space and maximize the distance between observations. This allows SVMs to identify non-linear patterns in data and find the optimal decision boundary. The support vectors are points closest to the decision boundary", "category": "Python"}, {"instruction": "Differentiate the methods of machine learning and explain the differences.", "input": "", "output": "There are three main methods of machine learning: supervised learning, unsupervised learning, and reinforcement learning. In supervised learning, the model is trained using labeled data, that is, data that has its output (or target) value given to the model. Unsupervised learning models learn by extracting patterns from unlabeled datasets without the need for a defined output value. Reinforcement learning models use reward-based learning to maximize a reward signal by taking actions in an environment. Supervised and unsupervised learning use input data and a set of instructions to learn from known data. Reinforcement learning, on the other hand, uses an environment with a reward system to teach an agent how to achieve a goal through a series of trial-and-error based decisions.", "category": "Python"}, {"instruction": "Create a function called `replace_words` which replaces all the words specified in; the given list of words with their corresponding synonyms.", "input": "string = \u201cThe quick brown fox jumps over the lazy dog\u201d\nwords = [[\u2018quick\u2019, \u2018fast\u2019], [\u2018lazy\u2019, \u2018sluggish\u2019]]", "output": "def replace_words(string, words): \n    for item in words: \n        string = string.replace(item[0], item[1])\n    return string\n\nreplaced_string = replace_words(string, words)\nprint(replaced_string)", "category": "Python"}, {"instruction": "Create a function named `binary_search` that implement a binary search algorithm.", "input": "list = [1, 3, 5, 7, 8, 9, 11]\ngoal = 5", "output": "def binary_search(list, goal): \n    start = 0 \n    end = len(list) - 1\n    while start <= end: \n        mid = (start + end) // 2\n        if list[mid] == goal: \n            return mid \n        elif goal < list[mid]: \n            end = mid - 1 \n        else: \n            start = mid + 1\n    return -1\n\nresult = binary_search(list, goal)\nprint(result)", "category": "Python"}, {"instruction": "Assign 1 to all the elements of a 2D array that are divisible by 3.", "input": "arr = [[1,2,3],\n       [10,15,20],\n       [3, 8, 6]]", "output": "for row in range(len(arr)): \n    for col in range(len(arr[row])): \n        if arr[row][col] % 3 == 0: \n            arr[row][col] = 1\nprint(arr)", "category": "Python"}, {"instruction": "Write a code to filter and print all lines that end in the given character.", "input": "string = \u2018Hello world\\nMy name is John\\nHello again\\nToday is Monday\u2019\ncharacter = \u2018n\u2019", "output": "lines = string.split(\"\\n\") \nfor line in lines: \n    if line.endswith(character): \n        print(line)", "category": "Python"}, {"instruction": "Create a function that detects whether a given string is a palindrome.", "input": "string = \u2018level\u2019", "output": "def detect_palindrome(string): \n    reversed_string = string[::-1] \n    if (string == reversed_string): \n        return \"This string is a palindrome\" \n    else: \n        return \"This string is not a palindrome\"\n\nprint(detect_palindrome(string))", "category": "Python"}, {"instruction": "Create a function called `convert_csv_to_json` to convert the following csv to the corresponding JSON formatt.", "input": "city,country,latitude,longitude\nFrankfurt,Germany,50.1117,8.6785\nLondon,UK,51.4667,-0.25", "output": "import json\n\ndef convert_csv_to_json(csv_string):\n    lines = csv_string.split(\"\\n\")\n    keys = lines[0].split(\",\")\n    out_list = [] \n    for line_num in range(1, len(lines)):\n        line = lines[line_num]\n        values = line.split(\",\")\n        item = {}\n        for key_num in range(0, len(keys)):\n            key = keys[key_num]\n            val = values[key_num]\n            item[key] = val\n        out_list.append(item)\n    return json.dumps(out_list)", "category": "Python"}, {"instruction": "Create a function that multiplies each element of the input array by 10 and returns the result.", "input": "arr = [2, 3, 4]", "output": "def multiply_by_10(arr):\n  newArr = []\n  for i in arr:\n    newArr.append(i * 10)\n  return newArr\n\narr = [2, 3, 4]\n\nprint(multiply_by_10(arr))", "category": "Python"}, {"instruction": "Create a Python function that takes an array of strings and returns a dictionary whose keys are the strings and the values are the lengths of the strings.", "input": "arr = [\"apple\", \"banana\", \"cherry\"]", "output": "def array_lengths_to_dict(arr):\n    my_dict = {}\n    for s in arr:\n        my_dict[s] = len(s)\n    return my_dict\n\narr = [\"apple\", \"banana\", \"cherry\"]\n\nprint(array_lengths_to_dict(arr))", "category": "Python"}, {"instruction": "Write a Python program that finds the longest common subsequence of two strings.", "input": "str1 = \"ABGXABCAB\"\nstr2 = \"ZXABGAYBCB\"", "output": "def lcs(str1, str2):\n    m = len(str1)\n    n = len(str2)\n\n    table = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                table[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    lcs = []\n    i = m\n    j = n\n    while i > 0 and j > 0:\n        if str1[i-1] == str2[j-1]:\n            lcs.append(str1[i-1])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs[::-1]\n\n\nstr1 = \"ABGXABCAB\"\nstr2 = \"ZXABGAYBCB\"\n\nprint(lcs(str1, str2))", "category": "Python"}, {"instruction": "Write a Python function to check if a given number is a prime number or not. A prime number is an integer greater than 1 which is not divisible by any other numbers.", "input": "11", "output": "def is_prime(n):\n  #Check if n islarger than one \n  if n > 1:\n    # Check if n is divisible by any number between2 and n\n    for i in range(2,n):\n      if (n % i) == 0:\n        return False\n    else:\n      return True\n  else:\n    return False", "category": "Python"}, {"instruction": "Write a Python code snippet for a function to calculate the number of words in a given string.", "input": "myString = \"The sky is blue\"", "output": "def countWords (myString): \n    return len(myString.split()) \n\nnum = countWords(myString) \nprint(\"Number of words =\", num)", "category": "Python"}, {"instruction": "Create an artificial neural network to predict the stock prices.", "input": "", "output": "import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \nfrom sklearn.neural_network import MLPRegressor\n \n# Read data into a dataframe \ndf = pd.read_csv('stock_data.csv') \n \n# Split the data into features and target \nX = np.array(df[['open', 'high', 'low', 'volume']]) \ny = np.array(df['close']) \n \n# Create the model and fit the data \nmodel = MLPRegressor(hidden_layer_sizes=(4,4,4), max_iter=20000) \nmodel.fit(X,y) \n \n# Make predictions based on the test data \npredictions = model.predict(X) \n \n# Plot the results to compare the predicted and actual values \nplt.scatter(y, predictions) \nplt.xlabel('Actual Prices') \nplt.ylabel('Predicted Prices') \nplt.title('Predicted vs Actual Stock Prices') \nplt.show()", "category": "Python"}, {"instruction": "Write a code to print all prime numbers up to 1000.", "input": "", "output": "def is_prime(x):\n    if x<2:\n        return False\n    for i in range(2, int(x**0.5)+1):\n        if x % i == 0:\n            return False\n    return True\n\nfor x in range(2,1001):\n    if is_prime(x):\n        print(x)", "category": "Python"}, {"instruction": "Convert a Python function to a JavaScript function.", "input": "def add(a, b):\n    return a + b", "output": "function add(a, b) {\n    return a + b;\n}", "category": "Python"}, {"instruction": "Design a function to select the nth smallest element from an array.", "input": "int[] arr = {11, -2, 4, 9, -5, 7}", "output": "def selectNthSmallest(arr, n): \n \n    # sort the array \n    arr = sorted(arr) \n  \n    # return the nth smallest element \n    return arr[n-1]  \n      \n# Driver code \narr = [11, -2, 4, 9, -5, 7]  \nn = 3\n  \n# Output \nprint(selectNthSmallest(arr, n))", "category": "Python"}, {"instruction": "Given a list containing strings, write a Python program to filter out unique strings.", "input": "mylist = [\"fox\", \"fox\", \"cat\", \"dog\", \"dog\"]", "output": "mylist = list(set(mylist))\nprint(mylist)", "category": "Python"}, {"instruction": "Determine the number of words in the given passage using text processing in Python.", "input": "passage = \"Once upon a midnight dreary, while I pondered, weak and weary\"", "output": "n_words = len(passage.split())\nprint(\"The number of words in the passage is:\", n_words)", "category": "Python"}, {"instruction": "Create a function in Python that takes a string and prints the frequency table of all its characters.", "input": "string = \u201cHello world\"", "output": "def get_freq_table(string): \n    char_freq_dict = dict() \n    for char in string: \n        if char in char_freq_dict.keys(): \n            char_freq_dict[char] += 1\n        else: \n            char_freq_dict[char] = 1\n    print (\"Frequency table of given string is : \\n\",char_freq_dict) \n\nget_freq_table(string)", "category": "Python"}, {"instruction": "Given two strings s1 and s2, find the number of times the characters in s2 are present in s1.", "input": "s1 = \"Hello World\", s2 = \"o\"", "output": "s1 = \"Hello World\"\ns2 = \"o\"\n\ndef count_characters(s1, s2):\n    count = 0\n    for c in s1:\n        if c == s2:\n            count += 1\n    return count\n\nprint(count_characters(s1,s2))", "category": "Python"}, {"instruction": "Given a JSON object, write a Python program to convert it into a Pandas dataframe.", "input": "{\n  \"name\": \"John\",\n  \"age\": 30,\n  \"city\": \"New York\"\n}", "output": "import pandas as pd\n\ndata = {\n  \"name\": \"John\",\n  \"age\": 30,\n  \"city\": \"New York\"\n}\n\ndf = pd.DataFrame([data])", "category": "Python"}, {"instruction": "Filter out the integers from the list that are divisible by 6.", "input": "nums = [1, 2, 4, 6, 7, 8, 10, 12, 14, 18]", "output": "nums = [1, 2, 4, 6, 7, 8, 10, 12, 14, 18]\n\ndef filter_divisible_by_6(nums):\n    return [num for num in nums if num % 6 == 0]\n\nprint(filter_divisible_by_6(nums))", "category": "Python"}, {"instruction": "Rewrite the code to remove the unnecessary boolean flag", "input": "flag = False\ndef printFooBar(x):\n    fooBarArray = []\n    for i in range(x):\n        fooBarArray.append(i)\n        flag = True\n    if flag and len(fooBarArray) > 0:\n        print(fooBarArray)", "output": "def printFooBar(x):\n    fooBarArray = []\n    for i in range(x):\n        fooBarArray.append(i)\n    if len(fooBarArray) > 0:\n        print(fooBarArray)", "category": "Python"}, {"instruction": "Create an algorithm to implement a stack using a single queue.", "input": "", "output": "class Stack:\n    def __init__(self):\n        self.queue = []\n\n    def push(self, item):\n        self.queue.append(item)\n        # Reverse the queue to implement a stack\n        self.queue.reverse()\n\n    def pop(self):\n        if self.queue:\n            # Reverse the queue to implement a stack\n            self.queue.reverse()\n            return self.queue.pop()\n        return None", "category": "Python"}, {"instruction": "Create an algorithm that sorts a given list of numbers.", "input": "[1, 5, -3, 0, 8]", "output": "def bubble_sort(list):\n  for i in range(len(list)):\n   for j in range(len(list)-1-i):\n    if list[j] > list[j+1]:\n     list[j], list[j+1] = list[j+1], list[j]\n  return list\n\nbubble_sort([1,5,-3,0,8])", "category": "Python"}, {"instruction": "You need to develop a function which checks if a given string is palindrome or not.", "input": "String: \"redder\"", "output": "def is_palindrome(input_string): \n    # Convert string to lower case to ignore capitalization.\n    input_string = input_string.lower() \n    # Reverse input string \n    rev_string = reversed(input_string) \n  \n    # Check if strings are equal or not \n    if (list(input_string) == list(rev_string)): \n        return True\n    else: \n        return False\n  \nprint(is_palindrome(\"redder\"))", "category": "Python"}, {"instruction": "Given two strings, develop a function to calculate edit distance between them.", "input": "Strings: \"kitten\" and \"sitting\"", "output": "def edit_distance(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n\n    dp = [[0 for x in range(n2 + 1)] for x in range(n1 + 1)] \n\n    for i in range(n1 + 1): \n        for j in range(n2 + 1): \n            if i == 0: \n                dp[i][j] = j\n            elif j == 0: \n                dp[i][j] = i\n            elif str1[i - 1] == str2[j - 1]: \n                dp[i][j] = dp[i - 1][j - 1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j - 1],\n                                   dp[i - 1][j],\n                                   dp[i - 1][j - 1]) \n  \n    return dp[n1][n2] \n\nedit_distance(\"kitten\", \"sitting\")", "category": "Python"}, {"instruction": "Develop a function to encode a text string in a ROT13 manner.", "input": "String: \"Hello World\"", "output": "def rot13(message):\n    output = []\n    for char in message:\n        char_code = ord(char)\n        if char_code >= ord('A') and char_code <= ord('Z'):\n            # Rotate lower case characters\n            char_code += 13\n            if char_code > ord('Z'):\n                char_code -= 26\n        elif char_code >= ord('a') and char_code <= ord('z'):\n            # Rotate upper case characters\n            char_code += 13\n            if char_code > ord('z'):\n                char_code -= 26\n        output.append(chr(char_code))\n    return ''.join(output)\nprint(rot13(\"Hello World\"))", "category": "Python"}, {"instruction": "You need to develop a code that takes two strings and returns a boolean if the substrings are anagrams.", "input": "Strings: \"computer\" and \"computer\"", "output": "def isAnagram (str1, str2): \n    # Get length of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If length is not same, then strings are not anagrams \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n  \n    return True\n\nprint (isAnagram(\"computer\", \"computer\"))", "category": "Python"}, {"instruction": "Construct a data mining program to mine public internet data.", "input": "Twitter datasets", "output": "import tweepy\n \nCONSUMER_KEY = 'XXXXXXXXXXXXXXXXXXX'\nCONSUMER_SECRET = 'XXXXXXXXXXXXXXXXXXX'\nACCESS_TOKEN = 'XXXXXXXXXXXXXXXXXXX'\nACCESS_TOKEN_SECRET = 'XXXXXXXXXXXXXXXXXXXX'\n\n# authenticating\nauth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)\nauth.set_access_token(ACCESS_TOKEN, ACCESS_TOKEN_SECRET)\n\n# initializing the API for data mining\napi = tweepy.API(auth)\n\n# pulling the data from Twitter\ndata = api.search(q=\"data mining\", lang=\"en\", count=100, tweet_mode=\"extended\")\n\n# processing the data\nfor tweet in data:\n    print(tweet.full_text) # print the full text of each tweet", "category": "Python"}, {"instruction": "Implement a DFS algorithm for a tree data structure.", "input": "", "output": "def DFS(root):\n    S = []\n    visited = []\n \n    S.append(root)\n \n    while len(S) > 0:\n        node = S.pop()\n        visited.append(node)\n \n        for vertex in node.get_adjacent_vertices():\n            if vertex not in visited:\n                S.append(vertex)\n    return visited", "category": "Python"}, {"instruction": "Create a function in Python to add two numbers, which may take any number of arguments.", "input": "", "output": "def add(*nums):\n    \"\"\"Add two or more numbers.\"\"\"\n    # Initialize sum\n    result = 0\n\n    # Iterate through given numbers\n    for num in nums:\n        result += num\n\n    # Return the sum \n    return result\n    \n# Example\nsum = add(15, 7, 10)\nprint(sum)\n# Output: 32", "category": "Python"}, {"instruction": "Print the largest number in a given array in Python.", "input": "my_array = [5, 11, 7, 10, 2]", "output": "my_array = [5, 11, 7, 10, 2]\n\n# Function to find the largest number\ndef find_largest_number(array):\n    # Assume that the first item in the array is the largest\n    largest = array[0]\n\n    # Now loop through the array to find the largest number\n    for num in array:\n        # If a number is larger than the assumed largest, it is the new largest number\n        if num > largest:\n            largest = num\n\n    # Return the largest number\n    return largest\n\n# Call the function\nlargest = find_largest_number(my_array)\n\n# Print the result\nprint(largest)\n# Output: 11", "category": "Python"}, {"instruction": "Write a function in Python to normalize a given string by removing white spaces, changing to lower case and replacing special characters with underscores.", "input": "\"Hello World!\"", "output": "def normalize_string(string):\n    \"\"\"Normalize a string by removing white spaces, changing to lower case and replacing special characters with underscores.\"\"\"\n    # Remove whitespaces\n    normalized_string = string.replace(\" \", \"\")\n\n    # Convert to lowercase\n    normalized_string = normalized_string.lower()\n\n    # Replace special characters\n    characters = [\"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \"*\"]\n    for c in characters:\n        normalized_string = normalized_string.replace(c, \"_\")\n\n    return normalized_string\n\n# Example\nnormalized_string = normalize_string(\"Hello World!\")\nprint(normalized_string)\n# Output: hello_world_", "category": "Python"}, {"instruction": "Train a Random Forest classifier in Python on the Iris dataset.", "input": "", "output": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Import Iris dataset\niris_data = pd.read_csv(\"iris.csv\")\n\n# Split dataset into training and testing\nX = iris_data.drop(\"species\", axis=1)\ny = iris_data['species']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n\n# Train a Random Forest classifier\nclf = RandomForestClassifier() \nclf.fit(X_train, y_train)\n\n# Make predictions\npreds = clf.predict(X_test)", "category": "Python"}, {"instruction": "Edit the given Python code to compute the mean of the given list of numbers.", "input": "my_list = [10, 20, 30, 40, 50]\nsum = 0.0\n\nfor x in my_list:\n  sum += x", "output": "my_list = [10, 20, 30, 40, 50]\nsum = 0.0\n\nfor x in my_list:\n  sum += x\n\nmean = sum / len(my_list)", "category": "Python"}, {"instruction": "Create a Python program to convert a given temperature in Celsius to Kelvin.", "input": "", "output": "def convert_celsius_to_kelvin(celsius):\n    kelvin = celsius + 273.15\n    return kelvin", "category": "Python"}, {"instruction": "Generate an 8 character random string.", "input": "", "output": "import string\nimport random\n\ndef gen_random_string(size):\n    letters = string.ascii_letters + string.digits\n    return ''.join(random.choice(letters) for i in range(size))\n\nrandom_string = gen_random_string(8)\nprint(random_string)", "category": "Python"}, {"instruction": "Write a function to find all elements that appear more than once in a given array.", "input": "[1, 3, 2, 3, 8, 9, 10]", "output": "def find_duplicates(numbers):\n    seen = set()\n    duplicates = set()\n    for num in numbers:\n        if num in seen:\n            duplicates.add(num)\n        else:\n            seen.add(num)\n    return list(duplicates)", "category": "Python"}, {"instruction": "Write a function to remove the first occurrence of a specified element from a given list.", "input": "[2, 4, 8, 9, 4]", "output": "def remove_first_occurrence(arr, element):\n    if element in arr:\n        arr.remove(element)\n    return arr", "category": "Python"}, {"instruction": "Develop an algorithm to modify a given string by changing the case of each character.", "input": "string = \"Hello World\"", "output": "def modify_string(string):\n  new_string = \"\"\n  for i in string:\n    if (i.isupper()) == True:\n      new_string += i.lower()\n    elif (i.islower()) == True:\n      new_string += i.upper()\n  return new_string", "category": "Python"}, {"instruction": "Edit the given code to validate an IP address.", "input": "# Function to validate an IPv4 address\ndef validate_IPv4(IP):", "output": "# Function to validate an IPv4 address\ndef validate_IPv4(IP):\n    # Split the IP string by '.' \n    ip_split = IP.split('.')\n    \n    #Checking for the corner cases \n    if (len(ip_split) == 4) and (1 <= int(ip_split[0]) <= 223) and (int(ip_split[0]) != 127) and (int(ip_split[0]) != 169 or int(ip_split[1]) != 254) and (0 <= int(ip_split[1]) <= 255 and 0 <= int(ip_split[2]) <= 255 and 0 <= int(ip_split[3]) <= 255): \n        return \"Valid IP!\"\n    else: \n        return \"Invalid IP!\"", "category": "Python"}, {"instruction": "You need to write an algorithm to find the third largest value in a Binary Search Tree.", "input": "8 \n      /   \\\n     3     10\n    / \\     \\\n   1   6     14\n      / \\    /\n     4   7  13", "output": "def third_largest(root):\n    if root is None:\n        return None\n \n    queue = []\n    queue.append(root)\n    while len(queue):\n        curr = queue.pop(0)\n \n        if curr.right:\n            queue.append(curr.right)\n        if curr.left:\n            queue.append(curr.left)\n \n    if len(queue)>1:\n        return queue[1].val\n    else:\n        return root.val", "category": "Python"}, {"instruction": "Develop an algorithm to print all the possible n-ary trees with a given number of nodes.", "input": "n=4", "output": "# Node class \nclass Node: \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.children = [] \n\n# A function to print the n-ary tree \ndef printNaryTreeUtil(root, func, level = 0): \n   \n    # If node is None, simply return \n    if root is None: \n        return\n  \n    # Process child nodes of root recursively \n    for i in range(len(root.children)): \n        printNaryTreeUtil(root.children[i], func, \n                          level + 1) \n  \n    # Call the function for the root \n    func(root, level) \n  \n# Function to generate n-ary trees    \ndef constructNaryTree(nodes): \n  \n    # Create a root node \n    root = Node(nodes[0]) \n  \n    # Create a stack which will be used to \n    # create children of root and their subtrees \n    s = [root] \n  \n    # Traverse the tree nodes in pre order fashion \n    i = 1\n    while i < len(nodes): \n  \n        node = s[len(s) - 1] \n        child = Node(nodes[i]) \n        node.children.append(child) \n        s.append(child) \n  \n        # If number of children of the node is equal to \n        # its degree, remove the node and its subtree \n        if len(node.children) == node.degree: \n            s.pop() \n  \n        i += 1\n  \n    return root \n    \n# Driver code \nif __name__ == '__main__': \n\n\t# Given number of nodes \n\tn = 4\n\n\t# Generate the nodes \n\tnodes = list(range(1, n + 1)) \n\n\t# Construct n-ary tree \n\troot = constructNaryTree(nodes) \n\n\t# Function to print the tree \n\tdef printTree(node, level): \n\t\tprint('\\t' * level, node.data, sep=\"\") \n\n\t# Print the tree \n\tprintNaryTreeUtil(root, printTree)", "category": "Python"}, {"instruction": "Generate a random string with the a capital letter followed by two lower case letters.", "input": "", "output": "import string\nimport random\ndef random_string():\n\n  capitalletter = random.choice(string.ascii_uppercase)\n  lowercaseletter1 = random.choice(string.ascii_lowercase)\n  lowercaseletter2 = random.choice(string.ascii_lowercase)\n\n  return capitalletter + lowercaseletter1 + lowercaseletter2", "category": "Python"}, {"instruction": "Using python, implement a method to find the longest common subsequence in two strings", "input": "str1 = \"AGGTAB\"\nstr2 = \"GXTXAYB\"", "output": "def lcs(str1, str2, n, m): \n    if n == 0 or m == 0:          \n        return 0\n  \n    elif str1[n-1] == str2[m-1]:   \n        return 1 + lcs(str1, str2, n-1, m-1) \n \n    else: \n        return max(lcs(str1, str2, n, m-1),    \n                   lcs(str1, str2, n-1, m))", "category": "Python"}, {"instruction": "Transform and print the given list which includes negative and positive numbers.", "input": "nums = [-5, -2, 3, 7, 1]", "output": "nums = [-5, -2, 3, 7, 1]\n\ndef transform(nums):\n return [abs(num) for num in nums]\n \nprint(transform(nums))", "category": "Python"}, {"instruction": "Write a Python code snippet that combines the elements of two lists into a single list.", "input": "list_1 = [\"Cat\", \"Dog\", \"Fish\"]\nlist_2 = [\"Monkey\", \"Tiger\", \"Lion\"]", "output": "single_list = list_1 + list_2", "category": "Python"}, {"instruction": "Create a function in Python that adds a new item to the beginning of a list.", "input": "my_list = [\"Cats\", \"Dogs\", \"Fish\"]", "output": "def insert_beginning(my_list, item):\n my_list = [item] + my_list\n return my_list", "category": "Python"}, {"instruction": "Create a class that detects if a String contains a palindrome", "input": "", "output": "class PalindromeChecker:\n  def __init__(self, word):\n    self.word = word\n \n  def contains_palindrome(self):\n    for i in range(len(self.word)):\n      if self.word[i] == self.word[len(self.word) - 1 - i]:\n        return True\n    return False", "category": "Python"}, {"instruction": "Create an algorithm to determine the maximum element in a given list.", "input": "my_list = [3, 6, 4, 1]", "output": "def find_max(my_list):\n    max_num = 0\n    for num in my_list:\n        if num > max_num:\n            max_num = num\n    return max_num", "category": "Python"}, {"instruction": "Write a function which takes a number and returns the Fibonacci sequence up to that number.", "input": "n = 10", "output": "def fibonacci(n):\n    fib_list = [1]\n    if n == 1:\n        return fib_list\n    else:\n        fib_list.append(1)\n        while len(fib_list) < n:\n            fib_list.append(fib_list[-1] + fib_list[-2])\n        return fib_list", "category": "Python"}, {"instruction": "Determine what header is needed for the following function.", "input": "def split_list(a_list):\n    mid_point = int(len(a_list) / 2)\n    first_half = a_list[:mid_point]\n    second_half = a_list[mid_point:]\n    return first_half, second_half", "output": "import math\ndef split_list(a_list):\n    mid_point = int(math.floor(len(a_list) / 2))\n    first_half = a_list[:mid_point]\n    second_half = a_list[mid_point:]\n    return first_half, second_half", "category": "Python"}, {"instruction": "Implement a web service in Python to retrieve the current temperature from an external API.", "input": "", "output": "import requests\n\n# Gets the current temperature from an external API\ndef get_current_temperature():\n    response = requests.get('https://weather.com/api/current-temperature')\n    response_json = response.json()\n    return response_json['current_temperature']", "category": "Python"}, {"instruction": "Write a function to check if an integer is a multiple of another integer.", "input": "", "output": "def is_multiple_of(num, multiple):\n    if num % multiple == 0:\n        return True\n    return False", "category": "Python"}, {"instruction": "Design a function in Python which takes a list of characters and returns the frequency of each character as a dictionary.", "input": "[\"a\", \"b\", \"c\", \"a\", \"a\", \"b\", \"d\"]", "output": "def character_frequency(lst):\n    \"\"\"Function to count the frequency of each character in a list\"\"\"\n    frequencies = {}\n    for c in lst:\n        if c in frequencies:\n            frequencies[c] += 1\n        else:\n            frequencies[c] = 1\n    return frequencies\n\nprint(character_frequency([\"a\", \"b\", \"c\", \"a\", \"a\", \"b\", \"d\"]))\n# Output: {'a': 3, 'b': 2, 'c': 1, 'd': 1}", "category": "Python"}, {"instruction": "Using any programming language, write a program which takes a number as an input and outputs the first two prime numbers after it.", "input": "7", "output": "def find_next_prime_numbers(num):\n    \"\"\"This function takes a number as an input\n    and returns the first two prime numbers after it\"\"\"\n    prime_numbers = []\n    # Increment num to the first prime number\n    while not is_prime(num):\n        num += 1\n    # Append num to prime_numbers (first prime after input)\n    prime_numbers.append(num)\n    # Increment num to the second prime number\n    num += 1\n    while not is_prime(num):\n        num += 1\n    # Append num to prime_numbers (second prime after input)\n    prime_numbers.append(num)\n    # Return the list of prime numbers\n    return prime_numbers\n\ndef is_prime(num): \n    \"\"\"Returns True if number is prime\"\"\"\n    if num <= 1: \n        return False\n    for i in range(2, num): \n        if num % i == 0: \n            return False  \n    return True\n\nprint(find_next_prime_numbers(7)) # Output: [11, 13]", "category": "Python"}, {"instruction": "Create an algorithm to sort the given list of integers.", "input": "[5, 7, 2, 4, 9]", "output": "def sort(lst):\n    for i in range(len(lst)):\n        min_index = i\n        for j in range(i+1, len(lst)):\n            if lst[j] < lst[min_index]:\n                min_index = j\n        lst[i], lst[min_index] = lst[min_index], lst[i]\n    return lst", "category": "Python"}, {"instruction": "Create a function that takes in two strings and returns the number of times the first string is found within the second string.", "input": "string1 = \"ab\"\nstring2 = \"abcabcabc\"", "output": "def count_substring(string1, string2):\n  count = 0\n  for i in range(len(string2)-len(string1)+1):\n    if string2[i:i+len(string1)] == string1:\n      count += 1\n  return count", "category": "Python"}, {"instruction": "Create a function to calculate the network's throughput given a data rate and a size of the packets.", "input": "Data Rate = 10 Mbps; Packet size = 1000 bits", "output": "def calculate_throughput(data_rate, packet_size):\n    return data_rate / (packet_size / 8)  # converting bits to bytes\n\nif __name__ == '__main__':\n    data_rate = 10 # Mbps\n    packet_size = 1000 # bits\n    throughput = calculate_throughput(data_rate, packet_size)\n    print(throughput) # 125000.0", "category": "Python"}, {"instruction": "Develop a function which returns the position of a given element in a list.", "input": "my_list = [1, 2, 3, 4]\nelement = 3", "output": "def find_index(my_list, element):\n    for i in range(len(my_list)):\n        if my_list[i] == element:\n            return i", "category": "Python"}, {"instruction": "Design an algorithm to find the longest substring with no repeating characters in a given string.", "input": "\"abcabcbb\"", "output": "def longest_no_repeat(s):\n    max_length = 0\n    length = 0\n    seen = dict() \n    \n    for i in range(len(s)):\n        if s[i] not in seen:\n            length += 1\n            seen[s[i]] = i \n        else:\n            if length > max_length:\n                max_length = length\n            length = i - seen[s[i]]\n            for j in seen:\n                if seen[j] < seen[s[i]]:\n                    del seen[j]\n            seen[s[i]] = i\n  \n    if length > max_length:\n        max_length = length\n  \n    return max_length\n\nif __name__ == '__main__':\n    s = \"abcabcbb\"\n    print(longest_no_repeat(s))", "category": "Python"}, {"instruction": "Train a classification model to classify the sentiment of the given sentence.", "input": "Sentence: I love this new book!", "output": "\"\"\"\nTrain a classification model to classify the sentiment of the given sentence.\n\"\"\"\n\nimport numpy as np\nimport tensorflow as tf\n\n# Create the model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(input_dim=vocab_size, output_dim=embedding_dim),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(embedding_dim)),\n    tf.keras.layers.Dense(embedding_dim, activation='relu'),\n    tf.keras.layers.Dense(2, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])\n\n# Train the model\nmodel.fit(train_input_data, train_labels, epochs=num_epochs)\n\n# Make prediction\npred = model.predict([np.array([sentence])])\n\n# Print prediction result\nif pred[0][0] > pred[0][1]:\n  print(\"Negative sentiment\")\nelse:\n  print(\"Positive sentiment\")", "category": "Python"}, {"instruction": "Create a Python function to generate a random hex color code.", "input": "", "output": "import random\n\ndef generate_random_hex_color_code():\n  hex_code = \"#\"\n  for i in range(6):\n    random_digit = random.choice(\"0123456789ABCDEF\")\n    hex_code += random_digit\n  return hex_code\n\nif __name__ == '__main__':\n  print(generate_random_hex_color_code())", "category": "Python"}, {"instruction": "Write code to print out the numbers up to and including the provided number, starting at 1.", "input": "number = 10", "output": "\"\"\"\nWrite code to print out the numbers up to and including the provided number, starting at 1.\n\"\"\"\n\ndef print_numbers_up_to(n):\n for i in range(1, n+1):\n print(i)\n\nif __name__ == '__main__':\n print_numbers_up_to(10)", "category": "Python"}, {"instruction": "Write a function to make an API call to the Yelp API to return the list of top 10 restaurants near a given address.", "input": "Address: 1234 Main Street, San Francisco, CA", "output": "\"\"\"\nWrite a function to make an API call to the Yelp API to return the list of top 10 restaurants near a given address.\n\"\"\"\n\nimport requests\n\ndef get_top_10_restaurants(address):\n    endpoint = 'https://api.yelp.com/v3/businesses/search'\n    headers = {'Authorization': 'Bearer your_api_key'} \n    params = {\n        'term': 'restaurants',\n        'location': address,\n        'limit': 10\n    }\n\n    response = requests.get(endpoint, headers=headers, params=params)\n    data = response.json()['businesses']\n\n    restaurants = []\n    for restaurant in data:\n        restaurants.append(restaurant['name'])\n    return restaurants\n\nif __name__ == '__main__':\n    print(get_top_10_restaurants('1234 Main Street, San Francisco, CA'))", "category": "Python"}, {"instruction": "Debug the following code to print out the result of the polynomial.", "input": "polynomial equation: f(x) = x\u00b3 + 5x - 62\nx = 9", "output": "\"\"\"\nDebug the following code to print out the result of the polynomial.\n\"\"\"\n\ndef evaluate_polynomial(coefficients, x):\n    result = 0\n    for i in range(len(coefficients)):\n        result += coefficients[i] * (x ** (len(coefficients) - i - 1))\n    return result\n\ncoefficients = [1, 5, -62]\nx = 9\n\nprint(evaluate_polynomial(coefficients, x)) # 390", "category": "Python"}, {"instruction": "Find the position of an element in an array.", "input": "arr = [1, 4, 7, 9]\ntarget = 4", "output": "def find_index(arr, target):\n    for i, num in enumerate(arr):\n        if num == target:\n            return i\n\nfind_index(arr, target)\n# Output: 1", "category": "Python"}, {"instruction": "How would you convert this list of strings to integers in Python?", "input": "str_list = ['1', '2', '3', '4']", "output": "int_list = [int(i) for i in str_list]\n# Output: [1, 2, 3, 4]", "category": "Python"}, {"instruction": "Create discrete buckets in a given array using the following algorithm.", "input": "[2, 3, 6, 7, 8]", "output": "def create_buckets(arr):\n    buckets = []\n    x = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] != x + 1:\n            buckets.append(arr[i-1])\n            x = arr[i]\n    buckets.append(arr[-1])\n    return buckets\n\ncreate_buckets([2, 3, 6, 7, 8])\n# Output: [2, 3, 6, 8]", "category": "Python"}, {"instruction": "Generate a Python program to generate the square of a number.", "input": "", "output": "def square(n):\n    return n*n", "category": "Python"}, {"instruction": "Create a program to generate all subsets of a set.", "input": "input_set = {1, 2, 3}", "output": "def all_subsets(input_set):\n    res = [[]]\n    for ele in input_set:\n        res += [i + [ele] for i in res]\n    return res", "category": "Python"}, {"instruction": "What is an example of an algorithm for solving Sudoku?", "input": "", "output": "One example algorithm for solving Sudoku is called 'Backtracking'. This algorithm works by first filling in possible solutions for the empty cells, then using a series of rules to determine the correct answer. The algorithm starts with each cell of the Sudoku and tries different numbers for it until a solution is found. If a solution is not found, it backtracks and tries a different number. This process is repeated until all cells have been filled in with the correct numbers, or there is no solution.", "category": "Python"}, {"instruction": "Create a program to return all the prime numbers under the nth number.", "input": "n = 10", "output": "def find_primes(n):\n    primes = []\n    for num in range(2, n + 1):\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            primes.append(num)\n    return primes", "category": "Python"}, {"instruction": "How would you create a function to calculate factorial of a given number in Python?", "input": "", "output": "def factorial(n):\n    if n == 0: \n        return 1\n    return n * factorial(n-1)", "category": "Python"}, {"instruction": "Create a function to raise a given number to the Nth power.", "input": "", "output": "def power(n, x):\n    if x == 0:\n        return 1\n    return n * power(n, x-1)", "category": "Python"}, {"instruction": "Write a code to generate a random password using random library of Python.", "input": "length = 8", "output": "import string \nimport random \n\ndef generate_password(length): \n    # Generate a random string of characters \n    letters = string.ascii_letters + string.digits \n    password = ''.join(random.choice(letters) for i in range(length)) \n  \n    return password\n  \n# Driver Code\nlength = 8\nprint(generate_password(length))", "category": "Python"}, {"instruction": "Write a function to determine the largest integer in an unordered array.", "input": "array = [6, 8, 1, 3, 4]", "output": "def largest_int(arr): \n    largest_int = arr[0] \n    for i in range(1, len(arr)): \n        if arr[i] > largest_int: \n            largest_int = arr[i] \n    return largest_int \n  \n# Driver Code\narray = [6, 8, 1, 3, 4]\nprint(largest_int(array))", "category": "Python"}, {"instruction": "Create a function that takes an array of integers and prints out their product.", "input": "array = [1,2,3,4,5]", "output": "def product(arr): \n    product = 1\n    for x in arr: \n        product *= x \n    return product \n  \n# Driver Code \narray = [1,2,3,4,5]\nprint(product(array))", "category": "Python"}, {"instruction": "How would you test a Turing machine?", "input": "", "output": "A Turing machine can be tested by providing sample inputs that cover various cases and examining the output. An ideal test would consist of input strings that cover all possible scenarios, such as inputs with no computation, inputs with long computations, inputs that flip a single bit, etc. Additionally, Turing machine implementations should be tested for edge cases, such as providing inputs with invalid syntax or supplying an input of exceptional size.", "category": "Python"}, {"instruction": "Explain the process of linear search in a few sentences.", "input": "", "output": "Linear search is a technique for searching for an element in a list by repeatedly checking every element until a match is found or the end of the list is reached. It is typically implemented as a loop, where each element is compared to the search key until a match is found, or until all the elements have been searched.", "category": "Python"}, {"instruction": "Create a while loop in Python to increment a counter by 1 until it reaches 10.", "input": "counter = 0", "output": "while counter < 10:\n    counter += 1", "category": "Python"}, {"instruction": "Write a function that takes two strings and determines if the first string is one character away from the second string.", "input": "String 1 = \"cat\", String 2 = \"cot\"", "output": "def oneAway(str1, str2): \n    len1 = len(str1) \n    len2 = len(str2) \n    if abs(len1 - len2) > 1: \n        return False\n    i = 0\n    j = 0 \n    count = 0 \n    while i < len1 and j < len2: \n        if str1[i] != str2[j]: \n            if count == 1: \n                return False\n            count = 1\n            if len1 > len2: \n                i += 1\n            elif len1 < len2: \n                j += 1 \n            else: \n                i +=1\n                j += 1 \n        else: \n            i += 1\n            j += 1\n    if i < len1 or j < len2: \n        count += 1 \n    return count == 1", "category": "Python"}, {"instruction": "Given an array of numbers, find the longest increasing sequence in the array.", "input": "Array = [2, 3, 5, 4, 7, 9, 6, 8]", "output": "def longest_increasing_sequence(arr):\n    lengths = [1]*len(arr)\n    \n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lengths[i] = max(lengths[i], lengths[j] + 1)\n    \n    max_length_index = 0\n    for i in range(len(lengths)):\n        if lengths[i] > lengths[max_length_index]:\n            max_length_index = i\n    \n    current_index = max_length_index\n    sequence = [arr[max_length_index]]\n    for i in range(max_length_index-1, -1, -1):\n        if lengths[i] == lengths[current_index] - 1 and arr[i] < arr[current_index]:\n            sequence.append(arr[i])\n            current_index = i\n    sequence.reverse()\n    return sequence", "category": "Python"}, {"instruction": "Implement a function to perform in-place array rotation.", "input": "arr = [1, 2, 3, 4, 5]\nrotation = 2", "output": "def rotate_in_place(arr, rotation):\n    rotation %= len(arr)\n    \n    start = 0\n    count = 0\n    while count < len(arr):\n        current_index = start\n        current_value = arr[start]\n        next_index = (current_index + rotation) % len(arr)\n        while next_index != start:\n            next_value = arr[next_index]\n            arr[next_index] = current_value\n            current_index = next_index\n            current_value = next_value\n            next_index = (current_index + rotation) % len(arr)\n            count += 1\n        arr[start] = current_value\n        start += 1\n        count += 1", "category": "Python"}, {"instruction": "Given two strings, find the minimum number of operations required to convert one string to the other.", "input": "String 1 = \"horse\"\nString 2 = \"ros\"", "output": "def find_edit_distance(str1, str2):\n    len_str1 = len(str1)\n    len_str2 = len(str2)\n\n    matrix = [[0] * (len_str2+1) for _ in range(len_str1+1)]\n    for i in range(len_str1+1):\n        matrix[i][0] = i\n    for j in range(len_str2+1):\n        matrix[0][j] = j\n\n    for i in range(1, len_str1+1):\n        for j in range(1, len_str2+1):\n            if str1[i-1] == str2[j-1]:\n                matrix[i][j] = matrix[i-1][j-1]\n            else:\n                matrix[i][j] = min(matrix[i-1][j]+1, matrix[i][j-1]+1, matrix[i-1][j-1]+1)\n\n    return matrix[len_str1][len_str2]", "category": "Python"}, {"instruction": "Design a class for a grocery store inventory management system.", "input": "", "output": "class GroceryInventory:\n    def __init__(self):\n        self.inventory = {}\n\n    def add_item(self, item, quantity):\n        if item not in self.inventory:\n            self.inventory[item] = quantity\n        else:\n            self.inventory[item] += quantity\n            \n    def remove_item(self, item, quantity):\n        if item in self.inventory:\n            self.inventory[item] -= quantity\n            if self.inventory[item] <= 0:\n                del self.inventory[item]\n    \n    def get_inventory(self):\n        return self.inventory", "category": "Python"}, {"instruction": "Build a quickly-sortable tree from a given array.", "input": "Array = [3, 8, 4, 5, 2, 10, 7]", "output": "class TreeNode: \n    def __init__(self, key): \n        self.left = None\n        self.right = None\n        self.key = key \n\ndef quick_sort_tree(arr):\n    if not arr:\n        return None\n\n    pivot = arr[0]\n    pivot_node = TreeNode(pivot)\n    \n    left_subtree_elements  = [x for x in arr[1:] if x < pivot]\n    right_subtree_elements = [x for x in arr[1:] if x >= pivot]\n\n    pivot_node.left  = quick_sort_tree(left_subtree_elements)  \n    pivot_node.right = quick_sort_tree(right_subtree_elements) \n\n    return pivot_node", "category": "Python"}, {"instruction": "Write code to find the powers of two in a given range.", "input": "Range:  0 to 20", "output": "def powers_of_two(start, end):\n    powers = []\n    current_power = 1\n    while current_power < end:\n        if current_power >= start: \n            powers.append(current_power)\n        current_power *= 2\n    return powers", "category": "Python"}, {"instruction": "Develop a Django application to store car model, make and year in the database.", "input": "", "output": "# create Django project \ndjango-admin startproject car_database \n  \n# create Django app \ncd car_database \ndjango-admin startapp cars \n  \n# Add 'cars' to INSTALLED_APPS in settings.py\nINSTALLED_APPS = (  \n    ...\n    'cars',\n)\n  \n# Create models.py file\nclass Car(models.Model):\n    model = models.CharField(max_length=50)\n    make = models.CharField(max_length=50)\n    year = models.IntegerField()\n  \n# Make and apply migrations \npython manage.py makemigrations \npython manage.py migrate", "category": "Python"}, {"instruction": "Build a function to convert an adjacency matrix into an adjacency list.", "input": "A = \n[[0, 1, 0, 0], \n [1, 0, 1, 1], \n [0, 1, 0, 0], \n [0, 1, 0, 0]]", "output": "def adjacency_matrix_to_list(A):\n    \"\"\"\n    Convert an adjacency matrix to an adjacency list\n    \n    Parameters\n    ----------\n    A: 2D list representing an adjacency matrix\n    \n    Returns\n    -------\n    adj_list: Adjacency list\n    \"\"\"\n    n = len(A)\n    adj_list = [[] for i in range(n)]\n        \n    for i in range(n):\n        for j in range(n):\n            if A[i][j] == 1:\n                adj_list[i].append(j)\n                \n    return adj_list", "category": "Python"}, {"instruction": "How can a programmer optimize a code to improve its performance?", "input": "", "output": "A programmer can optimize a code to improve its performance by using techniques like loop optimization, code refactoring, resource optimization, cache optimization, and parallel computing. Loop optimization involves reducing the number of iterations in loops, using variables instead of literals, removing redundant loops, debugging errors, and choosing the most efficient looping techniques. Code refactoring involves restructuring the code to make it more concise, readable, and maintainable. Resource optimization involves using efficient data structures, such as hash tables and balanced trees, to reduce computational resources as well as using optimized algorithms. Cache optimization involves designing well-crafted caches to store frequently accessed data, while parallel computing allows multiple tasks to be completed simultaneously on different CPU cores.", "category": "Python"}, {"instruction": "What is the significance of a long identifier name in programming?", "input": "", "output": "A long identifier name is important for programming as it clearly and accurately describes the purpose of the identifier. It is easier for another programmer to understand what a specific code does if the identifier names are descriptive of their purpose. Long and descriptive names also make the code more organized and help to preserve the syntax. In addition, it allows for better debugging and easier maintenance in the long run.", "category": "Python"}, {"instruction": "What is Naive Bayes classification?", "input": "", "output": "Naive Bayes classification is a supervised machine learning technique used for classification tasks which is based on the Bayes Theorem. It assumes that each input feature is independent of each other, which is called the assumption of \"naive\" Bayes. The algorithm uses prior knowledge of the data set and determines the probability of each class, given the data. Based on these probabilities it then assigns a class to the input, using a decision rule (usually the maximum a posteriori likelihood), to maximize the overall accuracy of the model.", "category": "Python"}, {"instruction": "Train a model in PyTorch to classify the following dataset into 4 classes.", "input": "", "output": "import torch\n\n# Load the dataset\ntrain_data, valid_data, test_data = torch.utils.data.random_split(dataset, (1000, 400, 200))\n\n# Build the model\nmodel = torch.nn.Sequential(\n    torch.nn.Linear(7, 15), \n    torch.nn.ReLU(), \n    torch.nn.Linear(15, 4), \n    torch.nn.Softmax()\n)\n\n# Compile the model\ncriterion = torch.nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n\n# Train the model\nmodel.train()\nfor epoch in range(10):\n    loss = 0\n    for data, target in train_loader:\n        data, target = data.to(device), target.to(device)\n        optimizer.zero_grad()\n        output = model(data)\n        loss += criterion(output, target).item()\n        loss.backward()\n        optimizer.step()\n    \n    print(f'Epoch: {epoch}, Loss: {loss/len(train_data)}')", "category": "Python"}, {"instruction": "Create a function to find the sum of the squares of all natural numbers up to a certain number.", "input": "n = 10", "output": "def sumOfSquares(n): \n    sum = 0\n    for i in range(1, n+1): \n        sum += i*i\n    return sum", "category": "Python"}, {"instruction": "Create a regex expression in Python that finds all numbers from 1 to 100 inclusive.", "input": "", "output": "import re\n\nregex = re.compile('[1-9]|[1-9][0-9]|100')", "category": "Python"}, {"instruction": "Debug the following code snippet in Python to find the maximum number accross a list of integers.", "input": "lst = [-1, 5, 10, 0, -9]", "output": "def find_maximum(lst):\n  max_value = float('-inf')\n  for i in lst:\n    if i > max_value:\n      max_value = i\n  return max_value\n\nprint(find_maximum(lst))", "category": "Python"}, {"instruction": "Extend the following code to ensure that the array of numbers is sorted using insertion sort.", "input": "arr = [9, 5, 7, 3]", "output": "def insertionSort(arr): \n    for i in range(1, len(arr)): \n        temp = arr[i] \n        j = i - 1\n        while j >= 0 and temp < arr[j]: \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = temp", "category": "Python"}, {"instruction": "Change the Python code to find the occurrences of an item in a list", "input": "def count(list_of_items, item): \n    return len(list_of_items)", "output": "def count(list_of_items, item): \n    count = 0\n    for i in list_of_items:\n        if i == item:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Build a program to print the frequency of characters in an input string.", "input": "input_string = \"abcabcabcabc\"", "output": "def frequency_chart(input_string): \n    # Dictionary to store character frequency \n    freq = {} \n  \n    # Loop over the input string \n    for char in input_string: \n        if char in freq: \n            freq[char] += 1\n        else: \n            freq[char] = 1\n  \n    return freq \n  \n# Driver Code \ninput_string = \"abcabcabcabc\"\nprint(frequency_chart(input_string))", "category": "Python"}, {"instruction": "Change the Python code to output the product of two numbers.", "input": "def multiply(a, b): \n    return a + b", "output": "def multiply(a, b): \n    return a * b", "category": "Python"}, {"instruction": "Create an object in Python that has three properties, \"Color\", \"Height\" and \"Weight\".", "input": "", "output": "myObject = { \n    'color': '',\n    'height': 0,\n    'weight': 0\n}", "category": "Python"}, {"instruction": "Make an API request to fetch the top 3 trending topics from Twitter.", "input": "", "output": "import requests \n\ntrends_url = \"https://api.twitter.com/1.1/trends/place.json?id=1\"\n\nheaders = {\n    'Authorization': '", "category": "Python"}, {"instruction": "Given a string, find the longest substring containing no repeated characters.", "input": "\"abcabcbb\"", "output": "def longest_substring(str): \n    seen = {} \n    start = 0 \n    maxlen = 0 \n  \n    for i, char in enumerate(str): \n        if char in seen: \n            start = max(start, seen[char] + 1) \n        seen[char] = i \n        maxlen = max(maxlen, i - start + 1) \n  \n    return maxlen \n  \nprint(longest_substring(\"abcabcbb\")) \n# Output: 3", "category": "Python"}, {"instruction": "Write Python code to create a list of numbers from 1 to 10 (including 10).", "input": "", "output": "list_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Create a Python script to print the following output.", "input": "", "output": "for x in range(10):\n    for y in range(10):\n        print(\"*\" if (x + y) % 2 == 0 else \" \", end=\"\")\n    print(\"\")", "category": "Python"}, {"instruction": "Reduce the 3-dimensional numpy array to a 2-dimensional numpy array.", "input": "", "output": "import numpy as np\n\na_3d_array = np.array([[[1,2], [3,4]], [[5,6], [7,8]]])\n\na_2d_array = a_3d_array.reshape(4,2)", "category": "Python"}, {"instruction": "Find the maximum and minimum values of a given list of integers in Python.", "input": "", "output": "int_list = [3, 5, 2, 4, 1]\nmax_value = max(int_list)\nmin_value = min(int_list)", "category": "Python"}, {"instruction": "Implement a web scraper in Python to extract all headlines from a web page.", "input": "", "output": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com/'\n\nresponse = requests.get(url)\nhtml = response.text\nsoup = BeautifulSoup(html, 'html.parser')\n\nheadlines = []\nfor tag in soup.find_all('h1', class_='headline'):\n    headline = tag.string\n    headlines.append(headline)", "category": "Python"}, {"instruction": "Using the standard library to construct a generator that returns the first n prime numbers.", "input": "", "output": "from math import sqrt\n\ndef prime_numbers(n):\n    primes = []\n    i = 2\n    while len(primes) < n:\n        for number in range(2, int(sqrt(i)) + 1):\n            if i % number == 0:\n                break\n        else:\n            primes.append(i)\n        i += 1\n    yield from primes", "category": "Python"}, {"instruction": "Write a class in Python to represent an entry in a contact book.", "input": "", "output": "class ContactEntry:\n    def __init__(self, name, phone_number, email):\n        self.name = name\n        self.phone_number = phone_number\n        self.email = email", "category": "Python"}, {"instruction": "How would you define a Python decorator called ``logger`` to log the functions being called?", "input": "", "output": "from functools import wraps\n\ndef logger(func):\n    @wraps(func)\n    def log_function(*args, **kwargs):\n        print('Running \"{}\" with arguments {}, {}'.format(func.__name__, args, kwargs))\n        return func(*args, **kwargs)\n    return log_function", "category": "Python"}, {"instruction": "Given two sets, A and B, write a program to find the union of the two.", "input": "A = {1, 2, 3, 4, 5}\nB = {3, 4, 5, 6, 7}", "output": "def union(A, B):\n    union_set = set()\n    for item in A:        \n        union_set.add(item)\n    \n    for item in B:\n        union_set.add(item)\n    return union_set", "category": "Python"}, {"instruction": "Explain in simple terms what a dictionary is in Python.", "input": "", "output": "In Python, a dictionary is a collection of unordered key-value pairs. It is a mutable data type which allows users to store data in the form of key-value pairs. A key is an immutable object (like a number, string, or tuple) that is used to access the value stored for the corresponding key. A value can be any type of object like an integer, float, list, string, etc.", "category": "Python"}, {"instruction": "Evaluate the following arithmetic expression with Python.", "input": "15 * (2 + 7)", "output": "195", "category": "Python"}, {"instruction": "Create a function in Python which takes two strings as arguments and returns true if the first string contains the second string, false otherwise.", "input": "", "output": "def contains(string1, string2):\n    return string2 in string1", "category": "Python"}, {"instruction": "Write a class to implement a stack using an array.", "input": "", "output": "class Stack: \n    \n    def __init__(self): \n        self.stack = [] \n  \n    def isEmpty(self): \n        return self.stack == [] \n  \n    def push(self, data): \n        self.stack.append(data) \n    \n    def pop(self): \n        data = self.stack[-1] \n        del self.stack[-1] \n        return data \n  \n    def peek(self): \n        return self.stack[-1] \n  \n    def sizeStack(self): \n        return len(self.stack)", "category": "Python"}, {"instruction": "Construct a class that can be used to check if the braces in an expression are balanced.", "input": "expression = \"[(}{)]\"", "output": "class BalancedBraces: \n    \n    def checkBalanced(self, expression):\n        s = []\n        for i in expression:\n            if i == '(' or i == '[' or i == '{': \n                s.append(i)\n            elif i == ')' or i == ']' or i == '}':\n                if len(s) > 0 and (\n                (i == ')' and s[len(s)-1] == '(')or \n                (i == ']' and s[len(s)-1] == '[')or \n                (i == '}' and s[len(s)-1] == '{')):\n                    s.pop()\n                else:\n                    return False\n        return len(s) == 0", "category": "Python"}, {"instruction": "Create a function that calculates the length of a linked list.", "input": "Linked List: 10 -> 20 -> 30 -> 40 -> 50", "output": "def list_length(head):\n    count = 0\n    while head is not None:\n        count += 1\n        head = head.next\n    return count", "category": "Python"}, {"instruction": "Rewrite this function to reverse the order of the elements in the array.", "input": "list = [1,2,3,4,5]", "output": "def reverse_list(list): \n    mid = len(list)//2\n    for i in range(mid): \n        tmp = list[i]\n        list[i] = list[len(list)-i-1] \n        list[len(list)-i-1]=tmp \n    return list", "category": "Python"}, {"instruction": "Fetch data from the internet using an API call in Python", "input": "\"https://api.example.com/v1/search\"", "output": "import requests\n\nurl = \"https://api.example.com/v1/search\"\n\nresponse = requests.get(url)\ndata = response.json()\nprint(data)", "category": "Python"}, {"instruction": "Take a list of objects as input and return a list with removed duplicates.", "input": "objects = [1, 2, 3, 4, 5, 1, 2, 3]", "output": "def remove_duplicates(objects):\n    new_list = []\n    for obj in objects:\n        if obj not in new_list:\n            new_list.append(obj)\n    return new_list", "category": "Python"}, {"instruction": "Wirte a function that takes a string as input and returns the number of times the character 'a' appears in it.", "input": "string = \"abacadaba\"", "output": "def count_a(string):\n    count = 0\n    for char in string:\n        if char == 'a':\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Take a list of numbers and remove the numbers that are greater than 10.", "input": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]", "output": "def remove_greater_than_10(numbers):\n    return [x for x in numbers if x <= 10]", "category": "Python"}, {"instruction": "Merge the two following dictionaries into one with Python.", "input": "dict1 = {'a':1, 'b':2}\ndict2 = {'c':3, 'd':4};", "output": "dict1 = {'a':1, 'b':2}\ndict2 = {'c':3, 'd':4};\n\nmerged_dict = {**dict1, **dict2}\n\nprint(merged_dict) // returns {'a': 1, 'b': 2, 'c': 3, 'd': 4}", "category": "Python"}, {"instruction": "Given a number n, write a program to find the nth prime number.", "input": "", "output": "def nth_prime(n):\n    if n == 0:\n        return None\n    \n    primeCount = 0\n    checkNum = 2\n    while(primeCount < n):\n        isPrime = True\n        for i in range(2, checkNum):\n            if checkNum % i == 0:\n                isPrime = False\n        \n        if isPrime == True:\n            primeCount += 1\n        \n        if primeCount == n:\n            return checkNum\n        else:\n            checkNum += 1", "category": "Python"}, {"instruction": "Given a starting number, write a program to generate the Fibonacci sequence up to nth number.", "input": "", "output": "def fibonacci(n):\n    if n <= 0:\n        return None \n    \n    first = 0\n    second = 1\n    sequence = [first, second]\n    for i in range(2, n):\n        next_term = first + second\n        sequence.append(next_term)\n        first = second\n        second = next_term\n    return sequence", "category": "Python"}, {"instruction": "Write a code to filter the even numbers from the following array:", "input": "my_array = [1,2,3,4,5,6]", "output": "even_numbers = []\nfor number in my_array:\n    if number % 2 == 0:\n        even_numbers.append(number)\n\nprint(even_numbers)", "category": "Python"}, {"instruction": "Write a function in Python that takes a list of integer as input and return the most frequent value in the list.", "input": "[3, 9, 5, 6, 3, 9, 5]", "output": "def most_frequent_value(list):\n    return max(set(list), key = list.count)", "category": "Python"}, {"instruction": "Create a function to find a pair of elements in an array whose sum matches the given target.", "input": "numbers = [1, 2, 3, 4, 5], target = 6", "output": "def find_pair(numbers, target):\n  nums_set = set(numbers)\n  for num in nums_set:\n    if target - num in nums_set:\n      return [num, target-num]", "category": "Python"}, {"instruction": "Format the given list of numbers in such a way that element at i'th index is the product of all elements in the list except the i'th element.", "input": "numbers = [1, 2, 3, 4]", "output": "def format_list(numbers):\n    result = []\n    prod = 1\n    for i in range(0, len(numbers)):\n        prod = prod * numbers[i]\n    for i in range(0, len(numbers)):\n        result.append(prod // numbers[i])\n    return result", "category": "Python"}, {"instruction": "Read a list of strings and return a list which contains only the strings with length at least 3.", "input": "list = [\"Apple\", \"cat\", \"dog\", \"banana\", \"mouse\"]", "output": "newList = [i for i in list if len(i) >= 3]\nprint(newList)\n\n# Output: ['Apple', 'banana', 'mouse']", "category": "Python"}, {"instruction": "Edit this code to create a function which prints the Fibonacci series.", "input": "", "output": "def Fibonacci(n): \n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \nfor n in range(10):\n    print(Fibonacci(n))", "category": "Python"}, {"instruction": "Create a loop in Python to print odd numbers between 10 and 25.", "input": "", "output": "for i in range(11, 25, 2):\n    print(i)", "category": "Python"}, {"instruction": "Read an array of integers and sort it in increasing order.", "input": "arr = [3, 1, 4, 5, 2]", "output": "def sortArray(arr): \n    n = len(arr) \n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\nsortArray(arr) \nprint(arr)\n\n# Output: [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Write a Python script to create a dictionary of key - value pairs from a list.", "input": "list = [\"apple\", \"banana\", \"cherry\"]", "output": "dictionary = dict.fromkeys(list, 0)\n\nprint(dictionary)\n\n# Output: {'apple': 0, 'banana': 0, 'cherry': 0}", "category": "Python"}, {"instruction": "Create a format string in Python to output the sentence \u201cHello, my name is John Doe.\u201d", "input": "name = \"John Doe\"", "output": "print(f\"Hello, my name is {name}.\")", "category": "Python"}, {"instruction": "Read the integers in a given list and return the sum of the squares of the list elements.", "input": "arr = [1, 2, 3]", "output": "def squares_sum(arr):\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i] ** 2\n    return sum", "category": "Python"}, {"instruction": "Generate a function to convert an infix expression to a postfix expression.", "input": "\"A + B * C\"", "output": "def infix_to_postfix(exp):\n  stack = []\n  postfix_exp = \"\"\n  # Convert the expression to a list\n  exp_list = exp.split()\n\n  for char in exp_list:\n    # If the character is an operand, append it \n    if char in ['A', 'B', 'C']:\n      postfix_exp += char\n    # If the character is an operator, push it to the stack\n    elif char in ['+', '-', '*', '/']:\n      stack.append(char)\n    # When the closing parentheses is encountered, pop all the operators from the stack\n    elif char == ')':\n      while stack[-1] != '(': \n        postfix_exp += stack.pop() \n      stack.pop() #pop the opening parentheses\n\n  # Pop all the operators in the stack\n  while stack:\n    postfix_exp += stack.pop()\n  \n  return postfix_exp\n\nexp = \"A + B * C\" \nresult = infix_to_postfix(exp) \nprint(result) #ABC*+", "category": "Python"}, {"instruction": "Write a code to group the elements in a list into a dictionary with the list element as the key and the number of times the element is repeated in the list as the value.", "input": "[1, 2, 2, 2, 3, 3, 4, 4, 5]", "output": "def group_list(list): \n  result = {} \n  for element in list: \n    if element in result: \n      result[element] += 1 \n    else: \n      result[element] = 1 \n  \n  return result \n\nlist = [1, 2, 2, 2, 3, 3, 4, 4, 5] \nresult = group_list(list) \nprint(result) #{1: 1, 2: 3, 3: 2, 4: 2, 5: 1}", "category": "Python"}, {"instruction": "Write a code to validate an email entered by the user.", "input": "", "output": "\"\"\"\nValidate an email entered by the user\n\"\"\"\n\nimport re\n\ndef validate_email(email):\n regex = '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n if(re.search(regex, email)):\n  return True\n else:\n  return False\n  \nif __name__ == '__main__':\n email = input('Enter email address: ')\n if validate_email(email):\n  print('Valid email address')\n else:\n  print('Invalid email address')", "category": "Python"}, {"instruction": "Identify the Python statement used for looping.", "input": "", "output": "for", "category": "Python"}, {"instruction": "Create a function which returns the factorial of a given number.", "input": "", "output": "\"\"\"\nFunction which returns factorial of a given number\n\"\"\"\n\ndef factorial(num):\n    if (num == 0):\n        return 1\n    else:\n        return num * factorial(num-1)\n    \nif __name__ == '__main__':\n    print(factorial(5))", "category": "Python"}, {"instruction": "Write a function that creates a new array from a given array of integers, leaving out the negative ones.", "input": "list1 = [-1, 1, 2, -2, 3, -3]", "output": "def removeNegative(list1):\n    outputArray = [x for x in list1 if x >= 0]\n    return outputArray\n\n# testing\nlist1 = [-1, 1, 2, -2, 3, -3]\nprint(removeNegative(list1)) # Output: [1,2,3]", "category": "Python"}, {"instruction": "Create a list comprehension that outputs a list of odd numbers from a given list of numbers.", "input": "numbers = [1,2,3,4,5,6,7,8,9,10]", "output": "odd = [x for x in numbers if x % 2 != 0]\nprint(odd) # Output: [1, 3, 5, 7, 9]", "category": "Python"}, {"instruction": "Write code that takes in two numeric variables x and y, and if x is divisible by y, it should print \"x is divisible by y\"Otherwise it should print \"x is not divisible by y\".", "input": "x = 9, y = 3", "output": "def is_divisible(x, y):\n    if x % y == 0:\n        print(\"x is divisible by y\")\n    else:\n        print(\"x is not divisible by y\")\n\n# testing\nx = 9\ny = 3\nprint(is_divisible(x ,y)) # Output: x is divisible by y", "category": "Python"}, {"instruction": "Using the following input and code, edit the code so the output returns a list with only the unique elements from the list.", "input": "list1 = [1,2,2,4,4,4,5]", "output": "def unique_list(list1):\n    unique_list = []\n    for x in list1:  \n        if x not in unique_list: \n            unique_list.append(x) \n      \n    return unique_list\n\n# testing\nlist1 = [1,2,2,4,4,4,5]\nprint(unique_list(list1)) # Output: [1, 2, 4, 5]", "category": "Python"}, {"instruction": "Read two strings from the user and check if they are anagrams.", "input": "string1 = 'listen', string2 = 'silent'", "output": "def isAnagram(string1, string2): \n    # get lengths of strings \n    string1_length = len(string1) \n    string2_length = len(string2) \n  \n    # if length dont match\n    if string1_length != string2_length: \n        return False\n  \n    # sorting both strings\n    string1 = sorted(string1) \n    string2 = sorted(string2) \n  \n    # compare the sorted strings \n    for i in range(0, string1_length): \n        if string1[i] != string2[i]: \n            return False\n  \n    return True\n\n# testing\nstring1 = 'listen'\nstring2 = 'silent'\nprint(isAnagram(string1, string2)) # Output: True", "category": "Python"}, {"instruction": "Analyze the following sentence to determine the type of verb phrase involved.", "input": "We have met several times.", "output": "The verb phrase in this sentence is a perfect verb phrase, as it indicates an action that has been completed in the past and has a continuing result in the present. The verb in the phrase is \"have met\".", "category": "Python"}, {"instruction": "Use expand tabs to replace all the tabs in the following text with four spaces.", "input": "text = '\\thello \\tworld \\t'", "output": "import re\ntext = '\\thello \\tworld \\t'\ntext = re.sub('\\t', '    ', text)\nprint(text)", "category": "Python"}, {"instruction": "Enhance the following code to find the average of all the even numbers in the array:", "input": "my_array = [1,2,3,4,5,6]", "output": "even_numbers = []\nfor number in my_array:\n    if number % 2 == 0:\n        even_numbers.append(number)\n\naverage = sum(even_numbers) / len(even_numbers)\nprint(average)", "category": "Python"}, {"instruction": "Edit the Python code to reverse a linked list.", "input": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None", "output": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\ndef reverse_list(head):\n    prev = None\n    while head != None:\n        next = head.next\n        head.next = prev\n        prev = head\n        head = next\n    return prev", "category": "Python"}, {"instruction": "Convert a string to its corresponding integer value.", "input": "String: \"123\"", "output": "def string_to_int(s):\n    res = 0\n    for char in s:\n        res = res * 10 + int(char)\n    return res", "category": "Python"}, {"instruction": "Remove all duplicates from an array.", "input": "[1, 1, 2, 3, 4, 5, 3, 4]", "output": "def remove_duplicates(arr):\n    res = []\n    seen = set()\n    for element in arr:\n        if element not in seen:\n            res.append(element)\n            seen.add(element)\n    return res", "category": "Python"}, {"instruction": "Implement the Euclidean distance formula using a def function in Python.", "input": "", "output": "def euclidean_dist(x, y):\n    # write function here\n    dist = 0\n    # iterate through each coordinate of the points\n    for i in range(len(x)):\n        # calculate the distance between corresponding coordinates\n        dist += (x[i]-y[i])**2\n    return (dist**0.5)", "category": "Python"}, {"instruction": "Write a long-running Python script with a while loop?", "input": "", "output": "while True:\n    # perform a long-running task\n    pass # or perform an action", "category": "Python"}, {"instruction": "Create two lists, one in Python and one in JavaScript, with 10 numbers each.", "input": "", "output": "Python List: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nJavaScript List: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Create a class to represent a blog post in Python.", "input": "", "output": "class BlogPost:\n    def __init__(self, title, content, author):\n        self.title = title\n        self.content = content\n        self.author = author\n\n    def edit_post(self, new_title, new_content):\n        self.title = new_title\n        self.content = new_content", "category": "Python"}, {"instruction": "Write a Python program to read a list of numbers and print them as a single string without any space.", "input": "[34, 32, 67, 85]", "output": "my_list = [34, 32, 67, 85] \n  \n# using join() \nprint(''.join(str(n) for n in my_list))", "category": "Python"}, {"instruction": "Perform a selection sort on the given array", "input": "[4, 1, 10, 8, 5]", "output": "def selection_sort(arr): \n    for i in range(len(arr)): \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j        \n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\n\nprint(selection_sort([4, 1, 10, 8, 5]))", "category": "Python"}, {"instruction": "Read the comment in the code and update the code accordingly.", "input": "def get_multiples(n, limit):\n    \"\"\"Return list of n's multiples for all numbers up to limit\"\"\"\n    multiples = []\n    # TODO: Your code here\n    return multiples", "output": "def get_multiples(n, limit):\n    \"\"\"Return list of n's multiples for all numbers up to limit\"\"\"\n    multiples = []\n    for i in range(limit + 1):\n        if i % n == 0:\n            multiples.append(i)  \n    return multiples", "category": "Python"}, {"instruction": "Write a Python program to calculate the sum of the digits in an integer", "input": "N = 155", "output": "def sum_digits(n):\n    s = 0\n    while(n):\n        s += n % 10\n        n //= 10\n    return s\n\nprint(sum_digits(155))", "category": "Python"}, {"instruction": "Modify the program to work with any dataset", "input": "def sum_values(data):\n    \"\"\"Returns the sum of values in the given dataset.\"\"\"\n    sum = 0\n    # TODO: Your code here\n    return sum", "output": "def sum_values(data):\n    \"\"\"Returns the sum of values in the given dataset.\"\"\"\n    sum = 0\n    for val in data:\n        sum += val\n    return sum", "category": "Python"}, {"instruction": "Debug the following code and update the list \"result\" accordingly.", "input": "def foo(nums):\n    result = []\n    for val in nums:\n        val += 2\n        result.append(val)\n        return result\n\nnums = [1, 2, 3, 4]", "output": "def foo(nums):\n    result = []\n    for val in nums:\n        val += 2\n        result.append(val)\n    return result\n\nnums = [1, 2, 3, 4]\n\nresult = foo(nums)", "category": "Python"}, {"instruction": "Construct an if-else statement to compare two variables.", "input": "variable1: 5\n  variable2: 10", "output": "variable1 = 5\nvariable2 = 10\n\nif variable1 > variable2:\n  print(\"variable1 is greater than variable2\")\nelif variable1 < variable2:\n  print(\"variable1 is less than variable2\")\nelse:\n  print(\"variable1 is equal to variable2\")", "category": "Python"}, {"instruction": "Write an algorithm that reverses a string.", "input": "Hello World", "output": "def reverse_string(string):\n  reversed_string = \"\"\n  for char in string:\n    reversed_string = char + reversed_string\n  return reversed_string", "category": "Python"}, {"instruction": "Program a binary search algorithm.", "input": "data: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  target: 16", "output": "def binary_search(data, target):\n    low = 0\n    high = len(data) - 1\n    \n    while low <= high:\n        index = (low + high) // 2\n        value = data[index]\n\n        if value == target:\n            return index\n\n        if target < value:\n            high = index - 1\n        else:\n            low = index + 1\n\n    return -1\n\ndata = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\ntarget = 16\n\nindex = binary_search(data, target)\nif index != -1:\n    print(\"Target is at index: {}\".format(index))\nelse: \n    print(\"Target not found\")", "category": "Python"}, {"instruction": "Write Python code to merge two given dictionaries into a single dictionary.", "input": "Dictionary 1: {'A':1, 'B':2} \nDictionary 2: {'C':3, 'D':4}", "output": "def merge_dicts(dic1, dic2): \n    res = {**dic1, **dic2} \n    return res", "category": "Python"}, {"instruction": "Write a Python program to convert a given binary string to its equivalent hexadecimal representation.", "input": "", "output": "def bin_to_hex(binary_string):\n    dec = int(binary_string, 2)\n    hex_string = hex(dec).replace('x', '')\n    return hex_string", "category": "Python"}, {"instruction": "Create a Python program to extract the URLs from a given list of strings.", "input": "['https://stackoverflow.com/questions/42063887/how-to-extract-urls-from-a-list-of-strings-in-python',\n 'This is an example of a string without a URL']", "output": "import re\n\ndef extract_urls(strings):\n  urls = []\n  for s in strings:\n    urls += re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', s)\n  return urls", "category": "Python"}, {"instruction": "Create a Python script to generate random numbers from 1 to 10 in a given range.", "input": "", "output": "import random\n\ndef random_num_gen(start, end):\n  \n  random_nums = []\n  \n  for _ in range(start, end + 1):\n    random_nums.append(random.randint(1, 10))\n  \n  return random_nums", "category": "Python"}, {"instruction": "Write a function to sum values stored in a dictonary using for loop.", "input": "mydict = {\u2018a\u2019:1, \u2018b\u2019:2, \u2018c\u2019:3}", "output": "def sum_dict_values(mydict):\n  ans = 0\n  for key,val in mydict.items():\n    ans += val\n  return ans", "category": "Python"}, {"instruction": "Design a function in Python to sort a list of tuples based on the first element.", "input": "", "output": "def sort_list_of_tuples(my_list):\n    my_list.sort(key=lambda x: x[0])\n    return my_list", "category": "Python"}, {"instruction": "Suggest a way to search for a target element in a binary search tree in less than O(n) time.", "input": "", "output": "The binary search tree can be traversed in a depth-first manner to search for the target element in a time complexity of O(log n), where n is the number of nodes in the binary search tree. In a depth-first search, the target node is compared with each node in the tree and if it does not match, the left or right subtree is recursively searched depending on whether the target element is smaller or bigger than the current node. This way, the target element can be searched in less than O(n) time.", "category": "Python"}, {"instruction": "Write a function that takes in a list of strings and returns True if any of the strings contains the letter `a`.", "input": "", "output": "def contains_A(strings):\n    for string in strings:\n        if 'a' in string:\n            return True\n    return False", "category": "Python"}, {"instruction": "Split the given string into words and remove any words that have less than 4 characters.", "input": "string = 'This is a test string'", "output": "string = 'This is a test string'\nwords = string.split()\nfiltered_words = []\nfor word in words:\n    if len(word) >= 4:\n        filtered_words.append(word)\n\nprint(filtered_words)\n\n# Output:\n# ['This', 'test', 'string']", "category": "Python"}, {"instruction": "Write an algorithm to calculate the average of a list of integers given as input.", "input": "", "output": "def average(nums):\n    \"\"\"\n    Takes a list of numbers and returns the average.\n    \"\"\"\n    \n    total = 0\n    for num in nums:\n        total += num\n    \n    return total / len(nums)", "category": "Python"}, {"instruction": "Construct a Python class for a camera object.", "input": "", "output": "class Camera:\n    \"\"\"Class representing a camera\"\"\"\n    \n    def __init__(self, brand, model):\n        \"\"\"\"\"\"\n        self.brand = brand \n        self.model = model \n    \n    def get_brand(self):\n        \"\"\"\"\"\"\n        return self.brand\n    \n    def get_model(self):\n        \"\"\"\"\"\"\n        return self.model", "category": "Python"}, {"instruction": "Create a function that takes two arguments (n and m) and returns a randomly shuffled array of length n and containing only elements from 0 to m.", "input": "n = 5\nm = 10", "output": "def shuffle_array(n, m):\n    arr = []\n    for i in range(n):\n        arr.append(random.randint(0,m))\n    random.shuffle(arr)\n    return arr", "category": "Python"}, {"instruction": "In the following code, what is the purpose of the 'if' statement?", "input": "words = [\"apple\", \"pie\", \"make\"]\n\nfor word in words:\n  if len(word) > 4:\n    print(word)", "output": "The 'if' statement is used to check if the length of the current word is greater than 4, and if it is, the word is printed.", "category": "Python"}, {"instruction": "Write a function that takes two parameters, an array of integers and an integer value, and returns the number of occurrences of the given value in the array.", "input": "input_array = [1, 2, 3, 2, 1]\ninput_value = 2", "output": "def count_occurrences(input_array, input_value):\n    return len([item for item in input_array if item == input_value])", "category": "Python"}, {"instruction": "Create a TensorFlow neural network model to classify animals into 4 categories.", "input": "", "output": "import tensorflow as tf\n\n# Define the model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Flatten(input_shape=(28, 28)),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(4, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])", "category": "Python"}, {"instruction": "Write a Python program to parse a text string given a regular expression and return the matches.", "input": "", "output": "import re\n\ndef parse(expression, string):\n  matches = re.finditer(expression, string)\n  return [match.group(0) for match in matches]", "category": "Python"}, {"instruction": "Insert 15 random numbers between 0 and 10 in a list.", "input": "", "output": "import random\n\nnumbers = []\nfor i in range(15):\n    numbers.append(random.randrange(0, 10))\nprint(numbers)", "category": "Python"}, {"instruction": "Create a function in python to print all values between two given values. Do not include the two given values in the output.", "input": "", "output": "def print_range(start, end): \n    for value in range(start + 1, end): \n        print(value, end = \" \")", "category": "Python"}, {"instruction": "Edit the given code in Python to produce the desired output.", "input": "lst = [3, 8, 9]\n\nfor i in lst:\n    print(i)\n\nExpected Output:\n3\n8\n9", "output": "lst = [3, 8, 9]\n\nfor i in lst:\n    print(str(i))\n\n# Output\n3\n8\n9", "category": "Python"}, {"instruction": "Name some of the important data types in Python.", "input": "", "output": "The important data types in Python are integers, floats, strings, booleans, lists, tuples, dictionaries and sets.", "category": "Python"}, {"instruction": "Tell me how to print an IMDB movie rating using Python", "input": "", "output": "import imdb\n\n# create an instance of the IMDb class\nia = imdb.IMDb()\n\n# get the movie\nmovie = ia.get_movie('tt0111161') # The Shawshank Redemption\n\n# get the rating\nrating = movie['rating']\n\n# print the rating\nprint(f\"Rating for the movie 'The Shawshank Redemption': {rating}\")", "category": "Python"}, {"instruction": "Write a function to reverse a linked list in O(n) time complexity.", "input": "", "output": "def reverse(head):\n    prev = None\n    curr = head\n    while curr is not None:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    head = prev\n    return head", "category": "Python"}, {"instruction": "Translate the following JavaScript code into Python.", "input": "let x = 10;\nif(x > 0){\n    console.log(\"x is positive\");\n}", "output": "x = 10\nif x > 0:\n    print(\"x is positive\")", "category": "Python"}, {"instruction": "Given a list of lists, generate a single flattened list.", "input": "lst = [[1, 2], [3, 4], [5, 6]]", "output": "lst = [[1, 2], [3, 4], [5, 6]]\nflattened = [item for sublist in lst for item in sublist]\nprint(flattened)", "category": "Python"}, {"instruction": "Create a function that takes two parameters, a string and an integer, and prints the string the given number of times.", "input": "string = \"Hello\"\nnumber = 3", "output": "def printString(string, number):\n    for i in range(number):\n        print(string)\n\nprintString(string, number)", "category": "Python"}, {"instruction": "Given a string containing a comma-separated list of integers, write code to print all the even numbers.", "input": "string = \"23, 2, 5, 16, 1, 9, 8\"", "output": "#Split the string into a list of integers\nnumbers = [int(x) for x in string.split(',')]\n\n#Iterate through the list, if the integer is even, print it\nfor number in numbers:\n    if number % 2 == 0:\n        print(number)", "category": "Python"}, {"instruction": "Implement an algorithm to delete a node in a singly linked list, given only access to the node.", "input": "head = [4, 5, 1, 9]\ndel = 5", "output": "def deleteNode(head, del): \n  \n    # If the node to be deleted is the head node \n    if head.data == del: \n        head = head.next\n        return head \n  \n    # Find previous node of the node to be deleted \n    previous = head \n    while previous.next and previous.next.data != del: \n        previous = previous.next\n  \n    # If node to be deleted is not present in the list \n    if previous.next is None: \n        return head \n  \n    # Change the next pointer of the previos node \n    previous.next = previous.next.next\n  \n    return head", "category": "Python"}, {"instruction": "Write a code that returns the longest substring of the given string without repeating characters.", "input": "string = \"abcabcbb\"", "output": "def longestSubstring(s): \n    length = len(s) \n    longest_string = 0\n    i = 0\n       \n    while (i < length): \n   \n        # Store the last index of the current character \n        last_char_index = -1\n        string_set = set() \n        current_string = 0\n          \n        for j in range(i, length): \n  \n            # If the character is already in string_set \n            if s[j] in string_set: \n                # Update the last index \n                last_char_index = j \n                break\n  \n            else: \n                # Add the character to string_set \n                string_set.add(s[j]) \n  \n                # Increase its length by 1 \n                current_string += 1\n              \n        if longest_string < current_string: \n            longest_string = current_string \n  \n        # Move ahead until the last index \n        i = last_char_index + 1 \n  \n    return longest_string", "category": "Python"}, {"instruction": "Write a function that takes two strings and returns True if one of the strings is the other string reversed.", "input": "string_1 = \"abcde\"\nstring_2 = \"edcba\"", "output": "def isReverse(string_1, string_2):\n    if len(string_1) != len(string_2):\n        return False\n    for i in range(len(string_1)):\n        if string_1[i] != string_2[len(string_2)-i-1]:\n            return False\n    return True", "category": "Python"}, {"instruction": "Explain the difference between a shallow copy and a deep copy.", "input": "", "output": "A shallow copy of an object creates a new object with the same values as the original but with a different location in memory. A deep copy of an object copies not just the values of the original object but also creates copies of any objects that the original object is referencing. The result is two objects which are completely independent of each other.", "category": "Python"}, {"instruction": "Generate code that implements a method to compare two strings.", "input": "", "output": "def compare_strings(str1, str2):\n    if len(str1) != len(str2):\n        return False\n\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            return False\n\n    return True", "category": "Python"}, {"instruction": "Convert the code from OOP to a functional programming style.", "input": "class Employee:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    def print_details(self):\n        print(f\"Name: {self.name}, age: {self.age}\")", "output": "def Employee(name, age):\n    return (name, age)\n\ndef print_details(employee):\n    name, age = employee\n    print(f\"Name: {name}, age: {age}\")", "category": "Python"}, {"instruction": "Implement a function that takes in three string parameters and prints out the longest one.", "input": "", "output": "def longest_string(str1, str2, str3):\n    if len(str1) >= len(str2) and len(str1) >= len(str3):\n        print(str1)\n    elif len(str2) >= len(str1) and len(str2) >= len(str3):\n        print(str2)\n    else:\n        print(str3)", "category": "Python"}, {"instruction": "How many jokes can you write in Python?", "input": "", "output": "There is no definite answer to this question. It depends on the creativity and programming skills of the individual. It is possible to write an infinite number of jokes, but writing a joke that is funny and unique will require more effort and expertise.", "category": "Python"}, {"instruction": "Make a HTTP request to get the content of the given URL.", "input": "https://example.com", "output": "import requests\n\nresponse = requests.get(\"https://example.com\")\nprint(response.content)", "category": "Python"}, {"instruction": "Construct a class which inherits from the parent class by implementing the abstract method.", "input": "class Parent:\n  def __init__(self):\n    pass\n  \n  def parent_func(self):\n    print('Parent Function')\n    \nclass Child(Parent):\n # TODO: implement abstract method", "output": "class Parent:\n  def __init__(self):\n    pass\n  \n  def parent_func(self):\n    print('Parent Function')\n    \nclass Child(Parent):\n  def abstract_method(self):\n    pass", "category": "Python"}, {"instruction": "Write function to encrypt the text with Caesar Cipher.", "input": "text = \"hello\"\nshift = 3", "output": "def caesar_cipher(text, shift):\n    ciphered = ''\n    for char in text:\n        ciphered += chr(ord(char) + shift)\n    return ciphered", "category": "Python"}, {"instruction": "Given a two-dimensional array, write a code to print the elements column-wise.", "input": "[[1, 2], [3, 4], [5, 6]]", "output": "# Define a function to print elements column-wise \ndef print_columnwise(arr):\n\n # Get the number of rows and columns\n num_rows = len(arr)\n num_cols = len(arr[0])\n \n # Initialize the columns \n k = 0\n\n # Iterate through the rows\n while k < num_cols :\n  # Iterate through the columns\n  for i in range(num_rows):\n   # Print the element\n   print(arr[i][k], end=\" \")\n  \n  # Update the column\n  k = k + 1\n  print()\n\n# Get the array\narr = [[1, 2], [3, 4], [5, 6]]\n\n# Print the elements column-wise \nprint_columnwise(arr)", "category": "Python"}, {"instruction": "Create a code to print the items from a given array in reverse.", "input": "[1,2,3,4]", "output": "# Define the function to print array in reverse\ndef print_reverse(arr):\n \n # Base case\n if len(arr) == 0 :\n  return\n\n # Print the last value\n print(arr.pop())\n\n # Recursive call with array - 1 \n return print_reverse(arr)\n\n# Get the array\narr = [1,2,3,4]\n\n# Print the array in reverse\nprint(\"The array in reverse is: \")\nprint_reverse(arr)", "category": "Python"}, {"instruction": "Create a code to raise a number to a given power p.", "input": "2", "output": "# Define the function to raise a number to a given power\ndef power(x, p):\n \n # The base case is when power is 0 \n if p == 0:\n  return 1\n  \n # if power is not 0, then recursively call the function power \n return x * power(x, p-1)\n\n# Get the number\nx = 2\n\n# Get the power\np = 3\n\n# Calculate the result\nresult = power(x, p)\n\n# Print the result\nprint(\"The result is: \", result)", "category": "Python"}, {"instruction": "Write a code to generate 1000 random numbers and print the mean of these random numbers.", "input": "", "output": "# Import the random module\nimport random\n\n# Generate 1000 random numbers \nrandom_numbers = [random.randint(1, 1000) for i in range(1000)]\n\n# Calculate mean of the random numbers\nmean = sum(random_numbers)/len(random_numbers)\n\n# Print mean of random numbers\nprint(\"The mean of 1000 random numbers is: \", mean)", "category": "Python"}, {"instruction": "What data structure would you use to store a matrix in Python", "input": "", "output": "The best data structure to store a matrix in Python is a two-dimensional list. A two-dimensional list is a list of lists where each sub-list represents a row in the matrix. This makes it easy to access and modify values in the matrix.", "category": "Python"}, {"instruction": "How would you code a basic spell-checker", "input": "", "output": "def spell_checker(input_text):\n    correct_words = []\n    wrong_words = []\n    \n    for word in input_text.split():\n        if is_correct(word):\n            correct_words.append(word)\n        else:\n            wrong_words.append(word)\n            \n    return correct_words, wrong_words\n\n# where is_correct() is an appropriate function to determine if the word is spelled correctly or not", "category": "Python"}, {"instruction": "Design a memory efficient algorithm for a given problem.", "input": "Given a list of integers, find the average of all the elements.", "output": "def find_average(nums):\n    length = len(nums)\n    total = 0\n    \n    for i in range(length):\n        total += nums[i]\n        \n    return total / length", "category": "Python"}, {"instruction": "Explain one of the most significant application of neural networks in computer science.", "input": "", "output": "One of the most significant applications of neural networks in computer science is image recognition. Neural networks, with their deep learning capabilities, are able to tackle complex image recognition problems that are difficult to solve with traditional algorithmic approaches. Neural network based systems have been used successfully to identify objects in photos, process real-time video frames, and even to diagnose medical conditions such as cancer.", "category": "Python"}, {"instruction": "How can you use recurrent neural networks for sequence prediction?", "input": "", "output": "Recurrent neural networks (RNNs) can be used for sequence prediction tasks. RNNs are powerful models that are able to capture patterns from sequences of data and can remember information from previous inputs. The network is comprised of layers and nodes, and each layer contains nodes that are connected to the previous layer. When a sequence is fed into the network, the nodes of the first layer are activated based on the input. The output of the first layer serves as the input for the next layer, and so on. As the sequence progresses, the internal state of the network is updated and used to make predictions. The output of the RNN is then a prediction of the next element in the sequence.", "category": "Python"}, {"instruction": "How is AI used in finance?", "input": "", "output": "AI is being increasingly used in finance to improve the accuracy and speed of processes, make better-informed decisions, and streamline customer service. Financial institutions use AI to automate and speed up operations such as accounts payable and receivable, loans underwriting, money management, fraud detection, and decision-making in stock markets. AI can also be used to help manage large amounts of data and detect patterns in the data. For example, AI can be used to perform sentiment analysis on large amounts of customer data or to detect potential fraudulent activity. It can also provide insights into customer behavior and preferences that can be used to personalize services and create targeted product offerings.", "category": "Python"}, {"instruction": "How do you develop a software application through agile?", "input": "", "output": "Developing a software application through agile is a process that systematically focuses on small, incremental changes that are then tested on a regular basis to ensure their effectiveness. This type of development conflicts with traditional linear development approaches that focus on big, planned and predetermined changes. Agile development cycles include iterative sprints and frequent collaboration between stakeholders to ensure the project is proceeding in the right direction. In agile, software development proceeds in a cyclic and iterative manner, which involves planning, designing, coding, and testing. During the sprints, stakeholders review and discuss software progress to ensure continued progress is being made and to help with decision making. Agile development typically involves using automated tools and technologies such as configuration management software and integrated development environments to facilitate quicker development cycles.", "category": "Python"}, {"instruction": "Create a function that takes two strings as parameters, compares them, and returns 0 if they are equal, 1 if the first string is greater, and -1 if the second string is greater.", "input": "", "output": "def compare_strings(str1, str2):\n    if str1 == str2:\n        return 0\n    elif str1 > str2:\n        return 1\n    else:\n        return -1", "category": "Python"}, {"instruction": "Create a class to illustrate the concept of encapsulation in Python.", "input": "", "output": "class Car:\n    def __init__(self, brand, model, year):\n        self.__brand = brand\n        self.__model = model\n        self.__year = year\n    \n    def get_brand(self):\n        return self.__brand\n    \n    def get_model(self):\n        return self.__model\n    \n    def get_year(self):\n        return self.__year", "category": "Python"}, {"instruction": "Write a code to find the most frequently occurring item in the list.", "input": "[17, 25, 6, 30, 14, 28, 6, 20, 13, 25]", "output": "def most_frequent(data):\n    freq = {}\n    for x in data:\n        if x in freq:\n            freq[x] += 1\n        else:\n            freq[x] = 1\n    max_freq = 0\n    for x in freq.values():\n        if x > max_freq:\n            max_freq = x\n    most_frequent_item = []\n    for x in freq.keys():\n        if freq[x] == max_freq:\n            most_frequent_item.append(x)\n    return most_frequent_item\n\ndata = [17, 25, 6, 30, 14, 28, 6, 20, 13, 25]\n\nprint(most_frequent(data))", "category": "Python"}, {"instruction": "Write a code to generate a random float between -5 and 5.", "input": "", "output": "import random\n\nrandom_float = random.uniform(-5, 5)\nprint(random_float)", "category": "Python"}, {"instruction": "Create a Tkinter window with a label that says \u201cHello World!\u201d", "input": "", "output": "import tkinter\n\nroot = tkinter.Tk()\nlabel = tkinter.Label(root, text=\"Hello World!\")\nlabel.pack()\nroot.mainloop()", "category": "Python"}, {"instruction": "Design a data structure for a deck of cards", "input": "", "output": "A data structure for a deck of cards could involve creating an array of objects or associative arrays, where each object or associative array corresponds to a card in the deck. The object or associative array should include properties such as suit, rank, and value to store information about the card. Additionally, the data structure should also include functions to manipulate the deck such as shuffle, draw, and sort.", "category": "Python"}, {"instruction": "Translate the following sentiment analysis model written in Python to JavaScript", "input": "model = tf.keras.models.Sequential([\n tf.keras.layers.Dense(128, activation='relu', input_shape=(tem_train_data.shape[1],)),\n tf.keras.layers.Dense(2, activation='softmax')\n])", "output": "const model = tf.sequential();\nmodel.add(tf.layers.dense({units: 128, activation: 'relu', inputShape: tem_train_data.shape[1]}));\nmodel.add(tf.layers.dense({units: 2, activation: 'softmax'}));", "category": "Python"}, {"instruction": "Create a Django application to serve an API endpoint", "input": "The API endpoint should take an ID and return a user's name and age.", "output": "The output would involve creating a Django application with an API view that takes in the ID as the parameter and returns a dictionary containing the user's name and age. The Django application should also include the necessary models and associated functions, a URL configuration, and a core application to be used in the root project directory.", "category": "Python"}, {"instruction": "Acquire the necessary data to apply linear regression on the following problem statement", "input": "Predict the average property value in a particular city given population density, housing costs and average income.", "output": "The necessary data to apply linear regression on the problem statement would include population density, housing costs and average income of the particular city. Additionally, the average property value should also be collected as the target variable to be predicted. The data could be collected from public sources like census websites or through primary data collection methods such as surveys.", "category": "Python"}, {"instruction": "Describe a good object oriented design approach for the following problem statement:", "input": "Design an application that provides a way for users to store and access their banking records.", "output": "An object oriented design approach for the problem statement would involve the following: creating a base class for the banking records which has properties to store user details and banking information, providing a way to create a savings account and checking account class that can be derived from the base class and a set of methods which can add, delete, update, retrieve and access information from the banking records. Additionally, methods which securely store and access the data should be implemented to ensure the safety of the users' data.", "category": "Python"}, {"instruction": "Design a program to detect an infinite loop in a given program.", "input": "", "output": "def detectInfiniteLoop(program):\n  setOfInstructions = set()\n  for line in program.split('\\n'):\n    if line in setOfInstructions:\n      return True\n    setOfInstructions.add(line)\n  return False", "category": "Python"}, {"instruction": "Create a stack and add two elements to it.", "input": "", "output": "class Stack():\n  def __init__(self):\n    self.items = []\n  \n  def push(self, item):\n    self.items.append(item)\n  \n  def pop(self):\n    return self.items.pop()\n\nstack = Stack()\nstack.push(5)\nstack.push(7)", "category": "Python"}, {"instruction": "Create a 2D array with n columns and m rows and fill it with random numbers.", "input": "Rows: 6, Columns: 8", "output": "import random\n\ndef create2DArray(row, col):\n  arr = [[random.randint(1,100) for j in range(col)] for i in range(row)]\n  return arr", "category": "Python"}, {"instruction": "Write an algorithm to search for numbers in an array and replace them with their square roots.", "input": "[1,2,3,4,5]", "output": "Function searchAndReplace(nums):\n  for i in range(len(nums)):\n    if nums[i] >= 0:\n      nums[i] = math.sqrt(nums[i])\n  return nums", "category": "Python"}, {"instruction": "Update the following code to add a method to retrieve elements from the list.", "input": "class MyList\n  def initialize\n    @list = []\n  end\nend", "output": "class MyList\n  def initialize\n    @list = []\n  end\n\n  def get(index)\n    @list[index]\n  end\n\nend", "category": "Python"}, {"instruction": "Refactor this function to be less complex and more readable.", "input": "def calculate_price(products):\n  total_price=0\n  for p in products:\n    total_price+=p[0]*p[1]\n  return total_price", "output": "def calculate_price(products):\n  total_price = 0\n  for price, quantity in products: \n    total_price += price * quantity\n  return total_price", "category": "Python"}, {"instruction": "Why is indexing important in databases?", "input": "", "output": "Indexing in databases is important because it allows for faster access to data. Indexing works by creating an index data structure that stores a specific value or field in the database and a pointer to the data record containing that value. This strategy increases the speed of the query operations by allowing programs to quickly search the index to find the data instead of searching each record in the database one-by-one.", "category": "Python"}, {"instruction": "Write a function that takes a string as an input and returns a list of all the substring of the given string.", "input": "string = \"hello\"", "output": "def substrings(string):\n    substrings_list = []\n    for i in range(len(string)+1):\n        for j in range(i+1, len(string)+1):\n            substrings_list.append(string[i:j])\n    return substrings_list", "category": "Python"}, {"instruction": "Sort a given array of integers using Quick Sort", "input": "", "output": "def quickSort(arr): \n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quickSort(left) + middle + quickSort(right)", "category": "Python"}, {"instruction": "Create a virtual environment in Python using the \"virtualenv\" tool.", "input": "", "output": "python -m pip install virtualenv\nvirtualenv envname\nsource envname/bin/activate", "category": "Python"}, {"instruction": "How can you check if the given word is a palindrome in Python?", "input": "", "output": "word = \"madam\"\n\nif word == word[::-1]:\n  print(\"It is a palindrome\")\nelse:\n  print(\"It is not a palindrome\")", "category": "Python"}, {"instruction": "How can you access the last element of the following Python array?", "input": "arr = [\"A\",\"B\",\"C\",\"D\",\"E\"]", "output": "arr[-1]", "category": "Python"}, {"instruction": "Describe the purpose of Asynchronous programming.", "input": "", "output": "Asynchronous programming is a method of concurrent programming in which a unit of work runs separately from the main application thread and notifies the calling thread of its completion, failure or progress. It enables programs to run multiple operations at the same time without blocking other operations. This helps improve the performance of applications by allowing them to do work in parallel.", "category": "Python"}, {"instruction": "Explain the use of 'break' and 'continue' in for loops.", "input": "", "output": "The \u201cbreak\u201d keyword is used to exit from the loop and continues to execute the code after the loop. The \"continue\" keyword is used to skip the rest of the loop and start from the beginning of the loop again. It is used mostly when you have defined certain condition and want to skip some codes when that condition is being met.", "category": "Python"}, {"instruction": "Create a function to group a given set of numbers into a continuous range", "input": "Set of numbers: [1, 3, 4, 6, 7, 8, 10]", "output": "\"\"\"\nFunction group_numbers: Groups a given set of numbers into a continuous range.\n\"\"\"\n\ndef group_numbers(nums):\n    # Initialize left and right pointers\n    l = 0\n    r = 1\n    # Initialize ranges list\n    ranges = []\n    \n    while r < len(nums):\n        # If the end of the range is not same as the \n        # start of the next range, append the current range \n        if nums[r - 1] + 1 != nums[r]:\n            ranges.append(str(nums[l]) + \"->\" + str(nums[r - 1]))\n            l = r\n\n        r += 1\n\n    # Append the last range\n    ranges.append(str(nums[l]) + '->' + str(nums[r - 1]))\n\n    return ranges\n\nif __name__ == '__main__':\n    nums = [1, 3, 4, 6, 7, 8, 10]\n    print(group_numbers(nums))", "category": "Python"}, {"instruction": "Compute the maximum amount of money X which can be obtained using two given coins of denomination A and B.", "input": "A = 5 \nB = 7\nX = 31", "output": "\"\"\"\nFunction max_money: Computes the maximum amount of money X which can be obtained using two given coins of denomination A and B.\n\"\"\"\n\ndef max_money(A, B, X):\n    max_A = X // A # maximum coins A can be used\n    max_B = X // B # maximum coins B can be used\n    \n    # Try all possible combinations between coins of A and B\n    max_money = 0\n    for a in range(max_A + 1):\n        for b in range(max_B + 1):\n            money = a * A + b * B\n            if money <= X:\n                max_money = max(max_money, money)\n  \n    return max_money\n\nif __name__ == '__main__':\n    A = 5\n    B = 7\n    X = 31\n    print(max_money(A, B, X))", "category": "Python"}, {"instruction": "Create a function to register a new user using a given username, email and password.", "input": "username: angelina \nemail: angelina@example.com\npassword: abc12345", "output": "\"\"\"\nFunction register: Registers a new user using a given username, email and password\n\"\"\"\n\ndef register(username, email, password):\n    # initialize user database\n    user_db = {}\n    # add user info to database\n    user_db[username] = {\n        'email': email,\n        'password': password\n    }\n    # return user database\n    return user_db\n\nif __name__ == '__main__':\n    username = 'angelina'\n    email = 'angelina@example.com'\n    password = 'abc12345'\n    print(register(username, email, password))", "category": "Python"}, {"instruction": "Modify the code below to create a new function called \"addSquares()\" that adds the squares of two numbers and returns the result.", "input": "def add(x, y):\n   return x + y", "output": "def add(x, y):\n   return x + y\n\ndef addSquares(x, y):\n   return x*x + y*y", "category": "Python"}, {"instruction": "What is the argument type of the function \"len()\" in Python?", "input": "", "output": "The argument type of the function \"len()\" in Python is an object.", "category": "Python"}, {"instruction": "Write an Apache VTL code to check if the user is logged in or not.", "input": "", "output": "#if(${user.loggedIn})\n  You are logged in.\n#else\n  You are not logged in.\n#end", "category": "Python"}, {"instruction": "Create a random list of 10 numbers in the range of -10 to 10 in Python.", "input": "", "output": "import random\n \nrandom_list = [random.randint(-10, 10) for i in range(10)] \nprint(random_list)", "category": "Python"}, {"instruction": "Make a prediction using the following machine learning model in Python.", "input": "", "output": "svm_model = SVC()\nsvm_model.fit(X_train, y_train)\npredictions = svm_model.predict(X_test)", "category": "Python"}, {"instruction": "Convert the following array of strings to a set of tuples in Python.", "input": "['Python', 'Java', 'JavaScript']", "output": "arr =  ['Python', 'Java', 'JavaScript']\narr_tuple = tuple(arr)\nprint(arr_tuple)", "category": "Python"}, {"instruction": "Create a python script to determine whether a number is odd or even.", "input": "15", "output": "number = 15 \nif (number % 2 == 0): \n    print(\"even\") \nelse: \n    print(\"odd\")", "category": "Python"}, {"instruction": "Create a bar chart in Python, plotting the following integer data set.", "input": "[1, 2, 4, 8, 16, 32]", "output": "import matplotlib.pyplot as plt\n \ndata_set = [1, 2, 4, 8, 16, 32]\n \nplt.bar(range(len(data_set)), data_set)\nplt.show()", "category": "Python"}, {"instruction": "Create an array in Python that contains five different values.", "input": "", "output": "arr = [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Write a code snippet to determine the number of odd numbers in a given array.", "input": "", "output": "def count_odds(arr):\n    \"\"\"\n    @brief: Counts the number of odd numbers in a given array\n    @param arr: array whose odd numbers are to be counted\n    @return: the number of odd numbers in the given array\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num % 2 == 1:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Design a program to find all prime numbers up to a given limit n.", "input": "", "output": "def find_primes(limit):\n    \"\"\"\n    @brief: Finds all prime numbers up to a given limit n\n    @param limit: the upper limit to find prime numbers\n    @return: a list of all prime numbers found\n    \"\"\"\n    primes = []\n    for n in range(2, limit + 1):\n        is_prime = True\n        for prime in primes:\n            if n % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(n)\n    return primes", "category": "Python"}, {"instruction": "Edit the given list to only include even numbers.", "input": "list = [2,3,4,5,6,7,8]", "output": "for i in list:\n  if i % 2 != 0:\n    list.remove(i)\n\nprint(list)", "category": "Python"}, {"instruction": "Implement a simple search engine using recursion.", "input": "query = \"computer\"\ndata = [\"mobile\",\"computer\",\"laptop\",\"tablet\"]", "output": "def search(query, data):\n  # base case\n  if len(data) == 0:\n    return False\n  # recursive step\n  else:\n    if data[0] == query:\n      return True\n    else:\n      return search(query, data[1:])\n\nquery = \"computer\"\ndata = [\"mobile\",\"computer\",\"laptop\",\"tablet\"]\n\nprint(search(query, data))", "category": "Python"}, {"instruction": "Make an API call to get the current weather in a given city.", "input": "", "output": "import requests\n\napi_key = \"<Enter API key here>\"\ncity = \"London\"\nurl = \"http://api.openweathermap.org/data/2.5/weather?q={}&appid={}\".format(city, api_key)\n\nres = requests.get(url)\ndata = res.json()\n \nprint(\"Current temperature in {} is {}\u00b0F\".format(city, data[\"main\"][\"temp\"]-273.15 * 9/5 + 32))", "category": "Python"}, {"instruction": "Write a function that takes in a max number and returns the sum of all numbers between 0 and the max number.", "input": "10", "output": "def sumFromZeroToMax(n):\n  sum = 0\n  for x in range(n+1):\n    sum += x\n  return sum\n\nprint(sumFromZeroToMax(10))", "category": "Python"}, {"instruction": "Alter the following given code so that it will implement the Bubble Sort Algorithm", "input": "def mySort(arr): \n\tn = len(arr) \n\n\tfor i in range(n-1): \n\t\tfor j in range(0, n-i-1): \n\t\t\tif arr[j] > arr[j+1] : \n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]", "output": "def bubbleSort(arr):\n    n = len(arr) \n\n    for i in range(n): \n  \n        for j in range(0, n-i-1): \n  \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]", "category": "Python"}, {"instruction": "Create a program that takes in a numeric value, X, and prints all the positive divisors of that number.", "input": "X = 8", "output": "def print_divisors(x):\n    divisors = []\n    for i in range(1, x + 1):\n        if(x % i == 0):\n            divisors.append(i)\n    print(divisors)", "category": "Python"}, {"instruction": "Create a code to insert an item in a given position in a linked list.", "input": "Insert \"Hello\" at position 2 in the list {1->2->3->4->5}", "output": "def insertAtPos(head, pos, data): \n    if head is None: \n        return\n    else:\n        temp = head\n        newNode = Node(data)\n        count = 0\n        while (count < pos-1) : \n            temp = temp.next\n            count += 1\n        newNode.next = temp.next\n        temp.next = newNode", "category": "Python"}, {"instruction": "Create a method to calculate the sum of the cubes of the elements in an array.", "input": "arr = [1,2,3,4]", "output": "def sumCubes(arr):\n  sum = 0\n  for i in arr:\n    sum += i**3\n  return sum", "category": "Python"}, {"instruction": "Write a python loop to print all the even numbers between 2 and 15 (inclusive).", "input": "", "output": "for i in range(2, 16):\n    if i % 2 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Create a python anonymous function that squares an input number.", "input": "", "output": "square_num = lambda x: x ** 2", "category": "Python"}, {"instruction": "Write code to delete all elements in a given Python list which are NOT integer type.", "input": "lst = [1, \"a\", 2.3, False, 4, \"abc\"]", "output": "for item in lst[:]:\n    if not isinstance(item, int):\n        lst.remove(item)", "category": "Python"}, {"instruction": "Construct a for loop in Python to iterate through the items in the list and print their corresponding index.", "input": "lst = [1,2,3]", "output": "for i, num in enumerate(lst):\n    print(i, num)", "category": "Python"}, {"instruction": "What is polymorphism and how it is used in object-oriented programming?", "input": "", "output": "Polymorphism is the ability of an object to be interpreted and used differently in different contexts. In object-oriented programming, it allows operations to be performed on objects despite different underlying data types. For example, it allows functions to take multiple types of arguments and still be able to process them, without requiring different lines of code for each data type. Polymorphism also allows for code reuse through the concept of inheritance, where subclasses can inherit all the methods and properties of their parent class. As a result, objects can be written more efficiently and with less repetition.", "category": "Python"}, {"instruction": "Writing a Python function which takes a 2D array as an argument and transposes it.", "input": "arr = [[4, 5, 44], [3, 8, 20], [2, 5, 10]]", "output": "def transpose_(arr):\n  transposedarr = []\n  for i in range(len(arr[0])):\n    row = []\n    for j in range(len(arr)):\n      row.append(arr[j][i])\n    transposedarr.append(row)\n  return transposedarr", "category": "Python"}, {"instruction": "Write a Python script to detect if two numbers have the same frequency of digits.", "input": "", "output": "def same_frequency(num1,num2):\n    str1 = str(num1)\n    str2 = str(num2)\n    if len(str1) != len(str2):\n        return False\n    dict = {}\n    for char in str1:\n        if char in dict:\n            dict[char] += 1\n        else:\n            dict[char] = 1\n    for char in str2:\n        if not char in dict:\n            return False\n        dict[char] -= 1\n    for k in dict:\n        if dict[k] != 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Write a Python function to check if a given string is a palindrome and has all the vowels in it.", "input": "", "output": "def all_vowels_palindrome(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if not word == word[::-1]:\n        return False\n    for char in vowels:\n        if char not in word:\n            return False\n    return True", "category": "Python"}, {"instruction": "Sort the list using Quick Sort", "input": "[2, 3, 5, 6, 1, 4]", "output": "def quick_sort(arr): \n\tif len(arr) <= 1:\n\t\treturn arr\n\tpivot = arr[len(arr) // 2]\n\tleft = [x for x in arr if x < pivot]\n\tright = [x for x in arr if x > pivot]\n\treturn quick_sort(left) + [pivot] + quick_sort(right)", "category": "Python"}, {"instruction": "Input two numbers and output the maximum one in Python", "input": "3, 5", "output": "a = 3\nb = 5\n\nif a > b:\n    print(a)\nelse:\n    print(b)", "category": "Python"}, {"instruction": "Write a python statement to calculate the factorial of 6.", "input": "", "output": "import math\n\nfactorial = math.factorial(6)", "category": "Python"}, {"instruction": "Given an input list of integers, sort the list in ascending order", "input": "", "output": "def sortAsc(lst): \n    for i in range(len(lst)): \n        for j in range(i+1, len(lst)): \n            if lst[i] > lst[j]: \n                lst[i], lst[j] = lst[j], lst[i] \n    return lst", "category": "Python"}, {"instruction": "Write a function to move all zeros in an array to the end.", "input": "[1, 2, 0, 3, 4, 0, 5]", "output": "def moveZeroes(nums):\n    zeros = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeros += 1\n        else:\n            nums[i-zeros] = nums[i]\n    nums[len(nums)-zeros:] = [0] * zeros", "category": "Python"}, {"instruction": "Convert this CSV data into a Pandas DataFrame.", "input": "name,age\nJohn,20\nJames,31", "output": "import pandas as pd\n\ndata = pd.read_csv('data.csv')\n\ndf = pd.DataFrame(data)", "category": "Python"}, {"instruction": "Run the program located in 'helloworld.py'", "input": "", "output": "python helloworld.py", "category": "Python"}, {"instruction": "Write a class definition for a Box class.", "input": "", "output": "class Box:\n    def __init__(self, width, length, height):\n        self.width = width\n        self.length = length\n        self.height = height\n\n    def calculate_volume(self):\n        return self.width * self.length * self.height", "category": "Python"}, {"instruction": "Generate a random 5-element list of integers between 0 and 10.", "input": "", "output": "import random\n\nrandom_list = [random.randint(0, 10) for _ in range(5)]", "category": "Python"}, {"instruction": "Write a Python program to print a random integer between 0 and 5.", "input": "", "output": "import random \n  \n# Print random integer  \nprint(random.randint(0, 5))", "category": "Python"}, {"instruction": "Create a variables in Python to store the following information.", "input": "Name: John, Age: 35", "output": "name = \"John\"\nage = 35", "category": "Python"}, {"instruction": "Code a solution to remove any element from given list if it appears more than 3 times.", "input": "[1,2,3,1,1,1,2]", "output": "def remove_excess_lst(lst): \n    # Count the frequency of each element in the list \n    cnt = Counter(lst)\n\n    # Return the list with elements appearing more than 3 times removed \n    return list(filter(lambda x: cnt[x] <= 3, lst))", "category": "Python"}, {"instruction": "Convert the given list of dictionaries to a tuple of tuples.", "input": "lst = [{\"name\":\"John\", \"age\":21}, {\"name\":\"Bill\", \"age\":30}]", "output": "def convert_to_tuple(lst):\n    tup = [(x['name'], x['age']) for x in lst]\n    return tuple(tup)", "category": "Python"}, {"instruction": "Edit the code below to calculate minimum of 3 numbers.", "input": "def min(a, b):\n    if a < b:\n        return a\n    else:\n        return b", "output": "def min(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c", "category": "Python"}, {"instruction": "Write a method to compare two unsorted arrays of integers and find the number of mismatches.", "input": "[1, 3, 2, 5], [2, 4, 1, 5]", "output": "def get_mismatches(arr1, arr2):\n    mismatches = 0\n    if len(arr1) != len(arr2):\n        return -1\n    for i in range(len(arr1)):\n        if arr1[i] != arr2[i]:\n            mismatches += 1\n    return mismatches", "category": "Python"}, {"instruction": "Make a program to determine if the elements of the array are in increasing order", "input": "[3, 5, 7]", "output": "def isIncreasing(arr):\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return False\n    return True", "category": "Python"}, {"instruction": "Suggest a code snippet to detect a cycle in a linked list", "input": "", "output": "def contains_cycle(head):\n    slow = head\n    fast = head\n    while fast is not None and fast.next is not None:\n        fast = fast.next.next\n        slow = slow.next\n        if slow is fast:\n            return True\n    return False", "category": "Python"}, {"instruction": "Given a list of integers, write a function in Python to sort and reverse the list.", "input": "input_list = [3, 8, 10, 1, 9]", "output": "def sort_and_reverse(list): \n  res_list = sorted(list, reverse=True) \n  return res_list \n  \nsort_and_reverse(input_list) \n\n# Output \n[10, 9, 8, 3, 1]", "category": "Python"}, {"instruction": "Calculate the factorial of n using a recursive function.", "input": "", "output": "def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n-1)", "category": "Python"}, {"instruction": "Create a code in Python to get the current stock price of a company from yahoo finance.", "input": "ticker = \"AAPL\"", "output": "\"\"\"\nCreate a code in Python to get the current stock price of a company from yahoo finance.\n\nInput: ticker = \"AAPL\"\n\"\"\"\n\nimport requests\n\ndef get_stock_price(ticker):\n    url = 'https://finance.yahoo.com/quote/' + ticker\n    response = requests.get(url)\n    data = response.text.split('\"regularMarketPrice\":{\"raw\":')[1].split(',\"fmt\"')[0]\n    return float(data)\n\nprint(get_stock_price('AAPL'))", "category": "Python"}, {"instruction": "Create a method which receives a list of names and outputs the name which occurs the most in that list.", "input": "list = ['Jon', 'Arya', 'Jon', 'Tyrion', 'Cersei', 'Jon']", "output": "\"\"\"\nCreate a method which receives a list of names and outputs the name which occurs the most in that list.\n\nInput: list = ['Jon', 'Arya', 'Jon', 'Tyrion', 'Cersei', 'Jon']\n\"\"\"\n\ndef getMostFrequent(list):\n    frequency = dict()\n    holder = None\n    max_count = 0\n\n    for name in list:\n        if name in frequency: \n            frequency[name] += 1\n        else: \n            frequency[name] = 1\n\n        if frequency[name] > max_count: \n            max_count = frequency[name] \n            holder = name\n\n    return holder \n\nlist = ['Jon', 'Arya', 'Jon', 'Tyrion', 'Cersei', 'Jon']\nprint(getMostFrequent(list))", "category": "Python"}, {"instruction": "Write a code to get the current exchange rate between two currency using the OpenExchangeRates API.", "input": "fromCurrency = \"USD\"\ntoCurrency = \"GBP\"", "output": "\"\"\"\nWrite a code to get the current exchange rate between two currency using the OpenExchangeRates API.\n\nInput: fromCurrency = \"USD\"\n        toCurrency = \"GBP\"\n\"\"\"\n\nimport requests\nimport json\n\ndef get_exchange_rate(fromCurrency, toCurrency):\n    baseUrl = 'https://openexchangerates.org/api/latest.json?app_id=YOUR_APP_ID'\n    response = requests.get(baseUrl)\n    data = json.loads(response.text)\n    rates = data['rates']\n    fromRate = rates[fromCurrency]\n    toRate = rates[toCurrency]\n    return (toRate/fromRate)\n            \nif __name__ == '__main__':\n    print(get_exchange_rate(\"USD\", \"GBP\"))", "category": "Python"}, {"instruction": "Create a program to determine the type of triangle given 3 side lengths", "input": "[5, 4, 3]", "output": "def determine_triangle_type(triangle_sides):\n    if triangle_sides[0] == triangle_sides[1] and triangle_sides[1]  == triangle_sides[2]:\n        return 'equilateral'\n    elif triangle_sides[0] == triangle_sides[1] or triangle_sides[1] == triangle_sides[2] or triangle_sides[2] == triangle_sides[0]:\n        return 'isosceles'\n    else:\n        return 'scalene'", "category": "Python"}, {"instruction": "Write a code that takes a list as an input and returns the elements in reverse order", "input": "['apple', 'banana', 'cherry']", "output": "def reverse_list(input_list):\n    reversed_list = []\n    for i in range(len(input_list)-1,-1,-1):\n        reversed_list.append(input_list[i])\n    return reversed_list", "category": "Python"}, {"instruction": "Write a code that takes a numeric value and returns the factorial of that number", "input": "3", "output": "def factorial(n):\n    result = 1\n    for i in range(1,n+1):\n        result *= i\n    return result", "category": "Python"}, {"instruction": "Create a code that edits a list by adding two to each element", "input": "[1, 2, 3]", "output": "def add_two(input_list):\n    new_list = []\n    for num in input_list:\n        new_list.append(num + 2)\n    return new_list", "category": "Python"}, {"instruction": "Write a code that takes a string and a character as an argument and counts the number of occurrences of that character in the string", "input": "Avengers: \"He brought the team together\"\nCharacter: t", "output": "def count_character(input_string, character):\n    count = 0\n    for char in input_string:\n        if char == character:\n            count +=1\n    return count", "category": "Python"}, {"instruction": "Write a code that takes a list as input and returns a list of every permutation of that list", "input": "[1, 2, 3]", "output": "def get_permutations(input_list): \n    result = [] \n    if len(input_list) == 0: \n        return [] \n    if len(input_list) == 1: \n        return [input_list] \n    for i in range(len(input_list)): \n        x = input_list[i] \n        xs = input_list[:i] + input_list[i+1:] \n        for p in get_permutations(xs): \n            result.append([x] + p) \n    return result", "category": "Python"}, {"instruction": "Merge the following two linked lists.", "input": "Linked List 1: 1->3->5\nLinked List 2: 2->4", "output": "def merge(head1, head2):\n    # If either is empty\n    if not head1 or not head2:\n        return head1 or head2\n    # if first linked list is smaller \n    if head1.data < head2.data:\n        head1.next = merge(head1.next, head2)\n        return head1\n    else: # if second linked list is smaller or equal\n        head2.next = merge(head1, head2.next)\n        return head2", "category": "Python"}, {"instruction": "Suggest the missing line of code in the following Python program.", "input": "nums = [1, 2, 3]\nfor n in nums:\n    print(n)", "output": "nums = [1, 2, 3]\nfor n in nums:\n    print(n)\n\n#Print the sum of the list\nprint(sum(nums))", "category": "Python"}, {"instruction": "Create a function in Python that can compute the area of a rectangular room in square feet.", "input": "length = 20\nwidth = 15", "output": "def findArea(length, width):\n  area = length * width\n  return area\n\n# Call the function\narea = findArea(20, 15)\nprint(\"The area of the room is: \" + str(area) + \"sq.ft\")", "category": "Python"}, {"instruction": "Using Python, reverse a given string \"Hello World!\".", "input": "", "output": "\"!dlroW olleH\"", "category": "Python"}, {"instruction": "Given a list, write a Python code snippet to print the elements of the list in reverse order.", "input": "my_list = [\"one\", \"two\", \"three\", \"four\", \"five\"]", "output": "for element in reversed(my_list):\n    print(element)", "category": "Python"}, {"instruction": "How can you create a dictionary in Python with 3 key-value pairs?", "input": "", "output": "We can create a dictionary in Python with 3 key-value pairs by declaring a dictionary variable with the desired contents. For example:\n\nmy_dict = {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\",\n    \"key3\": \"value3\"\n}", "category": "Python"}, {"instruction": "Write Python code to extract the title from a URL.", "input": "url = \"https://www.google.com/search?q=gpt-3&oq=GPT+3\"", "output": "def get_title(url): \n    url_parsed = urlparse(url)\n    query_parsed = parse_qs(url_parsed.query)\n    title = query_parsed['q'][0]\n    return title\n\nprint(get_title(url))\n\n# Output: GPT 3", "category": "Python"}, {"instruction": "Find the reverse of an array in Python.", "input": "arr = [1, 2, 3, 4, 5]", "output": "arr = [5, 4, 3, 2, 1]", "category": "Python"}, {"instruction": "Generate a list of all even numbers between 20 and 40.", "input": "", "output": "even_numbers = []\nfor num in range(20, 41): \n  if num % 2 == 0: \n    even_numbers.append(num) \n  \nprint(even_numbers) \n\n# Output: [20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]", "category": "Python"}, {"instruction": "Convert a given number to its corresponding Roman numeral.", "input": "", "output": "def convertToRoman(num): \n  val = [ \n            1000, 900, 500, 400, \n            100, 90, 50, 40, \n            10, 9, 5, 4, \n            1 \n        ] \n  syb = [ \n            \"M\", \"CM\", \"D\", \"CD\", \n            \"C\", \"XC\", \"L\", \"XL\", \n            \"X\", \"IX\", \"V\", \"IV\", \n            \"I\"\n        ]\n\n        roman_num = '' \n        i = 0\n        while  num > 0: \n            for _ in range(num // val[i]): \n                roman_num += syb[i] \n                num -= val[i] \n            i += 1\n        return roman_num\n\n# Driver Code\nnum = 13 \nprint(convertToRoman(num)) \n\n# Output: XIII", "category": "Python"}, {"instruction": "Generate a unique ID string of length 12 using a Python function.", "input": "", "output": "import string, random\ndef generate_unique_id(stringLength=12):\n  lettersAndDigits = string.ascii_letters + string.digits\n  return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))\n\nunique_string = generate_unique_id()\nprint(\"unique string: \",unique_string)", "category": "Python"}, {"instruction": "Write a Python program to sort the given list of dictionary elements by the score value", "input": "lst = [{\"score\":1},{\"score\":5},{\"score\":8}]", "output": "def sort_by_score(lst):\n    lst.sort(key=lambda item: item['score'])\n    return lst", "category": "Python"}, {"instruction": "Given the following array and a number k, write a program to determine if it contains a pair of numbers that add up to k.", "input": "arr = [1, 2, 3, 4, 5]\nk = 7", "output": "def has_pair_with_sum(arr, k): \n    temp_set = set() \n  \n    for i in range(len(arr)): \n        temp = k - arr[i] \n        if temp in temp_set: \n            return True\n        temp_set.add(arr[i]) \n  \n    return False", "category": "Python"}, {"instruction": "Create a program that takes two parameters and print out the result of the larger one.", "input": "param1 = 20\nparam2 = 50", "output": "def largest_param(param1, param2):\n    if param1 > param2:\n        return param1\n    else:\n        return param2", "category": "Python"}, {"instruction": "Implement a function to return the element that appears most frequently in a list.", "input": "[5,5,5,5,6,6,7,7,7]", "output": "def find_most_frequent_element(arr):\n    d = {}\n    for num in arr:\n        if num in d: \n            d[num] += 1\n        else:\n            d[num] = 1\n    \n    max_freq = 0\n    most_frequent_element = None\n    for num in d:\n        if d[num] > max_freq:\n            max_freq = d[num]\n            most_frequent_element = num\n\n    return most_frequent_element", "category": "Python"}, {"instruction": "Program a function to get the next element of a list.", "input": "mylist = [1,3,5,7]", "output": "def get_next(mylist):\n    for i in range(len(mylist)-1):\n        return mylist[i+1]\n\nprint(get_next(mylist))", "category": "Python"}, {"instruction": "Develop a code to generate a random port number in the range of 1 to 65535.", "input": "", "output": "import random\n\ndef get_random_port():\n    return random.randint(1, 65535)\n\nrandom_port = get_random_port()\nprint(random_port)", "category": "Python"}, {"instruction": "How do you calculate the hamming distance between two strings?", "input": "str1 = \"abc\"\nstr2 = \"abd\"", "output": "def hamming_distance(str1, str2):\n    # length of the strings must be equal\n    if len(str1) != len(str2):\n        return -1\n    \n    distance = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            distance += 1\n    \n    return distance", "category": "Python"}, {"instruction": "Write code to remove the first item from a list of integers in Python.", "input": "numbers = [2, 3, 4, 5]", "output": "numbers.pop(0)", "category": "Python"}, {"instruction": "How do you run a Python script from the command line?", "input": "", "output": "In order to run a python script from the command line, the \"@python\" command and the path to the file should be used. For example, to execute the \"input.py\" file, the command would be \"@python C:\\Path\\input.py\".", "category": "Python"}, {"instruction": "Write a Python code snippet for printing the items in a given set.", "input": "my_set = {1, 3, 5, 7, 9}", "output": "for item in my_set:\n    print(item)", "category": "Python"}, {"instruction": "Using the provided data, generate a heatmap that contains the temperature readings for each hour.", "input": "data = [[7,15,22], [2,7,23], [9,12,25]]", "output": "from matplotlib.pyplot import imshow\nfrom matplotlib import pyplot as plt\nfrom numpy import array\n\n# Convert data to numpy array\ndata_array = array(data)\n\n# Plot heatmap\nfig, ax = plt.subplots()\nim = ax.imshow(data_array)\nfig.colorbar(im)\nplt.show()", "category": "Python"}, {"instruction": "Generate a unique 8-digit number using the Python Random module", "input": "", "output": "import random \n\nrandom.seed(32) \nunique_id = random.randint(100000000, 999999999)\nprint(\"unique 8-digit number:\", unique_id)", "category": "Python"}, {"instruction": "Create and run a Python script that prints \"Hello, World!\"", "input": "", "output": "# A simple python script\nprint(\"Hello, World!\")", "category": "Python"}, {"instruction": "How would you convert an integer to a float in Python?", "input": "", "output": "You can convert an integer to a float in Python using the float() function. For example, float(4) would return 4.0.", "category": "Python"}, {"instruction": "Debug the following piece of code so that the program functions properly.", "input": "def sub_array(array, num):\n    for i in range(len(array) - 1, 0, -1):\n        if array[i] == num:\n            del array[i]", "output": "def sub_array(array, num):\n    for i in range(len(array) - 1, 0, -1):\n        if array[i] == num:\n            del array[i]\n        else:\n            break", "category": "Python"}, {"instruction": "Write a function to multiply an array of 3 numbers by their sum.", "input": "[4, 5, 6]", "output": "def multiply_array(arr): \n  sum_of_arr = sum(arr)\n  for i in range(len(arr)): \n    arr[i] = arr[i] * sum_of_arr \n  return arr", "category": "Python"}, {"instruction": "Write code to create a list of length 10 with random integers.", "input": "", "output": "import random \n\nmyList = [] \nfor i in range(10): \n     myList.append(random.randint(0,10)) \n\nprint(myList)", "category": "Python"}, {"instruction": "Create a code to display all unique pairs from the following list.", "input": "[1,2,3,4,5,6]", "output": "pairs = []\nfor i in range(len(list)):\n    for j in range(i+1, len(list)):\n        pairs.append((list[i], list[j])) \n\nprint(pairs)", "category": "Python"}, {"instruction": "Implement a recursive function to calculate the factorial of a number, given by the user as an argument.", "input": "", "output": "def calculate_factorial(num):\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return num * calculate_factorial(num-1)", "category": "Python"}, {"instruction": "Create a python dictionary of two elements 'name' and 'age' with the corresponding values John and 25.", "input": "", "output": "my_dict = {'name': 'John', 'age': 25}", "category": "Python"}, {"instruction": "Create an iOS table view to display the list of items.", "input": "", "output": "class TableViewController: UITableViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.dataSource = self\n    }\n    \n    override func numberOfSections(in tableView: UITableView) -> Int {\n        // Number of sections your table view has\n        return 1\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        // Number of rows the table view should have\n        return items.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"Cell\", for: indexPath)\n        cell.textLabel?.text = items[indexPath.row]\n        return cell\n    }\n\n    var items = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\", \"Item 5\"]\n    \n}", "category": "Python"}, {"instruction": "Create a Python function that takes a string and prints out its reverse.", "input": "string = \"Hello world!\"", "output": "def reverseString(string):\n  return string[::-1]\n\nprint(reverseString(string)) # Output: !dlrow olleH", "category": "Python"}, {"instruction": "Create a program which takes two strings and checks if they are anagrams of one another.", "input": "Input string 1: eats\nInput string 2: seat", "output": "def is_anagram(str1, str2):\n    if (sorted(str1)== sorted(str2)):\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    str1 = input(\"Input string 1: \")\n    str2 = input(\"Input string 2: \")\n    print(is_anagram(str1, str2))", "category": "Python"}, {"instruction": "Write a code that takes in two strings that are anagrams of each other and determines whether they are anagrams.", "input": "str1 = 'martha'\nstr2 = 'hartma'", "output": "def is_anagram(str1, str2):\n    if (sorted(str1)== sorted(str2)):\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    str1 = 'martha'\n    str2 = 'hartma'\n    print(is_anagram(str1, str2))", "category": "Python"}, {"instruction": "Create a function that takes two arguments, a list of strings and a string and returns the number of times the passed in string appears in the list.", "input": "words = ['hello', 'hi', 'world', 'foo', 'bar', 'hello']\ngiven_string = 'hello'", "output": "def find_words(words, given_string):\n    count = 0\n    for word in words:\n        if word == given_string:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    words = ['hello', 'hi', 'world', 'foo', 'bar', 'hello']\n    given_string = 'hello'\n    print(find_words(words, given_string))", "category": "Python"}, {"instruction": "Design a class named Circle that can store information about a circle and perform calculations on it.", "input": "", "output": "class Circle:\n    \n    def __init__(self, radius):\n        self.radius = radius\n    \n    def calculate_area(self):\n        return 3.14 * self.radius * self.radius\n    \n    def calculate_circumference(self):\n        return 2 * 3.14 * self.radius", "category": "Python"}, {"instruction": "Format the following list in descending order of number of characters in each string.", "input": "list = ['Hello', 'World', 'Technology']", "output": "def sort_list(list):\n    for i in range(len(list)):\n        for j in range(0, len(list)-i-1):\n            if len(list[j]) < len(list[j+1]):\n                list[j], list[j+1] = list[j+1], list[j]\n    return list\n\nsort_list([\"Hello\", \"World\", \"Technology\"])", "category": "Python"}, {"instruction": "Create an algorithm to find out the longest common sub-sequence between two string inputs.", "input": "\"AGGTAB\"\n\"GXTXAYB\"", "output": "def LCSubStr(Str1, Str2): \n    n = len(Str1)\n    m = len(Str2)\n    LCSuff = [0] * (n + 1)\n    LCSuff = [[0 for k in range(m + 1)] for l in range(n + 1)]   \n    result = 0    \n    for i in range(n): \n        for j in range(m):  \n            if (Str1[i] == Str2[j]): \n                LCSuff[i + 1][j + 1] =LCSuff[i][j] + 1\n                if (LCSuff[i + 1][j + 1] > result): \n                    result = LCSuff[i + 1][j + 1]\n    return result", "category": "Python"}, {"instruction": "Create a function to return the subset of an array which has the lengths of its elements smaller than the given threshold.", "input": "[1, 5, 2, 8], threshold = 5", "output": "def filter_length(arr, th):\n  subset = []\n  for el in arr:\n    if len(el) <= th:\n      subset.append(el)\n  return subset", "category": "Python"}, {"instruction": "Create a function in Python to generate n permutations of a given array.", "input": "arr = [1, 2, 3]\nn = 6", "output": "import itertools \n\n# Function to generate \n# n permutations of the given array \ndef permutation(arr, n): \n\t\n\t# Get all permutations \n\tpermList = list(itertools.permutations(arr, n)) \n\t\n\t# Converting each tuple in the \n\t# list of tuples to list \n\tres = [list(ele) for ele in permList] \n\n\t# Returning the list of lists \n\treturn res", "category": "Python"}, {"instruction": "Write a function to check whether two lists are equal.", "input": "list1=[1,2,3,4,5]\nlist2=[1,2,3,4,5]", "output": "def equal(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    \n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    return True", "category": "Python"}, {"instruction": "Can you code a solution to Bubble Sort an array of integers?", "input": "[5, 4, 3, 2, 1]", "output": "def bubbleSort(arr): \n    n = len(arr)\n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [5, 4, 3, 2, 1] \n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "category": "Python"}, {"instruction": "Edit this code snippet to reverse a string in Python.", "input": "def reverse_string(s):\n    # Edit here\n    return reversed_string", "output": "def reverse_string(s):\n    reversed_string = \"\"\n    for char in s:\n        reversed_string = char + reversed_string\n    return reversed_string", "category": "Python"}, {"instruction": "Create a quick calculator in Python based on the user input.", "input": "2 * 3 + 5", "output": "def quick_calc(string):\n    result = 0 \n    calculation = string.split(\" \")\n    for item in calculation:\n        try:\n            result += int(item)\n        except:\n            if item.lower() == \"*\":\n                result *= int(calculation[calculation.index(item) + 1])\n    return result\n\nprint(quick_calc(\"2 * 3 + 5\"))\n11", "category": "Python"}, {"instruction": "Create a function in Python that adds two numbers.", "input": "", "output": "def add(x, y):\n    \"\"\"Return the sum of x and y.\"\"\"\n    return x + y", "category": "Python"}, {"instruction": "Implement Binary Search in Python", "input": "[2, 3, 4, 5, 11, 19, 20]", "output": "# function to do binary search\ndef binarySearch(array, x): \n    l, r = 0, len(array)-1 \n    while l <= r: \n  \n        mid = l + (r - l)//2; \n          \n        # Check if x is present at mid \n        if array[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        elif array[mid] < x: \n            l = mid + 1\n  \n        # If x is smaller, ignore right half \n        else: \n            r = mid - 1\n      \n    # If we reach here, then the element \n    # was not present \n    return -1\n  \narray = [2, 3, 4, 5, 11, 19, 20] \nx = 11\n\nresult = binarySearch(array, x) \nif result != -1: \n    print (\"Element is present at index\", \n            result) \nelse: \n    print (\"Element is not present in array\")", "category": "Python"}, {"instruction": "Use the following input to write a python code for calculating the area of a triangle", "input": "Base = 6cm, Height = 4.5cm", "output": "# calculate the area of a triangle\n# define the constant base and height\nbase = 6.0\nheight = 4.5\n# calculate the area\narea = 0.5 * base * height\n# print the result\nprint('The area of the triangle is: %0.2f cm^2' %area)", "category": "Python"}, {"instruction": "Write the code for the following sorting algorithm.", "input": "Bubble Sort", "output": "def bubbleSort(arr): \n  \n    # Traverse through all array elements \n    for i in range(len(arr)): \n  \n        # Last i elements are already in place \n        for j in range(0, len(arr)-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [64, 34, 25, 12, 22, 11, 90] \n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "category": "Python"}, {"instruction": "Write a TensorFlow program to compute the sum of two tensors.", "input": "x = [[1,2],[3,4]] \ny = [[5,6],[7,8]]", "output": "import tensorflow as tf\n\nx = tf.constant([[1,2],[3,4]], dtype=tf.int32) \ny = tf.constant([[5,6],[7,8]], dtype=tf.int32)\n\n#Sum operation\nz = tf.add(x, y)\n\n#Run in session\nwith tf.Session() as session:\n  print(session.run(z))\n\n# Output: \n# [[ 6  8]\n#  [10 12]]", "category": "Python"}, {"instruction": "Write a code to print out the union of two sets using Python.", "input": "", "output": "def find_union(A, B):\n    return list(set(A).union(set(B)))\n\nA = [1, 2, 3, 4] \nB = [4, 5, 6, 7] \nprint(find_union(A, B))", "category": "Python"}, {"instruction": "Create a function to find the number of elements in the list which have a value larger than the given number 'k'.", "input": "[10, 15, 20, 25], k = 15", "output": "def count_larger(lst, k):\n    count = 0\n    for i in lst:\n        if i > k:\n            count += 1\n    return count\n        \nprint(count_larger([10, 15, 20, 25], 15))", "category": "Python"}, {"instruction": "Generate a code to perform a Merge Sort on an unsorted array of numbers.", "input": "", "output": "def mergeSort(arr): \n    if len(arr) >1: \n        mid = len(arr)//2 \n        L = arr[:mid] \n        R = arr[mid:] \n  \n        mergeSort(L) \n        mergeSort(R) \n  \n        i = j = k = 0\n          \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                arr[k] = L[i] \n                i+=1\n            else: \n                arr[k] = R[j] \n                j+=1\n            k+=1\n          \n        while i < len(L): \n            arr[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            arr[k] = R[j] \n            j+=1\n            k+=1", "category": "Python"}, {"instruction": "Edit the following Python class 'Foo' to accept a list of numbers upon instantiation.", "input": "class Foo():\n    def __init__(self):\n        self.lst = []", "output": "class Foo():\n    def __init__(self, lst):\n        self.lst = lst", "category": "Python"}, {"instruction": "Output a list of each element in the input increase twice.", "input": "[1,10,20]", "output": "def double_each(lst):\n    return [x*2 for x in lst]\n\nprint(double_each([1,10,20]))", "category": "Python"}, {"instruction": "Given the input list of size N, write a code to print out the sum of the first N-1 elements.", "input": "X = [10, 20, 30, 40, 50]", "output": "def sum_firstN_minusOne(X):\n    total = 0\n    for i in range(len(X)-1):\n        total += X[i]\n    return total\n\nprint(sum_firstN_minusOne(X))", "category": "Python"}, {"instruction": "Modify the input so that the following Python program returns 'Yes'", "input": "num = 10\n\nif num > 5:\n    print('No')", "output": "num = 10\n\nif num > 5:\n    print('Yes')", "category": "Python"}, {"instruction": "Create a Python script to output the sum of the elements in a given 2-D array.", "input": "X = [[11, 18], [20, 1], [12, 16]]", "output": "def sum_elements(X):\n    sums = 0\n    for i in range(len(X)):\n        for j in range(len(X[i])):\n            sums+=X[i][j]\n    return sums\n\nprint(sum_elements(X))", "category": "Python"}, {"instruction": "Given a Python function, edit the function such that it correctly prints the second highest value of the list.", "input": "def getSecondMax(a):\n    print(max(a))", "output": "def getSecondMax(a):\n    s = sorted(a)[-2]\n    print(s)", "category": "Python"}, {"instruction": "Using the input, write a function that prints out the Nth Fibonacci number.", "input": "", "output": "def Fibonacci(n): \n    if n < 0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n == 0: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n == 1: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)", "category": "Python"}, {"instruction": "Implement a function in Python that takes a list of strings as parameter and prints out the longest string.", "input": "strings = [\"Hello\", \"world\", \"Welcome\",\"to\", \"my\", \"programming\", \"challenge\"]", "output": "def print_longest_string(strings):\n  longest_string = \"\"\n  for string in strings:\n    if len(string) > len(longest_string):\n      longest_string = string\n  print(longest_string)\n\nprint_longest_string(strings)", "category": "Python"}, {"instruction": "Generate a Python code that flattens a two-dimensional array.", "input": "[[1, 2], [3, 4]]", "output": "def flatten_2d_array(arr):\n    flat_arr = []\n    for subarr in arr:\n        flat_arr += subarr\n    return flat_arr\n\n# Driver code\ninput_list = [[1, 2], [3, 4]]\nprint(flatten_2d_array(input_list))", "category": "Python"}, {"instruction": "Create a python class \"Car\" with fields \"make\" and \"model\".", "input": "", "output": "class Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model", "category": "Python"}, {"instruction": "Identify the type of a variable in a Python program.", "input": "x = [1, 2, 3]", "output": "type(x) # List", "category": "Python"}, {"instruction": "Describe your approach to sorting a variety of data with a single sorting algorithm.", "input": "", "output": "My approach to sorting a variety of data would involve using a single sorting algorithm. Depending on the type of data, I would select the most appropriate sorting algorithm which would involve understanding the complexity of the data and the type of sorting required. Generally, I would use quick sort or merge sort as they are efficient and have good performance. However, if needed, I would be open to using insertion or bubble sort as well.", "category": "Python"}, {"instruction": "Create a custom exception class for a restaurant that has no menu items.", "input": "", "output": "class NoMenuItemsError(Exception): \n    def __init__(self, message): \n        super().__init__(message)\n        self.message = message \n\ndef raise_error():\n    raise NoMenuItemsError(\"No menu items are available\")", "category": "Python"}, {"instruction": "Create a dictionary in which keys are characters and values are the occurences of that character in a given string.", "input": "string = \"apple\"", "output": "def get_char_count(string):\n    char_count = {}\n    for char in string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    return char_count", "category": "Python"}, {"instruction": "Use the information provided to initialize a dictionary in Python.", "input": "keys = [\"name\", \"age\", \"gender\"]\nvalues = [\"John Doe\", 25, \"Male\"]", "output": "my_dict = dict(zip(keys, values))", "category": "Python"}, {"instruction": "Generate a code in Lua to find the maximum number in a given array.", "input": "", "output": "function findMax(arr)\n    local maxValue = -math.huge\n    for i = 1, #arr do\n        if arr[i] > maxValue then\n            maxValue = arr[i]\n        end\n    end\n    return maxValue\nend", "category": "Python"}, {"instruction": "Suggest a solution to convert a given number from one base to another.", "input": "", "output": "def base_conversion(num, base_from, base_to):\n if base_from == 10:\n  num = int(num, base_to)\n elif base_to == 10:\n  num = int(str(num), base_from)\n else:\n  num = int(str(int(str(num), base_from)), base_to) \n return num", "category": "Python"}, {"instruction": "Write a Python parser to parse the json string to a dictionary.", "input": "{\"name\": \"John\", \"age\": 23}", "output": "import json\n\ndef json_parser(string):\n  data = json.loads(string)\n  return data", "category": "Python"}, {"instruction": "Implement an algorithm to generate the permutations of a string", "input": "", "output": "def permutations(string):\n    if len(string) <= 1:\n        return set([string])\n\n    # get the last character\n    last_char = string[-1]\n\n    # get all permutations for the remaining characters\n    all_permutations = permutations(string[:-1])\n\n    # create permutations for including the last character\n    permutations_with_last_char = set()\n    for permutation in all_permutations:\n        for idx in range(len(string)):\n            permutation_with_last_char = permutation[:idx] + last_char + permutation[idx:]\n            permutations_with_last_char.add(permutation_with_last_char)\n\n    return permutations_with_last_char", "category": "Python"}, {"instruction": "Given an array of integers, write a recursive program to merge two sorted subarrays ar1 and ar2", "input": "ar1 = [1, 4, 7, 9]\nar2 = [2, 5, 6, 8]", "output": "def mergeSortedSubarrays(ar1, ar2): \n    # if ar1 is empty \n    if len(ar1) == 0: \n        return ar2   \n    # if ar2 is empty \n    if len(ar2) == 0: \n        return ar1 \n  \n    # compare the first elements of each array\n    if ar1[0] < ar2[0]: \n        # add the smaller element to the result\n        result = [ar1[0]] \n        # remove the element from the first array \n        ar1.remove(ar1[0]) \n    else: \n        result = [ar2[0]] \n        ar2.remove(ar2[0]) \n  \n    # call the same function over the remaining elements in the both arrays\n    result = result + mergeSortedSubarrays(ar1, ar2) \n    return result", "category": "Python"}, {"instruction": "List all the methods available in axelrod python library", "input": "", "output": "Methods available in axelrod Python library are constructor method, player_names method, init method, play method, get_history method, reset method, sign_string method, find_conformers method, oppose_strategy method, strategy method, final_score method, cooperation method, defect method, normalised_score method, and elo_rating method.", "category": "Python"}, {"instruction": "Create a function that takes two strings's, two string length's and returns true if the second string is a rotation of the first.", "input": "string1 = \"Hello World\"\nstring2 = \"WorldHello\"\nlength1 = 11\nlength2 = 11", "output": "def isRotation(string1, string2, length1, length2):\n    if length1 == length2 and len(string1)>0:\n        string1string1 = string1 + string1\n        return string2 in string1string1", "category": "Python"}, {"instruction": "Create a program to take a string of words and return the count of each word.", "input": "word_string = \"This is a sentence of words\"", "output": "def countWords(word_string):\n    words = word_string.split()\n    count_dict = {}\n    for word in words:\n        count_dict[word] = words.count(word)\n    return count_dict", "category": "Python"}, {"instruction": "Create a python class that stores the name of the student, their total marks and return the student name with their total marks.", "input": "name = 'John'\nmarks = 75", "output": "class Student:\n    def __init__(self, name, marks):\n        self.name = name\n        self.marks = marks\n\n    def get_details(self):\n        return self.name + \": \" + str(self.marks)", "category": "Python"}, {"instruction": "Define an absolute difference function in Python to find the difference between two numbers.", "input": "", "output": "def absolute_difference(x, y):\n    return abs(x - y)", "category": "Python"}, {"instruction": "Write a python program that takes a string as a parameter and prints the character at index 4 if the length of the string is greater than 4.", "input": "astring = \"Python\"", "output": "def character_at_index(astring):\n    if len(astring) > 4:\n        print(astring[4])", "category": "Python"}, {"instruction": "We need to find the maximum element in a given array of numbers.", "input": "[1, 2, 3, 4, 5]", "output": "def find_max(arr):\n maximum = arr[0]\n for i in arr[1:]:\n if i > maximum:\n maximum = i\n return maximum", "category": "Python"}, {"instruction": "We need to build a function to compute the product of the elements of a given array.", "input": "[1, 2, 3, 4, 5]", "output": "def product_of_array(arr):\n prod = 1\n for i in arr:\n prod *= i\n return prod", "category": "Python"}, {"instruction": "We need to write a program to generate all permutations of a given string.", "input": "", "output": "def generate_permutations(s):\n results = []\n if len(s) == 1:\n results.append(s)\n else:\n for i, c in enumerate(s):\n for perm in generate_permutations(s[:i] + s[i + 1:]):\n results.append(c + perm)\n return results", "category": "Python"}, {"instruction": "We need to find all unique combinations of elements from a given list of items.", "input": "[1, 2, 3, 4]", "output": "def find_unique_combinations(items):\n result = []\n for i in range(1, len(items) + 1):\n for combination in itertools.combinations(items, i):\n result.append(list(combination))\n return result", "category": "Python"}, {"instruction": "You are given a list of numbers and you need to calculate the standard deviation of the numbers.", "input": "[1, 2, 3, 4, 5]", "output": "import statistics\n\ndef calculate_std_dev(nums):\n return statistics.stdev(nums)", "category": "Python"}, {"instruction": "Generate a classification network in a deep learning framework.", "input": "", "output": "import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation\n\nmodel = Sequential()\n\nmodel.add(Dense(64, input_dim = 8))\nmodel.add(Activation('relu'))\nmodel.add(Dense(16))\nmodel.add(Activation('sigmoid'))\nmodel.add(Dense(2))\nmodel.add(Activation('softmax'))\n\nmodel.compile(loss = 'categorical_crossentropy',\n              optimizer = 'adam',\n              metrics = ['accuracy'])", "category": "Python"}, {"instruction": "Create a function to test if an integer is prime or not.", "input": "", "output": "def is_prime(x):\n    if x < 2: \n        return False\n    for n in range(2, x - 1):\n        if x % n == 0: \n            return False\n    return True", "category": "Python"}, {"instruction": "What is deadlock in operating system?", "input": "", "output": "Deadlock is a situation in an operating system where two or more processes are unable to move forward due to the resources already being used by some of the other processes. This is a state of equilibrium where no progress can be made in executing the processes due to a circular wait for resources. A process might be waiting indefinitely for an event that will never occur. This can cause a system to become unresponsive as no progress can be made in execution. It is important for operating system designers to identify potential deadlocks and manage them effectively.", "category": "Python"}, {"instruction": "Explain the purpose of a deadlock in a multithreaded program.", "input": "", "output": "A deadlock occurs in a multithreaded program when two or more threads are blocked from accessing a resource, because each thread is waiting for a resource that is being held by one of the other threads. This results in all threads being stuck, unable to proceed.", "category": "Python"}, {"instruction": "Implement a function to generate the Fibonacci series upto 'n' terms.", "input": "n = 10", "output": "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Create a python function which finds the intersection of two lists", "input": "list1=[2, 5, 8, 10]\nlist2=[3, 5, 8, 10]", "output": "def intersect(list1,list2):\n    return [i for i in list1 if i in list2]", "category": "Python"}, {"instruction": "Given two lists, write a Python code to find the common elements in both the lists", "input": "list1 = [3, 7, 14, 19]\nlist2 = [6, 8, 14, 17]", "output": "common_elements = [element for element in list1 if element in list2]\n\nprint(common_elements) #[14]", "category": "Python"}, {"instruction": "Explain the use of the continue keyword in Python", "input": "", "output": "The continue keyword can be used to skip over certain elements in a loop body. It is often used to skip over certain unwanted elements. It works by returning to the loop condition by stopping the current iteration of the loop and jumping straight to the next iteration.", "category": "Python"}, {"instruction": "Using the following data, generate a random string in Python", "input": "data = [\u201cH\u201d, \u201ce\u201d, \u201cl\u201d, \u201cl\u201d, \u201co\u201d]", "output": "import random\n\nrandom_string = \"\".join(random.choices(data, k=5))\n\nprint(random_string) #helll or olleh or leloh or any other combination", "category": "Python"}, {"instruction": "Design a program to reverse a string without using the built-in 'reverse' method.", "input": "string = \"Hello World\"", "output": "def reverseStr(str):\n    revStr = \"\" \n    i = len(str) - 1\n    while i >= 0: \n        revStr += str[i] \n        i = i - 1\n    return revStr", "category": "Python"}, {"instruction": "Create code to check if the number is a power of three.", "input": "num = 8", "output": "def is_power_of_3(num):\n  if num == 1:\n    return True\n  elif num % 3 != 0:\n    return False\n  else:\n    return is_power_of_3(num / 3)", "category": "Python"}, {"instruction": "Create a python function that takes a string as input and returns a boolean if the string contains only upper case letters.", "input": "", "output": "def all_upper(s):\n        return s.isupper()", "category": "Python"}, {"instruction": "Rewrite the given recursive Python program as a loop.", "input": "def factorial(n): \n   if (n == 1): \n       return n\n   else: \n       return n * factorial(n-1)", "output": "def factorial(n): \n    result = 1\n    for i in range(n): \n        result = result * (i + 1)\n    return result", "category": "Python"}, {"instruction": "Compile a program to find the number of a specific digit in a given number.", "input": "Number = 1234, Digit = 3", "output": "def count_digit(num, digit):\n    count = 0\n    while num > 0:\n        if num % 10 == digit:\n            count += 1\n        num //= 10\n    \n    return count\n\nNumber = 1234\nDigit = 3\nprint(count_digit(Number, Digit))", "category": "Python"}, {"instruction": "Compile a program to check whether an array is a subset of another array", "input": "example1 = [4, 5, 6]\nexample2 = [5, 6, 7]", "output": "def is_subset(a, b): \n    for i in a: \n        if i not in b: \n            return False \n    return True", "category": "Python"}, {"instruction": "Design a series of methods that would be used to implement a card game", "input": "", "output": "The methods that could be used to implement a card game would include the following: \n\n- drawCard(): To retrieve a card from the deck. \n- shuffleDeck(): To mix up the cards in the deck. \n- getValue(): To get the numerical value of a card. \n- compareCards(): To compare two cards. \n- checkForWinner(): To check if a player has won or not. \n- dealCards(): To distribute the cards to players. \n- removeCard(): To remove a card from the deck. \n- printScore(): To print out the scores of a player.", "category": "Python"}, {"instruction": "Why is it important to document each step of the code development process?", "input": "", "output": "It is important to document each step of the code development process to ensure that all of the code is easily understandable and maintainable. Documentation can explain how the code works, which can be useful for other developers that may need to modify or debug the code. Additionally, it can explain the logic and any decisions that were made while writing the code, as well as provide any additional information that may be useful. Ultimately, documenting each step of the code development process helps to ensure that the code can be easily understood and maintained.", "category": "Python"}, {"instruction": "How can we use try\u2026except blocks in Python to handle errors?", "input": "", "output": "Try...except blocks are used in Python to handle errors gracefully. They provide a way for Python to execute a code block and gracefully handle any errors that may occur. The code block inside the try is executed first and if an error occurs, it will be caught by the except block and handled. For example, if we have a function that might generate an error, we can use a try...except block to gracefully handle the error and prevent the program from crashing. The try...except block allows us to execute the code and gracefully handle any errors that may occur.", "category": "Python"}, {"instruction": "Discuss the potential performance impacts of using a Numpy array for a given task", "input": "", "output": "Using a Numpy array for a given task can potentially have a positive performance impact in terms of memory usage and computation speed. Numpy arrays are stored contiguously in memory, making them much faster to access than an array stored in traditional Python lists whose elements are stored separately. Additionally, when performing element-wise operations, such as mathematical computations across arrays, Numpy arrays can be much faster than using regular Python loops. Since they are stored contiguosly, they benefit from the processor's usage of cache coherency. Therefore, using Numpy arrays can greatly reduce latency and increase the computational performance of a task.", "category": "Python"}, {"instruction": "Write a function to check if an array is sorted according to given constraints.", "input": "arr = [2, 3, 15, 9, 5]", "output": "def isSorted(arr) : \n\tn = len(arr) \n\tfor i in range(0,n-1): \n\t\tif arr[i] > arr[i+1]:\n\t\t\treturn False\n\treturn True", "category": "Python"}, {"instruction": "Create a class to represent a 3D point(x,y,z).", "input": "", "output": "class Point3D(object):\n    def __init__(self, x, y, z):\n        self.x = x \n        self.y = y \n        self.z = z\n    \n    def __repr__(self):\n        return \"Point3D(%d, %d, %d)\" % (self.x, self.y, self.z)", "category": "Python"}, {"instruction": "Write a code that checks if two String are anagrams.", "input": "s1 = \"listen\", s2 = \"silent\"", "output": "def areAnagrams(s1, s2): \n  \n    if (len(s1) != len(s2)): \n        return False\n  \n    s1 = sorted(s1) \n    s2 = sorted(s2) \n  \n    for i in range(len(s1)): \n        if (s1[i] != s2[i]):\n          return False\n  \n    return True", "category": "Python"}, {"instruction": "How can you create a dictionairy from the following two lists in Python?", "input": "list1 = [\"a\", \"b\", \"c\"]\nlist2 = [1, 2, 3]", "output": "dict_from_lists = dict(zip(list1, list2))", "category": "Python"}, {"instruction": "Write a function that takes two inputs, a list and a target number, and prints only the list items whose total add up to the target number.", "input": "list = [1, 5, 9, 10], target = 10", "output": "def sum_of_list(lst, target):\n    \"\"\"\n    This function takes a list and a target number as inputs, and prints only the list items whose total add up to the target number.\n    \"\"\"\n    for i in range(len(lst)-1):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                print (lst[i], lst[j])\n\nsum_of_list(list, target)", "category": "Python"}, {"instruction": "Explain what is meant by recursion in programming.", "input": "", "output": "Recursion is a programming technique which involves a function calling itself in order to solve a problem. It allows the function to repeat itself until a certain condition is met, by breaking the problem down into simpler versions of itself. This is done by using a base case, which is a smaller version of the problem that can be solved without using recursion, and the recursive case, which is the same problem but broken down in a way that it can call itself as a subproblem. This technique can be used to solve complex problems and be used for things such as sorting algorithms, tree traversals, and graph algorithms.", "category": "Python"}, {"instruction": "Implement a search algorithm with the given data structure.", "input": "def searchTree(T, k):\n    \"\"\"\n    Tree T is either empty or a node with two subtrees, left and right. \n    The value at the root is a[0]\n    \"\"\"", "output": "def searchTree(T, k):\n    if not T:\n        return False\n\n    if k == T[0]:\n        return True\n    elif k < T[0]:\n        return searchTree(T[1], k)\n    else:\n        return searchTree(T[2], k)", "category": "Python"}, {"instruction": "Use the provided text to generate a python ``dict``.", "input": "KEY1:VALUE1,KEY2:VALUE2,KEY3:VALUE3", "output": "{'KEY1': 'VALUE1', 'KEY2': 'VALUE2', 'KEY3': 'VALUE3'}", "category": "Python"}, {"instruction": "Check whether all elements in the array are equal using Python.", "input": "arr = [2,2,2]", "output": "# Check whether all elements in the array are equal\nif all(x == arr[0] for x in arr):\n    print(\"All elements are equal\")\nelse:\n    print(\"Elements are not equal\")", "category": "Python"}, {"instruction": "Create a class named Square and create a method to calculate the area.", "input": "", "output": "class Square:\n    def __init__(self, side):\n        self.side = side\n \n    def area(self):\n        return self.side * self.side", "category": "Python"}, {"instruction": "Find the smallest number in the array using the reduce method.", "input": "array = [2, 7, 3, 8, 5]", "output": "import functools\n\narray = [2, 7, 3, 8, 5]\n\nsmallest = functools.reduce(lambda x,y: x if x < y else y, array)\n\nprint(smallest)", "category": "Python"}, {"instruction": "Write a Python code to classify the following sentence", "input": "It's raining cats and dogs", "output": "import nltk\nfrom nltk.tokenize import word_tokenize\n\nsentence = \"It's raining cats and dogs\"\ntokens = word_tokenize(sentence)\ntagged = nltk.pos_tag(tokens)\n\nprint(tagged) #[('It', 'PRP'), (\"'s\", 'VBZ'), ('raining', 'VBG'), ('cats', 'NNS'), ('and', 'CC'), ('dogs', 'NNS')]", "category": "Python"}, {"instruction": "Generate a unit test for the following bubble sort algorithm", "input": "def bubble_sort(arr): \n    n = len(arr) \n    for i in range(n-1): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]", "output": "import unittest\n\nclass TestBubbleSort(unittest.TestCase):\n    def test_sort(self):\n        arr = [5, 2, 3, 7, 1]\n        bubble_sort(arr)\n        self.assertEqual(arr, [1, 2, 3, 5, 7])\n\nif __name__ == '__main__':\n    unittest.main()", "category": "Python"}, {"instruction": "Write a pseudocode to compare two strings and determine which is longer.", "input": "", "output": "Function CompareStrings(str1, str2)\n  if Length(str1) > Length(str2)\n    return str1\n  else\n    return str2\nEnd Function", "category": "Python"}, {"instruction": "Define a function to compare two strings", "input": "", "output": "def compareStrings(string1, string2):  \n    if(string1 == string2): \n        return 0\n    elif(string1 > string2): \n        return 1\n    else: \n        return -1", "category": "Python"}, {"instruction": "Suggest an additional function needed to complete the following programme.", "input": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None", "output": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \n    def getData(self):\n        return self.data", "category": "Python"}, {"instruction": "Write a function in Python that takes four strings as parameters and returns a single string with all strings concatenated together.", "input": "", "output": "def concatenate(str1, str2, str3, str4):\n  return str1 + str2 + str3 + str4", "category": "Python"}, {"instruction": "Design a class to normalize the salary of an employee with a minimum salary of 20,000.", "input": "", "output": "class SalaryNormalizer:\n    def __init__(self, salary):\n        self.minimum = 20000\n        self.input_salary = salary\n \n    def normalize(self):\n        if self.input_salary < self.minimum:\n            self.normalized_salary = self.minimum\n        else:\n            self.normalized_salary = self.input_salary\n \n        return self.normalized_salary", "category": "Python"}, {"instruction": "Write a code to print out an array of the first ten positive even numbers.", "input": "", "output": "def printEvenNumbers():\n    my_list = []\n    for item in range(2,21,2):\n        my_list.append(item) \n    print(my_list)\n\nprintEvenNumbers() # prints [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]", "category": "Python"}, {"instruction": "What is the GIL in Python and what is its purpose?", "input": "", "output": "The Global Interpreter Lock (GIL) is a mechanism used by Python to manage and control access to shared data and resources. It prevents multiple threads from accessing the same data or using shared resources at the same time. The purpose of the GIL is to prevent the Python interpreter from crashing due to race conditions.", "category": "Python"}, {"instruction": "What data type is returned by the Python function pow()?", "input": "", "output": "The Python function pow() returns a float data type.", "category": "Python"}, {"instruction": "Write a python command which prompts the user to input text", "input": "", "output": "input_text = input(\"Enter some text: \")", "category": "Python"}, {"instruction": "Which sorting algorithm is the best for linked lists?", "input": "", "output": "The best sorting algorithm for linked lists is Merge Sort. Merge Sort is more efficient than other sorting algorithms such as Quicksort or Insertion Sort because it does not require extra space. Furthermore, it is an in-place sorting algorithm, which means that resources are used to sort the linked list without the need to use extra space.", "category": "Python"}, {"instruction": "Answer the following question: What Python library is used for web scraping?", "input": "", "output": "The Python library used for web scraping is called 'BeautifulSoup'.", "category": "Python"}, {"instruction": "Write a python command which prints the text \u201cHello World\u201d if a given number is even.", "input": "number = 10", "output": "if number % 2 == 0:\n    print(\"Hello World\")", "category": "Python"}, {"instruction": "Write a short python script to determine whether a given number is divisible by 5.", "input": "", "output": "def is_divisible_by_5(number):\n    \"\"\"Check whether a given number is divisible by 5 or not.\"\"\"\n    if number % 5 == 0:\n        return True\n    return False", "category": "Python"}, {"instruction": "Suggest an algorithm to search for a matching string in a large text", "input": "Text: \u201cThis is a long piece of text with a searching string\u201d\nSearching string: \u201csearching string\u201d", "output": "The most efficient algorithm for this task would be the KMP (Knuth-Morris-Pratt) algorithm. This is an efficient string matching algorithm that is used to match a pattern string in a given text string. The KMP algorithm is more efficient than traditional string matching algorithms as it pre-processes the pattern string to generate a lps (longest proper prefix which is also a suffix) array, which is then used to compare characters in the text string with characters in the pattern string.", "category": "Python"}, {"instruction": "Create a Bash script that runs a Python code", "input": "Python code:\n\ndef hello_world():\n    print(\"Hello World!\")", "output": "#!/bin/bash\n \npython << END\ndef hello_world():\n    print(\"Hello World!\")\nhello_world()\nEND", "category": "Python"}, {"instruction": "Generate a programming workflow for analyzing a large text dataset.", "input": "Dataset size: 1 million words", "output": "1. Pre-process the input text dataset to remove punctuation and special characters. \n2. Split the dataset into equal chunks for easier parallel processing \n3. Use a language model such as BERT or GPT-2 to tokenize the chunks \n4. Use embeddings to represent words in the dataset \n5. Perform descriptive analytics such as identifying highest frequency words, collocations, etc. \n6. Perform prediction tasks such as sentiment analysis, parts-of-speech analysis, topic modeling, etc. \n7. Pattern recognition tasks such as document classification and clustering. \n8. Generate visualizations such as word clouds, topic maps, etc.", "category": "Python"}, {"instruction": "Construct a python list comprehension", "input": "List of numbers from 2 to 8", "output": "list_nums = [x for x in range(2, 9)]", "category": "Python"}, {"instruction": "Write an algorithm for computing the sum of all digits between 1 to N.", "input": "", "output": "def sum_digits(n):\n    sum = 0\n    for i in range(1, n+1):\n        digits = list(str(i))\n        for digit in digits:\n            sum += int(digit)\n    return sum", "category": "Python"}, {"instruction": "Create a matrix of size 3 x 3 in Python.", "input": "", "output": "# 3x3 matrix \nmatrix3x3 = [[10, 20, 30],  \n             [15, 25, 35],  \n             [27, 29, 37]]", "category": "Python"}, {"instruction": "Count the number of quadruples that sum up to zero", "input": "arr = [-2, -1, 0, 1, 2]", "output": "def countQuadruplesSumZero(arr):\n    \"\"\"\n    This function returns the number of quadruples that sum up to zero.\n    \"\"\"\n    quad = 0\n           \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                for l in range(k+1, len(arr)):\n                    if arr[i] + arr[j] + arr[k] + arr[l] == 0:\n                        quad += 1\n                            \n    return quad", "category": "Python"}, {"instruction": "Print the longest palindrome from the given string", "input": "s = \"abbaba\"", "output": "def longestPalindrome(s):\n    \"\"\"\n    This function prints the longest palindrome from the given string.\n    \"\"\"\n    longest_str = \"\"\n    n = len(s) \n  \n    for i in range(n): \n        # check for odd conditions\n        middle = s[i] \n        left = i-1\n        right = i+1\n        while (left >= 0 and right < n and s[left] == s[right]): \n            middle = s[left] + middle + s[right] \n            left -= 1\n            right += 1\n  \n        longest_str = middle if len(middle) > len(longest_str) else longest_str\n        # check for even conditions\n        middle = ''\n        left = i \n        right = i+1\n        while (left >= 0 and right < n and s[left] == s[right]): \n            middle = s[left] + middle + s[right] \n            left -= 1\n            right += 1\n  \n        longest_str = middle if len(middle) > len(longest_str) else longest_str\n  \n    return longest_str", "category": "Python"}, {"instruction": "Given an array of positive numbers, write a function to return the maximum number of adjacent numbers with the same sign.", "input": "arr = [5, 2, 3, -2, 4, -5, 2, 3]", "output": "def maxAdjSameSign(arr): \n    \"\"\"\n    This function returns the maximum number of adjacent numbers with the same sign.\n    \"\"\"\n    max_count = 0\n    count = 1\n  \n    for i in range(0, len(arr)-1):\n        # If current element and the next element\n        # have the same sign \n        if (arr[i] > 0 and arr[i+1] > 0) or (arr[i] < 0 and arr[i+1] < 0):\n            count += 1\n        else: \n            max_count = max(max_count, count) \n  \n        # Reset count to 1\n        count = 1\n  \n    return max(max_count, count)", "category": "Python"}, {"instruction": "Change the function to eliminate passing by reference", "input": "def f(arr):\n    arr.remove(arr[0])", "output": "def f(arr):\n    arr_copy = arr[::]\n    arr_copy.remove(arr_copy[0])\n    return arr_copy", "category": "Python"}, {"instruction": "Write a code snippet to loop over the characters in a string and add them to an array in Python.", "input": "", "output": "def loop_over_string(s):\n    arr = []\n    for c in s:\n        arr.append(c)\n    return arr", "category": "Python"}, {"instruction": "Using python, create two variables that are equal to each other.", "input": "", "output": "x = 5\ny = 5", "category": "Python"}, {"instruction": "Write a Python code to initialize a 10 x 10 matrix with random values.", "input": "", "output": "import random\n\ndef init_matrix():\n    matrix = [[0 for _ in range(10)] for _ in range(10)]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            matrix[i][j] = random.randint(0,100)\n    return matrix", "category": "Python"}, {"instruction": "Write a function to calculate all the possible paths for a N x N matrix.", "input": "", "output": "def calculate_paths(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n  \n    dp = [[0 for _ in range(cols)] for _ in range(rows)] \n  \n    dp[0][0] = 1\n  \n    for i in range(rows):\n        for j in range(cols): \n            if i-1 >= 0: \n                dp[i][j] = dp[i][j] + dp[i-1][j]\n            if j-1 >= 0:\n                dp[i][j] = dp[i][j] + dp [i][j-1]\n  \n    return dp[rows-1][cols-1]", "category": "Python"}, {"instruction": "Compute the square root of a number without using the square root function.", "input": "number = 4", "output": "def sqrt(number):\n    x = number\n    y = 1\n    epsilon = 0.000001\n    while x-y > epsilon:\n        x = (x + y)/2\n        y = number/x\n    return x\n\nsqrt(number) # returns 2.0", "category": "Python"}, {"instruction": "Develop an algorithm to delete a given node from a linked list.", "input": "Node 3 in the list {1->2->3->4->5}", "output": "def deleteNode(head, node): \n  \n    # If head node itself holds the data to be deleted \n    if (head == node): \n        head = node.next\n  \n    # Find the previous node \n    prev = None\n    curr = head \n    while (curr.data != node.data): \n        prev = curr \n        curr = curr.next\n  \n    # Unlink the node from linked list \n    prev.next = curr.next", "category": "Python"}, {"instruction": "Create a function to check if a given triangle is an equilateral triangle.", "input": "a = 5, b = 5, c = 5", "output": "def isEquilateral(a, b, c):\n    if (a == b == c): \n        return True\n    else: \n        return False\n  \nisEquilateral(a, b, c) # returns True", "category": "Python"}, {"instruction": "How can you check if a given key exists in a dictionary?", "input": "", "output": "You can check if a given key exists in a dictionary using the `in` keyword. For example:\n\nmy_dict = {\n    'name': 'John',\n    'age': 20\n}\nif 'name' in my_dict:\n    print('Key found')", "category": "Python"}, {"instruction": "Define the term \"polymorphism\" in programming.", "input": "", "output": "Polymorphism is a feature in object-oriented programming that allows objects to behave differently depending on the context. It is used to reduce the amount of code needed for different operations and to increase the code's maintainability. Polymorphism allows objects to be defined from a common class in which each instance can be used in a different way based on its particular context. This enables a code to work in multiple forms depending on the data input. It simplifies the coding process by allowing for a single interface to access multiple objects at the same time.", "category": "Python"}, {"instruction": "Write Python code to fill missing values in a Pandas dataframe with a given value.", "input": "import pandas as pd\n\ndf = pd.DataFrame([\n    [8, 'B', 'G'],\n    [28, 'B', np.nan],\n    [22, np.nan, 'G'],\n    [2, 'A', np.nan] \n])", "output": "import pandas as pd\n\ndf = pd.DataFrame([\n    [8, 'B', 'G'],\n    [28, 'B', np.nan],\n    [22, np.nan, 'G'],\n    [2, 'A', np.nan] \n])\n\ndf.fillna(value='NA', inplace=True)", "category": "Python"}, {"instruction": "Design a program to select the names of the students who have secured more than 80% marks in a given exam.", "input": "students = [(\"John\", 75), (\"Mary\", 90), (\"Simon\", 80), (\"Rose\", 80)]", "output": "def get_high_scorers(students):\n    # Get the names of students with marks greater than 80\n    high_scorers = []\n    for student in students:\n        if student[1] > 80:\n            high_scorers.append(student[0])\n    return high_scorers\n\nstudents = [(\"John\", 75), (\"Mary\", 90), (\"Simon\", 80), (\"Rose\", 80)]\nprint(get_high_scorers(students)) # Output will be [\"Mary\"]", "category": "Python"}, {"instruction": "Explain a Python program to check whether a number is Armstrong or not.", "input": "", "output": "def is_armstrong(num):\n    digits = [int(d) for d in str(num)]\n    num_digits = len(digits)\n    armstrong_sum = 0\n    for digit in digits:\n        armstrong_sum += digit ** num_digits\n    return num == armstrong_sum\n\n#Test code\nnum = 153\nprint(is_armstrong(num)) # Output will be True", "category": "Python"}, {"instruction": "Create a class definition in Python for a vehicle with attributes like make, model, year.", "input": "", "output": "class Vehicle:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n \n    # Other methods...", "category": "Python"}, {"instruction": "Create a function that returns true if a given set is a subset of another set.", "input": "set1 = {1,2,3}\nset2 = {1,2,3,4,5,6}", "output": "def is_subset(s1, s2):\n    for e in s1:\n        if e not in s2:\n            return False\n    return True\n\nis_subset({1,2,3}, {1,2,3,4,5,6}) # Output: True", "category": "Python"}, {"instruction": "Find the sum of factors of a given number.", "input": "", "output": "def sum_factors(n):\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    return total\n\nsum_factors(12) # Output: 28", "category": "Python"}, {"instruction": "Generate a numpy array of shape (3,3) with random values between 0 and 10.", "input": "", "output": "import numpy as np\n\narray = np.random.randint(0, 10, size=(3, 3))\nprint(array)\n\n# Output: \n[[5 4 9]\n [6 8 5]\n [4 7 6]]", "category": "Python"}, {"instruction": "Using the Pandas library, parse the given json object.", "input": "{\n   \"name\": \"James\",\n   \"age\": \"60\",\n   \"address\":{\n      \"street\": \"123 Fake Street\",\n      \"city\": \"Springfield\",\n      \"state\": \"MA\"\n }\n}", "output": "import pandas as pd\n\ndata = {\n    'name': [\"James\"],\n    'age': [60],\n    'street': [\"123 Fake Street\"],\n    'city': [\"Springfield\"],\n    'state': [\"MA\"],\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n\n# Output: \n  name  age         street       city state\n0 James   60  123 Fake Street  Springfield    MA", "category": "Python"}, {"instruction": "Create a machine learning model that predicts whether an email is spam or not.", "input": "", "output": "import scikit-learn as sklearn\n\n# Load the data\nX = dataset[['email_body', 'send_from', 'subject', 'num_links']]\ny = dataset['is_spam']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0, stratify=y)\n\n# Train the model\nclassifier = sklearn.linear_model.LogisticRegression()\nclassifier.fit(X_train, y_train)\n\n# Test the model\ny_predicted = classifier.predict(X_test)\n\n# Check the accuracy\naccuracy = sklearn.metrics.accuracy_score(y_test, y_predicted) \nprint(\"Accuracy score: {:.2f}\".format(accuracy)) # Output: Accuracy score: 0.95", "category": "Python"}, {"instruction": "Create a text classifier using supervised learning.", "input": "", "output": "import scikit-learn as sklearn\n\n# Load the data\nX_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# Train the classifier\nclassifier = sklearn.naive_bayes.MultinomialNB()\nclassifier.fit(X_train, y_train)\n\n# Test the classifier\ny_predicted = classifier.predict(X_test)\n\n# Check the accuracy\naccuracy = sklearn.metrics.accuracy_score(y_test, y_predicted) \nprint(\"Accuracy score: {:.2f}\".format(accuracy)) # Output: Accuracy score: 0.89", "category": "Python"}, {"instruction": "Write a function to output the maximum value possible from a given array.", "input": "[-1, 2, 4, 6, -3, 5]", "output": "def max_val(arr):\n    maximum = arr[0]\n    for i in arr:\n        if i > maximum:\n            maximum = i\n    return maximum\n\nmax_val([-1, 2, 4, 6, -3, 5])  # Output: 6", "category": "Python"}, {"instruction": "Output a string which is the reverse of the input string.", "input": "\"Hello World\"", "output": "\"\"\"\nFunction to reverse a given string \n\nInput: String\nOutput: Reversed string\n\"\"\"\n\ndef reverse_string(string): \n    # Create an empty string to store the reversed string \n    reversed_string = \"\"\n\n    # Iterate over the string from the last character \n    for i in range(len(string)-1, -1, -1): \n        reversed_string += string[i] \n  \n    return reversed_string\n\n\nif __name__ == '__main__': \n    # Input \n    string = \"Hello World\"\n  \n    # Result \n    print(reverse_string(string))", "category": "Python"}, {"instruction": "Write a Python program that reads a list of words and prints the most frequently used one.", "input": "['apple', 'banana', 'orange', 'apple']", "output": "\"\"\"\nProgram to read a list of words and print the most frequently used one\n\nInput: List of words\nOutput: Most frequently used word\n\"\"\"\n\ndef most_freq_word(words): \n    # Create an empty dictionary \n    freq = {} \n  \n    # Iterate over the list of words \n    for word in words: \n        # Check if word is already present in the freq dictionary \n        if (word in freq): \n            #Increment the count of word \n            freq[word] += 1\n        else: \n            # Add it to the dictionary with a count of one \n            freq[word] = 1\n  \n    # Get the count of most frequent word \n    max_count = max(freq.values()) \n  \n    # Loop over words and return the most frequent one \n    for key, value in freq.items(): \n        if value == max_count: \n            return key \n\n\nif __name__ == '__main__': \n    # Input\n    words = ['apple', 'banana', 'orange', 'apple']\n\n    # Result\n    print(most_freq_word(words))", "category": "Python"}, {"instruction": "Given a list of numbers, implement a quick sort algorithm.", "input": "[7, 4, 5, 9, 1]", "output": "def quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n \n    pivot = arr[0]\n    less = [i for i in arr[1:] if i <= pivot]\n    greater = [i for i in arr[1:] if i > pivot]\n \n    return quick_sort(less) + [pivot] + quick_sort(greater)\n\nif __name__ == '__main__':\n    arr = [7, 4, 5, 9, 1]\n    print(quick_sort(arr)) # Output:[1, 4, 5, 7, 9]", "category": "Python"}, {"instruction": "Design a data structure to model the evolution of a population.", "input": "", "output": "\"\"\"\nModel the evolution of a population\n\"\"\"\n\nclass Population:\n    def __init__(self):\n        self.population = []\n        self.generation = 0\n\n    def add_member(self, member):\n        self.population.append(member)\n\n    def next_generation(self):\n        self.generation += 1\n        self.population = self.population.create_next_generation()\n\nclass Member:\n    def __init__(self, data):\n        self.data = data\n\n\n    def create_next_generation(self):\n        next_gen_data = []\n        # perform population evolution algorithm\n        # ...\n        return [Member(g) for g in next_gen_data]", "category": "Python"}, {"instruction": "Convert the following data into Excel Format.", "input": "[\n    {'name': 'John', 'age': 20},\n    {'name': 'Paul', 'age': 22},\n    {'name': 'Ringo', 'age': 19}\n]", "output": "\"\"\"\nConvert data into Excel format\n\"\"\"\n\nimport csv\n\ndef to_excel(data):\n    with open('data.csv', 'w', newline='') as csvfile:\n        fieldnames = ['name', 'age']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n\n        writer.writeheader()\n        for row in data:\n            writer.writerow(row)\n\nif __name__ == '__main__':\n    data = [\n        {'name': 'John', 'age': 20},\n        {'name': 'Paul', 'age': 22},\n        {'name': 'Ringo', 'age': 19}\n    ]\n\n    to_excel(data)", "category": "Python"}, {"instruction": "Reverse this array in-place using Python.", "input": "arr = [4, 2, 8, 6]", "output": "arr.reverse() # arr is now [6, 8, 2, 4]", "category": "Python"}, {"instruction": "Write a function in Python to split a given string into the words in the string.", "input": "", "output": "def split_string(string):\n    return string.split()", "category": "Python"}, {"instruction": "Write a function in Python that takes a list of integers as an argument and calculates the mean average.", "input": "", "output": "def calculate_mean(numbers):\n    total_sum = 0; \n    for num in numbers:\n        total_sum += num\n    \n    mean_average = total_sum / len(numbers)\n    return mean_average", "category": "Python"}, {"instruction": "Generate a random hex color in Python.", "input": "", "output": "import random \n  \ndef random_hex_colour_code(): \n    return '#' + ''.join([random.choice('0123456789ABCDEF') for x in range(6)]) \n  \nprint (\"Random Hex Color Code:\", random_hex_colour_code())", "category": "Python"}, {"instruction": "Make a list of numbers from 0 to 20 that are divisible by 3.", "input": "", "output": "numbers = [x for x in range(21) if x % 3 == 0]", "category": "Python"}, {"instruction": "Compare two objects and return 0 if they are equal, -1 if the first is less than the second, and 1 if the first is greater than the second.", "input": "object1 = 7\nobject2 = 8", "output": "def compare(object1, object2):\n    if object1 == object2:\n        return 0\n    elif object1 < object2:\n        return -1\n    else:\n        return 1", "category": "Python"}, {"instruction": "Is the following code valid Python?", "input": "if bool == true:\n    print(\"True\")", "output": "False", "category": "Python"}, {"instruction": "Write code to convert a given string to all uppercase letters in Python.", "input": "", "output": "string_org = \"convert this to uppercase\"\nstring_uppercase = string_org.upper() \nprint(string_uppercase) \n# OUTPUT: CONVERT THIS TO UPPERCASE", "category": "Python"}, {"instruction": "Create a function that takes in an integer and returns true if the number is prime or false if the number is not prime.", "input": "", "output": "def is_prime(num):\n    for n in range(2, num):\n        if(num % n == 0):\n            return False\n    else:\n        return True", "category": "Python"}, {"instruction": "Rewrite the following code to use loop instead of recursion.", "input": "def longest_substring(input_string):\n    if len(input_string) <= 1:\n        return input_string\n    else:\n        first_letter = input_string[0]\n        rest_substring = input_string[1:]\n        sub_string = longest_substring(rest_substring)\n        if first_letter in sub_string:\n            return sub_string\n        else:\n            return first_letter + sub_string", "output": "def longest_substring(input_string):\n    longest_substring = \"\"\n    for i in range(len(input_string)):\n        current_substring = \"\"\n        for j in range(i, len(input_string)):\n            if input_string[j] not in current_substring:\n                current_substring += input_string[j]\n            else:\n                break\n        if len(current_substring) > len(longest_substring):\n            longest_substring = current_substring\n    return longest_substring", "category": "Python"}, {"instruction": "Use the requests library to make an API call and return the response as JSON", "input": "url = http://example.com", "output": "import requests\n\nurl = 'http://example.com'\nresponse = requests.get(url)\ndata = response.json()", "category": "Python"}, {"instruction": "Using the requests library, post a JSON object to a specified URL.", "input": "URL: http://example.com\nJSON object: {\"Name\": \"John\", \"Gender\": \"Male\", \"Age\": 10}", "output": "import requests\n\nurl = 'http://example.com'\ndata = {\"Name\": \"John\", \"Gender\": \"Male\", \"Age\": 10}\n\nrequests.post(url, data=data)", "category": "Python"}, {"instruction": "Using Pandas, count how many rows have a value of \"United States\" in the \"Country\" column.", "input": "Data: \n\nCountry\tState\nUnited States\tNew York\nCanada\tOntario\nUnited Kingdom\tLondon\nUnited States\tCalifornia", "output": "import pandas as pd\n\ndf = pd.DataFrame({'Country':['United States', 'Canada', 'United Kingdom', 'United States'],\n                   'State':['New York', 'Ontario', 'London', 'California']})\n\ncount = df[df['Country'] == 'United States'].shape[0]\nprint(count)\n# Output: 2", "category": "Python"}, {"instruction": "Create a function to format a given phone number \u201c(123) 456-7890\u201d and output a string with canonical format of \u201c+11234567890\u201d.", "input": "Phone number: (123) 456-7890", "output": "def format_phone_number(number):\n    parts = number.split('-')\n    digits = []\n    for part in parts:\n        for char in part:\n            if char.isdigit():\n                digits.append(char)\n    return '+1' + ''.join(digits)\n\nif __name__ == '__main__':\n    number = '(123) 456-7890'\n    canon_number = format_phone_number(number)\n    print(canon_number)", "category": "Python"}, {"instruction": "Create the following function that parses a valid IP address from a string and returns the address string without delimiters and periods.", "input": "String = \u2018192.168.137.8\u2019", "output": "def parse_ip_address(ip_string):\n    ip_list = ip_string.split(\".\")\n    ip_str = \"\".join(ip_list)\n    return ip_str\n\nif __name__ == '__main__':\n    ip_str = parse_ip_address(\"192.168.137.8\")\n    print(ip_str)", "category": "Python"}, {"instruction": "Write a MIPS code that adds two numbers and stores the result in a given memory address.", "input": "num1 = 10\nnum2 = 15\nmemory address = $t0", "output": "addi $t1, $zero, 10 #store num1 in $t1\naddi $t2, $zero, 15 #store num2 in $t2\n\nadd $t0, $t1, $t2 #add num1 and num2 and store result in $t0\nsw $t0, ($memory address) #store result in specified memory address", "category": "Python"}, {"instruction": "Write a function in Python that takes two numbers and swaps the values of the two numbers.", "input": "", "output": "def swap(x, y): \n    temp = x \n    x = y \n    y = temp \n  \nx = 10\ny = 5\n\nswap(x, y) \n\nprint(\"x =\", x, \"y =\", y)\n\n# Output: x = 5 y = 10", "category": "Python"}, {"instruction": "Implement an algorithm with the input that calculates the greatest common factor of two numbers.", "input": "8, 32", "output": "def greatestCommonFactor(num1, num2):\n    while num2 != 0:\n        temp = num2\n        num2 = num1 % num2\n        num1 = temp\n \n    return num1\n \ngcf = greatestCommonFactor(8, 32) \nprint(gcf) \n \n# Output: 8", "category": "Python"}, {"instruction": "Generate a code to create a Pyramid of stars with the given height.", "input": "", "output": "def print_pyramid(height):\n    for row in range(1, height + 1):\n        for col in range(1, row + 1):\n            print('*', end=\" \")\n        print('\\n')", "category": "Python"}, {"instruction": "Construct a code to detect if a character is an uppercase letter or not.", "input": "", "output": "def is_uppercase(char): \n   if (char >= 'A' and char <= 'Z'): \n     return True\n   else: \n     return False", "category": "Python"}, {"instruction": "Create a method to build a dictionary that contains all even numbers from the given list.", "input": "[2, 3, 7, 8, 10, 11]", "output": "def build_even_dict(numbers): \n even_dict = {key: value for key, value in enumerate(numbers) if value % 2 == 0} \n return even_dict", "category": "Python"}, {"instruction": "Rewrite this program to use an embedded loop instead of recursion:\n\ndef fibonacci(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return fibonacci(num-1) + fibonacci(num-2)", "input": "", "output": "def fibonacci(num):\n    first = 0\n    second = 1\n    for i in range(num):\n        temp = first\n        first = second\n        second = temp + second\n    return first", "category": "Python"}, {"instruction": "Write a code to compute the XOR of two bits", "input": "A = 1; B = 0;", "output": "def xor(A, B):\n    if (A == B): \n        return 0  \n    else: \n        return 1", "category": "Python"}, {"instruction": "Create a function to perform insertion sorting", "input": "list = [5, 3, 8, 7, 1]", "output": "def insertion_sort(list):\n    for i in range(1, len(list)):\n        key = list[i]\n        j = i -1\n        while j >=0 and list[j] > key:\n            list[j+1] = list[j]\n            j -= 1\n        list[j+1] = key\n    return list", "category": "Python"}, {"instruction": "Create a Python dictionary to store employee details.", "input": "Name: John Doe\nAge: 25\nRole: Sales Manager", "output": "employee = {\n 'name': 'John Doe',\n 'age': 25,\n 'role': 'Sales Manager',\n}", "category": "Python"}, {"instruction": "Develop a function to calculate the total amount of the order for an online store.", "input": "ProductA: 15\nProductB: 10\nPriceForProductA: 5\nPriceForProductB: 10", "output": "def calculate_total_amount(products, prices):\n total_amount = 0 \n for i in range(len(products)):\n total_amount = total_amount + (products[i] * prices[i])\n return total_amount", "category": "Python"}, {"instruction": "Write a code to send a message \"Hello World!\" using the Twilio API.", "input": "", "output": "from twilio.rest import Client\n\n# Your Account SID from twilio.com/console\naccount_sid = \"XXXXXXXXXXXXXXXXXXXXXXX\"\n# Your Auth Token from twilio.com/console\nauth_token  = \"XXXXXXXXXXXXXXXXXXXXXXX\"\n\nclient = Client(account_sid, auth_token)\n\nmessage = client.messages.create(\n    to=\"+123456789\", \n    from_=\"+0987654321\",\n    body=\"Hello World!\")\n\nprint(message.sid)   # Output the message id", "category": "Python"}, {"instruction": "Create a matrix of zeros with shape 4x3 using the NumPy library.", "input": "", "output": "import numpy as np\n\nmatrix = np.zeros((4,3))\nprint(matrix)   # Output the matrix of zeros", "category": "Python"}, {"instruction": "Create a web page with the headline \"Welcome to Python programming\".", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Welcome to Python Programming</title>\n</head>\n<body>\n    <h1>Welcome to Python Programming</h1>\n</body>\n</html>", "category": "Python"}, {"instruction": "Design an algorithm that prints all the permutations of a given string.", "input": "", "output": "def generate_permutations(string):\n    if len(string) == 1:\n        return [string]\n \n    all_perms = []\n    for i, c in enumerate(string):\n        other_chars = string[:i] + string[i+1:]\n        other_perms = generate_permutations(other_chars)\n        for perm in other_perms:\n            all_perms.append(c + perm)\n    return all_perms", "category": "Python"}, {"instruction": "Write a code snippet that prints out the number of times each character appears in a given string.", "input": "Given string = \"welcome\"", "output": "def char_frequency(string):\n    freq = {}\n    for c in string:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    for c, count in freq.items():\n        print('{0} : {1}'.format(c, count))", "category": "Python"}, {"instruction": "Convert a given array of numbers into a square matrix.", "input": "Given array = [1, 2, 3, 4]", "output": "def arrayToMatrix(array):\n    n = int(len(array)**0.5)\n    matrix = []\n \n    for i in range(n):\n        matrix.append(array[i*n:(i+1)*n])\n \n    return matrix", "category": "Python"}, {"instruction": "Write a function to implement the sequential search algorithm", "input": "arr = [8, 2, 5, 6, 9]", "output": "def sequential_search(arr, x): \n    for i in range(len(arr)): \n        if arr[i] == x: \n            return i\n    return -1", "category": "Python"}, {"instruction": "Make an array containing all elements of the given list that are even.", "input": "[43,55,12,23,44]", "output": "even_array = [i for i in [43, 55, 12, 23, 44] if i % 2 == 0]", "category": "Python"}, {"instruction": "Make a function in Python which calculates the covariance between two given lists.", "input": "list1: [1, 2, 3, 4, 5]\nlist2: [3, 4, 2, 4, 5]", "output": "def cov(list1, list2): \n    mean1 = sum(list1)/len(list1) \n    mean2 = sum(list2)/len(list2) \n    total = 0\n\tfor i in range(len(list1)): \n        total += (list1[i] - mean1)*(list2[i] - mean2) \n    return total/len(list1)", "category": "Python"}, {"instruction": "Here's some Python code that finds the smallest number in a list. Edit it\nto find the greatest number in a list.", "input": "# list of numbers\nlist = [20, 10, 4, 45, 99]\n\n# printing the smallest number\nprint(min(list))", "output": "# list of numbers\nlist = [20, 10, 4, 45, 99]\n\n# printing the greatest number\nprint(max(list))", "category": "Python"}, {"instruction": "Update the following code snippet to ensure that the values in the dictionary are unique.", "input": "mydict = {\"a\":1, \"b\":2, \"c\":3, \"d\":4, \"e\":5}", "output": "mydict = {}\nfor key, value in mydict.items():\n    if value not in mydict.values():\n        mydict[key]=value", "category": "Python"}, {"instruction": "Write a function to filter a list of strings based on a search term", "input": "", "output": "def filter_by_search_term(strings, search_term):\n    return [string for string in strings if search_term in string]", "category": "Python"}, {"instruction": "Write a code that generates a random password of 8 characters including numerical and alphabetic characters.", "input": "", "output": "import string\nimport random\n\ndef generate_password():\n    alpha_list = list(string.ascii_letters) + list(string.digits)\n    return ''.join([random.choice(alpha_list) for _ in range(8)])\n\nrandom_password = generate_password()\nprint(random_password)\n// Output: 4U4K5U6L", "category": "Python"}, {"instruction": "Given an array of integers, write a method to return the indices of the two numbers such that they add up to a specific target.", "input": "nums = [2, 5, 11, 15], target = 9", "output": "def twoSum(nums, target): \n    result = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i]+nums[j] == target:\n                result.append(i)\n                result.append(j)\n    return result\n\nindices = twoSum(nums, 9)\nprint(indices)\n// Output: [0, 2]", "category": "Python"}, {"instruction": "You are given a list of float numbers. Write a code to sort them in ascending order.", "input": "arr = [2.5, 3.2, 2.1, 4.6, 1.6]", "output": "def bubbleSort(arr): \n    n = len(arr)\n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n    return arr\n\nsorted_arr = bubbleSort(arr) \nprint(sorted_arr)\n// Output: [1.6, 2.1, 2.5, 3.2, 4.6]", "category": "Python"}, {"instruction": "Write a function in Python that returns the greatest common divisor (GCD) of two numbers.", "input": "n1 = 18, n2 = 15", "output": "def greatest_common_divisor(n1, n2): \n    while n2 > 0: \n        n1, n2 = n2, n1 % n2 \n    return n1 \n\nresult = greatest_common_divisor(18, 15)\nprint(result)\n// Output: 3", "category": "Python"}, {"instruction": "Write a code that takes a list of integers and output the frequencies of odd and even numbers within the list.", "input": "list_of_ints = [7, 21, 22, 23, 24, 25]", "output": "def find_odd_even_frequencies(list_of_ints):\n    \n    count_odd = 0 \n    count_even = 0\n    \n    for num in list_of_ints:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n            \n    return {\"odd\": count_odd, \"even\": count_even}\n\nresult = find_odd_even_frequencies(list_of_ints)\nprint(result)\n// Output: {'odd': 3, 'even': 3}", "category": "Python"}, {"instruction": "Develop a function in Python that takes two arguments, a base number and an exponent number, and prints out the result of the power operation.", "input": "Base = 5\nExponent = 3", "output": "\"\"\"\nDevelop a function in Python that takes two arguments, a base number and an exponent number, and prints out the result of the power operation.\n\"\"\"\ndef power(base, exponent):\n    result = base**exponent;\n    return result;\n\nbase = 5\nexponent = 3\nprint(power(base, exponent))", "category": "Python"}, {"instruction": "Write a script in Python that takes a list of strings and prints out the first letter of each string in uppercase.", "input": "A = [\"apple\", \"banana\", \"grapes\"]", "output": "\"\"\"\nWrite a script in Python that takes a list of strings and prints out the first letter of each string in uppercase\n\"\"\"\n# create the function\ndef uppercase_first_letters(list_of_strings):\n    for string in list_of_strings:\n        print(string[0].upper())\n\n# call the function with the list\nA = [\"apple\", \"banana\", \"grapes\"]\nuppercase_first_letters(A)", "category": "Python"}, {"instruction": "Develop an algorithm in Python that detects any outliers in an array.", "input": "A = [1, 5, 2, 10, 8, 5, 9, 15]", "output": "\"\"\"\nDevelop an algorithm in Python that detects any outliers in an array\n\"\"\"\n#define function to detect outliers\ndef detect_outliers(data):\n  outliers = []\n  threshold = 3\n  \n  mean = sum(data)/len(data)\n  std = np.std(data)\n  \n  for i in data:\n    z_score = (i - mean)/std \n    if np.abs(z_score) > threshold:\n      outliers.append(i)\n  \n  return outliers\n\n#call the function to find outliers\nA = [1, 5, 2, 10, 8, 5, 9, 15]\nprint(\"outliers: \", detect_outliers(A))", "category": "Python"}, {"instruction": "Generate a best-fit line for data points {(2,4), (4,7), (6,8), (7,11)} in Python.", "input": "", "output": "\"\"\"\nGenerate a best fit line for data points in Python\n\"\"\"\nimport numpy as np\n\ndata = [(2,4), (4,7), (6,8), (7, 11)]\n\nx = np.array([x[0] for x in data])\ny = np.array([y[1] for y in data])\n\nm, c = np.polyfit(x, y, 1)\n\nprint(\"Best-fit line equation: y = {:.2f}x + {:.2f}\".format(m,c))", "category": "Python"}, {"instruction": "How could we access the third element of a list in Python?", "input": "", "output": "The third element of a list can be accessed using the index value 2, as Python indexing starts from 0. For example, if x is a list containing the elements [1, 2, 3], x[2] will return the third element of the list i.e. 3.", "category": "Python"}, {"instruction": "Suggest a better way to compare two strings in Python.", "input": "", "output": "Using Python's Standard Library function `difflib.SequenceMatcher` is a more efficient way to compare two strings. This function uses an algorithm to compute the longest common subsequence between the two strings which is then used to calculate the similarity score of the given strings.", "category": "Python"}, {"instruction": "Write a Python code to count the number of uppercase characters in the given string.", "input": "\"Hello World\"", "output": "string = \"Hello World\"\n\ncount = 0\nfor char in string:\n  if char.isupper():\n    count += 1\n\nprint(\"The number of uppercase characters are:\", count)", "category": "Python"}, {"instruction": "Write a code in Python to convert the following string to an integer.", "input": "\"12345\"", "output": "string = \"12345\"\n\nnumber = int(string)\n\nprint(number)", "category": "Python"}, {"instruction": "Return the maximum number from a given array of integers.", "input": "[6,4,7,1,3]", "output": "arr = [6,4,7,1,3]\n\n#Find max number\ndef find_max(arr):\n  max_num = arr[0]\n  for num in arr:\n    if num > max_num:\n      max_num = num\n  return max_num\n\nresult = find_max(arr)\nprint(\"The maximum number is:\", result)", "category": "Python"}, {"instruction": "Create a random password generator in Python that outputs 10 characters of random alphanumeric characters.", "input": "", "output": "import random\nimport string\n\ndef random_password_generator():\n  charsds = string.ascii_letters + string.digits\n  password = ''.join(random.choice(charsds) for i in range(10))\n  return password\n\nprint(random_password_generator())", "category": "Python"}, {"instruction": "Using Python, write a piece of code to convert Celsius temperatures to Fahrenheit.", "input": "Celsius: 20", "output": "Fahrenheit = 68", "category": "Python"}, {"instruction": "Generate a random array of size n in Python.", "input": "Size of array: 5", "output": "import numpy as np\n\nsize = 5\n\n# Create an array of size 5\narr = np.random.randint(100, size = (size))\nprint (arr)", "category": "Python"}, {"instruction": "Create a list of all numbers that are divisible by 5 between 0 and 25.", "input": "", "output": "list_divisible_by_5 = [x for x in range(0, 26) if x%5 == 0]", "category": "Python"}, {"instruction": "Create a dictionary using comprehension technique in Python.", "input": "original_dict = {'a':1, 'b':2, 'c':3, 'd':4}", "output": "new_dict = {key: value ** 2 for key, value in original_dict.items()}", "category": "Python"}, {"instruction": "So you need to design a class for a Linked List.", "input": "", "output": "class ListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        \n    def is_empty(self):\n        return self.head == None\n    \n    # Other method implementations go here", "category": "Python"}, {"instruction": "What data structure can be used to store words of the same length?", "input": "", "output": "A data structure that can be used to store words of the same length is a Trie. A Trie is a tree-based data structure which stores characters of strings as nodes in a tree. The advantage of using a Trie for storing words of the same length is that it is an efficient data structure for retrieving words quickly. Furthermore, its storage space is optimized as it uses only the required amount of memory for storing words, regardless of the length of the words.", "category": "Python"}, {"instruction": "Create an algorithm to find the longest substring of a given string with distinct characters.", "input": "Given string = \"abcabcabc\"", "output": "def find_longest_substring(string):\n    max_length = 0\n    for i in range(len(string)):\n        seen_chars = set()\n        length = 0\n        for j in range(i, len(string)):\n            if string[j] not in seen_chars:\n                seen_chars.add(string[j])\n                length += 1\n            else:\n                break\n        max_length = max(max_length, length)\n    return max_length", "category": "Python"}, {"instruction": "Create a function in Python to convert time from 12 hour to 24 hour format.", "input": "", "output": "def convert12to24(time12h):\n    # Check if last two elements of time is AM and first two are 12\n    if time12h[-2:] == \"AM\" and time12h[:2] == \"12\": \n        return \"00\" + time12h[2:-2] \n          \n    # If last two elements of time is AM\n    elif time12h[-2:] == \"AM\": \n        return time12h[:-2] \n      \n    # If last two elements of time is PM and first two are 12    \n    elif time12h[-2:] == \"PM\" and time12h[:2] == \"12\": \n        return time12h[:-2] \n          \n    else: \n          \n        # add 12 to hours and remove AM\n        return str(int(time12h[:2]) + 12) + time12h[2:8]", "category": "Python"}, {"instruction": "Design an algorithm to check for missing numbers in an array of size n.", "input": "", "output": "def find_missing(nums):\n    count = 1\n    for num in nums:\n        if not count in nums:\n            return count\n        count += 1\n    return None", "category": "Python"}, {"instruction": "Generate the following string from a list.", "input": "[1, 2, 3, 4]", "output": "def generate_string(lst):\n    s = \"\"\n    for i in lst:\n        s+=str(i)\n    return s\n\nlst = [1, 2, 3, 4]\ns = generate_string(lst)\nprint(s)", "category": "Python"}, {"instruction": "Write a function in Python that takes a string and splits it into a list of words.", "input": "\"Hello, World!\"", "output": "def split_string(text):\n  \"\"\"Split a given string into a list of words.\"\"\"\n  return text.split()", "category": "Python"}, {"instruction": "Write a function in Python that takes a sentence and removes all spaces.", "input": "\"Hello, World!\"", "output": "def remove_spaces(sentence):\n  \"\"\"Remove all spaces from a given sentence.\"\"\"\n  return sentence.replace(\" \", \"\")", "category": "Python"}, {"instruction": "Given a string of characters, write a function in Python that returns only the uppercase characters.", "input": "\"Hello, World!\"", "output": "def get_upper(string):\n  \"\"\"Return only uppercase characters from given string.\"\"\"\n  return ''.join([c for c in string if c.isupper()])", "category": "Python"}, {"instruction": "Explain the following Python statement.", "input": "sorted_list = sorted(input_list)", "output": "This statement uses the sorted() function to sort the elements in the list 'input_list' in ascending order. The elements in the list will be compared using their default ordering and then sorted accordingly. The sorted list is returned and stored in a new list called 'sorted_list'.", "category": "Python"}, {"instruction": "Given a pandas dataframe, identify the columns and rows of the table.", "input": "import pandas as pd \n\ndata = {'fruit': ['apple', 'banana', 'mango'], \n        'price': [2.99, 4.99, 5.99], \n        'quantity': [3, 5, 7]}\n\ndf = pd.DataFrame(data)", "output": "The columns of the table are: fruit, price, and quantity. \nThe rows of the table are: apple, banana, and mango.", "category": "Python"}, {"instruction": "Explain the difference between a parameter and an argument in Python.", "input": "", "output": "A parameter is a variable in a method definition. When a method is called, the arguments are the data you pass into the method's parameters. Parameters are specified after the method name, inside the parentheses. They are used to pass values to a method. An argument is the actual value of this variable that gets passed to the method. Arguments are the data you pass into the method's parameters when you call the method. Parameters are like empty vessels that are waiting to be filled as a result of calling the method. Arguments are like the values that are placed inside the vessels. In a nutshell, Parameters are variable in the declaration of function. Arguments are the actual values of these variables that get passed to function.", "category": "Python"}, {"instruction": "Write a code to add two numbers given as input.", "input": "a = 1\nb = 5", "output": "def add(a,b):\n    return a + b\n\nif __name__ == '__main__':\n    print(add(a,b))", "category": "Python"}, {"instruction": "Write a code to replace all the \"A\"s in the string with a \"#\".", "input": "sentence = \"Hello WAAorld\"", "output": "def replace_A(sentence):\n     return sentence.replace('A','#')\n\nif __name__ == '__main__':\n print(replace_A(sentence))", "category": "Python"}, {"instruction": "Convert the Python list below to a nested dictionary of countries and their populations.", "input": "List = [[\"United_Kingdom\", 66_000_000],[\"United_States\", 323_000_000]]", "output": "countries = {\n    \"United_Kingdom\": 66_000_000,\n    \"United_States\": 323_000_000\n}", "category": "Python"}, {"instruction": "Write a code to find the longest substring of given string with length greater than or equal to 2 without repeating letters.", "input": "string = \"abcdexyeffgghh\"", "output": "# Function to find the longest substring of given string with length greater than or equal to 2 without repeating letters\ndef find_longest_substring(string):\n    # Variable to store the starting index of the substring\n    start_index = 0\n    \n    # Hashset to store characters in string\n    visited = set()\n    \n    # Variables to store the length and the result substring\n    length = 0\n    result = \"\"\n    \n    # Iterate over the string\n    for i in range(len(string)):\n        # If the character is already in the hashset, then remove characters until this character from the hashset \n        if string[i] in visited:\n            visited.remove(string[start_index])\n            start_index += 1\n            \n        # Add the current character to the hashset\n        visited.add(string[i])\n        \n        # Update length and result if length is greater than before\n        if length < i - start_index + 1:\n            length = i - start_index + 1\n            result = string[start_index:i+1]\n        \n    # Return the result substring\n    return result\n\n# Test the function\nprint(find_longest_substring(string))", "category": "Python"}, {"instruction": "Write a function in Python that takes a 2D array and returns the product of all elements in it.", "input": "[[1, 2],[3, 4]]", "output": "def product_of_elements(arr):\n  \"\"\"Return product of all elements in a given 2D array.\"\"\"\n  product = 1\n  for row in arr:\n    for ele in row:\n      product *= ele\n  return product", "category": "Python"}, {"instruction": "Randomly rearrange the elements of the given array.", "input": "nums = [12, 23, 34, 45]", "output": "# Function to randomly rearrange the elements of the given array\nimport random \ndef shuffle_array(nums):\n    # Initialize a result array\n    result = nums.copy()\n    \n    # Iterate over the array\n    for i in range(len(nums)): \n        # Generate a random index between 0 and the current index\n        j = random.randrange(0, i + 1)\n        \n        # Swap elements at the current and random indices\n        result[i], result[j] = result[j], result[i] \n        \n    # Return the result array\n    return result\n\n# Test the function by printing the shuffled array\nprint(shuffle_array(nums))", "category": "Python"}, {"instruction": "Given a string, remove all consecutive duplicates in the string.", "input": "string = \"aabbccddeeff\"", "output": "# Function to remove all consecutive duplicates in the string\ndef remove_duplicates(string):\n    # Empty string to store the result\n    result = ''\n    \n    # Iterate over the string and keep track of the previous character seen\n    prev = ''\n    for char in string:\n        # If the current character is not the same as the previous, then add it to the result\n        if char != prev:\n            result += char\n        # Change the previous character seen to the current character\n        prev = char\n        \n    # Return the result string\n    return result\n\n# Test the function by printing the string without consecutive duplicates\nprint(remove_duplicates(string))", "category": "Python"}, {"instruction": "Create a function in Python to rearrange the characters of each word in a given string.", "input": "string = \"Welcome to the world of Python\"", "output": "def rearrangeWord(string): \n     temp_string = string.split(\" \") \n     rearranged_string = [word[::-1] for word in temp_string] \n     return \" \".join(rearranged_string) \nprint(rearrangeWord(string))", "category": "Python"}, {"instruction": "Construct a for-loop for finding all prime numbers between 1 and 50 in Python.", "input": "", "output": "for num in range(1, 51):\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)", "category": "Python"}, {"instruction": "Extract the common key words from the given two strings using a Python script.", "input": "String 1: This programming language is easy to learn\nString 2: Comparing to other languages, this language is simpler", "output": "common_key_words = [\"language\", \"easy\", \"learn\", \"comparing\", \"other\", \"simpler\"]", "category": "Python"}, {"instruction": "Define a function in Python to print a pattern of right-angled triangles of different sizes", "input": "", "output": "def rightangle_triangles_pattern(n): \n    pattern = \"\" \n    \n    \n    for i in range(1,n+1): \n        for j in range(1,i+1): \n            pattern = pattern + \" * \"\n        pattern = pattern + \"\\n\"\n  \n   \n    print(pattern) \n    \n    \nrightangle_triangles_pattern(5)", "category": "Python"}, {"instruction": "Create a Fibonacci sequence of 5 numbers using Python.", "input": "", "output": "fib_sequence = [0, 1, 1, 2, 3]", "category": "Python"}, {"instruction": "Construct a for-loop for calculating the factorial of a given number.", "input": "Number: 5", "output": "def factorial(x): \n    fact = 1\n\n    for i in range(1,x+1):\n        fact = fact*i\n        \n    return fact\n\nprint(factorial(5))", "category": "Python"}, {"instruction": "Design a data structure to store an undo history of size k.", "input": "", "output": "class HistoryDataStruct:\n    def __init__(self, k):\n        self.history_size = k\n        self.history = [] # list of (undo command, state of only that undo command) of size k\n        self.current_state = None # Current state of the data structure\n\n    def save_states(self, state):\n        self.history.append((state, self.current_state))\n\n        if len(self.history) > self.history_size:\n            self.history.pop(0)\n\n        self.current_state = state\n\n    def undo(self):\n        command, prev_state = self.history[-1]\n        self.history.pop(-1)\n        self.current_state = prev_state\n        return command", "category": "Python"}, {"instruction": "Create a program to print out all prime numbers below 100.", "input": "", "output": "# Function to print prime numbers \ndef prime_numbers_below_100(): \n    for num in range(2, 100): \n        prime = True\n        for i in range(2, num//2 + 1): \n            if num % i == 0: \n                prime = False\n                break\n        if prime: \n            print(num, end=\" \") \n  \nprint(\"Prime numbers below 100 are:\") \nprime_numbers_below_100()", "category": "Python"}, {"instruction": "You need to design a calculator class with methods to perform basic calculations (add, subtract, multiply, divide, etc.).", "input": "", "output": "class Calculator:\n    def __init__(self):\n        # initializing the calculator\n        pass\n\n    def add(self, a, b):\n        return a + b\n\n    def subtract(self, a, b):\n        return a - b\n\n    def multiply(self, a, b):\n        return a * b\n\n    def divide(self, a, b):\n        return a / b", "category": "Python"}, {"instruction": "Reverse the order of the given array without using inbuilt functions.", "input": "nums = [12, 23, 34, 45]", "output": "# Function to reverse the order of the given array \ndef reverse_array(nums):\n    # Variable to store the result \n    result = []\n    \n    # Iterate over the provided array starting from the last element\n    for i in range(len(nums) -1, -1, -1):\n        # Append each number to the result array\n        result.append(nums[i]) \n        \n    # Return the result array\n    return result\n\n# Test the function by printing the array in reverse order\nprint(reverse_array(nums))", "category": "Python"}, {"instruction": "Write a function in Python that takes two strings and returns a single string with the characters in alternating order.", "input": "\"Hello\", \"World!\"", "output": "def alternate_string(str1, str2):\n  \"\"\"Return a string with characters in alternating order from two given strings.\"\"\"\n  result = \"\"\n  for i in range(min(len(str1), len(str2))):\n      result += str1[i] + str2[i]\n  result += str1[i + 1:] + str2[i + 1:]\n  return result", "category": "Python"}, {"instruction": "Write a function in Python that takes an integer and returns a boolean value specifying whether the number is a prime number or not.", "input": "9", "output": "def is_prime(num):\n  \"\"\"Check if a number is a prime number.\"\"\"\n  if num <= 1:\n    return False\n  for i in range(2,num):\n    if num % i == 0:\n      return False\n  return True", "category": "Python"}, {"instruction": "Write a function in Python that takes a list of strings and checks whether the list is empty or not.", "input": "[\"Hello\", \"World\"]", "output": "def is_list_empty(list_str):\n  \"\"\"Check if a list is empty or not.\"\"\"\n  return len(list_str) == 0", "category": "Python"}, {"instruction": "How can a string be encoded in base64?", "input": "", "output": "A string can be encoded in base64 by using the string's bytes as input to the base64 encoding algorithm. The base64 encoding algorithm works by taking 3 bytes of input data and converting them into 4 bytes of output data. Each of these 4 bytes represent 6 bits of the original string, which is represented by 4 characters in the base64 string.", "category": "Python"}, {"instruction": "Explain how Python List Comprehensions work?", "input": "", "output": "Python List Comprehensions allow users to quickly build a list from another list or an iterable. List Comprehensions use a syntax that consists of an expression followed by a \u2018for\u2019 statement and then zero or more \u2018for\u2019 or \u2018if\u2019 clauses. The expression is evaluated once for each item in the list. List Comprehensions can be used to perform filtering and mapping operations over the lists, or any other iterable. The output is a new list that can be formed from items in the original list, or any of its combinations.", "category": "Python"}, {"instruction": "Describe how the for loop works in Python?", "input": "", "output": "A for loop in Python is a type of looping construct that is used to iterate over a sequence of objects including strings, lists, tuples, dictionaries, and sets. A for loop has three components, the iterator (variable), sequence, and statements. With each iteration, the iterator is assigned the value of the next element in the sequence and the statements are executed. When all the elements in the sequence have been exhausted, the loop terminates.", "category": "Python"}, {"instruction": "Convert the following English sentence into a Python function definition: \"Prints a string on the screen\".", "input": "", "output": "def printString(string):\n  print(string)", "category": "Python"}, {"instruction": "Identify and explain the purpose of a Turing Test.", "input": "", "output": "A Turing Test is a measurement of a machine's ability to exhibit intelligent behaviour equivalent to, or indistinguishable from, that of a human. The test was proposed by Alan Turing in 1950 as a way of determining whether a machine is capable of intelligent thought. The Turing Test consists of a human evaluator interacting with both a human subject and a machine by asking questions and judging the responses. If the evaluator cannot determine the difference between the machine and the human subject, then the machine has passed the test. The purpose of the Turing Test is to provide a reliable method for determining if a machine is able to think and act intelligently.", "category": "Python"}, {"instruction": "Explain what an object-oriented programming language is.", "input": "", "output": "Object-oriented programming (OOP) is a programming language model in which programs are organized around objects rather than actions and data rather than logic. OOP languages allows the programmer to think in terms of classes and objects which makes it easier to maintain and modify existing code. In an OOP language, objects are collections of related variables and methods, and classes are templates of objects. Classes allow objects of the same type to be created with the same properties, while still allowing flexibility as new objects can be created with different properties.", "category": "Python"}, {"instruction": "Write a Python function to convert a dictionary into a list of tuples.", "input": "dictionary = {\n  \"name\": \"John\",\n  \"age\": 36\n}", "output": "def dict_to_tuple(dictionary): \n  return [(key, value) for key, value in dictionary.items()]", "category": "Python"}, {"instruction": "How can you generate a random array of 10 integers between 1 and 100?", "input": "", "output": "import random\n\ndef generate_random_array():\n    array = []\n    for i in range(10):\n        array.append(random.randint(1,100))\n    return array", "category": "Python"}, {"instruction": "How can you print a string character by character in Python?", "input": "", "output": "def char_by_char(string):\n    for char in string:\n        print(char)", "category": "Python"}, {"instruction": "Write code to implement a priority queue in Python.", "input": "", "output": "class PriorityQueue:\n    def __init__(self):\n        self.queue = []\n \n    # Create the enqueue(data) method to add data inside the queue\n    def enqueue(self, data):\n        self.queue.append(data)\n \n    # Create the dequeue() method to remove data from the queue\n    def dequeue(self):\n        if self.queue:\n            min_item = min(self.queue)\n            self.queue.remove(min_item)\n            return min_item\n        else:\n            return None", "category": "Python"}, {"instruction": "How can you sort a list of dictionaries by values of the dictionary in Python?", "input": "", "output": "def sort_dict_by_values(dict_list):\n    return sorted(dict_list, key=lambda k: k['value'])", "category": "Python"}, {"instruction": "Design a function which takes a parameter and returns the sum of its cube of its digits", "input": "", "output": "def sum_of_cube_of_digits(num):\n    sum = 0\n    while (num > 0):\n        digit = num % 10\n        sum += digit**3\n        num //= 10\n    return sum", "category": "Python"}, {"instruction": "Calculate the sum of all numbers in the given array that are multiples of the given number.", "input": "numbers=[2, 4, 6, 8, 10, 12]\nnum=3", "output": "def sum_multiples(lst, n):\n    return sum([i for i in lst if i % n == 0])", "category": "Python"}, {"instruction": "Given a list of numbers, write a program which partitions the list into two parts, such that the sum of the elements in the first part exceeds the sum of the elements in the second part.", "input": "", "output": "def partition(lst):\n    left_sum, right_sum = 0, sum(lst)\n    for i in range(len(lst)-1):\n        left_sum += lst[i]\n        right_sum -= lst[i]\n        if left_sum > right_sum:\n            return lst[:i+1], lst[i+1:]\n    return None", "category": "Python"}, {"instruction": "Count the number of characters in a sentence that begin with a consonant.", "input": "", "output": "def count_consonants(sentence):\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    count = 0\n    for ch in sentence:\n        if ch.lower() in consonants:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Return the index of the value if it is present in the list or -1 if it is not present.", "input": "", "output": "def search(lst, val):\n    for i in range(len(lst)):\n        if lst[i] == val:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Given an array of integers, create a program that finds the longest subarray with a sum of 0.", "input": "", "output": "def longest_sum_zero(arr):\n    left = 0\n    max_len = 0\n    sum = 0\n    hash_map = dict()\n    for right in range(len(arr)):\n        sum += arr[right]\n        if sum == 0:\n            max_len = max(max_len, right - left + 1)\n        if sum in hash_map:\n            left = max(left, hash_map[sum] + 1)\n            max_len = max(max_len, right - left + 1)\n        hash_map[sum] = right\n\n    return max_len", "category": "Python"}, {"instruction": "Write a function that takes two arguments, a number and a list, and returns the indices in the list that add up the number.", "input": "", "output": "def two_sum(num, lst):\n    indices = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == num:\n                indices.append([i,j])\n    return indices", "category": "Python"}, {"instruction": "Generate a random password with at least 8 characters that contain both upper and lowercase letters and numbers.", "input": "", "output": "import string\nimport random\n\ndef generate_password():\n    char_set = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    return ''.join(random.sample(char_set, 8))", "category": "Python"}, {"instruction": "Edit the following code to return the elements in the reversed order.", "input": "def reverse_list(lst):\n    for i in range(0, len(lst)):\n        temp = lst[i]\n        lst[i] = lst[len(lst)-1-i]\n        lst[len(lst)-1-i] = temp\n    return lst", "output": "def reverse_list(lst):\n    for i in range(0, len(lst)//2):\n        temp = lst[i]\n        lst[i] = lst[len(lst)-1-i]\n        lst[len(lst)-1-i] = temp\n    return lst", "category": "Python"}, {"instruction": "Write a function that determines if a given substring is present in a string or not.", "input": "", "output": "def is_substring_present(string, sub_string):\n for i in range(len(string)):\n if string[i : (i + len(sub_string))] == sub_string:\n return True\n return False", "category": "Python"}, {"instruction": "Write a Python class to implement a linked list.", "input": "", "output": "class Node:\n def __init__(self, data):\n self.data = data\n self.next = None\n\nclass LinkedList:\n def __init__(self):\n self.head = None\n \n def push(self, data):\n node = Node(data)\n node.next = self.head\n self.head = node\n \n def pop(self):\n data = self.head.data\n self.head = self.head.next\n return data", "category": "Python"}, {"instruction": "Write a function in Python that takes a list of strings and checks if they are all the same length.", "input": "[\"Hello\", \"World\"]", "output": "def is_all_same_length(list_str):\n  \"\"\"Check if all strings in a list are of same length.\"\"\"\n  return len(set(map(len, list_str))) == 1", "category": "Python"}, {"instruction": "Construct a loop to display each character in a string one at a time.", "input": "Hello World!", "output": "def display_char(s):\n    for char in s:\n        print(char)\n\ns = \"Hello World!\"\ndisplay_char(s)", "category": "Python"}, {"instruction": "Update the following function to only print the even numbers in a given list", "input": "def print_list(list):\n    for i in list:\n            print(i)", "output": "def print_list(list):\n    for i in list:\n        if i%2==0:\n            print(i)", "category": "Python"}, {"instruction": "What is the function of the \u2018enumerate\u2019 keyword in Python?", "input": "", "output": "The 'enumerate' keyword is used to iterate over an iterable and keep track of the index along the way. Its syntax is \"enumerate(iterable, start=0)\". Each iteration yields a tuple containing the index of the element and the element itself. This is most commonly used for loops that need to track the index of the elements in the iterable. For example, the loop below will print out all the elements and their respective indices in a list:\n\nmy_list = [\"A\",\"B\",\"C\"]\nfor index, element in enumerate(my_list):\n    print(index, element)\n\n# Output:\n# 0 A\n# 1 B\n# 2 C", "category": "Python"}, {"instruction": "Given a n x n matrix where each element is 0 or 1, how can you find the area of the largest square sub-matrix composed of only \u20181s\u2019?", "input": "", "output": "The simplest way to find the area of the largest square sub-matrix composed entirely of '1's is to use a dynamic programming approach. The algorithm works by iterating through all the elements in the matrix. At each cell, it checks if the current element is a '1' and if the other elements around it form a square sub-matrix of size at least one containing '1's, and if so it updates the answer accordingly. The code for finding the area of the largest square sub-matrix composed of only '1's may look like this:\n\n# n is the size of the matrix\ndef maximum_square_submatrix(matrix, n):\n    # answer stores the maximum size of the square\n    ans = 0\n\n    # dp array of size n+1 x n+1\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            # if the element is 1\n            if matrix[i-1][j-1] == 1:\n                # find the minimum of the elements on its left, top and diagonal\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n                # update the answer\n                ans = max(ans, dp[i][j])\n\n    # return the answer\n    return ans * ans", "category": "Python"}, {"instruction": "Update the code to ensure that an error is raised if the input is the wrong type.", "input": "def age_calc(age):\n return age + 5", "output": "def age_calc(age):\n if not isinstance(age, int):\n raise TypeError(\"Input for age calculation must be int\")\n return age + 5", "category": "Python"}, {"instruction": "Update the code so that it only prints out the lines which contain the word \u201cprint\u201d.", "input": "src_code = \"\"\"if x == 1:\n print \"hello\"\n if y == 2:\n print \"world\"\n print \"!\"", "output": "src_code = \"\"\"if x == 1:\n print \"hello\"\n if y == 2:\n print \"world\"\n print \"!\"\n\n# updated code\nlines = src_code.splitlines()\n\nfor line in lines:\n if \"print\" in line:\n print(line)", "category": "Python"}, {"instruction": "Write a Python function which takes a number as an argument and print \"even\" if the number is even and print \"odd\" if the number is odd.", "input": "", "output": "def print_even_odd(number):\n if number % 2 == 0:\n print(\"even\")\n else:\n print(\"odd\")", "category": "Python"}, {"instruction": "Break down the given code into its individual parts.", "input": "def square_sum(x, y):\n return x*x + y*y", "output": "def square_sum(x, y):\n return x * x + y * y\n\n# Break down code\n# part 1\ndef square_sum(x, y):\n# part 2\n return x * x + y * y\n# part 3\n# return calculated value", "category": "Python"}, {"instruction": "Update the code to handle cases when the two numbers in the array are the same.", "input": "def add_two_numbers(nums):\n return nums[0] + nums[1]", "output": "def add_two_numbers(nums):\n if nums[0] == nums[1]:\n return nums[0]\n else:\n return nums[0] + nums[1]", "category": "Python"}, {"instruction": "Convert a code written in Python 3 into code compatible with Python 2.", "input": "input = int(input('Enter your number: '))", "output": "import sys\nif sys.version_info.major == 3:\n input = int(input('Enter your number: '))\nelse:\n input = int(raw_input('Enter your number: '))", "category": "Python"}, {"instruction": "Suggest an algorithm to implement a stack with two queues.", "input": "", "output": "Algorithm for implementing a stack with two queues: \n1. Create two queues and enqueue the element to the first queue.\n2. Dequeue an element from the first queue, and enqueue it again to the second queue. \n3. Now, enqueue the next element from the first queue to the first queue.\n4. Repeat steps 2 and 3, until all the elements are dequeued from the first queue. \n5. Dequeue an element from the second queue, this will be the top of the stack.", "category": "Python"}, {"instruction": "Suggest a way to classify text documents into a certain number of topics.", "input": "", "output": "One way to classify text documents into a certain number of topics is to use latent Dirichlet allocation (LDA). LDA is a generative statistical model that allows for documents to be modeled as a mixture of topics. It fits well when documents are short and there is a large number of topics to be identified. The model takes as input a corpus of documents, builds a bag-of-words for each document, and then assigns a probability distribution to each document for the topics present. In this way, documents can be classified according to the respective topic with the highest probability.", "category": "Python"}, {"instruction": "Write a Python program to calculate the sum of all multiples of 3 and 5 between 1 and a given number.", "input": "", "output": "def sum_multiples_of_3_and_5(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 or i % 5 == 0: \n            sum += i\n    return sum", "category": "Python"}, {"instruction": "Generate a code to take in a list of sentences, totaling no more than 100 words and output the longest sentence.", "input": "['This sentence is the longest.', 'This sentence is the shortest.']", "output": "def get_longest_sentence(lst):\n    longest_sentence = ''\n    longest_len = 0\n    for s in lst:\n        s_len = len(s)\n        if s_len > longest_len:\n            longest_sentence = s\n            longest_len = s_len\n    return longest_sentence\n\nif __name__ == '__main__':\n    lst = ['This sentence is the longest.', 'This sentence is the shortest.']\n    longest_sentence = get_longest_sentence(lst)\n    print(longest_sentence)", "category": "Python"}, {"instruction": "Compute a factorial of a given integer.", "input": "5", "output": "\"\"\"\nCompute a factorial of a given integer\n\"\"\"\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nif __name__ == '__main__':\n    n = int(input())\n    print(factorial(n))", "category": "Python"}, {"instruction": "Create a Python script to scrape HTML data from a website.", "input": "", "output": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://www.example.com/\"\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\n# extract information from HTML\ndata = soup.find_all(\"div\", {\"class\": \"content\"})\n\n# save scraped data \nwith open('filename.txt', 'w') as file:\n    for content in data:\n        file.write(str(content))", "category": "Python"}, {"instruction": "Given two strings, write a program to find the number of common characters.", "input": "string_1 = \"computer\"\nstring_2 = \"science\"", "output": "def num_common_characters(str1, str2):\n    char_count = {}\n    for c in str1:\n        if c in str2:\n            if c not in char_count:\n                char_count[c] = 1\n            else:\n                char_count[c] += 1\n    return sum(char_count.values())", "category": "Python"}, {"instruction": "Generate a python statement to print out \"Hello World\".", "input": "", "output": "print(\"Hello World\")", "category": "Python"}, {"instruction": "Implement FTP server in Python", "input": "", "output": "import ftplib\n\ndef start_ftp_server(host, port, user, password):\n    server = ftplib.FTP()\n    server.connect(host, port)\n    server.login(user, password)\n    print('FTP Server started successfully')\n\nstart_ftp_server('localhost', 21, 'testuser', 'testpass')", "category": "Python"}, {"instruction": "Write a code to create a function to rotate a given linked list.", "input": "", "output": "\"\"\"\nCreate a function to rotate a given linked list\n\"\"\"\n\n# Create a class node\nclass Node: \n\t# Create a constructor to initialise the node object \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\n\nclass LinkedList: \n\t# Create a constructor to initialise the linked list \n\tdef __init__(self): \n\t\tself.head = None\n\t\n\t# Create a function to rotate the linked list \n\tdef rotate(self, index):\n\t\tif (index == 0): \n\t\t\treturn\n\t\tprev = None            \n\t\tcurr = self.head\n\t\twhile (index > 0):\n\t\t\tprev = curr\n\t\t\tcurr = curr.next\n\t\t\tindex -= 1\n\t\t\n\t\tprev.next = None\n\t\tself.head = curr\n\t\twhile (curr.next != None):\n\t\t\tcurr = curr.next\n\t\tcurr.next = self.head", "category": "Python"}, {"instruction": "Given a 2 dimensional array, create a code to transpose the array.", "input": "", "output": "def transpose_matrix(matrix): \n\trow = len(matrix) \n\tcol = len(matrix[0]) \n\ttranspose = [[0 for j in range(row)] for i in range(col)] \n  \n\tfor i in range(row): \n\t\tfor j in range(col): \n\t\t\ttranspose[j][i] = matrix[i][j] \n  \n\treturn transpose \n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(transpose_matrix(matrix))", "category": "Python"}, {"instruction": "Write a code to create a dictionary containing the frequency of each word in a given string.", "input": "S = \"hello world\"", "output": "def word_frequency(S): \n  frequency = dict() \n  words = S.split() \n  \n  for word in words: \n    if word in frequency: \n        frequency[word] += 1\n    else: \n        frequency[word] = 1\n  \n  return frequency\n\nprint(word_frequency(S))", "category": "Python"}, {"instruction": "Develop a code to delete a given element from a list.", "input": "[3, 6, 8, 14], element: 14", "output": "def delete_element(given_list, element):\n    for i in range(len(given_list)):\n        if given_list[i] == element:\n            del given_list[i]\n            break\n    return given_list", "category": "Python"}, {"instruction": "Develop a code to sort a list in ascending or descending order.", "input": "givenList: [5, -3, 2, 4, 0], sortOrder: \"ascending\"", "output": "def sort_list(givenList, sortOrder): \n    for i in range(len(givenList)): \n        for j in range(i + 1, len(givenList)):\n            if sortOrder == \"ascending\":    \n                if givenList[i] > givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i] \n            elif sortOrder == \"descending\":    \n                if givenList[i] < givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i]\n    return givenList", "category": "Python"}, {"instruction": "Design a code to search a given element x in a vector.", "input": "vector: [3, 17, 5, 11], x: 5", "output": "def search_x(x, vector):\n    for i in range(len(vector)):\n        if vector[i] == x:\n            return i \n    return -1", "category": "Python"}, {"instruction": "Create a function that returns the maximum element of a given list.", "input": "Given List: [3, 12, 2, 6, -9]", "output": "def max_val(list):\n    max_val = list[0]\n    for i in range(len(list)):\n        if list[i] > max_val:\n            max_val = list[i]\n    return max_val", "category": "Python"}, {"instruction": "Identify the type of input that is required for this Python function.", "input": "def get_sum(a, b):\n    # return the sum of two numbers", "output": "The type of input required for this Python function is two numerical values (for example, integers or floats).", "category": "Python"}, {"instruction": "Implement a Wiki page title search using Python.", "input": "Search string: \"Machine Learning\"", "output": "\"\"\"\nImplement a Wiki page title search using Python\n\"\"\"\n\nimport wikipedia\n\ndef search_wiki_title(search_string):\n    try:\n        wikipedia.set_lang(\"en\")\n        result = wikipedia.search(search_string)[0]\n    except (wikipedia.exceptions.PageError, wikipedia.exceptions.DisambiguationError):\n        result = None\n    return result\n\nif __name__ == '__main__':\n    search_string = input('Search string: ')\n    result = search_wiki_title(search_string)\n    print(result)", "category": "Python"}, {"instruction": "Write a function to find the average of given numbers using a list.", "input": "nums = [2, 4, 6, 8]", "output": "\"\"\"\nWrite a function to find the average of given numbers using a list\n\"\"\"\n\ndef find_average(nums):\n    return sum(nums) / len(nums)\n    \nif __name__ == '__main__':\n    nums = [2, 4, 6, 8]\n    print(find_average(nums))", "category": "Python"}, {"instruction": "Generate a Fibonacci sequence with a given length.", "input": "length = 10", "output": "def generate_fibonacci_sequence(length):\n sequence = []\n current_val, next_val = 0,1\n for i in range(length):\n   sequence.append(current_val)\n   current_val, next_val = next_val, current_val + next_val\n return sequence\n\nprint(generate_fibonacci_sequence(length))\n#Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "category": "Python"}, {"instruction": "Implement a factorial function in Python.", "input": "", "output": "def factorial(n):\n if n == 0:\n return 1\n else:\n return n * factorial(n-1)", "category": "Python"}, {"instruction": "Create a Python class to work with complex numbers.", "input": "", "output": "class ComplexNumber:\n    \"\"\"This class is used to work with complex numbers.\"\"\"\n    def __init__(self, real, imag): \n        self.real = real \n        self.imag = imag \n      \n    def __add__(self, other):\n        \"\"\"This method overloads the '+' operator to add complex numbers.\"\"\"\n        return ComplexNumber(self.real + other.real, self.imag + other.imag) \n      \n    def __sub__(self, other):\n        \"\"\"This method overloads the '-' operator to subtract complex numbers.\"\"\"\n        return ComplexNumber(self.real - other.real, self.imag - other.imag) \n  \n    def __mul__(self, other): \n        \"\"\"This method overloads the '*' operator to multiply complex numbers.\"\"\"\n        return ComplexNumber(self.real*other.real - self.imag*other.imag, self.real*other.imag + self.imag*other.real) \n  \n    def __str__(self): \n        \"\"\"This method overrides the __str__ method to print complex numbers in a readable format.\"\"\"\n        return self.real + self.imag + \"i\"\n\nif __name__ == '__main__':\n    c1 = ComplexNumber(1, 2) \n    c2 = ComplexNumber(2, 3) \n  \n    print(\"Addition of c1 and c2 =\", c1 + c2) \n    print(\"Subtration of c1 and c2 =\", c1 - c2) \n    print(\"Multiplication of c1 and c2 =\", c1 * c2)", "category": "Python"}, {"instruction": "Write a code to filter out all even numbers from an array which contains both even and odd numbers.", "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "def filter_even_numbers(arr):\n    \"\"\"This function takes an array and filters out all even numbers.\"\"\"\n    result = []\n    for num in arr:\n        if num % 2 != 0:\n            result.append(num)\n    return result\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    result = filter_even_numbers(arr)\n    print(result)", "category": "Python"}, {"instruction": "Create a function that allows users to sign up for your feature using their username and password.", "input": "", "output": "def sign_up(username, password):\n    \"\"\"This function will allow users to sign up for the feature using their username and password.\"\"\"\n    # Implement sign up feature\n    # ...\n\nif __name__ == '__main__':\n    username = \"JohnDoe\"\n    password = \"Passw0rd\"\n    sign_up(username, password)\n    print(\"Sign up successful!\")", "category": "Python"}, {"instruction": "Generate a function to identify prime numbers between 0 and n.", "input": "", "output": "def is_prime(n):\n    \"\"\"This function will check if a number is a prime number or not.\"\"\"\n    # Corner case \n    if n <= 1: \n        return False\n\n    # Check from 2 to n-1 \n    for i in range(2,n): \n        if n % i == 0: \n            return False\n    return True\n\nif __name__ == '__main__':\n    for n in range(2, 100):\n        if is_prime(n):\n            print(n)", "category": "Python"}, {"instruction": "Given a list of grocery items, write a code to generate 1 list containing only the fruits in the list.", "input": "items =[\"apple\",\"banana\",\"grapes\",\"rice\",\"onion\"]", "output": "def filter_fruits(items):\n    \"\"\"This function takes a list of grocery items and generates a list containing only the fruits.\"\"\"\n    fruits = []\n    for item in items:\n        if item in [\"apple\", \"banana\", \"grapes\"]:\n            fruits.append(item)\n    return fruits\n\nif __name__ == '__main__':\n    items =[\"apple\",\"banana\",\"grapes\",\"rice\",\"onion\"]\n    fruits = filter_fruits(items)\n    print(fruits)", "category": "Python"}, {"instruction": "Use PyTorch to write a function that predicts a class label based on five numerical features.", "input": "X = [[0.1, 0.2, 0.3, 0.4, 0.5],[0.2, 0.3, 0.4, 0.5, 0.6]]", "output": "\"\"\"\nA PyTorch function that predicts a class label based on five numerical features.\n\"\"\"\n\nimport torch\nimport torch.nn as nn\n\n\n# Define the model\nclass Model(nn.Module):\n    def __init__(self):\n        super(Model, self).__init__()\n        self.fc1 = nn.Linear(5, 8)\n        self.fc2 = nn.Linear(8, 4)\n        self.fc3 = nn.Linear(4, 2)\n\n    def forward(self, x):\n        x = torch.relu(self.fc1(x))\n        x = torch.relu(self.fc2(x))\n        x = self.fc3(x)\n        return x\n\n# Instantiate the model\nmodel = Model()\n\n# Input\nX = torch.tensor([[0.1, 0.2, 0.3, 0.4, 0.5],[0.2, 0.3, 0.4, 0.5, 0.6]])\n\n# Get the prediction\nprediction = model(X)", "category": "Python"}, {"instruction": "Generate a List Comprehension that returns a list containing the first 5 prime numbers", "input": "", "output": "[x for x in range(2, 11) if all(x % y != 0 for y in range(2,x))][:5]", "category": "Python"}, {"instruction": "Reverse the given list using python.", "input": "list_to_reverse = [2, 3, 5, 6, 8, 10, 11]", "output": "def reverse_list(input_list):\n    \"\"\"Return a reversed copy of the list\"\"\"\n    return input_list[::-1]", "category": "Python"}, {"instruction": "Generate a random unique ID and store it in a variable.", "input": "", "output": "import uuid\n\nrandom_id = uuid.uuid4()", "category": "Python"}, {"instruction": "Parse the following JSON data and extract the \"name\" field.", "input": "{\n  \"id\": 12345,\n  \"name\": \"John Smith\",\n  \"age\": 30\n}", "output": "import json\n\ndata = '{ \"id\": 12345, \"name\": \"John Smith\", \"age\": 30 }'\n\njson_data = json.loads(data)\n\nname = json_data[\"name\"]\n\nprint(name)\n\n# Output: John Smith", "category": "Python"}, {"instruction": "Create a function to find out if a number is even", "input": "", "output": "def isEven(n): \n    if (n % 2 == 0): \n        return True\n    else: \n        return False", "category": "Python"}, {"instruction": "Preprocess a natural language text for text classification.", "input": "Text: \u201cThe food I ate yesterday was really amazing. I loved the entire experience.\u201d", "output": "text = \"The food I ate yesterday was really amazing. I loved the entire experience.\"\n \n# lowercase \ntext = text.lower() \n\n# remove punctuation \ntext = re.sub(r'[^\\w\\s]','',text) \n\n# remove digits \ntext = re.sub(r'\\d+','',text) \n\n# Tokenization \ntokens = word_tokenize(text) \n\n# Stopword removal \nfiltered_words = [word for word in tokens if word not in stopwords.words('english')] \n\n# Lemmatization\nlemmatizer = WordNetLemmatizer() \nlemmatized_word = [lemmatizer.lemmatize(word) for word in filtered_words] \n\nprint(lemmatized_word)", "category": "Python"}, {"instruction": "Alter the code to include a break statement in the loop.", "input": "for i in range(0, 10):\n    print(\"The number is \" + str(i))", "output": "for i in range(0, 10):\n    print(\"The number is \" + str(i))\n    if i == 5:\n        break", "category": "Python"}, {"instruction": "Develop a class in Python to print the name and age of the user.", "input": "Name:\"John\", Age:\"25\"", "output": "class Hello: \n    def __init__(self,name,age): \n        self.name = name\n        self.age = age\n    \n    def printNameAge(self): \n        print(\"Name:\", self.name, \"Age:\", self.age)\n  \nobj1 = Hello(\"John\", 25) \nobj1.printNameAge()", "category": "Python"}, {"instruction": "If a pandas dataframe has five columns and four rows, what is the shape of the dataframe?", "input": "", "output": "The shape of the pandas dataframe would be (4, 5).", "category": "Python"}, {"instruction": "How does a try-except block work in Python?", "input": "", "output": "A try-except block in Python allows a code block to be tested for errors. The code that could potentially cause an exception is placed in the try clause and the code that handles the exception is put in the except clause. If an error is encountered in the try clause, the program execution is transferred to the except clause for further handling. The except clause can also be used to handle multiple exceptions in the same block of code.", "category": "Python"}, {"instruction": "Explain what the yield keyword does in Python.", "input": "", "output": "The yield keyword in Python is used to create an iterator. When a function containing yield is called, it does not execute the code as a normal function would, instead it returns a generator object which is an iterator. Each time next() is called on the iterator, the yield statement is executed and returns a value. The execution of the function can be stopped at any point using the yield statement and the function can save the state of its variables when a yield statement is encountered, allowing it to be resumed after all the values have been generated.", "category": "Python"}, {"instruction": "What is a for loop?", "input": "", "output": "A for loop is a programming structure used to repeat a specific set of instructions for a given number of times or until a specified condition is met. The syntax of a for loop is \"for <variable> in <sequence>:\" and the format is \"for <variable> in range(<start_value>, <end_value>):\" where the start and end value are optional. The code within the loop will be executed until the given condition is met, or the loop is terminated with a break command.", "category": "Python"}, {"instruction": "Develop a for loop to write a program to print the first 5 prime numbers", "input": "", "output": "count = 0 # to count the number of prime numbers\n\nfor num in range(1,100):  \n\n   # all prime numbers are greater than 1\n   if num > 1:\n       for i in range(2,num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)\n           count += 1\n       if count == 5:\n           break", "category": "Python"}, {"instruction": "Create a function to do a binary search on a sorted list of integers.", "input": "nums = [2, 4, 5, 7, 8, 9, 10, 14]", "output": "def binary_search(nums, target):\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1 # target is not found", "category": "Python"}, {"instruction": "Write a code to wrap a text in a box, with the given length and padding parameters.", "input": "text = \"Hello World!\", length = 20, padding = 5", "output": "def wrap_in_box(text, length, padding): \n    border = \"\"\n    for i in range(length): \n        border += \"-\"\n    space = \"\"\n    for i in range(padding):\n        space += \" \"\n    text = space + text + space \n    if len(text) > length:\n        text = text[:length-1]\n    text = text.center(length)\n    print(border)\n    print(text)\n    print(border)", "category": "Python"}, {"instruction": "Explain the concept behind the Python decorator.", "input": "", "output": "Python decorator is a function which takes another function as argument and extends the behavior of that function without modifying its code. It allows developers to modify the behavior of a function, class or method at runtime without changing the code itself. Decorators are heavily used in frameworks like Flask and Django which are based on the MVC pattern. Decorators allow developers to easily modify and extend the code without having to rewrite it.", "category": "Python"}, {"instruction": "Write a script in Python for generating a histogram for a given set of data.", "input": "[3, 5, 8, 1, 9, 12]", "output": "import matplotlib.pyplot as plt\n\ndata = [3, 5, 8, 1, 9, 12]\nplt.hist(data, color='blue', ec='black')\n\nplt.title(\"Histogram\")\nplt.xlabel(\"Values\")\nplt.ylabel(\"Frequency\")\n\nplt.show()", "category": "Python"}, {"instruction": "Suggest a code snippet in Python to delete the dictionary entry with a key called \"name\".", "input": "sample_dic = {'id': 123, 'name': 'John Doe'}", "output": "del sample_dic['name']", "category": "Python"}, {"instruction": "Generate a code to convert a given number to its English word equivalent.", "input": "", "output": "# dictionary to convert numbers to words\nnumber_words = {0 : 'zero', 1: 'one', 2 : 'two',\n                3 : 'three', 4 : 'four', 5 : 'five', \n                6 : 'six', 7 : 'seven', 8 : 'eight', \n                9 : 'nine', 10 : 'ten'}\n\n# convert number to string\ndef convert_to_words(n):\n    if n in number_words:\n        return number_words[n]\n    return \"\"\n\n# Driver code\nprint(convert_to_words(5))\n# Output: five", "category": "Python"}, {"instruction": "Edit the given code to print out the largest even number in the given list.", "input": "lst = [1, 8, 9, 10, 6]", "output": "lst = [1, 8, 9, 10, 6]\n\neven_nums = []\n\nfor num in lst:\n    if num % 2 == 0:\n        even_nums.append(num)\n\nif even_nums:\n    print(max(even_nums))\nelse:\n    print(\"No even numbers in the list.\")\n# Output: 10", "category": "Python"}, {"instruction": "Create a program to guess a secret number between 1 and 100.", "input": "", "output": "# secret number\nsecret_number = 42\n\n# user guess\nguess = 0\n\n# guessing loop\nwhile guess != secret_number:\n    \n    # ask user to enter a guess\n    guess = int(input(\"Guess a number between 1 and 100: \"))\n\n    # provide hints\n    if guess < secret_number:\n        print(\"Too low. Try something higher.\")\n    elif guess > secret_number:\n        print(\"Too high. Try something lower.\")\n    else:\n        print(\"You guessed it! The secret number was {}\".format(secret_number))", "category": "Python"}, {"instruction": "Write a script in Python for drawing a rectangle on the screen.", "input": "", "output": "import pygame \n  \n# Initialize the game engine \npygame.init() \n  \n# Define the colors \nBLACK = (0, 0, 0) \nWHITE = (255, 255, 255) \n  \n# Set the window size \nsize = (400, 500) \nscreen = pygame.display.set_mode(size) \n  \n# Iterate over the list of rectangles \nrects = [pygame.Rect(75, 150, 150, 50), \n         pygame.Rect(200, 150, 150, 50)] \n  \n# Iterate over the list of rectangles \nfor rect in rects: \n    pygame.draw.rect(screen, WHITE, rect) \n  \n# Update the display \npygame.display.flip()", "category": "Python"}, {"instruction": "Implement a function to print each element of a given array in reverse.", "input": "array = [2, 4, 6, 8]", "output": "def print_reversed_array(array):\n  for i in range(len(array)-1, -1, -1):\n    print(array[i])", "category": "Python"}, {"instruction": "You need to write a for loop in Python that takes two arguments, N and K and prints out the numbers from 0 to N which are divisible by K.", "input": "N: 15\nK: 4", "output": "for i in range(0, N+1):\n    if i % K == 0:\n        print(i)", "category": "Python"}, {"instruction": "Write a few lines of code in Python that prints out name followed by age.", "input": "name: John\nage: 25", "output": "name = \"John\"\nage = 25\nprint(name + \" \" + str(age))", "category": "Python"}, {"instruction": "Create a Python function which accepts two numbers then return an array with the Fibonacci sequence starting by the two numbers.", "input": "start_1: 1\nstart_2: 2", "output": "def fib_array(start_1, start_2):\n    arr = [start_1, start_2]\n    while True:\n        next_num = arr[-1] + arr[-2]\n        if next_num > 100:\n            break\n        arr.append(next_num)\n    return arr", "category": "Python"}, {"instruction": "Write a Python program to print out the longest word entered by the user.", "input": "string = \"Happiness is the best thing\"", "output": "def find_longest_word(string): \n    # split the string \n    word_list = string.split() \n  \n    # sort the list \n    word_list.sort(key = len) \n  \n    # return the last word \n    # which will be the longest \n    return word_list[-1]\n  \n# driver code \nstring = \"Happiness is the best thing\"\n \nprint(find_longest_word(string)) # Output: Happiness", "category": "Python"}, {"instruction": "Identify the correct syntax for creating a class with name 'Car' in Python.", "input": "", "output": "class Car:\n  pass", "category": "Python"}, {"instruction": "Find the most frequent integer in the list: [3, 5, 2, 3, 1, 5, 3, 3, 2].", "input": "", "output": "my_list = [3, 5, 2, 3, 1, 5, 3, 3, 2]\nmax_freq = 0\nmax_num = 0\n# Use a dictionary to store the frequence of each number\ndict = { i : my_list.count(i) for i in my_list }\nfor num, freq in dict.items():\n    if freq > max_freq:\n        max_freq = freq\n        max_num = num\nprint(max_num) # Output: 3", "category": "Python"}, {"instruction": "Write a Python function that takes in an argument 'arr' which is an array of integers and prints the arithmetic mean of the array.", "input": "arr = [2, 8, 10, 22, 4]", "output": "def mean(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    mean = sum/len(arr)\n    print(mean)\nmean(arr) # Output: 10.0", "category": "Python"}, {"instruction": "Create a class in Python that will allow us to initialize and store a given list of numbers.", "input": "", "output": "class NumbersList:\n    def __init__(self, numbers_list):\n        self.numbers_list = numbers_list\n    \n    def get_list(self):\n        return self.numbers_list\n    \n    def set_list(self, numbers_list):\n        self.numbers_list = numbers_list", "category": "Python"}, {"instruction": "Complete the following snippet with proper code that will return the highest value in a given list.", "input": "my_list = [1,2,3,4,5]", "output": "def find_highest(lst):\n    current_max = lst[0]\n    # Iterate through list\n    for item in lst:\n        if item > current_max:\n            current_max = item\n    # Return the max value\n    return current_max \n\n# Call the function with the given list\nmy_list = [1,2,3,4,5]\nprint(find_highest(my_list)) # 5", "category": "Python"}, {"instruction": "Create a Python script to compact a given list of elements.", "input": "my_list = [1,1,2,3,3,3,4,4,4,4,5]", "output": "def compact_list(lst):\n    # Define a new list to hold the compacted elements\n    new_list = []\n    current = None\n    \n    # Iterate through lst\n    for item in lst:\n        if item != current:\n            current = item\n            new_list.append(current)\n    # Return the new list\n    return new_list\n    \n# Call the function with the given list\nmy_list = [1,1,2,3,3,3,4,4,4,4,5]\nprint(compact_list(my_list)) # [1,2,3,4,5]", "category": "Python"}, {"instruction": "Write a code snippet to create an object of type Car in Python.", "input": "", "output": "class Car():\n    def __init__(self):\n        self.make = \"\"\n        self.model = \"\"\n        self.year = 0\n        self.color = \"\"\n \ncar = Car()", "category": "Python"}, {"instruction": "Write a single line of code to convert a string to a date in Python.", "input": "", "output": "date = datetime.strptime('01/01/2019', '%d/%m/%Y')", "category": "Python"}, {"instruction": "Create a function in Python to find all elements of a given list whose sum is equal to a given number.", "input": "list = [5, 7, 9, 4]\nnumber = 18", "output": "def find_elements(list, number): \n    result = [] \n    for i in range(len(list)): \n        for j in range(i + 1, len(list)): \n            if list[i] + list[j] == number: \n                result.append([list[i], list[j]]) \n  \n    return result \n  \n# Driver code \nlist = [5, 7, 9, 4] \nn = 18\nprint(find_elements(list, n))", "category": "Python"}, {"instruction": "Using Django, create a view to render a template.", "input": "", "output": "from django.shortcuts import render\n\ndef view(request):\n    return render(request, 'template.html')", "category": "Python"}, {"instruction": "Write a code to calculate the roots of a quadratic equation in Python.", "input": "", "output": "import math\n\ndef calculate_roots(a, b, c):\n  # calculate the discriminant\n  d = (b**2) - (4*a*c)\n  \n  # find two solutions\n  sol1 = (-b-math.sqrt(d))/(2*a)\n  sol2 = (-b+math.sqrt(d))/(2*a)\n  \n  print('The solutions are {0} and {1}'.format(sol1,sol2))", "category": "Python"}, {"instruction": "Create a TensorFlow model to recognize handwritten numbers.", "input": "", "output": "\"\"\"\nCreate a TensorFlow model to recognize handwritten numbers\n\"\"\"\n\nimport tensorflow as tf\n\n# Load in the data set\nmnist = tf.keras.datasets.mnist\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n# Pre-process the data \nx_train, x_test = x_train / 255.0, x_test / 255.0\n\n# Create the model\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Flatten(input_shape=(28, 28)),\n  tf.keras.layers.Dense(128, activation='relu'),\n  tf.keras.layers.Dropout(0.2),\n  tf.keras.layers.Dense(10)\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(x_train, y_train, epochs=5)\n\n# Evaluate the model\nmodel.evaluate(x_test,  y_test, verbose=2)", "category": "Python"}, {"instruction": "Parse the following HTML using the BeautifulSoup library in Python.", "input": "html = '<h1>This is a heading</h1><p>This is a paragraph.</p>'", "output": "from bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(html, 'html.parser')\n\nheading = soup.h1.string\nparagraph = soup.p.string\n\nprint(\"Heading:\", heading)\nprint(\"Paragraph:\", paragraph)\n\n# Output:\nHeading: This is a heading\nParagraph: This is a paragraph.", "category": "Python"}, {"instruction": "What is the difference between deep copy and shallow copy in Python?", "input": "", "output": "A shallow copy of an object creates a new reference to the existing object, while a deep copy creates a new object with a different reference but with the same values. In a shallow copy, changes made to the copied object will be reflected in the original object, whereas with a deep copy, the changes are independent. For example, if a list is shallow copied, the copied list will share the same elements as the original list, while a deep copy will contain independent copies of the original list's elements.", "category": "Python"}, {"instruction": "Write a Python function to convert temperatures from Fahrenheit to Celsius.", "input": "", "output": "def fahrenheit_to_celsius(f):\n return (f - 32) * 5 / 9", "category": "Python"}, {"instruction": "Implement a function in Python that sorts a list in ascending order using Bubble Sort algorithm.", "input": "my_list = [4, 6, 3, 9, 1]", "output": "def bubble_sort(list):\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[i] > list[j]:\n                list[i], list[j] = list[j], list[i]\n    return list\n\nmy_list = [4, 6, 3, 9, 1]\nprint(bubble_sort(my_list))", "category": "Python"}, {"instruction": "Create a Python dictionary to store information about a student. The student should have the following attributes: name, age, grades, and graduation year.", "input": "", "output": "student = {\n 'name': '',\n 'age': 0,\n 'grades': [],\n 'graduation_year': 0\n}", "category": "Python"}, {"instruction": "Write a Python function to compute the total amount of a given grocery bill after taxes.", "input": "items = [('apple', 1.49), ('banana', 0.99), ('bread', 4.99)]", "output": "def compute_total_after_taxes(items):\n tax = 0.07\n total = 0\n for item in items:\n  price = item[1]\n  tax_amount = price * tax\n  total += price + tax_amount\n return round(total, 2)", "category": "Python"}, {"instruction": "Design a function to calculate the sum of the squares of the numbers between 1 and n.", "input": "", "output": "def sum_of_squares(n):\n    sum_squares = 0\n    for i in range(1, n+1):\n        sum_squares += i**2\n    return sum_squares", "category": "Python"}, {"instruction": "Design an algorithm to swap two numbers in Python.", "input": "Swap 10 and 20", "output": "def swapNumbers(a, b): \n  temp = a \n  a = b \n  b = temp \n \n  print(\"After swapping: a =\", a, \" b =\", b) \n\n# Driver program \na = 10\nb = 20\nswapNumbers(a, b)", "category": "Python"}, {"instruction": "Define a function that takes a string and prints it in reverse order.", "input": "", "output": "def print_reverse(str):\n    for i in range(len(str)-1, -1, -1):\n        print(str[i], end=\"\")\n    print()", "category": "Python"}, {"instruction": "How do you create a new dataframe from existing two pandas dataframes?", "input": "", "output": "You can create a new dataframe by using the concat() or merge() functions of pandas.  With concat(), you can create a new dataframe by stacking the existing two dataframes on top/bottom of one another. With merge(), you can combine two dataframes by joining them on a key of your choice.", "category": "Python"}, {"instruction": "Write a Pandas code to drop all rows with missing values from a given dataframe.", "input": "Dataframe name: df", "output": "df.dropna(inplace=True)", "category": "Python"}, {"instruction": "Implement an algorithm to find the power of a number.", "input": "Base: 2, Exponent: 3", "output": "def power(base, exponent):\n result = 1\n while exponent > 0:\n result *= base\n exponent -= 1\n return result\nresult = power(2, 3)\nprint(result)\n# 8", "category": "Python"}, {"instruction": "Create a Python dictionary with the key-value: \"Alice\": 28", "input": "", "output": "example_dict = {'Alice': 28}", "category": "Python"}, {"instruction": "Find the maximum element in a given array (unsorted) using a linear search approach.", "input": "[10, 5, 15, 80, 25]", "output": "\"\"\"\nFind the maximum element in a given array (unsorted) using a linear search approach\n\"\"\"\n\ndef linear_search_max(arr):\n    max_element = arr[0]\n    for elem in arr[1:]:\n        if elem > max_element:\n            max_element = elem\n    return max_element\n\nif __name__ == '__main__':\n    arr = [10, 5, 15, 80, 25]\n    max_element = linear_search_max(arr)\n    print(max_element)", "category": "Python"}, {"instruction": "Design a program that prints out the multiplication table up to 12 x 12.", "input": "", "output": "\"\"\"\nDesign a program that prints out the multiplication table up to 12 x 12\n\"\"\"\n\nfor i in range(1, 13):\n    for j in range(1, 13):\n        print('{} x {} = {}'.format(i, j, i * j))\n    print(\"\")", "category": "Python"}, {"instruction": "Devise a function that converts a number represented in the binary system to a decimal number.", "input": "1100", "output": "\"\"\"\nDevise a function that converts a number represented in the binary system to a decimal number\n\"\"\"\n\ndef binary_to_decimal(number):\n    decimal = 0\n    power = 0\n    while number != 0:\n        last_digit = number % 10\n        decimal += last_digit * pow(2, power)\n        power += 1\n        number //= 10\n    return decimal", "category": "Python"}, {"instruction": "Compute the number of days since January 1st, 1971 until the given date.", "input": "May 3rd, 2012", "output": "\"\"\"\nCalculate the number of days since January 1st, 1971 until the given date\n\"\"\"\n\nimport datetime as dt\n\ndef num_days(date_str):\n    datetime_object = dt.datetime.strptime(date_str, \"%B %d, %Y\").date()\n    ref_date = dt.datetime(1971, 1, 1).date()\n    return (datetime_object - ref_date).days\n\nif __name__ == '__main__':\n    print(num_days('May 3rd, 2012'))", "category": "Python"}, {"instruction": "Create a function to calculate the exponent of a given number x raised to power y.", "input": "", "output": "def exponent(x,y): \n    if(y == 0): \n        return 1\n    elif (int(y % 2) == 0): \n        y = int(y / 2) \n        return exponent(x, y) * exponent(x, y) \n    else: \n        return (x * exponent(x, int(y / 2)) * exponent(x, int(y / 2))) \n\nexponent(5,3) # Output: 125", "category": "Python"}, {"instruction": "Design a Python program to print all numbers between 0 and 100 that are divisible by 3 and 5.", "input": "", "output": "for i in range(101):\n    if i % 3 == 0 and i % 5 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Write a method to calculate the average of three numbers in Python.", "input": "", "output": "def avg(num1, num2, num3):\n return (num1 + num2 + num3) / 3", "category": "Python"}, {"instruction": "Write a code segment that manipulates a Fibonacci sequence until the sum is greater than a given number.", "input": "10", "output": "def fibonacci_sum(number):\n    fib_list = [0,1]\n    while True:\n        next_number = fib_list[-1] + fib_list[-2]\n        if next_number > number:\n            break\n        fib_list.append(next_number)\n    return sum(fib_list[:-1])", "category": "Python"}, {"instruction": "Create a function to determine if two strings are symmetrical.", "input": "", "output": "def is_symmetrical(str1, str2):\n    for i in range(0, len(str1)):\n        if str1[i] != str2[-i-1]:\n            return False\n    return True", "category": "Python"}, {"instruction": "Code a function that takes a dictionary as a parameter and prints out the key-value pairs.", "input": "", "output": "def print_dict(dictionary):\n    for key, value in dictionary.items():\n        print(f\"{key}: {value}\")", "category": "Python"}, {"instruction": "Write a python function to detect if two lists contain the same items in different order.", "input": "", "output": "def compare_lists(list1, list2):\n    return sorted(list1) == sorted(list2)", "category": "Python"}, {"instruction": "Generate a simple python function to concatenate two lists.", "input": "", "output": "def concatenate_lists(list1, list2):\n    return list1 + list2", "category": "Python"}, {"instruction": "Design a neural network architecture in TensorFlow to predict the sentiment of a movie review", "input": "", "output": "model = tf.keras.Sequential([\n    tf.keras.layers.Embedding(input_dim=vocabulary_size, output_dim=embedding_dim),\n    tf.keras.layers.GlobalAveragePooling1D(),\n    tf.keras.layers.Dense(24, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])", "category": "Python"}, {"instruction": "Write a code to delete all empty values in a given dictionary.", "input": "my_dict = {'a': '', 'b': False, 'c': 0, 'd': None}", "output": "def delete_empty_values(d):\n    new_dict = {key: value for key, value in d.items() if value != 0 and value != False and value != None and value != ''}\n    return new_dict \n\nmy_dict = delete_empty_values(my_dict)\nprint(my_dict) # Output -> {'b': False}", "category": "Python"}, {"instruction": "Create a function in Python to calculate the sum of the square of all numbers from 1 to n.", "input": "", "output": "def sum_squares(n): \n   total = 0\n   for x in range(1,n+1): \n      total += x * x\n   return total", "category": "Python"}, {"instruction": "Write a Python function to create a dictionary from two given lists. The first list should be the keys and the second list should be the values.", "input": "", "output": "def create_dict(keys, values):\n return dict(zip(keys, values))", "category": "Python"}, {"instruction": "Write a Python function to add an item to a given list.", "input": "", "output": "def add_item(items, item):\n items.append(item)\n return items", "category": "Python"}, {"instruction": "Create a function that takes an array of numbers, calculates the sum of the numbers across all the arrays, and returns the average of those sums.", "input": "arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def get_average_sum(arr):\n    total = 0\n    count = 0\n    for sub_arr in arr:\n        total += sum(sub_arr)\n        count += len(sub_arr)\n    return total / count", "category": "Python"}, {"instruction": "Implement a function in Python that makes a copy of a list.", "input": "my_list = [1, 2, 3, 4]", "output": "def copy_list(lst):\n    new_lst = lst[:]\n    return new_lst\n\nmy_list = [1, 2, 3, 4]\nprint(copy_list(my_list))", "category": "Python"}, {"instruction": "How can you find the maximum element in an array using the reduce() method?", "input": "", "output": "The reduce() method can be used to find the maximum element in an array by applying a function to each element of the array that checks if the current element is greater than the previously seen maximum. This function can be used as the argument to the reduce() method and it will return the maximum value seen in the array.", "category": "Python"}, {"instruction": "Replace all characters in the given string with the given character", "input": "string = \"Hello World\"\nchar = \"x\"", "output": "def replace_chars(string, char):\n    output = \"\"\n    for c in string:\n        output += char\n    return output\n\nreplace_chars(string, char)  # Output: xxxxx xxxxx", "category": "Python"}, {"instruction": "Generate all possible combinations of strings that can be formed using the given characters", "input": "chars = [\"a\", \"b\", \"c\"]", "output": "import itertools\n\ncombinations = [''.join(i) for i in itertools.product(chars)]\n\n# Output: [\"a\", \"b\", \"c\", \"ab\", \"ac\", \"ba\", \"bc\", \"ca\", \"cb\", \"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]", "category": "Python"}, {"instruction": "Separate the given list into two lists for even and odd numbers", "input": "lst = [1, 2, 3, 4, 5]", "output": "even_lst = []\nodd_lst = []\nfor num in lst:\n    if num % 2 == 0:\n        even_lst.append(num)\n    else:\n        odd_lst.append(num)", "category": "Python"}, {"instruction": "Create a function to remove all non alphabetical characters from thestring", "input": "string = \"Hello, world!\"", "output": "def clean_string(string):\n    output = \"\"\n    for char in string:\n        if char.isalpha():\n            output += char\n    return output\n    \nclean_string(string) # Output: Helloworld", "category": "Python"}, {"instruction": "Design a Greedy Algorithm to solve the sum-subset problem.", "input": "", "output": "def subsetsum(arr, target):\n  arr.sort() \n  n = len(arr) \n  sum = 0\n  result = [] \n  \n  for i in range(n):\n    if ( sum + arr[i] <= target):\n      result.append(arr[i])\n      sum = sum + arr[i]\n  \n  return result", "category": "Python"}, {"instruction": "Design a Bubble Sort algorithm for a list of numbers.", "input": "", "output": "def bubbleSort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr", "category": "Python"}, {"instruction": "Given a tree, write a function that finds the deepest node in the tree.", "input": "", "output": "def findDeepestNode(root):\n    if root is None:\n        return None\n    queue = []\n    queue.append(root)\n    while len(queue) > 0:\n        res = queue[0]\n        queue.pop()\n        if res.left is not None:\n            queue.append(res.left)\n        if res.right is not None:\n            queue.append(res.right)\n    return res", "category": "Python"}, {"instruction": "Given a list of strings, write a Python function to expand each element into a set of characters.", "input": "['hello', 'world']", "output": "def expand_list(strings): \n    new_list = []\n    for string in strings: \n        for character in string: \n            new_list.append(character) \n    return new_list", "category": "Python"}, {"instruction": "Code an algorithm to implement merge sort", "input": "[5, 2, 4, 6, 1, 7, 8]", "output": "def merge_sort(arr):\n    if len(arr) >1:\n        mid = len(arr) // 2 \n        left_half = arr[:mid]  \n        right_half = arr[mid:] \n\n        merge_sort(left_half) \n        merge_sort(right_half) \n\n        i = 0\n        j = 0\n        k = 0\n  \n        while i < len(left_half) and j < len(right_half):  \n            if left_half[i] < right_half[j]:  \n                arr[k] = left_half[i]  \n                i += 1\n\n            else:  \n                arr[k] = right_half[j]  \n                j += 1\n            k += 1\n      \n        while i < len(left_half):  \n            arr[k] = left_half[i]  \n            i += 1\n            k += 1\n          \n        while j < len(right_half):  \n            arr[k] = right_half[j]  \n            j += 1\n            k += 1\n\nif __name__ == '__main__':\n\tarr = [5, 2, 4, 6, 1, 7, 8]\n\tmerge_sort(arr)\n\tprint(arr)", "category": "Python"}, {"instruction": "Code a function to flatten a dictionary.", "input": "{\"a\": 1, \"b\": {\"c\": 2, \"d\": 3}}", "output": "def flatten_dict(d):\n\tflattened_dict = {}\n\n\tfor key, val in d.items():\n\t\tif type(val) is dict: # if val is a dict\n\t\t\tfor k, v in val.items():\n\t\t\t\tflattened_dict[key + \"_\" + k] = v\n\t\telse:\n\t\t\tflattened_dict[key] = val\n\n\treturn flattened_dict\n\nif __name__ == '__main__':\n\td = {\"a\": 1, \"b\": {\"c\": 2, \"d\": 3}}\n\tprint(flatten_dict(d))", "category": "Python"}, {"instruction": "Create an algorithm to print out the unique characters in a given string.", "input": "word = \"Hello World\"", "output": "def unique_chars(word):\n  unique_characters = set()\n  for char in word:\n    if char not in unique_characters:\n      unique_characters.add(char)\n  return unique_characters\n\nword = \"Hello World\"\nunique_characters = unique_chars(word)\nprint(\"Unique characters in \", word, \"are:\", unique_characters)", "category": "Python"}, {"instruction": "Generate a random string of length 10 made up of characters \u2018a\u2019 to \u2018d\u2019.", "input": "", "output": "import random\n\nrand_string = ''\nfor i in range(10):\n    rand_string += random.choice(['a', 'b', 'c', 'd'])\n    \nprint(rand_string)", "category": "Python"}, {"instruction": "Describe what a software bug is.", "input": "", "output": "A software bug is a mistake, error or an unexpected behavior or result in a computer program or system that causes it to produce an incorrect or unexpected result, or to behave in unintended ways. It is generally caused by errors in the source code or the semantic understanding of the code that is written. A software bug can occur at any level of the software development process, from the design stage to the compilation stage, and can be caused by incorrect specifications, poor coding, incorrect debugging or incorrect implementation.", "category": "Python"}, {"instruction": "Fix the following code to prevent errors from crashing the program.", "input": "def foo(a):\n    print(a)\nfoo(\"hi\")\nfoo(1)", "output": "def foo(a):\n    \"\"\"\n    A function that prints a value.\n    Args:\n     a (any): value to print\n    Returns:\n     nothing\n    \"\"\"\n    if isinstance(a, (int, float, str)): \n        print(a)\n    else:\n        print(\"Error: must be a string, int, or float\")\n\nif __name__ == '__main__':\n    foo(\"hi\")\n    foo(1)", "category": "Python"}, {"instruction": "Create a method called `combineName` that takes in two strings and combines them together into a full name.", "input": "firstName = 'John'\nlastName = 'Smith'", "output": "def combineName(firstName, lastName):\n    \"\"\"\n    A method that takes in two strings and combines them into a full name.\n    Args: \n     firstName (str): first name \n     lastName (str): last name\n    Returns:\n     fullName (str): combined full name \n    \"\"\" \n    fullName = firstName + \" \" + lastName\n    return fullName\n    \nif __name__ == '__main__':\n    firstName = 'John'\n    lastName = 'Smith'\n    print(combineName(firstName, lastName))", "category": "Python"}, {"instruction": "Create a Rails application with a user sign up with name, email and password.", "input": "", "output": "rails new AppName\n\ncd AppName\n\n# Add devise for user auth\nrails g devise:install\n\n# Generate a model for the user\nrails g devise user username email password\n\n# Create a database and migrate\nrake db:create db:migrate\n\n# Add routes for the login & signup\nRails.application.routes.draw do\n  devise_for :users\nend", "category": "Python"}, {"instruction": "Design a machine learning algorithm to classify the given dataset.", "input": "Dataset of images of cats and dogs", "output": "\"\"\"\nDesign a machine learning algorithm to classify the given dataset\n\"\"\"\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n#Prepare data\ndata = pd.read_csv('path/to/dataset') \n\n#Preprocess data\nX = data.drop('label', axis=1)\ny = data['label']\n\n#Split into training and test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n#Feature scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\n#Train the model\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n#Evaluate the model\nfrom sklearn.metrics import accuracy_score\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\nprint(accuracy)", "category": "Python"}, {"instruction": "Create a recursive function that takes two parameters, a number and a base and returns the result as a string.", "input": "14, 16", "output": "def convert_to_base(num, base): \n    \"\"\" \n    Function to convert num to a given base \n    \"\"\"\n    converted_string = \"\" \n\n    # Base Case \n    if num < base: \n        if num < 10: \n            return str(num) \n        else: \n            return chr(num - 10 + ord('A')) \n\n    rem = num % base \n    if rem < 10: \n        converted_string = str(rem) + converted_string \n    else: \n        converted_string = chr(rem - 10 + ord('A')) + converted_string \n    num = num // base \n    return convert_to_base(num, base) + converted_string", "category": "Python"}, {"instruction": "Create a new array that is a copy of the given input array, consisting of all elements smaller than 5.", "input": "[4, 8, 9, 7, 5, 1, 10]", "output": "new_array = [item for item in given_array if item < 5]  # [4, 1]", "category": "Python"}, {"instruction": "Write a code to count the number of occurrences of a given word in an array of strings.", "input": "words = ['apple', 'banana', 'apple', 'kiwi', 'apple']\ntarget_word = 'apple'", "output": "def count_word(words, target_word):\n    counter = 0\n    for word in words:\n        if word == target_word:\n            counter += 1\n    return counter", "category": "Python"}, {"instruction": "Generate a program in Python that prints all days of the week", "input": "", "output": "#list of Weekdays\nweekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \n            \"Saturday\", \"Sunday\"]\n\n#print Weekdays\nfor weekday in weekdays:\n    print(weekday)", "category": "Python"}, {"instruction": "Sort an array of integers using a heapsort algorithm.", "input": "[3, 6, 2, 9, 1]", "output": "def heapsort(A):\n    # step 1: create the heap\n    heapify(A)\n\n    # step 2: sort the heap\n    for size in range(len(A), 1, -1):\n        A[0], A[size - 1] = A[size - 1], A[0]\n        sift_down(A, 0, size - 1)\n\n    # step 3: return the sorted result\n    return A", "category": "Python"}, {"instruction": "Create a function that returns a randomly selected element from a list.", "input": "list = [1, 2, 3, 4, 5]", "output": "import random\n\ndef get_random_element(list):\n    \"\"\"\n    A function to return a randomly selected element from a list.\n    Args: \n     list (list): a list\n    Returns:\n     element (int): a randomly selected element\n    \"\"\"\n    index = random.randint(0, len(list)-1)\n    element = list[index]\n    return element\n\nif __name__ == '__main__':\n    list = [1, 2, 3, 4, 5]\n    print(get_random_element(list))", "category": "Python"}, {"instruction": "Build a function to identify a duplicate element in a list", "input": "list = [2,4,8,7,2,5]", "output": "def find_duplicate(list):\n\tvisited = set()\n\tfor num in list:\n\t\tif num in visited:\n\t\t\treturn num\n\t\telse:\n\t\t\tvisited.add(num)\n\treturn None\n\nlist = [2,4,8,7,2,5]\nprint(find_duplicate(list)) # Output: 2", "category": "Python"}, {"instruction": "Output a list with all the numbers from 0 to 100 that are divisible by 8.", "input": "", "output": "result = [x for x in range(101) if x % 8 == 0]\nprint(result)# [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 100]", "category": "Python"}, {"instruction": "Write an Object-Oriented Python program to find the area of a triangle given the base and the height.", "input": "", "output": "class Triangle:\n    def __init__(self, base, height):\n        self.base = base\n        self.height = height\n\n    def calculate_area(self):\n        area = (self.base * self.height) / 2\n        return area\n\n# Create triangle\ntriangle = Triangle(10, 5)\n\n# Find the area\narea = triangle.calculate_area()\n\n# Print the area\nprint(area)", "category": "Python"}, {"instruction": "Create a function in Python to evaluate the given numpy array and return the maximum absolute difference of any two elements.", "input": "// Array A\nimport numpy as np\nA = np.array([1, 4, 5, -3])", "output": "def max_difference(A):\n    return max(abs(np.max(A) - np.min(A)), abs(A[-1] - A[0]))", "category": "Python"}, {"instruction": "Read the given input, and write a Python code to create a dictionary which contains unique elements as keys and their corresponding count as values.", "input": "Input: ['a',\"a\",'b',1,1,1,'c']", "output": "my_list = ['a',\"a\",'b',1,1,1,'c']\nmy_dict = {}\nfor i in my_list:\n    my_dict[i] = my_dict.get(i, 0) + 1\n\nprint(my_dict) \n# Output: {'a': 2, 'b': 1, 1: 3, 'c': 1}", "category": "Python"}, {"instruction": "Translate this piece of JavaScript into Python.", "input": "let val = 10;\nif (val > 5) {\n  console.log(\"val is greater than 5\");\n}", "output": "val = 10\nif val > 5:\n    print(\"val is greater than 5\")", "category": "Python"}, {"instruction": "Write a Django code to print the name of all the users in the database.", "input": "", "output": "from django.contrib.auth.models import User\n\nusers = User.objects.all()\nfor user in users:\n    print(user.username)", "category": "Python"}, {"instruction": "Create a data structure in Python that stores the details of a shoe product.", "input": "Name: \"Nike Air Max 720\"\nPrice: $219.99\nSize: 8\nColor: White", "output": "class ShoeProduct:\n    def __init__(self, name, price, size, color):\n        self.name = name\n        self.price = price\n        self.size = size\n        self.color = color", "category": "Python"}, {"instruction": "You need to edit a Python code snippet to add a loop and make it print the square of the numbers from 1 to 10.", "input": "", "output": "for i in range(1, 11):\n    square = i * i\n    print(square)", "category": "Python"}, {"instruction": "Write a Python program to randomly sample a list without replacement.", "input": "list = [30, 40, 50, 60, 70, 80]", "output": "import random\n\ndef sample_list(list):\n    list_copy = list.copy()\n    sampled_list = []\n    while list_copy:\n        element = random.choice(list_copy)\n        sampled_list.append(element)\n        list_copy.remove(element)\n    return sampled_list", "category": "Python"}, {"instruction": "Edit the Python code snippet to remove the syntax error.", "input": "def calculate_area(length, width):\n    area = length * width\n    return \u201cThe area is\u201d + area", "output": "def calculate_area(length, width):\n    area = length * width\n    return \"The area is \" + str(area)", "category": "Python"}, {"instruction": "Given a list of integers, write a program to convert it into a list of strings.", "input": "integers = [1, 2, 3, 4]", "output": "def convert_to_string(integers):\n    string_list = []\n    for item in integers:\n        string_list.append(str(item))\n    return string_list", "category": "Python"}, {"instruction": "Create a function to search the given list to find a key value and return its position.", "input": "arr = ['a', 'b', 'c', 'd']\nkey = 'a'", "output": "def search(arr, key): \n    for i in range(len(arr)):\n\t    if arr[i] == key:\n            return i \n    return -1", "category": "Python"}, {"instruction": "Write a Python program to create a copy of a given set.", "input": "my_set = {1, 2, 3, 4, 5}", "output": "def clone_set(my_set):\n    new_set = set()\n    for item in my_set:\n        new_set.add(item)\n    return new_set", "category": "Python"}, {"instruction": "Create a function that returns the longest substring of the string given.", "input": "string = \"Hello world!\"", "output": "def longest_substring(string):\n    curr_len = 1\n    max_len = 1\n    prev_index = 0\n    n = len(string)\n    visited = [-1] * 256\n    visited[ord(string[0])] = 0\n    for i in range(1,n):\n        prev_index = visited[ord(string[i])]\n        if prev_index == -1 or (i - curr_len > prev_index):\n            curr_len+=1\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n            curr_len = i - prev_index\n        visited[ord(string[i])] = i\n    if curr_len > max_len:\n        max_len = curr_len\n    return max_len", "category": "Python"}, {"instruction": "Select all rows in a pandas dataframe where at least one value exists in the column named \u2018name\u2019.", "input": "", "output": "selected_rows = df[df.name.notnull()]", "category": "Python"}, {"instruction": "What data structure would be suitable to represent a sparse matrix with thousands of columns and rows?", "input": "", "output": "A dictionary of dictionaries or a linked list could be used to represent a sparse matrix with thousands of columns and rows. The outer dictionary would serve as an index table to refer to each row of the matrix while the inner dictionary contains key-value pairs of column index and the corresponding item or element in the specified row.", "category": "Python"}, {"instruction": "What data structure should be used to store a customer\u2019s name, address, and phone number?", "input": "", "output": "A dictionary or set can be used to store a customer\u2019s name, address, and phone number. The customer's name would be used as the key and the associated customer information such as address and phone number would be stored as the value.", "category": "Python"}, {"instruction": "Change the following program to use a try/except/finally block to handle errors.", "input": "def read_file(file):\n    with open(file) as f:\n        for line in f:\n            print(line)", "output": "try:\n    def read_file(file):\n        with open(file) as f:\n            for line in f:\n                print(line)\nexcept IOError:\n    print(\"Error: Could not read file\")\nfinally:\n    print(\"Closing file\")\n    f.close()", "category": "Python"}, {"instruction": "Develop a program in Python to implement a Simple Linear Regression model.", "input": "", "output": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# generate dataset\nx = np.random.rand(100, 1)\ny = 4 + 3 * x + np.random.rand(100, 1)\n\n# linear regression\nx_b = np.c_[np.ones((100, 1)), x]\ntheta_best = np.linalg.inv(x_b.T.dot(x_b)).dot(x_b.T).dot(y)\n\n# prediction\nx_new = np.array([[0], [1]])\nx_new_b = np.c_[np.ones((2, 1)), x_new]\ny_predict = x_new_b.dot(theta_best)\n\n# plot\nplt.plot(x, y, \"b.\")\nplt.plot(x_new, y_predict, \"r-\")\nplt.axis([0, 1, 0, 15])\nplt.show()", "category": "Python"}, {"instruction": "Design a function to get the number of elements in a JSON array in Python.", "input": "[{\"name\":\"John\"},{\"name\":\"Bob\"},{\"name\":\"Alice\"}]", "output": "def get_num_elements(data):\n    count = 0\n    for item in data:\n        count += 1\n    return count\n\ndata = [{\"name\":\"John\"},{\"name\":\"Bob\"},{\"name\":\"Alice\"}]\nprint(get_num_elements(data))", "category": "Python"}, {"instruction": "How would you use Recursion to solve the Fibonacci Sequence in Python?", "input": "", "output": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return(fibonacci(n-1) + fibonacci(n-2))\n    \nprint(fibonacci(10))", "category": "Python"}, {"instruction": "How can you create a Pandas DataFrame using a given list of dictionaries?", "input": "[{\"animal\": \"cat\"}, {\"animal\": \"dog\"}, {\"animal\": \"fish\"}]", "output": "import pandas as pd\ndata = [{\"animal\": \"cat\"}, {\"animal\": \"dog\"}, {\"animal\": \"fish\"}]\ndf = pd.DataFrame(data)\nprint(df)", "category": "Python"}, {"instruction": "Design a program in Python that will count the words in a sentence.", "input": "This is a sample sentence.", "output": "def word_count(sentence):\n    words = sentence.split(' ')\n    return len(words)\n\nprint(word_count('This is a sample sentence.'))", "category": "Python"}, {"instruction": "Design a function that uses a for loop to print all odd numbers from 1 to 10.", "input": "", "output": "def print_odd_numbers():\n    for i in range(1, 11):\n        if i % 2 != 0:\n            print(i)\n\nprint_odd_numbers()", "category": "Python"}, {"instruction": "Edit the code to print \u201cWelcome to Python Programming\u201d five times.", "input": "print(\"Hello Python\")", "output": "for i in range(5):\n  print(\"Welcome to Python Programming\")", "category": "Python"}, {"instruction": "Generate an array of 5 random hexadecimal numbers.", "input": "", "output": "import random\n\nhex_arr = []\nfor i in range(5):\n rand_hex = random.randint(0, 255)\n hex_arr.append(hex(rand_hex))\n\nprint(hex_arr)", "category": "Python"}, {"instruction": "Create a function in Python to modify the given list and remove all strings with length less than three.", "input": "mylist = ['Apple', 'Cat', 'Hello', 'Hi']", "output": "def remove_short(mylist):\n    mylist = [x for x in mylist if len(x) >= 3]\n    return mylist\n    \nprint(remove_short(mylist))\n# Output: ['Apple', 'Hello']", "category": "Python"}, {"instruction": "Write a class in Python to store the objects of student and their grades.", "input": "", "output": "# Class to store student and grades\n\nclass StudentGrades:\n    def __init__(self, student_name):\n        self.student_name = student_name\n        self.grades = {}\n     \n    def add_grade(self, course_name, grade):\n        self.grades[course_name] = grade\n    \n    def get_total_grade(self):\n        total_grade = 0\n        for grade in self.grades.values():\n            total_grade += grade\n        return total_grade", "category": "Python"}, {"instruction": "Describe two ways to insert elements into a hashmap in Python.", "input": "", "output": "1. The simplest way is to use the Square Bracket ([]) Notation. For example, hashmap[key] = value allows you to insert key-value pair into a hashmap. \n2. The other way to insert elements into a hashmap is by using the update() method. This method takes in a dictionary object as an argument and updates the existing hashmap with values from the dictionary.", "category": "Python"}, {"instruction": "Create an input validation function in Python which checks that the input is an integer between 2-6.", "input": "", "output": "def input_validation(input):\n    try:\n        input = int(input)\n        if input >= 2 and input <= 6:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False", "category": "Python"}, {"instruction": "Let's try a different sort algorithm. Generate a Python code snippet to implement merge sort.", "input": "", "output": "# Merges two subarrays of arr[]. \n# First subarray is arr[l..m] \n# Second subarray is arr[m+1..r] \ndef merge(arr, l, m, r): \n    n1 = m - l + 1\n    n2 = r- m \n  \n    # create temp arrays \n    L = [0] * (n1) \n    R = [0] * (n2) \n  \n    # Copy data to temp arrays L[] and R[] \n    for i in range(0 , n1): \n        L[i] = arr[l + i] \n  \n    for j in range(0 , n2): \n        R[j] = arr[m + 1 + j] \n  \n    # Merge the temp arrays back into arr[l..r] \n    i = 0     # Initial index of first subarray \n    j = 0     # Initial index of second subarray \n    k = l     # Initial index of merged subarray \n  \n    while i < n1 and j < n2 : \n        if L[i] <= R[j]: \n            arr[k] = L[i] \n            i += 1\n        else: \n            arr[k] = R[j] \n            j += 1\n        k += 1\n  \n    # Copy the remaining elements of L[], if there \n    # are any \n    while i < n1: \n        arr[k] = L[i] \n        i += 1\n        k += 1\n  \n    # Copy the remaining elements of R[], if there \n    # are any \n    while j < n2: \n        arr[k] = R[j] \n        j += 1\n        k += 1\n  \n# l is for left index and r is right index of the \n# sub-array of arr to be sorted \ndef mergeSort(arr,l,r): \n    if l < r: \n  \n        # Same as (l+r)//2, but avoids overflow for \n        # large l and h \n        m = (l+(r-1))//2\n  \n        # Sort first and second halves \n        mergeSort(arr, l, m) \n        mergeSort(arr, m+1, r) \n        merge(arr, l, m, r)", "category": "Python"}, {"instruction": "Create a Python program to take the input and print the output as shown in the example below.", "input": "list1 = [10, 20, 30, [40, 50], [60, 70], 80]", "output": "print(list1[3][1])\nprint(list1[4][0])\n\nprint(list1[3][1]) # output: 50\nprint(list1[4][0]) # output: 60", "category": "Python"}, {"instruction": "Create an algorithm which is able to sort a given array of integers in descending order.", "input": "", "output": "def sort_descending(nums):\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if nums[i] > nums[j]:\n                nums[i],nums[j] = nums[j],nums[i]\n    return nums", "category": "Python"}, {"instruction": "Design an algorithm to determine if an integer is even or odd.", "input": "", "output": "def is_even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Design a class for a user profile.", "input": "", "output": "class UserProfile:\n  def __init__(self, username, password, email, full_name, date_of_birth, address):\n    self.username = username\n    self.password = password\n    self.email = email\n    self.full_name = full_name\n    self.date_of_birth = date_of_birth\n    self.address = address\n \n  def update_phone_number(self, phone_number):\n    self.phone_number = phone_number", "category": "Python"}, {"instruction": "Explain how inheritance works in programming.", "input": "", "output": "Inheritance is a feature of object-oriented programming (OOP) that allows one class, known as the \"parent class\" or \"base class\", to pass its properties and methods to another class, known as the \"child class\" or \"inherited class\". This relationship between the classes allows for code reuse, as the child class can access the data and functionality of the parent class. Additionally, the child class is allowed to modify and add onto the parent class's features, allowing for even more code reuse between classes and creating more efficient developer workflows.", "category": "Python"}, {"instruction": "How would you create a function in Python to add two numbers?", "input": "", "output": "def add(a, b):\n\treturn a + b \n\n# Usage \nprint(add(3,4)) # output: 7", "category": "Python"}, {"instruction": "When would you use a while-loop in Python?", "input": "", "output": "A while-loop in Python is used when we need to iterate through a set of instructions or code block until a condition is met or false. It allows us to perform an operation multiple times until the condition is met. For example, we can use a while-loop to iterate and check if a certain number is prime or not.", "category": "Python"}, {"instruction": "Create a new list which contains even elements from the existing list A.", "input": "A = [1, 4, 5, 12, 3, 7, 16]", "output": "A = [1, 4, 5, 12, 3, 7, 16]\neven_list = [x for x in A if x % 2 == 0 ]", "category": "Python"}, {"instruction": "Make a function in Python that sorts a list of integers in increasing order.", "input": "[50, 2, 8, 7, 19, 29]", "output": "def sortInt(nums):\n    for i in range(len(nums)-1):\n        for j in range(i+1,len(nums)):\n            if nums[i] > nums[j]:\n                #Swap\n                nums[i],nums[j] = nums[j],nums[i]\n    return nums", "category": "Python"}, {"instruction": "Write a Python function to create a dictionary with the given list as its keys and values.", "input": "list = [\"a\", \"b\", \"c\"]", "output": "def create_dict(list):\n  return dict(zip(list, list))\n\ndict = create_dict(list)\nprint(dict)\n# Output: {'a': 'a', 'b': 'b', 'c': 'c'}", "category": "Python"}, {"instruction": "Write a Python function that takes a list of numbers and returns the mean and standard deviation of that list.", "input": "list = [1, 2, 3, 4, 5]", "output": "import statistics\n\ndef get_stats(list):\n mean = statistics.mean(list)\n stdev = statistics.stdev(list)\n return mean, stdev\n\nmean, stdev = get_stats(list)\nprint(\"Mean:\", mean)\nprint(\"Standard Deviation:\", stdev)", "category": "Python"}, {"instruction": "Create a function in Python which checks if an input value is positive or negative.", "input": "", "output": "def check_sign(x):\n  if x < 0:\n    print(\"The number is negative.\")\n  elif x > 0:\n    print(\"The number is positive.\")\n  else:\n    print(\"The number is 0.\")", "category": "Python"}, {"instruction": "Edit the given python code to execute the arithmetic operation.", "input": "a = 8\nb = a+2", "output": "a = 8\nb = a + 2\nc = a * b\nprint(c)", "category": "Python"}, {"instruction": "Design a program to count the total number of even numbers in a given array.", "input": "[1, 2, 3, 4, 5, 6]", "output": "def count_evens(arr):\n    count = 0\n    for i in arr:\n        if (i % 2)  == 0:\n            count+=1\n    return count\n\narr = [1, 2, 3, 4, 5, 6]\ncount = count_evens(arr)\n\nprint(count)", "category": "Python"}, {"instruction": "Use Python to reverse the order of a string input.", "input": "I love coding", "output": "def reverse_string(string): \n    return string[::-1]\n\nstring_input = 'I love coding'\n\nreverse_string(string_input)", "category": "Python"}, {"instruction": "Create an array of random integers from 0-10 and print the sum of all elements in the array.", "input": "", "output": "import random\n\n# generate random integers\nint_list = [random.randint(0, 10) for i in range(10)]\n\n# calculate the sum\ntotal = 0\nfor e in int_list:\n    total += e\n\n# print the sum\nprint(total)", "category": "Python"}, {"instruction": "Edit the given code to use dynamic programming to solve the problem.", "input": "def rod_cutting(arr, n):\n    if n <= 0:\n        return 0\n    max_val = 0\n    for i in range(0, n):\n        max_val = max(max_val, arr[i] + rod_cutting(arr, n-i-1))\n    return max_val", "output": "def rod_cutting(arr, n):\n    dp = [-1 for _ in range(n+1)]\n    dp[0] = 0\n    for i in range(1, n+1):\n        for j in range(i):\n            dp[i] = max(dp[i], arr[j] + dp[i - j - 1])\n    return dp[n]", "category": "Python"}, {"instruction": "Print out the Fibonacci series up to a given number.", "input": "n = 5", "output": "def print_fibonacci_series(n):\n    a = 0\n    b = 1\n    print(a, end = \" \")\n    print(b, end = \" \")\n    for _ in range(2, n):\n        c = a + b\n        a = b\n        b = c\n        print(c, end = \" \")\n    print()\n\nprint_fibonacci_series(5)", "category": "Python"}, {"instruction": "Write a class that implements an arithmetic operator.", "input": "None", "output": "class ArithmeticOperator:\n    def __init__(self, operator, left, right):\n        self.operator = operator\n        self.left = left\n        self.right = right\n\n    def operate(self):\n        if self.operator == \"+\":\n            return self.left + self.right\n        elif self.operator == \"-\":\n            return self.left - self.right\n        elif self.operator == \"*\":\n            return self.left * self.right\n        elif self.operator == \"/\":\n            return self.left / self.right\n        else:\n            raise ValueError('Not a valid operator')", "category": "Python"}, {"instruction": "Write a function which will print out a given pattern.", "input": "*\n**\n***\n****", "output": "def print_pattern(n):\n    for i in range(1, n+1):\n        print(\"*\" * i)\n\nprint_pattern(4)", "category": "Python"}, {"instruction": "Create a Python program that prints out all even numbers between 0 and the given number n.", "input": "", "output": "def print_even_numbers(n):\n  for i in range (0, n+1):\n    if i % 2 == 0:\n      print (i)\n\nprint_even_numbers(20)", "category": "Python"}, {"instruction": "Create a function that prints out the List of tuples.", "input": "t = [(1, 5), (0, 1), (10, 20)]", "output": "def print_list_tuple(t):\n    for item in t:\n        print(item)", "category": "Python"}, {"instruction": "Create a function to encrypt a string using the XOR operator.", "input": "key = 'ABCDEFG'", "output": "def xor_encrypt(string, key):\n    encrypted_string = \"\"\n    for i, letter in enumerate(string):\n        encrypted_string += chr(ord(letter) ^ ord(key[i % len(key)]))\n    return encrypted_string", "category": "Python"}, {"instruction": "What algorithm should be used for predicting the output for a given input?", "input": "", "output": "The type of algorithm to be used for predicting the output for a given input depends on the complexity of the task. Common algorithms used for prediction tasks include Support Vector Machines, Random Forests, k-Nearest Neighbors and Artificial Neural Networks.", "category": "Python"}, {"instruction": "Create a function that takes in a string and returns an array of the words which are longer than 5 characters.", "input": "\"Welcome to the world of programming\"", "output": "def get_long_words(s):\n    words = s.split(\" \")\n    result = []\n    for word in words:\n        if len(word) > 5:\n            result.append(word)\n    return result", "category": "Python"}, {"instruction": "We have a list of numbers and a given sum. Write a program to determine if any two numbers from the list sum up to the given sum.", "input": "[1,2,3,4], 6", "output": "def two_sum(nums, target):\n    for i in range(len(nums) - 1):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return (i, j)\n    return -1", "category": "Python"}, {"instruction": "Create a function that takes a string and checks if the string contains any special characters.", "input": "Hello World", "output": "def has_special_characters(s):\n    return not all(char.isalnum() for char in s)", "category": "Python"}, {"instruction": "Generate a loop to find the largest sub-array in a given array with contiguous elements and its sum.", "input": "Array: [-2, 6, -3, 5, -2, 3, 4, -2]", "output": "\"\"\"\nGenerate a loop to find the largest sub-array in a given array with contiguous elements and its sum.\n\"\"\"\n\ndef largest_subarray_sum(array):\n    best_sum = 0\n    current_sum = 0\n    current_start_index = 0\n    best_start_index = -1\n    best_end_index = -1\n    for i in range(len(array)):\n        current_sum += array[i]\n        if current_sum > best_sum:\n            best_sum = current_sum\n            best_start_index = current_start_index\n            best_end_index = i\n        if current_sum < 0:\n            current_sum = 0\n            current_start_index = i + 1\n    return (best_sum, best_start_index, best_end_index)\n\nif __name__ == '__main__':\n    array = [-2, 6, -3, 5, -2, 3, 4, -2]\n    print(largest_subarray_sum(array))", "category": "Python"}, {"instruction": "Create a function to edit a given string, replacing all the vowels with a given character.", "input": "String: \"Hello world\"\nCharacter: 'x'", "output": "\"\"\"\nCreate a function to edit a given string, replacing all the vowels with a given character.\n\"\"\"\ndef replace_vowels(string, replacement_character):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = \"\"\n    for char in string:\n        if char in vowels:\n            new_str += replacement_character\n        else:\n            new_str += char\n    return new_str\n\nif __name__ == '__main__':\n    string = \"Hello world\"\n    replacement_character = 'x' \n    print(replace_vowels(string, replacement_character))", "category": "Python"}, {"instruction": "Create a data structure to store all of the prime numbers up to 1 million.", "input": "", "output": "\"\"\"\nCreate a data structure to store all of the prime numbers up to 1 million.\n\"\"\"\nimport math\n\ndef sieveOfEratosthenes(n):\n    prime_numbers = [True]*(n+1) \n    prime_numbers[0] = False\n    prime_numbers[1] = False\n      \n    for i in range(2, int(math.sqrt(n)+1)): \n        if (prime_numbers[i]): \n            for j in range(i*i, n+1, i): \n                prime_numbers[j] = False\n      \n    prime_numbers_list = []\n    for k in range(n+1): \n        if prime_numbers[k]: \n            prime_numbers_list.append(k)\n      \n    return prime_numbers_list\n\nif __name__ == '__main__':\n    n = 1000000\n    prime_numbers_list = sieveOfEratosthenes(n)\n    print(prime_numbers_list)", "category": "Python"}, {"instruction": "Use features of the Python language to implement 3-way partitioning of a given array.", "input": "Array: [9,6,7,4,1,6,3]", "output": "\"\"\"\nUse features of the Python language to implement 3-way partitioning of a given array.\n\"\"\"\ndef threeWayPartition(array, pivot): \n    less = [] \n    equal = [] \n    greater = [] \n    for i in array: \n        if i < pivot: \n            less.append(i) \n        elif i == pivot: \n            equal.append(i) \n        else: \n            greater.append(i)   \n    return less + equal + greater \n\nif __name__ == '__main__': \n    array = [9,6,7,4,1,6,3]\n    pivot = 6\n    print(threeWayPartition(array, pivot))", "category": "Python"}, {"instruction": "Create a function which receives two strings and checks if the characters in the first string appear in the same order as in the second string.", "input": "String 1: \"Hello World\" \nString 2: \"World Hello\"", "output": "\"\"\"\nCreate a function which receives two strings and checks if the characters in the first string appear in the same order as in the second string.\n\"\"\"\ndef check_order(str1,str2): \n    stack=[]\n    j=0\n    for i in range(len(str2)): \n        if str2[i]==str1[j]: \n            stack.append(str2[i]) \n            j+=1\n            if stack==str1: \n                return True\n                \n    return False\n\nif __name__ == '__main__': \n    str1 = \"Hello World\"\n    str2 = \"World Hello\"\n    print(check_order(str1,str2))", "category": "Python"}, {"instruction": "Generate a loop to read each word from a given sentence and display them as a list.", "input": "Sentence: \"Python is a great programming language\"", "output": "\"\"\"\nGenerate a loop to read each word from a given sentence and display them as a list.\n\"\"\"\nsentence = \"Python is a great programming language\"\nwords = sentence.split()\n\nword_list= []\nfor word in words:\n    word_list.append(word)\n\nprint(word_list)", "category": "Python"}, {"instruction": "Create an algorithm to find the optimal sum from a set of given numbers such that the sum is equal to a given target.", "input": "Target: 10\nNumbers: [1,4,5,3,6]", "output": "\"\"\"\nCreate an algorithm to find the optimal sum from a set of given numbers such that the sum is equal to a given target.\n\"\"\"\ndef optimal_sum(target, numbers): \n    if (target == 0): \n        return True\n    n = len(numbers) \n    subset = [True] + [False]*target \n      \n    for i in range(n): \n        for j in range(target,numbers[i]-1,-1): \n            subset[j] = subset[j] or subset[j-numbers[i]] \n  \n    return subset[target] \n\nif __name__ == '__main__': \n    target = 10\n    numbers = [1,4,5,3,6]\n    print(optimal_sum(target, numbers))", "category": "Python"}, {"instruction": "Create a function which converts a string representation of number in English to a numerical value.", "input": "\"one thousand two hundred and thirty four\"", "output": "\"\"\"\nCreate a function which converts a string representation of number in English to a numerical value.\n\"\"\"\n\ndef convert_english_number(number_string):\n    word_values = {\"one\":1,\"two\":2,\"three\":3,\"four\":4,\"five\":5,\"six\":6,\"seven\":7,\"eight\":8,\"nine\":9,\"ten\":10,\"eleven\":11,\"twelve\":12,\"thirteen\":13,\"fourteen\":14,\"fifteen\":15,\"sixteen\":16,\"seventeen\":17,\"eighteen\":18,\"nineteen\":19,\"twenty\":20,\"thirty\":30,\"forty\":40,\"fifty\":50,\"sixty\":60,\"seventy\":70,\"eighty\":80,\"ninety\":90}\n    word_list = number_string.split()\n\n    final_num = 0\n    i=0\n    while i<len(word_list): \n        if word_list[i] in word_values.keys():\n            final_num += word_values[word_list[i]]\n        elif word_list[i]==\"hundred\":\n            final_num = final_num*100\n            \n        if(i+1<len(word_list) and word_list[i+1]==\"hundred\"):\n            final_num += word_values[word_list[i]]*100\n        i+=1\n    return final_num\n\nif __name__ == '__main__':\n    print(convert_english_number(\"one thousand two hundred and thirty four\"))", "category": "Python"}, {"instruction": "Construct an IPython code cell to display the content of a given pandas DataFrame.", "input": "DataFrame:\nName      Age\nAlice      26\nBob        32\nCarol      12", "output": "import pandas as pd\n\ndf = pd.DataFrame({'Name': ['Alice', 'Bob', 'Carol'],\n                   'Age': [26, 32, 12]})\n\ndf", "category": "Python"}, {"instruction": "Suggest a way to solve the following problem in Python: extracting the last element from a given list.", "input": "", "output": "A convenient way to extract the last element from a given list in Python is to use negative indexing. This allows you to access the last element of a list by using the index -1. For example, the following code will return the last element of the list \"my_list\": \n\nmy_last_element = my_list[-1]", "category": "Python"}, {"instruction": "Write a Python script that prints out the Fibonacci sequence up to the nth number.", "input": "10", "output": "\"\"\"\nPrint out the Fibonacci sequence up to the nth number\n\"\"\"\ndef printFibSequence(n): \n    \n    # Initialize first two terms \n    a = 0\n    b = 1\n\t\n    # Add the first two terms \n    print(a, end=\" \") \n    print(b, end=\" \") \n\t\n    # Loop up to the n-2th number\n    for i in range(2, n): \n        c = a + b \n        print(c, end=\" \") \n        a = b \n        b = c \n\n# Main program\nif __name__ == '__main__':\n    n = 10 \n    printFibSequence(n)", "category": "Python"}, {"instruction": "Add comments to the following code to explain briefly its purpose.", "input": "def sum_of_numbers(n):\n    total = 0\n    for i in range(n):\n        total += i\n    return total", "output": "\"\"\"\nThis function is used to calculate the \nsum of the first 'n' natural numbers\n\"\"\"\ndef sum_of_numbers(n): \n    # Initialize total to 0\n    total = 0 \n\n    # Loop through the first 'n' natural numbers\n    for i in range(n): \n        # Add the current number to the total\n        total += i \n\n    # Return total\n    return total", "category": "Python"}, {"instruction": "Generate random numbers in the range of 1 to 100 using a for loop in Python.", "input": "", "output": "import random\n\nfor i in range(100):\n\trand_num = random.randint(1, 100)\n\tprint(rand_num)", "category": "Python"}, {"instruction": "From the array of integers given below, write a Python code snippet to select all even numbers.", "input": "array = [1, 9, 4, 10, 5, 12];", "output": "even_numbers = [num for num in array if num % 2 == 0]", "category": "Python"}, {"instruction": "Generate a random number between the two numbers provided.", "input": "min = 5\nmax = 10", "output": "import random\n\ndef randomNumber(min, max):\n    return random.randint(min, max)", "category": "Python"}, {"instruction": "Write a function to sort a stack in ascending order.", "input": "stack = [4, 7, 2, 1]", "output": "def sortStackAsc(stack):\n    sorted_stack = []\n\n    while stack:\n        current_element = stack.pop()\n        while sorted_stack and current_element < sorted_stack[-1]:\n            stack.append(sorted_stack.pop())\n        sorted_stack.append(current_element)\n\n    return sorted_stack", "category": "Python"}, {"instruction": "Write a generic function to split an array into n equal slices.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def splitArr(arr, n):\n    if n > len(arr):\n        return -1\n    result = []\n    for i in range(0, len(arr), n):\n        result.append(arr[i:i+n])\n    return result", "category": "Python"}, {"instruction": "In Python, create a function that reverses a list.", "input": "", "output": "def reverse_list(list): \n    return list[::-1] \n  \nlist = [10, 16, 1, 5] \n  \nprint(\"Original List\", list) \nprint(\"Reversed List\", reverse_list(list))", "category": "Python"}, {"instruction": "Create a class with two methods to generate a random Integer and String", "input": "", "output": "import random\n\nclass randomGenerator:\n  \n    def __init__(self):\n        pass\n    \n    def generate_random_int(self):\n        return random.randint(0,100)\n    \n    def generate_random_string(self):\n        return ''.join(random.choices(string.ascii_letters + string.digits, k=10))\n\nrandomGenerator = randomGenerator()", "category": "Python"}, {"instruction": "Analyze the following two functions to determine which one will be faster for executing a given operation.", "input": "Function 1:\n\ndef f1(x):\n    for i in range(1, x):\n        print(i)\n\nFunction 2:\n\ndef f2(x):\n    i = 1\n    while i < x:\n        print(i)\n        i += 1", "output": "Function 2 will be faster than Function 1 for executing a given operation. This is because Function 2 uses a while loop, which checks the condition before executing the loop body, while Function 1 uses a for loop, which executes the loop body before checking the condition.", "category": "Python"}, {"instruction": "Write a function in Python to format a given date according to the format \"Day-Name, Month Name, Day, Year\".", "input": "\"2019-06-27\"", "output": "def format_date(date): \n    date_list = date.split('-') \n    formatted_date = date_list[2] + '-' + calendar.month_name[int(date_list[1])] + '-' + date_list[0] \n    return formatted_date", "category": "Python"}, {"instruction": "Describe a way to implement quicksort.", "input": "", "output": "Quicksort is an efficient sorting algorithm that works by selecting a \"pivot\" element from the array and partitioning the other elements into two sub-arrays based on whether they are less than or greater than the pivot element. Quicksort then recursively sorts the sub-arrays in the same way. The algorithm runs in O(nlog(n)) time and is one of the most widely used sorting algorithms.", "category": "Python"}, {"instruction": "Generate a code to throttle a stream of messages that exceeds a set limit of messages within a certain time window.", "input": "limit = 100\ntime_window = 5 seconds", "output": "import time\n\ndef throttle_messages(limit, window):\n    count = 0\n    start = time.time()\n \n    while count < limit:\n        next_message = yield\n        count += 1\n         \n        end = time.time()\n        if (end - start) > window: \n            count = 0\n            start = end\n            \n    yield", "category": "Python"}, {"instruction": "Create a python generator that prints fibonacci numbers from n to 2*n-1.", "input": "n = 10", "output": "def fibonacci_generator(n):\n    a, b = 0, 1\n    while a < 2 * n - 1:\n        yield a\n        a, b = b, a + b", "category": "Python"}, {"instruction": "Write code to count the number of times a given pattern has occured in a given string.", "input": "Text: \u201cThis is a test string to practice coding. This string contains the pattern \u201cis\u201d", "output": "def countOccurrence(txt, pattern):\n  count = 0\n  for i in range(len(txt)):\n    if txt[i:i+len(pattern)] == pattern:\n      count += 1\n  return count", "category": "Python"}, {"instruction": "Implement a function to insert an element into a binary search tree.", "input": "tree = \n    5\n   / \\\n  2   8", "output": "def insert(self,val): \n\tif not self.root: \n\t\tself.root = Node(val) \n\telse: \n\t\tcurrent = self.root\n\t\twhile True: \n\t\t\tif val < current.val: \n\t\t\t\tif current.left: \n\t\t\t\t\tcurrent = current.left \n\t\t\t\telse: \n\t\t\t\t\tcurrent.left = Node(val) \n\t\t\t\t\tbreak\n\t\t\telif val > current.val: \n\t\t\t\tif current.right: \n\t\t\t\t\tcurrent = current.right \n\t\t\t\telse: \n\t\t\t\t\tcurrent.right = Node(val) \n\t\t\t\t\tbreak\n\t\t\telse: \n\t\t\t\tbreak", "category": "Python"}, {"instruction": "Generate a code to capitalize the first letter of each word of a given sentence.", "input": "text = \"This is a sample sentence.\"", "output": "def capitalize_first_letter(text):\n    words = text.split(' ')\n    capitalized_words = [word[0].upper() + word[1:] for word in words]\n    return ' '.join(capitalized_words)\n\ntext = \"This is a sample sentence.\"\ncapitalized_text = capitalize_first_letter(text)\nprint(capitalized_text) # Output: This Is A Sample Sentence.", "category": "Python"}, {"instruction": "Modify the program to support calculating Fibonacci numbers up to the nth number.", "input": "", "output": "def FibonacciSeries(n):\n    if n <= 0:\n        return [0]\n    elif n == 1:\n        return [0,1]\n    else:\n        series = [0,1]\n        for i in range(2, n):\n            curr_num = series[i-1] + series[i-2]\n            series.append(curr_num)\n        return series", "category": "Python"}, {"instruction": "Can you modify the program so that it prints out all words in the sentence along with their count?", "input": "\"The quick brown fox jumped over the lazy dog.\"", "output": "def print_words_with_count(sentence):\n  word_count = {}\n  words = sentence.split()\n  \n  for word in words:\n    if word not in word_count:\n      word_count[word] = 1\n    else:\n      word_count[word] += 1\n  \n  for word, count in word_count.items():\n    print(\"Word: %s  Count: %d\" % (word, count))", "category": "Python"}, {"instruction": "Change the following code to reduce its running time", "input": "for i in range(0, len(nums)):\n    if nums[i] == target:\n        return i", "output": "def find_target(nums, target): \n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    return -1\n\nif __name__ == '__main__':\n    nums = [2, 3, 5, 7]\n    target = 5\n    index = -1\n    for i in range(0, len(nums)):\n        if nums[i] == target:\n            index = i\n            break\n    if (index == -1):\n        print(\"Target not found!\")\n    else:\n        print(\"Target found at index:\", index)", "category": "Python"}, {"instruction": "Understand the parameters used in the following code and explain their purpose.", "input": "def doSomething(x, y, z): \n    pass", "output": "The parameters x, y and z are used in this function to represent arbitrary values. They can represent integers, floats, strings, lists, dictionaries, objects, etc. Depending on the specific implementation of this function, the parameters can take any meaning, representing any value. For example, it could be a function that performs an arithmetic operation, in which case x, y and z will represent the three numbers in the operation, or a function that processes a list, in which case x, y and z will represent the start index, end index and the list respectively.", "category": "Python"}, {"instruction": "Modify the following code to return the product of all numbers in a given list.", "input": "def product_list(numbers):\n    # Initialize the result\n    result = 1\n    # Iterate over the input numbers\n    for x in numbers:\n        result = result * x\n    # Return the result\n    return result", "output": "def product_list(numbers):\n    # Initialize the result\n    result = 1\n    # Iterate over the input numbers\n    for x in numbers:\n        result *= x\n    # Return the result\n    return result", "category": "Python"}, {"instruction": "Suggest a better data structure that can be used to store a large amount of data in a way that querying data is fast.", "input": "", "output": "A better data structure to store a large amount of data in a way that querying is fast would be a Hash Table. Hash Tables store data in an associative array, allowing for fast searches and retrieval of data.", "category": "Python"}, {"instruction": "Suggest improvements to the following code to optimize its performance.", "input": "requests = []\nfor i in range(100000000):\n    requests.append(i)", "output": "requests = []\nfor i in range(100000000):\n    requests.append(i)\n\n# use list comprehension to generate the list in one line\nrequests = [i for i in range(100000000)]", "category": "Python"}, {"instruction": "Generate random numbers 0 to 1000.", "input": "", "output": "import random\n\nfor i in range(10):\n    print(random.randint(0, 1000))", "category": "Python"}, {"instruction": "Create a Python script that calculates the surface area of a cylinder.", "input": "", "output": "def surface_area_cylinder(radius, height):\n    pi = 3.14\n    return 2*pi*radius*(radius + height)", "category": "Python"}, {"instruction": "Identify the error in the code given below.", "input": "# Sum of elements in a list\n\nmy_list = [1, 2, 3]\n\nsum = 0\n\nfor i in range(my_list):\n    sum += i\n\nprint(sum)", "output": "The error is in line 6 while using the range function. The range function expects the start and end parameters to be int type, but in this case the parameter passed to the range function is a list. This should be changed to range(len(my_list)) so that the code will iterate over the elements of the list instead.", "category": "Python"}, {"instruction": "Explain the use of *args and **kwargs in Python.", "input": "", "output": "*args and **kwargs are special syntax in Python used to pass a variable number of arguments to a function. *args denotes positional arguments, while **kwargs represents keyword arguments. The syntax allows functions to take arbitrary number of arguments and provide flexibility for functions to handle different arguments.", "category": "Python"}, {"instruction": "Write code to remove duplicates and maintain the order of elements in a given list.", "input": "list = [3, 1, 7, 5, 3, 8, 7]", "output": "def remove_duplicates(list): \n    new_list = []\n    for element in list:\n        if element not in new_list:\n            new_list.append(element)\n    return new_list\n\nprint(remove_duplicates(list))", "category": "Python"}, {"instruction": "Create a function that prints the binary representation of a number.", "input": "number = 5", "output": "def print_binary(number): \n    binary_string = \"\"\n    while number != 0: \n        remainder = number % 2\n        binary_string = str(remainder) + binary_string\n        number = number // 2\n    return binary_string \n\nprint(print_binary(number))", "category": "Python"}, {"instruction": "Given an input of numbers, sort the numbers in descending order.", "input": "arr = [6, 2, 5, 3, 9]", "output": "def sort_numbers_desc(arr): \n    for i in range(len(arr)): \n  \n        max_element = arr[i] \n        max_index = i \n  \n        for j in range(i+1, len(arr)): \n            if arr[j] > max_element: \n                max_element = arr[j] \n                max_index = j  \n  \n        arr[i], arr[max_index] = arr[max_index], arr[i] \n    return arr\n\nprint(sort_numbers_desc(arr))", "category": "Python"}, {"instruction": "Write a function to merge two sorted lists into one sorted list.", "input": "list1 = [3, 5, 7]\nlist2 = [1, 4, 6]", "output": "def merge_lists(list1, list2):\n    final_list = []\n    i, j = 0, 0\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            final_list.append(list1[i])\n            i += 1\n        else:\n            final_list.append(list2[j])\n            j += 1\n    \n    while i < len(list1):\n        final_list.append(list1[i])\n        i += 1\n\n    while j < len(list2):\n        final_list.append(list2[j])\n        j += 1\n    \n    return final_list\n\nprint(merge_lists(list1, list2))", "category": "Python"}, {"instruction": "Write a code to print the largest element of an array if the array contains all negative numbers.", "input": "arr = [-10, -20, -50, -30]", "output": "def largest_negative_number(arr): \n    largest = float('-inf')\n    for i in range(len(arr)): \n        if arr[i] > largest: \n            largest = arr[i] \n    return largest \n  \n# Driver Code \narr = [-10, -20, -50, -30] \n  \nprint(largest_negative_number(arr))", "category": "Python"}, {"instruction": "Compute the sum of a given array using a Python function.", "input": "arr = [1, 2, 3, 4]", "output": "def compute_sum(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n\nprint(compute_sum(arr))\n\nOutput:\n10", "category": "Python"}, {"instruction": "Write a Python function that generates a key-value pair for the given array.", "input": "arr = [1, 2, 3, 4]", "output": "def generate_key_value(arr):\n    key_val_pairs = {k:v for k,v in enumerate(arr)}\n    return key_val_pairs\n\nprint(generate_key_value(arr))\n\nOutput:\n{0: 1, 1: 2, 2: 3, 3: 4}", "category": "Python"}, {"instruction": "Write code to output the sum of the numbers 1-100.", "input": "", "output": "def sum_nums(n):\n    total = 0\n    for i in range(1,n+1):\n        total += i\n    return total\n\nprint(sum_nums(100))", "category": "Python"}, {"instruction": "Write a code to shuffle a list randomly in Python", "input": "", "output": "import random\n\nmy_list = [1, 2, 3, 4, 5]\n\nrandom.shuffle(my_list)\n\nprint(my_list)", "category": "Python"}, {"instruction": "Create a linked list with the following elements: 5, 6, 7, 8.", "input": "", "output": "class Node: \n    def __init__(self, data): \n        self.data = data\n        self.next = None\n\nclass LinkedList:\n\n    def __init__(self):  \n        self.head = None\n\n    def append(self, data):\n        new_node = Node(data)\n\n        if self.head == None:\n            self.head = new_node\n        else:\n            curr = self.head\n            while curr.next != None:\n                curr = curr.next\n            curr.next = new_node\n\nlist = LinkedList() \nlist.append(5) \nlist.append(6) \nlist.append(7) \nlist.append(8)", "category": "Python"}, {"instruction": "Implement a search() function that uses binary search to find a given element in an array.", "input": "", "output": "def search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1", "category": "Python"}, {"instruction": "Generate a random sample with size n from a given pandas DataFrame.", "input": "", "output": "import pandas as pd\n\ndef sample_df(df,n):\n    return df.sample(n)", "category": "Python"}, {"instruction": "Name a data structure that allows efficient insertion and deletion of elements at the beginning, middle and end.", "input": "", "output": "A doubly-linked list is a data structure that allows efficient insertion and deletion of elements at the beginning, middle and end. It consists of nodes, which contain data and two references (or links) each pointing to the previous and/or next node in the linked list. By traversing the list via these links it is possible to insert and delete elements anywhere in the list in constant time.", "category": "Python"}, {"instruction": "What is the most efficient way to search for an element in a list?", "input": "", "output": "The most efficient way to search for an element in a list is by using a binary search, which is a divide and conquer search algorithm that halves the search space after each iteration. Binary search is generally more efficient than linear search, as it has a time complexity of O(log n).", "category": "Python"}, {"instruction": "Explain why function scope is important in Python.", "input": "", "output": "Function scope is important in Python because it allows for the scoping of data to the specific environment in which the function was invoked. This is critical for ensuring that code runs correctly and that variables are isolated to the environment in which the associated function was called. Scoping also helps promote the common programming practice of modularity and encapsulation, as it allows you to create \"black-boxes\" that separate the internal implementation of a function from the external environment. Scoping also helps to ensure that only the variables and data which are intended to be used within a function are actually used within it, as any variables which are out of scope will be inaccessible.", "category": "Python"}, {"instruction": "Create a function which takes in a string and returns a dictionary that counts its character frequency.", "input": "", "output": "def char_frequency(string): \n    counts = {}\n    for char in string:\n        if counts.get(char) == None: \n            counts[char] = 1\n        else: \n            counts[char] += 1\n    return counts", "category": "Python"}, {"instruction": "What are the prerequisites for learning Python?", "input": "", "output": "The prerequisites for learning Python are basic knowledge of Computer Science concepts, knowledge of some programming language like C/C++, understanding of Object-Oriented Programming, and familiarity with some text editors like Notepad++, Visual Studio Code, etc.", "category": "Python"}, {"instruction": "Given a binary tree, write a function to serialize and deserialize the tree.", "input": "", "output": "def serialize(root):\n    if not root:\n        return \"None\"\n \n    serializedTree = root.val\n \n    serializedTree += \",\" + serialize(root.left)\n    serializedTree += \",\" + serialize(root.right)\n    return serializedTree\n \ndef deserialize(serializedTree):\n    q = deque(serializedTree.split(','))\n \n    def recur(q): \n        val = q.popleft()\n        if val == 'None':\n            return None\n        count = TreeNode(val)\n        count.left = recur(q)\n        count.right = recur(q)\n        return count\n \n    return recur(q)", "category": "Python"}, {"instruction": "Create a function that will take a string as an input and returns the number of upper case letters in it.", "input": "", "output": "def countUpperCase(string):\n    # Initialize counter variable\n    count = 0\n\n    # Loop through characters in string\n    for c in string:\n        # If character is upper case increment counter\n        if c.isupper():\n            count += 1\n\n    return count", "category": "Python"}, {"instruction": "Create a function to divide two numbers and return an integer result.", "input": "", "output": "def div(x, y):\n    if y == 0:\n        raise ValueError('Cannot divide by zero')\n    else:\n        return x // y", "category": "Python"}, {"instruction": "Write a loop in Python to find all numbers below 100 that are divisible by 7.", "input": "", "output": "for i in range(1,100):\n    if i % 7 == 0:\n        print(i, end=\" \")", "category": "Python"}, {"instruction": "Suggest a method to remove the pair of parentheses ( ) and the words inside them from the following python string.", "input": "my_string = 'This is (a sample) string with (parentheses)'", "output": "import re\n\nmy_string = 'This is (a sample) string with (parentheses)'\nop = re.sub(r'\\([^)]*\\)', '', my_string)\nprint(op)", "category": "Python"}, {"instruction": "Edit the program such that it prints the elements in a deck of cards in a specific format.", "input": "", "output": "# Symbols for the different ranks\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"Jack\", \"Queen\", \"King\", \"Ace\"]\n# Symbols for the different suits\nsuits = [\"Clubs\", \"Diamonds\", \"Hearts\", \"Spades\"]\n\n# Create a deck of cards as a 2D array\ndeck = []\nfor i in range(len(ranks)):\n    for j in range(len(suits)):\n        deck.append([ranks[i], suits[j]])\n\n# Print the elements in the deck array\nfor i in range(len(deck)):\n    rank = deck[i][0]\n    suit = deck[i][1]\n    print(\"Card %d: %s of %s\" % (i+1, rank, suit))", "category": "Python"}, {"instruction": "Design a program to partition an array into two subarrays such that the difference between the sum of the two subarrays is minimum.", "input": "Input Array: [1, 6, 5, 11, 3]", "output": "def min_partition_array(arr):\n    total = 0\n    for i in arr:\n        total += i\n    sum1, sum2 = 0, total\n    n = len(arr)\n    flag = [[False for i in range(total + 1)] for j in range(n + 1)]\n    flag[0][0] = True\n    for i in range(1, n + 1):\n        for j in range(total + 1):\n            if arr[i - 1] <= j:\n                flag[i][j] = flag[i - 1][j] or flag[i - 1][j - arr[i - 1]]\n            else:\n                flag[i][j] = flag[i - 1][j]\n    for j in range(0, int(total / 2) + 1):\n        if flag[n][j]:\n            sum1 = j\n            sum2 = total - j\n            break\n    return sum1, sum2\n \n# Partition [1, 6, 5, 11, 3]\nsubarr1, subarr2 = min_partition_array([1, 6, 5, 11, 3])\nprint ((subarr1, subarr2)) # prints (8, 9)", "category": "Python"}, {"instruction": "Create a for loop in Python to iterate over all items in a list.", "input": "my_list = [1, 2, 3, 4, 5]", "output": "for item in my_list:\n    print(item)", "category": "Python"}, {"instruction": "Find the longest substring with non-repeating characters", "input": "", "output": "def longest_substring(string):\n    # Initialize the max length and the substring\n    max_length = 0\n    substring = ''\n\n    # Create an empty set to store previously seen characters\n    char_set = set()\n\n    # Iterate over the string\n    for char in string:\n        # If the character hasn't already been seen,\n        if char not in char_set:\n            # add it to the set\n            char_set.add(char)\n            # and extend the substring\n            substring += char\n        else:\n            # if the character has already been seen\n            # check whether the current substring is longer than the current max length\n            if len(substring) > max_length:\n                max_length = len(substring)\n            # Clear the set and the substring\n            char_set.clear()\n            substring = ''\n\n    # Check the last substring\n    if len(substring) > max_length:\n        max_length = len(substring)\n    \n    return max_length", "category": "Python"}, {"instruction": "Design and implement a function that takes two lists of integers as parameters and returns the minimum difference between two elements of the two lists.", "input": "list1 = [2, 4, 7, 13] \nlist2 = [3, 8, 9, 14]", "output": "def min_difference(list1, list2):\n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n\n    for a in list1:\n        for b in list2:\n            # Update min_diff only if the difference \n            # between a and b is smaller than min_diff \n            min_diff = min(min_diff, abs(a - b))\n    \n    return min_diff", "category": "Python"}, {"instruction": "Edit the code to add an if statement that returns the string \"even\" if the value of the variable is even, or the string \"odd\" if the value of the variable is odd.", "input": "var number = 5\ndef even_odd(number):\n  #TODO", "output": "def even_odd(number):\n    if number % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"", "category": "Python"}, {"instruction": "Update the code to return a different string depending on the value of the variable test", "input": "var test = 3\ndef change(test):\n  #TODO", "output": "def change(test):\n    if test==1:\n        return \"One\"\n    elif test==2:\n        return \"Two\"\n    elif test==3:\n        return \"Three\"\n    else:\n        return \"Not Found\"", "category": "Python"}, {"instruction": "Write a function that switches the odd elements and the even elements in a list", "input": "def switch_list(mylist):\n    #TODO", "output": "def switch_list(mylist):\n    for i in range(0, len(mylist), 2):\n        temp = mylist[i]\n        mylist[i] = mylist[i + 1]\n        mylist[i + 1] = temp\n    return mylist", "category": "Python"}, {"instruction": "Develop an algorithm in Python to find the average of four numbers.", "input": "[2, 4, 8, 5]", "output": "def avg(numbers):\n sum = 0\n for num in numbers:\n  sum += num\n return sum/len(numbers)\n\naverage = avg([2, 4, 8, 5])\nprint(average)", "category": "Python"}, {"instruction": "Write a Python program to add the items of two given lists and create a new list.", "input": "[1, 2, 3], [4, 5, 6]", "output": "newList = [x + y for x, y in zip([1, 2, 3], [4, 5, 6])]", "category": "Python"}, {"instruction": "Create a Flask application to redirect the user to a given URL when the user input is valid.", "input": "", "output": "from flask import Flask, redirect, request\n\napp = Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n    if request.method == 'POST':\n        if request.form['userInput']:\n            url = 'https://www.example.com'\n            return redirect(url)\n    return '''\n    <form method=\"POST\">\n        <input type=\"text\" name=\"userInput\" placeholder=\"Type something..\" />\n        <input type=\"submit\" value=\"Submit\" />\n    </form>\n    '''\n\nif __name__ == \"__main__\":\n    app.run()", "category": "Python"}, {"instruction": "Create a program in Scala to calculate the average price of all products in the table \u201cProducts\u201d.", "input": "", "output": "import scala.io.Source\n\nval products = Source.fromFile(\"products.txt\").getLines.toList\nval avgPrice = products.map(p => p.split(\",\")(4).toDouble).sum/products.length\nprintln(s\"The average price is: $avgPrice\")", "category": "Python"}, {"instruction": "How would you create an API endpoint that returns a list of users?", "input": "", "output": "import flask\n\napp = flask.Flask(__name__)\n\n@app.route(\"/users\", methods=(\"GET\",))\ndef get_users():\n    users = [\n        {\"name\": \"John Smith\", \"age\": 45},\n        {\"name\": \"Tim Jones\", \"age\": 34},\n        {\"name\": \"Alice Jackson\", \"age\": 24}\n    ]\n    return flask.jsonify(users)", "category": "Python"}, {"instruction": "Suggest a way to create a linked list in python.", "input": "", "output": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def append(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n\n        current = self.head\n        while current.next:\n            current = current.next\n\n        current.next = new_node", "category": "Python"}, {"instruction": "Create a function to generate Fibonacci numbers less than 100.", "input": "", "output": "def generateFibonacci(num):\n    a = 0\n    b = 1\n    fib_sequence = []\n    while a < num:\n        fib_sequence.append(a)\n        a, b = b, a + b\n    return fib_sequence", "category": "Python"}, {"instruction": "Create a function to check whether a given value is in an array.", "input": "arr = [1,2,3,4]\nx = 2", "output": "def is_value_in_arr(arr, x):\n    if x in arr:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Create a class in Python that implements an algorithm for sorting a list of numbers.", "input": "list = [3, 2, 5, 1, 4]", "output": "class SortNum():\n    def selection_sort(self, list):\n        for i in range(len(list)):\n            min_idx = i\n            for j in range(i + 1, len(list)):\n                if list[min_idx] > list[j]:\n                    min_idx = j\n            list[i], list[min_idx] = list[min_idx], list[i]\n        return list", "category": "Python"}, {"instruction": "Given a list of phone numbers, write a code to find the one with the highest digits.", "input": "phone_numbers = [\"+440123456789\", \"+45987654321\", \"+441234567890\"]", "output": "highest = 0\nhighest_phone = None\n\nfor number in phone_numbers:\n    number_digits = ''.join(filter(str.isdigit, number))\n    if int(number_digits) > highest:\n        highest_phone = number\n        highest = int(number_digits)\n\nprint(f\"The phone number with highest digits is {highest_phone}.\")", "category": "Python"}, {"instruction": "Write a web scraper using Python", "input": "", "output": "import requests\nfrom bs4 import BeautifulSoup\n \n# Function to scrape for the specified HTML elements\ndef scrape(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.content, 'html.parser')\n\n    # Use the .find, .find_all, .select and .select_one methods to scrape website\n    titles = soup.find_all(\"title\")\n    content = soup.find_all(\"p\")\n    headings = soup.find_all(\"h1\")\n    links = soup.find_all(\"a\")\n \n    # Extract text from each element and store in variables\n    title = titles[0].text\n    content_p = [p.text for p in content]\n    headings_h1 = [h1.text for h1 in headings]\n    link_urls = [a.get(\"href\") for a in links]\n \n    # Print out each element\n    print(title)\n    print(\"\\n\")\n    print(\"Content paragraphs:\")\n    for paragraph in content_p:\n        print(paragraph)\n    print(\"\\n\")\n    print(\"Headings:\")\n    for heading in headings_h1:\n        print(heading)\n    print(\"\\n\")\n    print(\"Links and URLs:\")\n    for link in link_urls:\n        print(link)\n\n# Scrape the website below\nscrape('https://en.wikipedia.org/wiki/Python_(programming_language)')", "category": "Python"}, {"instruction": "Write an algorithm to calculate the maximum subarray sum", "input": "list_of_numbers = [-2, 3, 1, -4]", "output": "def max_subarray_sum(list_of_numbers): \n \n    max_so_far = 0\n    max_ending_here = 0\n \n    for i in range(0,len(list_of_numbers)): \n        max_ending_here = max_ending_here + list_of_numbers[i] \n        if (max_ending_here < 0): \n            max_ending_here = 0\n  \n        elif (max_so_far < max_ending_here): \n            max_so_far = max_ending_here \n              \n    return max_so_far", "category": "Python"}, {"instruction": "Encrypt the following string using a substitution cipher", "input": "thisisasupersecurestring", "output": "dnklkfaxvgpsvpytjimnzt", "category": "Python"}, {"instruction": "Write a function in Python that takes in a list and returns the second largest element", "input": "list_of_numbers = [5, 10, 15, 20]", "output": "def second_largest(list_of_numbers):\n    max_num = max(list_of_numbers)\n    sec_max_num = None\n    for num in list_of_numbers:\n        if num != max_num and (sec_max_num is None or sec_max_num < num):\n            sec_max_num = num\n    return sec_max_num", "category": "Python"}, {"instruction": "Create a GPT-2 model to generate text given a seed phrase.", "input": "", "output": "from transformers import GPT2Tokenizer, GPT2LMHeadModel\n \ntokenizer = GPT2Tokenizer.from_pretrained('gpt2')\nmodel = GPT2LMHeadModel.from_pretrained('gpt2')\n \ndef generate_text(seed_phrase):\n    input_ids = torch.tensor(tokenizer.encode(seed_phrase)).unsqueeze(0)\n    output_ids = model.generate(\n        input_ids=input_ids, \n        max_length=100, \n        do_sample=True\n    )\n    return tokenizer.decode(output_ids[0])", "category": "Python"}, {"instruction": "Train a machine learning model to predict the stock price of a company based on historical data.", "input": "Historical data for the company Apple Inc.", "output": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.linear_model import LinearRegression\n\n# Read the dataset\ndataset = pd.read_csv('Apple_Historical_Data.csv')\n\n# Get target and predictors\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n\n# Train the Linear Regression model\nlr_model = LinearRegression()\nlr_model.fit(X, y)\n\n# Predict stock price \nprediction = lr_model.predict(X)", "category": "Python"}, {"instruction": "Print a pyramid of stars that has 5 levels.", "input": "", "output": "for i in range(5):\n    for j in range(i+1):\n        print(\"*\", end=\" \")\n    print(\"\")", "category": "Python"}, {"instruction": "Using the following list of countries and their population, write a program that prints the name and population of the most populous country.", "input": "countries = [{'name': 'India', 'population': 1367030000}, {'name': 'China', 'population': 1406918015}, {'name': 'United States', 'population': 327000000}]", "output": "def find_most_populous_country(countries):\n    max_population = 0\n    most_populous_country = None\n    for country in countries:\n        if country['population'] > max_population:\n            max_population = country['population']\n            most_populous_country = country\n    return f'The most populous country is {most_populous_country[\"name\"]} with a population of {most_populous_country[\"population\"]}'\n\nprint(find_most_populous_country(countries)) # Output: The most populous country is China with a population of 1406918015", "category": "Python"}, {"instruction": "Given two strings, find out if one is a permutation of the other.", "input": "string1 = \"cat\"\nstring2 = \"act\"", "output": "def check_permutation(string1, string2):\n    if len(string1) != len(string2):\n        # The strings can't be permutations if they are different lengths\n        return False\n    \n    # Convert the strings to lists\n    list1 = list(string1)\n    list2 = list(string2)\n    \n    # Sort the lists to make comparison easier\n    list1.sort()\n    list2.sort()\n    \n    # Compare the elements in the sorted lists\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    \n    return True\n\n# Example\nprint(check_permutation(\"cat\", \"act\")) # Output: True", "category": "Python"}, {"instruction": "Identify a code snippet from the following four options.", "input": "def calculate_sum(numbers):\n    result = 0\n    for num in numbers:\n        result += num\n    return result\n\nfor option in ['A', 'B', 'C', 'D']:\n    print(option)", "output": "A is not a valid code snippet.\n\nB is not a valid code snippet.\n\nC is not a valid code snippet.\n\nD is not a valid code snippet.\n\nThe correct code snippet is:\n\ndef calculate_sum(numbers):\n    result = 0\n    for num in numbers:\n        result += num\n    return result", "category": "Python"}, {"instruction": "Create a for loop to iterate through a given list and print the list elements.", "input": "list_items = [2, 3, 4, 5, 6, 7, 8]", "output": "\"\"\"\nCreate a for loop to iterate through a given list and print the list elements\n\"\"\"\n\nlist_items = [2, 3, 4, 5, 6, 7, 8]\n\nfor item in list_items:\n    print(item)", "category": "Python"}, {"instruction": "Print only the odd numbers from the given list.", "input": "list_items = [2, 3, 4, 5, 6, 7, 8]", "output": "\"\"\"\nPrint only the odd numbers from the given list\n\"\"\"\n\nlist_items = [2, 3, 4, 5, 6, 7, 8]\n\nfor item in list_items:\n    if item % 2 != 0:\n        print(item)", "category": "Python"}, {"instruction": "Write a code that prints each word in a given string on a separate line.", "input": "", "output": "\"\"\"\nWrite a code that prints each word in a given string on a separate line\n\"\"\"\n\ndef print_words(string):\n    words = string.split() \n    for word in words:\n        print(word)\n\nif __name__ == '__main__':\n    string = \"This is a coding challenge\"\n    print_words(string)", "category": "Python"}, {"instruction": "Given a Dataframe, select the two columns as specified and store into a new separate Dataframe.", "input": "import pandas as pd \n  \ndata = {'Name':['Tom', 'nick', 'krish', 'jack'], \n        'Age':[20, 21, 19, 18] \n       } \n\ndf = pd.DataFrame(data)  \n\ncols = ['Name', 'Age']", "output": "import pandas as pd \n  \ndata = {'Name':['Tom', 'nick', 'krish', 'jack'], \n        'Age':[20, 21, 19, 18] \n       } \n\ndf = pd.DataFrame(data)  \n\ncols = ['Name', 'Age']\n\n# Creating new Dataframe  \ndf_new = df[cols] \n\nprint(df_new)", "category": "Python"}, {"instruction": "How can you optimized the following program's runtime?", "input": "def my_function(my_list):\n    output = []\n    for i in range(len(my_list)):\n        output.append(my_list[i] * 2)\n    return output", "output": "def my_function(my_list):\n    output = []\n    for i in range(0, len(my_list), 2):\n        output.append(my_list[i] * 2)\n    return output\nBy looping over the list in steps of two, the function will only have to go through half of the elements, thus optimizing the runtime.", "category": "Python"}, {"instruction": "Create a function in Python that takes a list and returns the first two elements that adds up to 0.", "input": "[1, 5, 2, -7, 3]", "output": "def zero_sum_pair(list):\n    # loop through the list \n    for i in range(len(list)): \n        for j in range(i + 1, len(list)): \n            if list[i] + list[j] == 0: \n                return [list[i], list[j]] \n    return None", "category": "Python"}, {"instruction": "Code an algorithm to find the closest pair of elements in a given array with respect to a given target number.", "input": "arr = [10, 22, 28, 29, 30, 40], target = 44", "output": "def closest_pair(arr, target): \n    min_difference = 999999\n    min_pair = (-1, -1)\n      \n    # Iterate through all elements \n    for i in range(len(arr)): \n          \n        # Loop through rest of elements \n        for j in range(i + 1, len(arr)): \n            diff = abs(arr[i] + arr[j] - target) \n          \n            # Check for maximum difference \n            if diff < min_difference: \n                min_difference = diff \n                min_pair = (i, j) \n      \n    return min_pair", "category": "Python"}, {"instruction": "Given an array of integers, find the maximum possible sum of a subarray within the array.", "input": "", "output": "def maxSubArraySum(arr):\n    maxsum = arr[0] \n    for i in range(len(arr)):\n        newSum = 0\n        for j in range(1, len(arr)):\n            newSum += arr[j]\n            if(newSum > maxsum):\n                maxsum = newSum\n    return maxsum", "category": "Python"}, {"instruction": "Find the sum of two integers without using + or - signs.", "input": "a = 7\nb = 5", "output": "def add(a, b): \n    # Iterate till there is no carry  \n    while (b != 0): \n          \n        # Carry now contains common  \n        # set bits of x and y \n        carry = a & b \n  \n        # Sum of bits of x and y where at  \n        # least one of the bits is not set \n        a = a ^ b \n  \n        # Carry is shifted by one so that  \n        # adding it to x gives the required sum \n        b = carry << 1\n          \n    return a", "category": "Python"}, {"instruction": "Generate a code to implement a binary search in an array with upto 1 million elements.", "input": "", "output": "def binary_search(arr, x): \n    l = 0\n    r = len(arr) - 1\n\n    while l <= r: \n        mid = l + (r - l) // 2\n        if arr[mid] == x: \n            return mid \n        elif arr[mid] < x: \n            l = mid + 1\n        else: \n            r = mid - 1\n  \n    return -1", "category": "Python"}, {"instruction": "Sum the numbers in the following array and print the result.", "input": "array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "total = 0\nfor row in array:\n    for element in row:\n        total += element\nprint(total)", "category": "Python"}, {"instruction": "Name a function in Python which can be used to convert a list to a dictionary.", "input": "", "output": "The function in Python which can be used to convert a list to a dictionary is the dict() function. This function takes in an iterable such as a list as an argument and returns a dictionary with the elements of the iterable as the keys and their index as the values.", "category": "Python"}, {"instruction": "Return the index of the first occurrence of an element in the given array.", "input": "arr = [2, 3, 3, 1, 5, 2]", "output": "def first_occurrence(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return i\n    return -1", "category": "Python"}, {"instruction": "What should I add in this function to generate a random number?", "input": "def generate_random():\n    # Your code here", "output": "import random\ndef generate_random():\n    return random.randint(0,100)", "category": "Python"}, {"instruction": "Create a function to generate random numbers from 0-99.", "input": "", "output": "import random\n\ndef random_number():\n    return random.randint(0,99)", "category": "Python"}, {"instruction": "What is the difference between a string in Python and a list?", "input": "", "output": "In Python, strings are immutable which means they can not be changed once created. On the other hand, a list is mutable, meaning the elements can be altered after the list is created. Additionally, strings are sequences of characters, whereas lists are sequences of any type of data.", "category": "Python"}, {"instruction": "Create a list in Python that contains the first 10 multiples of 3.", "input": "", "output": "multiples_list = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]", "category": "Python"}, {"instruction": "Write a Python program to format the following list of IP addresses.", "input": "ip_addresses = [\"192.168.1.1\", \"255.255.255.255\",\"8.8.8.8\"]", "output": "def format_IP_addresses(ip_addresses):\n    return [str(IPAddress(ip)) for ip in ip_addresses]", "category": "Python"}, {"instruction": "Generate a list of random alphanumeric strings of length 25.", "input": "", "output": "import random\nimport string\n\ndef random_strings_list(length):\n    alphanumeric_chars = string.ascii_letters + string.digits\n    strings_list = []\n    for _ in range(length):\n        random_string = ''.join(random.choices(alphanumeric_chars, k=25))\n        strings_list.append(random_string)\n    return strings_list", "category": "Python"}, {"instruction": "Write a Python program to compare two dictionaries by key.", "input": "", "output": "def compare_dicts_by_key(dic1, dic2):\n    if len(dic1) != len(dic2):\n        return False\n    for key in dic1:\n        if key not in dic2 or dic1[key] != dic2[key]:\n            return False\n    return True", "category": "Python"}, {"instruction": "Define a function in Python that calculates the sum of the sum of the elements of a nested list.", "input": "", "output": "def nestedListSum(nested_list):\n    total = 0\n    for sub_list in nested_list:\n        total += sum(sub_list)\n    return total", "category": "Python"}, {"instruction": "Write a Python program to implement Find-Max algorithm.", "input": "arr = [10, 7, 8, 11, 15]", "output": "def FindMax(arr):\n    curr_max = arr[0]\n    curr_index = 0\n    for i in range(len(arr)):\n        if arr[i] > curr_max:\n            curr_max = arr[i]\n            curr_index = i\n    return curr_max, curr_index\n\nif __name__ == \"__main__\":\n    arr = [10, 7, 8, 11, 15]\n    curr_max, curr_index = FindMax(arr)\n    print(\"Max element:\", curr_max)\n    print(\"Index of max element:\", curr_index)", "category": "Python"}, {"instruction": "Write a function to check whether a linked list contains a given value.", "input": "", "output": "def contains(value, head):\n    current_node = head\n    while current_node is not None:\n        if current_node.value == value:\n            return True\n        current_node = current_node.next\n    return False", "category": "Python"}, {"instruction": "Create a class in Python that can be used as a context manager.", "input": "", "output": "class myContextManager:\n    def __init__(self, name):\n        self.name = name\n        print(\"Context Manager initialized.\")\n        \n    def __enter__(self):\n        print(\"Entering context.\")\n        return self\n        \n    def __exit__(self, type, value, traceback):\n        print(f\"Exiting context: {self.name}\")", "category": "Python"}, {"instruction": "Define an iterator class in Python.", "input": "", "output": "class myIterator:\n    def __init__(self, data):\n        self.data = data\n        self.index = 0\n        \n    def __iter__(self):\n        return self\n    \n    def __next__(self):\n        if self.index >= len(self.data):\n            raise StopIteration\n        item = self.data[self.index]\n        self.index += 1\n        return item", "category": "Python"}, {"instruction": "Generate code to calculate the average age of a group of people.", "input": "[[\"Person\", \"Age\"],\n[\"Jim\",26],\n[\"John\", 39],\n[\"Tracy\",19]]", "output": "def average_age(people):\n    total_age = 0\n    for p, a in people:\n        total_age += a\n    return total_age/len(people)", "category": "Python"}, {"instruction": "Design a recursanve function in Python that prints a given string in reverse.", "input": "hello", "output": "def print_string_reverse(str):\n    if not str:\n        return\n    else:\n        print_string_reverse(str[1:])\n        print(str[0], end='')", "category": "Python"}, {"instruction": "Find all the prime numbers within a given range.", "input": "2, 20", "output": "def get_primes_in_range(a, b):\n    primes = []\n    for num in range(a, b + 1):\n        if all(num % i != 0 for i in range(2, num)):\n            primes.append(num)\n    return primes", "category": "Python"}, {"instruction": "Generate a five digit random string.", "input": "", "output": "import random\ndef generate_rand_str():\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=5))", "category": "Python"}, {"instruction": "Convert a date in the format \"MM/dd/yyyy\" to a timestamp.", "input": "04/23/2021", "output": "import time\ndef convert_date_to_timestamp(d):\n    return time.mktime(time.strptime(d, \"%m/%d/%Y\"))", "category": "Python"}, {"instruction": "Write a Python program to find all numbers from 1 to the given number n which are divisible by 6.", "input": "", "output": "def findDivisibleBySix(n):\n  result = []\n  for i in range(1, n+1):\n    if i % 6 == 0:\n      result.append(i)\n  return result", "category": "Python"}, {"instruction": "Create a function in Python to break down the number into its digits", "input": "", "output": "def break_down(n):\n    digit_list = [int(x) for x in str(n)]\n    return digit_list", "category": "Python"}, {"instruction": "Design a key-value database with Python for storing course information.", "input": "The database should contain the following fields: Course Name, Course ID, Course Description and Course Instructor.", "output": "import sqlite3\n\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\n# Create table\nc.execute('CREATE TABLE Course (course_name TEXT, course_id TEXT, course_description TEXT, course_instructor TEXT)')\n\n# Save (commit) the changes\nconn.commit()\n\n# Close the connection\nconn.close()", "category": "Python"}, {"instruction": "Generate pseudocode to solve the Fibonacci sequence.", "input": "", "output": "Function Fibonacci(n)\n  Declare f0, f1, fn\n  f0 = 0\n  f1 = 1\n\n  if n = 0\n    fn = f0\n  else if n = 1\n    fn = f1\n  else\n    for i = 2 to n\n      fn = f0 + f1\n      f0 = f1\n      f1 = fn\n    end for\n\n    return fn\nEnd Function", "category": "Python"}, {"instruction": "Construct a class in Python that can calculate the volume of a cube given its side length.", "input": "", "output": "class Cube(object):\n    \n    def __init__(self, side_length):\n        self.side_length = side_length\n    \n    \n    def calculate_volume(self):\n        return self.side_length * self.side_length * self.side_length", "category": "Python"}, {"instruction": "Describe the difference between lists and tuples", "input": "", "output": "The main difference between lists and tuples is that lists are mutable, meaning they can be changed, while tuples are immutable and cannot be changed. Lists are used when the data is expected to change, while tuples are used when the data is expected to stay the same. In addition, a list can contain any type of data, while a tuple can only contain one type of data. Lastly, a list uses square brackets, while a tuple uses parentheses.", "category": "Python"}, {"instruction": "Using Python, write code to check if a list contains duplicates or not.", "input": "list = [10, 20, 30, 40, 50]", "output": "def has_duplicates(list): \n    seen = set() \n    for item in list: \n        if item in seen: \n            return True \n        seen.add(item) \n    return False", "category": "Python"}, {"instruction": "Print the first element that occurs in the list and is divisible by 5.", "input": "list = [2, 3, 5, 10, 15, 30]", "output": "for element in list:\n    if element % 5 == 0:\n        print(element)\n        break", "category": "Python"}, {"instruction": "Construct a class that takes a string and capitalizes the first letter.", "input": "", "output": "class CapitalizedWord:\n    def __init__(self, word):\n        self.word = word\n    \n    def get_capitalized_word(self):\n        return self.word[0].upper() + self.word[1:]", "category": "Python"}, {"instruction": "Write a code to print out a multiplication table of a number in Python.", "input": "", "output": "def print_multiplication_table(num): \n    for i in range(1,11):  \n       print(num,'x',i,'=',num*i)\n\nprint_multiplication_table(5) \n# OUTPUT: 5 x 1 = 5\n        5 x 2 = 10\n        5 x 3 = 15\n        5 x 4 = 20\n        5 x 5 = 25\n        5 x 6 = 30\n        5 x 7 = 35\n        5 x 8 = 40\n        5 x 9 = 45\n        5 x 10 = 50", "category": "Python"}, {"instruction": "How would you design a game of hangman using object-oriented programming?", "input": "", "output": "In designing a game of hangman using object-oriented programming, one could create separate classes for a Hangman game, a player, a puzzle, and a set of words. The Hangman class would be responsible for managing the game overall and for handling the interactions between the player and the puzzle. The player class would store the players name, number of guesses, and score. The puzzle class would manage the state of the puzzle and handle updates when new letters are guessed. Finally, the Words class would handle the management and loading of word data.", "category": "Python"}, {"instruction": "Design a Python program to identify odd numbers in a given range.", "input": "10-20", "output": "# set a range for the numbers\nmin = 10\nmax = 20\n\n# iterate and print odd numbers\nfor num in range(min,max+1): \n    if num % 2 != 0: \n        print(num, end=\" \")", "category": "Python"}, {"instruction": "Implement a function in Python to convert a given sentence into title case.", "input": "This is a sentence.", "output": "def to_title_case(sentence):\n    words = sentence.split()\n    titlecase_words = []\n    for word in words:\n        titlecase_words.append(word.title())\n    return ' '.join(titlecase_words)", "category": "Python"}, {"instruction": "Which of the following is a valid operator in Python?", "input": "", "output": "The following are valid Python operators: '+', '-', '*', '/', '%', '//', '**', '&', '|', '^', '<<', '>>'.", "category": "Python"}, {"instruction": "Edit the following code so that it prints an appropriate error message.", "input": "def divide(num1, num2):\n result = num1 // num2\n return result", "output": "def divide(num1, num2):\n if num2 == 0:\n print('Error: Invalid operation. num2 cannot be zero.')\n else:\n result = num1 // num2\n return result", "category": "Python"}, {"instruction": "Write a code to categorize the given number according to their divisibility by a certain number.", "input": "number = 9\ndivisible_number = 3", "output": "def categorize_number_divisibility(number, divisible_number):\n    if number % divisible_number == 0:\n        return 'divisible'\n    else:\n        return 'not divisible'\n        \nnumber = 9\ndivisible_number = 3\nresult = categorize_number_divisibility(number, divisible_number)\nprint(result)", "category": "Python"}, {"instruction": "Write a code to filter out all the words from a input list of strings, containing the letter 'a'.", "input": "words = ['apple', 'book', 'zebra', 'banana', 'ball']", "output": "def filter_words_with_letter_a(words):\n    filtered_words = []\n    for word in words:\n        if 'a' in word:\n            filtered_words.append(word)\n    return filtered_words\n\nwords = ['apple', 'book', 'zebra', 'banana', 'ball']\nresult = filter_words_with_letter_a(words)\nprint(result)", "category": "Python"}, {"instruction": "Create a function to identify whether a given number is a power of two.", "input": "num = 8", "output": "\"\"\"\nFunction to identify whether a given number is a power of two\n\"\"\"\n\nconst isPowerOfTwo = (num) => {\n  let i = 0\n  while (2 ** i <= num) {\n    if (2 ** i === num) {\n      return true\n    }\n    i++\n  }\n  return false\n}\n\nconsole.log(isPowerOfTwo(num)) // true", "category": "Python"}, {"instruction": "Write a code to find the shortest possible palindrome.", "input": "string = 'race'", "output": "\"\"\"\nFunction to find the shortest possible palindrome\n\"\"\"\n\nconst findShortestPalindrome = (string) => {\n  let reversedString = string.split('').reverse().join('')\n  let newString = string + '#' + reversedString\n  let lps = []\n  let i = 1\n  let j = 0\n  while (i < newString.length) {\n    if (newString[i] === newString[j]) {\n      lps[i] = j + 1\n      i++\n      j++\n    } else {\n      if (j !== 0) {\n        j = lps[j - 1]\n      } else {\n        lps[i] = 0\n        i++\n      }\n    }\n  }\n  return string + reversedString.substring(lps[newString.length - 1])\n}\n\nconsole.log(findShortestPalindrome(string)) // 'ecarace'", "category": "Python"}, {"instruction": "Write a Python code to print the multiplication table upto 10.", "input": "", "output": "for i in range(1, 11): \n    for j in range(1, 11): \n     print(i*j, end=\"  \") \n    print()", "category": "Python"}, {"instruction": "Write a Python program to calculate the sum of all integers up to the given number.", "input": "", "output": "def sum_of_integers(num):\n    total = 0\n    for i in range(1, num + 1):\n        total += i\n    return total", "category": "Python"}, {"instruction": "Add a simple login feature to a given website.", "input": "A given website with HTML and CSS content", "output": "To add a simple login feature, you will need to create a page with a form that will take the username and password input from the user. The form should contain an input field for the username, an input field for the password, and a submit button. The page should also include an action link to a page that will process the login information. This page should use server-side code (such as PHP) to check the login credentials entered against a database, and then either allow or deny login depending on the result of that check. Finally, the login form should also contain a link to a forgotten password page to enable users to reset their passwords.", "category": "Python"}, {"instruction": "Write a Python function to calculate the hypotenuse of a right angled triangle given the length of the two sides.", "input": "side1 = 7\nside2 = 5", "output": "import math\ndef calculate_hypotenuse(side1, side2):\n    hypotenuse = math.sqrt(side1**2 + side2**2)\n    return hypotenuse", "category": "Python"}, {"instruction": "Write a Python program to print the Odd numbers from 1 to 50.", "input": "", "output": "for i in range(1, 51):\n    if i%2 == 1:\n        print(i)", "category": "Python"}, {"instruction": "Write a Python program to output an array with dimensions [N, M] filled with random numbers between 0 and 1", "input": "N = 5\nM = 4", "output": "import numpy as np\nnp.random.seed(0)\nnums=np.random.rand(N,M)\nprint(nums)", "category": "Python"}, {"instruction": "Create a function that takes a number and checks if it is even or odd.", "input": "", "output": "def check_even_odd(num):\n    \"\"\"\n    Takes a number and checks if it is even or odd.\n    \"\"\"\n    if num % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"", "category": "Python"}, {"instruction": "Write a code to construct a new array with the elements reversed.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def reverse_array(arr):\n    \"\"\"\n    Construct a new array with the elements reversed.\n    \"\"\"\n    new_arr = []\n    for i in range(len(arr)-1, -1, -1):\n        new_arr.append(arr[i])\n    return new_arr", "category": "Python"}, {"instruction": "Construct a loop in Python that iterates through each row of a dataframe", "input": "Dataframe: df", "output": "for index, row in df.iterrows(): \n    # do something with each row", "category": "Python"}, {"instruction": "Create a program which takes an array of integers and an integer as input, and returns the index of the integer in the array.", "input": "array = [1, 2, 3, 4];\nnumber = 3;", "output": "def indexof(nums, target): \n    for i in range(len(nums)): \n        if nums[i] == target: \n            return i \n    return -1", "category": "Python"}, {"instruction": "Explain what a Python dictionary is.", "input": "", "output": "\"\"\"\nExplain what a Python dictionary is.\n\"\"\"\n\nA Python dictionary is a collection of key-value pairs. Each key is associated with a single value, and each key is unique. Dictionaries are mutable, meaning that their values can be changed after they are created. Dictionaries are commonly used for storing data in a structured form, as well as for rapidly looking up values associated with a given key. They are also commonly used for storing metadata and other related information.", "category": "Python"}, {"instruction": "Split a string in such a way that all spaces, punctuation, and special characters are removed from the output.", "input": "mystring = 'My,string:is-Awes 0me*!'", "output": "\"\"\"\nSplit a string in such a way that all spaces, punctuation, and special characters are removed from the output.\n\"\"\"\n\ndef split_string(mystring):\n    \"\"\"\n    This function splits the string into words, removing all of the\n    spaces, punctuation, and special characters.\n    \"\"\"\n    # Remove all non-alphanumeric characters\n    mystring = ''.join(c for c in mystring if c.isalnum())\n\n    # Split the string into words\n    words = mystring.split()\n\n    return words\n\nif __name__ == \"__main__\":\n    mystring = 'My,string:is-Awes 0me*!'\n    print(split_string(mystring))", "category": "Python"}, {"instruction": "Implement a function that copies a 2D array.", "input": "array = [[1, 2, 3], [4, 5, 6]]", "output": "\"\"\"\nFunction to copy a 2D array.\n\"\"\"\ndef copy_2d_array(arr):\n    \"\"\"Returns a copy of the given 2D array.\"\"\"\n    copied_arr = []\n    for sublist in arr:\n        copied_arr.append(list(sublist))\n    return copied_arr\n\nif __name__ == \"__main__\":\n    array = [[1, 2, 3], [4, 5, 6]]\n    print(copy_2d_array(array))", "category": "Python"}, {"instruction": "Write a Python function to edit a given list by replacing an existing element with a new value.", "input": "mylist = [\"Apple\", \"Banana\", \"Cherry\"]\nold_value = \"Banana\"\nnew_value = \"Strawberry\"", "output": "def replace_value(mylist, old_value, new_value):\n    if old_value in mylist:\n        mylist[mylist.index(old_value)] = new_value\n    return mylist", "category": "Python"}, {"instruction": "Convert the given JSON data into an Excel spreadsheet.", "input": "{\n  \"products\": [\n    {\n      \"id\": 1,\n      \"name\": \"Apple\",\n      \"price\": 3.50\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Orange\",\n      \"price\": 2.50\n    },\n    {\n      \"id\": 3,\n      \"name\": \"Banana\",\n      \"price\": 1.25\n    }\n  ]\n}", "output": "Using a programming language such as Python, first use the JSON library to decode the JSON data. Then use a library such as Openpyxl or XlsxWriter to write the data from the JSON object into an Excel spreadsheet.", "category": "Python"}, {"instruction": "Construct a for loop in Python for summing up the elements of a given list.", "input": "List of integers: [1, 2, 3, 4, 5]", "output": "total = 0\nfor i in [1, 2, 3, 4, 5]:\n total += i\nprint(total)\n\n# the output will be 15", "category": "Python"}, {"instruction": "Create a Python program to check if all items in a list are unique.", "input": "list_items = [1,2,3,2,3]", "output": "def is_unique(list_items):\n  s = set(list_items)\n  if len(list_items) == len(s):\n    return True\n  else:\n    return False\n\nprint(is_unique(list_items))\n\n# The output will be False", "category": "Python"}, {"instruction": "Create a class that implements a set data structure.", "input": "", "output": "class Set:\n    def __init__(self):\n        self.elements = []\n\n    def add(self, element):\n        if element not in self.elements:\n            self.elements.append(element)\n\n    def remove(self, element):\n        if element in self.elements:\n            self.elements.remove(element)", "category": "Python"}, {"instruction": "Write an algorithm to split a given list into two sublists with equal sums", "input": "[1, 4, 2, 5, 3]", "output": "def find_sublist(lst):\n    total_sum = sum(lst)\n    half = total_sum//2\n    taken = [False]*len(lst)\n    curr_sum = lst[0]\n    taken[0] = True\n    idx = 0\n    flag = False\n    for i in range(1, len(lst)):\n        if curr_sum < half:\n            taken[i] = True\n            curr_sum += lst[i]\n            flag = True\n        else:\n            if not flag:\n                taken[i] = True\n                curr_sum += lst[i]\n                flag = True\n            continue\n    list1 = list2 = []\n\n    for k in range(len(lst)):\n        if taken[k]:\n            list1.append(lst[k])\n        else:\n            list2.append(lst[k])\n    return list1, list2", "category": "Python"}, {"instruction": "Implement a function to implement Bubble Sort.", "input": "", "output": "def bubbleSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [64, 34, 25, 12, 22, 11, 90] \n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "category": "Python"}, {"instruction": "Write a function that takes an array of numbers and prints out all the pairs of numbers whose sum is equal to a given number.", "input": "targetSum = 8 \nnumbers = [1,9,4,3,8]", "output": "def print_pairs_with_sum(numbers, targetSum): \n    for i in range(len(numbers)): \n        for j in range(i + 1, len(numbers)): \n            if (numbers[i] + numbers[j] == targetSum):\n                print (\"(\", numbers[i], \",\", numbers[j], \")\")", "category": "Python"}, {"instruction": "What is the difference between len() and index() methods in Python?", "input": "", "output": "The len() method returns the length of a string, while the index() method returns the index of a substring or character in the string. The len() method returns the number of characters or elements in the string, while the index() method returns the starting index of the substring in the string.", "category": "Python"}, {"instruction": "What is the data type of a variable that can only contain boolean values in Python?", "input": "", "output": "The data type of a variable that can only contain boolean values in Python is a bool.", "category": "Python"}, {"instruction": "Create a Python function 'findPattern' with two parameters which takes two strings and returns 1 if the second string is a subsequence of the first string, otherwise 0.", "input": "", "output": "def findPattern(str1, str2): \n \n    ind = 0\n    for ch in str2: \n        if ch not in str1[ind:]: \n            return 0\n  \n        ind = str1.index(ch, ind) + 1\n \n    return 1\n  \n# Driver code \nif findPattern(\"timetopractice\", \"top\"): \n    print(\"Subsequence Found\") \nelse: \n    print(\"Subsequence Not Found\")", "category": "Python"}, {"instruction": "Create a Python function that takes two arguments: a list and an integer. The function should add the given integer to each element of the list and return the new list.", "input": "list = [2, 3, 5]\ninteger = 4", "output": "def addToList(list, int):\n    new_list = []\n    for l in list:\n        new_list.append(l + int)\n    return new_list\n\nresult = addToList(list, integer)\nprint(result) # [6, 7, 9]", "category": "Python"}, {"instruction": "Using the 'arrays' library in Python, generate a random array of 10 numbers.", "input": "", "output": "import numpy as np\n\nrandom_array = np.random.random_integers(1,10,10)\nprint(random_array)", "category": "Python"}, {"instruction": "Create a class in python with 4 functions.", "input": "", "output": "class MyClass:\n  def __init__(self):\n    pass\n\n  def function1(self):\n    pass\n\n  def function2(self):\n    pass\n  \n  def function3(self):\n    pass\n  \n  def function4(self):\n    pass", "category": "Python"}, {"instruction": "Write a Python script to find the area of a triangle with sides 18, 24, and 30.", "input": "", "output": "def triangle_area(a, b, c):\n    '''This function computes the area of a triangle given its side lengths.'''\n    # Calculate semi-perimeter\n    s = (a + b + c) / 2\n    # Calculate the area\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return area\n\nprint(\"The area of the triangle is:\", triangle_area(18, 24, 30))", "category": "Python"}, {"instruction": "Create a program that will take a number from the user and print out whether the number is odd or even.", "input": "", "output": "# Take a number from user \nnum = int(input(\"Enter a number: \")) \n\n# Check whether the number is odd or even \nif num % 2 == 0: \n    print(\"Number is even.\")\nelse:\n    print(\"Number is odd.\")", "category": "Python"}, {"instruction": "Create a program that prompts the user to enter two strings. The program will compare the two strings and, if the two strings are the same, print out \"Equal strings\" otherwise, print out \u201cUnequal strings\u201d", "input": "", "output": "# Take two strings from user \nstr1 = input('Enter first string: ') \nstr2 = input('Enter second string: ') \n\n# Compare strings \nif str1 == str2: \n    print (\"Equal strings\") \nelse : \n    print (\"Unequal strings\")", "category": "Python"}, {"instruction": "From the provided input, create a program name \"shopping.py\" that prompts the user to enter a price and prints out the amount of discount the user gets. The discount rate is 10%.", "input": "", "output": "# shopping.py\nprice = float(input(\"Enter the price: \")) \ndiscount = price * 0.10 \nprint(\"Discount:\", discount)", "category": "Python"}, {"instruction": "Write a Python program to convert Fahrenheit to Celsius for a temperature of 56.4F.", "input": "", "output": "F = 56.4\nC = (F - 32) * 5/9\nprint(\"Fahrenheit to Celsius:\", C)", "category": "Python"}, {"instruction": "Create a function to return the minimum value in a given array and output it.", "input": "[6, 3, 9, 5, 8, -2, 10]", "output": "def minimum_value(A):\n    min=-float('inf')\n    for a in A: \n        if a < min:\n            min = a\n    return min\n\nprint(minimum_value([6, 3, 9, 5, 8, -2, 10]))\n\n# Output: -2", "category": "Python"}, {"instruction": "Produce a program that takes in two strings and check if they are anagrams.", "input": "silent and listen", "output": "def is_anagram(s1, s2):\n    if sorted(s1) == sorted(s2):\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Develop a program that takes in two numbers and returns the bigger one.", "input": "2 and 3", "output": "def max_num(a,b):\n    if a > b:\n        return a\n    else:\n        return b", "category": "Python"}, {"instruction": "Create an algorithm that takes in an array of strings and returns a new array containing only the strings that start with the letter \"a\".", "input": "[apple, banana, alabama, arkansas]", "output": "def start_with_a(arr):\n    new_arr = []\n    for s in arr:\n        if s[0] == 'a':\n            new_arr.append(s)\n    return new_arr", "category": "Python"}, {"instruction": "Create an algorithm that takes in two sorted arrays and merges them together.", "input": "arr1 = [1,3,5,7,9]\narr2 = [2,4,6,8,10]", "output": "def merge_arrays(arr1, arr2):\n    merged = []\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n    return merged", "category": "Python"}, {"instruction": "Write a function that takes in an array of integers and returns a string with each number in reverse order.", "input": "[1,2,3,4,5]", "output": "def reverse_string(arr):\n    res = ''\n    for num in arr:\n        res = str(num) + res\n    return res", "category": "Python"}, {"instruction": "Sort an array of integers in ascending order by implementing a Bubble Sort algorithm.", "input": "unsorted_list = [8, 5, 3, 1, 9, 6, 0, 7, 4, 2, 5]", "output": "def bubble_sort(nums): \n  # Traverse through all array elements \n  for i in range(len(nums)): \n    # Last i elements are already in place \n    for j in range(0, len(nums)-i-1): \n      # traverse the array from 0 to n-i-1 \n      # Swap if the element found is greater \n      # than the next element \n      if nums[j] > nums[j+1] : \n        nums[j], nums[j+1] = nums[j+1], nums[j]\n\n# Print the sorted array \nif __name__ == '__main__': \n    bubble_sort(unsorted_list) \n    print (\"Sorted array is:\") \n    print(unsorted_list)", "category": "Python"}, {"instruction": "How to extract numbers from a given string in Python?", "input": "", "output": "Using the regular expression library re in Python, you can extract numbers from a given string. For example,\n\nimport re\n\nstring = \"My age is 22 and my lucky number is 7\"\n\nmatches = re.findall(r'\\d+', string)\n# matches will be [22, 7]", "category": "Python"}, {"instruction": "Rewrite this function in Python to take advantage of list comprehensions.", "input": "def double_list(original_list):\n    doubled_list = []\n    for item in original_list:\n        doubled_list.append(item * 2)\n    return doubled_list", "output": "def double_list(original_list):\n    return [item * 2 for item in original_list]", "category": "Python"}, {"instruction": "Find the shortest path between two nodes using Dijkstra's algorithm", "input": "A graph with 5 nodes and 7 edges", "output": "import networkx as nx\n\nG = nx.DiGraph()\n\nG.add_nodes_from([1,2,3,4,5])\n\nG.add_edge(1,4,weight=4)\nG.add_edge(1,2,weight=7)\nG.add_edge(1,3,weight=2)\nG.add_edge(2,3,weight=6)\nG.add_edge(2,5,weight=5)\nG.add_edge(3,4,weight=3)\nG.add_edge(3,5,weight=2)\nG.add_edge(4,5,weight=2)\n\nstart = 1\nend = 5\n\nshortest_path = nx.dijkstra_path(G, start, end, weight='weight')\n\nprint('Shortest path from node 1 to node 5 is:', shortest_path)", "category": "Python"}, {"instruction": "Edit this Python program so that it logs a message whenever an error occurs.", "input": "def divide_nums(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError as e:\n        print('Error:', e)", "output": "def divide_nums(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError as e:\n        print('Error:', e)\n        logging.error('An error occurred during division.')", "category": "Python"}, {"instruction": "Create a script in Python to convert fahrenheit temperatures to celsius.", "input": "", "output": "def fahren_to_celsius(fahren):\n    celsius = (fahren - 32) * (5 / 9)\n    return celsius\n\nprint(fahren_to_celsius(50)) \n\n# Output: 10.0", "category": "Python"}, {"instruction": "Create a 3D array of size 3 x 3 x 3 which contains all elements equal to 0.", "input": "", "output": "import numpy as np\narr = np.zeros((3, 3, 3))\nprint(arr)", "category": "Python"}, {"instruction": "Construct an artificial neural network of 3-layers to classify handwritten digits.", "input": "", "output": "import numpy as np\nfrom tensorflow.keras.utils import to_categorical\n\n# Create a 3-layer neural network\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(10, input_dim=784, activation='relu'))\nmodel.add(tf.keras.layers.Dense(50, activation='relu'))\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))\n\n# Compile the model\nmodel.compile(\n\toptimizer='adam',\n\tloss='categorical_crossentropy',\n\tmetrics=['accuracy']\n)\n\n# Train the model\nmodel.fit(x_train, y_train, epochs=30, batch_size=128)", "category": "Python"}, {"instruction": "Write a Python algorithm to search a list of numbers for the index of the given element.", "input": "nums = [5,7,11,23,44,30]\nx = 11", "output": "def search(nums, x):\n    for i, n in enumerate(nums):\n        if n == x:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Make the following Python function for generating powerset.", "input": "", "output": "def powerset(s):\n    result = [[]]\n    for x in s:\n        result.extend([y + [x] for y in result])\n    return result", "category": "Python"}, {"instruction": "Suggest a completion for the following Python code to find the depth of a given binary tree.", "input": "class Node:\n    def __init__(self, data):\n        self.left = None\n        self.right = None\n        self.data = data\n\ndef maxDepth(node):", "output": "class Node:\n    def __init__(self, data):\n        self.left = None\n        self.right = None\n        self.data = data\n\ndef maxDepth(node):\n    if node is None:\n        return 0\n    else:\n        leftDepth = maxDepth(node.left)\n        rightDepth = maxDepth(node.right)\n\n        if leftDepth > rightDepth: \n            return leftDepth+1\n        else: \n            return rightDepth+1", "category": "Python"}, {"instruction": "Show an example of using the Python module, os.", "input": "", "output": "import os\n\ndirectory = os.getcwd() \nprint(\"The current working directory is\", directory)\n\nfiles = os.listdir(directory) \nprint(\"The files in the current directory are\", files)\n\nfor file in files:\n    if file.endswith(\".py\"):\n        print(\"The Python script\", file, \"is in the current directory\")", "category": "Python"}, {"instruction": "Given a sorted array of size n, create a program to return the kth smallest element.", "input": "", "output": "def findKthSmallestElement(arr, n, k): \n  \n    # To return kth smallest element in \n    # the given array \n    return arr[k-1]", "category": "Python"}, {"instruction": "Create a Django model class to represent a User.", "input": "", "output": "from django.db import models\n\nclass User(models.Model):\n    first_name = models.CharField(max_length=50)\n    last_name = models.CharField(max_length=50)\n    email = models.EmailField(unique=True)\n    birth_date = models.DateField()\n    is_active = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)", "category": "Python"}, {"instruction": "Compare the performance of quicksort, mergesort and heapsort on an unsorted array of size 1000.", "input": "", "output": "Quick sort is the fastest amongst quicksort, mergesort, and heapsort. It is an efficient, widely-used sorting algorithm. Quicksort is typically faster than mergesort and heapsort for sorting an unsorted array of size 1000. The worst-case performance of quicksort is O(n^2) and the average-case performance is O(nlogn).\n\nMergesort is an efficient sorting algorithm with worst-case performance of O(nlogn) and the average-case performance of O(nlogn). It is a stable sort, meaning that the relative order of equal sort items is preserved. Mergesort is slower than quicksort for sorting an unsorted array of size 1000 because it has a higher memory footprint due to the need to split and merge the input array.\n\nHeapsort is an efficient sorting algorithm with worst-case performance of O(nlogn) and the average-case performance of O(nlogn) as well. Like quicksort, it is an in-place algorithm, meaning that it does not require additional space for the result. Heapsort is slower than quicksort and mergesort for sorting an unsorted array of size 1000 because it requires more complex data structures and operations to build the heap and find the max or min elements.", "category": "Python"}, {"instruction": "Write a function to check if a string contains either 'a' or 'e' or 'i' or 'o' or 'u'.", "input": "", "output": "def contains_vowel(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in string.lower():\n        if char in vowels:\n            return True\n    return False", "category": "Python"}, {"instruction": "Given a list of numbers, write a function that returns the index of minimum element.", "input": "[22, 11, 13, 66]", "output": "def min_index(list):\n    min_val = list[0]\n    min_index = 0\n    for i, val in enumerate(list):\n        if val < min_val:\n            min_val = val\n            min_index = i\n    return min_index", "category": "Python"}, {"instruction": "Create a function to check an array of strings and return a list of strings that have length of 5.", "input": "[\"Ironman\", \"Spiderman\", \"Hulk\", \"Captain America\", \"Thor\"]", "output": "def filter_5_length(arr):\n    res = []\n    for string in arr:\n        if len(string) == 5:\n            res.append(string)\n    return res", "category": "Python"}, {"instruction": "Write a function that takes an array of integers and returns an array of the same size with each element equal to the product of all the elements in the original array except itself.", "input": "[1, 2, 3]", "output": "def product_array(arr):\n    res = []\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    for i in range(len(arr)):\n        res.append(int(product/arr[i]))\n    return res", "category": "Python"}, {"instruction": "Count the number of times the letter \"o\" appears in this string.", "input": "\"Hello, World!\"", "output": "string = \"Hello, World!\"\ncount = 0\nfor char in string: \n    if char == 'o': \n        count += 1\nprint(count)", "category": "Python"}, {"instruction": "Generate a function in Python to print all prime numbers in a given range.", "input": "", "output": "def print_prime_numbers(start, end): \n      \n    for i in range(start, end + 1): \n        if is_prime_number(i): \n            print(i, end = \" \")\n  \ndef is_prime_number(num): \n      \n    if num > 1: \n          \n        # Iterate from 2 to n / 2  \n        for i in range(2, num//2):  \n            if (num % i) == 0: \n                return False\n        return True\n    else: \n        return False", "category": "Python"}, {"instruction": "Create an algorithm for finding the factorial of a number using a for loop.", "input": "", "output": "def factorial(num):\n    final_factorial = 1\n    for i in range(1, num + 1):\n        final_factorial *= i\n    return final_factorial", "category": "Python"}, {"instruction": "Remove the element at a given index from an array.", "input": "arr = [4, 10, 15, 23, 0]\nindex = 3", "output": "def removeIndex(arr, index):   \n    if index < 0 or index >= len(arr): \n        return arr \n    \n    arr.pop(index)  \n    return arr\n\n# driver code\narr = [4, 10, 15, 23, 0]\nindex = 3\nprint(\"Array after removing element at index 3 is:\", removeIndex(arr, index))", "category": "Python"}, {"instruction": "Write a code to replace a substring inside a string with another substring.", "input": "string = \"I am coding in python\"\nsubstring1 = \"coding\"\nsubstring2 = \"hacking\"", "output": "def replaceSubstring(string, substring1, substring2): \n    string = string.replace(substring1, substring2) \n    return string  \n  \n# Driver code\nstring = \"I am coding in python\"\nsubstring1 = \"coding\"\nsubstring2 = \"hacking\"\nprint(\"String after replacement is:\", replaceSubstring(string, substring1, substring2))", "category": "Python"}, {"instruction": "Compare two strings and output true if they are an anagram.", "input": "s1 = \"listen\"\ns2 = \"silent\"", "output": "def isAnagram(s1, s2): \n  \n    # Get lengths of both strings \n    n1 = len(s1) \n    n2 = len(s2) \n  \n    # If lengths of both strings are not same, then they are not anagram \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    s1 = sorted(s1) \n    s2 = sorted(s2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if s1[i] != s2[i]: \n            return False\n  \n    return True\n\n# driver code\ns1 = \"listen\"\ns2 = \"silent\"\nprint(\"The two strings are anagrams:\", isAnagram(s1, s2))", "category": "Python"}, {"instruction": "Write a function to search for an input string in a given paragraph.", "input": "Paragraph:The quick brown fox jumps over the lazy dog\nString: brown", "output": "def searchString(para, string):\n    for word in para.split(): \n        if word == string:\n            return True \n    return False", "category": "Python"}, {"instruction": "Using data from the Wikipedia API, write a Python program to list the population of India.", "input": "", "output": "import json\nimport requests\n\nurl = 'https://en.wikipedia.org/w/api.php?action=query&format=json&prop=revisions&titles=India'\nresponse = requests.get(url)\ndata = json.loads(response.text)\npopulation = data['query']['pages']['571045']['revisions'][0]['*'].split('\\n')[3].split('=')[1].strip().split('|')[0]\nprint('The population of India is', population)", "category": "Python"}, {"instruction": "Build a classifier in Python using the Scikit-learn library.", "input": "", "output": "# Load the libraries\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\n\n# Split the data\nX = data.iloc[:, :-1]\ny = data.iloc[:, -1]\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, random_state=42)\n\n# Train the model\nsvm_model = SVC(gamma='auto')\nsvm_model.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_predictions = svm_model.predict(X_test)\n\n# Evaluate Model Performance\nprint(\"Accuracy:\", metrics.accuracy_score(y_test, y_predictions))", "category": "Python"}, {"instruction": "Rock-paper-scissors is a classic two player game. Create a program to generate all the possible outcomes of individual rounds in Rock Paper Scissors.", "input": "", "output": "def generate_outcomes():\n    outcomes = []\n    for p1 in ['rock', 'paper', 'scissors']:\n        for p2 in ['rock', 'paper', 'scissors']:\n            outcomes.append((p1, p2))\n    return outcomes", "category": "Python"}, {"instruction": "Given a list of numbers, return the list with each number multiplied by two.", "input": "[2, 4, 6, 8]", "output": "def double_list(nums):\n    return [num * 2 for num in nums]", "category": "Python"}, {"instruction": "Construct a program to shuffle the content of a list.", "input": "", "output": "import random\ndef shuffle_list(lst):\n    for i in range(len(lst)-1, 0, -1):\n        j = random.randint(0, i)\n        lst[i], lst[j] = lst[j], lst[i]\n    return lst", "category": "Python"}, {"instruction": "Create a program that implements a queue.", "input": "", "output": "class Queue:\n    def __init__(self):\n        self.queue = []\n \n    def enqueue(self, data):\n        self.queue.append(data) \n \n    def dequeue(self):\n        return self.queue.pop(0)\n \n    def is_empty(self):\n        return len(self.queue) == 0", "category": "Python"}, {"instruction": "Generate a function in Python that takes a number and a list as input and finds the number of occurrences of the number in the list.", "input": "", "output": "def count_occurrence(number, input_list):\n    return input_list.count(number)", "category": "Python"}, {"instruction": "Construct a Python class to model a circle.", "input": "", "output": "class Circle: \n    def __init__(self, radius, color): \n        self.radius = radius \n        self.color = color \n  \n    def getArea(self): \n        return 3.14 * self.radius * self.radius \n  \n    def getCircumference(self): \n        return 2 * 3.14 * self.radius", "category": "Python"}, {"instruction": "Create an algorithm to compress a string by removing consecutive duplicate characters.", "input": "string = \"aabcccccaaa\"", "output": "def compress_string(string):\n    current_char = string[0]\n    compressed_string = current_char\n    count = 1\n\n    for char in string[1:]:\n        if char == current_char: \n            count += 1\n        else: \n            compressed_string = compressed_string + str(count) + char\n            current_char = char \n            count = 1\n    compressed_string = compressed_string + str(count)\n    return compressed_string\n\nprint(compress_string(string))\n\n# Output: a2b1c5a3", "category": "Python"}, {"instruction": "Write a code in Python to output all the combinations of two given lists.", "input": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]", "output": "combinations = []\nfor i in list1:\n    for j in list2:\n        combinations.append([i, j])\n\nprint(combinations)\n\n# Output: [[1, 4], [1, 5], [1, 6], [2, 4], [2, 5], [2, 6], [3, 4], [3, 5], [3, 6]]", "category": "Python"}, {"instruction": "Generate an array of increasing numbers beginning from 1 of length n.", "input": "n=5", "output": "def generate_array(n):\n    \"\"\"\n    Generate an array of increasing numbers beginning from 1 of length n\n    \"\"\"\n    return [i for i in range(1, n+1)]\n\n\nprint(generate_array(5))", "category": "Python"}, {"instruction": "Write a code to search a list of integers and print the index of the first matched item.", "input": "nums=[4, 7, 1, 2, 5], target=7", "output": "def search_list(nums, target):\n    \"\"\"\n    Function to search a list of integers and print the index of the first matched item \n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1\n\nprint(search_list([4, 7, 1, 2, 5], 7))", "category": "Python"}, {"instruction": "Generate a random string with the specified length n.", "input": "n=10", "output": "import string\nimport random\n\ndef generate_random_string(n):\n    \"\"\"\n    Generate a random string with the length n \n    \"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=n))\n\nprint(generate_random_string(10))", "category": "Python"}, {"instruction": "Write a Python program to calculate the hypotenuse of a right triangle with base and Height of 8 and 6 respectively.", "input": "", "output": "base = 8\nheight = 6\nhypotenuse = (base**2 + height**2)**0.5\nprint(hypotenuse) // Output: 10.0", "category": "Python"}, {"instruction": "Write a Python function to shuffle (randomly reorder) a list of numbers", "input": "nums = [1, 2, 3, 4, 5]", "output": "def shuffle_nums(nums):\n    from random import shuffle\n    shuffle(nums) \n    return nums", "category": "Python"}, {"instruction": "Given a list of strings and a single character, write a Python function to return the count of strings containing that character.", "input": "strings = [\"Hello\", \"World\", \"Cat\", \"Dog\", \"Elephant\"] \ncharacter = \"e\"", "output": "def count_character_in_strings(strings, character): \n  count = 0\n  for string in strings:\n    if character in string.lower():\n      count += 1\n  return count", "category": "Python"}, {"instruction": "Create an array containing the alphabet in lowercase in Python.", "input": "", "output": "Using the string.ascii_lowercase constant, an array containing the alphabet in lowercase can be created.\n\nExample:\n\nimport string \nalphabet_array = list(string.ascii_lowercase) \nprint(\"Array containing the alphabet in lowercase:\", alphabet_array) \n\n# Output: Array containing the alphabet in lowercase: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']", "category": "Python"}, {"instruction": "Write a function that uses recursion to return the Fibonacci of a given number.", "input": "", "output": "def fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\")\n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2)", "category": "Python"}, {"instruction": "Generate an array of numbers containing only prime numbers between 10 and 50.", "input": "", "output": "def prime_numbers():\n    prime_nums = []\n    for i in range(10, 50):\n        is_prime = True\n        for j in range(2, i):\n            if i%j ==0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_nums.append(i)\n    return prime_nums", "category": "Python"}, {"instruction": "Write an expression in Python to remove all punctuation from a given string.", "input": "string = \"This, is a test string!\"", "output": "import re\n\nstring = re.sub(r'[^\\w\\s]','',string)\n\nprint(string) # Output: This is a test string", "category": "Python"}, {"instruction": "Edit the given function so that it returns the sum of all numbers in the input array.", "input": "def get_sum(arr):\n    return arr[0]", "output": "def get_sum(arr):\n    sum = 0\n    for item in arr:\n        sum += item\n    return sum", "category": "Python"}, {"instruction": "Write a Python program that adds two numbers and multiplies them.", "input": "4, 6", "output": "num1 = 4\nnum2 = 6\n\nresult = (num1 + num2) * num2\n\nprint(result)", "category": "Python"}, {"instruction": "Create a function to perform recursive binary search in a sorted array", "input": "", "output": "#returns the index of the target, if it is found\ndef binary_search(arr,left,right,target):\n    # Check base case \n    if right >= left:\n        mid = left + (right - left) // 2 \n  \n        # If element is present at the middle itself \n        if arr[mid] == target:\n            return mid \n          \n        # If element is smaller than mid, then it  \n        # can only be present in left subarray\n        elif arr[mid] > target:\n            return binary_search(arr, left, mid-1,target)\n       \n        # Else the element can only be present  \n        # in right subarray\n        else:\n            return binary_search(arr, mid + 1, right,target) \n\n    else: \n        # Element is not present in the array \n        return -1", "category": "Python"}, {"instruction": "Generate a code to extract the key-value pairs from a JSON string", "input": "", "output": "def extract_key_value_pairs(json_string):\n    data = json.loads(json_string)\n    \n    key_value_pairs = {}\n    \n    for key,value in data.items():\n        key_value_pairs[key] = value\n        \n    return key_value_pairs", "category": "Python"}, {"instruction": "Create a function to determine if a String contains a valid US phone number", "input": "", "output": "def isValidPhoneNumber(s):\n    # strip all the non-numeric characters\n    nums = ''.join(filter(str.isalnum, s))\n    \n    # ensure it is 10 digits long\n    if len(nums) != 10:\n        return False\n    \n    # ensure the last 7 digits are valid\n    if nums[3:10] in set('2', '3', '4', '5', '6', '7', '8', '9'):\n        return False\n    \n    # ensure first 3 digits are valid\n    area_codes = set('201', '202', '203', '205', '206', '207', '208', '209', \n                     '210', '212', '213', '214', '215', '216', '217', '218',\n                     '219', '224', '225', '226', '228', '229', '231', '234',\n                     '239', '240', '242', '244', '245', '248', '250', '251', \n                     '252', '253', '254', '256', '260', '262', '264', '267', \n                     '268', '269', '270', '276', '281', '284', '289', '301', \n                     '302', '303', '304', '305', '306', '307', '308', '309', \n                     '310', '312', '313', '314', '315', '316', '317', '318',\n                     '319', '320', '321', '323', '330', '331', '334', '336',\n                     '337', '339', '340', '347', '351', '352', '360', '362',\n                     '386', '401', '402', '403', '404', '405', '406', '407',\n                     '408', '409', '410', '412', '413', '414', '415', '417',\n                     '418', '419', '423', '424', '425', '430', '431', '432',\n                     '434', '435', '440', '441', '443', '450', '468', '473',\n                     '478', '479', '480', '484', '501', '502', '503', '504', \n                     '505', '506', '507', '508', '509', '510', '512', '513', \n                     '515', '516', '517', '518', '519', '520', '530', '540', \n                     '541', '551', '557', '559', '561', '562', '563', '564', \n                     '567', '570', '571', '573', '574', '580', '585', '586', \n                     '601', '602', '603', '605', '606', '607', '608', '609', \n                     '610', '612', '614', '615', '616', '617', '618', '619', \n                     '620', '623', '626', '628', '630', '631', '636', '641', \n                     '646', '650', '651', '661', '662', '678', '681', '682', \n                     '701', '702', '703', '704', '705', '706', '707', '708', \n                     '712', '713', '714', '715', '716', '717', '718', '719', \n                     '720', '724', '725', '727', '731', '732', '734', '737', \n                     '740', '754', '757', '758', '760', '762', '763', '765', \n                     '769', '770', '772', '773', '774', '775', '778', '780', \n                     '781', '784', '785', '786', '787', '801', '802', '803', \n                     '804', '805', '806', '807', '808', '809', '810', '812', \n                     '813', '814', '815', '816', '817', '818', '828', '830', \n                     '831', '832', '843', '845', '847', '848', '850', '856', \n                     '857', '858', '859', '860', '862', '863', '864', '865', \n                     '870', '872', '878', '901', '903', '904', '906', '907', \n                     '908', '909', '910', '912', '913', '914', '915', '916', \n                     '917', '918', '919', '920', '925', '927', '928', '931',\n                     '936', '937', '940', '941', '947', '949', '951', '952', \n                     '954', '956', '970', '971', '972', '973', '978', '979', \n                     '980', '984', '985', '989')\n    if nums[:3] not in area_codes:\n        return False\n\n    return True", "category": "Python"}, {"instruction": "Develop a function to replace all consecutive whitespaces in a given string with a single space.", "input": "", "output": "def collapse_whitespace(str):\n    return ' '.join([x for x in str.split(' ') if x != ''])", "category": "Python"}, {"instruction": "Create a 3x4 NumPy array of random integers from 0 to 5.", "input": "", "output": "import numpy as np\narray = np.random.randint(0, 6, size=(3,4))\nprint(array)\n\nOutput:\n[[4 5 4 0]\n [2 1 5 4]\n [3 0 2 0]]", "category": "Python"}, {"instruction": "Read two numbers and output the smallest one.", "input": "7, 4", "output": "def min_num(n1, n2):\n    if n1 < n2:\n        return n1\n    else:\n        return n2\n \nprint(min_num(7, 4))", "category": "Python"}, {"instruction": "Write a function to perform vector addition for two 1D arrays.", "input": "[3, 4], [5, 6]", "output": "def add_vectors(v1, v2):\n    result = []\n    for i in range(len(v1)):\n        result.append(v1[i] + v2[i])\n    return result\n \nprint(add_vectors([3, 4], [5, 6]))", "category": "Python"}, {"instruction": "Explain the algorithm used in linear search.", "input": "", "output": "Linear search is an algorithm for finding a particular value in an array. It works by sequentially going through each item in the array, comparing the desired value with each item until it is either found or the end of the array is reached. If the item is found, it's index in the array is returned, otherwise, -1 is returned indicating the value wasn't found.", "category": "Python"}, {"instruction": "Suggest an algorithm in Python for sorting an array of integers from smallest to largest.", "input": "nums = [3, 7, 5, 6, 1]", "output": "def sortInts(nums): \n    # Traverse through all array elements \n    for i in range(len(nums)): \n  \n        # Last i elements are already in place \n        for j in range(0, len(nums)-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if nums[j] > nums[j+1] : \n                nums[j], nums[j+1] = nums[j+1], nums[j] \n                \n    return nums", "category": "Python"}, {"instruction": "Write a function that generates a unique integer ID given a string input.", "input": "", "output": "def generateId(string):\n    hashValue = hash(string)\n    id = 0\n    while hashValue > 0:\n        id += hashValue % 10\n        hashValue //= 10\n    return id", "category": "Python"}, {"instruction": "You need to rearrange the characters in a given string such that no two same characters are adjacent to each other.", "input": "abccab", "output": "def rearrange(string):\n    seen = set()\n    result = []\n    for char in string:\n        if char not in seen:\n            seen.add(char)\n            result.append(char)\n        else:\n            for ch in string:\n                if ch not in seen:\n                    seen.add(ch)\n                    result.append(ch)\n    return ''.join(result)", "category": "Python"}, {"instruction": "Develop a code to check whether a number is a palindrome.", "input": "Number: 1234321", "output": "\"\"\"\ndef is_palindrome(num):\n    # Initializing variables\n    n = num\n    rev = 0\n    while (n > 0):\n        # Storing the remainder\n        rev = (rev * 10) + n % 10\n\n        # Updating n\n        n //= 10\n\n    # Checking if the reversed number is equal to the given number\n    if (num == rev):\n        return True\n\n    return False\n\n# Function call\nprint(is_palindrome(1234321))\n\"\"\"\n\nOutput: True", "category": "Python"}, {"instruction": "Write a function to check whether a given number can be expressed as the power of some other number", "input": "Number: 8", "output": "\"\"\"\ndef is_power_of(x):\n    # Initializing the counter\n    i = 0\n  \n    # Iterating through possible exponents\n    while (x > 1):\n        if (x % 2 == 0): \n            x /= 2\n        else: \n            return False\n        i += 1\n        \n    return True\n\n# Function call\nprint(is_power_of(8))\n\"\"\"\n\nOutput: True", "category": "Python"}, {"instruction": "How can you check if a string is a substring of another string in Python?", "input": "", "output": "You can check if a string is a substring of another string in Python by using the \"in\" operator. For example, if you want to check if the string \"hello\" is a substring of a variable called \"my_string\", you can do:\n\nif 'hello' in my_string:\n    # do something", "category": "Python"}, {"instruction": "Given two arrays of integers, find the common elements.", "input": "arr1 = [1, 2, 3, 4, 5]; arr2 = [4, 5, 6, 7, 8]", "output": "def common_elements(arr1, arr2):\n    common = []\n    for item in arr1:\n        if item in arr2:\n            common.append(item)\n\n    return common", "category": "Python"}, {"instruction": "Compute the n-th Fibonacci number.", "input": "", "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    \n    if n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Print all powers of 2 less than or equal to n.", "input": "n = 10", "output": "def power_of_2(n): \n    res = []\n    for i in range(n+1):\n        if i & (i-1) == 0:\n            res.append(i)\n        \n    return res", "category": "Python"}, {"instruction": "Output all numbers between 1 to 5 except for 3 using Python.", "input": "", "output": "for x in range(1, 6):\n    if x != 3:\n        print(x)", "category": "Python"}, {"instruction": "Write a code to convert all the letters of a string to lowercase.", "input": "Input string: \"HELLO WORLD\"", "output": "def lowercase_string(input_str):\n    output_str = \"\"\n    \n    for char in input_str:\n        output_str += char.lower()\n    return output_str\n\nif __name__ == '__main__':\n    print(lowercase_string(\"HELLO WORLD\"))", "category": "Python"}, {"instruction": "Implement an algorithm in Python to find the size of a Binary tree.", "input": "", "output": "def size(node): \n    if node is None: \n        return 0\n    else: \n        return (size(node.left) + 1 + size(node.right))", "category": "Python"}, {"instruction": "Write a Python function that prints out a staircase pattern.", "input": "", "output": "def staircase(n): \n    for i in range(1, n + 1): \n        for j in range(1, n + 1): \n            if (j <= (n - i)):   \n                print(end=\"\\t\") \n            else: \n                print(\"#\\t\", end=\"\") \n        print()", "category": "Python"}, {"instruction": "Perform linear search on a given list of numbers to check if a given number is present in the list.", "input": "List: [1, 2, 3, 4]\nNumber: 2", "output": "\"\"\"\ndef linear_search(arr, n):\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the given number is found\n        if arr[i] == n:\n            return True\n    \n    # Return False if the given number is not present\n    return False\n\n# Function call\nprint(linear_search([1, 2, 3, 4], 2))\n\"\"\"\n\nOutput: True", "category": "Python"}, {"instruction": "Design a data structure for efficiently finding the closest input to a given input in a set of inputs.", "input": "", "output": "An efficient data structure for finding the closest element to a given element in a set of elements is the KD Tree. The KD Tree is a space-partitioning data structure for organizing points in a k-dimensional space and taking advantage of their spacial locality. A KD Tree is a binary tree with each node containing a set of coordinates, or an element, and the corresponding subtree referring to elements closer to the coordinates of the current node in the tree. By recursively dividing the space into smaller parts, the search time for a specific element or coordinates can be significantly reduced, making finding the closest element a much faster process.", "category": "Python"}, {"instruction": "Create a machine learning model to predict the probability of a patient having a certain type of cancer.", "input": "features = [Height, Weight, Age, Gender]", "output": "import numpy as np\nimport pandas as pd\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# read in the data\ndf = pd.read_csv('data.csv')\n\n# separate the features and labels\nX = df.drop('cancer', axis=1)\ny = df['cancer']\n\n# split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# create a support vector machine model\nmodel = SVC()\n\n# fit the model on the data\nmodel.fit(X_train, y_train)\n\n# make predictions\npredictions = model.predict(X_test)\n\n# measure the accuracy of the model\nscore = accuracy_score(y_test, predictions)\nprint(score)", "category": "Python"}, {"instruction": "Create a simple Python script to print the first 10 prime numbers.", "input": "", "output": "prime_numbers = [] \nfor num in range(1, 11):   \n   if num > 1:  \n       for i in range(2, num):  \n           if (num % i) == 0:  \n               break  \n       else:  \n           prime_numbers.append(num)\n  \nprint(prime_numbers)", "category": "Python"}, {"instruction": "Create a GraphQL API to serve data from a database in Python.", "input": "", "output": "The GraphQL API should use Python's Graphene library to create the schema. The API should have a root query and necessary fields, as well as a Global ID and Node interface for each of the database's tables. The API should also support CRUD operations, enabling the clients to query or modify the database tables.", "category": "Python"}, {"instruction": "Construct a code to find the sum of all elements in a given 2D matrix", "input": "matrix = [[1, 2, 3],[4, 5, 6],[7, 8, 9]]", "output": "def sum_elements(matrix):\n    result = 0\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            result = result + matrix[i][j]\n    return result\n\nprint(sum_elements(matrix))", "category": "Python"}, {"instruction": "Compute 2 to the 3rd power using Python.", "input": "", "output": "result = 2 ** 3\nprint(result)  # Outputs 8", "category": "Python"}, {"instruction": "What is a 2D array?", "input": "", "output": "A 2D array (or two-dimensional array) is an array of arrays, meaning it is a collection of elements which are themselves arrays. Each element in the 2D array can be thought of as a row, and the elements inside that row can be thought of as columns. The elements all have the same data type.", "category": "Python"}, {"instruction": "What is the purpose of a pivot table in Excel?", "input": "", "output": "The purpose of a pivot table in Excel is to summarize and analyze data. It can quickly summarize large amounts of data and create useful summaries with a few clicks. Pivot tables are useful for quickly analyzing data in different ways, such as sorting and filtering, and deriving meaningful insights.", "category": "Python"}, {"instruction": "Create a function that prints the multiplication table for a provided integer", "input": "x = 8", "output": "def print_multiplication_table(x):\n  for i in range(1, 11):\n    ans = i*x\n    print(f\"{i} x {x} = {ans}\")\n\nprint_multiplication_table(x)", "category": "Python"}, {"instruction": "Replance the character on odd index positions with '#'.", "input": "\"Hello World!\"", "output": "\"\"\"\nReplace the character on odd index positions with '#'.\n\"\"\"\n\ndef add_pound_signs(string):\n    result_string = \"\"\n    for i in range(len(string)):\n        if i % 2 == 1:\n            result_string += \"#\"\n        else:\n            result_string += string[i]\n    return result_string\n\nif __name__ == '__main__': \n    string = \"Hello World!\"\n    print(add_pound_signs(string))", "category": "Python"}, {"instruction": "Given an array containing words and a string, find the shortest word in the array that is a substring of the string", "input": "words = [\"apple\", \"banana\", \"cat\", \"dog\"], string = \"aquickbrownfoxjumpsoverthelazydog\"", "output": "\"\"\"\nGiven an array containing words and a string, find the shortest word in the array that is a substring of the string.\n\"\"\"\n\ndef find_shortest_substring(words, string): \n    min_length = float(\"inf\")\n    min_word = None\n    for word in words:\n        j = string.find(word)\n        if j>-1 and len(word)<min_length:\n            min_length = len(word)\n            min_word = word\n    return min_word\n\nif __name__ == '__main__': \n    words = [\"apple\", \"banana\", \"cat\", \"dog\"]\n    string = \"aquickbrownfoxjumpsoverthelazydog\"\n    print(find_shortest_substring(words, string))", "category": "Python"}, {"instruction": "Explore the data_df dataframe and build a visualization that answers the following question: what is the correlation between number of tweets sent and positive sentiment?", "input": "data_df: DataFrame containing columns such as n_tweets,pos_sentiment", "output": "import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Explore data\nsns.pairplot(data_df, hue='pos_sentiment')\nplt.show()\n\n# Fit a regression line\nsns.regplot(x=\"n_tweets\", y=\"pos_sentiment\", data=data_df)\nplt.xlabel('Number of Tweets')\nplt.ylabel('Positive Sentiment')\nplt.show()", "category": "Python"}, {"instruction": "Given a string, write a Python program to remove all special characters from it.", "input": "", "output": "def remove_special_characters(string): \n    final_string = \"\" \n    for character in string: \n        if character.isalnum(): \n            final_string += character \n    return final_string", "category": "Python"}, {"instruction": "Create a dictionary that stores the number of occurrences of each character in a given string.", "input": "string = \"Hello World!\"", "output": "char_frequency_dict = {}\n\nfor char in string:\n    if char in char_frequency_dict:\n        char_frequency_dict[char] += 1\n    else:\n        char_frequency_dict[char] = 1", "category": "Python"}, {"instruction": "Write a code to print the even numbers in the range of a given two numbers.", "input": "start = 10\nend = 20", "output": "for num in range(start, end+1):\n    if num % 2 == 0:\n        print(num)", "category": "Python"}, {"instruction": "Implement the following function using a stack.", "input": "def isPalindrome(string):\n    '''This function will return whether or not a string is a palindrome.'''", "output": "def isPalindrome(string):\n    '''This function will return whether or not a string is a palindrome.'''\n    stack = [] \n    for letter in string:\n        stack.append(letter)\n\n    reverse = ''\n    while stack:\n        reverse += stack.pop()\n\n    if reverse == string:\n        return True\n    return False", "category": "Python"}, {"instruction": "Given a linked list, design an algorithm to reverse it.", "input": "", "output": "The algorithm must traverse the list and keep track of the nodes as it moves through it. The algorithm should create a new linked list with the elements in reverse order. To do this, the algorithm should traverse the original linked list and push every element onto a stack. Then, the algorithm should pop each element off the stack and insert it as the head of the new linked list. This process is iterative until the stack is empty.", "category": "Python"}, {"instruction": "How to create a dictionary of length four in Python?", "input": "", "output": "The simplest way to create a dictionary of length four in Python is by using the built-in dict() function. For example:\n\nmyDict = dict(key1 = \"value1\", key2 = \"value2\", key3 = \"value3\", key4 = \"value4\")", "category": "Python"}, {"instruction": "What is the result of the following operation in Python?", "input": "x = 1\ny = 3\nz = 4\n\nx = y - z", "output": "x = -3", "category": "Python"}, {"instruction": "How to install the Python package called Pillow?", "input": "", "output": "The easiest way to install the Pillow package is through pip, the official package manager for Python. To install Pillow using pip, open the command line interface and type \"pip install Pillow\".", "category": "Python"}, {"instruction": "Given a list of numbers, create a function that prints the elements of the list that are divisible by 5.", "input": "[1, 20, 30, 15, 60]", "output": "def print_divisible_by_5(input_list):\n    for num in input_list:\n        if num % 5 == 0:\n            print(num)", "category": "Python"}, {"instruction": "Write a function that takes an integer n and prints the n x n grid with stars.", "input": "3", "output": "def print_grid(n): \n    for r in range(n):\n        print(\"* \"*n)", "category": "Python"}, {"instruction": "Return a dictionary containing the number of occurrences of each word in the string.", "input": "s = \"this string should contain 4 occurrences of the word should\"", "output": "def count_words(s): \n    words = s.split() \n    returnCounter = dict.fromkeys(words, 0) \n    for word in words: \n        returnCounter[word] += 1\n    return returnCounter", "category": "Python"}, {"instruction": "Explain how a neural network works.", "input": "", "output": "Neural networks are inspired by the structure and function of biological neural networks. They are composed of layers of interconnected \u2018neurons\u2019, which contain adjustable weights that represent the strength of the connection between each neuron. The neurons receive an input from a source, process the input from individual or multiple layers according to their weights, and output a result. Each layer typically performs a different mathematical operation, such as multiplication, addition or nonlinear activation functions. This allows the network to process complex patterns and extract insights from the data. The weights of the neural network are adjusted each time a new set of data is input, which makes it possible for the network to \u2018learn\u2019 from the data and increase its accuracy.", "category": "Python"}, {"instruction": "Compare and contrast the differences between sets and lists in Python.", "input": "", "output": "A set is an unordered collection of items while a list is an ordered collection of items. Sets have no duplicate elements so all the elements in a set must be unique. The elements inside a list may or may not be unique. Sets are faster when compared to lists for retrieving elements since lookups of items don't require continuous search whereas lists need linear search. The sets built-in functions such as union, intersection give us a quick way of performing mathematical set operations. The elements of set are unchangeable and once you create a set the element in the set remain the same. But, items in a list can be modified.", "category": "Python"}, {"instruction": "Transform the following JSON object into a Python dictionary.", "input": "{ \"name\": \"John Doe\", \"age\": 25, \"address\": { \"street\": \"123 Main Street\", \"city\": \"Los Angeles\", \"state\": \"CA\", \"zip\": 90001}}", "output": "import json\n\ndef json_to_dict(json_str):\n   \n    return json.loads(json_str)\n\nif __name__ == \"__main__\":\n    json_str = \"\"\"\n    {\n        \"name\": \"John Doe\",\n        \"age\": 25,\n        \"address\": {\n            \"street\": \"123 Main Street\",\n            \"city\": \"Los Angeles\",\n            \"state\": \"CA\",\n            \"zip\": 90001\n        }\n    }\n    \"\"\"\n    \n    print(json_to_dict(json_str))", "category": "Python"}, {"instruction": "How would you find the maximum 3 elements from a list of numbers?", "input": "[20, -50, 15, 55, 0 , 40]", "output": "def find_max_three(nums):\n    max1 = - float('inf')\n    max2 = - float('inf')\n    max3 = - float('inf')\n\n    for num in nums:\n        if num > max1:\n            max3 = max2\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max3 = max2\n            max2 = num\n        elif num > max3:\n            max3 = num\n            \n    return max1, max2, max3\n\nprint(find_max_three([20, -50, 15, 55, 0, 40]))", "category": "Python"}, {"instruction": "Create a function to convert a given string to its lowercase equivalent, disregarding any non-alphabetical characters.", "input": "", "output": "def to_lowercase(string):\n    new_string = \"\"\n    for char in string:\n        if char.isalpha():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string", "category": "Python"}, {"instruction": "Find the sum of the series n3/(3n+1).", "input": "14", "output": "def sum_series(n):\n    result = 0\n    for x in range(1, n+1):\n        result += (x**3) / (3*x+1)\n    return result\n\nprint(sum_series(14))", "category": "Python"}, {"instruction": "Calculate the linear regression line for the following data.", "input": "X: [1, 2, 3, 4, 5]\nY: [6, 8, 10, 11, 12]", "output": "\"\"\"\nCalculate the linear regression line for the given data\n\"\"\"\nimport numpy as np\n\ndef linear_regression_line(X, Y):\n    mean_x = np.mean(X)\n    mean_y = np.mean(Y) \n    stdev_x = np.std(X)\n    stdev_y = np.std(Y)\n\n    numerator = 0\n    for x, y in zip(X, Y):\n        numerator += (x - mean_x) * (y - mean_y) \n    beta_1 = numerator/ (stdev_x * stdev_y)\n\n    beta_0 = mean_y - (beta_1 * mean_x)\n    \n    return (beta_1, beta_0)\n\nif __name__ == \"__main__\":\n   X = [1, 2, 3, 4, 5]\n   Y = [6, 8, 10, 11, 12]\n   print(\"Linear Regression Line: {}\".format(linear_regression_line(X, Y)))", "category": "Python"}, {"instruction": "Find the greatest common divisor for two integer inputs using the Euclidean Algorithm.", "input": "30, 60", "output": "\"\"\"\nFind the greatest common divisor for two integer inputs using the Euclidean Algorithm\n\"\"\"\n\ndef greatest_common_divisor(int1, int2):\n  if int1 == 0:\n    return int2\n  elif int2 == 0:\n    return int1\n  elif int1 == int2:\n    return int1\n  else:\n    if int1 > int2:\n      return greatest_common_divisor(int2, int1 % int2)\n    else:\n      return greatest_common_divisor(int1, int2 % int1)\n\nif __name__ == \"__main__\":\n   print(greatest_common_divisor(30, 60))", "category": "Python"}, {"instruction": "How would you find the area of a rectangle in Python?", "input": "", "output": "\"\"\"\nFind the area of a rectangle in Python\n\"\"\"\n\ndef area_of_rectangle(width, height):\n    \"\"\"\n    Returns the area of a rectangle given its width and height.\n    \"\"\"\n    return width * height\n\nif __name__ == \"__main__\":\n   print(area_of_rectangle(2, 4))", "category": "Python"}, {"instruction": "Write a Python program that generates a random integer between 1 and 5 and prints it out.", "input": "", "output": "import random\n\nrandom_integer = random.randint(1, 5)\n\nprint(random_integer)", "category": "Python"}, {"instruction": "Design a REST API in Python that would return a list of customer information.", "input": "", "output": "# Create a customer information API\n@app.route(\"/customers\", methods=[\"GET\"])\ndef customers():\n    # Get a list of customer data\n    customer_list = get_customers()\n    # Create a list of customer dictionaries\n    customer_info = [{'name': customer.name,\n                    'age': customer.age,\n                    'address': customer.address} \n                    for customer in customer_list]\n    # Return a json object with list of customer data\n    return jsonify(customer_info)", "category": "Python"}, {"instruction": "Write a function in the Python language to convert a string to a list.", "input": "my_string = \"Welcome to the world of GPT models\"", "output": "def string_to_list(my_string):\n    return my_string.split()", "category": "Python"}, {"instruction": "Edit the given code to calculate the sum of given numbers using a for loop.", "input": "numbers = [2, 4, 6, 8]\nsum = 0", "output": "\"\"\"\nEdit the given code to calculate the sum of given numbers using a for loop\n\"\"\"\n\nnumbers = [2, 4, 6, 8]\nsum = 0\n\nfor number in numbers:\n    sum += number\n\nprint(sum)", "category": "Python"}, {"instruction": "Generate a dataframe with 5 rows and 3 columns.", "input": "", "output": "import pandas as pd \n\ndata = {'Column1': [1, 2, 3, 4, 5], \n        'Column2': [5, 4, 3, 2, 1],\n        'Column3': [1, 2, 3, 4, 5]\n        }\n\ndf = pd.DataFrame(data)", "category": "Python"}, {"instruction": "Create a function that takes a list of strings and a string as inputs and finds all the strings in the list which contain the given string.", "input": "string_list = [\"hello\", \"world\", \"google\", \"apple\"]\nsub_string = \u201coo\u201d", "output": "def find_strings(string_list, sub_string):\n    results = []\n    for string in string_list:\n        if sub_string in string:\n            results.append(string)\n    return results", "category": "Python"}, {"instruction": "Given an array of English words, find any word which is an anagram of another word in the same array.", "input": "[\"listen\", \"pot\", \"part\", \"opt\", \"trap\", \"silent\", \"top\"]", "output": "\"\"\"\nGiven an array of English words, find any word which is an anagram of another word in the same array.\n\"\"\"\n\ndef find_anagrams(words):\n    anagrams = [] \n    for i in range(len(words)): \n        for j in range(i+1, len(words)): \n            if (sorted(words[i]) == sorted(words[j])): \n                anagrams.append((words[i],words[j])) \n    return anagrams\n\nif __name__ == '__main__':\n    words = [\"listen\", \"pot\", \"part\", \"opt\", \"trap\", \"silent\", \"top\"]\n    print(find_anagrams(words))", "category": "Python"}, {"instruction": "You need to classify a given sentence into one of 5 categories.", "input": "This sentence is about sports", "output": "def classify(sentence):\n    if 'sports' in sentence.lower():\n        return 'sports'\n    elif 'entertainment' in sentence.lower():\n        return 'entertainment'\n    elif 'politics' in sentence.lower():\n        return 'politics'\n    elif 'finance' in sentence.lower():\n        return 'finance'\n    elif 'science' in sentence.lower():\n        return 'science'\n    else:\n        return 'other'", "category": "Python"}, {"instruction": "Edit the following code to make it terminate in a finite number of steps", "input": "def foo():\n    while True:\n        print(\"Hello\")", "output": "\"\"\"\nEdit the following code to make it terminate in a finite number of steps.\n\"\"\"\n\ndef foo():\n    for _ in range(10):\n        print(\"Hello\")", "category": "Python"}, {"instruction": "Implement the Levenshtein distance algorithm in Python.", "input": "", "output": "\"\"\"\nImplementing the Levenshtein distance algorithm in Python\n\"\"\"\n\ndef levenshtein(word1, word2):\n    \"\"\"Calculate the Levenshtein distance between two words\"\"\"\n    size_x = len(word1) + 1\n    size_y = len(word2) + 1\n    matrix = [[0 for i in range(size_x)] for j in range(size_y)] \n    for x in range(size_x):\n        matrix[0][x] = x\n    for y in range(size_y):\n        matrix[y][0] = y\n\n    for x in range(1, size_x):\n        for y in range(1, size_y):\n            if word1[x-1] == word2[y-1]:\n                matrix[y][x] = min(\n                    matrix[y-1][x] + 1,\n                    matrix[y-1][x-1],\n                    matrix[y][x-1] + 1\n                )\n            else:\n                matrix[y][x] = min(\n                    matrix[y-1][x] + 1,\n                    matrix[y-1][x-1] + 1,\n                    matrix[y][x-1] + 1\n                )\n\n    return matrix[size_y-1][size_x-1]", "category": "Python"}, {"instruction": "Design a function to clean binary data (strings) by keeping only printable characters.", "input": "binary_data = b'h\\x9Fl\\x04o'", "output": "def clean_binary_data(binary_data):\n    return ''.join(map(lambda x:chr(x) if 32 <= x <= 126 else '', binary_data))", "category": "Python"}, {"instruction": "Create a network topology using the following input.", "input": "nodes = ['A', 'B', 'C', 'D', 'E']\nlinks = [('A', 'B'), ('B', 'C'), ('D', 'E'),('E', 'D')]", "output": "from networkx import nx\n\nG = nx.Graph()\nG.add_nodes_from(nodes)\nfor link in links:\n    G.add_edge(link[0], link[1])", "category": "Python"}, {"instruction": "Convert the following function into a recursive version.", "input": "def factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result", "output": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)", "category": "Python"}, {"instruction": "Create a function that removes all the repeated elements from a list.", "input": "lst = [3, 5, 1, 3, 7, 5]", "output": "def remove_repeats(lst):\n    new_lst = []\n    for item in lst:\n        if item not in new_lst:\n            new_lst.append(item)\n    return new_lst", "category": "Python"}, {"instruction": "Make the following piece of code functional for priority queues.", "input": "class PriorityQueue():\n    #TODO", "output": "class PriorityQueue():\n    def __init__(self):\n        self.elements = []\n    \n    def insert(self, item, priority):\n        self.elements.append((priority, item))\n        \n    def pop(self):\n        _, item = heappop(self.elements)\n        return item", "category": "Python"}, {"instruction": "Create a parameterized query in Python to find the details of a person.", "input": "", "output": "# define the query\nquery = \"SELECT * FROM people WHERE name = %s AND age = %s\"\n\n# provide the parameters\nparams = ('John', 22)\n\n# execute the query\ncursor.execute(query, params)", "category": "Python"}, {"instruction": "Create a program that prints all unique permutations of the given string.", "input": "", "output": "def permutations(string):\n    result = []\n    if len(string) == 1:\n        result=[string]\n    else:\n        for i, letter in enumerate(string):\n            for perm in permutations(string[:i] + string[i+1:]):\n                result.append(letter + perm)\n    return result", "category": "Python"}, {"instruction": "Create a program that draws a triangle with stars (*) with a given height.", "input": "", "output": "def draw_triangle(n): \n    for i in range(0, n): \n        for j in range(0, i+1): \n            print(\"*\",end=\"\") \n        print(\"\\r\")", "category": "Python"}, {"instruction": "Complete the program by filling in the missing code to call the appropriate function", "input": "def search(items, item): \n    for ____ in ____: \n    if ____ == ____:\n        found = ____ \n    if ____: \n        return found \n    else: \n        return -1", "output": "def search(items, item): \n    for i in range(len(items)): \n    if items[i] == item:\n        found = i \n    if found: \n        return found \n    else: \n        return -1", "category": "Python"}, {"instruction": "How can you detect if there is an infinite loop in a code?", "input": "", "output": "One way of detecting if there is an infinite loop in a code is by using a counter to count the number of iterations the loop is performing. If the number of iterations exceeds some predefined threshold value, we can conclude that the code is executing an infinite loop. Another technique to detect an infinite loop is to keep track of all the loop variables and compare the values at two different points in the loop. If it detects a repeating pattern, it may indicate that the loop is stuck in an infinite loop.", "category": "Python"}, {"instruction": "Make the following code work in a multithreading environment.", "input": "x = 0\ndef incrementer():\n    #TODO", "output": "import threading\n\nx = 0\nlock = threading.Lock()\n\ndef incrementer():\n    global x\n    with lock:\n        x +=  1\n        return x", "category": "Python"}, {"instruction": "Use the NLTK library to tokenize the following sentence.", "input": "sentence = \"This is a sentence.\"", "output": "import nltk\n\nsentence = \"This is a sentence.\"\n\ntokens = nltk.word_tokenize(sentence)\n\nprint(tokens) # Output: ['This', 'is', 'a', 'sentence', '.']", "category": "Python"}, {"instruction": "Use an API to fetch and print the current weather information of a given city.", "input": "City Name: New York", "output": "import requests \n\n# API endpoint \nurl = \"http://api.openweathermap.org/data/2.5/weather?\"\n\n# API key\napi_key = \"YOUR_API_KEY\"\n \n# City name \ncity_name = \"New York\"\n\n# parameter for API call \nparams = {\n    'q': city_name, \n    'appid': api_key \n} \n\n# get method of requests module \n# return response object \nres = requests.get(url, params=params) \n\n# json method of response object convert \n# json format data into python format data \ndata = res.json() \n\n# fetch current weather information \n# get method of dictionary \ncurrent = data[\"main\"] \n\n# Now print the current weather \n# get method of dictionary \ntemp = current[\"temp\"] \nprint(\" Temperature (in kelvin unit) = \" +\n            str(temp) + \n        \"\\n atmospheric pressure (in hPa unit) = \" +\n            str(current[\"pressure\"]) +\n        \"\\n humidity (in percentage) = \" +\n            str(current[\"humidity\"]) +\n        \"\\n minimum temperature (in kelvin unit) = \" +\n            str(current[\"temp_min\"]) +\n        \"\\n maximum temperature (in kelvin unit) = \" +\n            str(current[\"temp_max\"]))", "category": "Python"}, {"instruction": "Write a function in Python to convert a 2D array into a single column array.", "input": "arr = [[0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8]]", "output": "def convert_to_single_column_array(arr):\n    single_column_arr = []\n\n    for sub_arr in arr:\n        for val in sub_arr:\n            single_column_arr.append(val)\n    \n    return single_column_arr", "category": "Python"}, {"instruction": "Generate a new list with all the even numbers from the given list", "input": "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "output": "# Generating a new list with all the even numbers from the given list\n\ndef get_even_numbers(input_list):\n  even_numbers = []\n  for num in input_list:\n    if num % 2 == 0:\n      even_numbers.append(num)\n  return even_numbers\n\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(get_even_numbers(my_list))\n\n# Output: [2, 4, 6, 8, 10]", "category": "Python"}, {"instruction": "Write a code which reverses the order of items in an array", "input": "my_list = [1,2,3,4,5]", "output": "# Reversing the order of items in an array\n\ndef reverse_order(input_list):\n return input_list[::-1] \n\nmy_list = [1,2,3,4,5]\nprint(reverse_order(my_list))\n\n# Output: [5, 4, 3, 2, 1]", "category": "Python"}, {"instruction": "Create a variable in Python to hold a list of numbers from 0 to 10", "input": "", "output": "my_list = list(range(0,11))", "category": "Python"}, {"instruction": "Construct a Regex expression in Python to extract words from a given URL.", "input": "", "output": "import re\np = re.compile(r'https?://(?:[-\\w.]|(?:%[\\da-fA-F]{2}))+')\nwords = p.findall(url)", "category": "Python"}, {"instruction": "Generate a list comprehension to find the highest number in the given list.", "input": "List = [2, 74, 8, 9, 34, 67]", "output": "highest_number = [i for i in List if i == max(List)]", "category": "Python"}, {"instruction": "You need to build a function that take a given tree and returns a list containing the data stored at each level.", "input": "1\n        /   \\\n       2     3\n      / \\    /\n     4   5  6", "output": "def traverseTree(node):\n    result = []\n    if node is None:\n        return []\n    else:\n        result.append(node.data)\n        result += traverseTree(node.left)\n        result += traverseTree(node.right)\n    return result", "category": "Python"}, {"instruction": "Generate a random string with length 100 consisting of lowercase letters.", "input": "", "output": "import random\n\ndef randomString():\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    result = []\n    for _ in range(100):\n        letter = random.choice(letters)\n        result.append(letter)\n    return ''.join(result)", "category": "Python"}, {"instruction": "You need to build a code editor with basic features like search, replace, undo, and redo.", "input": "", "output": "def codeEditor():\n    # Initialize the editor\n    editor = texteditor.Editor()\n    \n    # Create buttons for search, replace, undo and redo\n    searchButton = texteditor.Button(caption=\"Search\", onclick=editor.search)\n    replaceButton = texteditor.Button(caption=\"Replace\", onclick=editor.replace)\n    undoButton = texteditor.Button(caption=\"Undo\", onclick=editor.undo)\n    redoButton = texteditor.Button(caption=\"Redo\", onclick=editor.redo)\n    \n    # Create the layout\n    layout = texteditor.layout(\n        [\n            [searchButton, replaceButton],\n            [undoButton, redoButton]\n        ]\n    )\n    \n    # Create the window\n    window = texteditor.Window(layout)\n    \n    # Return the window\n    return window", "category": "Python"}, {"instruction": "Write a Python code to fetch the top three trending topics from Twitter.", "input": "", "output": "import tweepy\n\n# create OAuth handler\nconsumer_key = \"YOUR_CONSUMER_KEY\"\nconsumer_secret = \"YOUR_CONSUMER_SECRET\"\naccess_token = \"YOUR_ACCESS_TOKEN\"\naccess_token_secret = \"YOUR_ACCESS_TOKEN_SECRET\"\n\n# authenticate \nauth = tweepy.OAuthHandler(consumer_key, consumer_secret) \nauth.set_access_token(access_token, access_token_secret) \n  \n# overridable get method\napi = tweepy.API(auth, wait_on_rate_limit=True, wait_on_rate_limit_notify=True) \n \n# results\ntrends = api.trends_place(1) \ndata = trends[0]\ntrends_list = data['trends']\n\n# top 3 trending topics \nfor i in range(3): \n    print(trends_list[i]['name'])", "category": "Python"}, {"instruction": "Convert pyramid of numbers to a single number.", "input": "9\n    2   3\n  9   3   5\n1   8   6   8", "output": "def pyramid_to_num(pyramid):\n    num = 0\n    val = 0\n\n    for line in pyramid:\n        val = int(line[0]) * 10**(len(line) - 1)\n        num += val * 2**len(line)\n\n    return num\n\n# Test\npyramid = [['9'],['2', '3'],['9', '3', '5'],['1', '8', '6', '8']]\nprint(pyramid_to_num(pyramid))", "category": "Python"}, {"instruction": "Resolve the issue in the code causing a \"TypeError\" to be thrown", "input": "names = [\"John\", \"James\", 10]\n\nfor name in names:\n  print(name)", "output": "\"\"\"\nResolve the issue in the code causing a TypeError to be thrown\n\"\"\"\n\nnames = [\"John\", \"James\", 10]\n\nfor name in names:\n  # Check the type of the element and only display it if it's a string\n  if type(name) == str:\n    print(name)\n\n\"\"\"\nOutput:\nJohn\nJames\n\"\"\"", "category": "Python"}, {"instruction": "For the given Python dictionary, list all its keys and values in the following format.", "input": "{\n  \"name\": \"John Doe\",\n  \"age\": 40,\n  \"address\": {\n    \"street\": \"123 Main Street\",\n    \"city\": \"Albany\",\n    \"state\": \"NY\"\n  }\n}", "output": "\"\"\"\nFor the given dictionary, list all its keys and values in the following format\n\"\"\"\n\ndata = {\n  \"name\": \"John Doe\",\n  \"age\": 40,\n  \"address\": {\n    \"street\": \"123 Main Street\",\n    \"city\": \"Albany\",\n    \"state\": \"NY\"\n  }\n}\n\nfor key, value in data.items():\n    print(f\"{key}: {value}\")\n    if isinstance(value, dict):\n        for k,v in value.items():\n            print(f\"  {k}: {v}\")\n\n\"\"\"\nOutput:\nname: John Doe\nage: 40\naddress: {'street': '123 Main Street', 'city': 'Albany', 'state': 'NY'}\n  street: 123 Main Street\n  city: Albany\n  state: NY\n\"\"\"", "category": "Python"}, {"instruction": "Explain the use of webhooks in server-side applications", "input": "", "output": "Webhooks are useful for server-side applications as they allow programs to receive real-time updates from external services. Instead of the application periodically polling for changes, webhooks allow for the external service to make an HTTP POST request to the application each time an event occurs. This provides a more efficient way of sending notifications as the application is only notified when there are new events. This approach is particularly popular with applications that integrate with third-party services.", "category": "Python"}, {"instruction": "Create a permutation of characters in a string.", "input": "str = \"CAT\"", "output": "def permutation(str):\n    if len(str) == 0: \n        return [''] \n    prev_list = permutation(str[1:len(str)]) \n    next_list = [] \n    for i in range(0,len(prev_list)): \n        for j in range(0,len(str)): \n            new_str = prev_list[i][0: j]+str[0]+prev_list[i][j: len(str)-1] \n            if new_str not in next_list: \n                next_list.append(new_str) \n    return next_list\n\n# Test\nstr = 'CAT'\nperm = permutation(str)\n\n# Output\nprint(perm)\n# ['CAT', 'CTA', 'ACT', 'ATC', 'TCA', 'TAC']", "category": "Python"}, {"instruction": "Convert this string to a float in Python.", "input": "string = \"1.25\"", "output": "string = \"1.25\"\nfloat_value = float(string)", "category": "Python"}, {"instruction": "Perform K-Means Clustering on this dataset.", "input": "dataset = [[5,7], [1,2], [7,9], [10,2], [2,5]]", "output": "import numpy as np\nfrom sklearn.cluster import KMeans\n\n# Create dataset\ndataset = np.array([[5,7], [1,2], [7,9], [10,2], [2,5]])\n\n# Create KMeans object\nkmeans = KMeans(n_clusters=2)\n\n# Fit the model\nkmeans.fit(dataset)\n\n# Get labels\nlabels = kmeans.labels_\n\n# Calculate cluster centers using the average of the datapoints in the cluster\ncluster_centers = kmeans.cluster_centers_\n\n# Print the results\nprint(\"Labels: \", labels)\nprint(\"Cluster Centers: \", cluster_centers)", "category": "Python"}, {"instruction": "Create a GCP Cloud Function that sends an email with input \"name\" and \"message\".", "input": "", "output": "import os\nimport smtplib\nfrom email.message import EmailMessage\n\ndef sendEmail(request):\n    request_json = request.get_json()\n    name = request_json.get('name')\n    message = request_json.get('message')\n  \n    SENDER = os.environ.get('SENDER')\n    RECEIVER = os.environ.get('RECEIVER')\n    PASSWORD = os.environ.get('PASSWORD')\n  \n    msg = EmailMessage()\n    msg.set_content(f'Hello,\"\\n\\n{message}\"\\n\\nRegards,\\n{name}')\n\n    msg['Subject'] = 'Message Sent Via Cloud Function'\n    msg['From'] = SENDER\n    msg['To'] = RECEIVER\n  \n    s = smtplib.SMTP('smtp.gmail.com', 587)\n    s.starttls()\n    s.login(SENDER, PASSWORD)\n    s.send_message(msg)\n    s.quit()", "category": "Python"}, {"instruction": "Compose a Python script to convert a string to an all-uppercase string.", "input": "String: 'Experiment'", "output": "# converting the string to upper-case \nstring = \"Experiment\"\nprint(\"Old String:\", string) \nstring = string.upper() \nprint(\"New String:\", string)", "category": "Python"}, {"instruction": "Design a code to generate Fibonacci numbers.", "input": "", "output": "def Fibonacci(num): \n    a = 0\n    b = 1  \n    if num < 0: \n        print(\"Incorrect input\")\n    elif num == 0: \n        return a \n    elif num == 1: \n        return b \n    else: \n        for i in range(2,num): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Can you print out a multiplication table of size 12 by 12?", "input": "", "output": "def multiple_table():\n    for i in range(1, 13):\n        for j in range(1, 13):\n            print(\"%2d x %2d = %3d\" %(i, j, i*j))\n        print(\"\\n\")\nmultiple_table()", "category": "Python"}, {"instruction": "Design an algorithm for multiplying two matrices.", "input": "A = [[1, 2,],\n     [3, 4]] \nB = [[5, 6], \n     [7, 8]]", "output": "def multiply(A, B): \n    # initialize result matrix \n    rows_A = len(A) \n    cols_A = len(A[0]) \n    rows_B = len(B) \n    cols_B = len(B[0]) \n  \n    if cols_A != rows_B: \n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\") \n        return  \n    # construct result matrix  \n    C = [[0 for row in range(cols_B)] for col in range(rows_A)] \n  \n    # iterate through and multiply\n    for i in range(rows_A): \n        for j in range(cols_B): \n            for k in range(cols_A): \n                C[i][j] += A[i][k] * B[k][j] \n  \n    return C", "category": "Python"}, {"instruction": "Create a program to detect the type of a given character.", "input": "", "output": "def detect_char_type(ch):\n  char_type = \"\"\n\n  if ch.isalpha():\n    char_type = \"Letter\"\n  elif ch.isdigit():\n    char_type = \"Digit\"\n  elif ch.isspace():\n    char_type = \"Space\"\n  elif ch in string.punctuation:\n    char_type = \"Punctuation\"\n  else:\n    char_type = \"Special Character\"\n  \n  return char_type", "category": "Python"}, {"instruction": "Convert this Python list of dictionaries to JSON.", "input": "list_of_dictionaries=[\n  { \n         \"name\" : \"John\", \n         \"age\" : 30, \n         \"city\" : \"New York\"\n     }, \n     { \n         \"name\" : \"Mike\", \n         \"age\" : 25, \n         \"city\" : \"California\"\n     }\n ]", "output": "[ \n    { \n        \"name\" : \"John\", \n        \"age\" : 30, \n        \"city\" : \"New York\"\n    }, \n    { \n        \"name\" : \"Mike\", \n        \"age\" : 25, \n        \"city\" : \"California\"\n    } \n]", "category": "Python"}, {"instruction": "Write a TensorFlow code to build a convolutional neural network to predict the digits from the MNIST dataset.", "input": "", "output": "model = tf.keras.models.Sequential()\n\n# Add a convolutional layer\nmodel.add(tf.keras.layers.Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=(28, 28, 1)))\n\n# Add a max pooling layer\nmodel.add(tf.keras.layers.MaxPooling2D(2,2))\n\n# Add a flatten layer\nmodel.add(tf.keras.layers.Flatten())\n\n# Add a hidden layer\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\n\n# Add an output layer\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))\n\n# Compile the model\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])", "category": "Python"}, {"instruction": "Create a program for sorting a given array in O(n) time complexity.", "input": "", "output": "def sort_array(arr):\n    n = len(arr) \n    for i in range(n): \n        min_idx = i \n        for j in range(i+1, n): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n    return arr", "category": "Python"}, {"instruction": "Create a code to read a textfile line by line and print out the lines that have the word \"Python\".", "input": "", "output": "with open('textfile.txt') as f:\n    for line in f:\n        if 'Python' in line:\n            print(line)", "category": "Python"}, {"instruction": "What is the most efficient way to iterate through a list of dictionaries in Python?", "input": "", "output": "The most efficient way to iterate through a list of dictionaries in Python is to use the \"for-in\" loop. This loop iterates over the elements of the list and accesses the values of the dictionary using the \"key\" argument. The syntax would be: for item in list: do_something(item[key]).", "category": "Python"}, {"instruction": "What is the Python library used to parse a JSON string?", "input": "", "output": "The Python library used to parse a JSON string is json. The json library provides functions for encoding and decoding a JSON string. The syntax for decoding would be: json.loads(data). The syntax for encoding would be: json.dumps(data).", "category": "Python"}, {"instruction": "How can you search for and replace a string with a substring in Python?", "input": "", "output": "You can search for and replace a string with a substring in Python by using the \"replace\" method. The syntax would be: string.replace(\"string_to_be_replaced\", \"new_string\"). For example: \"Hello, world\".replace(\"world\", \"there\") would return \"Hello, there\".", "category": "Python"}, {"instruction": "Print the name of the day depending on the given integer.", "input": "day = 0", "output": "def get_name_of_day(day):\n    days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n    \n    if day >= 0 and day <= 6:\n        return days[day]\n    else:\n        return None", "category": "Python"}, {"instruction": "String concatenation is the process of combining two individual strings into one. Write a Python program to concatenate two strings using the + operator.", "input": "str1 = 'Hello'\nstr2 = 'World'", "output": "def concatenate(str1, str2):\n    return str1 + str2\n\nprint (concatenate(str1, str2))", "category": "Python"}, {"instruction": "Write a function to sort the elements of a list based on their frequency.", "input": "arr = [2, 5, 9, 8, 8, 5, 9, 2]", "output": "def frequencySort(arr): \n    eleFreq = {} \n    sortedList = [] \n  \n    # Create a dictionary with frequency of element as key and element as value\n    for i in arr: \n        if i in eleFreq: \n            eleFreq[i] += 1\n        else: \n            eleFreq[i] = 1\n  \n    # Sort the dictionary \n    sortedFreq = sorted(eleFreq.items(), key = lambda eleFreq: eleFreq[1], reverse = True) \n  \n    # Store the elements in an output list with the same frequency \n    for i in sortedFreq: \n        sortedList.extend([i[0]] * i[1])\n  \n    return sortedList", "category": "Python"}, {"instruction": "Create a dictionary in Python and store the names of four countries and the cities within them.", "input": "", "output": "# Create a Dictionary \ndict = { \n    \"India\" : [\"Delhi\", \"Mumbai\", \"Chennai\"], \n    \"USA\" : [\"New York\", \"Washington\", \"Los Angeles\"],\n    \"Canada\" : [\"Toronto\", \"Vancouver\", \"Ottawa\"],\n    \"France\" : [\"Paris\", \"Marseille\", \"Lyon\"]\n} \n\n# Print the Dictionary \nprint(dict)", "category": "Python"}, {"instruction": "Return an array which contains all the words of the given string in reverse order.", "input": "string = \"This is a test sentence.\"", "output": "\"\"\"\nReturn an array which contains all the words of the given string in reverse order\n\"\"\"\n\nstring = \"This is a test sentence.\"\n\n# Split the string into a list\nwords = string.split(' ')\n\n# Reverse the list of words\nreversed_words = words[::-1]\n\n# Construct the output array\noutput_array = [word[::-1] for word in reversed_words]\n\nprint(output_array)\n\n\"\"\"\nOutput: ['ecnetnes', 'tset', 'a', 'si', 'sihT']\n\"\"\"", "category": "Python"}, {"instruction": "Generate a JSON response which contains the age of all users in the database.", "input": "", "output": "\"\"\"\nGenerate a JSON response which contains the age of all users in  the database\n\"\"\"\n\nimport json\n\n# Database of users\nusers = [\n  {'name': 'John Doe', 'age': 40},\n  {'name': 'Bob Jones', 'age': 30},\n  {'name': 'Alice Smith', 'age': 20}\n]\n\n# Generate the json response\nresponse = {'ages': [user['age'] for user in users]}\n\n# Print the response\nprint(json.dumps(response))\n\n\"\"\"\nOutput: {\"ages\": [40, 30, 20]}\n\"\"\"", "category": "Python"}, {"instruction": "Write code to check if a given string contains only alpha-numeric characters.", "input": "Hello World!", "output": "\"\"\"\nWrite code to check if a given string contains only alpha-numeric characters.\n\"\"\"\n\ndef is_alnum(string):\n    return string.isalnum()\n\nif __name__ == '__main__': \n    string = 'Hello World!'\n    print(is_alnum(string))", "category": "Python"}, {"instruction": "Write a function in Python that should take two lists and return the intersection.", "input": "list_a = [1, 2, 3, 4, 5]\nlist_b = [2, 5, 7, 10]", "output": "def intersection(list_a, list_b):\n    return [element for element in list_a if element in list_b]", "category": "Python"}, {"instruction": "Construct an algorithm to print out the binomial coefficients of a given number n.", "input": "", "output": "def binomial_coefficients(n):\n    coefficients = []\n    for i in range(n+1):\n        coefficients.append(int(math.factorial(n) / (math.factorial(i)*math.factorial(n-i))))\n    return coefficients\n\n# Usage:\nprint(binomial_coefficients(7)) # Outputs [1,7,21,35,35,21,7,1]", "category": "Python"}, {"instruction": "Construct a function to check if a string is a pangram.", "input": "", "output": "def is_pangram(s):\n    s = s.lower()\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in alphabet:\n        if letter not in s:\n            return False\n    return True", "category": "Python"}, {"instruction": "Create a class to create a Complex Number with real and imaginary parts.", "input": "", "output": "class ComplexNumber:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n    \n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result", "category": "Python"}, {"instruction": "Write a Python program that can accept an array and returns the column-wise sum of the given array.", "input": "[[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9]]", "output": "def col_sum(arr):\n    col_sum_arr = []\n    for j in range(len(arr[0])):\n        s = 0\n        for i in range(len(arr)):\n            s += arr[i][j]\n        col_sum_arr.append(s)\n    return col_sum_arr\n\nprint(col_sum([[1, 2, 3],\n               [4, 5, 6],\n               [7, 8, 9]]))\n# Output: [12, 15, 18]", "category": "Python"}, {"instruction": "Where would you place the import statement when using the pandas library in Python?", "input": "", "output": "The import statement should be placed at the beginning of the program, before any other statements are executed. This ensures that the Pandas library is available when we write code referring to the Pandas library.", "category": "Python"}, {"instruction": "Suggest a code segment to generate a random integer in the range of 0 to 100 using Python.", "input": "", "output": "import random\n\nrandom_int = random.randint(0, 100)", "category": "Python"}, {"instruction": "Suggest a code segment to render a greeting message in a terminal window using Python.", "input": "", "output": "print(\"Hello World!\")", "category": "Python"}, {"instruction": "Create a Python program for identifying the common elements between two lists.", "input": "list1 = [1, 2, 3, 4]\nlist2 = [2, 4, 6, 8]", "output": "def commonElements(list1, list2):\n    list1_set = set(list1) \n    list2_set = set(list2) \n    common_elements = list1_set.intersection(list2_set) \n    return common_elements", "category": "Python"}, {"instruction": "Design a class in Python that creates objects based on user input.", "input": "", "output": "class UserInput:\n    def __init__(self):\n        self.data = None\n\n    def get_data(self):\n        self.data = input(\"Enter something: \")\n        return self.data", "category": "Python"}, {"instruction": "Create a function in Python that takes in a string as an argument and replaces all occurances of 'e' with an asterisk ('*').", "input": "mystring = 'hello world'", "output": "def replace_e(mystring):\n    return mystring.replace('e', '*')", "category": "Python"}, {"instruction": "How to convert a pandas DataFrame to a python list?", "input": "", "output": "The DataFrame can be converted to a list using the tolist() method. For example:\n\nimport pandas as pd\n\ndf = pd.DataFrame([[1, 2], [3, 4], [5, 6]])\nmy_list = df.tolist()\nprint(my_list)\n\n# Output: [[1, 2], [3, 4], [5, 6]]", "category": "Python"}, {"instruction": "Describe a use case of the ternary operator in Python.", "input": "", "output": "The ternary operator can be used to conditionally assign a value. For example, the following code assigns max to the larger value of x and y:\n\nmax = x if x > y else y", "category": "Python"}, {"instruction": "Construct a binary tree using an array representation in Python.", "input": "[4, 2, 6, 1, 3, 5, 7]", "output": "class TreeNode:\n    def __init__(self, data):\n        self.data = data  \n        self.left = None\n        self.right = None\n      \ndef constructTree(arr): \n    root = TreeNode(arr[0])\n    root.left = TreeNode(arr[1])\n    root.right = TreeNode(arr[2])\n    root.left.left = TreeNode(arr[3])\n    root.left.right = TreeNode(arr[4])\n    root.right.left = TreeNode(arr[5])\n    root.right.right = TreeNode(arr[6])\n    return root", "category": "Python"}, {"instruction": "How many types of methods are available in Python?", "input": "", "output": "There are two types of methods available in Python: instance methods and class methods.", "category": "Python"}, {"instruction": "Convert this NumPy array to a list.", "input": "import numpy as np \nmy_array = np.array([[1,2,3], [4,5,6], [7,8,9]])", "output": "def convert_array(array):\n    \"\"\"\n    This function takes a NumPy array and\n    converts it to a list.\n    \"\"\"\n    return array.tolist()", "category": "Python"}, {"instruction": "Given a string, classify the sentiment of the text as either positive or negative.", "input": "The GPT model is amazing.", "output": "def classify_sentiment(string):\n    \"\"\"\n    This function takes a string and \n    classifies its sentiment as either\n    positive or negative.\n    \"\"\"\n    if string.lower().find(\"positive\") != -1 or string.lower().find(\"amazing\") !=-1:\n        return \"positive\"\n    elif string.lower().find(\"negative\") != -1:\n        return \"negative\"\n    else:\n        return \"neutral\"", "category": "Python"}, {"instruction": "Suggest a completion for the following to convert a date string to datetime format.", "input": "import datetime \n\ndef convert_date_string(date_string):", "output": "import datetime \n\ndef convert_date_string(date_string):\n   return datetime.datetime.strptime(date_string, \"%d-%m-%y\")", "category": "Python"}, {"instruction": "Modify the following code to skip the test if the platform is not windows.", "input": "import platform\n\ndef test_windows():\n    if platform.system() == 'Windows':\n        # Do test", "output": "import platform\n\ndef test_windows():\n    if platform.system() != 'Windows':\n        return\n    # Do test", "category": "Python"}, {"instruction": "Convert the following SQL query to Pandas to group the data by Country.", "input": "SELECT Country, COUNT(*) as Total_Orders\nFROM Orders\nGROUP BY Country", "output": "import pandas as pd\n\ndf = pd.read_sql_query('''SELECT Country, COUNT(*) as Total_Orders\nFROM Orders\nGROUP BY Country''', conn)\n\ndf.groupby('Country').agg({'Total_Orders':['count']})", "category": "Python"}, {"instruction": "Create a class in Python to represent an employee and define the attributes.", "input": "", "output": "class Employee:\n    def __init__(self, id, name, salary, job_title):\n        self.id = id\n        self.name = name\n        self.salary = salary\n        self.job_title = job_title", "category": "Python"}, {"instruction": "Create a code which takes in a list of strings, and returns a string with all the characters of the strings sequentially.", "input": "strings = [\"Hello\", \"World\"]", "output": "def merge_strings(strings):\n    merged_string = ''\n    for string in strings:\n        merged_string += string\n    return merged_string\n\nmerge_strings(strings)", "category": "Python"}, {"instruction": "Create a code to input a sentence and output the number of vowels in the sentence.", "input": "sentence = \"This is a sentence with vowels.\"", "output": "def count_vowels(sentence):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in sentence.lower():\n        if char in vowels:\n            count += 1\n    return count\n\ncount_vowels(sentence)", "category": "Python"}, {"instruction": "Write a code that takes in a list of names and creates a dictionary with the names as keys and their lengths as values.", "input": "names = [\"Mary\", \"John\", \"Mike\"]", "output": "def name_length_dict(names):\n    name_length_dict = dict()\n    for name in names:\n        name_length_dict[name] = len(name)\n    return name_length_dict \n\nname_length_dict(names)", "category": "Python"}, {"instruction": "Create a code to input a 2D matrix and output \nthe sum of each row.", "input": "[[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9]]", "output": "def row_sum(matrix):\n    row_sums = []\n    for row in matrix:\n        row_sum = 0 \n        for col in row:\n            row_sum += col\n        row_sums.append(row_sum)\n    return row_sums\n    \nrow_sum(matrix)", "category": "Python"}, {"instruction": "Given a list of strings, write a Python program to capitalize the first letter of each word.", "input": "words = ['The', 'quick', 'brown', 'fox']", "output": "capitalized_words = [word.capitalize() for word in words]\nprint(capitalized_words) # Output: ['The', 'Quick', 'Brown', 'Fox']", "category": "Python"}, {"instruction": "Use the list comprehension feature of Python to create a list of words with length more than 5", "input": "", "output": "words_list = [word for word in words if len(word) > 5]", "category": "Python"}, {"instruction": "Write a Pandas code snippet to filter the table based on a given condition.", "input": "Table: df\nCondition: df['Age'] > 25", "output": "filtered_df = df[df['Age'] > 25]", "category": "Python"}, {"instruction": "Write a NumPy code snippet to create a matrix of given shape and fill it with ones.", "input": "Shape: (3,4)", "output": "np.ones((3,4))", "category": "Python"}, {"instruction": "Create a Wordpress theme from scratch.", "input": "", "output": "Create a new folder for your theme, name it \"mytheme\". Open a text editor and a web browser.\n\nCreate a style.css file in your theme folder. Add all the CSS styles as required to make your theme looks as desired.\n\nCreate an index.php file in your theme folder, and add the code to create a basic layout of your theme in HTML.\n\nCreate any other files you may need, such as a template file (example: page.php), functions.php and scripts.php, in order to make your theme fully functional.\n\nAdd code to your functions.php file to add different features to your theme.\n\nCreate a screenshot.png image of your theme inside your theme folder, to show in the WordPress dashboard.\n\nZip your theme folder and upload it to WordPress from the \u201cAppearance\u201d menu.", "category": "Python"}, {"instruction": "Update this script in Python to print the number of months since an employee started working.", "input": "start_date = \"1 March 2020\"", "output": "import datetime\n\nstart_date = datetime.datetime.strptime(\"1 March 2020\", \"%d %B %Y\")\n\ncurrent_date = datetime.datetime.now()\n\nnumber_of_months = current_date.month - start_date.month\n\nprint(\"The employee has been working for {} months\".format(number_of_months))", "category": "Python"}, {"instruction": "Implement a function in Python to compute the average of an array containing floating-point numbers.", "input": "[1.5, 2.3, 3.8, 4.2]", "output": "import numpy as np\n\ndef calculate_average(arr):\n    return np.mean(arr)\n    \nprint(calculate_average([1.5, 2.3, 3.8, 4.2]))", "category": "Python"}, {"instruction": "You are given a string and a substring. Output the index of the first occurrence of the substring in the string.", "input": "\"Hello World\" and \"Wor\"", "output": "def get_index(text, substring):\n    for i in range(len(text)-len(substring)+1):\n        if text[i:i+len(substring)] == substring:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Write a function to count the number of times a given character is found in an input string.", "input": "\"Hello World\" and \"l\"", "output": "def count_characters(text, char):\n    count = 0\n    for c in text:\n        if c == char:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "You are given a string and a letter. Output a new string where the occurances of the given letter are replaced with its index in the given string.", "input": "\"apple\" and \"l\"", "output": "def replace_letters(text, letter):\n  new_text = \"\"\n  for i, char in enumerate(text):\n    if char == letter:\n       new_text += str(i)\n    else:\n       new_text += char\n  return new_text", "category": "Python"}, {"instruction": "Write a code to compare two numbers in python", "input": "num1= 5\nnum2 = 7", "output": "if num1 < num2: \n    print(\"num1 is smaller than num2\") \nelif num1 > num2: \n    print(\"num1 is greater than num2\") \nelse: \n    print(\"num1 is equal to num2\")", "category": "Python"}, {"instruction": "Design an algorithm in Python that takes an array of classmates' age and returns the median age.", "input": "ages = [10, 9, 12, 14, 11]", "output": "def median_age(ages):\n    ages.sort()\n    mid_index = len(ages)//2\n\n    if len(ages)%2 == 0:\n        return (ages[mid_index-1] + ages[mid_index])/2\n    else:\n        return ages[mid_index]", "category": "Python"}, {"instruction": "Output the numbers which are divisible by both 10 and 15 from a list of numbers.", "input": "number_list = [10, 15, 20, 25, 30, 35, 40]", "output": "def divisible_by_10_15(number_list):\n    divisible_numbers = []\n    for num in number_list:\n        if num % 10 == 0 and num % 15 == 0:\n            divisible_numbers.append(num)\n    return divisible_numbers\n    \nif __name__ == '__main__':\n    number_list = [10, 15, 20, 25, 30, 35, 40]\n    print(divisible_by_10_15(number_list))", "category": "Python"}, {"instruction": "Write a function that takes two lists as parameters, and returns a third list, containing the elements that occur on both the given lists.", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [2, 3, 4, 5, 6]", "output": "def common_elements(lst1, lst2):\n    common = []\n    for i in range(len(lst1)):\n        if lst1[i] in lst2:\n            common.append(lst1[i])\n    return common\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [2, 3, 4, 5, 6]\n    print(common_elements(list1, list2))", "category": "Python"}, {"instruction": "Create a python script to filter a list of words, and return only those with even length characters.", "input": "word_list = [\"Python\", \"C++\", \"Java\", \"JavaScript\", \"Ruby\"]", "output": "def even_length_words(word_list):\n    even_words = []\n    for word in word_list:\n        if len(word) % 2 == 0:\n            even_words.append(word)\n    return even_words\n    \nif __name__ == '__main__':\n    print(even_length_words(word_list))", "category": "Python"}, {"instruction": "Generate a Python generator to produce a sequence of the first N numbers", "input": "5", "output": "def my_generator(N):\n    for i in range(N):\n        yield i\n\ng = my_generator(5)\nprint(list(g)) # [0, 1, 2, 3, 4]", "category": "Python"}, {"instruction": "Create a Python script to find the maximum value of a list containing both strings and numbers", "input": "L = [1, 'a', 4, 3, 'b', 6, 'c']", "output": "L = [1, 'a', 4, 3, 'b', 6, 'c']\n\ndef Max_in_List(L):\n    max_num = 0\n    for item in L:\n        if type(item) == int and item > max_num:\n            max_num = item\n    return max_num\n\nprint(Max_in_List(L))", "category": "Python"}, {"instruction": "Write a Python function using the Pandas library to filter out the rows with a missing value in the specified column.", "input": "Dataframe:\n\nName\tAge\nJohn\t25\nJane\t\nMaria\t30\n\nColumn Name: Age", "output": "import pandas as pd \n   \n# Input Data \ndf = pd.DataFrame({'Name': ['John','Jane','Maria'], \n                   'Age': [25, None, 30]}) \n  \n# Filter the Data \nfiltered_df = df.loc[df['Age'].notnull()]\n\nprint(filtered_df)", "category": "Python"}, {"instruction": "Design a Python script that takes an array of integers and finds the median.", "input": "", "output": "def find_median(arr): \n\tarr.sort() \n\tif len(arr) % 2 != 0: \n\t\treturn arr[len(arr)//2] \n\treturn (arr[(len(arr)//2)-1] + arr[len(arr)//2])/2", "category": "Python"}, {"instruction": "Given a tree, traverse it in the pre-order manner.", "input": "", "output": "def pre_order_traversal(tree):\n  \n    # Visit the root\n    print(tree.value)\n  \n    # Traverse the left subtree, if it exists\n    if tree.left:\n        pre_order_traversal(tree.left)\n  \n    # Traverse the right subtree, if it exists\n    if tree.right:\n        pre_order_traversal(tree.right)", "category": "Python"}, {"instruction": "Perform data validation on two strings s1 and s2 according to the given conditions on the length and special characters.", "input": "s1 = \"Hello@world\"\ns2 = \"Test\"", "output": "def validate_strings(s1, s2):\n    if len(s1) > 10 and '@' not in s1:\n        return False\n    if len(s2) < 5 and '@' in s2:\n        return False\n    return True", "category": "Python"}, {"instruction": "Write a function to determine if a given number is prime and returns true or false.", "input": "", "output": "def is_prime(num):\n    if num <= 1:  \n        return False\n    for i in range(2, num):  \n        if num % i == 0:  \n            return False\n\n    return True", "category": "Python"}, {"instruction": "Find the largest and smallest number in a given list.", "input": "[5, 10, 20, 7, -8, 15]", "output": "import math \n\nmy_list = [5, 10, 20, 7, -8, 15]\n  \nlargest = max(my_list) \nsmallest = min(my_list) \n  \nprint(\"Largest element is:\", largest) \nprint(\"Smallest element is:\", smallest)", "category": "Python"}, {"instruction": "Generate the list of all prime numbers between 0 and 99.", "input": "", "output": "prime_list = [] \nfor num in range(100): \n    if num > 1:\n        for i in range(2, num): \n            if (num % i) == 0: \n                break\n        else:\n            prime_list.append(num) \nprint(prime_list)", "category": "Python"}, {"instruction": "Write a function that takes a given string and its length as input arguments and then prints the string reversely.", "input": "string = \"Hello world\"", "output": "def stringReverse(string, length): \n    for i in range(length - 1, -1, -1): \n        print(string[i], end=\"\") \n  \nstringReverse(\"Hello world\", 11)", "category": "Python"}, {"instruction": "Construct an algorithm to solve this coding problem", "input": "Given two sorted linked lists, print a list with all the integers of the two lists as a single sorted list.", "output": "def print_sorted_list(list1, list2): \n    result = [] \n    while list1 and list2: \n        if list1.value > list2.value: \n            result.append(list2.value) \n            list2 = list2.next \n        else: \n            result.append(list1.value) \n            list1 = list1.next \n    if list1: \n        result.extend(list1) \n    if list2: \n        result.extend(list2) \n    return result", "category": "Python"}, {"instruction": "Provide output for given input using this Python code", "input": "message = \"Hello World!\"\nfunction(message)\n\ndef function(x): \n    return x[::-1]", "output": "\"!dlroW olleH\"", "category": "Python"}, {"instruction": "Create a code that take an input of the list of integers, and outputs even numbers from the list.", "input": "numbers = [2, 3, 4, 5, 6, 7, 8]", "output": "def get_even_numbers(numbers):\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n\nget_even_numbers(numbers)", "category": "Python"}, {"instruction": "Given a vector x containing N elements, write a Python function to compute and return the sum.", "input": "x = [2, 3, 5, 7, 11]", "output": "def sum_vector(x):\n    \"\"\"Returns the sum of all elements in a vector x.\"\"\"\n    total = 0\n    for num in x:\n        total += num\n    return total\n\nsum_vector(x) # returns 28", "category": "Python"}, {"instruction": "Create a code that takes in a sentence and outputs counts of each word and its frequency (how often it occurred).", "input": "sentence = \"This is an example sentence to test the word count code.\"", "output": "def count_words(sentence):\n    word_count = {}\n    for word in sentence.split():\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count\n\ncount_words(sentence)", "category": "Python"}, {"instruction": "Edit this code to make the function take an integer n as an argument and print the fibonacci series till nth term.", "input": "n = 10", "output": "def fibonacci(n):\n    \"\"\"Prints the fibonacci series till the nth term\"\"\"\n    # set initial values\n    a = 0\n    b = 1\n    # check for valid input\n    if n < 0:\n        print('Please enter a positive number')\n    elif n == 0:\n        print('0')\n    elif n == 1:\n        print('0, 1')\n    else:\n        # print first two terms\n        print('0, 1', end=', ')\n        for i in range(2,n):\n            c = a + b\n            print(c, end=', ')\n            # update values\n            a = b\n            b = c\n\nn = 10\nfibonacci(n) # 0, 1, 1, 2, 3, 5, 8, 13, 21, 34", "category": "Python"}, {"instruction": "Create a loop that prints out numbers from 0 to 15, except skip numbers 6, 7, and 12.", "input": "", "output": "for num in range(16):\n if num not in [6, 7, 12]:\n    print(num)", "category": "Python"}, {"instruction": "Parse an XML document using Python.", "input": "", "output": "import xml.etree.ElementTree as ET\n\ntree = ET.parse(\"file.xml\")\nroot = tree.getroot()\n\nfor child in root:\n    print(f\"{child.tag}: {child.text}\")", "category": "Python"}, {"instruction": "Generate a Python function to get the index of a given string from a list of strings.", "input": "list_of_strings = [\"apple\", \"banana\", \"cherry\"]", "output": "def find_index(list_of_strings, target_string):\n    for i, string in enumerate(list_of_strings):\n        if string == target_string:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Manipulate a given list in Python where every element in the list has to be doubled.", "input": "my_list = [1, 2, 3, 4]", "output": "my_list = [2, 4, 6, 8]", "category": "Python"}, {"instruction": "Create a tensorflow model that recognizes handwritten digits from the MNIST dataset.", "input": "", "output": "import tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Flatten\nfrom tensorflow.keras.models import Sequential\n\n# Load the MNIST data\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n\n# Normalizing the intensities\nx_train = x_train/255\nx_test = x_test/255\n\n# Build the model\nmodel = Sequential()\nmodel.add(Flatten(input_shape=(28, 28)))  # flattening input data\nmodel.add(Dense(128, activation='relu'))  # hidden layers\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))  # output layer\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(x_train, y_train, validation_split=0.2, epochs=3)\n\n# Evaluate the model\nmodel.evaluate(x_test, y_test)", "category": "Python"}, {"instruction": "Create a Boolean expression in Python to check if a number is a multiple of 5.", "input": "", "output": "# Boolean expression\n# Checks to see if x is a multiple of 5\ndef is_multiple_of_5(x):\n    return x % 5 == 0", "category": "Python"}, {"instruction": "Underline the correct option regarding the statement below\nA Python code to print the first 5 Fibonacci numbers is:", "input": "", "output": "A. print(1, 1, 2, 3, 5) \nB. print(0, 1, 2, 3, 5) \nC. print(1, 1, 3, 5, 8) \nD. print(0, 1, 1, 2, 3)\n\nD. print(0, 1, 1, 2, 3)", "category": "Python"}, {"instruction": "Write a function to find the first prime number after the given number.", "input": "num = 5", "output": "def find_next_prime(num):\n    # check for all the numbers starting from num\n    for number in range(num+1, num + 1000):\n        # iterate from 2 to number\n        for factor in range(2, number):\n            # check if the number is prime\n            if number % factor == 0:\n                break\n        else:\n            # return the first prime\n            return number\n\nif __name__ == \"__main__\":\n    print(find_next_prime(5)) # prints 7", "category": "Python"}, {"instruction": "Write an algorithm that returns the word with the most vowels in the sentence.", "input": "The quick brown fox jumps over the lazy dog.", "output": "def most_vowels(sentence):\n    # Split sentence into words\n    words = sentence.split(\" \")\n    # Keep track of our highest vowel count and the associated word\n    highest_count = 0\n    most_vowels_word = \"\"\n    # Count the number of vowels in each word\n    for word in words:\n        num_vowels = 0\n        for c in word:\n            if c.lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                num_vowels += 1\n        # Store word if it has the highest vowel count\n        if num_vowels > highest_count:\n            highest_count = num_vowels\n            most_vowels_word = word\n    return most_vowels_word\n\nif __name__ == \"__main__\":\n    print(most_vowels(\"The quick brown fox jumps over the lazy dog.\")) # prints brown", "category": "Python"}, {"instruction": "Write a function in Python to generate a random alphanumeric string with a length of 5 characters.", "input": "", "output": "import random\nimport string\n\ndef generate_random_str():\n    letters = string.ascii_letters + string.digits\n    return ''.join(random.choice(letters) for i in range(5))", "category": "Python"}, {"instruction": "Write a function to calculate the value of the mathematical series:", "input": "x = 2", "output": "def calculate_series(x):\n    \"\"\" Calculate the value of the mathematical series \"\"\"\n    result = 0\n    for i in range(1, x + 1):\n        result += (1 / (i * i))\n    return result\n    \nif __name__ == \"__main__\":\n    result = calculate_series(2)\n    print(result) # prints 1.25", "category": "Python"}, {"instruction": "Keep only the characters from the input string that have a numerical value from 0 to 9.", "input": "The number is 559", "output": "input_str = \"The number is 559\"\n\noutput_str = \"\".join([i for i in input_str if i.isnumeric()])\n\nprint(output_str) # prints 559", "category": "Python"}, {"instruction": "Create a class in Python that keeps the track records of animals in the zoo.", "input": "", "output": "class Zoo:\n    def __init__(self):\n        self.records = {}\n\n    def add_record(self, animal, count):\n        if animal in self.records:\n            self.records[animal] += count\n        else:\n            self.records[animal] = count\n\n    def get_count(self, animal):\n        if animal in self.records:\n            return self.records[animal]\n        else:\n            return 0", "category": "Python"}, {"instruction": "Write a Python code snippet to find the index of the second occurrence of a substring in a given string.", "input": "\"Python is an interpreted, high-level, general-purpose programming language.\"\n\"general-purpose\"", "output": "import re \n  \nstring = \"Python is an interpreted, high-level, general-purpose programming language.\"\nsubstring = \"general-purpose\"\n\nsecond_occurrence = [(m.start(0)) for m in re.finditer(substring, string)][1]\nprint('The second occurrence of the substring starts at index:', second_occurrence)", "category": "Python"}, {"instruction": "Using the code given below, add classes to the navigation links on the page to make them display horizontally instead of vertically.", "input": "<ul>\n  <li><a href=\"#\">Home</a></li>\n  <li><a href=\"#\">About</a></li>\n  <li><a href=\"#\">Contact</a></li>\n</ul>", "output": "<ul class=\"horizontal-list\">\n  <li><a href=\"#\" class=\"horizontal-item\">Home</a></li>\n  <li><a href=\"#\" class=\"horizontal-item\">About</a></li>\n  <li><a href=\"#\" class=\"horizontal-item\">Contact</a></li>\n</ul>", "category": "Python"}, {"instruction": "Edit the following code to allow for the user to input an unlimited list of numbers.", "input": "", "output": "# Prime numbers between 2 and n\n\nn = int(input(\"Enter a positive integer: \"))\n\n# Initially assuming all integers between 2 and n are prime\nprimeArray = [True] * (n + 1)\n\n# Create list of prime numbers\nfor p in range(2, n+1): \n    # If prime[p] is not changed, then it is a prime \n    if primeArray[p]== True: \n        # Update all multiples of p \n        for i in range(2*p,n+1,p): \n            primeArray[i] = False\n\n# Print all prime numbers \nfor i in range(2,n+1): \n    if primeArray[i]: \n        print(i, end=\" \")", "category": "Python"}, {"instruction": "Write a code to store the user input in a list and then find the average of the items in the list.", "input": "", "output": "numbers = []\nwhile True:\n    user_input = input('input a number (input \"done\" to finish): ')\n    if user_input.lower() == \"done\":\n        break\n    numbers.append(float(user_input))\n\navg = sum(numbers) / len(numbers)\nprint('The average is', avg)", "category": "Python"}, {"instruction": "What are the benefits of using the break statement in a loop?", "input": "", "output": "The break statement is often used to terminate a loop prematurely if a certain condition is met. This can provide an efficient way to end a loop when a condition is found and can help improve the readability and performance of the code. Additionally, it can be used to handle any exceptions that may occur while the loop is running.", "category": "Python"}, {"instruction": "Import the pandas library in Python.", "input": "", "output": "import pandas as pd", "category": "Python"}, {"instruction": "Given a list of strings, return a new list with the longest strings.", "input": "str_list = [\"Hello\", \"world\", \"This\", \"is\", \"a\", \"sentence\"]", "output": "def longest_strings(str_list): \n\tlongest_str = [] \n\t\n\tfor s in str_list: \n\t\tif len(s) == max(map(len, str_list)): \n\t\t\tlongest_str.append(s) \n\t\n\treturn longest_str \n\nprint(longest_strings([\"Hello\", \"world\", \"This\", \"is\", \"a\", \"sentence\"])) # Output: [\"Hello\", \"world\", \"sentence\"]", "category": "Python"}, {"instruction": "Create an array of size 10, initialize the array elements with random values between 1 to 10.", "input": "", "output": "import random \narr = []\n\nfor _ in range(10):\n    elem = random.randint(1,10)\n    arr.append(elem)\n\nprint(arr)", "category": "Python"}, {"instruction": "Create a FizzBuzz program.", "input": "", "output": "\"\"\"\nCreate a FizzBuzz program\n\"\"\"\nfor num in range(1, 101):\n    if num % 3 == 0 and num % 5 == 0:\n        print(\"FizzBuzz\")\n    elif num % 3 == 0:\n        print(\"Fizz\")\n    elif num % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print(num)", "category": "Python"}, {"instruction": "Write code in Python to retrieve the top 10 Rated Movies in IMDB.", "input": "", "output": "import requests\nimport json\n\nurl = 'https://imdb-api.com/documentation/top-rated/all}'\nresponse = requests.get(url)\ndata = json.loads(response.text)\nmovies = data['results'][:10]\n\nfor movie in movies:\n    title = movie['title']\n    rating = movie['rating']\n    print(f\"{title}: {rating}\")", "category": "Python"}, {"instruction": "Edit the code in Python so that the function returns the highest odd number in the list.", "input": "def highest_odd_number(numbers):\n    highest = 0\n    for number in numbers:\n        if number % 2 != 0 and number > highest:\n            highest = number\n    return number", "output": "def highest_odd_number(numbers):\n    highest = 0\n    for number in numbers:\n        if number % 2 != 0 and number > highest:\n            highest = number\n    return highest", "category": "Python"}, {"instruction": "Create a program in Python to generate a random string using the given characters.", "input": "characters = 'abcdefghijklmnopqrstuvwxyz'", "output": "import random\n\ndef generate_random_string(characters):\n    random_string = \"\"\n    for i in range(10):\n        random_string += random.choice(characters)\n    return random_string\n\ncharacters = 'abcdefghijklmnopqrstuvwxyz'\nprint(generate_random_string(characters))", "category": "Python"}, {"instruction": "Convert this code to a function which takes a dictionary as an argument and adds the given key value pair to it.", "input": "my_dict = {'name': 'John'}\nkey = 'age'\nvalue = 18", "output": "def add_key_value_pair(my_dict, key, value):\n    \"\"\"Adds the given key value pair to the dictionary\"\"\"\n    if key not in my_dict:\n        my_dict[key] = value\n    return my_dict\n\nmy_dict = {'name': 'John'}\nkey = 'age'\nvalue = 18\n\nupdated_dict = add_key_value_pair(my_dict, key, value)\nprint(updated_dict) # {'name': 'John', 'age': 18}", "category": "Python"}, {"instruction": "Create a singleton class.", "input": "", "output": "class SingletonClass:\n    _instance = None\n \n    def __new__(self):\n        if not self._instance:\n            self._instance = super().__new__(self)\n        return self._instance\n\n# testing\nobj1 = SingletonClass()\nobj2 = SingletonClass()\n\nif obj1 is obj2:\n    print('obj1 and obj2 are the same instance')", "category": "Python"}, {"instruction": "Generate a random password which contains 8 characters including characters, digits, and symbols.", "input": "", "output": "import string\nimport random\n\ndef generate_password():\n    # get all letters and digits\n    chars = string.ascii_letters + string.digits + string.punctuation\n\n    # generate a 8 character password from chars\n    password = ''.join(random.sample(chars, 8))\n\n    return password\n\n# example\npassword = generate_password()\nprint(password) # >$z]e#43", "category": "Python"}, {"instruction": "Modify this code to make it a function which takes a list of numbers and returns their average.", "input": "list_of_numbers = [1, 4, 5, 6, 8]", "output": "def get_average(list_of_numbers):\n    \"\"\"Returns average of the given list of numbers\"\"\"\n    if list_of_numbers:\n        return sum(list_of_numbers)/len(list_of_numbers)\n    return\n\nlist_of_numbers = [1, 4, 5, 6, 8]\n\naverage = get_average(list_of_numbers)\n\nprint(average) # 5", "category": "Python"}, {"instruction": "Design a password validation system using Python code.", "input": "", "output": "import re\n\nMIN_LENGTH = 8\nMAX_LENGTH = 15\n\ndef is_valid_password(password):\n    \n    #check password length\n    if len(password) < MIN_LENGTH or len(password) > MAX_LENGTH:\n        return False\n\n    #check for at least one digit\n    if re.search(r\"[0-9]\",password) is None:\n        return False\n    \n    #check for at least one uppercase letter\n    if re.search(r\"[A-Z]\",password) is None:\n        return False\n    \n    #check for at least one lowercase letter\n    if re.search(r\"[a-z]\",password) is None:\n        return False\n    \n    #check for at least one special character  \n    if re.search(r\"[!#$%&'()*+,-./:;<=>?@[\\] ^_`{|}~]\",password) is None:\n        return False\n\n    #if all conditions are met, password is valid\n    return True", "category": "Python"}, {"instruction": "Generate a function to check for the largest common divisor between two numbers.", "input": "", "output": "def gcd(a, b): \n    if a == 0 : \n        return b \n    return gcd(b % a, a)", "category": "Python"}, {"instruction": "Generate a function to calculate the grade of a student based on their marks.", "input": "", "output": "def calculateGrade(score):\n    if score >= 90:\n        return \"A\"\n    elif score >= 80:\n        return \"B\"\n    elif score >= 70:\n        return \"C\"\n    elif score >= 60:\n        return \"D\"\n    else:\n        return \"F\"", "category": "Python"}, {"instruction": "Construct a for-loop with a break clause.", "input": "", "output": "for i in range(0, 10):\n    if i == 7:\n        break\n    print(i)", "category": "Python"}, {"instruction": "Write a code to simulate Conway\u2019s Game of Life.", "input": "", "output": "\"\"\"\nWrite a code to simulate Conway\u2019s Game of Life\n\"\"\"\n\nimport numpy as np\n\ndef conways_game_of_life(state, iterations):\n    # make a copy of the game state\n    game_state = np.copy(state)\n    # loop over the number of iterations\n    for _ in range(iterations):\n        # calculate the number of neighbors for each cell\n        num_neighbors = (game_state[0:-2,0:-2] + game_state[0:-2,1:-1] + game_state[0:-2,2:] +\n                        game_state[1:-1,0:-2] + game_state[1:-1,2:] +\n                        game_state[2:,0:-2] + game_state[2:,1:-1] + game_state[2:,2:]).astype(np.uint8)\n        # decide if a cell should live or die based on the number of neighbors\n        game_state[1:-1, 1:-1][(num_neighbors == 2) | (num_neighbors == 3)] = 1\n        game_state[1:-1, 1:-1][(num_neighbors != 2) & (num_neighbors != 3)] = 0\n    # return the modified current state\n    return game_state", "category": "Python"}, {"instruction": "Write a code to train a random forest classifier for a given dataset.", "input": "Dataset features: 5 features, 100 instances, 1000 estimators", "output": "\"\"\"\nWrite a code to train a random forest classifier for a given dataset\n\"\"\"\n\n# import the packages\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import make_classification\n\n# Create the dataset\nX, y = make_classification(n_samples=100, n_features=5, n_classes=2)\n\n# Create and train the random forest classifier\nclf = RandomForestClassifier(n_estimators=1000)\nclf.fit(X, y)", "category": "Python"}, {"instruction": "Count the number of vowels in the given sentence and print the result.", "input": "Sentence: There is no shortcut to success", "output": "\"\"\"\nCount the number of vowels in the given sentence and print the result\n\"\"\"\n\n# given sentence\nsentence = 'There is no shortcut to success'\n\n# count the vowels in the sentence\nvowels = 0\nfor char in sentence:\n    if char in 'aeiou':\n        vowels += 1\n# Print the number of vowels\nprint('Number of Vowels: ', vowels)", "category": "Python"}, {"instruction": "Generate the Fibonacci sequence of length 10 and print the result.", "input": "", "output": "\"\"\"\nGenerate the Fibonacci sequence of length 10 and print the result\n\"\"\"\n\ndef get_fibonacci_sequence(length):\n    a, b = 0, 1\n    # generate the Fibonacci sequence\n    sequence = []\n    for _ in range(length):\n        sequence.append(a)\n        a, b = b, a + b\n    # return the Fibonacci sequence\n    return sequence\n\n# get the Fibonacci sequence of length 10\nfib_sequence = get_fibonacci_sequence(10)\n# print the Fibonacci sequence\nprint(fib_sequence)", "category": "Python"}, {"instruction": "Compute the hamming distance between two strings and print the result.", "input": "String1: 'hello'\nString2: 'world'", "output": "\"\"\"\nCompute the hamming distance between two strings and print the result\n\"\"\"\n\ndef calc_hamming_distance(str1, str2):\n    # Calculate the hamming distance\n    dist = 0\n    for i, j in zip(str1, str2):\n        if i != j:\n            dist+=1\n    # Print the Hamming Distance\n    print('Hamming Distance: ', dist)\n    \ncalc_hamming_distance('hello','world')", "category": "Python"}, {"instruction": "Design an algorithm to detect the pattern of spikes in an EEG.", "input": "", "output": "\"\"\"\nDesign an algorithm to detect the pattern of spikes in an EEG\n\"\"\"\n\nimport numpy as np\n\ndef detect_spike_pattern(eeg_data):\n    # Compute power spectrum of the EEG data\n    power_spectra = np.abs(np.fft.rfft(eeg_data))\n    # Detect spikes by finding peaks in the power spectrum\n    spikes = np.where(power_spectra > np.mean(power_spectra) + np.std(power_spectra))[0]\n    # Construct the spike pattern using differences between consecutive spikes\n    pattern = [spikes[i+1] - spikes[i] for i in range(len(spikes)-1)]\n    return pattern", "category": "Python"}, {"instruction": "Given a list of strings, write a function that filters out all strings that have length less than two characters.", "input": "my_list = [\"Hello\",\"Hi\",\"How\",\"Are\",\"You\"]", "output": "def filter_length(strings):\n    new_list = []\n    for string in strings:\n        if len(string) >= 2:\n            new_list.append(string)\n    return new_list\n\nmy_list = [\"Hello\",\"Hi\",\"How\",\"Are\",\"You\"]\n\nprint(filter_length(my_list))", "category": "Python"}, {"instruction": "Generate a class like this using SQLAlchemy.", "input": "class Foo:\n    id = Column(Integer, primary_key=True)\n    bar = Column(String)", "output": "from sqlalchemy import Column, Integer, String\n\nclass Foo(Base):\n    __tablename__ = 'foo'\n    id = Column(Integer, primary_key=True)\n    bar = Column(String)", "category": "Python"}, {"instruction": "Construct an API call in Python that returns information about a given book.", "input": "", "output": "import requests\n\nurl = \"http://openlibrary.org/api/books\"\n \nquerystring = {\"bibkeys\":\"ISBN:0201558025\",\"format\":\"json\",\"jscmd\":\"data\"}\n\nheaders = {\n    'cache-control': \"no-cache\",\n    }\n \nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n \nprint(response.text)", "category": "Python"}, {"instruction": "Convert this JSON string into a dictionary in Python: {\"Name\": \"John\", \"Age\": 35}.", "input": "{\"Name\": \"John\", \"Age\": 35}", "output": "my_dictionary = {\n  'Name': 'John',\n  'Age': 35\n  }", "category": "Python"}, {"instruction": "Construct an object in Python containing three elements.", "input": "", "output": "my_object = {\n  'element1': 1,\n  'element2': 2,\n  'element3': 3\n}", "category": "Python"}, {"instruction": "Replace the \u201cTODO\u201d comment in the code with the proper code to print each element of the list on a new line using Python.", "input": "input_list = [10, 15, 20, 25, 30]", "output": "for element in input_list:\n    print(element)", "category": "Python"}, {"instruction": "Write an efficient Python program to reverse a string.", "input": "testString = \"Hello World\"", "output": "def reverseString(testString): \n    reversedString = \"\"\n    for char in testString: \n        reversedString = char + reversedString\n    return reversedString\n\nprint(reverseString(testString))", "category": "Python"}, {"instruction": "Reorganize the given Python code such that two functions are created.", "input": "def greet_to(name):\n    \"\"\"Print a greeting to the name provided.\"\"\"\n    # assert name is a string\n    assert isinstance(name, str), \"name must be a string\"\n    print(\"Hello, \" + name + \"!\")", "output": "def check_name(name):\n    \"\"\"Check whether the name is a string\"\"\"\n    assert isinstance(name, str), \"name must be a string\"\n\ndef greet_to(name):\n    \"\"\"Print a greeting to the name provided.\"\"\"\n    check_name(name)\n    print(\"Hello, \" + name + \"!\")", "category": "Python"}, {"instruction": "Write code in Python to create a dictionary with names as keys and phone numbers as values.", "input": "names = [\"Alice\", \"Bob\", \"Peter\", \"John\"]\nphone_numbers = [\"1234567\", \"7654321\", \"246810\", \"13579\"]", "output": "names = [\"Alice\", \"Bob\", \"Peter\", \"John\"]\nphone_numbers = [\"1234567\", \"7654321\", \"246810\", \"13579\"]\n\nname_and_phone = dict(zip(names, phone_numbers))\nprint(name_and_phone)", "category": "Python"}, {"instruction": "Write a code in Python to convert a string of text to its equivalent uppercase characters.", "input": "str_lower_case = \"hello world\"", "output": "str_upper_case = str_lower_case.upper()", "category": "Python"}, {"instruction": "Create a function to return all students with a given grade.", "input": "students = [\n {'name': 'John', 'grade': 'A'},\n {'name': 'Jane', 'grade': 'B'},\n {'name': 'Dave', 'grade': 'A'},\n {'name': 'Chris', 'grade': 'C'},\n]", "output": "def get_students_by_grade(students,grade):\n    \"\"\"Returns a list of students with a given grade.\"\"\"\n    filtered_list = []\n    for student in students:\n        if student[\"grade\"] == grade:\n            filtered_list.append(student)\n    return filtered_list\n\nget_students_by_grade(students, 'A') # returns [{'name': 'John', 'grade': 'A'}, {'name': 'Dave', 'grade': 'A'}]", "category": "Python"}, {"instruction": "Write a Python 3 script to print out all the words in the string 'I love coding'.", "input": "", "output": "words = \"I love coding\"\nfor word in words.split():\n    print(word)", "category": "Python"}, {"instruction": "Analyze the given JSON data and find the name of the user with the highest 'score' attribute.", "input": "[\n {\n \u201cname\u201d: \u201cJohn\u201d,\n \u201cscore\u201d: 80\n },\n {\n \u201cname\u201d: \u201cJane\u201d,\n \u201cscore\u201d: 95\n },\n {\n \u201cname\u201d: \u201cTom\u201d,\n \u201cscore\u201d: 67\n }\n]", "output": "import json\n\ndata = json.loads(input)\nhighestScore = 0\nhighestName = \"\"\n\nfor d in data:\n    if d[\"score\"] > highestScore:\n        highestScore = d[\"score\"]\n        highestName = d[\"name\"]\n\nprint(highestName)", "category": "Python"}, {"instruction": "Write a code to convert a given English sentence into Pig Latin.", "input": "", "output": "\"\"\"\nWrite a code to convert a given English sentence into Pig Latin.\n\"\"\"\n\ndef pig_latin(sentence):\n    vowel = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    words = sentence.split(\" \")\n    pig_latin_words = []\n\n    for word in words:\n        if word[0] in vowel:\n            pig_latin_words.append(word + \"way\")\n        else:\n            pig_latin_words.append(word[1:] + word[0] + \"ay\")\n    \n    return \" \".join(pig_latin_words)\n\nif __name__ == \"__main__\":\n    sentence = \"This is a sample sentence\"\n    print(pig_latin(sentence))", "category": "Python"}, {"instruction": "Write a Python program to group the values of a given list of elements based on the size of the elements.", "input": "", "output": "\"\"\"\nWrite a Python program to group the values of a given list of elements based on the size of the elements.\n\"\"\"\n\ndef group_values(values):\n    result = {}\n    for value in values:\n        size = len(value)\n        if size not in result:\n            result[size] = []\n        result[size].append(value)\n    return result\n\nif __name__ == \"__main__\":\n    values = ['cat', 'dog', 'monkey', 'elephant', 'giraffe']\n    print(group_values(values))", "category": "Python"}, {"instruction": "Create a function that sorts a dictionary of words and their frequencies alphabetically.", "input": "dict = {\n  'the': 10,\n  'at': 3,\n  'hello': 5,\n  'cat': 1,\n  'counter': 2\n}", "output": "\"\"\"\nCreate a function that sorts a dictionary of words and their frequencies alphabetically.\n\"\"\"\n\ndef sort_dictionary(dictionary):\n    return dict(sorted(dictionary.items(), key=lambda x: x[0]))\n\nif __name__ == \"__main__\":\n    dict = {\n        'the': 10,\n        'at': 3,\n        'hello': 5,\n        'cat': 1,\n        'counter': 2\n    }\n\n    print(sort_dictionary(dict))", "category": "Python"}, {"instruction": "Write a Python code to calculate the maximum temperature for today based on a forecast of the seven-day forecast.", "input": "forecast = [\n  {'day': 'Monday', 'description': 'sunny', 'temperature': 28},\n  {'day': 'Tuesday', 'description': 'sunny', 'temperature': 30},\n  {'day': 'Wednesday', 'description': 'cloudy', 'temperature': 28},\n  {'day': 'Thursday', 'description': 'raining', 'temperature': 25},\n  {'day': 'Friday', 'description': 'raining', 'temperature': 24},\n  {'day': 'Saturday', 'description': 'cloudy', 'temperature': 25},\n  {'day': 'Sunday', 'description': 'sunny', 'temperature': 27}\n]", "output": "\"\"\"\nWrite a Python code to calculate the maximum temperature for today based on a forecast of the seven-day forecast\n\"\"\"\n\nimport datetime\n\ndef get_max_temperature_today(forecast):\n    today = datetime.datetime.today().weekday()\n    \n    max_temp = None\n    for day in forecast:\n        if day['day'] == today:\n            max_temp = max(max_temp, day['temperature'])\n    \n    return max_temp\n  \nif __name__ == \"__main__\":\n    forecast = [\n  {'day': 'Monday', 'description': 'sunny', 'temperature': 28},\n  {'day': 'Tuesday', 'description': 'sunny', 'temperature': 30},\n  {'day': 'Wednesday', 'description': 'cloudy', 'temperature': 28},\n  {'day': 'Thursday', 'description': 'raining', 'temperature': 25},\n  {'day': 'Friday', 'description': 'raining', 'temperature': 24},\n  {'day': 'Saturday', 'description': 'cloudy', 'temperature': 25},\n  {'day': 'Sunday', 'description': 'sunny', 'temperature': 27}\n]\n\nprint(get_max_temperature_today(forecast))", "category": "Python"}, {"instruction": "Create a tree structure using the provided Python dictionary.", "input": "dict = {\n  1: {\n    'parent': 0,\n    'children': [2, 3, 4]\n  },\n  2: {\n    'parent': 1,\n    'children': []\n  },\n  3: {\n    'parent': 1,\n    'children': [5, 6]\n  },\n  4: {\n    'parent': 1,\n    'children': [7]\n  },\n  5: {\n    'parent': 3,\n    'children': []\n  },\n  6: {\n    'parent': 3,\n    'children': []\n  }\n  7: {\n    'parent': 4,\n    'children': []\n  }\n}", "output": "\"\"\"\nCreate a tree structure using the Python dictionary provided\n\"\"\"\n\nclass TreeNode:\n    def __init__(self, value=None, parent=None, children=None):\n        self.value = value\n        self.parent = parent\n        self.children = children if children is not None else []\n    \n    def __repr__(self):\n        return f\"TreeNode({self.value}, {self.parent.value}, {[c.value for c in self.children]})\"\n    \n    def __str__(self):\n        return self.__repr__()\n\ndef create_tree_structure(data):\n    tree = dict()\n    for k, v in data.items():\n        parent = v[\"parent\"]\n        tree[k] = TreeNode(value=k, parent=tree.get(parent), children=list())\n        if parent in tree:\n            tree[parent].children.append(tree[k])\n    return tree\n\nif __name__ == \"__main__\":\n    dict = {\n        1: {\n            'parent': 0,\n            'children': [2, 3, 4]\n        },\n        2: {\n            'parent': 1,\n            'children': []\n        },\n        3: {\n            'parent': 1,\n            'children': [5, 6]\n        },\n        4: {\n            'parent': 1,\n            'children': [7]\n        },\n        5: {\n            'parent': 3,\n            'children': []\n        },\n        6: {\n            'parent': 3,\n            'children': []\n        },\n        7: {\n            'parent': 4,\n            'children': []\n        }\n    }\n    tree = create_tree_structure(dict)\n    print(tree)", "category": "Python"}, {"instruction": "Edit the following code to print a statement if the given list has no elements.", "input": "def print_list_elements(list):\n    if len(list)>0:\n        for element in list:\n            print(element)", "output": "def print_list_elements(list):\n    if len(list)>0:\n        for element in list:\n            print(element)\n    else:\n        print(\"The list has no elements.\") #This edited code will print a statement if the given list has no elements.", "category": "Python"}, {"instruction": "Write a Python program to fetch and print the top five headlines from a given news website.", "input": "News Website: CNN", "output": "import requests\nfrom bs4 import BeautifulSoup\n \nurl = 'http://www.cnn.com/'\nresponse = requests.get(url)\nhtml_content = response.text\n \nsoup = BeautifulSoup(html_content, \"lxml\")\ntop_headlines = soup.find_all('h3',{'class':'cd__headline'})\n \nfor headline in top_headlines[:5]:\n print(headline.text)", "category": "Python"}, {"instruction": "Write an efficient Python program to remove duplicate characters from the given string.", "input": "String: Hello world", "output": "He lwrd", "category": "Python"}, {"instruction": "Write a function to give the intersection of two unsorted linked lists.", "input": "", "output": "def intersection(head1, head2):\n    s = set()\n    current1 = head1\n    current2 = head2\n    while current1 is not None:\n        s.add(current1.data)\n        current1 = current1.next\n    result = []\n    while current2 is not None:\n        if current2.data in s:\n            result.append(current2.data)\n        current2  = current2.next\n    return result", "category": "Python"}, {"instruction": "Suggest a better approach to sort the given array.", "input": "[4, 3, 8, 6, 7, 9, 2, 1]", "output": "def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range (1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    left = quick_sort(left)\n    right = quick_sort(right)\n    return left + [pivot] + right", "category": "Python"}, {"instruction": "Add the following Python function to generate a Fibonacci sequence.", "input": "def fibonacci_sequence(n):\n    \"\"\"Generate a Fibonacci sequence up to n.\"\"\"", "output": "def fibonacci_sequence(n):\n    \"\"\"Generate a Fibonacci sequence up to n.\"\"\"\n    result = []\n\n    first, second = 0, 1\n    while first < n:\n        result.append(first)\n        first, second = second, first + second\n    \n    return result", "category": "Python"}, {"instruction": "Create a Python program to merge two lists by alternating elements.", "input": "list1 = [2, 3, 5, 7]; \nlist2 = [4, 8, 10];", "output": "def merge(list1, list2):\n    mergedList = []\n    for x,y in zip_longest(list1,list2): \n        mergedList.extend([x,y]) \n    return mergedList", "category": "Python"}, {"instruction": "Sort an array of characters in alphabetic order.", "input": "['x', 'q', 'b', 'j']", "output": "\"\"\"\nSort an array of characters in alphabetic order\n\"\"\"\n\ndef sort_alphabetically(arr):\n    arr.sort()\n    return arr\n\nif __name__ == '__main__':\n    print(sort_alphabetically(['x', 'q', 'b', 'j']))", "category": "Python"}, {"instruction": "Code a function to solve the Tower of Hanoi puzzle.", "input": "", "output": "\"\"\"\nCode a function to solve the Tower of Hanoi puzzle\n\"\"\"\n\ndef tower_of_hanoi(n, source, aux, dest): \n    if n == 1: \n        print(\"Move disk 1 from rod\", source, \"to rod\", dest)\n        return\n    tower_of_hanoi(n-1, source, dest, aux) \n    print(\"Move disk\", n, \"from rod\", source, \"to rod\", dest) \n    tower_of_hanoi(n-1, aux, source, dest) \n\nif __name__ == '__main__':\n    n = 3\n    tower_of_hanoi(n, 'A', 'B', 'C')", "category": "Python"}, {"instruction": "Create a program to calculate the area and the perimeter of a rectangle.", "input": "length = 4\nwidth = 5", "output": "\"\"\"\nCreate a program to calculate the area and the perimeter of a rectangle\n\"\"\"\n\ndef area_perimeter(length, width): \n    area = length * width\n    perimeter = 2 * (length + width)\n    return area, perimeter\n\nif __name__ == '__main__':\n    print(area_perimeter(4, 5))", "category": "Python"}, {"instruction": "Write a code which generates the Fibonacci sequence.", "input": "", "output": "\"\"\"\nWrite a code which generates the Fibonacci sequence\n\"\"\"\n\ndef generate_fibonacci_sequence(n): \n    a = 0\n    b = 1\n    if n == 1: \n        print(a) \n    else: \n        print(a) \n        print(b) \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n            print(c) \n\nif __name__ == '__main__':\n    n = 9\n    generate_fibonacci_sequence(n)", "category": "Python"}, {"instruction": "Create a function that takes in a list and an index and swaps the elements at the given indices.", "input": "list = [1, 2, 3, 4]\nindex_1 = 0\nindex_2 = 2", "output": "def swap_elements(lst, index_1, index_2):\n    '''This function takes in a list and two indices and swaps the elements at the given indices.'''\n    lst[index_1], lst[index_2] = lst[index_2], lst[index_1]\n    return lst", "category": "Python"}, {"instruction": "Create a function to determine whether one string is a substring of another.", "input": "string_1 = \"abcdefgh\"\nstring_2 = \"efg\"", "output": "def is_substring(string_1, string_2):\n    '''This function takes two strings and returns a boolean indicating whether\n    string_2 is a substring of string_1.'''\n    return string_2 in string_1", "category": "Python"}, {"instruction": "Create a function to find common elements in two lists.", "input": "list_1 = [1, 2, 3]\nlist_2 = [2, 3, 4]", "output": "def find_common_elements(list_1, list_2):\n    '''This function will find the common elements in two lists.'''\n    return [val for val in list_1 if val in list_2]", "category": "Python"}, {"instruction": "Complete the function to correctly check if a number is even.", "input": "def is_even(number):\n    '''This function should return true if the number is even and false if the number is odd.'''\n    # TODO", "output": "def is_even(number):\n    '''This function should return true if the number is even and false if the number is odd.'''\n    return (number % 2) == 0", "category": "Python"}, {"instruction": "Create a basic API that queries a database and returns a result in a certain format", "input": "", "output": "import\u00a0sqlite3\n\n# Create a connection to the db\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\n# Define a function that queries the db and fetches the required table\ndef query_db(table):\n\tquery = f\"SELECT * FROM {table}\"\n\tc.execute(query)\n\tall_rows = c.fetchall()\n\treturn all_rows\n\n# Create a function to format the result in json\ndef format_result(rows):\n\tjson_result = []\n\tfor row in rows:\n\t\trow_dict = {\n\t\t\t\"id\": row[0], \n\t\t\t\"value\": row[1]\n\t\t\t}\n\t\tjson_result.append(row_dict)\n\treturn json_result\n\n# Define a basic API endpoint to fetch the db result\nimport flask\napp = flask.Flask(__name__)\n@app.route('/api/result', methods=['GET'])\ndef fetch_result():\n\trows = query_db('table')\n\tresult = format_result(rows)\n\treturn flask.jsonify(result)\n\nif __name__ == \"__main__\":\n\tapp.run()", "category": "Python"}, {"instruction": "Write a function that takes two strings and returns the total number of occurrences of the second string in the first.", "input": "string1 = \"hello world\"\nstring2 = \"world\"", "output": "def count_occurrences(string1, string2): \n    \n    # Initialize count to 0\n    count = 0\n    \n    # Iterate over the first string\n    for i in range(len(string1)): \n        # Slice the element from i to length of second string\n        temp = string1[i: i + len(string2)] \n  \n        # If sliced string and second string are equal, \n        # increase count by one\n        if temp == string2: \n            count+= 1\n  \n    return count", "category": "Python"}, {"instruction": "Create a program which calculates the median of an array.", "input": "[3, 5, 4, 1, 7]", "output": "\"\"\"\nCreate a program which calculates the median of an array\n\"\"\"\n\ndef median(arr): \n    n = len(arr) \n    arr.sort() \n  \n    if n % 2 == 0: \n        return (arr[n//2] + arr[n//2-1])/2\n    else: \n        return arr[n//2]\n\nif __name__ == '__main__':\n    print(median([3, 5, 4, 1, 7]))", "category": "Python"}, {"instruction": "Rewrite the following Python code so that it uses a for loop instead of a while loop.", "input": "i = 0\nwhile i < 11:\n    print(i)\n    i += 1", "output": "for i in range(11):\n    print(i)", "category": "Python"}, {"instruction": "Write a code to get the current time in New York City in 24-hour format.", "input": "", "output": "import pytz\nfrom datetime import datetime\n\ndef get_time():\n    new_york = pytz.timezone('America/New_York')\n    curr_time = datetime.now(new_york).strftime('%H:%M')\n    return curr_time\n\nif __name__ == '__main__':\n    print(get_time()) #this will print the current time in 24-hour format in New York City", "category": "Python"}, {"instruction": "Write code to print a multiplication table.", "input": "", "output": "def print_multiplication_table():\n    \"\"\"Prints a multiplication table.\"\"\"\n    # Print the header of the table\n    print('  |  '.join(str(i).ljust(4) for i in range(1, 11)))\n    print('-' * 46)\n\n    # Print the rows of the table\n    for row in range(1, 11):\n        print('  |  '.join(str(row * col).ljust(4) for col in range(1, 11)))\n    \nif __name__ == '__main__':\n    print_multiplication_table()", "category": "Python"}, {"instruction": "Create a program that reads an array of numbers and prints the maximum and minimum values.", "input": "[3.2, 8.5, 1.6, 6.3]", "output": "arr = [3.2, 8.5, 1.6, 6.3]\nmax_val = arr[0]\nmin_val = arr[0]\n\nfor num in arr:\n    if num > max_val:\n        max_val = num\n    if num < min_val:\n        min_val = num\n    \nprint(\"Max:\", max_val) # Outputs 8.5\nprint(\"Min:\", min_val) # Outputs 1.6", "category": "Python"}, {"instruction": "Edit the following code to print out the maximum value from an array of numbers.", "input": "[7, 8, 2, 9, 4]", "output": "arr = [7, 8, 2, 9, 4]\nmax_val = 0\nfor num in arr:\n    if num > max_val:\n        max_val = num\nprint(max_val) # Outputs 9", "category": "Python"}, {"instruction": "Identify the highest pricing plan from the given list.", "input": "plans = [{\"name\": \"Basic\", \"price\": 10},\n         {\"name\": \"Pro\", \"price\": 20},\n         {\"name\": \"Premium\", \"price\": 30}\n        ]", "output": "def highest_priced_plan(plans):\n    max_price = 0\n    max_name = \"\"\n\n    for plan in plans:\n        if plan[\"price\"] > max_price:\n            max_price = plan[\"price\"]\n            max_name = plan[\"name\"]\n\n    return max_name", "category": "Python"}, {"instruction": "Compare two strings and return \"bigger\", \"smaller\" or \"equal\" depending on the lexicographical order.", "input": "string1 = \"zebra\"\nstring2 = \"zeal\"", "output": "def compare_strings(string1, string2):\n    i = 0\n    length = min(len(string1), len(string2))\n\n    while i < length:\n        if string1[i] < string2[i]:\n            return 'smaller'\n        elif string1[i] > string2[i]:\n            return 'bigger'\n        i += 1\n    \n    if len(string1) > len(string2):\n        return 'bigger'\n    else:\n        return 'equal'", "category": "Python"}, {"instruction": "Implement quick sort to sort the given array of integers.", "input": "[9, 5, 8, 1, 3, 6, 7]", "output": "def partition(nums, low, high):\n    i = low-1\n    # set pivot as last element in array\n    pivot = nums[high]\n    \n    for j in range(low, high):\n        # if element is smaller than pivot, increment i and swap elements\n        if nums[j] < pivot:\n            i += 1\n            nums[i], nums[j] = nums[j], nums[i]\n\n    # swap pivot \n    nums[i+1], nums[high] = nums[high], nums[i+1] \n    return i+1\n\ndef quick_sort(nums, low, high):\n    if low < high:\n        # set partition index\n        part_idx = partition(nums, low, high)\n        # sort left side of partition index \n        quick_sort(nums, low, part_idx-1)\n        # sort right side of partition index \n        quick_sort(nums, part_idx+1, high)\n\nnums = [9, 5, 8, 1, 3, 6, 7]\nquick_sort(nums, 0, len(nums)-1)\nprint(\"Sorted array:\", nums)", "category": "Python"}, {"instruction": "Given an array of integers, implement insertion sort to sort the array.", "input": "[1, 4, 2, 7, 5]", "output": "def insertion_sort(nums):\n    # iterate over the array\n    for i in range(1, len(nums)):\n        j = i-1\n        # hold element to be inserted\n        temp = nums[i]\n        # shift elements right if greater than element to be inserted\n        while nums[j] > temp and j >= 0: \n            nums[j+1] = nums[j]\n            j -= 1\n        # insert element at the found position\n        nums[j+1] = temp\n    return nums\n\nnums = [1, 4, 2, 7, 5]\nprint(insertion_sort(nums))", "category": "Python"}, {"instruction": "Identify errors in the following code and suggest corrections.", "input": "def fucntion_1():\n    param1 = input(\"enter-parameter\")\n    print(\"The parameter is:\" + param1)", "output": "def function_1():\n    param1 = input(\"Enter parameter: \")\n    print(\"The parameter is: \" + param1)\n\nThe issue with the code is that it has a misspelling in the function name (fucntion_1 instead of function_1). The input prompt also lacks a space after \"Enter-parameter\" and a colon should be used at the end of the prompt. Finally, there should be a space between \"The parameter is:\" and the variable param1 in the print statement.", "category": "Python"}, {"instruction": "Create a function to take two input strings and return the longest common substring.", "input": "Input 1: ababcd\nInput 2: abxyz", "output": "def longest_common_substring(str1, str2):\n    # keep track of the longest substring\n    longest_substring = \"\"\n    \n    # iterate over each character in the first string\n    for i in range(len(str1)):\n        # iterate over each sub sequence of the first string\n        for j in range(i+1, len(str1)+1):\n            # compare the substring to each substring in the second string\n            for k in range(len(str2)-(j-i)+1):\n                # update longest_substring if we have a longer common substring\n                if str1[i:j] == str2[k:k+(j-i)] and len(str1[i:j]) > len(longest_substring):\n                    longest_substring = str1[i:j]\n\n    return longest_substring", "category": "Python"}, {"instruction": "Create a Python function to swap key-value pairs in a dictionary.", "input": "", "output": "def swap_dict_keys(d):\n    return {v: k for k, v in d.items()}", "category": "Python"}, {"instruction": "Provide an example of a JSON structure which has the same data as the following Python dictionary.", "input": "user_info = {\n    'name': 'John',\n    'age': 42,\n    'address': {\n        'street': '123 Main Street',\n        'city': 'San Francisco',\n        'state': 'CA'\n    }\n}", "output": "{\n    \"name\": \"John\",\n    \"age\": 42,\n    \"address\": {\n        \"street\": \"123 Main Street\",\n        \"city\": \"San Francisco\",\n        \"state\": \"CA\"\n    }\n}", "category": "Python"}, {"instruction": "How can you execute the following Python code to get the output printed?", "input": "def greeting():\n    print(\"Hello World!\")", "output": "The code can be executed by calling the function greeting:\n\ngreeting() #prints \"Hello World!\"", "category": "Python"}, {"instruction": "Draft a Python code to sort an array containing 3 integers in ascending order.", "input": "Array=[5,2,8]", "output": "Array.sort()\nprint(Array) # prints [2,5,8]", "category": "Python"}, {"instruction": "Explain the difference between the 'for' and 'while' loop", "input": "", "output": "The main difference between a 'for' loop and a 'while' loop is that a 'for' loop is used to iterate through a set of numbers, whereas a 'while' loop is used to continue executing a code block until the condition becomes false. A 'for' loop is generally used when there is an established number of iterations or until a certain condition is met, whereas a 'while' loop is used when the exact number of iterations is not known. Additionally, 'for' loops usually contain a counter that is initialized, tested and incremented at the beginning of each iteration, whereas a 'while' loop will only check its condition at the beginning of each iteration.", "category": "Python"}, {"instruction": "Make changes to the following code to include a 'break' statement.", "input": "while True:\n    print(\"Hello\")", "output": "while True:\n    print(\"Hello\")\n    if condition is met: \n        break", "category": "Python"}, {"instruction": "Create an object in Python which will store the following information", "input": "Name: John Doe\nAge: 34\nGender: Male", "output": "person = {\n  'name': 'John Doe',\n  'age': 34,\n  'gender': 'Male'\n}", "category": "Python"}, {"instruction": "Convert this program from procedural to object-oriented.", "input": "def calculate_mortgage(principle, years, rate):\n    # calculation\n    return monthly_payment\n\ndef calculate_interest_rate(value):\n    # calculation\n    return interest_rate", "output": "class MortgageCalculator:\n    def __init__(self, principle, years, rate):\n        self.principle = principle\n        self.years = years\n        self.rate = rate\n    \n    def calculate_mortgage(self):\n        # calculation\n        return monthly_payment\n\n    def calculate_interest_rate(self, value):\n        # calculation\n        return interest_rate", "category": "Python"}, {"instruction": "Create a function to calculate the total cost after N discounts.", "input": "discounts = [10, 15, 20]", "output": "def calculate_total(discounts):\n    total = 0\n    for discount in discounts:\n        total -= total * (discount / 100)\n    return total", "category": "Python"}, {"instruction": "Convert this program into an AsyncIO based one.", "input": "import time\n\ndef calculate_sum(numbers):\n    result = 0\n    for num in numbers:\n        result += num\n        time.sleep(2)\n    return result", "output": "import asyncio\n\nasync def calculate_sum(numbers):\n    result = 0\n    for num in numbers:\n        result += num\n        await asyncio.sleep(2)\n    return result", "category": "Python"}, {"instruction": "Suggest a code to find the longest sub-string in a string.", "input": "string = \"The quick brown fox jump over lazy dog\"", "output": "def find_longest_substring(string):\n    # get the length of the string\n    length = len(string)\n     \n    # variable to store the longest substring length\n    longest_substring_length = 0\n     \n    # variable to store the longest substring\n    longest_substring = ''\n     \n    # loop through the string\n    for i in range(length):\n      tmp_str = ''\n      for j in range(i, length):\n        if string[j] not in tmp_str:\n          tmp_str += string[j]\n        else:\n            break\n      if len(tmp_str) > longest_substring_length:\n        longest_substring_length = len(tmp_str)\n        longest_substring = tmp_str\n    return longest_substring\n\nprint(find_longest_substring(string)) # 'brownfoxjump'", "category": "Python"}, {"instruction": "Create another function to remove duplicates from the array.", "input": "arr = [1, 1, 2, 3, 4, 5, 5, 6, 7]", "output": "def remove_duplicates(arr):\n    result = []\n    for num in arr:\n        if num not in result: # if current element is unique, add to the list.\n            result.append(num)\n    return result\n    \nnew_arr = remove_duplicates(arr)\nprint(new_arr) # [1, 2, 3, 4, 5, 6, 7]", "category": "Python"}, {"instruction": "Parse the following JSON string and print out how many objects are there?", "input": "resp = '[{\"name\": \"john\", \"age\": 25}, {\"name\": \"Anna\", \"age\": 17}, {\"name\": \"Rick\", \"age\": 46}]'", "output": "import json\n\nresp = '[{\"name\": \"john\", \"age\": 25}, {\"name\": \"Anna\", \"age\": 17}, {\"name\": \"Rick\", \"age\": 46}]'\n\ndata = json.loads(resp)\nprint(len(data)) # 3 objects", "category": "Python"}, {"instruction": "Using the \"requests\" library, write a code to get the data from the endpoint http://jsonplaceholder.typicode.com/users", "input": "", "output": "import requests\n\ndef get_api_data():\n    url = 'http://jsonplaceholder.typicode.com/users'\n    response = requests.get(url)\n    return response.json()\n    \nif __name__ == '__main__':\n    data = get_api_data()\n    print(data)", "category": "Python"}, {"instruction": "Use a Tensorflow model to predict a numerical output from an input.", "input": "Input: [1, 2, 3]\nOutput: 8.5", "output": "import tensorflow as tf\n\n# Define the model.\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(10, activation=\"relu\"),\n    tf.keras.layers.Dense(1)\n])\n\n# Compile the model.\nmodel.compile(optimizer=\"adam\", loss=\"mse\")\n\n# Train the model.\nmodel.fit([1, 2, 3], [8.5], epochs=50)", "category": "Python"}, {"instruction": "Create a Racket function that takes two strings as an input and returns the length of the longest common substring.", "input": "String1 = \"hello world\"\nString2 = \"world hello\"", "output": "(define (getLongestCommonSubstring string1 string2)\n    (define max-len 0)\n    (define s1-len (string-length string1))\n    (define s2-len (string-length string2))\n    (for ((i 0 (+ i 1)))\n        (< i s1-len)\n        (for ((j 0 (+ j 1)))\n            (< j s2-len)\n            (let ((cur-len 0))\n            (when (equal? (string-ref string1 i) (string-ref string2 j))\n                (while (and (< i s1-len)\n                       (< j s2-len)\n                       (equal? (string-ref string1 i) (string-ref string2 j))) \n                (set! cur-len (+ cur-len 1))\n                (set! i (+ i 1))\n                (set! j (+ j 1)))\n            (when (> cur-len max-len)\n                (set! max-len cur-len))\n            )\n        )\n    )\n    max-len\n)", "category": "Python"}, {"instruction": "Write a function that takes two lists as an argument and returns the elements that are common to both the lists in Python.", "input": "list1 = [1, 2, 3, 4]\nlist2 = [2, 3, 4, 5]", "output": "def common_elements(list1, list2):\n    common_list = [element for element in list1 if element in list2]\n    return common_list", "category": "Python"}, {"instruction": "How would you remove duplicates from a Python list?", "input": "", "output": "The most straight-forward approach is to add the elements to a set while iterating over the original list and then build a new list out of the set.\n\nExample: \n\noriginal_list = [1,2,2,3,3,4] \n\nnew_list = list(set(original_list)) \n\nprint(new_list) \n# Output [1, 2, 3, 4]", "category": "Python"}, {"instruction": "Complete the following Python code so it prints even numbers from 0 to 10.", "input": "for num in range(0, 10):\n    if", "output": "for num in range(0, 10):\n    if num % 2 == 0:\n        print(num)", "category": "Python"}, {"instruction": "Suggest a method to print out a list of prime numbers below a given number n.", "input": "", "output": "def prime_numbers(n): \n    numbers = list(range(2, n + 1)) \n    for i in range(2, n+1): \n        for j in range(i + 1, n+1): \n            if j % i == 0: \n                numbers[j - 2] = 0 \n  \n    return [number for number in numbers if number != 0]", "category": "Python"}, {"instruction": "Given the following input, suggest a python code for computing the Fibonacci number for n.", "input": "", "output": "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n<0: \n        print(\"Incorrect input\") \n    elif n==0: \n        return a \n    elif n==1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n    return b", "category": "Python"}, {"instruction": "Suggest an efficient algorithm for sorting the following list.", "input": "[7, 1, 4, 8, 9, 2]", "output": "def sort(array): \n    length = len(array) \n  \n    for i in range(length): \n  \n        j = i \n        while j > 0 and array[j-1] > array[j]: \n            # Swap elements\n            array[j], array[j-1] = array[j-1], array[j] \n            j -= 1\n\n    return array", "category": "Python"}, {"instruction": "Write a function that takes two input parameters, a list and a number, and returns true if the number occurs in the list more than twice.", "input": "", "output": "def appears_twice(lst, num):\n    c = 0\n    for n in lst:\n        if n == num:\n            c += 1\n    if c > 2:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Create a program to input numerical data which can then be stored and retrieved into/from a database.", "input": "", "output": "def store_data(table_name, data):\n    conn = sqlite3.connect('database.db') \n    cursor = conn.cursor()\n\n    cursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS \"\"\" + table_name + \"(data text)\") \n  \n    insert_query = \"INSERT INTO \" + table_name + \" VALUES (?)\"\n    cursor.execute(insert_query, (data,))\n  \n    conn.commit() \n  \ndef retrieve_data(table_name):\n    conn = sqlite3.connect('database.db')\n    cursor = conn.cursor()\n\n    return_query = \"SELECT * FROM \" + table_name\n    cursor.execute(return_query) \n    return cursor.fetchall()", "category": "Python"}, {"instruction": "Given a tree, write a program to find the maximum depth of the tree.", "input": "", "output": "def max_depth(node):\n    if node is None:\n        return 0\n    else:\n        left_depth = max_depth(node.left)\n        right_depth = max_depth(node.right)\n        if left_depth > right_depth:\n            return left_depth + 1\n        else: \n            return right_depth + 1", "category": "Python"}, {"instruction": "Given a JSON string, try to parse it into a Python dictionary.", "input": "myJSON = '{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}'", "output": "import json\n\nmyDict = json.loads(myJSON)\nprint(myDict)", "category": "Python"}, {"instruction": "Given a number n, generate a list of tuples of the form (x,n/x) where x divides n.", "input": "n = 30", "output": "def generate_tuples(n):\n    tuples=[]\n    for x in range (1,n+1):\n        if n % x == 0:\n            tuples.append((x,int(n/x)))\n    return tuples", "category": "Python"}, {"instruction": "Write a Python program to remove the elements that occur only once from a given array.", "input": "[1, 2, 2, 3, 3, 3, 4, 4]", "output": "def remove_once(arr): \n    freq_table  = {} \n    for num in arr: \n        if num in freq_table.keys(): \n            freq_table[num] += 1\n        else: \n            freq_table[num] = 1\n\n    filtered_array = [] \n    for num, freq in freq_table.items(): \n        if freq > 1: \n            filtered_array.append(num) \n    return filtered_array\n\nremove_once([1, 2, 2, 3, 3, 3, 4, 4])\n\n#Output: [2, 3, 4]", "category": "Python"}, {"instruction": "Create a list of 3 objects in Python.", "input": "", "output": "list = [1, \"hello\", {'name': 'John'}]", "category": "Python"}, {"instruction": "Create an api with Django that is able to search through an inputed text.", "input": "", "output": "from django.contrib.auth.models import User\nfrom django.http import HttpResponse\nfrom django.shortcuts import render\nfrom django.views.decorators.csrf import csrf_exempt\nfrom .models import Search\n\n@csrf_exempt\ndef search_text(request):\n    if request.method == 'PUT':\n        data = request.PUT\n        text = data.get('text',None)\n        if text:\n            matches = Search.objects.filter(text__icontains=text)\n            return HttpResponse(matches)\n        else:\n            return HttpResponse(\"Error: No text was provided\")", "category": "Python"}, {"instruction": "Write a function to check if a given number is an Armstrong number or not. An Armstrong number is a-number when the sum of the cubes of its own digits is equal to the number itself.", "input": "", "output": "def isArmstrong(num):\n   # obtain number of digits \n   digits = len(str(num))\n\n   # initialize sum\n   Sum = 0\n\n   # find sum of nth power of digits \n   temp = num \n   while temp > 0:\n      digit = temp % 10\n      Sum = Sum + digit ** digits\n      temp //= 10\n   # return true or false\n   return Sum == num", "category": "Python"}, {"instruction": "Edit the code to print out that \"Index not found\".", "input": "nums = [1, 2, 3, 4, 5]\ntarget = 6", "output": "def Contains(nums, target):\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return True\n    print(\"Index not found\")\n    return False", "category": "Python"}, {"instruction": "Edit the code so it can detect if an array is already sorted", "input": "arr = [1, 2, 4, 5, 6, 7]", "output": "def is_sorted(arr): \n    n = len(arr) \n    for i in range (0, n-1): \n        if (arr[i] > arr[i+1] ): \n            return False\n    return True", "category": "Python"}, {"instruction": "Come up with a program that takes in two strings and returns the number of characters that are shared between them", "input": "str1 = \"Greatest\"\nstr2 = \"Gifted\"", "output": "def num_common_chars(str1, str2):\n    count = 0\n    for x in str1:\n        if x in str2:\n           count += 1\n           \n    return count", "category": "Python"}, {"instruction": "Write a function in Python that takes a number as input and prints out if the number is odd or even.", "input": "Number = 23", "output": "def OddEven(num):\n    if num%2 == 0 :\n        print(\"{} is Even\".format(num))\n    else :\n        print(\"{} is Odd\".format(num))\n\nOddEven(23)", "category": "Python"}, {"instruction": "Write an algorithm in Python that takes an array as input and prints all the duplicate values in it.", "input": "arr = [1, 4, 7, 2, 6, 1, 7, 2]", "output": "def find_duplicates(arr): \n    result = [] \n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] == arr[j]: \n                result.append(arr[i]) \n    return result\n\narr = [1, 4, 7, 2, 6, 1, 7, 2] \n  \nresult = find_duplicates(arr) \n  \nprint(result)", "category": "Python"}, {"instruction": "Translate the following sentence to Python code.", "input": "Input the hours, rate and the tax rate.", "output": "hours = float(input(\"Input the hours: \"))\nrate = float(input(\"Input the rate: \"))\ntax_rate = float(input(\"Input the tax rate: \"))", "category": "Python"}, {"instruction": "Write a code to get the median of four numbers", "input": "x = 11, y = 12, z = 13, w = 14", "output": "def median(x,y,z,w):\n    nums = [x,y,z,w]\n    nums.sort()\n    mid =len(nums)//2\n    if len(nums)%2 == 0:\n        median = (nums[mid] + nums[mid-1])/2\n    else:\n        median = nums[mid]\n    return median\n\nif __name__ == '__main__':\n    print(median(11,12,13,14))", "category": "Python"}, {"instruction": "Create a python class to represent a 3x3 matrix", "input": "", "output": "class Matrix:\n    def __init__(self, array):\n        self.array = array\n        self.rows = len(array)\n        self.cols = len(array[0])\n\n    def get_matrix(self):\n        return self.array\n\n    def set_matrix(self, array):\n        self.rows = len(array)\n        self.cols = len(array[0])\n        self.array = array\n\nif __name__ == '__main__':\n    matrix = [[1,2,3],[4,5,6],[7,8,9]]\n    m = Matrix(matrix)", "category": "Python"}, {"instruction": "Write a code to check if an element is present in an array", "input": "array = ['apple','dog','cat','mouse','ball']\nelement = 'cat'", "output": "def is_present(array, element):\n    if element in array:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    print(is_present(array, element))", "category": "Python"}, {"instruction": "Write a code to reverse each element of an array", "input": "array = ['apple','dog','cat','mouse','ball']", "output": "def reverse_array(array):\n    reversed_array = []\n\n    for elem in array:\n        reversed_array.append(elem[::-1])\n    \n    return reversed_array\n\nif __name__ == '__main__':\n    print(reverse_array(array))", "category": "Python"}, {"instruction": "Write a Question answer system for the given paragraph.", "input": "Paragraph: The current century is the 21st century and it started in 2001", "output": "def QASystem(paragraph):\n    words = paragraph.split()\n    answer = words[-1]\n\n    while True:\n        user_input = input('What is the first year of this century? ')\n        if user_input == answer:\n            print('Your answer is correct!')\n            break\n        else:\n            print('Incorrect! Please try again')\n\nQASystem(paragraph)", "category": "Python"}, {"instruction": "Generate a python code to remove all the occurrences of the element x from a list y.", "input": "", "output": "def remove_x(x, y):  \n    while x in y: \n        y.remove(x) \n    return y", "category": "Python"}, {"instruction": "Create a for loop in Python to print all elements in a given numpy array.", "input": "import numpy as np \nmyArray = np.array([1, 2, 3, 4])", "output": "for element in myArray:\n print(element)", "category": "Python"}, {"instruction": "Suggest a python code that returns the average of all the elements in a list.", "input": "", "output": "def avg_list(lst): \n    return sum(lst) / len(lst)", "category": "Python"}, {"instruction": "Write a python code to generate permutations of an input string.", "input": "\"abc\"", "output": "def permutations(string): \n    if len(string) == 0: \n        return [] \n  \n    if len(string) == 1: \n        return [string] \n  \n    l = [] \n    for i in range(len(string)): \n       m = string[i] \n       rem_string = string[:i] + string[i+1:] \n       for p in permutations(rem_string): \n           l.append(m + p) \n    return l", "category": "Python"}, {"instruction": "Write a code to generate all string combinations of a given alphabet", "input": "", "output": "def generate_strings(alphabet): \n    n = len(alphabet)  \n  \n    # Run a loop for all elements in array one by one \n    for i in range(1 << n): \n  \n        # Create a string s of length n \n        s = \"\" \n        for j in range(n): \n  \n            # Check if jth bit of i is set or not \n            # and if set append character j to s \n            if i & (1 << j): \n                s += alphabet[j] \n  \n        # Print the generated string \n        print(s)", "category": "Python"}, {"instruction": "Write a Python script that can convert a string to pig latin", "input": "", "output": "def pig_latin(text):\n    words = text.split()\n    Latin_words = []\n    # loop through every word \n    for word in words:\n        # seperate consonants from vowels\n        firstletter = word[0]\n        if firstletter.lower() in 'aeiou':\n            Latin_word = word+'ay'\n        else:\n            Latin_word = word[1:]+firstletter+'ay'\n        Latin_words.append(Latin_word)\n    return \" \".join(Latin_words)", "category": "Python"}, {"instruction": "Discuss the purpose of data cleaning", "input": "", "output": "The purpose of data cleaning is to ensure that the data is in an accurate and usable form. This involves eliminating or correcting errors such as missing data, incorrect data, duplicate data, and outliers. It also involves replacing invalid values with valid ones, standardizing data formats and converting data from one format to another, and filling in missing values with imputed values. Data cleaning is an important step in the data analysis pipeline, and it is necessary to ensure that your data is in an appropriate and reliable form before performing any analysis on it.", "category": "Python"}, {"instruction": "Construct a simple algorithm to check if a number is prime", "input": "11", "output": "def is_prime(n):\n    # check if n is divisible by any number between 2 and n-1 \n    for i in range (2, n):\n        # if a number is divisible, then return False\n        if (n % i == 0):\n            return False\n    # if n is only divisible by itself, return True\n    return True\n\nif __name__ == '__main__':\n    n = 11\n    if(is_prime(n)):\n        print(n, \"is a prime number\")\n    else:\n        print(n, \"is not a prime number\")", "category": "Python"}, {"instruction": "Discuss some of the common applications of ranking algorithms.", "input": "", "output": "Ranking algorithms are commonly used for a wide range of applications such as web search, recommender systems, spam filtering, and sentiment analysis. In web search, ranking algorithms are used to rank websites according to relevance, so that the most relevant website appears first in the search results. Recommender systems use ranking algorithms to rank items according to user preference, so that the user can be recommended the item that best suits their preferences. Spam filtering is another application where ranking algorithms are used to identify and filter out unsolicited messages. Last but not least, sentiment analysis also uses ranking algorithms to analyze customer feedback, so that companies can identify customer sentiment and take the necessary steps to address it.", "category": "Python"}, {"instruction": "Compare and contrast function overloading and function overriding.", "input": "", "output": "Function overloading is when two or more functions have the same name but different parameters. This can be used to create multiple definitions of a single function that can be used to support different data types. Function overriding is when a derived class extends a base class and redefines its virtual methods. This allows for derived classes to have specialized behavior for a certain method, while still allowing for the base class to be used when that behavior isn't needed. Thus, function overloading allows for a single function to have different behavior, while function overriding allows a derived class to specialize a method of the base class.", "category": "Python"}, {"instruction": "You need to write a program that finds all elements in a given array which are larger than their immediate neighbours.", "input": "[3, 5, 1, 6, 8, 4]", "output": "def find_elements_larger_than_neighbours(arr):\n    result = []\n    for index, value in enumerate(arr):\n        if index > 0 and index < len(arr)-1 and value > arr[index-1] and value > arr[index+1]:\n            result.append(value)\n    return result", "category": "Python"}, {"instruction": "Given an input string, write a function that will remove all non-alphanumeric characters.", "input": "Hello World!", "output": "def remove_non_alphanumeric_chars(input):\n    output = \"\"\n    for char in input:\n        if char.isalnum():\n            output += char\n    return output", "category": "Python"}, {"instruction": "Given a list of integers, write a function that will return the largest sum of any two consecutive integers in the list.", "input": "[7, 2, 5, 3]", "output": "def largest_sum_of_consecutive_ints(arr):\n    largest_sum = 0\n    for i in range(len(arr)):\n        if i < len(arr)-1:\n            current_sum = arr[i] + arr[i+1]\n            largest_sum = max(largest_sum, current_sum)\n    return largest_sum", "category": "Python"}, {"instruction": "Given a list of strings, write a function which will return only strings which start with an uppercase letter.", "input": "String List = [\"hello\", \"World\", \"foo\", \"bar\"]", "output": "def extract_capital_words(string_list):\n    capital_words = []\n    for word in string_list:\n        if word[0].isupper():\n            capital_words.append(word)\n    return capital_words", "category": "Python"}, {"instruction": "Given a string and a list of words, count the frequency of each word in the string.", "input": "String = \"This is a test string to check the frequency of words\"\nWord List = [\"this\", \"is\", \"test\", \"string\"]", "output": "def count_frequency_of_words(string, word_list):\n    frequency_dict = {}\n    string_words = string.split()\n    for word in word_list:\n        count = 0\n        for s_word in string_words:\n            if s_word.lower() == word.lower():\n                count += 1\n        frequency_dict[word] = count\n    return frequency_dict", "category": "Python"}, {"instruction": "You have been provided with a list of integers. Write a function that multiplies each number in the list by 5.", "input": "[1, 20, 0, 5, 2]", "output": "def multiply_list_by_five(arr):\n    result = []\n    for num in arr:\n        result.append(num * 5)\n    return result", "category": "Python"}, {"instruction": "Suggest a code that takes a two-dimensional array as input and flattens it.", "input": "arr = [[1,2],[3,4],[5,6]]", "output": "# Suggest a code that takes a two-dimensional array as input and flattens it\ndef flatten_array(arr):\n    # Initialize the result array\n    result_arr = []\n\n    # Iterate the input array\n    for subarr in arr:\n        # Iterate each sub-array and add each element to the result array\n        for elem in subarr:\n            result_arr.append(elem)\n    \n    # Return the result\n    return result_arr", "category": "Python"}, {"instruction": "Suggest a method to validate whether an input string is a valid JSON document or not.", "input": "", "output": "# Method to validate whether an input string is a valid JSON document\ndef is_valid_json(input_string):\n    # Try to parse the given string with the json library\n    try:\n        json.loads(input_string)\n        return True\n    # If there is an error while parsing the string, it is not a valid JSON document\n    except json.JSONDecodeError:\n        return False", "category": "Python"}, {"instruction": "Suggest the best data structure to store a small dictionary of words and their meanings.", "input": "", "output": "# The best data structure to store a small dictionary of words and their meanings is a hash table (dictionary/dict).\n# A hash table is an efficient data structure that uses key-value pairs to store and retrieve data quickly. \n# It performs well in cases where there is a need to search, add and delete elements in a collection. \n# A hash table will allow the user to look up a word in the dictionary quickly.", "category": "Python"}, {"instruction": "Given a list of numbers, suggest code that returns the number of distinct elements in the list.", "input": "numbers_list = [1, 2, 3, 2, 4, 5, 1]", "output": "# Get the number of distinct elements in a list\nnumbers_list = [1, 2, 3, 2, 4, 5, 1]\n\n# Create a set from the list \ndistinct_elements = set(numbers_list)\n\n# Return the number of distinct elements \nreturn len(distinct_elements)", "category": "Python"}, {"instruction": "Suggest an algorithm to compute the sum of all prime numbers from 2 to n.", "input": "", "output": "def sum_primes(n):\n    # Initialize sum to 0\n    sum_prime = 0\n\n    # Iterate through all numbers from 0 to n\n    for num in range(2, n+1):\n        is_prime = True\n        \n        # Check whether the number is prime\n        for div in range(2, num):\n            if num % div == 0:\n                is_prime = False\n                break\n        \n        # If the number is prime, add it to the sum\n        if is_prime:\n            sum_prime += num\n\n    # Return the sum\n    return sum_prime", "category": "Python"}, {"instruction": "Rewrite the following Python code to include proper exception handling.", "input": "f = open(\"myfile.txt\")\ntext = f.read()", "output": "try:\n    f = open(\"myfile.txt\")\n    text = f.read()\nexcept IOError:\n    print(\"Error: Could not open file\")\nfinally:\n    f.close()", "category": "Python"}, {"instruction": "Perform an in-place reversal of a linked list", "input": "", "output": "def reverse_list(head): \n    curr = head \n    prev = None\n    while curr: \n        next = curr.next\n        curr.next = prev \n\n        prev = curr \n        curr = next\n\n    head = prev \n    return head", "category": "Python"}, {"instruction": "List the methods used by the os module in python.", "input": "", "output": "The methods used by the os module are: getcwd(), listdir(), mkdir(), rename(), chdir(), rmdir(), stat(), chmod(), remove(), chown(), and many more.", "category": "Python"}, {"instruction": "Write a Python snippet that prints out each item in a given list.", "input": "list = [\"Apple\", \"Banana\", \"Cherry\"]", "output": "for item in list:\n  print(item)", "category": "Python"}, {"instruction": "Design a code to generate a histogram from given data.", "input": "[2, 3, 5, 6, 9]", "output": "def histogram(lst): \n    frequency = {} \n  \n    for item in lst: \n        frequency[item] = frequency.get(item, 0) + 1 \n  \n    for item in frequency: \n        print(item, '-->', '*' * frequency[item])", "category": "Python"}, {"instruction": "Generate a code to make all the elements of a list positive.", "input": "", "output": "def make_positive(lst): \n    return [abs(x) for x in lst]", "category": "Python"}, {"instruction": "Create a program to list the 3 most frequent words in a string.", "input": "string = \"I am learning Python programming language\"", "output": "def top_three_words(string):\n    words = string.split()\n    word_dict = {}\n    for word in words:\n        if word in word_dict:\n            word_dict[word] +=1\n        else:\n            word_dict[word] = 1\n    sorted_dict = sorted(word_dict.items(), key = lambda x: x[1], reverse = True)\n    top_three = [word[0] for word in sorted_dict[:3]]\n    return top_three", "category": "Python"}, {"instruction": "Create a program to find the closest string to the given string from a list of strings.", "input": "string = \"text\"\nstrings = [\"tens\", \"tent\", \"teach\", \"tewksbury\"]", "output": "def closest_string_match(string, strings):\n    min_distance = float(\"inf\")\n    min_string = \"\"\n    for s in strings:\n        distance = levenshtein_distance(string, s)\n        if distance < min_distance:\n            min_distance = distance \n            min_string = s\n    return min_string\n\ndef levenshtein_distance(s1, s2):\n    if len(s1) > len(s2):\n        s1, s2 = s2, s1\n\n    distances = range(len(s1) + 1)\n    for i2, c2 in enumerate(s2):\n        distances_ = [i2+1]\n        for i1, c1 in enumerate(s1):\n            if c1 == c2:\n                distances_.append(distances[i1])\n            else:\n                distances_.append(\n                    1 + min((distances[i1], distances[i1 + 1], distances_[-1])))\n        distances = distances_\n    return distances[-1]", "category": "Python"}, {"instruction": "Create a function that checks if a given string is a palindrome (a string which reads the same forward and backward).", "input": "string = \"racecar\"", "output": "def isPalindrome(string): \n    rev_string = string[::-1] \n    if (string == rev_string): \n        return True \n    return False", "category": "Python"}, {"instruction": "Create a function that takes as input a string and evaluates its quantity to true or false.", "input": "", "output": "def is_empty(str):\n  ''' This function takes as input a string and evaluates its \n      quantity to true or false.\n  '''\n  if len(str.strip()) == 0:\n    return True\n  else:\n    return False", "category": "Python"}, {"instruction": "Suggest a data structure in Python to represent a binary search tree.", "input": "", "output": "A Binary Search Tree (BST) can be represented using the dictionary data structure in Python. Each node in the tree will be represented by a dictionary containing the keys: \u2018value\u2019, \u2018left\u2019, and \u2018right\u2019. \u2018value\u2019 refers to the numeric or string value of the node, \u2018left\u2019 refers to the dictionary representation of the left child and \u2018right\u2019 refers to the dictionary representation of the right child.", "category": "Python"}, {"instruction": "Construct a bubblesort algorithm in Python.", "input": "", "output": "def bubbleSort(array): \n\tn = len(array) \n\tfor i in range (n): \n\t\tfor j in range(0, n-i-1): \n\t\t\tif array[j] > array[j+1] : \n\t\t\t\tarray[j], array[j+1] = array[j+1], array[j] \n\narr = [64, 34, 25, 12, 22, 11, 90] \nbubbleSort(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(n): \n\tprint (\"%d\" %arr[i]),", "category": "Python"}, {"instruction": "Populate an array with numbers from 1 to 10 in Python.", "input": "", "output": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Create a program to encrypt a given text using any encryption technique.", "input": "Hello", "output": "# Using Python:\n \nplain_text = \"Hello\"\n\n# Simple substitution encryption\nalphabet = ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\nencrypted_text = \"\"\n\nfor plain_letter in plain_text:\n    if plain_letter in alphabet:\n        encrypted_letter = alphabet[(alphabet.index(plain_letter) + 3) % 26]\n    else:\n        encrypted_letter = plain_letter\n    encrypted_text += encrypted_letter\n    \nprint(\"Encrypted Text:\", encrypted_text) # Output: Khoor", "category": "Python"}, {"instruction": "Define a function in Python that takes a number as an argument and returns its cube.", "input": "", "output": "def cube(number):\n    return number**3", "category": "Python"}, {"instruction": "Write a Python program for calculating the sum of a given array of numbers.", "input": "[2, 3, 4, 5]", "output": "def calculateSum(arr): \n   sum = 0\n   for num in arr: \n      sum += num  \n   return sum \n\nprint(calculateSum([2, 3, 4, 5]))", "category": "Python"}, {"instruction": "Write a function to compare two strings and return the number of character positions at which the strings in the two strings differ from each other.", "input": "str1 = \"apple\"\nstr2 = \"animal\"", "output": "def compare_strings(s1, s2):\n    count = 0\n    for i in range(min(len(s1), len(s2))):\n        if s1[i] != s2[i]:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Describe the purpose of an API.", "input": "", "output": "An API (Application Programming Interface) is a set of programming instructions and standards used for interacting with a software application or web service. It generally enables a developer to access specific features of an application or web service, such as data or functionality, to build integrated applications. APIs provide a way to write code which interacts with other external services in a secure and efficient manner.", "category": "Python"}, {"instruction": "Install Numpy in Python using pip.", "input": "", "output": "pip install numpy", "category": "Python"}, {"instruction": "Train a machine learning model to predict whether a customer is likely to purchase a product.", "input": "", "output": "import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Read data and split into training and test sets\ndata = pd.read_csv(\"customer_data.csv\")\nX = data.drop(\"target\", axis=1)\ny = data.target\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Train the model\nclf = RandomForestClassifier()\nclf.fit(X_train, y_train)\n\n# Evaluate the model\nscore = clf.score(X_test, y_test)\nprint(\"Model accuracy:\", score)", "category": "Python"}, {"instruction": "Write a function to output \"Thank you\" three times.", "input": "", "output": "def say_thanks():\n\tfor i in range(3):\n\t\tprint(\"Thank you\")", "category": "Python"}, {"instruction": "Create a method to find the shortest word in a given array of strings.", "input": "", "output": "def shortest_word(arr):\n    shortest_word = arr[0]\n    for word in arr[1:]:\n        if len(word) < len(shortest_word):\n            shortest_word = word\n    return shortest_word", "category": "Python"}, {"instruction": "Design an algorithm to summarize a long text.", "input": "", "output": "def summarize_text(text): \n    # Split the text into sentences \n    sentences = text.split('.') \n    # Compute the frequency of each sentence \n    sentence_frequencies = {} \n    for sent in sentences: \n        # Clean the sentences \n        clean_sent = sent.strip().lower() \n        # Count the frequency of the sentence \n        if clean_sent in sentence_frequencies: \n            sentence_frequencies[clean_sent] += 1\n        else: \n            sentence_frequencies[clean_sent] = 1\n  \n    # Rank the sentences based on frequency \n    ranked_sentences = sorted(sentence_frequencies.items(), key=lambda x: x[1], reverse=True) \n  \n    # Return the top 3 sentences as the summary \n    summary = [] \n    for sent in ranked_sentences[:3]: \n        summary.append(sent[0]) \n  \n    return \".\".join(summary)", "category": "Python"}, {"instruction": "Implement a function that can convert a number from one number system to another.", "input": "Input: The number 60 in binary to be converted to decimal.", "output": "def binary_to_decimal(binary):\n    decimal = 0 \n    length = len(binary) \n    for digit in range(0, length): \n        decimal += int(binary[digit]) * pow(2, length - digit - 1) \n    return decimal \n\nprint(binary_to_decimal(\"60\"))\nOutput: 24", "category": "Python"}, {"instruction": "Write a `Python` program to parse an HTML document and store the tags in a list.", "input": "", "output": "from bs4 import BeautifulSoup \n  \n# data stored in a string \nhtml_doc = \"\"\" \n<html><head><title>Parser Demo</title></head> \n<body> \n<h1>This is Heading1</h1> \n<h2>This is Heading2</h2> \n</body></html> \n\"\"\"\n  \n# passing the html document to \n# BeautifulSoup() for parsing \nsoup = BeautifulSoup(html_doc, 'html.parser') \n  \n# parsing tags from the document \ntags = [tag.name for tag in soup.find_all()] \n\nprint(tags)", "category": "Python"}, {"instruction": "Create a Python dictionary with the student's name as the key and marks as the value.", "input": "data = {\n    \"Ann\": 78, \n    \"John\": 92,\n    \"Bob\": 67\n}", "output": "student_marks = {\n    \"Ann\": 78, \n    \"John\": 92,\n    \"Bob\": 67\n}", "category": "Python"}, {"instruction": "Write a function 'hasRepeats' that checks if a list has two of the same elements.", "input": "list = [1, 3, 9, 5, 3]", "output": "def hasRepeats(list):\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[i] == list[j]:\n                return True\n    return False\n\nprint(hasRepeats([1, 3, 9, 5, 3]))\n\nOUTPUT:\nTrue", "category": "Python"}, {"instruction": "Write a function 'divideList' which takes a list and an integer, and divides the list into n groups.", "input": "list = [1, 2, 3, 4, 5]\nn = 2", "output": "def divideList(list, n):\n    nList = [[] for _ in range(n)]\n    for item in list:\n        nList[item % n].append(item)\n    return nList\n\nprint(divideList([1, 2, 3, 4, 5], 2))\n\nOUTPUT:\n[[1, 3, 5], [2, 4]]", "category": "Python"}, {"instruction": "Design a function 'sortString' which takes a string of words and sorts each word alphabetically.", "input": "string = \"zebra cat dog\"", "output": "def sortString(string):\n    words = string.split(\" \")\n    sortedWords = [word for word in words]\n    for i in range(len(sortedWords)):\n        sortedWords[i] = \"\".join(sorted(sortedWords[i]))\n    return \" \".join(sortedWords)\n\nprint(sortString(\"zebra cat dog\"))\n\nOUTPUT:\n abcerz cdgot", "category": "Python"}, {"instruction": "Create a Python function 'checkInteger' that takes a number and returns true if the number is an integer, false otherwise.", "input": "number = 3.2", "output": "def checkInteger(number):\n    if number == int(number):\n        return True\n    else:\n        return False\n\nprint(checkInteger(3.2))\n\nOUTPUT:\nFalse", "category": "Python"}, {"instruction": "Write a Python code to check if the given string contains only digits.", "input": "string = \"12345\"", "output": "def checkDigits(string):\n    for char in string:\n        if char not in '1234567890':\n            return False\n    return True\n\nprint(checkDigits('12345'))\n\nOUTPUT:\nTrue", "category": "Python"}, {"instruction": "Given a sentence, create a method to capitalize every word in the sentence.", "input": "hello world", "output": "def capitalize_words(string):\n    return ' '.join(word.capitalize() for word in string.split())", "category": "Python"}, {"instruction": "Write a function that takes an array of integers and returns an array of the same length with each element multiplied by 2.", "input": "[1, 2, 3]", "output": "def multiplyByTwo(arr):\n    multipliedArr = []\n    for i in arr:\n        multipliedArr.append(i*2)\n    return multipliedArr", "category": "Python"}, {"instruction": "Construct a machine learning model to classify a given dataset into two class labels.", "input": "Dataset", "output": "Using a dataset with two class labels (e.g., yes/no, 0/1, etc.), a machine learning model can be constructed, for example, by using a Support Vector Machine (SVM) method with a suitable kernel. The inputs to the model would be the features from the dataset and the output would be the predicted class labels. The SVM algorithm would be trained with the input dataset and the class labels, and then tested with a test dataset to measure the accuracy of the model.", "category": "Python"}, {"instruction": "Create a tensorflow model to predict the probability of rain given an input dataset.", "input": "Weather dataset", "output": "The following steps can be taken to create a tensorflow model to predict the probability of rain given an input dataset:\n\n1. Preprocess and clean the input data.\n2. Split the data into training and testing datasets.\n3. Build a neural network model with the input dataset.\n4. Compile the model with a suitable loss function, optimizer, and metrics.\n5. Train the model and evaluate the performance.\n6. Predictions can be made by passing a new input into the model.", "category": "Python"}, {"instruction": "Write a function in Python to return the first n digits of the Fibonacci sequence.", "input": "n = 5", "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n\nfibonacci(n)", "category": "Python"}, {"instruction": "Write a Python program to determine if an input string is a valid IP address.", "input": "", "output": "import re\ndef isValidIP(ip): \n    # check if the string is a valid IP address\n    regex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)'''\n    # compile the regex \n    pattern = re.compile(regex) \n    \n    # Pass the string in search() method\n    if(pattern.search(ip)):  \n        return True\n    else:  \n        return False\n    \n# Driver Code\nprint(isValidIP(\"192.168.0.1\"))", "category": "Python"}, {"instruction": "Given two strings, sort them in alphabetically ascending order.", "input": "\"javascript\"\n\"python\"", "output": "def sort_str(str1, str2): \n    # extract the words from the strings \n    str1_list = list (map (str, str1)) \n    str2_list = list (map (str, str2)) \n  \n    # sort the strings \n    str1_list.sort() \n    str2_list.sort() \n  \n    # join the chars of the strings \n    sorted_str1 = ''.join(str1_list) \n    sorted_str2 = ''.join(str2_list) \n  \n    # check if the words are the same \n    if (sorted_str1 == sorted_str2): \n        return True\n    else: \n        return False\n            \nprint(sort_str(\"javascript\", \"python\"))", "category": "Python"}, {"instruction": "Create an algorithm to traverse a binary tree in pre-order in Python.", "input": "", "output": "# A function to do preorder tree traversal\ndef preOrder(root):\n  \n    # Base Case\n    if root is None:\n        return\n \n    # First print the data of node\n    print(root.data),\n \n    # Then recur on left child\n    preOrder(root.left)\n \n    # Finally recur on right child\n    preOrder(root.right)", "category": "Python"}, {"instruction": "Write code in Python to extract all the words from a sentence and store them in an array.", "input": "\"Hello World!\"", "output": "words = sentence.split(\" \")", "category": "Python"}, {"instruction": "What is the difference between deep learning and traditional AI?", "input": "", "output": "The primary difference between deep learning and traditional AI is the way they process and interpret data. Deep learning uses a multi-layered artificial neural network in order to learn the patterns and features in data, while traditional AI uses symbolic reasoning and rule-based algorithms to process data. Deep learning is capable of learning complex patterns and features, often outperforming traditional AI methods, while traditional AI is limited to processing pre-defined and structured data.", "category": "Python"}, {"instruction": "Write a code for creating multiple variables with a single statement in Python.", "input": "", "output": "x, y, z = 1, 2, 3", "category": "Python"}, {"instruction": "Write a function that receives an array and removes every odd element from it.", "input": "[1, 2, 3, 4, 5, 6, 7, 8]", "output": "def remove_odd(arr):\n    return [i for i in arr if i % 2 == 0]", "category": "Python"}, {"instruction": "explain the concept of static variables in a programming language", "input": "", "output": "Static variables are variables which retain their value over multiple function calls. They are declared with the \"static\" keyword and can be accessed within the same scope in which they were declared. Static variables can be declared at the class level or at the function level and are typically used to maintain some state information across multiple calls to the same function or data between multiple instances of the same class. Static variables are commonly used to maintain a count of the number of times a function has been called, to store configuration information for the entire program, or to maintain a cumulative data value that is modified within a loop.", "category": "Python"}, {"instruction": "Generate an array with the following pattern [2, 4, 8, 16, ....1024]", "input": "", "output": "def generate_pattern(x):\n    arr = []\n    for i in range(11):\n        arr.append(x**i)\n    return arr", "category": "Python"}, {"instruction": "Write a code to filter out numbers which are divisible by 3 and 5 from a given list.", "input": "list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "output": "def filter_3_5(nums): \n    return [num for num in nums if num % 3 == 0 and num % 5 == 0]\n\nprint(filter_3_5(list))", "category": "Python"}, {"instruction": "Write a Python program to create a Caesar Cipher encryption algorithm.", "input": "", "output": "def cipher(input_str, key):\n  output_str = \"\"\n\n  for char in input_str:\n    if char.isalpha():\n      # Encrypt each character\n      ascii_value = ord(char)\n      ascii_value = ascii_value + (key % 26)\n      if char.isupper():\n        if ascii_value > ord(\"Z\"):\n          ascii_value -= 26\n      elif char.islower():\n        if ascii_value > ord(\"z\"):\n          ascii_value -= 26  \n      output_str += chr(ascii_value)\n    else:\n      output_str += char\n\n  return output_str\n\nif __name__ == '__main__':\n  # Sample input\n  input_str = 'Hello World!'\n  key = 5\n  print('Original input: {}'.format(input_str))\n\n  # Encryting the string\n  cipher_str = cipher(input_str, key)\n  print('Encrypted input: {}'.format(cipher_str))\n\n  # Decrypting the string\n  plain_text = cipher(cipher_str, -key)\n  print('Decrypted input: {}'.format(plain_text))", "category": "Python"}, {"instruction": "Given a sequence of strings, write a code to check if all the strings in the sequence are unique.", "input": "arr = [\"cat\",\"dog\",\"mouse\"]", "output": "arr = [\"cat\",\"dog\",\"mouse\"]\n\n# Check if the strings are unique\ndef is_unique(arr):\n    seen = set()\n    for item in arr:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True\n\nif is_unique(arr):\n    print(\"All the strings in the sequence are unique.\")\nelse:\n    print(\"Some of the strings in the sequence are not unique.\")", "category": "Python"}, {"instruction": "Take a string and remove all the duplicated words within it.", "input": "", "output": "def remove_duplicates(string):\n    \"\"\"Removes all repeated words from a string.\"\"\"\n    words = string.split()\n    seen = set()\n    result = []\n    for word in words:\n        if word not in seen:\n            seen.add(word)\n            result.append(word)\n    return \" \".join(result)", "category": "Python"}, {"instruction": "Write code to take two numbers and determine if their product is even.", "input": "8, 12", "output": "def is_sum_even(num1, num2):\n    \"\"\"Checks if the product of two numbers is even or odd.\"\"\"\n    sum = num1 * num2\n    return sum % 2 == 0\n\nif __name__ == \"__main__\":\n    is_even = is_sum_even(8, 12)\n    print(\"Is the sum even? \", is_even)", "category": "Python"}, {"instruction": "Manipulate the string \"Hello, World!\" using the correct Python function that will replace the word \"Hello\" with \"Goodbye\".", "input": "", "output": "def goodbye_world(string):\n    \"\"\"Replaces the word Hello with Goodbye in the string.\"\"\"\n    return string.replace(\"Hello\", \"Goodbye\")", "category": "Python"}, {"instruction": "Write a Python program that uses the function \"get_name\" to ask the user for their full name and then prints it back to them.", "input": "", "output": "def get_name():\n    \"\"\"Gets a user's full name .\"\"\"\n    first_name = input(\"What is your first name? \")\n    last_name = input(\"What is your last name? \")\n    return first_name + \" \" + last_name\n\nif __name__ == '__main__':\n    name = get_name()\n    print(\"Your name is\", name)", "category": "Python"}, {"instruction": "Implement a comparison operator that takes two strings as arguments and returns true if the strings are equal and false otherwise.", "input": "", "output": "def equals(str1, str2):\n    \"\"\"Compares two strings to see if they are equal.\"\"\"\n    return str1 == str2", "category": "Python"}, {"instruction": "Write a Python program to find the sum of Fibonacci numbers till the number 7.", "input": "", "output": "def fibonacci(n): \n    f1 = 0\n    f2 = 1\n    sum_fib = 0\n    for i in range(2, n + 1): \n        next_term = f1 + f2 \n        sum_fib += next_term\n        f1 = f2\n        f2 = next_term \n    return sum_fib\n\nprint(fibonacci(7))", "category": "Python"}, {"instruction": "Generate a random string of length 5 with only lowercase alphabetic characters.", "input": "", "output": "import string\nimport random\n\ndef generate_random_string(length):\n    allowed_characters = string.ascii_lowercase\n    return ''.join(random.choices(allowed_characters, k=length))\n\nrandom_string = generate_random_string(5)\nprint(random_string)", "category": "Python"}, {"instruction": "Generate code for a function that takes a string and returns its reverse.", "input": "", "output": "def reverseStr(string): \n    reversedString = \"\" \n    for i in range(len(string) -1, -1, -1): \n        reversedString += string[i] \n    return reversedString", "category": "Python"}, {"instruction": "Convert the following list into a dictionary in Python: [1, 2, 3, 4, 5].", "input": "", "output": "my_dict = {1:1, 2:2, 3:3, 4:4, 5:5}", "category": "Python"}, {"instruction": "What is the output of the following Python code?\n\nstring = \"Hello World\"\nstring = string[::-1]", "input": "", "output": "dlroW olleH", "category": "Python"}, {"instruction": "Create a Python loop that iterates for 10 times.", "input": "", "output": "for i in range(10):\n    ...", "category": "Python"}, {"instruction": "Create a function 'removeLetters' that takes a string and removes all instances of a given letter from it.", "input": "String = \"This string contains multiple letter t's.\"\nLetter = 't'", "output": "def removeLetters(inputString, letter):\n    outputString = \"\"\n    for c in inputString:\n        if c != letter:\n            outputString = outputString + c\n    return outputString\n\nprint(removeLetters(\"This string contains multiple letter t's.\", 't'))\n\nOUTPUT:\n\"This string contains multiple letter s.\"", "category": "Python"}, {"instruction": "Create an algorithm in Python to print the string \u201cwelcome\u201d n times.", "input": "", "output": "def print_welcome(n):\n    for i in range(n):\n        print(\"Welcome\")", "category": "Python"}, {"instruction": "Generate a random password consisting of alphanumeric characters and special characters.", "input": "", "output": "import string \nimport random \n  \ndef randomPassword(): \n    password_characters = string.ascii_letters +  string.digits + '!@#$%^&*()'\n    password = random.choice(string.ascii_lowercase) #Include atleast one lowercase\n    password += random.choice(string.ascii_uppercase) #Include atleast one uppercase\n    password += random.choice(string.digits) #Include atleast one number\n    password += random.choice(string.punctuation) #Include atleast one special character\n\n    for i in range(8):\n        password += random.choice(password_characters)\n\n    return password", "category": "Python"}, {"instruction": "Implement a text classifier for recognizing phrases that are indicative of anger in a sentence.", "input": "He threw the ball so hard, his anger couldn't be concealed.", "output": "def is_angry(sentence): \n    angry_phrases = [\"angry\", \"enraged\", \"aggrieved\", \"ineluctably\", \"ireful\", \n                    \"lusty\", \"tedious\", \"vexed\", \"irked\", \"wrath\"] \n    words_in_sentence = sentence.lower().split(\" \")\n\n    for phrase in angry_phrases: \n        if phrase in words_in_sentence: \n            return True \n    return False", "category": "Python"}, {"instruction": "Using the given input, output the longest word in the array.", "input": "words = [\"water\", \"grand\", \"piano\", \"mountain\"]", "output": "def longest(words): \n    max_len = 0\n    \n    for i in range(0, len(words)): \n        if (len(words[i]) > max_len): \n            max_len = len(words[i])\n            longest = words[i] \n  \n    return longest", "category": "Python"}, {"instruction": "Make a function that adds two lists of numbers together element-wise.", "input": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]", "output": "def add_lists(list1, list2): \n    res = [] \n    for i in range(0, len(list1)): \n        res.append(list1[i] + list2[i]) \n    return res", "category": "Python"}, {"instruction": "Create a function that evaluates the quadratic equation.", "input": "", "output": "def quadratic_equation(a,b,c):\n   discriminant = pow(b,2)-4*a*c\n   if(discriminant < 0):\n      return \"No real solutions\"\n   elif(discriminant == 0):\n      return (-b + pow(discriminant, 0.5))/(2*a)\n   else:\n      return ((-b + pow(discriminant, 0.5))/(2*a), (-b - pow(discriminant, 0.5))/(2*a))", "category": "Python"}, {"instruction": "Write a Python function that calculates the cosine distance between two vectors.", "input": "vector1 = [1, 2, 3]\nvector2 = [4, 5, 6]", "output": "def cosine_distance(a, b):\n  numerator = 0 \n  sum_a_sq = 0 \n  sum_b_sq = 0\n  for (x, y) in zip(a, b):\n    numerator += x*y\n    sum_a_sq += x**2\n    sum_b_sq += y**2\n  \n  denominator = (sum_a_sq * sum_b_sq)**.5\n  return numerator/denominator\n\ncosine_distance(vector1, vector2)", "category": "Python"}, {"instruction": "Create a function that takes in two parameters\u2015a main word and a searching word\u2015and checks if the searching word is present in the main word.", "input": "main_word = \"Hello\"\nsearching_word = \"el\"", "output": "def search_word(main_word, searching_word):\n    \"\"\"Check if the searching word is present in the main word.\"\"\"\n\n    # iterate over the main word, and check if \n    # any substring is equal to the searching word\n    for i in range(0, len(main_word)):\n        if main_word[i:(i + len(searching_word))] == searching_word:\n            return True\n\n    return False", "category": "Python"}, {"instruction": "Modify the given code to find the factorial of a specified number.", "input": "def factorial_(num):\n    \"\"\"Find the factorial of a given number\"\"\"\n    # TODO\n    return 1", "output": "def factorial_(num):\n    \"\"\"Find the factorial of a given number\"\"\"\n\n    # initialize the value of factorial\n    factorial = 1\n\n    # multiply the number with the numbers \n    # below its value to get the factorial\n    for i in range(1, num+1):\n        factorial *= i\n    \n    return factorial", "category": "Python"}, {"instruction": "Create a function that takes in three parameters, a main string, searching substring, and a replacement string, and returns the main string with all occurrences of the searching substring replaced by the replacement string.", "input": "main_string = \"Helllllllllllo World\"\nsearching_substring = \"lllllllll\"\nreplacement_string = \"y\"", "output": "def replace_string(main_string, searching_substring, replacement_string):\n    \"\"\"Replace all occurrences of the searching substring in the main string with the replacement string.\"\"\"\n    \n    # replace all occurrences of the searching substring with the replacement string\n    replaced_string = main_string.replace(searching_substring, replacement_string)\n\n    return replaced_string", "category": "Python"}, {"instruction": "Create a function that searches for elements in an array and returns the index position of the element.", "input": "array = [3, 7, 11, 14, 19]\nelement = 11", "output": "def search_for_element(array, element):\n    \"\"\"Search array for element and return index position.\"\"\"\n\n    for i in range (0, len(array)): #loop through array\n        if array[i] == element: #check if element is equal to the value in the array\n            return i #return index position\n\n    return -1 #if element is not found, return -1", "category": "Python"}, {"instruction": "Parse a list of numbers from a string in Python.", "input": "s = \"1, 2, 3, 4, 5, 6\"", "output": "import re\nlist = re.findall(r'\\d+', s)", "category": "Python"}, {"instruction": "Rewrite this function to use a binary search instead.", "input": "def linear_search(arr, x): \n    for i in range (len(arr)): \n        if arr[i] == x: \n            return i \n    return -1", "output": "def binary_search(arr, x): \n    start = 0\n    end = len(arr) - 1\n  \n    while start <= end: \n        mid = start + (end - start) // 2 \n        if arr[mid] == x: \n            return mid \n        elif arr[mid] < x: \n            start = mid + 1\n        else: \n            end = mid - 1  \n    return -1", "category": "Python"}, {"instruction": "Describe how to use the reduce() function in Python.", "input": "", "output": "The reduce() function in Python is used to apply a particular function passed in its argument to all of the list elements mentioned in the sequence passed along. This function is defined in the \u201cfunctools\u201d module. It applies the function in a manner that the resultant of the function of the current element and the next element is the new element, and so the process continues until the end of the list is reached. For example, to find the sum of all elements in a list:\n\nlist_nums = [2, 3, 4]\n\ndef list_sum(x, y):\n     return x + y\n\nlist_sum = reduce(list_sum, list_nums)\n\nprint(\"Output:\", list_sum)", "category": "Python"}, {"instruction": "Output true if a given expression evaluates to true and false if it doesn't.", "input": "expression = \"2 + 2 == 4\"", "output": "\"\"\"\nOutput true if a given expression evaluates to true and false if it doesn't\n\"\"\"\n\nexpression = \"2 + 2 == 4\"\n\ndef evaluate_expression(expression):\n    return eval(expression)\n\nif __name__ == '__main__': \n    print(evaluate_expression(expression))", "category": "Python"}, {"instruction": "Write a code to find the two largest numbers in an array and return them in reverse order.", "input": "array = [7,2,9,3,1,5]", "output": "\"\"\"\nFind the two largest numbers in an array and return them in reverse order\n\"\"\" \n\narray = [7,2,9,3,1,5]\n\ndef largest_numbers(array):\n    largest = 0\n    second_largest = 0\n    for i in array:\n        if i > largest:\n            second_largest = largest\n            largest = i\n        elif i > second_largest:\n            second_largest = i\n    return [largest, second_largest]\n \nif __name__ == '__main__':\n    print(largest_numbers(array))", "category": "Python"}, {"instruction": "Create a text-based game in Python.", "input": "", "output": "print(\"Welcome to the Text-Based Adventure Game!\") \n    \nplayer_name = input(\"What is your name? \") \n    \nprint(\"Hello \" + player_name + \", let's begin!\") \n    \nprint(\"You are walking through a dark forest, it is very quiet and there is a strange feeling of unease\") \n\nwhile True: \n    print(\"What do you want to do? (Enter 'help' for a list of commands)\") \n\n    player_action = input() \n\n    if player_action == 'help': \n        print(\"Here are the commands you can use: move, search, look, take, inventory\") \n    elif player_action == 'move': \n        print(\"Which direction do you want to move? Enter 'north', 'south', 'east' or 'west'\") \n    elif player_action == 'search':\n        print(\"You search the area and find a mysterious-looking object\") \n    elif player_action == 'look': \n        print(\"You look around and see nothing special\") \n    elif player_action == 'take': \n        print(\"You take the item and add it to your inventory\") \n    elif player_action == 'inventory': \n        print(\"You check your inventory and see the mysterious-looking object\") \n    else: \n        print(\"That command does not exist. Please enter 'help' for a list of commands\")", "category": "Python"}, {"instruction": "Given a 2D array of binary values and another 2D array, find the indices of the first array where the values of both arrays are equivalent.", "input": "array1 = [[1, 0, 0, 1],[1, 0, 1, 0],[0, 0, 0, 1],[1, 0, 1, 0]]\narray2 = [[1, 0, 1, 0], [1, 0, 0, 1], [0, 0, 0, 1], [1, 0, 0, 1]]", "output": "def find_empty_position(array1, array2):\n    results = []\n    for i in range(len(array1)):\n        for j in range(len(array1[0])):\n            if array1[i][j] == array2[i][j] and array1[i][j] == 0:\n                results.append((i, j))\n    return results", "category": "Python"}, {"instruction": "Write a function that checks if a given list of integers is sorted in ascending order.", "input": "", "output": "def is_ascending_order(nums):\n    if len(nums) == 0 or len(nums) == 1:\n        return True\n    if nums[0] < nums[1]:\n        return is_ascending_order(nums[1:])\n    return False", "category": "Python"}, {"instruction": "Given a 2D matrix of integers, retrive the maximum sum submatrix.", "input": "[[2,-2,3,4],[-4,-3,1,1],[-1,5,5,-3]]", "output": "def max_sum_submatrix(matrix):\n    rows, columns = len(matrix), len(matrix[0])\n    dp = [[0] * columns for _ in range(rows)]\n    for i in range(rows):\n        for j in range(columns):\n            dp[i][j] = matrix[i][j]\n            if i > 0:\n                dp[i][j] += dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i][j-1]\n            if i > 0 and j > 0:\n                dp[i][j] -= dp[i-1][j-1]\n                \n    max_sum = float('-inf')\n    for r1 in range(rows):\n        for r2 in range(r1, rows):\n            for c1 in range(columns):\n                for c2 in range(c1, columns):\n                    current_sum = dp[r2][c2]\n                    if r1 > 0:\n                        current_sum -= dp[r1-1][c2]\n                    \n                    if c1 > 0:\n                        current_sum -= dp[r2][c1-1]\n                    \n                    if r1 > 0 and c1 > 0:\n                        current_sum += dp[r1-1][c1-1]\n                    \n                    max_sum = max(max_sum, current_sum)\n    return max_sum", "category": "Python"}, {"instruction": "Given a 2D matrix of integers, find a path from the leftmost column to the right-most column that maximises the sum of numbers.", "input": "[[3,4,7,2],\n[2,7,4,1],\n[7,1,2,4],\n[8,2,2,7]]", "output": "def max_sum_path(matrix):\n    rows, columns = len(matrix), len(matrix[0])\n    dp = [[float(\"-inf\") for i in range(columns)] for j in range(rows)]\n    dp[0][0] = matrix[0][0]\n    for i in range(rows):\n        for j in range(columns):\n            if i > 0:\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + matrix[i][j])\n            if j > 0:\n                dp[i][j] = max(dp[i][j], dp[i][j-1] + matrix[i][j])\n    return dp[-1][-1]", "category": "Python"}, {"instruction": "Create a class in Python to build a Frequency Table from a given array of numbers.", "input": "[1,1,1,2,2,3,3,3]", "output": "class FrequencyTable:\n    def __init__(self, arr):\n        self.table = {}\n        for num in arr:\n            if num in self.table:\n                self.table[num] += 1\n            else:\n                self.table[num] = 1\n    def query(self, num):\n        return self.table.get(num, 0)", "category": "Python"}, {"instruction": "Write a function to create a deep copy of a JSON object.", "input": "", "output": "def deep_copy(json_object):\n    import json\n    return json.loads(json.dumps(json_object))", "category": "Python"}, {"instruction": "How would you check if a list of integers contains only even numbers?", "input": "", "output": "The easiest way to check if a list of integers contains only even numbers is to iterate over the list and check if each element is divisible by 2. If all elements are divisible by 2, then the list contains only even numbers.\n\n\ndef check_even(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return False \n    return True\n        \n\nlist_of_nums = [2, 4, 6]\n\nresult = check_even(list_of_nums)\nprint(result) # Output: True", "category": "Python"}, {"instruction": "Create a Python program to define a factorial of a given number.", "input": "", "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)", "category": "Python"}, {"instruction": "Define a function to print out the elements in a list without using a loop.", "input": "", "output": "def print_elements(my_list):\n    if not my_list: \n        return\n    print(my_list[0])\n    print_elements(my_list[1:])", "category": "Python"}, {"instruction": "Make an algorithm to rotate a matrix by 90 degrees.", "input": "[[1,2,3], \n[4,5,6], \n[7,8,9]]", "output": "def rotate_90_degrees(matrix):\n    n = len(matrix[0]) \n    result = [[0 for x in range(n)] for y in range(n)]  \n    for i in range(n): \n        for j in range(n): \n            result[j][n-i-1] = matrix[i][j] \n    return result", "category": "Python"}, {"instruction": "Design an algorithm to rotate a given array in clockwise direction by a given index.", "input": "array = [1, 2, 3, 4, 5] index = 2", "output": "def rotateArray(arr, index):\n    n = len(arr)\n    temp = []\n\n    for i in range(n):\n        temp.append(arr[(i + index) % n])\n    \n    for i in range(n):\n        arr[i] = temp[i]\n        \n    return arr\n\n# Test\narr = [1, 2, 3, 4, 5] \nindex = 2\nrotated = rotateArray(arr, index)\n\n# Output  \nprint(rotated)\n# [3, 4, 5, 1, 2]", "category": "Python"}, {"instruction": "Given a binary tree, write a function to print out the elements in level order.", "input": "", "output": "def levelOrder(root): \n    if root is None: \n        return\n    queue = [] \n    queue.append(root)  \n    while(len(queue) > 0): \n        print (queue[0].data), \n        node = queue.pop(0)  \n        if node.left is not None: \n            queue.append(node.left) \n        if node.right is not None: \n            queue.append(node.right)", "category": "Python"}, {"instruction": "Create a function to filter out all numbers evenly divisible by 5.", "input": "numbers = [10, 30, 45, 50, 16, 41]", "output": "def divisible_by_five(numbers):\n  new_list = []\n  for num in numbers:\n    if num % 5 == 0:\n      new_list.append(num)\n  return new_list", "category": "Python"}, {"instruction": "Create an HTTP request to get the data from the given API and parse it into a JSON object.", "input": "https://example.com/api/getData", "output": "import requests \n\nurl = \"https://example.com/api/getData\"\nresponse = requests.get(url)\ndata = response.json()", "category": "Python"}, {"instruction": "Write a shell script that download and install the latest version of Python 3.", "input": "", "output": "# Get the latest version of Python\nlatest_python=$(curl -s https://www.python.org/ftp/python/)\n# Get the filename from the link\npython_filename=\"${latest_python##*/}\"\n# Download the version\nwget https://www.python.org/ftp/python/$python_filename\n# Unpack the file\ntar -xzf $python_filename\n# Install Python\ncd $python_filename\n./configure --prefix=/usr/local/bin\nmake\nmake install", "category": "Python"}, {"instruction": "Write a function that transposes a 2D array from column-major format to row-major format.", "input": "The array is [[1,2,3],[4,5,6],[7,8,9]]", "output": "def transpose(matrix):\n    row_major = []\n    row, col = len(matrix), len(matrix[0])\n    for i in range(col):\n        row_major.append([])\n        for j in range(row):\n            row_major[i].append(matrix[j][i])\n\n    return row_major", "category": "Python"}, {"instruction": "Given the following list, write a program to sort it in ascending order.", "input": "[3, 4, -5, 6, 1, -2]", "output": "def bubbleSort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                \n    return arr \n\narr = [3, 4, -5, 6, 1, -2]\nprint(bubbleSort(arr))", "category": "Python"}, {"instruction": "Build a Python program to generate a prime numbers list in a given range.", "input": "", "output": "def prime_numbers(start_num, end_num):\n    prime_nums_list = []\n    for num in range(start_num, end_num + 1):  \n        # all prime numbers are greater than 1  \n        if num > 1:  \n            for i in range(2,num):  \n                if (num % i) == 0:  \n                    break  \n            else:  \n                prime_nums_list.append(num)\n\n    return prime_nums_list", "category": "Python"}, {"instruction": "You are given a 2D array and you need to rotate it 90 degrees clockwise.", "input": "array = [\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12],\n    [13, 14, 15, 16],\n  ]", "output": "def rotate90(arr):\n    new_arr = [[row[i] for row in arr[::-1]] for i in range(len(arr[0]))]\n    return new_arr", "category": "Python"}, {"instruction": "How can we create an exclusive truth table using the boolean operators in Python?", "input": "", "output": "truth_table = {\"p\": [True, False],\n               \"q\": [True, False], \n               \"p \u2295 q\": [(not(p) and q) or (p and not(q)) for p in truth_table[\"p\"] for q in truth_table[\"q\"]]}", "category": "Python"}, {"instruction": "Write a short class in Python that will print a custom message when created.", "input": "", "output": "class CustomMessage:\n    def __init__(self):\n        print(\"This is a custom message!\")", "category": "Python"}, {"instruction": "Convert this function from a for loop to a while loop.", "input": "def cumsum(lst):\n    sum = 0\n    new_lst = []\n    for n in lst:\n        sum += n\n        new_lst.append(sum)\n    return new_lst", "output": "def cumsum(lst):\n    sum = 0\n    new_lst = []\n    i = 0\n    while i < len(lst):\n        sum += lst[i]\n        new_lst.append(sum)\n        i += 1\n    return new_lst", "category": "Python"}, {"instruction": "Explain why this code doesn't work.", "input": "def celsius_to_fahrenheit(celsius):\n    return celsius + 5", "output": "This code doesn't work because it doesn't follow the formula for converting Celsius temperatures to Fahrenheit. The formula for converting Celsius to Fahrenheit is F = (C * 9/5) + 32, where F is the Fahrenheit temperature and C is the Celsius temperature. The code provided only adds 5 to the Celsius temperature, which is incorrect and results in an incorrect conversion.", "category": "Python"}, {"instruction": "Create a function to filter out positive numbers from a given array.", "input": "numbers = [-5, 3, 7, -2, 4, 9]", "output": "def filter_positives(numbers):\n    result_list = []\n    for element in numbers:\n        if element >= 0:\n            result_list.append(element)\n    return result_list", "category": "Python"}, {"instruction": "From a given list, remove all elements that have a prime index.", "input": "list = [4, 7, 10, 11, 14]", "output": "def remove_primes(list):\n   modified_list = []\n   for idx, num in enumerate(list):\n       if is_prime(idx) == False:\n           modified_list.append(num)\n   return modified_list", "category": "Python"}, {"instruction": "give an example of a natural language processing task solved using supervised learning.", "input": "", "output": "One example of a natural language processing task solved using supervised learning is sentiment analysis. Through supervised learning, sentiment analysis models classify text as sentimentally positive or negative, with inputs such as words, phrases, and conversations. Supervised learning algorithms are often used to train the model by using labeled data, such as customer reviews that have been labeled as positive or negative. With enough data, supervised learning algorithms learn to determine the sentiment associated with given text.", "category": "Python"}, {"instruction": "Write an algorithm that verifies whether an integer is a prime number", "input": "", "output": "def prime_check(n):\n    if n < 2: \n        return False\n    if n == 2: \n        return True\n    if not n & 1: \n        return False\n    for x in range(3, int(n**0.5) + 1, 2):\n        if n % x == 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Create a function that filters an array for all numbers greater than the given number.", "input": "", "output": "def filter_array(arr, num):\n    return [x for x in arr if x > num]", "category": "Python"}, {"instruction": "Build a convolution neural network using tensorflow that takes a single input and classify it into one of three categories.", "input": "", "output": "import tensorflow as tf\n\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Conv2D(32, 3, activation=\"relu\", input_shape=(28, 28, 1)))\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(64, activation=\"relu\"))\nmodel.add(tf.keras.layers.Dense(3, activation=\"softmax\"))\n\nmodel.compile(optimizer=\"adam\",\n              loss=\"categorical_crossentropy\",\n              metrics=[\"accuracy\"])", "category": "Python"}, {"instruction": "Create a Tkinter app with a label and a button.", "input": "", "output": "import tkinter as tk\n\nroot = tk.Tk()\nframe = tk.Frame(root)\nframe.pack()\n\nlabel = tk.Label(frame, text=\"Hello World!\")\nlabel.pack()\n\nbutton = tk.Button(frame, text=\"Exit\", command=frame.quit)\nbutton.pack()\n\nroot.mainloop()", "category": "Python"}, {"instruction": "Write a POST request to update a user's name in the following JSON format.", "input": "{\n \"id\": \"123456\",\n \"name\": \"John Doe\"\n}", "output": "import requests\n\ndata = {\n \"id\": \"123456\",\n \"name\": \"John Doe\"\n}\n\nurl = \"http://example.com/update-user-name\"\n\nresponse = requests.post(url, json=data)", "category": "Python"}, {"instruction": "Analyze the following modified code and explain what the modified code does", "input": "int x = 10;\nif (x == 10)\n  x = x + 10;\nelse\n  x = x - 10;", "output": "The modified code checks if the value of the variable x is equal to 10. If it is, it adds 10 to x, otherwise it subtracts 10. So the value of x will now be 20 if it was 10 initially, or 0 if it was not.", "category": "Python"}, {"instruction": "Design a recursive algorithm to generate the Fibonacci sequence.", "input": "", "output": "def Fibonacci(n): \n   if n<0: \n      print(\"Incorrect input\") \n   # First Fibonacci number is 0 \n   elif n==0: \n      return 0\n   # Second Fibonacci number is 1 \n   elif n==1: \n      return 1\n   else: \n      return Fibonacci(n-1)+Fibonacci(n-2)", "category": "Python"}, {"instruction": "Modify a given program to replace each element in an array with the sum of all elements before it.", "input": "[1,2,3,4]", "output": "def pref_sum(a):\n    output = [a[0]]\n    for i in range(1, len(a)):\n        output.append(a[i] + output[i-1])\n    return output", "category": "Python"}, {"instruction": "Write a python script that takes user input and prints out the squares of the numbers", "input": "", "output": "# Take input from user\nnumbers = input(\"Enter numbers: \") \n  \n# split the string \nnumbers = list(map(int, numbers.split(' '))) \n  \n# Loop to print the squares of numbers\nfor number in numbers:\n    print(number*number)", "category": "Python"}, {"instruction": "Create and fill a 2-dimensional list with the dimensions n and m.", "input": "n = 3, m = 5", "output": "list_2d = [[0 for i in range(m)] for j in range(n)]", "category": "Python"}, {"instruction": "Generate a Jupyter notebook to display a scatterplot of a given dataset.", "input": "Data: [[5.1, 3.5], [1.4, 2.3], [3.3, 4.3], [3.6, 2.7]]", "output": "#Import relevant packages \nimport pandas as pd \nimport matplotlib.pyplot as plt\n\n#Create dataframe\ndata = [[5.1, 3.5], [1.4, 2.3], [3.3, 4.3], [3.6, 2.7]]\ndf = pd.DataFrame(data, columns = ['x','y']) \n  \n#Create scatterplot\nplt.scatter(x=df[\"x\"], y=df[\"y\"])\n\n#Name axes\nplt.xlabel('x')\nplt.ylabel('y')\n\n#Show figure\nplt.show()", "category": "Python"}, {"instruction": "Write a script in Python that can classify a sentence as positive or negative.", "input": "The movie was terrible and boring.", "output": "import nltk\nfrom nltk.sentiment import SentimentIntensityAnalyzer\n\nsentence = \"The movie was terrible and boring.\"\nanalysis = SentimentIntensityAnalyzer()\nscore = analysis.polarity_scores(sentence)\nif score[\"compound\"] >= 0.5:\n    output = \"positive\"\nelse:\n    output = \"negative\"\n\nprint(\"The sentiment of the sentence is:\", output)", "category": "Python"}, {"instruction": "Write code in Python to calculate the area of a triangle given 3 sides.", "input": "side1 = 12\nside2 = 15\nside3 = 10", "output": "def areaTriangle( side1, side2, side3): \n    # calculate the semi-perimeter \n    s = (side1 + side2 + side3) / 2\n    \n    # calculate the area \n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    return area \n\n# Driver code \nside1 = 12\nside2 = 15\nside3 = 10\n\n# calculate area \narea = areaTriangle(side1, side2, side3) \n\n# print\nprint(\"Area of a triangle is :{0:0.2f}\".format(area))", "category": "Python"}, {"instruction": "Design a function in Python for computing the multiplication of 3 numbers.", "input": "4, 5, 6", "output": "def multiply_three(a, b, c):\n    return a * b * c\n\nmultiply_three(4, 5, 6) # returns 120", "category": "Python"}, {"instruction": "Design a program to generate prime numbers between 1 and 50.", "input": "", "output": "# Program to print the prime numbers between 1 and 50\n \nfor num in range(1, 51):\n\n   # prime numbers are greater than 1\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:  \n           print(num)", "category": "Python"}, {"instruction": "Formulate an algorithm that helps you arrange a given set of numbers in ascending order.", "input": "[7, 4, 8, 9, 11]", "output": "1. Take two variables, say x and y. \n2. Assign x the value of the first element in the list and y the value of the second element.\n3. Compare x and y. \n4. If x > y, swap them.\n5. Now x is the smallest and move to the next element in the list. Repeat from step 2 with y and new element.\n6. At the end of the array, the list is sorted.", "category": "Python"}, {"instruction": "What is the command to delete all occurrences of the element \"5\" from a given Python array?", "input": "", "output": "arr = [3, 4, 5, 2, 5, 1, 5]\narr = [x for x in arr if x != 5]", "category": "Python"}, {"instruction": "Compute the square root of the number 25 and store the output in a variable called 'output'.", "input": "", "output": "import math\noutput = math.sqrt(25)", "category": "Python"}, {"instruction": "Create a function that takes a String and adds a period punctuation mark at the end.", "input": "phrase = \"I am having a good day\"", "output": "def add_period(phrase):\n    if not isinstance(phrase, str):\n        raise ValueError(\"phrase should be a String\")\n    return phrase + \".\"", "category": "Python"}, {"instruction": "Design a program to solve a 3x3 Sudoku puzzle.", "input": "", "output": "# A Backtracking program  \n# in Python to solve Sudoku problem  \n  \n# A Utility Function to print the Grid  \ndef print_grid(arr): \n    for i in range(9): \n        for j in range(9): \n            print(arr[i][j]), \n        print ('n') \n  \n# Function to Find the entry in the Grid that is still  not used \n# Searches the grid to find an entry that is still unassigned. If \n# found, the reference parameters row, col will be set the location \n# that is unassigned, and true is returned. If no unassigned entries \n# remain, false is returned. \n# 'l' is a list  variable that has been passed from the solve_sudoku function \n# to keep track of incrementation of Rows and Columns \ndef find_empty_location(arr,l): \n    for row in range(9): \n        for col in range(9): \n            if(arr[row][col]==0): \n                l[0]=row \n                l[1]=col \n                return True\n    return False\n  \n# Returns a boolean which indicates whether any assigned entry \n# in the specified row matches the given number. \ndef used_in_row(arr,row,num): \n    for i in range(9): \n        if(arr[row][i] == num): \n            return True\n    return False\n  \n# Returns a boolean which indicates whether any assigned entry \n# in the specified column matches the given number. \ndef used_in_col(arr,col,num): \n    for i in range(9): \n        if(arr[i][col] == num): \n            return True\n    return False\n  \n# Returns a boolean which indicates whether any assigned entry \n# within the specified 3x3 box matches the given number \ndef used_in_box(arr,row,col,num): \n    for i in range(3): \n        for j in range(3): \n            if(arr[i+row][j+col] == num): \n                return True\n    return False\n  \n# Checks whether it will be legal to assign num to the given row,col \n# Returns a boolean which indicates whether it will be legal to assign \n# num to the given row,col location. \ndef check_location_is_safe(arr,row,col,num): \n      \n    # Check if 'num' is not already placed in current row, \n    # current column and current 3x3 box \n    return not used_in_row(arr,row,num) and not used_in_col(arr,col,num) and not used_in_box(arr,row - row%3,col - col%3,num) \n  \n# Takes a partially filled-in grid and attempts to assign values to \n# all unassigned locations in such a way to meet the requirements \n# for Sudoku solution (non-duplication across rows, columns, and boxes) \ndef solve_sudoku(arr): \n      \n    # 'l' is a list variable that keeps the record of row and col in find_empty_location Function     \n    l=[0,0] \n      \n    # If there is no unassigned location, we are done     \n    if(not find_empty_location(arr,l)): \n        return True\n      \n    # Assigning list values to row and col that we got from the above Function  \n    row=l[0] \n    col=l[1] \n      \n    # consider digits 1 to 9 \n    for num in range(1,10): \n          \n        # if looks promising \n        if(check_location_is_safe(arr,row,col,num)): \n              \n            # make tentative assignment \n            arr[row][col]=num \n  \n            # return, if success, ya! \n            if(solve_sudoku(arr)): \n                return True\n  \n            # failure, unmake & try again \n            arr[row][col] = 0\n              \n    # this triggers backtracking         \n    return False \n  \n# Driver main function to test above functions \nif __name__==\"__main__\": \n      \n    # creating a 2D array for the grid \n    grid=[[0 for x in range(9)]for y in range(9)] \n      \n    # assigning values to the grid \n    grid=[[3,0,6,5,0,8,4,0,0], \n          [5,2,0,0,0,0,0,0,0], \n          [0,8,7,0,0,0,0,3,1], \n          [0,0,3,0,1,0,0,8,0], \n          [9,0,0,8,6,3,0,0,5], \n          [0,5,0,0,9,0,6,0,0], \n          [1,3,0,0,0,0,2,5,0], \n          [0,0,0,0,0,0,0,7,4], \n          [0,0,5,2,0,6,3,0,0]] \n      \n    # if sucess print the grid \n    if(solve_sudoku(grid)): \n        print_grid(grid)\n    else: \n        print \"No solution exists\"", "category": "Python"}, {"instruction": "Offer a solution for converting a bank of binary strings, represented as an array, to Decimal numbers.", "input": "", "output": "def binaryToDecimal(binary): \n    # to store decimal number \n    decimal, i = 0, 0\n    while(binary != 0): \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i = i + 1\n    return decimal", "category": "Python"}, {"instruction": "Design a program to search for a given string within an array of strings.", "input": "arr = ['hello', 'world', 'how', 'are', 'you']\ngiven_str = 'how'", "output": "def search(arr, given_str):\n    for item in arr:\n        if item == given_str:\n            return True\n    return False", "category": "Python"}, {"instruction": "Suppose you are given a array of 0s,1s and 2s . Write a program to sort the given input array.", "input": "", "output": "def sortArray(arr): \n      \n    # loop to run for every element in the array \n    for i in range(len(arr)): \n          \n        # loop to run for elements till the sorted part \n        for j in range(0, len(arr)-i-1): \n  \n            # If a element is found to be greater than its next element then swap them \n            if arr[j] == 2 and arr[j+1] in [0,1]: \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n            elif arr[j] == 1 and arr[j+1] == 0: \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n                  \n    return arr", "category": "Python"}, {"instruction": "Write a function to compare two strings. The function should return true if the strings are equal and false if the strings are not equal.", "input": "string_1 = \"Hello\"\nstring_2 = \"World\"", "output": "def compare_strings(string_1, string_2):\n if string_1 == string_2:\n    return True\n else:\n    return False", "category": "Python"}, {"instruction": "Create a program in Python that sorts the following list and prints the sorted version of the list.", "input": "mylist = [1, 5, 9, 2, 6, 8]", "output": "mylist = [1, 5, 9, 2, 6, 8]\nmylist.sort()\nprint(mylist)", "category": "Python"}, {"instruction": "Create a machine learning model to predict a binary class.", "input": "", "output": "# import the necessary libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# preprocess the data\ndf = pd.read_csv('data.csv')\nX = df.drop('target', axis=1)\ny = df['target']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# train the model\nlr = LogisticRegression().fit(X_train, y_train)\n\n# evaluate the model\ntrain_score = lr.score(X_train, y_train)\ntest_score = lr.score(X_test, y_test)\nprint(f\"Train score: {train_score}\")\nprint(f\"Test score: {test_score}\")", "category": "Python"}, {"instruction": "Inspect the given code and find any possible bugs.", "input": "def find_sum(lst):\n    \"\"\"Return the sum of a given list of numbers.\"\"\"\n    res = 0\n    for x in list:\n        res += x\n    return res", "output": "def find_sum(lst):\n    \"\"\"Return the sum of a given list of numbers.\"\"\"\n    res = 0\n    for x in lst:\n        res += x\n    return res # was missing, was iterating over list instead of lst.", "category": "Python"}, {"instruction": "Create a function in Python that takes two lists as arguments and returns a dictionary with elements of the first list as keys and elements of the second list as values.", "input": "list1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]", "output": "def zip_lists(list1, list2):\n  zipped_dict = {}\n  for k, v in zip(list1, list2):\n    zipped_dict[k] = v\n  return zipped_dict\n\nprint(zip_lists(list1, list2))", "category": "Python"}, {"instruction": "Explain the use of a for loop in programming and when you would use it.", "input": "", "output": "A for loop is a type of loop used in programming to execute a set of code multiple times. For loops use an iterable object to iterate over a sequence of statements, such as a list or a string. For loops are typically used to traverse through a sequence of elements, perform a set of calculations or operations on each element, and once the operations are complete, move on to the next element until the list has been exhausted. For loops can also be used to execute a set of statements a certain number of times, or while a certain condition is true. One example would be iterating through a list of numbers and printing their sum to the console. Another example would be running a loop until a certain value is reached or exceeded, such as in calculating the factorial of a number.", "category": "Python"}, {"instruction": "A given array contains the numbers 1, 5, 9 and 13. Write a function to find out if 15 is present in the array or not.", "input": "array = [1, 5, 9, 13]", "output": "def findNumber(array):\n    return 15 in array", "category": "Python"}, {"instruction": "Develop a function in Python to delete the duplicates of a given string.", "input": "string = 'Hello World!'", "output": "def deleteDuplicates(string):\n    unique_string = ''\n    for i in string:\n        if i not in unique_string:\n            unique_string += i\n    return unique_string", "category": "Python"}, {"instruction": "Suppose you have a dictionary containing the records of some student marks. Write a Python program to calculate the average marks of all the students.", "input": "student_mark_dict = {\n    'John': [50, 70, 60],\n    'Harry': [20, 60, 80],\n    'Tom': [90, 70, 80] \n}", "output": "def averageMarks(student_mark_dict):\n    total = 0\n    total_marks = 0\n    for key, value in student_mark_dict.items():\n        total += sum(value)\n        total_marks += len(value)\n        \n    return total/total_marks", "category": "Python"}, {"instruction": "Develop a Python function to calculate a Fibonacci number based on a given index.", "input": "", "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n        \n    elif n==1: \n        return 0\n    \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)", "category": "Python"}, {"instruction": "Create a program in Python that takes two numbers as input and prints the result of the multiplication of those numbers.", "input": "num_1 = 10\nnum_2 = 15", "output": "num_1 = 10\nnum_2 = 15\nprint(num_1 * num_2)", "category": "Python"}, {"instruction": "Write a function to remove a given element from an array of integers.", "input": "arr = [2, 3, 4, 5, 6]\nremove_element = 4", "output": "def remove_element(arr, remove_element):\n    new_arr = []\n    for item in arr:\n        if item != remove_element: \n            new_arr.append(item)\n    return new_arr", "category": "Python"}, {"instruction": "Write Python code to group list elements into sublists of particular length.", "input": "[1,2,3,4,5,6,7,8]", "output": "def group_by_length(arr, k): \n\tn = len(arr)\n\tgroups = [arr[i:i+k] for i in range(0, n, k)] \n\treturn groups\n\na = [1,2,3,4,5,6,7,8] \nk = 3\nprint(group_by_length(a, k))", "category": "Python"}, {"instruction": "Convert a number from decimal to octal in Python.", "input": "number = 109", "output": "decimal  = 109    \noctal = format(decimal, 'o')  \n\nprint(\"Decimal:\", decimal)\nprint(\"Octal:\", octal)", "category": "Python"}, {"instruction": "Implement a Python class that prints a given given text when a certain condition is satisfied.", "input": "Print a text \"Endless fun\" when the numbers given in a list equals to 10", "output": "class MyClass:\n    def __init__(self, given_list):\n        self.given_list = given_list\n    \n    def check_equal_to_10(self):\n        if len(self.given_list) == 0:\n            return False\n        for num in self.given_list:\n            if num != 10:\n                return False\n        print(\"Endless fun\")\n        return True", "category": "Python"}, {"instruction": "Perform an insertion sort on the given list.", "input": "List: [9, 5, 4, 8, 6]", "output": "def insertionSort(arr):\n   # Traverse through 1 to len(arr) \n   for i in range(1, len(arr)): \n  \n     key = arr[i] \n  \n     # Move elements of arr[0..i-1], that are \n     # greater than key, to one position ahead \n     # of their current position\n     j = i-1\n     while j >= 0 and key < arr[j] : \n             arr[j + 1] = arr[j] \n             j -= 1\n     arr[j + 1] = key \n  \n  \n# Driver code\narr = [9, 5, 4, 8, 6]\ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"% d\" % arr[i])\n# Output: Sorted array is: 4 5 6 8 9", "category": "Python"}, {"instruction": "Generate a list of 10 numbers in Python where each number is a multiple of 7 and greater than 40", "input": "", "output": "[x for x in range(41, 100) if x % 7 == 0]\n# Output: [42, 49, 56, 63, 70, 77, 84, 91, 98]", "category": "Python"}, {"instruction": "Edit the code given below so it can compute the sum of two numeric inputs.", "input": "def add_two_numbers(x, y):\n\t# TODO: Write code that computes and returns the sum of two numeric inputs", "output": "def add_two_numbers(x, y):\n  # Compute and return the sum of two numeric inputs\n  return x + y", "category": "Python"}, {"instruction": "Create a code to update the values of an array elements with their cube.", "input": "[1, 2, 3, 4, 5]", "output": "def cubeArrayElements(arr): \n  \n    for i in range(0, len(arr)): \n        arr[i] = arr[i]*arr[i]*arr[i] \n    \n    return arr", "category": "Python"}, {"instruction": "Write a code snippet to find the most frequent number greater than 100 from a list of numbers.", "input": "[102, 130, 102, 140, 150, 60, 70, 102, 140]", "output": "def most_frequent(nums):\n    # Initialize a dictionary to count the frequency \n    # of each number in the list\n    count = {}\n\n    # Iterate through the list and increase the \n    # count of each number in the dictionary\n    for num in nums:\n        if num> 100:\n            if num not in count:\n                count[num] = 1\n            else:\n                count[num] += 1\n    \n    # Find the most frequent number\n    max_count = 0\n    most_frequent_num = 0\n    for k,v in count.items():\n        if v> max_count:\n            most_frequent_num = k\n            max_count = v\n    return most_frequent_num", "category": "Python"}, {"instruction": "Write a code to find elements in an array that is divisible by a given number.", "input": "arr = [5, 15, 20, 25, 30]", "output": "# Function to find elements in an array that is \n# divisible by a given number \ndef isDivisible(arr, num): \n  \n    # Stores result \n    res = [] \n  \n    # Iterate over all elements \n    for i in range(0,len(arr)): \n  \n        # If remainder is 0 then add elements \n        # to result \n        if (arr[i] % num == 0): \n            res.append(arr[i]) \n  \n    return res \n  \n# Driver code \narr = [5, 15, 20, 25, 30] \nnum = 5\n  \n# Print result \nprint(isDivisible(arr,num))", "category": "Python"}, {"instruction": "Parse and extract the dates from a given text.", "input": "The conference will be held on Wednesday, June 16th, 2021", "output": "import re\n\ntext = \"The conference will be held on Wednesday, June 16th, 2021\"\n\n# Extract dates\ndates = re.findall(r'\\d{1,2}[-/.]\\d{1,2}[-/.]\\d{2,4}',text) \n\n# Print the dates\nfor date in dates:\n    print(date)\n    \n# Output\n# 06/16/2021", "category": "Python"}, {"instruction": "Create a new class in Python that extends the existing class named 'Base'.", "input": "", "output": "Class NewClass (Base):\n  def __init__(self):\n    super().__init__()", "category": "Python"}, {"instruction": "Create a pseudocode to solve the FizzBuzz problem.", "input": "", "output": "```\n#For numbers from 1 through 100\nfor i from 1 to 100:\n    #If the number is divisible by both 3 and 5\n    if i is divisible by 3 and 5:\n        #Print FizzBuzz\n        print \"FizzBuzz\"\n    #If the number is divisible only by 3\n    elif i is divisible by 3:\n        #Print Fizz\n        print \"Fizz\"\n    #If the number is divisible only by 5\n    elif i is divisible by 5:\n        #Print Buzz\n        print \"Buzz\"\n    #Otherwise\n    else: \n        #Print the number\n        print i\n```", "category": "Python"}, {"instruction": "Explain different types of sorting algorithms in brief.", "input": "", "output": "There are several types of sorting algorithms which can be used to sort a list of items. The most common ones are Bubble Sort, Insertion Sort, Selection Sort, Quick Sort, Merge Sort and Heap Sort. \n\nBubble Sort works by repeatedly swapping adjacent elements if they are in the wrong order. Insertion Sort works by inserting elements one by one into the correct sorted position. Selection Sort works by repeatedly selecting the minimum (or maximum) element of the unsorted part and placing it at the beginning of the sorted part. Quick Sort works by selecting a pivot element and partitioning the array around the pivot in order to find the correct position of the pivot. Merge Sort works by dividing the array into two halves, sorting each half recursively, and then merging them back together. Heap Sort works by first creating a Max Heap from the list, and then continuously extracting the maximum element from the heap until the list is sorted.", "category": "Python"}, {"instruction": "Create an example of data visualization using Python's matplotlib library.", "input": "", "output": "\"\"\"\nExample of data visualization using Python's matplotlib library\n\"\"\"  \nimport matplotlib.pyplot as plt\n\n#Create two datasets\nx_values = [1, 2, 3, 4, 5]\ny_values = [1, 4, 9, 16, 25]\n\n#Plot the data\nplt.plot(x_values, y_values)\n\n#Label the axes\nplt.xlabel('x values')\nplt.ylabel('y values')\n\n#Show the plot\nplt.show()", "category": "Python"}, {"instruction": "Construct a function to check for an anagram in Python.", "input": "", "output": "def anagram_check(s1, s2):\n    s1 = s1.replace(' ','').lower()\n    s2 = s2.replace(' ','').lower()\n    \n    if(sort(s1) == sort(s2)):\n        return True\n    \n    return False\n    \ndef sort(s):\n    return sorted(s)", "category": "Python"}, {"instruction": "Update the given Python program to reverse a string.", "input": "def reverse_string(s): \n    #insert code here\n    return s", "output": "def reverse_string(s):\n    return s[::-1]", "category": "Python"}, {"instruction": "Construct a function to convert currency amount from USD to INR.", "input": "Current USD to INR ratio: 1 USD = 73.20 INR", "output": "def currency_convert(amount):\n   \n    #Convert amount from USD to INR\n    inr = amount * 73.20 \n    \n    #return the converted currency\n    return inr\n  \n#Test\namount = int(input(\"Enter amount of currency in USD:\")) \n  \nprint(\"The amount in INR:\",currency_convert(amount))", "category": "Python"}, {"instruction": "Reverse the following list of numbers.", "input": "[1, 2, 3, 4]", "output": "def reverse_list(nums):\n    return nums[::-1]\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4]\n    reversed_list = reverse_list(numbers)\n    print(reversed_list)", "category": "Python"}, {"instruction": "Write a function that takes a list of strings and counts the number of each string that contains the letter \"a\".", "input": "['foo', 'bar', 'baz']", "output": "def count_words_with_letter_a(arr):\n    count = 0\n    for s in arr:\n        if 'a' in s:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    words = ['foo', 'bar', 'baz']\n    count = count_words_with_letter_a(words)\n    print(count)", "category": "Python"}, {"instruction": "Edit the following code to make it generate a random number between 1 and 10.", "input": "import random\n\ndef generate_random_number():\n    return random.randint(0, 11)", "output": "import random\n\ndef generate_random_number():\n    return random.randint(1, 10)", "category": "Python"}, {"instruction": "Write a function that takes a numerical parameter and returns True if it is positive and False if it is negative.", "input": "", "output": "def is_positive(num):\n    if num > 0:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    num = 5\n    result = is_positive(num)\n    print(result)", "category": "Python"}, {"instruction": "Modify the following function to only take numbers greater than 10.", "input": "def filter(numbers):\n    return [n for n in numbers if n % 2 == 0]\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "output": "def filter(numbers):\n    return [n for n in numbers if n > 10 and n % 2 == 0]\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Write a function that takes two strings as parameters and returns whether they are an anagram of each other or not.", "input": "string1 = \"abcde\"\n\nstring2 = \"edcba\"", "output": "def is_anagram(string1, string2):\n    if sorted(string1) == sorted(string2):\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    string1 = \"abcde\"\n    string2 = \"edcba\"\n\n    result = is_anagram(string1, string2)\n    print(result)", "category": "Python"}, {"instruction": "Define a class named 'Employee' that stores the ID, name, and age of a person.", "input": "", "output": "class Employee:\n    def __init__(self, ID, name, age):\n        self.ID = ID\n        self.name = name\n        self.age = age\n \n    def get_info(self):\n        return (self.ID, self.name, self.age)", "category": "Python"}, {"instruction": "Create a list comprehension that finds all elements that are divisible by 3 in a given list.", "input": "numbers =[1, 5, 8, 10, 15, 20]", "output": "def divisible_by_three(numbers):\n    res = [num for num in numbers if num % 3 == 0]\n    return res", "category": "Python"}, {"instruction": "How would you define a class in Python to represent a college student?", "input": "", "output": "class CollegeStudent:\n    def __init__(self, name, year, major):\n        self.name=name\n        self.year=year\n        self.major=major\n        \n    def get_name(self): \n       return self.name \n   \n    def get_year(self): \n       return self.year \n       \n    def get_major(self): \n       return self.major", "category": "Python"}, {"instruction": "Use Tensorflow to classify a given input dataset of animals as cats or dogs.", "input": "Input dataset contains images of cats and dogs.", "output": "import tensorflow as tf \n#get the dataset\ndataset = load_dataset()\n\n# create the input pipeline\niterator = dataset.make_initializable_iterator()\nnext_element = iterator.get_next()\n\n#build the model\nmodel=Sequential()\n#input layer\nmodel.add(Conv2D(32,(3,3), activation='relu',input_shape=(input_width,input_height,input_channels)))\n#max pooling\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n#flatten\nmodel.add(Flatten)\n#hidden layer\nmodel.add(Dense(64,activation='relu'))\n#output layer\nmodel.add(Dense(2,activation='sigmoid'))\n\n#train model\nmodel.compile(optimizer='SGD', Loss=\"binary_crossentropy\",metrics=['accuracy'])\nmodel.fit(dataset,epochs=5)", "category": "Python"}, {"instruction": "Extract the first 3 characters of an input string using Python.", "input": "String = \"Hello World!\"", "output": "string = \"Hello World!\"\n\n#Extract first 3 characters \nfirst_3_characters = string[0:3]\n\nprint(first_3_characters)", "category": "Python"}, {"instruction": "Implement a function in Python that calculates the median of a given input array.", "input": "[5, 2, 6, 8, 10]", "output": "def calculateMedian(arr):\n    n = len(arr)\n    arr.sort()\n \n    if n % 2 == 0:\n        median1 = arr[n//2]\n        median2 = arr[n//2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = arr[n // 2]\n \n    return median\n \nprint(\"Median is: \" + str(calculateMedian([5, 2, 6, 8, 10])))", "category": "Python"}, {"instruction": "You are given a matrix. Construct a for loop to check if any of the elements in the matrix is 0.", "input": "matrix = [[1,2,3],[4,0,6],[7,8,9]]", "output": "def check_zero(matrix):\n    for row in matrix:\n        for num in row:\n            if num == 0:\n                return True\n    return False\n\nprint(check_zero(matrix))", "category": "Python"}, {"instruction": "Generate a random password that complies with certain conditions.", "input": "", "output": "import random\nimport string\n\ndef generate_password(length):\n    password = ''.join(random.choice(string.ascii_letters + string.digits) for i in range(length))\n    if any(char.islower() for char in password) and any(char.isupper() for char in password) and any(char.isdigit() for char in password):\n        return password\n\ngenerated_password = generate_password(8)\nprint(generated_password)", "category": "Python"}, {"instruction": "You are given a list of numbers. Construct a for loop to filter out the odd numbers from the list.", "input": "arr = [1,2,3,4,5]", "output": "odds = []\nfor num in arr:\n  if num % 2 == 1:\n    odds.append(num)\nprint(odds)", "category": "Python"}, {"instruction": "Create a function in Python that takes one parameter, a list, and outputs the list in reverse.", "input": "myList = [1, 2, 3, 4]", "output": "def reverseList (list): \n  list.reverse() \n  return list\n  \nreverseList(myList) # Returns [4, 3, 2, 1]", "category": "Python"}, {"instruction": "Create a function to classify the following sentence into \"positive\" or \"negative\".", "input": "The movie was bad", "output": "def classify_sentence(sentence):\n  if \"bad\" in sentence:\n    return \"negative\"\n  else:\n    return \"positive\"\n\n# Driver code\nsentence = \"The movie was bad\"\nprint(\"Sentence is classified as:\", classify_sentence(sentence))\n\nOutput: Sentence is classified as: negative", "category": "Python"}, {"instruction": "Edit this code to fix the bug in the program", "input": "def print_longest_word(words):\n longest_word = \"\"\n for word in words:\n if len(word) > len(longest_word):\n longest_word = word\n print(longest_word)\nwords = [\"hello\", \"cat\"]\nprint_longest_word(words)", "output": "def print_longest_word(words):\n longest_word = \"\"\n for word in words:\n if len(word) > len(longest_word):\n longest_word = word\n print(longest_word)\nwords = [\"hello\", \"cat\"]\nprint_longest_word(words)\n\nif len(words) > 0:\n longest_word = words[0]\n for word in words:\n if len(word) > len(longest_word):\n longest_word = word\n print(longest_word)", "category": "Python"}, {"instruction": "Create a machine learning model in Python to predict the total surface area of a cube given its side length", "input": "side_length = 3", "output": "import numpy as np\nfrom sklearn.linear_model import LinearRegression \n\n# Data\nX_train = np.array([1, 2, 3, 4, 5]).reshape(-1, 1)\ny_train = np.array([6, 12, 18, 24, 30])\n\n# Model \nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Prediction\nside_length = 3 \npred = model.predict([[side_length]])\nprint('The surface area for a cube with side length %.2f is %.2f' % (side_length, pred[0]))", "category": "Python"}, {"instruction": "Suggest a function to convert a given tuple of strings into a dictionary.", "input": "", "output": "def tuple_to_dict(tup):\n    return {tup[i] : tup[i+1] for i in range(0, len(tup), 2)}", "category": "Python"}, {"instruction": "Construct a loop through this string of characters to check for the letter \u2018x\u2019. Report what the loop index was when the letter \u2018x\u2019 was found.", "input": "string = \"abcedfghijx\"", "output": "string = \"abcedfghijx\"\n\nfor idx, char in enumerate(string):\n    if char == 'x':\n        print(f\"The loop index was {idx} when the letter 'x' was found.\")\n        break", "category": "Python"}, {"instruction": "Write a code in Python that will take a string as input and return it with the words in reverse order.", "input": "", "output": "def reverseWords(s):\n    words = s.split(\" \")\n    words.reverse()\n    return \" \".join(words)", "category": "Python"}, {"instruction": "An array of integers is given, write a function to print the second largest element of the array.", "input": "", "output": "def secondLargest(arr):\n    first = 0\n    second = 0\n    for i in range(len(arr)):\n        if arr[i] > first:\n            second, first = first, arr[i]\n        elif (arr[i] > second and arr[i] < first):\n            second = arr[i]\n    return second", "category": "Python"}, {"instruction": "Create a function in Python that will return the maximum difference between any two numbers present in an array.", "input": "", "output": "def max_difference(arr):\n    difference = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[j] - arr[i] > difference:\n                difference = arr[j] - arr[i]\n    return difference", "category": "Python"}, {"instruction": "Given a list of numbers and a target, write an algorithm to determine if the list contains a subset that sums up to the target.", "input": "", "output": "def subsetsum(arr, target):\n    n = len(arr)\n    dp = [[False for x in range(target + 1)] for y in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n+1):\n        for j in range(target + 1):\n            dp[i][j] = dp[i-1][j] or (arr[i-1] <= j and dp[i-1][j - arr[i-1]])\n    return dp[n][target]", "category": "Python"}, {"instruction": "Generate a list of all the divisors of a given number.", "input": "", "output": "def generateDivisors(n): \n    divisors = [] \n    for i in range(1, n + 1): \n        if n % i == 0: \n            divisors.append(i) \n              \n    return divisors", "category": "Python"}, {"instruction": "Implement a quick sort algorithm for a given array list.", "input": "", "output": "def quick_sort(A):\n    quick_sort_helper(A, 0, len(A) - 1)\n\ndef quick_sort_helper(A, start, end):\n    if start < end:\n        p_index = partition_list(A, start, end)\n        quick_sort_helper(A, start, p_index - 1)\n        quick_sort_helper(A, p_index + 1, end)\n\ndef partition_list(A, start, end):\n    pivot = A[end]\n    p_index = start\n    for i in range(start, end):\n        if A[i] <= pivot:\n            A[i], A[p_index] = A[p_index], A[i]\n            p_index += 1\n    A[p_index], A[end] = A[end] , A[p_index]\n    return p_index", "category": "Python"}, {"instruction": "Take the following pandas DataFrame, and convert it to a NumPy array.", "input": "import pandas as pd\n\ndf = pd.DataFrame([[1,2,3], [4,5,6], [7,8,9]])", "output": "import numpy as np\n\ndf_array = np.array(df)", "category": "Python"}, {"instruction": "Create a new list of strings of length greater than 5 from another list", "input": "[\"apple\", \"banana\", \"carrot\"]", "output": "long_words = [word for word in [\"apple\", \"banana\", \"carrot\"] if len(word) > 5]", "category": "Python"}, {"instruction": "Design a stack class for a language of your choice", "input": "", "output": "class Stack:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, item):\n        self.stack.append(item)\n\n    def pop(self):\n        self.stack.pop()\n\n    def peek(self):\n        return self.stack[-1]\n\n    def is_empty(self):\n        return not self.stack", "category": "Python"}, {"instruction": "Generate a data frame with two columns: 'product' and 'price'", "input": "product1: Burger\nprice1: $6\nproduct2: Fries\nprice2: $2", "output": "import pandas as pd\n\ndata = {'product':['Burger', 'Fries'], 'price':[6, 2]}\n\ndf = pd.DataFrame(data)\n\nprint(df)", "category": "Python"}, {"instruction": "Provide an example of using Python's range() function to generate a range of numbers.", "input": "", "output": "# Print numbers from 0 to 9\nfor x in range(10):\n  print(x)\n\n# Print numbers from 3 to 8\nfor x in range(3, 9):\n  print(x)\n\n# Print numbers from 3 to 8 incrementing by 2\nfor x in range(3, 9, 2):\n  print(x)", "category": "Python"}, {"instruction": "Given an integer, calculate the sum of the numbers till that number.", "input": "num = 7", "output": "# set the sum to 0\nsum = 0\n\n# loop from 1 to 7\nfor i in range(1, num+1):\n   # add each number to \"sum\"\n   sum += i\n\n# print the sum\nprint(sum)\n28", "category": "Python"}, {"instruction": "Write a function in Python to iterate over the items in a dictionary.", "input": "dict = {'Apple':1, 'Orange':2, 'Mango':3}", "output": "def iterate_dictionary(dict): \n  for key in dict: \n    print(key, ':', dict[key]) \n\niterate_dictionary(dict)", "category": "Python"}, {"instruction": "Construct a while loop in Python to print all numbers less or equal to 10.", "input": "", "output": "i = 1\n\nwhile(i <= 10):\n  print(i)\n  i += 1", "category": "Python"}, {"instruction": "Reverse the words of a given sentence but keep the order of the words intact.", "input": "I am a programmer", "output": "def reverse_words(sentence):\n    words = sentence.split(' ')\n    reversed_words = [word[::-1] for word in words]\n    return ' '.join(reversed_words)\n\nprint(reverse_words('I am a programmer')) # Outputs: \"I ma a remmargorp\"", "category": "Python"}, {"instruction": "Write a Python function to check whether a string is a palindrome or not, ignoring spaces and special characters.", "input": "", "output": "def is_palindrome_ignore_space(word):\n    filtered_word = [i.lower() for i in word if i.isalpha()] \n    return filtered_word == filtered_word[::-1]", "category": "Python"}, {"instruction": "Create a program to convert a bi-dimensional array into a single array.", "input": "[[1, 2], [3, 4]]", "output": "def flatten_array(array):\nresult = []\nfor sub_array in array:\n    result.extend(sub_array)\nreturn result\n\nprint(flatten_array([[1, 2], [3, 4]])) # Outputs: [1,2,3,4]", "category": "Python"}, {"instruction": "Write a function that given a list of unique integers, returns the sum of the non-duplicated integer elements.", "input": "[1, 2, 2, 3, 4, 5, 6]", "output": "def sumNonDuplicates(arr):\n    sum = 0\n    for num in arr:\n        if arr.count(num) == 1:\n            sum += num\n    return sum", "category": "Python"}, {"instruction": "Given a list of words, write a Python function to print the frequency of occurrence of each word in the list.", "input": "['foo', 'bar', 'foo', 'baz', 'bar']", "output": "def word_frequency(words):\n    freq = {}\n    for word in words:\n        if word not in freq:\n            freq[word] = 0\n        freq[word] += 1    \n    for word, count in freq.items():\n        print('{}: {}'.format(word, count))\n        \nword_frequency(['foo', 'bar', 'foo', 'baz', 'bar'])", "category": "Python"}, {"instruction": "Design an API to pull company data from an external source.", "input": "", "output": "\"\"\"\nAPI to pull company data from an external source.\n\nParameters:\n1. company_id: Unique id of the company\n2. fields: List of strings of fields to include in the response\n\nReturns:\nA JSON containing the specified fields from the external source.\n\"\"\"\n\ndef get_company_data(company_id, fields):\n    # use an external API to fetch the data\n    response = requests.get(f\"http://example.com/api/company?id={company_id}\")\n    data = response.json()\n    response_data = {}\n    for field in fields:\n        response_data[field] = data[field]\n    return response_data", "category": "Python"}, {"instruction": "Create a function to convert a given quantiy of money from one currency to another.", "input": "amount: 10\nfrom_currency: USD\nto_currency: GBP", "output": "def convert_currency(amount, from_currency, to_currency):\n    # use a free online currency conversion API like Fixer\n    # to convert an amount from one currency to another\n    response = requests.get(f\"http://data.fixer.io/api/convert?access_key=<your_key>&from={from_currency}&to={to_currency}&amount={amount}\")\n    return response.json()[\"result\"]", "category": "Python"}, {"instruction": "Using a hash table, construct a program to find all of the pairs of an array whose sum is equal to a given target", "input": "arr = [2,7,5,3,1,9]\ntarget = 8", "output": "# Using a hash table, construct a program to find all of the pairs of an array whose sum is equal to a given target\n\ndef find_pairs(arr, target):\n    seen = {}\n    pairs = []\n    for num in arr:\n        if target-num in seen:\n            pairs.append((num, target-num))\n        seen[num] = True\n    return pairs\n\nprint(find_pairs(arr, target)) # [(2, 6), (1, 7)]", "category": "Python"}, {"instruction": "Replace every character in a given string with its corresponding ASCII code", "input": "string = \"Hello\"", "output": "# Replace every character in a given string with its corresponding ASCII code\n\ndef encode_string(string):\n    result = \"\"\n    for char in string:\n        result += str(ord(char))\n    return result\n\nprint(encode_string(string)) # \"72 101 108 108 111\"", "category": "Python"}, {"instruction": "Create a function to allocate resources to parties", "input": "data = [[\"Joe\",5],[\"John\",3],[\"Mary\",2]]", "output": "# Create a function to allocate resources to parties\n\ndef allocate(data):\n    total = 0\n    for item in data: \n        total += item[1] \n    allocation = [i[1]/total for i in data] \n    return allocation\n\nprint(allocate(data)) # [0.5, 0.3, 0.2]", "category": "Python"}, {"instruction": "Print all unique combinations of an array of integers", "input": "nums = [1,2,3]", "output": "# Print all unique combinations of an array of integers\n\ndef all_combinations(nums):\n  result = [[]]\n  for num in nums:\n    temp_result = []\n    for res in result:\n      temp_result.append(res + [num])\n    result.extend(temp_result)\n  return result\n\nprint(all_combinations(nums)) # [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]", "category": "Python"}, {"instruction": "Develop an algorithm for bubble sorting.", "input": "[5, 2, 1, 8, 0, 9, 4]", "output": "#Function to sort an array using bubble sort\ndef bubbleSort(arr):\n  #Loop through all elements in the array\n  for i in range(len(arr)):\n    #Loop through all elements up to the one larger than the one at the current position\n    for j in range(0, len(arr)-i-1):\n      #Swap elements if necessary\n      if arr[j] > arr[j+1] :\n        arr[j], arr[j+1] = arr[j+1], arr[j]\n\n#Driver code\narr = [5,2,1,8,0,9,4]\nbubbleSort(arr)", "category": "Python"}, {"instruction": "Generate a Python code to calculate the compound interest.", "input": "Principal = 2000 \nRate of Interest = 0.09 \nTime = 5", "output": "# Python program to calculate compound interest \n\ndef compound_interest(principal, rate, time): \n\n    # Calculates compound interest \n    CI = principal * (pow((1 + rate / 100), time)) \n\n    print(\"Compound interest is\", CI) \n\n# Driver Code \ncompound_interest(2000, 0.09, 5)", "category": "Python"}, {"instruction": "Create an algorithm for counting the occurences of a specific character in a string.", "input": "String: \"GPT Learning\"\nCharacter: \"t\"", "output": "//Declare a variable to store the count \nint count = 0\n\n//Loop through the string\nfor i = 0 to (string length) { \n\n   //Check if the character matches the given one \n   if string[i] == character{ \n       //Increment the count \n       count++ \n   } \n\n} \n\n//Print out the count \nprint(count)", "category": "Python"}, {"instruction": "Generate pseudocode for a program that takes in an integer and prints out all the factors of the given integer.", "input": "int num = 18", "output": "//Pseudocode \n \n//Function to obtain the factors of given input\nfunction obtainFactors(int num){ \n\n //Variable to store the factors \n List factors = [] \n\n //Loop through all number less than the given input \n for i = 1 to num { \n\n    //Check if a particular number is a factor of the given input \n    if num % i == 0 { \n\n       //Add the number to the list of factors \n       factors.add(i) \n    } \n } \n \n //Print out the list of factors \n print(factors) \n}", "category": "Python"}, {"instruction": "Write a Python code snippet to generate a list of the first five powers of the number 2.", "input": "", "output": "[2**0, 2**1, 2**2, 2**3, 2**4]", "category": "Python"}, {"instruction": "Create a lambda function in Python that collects all the numbers between 0 and 10 that are divisible by 3.", "input": "", "output": "lambda x: [x for x in range(0, 11) if x % 3 == 0]", "category": "Python"}, {"instruction": "Create a python dictionary consisting of the names of the seven dwarfs and a list of their ages.", "input": "", "output": "\"\"\"\nCreate a python dictionary consisting of the names of the seven dwarfs and a list of their ages\n\"\"\"\n\ndwarfs = {\"Doc\": 84, \n          \"Grumpy\": 67,\n          \"Happy\": 76,\n          \"Sleepy\": 75,\n          \"Sneezy\": 71,\n          \"Dopey\": 76,\n          \"Bashful\": 70}\nprint(dwarfs)", "category": "Python"}, {"instruction": "Add 'excellent' as the last element in this list.", "input": "sports_list = ['soccer', 'rugby', 'hockey']", "output": "\"\"\"\nAdd 'excellent' as the last element in this list\n\"\"\"\n\nsports_list = ['soccer', 'rugby', 'hockey']\n\n# Add 'excellent' as the last element in this list\nsports_list.append('excellent')\nprint(sports_list)", "category": "Python"}, {"instruction": "Calculate the sum of the elements in this list.", "input": "my_list = [2,5,4,7,5]", "output": "\"\"\"\nCalculate the sum of the elements in this list\n\"\"\"\n\nmy_list = [2,5,4,7,5]\n\n# Calculate the sum of the elements in this list\ntotal = 0\nfor num in my_list:\n    total += num\n\nprint(total)", "category": "Python"}, {"instruction": "Format this list such that each element is in a new line.", "input": "list_of_numbers = [1,2, 3, 4, 5]", "output": "\"\"\"\nFormat this list such that each element is in a new line\n\"\"\"\n\nlist_of_numbers = [1,2, 3, 4, 5]\n\n# Format the list such that each element is in a new line\nfor num in list_of_numbers:\n    print(num)", "category": "Python"}, {"instruction": "Design a simple calculator program using a switch statement.", "input": "", "output": "\"\"\"\nDesign a simple calculator program using a switch statement\n\"\"\"\n\ndef calculator(operator, x, y):\n    switch = {\n        '+': x + y,\n        '-': x - y,\n        '*': x * y,\n        '/': x / y\n    }\n    return switch.get(operator, \"Invalid operator\")\n\nif __name__ == \"__main__\":\n    print(calculator('+', 2, 3))\n    print(calculator('*', 4, 2))\n    print(calculator('/', 6, 3))\n    print(calculator('&', 8, 2))", "category": "Python"}, {"instruction": "Write a function that takes a sentence and returns the reversed version of that sentence.", "input": "Hello, world!", "output": "\"\"\"\nWrite a function that takes a sentence and returns the reversed version of that sentence\n\"\"\"\n\ndef reverse_sentence(sentence):\n    word_list = sentence.split()\n    reversed_str = \" \".join(word_list[::-1])\n    return reversed_str\n\nif __name__ == \"__main__\":\n    print(reverse_sentence(\"Hello, world!\"))", "category": "Python"}, {"instruction": "Create a class called \"Vector\" with x and y coordinates.", "input": "", "output": "\"\"\"\nCreate a class called \"Vector\" with x and y coordinates\n\"\"\"\nclass Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nif __name__ == \"__main__\":\n    v = Vector(2, 3)\n    print (v.x, v.y)", "category": "Python"}, {"instruction": "Given a string, print all its permutations.", "input": "british", "output": "\"\"\"\nGiven a string, print all its permutations\n\"\"\"\ndef permute(string):\n    if len(string) == 1:\n        return string\n    permutations = []\n    for i,c in enumerate(string):\n        for perm in permute(string[:i]+string[i+1:]):\n            permutations.append(c+perm)\n    return permutations\n\nif __name__ == \"__main__\":\n    print (permute(\"british\"))", "category": "Python"}, {"instruction": "Create an algorithm that takes two numbers a and b and returns the largest number.", "input": "a = 5, b = 6", "output": "\"\"\"\nAn algorithm that takes two numbers a and b and returns the largest number\n\"\"\"\n\ndef get_largest_number(a, b):\n    if (a > b):\n        return a\n    else:\n        return b\n    \nif __name__ == \"__main__\":\n    print (get_largest_number(5, 6))", "category": "Python"}, {"instruction": "Find the two elements in a given array that sums up to the target number.", "input": "[1, 8, 10, 12], target = 18", "output": "def two_sum_elements(arr, target):\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return [arr[i], arr[j]]\n    return None\n\nprint(two_sum_elements([1, 8, 10, 12], 18)) # Outputs: [8, 10]", "category": "Python"}, {"instruction": "Using the \"for\" loop, print out all odd numbers from 1 to 10.", "input": "", "output": "for i in range(1, 11):\n    if i%2 != 0:\n        print(i)\n\n# Output: 1, 3, 5, 7, 9", "category": "Python"}, {"instruction": "Create a function that takes a single-level JSON object as an argument and prints out all keys with a value of type string.", "input": "{\n \"name\": \"John\",\n \"age\": 34,\n \"isMarried\": True \n}", "output": "def print_string_keys(json_object):\n  for key in json_object:\n      if isinstance(json_object[key], str):\n          print(key)", "category": "Python"}, {"instruction": "Write a function that takes a string and returns the number of substrings with at least k different characters", "input": "\"abacdc\"", "output": "def num_distinct_substrings(S, k):\n   n = len(S)\n   distinct_substrings = set()\n   for i in range(n):\n      for j in range(i+k, n+1):\n         distinct_substring = \"\".join(sorted(list(set(S[i:j]))))\n         distinct_substrings.add(distinct_substring)\n   return len(distinct_substrings)", "category": "Python"}, {"instruction": "Design an algorithm in Python for reversing a linked list.", "input": "", "output": "def reverse(head): \n    prev = None\n    curr = head \n    while(curr is not None): \n        next = curr.next\n        curr.next = prev \n        prev = curr \n        curr = next\n    head = prev \n    return head", "category": "Python"}, {"instruction": "Create a function to take in a given array, rotate it by one, so that the last element of the array is now the first element.", "input": "[1, 2, 3, 4, 5]", "output": "def rotate_list(arr):\n     length = len(arr) \n     temp = arr[length - 1] \n\n     for i in range(length-1, 0, -1):\n        arr[i] = arr[i-1] \n     arr[0] = temp \n      \n     return arr\n \nmy_list = [1, 2, 3, 4, 5]\nprint(rotate_list(my_list))  #Output: [5, 1, 2, 3, 4]", "category": "Python"}, {"instruction": "Create a sorting algorithm that sorts an array from lowest to highest numbers using the bubble sort approach.", "input": "[5, 1, 7, 3, 2]", "output": "def bubblesort(arr):\n    for i in range(len(arr)-1, 0, -1): \n        for j in range(i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\nmy_list = [5, 1, 7, 3, 2]  \nbubblesort(my_list) \nprint(my_list)\n# Output: [1, 2, 3, 5, 7]", "category": "Python"}, {"instruction": "Mix the given list of numbers in a random order", "input": "[5, 1, 7, 3, 2]", "output": "import random\n\nmy_list = [5, 1, 7, 3, 2]\nrandom.shuffle(my_list)\nprint(my_list)  #Output: [7, 2, 5, 1, 3]", "category": "Python"}, {"instruction": "Parse a JSON string and print its value.", "input": "data = '{\"name\":\"John\", \"age\":30}'", "output": "import json\n\ndata_dict = json.loads(data)\nname = data_dict[\"name\"]\nage = data_dict[\"age\"]\nprint(name)\nprint(age)", "category": "Python"}, {"instruction": "Create a loop in Python to print the fibonacci sequence of the given number.", "input": "n = 10", "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    print(\"Fibonacci Series:\")\n    for i in range(n): \n        print(a, end = \" \")\n        c = a + b \n        a = b \n        b = c\n\nfibonacci(n)", "category": "Python"}, {"instruction": "How would you add elements from one list to another list in Python?", "input": "", "output": "You can add elements from one list to another list in Python using the extend() method, which adds all elements of one list to another list.\n\nFor example, if you have the lists list1 and list2, you can add all elements of list2 to list1 with the following code:\n\nlist1.extend(list2)\n\nAlternatively, you can use the list.append() method to add each element of list2 to list1 one-by-one. For example:\n\nfor element in list2:\n    list1.append(element)", "category": "Python"}, {"instruction": "Compare the features of Mercurial and Git.", "input": "", "output": "Mercurial and Git are both distributed version control systems, meaning that all users have a complete copy of the repository. Both are extremely fast, with Git being slightly faster than Mercurial. Mercurial has a few advantages over Git, such as better merging capabilities, sophisticated branch management, and better backwards compatibility. Git, on the other hand, has some advantages over Mercurial in terms of speed and lightweight branching, as well as a larger user base. \n\nUltimately, the choice depends on the specific needs of the user or organisation.", "category": "Python"}, {"instruction": "Create an algorithm to determine the most common element in an array", "input": "[2, 3, 5, 3, 7, 2, 8, 1, 3]", "output": "def most_common(arr):\n    counts = {}\n    for i in arr:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    \n    max_count = 0\n    max_item = None\n    for item, count in counts.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    return max_item", "category": "Python"}, {"instruction": "Create a function to calculate the number of different ways to climb n stairs", "input": "", "output": "def count_ways(n): \n    if n==1 or n==0: \n        return 1\n    elif n==2: \n        return 2\n    else: \n        return count_ways(n-1) + count_ways(n-2) + count_ways(n-3)", "category": "Python"}, {"instruction": "Create a function that finds the highest peak in an array of elevation data.", "input": "[9, 10, 12, 15, 7, 8, 11]", "output": "def find_peak(arr):\n    max_h = arr[0]\n    max_i = 0\n    # traverse the array\n    for i in range(len(arr)):\n        if arr[i] > max_h:\n            max_h = arr[i]\n            max_i = i \n    return max_h, max_i", "category": "Python"}, {"instruction": "Convert the Python Dictionary given below into a valid JSON", "input": "{\n    \"firstName\":  \"John\",\n    \"lastName\":  \"Doe\",\n    \"age\":  23\n}", "output": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"age\": 23\n}", "category": "Python"}, {"instruction": "Write a function to generate Fibonacci numbers in Python.", "input": "", "output": "def fibonacci(num):\n  fib_list = [0, 1]\n  if num == 0:\n    return []\n  elif num == 1:\n    return [0]\n  else:\n    for _ in range(2, num):\n      nxt_num = fib_list[-1] + fib_list[-2]\n      fib_list.append(nxt_num)\n    return fib_list", "category": "Python"}, {"instruction": "Create a function to calculate the volume of the given 3D shape.", "input": "type: \"cube\"\nside: 6", "output": "def calculate_volume(shape, side):\n  if shape == \"cube\":\n    return side ** 3", "category": "Python"}, {"instruction": "How does dynamic programming work?", "input": "", "output": "Dynamic programming is a way of solving problems by breaking them down into a collection of smaller subproblems. It works by storing solutions to subproblems so that each subproblem is only solved once. This allows for faster computation and efficient memory usage, as solutions are stored and reused instead of having to be recalculated every time they are needed. This approach is useful in situations where a given problem can be divided into multiple, overlapping subproblems, such as in optimization problems.", "category": "Python"}, {"instruction": "Write a Python function to find the maximum and minimum numbers from a sequence of numbers.", "input": "", "output": "def min_max(data):\n    min_value = min(data)\n    max_value = max(data)\n    return min_value, max_value", "category": "Python"}, {"instruction": "Add a method called \u201cisEmpty\u201d to the following Python class to check if the list is empty or not.", "input": "class List:\n    def __init__(self, data):\n        self.data = data", "output": "class List:\n    def __init__(self, data):\n        self.data = data\n    \n    def isEmpty(self):\n        return not self.data", "category": "Python"}, {"instruction": "Amend the following Python code to add error handling to the function print_score.", "input": "def print_score(score):\n    print(f'The score is {score}')", "output": "def print_score(score):\n    try:\n        score = int(score)\n        print(f'The score is {score}')\n    except ValueError:\n        print(\"The score must be an integer.\")", "category": "Python"}, {"instruction": "Add a method called \"printTitle\" to the \u201cBook\u201d class defined above.", "input": "", "output": "class Book():\n  def __init__(self, name, author):\n    self.name = name\n    self.author = author\n  \n  def printTitle(self):\n      print(\"The book title is: \"+ self.name)", "category": "Python"}, {"instruction": "Amend the following Python function to calculate the sum of all even numbers in the given range.", "input": "def sum_even_numbers(n):\n    '''This function will calculate the sum of all numbers in the given range.'''\n    total = 0\n    for i in range(n):\n        total += i\n    return total", "output": "def sum_even_numbers(n):\n    '''This function will calculate the sum of all even numbers in the given range.'''\n    total = 0\n    for i in range(n):\n        if i%2==0:\n            total += i\n    return total", "category": "Python"}, {"instruction": "Create a 4x4 matrix filled with random numbers between 0 and 9.", "input": "", "output": "import random\n\ndef generate_random_matrix(rows, cols):\n    matrix = []\n    for i in range(rows):\n        matrix.append([])\n        for j in range(cols):\n            matrix[i].append(random.randint(0, 9))\n    return matrix\n\nif __name__ == '__main__':\n    rows = 4\n    cols = 4\n    print(generate_random_matrix(rows, cols))", "category": "Python"}, {"instruction": "Write a function to convert the given list of integers into a dictionary of lists.", "input": "my_list = [1, 2, 3, 4]", "output": "def list_to_dict(lst):\n    my_dict = {}\n    for i in lst:\n        my_dict[str(i)] = [i]\n    return my_dict\n\nif __name__ == '__main__':\n    my_list = [1, 2, 3, 4]\n    print(list_to_dict(my_list))", "category": "Python"}, {"instruction": "Write code for reversing a list in Python", "input": "[1,2,3,4]", "output": "def reverse_list(l):\n    return l[::-1]", "category": "Python"}, {"instruction": "Write a code to calculate the mean of the list of integers provided.", "input": "nums = [10, 20, 30, 40, 50]", "output": "def calc_mean(nums):\n    \"\"\"\n    Calculate the mean of a list of integers\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    else:\n        sum_of_nums = sum(nums)\n        mean = sum_of_nums/len(nums)\n        return mean\n\nnums = [10, 20, 30, 40, 50]\nmean = calc_mean(nums)\nprint(mean) # 30", "category": "Python"}, {"instruction": "Write a code to check whether two numbers are divisible by each other.", "input": "num1 = 8\nnum2 = 4", "output": "def divisible_by_each_other(num1, num2):\n    \"\"\"\n    A function to check whether two numbers are divisible by each other\n    \"\"\"\n    if num1 % num2 == 0 or num2 % num1 == 0:\n        return True\n    else:\n        return False\n\nnum1 = 8\nnum2 = 4\n\nresult = divisible_by_each_other(num1, num2)\nprint(result) # True", "category": "Python"}, {"instruction": "Create a code to find all common elements in two list and store it in a new list.", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]", "output": "def find_common(list1, list2):\n    \"\"\"\n    Find all common elements in two list and store it in a new list\n    \"\"\"\n    new_list = []\n    for item1 in list1:\n        for item2 in list2:\n            if item1 == item2:\n                new_list.append(item1)\n                \n    return new_list\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\n\nresult = find_common(list1, list2)\nprint(result) # [3, 4, 5]", "category": "Python"}, {"instruction": "Extend the following python code to include a new field 'type' with the value 'dog'.", "input": "animal = {\n 'name': 'Rex',\n 'age': 10\n}", "output": "animal = {\n 'name': 'Rex',\n 'age': 10,\n 'type': 'dog'\n}", "category": "Python"}, {"instruction": "Write a code to perform linear search in an array of integers.", "input": "", "output": "def linear_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Rewrite the following code to use the ternary operator in Python:\n\nif x > 0:\n    result = \"positive\"\nelse:\n    result = \"negative\"", "input": "", "output": "result = \"positive\" if x > 0 else \"negative\"", "category": "Python"}, {"instruction": "How would you create a function that takes a list of strings as an argument and returns the total number of characters in all the strings together?", "input": "", "output": "def count_characters(stringList):\n    count = 0\n    for string in stringList: \n        count += len(string)\n    return count", "category": "Python"}, {"instruction": "Create a Python function to find the pair of numbers that have the highest product in an array of numbers", "input": "[1, 2, 4, 8, 10]", "output": "def find_max_product(nums):\n  max_product = 0\n  for i in range(len(nums)):\n    for j in range(i+1, len(nums)):\n      product = nums[i] * nums[j]\n      if product > max_product:\n        max_product = product\n  return max_product", "category": "Python"}, {"instruction": "Create a Python function that takes two arguments, a positive integer and a boolean, and return the word \"yes\" if the boolean is true and the number is even, else it should return the word \"no\".", "input": "", "output": "def check_number(number, condition):\n    if condition and number % 2 == 0:\n        return \"yes\"\n    else:\n        return \"no\"", "category": "Python"}, {"instruction": "Given a string, write a Python function that will remove all the vowels from it.", "input": "", "output": "def remove_vowels(string):\n    vowels = {'a', 'e', 'i', 'o', 'u'}  \n    return ''.join(c for c in string if c not in vowels)", "category": "Python"}, {"instruction": "Look at the code and explain what is it doing.", "input": "def double_list(list):\n    \"\"\"Doubles every value in the list.\"\"\"\n    for idx, item in enumerate(list):\n        list[idx] = item * 2", "output": "This code takes a list as an argument and iterates through it using a for loop. For each element in the list, the code multiplies it to 2 and assigns it back (replacing the existing element) in the same list. At the end, every element in the list is doubled in value.", "category": "Python"}, {"instruction": "Compute the sum of 2 numbers using Python code.", "input": "a = 10\nb = 5", "output": "a + b = 15", "category": "Python"}, {"instruction": "Create a unit test for a given function to reverse a list of strings.", "input": "", "output": "import unittest \n\ndef reverse_strings_list(lst):\n  return lst[::-1]\n\nclass TestReverseStrings(unittest.TestCase):\n  def test_reverse_strings_list(self):\n    self.assertEqual(reverse_strings_list([\"one\",\"two\",\"three\"]), \n      [\"three\", \"two\", \"one\"])", "category": "Python"}, {"instruction": "Use a neural network to classify handwritten digits from the MNIST dataset.", "input": "", "output": "import tensorflow as tf\nfrom tensorflow.keras.datasets import mnist\n\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n# Reshape and normalize the data\nx_train = x_train.reshape((60000, 28, 28, 1))\nx_train = x_train / 255.0\nx_test = x_test.reshape((10000, 28, 28, 1)) \nx_test = x_test / 255.0\n\n# Build and compile the model\nmodel = tf.keras.models.Sequential([\n tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(28, 28, 1)),\n tf.keras.layers.MaxPooling2D(2, 2),\n tf.keras.layers.Flatten(),\n tf.keras.layers.Dense(128, activation='relu'),\n tf.keras.layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n loss='sparse_categorical_crossentropy', \n metrics=['accuracy'])\n\n# Train the model\nmodel.fit(x_train, y_train, epochs=5)\n\n# Evaluate the model\ntest_loss, test_acc = model.evaluate(x_test, y_test)\n\nprint('Test accuracy:', test_acc)", "category": "Python"}, {"instruction": "You need to implement a depth-first search algorithm to search for a value in a given tree.", "input": "", "output": "def dfs(root, value):\n    if root is None:\n        return False\n    if root.val == value:\n        return True\n\n    left = dfs(root.left, value)\n    right = dfs(root.right, value)\n    return left or right", "category": "Python"}, {"instruction": "You need to collect user input to get the total sum of numbers.", "input": "", "output": "total = 0\nwhile True:\n    num = input(\"Please enter a number (enter '0' to finish): \")\n    if num == '0':\n        break\n    total += int(num)\n\nprint(\"The total sum of numbers is:\", total)", "category": "Python"}, {"instruction": "Write a function to parse a string and return a set of unique words.", "input": "string = \"Hello world this is a test string\"", "output": "def parse(string):\n    words = set()\n    for word in string.split(\" \"):\n        words.add(word)\n    return words", "category": "Python"}, {"instruction": "You need to build an API endpoint to support role-based authentication.", "input": "User roles: 'admin', 'manager', 'employee'", "output": "def authentication(role):\n    if role == 'admin':\n        return 'Admin privileges granted.'\n    elif role == 'manager':\n        return 'Manager privileges granted.'\n    elif role == 'employee':\n        return 'Employee privileges granted.'\n    else:\n        return 'Login failed. Invalid role.'", "category": "Python"}, {"instruction": "Create a function \"getGrade\" to get a grade based on a numeric score.", "input": "", "output": "def getGrade(score):\n    if score >= 90:\n        return \"A\"\n    elif score >= 80:\n        return \"B\"\n    elif score >= 70:\n        return \"C\"\n    elif score >= 60:\n        return \"D\"\n    else:\n        return \"F\"", "category": "Python"}, {"instruction": "Generate a code that prints out all the perfect squares between 1 and 500.", "input": "", "output": "for i in range(1,501):\n    num = i**2\n    if num < 501:\n        print(num)", "category": "Python"}, {"instruction": "Generate a program that accepts an integer array and returns its median value", "input": "", "output": "def median(arr):\n    arr.sort()\n    if len(arr)%2 != 0:\n        return arr[len(arr)//2]\n    else:\n        return (arr[(len(arr)//2)-1]+arr[len(arr)//2])/2", "category": "Python"}, {"instruction": "Generate a python code program that removes punctuation from a given string.", "input": "", "output": "def remove_punctuation(s):\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    s_without_punct = \"\"\n    for char in s:\n        if char not in punctuations:\n            s_without_punct = s_without_punct + char\n    return s_without_punct", "category": "Python"}, {"instruction": "Rewrite the following function so that it takes in an int argument and returns the factorial of that number.", "input": "def calc_factorial(x):\n    total = 1\n    if x == 0:\n        return 1\n    for num in range(1, x+1):\n        total *= num \n    return total", "output": "def calc_factorial(x):\n    if x == 0:\n        return 1\n    else: \n        return x * calc_factorial(x - 1)", "category": "Python"}, {"instruction": "Given a list of integers, write a function that takes the list and returns only the odd numbers in the list.", "input": "", "output": "def extract_odd_numbers(numbers):\n    return [x for x in numbers if x % 2 != 0]", "category": "Python"}, {"instruction": "Create a code to generate a list of all numbers between a given start and end number.", "input": "start = 10\nend = 20", "output": "def create_list(start, end):\n    \"\"\"\n    Create a code to generate a list of all numbers between a given start and end number\n    \"\"\"\n    number_list = []\n    for num in range(start, end+1):\n        number_list.append(num)\n    return number_list\n\nstart = 10\nend = 20\n\nresult = create_list(start, end)\nprint(result) #[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]", "category": "Python"}, {"instruction": "For the given string, write a code to print out the longest word in the string.", "input": "test_string = \"This is an example sentence.\"", "output": "def longest_word_in_string(string):\n    \"\"\"\n    A function to print out the longest word in a given string\n    \"\"\"\n    words = string.split(\" \")\n    longest_word =  max(words, key=len)\n    return longest_word\n\ntest_string = \"This is an example sentence.\"\n\nlongest = longest_word_in_string(test_string)\nprint(longest) # example", "category": "Python"}, {"instruction": "Use TensorFlow to build a multi-layer perceptron to classify the MNIST digits.", "input": "", "output": "import tensorflow as tf\nimport numpy as np\n\n# Hyperparameters\nn_inputs = 784  # MNIST\nn_hidden1 = 512\nn_hidden2 = 256\nn_outputs = 10\n\n# Build a model\nX = tf.placeholder(tf.float32, shape=(None, n_inputs), name=\"X\")\ny = tf.placeholder(tf.int64, shape=(None), name=\"y\")\n\nwith tf.name_scope(\"dnn\"):\n    hidden1 = tf.layers.dense(X, n_hidden1, name=\"hidden1\",\n                              activation=tf.nn.relu)\n    hidden2 = tf.layers.dense(hidden1, n_hidden2, name=\"hidden2\",\n                              activation=tf.nn.relu)\n    logits = tf.layers.dense(hidden2, n_outputs, name=\"outputs\")", "category": "Python"}, {"instruction": "Calculate the frequency of occurrence of each letter in a word.", "input": "word = \"programming\"", "output": "def frequency_count(word):\n    # dictionary to store the frequency of occurrence\n    frequency = {}\n\n    # iterate through each character\n    for char in word:\n        # if the character is present in the frequency dictionary\n        if char in frequency:\n            # increase the count of the character\n            frequency[char] += 1\n        else:\n            # add the character to the dictionary and set its count to 1\n            frequency[char] = 1\n\n    return frequency\n\n# Calculate the frequency of occurrence\nfrequencies = frequency_count(word)\nprint(frequencies) # Output: {'p': 1, 'r': 2, 'o': 2, 'g': 2, 'a': 1, 'm': 1, 'i': 1, 'n': 1}", "category": "Python"}, {"instruction": "Write a Python script that prints out all of the letters of the alphabet one per line.", "input": "", "output": "for letter in 'abcdefghijklmnopqrstuvwxyz':\n    print(letter)", "category": "Python"}, {"instruction": "Write code to encrypt a string", "input": "", "output": "def encrypt_string(string):\n    encrypted_string = \"\" \n\n    for char in string:\n        encrypted_string += chr(ord(char) + 5)\n\n    return encrypted_string", "category": "Python"}, {"instruction": "Create a loop to print \"I love Python\" five times", "input": "", "output": "for i in range(5):\n    print(\"I love Python\")", "category": "Python"}, {"instruction": "Replace the placeholder text with a valid statement that sets the default value for the 'count' parameter of the function", "input": "def prints(word, count=TODO):\n    for i in range(count):\n        print(word)", "output": "def prints(word, count=0):\n    for i in range(count):\n        print(word)", "category": "Python"}, {"instruction": "Add a class attribute to the given Python class.", "input": "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "output": "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        self.grade = None", "category": "Python"}, {"instruction": "Edit this piece of code to work with negative numbers", "input": "def sum_positive(arr): \n    result = 0\n    for num in arr:\n        if num >= 0:\n            result += num\n    return result", "output": "def sum_positive(arr): \n    result = 0\n    for num in arr:\n        if num != 0:\n            result += abs(num)\n    return result", "category": "Python"}, {"instruction": "Write code to create a list of tuples that contains all the possible combinations of two elements taken from two different lists.", "input": "list1 = [1, 2, 3, 4]\nlist2 = [5, 6, 7, 8]", "output": "def combo(list1, list2):\n    result = []\n    for i in list1:\n        for j in list2:\n            result.append((i, j))\n    return result\n\ncombos = combo(list1, list2) # [(1, 5), (1, 6), (1, 7), (1, 8), (2, 5), (2, 6), (2, 7), (2, 8), (3, 5), (3, 6), (3, 7), (3, 8), (4, 5), (4, 6), (4, 7), (4, 8)]", "category": "Python"}, {"instruction": "Implement a code to print the indices of all occurrences of a number x in an array arr.", "input": "x = 5\narr = [1, 5, 2, 8, 5, 10]", "output": "def print_indices(x, arr):\n    indices = []\n    for i in range(len(arr)):\n        if arr[i] == x:\n            indices.append(i)\n    return indices\n\nprint(print_indices(x, arr))  # [1, 4]", "category": "Python"}, {"instruction": "Refactor this line of code to make it more concise.", "input": "tasks = [t for t in tasks if t.completed == False]", "output": "tasks = [t for t in tasks if not t.completed]", "category": "Python"}, {"instruction": "Create a class in Python thattracks the number of objects created.", "input": "", "output": "class CountObjects:\n  count = 0\n  def __init__(self):\n    CountObjects.count += 1\n \n  @classmethod\n  def get_count(cls):\n    return cls.count", "category": "Python"}, {"instruction": "Find the minimum among a list of integers.", "input": "[1, 15, 22, -5, 87]", "output": "def find_min(numbers):\n  min_value = numbers[0]\n  for n in numbers:\n    if n < min_value:\n      min_value = n\n  \n  return min_value\n  \nif __name__ == '__main__':\n  numbers = [1, 15, 22, -5, 87]\n  print(find_min(numbers))", "category": "Python"}, {"instruction": "Generate a syntax-correct program to calculate the sum of the elements in a given 2D array", "input": "", "output": "def sum_elements(arr):\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            sum += arr[i][j]\n    return sum", "category": "Python"}, {"instruction": "Print out the first 10 elements in the sequence interpreted by the rule F(n) = F(n-1) + F(n-2).", "input": "", "output": "def fibonacci(n): \n    \n    # Creating an array to store the sequence \n    f = [0] * (n + 2) \n      \n    # Initial values   \n    f[1] = 1\n      \n    # Calculating the terms \n    for i in range(2, n + 2): \n        f[i] = f[i - 1] + f[i - 2] \n    return f[1:n+1]\n  \nn = 10\nprint(fibonacci(n))", "category": "Python"}, {"instruction": "Create an object oriented program to print the Fibonacci sequence.", "input": "", "output": "class Fibonacci:\n    def __init__(self, num):\n        self.num = num\n \n    def fibo(self):\n        prev = 0\n        current = 1\n        next = 0\n        print(prev)\n        print(current)\n        for i in range(2,self.num):\n            next=prev+current\n            print(next)\n            prev=current\n            current=next\n \n# main program starts from here\nn= int(input(\"how many numbers to print: \"))\nfibo_obj=Fibonacci(n)\nfibo_obj.fibo()", "category": "Python"}, {"instruction": "Create a function that generates a random string of length n using alphabet characters.", "input": "", "output": "import string\nimport random\ndef random_string_generator(n):\n    letters = string.ascii_letters\n    return ''.join(random.choice(letters) for i in range(n))", "category": "Python"}, {"instruction": "Construct a sorting algorithm to sort an array in increasing order.", "input": "array = [4,7,1,3,9]", "output": "def bubble_sort(arr): \n    arr_length = len(arr)\n    # Iterate through entire array \n    for i in range(arr_length): \n        # Iterate through unsorted subarray \n        for j in range(0, arr_length-i-1): \n            # Swap items if needed\n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Test our Bubble sort implementation\narr = [4,7,1,3,9] \nbubble_sort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i])", "category": "Python"}, {"instruction": "Create a Python program that'll take two lists and return a combined list.", "input": "list_1 = [2, 4, 6]\nlist_2 = [3, 5, 7]", "output": "def combine_lists(list_1, list_2):\n    return list_1 + list_2\n\nlist_1 = [2, 4, 6]\nlist_2 = [3, 5, 7]\n\nprint(combine_lists(list_1, list_2))", "category": "Python"}, {"instruction": "Generate a code to transform the list of strings into the upper case.", "input": "list = ['apple', 'banana', 'cherry']", "output": "list = ['apple', 'banana', 'cherry']\n\ndef transform_list(list):\n    upper_list = [i.upper() for i in list]\n    return upper_list\n\nprint(transform_list(list))", "category": "Python"}, {"instruction": "Generate a program to flip a coin.", "input": "", "output": "from random import choice \n\ndef flip_coin(): \n\tresult = choice(['Heads', 'Tails']) \n\n\tprint(result) \n\nif __name__ == \"__main__\": \n\tflip_coin()", "category": "Python"}, {"instruction": "Write a Python script to detect if a given text contains any URL.", "input": "", "output": "import re\n\ndef has_url(text):\n  pattern = r\"(http|ftp|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;:/~\\+#]*[\\w\\-\\@?^=%&amp;/~\\+#])?\"\n  matches = re.findall(pattern, text) \n  if matches:\n    return True\n  return False", "category": "Python"}, {"instruction": "Write a code snippet to convert the following list of dictionaries into a pandas dataframe.", "input": "students = [{\"name\":\"John\", \"age\": 18, \"grade\": 85},\n            {\"name\":\"James\", \"age\": 16, \"grade\": 82},\n            {\"name\":\"Jill\", \"age\": 17, \"grade\": 89}]", "output": "# Convert the list of dictionaries to pandas dataframe\nimport pandas as pd\ndf = pd.DataFrame(students)\n\n# Print the dataframe\nprint(df)\n# Outputs:\n   name  age  grade\n0  John   18     85\n1  James  16     82\n2  Jill   17     89", "category": "Python"}, {"instruction": "Write a code snippet that adds two matrices of equal sizes.", "input": "matrix1 = [[1, 2],\n\t\t   [3, 4]]\n\nmatrix2 = [[5, 6],\n\t\t   [7, 8]]", "output": "def add_matrices(matrix1, matrix2):\n    # assert that the matrices are of equal size\n    assert len(matrix1) == len(matrix2), \"Matrices should have the same size\"\n    assert len(matrix1[0]) == len(matrix2[0]), \"Matrices should have the same size\"\n\n    # add the elements\n    for i in range(len(matrix1)):\n        for j in range(len(matrix2[0])):\n            matrix1[i][j] += matrix2[i][j]\n\n    return matrix1", "category": "Python"}, {"instruction": "Design a class in python to find the reverse of a number.", "input": "", "output": "class ReverseNumber(): \n    def __init__(self): \n        pass\n    \n    def reverse_number(self, num): \n      \n        reverse = 0\n  \n        # Iterate over the given number \n        while(num > 0): \n            reminder = num % 10\n  \n            # Constructing the reverse number\n            reverse = (reverse * 10) + reminder \n  \n            # Floor division\n            num = num // 10\n  \n        return reverse \n  \n# Driver Code \nif __name__ == '__main__': \n    rev = ReverseNumber()\n    print(rev.reverse_number(123))", "category": "Python"}, {"instruction": "Generate a random DNA sequence of length 50.", "input": "", "output": "\"\"\"\nGenerate a random DNA sequence of length 50\n\"\"\"\n\nimport random\n\ndef random_dna_sequence(length):\n    bases = [\"A\",\"T\",\"G\",\"C\"]\n    sequence = \"\".join([random.choice(bases) for _ in range(length)])\n    return sequence\n\nif __name__ == '__main__':\n  print(random_dna_sequence(50))", "category": "Python"}, {"instruction": "You need to check a given list of strings to determine it contains all valid English words. Output true if so, output false otherwise.", "input": "list = [\"hello\", \"world\", \"fksgks\"]", "output": "import requests \n  \n# Creating list of words \nlist = [\"hello\", \"world\", \"fksgks\"] \n  \n# Iterating in the list of words \nfor i in list: \n    url = \"https://www.dictionary.com/browse/\"+i \n    try: \n        webpage = requests.get(url) \n  \n        # Valid word if request status  \n        # code is 200 \n        if webpage.status_code == 200: \n            valid = True\n        else: \n            valid = False\n    except: \n        valid = False\n              \nif valid == False: \n    print(\"False\")\nelse:\n    print(\"True\")", "category": "Python"}, {"instruction": "Given a matrix, write a program to rotate it by 90 degrees clockwise.", "input": "matrix = [[1,2,3], \n          [4,5,6], \n          [7,8,9]]", "output": "def rotateMatrix(matrix):\n    N = len(matrix[0])\n    for i in range(N // 2):\n        for j in range(i, N - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[N - 1 - j][i]\n            matrix[N - 1 - j][i] = matrix[N - 1 - i][N - 1 - j]\n            matrix[N - 1 - i][N - 1 - j] = matrix[j][N - 1 - i]\n            matrix[j][N - 1 - i] = temp\n\nrotateMatrix(matrix)", "category": "Python"}, {"instruction": "Write a Python script to compare two lists and print out missing and same elements.", "input": "list1 = [1, 2, 3, 4]\nlist2 = [2, 3, 4, 5]", "output": "same_elements = []\nmissing_elements = []\n\nfor i in list1:\n  if i in list2:\n   same_elements.append(i)\n  else:\n    missing_elements.append(i)\n\nfor i in list2:\n  if i not in list1:\n    missing_elements.append(i)\n\nprint(\"Same elements:\",same_elements)\nprint(\"Missing elements:\",missing_elements)\n# Output: Same elements: [2, 3, 4] \n#        Missing elements: [1, 5]", "category": "Python"}, {"instruction": "Design a Python class structure for playing cards with two classes: Deck and Card.", "input": "", "output": "class Deck: \n    def __init__(self):\n        self.cards = []\n    \n    def populate(self):\n        suits = ['Hearts', 'Spades', 'Clubs', 'Diamonds']\n        numbers = [2,3,4,5,6,7,8,9,10,'Jack','Queen','King','Ace']\n\n        for suit in suits:\n            for number in numbers:\n                self.cards.append(Card(suit, number))\n\n    def shuffle(self):\n        random.shuffle(self.cards)\n        \n    def deal(self):\n        card = self.cards.pop()\n        return card\n \nclass Card:\n    def __init__(self, suit, number):\n        self.suit = suit\n        self.number = number", "category": "Python"}, {"instruction": "Design a data visualization to show the average salary per gender", "input": "", "output": "import matplotlib.pyplot as plt\n  \nmale_salaries = [3000, 3500, 3000, 3500, 4000] \nfemale_salaries = [2500, 3000, 2500, 3000, 3500] \n  \nplt.bar(range(len(male_salaries)), male_salaries, width=0.35, \n            label='Male Salaries') \n  \nplt.bar([x+0.35 for x in range(len(female_salaries))], \n            female_salaries, width=0.35, \n            label='Female Salaries') \n  \nplt.xlabel('Employee') \nplt.ylabel('Salaries') \nplt.title('Salaries per Gender') \nplt.legend(loc=\"upper right\") \nplt.show()", "category": "Python"}, {"instruction": "Construct an API using Flask that returns an array of integers in response to a request", "input": "", "output": "from flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/api/v1/get_data', methods=['GET'])\ndef get_data():\n    data = [1, 2, 3, 4, 5]\n    return jsonify(data)\n\nif __name__ == '__main__':\n    app.run()", "category": "Python"}, {"instruction": "Generate a random sample of size 10 using numpy", "input": "", "output": "import numpy as np\n\nrand_sample = np.random.randint(low=0, high=100, size=10)", "category": "Python"}, {"instruction": "Implement an algorithm to select k elements from an array such that the sum of those elements is maximized", "input": "", "output": "def maximize_sum(arr, k):\n    arr.sort()\n    result = 0\n    for i in range(len(arr)-1, len(arr)-k-1, -1):\n        result += arr[i]\n    return result", "category": "Python"}, {"instruction": "Create an algorithm to find the longest continuous increasing subarray.", "input": "", "output": "def longestIncreasingSubarray(arr):\n    n = len(arr)\n    max_len = 1\n    curr_len = 1\n    for i in range(1, n): \n     \n        #if current element is greater than its previous element \n        if (arr[i] > arr[i-1]):\n            curr_len += 1\n        else:\n            if (curr_len > max_len):\n                max_len = curr_len\n            curr_len = 1\n    #Compare the length of the last \n    #subarray with max_len and \n    #update max_len if needed \n    if (curr_len > max_len):\n        max_len = curr_len \n    \n    return max_len", "category": "Python"}, {"instruction": "Implement a function that takes two parameters, an array and a value, and returns true if the array contains the value and false if it does not.", "input": "let myArray = [1, 2, 3, 4, 5];\nlet myValue = 3;", "output": "def containsValue(arr, value):\n    for item in arr:\n        if item == value:\n            return True\n    return False\n\nprint(containsValue(myArray, myValue))", "category": "Python"}, {"instruction": "Using a loop and a conditional statement in Python, check if the number is a prime number.", "input": "let number = 13;", "output": "def is_prime(number):\n    if (number <= 1):\n        return False\n    if (number <= 3):\n        return True\n\n    if (number % 2 == 0 or number % 3 == 0):\n        return False\n\n    i = 5\n    while (i * i <= number):\n        if (number % i == 0 or number % (i + 2) == 0):\n            return False\n        i +=6\n\n    return True", "category": "Python"}, {"instruction": "Parse this JSON data and print out the \u201crating\u201d of every item in the list.", "input": "{\n    \"ratings\": [\n        {\"title\": \"Frozen II\", \"rating\": 7.5},\n        {\"title\": \"The Irishman\", \"rating\": 8.2},\n        {\"title\": \"Parasite\", \"rating\": 8.5},\n    ]\n}", "output": "import json\n\ndata = {\n    \"ratings\": [\n        {\"title\": \"Frozen II\", \"rating\": 7.5},\n        {\"title\": \"The Irishman\", \"rating\": 8.2},\n        {\"title\": \"Parasite\", \"rating\": 8.5},\n    ]\n}\n\ndata = json.loads(data)\n\nfor item in data['ratings']:\n    print(\"Rating for %s: %f\" % (item['title'], item['rating']))", "category": "Python"}, {"instruction": "Find all the multiples of a number in between two given numbers.", "input": "", "output": "def find_multiples(base, lower, upper):\n    output = []\n    for i in range(lower, upper+1):\n        if i % base == 0:\n            output.append(i)\n    return output", "category": "Python"}, {"instruction": "Write a function to create a new nested list with twice the length of the original.", "input": "original_list = [1, 2, [3, 4], 5]", "output": "def nested_list_doubled(original_list):\n  new_list = []\n  for item in original_list:\n    if isinstance(item, list):\n      new_list.append(nested_list_doubled(item))\n    else:\n      new_list.append(item)\n    new_list.append(item)\n  return new_list", "category": "Python"}, {"instruction": "Calculate the factorial of an integer using recursion.", "input": "", "output": "def factorial(n):\n  if n == 0:\n    return 1\n  else :\n    return n*factorial(n-1)", "category": "Python"}, {"instruction": "Implement an algorithm to print the steps of the Tower of Hanoi problem.", "input": "", "output": "def hanoi(num_disks, from_peg, to_peg, aux_peg):\n    if num_disks == 1:\n        print(\"Move disk 1 from peg\", from_peg,\"to peg\", to_peg)\n        return\n\n    hanoi(num_disks-1, from_peg, aux_peg, to_peg)\n    print(\"Move disk\",num_disks,\"from peg\",from_peg,\"to peg\",to_peg)\n    hanoi(num_disks-1, aux_peg, to_peg, from_peg)", "category": "Python"}, {"instruction": "Summarize the given text in 3-5 sentences.", "input": "REST is an architectural style that defines a set of constraints and properties based on HTTP. It basically uses HTTP for communication between services. It stands for Representational State Transfer, and defines the various ways by which services can provide data and be interacted with.", "output": "#Summarize the given text in 3-5 sentences\n\nREST (Representational State Transfer) is an architecture style used to communicate between services over HTTP. It is composed of a set of constraints and properties that define how the services communicate and exchange data. REST is useful in implementing a distributed system, as it follows client-server model of communication and thus, simplifies the interaction between different services. Furthermore, REST is a stateless protocol, meaning that the server does not store any state about the client session. Instead, each request and responses are self-contained, eliminating the need to maintain any client-specific state.", "category": "Python"}, {"instruction": "Write a function that takes two parameters, a list and a number. If a number is found in the list, the function should return its index, else it should return -1.", "input": "[1, 2, 3, 4, 9], 2", "output": "#Write a function that takes two parameters, a list and a number.\ndef find_number(list_num, num):\n    '''This function takes in a list of numbers and \na number and returns the index of the number if it is found, \nelse return -1.'''\n    \n    # Traverse through the list\n    for i in range(len(list_num)):\n        # If the number is found\n        if list_num[i] == num:\n            # return its index\n            return i\n    # Number not found\n    return -1", "category": "Python"}, {"instruction": "Implement a function that takes in 2 strings and returns a new string consisting of alternating characters from the strings passed in.", "input": "\"hello\"\n\"world\"", "output": "#Implement a function that takes in 2 strings and returns a new string consisting of alternating characters\ndef alt_string(str1, str2):\n    alt_str = \"\" \n    length = len(str1) if len(str1) <= len(str2) else len(str2)\n    \n    for i in range(length):\n        alt_str += str1[i] + str2[i]\n    \n    if len(str1) > len(str2):\n        alt_str += str1[length:]\n    elif len(str2) > len(str1):\n        alt_str += str2[length:]\n    \n    return alt_str", "category": "Python"}, {"instruction": "Find the maximum sum of a subarray of size 'k' in a given array.", "input": "arr = [1, 4, 2, 10, 23, 3, 1, 0, 20]\nk = 4", "output": "def max_sum_subarray(arr, k):\n    max_sum = 0\n    for i in range(len(arr) - k + 1):\n        curr_sum = 0\n        for j in range(i, i + k):\n            curr_sum += arr[j]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum", "category": "Python"}, {"instruction": "Create a function to check the validity of an email address.", "input": "", "output": "def validate_email(email):\n    regex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n    if re.search(regex,email):\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Design a function to take a URL and return the content of the URL.", "input": "", "output": "import requests\n\ndef get_content(url):\n    response = requests.get(url)\n    html = response.content\n    return html", "category": "Python"}, {"instruction": "Create a program to group the numbers in the given list into odd and even groups.", "input": "[1,2,3,4,5,6]", "output": "nums = [1,2,3,4,5,6]\n\nodd_nums = []\neven_nums = []\n\nfor num in nums:\n    if num % 2 == 0:\n        even_nums.append(num)\n    else:\n        odd_nums.append(num)\n\nprint('Odd numbers:', odd_nums)\nprint('Even numbers:', even_nums)", "category": "Python"}, {"instruction": "Parse a JSON string and print all the key-value pairs in alphabetical order.", "input": "{\n \"orange\": 4,\n \"apple\": 1,\n \"banana\": 2\n}", "output": "import json\n\ndef parse_json(json_str):\n    data = json.loads(json_str)\n\n    for key, values in sorted(data.items()):\n        print(key, \"=\", values)\n\nparse_json('{\"orange\": 4, \"apple\": 1, \"banana\": 2 }')", "category": "Python"}, {"instruction": "Given a dictionary, write a program to create a new dictionary where the values are the keys and the keys are the values.", "input": "{\"apple\": 1, \"banana\": 2, \"carrot\": 3}", "output": "def reverse_dict(d):\n    new_d = {v:k for k, v in d.items()}\n    return new_d\n\nd = {\"apple\": 1, \"banana\": 2, \"carrot\": 3}\nprint(reverse_dict(d))", "category": "Python"}, {"instruction": "Detect if a particular character is included in a string or not.", "input": "string = \"Hello World!\"\ncharacter = '!'", "output": "def character_check(string, character):\n    if character in string:\n        return True\n    else:\n        return False\n\ncheck = character_check(string, character)\nprint(check) # Output: True", "category": "Python"}, {"instruction": "Develop a function in Python which prints the name of the day (eg. \"Monday\") given any date as an argument.", "input": "Date: October 13th, 2020", "output": "def get_day(date):\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n    day_index = date.weekday()\n    return days[day_index]\n\nprint(get_day(date(2020, 10, 13)))", "category": "Python"}, {"instruction": "Given a string consisting of alphanumeric characters, separate it into left and right parts so that the left part contains only digits and the right part contains only letters.", "input": "String: Ab243rG", "output": "left, right = '', ''\nfor char in string:\n    if char.isdigit():\n        left += char\n    else:\n        right += char", "category": "Python"}, {"instruction": "Write a code to add two matrices of any size.", "input": "[[1, 2, 3],\n [4, 5, 6]]\n+\n[[7, 8, 9],\n [10, 11, 12]]", "output": "def matrix_addition(mat1, mat2):\n    # check whether two matrices are of same size\n    if(len(mat1) != len(mat2)):\n        return 'Not possible to add matrices'\n    else: \n        # adding elements of mat1 and mat2\n        result = [[0 for col in range(len(mat1[0]))] for row in range(len(mat1))]\n        for i in range(len(mat1)):\n            for j in range(len(mat1[0])):\n                result[i][j] = mat1[i][j] + mat2[i][j]\n    return result\n\n# initializing two matrices\nmat1 = [[1, 2, 3], [4, 5, 6]]\nmat2 = [[7, 8, 9], [10, 11, 12]]\n\nprint(matrix_addition(mat1, mat2))", "category": "Python"}, {"instruction": "Given a list of strings and an input string, find the index of the input string in the list.", "input": "list = [\"red\", \"blue\", \"green\", \"yellow\"]\nstring = \"green\"", "output": "def find_string(list, target):\n    for index, value in enumerate(list):\n        if value == target:\n            return index\n\nlist = [\"red\", \"blue\", \"green\", \"yellow\"]\nstring = \"green\"\nprint(find_string(list, string)) # Output 2", "category": "Python"}, {"instruction": "Construct a matrix in Python containing 5 rows and 4 columns of random floating point numbers between 0 and 1.", "input": "", "output": "import numpy as np\n\nmatrix = np.random.uniform(0,1, (5,4))", "category": "Python"}, {"instruction": "Create a script to connect to a MySQL database using Python.", "input": "", "output": "import mysql.connector\n\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"yourusername\",\n  passwd=\"yourpassword\",\n  database=\"mydatabase\"\n)", "category": "Python"}, {"instruction": "Generate a pandas DataFrame with three columns containing random integer numbers between 0 and 10.", "input": "", "output": "import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randint(0, 11, size=(3, 3)), \n                  columns=['Column1', 'Column2', 'Column3'])", "category": "Python"}, {"instruction": "Using the given snippet of code, create a compiler to check if a given string is valid Python code.", "input": "", "output": "import ast \ndef check_syntax(code): \n  try: \n    ast.parse(code) \n  except SyntaxError: \n    return False\n  else: \n    return True", "category": "Python"}, {"instruction": "Describe an algorithm for finding the maximum value in a given list of integers.", "input": "", "output": "A simple algorithm to find the maximum value in a given list of integers is to start with the first element and compare it with the subsequent elements. If a larger element is found, update the maximum value and continue comparing. At the end of the loop, the maximum value will hold the maximum value from the given list.", "category": "Python"}, {"instruction": "Create a string of length 100 using a Python loop and save it into a variable named 'string_100'.", "input": "", "output": "string_100 = ''\nfor i in range(100):\n string_100 += 'x'", "category": "Python"}, {"instruction": "Create a linear regression model using TensorFlow.", "input": "", "output": "import tensorflow as tf\n\n# Create array of feature vectors\nX = tf.constant([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]])\n\n# Create array of labels\ny = tf.constant([[10.0], [", "category": "Python"}, {"instruction": "Train a model to predict the labels of a handwritten digits dataset.", "input": "", "output": "import numpy as np\nfrom sklearn.datasets import load_digits\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Load the data\ndigits = load_digits()\nX = digits.data\ny = digits.target\n\n# Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# Train the model\nmodel = KNeighborsClassifier(n_neighbors=5)\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\nacc = model.score(X_test, y_test)\n\nprint(\"Accuracy:\", acc)", "category": "Python"}, {"instruction": "Write a function to compress a string by counting the characters.", "input": "", "output": "def compressString(s): \n\tcomp_string = \"\"\n\tcount = 1\n\tfor i in range(len(s) - 1): \n\t\tif(s[i] == s[i+1]): \n\t\t\tcount+= 1\n\t\telse: \n\t\t\tcomp_string += s[i] + str(count) \n\t\t\tcount = 1\n\tcomp_string += s[i] + str(count) \n\treturn comp_string", "category": "Python"}, {"instruction": "Modify the given Python code to remove any punctuations from the given string.", "input": "string = \"Hello, how are you?\"", "output": "import string\n\ndef remove_punctuation(string):\n    for punct in string.punctuation:\n        string = string.replace(punct, '')\n    return string\n\nstring = \"Hello, how are you?\"\nprint(remove_punctuation(string)) # output 'Hello how are you'", "category": "Python"}, {"instruction": "Write a function to traverse a dictionary recursively and print all the keys.", "input": "", "output": "def printAllKeys(dictionary): \n    if type(dictionary) == dict: \n        for key in dictionary: \n            print(key) \n            printAllKeys(dictionary[key])", "category": "Python"}, {"instruction": "Segregate the negative numbers to the left side and positive numbers to the right side of an array.", "input": "", "output": "def segregate_numbers(array): \n    j = 0\n    for i in range(len(array)): \n        if (array[i] <= 0): \n            array[i], array[j] = array[j], array[i] \n            j+=1\n    return array", "category": "Python"}, {"instruction": "Compile and Run this program in Python.", "input": "a = 10\nb = 5\n\nprint(\"The sum of a and b is \", a + b)", "output": "The sum of a and b is 15", "category": "Python"}, {"instruction": "Given a linked list, write a function to reverse it.", "input": "", "output": "def reverse_linked_list(head):\n    if head is None or head.next is None:\n        return head\n\n    # Get second node\n    current = head.next\n    # Set first node as tail\n    head.next = None\n    # Set next of second node as third node\n    next = current.next\n\n    while(next):\n        # reverse pointer\n        current.next = head\n        # Move head pointer one position forward\n        head = current\n        # Move current pointer one position forward\n        current = next\n        # Move next pointer one position forward\n        next = current.next\n    # Append last node\n    current.next = head\n    return current", "category": "Python"}, {"instruction": "Given a list of numbers, write a function to return a list containing the cumulative sum of all elements in the input list.", "input": "[1, 2, 3, 4]", "output": "def cumulative_sum(lst):\n    res = []\n    sums = 0\n    for num in lst:\n        sums += num\n        res.append(sums)\n    return res\n\n# Example\ncumulative_sum([1, 2, 3, 4]) # Output: [1, 3, 6, 10]", "category": "Python"}, {"instruction": "Create a function \u2018fibonacci\u2019 which takes an argument \u2018n\u2019 and prints the Fibonacci series up to the nth term.", "input": "", "output": "def fibonacci(n):\n  a = 0\n  b = 1\n  if n < 0:\n    print(\"Incorrect input\")\n  elif n == 0:\n    return a\n  elif n == 1:\n    return b\n  else:\n     for i in range(2,n):\n       c = a + b\n       a = b\n       b = c\n     return b", "category": "Python"}, {"instruction": "Which type of loops can be used in Python?", "input": "", "output": "Python supports for loops, while loops, and nested loops. Additionally, the loop statement can be used to construct an infinite loop.", "category": "Python"}, {"instruction": "Design a function in Python to calculate the area of an equilateral triangle.", "input": "", "output": "def triangle_area(side):\n return side * (side ** 0.5) / 2", "category": "Python"}, {"instruction": "How to compare two lists in Python?", "input": "", "output": "def compare_lists(l1, l2):\n    if len(l1) != len(l2):\n        return False\n\n    for i in range(len(l1)):\n        if l1[i] != l2[i]:\n            return False\n\n    return True", "category": "Python"}, {"instruction": "How to create a loop in Python which will iterate over a list?", "input": "", "output": "#Iterate over a list \nlist = [1, 2, 3, 4, 5]\n\nfor item in list:\n    print(item)", "category": "Python"}, {"instruction": "Create a class in Python for performing basic math calculations", "input": "", "output": "class MathCalculations:\n    \"\"\"\n    Class to perform math calculations \n    \"\"\"\n\n    def __init__(self):\n        pass\n\n    def add(self, num1, num2):\n        \"\"\"\n        Add two numbers\n        \"\"\"\n        return num1 + num2\n\n    def subtract(self, num1, num2):\n        \"\"\"\n        Subtract two numbers\n        \"\"\"\n        return num1 - num2\n\n    def multiply(self, num1, num2):\n        \"\"\"\n        Multiply two numbers\n        \"\"\"\n        return num1 * num2\n\n    def divide(self, num1, num2):\n        \"\"\"\n        Divide two numbers\n        \"\"\"\n        return num1 / num2", "category": "Python"}, {"instruction": "Given a pair of same-length strings, identify character matches in the same position.", "input": "str1 = 'Hello'\nstr2 = 'World'", "output": "def character_match(str1, str2):\n  match_list = []\n  for i in range(len(str1)):\n    if str1[i] == str2[i]:\n      match_list.append(str1[i])\n  return match_list", "category": "Python"}, {"instruction": "Edit the given Python code to remove duplicate items from the given list.", "input": "my_list = [1, 2, 2, 3, 4, 5, 4]", "output": "def remove_duplicate(my_list):\n    return list(set(my_list))\n\nmy_list = [1, 2, 2, 3, 4, 5, 4]\nprint(remove_duplicate(my_list)) # Output [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Create a web browser automation script in Python to scrape the data from a website.", "input": "", "output": "from selenium import webdriver\n\n# Create webdriver object\ndriver = webdriver.Chrome()\n\n# Put target website URL\nurl = 'https://www.example.com/'\n\n# Navigate to the website\ndriver.get(url)\n\n# Scrape the data\ndata = driver.find_elements_by_xpath('//*[@class=\"data-class\"]')\nfor element in data:\n    print(element.text)\n\n# Close the browser\ndriver.close()", "category": "Python"}, {"instruction": "Create a list of five randomly generated integers from 1 to 10 in Python.", "input": "", "output": "import random\n\nrandom_list = [random.randint(1, 10) for int_num in range(5)]\n\nprint(random_list)", "category": "Python"}, {"instruction": "Implement a function that takes a 2D matrix and rotates the matrix 90 degrees clockwise.", "input": "[[1,2,3],\n [4,5,6],\n [7,8,9]]", "output": "def rotate_2d_matrix(matrix):\n    n = len(matrix[0])\n    m = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            m[i][j] = matrix[n-j-1][i]\n    return m", "category": "Python"}, {"instruction": "Create a function that takes two strings as input and returns true if the characters in one of the string appear in order in the other string.", "input": "mystring isthis", "output": "\"\"\"\nCreate a function that takes two strings as input and returns true if the characters in one of the string appear in order in the other string\n\"\"\"\ndef is_substring(str1, str2):\n  i = 0\n  for char in str2:\n    if char == str1[i]:\n      i += 1\n    if i == len(str1):\n      return True\n  return False\n\nif __name__ == '__main__':\n    print(is_substring('mystring', 'isthis')) # True", "category": "Python"}, {"instruction": "Create a function that can transform a string of text into an object containing the number of occurrences of each letter in the string.", "input": "Hello World", "output": "\"\"\"\nCreate a function that can tranform a string of text into an object containing the number of occurrences of each letter in the string\n\"\"\"\ndef count_letters(s):\n  letter_dict = {}\n  for letter in s:\n    if letter in letter_dict:\n      letter_dict[letter] += 1\n    else:\n      letter_dict[letter] = 1\n  \n  return letter_dict\n\nif __name__ == '__main__':\n    print(count_letters('Hello World')) # {'H': 1, 'e': 1, 'l': 3, 'o': 2, 'W': 1, 'r': 1, 'd': 1}", "category": "Python"}, {"instruction": "Given a set of points and an origin point, calculate the distance between the origin point and each point in the set.", "input": "[(1,1),(4,4),(3,3)] (0,0)", "output": "\"\"\"\nGiven a set of points and an origin point, calculate the distance between the origin point and each point in the set\n\"\"\"\nimport math \n\ndef points_distance(points, origin):\n    distances = []\n    for point in points:\n        distances.append(math.sqrt((point[0]-origin[0])**2 + (point[1]-origin[1])**2))\n    return distances\n\nif __name__ == '__main__':\n    print(points_distance([(1,1),(4,4),(3,3)], (0,0))) # [1.4142135623730951, 5.65685424949238, 4.242640687119285]", "category": "Python"}, {"instruction": "Create a class that can represent a 2D coordinate system.", "input": "", "output": "\"\"\"\nCreate a class that can represent a 2D coordinate system\n\"\"\"\nclass CoordinateSystem:\n  def __init__(self,x,y):\n    self.x = x\n    self.y = y\n  \n  def add(self,other):\n    x = self.x + other.x\n    y = self.y + other.y\n    return CoordinateSystem(x,y)\n\nif __name__ == '__main__':\n    a = CoordinateSystem(1,2)\n    b = CoordinateSystem(3,4)\n    print(a.add(b)) # <__main__.CoordinateSystem object at 0x000002B50FE37B70>", "category": "Python"}, {"instruction": "Create a function that can concatenate two lists into a string separated by comma.", "input": "[1, 2, 3] [4, 5, 6]", "output": "\"\"\"\nCreate a function that can concatenate two lists into a string separated by comma\n\"\"\"\ndef concat_lists(list1, list2):\n  return ','.join([str(i) for i in list1 + list2]) \n  \nif __name__ == '__main__':\n    print(concat_lists([1, 2, 3], [4, 5, 6]))", "category": "Python"}, {"instruction": "Generate a random password of length 16 using the letters a-z.", "input": "", "output": "\"\"\"\nGenerate a random password of length 16 using the letters a-z\n\"\"\"\nimport random\n\ndef generate_password():\n  letters = 'abcdefghijklmnopqrstuvwxyz'\n  return ''.join(random.choice(letters) for i in range(16))\n\nif __name__ == '__main__':\n    print(generate_password())", "category": "Python"}, {"instruction": "Sort a list of words by the frequency of their occurrence.", "input": "dog cat bed dog mouse rat", "output": "\"\"\"\nSort a list of words by the frequency of their occurrence\n\"\"\"\n\ndef sort_words_by_frequency(words):\n    frequency_dict = {}\n    for word in words:\n        if word in frequency_dict:\n            frequency_dict[word] += 1\n        else:\n            frequency_dict[word] = 1\n\n    sorted_words = sorted(frequency_dict.items(), key=lambda x: x[1], reverse=True)\n    return [word for word, _ in sorted_words]\n\nif __name__ == '__main__':\n    print(sort_words_by_frequency(['dog', 'cat', 'bed', 'dog', 'mouse', 'rat']))", "category": "Python"}, {"instruction": "Create a deep learning model to output a sentence in French when given an English sentence as input.", "input": "I like to eat apples.", "output": "\"\"\"\nCreate a deep learning model to output a sentence in French when given an English sentence as input\n\"\"\"\nimport tensorflow as tf\nimport numpy as np\n\n# Input and output languages\ninput_lang = 'EN'\noutput_lang = 'FR'\n\n# Define the model\nmodel = tf.keras.Sequential([\n  tf.keras.layers.Embedding(input_dim=vocab_size, output_dim=128, input_length=10),\n  tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64)),\n  tf.keras.layers.Dense(vocab_size, activation='softmax')\n])\n\n# Compile and train the model\nmodel.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              optimizer=tf.keras.optimizers.Adam())\nmodel.fit(input_tensor, output_tensor, epochs=100) \n\n# Make a prediction\nsentence = 'I like to eat apples.'\npredicted_sentence = translate(sentence, input_lang, output_lang, model) \n\nprint(predicted_sentence) # J'aime manger des pommes.", "category": "Python"}, {"instruction": "Write a code to change a string to have its first letter capitalized and the remaining characters in lower case.", "input": "mySTRING", "output": "\"\"\"\nChange a string to have its first letter capitalized and the remaining characters in lower case\n\"\"\"\n\ndef capitalize_string(s):\n  return s[0].upper() + s[1:].lower()\n  \nif __name__ == '__main__':\n    print(capitalize_string('mySTRING'))", "category": "Python"}, {"instruction": "Develop a Python program to remove elements from a dictionary.", "input": "my_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}", "output": "my_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n\n# remove element 'd'\nmy_dict.pop('d', None)\n\n# print resulting dictionary\nprint(my_dict)\n\n# Output: {'a': 1, 'b': 2, 'c': 3}", "category": "Python"}, {"instruction": "Test the following Python code for any errors.", "input": "def calculate_mean(numbers):\n    total_sum = 0;\n    for n in numbers:\n        total_sum += n\n    mean = total_sum / 10   # length of numbers", "output": "No errors have been found in the code.", "category": "Python"}, {"instruction": "Modify the program to take a given list of integers and returns the maximum and minimum values.", "input": "list_of_numbers = [3, 8, -1, 5]", "output": "def min_max(list_of_numbers):\n    min = list_of_numbers[0]\n    max = list_of_numbers[0]\n    for number in list_of_numbers:\n        if number > max:\n            max = number\n        elif number < min:\n            min = number\n    return min, max", "category": "Python"}, {"instruction": "Implement a Python code that takes a string and reverses the characters in place.", "input": "string = \"This is easy\"", "output": "def reverse_in_place(string):\n    return string[::-1]", "category": "Python"}, {"instruction": "Generate a python code that takes a list of integers, prints out an array that is all True if the values are in the input list and all False otherwise.", "input": "list_of_numbers = [5, 7, 10, 2]", "output": "def boolean_search(list_of_numbers):\n    result_array = []\n    for elem in list_of_numbers:\n        result_array.append(elem in list_of_numbers)\n    return result_array", "category": "Python"}, {"instruction": "Write a function that takes an input string and finds the number of non-printable characters.", "input": "", "output": "def count_non_printable_characters(string):\n    non_printable = ''.join(chr(i) for i in range(0, 32))\n    counter = 0\n    for char in string:\n        if char in non_printable:\n            counter+= 1\n    return counter", "category": "Python"}, {"instruction": "Generate a function to create a list of factors for a given integer.", "input": "", "output": "def factor_list(number):    \n    factors = []\n \n    i = 2\n    while i * i <= number:\n        if number % i:\n            i += 1\n        else:\n            number //= i\n            factors.append(i)\n    if number > 1:\n        factors.append(number)\n \n    return factors", "category": "Python"}, {"instruction": "Create a calculator program using Python to do the following calculations.", "input": "A = 30;\nB = 15;\nC = 4;", "output": "def calculator(A, B, C):\n    add = A + B\n    subtract = A - B\n    multiply = A * C\n    divide = A / B\n    remainder = A % B\n    return add, subtract, multiply, divide, remainder", "category": "Python"}, {"instruction": "Generate a general shopping list using Python.", "input": "", "output": "def generate_shopping_list():\n    list_items = ['Bread', 'Milk', 'Butter', 'Eggs', 'Cereal', 'Fruits', 'Veggies', 'Canned food', 'Frozen food', 'Cheese', 'Meat', 'Snacks', 'Coffee', 'Tea', 'Sugar', 'Salt', 'Herbs', 'Cooking oil', 'Detergent', 'Toilet paper']\n    return list_items", "category": "Python"}, {"instruction": "Modify the code in Python to convert a lower case string to an upper case string.", "input": "'hello world'", "output": "string = 'hello world'\nstring = string.upper()\nprint(string)", "category": "Python"}, {"instruction": "Generate a function which takes a two-dimensional array of integers as an argument and prints out the elements in spiral order.", "input": "[[1,2,3],\n[4,5,6],\n[7,8,9]]", "output": "def printSpiral(arr):\n    # track the current row and columns\n    cur_row = 0\n    cur_col = 0\n    \n    # track the starting and ending columns of the row and rows of the column\n    start_col = 0\n    end_col = len(arr[0]) - 1\n    start_row = 0\n    end_row = len(arr) - 1\n    \n    while start_col <= end_col and start_row <= end_row:\n        # move right\n        for i in range(start_col, end_col + 1):\n            print(arr[cur_row][i])\n        start_row += 1\n        cur_row = start_row\n        \n        # move down\n        for i in range(start_row, end_row + 1):\n            print(arr[i][end_col])\n        end_col -= 1\n        cur_col = end_col\n        \n        # move left\n        for i in range(end_col, start_col - 1, -1):\n            print(arr[end_row][i])\n        end_row -= 1\n        cur_row = end_row\n        \n        # move up\n        for i in range(end_row, start_row - 1, -1):\n            print(arr[i][start_col])\n        start_col += 1\n        cur_col = start_col", "category": "Python"}, {"instruction": "Design an algorithm to find the two numbers in an array that have the largest sum.", "input": "[1,3,4,6,7]", "output": "# Finds two numbers in an array that have the largest sum\ndef getMaxSum(arr):\n    # Initialize the sum to the maximum possible value\n\tmaxSum = -float('inf')\n\t\n\t# Iterate over all elements of the array\n\tfor i in range(len(arr)):\n\t\tfor j in range(i+1, len(arr)):\n\t\t\t# Compare the current sum to the maximum sum\n\t\t\tmaxSum = max(maxSum, arr[i] + arr[j])\n\n    # Return the largest sum\n\treturn maxSum", "category": "Python"}, {"instruction": "Define a function to remove all the even numbers from a list in Python.", "input": "sample_list = [1,2,3,4,5,6,7,8]", "output": "sample_list = [1,2,3,4,5,6,7,8]\n\ndef remove_even_numbers(lst):\n    for num in lst:\n        if num % 2 == 0:\n            lst.remove(num)\n    return lst\n\nprint(remove_even_numbers(sample_list))", "category": "Python"}, {"instruction": "In the following code, identify the bug and suggest a fix.", "input": "def add_two_strings(string1, string2):\n    return string1 + string2", "output": "def add_two_strings(string1, string2):\n    \"\"\"A function to add two strings together and return the concatenated result.\"\"\"\n    if isinstance(string1, str) and isinstance(string2, str):\n        return string1 + string2\n    else:\n        raise TypeError(\"Both arguments must be strings\")", "category": "Python"}, {"instruction": "How would you modify the following code to add a time delay of 1 second between each iteration of the loop?", "input": "for i in range(10):\n    print(i)", "output": "import time\n\nfor i in range(10):\n    print(i)\n    time.sleep(1)", "category": "Python"}, {"instruction": "Identify the bugs in the following python code and fix them.", "input": "def multiply_dicts(d1, d2):\n    for key in d1:\n        d1[key] = d2[d1[key]]", "output": "def multiply_dicts(d1, d2):\n    for key in d1:\n        if key in d2:\n            d1[key] = d2[key]", "category": "Python"}, {"instruction": "Create a constructor for the following class in Python.", "input": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "category": "Python"}, {"instruction": "Suggest a Python code to match the substring \"is\" in the given string \"This is a programming task\".", "input": "", "output": "import re\n\nstring = \"This is a programming task\"\n\npattern = r\"is\"\n\nif re.search(pattern, string):\n  print(\"Match found\")\nelse:\n  print(\"No match found\")", "category": "Python"}, {"instruction": "Suggest a Python code to filter a list of numbers so that all even numbers are removed.", "input": "", "output": "numbers = [1, 2, 3, 4, 5, 6, 7, 8]\nnew_list = [num for num in numbers if num % 2 != 0]\nprint(new_list)", "category": "Python"}, {"instruction": "Suggest a Python code to create a list containing the first five positive numbers.", "input": "", "output": "numbers = []\nfor i in range(1, 6):\n numbers.append(i)\nprint(numbers)", "category": "Python"}, {"instruction": "Re-write the following method to use a single loop instead of two.", "input": "def sum_special(arr):\n    temp = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            temp += arr[i] * arr[j]\n    return temp", "output": "def sum_special(arr):\n    temp = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            temp += arr[i] * arr[j]\n    return temp", "category": "Python"}, {"instruction": "Produce a program to print out the frequency of characters in a word.", "input": "Python", "output": "def character_frequency(word):\n    freq_dict = {}\n    for char in word:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    return freq_dict\n\nword = 'Python'\nprint(character_frequency(word))\n# {'P': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}", "category": "Python"}, {"instruction": "Generate a code to identify duplicate elements in a list", "input": "", "output": "def find_duplicates(lst):\n    duplicate_elements = []\n    for element in lst:\n        if lst.count(element) > 1 and element not in duplicate_elements:\n            duplicate_elements.append(element)\n    return duplicate_elements\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5, 6, 1]\n    print(find_duplicates(lst))", "category": "Python"}, {"instruction": "Generate an algorithm that creates a Fibonacci sequence", "input": "", "output": "def Fibonacci_sequence(length): \n    fib_seq = [0, 1]\n    if length == 1:\n        return [0]\n    elif length == 2:\n        return fib_seq\n    else:\n        for i in range(2, length):\n            fib_seq.append(fib_seq[i - 1] + fib_seq[i - 2])\n        return fib_seq\n\nif __name__ == '__main__':\n    length = 7\n    print(Fibonacci_sequence(length))", "category": "Python"}, {"instruction": "Write a code to calculate the gravitational force between two objects", "input": "Two objects with a mass of 3kg and 10kg are separated by 10m.", "output": "def gravitational_force(m1, m2, r):\n    G = 6.67 * 10**-11\n    f = G*(m1*m2/r**2)\n    return f\n    \nif __name__ == '__main__':\n    m1 = 3\n    m2 = 10\n    r = 10\n    force = gravitational_force(m1, m2, r)\n    print(force)", "category": "Python"}, {"instruction": "Output the output of the following python script.", "input": "Python Script:\n\nx = 5\ny = 7\n\ndef add(x, y):\n    return x + y\n\nadd(x, y)", "output": "12", "category": "Python"}, {"instruction": "Suggest a code to do the following task: Input a string and output the count of all the characters occuring in the string.", "input": "String: \"Hello World\"", "output": "string = \"Hello World\"\n\ndef count_characters(string):\n    count_dict = {}\n    for char in string:\n        if char not in count_dict:\n            count_dict[char] = 1\n        else:\n            count_dict[char] += 1\n    return count_dict\n\nprint(count_characters(string))", "category": "Python"}, {"instruction": "Write a code to generate a random password containing at least one symbol, one number, one lowercase letter and one uppercase letter", "input": "", "output": "import string\nimport random\n\ndef generate_password(length):\n    symbols = string.punctuation\n    numbers = string.digits\n    lowercase = string.ascii_lowercase\n    uppercase = string.ascii_uppercase\n    \n    characters = symbols + numbers + lowercase + uppercase\n    password = random.choice(symbols) + random.choice(numbers) + random.choice(lowercase) + random.choice(uppercase)\n    \n    for _ in range(length-4):\n        password += random.choice(characters)\n        \n    return password", "category": "Python"}, {"instruction": "Edit the following code to generate a boolean array with True for odd numbers and False for even numbers", "input": "a = [1, 2, 3, 4, 5]", "output": "import numpy as np\n\na = [1, 2, 3, 4, 5]\nb = np.array([i % 2 for i in a])", "category": "Python"}, {"instruction": "Write a Python program to find the group of three numbers in a list that has the greatest product.", "input": "list = [2, 3, -2, -3, 4, -5]", "output": "def find_greatest_product(lst):\n    products = []\n    for i in range(len(lst)-2):\n        for j in range(i+1, len(lst)-1):\n            for k in range(j+1, len(lst)):\n                products.append(lst[i] * lst[j] * lst[k])\n    return max(products)", "category": "Python"}, {"instruction": "Write a code to get the current weather information for a given city.", "input": "city = \"New York\"", "output": "import requests\nimport json\n\ndef get_weather_information(city):\n    url = 'http://api.openweathermap.org/data/2.5/weather?q={},<APIKEY>'.format(city)\n\n    response = requests.get(url)\n    data = json.loads(response.text)\n    return data\n\nif __name__ == '__main__':\n    print(get_weather_information(\"New York\"))", "category": "Python"}, {"instruction": "Write a function that expects a string as a parameter and returns all the words in the string with the length greater than three", "input": "This is a test string", "output": "def greater_than_three(string):\n    words = string.split(\" \")\n    result = []\n    for word in words:\n        if len(word) > 3:\n            result.append(word)\n    return result", "category": "Python"}, {"instruction": "Write a Python function to create a matrix of given size filled with zeros.", "input": "3", "output": "def create_matrix(size):\n    matrix = []\n    for i in range(size):\n        row = []\n        for j in range(size):\n            row.append(0)\n        matrix.append(row)\n    return matrix", "category": "Python"}, {"instruction": "Write a function to add one to every element in an array of integers.", "input": "arr = [1,3,5,7]", "output": "def add_one(arr): \n    for i in range(len(arr)): \n        arr[i] += 1 \n    return arr", "category": "Python"}, {"instruction": "Create a function that takes three parameters, a start number, an end number, and a step. It should return a list containing all the numbers between the start and end numbers in steps of the given size.", "input": "start = 0\nend = 10\nstep = 2", "output": "def create_list(start, end, step): \n    list = [] \n    while start < end: \n        list.append(start) \n        start += step \n    return list", "category": "Python"}, {"instruction": "Add the following line to the top of this Python code to make it syntactically correct.", "input": "begin\ndef test_it();\n    print(\"This is a test\")", "output": "# Add the following line to the top of this Python code to make it syntactically correct.\ndef test_it():\n    print(\"This is a test\")", "category": "Python"}, {"instruction": "Create a function that takes a string and an integer as input and returns the string repeated n times.", "input": "", "output": "def repeat_string(string, n):\n    \"\"\"\n    This function takes a string and an integer as input and returns the \n    string repeated n times.\n\n    Parameters:\n    string (string): The string that needs to be repeated.\n    n (int): The number of times the string needs to be repeated.\n\n    Returns:\n    string: The repeated string\n    \"\"\"\n    return string * n", "category": "Python"}, {"instruction": "Write a code to print out all numbers between 1 and n divisible by 3 and 5 without using a loop.", "input": "", "output": "def print_numbers(n): \n    x = list(range(1,n+1)) \n    print([i for i in x if i % 3 == 0 and i % 5 == 0]) \n \n# Driver code \nn = 15\nprint_numbers(n)", "category": "Python"}, {"instruction": "Write a code to train a sentiment classification model on the IMDB sentiment analysis dataset.", "input": "", "output": "# import libraries \nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# load the data\nimdb = pd.read_csv('imdb.csv')\n\n# Create feature vectors for training\nvectorizer = CountVectorizer() \nX = vectorizer.fit_transform(imdb.TEXT)\ny = imdb.SENTIMENT\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=42)\n \n# Train a logistic regression classifier\nlr = LogisticRegression(solver='lbfgs').fit(X_train, y_train)\n\n# Evaluate the model performance\naccuracy = lr.score(X_test, y_test)\nprint('Accuracy of sentiment classification model:', accuracy)", "category": "Python"}, {"instruction": "Create a function to find the area of a circle by taking the radius as an argument.", "input": "", "output": "def area_of_circle(radius):\n    \"\"\"\n    This function takes a radius as input and returns the area of the circle.\n\n    Parameters:\n    radius (float): The radius of the circle.\n\n    Returns:\n    float: The area of the circle.\n    \"\"\"\n    return 3.14 * (radius ** 2)", "category": "Python"}, {"instruction": "Write a code to find the longest consecutive sequence inside of a given list of numbers.", "input": "[1, 3, 5, 7, 8, 2, 4, 9]", "output": "def find_longest_seq(arr):\n    max_len = 0\n    curr_seq = []\n    for num in arr:\n        if not curr_seq or num == curr_seq[-1] + 1:\n            curr_seq.append(num)\n            max_len = max(max_len, len(curr_seq))\n        else: \n            curr_seq = [num]\n    return max_len", "category": "Python"}, {"instruction": "Write a function that takes a list of integers and returns the shortest continuous increasing subarray in the list.", "input": "[2,3,3,4,3,4,5,6,7]", "output": "def shortest_increasing_subarray(nums):\n    res, curr = float('inf'), 0\n    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]: \n            curr += 1\n        else:\n            res = min(res, curr)\n            curr = 0\n    return max(res, curr) + 1", "category": "Python"}, {"instruction": "Write a Python class for a Rectangle object with two instance attributes, length and width.", "input": "", "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length \n        self.width = width", "category": "Python"}, {"instruction": "Create a sorting algorithm to sort a given list of numbers from lowest to highest.", "input": "[1, 4, 3, 7, 8, 10]", "output": "def sort_list(arr):\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        if min_index != i:\n            arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr", "category": "Python"}, {"instruction": "Using the given Python class, write a constructor and a method to display the details.", "input": "class Customer:", "output": "class Customer:\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address\n   \n    def display_details(self):\n        print(f\"Name: {self.name}\\nAge: {self.age}\\nAddress: {self.address}\")", "category": "Python"}, {"instruction": "Write a Python code that turns the given input into a list of dictionaries.", "input": "['John,21', 'Jane,27', 'Jack,38']", "output": "[{'name': 'John', 'age': '21'},\n {'name': 'Jane', 'age': '27'},\n {'name': 'Jack', 'age': '38'}]", "category": "Python"}, {"instruction": "Identify the vulnerabilities in the given program", "input": "def transferMoney(username,amount):\n    #read from db their current balance\n    curBalance=readDB(\"SELECT bankBalance from users where username=\" + username)\n    #update the current balance\n    curBalance+=amount\n    #write to the db with the new balance\n    writeDB(\"UPDATE users SET bankBalance = \" + curBalance + \" where username=\" + username)", "output": "The code is vulnerable to SQL injection when inserting username into the database queries as the parameter is not sanitized properly. It is also vulnerable to Race Condition attack if two threads try to update the same user's balance simultaneously. It is also vulnerable to Integer Overflow attack if the amount is greater than the maximum value allowed.", "category": "Python"}, {"instruction": "Modify the code to account for a list containing only one item.", "input": "def sum_list(list):\n    result=0\n    for number in list:\n        result+=number\n    return result", "output": "def sum_list(list):\n    if len(list) == 0:\n        return 0\n    elif len(list) == 1:\n        return list[0]\n    else:\n        result=0\n        for number in list:\n            result+=number\n        return result", "category": "Python"}, {"instruction": "Create a basic GUI with a button in Python.", "input": "", "output": "from tkinter import *\n\n# create GUI window\nroot = Tk()\n\n# create the button\nbtn = Button(root,text=\"Click me!\",width=10)\n\n# add the button to the window\nbtn.pack()\n\n# enter the mainloop\nroot.mainloop()", "category": "Python"}, {"instruction": "What is the correct syntax to create a dictionary in Python?", "input": "", "output": "my_dict = {'key1':'value1','key2':'value2'}", "category": "Python"}, {"instruction": "Write a Python function that takes in one argument and prints out the Fibonacci number for that argument.", "input": "", "output": "def Fibonacci(x): \n    if x == 0: \n        return 0\n    elif x == 1: \n        return 1\n    else: \n        return Fibonacci(x-1)+Fibonacci(x-2) \n\nif __name__ == '__main__':\n    print(Fibonacci(5))  # Output: 5", "category": "Python"}, {"instruction": "Write a Python script to send an email using the smtplib module.", "input": "", "output": "import smtplib\n\nsender = 'from@example.com'\nrecipients = ['to@example.com']\n\nmessage = \"\"\"Subject: Test Email\n\nThis is a test email message.\n\"\"\"\n\nwith smtplib.SMTP('localhost') as server:\n  server.sendmail(sender, recipients, message)", "category": "Python"}, {"instruction": "Construct a while loop in Python which runs until user input is equal to 5.", "input": "", "output": "userInput = 0\nwhile userInput != 5:\n    userInput = int(input('Enter a number: '))", "category": "Python"}, {"instruction": "Create a function in Python which takes a string and reverses it.", "input": "", "output": "def reverse_string(my_string):\n    return my_string[::-1]", "category": "Python"}, {"instruction": "Create a program to execute a given command-line argument.", "input": "", "output": "import sys\n\nif __name__ == '__main__':\n    args = sys.argv\n    if len(args) > 1:\n        command = args[1]\n        print(f'Executing command: {command}')\n        os.system(command)", "category": "Python"}, {"instruction": "Generate code to create a Numpy array with 3 rows and 4 columns.", "input": "", "output": "import numpy as np \narr = np.array([[0, 1, 2, 3], \n                [4, 5, 6, 7],\n                [8, 9, 10, 11]])", "category": "Python"}, {"instruction": "Develop a program that prints all the prime numbers between 0 and n.", "input": "", "output": "def prime_numbers(n): \n    primes = [] \n    for num in range(2, n+1): \n        is_prime = True\n        for i in range(2, num): \n            if (num % i == 0): \n                is_prime = False\n        if is_prime: \n            primes.append(num) \n    return primes", "category": "Python"}, {"instruction": "Write a loop in Python to create a multiplication table.", "input": "", "output": "for x in range(1, 11):\n   for y in range(1, 11):\n       print(x, 'x', y, '=', x*y)", "category": "Python"}, {"instruction": "Use TensorFlow to create a convolutional neural network to classify handwritten digits.", "input": "", "output": "import tensorflow as tf \n\n# Create a model\nmodel = tf.keras.models.Sequential([\n    # Add a convolutional layer with a 3x3 window\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)),\n    # Add a Max Pooling layer\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    # Add a Flatten layer\n    tf.keras.layers.Flatten(),\n    # Add a Dense layer with 10 neurons and a softmax activation function \n    tf.keras.layers.Dense(10, activation='softmax')\n])\n# Compile the model\nmodel.compile(optimizer='adam',\n   loss='sparse_categorical_crossentropy',\n   metrics=['accuracy'])", "category": "Python"}, {"instruction": "Given an array of numbers, provide a nested for loop to calculate the sum of elements in the array.", "input": "", "output": "sum = 0\nfor row in arr:\n for el in row: \n  sum += el \n\nprint(\"The sum of elements in the array is:\",sum)", "category": "Python"}, {"instruction": "Write the code to sort a dictionary by values in Python.", "input": "my_dict = {\n    \"a\": 10,\n    \"b\": 5,\n    \"c\": 15\n}", "output": "my_dict = {\n    \"a\": 10,\n    \"b\": 5,\n    \"c\": 15\n}\n\nsorted_dict = {k: v for k, v in sorted(my_dict.items(), key=lambda item: item[1])}\n\nprint(sorted_dict)\n#output: {\"b\": 5, \"a\": 10, \"c\": 15}", "category": "Python"}, {"instruction": "List the type of loops in Python.", "input": "", "output": "In Python, there are two types of loops - for loop and while loop. A for loop is used to iterate over a sequence (list, tuple, string). A while loop is used to iterate until a condition is met.", "category": "Python"}, {"instruction": "Write a function that takes an array of numbers and returns an array whose elements are the product of all the elements except the element at the current index.", "input": "arr = [2, 3, 4, 5]", "output": "def get_products(arr):\n    left = [1]\n    right = [1]\n    ans = []\n\n    # Traverse from left to right\n    for i in range(1, len(arr)):\n        left.append(arr[i-1] * left[i-1])\n\n    # Traverse from right to left\n    for i in reversed(range(len(arr)-1)):\n        right.insert(0, arr[i+1] * right[0])\n\n    # Compute the product of all elements except itself\n    for i in range(len(arr)):\n        ans.append(left[i] * right[i])\n\n    return ans\n\nget_products(arr) # returns [20, 15, 12, 10]", "category": "Python"}, {"instruction": "Write a function in Python that takes a number n as its parameter and returns the sum of the squares of the first n natural numbers", "input": "", "output": "def sum_of_squares(n):\n    result = 0\n    for i in range(1, n + 1):\n        result += i**2\n    return result", "category": "Python"}, {"instruction": "How does Python handle data types?", "input": "", "output": "Python uses dynamic typing, meaning that the type of data in a variable is not explicitly declared, instead it is automatically determined by the interpreter when a value is assigned to a variable. This allows for data types to be changed throughout the course of a program.", "category": "Python"}, {"instruction": "Construct an if/else statement in Python to print \"Welcome new user\" if the value of variable \"userID\" is greater than 0.", "input": "userID = 5", "output": "if userID > 0:\n    print(\"Welcome new user\")\nelse:\n    print(\"User ID is invalid\")", "category": "Python"}, {"instruction": "Find a tree traversal algorithm in Python.", "input": "", "output": "def tree_traversal(root): \n    if root is None: \n        return\n  \n    # First print the data of node \n    print(root.data) \n  \n    # Then recur on left child \n    tree_traversal(root.left) \n  \n    # Finally recur on right child \n    tree_traversal(root.right)", "category": "Python"}, {"instruction": "Generate a random list containing 10 elements in the range of 0-20", "input": "", "output": "import random \n\ndef generate_list(): \n    random_list = []\n    for i in range(10): \n        random_list.append(random.randint(0, 20)) \n  \n    return random_list", "category": "Python"}, {"instruction": "Improve the following implementation of a binary search algorithm.", "input": "def binary_search(array, target):\n  low = 0\n  high = len(array)-1\n  while low <= high:\n    mid = (low+high)//2\n    if array[mid] == target:\n      return mid\n    elif array[mid] < target:\n      low = mid+1\n    else:\n      high = mid-1", "output": "def binary_search(array, target):\n  low = 0\n  high = len(array)-1\n  while low <= high:\n    mid = (low+high)//2\n    if array[mid] == target:\n      return mid\n    elif array[mid] < target:\n      low = mid+1\n    else:\n      high = mid-1\n  return -1 # target not found", "category": "Python"}, {"instruction": "Write code to solve this DP(Dynamic Programming) problem from LeetCode.", "input": "You are given coins of different denominations and a total amount of money. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.", "output": "def coinChange(coins, amount):\n    dp = [float(\"inf\")] * (amount + 1)\n    dp[0] = 0\n\n    for coin in coins:\n        for x in range(coin, amount + 1):\n            dp[x] = min(dp[x], dp[x - coin] + 1)\n    if dp[amount] == float(\"inf\"):\n        return -1\n    return dp[amount]", "category": "Python"}, {"instruction": "Find a Python solution for this leetcode problem.", "input": "Given an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.", "output": "def twoSum(nums, target):\n    numDict = dict()\n    for index, num in enumerate(nums):\n        if num in numDict.keys():\n            return [numDict[num], index]\n        else:\n            numDict[target-num] = index", "category": "Python"}, {"instruction": "Given a list of words, write a function to check if the list contains any palindrome words.", "input": "words = [\"racecar\", \"level\", \"tot\", \"trot\"]", "output": "def contains_palindrome(words):\n    for word in words:\n        if word == word[::-1]:\n            return True\n    return False", "category": "Python"}, {"instruction": "Create four classes for a digital banking application.", "input": "", "output": "Class 1: BankAccount - Responsible for creating, deleting, and managing bank accounts\nClass 2: Transaction - Responsible for storing and tracking transaction histories\nClass 3: User - Responsible for managing user access information \nClass 4: Customer - Responsible for storing customer data and providing customer service", "category": "Python"}, {"instruction": "Use TensorFlow to build a deep learning model for predicting the price of a given stock.", "input": "", "output": "import tensorflow as tf\n\n# define the model\nmodel = tf.keras.Sequential([\n tf.keras.layers.Input(shape=(1,), name=\"Input_Layer\", dtype=tf.float32),\n tf.keras.layers.Dense(32, activation='relu', name=\"Hidden_Layer_1\"),\n tf.keras.layers.Dense(32, activation='relu', name=\"Hidden_Layer_2\"),\n tf.keras.layers.Dense(1, activation='sigmoid', name=\"Output_Layer\")\n])\n\n# compile the model\nmodel.compile(\noptimizer=tf.keras.optimizers.Adam(),\nloss=tf.keras.losses.MeanSquaredError(),\nmetrics=[tf.keras.metrics.MeanAbsoluteError()],\n)\n\n# fit the model\nmodel.fit(x_train, y_train, batch_size=32, epochs=10, validation_data=(x_val, y_val))", "category": "Python"}, {"instruction": "Create a Flask endpoint for displaying a list of items from a database.", "input": "Table name: 'items'\nColumns: id, name, price", "output": "@app.route('/items', methods = ['GET'])\ndef display_items():\n # write your code here\n items = []\n # query the database\n items = db.session.query(Items).all()\n # return the list of items\n return jsonify(items)", "category": "Python"}, {"instruction": "Implement a game of Hangman in Python.", "input": "", "output": "import random\n\n# list of words\nword_list = [\"python\", \"java\", \"computer\", \"programming\", \"hangman\"]\n\n# randomly select a word\nword = random.choice(word_list)\n\n# set initial lives\nlives = 6\n\n# write your code here\ndef hangman(word, lives):\n  return # write your code here", "category": "Python"}, {"instruction": "Create a program to find the nth element of the Fibonacci sequence.", "input": "", "output": "def nth_element(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1 \n    else:\n        return nth_element(n-1) + nth_element(n-2)", "category": "Python"}, {"instruction": "Find the number of combinations of a given length from the characters in a given string.", "input": "string: \"ABCD\"\nlength: 2", "output": "def count_combinations(string, length):\n    result = 1\n    for i in range(length):\n        result *= len(string)\n    return result", "category": "Python"}, {"instruction": "Find the first non-repeating character in a string.", "input": "string: \"abcdabcd\"", "output": "def find_first_non_repeating(string):\n    seen = {}\n    for char in string:\n        if char in seen:\n            seen[char] +=1 \n        else:\n            seen[char] = 1\n    return [char for char in string if seen[char] == 1][0]", "category": "Python"}, {"instruction": "Calculate the Fibonacci sequence up to the n-th number where n is provided as an argument.", "input": "", "output": "def fibonacci(n):\n    if n == 0:\n        return 0 \n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)", "category": "Python"}, {"instruction": "Create a program in Python for converting Fahrenheit to Celsius.", "input": "", "output": "def fahrenheit_to_celsius(temp): \n    return (temp - 32) * 5/9;  \n  \n# Driver code \ntemperature = float(input(\"The temperature in Fahrenheit: \")) \nprint(\"Temperature in Celsius: {}\".format( fahrenheit_to_celsius(temperature)))", "category": "Python"}, {"instruction": "Given two numbers N and M, write a program to find the number of numbers from 1 to N where the last digit is less than or equal to M.", "input": "N = 30, M = 7", "output": "def findNumbers(N, M): \n    count = 0\n    for i in range(1, N+1): \n        if i % 10 <= M: \n            count += 1\n    return count", "category": "Python"}, {"instruction": "Create an array of all the odd numbers between 0 and n (inclusive).", "input": "", "output": "def odd_numbers_array(n):\n    array = []\n    for i in range(0,n+1):\n        if i%2 != 0:\n            array.append(i)\n    return array", "category": "Python"}, {"instruction": "Create a function to search a given string for the first vowel.", "input": "", "output": "def first_vowel(string): \n    index = 0\n    for char in string:\n        if char in [\"a\", \"e\", \"i\", \"o\", \"u\"]: \n            return index\n        else: \n            index+= 1 \n    return -1", "category": "Python"}, {"instruction": "Sort the following array of numbers in-place using the bubble sort algorithm: [5, 3, 2, 8, 1].", "input": "", "output": "for i in range(len(arr)):\n    for j in range(len(arr)-i-1): \n        if arr[j] > arr[j+1] :\n            arr[j], arr[j+1] = arr[j+1], arr[j]\n            \nResulting array = [1, 2, 3, 5, 8]", "category": "Python"}, {"instruction": "Generate a random phone number using random numbers in Python.", "input": "", "output": "import random\n\ndef generatePhoneNumber():\n  nums = [str(random.randint(0, 9) for _ in range(10))]\n  return '-'.join([''.join(nums[:3]), ''.join(nums[3:6]), ''.join(nums[6:])])\n\nprint(generatePhoneNumber() // \"567-444-0116\"", "category": "Python"}, {"instruction": "Given a string s and an integer k, find the kth largest character of s.", "input": "s = \"hello\"\nk = 3", "output": "def kthLargestCharacter(s, k):\n  char_dict = {}\n  for c in s:\n    if c not in char_dict:\n      char_dict[c] = 1\n    else:\n      char_dict[c] += 1\n\n  char_list = sorted(char_dict.items(), key=lambda x : x[1], reverse = True)\n  \n  return char_list[k - 1][0]\n\nprint(kthLargestCharacter(s, k)) // l", "category": "Python"}, {"instruction": "Given two unsorted arrays, merge them in a sorted form without using any extra space.", "input": "nums1 = [5, 8, 2]\nnums2 = [7, 1]", "output": "def mergeArrays2(nums1, nums2):\n  i = j = 0\n  while i < len(nums1) and j < len(nums2):\n    if nums1[i] > nums2[j]:\n      nums1[i], nums2[j] = nums2[j], nums1[i]\n      j += 1\n    else:\n      i += 1\n  \n  nums1.sort()\n  nums2.sort()\n\nprint(nums1) // [1, 2, 5]\nprint(nums2) // [7, 8]", "category": "Python"}, {"instruction": "Write a function to determine if a given string is a valid English word or not.", "input": "s = \"construct\"", "output": "def isValidWord(s):\n  words = open(\"words_alpha.txt\").readlines()\n  return s in words\n\nprint(isValidWord(s)) // true", "category": "Python"}, {"instruction": "Given two sorted arrays nums1 and nums2, combine their elements into a single array that is sorted.", "input": "nums1 = [1, 2, 3]\nnums2 = [2, 4, 5]", "output": "def mergeArrays(nums1, nums2):\n  result = []\n  i = j = 0\n  while i < len(nums1) and j < len(nums2):\n    if nums1[i] < nums2[j]:\n      result.append(nums1[i])\n      i += 1\n    else:\n      result.append(nums2[j])\n      j += 1\n  result += nums1[i:] + nums2[j:]\n \u00a7\u00a7 1080\n  return result\n\nprint(mergeArrays(nums1, nums2)) // [1, 2, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Given a set of strings s, find an algorithm to determine if the set is a palindrome.", "input": "s = {\"b\", \"c\", \"a\", \"a\", \"c\", \"b\"}", "output": "def isSetPalindrome(s):\n  n = len(s)\n  for i in range(int(n/2)):\n    if s[i] != s[n - i - 1]:\n      return False\n  return True\n \u00a7\u00a7 1060\n\nprint(isSetPalindrome(s)) // True", "category": "Python"}, {"instruction": "Write a function in Python which takes the information from the following dictionary and prints out the total price of all the items in it.\n \u00a7\u00a7 1020", "input": "my_dict = {\n  'item1': {'price': 20, 'quantity': 5},\n  'item2': {'price': 10, 'quantity': 3},\n}", "output": "def get_total(my_dict):\n  total = 0\n  for item in my_dict.values():\n    total += item['price'] * item['quantity']\n  return total\n\nprint(get_total(my_dict)) // 90", "category": "Python"}, {"instruction": "How can you use a for loop to traverse a dictionary?", "input": "", "output": "You can use a for loop to traverse a dictionary by iterating over the dictionary's keys or key-value pairs.\n\nFor example, you can loop through all the keys of a dictionary like this:\n\ndictionary = { 'a':1, 'b':2, 'c':3 } \nfor key in dictionary: \n    print(key) \n\nOr you can loop through all the key-value pairs like this:\n\ndictionary = { 'a':1, 'b':2, 'c':3 } \nfor key, value in dictionary.items(): \n    print(key, ':', value)", "category": "Python"}, {"instruction": "Construct a Python loop to display the elements in the following list.", "input": "my_list = [1, 2, 3, 4]", "output": "for element in my_list: \n    print(element)", "category": "Python"}, {"instruction": "Given a sequence of numbers, write a program to find the length of the longest subsequence in which all numbers are in increasing order.", "input": "arr = [1, 7, 4, 3, 2, 8]", "output": "def findLongestSubsequence(arr): \n    n = len(arr)\n    dp = [1]*n \n    for i in range(1, n): \n        for j in range(i): \n            if arr[i] > arr[j] and dp[i] < dp[j] + 1 : \n                dp[i] = dp[j]+1\n    return max(dp)", "category": "Python"}, {"instruction": "How can you check the memory used by a Python object?", "input": "", "output": "You can use the sys module\u2019s \"getsizeof()\" function to check the memory used by an object. The getsizeof() method returns the memory size of the specified object in bytes. For example, sys.getsizeof(data) will return the size of the data object in bytes.", "category": "Python"}, {"instruction": "Edit an existing Python script to read a 3D array of size 3 x 3 x 3", "input": "", "output": "arr = [[[0 for x in range(3)] for y in range(3)] for z in range(3)]\nfor x in range(3):\n    for y in range(3):\n        for z in range(3):\n            arr[x][y][z] = int(input())", "category": "Python"}, {"instruction": "Given two strings s1 and s2, write a function to return a new string containing the characters present only in s1.", "input": "s1 = \"abcdef\"\ns2 = \"fghijk\"", "output": "def unique_str(s1, s2):\n    res = \"\"\n    for i in s1:\n        if i not in s2:\n            res += i\n    return res", "category": "Python"}, {"instruction": "Re-write the code in the given input to make it more efficient.", "input": "def fibonacci(n):\n   if n <= 1:\n      return n\n   else:\n      return(fibonacci(n-1) + fibonacci(n-2))", "output": "def fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==0: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==1: \n        return 1\n    else: \n        a = 0\n        b = 1\n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "You need to add a feature to the existing code in the given input.", "input": "class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year", "output": "class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.mileage = 0\n\n    def getMileage(self):\n        return self.mileage", "category": "Python"}, {"instruction": "Reverse a given string using recursive function in Python.", "input": "", "output": "def reverse_string(str):\n    if len(str) == 0: \n        return str \n    else:\n        return reverse_string(str[1:]) + str[0]", "category": "Python"}, {"instruction": "Create a python program to return a new list with each item multiplied by 2 in an existing list.", "input": "[1, 2, 3, 4, 5]", "output": "def mult_by_two(nums):\n    \"\"\"\n    Returns a new list with each item multiplied by 2 in an existing list\n    :param nums: a list of numbers\n    :return: a list of numbers with each item multiplied by 2\n    \"\"\"\n    new_list = []\n    for num in nums:\n        new_list.append(num * 2)\n    return new_list\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5]\n    print(mult_by_two(nums))", "category": "Python"}, {"instruction": "Create a dockerfile to deploy a python app.", "input": "", "output": "FROM python:3.7-alpine\n\nWORKDIR /app\n\n# Copy and install dependencies\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\n# Copy application source\nCOPY src ./src\n\n# Set environment variables\nENV DJANGO_SETTINGS_MODULE=app.settings\n\nEXPOSE 8000\n\n# Run server\nENTRYPOINT [\"python\", \"src/manage.py\"]\nCMD [\"runserver\", \"0.0.0.0:8000\"]", "category": "Python"}, {"instruction": "Suggest a better algorithm for finding a prime number.", "input": "", "output": "def is_prime(n): \n    \"\"\" \n    A better algorithm for determining if a number is prime \n    :param n: The number to determine whether is prime \n    :return: a boolean if the number is prime\n    \"\"\"\n    if (n <= 1): \n        return False\n    if (n <= 3): \n        return True\n    if (n % 2 == 0 or n % 3 == 0): \n        return False\n  \n    i = 5\n    while(i * i <= n): \n        if (n % i == 0 or n % (i + 2) == 0): \n            return False\n        i = i + 6\n  \n    return True", "category": "Python"}, {"instruction": "Write a Kotlin class to represent a book. It should contain the title, author name, year of publication and ISBN.", "input": "", "output": "class Book {\n\n    private var title: String\n    private var authorName: String\n    private var yearOfPublication: Int\n    private var ISBN: String\n\n    constructor(title: String, authorName: String, yearOfPublication: Int, ISBN: String) {\n        this.title = title\n        this.authorName = authorName\n        this.yearOfPublication = yearOfPublication\n        this.ISBN = ISBN\n    }\n\n    fun getTitle(): String {\n        return title\n    }\n\n    fun setTitle(title: String) {\n        this.title = title\n    }\n\n    fun getAuthorName(): String {\n        return authorName\n    }\n\n    fun setAuthorName(authorName: String) {\n        this.authorName = authorName\n    }\n\n    fun getYearOfPublication(): Int {\n        return yearOfPublication\n    }\n\n    fun setYearOfPublication(yearOfPublication: Int) {\n        this.yearOfPublication = yearOfPublication\n    }\n\n    fun getISBN(): String {\n        return ISBN\n    }\n\n    fun setISBN(ISBN: String) {\n        this.ISBN = ISBN\n    }\n    \n}", "category": "Python"}, {"instruction": "Implement a recursive method to find the sum of all numbers from 1 to n. The method should take an integer n as its argument.", "input": "4", "output": "def sumNums(n): \n    if n == 0: \n        return 0\n    else: \n        return n + sumNums(n-1) \n  \n# Driver Code \nn = 4\nprint(sumNums(n))", "category": "Python"}, {"instruction": "What should be written in place of \"___\" to make the following code a valid if-else statement in Python?", "input": "if x >= 0:\n ___", "output": "if x >= 0:\n    print(\"x is positive\")", "category": "Python"}, {"instruction": "Improve the following code by implementing a more efficient algorithm.", "input": "def FunctionA(arr):\n    output = []\n    for elem in arr:\n        if elem > 0 and not elem in output:\n            output.append(elem)\n    return output", "output": "def FunctionA(arr):\n    output = set()\n    for elem in arr:\n        if elem > 0:\n            output.add(elem)\n    return list(output)", "category": "Python"}, {"instruction": "How can you create a string of all random characters of length 10 in Python?", "input": "", "output": "import random\nrandom_string = ''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ') for _ in range(10))", "category": "Python"}, {"instruction": "Write a code to find the longest common prefix among a given set of strings.", "input": "", "output": "\"\"\"\nA code to find the longest common prefix among a given set of strings\n\"\"\"\n\ndef longest_common_prefix(strs): \n  \n    if not strs: \n        return \"\" \n  \n    shortest_str = min(strs,key=len) \n   \n    for i, ch in enumerate(shortest_str): \n        for other in strs: \n            if other[i] != ch: \n                return shortest_str[:i]  \n    return shortest_str \n  \nif __name__ == '__main__': \n    strs = [\"flower\",\"flow\",\"flight\"] \n    print(\"The longest common prefix is: %s\" % longest_common_prefix(strs))", "category": "Python"}, {"instruction": "What libraries are commonly used in data science?", "input": "", "output": "\"\"\"\nSome of the most commonly used libraries in data science are NumPy, pandas, Matplotlib, Scikit-Learn, TensorFlow, Theano, Seaborn, Keras, NLTK, Apache Spark, and Bokeh. These libraries are used for a variety of tasks such as data manipulation, machine learning, visualization, natural language processing, and big data analysis.\n\"\"\"", "category": "Python"}, {"instruction": "What is the difference between Python 2 and Python 3?", "input": "", "output": "\"\"\"\nThe main difference between Python 2 and Python 3 is in how strings are treated. In Python 2, strings are written in byte strings or fully Unicode strings; in Python 3, strings are written in Unicode by default. Other differences include the import statement, integer division, integer in range function, function print, raising and catching exceptions, binary revisers, and many more.\n\"\"\"", "category": "Python"}, {"instruction": "Write a code that takes the input of two strings, and returns the longest common substring in them.", "input": "", "output": "\"\"\"\nA code that takes the input of two strings, and returns the longest common substring in them\n\"\"\"\n\ndef longest_common_substring(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\nif __name__ == '__main__': \n    s1 = \"Hello World\"\n    s2 = \"Hey World\"\n    print(\"The longest common substring is: %s\" % longest_common_substring(s1, s2))", "category": "Python"}, {"instruction": "Create a Python code for a basic for loop.", "input": "", "output": "\"\"\"\nA Python code for a basic for loop\n\"\"\"\n\nfor i in range(10):\n    print(i)", "category": "Python"}, {"instruction": "Write a code to perform a depth-first search on a binary search tree.", "input": "", "output": "\"\"\"\nA code to perform a depth-first search on a binary search tree\n\"\"\"\n\n# Node class \nclass Node: \n  \n    # Constructor to create a new node \n    def __init__(self, key): \n        self.key = key  \n        self.left = None\n        self.right = None\n  \n# A function to do inorder tree traversal \ndef depth_first_search(root): \n  \n    if root is not None: \n        print(root.key, end=\" \") \n        depth_first_search(root.left) \n        depth_first_search(root.right) \n  \nif __name__ == '__main__': \n    root = Node(1) \n    root.left      = Node(2) \n    root.right     = Node(3) \n    root.left.left  = Node(4) \n    root.left.right  = Node(5) \n  \n    print(\"Depth First Search:\")\n    depth_first_search(root)", "category": "Python"}, {"instruction": "What is pandas and why would someone use it?", "input": "", "output": "\"\"\"\nPandas is a Python library used for data analysis and manipulation. It is used for data wrangling, data preparation, and data exploration. Pandas allows for easy manipulation and analysis of data, as well as performing high-level operations on it. It also supports several data formats including CSV, JSON, SQlite, HDF5, and many more. Pandas is a powerful tool for data analysis as it is flexible, functional, and easy to use. It offers a wide range of tools for data analysis, including data filtering and data aggregation. With Pandas, it is possible to quickly convert, clean, and manipulate data into an easily understandable format, enabling the user to easily explore and identify trends and patterns.", "category": "Python"}, {"instruction": "Create a class in Python for a student which should include the following fields: first name, last name, age, and grade.", "input": "", "output": "class Student:\n    def __init__(self, first_name, last_name, age, grade):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n        self.grade = grade", "category": "Python"}, {"instruction": "Write a function to print out the triangle pattern as shown in the example.", "input": "height = 3", "output": "def triangle_pattern(height):\n    star = \"*\"\n    for i in range(height):\n        print(star*(i+1))", "category": "Python"}, {"instruction": "Using the data provided, create a function to calculate the mean value of the elements inside the dictionary.", "input": "data = {\"John\": 8.5, \"Jane\": 9, \"Bob\": 5}", "output": "def mean_value(data):\n    sum = 0\n    count = 0\n    for value in data.values():\n        sum += value\n        count += 1\n    \n    return round(sum/count, 2)", "category": "Python"}, {"instruction": "Write a function to take a list of strings and return only the words made up of the same letter.", "input": "word_list = [\"aaa\", \"cab\", \"bba\"]", "output": "def same_letter_words(word_list):\n    same_letter_words = [word for word in word_list if len(set(word)) == 1]\n    return same_letter_words", "category": "Python"}, {"instruction": "Generate python code to replace each character in a string with the next character in the alphabet.", "input": "", "output": "def replace_with_next_char(string):\n    output = \"\"\n    for char in string:\n        output += chr(ord(char) + 1)\n    return output", "category": "Python"}, {"instruction": "Implement a function in Python that calculates the Levenshtein Distance of two strings.", "input": "str1 = \"hackathon\"\nstr2 = \"hack\"", "output": "def calculate_levenshtein_distance(str1, str2):    \n    distances = np.zeros((len(str1)+1, len(str2)+1))\n    for i in range(0, len(str1)+1):\n        distances[i, 0] = i\n    for j in range(0, len(str2)+1):\n        distances[0, j] = j\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                distances[i, j] = distances[i-1, j-1]\n            else:\n                distances[i, j] = min(distances[i-1, j], distances[i, j-1], distances[i-1, j-1]) + 1\n    return distances[len(str1), len(str2)]", "category": "Python"}, {"instruction": "Write a code to sum all the values of the following dictionary.", "input": "d = {'a':2, 'b':3, 'c':4}", "output": "d = {'a':2, 'b':3, 'c':4}\n\ndef dictSum(d):\n    total = 0\n    for key in d:\n        total += d[key]\n    return total\n\nif __name__ == \"__main__\":\n    print(dictSum(d))", "category": "Python"}, {"instruction": "Construct a code segment to find all unique characters in a given string.", "input": "String: Geeksforgeeks", "output": "def find_unique(string): \n    uniq_char = [] \n    for i in string: \n        if i not in uniq_char: \n            uniq_char.append(i) \n    return uniq_char \n\nprint(find_unique(\"Geeksforgeeks\"))", "category": "Python"}, {"instruction": "What is the minimum requirements to become an AI Engineer?", "input": "", "output": "To be an AI engineer, at a minimum, a person must have a bachelor\u2019s degree in computer science, mathematics, or a related field. It is also beneficial for a person to have an understanding of artificial intelligence and machine learning principles, and to be familiar with programming languages, such as Python and C++. In addition, a working knowledge of data structures and algorithms, and experience with debugging and software development are important. Experience and/or certification in data engineering frameworks, such as TensorFlow or PyTorch, are also recommended.", "category": "Python"}, {"instruction": "Split a string into its individual words and store it in a list.", "input": "string = \"Hello world, this is a test string.\"", "output": "def split_to_words(string):\n    \"\"\"\n    Split a string into its individual words and store it in a list.\n    \"\"\"\n    return string.split()", "category": "Python"}, {"instruction": "Print all the prime numbers in the range of 2 to n.", "input": "n = 10", "output": "def print_all_primes(n):\n    \"\"\"\n    Print all the prime numbers in the range of 2 to n.\n    \"\"\"\n    for num in range(2, n+1):\n        if all(num % i != 0 for i in range(2, num)):\n            print(num)", "category": "Python"}, {"instruction": "Using the provided input, calculate the SHA256 checksum in Python.", "input": "string = \"Hello World!\"", "output": "import hashlib\n \ndef sha256_calc(string):\n    \"\"\"\n    Calculate SHA256 checksum in Python.\n    \"\"\"\n    sha_signature = hashlib.sha256(string.encode()).hexdigest()\n    return sha_signature", "category": "Python"}, {"instruction": "Given an array of integers, write a function to check if the sum of any two of them equals the given parameter \u2018n\u2019.", "input": "array = [2, 4, 6, 8]\nn = 10", "output": "def check_sum(array, n):\n    \"\"\"\n    Given an array of integers, returns True if the sum of any two of them equals the given parameter 'n'. \n    \"\"\"\n    for i in range(len(array)):\n        for j in range(i + 1, len(array)):\n            if array[i] + array[j] == n:\n                return True\n    return False", "category": "Python"}, {"instruction": "Create a class called Cat to represent a type of pet.", "input": "", "output": "class Cat:\n    def __init__(self, name, color, age):\n        self.name = name\n        self.color = color\n        self.age = age \n    \n    def eat(self):\n        print(f\"{self.name} is eating\")\n\n    def sleep(self):\n        print(f\"{self.name} is sleeping\")\n    \n    def play(self):\n        print(f\"{self.name} is playing\")\n\n    def __repr__(self):\n        return f\"<Cat {self.name}, {self.color}, {self.age}>\"", "category": "Python"}, {"instruction": "Given a text string, generate a Python code snippet to find the number of occurrences of a given word", "input": "The quick brown fox jumped over the lazy dog", "output": "def num_occurrences(text, word):\n    count = 0\n    words = text.split()\n    for w in words:\n        if w == word:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Create a simple program to capitalize the first letter of every sentence", "input": "", "output": "def capitalize_sentences(text): \n   sent_list = text.split(\".\")\n   cap_sent_list = [sentence.capitalize() for sentence in sent_list]\n   output = '.'.join(cap_sent_list)\n   return output", "category": "Python"}, {"instruction": "Create a code to calculate the most frequent character in a given string", "input": "s = \"Hello world!\"", "output": "def most_frequent_char(s):\n    counts = {}\n    max_char = \"\"\n    max_count = 0\n    for c in s:\n        if c in counts:\n            counts[c] += 1\n        else:\n            counts[c] = 1\n        if counts[c] > max_count:\n            max_char = c\n            max_count = counts[c]\n    return max_char\n  \n# example\ns = \"Hello world!\"\nprint(most_frequent_char(s))", "category": "Python"}, {"instruction": "Generate a code to find the power of n to m.", "input": "n = 3, m = 7", "output": "def pow_n_m(n, m):\n    result = 1\n    for i in range(1, m+1):\n        result *= n\n    return result\n  \n# example  \nn = 3 \nm = 7\nprint(pow_n_m(n, m))", "category": "Python"}, {"instruction": "In Python, define a class for a rectangle object.", "input": "", "output": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    \n    def __str__(self):\n        return f\"This is a rectangle with width of {self.width} and height of {self.height}.\"", "category": "Python"}, {"instruction": "Implement selection sort to sort a list in non-decreasing order", "input": "list = [9, 5, 3, 1, 8]", "output": "def selection_sort(list): \n    for i in range(len(list)): \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n        list[i], list[min_idx] = list[min_idx], list[i]\n    return list\n  \n# example  \nlist = [9, 5, 3, 1, 8]\nprint(selection_sort(list))", "category": "Python"}, {"instruction": "Suggest an appropriate algorithm to filter out unwanted words from a given paragraph of text.", "input": "", "output": "A possible approach to filter out unwanted words from a given paragraph of text is to use a hash table or dictionary. By creating a dictionary using key-value pairs of words and their frequencies, it becomes possible to compare the words found in a given text against the words in the dictionary to determine their relevance. If a word is not found in the dictionary, it can be assumed to be an unwanted word and can thus be discarded.", "category": "Python"}, {"instruction": "Create a function that takes in two integer values and prints out the larger one.", "input": "", "output": "def print_greater_value(num1, num2):\n    if num1 > num2:\n        print(num1)\n    else:\n        print(num2)", "category": "Python"}, {"instruction": "From the given list, create a dictionary where keys will be the elements and the values will be their corresponding indices.", "input": "elements = [\"one\", \"two\", \"three\", \"four\"]", "output": "def list_to_dict(elements):\n    return {el: i for i, el in enumerate(elements)}", "category": "Python"}, {"instruction": "Generate an array containing the next n numbers in the Fibonacci sequence.", "input": "", "output": "def generate_fibonacci_sequence(n):\n    sequence = [0, 1] \n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence", "category": "Python"}, {"instruction": "Write a function to create a random sequence of 0s and 1s.", "input": "", "output": "import random\n\ndef generate_random_sequence(length):\n    sequence = []\n    for i in range(length):\n        sequence.append(random.choice([0, 1]))\n    return sequence", "category": "Python"}, {"instruction": "Write a function to transform a dataset into a matrix, where rows represent data points followed by their labels.", "input": "dataset=[(2, 3, 1), (5, 4, -1), (1, 8, 1)]", "output": "def dataset_to_matrix(dataset):\n    matrix = [[x, y, z] for x, y, z in dataset]\n    return matrix", "category": "Python"}, {"instruction": "In the following code, modify the function to take the type of an argument as an input and perform the necessary conversion before returning the result.", "input": "def get_string(input): \n    return str(input)", "output": "def get_string(input, type): \n    if type == 'int':\n        return str(int(input))\n    elif type == 'float':\n        return str(float(input))\n    elif type == 'str':\n        return str(input)", "category": "Python"}, {"instruction": "Write a Python program to print the right angled triangle using asterisk.", "input": "", "output": "for i in range(0, 6): \n\tfor j in range(0, i + 1): \n\t\tprint(\"* \", end=\"\")\n\tprint(\"\\r\")", "category": "Python"}, {"instruction": "Create a function in Python that takes three numerical inputs and returns the maximum value.", "input": "", "output": "def max_value(num1, num2, num3):\n    max_num = max(num1, num2, num3)\n    return max_num", "category": "Python"}, {"instruction": "How do you retrieve the 3rd element of a set in Python?", "input": "", "output": "In Python, you can retrieve the 3rd element of a set by using the index operator []. The 3rd element of a set can be accessed by using the syntax set[2]. Note that the indexing in Python starts from 0, so the 3rd element will have index 2.", "category": "Python"}, {"instruction": "Create a function to sort items in a list alphabetically in Python.", "input": "", "output": "def alphabetical_sort(lst):\n    sorted_list = sorted(lst, key=lambda x: x.lower())\n    return sorted_list", "category": "Python"}, {"instruction": "How do you use the built-in function filter() in  Python?", "input": "", "output": "The filter() function in Python takes a function and an iterable as input arguments. The filter() function filters out elements from the given iterable (for example, a list) that don't satisfy the given condition determined by the function. It returns an iterator containing the filtered elements. Syntax: filter(function, iterable) Example: my_list = [1,4,5,6,7] filtered_list = filter(lambda x: x % 2 == 0, my_list) print(list(filtered_list)) Output: [4, 6]", "category": "Python"}, {"instruction": "Create a Python script to add a new field of \u201ccar color\u201d to the given JSON object.", "input": "{\n\"id\": \"12345\",\n\"model\": \"Honda\",\n\"year\": 2021\n}", "output": "import json\n\ndata = [\n    {\n        \"id\": \"12345\",\n        \"model\": \"Honda\",\n        \"year\": 2021\n    }\n]\n\ndata[0][\"color\"] = \"red\"\n\njson_object = json.dumps(data, indent = 4)\nprint(json_object)\n\nOutput: \n[\n    {\n        \"id\": \"12345\",\n        \"model\": \"Honda\",\n        \"year\": 2021,\n        \"color\": \"red\"\n    }\n]", "category": "Python"}, {"instruction": "Go through the following list of car models, and print out only the names of all-electric vehicles.", "input": "Tesla Model 3\nTesla Model X\nToyota Corolla\nKia Soul EV\nFord Fusion", "output": "cars = [\"Tesla Model 3\", \"Tesla Model X\", \"Toyota Corolla\", \"Kia Soul EV\", \"Ford Fusion\"]\n\nfor car in cars:\n    if \"EV\" in car:\n        print(car)\n\nOutput:\nTesla Model X\nKia Soul EV", "category": "Python"}, {"instruction": "Construct a code that takes a list of words as input and changes the case of each item in the list.", "input": "[cat, dog, apple]", "output": "def toUpperCase(words):\n    upper_words=[]\n    for word in words:\n      upper_words.append(word.upper())\n    return upper_words\n\nif __name__ == \"__main__\":\n    print(toUpperCase(['cat','dog','apple']))", "category": "Python"}, {"instruction": "Create a function that takes a given sentence as input and outputs a list of all its words.", "input": "Sentence: I am learning to code", "output": "def stringsplit(sentence):\n    words=sentence.split(' ')\n    return words\n\nif __name__ == \"__main__\":\n    print(stringsplit('I am learning to code'))", "category": "Python"}, {"instruction": "Write a class that has a method to return the smallest element in a given list of integers.", "input": "[12, 24, 72, 1, 4]", "output": "class MinValue:\n    def getMin(self, numList):\n        minVal = numList[0]\n        for i in numList:\n            if i < minVal:\n                minVal = i\n        return minVal\n\nif __name__ == \"__main__\":\n    obj = MinValue()\n    numList = [12, 24, 72, 1, 4]\n    print(obj.getMin(numList))", "category": "Python"}, {"instruction": "Run the following code in Python 3.", "input": "num1 = 10\nnum2 = 20", "output": "num1 = 10\nnum2 = 20\n\nresult = num1 + num2\n\nprint(result)\n\n# Output\n30", "category": "Python"}, {"instruction": "Given a binary tree, write a code to search a given value in the tree.", "input": "", "output": "def search_tree(tree, value):\n    # If the tree is empty\n    if not tree:\n        return False\n \n    if value == tree.val:\n        return True\n \n    # If the given value is less than the tree's value\n    # search left subtree\n    elif value < tree.val:\n        return search_tree(tree.left, value)\n \n    # If the given value is more than tree's value\n    # search right subtree\n    else:\n        return search_tree(tree.right, value)", "category": "Python"}, {"instruction": "Generate a random string of length 10 consisting of letters and numbers.", "input": "", "output": "import random\nimport string\n\ndef generate_random_string():\n    rand_string = ''.join(random.choices(string.ascii_lowercase +\n                                        string.digits,\n                                        k=10))\n    return rand_string\n\n# testing\nrandom_string = generate_random_string()\nprint(random_string)", "category": "Python"}, {"instruction": "Given a string and a character, write a program that counts the number of occurrences of the character in the string.", "input": "string = 'Hello World!' \ncharacter = 'l'", "output": "def count_occurrences(string, character): \n  count = 0\n  for i in range(len(string)):\n    if string[i] == character:\n      count += 1\n  return count", "category": "Python"}, {"instruction": "Create a function to generate a list of prime numbers between 2 and n.", "input": "", "output": "def prime_numbers(n):\n    prime_nums = []\n    for num in range(2, n + 1):\n        if num > 1:\n            for i in range(2, num): \n                if (num % i) == 0: \n                    break\n            else:\n                prime_nums.append(num)\n    return prime_nums", "category": "Python"}, {"instruction": "Read a given text and classify each sentence as true or false.", "input": "text = \"The sky is blue, the sea is blue. The grass is green.\"", "output": "text = \"The sky is blue, the sea is blue. The grass is green.\"\n\nsentences = text.split(\".\")\ntrue_sentences = []\nfalse_sentences = []\n\nfor sentence in sentences:\n    if sentence.endswith(\"true\"):\n        true_sentences.append(sentence)\n    else:\n        false_sentences.append(sentence)\n\nprint(\"True sentences:\")\nprint(*true_sentences, sep=\"\\n\")\n\nprint(\"False sentences:\")\nprint(*false_sentences, sep=\"\\n\")", "category": "Python"}, {"instruction": "Split a string into an array of words and return the length of the longest word.", "input": "", "output": "def longest_word(string):\n    words = string.split(\" \")\n    longest_word_length = 0\n    for word in words:\n        if len(word) > longest_word_length:\n            longest_word_length = len(word)\n    return longest_word_length", "category": "Python"}, {"instruction": "Parse a given JSON object and output the contents in a tabular format", "input": "json_object = {\n    'name': 'John',\n    'age': 20,\n    'location': 'New York'\n}", "output": "import json\n\njson_object = {\n    'name': 'John',\n    'age': 20,\n    'location': 'New York'\n}\n\ndata = json.loads(json_object)\n\nfor key, value in data.items():\n    print(key + \": \" + str(value))", "category": "Python"}, {"instruction": "What is the time complexity of linear search in an unsorted array?", "input": "", "output": "The time complexity of linear search in an unsorted array is O(n), where n is the number of elements in the array. This is because in linear search, the algorithm has to inspect each element in the array in order sequentially until it finds the desired element. As the size of the array increases, the time taken to search increases linearly.", "category": "Python"}, {"instruction": "Implement a function that prints all prime numbers up to the provided number.", "input": "", "output": "def print_prime_numbers(n):\n    # iterate through all numbers up to the provided number\n    for num in range(2, n+1):\n        is_prime = True\n        # check if a number is prime\n        for j in range(2, num):\n            if num % j == 0:\n                is_prime = False\n        # if prime print it\n        if is_prime:\n            print(num)\n\nprint_prime_numbers(20) # prints 2, 3, 5, 7, 11, 13, 17, 19", "category": "Python"}, {"instruction": "Debug the following program and make it function correctly", "input": "def count_words(text):\n    words = text.split()\n    count = 0\n    for word in words:\n        count += 1\n    return count\n\nstring = \"Hello world\"\n\nprint(count_words(string))", "output": "def count_words(text):\n    words = text.split()\n    count = 0\n    for word in words:\n        count += 1\n    return count\n\nstring = \"Hello world\"\n\n# we need to add a check for empty string\nif string != '':\n    print(count_words(string))\nelse:\n    print(0)", "category": "Python"}, {"instruction": "Rewrite the following Python function to include a try/except block.", "input": "def multiply(num1, num2):\n\tresult = num1 * num2\n\treturn result", "output": "def multiply(num1, num2):\n\ttry:\n\t\tresult = num1 * num2\n\t\treturn result\n\texcept TypeError:\n\t\tprint(\"Error: Inputs must be numbers\")", "category": "Python"}, {"instruction": "Write a code that prints the even numbers from 10 to 0 in descending order.", "input": "", "output": "for num in range(10,0,-1):\n    if(num % 2 == 0):\n        print(num)", "category": "Python"}, {"instruction": "Create a Python class called \"Car\" which has the \"model\" and \"year\" parameters.", "input": "", "output": "class Car:\n  def __init__(self, model, year):\n    self.model = model\n    self.year = year", "category": "Python"}, {"instruction": "Create a program to compare two strings and print the result.", "input": "str1 = \u201cHello\u201d, str2 = \u201cWorld\u201d", "output": "def compare_strings (str1, str2):\nif str1 == str2:\n    print (\"The strings are equal\")\nelse:\n    print (\"The strings are not equal\")", "category": "Python"}, {"instruction": "You need to write a function that takes an array and returns the count of even elements in the array.", "input": "[1, 2, 3, 4, 5, 6]", "output": "def even_count(arr):\n count = 0\n for i in arr:\n  if i % 2 == 0:\n   count += 1\n return count", "category": "Python"}, {"instruction": "Create a basic python object that stores the length and width of an rectangle.", "input": "", "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width", "category": "Python"}, {"instruction": "How can we store data persistently on the user's machine?", "input": "", "output": "Data can be stored persistently on the user's machine with various web storage APIs such as localStorage and sessionStorage. LocalStorage enables an application to store data on the user's computer with no expiration date, while sessionStorage stores information that can only be accessed while the application is open in the browser.", "category": "Python"}, {"instruction": "Create a Python program to find the average of the given numbers in the list", "input": "", "output": "my_list = [2, 4, 10, 20]\n\ndef average(nums):\n    return sum(nums) / len(nums)\n\nprint(average(my_list))\n\nOutput:\n8.0", "category": "Python"}, {"instruction": "Create a Python script to convert the given JSON object into an XML document.", "input": "{\n \"username\": \"John123\", \n \"age\": 23,\n \"country\": \"USA\"\n}", "output": "import xmltodict\nimport json\n\njson_object = {\n \"username\": \"John123\", \n \"age\": 23,\n \"country\": \"USA\"\n}\n\nxml_message = xmltodict.unparse(json.loads(json.dumps(json_object)), pretty=True)\n\nprint(xml_message)\n\nOutput:\n<root>\n  <username>John123</username>\n  <age>23</age>\n  <country>USA</country>\n</root>", "category": "Python"}, {"instruction": "Create a loop that takes a given number as input and outputs its prime factors.", "input": "Number: 35", "output": "n = 35\nfor i in range(2, 35):\n    while n % i == 0:\n        print(i)\n        n = n / i", "category": "Python"}, {"instruction": "Create a function in Python that takes two parameters and returns the sum of squares of all numbers between them", "input": "", "output": "def sum_of_square_range(a, b):\n    sum = 0\n    for i in range(a, b+1):\n        sum += i * i\n    return sum", "category": "Python"}, {"instruction": "Given a list of numbers, design a function in Python to check if all numbers in the list are even", "input": "", "output": "def all_even(lst):\n    for num in lst:\n        if num % 2 != 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Create a dictionary in Python whose keys are strings and values are integers", "input": "", "output": "my_dict = {\n  \"one\": 1,\n  \"two\": 2,\n  \"three\": 3\n}", "category": "Python"}, {"instruction": "Explain the concept of Binary Indexed Tree.", "input": "", "output": "Binary Indexed Tree (BIT) is a data structure that leverages the advantages of both an array and a binary tree. It is also known as a Fenwick tree. It can be used to efficiently compute the sum of given range of elements in an array. BIT is a type of tree data structure in which the values stored at each node represent the sum of all the elements in the subarrays rooted at the given node. The time complexity of operation in BIT is O(logN), where N is the size of the array.", "category": "Python"}, {"instruction": "Describe the runtime complexity of segment tree.", "input": "", "output": "Segment tree is a data structure used to efficiently query certain operations regarding a range of values. A segment tree is a binary tree, with each of its internal nodes containing a range and its leaf nodes reresenting the elements in the given range. The runtime complexity of a segment tree is O(logN), where N is the number of elements in the range. This makes it an efficient data structure for range queries. Additionally, the tree can be updated in logarithmic time.", "category": "Python"}, {"instruction": "Create a program to list all the prime numbers between two numbers", "input": "", "output": "def list_primes(start, end):\n    prime_list = [2]\n    for num in range(start, end + 1):\n        if all(num % i != 0 for i in range(2, num)):\n            prime_list.append(num)\n\n    return prime_list", "category": "Python"}, {"instruction": "You are given two strings, find the minimum number of edits required to make them equal.", "input": "", "output": "def edit_distance(str1, str2):\n    edits = 0\n    m = len(str1)\n    n = len(str2)\n    if m < n:\n        for i in range(m, n):\n            edits += 1\n        for i in range(m):\n            if str1[i] != str2[i]:\n                edits += 1\n    else:\n        for i in range(n, m):\n            edits += 1\n        for i in range(n):\n            if str1[i] != str2[i]:\n                edits += 1\n    return edits", "category": "Python"}, {"instruction": "Define a function which takes two strings as arguments and returns a list containing all characters that appear in either string.", "input": "string_1 = 'Apple'\nstring_2 = 'Banana'", "output": "def common_chars(string_1, string_2):\n    char_list = [] \n    for char in string_1:\n        if char in string_2 and char not in char_list:\n            char_list.append(char)\n    for char in string_2:\n        if char in string_1 and char not in char_list:\n            char_list.append(char)\n    return char_list", "category": "Python"}, {"instruction": "What are the benefits of using a hash table?", "input": "", "output": "The main benefits of using a hash table are faster search times, insertion/deletion time, and less space required to store data. Hash tables are most commonly used for storing key-value pairs, and can be used to quickly search for a value corresponding to a given key. They also provide a constant time for lookups, even for large data sets.", "category": "Python"}, {"instruction": "Create a dictionary containing the frequencies for each character in the given string.", "input": "string = \"hello world\"", "output": "def count_characters(string):\n\u00a0\u00a0\u00a0\u00a0freq_chars = {}\n\u00a0\u00a0\u00a0\u00a0for char in string:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if char in freq_chars:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0freq_chars[char] += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0freq_chars[char] = 1\n\u00a0\u00a0\u00a0\u00a0return freq_chars", "category": "Python"}, {"instruction": "Using Python, write a code to generate the Fibonacci series up to the given number.", "input": "num = 10", "output": "def generateFibonacciSeries(num): \n    series = [0, 1] \n    for i in range(2, num): \n        series.append(series[i - 2] + series[i - 1]) \n    return series\n\nprint(generateFibonacciSeries(num)) # prints [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "category": "Python"}, {"instruction": "Construct a program that takes integers x and y and swaps their values.", "input": "x = 5\ny = 10", "output": "# get two integers from the user\nx = int(input(\"Enter value for x: \"))\ny = int(input(\"Enter value for y: \"))\n\n# swap\ntmp = x\nx = y\ny = tmp\n\n# print the swapped values\nprint(\"x =\", x, \"and y =\", y)", "category": "Python"}, {"instruction": "How to find the most common integer in a list?", "input": "", "output": "The most common integer in a list can be found using the collections.Counter module. The Counter class creates a dictionary with the elements in the list as keys and the number of occurrences as values. The most_common() method can then be used to find the element with the highest number of occurrences.", "category": "Python"}, {"instruction": "Design a data structure to track the frequency of words in a given text.", "input": "", "output": "A HashMap can be used to track the frequency of words in a given text. The keys of the map would represent the words in the text and the associated values would represent the frequency of that word. The time complexity for retrieving the frequency of a given word in hashmap will be O(1).", "category": "Python"}, {"instruction": "Write a function that takes a string and returns the letter which appears most frequently.", "input": "s = \"apple\"", "output": "def most_frequent_letter(s):\n    # get the letter frequency\n    letter_frequency = {}\n    for ch in s:\n        if ch in letter_frequency:\n            letter_frequency[ch] += 1\n        else:\n            letter_frequency[ch] = 1\n\n    # find the letter with the max frequency\n    max_frequency = 0\n    max_frequency_letter = ''\n    for letter, frequency in letter_frequency.items():\n        if frequency > max_frequency:\n            max_frequency = frequency\n            max_frequency_letter = letter\n\n    return max_frequency_letter\n\nprint(most_frequent_letter(\"apple\")) # 'p'", "category": "Python"}, {"instruction": "Write a Python script to check for syntactic correctness of an algorithm.", "input": "Algorithm = \"1. Read input\n2. Initialize variables\n3. Process input\n4. Output result\"", "output": "def is_algorithm_syntactically_correct(algorithm):\n    algorithm = algorithm.replace('\\n', ' ').replace('\\t ', ' ').lower()\n    \n    required_words = ['read', 'input', 'initialize', 'variables', 'process', 'output', 'result']\n    for word in required_words:\n        if word not in algorithm:\n            return False\n    return True", "category": "Python"}, {"instruction": "Reverse the following string without using in-built functions in Python.", "input": "Hello World", "output": "dlroW olleH", "category": "Python"}, {"instruction": "Convert the following range to list elements in Python.", "input": "range(2, 8)", "output": "list(range(2, 8)) # [2, 3, 4, 5, 6, 7]", "category": "Python"}, {"instruction": "Create a code to check whether two words are nearly identical.", "input": "Word A: bte\nWord B: tree", "output": "def is_nearly_identical(str1, str2): \n    edit_dist = 0\n    m = len(str1)\n    n = len(str2)\n\n    # Create matrix to store results of  subproblems \n    dp = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n    for i in range(m + 1): \n        for j in range(n + 1):  \n            if i == 0: \n                dp[i][j] = j   \n            elif j == 0: \n                dp[i][j] = i    \n            elif str1[i - 1] == str2[j - 1]: \n                dp[i][j] = dp[i - 1][j - 1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j - 1],      # Insert \n                                   dp[i - 1][j],      # Remove \n                                   dp[i - 1][j - 1])  # Replace \n\n    edit_dist = dp[m][n]\n\n    if edit_dist == 1: \n        return True\n    else:\n        return False\n\n# Driver code\nif is_nearly_identical(\"bte\",\"tree\"): \n    print(\"Words are nearly identical\") \nelse: \n    print(\"Words are not nearly identical\")", "category": "Python"}, {"instruction": "Write a code to find the sum of the multiples of 3 and 5 up to a given number.", "input": "Number: 15", "output": "def sum_of_multiples(num): \n    sum = 0 \n    for i in range(num):\n            if i % 3 == 0: \n                sum += i\n            elif i % 5 == 0: \n                sum += i\n    return sum\n\n# Driver code \nsum = sum_of_multiples(15)\nprint(\"Sum of multiples of 3 and 5 =\",sum)", "category": "Python"}, {"instruction": "Write a code snippet to find the most frequent word in a given sentence.", "input": "Sentence: The quick brown fox ate the lazy dog", "output": "def most_frequent_word(str): \n    split_str = str.split() \n\n    frequencies = {} \n    for word in split_str: \n        if word in frequencies: \n            frequencies[word] += 1\n        else: \n            frequencies[word] = 1\n  \n    most_frequent_word = \"\" \n    highest_freq = 0\n    for key, value in frequencies.items(): \n        if value > highest_freq: \n            highest_freq = value \n            most_frequent_word = key \n  \n    return most_frequent_word \n\n# Driver code   \nprint(most_frequent_word('The quick brown fox ate the lazy dog'))", "category": "Python"}, {"instruction": "Implement a function to check for balanced parentheses in a given string.", "input": "String: (((())()))", "output": "def is_balanced(s): \n    stack = [] \n    for letter in s: \n        if letter in [\"(\", \"[\", \"{\"]: \n            stack.append(letter) \n        else: \n            if len(stack) == 0: \n                return False\n            top = stack.pop(-1) \n            if top == '(': \n                if letter == ')':             \n                    continue\n                else: \n                    return False\n            elif top == '[': \n                if letter == ']': \n                    continue\n                else: \n                    return False\n            elif top == '{': \n                if letter == '}': \n                    continue\n                else: \n                    return False\n    if len(stack) == 0: \n        return True \n    return False \n\n# Driver code\nprint(is_balanced('(((())()))')) # True\nprint(is_balanced('(((()))')) # False", "category": "Python"}, {"instruction": "Create a simple chatbot using Python.", "input": "", "output": "print(\"Hello, I am your chatbot!\")\n\nwhile True:\n user_input = input(\"What would you like to talk about?\\n\")\n\n if user_input == \"bye\":\n  print(\"Bye! It was nice talking to you.\")\n  break\n\n if user_input == \"weather\":\n  print(\"It is sunny outside!\")\n else:\n  print(\"I am sorry, I don't understand your query.\")", "category": "Python"}, {"instruction": "Given a string s, write a Python function that returns the longest substring of the given string that is a palindrome.", "input": "s = \"abcbabcd\"", "output": "def longest_palindrome_substring(s):\n n = len(s)\n if n == 0:\n return \"\"\n dp = [[False for _ in range(n)] for _ in range(n)]\n start = 0\n max_length = 1\n # All substrings of length 1 are palindrome\n for i in range(n):\n  dp[i][i] = True\n # Check for substring of length 2. \n for i in range(n-1):\n  if s[i] == s[i+1]:\n   dp[i][i+1] = True\n   start = i\n   max_length = 2\n # Check for lengths greater than 2\n # k is length of substring\n for k in range(3, n+1):\n  # Fix the starting index \n  for i in range(n-k+1):\n   # Get the ending index of substring from\n   # starting index i and length k\n   j = i + k - 1\n   # checking for sub-string from ith index to\n   # jth index iff str[i+1] to str[j-1] is a\n   # palindrome\n   if dp[i+1][j-1] and s[i] == s[j]:\n    dp[i][j] = True\n    if k > max_length:\n     start = i\n     max_length = k\n # return the longest palindromic substring\n return s[start:start+max_length]", "category": "Python"}, {"instruction": "Given a string s, reverse its characters and return the resulting string.", "input": "s = \"apple\"", "output": "def reverse_string(s):\n  # initialize an empty string\n  reversed_string = \"\"\n\n  # loop through the string and concatenate the characters in reverse order\n  for i in range(len(s) - 1, -1, -1):\n    reversed_string += s[i]\n  return reversed_string\n  \nprint(reverse_string(\"apple\")) # elppa", "category": "Python"}, {"instruction": "Explain the importance of using functions in programming.", "input": "", "output": "Using functions in programming is important for a few reasons. Functions can be used to divide a program into smaller, more manageable pieces, making it easier to read, debug, and maintain code. Additionally, functions can be reused across multiple programs by creating libraries that can be imported, saving time and effort. The use of functions also promotes code modularity and re-usability, allowing developers to write code once and use or modify it for different applications. Finally, functions can help to improve the overall performance of code by optimizing execution time because process and code only needs to be run once per function call.", "category": "Python"}, {"instruction": "Write a Python function that takes as input an array of numbers and returns the maximum positive number.", "input": "arr = [3, -2, -1, 7, 12]", "output": "def find_max_positive(arr):\n    max_num = 0\n    for num in arr:\n        if num > 0 and num > max_num:\n            max_num = num\n    return max_num", "category": "Python"}, {"instruction": "Explain why software developers should follow coding style guidelines.", "input": "", "output": "Software developers should follow coding style guidelines for a few reasons. First and foremost, adherence to coding style is essential for creating code that is easy to read, understand and maintain. Especially when working on a team, consistency in style allows developers to understand each other\u2019s code more quickly. Coding style can also be used to organize code so that it\u2019s easier to identify certain sections and make changes as needed. Additionally, coding style can give developers more control over potential errors, such as typos, by providing guidelines that can help to reduce the possibility of making such errors.", "category": "Python"}, {"instruction": "Add a new column to a Pandas DataFrame called \"age_group\" that contains categorical values \"young\",\"adult\",\"elderly\".", "input": "name\tage\nJohn\t25\nMark\t45\nIsabelle\t75", "output": "import pandas as pd\n\n# Read in the data\ndf = pd.DataFrame({'name': ['John', 'Mark', 'Isabelle'], \n                   'age': [25, 45, 75]})\n\n# Add a new column \"age_group\"\ndef categorize_age(age):\n    if age < 18:\n        return \"young\"\n    elif 18 <= age < 65:\n        return \"adult\"\n    else:\n        return \"elderly\"\n\ndf['age_group'] = df['age'].apply(categorize_age)", "category": "Python"}, {"instruction": "Write a recursive method to calculate the Fibonacci number of a given index", "input": "", "output": "def fibonacci(n): \n  # base case \n  if n <= 1: \n    return n \n  # recursive case \n  else:\n    return(fibonacci(n-1) + fibonacci(n-2))", "category": "Python"}, {"instruction": "Create a program to find the maximum and minimum from a given list", "input": "my_list = [5, 7, 6, 3]", "output": "def max_min(my_list):\n    max_val = my_list[0]\n    min_val = my_list[0]\n\n    for val in my_list:\n        if val > max_val:\n            max_val = val\n        \n        if val < min_val:\n            min_val = val\n    \n    return (max_val, min_val)", "category": "Python"}, {"instruction": "Design a function which can check if a given year is a leap year", "input": "", "output": "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Edit the code to construct a bubble sort algorithm.", "input": "arr = [5, 2, 1, 7, 8]", "output": "def bubble_sort(arr):\n    n = len(arr)\n\n    # Traverse through all array elements\n    for i in range(n):\n        # Last i elements are already in place\n        for j in range(0, n-i-1):\n            # traverse the array from 0 to n-i-1\n            # Swap if the element found is greater\n            # than the next element\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]", "category": "Python"}, {"instruction": "Construct a code that takes in an object and checks whether each property includes a certain value", "input": "my_dict = {\n    'name': 'John',\n    'age': 23,\n    'pet_name': 'Maggy'\n}\nvalue = 'John'", "output": "def check_value(obj, value):\n    for key, val in obj.items():\n        if val == value:\n            return True\n    return False", "category": "Python"}, {"instruction": "Using list comprehension, create a new list that contains values less than 5", "input": "my_list = [7, 2, 5, 8, 4, 9, 6]", "output": "new_list = [x for x in my_list if x < 5]", "category": "Python"}, {"instruction": "Construct a loop that checks whether each item in a list is greater than 10", "input": "my_list = [5, 11, 8, 15]", "output": "for x in my_list:\n    if x > 10:\n        print(\"{0} is greater than 10\".format(x))", "category": "Python"}, {"instruction": "Write a function which prints out odd numbers from a given list", "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "output": "def print_odd_num(my_list):\n    for num in my_list:\n        if num % 2 != 0:\n            print(num)", "category": "Python"}, {"instruction": "Design a class named \"Rectangle\" that prints out the length, width, area and perimeter of a given rectangle.", "input": "", "output": "\"\"\"\nDesign a class named 'Rectangle' that prints out the length, width, area and perimeter of a given rectangle\n\"\"\"\n\nclass Rectangle:\n    def __init__(self, l, w):\n        self.length = l\n        self.width = w\n        \n    def area(self):\n        return self.length * self.width\n    \n    def perimeter(self):\n        return 2 * (self.length + self.width)\n    \n    def __str__(self):\n        return 'Rectangle with length {0} and width {1}'.format(self.length, self.width)", "category": "Python"}, {"instruction": "Given two arrays of integers, write a Python function which is able to identify common elements.", "input": "arr1 = [1,2,3,4,5]\narr2 = [3,4,5,6,7]", "output": "def common_elements(arr1, arr2):\n  return [x for x in arr1 if x in arr2]", "category": "Python"}, {"instruction": "Given a text string, write a function in Python to identify all the words that have more than 3 characters.", "input": "text = \"Python is an easy to learn language\"", "output": "def longer_words(text):\n words = text.split()\n longer = [word for word in words if len(word) > 3]\n return longer", "category": "Python"}, {"instruction": "Write a Python function that prints the square of a given number.", "input": "", "output": "def square(num):\n  return num ** 2", "category": "Python"}, {"instruction": "Generate multiple Fibonacci numbers in Python.", "input": "", "output": "def Fibonacci(n): \n  a = 0\n  b = 1\n  if n < 0:\n    print(\"Incorrect input\") \n  elif n == 0:\n    return a\n  elif n == 1:\n    return b\n  else:\n    for i in range(2,n):\n      c = a + b\n      a = b\n      b = c\n  return b\n\nfor i in range(10):\n  print(Fibonacci(i))", "category": "Python"}, {"instruction": "Describe the concept of machine learning in your own words.", "input": "", "output": "Machine learning is a field of Artificial Intelligence that focuses on developing algorithms for computers to learn from data and to make predictions about their environment. It can involve supervised and unsupervised learning techniques, such as classification and clustering, to analyze data and make predictions. Machine learning algorithms are also used to detect patterns and make decisions, enabling computers to automate tasks and learn from experience.", "category": "Python"}, {"instruction": "Create a loop in Python with the given requirements.", "input": "Print out the numbers from 1 to 10, inclusive", "output": "for x in range(1, 11):\n  print(x)", "category": "Python"}, {"instruction": "Construct a code to get the last index of a given substring in a string.", "input": "\"hi hi hello\", \"hi\"", "output": "def lastIndexOf(st, substr): \n    if substr in st: \n        start = -1 \n        while True: \n            pos = st.find(substr, start + 1) \n            if pos == -1: \n                break \n            start = pos \n            \n        return start \n    else: \n        return -1 \n    \nprint(lastIndexOf(\"hi hi hello\", \"hi\")) \n\n# output \n3", "category": "Python"}, {"instruction": "Create a filter to remove all integers from an array of mixed data types.", "input": "[\"Hello\", 3, 5.4, \"World\", 6]", "output": "def removeInts(arr): \n    return [x for x in arr if type(x) is not int] \n\nprint(removeInts([\"Hello\", 3, 5.4, \"World\", 6])) \n\n# output\n['Hello', 5.4, 'World']", "category": "Python"}, {"instruction": "Answer what is the longest palindrome in a given string.", "input": "\"Run, spot, run. He ran up red hills\"", "output": "def longestPalindrome(st): \n    palindromes = []\n    for i in range(len(st)): \n        for j in range(i, len(st)): \n            curr = st[i:j+1] \n            rev = curr[::-1] \n            if (curr == rev): \n                palindromes.append(curr) \n    res = max(palindromes, key = len) \n        \n    return res\n\nprint(longestPalindrome(\"Run, spot, run. He ran up red hills\")) \n\n# output\nrun", "category": "Python"}, {"instruction": "Develop an algorithm for reversing a string without using any reverse string methods.", "input": "Hello World", "output": "def reverseString(str):\n    reversed_str = \"\"\n    for i in range(len(str)-1, -1, -1):\n        reversed_str += str[i]\n    return reversed_str\n\nprint(reverseString(\"Hello World\"))", "category": "Python"}, {"instruction": "Find the maximum value of an array without using any built-in functions", "input": "[7, 9, -2, 15, 3]", "output": "def find_max(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n\narr = [7, 9, -2, 15, 3]\nprint(find_max(arr))", "category": "Python"}, {"instruction": "Create a hashtable in Python of size 8 and insert five elements.", "input": "", "output": "class HashTable:\n    def __init__(self, size):\n        self.size = size\n        self.table = [None] * size\n\n    def insert(self, key, value):\n        hash_value = hash(key)\n        index = hash_value%self.size\n        if self.table[index] == None:\n            self.table[index] = [key, value]\n        else:\n            self.table[index].append([key,value])\n\n    # Other methods go here\n\n# Create a hashtable\nht = HashTable(8)\n\n# Insert elements\nht.insert('apple', 5)\nht.insert('banana', 8)\nht.insert('strawberry', 11)\nht.insert('kiwi', 2)\nht.insert('mango', 6)", "category": "Python"}, {"instruction": "Find the median of the given array [3,7,2,1,9].", "input": "", "output": "def find_median(arr):\n    arr.sort()\n    if len(arr) % 2 == 0: \n        median = (arr[(len(arr)//2)-1] + arr[len(arr)//2])/2 \n    else: \n        median = arr[len(arr)//2] \n    return median\n\nmedian = find_median([3,7,2,1,9])\nprint(median) # Prints 3.5", "category": "Python"}, {"instruction": "Generate a matrix with 5 rows and 7 columns containing random numbers in it.", "input": "", "output": "import numpy as np\n\n# Create a matrix with 5 rows and 7 columns\nmatrix = np.random.rand(5,7)", "category": "Python"}, {"instruction": "Create a function to print out the Fibonacci numbers starting from 0 to the nth number.", "input": "n = 7", "output": "def print_fibonacci(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        print(a, end=' ')\n        temp = a \n        a = b \n        b = temp + b\n\n# The output of the function would be\n# 0 1 1 2 3 5 8", "category": "Python"}, {"instruction": "Create a class \"MyDict\" that inherits from the Python built-in \"dict\" class.", "input": "", "output": "class MyDict(dict):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def __getitem__(self, key): \n        if key in self:\n            return super().__getitem__(key)\n        else: \n            return None", "category": "Python"}, {"instruction": "Create a class 'Stack' that has a method 'max_stack' that returns the maximum element in the stack.", "input": "", "output": "class Stack():\n    def __init__(self): \n        self.stack = []\n\n    # Inserts an element in the stack\n    def push(self, item):\n        self.stack.append(item)\n \n    # Return the maximum element in a stack\n    def max_stack(self): \n        max_elem = self.stack[0] \n        for i in range(1,len(self.stack)): \n            if self.stack[i]>max_elem:\n                    max_elem = self.stack[i] \n        return max_elem", "category": "Python"}, {"instruction": "Write a function in Python to get the IPv6 address of a given domain name.", "input": "", "output": "import socket\n\ndef get_IPv6_address(domain_name):\n    \"\"\"\n    Function to get the IPv6 address of a given domain name\n    \"\"\"\n\n    # get the ip_addres\n    ip_address = socket.getaddrinfo(domain_name, 0, socket.AF_INET6)\n\n    # return the ip address\n    return ip_address[0][4][0]", "category": "Python"}, {"instruction": "Write a Python program to create a dictionary with three elements.", "input": "", "output": "d = { \n    \"one\" : 1, \n    \"two\" : 2, \n    \"three\" : 3\n}", "category": "Python"}, {"instruction": "Create a function to print all the paths in a binary tree.", "input": "", "output": "def print_paths(root): \n    path = [] \n    print_paths_util(root, path, 0) \n  \ndef print_paths_util(root, path, pathLen): \n    if root is None: \n        return\n  \n    if (len(path) > pathLen):  \n        path[pathLen] = root.data\n    else: \n        path.append(root.data) \n  \n    pathLen = pathLen + 1\n  \n    if root.left is None and root.right is None: \n        for i in range(pathLen):\n            print(path[i],end=\" \")\n        print() \n    else: \n        print_paths_util(root.left, path, pathLen) \n        print_paths_util(root.right, path, pathLen)", "category": "Python"}, {"instruction": "Create an algorithm to find the second minimum element from a given array of 7 elements.", "input": "[87, 34, 56, 12, 21, 45, 67]", "output": "1. Set a variable, secondMinimum, to the first element of the array.\n2. Iterate through the array. \n3. For every element check if it is smaller than secondMinimum, but bigger than the smallest element in the array. \n4. If it is, set secondMinimum to that element. \n5. When the iteration is finished, return secondMinimum.", "category": "Python"}, {"instruction": "Design an algorithm to get the maximum value from a given array of four elements.", "input": "[-5, 2, 45, 9]", "output": "1. Set a variable, maxValue, and initialize it to the first element in the array.\n2. Iterate through the array, comparing each element to maxValue.\n3. If the element is bigger than maxValue, replace maxValue with the element.\n4. When the loop is finished, save maxValue and return it as the maximum value from the array.", "category": "Python"}, {"instruction": "Construct a Numpy array of shape 2x3 containing all 7s.", "input": "", "output": "arr = np.array([[7, 7, 7],\n                [7, 7, 7]])", "category": "Python"}, {"instruction": "Parse the following JSON string and print out all the key-value pairs:\n{\u201cname\u201d:\u201dJohn\u201d,\u201dage\u201d:25,\u201dcity\u201d:\"New York\"", "input": "String = '{\"name\":\"John\",\"age\":25,\"city\":\"New York\"}'", "output": "import json \n  \nString = '{\"name\":\"John\",\"age\":25,\"city\":\"New York\"}'\n  \n# Parse the string\njs = json.loads(String)\n  \n# Print all key-value pairs\nfor k, v in js.items():\n    print(k, \":\", v)", "category": "Python"}, {"instruction": "How can you remove all blank spaces from a given string in Python?", "input": "", "output": "You can remove all blank spaces from a given string in Python using the replace() function. This function takes two arguments, the first is the substring to be replaced and the second is the substring to be inserted in its place. In this case, you can use an empty string as the second argument to remove any instance of the white space from the string. \n\nFor example:\n\nstring_with_spaces = \"   Hello  World  \" \nno_spaces = string_with_spaces.replace(\" \", \"\") \nprint(no_spaces)  # Output: \"HelloWorld\"", "category": "Python"}, {"instruction": "Create an array where each element is the maximum of each row in a given matrix.", "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def max_elements(matrix):\n    max_elements = []\n    for row in matrix:\n        max_elements.append(max(row))\n    return max_elements", "category": "Python"}, {"instruction": "Design a basic graphic user interface (GUI) for a calculator.", "input": "", "output": "import tkinter as tk\n\nroot = tk.Tk()\n\n# design the window\nroot.title(\"Calculator\")\nroot.geometry(\"200x250\")\n\n# create the buttons\nbutton1 = tk.Button(root, text=\"1\", width=5, height=2)\nbutton1.grid(row=0, column=0, padx=4, pady=4)\n\nbutton2 = tk.Button(root, text=\"2\", width=5, height=2)\nbutton2.grid(row=0, column=1, padx=4, pady=4)\n\nbutton3 = tk.Button(root, text=\"3\", width=5, height=2)\nbutton3.grid(row=0, column=2, padx=4, pady=4)\n\n# create more buttons\n# and so on\n\nroot.mainloop()", "category": "Python"}, {"instruction": "Compute the surface area of a pyramid with a base area of 10 cm and a height of 7 cm.", "input": "", "output": "The surface area of the pyramid is 24 cm\u00b2.", "category": "Python"}, {"instruction": "Using a for loop, create a list of integers that are multiples of 4 from 0 to 50.", "input": "", "output": "multiples_of_four = [n for n in range(0, 51) if n % 4 == 0]", "category": "Python"}, {"instruction": "Write a Python function to convert an array of integers into their respective strings.", "input": "arr = [1, 2, 3]", "output": "def array_int_string(arr):\n    \"\"\"Converts an array of integers into strings.\"\"\"\n    return [str(num) for num in arr]\n\narray_int_string(arr)  # returns [\"1\", \"2\", \"3\"]", "category": "Python"}, {"instruction": "How can we delete all the elements of a list in Python?", "input": "", "output": "def delete_all_elements(lst):\n    del lst[:]", "category": "Python"}, {"instruction": "How would you print all the key-value pairs of an already existing dictionary?", "input": "", "output": "def print_dict_key_value(dic):\n    for key, value in dic.items():\n        print(f\"{key}: {value}\")", "category": "Python"}, {"instruction": "Given a string and an integer N, write a Python function to construct the Nth palindromic string.", "input": "", "output": "def construct_palindrome(string, N):\n    length = len(string)\n    mid = length // 2\n\n    left = string[:mid]\n    right = left[::-1]\n\n    if length % 2 == 0:\n        left = string[:mid - (N - 1)]\n        right = left[::-1]\n    else:\n        left = string[:mid - N]\n        right = string[mid + 1:(mid + 1) + N][::-1]\n\n    return left + string[mid] + right", "category": "Python"}, {"instruction": "Given a dictionary, write a Python function to print all the key-value pairs in the dictionary.", "input": "", "output": "def print_dict_key_value(dic):\n    for key, value in dic.items():\n        print(f\"{key}: {value}\")", "category": "Python"}, {"instruction": "Given a list of numbers, write a Python function to count how many numbers in the list are greater than 10.", "input": "", "output": "def count_greater_than_ten(nums):\n    return len([n for n in nums if n > 10])", "category": "Python"}, {"instruction": "Create a function to classify an array as odd or even length.", "input": "", "output": "def classify_array_length(arr):\n    if len(arr) % 2 == 0:\n        return 'even'\n    else:\n        return 'odd'", "category": "Python"}, {"instruction": "Edit the following code to generate a list of the vowels in a given string.", "input": "", "output": "def get_vowels(str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    res = []\n    for letter in str:\n        if letter.lower() in vowels:\n            res.append(letter)\n    return res", "category": "Python"}, {"instruction": "Create an algorithm that finds the maximum subarray sum in a given array.", "input": "[-2, 1, -3, 4, -1, 2, 1, -5, 4]", "output": "def max_subarray_sum(arr):\n    max_sum = 0\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum", "category": "Python"}, {"instruction": "Print out the prime numbers between 0 to 100.", "input": "", "output": "for n in range(2, 101): \n    for i in range(2, n): \n        if n % i == 0: \n            break\n    else: \n        print(n, end = ' ')", "category": "Python"}, {"instruction": "Create a program in Python to return the first n elements from an array", "input": "", "output": "def first_n_elements(array, n):\n    return array[:n]", "category": "Python"}, {"instruction": "What is the maximum value of a byte in a binary system?", "input": "", "output": "The maximum value of a byte in a binary system is 255. This is because there are 8 bits in a byte, and the maximum value each bit can have is 1, giving a maximum value of 8 ones, or 255 in the denary system.", "category": "Python"}, {"instruction": "Create an identifier in Python that starts with an underscore followed by the letter 'a'.", "input": "", "output": "_a", "category": "Python"}, {"instruction": "Create a function to return a random letter from a given string.", "input": "", "output": "import random \n  \ndef random_letter(string): \n    \"\"\" \n    Function to return a random letter \n    from a given string \n    \"\"\"\n  \n    # Get the length of the string \n    length = len(string) \n  \n    # Get a random index  \n    # from 0 to length - 1 \n    index = random.randint(0, length - 1) \n  \n    # Return the letter at the  \n    # randomly generated index \n    return string[index] \n  \n# Driver Code \nstring = \"Geek\"\nprint(random_letter(string))", "category": "Python"}, {"instruction": "Create a class named Animal with a few methods describing different attributes of animals.", "input": "", "output": "class Animal:\n    def __init__(self):\n        pass\n    \n    def is_mammal(self):\n        \"\"\"Return True if animal is a mammal, False otherwise\"\"\"\n        pass\n\n    def is_reptile(self):\n        \"\"\"Return True if animal is a reptile, False otherwise\"\"\"\n        pass\n    \n    def is_amphibian(self):\n        \"\"\"Return True if animal is an amphibian, False otherwise\"\"\"\n        pass\n\n    def is_bird(self):\n        \"\"\"Return True if animal is a bird, False otherwise\"\"\"\n        pass", "category": "Python"}, {"instruction": "Convert the following code to Python and make it object-oriented.", "input": "function celsius_to_fahrenheit(celsius) { \n  let fahrenheit = (celsius * 9/5) + 32\n  return fahrenheit \n}", "output": "class TemperatureConverter:\n    def celsius_to_fahrenheit(self, celsius):\n        fahrenheit = (celsius * 9/5) + 32\n        return fahrenheit", "category": "Python"}, {"instruction": "Produce a Python script that generates a random string of length 10", "input": "", "output": "import random\nimport string\n\ndef get_random_string(stringLength=10):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(stringLength))\n\nrandomString = get_random_string()\nprint(randomString) # outputs a random string of length 10", "category": "Python"}, {"instruction": "Create a list in Python of all integers from -5 to 10.", "input": "", "output": "list_nums = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Write a function in Python to convert miles to kilometers.", "input": "7", "output": "def miles_to_km(miles):\n return miles * 1.609\n\nconverted_km = miles_to_km(7)\nprint(converted_km)", "category": "Python"}, {"instruction": "Import the numpy library into the program", "input": "", "output": "import numpy as np", "category": "Python"}, {"instruction": "Generate a list of all words in the input string longer than 4 characters.", "input": "my_string = \"This is a sentence\"", "output": "word_list = [word for word in my_string.split() if len(word)>4]", "category": "Python"}, {"instruction": "Write a python script to convert a given number to a string.", "input": "num = 1234", "output": "def num_to_str(num):\n    return str(num)", "category": "Python"}, {"instruction": "Modify the following function to return the maximum value in a list.", "input": "def max_list(lst):\n    max = 0\n    for x in lst:\n        max = x\n    return max", "output": "def max_list(lst):\n    max = None\n    for x in lst:\n        if max is None or x > max:\n            max = x\n    return max", "category": "Python"}, {"instruction": "Create a program to reverse an array in place, i.e. without creating a copy.", "input": "", "output": "def reverse_in_place(arr):\n    n = len(arr)\n    for i in range(n//2):\n        arr[i], arr[n-i-1] = arr[n-i-1], arr[i]", "category": "Python"}, {"instruction": "Suggest a solution to print the prime factorization of a number.", "input": "", "output": "def prime_factors(num):\n    factors = []\n    i = 2\n    while num > 1:\n        if num % i == 0:\n            factors.append(i)\n            num = num // i\n        else:\n            i += 1\n    return factors", "category": "Python"}, {"instruction": "Generate a code snippet to clone/copy a dictionary.", "input": "", "output": "import copy\n\ndef clone_dict(dict):\n    return copy.deepcopy(dict)", "category": "Python"}, {"instruction": "Formulate a solution to print out each letter of a string individually.", "input": "", "output": "def print_letters(string):\n    for letter in string:\n        print(letter)", "category": "Python"}, {"instruction": "Create a program to generate a sequence of integers that starts at k and ends at n in the following format: [k, k+1, ..., n-1, n]", "input": "", "output": "def generate_seq(k, n):\n    seq = []\n    for i in range(k, n+1):\n        seq.append(i)\n    return seq", "category": "Python"}, {"instruction": "Write a code to recognize the most likely language of a given text.", "input": "", "output": "import langdetect\n\ndef detect_language(text):\n    language = langdetect.detect(text)\n    return language", "category": "Python"}, {"instruction": "Create a Python script to parse a JSON string and print the value corresponding to the key 'name'.", "input": "{\"name\": \"John Doe\", \"age\": 25}", "output": "import json\n\ndata = '{\"name\": \"John Doe\", \"age\": 25}'\n\ndata = json.loads(data) \n\nprint(data[\"name\"])", "category": "Python"}, {"instruction": "Output an array of even numbers from 0 to 20 using a for loop in Python.", "input": "", "output": "even_nums = []\nfor num in range(0, 21):\n    if num % 2 == 0:\n        even_nums.append(num)\nprint(even_nums)", "category": "Python"}, {"instruction": "Write a web scraper in Python to get all the external links from a webpage.", "input": "url = 'https://en.wikipedia.org/wiki/Web_scraping'", "output": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://en.wikipedia.org/wiki/Web_scraping'\npage = requests.get(url)\nsoup = BeautifulSoup(page.text, 'html.parser')\nlinks = [link.get('href') for link in soup.find_all('a') if 'http' in link.get('href')]\nprint(links)", "category": "Python"}, {"instruction": "Create a Python program that prints all numbers in the range 1-10.", "input": "", "output": "for number in range(1, 11):\n print(number)", "category": "Python"}, {"instruction": "Design a neural network for facial recognition using TensorFlow.", "input": "", "output": "import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    # First convolutional layer\n    tf.keras.layers.Conv2D(64, (3, 3), activation='relu', padding='same', input_shape=(64, 64, 3)),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    # Second convolutional layer\n    tf.keras.layers.Conv2D(128, (3, 3), activation='relu', padding='same'),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    # Third convolutional layer\n    tf.keras.layers.Conv2D(128, (3, 3), activation='relu', padding='same'),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    # Fourth convolutional layer\n    tf.keras.layers.Conv2D(128, (3, 3), activation='relu', padding='same'),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    # Flatten the output\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(2048, activation='relu'),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(1024, activation='relu'),\n    tf.keras.layers.Dropout(0.5),\n    # Output decode layer\n    tf.keras.layers.Dense(2, activation='softmax')\n])", "category": "Python"}, {"instruction": "Parse the following JSON objects, convert all the values to strings and create a dictionary named \"parsed_data\".", "input": "{\n \"name\": \"John Doe\",\n \"age\": 33,\n \"locations\": [\"NYC\", \"LA\"]\n}", "output": "import json\n\nparsed_data = {}\n\ndata = {\n    \"name\": \"John Doe\",\n    \"age\": 33,\n    \"locations\": [\"NYC\", \"LA\"]\n}\nfor key, val in data.items():\n    parsed_data[key] = str(val)", "category": "Python"}, {"instruction": "Extract the phone number from given string and output it as an integer.", "input": "Hi, my number is +1-345--678-9012", "output": "\"\"\"\nExtract the phone number from given string and output it as an integer\n\"\"\"\n\ndef extract_phone_number(s):\n    s = s.replace('+', '')\n    numbers = \"\"\n    for c in s:\n        if c.isdigit():\n            numbers += c\n    return int(numbers)\n\nif __name__ == '__main__':\n    s = \"Hi, my number is +1-345--678-9012\"\n    num = extract_phone_number(s)\n    print(num)", "category": "Python"}, {"instruction": "Write a code to implement quicksort.", "input": "arr = [6, 1, 8, 4, 9, 5]", "output": "\"\"\"\nImplement quicksort\n\"\"\"\n\ndef quicksort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n\nif __name__ == '__main__':\n    arr = [6, 1, 8, 4, 9, 5]\n    result = quicksort(arr)\n    print(result)", "category": "Python"}, {"instruction": "Write a code to fetch the last ten news headlines from HackerNews using their API.", "input": "", "output": "\"\"\"\nFetch the last ten news headlines from HackerNews using their API\n\"\"\"\n\nimport requests\n\ndef get_headlines():\n    url = \"https://hacker-news.firebaseio.com/v0/topstories.json\"\n    ids = requests.get(url).json()\n    headlines = []\n    for id in ids[:10]:\n        item = requests.get(f\"https://hacker-news.firebaseio.com/v0/item/{id}.json\").json()\n        headlines.append(item['title'])\n    return headlines\n\nif __name__ == '__main__':\n    headlines = get_headlines()\n    for headline in headlines:\n        print(headline)", "category": "Python"}, {"instruction": "How to check if an item exists in a list in Python?", "input": "my_list = [1, 2, 3, 4]", "output": "# Check if item exists in list \nif 4 in my_list: \n    print(\"Exists\") \nelse: \n    print(\"Doesn't Exist\")", "category": "Python"}, {"instruction": "Given the JSON data below, find the count of each type of fruit.", "input": "{\n    \"fruits\": [\n        { \"type\": \"apple\", \"count\": 10 },\n        { \"type\": \"orange\", \"count\": 5 },\n        { \"type\": \"banana\", \"count\": 15 }\n    ]\n}", "output": "import json\n\ndata = \"\"\"\n{\n    \"fruits\": [\n        { \"type\": \"apple\", \"count\": 10 },\n        { \"type\": \"orange\", \"count\": 5 },\n        { \"type\": \"banana\", \"count\": 15 }\n    ]\n}\n\"\"\"\n\ndata = json.loads(data)\n\n# Get the count for each type of fruit\napple_count = 0\norange_count = 0\nbanana_count = 0\nfor fruit in data['fruits']:\n    if fruit['type'] == 'apple':\n        apple_count = fruit['count']\n    elif fruit['type'] == 'orange':\n        orange_count = fruit['count']\n    elif fruit['type'] == 'banana':\n        banana_count = fruit['count']\n\nprint(\"Apple count = %d\" % apple_count)\nprint(\"Orange count = %d\" % orange_count)\nprint(\"Banana count = %d\" % banana_count)", "category": "Python"}, {"instruction": "Create a python function that takes a single integer as an argument and prints out the corresponding multiplication table.", "input": "", "output": "def print_table(n):\n    for i in range(1, 11):\n        table = n * i\n        print(f\"{n} X {i} = {table}\")", "category": "Python"}, {"instruction": "Develop a program to accept one number from the user and display its factorial using a Python function.", "input": "5", "output": "def factorial(num):\n    if num <= 1:\n        return 1\n    else:\n        return num * factorial(num-1) \n    \nnum = int(input('Enter number to find factorial: '))\nfactorial = factorial(num)\nprint('Factorial of', num, 'is', factorial)", "category": "Python"}, {"instruction": "Develop a Python script to sum up all the individual digits of a given number", "input": "354", "output": "def sum_digits(input_number):\n \n    sum_of_digits = 0\n    while input_number > 0:\n        last_digit = input_number % 10\n        sum_of_digits += last_digit\n        input_number //= 10\n \n    return sum_of_digits\n \nsum_digits(354)", "category": "Python"}, {"instruction": "Write a Python code to convert a binary tree to its mirror tree", "input": "", "output": "def mirror_tree(root): \n    if root is None: \n        return\n  \n    # Do the postorder traversal to traverse down to leaf nodes \n    mirror_tree(root.left) \n    mirror_tree(root.right) \n  \n    # Swap the pointers in this node \n    root.left, root.right = root.right, root.left", "category": "Python"}, {"instruction": "Generate a dictionary out of two lists by matching each element in the two lists", "input": "list_a =[2, 3, 4]\nlist_b = [\"a\", \"b\", \"c\"]", "output": "def make_dict(list_a, list_b):\n  dict = {}\n  for a, b in zip(list_a, list_b):\n    dict[a] = b\n\n  return dict", "category": "Python"}, {"instruction": "Compare two Python lists having integers and write a function to output the differences", "input": "list_a = [1, 2, 3]\nlist_b = [2, 3, 4]", "output": "def get_diff(list_a, list_b):\n  diff = list_a\n  for i in list_b:\n    if i in list_a:\n      diff.remove(i)   \n  return diff", "category": "Python"}, {"instruction": "Write a code for linear search algorithm.", "input": "[4, 5, 2, 3]\n2", "output": "def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    \n    return None\n\nprint(linear_search([4, 5, 2, 3], 2)) # Output: 2", "category": "Python"}, {"instruction": "Define a function to check whether string a is an anagram of string b.", "input": "\"silent\" \n\"listen\"", "output": "def is_anagram(a, b):\n    a = a.lower()\n    b = b.lower()\n\n    if len(a) != len(b):\n        return False\n    \n    for char in a:\n        if char not in b:\n            return False\n        b = b.replace(char, '', 1)\n    \n    return True\n\nprint(is_anagram(\"silent\", \"listen\")) # Output: True", "category": "Python"}, {"instruction": "Write a code to convert a given string of English characters to corresponding Morse code.", "input": "\"Hello World!\"", "output": "def morse_encode(input_string):\n    morse_encoder = {\n        \"A\":\".- \",\n        \"B\":\"-... \",\n        \"C\":\"-.-. \",\n        \"D\":\"-.. \",\n        \"E\":\" . \",\n        \"F\":\"..-. \",\n        \"G\":\"--. \",\n        \"H\":\".... \",\n        \"I\":\".. \",\n        \"J\":\".--- \",\n        \"K\":\"-.- \",\n        \"L\":\".-.. \",\n        \"M\":\"-- \",\n        \"N\":\"-. \",\n        \"O\":\"--- \",\n        \"P\":\".--. \",\n        \"Q\":\"--.- \",\n        \"R\":\".-. \",\n        \"S\":\"... \",\n        \"T\":\"- \",\n        \"U\":\"..- \",\n        \"V\":\"...- \",\n        \"W\":\".-- \",\n        \"X\":\"-..- \",\n        \"Y\":\"-.-- \",\n        \"Z\":\"--.. \",\n        \" \": \"  \"\n    }\n    morse_string = []\n\n    for char in input_string.upper():\n        encoded_char = morse_encoder.get(char)\n        morse_string.append(encoded_char)\n    \n    return ''.join(morse_string)\n\nprint(morse_encode(\"Hello World!\")) # Output: \".... . .-.. .-.. ---  .-- --- .-. .-.. -.. ! \"", "category": "Python"}, {"instruction": "Create a function that returns a list of all the factors of a given number.", "input": "64", "output": "def factor(x): \n    factors = []\n    for i in range(1, x + 1): \n        if x % i == 0: \n            factors.append(i) \n    return factors\n\nprint(factor(64)) # Output: [1, 2, 4, 8, 16, 32, 64]", "category": "Python"}, {"instruction": "Create a text classification model using Scikit-learn to classify a message with either \"positive\" or \"negative\" sentiment.", "input": "", "output": "from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\n# Vectorize the message into a format that the model can accept\nvect = CountVectorizer().fit(X_train)\nX_train_vectorized = vect.transform(X_train)\n\n# Train a Logistic Regression model\nmodel = LogisticRegression()\nmodel.fit(X_train_vectorized, y_train)\n\n# Use the model to predict the sentiment of a given message\nmessage_sentiment = model.predict([vect.transform([message])])", "category": "Python"}, {"instruction": "Name five different Python libraries used for visualization.", "input": "", "output": "Matplotlib, Seaborn, Bokeh, Plotly, and Altair.", "category": "Python"}, {"instruction": "How could you read a specific compression format such as .zip in Python?", "input": "", "output": "Python has a built-in zipfile module which provides support for reading and writing zip archives in native Python code. The module provides a ZipFile object with methods to read and extract contents of the archive, as well as a class representing individual entries such as files and directories.\n\nFor example, to extract an archive using the ZipFile object, you can do the following:\n\nimport zipfile\n\nwith zipfile.ZipFile(\"path/to/archive.zip\", \"r\") as zf:\n zf.extractall(\"path/to/destination/directory\")", "category": "Python"}, {"instruction": "Create an object method to calculate the area of a triangle in Python.", "input": "", "output": "def calculate_area(self):\n  return (self.base * self.height) / 2", "category": "Python"}, {"instruction": "How would you print \"Goodbye\" ten times in Python?", "input": "", "output": "for i in range(10):\n print(\"Goodbye\")", "category": "Python"}, {"instruction": "Suggest a python code to print a 2D board with 'X' and 'O'.", "input": "[['X', 'O', 'X'], ['O', 'X', 'O'], ['X', 'X', 'O']]", "output": "board = [['X', 'O', 'X'], ['O', 'X', 'O'], ['X', 'X', 'O']]\n\nfor row in board:\n    for cell in row:\n        print(cell, end=\" \")\n    print()", "category": "Python"}, {"instruction": "Alter the code to return the last element of a linked list.", "input": "", "output": "def getLastElement(head): \n    # Base case \n    if head == None: \n        return None\n  \n    # If list is not empty, traverse \n    # to the last node \n    start = head \n    while (start.next != None): \n        start = start.next\n  \n    # return last element \n    return start", "category": "Python"}, {"instruction": "Suggest a way to serialize a binary tree in python.", "input": "", "output": "def serializeBinaryTree(root):\n    if root == None:\n        return \"#\"\n    \n    serializedTree = \"\"\n    serializedTree += str(root.val) + ','\n    serializedTree += serializeBinaryTree(root.left) + ','\n    serializedTree += serializeBinaryTree(root.right)\n\n    return serializedTree", "category": "Python"}, {"instruction": "Alter the following code to detect a loop in a linked list", "input": "", "output": "def detectLoop(head): \n    slow_p = head  \n    fast_p = head  \n  \n    while (slow_p and fast_p and \n             fast_p.next): \n        slow_p = slow_p.next\n        fast_p = fast_p.next.next\n          \n        if slow_p == fast_p: \n            return 1\n  \n    return 0", "category": "Python"}, {"instruction": "Write a python code to print every key and its corresponding value in a dictionary.", "input": "{\"Name\": \"John\", \"Age\": 20, \"Country\": \"USA\"}", "output": "dic = {\"Name\": \"John\", \"Age\": 20, \"Country\": \"USA\"} \nfor key, value in dic.items():  \n    print(key + \" : \" + str(value))", "category": "Python"}, {"instruction": "Alter the following code to create a function called \"find_largest\" to find the largest number in a given list.", "input": "[9, 11, 7, 16, 20]", "output": "def find_largest(lst):\n    largest_number = lst[0]\n    for num in lst:\n        if num > largest_number:\n            largest_number = num\n    return largest_number", "category": "Python"}, {"instruction": "Write an algorithm to store the data in a 2D array.", "input": "[[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16]]", "output": "def storeDataIn2DArray(data):\n    rowLength = len(data[0])\n    columnLength = len(data)\n    twoDArray = []\n  \n    for row in range(rowLength):\n        twoDArrayRow = []\n\n        for column in range(columnLength):\n            twoDArrayRow.append(data[column][row])\n\n        twoDArray.append(twoDArrayRow)\n\n    return twoDArray", "category": "Python"}, {"instruction": "Create a data structure to store the 5 highest scores of a given game", "input": "", "output": "# create a priority queue \n# score will be the priority and name will be stored as data\nimport queue\nscores = queue.PriorityQueue(maxsize=5)\n\ndef add_score(score, name):\n    if scores.full():\n        min_score = scores.get()\n        if min_score[0] < score:\n            scores.put((score, name))\n        else:\n            scores.put(min_score)\n    else:\n        scores.put((score, name))", "category": "Python"}, {"instruction": "Create a TensorFlow program to implement a multi-layer neural network", "input": "", "output": "import tensorflow as tf\n\n# create the model\nmodel = tf.keras.models.Sequential()\n\n# add layers to the model\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\nmodel.add(tf.keras.layers.Dense(64, activation='relu'))\nmodel.add(tf.keras.layers.Dense(32, activation='relu'))\nmodel.add(tf.keras.layers.Dense(16, activation='relu'))\nmodel.add(tf.keras.layers.Dense(8, activation='sigmoid'))\nmodel.add(tf.keras.layers.Dense(4, activation='softmax'))\n\n# compile the model\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])", "category": "Python"}, {"instruction": "Create a linked list to store the values ```[10, 20, 30]```.", "input": "", "output": "class Node:\n def __init__(self, data):\n   self.data = data\n   self.next = None\n\nclass LinkedList:\n def __init__(self):\n   self.head = None\n\nlist = [10, 20, 30]\nllist = LinkedList()\nllist.head = Node(list[0])\n \ntemp = llist.head\n \nfor i in range(1, len(list)):\n temp.next = Node(list[i])\n temp = temp.next", "category": "Python"}, {"instruction": "Find the average of five numbers.", "input": "11, 15, 20, 7, 19", "output": "def avg(nums):\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum/len(nums)", "category": "Python"}, {"instruction": "Given a list of strings, reverse the order of each string in the list.", "input": "[\"hello\", \"world\", \"this\", \"is\", \"amazing\"]", "output": "def reverse_words(words):\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return reversed_words", "category": "Python"}, {"instruction": "Generate a random 10 character password with at least one uppercase letter and one number.", "input": "", "output": "import random\n\ndef generate_password():\n    uppercase_characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    numbers = '0123456789'\n    password = ''\n\n    for i in range(5):\n        password += random.choice(uppercase_characters)\n        password += random.choice(numbers)\n\n    password += random.choice(list(set(uppercase_characters + numbers)))\n\n    return password\n\nif __name__ == '__main__':\n    print(generate_password())", "category": "Python"}, {"instruction": "Prepare a code to select all rows that have more than one occurrence of the same value in a given column.", "input": "column = \"color\"\ndata = {\n \"color\": [\"red\", \"blue\", \"red\", \"yellow\", \"blue\"] \n}", "output": "def duplicate_rows(column, data):\n    duplicates = []\n    for row in data:\n        if data[column].count(row[column]) > 1:\n            duplicates.append(row)\n    return duplicates", "category": "Python"}, {"instruction": "Given a list of numbers and a number k, return whether any two numbers from the list add up to k.", "input": "nums = [10, 15, 3, 7]\nk = 17", "output": "def two_sum(nums, k):\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == k:\n                return True\n    return False", "category": "Python"}, {"instruction": "Using the comment as a guide, replace the placeholder with the proper code to remove all duplicates from a list.", "input": "mylist = [1, 2, 3, 2, 4, 2]\n# TODO: write code to remove all duplicates from mylist", "output": "def remove_duplicates(mylist):\n    mylist = list(dict.fromkeys(mylist))\n    return mylist\n\nif __name__ == '__main__':\n    mylist = [1, 2, 3, 2, 4, 2]\n    print(remove_duplicates(mylist))", "category": "Python"}, {"instruction": "Write a function that takes an array and returns the number of elements that are even.", "input": "arr = [1, 5, 7, 4, 9, 17]", "output": "def count_even_elements(arr):\n    even_count = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n    return even_count\n\nif __name__ == '__main__':\n    arr = [1, 5, 7, 4, 9, 17]\n    print(count_even_elements(arr))", "category": "Python"}, {"instruction": "Create a function that takes two integers, A and B, and returns the largest common divisor between A and B.", "input": "", "output": "def get_largest_common_divisor(a, b):\n    while a != 0 and b != 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return a + b\n\nif __name__ == '__main__':\n    print(get_largest_common_divisor(15, 9))", "category": "Python"}, {"instruction": "Using the comment as a guide, write the proper code to calculate the sum of the values in an array", "input": "arr = [1, 2, 3, 4, 5]\n# TODO: write code to calculate the sum of the values in arr", "output": "def calculate_sum(arr):\n    sum = 0\n    for x in arr:\n        sum += x\n    return sum\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    print(calculate_sum(arr))", "category": "Python"}, {"instruction": "Write a code that takes a list of numbers, and outputs the 10th largest value.", "input": "mylist = [2, 4, 54, 31, 34, 77, 29, 11, 44, 78, 65, 23]", "output": "def find_10th_largest(input_list):\n    sorted_list = sorted(input_list)\n    return sorted_list[-10]\n\nif __name__ == '__main__':\n    mylist = [2, 4, 54, 31, 34, 77, 29, 11, 44, 78, 65, 23]\n    print(find_10th_largest(mylist))", "category": "Python"}, {"instruction": "Create a neural network class in Python using NumPy.", "input": "", "output": "import numpy as np\n\nclass NeuralNetwork():\n    \n    def __init__(self):\n        np.random.seed(1)\n\n        self.weights = 2 * np.random.random((3,1)) - 1\n\n    def sigmoid(self, x):\n        return 1 / (1 + np.exp(-x))\n\n    def sigmoid_derivative(self, x):\n        return x * (1 - x)\n\n    def train(self, training_inputs, training_outputs, training_iterations):\n        for iteration in range(training_iterations):\n            output = self.think(training_inputs)\n            error = training_outputs - output\n            adjustments = np.dot(training_inputs.T, error * self.sigmoid_derivative(output))\n            self.weights += adjustments\n\n    def think(self, inputs):\n        inputs = inputs.astype(float)\n        output = self.sigmoid(np.dot(inputs, self.weights))\n        return output", "category": "Python"}, {"instruction": "Merge two sorted lists of integers using Python.", "input": "list_1 = [2, 5, 9]\nlist_2 = [1, 4, 6, 7]", "output": "def merge_lists(list_1, list_2):\n    merged_list = []\n    l1, l2 = 0, 0\n\n    while l1 < len(list_1) and l2 < len(list_2):\n        if list_1[l1] <= list_2[l2]:\n            merged_list.append(list_1[l1])\n            l1 += 1\n        else:\n            merged_list.append(list_2[l2])\n            l2 += 1\n\n    merged_list += list_1[l1:]\n    merged_list += list_2[l2:]\n\n    return merged_list", "category": "Python"}, {"instruction": "Build a function in Python for selecting all rows from a Pandas DataFrame where a column value is equal to a given value.", "input": "df = pd.DataFrame({'A':[1, 2, 3, 4, 5],\n                   'B':[2, 3, 4, 5, 6],\n                   'C':[3, 4, 5, 6, 7],\n                   'D':[4, 5, 6, 7, 8]})\ncol_1 = 'A' \nvalue = 3", "output": "def select_rows(df, col_1, value): \n    return df[df[col_1] == value]", "category": "Python"}, {"instruction": "Modify the function to include a message about the length of the string.", "input": "message = \"The length of the string is:\"", "output": "def find_length(string):\n\tcount = 0\n\tfor char in string:\n\t\tcount += 1\n\tprint(message, count)\n\treturn count", "category": "Python"}, {"instruction": "Compute the sum of two matrices of size m x n.", "input": "A = [[1, 2], \n     [4, 5]]\nB = [[3, 6], \n     [7, 8]]", "output": "def matrix_sum(A, B): \n    m = len(A) \n    n = len(A[0]) \n    C = [[0 for i in range(n)] for j in range(m)] \n    for i in range(m):\n        for j in range(n):\n            C[i][j] = A[i][j] + B[i][j]\n    return C\n\nA = [[1, 2], \n     [4, 5]]\nB = [[3, 6], \n     [7, 8]]\n\nres = matrix_sum(A, B)\nprint(res)", "category": "Python"}, {"instruction": "Write a function to get the length of a given string without using any built-in function.", "input": "text = \"Hello world!\"", "output": "def get_length(text):\n    counter = 0\n    for i in text:\n        counter += 1\n    return counter\n\nres = get_length(text)\nprint(res)", "category": "Python"}, {"instruction": "Find the runtime complexity of this Python program.", "input": "def EvenOrOdd(items):\n    if len(items) == 0:\n        return 0\n\n    even_count = 0\n    for item in items:\n        if item % 2 == 0:\n            even_count += 1\n\n    return even_count", "output": "This program has a runtime complexity of O(n), where n is the number of items in the list. This is because the time taken to complete the program increases linearly with the number of items in the list.", "category": "Python"}, {"instruction": "Write a code snippet to display the Fibonacci sequence up to 50 numbers.", "input": "", "output": "def Fibonacci(n): \n\ta = 0\n\tb = 1\n\tif n < 0: \n\t\tprint(\"Incorrect input\") \n\telif n == 0: \n\t\treturn a \n\telif n == 1: \n\t\treturn b \n\telse: \n\t\tfor i in range(2,n): \n\t\t\tc = a + b \n\t\t\ta = b \n\t\t\tb = c \n\t\treturn b \n  \n# Driver Code \nprint(\"Fibonacci Sequence:\")\nfor i in range(50):\n\tprint(Fibonacci(i), end = ' ')", "category": "Python"}, {"instruction": "Edit the below program to print the square of numbers from 0 to 10.\n\ndef printSquare():\n  for i in range(10):\n    print(i)", "input": "", "output": "def printSquare():\n  for i in range(10):\n    print(i**2)", "category": "Python"}, {"instruction": "What type of sorting algorithm does the following Python code implement?\n\ndef sort(nums):\n  for i in range(len(nums)):\n    for j in range(i+1, len(nums)):\n      if nums[j] < nums[i]:\n        nums[j], nums[i] = nums[i], nums[j]", "input": "", "output": "The code implements Bubble Sort, which is a type of comparison sorting algorithm. It works by repeatedly swapping adjacent elements if they are in the wrong order.", "category": "Python"}, {"instruction": "Construct a function that removes any non-alphanumeric characters from a string.", "input": "Hello world!", "output": "def remove_non_alphanumeric(string):\n    return ''.join(c for c in string if c.isalnum())\n\nremove_non_alphanumeric(\"Hello world!\")", "category": "Python"}, {"instruction": "Create a class in Python that contains the following methods:", "input": "", "output": "class Student:\n    def __init__(self, name, grade):\n        self.name = name\n        self.grade = grade\n\n    def getName(self):\n        return self.name\n\n    def getGrade(self):\n        return self.grade", "category": "Python"}, {"instruction": "Rotate a list of elements by a certain number of times.", "input": "[1, 2, 3, 4], 2", "output": "def rotate_array(arr, n): \n    \"\"\"\n    This function rotates a list of elements by a certain number of times\n    \"\"\"  \n    return arr[n:] + arr[:n]\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4]\n    n = 2\n    print(rotate_array(arr, n))", "category": "Python"}, {"instruction": "Create a function that takes 3 parameters and returns the maximum of them.", "input": "6, 7, 4", "output": "def find_max_of_three(a, b, c): \n    \"\"\"\n    This function finds the maximum of three numbers\n    \"\"\"  \n    return max(a, b, c)\n\nif __name__ == '__main__':\n    a = 6\n    b = 7\n    c = 4\n    print(find_max_of_three(a, b, c))", "category": "Python"}, {"instruction": "Create an array of prime numbers between 0 and 100 and print them out.", "input": "", "output": "Array = []\n\nfor num in range(2,101):\n    if all(num % i != 0 for i in range(2,num)):\n        Array.append(num)\n\nprint(Array)", "category": "Python"}, {"instruction": "Return the \"name\" field of the JSON object given below.", "input": "{\n\t\"name\": \"John Doe\",\n\t\"age\": 28,\n\t\"country\": \"United States\"\n}", "output": "import json\n\ninput_json = {\n        \"name\": \"John Doe\",\n        \"age\": 28,\n        \"country\": \"United States\"\n}\n\ndef get_name(json):\n    json_dict = json.loads(json)\n    name = json_dict['name']\n    return name\n\nif __name__ == '__main__':\n    print(get_name(input_json))", "category": "Python"}, {"instruction": "Generate code for printing a given 2D matrix in spiral order", "input": "matrix = [[1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9]]", "output": "def print_spiral(matrix):\n    # matrix is an 2D array \n    row_start = 0\n    row_end = len(matrix)-1\n    col_start = 0\n    col_end = len(matrix[0])-1\n\n    while row_start <= row_end and col_start <= col_end:\n        # print top row \n        for i in range(col_start, col_end+1):\n            print(matrix[row_start][i])\n        # increment row start \n        row_start += 1\n\n        # print right column\n        for i in range(row_start, row_end+1):\n            print(matrix[i][col_end])\n        # decrement col end\n        col_end -= 1\n        \n        # print bottom row\n        if row_start <= row_end:\n            for i in range(col_end, col_start-1, -1):\n                print(matrix[row_end][i])\n            # decrement row end\n            row_end -= 1\n\n        # print left column\n        if col_start <= col_end:\n            for i in range(row_end, row_start-1, -1):\n                print(matrix[i][col_start])\n            # increment col start\n            col_start += 1", "category": "Python"}, {"instruction": "Write a code to show the rating of a movie based on the review comments", "input": "rev_comments = [\"Great movie!\", \"The movie was average.\", \"Didn't enjoy it that much\"]", "output": "def rating(reviews):\n    score = 0\n    \n    positive = [\"great\", \"amazing\", \"funny\", \"entertaining\"]\n    negative = [\"bad\", \"mediocre\", \"average\", \"boring\"]\n    \n    for comment in reviews:\n        for word in positive:\n            if word in comment.lower():\n                score += 1\n        for word in negative:\n            if word in comment.lower():\n                score -= 1\n    \n    return score / len(reviews)", "category": "Python"}, {"instruction": "Generate code to print all unique 4 digit combos", "input": "", "output": "def unique_4_digit_combos():\n    # initialize a set to store the combinations \n    combos = set()\n    # loop through integers between 0000 and 9999\n    for i in range(10000):\n        # convert integer to string\n        digits = str(i).zfill(4)\n        # check if not repeated characters\n        if len(digits) == len(set(digits)):\n            # add to set \n            combos.add(digits)\n    # print the combinations \n    for c in combos:\n        print(c)", "category": "Python"}, {"instruction": "Answer the following question: What is the purpose of software testing?", "input": "", "output": "Software testing is the process of evaluating a software product in order to identify any potential issues and ensure that the end product meets the user's requirements. It is an essential part of the software development process, as it provides feedback about the product's quality and performance. Testing also helps ensure that a product is safe and secure, as it can detect potential problems and errors before the product is released.", "category": "Python"}, {"instruction": "Find the two adjacent elements in the array with the largest sum.", "input": "Array: [3, 6, 8, -10, 5]", "output": "def find_adjacent(arr):\n  max_sum = -1\n  for i in range(len(arr)-1):\n    if arr[i] + arr[i+1] > max_sum:\n      max_sum = arr[i] + arr[i+1]\n  return max_sum", "category": "Python"}, {"instruction": "Train a Machine Learning model using scikit-learn that can solve a binary classification problem.", "input": "Dataset - number of samples 1000, number of features 5, target label - binary", "output": "from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)\n\nlogreg = LogisticRegression(random_state=0).fit(X_train, y_train)", "category": "Python"}, {"instruction": "Parse the sentence and extract all the verbs from it.", "input": "Sentence: \"She ran quickly to catch the bus.\"", "output": "def extract_verbs(sentence):\n  verbs = []\n  words = sentence.split(\" \")\n  for w in words:\n    if w.endswith(\"ed\") or w.endswith(\"ing\"):\n      verbs.append(w)\n  return verbs", "category": "Python"}, {"instruction": "What do we mean by immutability in Python?", "input": "", "output": "Immutability in Python refers to the concept of objects that are unable to be modified. Immutable objects are specified when they are created and cannot be changed beyond that point. For example, tuples and strings are always immutable.", "category": "Python"}, {"instruction": "Convert a given JSON string to its Python dictionary equivalent.", "input": "json_string = '{\"name\":\"John\",\"age\":30}'", "output": "import json\npython_dict = json.loads(json_string)", "category": "Python"}, {"instruction": "Rewrite the following code to delete the elements from the list which are not even.", "input": "x = [1, 2, 3, 4, 5]", "output": "x = [i for i in x if i % 2 == 0]", "category": "Python"}, {"instruction": "Write a function to identify leap year.", "input": "", "output": "def isLeapYear(year): \n    if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0: \n        return True \n    else: \n        return False", "category": "Python"}, {"instruction": "Write a Python class to print the sum of an array elements", "input": "", "output": "class ArraySum: \n    def __init__(self, arr):\n        self.arr = arr\n\n    def sum(self):\n        total = 0\n        for i in self.arr:\n            total += i\n        return total", "category": "Python"}, {"instruction": "Write a Python program to create a random string of size 10 consisting of alphabets and digits.", "input": "", "output": "import random \n  \ndef randomString(stringLength=10): \n    lettersAndDigits = string.ascii_letters + string.digits \n    return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))", "category": "Python"}, {"instruction": "Generate a dictionary that contains all the words in a string of text, and the number of times each word occurs.", "input": "Text: \"I like dogs and cats and I like cats more than dogs\"", "output": "def create_dict(text):\n  text_list = text.split(' ')\n  count_dict = {}\n  for word in text_list:\n    count_dict[word] = count_dict.get(word, 0) + 1\n  return count_dict", "category": "Python"}, {"instruction": "Given a list of numbers, write a function that returns the sum without using the built-in 'sum()' function.", "input": "arr = [3, 4, 2, 5, 9]", "output": "def add_nums(arr):\n    total = 0\n    for x in arr:\n        total += x\n    return total", "category": "Python"}, {"instruction": "Create a function that takes an integer n as an argument and returns the sum of all numbers from 1 to n.", "input": "n = 10", "output": "def sum_to_n(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total", "category": "Python"}, {"instruction": "Suggest a way to find all the divisors of a number, n.", "input": "", "output": "We can find all the divisors of a number by using a for loop to iterate from 1 to n. For each number, we check if it is a divisor of n. If it is, then we add it to a list of divisors. At the end of the loop, we will have the list of all divisors of n.", "category": "Python"}, {"instruction": "Describe the purpose of the else statement in an if-else statement.", "input": "", "output": "The else statement in an if-else statement is used to execute a block of code when the expression in the if statement returns false. It provides an alternate option if the condition in the if statement is not satisfied. The else statement can be followed by an additional if-else statement in order to create an if-else-if ladder.", "category": "Python"}, {"instruction": "Generate a token based on the given parameters.", "input": "Parameters: Algorithm (SHA-256), Size (32 characters), Encode (Hexadecimal)", "output": "import hashlib\n\ndef generate_token(algorithm, size, encoding):\n\ttoken = hashlib.sha256(os.urandom(size//2)).hexdigest()[:size]\n\treturn token", "category": "Python"}, {"instruction": "Given a string s, create a function to find the character that appears the most and return its index.", "input": "s = \"Big Data\"", "output": "def most_freq_char(s):\n freq_dict = {}\n \n for char in s:\n if char in freq_dict:\n freq_dict[char] += 1\n else:\n freq_dict[char] = 1\n \n max_freq = 0\n max_char = \"\"\n \n for key in freq_dict:\n if max_freq < freq_dict[key]:\n max_freq = freq_dict[key]\n max_char = key\n \n return s.index(max_char)", "category": "Python"}, {"instruction": "Write a Python program to check if a list contains a specific item.", "input": "data = [3, 4, 5, 6, 7]", "output": "def contains_item(data, item):\n    return item in data", "category": "Python"}, {"instruction": "Write a Python function to split a list of items into groups of n.", "input": "list = [\"red\", \"green\", \"orange\", \"blue\", \"pink\", \"purple\"]", "output": "def split_list(data, n):\n    output = [data[i:i+n] for i in range(0, len(data), n)]\n    return output", "category": "Python"}, {"instruction": "Write a python program to replace the character \u2018e' with the character \u2018E' for strings of length more than 5", "input": "text = \"Hello world!\"", "output": "def replace_char(text):\n    if len(text) > 5:\n        return text.replace('e','E')\n    else:\n        return text", "category": "Python"}, {"instruction": "Modify the following code to print all words with more than 5 characters in a given string.", "input": "text = \"This is an example string\"", "output": "text = \"This is an example string\"\nwords = text.split() \nfor word in words: \n    if len(word) > 5: \n        print(word)", "category": "Python"}, {"instruction": "Modify the code to make it compatible with Python 3.", "input": "mylist = range(20)\n\nfor i in mylist:\n    print i", "output": "mylist = list(range(20))\n\nfor i in mylist: \n    print(i)", "category": "Python"}, {"instruction": "Find the max 2 numbers in a list of 5 numbers without using any comparison operator.", "input": "arr = [3, 10, 2, 5, 9]", "output": "def findMax2Numbers(arr): \n    max1 = 0\n    max2 = 0\n    \n    for i in range(len(arr)): \n        temp = arr[i] + max1 \n        max2 = max1 \n        if temp > max2: \n            max1 = temp \n        elif max2 > temp: \n            max1 = max2 \n    \n    return max1, max2", "category": "Python"}, {"instruction": "Create a new list object by selecting the names that start with a \u2018A\u2019 from the given list", "input": "[Alfred, John, Anthony, Paula]", "output": "Name_list = [name for name in input_list if name[0] == 'A']", "category": "Python"}, {"instruction": "Edit the following Python code to print out \u201cThe answer is X\u201d", "input": "print(\"X + 5 = 10\")", "output": "print(\"The answer is \" + str(10 - 5))", "category": "Python"}, {"instruction": "Create a rectangle using the turtle library in Python", "input": "", "output": "import turtle\nt = turtle.Turtle() \nt.forward(100) \nt.left(90) \nt.forward(50) \nt.left(90) \nt.forward(100) \nt.left(90) \nt.forward(50) \nt.left(90)", "category": "Python"}, {"instruction": "Given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digits. Add the two numbers and return the sum as a linked list.", "input": "", "output": "class Solution:\n    def addTwoNumbers(self, l1, l2):\n        # Initialize current, previous and \n        # next pointers \n        curr1 = l1\n        curr2 = l2\n        head = None\n        prev = None\n        \n        carry = 0\n        while curr1 != None or curr2 != None or carry != 0:\n            val1 = 0\n            if curr1 != None:\n                val1 = curr1.val\n                curr1 = curr1.next\n            \n            val2 = 0\n            if curr2 != None:\n                val2 = curr2.val\n                curr2 = curr2.next\n                \n            val = val1 + val2 + carry\n            carry = val // 10\n            temp = ListNode(val%10)\n\n            if prev == None:\n                head = temp\n            else:\n                prev.next = temp\n            \n            prev = temp\n\n        return head", "category": "Python"}, {"instruction": "You are given a string \"hello\". Write a function to print out all the possible subsets of that string.", "input": "", "output": "def generate_subsets(string):\n    if len(string) == 0:\n        return ['']\n    else:\n        results = list()\n        for s in generate_subsets(string[1:]):\n            results.append(s)\n            results.append(string[0] + s)\n        return results\n\nprint(generate_subsets('hello'))", "category": "Python"}, {"instruction": "Define a python function called ``string_length`` that can take a string as an argument and output the length of that string.", "input": "", "output": "def string_length(str):\n  return len(str)", "category": "Python"}, {"instruction": "Suggeste a completion of the following code:", "input": "def flatten(nested_list):", "output": "def flatten(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten(item))\n        else:\n            flat_list.append(item)\n    return flat_list", "category": "Python"}, {"instruction": "What should this function take as input and return?", "input": "def find_longest_word(words):", "output": "def find_longest_word(words):\n    '''This function takes a list of words as input and returns a string containing the longest word'''\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word", "category": "Python"}, {"instruction": "What should the following code print out?", "input": "def f(n):\n    if n == 0:\n        return 0\n    else:\n        return n + f(n-1)\n\nprint(f(5))", "output": "def f(n):\n    if n == 0:\n        return 0\n    else:\n        return n + f(n-1)\n\nprint(f(5)) # prints 15", "category": "Python"}, {"instruction": "What should the following function return?", "input": "def calculate_sd(numbers):", "output": "def calculate_sd(numbers):\n    mean = sum(numbers) / len(numbers)\n    variance = sum((x - mean) ** 2 for x in numbers) / len(numbers)\n    sd = variance ** 0.5\n    return sd", "category": "Python"}, {"instruction": "Edit this regression model to predict continuous values.", "input": "import numpy as np\n\ndef model(x):\n    return np.mean(x)", "output": "import numpy as np\n\ndef model(x):\n    return np.mean(x) + np.poly1d(np.polyfit(x, y, 2))(x)", "category": "Python"}, {"instruction": "Assign a random value to each item in a given list.", "input": "my_list = [1, 2, 3]", "output": "import random\n\ndef assign_random_value(my_list):\n    \"\"\"Assign a random value to each item in a given list.\"\"\"\n    # iterate through each item in the list\n    for i in range(len(my_list)):\n        # generate a random integer between 0 and 1\n        random_int = random.randint(0, 1)\n        # assign the random integer to the current item in the list\n        my_list[i] = random_int\n    return my_list", "category": "Python"}, {"instruction": "Calculate the maximum value in a dictionary.", "input": "d = {'a': 1, 'b': 3, 'c': 5}", "output": "def get_max_value(d):\n    \"\"\"Calculate the maximum value in a dictionary.\"\"\"\n    max_value = 0\n    for key in d:\n        if d[key] > max_value:\n            max_value = d[key]\n    return max_value", "category": "Python"}, {"instruction": "Write code to determine if a word is a palindrome or not.", "input": "word = \"noon\"", "output": "def palindrome_check(word):\n    \"\"\"Check if a given word is a palindrome.\"\"\"\n    # reverse the given word\n    reversed_word = word[::-1]\n    if word == reversed_word:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Compare two strings and return true if both strings have the same number of characters.", "input": "string1 = \"hello\"\nstring2 = \"world\"", "output": "def compare_strings(string1, string2):\n    \"\"\"Compare two strings and return True if both strings have the same number of characters.\"\"\"\n    if len(string1) == len(string2):\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Compare two strings and count the number of characters that are different.", "input": "str1 = 'hello'\nstr2 = 'hallo'", "output": "def countTextDifference(str1, str2):  \n    # store length of both strings  \n    len1 = len(str1)   \n    len2 = len(str2)   \n  \n    # store the number of characters  \n    # which are different  \n    count = 0 \n  \n    # compare and count the number  \n    # of characters which are different \n    for i in range(0, len1):      \n        if (i >= len2): \n            count += (len1 - len2) \n            break\n        if (str1[i] == str2[i]):  \n            continue\n        else:      \n            count += 1\n    \n    # return different character count \n    return count", "category": "Python"}, {"instruction": "Write a code to print out a two-dimensional array.", "input": "A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "for row in A:\n    for elem in row:\n        print(elem, end=' ')\n    print()", "category": "Python"}, {"instruction": "Write a function for removing duplicates from a given list", "input": "list = [1, 2, 3, 3, 4, 2]", "output": "def removeDuplicates(list):\n    # create a new set with unique elements from list\n    unique_set = set(list)\n    # convert set back to list\n    unique_list = list(unique_set) \n    return unique_list", "category": "Python"}, {"instruction": "Create a function that takes a string and checks if it's a valid email or not.", "input": "string = 'example[at]gmail.com'", "output": "import re\n\ndef isValidEmail(string):\n    # regex to check for valid email address\n    regex = '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n    if(re.search(regex,string)):  \n        return True  \n    else:  \n        return False", "category": "Python"}, {"instruction": "Implement a function for searching an item in the given list.", "input": "list = [1, 4, 5, 6, 8, 9]\nitem = 5", "output": "def search(list, item):\n    for i in range(len(list)):\n        if list[i] == item:\n            return True\n    return False", "category": "Python"}, {"instruction": "Write a computer program to print all primes in an inputted range.", "input": "", "output": "def print_primes(start, end):\n    for num in range(start, end + 1):\n        # all prime numbers are greater than 1\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                print(num)", "category": "Python"}, {"instruction": "Make a matrix multiplication program that takes an arbitrary number of matrices as input.", "input": "", "output": "def matrix_multiplication(*matrices):\n    res = [[0 for _ in range(len(matrices[0][0]))]\n        for _ in range(len(matrices[0]))]\n    for y in range(len(matrices[0])):\n        for x in range(len(matrices[0][0])):\n            for m in range(len(matrices)):\n                res[y][x] += matrices[m][y][x]\n    return res", "category": "Python"}, {"instruction": "Given a positive integer number, generate the Fibonacci series.", "input": "", "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)", "category": "Python"}, {"instruction": "Summarize the article 'X' in one or two paragraphs.", "input": "Article 'X':\n\nThis article is about the history of the city of Rome. Rome was founded in 753 BCE by two brothers, Romulus and Remus. Since then, Rome has been a powerful city that has played a huge role in the formation of Western civilization. The Roman Republic was established in 509 BCE, and the Roman Empire followed in 27 BCE. During its long reign, Rome expanded its borders and implemented various laws and policies that shaped the legal systems of many countries.", "output": "Rome is one of the oldest cities in the world, having been founded in 753 BCE by Romulus and Remus. Following its founding, Rome quickly developed into a powerful city-state, establishing the Roman Republic in 509 BCE and the Roman Empire in 27 BCE. During its reign, Rome significantly expanded its reach and instituted laws and policies that influenced much of Western civilization. It eventually fell in 476 CE, yet its legacy continues to impact many countries today.", "category": "Python"}, {"instruction": "Create a pandas dataframe containing the following columns and their respective values:", "input": "A, B, C\nA= 12, 15, 20\nB= 30, 25, 35\nC= 40, 45, 50", "output": "df = pd.DataFrame({\"A\": [12,15,20], \n                    \"B\": [30,25,35], \n                    \"C\": [40,45,50]})", "category": "Python"}, {"instruction": "Create a algorithm to calculate the fibonacci number of nth term.", "input": "", "output": "def fib(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2,n):\n            c = a + b\n            a = b\n            b = c\n        return b", "category": "Python"}, {"instruction": "Create a function to calculate the total cost of the items in a cart.", "input": "items = [{\"item\":\"apple\", \"cost\":3.00}, {\"item\":\"orange\", \"cost\":2.50}]", "output": "def total_cost(items):\n    total = 0\n    for item in items:\n        total += item['cost']\n    return total", "category": "Python"}, {"instruction": "Create a Python variable a with value 5.", "input": "", "output": "a = 5", "category": "Python"}, {"instruction": "Given a variable arr containing integers, write python code to remove all duplicate elements from the array and return the new array.", "input": "arr = [1, 2, 2, 3, 4, 4, 4, 5, 6, 6]", "output": "arr = list(set(arr)) # [1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Construct an algorithm that checks if the given sequence is an arithmetic sequence.", "input": "", "output": "def is_arithmetic_sequence(sequence):\n    is_arithmetic = True\n    diff = 0\n    for i in range(1, len(sequence)):\n        if i ==1:\n            diff = sequence[i]-sequence[i-1]\n        else:\n            new_diff = sequence[i]-sequence[i-1]\n            if new_diff != diff:\n                is_arithmetic = False\n                break\n    return is_arithmetic", "category": "Python"}, {"instruction": "Create a class that can be used to filter a given list of numbers using a given condition.", "input": "nums = [3,6,7,2,1,12,14]\ncondition = lambda x: x>5", "output": "class FilterList:\n    def __init__(self, nums, condition):\n        self.nums = nums\n        self.condition = condition\n       \n    def __iter__(self):\n        for num in self.nums:\n            if self.condition(num):\n                yield num", "category": "Python"}, {"instruction": "Find the nth Fibonacci number in a given range.", "input": "", "output": "def get_nth_fibonacci_number(n):\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return get_nth_fibonacci_number(n-1)+get_nth_fibonacci_number(n-2)", "category": "Python"}, {"instruction": "For each tuple in a given list, write a function to get the first element.", "input": "[(1,2), (3,4), (5,6)]", "output": "def get_first_element(tuples):\n  return [t[0] for t in tuples]", "category": "Python"}, {"instruction": "Write a function to compute the maximum depth of binary tree from a given list of numbers.", "input": "nums = [3,9,20,None,None,15,7]", "output": "def get_max_depth(nums):\n    max_depth = 0\n    curr_depth = 0\n    for n in nums:\n        if n is None:\n            max_depth = max(max_depth, curr_depth)\n            curr_depth -= 1\n        else:\n            curr_depth += 1\n    return max_depth", "category": "Python"}, {"instruction": "Find all prime numbers up to a given number.", "input": "", "output": "def list_primes(n): \n    primes = [] \n    for num in range(2, n+1): \n        prime=True\n        for i in range(2, int(num/2)+1):\n            if num%i == 0:\n                prime=False\n        if prime:\n            primes.append(num)\n    return primes", "category": "Python"}, {"instruction": "Write a logic to obtain boolean output from a given comparison.", "input": "", "output": "def compare(a, b):\n    if a < b:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Suggest an enhancement to the following code to support unicode strings.", "input": "def replace_char(string, char_old, char_new):\n    for i in range(len(string)):\n       if string[i] == char_old:\n            string[i] = char_new\n    return string", "output": "def replace_char(string, char_old, char_new):\n    new_string = ''\n    for char in string:\n        if char == char_old:\n            new_string = new_string + char_new\n        else:\n            new_string = new_string + char\n    return new_string", "category": "Python"}, {"instruction": "Modify the given code to handle errors in the following Python script.", "input": "num = int(input('Enter a number'))\nprint(num * 5)", "output": "try:\n    num = int(input('Enter a number'))\n    print(num * 5)\nexcept Exception as e:\n    print(\"Error: {}\".format(e))", "category": "Python"}, {"instruction": "Create a header comment for the following python script.", "input": "def add(x, y):\n    return x + y", "output": "\"\"\"\nThis python script contains a function which takes in two arguments and \nreturns the sum of the two arguments.\n\"\"\"\n\ndef add(x, y):\n    return x + y", "category": "Python"}, {"instruction": "Create a function that takes a string representation of a JSON object and converts it into a Python dictionary.", "input": "", "output": "def json_to_dict(json_str):\n    return json.loads(json_str)", "category": "Python"}, {"instruction": "Design an algorithm that calculates the sum of all numbers in a given array.", "input": "[2, 4, 7, 10]", "output": "def array_sum(arr): \n    total = 0\n    # Iterate through arr and add elements to total  \n    for i in range (0, len(arr)): \n        total += arr[i] \n    return total \n  \n# Driver code \narr = [2, 4, 7, 10] \nsum = array_sum(arr) \nprint (sum) # -> 23", "category": "Python"}, {"instruction": "Design an algorithm that determines the greatest common multiple of two numbers.", "input": "", "output": "def gcm(x, y): \n    if(x > y): \n        gcm = x \n    else: \n        gcm = y \n  \n    while(True): \n        if((gcm % x == 0) and (gcm % y == 0)): \n            return gcm \n        gcm = gcm + 1\n  \n# Driver Program \nx = 12\ny = 18\nprint(gcm(x, y))", "category": "Python"}, {"instruction": "Transform the following string in Python into a dictionary whose keys are the names of the colors and the values are the hex codes for the colors.", "input": "\"red #FF0000, blue #0000FF, green #00FF00\"", "output": "colors = 'red #FF0000, blue #0000FF, green #00FF00'\n\ndict_colors = {i.split()[0]:i.split()[1] for i in colors.split(', ')} # returns {'red': '#FF0000', 'blue': '#0000FF', 'green': '#00FF00'}", "category": "Python"}, {"instruction": "Transform the following array into a string of comma-separated values in Python.", "input": "[1, 2, 3, 4]", "output": "','.join([str(i) for i in [1, 2, 3, 4]]) # returns \"1,2,3,4\"", "category": "Python"}, {"instruction": "How can we sort an array of numbers in ascending order in Python?", "input": "", "output": "sorted_numbers = sorted(numbers)  # returns a sorted list of numbers in ascending order.", "category": "Python"}, {"instruction": "Create a data visualization of the following data set with the target variable as red and the predictor variables as blue.", "input": "data = [[1, 2, 1, 0],\n        [2, 4, 0, 1],\n        [2, 3, 0, 1],\n        [3, 6, 1, 0]]", "output": "import matplotlib.pyplot as plt \n\nx_1 = [1, 2, 2, 3]\nx_2 = [2, 4, 3, 6]\n\ntarget = [1, 0, 1, 0]\n\nfor i in range(len(x_1)):\n    c = 'r' if target[i] == 1 else 'b'\n    plt.scatter(x_1[i], x_2[i], marker='o', c=c) \n\nplt.title(\"Data Visualization\") \nplt.xlabel(\"x_1\") \nplt.ylabel(\"x_2\") \n  \nplt.show()", "category": "Python"}, {"instruction": "Describe a classification problem in machine learning.", "input": "", "output": "In machine learning, classification is the process of predicting a class label for an input sample. A class label is a discrete value that describes a group or category that an input belongs to. The input may have multiple features, also known as attributes or predictors, that can be used in the prediction process. A classification algorithm takes these features as input and assigns a label to the given input sample. Examples of classification problems include image recognition, medical diagnosis, language processing, and fraud detection.", "category": "Python"}, {"instruction": "Create a list of strings in Python with 4 elements.", "input": "", "output": "mylist = ['Hello', 'World', 'This', 'Is']", "category": "Python"}, {"instruction": "Construct a program to find the index of a given element in a sorted array with binary search.", "input": "list = [-1, 0, 2, 3, 9, 10]\ntarget = 3", "output": "def binarySearch(arr, target):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end)//2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            end = mid - 1\n        else:\n            start = mid + 1 \n    return -1\n\nindex = binarySearch([-1, 0, 2, 3, 9, 10], 3)", "category": "Python"}, {"instruction": "Rewrite the following recursive function such that it runs in iterative manner.", "input": "def f(n):\n    if n <= 1:\n        return n\n    else:\n        return f(n-1) + f(n-2)", "output": "def f(n):\n    if n <= 1:\n        return n\n    else: \n        a, b = 1, 1\n        for _ in range(n-1):\n            a, b = b, a+b\n        return b", "category": "Python"}, {"instruction": "Deploy a model server on AWS Lambda to serve a machine learning model.", "input": "", "output": "import json\nimport os\nimport boto3\nimport numpy as np\nimport io\nfrom PIL import Image\nimport tensorflow as tf\nfrom tensorflow.keras.models import load_model\n\n\nmodel_path = os.environ['MODEL_PATH']\nmodel_class_name = os.environ['MODEL_CLASS_NAME']\nmodel = load_model(model_path)\n\ndef model_predict(event, context):\n    body = json.loads(event['body'])\n    img_data = body['img_data']\n    img_bytes = base64.b64decode(img_data)\n    pil_img = Image.open(io.BytesIO(img_bytes))\n\n    # compress the image\n    img_raw = pil_img.resize((224, 224))\n\n    # convert image to array\n    input_img = np.expand_dims(np.array(img_raw), axis=0)\n\n    # predict\n    results = model.predict(input_img)\n    res = {\n        'statusCode': 200,\n        'body': json.dumps(results.tolist())\n    }\n\n    return res", "category": "Python"}, {"instruction": "Create a Python script that sets the value of a variable from the command-line.", "input": "", "output": "import sys\n\n# Set a variable\nvariableName = sys.argv[1]\n\n# Get a value from command line argument\nvalue = sys.argv[2]\n\n# Set the value of the variable\nexec(variableName + \"=\" + value)\n\nprint(variableName)", "category": "Python"}, {"instruction": "Create a program that takes a number n and prints the pattern given below.", "input": "n = 3", "output": "for i in range(n):\n    for j in range(i+1):\n        print('*', end=\" \")\n    print()", "category": "Python"}, {"instruction": "Alter the following program such that it returns the complement of the given list.", "input": "def get_complement(lst):\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(1 - lst[i])\n    return new_lst", "output": "def get_complement(lst):\n    return [1 - item for item in lst]", "category": "Python"}, {"instruction": "Implement a quicksort algorithm in Python to sort a list of 6 integers [52,85,23,6,37,77].", "input": "[52,85,23,6,37,77]", "output": "def quicksort(nums):\n    if len(nums) <= 1:\n        return nums\n    else:\n        pivot = nums[0]\n        less = [i for i in nums[1:] if i <= pivot]\n        greater = [i for i in nums[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n\nprint(quicksort([52,85,23,6,37,77]))", "category": "Python"}, {"instruction": "Write an algorithm to generate a random string of length n.", "input": "8", "output": "import random \n\ndef randomString(n): \n    # Choose a character set\n    charSet = \"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    # Generate a string of length n\n    myString = \"\" \n    for i in range(n):  \n        myString += random.choice(charSet)  \n    return myString", "category": "Python"}, {"instruction": "Develop a DFS algorithm in Python.", "input": "", "output": "def dfs(graph, start, end):\n    # create a visited array\n    visited = [False] * len(graph)\n\n    # create a stack\n    stack = []\n\n    # mark the starting node as visited and push it in the stack\n    stack.append(start)\n\n    while stack:\n        # get the current node\n        node = stack.pop()\n\n        # if the node hasn't been visited\n        if not visited[node]:\n            # mark the node as visited\n            visited[node] = True\n\n            # check for the end node\n            if node == end:\n                return True\n\n            # append the neighbors of the node to the stack\n            neighbors = graph[node]\n            for neighbor in neighbors:\n                stack.append(neighbor)\n\n    # end node not found\n    return False", "category": "Python"}, {"instruction": "Construct an algorithm for reversing a string.", "input": "", "output": "def reverse_string(s):\n    # Initialize empty string\n    rev_string = \"\"\n    # Traverse over each letter in the string in reverse order\n    for letter in s[::-1]:\n        # Append the current letter to the end of rev_string\n        rev_string = rev_string + letter\n    # Return the reversed string\n    return rev_string", "category": "Python"}, {"instruction": "Create a data structure for a streaming interface that holds a maximum of 5 numbers.", "input": "", "output": "class Stream:\n    def __init__(self):\n        self.stream = [None, None, None, None, None]\n\n    # This function adds a number to the start (index 0) of the stream and then shifts the other elements to the right\n    def add(self, num):\n        for i in reversed(range(1, len(self.stream))):\n            self.stream[i] = self.stream[i-1]\n\n        self.stream[0] = num\n\n    # This function returns a list of the current elements from the stream\n    def list(self):\n        return self.stream", "category": "Python"}, {"instruction": "Construct an if-else statement to print \"Good Evening\" if the time is past 5pm and print \"Good Morning\" otherwise.", "input": "", "output": "import time\n\nt = time.localtime()\n\nif t.tm_hour >= 17: \n    print(\"Good Evening!\")\nelse: \n    print(\"Good Morning!\")", "category": "Python"}, {"instruction": "Given an integer 'base' and an integer 'exponent', write a function to calculate the result of 'base' raised to the power of 'exponent'.", "input": "base: 2 \nexponent: 3", "output": "def power(base, exponent):\n    result = 1\n    for _ in range(exponent):\n        result *= base\n    return result", "category": "Python"}, {"instruction": "Create a list in Python called \"my_list\" and populate it with five integers ranging from 0 to 5.", "input": "", "output": "my_list = [0, 1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Create a Numpy array with 3 columns and 4 rows and assign it to the variable \"my_array\".", "input": "", "output": "my_array = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])", "category": "Python"}, {"instruction": "Evaluate a mathematical expression given as a string.", "input": "expression = \"2 + 3 * 5\"", "output": "import math\n\ndef evaluate_expression(expression):\n    '''Returns the evaluation of a given mathematical expression.'''\n    return eval(expression)\n\n# example\nprint(evaluate_expression(\"2 + 3 * 5\")) # output: 17", "category": "Python"}, {"instruction": "Define a class for a student.", "input": "", "output": "class Student:\n    '''Creates a class object to represent a student.'''\n \n    def __init__(self, name, age, grade):\n        '''Initiate the class with name, age, and grade.'''\n        self.name = name\n        self.age = age\n        self.grade = grade\n \n    def get_name(self): \n        '''Return the student name.'''\n        return self.name\n \n    def get_age(self): \n        '''Return the student age.'''\n        return self.age\n \n    def get_grade(self): \n        '''Return the student grade.'''\n        return self.grade", "category": "Python"}, {"instruction": "Compare two strings and remove all letters from the first string which are present in the second string and vice versa.", "input": "string1 = \"Hello World!\"\nstring2 = \"Bye World!\"", "output": "def compare_and_remove_letters(string1, string2):\n    result = \"\"\n    for i in string1:\n        if i not in string2:\n            result += i\n    for i in string2:\n        if i not in string1:\n            result += i\n    return result\n\n# example\nprint(compare_and_remove_letters(\"Hello World!\", \"Bye World!\")) # output: Byelo!", "category": "Python"}, {"instruction": "What are the benefits of Polymorphism in Object-Oriented Programming?", "input": "", "output": "Polymorphism in Object-Oriented Programming (OOP) allows for objects of different types to share the same interface and behave differently according to their type. This allows a more flexible and efficient codebase, as it eliminates the need to write code specifically for each object type. It also improves the reusability of the code, as a single function can be used to manipulate many different types of objects. Polymorphism also improves readability, as it allows for generic functions and methods to be used without having to know the exact type of the input.", "category": "Python"}, {"instruction": "Given the following code in Python, identify the mistake and fix it.", "input": "name = input(\"What is your name? \"", "output": "name = input(\"What is your name? \") # Missing closing quotation mark", "category": "Python"}, {"instruction": "Name three principles of Object-Oriented Programming.", "input": "", "output": "The three principles of Object-Oriented Programming (OOP) are encapsulation, abstraction, and inheritance. Encapsulation is the process of combining together data and functions in a single unit, such as a class. Abstraction is the process of organizing and simplifying complex data by hiding unnecessary details from the user. Inheritance is the process of establishing a parent-child relationship between two classes and allowing the child class to acquire the properties and behaviors of the parent class.", "category": "Python"}, {"instruction": "Using python, limit the number of characters printed in the following statement to only 10:", "input": "statement = \"Hello, World!\"", "output": "statement = \"Hello, World!\"\n\nprint(statement[:10])", "category": "Python"}, {"instruction": "Modify the following python program to return the sum of even numbers from the input list.", "input": "def sum_list(input):\n    sum = 0\n    for num in input:\n        sum += num\n    return sum", "output": "def sum_list(input):\n    sum = 0\n    for num in input:\n        if num % 2 == 0:\n            sum += num\n    return sum", "category": "Python"}, {"instruction": "Write a script in Python to remove the characters from the given string which are not in the alphabet.", "input": "string=\"!!He##ll%o W..or##ld!!\"", "output": "new_string = \"\"\nfor char in string:\n    if char.isalpha():\n        new_string += char\n\nprint (new_string)", "category": "Python"}, {"instruction": "Modify the Python code so that it can be used to find the GCD of 3 numbers.", "input": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n\n    return a", "output": "def gcd(a, b, c): \n    if(b==0 and c==0): \n        return a \n    if(c==0): \n        return gcd(b, a % b) \n    return gcd(gcd(a, b), c)", "category": "Python"}, {"instruction": "Write a function to convert a given integer number toRoman numerals.", "input": "", "output": "def intToRoman(num): \n  \n    val = [ \n            1000, 900, 500, 400, \n            100, 90, 50, 40, \n            10, 9, 5, 4, \n            1 \n            ] \n    rom_num = [ \n                \"M\", \"CM\", \"D\", \"CD\", \n                \"C\", \"XC\", \"L\", \"XL\", \n                \"X\", \"IX\", \"V\", \"IV\", \n                \"I\"\n                ] \n  \n    res = \"\" \n    i = 0\n    while num > 0: \n  \n        # Find the greatest value smaller \n        # than the given number num \n        div = num // val[i] \n  \n        # Update the number after each \n        # iteration \n        num = num % val[i] \n  \n        # Concatenate the roman characters \n        # equal to the power value of div \n        while div > 0: \n            res = res + rom_num[i] \n            div = div - 1\n        \n        i = i + 1\n  \n    return res \n  \n# Driver code \nnum = 12\nprint(intToRoman(num))", "category": "Python"}, {"instruction": "Suggest a way of converting the following JSON object into CSV format.", "input": "data = {\n    \"Name\": \"John Doe\",\n    \"Age\": \"50\",\n    \"Gender\": \"Male\"\n}", "output": "import csv \n\ndef json_to_csv(data):\n    csv_data = [list(data.values())]\n    with open('data.csv', 'w') as f:\n        writer = csv.writer(f)\n        writer.writerows(csv_data)\n    \njson_to_csv(data)", "category": "Python"}, {"instruction": "Find an example of a sorting algorithm in Python.", "input": "", "output": "Example of a sorting algorithm in Python:\n\ndef selection_sort(arr):\n    for i in range(len(arr)):\n        # Find the minimum element in remaining\n        # unsorted array\n        min_idx = i\n        for j in range(i + 1, len(arr)):\n            if arr[min_idx] > arr[j]:\n                min_idx = j\n \n        # Swap the found minimum element with\n        # the first element\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]", "category": "Python"}, {"instruction": "Write a function to return the count of all prime numbers from 1 to n (inclusive).", "input": "", "output": "def count_primes(n):\n  count = 0\n  for i in range(2, n+1):\n    is_prime = True\n    for j in range(2, i):\n      if i % j == 0:\n        is_prime = False\n        break\n    if is_prime:\n      count += 1\n  return count", "category": "Python"}, {"instruction": "Write a function to search in a 1D array of integers, and return the index of the target if it is present.", "input": "arr = [1, 4, 5, 6, 7, 9, 3, 2]\ntarget = 8", "output": "def linear_search(arr, target):\n  for i in range(len(arr)):\n    if arr[i] == target:\n      return i\n  return -1 # target not found", "category": "Python"}, {"instruction": "Construct an algorithm to check if two strings have the same characters and same frequency of characters.", "input": "String A: hello \nString B: ollhe", "output": "def is_anagram(str1, str2):\n    char_map1 = {}\n    char_map2 = {}\n\n    for char in str1:\n        if char in char_map1:\n            char_map1[char] += 1\n        else:\n            char_map1[char] = 1\n    \n    for char in str2:\n        if char in char_map2:\n            char_map2[char] += 1\n        else:\n            char_map2[char] = 1\n    \n    return char_map1 == char_map2", "category": "Python"}, {"instruction": "Generate a ternary tree data structure in Python.", "input": "", "output": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.center = None\n        self.right = None", "category": "Python"}, {"instruction": "How would you create a for-loop in Python to iterate through all the integers from 1 to 10?", "input": "", "output": "for i in range(1,11):\n  print(i)", "category": "Python"}, {"instruction": "Write an expression to check if a given number is a perfect square", "input": "num = 16", "output": "# Write an expression to check if a given number is a perfect square\n\nimport math\n\ndef is_perfect_square(num):\n    return math.sqrt(num).is_integer()\n    \n# Check the given number\nprint(is_perfect_square(16)) # Output: True", "category": "Python"}, {"instruction": "How would you merge two sorted linked lists into one?", "input": "", "output": "def mergeLists(l1, l2): \n    dummy = curr = ListNode(0)  \n    while l1 and l2: \n        if l1.val < l2.val: \n            curr.next = l1 \n            l1 = l1.next\n        else: \n            curr.next = l2 \n            l2 = l2.next\n        curr = curr.next\n    curr.next = l1 or l2\n    return dummy.next", "category": "Python"}, {"instruction": "Write a regular expression in Python to find all words that start with \"A\".", "input": "", "output": "import re\n\nwords = re.findall(r'\\bA\\w+', text)", "category": "Python"}, {"instruction": "Implement a binary search algorithm in Python for searching for a specific element in a given list of numbers.", "input": "list = [1, 3, 5, 7, 9, 11 ] and target number =7", "output": "def binary_search(lst, target):\n\n    \"\"\"\n    Implements a binary search algorithm \n    in Python for searching for a specific \n    element in the given list of numbers.\n    \"\"\"\n    low = 0\n    high = len(lst)-1\n\n    while low <= high:\n        mid = (low + high)//2\n        if lst[mid] == target:\n            return mid\n\n        elif lst[mid] < target:\n            low = mid + 1\n\n        else:\n            high = mid - 1\n\n    return -1", "category": "Python"}, {"instruction": "Given a list of integers and a target sum, write a function that returns a pair of said integers that add up to the target sum.", "input": "list = [3, 9, -4, 0, -7, 8] and target sum = -4", "output": "def find_pair(lst, target_sum):\n    \"\"\"\n    Given a list of integers and a target sum, \n    this function returns a pair of said integers \n    that add up to the target sum.\n    \"\"\"\n    seen = set()\n    for num in lst:\n        inverse = target_sum - num\n        if inverse in seen:\n            return (num, inverse)\n        seen.add(num)", "category": "Python"}, {"instruction": "Create a class in Python that can be used to store the details of a student.", "input": "", "output": "class Student:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n    \n    def set_details(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n    \n    def get_details(self):\n        return f'Name: {self.name}, Age: {self.age}, Gender: {self.gender}'", "category": "Python"}, {"instruction": "Write a Python function to analyze the performance of different sorting algorithms.", "input": "List = [6, 8, 0, 1, 4, 5, 7, 3, 2, 9]", "output": "def analyze_sorting_performance(list):\n    \"\"\"\n    Analyze the performance of different sorting algorithms \n    on the given list. \n    \"\"\"\n    insertion_sort_list = list.copy()\n    insertion_sort(insertion_sort_list)\n    bubble_sort_list = list.copy()\n    bubble_sort(bubble_sort_list)\n    merge_sort_list = list.copy()\n    merge_sort(merge_sort_list)\n    quick_sort_list = list.copy()\n    quick_sort(quick_sort_list)\n    \n    print(\"Insertion Sort: {}\".format(insertion_sort_list))\n    print(\"Bubble Sort: {}\".format(bubble_sort_list))\n    print(\"Merge Sort: {}\".format(merge_sort_list))\n    print(\"Quick Sort: {}\".format(quick_sort_list))", "category": "Python"}, {"instruction": "Modify the following Python program to contain an input.", "input": "num1 = 10\nnum2 = 20\nsum = num1 + num2\n\nprint(\"The sum of two numbers is\",sum)", "output": "num1 = int(input(\"Enter the first number: \"))\nnum2 = int(input(\"Enter the second number: \"))\nsum = num1 + num2\n\nprint(\"The sum of the two numbers is\", sum)", "category": "Python"}, {"instruction": "Generate a correct Python code for a data structure which supports the following operations -", "input": "insert(key, value)\nget(key)\ndelete(key)", "output": "class Map(object):\n    \n    def __init__(self): \n        # a dictionary-based data structure \n        # to store (key, value) pairs \n        self.data = {} \n  \n    # insert the given value with the given key \n    def insert(self, key, value): \n        self.data[key] = value     \n  \n    # get the value for the given key \n    def get(self, key): \n        return self.data[key] \n  \n    # delete the datapoint with the given key \n    def delete(self, key): \n        self.data.pop(key)", "category": "Python"}, {"instruction": "Extract the domain names from the given list of URLs", "input": "url_list = [ \"www.abcd.com\", \"www.something.co.in\", \"www.example.ng\" ]", "output": "def extract_domain(url_list): \n    domains = list() \n    for url in url_list: \n        url_parts = url.split('.')\n        domains.append(url_parts[-2]+'.'+url_parts[-1]) \n    return domains\n\ndomain_list = extract_domain(url_list)", "category": "Python"}, {"instruction": "Sort a list of integers using quicksort", "input": "list = [4,2,1,5,3]", "output": "def quicksort(arr): \n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\n\nsorted_list = quicksort(list)", "category": "Python"}, {"instruction": "How to remove the last character of a string in Python?", "input": "word = \"Hello\"", "output": "word = word[:len(word)-1]", "category": "Python"}, {"instruction": "How to decode a Base64 string to its corresponding string representation in Python?", "input": "base64_string = \"SGVsbG8gV29ybGQ=\"", "output": "import base64\nstring = base64.b64decode(base64_string).decode(\"utf-8\")", "category": "Python"}, {"instruction": "Design a pipeline in Scikit-learn to preprocess a given dataset.", "input": "", "output": "from sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\n\npipeline = Pipeline(steps=[\n    ('scaler', StandardScaler()),\n    ('pca', PCA())\n])", "category": "Python"}, {"instruction": "Create a switch-case statement for a shopping cart to print out the items and their prices.", "input": "Item1: $25.00\nItem2: $13.50\nItem3: $3.99", "output": "def items_and_prices(item1, item2, item3):\n    switch = {\n    'item1': item1,\n    'item2': item2,\n    'item3': item3\n    }\n    for key, value in switch.items():\n        print(key + \": \" + str(value))\n\nitems_and_prices(25.00, 13.50, 3.99)", "category": "Python"}, {"instruction": "Write a function to calculate median of array elements", "input": "", "output": "def get_median(arr):\n    sorted_arr = sorted(arr)\n    length = len(sorted_arr)\n    if length % 2 == 0:\n        median1 = sorted_arr[int(length/2) - 1]\n        median2 = sorted_arr[int(length/2)]\n        median = (median1 + median2) / 2\n    else:\n        median = sorted_arr[int((length-1)/2)]\n    return median", "category": "Python"}, {"instruction": "Write a Python program that prints out the magnitude of the three-dimensional vector with the following components: (x, y, z).", "input": "(1, 2, 3)", "output": "import math\n\ndef magnitude(x, y, z):\n    return math.sqrt(x * x + y * y + z * z)\n\nprint(magnitude(1, 2, 3))", "category": "Python"}, {"instruction": "Generate a while loop in python to find out the sum of first 5 even numbers.", "input": "", "output": "i = 2\nsum = 0\n\nwhile i < 10:\n    sum += i\n    i += 2\n\nprint(\"The sum of first 5 even numbers is: \", sum)", "category": "Python"}, {"instruction": "Design a user interface for a book library application.", "input": "", "output": "The user interface should include a search bar to search for books, a list of books with details such as title, author, year published, and a button to select a book and checkout. Additionally, it should include a navigation header with various sections such as 'My Books', 'Favorites', 'Recommendations' and 'Account Settings'.", "category": "Python"}, {"instruction": "Given a list of strings, write a program to return a new list of all strings which have length greater than 4 in Python.", "input": "lst = ['cat', 'dog', 'apple', 'banana']", "output": "new_lst = [x for x in lst if len(x) > 4] # ['apple', 'banana']", "category": "Python"}, {"instruction": "Count the number of occurrences of a given string in another string in Python.", "input": "string1 = 'A quick brown fox jumps over the lazy dog.'\nstring2 = 'dog'", "output": "string1.count(string2) # 1", "category": "Python"}, {"instruction": "Write an algorithm to find the missing number in an array of n consecutive integers in Python.", "input": "arr = [1, 2, 3, 5, 6, 7, 8]", "output": "def find_missing_num(arr):\n    missing = 0\n    for i in range(arr[0], arr[-1] + 1):\n        if i not in arr:\n            missing = i\n    return missing  # 4", "category": "Python"}, {"instruction": "Create a dictionary in Python whose keys are the integers from 1 to 10 and whose values are the squares of the keys.", "input": "", "output": "d = {i: i*i for i in range(1, 11)} # {1:1, 2:4, etc.}", "category": "Python"}, {"instruction": "In Python, how could you print a list from the last element to the first element?", "input": "", "output": "for element in reversed(my_list):\n    print(element)", "category": "Python"}, {"instruction": "Construct a Python class to save details of student.", "input": "", "output": "class Student():\n    def __init__(self, name, age, year):\n        self.name = name\n        self.age = age\n        self.year = year\n  \n    def get_name(self):\n        return self.name\n  \n    def get_age(self):\n        return self.age\n  \n    def get_year(self):\n        return self.year", "category": "Python"}, {"instruction": "Develop a function in Python to filter out all negative numbers in a given list.", "input": "[2, 3, -1, 4, -5, 6]", "output": "def filter_negative_numbers(nums):\n    # return only positive numbers\n    return [num for num in nums if num >= 0]\n\nprint(filter_negative_numbers([2, 3, -1, 4, -5, 6]))", "category": "Python"}, {"instruction": "Change the following code to use the ternary operator.", "input": "def compare_num(a, b):\n    if a < b:\n        return -1\n    elif a == b:\n        return 0\n    else:\n        return 1", "output": "def compare_num(a, b):\n    return -1 if a < b else 0 if a == b else 1", "category": "Python"}, {"instruction": "Describe a sorting algorithm that works by putting an algorithm that works by putting elements in the right place.", "input": "", "output": "Insertion sort is an in-place comparison sort algorithm that works by iterating through the input array, removing one element at a time and inserting it in the correct position in the sorted array. It is a comparison-based algorithm that blocks an element from its position until it finds the correct location for it in the sorted array by comparing with adjacent element and shifting it until the correct position is found.", "category": "Python"}, {"instruction": "Recreate this nested for loop in a single line of code.", "input": "Final_list = []\nfor i in range(10):\n    for j in range(10):\n        Final_list.append(i+j)", "output": "Final_list = [i+j for i in range(10) for j in range(10)]", "category": "Python"}, {"instruction": "Create a class in python to store a collection of words and their frequency count.", "input": "", "output": "class FreqCollection(object):\n\n    def __init__(self):\n        self.words = {}\n\n    def add_word(self, word):\n        if word in self.words:\n            self.words[word] += 1\n        else:\n            self.words[word] = 1\n\n    def get_word_freq(self, word):\n        if word in self.words:\n            return self.words[word]\n        return 0", "category": "Python"}, {"instruction": "Explain why using \"For\" loops can be a better choice than using \"While\" loops in Python.", "input": "", "output": "For loops are better than while loops in Python because they provide a clearer syntax and are easier to debug due to their predictable and structured behavior. For loops are also more efficient than while loops since they don't require explicit initialization and condition checking, while while loops need to check if a condition is true on each iteration. This makes for loops faster and more memory-efficient, as it requires fewer operations compared to while loops.", "category": "Python"}, {"instruction": "Create a method to find all valid IP addresses that can be formed using a given string.", "input": "string = \"25525511135\"", "output": "def find_all_valid_ip_addresses(string):\n    valid_ips = []\n    for i in range(1,4):\n        for j in range(1,4):\n            for k in range(1,4):\n                if i+j+k == len(string):\n                    ip_string = string[:i]+\".\"+string[i:i+j]+\".\"+string[i+j:i+j+k]+\".\"+string[i+j+k:]\n                    if is_valid_ip_address(ip_string):\n                        valid_ips.append(ip_string)\n    return valid_ips\n\ndef is_valid_ip_address(ip_string):\n    nums = ip_string.split(\".\")\n    for num in nums:\n        if (int(num) < 0 or int(num) > 255):\n            return False\n    return True", "category": "Python"}, {"instruction": "How would you write a function to find the highest frequency character in a string?", "input": "string = \"Hello world!\"", "output": "def find_highest_freq_char(string):\n    counts = {}\n    max_freq_char = \"\"\n    max_freq = 0\n    for ch in string:\n        counts[ch] = counts.get(ch, 0) + 1\n        if counts[ch] > max_freq:\n            max_freq = counts[ch]\n            max_freq_char = ch\n    return max_freq_char", "category": "Python"}, {"instruction": "Help complete the implementation of the following function", "input": "def true_false_sum(x):\n    true_sum = 0\n    false_sum = 0\n    for i in range(x):\n        if x[i] == booleanTrue:\n            *\n    return true_sum, false_sum", "output": "def true_false_sum(x):\n    true_sum = 0\n    false_sum = 0\n    for i in range(x):\n        if x[i] == booleanTrue:\n            true_sum += 1\n        else:\n            false_sum += 1\n    return true_sum, false_sum", "category": "Python"}, {"instruction": "Implement a linear search in a list.", "input": "list = [1, 5, 9, 10]", "output": "def linear_search(list, key):\n    for index, value in enumerate(list):\n        if value == key:\n            return index\n    return -1", "category": "Python"}, {"instruction": "Generate a python class for calculating prime numbers up to n.", "input": "n = 10", "output": "class PrimeCalculator:\n    def __init__(self, n):\n        self.n = n\n    \n    def get_primes(self):\n        primes = []\n        for number in range(2, self.n+1):\n            is_prime = True\n            for divisor in range(2, number):\n                if number % divisor == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(number)\n        return primes", "category": "Python"}, {"instruction": "Create a function to calculate Fibonacci sequence number based on the index of the number.", "input": "index = 6", "output": "def calc_fibonacci_number(index):\n    if index == 0 or index == 1:\n        return index\n    first_num = 0\n    second_num = 1\n    for i in range(2, index+1):\n        next_num = first_num + second_num\n        first_num, second_num = second_num, next_num\n    return second_num", "category": "Python"}, {"instruction": "How would you write a function to find the mode in an array of numbers?", "input": "nums = [2, 3, 4, 5, 5, 6, 7, 8]", "output": "def find_mode(nums):\n    mode = 0\n    max_occurrence = 0\n    for num in nums:\n        occurrences = nums.count(num)\n        if occurrences > max_occurrence:\n            max_occurrence = occurrences\n            mode = num\n    return mode", "category": "Python"}, {"instruction": "Create a method to compute the sum of squares of numbers from 0 up to n.", "input": "n = 4", "output": "def sum_of_squares(n):\n    total_sum = 0\n    for i in range(n + 1):\n        total_sum += i ** 2\n    return total_sum", "category": "Python"}, {"instruction": "Write a function that, given a string, returns a dictionary of all the characters in the string and their respective frequencies.", "input": "text = \"Hello World\"", "output": "def letter_frequency(text):\n    d = {}\n    for char in text:\n        if char not in d:\n            d[char] = 1\n        else:\n            d[char] += 1\n    return d\n\nprint(letter_frequency(text))", "category": "Python"}, {"instruction": "Implement a function in Python that prints out the grade for a student, given their marks in a particular subject.", "input": "marks = 90", "output": "def get_grade(marks):\n    if marks>=90:\n        return \"A\"\n    elif marks>=80 and marks<90:\n        return \"B\"\n    elif marks>=70 and marks<80:\n        return \"C\"\n    elif marks>=60 and marks<70:\n        return \"D\"\n    else:\n        return \"F\"\n\nprint(get_grade(marks))", "category": "Python"}, {"instruction": "Write a Python program to delete a given key from a dictionary.", "input": "", "output": "def delete_key(d, key):\n if key in d:\n del d[key]\n\nd = {'a':1, 'b':2}\ndelete_key(d, 'a')", "category": "Python"}, {"instruction": "Write a Python function to calculate the sum of the areas of a given list of circles, where each circle is defined as a dictionary containing 'radius' and 'x' as keys.", "input": "[{'radius': 3, 'x': 5}, {'radius': 4, 'x': 7}, {'radius': 5, 'x': 9}]", "output": "def sum_areas(circles):\n total = 0\n for circle in circles:\n area = 3.14 * circle['radius'] ** 2\n total += area\n return total", "category": "Python"}, {"instruction": "Create a Python program that takes a comma-separated string and outputs a dictionary of words and the frequency of their occurrences.", "input": "apple, banana, apple, orange", "output": "def get_word_frequency(string):\n words = string.split(', ')\n frequencies = {}\n for word in words:\n if word in frequencies:\n frequencies[word] += 1\n else:\n frequencies[word] = 1\n return frequencies", "category": "Python"}, {"instruction": "Using the given code, write a function that finds the highest value in the array.", "input": "array = [5, 2, 8, 7, 1]", "output": "def find_largest(array):\n    largest = array[0] \n    for x in array:\n        if x > largest: \n            largest = x\n\n    return largest", "category": "Python"}, {"instruction": "Iterate through the given array and print the even numbers.", "input": "array = [1, 2, 3, 4, 5, 6]", "output": "for x in array:\n    if x % 2 == 0: \n        print(x)", "category": "Python"}, {"instruction": "Visualize the given data using a bar chart.", "input": "data = [['January', 10], ['February', 15], ['March', 20], ['April', 17]]", "output": "import matplotlib.pyplot as plt\n\nmonths = [x[0] for x in data]\nvalues = [x[1] for x in data]\n\nplt.bar(months, values)\nplt.xlabel(\"Month\") \nplt.ylabel(\"Number\") \nplt.show()", "category": "Python"}, {"instruction": "Using the given code, construct a json request payload.", "input": "data = {\n    \"name\": \"John Doe\",\n    \"age\": 30\n}", "output": "import json\n\nrequest_payload = json.dumps(data)", "category": "Python"}, {"instruction": "Write a function that returns 'true' if the number is an even number, and 'false' otherwise.", "input": "", "output": "def is_even(num): \n    if(num % 2 == 0): \n        return True\n    else: \n        return False", "category": "Python"}, {"instruction": "Reverse a linked list.", "input": "", "output": "def reverseList(node): \n    prev = None\n    while (node != None): \n        next = node.next\n        node.next = prev \n        prev = node  \n        node = next\n    return prev", "category": "Python"}, {"instruction": "Implement a priority queue.", "input": "", "output": "class PriorityQueue(): \n   \n    def __init__(self): \n        self.elements = [] \n  \n    def is_empty(self): \n        return len(self.elements) == 0 \n  \n    def enqueue(self, item, priority): \n        self.elements.append((item, priority)) \n  \n    def dequeue(self): \n        max_priority_index = 0\n        for index, element in enumerate(self.elements): \n            if element[1] > self.elements[max_priority_index][1]: \n                max_priority_index = index \n        element = self.elements[max_priority_index] \n        del self.elements[max_priority_index] \n        return element", "category": "Python"}, {"instruction": "Given a binary tree, find the height of the tree.", "input": "", "output": "def maxDepth(self, root: TreeNode):\n    if root is None:\n      return 0\n\n    leftDepth = self.maxDepth(root.left)\n    rightDepth = self.maxDepth(root.right)\n\n    return max(leftDepth, rightDepth) + 1", "category": "Python"}, {"instruction": "Suggest a machine learning model for predicting stock prices.", "input": "", "output": "A possible machine learning model for predicting stock prices is the Long Short-Term Memory (LSTM) Neural Network. This model is widely used for forecasting time-series data, such as stock prices. It is capable of capturing long-term dependencies and has been used successfully to make accurate predictions in many areas.", "category": "Python"}, {"instruction": "Using string functions, capitalize each word in the given sentence.", "input": "sentence = \"python is a programming language\"", "output": "sentence = \"python is a programming language\"\n\n# split the sentence into individual words\nwords = sentence.split(\" \")\n\n# capitalize each word in the sentence\ncapitalized_words = [word.capitalize() for word in words]\n\n# join the words back together\ncapitalized_sentence = \" \".join(capitalized_words)\n\nprint(capitalized_sentence) # prints \"Python Is A Programming Language\"", "category": "Python"}, {"instruction": "Given the following matrix, delete the row or column that contains the least number of elements.", "input": "[[0, 1, 2], \n [3, 4, 5], \n [6, 7, 8]]", "output": "import numpy as np\n\n# Create the matrix\nmatrix = np.array([[0, 1, 2], \n                   [3, 4, 5], \n                   [6, 7, 8]])\n\n# Get the lengths of each row\nrow_lengths = [len(row) for row in matrix]\n\n# Delete the row with the minimum length and print the result\ndel matrix[row_lengths.index(min(row_lengths))]\nprint(matrix) # prints [[0 1 2] \n                  #        [3 4 5] \n                  #        [6 7 8]]", "category": "Python"}, {"instruction": "Write a Python program to calculate the sum of two numbers entered by the user.", "input": "", "output": "num1 = float(input(\"Enter first number: \"))\nnum2 = float(input(\"Enter second number: \"))\n\n# Adding two numbers\nsum = num1 + num2\n\n# Display the sum\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))", "category": "Python"}, {"instruction": "Develop a program that picks a random item from a given list of strings.", "input": "words = [\"Python\", \"programming\", \"language\"]", "output": "import random\ndef random_word(words):\n return random.choice(words)\n \nprint(random_word(words))", "category": "Python"}, {"instruction": "Code a function that takes an array and counts the odd numbers in it.", "input": "input_array = [1, 2, 3, 4, 5]", "output": "def countOddNumbers(input_array): \n count = 0\n for num in input_array:\n  if num % 2 != 0: \n   count += 1\n return count\n\nprint(countOddNumbers(input_array))", "category": "Python"}, {"instruction": "Program to swap all even and odd elements in a given array.", "input": "my_list = [1, 2, 3, 4, 5, 6, 7, 8]", "output": "def swap_even_and_odd(my_list):\n for i in range(len(my_list)-1):\n if i % 2 == 0 and my_list[i] % 2 != 0:\n my_list[i], my_list[i+1] = my_list[i+1], my_list[i]\n return my_list\n\nprint(swap_even_and_odd(my_list))", "category": "Python"}, {"instruction": "You need to code a program that prints out the nth Fibonacci number.", "input": "n=10", "output": "def Fibonacci(n): \n if n<0: \n print(\"Incorrect input\") \n elif n==1: \n return 0 \n elif n==2: \n return 1 \n else: \n return Fibonacci(n-1)+Fibonacci(n-2) \n\nprint(Fibonacci(10))", "category": "Python"}, {"instruction": "Write a Python program to fill a matrix with random numbers.", "input": "rows = 4 \ncolumns = 3", "output": "matrix = [[randint(0, 99) for x in range(columns)] for y in range(rows)]", "category": "Python"}, {"instruction": "Describe succinctly the benefits of using a database for storing Big Data.", "input": "", "output": "Using a database for storing Big Data can provide many benefits, such as scalability, improved data consistency and integrity, improved data security, and decreased maintenance costs. Database technologies also facilitate the ability to perform various analytics techniques, such as mining and predictive analytics, on large datasets.", "category": "Python"}, {"instruction": "Create a function that takes two strings and out put the number of similar characters in both strings.", "input": "String 1: coding\nString 2: debugging", "output": "def char_count(str1, str2): \n    count = 0\n    for i in str1:\n        if i in str2: \n            count = count + 1\n    return count", "category": "Python"}, {"instruction": "Implement an algorithm with Big O notation of O(n).", "input": "", "output": "def O_n(items):\n  n = len(items)\n  for i in range(n):\n    print (items[i])", "category": "Python"}, {"instruction": "Given a list of integers, write a Python program to create a new list that contains the square of every element in the original list.", "input": "", "output": "def square_numbers(nums):\n  return [num**2 for num in nums]", "category": "Python"}, {"instruction": "Write a class in Python for representing a rectangle. This class should store the length and width of the rectangle, and be able to compute its area.", "input": "", "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n \n    def area(self):\n        return self.length * self.width", "category": "Python"}, {"instruction": "Search a given list for a specific element and return its position.", "input": "list_a = [\"apple\", \"banana\", \"cherry\", \"date\"]\nelement = \"date", "output": "def search_list(list_a, element):\n    for i in range(len(list_a)):\n        if list_a[i]==element:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Edit this piece of Python code to make sure that the decimal is rounded off correctly.", "input": "a = round(0.54678, 2)", "output": "a = round(0.54678, 2)  # rounds off to 2 decimal places", "category": "Python"}, {"instruction": "Explain what a stack overflow is and how to try to avoid it.", "input": "", "output": "A stack overflow is an error condition in which the program attempts to use more memory space than the stack can hold. It occurs when a program pushes more data onto the stack than the maximum limit (e.g., when a recursive function recurses too many times), or when the recursive calls are too deeply nested. To avoid stack overflows, you should use a modular approach when writing code, set realistic limits for the depth of recursion, and opt for an iterative solution rather than a recursive one whenever possible.", "category": "Python"}, {"instruction": "Write code to convert a given number expressed in hexidecimal representation to binary.", "input": "", "output": "def hex_to_bin(hex_str):\n    #validating the input\n    if hex_str[-1] not in \"0123456789ABCDEF\":\n        return \"Invalid Hexadecimal!!\"\n     \n    #using bin() function to get the binary value  \n    return bin(int(hex_str, 16))[2:]", "category": "Python"}, {"instruction": "Suggest a cleaner and more concise way to implement the following code snippet.", "input": "def find_matching_number(nums, target):\n  for num in nums:\n    if num == target:\n      return True\n  return False", "output": "def find_matching_number(nums, target):\n  return target in nums", "category": "Python"}, {"instruction": "Implement a function that takes 2 numbers as parameters and returns the greatest common divisor of both numbers.", "input": "a = 20\nb = 25", "output": "def gcd(a, b): \n  if a == 0: \n    return b \n  return gcd(b % a, a) \n\nprint(gcd(20, 25)) # 5", "category": "Python"}, {"instruction": "Rewrite the following code snippet to use the arcpy module.", "input": "import os\n\nfile_paths = [os.path.join('data', f) for f in os.listdir('data') if f.endswith('.tif')]", "output": "import os\nimport arcpy\n\nfile_paths = [os.path.join('data', f) for f in arcpy.ListRasters('*.tif')]", "category": "Python"}, {"instruction": "Suggest an elegant way to print out a list of numbers without using a loop in Python.", "input": "lst = [1, 2, 3, 4]", "output": "print(*lst) # 1 2 3 4", "category": "Python"}, {"instruction": "Given a Python list, write a program to convert all its numbers to strings.", "input": "lst = [1, 2, 3, 4]", "output": "lst = [str(x) for x in lst]", "category": "Python"}, {"instruction": "Remove the redundancy in the following code and make it more concise.", "input": "def sum_of_lists(lists):\n  result = []\n  for i in range(len(lists)):\n    current_list = lists[i]\n    for j in range(len(current_list)):\n      result.append(current_list[j])\n  return sum(result)", "output": "def sum_of_lists(lists):\n  flattened_list = [item for sublist in lists for item in sublist]\n  return sum(flattened_list)", "category": "Python"}, {"instruction": "Suggest an alternative for the following code snippet which is faster and less memory intensive.", "input": "arr = [2, 3, 5, 7]\nresult = []\nfor i in range(len(arr)):\n  for j in range(i + 1, len(arr)):\n    result.append((arr[i], arr[j]))", "output": "arr = [2, 3, 5, 7]\nresult = [(arr[i],arr[j]) for i in range(len(arr)-1) for j in range(i+1,len(arr))]", "category": "Python"}, {"instruction": "Make a program to return the longest word in a given list of strings.", "input": "input_list = [\"The\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"]", "output": "def find_longest_word(input_list):\n    longest_word = \"\"\n    for i in input_list:\n        if len(i) > len(longest_word):\n            longest_word = i\n    \n    return longest_word", "category": "Python"}, {"instruction": "Write a function to calculate the standard deviation of data points in Python.", "input": "", "output": "def stdev(data):\n    avg = sum(data) / len(data)\n    total = 0\n    for x in data:\n        total += (x - avg) ** 2\n    return (total / (len(data) - 1)) ** 0.5", "category": "Python"}, {"instruction": "Rewrite the following program to make it print out the smallest number in a given list.", "input": "def smallestNumber(numbers):\n    largest = numbers[0]\n    for number in numbers:\n        if largest < number:\n            largest = number\n    return largest", "output": "def smallestNumber(numbers):\n    smallest = numbers[0]\n    for number in numbers:\n        if smallest > number:\n            smallest = number\n    return smallest", "category": "Python"}, {"instruction": "Refactor the code to use a recursive algorithm instead of a loop to find the factorial of a given number.", "input": "", "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "category": "Python"}, {"instruction": "Find and return the longest string in the given array.", "input": "[\"hello\", \"how\", \"are\", \"you\", \"doing\"]", "output": "def longestString(arr):\n    longest_str = ''\n    for s in arr:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "category": "Python"}, {"instruction": "Using numpy, find the mean of array 'arr'.", "input": "arr = [1, 2, 3, 4, 5]", "output": "import numpy as np\nnp.mean(arr)", "category": "Python"}, {"instruction": "Create a class 'Fruit' to define a fruit.", "input": "", "output": "class Fruit:\n    def __init__(self, name, color, weight):\n        self.name = name\n        self.color = color\n        self.weight = weight\n\n    def print_info(self):\n        print(f'Name: {self.name}')\n        print(f'Color: {self.color}')\n        print(f'Weight: {self.weight}')", "category": "Python"}, {"instruction": "Write a function 'play_game' that plays a simple game of rock paper scissors.", "input": "", "output": "def play_game():\n    options = ['rock', 'paper', 'scissors']\n    computer_choice = random.choice(options)\n    user_choice = input('Choose \"rock\", \"paper\", or \"scissors\": ')\n\n    if user_choice == computer_choice:\n        print('It is a tie!')\n    elif user_choice == 'rock':\n        if computer_choice == 'paper':\n            print('Computer wins!')\n        else:\n            print('You win!')\n    elif user_choice == 'paper':\n        if computer_choice == 'scissors':\n            print('Computer wins!')\n        else:\n            print('You win!')\n    elif user_choice == 'scissors':\n        if computer_choice == 'rock':\n            print('Computer wins!')\n        else:\n            print('You win!')", "category": "Python"}, {"instruction": "Create a new array 'b' from array 'a' containing only even numbers.", "input": "a = [1, 2, 3, 4, 5, 6]", "output": "b = [num for num in a if num % 2 == 0]", "category": "Python"}, {"instruction": "Compute the prime numbers between 1 to 10", "input": "", "output": "primes = [2, 3, 5, 7]\n\nfor num in range(1, 11):\n    if num > 1:\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n\nprint(primes)\n\n# Output: [2, 3, 5, 7] (all the prime numbers between 1 to 10)", "category": "Python"}, {"instruction": "You are given a string and asked to find the frequency of each character in the string", "input": "str = \"GPT Model\"", "output": "from collections import Counter \n\ndef char_frequency(str): \n    return Counter(str) \n\nstr = \"GPT Model\"\nprint (char_frequency(str))\n\n# Output: {'G': 1, 'P': 1, 'T': 1, ' ': 1, 'M': 1, 'o': 2, 'd': 1, 'e': 1, 'l': 1}", "category": "Python"}, {"instruction": "You are asked to create an array of three random numbers between 1 to 10", "input": "", "output": "import random\n\nrandom_nums = []\nfor i in range(3):\n    random_nums.append(random.randint(1,10))\n\nprint(random_nums)\n\n# Output: [2, 8, 6] (new set of 3 random numbers)", "category": "Python"}, {"instruction": "Name all the built-in functions in Python", "input": "", "output": "abs(), all(), any(), ascii(), bin(), bool(), bytearray(), calls(), chr(), dir(), divmod(), enumerate(), eval(), filter(), float(), format(), frozenset(), hex(), int(), isinstance(), len(), list(), map(), max(), min(), oct(), open(), ord(), pow(), print(), range(), reversed(), round(), set(), slice(), sorted(), str(), sum(), tuple(), type(), zip()", "category": "Python"}, {"instruction": "From a given list of words, create a new list with only the words that contain the letter 'a'.", "input": "my_list = [\"cat\", \"dog\", \"apple\", \"pear\"]", "output": "new_list = [word for word in my_list if \"a\" in word] # Output: [\"cat\", \"apple\", \"pear\"]", "category": "Python"}, {"instruction": "Explain why the given function will not work as expected.", "input": "def greet(name):\nprint(\"Hello,\" + name)\n\ngreet(\"John\")", "output": "The given function will not work as expected because it does not contain a return statement. The function will print \"Hello, John\", but it will not return anything and thus the result of the function will be None. Additionally, the function will not raise an error, which may lead to confusion. Therefore, it is important to make sure that the function contains a return statement.", "category": "Python"}, {"instruction": "Create a Python script to print the 3rd element in a given list.", "input": "[1,2,3,4,5,6]", "output": "list = [1,2,3,4,5,6]\n\nprint(list[2]) # Output: 3", "category": "Python"}, {"instruction": "Design an algorithm to traverse a tree in level-order.", "input": "", "output": "def traverseLevelOrder(root): \n    if root is None: \n        return\n  \n    # Create an empty queue for level order traversal \n    queue = [] \n  \n    # Enqueue root and initialize height \n    queue.append(root) \n  \n    while (len(queue) > 0): \n        # Print front of queue and remove it from queue \n        node = queue.pop(0) \n        print node.data, \n  \n        # Enqueue left child \n        if node.left is not None: \n            queue.append(node.left) \n  \n        # Enqueue right child \n        if node.right is not None: \n            queue.append(node.right)", "category": "Python"}, {"instruction": "What is the Big-O notation of a given algorithm", "input": "", "output": "Big-O notation is a method of expressing the time complexity of an algorithm. It quotes the upper bound of an algorithm\u2019s running time in terms of a function of the size of the input data. This is useful for determining the efficacy of an algorithm as different inputs of different sizes require different run times from the same algorithm. Big-O notation is typically expressed in terms of the number of operations on the input data, with each scale increasing the complexity exponentially.", "category": "Python"}, {"instruction": "Create a program in Python that takes two strings as input and determines if they are anagrams of each other", "input": "string1=\"listen\";\nstring2=\"silent\";", "output": "def isAnagram(str1, str2): \n\n # convert both strings into lowercase \n str1 = str1.lower()\n str2 = str2.lower()\n  \n # sort both strings \n sortedStr1 = ''.join(sorted(str1)) \n sortedStr2 = ''.join(sorted(str2)) \n  \n # check if sorted strings are equal \n if sortedStr1 == sortedStr2: \n     return True\n else: \n     return False\n\nresult = isAnagram(string1, string2)\nprint(result)", "category": "Python"}, {"instruction": "Explain the concept of recurrence relations in algorithms", "input": "", "output": "A recurrence relation is an equation that defines a sequence of terms in terms of the values of the preceding terms. It is typically used to define a sequence in which each term depends on the values of previous terms. Recurrence relations are used in algorithms and computer programs to recursively calculate a sequence of values. For example, the Fibonacci sequence is a famous sequence whose terms are defined by recurrence relation F_(n+1) = F_n + F_(n-1). This means that each term in that sequence is the sum of the previous two terms.", "category": "Python"}, {"instruction": "Create a for loop in Python that iterates through the list [1,2,3,4,5].", "input": "", "output": "for item in [1,2,3,4,5]:\n    print(item)", "category": "Python"}, {"instruction": "Classify a given string as either a palindrome, a word or a phrase.", "input": "racecar", "output": "def classify_string(string):\n    if string == string[::-1]: \n        return \"Palindrome\"\n    elif \" \" in string:\n        return \"Phrase\"\n    else:\n        return \"Word\"\n\ninput_string = \"racecar\"\nprint(classify_string(input_string)) # Palindrome", "category": "Python"}, {"instruction": "Write a function that returns True if a given number is prime and False if it is not.", "input": "", "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Design a class to hold calendar date-related information.", "input": "", "output": "class CalendarDate:\n    def __init__(self, day, month, year):\n        self.day = day\n        self.month = month\n        self.year = year\n\n    def get_date(self):\n        return self.day, self.month, self.year", "category": "Python"}, {"instruction": "Using an existing loop, create code to calculate the sum of all odd numbers up to a given number.", "input": "", "output": "def sum_odd_numbers(num):\n    result = 0\n    for i in range(1, num+1):\n        if i % 2 != 0:\n            result += i\n    return result", "category": "Python"}, {"instruction": "Write code to calculate statistical measures such as Standard Deviation, Median and Mean from a given set of numbers.", "input": "array = [2, 4, 8, 7, 5]", "output": "import statistics\n\nmean = statistics.mean(array)\nmedian = statistics.median(array)\nstd_dev = statistics.stdev(array)", "category": "Python"}, {"instruction": "Rewrite the following code snippet to improve readability.", "input": "def f(x):\n  return [x * i for i in range(1, x + 1)]", "output": "def f(x):\n  numbers = []\n  for i in range(1, x + 1):\n    numbers.append(x * i)\n  return numbers", "category": "Python"}, {"instruction": "Use the input data to create a bar chart.", "input": "Data: [(\"Apple\", 20), (\"Samsung\", 16), (\"Google\", 11), (\"Sony\", 14)]", "output": "import matplotlib.pyplot as plt\n\nitems = [x[0] for x in data]\nvalues = [x[1] for x in data]\n\nplt.bar(items, values)\nplt.show()", "category": "Python"}, {"instruction": "Create an API endpoint in Python with Flask that requires authentication.", "input": "users = {\"John\": \"123456\", \"Jenny\": \"456789\"}", "output": "from flask import Flask, request\n\napp = Flask(__name__)\n\nusers = {\"John\": \"123456\", \"Jenny\": \"456789\"}\n\n@app.route('/', methods=['GET'])\ndef root():\n    if request.authorization and request.authorization.username in users \\\n            and request.authorization.password == users[request.authorization.username]:\n        return 'Authentication successful!' \n    else:\n        return 'Authentication failed!'\n        \nif __name__ == '__main__':\n    app.run(debug=True)", "category": "Python"}, {"instruction": "Calculate the percentage of numbers in an array that is greater than 5.", "input": "[3, 4, 7, 8, 9, 11]", "output": "def calc_perc(arr):\n  count = 0\n  for num in arr:\n    if num > 5:\n      count +=1\n  return count/len(arr) *100\n\ncalc_perc([3, 4, 7, 8, 9, 11])", "category": "Python"}, {"instruction": "Write a Python code to find the largest and the second largest numbers in a list.", "input": "List: [2, 9, 12, 45, 10, 20]", "output": "def getLargestTwo(l):\n    first_largest = second_largest = float('-inf')\n    for num in l:\n        if num > first_largest:\n            second_largest = first_largest\n            first_largest = num\n        elif num > second_largest and num != first_largest:\n            second_largest = num\n    return (first_largest, second_largest)", "category": "Python"}, {"instruction": "Write a code snippet to create an array filled with alternating 0s and 1s.", "input": "Array size: 5", "output": "def createAlternateArray(n):\n    result = [False] * n\n    for i in range(n):\n        if i % 2 == 0:\n            result[i] = True\n    return result", "category": "Python"}, {"instruction": "Create a logic using Python that checks if a string contains only alphabetical characters or not.", "input": "", "output": "def checkAlphabet(string): \n\n   alphabets = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\n   for i in string: \n      if i not in alphabets: \n         return False\n   return True", "category": "Python"}, {"instruction": "What are the reachable, non-reachable and partially reachable states in a DFA?", "input": "", "output": "In a Deterministic Finite Automaton (DFA), there are three types of states: reachable states, non-reachable states, and partially reachable states. Reachable states are those states which can be reached from the start state. Non-reachable states are those which can never be reached from the start state. Partially reachable states are those that can only be reached from the start state through some other states.", "category": "Python"}, {"instruction": "Print out the sum of even numbers from the following range.", "input": "range(1,10)", "output": "sum = 0\nfor num in range(1,10):\n    if num % 2 == 0:\n        sum += num\nprint(sum) // Output: 20", "category": "Python"}, {"instruction": "Generate code to return a fibonacci sequence up to n elements.", "input": "n = 10", "output": "def Fibonacci(n): \n  \n    #taking 1st two fibonacci nubers as 0 and 1 \n    FibArray = [0, 1] \n      \n    while len(FibArray) < n: \n        next_fib = FibArray[-1] + FibArray[-2] \n        FibArray.append(next_fib) \n          \n    return FibArray \n    \n# Driver Code \nprint(Fibonacci(n))", "category": "Python"}, {"instruction": "Create an algorithm that computes the sum of its maximum K (given) digits", "input": "arr = [1, 2, 3, 4, 5], K = 3", "output": "def max_sum_digits(arr, K):\n    max_sum = 0\n    arr.sort()\n    for i in range(K):\n        max_sum += arr[len(arr)-1-i]\n    return max_sum", "category": "Python"}, {"instruction": "Design a GUI app to welcome the user and output a message", "input": "", "output": "import tkinter as tk \n\nwindow = tk.Tk()\nwindow.title(\"Welcome App\") \n\nframe = tk.Frame(window) \nframe.grid(row=0, column=0) \n\nlabel = tk.Label(frame, text=\"Welcome\", font=(\"Arial\", 40))\nlabel.grid(row=0, column=0) \n\nmessage = tk.Message(frame, text=\"Hello user!\", width=1000)\nmessage.grid(row=2, column=0)  \n\nwindow.mainloop()", "category": "Python"}, {"instruction": "Design an algorithm for finding the frequency of occurrence of each character in a given string", "input": "str = \"hello world\"", "output": "def char_frequency(str):\n    freq = {}\n    for char in str:\n        if char in freq: \n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq", "category": "Python"}, {"instruction": "Define a function that takes a string as input and returns true if it is a valid IP address.", "input": "ip_str = \"127.0.0.1\"", "output": "def is_valid_ip(ip_str):\n    ip_addr = ip_str.split('.')\n\n    if len(ip_addr) != 4:\n        return False\n    for item in ip_addr:\n        if not 0 <= int(item) <= 255:\n            return False\n    return True", "category": "Python"}, {"instruction": "Perform a binary search on the following list of integers: [0, 1, 2, 3, 4, 5, 6, 7, 8].", "input": "", "output": "def binary_search(nums, target):\n  low = 0\n  high = len(nums) - 1\n\n  while low <= high:\n    mid = (low + high) // 2\n    if target == nums[mid]:\n      return mid\n    elif target < nums[mid]:\n      high = mid - 1\n    else:\n      low = mid + 1\n  \n  return -1", "category": "Python"}, {"instruction": "Given a hash table, write a program to print the keys and values in sequence.", "input": "data = {\n    \"Name\": \"John\",\n    \"Age\": 25,\n    \"Country\": \"USA\"\n}", "output": "def print_hash_table(data):\n    for key in data:\n        print(key + \": \" + str(data[key]))", "category": "Python"}, {"instruction": "Re-implement this Ruby code in Python", "input": "def fibonacci(n)\n  return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2)\nend", "output": "def fibonacci(n): \n    if n < 2: \n        return n \n    return fibonacci(n - 1) + fibonacci(n - 2) \n  \nprint(fibonacci(7)) # Outputs: 13", "category": "Python"}, {"instruction": "Write a function that reduces an array of numbers to a single number.", "input": "[2, 4, 6, 8, 10]", "output": "def reduceArray(arr):\n    if not arr:\n        return 0\n    result = arr[0]\n    for num in arr[1:]:\n        result = result + num\n    return result\n\nprint(reduceArray([2, 4, 6, 8, 10])) # Outputs: 30", "category": "Python"}, {"instruction": "Write an algorithm to convert a given 2D matrix into a 1D array.", "input": "matrix = [[1,2,3],[4,5,6]]", "output": "def convert_matrix_to_array(matrix):\n    res = []\n    for row in matrix:\n        for element in row:\n            res.append(element)\n    return res\n\n# Output: [1,2,3,4,5,6]", "category": "Python"}, {"instruction": "Create a method that deletes all the empty elements from a given array of strings.", "input": "arr = [\"a\", \"\", \"b\", \"\", \"c\"]", "output": "def delete_empty_elements(arr):\n    return [e for e in arr if e]\n\n# Output: [\"a\", \"b\", \"c\"]", "category": "Python"}, {"instruction": "Given a string of integers, create a method to generate an array in which each integer is added to the sum of its neighbors.", "input": "s = \"3456\"", "output": "def generate_sum_array(s):\n    res = [int(s[0])]\n    for i in range(1, len(s)):\n        res.append(int(s[i-1]) + int(s[i]))\n    res.append(int(s[-1]))\n    return res\n\n# Output: [3, 8, 11, 13]", "category": "Python"}, {"instruction": "In Python, write a script that prints out the elements of a list.", "input": "list = [1, 2, 3, 4, 5]", "output": "list = [1, 2, 3, 4, 5]\n\nfor x in list:\n    print(x)", "category": "Python"}, {"instruction": "Design a network for sending data from a server to a client.", "input": "", "output": "The network should include a server to send data, and a client to receive data. The server should have a dedicated IP address and listening port to receive instructions from the client, such as HTTP requests. The client should have a unique IP address, and should connect to the server to request data. Both the client and server should have the necessary network infrastructure for data transmission, such as routers, gateways, and firewalls.", "category": "Python"}, {"instruction": "Describe the data structures used to implement a stack data structure.", "input": "", "output": "Data structures used to implement a stack data structure are as follows - linked lists, arrays, dynamic arrays, and resizable arrays. Linked lists are used when the stack size needs to change frequently as this ensures that space is not wasted. Whereas, for a fixed stack size, arrays can be used. A dynamic array is an array with a pre-allocated capacity, so if the stack size exceeds the capacity of the array then it will resize itself to accommodate the new stack size. Lastly, resizable arrays adjust the capacity automatically when new items are added or existing items are removed.", "category": "Python"}, {"instruction": "Create a functional programming paradigm in Python.", "input": "", "output": "def functional_programming(lst):\n    return list(map(lambda x : x*2, filter(lambda x : x % 2 == 0, lst)))\n \nprint(functional_programming([1,2,3,4,5]))      \n# Output: [4, 8]", "category": "Python"}, {"instruction": "How does the Fibonacci number sequence work?", "input": "", "output": "The Fibonacci sequence is a sequence of numbers where each number in the sequence is the sum of the two numbers preceding it. The first two numbers in the sequence are 0 and 1. The sequence starts with 0 and 1 and continues by adding the two previous numbers to get the next number in the sequence. For example, the first six numbers in the Fibonacci sequence are 0, 1, 1, 2, 3, 5. The sequence can be represented as 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, and so on.", "category": "Python"}, {"instruction": "Given a data table, write a function to select the columns.", "input": "table = [['Name', 'Age', 'Score', 'City'],\n         ['Alice', '21', '85', 'New York'],\n         ['Bob', '23', '92', 'Los Angeles'],\n         ['Cathy', '20', '73', 'London']]", "output": "def select_columns(table, columns):\n    output = [table[0]] + [[row[i] for i in columns] for row in table[1:]]\n    return output", "category": "Python"}, {"instruction": "Explain the differences between Bitwise AND, OR, and XOR operations.", "input": "", "output": "The bitwise AND (&) operation returns a 1 in a given bit position if both bits being compared are equal to 1. The bitwise OR (|) operation returns a 1 in a given bit position if either or both of the bits being compared are equal to 1. The bitwise XOR (^) operation produces a result of 1 if the two bits being compared are different and 0 if both bits are the same.", "category": "Python"}, {"instruction": "Find the length of the longest common subsequence in the following two strings: \"ABCBDAB\" and \"BDCABA\".", "input": "", "output": "def longest_common_subsequence(str1, str2):\n  n = len(str1)\n  m = len(str2)\n  \n  dp = [[0] * (m+1) for _ in range(n+1)]\n\n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if str1[i-1] == str2[j-1]:\n        dp[i][j] = 1 + dp[i-1][j-1]\n      else:\n        dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n  \n  return dp[n][m]", "category": "Python"}, {"instruction": "Create a one line solution in Python to remove all vowels from a string.", "input": "", "output": "my_string = 'This is a sentence without any vowels'\nnew_string = ''.join([i for i in my_string if i not in 'aeiouAEIOU']) \nprint(new_string)", "category": "Python"}, {"instruction": "Parse the JSON data stored in a variable 'data' and print out the value of the key 'name'.", "input": "data = {\n \"name\": \"John\", \n \"age\": 30,\n \"status\": \"single\"\n}", "output": "import json\n\ndata = {\n \"name\": \"John\", \n \"age\": 30,\n \"status\": \"single\"\n}\n\ndata =json.loads(data)\nprint(data['name'])", "category": "Python"}, {"instruction": "Compare two given lists to find the common elements and store the output in a new list.", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [2, 4, 6, 8, 10]", "output": "common_list = []\nfor num in list1:\n    if num in list2:\n        common_list.append(num)", "category": "Python"}, {"instruction": "Debug the following code and make sure the program runs as expected.", "input": "def number_divisible(x, y):\n      for i in range(x):\n            if i % y = 0 :\n                  print(i)", "output": "def number_divisible(x, y):\n      for i in range(x):\n            if i % y == 0 :\n                  print(i)", "category": "Python"}, {"instruction": "Use the requests library to write a Python program that sends an HTTP GET request.", "input": "url = \"http://example.com\"", "output": "import requests\n\nresponse = requests.get(url)", "category": "Python"}, {"instruction": "Create a Python class object to store data about a basketball player.", "input": "", "output": "class BasketballPlayer:\n def __init__(self, name, age, height, weight):\n self.name = name\n self.age = age\n self.height = height\n self.weight = weight", "category": "Python"}, {"instruction": "Use the numpy library to write a function that takes an array of integer values, and returns the average of all the values.", "input": "arr = [1, 2, 3, 4, 5]", "output": "import numpy as np\ndef average(arr):\n return np.average(arr)", "category": "Python"}, {"instruction": "Develop a Python code that takes a string as input and converts it to all uppercase.", "input": "string = \"Hello World\"", "output": "def toUpperCase(string):\n    return string.upper()", "category": "Python"}, {"instruction": "Generate a code in Python to generate a list containing multiplication table up to 10.", "input": "", "output": "multiplication_table = []\nfor i in range(1, 11):\n    multiplication_table.append([x*i for x in range(1, 11)])\nprint(multiplication_table)", "category": "Python"}, {"instruction": "Generate a Python function to generate Fibonacci sequence given a number n.", "input": "n = 5", "output": "def Fibonacci(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b", "category": "Python"}, {"instruction": "Describe the Pandas feature \"DataFrame\"", "input": "", "output": "Pandas DataFrame is a two-dimensional data structure, i.e. data is aligned in a tabular fashion in rows and columns. It is a widely used tool for data manipulation and analysis in Python. It offers a variety of features such as filtering, sorting, adding/removing columns, updating the data, indexing, and many others.", "category": "Python"}, {"instruction": "Write a code in Python to toggle all characters in a string.", "input": "The string is: \"Hello World!\"", "output": "s = \"Hello World!\" \nres = \"\" \nfor char in s: \n    if char.islower():\n        res += char.upper() \n    elif char.isupper():\n        res += char.lower()\nprint(res)", "category": "Python"}, {"instruction": "Write a Python code to print a Pascal's triangle with five rows.", "input": "", "output": "def pascal_triangle(n): \n    trow = [1] \n    y = [0] \n    for x in range(max(n, 0)): \n        print(trow) \n        trow = [ l + r for l, r in zip(trow + y, y + trow)] \n        if(x > 0):\n            trow.append(1)\n    return n >= 1\npascal_triangle(5)", "category": "Python"}, {"instruction": "Write a Python code to calculate the number of unique combinations of three digits from 0 to 9.", "input": "", "output": "def combinations(n, k):\n    from itertools import combinations\n    return len(list(combinations(range(n), k)))\n \ncomb = combinations(10, 3)\nprint(comb)", "category": "Python"}, {"instruction": "Design a function in Python to calculate the Fibonacci sequence up to a particular number.", "input": "", "output": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nfor i in range(1, n+1):\n    print(fibonacci(i))", "category": "Python"}, {"instruction": "Print all possible combination and permutations with length 3 for a given array.", "input": "[1, 2, 3]", "output": "def get_permutations(array):\n  results = []\n  if len(array) == 0:\n    return results\n  if len(array) == 1:\n    results.append([array[0]])\n    return results\n  for i in range(len(array)):\n  permutations = get_permutations(array[:i] + array[i+1:])\n    for permutation in permutations:\n      results.append([array[i]] + permutation)\n  return results", "category": "Python"}, {"instruction": "Create an array of 15 random floats in Python between 0 and 1.", "input": "", "output": "import random\n\nrandom_floats = [random.uniform(0, 1) for _ in range(15)]", "category": "Python"}, {"instruction": "Divide a list of numbers into two smaller lists, one with even numbers and one with odd numbers.", "input": "[1, 2, 3, 4, 5, 6]", "output": "def divide_list(numbers):\n    even_list = []\n    odd_list = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return even_list, odd_list\n\n# Driver Code\nnumbers = [1, 2, 3, 4, 5, 6]\neven_list, odd_list = divide_list(numbers)\nprint(even_list) # [2, 4, 6]\nprint(odd_list)  # [1, 3, 5]", "category": "Python"}, {"instruction": "Create a function to normalize a given pandas dataframe.", "input": "", "output": "def normalize_df(df): \n    normalized_df=(df-df.min())/(df.max()-df.min())\n    return normalized_df\n\nnorm_df = normalize_df(df)", "category": "Python"}, {"instruction": "Generate a list of all the prime numbers in the range from 0 to the given number n.", "input": "", "output": "def is_prime(n):\n    \"\"\"\n    This function will check if a given number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef generate_list_of_primes(n):\n    \"\"\"\n    This function will generate a list of all the prime numbers in the range from 0 to the given number n.\n    \"\"\"\n    primes = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "category": "Python"}, {"instruction": "Write a Python code to calculate the sum of three given numbers, if the values are equal, then return triple their sum", "input": "", "output": "def sumThree(n1, n2, n3):\n    \"\"\"\n    This function returns the sum of three numbers\n\tIf the values are equal, it will return triple their sum\n    \"\"\"\n    if n1 == n2 == n3:\n        return 3 * (n1 + n2 + n3)\n    else:\n        return n1 + n2 + n3", "category": "Python"}, {"instruction": "Create a function in Python to return the approximate value of sin(x) using degrees", "input": "", "output": "import math\ndef sin_deg(x):\n   \"\"\"\n   Returns the approximate value of the sine of x, given in degrees.\n   \"\"\"\n   return math.sin(math.radians(x))", "category": "Python"}, {"instruction": "Create an algorithm in Python to combine two sorted lists into a single sorted list.", "input": "list1 = [3, 5, 7]\nlist2 = [1, 2, 4]", "output": "def merge_lists(lst1, lst2): \n  sorted_list = []\n  i=j=0\n  while (i<len(lst1) and j<len(lst2)):\n    if lst1[i] <= lst2[j]:\n      sorted_list.append(lst1[i])\n      i+=1\n    else:\n      sorted_list.append(lst2[j])\n      j+=1\n\n  sorted_list  += lst1[i:]\n  sorted_list += lst2[j:]\n \n  return sorted_list\n\nlist1 = [3, 5, 7]\nlist2 = [1, 2, 4]\n \nprint(merge_lists(list1, list2))", "category": "Python"}, {"instruction": "Describe the purpose of machine learning.", "input": "", "output": "The purpose of machine learning is to develop algorithms and models that are able to learn from data and make predictions or decisions without being explicitly programmed. Machine learning algorithms can discover hidden patterns from large amounts of data and use the knowledge acquired to improve the accuracy of predictions and enhance decision making. Machine learning is used in many application areas, including natural language processing, computer vision, speech recognition, robotics, recommendation systems, and data mining.", "category": "Python"}, {"instruction": "Create a program to enter the data for user registration.", "input": "", "output": "def get_user_data():\n    username = input('Enter your desired username: ')\n    email = input('Enter your email address: ')\n    password = input('Enter a password: ')\n    confirm_password = input('Confirm your password: ')\n\n    # check if the passwords match\n    if password != confirm_password:\n        print('Passwords do not match')\n        return\n    \n    # save username, email, and password\n    user_data = {\n        'username': username,\n        'email': email,\n        'password': password\n    }\n\n    return user_data", "category": "Python"}, {"instruction": "Print prime numbers in the given range.", "input": "Lower range: 10\nUpper range: 30", "output": "for num in range(10, 30 + 1):\n   # prime numbers are greater than 1\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)", "category": "Python"}, {"instruction": "Add two matrices of size 3x3.", "input": "mat1 = [[1,2,3],\n        [4,5,6],\n        [7,8,9]]\nmat2 = [[10,11,12],\n        [13,14,15],\n        [16,17,18]]", "output": "# adding two matrices\nres = [[0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0]]\n\n# iterating through rows\nfor i in range(3):\n  # iterating through columns\n  for j in range(3):\n    res[i][j] = mat1[i][j] + mat2[i][j]\n\n# printing the result\nfor i in range(3):\n  for j in range(3):\n    print(res[i][j], end=\" \")\n  print()\n\n# Output:\n11 13 15\n17 19 21\n23 25 27", "category": "Python"}, {"instruction": "Write a Python program to abbreviate a name.", "input": "name = \"John Smith\"", "output": "def abbreviateName(name): \n    split_name = name.split(' '); \n    abbrev_name = str(split_name[0][0] + '.' + split_name[1]); \n    return abbrev_name;", "category": "Python"}, {"instruction": "Given a dictionary, write a function to count the number of items in the dictionary.", "input": "dictionary = {'name': 'John', 'age': 30}", "output": "def count_items(dict):\n    item_count = 0\n    for key in dict:\n        item_count += 1\n    return item_count", "category": "Python"}, {"instruction": "Which keyword is used to define a function in Python?", "input": "", "output": "The keyword used to define a function in Python is \"def\".", "category": "Python"}, {"instruction": "Implement the insertion sort algorithm.", "input": "[4, 6, 3, 8, 1, 8]", "output": "def insertion_sort(input_list):\n    for index in range(1, len(input_list)):\n        current_value = input_list[index]\n        position = index\n\n        while position > 0 and input_list[position - 1] > current_value:\n            input_list[position] = input_list[position - 1]\n            position = position - 1\n\n        input_list[position] = current_value\n    return input_list", "category": "Python"}, {"instruction": "Write a code that migrates data from one database to another", "input": "", "output": "import MySQLdb\nimport pymongo\n\n# Establishing the connection mysql\nmysql_con = MySQLdb.connect( <MySQL connection details> )\ncursor = mysql_con.cursor()\n\n# Establishing the connection mongodb\nmongo_con = pymongo.MongoClient( <MongoDB connection details> )\ndb = mongo_con.mydatabase\n\n# Migrating the data\ncursor.execute( \"SELECT * FROM users\" )\nrecords = cursor.fetchall()\n\nfor record in records:\n    db.users.insert_one({\n        'name': record[0],\n        'age' : record[1],\n        'email': record[2]\n    })", "category": "Python"}, {"instruction": "Write a Python program to test whether all elements of a given list are equal or not.", "input": "[3,3,3]", "output": "def all_elements_equal(lst):\n return lst[1:] == lst[:-1]", "category": "Python"}, {"instruction": "Write a Python function to decode a given string (with special characters) to its original form.", "input": "", "output": "def decode_string(string):\n return string.encode().decode('unicode_escape')", "category": "Python"}, {"instruction": "Write a Python function that takes in a string and outputs a dictionary where the keys are the characters in the string and the values are the frequency of the characters in the string.", "input": "", "output": "def freq_dict(string):\n freq = {}\n for c in string:\n if c in freq:\n freq[c] += 1\n else:\n freq[c] = 1\n return freq", "category": "Python"}, {"instruction": "What is object-oriented programming, and what are the benefits of using it?", "input": "", "output": "Object-oriented programming (OOP) is a programming approach that is based on the concept of objects. It is used to create a model of a real or abstract system to make programming more efficient, easier to debug, and more maintainable. OOP allows developers to write code that is reusable and maintainable, as it enables the creation of components that can be adapted and used in a variety of different contexts. Additionally, OOP allows for better communication between different parts of a program, as components can communicate with each other in a simpler and more understandable manner.", "category": "Python"}, {"instruction": "Develop a new class in Python to represent a Rectangle object with getArea() and getPerimeter() methods.", "input": "", "output": "class Rectangle: \n    def __init__(self, length, width): \n        self.length = length \n        self.width = width \n\n    def getArea(self): \n        return self.length * self.width \n\n    def getPerimeter(self): \n        return 2 * (self.length + self.width)", "category": "Python"}, {"instruction": "Write a function to compute the Fibonacci numbers and the sum of their squares.", "input": "", "output": "def fibonacci (n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\ndef sum_of_squares (n):\n    result = 0\n    for i in range(n+1):\n        result += fibonacci(i)**2\n    return result", "category": "Python"}, {"instruction": "Create a class in Python that implements the __len__ method to return the length of a given string.", "input": "", "output": "class StringLength:\n    def __len__(self, string):\n        return len(string)", "category": "Python"}, {"instruction": "Develop a program to convert an infix expression to prefix notation.", "input": "A*(B+C)-D/(E+F)", "output": "def infix_to_prefix(exp): \n\t# stack to store operators\n\tstack = [] \n\n\t# prefix expression\n\tpref_exp = \"\" \n\t\n\t# traverse through the expression\n\tfor char in exp: \n\t\t\n\t\t# if the character is an operand \n\t\t# add it to prefix expression\n\t\tif char.isalpha(): \n\t\t\tpref_exp += char \n\t\t\n\t\t# if the character is an operator\n\t\telif char in \"*/+-^\": \n\t\t\t\n\t\t\t# push the operator to the stack \n\t\t\tstack.append(char) \n\n\t\t# if the character is ')' \n\t\telif char == ')': \n\t\t\t\n\t\t\t# pop all the operators from \n\t\t\t# the stack until '(' is found \n\t\t\twhile(stack[-1] != '('): \n\t\t\t\tpref_exp += stack.pop() \n\t\t\t\n\t\t\t# remove '(' from the stack \n\t\t\tstack.pop() \n\t\t\t\n\t# add all the operators to the prefix expression \n\twhile len(stack) != 0: \n\t\tpref_exp += stack.pop() \n        \n\treturn pref_exp", "category": "Python"}, {"instruction": "In Python, construct a function to fit a curve to a given set of data points.", "input": "xdata = [0, 1, 2, 4, 11, 18]\nydata = [2, 3, 4, 6, 12, 17]", "output": "from scipy.optimize import curve_fit\n\ndef func(x, a, b, c):\n    return a*x**2 + b*x + c\n\nxdata = [0, 1, 2, 4, 11, 18]\nydata = [2, 3, 4, 6, 12, 17]\n\npopt, pcov = curve_fit(func, xdata, ydata)", "category": "Python"}, {"instruction": "How would you use a for loop in Python to print the sum of all even numbers between 50 and 100?", "input": "", "output": "total = 0\nfor i in range(50, 101):\n    if i % 2 == 0:\n        total += i\nprint(f\"The sum of all even numbers between 50 and 100 is {total}\")", "category": "Python"}, {"instruction": "Write a short piece of code in Python to calculate the area of a triangle with the sides 6 cm, 8 cm, and 10 cm.", "input": "", "output": "def calculate_triangle_area(side1, side2, side3):\n    '''This function calculates the area of a triangle given three sides.'''\n    s = (side1 + side2 + side3) / 2\n    return ((s*(s-side1)*(s-side2)*(s-side3))**0.5)\n\narea = calculate_triangle_area(6,8,10)\nprint(f\"The area of the triangle is {area} cm2\")", "category": "Python"}, {"instruction": "Write a basic script in Python that counts from 0 to 10.", "input": "", "output": "for i in range(11):\n    print(i)", "category": "Python"}, {"instruction": "Debug the given code and explain your solution.", "input": "words = ['hello', 'world', 'foo', 'bar']\nfor i in words:\n   if i == 'foo':\n      break\nprint('Done')", "output": "The code will not print out \"Done\" as it is inside an infinite loop. To fix this, we can either remove the 'break' statement or add an else statement after the if statement as a way of exiting the loop when the condition is not satisfied. \n\nwords = ['hello', 'world', 'foo', 'bar']\nfor i in words:\n   if i == 'foo':\n      break\nelse:\n    print('Done')", "category": "Python"}, {"instruction": "Create a function that calculates the total amount of money after 5 years given an initial amount of money and a certain rate of interest.", "input": "Initial amount: 1000\nRate of interest: 2%", "output": "def total_amount(initial, interest): \n    total = initial \n    for i in range(1, 5): \n        total += total * (interest/100) \n    return total", "category": "Python"}, {"instruction": "Retrieve the word with the second highest frequency from a given text.", "input": "Text: This is a sample text with a lot of words.", "output": "words = text.split()\nfreq_dict = {}\nfor word in words:\n    if word in freq_dict.keys():\n        freq_dict[word] += 1\n    else:\n        freq_dict[word] = 1\nsorted_words = sorted(freq_dict.items(), reverse=True, key=lambda x: x[1])\nsecond_highest_freq_word = sorted_words[1][0]\nprint(second_highest_freq_word)", "category": "Python"}, {"instruction": "Retrieve the third item from a linked list.", "input": "", "output": "def get_third_item(linked_list):\n    curr_node = linked_list\n    for i in range(2):\n        curr_node = curr_node.next # Moves onto the third item. \n    return curr_node.data # Returns the data of the third item.", "category": "Python"}, {"instruction": "Given a string s, write a program to classify it as a palindrome or not.", "input": "s = \u201cmalayalam\u201d", "output": "def is_palindrome(s):\n    n = len(s)\n    for i in range(n//2):\n        if s[i] != s[n-1-i]:\n            return False\n    return True", "category": "Python"}, {"instruction": "Create a function in Python that performs a web scrape and returns the most frequent words from the resulting text.", "input": "", "output": "def scrape_frequent_words(url):\n    try:\n        from bs4 import BeautifulSoup\n        from collections import Counter\n    \n        # Get html from the given url\n        html_content = requests.get(url).text\n        # Parse the html\n        soup = BeautifulSoup(html_content)\n        \n        # Get all text from the page\n        all_texts = soup.find_all(text=True)\n\n        # Extract only words\n        words = [word for text in all_texts for word in text.split()]\n\n        # Calculate frequency \n        frequency = dict(Counter(words))\n        \n        # Return the word with most frequency \n        return max(frequency, key=frequency.get)", "category": "Python"}, {"instruction": "Write a function that takes two strings and determines if they are an anagram.", "input": "string1 = \"converse\"\nstring2 = \"conserve\"", "output": "def is_anagram(str1, str2): \n    # Get lengths of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If the length of both strings are not same,  \n    # then they cannot be anagram \n    if n1 != n2: \n        return 0\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return 0\n  \n    return 1\n\nis_anagram(string1, string2) // 1", "category": "Python"}, {"instruction": "Given two linked list, write a Python program to compare them and output true if they are equal, false if not", "input": "head1 -> 20 -> 40 -> 60 -> 90\nhead2 -> 60 -> 20 -> 90 -> 70", "output": "false", "category": "Python"}, {"instruction": "3D print a model of a house.", "input": "", "output": "import stl\nfrom mpl_toolkits import mplot3d\nfrom matplotlib import pyplot\n\n# Create the mesh\ndata = stl.mesh.Mesh.from_file(\"house.stl\")\n\n# 3D plot\npyplot.figure()\nax = pyplot.axes(projection ='3d')\nax.add_collection3d(mplot3d.art3d.Poly3DCollection(data.vectors))\n\n# Set size\nscale = data.points.flatten(-1)\nax.auto_scale_xyz(scale, scale, scale)\n\n# Save to file\npyplot.savefig('house.png', dpi = 600)", "category": "Python"}, {"instruction": "Define a function which can generate a list of 15 random numbers between 1 to 30.", "input": "", "output": "\"\"\"\nDefine a function which can generate a list of 15 random numbers between 1 to 30\n\"\"\"\nimport random\n\ndef generate_random_list():\n    return [random.randint(1,30) for _ in range(15)]\n    \nif __name__ == '__main__':\n    print(generate_random_list())", "category": "Python"}, {"instruction": "Given an array of integers, return an array of twice the values", "input": "arr = [1, 2, 3, 4]", "output": "def double_array(arr):\n    doubled_arr = []\n    for i in arr:\n        doubled_arr.append(i*2)\n    return doubled_arr", "category": "Python"}, {"instruction": "Implement a computationally efficient algorithm to solve the following problem", "input": "Given an array of integers, check if the sum of any two integers in the array is divisible by 10", "output": "def check_divisible(arr):\n    arr.sort()\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] + arr[j]) % 10 == 0:\n                return True\n    return False", "category": "Python"}, {"instruction": "Update the following code to return the key of the highest value in the dictionary.", "input": "sample_dict = {\"a\":1, \"b\":2, \"c\": 3}", "output": "sample_dict = {\"a\":1, \"b\":2, \"c\": 3}\n\ndef get_key_highest_value(dict):\n    highest_value = max(dict.values())\n    for key, value in dict.items():\n        if value == highest_value:\n            return key", "category": "Python"}, {"instruction": "Design an algorithm that searches for a target element in an array", "input": "arr = [1,3,5,6,7]\ntarget = 6", "output": "def search(arr, target): \n    for i in range(len(arr)): \n        if arr[i] == target: \n            return i\n    return -1\n\nprint(\"Index of 6 is\", search(arr, target))", "category": "Python"}, {"instruction": "Design a neural network to classify the outcome of a coin toss.", "input": "", "output": "import numpy as np \nimport keras \nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation\n\nmodel = Sequential()\nmodel.add(Dense(2, input_dim=2))\nmodel.add(Activation('relu'))\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))\n\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=50, batch_size=32)", "category": "Python"}, {"instruction": "Output an array that contains all the unique elements from two input arrays", "input": "arr1 = [1, 2, 3], arr2 = [2, 3, 4]", "output": "def unique_elements(arr1, arr2):\n    res = [] \n    i = j = 0\n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] == arr2[j]: \n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]: \n            res.append(arr1[i]) \n            i += 1\n        else: \n            res.append(arr2[j]) \n            j += 1\n    res.extend(arr1[i:]) \n    res.extend(arr2[j:]) \n    return list(set(res))", "category": "Python"}, {"instruction": "Write a Python program to find the simple interest.", "input": "principle = 1000, rate of interest = 5%, time duration = 5 years", "output": "# Simple Interest\n\nprinciple = 1000; \nrate = 5; \ntime = 5; \n\n# Calculate simple interest \nSimple_Interest = (principle*time*rate)/100; \n\nprint(\"Simple Interest = %.2f\" %Simple_Interest);", "category": "Python"}, {"instruction": "Write a code to create a FizzBuzz game, that prints the numbers from 1 to 50, replacing all the numbers divisible by 3 with the word \"Fizz\" and the numbers divisible by 5 with the word \"Buzz\".", "input": "", "output": "\"\"\"\nWrite a code to create a FizzBuzz game\n\"\"\"\n\ndef fizz_buzz():\n    for i in range(1, 51):\n        if i % 3 == 0 and i % 5 == 0:\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            print(\"Fizz\")\n        elif i % 5 == 0:\n            print(\"Buzz\")\n        else:\n            print(i)\n\nif __name__ == '__main__':\n    fizz_buzz()", "category": "Python"}, {"instruction": "Generate a 2D list of size 5x5 with random numbers between 0 and 9.", "input": "", "output": "\"\"\"\nGenerate a 2D list of size 5x5 with random numbers between 0 and 9\n\"\"\"\n\nimport random\n\ndef generate_2d_list(rows, columns):\n    matrix = [[random.randint(0, 9) for i in range(columns)] for j in range(rows)]\n    return matrix\n\nif __name__ == '__main__':\n    rows = 5\n    columns = 5\n    matrix = generate_2d_list(rows, columns)\n    print(matrix)", "category": "Python"}, {"instruction": "Code a program that takes a list and removes all the duplicate numbers.", "input": "mylist = [1, 2, 3, 1, 2, 4, 5]", "output": "\"\"\"\nRemove all duplicate numbers from a list\n\"\"\"\n\ndef remove_duplicates(mylist):\n    mylist = list(dict.fromkeys(mylist))\n    return mylist\n\nif __name__ == '__main__':\n    mylist = [1, 2, 3, 1, 2, 4, 5]\n    mylist = remove_duplicates(mylist)\n    print(mylist)", "category": "Python"}, {"instruction": "Modify the given code to be able to print an asterisk pyramid as specified in the output.", "input": "rows = 5\n\nfor i in range(0, rows):\n    for j in range(0, i + 1):\n        print(\"*\", end=' ')\n    print(\"\\r\")", "output": "rows = 5\n\nfor i in range(0, rows):\n    for j in range(0, rows-i-1):\n        print(end=\" \")\n    for j in range(0, i + 1):\n        print(\"*\", end=' ')\n    print(\"\\r\")", "category": "Python"}, {"instruction": "Write a code to print a count-down timer.", "input": "", "output": "import time\n \nfor i in range(10, 0, -1):\n    print(i)\n    time.sleep(1)", "category": "Python"}, {"instruction": "Complete the following Python program for converting the given list into a dictionary.", "input": "list1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]\n\ndef to_dict(list1, list2):\n    ???", "output": "list1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]\n\ndef to_dict(list1, list2):\n    return dict(zip(list1, list2))", "category": "Python"}, {"instruction": "Explain what an interpreter is and how it works in programming.", "input": "", "output": "An interpreter is a type of computer program that translates and executes code written in a programming language. The interpreter reads in the source code, analyses it and then executes the instructions. The interpreter executes the instructions line by line, stopping each time it encounters an error and displaying an error message. This helps the programmer quickly identify and fix errors in the code.", "category": "Python"}, {"instruction": "Write a function that parses a json string into a Python dict.", "input": "", "output": "def parse_json_to_dict(json_string):\n    return json.loads(json_string)", "category": "Python"}, {"instruction": "Generate a Python program to perform matrix multiplication.", "input": "", "output": "# Python program to multiply two matrices \n# 3x3 matrix \nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n# 3x4 matrix\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\n# result is 3x4\nresult = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\n# iterate through rows of X\nfor i in range(len(X)):\n   # iterate through columns of Y\n   for j in range(len(Y[0])):\n       # iterate through rows of Y\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\nfor r in result:\n   print(r)", "category": "Python"}, {"instruction": "Create a three-dimensional array with all elements set to 0 of length 3\u00d72\u00d72.", "input": "", "output": "import numpy as np\n\nx = np.zeros((3,2,2))", "category": "Python"}, {"instruction": "Create a lambda function in Python to fetch the age of a person from their given DOB.", "input": "", "output": "import datetime\n\ncalculate_age = lambda dob: int((datetime.date.today() - dob).days / 365.25)", "category": "Python"}, {"instruction": "Create a function that takes in a string and returns a dictionary with each word as a key and its count as the value.", "input": "string = \"This is a test string\"", "output": "def word_count_dict(string):\n    word_list = string.split()\n    word_dict = {}\n    for word in word_list:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    return word_dict\n\nstring = \"This is a test string\"\nprint(word_count_dict(string))", "category": "Python"}, {"instruction": "Write a Swift program to convert a Python dictionary to a Swift dictionary.", "input": "py_dict = {\"a\": 1, \"b\": 2, \"c\": 3}", "output": "let sw_dict = py_dict as! [String: Int]", "category": "Python"}, {"instruction": "Generate a Vue.js component to display a table.", "input": "", "output": "Vue.component('Table', { \n  props: { \n    list: Array \n  }, \n  template: ` \n    <div> \n      <div> \n        <table border=\"1\">\n          <tr v-for=\"item in list\">\n            <td v-for=\"detail in item\">{{ detail }}</td>\n          </tr>\n        </table> \n      </div> \n    </div> \n  `\n})", "category": "Python"}, {"instruction": "Parse this string to extract the integer value.", "input": "value = 'The integer value is 12'", "output": "import re\nvalue = 'The integer value is 12'\n \nm = re.search(r'\\d+', value)\nprint(int(m.group(0)))", "category": "Python"}, {"instruction": "Given two strings s1 and s2, write a program to edit s1 to s2 by removing, inserting or replacing one character in s1.", "input": "s1 = \u201ccat\u201d\ns2 = \u201chat\u201d", "output": "def edit_strings(s1, s2):\n    s1_arr = list(s1)\n    s2_arr = list(s2)\n\n    i = 0\n    while i < len(s1):\n        if s1[i] == s2[i]:\n            i += 1\n        else:\n            # remove character\n            del s1_arr[i]\n            if s1_arr == s2_arr:\n                return 'removal'\n            # insert character\n            s1_arr.insert(i, s2[i])\n            if s1_arr == s2_arr:\n                return 'insertion'\n            # replace character\n            s1_arr[i] = s2[i]\n            if s1_arr == s2_arr:\n                return 'replacement'\n            break\n    return None", "category": "Python"}, {"instruction": "Given two lists of strings, write a program to combine them into a dictionary whose keys are the strings in one list and values are the strings in the other list.", "input": "list1 = [\u201ccat\u201d, \u201cdog\u201d, \u201chorse\u201d]\nlist2 = [\u201cmeow\u201d, \u201cbark\u201d, \u201cneigh\u201d]", "output": "def combine_lists(list1, list2):\n    dictionary = dict()\n    for i in range(len(list1)):\n        dictionary[list1[i]] = list2[i]\n    return dictionary", "category": "Python"}, {"instruction": "Implement a class to represent a vector, with initial vector and a scaler. Include methods to add, subtract and multiply two vectors.", "input": "", "output": "class Vector():\n    def __init__(self, vector, scaler):\n        self.vector = vector\n        self.scaler = scaler\n\n    def add_vector(self, other_vector):\n        result_vector = []\n        for i in range(len(self.vector)):\n            result_vector.append(self.vector[i] + other_vector.vector[i])\n        return Vector(result_vector, self.scaler)\n    \n    def sub_vector(self, other_vector):\n        result_vector = []\n        for i in range(len(self.vector)):\n            result_vector.append(self.vector[i] - other_vector.vector[i])\n        return Vector(result_vector, self.scaler)\n\n    def mul_vector(self, scaler):\n        result_vector = []\n        for element in self.vector:\n            result_vector.append(element * scaler)\n        return Vector(result_vector, self.scaler)", "category": "Python"}, {"instruction": "Implement a function to remove all occurrences of string t from string s.", "input": "s = 'The quick brown fox jumps over the lazy dog.'\nt = 'the'", "output": "def remove_string(s, t):\n    if t not in s:\n        return s\n    s = s.lower()\n    t = t.lower()\n    indices = []\n    start = 0\n    while True:\n        index = s.find(t, start)\n        if index == -1:\n            break\n        indices.append(index)\n        start = index + 1\n    offset = 0\n    for index in indices:\n        s = s[:index - offset] + s[index - offset + len(t):]\n        offset += len(t)\n    return s", "category": "Python"}, {"instruction": "Compute the sum of numbers in a given tree.", "input": "Tree Structure\n    5\n   / \\\n  3   7", "output": "def compute_sum(root):\n    if not root:\n        return 0\n    left_sum = compute_sum(root.left)\n    right_sum = compute_sum(root.right)\n    return root.val + left_sum + right_sum", "category": "Python"}, {"instruction": "Write a function in Python to compute average of the numbers in a given list.", "input": "[2, 4, 5, 7]", "output": "def compute_avg(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total/len(numbers)", "category": "Python"}, {"instruction": "Write a function that accepts an integer value n and creates an n by n matrix, with all elements initialised to zero.", "input": "", "output": "def create_matrix(n):\n    matrix = []\n    for i in range(n):\n        row = []\n        for j in range(n):\n            row.append(0)\n        matrix.append(row)\n    return matrix", "category": "Python"}, {"instruction": "Create a computer algorithm to determine the validity of a sudoku puzzle", "input": "", "output": "def is_valid_sudoku(puzzle): \n  size = len(puzzle) \n  for row in range(len(puzzle)): \n    seen = set() \n    for col in range(size): \n      number = puzzle[row][col] \n      if number != 0: \n        if number in seen: \n          return False \n        seen.add(number) \n  for col in range(3): \n    seen = set() \n    for row in range(size): \n      number = puzzle[row][col] \n      if number != 0: \n        if number in seen: \n          return False \n        seen.add(number) \n  # and so on \n  return True", "category": "Python"}, {"instruction": "Scramble a given array so that it appears in a random order", "input": "[3, 7, 8, 2. 5]", "output": "def scramble(arr): \n  for i in range(len(arr) - 1): \n      j = random.randint(0, len(arr)-1) \n      arr[i], arr[j] = arr[j], arr[i] \n  return arr \n\nscramble([3, 7, 8, 2, 5])", "category": "Python"}, {"instruction": "Come up with some ideas to design a user interface for an online database", "input": "", "output": "Some ideas for designing a user interface for an online database include:\n- Using a search bar for users to easily find the information they are looking for quickly. \n- Creating a filter search to allow users to narrow down relevant results as needed.\n- Offering a progress bar to show the status of database operations. \n- Creating a database dashboard to give users an overview of data. \n- Implementing database notifications to alert users when tasks or operations are completed or if any errors occur.", "category": "Python"}, {"instruction": "Compute the natural logarithm of 500 using Python.", "input": "", "output": "import math\n \nprint(math.log(500))", "category": "Python"}, {"instruction": "Construct a pandas dataframe from 4 dictionaries.", "input": "d1 = {\n 'name' : [\"Alice\", \"Bob\", \"Charlie\"],\n 'age' : [24, 45, 37],\n}\n \nd2 = {\n 'weight' : [87, 66, 65],\n 'height' : [165, 179, 173],\n}\n \nd3 = {\n 'income' : [3000, 4500, 4800],\n 'job' : [\"engineer\", \"teacher\", \"secretary\"],\n}\n \nd4 = {\n 'city' : [\"Glasgow\", \"New York\", \"Paris\"],\n 'country' : [\"Scotland\", \"USA\", \"France\"],\n}", "output": "import pandas as pd\n \ndf = pd.DataFrame({\n 'name': d1['name'], \n 'age': d1['age'],\n 'weight': d2['weight'],\n 'height': d2['height'],\n 'income': d3['income'],\n 'job': d3['job'],\n 'city': d4['city'],\n 'country': d4['country']\n })", "category": "Python"}, {"instruction": "Generate a random password with a combination of letters, numbers and special characters.", "input": "", "output": "import random\n\ndef generate_password():\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    numbers = '0123456789'\n    special_characters = '@#$%^&*()'\n    \n    password = ''\n\n    password += random.choice(letters)\n    password += random.choice(numbers)\n    password += random.choice(special_characters)\n\n    for _ in range(6):\n        source = random.choice([letters, numbers])\n        password += random.choice(source)\n\n    return password\n\nprint(generate_password())", "category": "Python"}, {"instruction": "Given two sorted lists of numbers, write a code to merge them.", "input": "list1 = [1, 2, 3, 4]\nlist2 = [3, 4, 5, 6]", "output": "def merge_lists(list1, list2):\n    merged_list = []\n \n    i, j = 0, 0 \n    while i < len(list1) and j < len(list2):\n        if list1[i] <= list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n \n    if i == len(list1):\n        merged_list.extend(list2[j:])\n    else:\n        merged_list.extend(list1[i:])\n \n    return merged_list\n\nmerged_list = merge_lists(list1, list2)\nprint(merged_list)", "category": "Python"}, {"instruction": "Reconstruct the given code snippet.", "input": "", "output": "def is_year_leap(year):\n    # leap year is divisible by 4\n    # However, if year is divisible by 100, then it is not a leap year\n    # Unless year is divisible by 400\n    leap_year = (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)\n    return leap_year", "category": "Python"}, {"instruction": "Create an array with 10 random numbers in the range of 1 to 50.", "input": "", "output": "import random\n\nnums = [random.randint(1, 50) for _ in range(10)]\nprint(nums) # Output: [7, 44, 15, 47, 1, 31, 29, 39, 33, 11]", "category": "Python"}, {"instruction": "Generate a piece of code that defines and calls a function in Python.", "input": "", "output": "def myFunction():\n   print(\"Hello World\")\nmyFunction()", "category": "Python"}, {"instruction": "Given a list of strings, use Python to print the count of strings that start with the letter 'a'.", "input": "string_list = [\"apple\",\"mango\",\"banana\",\"avocado\"]", "output": "count = 0\nfor string in string_list:\n    if string.startswith(\"a\"):\n        count += 1\n \nprint(\"The count of strings starting with 'a' is:\", count)", "category": "Python"}, {"instruction": "Define a class named \"Day\" in Python to represent a day of the week.", "input": "", "output": "class Day:\n    def __init__(self):\n        self.day = \"\"\n\n    def set_day(self, day):\n        self.day = day\n\n    def get_day(self):\n        return self.day", "category": "Python"}, {"instruction": "Write a class that simulates a die with 6 sides.", "input": "", "output": "import random\n\nclass Die:\n    def __init__(self):\n        self.sides = 6\n\n    def roll(self):\n        return random.randint(1, self.sides)", "category": "Python"}, {"instruction": "Write an application that keeps track of tasks and provides status updates for the tasks.", "input": "", "output": "import sys\n\n#Defining the Task class\nclass Task(object):\n    \"\"\"\n    Class to keep track of tasks and provide status updates.\n    \"\"\"\n    def __init__(self, name, status):\n        \"\"\"Initializing instance attributes\"\"\"\n        self.name = name\n        self.status = status\n        self.status_dict = {\n            \"Not Started\": 0,\n            \"In Progress\": 1,\n            \"Completed\": 2\n        }\n\n    def get_status(self):\n        \"\"\"Returns the current status of the task\"\"\"\n        return self.status\n\n    def set_status(self, status):\n        \"\"\"Method to update the status of the task\"\"\"\n        if(status not in self.status_dict.keys()):\n            sys.exit(\"Invalid status!! Please enter a valid status\")\n\n        #Valid status so updating the task's status\n        self.status = status", "category": "Python"}, {"instruction": "Recreate the same result from the given sample output.", "input": "Sample output:\n\n1\n11\n21\n1211\n111221", "output": "n = '1'\n\nfor x in range(5):\n    a, b = '', '' \n    count = 1\n  \n    for i in range(1, len(n)): \n        if(n[i] != n[i-1]): \n            a += str(count) \n            a += n[i-1] \n            count = 1\n        else: \n            count+=1\n    \n    if(n[i] == n[i-1]): \n        a += str(count) \n        a += n[i] \n  \n    n = a\n    print(n)", "category": "Python"}, {"instruction": "Generate a random password.", "input": "", "output": "import string\nimport random\n\ndef generate_password():\n    length = random.randint(12, 24)\n    pwd = ''.join(random.choice(string.ascii_letters + string.digits) for i in range(length))\n    return pwd", "category": "Python"}, {"instruction": "Write your own version of Fisher-Yates algorithm for shuffling an array.", "input": "", "output": "def shuffle(arr): \n    for i in range(len(arr)-1, 0, -1): \n        j = random.randint(0, i) \n        arr[i], arr[j] = arr[j], arr[i] \n    return arr", "category": "Python"}, {"instruction": "Parse this JSON data and print the names of all the users.", "input": "{ \n  \"users\": [\n    {\n      \"name\": \"John\"\n    },\n    {\n      \"name\": \"Jill\"\n    },\n    {\n      \"name\": \"Harry\"\n    }\n  ]\n}", "output": "import json \n\ndata = json.loads(input) \nfor user in data['users']: \n  print(user['name'])", "category": "Python"}, {"instruction": "Edit the following Python code to print a date in a human-readable form.", "input": "print(date.today())", "output": "from datetime import date \nprint(date.today().strftime(\"%B %d, %Y\"))", "category": "Python"}, {"instruction": "Create a loop that prints all numbers 1 to 100 with the exception of multiples of 5.", "input": "", "output": "for i in range(1,101):\n  if i % 5 != 0:\n    print(i)", "category": "Python"}, {"instruction": "Implement a decision tree as a class in Python.", "input": "", "output": "class DecisionTree:\n    def __init__(self,X,y):\n        self.X = X\n        self.y = y\n\n    def fit(self, X,y):\n        # Implement decision tree fitting algorithm\n\n    def predict(self,X):\n        # Implement decision tree prediction algorithm", "category": "Python"}, {"instruction": "Write a Python program to analyze the sentiment of a given text.", "input": "The restaurant food was terrible.", "output": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsia = SentimentIntensityAnalyzer()\nsentiment = sia.polarity_scores(input_text)\nprint(sentiment)\n# {'neg': 0.404, 'neu': 0.596, 'pos': 0.0, 'compound': -0.7424}", "category": "Python"}, {"instruction": "Iterate through a list and print only the elements that include the character 'a'.", "input": "list_items = [\"apple\", \"banana\", \"carrot\", \"durian\"]", "output": "for item in list_items:\n    if 'a' in item:\n        print(item)\n\n# Output\napple\nbanana\ncarrot", "category": "Python"}, {"instruction": "Create an array of length 10 and fill each element randomly from 0 to 9.", "input": "", "output": "import random\n\narr = []\nfor i in range(10):\n    arr.append(random.randint(0, 9))\n\nprint(arr)", "category": "Python"}, {"instruction": "Generate a random string of length 8 with characters from a-zA-Z0-9.", "input": "", "output": "import random\nimport string\n\ndef random_string():\n    letters = string.ascii_letters + string.digits\n    return ''.join(random.choice(letters) for i in range(8))", "category": "Python"}, {"instruction": "Given a string s and a list of words words, write a program to find all occurrences of words in the string s.", "input": "s = 'The quick brown fox jumps over the lazy dog.'\nwords = ['quick', 'fox', 'dog']", "output": "def find_words(s, words):\n    occurrence_indices = []\n    for word in words:\n        start = 0\n        while True:\n            index = s.find(word, start)\n            if index == -1:\n                break\n            else:\n                occurrence_indices.append(index)\n                start = index + 1\n    return occurrence_indices", "category": "Python"}, {"instruction": "Check if the following statement is a valid python syntax", "input": "Statement: for x in range(0, len(listname))", "output": "Yes, the statement is a valid Python syntax.", "category": "Python"}, {"instruction": "Use Python to filter out all the numbers divisible by 3 from a given list.", "input": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "def filter_list(numbers):\n    return [x for x in numbers if x % 3 == 0]\n\nfilter_list(numbers) # Output: [3, 6, 9]", "category": "Python"}, {"instruction": "Write a Python program to check if a substring is present in a set of strings", "input": "substring: \"abc\"\nstrings: [\"hoabcll\", \"aaabcbc\", \"abcbal\"]", "output": "True", "category": "Python"}, {"instruction": "Given a two-dimensional array, write a Python code to sum each row in the array and store it in a new array.", "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def sum_row_in_2d_array(arr):\n    result = []\n    # iterating through array\n    for sub_arr in arr:\n        sum=0\n        # iterating through sub array\n        for element in sub_arr:\n            sum += element\n        # Adding sum to result list\n        result.append(sum)\n \n    return result", "category": "Python"}, {"instruction": "Construct a for loop in Python to iterate through the list [3, 2, 5, 4, 6] in reverse order.", "input": "", "output": "for num in reversed([3, 2, 5, 4, 6]):\n    print(num)", "category": "Python"}, {"instruction": "Create a Python function that takes an object as an input and returns its names and values.", "input": "Input: {\"name\": \"John\", \"age\": 25, \"cities\": [\"New York\", \"Boston\"]}", "output": "def get_object_details(input_obj):\n    output = []\n    for key, value in input_obj.items():\n        if type(value) == list:\n            value = \", \".join(value)\n        output.append(f\"{key}: {value}\")\n    return \"\\n\".join(output)", "category": "Python"}, {"instruction": "Create a function to print out a multiplication table of two given multidimensional arrays.", "input": "arr1 = [ [1,2] , [3,4] ]\narr2 = [ [5,6] , [7,8] ]", "output": "def mult_table(arr1, arr2):\n    for i in range(len(arr1)):\n        for j in range(len(arr2[0])):\n            for k in range(len(arr2)):\n                print(arr1[i][k] * arr2[k][j], end=\" \")\n        print()\n\narr1 = [ [1,2] , [3,4] ]\narr2 = [ [5,6] , [7,8] ]\n\nmult_table(arr1, arr2)\n\n# Output: \n5 12 \n15 24", "category": "Python"}, {"instruction": "Write a code that takes a given list and sorts them using heapsort.", "input": "arr = [1, 6, 5, 4, 8, 2]", "output": "def heapsort(arr):\n    # Build the max heapify \n    n = len(arr) \n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n\n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i] # swap \n        heapify(arr, i, 0) \n\ndef heapify(arr, n, i): \n    largest = i # Initialize largest as root \n    l = 2 * i + 1     # left = 2*i + 1 \n    r = 2 * i + 2     # right = 2*i + 2 \n  \n    # check if left child of root exists and is \n    # greater than root \n    if l < n and arr[i] < arr[l]: \n        largest = l \n  \n    # check if right child of root exists and is \n    # greater than root \n    if r < n and arr[largest] < arr[r]: \n        largest = r \n  \n    # Change root, if needed \n    if largest != i: \n        arr[i],arr[largest] = arr[largest],arr[i] # swap \n  \n        # Heapify the root. \n        heapify(arr, n, largest) \n\n# Driver code \nif __name__ == \"__main__\":\n    arr = [1, 6, 5, 4, 8, 2]\n    heapsort(arr) \n    n = len(arr) \n    print (\"Sorted array is\") \n    for i in range(n): \n        print (\"%d\" %arr[i]),", "category": "Python"}, {"instruction": "Develop a machine learning model in Python to classify emails as either important or not important.", "input": "", "output": "import numpy as np\nimport pandas as pd\nimport sklearn\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Read the dataset\ndata = pd.read_csv('emails.csv')\n\n# Pre-process the dataset for label encoding and feature extraction\nlabel_encoder = LabelEncoder()\ny = label_encoder.fit_transform(data.category.values)\n\ntfidf_vectorizer = TfidfVectorizer(stop_words='english', min_df=2)\nX = tfidf_vectorizer.fit_transform(data.body.values)\n\n# Split the dataset into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train the Multinomial Naive Bayes model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\nscore = model.score(X_test, y_test)\nprint('Test accuracy: ', score)", "category": "Python"}, {"instruction": "Write a Python code to sort the names into ascending order.", "input": "names = [\"Vladimir Putin\",\"Joe Biden\",\"Xi Jinping\"]", "output": "names.sort()", "category": "Python"}, {"instruction": "What are the similarities between dictionaries and Lists in Python?", "input": "", "output": "Both dictionaries and lists are container data structures in Python which allow for the storage and retrieval of data. They are both mutable, meaning the contents can be updated, changed and manipulated. They also both contain an ordered sequence of elements, allowing for indexing into each one. However, dictionaries use a key:value pair, whereas lists contain only values.", "category": "Python"}, {"instruction": "Separate the numbers in the given string variable.", "input": "String: 1a2b34c", "output": "nums = [int(x) for x in my_string if x.isdigit()]", "category": "Python"}, {"instruction": "Create a function to combine two arrays, sorting first by grade in ascending order, and then by age in descending order.", "input": "Array 1: [['Tom', 10], ['Sam', 8], ['Bob', 8]]\nArray 2: [['Tom', 15], ['Sam', 12], ['Bob', 13]]", "output": "def combine(arr1, arr2): \n  res = [] \n  # Combine two arrays \n  for i in range(len(arr1)): \n    res.append(arr1[i] + arr2[i]) \n  \n  # Sort by grade in ascending order\n  res.sort(key=lambda x: x[1]) \n  \n  # Sort by age in descending order\n  res.sort(key=lambda x: x[2], reverse=True) \n  \n  return res", "category": "Python"}, {"instruction": "Given a matrix, write a program that finds its determinant in Python.", "input": "[[a, b], \u00a0[c, d]]", "output": "def determinant(matrix): \n  a = matrix[0][0]\n  b = matrix[0][1]\n  c = matrix[1][0]\n  d = matrix[1][1]\n  return a*d - b*c", "category": "Python"}, {"instruction": "Suggest ways to improve the performance of the following list implementation.", "input": "class List: \n  def __init__(self): \n    self.items = [] \n  \n  def append(self, item):\n    self.items.append(item) \n    \n  def remove(self, item): \n     self.items.remove(item)", "output": "class List: \n   def __init__(self): \n     self.items = [] \n   \n   def append(self, item):\n     if item not in self.items:\n       self.items.append(item) \n       \n   def remove(self, item): \n      try:\n        self.items.remove(item)\n      except ValueError:\n        pass\n  \n   def remove_at_index(self, index):\n    del self.items[index]\n  \n   def search(self, item):\n    return item in self.items", "category": "Python"}, {"instruction": "How would you store the location of a person in a database?", "input": "", "output": "The location of a person can be stored in a database in the form of a latitude and longitude pair, as a set of geographic coordinates or as a physical address.", "category": "Python"}, {"instruction": "Design a function to get the length of the longest increasing subsequence in a given list of integers.", "input": "", "output": "def longest_increasing_subsequence_length(nums):\n    n = len(nums)\n    LIS = [1] * n\n\n    for i in range(1, n):\n        for j in range(0, i):\n            if nums[i] > nums[j] and LIS[i] < LIS[j] + 1:\n                LIS[i] = LIS[j] + 1\n\n    return max(LIS)", "category": "Python"}, {"instruction": "Write a function which takes a list of integers and returns an integer which is the product of all the integers in the list.", "input": "", "output": "def product_of_list(nums):\n    product = 1\n    for num in nums:\n        product *= num\n    return product", "category": "Python"}, {"instruction": "Given a Python list, display the total number of elements in the list.", "input": "mylist = [1, 2, 3, 4, 5]", "output": "The total number of elements in the list is 5.", "category": "Python"}, {"instruction": "Create a function that checks for a specific word in the string.", "input": "myString = \"This is a simple sentence.\"", "output": "def check_word(myString, word):\n    if word in myString:\n        return True\n    return False", "category": "Python"}, {"instruction": "Create a class \"Addition\" with a method called \"add\" which takes two integers as inputs and returns the sum of the two numbers?", "input": "", "output": "class Addition:\n    def add(self, x, y):\n        return x + y", "category": "Python"}, {"instruction": "Create a class named \"Vector\" with two attributes \"x\" and \"y\" and define a \"length\" method that returns the length of the vector.", "input": "", "output": "class Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def length(self):\n        return (self.x**2 + self.y**2)**0.5", "category": "Python"}, {"instruction": "Create a function that takes two arguments, \"start\" and \"end\", and returns a list of all the prime numbers between the two.", "input": "", "output": "def get_prime_numbers(start, end):\n    \"\"\"\n    Function to return a list of all the prime numbers between start and end\n    \"\"\"\n    prime_numbers = []\n    for num in range(start, end + 1):\n        if num > 1:\n            is_prime = True\n            for j in range(2, int(num/2) + 1):\n                if num % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                prime_numbers.append(num)\n    return prime_numbers\n    \nprint(get_prime_numbers(2, 10)) # prints [2, 3, 5, 7]", "category": "Python"}, {"instruction": "create a function to compare two strings and return a boolean depending on their equality or inequality.", "input": "string1 = 'hello' \nstring2 = 'world'", "output": "def compare_strings(string1, string2):\n    \"\"\"\n    This function will compare two strings and return a boolean \n    depending on their equality or inequality. \n    \"\"\"\n    is_same = string1 == string2\n    return is_same\n\nstring1 = 'hello' \nstring2 = 'world'\n\nprint(compare_strings(string1, string2))", "category": "Python"}, {"instruction": "Create a function that will validate if a given date is in the correct format.", "input": "date = '12/04/2021'", "output": "def validate_date(date):\n    \"\"\"\n    This function will validate if a given date is in the correct format.\n    \"\"\"\n    try:\n        year, month, day = date.split('/')\n        int(year)\n        int(month)\n        int(day)\n        isValidDate = True\n    except:\n        isValidDate = False\n    return isValidDate\n\ndate = '12/04/2021'\n\nprint(validate_date(date))", "category": "Python"}, {"instruction": "Write a code to create a list that preserves the order of the original input and contains only the odd numbers from it?", "input": "[1,2,3,4,5,6,7,8,9]", "output": "def odd_numbers_list(input_data):\n    \"\"\"Function to create a list that preserves the order of the original input and contains only the odd numbers from it\"\"\"\n    output_list = [] \n    for el in input_data: \n        if el % 2 != 0:\n            output_list.append(el) \n    return output_list\n\nif __name__ == '__main__':\n    input_data = [1,2,3,4,5,6,7,8,9]\n    output_list = odd_numbers_list(input_data)\n    print(output_list)", "category": "Python"}, {"instruction": "Using the input as a guide, write code that prints out a copy of the 2d matrix with its elements transposed.", "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]]", "output": "def transpose_matrix(matrix):\n    \"\"\"Function to transpose 2d list matrix\"\"\"\n    row = len(matrix) \n    col = len(matrix[0]) \n  \n    transpose = [[0 for j in range(row)] for i in range(col)] \n  \n    for i in range(row): \n        for j in range(col): \n            transpose[j][i] = matrix[i][j] \n  \n    for i in range(col): \n        print(transpose[i]) \n\nif __name__ == '__main__':\n    matrix = [[1,2,3],[4,5,6],[7,8,9]]\n    transpose_matrix(matrix)", "category": "Python"}, {"instruction": "Write a Python program that parses a JSON object and returns only the values of a specific key.", "input": "JSON object: {\n    \"name\": \"John\",\n    \"age\": 42,\n    \"location\": \"New York\"\n}\n\nKey: \"name\"", "output": "import json\n\n# Load JSON data\ndata_str = '''\n{\n    \"name\": \"John\",\n    \"age\": 42,\n    \"location\": \"New York\"\n}\n'''\ndata_dict = json.loads(data_str)\n\n# Get the value of the given key\nname = data_dict.get('name') # John", "category": "Python"}, {"instruction": "Change the following linked list into an array.", "input": "Linked list: 1->3->5->7->9", "output": "# Create a linked list\nclass Node: \n    def __init__(self, data): \n        self.data = data\n        self.next = None\n\n# Function to convert linked list to array\ndef list_to_array(head): \n    arr = []\n    if head is None: \n        return arr\n    cur = head\n    while cur is not None: \n        arr.append(cur.data) \n        cur = cur.next\n    return arr\n\narr = list_to_array(head) \nprint(arr)", "category": "Python"}, {"instruction": "Retrieve the data in the given URL.", "input": "URL: https://www.example.com/", "output": "import requests\n\nurl = 'https://www.example.com/'\n\n# Make an API call and store the response\nres = requests.get(url)\n\n# Retrieve the data\ndata = res.text", "category": "Python"}, {"instruction": "Generate a code to form a Pascal Triangle with the given input.", "input": "n = 5", "output": "def pascal(n): \n    # An auxiliary array to store \n    # generated pascal triangle values \n    arr =[[0 for x in range(n)] for x in range(n)] \n      \n    # Iterate through every line and  \n    # print integer(s) in it \n    for line in range(0, n): \n          \n        # Every line has number of  \n        # integers equal to line number \n        for i in range(0, line + 1): \n              \n            # First and last values  \n            # in every row are 1 \n            if (i == 0 or i == line): \n                arr[line][i] = 1\n                print(arr[line][i], end=\" \") \n            else: \n                arr[line][i] = (arr[line - 1][i - 1] +\n                                arr[line - 1][i]) \n                print(arr[line][i], end=\" \") \n        print(\"\\r\")", "category": "Python"}, {"instruction": "You are given two arrays, A and B. Write a program to determine if B is a subset of A.", "input": "A = [1, 2, 3, 4, 5]\nB = [2, 3, 5]", "output": "def is_subset(A, B):\n    for i in B:\n        if i not in A:\n            return False\n    \n    return True", "category": "Python"}, {"instruction": "You are given two matrices, M1 and M2. Write a python code to multiply them.", "input": "M1 : \n[[2, 3], \n [5, 6]]\n\nM2 : \n[[1, 2], \n [3, 4]]", "output": "def matrix_multiply(M1, M2):\n    M3 = [[0, 0], [0, 0]]\n    for i in range(len(M1)):\n        for j in range(len(M2[0])):\n            for k in range(len(M2)):\n                M3[i][j] += M1[i][k] * M2[k][j]\n    \n    return M3", "category": "Python"}, {"instruction": "What is a state machine in software engineering?", "input": "", "output": "A state machine in software engineering is a model of computation used to design programs and algorithms that have an input, a process, and an output. A state machine is built from a set of states, any of which can be the current state at any given time, and it transitions from one state to another in reaction to events or inputs. The process of the state machine is the set of predefined operations associated with each state and the set of transitions that dictate how the state machine moves from one state to another.", "category": "Python"}, {"instruction": "What type of loop can be used to iterate through the items of a list in Python?", "input": "", "output": "The most common type of loop for iterating through the items of a list in Python is the for loop. This loop iterates through each item in the list one by one, allowing the programmer to perform operations on each item in the list. For example:\n\nmy_list = [1, 2, 3]\nfor item in my_list:\n    print(item)\n\n# Output\n# 1\n# 2\n# 3", "category": "Python"}, {"instruction": "Write a function that takes an integer parameter and find the maximum of the three numbers with the help of ternary operator.", "input": "", "output": "def find_max_of_three(a, b, c):\n    \"\"\"Function that takes an integer parameter and find the maximum of the three numbers with the help of ternary operator\"\"\"\n    max_value = a if a > b and a > c else (b if b > a and b > c else c)\n    return max_value\n\nif __name__ == '__main__':\n    a = 1\n    b = 5\n    c = 3\n    max_value = find_max_of_three(a, b, c)\n    print(max_value)", "category": "Python"}, {"instruction": "Write a Python program to create a dictionary containing students and their scores.", "input": "", "output": "# Declare an empty dictionary\nscores = {}\n\n# Enter some students and their scores\nscores['student1'] = 90\nscores['student2'] = 85\nscores['student3'] = 100\n\n# Print the scores\nprint(scores)\n\n# Output - {'student1': 90, 'student2': 85, 'student3': 100}", "category": "Python"}, {"instruction": "Calculate the sum of all the multiples of 3 and 5 between 0 and n", "input": "n = 10", "output": "def sum_multiples(n):\n    result = 0\n    for i in range(1, n):\n        if i % 3 == 0 or i % 5 == 0:\n            result += i\n    return result\n\nif __name__ == '__main__':\n    print(sum_multiples(n))", "category": "Python"}, {"instruction": "Identify which line of code contains a syntax error?", "input": "def getFibonacciNumber(n):\n  a, b = 0, 1\n  for i in range 0, n\n    a, b = b, a + b\n  return a", "output": "The line \"for i in range 0, n\" contains a syntax error. The syntax for the for loop should be \"for i in range(0, n)\".", "category": "Python"}, {"instruction": "Identify the Python command to search a string for a specific keyword.", "input": "", "output": "string.find('keyword') or string.index('keyword')", "category": "Python"}, {"instruction": "Construct a for loop that prints out all prime numbers between 500 and 1000", "input": "", "output": "for i in range(500, 1000):\n    flag = 1\n    for j in range(2, i):\n        if i % j == 0:\n            flag = 0\n            break\n    if flag == 1:\n        print(i)", "category": "Python"}, {"instruction": "Implement a Fibonacci series generator using Python.", "input": "", "output": "def generate_fibonacci(n):\n a, b = 0, 1\n fibonacci_series = [a]\n for i in range(n-1):\n a, b = b, a+b\n fibonacci_series.append(b)\n return fibonacci_series", "category": "Python"}, {"instruction": "Write a class in Python to represent a division with two integers and the following operations: addition, subtraction, multiplication and division.", "input": "", "output": "class Division():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        \n    def add(self):\n        return self.x + self.y\n    \n    def subtract(self):\n        return self.x - self.y\n    \n    def multiply(self):\n        return self.x * self.y\n    \n    def divide(self):\n        return self.x / self.y\n    \n    \ndiv = Division(10, 5)\nprint(\"Addition of the two numbers:\", div.add())\nprint(\"Subtraction of the two numbers:\", div.subtract())\nprint(\"Multiplication of the two numbers:\", div.multiply())\nprint(\"Division of the two numbers:\", div.divide())", "category": "Python"}, {"instruction": "Write code to detect the dominant language in a string.", "input": "This is a test string with multiple languages, including French, Spanish, and English.", "output": "import langdetect\n\ndef detect_language(s):\n    \"\"\"\n    Detects the dominant language from a given string.\n\n    Parameters\n    ----------\n    s : str\n        A string containing multiple languages\n\n    Returns\n    -------\n    str\n        The dominant language found in the given string\n    \"\"\"\n    return langdetect.detect(s)\n\ntext = \"This is a test string with multiple languages, including French, Spanish, and English.\"\nlang = detect_language(text)\nprint('The dominant language found in the text is:', lang)", "category": "Python"}, {"instruction": "Train a machine learning model to classify cats and dogs.", "input": "", "output": "\"\"\"\nTrain a machine learning model to classify cats and dogs\n\"\"\"\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers import Activation, Dropout, Flatten, Dense\nfrom keras import backend as K\n\n# Setting up Image Data Generator\ntrain_data_dir = 'data/train'\nvalidation_data_dir = 'data/validation'\n\nimg_width, img_height = 100, 100\ntrain_datagen = ImageDataGenerator(\n rescale=1. / 255,\n shear_range=0.2,\n zoom_range=0.2,\n horizontal_flip=True)\n\ntest_datagen = ImageDataGenerator(rescale=1. / 255)\n\ntrain_generator = train_datagen.flow_from_directory(\n train_data_dir,\n target_size=(img_width, img_height),\n batch_size=32,\n class_mode='binary')\n\nvalidation_generator = test_datagen.flow_from_directory(\n validation_data_dir,\n target_size=(img_width, img_height),\n batch_size=32,\n class_mode='binary')\n\n# Setting up the model\nmodel = Sequential()\nmodel.add(Conv2D(32, (3, 3), input_shape=(img_width, img_height, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(32, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(64, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(64))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))\n\nmodel.compile(loss='binary_crossentropy',\n optimizer='rmsprop',\n metrics=['accuracy'])\n\n# Training the model\nmodel.fit_generator(\n train_generator,\n steps_per_epoch=2000,\n epochs=50,\n validation_data=validation_generator,\n validation_steps=800)", "category": "Python"}, {"instruction": "Explain how to detect prime numbers in Python.", "input": "", "output": "We can detect prime numbers in Python by using a for loop. The for loop will iterate over all numbers from 2 up to the given number. For each number we loop through, we check to see if the number is divisible by any other number greater than 1. If the number is divisible by any other number, then we know it is not a prime number. If the number is only divisible by 1 and itself, then we know it is a prime number.", "category": "Python"}, {"instruction": "Suggest a method in Python for sorting a list of strings on the basis of their length in ascending order.", "input": "", "output": "We can use the built-in sorted() function to sort the list of strings on the basis of their length in ascending order. The syntax for sorting is as follows:\n\nsorted(list_of_strings, key=len)\n\nwhere 'list_of_strings' is the list of strings we want to sort and 'len' is the length function for getting the length of each string.", "category": "Python"}, {"instruction": "Generate pseudo code for a function that swaps two numbers x and y.", "input": "", "output": "// Function to swap two numbers\ndef swap(x, y):\n    // Store the value of x into a temporary variable  \n    temp = x\n\n    // Store y in x  \n    x = y\n\n    // Store temp in y  \n    y = temp\n    return x,y", "category": "Python"}, {"instruction": "Write a python code to find median of two sorted arrays.", "input": "A = [1,4,6,7]B = [3,5,8,9]", "output": "def find_median(A, B):\n    \"\"\"Function to find median of two sorted arrays\"\"\"\n    m = len(A)\n    n = len(B)\n    if m > n:\n        A,B,m,n = B,A,n,m\n    imin, imax, half_len = 0, m , (m+n+1) // 2\n    while imin <= imax:\n        i = (imin+imax) // 2\n        j = half_len -i\n        if i < m and B[j-1] > A[i]:\n            # i is too small, must increase it\n            imin = i + 1\n        elif i > 0 and A[i-1] > B[j]:\n            # i is too big, must decrease it\n            imax = i - 1\n        else:\n            # i is perfect\n            if i == 0:\n                max_of_left = B[j-1] \n            elif j == 0:\n                max_of_left = A[i-1] \n            else:\n                max_of_left = max(A[i-1], B[j-1]) \n \n            if (m + n) % 2 == 1:\n                return max_of_left \n \n            if i == m:\n                min_of_right = B[j] \n            elif j == n:\n                min_of_right = A[i] \n            else:\n                min_of_right = min(A[i], B[j]) \n \n            return (max_of_left + min_of_right) / 2.0\n\nif __name__ == '__main__':\n    A = [1,4,6,7]\n    B = [3,5,8,9]\n    median = find_median(A, B)\n    print(median)", "category": "Python"}, {"instruction": "Identify all the statements that are erroneous or have logical errors.", "input": "a = 2\nb = 1\nif a > b\n    print(\"a is greater than b\")\nelif a == b\n    print(\"a is equal to b\")\nelse\n    print(\"b is greater than a\")", "output": "The statements that are erroneous or have logical errors are:\n1) There is no colon (:) after the 'if' and 'elif' statements\n2) There is no colon (:) after the 'else' statement.\n3) The parentheses after 'print' are unnecessary.", "category": "Python"}, {"instruction": "Write a code to generate a dictionary that contains the frequencies of all English alphabets in a given sentence.", "input": "Sentence: The brain is a powerful tool", "output": "def get_alphabet_frequencies(sentence):\n    \"\"\"Function to generate a dictionary that contains the frequencies of all English alphabets in a given sentence\"\"\"\n    alphabet_freq = dict()\n    for el in sentence:\n        if el.isalpha():\n            el = el.lower()\n            if el in alphabet_freq:\n                alphabet_freq[el] += 1\n            else:\n                alphabet_freq[el] = 1\n    return alphabet_freq\n\nif __name__ == '__main__':\n    sentence = \"The brain is a powerful tool\"\n    alphabet_freq = get_alphabet_frequencies(sentence)\n    print(alphabet_freq)", "category": "Python"}, {"instruction": "Create a hash table in Python using a dictionary.", "input": "", "output": "h = {}\n\n# Add key:value pairs\nh['key1'] = 'value1'\nh['key2'] = 'value2'\nh['key3'] = 'value3'", "category": "Python"}, {"instruction": "Create a nested For loop in Python with the outer loop counting from 0  to 3 and the inner loop counting from 5 to 10.", "input": "", "output": "for i in range(0,4):\n  for j in range(5,11):\n    print(\"outer loop at: \"+str(i)+\" inner loop at: \"+str(j))", "category": "Python"}, {"instruction": "Write an API call in Python using the request module to get data from a URL.", "input": "https://www.example.com", "output": "import requests \n\nr = requests.get(url = \"https://www.example.com\") \ndata = r.json()", "category": "Python"}, {"instruction": "Create a for loop in Python for the range between 0 and 10.", "input": "", "output": "for i in range(0,11):\n\tprint(i)", "category": "Python"}, {"instruction": "Create a softmax activation function in Python.", "input": "", "output": "def softmax(x):\n  \"\"\"Compute softmax values for each sets of scores in x.\"\"\"\n  e_x = np.exp(x - np.max(x))\n  return e_x / e_x.sum(axis=0)", "category": "Python"}, {"instruction": "Code a solution in Python to replace all the occurences of a specific word in a string.", "input": "sentence = \"I like apples\"\nword = \"apples\"\nreplacement = \"bananas\"", "output": "def replace_word(sentence, word, replacement):\n    words = sentence.split(\" \")\n    new_sentence = \"\"\n    for w in words:\n        if w == word:\n            w = replacement\n        new_sentence += w + \" \"\n    return new_sentence\n\nsentence = \"I like apples\"\nword = \"apples\"\nreplacement = \"bananas\"\n\nprint(replace_word(sentence, word, replacement))", "category": "Python"}, {"instruction": "Write a function that takes a single parameter and returns the absolute value of the parameter.", "input": "", "output": "def absolute_value(x):\n    if x < 0:\n        return -x\n    else:\n        return x", "category": "Python"}, {"instruction": "Create a class with two methods, one to return the name and the other to return the age.", "input": "", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def get_name(self):\n        return self.name\n\n    def get_age(self):\n        return self.age", "category": "Python"}, {"instruction": "Write a function, which given an array and a number, returns the array with the number added.", "input": "arr = [1, 2, 3, 4]\nnum = 10", "output": "def add_num(arr, num):\n    return [x + num for x in arr]", "category": "Python"}, {"instruction": "Suggest a vector representation for the following phrases.", "input": "happy, angry", "output": "happy = [1, 0, 0, 0]\nangry = [0, 1, 0, 0]", "category": "Python"}, {"instruction": "Combine a loop and a conditional statement to output the following", "input": "[2, 3, 4, 5]", "output": "arr = [2, 3, 4, 5] \n\nfor i in arr: \n    if i % 2 == 0: \n        print(i) \n\n# Output: \n2\n4", "category": "Python"}, {"instruction": "Suggest a technique to optimize memory usage", "input": "", "output": "One way to optimize memory usage is to use strategic data structures like hash tables and trees that can store data in a more space-efficient manner. Additionally, one can use code optimization techniques such as code reuse and memory caching to reduce memory usage. One should also think carefully about data structure design choices, such as choosing between an array and linked list, to minimize memory usage.", "category": "Python"}, {"instruction": "Suggest a way to secure user passwords", "input": "", "output": "One way to secure user passwords is to use a secure hash algorithm such as bcrypt, scrypt, etc. to hash the passwords before storing them in the database. This ensures that even if the passwords are exposed, they will not be easily readable. Furthermore, it is important to use a secure server and to monitor the database for any suspicious activity.", "category": "Python"}, {"instruction": "Write a user authentication code in Python", "input": "", "output": "def authentication(username,password): \n    if username == \"username\" and password == \"password\": \n        print (\"Login successful\") \n    else: \n        print (\"Incorrect username or password\") \n\nusername = input(\"Enter your username: \")\npassword = input(\"Enter your password: \")\n\nauthentication(username, password)", "category": "Python"}, {"instruction": "Update the following function so that it returns the greatest among three numbers", "input": "def find_max(a, b):\n    if a > b:\n        return a\n    else:\n        return b", "output": "def find_max(a, b, c):\n    if a >= b and a >= c:\n        return a\n    elif b >= a and b >= c:\n        return b\n    else:\n        return c", "category": "Python"}, {"instruction": "Rewrite the following code snippet so that it is compatible with Python 3", "input": "sum = 0\nfor num in range(10):\n   sum = sum + num\nprint sum", "output": "sum = 0\nfor num in range(10):\n   sum += num\n\nprint(sum)", "category": "Python"}, {"instruction": "Define a command line application that prints \u201cHello, world.\u201d", "input": "", "output": "import argparse\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\"--print_hello\", help=\"print hello, world\", action=\"store_true\")\n\nif __name__ == \"__main__\":\n    args = parser.parse_args()\n    \n    if args.print_hello:\n       print(\"Hello, world.\")", "category": "Python"}, {"instruction": "Write a Python algorithm to find the most common value in an array.", "input": "arr = [1, 2, 3, 3, 3, 3, 4, 4, 5]", "output": "def most_common(arr):\n    freq = {}\n    \n    # Count the frequency of each element\n    for el in arr:\n        if el not in freq:\n            freq[el] = 1\n        else:\n            freq[el] += 1\n            \n    # Find the maximum frequency\n    max_freq = -1\n    for el, freq in freq.items():\n        max_freq = max(max_freq, freq)\n    \n    # Find the element with maximum frequency\n    most_common_el = None\n    for el, freq in freq.items():\n        if freq == max_freq:\n            most_common_el = el\n    \n    return most_common_el", "category": "Python"}, {"instruction": "Create a program to convert a given time in GMT form to local time.", "input": "", "output": "from datetime import datetime, timezone\n\ndef local_time(gmt_time):\n    utc_time = datetime.fromisoformat(gmt_time.replace(\"Z\", \"+00:00\"))\n \n    local_time = utc_time.astimezone()\n \n    return local_time.isoformat()", "category": "Python"}, {"instruction": "Given a string s and an integer k, write a code to find the kth most frequent element in the string", "input": "String s: \"hello world hello\"\nInteger k: 2", "output": "# Counting frequencies \ncounts = dict() \nwords = s.split(' ') \nfor word in words: \n    if word in counts: \n        counts[word] += 1\n    else: \n        counts[word] = 1\n  \n# Getting the kth most frequent element \nkth_most_frequent = sorted(counts, key = counts.get, reverse = True)[k-1] \n  \nprint(kth_most_frequent) \n\n# Output: hello", "category": "Python"}, {"instruction": "Construct a for loop in Python to print the array in descending order.", "input": "my_array = [4, 3, 5, 7, 1]", "output": "for i in sorted(my_array, reverse=True):\n  print(i)\n\n# Output:\n# 7\n# 5\n# 4\n# 3\n# 1", "category": "Python"}, {"instruction": "Generate a Python code to add two numbers using a lambda expression.", "input": "num1 = 10\nnum2 = 25", "output": "add = lambda num1, num2: num1 + num2\n\nprint(add(num1, num2))  # Output: 35", "category": "Python"}, {"instruction": "Create a dictionary of items with the corresponding price in Python.", "input": "items = ['book', 'pen', 'chair']\nprices = [10, 2, 5]", "output": "prices_dict = dict(zip(items, prices))\n# prices_dict = {'book': 10, 'pen': 2, 'chair': 5}", "category": "Python"}, {"instruction": "Create a script in Python which takes a number as an argument and prints its corresponding nth Fibonacci number.", "input": "", "output": "def fibonacci(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)", "category": "Python"}, {"instruction": "Create a user interface to display a chart showing the number of people of a certain gender and age group.", "input": "Sample JSON data to be used: \n\n[\n  {\n    \"name\": \"John\",\n    \"age\": 25,\n    \"gender\": \"male\"\n  },\n  {\n    \"name\": \"Jane\",\n    \"age\": 22,\n    \"gender\": \"female\"\n  },\n  {\n    \"name\": \"Bob\",\n    \"age\": 28,\n    \"gender\": \"male\"\n  },\n  {\n    \"name\": \"Jill\",\n    \"age\": 24,\n    \"gender\": \"female\"\n  }\n]", "output": "import json\nimport plotly.graph_objs as go\n\ndef create_chart():\n    data = json.load('data.json')\n    males = 0 \n    females = 0\n    male_ages = [0] * 100\n    females_ages = [0] * 100\n\n    # count males/females and age group \n    for person in data:\n        if person['gender'] == 'male':\n            males += 1\n            age = int(person['age'])\n            male_ages[age] += 1\n        else:\n            females += 1\n            age = int(person['age'])\n            females_ages[age] += 1\n\n    # create data\n    data = [\n        go.Bar(\n            name='Males',\n            x=list(range(100)),\n            y=male_ages\n        ),\n        go.Bar(\n            name='Females',\n            x=list(range(100)),\n            y=females_ages\n        )\n    ]\n\n    # Create Layout\n    layout = go.Layout(\n        title='Number of People by Gender and Age Group',\n        yaxis=dict(title='Number of People'),\n        xaxis=dict(title='Age')\n    )\n\n    # Create Figure\n    figure = go.Figure(data=data, layout=layout)\n\n    # Plot and save the chart\n    figure.show()\n    figure.write_image('gender_age.png')\n\ncreate_chart()", "category": "Python"}, {"instruction": "Create a function in Python which takes a string as an argument and returns the first character of the string in upper case.", "input": "", "output": "def first_upper_char(input_string):\n    if len(input_string) == 0:\n        return ''\n    else:\n        return input_string[0].upper()", "category": "Python"}, {"instruction": "Develop a program that prints out the output of the following expression.", "input": "[2, 4, 6, 8]", "output": "def expression_output(lst):\n    s = 0\n    for i in lst:\n        s += i**2 - 5*i + 6\n    return s", "category": "Python"}, {"instruction": "Write a python script to identify a palindrome from a given input string", "input": "inputString = \"abacab\"", "output": "def checkPalindrome(inputString): \n  \n    # reverse the given string \n    reverseString = inputString[::-1] \n  \n    # check if the string is equal to its reverse \n    if (inputString == reverseString): \n        return True\n    else: \n        return False\n  \n# Driver code \nif __name__ == \"__main__\": \n    inputString = \"abacab\"\n    print(checkPalindrome(inputString))", "category": "Python"}, {"instruction": "Create a Python dictionary that includes the keys \"name\", \"age\", and \"location\", and set the values to your name, age, and location.", "input": "", "output": "my_dict = {\n \"name\": \"John Smith\",\n \"age\": 28,\n \"location\": \"New York\"\n}", "category": "Python"}, {"instruction": "Write a Python script that converts the number 122 to binary.", "input": "", "output": "def dec_to_bin(n):\n binary_num = bin(n) \n print(binary_num[2:])\ndec_to_bin(122)", "category": "Python"}, {"instruction": "Write a code for creating a Fibonacci sequence", "input": "n = 10", "output": "def fibonacci_seq(n):\n    seq = [0, 1]\n    for i in range(2, n):\n        seq.append(seq[i-1] + seq[i-2])\n    return seq\n\nif __name__ == '__main__':\n    n = 10\n    result = fibonacci_seq(n)\n    print(result)  # prints [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "category": "Python"}, {"instruction": "Create a program to find the maximum length common subsequence of two given strings.", "input": "String1: \"abcdgf\" \nString2: \"abcdhfe\"", "output": "def find_max_subseq(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    dp = [[0 for _ in range(n2 + 1)] for _ in range(n1 + 1)]\n\n    for i in range(1, n1 + 1):\n        for j in range(1, n2 + 1):\n            if(str1[i - 1] == str2[j - 1]):\n                dp[i][j] = dp[i - 1][j - 1] + 1 \n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n1][n2]\n\nif __name__ == '__main__':\n    str1 = \"abcdgf\"\n    str2 = \"abcdhfe\"\n    result = find_max_subseq(str1, str2)\n    print(result)  # prints 5", "category": "Python"}, {"instruction": "Write code for a substring search", "input": "String: \"Hello World\"\nSubstring: \"llo\"", "output": "def search_substring(string, substr):\n    if substr in string:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    string = \"Hello World\"\n    substr = \"llo\"\n    result = search_substring(string, substr)\n    print(result)  # prints True", "category": "Python"}, {"instruction": "Convert a given number from degrees to radians.", "input": "90", "output": "def deg_to_rad(deg):\n    return (deg * 3.14)/180\n    \nif __name__ == '__main__':\n    deg = 90\n    rad = deg_to_rad(deg)\n    print(rad)  # prints 1.571", "category": "Python"}, {"instruction": "Write a code to split a list of numbers into two sets with equal sum", "input": "[1, 2, 3, 4, 5, 6, 7]", "output": "def split_list(list):\n    start = 0\n    end = len(list) - 1\n\n    left_sum = 0\n    right_sum = sum(list[start:end+1])\n\n    while start < end:\n        right_sum -= list[end]\n        if left_sum == right_sum:\n            break\n        left_sum += list[start]\n        start += 1\n\n    if left_sum == right_sum:\n        return list[:start], list[start:]\n    else:\n        return None\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    left, right = split_list(arr)\n    print(\"left set:\", left)  # prints [1, 2, 3, 4]\n    print(\"right set:\", right)  # prints [5, 6, 7]", "category": "Python"}, {"instruction": "Using a try-except statement, write a Python code to handle a ValueError which arises if the input is not a number.", "input": "", "output": "try:\n  input_num = int(input(\"Enter a number: \"))\nexcept ValueError:\n  print(\"Please enter a valid number\")", "category": "Python"}, {"instruction": "Create a Python class for a product that includes data fields for name, description, and price.", "input": "", "output": "class Product:\n  def __init__(self, name, description, price):\n    self.name = name\n    self.description = description\n    self.price = price\n\n  def __str__(self):\n    return f\"Name: {self.name}\\nDescription: {self.description}\\nPrice: {self.price}\"", "category": "Python"}, {"instruction": "Construct a Python script to print a specific character from a string.", "input": "str = \"Hello world!\"\nindex = 5", "output": "testString = \"Hello world!\"\nprint(testString[index])\n# Output will be: w", "category": "Python"}, {"instruction": "How would you use an if-else statement to test whether a number is even or odd?", "input": "", "output": "def test_even_odd(num):\n  if num % 2 == 0:\n    print(\"The number is even\")\n  else:\n    print(\"The number is odd\")", "category": "Python"}, {"instruction": "Write a code to delete a node from a given BST.", "input": "", "output": "# Node class to define a node of a BST \nclass Node(object): \n  \n    # Constructor \n    def __init__(self, data): \n        self.data = data \n        self.left = None\n        self.right = None\n  \n# Function to delete a given node from BST \ndef delete_node(root, key): \n  \n    # base case \n    if root is None: \n        return None\n  \n    # If the key to be delete is smaller than the root's \n    # key then it lies in left subtree \n    if key < root.data: \n        root.left = delete_node(root.left, key) \n  \n    # If the kye to be delete is greater than the root's key \n    # then it lies in right subtree \n    elif(key > root.data): \n        root.right = delete_node(root.right, key) \n  \n    # if key is same as root's key, then this is the node \n    # to be deleted \n    else: \n        # Node with only one child or no child \n        if root.left is None : \n            temp = root.right \n            root = None\n            return temp \n              \n        elif root.right is None : \n            temp = root.left \n            root = None\n            return temp \n  \n        # Node with two children: Get the inorder successor \n        # (smallest in the right subtree) \n        temp = find_min(root.right) \n  \n        # Copy the inorder successor's content to this node \n        root.data = temp.data \n  \n        # Delete the inorder successor \n        root.right = delete_node(root.right , temp.data) \n  \n  \n    return root \n  \n\"\"\" Helper Functions \"\"\"\n  \n# Function to find the minimum node \ndef find_min(node): \n    current = node \n  \n    # loop down to find the leftmost leaf \n    while(current.left is not None): \n        current = current.left  \n  \n    return current", "category": "Python"}, {"instruction": "Import a module in Python and store it in a variable named \u201cimport_module\u201d.", "input": "", "output": "import_module = importlib.import_module(\"<module name>\")", "category": "Python"}, {"instruction": "Write a code snippet for a function that deletes a specific element from an array.", "input": "", "output": "def delete_element(arr, element):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == element:\n            while count < len(arr)-1:\n                arr[i] = arr[i+1]\n                i+=1\n            count+=1\n    arr.pop()\n    return arr", "category": "Python"}, {"instruction": "Why is a dictionary in Python often called an associative array?", "input": "", "output": "A dictionary in Python is often called an associative array because of the manner in which it stores data. The structure of a dictionary maps keys (strings, numbers, etc.) to their associated values in an associative manner, as in a mathematical mapping or function. This makes dictionaries an ideal choice for storing key-value pairs or to associate an item of data with a particular value.", "category": "Python"}, {"instruction": "Using the comment as a guide, fill in the gaps in the following code.", "input": "input_list = [1, 2, 3, 4]\n\ndef transform_list (input_list):\n    '''Transform the list by adding 5 to each element'''\n    # TODO", "output": "input_list = [1, 2, 3, 4]\n\ndef transform_list (input_list):\n    '''Transform the list by adding 5 to each element'''\n    transformed_list = [x+5 for x in input_list]\n    return transformed_list", "category": "Python"}, {"instruction": "Use Python to generate a random string of length 8 using lowercase alphabetic characters.", "input": "", "output": "import random\n\ndef random_string():\n  chars = 'abcdefghijklmnopqrstuvwxyz'\n  return ''.join(random.choice(chars) for i in range(8))\n\nrandom_string() // 'fldmgnkd'", "category": "Python"}, {"instruction": "Define a function called my_function that will take a string as an argument and returns the string with all the vowels removed.", "input": "", "output": "def my_function(string):\n    vowels = 'aeiouAEIOU'\n    newString = ''\n    for char in string:\n       if char not in vowels:\n          newString += char\n    return newString", "category": "Python"}, {"instruction": "Write a code in Python to count the number of words in the sentence \"Hello World\".", "input": "", "output": "# Count the number of words in the sentence\nsentence = \"Hello World\"\n\nnum_words = len(sentence.split())\n\nprint(num_words) # prints 2", "category": "Python"}, {"instruction": "Sort the following list using a bubble sort algorithm.", "input": "[36, 71, 16, 21, 73]", "output": "# Bubble sort function\ndef bubble_sort(my_list):\n    # Do n times\n    for i in range(0, len(my_list) - 1):\n        # Do n - i - 1 times\n        for j in range(0, len(my_list) - 1 - i):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n    return my_list\n\n# Test data\nmy_list = [36, 71, 16, 21, 73]\n\n# Call the function\nsorted_list = bubble_sort(my_list)\n\nprint(sorted_list) # prints [16, 21, 36, 71, 73]", "category": "Python"}, {"instruction": "Write a Python function to print a string of given length n filled with asterisks.", "input": "", "output": "def print_asterisks(n):\n    for i in range(n):\n        print(\"*\", end=\"\")\n    print(\"\")", "category": "Python"}, {"instruction": "Write the code to print a given table format in Python.", "input": "Table with 4 columns and 5 rows", "output": "for i in range(1,6):\n    print('{:<10}{:<10}{:<10}{:<10}'.format(i, i**2, i**3, i**4))", "category": "Python"}, {"instruction": "Input a two-dimensional array and calculate the sum of each row.", "input": "arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def row_sum(arr): \n    row_sum = [] \n    for row in arr:\n        sum = 0 \n        for ele in row: \n            sum += ele \n        row_sum.append(sum) \n    return row_sum", "category": "Python"}, {"instruction": "Create a function that takes a 2D array of numerical values and returns the number of times the maximum value appears.", "input": "my_array = [[1, 2, 4, 1],\n            [2, 3, 3, 2],\n            [3, 4, 3, 3]]", "output": "def count_max(arr):\n    max_val = 0\n    count = 0\n    for row in arr:\n        max_val = max(max_val, max(row))\n\n    for row in arr:\n        if max(row) == max_val:\n            count += 1\n    \n    return count", "category": "Python"}, {"instruction": "Code a function to clamp a given number between a minimum value and maximum value.", "input": "Number: 8, Minimum: 3, Maximum: 10", "output": "def clamp_number(num, min_value, max_value):\n    if num < min_value: \n        return min_value \n    elif num > max_value: \n        return max_value \n    else: \n        return num", "category": "Python"}, {"instruction": "Print out the string formed by repeating each character in a given string n times.", "input": "String: \"abc\", n: 3", "output": "def repeat_string(string, n):\n    repeated = \"\"\n    for letter in string:\n        for _ in range(n):\n            repeated += letter\n    return repeated", "category": "Python"}, {"instruction": "Write a code to get the top 10 trending topics on Twitter with their volume using the Twitter API.", "input": "", "output": "\"\"\"\nGet the top 10 trending topics on Twitter with their volume using the Twitter API\n\"\"\"\n\nimport tweepy\n\n#Authenticate to Twitter\nauth = tweepy.OAuthHandler(\"CONSUMER_KEY\", \"CONSUMER_SECRET\")\nauth.set_access_token(\"ACCESS_KEY\", \"ACCESS_SECRET\")\n\n#Create API Object\napi = tweepy.API(auth)\n\n#Get top 10 trending topics\ntrends = api.trends_place(23424975) # 23424975 is the WOEID code for the US\n\n#Print the top 10 trending topics\nfor trend in trends[0][\"trends\"][:10]:\n    print(trend[\"name\"] + \" (Volume: \" + str(trend[\"tweet_volume\"]) + \")\")", "category": "Python"}, {"instruction": "Develop an algorithm in Python to determine whether two strings are anagrams.", "input": "", "output": "def is_anagram(string1, string2):\n    # Create a dictionaries for strings\n    string1_dict = {}\n    string2_dict = {}\n  \n    # Add the chars from each string to the dictionaries\n    for char in string1:\n        if char not in string1_dict:\n            string1_dict[char] = 1\n        else:\n            string1_dict[char] += 1\n    \n    for char in string2:\n        if char not in string2_dict:\n            string2_dict[char] = 1\n        else:\n            string2_dict[char] += 1\n    \n    # Check if the dictionaries have the same entries\n    for key in string1_dict:\n        if key not in string2_dict:\n            return False\n        elif string1_dict[key] != string2_dict[key]:\n            return False\n    \n    return True\n  \n# Test the algorithm\nstring1 = \"listen\"\nstring2 = \"silent\"\n\nif(is_anagram(string1, string2)):\n    print(\"The strings are anagrams\")\nelse:\n    print(\"The strings are not anagrams\")", "category": "Python"}, {"instruction": "Write a Python function that takes an array of strings as an argument and returns a boolean.", "input": "", "output": "def check_array(arr):\n  if len(arr) == 0:\n    return False\n\n  for str in arr:\n    if len(str) == 0:\n      return False\n   \n  return True", "category": "Python"}, {"instruction": "Create a new Python dictionary with numbers 1-10 as keys and their corresponding squares as values.", "input": "", "output": "squares = {1:1, 2:4, 3:9, 4:16, 5:25, 6:36, 7:49, 8:64, 9:81, 10:100}", "category": "Python"}, {"instruction": "How do you calculate the sum of a list of numbers in Python?", "input": "", "output": "The sum of a list of numbers in Python can be calculated using the built-in sum() function. This function takes an iterable object (such as a list or tuple) containing numbers as its argument and returns the sum of all the elements in the object. For example, sum([1,2,3]) will return 6.", "category": "Python"}, {"instruction": "Write a Python code that prints out the first 5 elements of a tuple.", "input": "", "output": "tup=(1,2,3,4,5,6,7,8,9,10)\n\nfor i in range(0,5): \n    print (tup[i])", "category": "Python"}, {"instruction": "How can you sort an array using insertion sort?", "input": "", "output": "Insertion sort is a sorting algorithm in which each item of the array is inserted at its correct position in the sorted list. It involves scanning the array and comparing each element with its adjacent elements in the array. If the element is smaller than its neighbors, it is swapped with its left neighbor, and if the element is larger, it is swapped with its right neighbor. This process is repeated until the array is sorted.", "category": "Python"}, {"instruction": "Create a program to find the longest substring with unique characters", "input": "", "output": "def longest_substring(string): \n    n = len(string) \n  \n    ''' Initialization of stings, \n    a and b ''' \n    a = \"\" \n    b = \"\"  \n  \n    ''' Initialization of maximum length substring \n    having distinct characters ''' \n    maxlen = 0  \n  \n    ''' 1. Pick starting point \n    2. intialise substrng \"a\"\n    3. Find the longest such \n    substring by comparing \n    current and previous  \n    substring ''' \n    for i in range(n):\n        a += string[i] \n        b = \"\" \n        for j in range(i + 1, n): \n            if string[j] not in a:              \n                b += string[j] \n            else: \n                break\n        if len(a) > maxlen: \n            maxlen = len(a) \n        a += b\n    return maxlen", "category": "Python"}, {"instruction": "Construct a program that can calculate the factorial of a number using a while loop", "input": "", "output": "def factorial_while(n):\n    factorial = 1\n    while n>0:\n        factorial = factorial * n\n        n = n - 1\n    return factorial", "category": "Python"}, {"instruction": "Write a function to compute the factorial of a number using recursion.", "input": "", "output": "def factorial_recursion( n ):\n   if n == 1:\n       return n\n   else:\n       return n * factorial_recursion( n - 1 )", "category": "Python"}, {"instruction": "Analyze the given text using opinion mining.", "input": "The new iPhone is awesome, I love it!", "output": "import nltk \nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer \nsid = SentimentIntensityAnalyzer() \nss = sid.polarity_scores(text) \n\n# Output\n{'neg': 0.0, 'neu': 0.49, 'pos': 0.51, 'compound': 0.7717}", "category": "Python"}, {"instruction": "Translate the following Python programme into JavaScript.", "input": "num1 = 8\nnum2 = 0\n\nif num1 > num2:\n  print(\"num1 is greater than num2\")\nelse:\n  print(\"num2 is greater than num1\")", "output": "let num1 = 8;\nlet num2 = 0;\n\nif (num1 > num2) {\n  console.log(\"num1 is greater than num2\");\n} else {\n  console.log(\"num2 is greater than num1\");\n}", "category": "Python"}, {"instruction": "Use NumPy to create a 3x3 array of random numbers from 0 to 1.", "input": "", "output": "import numpy as np\narr = np.random.rand(3, 3)\nprint(arr)\n\n# Output\n[[0.78000621 0.36251339 0.91162219]\n [0.52734163 0.56699849 0.03191476]\n [0.81245571 0.21147751 0.72691151]]", "category": "Python"}, {"instruction": "Read the given JSON data and display the value of the \"Name\" field.", "input": "{\n  \"Name\": \"Text Analyzer\",\n  \"Version\": \"1.0.0\",\n  \"Author\": \"John Doe\"\n}", "output": "import json\n\n# Reading data\ndata = {\n  \"Name\": \"Text Analyzer\",\n  \"Version\": \"1.0.0\",\n  \"Author\": \"John Doe\"\n}\n\n# Printing the value of the \"Name\" field\nprint(json.dumps(data['Name']))\n\n# Output\nText Analyzer", "category": "Python"}, {"instruction": "Find the similarity between two given sentences using NLTK library.", "input": "sentence1 = \"This has been an exciting journey\"\nsentence2 = \"It's been a thrilling ride\"", "output": "import nltk\nfrom nltk.corpus import wordnet\nsentence1 = \"This has been an exciting journey\"\ns1 = nltk.word_tokenize(sentence1) \nsentence2 = \"It's been a thrilling ride\"\ns2 = nltk.word_tokenize(sentence2) \n\n# First we convert the words into their respective synonyms\nsyn1 = []\nfor word in s1:\n    for syn in wordnet.synsets(word): \n        for l in syn.lemmas(): \n            syn1.append(l.name())\n\nsyn2 = []\nfor word in s2:\n    for syn in wordnet.synsets(word): \n        for l in syn.lemmas(): \n            syn2.append(l.name())\n\n# Calculating similarity using Path_Similarity \nsimilarity = []\nfor word1 in syn1:\n    for word2 in syn2:\n        p_sim = wordnet.path_similarity(wordnet.synset(word1),wordnet.synset(word2))\n        similarity.append(p_sim)\n       \n# Calculate the average of all similarity scores\nresult = sum(similarity)/len(similarity)\n\n# Output\n0.6521739130434783", "category": "Python"}, {"instruction": "Suggest a way to complete the following Python program which takes two strings as input and prints out the longer string.", "input": "first_str = 'hello'\nsecond_str = 'world'", "output": "if len(first_str) == len(second_str):\n    print('The two strings are of equal length.')\nelif len(first_str) > len(second_str):\n    print(first_str)\nelse:\n    print(second_str)", "category": "Python"}, {"instruction": "Create a function in Python to insert a new item into an existing list.", "input": "new_item = 5\nexisting_list = [1, 2, 3, 4]", "output": "def insert_new_item(new_item, existing_list):\n    \"\"\"Inserts a new item into an existing list.\n    \n    Args:\n        new_item (int): The item to be inserted.\n        existing_list (list): The existing list.\n    \n    Returns:\n        list: List with the new item inserted.\n    \"\"\"\n    existing_list.append(new_item)\n    return existing_list", "category": "Python"}, {"instruction": "Create a Python class to store a customer's name, address, and phone number.", "input": "", "output": "class Customer:\n    def __init__(self, name, address, phone):\n        self.name = name\n        self.address = address\n        self.phone = phone", "category": "Python"}, {"instruction": "Use Python to sort a given list of strings.", "input": "myList = [\"bananas\", \"oranges\", \"apples\", \"peaches\"]", "output": "sortedList = sorted(myList)\nprint(sortedList)", "category": "Python"}, {"instruction": "Use NumPy to extract the top 10 rows from a given matrix.", "input": "import numpy as np\narr = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])", "output": "top_10 = arr[:10,]\nprint(top_10)", "category": "Python"}, {"instruction": "Create a function that returns the sum of all elements in a given array of numbers.", "input": "", "output": "def array_sum(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum", "category": "Python"}, {"instruction": "Suggest a solution to store years in ISO 8601 format in Python.", "input": "", "output": "We can use the datetime.date class to store dates in ISO 8601 format. We just need to create an instance of datetime.date using the year, month and day. Then, we can convert it to the ISO 8601 format string using isoformat() method of datetime.date. For example:\nimport datetime\ndate = datetime.date(2016, 1, 1)\niso_date = date.isoformat()\nprint(iso_date) // Output: '2016-01-01'", "category": "Python"}, {"instruction": "Use the given JSON data to create a function that returns the number of males in the dataset.", "input": "Sample JSON data:\n\n[\n  {\n    \"name\": \"John\",\n    \"age\": 25,\n    \"gender\": \"male\"\n  },\n  {\n    \"name\": \"Jane\",\n    \"age\": 22,\n    \"gender\": \"female\"\n  },\n  {\n    \"name\": \"Bob\",\n    \"age\": 28,\n    \"gender\": \"male\"\n  },\n  {\n    \"name\": \"Jill\",\n    \"age\": 24,\n    \"gender\": \"female\"\n  }\n]", "output": "def get_num_males(data):\n    # create a counter variable\n    num_males = 0\n    # loop through the data\n    for person in data:\n        if person['gender'] == 'male':\n            num_males += 1\n    # return the number of males\n    return num_males", "category": "Python"}, {"instruction": "Create a function in Python that takes two strings and checks if the characters in the second string exist in the first string.", "input": "s1 = \"hello world\"\ns2 = \"llo\"", "output": "def char_exists_in_string(s1, s2):\n    for char in s2:\n        if char not in s1:\n            return False\n    \n    return True\n\nif __name__ == '__main__':\n    s1 = \"hello world\"\n    s2 = \"llo\"\n    print(char_exists_in_string(s1, s2))", "category": "Python"}, {"instruction": "Generate an array of random numbers with a size of 10.", "input": "", "output": "import random\n\nmy_arr = [random.randint(1,100) for _ in range(10)]\n\nprint(my_arr) # Output: [76, 64, 26, 62, 59, 35, 66, 18, 52, 49]", "category": "Python"}, {"instruction": "Compute the sum of all the even numbers and odd numbers in an array of numbers.", "input": "[1, 2, 3, 4, 5, 6]", "output": "def sum_of_even_odd(arr):\n  even_sum = 0\n  odd_sum = 0\n  for i in arr:\n    if i % 2 == 0:\n      even_sum += i\n    else:\n      odd_sum += i\n  return even_sum, odd_sum", "category": "Python"}, {"instruction": "Implement the algorithm to reverse a singly linked list.", "input": "", "output": "# Node class  \nclass Node:\n    def __init__(self, data):\n        self.data = data   \n        self.next = None \n  \n# LinkedList class \nclass LinkedList:  \n    # Function to initialize head \n    def __init__(self):\n        self.head = None\n  \n    def reverse(self): \n        prev = None\n        current = self.head \n        while(current is not None): \n            next = current.next\n            current.next = prev \n            prev = current \n            current = next\n        self.head = prev", "category": "Python"}, {"instruction": "Create a Python script to print out all prime numbers up to and including a given number n.", "input": "", "output": "def print_prime_numbers(n):  \n    for num in range(2, n + 1):  \n        is_prime = True \n        for i in range(2, num):  \n            if (num % i) == 0:  \n                is_prime = False\n                break\n        if is_prime:\n            print(num)", "category": "Python"}, {"instruction": "Design a function to find the Fibonacci sequence numbers given n.", "input": "n = 5", "output": "def Fibonacci(n):  \n    if n == 0:   \n        return 0  \n    elif n == 1:  \n        return 1  \n    else:  \n        return Fibonacci(n-1) + Fibonacci(n-2)", "category": "Python"}, {"instruction": "Design an algorithm that computes the minimum number of moves taking an array of integers to a sorted array.", "input": "[1, 3, 5, 4, 2]", "output": "def minMoves(arr): \n    n = len(arr) \n    moves = 0\n    for i in range(n):  \n        for j in range(n - 1):\n            if arr[j] > arr[j + 1]:  \n                temp = arr[j]\n                arr[j] = arr[j + 1] \n                arr[j + 1] = temp\n                moves += 1\n\n    return moves", "category": "Python"}, {"instruction": "Compute the sum of all integers from 1 to the given number n.", "input": "", "output": "def print_sum(n):\n sum = 0\n for i in range(1, n+1):\n sum += i\n return sum", "category": "Python"}, {"instruction": "Given a string in Python, generate a new string with the same set of characters but in the reverse order.", "input": "str = \"abcdefg\"", "output": "str = \"gfedcba\"", "category": "Python"}, {"instruction": "Given the following Python code, identify if it is syntactically correct or not.", "input": "def add(a\nb):\nreturn a+b", "output": "false", "category": "Python"}, {"instruction": "Implement an algorithm to subtract two strings, represented as a linked list, in the order they appear in and return the result as a linked list.", "input": "l1 = [\"1\",\"2\",\"3\"],\nl2 = [\"9\",\"2\"]", "output": "def linkedListSubtract(l1, l2):\n    dummy_node = ListNode(0)\n    current = dummy_node\n \n    carry = 0\n    while l1 or l2:\n        curr_value1 = 0\n        curr_value2 = 0\n        if l1 :\n            curr_value1 += int(l1.val)\n            l1 = l1.next\n        if l2 :\n            curr_value2 += int(l2.val)\n            l2 = l2.next\n        curr_value = curr_value1 - curr_value2 - carry\n        if curr_value < 0 :\n            curr_value += 10\n            carry = 1\n        else :\n            carry = 0\n        current.next = ListNode(str(curr_value))\n        current = current.next\n \n    if carry > 0 :\n        current.next = ListNode(str(carry))\n    return dummy_node.next", "category": "Python"}, {"instruction": "Generate code which returns a random character from a given list of strings.", "input": "['apple','orange','pineapple','grape']", "output": "import random \n\ndef random_character(strings): \n    return random.choice(strings)\n\nrandom_character(['apple','orange','pineapple','grape'])", "category": "Python"}, {"instruction": "Design a function to parse the given URL and return its components.", "input": "url = \"https://www.example.com/path/to/file.php?query=123&param=value\"", "output": "def parse_url(url):\n    parsed = {}\n    parsed[\"domain\"], parsed[\"path\"] = url.split('/', 2)[2:4]\n    params = parsed[\"path\"].split('?')[1] if \"?\" in parsed[\"path\"] else None\n    parsed[\"query\"] = params.split('&') if params else None\n    return parsed", "category": "Python"}, {"instruction": "Edit a first person narrative created by a GPT model in order to make the narrative more coherent.", "input": "I was walking in the forest and suddenly I saw a dragon. It was huge and its scales glimmered in the sunlight. It had sharp claws and its eyes were red.", "output": "I was strolling through the dense forest when, out of the corner of my eye, I noticed something large and shimmering in the sunlight. As I approached, I saw a magnificent dragon lounging among the trees. Its scales glinted in the sun's rays and its massive, sharply-clawed feet were planted firmly into the ground. Its eyes burned a deep red as it watched my slow approach.", "category": "Python"}, {"instruction": "Analyze an object-oriented program written in Python and suggest changes to improve its technical quality.", "input": "def main():\n  my_list = [1,2,3,4] \n\n  for element in my_list:\n    print(element)\n\nif __name__== \"__main__\"\n  main()", "output": "The program can be improved to make use of better data structure, such as a list comprehension. This would allow faster iteration over the list and reduce duplicate lines of code.\n\ndef main():\n  my_list = [1,2,3,4] \n\n  my_list = [element for element in my_list] \n\n  for element in my_list:\n    print(element)\n\nif __name__== \"__main__\"\n  main()", "category": "Python"}, {"instruction": "Write a Python Function to implement the game of Tic-Tac-Toe.", "input": "", "output": "class GameState:\n    def __init__(self):\n        self.board = [[None, None, None],\n                      [None, None, None],\n                      [None, None, None]\n        ]\n    \n    def is_game_over(self):\n        b = self.board\n        # Check if a player won\n        if b[0][0] == b[0][1] == b[0][2] != None or b[1][0] == b[1][1] == b[1][2] != None or b[2][0] == b[2][1] == b[2][2] != None:\n            return True\n        elif b[0][0] == b[1][0] == b[2][0] != None or b[0][1] == b[1][1] == b[2][1] != None or b[0][2] == b[1][2] == b[2][2] != None:\n            return True\n        elif b[0][0] == b[1][1] == b[2][2] != None or b[0][2] == b[1][1] == b[2][0] != None:\n            return True\n        # Check if the board is full\n        elif any(None in row for row in b):\n            return False\n        # All positions filled, no winner\n        else:\n            return True", "category": "Python"}, {"instruction": "Arrange the following characters in a valid Python expression.", "input": "<, 1, %, (", "output": "(1 % <)", "category": "Python"}, {"instruction": "Define a class in Python that represents a currency.", "input": "", "output": "class Currency:\n    def __init__(self, currency_name, currency_symbol, currency_value):\n        self.name = currency_name\n        self.symbol = currency_symbol\n        self.value = currency_value\n        \n    def __str__(self):\n        return f\"{self.name}: {self.symbol}{self.value}\"", "category": "Python"}, {"instruction": "Write a Python function to convert a given Unix timestamp to a readable format like \"day, month, date, hours:minutes:seconds, year\".", "input": "", "output": "import datetime\n\ndef timestamp_to_readable(unix_timestamp):\n    return datetime.datetime.fromtimestamp(unix_timestamp).strftime(\"%A, %B %d, %H:%M:%S, %Y\")", "category": "Python"}, {"instruction": "Submit an optimized solution to the following leetcode problem.", "input": "Problem: Given two binary trees, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.", "output": "def isSameTree(p, q):\n    if p is None and q is None:\n        return True\n    if p is None or q is None:\n        return False\n    if p.val != q.val:\n        return False\n    return isSameTree(p.left, q.left) and isSameTree(p.right, q.right)", "category": "Python"}, {"instruction": "Write a Python function to calculate the power of a number raised to the nth power.", "input": "", "output": "def calculate_power(base, power):\n    if power == 0:\n        return 1\n    else:\n        return base * calculate_power(base, power - 1)", "category": "Python"}, {"instruction": "Generate a password that is at least 8 characters long and contains at least one letter, one number, and one special character.", "input": "", "output": "import random\nimport string\n\ndef generate_password():\n    characters = string.ascii_letters + string.digits + string.punctuation\n    length = 8\n    password = ''.join(random.choice(characters) for _ in range(length))\n    while not (any(c.isdigit() for c in password) and any(c.isalpha() for c in password)\n           and any(c in string.punctuation for c in password)):\n        password = ''.join(random.choice(characters) for _ in range(length))\n    return password", "category": "Python"}, {"instruction": "Generate a code snippet to calculate the sum of an array", "input": "arr = [1, 23, 4, 3, 5]", "output": "def summation(arr):\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n\nprint(summation(arr)) # Output: 36", "category": "Python"}, {"instruction": "Create a class for constructing a new tree", "input": "", "output": "class TreeNode:\n\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n    \n    def Insert(self, data):\n        if self.data:\n            if data < self.data:\n                if self.left is None:\n                    self.left = TreeNode(data)\n                else:\n                    self.left.Insert(data)\n            elif data > self.data:\n                if self.right is None:\n                    self.right = TreeNode(data)\n                else:\n                    self.right.Insert(data)\n        else:\n            self.data = data", "category": "Python"}, {"instruction": "Train a machine learning algorithm to classify objects into one of two classes.", "input": "", "output": "from sklearn.svm import SVC \nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\n\n# Load the iris dataset \niris = load_iris()\n\n# Split the data into train and test sets \nX_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, \n                                                    random_state=0)\n\n# Train the model using SVC \nclf = SVC(kernel='linear', C=1).fit(X_train, y_train)\n\n# Predict the labels of the test set \ny_pred = clf.predict(X_test)", "category": "Python"}, {"instruction": "Write a Python script to check if two string variables are anagrams or not.", "input": "", "output": "def is_anagram(str1, str2):\n    # removing all whitespace from strings \n    str1 = ''.join(str1.split())\n    str2 = ''.join(str2.split()) \n\n    # create list for each string \n    list_str1 = list(str1.upper()) \n    list_str2 = list(str2.upper()) \n\n    # sort the list \n    list_str1.sort() \n    list_str2.sort() \n\n    # checking if both lists are identical or not \n    if (list_str1 == list_str2): \n        return True\n    else: \n        return False", "category": "Python"}, {"instruction": "Generate a web service function in Python to return the current date and time.", "input": "", "output": "import datetime\n\ndef get_current_time():\n    now = datetime.datetime.now()\n    return now.strftime(\"%Y-%m-%d %H:%M:%S\")", "category": "Python"}, {"instruction": "Model a NoSQL database using CosmosDB", "input": "The database should store user posts, which consists of the post ID, content text, user ID and date of creation.", "output": "Azure Cosmos DB is a NoSQL database-as-a-service model that provides a schema-free data model and supports automatic indexing of all data. \nTo model a posts database with CosmosDB, create a database and a container. \nThen create item in the container, each item should contain the fields \"Post ID\", \"ContentText\", \"User ID\" and \"Date of Creation\". \nThese fields should be indexed to allow for efficient queries and retrieval of the posts data.", "category": "Python"}, {"instruction": "A function needs to be created that will take a list of strings and return a list of the same strings without duplicates.", "input": "list_of_strings = [\"a\", \"b\", \"c\", \"a\", \"d\"]", "output": "def remove_duplicates(list_of_strings):\n    \"\"\"\n    This function will take a list of strings and return a list of the same strings without duplicates.\n    \"\"\"\n    unique_strings = list(set(list_of_strings))\n    return unique_strings\n\nlist_of_strings = [\"a\", \"b\", \"c\", \"a\", \"d\"]\nprint(remove_duplicates(list_of_strings))", "category": "Python"}, {"instruction": "Create a program to find the largest common factor in two numbers.", "input": "24 and 48", "output": "def hcf(x, y): \n  \n    if x > y: \n        smaller = y \n    else: \n        smaller = x \n    \n    for i in range(1, smaller+1): \n        if((x % i == 0) and (y % i == 0)): \n            hcf = i \n            \n    return hcf \n\nx = 24\ny = 48\n\nprint (\"The H.C.F. of 24 and 48 is\", hcf(x, y))", "category": "Python"}, {"instruction": "Create a program that prints out a list of all numbers from 0 to 10, except for five.", "input": "", "output": "for num in range(11):\n    if num != 5:\n        print(num)", "category": "Python"}, {"instruction": "You need to write a function to check if given input is a palindrome string.", "input": "string = \"level\"", "output": "def is_palindrome(string): \n    left = 0\n    right = len(string) - 1\n  \n    while right >= left: \n        if string[left] != string[right]: \n            return False\n        left += 1\n        right -= 1\n    return True", "category": "Python"}, {"instruction": "Write a Python script that randomly shuffles the elements of a given array.", "input": "list = [1, 2, 3, 4, 5]", "output": "import random\n\ndef shuffle(arr):\n    random.shuffle(arr)\n    return arr\n\nresult = shuffle([1, 2, 3, 4, 5])\nprint(result)", "category": "Python"}, {"instruction": "Describe how you would use a dictionary to reverse a string.", "input": "", "output": "A dictionary can be used to reverse a string by mapping each character to its reversed counterpart. Create a dictionary with all the characters from the string as keys and their reversed version as the values. To reverse a string, iterate through it and look up each character in the dictionary and add its value to a new string. Once all the characters have been reversed, the new string is the reversed version of the original.", "category": "Python"}, {"instruction": "Write a Python function to generate a list of Fibonacci numbers up to the given limit n.", "input": "", "output": "def generate_fibonacci(n):\n fibonacci_list = [0, 1]\n for i in range(2, n+1):\n fibonacci_list.append(fibonacci_list[i-2] + fibonacci_list[i-1])\n return fibonacci_list", "category": "Python"}, {"instruction": "Given a list of positive integers, write a program to find two elements whose sum equals a given target value.", "input": "[1, 2, 3, 4, 5], 4", "output": "def find_sum_target(nums, target):\n for i in range(len(nums) - 1):\n for j in range(i+1, len(nums)):\n if nums[i] + nums[j] == target:\n return [nums[i], nums[j]]\n return []", "category": "Python"}, {"instruction": "Write a Python function to remove punctuation from a given sentence.", "input": "The quick brown fox jumps over the lazy dog!", "output": "def remove_punctuation(sentence):\n punctuation_marks = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n new_sentence = \"\"\n for char in sentence:\n if char not in punctuation_marks:\n new_sentence += char\n return new_sentence", "category": "Python"}, {"instruction": "Create a GUI that displays text and a button.", "input": "", "output": "import tkinter as tk \n\nroot = tk.Tk() \n\ntk.Label(root, text='Hello World!').pack() \ntk.Button(root, text=\"Click Me!\").pack() \n\nroot.mainloop()", "category": "Python"}, {"instruction": "Write a function which takes in a list containing integers, strings and floats and returns the sum of all numbers in the list.", "input": "list = [2, 'John', 8.2, 3.4, 11]", "output": "def sum_numbers(lst): \n    sum = 0\n    for item in lst: \n        if type(item) == int or type(item) == float: \n            sum += item \n    return sum", "category": "Python"}, {"instruction": "Write a function which takes a list and an additional argument, and returns the elements of the list which are greater than the argument.", "input": "list = [10, 20, 30, 40, 50, 60]\nargument = 25", "output": "def greater(list, argument):\n    output = [] \n    for int in list:\n        if int > argument:\n            output.append(int)\n    return output", "category": "Python"}, {"instruction": "Create a Python dictionary object", "input": "{'a':1, 'b':2, 'c':3}", "output": "mydict = {'a':1, 'b':2, 'c':3}", "category": "Python"}, {"instruction": "How can you use a function to determine whether a given array is in increasing or decreasing order or unordered?", "input": "", "output": "def check_order(arr):\n     order = 0\n     if arr[0] < arr[1]:\n         order = 1\n     elif arr[0] > arr[1]:\n         order = -1\n     \n     for i in range(1, len(arr)-1):\n        if arr[i] > arr[i+1] and order == 1:\n            return 0\n        elif arr[i] < arr[i+1] and order == -1:\n            return 0\n     return order", "category": "Python"}, {"instruction": "Create a sorting algorithm to order a given array.", "input": "[ 2 , 8 , 3 , 10 , 16 ]", "output": "def sort_array(arr):\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]  # swap\n    return arr", "category": "Python"}, {"instruction": "Design an algorithm in Python to retrieve all elements in a given array that occur only once.", "input": "", "output": "def singleOccurence(arr): \n    ans = []\n    for i in range(len(arr)): \n        count = 0\n        for j in range(len(arr)): \n            if arr[i] == arr[j]: \n                count+=1\n        if count == 1: \n            ans.append(arr[i]) \n    return ans", "category": "Python"}, {"instruction": "Create a function in Python to find all pairs of integers that sum up to k.", "input": "", "output": "def find_pair(arr,k):\n  pairs = []\n  found_elements = set()\n  for num in arr:\n    diff = k - num\n    if diff in found_elements:\n      pairs.append([min(num,diff), max(num,diff)])\n    found_elements.add(num)\n  return pairs", "category": "Python"}, {"instruction": "Explain in plain English the difference between the set() and list() methods in Python.", "input": "", "output": "The main difference between sets and lists in Python is the way the elements are stored. Lists store the elements in an ordered sequence, whereas sets store the elements in an unordered set. Sets are faster in terms of performance because they do not have duplicate elements. This means that when checking if an element exists in a set, the process is faster than checking for elements in a list. Furthermore, sets also do not allow for indexing, as the elements are unordered.", "category": "Python"}, {"instruction": "Propose an algorithm in Python for sorting a given list of numbers in descending order.", "input": "", "output": "One possible solution would be to use a variation of the bubble sort algorithm, where the elements are being swapped from the last element to the first element.\n\ndef sort_numbers_descending(elements):\n  n = len(elements)\n  # Traverse through all elements\n  for i in range(n-1):\n    # Last i elements are already in place\n    for j in range(n-1-i):\n      # Swap if the element found is greater\n      # than the next element\n      if elements[j] < elements[j+1]:\n        temp = elements[j]\n        elements[j] = elements[j+1]\n        elements[j+1] = temp\n  return elements", "category": "Python"}, {"instruction": "Manipulate a 2D array in Python such that it consists of the maximum value of each column.", "input": "array = [[1, 2, 3], \n        [4, 5, 6], \n        [7, 8, 9]]", "output": "array = [[7, 8, 9], \n        [7, 8, 9], \n        [7, 8, 9]]\n\ndef max_columns(array): \n    for col in range(len(array[0])): \n        m = array[0][col] \n        for row in array:\n            if row[col] > m: \n                m = row[col]\n        for row in range(len(array)):\n            array[row][col] = m \n    return array", "category": "Python"}, {"instruction": "Implement a recursive function that finds the nth number in the Fibonacci sequence.", "input": "", "output": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(5)) # outputs 5", "category": "Python"}, {"instruction": "Given an array, find the 2 elements which have the largest sum.", "input": "arr = [2, 8, 3, 5, 10, 1]", "output": "def find_largest_sum(arr):\n  max_sum = 0\n  first_ele = arr[0]\n  sec_ele = arr[1]\n\n  for i in range(0, len(arr)):\n    for j in range(i+1, len(arr)):\n      curr_sum = arr[i] + arr[j]\n      if curr_sum > max_sum:\n        max_sum = curr_sum\n        first_ele = arr[i]\n        sec_ele = arr[j]\n  return [first_ele, sec_ele]\n\nprint(find_largest_sum(arr)) # outputs [10, 8]", "category": "Python"}, {"instruction": "Write code using the NumPy random library to simulate the rolling of two fair six-sided dice.", "input": "", "output": "import numpy as np\nnp.random.seed(0)\n\n# simulate the rolling of two fair six-sided dice\noutcomes = np.random.randint(1,7, size=(2,2))\nprint(outcomes)", "category": "Python"}, {"instruction": "Write a function to generate anagrams for a given string", "input": "str = \"cat\"", "output": "import itertools\n\ndef anagrams(str):\n    return [\"\".join(permutation) for permutation in itertools.permutations(str)]\n\nprint(anagrams(str)) # Output: ['cat', 'cta', 'act', 'atc', 'tca', 'tac']", "category": "Python"}, {"instruction": "Design a function to create a secure password", "input": "", "output": "import random\nimport string\n\ndef secure_password(strong=False):\n    length = random.randint(8, 16)\n    letters = string.ascii_lowercase+string.ascii_uppercase+string.digits\n    if strong:\n        symbols = string.punctuation\n        letters += symbols\n    return ''.join(random.choice(letters) for i in range(length))", "category": "Python"}, {"instruction": "Write a function to compare two strings and return the number of different characters in each string.", "input": "", "output": "def compare_strings(s1, s2):\n    s1_chars = list(s1)\n    s2_chars = list(s2)\n    num_diff_chars = 0\n    for char in s1_chars:\n        if char not in s2_chars:\n            num_diff_chars += 1\n    for char in s2_chars:\n        if char not in s1_chars:\n            num_diff_chars += 1\n    return num_diff_chars", "category": "Python"}, {"instruction": "Write a Python function that takes a list of integers and returns True if any of the integers is divisible by 7.", "input": "", "output": "def is_divisible_by_seven(ints):\n    return any(num % 7 == 0 for num in ints)", "category": "Python"}, {"instruction": "Modify the function such that it takes two arrays, one containing numbers and the other containing symbols as arguments and returns a string where each number is replaced with its associated symbol.", "input": "nums = [1,2,3,4,5]\nsymbols = [\"A\",\"B\",\"C\",\"D\",\"E\"]", "output": "def join_nums_symbols(nums, symbols):\n    assert len(nums) == len(symbols), \"length of nums and symbols should be equal\"\n\n    result = \"\"\n    for i in range(len(nums)):\n        result += str(nums[i]) + symbols[i]\n    return result", "category": "Python"}, {"instruction": "Generate a program to calculate the combination of n elements taken k at a time.", "input": "n = 8\nk = 3", "output": "def combinations(n, k):\n    if k == 0 or k > n:\n        return []\n    result = []\n    def dfs(start,n,k):\n        if k == 0:\n            result.append(temp[:])\n            return \n        for i in range(start, n):\n            temp.append(i)\n            dfs(i+1, n, k-1)\n            temp.pop()\n            \n    temp = []\n    dfs(0, n, k)\n    return result", "category": "Python"}, {"instruction": "When given a list of strings, identify which strings are palindromes", "input": "list = ['abc', 'abb', 'cba']", "output": "result = []\nfor s in list:\n    if s == s[::-1]:\n        result.append(s)\n\nprint(result) #['abb']", "category": "Python"}, {"instruction": "Write a code that returns a 2-dimensional array of size n by m containing all 0s", "input": "n = 3 and m = 5", "output": "def create2DArray(n, m):\n    array = [[0 for x in range(m)] for y in range(n)]\n    return array\n\nprint(create2DArray(3, 5)) \n# prints [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]", "category": "Python"}, {"instruction": "Write a function that returns the larger number from two numbers provided.", "input": "4, 5", "output": "def largest(a, b):\n    \"\"\"Returns the larger number from two numbers provided.\"\"\"\n    if a > b:\n        return a\n    else:\n        return b\n\nnum1 = 4\nnum2 = 5\nprint(largest(num1, num2))", "category": "Python"}, {"instruction": "Convert this Python data structure into a valid JSON string.", "input": "data = {\n    \"key1\" : [1,2,3],\n    \"key2\" : {\n        'subkey1' : True,\n        'subkey2' : 'Hello World'\n    }\n}", "output": "json_string = json.dumps(data)", "category": "Python"}, {"instruction": "Build a state machine in Python to process incoming keyboard events", "input": "", "output": "# Define a StateMachine class\nclass StateMachine: \n    def __init__(self): \n        self.handlers = {} \n        self.startState = None\n        self.endStates = [] \n  \n    def add_state(self, state): \n        self.handlers[state.name] = state\n  \n    def set_start(self, name): \n        self.startState = name\n  \n    def set_end(self, name): \n        self.endStates.append(name) \n  \n    def run(self): \n        try: \n            handler = self.handlers[self.startState] \n        except: \n            raise(Exception, \"Must call .set_start() before .run()\")\n        while True:\n            # Get the next keyboard event\n            event = get_event()\n            if event:\n                newState = handler.run(event) \n            if newState.name in self.endStates: \n                break \n            else: \n                handler = self.handlers[newState.name]", "category": "Python"}, {"instruction": "Implement a web scraper in Python to fetch all the URLs from a given website.", "input": "The website URL is https://www.example.com", "output": "import re\nimport requests\n\nurls = set()\n \ndef get_urls(url):\n    website = requests.get(url)\n    content = website.text\n    links = re.findall(r'<a .*?href=[\\'\"](.*?)[\\'\"].*?>', content)\n \n    for i in links:\n        if i.startswith(\"/\"):\n            base_url = url\n            i = base_url + i\n            if i in urls:\n                continue\n            urls.add(i)\n            get_urls(i)\n        elif url in i:\n            if i in urls:\n                continue\n            urls.add(i)\n            get_urls(i)\n \nif __name__ == \"__main__\":\n    get_urls(\"https://www.example.com\")\n    for i in urls:\n        print(i)", "category": "Python"}, {"instruction": "Create some sample data to test a supervised learning algorithm.", "input": "", "output": "import numpy as np\nX = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ny = np.array([1, 0, -1])", "category": "Python"}, {"instruction": "Write an iterator in Python to iterate through the given list and output each element", "input": "myList = ['Hi', 'Bye', 'Hello', 'World']", "output": "def iterateMyList(myList):\n    iterator = iter(myList)\n    while True:\n        try: \n            print(next(iterator))\n        except StopIteration: \n            break", "category": "Python"}, {"instruction": "Create a TensorFlow tensor with the following data", "input": "[[1, 2],\n[3, 4],\n[5, 6]]", "output": "tf.constant([[1., 2.], [3., 4.], [5., 6.]])", "category": "Python"}, {"instruction": "Develop a program in Python that takes two array elements as input and finds their product", "input": "Array1: [1, 5, 8, 9]\nArray2: [2, 3, 4, 6]", "output": "import numpy as np\n\narr1 = np.array([1,5,8,9])\narr2 = np.array([2,3,4,6])\n\nresult = arr1 * arr2\n\nprint(f'Product of the two arrays: {result}')", "category": "Python"}, {"instruction": "Suggest a use case for reinforcement learning in business.", "input": "", "output": "Reinforcement learning can be used in business to automate processes, optimize products and services, improve marketing campaigns, and develop better customer experiences. For example, a reinforcement learning model can learn the best way to stock products in a store and optimize product placement to maximize sales. Additionally, reinforcement learning can also be used to automate customer service tasks, adjust product prices in real-time based on customer demand, and optimize marketing campaigns with personalized content.", "category": "Python"}, {"instruction": "Create a class in Python which models a bank account using the concept of class and object.", "input": "", "output": "class BankAccount: \n def __init__(self, name, balance): \n  self.name = name \n  self.balance = balance \n def deposit(self, amount): \n  self.balance += amount \n def withdraw(self, amount): \n  self.balance -= amount", "category": "Python"}, {"instruction": "How would you reverse the order of the elements in a given singly linked list in-place?", "input": "", "output": "def reverse_inplace(head): \n    if head is None or head.next is None: \n        return head  \n        \n    prev_node = None\n    next_node = None\n    curr_node = head  \n    \n    while curr_node is not None: \n        next_node = curr_node.next\n        curr_node.next = prev_node\n        prev_node = curr_node\n        curr_node = next_node\n        \n    return prev_node", "category": "Python"}, {"instruction": "Take the following string and read it into a list in Python.", "input": "\"apple, banana, peach, orange\"", "output": "list = [x.strip() for x in \"apple, banana, peach, orange\".split(\",\")]", "category": "Python"}, {"instruction": "Write a code to calculate the sum of the cubes of the numbers in the list.", "input": "[1,2,3,4,5]", "output": "\"\"\"\nFunction to calculate the sum of the cubes of the numbers in the list\n\"\"\"\ndef list_cube_sum(list):\n    \"\"\"\n    Calculate the sum of the cubes of the numbers in the list\n    \"\"\"\n    total = 0\n    for i in list:\n        total += i**3\n    return total\n\nif __name__ == '__main__':\n    print(list_cube_sum([1, 2, 3, 4, 5])) # prints 225", "category": "Python"}, {"instruction": "Write a code to format a number with two decimal places.", "input": "23.14159", "output": "\"\"\"\nFunction to format a number with two decimal places\n\"\"\"\n\ndef two_decimals(num):\n    \"\"\"\n    Format a number with two decimal places\n    \"\"\"\n    return \"{:.2f}\".format(num)\n\nif __name__ == '__main__':\n    print(two_decimals(23.14159)) # prints 23.14", "category": "Python"}, {"instruction": "Create a Python dictionary with three elements and print the key-value pairs.", "input": "", "output": "my_dict = {\n    'name': 'John',\n    'age': 30,\n    'city': 'New York'\n}\n\nfor key, value in my_dict.items():\n    print(f'{key}: {value}')", "category": "Python"}, {"instruction": "Create a Python class with an instance method that prints the number of objects created.", "input": "", "output": "class Person:\n     num_objects = 0\n\n     def __init__(self):\n          Person.num_objects += 1\n    \n     def print_num_objects(self):\n          print(Person.num_objects)", "category": "Python"}, {"instruction": "How would you implement Skip-Gram model in TensorFlow?", "input": "", "output": "To implement a Skip-Gram model in TensorFlow, you would need to define the model architecture. You would then need to define the training data, which can be done using tf.data packages. Finally, you would need to use an optimization algorithm such as the AdamOptimizer to train the model.", "category": "Python"}, {"instruction": "Write Python code to print the last three elements from a given list.", "input": "[2, 4, 6, 8, 10, 12]", "output": "my_list = [2, 4, 6, 8, 10, 12]\nprint(my_list[-3:]) # Output: [10, 12]", "category": "Python"}, {"instruction": "Write a function to compare two lists and print out whether they are equal or not.", "input": "list1 = [1, 2, 3]\nlist2 = [2, 3, 4]", "output": "def compare_lists(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i] != list2[i]:\n                return False\n        return True\n\nlist1 = [1, 2, 3]\nlist2 = [2, 3, 4]    \nprint(compare_lists(list1, list2)) # Output: False", "category": "Python"}, {"instruction": "Generate a function that takes an array of integers and rearranges the elements in a cyclical fashion, such that the element at index 0 comes last, the element at index 1 goes to the front, the element at index 2 is inserted after the element at the last index and so on.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def rearrange_array(arr):\n    output = []\n    for i in range(len(arr)):\n        idx = (i + 1) % len(arr)\n        output.append(arr[idx])\n    return output", "category": "Python"}, {"instruction": "Write a function that will format a given string in proper title case.", "input": "title = 'the quick brown fox'", "output": "def format_title(title):\n    \"\"\"\n    This function will format a given string in proper title case.\n    \"\"\"\n    formatted_title = ' '.join([word[0].upper() + word[1:] for word in title.split()])\n    return formatted_title\n\ntitle = 'the quick brown fox'\n\nprint(format_title(title))", "category": "Python"}, {"instruction": "Create a Python function and call it split_string that takes a string and a delimiter as arguments and returns a list containing the string split by the delimiter.", "input": "my_string = \"hello, world\"\ndelimiter = ','", "output": "def split_string(string, delimiter):\n    strList = string.split(delimiter)\n    return strList", "category": "Python"}, {"instruction": "How to retrieve the data of the first element in a JSON array?", "input": "", "output": "The data of the first element in a JSON array can be retrieved using the index \"0\". For example, if the JSON array is [\"apple\", \"banana\", \"cherry\"], then the data of the first element can be retrieved by \"array[0]\". It would return the data \"apple\".", "category": "Python"}, {"instruction": "Add a method to the following class which prints the student's name in upper case.", "input": "class Student:\n  def __init__(self, name):\n    self.name = name", "output": "class Student:\n  def __init__(self, name):\n    self.name = name\n  \n  def print_name_upper(self):\n    print(self.name.upper())", "category": "Python"}, {"instruction": "Write a function in Python to remove all 'null' values from a nested dictionary.", "input": "", "output": "def remove_nulls(dictionary):\n    if isinstance(dictionary, dict):\n        return {key: remove_nulls(value) \n        for key, value in dictionary.items() if not value == None}\n    else:\n        return dictionary", "category": "Python"}, {"instruction": "Given the following code, write a function to validate the input dates are in increasing order.", "input": "# Validate if the inputs are valid dates\ndef validate_dates(date_list):\n    pass", "output": "# Validate if the inputs are valid dates\ndef validate_dates(date_list):\n    if len(date_list) == 0:\n        return True\n    prev_date = date_list[0]\n    for date in date_list[1:]:\n        if date < prev_date:\n            return False\n        prev_date = date\n    return True", "category": "Python"}, {"instruction": "Write a Scala function to generate a range of numbers.", "input": "", "output": "def generateRange(start:Int, end:Int): List[Int] = {     \n   if (start > end) List(end)\n   else start :: generateRange(start+1, end)\n}", "category": "Python"}, {"instruction": "Create a KMP algorithm in Python to find a pattern in a given text.", "input": "Text: abcabdababd\nPattern:abd", "output": "def KMPSearch(pat, txt): \n    M = len(pat) \n    N = len(txt) \n  \n    # create lps[] that will hold the longest prefix suffix  \n    # values for pattern \n    lps = [0]*M \n    j = 0 # index for pat[] \n  \n    # Preprocess the pattern (calculate lps[] array) \n    computeLPSArray(pat, M, lps) \n  \n    i = 0 # index for txt[] \n    while i < N: \n        if pat[j] == txt[i]: \n            i += 1\n            j += 1\n  \n        if j == M: \n            print(\"Found pattern at index \" + str(i-j)) \n            j = lps[j-1] \n  \n        # mismatch after j matches \n        elif i < N and pat[j] != txt[i]: \n            # Do not match lps[0..lps[j-1]] characters, \n            # they will match anyway \n            if j != 0: \n                j = lps[j-1] \n            else: \n                i += 1\n        \ndef computeLPSArray(pat, M, lps): \n    len = 0 # length of the previous longest prefix suffix \n  \n    lps[0] # lps[0] is always 0 \n    i = 1\n  \n    # the loop calculates lps[i] for i = 1 to M-1 \n    while i < M: \n        if pat[i]== pat[len]: \n            len += 1\n            lps[i] = len\n            i += 1\n        else: \n            # This is tricky. Consider the example. \n            # AAACAAAA and i = 7. The idea is similar  \n            # to search step. \n            if len != 0: \n                len = lps[len-1] \n  \n                # Also, note that we do not increment i here \n            else: \n                lps[i] = 0\n                i += 1", "category": "Python"}, {"instruction": "Write a code to generate all possible binary strings of length 5.", "input": "", "output": "def gen_binary_strings(n):\n    result = []\n    for i in range(2**n):\n        s = bin(i)[2:]\n        s = s.zfill(n)\n        result.append(s)\n    return result\n\nprint(gen_binary_strings(5))\n# Output: ['00000', '00001', '00010', '00011', '00100', '00101', '00110', '00111', '01000', '01001', '01010', '01011', '01100', '01101', '01110', '01111', '10000', '10001', '10010', '10011', '10100', '10101', '10110', '10111', '11000', '11001', '11010', '11011', '11100', '11101', '11110', '11111']", "category": "Python"}, {"instruction": "Suggest a way to scale the following function for n values.", "input": "def scale(x):\n    return x * 2", "output": "def scale(arr, n):\n    return [x * 2  for x in arr[:n]]", "category": "Python"}, {"instruction": "Create a code to get the difference between two timestamps in seconds.", "input": "timestamp1 = \"2020-07-02 14:13:37\"\ntimestamp2 = \"2020-07-03 13:21:46\"", "output": "import datetime\n\ndef get_difference_in_seconds(timestamp1, timestamp2):\n    datetime1 = datetime.datetime.strptime(timestamp1, \"%Y-%m-%d %H:%M:%S\")\n    datetime2 = datetime.datetime.strptime(timestamp2, \"%Y-%m-%d %H:%M:%S\")\n    difference = (datetime2 - datetime1).total_seconds()\n    return difference", "category": "Python"}, {"instruction": "Write a code to filter out the names longer than 5 characters from the following list.", "input": "data = [\"James\", \"John\", \"Susan\", \"Bella\", \"Natalie\", \"Adam\", \"Sam\", \"Eric\"]", "output": "data = [\"James\", \"John\", \"Susan\", \"Bella\", \"Natalie\", \"Adam\", \"Sam\", \"Eric\"]\n\nfiltered_data = [name for name in data if len(name) > 5]\n\nprint(filtered_data) \n# Output: [\"James\", \"John\", \"Bella\", \"Natalie\", \"Sam\"]", "category": "Python"}, {"instruction": "Write a Python function to generate a random password with length 8 containing any combination of upper and lowercase letters, numbers, and symbols.", "input": "", "output": "import string \nimport random \n\ndef generate_password(): \n\tletter_lower = string.ascii_lowercase\n\tletter_upper = string.ascii_uppercase\n\tsymbols = string.punctuation\n\tdigits = string.digits\n\tpassword = ''.join(random.choice(letter_lower + letter_upper + symbols + digits) for i in range(8))\n\treturn password\n\npassword = generate_password()\nprint(password)", "category": "Python"}, {"instruction": "Implement a queue following the classic FIFO (First-in-first-out) principle using Python.", "input": "", "output": "class Queue:\n    def __init__(self):\n        self.queue = []\n\n    def enqueue(self, val):\n        self.queue.append(val)\n\n    def dequeue(self):\n        if self.queue:\n            return self.queue.pop(0)\n        else:\n            return None\n\n    def peek(self):\n        if self.queue:\n            return self.queue[0]\n        else:\n            return None", "category": "Python"}, {"instruction": "Write a function to find the path from a source point to a destination point in a given 2D array.", "input": "Array: [[0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [1, 0, 0, 1, 0], [0, 0, 0, 1, 0]]\nSource Point: [0, 0]\nDestination Point: [3, 4]", "output": "def find_path(array, source, dest):\n    path = [source]\n    sx, sy = source\n    while path[-1] != dest:\n        dx, dy = path[-1]\n        if dx > 0 and array[dx - 1][dy] == 0:\n            path.append([dx-1, dy])\n        elif dy > 0 and array[dx][dy-1] == 0:\n            path.append([dx, dy-1])\n        elif dx < len(array)-1 and array[dx + 1][dy] == 0:\n            path.append([dx+1, dy])\n        elif dy < len(array[0])-1 and array[dx][dy+1] == 0:\n            path.append([dx, dy+1])\n    return path", "category": "Python"}, {"instruction": "Calculate the sum of the cube of integers from 1 to n.", "input": "", "output": "def cube_sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum", "category": "Python"}, {"instruction": "Train a Naive Bayes model in Python to classify emails into spam and non-spam classes.", "input": "", "output": "# import libraries \nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# read in the data \ndata = pd.read_csv('email_data.csv')\n\n# split into training and test data\nX_train, X_test, y_train, y_test = train_test_split(data['text'], data['label'], test_size=0.33, random_state=42)\n\n# create vectorizer and transform training data\ncount_vector = CountVectorizer()\ncount_train = count_vector.fit_transform(X_train)\n\n# create and train a Naive Bayes model\nNB_classifier = MultinomialNB()\nNB_classifier.fit(count_train,y_train)\n\n# transform test data\ncount_test = count_vector.transform(X_test)\n\n# predict test labels\npreds = NB_classifier.predict(count_test)", "category": "Python"}, {"instruction": "You need to debug this code and ensure that it runs properly.", "input": "def cost_calc(product, quantity): \n    total_cost = 0\n    for i, q in zip(products, quantity):\n        cost = i.cost * q \n        total_cost = total_cost + cost \n        return total_cost:", "output": "def cost_calc(products, quantity): \n    total_cost = 0\n    for i, q in zip(products, quantity):\n        cost = i.cost * q \n        total_cost += cost \n    return total_cost", "category": "Python"}, {"instruction": "Write a function in Python to check if two lists have the same elements regardless of their order.", "input": "list1 = [\"cat\", \"dog\", \"mouse\"]\nlist2 = [\"mouse\", \"dog\", \"cat\"]", "output": "def is_similar(list_1, list_2):\n  if len(list_1) != len(list_2):\n    return False\n  list_1.sort()\n  list_2.sort()\n  for i, j in zip(list_1, list_2):\n    if i != j:\n      return False\n  return True", "category": "Python"}, {"instruction": "Determine if a given word is a valid word of English language.", "input": "Word: lycanthropy", "output": "Yes, lycanthropy is a valid word of English language.", "category": "Python"}, {"instruction": "Develop an algorithm to reverse an integer.", "input": "123", "output": "def reverse(num): \n    reversed_num = 0\n    while num>0:\n        last = num%10\n        reversed_num = (reversed_num*10)+last\n        num = num//10\n    return reversed_num\n\nnum = 123\nprint(\"Reverse of\", num, \"is\", reverse(num)) \n# Output: Reverse of 123 is 321", "category": "Python"}, {"instruction": "Augment an integer list with zeros after every 4 elements.", "input": "List = [1,2,3,4,5,6,7,8]", "output": "def list_augment(int_list):\n    \"\"\"\n    This function takes in a list of integers and \n    augments it with zeros after every 4 elements.\n    \"\"\"\n    augmented_list = []\n    for i in range(0, len(int_list), 4):\n        augmented_list.append(int_list[i:i + 4])\n        augmented_list.append(0)\n    augmented_list.pop()\n    return [item for sublist in augmented_list for item in sublist]\n    \nint_list = [1,2,3,4,5,6,7,8]\nprint(list_augment(int_list))\n\n# Output: [1, 2, 3, 4, 0, 5, 6, 7, 8, 0]", "category": "Python"}, {"instruction": "Write a code to calculate the age in years and months given the date of birth.", "input": "Date of Birth: 4 June 1998", "output": "def age_calc(date_of_birth):\n    \"\"\"\n    This function takes in a date of birth and calculates \n    the age in years and months.\n    \"\"\"\n    today = datetime.date.today()\n    age_years = today.year - date_of_birth.year\n    age_months = today.month - date_of_birth.month\n    if age_months < 0:\n        age_years -= 1\n        age_months += 12\n    return age_years, age_months\n\ndate_of_birth = datetime.date(1998, 6, 4)\nprint(age_calc(date_of_birth))\n\n# Output: (21, 10)", "category": "Python"}, {"instruction": "Create a function that filters a list of strings based on their length.", "input": "List = [\"Carrot\", \"Apple\", \"Orange\", \"Banana\", \"Pear\"]", "output": "def filter_string_length(strings):\n    \"\"\"\n    This function takes in a list of strings and filters out those\n    that are not longer than 5 characters.\n    \"\"\"\n    return [s for s in strings if len(s) > 5]\n\nlist_strings = [\"Carrot\", \"Apple\", \"Orange\", \"Banana\", \"Pear\"]\nfiltered_list = filter_string_length(list_strings)\nprint(filtered_list)\n\n# Output: [\"Carrot\", \"Orange\", \"Banana\"]", "category": "Python"}, {"instruction": "How to loop over a key-value pair in a dictionary?", "input": "", "output": "A key-value pair in a dictionary can be looped over using the \"for\" loop with the \"items()\" method. For example, if the dictionary is {'a': 1, 'b': 2, 'c': 3}, it can be looped over as:\n\nfor key, value in dictionary.items():\n  print(key, value)\n\nIt will print the key-value pairs as:\na 1\nb 2\nc 3", "category": "Python"}, {"instruction": "How to convert a list of words into a set?", "input": "", "output": "A list of words can be converted into a set by using the built-in \"set()\" function. For example, if the list is [\"apple\", \"banana\", \"cherry\"], the set converted from this list will look like {\"apple\", \"banana\", \"cherry\"}.", "category": "Python"}, {"instruction": "Given a string, write an algorithm to remove all occurrences of a given letter.", "input": "my_string = \"Python is a popular programming language\"\nletter = 'o'", "output": "def remove_letter(string, letter):\n    output = \"\"\n    for s in string:\n        if s != letter:\n            output += s\n    return output", "category": "Python"}, {"instruction": "Create a basic Python script to accept two numbers from the user and \nprint out the sum.", "input": "", "output": "num1 = int(input(\"Enter the first number: \"))\nnum2 = int(input(\"Enter the second number: \"))\n\n# add two numbers\nsum = num1 + num2\n\n# display the sum\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, sum))", "category": "Python"}, {"instruction": "Create a function that returns the sum of the Fibonacci sequence to the nth number", "input": "", "output": "def FibonacciSum(n): \n    fib1 = 0\n    fib2 = 1\n    if n < 0: \n        return \"Incorrect input\"\n    elif n == 0:\n        return 0\n    elif n == 1: \n        return 0\n    else: \n        sum = 0\n        for i in range(2,n+1): \n            fib_n = fib1 + fib2\n            fib1 = fib2\n            fib2 = fib_n\n            sum = sum + fib_n\n        return sum", "category": "Python"}, {"instruction": "Write a code to identify the longest palindrome in a given string", "input": "String: kayakracecar", "output": "def get_longest_palindrome(s):\n    longest_palindrome = ''\n    s_length = len(s)\n    for i in range(s_length):\n        for j in range(i, s_length):\n            substring = s[i:j + 1]\n            if len(substring) > len(longest_palindrome) and substring == substring[::-1]:\n                longest_palindrome = substring\n    return longest_palindrome\n\n# Verify it works\nprint(get_longest_palindrome('kayakracecar'))", "category": "Python"}, {"instruction": "Design an algorithm to find the longest increasing subsequence in an array.", "input": "input = [9, 8, 4, 12, 2, 10, 6, 14, 1, 16, 3, 11, 5, 15, 7]", "output": "def get_longest_increasing_subsequence(input):\n    '''This algorithm will find the longest increasing subsequence in an array.'''\n    n = len(input)\n    leng = [1]*n\n    for i in range(n):\n        for j in range(i):\n            if(input[i] > input[j] and leng[i] < leng[j] + 1):\n                leng[i] = leng[j]+1\n    max_seq_len = max(leng)\n    max_seq = []\n    for i in range(n):\n        if(leng[i] == max_seq_len):\n            max_seq.append(input[i])\n            max_seq_len -= 1\n    max_seq.reverse()\n    return max_seq\n\nif __name__ == '__main__':\n    input = [9, 8, 4, 12, 2, 10, 6, 14, 1, 16, 3, 11, 5, 15, 7]\n    print(get_longest_increasing_subsequence(input))", "category": "Python"}, {"instruction": "Create a function to convert an integer to its binary representation.", "input": "num = 15", "output": "def int_to_binary(num):\n    '''This function will convert an integer to its binary representation.'''\n    binary = ''\n    while num > 0:\n        binary += str(num % 2)\n        num //= 2\n    return binary[::-1]\n\nif __name__ == '__main__':\n    num = 15\n    print(int_to_binary(num))", "category": "Python"}, {"instruction": "Design and implement an algorithm to add two integers.", "input": "num1 = 4\nnum2 = 5", "output": "def add_integers(num1, num2):\n    '''This function will add two integers.'''\n    return num1 + num2\n\nif __name__ == '__main__':\n    num1 = 4\n    num2 = 5\n    print(add_integers(num1, num2))", "category": "Python"}, {"instruction": "Create a Python function that takes a list of strings and removes any words that include numbers.", "input": "list_of_strings = [\"hello123\", \"world456\", \"foo\", \"bar7\"]", "output": "def remove_numbers_from_list(list_of_strings):\n    '''This function will take a list of strings and remove any words that include numbers.'''\n    modified_list = []\n    for word in list_of_strings:\n        if not any(char.isdigit() for char in word):\n            modified_list.append(word)\n    return modified_list\n    \nif __name__ == '__main__':\n    list_of_strings = [\"hello123\", \"world456\", \"foo\", \"bar7\"]\n    print(remove_numbers_from_list(list_of_strings))", "category": "Python"}, {"instruction": "Describe what an else clause does in an if statement.", "input": "", "output": "An else clause is used in an if statement as a way to define an alternative block of code that will be executed when the condition of the if statement is not met.", "category": "Python"}, {"instruction": "Design a program for implementing a linear search algorithm", "input": "[3, 6, 8, 9, 15], 8", "output": "def linear_search(list, item):\n    for i in range(len(list)):\n        if list[i] == item:\n            return i \n    return -1", "category": "Python"}, {"instruction": "Request the average temperature of the city 'Boston' from the Weather API.", "input": "", "output": "import requests\ndef get_average_temperature(city):\n    api_url = 'http://api.openweathermap.org/data/2.5/weather?q='+city+'&APPID=your_api_key'\n    response = requests.get(api_url)\n    data = response.json()\n    temp = data['main']['temp']\n    return temp - 273.15", "category": "Python"}, {"instruction": "Create a function that takes a list of words and returns a list of capitalized words.", "input": "['apple', 'orange', 'grape']", "output": "def capitalize_words(words):\n    result = []\n    for word in words:\n        result.append(word.capitalize())\n    return result", "category": "Python"}, {"instruction": "Create a program that will filter out all numbers divisible by 3 from the given list of integers.", "input": "[2, 3, 4, 6, 8, 9, 10, 12]", "output": "def filter_3(nums):\n    result = []\n    for num in nums:\n        if num % 3 != 0:\n            result.append(num)\n    return result", "category": "Python"}, {"instruction": "Define a Python class called \u201cPerson\u201d.", "input": "", "output": "class Person:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\n \n  def speak(self, message):\n    print(f\"{self.name} says: {message}\")", "category": "Python"}, {"instruction": "Write a code to generate a list of common elements from two given lists.", "input": "list_1 = [1, 2, 3, 4]\nlist_2 = [2, 4, 8, 16]", "output": "def common_list(list_1, list_2):\n    output = []\n    for i in list_1:\n        if i in list_2:\n            output.append(i)\n    return output\n\n# Result:\ncommon_list(list_1, list_2)  # [2, 4]", "category": "Python"}, {"instruction": "Compute the standard deviation of the given array.", "input": "data = [10, 15, 20, 25, 30]", "output": "import numpy as np\n\ndata = [10, 15, 20, 25, 30]\nstandard_deviation = np.std(data)\nprint(f\"Standard deviation of the given array is {standard_deviation}.\")", "category": "Python"}, {"instruction": "Perform a linear search on the given array for the target value.", "input": "arr = [2, 7, 4, 8, 10] \ntarget = 8", "output": "def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\nlinear_search(arr, target) # returns 3", "category": "Python"}, {"instruction": "Write code to parse the given JSON dataset.", "input": "{\n \"name\": \"John\",\n \"age\": 20,\n \"location\": \"Texas\"\n}", "output": "import json\n\ndata = '{\"name\": \"John\", \"age\": 20, \"location\": \"Texas\"}'\ndata = json.loads(data)\nname = data[\"name\"]\nage = data[\"age\"]\nlocation = data[\"location\"]\n\nprint(f\"Name: {name}\")\nprint(f\"Age: {age}\")\nprint(f\"Location: {location}\")", "category": "Python"}, {"instruction": "Given a BST, write a function to find the number of values greater than the root node.", "input": "25 \n   /    \\          \n  15     35\n /  \\    /  \\ \n10  20  30  40", "output": "def count_values_greater_than_root(root):\n    count = 0\n    if root.right:\n        count += 1 + count_values_greater_than_root(root.right)\n    if root.left:\n        count += count_values_greater_than_root(root.left)\n    return count", "category": "Python"}, {"instruction": "Which of the following type is used to store characters in memory?", "input": "", "output": "The data type used to store characters in memory is the character data type, also known as the char type in most programming languages.", "category": "Python"}, {"instruction": "Write a function in Python to check if a string consists of only alphabetic characters.", "input": "", "output": "def check_alphabetic(s):\n    for c in s:\n        if not c.isalpha():\n            return False\n    return True", "category": "Python"}, {"instruction": "Create a program that prints out triangle of stars.", "input": "", "output": "def print_triangle(n):\n    for i in range(1, n * 2): \n        for j in range(1, i + 1): \n            print(\"*\", end = \" \")\n        print(\"\\r\")", "category": "Python"}, {"instruction": "Write a code to parse the following JSON into a dictionary", "input": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25\n}", "output": "import json \n\ndef parse_json(json_data):\n    data = json.loads(json_data)\n    return {key: data[key] for key in data}", "category": "Python"}, {"instruction": "Given a list of names, capitalize the first letter of each name.", "input": "names = [\"john\", \"sarah\", \"joe\", \"dave\"]", "output": "def capitalize_names(names):\n    capitalized_names = []\n    for name in names:\n        capitalized_name = name[0].upper() + name[1:]\n        capitalized_names.append(capitalized_name)\n    return capitalized_names", "category": "Python"}, {"instruction": "Compute the Minkowski distance between two lists.", "input": "list_1 = [1, 2, 3]\nlist_2 = [-1, -2, -3]", "output": "def minkowski_distance(list_1, list_2, p):\n    return (sum([abs(x-y)**p for x, y in zip(list_1, list_2)]))**(1/p)\n\n# Result:\nminkowski_distance(list_1, list_2, 3)  # 6.0", "category": "Python"}, {"instruction": "Create a function to find the maximum element of a 3x3 matrix.", "input": "myMatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def find_max_element_of_matrix(matrix):\n  # declare a variable to store the max value \n  max = matrix[0][0]\n  \n  # loop through the matrix \n  for row in range(len(matrix)):\n    # loop through each element in the matrix \n    for col in range(len(matrix[row])):\n      # if the elements value is greater then the max value, set the max value to that element \n      if matrix[row][col] > max:\n        max = matrix[row][col]\n  \n  # return the max value\n  return max", "category": "Python"}, {"instruction": "Create a function that compares two binary strings and returns the number of differences between them.", "input": "string1 = \"100100\"\nstring2 = \"100011\"", "output": "def differences_in_binary_strings(string1, string2):\n  # initialise a variable to store total differences\n  total_differences = 0\n\n  # loop through each digit in the strings\n  for i in range(len(string1)):\n    # check if the digits in the same position in each string are different\n    if string1[i] != string2[i]:\n      # increment the total differences\n      total_differences += 1\n\n  return total_differences", "category": "Python"}, {"instruction": "Create a function which takes two strings as parameters and return the concatenating of the two strings.", "input": "string_1 = \"hello\"\nstring_2 = \"world\"", "output": "def concatenate_strings(s1, s2):\n    \"\"\"\n    This function takes two strings as parameters and returns the concatenation of the two strings.\n    \"\"\"\n    return s1 + s2\n\nprint(concatenate_strings(string_1, string_2)) # prints \"helloworld\"", "category": "Python"}, {"instruction": "Generate a random 10-character string with an even distribution of lowercase letters and numbers.", "input": "", "output": "import string\nimport random\n\ndef random_str():\n    chars = string.ascii_lowercase + string.digits\n    return ''.join(random.choice(chars) for _ in range(10))", "category": "Python"}, {"instruction": "Write a basic encryption function using Caesar Cipher.", "input": "", "output": "def caesar_encrypt(plaintext, key): \n    ciphertext = \"\" \n    for char in plaintext: \n        if (char.isupper()): \n            ciphertext += chr((ord(char) + key-65) % 26 + 65) \n        else: \n            ciphertext += chr((ord(char) + key - 97) % 26 + 97)\n    return ciphertext", "category": "Python"}, {"instruction": "Write a function to find the longest substring without repetition.", "input": "str = \"pwwkew\"", "output": "def longest_substring(str):\n    start = 0\n    max_length = 0\n    used_char = {}\n\n    for i, char in enumerate(str):\n        if char in used_char and start <= used_char[char]:\n            start = used_char[char] + 1\n        else:\n            max_length = max(max_length, i - start + 1)\n\n        used_char[char] = i\n\n    return max_length", "category": "Python"}, {"instruction": "Write a function to calculate the Average True Range of a given array of price data", "input": "[10, 15, 8, 11]", "output": "def calculate_ATR(data):\n    max_diff = 0\n    for i in range(1, len(data)):\n        diff = abs(data[i] - data[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff/len(data)\n\ndata = [10, 15, 8, 11]\nprint(calculate_ATR(data)) # 2.25", "category": "Python"}, {"instruction": "Compute the average value in an array of integers", "input": "[1, 2, 3, 4, 5]", "output": "def find_average(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum/len(arr)\n\narr = [1, 2, 3, 4, 5]\nprint(find_average(arr)) # 3.0", "category": "Python"}, {"instruction": "Parse the JSON string and convert it into an object.", "input": "{\"name\" : \"John\", \"Age\" : 25}", "output": "import json\n\ndef convert_to_object(data):\n    json_obj = json.loads(data)\n    return json_obj\n    \ndata = '{\"name\":\"John\", \"age\": 25}'\nobj = convert_to_object(data)\n\nprint(obj['name']) #John\nprint(obj['age']) #25", "category": "Python"}, {"instruction": "Output the first 10 numbers in the Fibonacci series.", "input": "", "output": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n    \nfor i in range(10):\n    print(fibonacci(i))", "category": "Python"}, {"instruction": "Generate a unique alphanumeric string of length 5.", "input": "", "output": "def generate_string():\n    import string\n    import random\n    characters = string.ascii_letters + string.digits\n    return ''.join(random.choice(characters) for i in range(5))", "category": "Python"}, {"instruction": "Design a basic linked list structure for storing integers.", "input": "", "output": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.length = 0\n\n    def isEmpty(self):\n        return self.head == None\n    \n    def insert(self, value):\n        node = Node(value)\n        node.next = self.head\n        self.head = node\n        self.length += 1\n        \n    def getSize(self):\n        return self.length", "category": "Python"}, {"instruction": "Create a Python class for a 3\u00d73 matrix.", "input": "", "output": "class Matrix3x3:\n\n    def __init__(self):\n        # Set the default 3x3 matrix values to 0\n        self.matrix = [[0,0,0],[0,0,0],[0,0,0]]\n\n    def set_value(self, x, y, value): \n        # Set the value in the matrix at position x and y\n        self.matrix[x][y] = value\n\n    def get_value(self, x, y): \n        # Get the value in the matrix at position x and y\n        return self.matrix[x][y]\n\n    def multiply_scalar(self, scalar): \n        # Multiply the matrix with a scalar\n        for i in range(3): \n            for j in range(3): \n                self.matrix[i][j] *= scalar", "category": "Python"}, {"instruction": "Suggest a way to count the number of two letter words in a string.", "input": "", "output": "def count_two_letter_words(string):\n    words = string.split()\n    count = 0\n    for word in words:\n        if len(word) == 2:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    string = \"This is a sample string with two letter words.\"\n    print(count_two_letter_words(string))", "category": "Python"}, {"instruction": "Write a Python program to convert all strings in a list to lower case", "input": "", "output": "def convert_to_lowercase(list_of_strings):\n    return [string.lower() for string in list_of_strings]\n\nif __name__ == '__main__':\n    string_list = [\"UPPERCASE\", \"lOwErCaSe\", \"MiXeDcAsE\"]\n    print(convert_to_lowercase(string_list))", "category": "Python"}, {"instruction": "How would you print the contents of a 2D array in Python?", "input": "", "output": "def print_2d_array(arr):\n    for row in arr:\n        for value in row:\n            print(value, end=\" \")\n        print()\n\nif __name__ == '__main__':\n    arr = [[1,2,3], [4,5,6], [7,8,9]]\n    print_2d_array(arr)", "category": "Python"}, {"instruction": "Create a function to iterate a list of strings and print them.", "input": "", "output": "def iterate_strings(string_list):\n    for string in string_list:\n        print(string)\n\nif __name__ == '__main__':\n    string_list = [\"apple\", \"banana\", \"cherry\"]\n    iterate_strings(string_list)", "category": "Python"}, {"instruction": "Implement a function which will take a list of numbers as an input and return a sorted list", "input": "", "output": "def sort_list(numbers):\n    #Base case\n    if len(numbers) <= 1:\n        return numbers\n\n    pivot = numbers[0]\n    left = []\n    right = []\n    #Divide\n    for num in numbers[1:]:\n        if num < pivot:\n            left.append(num)\n        else:\n            right.append(num)\n    #Conquer\n    left = sort_list(left)\n    right = sort_list(right)\n    #Combine\n    return left + [pivot] + right\n\nif __name__ == '__main__':\n    arr = [7, 3, 1, 9, 0]\n    print(sort_list(arr))", "category": "Python"}, {"instruction": "What is the best way to generate a random number in Python?", "input": "", "output": "The best way to generate a random number in Python is to use the random module. The random module provides access to functions  that are used to generate a random number in various distributions such as uniform, normal, exponential, and others.\n\nThe most basic function in random module is the function random(), which generates a random number from range [0, 1).\n\nFor example, the following code will generate a random number from range [1, 10):\n\n    import random\n\n    num = random.random() * 9 + 1  # Generates a random number from range [1, 10)", "category": "Python"}, {"instruction": "Implement a version of your own version of quicksort in Python", "input": "", "output": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    pivot = arr[0]\n    left = []\n    right = []\n\n    for num in arr[1:]:\n        if num < pivot:\n            left.append(num)\n        else:\n            right.append(num)\n\n    return quicksort(left) + [pivot] + quicksort(right)\n\nif __name__ == '__main__':\n    arr = [7, 3, 1, 9, 0]\n    print(quicksort(arr))", "category": "Python"}, {"instruction": "Create a Python program to calculate the product of a list of integers.", "input": "", "output": "def calculate_product(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product\n\nif __name__ == \"__main__\":\n    print(calculate_product([1,2,3,4,5]))", "category": "Python"}, {"instruction": "Produce an output string with the first two letters of the words in the given string capitalized.", "input": "string = \"hello world\"", "output": "def capitalized(string):\n    \"\"\"\n    This function takes a string as a parameter and returns a new string with the first two letters of the words in the string capitalized.\n    \"\"\"\n    output_string = \"\"\n    words = string.split()\n    for word in words:\n        output_string += word[0].upper() + word[1].upper() + word[2:] + \" \"\n    return output_string.strip()\n\nprint(capitalized(string)) # prints \"HeLlO WoRlD\"", "category": "Python"}, {"instruction": "Create a game of rock-paper-scissors using functions and conditionals.", "input": "", "output": "def play_game():\n    \"\"\"\n    This function is a game of rock-paper-scissors.\n    \"\"\"\n    import random\n    player_input = input(\"Choose rock(r), paper(p) or scissors(s): \")\n    computer_choice = random.choice([\"r\", \"p\", \"s\"])\n    if player_input == computer_choice:\n        return \"It is a draw\"\n    elif player_input == \"r\":\n        if computer_choice == \"p\":\n            return \"Computer Wins!\"\n        else:\n            return \"Player Wins!\"\n    elif player_input == \"p\":\n        if computer_choice == \"s\":\n            return \"Computer Wins!\"\n        else:\n            return \"Player Wins!\"\n    elif player_input == \"s\":\n        if computer_choice == \"r\":\n            return \"Computer Wins!\"\n        else:\n            return \"Player Wins!\"\n    else:\n        return \"Invalid input\"\n\nprint(play_game())", "category": "Python"}, {"instruction": "Algorithmically classify a given word as either a verb (action word) or a noun (object).", "input": "word = \"write\"", "output": "def classify_word(word):\n    \"\"\"\n    This function takes a word as a parameter and returns its classification - verb or noun.\n    \"\"\"\n    if word in [\"run\", \"jump\", \"swim\"]:\n        return \"verb\"\n    else: \n        return \"noun\"\n\nprint(classify_word(\"write\")) # prints \"verb\"", "category": "Python"}, {"instruction": "Analyze the given list and return the index of the first occurrence of the number 7.", "input": "numbers = [1, 2, 3, 5, 4, 7, 9, 8, 7]", "output": "numbers = [1, 2, 3, 5, 4, 7, 9, 8, 7]\n\ndef find_index(lst):\n    \"\"\"\n    This function takes a list of numbers as a parameter and returns the index of the first occurrence of the number 7.\n    \"\"\"\n    for i in range(len(lst)):\n        if lst[i] == 7:\n            return i\n        \nprint(find_index(numbers)) # prints 5", "category": "Python"}, {"instruction": "Write a code to implement a basic calculator to add two numbers.", "input": "", "output": "def add_numbers(num1, num2):\n    \"\"\"\n    This function takes two numbers as parameters and returns their sum.\n    \"\"\"\n    return num1 + num2 \n\nif __name__ == \"__main__\":\n    num1 = float(input(\"Enter first number: \"))\n    num2 = float(input(\"Enter second number: \"))\n    print(add_numbers(num1, num2))", "category": "Python"}, {"instruction": "Modify the following function to ensure that the number is always greater than zero.", "input": "def get_random_number():\n    return random.randint(-10, 10)", "output": "import random \n\ndef get_random_number():\n    num = random.randint(-10, 10)\n    if num < 0:\n        num = -num\n    return num", "category": "Python"}, {"instruction": "Code a function in Python to output the words \"Retrieved successfully\" if a web page request is successful.", "input": "", "output": "def check_status_success(request):\n    if request.status_code == 200:\n        print(\"Retrieved successfully\")\n    else:\n        print(\"Error connecting\")", "category": "Python"}, {"instruction": "Using numpy, write a function to check if a given matrix is symmetric.", "input": "my_matrix=[[1, 2, 3], [2, 4, 5], [3, 5, 6]]", "output": "import numpy as np \n\ndef check_symmetric(matrix):\n    matrix_np = np.array(matrix)\n    return np.array_equal(matrix_np, matrix_np.T)", "category": "Python"}, {"instruction": "Given a list of numbers, write a function to check for odd numbers.", "input": "my_list = [-1, 0, 1, 2, 3]", "output": "def is_odd_number(list):\n    for num in list:\n        if num % 2 != 0:\n           return True \n    return False", "category": "Python"}, {"instruction": "Explain what a hash table is.", "input": "", "output": "A hash table is a data structure used to store key-value pairs efficiently. It uses a hashing function to map each key to a unique memory address, which is used to store the associated value. Hash tables are used for fast lookups, as the time taken to find an item does not depend on the number of items stored, but rather on the size of the hash table, making them more efficient than searching through a linear list. They are also used for dynamic programming and caching data.", "category": "Python"}, {"instruction": "Devise a programming logic to find the sum of odd numbers between 1 and 50.", "input": "", "output": "total = 0\nfor i in range(1,51):\n    if (i % 2 == 1):\n        total += i\nprint(total)", "category": "Python"}, {"instruction": "Convert the following function to use the reduce method in Python.", "input": "def sum_list(nums):\n  total = 0\n  for num in nums:\n    total += num\n  return total", "output": "def sum_list(nums):\n    return reduce(lambda x,y: x + y, nums)", "category": "Python"}, {"instruction": "Create a custom function to use in a python program that checks whether a given number is even or odd.", "input": "", "output": "def even_odd(num):\n    '''This function will check if a number is even or odd\n    and return 'even' or 'odd'.\n    '''\n    if num % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"", "category": "Python"}, {"instruction": "Design a function to convert a given numerical grade to a corresponding letter grade.", "input": "", "output": "def grade_to_letter(grade):\n    if grade >= 90:\n        return 'A'\n    elif grade >= 80:\n        return 'B'\n    elif grade >= 70:\n        return 'C'\n    elif grade >= 60:\n        return 'D'\n    else:\n        return 'F'", "category": "Python"}, {"instruction": "Create a Python class \"Point\" that has two instance variables x and y.", "input": "", "output": "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y", "category": "Python"}, {"instruction": "Edit the following code in Python to swap two elements in a list.", "input": "list1 = [1, 2, 4]\n\nlist1[0], list1[1] = list1[1], list1[0]", "output": "list1 = [1, 2, 4]\n\nlist1[0], list1[2] = list1[2], list1[0]", "category": "Python"}, {"instruction": "Edit the given code to add a function that calculates the area of a circle given its radius.", "input": "def circumference(r):\n    '''Calculates the circumference of a circle given its radius'''\n    return 2* PI * r", "output": "def circumference(r):\n    '''Calculates the circumference of a circle given its radius'''\n    return 2* PI * r\n\ndef area(r):\n    '''Calculates the area of a circle given its radius'''\n    return PI * r * r", "category": "Python"}, {"instruction": "Write a function in Python that takes in two lists and returns the lengths of the lists and the values that are common in both.", "input": "list1 = [1, 2, 3, 4, 6]\nlist2 = [2, 4, 8, 10]", "output": "def compare_lists(list1, list2):\n    length1 = len(list1) \n    length2 = len(list2) \n    common_values = list(set(list1).intersection(list2)) \n    return length1, length2, common_values", "category": "Python"}, {"instruction": "Write a function in Python to merge two sorted arrays.", "input": "arr1 = [1, 5, 9]\narr2 = [2, 3, 6, 8]", "output": "def merge_sorted_arrays(arr1, arr2):\n    n1, n2 = len(arr1), len(arr2)\n    i, j, k = 0, 0, 0\n    arr3 = [0] * (n1 + n2)\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            arr3[k] = arr1[i]\n            i += 1\n        else:\n            arr3[k] = arr2[j]\n            j += 1\n        k += 1\n\n    # Copy remaining elements \n    while i < n1:\n        arr3[k] = arr1[i]\n        i += 1\n        k += 1\n\n    while j < n2:\n        arr3[k] = arr2[j]\n        j += 1\n        k += 1\n\n    return arr3", "category": "Python"}, {"instruction": "Explain how a Depth-First-Search (DFS) algorithm works.", "input": "", "output": "A Depth-First-Search (DFS) algorithm is a graph traversal technique used to traverse a graph or tree. It starts at the root node of the graph and visits each of its adjacent nodes in a pre-defined order. For each adjacent node, it visits the node and checks to see if the node has been visited. If the node has not been visited, the algorithm visits the node and adds it to the visited set. The algorithm then recursively visits the adjacent nodes of the node it just visited. It repeats this process until it has visited all the nodes in the graph.", "category": "Python"}, {"instruction": "Create a function to check if a string contains only unique characters.", "input": "string = \"Programming\"", "output": "def unique_chars(string):\n    # List to keep track of characters \n    characters = []\n    \n    for c in string:\n        if c not in characters:\n            characters.append(c)\n        else:  \n            return False\n    \n    return True", "category": "Python"}, {"instruction": "Write a Python program to find all the prime numbers in the range between 1 to 1000.", "input": "", "output": "# Python program to find all the prime numbers in a \n# given range using Sieve of Eratosthenes \n\ndef SieveOfEratosthenes(n): \n    # Create a boolean array \"prime[0..n]\" and \n    # initialize all entries it as true. A value   \n    # in prime[i] will finally be False if i is \n    # Not a prime, else True. \n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n          \n        # If prime[p] is not changed, then it is  \n        # a prime \n        if (prime[p] == True): \n              \n            # Update all multiples of p \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n    \n    # Print all prime numbers \n    prime_nums_list = [] \n    for p in range(2, n): \n        if prime[p]: \n            prime_nums_list.append(p) \n    \n    return prime_nums_list \n  \n# Driver code \nn = 1000\nprint(SieveOfEratosthenes(n))", "category": "Python"}, {"instruction": "Add a condition to the following code in Python to check if the given number is greater or less than 5.", "input": "num = 3", "output": "if num > 5:\n    print(\"The number is greater than 5\")\nelif num < 5:\n    print(\"The number is less than 5\")", "category": "Python"}, {"instruction": "Rewrite the code to implement a shell sort algorithm in Python.", "input": "", "output": "def shell_sort(arr):\n    n = len(arr)\n    gap = n//2\n \n    while gap > 0:\n \n        for i in range(gap,n):\n            temp = arr[i]\n            j = i\n            while  j >= gap and arr[j-gap] >temp:\n                arr[j] = arr[j-gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2", "category": "Python"}, {"instruction": "Write a Python code to convert the given temperature from Celsius to Fahrenheit.", "input": "25", "output": "Celsius = 25\nFahrenheit = (Celsius * 9/5) + 32\n\nprint('{} degrees Celsius is equal to {} degrees Fahrenheit.'.format(Celsius, Fahrenheit))\n# Output: 25 degrees Celsius is equal to 77 degrees Fahrenheit.", "category": "Python"}, {"instruction": "Write a Python function to find the number of odd numbers in the given list.", "input": "[1, 4, 2, 6, 3, 9]", "output": "def countOddNumbers(numbers):\n  odd_numbers = 0\n  for i in numbers:\n    if i % 2 == 1: \n      odd_numbers += 1\n  return odd_numbers\n  \nprint(countOddNumbers([1, 4, 2, 6, 3, 9]))\n# Output: 3", "category": "Python"}, {"instruction": "Design a data structure to find the first and last occurrence of a number in an array.", "input": "array = [1, 5, 7, 8, 8, 10]", "output": "class FindFirstLastOccurrence:\n    def __init__(self, arr):\n        self.arr = arr\n        self.first_occurrence = -1\n        self.last_occurrence = -1\n    \n    def findFirstLastOccurrence(self, k):\n        #Find the first occurrence\n        left = 0\n        right = len(self.arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if self.arr[mid] == k and (mid == 0 or self.arr[mid-1] < k):\n                self.first_occurrence = mid\n                break\n            elif self.arr[mid] < k:\n                left = mid+1\n            else:\n                right = mid-1\n        #Find the last occurrence\n        left = 0\n        right = len(self.arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if self.arr[mid] == k and (mid == len(self.arr)-1 or self.arr[mid+1] > k):\n                self.last_occurrence = mid\n                break\n            elif self.arr[mid] > k:\n                right = mid-1\n            else:\n                left = mid+1\n        \n        return self.first_occurrence, self.last_occurrence\n\nif __name__ == \"__main__\":\n    finder = FindFirstLastOccurrence([1, 5, 7, 8, 8, 10])\n    print(finder.findFirstLastOccurrence(8)) # (3,4)", "category": "Python"}, {"instruction": "Compare the insertion sort and the merge sort algorithms.", "input": "", "output": "Insertion sort is an in-place sorting algorithm that compares and inserts elements one at a time into a sorted list. It starts off with a single element and compares it to every element in the list. If the element is smaller than the element to the left, it moves the left element over and continues down the list until it reaches a spot where it is no longer smaller than the elements to the left, then it will insert the element in that spot. Insertion sort is a simple algorithm and is relatively fast for small lists. However, for larger lists, the time complexity can become large and the algorithm can be more expensive. \n\nMerge sort is an efficient, divide-and-conquer sorting algorithm that works by continuously dividing a list in half until it is broken down into individual elements, which are then recombined in sorted order. It has a time complexity of O(nlogn) in all cases, making it a very efficient algorithm for large lists. It also does not need additional memory for sorting, unlike some other sort algorithms. However, merge sort is not an in-place sorting algorithm and requires additional memory to perform the sorting.", "category": "Python"}, {"instruction": "Write a code to sort an array of integers using the quicksort algorithm.", "input": "array = [2, 4, 5, 1, 9, 0]", "output": "def quicksort(arr):\n    if len(arr) == 0 or len(arr) == 1:\n        return arr\n    else:\n        pivot = arr[0]\n        arr.remove(arr[0])\n        left_arr = []\n        right_arr = []\n        for element in arr:\n            if element <= pivot:\n                left_arr.append(element)\n            else:\n                right_arr.append(element)\n        left_arr = quicksort(left_arr)\n        right_arr = quicksort(right_arr)\n        sorted_arr = left_arr + [pivot] + right_arr\n        return sorted_arr\n\nif __name__ == \"__main__\":\n    array = [2, 4, 5, 1, 9, 0]\n    sorted_arr = quicksort(array)\n    print(sorted_arr)\n\n# Output: [0, 1, 2, 4, 5, 9]", "category": "Python"}, {"instruction": "Design a distributed system for an online pharmacy.", "input": "", "output": "The distributed system for an online pharmacy should consist of the following components: \n\n1. Database Server: Stores customer information, product inventory, and transaction data.\n2. Web Server: Serves web pages, process customer orders, and handles payment transactions.\n3. Application Server: Processes customer orders, handles inventory management tasks, and communicates with the pharmacy's service providers (such as shipping and billing).\n4. Messaging Server: Used to communicate with customers, send notifications, and handle customer service inquiries.\n5. Analytics Server: Collects data from the other components and used to generate reports and provide business insights.\n6. Warehouse Management System (WMS): Used by warehouse personnel to maintain inventory levels and fulfill customer orders. \n7. Payment Gateway: Provides payment processing services for customers. \n8. Content Delivery Network (CDN): Used to store and serve static content (such as images, videos, and audio files).", "category": "Python"}, {"instruction": "Write a Python program to inverse a dictionary, so that the keys become values and values become keys.", "input": "dictionary = {1:'Apple', 2:'Orange', 3:'Banana'}", "output": "# Python program to inverse a dictionary \n  \n# Function to inverse a dictionary\ndef inverse_dict(dictionary): \n    inverse = dict() \n    for key in dictionary: \n        linverse = inverse.setdefault(dictionary[key], []) \n        linverse.append(key) \n    return inverse\n  \n# example dictionary  \ndictionary = {1:'Apple', 2:'Orange', 3:'Banana'}\n  \n# Print the inverse dictionary\nprint(inverse_dict(dictionary))", "category": "Python"}, {"instruction": "Summarize how to handle missing data in Pandas.", "input": "", "output": "There are a few different approaches to handling missing data in Pandas. The most common is to fill the null values with a placeholder value such as 0 or NaN. Alternatively, you can drop the rows containing the missing values. Depending on the dataset, you may also be able to fill the missing values in with a suitable statistical or machine learning model or use a backfill or forward fill method to fill in the gaps.", "category": "Python"}, {"instruction": "List three differences between a list and a tuple in Python.", "input": "", "output": "The three main differences between a list and a tuple in Python are:\n1. Lists are mutable and tuples are immutable. That is, changes can be made to a list whereas elements of a tuple cannot be changed.\n2. Lists use square brackets and tuples use parentheses.\n3. Lists store arbitrary objects, whereas tuples store data of a specific type. For example, a list could contain integers, strings and objects while a tuple can only contain a predetermined number of elements.", "category": "Python"}, {"instruction": "Suggest a way to optimize a given code segment.", "input": "x = 0\nfor i in range(100):\n    for j in range(100):\n        x = x + 1", "output": "To optimize this code segment, you can use the NumPy library to take advantage of vectorized operations and reduce the number of iterations. Additionally, you can use MultiProcessing to run the code in parallel, taking advantage of multiple cores on the machine:\n\nimport numpy as np\n\nx = np.zeros((100, 100))\n\nfor i in range(100):\n    x[i] = x[i] + 1", "category": "Python"}, {"instruction": "Write a function that takes two numbers as inputs and returns the larger number.", "input": "", "output": "def max_num(a, b):\n    if a > b:\n        return a\n    else:\n        return b", "category": "Python"}, {"instruction": "Write a for loop in Python to print the first 10 even numbers.", "input": "", "output": "for i in range(2, 21, 2): \n    print(i)", "category": "Python"}, {"instruction": "Write an algorithm in Python to search for the first non-repeating element in a given array.", "input": "array = [4,6,4,1,8,6,44,21];", "output": "def find_non_repeating(array):\n  for i in array:\n    if array.count(i) == 1:\n      return i\n  \nfind_non_repeating(array); // Output: 1", "category": "Python"}, {"instruction": "Write a function in Python to print out the elements of a given array in reverse order.", "input": "array = [1,2,3,4,5];", "output": "def reverse_array(array): \n  for i in reversed(array): \n    print(i) \n\nreverse_array(array); // Output: 5,4,3,2,1", "category": "Python"}, {"instruction": "Determine if a given number is prime using Python.", "input": "Input: 20", "output": "def is_prime(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\nis_prime(20)\n\n# Output:\nFalse", "category": "Python"}, {"instruction": "Search the string for duplicates and remove them.", "input": "Input: \"googleeee\"", "output": "def remove_duplicates(str):\n    result = \"\"\n    for i in str:\n        if i not in result:\n            result += i\n    return result\n\nremove_duplicates(\"googleeee\")\n\n# Output:\n\"gole\"", "category": "Python"}, {"instruction": "Convert the following array to a dictionary using Python.", "input": "[('A', 5), ('B', 3), ('C', 4), ('D', 7)]", "output": "def to_dictionary(arr):\n    dict = {}\n    for i in arr:\n        dict[i[0]] = i[1]\n    return dict\n\nto_dictionary([('A',5), ('B', 3), ('C', 4), ('D', 7)])\n\n# Output:\n{'A': 5, 'B': 3, 'C': 4, 'D': 7}", "category": "Python"}, {"instruction": "Create a function to find the sum of all the multiples of 3 or 5 below 1000.", "input": "", "output": "def sum_multiples():\n    sum = 0\n    for num in range(1000):\n        if num % 3 == 0 or num % 5 == 0:\n            sum += num\n    return sum", "category": "Python"}, {"instruction": "Create a function to search a list of numbers and return the first index of the searched number, or -1 if the number does not exist.", "input": "[1,2,3], 3", "output": "def linear_search(array, num):\n    for index, element in enumerate(array):\n        if element == num:\n            return index\n    return -1", "category": "Python"}, {"instruction": "Write a code that takes in a string and returns the total count of each letter of the alphabet it contains.", "input": "example123", "output": "def letter_count(string):\n    string = string.lower()\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    counts = {letter: 0 for letter in alphabet}\n    \n    for letter in string:\n        if letter in alphabet:\n            counts[letter] += 1\n    \n    return counts", "category": "Python"}, {"instruction": "Create a code to generate a unique 7-character string of random numbers and letters.", "input": "", "output": "import random, string\n\ndef random_string():\n    random_str = ''.join([random.choice(string.ascii_letters + string.digits) for i in range(7)])\n    return random_str", "category": "Python"}, {"instruction": "Create a Python script to scrape all links from a web page.", "input": "<link to web page>", "output": "import requests\nfrom bs4 import BeautifulSoup\n\npage = requests.get('<link to web page>')\nsoup = BeautifulSoup(page.text, 'html.parser')\n\nlinks = []\nfor link in soup.find_all('a'):\n    links.append(link.get('href'))\n\n# Usage\nprint(links)", "category": "Python"}, {"instruction": "Create a Python program to create a list of the first 10 prime numbers.", "input": "", "output": "def prime_numbers(n): \n  primes = [2] \n  num = 3\n \n  while len(primes) < n: \n    for i in range(2, num): \n      if (num % i == 0): \n        break\n    else: \n      primes.append(num) \n    num += 1\n  \n  return primes\n\n# Usage\nprint(prime_numbers(10)) # [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]", "category": "Python"}, {"instruction": "Generate a function in Python to calculate the total cost of an item given its price and quantity", "input": "Price=10 and Quantity=5", "output": "def calculate_total_cost(price, quantity):\n    return price * quantity", "category": "Python"}, {"instruction": "Develop a python code to sort an array of numbers", "input": "", "output": "def bubble_sort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]", "category": "Python"}, {"instruction": "Compare inheritance and composition in Python", "input": "", "output": "Inheritance and composition in Python are two approaches for achieving code reuse. Inheritance involves creating a parent class which contains method and member field definitions. These are then used in a subclass and can be overridden to make them more specialized. Composition involves designing objects that contain references to other objects, using instance variables whose types are interfaces or classes. This way, the composition object can act as a proxy to the inner objects, passing requests on to them as required. The advantages of composition over inheritance include greater control over class dependencies and better encapsulation.", "category": "Python"}, {"instruction": "What is type hinting in Python?", "input": "", "output": "Type hinting is a feature of the Python language that allows one to add type information to a variable, a function, and its parameters. The type hinting allows Python to infer the type of data to be used and this helps the interpreter to identify any errors and provide more feedback during the development process. It also makes the code more readable and maintainable since type information can be used to provide auto-complete and better error messages.", "category": "Python"}, {"instruction": "Write a code that prints the reversed version of a given Python list.", "input": "list = [1, 2, 3, 4]", "output": "def reverse_list(lst):\n    reversed_list = lst[::-1]\n    return reversed_list\n\nprint(reverse_list([1, 2, 3, 4]))", "category": "Python"}, {"instruction": "What is stdin and stdout in Python?", "input": "", "output": "In Python, stdin and stdout are two objects used to read standard input and print standard output respectively. stdin is used to read input from the command line or a script and stdout is used to write the output back to the command line or script. The advantage of using stdin and stdout is that they are portable and work on all versions of Python, whereas using input() and print() functions work only if the code is executed directly in Python interactive shell.", "category": "Python"}, {"instruction": "Write a code to print out all dates between two given dates in Python", "input": "start_date = '08/20/2020'\nend_date = '08/30/2020'", "output": "from datetime import timedelta, date\n\ndef daterange(start_date, end_date):\n    for n in range(int ((end_date - start_date).days)):\n        yield start_date + timedelta(n)\n\nstart_date = date(2020, 8, 20)\nend_date = date(2020, 8, 30)\nfor single_date in daterange(start_date,end_date):\n    print(single_date.strftime(\"%d/%m/%Y\"))", "category": "Python"}, {"instruction": "Modify the following code to print out all even numbers in the list.", "input": "lst = [1, 2, 3, 4, 5]", "output": "for i in lst:\n    if i % 2 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Write a function that takes in a list and an element, and returns the index of the element in the list.", "input": "list = [1, 2, 5, 8, 9]\nelement = 5", "output": "def find_index(lst, element):\n    for i,num in enumerate(lst):\n        if num == element:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Debug the following code to print a list of all prime numbers between 1 and 10", "input": "for i in range(1, 10):\n    for x n range 2, i // 2\n    if i % x == 0 \n    print(i)", "output": "for i in range(2, 10): \n    is_prime = True\n    for x in range(2, i // 2 + 1): \n        if i % x == 0: \n            is_prime = False\n            break\n    if is_prime: \n        print(i)", "category": "Python"}, {"instruction": "What is the purpose of the \"os\" module in Python?", "input": "", "output": "The \"os\" module in Python provides a way of using operating system dependent functionality. It includes functions for interacting with the filesystem, manipulating paths, and creating and interpreting file descriptors. It also provides miscellaneous operating system interfaces, such as tools for accessing environmental variables and for changing the current working directory.", "category": "Python"}, {"instruction": "Create a code snippet for making a POST request using Python.", "input": "", "output": "import requests \nurl = 'https://www.example.com' \ndata = {'var1': 'value1', 'var2': 'value2'} \nresponse = requests.post(url, data=data)", "category": "Python"}, {"instruction": "Create a code to save the first ten prime numbers in an array.", "input": "", "output": "# prime number sieve\ndef prime_numbers(n): \n \n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime[p] == True): \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n  \n    prime_numbers = []\n    for p in range(2, n): \n        if prime[p]: \n            prime_numbers.append(p)\n    return prime_numbers[:10]\n  \nif __name__ == \"__main__\":\n    n = 100\n    print(prime_numbers(n))", "category": "Python"}, {"instruction": "Write a code to construct a BST with the elements 11, 18, 14, 6 and 7.", "input": "", "output": "# A node  \nclass Node:  \n    def __init__(self,key): \n        self.left = None\n        self.right = None\n        self.val = key \n\n# A function to insert a new node with the given key  \ndef insert(root,node): \n    if root is None: \n        root = node \n    else: \n        if root.val < node.val: \n            if root.right is None: \n                root.right = node \n            else: \n                insert(root.right, node) \n        else: \n            if root.left is None: \n                root.left = node \n            else: \n                insert(root.left, node) \n\n# Create root node with the key 11  \nroot = Node(11)  \ninsert(root,Node(18))  \ninsert(root,Node(14))  \ninsert(root,Node(6))  \ninsert(root,Node(7))", "category": "Python"}, {"instruction": "Write code in python to find the biggest number in a given list.", "input": "my_list = [1, 25, 8, 10, 6]", "output": "def find_biggest_number(my_list):\n    biggest_number = my_list[0]\n    for i in range(0, len(my_list)):\n        if my_list[i] > biggest_number:\n            biggest_number = my_list[i]\n    return biggest_number", "category": "Python"}, {"instruction": "You need to generate an API which returns the first 10 Fibonacci numbers.", "input": "", "output": "def FibApi():\n   def fibonacci(n):\n      if n < 0: \n         print(\"Incorrect input\") \n      elif n == 1: \n         return 0\n      elif n == 2: \n         return 1\n      else: \n         return fibonacci(n-1) + fibonacci(n-2) \n   fib_list = [] \n   for i in range(1,11): \n      fib_list.append(fibonacci(i)) \n   return fib_list", "category": "Python"}, {"instruction": "How can one randomly shuffle a list using Python?", "input": "", "output": "import random\n\ndef shuffle(list):\n    random.shuffle(list)\n    return list", "category": "Python"}, {"instruction": "What is the stack overflow limit of Python?", "input": "", "output": "The stack overflow limit of Python is 2800 frames.", "category": "Python"}, {"instruction": "You need to write code for adding a column to a pandas DataFrame.", "input": "import pandas as pd\ndf = pd.DataFrame({'A': [12, 4, 5, None, 1],\n                   'B': [7, 2, 54, 3, None],\n                   'C': [20, 16, 11, 3, 8],\n                   'D': [14, 3, 17, 2, 6]})\n\nnew_col_data = [1, 1, 15, 6, 96]", "output": "import pandas as pd\ndf = pd.DataFrame({'A': [12, 4, 5, None, 1],\n                   'B': [7, 2, 54, 3, None],\n                   'C': [20, 16, 11, 3, 8],\n                   'D': [14, 3, 17, 2, 6]})\n\nnew_col_data = [1, 1, 15, 6, 96]\n\ndf['new_col'] = new_col_data", "category": "Python"}, {"instruction": "Develop an algorithm for counting the number of unique characters in a string.", "input": "str = \"Hello World!\"", "output": "def uniqueChars(str): \n    charCount = dict() \n    for ch in str: \n        if ch in charCount: \n            charCount[ch] += 1\n        else: \n            charCount[ch] = 1\n    return len(charCount)", "category": "Python"}, {"instruction": "Create an algorithm with pseudocode to find maximum and minimum element of an array.", "input": "", "output": "Algorithm findMaxMin(arr)\n  Input: arr - an array of integers\n  Output: maxEle - the maximum element in the array, minEle - the minimum element in the array\nBegin\n  maxEle <- arr[0]\n  minEle <- arr[0]\n  for i = 0 to length(arr)-1 do\n    if arr[i] > maxEle then\n      maxEle <- arr[i]\n    end if\n    if arr[i] < minEle then\n      minEle <- arr[i]\n    end if\n  end for\n  return maxEle, minEle\nEnd", "category": "Python"}, {"instruction": "Write a function in Python that takes two arguments, a list of strings and a letter, and returns the strings which contain the letter.", "input": "lst = [\"apple\",\"banana\",\"kiwi\",\"pear\"], letter = \"a\"", "output": "def find_with_letter(lst, letter):\n    result = []\n    for s in lst:\n        if letter in s:\n            result.append(s)\n    \n    return result", "category": "Python"}, {"instruction": "Given a dictionary of words, write Python code to find out the longest word in the dictionary.", "input": "dictionary = [\"apple\", \"orange\", \"pineapple\", \"banana\"]", "output": "def findLongestWord(dictionary):\n    longestWord = ''\n    longestLength = 0\n    for word in dictionary:\n        if len(word) > longestLength:\n            longestWord = word\n            longestLength = len(word)\n    return longestWord", "category": "Python"}, {"instruction": "Write Python code to print out an inverse dictionary where the original key becomes the value and the original value become the key.", "input": "original_dict = {'a':1, 'b':2, 'c':3}", "output": "inverse_dict = {value:key for key, value in original_dict.items()}\nprint(inverse_dict)", "category": "Python"}, {"instruction": "Construct an if condition in Python to check if a given number is within the range of [2, 12].", "input": "", "output": "if 2 <= x <= 12:\n    # do something", "category": "Python"}, {"instruction": "Given two strings s1 and s2, write a Python program to find whether s1 is an anagram of s2.", "input": "s1 = 'listen'\ns2 = 'silent'", "output": "def isAnagram(s1, s2): \n    if (sorted(s1) == sorted(s2)): \n        print(\"The strings are anagrams.\") \n    else: \n        print(\"The strings aren't anagrams.\")\n  \nisAnagram(s1, s2)", "category": "Python"}, {"instruction": "Create a function to find the total of all elements in the list", "input": "nums = [1, 2, 3, 4, 5]", "output": "def find_total(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total", "category": "Python"}, {"instruction": "Create a function that takes in a 2D list and prints the contents of the list in a 2D format", "input": "matrix = [\n    [1, 2],\n    [3, 4],\n    [5, 6]\n]", "output": "def print_matrix(matrix):\n    for row in matrix:\n        for num in row:\n            print(num, end=\" \")\n        print()", "category": "Python"}, {"instruction": "Using the given data, write a function that returns the average of the given numbers", "input": "a_list = [1, 2, 3, 4, 5]", "output": "def average(a_list):\n    total = 0\n    for num in a_list:\n        total += num\n    return total / len(a_list)", "category": "Python"}, {"instruction": "Implement a function that checks if two strings are anagrams.", "input": "", "output": "def is_anagram(a, b):\n    char_to_count = {}\n    \n    if len(a) != len(b):\n        return False\n  \n    for char in a:\n        if char in char_to_count:\n            char_to_count[char] += 1\n        else:\n            char_to_count[char] = 1\n    \n    for char in b:\n        if char not in char_to_count:\n            return False\n        else:\n            char_to_count[char] -= 1\n\n    for count in char_to_count.values():\n        if count != 0:\n            return False\n\n    return True", "category": "Python"}, {"instruction": "Write a function to remove all words that contain a certain letter from an array.", "input": "arr = [\"apple\", \"banana\", \"orange\", \"grape\"];\nletter = 'a'", "output": "def remove_words_by_letter(arr, letter):\n  return [word for word in arr if letter not in word]\n\n# Testing\narr = [\"apple\", \"banana\", \"orange\", \"grape\"]\nfiltered_arr = remove_words_by_letter(arr, 'a')\nprint(\"Filtered array: \", filtered_arr)", "category": "Python"}, {"instruction": "Given a dictionary, write a function to get all the keys with a given value.", "input": "my_dict = {'a': 1, 'b': 2, 'c': 2};", "output": "def get_keys_by_value(my_dict, value):\n  keys = []\n  for k, v in my_dict.items():\n    if v == value:\n      keys.append(k)\n\n  return keys\n\n# Testing\nmy_dict = {'a': 1, 'b': 2, 'c': 2}\nkeys = get_keys_by_value(my_dict, 2)\nprint(\"Keys with the value 2 are: \", keys)", "category": "Python"}, {"instruction": "Given an array of integers, find the pair of elements that have the greatest difference.", "input": "arr = [2, 5, 9, 11, 15, 27];", "output": "def find_greatest_difference(arr):\n  max_diff = 0\n  for i in range(len(arr)):\n    for j in range(i+1, len(arr)):\n      diff = abs(arr[i] - arr[j])\n      if diff > max_diff:\n        max_diff = diff\n\n  return max_diff\n\n# Testing\narr = [2, 5, 9, 11, 15, 27]\nmax_diff = find_greatest_difference(arr)\nprint(\"Greatest difference is: \", max_diff)", "category": "Python"}, {"instruction": "Find the index of the element that occurs only once in the array.", "input": "arr = [1, 1, 5, 5, 6, 8];", "output": "def find_unique_element(arr):\n index = -1\n for i in range(len(arr)):\n  freq = 0\n  for j in range(len(arr)):\n   if arr[i] == arr[j]:\n    freq += 1\n if freq == 1:\n  index = i\n  break\n return index\n\n# Testing\narr = [1, 1, 5, 5, 6, 8]\nindex = find_unique_element(arr)\nprint(\"Index of the unique element is: \", index)", "category": "Python"}, {"instruction": "Design a function with two inputs that returns the maximum of the two.", "input": "", "output": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b", "category": "Python"}, {"instruction": "Given a list of numbers, write code using Python to print the sum of all elements.", "input": "list_numbers = [2, 3, 4, 5, 6]", "output": "sum_of_numbers = 0\n\nfor i in list_numbers:\n    sum_of_numbers += i\n\nprint(sum_of_numbers)", "category": "Python"}, {"instruction": "Write Python code to reverse the letters in the string \"hello\".", "input": "", "output": "def reverseString(s): \n    return s[::-1]\n\nprint(reverseString('hello'))", "category": "Python"}, {"instruction": "Write a function that takes in two numbers in Roman numerals and outputs the sum.", "input": "Roman numeral 1: XVI\nRoman numeral 2: IX", "output": "def roman_numerals_sum(num1, num2):\n    \"\"\"This function takes two Roman numerals as parameters and outputs their sum in Roman numerals.\"\"\"\n    Int1 = int(roman.fromRoman(num1))\n    Int2 = int(roman.fromRoman(num2))\n    Sum = Int1 + Int2\n    return roman.toRoman(Sum)", "category": "Python"}, {"instruction": "Create a function that returns an array of the three most common elements in an array.", "input": "lst = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]", "output": "def three_most_common(lst):\n    \"\"\"This function takes in an array and returns an array of the three most common elements.\"\"\"\n    lst_len = len(lst)\n    lst_dic = dict()\n \n    for n in lst:\n        if n in lst_dic:\n            lst_dic[n] += 1\n        else:\n            lst_dic[n] = 1\n \n    max_val = 0\n    max_key = 0\n    sec_key = 0\n    last_key = 0\n \n    for key, val in lst_dic.items():\n        if val > max_val:\n            max_val = val\n            last_key = sec_key\n            sec_key = max_key\n            max_key = key\n        elif val > sec_key:\n            last_key = sec_key\n            sec_key = key\n        elif val > last_key:\n            last_key = key\n    return [max_key, sec_key, last_key]", "category": "Python"}, {"instruction": "Write a function to concatenate two strings in Python.", "input": "", "output": "def concat_strings(string1, string2): \n    return string1 + string2", "category": "Python"}, {"instruction": "How does the Binary Search algorithm work?", "input": "", "output": "The Binary Search algorithm works by repeatedly dividing an ordered list of items into half and searching for the desired element in that half. If the desired element is not present in the current half, the algorithm moves to the other half and the search continues until either the desired element is found or the list is exhausted.", "category": "Python"}, {"instruction": "Write code in Python to calculate the number of times a given number appears in a list.", "input": "list = [2, 4, 3, 5, 4, 2, 3]\nNumber to find: 4", "output": "count = 0\nfor x in list:\n  if x == 4:\n    count = count +1\n\nprint(\"The number 4 appears in the list \", count, \" times.\")", "category": "Python"}, {"instruction": "What is a linked list?", "input": "", "output": "A linked list is a data structure in which each element contains data as well as a link to the next element in the list. Linked lists provide a dynamic allocation of memory which can be useful for certain applications.", "category": "Python"}, {"instruction": "Drop all duplicates from a NumPy array.", "input": "arr = [10, 20, 30, 10, 30, 20]", "output": "import numpy as np\n\ndef drop_duplicates(arr):\n    return np.unique(arr)", "category": "Python"}, {"instruction": "Create a Python class with methods that accept a value and increase the stored value by 5.", "input": "", "output": "class MyClass:\n    def __init__(self, value):\n        self.value = value\n        \n    def increase_by_five(self):\n        self.value += 5", "category": "Python"}, {"instruction": "Write a Python program to calculate the median of three given numbers.", "input": "", "output": "def median_num(n1, n2, n3):\n    if n1 > n2 and n2 > n3:\n        return n2\n    elif n3 > n2 and n2 > n1:\n        return n2\n    elif n1 > n3 and n3 > n2:\n        return n3\n    elif n2 > n3 and n3 > n1:\n        return n3\n    elif n2 > n1 and n1 > n3:\n        return n1\n    else:\n        return n1", "category": "Python"}, {"instruction": "Create an algorithm to evaluate a given expression.", "input": "(3 + 5) * 2", "output": "1. Initialize result as 0.\n2. Save 3 plus 5 in a variable.\n3. Multiply the variable by 2 and save it in another variable.\n4. Set result as the value of the new variable.\n5. Return result.", "category": "Python"}, {"instruction": "Find the length of the longest increasing subsequence in an array.", "input": "arr = [10, 22, 9, 33, 21, 50, 41, 60]", "output": "def longest_increasing_subsequence(arr):\n    n = len(arr)\n\n    # L[i] stores the length of the Longest Increasing \n    # Subsequence ending with arr[i]\n    L = [1]*n\n  \n    # consider all the elements of the array in turn\n    for i in range(1, n):\n        for j in range(i):\n\n            # if the element is larger then the prev element\n            # update L[i] with the maximum of all such\n            # possible values of L[j] + 1\n            if arr[i] > arr[j]:\n                L[i] = max(L[i], L[j] + 1)\n  \n    # L[i] now stores the LIS ending with arr[i]\n    # find the maximum of all the stored values\n    longest_length = 0\n    for i in range(n):\n        longest_length = max(longest_length, L[i])\n    return longest_length\n\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]))", "category": "Python"}, {"instruction": "Write an algorithm to sort data in an array in ascending order.", "input": "arr = [8, 0, 5, 10, 4, 6]", "output": "def bubble_sort(arr):\n    n = len(arr)\n\n    # Traverse through all array elements\n    for i in range(n-1):\n\n        # Last i elements are already in place\n        for j in range(0, n-i-1):\n\n            # traverse the array from 0 to n-i-1\n            # Swap if the element found is greater\n            # than the next element\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\nbubble_sort(arr)\nprint(arr)", "category": "Python"}, {"instruction": "Write a function that takes a sentence as an argument and returns a Dictionary of all the words and their counts in the sentence.", "input": "'The quick brown fox jumps over the lazy dog'", "output": "def count_words(sentence):\n    words_counts = {}\n\n    words = sentence.split(\" \")\n    for word in words:\n        if word not in words_counts:\n            words_counts[word] = 0\n        words_counts[word] += 1\n    return words_counts\n\nprint(count_words('The quick brown fox jumps over the lazy dog'))", "category": "Python"}, {"instruction": "Write a function that takes a list of integers and returns a new list with all duplicate numbers removed.", "input": "[3, 6, 8, 10, 10, 11, 15, 15, 15]", "output": "def remove_duplicate_integers(nums):\n    new_list = []\n    for num in nums:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list\n\nprint(remove_duplicate_integers([3, 6, 8, 10, 10, 11, 15, 15, 15]))", "category": "Python"}, {"instruction": "Generate a random number between -1 and 1 using a Python library.", "input": "", "output": "import random\nrandom_num = random.uniform(-1,1)\nprint(random_num)", "category": "Python"}, {"instruction": "How do you use a \u2018for\u2019 loop in Python to iterate over a list of strings?", "input": "list=[\"Dog\",\"Cat\",\"Cow\"]", "output": "for string in list:\n    print(string)", "category": "Python"}, {"instruction": "Build a Python dictionary that contains the names of the months as keys and the numbers of days in each month as values.", "input": "", "output": "months = {\"January\":31, \"February\":28, \"March\":31, \"April\":30, \"May\":31, \"June\":30, \"July\":31, \"August\":31, \"September\":30, \"October\":31, \"November\":30, \"December\":31}", "category": "Python"}, {"instruction": "Given two strings, create a function to find the total number of occurrences of the second string in the first string.", "input": "str1 = \"Hello World!\"\nstr2 = \"lo\"", "output": "def count_string_occurrences(str1, str2):\n    \"\"\"This function takes in two strings and returns the total number of occurrences of the second string in the first string.\"\"\"\n    count = 0\n    for i in range(len(str1) - len(str2) + 1):\n        if str1[i:i + len(str2)] == str2:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Create a function to generate a list with length n of numbers from 0 to n-1.", "input": "n = 5", "output": "def generate_list(n):\n    \"\"\"This function takes an integer n and returns a list with length n of numbers from 0 to n-1.\"\"\"\n    return [i for i in range(n)]", "category": "Python"}, {"instruction": "Create a function to detect whether a given character is a vowel or not.", "input": "", "output": "def is_vowel(char):\n    \"\"\"This function takes in a character and returns true if the character is a vowel, false otherwise.\"\"\"\n    vowels = 'aeiouAEIOU'\n    return char in vowels", "category": "Python"}, {"instruction": "Create a function to filter out elements in an array that meet a given criteria.", "input": "lst = [2, 3, 4, 5, 6, 7, 8, 9] \ncriteria = lambda x: x % 2 == 0", "output": "def filter_by(lst, criteria):\n    \"\"\"This function takes an array of elements and a criteria and returns an array of elements filtered by the criteria.\"\"\"\n    return [x for x in lst if criteria(x)]", "category": "Python"}, {"instruction": "Create a function that takes in a string and a number and returns a new string with the character at the given index replaced with another character.", "input": "str = \"Hello World!\"\n index = 3\n new_char = 'a'", "output": "def replace_char_at(str, index, new_char):\n    \"\"\"This function takes in a string and a number and returns a new string with the character at the given index replaced with another character.\"\"\"\n    return str[:index] + new_char + str[index + 1:]", "category": "Python"}, {"instruction": "Create a function to filter out strings that have more than n number of characters in an array.", "input": "lst = ['book', 'pen', 'pencil', 'eraser', 'ruler']\n n = 4", "output": "def filter_strings(lst, n):\n    \"\"\"This function takes in an array of strings and an integer n and returns an array of strings with more than n characters.\"\"\"\n    return [word for word in lst if len(word) > n]", "category": "Python"}, {"instruction": "Create a function that takes an array of integers and returns an array where each index is the product of all the numbers except for the number at that index.", "input": "lst = [1, 2, 3, 4, 5]", "output": "def product_of_all_except_self(lst):\n    \"\"\"This function takes an array of integers and returns an array where each index is the product of all the numbers except for the number at that index.\"\"\"\n    products = []\n    n = len(lst)\n    for i in range(n):\n        product = 1\n        for j in range(n):\n            if i != j:\n                product *= lst[j]\n        products.append(product)\n    return products", "category": "Python"}, {"instruction": "Create a function that filters an array of elements based on a given criteria and returns an array of the resulting elements.", "input": "lst = [2, 3, 4, 5, 6, 7, 8, 9]  # elements to filter\ncriteria = lambda x: x > 5  # criterion to filter by", "output": "def filter_by(lst, criteria):\n    \"\"\"This function takes an array of elements and a criteria and returns an array of elements filtered by the criteria.\"\"\"\n    return [x for x in lst if criteria(x)]", "category": "Python"}, {"instruction": "Describe the necessary steps to debug a python program.", "input": "", "output": "Steps to debug a python program:\n\n1. Check the syntax of your code to look for any obvious mistakes\n2. Use print statement to understand the the variables in your program and the flow of execution.\n3. Working your way through the program line by line to identify the source of the bug.\n4. Use debugging tools such as pdb to step through the code and look for any unexpected values or flow. \n5. If the bug is in a library that you're using, try to look into its source code to look for the bug.\n6. Test small pieces of your code in isolation.\n7. Take a break and come back to it with a fresh mind.\n8. Ask for help from other programmers.", "category": "Python"}, {"instruction": "Create a TCP server program using Python.", "input": "", "output": "import socket\n\n# create a socket object\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# get local machine name\nhost = socket.gethostname()\n\nport = 9999\n\n# bind to the port\ns.bind((host, port))\n\n# queue up to 5 requests\ns.listen(5)\n\nwhile True:\n   # establish a connection\n   clientsocket,addr = s.accept()\n   print(\"Got a connection from %s\" % str(addr))\n\n   msg = 'Thank you for connecting' + \"\\r\\n\"\n   clientsocket.send(msg.encode('ascii'))\n   clientsocket.close()", "category": "Python"}, {"instruction": "Create a function that takes a list and removes duplicates of the same element.", "input": "myList4 = [1,2,2,3,3,3]", "output": "def removeDuplicate(myList4):\n    result = []\n    for x in myList4:\n        if x not in result:\n            result.append(x)\n    return result\n\nremoveDuplicate = removeDuplicate(myList4)\nprint(removeDuplicate)", "category": "Python"}, {"instruction": "Create a function that takes 2 strings as arguments, and returns the longest string.", "input": "", "output": "def longestString(str1, str2):\n    if len(str1) > len(str2):\n        longestString = str1\n    else:\n        longestString = str2\n    return longestString\n\nlongestString = longestString(\"Hello\", \"World\")\nprint(longestString)", "category": "Python"}, {"instruction": "Design a class to represent a person's name.", "input": "", "output": "class PersonName:\n    \"\"\"Represents a person's name\"\"\"\n\n    # Instance Variables\n    first_name = \"\"\n    middle_name = \"\"\n    last_name = \"\"\n    \n    def __init__(self, first_name, middle_name, last_name):\n        \"\"\"Constructor to initialize the PersonName object\"\"\"\n        self.first_name = first_name\n        self.middle_name = middle_name\n        self.last_name = last_name\n  \n    # Other methods for getting, setting and printing the name", "category": "Python"}, {"instruction": "Implement a function to convert USD dollars to Euro.", "input": "amount = 100", "output": "def convert_usd_to_euro(amount):\n    \"\"\"This function takes a given amount of USD and returns the equivalent amount in Euro \"\"\"\n    euro_amount = amount * 0.82\n    return euro_amount\n    \n# Example Usage\nusd_amount = 100\neuro_amount = convert_usd_to_euro(usd_amount)\n# euro_amount should be 82.0", "category": "Python"}, {"instruction": "Given a list of numbers, write a Python function to find out the sum of the squares of all the numbers.", "input": "[1, 2, 3]", "output": "def sumSquares(numbers):\n  sum = 0\n  for num in numbers:\n    sum += (num ** 2)\n  return sum", "category": "Python"}, {"instruction": "Create a program that checks for duplicates in a list and removes them.", "input": "", "output": "def remove_duplicates(lst):\n    res = []\n    for ele in lst:\n        if ele not in res:\n            res.append(ele)\n    return res", "category": "Python"}, {"instruction": "For the following sentence, produce an output that prints the position and letter of each vowel.", "input": "text = \"Programming is fun\"", "output": "for index, letter in enumerate(text):\n    if letter in 'aeiou':\n        print(f'The letter {letter} is in position {index}.')", "category": "Python"}, {"instruction": "Create a program to calculate the Greatest Common Denominator (GCD) of two numbers.", "input": "", "output": "def gcd(a, b):\n    while b != 0:\n        c = a % b\n        a = b\n        b = c\n    return a", "category": "Python"}, {"instruction": "In a given list of integers, find the value that appears most frequently.", "input": "nums = [2,2,2,2,3,4,5,6,6,7]", "output": "def most_frequent(nums):\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 1\n        else:\n            count[num] += 1\n    max_count = 0\n    res = 0\n    for key, val in count.items():\n        if val > max_count:\n            res = key\n        max_count = max(max_count, val)\n    return res", "category": "Python"}, {"instruction": "Design a classifier using Machine Learning in Python", "input": "", "output": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n# Load the data\ndata = pd.read_csv('data.csv')\n\n# Split dataset into training and testing sets\nX, y = data.iloc[:, 0: -1], data.iloc[:, -1]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, \n                                                    random_state=42)\n\n# Preprocess by scaling the data\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n# Create the model \nclf = GradientBoostingClassifier(n_estimators=100, max_depth=4, \n                                 learning_rate=0.1)\n\n# Train the model\nclf.fit(X_train_scaled, y_train)\n\n# Test the model\ny_pred = clf.predict(X_test_scaled)", "category": "Python"}, {"instruction": "Insert a node at a specific position in the linked list.", "input": "Linked List: 0->3->4->7\nNode: 5\nPosition: 2", "output": "def insert_at_pos(head, node_data, pos):\n    new_node = Node(node_data)\n    if pos == 0:\n        new_node.next = head\n        return new_node\n    temp = head \n    for i in xrange(pos-1):\n        temp = temp.next\n    new_node.next = temp.next\n    temp.next = new_node\n    return head", "category": "Python"}, {"instruction": "Construct a linked list using the given data.", "input": "Data: [5, 6, 2, 9, 0]", "output": "class LinkedList:\n    def __init__(self):\n        self.head = None\n    def insert(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n# Given data\ndata = [5, 6, 2, 9, 0]\n\n# Create linked list\nlinked_list = LinkedList()\n\nfor i in data:\n    linked_list.insert(i)", "category": "Python"}, {"instruction": "Find the maximum subarray sum in an array of integers.", "input": "arr = [-2, -3, 4, -1, -2, 1, 5, -3]", "output": "def max_subarray_sum(arr):\n    \"\"\"This function takes an array of integers and returns the maximum subarray sum \"\"\"\n    current_max = arr[0]\n    overall_max = arr[0]\n\n    for num in arr[1:]:\n        current_max = max(current_max + num, num)\n        overall_max = max(current_max, overall_max)\n\n    return overall_max\n\n# Example Usage\narr = [-2, -3, 4, -1, -2, 1, 5, -3]\nmax_sum = max_subarray_sum(arr)\n# max_sum should be 7", "category": "Python"}, {"instruction": "Compute the length of a given string without using in built length function.", "input": "String: Hello", "output": "def calculate_length(string):\n    count = 0\n    for letter in string:\n        count += 1\n    return count", "category": "Python"}, {"instruction": "If a given string contains four consecutive identical characters, write a code to print the string and the count of the consecutive characters.", "input": "String: aaaagood", "output": "def four_consecutive_chars(input_string): \n    count = 1\n    prev_char = \"\" \n    result = \"\" \n    for char in input_string: \n        if prev_char == char:\n            count += 1 \n            if count == 4:\n                result += char + \" : \" + str(count) \n        else: \n            result += char + \" : \" + str(count) \n            count = 1\n        prev_char = char \n    print(input_string)\n    print(result)", "category": "Python"}, {"instruction": "Write a code that inverts the case for the given string.", "input": "String: wElCOme", "output": "def invert_case(input_string):\n    result = \"\"\n    for x in input_string: \n        if x.isupper():\n            result += x.lower() \n        else: \n            result += x.upper() \n    return result", "category": "Python"}, {"instruction": "Given a list, print all its elements in reverse order.", "input": "list = [2, 3, 4, 5, 6]", "output": "def reverse_print(num_list):\n  for i in range(len(num_list)-1, -1, -1):\n    print(num_list[i])\n\n# Driver code\nif __name__ == \"__main__\":\n   list = [2, 3, 4, 5, 6]\n   reverse_print(list)\nOutput:\n6\n5\n4\n3\n2", "category": "Python"}, {"instruction": "Given a list, remove all elements that are divisible by 4.", "input": "list = [8, 5, 6, 8, 9, 3, 10]", "output": "def remove_elements_divisible_by_four(num_list):\n   modified_list = []\n   for num in num_list:\n      if num % 4 != 0:\n         modified_list.append(num)\n   return modified_list\n   \n# Driver code\nif __name__ == \"__main__\":\n   list = [8, 5, 6, 8, 9, 3, 10]\n   print(remove_elements_divisible_by_four(list))\nOutput:\n[5, 9, 3]", "category": "Python"}, {"instruction": "Reorder the code snippet so that the loop terminates when i is equal to 5.", "input": "i = 0\nwhile i < 5:\n\tprint(i)\n\ti += 1", "output": "i = 0\nwhile i < 5:\n\tprint(i)\n\tif i == 5:\n\t\tbreak\n\ti += 1", "category": "Python"}, {"instruction": "Select a random element from a given list.", "input": "list = [1, 5, 8, 10]", "output": "import random\n\ndef select_random_element(list):\n    index = random.randint(0, len(list)-1)\n    return list[index]\n\nif __name__ == \"__main__\":\n    list = [1, 5, 8, 10]\n    print(select_random_element(list))", "category": "Python"}, {"instruction": "Modify the code snippet so that it prints the **largest** element in the given list.", "input": "list = [1, 5, 8, 10]", "output": "list = [1, 5, 8, 10]\n\n# This code will print the largest element in the list\nlargest = list[0]\n\nfor item in list:\n    if item > largest:\n        largest = item\n\nprint(largest)", "category": "Python"}, {"instruction": "Write a code to create a sentence from a given list of words.", "input": "words = [\"Today\",\"I\",\"am\",\"happy\"]", "output": "def create_sentence(words):\n   sentence = \"\"\n   for word in words:\n      sentence += word + \" \"\n   return sentence.strip()\n   \nif __name__ == \"__main__\":\n   words = [\"Today\",\"I\",\"am\",\"happy\"]\n   print(create_sentence(words))\nOutput:\nToday I am happy", "category": "Python"}, {"instruction": "Generate a code to execute a block of code 10 times in Python.", "input": "", "output": "for i in range(10): \n  # execute code here", "category": "Python"}, {"instruction": "Create a code to import a module called 'math' in Python.", "input": "", "output": "import math", "category": "Python"}, {"instruction": "Create a function to print the result of a multiplication table.", "input": "Table Size: 5", "output": "def print_multiplication_table(size):\n    for i in range(1, size+1): \n        for j in range(1, size+1): \n            print(str(i*j) + \"\\t\", end=' ') \n        print()", "category": "Python"}, {"instruction": "Write a Python program to create a histogram for a given list of numbers.", "input": "list = [2, 3, 6, 5]", "output": "import matplotlib.pyplot as plt\n\nplt.hist(list)\n\nplt.title(\"Histogram of numbers\")\nplt.xlabel(\"Values\")\nplt.ylabel(\"Frequency\")\n\nplt.show()", "category": "Python"}, {"instruction": "Create a Python function to print out the last n items from a given list.", "input": "list = [1, 2, 3, 4, 5], n = 3", "output": "def last_n_items(arr, n):\n    if len(arr) < n:\n        return arr\n    return arr[-n:]\n    \n# Example\nlast_n_items(list, n) # returns [3, 4, 5]", "category": "Python"}, {"instruction": "Generate a Python script that iterates over a list and prints each item.", "input": "list = [1, 2, 3, 4]", "output": "for item in list:\n    print(item)", "category": "Python"}, {"instruction": "Create a Dictionary where the list items are the keys and the square of the items are the values", "input": "myList1 = [1, 2, 3, 4, 5, 6]", "output": "def myDict(myList1):\n    result = {}\n    for i in myList1:\n        result[i] = i**2\n    return result\n\nmyDict = myDict(myList1)\nprint(myDict)", "category": "Python"}, {"instruction": "Determine which elements of the given list are strings.", "input": "data = [0, 'a', 99, [], 'b', None]", "output": "def isString(data):\n    strings = []\n    for element in data:\n        if isinstance(element, str):\n            strings.append(element)\n    return strings\n\nprint(isString(data))", "category": "Python"}, {"instruction": "Parse a given expression tree to evaluate the result", "input": "", "output": "def evaluate(root):\n    # empty tree\n    if root is None:\n        return 0\n    # leaf node\n    if root.left is None and root.right is None:\n        return int(root.data)\n    # evaluate left tree\n    left_sum = evaluate(root.left)\n \n    # evaluate right tree\n    right_sum = evaluate(root.right)\n \n    # check which operation to apply\n    if root.data == '+':\n        return left_sum + right_sum\n \n    elif root.data == '-':\n        return left_sum - right_sum\n \n    elif root.data == '*':\n        return left_sum * right_sum\n \n    else:\n        return left_sum / right_sum", "category": "Python"}, {"instruction": "Replace all vowels in a string with a specified letter", "input": "string = 'hello world'", "output": "def replaceVowels(string, ch): \n    vowels = \"aeiouAEIOU\"\n    for x in string:\n        if x in vowels:\n            string = string.replace(x, ch) \n    return string", "category": "Python"}, {"instruction": "Implement a function to retrieve the nth node of the singly-linked list", "input": "", "output": "def getNthNode(head, n): \n    if n == 0:\n        return head.value \n    current = head \n    for _ in range (n):\n        if not current.next : \n            return None\n        current = current.next \n    return current.value", "category": "Python"}, {"instruction": "Compress a given string using Run Length Encoding", "input": "string=\"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW\"", "output": "def RunLengthEncoding(string):\n    result = \"\" \n    count = 0\n    current = string[0] \n  \n    for i in range(len(string)): \n        if (string[i] == current): \n            count+= 1 \n        else: \n            result += current + str(count) \n            current = string[i] \n            count = 1\n    result += current + str(count)\n  \n    return result", "category": "Python"}, {"instruction": "Write Python code to return all indices of substrings in a given string.", "input": "string= \"hi world bye world\"", "output": "def substring_indices(string): \n    lengths = []\n    # calculate length of substring \n    for i in range(len(string)): \n        for j in range(i+1, len(string)+1): \n            lengths.append(string[i:j]) \n\n    # create array to hold all indices \n    indices = []\n    for length in lengths:\n        indices.append([i for i in range(len(string)) if string.startswith(length, i)])\n\n    return indices", "category": "Python"}, {"instruction": "Find the longest substring of a string without repeating characters", "input": "string=\"abcabcbb\"", "output": "def longestSubstring(string): \n    start_index = max_length = 0\n    visited = {} \n  \n    # traverse through the string  \n    for i in range(len(string)):  \n        if string[i] in visited and start_index <= visited[string[i]]: \n            start_index = visited[string[i]] + 1\n        else: \n            max_length = max(max_length, i - start_index + 1) \n  \n        visited[string[i]] = i \n  \n    return max_length", "category": "Python"}, {"instruction": "What is tail recursion?", "input": "", "output": "Tail recursion is a special form of recursion in which the recursive call is the last statement in the function. This form of recursion improves space efficiency of the algorithm, since only one activation record is needed at any given time, as there is no need to hold onto the history of the recursive call stack. This form of recursion can often be replaced by iterative solution for better performance.", "category": "Python"}, {"instruction": "Using the given array, create a function that returns a new array that contains elements that are greater than the given number.", "input": "arr = [2, 3, 6, 9, 5]\nnum = 4", "output": "def greater_than(arr, num):\n    result = []\n    for el in arr:\n        if el > num:\n            result.append(el)\n    return result\n\nprint(greater_than(arr, num))", "category": "Python"}, {"instruction": "In Python, write a code snippet to calculate the average of numbers in a list.", "input": "listOfNumbers = [2, 4, 6, 8]", "output": "def avg(listOfNumbers):\n    total = 0\n    for number in listOfNumbers:\n        total += number\n    return total / len(listOfNumbers)\n\nprint(avg(listOfNumbers))", "category": "Python"}, {"instruction": "Using the given array, write a function to return the count of elements next to each other that are equal.", "input": "a = [1,1,1,2,2,3,4,4,4,4]", "output": "def adjacent_elements_count(arr):\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            count += 1\n\n    return count\n\nprint(adjacent_elements_count(a))", "category": "Python"}, {"instruction": "Given the example JSON string, neatly organize the contents of the object using Python code.", "input": "{ \"1\": \"Apple\", \"2\": \"Orange\", \"3\": {\"A\": \"Banana\", \"B\": \"Grape\"} }", "output": "import json\n\ndata = { \"1\": \"Apple\", \"2\": \"Orange\", \"3\": {\"A\": \"Banana\", \"B\": \"Grape\"} }\n\ndata_json = json.dumps(data, indent=4)\n\nprint(data_json)", "category": "Python"}, {"instruction": "Write an algorithm to search an element in a linked list.", "input": "", "output": "def search_node(node, target):\n    while node is not None: \n        if node.data == target: \n            return node\n        else: \n            node = node.next\n    return None", "category": "Python"}, {"instruction": "What is the most efficient way to check if a given number is a prime in Python?", "input": "", "output": "The most efficient way to check if a given number is a prime in Python is to use the numpy.prime() function. This function returns a boolean value indicating whether the given number is a prime or not. The syntax is as follows:\n\nnumpy.prime(n)\n\nThe argument n must be a positive integer.\n\nFor example, to check if the number 7 is prime, you can use the following code:\n\nimport numpy as np\n\nnumber = 7\nprint(np.isprime(number)) # returns True", "category": "Python"}, {"instruction": "What is the best way to print something to the console in Python?", "input": "", "output": "The best way to print something to the console in Python is by using the built-in print() function. The syntax of this function is as follows:\n\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nThe print() function prints the given object to the standard output. The sep and end are keyword-only arguments which specify string to separate and end the output respectively. The default separator is a single space and the default end-string is a newline. The file argument specifies an open file object, for printing to a file, or an object with a write() method.\n\nFor example, to print the string \"hello\" to the console, you can use this code:\n\nprint(\"hello\")", "category": "Python"}, {"instruction": "Create a program to apply upper case to a given string.", "input": "String = \"welcome to The world Of gEEks\"", "output": "def upperCaseString(str): \n    res = \"\" \n    for i in range(len(str)):\n        if i==0 or (str[i-1]==' '): \n            res = res + str[i].upper()\n        else:\n            res = res + str[i]\n    return res \n\nstr = \"welcome to The world Of gEEks\"\nprint(upperCaseString(str))", "category": "Python"}, {"instruction": "Create a program to output an array of words from a given string.", "input": "String = \"Welcome to the world of Geeks\"", "output": "def extract_words(str): \n    \n    # to store the extracted words \n    words = [] \n  \n    # split the string \n    word = \"\" \n    for i in str: \n        if i is not \" \": \n            word = word + i \n        else: \n            words.append(word) \n            word = \"\"             \n    words.append(word) \n      \n    # return the list of words \n    return words  \n  \n# Driver code \nstr = \"Welcome to the world of Geeks\"\nwords = extract_words(str) \nfor i in words: \n    print(i)", "category": "Python"}, {"instruction": "Design and write a code to detect and count the number of occurrences of a particular substring in a string.", "input": "String = \"Please find the number of occurrences of this string\"\nSubstring = \"string\"", "output": "def count_occurrences(str, substr):\n    count = 0\n    start_index = -1 \n    while True:\n        start_index = str.find(substr, start_index + 1)\n        if start_index == -1:\n            break \n        count = count + 1\n    return count \nprint(\"Number of occurrences:\",count_occurrences(\"Please find the number of occurrences of this string\", \"string\"))", "category": "Python"}, {"instruction": "Create a program to output the items in a list that appear only once.", "input": "list = [50, 10, 20, 30, 10, 50, 44, 55, 44]", "output": "items_set = set(list)\nunique_items = []\n\nfor item in items_set:\n    if list.count(item) == 1:\n        unique_items.append(item)\n\nprint(\"Unique items:\",unique_items)", "category": "Python"}, {"instruction": "Design and write a code to identify the maximum number of vowels contained in any given string.", "input": "String = \"Queensland\"", "output": "def vowel_count(str): \n    # making a set of vowels \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'} \n  \n    # counter variable to store the count of vowels \n    count = 0\n  \n    #a loop to check every character in a given string\n    for alphabet in str: \n  \n        # if statement to check if the character is in set of vowels \n        if alphabet in vowels: \n            count = count + 1\n  \n    #returning the count \n    return count \n  \n# Driver code \nstr = \"Queensland\"\nprint(\"No. of vowels :\", vowel_count(str))", "category": "Python"}, {"instruction": "In Python, define a function to extract characters after a given substring.", "input": "String = \"Hello-world-123\"\nSubstring = \"-world\"", "output": "def extract_string(str, substr):\n    start_index = str.find(substr)\n    if start_index == -1:\n        return \"\"\n    else:\n        end_index = start_index + len(substr)\n        return str[end_index:] \n   \nx = extract_string(\"Hello-world-123\", \"-world\")\nprint(x)", "category": "Python"}, {"instruction": "Create a Python program to validate an email address according to RFC5322 syntax.", "input": "", "output": "import re\ndef validate(email):\n    regex = r'^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n    if re.search(regex, email):\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Convert the given list to a dictionary where the items are the keys and the values are square of the keys.", "input": "myList3 = [1, 2, 3, 4, 5]", "output": "def myDict(myList3):\n    result = {}\n    for i in myList3:\n        result[i] = i**2\n    return result\n\nmyDict = myDict(myList3)\nprint(myDict)", "category": "Python"}, {"instruction": "Implement a function for generating a list of Fibonacci numbers up to n.", "input": "", "output": "def fibonacci_list(n): \n    fib_list = [1,1] \n    while fib_list[-1] < n: \n        next_num = fib_list[-1] + fib_list[-2] \n        fib_list.append(next_num)\n    return fib_list", "category": "Python"}, {"instruction": "Design a class for an Employee with attributes name, experience, and salary.", "input": "", "output": "class Employee: \n    def __init__(self, name, experience, salary):\n        self.name = name\n        self.experience = experience\n        self.salary = salary\n        \n    def get_name(self):\n        return self.name\n    \n    def get_experience(self):\n        return self.experience\n    \n    def get_salary(self):\n        return self.salary", "category": "Python"}, {"instruction": "Construct an if/else statement that checks if a number is between 1 and 10.", "input": "", "output": "if n >= 1 and n <= 10:\n    # do something\nelse:\n    # do something else", "category": "Python"}, {"instruction": "Develop an algorithm to process a given matrix.", "input": "", "output": "def processMatrix(matrix):\n  result_matrix = [[0 for i in range(len(matrix[0]))] for j in range(len(matrix))] \n  for row in range(len(matrix)):\n    for col in range(len(matrix[0])):\n      element = matrix[row][col]\n      # perform processing on element here\n      result_matrix[row][col] = element\n  return result_matrix", "category": "Python"}, {"instruction": "Develop a Python class for handling the API calls.", "input": "", "output": "class APIHandler:\n    def __init__(self, base_url, api_key):\n        self.base_url = base_url\n        self.api_key = api_key\n    \n    def get(self, endpoint):\n        response = requests.get(self.base_url + endpoint)\n        return response\n    \n    def post(self, endpoint, data):\n        headers = {'Authorization': 'Bearer ' + self.api_key}\n        response = requests.post(self.base_url + endpoint, headers=headers, data=data)\n        return response", "category": "Python"}, {"instruction": "Please write a program that prints out the Fibonacci sequence from 1 to n.", "input": "n = 10", "output": "\"\"\"\nPlease write a program that prints out the Fibonacci sequence from 1 to n.\n\"\"\"\ndef fibonacci(n):\n    fib = [1, 1]\n    for i in range(2, n):\n        a = fib[i-2]\n        b = fib[i-1]\n        fib.append(a+b)\n    return fib[:n]\n\nprint(fibonacci(n)) # [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]", "category": "Python"}, {"instruction": "Create a program that sorts an array of integers in ascending order.", "input": "arr = [5, 9, 1, 4, 3]", "output": "\"\"\"\nCreate a program that sorts an array of integers in ascending order.\n\"\"\"\ndef sort(arr): \n    for i in range(len(arr)-1): \n        min_index = i \n        for j in range(i+1, len(arr)): \n            if arr[min_index] > arr[j]: \n                min_index = j       \n        arr[i], arr[min_index] = arr[min_index], arr[i]\n\nsort(arr)\nprint(arr) # [1, 3, 4, 5, 9]", "category": "Python"}, {"instruction": "Create a code that summation of all numbers between 1 to n.", "input": "n = 5", "output": "\"\"\"\nCreate a code that summation of all numbers between 1 to n.\n\"\"\"\ndef sum_all_nums(n):\n    res = 0\n    \n    for i in range(1, n+1):\n        res += i\n    \n    return res\n\nprint(sum_all_nums(n)) # 15", "category": "Python"}, {"instruction": "What is a text editor?", "input": "", "output": "A text editor is a computer program used for entering, editing, formatting and displaying text. Some text editors support syntax coloring, code completion and autopairing for programming languages. Text editors are used for programming, writing, composition, web design and many other forms of text-related work.", "category": "Python"}, {"instruction": "Given an array of strings, find the longest common prefix string.", "input": "arr = [\"Code\", \"Coder\", \"Codecademy\", \"Codesigner\"]", "output": "\"\"\"\nGiven an array of strings, find the longest common prefix string.\n\"\"\"\ndef longest_common_prefix(arr): \n    if len(arr) == 0: \n        return \"\" \n \n    min_length = len(min(arr, key = len)) \n  \n    result = \"\" \n    i = 0\n    while i < min_length: \n        char = arr[0][i] \n        for j in range(1, len(arr)): \n            if arr[j][i] != char: \n                return result \n        result += char \n        i += 1\n    return result\n\nprint(longest_common_prefix(arr)) # Code", "category": "Python"}, {"instruction": "Given a matrix of size m x n, transpose it.", "input": "matrix = [[1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9]]", "output": "\"\"\"\nGiven a matrix of size m x n, transpose it.\n\"\"\"\ndef transpose_matrix(matrix):\n    t_matrix = []\n    for i in range(len(matrix[0])):\n        temp = []\n        for j in range(len(matrix)):\n            temp.append(matrix[j][i])\n        t_matrix.append(temp)\n    return t_matrix\n    \nprint(transpose_matrix(matrix)) # [[1, 4, 7], [2, 5, 8], [3, 6, 9]]", "category": "Python"}, {"instruction": "How would you code a function that takes a string and returns true if it is a palindrome, and false otherwise?", "input": "", "output": "\"\"\"\nHow would you code a function that takes a string and returns true if it is a palindrome, and false otherwise?\n\"\"\"\ndef is_palindrome(string):\n    n = len(string)\n    for i in range(n // 2):\n        if string[i] != string[n - i - 1]:\n            return False\n    return True", "category": "Python"}, {"instruction": "How can you optimize this code to improve its efficiency?", "input": "def multiply_lists(first_list, second_list): \n    result = 0\n    for element in first_list: \n        for value in second_list: \n\t        result += element * value \n    return result", "output": "\"\"\"\nHow can you optimize this code to improve its efficiency?\n\"\"\"\ndef multiply_lists(first_list, second_list): \n    result = 0\n    for element in first_list:\n        result += element * sum(second_list)\n    return result", "category": "Python"}, {"instruction": "Write a function to fetch the first N elements from a given array.", "input": "array = [1,2,3,4,5,6,7,8,9,10]", "output": "def fetchFirstNElements(array, n):\n  firstNElements = []\n  for i in range(n):\n    firstNElements.append(array[i])\n  return firstNElements", "category": "Python"}, {"instruction": "Given an array of integers, find the sum of the numbers that are divisible by 3.", "input": "nums = [1, 5, 6, 9, 10, 12, 15]", "output": "\"\"\"\nGiven an array of integers, find the sum of the numbers that are divisible by 3.\n\"\"\"\ndef find_sum_divisible_by_3(nums):\n    total = 0\n    for num in nums:\n        if num % 3 == 0:\n            total += num\n    return total\n\nprint(find_sum_divisible_by_3(nums)) # 18", "category": "Python"}, {"instruction": "Create a class for doubly linked list in Python.", "input": "", "output": "class DoublyLinkedList:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n        self.previous = None\n\n    def append(self, val): \n        current = self \n        while current.next is not None: \n            current = current.next\n        current.next = DoublyLinkedList(val) \n        current.next.previous = current", "category": "Python"}, {"instruction": "Develop a Python program", "input": "Create a program to validate an ISBN number.", "output": "def is_valid_isbn(isbn):\n    isbn_length = len(isbn)\n    if isbn_length != 10:\n        return False\n   \n    # Calculate the check digit\n    sum = 0\n    for i in range(9):\n        sum += (i+1) * int(isbn[i])\n    check_digit = sum % 11\n   \n    # Check if the check digit matches the last character of the ISBN.\n    if check_digit == 10 and isbn[-1].upper() != 'X':\n        return False\n    elif check_digit < 10 and int(isbn[-1]) != check_digit:\n        return False\n    else:\n        return True", "category": "Python"}, {"instruction": "Write a Python script to call a web API", "input": "Call openweathermap.org's API with a given city name.", "output": "import requests \n  \napi_key = \"YOURAPIKEY\"\n  \n# base_url variable to store url \nbase_url = \"http://api.openweathermap.org/data/2.5/weather?\"\n  \n# Give city name \ncity_name = input(\"Enter city name : \") \n  \n# complete_url variable to store \n# complete url address \ncomplete_url = base_url + \"appid=\" + api_key + \"&q=\" + city_name \n\n# get method of requests module \n# return response object \nresponse = requests.get(complete_url) \n  \n# json method of response object  \n# convert json format data into \n# python format data \nx = response.json() \n  \n# Now x contains list of nested dictionaries \n# Check the value of \"cod\" key is equal to \n# \"404\", means city is found otherwise, \n# city is not found \nif x[\"cod\"] != \"404\": \n  \n    # store the value of \"main\" \n    # key in variable y \n    y = x[\"main\"] \n  \n    # store the value corresponding \n    # to the \"temp\" key of y \n    current_temperature = y[\"temp\"] \n  \n    # store the value corresponding \n    # to the \"pressure\" key of y \n    current_pressure = y[\"pressure\"] \n  \n    # store the value corresponding \n    # to the \"humidity\" key of y \n    current_humidiy = y[\"humidity\"] \n  \n    # store the value of \"weather\" \n    # key in variable z \n    z = x[\"weather\"] \n  \n    # store the value corresponding  \n    # to the \"description\" key at  \n    # the 0th index of z \n    weather_description = z[0][\"description\"] \n  \n    # print following values \n    print(\" Temperature (in kelvin unit) = \" +\n                    str(current_temperature) + \n          \"\\n atmospheric pressure (in hPa unit) = \" +\n                    str(current_pressure) +\n          \"\\n humidity (in percentage) = \" +\n                    str(current_humidiy) +\n          \"\\n description = \" +\n                    str(weather_description)) \n  \nelse: \n    print(\" City Not Found \")", "category": "Python"}, {"instruction": "Generate a class that manages the customer data", "input": "The class should have attributes of customer name, address, phone number, and email address.", "output": "class CustomerData:\n    def __init__(self, name, address, phone_number, email_address):\n        self.name = name\n        self.address = address\n        self.phone_number = phone_number\n        self.email_address = email_address\n\n    def get_name(self):\n        return self.name\n    \n    def get_address(self):\n        return self.address\n    \n    def get_phone_number(self):\n        return self.phone_number\n    \n    def get_email_address(self):\n        return self.email_address", "category": "Python"}, {"instruction": "Generate a random 8 digit string composed of numbers and letters in Python 3.", "input": "", "output": "import string\nimport random\n \n#Generate 8 character random string\ndef generate_random_string(stringLength=8):\n    lettersAndDigits = string.ascii_letters + string.digits\n    return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))\n\n#Driver code \nrandom_string = generate_random_string()\nprint(f\"Random String Generator: {random_string}\")", "category": "Python"}, {"instruction": "Implement a function in Python 3 to get the largest element from a sequence.", "input": "numbers = [2, 4, 7, 8, 10]", "output": "def get_largest_element(seq):\n  return max(seq)\n\n#Usage \nlargest_element = get_largest_element(numbers)\n#largest_element is 10", "category": "Python"}, {"instruction": "Design a Python function that computes the sum of two numbers.", "input": "", "output": "def sum_two_numbers(num1, num2):\n    \"\"\"\n    This function will take two numbers as inputs and return their sum.\n    \"\"\"\n    return num1 + num2", "category": "Python"}, {"instruction": "Create an recursive algorithm in Python to find the nth number in Fibonacci sequence.", "input": "", "output": "def fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2)", "category": "Python"}, {"instruction": "Create a python function to return the highest value in a given list of numbers.", "input": "", "output": "def get_max(list):\n    max_value = list[0]\n    for value in list:\n        if value > max_value:\n            max_value = value\n    return max_value", "category": "Python"}, {"instruction": "Write a while loop in Python which prints numbers from 1 to 10.", "input": "", "output": "i = 1\nwhile i <= 10:\n  print(i)\n  i += 1", "category": "Python"}, {"instruction": "define a function \"gcd\" which finds the greatest common divisor of two numbers.", "input": "", "output": "\"\"\"\nDefine a function \"gcd\" which finds the greatest common divisor of two numbers.\n\"\"\"\ndef gcd(x, y): \n  \n   while(y): \n       x, y = y, x % y \n  \n   return x \n\n\"\"\"\nTest the function gcd \n\"\"\"\n\na = 98\nb = 56\nprint(\"The gcd of\", a, \"and\", b, \"is\", gcd(a, b))", "category": "Python"}, {"instruction": "Write code that transforms input data into a given format.", "input": "data = {\n  'name': 'John',\n  'age': 30,\n  'email': 'john@example.com'\n}", "output": "def transformData(data):\n  result_data = {}\n  for key, value in data.items():\n    result_data[key+'_uppercase'] = str(value).upper()\n  return result_data", "category": "Python"}, {"instruction": "Create a function that counts the number of an specific letter in a given string.", "input": "string = \"hello, world\"\nletter = \"l\"", "output": "def countLetter(string, letter):\n  count = 0\n  for char in string:\n    if char == letter:\n      count += 1\n  return count", "category": "Python"}, {"instruction": "Generate a list containing all the names of the students in a given class.", "input": "class_list = ['John', 'Jane', 'Daniel', 'Nina']", "output": "def generateStudentNamesList(class_list):\n  student_names_list = []\n  for student in class_list:\n    student_names_list.append(student)\n  return student_names_list", "category": "Python"}, {"instruction": "Convert a given number from base 10 to base 16.", "input": "Number: 245", "output": "def base10_to_base16(num):\n    return hex(num).upper()[2:]\n\nif __name__ == '__main__':\n    print(base10_to_base16(245))", "category": "Python"}, {"instruction": "Create an array of Unicode objects from the given string.", "input": "String: Hello World", "output": "import unicodedata\n\ndef string_to_unicode_array(string):\n    return [unicodedata.lookup(ord(char)) for char in string]\n\nif __name__ == '__main__':\n    print(string_to_unicode_array('Hello World'))", "category": "Python"}, {"instruction": "Write a code to find the cost of the cheapest product from a list of products in JSON format.", "input": "[\n    {\n      \"Name\": \"Biscuit\",\n      \"Price\": 3.00\n    },\n    {\n      \"Name\": \"Cake\",\n      \"Price\": 2.50 \n    },\n    {\n      \"Name\": \"Chocolate\",\n      \"Price\": 4.00\n    }\n]", "output": "\"\"\"\nFind the cost of the cheapest product from a list of products in JSON format\n\"\"\"\n\nimport json\n\ndef find_cheapest_product(products):\n    cheapest_product = (None, float('inf'))\n    for product in products:\n        if product['Price'] < cheapest_product[1]:\n            cheapest_product = (product['Name'], product['Price'])\n            \n    return cheapest_product[1]\n\nif __name__ == '__main__':\n    products = [\n        {\n            \"Name\": \"Biscuit\",\n            \"Price\": 3.00\n        },\n        {\n            \"Name\": \"Cake\",\n            \"Price\": 2.50 \n        },\n        {\n            \"Name\": \"Chocolate\",\n            \"Price\": 4.00\n        }\n    ]\n    \n    print(find_cheapest_product(products))", "category": "Python"}, {"instruction": "Design a program in Python for searching for a given item in a list.", "input": "list_items = ['apple', 'banana', 'cake', 'orange']\nitem_to_search = 'cake'", "output": "def search_item(list_items, item_to_search): \n    for item in list_items: \n        if item == item_to_search: \n            return True \n    return False \n\nlist_items = ['apple', 'banana', 'cake', 'orange']\nitem_to_search = 'cake'\n\nprint(search_item(list_items, item_to_search))", "category": "Python"}, {"instruction": "Using Python, find the number of unique characters in the string \"hello world\".", "input": "", "output": "len(set(\"hello world\")) # 10 unique characters", "category": "Python"}, {"instruction": "Use the re module in Python to extract the numbers from a given string.", "input": "Input string: \u201cThere are 9 dogs and 8 cats here\u201d", "output": "import re\n\ninput_string = \"There are 9 dogs and 8 cats here\"\n\n# Get the numbers from the string\nnumbers = re.findall('\\d+', input_string) \n\nprint(numbers)\n# Output ['9', '8']", "category": "Python"}, {"instruction": "Construct a function to print out the odd numbers in a given array", "input": "", "output": "def odd_numbers(arr):\n    for i in range(len(arr) ):\n        if arr[i] % 2 != 0:\n            print(arr[i])", "category": "Python"}, {"instruction": "Implement a function to delete a node in a linked list", "input": "", "output": "def delete_node(node):\n  if node is None or node.next is None:\n    return\n  \n  next_node = node.next\n  node.data = next_node.data\n  node.next = next_node.next\n  next_node = None", "category": "Python"}, {"instruction": "Write a python program to find all anagrams in a given string", "input": "str = \u201cabc\u201d", "output": "def find_anagrams(str):\n    # list to store anagrams\n    anagrams = [] \n      \n    # create a frequency array of alphabets present in string \n    freq = [0] * 26\n    for char in str: \n        freq[ord(char) - ord('a')] += 1\n          \n    # Loop through all the elements from 0 to ( 2^length of string \u2013 1 ) \n    for i in range(1<<len(str)): \n          \n        # Convert the number to binary string \n        # and calculate its frequency array \n        temp_freq = list(freq)\n        str_bin = bin(i)[2:] \n        n = len(str_bin) \n        for j in range(n): \n            if str_bin[j] == '1': \n                temp_freq[j] -= 1\n              \n        # temp_freq is anagram if all element are 0 \n        if all(x == 0 for x in temp_freq): \n            anagram = \"\" \n            for j in range(n):\n                if str_bin[j] == '1': \n                    anagram += str[j]\n            anagrams.append(anagram)\n                  \n    print(\"All anagrams for '\"+str +\"' are :\" + str(anagrams))", "category": "Python"}, {"instruction": "Create a Python script that adds two numbers together and returns the result.", "input": "", "output": "def add_numbers(a, b):\n return a + b", "category": "Python"}, {"instruction": "Generate a secure password using the following algorithm.", "input": "", "output": "import string \nimport random\n\ndef generate_password():\n\t# Create a string of lowercase and uppercase letters and numbers\n    chars = string.ascii_letters + string.digits\n\t#randomly select 8 characters\n    return ''.join(random.choice(chars) for _ in range(8))\n\npassword = generate_password()\nprint(password)", "category": "Python"}, {"instruction": "Write a code for an object-oriented Bubble Sort algorithm.", "input": "", "output": "class Bubble:\n    def sort(self, list):\n        # iterate over the list\n        for i in range(len(list) - 1):\n            for j in range(len(list) - 1 - i): # loop from the first until the last\n                if list[j] > list[j+1]:  # if order is broken\n                    list[j], list[j+1] = list[j+1], list[j]  # swap the elements\n\n# Driver Code \nif __name__ == '__main__': \n    list = [ 64, 34, 25, 12, 22, 11, 90 ]\n    bubble = Bubble() \n    bubble.sort(list) \n   \n    print (\"Sorted array :\") \n    for i in range(len(list)): \n        print (\"%d\" %list[i])", "category": "Python"}, {"instruction": "Use the following list to create an array in Python.", "input": "", "output": "list = [1, 2, 3, 4, 5]\narray = np.array(list)", "category": "Python"}, {"instruction": "Use the following code to create a dictionary of the words in the text and the frequency of their occurrence.", "input": "text = \u201ca happy day makes a happy life\u201d", "output": "text = \u201ca happy day makes a happy life\u201d\nwords_dict = {}\n\nfor word in text.split():\n    if word not in words_dict:\n        words_dict[word] = 1\n    else:\n        words_dict[word] += 1", "category": "Python"}, {"instruction": "Using the Python library `pygame`, create a simple game where the player is able to move a character on screen using the arrow keys.", "input": "", "output": "import pygame \npygame.init()  \n  \n# setting up the display window \nwin = pygame.display.set_mode((500, 500)) \n\n# creating a character that is used to move in the window \nx = 50 \ny = 50 \nvel = 5\n\n# The main game loop \nrun = True\nwhile run: \n  \n    # reacts to the event from keyboard \n    for event in pygame.event.get(): \n        if event.type == pygame.QUIT: \n            run = False\n          \n    # checks if the key pressed is left or right\n    # and moves the character accordingly \n    keys = pygame.key.get_pressed() \n\n    if keys[pygame.K_LEFT]: \n        x -= vel\n\n    if keys[pygame.K_RIGHT]: \n        x += vel\n\n    # draws the character at its x and y position \n    pygame.draw.rect(win, (255, 0, 0), (x, y, 40, 40))\n\npygame.quit()", "category": "Python"}, {"instruction": "Write a Python code snippet that creates a dictionary containing the numbers 1 to 10 as the keys and their squares as the values.", "input": "", "output": "squares_dict = { i:i*i for i in range(1, 11) }", "category": "Python"}, {"instruction": "Explain how to set up an XOR gate using two NAND gates and one NOT gate.", "input": "", "output": "To set up an XOR gate using two NAND gates and one NOT gate, connect the two NAND gates in series and connect the output from the second NAND gate to the NOT gate's input. Connect the output from the NOT gate to the input of the first NAND gate. The output from the first NAND gate is the output of the XOR gate.", "category": "Python"}, {"instruction": "Choose a suitable data structure to store a collection of products.", "input": "", "output": "The most suitable data structure for storing a collection of products is a dictionary where a unique identifier is used as the key and the product attributes are stored in values associated with that key.", "category": "Python"}, {"instruction": "Design a program that returns the length of a given string.", "input": "String = \"Hello World\"", "output": "def stringLength(mystring): \n    counter = 0\n    for char in mystring: \n        counter += 1\n    return counter", "category": "Python"}, {"instruction": "Write a Python script to generate a random number between two numbers.", "input": "", "output": "import random\n\ndef rand_num(min_num,max_num):\n    return random.randrange(min_num,max_num)", "category": "Python"}, {"instruction": "Compose a program to sort an array of integers using bubble sort.", "input": "", "output": "def bubbleSort(arr): \n    n = len(arr) \n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]", "category": "Python"}, {"instruction": "Develop a program to identify the longest common prefix between two strings.", "input": "String1 = \"Hellocat\"\nString2 = \"Hellokong\"", "output": "def longestCommonPrefix(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    result = \"\" \n    j = 0\n    i = 0\n    while(i <= n1 - 1 and j <= n2 - 1): \n        if (str1[i] != str2[j]): \n            break\n        result += str1[i] \n        i += 1\n        j += 1\n  \n    return result", "category": "Python"}, {"instruction": "Write a function that removes all occurrences of a character from a given string.", "input": "string = \"happiness\"\nchar = \"p\"", "output": "def removeCharFromString(string, char):\n  result_string = []\n  for c in string:\n    if c != char:\n      result_string.append(c)\n  return ''.join(result_string)", "category": "Python"}, {"instruction": "Write a for loop in Python to sum up the elements of an array.", "input": "[5, 9, 2]", "output": "arr = [5, 9, 2]\ntotal = 0\n\nfor num in arr:\n    total+=num\n\nprint(total)\n\nOutput: 16", "category": "Python"}, {"instruction": "Reverse a Python dictionary.", "input": "{ 1: 'A', 2: 'B', 3: 'C' }", "output": "def reverse_dict(d):\n    return {v: k for k, v in d.items()}\n\nif __name__ == '__main__':\n    print(reverse_dict({ 1: 'A', 2: 'B', 3: 'C' }))", "category": "Python"}, {"instruction": "How can we select unique elements from a list in Python?", "input": "", "output": "We can select unique elements from a list in Python using the set() and list() functions. The set() function takes an iterable object, such as a list, and returns the unique elements of that object in the form of a set. The list() function takes the set and returns its elements as a list.\n\nExample:\n\noriginal_list = [1, 2, 3, 1, 4, 2]\nunique_list = list(set(original_list))\n\nprint(unique_list)\n\nOutput: [1, 2, 3, 4]", "category": "Python"}, {"instruction": "Write a python snippet to reverse the words in a sentence.", "input": "This sentence should be reversed.", "output": "''.join(reversed(sentence.split()))", "category": "Python"}, {"instruction": "Write a TensorFlow code to classify MNIST.", "input": "", "output": "# Load the MNIST dataset\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n\n# Reshape and normalize the input data\nx_train = x_train.reshape(x_train.shape[0], 28, 28, 1)\nx_test = x_test.reshape(x_test.shape[0], 28, 28, 1)\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\nx_train /= 255\nx_test /= 255\n\n# Build the model\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train and evaluate the model\nmodel.fit(x_train, y_train, epochs=10)\nmodel.evaluate(x_test, y_test)", "category": "Python"}, {"instruction": "Output all the prime numbers between 1 and 50.", "input": "", "output": "# Output all the prime numbers between 1 and 50\n\nfor num in range(1,51):\n   # prime numbers are greater than 1\n   if num > 1:\n       for i in range(2,num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)\n           \n# Output: 2,3,5,7,11,13,17,19,23,29,31,37,41,43,47", "category": "Python"}, {"instruction": "Find the most frequently occurring element in an array.", "input": "", "output": "def most_frequent_element(arr): \n    # Create a dictionary to store the frequency of each element\n    freq = {} \n    max_freq = 0\n    max_freq_elem = -1\n    \n    # Iterate through an array \n    for elem in arr: \n        if elem in freq.keys(): \n            freq[elem] += 1\n        else: \n            freq[elem] = 1\n  \n    # Find the most frequent element\n    for key,val in freq.items(): \n        # Update the maximum frequency and the corresponding element\n        if (max_freq < val): \n            max_freq_elem = key \n            max_freq = val \n    return max_freq_elem", "category": "Python"}, {"instruction": "Write a python code to multiply two given numbers.", "input": "x = 10\ny = 5", "output": "# Multiply two given numbers\nx = 10\ny = 5\n\n# Calculate the multiplication\nresult = x * y\nprint(result) # Output: 50", "category": "Python"}, {"instruction": "How can we evaluate a given Python expression dynamically?", "input": "", "output": "We can use the eval() function to evaluate a Python expression dynamically. \n\nExample:\n\nexpr = '2 + 3'\nresult = eval(expr) # result will be 5", "category": "Python"}, {"instruction": "Create a loop that prints the values from a and b in the ascending order.", "input": "a = 5\nb = 10", "output": "# Initialize variable\na = 5\nb = 10\n\n# Loop for print in ascending order\nfor i in range(a,b+1):\n    print(i)", "category": "Python"}, {"instruction": "How can we join two lists in Python?", "input": "", "output": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n# Join two lists\nlist3 = list1 + list2", "category": "Python"}, {"instruction": "Write a function in Python to print out the sum of the squares of its input.", "input": "", "output": "def sum_of_squares(nums):\n    \"\"\"This function calculates the sum of the squares of a given list of numbers\"\"\"\n    return sum(x**2 for x in nums)", "category": "Python"}, {"instruction": "Write a Python script to print out the max and min values from the given list.", "input": "[2,10,18,24,36,95]", "output": "list = [2,10,18,24,36,95]\nmax_value = max(list)\nmin_value = min(list)\nprint(\"Max value: \", max_value)\nprint(\"Min value: \", min_value)", "category": "Python"}, {"instruction": "Write a function to shift the elements of a list by one position to the left.", "input": "[2, 4, 6, 8]", "output": "def shift_left(arr): \n    # Shifting the array elements from position 1 to n-1 \n    for i in range(1, len(arr)): \n        arr[i - 1] = arr[i] \n  \n    # Replacing the last element with 0 \n    arr[len(arr) - 1] = 0\n    return arr", "category": "Python"}, {"instruction": "Take input of a Python list and return its reversed version", "input": "list_in = [3,5,7,9]", "output": "list_in.reverse() \nlist_out = list_in \nprint(list_out) \n\n# Output \n# [9,7,5,3]", "category": "Python"}, {"instruction": "Write a Python script to generate Fibonacci sequence upto n", "input": "", "output": "def generate_fibonacci(n): \n    FibArray = [0, 1] \n    while len(FibArray) < n: \n        FibArray.append(FibArray[-1]+FibArray[-2]) \n  \n    return FibArray", "category": "Python"}, {"instruction": "Write a code that will produce a list containing the first and last element of each inner list inside a list of lists.", "input": "my_list = [[1,2,3], [4,5,6], [7,8,9]]", "output": "def get_first_and_last(my_list):\n    result = [] \n    for lst in my_list:\n        result.append([lst[0], lst[-1]]) \n    return result\n\nif __name__ == '__main__':\n    my_list = [[1,2,3], [4,5,6], [7,8,9]]\n    print(get_first_and_last(my_list)) # Output: [[1, 3], [4, 6], [7, 9]]", "category": "Python"}, {"instruction": "Implement a code that will group a series of numbers into groups of three.", "input": "nums = [1, 2, 3, 4, 5, 6]", "output": "def group_three(nums): \n    result = []\n    nums_length = len(nums)\n\n    for index in range(0, nums_length, 3):\n        result.append(nums[index:index + 3])\n\n    return result\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6]\n    print(group_three(nums)) # Output: [[1, 2, 3], [4, 5, 6]]", "category": "Python"}, {"instruction": "Write a code that performs binary search on a given list.", "input": "my_array = [1,3,5,7,9]", "output": "def binary_search(my_array, x): \n    start = 0\n    end = len(my_array) - 1\n  \n    while start <= end: \n  \n        mid = (start + end) // 2 # calculate mid\n  \n        # Check if x is present at mid \n        if my_array[mid] < x: \n            start = mid + 1\n  \n        # If x is greater, ignore left half \n        elif my_array[mid] > x: \n            end = mid - 1\n  \n        # If x is smaller, ignore right half \n        else: \n            return mid \n    # If we reach here, then the element \n    # was not present \n    return -1", "category": "Python"}, {"instruction": "Implement a function that will return the intersection of two given arrays.", "input": "arr_1 = [2,3,4,7]\narr_2 = [1,3, 5, 6, 7]", "output": "def intersection(arr_1, arr_2):\n    intersect = []\n\n    for i in arr_1:\n        if i in arr_2:\n            intersect.append(i)\n\n    return intersect\n\nif __name__ == '__main__':\n    arr_1 = [2,3,4,7]\n    arr_2 = [1,3, 5, 6, 7]\n    print(intersection(arr_1, arr_2)) # Output: [3, 7]", "category": "Python"}, {"instruction": "Create a function that takes two strings as arguments and checks if the two strings are anagrams (same letters arranged differently).", "input": "str_1 = \"rat\"\nstr_2 = \"tar\"", "output": "def is_anagram(str_1, str_2):\n    str_1 = sorted(str_1)\n    str_2 = sorted(str_2)\n\n    if str_1 == str_2:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    str_1 = \"rat\"\n    str_2 = \"tar\"\n    print(is_anagram(str_1, str_2)) # Output: True", "category": "Python"}, {"instruction": "Create a function that takes two strings as arguments, and decides if either of them is a palindrome.", "input": "str_1 = \"racecar\"\nstr_2 = \"noon\"", "output": "def is_palindrome(str_1, str_2):\n    str_1_reverse = str_1 [::-1]\n    if str_1 == str_1_reverse or str_2 == str_2[::-1]:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    str_1 = \"racecar\"\n    str_2 = \"noon\"\n    print(is_palindrome(str_1, str_2)) # Output: True", "category": "Python"}, {"instruction": "Implement a function that will sort the array using insertion sort.", "input": "nums=[5,2,4,6,1,3]", "output": "def insertion_sort(nums):\n    for i in range(1,len(nums)):\n        item_to_insert = nums[i]\n        j = i - 1\n        while j >= 0 and nums[j] > item_to_insert:\n            nums[j+1] = nums[j]\n            j -= 1\n        nums[j+1] = item_to_insert\n\n    return nums\n\n\nif __name__ == '__main__':\n    nums = [5,2,4,6,1,3]\n    print(insertion_sort(nums)) # Output: [1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Suggest a solution to the following problem: given an array of numbers, find all pairs of numbers whose product is equal to the given target number.", "input": "arr = [1,5,3,2], target = 10", "output": "def find_pairs(arr, target):\n\tpairs = []\n\tfor i in range(len(arr)):\n\t\tfor j in range(i+1, len(arr)):\n\t\t\tif arr[i]*arr[j] == target:\n\t\t\t\tpairs.append((arr[i], arr[j]))\n\treturn pairs", "category": "Python"}, {"instruction": "Convert a given string to camel case.", "input": "", "output": "def to_camel_case(string):\n    result = \"\" \n    for word in string.split(' '): \n        result += word.title() \n    return result", "category": "Python"}, {"instruction": "Parse a given json string and retrieve a dictionary object.", "input": "json_string = '{\"name\": \"John Smith\", \"age\": 31}'", "output": "import json\n\ndef parse(json_string):\n    return json.loads(json_string)", "category": "Python"}, {"instruction": "How can we check whether a given number is prime or not using a loop?", "input": "num = 17", "output": "def is_prime(num):\n    if num < 2: \n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    num = 17\n    print(is_prime(num)) # Output: True", "category": "Python"}, {"instruction": "Create a Python program to convert a given number of inches to centimeters", "input": "inches = 5", "output": "def convert(inches): \n    cm = inches * 2.54\n    return cm \n  \n# Convert inches to cm \nresult = convert(5) \n  \n# Output \nprint(\"5 inches =\",result,\"cm\") \n\n# Output\n# 5 inches = 12.7 cm", "category": "Python"}, {"instruction": "Convert the following Python dictionary to a JSON String", "input": "data = {\"name\": \"John Doe\", \"age\": 37, \"hobby\": \"reading\"}", "output": "import json\n\ndata_json_string = json.dumps(data)", "category": "Python"}, {"instruction": "Write a Python program to sort the list of dictionaries by values in ascending order.", "input": "data = [{'name': 'John', 'age': 23}, \n        {'name': 'Joe', 'age': 28}, \n        {'name': 'Jack', 'age': 25}]", "output": "def sort_by_age(data):\n  return sorted(data, key=lambda k: k['age'], reverse=False)\n\nsorted_list = sort_by_age(data)\nprint(sorted_list)", "category": "Python"}, {"instruction": "Write a Python script to fetch the top 10 latest YouTube videos.", "input": "", "output": "import requests\nimport json\n\n#Generating Youtube API URL\nurl = 'https://www.googleapis.com/youtube/v3/videos?part=snippet&chart=mostPopular&maxResults=10&regionCode=US&key={YOUR_API_KEY}'\n\n#Sending a GET request to API for obtaining data\nresponse = requests.get(url)\n\n#Data parsing and extracting top 10 latest YouTube Videos\ndata = json.loads(response.text)\nlatest_videos = []\nfor items in data['items']:\n    latest_videos.append(items['snippet']['title'])\n\nprint(\"Top 10 latest videos : \")\nfor item in latest_videos:\n    print(item)", "category": "Python"}, {"instruction": "Rewrite the following code so that it is more efficient.", "input": "odds = []\nfor num in range(10):\n if num % 2 != 0:\n odds.append(num)", "output": "odds = [num for num in range(10) if num % 2 != 0]", "category": "Python"}, {"instruction": "Write a Python loop to find the number of elements in a given list that are between 0 and 10 (inclusive).", "input": "array = [3, 7, 11, 15]", "output": "def count_elements(array):\n count = 0 \n for item in array:\n if 0 <= item <= 10:\n count += 1\n return count", "category": "Python"}, {"instruction": "Change the given Python code to an equivalent expression using list comprehension.", "input": "mylist = []\nfor x in range(1, 10):\n    mylist.append(x*x)", "output": "mylist = [x*x for x in range(1, 10)]", "category": "Python"}, {"instruction": "Perform string manipulation to generate the word 'happy' by starting with the word 'sad'", "input": "", "output": "word = 'sad'\nword = word[0] + word[2:] + 'py'", "category": "Python"}, {"instruction": "Create a guide to explain the usage of the built-in Python sort() function.", "input": "", "output": "The Python sort() function is used to sort a list of elements. It takes two parameters: the list to be sorted and a function (optional) that defines the sorting criteria. The sorted list is returned in ascending order by default. The sort() function is stable, meaning that the original positions of equal elements will be preserved.", "category": "Python"}, {"instruction": "Rewrite the given python program to generate the same output but using a while loop instead of a for loop.", "input": "mylist = [1, 2, 3, 4, 5]\nfor i in mylist:\n    print(i)", "output": "i = 0\nmylist = [1, 2, 3, 4, 5]\nwhile i < len(mylist):\n    print(mylist[i])\n    i += 1", "category": "Python"}, {"instruction": "Suggest a way to explore a large dataset efficiently in Python.", "input": "", "output": "We can explore a large dataset efficiently in Python by using the built-in Pandas library. The features of the Pandas library, such as its ability to read CSV files, make it a great tool for exploring large datasets. Additionally, Pandas provides convenient methods such as head() and tail() to quickly explore the first and last elements of a dataset, as well as info() and describe() methods to provide a better understanding of the entire dataset.", "category": "Python"}, {"instruction": "How would you remove all punctuation marks in a given string?", "input": "", "output": "We can remove all punctuation marks in a given string by using the regular expression library in Python. We can create a pattern and use the re.sub() function to replace a matched pattern and remove the punctuation marks from the given string. This can be done with the following code:\n\nimport re \n\nstring = \"This is a test string! With [special] ^characters.\"\n\nremove_punct = re.sub(r'[^\\w\\s]','',string) \n\nprint(remove_punct) # Output = This is a test string With special characters", "category": "Python"}, {"instruction": "Split a string by a number greater than the length of the string in Python.", "input": "string = \"Hello World\"", "output": "split_string = string[:11]\nprint(split_string) # Output = \"Hello World\"", "category": "Python"}, {"instruction": "What is the best data structure for searching a value in a large set of data?", "input": "", "output": "The best data structure for searching a value in a large set of data is a data structure that supports fast search and retrieval of data such as a hash table or a binary search tree. Hash tables are particularly efficient because they allow for constant time search and retrieval, while binary search trees have a time complexity of O(log n). Additionally, hash tables are typically more space efficient than binary search trees. However, binary search trees also have their uses, as they allow for data to be sorted and can easily handle dynamic changes in the size of the data set.", "category": "Python"}, {"instruction": "Write a code snippet in Python for converting Unix timestamp to date and time.", "input": "1594102055", "output": "import datetime\n \n# Unix timestamp\nunix = 1594102055\n \n# Convert Unix timestamp to Date\ndate_time = datetime.datetime.fromtimestamp(unix).strftime('%Y-%m-%d %H:%M:%S')\n \nprint(\"Date & Time (UTC):\", date_time)", "category": "Python"}, {"instruction": "Create an algorithm to calculate the Fibonacci series up to n numbers where n is a given number.", "input": "", "output": "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Create a program to accept two strings and find if one string is a substring of the other or not.", "input": "'abc', 'ccc'", "output": "def is_substring(s1, s2):\n  return s1 in s2", "category": "Python"}, {"instruction": "Train a machine learning model for text categorization with an input text and labels.", "input": "Text = \"This is an example of text\"\nLabels = [\"example\", \"text\"]", "output": "from sklearn.svm import SVC\n\n# Create a support vector machine for text categorization\nclf = SVC()\n\n# Train the model\nclf.fit(Text, Labels)", "category": "Python"}, {"instruction": "Create a scatterplot of some toy dataset using a python library.", "input": "import numpy as np\nX_train = np.array([[1,2], [3,4], [5,6]])\nY_train = np.array([1,2,3])", "output": "import matplotlib.pyplot as plt\nplt.scatter(X_train[:, 0], X_train[:, 1], c=Y_train)", "category": "Python"}, {"instruction": "Create a function in Python to generate a Fibonacci sequence.", "input": "", "output": "def fibonacci_sequence(n):  \n    a = 0 \n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else:  \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Given a string and an integer, write a code to find the index of first occurrence of the integer in the string.", "input": "my_string = \"abcdef\"\nmy_int = 2", "output": "def find_index(str, num):\n    for i in range(len(str)):\n        if str[i] == num:\n            return i\n    return -1\n \nmy_string = \"abcdef\"\nmy_int = 2\nprint(find_index(my_string,my_int))", "category": "Python"}, {"instruction": "Using the list as an example, remove all elements from the list that have a value of 0.", "input": "my_list = [0, 5, 7, 0, 9]", "output": "my_list = [5, 7, 9]\n \nmy_list = [0, 5, 7, 0, 9]\nmy_list = [x for x in my_list if x != 0]\nprint(my_list)", "category": "Python"}, {"instruction": "Given a string and an integer, write a program to compare the string with the integer and return the longer string.", "input": "my_string = \"Hello\"\nmy_int = 1", "output": "def compare_str_int(str, num):\n    if len(str) > num:\n        return str\n    else:\n        return \"{i} is greater than {s}\".format(i=num, s=str)\n\nmy_string = \"Hello\"\nmy_int = 1\nprint(compare_str_int(my_string, my_int))", "category": "Python"}, {"instruction": "What is the difference between preemptive multitasking and non-preemptive multitasking?", "input": "", "output": "Preemptive multitasking is a form of multitasking in which the operating system slices the CPU time and dedicates a slot to each of the programs. The operating system may terminate the process at any given point of time and switch to another process. It depends on the priority of the process. \n\nNon-preemptive multitasking is a form of multitasking in which the operating system does not slice the CPU time in between processes and processes are given CPU time to complete their execution. It does not depend on the priority of the process.", "category": "Python"}, {"instruction": "Write a Python method to determine if a string contains all unique characters.", "input": "string variable: str =\u201cIm so excited to learn GPT\u201d", "output": "def isUnique(str): \n\tstr_set = set() \n\tfor ch in str: \n\t\tif ch in str_set: \n\t\t\treturn False\n\t\telse:\n\t\t\tstr_set.add(ch)\n\t\t\t\n\treturn True", "category": "Python"}, {"instruction": "Print out all the numbers between 1 and 100 that are divisible by 3.", "input": "", "output": "for i in range (1, 101):\n  if i % 3 == 0:\n    print(i)", "category": "Python"}, {"instruction": "Describe how to use a while loop in python.", "input": "", "output": "A while loop in Python is a loop that runs until a certain condition is met. The syntax is similar to an if statement, but the condition is evaluated after each iteration of the loop. The code within the loop is executed until the condition evaluates to False.\n\nExample:\n\ni = 0\nwhile i < 10:\n    print(i)\n    i += 1\n\nThis will print out the numbers from 0 to 9 as the condition is evaluated after each iteration.", "category": "Python"}, {"instruction": "Add two numbers using Python.", "input": "Numbers: 5, 7", "output": "def add_two_numbers(x, y):\n    return x + y\n\nif __name__ == '__main__':\n    print(add_two_numbers(5, 7))", "category": "Python"}, {"instruction": "What is a ternary operator?", "input": "", "output": "A ternary operator is a conditional expression operator that can be used to return one of two values based on the evaluation of a boolean expression. In Python, the ternary operator is written as a ? expression. For example, a ? b : c is a shorthand for \"if a then b else c\", where a is a boolean expression.", "category": "Python"}, {"instruction": "Write an if..elif..else statement to check if a number is positive, negative or zero.", "input": "", "output": "if num > 0:\n    print(\"The number is positive\")\nelif num < 0:\n    print(\"The number is negative\")\nelse:\n    print(\"The number is zero\")", "category": "Python"}, {"instruction": "Given an array of integers find the index of the element that appears an odd number of times.", "input": "[2, 3, 2, 4, 5, 3]", "output": "def find_odd_element(arr):\n    elements = set()\n    for x in arr:\n        if x in elements:\n            elements.remove(x)\n        else:\n            elements.add(x)\n    return arr.index(list(elements)[0])", "category": "Python"}, {"instruction": "Find the indices of the all occurrence of a specified element in an array.", "input": "Array: [2, 3, 2, 4, 5]\nElement: 2", "output": "def find_element(arr, element):\n    result = []\n    for i in range(len(arr)):\n        if arr[i] == element:\n            result.append(i)\n    return result", "category": "Python"}, {"instruction": "Implement the Quick Sort algorithm with a list of numbers.", "input": "[2, 5, 4, 1, 6, 2, 9, 3]", "output": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr)//2]\n    left, right, equal = [], [], []\n    for x in arr:\n        if x < pivot:\n            left.append(x)\n        elif x > pivot:\n            right.append(x)\n        else:\n            equal.append(x)\n    return quicksort(left) + equal + quicksort(right)", "category": "Python"}, {"instruction": "Given an array of integers, write a function to sum all the integers in the array.", "input": "", "output": "def sum_array(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total", "category": "Python"}, {"instruction": "What is the purpose of neural networks?", "input": "", "output": "The purpose of neural networks is to recognize patterns in data and make predictions or decisions based on those patterns. Neural networks are an approach to artificial intelligence, modeled after the neural networks in the human brain. They allow computers to learn by processing large amounts of data and identifying patterns and trends in it.", "category": "Python"}, {"instruction": "Explain what is Closure in Python Programming?", "input": "", "output": "In Python, a closure is a higher order function (a function that takes one or more functions as arguments or returns a function) that allows a function to remember or access the variables or arguments of the enclosing scope\u2014even after the execution of the outer function has finished. A closure is created when a nested function is defined, and an inner function remembers the variables of its enclosing scope even after the execution of the outer function has finished.", "category": "Python"}, {"instruction": "Given two sets, setA and setB, write a function to find the intersection of both sets.", "input": "setA = {1, 2, 3, 4, 5}\nsetB = {4, 5, 6, 7, 8}", "output": "def intersection(setA, setB):\n    return [x for x in setA if x in setB] # output: {4, 5}", "category": "Python"}, {"instruction": "Write a function to find all the prime numbers from 2 to n (where n is a given input).", "input": "", "output": "def find_primes(n):\n    primes=[]\n    for num in range(2, n+1):\n        for n in range(2, num):\n            if num%n==0:\n                break\n            \n        else:\n            primes.append(num)\n    return primes", "category": "Python"}, {"instruction": "Reverse the following string using a Python program", "input": "\"Hello World!\"", "output": "def reverse_string(str):\n  return str[::-1]\n\nreverse_string('Hello World!') # output: '!dlroW olleH'", "category": "Python"}, {"instruction": "Convert the following code to efficiently use list comprehensions.", "input": "# define a function to generate a list of cubed numbers\ndef generate_cubes(n):\n    result = []\n    for num in range(1, n+1):\n        result.append(num ** 3)\n    return result", "output": "# define a function to generate a list of cubed numbers\ndef generate_cubes(n):\n    return [num ** 3 for num in range(1, n+1)]", "category": "Python"}, {"instruction": "Using the input list, generate a random permutation of the given list.", "input": "[1, 2, 3, 4, 5]", "output": "import random\ndef get_random_permutation(list):\n    random.shuffle(list)\n    return list", "category": "Python"}, {"instruction": "Create a python class to manage a sports team.", "input": "", "output": "# define a class to manage a sports team\nclass SportsTeam:\n    def __init__(self, name):\n        # store the team name\n        self.name = name\n        # create an empty list for team members\n        self.team_members = []\n\n    # create a method to add a new player to the team\n    def add_player(self, player_name):\n        if player_name not in self.team_members:\n            self.team_members.append(player_name)\n    \n    # create a method to remove a player from the team\n    def remove_player(self, player_name):\n        if player_name in self.team_members:\n            self.team_members.remove(player_name)", "category": "Python"}, {"instruction": "Design a function that takes in a list of numbers and returns a dictionary with the frequency of each element.", "input": "", "output": "def element_frequency(arr):\n    # use a dictionary to store the frequency of each element\n    frequency = {}\n\n    # loop through the list and keep a count of each element\n    for elem in arr:\n        if elem in frequency:\n            frequency[elem] += 1\n        else:\n            frequency[elem] = 1\n\n    return frequency", "category": "Python"}, {"instruction": "Create a Python script to delete all the even numbers in the original list.", "input": "", "output": "# function to delete all the even numbers in the original list\ndef remove_even_elements(arr):\n    return [num for num in arr if num % 2 != 0]", "category": "Python"}, {"instruction": "From the input list, create a dictionary containing only key-value pairs for even integers.", "input": "[4, 7, 9, 10, 16, 18]", "output": "# function to create a dictionary containing only key-value pairs for even integers\ndef even_dict(arr):\n    return {i : i for i in arr if i % 2 == 0}", "category": "Python"}, {"instruction": "Create a Python function that takes in a list of integers and returns a list containing only the odd numbers from the original.", "input": "", "output": "def get_odd_elements(arr):\n    return [num for num in arr if num % 2 != 0]", "category": "Python"}, {"instruction": "Create a python function that takes in a list and returns a new list with all the even elements of the original list.", "input": "", "output": "def get_even_elements(arr):\n    return [num for num in arr if num % 2 == 0]", "category": "Python"}, {"instruction": "From the input text, create a dictionary that contains the count of the most frequent words.", "input": "The quick brown fox jumped over the lazy dog.", "output": "from collections import Counter\n\ndef most_frequent_words(text):\n    word_list = text.split()\n    word_counts = Counter(word_list)\n    return word_counts.most_common()", "category": "Python"}, {"instruction": "Design a Python class to represent a Triangle and its properties, such as area, perimeter, and angles.", "input": "", "output": "class Triangle:\n    def __init__(self, side_a, side_b, side_c):\n        self.side_a = side_a\n        self.side_b = side_b\n        self.side_c = side_c\n\n    def get_area(self):\n        s = (self.side_a+self.side_b+self.side_c)/2\n        return (s*(s-self.side_a)*(s-self.side_b)*(s-self.side_c)) ** 0.5\n\n    def get_perimeter(self):\n        return self.side_a + self.side_b + self.side_c\n\n    def get_angles(self):\n        a = (self.side_b**2 + self.side_c**2 - self.side_a**2)/(2*self.side_b*self.side_c)\n        b = (self.side_a**2 + self.side_c**2 - self.side_b**2)/(2*self.side_a*self.side_c)\n        c = (self.side_b**2 + self.side_a**2 - self.side_c**2)/(2*self.side_b*self.side_a)\n        return [a, b, c]", "category": "Python"}, {"instruction": "Design a Python class to represent a student and their GPA.", "input": "", "output": "class Student:\n\n    def __init__(self, name, gpa):\n        self.name = name\n        self.gpa = gpa\n\n    def get_name(self):\n        return self.name\n\n    def get_gpa(self):\n        return self.gpa", "category": "Python"}, {"instruction": "Write a function that takes a list of numbers and returns their sum.", "input": "", "output": "def sum_list(list_nums):\n  total = 0\n  for num in list_nums:\n    total += num\n  return total", "category": "Python"}, {"instruction": "Edit the following code to make it work in Python 3.", "input": "# Python 2\ndef greet(name):\n    print \"Hello,\", name\n\ngreet(\"John\")", "output": "# Python 3\ndef greet(name):\n    print(\"Hello,\", name)\n    \ngreet(\"John\")", "category": "Python"}, {"instruction": "Create a Python script to print the first N numbers of the Fibonacci sequence.", "input": "", "output": "def print_fibonacci(n):\n    # make a list of the first n numbers in the Fibonacci series\n    fibonacci = [0, 1]\n    while len(fibonacci) < n:\n        fibonacci.append(fibonacci[-1] + fibonacci[-2])\n    \n    # print out the list\n    for number in fibonacci:\n        print(number)", "category": "Python"}, {"instruction": "Write a function that converts a list of strings to a dictionary.", "input": "", "output": "def string_list_to_dictionary(string_list):\n    result = {}\n    for s in string_list:\n        result[s] = True\n    return result", "category": "Python"}, {"instruction": "Given a list of numbers and the length n, write a Python program to add the elements of all even indexed values to the corresponding odd indexed values.", "input": "my_list = [5, 10, 15, 20, 25]\nn = 5", "output": "def add_corresponding_elements(lst, n):\n    result = 0\n\n    for i in range(0, n, 2): \n        result += lst[i] + lst[i + 1] \n\n    return result\n\nmy_list = [5, 10, 15, 20, 25]\nn = 5\n\nresult = add_corresponding_elements(my_list, n)\nprint(result)  # Output: 35", "category": "Python"}, {"instruction": "Convert the following Python code from functions to lambda expressions.", "input": "def cube(x):\n    return x ** 3\n\ndef add_cube(x, y):\n    return cube(x) + cube(y)", "output": "cube = lambda x: x ** 3\nadd_cube = lambda x, y: cube(x) + cube(y)", "category": "Python"}, {"instruction": "Write a Python function to split a string into a list of strings, separated by a given delimiter.", "input": "", "output": "def split_string(string, delimiter):\n    \"\"\"Split a string into a list of strings, separated by a given delimiter.\"\"\"\n    return string.split(delimiter)", "category": "Python"}, {"instruction": "Modify the following code to include a try/except statement.", "input": "def read_file(filename):\n    with open(filename) as f:\n        return f.read()", "output": "def read_file(filename):\n    try:\n        with open(filename) as f:\n            return f.read()\n    except FileNotFoundError:\n        print(f\"File {filename} was not found.\")", "category": "Python"}, {"instruction": "Generate a Python function that takes 'string' as an argument and return a new string with the last two characters of 'string' repeated.", "input": "", "output": "def repeat_last_two_char(string):\n    \"\"\"Takes a string as an argument and returns a new string with the last two characters repeated.\"\"\"\n    if len(string) < 2:\n        return \"\"\n    return string[:-2] + string[-2:] * 2", "category": "Python"}, {"instruction": "Write an algorithm in Python to determine if an array has duplicate elements or not.", "input": "", "output": "def containsDuplicate(arr):\n    seen = set()\n    for element in arr:\n        if element in seen:\n            return True\n        seen.add(element)\n    return False", "category": "Python"}, {"instruction": "Implement a function in Python to determine if a string is a palindrome.", "input": "", "output": "def is_palindrome(str): \n    rev = ''.join(reversed(str)) \n\n    if (str == rev): \n        return True\n    return False", "category": "Python"}, {"instruction": "Create a function that takes an array of strings and returns an array of their lengths.", "input": "[\u2018Hello\u2019, \u2018World\u2019]", "output": "def array_length(arr):\n    return [len(s) for s in arr]\n\nif __name__ == '__main__':\n    arr = ['Hello', 'World']\n    print(array_length(arr))", "category": "Python"}, {"instruction": "Create an algorithm to convert a temperature from Celsius to Fahrenheit.", "input": "0", "output": "def ctoF(temperature):\n    return (temperature * 1.8) + 32\n\nif __name__ == '__main__':\n    print(ctoF(0))", "category": "Python"}, {"instruction": "Create a function that returns the nth Fibonacci number.", "input": "", "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)", "category": "Python"}, {"instruction": "Generate a hash for a given dictionary.", "input": "my_dict = {'name': 'John', 'age': 27, 'profession': 'programmer'}", "output": "import hashlib\n\ndef generate_hash(my_dict):\n    my_string = str(my_dict)\n    res = hashlib.md5(my_string.encode()).hexdigest() \n    \n    return res\n\nprint(generate_hash(my_dict))", "category": "Python"}, {"instruction": "Write a function to classify the input based on the following criteria: \nIf the input is positive, output \"positive\"; if the input is zero, output \"zero\"; if the input is negative, output \"negative\".", "input": "", "output": "def classify(x):\n    if x > 0:\n        return \"positive\"\n    elif x == 0:\n        return \"zero\"\n    else:\n        return \"negative\"", "category": "Python"}, {"instruction": "Write a function that takes in a 2D matrix and outputs the transpose of the matrix.", "input": "", "output": "def transpose_matrix(matrix):\n    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]", "category": "Python"}, {"instruction": "Perform PCA on a dataset.", "input": "", "output": "from sklearn.decomposition import PCA\n\ndef perform_pca(X):\n    pca = PCA(n_components=2)\n    pca.fit(X)\n    X_pca = pca.transform(X)\n\n    return X_pca", "category": "Python"}, {"instruction": "Write code to print out all the even numbers from a given list of numbers.", "input": "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "for number in my_list:\n    if (number % 2 == 0):\n        print(number)", "category": "Python"}, {"instruction": "Write a function that takes in a list and a target value, and returns a new list with the target value removed.", "input": "my_list = [1,2,3,4,5,6]\ntarget = 3", "output": "def remove_target(my_list, target):\n    return [x for x in my_list if x != target]\n\nmy_list = remove_target(my_list, target)\nprint(my_list)", "category": "Python"}, {"instruction": "Create a data frame from a dictionary.", "input": "my_dict = {'state': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada'], \n        'year': [2000, 2001, 2002, 2001, 2002],\n        'pop': [1.5, 1.7, 3.6, 2.4, 2.9]}", "output": "import pandas as pd\n\nmy_df = pd.DataFrame(my_dict)\nprint(my_df)", "category": "Python"}, {"instruction": "How can you create a copy of a list?", "input": "", "output": "You can create a copy of a list by using the \"list\" method. For example, to create a copy of a list called \"my_list\", you can simply write \"my_list_copy = list(my_list)\".", "category": "Python"}, {"instruction": "Implement a sequence to sequence model for translation.", "input": "", "output": "from tensorflow.keras.layers import Input, LSTM, Dense\n\ndef seq2seq_model(src_length, trg_length, embedding_dim, num_enc_tokens, num_dec_tokens):\n    # Define an input layer.\n    encoder_inputs = Input(shape=(None, num_enc_tokens))\n    # Add an LSTM layer with `src_length` number of units\n    encoder_lstm = LSTM(src_length, return_state=True)\n    # Define the encoder output, state and the encoder states\n    encoder_outputs, state_h, state_c = encoder_lstm(encoder_inputs)\n    # Discard `encoder_outputs` and only keep the states.\n    encoder_states = [state_h, state_c]\n\n    # Set up the decoder, using `encoder_states` as initial state.\n    decoder_inputs = Input(shape=(None, num_dec_tokens))\n    # Add an LSTM layer with `src_length` number of units\n    decoder_lstm = LSTM(src_length, return_state=True, return_sequences=True)\n    decoder_outputs, _, _ = decoder_lstm(decoder_inputs, initial_state=encoder_states)\n    # Add a fully connected layer\n    decoder_dense = Dense(trg_length, activation='softmax')\n    # Define the output of the decoder\n    decoder_outputs = decoder_dense(decoder_outputs)\n\n    # Create a model\n    model = Model([encoder_inputs, decoder_inputs], decoder_outputs)\n    # Compile the model\n    model.compile(optimizer='adam', loss='categorical_crossentropy')\n    return model", "category": "Python"}, {"instruction": "Write a Python program to find the equilibrium index of an array. An index of an array is called equilibrium index if the sum of elements at lower indexes is equal to the sum of elements at higher indexes.", "input": "arr = [-7, 1, 9, -4, 3, 2]", "output": "def find_equilibrium_index(arr):\n    total_sum = sum(arr)\n\n    left_sum = 0\n    \n    for index, num in enumerate(arr):\n        total_sum -= num\n        if left_sum == total_sum:\n            return index \n        left_sum += num\n    return -1\n\narr = [-7, 1, 9, -4, 3, 2]\nprint(find_equilibrium_index(arr)) # Output: 2", "category": "Python"}, {"instruction": "Given a two dimensional array, write a Python program to print the second diagonal of the array.", "input": "my_array = [[1, 2, 3],\n             [4, 5, 6],\n             [7, 8, 9]]", "output": "my_array = [[1, 2, 3],\n             [4, 5, 6],\n             [7, 8, 9]]\n\n# A function to print second diagonal of \n# given array\ndef print_second_diagonal(arr): \n    # Find length of given array \n    n = len(arr)  \n      \n    # Traverse second diagonal \n    for i in range(0, n): \n        print(arr[i][n-1-i], end = \" \") \n          \n# Driver code \nprint_second_diagonal(my_array)\n# Output: 3 6 9", "category": "Python"}, {"instruction": "Write a Python function to return the most frequent character in the given string.", "input": "my_string = \"hello world\"", "output": "def most_frequent(s):\n    char_freq = {}\n    max_freq = 0\n    most_frequent_char = \"\"\n\n    for c in s:\n        if c in char_freq:\n            char_freq[c] += 1\n        else:\n            char_freq[c] = 1\n\n        if char_freq[c] > max_freq:\n            max_freq = char_freq[c]\n            most_frequent_char = c\n\n    return most_frequent_char\n\nmy_string = \"hello world\"\nprint(most_frequent(my_string)) # Output: 'l'", "category": "Python"}, {"instruction": "Write a Python program to compare two strings and return True if both the strings are equal, otherwise False.", "input": "s1 = \"Hello\"\ns2 = \"Hello\"", "output": "s1 = \"Hello\"\ns2 = \"Hello\"\n\nprint(s1 == s2) # Output: True", "category": "Python"}, {"instruction": "Write a Python program to divide two numbers and return the quotient and remainder of the division.", "input": "x = 10\ny = 3", "output": "x = 10\ny = 3\n\nquotient = int(x / y)\nremainder = x % y\n\nprint(\"Quotient:\", quotient)\nprint(\"Remainder:\", remainder)\n# Output: Quotient: 3, Remainder: 1", "category": "Python"}, {"instruction": "Write a Python program to iterate the given list and print the square or each element.", "input": "my_list = [1, 2, 3, 4]", "output": "my_list = [1, 2, 3, 4]\n\nfor i in my_list:\n    print(i**2)\n\n# Output: 1, 4, 9, 16", "category": "Python"}, {"instruction": "Suggest a way to combine two lists of dictionaries into one list of dictionaries in Python.", "input": "list1 = [{'name': 'John', 'age': 23}, {'name': 'Mary', 'age': 20}]\nlist2 = [{'name': 'Steve', 'age': 25}, {'name': 'Jake', 'age': 18}]", "output": "combinedList = list1 + list2", "category": "Python"}, {"instruction": "Formulate a regex expression in Python to check if a given string is an email address.", "input": "", "output": "import re \n\ndef is_email(string): \n   regex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w+$'\n   if(re.search(regex,string)): \n      print(\"Valid Email\")  \n   else: \n      print(\"Invalid Email\")", "category": "Python"}, {"instruction": "Develop a python code snippet to create a list, with the name \"fruits\" containing strings of the names of 5 fruits.", "input": "", "output": "fruits = [\"apple\", \"banana\", \"mango\", \"strawberry\", \"kiwi\"]", "category": "Python"}, {"instruction": "Create a class in Python which has a method to sort an array of numbers in increasing order.", "input": "nums = [4, 3, 1, 6]", "output": "class ArraySort:\n    def __init__(self, nums):\n        self.nums = nums\n    \n    def sort(self):\n        for i in range(len(self.nums)):\n            for j in range(i+1, len(self.nums)):\n                if self.nums[i] > self.nums[j]:\n                    temp = self.nums[i]\n                    self.nums[i] = self.nums[j]\n                    self.nums[j] = temp\n        return self.nums", "category": "Python"}, {"instruction": "Output the contents of a list in a comma-separated string.", "input": "myList = [14, 19, 22, 27, 30]", "output": "def list_to_string(myList): \n    # initialize an empty string \n    string = \"\" \n  \n    # traverse in the string  \n    for ele in myList:\n        string += str(ele) +\",\"\n  \n    # return result string  \n    return string\n  \n# Driver code \nmyList = [14, 19, 22, 27, 30]\nprint(list_to_string(myList))", "category": "Python"}, {"instruction": "Create a Python code that takes two strings and combine them into a single string.", "input": "str1 = \"Hello\"\nstr2 = \"World\"", "output": "combinedString = str1 + ' ' + str2\nprint(combinedString) # Hello World", "category": "Python"}, {"instruction": "Generate a program that identifies the type of triangle formed by the three given sides.", "input": "side1 = 4\nside2 = 4\nside3 = 5", "output": "if side1 == side2 and side2 == side3:\n    print(\"Equilateral Triangle\")\nelif side1 == side2 or side2 == side3 or side1 == side3:\n    print(\"Isosceles Triangle\")\nelif side1 != side2 and side2 != side3 and side1 != side3:\n    print(\"Scalene Triangle\")", "category": "Python"}, {"instruction": "Implement an algorithm to remove duplicates from a linked list.", "input": "", "output": "Algorithm to remove duplicate elements from a linked list:\n\n1. Initialize a hash set to store the unique elements of the linked list.\n2. Iterate through the linked list, if the element is not present in the hash set, add it to the set.\n3. Else, remove the element from the linked list.\n4. Return the modified list once all the elements have been iterated through.", "category": "Python"}, {"instruction": "Suggest a modification to the following python code to make it efficient.", "input": "def median(my_list):\n\thalf = len(my_list)//2\n\tmedian_index = len(my_list) - half\n\treturn my_list[median_index]", "output": "def median(my_list):\n\thalf = len(my_list)//2\n\tmy_list.sort()\n\tmedian_index = len(my_list) - half\n\treturn my_list[median_index]\n\nThe suggested modification is to add a sorting step to the code before finding the median index. This will ensure the list is always in order and the median index can be found in an efficient manner.", "category": "Python"}, {"instruction": "Sort an array A of integers in ascending order without using any pre-defined sorting functions.", "input": "[23, 1, 32, 15, 40]", "output": "Algorithm to sort an array A of integers in ascending order without using any pre-defined sorting functions:\n\n1. Initialize a variable swapped to false.\n2. Iterate through the array A, compare each pair of adjacent elements and swap them if they are not in ascending order.\n3. After each iteration, if a swap has occurred, set swapped to true, otherwise set it to false.\n4. Repeat step 2 and 3 until swapped is false.", "category": "Python"}, {"instruction": "Create an algorithm to detect if an array A contains duplicates.", "input": "", "output": "Algorithm to detect duplicate elements in an array A:\n\n1. Initialize a hash set set to store the elements of array A.\n2. Iterate through the array A, if the element is already present in the set, return True. Otherwise add the element to the set.\n3. Return False once all the elements have been iterated through.", "category": "Python"}, {"instruction": "How would you create a new array with only the positive numbers from the following array in Python?", "input": "[-2, -5, 3, 6, 0, -3]", "output": "arr = [-2,-5,3,6,0,-3]\n\npos_arr = [num for num in arr if num >= 0]", "category": "Python"}, {"instruction": "Create a class in Python named ``Rectangle`` with two attributes length and width.", "input": "", "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width", "category": "Python"}, {"instruction": "Create a cryptography program that computes the factorial of a given number.", "input": "num = 5", "output": "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n\nif __name__ == '__main__':\n    num = 5\n    result = factorial(num)\n    print(result)", "category": "Python"}, {"instruction": "Given a linked list, remove all elements from it which have greater value than a given number X.", "input": "head = [7, 14, 28, 21, 32]\nvalue = 21", "output": "class node:\n    def __init__(self, data):\n        self. data = data\n        self. next = None\n\ndef removeGreater(head, value):\n    while head and head.data > value:\n        head = head.next\n    p = head\n    while p and p.next:\n        if p.next.data > value:\n            p.next = p.next.next\n        else:\n            p = p.next\n    return head\n\nif __name__ == '__main__':\n    head = node(7)\n    head.next = node(14)\n    head.next.next = node(28)\n    head.next.next.next = node(21)\n    head.next.next.next.next = node(32)\n\n    result = removeGreater(head, 21)\n    while result:\n        print(result.data, end=\" \")\n        result= result.next", "category": "Python"}, {"instruction": "Find a way to generate all the unique permutations for a given string.", "input": "s = 'ABC'", "output": "def permutation(str): \n    if len(str) == 0: \n        return [] \n    if len(str) == 1: \n        return [str]  \n    l = []  \n    for i in range(len(str)): \n       m = str[i]  \n       remLst = str[:i] + str[i+1:]  \n       for p in permutation(remLst): \n           l.append([m] + p) \n    return l \n\nif __name__== \"__main__\":\n    s = 'ABC'\n    perms = permutation(s)\n    for p in perms:\n        print(''.join(p))", "category": "Python"}, {"instruction": "Write a function to check if a number is a power of 2.", "input": "num = 8", "output": "def isPowerOfTwo(num): \n    if (num == 0): \n        return False\n  \n    while (num != 1): \n        if (num % 2 != 0): \n            return False\n        num = num // 2\n              \n    return True\n  \n# Driver code \nif __name__=='__main__':\n    num = 8\n    if(isPowerOfTwo(num)): \n        print('Yes') \n    else: \n        print('No')", "category": "Python"}, {"instruction": "Given an array of integers and an integer, return true if any two integers in the array add up to the given integer.", "input": "arr = [1, 2, 3, 4]\nsum = 7", "output": "def test_sum(arr, sum): \n    for i in range(len(arr)-1): \n        for j in range(i+1, len(arr)): \n            if arr[i] + arr[j] == sum: \n                return True \n    return False\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4] \n    sum = 7\n    result = test_sum(arr, sum) \n    if result: \n        print(\"Array has two elements with the given sum\") \n    else: \n        print(\"Array doesn't have two elements with the given sum\")", "category": "Python"}, {"instruction": "Create a python program to count how many times a word appears in a given string.", "input": "The quick brown fox jumps over the lazy dog", "output": "def count_word(word, input):\n    count = 0\n    for w in input.split():\n        if w == word:\n           count += 1\n    return count\n\nif __name__ == '__main__':\n    word = 'fox'\n    input = 'The quick brown fox jumps over the lazy dog'\n    result = count_word(word, input)\n    print(f' \"{word}\" occurs {result} times in the given string.')", "category": "Python"}, {"instruction": "Explain what a try-except statement is and how it should be used.", "input": "", "output": "A try-except statement is a mechanism for handling errors that may occur in a program in a controlled manner. It is used to catch errors in the program, process them gracefully and prevent the program from crashing. The syntax of try-except is try: followed by the code to be executed and except clause to handle the error. This code block can also be augmented with a finally clause to execute the code at the end of the execution of the try-except block.", "category": "Python"}, {"instruction": "Execute the following code in a Python Shell and explain the output.", "input": "a = 5\nb = 6\n\nprint(a,b)", "output": "The code will print 5 and 6 on separate lines. This is because we have not specified a separator, thus the default separator (whitespace) will be used.\n\nOutput:\n5\n6", "category": "Python"}, {"instruction": "Sort the following list of numbers using Merge Sort", "input": "List = [5,7,3,9,2]", "output": "def mergesort(nums): \n    if len(nums) == 1: \n        return nums \n  \n    mid = len(nums) // 2\n    left_list = nums[:mid] \n    right_list = nums[mid:] \n  \n    left_list = mergesort(left_list) \n    right_list = mergesort(right_list) \n    return merge(left_list, right_list) \n\ndef merge(left_list, right_list): \n    sorted_list = [] \n    left_list_index = right_list_index = 0\n  \n    left_list_length, right_list_length = len(left_list), len(right_list) \n  \n    for _ in range(left_list_length + right_list_length): \n        if left_list_index < left_list_length and right_list_index < right_list_length: \n            if left_list[left_list_index] <= right_list[right_list_index]: \n                sorted_list.append(left_list[left_list_index]) \n                left_list_index += 1\n            else: \n                sorted_list.append(right_list[right_list_index]) \n                right_list_index += 1\n        elif left_list_index == left_list_length: \n            sorted_list.append(right_list[right_list_index]) \n            right_list_index += 1\n        elif right_list_index == right_list_length: \n            sorted_list.append(left_list[left_list_index]) \n            left_list_index += 1\n  \n    return sorted_list \n\nOutput:\n[2, 3, 5, 7, 9]", "category": "Python"}, {"instruction": "Develop a program to remove duplicate items in the list.", "input": "", "output": "def remove_duplicates(list_values):\n    result = []\n    for i in list_values:\n        if i not in result:\n            result.append(i)\n    return result", "category": "Python"}, {"instruction": "Describe the purpose and usage of the statement break.", "input": "", "output": "The break statement is used to terminate a loop prematurely. It is mostly used to escape an infinite loop or to move out of a loop when a specific condition is met. It can be used in while, for and nested loops.", "category": "Python"}, {"instruction": "Reverse a string without using any in-built Python functions.", "input": "String: racecar", "output": "rev_str = \"\"\nfor ch in string:\n    rev_str = ch + rev_str\nreturn rev_str", "category": "Python"}, {"instruction": "Create a function to find the larger number in a given list.", "input": "myList = [18, 24, 34, 30]", "output": "def larger_num(myList): \n    \n    # Initialize maximum element \n    max = myList[0] \n  \n    # Traverse list elements from second and \n    # compare every element with current max  \n    for i in range(1, len(myList)): \n        if myList[i] > max: \n            max = myList[i] \n    return max \n  \nmyList = [18, 24, 34, 30]\nprint(larger_num(myList))", "category": "Python"}, {"instruction": "Compare two given objects and output the differences.", "input": "Object 1: {name: John, age: 30, city: New York}\nObject 2: {name: John, age: 40, city: Las Vegas}", "output": "def compare_objects(object1, object2):\n    for key, value in object1.items():\n        if key in object2:\n            if object1[key] != object2[key]:\n                print(\"Different values for \" + key + \": \" + str(object1[key]) + \" vs. \" + str(object2[key]))\n        else:\n            print(\"New key not in second object: \" + key)\n    for key, value in object2.items():\n        if key not in object1:\n            print(\"New key not in first object: \" + key)\n    \ncompare_objects({\"name\": \"John\", \"age\": 30, \"city\": \"New York\"},\n                {\"name\": \"John\", \"age\": 40, \"city\": \"Las Vegas\"})\n\n# Output:\n# Different values for age: 30 vs. 40\n# New key not in first object: city", "category": "Python"}, {"instruction": "Create a program that adds up 11 numbers.", "input": "11 numbers: 3, 6, 8, 12, 4, 19, 23, 12, 15, 10, 20", "output": "# defining a function  \ndef add_ele(numbers): \n  \n    # Initialize result \n    result = 0\n    i = 0\n  \n    # Iterating elements in list  \n    for i in range(len(numbers)): \n        result += numbers[i] \n    return result \n  \n# Driver code \nnumbers = [3, 6, 8, 12, 4, 19, 23, 12, 15, 10, 20]\nprint(add_ele(numbers))", "category": "Python"}, {"instruction": "Create a variable called ``new_list`` that contains all elements from the list ``old_list`` which are greater than 5.", "input": "old_list = [2, 3, 5, 7, 9]", "output": "old_list = [2, 3, 5, 7, 9]\nnew_list = []\nfor i in old_list: \n    if i > 5:\n        new_list.append(i)", "category": "Python"}, {"instruction": "Write a code to normalize a given array of numbers between 0 and 1 where min = 0, max = 1 and every other number is proportional to it.", "input": "arr = [10, 20, 30, 25, 0]", "output": "def normalize_array(arr):\n  # Check if the array is empty\n  if len(arr) == 0:\n    return []\n  \n  # Get min and max of the array\n  min_el = min(arr)\n  max_el = max(arr)\n  \n  # Normalize elements in the array\n  normalized_arr = [(el - min_el) / (max_el - min_el) for el in arr]\n  \n  return normalized_arr\n  \nnormalized_arr = normalize_array(arr)\nprint(\"Normalized array:\", normalized_arr)", "category": "Python"}, {"instruction": "Create a function to convert the given string to hexadecimal code.", "input": "", "output": "def string_to_hexadecimal(string):\n    # convert the string to list of bytes\n    bytes_ = [ord(char) for char in string] \n    \n    # convert the bytes to hexadecimal code\n    hexadecimal_list = [hex(byte) for byte in bytes_] \n    \n    # remove the \"0x\" from the hexadecimal code\n    hexadecimal_list = [item[2:] for item in hexadecimal_list]\n    \n    # join all the code into a single string\n    hexadecimal_string = ''.join(hexadecimal_list)\n    \n    return hexadecimal_string", "category": "Python"}, {"instruction": "Write a code to print a binary tree in pre order traversal.", "input": "", "output": "def pre_order_traversal(root):\n    # Return if tree is empty\n  if root == None:\n    return\n  # Print the data of node\n  print(root.data),\n\n  # Recursively call the pre-order traversal on left subtree \n  pre_order_traversal(root.left)\n  \n  # Recursively call the pre-order traversal on right subtree\n  pre_order_traversal(root.right)", "category": "Python"}, {"instruction": "Create a function to categorize a given array of numbers into prime and composite numbers.", "input": "arr = [2, 5, 7, 11, 17, 21, 25]", "output": "def is_prime(num):\n    # check prime\n    divisors = []\n    for x in range(1, num + 1):\n        if (num % x == 0):\n            divisors.append(x)\n    if len(divisors) == 2:\n        return True\n    else:\n        return False\n\ndef categorize_numbers(arr):\n    prime_nums = []\n    composite_nums = []\n    for number in arr:\n        if is_prime(number):\n            prime_nums.append(number)\n        else:\n            composite_nums.append(number)\n    return prime_nums, composite_nums\n    \nprime_nums, composite_nums = categorize_numbers(arr)\nprint(\"Prime numbers in arr:\", prime_nums)\nprint(\"Composite numbers in arr:\", composite_nums)", "category": "Python"}, {"instruction": "Design a class to convert a given string to Morse code and store it as a list.", "input": "", "output": "class MorseCodeConverter:\n    def __init__(self, string):\n        self.string = string\n        self.alphabet = {\n            'a': '.-',\n            'b': '-...',\n            'c': '-.-.',\n            'd': '-..',\n            'e': '.',\n            'f': '..-.',\n            'g': '--.',\n            'h': '....',\n            'i': '..',\n            'j': '.---',\n            'k': '-.-',\n            'l': '.-..',\n            'm': '--',\n            'n': '-.',\n            'o': '---',\n            'p': '.--.',\n            'q': '--.-',\n            'r': '.-.',\n            's': '...',\n            't': '-',\n            'u': '..-',\n            'v': '...-',\n            'w': '.--',\n            'x': '-..-',\n            'y': '-.--',\n            'z': '--..',\n            '1': '.----',\n            '2': '..---',\n            '3': '...--',\n            '4': '....-',\n            '5': '.....',\n            '6': '-....',\n            '7': '--...',\n            '8': '---..',\n            '9': '----.',\n            '0': '-----'\n        }\n    \n    def convert(self):\n        morse_code = []\n        for char in self.string:\n            if char in self.alphabet:\n                morse_code.append(self.alphabet[char])\n        return morse_code", "category": "Python"}, {"instruction": "Create a function to reversed an array in place.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def reverse_array(arr):\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        temp = arr[start]\n        arr[start] = arr[end]\n        arr[end] = temp\n        start += 1\n        end -= 1\n    return arr\n\nprint(reverse_array(arr))", "category": "Python"}, {"instruction": "Create a class for a grocery item with attributes for item name, quantity and price.", "input": "", "output": "class GroceryItem:\n  def __init__(self, name, quantity, price):\n    self.name = name\n    self.quantity = quantity\n    self.price = price\n  \n  def total_price(self):\n    return self.quantity * self.price", "category": "Python"}, {"instruction": "Write a code to generate a random 8 character string containing only lowercase letters.", "input": "", "output": "import random\nimport string\n\ndef generate_random_string(length):\n  return ''.join(random.choices(string.ascii_lowercase, k=length))\n\nrandom_string = generate_random_string(8)\nprint(\"Random 8-character string:\", random_string)", "category": "Python"}, {"instruction": "Create a function to count how many vowels are in a given string.", "input": "", "output": "def count_vowels(string):\n  vowels = \"aeiou\"\n  count = 0\n  \n  for char in string:\n    if char in vowels:\n      count += 1\n      \n  return count", "category": "Python"}, {"instruction": "Is a string immutable in Python?", "input": "", "output": "Yes, a string is immutable in Python. Once a string is created, it cannot be changed.", "category": "Python"}, {"instruction": "What is the syntax of a for loop in Python?", "input": "", "output": "The syntax of a for loop in Python is: \nfor item in iterable:\n    statement(s)", "category": "Python"}, {"instruction": "What is the maximum number of parameters that a function can take in Python?", "input": "", "output": "A function in Python can take up to 255 parameters.", "category": "Python"}, {"instruction": "Calculate the sum of all odd numbers between two given numbers.", "input": "Lower limit: 3\nUpper limit: 7", "output": "def sumOfOddNumbers(lower, upper):\n    total = 0\n    for i in range(lower, upper+1): \n        if (i % 2 != 0): \n            total += i\n    return total", "category": "Python"}, {"instruction": "Write a code that takes a string and an integer as arguments and returns the number of words in the string that are of the provided length.", "input": "String: \"Hello World\"\nLength: 5", "output": "def wordCountByLength(string, length):\n    words = string.split()\n    return sum(1 for word in words if len(word) == length)", "category": "Python"}, {"instruction": "Write a function to convert decimal number to binary number.", "input": "", "output": "def decimalToBinary(num):\n    if num > 1:\n        decimalToBinary(num // 2)\n    return num % 2", "category": "Python"}, {"instruction": "Given a list of strings, create a function to convert all of the strings into uppercase.", "input": "", "output": "def to_uppercase(str_list):\n    return [s.upper() for s in str_list]", "category": "Python"}, {"instruction": "Create an algorithm for finding the largest number in a list.", "input": "", "output": "def find_largest(nums):\n    largest = nums[0]\n    for num in nums[1:]:\n        if num > largest:\n            largest = num\n    return largest", "category": "Python"}, {"instruction": "Create a function that takes in a string and returns a boolean indicating whether or not the string contains the letter \"u\".", "input": "", "output": "def contains_letter_u(str):\n    for char in str:\n        if char == 'u':\n            return True\n    return False", "category": "Python"}, {"instruction": "Create an algorithm to detect if a linked list contains a cycle.", "input": "", "output": "def has_cycle(head):\n    slow = head\n    fast = head\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n        if slow == fast:\n            return True\n    return False", "category": "Python"}, {"instruction": "Create a function which takes in an array and returns a list of all the elements which appear only once in the array.", "input": "", "output": "def find_unique_elements(arr):\n    unique_elements = []\n    for elem in arr:\n        if arr.count(elem) == 1:\n            unique_elements.append(elem)\n    return unique_elements", "category": "Python"}, {"instruction": "Create a function which takes two strings and compares them to see if they are anagrams of each other.", "input": "", "output": "def isAnagram(str1, str2):\n    list1 = sorted(str1.lower())\n    list2 = sorted(str2.lower())\n    if list1 == list2:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Suggest some changes to the following code that will reduce the runtime complexity.", "input": "def search_array(arr, target):\n    '''This function searches a given array for the target and returns its index if found.'''\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1", "output": "def search_array(arr, target):\n    '''This function searches a given array for the target and returns its index if found.'''\n    for i, num in enumerate(arr):\n        if num == target:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Suggest a solution to make the following code work correctly.", "input": "def count_sum(arr):\n    '''This function adds all elements in ``arr`` and returns the total sum.'''\n    sum = 0\n    for n in arr:\n        sum += n\n    return sum", "output": "def count_sum(arr):\n    '''This function adds all elements in ``arr`` and returns the total sum.'''\n    sum = 0\n    for n in arr:\n        if isinstance(n, (int, float)):\n            sum += n\n    return sum", "category": "Python"}, {"instruction": "Use a for loop to sum all the elements in an array.", "input": "myArr = [2, 5, 8, 11]", "output": "def Sum_list(list): \n    sum = 0\n    for i in range(len(list)):\n        sum += list[i] \n    return sum \n\nmyArr = [2, 5, 8, 11]\nprint(Sum_list(myArr))", "category": "Python"}, {"instruction": "Read the following array and remove all the numbers divisible by 4.", "input": "list_int = [2,4,6,10]", "output": "list_int = [num for num in list_int if num % 4 != 0]", "category": "Python"}, {"instruction": "Create a program to remove all duplicate elements from a list and return a new list with the unique elements.", "input": "", "output": "def remove_duplicates(nums):\n    temp_list = []\n    for num in nums:\n        if num not in temp_list:\n            temp_list.append(num)\n    return temp_list", "category": "Python"}, {"instruction": "Name three built-in Python data types.", "input": "", "output": "The three built-in Python data types are integers, floats, and strings.", "category": "Python"}, {"instruction": "How to check if a given year is a leap year in Python?", "input": "", "output": "def leap_year(year):\n    if (year % 4 == 0) and (year % 100 != 0 or year % 400 == 0):\n        return True\n    return False", "category": "Python"}, {"instruction": "Write a code to form a triangle pattern with the character '$'", "input": "", "output": "for i in range(5): \n    for j in range(i+1): \n        print('$', end=\"\") \n    print()", "category": "Python"}, {"instruction": "Using the re library, trim the following string of all whitespace.", "input": "my_string = \"  Hello, World!  \"", "output": "import re\n\nmy_string = \"  Hello, World!  \"\n\nmodified_string = re.sub('\\s+', '', my_string)\n\nprint(modified_string)", "category": "Python"}, {"instruction": "Replace all empty strings with a default value using the following list.", "input": "my_list = [\"apple\", \"\", \"grapes\", \"\", \"bananas\"]", "output": "my_list = [\"apple\", \"\", \"grapes\", \"\", \"bananas\"]\n\nmy_list = [x if x != \"\" else \"default\" for x in my_list]\n\nprint(my_list)", "category": "Python"}, {"instruction": "Using the numpy library, reshape the given matrix array to 5 rows and 2 columns.", "input": "import numpy as np \narr = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]])", "output": "arr = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]])\n\nreshaped_arr = arr.reshape(5, 2)\n\nprint(reshaped_arr)", "category": "Python"}, {"instruction": "Construct a Python function to count the number of words in a given sentence", "input": "This is a sentence", "output": "def word_count(sentence):\n    return len(sentence.split())\n\nprint(word_count('This is a sentence')) # Output: 5", "category": "Python"}, {"instruction": "Create a python function that takes a string of characters as an argument and returns a list of all unique combinations of characters possible.", "input": "abc", "output": "def generate_unique_permutations(string):\n    output = []\n    for x in range(len(string)):\n        for y in range(x + 1,len(string)+1):\n            output.append(''.join(sorted(string[x:y])))  \n    return output\n\nprint(generate_unique_permutations(\"abc\")) #Output: ['a', 'ab', 'abc', 'ac', 'b', 'bc', 'c']", "category": "Python"}, {"instruction": "Build a neural network for binary classification using TensorFlow.", "input": "", "output": "\"\"\"\nBuild a neural network for binary classification using TensorFlow\n\"\"\"\nimport tensorflow as tf\n\n# Define the model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(units=8, activation='relu', input_shape=(2,))) \nmodel.add(tf.keras.layers.Dense(units=4, activation='relu'))\nmodel.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])", "category": "Python"}, {"instruction": "Create a Macros in Excel to transpose a given set of data", "input": "", "output": "Sub Transpose() \n \n    Dim ReadyRange As Range \n \n     \n \n    Set ReadyRange = Selection \n \n    ReadyRange.Copy \n \n    ReadyRange.PasteSpecial xlPasteAll, Transpose:=True \n \nEnd Sub", "category": "Python"}, {"instruction": "Create a function to find the standard deviation of a list of numbers", "input": "[2,4,4,4,5,5,7,9]", "output": "def std_deviation(data): \n    n = len(data) \n\t \n    mean = sum(data) /n \n    sum_sqr = sum(pow(x-mean,2) for x in data) \n    stdev = sqrt(sum_sqr/n) \n\t\n    return stdev \n    \nstd_deviation([2,4,4,4,5,5,7,9])", "category": "Python"}, {"instruction": "Generate a key-value pair such that the key is a string of length 3 and the value is a random number from 0 to 9", "input": "", "output": "import random\n\nkey = ''.join(random.choices(string.ascii_letters, k = 3))\nvalue = random.randint(0, 9)\ndata = {key : value}", "category": "Python"}, {"instruction": "Create a list comprehension for the following code.", "input": "number_list = []\nfor x in range(10):\n    if x % 2 == 0:\n        number_list.append(x)", "output": "number_list = [x for x in range(10) if x % 2 == 0]", "category": "Python"}, {"instruction": "Identify the key differences between a set and a dictionary in Python.", "input": "", "output": "The key difference between a set and a dictionary in Python is that a set stores unordered elements while a dictionary stores key-value pairs. Additionally, dictionaries have a set of keys that are unique and immutable, while sets are unordered collections of unique and immutable elements. Sets are more efficient for searching and testing for membership, while dictionaries are more efficient for retrieving specific values.", "category": "Python"}, {"instruction": "List two advantages and two disadvantages of using a linked list data structure", "input": "", "output": "Advantages of using a linked list data structure: \n1. A linked list can grow and shrink in size as needed since nodes can be dynamically allocated. \n2. Nodes can be added at any point in the list without traversing the whole list. \n\nDisadvantages of using a linked list data structure: \n1. Time efficiency is reduced  since nodes must be searched sequentially. \n2. Memory efficiency is reduced since each node requires additional space to store references to the next node.", "category": "Python"}, {"instruction": "Implement an algorithm to sort the following array.", "input": "[3, 5, 4, 6, 1, 2]", "output": "def sortArray(array):\n    n = len(array)\n    for i in range(n):\n        min_index = i\n        for j in range(i+1, n):\n            if array[min_index] > array[j]:\n                min_index = j\n        array[i], array[min_index] = array[min_index], array[i]\n    return array", "category": "Python"}, {"instruction": "Generate a random password of length 8 using Python.", "input": "", "output": "import random\n\ndef generate_password(length):\n    chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\n    password = \"\"\n    for i in range(length):\n        index = random.randint(0, len(chars)-1)\n        password += chars[index]\n    return password\n\nlength = 8\npassword = generate_password(length)\nprint(\"Here's your random password:\", password)", "category": "Python"}, {"instruction": "Normalize a column \"Weight\" in a Pandas dataframe.", "input": "", "output": "import pandas as pd\n\n# Read data from csv file\ndf = pd.read_csv(\"data.csv\")\n\n# Normalize the column \"Weight\"\ndf['Weight']=(df['Weight']-df['Weight'].min())/(df['Weight'].max()-df['Weight'].min())\n\n# Print the dataframe\nprint(df)", "category": "Python"}, {"instruction": "Convert a string representation of a JSON object to an actual JSON object in Python.", "input": "'{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'", "output": "import json\n\njson_string = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\n\njson_object = json.loads(json_string)", "category": "Python"}, {"instruction": "Generate a list of 1000 random numbers between 1 and 1000 using Python.", "input": "", "output": "import random\n\nrandom_list = [random.randint(1, 1000) for _ in range(1000)]", "category": "Python"}, {"instruction": "Implement a machine learning model in Python to predict customer churn.", "input": "", "output": "import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\n# Load dataset\ncustomers = pd.read_csv(\"customers.csv\")\n\n# Split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(\n    customers.drop('Churn', axis=1), \n    customers.Churn,\n    test_size=0.2, \n    random_state=42)\n\n# Create model\nmodel = LogisticRegression()\n\n# Fit and make predictions\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n\n# Calculate accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))", "category": "Python"}, {"instruction": "Write a Tensorflow program to perform binary classification on a given dataset.", "input": "", "output": "import tensorflow as tf\n\nmnist = tf.keras.datasets.mnist\n\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\nx_train, x_test = x_train / 255.0, x_test / 255.0\n\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Flatten(input_shape=(28, 28)),\n  tf.keras.layers.Dense(128, activation='relu'),\n  tf.keras.layers.Dense(2, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=5)\n\nmodel.evaluate(x_test,  y_test, verbose=2)", "category": "Python"}, {"instruction": "Provide a Python function to calculate the number of times a word appears in a given string", "input": "\"This is a sample string. There are some words in this string.\"", "output": "def count_words(s): \n    tokens = s.split() \n    word_freq = {} \n    for token in tokens: \n        if token in word_freq: \n            word_freq[token] += 1\n        else: \n            word_freq[token] = 1\n        \n    return word_freq", "category": "Python"}, {"instruction": "Convert a given string to its lowercase version", "input": "Python", "output": "lower_case = \"python\"", "category": "Python"}, {"instruction": "Write a Python function that takes an integer as an argument and returns the square of that number", "input": "", "output": "def square(n):\n    return n ** 2", "category": "Python"}, {"instruction": "Generate a dictionary that has 5 string-string key-value pairs", "input": "", "output": "import random\n\nkeys = [''.join(random.choices(string.ascii_letters, k = 3)) for i in range(5)]\nvalues = [''.join(random.choices(string.ascii_letters, k = 3)) for i in range(5)]\n\ndata = {key:value for key, value in zip(keys, values)}", "category": "Python"}, {"instruction": "Using the bubble sort algorithm, sort the following array.", "input": "[3, 5, 2, 1, 4]", "output": "def bubbleSort(arr): \n    n = len(arr)\n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n    return arr\n  \n  \n# Driver code \narr = [3, 5, 2, 1, 4]\n  \nbubbleSort(arr)\n\nOutput: [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Create a function in python that takes a string as an argument and prints out two copies of the string.", "input": "string = \"Hello World!\"", "output": "def print_twice(string):\n    print(string)\n    print(string)\n    \nprint_twice(string)", "category": "Python"}, {"instruction": "Design a Python function to return the list of values in two separate lists for even and odd numbers in a given list.", "input": "[1, 2, 3, 4, 5]", "output": "def separateEvenOdd(nums):\n    evenList = []\n    oddList = []\n\n    for n in nums:\n        if n % 2 == 0:\n            evenList.append(n)\n        else:\n            oddList.append(n)\n\n    return evenList, oddList\n\nprint(separateEvenOdd([1,2,3,4,5]))", "category": "Python"}, {"instruction": "Create a function that takes two integers and returns the remainder when the greater integer is divided by the smaller integer.", "input": "", "output": "def remainder(a,b):\n    if a > b:\n        return a % b\n    else:\n        return b % a", "category": "Python"}, {"instruction": "Generate a pseudocode of a breadth first search algorithm.", "input": "", "output": "1. Create a queue Q\n\n2. Enqueue item S(source) onto Q\n\n3. For each element v in the adjacency list of S \n    3.1. Enqueue v onto Q\n    3.2. Set v's predecessor to S\n\n4. While Q is not empty\n    4.1. Dequeue an item u from Q \n    4.2. For each element v in the adjacency list of u\n       4.2.1. If v is unvisited, then\n           4.2.1.1. set v's predecessor to u\n           4.2.2.2. enqueue v onto Q\n\n5. Return each node's predecessor", "category": "Python"}, {"instruction": "Design an approach in Python to retrieve a record from a database.", "input": "", "output": "import sqlite3\n\ndef retrieve_record(db_name, table_name, id):\n    try:  \n        con = sqlite3.connect(db_name)\n        cur = con.cursor()\n        cur.execute(\"SELECT * FROM {} where id={};\".format(table_name, id))\n        record = cur.fetchone()\n    except:\n        record = None\n    finally:    \n        cur.close()\n        con.close()\n    return record", "category": "Python"}, {"instruction": "Describe a pipelined architecture for a processor", "input": "", "output": "A pipelined Processor architecture is one in which the instruction set is divided into separate stages, each associated with a specific segment in the computation process. As an instruction is entered, it is routed to the appropriate stage in the pipeline and progresses sequentially, thereby allowing the processor to complete multiple instructions simultaneously. The stages, known as the pipeline stages, can include IF (Instruction Fetch), ID (Instruction Decode), EX (Execution), MEM (Memory Access) and WB (Write-Back). The IF and ID stages typically handle instruction fetch and decode, while EX and MEM perform instruction execution and memory access, respectively. The final stage, WB, is responsible for writing the result to memory or a register.", "category": "Python"}, {"instruction": "Create a function to print a multiline message in Python", "input": "message = \"This is a multiline \nmessage.\"", "output": "def print_multiline_message(message):\n    print(message)", "category": "Python"}, {"instruction": "Create a Python program to replace all instances of a specific character in a string.", "input": "string = \"Hello World!\"\ncharacter = \"o\"\nreplacement_character = \"_\"", "output": "def replace_character(string, character, replacement_character):\n    new_string = \"\"\n    for c in string:\n        if c == character:\n            new_string += replacement_character\n        else:\n            new_string += c\n    return new_string", "category": "Python"}, {"instruction": "Write a function to find the n-th Fibonacci number for a given n", "input": "", "output": "def get_fibonacci(n):\n    a, b = 0, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b", "category": "Python"}, {"instruction": "Using the given information, write a function to calculate a 5-digit ISBN number.", "input": "Author name: Bob Smith\nTitle of Book: Learn Programming\nPublisher: Aztec Publishing\nYear Published: 2020", "output": "def calculate_isbn(authorname, title, publisher, yearpublished):\n    authorname_string = authorname.replace(' ', '')\n    title_string = title.replace(' ', '')\n    publisher_string = publisher.replace(' ', '')\n\n    isbn_total = 0\n\n    for letter in authorname_string:\n        isbn_total += ord(letter)\n\n    for letter in title_string:\n        isbn_total += ord(letter)\n\n    for letter in publisher_string:\n        isbn_total += ord(letter) \n\n    isbn_total += yearpublished\n\n    while isbn_total > 9999:\n        isbn_total = isbn_total % 10000\n\n    isbn_string = str(isbn_total).zfill(5)\n\n    return isbn_string", "category": "Python"}, {"instruction": "Create a boolean function to check whether a given string contains all alphabets", "input": "phrase = \"The quick brown fox jumps over the lazy dog\"", "output": "def is_alphabetical(phrase):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in alphabet:\n        if letter not in phrase:\n            return False\n    return True", "category": "Python"}, {"instruction": "Create a function to compute the Fibonacci sequence for a given input", "input": "", "output": "def compute_fibonacci(n):\n    fib_list = []\n    a, b = 0, 1\n\n    while a < n:\n        fib_list.append(a)\n        a, b = b, a+b\n    return fib_list", "category": "Python"}, {"instruction": "Write a Python program to find the minimum cost of a path from top left cell to bottom right cell of a matrix.", "input": "matrix = [[2, 0, 3, 5],\n          [4, 5, 1, 2],\n          [3, 1, 2, 7]]", "output": "def min_path_sum(matrix):\n\n    # initialize the solution matrix\n    res = [[0 for _ in range(len(matrix[0]))] for _ in range(len(matrix))]\n\n    # copying the first row elements\n    res[0] = matrix[0]\n\n    # iterate over the remaining rows\n    for i in range(1, len(matrix)):\n        # copy the first element\n        res[i][0] = res[i-1][0] + matrix[i][0]\n\n        for j in range(1, len(matrix[0])):\n            # choose the smaller of the two\n            res[i][j] = min(res[i-1][j], res[i][j-1]) + matrix[i][j]\n\n    # return the bottom-right element\n    return res[len(matrix)-1][len(matrix[0])-1]", "category": "Python"}, {"instruction": "Write a Python program to return a boolean indicating whether a substring is present within a given string.", "input": "string = 'Hello world'\nsubstring = 'world'", "output": "def contains_substring(string, substring):\n  return substring in string", "category": "Python"}, {"instruction": "Write a Python function to filter a given list of strings by the specified character?", "input": "my_list = ['Hello', 'World', 'Hi', 'Python']\ncharacter = 'o'", "output": "def filter_list_by_character(my_list, character):\n  return [item for item in my_list if character in item]", "category": "Python"}, {"instruction": "Create a class in Python with a constructor and two methods.", "input": "", "output": "class MyClass:\n  def __init__(self):\n    self.x = 0\n\n  def method_1(self):\n    self.x +=1\n\n  def method_2(self, arg1):\n    self.x += arg1", "category": "Python"}, {"instruction": "Implement a function to calculate the absolute value of a number.", "input": "-7", "output": "```\ndef absValue(num): \n    if num >= 0: \n        return num \n    else: \n        return -num \n  \nprint( absValue(-7) )\n\n```", "category": "Python"}, {"instruction": "Create a method to generate a random integer between 1 and 10 in Python.", "input": "", "output": "import random\n\ndef random_int():\n    return random.randint(1, 10)", "category": "Python"}, {"instruction": "Describe what an abstract class is used for.", "input": "", "output": "An abstract class is a class that contains abstract methods and variables. Abstract classes are meant to be inherited and customized by their subclasses. They are used to provide basic implementations of commonly used methods, as well as impose a common interface between different subclasses.", "category": "Python"}, {"instruction": "Develop Python code to print out all the divisors of a given number", "input": "30", "output": "def get_divisors(n):\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors \n\nprint(get_divisors(30)) # output [1, 2, 3, 5, 6, 10, 15, 30]", "category": "Python"}, {"instruction": "Create an algorithm to generate a random password", "input": "", "output": "def generate_password(length):\n  password = \"\"\n  characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()\"\n  for i in range(length):\n    password += choice(characters)\n  return password\n\nprint(generate_password(10)) // output 5s@N#s9J@2", "category": "Python"}, {"instruction": "Compress a given string by counting the occurrences of each character.", "input": "", "output": "def compress_string(s):\n    l = len(s) \n    \n    # If operations length is 0 \n    if l == 0: \n        return \"\" \n  \n    # Erroneous characters in the  \n    #original string are ignored. \n    if l == 1 or s[0] == s[1]: \n        return s[0] + str(1) \n    \n    # Initialize the variable \n    count = 1\n    s1 = \"\" \n     \n    # Here i is the indexing variable \n    i = 1\n    while i < l: \n            # If the current character matches with the next one \n            if (s[i] == s[i - 1]): \n                count += 1\n            else: \n                s1 = s1 + s[i - 1] + str(count) \n                count = 1\n            i += 1\n    s1 = s1 + s[i - 1] + str(count)\n    \n    return s1 \n  \ns = \"geeksforgeeks\"\n\nprint(compress_string(s))\n\nOutput: g1e2k2s2f1o1r1g1e1e1k1s1", "category": "Python"}, {"instruction": "Programmatically generate 10 random numbers between 0 and 1.", "input": "", "output": "import random \n\nfor x in range(10): \n  print(random.random()) \n\nOutput: 0.06344054085111036 0.2881477132700741 0.17747003808770072 0.4838670382036148 0.8504676489597706 0.6951969864720918 0.3444948373996736 0.251203536083174 0.603054609456176 0.8579147959146845", "category": "Python"}, {"instruction": "Explain how to convert an expression from postfix notation to infix notation", "input": "", "output": "Infix notation is a way of writing an expression in which the operators are placed between the operands, such as 2 + 5, whereas postfix notation is a way of writing an expression in which the operators are placed after the operands, such as 2 5 +. To convert an expression from postfix notation to infix notation, scan the expression from left to right. If an operand is encountered, simply push it onto a stack. If an operator is encountered, pop two operands from the stack and place the operator in between them. Finally, push the resulting expression back onto the stack and repeat this until the end of the expression is reached.", "category": "Python"}, {"instruction": "Create a program that logs the time a user entered a program.", "input": "", "output": "import time\n\ndef log_time():\n    current_time = time.time()\n    print(\"You entered the program at\", current_time)", "category": "Python"}, {"instruction": "Write a function to produce a copy of an array", "input": "[1, 2, 3, 4]", "output": "def copy_array(arr): \n    new_arr = list(arr) \n    return new_arr", "category": "Python"}, {"instruction": "Generate a Python script that implements a Linked List data structure.", "input": "", "output": "# define Node\nclass Node(object):\n\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n# define LinkedList\nclass LinkedList:\n\n    def __init__(self, head=None):\n        self.head = head\n    \n    def insert(self, node):\n        current = self.head\n        if not self.head:\n            self.head = node\n        else:\n            while current.next:\n                current = current.next\n            current.next = node\n\n     def delete_node(self, data):\n        current = self.head\n        while current.data != data and current.next is not None:\n            previous = current\n            current = current.next\n        if current.data == data:\n            if current == self.head:\n                self.head = current.next\n            else:\n                previous.next = current.next", "category": "Python"}, {"instruction": "Implement a method to sort a list of numbers using the quick sort algorithm.", "input": "[10, 3, 9, -2, 8, 7]", "output": "def quickSort(arr): \n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quickSort(left) + middle + quickSort(right)", "category": "Python"}, {"instruction": "Write a code to implement an LRU (Least Recently Used) cache.", "input": "", "output": "class LRUCache:\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.cache = {}\n        self.lru = list()\n           \n    # get an item from the cache and update its timestamp\n    def get(self, key):\n        if key in self.cache:\n            self.lru.remove(key)\n            self.lru.append(key)\n            return self.cache[key]\n        else:\n            return -1\n             \n    # add a new item to the cache, discard the least recently used item if cache is full \n    def put(self, key, value):\n        if len(self.cache) >= self.capacity:\n            self.cache.pop(self.lru[0])\n            self.lru.pop(0)\n        if key in self.cache: \n            self.lru.remove(key)\n        self.cache[key] = value\n        self.lru.append(key)", "category": "Python"}, {"instruction": "Analyze this code for potential runtime errors.", "input": "def factorial(n):\n    result = 1\n    if n >= 0:\n        for i in n:\n            result *= i\n        return result", "output": "This code may result in a runtime error because an iterable is expected as an argument for the for loop, but the argument passed is a number rather than an iterable. Additionally, the if-statement does not have an else block making it possible for the function to return None instead of a number. To fix the code, the argument passing to the for loop should be changed to range(n) and the if-statement should have an else block that returns 1 if n is smaller than 0.", "category": "Python"}, {"instruction": "Compile a piece of code written in Python language.", "input": "", "output": "python -c \"import py_compile; py_compile.compile('foo.py')\"", "category": "Python"}, {"instruction": "Rewrite this function using a recursive algorithm.", "input": "def factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result", "output": "def factorial(n): \n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "category": "Python"}, {"instruction": "Compute the Fibonacci sequence upto n.", "input": "", "output": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)", "category": "Python"}, {"instruction": "Create a function to print a Diamond shape.", "input": "Size: 5", "output": "def print_diamond(size):\n    for i in range(1, size + 1):\n        print(\" \" * (size - i) + \"*\" * (2 * i - 1))\n    for i in range(size - 1, 0, -1):\n        print(\" \" * (size - i) + \"*\" * (2 * i - 1))", "category": "Python"}, {"instruction": "Using Python, write a function to format a given date.", "input": "Date: \"2021-02-14\"\nFormat: \"dd/mm/yyyy\"", "output": "def format_date(date, date_format):\n date = date.split('-') \n day = date[2]\n month = date[1]\n year = date[0]\n if date_format == \"dd/mm/yyyy\": \n  formatted_date = day + \"/\" + month + \"/\" + year\n return formatted_date", "category": "Python"}, {"instruction": "What data type is best suited to store a list of students' names?", "input": "", "output": "A list of students' names can best be stored using a string data type. Strings are character sequences, making them well-suited for storing text-based information such as names. Storing a list of student names as a string is also more efficient memory-wise than other data types, since strings are immutable and can be reused for different values.", "category": "Python"}, {"instruction": "Design a function to remove all duplicate words from a sentence.", "input": "\"This is this is a sentence with with repeats repeats\"", "output": "def removeDuplicates(txt):\n    newTxt = []\n    txt = txt.split()\n\n    for x in txt:\n        if x not in newTxt:\n            newTxt.append(x)\n\n    return \" \".join(newTxt)", "category": "Python"}, {"instruction": "Generate an array in Python of size 10 filled with Random numbers between 1 to 100.", "input": "", "output": "import random\narr = [random.randint(1,100) for i in range(10)]", "category": "Python"}, {"instruction": "Create a web application using Flask in Python that displays the current date and time.", "input": "", "output": "from flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef current_datetime():\n    from datetime import datetime\n    now = datetime.now()\n    return render_template('template.html', current_datetime = now)\n\nif __name__ == \"__main__\":\n\tapp.run(debug = True)\n\ntemplate.html:\n<html>\n    <head>\n        <title> Current Date and Time</title>\n    </head>\n    <body>\n        <h1> Current Date and Time </h1>\n        <p> The current date and time is {{ current_datetime }}</p>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Create an array in Python of size 10 filled with zeroes.", "input": "", "output": "arr = [0] * 10", "category": "Python"}, {"instruction": "Provide an appropriate name for a Python module that contains a class for a user.", "input": "", "output": "The appropriate name for the module could be \"user_class.py\".", "category": "Python"}, {"instruction": "Print the fibonacci sequence of length 10", "input": "", "output": "def fibonacci(length): \n    result = [] \n    a, b = 0, 1\n    for _ in range(length): \n        result.append(a) \n        a, b = b, a + b \n    return result", "category": "Python"}, {"instruction": "Debug this Python code and explain why it was not running.", "input": "def string_split(string, n):\nwords = string.split(\" \")\nfor x in words[:n]:\nprint(\" \".join(words[:x]))", "output": "def string_split(string, n):\n    words = string.split(\" \")\n    for x in range(n):\n        print(\" \".join(words[:x]))\n\nThe code was not running as initially written because the range used in the for loop was not provided. Inside the for loop, the variable x needed to be given a range (e.g. range(n)) so that it can iterate over each of the elements of the words list properly. The loop should have looked like this: for x in range(n):.", "category": "Python"}, {"instruction": "Count the number of occurrences of each character in a given string and print the output.", "input": "str = \"abbabbabbb\"", "output": "from collections import Counter\nstr = \"abbabbabbb\"\nletters = Counter(str)\nfor key, value in letters.items():\n    print(f\"Character {key} occurs {value} time(s)\")", "category": "Python"}, {"instruction": "Write a Python code snippet to sort a dictionary by its values in ascending order.", "input": "dictionary = {'a': 5, 'b': 2, 'c': 4}", "output": "sorted_dictionary = dict(sorted(dictionary.items(), key=lambda item: item[1]))\nprint(sorted_dictionary) # result: {'b': 2, 'c': 4, 'a': 5}", "category": "Python"}, {"instruction": "Write a code snippet to convert a list in Python to a set.", "input": "list1 = [1,2,3,4,5]", "output": "set1 = set(list1) # set1 will now contain [1,2,3,4,5]", "category": "Python"}, {"instruction": "Parse a given JSON string and extract all the values of the key \"name\".", "input": "json_str = '{\"name\": \"Jack\", \"age\": 22, \"status\": \"Active\"}'", "output": "import json\n\nparsed = json.loads(json_str)\nname_list = []\n\nfor key, value in parsed.items():\n    if key == 'name':\n        name_list.append(value)\n\nprint(name_list)", "category": "Python"}, {"instruction": "Implement a Bubble Sort algorithm.", "input": "list = [10, 5, 9, 25, 1]", "output": "def bubbleSort(list): \n    n = len(list) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if list[j] > list[j+1] : \n                list[j], list[j+1] = list[j+1], list[j] \n  \n# Driver code to test above \nlist = [10, 5, 9, 25, 1]\nbubbleSort(list) \nprint (\"Sorted array :\") \nprint(list)", "category": "Python"}, {"instruction": "Write a function in Python to compress a given string.", "input": "aabcccccaaa", "output": "def compression(string):\n    output = \"\"\n    count = 1\n    curr_char = string[0]\n    for char in string[1:]:\n        if char == curr_char:\n            count += 1\n        else:\n            output += curr_char + str(count)\n            curr_char = char\n            count = 1\n    output += curr_char + str(count)\n    return output\n\nprint(compression('aabcccccaaa'))\n# Output: a2b1c5a3", "category": "Python"}, {"instruction": "Write a function to classify a news article by its tone.", "input": "", "output": "def classifyArticle(article):\n    tone_dict = {\n        'positive': 0,\n        'neutral': 0,\n        'negative': 0\n    }\n    for token in article:\n        if token in pos_words:\n            tone_dict['positive'] += 1\n        elif token in neg_words:\n            tone_dict['negative'] += 1\n        else:\n            tone_dict['neutral'] += 1\n\n    sorted_tones = sorted(tone_dict.items(), key=lambda x:x[1], reverse=True)\n    return sorted_tones[0][0]", "category": "Python"}, {"instruction": "Implement a stack data structure using linked lists.", "input": "", "output": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.next = None\n\nclass Stack:\n\tdef __init__(self):\n\t\tself.head = None\n\t\tself.num_elements = 0\n\n\tdef push(self, element):\n\t\tnew_node = Node(element)\n\t\tif self.head == None:\n\t\t\tself.head = new_node\n\t\telse:\n\t\t\tnew_node.next = self.head\n\t\t\tself.head = new_node\n\t\tself.num_elements += 1\n\t\t\n\tdef pop(self):\n\t\tif self.is_empty():\n\t\t\treturn None\n\t\ttemp = self.head\n\t\tself.head = self.head.next\n\t\tself.num_elements -= 1\n\t\treturn temp.data\n\n\tdef is_empty(self):\n\t\tif self.num_elements == 0:\n\t\t\treturn True\n\t\treturn False\n\n\tdef top(self):\n\t\tif self.head:\n\t\t\treturn self.head.data\n\t\treturn None", "category": "Python"}, {"instruction": "Given a list of numbers, create a function that finds the two elements that sum to a given target number.", "input": "nums = [2, 45, 7, 9, 15]\ntarget = 16", "output": "def two_sum(nums, target):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [i, j]\n\nresult = two_sum(nums, target)\nprint(result) \n\n# Output: [2, 3]", "category": "Python"}, {"instruction": "Explain how you would loop over a list of dictionaries to extract all the values", "input": "", "output": "To loop through a list of dictionaries, you can use a for loop. For example:\n\nmy_list = [{\"name\": \"John Doe\"}, {\"age\": 25}]\nfor item in my_list:\n    for key, value in item.items():\n        print(key, \":\", value)\n\nThis will loop through each item in the list as a dictionary, and for each dictionary, it will loop through all the key-value pairs and print them out.", "category": "Python"}, {"instruction": "Generate an algorithm that sorts the elements of an array.", "input": "[6, 3, 8, 9, 4]", "output": "def sort_array(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in correct position\n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\n# Driver code to test above \narr = [6, 3, 8, 9, 4] \nsort_array(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "category": "Python"}, {"instruction": "Name four significant members of the Python community.", "input": "", "output": "Guido van Rossum, Kenneth Reitz, Monty Python, and Brett Cannon.", "category": "Python"}, {"instruction": "Create a class to store and print information about a book.", "input": "", "output": "class Book:\n    def __init__(self, title, author, publisher, pages):\n        self.title = title\n        self.author = author\n        self.publisher = publisher\n        self.pages = pages\n   \n    def print_info(self):\n        print(f\"Title: {self.title}\")\n        print(f\"Author: {self.author}\")\n        print(f\"Publisher: {self.publisher}\")\n        print(f\"Pages: {self.pages}\")", "category": "Python"}, {"instruction": "Write a function in Python that takes a number and returns the square of the number.", "input": "x = 15", "output": "def square(x):\n    \"\"\"This function takes an integer x and returns its square\"\"\"\n    return x * x\n    \nx = 15\nprint(square(x)) # prints 225", "category": "Python"}, {"instruction": "How to remove duplicates from a list in Python?", "input": "", "output": "In Python, duplicates can be removed from a list by converting the list to a set. Sets are unordered collections of unique elements. They do not allow duplicate elements, thus when a list is converted to a set, all duplicates are removed.\n\nFor example, if the list is named my_list, then the set can be constructed as follows:\n\nmy_set = set(my_list)", "category": "Python"}, {"instruction": "How to find the number of elements within a list in Python?", "input": "", "output": "The number of elements in a list can be obtained using the len() method in Python.\nFor example, if the list is named my_list, the number of elements can be obtained as len(my_list).", "category": "Python"}, {"instruction": "Create a function that encodes a message into a Vigenere cipher", "input": "", "output": "def vigenere_encode(message, key):\n    encoded_message = \"\"\n    key_index = 0\n    for character in message:\n        if character.isalpha():\n            shift_amount = ord(key[key_index]) % 26\n            key_index += 1\n            if key_index == len(key):\n                key_index = 0  \n            shifted_char_code = ord(character) + shift_amount\n            if shifted_char_code > ord('z'):\n                shifted_char_code -= 26\n            encoded_message += chr(shifted_char_code)\n        else:\n            encoded_message += character\n    return encoded_message", "category": "Python"}, {"instruction": "Write a function that takes two strings and searches for all the occurrences of the first string in the second and returns the positions of the pattern within the string.", "input": "string1 = \"aa\"\nstring2 = \"aaaaaa\"", "output": "def pattern_occurences(string1, string2):\n    positions = []\n    for i in range(len(string2)):\n        if string1 == string2[i:i+len(string1)]:\n            positions.append(i)\n    return positions", "category": "Python"}, {"instruction": "Create a function that takes an array of numbers and a target number as input, and returns true if the target number is present in the given array, false otherwise.", "input": "list1 = [1,2,3,4]\ntarget = 2", "output": "def contains_target(list1, target):\n    return target in list1", "category": "Python"}, {"instruction": "Write a function to concatenate two strings without using the concatenation operator \"+\".", "input": "", "output": "def concat(string1, string2):\n    result = \"\"\n    for i in string1:\n        result += i\n    for j in string2:\n        result += j\n    return result", "category": "Python"}, {"instruction": "Design a class in Python to store a book's title, author, and number of pages.", "input": "", "output": "class Book:\n    def __init__(self, title, author, pages):\n        self.title = title\n        self.author = author\n        self.pages = pages\n\n    def get_title(self):\n        return self.title\n\n    def get_author(self):\n        return self.author\n\n    def get_pages(self):\n        return self.pages", "category": "Python"}, {"instruction": "Design a class in Python to store information about a car, such as its make, year, and mileage.", "input": "", "output": "class Car:\n    def __init__(self, make, year, mileage):\n        self.make = make\n        self.year = year\n        self.mileage = mileage\n\n    def get_make(self):\n        return self.make\n\n    def get_year(self):\n        return self.year\n\n    def get_mileage(self):\n        return self.mileage", "category": "Python"}, {"instruction": "Write a script in Python to find the longest word in a given string.", "input": "sample_string = \"This is a sample string containing a few words\"", "output": "def longest_word(sample_string):\n    words_list = sample_string.split()\n    longest_word = \"\"\n    for word in words_list:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word", "category": "Python"}, {"instruction": "Design a class in Python to store a user profile information such as name, age, city, etc.", "input": "", "output": "class UserProfile:\n    def __init__(self, name, age, city):\n        self.name = name\n        self.age = age\n        self.city = city\n\n    def get_name(self):\n        return self.name\n\n    def get_age(self):\n        return self.age\n\n    def get_city(self):\n        return self.city", "category": "Python"}, {"instruction": "Create a Python program to calculate the mean, median, and mode of a given set of data.", "input": "data = [1, 4, 6, 3, 8, 9]", "output": "def calculate_mean(data):\n    '''Function to calculate mean of data'''\n    mean = sum(data) / len(data)\n    return mean\n\ndef calculate_median(data):\n    '''Function to calculate median of data'''\n    data.sort()\n    mid_index = len(data) // 2\n    median = data[mid_index]\n    return median\n\ndef calculate_mode(data):\n    '''Function to calculate mode of data'''\n    count_dict = {}\n    mode_list = []\n    # count the frequency of each element\n    for i in data:\n        count_dict[i] = data.count(i)\n    # find the maximum frequency\n    max_freq = max(count_dict.values())\n    # find all elements with maximum frequency\n    for k,v in count_dict.items():\n        if max_freq == v:\n            mode_list.append(k)\n    return mode_list\n\ndata = [1, 4, 6, 3, 8, 9]\nmean = calculate_mean(data)\nmedian = calculate_median(data)\nmode = calculate_mode(data)\n\nprint(f\"Mean of data is: {mean}\")\nprint(f\"Median of data is: {median}\")\nprint(f\"Mode of data is: {mode}\")", "category": "Python"}, {"instruction": "Create an algorithm to encourage work balance and productivity in remote work.", "input": "", "output": "One algorithm to encourage work balance and productivity in remote work is a scheduling algorithm that assigns workloads over manageable working windows with rest periods in between to allow for breaks and recovery. This algorithm can be designed to set maximum and minimum limit for each allocated workload and for duration for the rest periods, based on the individual's productive and rest needs. It can be used to monitor and manage workloads to ensure that workers do not experience fatigue or workload overload. Additionally, the algorithm can be designed to keep track of work performance over time to provide appropriate feedback and recommendations in order to help workers optimize their performance.", "category": "Python"}, {"instruction": "Write a function that sorts its arguments in descending order.", "input": "nums = [4, 8, 10, 3, 5]", "output": "def sort_descending(*args):\n    args = list(args)\n    for i in range(len(args)-1):\n        for j in range(i+1, len(args)):\n            if args[i] < args[j]:\n                args[i], args[j] = args[j], args[i]\n    return args", "category": "Python"}, {"instruction": "Given two strings, write a Python code to delete all occurrences of the second string from the first string.", "input": "str1 = \"abcabcabcabcabcabcabcabcabcabc\"\nstr2 = \"abc\"", "output": "def delete_occurrences(str1, str2):\n    return str1.replace(str2, '')", "category": "Python"}, {"instruction": "Write a function to find the index of the point that lies closest to the origin.", "input": "points = [[1,1],[-1,2],[3,-4]]", "output": "def closest_point(points):\n    min_dist = float('inf')\n    for i in range(len(points)):\n        dist = points[i][0]**2 + points[i][1]**2 \n        if dist < min_dist:\n            min_dist = dist\n            closest_index = i\n\n    return closest_index", "category": "Python"}, {"instruction": "Write a code to multiply two matrices, assuming the two matrices can be multiplied.", "input": "A = [[1, 2], [3, 4]] \nB = [[5, 6], [7, 8]]", "output": "def multiply_matrices(A, B):\n    if len(A[0]) != len(B):\n        raise ValueError(\"Matrices cannot be multiplied\")\n\n    rows_A = len(A)\n    columns_A = len(A[0])\n    rows_B = len(B)\n    columns_B = len(B[0])\n\n    result = [[0 for column in range(columns_B)] for row in range(rows_A)]\n\n    for row in range(rows_A):\n        for column in range(columns_B):\n            for k in range(columns_A):\n                result[row][column] += A[row][k] * B[k][column]\n\n    return result", "category": "Python"}, {"instruction": "Implement an algorithm to find the number of occurrences of a substring in a string.", "input": "string = \"This is a test\"\nsubstring = \"is\"", "output": "def count_substring(string, substring):\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n\n    return count\n\nresult = count_substring(string, substring)\nprint(result)\n\n# Output: 2", "category": "Python"}, {"instruction": "Suggest an improvement for the following piece of code", "input": "def addTwoNumbers(a, b):\n    return a + b", "output": "def addTwoNumbers(a, b):\n    try:\n        if type(a) == str or type(b) == str:\n            raise TypeError('Inputs must be of type int or float')\n        return a + b\n    except TypeError as e:\n        print(e)", "category": "Python"}, {"instruction": "Create a Python loop that will iterate through the following list and will print each item's value multiplied with 5.", "input": "numbers = [5, 10, 15, 20, 25]", "output": "for number in numbers:\n    print(number*5)", "category": "Python"}, {"instruction": "Create a script in Python which can generate random numbers in a given range.", "input": "", "output": "import random\n\ndef generate_random_number_in_range(min_value, max_value):\n    return random.randint(min_value, max_value)", "category": "Python"}, {"instruction": "You need to generate an array of strings of length 5 to 10 characters.", "input": "", "output": "import string\nimport random\n\ndef generate_string_array(length):\n    # This function will generate an array of strings\n    array_of_strings = []\n    for _ in range(length):\n        new_string = ''.join(random.choice(string.ascii_lowercase) for _ in range(random.randint(5,10)))\n        array_of_strings.append(new_string)\n    return array_of_strings", "category": "Python"}, {"instruction": "Create a function that takes in a positive integer up to 1000 and prints out its prime factorization.", "input": "num = 17", "output": "def prime_factorization(num):\n    '''This function takes in a positive integer and prints out its prime factorization.'''\n    factors = []\n    dividend = num\n    divisor = 2\n    while divisor <= dividend:\n        if dividend % divisor == 0:\n            factors.append(divisor)\n            dividend //= divisor\n        else:\n            divisor += 1\n    return factors", "category": "Python"}, {"instruction": "Write a function which will take an array as an argument and return an object with the keys being the elements of the array and the values being their counts.", "input": "my_array = [1, 2, 2, 3]", "output": "def count_elements(my_array):\n    '''This function takes an array as an argument and returns an object with the \n    keys being the elements of the array and the values being their counts.'''\n    counts = {}\n    for element in my_array:\n        if element in counts:\n            counts[element] += 1\n        else:\n            counts[element] = 1\n    return counts", "category": "Python"}, {"instruction": "Analyze a provided string of characters and return the number of occurrences of each character.", "input": "input_string = \"HelloWorld\"", "output": "def analyze_string(input_string):\n    '''This function analyzes a provided string of characters and \n    returns the number of occurrences of each character.'''\n    dict_count = {}\n    for char in input_string:\n        if char in dict_count:\n            dict_count[char] += 1\n        else:\n            dict_count[char] = 1\n    return dict_count", "category": "Python"}, {"instruction": "Create a function which will take in a string and returns a string in reverse order.", "input": "", "output": "def reverse_string(s):\n    '''This function takes in a string and returns a string in reverse order.'''\n    return s[::-1]", "category": "Python"}, {"instruction": "Create a function that takes in a number and returns all the prime factors.", "input": "num = 30", "output": "def prime_factorize(num):\n    '''This function takes in a number and returns all the prime factors.'''\n    primes = []\n    i = 2\n    while i * i <= num:\n        while num % i == 0:\n            primes.append(i)\n            num //= i\n        i += 1\n    if num > 1:\n        primes.append(num)\n    return primes", "category": "Python"}, {"instruction": "Create a function that takes in two variables and checks if they have the same type.", "input": "", "output": "def type_checker(x, y):\n    '''This function takes in two variables and checks if they have the same type.'''\n    return type(x) == type(y)", "category": "Python"}, {"instruction": "Create a class named Person.", "input": "", "output": "class Person:\n    '''This class represents a person with a name and age.'''\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "category": "Python"}, {"instruction": "Sort an array of integers in ascending order without using the built-in sort() function.", "input": "my_array = [1, 6, 9, 5, 8, 10, 4, 2, 7, 3]", "output": "def sort_ascending(my_array):\n    '''This function sorts an array of integers in ascending order without using the built-in sort() function.'''\n    n = len(my_array)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if my_array[j] > my_array[j+1]:\n                my_array[j], my_array[j+1] = my_array[j+1], my_array[j]\n    return my_array", "category": "Python"}, {"instruction": "Given the following Python code, generate a function that will print the first 5 elements of a list.", "input": "my_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "def print_first_five(my_list):\n    \"\"\"This function prints the first five elements of a list.\"\"\"\n    print(my_list[:5])", "category": "Python"}, {"instruction": "Implement a sorting algorithm in Python for the given data.", "input": "Data: [4, 2, 3, 8, 1]", "output": "def sort_data(data):\n    for i in range(len(data)):\n        min_index = i\n        for j in range(i+1, len(data)):\n            if data[min_index] > data[j]:\n                min_index = j\n        data[i], data[min_index] = data[min_index], data[i]\n       \n    return data", "category": "Python"}, {"instruction": "Create a Python class to represent a 3 x 3 matrix with variable values.", "input": "", "output": "class Matrix:\n    def __init__(self, a00=0, a01=0, a02=0, a10=0, a11=0, a12=0, a20=0, a21=0, a22=0):\n        self.matrix = [[a00, a01, a02],\n                        [a10, a11, a12],\n                        [a20, a21, a22]]\n    \n    def __str__(self):\n        return str(self.matrix)", "category": "Python"}, {"instruction": "Employ an algorithm to predict the customer churn rate.", "input": "A dataset containing customer data such as demographics, spending patterns, customer lifetime value and customer satisfaction.", "output": "A supervised learning algorithm can be employed to predict customer churn rate. This will involve training the algorithm on the customer dataset, by providing features such as customer age, spending pattern, customer lifetime value and customer satisfaction, as well as a target the algorithm should learn from. The trained model can then be used to predict customer churn rate.", "category": "Python"}, {"instruction": "Write a Python script to display the number of days between two given dates.", "input": "Date 1: 21 May 2020\nDate 2: 13 June 2020", "output": "import datetime \nstart_date = datetime.date(2020, 5, 21)\nend_date = datetime.date(2020, 6, 13)\ndelta = end_date - start_date\nprint(\"Number of days between two dates:\", delta.days)", "category": "Python"}, {"instruction": "Given two strings, find the longest common substring between them.", "input": "s1 = \"Hello, world!\"\ns2 = \"world, goodbye!\"", "output": "def longest_substring(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\ns1 = \"Hello, world!\"\ns2 = \"world, goodbye!\"\nprint(longest_substring(s1, s2))\n\n# Output: world", "category": "Python"}, {"instruction": "Develop a Chatbot that can respond to the user's queries about programming languages.", "input": "", "output": "def chatbot():\n    while True: \n        # User's query \n        query = input(\"What would you like to know about programming languages? \")\n\n        # Checking if query is relevant \n        if \"language\" in query:\n            # Provide response \n            print(\"There are many different programming languages, and these can range from low-level languages such as assembly, to high-level languages such as Python and Java.\")\n        else: \n            # Provide different response for irrelevant query \n            print(\"I'm sorry, I don't understand your query. Please ask me something else.\")", "category": "Python"}, {"instruction": "Create a data visualization comparing the population of California and New York.", "input": "", "output": "import matplotlib.pyplot as plt \n  \n# X axis values \nx = ['California', 'New York'] \n# Y axis values \npop = [39.56, 19.45] \n  \n# plotting bars  \nplt.bar(x, pop) \n  \n# Naming the x-axis \nplt.xlabel('State') \n# naming the y-axis \nplt.ylabel('Population') \n  \n# giving a title to the figure \nplt.title('California vs. New York Population') \n  \n# function to show the plot \nplt.show()", "category": "Python"}, {"instruction": "Using the input, create a function to calculate the average of the set.", "input": "nums = [1, 2, 3, 4, 5]", "output": "def avg_nums(nums):\n  total = 0\n  for num in nums:\n    total += num\n  avg = total / len(nums)\n  return avg\n\nprint(avg_nums([1, 2, 3, 4, 5]))\n\n# Output: 3.0", "category": "Python"}, {"instruction": "Create a method in Python to generate all the prime numbers between 1 and 100.", "input": "", "output": "def prime_generator(n):\n    primes = []\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\nprint(prime_generator(100))", "category": "Python"}, {"instruction": "Find the most common element in a list of strings.", "input": "mylist = [\"red\", \"blue\", \"red\", \"green\", \"green\", \"red\"]", "output": "def most_common_element(mylist):\n    count = 0\n    common = None\n\n    for i in mylist:\n        curr_count = mylist.count(i)\n        if curr_count > count:\n            common = i\n            count = curr_count\n    return common\n\nprint(most_common_element(mylist))\n\n#Output:\nred", "category": "Python"}, {"instruction": "Generate a correct Python code to turn a list of strings into a list of their lengths.", "input": "mylist = [\"hello\", \"world\", \"fire\", \"feline\"]", "output": "length_list = [len(x) for x in mylist]\n\n#Output:\nlength_list = [5, 5, 4, 6]", "category": "Python"}, {"instruction": "Manipulate a given list of strings to capitalize the first letter in each string.", "input": "mylist = [\"this\", \"is\", \"a\", \"list\"]", "output": "def capitalize(mylist):\n  new_list = []\n  \n  for item in mylist:\n    new_list.append(item.capitalize())\n  \n  return new_list\n\nprint(capitalize(mylist))\n\n#Output:\n['This', 'Is', 'A', 'List']", "category": "Python"}, {"instruction": "Create a function to print out words that include the letter \"e\" from a given list of strings.", "input": "mylist = [\"hello\", \"world\", \"fire\", \"feline\"]", "output": "def print_words_with_e(mylist):\n for word in mylist:\n  if 'e' in word:\n   print(word)\n\nprint_words_with_e(mylist)\n\n#Output: \nhello\nfire\nfeline", "category": "Python"}, {"instruction": "Generate a Python program to extract the digits of a given number and print the extracted digits in descending order.", "input": "num = 318", "output": "def extractDigits(num):\n    extracted_list = []\n    while num > 0:\n        extracted_list.append(num%10)\n        num //= 10\n    extracted_list.sort(reverse=True)\n    return extracted_list", "category": "Python"}, {"instruction": "Design a Python class to represent a rectangle with a length and width attribute.", "input": "", "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    \n    def get_area(self):\n        return self.length*self.width", "category": "Python"}, {"instruction": "Create a Python class to represent an employee record with fields name and salary.", "input": "", "output": "class Employee:\n    def __init__(self, name, salary):\n        self.name = name\n        self.salary = salary\n    \n    def get_name(self):\n        return self.name\n    \n    def get_salary(self):\n        return self.salary", "category": "Python"}, {"instruction": "Design a Python class to represent a 3 x 3 chess board.", "input": "", "output": "class ChessBoard:\n    def __init__(self):\n        self.board = [\n            [\"a1\",\"b1\",\"c1\"],\n            [\"a2\",\"b2\",\"c2\"],\n            [\"a3\",\"b3\",\"c3\"]\n        ]\n\n    def __str__(self):\n        board_string = \"\"\n        for row in self.board:\n            for col in row:\n                board_string += col + \" \"\n            board_string += \"\\n\"\n        return board_string", "category": "Python"}, {"instruction": "Create a Python class that encodes a given number using the Base58 algorithm.", "input": "number = 123456789", "output": "class Base58Encoder:\n    '''This class encodes numbers using the Base58 algorithm'''\n    def __init__(self,number):\n        self.number = number\n\n    def encode(self):\n        encoded = \"\" \n        alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    \n        while self.number > 0:\n            remainder = self.number % 58 \n            self.number = self.number // 58 \n            encoded = alphabet[remainder] + encoded \n    \n        return encoded", "category": "Python"}, {"instruction": "Create a Python program that compares two given lists to check if they have any common element.", "input": "list1 = [1,2,3]\nlist2 = [4,5,6]", "output": "def compare_lists(list1, list2):\n    '''This function checks if two lists have any common element'''\n    found_common = False\n    \n    for x in list1:\n        if x in list2:\n            found_common = True\n            break\n    return found_common", "category": "Python"}, {"instruction": "Create a Python script that shows the frequency of words in a given text.", "input": "text = \"Hello, this is a sentence.\"", "output": "def calc_word_freq(text):\n    '''This function calculates word frequency in a given text'''\n    word_freq = {}\n    for word in text.split():\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n\n    for word,freq in word_freq.items():\n        print(f'{word} - {freq}')", "category": "Python"}, {"instruction": "Create a wrapper class for a given API that takes string input and returns JSON output.", "input": "url = \"http://example.com/api\"", "output": "class APIWrapper:\n    '''This class wraps a given API and provides a convenient way to use it'''\n    def __init__(self,url):\n        self.url = url\n\n    def call_api(self, input):\n        params = {\"input\": input}\n        response = requests.get(self.url, params=params).json()\n        return response", "category": "Python"}, {"instruction": "Convert a given string to the CamelCase format.", "input": "string = \"this is a string\"", "output": "def to_camel_case(string):\n    '''This function converts a given string to the CamelCase format'''\n    res = \"\"\n    for word in string.split():\n        res += word[0].upper() + word[1:]\n    return res", "category": "Python"}, {"instruction": "Implement a function that calculates the sum of n numbers.", "input": "numbers = [1,2,3,4]", "output": "def sum_n_numbers(numbers):\n    '''This function returns the sum of n numbers'''\n    total = 0\n    for n in numbers:\n        total += n\n    return total", "category": "Python"}, {"instruction": "Read the given JSON data and return a list of all the keys.", "input": "{\n  \"name\": \"John\",\n  \"age\": 21,\n  \"isActive\": true\n}", "output": "def get_keys(data): \n  keys = []\n  for key in data:\n    keys.append(key)\n  return keys", "category": "Python"}, {"instruction": "You need to write an API request in Python to return JSON data from an API endpoint.", "input": "", "output": "import requests\n\nAPI_ENDPOINT = 'api.example.com/data'\n\nresponse = requests.get(API_ENDPOINT)\n\nif response.status_code == 200:\n    data = response.json()", "category": "Python"}, {"instruction": "You need to edit the given code for sorting. Make the array sort in descending order.", "input": "arr = [3, 5, 8, 9, 10]", "output": "def quick_sort(arr): \n    if len(arr) <= 1:\n        return arr\n  \n    pivot = arr[-1]\n    lesser_elements = [i for i in arr[:-1] if i <= pivot]\n    greater_elements = [i for i in arr[:-1] if i > pivot]\n    return quick_sort(greater_elements) + [pivot] + quick_sort(lesser_elements)", "category": "Python"}, {"instruction": "Create a function in Python to generate all possible strings of length k from given lowercase characters.", "input": "set = {'a', 'b', 'c'}\nk = 3", "output": "def generate_strings(set, k): \n\tstrings = [] \n\tn = len(set) \n\t\n\tdef generate_strings_recur(sub, count): \n\t\t\n\t\t# Base cases \n\t\tif count == 0 : \n\t\t\tstrings.append(sub) \n\t\t\treturn\n\t\t\n\t\tfor i in range(n): \n\t\t\t\n\t\t\t# Next character of string to be \n\t\t\t# formed \n\t\t\tnew_sub = sub + set[i] \n\t\t\t\n\t\t\t# Recursion call \n\t\t\tgenerate_strings_recur(new_sub, \n\t\t\t\t\t\t\t\tcount-1) \n\t\n\tcount = k \n\tsub = \"\" \n\t\n\t# Call to generate all strings of length k \n\tgenerate_strings_recur(sub, count) \n\t\n\treturn strings", "category": "Python"}, {"instruction": "Construct a list in Python that contains the names of the months in order, starting with January.", "input": "", "output": "months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]", "category": "Python"}, {"instruction": "Write a code to generate an array of 10 random integers in the range 0-99.", "input": "", "output": "import random\n \ndef random_int_array(num):\n    array = []\n    for i in range(num):\n        num = random.randint(0, 99)\n        array.append(num)\n    return array\n\nprint(random_int_array(10))", "category": "Python"}, {"instruction": "Create a function in Python that will print out a random word from a given list.", "input": "words_list = ['cat', 'dog', 'ball', 'toy']", "output": "import random\n\ndef random_word(words_list):\n    word = random.choice(words_list)\n    print(word)\n\nrandom_word(words_list)", "category": "Python"}, {"instruction": "Create a program in Python to generate a random number in the range from 0 to 10.", "input": "", "output": "import random \n\nprint(random.randint(0, 10))", "category": "Python"}, {"instruction": "Develop a function in Python to convert a temperature in Celsius to Fahrenheit.", "input": "Temperature in Celsius: 30", "output": "def celsius_to_fahrenheit(celsius):\n    return (celsius * 1.8) + 32\n\nprint(celsius_to_fahrenheit(30))", "category": "Python"}, {"instruction": "Generate all possible permutations of the characters in a given string", "input": "", "output": "def permutations(string):\n    \"\"\"\n    Function to generate all possible permutations of a given string\n    \"\"\"\n    if len(string) == 0:\n        return ['']\n    prev_list = permutations(string[1:len(string)])\n    next_list = []\n    for i in range(0,len(prev_list)):\n        for j in range(0,len(string)):\n            new_string = prev_list[i][0:j]+string[0]+prev_list[i][j:len(string)-1]\n            if new_string not in next_list:\n                next_list.append(new_string)\n    return next_list\n\nif __name__ == '__main__':\n    string = 'abcd'\n    print(permutations(string))\n    # should print ['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'dabc', 'dbac', 'bdac', 'bdca', 'dacb', 'dcab', 'dcba', 'adbc', 'dbca', 'dcab', 'dcba']", "category": "Python"}, {"instruction": "Merge two dictionaries into another dictionary", "input": "dict1 = {'a':1, 'b':2}\ndict2 = {'c':3, 'd':4}", "output": "def merge(dict1, dict2):\n    \"\"\"\n    Function to merge two dictionaries\n    \"\"\"\n    return {**dict1, **dict2}\n\nif __name__ == '__main__':\n    dict1 = {'a':1, 'b':2}\n    dict2 = {'c':3, 'd':4}\n    print(merge(dict1, dict2))\n    # should print {'a': 1, 'b': 2, 'c': 3, 'd': 4}", "category": "Python"}, {"instruction": "Build a neural network using Python", "input": "import numpy as np\n\n# Sample data\nX = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\ny = np.array([[0, 1, 1, 0]]).T", "output": "import keras\n\n# Create a neural network\nmodel = keras.Sequential([\n    keras.layers.Dense(2, activation='sigmoid'),\n    keras.layers.Dense(1, activation='sigmoid')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\n# Train the model\nmodel.fit(X, y, epochs=1000)", "category": "Python"}, {"instruction": "Calculate the area of a triangle given the coordinates of its three vertices.", "input": "x1 = 1\ny1 = 5\nx2 = 4\ny2 = 3\nx3 = 7\ny3 = 2", "output": "def calculate_triangle_area(x1, y1, x2, y2, x3, y3):\n    \"\"\"\n    Function to calculate the area of a triangle given the coordinates of its 3 vertices\n    \"\"\"\n    a = ((x2 - x1)**2 + (y2 - y1)**2)**0.5\n    b = ((x3 - x2)**2 + (y3 - y2)**2)**0.5\n    c = ((x1 - x3)**2 + (y1 - y3)**2)**0.5\n    s = (a + b + c) / 2\n    return ((s*(s-a)*(s-b)*(s-c))**0.5)\n    \nif __name__ == \"__main__\":\n    x1 = 1\n    y1 = 5\n    x2 = 4\n    y2 = 3\n    x3 = 7\n    y3 = 2\n    print(calculate_triangle_area(x1, y1, x2, y2, x3, y3))\n    # should print 4.24", "category": "Python"}, {"instruction": "Create a function that takes two lists and returns a dictionary with the elements of each list as keys.", "input": "list1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]", "output": "def create_dictionary(list1, list2):\n    \"\"\"\n    Function to create a dictionary with two lists\n    \"\"\"\n    return {list1[i]: list2[i] for i in range(len(list1))}\n    \nif __name__ == '__main__':\n    list1 = ['a', 'b', 'c']\n    list2 = [1, 2, 3]\n    print(create_dictionary(list1, list2))\n    # should print {'a': 1, 'b': 2, 'c': 3}", "category": "Python"}, {"instruction": "Make a 3D scatter chart with a dataset containing 5 rows and 3 columns.", "input": "import pandas as pd\n\n# Sample dataset\ndata = {'X': [1,2,3,4,5], 'Y': [6,7,8,9,10], 'Z': [11,12,13,14,15]}\ndf = pd.DataFrame(data)", "output": "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n\n# Create 3D scatter plot\nfig = plt.figure()\nax = Axes3D(fig)\nax.scatter(df['X'], df['Y'], df['Z'])\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('Z')\nplt.show()", "category": "Python"}, {"instruction": "Write a function that takes two strings and returns a boolean value indicating whether the two strings are anagrams or not.", "input": "", "output": "def anagram(s1, s2):\n    \n    # Strip whitespaces and convert to lowercase\n    s1 = s1.replace(' ', '').lower()\n    s2 = s2.replace(' ', '').lower()\n    \n    # Return boolean indicating anagram status\n    return sorted(s1) == sorted(s2)\n\nif __name__ == '__main__':\n    print(anagram('tea', 'eat')) \n    # should print True", "category": "Python"}, {"instruction": "Design a Python class to represent a user with fields name and age.", "input": "", "output": "class User:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age", "category": "Python"}, {"instruction": "Suggest a way to extract all the words from an HTML page using Python.", "input": "", "output": "Using the BeautifulSoup library, you can parse the HTML page and extract all the words using the \"get_text()\" method.", "category": "Python"}, {"instruction": "Create a class that has 3 methods. The first method should multiply two numbers, the second should add two numbers, and the third should calculate the modulus of two numbers.", "input": "", "output": "class Calculator:\n    def multiply(self, num1, num2):\n        return num1 * num2\n        \n    def add(self, num1, num2):\n        return num1 + num2\n        \n    def modulus(self, num1, num2):\n        return num1 % num2", "category": "Python"}, {"instruction": "Calculate the sum of squared differences between every number in a list and the mean of the list.", "input": "[1, 2, 3, 4]", "output": "def sum_squared_diffs(nums):\n    mean = sum(nums) / len(nums)\n    return sum((num - mean)**2 for num in nums)", "category": "Python"}, {"instruction": "Convert a given list to a dictionary with items as keys and their corresponding position in the list as values.", "input": "[\u2018a\u2019, \u2018b\u2019, \u2018c\u2019, \u2018d\u2019]", "output": "def list_to_dict(lst):\n    return {k: v for v, k in enumerate(lst)}", "category": "Python"}, {"instruction": "Using the provided data structure, create a class in Python to represent a car.", "input": "car = { \n    \"make\": \"Honda\", \n    \"model\": \"Civic\", \n    \"year\": 2011\n}", "output": "class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n    \n    def __str__(self):\n        return f\"{self.make} {self.model} ({self.year})\"", "category": "Python"}, {"instruction": "Write a Python program to generate a dictionary that contains a number (x) of random numbers.", "input": "x = 10", "output": "import random\n\nrandom_numbers = {} \n  \nfor i in range(x + 1): \n    n = random.randint(1, 50) \n      \n    random_numbers[i+1] = n\n      \nprint(random_numbers)", "category": "Python"}, {"instruction": "Refactor this code to use the built-in functions.", "input": "def find_odd(array):\n    is_odd = False\n    for element in array:\n        if element % 2 == 1:\n            is_odd = True\n            break\n    return is_odd", "output": "def find_odd(array):\n    return any(element % 2 == 1 for element in array)", "category": "Python"}, {"instruction": "Explain the differences between the list, set, and dictionary data structures in Python.", "input": "", "output": "List is an ordered sequence of data that can hold duplicate values. It is one of the most widely used data structures in Python, and is created by placing all the items in a square bracket and separating them by commas. Set is an unordered collection of data that cannot hold duplicate values. Set is created by enclosing all the items in a set() function. Dictionary is an unordered collection of key:value pairs. It is similar to real-life dictionaries in that it stores key-value pairs and retrieves values based on the associated key. It is created with curly brackets and key:value pairs, separated by commas.", "category": "Python"}, {"instruction": "Implement an efficient sorting algorithm in Python.", "input": "", "output": "def sort(arr): \n    if len(arr) == 0: \n        return [] \n    else: \n        pivot = arr[0] \n        lesser = sort([x for x in arr[1:] if x < pivot])\n        greater = sort([x for x in arr[1:] if x >= pivot])\n        return lesser + [pivot] + greater", "category": "Python"}, {"instruction": "Generate a list of words that contain the substring \"al\" using Python.", "input": "", "output": "words = [\"arrival\", \"essential\", \"animal\", \"pascal\", \"medieval\", \"festival\", \"final\", \"spirited\", \"downfall\", \"functional\", \"locational\", \"fundamental\"]", "category": "Python"}, {"instruction": "Create a program that implements a Stack (LIFO) using an array", "input": "", "output": "class Stack:\n    def __init__(self):\n        self.stack = []\n    \n    def push(self, item):\n        self.stack.append(item)\n    \n    def pop(self):\n        if self.is_empty():\n            return None\n        return self.stack.pop()\n    \n    def is_empty(self):\n        return len(self.stack) == 0", "category": "Python"}, {"instruction": "Create a program that adds two sets of numbers together.", "input": "Set 1: [1, 3, 5]\nSet 2: [2, 4, 6]", "output": "def add_sets(set1, set2):\n    result=[]\n    for i in range(max(len(set1),len(set2))):\n        if i < len(set1):\n            result.append(set1[i])\n        if i < len(set2):\n            result.append(set2[i])\n    return result", "category": "Python"}, {"instruction": "Design an algorithm to find the maximum number from a set of numbers", "input": "Set of numbers: [24, 5, 40, 15]", "output": "# Algorithm\n\n1. Initialize maximum as 0\n2. Iterate through each number in the set\n  a. if number > maximum:\n      i. set maximum as number\n3. Return maximum", "category": "Python"}, {"instruction": "Create a function that takes a string and returns the longest set of characters in descending order.", "input": "Hello World", "output": "def longest_substring(string):\n    longest = ''\n    current = ''\n    for i in range(len(string)):\n        if (i==0 or string[i] >= string[i-1]):\n            current += string[i]\n            if (len(current) > len(longest)):\n                longest = current\n        else:\n            current = string[i]\n    return longest", "category": "Python"}, {"instruction": "Compute the median of an array of integers in Python.", "input": "[1, 2, 3, 4, 5]", "output": "def median(arr): \n    arr.sort() \n    if (len(arr) % 2 != 0): \n        return arr[len(arr) // 2] \n    else: \n        return (arr[(len(arr) // 2) - 1] + arr[len(arr) // 2]) / 2.0", "category": "Python"}, {"instruction": "Create an algorithm in Python that sorts an array of n numbers using insertion sort.", "input": "[5, 3, 2, 4, 1]", "output": "def insert_sort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key", "category": "Python"}, {"instruction": "Create a Python function that takes one argument as an array of integers and returns the sum of all the integers.", "input": "[2, 3, 4, 5]", "output": "def sum_array(array):\n    res = 0\n    for i in array:\n        res += i\n    return res", "category": "Python"}, {"instruction": "Write a method to sum up two matrices", "input": "Matrix A: [[3, 5, 7],\n           [1, 6, 9]]\nMatrix B: [[4, 8, 2],\n           [3, 5, 7]]", "output": "def matrix_addition(A, B):\n    if len(A) != len(B) or len(A[0]) != len(B[0]):\n        return 'Matrices cannot be added!'\n    else:\n        result = [[0 for i in range(len(A[0]))] for j in range(len(A))]\n        for i in range(len(A)):\n            for j in range(len(A[0])):\n                result[i][j] = A[i][j] + B[i][j]\n        return result\n\nA = [[3, 5, 7], [1, 6, 9]]\nB = [[4, 8, 2], [3, 5, 7]]\n\nprint(matrix_addition(A, B)) # [[7, 13, 9], [4, 11, 16]]", "category": "Python"}, {"instruction": "How to generate a random string of a given length in Python?", "input": "Length: 10", "output": "import random\nimport string\n\nlength = 10\n\nx = ''.join(random.choices(string.ascii_letters + string.digits, k=length))\nprint(x) # 'sbMTWHmfrh'", "category": "Python"}, {"instruction": "What is the Python built-in function to swap two values?", "input": "", "output": "The Python built-in function to swap two values is the \"tuple unpacking\" operator (x, y = y, x). This allows you to swap two variables without having to use a temporary variable.", "category": "Python"}, {"instruction": "You need to write a function to find the sum of the squares of even numbers in a given list.", "input": "list_example = [2, 3, 4, 5]", "output": "def sum_of_even_squares(lst):\n    sum = 0\n    for elem in lst:\n        if elem % 2 == 0:\n            sum += elem**2\n    return sum\n\ntotal_sum = sum_of_even_squares(list_example) #total_sum is equal to", "category": "Python"}, {"instruction": "How can we trim a specified amount of characters from the beginning of a string in Python?", "input": "", "output": "def trim_string(string, n):\n    return string[n:]", "category": "Python"}, {"instruction": "How can we check if a given string is a valid IP address or not?", "input": "", "output": "import re\n\ndef isvalid_ip(string):\n    regex = r\"^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$\"\n    if re.search(regex, string):\n        return True \n    else: \n        return False", "category": "Python"}, {"instruction": "Reverse the order of a list without using the built-in reverse function.", "input": "", "output": "def reverse_list(lst):\n    rev = []\n    for x in lst:\n        rev.insert(0, x)\n    return rev", "category": "Python"}, {"instruction": "What is the syntax to create a list of numbers from 0 to n in Python?", "input": "", "output": "def create_list(n):\n    return [i for i in range(n+1)]", "category": "Python"}, {"instruction": "How can we remove all elements of a list that meet a certain condition?", "input": "", "output": "def remove_condition(lst, condition):\n    return [x for x in lst if not condition(x)]", "category": "Python"}, {"instruction": "Write code to generate a random six-character string that contains at least one lowercase letter and one number.", "input": "", "output": "import string\nimport random\n\ndef generate_code():\n    chars = string.ascii_lowercase + string.digits\n    return ''.join(random.choices(chars, k=6))", "category": "Python"}, {"instruction": "Using the provided objects and classes, write a code snippet in Python to implement polymorphism.", "input": "class Animal:\n  def sound(self):\n    pass\n\nclass Cat(Animal):\n  def sound(self):\n    print(\"Meow\")\n\nclass Dog(Animal):\n  def sound(self):\n    print(\"Bark\")", "output": "def make_sound(animal):\n  animal.sound()\n  \nmake_sound(Cat())  #Prints \"Meow\"\nmake_sound(Dog())  #Prints \"Bark\"", "category": "Python"}, {"instruction": "Calculate the number of days between two given dates in Python.", "input": "date1 = '2020-09-13'\ndate2 = '2021-02-06'", "output": "122", "category": "Python"}, {"instruction": "Explain in brief the concept of type casting in programming languages.", "input": "", "output": "Type casting is the process of converting one data type into another. It is generally used to convert values from one type to another in order to perform specific operations. In programming languages, type casting involves converting a value of one data type such as an integer or a string into a new data type such as a float or a boolean. Type casting ensures that the operations performed on the data are valid and helps reduce the chances of errors due to incompatibility of data types.", "category": "Python"}, {"instruction": "You need to create a function that takes a character as input and prints out all words from a given dictionary that start with the given character.", "input": "dictionary = [\"apple\", \"ball\", \"cat\", \"dog\"]\ncharacter = 'd'", "output": "def search_dictionary(dictionary, character):\n    result = []\n    for word in dictionary:\n        if word[0] == character:\n            result.append(word)\n    return result", "category": "Python"}, {"instruction": "Create a list comprehension for a given list that only contains odd numbers.", "input": "[1, 2, 3, 4, 5, 6, 7, 8]", "output": "odd_nums = [num for num in [1, 2, 3, 4, 5, 6, 7, 8] if num % 2 != 0 ]", "category": "Python"}, {"instruction": "Make a class that creates a list and has a maximum length.", "input": "", "output": "class LimitedList:\n    def __init__ (self, max_len):\n        self.max_len = max_len\n        self.items = []\n\n    def add(self, item):\n        if len(self.items) < self.max_len:\n            self.items.append(item)\n        else:\n            self.items.pop(0)\n            self.items.append(item)\n\n    def get_list(self):\n        return self.items", "category": "Python"}, {"instruction": "Describe the difference between the 'break' and 'continue' keywords in Python.", "input": "", "output": "The 'break' keyword is used to end a loop and exit the loop, whereas the 'continue' keyword is used to skip the current iteration and continue with the next iteration.", "category": "Python"}, {"instruction": "Describe how LSTMs are used to predict time-series data.", "input": "", "output": "Long Short-Term Memory (LSTM) networks are a type of Recurrent Neural Network (RNN) that enable the model to learn long-term dependencies by remembering information from long periods of time. LSTMs are commonly used to model time-series data such as stock prices, sensor readings, or other sequences of data points that contain predictable patterns. The LSTM predicts the next step in the sequential data using the past data points, and can be used to perform tasks such as forecasting future data points and anomaly detection.", "category": "Python"}, {"instruction": "Explain how to use functions in Python to perform operations on dictionaries.", "input": "", "output": "Python dictionaries are mappings between keys and values, allowing for efficient retrieval of values using its associated key. Various functions can be used to manipulate the data in the dictionaries, such as the get() function to retrieve the value for a given key, the clear() function to delete all values, the keys() and values() functions to retrieve all keys and values respectively, and the items() function to retrieve a list of key-value pairs.", "category": "Python"}, {"instruction": "Modify the program to take input from the user and create a two-dimensional array in Python.", "input": "", "output": "rows, cols = (int(x) for x in input(\"Enter size of 2D array: \").split())\narr = [[None for x in range(cols)] for y in range(rows)]\nfor i in range(rows):\n    for j in range(cols):\n        arr[i][j] = int(input(\"Enter element: \"))", "category": "Python"}, {"instruction": "Create a function in Python that takes in a string and returns a list of all unique characters in it.", "input": "string = \"banana\"", "output": "def unique_chars(string): \n    char_list = [] \n    for char in string: \n        if(char not in char_list): \n            char_list.append(char) \n    return char_list", "category": "Python"}, {"instruction": "Write a function that takes in two arrays of integers and returns the sum of the elements in both arrays.", "input": "array1 = [1, 2, 3] \narray2 = [4, 5, 6]", "output": "def sum_arrays(arr1, arr2):\n    sums = []\n    for i in range(len(arr1)):\n        sums.append(arr1[i] + arr2[i])\n    return sums", "category": "Python"}, {"instruction": "Go through the following code and create test cases for it.", "input": "def reverse_string(string):\n  rev_str = \"\"\n\n  # Loop through the string in reverse order\n  for i in range(len(string)-1, -1, -1):\n    rev_str += string[i]\n\n  return rev_str", "output": "import unittest\n\nclass ReverseStringTests(unittest.TestCase):\n    def test_reverse_string_with_single_character_string(self):\n        result = reverse_string(\"a\")\n        self.assertEqual(result, \"a\")\n\n    def test_reverse_string_with_even_length_string(self):\n        result = reverse_string(\"hello\")\n        self.assertEqual(result, \"olleh\")\n\n    def test_reverse_string_with_odd_length_string(self):\n        result = reverse_string(\"world\")\n        self.assertEqual(result, \"dlrow\")\n\n\nif __name__ == '_main_':\nunittest.main()", "category": "Python"}, {"instruction": "Create a function to evaluate a given expression written in infix notation.", "input": "exp = \"5 + (7 * 8) / 3\"", "output": "def eval_exp(exp): \n    stack = [] \n  \n    for char in exp: \n        if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or char in \"0123456789\": \n            stack.append(char)\n  \n        else: \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + char + val1))) \n  \n    return int(stack.pop()) \n\nprint(eval_exp(exp))", "category": "Python"}, {"instruction": "Write a function to simulate a dice roll.", "input": "", "output": "import random\n\ndef roll_dice():\n    return random.randint(1, 6)", "category": "Python"}, {"instruction": "Write a function to reverse an integer.", "input": "x = 12345", "output": "def reverse_integer(x):\n    rev_int = 0\n    while x > 0:\n        rev_int = rev_int * 10 + (x % 10)\n        x //= 10\n    return rev_int", "category": "Python"}, {"instruction": "Write a function that takes a two-dimensional array and returns its transpose.", "input": "arr = [[1,2,3], [4,5,6], [7,8,9]]", "output": "def transpose(arr):\n    transpose_arr = [[0] *len(arr) for _ in range(len(arr[0]))]\n    for row in range(len(arr)):\n        for col in range(len(arr[0])):\n            transpose_arr[col][row] = arr[row][col]\n    return transpose_arr", "category": "Python"}, {"instruction": "Write a Python program to generate a 3x3 Identity matrix", "input": "", "output": "def generate_identity_matrix():\n    matrix = [[0, 0, 0],\n              [0, 0, 0],\n              [0, 0, 0]]\n\n    for i in range(len(matrix)):\n        for j in range(len(matrix)):\n            if i == j:\n                matrix[i][j] = 1\n            else:\n                matrix[i][j] = 0\n    \n    return matrix", "category": "Python"}, {"instruction": "Edit the code to produce the output of the following matrix multiplication", "input": "X = [[2, 3, 9],\n     [8, 7, 6],\n     [1, 6, 4]]\nY = [[9, 4, 5],\n     [7, 3, 3],\n     [2, 1, 5]]", "output": "X = [[2, 3, 9],\n     [8, 7, 6],\n     [1, 6, 4]]\nY = [[9, 4, 5],\n     [7, 3, 3],\n     [2, 1, 5]]\n\ndef mat_mult(X, Y):\n    result = [[0, 0, 0],\n              [0, 0, 0],\n              [0, 0, 0]]\n    for i in range(len(X)):\n        for j in range(len(Y[0])):\n            for k in range(len(Y)):\n                result[i][j] += X[i][k] * Y[k][j]\n    return result", "category": "Python"}, {"instruction": "Remove all duplicates from this list using Python", "input": "list=[5,5,5,7,8,8,9]", "output": "list=[5,7,8,9]\n\nlist = list(dict.fromkeys(list))", "category": "Python"}, {"instruction": "Generate code to find the maximum element from a given list", "input": "list=[-2, 12, 3, 0, -5]", "output": "def find_max(list):\n    max_element = float('-inf')\n    for element in list:\n        if element > max_element:\n            max_element = element\n    return max_element\n\nprint(find_max(list)) # Prints 12", "category": "Python"}, {"instruction": "Use a for loop to add up all odd elements in a list", "input": "list=[4,5,7,9,11,3]", "output": "odd_total = 0\nfor element in list:\n    if element % 2 != 0:\n        odd_total += element\nprint(odd_total) # Prints 25", "category": "Python"}, {"instruction": "Write a basic python program to accept a string input, use it to create a dictionary and sort it by alphabetical order", "input": "ToBeOrNotToBe", "output": "inp =raw_input(\"Enter String:\")\nmy_dict = {}\nfor character in inp:\n     if character not in my_dict:\n         my_dict[character] = 1\n     else:\n         my_dict[character] += 1\n\nsorted_order = sorted(my_dict.items(), key=lambda x: x[0])\n\nprint(\"Sorted Dictionary\")\nfor character in sorted_order:\n    print(\"{} : {}\".format(character[0], character[1]))", "category": "Python"}, {"instruction": "Define a class in Python that takes a string and returns the length of the string.", "input": "", "output": "class StringLength:\n  def __init__(self, string):\n    self.string = string\n\n  def getLength(self):\n    return len(self.string)", "category": "Python"}, {"instruction": "Write a python code to concatenate two strings and reverse the result.", "input": "string1 = \"Hello\"\nstring2 = \"World\"", "output": "res = string1+string2\nres = res[::-1] \nprint(res)", "category": "Python"}, {"instruction": "You need to convert any given number to its octal representation.", "input": "", "output": "def octal_representation(num):\n    output = \"\"\n    while num > 0:\n        output = str(num % 8) + output\n        num //= 8\n    return output", "category": "Python"}, {"instruction": "You need to remove duplicates from a list while preserving the order of the items.", "input": "", "output": "def remove_duplicates(list):\n    output = []\n    seen = set()\n    for i in list:\n        if i not in seen:\n            seen.add(i)\n            output.append(i)\n        return output", "category": "Python"}, {"instruction": "Create a Python class for a student that holds their name, age and grade.", "input": "", "output": "class Student:\n def __init__(self, name, age, grade):\n  self.name = name\n  self.age = age\n  self.grade = grade\n\ndef get_student_info(self):\n  return (f\"{self.name}, {self.age}, {self.grade}\")", "category": "Python"}, {"instruction": "Write a function to find the highest prime number that can be divided by a given number.", "input": "", "output": "def highest_prime(num):\n    highest_factor = 0\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0 and is_prime(i):\n            highest_factor = i\n    return highest_factor\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Create a function that takes two arguments, a number and a list, and returns a list with all elements from the original list multiplied by the number.", "input": "num = 2\nlst = [1, 2, 3, 4]", "output": "# function to multiply each element of list by number \ndef lst_multiply(num, lst):\n    new_lst = []\n    for num in lst:\n        new_lst.append(num * num)\n    return new_lst\n\n# main program\nprint(lst_multiply(num, lst))", "category": "Python"}, {"instruction": "Create a method to filter an array and return all elements that are greater than or equal to 10.", "input": "arr = [1, 2, 6, 10, 14, 18]", "output": "# method to filter an array \ndef filter(arr):\n    new_arr = []\n    for element in arr:\n        if element >= 10:\n            new_arr.append(element)\n    return new_arr\n\n# main program\nprint(filter(arr))", "category": "Python"}, {"instruction": "Write code to implement the Binary Search algorithm in Python.", "input": "", "output": "def binary_search(arr, target):\n    low, high = 0, len(arr) - 1\n\n    while low <= high:\n        mid = low + (high - low)//2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1  # not found", "category": "Python"}, {"instruction": "Create a webhook in Python to listen to webhook requests.", "input": "", "output": "import time\n\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/webhook', methods=['POST'])\ndef webhook():\n    data = request.get_json()\n    print(data)\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)", "category": "Python"}, {"instruction": "Compute the maximum value of a List in Python.", "input": "", "output": "max_val = max(my_list)  # Computes the maximum of the list", "category": "Python"}, {"instruction": "Change the provided dataset into a 3-dimensional tensor, in order to feed it into a Convolutional Neural Network model.", "input": "Dataset containing 10,000 grayscale images of size 32x32", "output": "import numpy as np \n  \n# Creating the 3D tensor \nX = np.zeros((10000, 32, 32)) \n  \n# Initializing it with the grayscale images \nX[:,:,:] = dataset", "category": "Python"}, {"instruction": "Write a Python program to read two numbers and print their multiplication?", "input": "Number1: 5\nNumber2: 10", "output": "#Take the two numbers from the user\nnumber1 = int(input('Number1:  '))\nnumber2 = int(input('Number2: '))\n\n#Multiply and print the result\nresult = number1 * number2\nprint('The result is:', result)\n\nOutput:\nThe result is: 50", "category": "Python"}, {"instruction": "Create a function which accepts a string and prints out each word with the count of its characters.", "input": "String: \"Hello World\"", "output": "def print_word_lengths(input_string):\n  #Split the string into individual words\n  words = input_string.split()\n  \n  #Iterate over each word\n  for word in words:\n    #Print the word and the length of the word\n    print('{}: {}'.format(word, len(word)))\n\nprint_word_lengths('Hello World')\n\nOutput:\nHello: 5\nWorld: 5", "category": "Python"}, {"instruction": "Create a program that extracts the first and last names from a string.", "input": "Full Name: \"Barack Obama\"", "output": "def extract_names(full_name):\n  #Split the name into separate words\n  name_parts = full_name.split()\n  \n  #Check if the name has multiple words\n  if len(name_parts) == 1:\n    return None\n  \n  #Extract the first and last names\n  first_name = name_parts[0]\n  last_name = name_parts[-1]\n  \n  #Return the first and last names\n  return first_name, last_name\n\nprint(extract_names(\"Barack Obama\"))\n\nOutput:\n('Barack', 'Obama')", "category": "Python"}, {"instruction": "Design a function to validate a phone number.", "input": "Phone Number: 212-555-0000", "output": "def check_phone_number(phone_number):\n  #Remove any non-numeric characters\n  phone_number = phone_number.replace(\"-\", \"\")\n  phone_number = phone_number.replace(\" \", \"\")\n\n  #Check if the phone number is 10 digits long\n  if (len(phone_number) != 10):\n    return False\n\n  #Check each digit is a number\n  for digit in phone_number:\n    if not digit.isdigit():\n      return False\n\n  #Check the area code is valid\n  area_code = phone_number[0:3]\n  valid_area_codes = [\"201\", \"212\", \"203\", \"202\", \"205\"]\n  if area_code not in valid_area_codes:\n    return False\n\n  #All tests passed\n  return True\n\nprint(check_phone_number('212-555-0000'))\n\nOutput:\nTrue", "category": "Python"}, {"instruction": "Design a Python class to represent geometric shapes.", "input": "", "output": "class GeometricShape:\n\n    def __init__(self, sides):\n        self.sides = sides\n\n    def area(self):\n        if self.sides == 3:\n            return ((self.sides[0] + self.sides[1] + self.sides[2]) / 2)\n        else:\n            return 0", "category": "Python"}, {"instruction": "Create a function in Julia to calculate the Median of an array.", "input": "arr = [1, 2, 2, 3, 6, 8]", "output": "function median(arr)\n  sorted_arr = sort(arr)\n  n = length(sorted_arr)\n  if n % 2 == 0\n      return (sorted_arr[n \u00f7 2] + sorted_arr[(n \u00f7 2) + 1]) / 2\n  else\n      return sorted_arr[(n + 1) \u00f7 2]\n  end\nend", "category": "Python"}, {"instruction": "Create a barplot using Matplotlib to display the given data.", "input": "Data: [2, 3, 5, 7, 9]", "output": "import matplotlib.pyplot as plt \n  \n# Creating the data \ndata = [2, 3, 5, 7, 9]  \n  \n# Creating the figure and axis \nfig, ax = plt.subplots()  \n  \n# plotting the barplot \nax.bar(range(len(data)), data)  \n  \n# show the plot \nplt.show()", "category": "Python"}, {"instruction": "Make a POST request to the same server and download the response content", "input": "", "output": "import requests\n \nurl = 'http://example.com/'\ndata = {'key': 'value'}\n \nresponse = requests.post(url, data=data)\n \n#Download response content\nwith open('response_content.txt', 'wb') as f:\n    f.write(response.content)", "category": "Python"}, {"instruction": "Create an algorithm to implement a binary search.", "input": "", "output": "def binary_search(arr, x): \n  \n    # find the leftmost and rightmost point \n    l = 0\n    r = len(arr) - 1\n      \n    while l <= r: \n  \n        mid = l + (r - l)//2\n  \n        # if element is present at the middle  \n        if arr[mid] == x: \n            return mid \n  \n        # if element is smaller than mid,  \n        # then it can only be present  \n        # in left subarray \n        elif arr[mid] < x: \n            l = mid + 1\n  \n        # else the element can only  \n        # be present in right subarray \n        else: \n            r = mid - 1\n      \n    # if we reach here,  \n    # then the element was not present \n    return -1", "category": "Python"}, {"instruction": "Generate the reCAPTCHA API key.", "input": "", "output": "Go to the Google reCAPTCHA admin page, sign up for an API key, and register the domain for your website. Once registered, you will receive a code for your API key.", "category": "Python"}, {"instruction": "Create a function to calculate the total cost of a shopping cart, given the price and the quantity of each item.", "input": "Item \tPrice \tQuantity\nApple \t2$ \t\t2\nOrange \t3$ \t\t5\nBanana \t1$ \t\t1", "output": "def total_cost(items):\n  total = 0\n  for item in items:\n    total += item['price'] * item['quantity']\n  return total\n  \nitems = [\n  { 'item': 'Apple', 'price': 2, 'quantity': 2 },\n  { 'item': 'Orange', 'price': 3, 'quantity': 5 },\n  { 'item': 'Banana', 'price': 1, 'quantity': 1 }\n]\ntotal = total_cost(items)\nprint(total)", "category": "Python"}, {"instruction": "You are given an array of strings. Write a Python script to sort the array in alphabetical order.", "input": "\"ball\", \"cat\", \"dog\", \"apple\"", "output": "arr = [\"ball\", \"cat\", \"dog\", \"apple\"]\narr.sort()\nprint(arr)", "category": "Python"}, {"instruction": "You are given an array of numbers. Create a function to check if the array contains duplicate values.", "input": "11, 15, 40, 14, 11", "output": "def contains_duplicates(arr):\n  unique_elements = set(arr)\n  if len(arr) != len(unique_elements):\n    return True\n  else:\n    return False", "category": "Python"}, {"instruction": "Make a function that accepts 2 numbers and return the largest one.", "input": "2, 3", "output": "def largest(x, y):\n  if (x > y):\n    return x\n  else:\n    return y", "category": "Python"}, {"instruction": "Write a Python program to check if a string contains any special characters.", "input": "CS 1501", "output": "def has_special_characters(s):\n  special_characters = '!@#$%^&*()_+-=[]{};:,.<>/?'\n  for char in special_characters:\n    if char in s:\n      return True\n  return False", "category": "Python"}, {"instruction": "Create a function in Python that takes two parameters and calculates the Employee Bonus depending on the hours worked.", "input": "hours - 14\nhourly_rate - 17", "output": "def employee_bonus(hours, hourly_rate):\n    if hours <= 0:\n        return 0\n\n    # Calculate the total amount\n    total_amount = hours * hourly_rate\n    \n    # Calculate the bonus with 10%\n    bonus = total_amount * 0.1\n\n    return bonus", "category": "Python"}, {"instruction": "Create optional command line parameters in a Python script.", "input": "", "output": "import argparse\n\nparser = argparse.ArgumentParser()\nparser.add_argument('-i', '--inputfile', type=str,help='input file')\nparser.add_argument('-o', '--outputfile', type=str,help='output file')\nparser.add_argument('-d', '--debug', action='store_true',help='enable debugging')\nargs = parser.parse_args()", "category": "Python"}, {"instruction": "Create an Angular app with a login page and registration page.", "input": "", "output": "The Angular app will include a login and a registration page. The login page will have an input field for the user to enter their username and password. The registration page will have input fields for the user to enter their username, password, and email address. The app will also contain a service to store the user registration data and a guard to protect the registration page from unauthorized access.", "category": "Python"}, {"instruction": "Train a recursive neural network to classify whether a sentence is positive or negative.", "input": "", "output": "import tensorflow as tf\n\n# Setup the RNN\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(input_dim=vocab_size, output_dim=embedding_dim),\n    tf.keras.layers.GRU(32, return_sequences=True),\n    tf.keras.layers.Dense(2, activation='softmax')\n])\n\n# Compile and fit\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n              \nmodel.fit(x_train, y_train, epochs=5)", "category": "Python"}, {"instruction": "Compute the entropy of a given probability distribution.", "input": "Distribution: [2/9, 3/9, 4/9]", "output": "import math\n\n# Calculates the entropy of the given distribution\nentropy = -sum([p * math.log2(p) for p in distribution])", "category": "Python"}, {"instruction": "Find out the number of occurrences of a vowels a, e, i, o, or u in the given string.", "input": "String: The quick brown fox", "output": "var count = 0\nlet vowels = \"aeiou\"\nfor c in string {\n  if vowels.contains(c) {\n    count += 1\n  }\n}\nprint(count)\n// Output: 4", "category": "Python"}, {"instruction": "You need to create a Python function to remove duplicate elements from a given list.", "input": "[11,46,70,23, 11, 33, 46]", "output": "def remove_duplicates(numbers):\n    s = set()\n    for n in numbers:\n        if n not in s:\n            s.add(n)\n    return list(s)", "category": "Python"}, {"instruction": "Analyze this text using spaCy.", "input": "Text: Modern technologies are revolutionizing the way we live and work.", "output": "import spacy\n\nnlp = spacy.load(\"en_core_web_sm\")\n\ndoc = nlp(\"Modern technologies are revolutionizing the way we live and work.\")\n\nfor token in doc:\n    print(token.text, token.lemma_, token.pos_, token.tag_, token.dep_,\n            token.shape_, token.is_alpha, token.is_stop)", "category": "Python"}, {"instruction": "Preprocess this data using Python.", "input": "Data:\n[\n  {\n    \"A\": 1,\n    \"B\": 2,\n    \"C\": 3\n  },\n  {\n    \"A\": 2,\n    \"B\": 3,\n    \"C\": 5\n  },\n  {\n    \"A\": 4,\n    \"B\": 1,\n    \"C\": 9\n  }\n]", "output": "import pandas as pd \n\ndata = [\n  {\n    \"A\": 1,\n    \"B\": 2,\n    \"C\": 3\n  },\n  {\n    \"A\": 2,\n    \"B\": 3,\n    \"C\": 5\n  },\n  {\n    \"A\": 4,\n    \"B\": 1,\n    \"C\": 9\n  }\n]\n\ndf = pd.DataFrame(data)\n\npreprocessed_data = df.apply(lambda x: (x - x.mean()) / x.std())", "category": "Python"}, {"instruction": "Write an if-else statement in Python to print \"Grater than 10\" if a number is greater than 10, and \"Less than 10\" if a number is less than 10.", "input": "Number: 8", "output": "if 8 > 10:\n  print(\"Grater than 10\")\nelse:\n  print(\"Less than 10\")", "category": "Python"}, {"instruction": "Convert this Ruby code to Python.", "input": "def add_two_numbers(a, b)\n  a + b \nend", "output": "def add_two_numbers(a, b):\n  return a + b", "category": "Python"}, {"instruction": "Write an algorithm to insert a new element in a given sorted array.", "input": "", "output": "def insert(arr, num): \n    # start from the rightmost element\n    i = len(arr) - 1\n    while ( i >= 0 and arr[i] > num):\n        arr[i+1] = arr[i]\n        i -= 1\n  \n    arr[i+1] = num", "category": "Python"}, {"instruction": "Write a Python script to take two list and output the common elements of the given lists.", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]", "output": "def findCommon(list1,list2): \n    common = [] \n      \n    # traverse through elements of list1 \n    for x in list1: \n          \n        # traverse through elements of list2 \n        for y in list2: \n              \n            # if common element is found append to list \n            if x == y: \n                common.append(x) \n    return common", "category": "Python"}, {"instruction": "Get a user input and check if the input is a palindrome.", "input": "", "output": "def is_palindrome(user_input):\n    rev_input = user_input[::-1]\n    \n    if (rev_input == user_input):\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Write an algorithm to find the smallest missing positive number from a given list of integers.", "input": "[3, 4, -10, -2, 9, 8, 1]", "output": "def findSmallestMissing(arr):\n    smallest_missing = 1\n    \n    for num in arr:\n        if (num == smallest_missing):\n           smallest_missing += 1\n    \n    return smallest_missing", "category": "Python"}, {"instruction": "Create a function that generates a series of Fibonacci numbers up to a certain number of items.", "input": "", "output": "def generate_fibonacci(n):\n    \"\"\"\n    Generates a series of Fibonacci numbers up to a certain number of items.\n    \"\"\"\n    fib = [0, 1]\n \n    if n < 2:\n        return fib[:n]\n \n    for i in range(2, n):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib", "category": "Python"}, {"instruction": "Write a python program to get all possible permutations of a given set of characters.", "input": "", "output": "def get_permutations(s):\n  \"\"\"Get all possible permutations of a given set of characters.\"\"\"\n  n = len(s)\n  result = []\n  def recurse(i):\n    if i == n:\n      result.append(''.join(s))\n      return\n    for j in range(i, n):\n      s[i], s[j] = s[j], s[i]\n      recurse(i+1) # recurse over each character\n      s[i], s[j] = s[j], s[i] # backtrack\n  recurse(0)\n  return result", "category": "Python"}, {"instruction": "Using inspect module to count the number of lines of code in a module.", "input": "", "output": "def get_module_lines(module):\n    \"\"\"\n    Returns the number of lines of code in a given module,\n    using the inspect module.\n    \"\"\"\n    import inspect\n    sourcelines = inspect.getsourcelines(module)\n    line_count = len(sourcelines[0])\n    return line_count", "category": "Python"}, {"instruction": "Given a string, find the longest palindrome within it.", "input": "string = \"ananabay\"", "output": "def longest_palindrome(string):\n  \"\"\"\n  Find the longest palindrome within a given string\n  \"\"\"\n\n  start, end, max_len = 0, 0, 0\n  for i in range(len(string)):\n      # Odd length of palindrome\n      left, right = i, i\n      while left >= 0 and right < len(string) and string[left] == string[right]:\n          length = right - left + 1\n          if max_len < length:\n              max_len = length\n              start = left\n              end = right\n          left -= 1\n          right += 1\n\n\n      # Even length of palindrome\n      left, right = i, i+1\n      while left >= 0 and right < len(string) and string[left] == string[right]:\n          length = right - left + 1\n          if max_len < length:\n              max_len = length\n              start = left\n              end = right\n          left -= 1\n          right += 1\n\n  return string[start:end+1]", "category": "Python"}, {"instruction": "Create a function to print out a numbered list of items from an array.", "input": "array = [\u2018apple\u2019, \u2018banana\u2019, \u2018orange\u2019]", "output": "def print_numbered_list(array):\n  \"\"\"Prints out a numbered list based on an array of items.\"\"\"\n  for i, item in enumerate(array, start=1):\n    print(f\"{i}. {item}\")", "category": "Python"}, {"instruction": "Construct a function that prints the first n terms in a Fibonacci sequence.", "input": "", "output": "def print_fibonacci(n):\n    fib1 = 0\n    fib2 = 1\n    for i in range(n):\n        print(fib1)\n        temp = fib1\n        fib1 = fib2\n        fib2 = temp + fib2", "category": "Python"}, {"instruction": "Can you write a function that returns the sum of the elements of a given array?", "input": "arr = [2, 3, 4, 5]", "output": "def sum_array(arr):\n    sum = 0\n    for ele in arr:\n        sum += ele\n    return sum", "category": "Python"}, {"instruction": "You need to create a Python class to represent a 3-dimensional point.", "input": "", "output": "class Point3D:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __str__(self):\n        return '({}, {}, {})'.format(self.x, self.y, self.z)", "category": "Python"}, {"instruction": "You need to create a Python function to detect if a given number is prime or not.", "input": "", "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "You need to write a Python function to find all substrings of a given string in order.", "input": "string = 'hello'", "output": "def find_all_substrings(string):\n    substrings = []\n    for i in range(len(string)):\n        for j in range(len(string)+1):\n            substrings.append(string[i:j])\n    return substrings", "category": "Python"}, {"instruction": "Create a Python code to find all uncommon characters between two strings.", "input": "string1 = 'green', string2 = 'blue'", "output": "def uncommon_chars(string1, string2):\n    uncommon = []\n    for char in string1:\n        if char not in string2:\n            uncommon.append(char)\n    for char in string2:\n        if char not in string1:\n            uncommon.append(char)\n    return uncommon", "category": "Python"}, {"instruction": "Generate a Python code to convert list of strings to list of integers.", "input": "strings = ['23', '45', '7', '67']", "output": "def convert_to_ints(strings):\n    ints = []\n    for s in strings:\n        ints.append(int(s))\n    return ints", "category": "Python"}, {"instruction": "Create a Python code that takes in two strings and finds all common characters from the strings.", "input": "string1 = 'abcd', string2 = 'acde'", "output": "def common_chars(string1, string2):\n    common = []\n    for char in string1:\n        if char in string2:\n            common.append(char)\n    return common", "category": "Python"}, {"instruction": "Create a Python function to sort a list of strings based on a given alphabetical order.", "input": "alphabet = 'bdhajfz', strings = ['bad', 'hfja', 'abd', 'zaj']", "output": "def sort_string_list(strings, alphabet):\n    sorted_list = sorted(strings, key=lambda x:(alphabet.index(x[0]),x))\n    return sorted_list", "category": "Python"}, {"instruction": "You are provided with a list of integers and a given number. Generate Python code that detects if the given number is in the list or not.", "input": "list = [11,22,33,44,77], number = 44", "output": "def check_number(list, number):\n    if number in list:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Develop a Python3 program to extract the words of length 3 from a given sentence.", "input": "\"The quick brown fox jumped over the lazy dog\"", "output": "def extract_words(s):   \n    words = s.split()\n    length_3_words = []\n    for word in words:\n        if len(word) == 3:\n            length_3_words.append(word)\n    return length_3_words\n\ns = \"The quick brown fox jumped over the lazy dog\"\nprint(extract_words(s))", "category": "Python"}, {"instruction": "Create a python list with the following numbers: 27, 44, 28, 34", "input": "", "output": "my_list = [27, 44, 28, 34]", "category": "Python"}, {"instruction": "Edit the Python code block below to print the text in reverse.", "input": "word = \"Hello\"\nprint (word)", "output": "word = \"Hello\"\nprint (word[::-1])", "category": "Python"}, {"instruction": "Using the given list, create a code that will generate a unique list of numbers", "input": "x = [4, 10, 16, 22, 28, 34]", "output": "new_list = []\nfor num in x:\n    if num not in new_list:\n        new_list.append(num)\nprint(new_list)", "category": "Python"}, {"instruction": "Write a script in Python that will find the average of a list of numbers.", "input": "[2.3, 6.7, 8.2, 4.3, 9.1]", "output": "import numpy as np\n\ndata = [2.3, 6.7, 8.2, 4.3, 9.1] \navg = np.mean(data)\nprint(\"Average of the list of numbers is:\", avg)", "category": "Python"}, {"instruction": "Write a Python program that uses recursion to calculate the Fibonacci sequence up to the 25th number.", "input": "", "output": "def Fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return Fibonacci(n-1) + Fibonacci(n-2)\n\nfibonacci_list = []\n\nfor i in range(26):\n    fibonacci_list.append(Fibonacci(i))\n\nprint(fibonacci_list)", "category": "Python"}, {"instruction": "Create a content aggregator application in Python.", "input": "", "output": "import requests\nimport json \n\ndef content_aggregator():\n    api_url = \"https://www.example.com/api/\"\n    response = requests.get(api_url)\n    response_data = json.loads(response.text)\n    for item in response_data:\n        print(item)\n\nif __name__ == '__main__':\n    content_aggregator()", "category": "Python"}, {"instruction": "Update the existing code to have a shape of (3,3) when an array of size (2,2) is reshaped.", "input": "import numpy as np\n\narr = np.arange(4).reshape(2,2)", "output": "import numpy as np\n\narr = np.arange(9).reshape(3,3)", "category": "Python"}, {"instruction": "Write a code that can generate a list of random numbers between 0 to 100", "input": "", "output": "import random\n\n# Function to generate a list of random numbers between 0 to 100\ndef generate_random_number_list():\n  random_number_list = []\n  for i in range(0,101):\n    random_number_list.append(random.randint(0,100))\n  return random_number_list\n\n# call the function\nrandom_number_list = generate_random_number_list()\nprint(random_number_list)", "category": "Python"}, {"instruction": "Convert the list of numbers below to a numpy array.", "input": "[2, 4, 6, 8, 10]", "output": "import numpy as np \n\narr = np.array([2,4,6,8,10])", "category": "Python"}, {"instruction": "Edit the following code such that the output is reversed", "input": "def reverse_string(s):\n    n = len(s)\n    result = \"\"\n    for i in range(n):\n        result += s[i]\n    return result", "output": "def reverse_string(s):\n    n = len(s)\n    result = \"\"\n    for i in range(n-1, -1, -1):\n        result += s[i]\n    return result", "category": "Python"}, {"instruction": "Create a program in Python to compute the sum of two numbers.", "input": "", "output": "def add_numbers(num1, num2):\n  sum_nums = num1 + num2\n  return sum_nums", "category": "Python"}, {"instruction": "Create an array of 10 randomly generated integers between 0 and 10.", "input": "", "output": "import random\n\ndef generate_random_array():\n    return [random.randint(0, 10) for _ in range(10)]", "category": "Python"}, {"instruction": "Write a Python program to verify if an integer is odd or even.", "input": "num = 8", "output": "False", "category": "Python"}, {"instruction": "Find the index of the maximum value in an array of numbers in Python.", "input": "[1, 6, 2, 8, 4, 9]", "output": "list = [1, 6, 2, 8, 4, 9]\nmax_index = list.index(max(list))\nprint(max_index) # Output: 4", "category": "Python"}, {"instruction": "Write a Python code to generate a random password of 12 characters containing a mix of numbers, alphabets, and special characters.", "input": "", "output": "password = DX$bf7uj3@q3", "category": "Python"}, {"instruction": "Implement a function to print the Fibonacci series up to the nth term.", "input": "", "output": "def FibonacciSeries(n): \n    a = 0\n    b = 1 \n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "List the advantages of using a linked list over an array.", "input": "", "output": "The advantages of using a linked list over an array include:\n\n1. Insertion and deletion operations are faster since individual elements do not have to be rearranged in memory.\n2. Elements can be stored in any order, as opposed to an array which requires elements to be stored contiguously.\n3. Linked lists have an arbitrary number of elements, unlike an array which has a fixed size. \n4. Linked lists do not require the memory allocation of an entire block at once, making it suitable for dynamic memory allocation.", "category": "Python"}, {"instruction": "Parse the following HTML code and store the data in a Python dictionary.", "input": "<div><h2>Header</h2><p>Text</p></div>", "output": "data = {\n \"header\": \"Header\",\n \"text\": \"Text\"\n}", "category": "Python"}, {"instruction": "Explain the main difference between an array and a linked list.", "input": "", "output": "The main difference between an array and a linked list is that an array stores data items contiguously in memory, while a linked list stores them in individual elements linked together with references. An array can be accessed faster than a linked list since elements can be accessed directly by their index. On another hand, inserting and deleting elements from a linked list is faster since elements don't have to be rearranged in memory like in an array. Additionally, linked lists can have an arbitrary number of elements unlike arrays which have a fixed size.", "category": "Python"}, {"instruction": "Create a while loop in Python that runs while the given condition is true", "input": "while x is greater than 10", "output": "while x > 10:\n    # do something\n    x = x - 1", "category": "Python"}, {"instruction": "Create a function \" avg_grade\" that would take a list of grades and return the average of the grades", "input": "list = [84, 89, 94, 81]", "output": "def avg_grade(list):\n    total = 0\n    for num in list:\n        total += num\n    return total / len(list)", "category": "Python"}, {"instruction": "Iterate over the list and calculate the average", "input": "arr = [1,2,3,4,5]", "output": "def average(arr):\n    sum = 0\n    for i in arr:\n        sum+=i\n    return sum/len(arr)", "category": "Python"}, {"instruction": "Generate a code to compare two strings and return a boolean result.", "input": "", "output": "def compare(string1, string2):\n    if string1 == string2:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Generate a code to filter out any value that is greater than the given number.", "input": "my_list = [2, 4, 5, 6, 7]\nand the number = 5", "output": "def filter_gt(my_list, number):\n    return [x for x in my_list if x <= number]", "category": "Python"}, {"instruction": "Using the given input, generate a code to print in reverse order.", "input": "a_list = ['a', 'b', 'c', 'd', 'e']", "output": "def print_reverse(a_list):\n    for i in range(len(a_list)-1, -1, -1):\n        print(a_list[i])", "category": "Python"}, {"instruction": "Write a Python program to print the combination of the given list.", "input": "list = [1, 2, 3]", "output": "from itertools import combinations\n\nlist1 = [1, 2, 3]\n\ncombinations = list(combinations(list1, 2))\nprint(combinations)\n\n# Output: [(1, 2), (1, 3), (2, 3)]", "category": "Python"}, {"instruction": "Implement the bubble sort algorithm for an array of integers.", "input": "arr = [34, 16, 12, 9, 5]", "output": "def bubbleSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above\narr = [34, 16, 12, 9, 5]\n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "category": "Python"}, {"instruction": "Compose a python function to find the maximum element in a 2-dimensional array.", "input": "array = [[2, 4, 7, 1], [8, 12, 9, 5]]", "output": "def max_element(arr): \n    max_value = arr[0][0] \n    for i in range(len(arr)): \n        for j in range(len(arr[i])): \n            if arr[i][j] > max_value: \n                max_value = arr[i][j] \n    return max_value \n  \n# Driver code \narr = [[2, 4, 7, 1], [8, 12, 9, 5]] \nmax_val = max_element(arr) \nprint(\"The maximum element in 2-dimensional array is\",max_val)", "category": "Python"}, {"instruction": "Implement a function to search an element in a BST.", "input": "root:\n        5\n      /   \\\n     3     8\n    / \\   / \\\n   2   4  6   9\n\nkey: 3", "output": "def search_BST(root, key): \n  \n    # Base Condition \n    if root is None or root.val == key: \n        return root \n  \n    # If key is greater than root's key \n    if root.val < key: \n        return search_BST(root.right, key) \n  \n    # If key is smaller than root's key \n    return search_BST(root.left, key) \n  \n# Driver Code \nroot = Node(5)\nroot.left = Node(3) \nroot.right = Node(8)\nroot.left.left = Node(2) \nroot.left.right = Node(4) \nroot.right.left = Node(6) \nroot.right.right = Node(9) \n  \nkey = 3\nnode = search_BST(root, key) \nif node:\n    print(\"Found\") \nelse: \n    print(\"Not Found\")", "category": "Python"}, {"instruction": "Modify the following code to output Odd numbers from 1 to 10", "input": "for num in range(1, 10):\n    print( num )", "output": "for num in range(1, 10):\n    if num % 2 == 1:\n        print( num )", "category": "Python"}, {"instruction": "Create a function that will accept a list and return the sum of all elements in the list", "input": "", "output": "def sum_list(mylist):\n    s = 0\n    for x in mylist:\n        s += x \n    return s", "category": "Python"}, {"instruction": "Make the following code more efficient", "input": "def remove_dups(mylist):\n    newlist = []\n    for item in mylist:\n        if not item in newlist:\n            newlist.append(item)\n    return newlist", "output": "def remove_dups(mylist):\n    seen = set()\n    newlist = []\n    for item in mylist:\n        if item not in seen:\n            seen.add(item)\n            newlist.append(item)\n    return newlist", "category": "Python"}, {"instruction": "Provide a demo snippet to illustrate different ways of looping through a Python dictionary.", "input": "", "output": "#Looping through a dictionary using a for loop \ndict = {'a': 1, 'b': 2, 'c': 3, 'd': 4} \n  \nfor key in dict: \n    print(\"% s : % s\" %(key, dict[key])) \n  \n#Looping through a dictionary using items() method \nfor key, value in dict.items(): \n    print(\"% s : % s\" %(key, value)) \n  \n#Looping through dictionary keys \nfor key in dict.keys(): \n    print(\"% s : % s\" %(key, dict[key])) \n  \n#Looping through dictionary values \nfor value in dict.values(): \n    print(\"% s\" %value)", "category": "Python"}, {"instruction": "Write a python program to filter a list of numbers to only include even numbers", "input": "[1, 2, 3, 4]", "output": "def filter_even(nums):\n    even_nums = []\n    for num in nums:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums", "category": "Python"}, {"instruction": "What are the main differences between a stack and a queue?", "input": "", "output": "The main differences between a stack and a queue are their insertion and deletion methods. Stacks use a Last In First Out (LIFO) approach for insertion and deletion, while queues use a First In First Out (FIFO) approach. Stacks are used when order is important, while queues are used when order is not important.", "category": "Python"}, {"instruction": "Determine the size of an array in bytes.", "input": "", "output": "The size of an array in bytes is equal to the number of elements in the array multiplied by the size of each element in bytes. For example, an array of 10 integers requires 10 * 4 = 40 bytes of memory.", "category": "Python"}, {"instruction": "How many trailing zeros are in the factorial of the number \"n\"?", "input": "n = 20", "output": "The number of trailing zeros in 20! is 4.\n\ndef trailing_zeros(n):\n count = 0\n i = 5\n while (n/i >= 1): \n  count += int(n/i) \n  i *= 5\n return count\n\nprint(\"The number of trailing zeros in 20! is\", trailing_zeros(20))", "category": "Python"}, {"instruction": "Implement a backtracking algorithm to solve a sudoku puzzle.", "input": "[\n    [7, 8, 0, 4, 0, 0, 1, 2, 0],\n    [6, 0, 0, 0, 7, 5, 0, 0, 9],\n    [0, 0, 0, 6, 0, 1, 0, 7, 8],\n    [0, 0, 7, 0, 4, 0, 2, 6, 0],\n    [0, 0, 1, 0, 5, 0, 9, 3, 0],\n    [9, 0, 4, 0, 6, 0, 0, 0, 5],\n    [0, 7, 0, 3, 0, 0, 0, 1, 2],\n    [1, 2, 0, 0, 0, 7, 4, 0, 0],\n    [0, 4, 9, 2, 0, 6, 0, 0, 7]\n]", "output": "def solve(bo):\n    find = find_empty(bo)\n    if not find:\n        return True\n    else:\n        row, col = find\n\n    for i in range(1,10):\n        if valid(bo, i, (row, col)):\n            bo[row][col] = i\n\n            if solve(bo):\n                return True\n\n            bo[row][col] = 0\n\n    return False\n\n\ndef valid(bo, num, pos):\n    # Check row\n    for i in range(len(bo[0])):\n        if bo[pos[0]][i] == num and pos[1] != i:\n            return False\n\n    # Check column\n    for i in range(len(bo)):\n        if bo[i][pos[1]] == num and pos[0] != i:\n            return False\n\n    # Check box\n    box_x = pos[1] // 3\n    box_y = pos[0] // 3\n\n    for i in range(box_y*3, box_y*3 + 3):\n        for j in range(box_x * 3, box_x*3 + 3):\n            if bo[i][j] == num and (i,j) != pos:\n                return False\n\n    return True\n\n\ndef find_empty(bo):\n    for i in range(len(bo)):\n        for j in range(len(bo[0])):\n            if bo[i][j] == 0:\n                return (i, j)  # row, col\n\nprint(solve([\n    [7, 8, 0, 4, 0, 0, 1, 2, 0],\n    [6, 0, 0, 0, 7, 5, 0, 0, 9],\n    [0, 0, 0, 6, 0, 1, 0, 7, 8],\n    [0, 0, 7, 0, 4, 0, 2, 6, 0],\n    [0, 0, 1, 0, 5, 0, 9, 3, 0],\n    [9, 0, 4, 0, 6, 0, 0, 0, 5],\n    [0, 7, 0, 3, 0, 0, 0, 1, 2],\n    [1, 2, 0, 0, 0, 7, 4, 0, 0],\n    [0, 4, 9, 2, 0, 6, 0, 0, 7]\n]))", "category": "Python"}, {"instruction": "You are given a set of numbers and a number \"n\". Find the sum of all numbers in the given set greater than \"n\".", "input": "[4, 7, 10, 11], n = 6", "output": "total = 18\ndef sum_greater_than_n(arr, n):\n total = 0\n for num in arr:\n if num > n:\n total += num\n return total\n\nprint(sum_greater_than_n([4, 7, 10, 11], 6))", "category": "Python"}, {"instruction": "Calculate the factorial of the integer \"n\".", "input": "n = 5", "output": "def findFactorial(n): \n fact = 1\n while(n> 0): \n fact = fact * n \n n = n - 1\n return fact \n \nprint(find_factorial(5))", "category": "Python"}, {"instruction": "Write an algorithm to detect the longest common subsequence of two given strings.", "input": "str1 = \"ABCGDH\", str2 = \"ADGH\"", "output": "// Input two strings\nstr1 = \"ABCGDH\"\nstr2 = \"ADGH\"\n\n// Create a two dimensional matrix arr to store the lcs\nint arr[len(str1)+1][len(str2)+1]\n\nint maxLength = 0\n\n// Initialize all elements of arr to zero\nfor i in range(len(str1)+1): \n    for j in range(len(str2)+1): \n        arr[i][j] = 0\n\n// Calculate the value of arr[i][j] \nfor i in range(1,len(str1)+1):\n    for j in range(1,len(str2)+1):\n        if str1[i-1] == str2[j-1]:\n            arr[i][j] = arr[i-1][j-1] + 1\n            maxLength = max(arr[i][j], maxLength)\n        else:\n            arr[i][j] = max(arr[i][j-1], arr[i-1][j])\nreturn maxLength", "category": "Python"}, {"instruction": "Develop a Python program to calculate the greatest common factor of two positive integers.", "input": "", "output": "def gcd(x, y): \n  \n    # base case \n    if x == 0: \n        return y \n    \n    # a is greater \n    if x > y: \n        return gcd(x % y, y) \n    \n    # b is greater\n    return gcd(x, y % x) \n\n# Driver code\n# x and y are the two positive integers\nx = 16\ny = 24\ngcd_val = gcd(x, y)\nprint(\"The greatest common factor of\",x,\"and\",y,\"is\",gcd_val)", "category": "Python"}, {"instruction": "Transform the following Python function to a pseudo code.", "input": "def find_max(x):\n max_val = -1\n for i in x:\n if i > max_val:\n max_val = i\n return max_val", "output": "# Find the maximum value in x\nmax_val = -1\nFOR each i in x\n    IF i > max_val\n        max_val = i\nEND FOR\nRETURN max_val", "category": "Python"}, {"instruction": "Suggest a completion for the following code to generate a random string of the given length from a given set.", "input": "length = 10\ncharset = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'", "output": "import random\n\ndef generate_random_string(length, charset):\n  output_str = ''\n  for i in range(length):\n    output_str += random.choice(charset)\n  return output_str", "category": "Python"}, {"instruction": "In the given code, add an environment variable that should be used to set the desired version of Python.", "input": "", "output": "import os\nos.environ[\"PYTHON_VERSION\"] = \"3.7\"", "category": "Python"}, {"instruction": "Update the given code to add a statement to check if the input number is a prime or not.", "input": "num = 5", "output": "flag = 0\nfor i in range(2, num):\n  if num % i == 0:\n    flag = 1\nif flag == 0:\n  print(\"The number is a prime.\")", "category": "Python"}, {"instruction": "Add a function to the code that will calculate the average of the input array.", "input": "array = [1,2,3,4]", "output": "def calculate_average(array):\n  total = 0\n  for num in array:\n    total += num\n  avg = total/len(array)\n  return avg", "category": "Python"}, {"instruction": "Write a function that takes two parameters and will print out the maximum of the two.", "input": "", "output": "def max_of_two(x, y):\n  if x > y:\n    return x\n  else:\n    return y", "category": "Python"}, {"instruction": "Reverse a string in place", "input": "word = 'hello'", "output": "def reverse_string_in_place(word): \n    # Get the input string length \n    n = len(word) \n\n    # Swap character starting  \n    # from two corners \n    for i in range(n // 2): \n        word[i], word[n - i - 1] = word[n - i - 1], word[i] \n\nword = list('hello') \nreverse_string_in_place(word) \nprint(''.join(word))", "category": "Python"}, {"instruction": "Implement the bubble sort algorithm for a linked list.", "input": "link_list = [10->9->8->7->6]", "output": "class Node:\n    # initialization of node\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \n# bubble sort of linked_list\ndef bubble_sort(head):\n    # Store last node\n    end = None\n\n    while end != head.next:\n        p = head\n        while p.next != end:\n            q = p.next\n            if p.data > q.data:\n                p.data, q.data = q.data, p.data\n            p = p.next\n        end = p\n\n# driver code\nhead =  Node(10) \nhead.next = Node(9) \nhead.next.next = Node(8) \nhead.next.next.next = Node(7)\nhead.next.next.next.next = Node(6)\n    \nbubble_sort(head) \n<insert code to print the data of the linked list>", "category": "Python"}, {"instruction": "Find the GCD of two integers.", "input": "a = 8, b = 12", "output": "def gcd(a, b): \n\n    # Base case \n    if a == 0:\n        return b \n      \n    return gcd(b % a, a) \n  \n# Driver code\na = 8\nb = 12\nprint(\"GCD of\",a,\"and\",b,\"is\", gcd(a, b))", "category": "Python"}, {"instruction": "Code a function that takes a list of strings and checks if it is ordered lexicographically.", "input": "list_of_strings = ['algorithm', 'coding', 'novel']", "output": "def ordered_list(list_of_strings): \n    for i in range(len(list_of_strings) - 1): \n        if list_of_strings[i] >= list_of_strings[i+1]: \n            return False\n    return True \n  \n# Driver Code \nlist_of_strings = ['algorithm', 'coding', 'novel']\nprint(ordered_list(list_of_strings))", "category": "Python"}, {"instruction": "Code a Python algorithm to reverse a given string.", "input": "\"Hello, World!\"", "output": "def reverse(s):  \n    return s[::-1] \n\nx = \"Hello, World!\"\n  \nprint(reverse(x))", "category": "Python"}, {"instruction": "Replace the following python code to print out the length of a given string.", "input": "string = 'Hello world'\nprint(string)", "output": "string = 'Hello world'\nprint(len(string))", "category": "Python"}, {"instruction": "Find the sum of the elements of an array.", "input": "arr = [1,2,3,4]", "output": "def find_sum(arr):\n    \"\"\"This function finds the sum of the elements of an array\"\"\"\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n\nsum = find_sum(arr)\nprint(\"The sum of the elements of the array is:\", sum)", "category": "Python"}, {"instruction": "Implement quick sort on an array.", "input": "unsorted_nums = [2, 8, 1, 5, 9]", "output": "def partition(arr, low, high): \n    i = (low-1)\n    pivot = arr[high]\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i = i+1\n            arr[i], arr[j] = arr[j], arr[i] \n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return (i+1) \n\ndef quick_sort(arr, low, high): \n    if low < high:\n        pi = partition(arr, low, high) \n        quick_sort(arr, low, pi-1) \n        quick_sort(arr, pi+1, high)\n\nquick_sort(unsorted_nums, 0, len(unsorted_nums)-1)\nprint(unsorted_nums)", "category": "Python"}, {"instruction": "Create a code to get the average value of a given list.", "input": "numbers = [1, 4, 9, 5]", "output": "def get_average(numbers):\n    sum_nums = 0\n    for num in numbers:\n        sum_nums += num\n    return sum_nums / len(numbers)\n\nprint(get_average(numbers))", "category": "Python"}, {"instruction": "Need to write a function to encrypt a message using the caesar cipher, which takes the key as an argument.", "input": "message = \"Hello World\"\nkey = 3", "output": "def encrypt_caesar_cipher(message, key):\n    encrypted_message = \"\"\n    for char in message: \n        if not char.isalpha():\n            encrypted_message += char\n        else:\n            encrypted_char = chr((ord(char) + key - 97) % 26 + 97)\n            encrypted_message += encrypted_char\n    return encrypted_message\n\nprint(encrypt_caesar_cipher(message, key))", "category": "Python"}, {"instruction": "Create a function that takes in two arguments \"a\" and \"b\" and prints out the greatest common divisor between them.", "input": "a = 6\nb = 36", "output": "def gcd(a, b): \n    if (a == 0): \n        return b \n    return gcd(b % a, a)\n\nprint(gcd(a, b))", "category": "Python"}, {"instruction": "Create a function that takes in an integer \"n\" and prints all perfect numbers between 0 to n.", "input": "n = 20", "output": "def perfect_numbers(n):\n    perfect_numbers = []\n    for number in range(1, n+1):\n        sum_divisors = 0\n        for divisor in range(1, number):\n            if number % divisor == 0:\n                sum_divisors += divisor\n        if sum_divisors == number:\n            perfect_numbers.append(number)\n    return perfect_numbers\n \nprint(perfect_numbers(n))", "category": "Python"}, {"instruction": "Create a list comprehension to generate a list of all the words in the sentence \"Python is amazing\".", "input": "", "output": "words = [word for word in \"Python is amazing\".split(' ')]", "category": "Python"}, {"instruction": "Create a function that takes as argument the number of elements and return a list containing the Fibonacci sequence up to that number.", "input": "n = 10", "output": "def get_fibonacci_sequence(n):\n    \"\"\"Returns a list containing the Fibonacci sequence up to number n\"\"\"\n    fib_list = [0, 1]\n    if n <= 2:\n        return fib_list[:n]\n    \n    for i in range(2, n):\n        fib_list.append(fib_list[i-2] + fib_list[i-1])\n    \n    return fib_list\n\nn = 10\n\nfib_sequence = get_fibonacci_sequence(n)\nprint(fib_sequence) # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "category": "Python"}, {"instruction": "Create a program that takes as input an array of numbers and calculates the sum of all numbers in the array.", "input": "arr = [10,20,30,40]", "output": "def get_sum(input_arr):\n    \"\"\"Returns the sum of all numbers in an input array\"\"\"\n    sum = 0\n    for num in input_arr:\n        sum += num\n    return sum\n\narr = [10,20,30,40]\ntotal = get_sum(arr)\nprint(total) # Output: 100", "category": "Python"}, {"instruction": "Create a Python program that takes as input an email address and validates it using a regex pattern.", "input": "email = 'example@gmail.com'", "output": "import re\n\ndef validate_email(email):\n    \"\"\"Validates an email address using regex\"\"\"\n    pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n    match = re.search(pattern, email)\n    if match:\n        return True\n    else:\n        return False\n\nemail = 'example@gmail.com'\n\nis_valid_email = validate_email(email)\nprint(is_valid_email) # Output: True", "category": "Python"}, {"instruction": "Write an algorithm that prints the first 10 Fibonacci numbers in descending order.", "input": "", "output": "# Initialize the first two numbers\na = 0\nb = 1\n\n# Print the first 10 Fibonacci numbers\nfor i in range(10):\n    # Swap the values\n    a, b = b, a + b\n    # Print the current Fibonacci number\n    print(b)\n# Reverse the list\nfor _ in range(9, 0, -1):\n    print(_)", "category": "Python"}, {"instruction": "Using Python, create a loop that prints each element in a given list.", "input": "List = [\"A\", \"B\", \"C\"]", "output": "for item in List:\n    print(item)", "category": "Python"}, {"instruction": "Create a function to calculate the binomial coefficient for two integers.", "input": "n = 5\nr = 3", "output": "def binomial_coefficient(n, r):\n    fact = 1 \n    if r > n - r:\n        r = n - r \n    for i in range(r):\n        fact *= (n) - i \n        fact /= (i+1) \n    return int(fact)\n\nprint(binomial_coefficient(n, r))", "category": "Python"}, {"instruction": "Create a Python class \"Book\" with name and price properties.", "input": "", "output": "class Book:\n def __init__(self, name, price):\n  self.name = name\n  self.price = price", "category": "Python"}, {"instruction": "Update the following code to make it pass all test cases.", "input": "def divisible_by_two(numbers): \n    result = []\n    for num in numbers:\n        if num % 2 == 0:\n            result.append(True)\n        else:\n            result.append(False)\n    return result", "output": "def divisible_by_two(numbers): \n    result = []\n    for num in numbers:\n        if num % 2 == 0:\n            result.append(True)\n        else:\n            result.append(False)\n    return result\n\ndef divisible_by_two(numbers):\n    return [True if num % 2 == 0 else False for num in numbers]", "category": "Python"}, {"instruction": "Explain the difference between a local and a global variable in Python.", "input": "", "output": "In Python, a local variable is a variable that is only accessible within the scope of where it is defined, while a global variable is accessible throughout the program. All variables declared outside of a function are globally scoped, while variables declared inside a function are locally scoped. Global variables carry their value throughout the program, while a local variable will lose its value when the function containing it is exited.", "category": "Python"}, {"instruction": "Debug the following code so it can print the corresponding JSON data correctly.", "input": "import json\npeople_string = '{\"name\": \"John Smith\", \"age\": 50, \"profession\": \"engineer\"}'\n\ndata = json.loads(people_string)\nprint(\"Name:           \", data[\"name\"])", "output": "import json\npeople_string = '{\"name\": \"John Smith\", \"age\": 50, \"profession\": \"engineer\"}'\n\ndata = json.loads(people_string)\nprint(\"Name:           \", data[\"name\"])\nprint(\"Age:            \", data[\"age\"])\nprint(\"Profession:     \", data[\"profession\"])", "category": "Python"}, {"instruction": "Write a code to return the key of the minimum element in a dictionary.", "input": "dict: {'a': 1, 'b': 20, 'c': 3}", "output": "\"\"\"\nWrite a code to return the key of the minimum element in a dictionary.\n\"\"\"\n\ndef min_key(d):\n    if not d:\n        return None\n    min_val = min(d.values())\n    return [key for key, val in d.items() if val == min_val][0]\n\nif __name__ == '__main__':\n    d = {'a': 1, 'b': 20, 'c': 3}\n    print(min_key(d))", "category": "Python"}, {"instruction": "Explain how to make a Python script executable on Unix-like systems.", "input": "", "output": "To make a Python script executable on Unix-like systems, you must make the script file executable and specify the path to the Python interpreter. To do this, you need to add a \"shebang\" line at the beginning of the script, which should point to the path of the Python interpreter. This can be done by adding the following line to your script: #!/usr/bin/env python. Next, you must make the script file executable by running the chmod +x command. Finally, you need to specify the path of your script in the system's PATH environment variable so that it can be accessed from anywhere.", "category": "Python"}, {"instruction": "Write a Python function to find the largest prime factor of a given integer.", "input": "", "output": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n = n / i\n        else:\n            i += 1\n    return n", "category": "Python"}, {"instruction": "Implement a recursive solution to calculate the nth Fibonacci number.", "input": "", "output": "def fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2)", "category": "Python"}, {"instruction": "Write a Python code snippet to print the minimum value of a given list of numbers.", "input": "list = [7, 8, 10, 4]", "output": "min_val = min(list)\nprint('Minimum Value:', min_val)", "category": "Python"}, {"instruction": "Translate the following sentence into its Python equivalent.", "input": "\"If the number is greater than 10, print 'Success'.\"", "output": "if num > 10:\n    print('Success')", "category": "Python"}, {"instruction": "Suggest an algorithm to determine whether a string is a palindrome", "input": "", "output": "A palindrome is a word, phrase, or sequence that reads the same backward as forward. To determine whether a string is a palindrome, one algorithm could be to compare the reversed characters in the string with the original characters. We can start at the ends of the string, and check if the characters at each end of the string are equal. If they are, we move to the next pair in the middle, and if they are not equal, then the string is not a palindrome.", "category": "Python"}, {"instruction": "Compute the number of ways to make a change of N with coins of given denominations.", "input": "N = 4; Coins = {1,2,3}", "output": "def change(n, coins): \n    m = len(coins) \n    table = [[0 for x in range(m)] for x in range(n+1)] \n\n    # Fill the entries for 0 value case (n = 0) \n    for i in range(m): \n        table[0][i] = 1\n\n    # Fill rest of the table entries in bottom-up manner \n    for i in range(1, n+1): \n        for j in range(m): \n            # Count of solutions including coins[j] \n            x = table[i - coins[j]][j] if i-coins[j] >= 0 else 0\n\n            # Count of solutions excluding coins[j] \n            y = table[i][j-1] if j >= 1 else 0 \n\n            # total count \n            table[i][j] = x + y \n    return table[n][m-1]", "category": "Python"}, {"instruction": "Develop an algorithm to determine if a given integer is an Armstrong number or not.", "input": "153", "output": "def is_armstrong_number(num): \n  \n    # initialize sum \n    sum = 0\n    temp = num \n    while temp > 0: \n        digit = temp % 10\n        sum += digit ** 3 \n        temp //= 10\n  \n    if num == sum: \n        return True\n    return False", "category": "Python"}, {"instruction": "Create an algorithm for finding the minimum element in an array of integers.", "input": "[3, 7, 14, 2, 11]", "output": "def find_min(array):\n    min_element = array[0] \n    for i in range(1, len(array)):\n        if array[i] < min_element: \n            min_element = array[i] \n    return min_element", "category": "Python"}, {"instruction": "Construct an if statement for Python that checks if a given number is greater than 5.", "input": "", "output": "num = 7\nif num > 5:\n print(\"The number is greater than 5\")", "category": "Python"}, {"instruction": "Write Python code to generate a random integer between 1 and 10,000 (inclusive).", "input": "", "output": "import random\n\nnum = random.randint(1, 10000)\nprint(\"Random integer between 1 and 10,000:\", num)", "category": "Python"}, {"instruction": "Solve this math problem using Python code.", "input": "Problem: Find the 3 terms in an arithmetic progression whose sum is 42 and the common difference is 5.", "output": "#Find the first term\na = (42/3) - (2*5)\na = 10\n\n#Find the other two terms\nb = a + 5\nc = b + 5\n\n#Print the answer\nprint(\"The 3 terms in an arithmetic progression whose sum is 42 and the common difference is 5 are:\", a, b, c)", "category": "Python"}, {"instruction": "Create a dictionary from a given list of tuples.", "input": "[('a', 1), ('b', 2), ('c', 3)]", "output": "def list_to_dict(tuples_list):\n    result = {}\n    for tuple_ in tuples_list:\n        result[tuple_[0]] = tuple_[1]\n    \n    return result", "category": "Python"}, {"instruction": "Create a function that given two strings, returns a new string with the characters of the two strings alternating.", "input": "('abcd', 'efgh')", "output": "def alternating_strings(str1, str2):\n    result = \"\"\n    \n    for i in range(min(len(str1), len(str2))):\n        result += str1[i] + str2[i]\n    \n    # take care of the rest of the elements\n    if len(str1) > len(str2):\n        result += str1[len(str1)-1]\n    else:\n        result += str2[len(str2)-1]\n    \n    return result", "category": "Python"}, {"instruction": "Write a code to get the current US Dollar to Euro exchange rate from the European Central Bank.", "input": "", "output": "\"\"\"\nGet the current Euro to US Dollar exchange rate from the European Central Bank\n\"\"\"\n\nimport requests\nimport json\n\ndef get_currency_exchange_rate():\n    url = 'https://api.exchangeratesapi.io/latest?base=USD'\n    response = requests.get(url)\n    data = json.loads(response.text)\n    return data['rates']['EUR']\n\nif __name__ == '__main__':\n    print(get_currency_exchange_rate())", "category": "Python"}, {"instruction": "Develop a Python program that creates a random password of length 8 characters.", "input": "", "output": "import string\nimport random\n\nlength = 8\nall_characters = string.ascii_letters + string.digits + string.punctuation\n\npassword = \"\".join(random.choice(all_characters) for i in range(length))\n\nprint(password)", "category": "Python"}, {"instruction": "Edit the following Python code to combine two lists.", "input": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]", "output": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n# Combine both the lists\ncombined_list = list1 + list2\n# Print the combined list\nprint(combined_list)\n\nOutput:\n[1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Create a Python script for creating a random string of given length.", "input": "Length of 8", "output": "import random\nimport string\n\ndef random_string(length):\n    # Create a list of characters to be used in the random string\n    char_list = list(string.ascii_letters + string.digits)\n\n    # Create the random string with the given length\n    random_string = ''.join([random.choice(char_list) for i in range(length)])\n    \n    # Return the random string\n    return random_string\n\nif __name__ == '__main__':\n    # Define the length of the random string\n    length = 8\n    # Call the function to generate the random string\n    random_str = random_string(length)\n    # print the generated string\n    print('Random string:', random_str)\n\nOutput:\nRandom string: fdLbBi49", "category": "Python"}, {"instruction": "Develop an algorithm to traverse a linked list in a reverse order.", "input": "", "output": "def traverseReverse(head):\n    if head is None:\n        return\n\n    stack = []\n    curr = head\n    while curr is not None:\n        stack.append(curr) \n        curr = curr.next \n\n    while len(stack) > 0:\n        curr = stack.pop()\n        print(curr.val)", "category": "Python"}, {"instruction": "Design an algorithm to search for a particular node in a binary tree using breadth-first search.", "input": "", "output": "def breadthFirstSearch(root, target):\n\n    if root is None:\n        return False\n    \n    queue = [root]\n\n    while len(queue) > 0:\n        node = queue.pop(0)\n        if node.val == target:\n            return True\n\n        if node.left is not None:\n            queue.append(node.left)\n        if node.right is not None:\n            queue.append(node.right)\n\n    return False", "category": "Python"}, {"instruction": "Generate a list comprehension in Python to generate a list of integers from 1 to 50.", "input": "", "output": "[x for x in range(1, 51)]", "category": "Python"}, {"instruction": "Develop a program to delete all nodes of a linked list at a given position.", "input": "[3, 9, 1, 5], position to delete: 2", "output": "# Node class \nclass Node: \n\t\n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\n\n# Linked List class \nclass LinkedList: \n\t\n\tdef __init__(self): \n\t\tself.head = None\n\n\t# function to add a node at the given position \n\tdef deleteNode(self, pos): \n\n\t\t# if list is empty \n\t\tif self.head == None: \n\t\t\treturn\n\n\t\t# store head node \n\t\ttemp = self.head \n\n\t\t# if head needs to be removed \n\t\tif pos == 0: \n\t\t\tself.head = temp.next\n\t\t\ttemp = None\n\t\t\treturn\n\n\t\t# find previous node of the node to be deleted \n\t\tfor i in range(pos -1 ): \n\t\t\ttemp = temp.next\n\t\t\tif temp is None: \n\t\t\t\tbreak\n\n\t\t# if position is more than number of nodes \n\t\tif temp is None: \n\t\t\treturn \n\t\tif temp.next is None: \n\t\t\treturn\n\n\t\t# Node temp.next is the node to be deleted \n\t\t# store pointer to the next of node to be deleted \n\t\tnext = temp.next.next\n\n\t\t# Unlink the node from linked list \n\t\ttemp.next = None\n\n\t\ttemp.next = next", "category": "Python"}, {"instruction": "Develop an algorithm to search for a particular element in an array.", "input": "[1, 9, 5, 8, 4, 9], element to search for: 9", "output": "def search(arr, el):\n    for i in range(len(arr)):\n        if arr[i] == el:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Design a function in Python that takes a list of strings and returns a new list with words in reverse order.", "input": "", "output": "def reverse_words(words):\n    return [word[::-1] for word in words]", "category": "Python"}, {"instruction": "Modify the following code to take in a list of numbers and return the average.", "input": "", "output": "def average(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total / len(numbers)", "category": "Python"}, {"instruction": "Write a code snippet to read characters from a given string until a whitespace is encountered", "input": "", "output": "def read_until_space(string):\n result = \"\"\n for char in string:\n     if char == \" \":\n         break\n     result += char\n return result", "category": "Python"}, {"instruction": "Write a loop statement to delete all even numbers from the given array.", "input": "[1, 2, 3, 4, 5]", "output": "arr = [1, 2, 3, 4, 5]\nfor i in range(len(arr)):\n    if arr[i] % 2 == 0:\n        del arr[i]", "category": "Python"}, {"instruction": "Create an algorithm in Python that converts a given number from base 10 to binary.", "input": "8", "output": "def base10_to_binary(n):\n\n    # Create an empty binary array\n    binary_arr = [0] * (int(math.log2(n)) + 1) \n  \n    # Iterate through binary array\n    for i in range(len(binary_arr) - 1, -1, -1): \n        if n >= pow(2, i): \n            n -= pow(2, i) \n            binary_arr[len(binary_arr) - i - 1] = 1\n  \n    return binary_arr \n  \n# Driver Code \nn = 8\nprint(base10_to_binary(n)) # [1, 0, 0, 0]", "category": "Python"}, {"instruction": "Find the product of the elements of a given array in Python.", "input": "[1, 2, 3]", "output": "def product(arr): \n    product = 1\n  \n    # Iterate the array \n    for i in arr: \n        product = product * i \n  \n    return product \n  \n# Driver Code \narr = [1, 2, 3] \nprint(product(arr)) # 6", "category": "Python"}, {"instruction": "Develop an algorithm to find the maximum consecutive repeating character in a given string.", "input": "\"aaaaabcdddddefgggg\"", "output": "def find_max_consecutive_repeating_character(str): \n    maxCount = 0\n    tempCount = 1\n    previous = ''\n\n    # count the number of occurrences\n    # of same character. \n    for i in range(len(str)): \n        if str[i] == previous:\n            tempCount += 1\n\n        else: \n            # Update maximum if required \n            if tempCount > maxCount: \n                maxCount = tempCount \n\n            tempCount = 1\n            previous= str[i] \n\n    return maxCount", "category": "Python"}, {"instruction": "Find the maximum of the numbers in a given array.", "input": "[1, 23, 87, -5, 33]", "output": "def find_max(arr): \n    max_element = arr[0] \n    for i in range(1, len(arr)):\n        if arr[i] > max_element:\n            max_element = arr[i]\n    return max_element", "category": "Python"}, {"instruction": "Develop a program to generate a random number in a given range.", "input": "Lower = 5 and Upper = 20", "output": "import random\n\ndef generate_random_number(lower, upper):\n    return random.randint(lower, upper)", "category": "Python"}, {"instruction": "Create a function that accepts two parameters, a string and a list, and returns the length of the string in the list.", "input": "string = 'FooBar'\nlist = [\"FooBar\", \"Foo\", \"BarFoo\"]", "output": "def getLength(string, list):\n    return len([x for x in list if x == string])", "category": "Python"}, {"instruction": "What is a syntax error in programming?", "input": "", "output": "A syntax error is an error in writing code which causes the code to be incorrect according to the programming language's syntax rules. This type of error prevents the code from being executed and can be identified by the compiler or interpreter. Examples of syntax errors include: putting a string in the wrong form, forgetting to add a semicolon at the end of a line, or missing a bracket.", "category": "Python"}, {"instruction": "How do functions help with code organization?", "input": "", "output": "Functions help with code organization by breaking the program up into smaller logical blocks. This makes the code easier to read and maintain. Separating the code into functions also makes it easier to debug and test, as it allows for individual parts of the code to be tested and debugged. Having code organized into functions also makes it easier to reuse code as the functions can be called multiple times.", "category": "Python"}, {"instruction": "Using the given input, write a function to produce a desired output.", "input": "Input: [1, 4, 8, 9, 10] \nDesired Output: [[1, 4, 8], [9, 10]]", "output": "def split_list(lst):\n    # Create an empty list\n    result = []\n    \n    # Iterate through the list and divide it into two parts\n    for i in range(0, len(lst), 3):\n        result.append(lst[i:i+3])\n        \n    # Return the result\n    return result", "category": "Python"}, {"instruction": "Simulate a coin toss using Python.", "input": "", "output": "import random\n\ndef coin_toss():\n  result = random.choice([\"heads\", \"tails\"])\n  return result\n\nprint(coin_toss())", "category": "Python"}, {"instruction": "Given two strings s1 and s2, how can you check if s2 is a substring of s1?", "input": "s1 = \"testString\"\ns2 = \"String\"", "output": "if s2 in s1:\n  print(\"s2 is a substring of s1\")\nelse:\n  print(\"s2 is not a substring of s1\")", "category": "Python"}, {"instruction": "Given a list of strings, how can you categorize each string into one of the two categories: short and long?", "input": "list = [\"Hello\", \"World\", \"Foo\", \"Bar\"]", "output": "for s in list:\n    if len(s) <=3:\n        category = \"short\"\n    else:\n        category = \"long\"\n    print(f\"{s} : {category}\")", "category": "Python"}, {"instruction": "How can you fill a 2D array with zeros?", "input": "", "output": "my_2d_array = [[0 for col in range(3)] for row in range(3)]", "category": "Python"}, {"instruction": "Given a unsorted array, sort it using the quick sort algorithm.", "input": "[5, 4, 8, 7, 1, 3, 10, 9]", "output": "def quickSort(nums): \n    if len(nums) <= 1: \n        return nums\n    pivot = nums[len(nums) // 2] \n    left = [x for x in nums if x < pivot]\n    middle = [x for x in nums if x == pivot] \n    right = [x for x in nums if x > pivot] \n    return quickSort(left) + middle + quickSort(right)\n  \n   \nnums = [5, 4, 8, 7, 1, 3, 10, 9] \nprint(quickSort(nums))", "category": "Python"}, {"instruction": "Write a TensorFlow 2.0 program that calculates the mean of an array.", "input": "[1, 2, 3, 4, 5]", "output": "import tensorflow as tf\n\narr = [1, 2, 3, 4, 5]\n\narr_tensor = tf.constant(arr)\nmean_tensor = tf.reduce_mean(arr_tensor)\n\nwith tf.Session() as sess:\n    mean_value = sess.run(mean_tensor)\nprint(mean_value)", "category": "Python"}, {"instruction": "Suggest an algorithm for finding the maximum sum for all subarrays.", "input": "arr = [2, 3, -5, 4]", "output": "The algorithm for finding the maximum sum for all subarrays can be solved using a divide and conquer approach.\n\nFirst, divide the array into two parts by splitting it in half at its middle index. Then, calculate the maximum subarray sum for each of the two parts recursively. Finally, return the greater of the two sums plus the value at the middle index of the array. This will be the maximum sum of all subarrays.", "category": "Python"}, {"instruction": "Create a custom min-heap data structure in Python.", "input": "", "output": "class MinHeap:\n    def __init__(self):\n        self.heap = [] \n \n    def parent(self, i): \n        return (i-1)/2 \n \n    def insertKey(self, k): \n        self.heap.append(k) # Insert the new element at the end of the heap \n        i = len(self.heap)-1 \n        self.heapifyup(i) \n  \n    def heapifyup(self, i): \n        # If the current node is smaller than the parent node \n        # Swap the two nodes \n        if i != 0 and self.heap[int(self.parent(i))] > self.heap[i]: \n            self.heap[int(self.parent(i))], self.heap[i] = self.heap[i], self.heap[int(self.parent(i))]\n            self.heapifyup(self.parent(i))\n  \n    def remove(self):\n        # Get the value of the root node \n        root = self.heap[0] \n        # Move the last element of the heap to the top \n        self.heap[0] = self.heap[-1] \n        # Delete the last element of the heap \n        self.heap.pop()\n        if len(self.heap) > 0:\n            self.heapifydown(0)\n        return root\n  \n    def heapifydown(self, i):\n        # Get the left and right indices \n        left = 2*i+1\n        right = 2*i+2\n        small = i # Make the current node the small node \n  \n        # Compare the left child with the small node \n        if left < len(self.heap) and self.heap[left] < self.heap[small]:\n            small = left\n  \n        # Compare the right child with the small node \n        if right < len(self.heap) and self.heap[right] < self.heap[small]:\n            small = right\n \n        # If any of the children of the current node is smaller than \n        # the current node, then swap the current node with the small node \n        if small != i:\n            self.heap[small], self.heap[i] = self.heap[i], self.heap[small] \n            self.heapifydown(small)", "category": "Python"}, {"instruction": "Find all the prime factors of a given integer.", "input": "100", "output": "def prime_factors(n):\n    # Empty list to store prime factors \n    lst = [] \n    \n    # Divide by 2 while the number is \n    # divisible by 2  \n    while n % 2 == 0: \n        lst.append(2)\n        n = n / 2\n          \n    # n must be odd, now \n    # check all the numbers from 3 to \n    # the square root of n  \n    for i in range(3, int(n**0.5)+1): \n        # check for divisibility of i by n  \n        while n % i== 0: \n            lst.append(i) \n            n = n / i \n          \n    # If n is a prime number then it \n    # will only be divisible by itself  \n    if n > 2:\n        lst.append(n)\n      \n    return lst\n\n# Test  \nprint(prime_factors(100))\n\n# Output\n[2, 2, 5, 5]", "category": "Python"}, {"instruction": "Generate a list that contains the Armstrong numbers in a given range.", "input": "100", "output": "# Code \ndef armstrong_numbers(n): \n    # Empty list to store Armstrong numbers \n    lst = [] \n  \n    for i in range(1, n + 1): \n        s = 0\n        # To find the power \n        m = len(str(i)) \n  \n        # Finding Armstrong numbers \n        temp = i \n        while temp > 0: \n            digit = temp % 10\n            s += digit ** m \n            temp //= 10\n  \n        # Adding the number to list \n        if i == s: \n            lst.append(i) \n  \n    return lst\n\n# Test    \nprint(armstrong_numbers(100)) \n\n# Output\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 153, 370, 371, 407]", "category": "Python"}, {"instruction": "Automatically remove vowels from a sentence.", "input": "Hello, World!", "output": "def remove_vowels(sentence):\n    # Create an empty string.  \n    result = \"\" \n    for letter in sentence:  \n        # Select those characters that are not vowels. \n        if letter not in \"aeiouAEIOU\": \n            result += letter  \n  \n    return result\n\n# Test\nprint(remove_vowels(\"Hello, World!\")) \n\n# Output\nHll, Wrld!", "category": "Python"}, {"instruction": "Create a Python class to encode a string of characters using a Caesar cipher.", "input": "", "output": "class CaesarCipher:\n  \n    def __init__(self, shift):\n        self.shift = shift\n    \n    def encode(self, string):\n        cipher = ''\n        for char in string: \n            if char == ' ':\n                cipher = cipher + char\n            elif  char.isupper():\n                cipher = cipher + chr((ord(char) + self.shift - 65) % 26 + 65)\n            else:\n                cipher = cipher + chr((ord(char) + self.shift - 97) % 26 + 97)\n        return cipher\n\n# Test \ncipher = CaesarCipher(3)\nprint(cipher.encode(\"Hello, World!\"))\n\n# Output\nKhoor, Zruog!", "category": "Python"}, {"instruction": "Create a custom encryption algorithm to encode a string of characters.", "input": "Test", "output": "def custom_encrypt(string):\n    result = ''\n    \n    # Loop over each character\n    for character in string: \n        # Get the Unicode code point of the character \n        # and add two to it\n        code = ord(character) + 2 \n        # Convert the code point back to character \n        # and add it to the result\n        result += chr(code) \n\n    # Return the encrypted string\n    return result\n\n# Test the custom_encrypt() function\nencoded_str = custom_encrypt('Test')\nprint(encoded_str)\n# Output: Vguv", "category": "Python"}, {"instruction": "Design a loop in Python to find the maximum value from a given array.", "input": "array = [50, 10, 8, 1000, 1024]", "output": "maxValue = array[0]\nfor i in range(1, len(array)): \n    if array[i] > maxValue: \n        maxValue = array[i] \nprint(maxValue)", "category": "Python"}, {"instruction": "Implement a code which reverses a given string.", "input": "String: \"Hello World\"", "output": "def reverse_string(string): \n    rev_string = \"\" \n    for i in range(len(string)-1, -1, -1): \n        rev_string += string[i] \n    return rev_string \n\nprint(reverse_string(\"Hello World\"))\n\nOutput:\ndlroW olleH", "category": "Python"}, {"instruction": "Create a code which prints a multiplication table of given size.", "input": "Size: 4", "output": "def print_multiplication_table(n): \n    for i in range(1, n+1): \n        for j in range(1, n+1): \n            print(i*j, end=\"\\t\") \n        print(\"\\n\") \n\nprint_multiplication_table(4)\n\nOutput:\n1\t2\t3\t4\t\n2\t4\t6\t8\t\n3\t6\t9\t12\t\n4\t8\t12\t16", "category": "Python"}, {"instruction": "Rotate the given array by k steps.", "input": "Array: [1,2,3,4,5]\nk: 2", "output": "def rotate_array(arr, k): \n    for i in range(k): \n        arr.insert(0, arr.pop()) \n    return arr\n\nprint(rotate_array([1,2,3,4,5],2))\n\nOutput:\n[4, 5, 1, 2, 3]", "category": "Python"}, {"instruction": "Compute the maximum subarray sum for the given array.", "input": "Array: [-2,1,-3,4,-1,2,1,-5,4]", "output": "def max_subarray_sum(arr): \n    max_so_far = 0 \n    max_ending_here = 0\n\n    for i in range(len(arr)): \n        max_ending_here += arr[i] \n\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here \n\n        if max_ending_here < 0: \n            max_ending_here = 0 \n    \n    return max_so_far\n\nprint(max_subarray_sum([-2,1,-3,4,-1,2,1,-5,4]))\n\nOutput:\n6", "category": "Python"}, {"instruction": "Write a code which takes two strings and prints its longest common subsequence.", "input": "String1: \"ABCDGH\"\nString2: \"AEDFHR\"", "output": "def longest_common_subsequence(str1, str2): \n    m = len(str1) \n    n = len(str2) \n\n    matrix = [[0 for x in range(n+1)] for x in range(m+1)] \n\n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0: \n                matrix[i][j] = 0\n            elif str1[i-1] == str2[j-1]: \n                matrix[i][j] = matrix[i-1][j-1] + 1\n            else: \n                matrix[i][j] = max(matrix[i-1][j], matrix[i][j-1]) \n\n    result = \"\"\n    i = m \n    j = n \n\n    while i > 0 and j > 0: \n\n        if str1[i-1] == str2[j-1]: \n            result += str1[i-1] \n            i -= 1\n            j -= 1\n\n        elif matrix[i-1][j] > matrix[i][j-1]: \n            i -= 1\n        else: \n            j -= 1\n    \n    return result[::-1] \n\nprint(longest_common_subsequence(\"ABCDGH\", \"AEDFHR\"))\n\nOutput:\nADH", "category": "Python"}, {"instruction": "Write a code for creating an array with values from 0 to n.", "input": "n = 5", "output": "def create_array(n): \n    array = []\n    for i in range(n+1): \n        array.append(i)\n    return array\n\nprint(create_array(5))\n\nOutput:\n[0, 1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Implement a code that checks if a given word is palindrome.", "input": "Word: malayalam", "output": "def is_palindrome(word): \n    reversed_word = word[::-1]\n    if reversed_word == word: \n        return True\n    else: \n        return False\n\nprint(is_palindrome(\"malayalam\"))\n\nOutput:\nTrue", "category": "Python"}, {"instruction": "Provide a code for creating a function which receives an array of characters and prints them.", "input": "['A', 'B', 'C', 'D']", "output": "def print_array_of_chars(arr): \n    for ch in arr: \n        print(ch) \n        \nprint_array_of_chars(['A', 'B', 'C', 'D'])\n\nOutput:\nA\nB\nC\nD", "category": "Python"}, {"instruction": "Create a function to capitalize all the words of a sentence.", "input": "sentence = \"this is a test\"", "output": "def capitalize_words(sentence):\n    \"\"\"This function capitalizes all the words of a sentence\"\"\"\n    words = sentence.split()\n    capitalized_words = []\n    for word in words:\n        capitalized_words.append(word.capitalize())\n    return ' '.join(capitalized_words)\n\nprint(capitalize_words(sentence))", "category": "Python"}, {"instruction": "Replace all vowels with 'x' in a given string.", "input": "myString = \"Python Programmer\"", "output": "def replace_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    new_string = \"\"\n    for char in string:\n        if char in vowels:\n            new_string += \"x\"\n        else:\n            new_string += char\n    return new_string\n\nprint(replace_vowels(myString))\n\n# Output\n# Pxthxn Prxgrxmmxr", "category": "Python"}, {"instruction": "Use a while loop to iterate over a list of numbers and find the first even number", "input": "numbers = [7, 3, 5, 11, 13]", "output": "# while loop to iterate over list of numbers\ni = 0 \nwhile i < len(numbers):\n    if numbers[i] % 2 == 0:\n        break\n    i += 1\n\n# main program\nif i < len(numbers):\n    print(\"First even number is \", numbers[i])\nelse:\n    print(\"No even numbers found\")", "category": "Python"}, {"instruction": "Generate 5 random numbers from 1 to 10.", "input": "", "output": "import random\n\nnumbers = random.sample(range(1, 11), 5)\nprint(numbers)\n\n# Output\n# [3, 9, 6, 8, 5]", "category": "Python"}, {"instruction": "Find the most frequent value in a list", "input": "mylist = [1,2,3,4,4,4,4,5,5]", "output": "from collections import Counter\n\ndef get_most_frequent_value(mylist):\n    counted_list = Counter(mylist)\n    return counted_list.most_common(1)[0][0]\n\nmost_frequent_value = get_most_frequent_value(mylist)\nprint(most_frequent_value)\n\n# Output\n# 4", "category": "Python"}, {"instruction": "Write a function that takes a string and a key as parameters and encrypts the string with the key.", "input": "", "output": "def encrypt(string, key):\n    # Create an empty string that will hold the result\n    encrypted_string = \"\"\n    \n    # Loop through the string and encrypt each character\n    for i in range(len(string)):\n        char = string[i]\n        encrypted_char = chr(ord(char) + key)\n        encrypted_string += encrypted_char\n        \n    # Return the encrypted string\n    return encrypted_string", "category": "Python"}, {"instruction": "Rewrite the following piece of code in Python.", "input": "for (i = 0; i < 10; i++)\n    if (i % 2 == 0)\n        printf(\"%d\", i);", "output": "for i in range(10):\n    if i % 2 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Create a program in Python that searches for a word in a string.", "input": "This is a sample string\nword", "output": "def search(string, word):\n    if word in string:\n       return \"The word is present in the sentence\"\n    else: \n       return  \"The word is not present in the sentence\"", "category": "Python"}, {"instruction": "Write a Python function that finds and returns the number of occurrences of a particular character in a string.", "input": "", "output": "def countChar(string, char):\n  ctr = 0\n  for s in string:\n    if s == char:\n      ctr += 1\n  return ctr", "category": "Python"}, {"instruction": "Compute the edit distance between two provided words using the Levenshtein algorithm.", "input": "word1 = \"cat\"\nword2 = \"bat\"", "output": "def levenshteinDistance(word1, word2):\n  m = len(word1)\n  n = len(word2)\n  \n  dp = [[0 for i in range(n + 1)] for j in range(m + 1)] \n  \n  for i in range(m + 1): \n    for j in range(n + 1): \n      if i == 0: \n        dp[i][j] = j\n        \n      elif j == 0: \n        dp[i][j] = i\n      \n      elif word1[i - 1] == word2[j - 1]: \n        dp[i][j] = dp[i - 1][j - 1] \n      \n      else: \n        dp[i][j] = 1 + min(dp[i][j - 1],  \n                            dp[i - 1][j],  \n                            dp[i - 1][j - 1]) \n\n  return dp[m][n]", "category": "Python"}, {"instruction": "Implement a python class named 'Temperature' that ranks a temperature value as cold, warm, or hot given a threshold value of 30.", "input": "", "output": "class Temperature:\n  def __init__(self, value, threshold=30):\n    self.value = value\n    self.threshold = threshold\n\n  def rank(self):\n    if self.value < self.threshold:\n        return \"cold\"\n    elif self.value == self.threshold:\n        return \"warm\"\n    else:\n        return \"hot\"", "category": "Python"}, {"instruction": "Write Python code to extend a string to be twice as long as the original string", "input": "Example string: \"Hello world\"", "output": "input = \"Hello world\"\noutput = input + input", "category": "Python"}, {"instruction": "Write a Python script to create a webserver that can respond to \"GET\" requests from a web browser.", "input": "", "output": "import http.server\nimport socketserver\n\nPORT = 8080\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n    print(\"Serving at port\", PORT)\n    httpd.serve_forever()", "category": "Python"}, {"instruction": "Fix the bug in the following code by modifying the function is_star_jumping_high_enough:\n\ndef is_star_jumping_high_enough(star_height):\n    \"\"\"return true if star height is greater than 5\"\"\"\n    if star_height < 5:\n        return True", "input": "", "output": "def is_star_jumping_high_enough(star_height):\n    \"\"\"return true if star height is greater than 5\"\"\"\n    if star_height > 5:\n        return True", "category": "Python"}, {"instruction": "Create a function in Python that will take two parameters: a string and an integer, and return the string repeated the amount of times specified by the integer.", "input": "", "output": "def repeat(string, num_repetitions):\n    return string * num_repetitions", "category": "Python"}, {"instruction": "Write a Python code snippet to prompt the user to enter their age and store that value in a variable called \"age\".", "input": "", "output": "age = int(input(\"Please enter your age: \"))", "category": "Python"}, {"instruction": "Create a list comprehension statement in Python that prints all the even numbers from a list of numbers from 1 to 10.", "input": "", "output": "[n for n in range(1, 11) if n % 2 == 0]", "category": "Python"}, {"instruction": "Write a Python program that prints all numbers from 1 to 100 that are divisible by both 5 and 7.", "input": "", "output": "for num in range(1, 101):\n    if (num%5==0) and (num%7==0):\n        print(num)", "category": "Python"}, {"instruction": "What is a stack in Computer Science?", "input": "", "output": "A stack is a data structure that works on the principle of Last in First Out (LIFO). It is used to store and retrieve elements in a particular order, and all operations of insertion and retrieval are performed at one end of the stack, referred to as the top. There are two main operations in a stack: Push - adds an item to the top, and Pop - removes an item from the top.", "category": "Python"}, {"instruction": "Create a function for printing each letter of a string on a separate line.", "input": "str = \"Hello World\"", "output": "def print_letter_separately(str): \n\tfor letter in str: \n\t\tprint(letter) \n\n# Output \nprint_letter_separately(str)", "category": "Python"}, {"instruction": "What are the properties of a good algorithm?", "input": "", "output": "A good algorithm should have the following properties: correctness, completeness, accuracy, robustness, time complexity, memory complexity, scalability, and reusability. The correctness of an algorithm means that it should produce the correct output for every possible input. The completeness refers to whether the algorithm will terminate and produce a result for every input. Accuracy refers to the correctness of the results. Robustness refers to the ability of the algorithm to handle unpredictable input and produce the same output every time. Time and memory complexity refers to how much time and memory the algorithm takes to execute. Scalability indicates how well the algorithm can handle larger inputs and outputs, and reusability means how easy it is for other programmers to use the algorithms for their own purposes.", "category": "Python"}, {"instruction": "Compare two dictionaries for equality and return the result.", "input": "a = {1:4, 2:5, 3:6} \nb = {2:5, 3:6, 1:4}", "output": "def compare_dicts(a, b): \n\t# Check key-value pairs in both dicts \n\tif a.items() == b.items(): \n\t\treturn True\n\telse: \n\t\treturn False\n\n# Output \nprint(compare_dicts(a, b))", "category": "Python"}, {"instruction": "Explain the use of try-except statements in Python", "input": "", "output": "Try-except statements are used to handle errors and exceptions in Python. The general syntax for a try-except statement is try: ...except: ... The code that could potentially raise an exception is put inside the try block, while the code to handle the exception is put inside the except block. If an exception occurs, the code inside the except block is executed and the program execution continues normally afterwards. If no exception occurs, the code inside the except block is skipped.", "category": "Python"}, {"instruction": "Rewrite the following selection sort algorithm in Python.", "input": "def selectionSort(arr):\n  for i in range(len(arr)):\n    minIndex = i\n    for j in range(i + 1, len(arr)):\n      if arr[minIndex] > arr[j]:\n        minIndex = j\n    arr[i], arr[minIndex] = arr[minIndex], arr[i]", "output": "def selection_sort(arr):\n  for i in range(len(arr)):\n    min_index = i\n    for j in range(i + 1, len(arr)):\n      if arr[min_index] > arr[j]:\n        min_index = j\n    arr[i], arr[min_index] = arr[min_index], arr[i]", "category": "Python"}, {"instruction": "How can we convert a sql query into pandas code?", "input": "", "output": "We can use the read_sql_query() function in the pandas library to convert a SQL query into pandas code. The read_sql_query() function takes the SQL query and a connection object as argument and returns the corresponding DataFrame object.", "category": "Python"}, {"instruction": "Given a Python dictionary, create a function to return the most common key in the dictionary.", "input": "d = {\n  'a': 4,\n  'b': 3,\n  'c': 2,\n  'd': 2\n}", "output": "def most_common_key(d):\n  counts = [(key, value) for key, value in d.items()]\n  max_count = max(counts, key=lambda item: item[1])\n  return max_count[0]", "category": "Python"}, {"instruction": "What is the difference between a static method and an instance method in Python?", "input": "", "output": "A static method is a method that does not have access to the instance of the class and so it can't be used to access instance variables. A static method is associated with the class itself, not with any particular instance. A static method is often used to create utility functions that don't need to be accessed from instance level. \n\nAn instance method requires an object or instance of a class to work. An instance method can access the instance variables of the class and has access to the self object which is an instance of the class. An instance method can also access static methods and static variables of the class.", "category": "Python"}, {"instruction": "Measure the execution time of a given python script.", "input": "", "output": "import time\n \ndef measure_time():\n  # Start the timer\n  start = time.time()\n \n  # Execute the code\n  # ----- Code to be measured ------\n  # -------------------------------\n \n  # Stop the timer\n  end = time.time()\n  \n  # Return the difference\n  return end - start\n\nexecution_time = measure_time()\nprint(execution_time)", "category": "Python"}, {"instruction": "Find all unique values in a given dataset", "input": "dataset = [['A', 4], ['B', 5], ['A', 3], ['C', 2]]", "output": "# Get all the values from the dataset\nall_values = [value for _, value in dataset]\n\n# Get the unique values\nunique_values = set(all_values)\n\nprint(unique_values)\n\n# Output\n# {2, 3, 4, 5}", "category": "Python"}, {"instruction": "Create a function that returns the `n`th number in the Fibonacci sequence.", "input": "", "output": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)", "category": "Python"}, {"instruction": "Create a function to count the number of characters in a string, without using the len() function.", "input": "", "output": "def count_characters(string):\n    count = 0\n    for char in string:\n        count +=1\n    return count", "category": "Python"}, {"instruction": "Make a class called 'Car' that stores information about a car and contains a function called 'start' which when called, prints out \"Car has started\".", "input": "", "output": "class Car:\n    def __init__(self):\n        self.model = \"\"\n        self.year = 0\n    \n    def start(self):\n        print(\"Car has started\")", "category": "Python"}, {"instruction": "In Python, write code to identify whether a given string contains only numeric values.", "input": "", "output": "# To identify whether a given string contains only numeric values in Python:\n# 1. Use the isdigit method of the str object\n# 2. Pass the given string as an argument to the isdigit method\n# 3. The method will return True if the given string contains only numeric values,\n#    and False otherwise\n\n# Example\ngiven_string = \"1234\"\n\nif given_string.isdigit():\n    print(\"The given string contains only numeric values\")  \nelse:\n    print(\"The given string does not contain only numeric values\")", "category": "Python"}, {"instruction": "Generate a Frequency Table for the following sequence of characters using Python.", "input": "'aabbccddee'", "output": "# Create a frequency table for the given sequence\n# using Python\nfrom collections import Counter\n\nstring = 'aabbccddee'\n# create the Counter object\nfreq_table = Counter(string)\n# print the output\nprint(freq_table)\n\n# Output\nCounter({'a': 2, 'b': 2, 'c': 2, 'd': 2, 'e': 2})", "category": "Python"}, {"instruction": "Describe how to use the following code to generate random numbers.", "input": "import random\n\ndef random_with_N_digits(n):\n    range_start = 10**(n-1)\n    range_end = (10**n)-1\n    return random.randint(range_start, range_end)", "output": "// To generate random numbers using the code provided:\n// 1. Specify number of digits to generate\n// 2. Use the random_with_N_digits function to generate the random number\n// 3. Pass the desired number of digits as the argument in the function\n// 4. The function will return a random number between 10^(n-1) and 10^n-1\n// 5. Use the returned random number for the desired purpose", "category": "Python"}, {"instruction": "Suggest a Python code to parse an XML document.", "input": "", "output": "# Parse an XML document using Python\nimport xml.etree.ElementTree as ET\n\n# load the XML document\ntree = ET.parse('document.xml')\n# get the root element\nroot = tree.getroot()\n# loop through all the elements\nfor element in root.findall('element'):\n    # print the attributes of all elements\n    print(element.attrib)", "category": "Python"}, {"instruction": "Describe how to add an element in a linked list in Python.", "input": "", "output": "// To add an element in a linked list in Python:\n// 1. Create a new node containing the value to be added\n// 2. Set the \"next\" attribute of the new node to point to the current head node\n// 3. Set the head node to be the newly created node\n// 4. Increase the size of the linked list by 1", "category": "Python"}, {"instruction": "Create a function that takes a string and returns a new string with each character capitalized.", "input": "String = \"hello!\"", "output": "\"\"\"\nCreate a function that takes a string and returns a new string with each character capitalized\n\"\"\"\n\ndef capitalize(string):\n    new_string = \"\"\n    for c in string:\n        new_string += c.upper()\n    return new_string\n    \nif __name__ == '__main__':\n    string = \"hello!\"\n    result = capitalize(string)\n    print(result)\n\n# Output\n# HELLO!", "category": "Python"}, {"instruction": "Implement a binary search on the given array.", "input": "Array = [1, 4, 5, 6, 7, 9]", "output": "\"\"\"\nImplement a binary search on a given array\n\"\"\"\n\ndef binary_search(arr, element):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end)//2\n        if arr[mid] == element:\n            return True\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return False\n\nif __name__ == '__main__':\n    arr = [1, 4, 5, 6, 7, 9]\n    element = 7\n    result = binary_search(arr, element)\n    print(result)\n\n# Output\n# True", "category": "Python"}, {"instruction": "Visualize the following on a line chart.", "input": "Data points = [12, 13, 19, 20, 25]", "output": "import matplotlib.pyplot as plt\n\ndata_points = [12, 13, 19, 20, 25]\n\nplt.plot(data_points)\nplt.ylabel(\"data points\")\nplt.xlabel(\"index\")\nplt.title(\"Line chart of data points\")\n\nplt.show()", "category": "Python"}, {"instruction": "Write a code to get the value of pi (to 6 decimal places) using mathematical methods.", "input": "", "output": "\"\"\"\nCalculate the value of pi using mathematical methods\n\"\"\"\n\ndef calculate_pi():\n    pi = 0  \n    n = 1000\n    for n in range(n):\n        pi += ((-1)**n)/(2*n+1)\n    pi = pi*4\n    return round(pi, 6)\n\nif __name__ == '__main__':\n    print(calculate_pi())\n\n# Output\n# 3.141593", "category": "Python"}, {"instruction": "Create a Python function which takes an array and returns true if the array contains all unique values.", "input": "array = [1, 2, 3, 2]", "output": "\"\"\"\nCreate a Python function which takes an array and returns \ntrue if the array contains all unique values\n\"\"\"\n\ndef is_unique(arr):\n    seen = set()\n    for x in arr: \n        if x in seen: \n            return False\n        seen.add(x)\n    return True\n    \nif __name__ == '__main__':\n    arr = [1,2,3,2]\n    result = is_unique(arr)\n    print(result)\n    \n# Output\n# False", "category": "Python"}, {"instruction": "Create a class in Python that implements a stack.", "input": "", "output": "class Stack: \n    def __init__(self): \n        self.stack = []\n\n    def push(self,element): \n        self.stack.append(element)  \n\n    def pop(self): \n        return self.stack.pop()\n\n    def peek(self):\n        return self.stack[-1]", "category": "Python"}, {"instruction": "Make sure the following code runs without errors.", "input": "def calculate_sum(numbers):\n      total = 0\n      for number in numbers\n          total += number\n      return total", "output": "def calculate_sum(numbers):\n      total = 0\n      for number in numbers:\n          total += number\n      return total", "category": "Python"}, {"instruction": "Write a function in Python that takes a list of numbers and returns the greatest difference between any two numbers in the list.", "input": "test_list = [4, 6, 8, 10, 3, 1, 9]", "output": "def greatest_difference(numbers_list):\n    max_difference = 0\n    for num1 in numbers_list:\n        for num2 in numbers_list:\n            if num1 != num2:\n                difference = abs(num1 - num2)\n                if difference > max_difference:\n                    max_difference = difference\n    \n    return max_difference\n\ngreatest_difference(test_list)", "category": "Python"}, {"instruction": "Build a deep learning model in Python to predict the stock price of a given company.", "input": "", "output": "# import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# import data\ndata = pd.read_csv('stock_data.csv')\n\n# preprocess data\nX = data.iloc[:,:-1].values\ny = data.iloc[:,-1].values\n\n# split into training set and test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# feature scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\n# build the model\nimport keras\nfrom keras.layers import Dense\nfrom keras.models import Sequential\n\nmodel = Sequential()\nmodel.add(Dense(units=6, activation='relu', input_dim=4))\nmodel.add(Dense(units=4, activation='sigmoid'))\nmodel.add(Dense(units=1, activation='linear'))\nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae','accuracy'])\nmodel.fit(X_train, y_train, epochs=20, batch_size=10)\n\n# test the model\ny_pred = model.predict(X_test)\n\n# evaluate the model\nfrom sklearn.metrics import r2_score\nr2_score(y_test, y_pred)", "category": "Python"}, {"instruction": "Print out the content of a two-dimensional array.", "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def print_2d_array(arr):\n    for row in arr:\n        for el in row:\n            print(el, end=' ')\n        print(\"\")", "category": "Python"}, {"instruction": "Create a method to reverse a linked list.", "input": "", "output": "def reverse_list(head): \n  \n    prev = None\n    current = head \n    while(current is not None): \n        next = current.next\n        current.next = prev \n        prev = current \n        current = next\n    head = prev \n    return head", "category": "Python"}, {"instruction": "Create a function to find if a given input is a prime number or not.", "input": "", "output": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False        \n    return True", "category": "Python"}, {"instruction": "Create a program to find the sum of all the even numbers from 1 to n.", "input": "", "output": "def find_sum(n):  \n    sum = 0\n    for i in range (1, n): \n        if (i % 2 == 0): \n            sum = sum + i \n    return sum", "category": "Python"}, {"instruction": "You need to read a list of strings, split each into 2 substrings, and output the 2 substrings as a tuple.", "input": "['international', 'imagination', 'skyscraper']", "output": "def split_words(string_list):\n    new_list = []\n    for string in string_list:\n        mid = int(len(string)/2) \n        new_list.append( (string[:mid], string[mid:]) )\n    return new_list", "category": "Python"}, {"instruction": "Create a method to checkout the content of dictionary.", "input": "", "output": "def check_dict(dictionary):\n    for key in dictionary:\n        print(key + \": \" + str(dictionary[key]))", "category": "Python"}, {"instruction": "Implement a reverse method to reverse the content of an array.", "input": "[1, 2, 3, 4, 5]", "output": "def reverse(arr): \n    n =len(arr) \n    for i in range(n // 2): \n        temp = arr[i] \n        arr[i] = arr[n - i - 1] \n        arr[n - i - 1] = temp\n  \n    return arr", "category": "Python"}, {"instruction": "Create a method to print all the prime numbers up to n.", "input": "", "output": "def print_prime_numbers(n):\n    primes = [] \n    for num in range(2, n + 1): \n        is_prime = True\n        for i in range(2, num): \n            if (num % i == 0): \n                is_prime = False\n                break\n        if is_prime: \n            primes.append(num) \n    print(primes)", "category": "Python"}, {"instruction": "Create a Python program to generate the Fibonacci series between 0 and 10.", "input": "", "output": "def FibonacciSequence():\n  a, b = 0, 1\n  for _ in range(10):\n    yield a\n    a, b = b, a + b\n\nfor num in FibonacciSequence():\n  print(num)", "category": "Python"}, {"instruction": "Create a Python program to extract all unique words from a given sentence.", "input": "This sentence contains multiple words.", "output": "sentence_words = set(sentence.split())\nunique_words = set(word for word in sentence_words if word not in visited_words)\nprint(unique_words)\n# Output: {'contains', 'words', 'multiple', 'This'}", "category": "Python"}, {"instruction": "Write a function in Python that takes in two strings and concatenates them together with a space in between.", "input": "", "output": "def my_concat(string1, string2)\n    return string1 + ' ' + string2", "category": "Python"}, {"instruction": "Find the minimum element in an unordered array given in Python.", "input": "arr = [17, 21, 4, 7, 29, 34, 11]", "output": "min_ele = arr[0]\nfor i in range (1, len(arr)):\n    if (min_ele > arr[i]):\n       min_ele = arr[i] \n    \nprint(\"Minimum element in array is\", min_ele)", "category": "Python"}, {"instruction": "Write Python code to generate a random password of 8 alphanumeric characters.", "input": "", "output": "import string\nimport random\n\ndef generate_password():\n    chars = string.ascii_letters + string.digits\n    size = 8\n    return ''.join(random.choice(chars) for _ in range(size))\n\nprint(generate_password())\n\n// Output:\n// h5Kp0FHc", "category": "Python"}, {"instruction": "Clean the given data in Python by replacing NaN and None with 0.", "input": "import pandas as pd\n\ndata = [[1, 'John', None], [2, 'Jane', 18], [3, 'Rudy', NaN]]\ndf = pd.DataFrame(data, columns = ['id', 'name', 'age'])", "output": "import pandas as pd\n\ndata = [[1, 'John', None], [2, 'Jane', 18], [3, 'Rudy', NaN]]\ndf = pd.DataFrame(data, columns = ['id', 'name', 'age'])\n\ndf.fillna(0, inplace = True)", "category": "Python"}, {"instruction": "Write a function returning the factorial of a given number in Python.", "input": "", "output": "def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n-1)", "category": "Python"}, {"instruction": "Build a linear regression model using Python's scikit learn library.", "input": "import pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame({\n    'x': [2.5, 0.5, 2.2, 1.9, 3.1, 2.3, 2, 1, 1.5, 1.1],\n    'y': [2.4, 0.7, 2.9, 2.2, 3, 2.7, 1.6, 1.1, 1.6, 0.9]\n    })\n\nX = data['x'].values.reshape(-1, 1)\ny = data['y'].values.reshape(-1, 1)", "output": "from sklearn.linear_model import LinearRegression\n\n# Create linear regression model\nmodel = LinearRegression()\n\n# Train the model using the training set\nmodel.fit(X, y)\n\n# Make predictions using the testing set\ny_pred = model.predict(X)", "category": "Python"}, {"instruction": "Fix the Python code below to make the script work.", "input": "import json\n\ndata = {\n  \"name\": \"John Doe\",\n  \"age\": 20\n}\n\nwith open(\"data.txt\", \"w\") as outfile:\n    json.dump(data, outfile)", "output": "import json\n\ndata = {\n  \"name\": \"John Doe\",\n  \"age\": 20\n}\n\nwith open(\"data.txt\", \"w\") as outfile:\n    json.dump(data, outfile, indent=4)", "category": "Python"}, {"instruction": "Change the variable names in the following Python code.", "input": "x1 = 10\ny1 = 20", "output": "a = 10\nb = 20", "category": "Python"}, {"instruction": "What is the primary purpose of object-oriented programming?", "input": "", "output": "The primary purpose of object-oriented programming is to create software systems that are modular, reusable, and maintainable. By modeling real-world objects and their behavior as individual components, object-oriented programming enables developers to create and manage complex systems in an organized and efficient manner. It also allows the code to be easily modified and adapted to fit the changing needs of the user. Additionally, object-oriented programming makes software more secure, as all the code is contained within individual objects which can be handled securely.", "category": "Python"}, {"instruction": "What is the purpose of an abstract data type in software engineering?", "input": "", "output": "The purpose of an abstract data type in software engineering is to allow for the creation of data structures which have a certain behavior, without having to specify exactly how the data is represented in memory. Abstract data types are useful for organizing large amounts of data in complex systems, as they provide a clear interface for users to interact with the data without requiring them to understand the underlying implementation. By separating the data structures from the algorithms that operate on them, abstract data types can also reduce the complexity of software development.", "category": "Python"}, {"instruction": "Explain what a Turing machine is.", "input": "", "output": "A Turing machine is a mathematical model of computation that was initially developed by Alan Turing in 1936. It is a device that can read and write symbols on a strip of tape according to a set of instructions. The tape is divided into individual squares, each of which can hold one symbol at a time. The machine can move either right or left one square at a time, and has a set of instructions that determine how its internal state changes based on which symbol it reads. The Turing machine is a powerful tool for understanding computation, as it can be used to simulate any algorithm or computation.", "category": "Python"}, {"instruction": "Identify a potential bug in the following code.", "input": "def add(a, b):\n    c = a + b\n    return c", "output": "A potential bug in this code is that if the parameters a and b are passed in as strings instead of numbers, then the resulting c will be a concatenation of the two strings rather than a mathematical addition. To avoid this error, the parameters should be converted to the appropriate data type before performing the addition.", "category": "Python"}, {"instruction": "Implement a linked list in Python.", "input": "", "output": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert_at_head(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def append(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            return\n        curr_node = self.head\n        while curr_node.next is not None: \n            curr_node = curr_node.next\n        curr_node.next = new_node\n\n    def delete_by_value(self, data):\n        if self.head is None:\n            return\n        curr_node = self.head\n        if curr_node.data == data:\n            self.head = curr_node.next\n            return\n        prev_node = curr_node\n        while curr_node is not None:\n            if curr_node.data == data:\n                break\n            prev_node = curr_node\n            curr_node = curr_node.next\n        if curr_node is None:\n            return\n        prev_node.next = curr_node.next", "category": "Python"}, {"instruction": "Compare the performance of Grover's algorithm and classical search algorithms.", "input": "", "output": "Grover's algorithm is a quantum algorithm that offers exponential speedup over classical search algorithms. As an example of how it works, assume we want to find an element in a database of size N. For a classical algorithm, the best search time is O(log N). In contrast, Grover's algorithm provides a search time of only O((log N)^2). Thus, using Grover's algorithm, the search time is reduced by a factor of log N for a given problem size. Furthermore, Grover's algorithm does not require any additional memory to store data, as it operates directly on the states of the quantum system. This can also provide significant advantages compared to classical search algorithms.", "category": "Python"}, {"instruction": "Create a class to represent a two-dimensional vector.", "input": "", "output": "class Vector2D(object):\n  '''Class to represent a two-dimensional vector'''\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n  \n  def __add__(self, other):\n    return Vector2D(self.x + other.x, self.y + other.y)\n  \n  def __sub__(self, other):\n    return Vector2D(self.x - other.x, self.y - other.y)\n  \n  def __mul__(self, scalar):\n    return Vector2D(self.x * scalar, self.y * scalar)", "category": "Python"}, {"instruction": "Write a Python code to print \"Hello World!\" on the console.", "input": "", "output": "print(\"Hello World!\")", "category": "Python"}, {"instruction": "Manipulate the given list in Python to include the new element at the beginning.", "input": "list = [1, 2, 3]\nnew_element = 0", "output": "list = [0] + list \nlist.insert(0, new_element)", "category": "Python"}, {"instruction": "Create a Python program to generate a random string of 5 characters.", "input": "", "output": "import random\n\ndef generate_random_string():\n  characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n  random_string = ''\n  for x in range(5):\n    random_string += random.choice(characters)\n  \n  return random_string\n\nprint(generate_random_string())", "category": "Python"}, {"instruction": "Write a function in Python to check if two strings are an anagram or not.", "input": "", "output": "def is_anagram(str1, str2): \n    if len(str1) != len(str2): \n        return False \n  \n    s1 = sorted(str1) \n    s2 = sorted(str2) \n  \n    if s1 == s2: \n        return True\n  \n    return False", "category": "Python"}, {"instruction": "Generate a 5-element tuple of random numbers between 5 and 15 using Python.", "input": "", "output": "import random\n\nrandom_tuple = tuple(random.randint(5, 15) for _ in range(5))", "category": "Python"}, {"instruction": "Write a Python function to count the letters in a given sentence and return a dictionary of letter counts.", "input": "sentence = \"Hello World!\"", "output": "def letter_counts(sentence):\n  count_dict = {}\n  for char in sentence:\n    if char.isalpha():\n      if char in count_dict:\n        count_dict[char] += 1\n      else:\n        count_dict[char] = 1\n  return count_dict", "category": "Python"}, {"instruction": "Rewrite the following code into a generator.", "input": "def some_function(nums):\n  output = []\n  for x in nums:\n    y = x ** 2\n    output.append(y)\n  return output", "output": "def some_function(nums):\n  for x in nums:\n    yield x ** 2", "category": "Python"}, {"instruction": "Generate a 3x3 matrix of random real numbers in the range of 0.0 to 1.0.", "input": "", "output": "import numpy as np\nnp.random.RandomState(0).rand(3, 3)", "category": "Python"}, {"instruction": "Suggest a sorting algorithm to sort the following array in descending order.", "input": "arr = [17, 21, 4, 7, 29, 34, 11]", "output": "A Bubble Sort algorithm could be used to sort the given array in descending order. This algorithm compares adjacent elements in the array and swaps them if the element on the left is larger than the element on the right. This process is continued until the array is sorted.", "category": "Python"}, {"instruction": "Write a function that takes a string and returns a dictionary counting each character in the string.", "input": "", "output": "def character_count(str): \n    res = {} \n  \n    for keys in str: \n        res[keys] = res.get(keys, 0)+1\n        \n    return res", "category": "Python"}, {"instruction": "Generate a random number between 1 and 10, inclusive.", "input": "", "output": "import random\n\nrandom_num = random.randint(1, 10)\nprint(random_num)", "category": "Python"}, {"instruction": "Generate an array of 10 random numbers between 1 and 100 using Python", "input": "", "output": "import random\n\ndef generate_random_array(n):\n    array= []\n    for _ in range(n):\n        array.append(random.randint(1, 100))\n    return array\n\nprint(generate_random_array(10))\n\n// Output\n// [14, 20, 32, 84, 59, 45, 11, 34, 57, 19]", "category": "Python"}, {"instruction": "Perform a linear search in a list named 'mylist' and return the index of the first occurrence of a target value.", "input": "mylist = [1, 2, 3, 4, 5, 6, 7]\ntarget = 4", "output": "def linear_search(mylist, target):\n for i in range(len(mylist)):\n if mylist[i] == target:\n return i\n return -1", "category": "Python"}, {"instruction": "Initialize an empty list in Python and then add three items to it.", "input": "", "output": "my_list = []\nmy_list.append(\"item1\")\nmy_list.append(\"item2\")\nmy_list.append(\"item3\")", "category": "Python"}, {"instruction": "Create a function to check whether a number entered is prime or not.", "input": "", "output": "def is_prime(number):\n   # If given number is greater than 1\n   if number > 1:\n       # Iterate from 2 to n / 2\n       for i in range(2, number//2):\n           # If num is divisible by any number between \n           # 2 and n / 2, it is not prime\n           if (number % i) == 0:\n               return False\n       else:\n           return True\n# If the number is less than or equal to 1\n   else:\n       return False", "category": "Python"}, {"instruction": "Create a function that takes a number and returns the sum of all its divisors.", "input": "", "output": "def get_divisor_sum(n):\n    divisor_sum = 0\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            divisor_sum += i\n    return divisor_sum", "category": "Python"}, {"instruction": "Make a code to determine whether a given number is prime or not.", "input": "", "output": "def is_prime(x):\n    for i in range(2,int(x**0.5)+1):\n        if x % i == 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Write a function in Python that takes a string and a set of characters as inputs and removes all characters in the string that are in the set.", "input": "string = \"Hello, world!\"\ncharset = [\"o\", \"!\"]", "output": "def removeChars(string, charset):\n\tresult = \"\"\n\tfor c in string:\n\t\tif c not in charset:\n\t\t\tresult += c\n\treturn result", "category": "Python"}, {"instruction": "Given the following array of dictionaries, write a function in Python to find and return the longest common prefix in the keys of dictionaries.", "input": "arr_of_dictionaries = [\n    {\n        \"name\": \"John Doe\",\n        \"country\": \"United States\"\n    },\n    {\n        \"name\": \"Jane Doe\",\n        \"state\": \"New York\"\n    }\n]", "output": "def longest_common_prefix(arr_of_dictionaries):\n    prefix = ''\n    if len(arr_of_dictionaries) == 0:\n        return prefix\n    first_dict_keys = arr_of_dictionaries[0].keys()\n    for i in range(len(list(first_dict_keys)[0])):\n        char = list(first_dict_keys)[0][i]\n        for dict in arr_of_dictionaries:\n            if list(dict.keys())[0][i] != char:\n                return prefix\n        prefix += char\n    return prefix", "category": "Python"}, {"instruction": "Using the given list, create a function in Python that classifies each number as odd or even.", "input": "lst = [1, 2, 6, 8, 4]", "output": "def classifyList(lst):\n    result = []\n    for num in lst: \n        if num % 2 == 0: \n            result.append('even')\n        else:\n            result.append('odd')\n    return result", "category": "Python"}, {"instruction": "Edit the original code snippet so that it prints in the correct syntax for a Python 3 script.", "input": "#!/usr/bin/python\nprint \"Hello, World!\"", "output": "#!/usr/bin/python\nprint(\"Hello, World!\")", "category": "Python"}, {"instruction": "Create a function to generate the nth term in the Fibonacci sequence.", "input": "n = 3", "output": "def get_fib_term(n): \n    if n <= 1: \n        return n \n    else: \n        return get_fib_term(n-1) + get_fib_term(n-2)\n  \nprint(get_fib_term(3))", "category": "Python"}, {"instruction": "Create a program to generate an XOR linked list.", "input": "", "output": "class Node: \n    def __init__(self, data): \n        self.data = data \n        self.npx = None\n  \nclass XORLinkedList: \n    def __init__(self): \n        self.head = None\n  \n    def add(self, item): \n        new_node = Node(item) \n        new_node.npx = self.head \n        if self.head is not None: \n            self.head.npx = new_node.npx ^ self.head.npx \n        self.head = new_node \n  \n    def printList(self): \n        temp = self.head \n        while(temp): \n            print(temp.data), \n            prev = temp \n            temp = self.XOR(temp.npx, prev) \n  \n    def XOR(self, a, b): \n        return (a or b) and (not a or not b) \n  \na = XORLinkedList() \na.add(2) \na.add(3) \na.add(4) \na.add(5) \na.printList()", "category": "Python"}, {"instruction": "Given an array, write a program that checks if any two numbers sum to 0.", "input": "arr = [-3, -2, 1, 2, 3]", "output": "def check_if_sum_zero(arr): \n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] + arr[j] == 0): \n                return True\n    return False\n\nprint(check_if_sum_zero([-3, -2, 1, 2, 3]))", "category": "Python"}, {"instruction": "Using an object-oriented programming language, create a class that has two methods - one to calculate the area of a circle and another to calculate the circumference.", "input": "", "output": "class Circle():\n    def __init__(self, radius):\n        self.radius = radius\n    def area(self): \n        return self.radius ** 2 * 3.14 \n    def circumference(self): \n        return 2 * self.radius * 3.14", "category": "Python"}, {"instruction": "Create an algorithm to sort a list of numbers in ascending order.", "input": "lst = [2, 5, 1, 7, 4]", "output": "def sort_list_ascending(lst):\n    # Traverse through all array elements \n    for i in range(len(lst)): \n  \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(lst)): \n            if lst[min_idx] > lst[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        lst[i], lst[min_idx] = lst[min_idx], lst[i] \n  \n    return lst\n  \n# Driver code to test above \nlst = [2, 5, 1, 7, 4] \nprint(sort_list_ascending(lst))", "category": "Python"}, {"instruction": "Design a function to remove duplicates from an array", "input": "", "output": "def remove_duplicates(arr):\n    # Stores the unique elements\n    unique = []\n\n    # Iterate through the array\n    for elem in arr:\n        # If the element is not already in the unique list\n        if elem not in unique:\n            # Add it to the unique list\n            unique.append(elem)\n\n    # Return the array without duplicates\n    return unique", "category": "Python"}, {"instruction": "Write a Python program to print out the Fibonacci sequence up to 20 numbers", "input": "", "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b \n\n# Driver Program \nprint(\"Fibonacci sequence:\") \nfor i in range(20): \n    print(fibonacci(i))", "category": "Python"}, {"instruction": "Parse the following JSON and extract the value of the variable 'price'.", "input": "`{\n \"item\": \"Shoes\",\n \"price\": 125\n}`", "output": "import json \n\n# parse the JSON string\ndata = json.loads(input_json)\n\n# extract the value of the price variable\nprice = data['price']", "category": "Python"}, {"instruction": "Create a function in Python to evaluate if a given number is prime.", "input": "", "output": "def is_prime(num):\n    if num <= 1: \n        return False\n    for i in range(2, num//2 + 1): \n        if num % i == 0: \n            return False\n    return True", "category": "Python"}, {"instruction": "Write a code to find the maximum subarray sum in an array using dynamic programming.", "input": "", "output": "def maxSubArraySum(arr): \n    n = len(arr) \n  \n    max_so_far = -float('inf') \n    max_ending_here = 0\n  \n    for i in range(0, n): \n        max_ending_here = max_ending_here + arr[i] \n        if (max_so_far < max_ending_here): \n            max_so_far = max_ending_here \n  \n        if max_ending_here < 0: \n            max_ending_here = 0   \n    return max_so_far", "category": "Python"}, {"instruction": "Implement a function in Python to convert a string containing dates from the format MM/DD/YYYY to DD-MM-YYYY.", "input": "\"02/20/2020\"", "output": "def mmddyyyy2ddmmyyyy(date_string):\n    if len(date_string) != 10:\n        raise ValueError('Invalid date format')\n    mm, dd, yyyy = date_string.split('/')\n    new_date_string = '{}-{}-{}'.format(dd, mm, yyyy)\n    return new_date_string", "category": "Python"}, {"instruction": "Rewrite the given JavaScript code in Python.", "input": "let array = [0,1,2,3];\n  const newArray = array.map(item => item + 3);", "output": "array = [0,1,2,3]\nnew_array = list(map(lambda item: item + 3, array))", "category": "Python"}, {"instruction": "Determine the output of the given Python code.", "input": "x = [1, 2, 3, 4, 5] \ny = x \ny[2] = 6", "output": "The output of the given Python code is [1, 2, 6, 4, 5].", "category": "Python"}, {"instruction": "Write a Python code to calculate the sum of natural numbers up to n.", "input": "", "output": "def n_sum(n):\n    sum = 0\n    for i in range(n+1):\n        sum += i\n    return sum", "category": "Python"}, {"instruction": "Create an if-else statement in Python that checks if an integer is even or odd.", "input": "", "output": "if num % 2 == 0:\n    print(\"The number is even\")\nelse:\n    print(\"The number is odd\")", "category": "Python"}, {"instruction": "Given a list of numbers, write a function to find the largest value in the list.", "input": "lst = [1, 5, 9, 12, 8]", "output": "def get_largest_value(lst):\n    max_value = lst[0]\n    for num in lst:\n        if num > max_value:\n            max_value = num\n    return max_value\n\nprint(get_largest_value(lst))", "category": "Python"}, {"instruction": "Concisely describe how a Linked List works.", "input": "", "output": "A linked list is a linear data structure in which each node is comprised of a data element as well as a pointer to the next node in the list. This allows it to form a chain, with each node pointing to the next node in the list and the last node pointing to null.", "category": "Python"}, {"instruction": "Create a program in Python that calculates the average of numbers in a list.", "input": "[9, 5, 10, 12]", "output": "def average(numbers):\n    return sum(numbers) / len(numbers)\n\nprint(average([9, 5, 10, 12]))   # Output: 9.5", "category": "Python"}, {"instruction": "Create a Python function to parse a string and remove all special characters.", "input": "", "output": "import re\n\ndef remove_special_chars(s):\n    return re.sub(r'[^\\w\\s]','', s)", "category": "Python"}, {"instruction": "Create a class in Python called 'Car' and add instance variables for the car's make, model and year.", "input": "", "output": "class Car:\n    \n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year", "category": "Python"}, {"instruction": "Write a Python program to print out the list of even numbers from 0 to given limit.", "input": "limit = 10", "output": "# declare list of numbers\nnumbers = [x for x in range(0, limit+1)]\n\n# declare empty list of even numbers\neven_numbers = []\n\n# loop through list of numbers\nfor num in numbers:\n    # if number is even, append to even_numbers list\n    if num % 2 == 0:\n        even_numbers.append(num)\n\n# print even numbers\nprint(even_numbers) # Output: [0, 2, 4, 6, 8, 10]", "category": "Python"}, {"instruction": "Complete the following code to shuffle an array of elements.", "input": "#Declaring an array\narr = [1, 2, 3, 4, 5]\n\n# Your code\ndef shuffle(arr):", "output": "#Declaring an array\narr = [1, 2, 3, 4, 5]\n\n# Your code\ndef shuffle(arr):  \n    for i in range(len(arr)-1, 0, -1): \n        j = random.randint(0, i+1)\n        arr[i], arr[j] = arr[j], arr[i] \n    return arr", "category": "Python"}, {"instruction": "Suggest a better algorithm to find the minimum element in a given array.", "input": "", "output": "The better algorithm would be to use a divide and conquer approach. This approach involves splitting the array into two halves, finding the minimum element in each half and then comparing the two elements to determine the overall minimum. This is a faster algorithm than the linear search approach in which we traverse the array from start to end and compare each element with the current minimum.", "category": "Python"}, {"instruction": "Explain what a for loop does in Python.", "input": "", "output": "A for loop in Python is used to iterate over a sequence (list, tuple, string) or other iterable objects. It executes a set of statements specified in the for loop for each item of the sequence. It makes it easier to write and execute code multiple times without having to write the same code multiple times.", "category": "Python"}, {"instruction": "Edit a python function to generate the fibonacci sequence.", "input": "def fibonacci(n):\n    a = 1\n    b = 0\n    for i in range(n):\n        print(a)\n        a, b = b, a+b", "output": "def fibonacci(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        print(a)\n        a, b = b, a+b", "category": "Python"}, {"instruction": "Create a loop to traverse a given binary tree.", "input": "", "output": "def traverse_tree(root):\n\n    # Initialize the stack\n    stack = [root]\n\n    # traversal loop\n    while stack:\n        node = stack.pop()\n\n        # Do something with the node\n        ...\n\n        # Push the left and right nodes to the stack\n        if node.right:\n            stack.append(node.right)\n        if node.left:\n            stack.append(node.left)", "category": "Python"}, {"instruction": "Design a program to find the occurrence of a given character in a given string.", "input": "Given string: \"Hello World!\"\nCharacter to find: o", "output": "def occurance_count(str, char):\n    count = 0\n    for c in str:\n        if c == char:\n            count += 1\n    \n    return count", "category": "Python"}, {"instruction": "Design a program to find the nth Fibonacci number.", "input": "n: 10", "output": "def nth_fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        n1, n2 = 1, 1\n        for i in range(2, n):\n            n1, n2 = n2, n1 + n2\n        return n2", "category": "Python"}, {"instruction": "Design a program to find the intersection of two given arrays.", "input": "list_one=[5, 10, 15, 20, 25]\nlist_two=[15, 17, 20, 22, 25, 27]", "output": "def intersection(list_one, list_two):\n    lst = []\n    for i in list_one:\n        if i in list_two:\n            lst.append(i)\n    return lst", "category": "Python"}, {"instruction": "Design a program to flatten a given list.", "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def flatten_list(lst):\n    res = []\n    for l in lst:\n        for i in l:\n            res.append(i)\n    return res", "category": "Python"}, {"instruction": "Design a program to compare two sorted lists and returning list with the common elements.", "input": "list_one=[5, 10, 15, 20, 25]\nlist_two=[15, 17, 20, 22, 25, 27]", "output": "def compare_list(list_one, list_two):\n    common_list = []\n    i, j = 0, 0\n    while (i < len(list_one) and j < len(list_two)):\n        if list_one[i] == list_two[j]:\n            common_list.append(list_one[i])\n            i += 1\n            j += 1\n        elif list_one[i] < list_two[j]:\n            i += 1\n        else:\n            j += 1\n    return common_list", "category": "Python"}, {"instruction": "Rewrite the following code so it can take a list as input instead of an integer.", "input": "def list_sum(num):\n    total = 0\n    for x in range(num):\n        total += x\n    return total", "output": "def list_sum(input_list):\n    total = 0\n    for item in input_list:\n        total += item\n    return total", "category": "Python"}, {"instruction": "Write a Python function to check whether a string has all unique characters.", "input": "", "output": "def all_unique(string): \n  # loops through each character in string \n  for char in string: \n  \n    # if character appears more than once, \n    # return False \n    if string.count(char) > 1: \n      return False \n      \n  # return True if no characters appear more than once\n  return True", "category": "Python"}, {"instruction": "Write a Python program to find out the common items from two given arrays.", "input": "arr1 = [1, 2, 3, 5, 7 ]\narr2 = [2, 3, 5, 6, 7]", "output": "common_items = []\n\nfor item in arr1:\n  if item in arr2:\n    common_items.append(item)\n\nprint(common_items)  # Output: [2, 3, 5, 7]", "category": "Python"}, {"instruction": "Edit the following code snippet to add an error handling that allows the function to return an appropriate message when an invalid input is received.", "input": "def factorial(n):\n  \tif n == 0:\n  \t   return 1\n\telse:\n  \t   return n * factorial(n-1)", "output": "def factorial(n):\n  if n < 0:\n    return \"Invalid input!\"\n  elif n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)", "category": "Python"}, {"instruction": "Modify the following code to handle an input which is a negative number.", "input": "def power_func(number):\n    if number >= 0:\n        return number**2", "output": "def power_func(number):\n    if number < 0:\n        return \"Invalid input!\"\n    else:\n        return number**2", "category": "Python"}, {"instruction": "Improve the following code to handle an input which is an empty list.", "input": "def check_even(arr):\n    if arr == []:\n        return \"The list is empty!\"\n    else:\n        return all(x % 2 == 0 for x in arr)", "output": "def check_even(arr):\n    if arr == []:\n        return \"The list is empty!\"\n    elif not arr:\n        return \"The list is empty!\"\n    else:\n        return all(x % 2 == 0 for x in arr)", "category": "Python"}, {"instruction": "What data type should you use to store a list like [4, 7, 2] in a Python variable?", "input": "", "output": "The data type you should use to store a list like [4, 7, 2] in a Python variable is a list. The list type is specified using square brackets when declaring the variable. For example: my_list = [4, 7, 2].", "category": "Python"}, {"instruction": "Write a function to remove all duplicate elements in an array.", "input": "data = [1, 2, 3, 2, 4, 5]", "output": "def remove_duplicates(data):\n    \"\"\"Remove all duplicate elements in an array\"\"\"\n    \n    # Initialize an empty list\n    unique_data = []\n\n    # Iterate over the data\n    for i in data:\n        # Check if element is not already in list\n        if i not in unique_data:\n            # If not, then add to list\n            unique_data.append(i)\n    \n    return unique_data\n\nprint(remove_duplicates(data)) # prints [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Write a code to print out all the prime numbers between 2 and 10.", "input": "", "output": "# initialize an empty list to store prime numbers\nprime_numbers = []\n\n# Iterate over the range from 2 to 10\nfor num in range(2, 11):\n    cnt = 0\n    # check if the number is divisible by any natural number from 2 to num-1\n    for i in range(2, num):\n        if num % i == 0:\n            cnt += 1\n    # if the number is not divisible by any of the numbers then add to the list\n    if cnt == 0:\n        prime_numbers.append(num)\n\nprint(prime_numbers) # prints [2, 3, 5, 7]", "category": "Python"}, {"instruction": "Write a code to find the square of the first n numbers.", "input": "", "output": "def square_of_first_n_number(n):\n    \"\"\"Find the square of the first n numbers\"\"\"\n    \n    # Initialize an empty list\n    squares = []\n\n    # Iterate to the first n numbers\n    for i in range(n):\n        # Compute the square and append to the list\n        squares.append(i * i)\n\n    return squares", "category": "Python"}, {"instruction": "Modify the function to also remove all whitespace from the string.", "input": "", "output": "import re\n\ndef remove_special_chars_and_whitespace(s):\n    return re.sub(r'\\s','', re.sub(r'[^\\w\\s]','', s))", "category": "Python"}, {"instruction": "Group a list of dictionaries by a shared key.", "input": "mylist = [{'name': 'john', 'age': 20}, {'name': 'jane', 'age': 19}, {'name': 'bob', 'age': 22}]", "output": "from collections import defaultdict\n\ngrouped_dicts = defaultdict(list)\n\nfor x in mylist:\n grouped_dicts[x['name']].append(x)", "category": "Python"}, {"instruction": "Using list comprehension, create a list of even numbers between 1 and 20 in Python.", "input": "", "output": "even_nums_list = [num for num in range(1, 21) if num % 2 == 0]", "category": "Python"}, {"instruction": "Debug the code to encounter the issue mentioned in the comment.", "input": "def validate_password(password):\n    if len(password) < 8:\n        # bug: print message\n        return False\n    else:\n        return True", "output": "def validate_password(password):\n    if len(password) < 8:\n        # bug: print message\n        print('Password must be at least 8 characters.')\n        return False\n    else:\n        return True", "category": "Python"}, {"instruction": "Reverse a given string.", "input": "\"Hello World!\"", "output": "# Initialize the input string\nstring = \"Hello World!\"\n \n# Get the string length\nstringLength = len(string)\n \n# Create an empty string for storing the reversed string\nreversedString = \"\"\n \n# Iterate over the input string in reverse order\nfor i in range(stringLength -1, -1, -1):\n    reversedString += string[i]\n \n# Print the reversed string\nprint(reversedString) # Prints !dlroW olleH", "category": "Python"}, {"instruction": "Implement a non-recursive algorithm to compute the factorial of a given number", "input": "7", "output": "def factorial(n): \n    res = 1 \n    # Calculate value of \n    # factorial in for loop \n    for i in range(2,n+1): \n        res = res * i \n    return res \n\nn = 7\nprint(\"Factorial of\",n,\"is\",factorial(n))", "category": "Python"}, {"instruction": "Return a new array after removing duplicates from a given array.", "input": "[1, 2, 3, 2, 3, 4]", "output": "def remove_duplicates(arr):\n    \"\"\"\n    Return a new array after removing duplicates from a given array.\n    \"\"\"\n    new_arr = []\n    for num in arr:\n        if num not in new_arr:\n            new_arr.append(num)\n    return new_arr\n\narr = [1, 2, 3, 2, 3, 4]\nnew_arr = remove_duplicates(arr)\nprint(new_arr)", "category": "Python"}, {"instruction": "Return the index of a given value in a list.", "input": "[1,2,3], 3", "output": "def find_index(lst, value):\n    \"\"\"\n    Return the index of a given value in a list.\n    \"\"\"\n    for i, v in enumerate(lst):\n        if v == value:\n            return i\n    return -1\n\nlst = [1,2,3]\nval = 3\nfind_index(lst, val)", "category": "Python"}, {"instruction": "Generate a list comprehension that has the multiples of 3 between 0 and 30", "input": "", "output": "multiples_of_3 = [x for x in range(0, 31) if x % 3 == 0]", "category": "Python"}, {"instruction": "Sort the given array using insertion sort", "input": "[5, 1, 4, 2, 8]", "output": "def insertion_sort(arr):\n    \"\"\"\n    Sort given array using insertion sort\n    \"\"\"\n    # Traverse through the array \n    for i in range(1, len(arr)): \n        key = arr[i] \n  \n        # Move elements of arr[0..i-1], that are \n        # greater than key, to one position ahead \n        # of their current position \n        j = i - 1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \n    return arr\n\narr = [5, 1, 4, 2, 8]\nsorted_arr = insertion_sort(arr)\nprint(sorted_arr)", "category": "Python"}, {"instruction": "Find the minimum of two given numbers.", "input": "4, 6", "output": "def min_two(a, b):\n  if a < b:\n    return a\n  else:\n    return b\n\nmin_val = min_two(4, 6)\nprint(min_val)", "category": "Python"}, {"instruction": "Implement the code in the input to the output", "input": "def do_something(data):\n    # TODO: Your code here\n    pass", "output": "def do_something(data):\n    # Your code here\n    result = 1\n    for num in data:\n        result *= num\n    return result", "category": "Python"}, {"instruction": "Create a class that creates a stack object and implements push and pop functions", "input": "", "output": "class Stack: \n\tdef __init__(self): \n\t\tself.stack = [] \n\n\t# This method adds an element at the top of the stack \n\tdef push(self, item): \n\t\tself.stack.append(item) \n \n\t# This method removes the topmost element and returns it \n\tdef pop(self): \n\t\tif self.is_empty(): \n\t\t\treturn None\n\t\treturn self.stack.pop() \n  \n\t# This method returns the topmost element without removing it \n\tdef peek(self): \n\t\tif self.is_empty(): \n\t\t\treturn None\n\t\treturn self.stack[-1] \n  \n\t# This method returns true or false depending on whether the stack is empty or not \n\tdef is_empty(self): \n\t\treturn len(self.stack) == 0", "category": "Python"}, {"instruction": "Generate a list that has the all even numbers between 1 and 50, inclusive.", "input": "", "output": "even_nums_list = [x for x in range(1,51) if x % 2 == 0]", "category": "Python"}, {"instruction": "Write a function to return the index of an item in an array.", "input": "arr = [1, 2, 3, 4, 5]\nx = 4", "output": "def index(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Compute the sum of two given lists", "input": "[2,3,4], [1,2,3]", "output": "def sum_lists(lst1, lst2):\n    \"\"\"\n    Compute the sum of two given lists.\n    \"\"\"\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i] + lst2[i])\n    return new_list\n\nlst1 = [2,3,4]\nlst2 = [1,2,3]\nsum_lst = sum_lists(lst1, lst2)\nprint(sum_lst)", "category": "Python"}, {"instruction": "Modify the given code to multiply two n x n matrices.", "input": "def multiply(m1, m2, n):\n    result = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        for j in range(n): \n            result[i][j] = 0", "output": "def multiply(m1, m2, n):\n    result = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                result[i][j] += m1[i][k] * m2[k][j]\n    return result", "category": "Python"}, {"instruction": "Modify the following code to get the desired output.", "input": "for i in range(1, 7):\n    for j in range(1, i):\n        print(j)", "output": "for i in range(1, 7):\n    for j in range(1, i+1):\n        print(j, end=' ')\n    print()", "category": "Python"}, {"instruction": "Provide a function to find the length of a string.", "input": "", "output": "def length(s):\n    i = 0\n    for ch in s:\n        i += 1\n    return i", "category": "Python"}, {"instruction": "Create an algorithm to detect if a string is a palindrome or not.", "input": "", "output": "def isPalindrome(s): \n    reversedString = s[::-1] \n  \n    if (s == reversedString): \n        return True\n    return False", "category": "Python"}, {"instruction": "Read the given code block and debug it.", "input": "def main():\n print(\"Hey I'm here\")\n if n == 0: \n  print(\"Hey I'm there\")\nmain()", "output": "Error: n is not defined.\n\nThe given code is trying to use the variable n, which is not declared. To fix this, it should be declared before the if statement. The modified code is as follows:\n\ndef main():\n print(\"Hey I'm here\")\n n = 0\n if n == 0: \n  print(\"Hey I'm there\")\nmain()", "category": "Python"}, {"instruction": "Create a basic neural network model to distinguish between cats and dogs.", "input": "", "output": "Model Building Code:\nmodel = Sequential([\n    Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),\n    MaxPooling2D(2,2),\n    Conv2D(64, (3,3), activation='relu'),\n    MaxPooling2D(2,2),\n    Flatten(),\n    Dense(512, activation='relu'),\n    Dense(1, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])", "category": "Python"}, {"instruction": "Write a function that takes a sentence and returns the string with all occurrences of the longest word removed.", "input": "\"This is a very long sentence\"", "output": "def remove_longest_word(sentence): \n    # Split the sentence into words \n    words = sentence.split(' ')\n\n    # Find the longest word \n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word): \n            longest_word = word \n\n    # Remove all occurrences of the longest word\n    new_sentence = [] \n    for word in words:\n        if word != longest_word: \n            new_sentence.append(word) \n    \n    # Join the list back into a string and return it \n    return \" \".join(new_sentence)\n\nprint(remove_longest_word(\"This is a very long sentence\")) # This is a sentence", "category": "Python"}, {"instruction": "Create a function that takes a list of numbers and returns the index of the largest number.", "input": "[2, 5, 12, 3, 4]", "output": "def find_largest_number(nums): \n    # Initialize the index of the largest number.\n    largest_index = 0\n\n    # Loop through the list of numbers and\n    # compare each number to the other. \n    # Update the index of the largest number. \n    for i in range(len(nums)):\n        if nums[i] > nums[largest_index]:\n            largest_index = i\n    \n    # Return the index of the largest number.\n    return largest_index\n\nprint(find_largest_number([2, 5, 12, 3, 4])) # 2", "category": "Python"}, {"instruction": "How would you modify the following code to make it more efficient?", "input": "def find_word(word, text):\n    if word in text:\n        return \"Word found\"\n    else:\n        return \"Word not found\"", "output": "def find_word(word, text):\n    # Use the 'in' operator to check if the word is in the text\n    if word in text:\n        return \"Word found\"\n    else:\n        return \"Word not found\"\n\n# Use the 'count' method to check if the word is in the text more efficiently\nif text.count(word) > 0:\n    return \"Word found\"\nelse:\n    return \"Word not found\"", "category": "Python"}, {"instruction": "Create a function that takes the string of the current time and returns the time in minutes.", "input": "\"12:30PM\"", "output": "def convert_to_minutes(time): \n    # Split the time into hours and minutes \n    h, m = map(int, time.split(':'))\n\n    # Add 12 to the hours if the time is PM \n    if time.endswith('PM'): \n        h += 12\n    return h * 60 + m\n\nprint(convert_to_minutes(\"12:30PM\")) # 750", "category": "Python"}, {"instruction": "Write a function that takes a string of numbers separated by commas and returns the sum of all the numbers.", "input": "\"1,2,3,4\"", "output": "def sum_numbers(nums): \n    nums = nums.split(',')\n    total = 0\n  \n    # Traverse the string and add all elements \n    # of it to the total. \n    for i in range(len(nums)): \n        total += int(nums[i]) \n  \n    # return total \n    return total \n\nprint(sum_numbers(\"1,2,3,4\")) # 10", "category": "Python"}, {"instruction": "Write a function that takes in two strings as input and outputs True if they are anagrams, False otherwise.", "input": "s1 = \u201csilent\u201d\ns2 = \u201clisten\u201d", "output": "def anagrams(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    s1_arr = list(s1)\n    s2_arr = list(s2)\n    s1_arr.sort()\n    s2_arr.sort()\n    for i in range(len(s1_arr)):\n        if s1_arr[i] != s2_arr[i]:\n            return False\n    return True", "category": "Python"}, {"instruction": "Construct a class to represent a student", "input": "", "output": "class Student():\n  def __init__(self, first_name, last_name, email, street, city, state, zip_code):\n    self.first_name = first_name\n    self.last_name = last_name\n    self.email = email\n    self.street = street\n    self.city = city\n    self.state = state\n    self.zip_code = zip_code\n  \n  def change_email(self, new_email):\n    self.email = new_email", "category": "Python"}, {"instruction": "Create a function to compute the square root of a given number", "input": "9", "output": "def sqrt(n):\n    \"\"\"\n    Compute the square root of a given number\n    \"\"\"\n    r = n\n    while r*r > n:\n        r = (r + n/r) // 2\n    return r\n\nn = 9\nval = sqrt(n)\nprint(val)", "category": "Python"}, {"instruction": "Create a method that prints all elements of an array", "input": "[1,2,3]", "output": "def print_elements(arr):\n    \"\"\"\n    Print all elements of an array.\n    \"\"\"\n    for num in arr:\n        print(num)\n\narr = [1,2,3]\nprint_elements(arr)", "category": "Python"}, {"instruction": "Develop a function to find all elements in a given array which appear more than once.", "input": "nums = [4, 3, 6, 7, 3, 8, 4, 9]", "output": "def find_duplicates(nums):\n    duplicates = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j]:\n                duplicates.append(nums[i])\n    return duplicates", "category": "Python"}, {"instruction": "Develop a program that takes a number and prints \"true\" if it is a prime number, and \"false\" otherwise.", "input": "", "output": "def is_prime(number):\n  if number<1:\n    return False\n  for check in range(2,number):\n    if number%check==0:\n      return False\n  return True", "category": "Python"}, {"instruction": "Create a coding program that sorts a given list of numbers into ascending order.", "input": "[4, 3, 2, 5, 9, 1, 8]", "output": "def ascending_order(arr): \n\n# Bubble sort algorithm. \n    n = len(arr) \n   \n    # Traverse through all array elements \n    for i in range(n): \n   \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n   \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n                \n    return arr\n\n# Test \narr = [4, 3, 2, 5, 9, 1, 8]\n\nascending_order(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "category": "Python"}, {"instruction": "Develop an algorithm in Python to calculate the factorial of a given number n.", "input": "", "output": "def factorial(n): \n   if n == 0: \n       return 1\n   elif n > 0: \n       return n * factorial(n-1) \n   else: \n       return \"Enter a positive integer\"", "category": "Python"}, {"instruction": "Generate a random string of 8 characters with at least 1 digit.", "input": "", "output": "import random\n\ndef generate_random_string():\n    chars = string.ascii_letters + string.digits\n    return ''.join(random.choice(chars) for _ in range(8))", "category": "Python"}, {"instruction": "Edit the following code to check for even numbers in the array.", "input": "arr = [1, 2, 3, 4, 5]", "output": "arr = [1, 2, 3, 4, 5]\n\nfor i in arr: \n if i % 2 == 0 : \n print(i)", "category": "Python"}, {"instruction": "Create an algorithm for searching for an element in a sorted array.", "input": "arr = [2, 4, 6, 8, 10]\ntarget = 6", "output": "def binary_search(arr, target):\n  low = 0\n  high = len(arr) - 1\n\n  while low <= high: \n    mid = (low + high) // 2\n    if arr[mid] == target: \n      return mid \n    elif arr[mid] < target: \n      low = mid + 1\n    else: \n      high = mid - 1\n  return -1", "category": "Python"}, {"instruction": "Sort the following array using the merge sort algorithm.", "input": "arr = [4, 10, 5, 1, 8, 9]", "output": "def merge_sort(arr):\n    if len(arr) > 1: \n      mid = len(arr)//2\n      left_arr = arr[:mid]\n      right_arr = arr[mid:]\n\n      merge_sort(left_arr)\n      merge_sort(right_arr)\n\n      i = j = k = 0\n\n      while i < len(left_arr) and j < len(right_arr): \n        if left_arr[i] < right_arr[j]: \n            arr[k] = left_arr[i] \n            i+=1\n        else: \n            arr[k] = right_arr[j] \n            j+=1\n        k+=1\n      while i < len(left_arr): \n        arr[k] = left_arr[i] \n        i+=1\n        k+=1\n      \n      while j < len(right_arr): \n        arr[k] = right_arr[j] \n        j+=1\n        k+=1", "category": "Python"}, {"instruction": "Create an algorithm to find the smallest positive integer not present in an array.", "input": "arr = [2, 3, 7, 6, 8, -1, -10, 15]", "output": "def find_missing(arr):\n  # sort the array\n  arr.sort()\n  \n  # iterate through the array \n  # to find the smallest positive integer not present \n  for i in range(len(arr)):\n    if arr[i] > 0:\n      if arr[i+1] != arr[i] + 1:\n        return arr[i] + 1\n  return arr[-1] + 1", "category": "Python"}, {"instruction": "Write a function that takes an array of integers and returns the minimum difference between two consecutive elements.", "input": "arr = [4, 2, 7, 5, 1]", "output": "def min_difference(arr):\n  min_diff = abs(arr[1] - arr[0])\n  for i in range(1, len(arr)-1):\n    diff = abs(arr[i+1] - arr[i])\n    if diff < min_diff:\n      min_diff = diff\n  return min_diff", "category": "Python"}, {"instruction": "Create a program to compare the elements of three arrays and print the elements that are present in all the arrays.", "input": "arr1 = [2, 3, 4]\narr2 = [1, 2, 5]\narr3 = [2, 4, 6]", "output": "def compare_arrays(arr1, arr2, arr3):\n  common_elements = []\n  for elem in arr1:\n    if elem in arr2 and elem in arr3:\n      common_elements.append(elem)\n  print(common_elements)", "category": "Python"}, {"instruction": "Write a function that prints an array elements in a reverse order.", "input": "arr = [0, 1, 2, 3, 4, 5]", "output": "def reverse_print_array(arr):\n  for i in range(len(arr)-1, -1, -1):\n    print(arr[i])", "category": "Python"}, {"instruction": "Create a function that takes a number \"n\" as an argument and returns the nth Fibonacci number", "input": "n = 15", "output": "def fibonacci(n): \n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return fibonacci(n-1) + fibonacci(n-2) \n  \nfibonacci(15)", "category": "Python"}, {"instruction": "What is Big O notation?", "input": "", "output": "Big O notation is a measure of the complexity of an algorithm. It describes the worst-case complexity of a given algorithm in terms of time and/or space as the problem size increases.  It can indicate whether an algorithm's performance increases linearly or exponentially as the problem size increases.", "category": "Python"}, {"instruction": "Write a Python program to find the unique elements in a list.", "input": "2, 3, 9, 5, 2, 4, 9", "output": "def unique_elements(input_list): \n    result_list = []\n    for item in input_list: \n        if item not in result_list: \n            result_list.append(item)\n    return result_list\n\ninput_list = [2, 3, 9, 5, 2, 4, 9]\nprint(unique_elements(input_list))\n# Output: [2, 3, 9, 5, 4]", "category": "Python"}, {"instruction": "What is the difference between a sequential and a parallel collection?", "input": "", "output": "The difference between a sequential and a parallel collection is the way in which data is processed. A sequential collection is processed one item at a time, from start to finish in a single thread. A parallel collection is processed in chunks at the same time, using multiple threads. The main advantage of using a parallel collection is that it can take advantage of multiple cores in a processor, allowing for faster data processing.", "category": "Python"}, {"instruction": "What is the importance of writing unit tests?", "input": "", "output": "The importance of writing unit tests is to ensure that the code works correctly and produce the expected results. By writing automated unit tests, developers can quickly and easily detect bugs and errors in their code. Unit tests also help with the building of reliable system architectures since the code is thoroughly tested even before the application is released. Unit tests also help in the code maintenance process since programmers can quickly identify changes made in the code that introduces bugs.", "category": "Python"}, {"instruction": "Complete the following code to implement a binary search.", "input": "def binary_search(arr, x):", "output": "def binary_search(arr, x):\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1", "category": "Python"}, {"instruction": "Generate an artificial neural network code to recognize alphanumeric digits.", "input": "", "output": "import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPool2D\n\n# define model\nmodel = Sequential()\n\n# add layers\nmodel.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 3)))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))\n\n# compile model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# fit model\nmodel.fit(x_train, y_train, epochs=10)\n\n# evaluate model\nscore = model.evaluate(x_test, y_test, verbose=0)", "category": "Python"}, {"instruction": "What is the cut-off frequency of a high-pass filter?", "input": "", "output": "The cut-off frequency of a high-pass filter is the frequency at which the output signal is significantly reduced in magnitude compared with the input signal. It is used to remove low frequency components from a signal. It is commonly measured in hertz (Hz).", "category": "Python"}, {"instruction": "Write a code to create a 2-D array with size (4,4) and fill it with 1's.", "input": "", "output": "arr = [[1 for _ in range(4)] for _ in range(4)]", "category": "Python"}, {"instruction": "Merge two sorted lists into a single sorted list", "input": "list1 = [1,3,5,7] \nlist2 = [2,4,6,8]", "output": "def merge_sorted_lists(list1, list2):\n    merged_list = []\n    i = 0\n    j = 0\n\n    # Iterate through the lists until all elements have been merged\n    while (i < len(list1) and j < len(list2)):\n        # If the element from the first list is smaller, add it \n        # to the merged list\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i+=1\n        # Otherwise add the element from the second list\n        else:\n            merged_list.append(list2[j])\n            j+=1\n \n    # Append any remaining elements from the first list\n    while i < len(list1):\n        merged_list.append(list1[i])\n        i+=1\n \n    # Append any remaining elements from the second list\n    while j < len(list2):\n        merged_list.append(list2[j])\n        j+=1\n \n    return merged_list", "category": "Python"}, {"instruction": "Replace the \"TODO\" placeholder in the following python code.", "input": "def add_two_numbers(a, b):\n    '''This function takes two numbers and returns their sum.'''\n    # TODO", "output": "def add_two_numbers(a, b):\n    '''This function takes two numbers and returns their sum.'''\n    return a + b", "category": "Python"}, {"instruction": "Create a neural network in Python to recognize handwriting.", "input": "MNIST hand-written digit dataset", "output": "The code to create a neural network in Python to recognize handwriting should consist of several parts. These parts include importing the MNIST dataset, preprocessing the data, building the neural network model, training the network, evaluting the network's performance, and improving the accuracy using hyperparameters.", "category": "Python"}, {"instruction": "Create a program to check if two given strings are a rotation of each other.", "input": "string1 = \"abcd\", string2= \"cdab\"", "output": "def isRotation(s1, s2):   \n    if len(s1) != len(s2): \n        return False\n  \n    temp = s1 + s1 \n    return (temp.count(s2) > 0)", "category": "Python"}, {"instruction": "Create an algorithm to sort a given array in ascending order using Bubble sort.", "input": "", "output": "def bubble_sort(arr): \n    # length of the array \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n-1): \n   \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]", "category": "Python"}, {"instruction": "Create a function to calculate the Levenshtein distance between two strings", "input": "str1 = \"geeks\", str2 = \"geek\"", "output": "def lev_dist(str1, str2):\n    if len(str1) < len(str2):\n        return lev_dist(str2, str1)\n    \n    if len(str2) == 0:\n        return len(str1)\n \n    previous_row = range(len(str2) + 1)\n    for i, c1 in enumerate(str1):\n        current_row = [i + 1]\n        for j, c2 in enumerate(str2):\n            insertions = previous_row[j + 1] + 1\n            deletions = current_row[j] + 1\n            substitutions = previous_row[j] + (c1 != c2)\n            current_row.append(min(insertions, deletions, substitutions))\n        previous_row = current_row\n    \n    return previous_row[-1]", "category": "Python"}, {"instruction": "You are given a list of numbers. Write a program to check if the given list is a palindrome or not.", "input": "[1, 2, 3, 2, 1]", "output": "def is_palindrome(arr):\n  rev_arr = arr[::-1]\n  if arr == rev_arr:\n    return True\n  else:\n    return False\n\nprint(is_palindrome([1, 2, 3, 2, 1]))", "category": "Python"}, {"instruction": "Manipulate a given list to get a single string.", "input": "[\"Hello\", \"World\", \"!\"]", "output": "def create_string(arr):\n  string = ''\n  for elem in arr:\n    string += elem\n  return string\n\nprint(create_string(['Hello', 'World', '!']))", "category": "Python"}, {"instruction": "You are given a string of symbols. Write a program to remove all the symbols and get a valid text string.", "input": "\"This , is an example string %\"", "output": "def remove_symbols(string):\n  text_string = ''\n  for c in string:\n    if c.isalpha() or c.isdigit():\n      text_string += c\n  \n  return text_string\n\nprint(remove_symbols(\"This , is an example string %\"))", "category": "Python"}, {"instruction": "You are given two strings. Write a function that checks whether the two strings are an anagram or not.", "input": "\"listen\", \"silent\"", "output": "def is_anagram(str1, str2):\n  str1 = str1.lower()\n  str2 = str2.lower()\n  if sorted(str1) == sorted(str2):\n    return True\n  else:\n    return False\n\nprint(is_anagram('listen', 'silent'))", "category": "Python"}, {"instruction": "You are given an array of integers. Write a program to find the maximum number in this array.", "input": "[10, 5, 11, 23, 9]", "output": "def max_int(arr):\n  max_val = arr[0]\n  for i in range(1, len(arr)):\n    if arr[i] > max_val:\n      max_val = arr[i]\n  return max_val\n\nprint(max_int([10, 5, 11, 23, 9]))", "category": "Python"}, {"instruction": "When should the `break` keyword be used in a loop?", "input": "", "output": "The break keyword should be used in a loop when the loop needs to be terminated before it has finished executing its normal iterations. The break statement will cause the loop to exit immediately, bypassing any remaining code in the loop.", "category": "Python"}, {"instruction": "What is the purpose of a try-catch block in Python?", "input": "", "output": "The try-catch block is used in Python to handle exceptions. It is a construct used to catch and handle any unexpected errors that may occur in a program, allowing the program to continue running instead of crashing. The statements under the try block are the ones that may raise the exception, and the except block contains code that will be executed if an error does occur. The finally block is generally used to perform clean-up operations, regardless of whether an error occurs or not.", "category": "Python"}, {"instruction": "Identify the bug in the given code snippet.", "input": "function double_sum(nums) {\n for (let i = 0; i <= nums.length; i++) {\n  sum += nums[i] * 2;\n }\n}", "output": "The bug in the code is that it is looping one time too many. The correct version should use a less than or equal operator ('<=') instead of a less than operator ('<') in the for loop.", "category": "Python"}, {"instruction": "Construct a program to parse a JSON array.", "input": "[{\"name\":\"John\", \"age\":30},{\"name\":\"Alice\", \"age\":25}]", "output": "import json\n\ndata = [{\"name\":\"John\", \"age\":30},{\"name\":\"Alice\", \"age\":25}]\n\nfor entry in data:\n    name = entry['name']\n    age = entry['age']\n    print(f'The name is {name} and age is {age}')", "category": "Python"}, {"instruction": "Create a function that outputs the minimum and maximum ofa list of numbers.", "input": "list = [1, 3, 7, -2, 4]", "output": "def minmax(list)\n    min = list[0]\n    max = list[0]\n    for num in list[1:]:\n        if num < min:\n            min = num\n        if num > max:\n            max = num\n\n    return min, max", "category": "Python"}, {"instruction": "Write a Python function to compute the factorial of an integer.", "input": "", "output": "def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)", "category": "Python"}, {"instruction": "Write a function that takes a string as an argument, reverses the characters, and returns the reversed string.", "input": "", "output": "def reverse_string(string):\n    reversed_string = \"\"\n    for i in range(len(string)-1, -1, -1):\n        reversed_string += string[i]\n    return reversed_string", "category": "Python"}, {"instruction": "How can you count the frequency of each word in a given string?", "input": "This is a string", "output": "str = \"This is a string\" \nwords = str.split()\ncount = {} \n  \nfor word in words: \n    if word in count: \n        count[word] += 1\n    else: \n        count[word] = 1\n        \nprint(count)\n\n# Output: {'This': 1, 'is': 1, 'a': 1, 'string': 1}", "category": "Python"}, {"instruction": "Create a basic REST API in python that takes a string as input and returns the reversed string", "input": "", "output": "from fastapi import FastAPI\n@app.get(\"/reverse-string/{string}\")\n\ndef reverse_string(string: str):\n    return string[::-1]", "category": "Python"}, {"instruction": "Build a model using scikit-learn that classifies the given text data into \u2018Positive\u2019 or \u2018Negative\u2019.", "input": "The customer service was great, and I will definitely recommend this product to others.", "output": "from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LogisticRegression\n\n# Create arrays for the features and the label\nX = ['The customer service was great, and I will definitely recommend this product to others.'] \ny = ['Positive']\n\n# Create a CountVectorizer for parsing/counting words\ncv = CountVectorizer()\n \n# Parse the data with the vectorizer\nX = cv.fit_transform(X)\n \n# Create train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n \n# Create the model, train it, then test it\nmodel = LogisticRegression() \nmodel.fit(X_train, y_train) \nmodel.score(X_test, y_test)", "category": "Python"}, {"instruction": "How would you write a program to find the number of prime numbers between 0 and 100?", "input": "", "output": "def count_prime_num(x, y): \n  \n    prime_count = 0\n  \n    for num in range(x, y + 1): \n       \n       if num > 1: \n           for i in range(2, num): \n               if (num % i) == 0: \n                   break\n           else: \n               prime_count += 1\n  \n    return prime_count \n\nprint(count_prime_num(0, 100))", "category": "Python"}, {"instruction": "Write an algorithm to remove vowels from a string.", "input": "", "output": "def remove_vowels(string): \n      \n    # vowels list\n    vowels = ['a', 'e', 'i', 'o', 'u']  \n    stringWithoutVowels = \"\" \n      \n    for x in string: \n        if x not in vowels: \n            stringWithoutVowels += x \n              \n    return stringWithoutVowels", "category": "Python"}, {"instruction": "Build a Python program to transform a string in a dictionary.", "input": "String: \" John, 26, Movie Watch, Jane, 31, Book Reader, Charlotte, 25, Music Listener\"", "output": "people_dict = {\n    'John': {'age': 26, 'hobby': 'Movie Watch'},\n    'Jane': {'age': 31, 'hobby': 'Book Reader'}, \n    'Charlotte': {'age': 25, 'hobby': 'Music Listener'}\n}", "category": "Python"}, {"instruction": "Create a function to find the index of the first occurrence of a given number in a list", "input": "", "output": "def find_index(lst, num):\n  for index, val in enumerate(lst):\n    if val == num:\n      return index", "category": "Python"}, {"instruction": "How do you remove the last item from a list in Python?", "input": "", "output": "list.pop()", "category": "Python"}, {"instruction": "Write a function to check if a given binary tree is a valid binary search tree", "input": "", "output": "def isValidBST(root): \n      \n    # Check empty tree  \n    if root is None: \n        return True\n          \n    # Check left subtree recursively  \n    if not isValidBST(root.left): \n        return False\n  \n    # if left is not None then check it has \n    # correct data or not i.e. left node's data \n    # should be less than root's data \n    if (root.left is not None and\n        root.data < root.left.data): \n        return False\n      \n    # Check right subtree recursively  \n    if not isValidBST(root.right): \n        return False\n      \n    # if right is not None then check it has \n    # correct data or not i.e. right node's data \n    # should be greater than root's data \n    if (root.right is not None and\n        root.data > root.right.data): \n        return False\n      \n    # If all conditions satisfied  \n    # then return True  \n    return True", "category": "Python"}, {"instruction": "Write a loop in Python to print all the numbers from 0 to 10", "input": "", "output": "for i in range(0, 11):\n  print(i)", "category": "Python"}, {"instruction": "How to check if a given number is even or odd using Python?", "input": "", "output": "def is_even_or_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"", "category": "Python"}, {"instruction": "Write a function in Python for printing a given 2D array.", "input": "arr = [[1,2,3], [4,5,6], [7,8,9]]", "output": "def print_2D_array(arr):\n  for row in arr:\n    for element in row:\n      print(element,end=\" \")\n    print()\n\nprint_2D_array(arr)", "category": "Python"}, {"instruction": "Given a number, create a function that returns a list that contains its divisors.", "input": "num = 20", "output": "def get_divisors(num):\n    \"\"\"This function returns a list that contains the divisors of a given number\"\"\"\n    return [x for x in range(1, num + 1) if num % x == 0]", "category": "Python"}, {"instruction": "Create a function in Python for reversing a list.", "input": "my_list = [1,2,3,4,5]", "output": "def reverse_list (my_list):\n  return my_list[::-1]\n  \nreverse_list(my_list)", "category": "Python"}, {"instruction": "Generate an array of 20 random numbers between 0 and 10 (inclusive).", "input": "", "output": "import random \n  \narr = [] \nfor i in range(20): \n    arr.append(random.randint(0, 10))\n    \narr", "category": "Python"}, {"instruction": "Toast a Python function to swap the values of two given variables.", "input": "a = 10, b= 20", "output": "def swap(a, b): \n    a, b = b, a \n    return (a,b)", "category": "Python"}, {"instruction": "Softmax a list of numbers and then sum the output.", "input": "[1, 2, 3]", "output": "def softmax(arr): \n    a = np.exp(arr)\n    return a / np.sum(a) \ndef sum_softmax(arr): \n    return np.sum(softmax(arr))", "category": "Python"}, {"instruction": "Find all substrings from a given string.", "input": "", "output": "def find_substring(str):\n    substrings = []\n    for length in range(1, len(str)+1):\n        for start in range(len(str)- length + 1):\n            substrings.append(str[start:start+length])\n    return substrings", "category": "Python"}, {"instruction": "Pre-process the following dataset and convert it into a tabular format using Pandas.", "input": "data = [{\"name\": \"john\", \"age\": 20, \"location\": \"New York\"},\n        {\"name\": \"sarah\", \"age\": 30, \"location\": \"Los Angeles\"}]", "output": "import pandas as pd\n\ndf = pd.DataFrame(data)\n\n# Create tabular format \n df = df[[\"name\", \"age\", \"location\"]]", "category": "Python"}, {"instruction": "Convert the following nested for loop into a single line list comprehension.", "input": "a = [1, 2, 3, 4]\nb = [5, 6, 7, 8]\n\nresult = []\nfor i in a:\n    for j in b:\n        result.append((i, j))", "output": "result = [(i,j) for i in a for j in b]", "category": "Python"}, {"instruction": "Re-write the following function to use list comprehension.", "input": "def negative_list(numbers):\n    negative = []\n    for num in numbers:\n        if num < 0:\n            negative.append(num)\n    return negative", "output": "def negative_list(numbers):\n    return [num for num in numbers if num < 0]", "category": "Python"}, {"instruction": "Create an array of size n filled with the string \"hello\".", "input": "", "output": "def fillWithHello(n):\n    arr = [] \n    for i in range(0, n): \n        arr.append(\"hello\") \n    return arr", "category": "Python"}, {"instruction": "Write code for displaying the Fibinacci sequence up to the nth term.", "input": "", "output": "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Explain the term \"backtracking\".", "input": "", "output": "Backtracking is a general algorithm for finding all (or some) solutions to some computational problems, that incrementally builds candidates to the solutions and abandons each partial candidate c (\"backtracks\") as soon as it determines that c cannot possibly be completed to a valid solution.", "category": "Python"}, {"instruction": "Given a positive integer, find the sum of its digits.", "input": "", "output": "def findSum(num): \n    res = 0\n    num = str(num)\n    for i in range(0, len(num)): \n        res = res + int(num[i]) \n    \n    return res", "category": "Python"}, {"instruction": "Create a function in Python that returns all permutations of a string.", "input": "", "output": "def get_all_permutations(string):\n \n  if len(string) == 1:\n    return [string]\n \n  permutations = []\n  for index, char in enumerate(string):\n    slice_string  = string[:index] + string[index+1:]\n    for permutation in get_all_permutations(slice_string):\n      permutations.append(char + permutation)\n\n  return permutations", "category": "Python"}, {"instruction": "Create a function to generate a random integer between two given numbers.", "input": "", "output": "import random\ndef rand_int(low, high):\n\treturn random.randint(low,high)", "category": "Python"}, {"instruction": "Using the existing code as a guide, construct a function to validate user input.", "input": "username=input(\"Enter your username: \")\npassword=input(\"Enter your password: \")", "output": "def validate_input(username, password):\n\tif len(username) < 5 or len(username) > 80:\n\t\treturn False\n\tif len(password) < 8 or len(password) > 16:\n\t\treturn False\n\treturn True", "category": "Python"}, {"instruction": "Create a list containing a given number of random numbers.", "input": "", "output": "import random\n\ndef random_list(length):\n\trand_list = []\n\tfor i in range(length):\n\t\trand_list.append(random.randint(0,100))\n\treturn rand_list", "category": "Python"}, {"instruction": "Write a sorting algorithm that sorts an array using a bubble sort.", "input": "nums=[3,4,1,2,9,6]", "output": "def bubble_sort(nums):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums", "category": "Python"}, {"instruction": "Write a function in Python that takes two parameters and returns a list containing those two numbers", "input": "", "output": "def make_list(a, b):\n  return [a, b]", "category": "Python"}, {"instruction": "Given a Python list, write the code to flatten it", "input": "l1=[1,2,3,[4,[5,6]]]", "output": "def flatten(nums):\n    flattened_list = []\n    for elem in nums:\n        if type(elem) == list:\n            flattened_list.extend(flatten(elem))\n        else:\n            flattened_list.append(elem)\n    return flattened_list\n\nflatten(l1)", "category": "Python"}, {"instruction": "Train a sentiment classification model on the given data.", "input": "Training Data:\n\nI love this new phone!  Positive\nThis phone is terrible!  Negative", "output": "import nltk \nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\n\n# Preprocess data\ntraining_data = [('I love this new phone!', 'positive'), ('This phone is terrible!', 'negative')]\nall_words = []\ndocuments = []\nfor (sent, category) in training_data:\n    words = word_tokenize(sent)\n    words = [word.lower() for word in words if word not in stopwords.words()]\n    documents.append((words, category))\n    all_words.extend(words)\n\n# Create feature set\ndistinct_words = set(all_words)\nfeature_set = [({word: (word in tokenized_sentence) for word in distinct_words}, category) for (tokenized_sentence, category) in documents]\n\n# Train model\nclassifier = nltk.NaiveBayesClassifier.train(feature_set)", "category": "Python"}, {"instruction": "Build a flask server to handle a GET request to the route '/test'.", "input": "", "output": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/test', methods=['GET'])\ndef test():\n    return \"This is a test\"\n\nif __name__ == '__main__':\n    app.run()", "category": "Python"}, {"instruction": "Generate a string of 5 random characters from the characters A through Z.", "input": "", "output": "import random\n\ndef random_string():\n    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    random_string = ''.join(random.choice(chars) for i in range(5))\n    return random_string\n\nprint(random_string())", "category": "Python"}, {"instruction": "Write an API endpoint to get the average annual temperature of a given city.", "input": "", "output": "@app.route(\"/get_average_annual_temp/<city>\", methods=['GET'])\ndef get_average_annual_temp(city):\n    # Get the average annual temperature of the given city\n    temp = get_average_annual_temperature(city)\n    # Return the average temperature in json format\n    return jsonify({'temp': temp})", "category": "Python"}, {"instruction": "Write a function in Python for calculating the area of a circle.", "input": "", "output": "def area_circle(r):\n  return 3.14 * r**2", "category": "Python"}, {"instruction": "Write a code snippet for generating a unique identifier for a particular object.", "input": "", "output": "import uuid\n\ndef generate_id(object): \n  return uuid.uuid4()", "category": "Python"}, {"instruction": "Develop an algorithm for sorting a given list in ascending order.", "input": "my_list = [5,1,4,2,8]", "output": "def sort_list(my_list): \n  for i in range(len(my_list)):\n    for j in range(i+1, len(my_list)):\n      if my_list[i] > my_list[j]: \n        my_list[i], my_list[j] = my_list[j], my_list[i]\n  return my_list\n\nsort_list(my_list)", "category": "Python"}, {"instruction": "Design a function to find the average of a given array.", "input": "array = [1, 2, 3]", "output": "def array_mean(array):\n    total = 0\n    for num in array:\n        total += num\n    mean = total / len(array)\n    return mean", "category": "Python"}, {"instruction": "Describe the details of the try-except statement in Python.", "input": "", "output": "The try-except statement in Python is used to handle exceptions in code. All the code that has a potential for raising an exception is placed in the \"try\" block and the code that is executed if an exception is raised is placed in the \"except\" block. The \"Except\" block is also used to catch a specific exception and handle it accordingly.", "category": "Python"}, {"instruction": "How can you get the length of a list in Python?", "input": "", "output": "You can use the built-in function len() to get the length of a list in Python.", "category": "Python"}, {"instruction": "Write a code to check whether the input string is a palindrome or not.", "input": "a man a plan a canal panama", "output": "\"\"\"\nWrite a code to check whether the input string is a palindrome or not\n\"\"\"\n\ndef check_palindrome(input_string):\n    rev_str = input_string[::-1]\n \n    # Checking if both string are equal or not\n    if rev_str == input_string:\n        return True\n    return False\n  \n# main function\nif __name__ == \"__main__\":\n    str = \"a man a plan a canal panama\"\n    if check_palindrome(str):\n        print(\"String is Palindrome\")\n    else:\n        print(\"String is not Palindrome\")", "category": "Python"}, {"instruction": "Create a class in Python to represent a Person.", "input": "", "output": "class Person:\n    # Constructor \n    def __init__(self, name, age): \n         \n        # instance attributes \n        self.name = name \n        self.age = age \n  \n    # instance method \n    def greeting(self): \n        print(\"My name is\", self.name) \n  \n# construct an object \nperson1 = Person(\"John\", 36) \n  \n# call a method of the object \nperson1.greeting()", "category": "Python"}, {"instruction": "Create a function in Python which takes two parameters and returns their product.", "input": "", "output": "def product(a, b):\n    return a*b", "category": "Python"}, {"instruction": "Write a Python program to loop through all the items in a given list.", "input": "List: [1, 2, 3, 4, 5, 6]", "output": "my_list = [1, 2, 3, 4, 5, 6]\nfor item in my_list:\n    print(item)", "category": "Python"}, {"instruction": "Design a function in Python to delete duplicates from a list.", "input": "The list is: [2, 3, 2, 4, 5, 5, 6]", "output": "def remove_duplicates(list): \n      \n    unique_list = [] \n      \n    for x in list: \n        if x not in unique_list: \n            unique_list.append(x) \n    return unique_list \n  \nlist = [2, 3, 2, 4, 5, 5, 6] \nprint (\"Original List: \", list) \nprint (\"Unique List: \", remove_duplicates(list)) \n\nOutput: \nOriginal List: [2, 3, 2, 4, 5, 5, 6]\nUnique List: [2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Create a function that takes in a list of numbers and returns true if the list contains at least one positive number", "input": "list_of_numbers = [-2, -5, 0, 3]", "output": "def is_positive_number(numbers):\n    for num in numbers:\n        if num > 0:\n            return True\n    return False", "category": "Python"}, {"instruction": "Create a function that takes in a string and replaces all punctuation with a space", "input": "", "output": "import string\n\ndef replace_punctuation(string):\n    for char in string:\n        if char in string.punctuation:\n            string = string.replace(char, \" \")\n    return string", "category": "Python"}, {"instruction": "Write a function that takes in a string and returns a list of all the words that have more than 5 characters", "input": "", "output": "def long_words(string):\n    words = string.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > 5:\n            long_words_list.append(word)\n    return long_words_list", "category": "Python"}, {"instruction": "Create a function that takes in a string and counts the number of vowels in it", "input": "", "output": "def count_vowels(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "In a given string, create a function that returns the longest consecutive sequence of characters.", "input": "my_string = \u201cabccdeefghj\"", "output": "def longest_consecutive(string):\n    character_list = []\n    max_length = 0\n    max_sequence = ''\n    for char in string:\n        if char in character_list:\n            continue\n        else:\n            character_list.append(char)\n            current_length = 1\n            for i in range(1, len(string)):\n                if string[i-1] == char and string[i] == char:\n                    current_length += 1\n            if current_length>max_length:\n                max_length = current_length\n                max_sequence = char*max_length\n    return max_sequence", "category": "Python"}, {"instruction": "Create a dictionary containing the key-value pair of a given string.", "input": "string = \"test string\"", "output": "\"\"\"\nCreate a dictionary containing the key-value pair of a given string\n\"\"\"\n\n# Given string\nstring = \"test string\"\n\n# Initialising an empty dictionary\nmy_dict = {}\n\n# Looping through the given string\nfor char in string:\n    # If the character is not already in dictionary\n    if char not in my_dict:\n        # Adding the character to the dictionary\n        my_dict[char] = 1\n    # If the character already exists in dictionary\n    else:\n        # Incrementing the frequency\n        my_dict[char] += 1\n        \n# Printing the dictionary\nprint(my_dict)", "category": "Python"}, {"instruction": "You are given a list of numbers. Create a function that returns a new list with duplicates removed", "input": "list_of_numbers = [3, 6, 5, 5, 7, 6, 3]", "output": "def remove_duplicates(numbers):\n    new_list = []\n    for num in numbers:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list", "category": "Python"}, {"instruction": "Create a for loop that goes through every element of list_of_words and prints \u2018success\u2019 if an element is equal to \u201cexample\u201d and prints \u2018failure\u2019 in any other case.", "input": "list_of_words = [\"hello\", \"example\", \"world\"]", "output": "for word in list_of_words:\n    if word == \"example\":\n        print(\"success\")\n    else:\n        print(\"failure\")", "category": "Python"}, {"instruction": "You are given a matrix of m rows and n columns. Write a function that calculates the transpose of the given matrix.", "input": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def transpose(matrix):\n    m = len(matrix)\n    n = len(matrix[0])\n\n    transpose_matrix = [[0] * m for _ in range(n)]\n    for i in range(m):\n        for j in range(n):\n            transpose_matrix[j][i] = matrix[i][j]\n\n    return transpose_matrix", "category": "Python"}, {"instruction": "Construct an if-else statement that returns \u2018even\u2019 if the given number is even and \u2018odd\u2019 if the given number is odd.", "input": "", "output": "if n % 2 == 0:\n    return 'even'\nelse:\n    return 'odd'", "category": "Python"}, {"instruction": "Write a Python program to generate the first n Fibonacci numbers.", "input": "", "output": "def generate_fibonacci_numbers(n):\n   if n==1:\n       return [0]\n   elif n==2:\n       return [0,1]\n   else:\n       fib_list = [0,1]\n       for i in range(2,n):\n           fib_list.append(fib_list[i-1]+fib_list[i-2])\n       return fib_list", "category": "Python"}, {"instruction": "Write a Python program to remove all instances of a given value from a given list.", "input": "[1, 2, 3, 2, 3, 4], 2", "output": "def remove_value(nums, val):\n    res = []\n    for num in nums:\n        if num != val:\n            res.append(num)\n    return res", "category": "Python"}, {"instruction": "Generate a dictionary of 10 key-value pairs, where the key is a string and the values are random numbers from 1 to 100.", "input": "", "output": "import random\n\nd = dict()\n\nkeys = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"]\n\nfor key in keys:\n    d[key] =  random.randint(1,100)\n\nprint(d)", "category": "Python"}, {"instruction": "Write a function to find the number of occurrences of an element in a list.", "input": "arr = [10, 20, 10, 40, 40, 40, 50]", "output": "def count_occurrences(arr, element):\n    count = 0\n    for e in arr:\n        if e == element:\n            count += 1\n    return count\n\nprint(count_occurrences(arr, 40)) # Outputs: 3", "category": "Python"}, {"instruction": "Create a program to generate a histogram using data from a set of numbers.", "input": "values = [3, 4, 2, 5, 8, 1, 2, 6]", "output": "import matplotlib.pyplot as plt\n\nvalues = [3, 4, 2, 5, 8, 1, 2, 6]\n\nplt.hist(values, bins= 10, edgecolor='black', color='b')\n\nplt.xlabel('Values')\nplt.ylabel('Frequency')\n\nplt.title('Histogram')\n\nplt.show()", "category": "Python"}, {"instruction": "Write a code to add two linked lists of different sizes.", "input": "list1 = [2->4->3]\nlist2 = [5->6->4->1]", "output": "# adding two linked lists\nclass Node: \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\n\ndef addTwoLists(first, second):\n    # defining current and prev variables\n    prev = None\n    carry = 0\n    temp = None\n\n    # looping until one list has all nodes added\n    while(first is not None or second is not None): \n        Node = Node() \t\t# Node data\n\n        Node.data = carry + (first.data if first else 0) + (second.data if second else 0) \n\t\t\n        # update carry\n        if Node.data >= 10: \n            Node.data = Node.data % 10\n            carry = 1\n        else: \n            carry = 0\n \n        temp = Node\n        # Move first, second pointers ahead\n        if first is not None: \n            first = first.next\n        if second is not None: \n            second = second.next\n\n        # Attach the previous node to the current node\n        if prev is not None: \n            prev.next = Node \n        prev = Node\n\t\t\n    if carry > 0: \n        temp.next = Node \n        temp.data = carry \n    return result", "category": "Python"}, {"instruction": "Write a code to access the nth element of a linked list.", "input": "", "output": "# defining the Node class\nclass Node: \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\n\ndef getNthElement(head, n): \n\tcurrent = head \n\tcount = 0\n\n\t# looping through the linked list\n\twhile(current is not None): \n\t\tif (count == n): \n\t\t\treturn current.data \n\t\tcount += 1\n\t\tcurrent = current.next\n\treturn -1", "category": "Python"}, {"instruction": "Create a function that takes in a list of temperatures and returns the average temperature", "input": "list_of_temperatures = [20, 24, 26, 18]", "output": "def average_temperature(temperatures):\n    num_items = len(temperatures)\n    sum_items = 0\n    for temperature in temperatures:\n        sum_items += temperature\n    return sum_items / num_items", "category": "Python"}, {"instruction": "Write a code to create a 3 x 3 matrix containing all 0s.", "input": "", "output": "\"\"\"\nWrite a code to create a 3 x 3 matrix containing all 0s\n\"\"\"\n\n# Creating an empty 3 x 3 matrix\nmatrix = [[0 for x in range(3)] for y in range(3)] \n  \n# Printing the matrix\nprint(matrix)", "category": "Python"}, {"instruction": "Write a code to check whether two strings are anagrams or not.", "input": "first = \"listen\"\nsecond = \"silent\"", "output": "\"\"\"\nWrite a code to check whether two strings are anagrams or not\n\"\"\"\n\n# Strings to be checked\nfirst = \"listen\"\nsecond = \"silent\"\n\n# Sorting the strings\nfirst_sorted = \"\".join(sorted(first))\nsecond_sorted = \"\".join(sorted(second))\n\n# Checking if both sorted strings are equal or not\nif first_sorted == second_sorted:\n    print(\"Strings are Anagrams\")\nelse:\n    print(\"Strings are not Anagrams\")", "category": "Python"}, {"instruction": "Write a code to delete all the vowels from a given string.", "input": "string = \"hello world\"", "output": "\"\"\"\nWrite a code to delete all the vowels from a given string\n\"\"\"\n\n# Given string\nstring = \"hello world\"\n\n# Removing all the vowels from the string\nno_vowels = \"\".join([letter for letter in string if letter not in \"aeiouAEIOU\"])\n\n# Printing the new string\nprint(\"String without vowels is\", no_vowels)", "category": "Python"}, {"instruction": "Given a list of strings, write a code to find the longest string.", "input": "lst = ['one', 'two', 'three', 'four', 'five']", "output": "# initial max length\nmax_length = 0\n# empty string to store the max length string\nmax_str = ''\n\n# iterate through the list\nfor string in lst:\n    # get the length\n    length = len(string)\n    # update the max length\n    if length > max_length:\n        # get the string\n        max_str = string\n        # update max length\n        max_length = len(string)\n\nprint(max_str)", "category": "Python"}, {"instruction": "Write a code to take two string inputs and generate the output string containing alternate characters from each string.", "input": "str1 = 'abc'\nstr2 = '123'", "output": "def alternate_char(str1, str2):\n    # get the length of string\n    n = len(str1)\n\n    # initialize the output string\n    output_str = ''\n\n    # generate the output string\n    for i in range(n):\n        output_str += str1[i] + str2[i]\n    \n    return output_str\n\nprint(alternate_char(str1, str2))", "category": "Python"}, {"instruction": "Write a function that takes a list of integers as inputs and returns the sum of the square of all the even numbers.", "input": "lst = [2, 8, 9, 5, 3, 10]", "output": "def sum_square_even(lst):\n    result = 0\n    for num in lst:\n        if (num % 2 == 0):\n            result += num ** 2\n    return result\n\nprint(sum_square_even(lst))", "category": "Python"}, {"instruction": "Write a function to compare two strings and return True if they are anagrams.", "input": "str1 = 'silent'\nstr2 = 'listen'", "output": "def anagram(str1, str2): \n\n    # Get lenghts of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If lengths are not same, then strings   \n    # are not anagrams \n    if n1 != n2:\n        return False\n    str1 = ''.join(sorted(str1))\n    str2 = ''.join(sorted(str2))\n    # Comparing sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n\n    return True\n\nprint(anagram(str1, str2))", "category": "Python"}, {"instruction": "Edit the following code so it outputs the odd numbers between 1 and 50.", "input": "for i in range(1,51):\n    print(i)", "output": "for i in range(1,51):\n    if i % 2 != 0:\n        print(i)", "category": "Python"}, {"instruction": "Write a Python program that tests if a given number is divisible by 3.", "input": "num = 51", "output": "if (num % 3 == 0):\n    print(\"The number is divisible by 3\")\nelse:\n    print(\"The number is not divisible by 3\")", "category": "Python"}, {"instruction": "Write a Python program to split special characters with a given string.", "input": "string = \"Hello@#World\"", "output": "string = \"Hello @# World\"", "category": "Python"}, {"instruction": "Create a program that extracts a given pattern from a given string", "input": "text = \"Hello world!\", pattern = \"l\"", "output": "\"\"\"\nCreate a program that extracts a given pattern from a given string\n\"\"\"\n\ndef extract_pattern(text, pattern):\n    result = []\n    for i in range(len(text)):\n        if text[i] == pattern:\n            result.append(i)\n    return result\n\nif __name__ == '__main__':\n    text = \"Hello world!\"\n    pattern = \"l\"\n    print(extract_pattern(text, pattern))", "category": "Python"}, {"instruction": "Create a program to generate all possible pairs of a given list of numbers", "input": "[1, 2, 3]", "output": "\"\"\"\nCreate a program to generate all possible pairs of a given list of numbers\n\"\"\"\n\ndef generate_pairs(nums):\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            pairs.append((nums[i], nums[j]))\n    return pairs\n\nif __name__ == '__main__':\n    print(generate_pairs([1, 2, 3]))", "category": "Python"}, {"instruction": "Create a program to check if a given string is a palindrome", "input": "\"racecar\"", "output": "\"\"\"\nCreate a program to check if a given string is a palindrome\n\"\"\"\n\ndef is_palindrome(string):\n    n = len(string)\n    for i in range(n // 2):\n        if string[i] != string[n-i-1]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    print(is_palindrome(\"racecar\"))", "category": "Python"}, {"instruction": "Create a program to find all the factors of a given number", "input": "24", "output": "\"\"\"\nCreate a program to find all the factors of a given number \n\"\"\"\n\ndef find_factors(num):\n    factors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            factors.append(i)\n    return factors\n\nif __name__ == '__main__':\n    print(find_factors(24))", "category": "Python"}, {"instruction": "Create a program to generate the sum of all the elements in a given list", "input": "[1, 2, 3, 4, 5]", "output": "\"\"\"\nCreate a program to generate the sum of all the elements in a given list\n\"\"\"\n\ndef sum_list(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total\n\nif __name__ == '__main__':\n    print(sum_list([1, 2, 3, 4, 5]))", "category": "Python"}, {"instruction": "Create a program to classify whether the given number is even or odd", "input": "5", "output": "\"\"\"\nCreate a program to classify whether the given number is even or odd\n\"\"\"\n\ndef even_or_odd(number: int) -> str:\n    if number % 2 == 0:\n        return 'even'\n    else:\n        return 'odd'\n\nif __name__ == '__main__':\n    print(even_or_odd(5))", "category": "Python"}, {"instruction": "Create a program to parse a given string and return a dictionary with all the words and their frequency", "input": "\"this is a practice string to learn the parsing of strings\"", "output": "\"\"\"\nCreate a program to parse a given string and return a dictionary with all the words and their frequency\n\"\"\"\n\ndef parse_string(string):\n    words = string.split()\n    word_dict = {}\n    for word in words:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    return word_dict\n\nif __name__ == '__main__':\n    print(parse_string(\"this is a practice string to learn the parsing of strings\"))", "category": "Python"}, {"instruction": "Create a program to compute the checksum of a given data packet", "input": "data_packet = [0xff, 0x0a, 0x1b, 0x3f]", "output": "\"\"\"\nCreate a program to compute the checksum of a given data packet\n\"\"\"\n\ndef compute_checksum(data_packet):\n    checksum = 0\n    for x in data_packet:\n        checksum += x\n    return checksum\n\nif __name__ == '__main__':\n    data_packet = [0xff, 0x0a, 0x1b, 0x3f]\n    print(compute_checksum(data_packet))", "category": "Python"}, {"instruction": "rewrite the following for-loop as a while-loop", "input": "for i in range(0, 5):\n    print(i)", "output": "\"\"\"\nRewrite the following for-loop as a while-loop\n\"\"\"\n\ni = 0\nwhile i < 5:\n    print(i)\n    i += 1", "category": "Python"}, {"instruction": "Create a program to create a list of all the numbers from 1 to 10 which are divisible by 3", "input": "", "output": "\"\"\"\nCreate a program to create a list of all the numbers from 1 to 10 which are divisible by 3\n\"\"\"\n\ndef divisible_by_three():\n    divisible_by_three_list = []\n    for i in range(1, 11):\n        if i % 3 == 0:\n            divisible_by_three_list.append(i)\n    return divisible_by_three_list\n\nif __name__ == '__main__':\n    print(divisible_by_three())", "category": "Python"}, {"instruction": "Write a function that sorts the given list of numbers in descending order", "input": "[1, 2, 3, 5, 8, 10]", "output": "\"\"\"\nWrite a function that sorts the given list of numbers in descending order\n\"\"\"\n\ndef sort_list_descending(numbers):\n    numbers.sort(reverse = True)\n    return numbers\n\nif __name__ == '__main__':\n    print(sort_list_descending([1, 2, 3, 5, 8, 10]))", "category": "Python"}, {"instruction": "Create a program to write an overwriting if-else logic for the following switch statement", "input": "switch(a) {\n  case 1: \n    func1();\n    break;\n  case 2: \n    func2();\n    break;\n}", "output": "\"\"\"\nCreate a program to write an overwriting if-else logic for the following switch statement\n\"\"\"\n\ndef switch_to_if_else(a):\n  if a == 1:\n    func1()\n  elif a == 2:\n    func2()\n\nif __name__ == '__main__':\n    switch_to_if_else(a)", "category": "Python"}, {"instruction": "Create a program to convert the input sentence to Pig Latin.", "input": "I am a computer programmer", "output": "\"\"\"\nCreate a program to convert the input sentence to Pig Latin.\n\"\"\"\n\ndef pig_latin(sentence):\n    words = sentence.split()\n    new_words = []\n    for word in words:\n        if word[0] in 'aeiou':\n            new_words.append(word + 'ay')\n        else:\n            new_words.append(word[1:] + word[0] + 'ay')\n    return ' '.join(new_words)\n\nif __name__ == '__main__':\n    print(pig_latin('I am a computer programmer'))", "category": "Python"}, {"instruction": "Write a code to generate the multiplication table of a given integer.", "input": "x = 5", "output": "\"\"\"\nWrite a code to generate the multiplication table of a given integer\n\"\"\"\n\n# Number for which multiplication table will be generated\nx = 5\n\n# Generating the multiplication table\nfor i in range(1,11):\n    # Printing each row of the table\n    print(\"{} x {} = {}\".format(x,i,x*i))", "category": "Python"}, {"instruction": "Write a code to find the maximum in a given list of integers.", "input": "mylist = [1,2,3,4,5]", "output": "\"\"\"\nWrite a code to find the maximum in a given list of integers\n\"\"\"\n\n# List containing the elements\nmylist = [1,2,3,4,5]\n\n# Finding the maximum element\nmax = mylist[0]\n\n# Looping through each element to find if it is the maximum\nfor i in range(1,len(mylist)):\n    # Comparing the element with the maximum\n    if mylist[i] > max:\n        max = mylist[i]\n\n# Printing the maximum element\nprint(\"Maximum element of the list is\", max)", "category": "Python"}, {"instruction": "Write a code to convert a given list of strings to uppercase.", "input": "mylist = [\"hello\",\"world\"]", "output": "\"\"\"\nWrite a code to convert a given list of strings to uppercase\n\"\"\"\n\n# List containing the strings\nmylist = [\"hello\",\"world\"]\n\n# Converting the list of strings to uppercase\nupper_list = [string.upper() for string in mylist]\n \n# Printing the new list\nprint(\"List with strings in uppercase is\", upper_list)", "category": "Python"}, {"instruction": "Write a code to connect to a remote database.", "input": "username: john\npassword: john123\nIP: 100.10.0.10", "output": "import psycopg2\n\nconn = psycopg2.connect(host=\"100.10.0.10\", database=\"mydb\", user=\"john\", password=\"john123\")", "category": "Python"}, {"instruction": "Write a function to get the mean of the given list of numbers.", "input": "lst = [1, 4, 5, 9, 3]", "output": "def mean(lst):\n    # calculate the sum\n    total = 0\n    for item in lst:\n        total += item\n    \n    # calculate the mean\n    mean = total / len(lst)\n    return mean\n\nprint(mean(lst))", "category": "Python"}, {"instruction": "Write a code to get the time difference between two date-time objects.", "input": "date1: 2019-05-11 21:00:00\ndate2: 2019-05-13 10:00:00", "output": "from datetime import datetime\n\ndef time_difference(date1, date2):\n    date1_obj = datetime.strptime(date1, '%Y-%m-%d %H:%M:%S')\n    date2_obj = datetime.strptime(date2, '%Y-%m-%d %H:%M:%S')\n\n    return (date2_obj - date1_obj).total_seconds() // 3600\n\nprint(time_difference('2019-05-11 21:00:00', '2019-05-13 10:00:00')) # prints 33.0", "category": "Python"}, {"instruction": "Write a code to sort the following array in increasing order.", "input": "[10, 2, 7, 8, 32, 4]", "output": "# sorting array using insertion sort\narr = [10, 2, 7, 8, 32, 4] \n\n# traverse through all array elements \nfor i in range(1, len(arr)):\n    key = arr[i]\n\n    # move elements of arr[0..i-1], that are greater than key,\n    # to one position ahead of their current position\n    j = i-1\n    while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n    arr[j + 1] = key\n  \n#print the sorted array\nprint(arr)", "category": "Python"}, {"instruction": "Write a function to print all prime numbers between two given numbers.", "input": "", "output": "def print_prime_numbers_in_range(start, end):\n  # start = starting number\n  # end = ending number\n\n  for num in range(start, end+1):\n    # Prime numbers are greater than 1\n    if num > 1:\n      for i in range(2, num):\n        if (num % i) == 0:\n          break\n      else:\n        print(num)\n---\n\n11. Instruction: Generate a snippet of code to reverse given string\n11. Input:\n<noinput>\n11. Output:\ndef reverse_string(input_string):\n  string_length = len(input_string)\n  reversed_string = \"\"\n  \n  for i in range(string_length-1,-1,-1):\n    reversed_string += input_string[i]\n  \n  return reversed_string", "category": "Python"}, {"instruction": "Design a program to find the longest element in the given list.", "input": "[10, 100, 200, 500, 400]", "output": "def longest_element(list):\n  max_length = 0\n  max_length_item = None\n\n  for item in list:\n    if len(item) > max_length:\n      max_length = len(item)\n      max_length_item = item\n\n  return max_length_item\n\nlist = [10, 100, 200, 500, 400]\nlongest_element(list) # 500", "category": "Python"}, {"instruction": "Write a code to convert a given spredsheet in csv format to json format.", "input": "", "output": "import csv\nimport json\n\ndef csv_to_json():\n    # Path of csv file\n    file_csv = 'mycsvfile.csv'\n    \n    # Path of json file\n    file_json = 'myjsonfile.json'\n    \n    with open(file_csv, 'r') as input_file:\n        reader = csv.DictReader(input_file)\n        data = list(reader)\n    \n    with open(file_json, 'w') as output_file:\n        json.dump(data, output_file)\n\ncsv_to_json()", "category": "Python"}, {"instruction": "Generate a snippet of code to extract all the URLs from the given string.", "input": "This string contains some urls such as https://www.google.com and https://www.facebook.com.", "output": "import re\n\nstring = \"This string contains some urls such as https://www.google.com and https://www.facebook.com.\"\n\nurls = re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', string) \n\nprint(urls)", "category": "Python"}, {"instruction": "Generate a random integer between 4 and 8 (inclusively).", "input": "", "output": "import random\nx = random.randint(4, 8)", "category": "Python"}, {"instruction": "Create a function that takes an array as an argument and returns the sum of all the elements in the array.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def arraySum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total", "category": "Python"}, {"instruction": "Edit the Python code so that it prints out the total number of elements in the list.", "input": "list = [1, 2, 3, 4, 5]", "output": "list = [1, 2, 3, 4, 5]\nprint(\"Total number of elements in the list: \", len(list))", "category": "Python"}, {"instruction": "Write a Python function to convert a given string to lowercase.", "input": "string = \"FOO\"", "output": "def to_lowercase(string):\n    return string.lower()\n\nstring = \"FOO\"\nprint(to_lowercase(string))", "category": "Python"}, {"instruction": "Follow the comments to complete the code that finds the maximum value in an array.", "input": "# Find the maximum value in an array\narr = [4, 5, 2, 8, 7]\n# TODO", "output": "# Find the maximum value in an array\narr = [4, 5, 2, 8, 7]\n\nmax_value = arr[0]\nfor i in range(1, len(arr)):\n    if arr[i] > max_value:\n        max_value = arr[i]\n\nprint(max_value)", "category": "Python"}, {"instruction": "Create a dictionary for counting the occurrence of each letter in the given string.", "input": "string = \"hello world\"\n#TODO", "output": "string = \"hello world\"\nletter_counts = {}\n\nfor letter in string:\n    if letter in letter_counts:\n       letter_counts[letter] += 1\n    else:\n        letter_counts[letter] = 1\n\nprint(letter_counts)", "category": "Python"}, {"instruction": "Write an algorithm in Python to determine if a number is even or odd.", "input": "", "output": "def is_even(num): \n    if num % 2 == 0: \n        return True \n    else: \n        return False", "category": "Python"}, {"instruction": "Remove the boilerplate code from the program for printing 10 random numbers.", "input": "import random\n\n# Generate 10 random numbers\nfor i in range(10):\n    # TODO", "output": "import random\n\n# Generate 10 random numbers\nfor i in range(10):\n    print(random.randrange(1, 101))", "category": "Python"}, {"instruction": "Develop a classification algorithm in Python to predict whether a bird is a hawk or a falcon.", "input": "", "output": "import pandas as pd\nimport numpy as np\n\n# Define features\nfeatures = [\"wing_shape\", \"size\", \"tails_length\", \"color_pattern\"] \n\n# Load the data\ndata = pd.read_csv(\"birds.csv\")\n\n# Preprocess the data to generate feature vectors\nX = np.array(data[features]) \n\n# Make a target vector \ny = np.array(data[\"species\"]) \n\n# Divide the data into training and test sets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train a classification model\nfrom sklearn.tree import DecisionTreeClassifier\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Generate evaluation metrics\nfrom sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_test, y_pred)\n\nprint(\"Model accuracy: %.2f\" % accuracy)", "category": "Python"}, {"instruction": "Follow the comments in the code to complete the program which prints a conversion table from Fahrenheit to Celsius.", "input": "# This program prints a conversion table from Fahrenheit to Celsius\n\n# Print a heading for the table\n# TODO\n\n# Print the column headings\n# TODO\n\n# Calculate and print the table body\n# TODO", "output": "# This program prints a conversion table from Fahrenheit to Celsius\n\n# Print a heading for the table\nprint(\"Fahrenheit to Celsius Conversion Table\")\n\n# Print the column headings\nprint(\"Fahrenheit \\t Celsius\")\n\n# Calculate and print the table body\nfor fahr in range(-50 , 121):\n  celsius = (fahr - 32) * 5 / 9\n  print(\"%3d \\t\\t %.2f\" % (fahr, celsius))", "category": "Python"}, {"instruction": "Edit the following code to print out all even numbers from 1 to 10.", "input": "for i in range(1,11):\n    print(i)", "output": "for i in range(1,11):\n    if i % 2 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Write code to create a list of all prime numbers between 2 and 100.", "input": "", "output": "def find_primes(n): \n    prime_list = [2] \n    for number in range(2, n + 1): \n        is_prime = True\n        for k in range(2, number): \n            if number % k == 0: \n                is_prime = False \n        if is_prime: \n            prime_list.append(number) \n    return prime_list", "category": "Python"}, {"instruction": "Write a function that checks if a give number is even or odd.", "input": "", "output": "def is_even(n):\n    if n%2 == 0:\n        return True  \n    else:\n        return False", "category": "Python"}, {"instruction": "Write a class to represent a 2D point with x and y coordinates.", "input": "", "output": "class Point:\n    def __init__(self, x, y):\n        self.x = x \n        self.y = y \n   \n    def __str__(self): \n        return \"({0},{1})\".format(self.x, self.y)", "category": "Python"}, {"instruction": "Write a function to generate the nth Fibonacci number.", "input": "< noinput >", "output": "def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-2) + fib(n-1)", "category": "Python"}, {"instruction": "Write a function to find the maximum difference between two numbers in a given array.", "input": "arr = [5, 3, 17, 11, 9]", "output": "def max_difference(arr):\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = arr[i+1] - arr[i]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff", "category": "Python"}, {"instruction": "Create a nested loop to print every combination of numbers between 0-9", "input": "", "output": "for i in range(10):\n    for j in range(10):\n        print(i, j)", "category": "Python"}, {"instruction": "Write a function to find the number of distinct states in a given matrix.", "input": "matrix = [[1, 0, 0],\n          [1, 0, 1],\n          [1, 1, 1]]", "output": "def find_num_distinct_states(matrix):\n    states = set()\n    for row in matrix:\n        state = \"\".join([str(x) for x in row])\n        states.add(state)\n    return len(states)", "category": "Python"}, {"instruction": "Re-write the code segment as a list comprehension.", "input": "numbers = []\nfor i in range(10):\n    if i % 2 == 0:\n        numbers.append(i)", "output": "numbers = [i for i in range(10) if i % 2 == 0]", "category": "Python"}, {"instruction": "How can we encrypt a string in Python?", "input": "", "output": "We can encrypt a string in Python using the cryptography module. The cryptography module provides high level cryptographic primitives using the Fernet cipher. The Fernet cipher uses AES-128 in CBC mode and PKCS7 padding to encrypt the string.", "category": "Python"}, {"instruction": "Using the following code, clean up the bugs and make sure the output functions correctly.", "input": "def example_func(lst):\n   for element in lst:\n      if (type(element) == int):\n         lst.append(element + 5)\n   return lst\n \nexample_func([1, 2, \"hello\"])", "output": "def example_func(lst):\n   output_lst = []\n   for element in lst:\n      if (type(element) == int):\n         output_lst.append(element + 5)\n   return output_lst\n \nexample_func([1, 2, \"hello\"])", "category": "Python"}, {"instruction": "Read the JSON string below and convert it into a dictionary.", "input": "jsonString = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'", "output": "import json\n\njsonObject = json.loads(jsonString)\ndictionary = dict(jsonObject)\nprint(dictionary)", "category": "Python"}, {"instruction": "Create a new folder called 'data' within the current working directory.", "input": "", "output": "import os\n\n# create 'data' folder in the current working directory\ncurrent_directory = os.getcwd()\nnew_directory = os.path.join(current_directory, 'data')\nos.mkdir(new_directory)", "category": "Python"}, {"instruction": "Rewrite the following Python code using a for-loop.", "input": "i = 0\nwhile i <= 10:\n    print(i)\n    i += 1", "output": "for i in range(11):\n    print(i)", "category": "Python"}, {"instruction": "Write a Python program to concatenate all elements in a list into a string separated by a given separator.", "input": "input_list = [\"Python\", \"is\", \"a\", \"programming\", \"language\"]\nseparator = \"-\"", "output": "def list_to_string(input_list, separator):\n    return separator.join(input_list)", "category": "Python"}, {"instruction": "Write a Python program to print out an ASCII art of a given word.", "input": "word = \"happy\"", "output": "def draw_word(word):\n    art = \"\"\"\n                 __\n           _   /  \\\\\n           \\\\_/\\_/\\_/\n           /    |\n           \\___/\n          \\\\\\\\_//\n           \\/ \\/\n            \\/\n        \"\"\"\n    for letter in word:\n        art += \"  \" + letter\n    print(art)", "category": "Python"}, {"instruction": "Write a Python program to get the day of week from a given date and time.", "input": "from datetime import datetime\ndate = datetime(2020, 4, 20, 19, 15, 0)", "output": "from datetime import datetime\n\ndef get_day_of_week(date):\n    return date.strftime(\"%A\")", "category": "Python"}, {"instruction": "Write a Python program to split a string on a given character separator.", "input": "mystring = \"Hello, World!\"\nseparator = \",\"", "output": "def split(mystring, separator):\n    return mystring.split(separator)", "category": "Python"}, {"instruction": "Create a function to calculate the maximum of two numbers.", "input": "", "output": "def max_of_two(x, y):\n    if x > y:\n        return x\n    else:\n        return y", "category": "Python"}, {"instruction": "Find the second smallest element in an integer array of size n.", "input": "array = [4, 5, 8, 2, 9, 13]", "output": "def second_smallest(array):\n\nsmallest = min(array)\nsecond_smallest = float('inf')\n\nfor num in array:\n    if num > smallest and num < second_smallest:\n        second_smallest = num\n        \nreturn second_smallest", "category": "Python"}, {"instruction": "Create a program that can calculate the distance between two points in three-dimensional space.", "input": "point1 = (1, 5, 9)\npoint2 = (4, 2, 8)", "output": "def dist_points_3d(point1, point2):\n    \"\"\"Calculate the distance between two points in three-dimensional space.\"\"\"\n    distance = ((point1[0] - point2[0]) ** 2 + \n                (point1[1] - point2[1]) ** 2 + \n                (point1[2] - point2[2]) ** 2) ** 0.5\n    return distance", "category": "Python"}, {"instruction": "Create a program that can filter out words of a string that contain a specific character.", "input": "string = \"This is a sentence\"\ncharacter = 's'", "output": "def filter_string(string, character):\n    \"\"\"Filter out words of a string that contain a specific character.\"\"\"\n    words = string.split(' ')\n    filtered_words = []\n    for word in words:\n        if character not in word:\n            filtered_words.append(word)\n    return ' '.join(filtered_words)", "category": "Python"}, {"instruction": "FOr a given list, create a program that prints out the standard deviation of the elements in the list.", "input": "list = [1, 4, 9, 16]", "output": "def std_dev(list):\n    \"\"\"Print the standard deviation of elements in a given list.\"\"\"\n    numerator = 0\n    mean = sum(list) / len(list)\n    for num in list:\n        numerator += (num - mean) ** 2\n    sd = (numerator / (len(list) - 1)) ** 0.5\n    return sd", "category": "Python"}, {"instruction": "Design an algorithm that creates a random password of 8 characters.", "input": "", "output": "def generate_password():\n    \"\"\"Generate a random password of 8 characters.\"\"\"\n    import random\n    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()'\n    password = ''\n    for i in range(8):\n        password += random.SystemRandom().choice(chars)\n    return password", "category": "Python"}, {"instruction": "Write a function that takes in a matrix of numbers and reverses the order of the rows and columns.", "input": "matrix = [[1, 2, 3], \n          [4, 5, 6], \n          [7, 8, 9]\n         ]", "output": "def reverse_matrix(matrix):\n    \"\"\"Reverse the order of the rows and columns in a matrix of numbers.\"\"\"\n    reversed_matrix = [[0 for i in range(len(matrix[0]))] for j in range(len(matrix))]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            reversed_matrix[j][i] = matrix[i][j]\n    return reversed_matrix", "category": "Python"}, {"instruction": "Design an algorithm that takes a list of strings and returns the longest string.", "input": "list = [\"cat\", \"dog\", \"lion\", \"bird\"]", "output": "def find_longest(list):\n    \"\"\"Return the longest string from a list of strings.\"\"\" \n    longest = list[0]\n    for item in list:\n        if len(item) > len(longest):\n            longest = item\n    return longest", "category": "Python"}, {"instruction": "Write a function that takes in a list of numbers and prints out the greatest number.", "input": "list = [8, 2, 14, 25]", "output": "def find_greatest(list):\n    \"\"\"Print out the greatest number from a list of numbers.\"\"\"\n    greatest = list[0]\n    for num in list:\n        if num > greatest:\n            greatest = num\n    print('The greatest number is: ', greatest)", "category": "Python"}, {"instruction": "Create a program that finds all the prime numbers less than or equal to a given number.", "input": "", "output": "def find_primes(num):\n    \"\"\"Find all the prime numbers less than or equal to a given number.\"\"\"\n    primes = []\n    for i in range(2, num + 1):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes", "category": "Python"}, {"instruction": "Develop an algorithm to find the value of n where n is the index of the Fibonacci sequence.", "input": "", "output": "def nth_fibonacci_number(n):\n    \"\"\"Find the value of n where n is the index of the Fibonacci Sequence.\"\"\" \n    if n < 2:\n        return n \n    elif n == 2:\n        return 1\n    else:\n        return nth_fibonacci_number(n-1) + nth_fibonacci_number(n-2)", "category": "Python"}, {"instruction": "Create a quick-sort algorithm in Python.", "input": "", "output": "def quick_sort(arr):\n    \"\"\"Sort a list of numbers in ascending order using the Quick-Sort algorithm\"\"\"\n    if len(arr) == 0:\n        return []\n\n    pivot = arr[0]\n    left_arr = [x for x in arr if x < pivot]\n    right_arr = [x for x in arr if x > pivot]\n    return quick_sort(left_arr) + [pivot] + quick_sort(right_arr)", "category": "Python"}, {"instruction": "Write a Python function that takes two lists of equal length and creates a dictionary of the elements in each list that have the same index.", "input": "list_one = [1, 2, 3, 4]\nlist_two = [\"a\", \"b\", \"c\", \"d\"]", "output": "def list_dict(list_one, list_two):\n    \"\"\"Create a dictionary of elements in the two lists which have the same index.\"\"\"\n    assert len(list_one) == len(list_two), \"lists must be same length\"\n    dict = {}\n    for i in range(len(list_one)):\n        dict[list_one[i]] = list_two[i]\n    return dict", "category": "Python"}, {"instruction": "Edit the following code to remove the bugs.", "input": "def reverse_string(user_string): \n  if len(user_string) == 0: \n    return \"\" \n  else: \n    return reverse_string(user_string[1:]) + user_string[0] \n    \nprint(reverse_string(\u201ctest\u201d))", "output": "def reverse_string(user_string): \n  reversed_string = ''\n  if len(user_string) == 0: \n    return \"\" \n  else: \n    reversed_string = reverse_string(user_string[1:]) + user_string[0] \n    return reversed_string\n\nuser_string = 'test'\nprint(reverse_string(user_string))", "category": "Python"}, {"instruction": "Validate whether the string contains only alphabets or not.", "input": "myString = \"abc123\"", "output": "def check_string_alphabets(myString):\n    for character in myString:\n        if (not character.isalpha()):\n            return False\n    return True\n\nmyString = \"abc123\"\nif (check_string_alphabets(myString)):\n    print(\"String contains only alphabets\")\nelse:\n    print(\"String contains numbers\")", "category": "Python"}, {"instruction": "Implement a function that finds the maximum element in a given array.", "input": "arr = [45, 7, 0, 82, 23]", "output": "def find_max_element(arr): \n    max_element = arr[0] \n    for index in range(1, len(arr)): \n        if arr[index] > max_element: \n            max_element = arr[index] \n    return max_element\n  \narr = [45, 7, 0, 82, 23]\nmax_element = find_max_element(arr) \nprint(max_element)", "category": "Python"}, {"instruction": "Write a Python code to calculate the mean of a given array.", "input": "[1,2,3,4]", "output": "# calculate the mean of given array\narr = [1,2,3,4]\n\ndef calc_mean(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum / len(arr)\n\nprint(calc_mean(arr)) # prints 2.5", "category": "Python"}, {"instruction": "Write a Django Model API to store status and published date for a blog post.", "input": "", "output": "from django.db import models\n\nclass BlogPost(models.Model):\n    # post title\n    title = models.CharField(max_length = 200)\n    # post status (draft / published)\n    status = models.CharField(max_length = 20)\n    # post publish date\n    published = models.DateTimeField(auto_now_add = True)", "category": "Python"}, {"instruction": "Write a code to compare two lists and find the common elements.", "input": "list1 = [3, 6, 9, 12]\nlist2 = [2, 4, 5, 6, 8, 9]", "output": "def find_common(list1, list2):\n    # initial list to store common elements\n    result = []\n\n    # iterate through the list\n    for num in list1:\n        # check if the number is in list2\n        if num in list2:\n            # append the element\n            result.append(num)\n\n    return result\n    \nprint(find_common(list1, list2))", "category": "Python"}, {"instruction": "Write an algorithm to check if an array contains a given value", "input": "arr = [1, 7, 5, 8, 44]\nvalue = 5", "output": "def check_value(arr, value):\n    for item in arr:\n        if item == value:\n            return True\n    return False", "category": "Python"}, {"instruction": "Explain the concept of inheritance in Python?", "input": "", "output": "Inheritance in Python allows a class to inherit attributes and behavior from another class, called the parent class. Inheritance enables code reuse, making it an important part of object-oriented programming (OOP). A class that inherits attributes and behavior from a parent is called a child class or derived class. The parent class is also known as the base class or superclass.\n\nIn Python, inheritance is specified by placing classes in parentheses after the class name: class DerivedClass(BaseClass):. This syntax allows the DerivedClass to inherit all attributes and methods from the BaseClass. It also allows the DerivedClass to override methods of the BaseClass, and add new attributes and methods.", "category": "Python"}, {"instruction": "Name a few Python libraries used for data analysis.", "input": "", "output": "Data analysis libraries in Python include Pandas, NumPy, SciPy, Matplotlib, Scikit-Learn and Seaborn.", "category": "Python"}, {"instruction": "Write a Python function to generate the powerset of a given list.", "input": "list = [2, 4, 6]", "output": "def generate_powerset(list):\n powerset = []\n for i in range(2**len(list)):\n  subset = [list[bit] for bit in range(len(list)) if is_bit_set(i, bit)]\n  powerset.append(subset)\n return powerset\n\ndef is_bit_set(num, bit):\n return (num & (1 << bit)) != 0", "category": "Python"}, {"instruction": "Write a Python script to count the number of occurances of each character in a given string.", "input": "string = \"Mississippi\"", "output": "def count_chars(string):\n char_occurrences = {}\n for char in string:\n  if char not in char_occurrences:\n   char_occurrences[char] = 1\n  else:\n   char_occurrences[char] += 1\n return char_occurrences", "category": "Python"}, {"instruction": "Write a Python function to compute the maximum value for each key in a given dictionary.", "input": "d = {'a':10, 'b':20, 'c':30}", "output": "def max_values(d):\n return {key: max(d.values()) for key in d}", "category": "Python"}, {"instruction": "Write a Python function to replace all the occurrences of a given substring with another.", "input": "string = \"Hello World\"\nsubstring = \"World\"\nreplacement = \"Universe\"", "output": "def replace_substring(string, substring, replacement):\n return string.replace(substring, replacement)", "category": "Python"}, {"instruction": "Write a Python function to create a two-dimensional array of specified dimensions.", "input": "", "output": "def create_2D_array(rows, columns):\n arr = [[] * columns] * rows\n return arr", "category": "Python"}, {"instruction": "Write a Python function to check if a given string is an anagram of another or not.", "input": "word1 = \"cat\"\nword2 = \"tac\"", "output": "def is_anagram(word1, word2):\n return sorted(word1) == sorted(word2)", "category": "Python"}, {"instruction": "Generate a random 5-character string using the letters a-z.", "input": "", "output": "import random\n\ncharacters = \"abcdefghijklmnopqrstuvwxyz\"\n\nrandom_string = \"\"\nfor i in range(5):\n    random_string += random.choice(characters)\n\nprint(random_string)", "category": "Python"}, {"instruction": "Write a Python program to print the following pattern.", "input": "", "output": "for i in range(1,6):\n  for j in range(1,i+1):\n    print(\"*\", end=\" \")\n  print()", "category": "Python"}, {"instruction": "Name the components of a typical machine learning pipeline.", "input": "", "output": "A typical machine learning pipeline consists of data pre-processing, model training, model evaluation and model deployment. Data pre-processing involves cleaning, formatting, and transforming the data, while model training involves selecting an appropriate model and using it to learn from the data. Model evaluation evaluates the models and assists in model selection. The final step is deployment of the model, to enable inference from and prediction on new data points.", "category": "Python"}, {"instruction": "Reverse a string using Python code.", "input": "input_str = \"Hello world!\"", "output": "def reverse_string(input_str): \n    new_string = \"\" \n    for char in input_str: \n        new_string = char + new_string\n  \n    return new_string \n  \ninput_str = \"Hello world!\"\n\nprint(reverse_string(input_str))\n##\n5. Instruction: Create a program that prints a multiplication table that shows the product of any two numbers between 1 and 10.\n5. Input:\n<noinput>\n5. Output:\nfor i in range(1, 11): \n    for j in range(1, 11): \n        product = i * j\n        print(str(i) + '*' + str(j) +'=' + str(product), end = '  ') \n    print()", "category": "Python"}, {"instruction": "Write a Python code snippet to print the pyramid structure with the given number of lines.", "input": "4", "output": "*   \n   ***\n  *****\n *******", "category": "Python"}, {"instruction": "Compare and contrast  two sorting algorithms: Bubble sort and Quick sort.", "input": "", "output": "Bubble sort is an algorithm that compares adjacent elements and swaps positions if they are out of order. It continues in this manner with loops until all elements of the array are in their correct order. Quick sort is very similar in its approach, but chooses a \"pivot\" element and divides the remaining array into two parts based on whether the elements are less than or greater than the pivot element. Bubble sort is simpler but has worse time complexity than Quick sort, which is more efficient.", "category": "Python"}, {"instruction": "Write a codde fragment to print out the most frequent element in an array.", "input": "arr = [1, 2, 2, 3, 4, 4, 5]", "output": "freq = {}\n\nfor el in arr:\n    if el in freq:\n        freq[el] += 1\n    else:\n        freq[el] = 1\n        \nmax_el, max_freq = None, 0\nfor el, freq in freq.items():\n    if freq > max_freq:\n        max_el = el\n        max_freq = freq\n        \nprint(max_el, max_freq)  # Output: 2 2", "category": "Python"}, {"instruction": "You need to find the largest subset of an array that sums up to a given value.", "input": "arr = [1, 2, 3, 4, 5], target = 8", "output": "def find_largest_subset(arr, target):\n    curr_sums, max_sum_list = [], []\n    for num in arr:\n        for curr_sum in curr_sums[:]:\n            new_sum = curr_sum + num\n            if new_sum == target:\n                if new_sum > sum(max_sum_list):\n                    max_sum_list = curr_sum + [num]\n            else:\n                curr_sums.append(new_sum)\n    return max_sum_list", "category": "Python"}, {"instruction": "What is the command to print \"Hello World\" twelve times in Python?", "input": "", "output": "for i in range(12):\n    print(\"Hello World\")", "category": "Python"}, {"instruction": "Generate a random string of 12 characters using Python.", "input": "", "output": "import string\nimport random\n\n''.join(random.choices(string.ascii_letters + string.digits, k=12))", "category": "Python"}, {"instruction": "Classify the following transaction as valid or invalid using Python.", "input": "Transaction ID: 101\nTransaction Amount: -200", "output": "\"invalid\"", "category": "Python"}, {"instruction": "Generate a 15-digit random number using Python.", "input": "", "output": "import random\n\nrandom.randint(100000000000000, 999999999999999)", "category": "Python"}, {"instruction": "Count the number of words in this sentence using Python.", "input": "This sentence has a total of eight words.", "output": "8", "category": "Python"}, {"instruction": "Given a string, write a Python program to find the first non-repeating character in it.", "input": "input_str = \"aaaaabbbbccc\"", "output": "def first_non_repeating_char(input_str): \n \n    char_count = {}\n \n    for ch in input_str: \n \n        if ch in char_count: \n \n            char_count[ch] += 1\n \n        else: \n \n            char_count[ch] = 1\n \n    for ch in input_str: \n \n        if char_count[ch] == 1: \n            return ch \n \n    return None\n\nprint(first_non_repeating_char(input_str))", "category": "Python"}, {"instruction": "Summarize the given paragraph in < 100 words.", "input": "Ada Lovelace is widely considered to be the world's first computer programmer. She was born to the poet Lord Byron and Lady Byron in 1815. She was fascinated by mathematics and charmed Charles Babbage, who is known as the father of computers, into teaching her about his Analytical Engine. Lovelace wrote a detailed description of the machine in 1843, and also outlines how it could be used to carry out complex calculations.", "output": "Ada Lovelace was born in 1815 to Lord Byron and Lady Byron and is widely acknowledged as the world\u2019s first computer programmer. She was fascinated by mathematics and was able to learn about Charles Babbage\u2019s Analytical Engine from him. In 1843, she wrote a detailed description of the machine and how it could be used for complex calculations.", "category": "Python"}, {"instruction": "Describe how to create a 'dockerfile'", "input": "", "output": "A Dockerfile is created by specifying a set of instructions for how to build an image for a Docker container. A Dockerfile should specify a base image and the desired version, update the package manager, set environment variables, run commands, define the port mapping for the application, add files from the host filesystem to the image, and set an entrypoint for the container.", "category": "Python"}, {"instruction": "Purge all rows from the following dataframe that have a negative value in the Age column.", "input": "import pandas as pd \n\ndata = {'Name': ['Jerry', 'Peter', 'Paul', 'John'], \n'Age': [20, 22, -18, 24]} \n\ndf = pd.DataFrame(data)", "output": "import pandas as pd \n\ndata = {'Name': ['Jerry', 'Peter', 'Paul', 'John'], \n'Age': [20, 22, -18, 24]} \n\ndf = pd.DataFrame(data)\n\ndf = df[df['Age'] >= 0]", "category": "Python"}, {"instruction": "Change the following code snippet to generate a random integer from 0 to 10.", "input": "", "output": "import random\n\nrandom_int = random.randint(0, 10)", "category": "Python"}, {"instruction": "Write a function in Python to calculate the value of \"e\" to 4 decimal places.", "input": "", "output": "from math import e\n\ndef calc_e():\n    \"\"\"This function calculates the value of e to 4 decimal places\"\"\"\n    return round(e, 4)", "category": "Python"}, {"instruction": "What type of object is \"None\" in Python?", "input": "", "output": "None is a special constant in Python and is of type NoneType.", "category": "Python"}, {"instruction": "Create a function to check if an item is in a list", "input": "", "output": "def check_list_contains(item_list, item):\n    \"\"\"This function checks if an item is in a list\"\"\"\n    return item in item_list", "category": "Python"}, {"instruction": "Create a python class called \"Employee\" that contains 3 instance variables.", "input": "", "output": "class Employee:\n    \"\"\"A class for representing an employee\"\"\"\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary", "category": "Python"}, {"instruction": "Create a function in Python that prints out a stringified version of a list.", "input": "[1, 4, 6, 8]", "output": "def print_str_list(in_list):\n    \"\"\"This function takes a list and returns a stringified version of it\"\"\"\n    return \" \".join(str(x) for x in in_list)", "category": "Python"}, {"instruction": "Edit the following function so that it counts the even numbers in the given array.", "input": "arr = [1, 2, 3, 4]", "output": "def countEvens(arr):\n count = 0\n for num in arr:\n  if num % 2 == 0:\n   count += 1\n return count", "category": "Python"}, {"instruction": "Write a Python program to determine if a given number is an Armstrong number.", "input": "", "output": "def isArmstrongNumber(num):\n sum = 0\n temp = num\n while temp > 0:\n  digit = temp % 10\n  sum += digit ** 3\n  temp //= 10\n if num == sum:\n  return True\n else:\n  return False", "category": "Python"}, {"instruction": "Create a Python program to find the maximum value in the given array.", "input": "[2, 4, 5, 7, 8]", "output": "def find_max(arr): \n    max_val = arr[0] \n    for i in range(len(arr)): \n        if max_val < arr[i]: \n            max_val = arr[i] \n    return max_val \n\narr = [2, 4, 5, 7, 8] \nmax_val = find_max(arr) \nprint(max_val)", "category": "Python"}, {"instruction": "Write a Python function to find the intersection between two lists.", "input": "list1 = [1, 2, 3, 5, 7]\nlist2 = [3, 4, 5, 6]", "output": "def intersection(list1, list2):\n    result = []\n    for i in list1:\n        for j in list2:\n            if i==j:\n                result.append(i)\n    return result", "category": "Python"}, {"instruction": "Create a function to convert a given number from decimal to binary representation using Python.", "input": "", "output": "def dec_to_binary(num):\n    binary = \"\"\n    while num > 0:\n        binary+= str(num % 2)\n        num = num // 2\n    return binary[::-1]", "category": "Python"}, {"instruction": "Write a Python function to remove the characters which have odd index values of a given string.", "input": "string = \"Hello World\"", "output": "def remove_odd_index(string):\n    result = \"\" \n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result", "category": "Python"}, {"instruction": "Calculate the sum of all elements in a given list using Python.", "input": "list1 = [1, 2 ,3, 4, 5]", "output": "sum_list = 15", "category": "Python"}, {"instruction": "Find the longest palindrome in a given string using Python.", "input": "string = \"My name is John\"", "output": "def longest_palindrome(string):\n    palindrome = ''\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            if substring == substring[::-1] and len(substring) > len(palindrome):\n                palindrome = substring\n    return palindrome", "category": "Python"}, {"instruction": "Write a Python function to format a specified string to limit the number of characters to 6.", "input": "string = \"Hello world\"", "output": "def limit_char(string):\n    if len(string) > 6 :\n        return string[:6]\n    else:\n        return string", "category": "Python"}, {"instruction": "Convert the following number into binary representation using Python.", "input": "12", "output": "binary = \"0b1100\"", "category": "Python"}, {"instruction": "Using Python, create a function to check if a given string contains an uppercase letter.", "input": "", "output": "def contains_uppercase(text):\n  for char in text:\n    if char.isupper():\n      return True\n  return False", "category": "Python"}, {"instruction": "Compute the result of the following mathematical expression in Python.", "input": "(4 + 5 * 7 - 9) / 2", "output": "result = 17", "category": "Python"}, {"instruction": "Write a Python script to find the common elements in two given lists.", "input": "list1 = [1, 2, 3, 5, 7]\nlist2 = [2, 3, 4, 5, 6]", "output": "def common_elements(list1, list2):\n    common_ele = []   \n    for i in list1:\n        for j in list2:\n            if i==j:\n                common_ele.append(i)\n    return common_ele", "category": "Python"}, {"instruction": "Create a function to find the greatest common divisor of two numbers in Python.", "input": "", "output": "def gcd(a, b):\n     while b != 0:\n        a, b = b, a % b\n     return a", "category": "Python"}, {"instruction": "Sort the given list of numbers in ascending order using Python.", "input": "numbers = [3, 5, 7, 1, 2]", "output": "sorted_numbers = [1, 2, 3, 5, 7]", "category": "Python"}, {"instruction": "Using Python, create a list containing the first 20 prime numbers.", "input": "", "output": "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]", "category": "Python"}, {"instruction": "Create a pandas dataframe from the following dictionary.", "input": "data = {'Name': ['Jerry', 'Peter', 'Paul', 'John'], \n'Age': [20, 22, 18, 24]}", "output": "import pandas as pd\n\ndf = pd.DataFrame(data)", "category": "Python"}, {"instruction": "Define a function to check if a number is odd.", "input": "", "output": "def is_odd(num):\n    if num % 2 != 0:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Write an algorithm to perform binary search on a sorted array.", "input": "", "output": "def binarySearch(array, item):\n  low = 0\n  high = len(array) - 1\n\n  while low <= high:\n    mid = (low + high) // 2\n    guess = array[mid]\n    if guess == item:\n      return mid\n    if guess > item:\n      high = mid - 1\n    else:\n      low = mid + 1\n  return None", "category": "Python"}, {"instruction": "What is data transformation and how is it used?", "input": "", "output": "Data transformation is the process of converting data from one format to another format. It is mainly used for cleaning and normalizing data before it is used for further analysis or machine learning. Data transformation involves a range of operations from removing outliers and duplicates, performing calculations to creating new columns and more.", "category": "Python"}, {"instruction": "Given a string, create a function that takes out all the duplicated characters in the string.", "input": "string = 'Keeep Learning'", "output": "def remove_duplicates(s):\n  seen = []\n  res = \"\"\n  for char in s:\n    if(char in seen):\n      continue\n    else:\n      seen.append(char)\n      res += char\n  return res\n\nstring = 'Keeep Learning'\nprint(remove_duplicates(string)) # Keep Larning", "category": "Python"}, {"instruction": "Write a code to multiple two numbers without using the multiplication operator.", "input": "", "output": "def multiply(x,y):\n  if(y == 0):\n    return 0\n  return x + multiply(x,y-1)\n\nmultiply(5,4) # 20", "category": "Python"}, {"instruction": "Write code to remove all occurrences of a given element from a list", "input": "", "output": "def remove_element(list, element):\n    \"\"\"\n    Remove all occurrences of a given element from a list\n    :param list: the list\n    :param element: the element to remove\n    :return: the filtered list\n    \"\"\"\n    filtered_list = [item for item in list if item != element]\n    return filtered_list", "category": "Python"}, {"instruction": "Write code to flatten a nested list", "input": "", "output": "def flatten_list(list):\n    \"\"\"\n    Flatten a nested list\n    :param list: the nested list to flatten\n    :return: a flattened list\n    \"\"\"\n    flattened_list = []\n    for item in list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list", "category": "Python"}, {"instruction": "Write code to find the intersection of two sorted lists", "input": "list1 = [1, 3, 4, 6]\nlist2 = [1, 2, 5, 6]", "output": "def find_intersection(list1, list2):\n    \"\"\"\n    Find the intersection of two sorted lists\n    :param list1: the first sorted list\n    :param list2: the second sorted list\n    :return: a list with elements found in both lists\n    \"\"\"\n    intersection = []\n    p1 = p2 = 0\n    while p1 < len(list1) and p2 < len(list2):\n        if list1[p1] == list2[p2]:\n            intersection.append(list1[p1])\n            p1 += 1\n            p2 += 1\n        elif list1[p1] < list2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n    return intersection\n\nlist1 = [1, 3, 4, 6]\nlist2 = [1, 2, 5, 6]\nprint(find_intersection(list1, list2))", "category": "Python"}, {"instruction": "Implement a function to extract the last two words from a string of words", "input": "", "output": "def get_last_two_words(string):\n    \"\"\"\n    Extract and return the last two words from a string of words\n    :param string: the input string\n    :return: the last two words\n    \"\"\"\n    words = string.split(\" \")\n    return words[-2:]", "category": "Python"}, {"instruction": "Write a function to find the longest string in a list of strings.", "input": "", "output": "def find_longest_string(strings):\n    \"\"\"\n    Find and return the longest string in a list of strings.\n    :param strings: the list of strings\n    :return: the longest string\n    \"\"\"\n    longest = \"\"\n    for string in strings:\n        if len(string) > len(longest):\n            longest = string\n    return longest", "category": "Python"}, {"instruction": "Write a function to calculate the average score of a list of numbers.", "input": "", "output": "def get_average(numbers):\n    \"\"\"\n    Calculate and return the average of a list of numbers\n    :param numbers: the list of numbers\n    :return: the average of the numbers\n    \"\"\"\n    total = 0\n    for number in numbers:\n        total += number\n    return total / len(numbers)", "category": "Python"}, {"instruction": "convert all words in a sentence to camelCase", "input": "The quick brown fox jumps over the lazy dog", "output": "\"\"\"\nConvert all words in a sentence to camelCase\n\nInput: The quick brown fox jumps over the lazy dog\n\nOutput: theQuickBrownFoxJumpsOverTheLazyDog\n\"\"\"\n\ndef toCamelCase(sentence):\n    words = sentence.split(\" \")\n    result = \"\"\n    for index, word in enumerate(words):\n        if index > 0:\n            small_word = word.capitalize()\n            result += small_word\n        else:\n            result += word\n    return result\n\nsentence = \"The quick brown fox jumps over the lazy dog\"\nprint(toCamelCase(sentence))", "category": "Python"}, {"instruction": "classify the following sentence using a sentiment analysis model.", "input": "The movie is awesome.", "output": "\"\"\"\nClassify the following sentence using a sentiment analysis model.\nSentence: The movie is awesome.\n\"\"\"\n\nfrom textblob import TextBlob\n\nsentence = \"The movie is awesome.\"\n\n# convert the sentence to a TextBlob object\nblob = TextBlob(sentence)\n\n# get the sentiment\nsentiment = blob.sentiment\n\nif sentiment.polarity > 0:  # positive sentiment\n    print(\"This sentence is classified as Positive.\")\nelif sentiment.polarity == 0:  # neutral sentiment\n    print(\"This sentence is classified as Neutral.\")\nelse:  # negative sentiment\n    print(\"This sentence is classified as Negative.\")", "category": "Python"}, {"instruction": "Given a string, write a function to remove all the duplicate characters.", "input": "string = \"apple\"", "output": "def remove_duplicates(string): \n    new_string = \"\" \n    for char in string:\n        if char not in new_string:\n            new_string += char \n    return new_string", "category": "Python"}, {"instruction": "Given a binary tree, write a code snippet to list all of its descendant leafs.", "input": "", "output": "def listDescendantLeaves(root):\n    if not root: \n        return\n    elif not root.left and not root.right: \n        print(root.val) \n    listDescendantLeaves(root.left) \n    listDescendantLeaves(root.right)", "category": "Python"}, {"instruction": "Generate a unique and random password for a user using python.", "input": "", "output": "import random \ncharacters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+-=[ ]{}:'\npassword = random.choices(characters, k = 16) \nprint(\"\".join(password))", "category": "Python"}, {"instruction": "Create a Linked List Node with the data of type integer.", "input": "", "output": "class Node: \n  \n  # Function to initializaee the node object \n  def __init__(self, data): \n    self.data = data # Assign data \n    self.next = None # Initialize next as null", "category": "Python"}, {"instruction": "Using the numpy library, create a 3x3 Identity Matrix.", "input": "", "output": "iden_matrix = numpy.identity(3) \nprint(iden_matrix)", "category": "Python"}, {"instruction": "For the following two arrays, create a code snippet to return the intersecting element.", "input": "arr1 = [1, 9, 4, 10]\narr2 = [2, 4, 7, 8]", "output": "intersect_arr = [] \nfor i in arr1:\n    if i in arr2:\n        intersect_arr.append(i)\nreturn intersect_arr", "category": "Python"}, {"instruction": "Create a new array that contains only the even numbers from a given array.", "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8]", "output": "arr = [x for x in arr if x % 2 == 0]", "category": "Python"}, {"instruction": "Write a code to delete all items from a list with a value of 3.", "input": "mylist = [2, 3, 3, 4, 5, 6, 4, 7]", "output": "mylist = [item for item in mylist if item != 3]", "category": "Python"}, {"instruction": "Change the following array so that it only contains numbers divisible by 3", "input": "mylist = [2, 4, 5, 6, 7, 11, 12, 22]", "output": "mylist = [x for x in mylist if x % 3 == 0]", "category": "Python"}, {"instruction": "Read the following two JSON strings and merge them", "input": "json1 = {\n    \"name\": \"John\",\n    \"age\": 20\n}\n\njson2 = {\n    \"address\": \"123 Street\"\n}", "output": "import json\n\njson1 = json.loads(json1)\njson2 = json.loads(json2)\nmerged_json = {**json1, **json2}", "category": "Python"}, {"instruction": "Parse the string \"Hello[1]World[4]123[3]\" into a list.", "input": "string = \"Hello[1]World[4]123[3]\"", "output": "my_list = string.split('[')\nmy_list = [item.replace(']', '') for item in my_list]\nmy_list = [int(item) for item in my_list[1::2]]", "category": "Python"}, {"instruction": "Write a simple calculator program.", "input": "", "output": "def calculator():\n    number1 = int(input(\"Please enter first number: \"))\n    number2 = int(input(\"Please enter second number: \"))\n    print(\"Please choose operation -\\n\" \\\n          \"1. Add\\n\" \\\n          \"2. Subtract\\n\" \\\n          \"3. Multiply\\n\" \\\n          \"4. Divide\\n\") \n\n    choice = int(input(\"Enter your choice: \"))\n    if choice == 1:\n        ans = number1 + number2\n        print(\"Answer={}\".format(ans))\n    elif choice == 2:\n        ans = number1 - number2\n        print(\"Answer={}\".format(ans))\n    elif choice == 3:\n        ans = number1 * number2\n        print(\"Answer={}\".format(ans))\n    elif choice == 4:\n        ans = number1 / number2\n        print(\"Answer={}\".format(ans))\n    else:\n        print(\"Invalid Choice\")", "category": "Python"}, {"instruction": "Write a function that checks if a string is a palindrome or not.", "input": "string = \"ana\"", "output": "def is_palindrome(string):\n    rev = ''.join(reversed(string))\n    if rev == string:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Write an algorithm to generate the Fibonacci series up to the nth term", "input": "", "output": "def fibonacci(n):  \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Write a function to determine if two strings are anagrams of each other", "input": "", "output": "def are_anagrams(str1, str2):\n    if len(str1) != len(str2):\n        return False\n\n    freq1 = {}\n    freq2 = {}\n\n    for char in str1:\n        if char not in freq1:\n            freq1[char] = 1\n        else:\n            freq1[char] += 1\n\n    for char in str2:\n        if char not in freq2:\n            freq2[char] = 1\n        else:\n            freq2[char] += 1\n\n    for key in freq1:\n        if key not in freq2 or freq2[key] != freq1[key]:\n            return False\n    \n    return True", "category": "Python"}, {"instruction": "Generate pseudocode for a matrix multiplication algorithm.", "input": "", "output": "\"\"\"\nGenerate pseudocode for a matrix multiplication algorithm.\n\"\"\"\n\n# Create an NxN matrix result, initialized to 0\nresult = zeros(NxN)\n\n# loop through matrix A and B\nfor i in range(N):\n    for j in range(N):\n        for k in range(N):\n            # multiply the elements of A and B\n            result[i][j] += A[i][k] * B[k][j]\n\n# return the result matrix\nreturn result", "category": "Python"}, {"instruction": "Create a function in Python to calculate the factorial of a number.", "input": "", "output": "def factorial(n):\n    \"\"\"This function returns the factorial of a given integer\"\"\"\n    if n == 0:\n        return 1\n    else: \n        return n * factorial(n-1)", "category": "Python"}, {"instruction": "Create a function to generate a random password of length n", "input": "", "output": "import random\n\ndef generate_password(n):\n    \"\"\"\n    Create a function to generate a random password of length n\n    :param n: the length of the password\n    :return: a random password of length n\n    \"\"\" \n    # create a character list of symbols, alphabets, and numbers\n    characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+-='\n    # create a list of length n with random characters\n    password = [random.choice(characters) for _ in range(n)] \n    # convert the list to a string\n    password = ''.join(password)  \n    # return the password\n    return password", "category": "Python"}, {"instruction": "Generate a data structure that can efficiently store an array of words", "input": "", "output": "\"\"\"\nGenerate a data structure that can efficiently store an array of words\n\"\"\"\n\n# create a trie (a node with 26 references to other nodes)\nclass TrieNode:\n    def __init__(self):\n        self.children = dict()\n        self.end = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word):\n        node = self.root\n        for c in word:\n            if c not in node.children:\n                node.children[c] = TrieNode()\n            node = node.children[c]\n        node.end = True\n\n# create an empty array\nword_array = []\n\n# create a new trie\ntrie = Trie()\n\n# iterate over the array and insert the words into the trie\nfor word in word_array:\n    trie.insert(word)", "category": "Python"}, {"instruction": "How do you declare a variable in Python?", "input": "", "output": "In Python, you can declare a variable by assigning a value to it. For example, x = 1 is a variable declaration which creates a variable named x with the value of 1.", "category": "Python"}, {"instruction": "Write a Python function to check if a value exists in a list.", "input": "", "output": "def is_in_list(lst, val):\n    return val in lst", "category": "Python"}, {"instruction": "Explain the concept of object-oriented programming.", "input": "", "output": "Object-oriented programming (OOP) is a programming paradigm based on the concept of \"objects\", which can contain data and code: data in the form of fields and code in the form of procedures. OOP is used to design objects which contain both data and functions as one unit and help in creating reusable code.", "category": "Python"}, {"instruction": "Write a code to remove the oldest elements from a list until the list contains at most 10 elements.", "input": "list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "output": "def remove_old_elements(lst):\n  for i in range(len(lst) - 10):\n    lst.pop(0)\n  return lst\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(remove_old_elements(list)) # [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "category": "Python"}, {"instruction": "Create a program to display all prime numbers between a given range.", "input": "a, b = 2, 8", "output": "def prime_numbers_in_range(a, b):\n    \"\"\"\n    Displays all prime numbers between a given range.\n    \"\"\"\n    for num in range(a, b+1):\n        if is_prime(num):\n            print(num,' is prime.')\n\ndef is_prime(num):\n    \"\"\"\n    Checks if a number is prime or not.\n    \"\"\"\n    if num == 1:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False \n    return True", "category": "Python"}, {"instruction": "Write code to find the most frequent item in an array", "input": "arr = [1, 4, 6, 8, 9, 1, 4, 6]", "output": "def most_frequent_item(arr):\n    \"\"\"\n    Finds the most frequent item in an array.\n    \"\"\"\n    dictionary = {}\n    for i in arr:\n        if i in dictionary:\n            dictionary[i] += 1\n        else:\n            dictionary[i] = 1\n\n    max_count = 0\n    max_item = 0\n\n    for k, v in dictionary.items():\n        if v > max_count:\n            max_item = k\n            max_count = v\n    return max_item", "category": "Python"}, {"instruction": "Find the index of a given item in an array", "input": "arr = [1, 4, 6, 8, 9]\nitem = 8", "output": "def find_index(arr, item):\n    \"\"\"\n    Finds the index of a given item in an array\n    \"\"\"\n    for i, num in enumerate(arr):\n        if num == item:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Write code to find the longest substring of unique characters in a given string.", "input": "string = 'abcabcbb'", "output": "def find_longest_substring(string):\n    \"\"\"\n    Finds the longest substring of unique characters in a given string.\n    \"\"\"\n    longest_substring = ''\n    current_substring = ''\n    for ch in string:\n        if ch not in current_substring:\n            current_substring += ch\n            if len(current_substring) > len(longest_substring):\n                longest_substring = current_substring\n        else:\n            current_substring = ch\n    return longest_substring", "category": "Python"}, {"instruction": "Write code to implement Bubble Sort.", "input": "arr = [5, 8, 2, 4, 7, 10]", "output": "def bubble_sort(arr):\n    \"\"\"\n    Implementation of the Bubble Sort algorithm.\n    \"\"\"\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-1-i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr", "category": "Python"}, {"instruction": "Write a function to calculate the arithmetic mean of an array of numbers", "input": "arr = [5, 8, 2, 4, 7, 10]", "output": "def calculate_mean(arr):\n    \"\"\"\n    Calculate the arithmetic mean of an array of numbers.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    \n    return sum(arr) / len(arr)", "category": "Python"}, {"instruction": "Write code to find the smallest number in an array of numbers.", "input": "arr = [5, 8, 2, 4, 7, 10]", "output": "def find_smallest_number(arr):\n    \"\"\"\n    Finds the smallest number in an array of numbers.\n    \"\"\"\n    min_num = arr[0]\n    for num in arr[1:]:\n        if num < min_num:\n            min_num = num\n    return min_num", "category": "Python"}, {"instruction": "Create a program which will take the user's name and output a custom message depending on the supplied name", "input": "name = 'John'", "output": "def greet_user(name):\n    \"\"\"\n    Greet the user with a custom message depending on the supplied name.\n    \"\"\"\n    if name == 'John':\n        print('Hey there John! Welcome back!')\n    elif name == 'Mary':\n        print('Good morning Mary! How are you doing today?')\n    else:\n        print('Hi there! Welcome to our service!')", "category": "Python"}, {"instruction": "Write a code to check whether a given year is a leap year or not", "input": "", "output": "def is_leap_year(year):\n    \"\"\"\n    Checks if the given year is a leap year or not.\n    \"\"\"\n    if ((year % 4 == 0) and (year % 100 != 0)) or (year % 400 == 0):  \n        return True  \n    else:  \n        return False", "category": "Python"}, {"instruction": "Write a function that takes a string and returns a boolean based on whether the string is a palindrome or not.", "input": "", "output": "def is_palindrome(str):\n    \"\"\"\n    Checks if the given input string is a palindrome or not.\n    \"\"\"\n    return str == str[::-1]", "category": "Python"}, {"instruction": "Find the top 5 most common words in a given string.", "input": "s = \"Hello world, this is a sample string for the task\"", "output": "\"\"\"\nFind the top 5 most common words in a given string\n\"\"\"\n\nfrom collections import Counter\n\ndef get_top_five_words(s):\n    \"\"\"Get the top five most common words in a given string.\n    \n    Args:\n        s (str): The string to process.\n        \n    Returns:\n        list: A list of (word, count) tuples sorted in descending order\n            of the most common words.\n    \"\"\"\n    words = s.split()\n    counts = Counter(words).most_common(5)\n    return counts\n    \nif __name__ == '__main__':\n    s = \"Hello world, this is a sample string for the task\"\n    print(get_top_five_words(s))", "category": "Python"}, {"instruction": "Find the longest common substring between two strings.", "input": "s1 = \"Tangible\"\ns2 = \"Non-Tangible\"", "output": "\"\"\"\nFind the longest common substring between two strings\n\"\"\"\n\ndef longest_common_substring(s1, s2):\n    \"\"\"Find the longest common substring between two strings.\n    \n    Args:\n        s1 (str): The first string.\n        s2 (str): The second string.\n        \n    Returns:\n        str: The longest common substring.\n    \"\"\"\n    max_length = 0\n    longest_substring = \"\"\n    len1, len2 = len(s1), len(s2)\n    for i in range(len1): \n        for j in range(len2):\n            length = 0\n            while i + length < len1 and j + length < len2:\n                if s1[i + length] != s2[j + length]:\n                    break \n                length += 1\n            if length > max_length:\n                max_length = length\n                longest_substring = s1[i : i + length]\n    return longest_substring\n    \nif __name__ == '__main__':\n    s1 = \"Tangible\"\n    s2 = \"Non-Tangible\"\n    print(longest_common_substring(s1, s2))", "category": "Python"}, {"instruction": "Create a function to reverse a string.", "input": "s = \"hello world\"", "output": "\"\"\"\nReverse string\n\"\"\"\n\ndef reverse_string(s):\n    \"\"\"Reverse a given string.\n    \n    Args:\n        s (str): The string to reverse.\n        \n    Returns:\n        str: The reversed string.\n    \"\"\"\n    return s[::-1]\n    \nif __name__ == '__main__':\n    s = \"hello world\"\n    print(reverse_string(s))", "category": "Python"}, {"instruction": "Create a program that prints the first 10 Fibonacci numbers.", "input": "", "output": "\"\"\"\nPrint the first ten Fibonacci numbers\n\"\"\"\n\ndef print_first_ten_fibonacci_numbers():\n    \"\"\"Print the first ten Fibonacci numbers.\"\"\"\n\n    n1, n2 = 0, 1\n    num = 0\n    while num < 10:\n        print(n1)\n        nth= n1 + n2\n        n1 = n2\n        n2 = nth\n        num += 1\n        \nif __name__ == '__main__':\n    print_first_ten_fibonacci_numbers()", "category": "Python"}, {"instruction": "Redesign the following Python program with functions.", "input": "my_list = [5, 10, 15, 20]\nsum = 0\nfor number in my_list:\nsum = sum + number", "output": "def sum_of_list(my_list):\n  sum = 0\n  for number in my_list:\n    sum = sum + number\n  return sum\n\nmy_list = [5, 10, 15, 20]\nresult = sum_of_list(my_list)", "category": "Python"}, {"instruction": "Design a function in Python that returns the median of an array of integers.", "input": "", "output": "def median(arr):\n  sortedArr = sorted(arr)\n  length = len(arr)\n  if length % 2 == 0:\n    return ((sortedArr[length//2-1] + sortedArr[length//2])/2)\n  else:\n    return sortedArr[length//2]", "category": "Python"}, {"instruction": "Reorder a given array in specialized order", "input": "", "output": "def reorder_array(arr):\n    \"\"\"\n    Reorder a given array in specialized order\n    :param arr: the input array to reorder\n    :return: the reordered array\n    \"\"\"\n    # determine the size of the array\n    n = len(arr)\n    \n    # create a new array to store the reordered results\n    reordered = [0] * n\n    \n    # loop through the array \n    for i in range(n):\n        # calculate the position of the current element\n        pos = 2 * (arr[i] % (1 + n // 2))\n        # find the first vacant position in the new array\n        while reordered[pos] != 0:\n            pos += 1\n        # assign the current element to the vacant position\n        reordered[pos] = arr[i]\n    \n    return reordered", "category": "Python"}, {"instruction": "Debug the following Python code", "input": "def f(x):\n    if x > 0:\n        return -1\n    else:\n        return 1", "output": "\"\"\"\nDebug the following Python code\n\ndef f(x):\n    if x > 0:\n        return -1\n    else:\n        return 1\n\"\"\"\n\n# incorrect indentation of the else statement\ndef f(x):\n    if x > 0:\n        return -1\n    else:\n        return 1   # correct indentation", "category": "Python"}, {"instruction": "Write a Python script that reads in a string and checks if it is a palindrome.", "input": "\"Radar\"", "output": "The given string is a palindrome.", "category": "Python"}, {"instruction": "Develop an algorithm to print out the following pattern.", "input": "", "output": "def print_pattern():\n    for i in range(1, 5):\n        for j in range(1,i+1):\n            print(j, end=\" \")\n        print()", "category": "Python"}, {"instruction": "Create a function that calculates the average of given list of numbers.", "input": "[10, 15, 20, 25, 30]", "output": "def mean(nums):\n    sum = 0\n    for i in nums:\n      sum += i\n    return sum / len(nums)", "category": "Python"}, {"instruction": "Create a function to return the largest element from a list.", "input": "[3, 9, 6, 2, 5]", "output": "def largest_element(lst):\n    largest = lst[0]\n    for num in lst:\n        if num > largest:\n            largest = num\n    return largest", "category": "Python"}, {"instruction": "What is the output of the following code?\n\nlist1 = [1, 2, 3]\nlist2 = list1\nlist1[0] = 'a'", "input": "", "output": "The output of the code is ['a', 2, 3] because list2 is just a reference to the same object as list1, so when list1 is changed the changes are reflected in the list2 as well.", "category": "Python"}, {"instruction": "Create a function to merge two dictionaries in Python.", "input": "", "output": "def merge_dicts(dict1, dict2):\n    merged_dict = {**dict1, **dict2}\n    return merged_dict", "category": "Python"}, {"instruction": "Create a function to generate a list of all prime numbers in a given range.", "input": "", "output": "def prime_nums(n): \n    prime_list = [] \n    for i in range(2, n + 1): \n        for j in range(2,i): \n            if (i % j) == 0: \n                break\n        else: \n            prime_list.append(i)\n    return prime_list", "category": "Python"}, {"instruction": "Use the given function to detect if a given string is a palindrome.", "input": "", "output": "def is_palindrome(str):\n    reversedStr = str[::-1]\n    if reversedStr == str:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Use the given function to generate a random password of the specified length.", "input": "", "output": "import random\n\ndef generate_password(length):\n    alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'\n    password = ''\n    for i in range(length):\n        password += random.choice(alphabet)\n    return password", "category": "Python"}, {"instruction": "Write a Python program to print the multiplication table of a number.", "input": "", "output": "def print_mult_table(n):\n    for i in range(1, 11):\n        print('{} x {} = {}'.format(n, i, n*i))", "category": "Python"}, {"instruction": "Replace the \"TODO\" with the appropriate code for implementing a binary search algorithm in Python.", "input": "# TODO", "output": "def binarySearch(arr, target):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == target:\n            return mid\n\n        elif arr[mid] < target:\n            low = mid + 1\n\n        else:\n            high = mid - 1\n\n    return -1", "category": "Python"}, {"instruction": "Generate a code that concatenates a reversed copy of a given string to itself.", "input": "Python", "output": "def concatenate_reversed(s):\n    \"\"\"This function takes a string as input and concatenates a reversed copy of it to itself\"\"\"\n    return s + s[::-1]", "category": "Python"}, {"instruction": "Write a python program to determine whether a given number is a perfect square or not.", "input": "", "output": "def is_perfect_square(n):\n    \"\"\"This function takes a number as input and determines whether it is a perfect square or not\"\"\"\n    i = 1\n    while i*i < n:\n        i += 1\n    if i*i == n:\n        return True\n    return False", "category": "Python"}, {"instruction": "Can you explain the bubble sort algorithm?", "input": "", "output": "Bubble sort is a simple sorting algorithm which iterates through a list and compares adjacent elements, swapping them if they are in the incorrect order. This process is repeated until the list is sorted in its correct order. It is a slow algorithm as it requires multiple iterations of the list, but it is simple to understand and implement.", "category": "Python"}, {"instruction": "Create a code to find all prime numbers between 2 and a given integer.", "input": "", "output": "def find_primes_below(n):\n    \"\"\"This function finds all prime numbers between 2 and a given integer\"\"\"\n    primes = [True] * n\n    primes[0], primes[1] = False, False\n\n    # Find prime numbers\n    for i, is_prime in enumerate(primes):\n      if is_prime:\n        for num in range(i*i, n, i):\n            primes[num] = False\n\n    # Filter out primes\n    return [i for i, prime in enumerate(primes) if prime]", "category": "Python"}, {"instruction": "Write code for sorting an array in-place.", "input": "", "output": "def quicksort(arr):\n    \"\"\"This function takes an array as parameter and sorts it in-place\"\"\"\n    if len(arr) <= 1:\n        return\n    pivot = arr[0]\n    left, right = [], []\n    for i in range(1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    quicksort(left)\n    quicksort(right)\n    arr[:] = left + [pivot] + right", "category": "Python"}, {"instruction": "Create an algorithm that finds the maximum element of an array.", "input": "[2, 3, 5, 1, 4]", "output": "def find_max_element(arr):\n    \"\"\"This function takes an array and returns the maximum element\"\"\"\n    max_el = arr[0]\n    for el in arr:\n        if el > max_el:\n            max_el = el\n    return max_el", "category": "Python"}, {"instruction": "Create a function that takes in a list of strings and returns a new list of only the strings longer than 4 characters.", "input": "['Python', 'JavaScript', 'C++', 'Scala', 'Haskell']", "output": "def filter_long_words(str_list):\n    \"\"\"This function takes a list of strings and returns a new list of only the strings longer than 4 characters\"\"\"\n    result = []\n    for word in str_list:\n        if len(word) > 4:\n            result.append(word)\n    return result", "category": "Python"}, {"instruction": "Generate a function that takes a list of strings and returns a list that includes capitalized version of all strings", "input": "['hello', 'world', 'my', 'name', 'is']", "output": "def capitalize_list(words):\n    \"\"\"This function takes a list of strings and returns a list that \n    includes capitalized version of all strings\n    \"\"\"\n\n    capitalized_list = []\n\n    for word in words:\n        capitalized_word = word.capitalize()\n        capitalized_list.append(capitalized_word)\n    \n    return capitalized_list", "category": "Python"}, {"instruction": "Create a program that prints out an Egyptian multiplication table up to twelve", "input": "", "output": "def print_egyptian_table():\n    print(\"Egyptian Multiplication Table\")\n    print(\"----------------------------\")\n\n    for i in range(1,13):\n        for j in range(1,13):\n            product = i * j\n            print(f\"{i} x {j} = {product}\")\n        print(\"----------------------------\")\n\nif __name__ == \"__main__\":\n    print_egyptian_table()", "category": "Python"}, {"instruction": "Edit the code to add each item to a dictionary.", "input": "def add_to_dict(input_dict, key, value):\n    return", "output": "def add_to_dict(input_dict, key, value):\n    if key in input_dict:\n        input_dict[key].append(value)\n    else:\n        input_dict[key] = [value]\n    return input_dict", "category": "Python"}, {"instruction": "Find all occurrences of a substring in a given string.", "input": "string = \"the cat in the hat\"\nsubstring = \"cat\"", "output": "def find_substring_occurrences(string, substring):\n    occurrence_list = []\n    index = 0\n    while string.find(substring, index) != -1:\n        index = string.find(substring, index)\n        occurrence_list.append(index)\n        index += 1\n    return occurrence_list", "category": "Python"}, {"instruction": "Given a list of lists, find the longest sublist.", "input": "list = [[1,2,3], [2,3,4,5], [4,5,6]]", "output": "def find_longest_sublist(list):\n    longestList = []\n    for subList in list:\n        if len(subList) > len(longestList):\n            longestList = subList\n    return longestList", "category": "Python"}, {"instruction": "Given a string, find the word with the longest length.", "input": "input_string = \"Hello World\"", "output": "def find_longest_word(input_string):\n    longest_word = ''\n    for word in input_string.split():\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word", "category": "Python"}, {"instruction": "Find the most frequent character in an inputted string.", "input": "input_string = \"Hello, world\"", "output": "def find_most_frequent_character(input_string):\n    char_count_dict = {}\n    for char in input_string:\n        if char in char_count_dict.keys():\n            char_count_dict[char] += 1\n        else:\n            char_count_dict[char] = 1\n    max_count = 0\n    max_char = ''\n    for char in char_count_dict.keys():\n        if char_count_dict[char] > max_count:\n            max_count = char_count_dict[char]\n            max_char = char\n    return max_char", "category": "Python"}, {"instruction": "Generate code to generate a random number between 0 and 5, both inclusive.", "input": "", "output": "import random\n\ndef random_num0_to_5():\n    \"\"\"This function generates a random number between 0 and 5, both inclusive\"\"\"\n    return random.randint(0, 5)", "category": "Python"}, {"instruction": "What are the differences between a class and an object?", "input": "", "output": "A class is a blueprint or template for objects. It is a definition of the object\u2019s properties, methods and behaviors. An object is an instance of a class, meaning it takes on the properties, methods and behaviors defined by the class. A class can have multiple objects, and each object can have different values for its properties. Objects allow us to model real-world objects in software.", "category": "Python"}, {"instruction": "Create a Python class called \"Person\" with name and age as attributes.", "input": "", "output": "class Person:\n def __init__(self, name, age):\n     self.name = name\n     self.age = age", "category": "Python"}, {"instruction": "Given a Python dictionary with integer keys, write a function to convert the dictionary into a list of tuples.", "input": "d = {1: 'a', 2: 'b'}", "output": "def dict_to_tuple(d):\n  return list(d.items())", "category": "Python"}, {"instruction": "Create a function which takes a string as an input and checks if it is a palindrome.", "input": "string = \"level\"", "output": "def is_palindrome(string): \n    if string == string[::-1]: \n        return True\n    return False\n  \nstring = \"level\"\nresult = is_palindrome(string)\nprint(result)", "category": "Python"}, {"instruction": "Our program should accept an arbitrary number of integers and output a list of the largest number from each.", "input": "1 2 3 4 5", "output": "def largest_number(nums):\n    largest = []\n    for num in nums:\n        if len(largest) == 0 or num > largest[-1]:\n            largest.append(num)\n    return largest\n\nnums = [1,2,3,4,5]\nresult = largest_number(nums)\nprint(result)", "category": "Python"}, {"instruction": "Create a function to determine the output of", "input": "def my_func(x):\n    if x == 0:\n        return 1\n    else:\n        return x * my_func(x-1)\n\nx = 5", "output": "def my_func(x):\n    if x == 0:\n        return 1\n    else: \n        return x * my_func (x-1) \n\ndef solve(x): \n    return my_func(x)\n\nx = 5\nresult = solve(x)\nprint(result)", "category": "Python"}, {"instruction": "Create a function which takes a list and a value and returns true if the value is present in the list, otherwise false", "input": "list = [1, 2, 3, 4, 5]\nval = 3", "output": "def check_val(lst, val): \n    return val in lst", "category": "Python"}, {"instruction": "Write a Python program to combine the elements of two lists of equal length into a dictionary.", "input": "list1 = ['a', 'b', 'c'] \nlist2 = [1, 2, 3]", "output": "dict = {}\nfor i in range(len(list1)): \n    dict[list1[i]] = list2[i] \n  \nprint(dict)", "category": "Python"}, {"instruction": "Create an algorithm to generate all possible subsets of a given set of elements.", "input": "", "output": "The following algorithm can be used to generate all possible subsets of a given set of elements:\n1. Create an empty list to store the subsets.\n2. Iterate over each element in the given set and for each element:\n     a. Add the element to the list of subsets.\n     b. For each subset in the list:\n        i. Create a new subset with the element added to the existing subset.\n        ii. Add the new subset to the list of subsets.\n3. Return the list of subsets.", "category": "Python"}, {"instruction": "Given two string parameters,  s1 and s2, construct a function that returns the longest common subsequence between the two strings.", "input": "s1 = \"Hello there!\"\ns2 = \"Hi there!\"", "output": "def longest_common_subsequence(s1, s2):\n    # Init matrix \n    num_rows = len(s1) + 1\n    num_cols = len(s2) + 1\n    matrix = [[0 for x in range(num_cols)] for y in range(num_rows)]\n    # Populate matrix\n    for r in range(1, num_rows):\n        for c in range(1, num_cols):\n            if s1[r-1] == s2[c-1]:\n                matrix[r][c] = matrix[r-1][c-1] + 1\n            else:\n                matrix[r][c] = max(matrix[r-1][c], matrix[r][c-1])\n    # Create result\n    result = \"\"\n    r = num_rows - 1\n    c = num_cols - 1\n    while r > 0 and c > 0:\n        if s1[r-1] == s2[c-1]:\n            result = s1[r-1] + result\n            r -= 1\n            c -= 1\n        elif matrix[r-1][c] > matrix[r][c-1]:\n            r -= 1\n        else:\n            c -= 1\n    return result", "category": "Python"}, {"instruction": "Describe an algorithm to sort an array of integers in increasing order.", "input": "[4, 3, 1, 9, 11]", "output": "A simple bubble sort algorithm can be used to sort an array of integers in increasing order. We start at the beginning of the array and compare each pair of adjacent items and swap them if they are in the wrong order. We repeat this process until the array is sorted. For the input array [4, 3, 1, 9, 11], a single pass of bubble sorting the array would go as follows:\n[4, 3, 1, 9, 11] -> [3, 4, 1, 9, 11] -> [3, 1, 4, 9, 11] -> [3, 1, 4, 9, 11] -> [1, 3, 4, 9, 11]. The algorithm is then done since no swaps have been made in the last pass. The final sorted array is [1, 3, 4, 9, 11].", "category": "Python"}, {"instruction": "Create an API endpoint for handling user authentication.", "input": "Endpoint URL: www.example.com/auth", "output": "@app.route(\"/auth\", methods=['POST'])\ndef auth():\n    data = request.get_json()\n    username = data.get(\"username\")\n    password = data.get(\"password\")\n\n    user = User.check_user_auth(username, password)\n    if user:\n        session['username'] = username\n        return jsonify(success=True)\n    else:\n        return jsonify(success=False)", "category": "Python"}, {"instruction": "Write a function that calculates the sum of the digits of a number.", "input": "Number: 13", "output": "def sum_of_digits(n): \n    # handle negative numbers \n    n = abs(n)\n\n    # base case when n has only one digit\n    if n < 10: \n        return n \n\n    # calculate the sum of the digits recursively  \n    else: \n        return (n % 10 + sum_of_digits(int(n / 10))) \n\nprint(sum_of_digits(13))", "category": "Python"}, {"instruction": "Complete the function so that it returns the minimum element in the provided list.", "input": "def min_element(lis):\n    # TODO: write code to find and return the minimum element in the list", "output": "def min_element(lis):\n    # set min to first element in the list\n    min = lis[0]\n  \n    # iterate over the list and compare each element to \n    # the current minimum. If a smaller element is found, \n    # update min. \n    for x in lis:\n        if x < min: \n            min = x\n  \n    # return min\n    return min", "category": "Python"}, {"instruction": "Complete this function to add two matrices.", "input": "def add_matrices(a, b):\n    # TODO: write code to add two matrices\n    # matrix a and b have the same dimensions", "output": "def add_matrices(a, b):\n    # create a new empty matrix, use the same dimensions as a and b\n    result = [[0 for x in range(len(a[0]))] for y in range(len(a))]\n\n    # iterate over a and b to complete the matrix addition \n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            result[i][j] = a[i][j] + b[i][j]\n\n    return result", "category": "Python"}, {"instruction": "Run the same transormation to the text using the provided code.", "input": "Text: \"He was very happy!\"\nCode: \ntext = text.lower()\ntext = text.replace('!', '.')", "output": "\"he was very happy.\"", "category": "Python"}, {"instruction": "Write the output of this Python code.", "input": "a = 10\nb = 5\nc = 6\n\nprint(a + b * c)", "output": "56", "category": "Python"}, {"instruction": "Write a function in Python to calculate the Euclidean Distance between two points.", "input": "point1 = [-1, 0]\npoint2 = [4, 7]", "output": "def euclidean_distance(point1, point2):\n from math import sqrt\n return sqrt(sum([(x - y)**2 for x, y in zip(point1, point2)]))\n\ndistance = euclidean_distance(point1, point2)\nprint(distance)", "category": "Python"}, {"instruction": "Create a Python function to insert a new element in a list at the given index.", "input": "list1 = [1, 2, 3, 4, 5]\nindex = 3\nelement = 6", "output": "def insert_element(lst, idx, element):\n lst.insert(idx, element)\n return lst\n\nlist1 = insert_element(list1, index, element)\nprint(list1)", "category": "Python"}, {"instruction": "Write a function in Python to convert JSON data into a Python dictionary.", "input": "json_data = '{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}'", "output": "import json\n\ndef json_to_dict(json_data):\n return json.loads(json_data)\n\ndata = json_to_dict(json_data)\nprint(data)", "category": "Python"}, {"instruction": "Edit the given Python code to make the algorithm run faster.", "input": "def slow_algo(n):\n    result = 0\n    for i in range(n):\n        result += i\n    return result", "output": "def fast_algo(n):\n    result = (n * (n + 1))// 2\n    return result", "category": "Python"}, {"instruction": "Create a Python class with the same content as a JSON string.", "input": "myjson_string = '{\"name\": \"John\", \"age\": 20}'", "output": "import json\n\nclass Person:\n def __init__(self, json_string):\n  data = json.loads(json_string)\n  self.name = data['name']\n  self.age = data['age']\n\nmyjson_string = '{\"name\": \"John\", \"age\": 20}'\nperson = Person(myjson_string)\nprint(person.name, person.age)", "category": "Python"}, {"instruction": "Create a Python program to remove the characters from specific index within a string.", "input": "mystring = \"Hello, World!\"\nindex = 5", "output": "mystring = \"Hello, World!\"\nindex = 5\n\nresult = mystring[:index] + mystring[index+1:]\n\nprint(\"Result after removing characters from index {}: {}\".format(index, result))", "category": "Python"}, {"instruction": "Write a code snippet using Python to print the following sentence \"Programming is fun!\".", "input": "", "output": "print(\"Programming is fun!\")", "category": "Python"}, {"instruction": "Write a Python code snippet to calculate the area of a triangle with side lengths 3, 4, and 5.", "input": "", "output": "def area(a, b, c):\n    s = (a + b + c) / 2\n    return (s*(s-a)*(s-b)*(s-c)) ** 0.5\n\nprint(area(3, 4, 5)) # 6.0", "category": "Python"}, {"instruction": "What is the purpose of an immutable object in Python?", "input": "", "output": "The purpose of an immutable object in Python is to make sure that once an object is created, it cannot be modified. This is useful when data must not change between multiple parts of a program. Immutable objects can also help ensure thread safety by preventing different threads from modifying the same data.", "category": "Python"}, {"instruction": "Edit the code to check whether the given number is a triangle number.", "input": "def is_triangle_number(num):\n    return num == num", "output": "def is_triangle_number(num):\n    number = 0\n    for i in range(num+1):\n        number += i\n        if number == num:\n            return True\n    return False", "category": "Python"}, {"instruction": "Create a Python function to calculate the area of a triangle using Heron\u2019s formula.", "input": "a = 4\nb = 5\nc = 7", "output": "def triangle_area(a, b, c):\n    \"\"\"Calculate the area of a triangle using Heron's formula\"\"\"\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\n\nprint(triangle_area(a, b, c))", "category": "Python"}, {"instruction": "Find the number of words in a given sentence using a Python function.", "input": "sentence = \"This is a test sentence\"", "output": "def word_count(sentence):\n  return len(sentence.split())", "category": "Python"}, {"instruction": "Create a function to extract the top 10 keywords from a given text.", "input": "text = \"This is some text that I am using to test the extractKeywords function.\"", "output": "import nltk\n\ndef extractKeywords(text):\n    tokens = nltk.word_tokenize(text)\n    tags = nltk.pos_tag(tokens)\n    keywords = [word for word,pos in tags \n            if (pos == 'NN' or pos == 'NNP' or pos == 'NNS' or pos == 'NNPS')]\n    freqs = nltk.FreqDist(keywords)\n    top_ten = freqs.most_common(10)\n    return top_ten\n \nif __name__ == \"__main__\": \n    text = \"This is some text that I am using to test the extractKeywords function.\"\n    top_ten = extractKeywords(text)\n    print(top_ten)", "category": "Python"}, {"instruction": "Create a function to print all permutations of a string without duplicates.", "input": "string = \"abc\"", "output": "def permutations(string):\n    res = set()\n    if len(string) == 1:\n        res.add(string)\n    else:\n        for i, char in enumerate(string):\n            for perm in permutations(string[:i], string[i+1:]):\n                res.add(char + perm)\n    return res\n\n# Output\n{'abc', 'acb', 'bac', 'bca', 'cab', 'cba'}", "category": "Python"}, {"instruction": "Create a program to create a dictionary with words and their frequencies from a given sentence.", "input": "sentence = \"Python is an easy, powerful language with a simple syntax and high readability\"", "output": "def create_dict(sentence):\n    words = sentence.split()\n    res = {}\n    for word in words:\n        res[word] = words.count(word)\n    return res\n\n# Output\n{'Python': 1, 'is': 1, 'an': 1, 'easy,': 1, 'powerful': 1, 'language': 1, 'with': 1, 'a': 1, 'simple': 1, 'syntax': 1, 'and': 1, 'high': 1, 'readability': 1}", "category": "Python"}, {"instruction": "Convert the following csv data into a JSON object.", "input": "id,name,age\n1,John,12\n2,Jack,15", "output": "import json\n\ncsv_data = '''id,name,age\n1,John,12\n2,Jack,15'''\n\n# Split the CSV data into individual lists.\ncsv_rows = [row.strip().split(',') for row in csv_data.split('\\n')]\n# Create a dictionary from the list of values.\ndata_objects = [dict(zip(csv_rows[0], row)) for row in csv_rows[1:]]\n# Convert the dictionary to a JSON object.\njson_data = json.dumps(data_objects)\nprint(json_data)", "category": "Python"}, {"instruction": "Delete redundant if-else statements from the following code.", "input": "if x < 0:\n    result = 0\nelif x == 0:\n    result = 0\nelif x == 1:\n    result = 1\nelse:\n    result = 2", "output": "if x < 0:\n    result = 0\nelif x in [0, 1]:\n    result = x\nelse:\n    result = 2", "category": "Python"}, {"instruction": "How would you make the following function more efficient?", "input": "def find_longest_word(words):\n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word", "output": "def find_longest_word(words):\n    longest_word = words[0]\n    for word in words[1:]:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word", "category": "Python"}, {"instruction": "Create a function which takes two lists and outputs all the common elements.", "input": "list1=[2,4,6,8]\nlist2=[1,2,3,4]", "output": "def common_elements(list1, list2):\n    list3 = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                list3.append(i)\n    return list3", "category": "Python"}, {"instruction": "Create a function in Python to multiply two matrices.", "input": "matrixA = [[1, 2], [3, 4]], matrixB = [[5, 6], [7, 8]]", "output": "def multiplyMatrix(A, B):\n    rowsA = len(A)\n    columnsA = len(A[0])\n    rowsB = len(B)\n    columnsB = len(B[0])\n    \n    if columnsA != rowsB:\n        print(\"Cannot multiply\")\n        return\n    \n    result = [[0 for row in range(columnsB)] for col in range(rowsA)]\n    \n    # Compute matrix multiplication\n    for i in range(rowsA):\n        for j in range(columnsB):\n            for k in range(columnsA):\n                result[i][j] += A[i][k] * B[k][j]\n    \n    return result\n\nA = [[1, 2], [3, 4]]\nB = [[5, 6], [7, 8]]\n\n print(\"Result:\")\n result = multiplyMatrix(A, B) \n  \nfor i in result: \n    print(i)", "category": "Python"}, {"instruction": "Generate a random number between 0-100 in Python.", "input": "", "output": "import random \n  \n#Generate a random number between 0-100\nrandomNum =  random.randint(0, 100) \nprint (\"Random number:\", randomNum)", "category": "Python"}, {"instruction": "Generate an array of numbers from 0-10 in Python.", "input": "", "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Modify the given python program to accept an input string and output the length of that string.", "input": "def func():\n    print(\"Hello World!\")", "output": "def func(s):\n    print(\"Length of the string is: \" + str(len(s)))", "category": "Python"}, {"instruction": "Create a function to calculate the sum of the Triangle Series up to the given number n.", "input": "", "output": "def sum_triangle(n): \n    if n<=0: \n        return 0\n    res = (n * (n + 1)) // 2\n    return res", "category": "Python"}, {"instruction": "Create a function in Python to find the highest common factor (HCF) of two numbers.", "input": "a = 30 / b = 12", "output": "def hcf(a, b):\n    j = min(a,b)\n    hcf = 1\n    for i in range(2, j+1):\n        if(a%i == 0 and b%i == 0):\n            hcf = i\n    \n    return hcf", "category": "Python"}, {"instruction": "Generate a random string of 5 characters containing a-z and 0-9.", "input": "", "output": "import string \nimport random\n  \n# Get all ASCII uppercase letters\nstring_all = string.ascii_letters + string.digits\n  \n# Get random 5 upper case letters\nrandom_string = ''.join(random.choice(string_all) for i in range(5))\nprint(random_string)\n\n# Ex: ZV7b1", "category": "Python"}, {"instruction": "Write a function to search for an element within a linked list.", "input": "", "output": "def search(head, target): \n    curr = head\n    while (curr!= None): \n        if (curr.data == target): \n            return curr.data \n        curr = curr.next\n    return -1", "category": "Python"}, {"instruction": "Update the following code, to use Python's modern type hint annotation.", "input": "def my_func(list):\n    '''Some docstring'''\n    result = 0\n    for l in list:\n        result += l\n    return result", "output": "def my_func(list: list) -> int:\n    '''Some docstring'''\n    result = 0\n    for l in list:\n        result += l\n    return result", "category": "Python"}, {"instruction": "Translate the following word problem into Python code.", "input": "Gary has 45 dollars, John has 11 dollars and Sam has 3 dollars. They decide to split their money equally.", "output": "gary_share = 45 // 3\njohn_share = 11 // 3\nsam_share = 3 // 3\ntotal_share = gary_share + john_share + sam_share\n\nprint('Gary has {} dollars, John has {} dollars and Sam has {} dollars. The each get {} dollars in total.'.format(gary_share, john_share, sam_share, total_share))", "category": "Python"}, {"instruction": "Write a function to create a frequency table from a list of integers.", "input": "list = [1, 2, 3, 1, 4, 5, 5, 2]", "output": "def create_freq_table(lst): \n    freq_table = {} \n    for item in lst: \n        if (item in freq_table): \n            freq_table[item] += 1\n        else: \n            freq_table[item] = 1\n  \n    return freq_table", "category": "Python"}, {"instruction": "Write a Python program to check if a given number is divisible by 5 and 11 or not?", "input": "", "output": "def checkDivisibility(n):\n    if n % 5 == 0 and n % 11 == 0: \n        print(\"It is divisible by 5 and 11.\")\n    else: \n        print(\"It is not divisible by 5 and 11.\")\n     \n# Driver code \nn = 55\ncheckDivisibility(n)", "category": "Python"}, {"instruction": "Modify the following code to turn it into an Insertion Sort algorithm.", "input": "def sort_numbers(arr):\n    pass", "output": "def insertion_sort(arr): \n    for i in range(1, len(arr)):\n        x = arr[i]\n        j = i-1\n        while j >= 0 and arr[j] > x:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = x\n    return arr", "category": "Python"}, {"instruction": "Modify the following code so that it returns the lowest common multiple of two given numbers?", "input": "def lowest_common_multiple(x, y):\n    pass", "output": "def lowest_common_multiple(x, y): \n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while(True): \n        if((greater % x == 0) and (greater % y == 0)): \n            lcm = greater \n            break\n        greater += 1\n    return lcm", "category": "Python"}, {"instruction": "Create a stack data structure using Python.", "input": "", "output": "class Stack: \n  \n    def __init__(self): \n        self.stack = []\n    \n    def push(self, item):\n        self.stack.append(item)\n    \n    def is_empty(self):\n        return self.stack == []\n  \n    def pop(self): \n        if self.is_empty():\n            return None\n          \n        return self.stack.pop()", "category": "Python"}, {"instruction": "Implement a binary search algorithm using Python.", "input": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "def binary_search(nums, target): \n    start = 0\n    end = len(nums) - 1\n\n    while start <= end:\n        mid = start + (end - start)//2\n\n        if nums[mid] == target:\n            return mid\n\n        if nums[mid] > target:\n            end = mid - 1\n\n        else: \n            start = mid + 1\n\n    return -1", "category": "Python"}, {"instruction": "Write a function to perform regex match in Python.", "input": "", "output": "def regex_match(string, pattern):\n  return re.match(pattern, string)", "category": "Python"}, {"instruction": "Create a class in Python for representing a 2-dimensional point.", "input": "", "output": "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y", "category": "Python"}, {"instruction": "Create a NumPy array with all the elements set to 0.", "input": "", "output": "import numpy as np\narr = np.zeros(shape=(10, 10))", "category": "Python"}, {"instruction": "Write a function to group a list of strings based on the first two characters of each string.", "input": "list = [\"aa12\", \"bd32\", \"ca53\", \"db34\"]", "output": "def group_list(list):\n    grouped = {}\n    for item in list:\n        key = item[:2]\n        if key not in grouped:\n            grouped[ key ] = [item]\n        else:\n            grouped[ key ].append(item)\n    return grouped", "category": "Python"}, {"instruction": "Write a function to measure the similarity between two strings.", "input": "", "output": "def similarity(string1, string2):\n    common_chars = set(string1).intersection(string2)\n    return len(common_chars) / (len(string1) + len(string2) - len(common_chars))\n\nif __name__ == \"__main__\":\n    string1 = \"test\"\n    string2 = \"testimony\"\n    sim = similarity(string1, string2)\n    print(sim)", "category": "Python"}, {"instruction": "Write a code to count repeated words in a given sentence.", "input": "\"This is a sentence. This is a test sentence.\"", "output": "def count_words(sentence):\n    words = sentence.split()\n    counts = dict()\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n    return counts\n\nif __name__ == '__main__':\n    sentence = \"This is a sentence. This is a test sentence.\"\n    word_counts = count_words(sentence)\n    print(word_counts)", "category": "Python"}, {"instruction": "Write a code to convert an integer to a float in Python.", "input": "", "output": "# Convert an integer to a float in Python\ndef int_to_float(num):\n    return float(num)\n\nif __name__ == '__main__':\n    integer = 5 # Sample integer\n    print(int_to_float(integer))", "category": "Python"}, {"instruction": "Compare two JSON objects in Python.", "input": "first_obj = {\n    'name': 'John',\n    'age': 30\n}\nsecond_obj = {\n    'name': 'John',\n    'age': 34\n}", "output": "import json\n\n# Compare two JSON objects and return `True` if equal, `False` if not\ndef compare_json_objects(first_obj, second_obj):\n    first_obj_str = json.dumps(first_obj)\n    second_obj_str = json.dumps(second_obj)\n    if first_obj_str == second_obj_str:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    first_obj = {\n        'name': 'John',\n        'age': 30\n    }\n    second_obj = {\n        'name': 'John',\n        'age': 34\n    }\n    print(compare_json_objects(first_obj, second_obj))", "category": "Python"}, {"instruction": "Create an API call in Python to search for a movie by title.", "input": "", "output": "import requests\n\ndef search_movie_by_title(title):\n    url = 'https://api.themoviedb.org/3/search/movie?api_key=<api_key>&query=' + title\n    response = requests.get(url).json()\n    return response", "category": "Python"}, {"instruction": "Implement a function in Python that takes an array of numbers and returns the index of the maximum element.", "input": "[4,7,9,2,10]", "output": "def find_index_max(arr):\n    max_index = 0\n    for i in range(1, len(arr)):\n        if arr[max_index] < arr[i]:\n            max_index = i\n    return max_index", "category": "Python"}, {"instruction": "Write a function in Python to convert a given decimal number into its binary form.", "input": "", "output": "def decimal_to_binary(num):\n    binary = []\n\n    while num > 0:\n        binary.append(num%2)\n        num //= 2\n    binary.reverse()\n    return binary", "category": "Python"}, {"instruction": "Add functionality to a given Python class to retrieve a book ISBN by its title.", "input": "", "output": "class Book:\n    def __init__(self, title, isbn):\n        self.title = title\n        self.isbn = isbn\n        \n    def get_ISBN_by_title(self, title):\n        if self.title == title:\n            return self.isbn\n        else:\n            return None", "category": "Python"}, {"instruction": "Compute the maximum sum of elements of a given subarray of length k in an array of integers.", "input": "arr = [22, 4, 65, -12, 8, 99, 103], k = 2", "output": "def find_max_sum(arr, k):\n    max_sum = 0\n    window_sum = 0\n    \n    # Compute the sum of first k elements \n    for i in range(k):\n        window_sum += arr[i]\n        \n    max_sum = window_sum\n    \n    # Add new element while removing the first\n    for i in range(k, len(arr)):\n        window_sum += arr[i] - arr[i - k]\n        max_sum = max(max_sum, window_sum)\n        \n    return max_sum", "category": "Python"}, {"instruction": "Design an algorithm to sort an array using Quick Sort.", "input": "Array: [5, 3, 6, 2, 1, 4]", "output": "def quickSort(arr, low, high):\n    # Base case\n    if low >= high:\n        return\n\n    # Pivot is the middle element\n    pivot = arr[(low + high) // 2]\n    i = low # Left pointer\n    j = high # Right pointer\n\n    while i <= j:\n        # If the current value is smaller or equal than the pivot\n        while arr[i] < pivot:\n            i += 1\n        # If the current value is larger than the pivot\n        while arr[j] > pivot:\n            j -= 1\n\n        # If values are not in the correct order\n        if i <= j:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n\n    # Recursively sort the left and right halves\n    quickSort(arr, low, j)\n    quickSort(arr, i, high)\n\narr = [5, 3, 6, 2, 1, 4]\nquickSort(arr, 0, len(arr)-1)\nprint(arr)\n\nOutput: [1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Design a program to find the longest palindrome inside a given string.", "input": "String: \"abcaaacbcb\"", "output": "def longestPalindrome(string):\n # set up the N^2 matrix to store the boolean\n # values of the characters that are palindromes\n n = len(string)\n matrix = [[False for i in range(n)] for j in range(n)]\n\n max_length = 1\n start = 0\n\n # Every single character is a palindrome of length 1\n for i in range(n):\n  matrix[i][i] = True\n\n # Check for substrings of length 2\n for i in range(n - 1):\n  if string[i] == string[i + 1]:\n   matrix[i][i + 1] = True\n   start = i\n   max_length = 2\n\n # Check for substrings of length 3 and more\n for substring_length in range(3, n + 1):\n  for i in range(n - substring_length + 1):\n   end = i + substring_length - 1\n   if matrix[i + 1][end - 1] and string[i] == string[end]:\n    matrix[i][end] = True\n \n    if substring_length > max_length:\n     start = i\n     max_length = substring_length\n \n print(\"Longest palindrome substring is:\", \n\tstring[start:start + max_length])\n\nlongestPalindrome(\"abcaaacbcb\")\n\nOutput: Longest palindrome substring is: aaacbcaaa", "category": "Python"}, {"instruction": "Construct an algorithm to search for the Given Normalised Word in a Normalised Trie.", "input": "Normalised Trie:\nroot \n|\ns -- a - l -- u -- t\n|\ns -- e - l -- e -- c\nGiven Normalised Word: sault", "output": "def searchWord(node, word):\n if len(word) == 0:\n  return True\n  \n # Check if the character at first position is in the children of the current node\n if word[0] in node.children:\n  # Get the node of the character at first position\n  nextNode = node.children[word[0]]\n  \n  # Check if the rest of the string is present in the \n  # remaining children of the current node\n  return searchWord(nextNode, word[1:])\n # If the character is not found\n else:\n  return False\n  \n# Function to normalize the word\ndef normalize(word):\n # If the word contains only lower case letters\n if word.islower():\n  return word\n \n word = word.lower()\n return word\n \n# Main program\ntrie = Trie() \ntrie.add(\"sault\")\n\n# The word to be searched\nword = \"sault\"\n\n# Normalize the word\nword = normalize(word)\n\n# Search the normalized word in the trie\nif searchWord(trie.root, word):\n print(\"Found!\")\nelse:\n print(\"Not Found!\")\n\nOutput: Found!", "category": "Python"}, {"instruction": "Create a function to remove specified nodes from a linked list.", "input": "Linked List:\n10 -> 21 -> 14 -> 35 -> 19 -> 63 -> null\nNode: 14", "output": "def deleteNode(head, node):\n prev = None\n current = head\n # traverse the list until node is found\n while current is not None:\n  if current.data == node:\n  break\n  prev = current\n  current = current.next\n # if the node is the first node\n if prev is None:\n  head = current.next\n else:\n prev.next = current.next\n return head\n\nhead = {\n data: 10,\n next : { \n  data: 21, \n  next: { \n   data: 14, \n   next: { \n    data: 35, \n    next: { \n     data: 19, \n     next: { \n      data: 63, \n      next: None\n     } \n   }\n }\n}\n}\n\nprint(deleteNode(head, 14)) \n\nOutput:\ndata: 10,\nnext : { \n  data: 21, \n  next: { \n   data: 35, \n   next: { \n    data: 19, \n    next: { \n     data: 63, \n     next: None\n    } \n  }\n}\n}", "category": "Python"}, {"instruction": "Write a SQL query to select the elements from the table whose ID is not present in the given python list.", "input": "Table: 'products'\nColumns: 'id', 'name', 'category', 'price'\nPython List: [2, 3, 8]", "output": "SELECT * FROM products WHERE id NOT IN (2,3,8);", "category": "Python"}, {"instruction": "Implement a method to find the shortest path between two points in a two-dimensional array using Dijkstra's\nalgorithm.", "input": "The two-dimensional array:\n[[1, 8, 3],\n [4, 5, 6],\n [9, 5, 0]]\nStart point: [0, 0]\nEnd point: [2, 2]", "output": "# the weights array will be used to store the distances\n# from the start cell to any other cell in the array\nweights = [[float('inf')] * 3 for _ in range(3)]\nweights[0][0] = 0\n# Directions are up, down, left and right\ndirections = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\n# The queue for Dijkstra's algorithm\nq = [(0, 0)]\nwhile q:\n # curr is the current cell in consideration\n curr = q.pop(0)\n # curr_dist is the distance of the current cell\n # from the start cell\n curr_dist = weights[curr[0]][curr[1]]\n # check all the adjacent cells\n for direction in directions:\n  row = curr[0] + direction[0]\n  col = curr[1] + direction[1]\n  # if the adjacent cell is within the array\n  if 0 <= row < 3 and 0 <= col < 3:\n   # if the distance of the adjacent cell is bigger\n   # than current cell distance + 1, update it\n   if weights[row][col] > curr_dist + 1:\n    weights[row][col] = curr_dist + 1\n    q.append((row, col))\n\n# the distance from the start to the end point will\n# be stored in the weights array at the given location\ndistance = weights[2][2]\nprint(f\"The shortest path from start to end is {distance}\")", "category": "Python"}, {"instruction": "Write a Python code to open a web page and print its content.", "input": "url = \"www.wikipedia.org\"", "output": "import requests\n\nurl = \"www.wikipedia.org\"\n\ntry:\n    response = requests.get(url)\n    if response.status_code == 200:\n        print(response.text)\n    else:\n        print(\"Oops! Something went wrong!\")\n\nexcept Exception as e:\n    print(\"Exception occurred: %s\" % (e))", "category": "Python"}, {"instruction": "Calculate the total number of possible binary trees with n nodes.", "input": "", "output": "def numTrees(n): \n    if n == 0: \n        return 1\n    else: \n        num = 0\n        for roots in range(1, n+1): \n            leftNum = numTrees(roots - 1) \n            rightNum = numTrees(n - roots) \n            num += leftNum * rightNum \n    return num", "category": "Python"}, {"instruction": "Edit the following code to print out the nth Fibonacci number.", "input": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)", "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\nprint(Fibonacci(n))", "category": "Python"}, {"instruction": "Write a function that sums the elements of an array", "input": "", "output": "def array_sum(array):\n res = 0\n for el in array:\n  res += el\n return res", "category": "Python"}, {"instruction": "Find any two numbers in an array such that their sum is equal to a given value.", "input": "array = [3, 4, 5, 6, 7, 8]\nvalue = 11", "output": "for i in range(len(array)):\n for j in range(i+1, len(array)):\n  if array[i] + array[j] == value:\n   print(array[i], array[j])", "category": "Python"}, {"instruction": "Create a for loop that prints the numbers 0 to 10 and prints if the number is even or odd.", "input": "", "output": "for i in range(11):\n if i % 2 == 0:\n print(f'{i} is even')\n else:\n print(f'{i} is odd')", "category": "Python"}, {"instruction": "Create an array in Python containing the cube of all the integers from 1 to 10.", "input": "", "output": "import array\nint_array = array.array(\"i\", [i*i*i for i in range(1, 11)])", "category": "Python"}, {"instruction": "Create a function to find the longest common prefix of two strings.", "input": "str1 = \"hello\", str2 = \"helmet\"", "output": "def longest_common_prefix(str1, str2):\n    lcp = \"\"\n    i = 0\n    while i < len(str1) and i < len(str2) and str1[i] == str2[i]:\n        lcp += str1[i]\n        i += 1\n    return lcp", "category": "Python"}, {"instruction": "Find the maximum value from a Python dictionary.", "input": "sample_dict = {'a': 10, 'b': 20, 'c': 40, 'd': 30}", "output": "def find_max(sample_dict):\n  max_val = 0\n  for key, val in sample_dict.items():\n    if val > max_val:\n      max_val = val\n  return max_val", "category": "Python"}, {"instruction": "Given a list of integers, find the largest number.", "input": "test_list = [2, 5, 10, 15]", "output": "def largest_number(test_list): \n    max_number = test_list[0] \n    for i in test_list: \n        if i > max_number: \n            max_number = i \n    return max_number", "category": "Python"}, {"instruction": "Write a function to print the first n perfect square numbers.", "input": "", "output": "def print_perfect_squares(n):\n    for i in range(1,n+1):\n        square = i*i\n        print(square)", "category": "Python"}, {"instruction": "Create a function that prints a list of all the even numbers from a given list of integers.", "input": "test_list = [1, 2, 3, 4, 5, 6]", "output": "def print_even(test_list):\n    even_list = []\n    for num in test_list:\n        if num % 2 == 0:\n            even_list.append(num)\n    print(even_list)", "category": "Python"}, {"instruction": "Create an iOS app that calculates and shows the currency conversion rate between two different countries.", "input": "", "output": "import UIKit\n\nclass ViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // Do any additional setup after loading the view.\n        \n        let fromCurrency = \"USD\"\n        let toCurrency = \"AUD\"\n        \n        CurrencyService.shared.getCurrencyExchangeRate(fromCurrency: fromCurrency, toCurrency: toCurrency) { exchangeRate in\n            print(\"The exchange rate from \\(fromCurrency) to \\(toCurrency) is \" + exchangeRate)\n        }\n    }\n\n}\n\nclass CurrencyService {\n    \n    static let shared = CurrencyService()\n    \n    func getCurrencyExchangeRate(fromCurrency: String, toCurrency: String, completion: @escaping (String) -> Void) {\n        guard let url = URL(string: \"https://api.exchangeratesapi.io/latest?base=\\(fromCurrency)&symbols=\\(toCurrency)\") else {\n            return\n        }\n        \n        URLSession.shared.dataTask(with: url) { (data: Data?, response: URLResponse?, error: Error?) in\n            if let error = error {\n                print(\"Error: Could not request exchange rate from server. \\(error.localizedDescription)\")\n            }\n            \n            guard let data = data else {\n                print(\"Error: Did not receive data\")\n                return\n            }\n            \n            do {\n                let json = try JSONSerialization.jsonObject(with: data, options: [])\n                guard let jsonDict = json as? Dictionary<String, Any>,\n                    let rates = jsonDict[\"rates\"] as? Dictionary<String, Double>,\n                    let exchangeRate = rates[toCurrency] else {\n                        print(\"Error: Could not get exchange rate from JSON\")\n                        return\n                }\n                completion(String(exchangeRate))\n            } catch {\n                print(\"Error: Could not parse JSON: \\(error.localizedDescription)\")\n            }\n        }.resume()\n    }\n    \n}", "category": "Python"}, {"instruction": "Write a code to get the current time in Python", "input": "", "output": "import time\n\n# return UTC time as a float\ncurrent_time = time.time()\n\n# return current time as a string in this format:\n# 'Thu Feb 28 15: 16: 14 2019'\ncurrent_time_str = time.ctime()", "category": "Python"}, {"instruction": "Write a code to check if the string has all unique characters in Python", "input": "", "output": "def isUnique(string): \n \n    # Assuming character set is ASCII (128 characters) \n    if len(string) > 128: \n        return False\n \n    char_set = [False for _ in range(128)] \n    for char in string: \n        char_value = ord(char) \n \n        if char_set[char_value]: \n            return False\n \n        char_set[char_value] = True\n \n    return True", "category": "Python"}, {"instruction": "How to make an http request in Python", "input": "", "output": "import requests\n\nr = requests.get('http://www.example.com/')\nprint(r.text)", "category": "Python"}, {"instruction": "Generate a random string using 8 characters in Python.", "input": "", "output": "import random \nimport string\n\ndef generate_random_string(size):\n    return ''.join(random.choices(string.ascii_uppercase + string.digits, k = size))\n    \nprint(generate_random_string(8))", "category": "Python"}, {"instruction": "Modify the given Python code to redirect to a different page when the button is clicked.", "input": "<button>Visit example.com</button>", "output": "<button onclick=\"window.location.href='https://example.com/';\">Visit example.com</button>", "category": "Python"}, {"instruction": "Create a dictionary in Python with two keys and it corresponds to two values.", "input": "", "output": "my_dict = {\"key1\" : \"value1\", \"key2\" : \"value2\"}", "category": "Python"}, {"instruction": "Create a for-loop in Python for printing all numbers from 1 to 9 (inclusive).", "input": "", "output": "for x in range(1, 10): \n  print(x)", "category": "Python"}, {"instruction": "Generate Python code to reverse a string", "input": "Input string: Hello", "output": "def reverseString(str): \n    reversed_str = \"\" \n    for i in str: \n        reversed_str = i + reversed_str \n    return reversed_str   \n\nreverseString(\"Hello\")", "category": "Python"}, {"instruction": "Explain the meaning of the term \u2018data encapsulation\u2019 in Object-Oriented Programming.", "input": "", "output": "Data encapsulation is an important feature of Object-Oriented Programming (OOP). It is a technique of combining data and functions into a single unit called class. data encapsulation hides the implementation details of a class and exposes only the necessary and relevant information which is known as abstraction. This helps to reduce complexity and increase robustness of a program as the implementation details are hidden from the user.", "category": "Python"}, {"instruction": "Change the following code so that it will only return the words that contain more than 5 characters.", "input": "def get_words(text):\n     return text.split(\" \")", "output": "def get_words(text):\n    return [word for word in text.split(\" \") if len(word) > 5]", "category": "Python"}, {"instruction": "How do we define the scope of a variable in Python?", "input": "", "output": "In Python, the scope of a variable is determined by the location of its definition. Variables defined within a function have a local scope, while variables defined outside a function have a global scope. Local variables are accessible only within the same function in which they are declared, while global variables are accessible within all functions.", "category": "Python"}, {"instruction": "What is the significance of the \u2018except\u2019 statement in Python?", "input": "", "output": "The \u2018except\u2019 statement in python is used to handle exceptions that may arise while executing a program. Exceptions can be either syntactic or logical errors. The \u2018except\u2019 statement can be used to catch the specific type of exception and handle them appropriately. For example, it can be used to catch a ValueError, TypeError or IndexError, or any other type of exception, and appropriately handle it.", "category": "Python"}, {"instruction": "Write a Python code to extract the first 3 elements of the following list.", "input": "list = [1, 2, 3, 4, 5]", "output": "first_three_elements = list[:3]", "category": "Python"}, {"instruction": "Suggest an algorithm to solve a N queens problem.", "input": "", "output": "One possible algorithm to solve a N queens problem is to use backtracking. The basic idea is to place a queen in a column and try to place the other queen in the next column, and then repeating this in the subsequent columns until all of the queens are placed in the board.", "category": "Python"}, {"instruction": "Write a Python code to create two empty lists.", "input": "", "output": "list_one = []\nlist_two = []", "category": "Python"}, {"instruction": "Write a Python method to generate a random string of length 10", "input": "", "output": "import random\nimport string\n\ndef random_string(length):\n    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))", "category": "Python"}, {"instruction": "Given the following JSON data, create a Python program to read the data and print the name of the city with the highest population.", "input": "{\n  \"cities\": [\n    {\n      \"name\": \"New York\",\n      \"population\": 8175133\n    },\n    {\n      \"name\": \"Los Angeles\",\n      \"population\": 3792621\n    },\n    {\n      \"name\": \"Chicago\",\n      \"population\": 2695598\n    }\n  ]\n}", "output": "import json\n\nwith open('data.json') as f:\n    data = json.load(f)\n\nmax_population = 0\nmax_city_name = \"\"\nfor city in data['cities']:\n    if city['population'] > max_population:\n        max_population = city['population']\n        max_city_name = city['name']\n\nprint(\"The city with the highest population is\", max_city_name)", "category": "Python"}, {"instruction": "Create a Python program to edit the following line of code to change the text color of the button.", "input": "<button>Press Me</button>", "output": "<button style=\"color: red;\">Press Me</button>", "category": "Python"}, {"instruction": "Implement bubble sort in Python.", "input": "", "output": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]", "category": "Python"}, {"instruction": "Implement an iterator in Python for the following string.", "input": "string = 'Hello World!'", "output": "class Iterator:\n    def __init__(self, data):\n        self.data = data\n        self.index = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.index >= len(self.data):\n            raise StopIteration\n        char = self.data[self.index]\n        self.index += 1\n        return char\n\niterator = Iterator(string)\nfor char in iterator:\n    print(char)", "category": "Python"}, {"instruction": "What is the purpose behind using comments while writing code?", "input": "", "output": "Comments are used while writing code to explain the logic and purpose behind the code. This is important for multiple reasons, such as helping other developers better understand the code and providing helpful reminders for developers returning to the code at a later time. Additionally, good comments make it easier to debug and maintain the code.", "category": "Python"}, {"instruction": "Design an algorithm to calculate the Fibonacci sequence up to a given number n.", "input": "", "output": "We can design an algorithm to calculate the Fibonacci sequence up to a given number n. The algorithm would include two variables, a1 and a2, initially set to 0 and 1. These values would then be updated at each iteration to hold the latest two Fibonacci sequence numbers. A loop would be used to calculate the Fibonacci numbers from 0 up to the given number n. For each iteration, the latest two variables a1 and a2 would be added and stored in the new variable a3. a2 will then be assigned the value stored in a1 and a3 will be assigned to a2. This cycle would continue until the sum of a1 and a2 exceeds the input number n. At that point, the loop would terminate and the Fibonacci sequence will be calculated up to n.", "category": "Python"}, {"instruction": "How would you solve the following problem: Given a list of numbers, find the two numbers that add up to a given sum?", "input": "[3, 6, 2, 8, 4], sum = 10", "output": "def find_sum(arr, num):\n    found = False\n    arr_set = set(arr)\n    for i in arr_set:\n        x = num - i\n        if x in arr_set and x != i:  # make sure the numbers aren't the same\n            found = True\n            return i, x\n\n    if not found:\n        return False", "category": "Python"}, {"instruction": "A website has a form with a textarea field of length 3 rows and 20 columns. Write code to check that the user doesn't exceed the character limit of the textarea.", "input": "", "output": "def check_char_limit(text, rows, cols):\n    lines = text.splitlines()\n    if len(lines) > rows:\n        return False \n    for line in lines:\n        if len(line) > cols:\n            return False\n    return True", "category": "Python"}, {"instruction": "Replace all the ``None`` in the following code to create a valid python statement.", "input": "def find_min(numbers):\n    min = None\n    for number in numbers:\n        if min is None:\n            min = number\n        elif number < min:\n            min = number", "output": "def find_min(numbers):\n    min = float('inf')  # use a high value\n    for number in numbers:\n        if number < min:\n            min = number\n    return min", "category": "Python"}, {"instruction": "Write a function to parse a given string and construct a dictionary which contains each word and the corresponding frequency.", "input": "my_string = 'Hello World'", "output": "def word_count(my_string): \n    words = my_string.split()  \n    frequency = {} \n    for word in words: \n        if word in frequency: \n            frequency[word] += 1\n        else: \n            frequency[word] = 1\n    return frequency\n\nfrequency_dict = word_count(my_string)\nprint(\"Frequency dictionary: \", frequency_dict)", "category": "Python"}, {"instruction": "Create a function to detect if two given strings are anagrams or not.", "input": "str1 = 'abc'\nstr2 = 'bac'", "output": "def is_anagram(str1, str2):\n    word1 = ''.join(sorted(str1))\n    word2 = ''.join(sorted(str2))\n    if word1 == word2:\n        return True\n    return False\n\nresult = is_anagram(str1, str2)\nprint(\"Is anagram:\", result)", "category": "Python"}, {"instruction": "Given a comma separated string, write a Python program to convert the string into a list.", "input": "my_string = \"Hello,World,Hi\"", "output": "my_list = my_string.split(',')\nprint(\"List:\", my_list)", "category": "Python"}, {"instruction": "Create a Python class to represent the 'Employee' entity.", "input": "", "output": "class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n    \n    def get_salary(self):\n        return self.salary", "category": "Python"}, {"instruction": "Generate a list of 10 random integers between 50 and 100.", "input": "", "output": "import random\nrand_num_list = [random.randint(50, 100) for i in range(10)]\nprint(rand_num_list)", "category": "Python"}, {"instruction": "Write a TensorFlow script to build a 3-layer neural network classifier.", "input": "", "output": "import tensorflow as tf\n \n#Create placeholders\nX = tf.placeholder(tf.float32, [None, 784])\ny = tf.placeholder(tf.float32, [None, 10])\n\n#Create first layer\nW1 = tf.Variable(tf.truncated_normal([784, 300], stddev=0.1))\nb1 = tf.Variable(tf.zeros([300]))\nA1 = tf.nn.relu(tf.add(tf.matmul(X, W1), b1))\n\n#Create second layer\nW2 = tf.Variable(tf.truncated_normal([300, 100], stddev=0.1))\nb2 = tf.Variable(tf.zeros([100]))\nA2 = tf.nn.relu(tf.add(tf.matmul(A1, W2), b2))\n\n#Create third layer\nW3 = tf.Variable(tf.truncated_normal([100, 10], stddev=0.1))\nb3 = tf.Variable(tf.zeros([10]))\nA3 = tf.nn.sigmoid(tf.add(tf.matmul(A2, W3), b3))\n\n#Define cross-entropy loss\nloss = tf.reduce_mean(-tf.reduce_sum(y*tf.log(A3), reduction_indices=[1]))\n\n#Define the accuracy\ncorrect_prediction = tf.equal(tf.argmax(A3,1), tf.argmax(y,1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\n#Train the model\ntrain_op = tf.train.AdamOptimizer(1e-4).minimize(loss)", "category": "Python"}, {"instruction": "Write a Python function to return an array of adjacent (horizontal and vertical) numbers of a given two-dimensional array.", "input": "[[1, 2, 3],\n[4, 5, 6],\n[7, 8, 9]]", "output": "def adjacent_numbers(array):\n    # Create a set of all possible adjacent numbers\n    # and add each array element to the set\n    adjacent_set = set()\n    for sublist in array:\n        for element in sublist:\n            adjacent_set.add(element)\n \n    # Iterate over each array element and its neighbours\n    for i in range(len(array)):\n        for j in range(len(array[0])):\n            # Check if the neighbour (left, right, top, bottom) exists\n            if i+1 < len(array):\n                adjacent_set.add(array[i+1][j])\n            if i-1 >= 0:\n                adjacent_set.add(array[i-1][j])\n            if j+1 < len(array[0]):\n                adjacent_set.add(array[i][j+1])\n            if j-1 >= 0:\n                adjacent_set.add(array[i][j-1])\n \n    # Remove the original elements from the set\n    for elem in array:\n        for a in elem:\n            adjacent_set.remove(a)\n \n    return list(adjacent_set)", "category": "Python"}, {"instruction": "Write a Python script to extract text from a given PDF page.", "input": "A PDF page with this content:\n\nThis is an example PDF page.\n\nIt contains text of varying lengths, from short one-word sentences to long multi-sentence paragraphs.", "output": "import PyPDF2\n \n#open the pdf\npdfFileObj = open('example.pdf', 'rb')\npdfReader = PyPDF2.PdfFileReader(pdfFileObj)\n \n#get the text from the specified page\npageObj = pdfReader.getPage(0)\n \n#print the text from the page\nprint(pageObj.extractText())", "category": "Python"}, {"instruction": "Write a Python function that validates a given credit card number.", "input": "", "output": "def validate(number):\n\"\"\" Validate credit card number using Luhn algorithm \"\"\"\n \n  num = [int(x) for x in str(number)]\n  return (sum(num[::-2] + [sum(divmod(d*2,10)) for d in num[-2::-2]]) % 10 == 0", "category": "Python"}, {"instruction": "Create an algorithm to detect if a given sentence contains any words that are offensive.", "input": "The following sentence contains a few offensive words: \"This stupid jerk is a complete moron!\"", "output": "def detect_offensive_words(sentence):\noffensive_words = [\"stupid\", \"jerk\", \"moron\"]\nwords = sentence.split(\" \")\n\nfor word in words:\n if word in offensive_words:\n return True\n \nreturn False", "category": "Python"}, {"instruction": "Create a variable in Python that stores the value \"Hello World!\"", "input": "", "output": "message = \"Hello World!\"", "category": "Python"}, {"instruction": "What is an abstract class?", "input": "", "output": "An abstract class is a special type of class which is only partially implemented. It contains one or more abstract methods which are methods that do not have any concrete implementation. Abstract classes cannot be instantiated and can only be used as base classes for other classes.", "category": "Python"}, {"instruction": "Create a function in Python that takes a string as an input and returns TRUE if it is a palindrome or FALSE if it is not.", "input": "", "output": "def is_palindrome(string): \n    left_pos = 0\n    right_pos = len(string) - 1\n    \n    while right_pos >= left_pos: \n        if not string[left_pos] == string[right_pos]: \n            return False\n        left_pos += 1\n        right_pos -= 1\n    return True", "category": "Python"}, {"instruction": "Create a Python script that asks the user to input an integer number and display the sum of all the preceding numbers.", "input": "", "output": "num = int(input(\"Please enter an integer number: \"))\n\nsum = 0\n\nfor i in range(1, num + 1):\n    sum += i\n    \nprint(\"The sum of all the preceding numbers is:\", sum)", "category": "Python"}, {"instruction": "Create a Python loop that prints numbers from 1 to 20", "input": "", "output": "for i in range(1, 21):\n    print(i)", "category": "Python"}, {"instruction": "Write a Python Evaluator to evaluate Python expression.", "input": "expression = \"5+3\"", "output": "def eval_expression(expression): \n return eval(expression) \n  \n# Call the function \nprint(eval_expression(expression))", "category": "Python"}, {"instruction": "Write a Python code to sort the given list of strings alphabetically.", "input": "lst = [\"Java\", \"C++\", \"Go\", \"Python\"]", "output": "def alphabetical_sort(lst):\n lst.sort()\n return lst\n\nprint(alphabetical_sort(lst))", "category": "Python"}, {"instruction": "Write a Python script to combine two given list of strings.", "input": "list1 = [\"Python\", \"Ruby\", \"JavaScript\"]\nlist2 = [\"C++\", \"C#\", \"GO\"]", "output": "def combine_lists(list1, list2):\n combined_list = list1 + list2\n return combined_list\n\nprint(combine_lists(list1, list2))", "category": "Python"}, {"instruction": "Write a Python program to filter out even numbers from a given list.", "input": "numbers = [2, 4, 6, 8, 10]", "output": "def filter_even_numbers(list):\n return [number for number in list if number % 2 == 1]\n\nprint(filter_even_numbers(numbers))", "category": "Python"}, {"instruction": "Write a Python program to retrieve a specific element from a given list.", "input": "list = [1, 4, 7, 9, 10]\nindex = 2", "output": "def get_element_by_index(list, index):\n return list[index]\n\nprint(get_element_by_index(list, index))", "category": "Python"}, {"instruction": "Write a Python program to swap the first and last element of a given list of integers.", "input": "numbers = [2, 3, 4, 5, 6]", "output": "def swap_first_last(list):\n list[0], list[-1] = list[-1], list[0]\n return list\n\nprint(swap_first_last(numbers))", "category": "Python"}, {"instruction": "Write a Python program to convert a given list of lists into a single list.", "input": "input_list = [[1, 2], [3, 4], [5, 6]]", "output": "def flatten_list(list):\n new_list = []\n for sublist in list:\n for item in sublist:\n new_list.append(item)\n return new_list\n\nprint(flatten_list(input_list))", "category": "Python"}, {"instruction": "Identify the issue in the following function and suggest a fix", "input": "def print_multiply(x, y):\n    for i in range(10):\n        print(x*i)", "output": "def print_multiply(x, y):\n    for i in range(10):\n        print(x*y)  # change i to y", "category": "Python"}, {"instruction": "Explain the purpose of try and except blocks when writing code.", "input": "", "output": "Try and except blocks are used in Python to catch and handle errors in code. The basic structure of a try-except block is a try statement followed by one or more except statements. The try block includes code that may throw an error and the except block includes code that will be executed if an error is thrown. This is useful for code that needs to handle any potential errors that may arise from its execution.", "category": "Python"}, {"instruction": "Develop a program to generate the Fibonacci sequence up to n.", "input": "", "output": "def fibonacci(n):\n    fib_sequence = [1, 1]\n\n    for i in range(2, n):\n        new_num = fib_sequence[i-2] + fib_sequence[i-1]\n        fib_sequence.append(new_num)\n\n    return fib_sequence\n\nfibonacci(10) # Output: [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]", "category": "Python"}, {"instruction": "Explain the concept of tokenization in relation to natural language processing.", "input": "", "output": "Tokenization is the process of breaking down a given sentence or text into smaller chunks known as tokens. This is an important step in natural language processing as it allows for further processing such as stemming, part of speech tagging, sentiment analysis, etc. For example, tokenization can break a sentence \"The young cat jumped onto the fence\" into [\"The\", \"young\", \"cat\", \"jumped\", \"onto\", \"the\", \"fence\"].", "category": "Python"}, {"instruction": "Write a Python script for checking if a given number is an even or odd number.", "input": "", "output": "\"\"\"\nCheck a given number is even or odd\n\"\"\"\ndef check_even_or_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\nif __name__ == '__main__':\n    num = int(input(\"Enter a number to check : \"))\n    print(\"The given number is\",check_even_or_odd(num))", "category": "Python"}, {"instruction": "Using the given function, find the transpose of the given matrix.", "input": "matrix = [[2, 3, 4], [1, 5, 3]]\n\ndef transpose(arr):", "output": "def transpose(arr): \n    transposed_matrix = [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))] \n    return transposed_matrix\n\ntranspose(matrix)", "category": "Python"}, {"instruction": "Create a function to add the corresponding values of two lists.", "input": "list1 = [3, 5, 2, 4]\nlist2 = [5, 4, 8, 7]", "output": "def add_values(list1, list2):\n    result_list = []\n    for i in range(len(list1)):\n        result_list.append(list1[i] + list2[i])\n    return result_list\n\nadd_values(list1, list2)", "category": "Python"}, {"instruction": "Find the minimum element of an array.", "input": "arr = [5, 2, 7, 4, 9, 1]", "output": "min_elem = arr[0]\nfor elem in arr[1:]:\n    if elem < min_elem:\n        min_elem = elem\nprint(min_elem)", "category": "Python"}, {"instruction": "Write an if statement to check whether an entered string is in lowercase", "input": "", "output": "if string == string.lower():\n    print(\"The string is in lower case\")\nelse:\n    print(\"The string is not in lower case\")", "category": "Python"}, {"instruction": "Find the bug in the following code.", "input": "def multiply(x, y):\n    z = 0\n    while y > 0:\n        y = y - 1\n        z = z + x\n    return z", "output": "The bug in the code is that the loop completion condition should be 'while y > 0' and should be changed to 'while y != 0' otherwise the code will enter into an infinite loop when y is negative.", "category": "Python"}, {"instruction": "Rewrite the following code in to a recursive function.", "input": "def calculate_fibonacci(n):\n    a, b = 0, 1\n    for i in range(1, n+1):\n        a, b = b, a + b\n    return a", "output": "def calculate_fibonacci(n):\n    if n < 0:\n        print(\"Incorrect input\")\n\n    elif n == 0:\n        return 0\n\n    elif n == 1:\n        return 1\n\n    else:\n        return calculate_fibonacci(n-1) + calculate_fibonacci(n-2)", "category": "Python"}, {"instruction": "Add error handling to the code snippet.", "input": "def calculate_average(numbers):\n    sum = 0\n    for number in numbers:\n        sum += number\n    return sum/len(numbers)", "output": "def calculate_average(numbers):\n    sum = 0\n    if len(numbers) == 0:\n        raise ValueError(\"list of numbers should not be empty\")\n    for number in numbers:\n        sum += number\n    try:\n        return sum/len(numbers)\n    except ZeroDivisionError:\n        print(\"division by 0 attempted\")", "category": "Python"}, {"instruction": "How do you import the math module in a Python program?", "input": "", "output": "import math", "category": "Python"}, {"instruction": "Write a function to rotate a matrix by 90 degrees.", "input": "", "output": "def rotate_matrix(matrix):\n    m = len(matrix)\n    # Create a new matrix\n    new_matrix = [[0 for _ in range(m)] for _ in range(m)]\n    # Rotate the matrix\n    for i in range(m):\n        for j in range(m): \n            new_matrix[j][m - i - 1] = matrix[i][j]\n    # Return the rotated matrix\n    return new_matrix", "category": "Python"}, {"instruction": "Suggest a way to find the maximum number in an array without using the built-in max() function.", "input": "", "output": "def find_max(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max", "category": "Python"}, {"instruction": "Suggest an algorithm to remove duplicates from an array.", "input": "", "output": "def remove_duplicates(arr):\n    # Create a seen set\n    seen = set()\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If element is already seen, remove it\n        if arr[i] in seen:\n            del arr[i]\n        # Else add element to seen set\n        else:\n            seen.add(arr[i])\n    return arr", "category": "Python"}, {"instruction": "Given an array and a target, write a program to search the target in the array and return the index.", "input": "arr = [5, 10, 20, 25, 30]\ntarget = 20", "output": "def search_target_in_array(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1  # element not found", "category": "Python"}, {"instruction": "Compute the total number of days in a given year.", "input": "", "output": "def get_total_days_in_year(year):\n    if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n        # leap year\n        return 366\n    else:\n        # non leap year\n        return 365", "category": "Python"}, {"instruction": "Explain the importance and use of an algorithm in computing.", "input": "", "output": "An algorithm is a step-by-step process that a computer can use to solve a problem or achieve a goal. Algorithms are essential to computing systems, as they provide methods for inputting, storing, interpreting, manipulating, and outputting data. Algorithms can process data with speed, accuracy, and reliability, and can be used for a variety of tasks including calculations, simulations, database manipulation, decision making, and artificial intelligence.", "category": "Python"}, {"instruction": "Define the difference between call by value and call by reference", "input": "", "output": "Call by value: In this method, a copy of the actual argument is passed to the formal argument. Any change made to the formal argument does not affect the actual argument. \n\nCall by reference: In this method, a reference to the actual argument is passed to the formal argument. Any change made to the formal argument changes the value of actual argument.", "category": "Python"}, {"instruction": "Create your own sorting algorithm", "input": "[3, 6, 4, 7, 1, 2]", "output": "def my_sort(arr):\n    length = len(arr) \n\tfor i in range(length): \n\t\tmin_ind = i \n\t\tfor j in range(i+1, length): \n\t\t\tif arr[ min_ind ] > arr[j]: \n\t\t\t\tmin_ind = j \n\t\tarr[i], arr[min_ind] = arr[min_ind], arr[i]\n\treturn arr", "category": "Python"}, {"instruction": "Write a code snippet for generating a random number between 1 and 100.", "input": "", "output": "import random\nrandomNumber = random.randint(1, 100)", "category": "Python"}, {"instruction": "Call a user-defined function in Python.", "input": "def add_two_numbers(x, y):\nreturn x + y", "output": "result = add_two_numbers(3, 5)\nprint(result)  # Outputs 8", "category": "Python"}, {"instruction": "Create an algorithm to reverse a linked list in place.", "input": "", "output": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None \n\ndef reverse_list(head):\n    prev = None\n    current = head\n    while current:\n        next = current.next\n        current.next = prev\n        prev = current\n        current = next\n    head = prev\n    return head", "category": "Python"}, {"instruction": "Create a python program that takes a sentence as input and returns the amount of vowels that occur in the sentence", "input": "", "output": "def count_vowels(sentence):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    count = 0\n    for char in sentence:\n        if char in vowels:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Write a method which takes 2 parameters and returns the greater one", "input": "", "output": "def max_num(x, y):\n    if x>y:\n        return x\n    else:\n        return y", "category": "Python"}, {"instruction": "Sort a given array in ascending order using the Gnome sort algorithm.", "input": "array = [8, 3, 6, 1, 5]", "output": "def gnome_sort(array):\n    i = 1\n    while i < len(array): \n        if array[i-1] <= array[i]: \n            i += 1\n        else: \n            array[i-1], array[i] = array[i], array[i-1] \n            i -= 1\n            if (i == 0): \n                i = 1\n    return array", "category": "Python"}, {"instruction": "Write a function to delete a given character from a string.", "input": "string = \"GPT MODEL\"\ncharacter = 'M'", "output": "def delete_char(string, character):\n    new_string = \"\"\n    for char in string:\n        if char != character:\n            new_string += char\n    return new_string", "category": "Python"}, {"instruction": "Create a function to sort a given array using selection sort.", "input": "arr = [5, 8, 1, 7, 2, 10, 3]", "output": "def selection_sort(arr): \n    for i in range(len(arr) - 1): \n        min = i \n        for j in range(i+1, len(arr)): \n            if arr[j] < arr[min]: \n                min = j \n        arr[i], arr[min] = arr[min], arr[i]\n    return arr", "category": "Python"}, {"instruction": "Analyze the sentiment of this statement using Python.", "input": "I am truly happy with the amazing results", "output": "import nltk\nnltk.download('vader_lexicon')\n\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentence = \"I am truly happy with the amazing results\"\nanalyzer = SentimentIntensityAnalyzer()\nsentiment = analyzer.polarity_scores(sentence)\n\nprint(\"The sentiment of the statement is:\", sentiment['compound'])", "category": "Python"}, {"instruction": "Manipulate the spreadsheet with Python to identify duplicates in column A.", "input": "", "output": "def find_duplicates(spreadsheet):\n    df = pd.read_excel(spreadsheet)\n    return df['A'][df['A'].duplicated(keep=False)]", "category": "Python"}, {"instruction": "Write code to print the prime numbers in a given range.", "input": "", "output": "def is_prime(n):\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\n\ndef print_primes(start, end):\n    for i in range(start, end + 1):\n        if is_prime(i):\n            print(i)", "category": "Python"}, {"instruction": "Write a script for reversing the order of alphabets in a string in Python.", "input": "", "output": "def reverseAlphabets(string): \n    string = ''.join(reversed(string)) \n    return string \n \nstring = \"string\"\nprint(reverseAlphabets(string)) # Output: gnirts", "category": "Python"}, {"instruction": "Suggest code for finding the maximum element in a Python dictionary.", "input": "", "output": "key_max = max(map_dictionary.keys(), key=(lambda k: map_dictionary[k])) \nval_max = map_dictionary[key_max]", "category": "Python"}, {"instruction": "Construct a network to recognize handwritten digits using a convolutional neural network in TensorFlow.", "input": "", "output": "import tensorflow as tf\nfrom tensorflow import keras \n\n# create a model\nmodel = keras.Sequential()\n\n# add a convolutional layer\nmodel.add(keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)))\n\n# add a max pooling layer\nmodel.add(keras.layers.MaxPool2D((2,2)))\n\n# add a flatten layer\nmodel.add(keras.layers.Flatten())\n\n# add a Dense layer\nmodel.add(keras.layers.Dense(128, activation='relu'))\n\n# add second Dense layer\nmodel.add(keras.layers.Dense(10, activation='softmax'))\n\n# compile the model\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])", "category": "Python"}, {"instruction": "Rewrite the following python program to convert UTC time to local time.", "input": "from datetime import datetime, timedelta\n\nutc_time = datetime.utcnow()", "output": "from datetime import datetime, timedelta \nimport time \n\nutc_time = datetime.utcnow()\nlocal_time = time.localtime(time.mktime(utc_time.timetuple())) \n\nprint(\"Local time: \", local_time)", "category": "Python"}, {"instruction": "Develop an algorithm to find the greatest common factor (GCF) of two numbers in Python.", "input": "", "output": "def gcf(a,b):\n    if a == 0 :\n        return b \n    return gcf(b % a, a)", "category": "Python"}, {"instruction": "Find the kth smallest element in an array. The array consists of integers only and the size of the array is given.", "input": "", "output": "def kthSmallest(arr, k): \n\t# Sort the given array \n\tarr.sort() \n\n\t# Return k'th element in  \n\t# the sorted array \n\treturn arr[k-1]", "category": "Python"}, {"instruction": "Take the following algorithm and turn it into a Python program.", "input": "", "output": "# Function to calculate \n# maximum number of edges \n# that can be added \n# to a graph without cycles \ndef max_edges(total_nodes): \n\t# initialize result to 0 \n\tresult = 0 \n\t\n\t# consider every pair of nodes \n\tfor i in range(total_nodes): \n\t\tfor j in range(i + 1, total_nodes): \n\t\t\tresult += 1  \n\t\t\n\t# return the result \n\treturn result", "category": "Python"}, {"instruction": "Generate a function to sort a 2-dimensional list in Python by the values of the second element in each sublist.", "input": "", "output": "def sort_by_second_element(lst): \n    lst.sort(key = lambda x: x[1]) \n    return lst", "category": "Python"}, {"instruction": "Develop a classifier in Python to predict the language of a given text.", "input": "", "output": "import nltk\n\nclass LanguageClassifier(object):\n\t\n    def __init__(self):\n        self.languages = []\n\t\n    def train(self, data):\n        train_sents = []\n        train_tags = []\n\n        # extract sentences and tags from data\n        for lang, sentences in data.items():\n            self.languages.append(lang)\n            train_sents.extend(sentences)\n            train_tags.extend([lang] * len(sentences))\n\n        # build featureset\n        feature_set = []\n        for (words, lang) in zip(train_sents, train_tags):\n            words_dict = dict([(word, True) for word in words])\n            feature_set.append((words_dict, lang))\n\t\n        # train classifier\n        self.classifier = nltk.NaiveBayesClassifier.train(feature_set)\n\n    def predict(self, sentence):\n        words_dict = dict([(word, True) for word in sentence])\n        return self.classifier.classify(words_dict)", "category": "Python"}, {"instruction": "Generate a list of prime numbers between two numbers A and B (both inclusive).", "input": "", "output": "def generate_primes(lower, upper): \n    prime_numbers = [] \n    for num in range(lower, upper + 1): \n        if num > 1: \n            for i in range(2, num): \n                if (num % i) == 0: \n                    break\n            else: \n                prime_numbers.append(num) \n    return prime_numbers", "category": "Python"}, {"instruction": "Create a while loop in Python to print all odd numbers between two numbers A and B (both inclusive).", "input": "", "output": "a = int(input(\"Enter lower range: \"))\nb = int(input(\"Enter upper range: \"))\n\nwhile a <= b: \n    if a % 2 != 0: \n        print(a) \n    a += 1", "category": "Python"}, {"instruction": "Generate a random 8 character password using the following conditions:", "input": "", "output": "import random\nimport string\n\ndef generatePassword():\n    chars = string.ascii_letters + string.digits + '!@#$%^&*/.:?|'\n    size = 8\n    random_string = \"\".join(random.choice(chars) for _ in range(size))\n    return random_string\n\nrandom_password = generatePassword()\nprint(random_password) # qr6.h^37", "category": "Python"}, {"instruction": "Create a Python script that takes a list of numbers as an argument and returns the maximum number in the list.", "input": "numbers = [8, 1, 2, 3, 4, 5, 6, 7]", "output": "def maximum_number(numbers):\n    max_number = numbers[0]\n\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_num:\n            max_number = numbers[i]\n    \n    return max_number\n\nmax_number = maximum_number(numbers)\nprint(max_number) # 8", "category": "Python"}, {"instruction": "Write a function that creates a random 4 digit pin using the following criteria:", "input": "", "output": "def generate_pin():\n    import random\n    numbers = [str(i) for i in range(10)]\n    random.shuffle(numbers)\n    return \"\".join(numbers[:4])", "category": "Python"}, {"instruction": "Using the MapReduce programming model, calculate the total number of purchases in a given dataset.", "input": "", "output": "def purchaseMapper(purchase):\n  return (purchase.entity_id, 1)\n\ndef purchaseReducer(entity, purchases):\n  return (entity, sum(purchases))", "category": "Python"}, {"instruction": "Create a code to check if a number is an Armstrong number or not", "input": "", "output": "def isArmstrongNumber(num):  \n    # initialize\n    sum_times_powers = 0\n    temp = num  \n  \n    while (temp != 0):  \n        # find remainder and get it\n        remainder = temp % 10 \n        sum_times_powers += remainder ** 3 \n        temp //= 10\n  \n    if (sum_times_powers == num):  \n        return True\n    else: \n        return False", "category": "Python"}, {"instruction": "Create a program to print the sum of all first 10 natural numbers.", "input": "", "output": "def sum_first_ten_natural_numbers():\n    sum = 0\n    for i in range(1, 11):\n        sum = sum + i\n    return sum\n\nprint(sum_first_ten_natural_numbers()) \n# Output: 55", "category": "Python"}, {"instruction": "Create a Python program to remove an item from a given list", "input": "", "output": "def remove_item_from_list(my_list, item):\n    if item in my_list:\n        my_list.remove(item)\n    return my_list", "category": "Python"}, {"instruction": "Create a code to print each word of a sentence on a new line", "input": "This is a sentence.", "output": "def print_sentence(s):\n    words = s.split(' ')\n    for word in words:\n        print(word)\n        \ns = \"This is a sentence.\"\nprint_sentence(s)\n\n# Output:\n# This\n# is\n# a\n# sentence.", "category": "Python"}, {"instruction": "Implement a python function to return \"true\" if the string is a palindrome and \"false\" if it is not", "input": "", "output": "def is_palindrome(s): \n    # Reversing string \n    rev = s[::-1] \n  \n    # Checking if reversed string is equal to  \n    # original string \n    if (s == rev): \n        return \"true\"\n    else: \n        return \"false\"", "category": "Python"}, {"instruction": "Develop a Python code to replace all occurrences of a specified phrase in a string.", "input": "string = \"This is a sample string. This has to be replaced.\"\nphrase = \"This\"\nnewString = \"That\"", "output": "string = string.replace(phrase, newString) \nprint(string) \n\n# Output: \nThat is a sample string. That has to be replaced.", "category": "Python"}, {"instruction": "Create a function to find the length of the longest substring that does not contain duplicate characters.", "input": "string = \"abcabcefghijklmnop\"", "output": "def longest_substring(string):\n    seen = set()\n    start = 0\n    max_length = 0\n    for end in range(len(string)):\n        if string[end] in seen:\n            start = max(start, seen[string[end]] + 1)\n        seen.add(string[end])\n        max_length = max(max_length, end-start+1)\n    return max_length", "category": "Python"}, {"instruction": "Generate a sorted list of numbers in an array using insertion sort?", "input": "arr = [5, 8, 1, 7, 2, 10, 3]", "output": "def insertion_sort(arr):\n    for i in range(len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and arr[j] > key:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = key\n    return arr", "category": "Python"}, {"instruction": "Design a program to compute the median of 3 integers.", "input": "", "output": "def median(a,b,c):\n    if a >= b:\n        if c >= a:\n            return a\n        elif b >= c:\n            return b\n        else:\n            return c\n    else:\n        if c >= b:\n            return b\n        elif a >= c:\n            return a\n        else:\n            return c", "category": "Python"}, {"instruction": "Create a program to calculate the standard deviation of an array of numbers.", "input": "arr = [10, 8, 12, 5, 9]", "output": "def stdev(arr):\n    n = len(arr)\n    mean = sum(arr) / n\n    variance = sum((x - mean) ** 2 for x in arr) / n\n    return (variance ** 0.5)", "category": "Python"}, {"instruction": "Generate a random set of 7 unique numbers between 0 and 10.", "input": "", "output": "import random\n\ndef generate_random_set():\n  generated_set = set()\n  while len(generated_set) < 7:\n    generated_set.add(random.randint(0, 10))\n  return generated_set", "category": "Python"}, {"instruction": "Write a Python function to calculate the least common multiple of two numbers.", "input": "", "output": "def lcm(a, b): \n    lcm = (a*b)//gcd(a,b) \n    return lcm\n\ndef gcd(a,b): \n    if a == 0 : \n        return b \n          \n    return gcd(b%a, a)", "category": "Python"}, {"instruction": "Implement a function that calculates the greatest common divisor of two integers.", "input": "n1 = 15\nn2 = 10", "output": "def cal_gcd(n1, n2): \n   if n2 == 0: \n       return n1 \n   else: \n       return cal_gcd(n2, n1 % n2) \n \ngcd = cal_gcd(n1, n2) \nprint (\"GCD of \" + str(n1) + \" and \" + str(n2) + \" is \" + str(gcd))", "category": "Python"}, {"instruction": "Given a list of student class enrollments, group students into classes that correspond with their major.", "input": "student_list = [{\"name\":\"John\", \"major\":\"Computer Science\"}, {\"name\":\"Alice\", \"major\":\"Business Administration\"},\n {\"name\":\"Bob\", \"major\":\"Computer Science\"}, {\"name\":\"Claire\", \"major\":\"Business Administration\"}]", "output": "def group_students_by_major(student_list):\n    # create a dictionary with two empty lists \n    student_groups = {\"Computer Science\": [], \"Business Administration\": []}\n    # iterate through the student list\n    for student in student_list:\n        # for each student in the list, add their name to the respective list\n        student_groups[student[\"major\"]].append(student[\"name\"])\n    # return the dictionary of groups\n    return student_groups", "category": "Python"}, {"instruction": "Implement a function that takes two strings and checks whether they are anagrams.", "input": "str1 = \"cinema\"\nstr2 = \"iceman\"", "output": "def anagram_checker(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    else:\n        char_list1 = [0] * 26\n        for char in str1:\n            char_list1[ord(char)-97] += 1\n        for char in str2:\n            if char_list1[ord(char)-97] == 0:\n                return False\n            char_list1[ord(char)-97] -= 1\n        return True", "category": "Python"}, {"instruction": "Write a code snippet using Python to pop an element from a list.", "input": "some_list = [1, 2, 3]", "output": "some_list.pop() # pops 3", "category": "Python"}, {"instruction": "Write a Python function that takes a list of floats as an argument and returns the sum of all elements.", "input": "some_list = [1.5, 5.9, 3.7, 5.2]", "output": "def sum_list(some_list):\n    result = 0\n    for num in some_list:\n        result += num\n    return result\n\nprint(sum_list(some_list)) # Prints 15.3", "category": "Python"}, {"instruction": "Create a Python dictionary with the following elements", "input": "Name: John\nAge: 25\nCity: New York", "output": "data = {\n    \"Name\": \"John\",\n    \"Age\": 25,\n    \"City\": \"New York\"\n}", "category": "Python"}, {"instruction": "Write a Python script to sort a given list of numbers in ascending order.", "input": "[3, 7, 1, 5, 4]", "output": "def sort_numbers_ascending(numbers): \n    # Sort the list \n    numbers.sort() \n    return numbers\n  \n# Driver code \nnums = [3, 7, 1, 5, 4] \n\nprint(sort_numbers_ascending(nums))", "category": "Python"}, {"instruction": "Convert the following statement into valid Python syntax.", "input": "x = \"string\"", "output": "x = 'string'", "category": "Python"}, {"instruction": "Write a Python program to print all integer numbers from a given range.", "input": "from 1 to 10", "output": "for i in range(1, 11):\n    print(i)", "category": "Python"}, {"instruction": "Describe the difference between a class and object in object oriented programming.", "input": "", "output": "A class is a blueprint for an object. It defines the data type of a particular object including the kinds of data it can store and the operations it can perform. An object is an instance of a class with actual values for the data elements it contains. It also has behavior, which is associated with the class functions that operates on the data elements of the object. Therefore, a class is a template used to create objects that share the same characteristics.", "category": "Python"}, {"instruction": "Implement a function that takes a number and returns its multiplication table up to 10.", "input": "n = 5", "output": "def print_multiplication_table(n):\n    # iterate through 0 to 10\n    for i in range(1, 11):\n        print(str(n) + 'x' + str(i) + ' = ' + str(n*i))\n\nprint_multiplication_table(n)", "category": "Python"}, {"instruction": "Write a function to count the occurence of an item in a given list.", "input": "[1, 2, 3, 2, 4]", "output": "def count_occurrence(arr, x): \n  \n    count = 0\n  \n    # traverse in the list \n    for ele in arr: \n  \n        # compare with each element of the list \n        if (ele == x): \n            count = count + 1\n  \n    return count \n  \n# Driver Code \narr = [1, 2, 3, 2, 4]  \nx = 2\nprint(\"Occurrence of the number is: \", count_occurrence(arr, x))", "category": "Python"}, {"instruction": "Create a variable in Python with the name \u201cstudentName\u201d and assign it your name as a string.", "input": "", "output": "studentName = \"John\"", "category": "Python"}, {"instruction": "What is Machine Learning?", "input": "", "output": "Machine Learning is a subset of Artificial Intelligence that enables computers to learn from patterns in data without explicitly being programmed. It enables them to improve over time by recognizing patterns and adjusting to new data. Machine Learning algorithms are used in a wide variety of applications, such as facial recognition, image recognition, natural language processing, predictive analytics, and robotics.", "category": "Python"}, {"instruction": "What is an API?", "input": "", "output": "API stands for Application Programming Interface. It is a set of routines, protocols, and tools for building software applications. APIs specify how software components should interact and are used when programming graphical user interface (GUI) components. APIs are used for accessing web-based services, such as entering and retrieving data from a remote database.", "category": "Python"}, {"instruction": "Write a Python script to generate a randomized list of 10 integers.", "input": "", "output": "import random\n\nrandom_numbers = random.sample(range(0, 101), 10)\nprint(random_numbers)", "category": "Python"}, {"instruction": "Sort a list of integers in ascending order using selection sort.", "input": "[ 9, 5, 2, 0, 7, 4, 1, 8, 6, 3]", "output": "def selection_sort(list): \n\n    for i in range(len(list)): \n  \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j\n        list[i], list[min_idx] = list[min_idx], list[i]\n\nlist = [9, 5, 2, 0, 7, 4, 1, 8, 6, 3]\nselection_sort(list) \nprint (\"Sorted array:\", list)", "category": "Python"}, {"instruction": "Describe in Python a custom exception for handling database connection errors.", "input": "", "output": "class DBConnectionError(Exception):\n  def __init__(self, message):\n    self.message = message\n    \n  def __str__(self):\n    return 'An Error Occured:\\n\\t' + self.message", "category": "Python"}, {"instruction": "Code a method in Python that determines the number of words in a given string.", "input": "", "output": "def word_count(s):\n  return len(s.split())", "category": "Python"}, {"instruction": "Reverse a string without using the reverse() function.", "input": "", "output": "def reverse_string(s): \n    str = \"\" \n    for i in s: \n        str = i + str\n    return str", "category": "Python"}, {"instruction": "Create a Python list of 10 numbers from 0 to 9.", "input": "", "output": "numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "category": "Python"}, {"instruction": "Design a class with 3 data members in Python.", "input": "", "output": "class MyClass: \n  def __init__(self, member1, member2, member3): \n    self.member1 = member1\n    self.member2 = member2\n    self.member3 = member3", "category": "Python"}, {"instruction": "Extract the type of the following object in Python.", "input": "a = [1, 2, 3]", "output": "list", "category": "Python"}, {"instruction": "Implement a function that finds the index of an item in a list.", "input": "lst = [1,2,3,4]\nitem = 3", "output": "def search(lst, item):\n    for index, element in enumerate(lst):\n        if element == item:\n            return index\n    return -1\n\nsearch(lst, item)", "category": "Python"}, {"instruction": "Implement a sorting algorithm for a given array in Python.", "input": "[3, 2, 1, 4]", "output": "sorted_array = [1, 2, 3, 4]\n\ndef SortArray(array):\n    for i in range(len(array)):\n        for j in range(len(array) - i - 1):\n            if array[j] > array[j + 1]:\n                array[j], array[j + 1] = array[j + 1], array[j]\n    return array\n\nsorted_array = SortArray(array)", "category": "Python"}, {"instruction": "Name the main features of a class-based programming language.", "input": "", "output": "The main features of a class-based programming language are encapsulation, inheritance, polymorphism and abstract classes. Encapsulation refers to the way code is organized and data is organized into objects and the methods used to access and manipulate the data. Inheritance is the ability for classes to inherit some of the properties of other classes. Polymorphism allows for objects of different types to act the same way in certain scenarios. Abstract classes provide an outline for other classes to follow, without having to directly use or implement all of the same functions as the parent class.", "category": "Python"}, {"instruction": "What are type hints in Python?", "input": "", "output": "Type hints in Python are optional pieces of information that can be specified when declaring a class, function or method, that allow Python to better understand the code and provide better type safety. Type hints allow the IDE or interpreter to provide better autocompletion and code checking features, as well as allow the compiler to optimize the code better.", "category": "Python"}, {"instruction": "Create a function to calculate the Fibonacci series from 0 to n.", "input": "", "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2, n+1): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Print a list of numbers from 1 to 10 except for 5 and 6.", "input": "", "output": "for num in range(1, 11):\n    if num != 5 and num != 6:\n        print(num)", "category": "Python"}, {"instruction": "Check if each item in the following list is a string.", "input": "[3, \"apple\", 5]", "output": "for item in [3, \"apple\", 5]:\n    if isinstance(item,str):\n        print(item, \"is a string\")\n    else:\n        print(item, \"is not a string\")", "category": "Python"}, {"instruction": "Write a function in Python to remove a given element from a list.", "input": "list = ['A', 'B', 'C', 'D']\nelement = 'B'", "output": "def remove_element(list, element): \n  if element in list: \n    list.remove(element)\n  return list\n\nprint(remove_element(list, element))", "category": "Python"}, {"instruction": "Sort a given list in increasing order.", "input": "my_list = [3, 4, 2, 6]", "output": "def sort_list(my_list):\n    \"\"\"Function to sort the list in increasing order\"\"\"\n    for i in range(len(my_list)):\n        min_idx = i\n        for j in range(i+1, len(my_list)):\n            if my_list[min_idx] > my_list[j]:\n                min_idx = j\n        my_list[i], my_list[min_idx] = my_list[min_idx], my_list[i]\n    return my_list\n    \nif __name__ == '__main__':\n    my_list = [3, 4, 2, 6]\n    sorted_list = sort_list(my_list)\n    print(sorted_list)  # [2, 3, 4, 6]", "category": "Python"}, {"instruction": "Write a code in which the values in the dictionaries will be swapped.", "input": "dic = {'x': 10, 'y': 20}", "output": "def swap_dictionary_values(dic):\n    \"\"\"Function to swap the values in the dictionaries\"\"\"\n    dic['x'], dic['y'] = dic['y'], dic['x']\n    return dic\n\nif __name__ == '__main__':\n    dic = {'x': 10, 'y': 20}\n    swapped_dic = swap_dictionary_values(dic)\n    print(swapped_dic) # {'x': 20, 'y': 10}", "category": "Python"}, {"instruction": "Create a function which will take two strings as parameters and will return a concatenated string.", "input": "", "output": "def concat_strings(str1, str2):\n    \"\"\"Function to concatenate two strings\"\"\"\n    return str1 + str2\n\nif __name__ == '__main__':\n    result = concat_strings('Hello ', 'World!')\n    print(result) #Hello World!", "category": "Python"}, {"instruction": "Write a function to find the length of the longest word in a sentence.", "input": "sentence = \"Today is a beautiful day\"", "output": "def find_longest_word(sentence):\n    words = sentence.split()\n    max_len = 0\n    longest_word = \"\"\n\n    for word in words:\n        if (len(word) > max_len):\n            max_len = len(word)\n            longest_word = word\n    \n    return max_len, longest_word\n\nif __name__ =='__main__':\n    sentence = \"Today is a beautiful day\"\n    max_len, longest_word = find_longest_word(sentence)\n    print(\"The longest word is '{}' with a length of {}\".format(longest_word, max_len))", "category": "Python"}, {"instruction": "Combine the two functions into a single function.", "input": "def add(x, y):\n    return x + y \n\ndef subtract(x, y):\n    return x - y", "output": "def calculate(x, y, op):\n    if op=='+':\n        return x + y \n    if op =='-':\n        return x - y", "category": "Python"}, {"instruction": "Create a program to print all prime numbers from 1 to a given number.", "input": "", "output": "def print_prime_numbers(n): \n    for num in range(2,n+1): \n        if is_prime(num): \n            print(num)", "category": "Python"}, {"instruction": "Generate a program in Python that takes two parameters and prints the result of their addition.", "input": "", "output": "def add_two_numbers(a, b):\n    return a + b", "category": "Python"}, {"instruction": "Create a program that reads a string input and replaces all instances of a word with a given replacement", "input": "Original string = \"Merry Christmas everyone, what a lovely day!\" Replacement word = \"Happy\"", "output": "def replace_word(originalString, replacementWord): \n    return originalString.replace('Christmas', replacementWord)\n# Output: \"Merry Happy everyone, what a lovely day!\"", "category": "Python"}, {"instruction": "Write a function to extract the digits of a number in an array.", "input": "Number = 4396", "output": "def extract_digits(number): \n   return [int(x) for x in str(number)] \n# Returns [4, 3, 9, 6]", "category": "Python"}, {"instruction": "Create a function to calculate the Pythagorean theorem given two legs", "input": "", "output": "def calculate_pythagorean_theorem(a, b):\n    c = math.sqrt(a**2 + b**2)\n    return c", "category": "Python"}, {"instruction": "Write a function to check if all the items in a list are of the same data type.", "input": "", "output": "def check_type(items):\n  # get the type of first item\n  item_type = type(items[0])\n  \n  # check if all items are of the same type\n  for item in items[1:]:\n    if item_type != type(item):\n      return False\n  return True\n\n# Test\nprint(check_type([1, 2, 3, 4])) # Output: True", "category": "Python"}, {"instruction": "Write a function that takes three parameters; a list of strings, an index of integers, and an alphabet string. The function should return only the items from the list at the specified indexes using letters from the alphabet as keys.", "input": "list_of_strings = [\"Foo\", \"Bar\", \"Baz\"]\nindexes = [0,2]\nalphabet_string = \"abc123\"", "output": "def select_list_items(list_of_strings, indexes, alphabet_string):\n    new_list = []\n    for index in indexes: \n        new_list.append(list_of_strings[alphabet_string.index(str(index))])\n    return new_list\n\nprint(select_list_items(list_of_strings, indexes, alphabet_string)) # Output: [\"Foo\", \"Baz\"]", "category": "Python"}, {"instruction": "Develop a code in Python to update all the elements of an array by a number", "input": "a = [1, 4, 5, 7, 9]", "output": "def update(a):\n    n = 2\n    a[:] = [x + n for x in a]\n    return a", "category": "Python"}, {"instruction": "Generate a Python dictionary containing the squares of the numbers from 1 to n.", "input": "int n = 10;", "output": "def generateDict(n):\n    dict = {}\n    for i in range(1, n+1):\n        dict[i] = i**2\n    return dict\n\nn = 10\nprint(generateDict(n))", "category": "Python"}, {"instruction": "Calculate the LCM (Least Common Multiple) of two integers.", "input": "int x = 15;\nint y = 10;", "output": "def lcm(x, y): \n    if x > y:\n        greater = x \n    else:\n        greater = y \n    while(True): \n        if((greater % x == 0) and (greater % y == 0)): \n            lcm = greater \n            break\n        greater += 1 \n    return lcm \n  \nx = 15\ny = 10\nprint(\"The L.C.M. is\", lcm(x, y))", "category": "Python"}, {"instruction": "Create a function to calculate the sum of all the values in the given array.", "input": "[2, 4, 6, 8]", "output": "def sum_of_array(arr):\n  total = 0\n  for num in arr:\n    total += num\n  return total\n\n# Output:", "category": "Python"}, {"instruction": "Generate a Python code to remove the given substring from the string.", "input": "String: \"The quick brown fox jumped over the lazy dog\"\nSubstring: \"brown\"", "output": "string = \"The quick brown fox jumped over the lazy dog\"\nsubstring = \"brown\"\nnew_string = string.replace(substring, \"\")\nprint(new_string)\n# Output: The quick  fox jumped over the lazy dog", "category": "Python"}, {"instruction": "Write a pseudo-code to implement a simple sorting algorithm.", "input": "", "output": "// Pseudo code for simple sorting\n\n// Define a sorting function \nfunction Sort(inputList):  \n \n// Loop through the list \n  for i from 0 to length(inputList) - 1 do:\n  \n    currentMinIndex = i \n   \n    // Search the lowest element \n    for j from i + 1 to length(inputList) do:\n      \n      // Update the smallest element \n      if inputList[j]<inputList[currentMinIndex] then \n        currentMinIndex = j\n    \n    // Swap the smallest element \n    if currentMinIndex != i do: \n      Swap(inputList[currentMinIndex],inputList[i]) \n \n// Return the sorted list \n  return inputList", "category": "Python"}, {"instruction": "Create a method in Python to round a number to 4 decimal points.", "input": "", "output": "def round_to_4_dp(num):\n    return round(num, 4)", "category": "Python"}, {"instruction": "Check if a string contains a substring, using Python.", "input": "haystack = \"The quick brown fox\"\nneedle = \"brown\"", "output": "needle in haystack # Output: True", "category": "Python"}, {"instruction": "Clean the input data using Python, so it is valid for a machine learning model.", "input": "data = [{'age': '30', 'income': '$1,000', 'address': 'New York'}, {'age': 'ab*', 'income': '$2,000', 'address': 'California'}]", "output": "data = [{'age': 30, 'income': 1000, 'address': 'New York'}, {'age': None, 'income': 2000, 'address': 'California'}]", "category": "Python"}, {"instruction": "Identify two coding languages used by Python developers.", "input": "", "output": "Two coding languages used by Python developers are Python and C++.", "category": "Python"}, {"instruction": "Write a Python program to add two matrices.", "input": "matrix1 = [[3, 5],\n           [6, 2]]\n\nmatrix2 = [[1, 2],\n           [3, 4]]", "output": "def add_matrices(mat1, mat2):\n    \"\"\"\n    This function takes two 2D matrices and adds them,\n    returning a new 2D matrix.\n    \"\"\"\n    output = []\n    \n    for i in range(len(mat1)):\n        row_m1 = mat1[i]\n        row_m2 = mat2[i]\n        row_sum = []\n        for j in range(len(row_m1)):\n            row_sum.append(row_m1[j] + row_m2[j])\n        output.append(row_sum)\n        \n    return output\n    \nresult = add_matrices(matrix1, matrix2)", "category": "Python"}, {"instruction": "Convert the following JSON string to a Python dictionary.", "input": "{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}", "output": "import json\n\njson_str = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\npy_dict = json.loads(json_str)\n\n# py_dict would be {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}", "category": "Python"}, {"instruction": "Define a function to collect unique values from a list of dictionaries based on the \"key\" field.", "input": "list = [{'name': 'Apple', 'price': 100}, {'name': 'Mango', 'price': 90}, {'name': 'Apple', 'price': 200}]", "output": "def collect_unique(dic_list, key):\n    unique_values = set()\n    for item in dic_list:\n        val = item.get(key)\n        if val is not None:\n            unique_values.add(val)\n    return list(unique_values)", "category": "Python"}, {"instruction": "What is the difference between sort() and sorted()?", "input": "", "output": "The sort() method sorts the elements of a given iterable in ascending order. It modifies the original list in place and does not return a value. The sorted() method on the other hand, returns an iterable sorted list without modifying the original sequence. It takes an optional 'key' argument to specify a function to be called on each list element prior to making comparisons.", "category": "Python"}, {"instruction": "Given a string, write a program to remove the leading and trailing white spaces from the string and output the modified string.", "input": "String: \"Hello world   \"", "output": "# Python program to remove leading and trailing white spaces from a string \n  \n# Function to remove leading and trailing white spaces \ndef removeWhitespaces(string): \n    # Remove leading and trailing whitespaces \n    newString = string.strip() \n  \n    # Returns the new string with leading and trailing \n    # whitespaces removed \n    return newString \n  \n# Driver program \ninputString = \"Hello world   \"\n  \n# Printing the modified string \nprint(removeWhitespaces(inputString))", "category": "Python"}, {"instruction": "Explain the purpose of the count() method.", "input": "", "output": "The count() method is used to count the number of times a particular item appears in a list. It takes the element as an argument and returns the count of the specified element in the list.", "category": "Python"}, {"instruction": "Describe how a bubble sort algorithm works.", "input": "", "output": "Bubble sort is a sorting algorithm in which adjacent elements in an array are compared and swapped if they are not in the correct order. The algorithm steps through the array multiple times, comparing adjacent elements and swapping them if the elements are not in the correct order. This process is repeated until all elements in the array are sorted.", "category": "Python"}, {"instruction": "Design a GUI in Python to accept user input and display a welcome message.", "input": "Message: Welcome to our website!", "output": "import tkinter as tk\n\nwindow = tk.Tk()\n\nlabel = tk.Label(text='Please enter your name:')\nlabel.pack()\n\nname = tk.Entry(window, width=25)\nname.pack()\n\ndef greet_user():\n\twelcome = \"Welcome to our website, \" + name.get()\n\t\n\tgreeting = tk.Label(text=welcome)\n\tgreeting.pack()\n\nbtn = tk.Button(window, text='Submit', command=greet_user)\nbtn.pack()\n\nwindow.mainloop()", "category": "Python"}, {"instruction": "Calculate the sum of the numbers given in the following list using Python.", "input": "my_list = [1, 2, 3, 4, 5]", "output": "my_list = [1, 2, 3, 4, 5]\n\n# Calculate the sum \nsum_nums = sum(my_list)\n\nprint(sum_nums) \n# Output: 15", "category": "Python"}, {"instruction": "Create a customer management system using Python and the Django web framework.", "input": "", "output": "Steps for creating a customer management system using Python and the Django web framework:\n1. Create a Django project\n2. Add customers app to the project \n3. Create a model for customers in the customers app\n4. Update the customers app's views function to include the logic for adding, deleting, and updating customers\n5. Add customers app the the project's urls.py file to map requests to the views functions\n6. Create and update templates in the customers app to provide the UI\n7. Run the Django project to launch the web application", "category": "Python"}, {"instruction": "Write a function in Python to assign the value 0 for special values, i.e. empty strings and NaN.", "input": "my_list = [5, 2, 3, None, '', 8]", "output": "def assign_values(list): \n    for i, val in enumerate(list): \n        if not val or val != val: \n            list[i] = 0\n            \n    return list\n\nmy_list = [5, 2, 3, None, '', 8] \nresult = assign_values(my_list) \nprint(result) \n# Output: [5, 2, 3, 0, 0, 8]", "category": "Python"}, {"instruction": "Explain how to create a custom exception in Python.", "input": "", "output": "To create a custom exception in Python, you will have to subclass Exception class and define your own exception class. For example: \n \nclass MyCustomException(Exception):\n  pass \n \nThen you can use the exception in a try-except block to handle expected errors:\n \ntry: \n  ...\nexcept MyCustomException: \n  ...", "category": "Python"}, {"instruction": "Create a Pandas DataFrame from a given dictionary of lists.", "input": "data = {'Year': [2020, 2021, 2022],\n 'Sales': [50000, 70000, 60000]}", "output": "import pandas as pd\n\ndf = pd.DataFrame(data)", "category": "Python"}, {"instruction": "Suggest a method to remove a given item from a given list.", "input": "", "output": "def remove_item(lst, item):\n if item in lst:\n    lst.remove(item)", "category": "Python"}, {"instruction": "Implement a method to check if a given string has all unique characters.", "input": "", "output": "def has_unique_chars(string): \n  chars = set() \n  for char in string: \n    if char in chars: \n      return False \n    else: \n      chars.add(char) \n  return True", "category": "Python"}, {"instruction": "Modify the following python code so that it accepts two numbers as input and returns the maximum of those numbers.", "input": "def get_max(num1):\n return num1", "output": "def get_max(num1, num2):\n return max(num1, num2)", "category": "Python"}, {"instruction": "Construct a python method to get the nth Fibonacci number.", "input": "", "output": "def get_nth_fibonacci(n):\n if n == 0 or n == 1:\n return n\n else:\n return get_nth_fibonacci(n-1) + get_nth_fibonacci(n-2)", "category": "Python"}, {"instruction": "Construct a python class to store a person's data like name, age, and hobbies.", "input": "", "output": "class Person:\n     def __init__(self, firstname, lastname, age, hobbies):\n           self.firstname = firstname\n           self.lastname = lastname\n           self.age = age\n           self.hobbies = hobbies", "category": "Python"}, {"instruction": "Write a function to flatten a given array of lists.", "input": "[[1,2], [3,4], [5,6]]", "output": "def flatten(arr):\n    output_list = []\n    for sublist in arr:\n        for item in sublist:\n            output_list.append(item)\n    return output_list", "category": "Python"}, {"instruction": "Implement a recursive binary search on a given sorted list.", "input": "[-4, -2, 0, 6, 7, 8]", "output": "def binary_search(arr, num, start, end): \n    if start >= end: \n        return None\n  \n    mid = start + (end - start)//2\n    if arr[mid] == num: \n        return mid \n  \n    if arr[mid] < num: \n        return binary_search(arr, num, mid+1, end) \n    else: \n        return binary_search(arr, num, start, mid-1)", "category": "Python"}, {"instruction": "Calculate the sum of all the prime numbers between a given range.", "input": "15 and 20", "output": "def sum_of_primes(start, end): \n    sum = 0\n    for i in range(start, end + 1):\n        if isPrime(i): \n            sum = sum + i \n    return sum\n    \ndef isPrime(num): \n    if num > 1: \n        for i in range(2, num): \n            if (num % i) == 0: \n                return False\n        return True\n    else: \n        return False", "category": "Python"}, {"instruction": "Write an expression to verify the validity of a given password in Python.", "input": "", "output": "import re \n  \ndef check(password): \n  \n    #Define pattern rules\n    pattern = r\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}\"\n      \n    if (re.search(pattern,password)): \n        return True\n    else: \n        return False \n  \n# Driver code     \npassword = \"Geronimo1\"\nif (check(password)): \n    print(\"Valid Password\") \nelse: \n    print(\"Invalid Password\")", "category": "Python"}, {"instruction": "Combine the two lists below using Python to produce a single list containing all elements from both.", "input": "list_one = [1, 2, 3]\nlist_two = [4, 5, 6]", "output": "list_one = [1, 2, 3]\nlist_two = [4, 5, 6]\ncombined_list = list_one + list_two\nprint(combined_list) # Output: [1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Provide an example of a recursive Python function to calculate the factorial of a number.", "input": "", "output": "def calculateFactorial(n):\n  if n == 0:\n    return 1\n\n  return n * calculateFactorial(n - 1)", "category": "Python"}, {"instruction": "What is the syntax for creating a class in Python?", "input": "", "output": "class MyClass:\n    <statement(s)>", "category": "Python"}, {"instruction": "Write a function that takes as input a string and returns a new string with all the vowels removed.", "input": "", "output": "def remove_vowels(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    new_string = \"\"\n    for letter in string:\n        if letter.lower() not in vowels:\n            new_string += letter\n    return new_string", "category": "Python"}, {"instruction": "Describe the function of the following code", "input": "while i < n:\n    print('Hello World!')", "output": "The code snippet is a basic example of a while loop in python. The code will loop through the code that is enclosed in the block and execute it for i (initialized to 0) values between 0 and n-1. In this case, the code will print \"Hello World!\" n times.", "category": "Python"}, {"instruction": "Code an algorithm to reverse an array of integers.", "input": "[1, 3, 4, 6, 8]", "output": "def reverse_array(arr):\n    left_index = 0\n    right_index = len(arr) - 1\n\n    while left_index < right_index:\n        arr[left_index], arr[right_index] = arr[right_index], arr[left_index]\n        left_index += 1\n        right_index -= 1\n    return arr\n\nif __name__ == \"__main__\":\n    print(reverse_array([1, 3, 4, 6, 8]))", "category": "Python"}, {"instruction": "Write a code to generate a list of all possible permutations of a given string.", "input": "\"ABC\"", "output": "def get_permutations(string):\n    if len(string) == 0:\n        return []\n    if len(string) == 1:\n        return [string]\n \n    permutations = []\n    for i, char in enumerate(string):\n        for permutation in get_permutations(string[:i] + string[i+1:]):\n            permutations.append(char + permutation)\n \n    return permutations\n\nif __name__ == \"__main__\":\n    print(get_permutations(\"ABC\"))", "category": "Python"}, {"instruction": "Write an algorithm that takes in an array and determines if it is a valid BST.", "input": "[9, 7, 3, 15, 20]", "output": "def is_valid_bst(arr):\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n\n    root_val = arr[0]\n    left_subtree = [i for i in arr if i < root_val]\n    right_subtree = [i for i in arr if i > root_val]\n\n    if sorted(left_subtree) == left_subtree and sorted(right_subtree, reverse=True) == right_subtree:\n        return (is_valid_bst(left_subtree) and is_valid_bst(right_subtree))\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    print(is_valid_bst([9, 7, 3, 15, 20]))", "category": "Python"}, {"instruction": "Compute the sum of all even numbers between 1 and 50.", "input": "", "output": "def sum_even(num):\n    total = 0 \n    for i in range(1, num+1):\n        if i % 2 == 0:\n            total += i\n    return total\n\nif __name__ == \"__main__\":\n    print(sum_even(50))", "category": "Python"}, {"instruction": "Write a function to filter a given list such that all any string starting with an 'S' is removed from the list.", "input": "['Swallow', 'Duck', 'Finch', 'Parrot']", "output": "def filter_list(lst):\n    return [elem for elem in lst if not elem.startswith('S')]\n\nif __name__ == \"__main__\":\n        print(filter_list(['Swallow', 'Duck', 'Finch', 'Parrot']))", "category": "Python"}, {"instruction": "Code a recursive solution for counting the number of characters in a given string.", "input": "example", "output": "def count_chars(string):\n    if len(string) == 0:\n        return 0\n    return 1 + count_chars(string[1:])", "category": "Python"}, {"instruction": "Develop a Python program to generate a list with numbers in range 3 to 12.", "input": "", "output": "# Generate a list with numbers in range 3 to 12 \nmy_list = list(range(3, 13)) \nprint(my_list) # [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "category": "Python"}, {"instruction": "Suggest a way to delete an item from a python list.", "input": "", "output": "You can use the built-in method \"remove\" to delete an item from a python list. \n\nFor example:\n\nmy_list = [1, 2, 3, 4, 5]\nmy_list.remove(4) # Remove item 4 from the list\n\nThe list will now be: [1, 2, 3, 5]", "category": "Python"}, {"instruction": "Develop a Python program to find the most frequent element in an array.", "input": "[3, 5, 1, 2, 4, 5, 5, 4, 2]", "output": "def most_frequent_element(arr):\n    count = 0\n    for i in arr:\n        current_count = arr.count(i)\n        if current_count > count:\n            count = current_count\n            most_frequent_element = i\n    return most_frequent_element\n\narr = [3, 5, 1, 2, 4, 5, 5, 4, 2]\nprint(most_frequent_element(arr)) # 5", "category": "Python"}, {"instruction": "Explain what the following function in Python does.", "input": "def print_max_element_idx(arr):\n    max_num = arr[0]\n    max_idx = 0\n    i = 1\n    while i < len(arr):\n        if arr[i] > max_num:\n            max_idx = i\n            max_num = arr[i]\n        i += 1\n    return max_idx", "output": "This function takes an array as input and then iterates through it. It keeps track of the maximum number and its index. At the end, it returns the index at which the maximum number is located.", "category": "Python"}, {"instruction": "What python library can be used for working with JSON data?", "input": "", "output": "The Python library 'json' can be used for working with JSON data.", "category": "Python"}, {"instruction": "Compress a string using Huffman coding in Python.", "input": "String: \"aaabbcc\"", "output": "def get_freq_list(s): \n      \n    # dictionaries are efficient for such a task \n    freq_list = {} \n  \n    for char in s: \n        if char in freq_list.keys(): \n            freq_list[char] += 1\n        else: \n            freq_list[char] = 1\n  \n    return freq_list \n  \ndef create_huffman_tree(freq_list): \n  \n    # create a priority queue \n    # to pop two minimum element each time \n    priority_queue = [] \n    for key in freq_list.keys(): \n        node = Node(key, freq_list[key]) \n        heapq.heappush(priority_queue, node) \n  \n    while len(priority_queue) > 1: \n        left_node = heapq.heappop(priority_queue) \n        right_node = heapq.heappop(priority_queue) \n  \n        new_node = Node(None, \n              left_node.freq + right_node.freq, \n              left_node, \n              right_node) \n        heapq.heappush(priority_queue, new_node) \n  \n    huffman_tree = heapq.heappop(priority_queue) \n    return huffman_tree \n    \ndef compress_string(huffman_tree, symbols): \n  \n    # create a character-code dict\n    code_dict = {} \n    _generate_codes(huffman_tree, '', code_dict) \n  \n    # encode the string \n    encoded_str = '' \n    for char in symbols: \n        encoded_str += code_dict[char] \n  \n    return encoded_str", "category": "Python"}, {"instruction": "Find and remove the bug from this Python code.", "input": "def function(a):\n    b = a / 0.5\n    c = a / 2.0\n    if b == c:\n        return \"equal\"\n    else:\n        return \"not equal\"", "output": "def function(a):\n    b = a * 2\n    c = a * 0.5\n    if b == c:\n        return \"equal\"\n    else:\n        return \"not equal\"", "category": "Python"}, {"instruction": "Compare two given JSON objects and create a merged object.", "input": "Object A: {\n\t\"name\": \"John\",\n\t\"age\": 35,\n\t\"interests\": [\"music\"]\n}\nObject B: {\n\t\"name\": \"John\",\n\t\"hobbies\": [\"cycling\"]\n}", "output": "def merge_json(json_a, json_b):\n # Create a new object\n merged = dict()\n # Iterate through the keys in both objects\n for key in json_a.keys() | json_b.keys():\n   # Merge the values of matching keys\n   if key in json_a and key in json_b:\n     if isinstance(json_a[key], list) and isinstance(json_b[key], list):\n       merged[key] = json_a[key] + json_b[key]\n     else:\n       merged[key] = [json_a[key], json_b[key]]\n   # Add keys that only exist in one object\n   elif key in json_a:\n     merged[key] = json_a[key]\n   elif key in json_b:\n     merged[key] = json_b[key]\n # Return the merged object\n return merged", "category": "Python"}, {"instruction": "Write pseudocode to sort a given list of integers using bubble sort.", "input": "", "output": "# Set a swap flag to true\nswap = true \n# While the flag is true\nwhile swap \n  # Set the swap flag to false\n  swap = false\n  # Iterate through the list\n  for i in range(len(list) - 1):\n    # Swap adjacent element if they are out of order\n    if list[i] > list[i + 1]:\n      temp = list[i]\n      list[i] = list[i + 1]\n      list[i + 1] = temp\n      # Set the flag back to true\n      swap = true", "category": "Python"}, {"instruction": "Write an algorithm in Python which reads a string and reorders it alphabetically.", "input": "string s = 'dcba'", "output": "def reorder_string(s):\n    s = sorted(s)\n    return ''.join(s)\n\nprint(reorder_string('dcba'))", "category": "Python"}, {"instruction": "Write a code to parse a JSON string into Python objects.", "input": "json_string = '{\"name\": \"John Doe\", \"age\": 42 }'", "output": "import json\n\njson_string = '{\"name\": \"John Doe\", \"age\": 42 }'\ndata = json.loads(json_string)\n\nprint(data['name']) # John Doe\nprint(data['age']) # 42", "category": "Python"}, {"instruction": "Write a function to compute a hash code for a string.", "input": "", "output": "def hash(string):\n    result = 0\n    for char in string:\n        result += ord(char)\n    return result", "category": "Python"}, {"instruction": "Write a Python function to find the most common element in a given list.", "input": "", "output": "def most_common(myList):\n  return max(set(myList), key=myList.count)", "category": "Python"}, {"instruction": "How can we generate a random number within a given range in Python?", "input": "", "output": "import random\n\nrandomNumber = random.randint(minNum, maxNum)", "category": "Python"}, {"instruction": "Write a function in Python to extract the first 5 characters of a string.", "input": "string = \"This is a sample string.\"", "output": "def get_first_five_characters(string):\n  return string[:5]\n\nprint(get_first_five_characters(string)) # Output: 'This '", "category": "Python"}, {"instruction": "Convert a string to lowercase, using Python.", "input": "my_string = \"Hello World\"", "output": "my_string.lower() # Output: \"hello world\"", "category": "Python"}, {"instruction": "Create a Python class that has an initialization method which takes in two parameters and sets them as class variables.", "input": "", "output": "class ExampleClass:\n    def __init__(self, param1, param2):\n        self.param1 = param1\n        self.param2 = param2", "category": "Python"}, {"instruction": "Create a Python function to check if a given array is sorted in ascending order.", "input": "arr = [1, 3, 5, 7, 6]", "output": "def is_sorted_ascending(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True", "category": "Python"}, {"instruction": "Given 2 string variables, write a function to find out if the 2 strings are anagrams.", "input": "str1 = 'schoolmaster', str2 = 'the classroom'", "output": "def are_anagrams(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    else:\n        counts = dict()\n        for char in str1:\n            counts[char] = counts.get(char, 0) + 1\n        for char in str2:\n            if char not in counts or counts[char] == 0:\n                return False\n            counts[char] -= 1\n    return True", "category": "Python"}, {"instruction": "Write a Python program to compute the gravitational force between two masses.", "input": "m1 = 5 kg, m2 = 10 kg", "output": "def calc_grav_force(m1, m2):\n    G = 6.67 * 10 ** -11 # gravitational constant\n    force = G * m1 * m2 / (4 * 3.14 ** 2)\n    return force", "category": "Python"}, {"instruction": "Create a search algorithm in Python to find an element in a sorted array in less than log(n) time.", "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8]", "output": "def binarySearch(arr, element):\n    start = 0;\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1 \n    return -1", "category": "Python"}, {"instruction": "Construct an algorithm in python to find the length of the longest common substring between two strings", "input": "str1 = \"'abbcdefg\"\nstr2 = \"zabxdefujh\"", "output": "def longest_common_substring(str1, str2):\n    len1 = len(str1)\n    len2 = len(str2)\n    result = 0\n    dp = [[0 for x in range(len2+1)] for x in range(len1+1)]\n    for i in range(len1+1):\n        for j in range(len2+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                result = max(result, dp[i][j])\n            else:\n                dp[i][j] = 0\n    return result", "category": "Python"}, {"instruction": "Change the following code so that it accepts a list as an argument and prints each element of the list.", "input": "def print_list(arr):\n\ti = 0\n\twhile (i < len(arr)):\n\t\tprint arr[i]\n\t\ti +=1", "output": "def print_list(arr):\n\tfor ele in arr:\n\t\tprint(ele)", "category": "Python"}, {"instruction": "Create a repeatable random number generator in Python", "input": "", "output": "import random\n\ndef repeatRandom(seed):\n  random.seed(seed)\n  return random.random()", "category": "Python"}, {"instruction": "Write an algorithm in python to find the second largest number of an unsorted list", "input": "arr = [1, 3, 4, 5, 9, 10, 11]", "output": "def find_sec_largest(arr):\n  max1 = max(arr[0], arr[1])\n  max2 = min(arr[0], arr[1])\n\n#Iterate over the array to find max2 and max1\nfor i in range(2, len(arr)):\n  if arr[i] > max1:\n    max2 = max1\n    max1 = arr[i]\n  elif arr[i] > max2 and arr[i]!=max1:\n    max2 = arr[i]\n  else:\n    continue\n\n# else return the second max\nreturn max2", "category": "Python"}, {"instruction": "Explain the concept of Base Class and Subclass", "input": "", "output": "A base class is a class that serves as a parent class for one or more subclasses. A subclass is a class that is derived from one or more base classes and inherits the properties and methods of its base classes. A subclass can also override and add its own properties and methods, while inheriting the properties and methods of its parent classes.", "category": "Python"}, {"instruction": "Create a program in python to find the longest common contiguous subarray between two integers.", "input": "int arr1[7] = {1,2,4,4,4,4,7}\nint arr2[5] = {1,4,4,5,5}", "output": "def long_com_subarr(arr1, arr2):\n    len1 = len(arr1)\n    len2 = len(arr2)\n    res = 0\n    count = 0 \n    \n    for i in range(len1):\n        for j in range(len2):\n            if arr1[i] == arr2[j]:\n                count += 1\n            else: \n                if result < count:\n                    res = count\n                count = 0\n    \n    return res", "category": "Python"}, {"instruction": "Convert the following pseudocode into Python code", "input": "for i = 0 to 9\n    print i", "output": "for i in range(10):\n    print(i)", "category": "Python"}, {"instruction": "You need to generate a list of all the even numbers between two given numbers.", "input": "", "output": "def even_numbers(start, end):\n even_nums = []\n for num in range(start, end):\n if num % 2 ==0:\n even_nums.append(num)\n return even_nums", "category": "Python"}, {"instruction": "Calculate the running average of a given array of data.", "input": "[1,6,3,5,2,7,8]", "output": "def calculate_running_average(arr):\n    running_sum = 0\n    for i in range(len(arr)):\n        running_sum += arr[i]\n        arr[i] = running_sum / (i+1)\n    return arr\n\narr = [1, 6, 3, 5, 2, 7, 8]\ncalculate_running_average(arr) # Returns [1.0, 3.5, 3.0, 3.75, 3.2, 4.16, 4.43]", "category": "Python"}, {"instruction": "Parse a JSON document and display its contents.", "input": "", "output": "import json\n\nwith open('filename.json', 'r') as json_file:\n    data = json.load(json_file)\n\nfor key, value in data.items():\n    print(key, ':', value)", "category": "Python"}, {"instruction": "Generate a random number from 1 to 1000.", "input": "", "output": "import random\n\nrandom_number = random.randint(1, 1000)", "category": "Python"}, {"instruction": "Implement a stack using a linked list.", "input": "", "output": "class Stack:\n\n    class Node:\n        def __init__(self, value):#, next=None):\n            self.value = value\n            self.next = None\n\n    def __init__(self):\n        self.head = None\n        self.count = 0\n\n    def isEmpty(self):\n        if self.count == 0:\n            return True\n        return False\n\n    def push(self, value):\n        node = self.Node(value)\n        node.next = self.head\n        self.head = node\n        self.count += 1\n\n    def pop(self):\n        if self.head == None:\n            return None\n        result = self.head.value\n        self.head = self.head.next\n        self.count -= 1\n        return result", "category": "Python"}, {"instruction": "Compute the distance between two points p1 and p2.", "input": "p1 = (3, 4), p2 = (6, 8).", "output": "import math\ndef distance(p1, p2):\n    xDiff = p2[0] - p1[0]\n    yDiff = p2[1] - p1[1]\n    return math.sqrt(xDiff**2 + yDiff**2)\n\ndistance((3,4), (6,8)) # Returns 5.0", "category": "Python"}, {"instruction": "Create a Python program that takes a given list of strings and prints out the string with the maximum length.", "input": "['code', 'programming', 'computer science', 'javascript', 'HTML']", "output": "max_len = 0\nmax_string = ''\nfor elem in ['code', 'programming', 'computer science', 'javascript', 'HTML']:\n    if len(elem) > max_len:\n        max_len = len(elem)\n        max_string = elem\n\nprint(max_string)", "category": "Python"}, {"instruction": "Modify the code to return the most repeated character.", "input": "def max_repeated_char(input_string):\n    char_count = dict()\n    max_count = 0\n    max_char = None\n    for char in input_string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n            \n    print(char_count)", "output": "def max_repeated_char(input_string):\n    char_count = dict()\n    max_count = 0\n    max_char = None\n    for char in input_string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n            \n    for char in char_count:\n        if char_count[char] > max_count:\n            max_count = char_count[char]\n            max_char = char\n    return max_char", "category": "Python"}, {"instruction": "Create a function to sum all the numbers in an array.", "input": "arr = [1, 2, 3, 4]", "output": "def sumList(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\nprint(sumList(arr))", "category": "Python"}, {"instruction": "Modify the following code so that the output is 4, 4.", "input": "import math \ndef f(x): \n    return math.sqrt(x) * math.sqrt(x+1)\n  \nprint(f(3))", "output": "import math \ndef f(x): \n    return math.pow(x, 2)\n  \nprint(f(4))", "category": "Python"}, {"instruction": "Create an algorithm to solve the Tower of Hanoi problem.", "input": "", "output": "def TowerOfHanoi(n , from_rod, to_rod, aux_rod): \n    if n == 1: \n        print (\"Move disk 1 from rod\",from_rod,\"to rod\",to_rod) \n        return\n    TowerOfHanoi(n-1, from_rod, aux_rod, to_rod) \n    print (\"Move disk\",n,\"from rod\",from_rod,\"to rod\",to_rod) \n    TowerOfHanoi(n-1, aux_rod, to_rod, from_rod)", "category": "Python"}, {"instruction": "Develop an algorithm for shuffling an array of numbers.", "input": "", "output": "def shuffleArray(arr):\n    for i in range(len(arr) - 1, 0, -1): \n        j = random.randint(0, i + 1)  \n        arr[i], arr[j] = arr[j], arr[i]\n    return arr", "category": "Python"}, {"instruction": "Write a code that finds all the prime numbers from 1 to n.", "input": "", "output": "def is_prime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_primes(n):\n    primes = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\nfind_primes(10) # Returns [2, 3, 5, 7]", "category": "Python"}, {"instruction": "You need to implement a class for a numerical calculator.", "input": "", "output": "class Calculator:\n def __init__(self):\n  self.result = 0\n\n def add(self, a, b):\n  self.result = a + b\n  return self.result\n\n def subtract(self, a, b):\n  self.result = a - b\n  return self.result\n\n def multiply(self, a, b):\n  self.result = a * b\n  return self.result\n\n def divide(self, a, b):\n  self.result = a / b\n  return self.result", "category": "Python"}, {"instruction": "Write a Python program to generate a list that contains only the non-unique elements from a given list.", "input": "[1,2,3,4,5,1,2,2,3,4]", "output": "def generate_non_unique_list(lst):\n new_list = []\n for i in lst:\n  if lst.count(i) > 1 and i not in new_list:\n   new_list.append(i)\n return new_list", "category": "Python"}, {"instruction": "Categorize a given list of integers into odd and even numbers.", "input": "[1,2,3,4,5,6,7,8,9]", "output": "def categorize_numbers(lst):\n odd = []\n even = []\n for num in lst:\n  if num % 2 == 0:\n   even.append(num)\n  else:\n   odd.append(num)\n return odd, even", "category": "Python"}, {"instruction": "Write a Python program to implement a text-based game", "input": "", "output": "import random\n\ndef intro():\n    print(\"Welcome to the game! You are stuck in a dungeon and must find a way out. Type 'help' for instructions.\")\n\ndef help_command():\n  print(\"Type 'north', 'south', 'west', or 'east' to move in that direction. Type 'check inventory' to view items in your inventory. Type 'quit' to quit.\")\n\ndef move(direction):\n  if direction == 'north':\n    print(\"You moved north.\")\n  elif direction == 'south':\n    print(\"You moved south.\")\n  elif direction == 'west':\n    print(\"You moved west.\")\n  elif direction == 'east':\n    print(\"You moved east.\")\n\ndef check_inventory():\n  print(\"You have nothing in your inventory.\")\n\ndef quit_game():\n  print(\"Thanks for playing!\")\n  return False\n\nintro()\nplaying = True\nwhile playing:\n  command = input(\"What would you like to do? > \").lower()\n  if command == 'help':\n    help_command()\n  elif command == 'north' or command == 'south' or command == 'west' or command == 'east':\n    move(command)\n  elif command == 'check inventory':\n    check_inventory()\n  elif command == 'quit':\n    playing = quit_game()", "category": "Python"}, {"instruction": "Create a neural network using TensorFlow.", "input": "", "output": "import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(units=128, activation='relu', input_shape=(10,)),\n    tf.keras.layers.Dense(units=128, activation='relu'),\n    tf.keras.layers.Dense(units=128, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])", "category": "Python"}, {"instruction": "Create a distributed system using Python", "input": "", "output": "import multiprocessing\n\ndef send_task(task):\n    # Send the task to a worker process \n    pass\n\ndef process(task):\n    # Process the task \n    pass\n\nif __name__ == '__main__': \n    processes = []\n    # Create two processes\n    process1 = multiprocessing.Process(target=send_task, args=(task,))\n    process2 = multiprocessing.Process(target=process, args=(task,))\n    processes.append(process1) # Put processes in a list \n    processes.append(process2)\n\n    # Run processes\n    for process in processes:\n        process.start()\n\n    # Exit the completed processes\n    for process in processes:\n        process.join()", "category": "Python"}, {"instruction": "Create a class named Dog in Python.", "input": "", "output": "class Dog:\n    def __init__(self):\n        pass\n    \n    def bark(self):\n        print(\"Bark!\")", "category": "Python"}, {"instruction": "Implement a quick-sort algorithm in Python to sort a given array in ascending order.", "input": "", "output": "def quick_sort(arr): \n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quick_sort(left) + middle + quick_sort(right)", "category": "Python"}, {"instruction": "Create a function that takes two parameters, an array and an object key, and returns an object containing all the elements in the array whose value is the same as the given object key.", "input": "array = [\"a\", \"b\", \"c\", \"a\", \"b\", \"d\"]\nkey = \"b\"", "output": "def group_by_key(array, key):\n    returned_object = {}\n    for item in array:\n        if item == key:\n            returned_object[item] = key\n    return returned_object\n\ngroup_by_key(array, key) # Returns {\"b\": \"b\"}", "category": "Python"}, {"instruction": "Find the maximum element in a Binary Search Tree.", "input": "", "output": "def findMax(root): \n    if root == None: # if tree is empty\n        return -1\n    while root.right: # Move right in  BST till the last node\n        root = root.right\n    return root.key", "category": "Python"}, {"instruction": "Create a function to retrieve the first value from a dictionary that starts with a given letter.", "input": "dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 }\nstarting_letter = \u201cb\u201d", "output": "def get_first_value(dictionary, starting_letter):\n    for key, value in dictionary.items():\n        if key.startswith(starting_letter):\n            return value\n    return None # if no value found\n\nget_first_value(dictionary, starting_letter) # Returns 2", "category": "Python"}, {"instruction": "Parse and convert a string containing a valid JSON to a Python dictionary.", "input": "string = '{ \"a\": 1, \"b\": 2, \"c\": 3 }'", "output": "import json\n\ndef convert_json_string(string):\n    return json.loads(string)\n\nconvert_json_string(string) # Returns { \"a\": 1, \"b\": 2, \"c\": 3 }", "category": "Python"}, {"instruction": "Is a valid ISBN-10 number?", "input": "isbn = \"0478156686\"", "output": "import re \n\ndef is_valid_isbn(isbn):\n    pattern = r\"^\\d{9}[\\d|X]$\" # ISBN is a string with 10 digits\n    return True if re.match(pattern, isbn) else False\n\nis_valid_isbn(isbn) # Returns True", "category": "Python"}, {"instruction": "Given a list of numbers, return the first number that appears an odd number of times.", "input": "arr = [2,4,4,4,2,2,8,4]", "output": "def find_odd_occurrence_num(arr):\n    seen = {}\n    for item in arr:\n        if item not in seen:\n            seen[item] = 1\n        else:\n            seen[item] += 1\n    for item, count in seen.items():\n        if count % 2 != 0:\n            return item\n    return None\n\nfind_odd_occurrence_num(arr) # Returns 8", "category": "Python"}, {"instruction": "Find the duplicate in the array.", "input": "arr = [1,2,3,4,2]", "output": "def find_duplicate(arr):\n    seen = set()\n    for item in arr:\n        if item in seen:\n            return item\n        else:\n            seen.add(item)\n    return None # if no duplicate\n\nfind_duplicate(arr) # Returns 2", "category": "Python"}, {"instruction": "Create a function that takes a string and returns the first letter of each word in the string.", "input": "string = \"This is an example\"", "output": "def first_letters(string):\n    words = string.split()\n    first_letters = [word[0] for word in words]\n    return \"\".join(first_letters)\n\nfirst_letters(string) # Returns \"Tiiae\"", "category": "Python"}, {"instruction": "Write a function in Python to shuffle an array.", "input": "[1, 2, 3, 4, 5, 6]", "output": "import random\n\ndef shuffleArray(arr):\n    # Create a copy of the array\n    temp_arr = arr.copy()\n\n    # Iterate through the array and randomly\n    # swap elements\n    for i in range(len(temp_arr)):\n        j = random.randint(0, len(temp_arr)-1)\n        temp_arr[i], temp_arr[j] = temp_arr[j], temp_arr[i]\n\n    return temp_arr", "category": "Python"}, {"instruction": "Create an object-oriented design in Python to represent a customer.", "input": "", "output": "class Customer:\n    def __init__(self, name, address, email):\n        self.name = name\n        self.address = address\n        self.email = email\n\n    def get_name(self):\n        return self.name\n\n    def set_name(self, name):\n        self.name = name\n\n    def get_address(self):\n        return self.address\n\n    def set_address(self, address):\n        self.address = address\n\n    def get_email(self):\n        return self.email\n\n    def set_email(self, email):\n        self.email = email", "category": "Python"}, {"instruction": "Design an algorithm to check if a number is a palindrome.", "input": "7337", "output": "def is_palindrome(num):\n    num_str = str(num)\n    # compare the first and last characters\n    if num_str[0] != num_str[-1]:\n        return False\n    # go to the next pair of characters\n    if len(num_str) >= 3:\n        return is_palindrome(num_str[1:-1])\n    # all characters have been compared, number is a palindrome\n    return True", "category": "Python"}, {"instruction": "Use python to call a API to get the current temperature in New York City?", "input": "", "output": "import requests\n\n# API call to get current temperatures in New York City\nurl = 'http://api.openweathermap.org/data/2.5/weather?q=New York City,NY&units=imperial'\nresponse = requests.get(url)\ndata = response.json()\ncurrent_temperature = data['main']['temp']\nprint(current_temperature)", "category": "Python"}, {"instruction": "Create a dictionary with two key-value pairs in Python.", "input": "", "output": "my_dict = {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n}", "category": "Python"}, {"instruction": "Calculate the Fibonacci sequence till 10 using Python.", "input": "", "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\nfor i in range(1,11): \n    print(Fibonacci(i))", "category": "Python"}, {"instruction": "Create a virtual environment with Python version 2.7.", "input": "", "output": "pip install virtualenv\nvirtualenv -p python2.7 venv\nsource venv/bin/activate", "category": "Python"}, {"instruction": "Correct the following Python code so it prints out the current hour in 24-hour format.", "input": "import datetime\n\ncurrent_hour = datetime.now()\nprint(\"Current hour is\")\nprint(current_hour.hour)", "output": "import datetime\n\ncurrent_time = datetime.datetime.now()\nprint(\"Current hour is\")\nprint(current_time.strftime(\"%H\"))", "category": "Python"}, {"instruction": "Write a function to compute the product of all elements in a matrix.", "input": "[[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9],]", "output": "def product_matrix(matrix):\n product = 1\n for row in matrix:\n  for value in row:\n   product *= value\n return product", "category": "Python"}, {"instruction": "You need to compute the sum of all odd elements in a given matrix.", "input": "[[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9],]", "output": "def sum_odd_matrix(matrix):\n sum = 0\n for row in matrix:\n  for value in row:\n   if value % 2 != 0:\n    sum += value\n return sum", "category": "Python"}, {"instruction": "Using the array, sort it using insertion sort.", "input": "arr = [4, 2, 6, 7, 1]", "output": "def insertionSort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \narr = [4, 2, 6, 7, 1] \ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i])", "category": "Python"}, {"instruction": "Create a HTTP GET request using Python.", "input": "", "output": "import requests\n\nurl = 'https://www.example.com'\nresponse = requests.get(url)\n\nprint(response.text)", "category": "Python"}, {"instruction": "Write a Python script to print out a 5x5 multiplication table.", "input": "", "output": "for i in range(1, 6):\n    for j in range(1, 6):\n        print(i * j, end=\"\\t\")\n    print()", "category": "Python"}, {"instruction": "Create an algorithm to find all pairs of elements in a given array that sum up to a given target.", "input": "array = [1, 6, 4, 5, 3, 2]\ntarget = 5", "output": "def findSumPairs(arr, target): \n\n    # X stores elements and its \n    # frequencies in a dictionary \n    X = dict() \n    n = len(arr) \n    output = [] \n  \n    # Store counts of all elements \n    # of array in a hash \n    for i in range(0, n): \n        if arr[i] in X.keys(): \n            X[arr[i]] += 1\n        else: \n            X[arr[i]] = 1\n\n    # Loop over each element \n    for i in range(0, n): \n        # finding the compliment \n        k = target - arr[i] \n\n        # If compliment exists in X \n        # and it is not the same element \n        if (k in X.keys() and X[k] != 0\n            and k != arr[i]): \n            output.append([arr[i], k]) \n            X[k] = X[k] - 1\n  \n    # return content of output \n    return output \n\n# calling the findSumPairs function \nprint(findSumPairs(array, target)) \n\n# Output: [[1, 4], [2, 3]]", "category": "Python"}, {"instruction": "Create a program that can convert a given number (integer) to binary.", "input": "Convert 33 to binary numerals.", "output": "def convert_to_binary(n):\n    binary_num = ''\n    while n > 0:\n        binary_num = str(n%2) + binary_num\n        n = n//2\n    return binary_num\n    \nif __name__ == \"__main__\":\n    print(convert_to_binary(33))", "category": "Python"}, {"instruction": "Generate a character frequency histogram of a sentence.", "input": "Distribution of characters in \u201cThe quick brown fox jumps over the lazy dog.\u201d", "output": "def get_char_freq_histogram(string):\n    char_freq_dict = {}\n    for char in string:\n        if char in char_freq_dict:\n            char_freq_dict[char] += 1\n        else:\n            char_freq_dict[char] = 1\n    return char_freq_dict\n\nif __name__ == \"__main__\":\n    sentence = \"The quick brown fox jumps over the lazy dog.\"\n    char_freq_histogram = get_char_freq_histogram(sentence)\n    print(char_freq_histogram)", "category": "Python"}, {"instruction": "Design a function to sum up an array of numbers.", "input": "Sum up [2, 3, 5, 10, 16].", "output": "def calculate_sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\nif __name__ == \"__main__\":\n    arr = [2, 3, 5, 10, 16]\n    print(calculate_sum(arr))", "category": "Python"}, {"instruction": "Create a program that can output the current date and time in a user-friendly format.", "input": "", "output": "from datetime import datetime\n\ndef get_date_and_time():\n    current_date_and_time = datetime.now()\n    friendly_format = current_date_and_time.strftime('%c')\n    return friendly_format\n\nif __name__ == \"__main__\":\n    print(get_date_and_time())", "category": "Python"}, {"instruction": "Given a string, rearrange the characters in the string such that no two consecutive characters are the same.", "input": "my_str = \"ababab\"", "output": "def rearrange_string(my_str):\n    arr = list(my_str)\n    i, j = 0, 1\n    while i < len(arr):\n        if i+1 < len(arr) and arr[i] == arr[i+1]:\n            while j < len(arr):\n                if arr[j] != arr[i]:\n                    arr[i+1], arr[j] = arr[j], arr[i+1]\n                    break\n                j += 1\n        i += 1\n    return \"\".join(arr)", "category": "Python"}, {"instruction": "Rewrite the following code to use for-else statement.", "input": "arr = [1, 2, 3, 4]\n\ni = 0\nwhile True:\n    if i >= len(arr):\n        break\n    print(arr[i])\n    i += 1", "output": "arr = [1, 2, 3, 4]\n\nfor i in arr:\n    print(i)\nelse:\n    break", "category": "Python"}, {"instruction": "Describe what is recursion in programming and provide a simple example.", "input": "", "output": "Recursion is a programming concept in which a function calls itself until a certain condition is met. It can be used to solve problems that lend themselves to divide and conquer, such as computing the Nth element of a Fibonacci sequence. For example, the code to compute the 5th element of the Fibonacci sequence can be written using recursion in Python as follows:\n\ndef fibonacci(n): \n    if n <= 1: \n        return n \n    else: \n        return(fibonacci(n-1) + fibonacci(n-2)) \n  \nprint(fibonacci(5))  \n\nThe output of this code is 5.", "category": "Python"}, {"instruction": "For the following JSON object, write a function to get the average of all prices.", "input": "data = [\n  { \"name\": \"apple\", \"price\": 2},\n  { \"name\": \"banana\", \"price\": 4},\n  { \"name\": \"cucumber\", \"price\": 6},\n]", "output": "def avg_price(data):\n    sum = 0\n    for item in data: \n        sum += item[\"price\"] \n    return sum / len(data)", "category": "Python"}, {"instruction": "Write an algorithm to count the number of times the letter 'e' appears in a given string.", "input": "my_string = \"Hello World\"", "output": "def count_letter_e(my_string):\n    count = 0\n    for char in my_string:\n        if char == 'e':\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Given an array of strings and an integer n, implement a function to return the values with length greater than n as a new array.", "input": "data = [\"abc\", \"abcde\", \"abcdef\", \"abcdefgh\"]\nn = 3", "output": "def get_values_greater_than_n(data, n):\n  return [val for val in data if len(val) > n]", "category": "Python"}, {"instruction": "Using Python, write a function to multiply two matrices.", "input": "", "output": "def multiply_matrices(matrixA, matrixB): \n    \"\"\"\n    Matrix multiplication\n    :param matrixA: 2D array\n    :param matrixB: 2D array\n    :return: product of matrixA and matrixB\n    \"\"\"\n    \n    # Initialize matrix to store the result with size (m x n), where m and n are the rows and columns of matrixA and matrixB\n    result_matrix = [[0 for _ in range(len(matrixB[0]))] for _ in range(len(matrixA))]\n\n    for i in range(len(matrixA)): \n        for j in range(len(matrixB[0])): \n            for k in range(len(matrixB)): \n                result_matrix[i][j] += matrixA[i][k] * matrixB[k][j] \n  \n    return result_matrix", "category": "Python"}, {"instruction": "Analyze the following code and explain what is wrong with it.", "input": "function max_value(x, y){\nif (x > y){\nreturn x;\n}\nelse{\nreturn y;\n}\n}", "output": "The function will not work when x and y are equal as there is no else if statement to handle that condition. The code should be modified to either return x or y randomly or return a value that is not related to x or y like 'null' or '-1' when x and y are the same.", "category": "Python"}, {"instruction": "Generate an 8-digit alphanumeric string.", "input": "", "output": "import string\nimport random\n\nalphanumeric_string = ''.join(random.choices(string.ascii_letters + string.digits, k=8))\nprint(alphanumeric_string) # GH485TV6", "category": "Python"}, {"instruction": "Change the following directory path to absolute path.", "input": "path = \"../images/example.png\"", "output": "import os\n\npath = os.path.abspath(\"../images/example.png\")\nprint(path) # \\user\\path\\to\\images\\example.png", "category": "Python"}, {"instruction": "Design an algorithm to find the largest number in a given array.", "input": "arr = [2,4,6,9,3,7]", "output": "def max_in_array(arr):\n    max = 0\n    for i in range(len(arr)):\n        if arr[i] > max :\n            max = arr[i]\n    return max\n\nmaxValue = max_in_array(arr)\nprint(maxValue) # 9", "category": "Python"}, {"instruction": "Here is a list of strings and a specific string pattern. Write a code to return a list of all strings that match the pattern.", "input": "strings = [\"abc\",\"bcd\",\"cde\",\"def\",\"efg\"]\npattern = \"?ef\"", "output": "matched_strings = []\nfor string in strings:\n    if string[1:3] == pattern[1:3]:\n        matched_strings.append(string)\nprint(matched_strings) # [\"bcd\", \"def\"]", "category": "Python"}, {"instruction": "Rearrange the given string in alphabetical order.", "input": "string = 'zxcvbnmlkjhgfdsaqwertyuiop'", "output": "\"\"\"\nRearrange the given string in alphabetical order\n\"\"\"\n\ndef alphabetical_order(string):\n    result = ''.join(sorted(string))\n    return result\n\nstring = 'zxcvbnmlkjhgfdsaqwertyuiop'\nprint(alphabetical_order(string)) # print abcdefghijklmnopqrstuvwxyz", "category": "Python"}, {"instruction": "Given a string, remove all spaces from it.", "input": "string = 'This is a sample string'", "output": "\"\"\"\nGiven a string, remove all spaces from it\n\"\"\"\n\ndef remove_spaces(string):\n    result = ''\n    for c in string:\n        if c != ' ':\n            result += c\n    return result\n\nstring = 'This is a sample string'\nprint(remove_spaces(string)) # print Thisisasamplestring", "category": "Python"}, {"instruction": "Create a looping structure to display numbers from 1-10.", "input": "", "output": "\"\"\"\nCreate a looping structure to display numbers from 1-10\n\"\"\"\n\n# loop from 1 to 10\nfor num in range(1, 11):\n    print(num)", "category": "Python"}, {"instruction": "Using Python, classify the following sentence \"The cat is a mammal\" into either Animal or Plant.", "input": "", "output": "def classify_sentence(sentence):\n  if \"animal\" in sentence.lower():\n    return \"Animal\"\n  elif \"plant\" in sentence.lower():\n    return \"Plant\"\n\nsentence = \"The cat is a mammal\"\nprint(classify_sentence(sentence))", "category": "Python"}, {"instruction": "Given a string, edit it so that every first letter of each word is capitalized.", "input": "string = \"this is a test string\"", "output": "def capitalize_string(string):\n    words = string.split(' ')\n    capitalized_words = [word.capitalize() for word in words]\n    return ' '.join(capitalized_words)\n\nstring = \"this is a test string\" \ncapitalize_string(string)", "category": "Python"}, {"instruction": "Write a function to generate the Cartesian product of 2 sets in Python.", "input": "A = {1, 2}; B = {'a', 'b'}", "output": "from itertools import product\n \ndef get_cartesian_product(A, B):\n  return set(product(A, B))\n \nA = {1, 2}; B = {'a', 'b'}\nprint(get_cartesian_product(A,B))", "category": "Python"}, {"instruction": "Rewrite existing code to make it more efficient.", "input": "Improve the following code.\n```\nfor i in range(10):\n    print(i)\n```", "output": "def print_nums(n):\n    for i in range(n):\n        print(i)\n\nif __name__ == \"__main__\":\n    print_nums(10)", "category": "Python"}, {"instruction": "Write a Python class to represent a 2-dimensional point.", "input": "", "output": "class Point: \n    def __init__(self, x, y): \n        self.x = x \n        self.y = y \n        \n    def distance(self, other_point):\n        x1, y1 = self.x, self.y\n        x2, y2 = other_point.x, other_point.y\n        return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5", "category": "Python"}, {"instruction": "Output a string that is the reversed version of a given sentence.", "input": "Reverse \u201cWhere the wild things are\u201d", "output": "def reverse_string(sentence):\n    return ' '.join(sentence.split(' ')[::-1])\n\nif __name__ == \"__main__\":\n    sentence = \"Where the wild things are\"\n    print(reverse_string(sentence))", "category": "Python"}, {"instruction": "Create a program that can identify the next number in a sequence.", "input": "Find the next number in 3, 7, 11, 15.", "output": "def get_next_number(arr):\n    return arr[-1] + (arr[-1] - arr[-2])\n\nif __name__ == \"__main__\":\n    arr = [3, 7, 11, 15]\n    print(get_next_number(arr))", "category": "Python"}, {"instruction": "Create an algorithm that finds the greatest common divisor of two integers.", "input": "x = 20 \ny = 12", "output": "def find_gcd(x,y):\n   \n    # If x is greater than y\n    # Swapping the x and y\n    if x > y:\n        tmp = x\n        x = y\n        y = tmp\n\n    while y > 0:\n        tmp = y\n        y = x % y\n        x = tmp\n    return x\n\ngcd = find_gcd(20,12)\nprint(\"The greatest common divisor of 20 and 12 is: \", gcd)", "category": "Python"}, {"instruction": "Write a code snippet to implement a binary search algorithm.", "input": "", "output": "def binary_search(arr, target): \n\tstart = 0\n\tend = len(arr) - 1\n\n\twhile start <= end: \n\t\tmid = start + (end-start)//2\n\t\tif arr[mid] == target: \n\t\t\treturn mid \n\t\telif arr[mid] < target: \n\t\t\tstart = mid + 1\n\t\telse: \n\t\t\tend = mid - 1\n          \n\treturn -1", "category": "Python"}, {"instruction": "Explain what is a stack data structure in programming.", "input": "", "output": "A stack is a linear data structure that works on the principle of last-in, first-out (LIFO). It is a collection of objects or elements which can be added or removed from the top of the stack. It is commonly used as a way to store temporary data, and allows for fast retrieval of the data, as it is only necessary to access the item at the top of the stack. In computer science, the stack is used for a wide range of applications, including memory and runtime storage management, expression evaluation, and more.", "category": "Python"}, {"instruction": "Explain the concept of binary search in an array.", "input": "", "output": "Binary search is an algorithm used to find an element in a sorted array. It works by repeatedly dividing in half the array until the element being searched is found. Binary search starts by comparing the middle element of the array with the target value. If the target value matches the middle element, its position in the array is returned. If the target value is less than the middle element, the search continues in the lower half of the array. If the target value is greater than the middle element, the search continues in the upper half of the array. This process is repeated until the target element is found or until the entire array has been searched.", "category": "Python"}, {"instruction": "Write a Python script that prints the current date and time.", "input": "", "output": "from datetime import datetime\n\nnow = datetime.now()\nprint(now.strftime(\"%d-%m-%Y %H:%M:%S\"))", "category": "Python"}, {"instruction": "Explain the purpose of lambda functions in Python.", "input": "", "output": "Lambda functions are anonymous short functions that have no name. They are used when a user needs to define a function in just a single expression, usually a function that takes an argument and performs an action on it. Lambda functions can also be used in Python as an alternative to traditional functions when they\u2019re used within a code block, making the code more concise and easier to understand. Lambda functions can also be used to pass a function as an argument to another function. Finally, lambda functions can also be used to create smaller, simpler anonymous functions when the full power of Python\u2019s functions is not required.", "category": "Python"}, {"instruction": "Construct a Tensorflow model to classify the following inputs.", "input": "Images with labels \u201ccat\u201d and \u201cdog\u201d.", "output": "model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(224, 224, 3)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n\n    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])", "category": "Python"}, {"instruction": "What is the advantage of using dictionary comprehension in Python?", "input": "", "output": "The main advantage of using dictionary comprehension in Python is that it offers an efficient and concise way to create dictionaries. It can be used to create dictionaries from existing sequences or iterables, or to create new dictionaries from scratch. It also eliminates the need for writing multiple lines of code to create dictionaries.", "category": "Python"}, {"instruction": "Explain polymorphism in Python.", "input": "", "output": "Polymorphism in Python is the ability of an object to take on multiple forms. It is an object-oriented programming concept that allows for different implementations of a function or method to be used depending on the object type being used. In Python, this is done through sub-classing, the use of special methods such as the __init__ method, and by using type hints.", "category": "Python"}, {"instruction": "What is the difference between a list and a tuple in Python?", "input": "", "output": "The main difference between a list and a tuple in Python is that a list is mutable while a tuple is immutable. This means that a list can be changed or modified, while a tuple cannot. Tuples also have better performance than lists in terms of speed and memory usage. Tuples are also generally easier to read than lists, since they don't have commas separating their elements.", "category": "Python"}, {"instruction": "How do you convert a string to an integer in Python?", "input": "", "output": "In Python, strings can be converted to integers using the int() function. This function takes a string as its argument and returns an integer object. The int() function can also take optional parameters that allow for conversion from one base or radix, or from different types of numbers (e.g. octal, hexadecimal, binary).", "category": "Python"}, {"instruction": "Create a class in Python with two methods, one of which accepts an argument.", "input": "", "output": "class MyClass:\n    def __init__(self):\n        pass\n\n    def my_method(self, arg):\n        # method code\n        pass", "category": "Python"}, {"instruction": "Name the parameter of a Python function?", "input": "", "output": "The parameter of a Python function is the variable name listed after the function name in the function definition.", "category": "Python"}, {"instruction": "Implement a function to sort an array in ascending order.", "input": "Array: [7, 19, 5, 4, 16]", "output": "def sortArray(arr):\n    for i in range(len(arr)):\n        for j in range(1, len(arr)):\n            if arr[j] < arr[j-1]:\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n    return arr\n\nsortArray([7, 19, 5, 4, 16]) # [4, 5, 7, 16, 19]", "category": "Python"}, {"instruction": "Explain the concept of transfer learning.", "input": "", "output": "Transfer learning is a machine learning method where a model is trained on a task, then the learned knowledge is transferred to a new task. This process of knowledge transfer is enabled by the use of pre-trained models that have already been trained on large datasets, which can then be adapted to a given task using only a few additional training examples. This is especially useful for tasks that do not have enough labeled data available, as the pre-trained model can act as a regularizer and help the model learn better.", "category": "Python"}, {"instruction": "Describe how reinforcement learning works.", "input": "", "output": "Reinforcement learning is a type of machine learning algorithm that allows an agent to learn from its environment through trial and error. The agent takes an action within a given environment and receives a reward or punishment based on its performance. The agent uses this feedback to adjust its actions over time in order to maximize its future reward. Reinforcement learning works by interacting with the environment in a loop, taking actions, observing the results, updating the agent's estimates of its values and adjusting its behavior.", "category": "Python"}, {"instruction": "Implement a function to traverse a binary tree in pre-order.", "input": "", "output": "def traverse_preorder(root):\n    if (root == None):\n        return\n    else:\n        print(root.val)\n        traverse_preorder(root.left)\n        traverse_preorder(root.right)", "category": "Python"}, {"instruction": "Design a function to convert a ternary tree to a doubly linked list.", "input": "", "output": "def convertTernaryTreeToDoublyLinkedList(root):\n    # Edge case\n    if (root == None):\n        return \n    \n    # Create two empty lists to hold left and right list of root\n    left = []\n    right = []\n    # Add root to left list that will hold left subtree\n    left.append(root.val)\n    # Store the value of the root for later use\n    val = root.val\n    # Recur to get the left and right lists of the left\n    # and right subtree\n    getLeft(root.left, left)\n    getRight(root.right, right)\n\n    # To see the linked list join the left and right lists\n    left.extend(right)\n\n    # Get the length of the list\n    length = len(left)\n\n    # Join the left and right list with the middle element\n    # of the root.\n    for i in range(length):\n        if i<length-1:\n            left[i].next = left[i+1]\n        else:\n            left[i].next = None\n        if i>0:\n            left[i].prev = left[i-1]\n        else:\n            left[i].prev = None\n    \n    # Return the list\n    return left\n\ndef getLeft(root, left):\n    # Iterative way to traverse and get all left subtree elements\n    if root:\n        left.append(root) \n        root = root.left\n        getLeft(root, left)\n\ndef getRight(root, right):\n    # Iterative way to traverse and get all right subtree elements\n    if root:\n        right.append(root)\n        root = root.right\n        getRight(root, right)", "category": "Python"}, {"instruction": "Explain the concept of parameter estimation in machine learning.", "input": "", "output": "Parameter estimation is the process of determining the optimal values for the parameters of a machine learning algorithm. The values that produce the best performance on the training data are typically used as the parameters for the model. By optimizing the parameters, the model can fit the data more accurately and lead to improved generalization performance. Parameter estimation can involve manual tuning, or the use of automated techniques such as grid search or stochastic optimization.", "category": "Python"}, {"instruction": "Explain the difference between unidirectional and bidirectional recurrent neural networks.", "input": "", "output": "A unidirectional recurrent neural network (RNN) accepts a single input and produces a single output. The input sequence is processed one step at a time and the output of each step depends only on the current input and the weights of the network. This type of network is often used in language models and other sequence-based predictions. \n\nIn contrast, a bidirectional recurrent neural network (BRNN) processes the input sequence in both the forward and backward directions. This allows the network to make use of both past and future context when making predictions. Additionally, it has the potential to learn longer-term dependencies since the state of the network is shared between both directions. This type of network is commonly used in areas like speech recognition and natural language understanding.", "category": "Python"}, {"instruction": "How can you convert a given list of integers into a comma-separated string in Python?", "input": "", "output": "We can use the join() method to convert a given list of integers into a comma-separated string in Python. The syntax for this method is as follows:\n\nlistOfIntegers = [1, 2, 3, 4] \ns = ','.join(str(e) for e in listOfIntegers)\nprint(s)", "category": "Python"}, {"instruction": "Generate five random numbers between 0 and 10 in Python.", "input": "", "output": "import random\nrandom.sample(range(0, 10), 5)", "category": "Python"}, {"instruction": "Create a program that can output the permutation of a given string.", "input": "Find the permutation of \u201cABC\u201d", "output": "def permutation(str):\n    if len(str) == 0:\n        return []\n    if len(str) == 1:\n        return [str]\n    lst = [] \n    for i in range(len(str)):\n       m = str[i] \n       remLst = permutation(str[:i] + str[i+1:])\n       for p in remLst:\n           lst.append([m] + p)\n    return lst\n\nif __name__ == \"__main__\":\n    str = \"ABC\"\n    print(permutation(str))", "category": "Python"}, {"instruction": "Design a program to find out how many times a pattern occurs in a given string.", "input": "Find the number of times \u201cquick\u201d occurs in \u201cThe quick brown fox jumps over the lazy dog.\u201d", "output": "def count_pattern(sentence, pattern):\n    count = 0\n    words = sentence.split(' ')\n    for word in words:\n        if word == pattern:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    sentence = \"The quick brown fox jumps over the lazy dog.\"\n    pattern = \"quick\"\n    print(count_pattern(sentence, pattern))", "category": "Python"}, {"instruction": "Write a code to extract the length of the longest sentence in a given text", "input": "Text: The quick brown fox jumps over the lazy dog. The quick fox jumped over the lazy dog.", "output": "def get_longest_sentence(text):\n    sentences = text.split('. ')\n    longest_sent_len = 0\n    longest_sent = ''\n    for sentence in sentences:\n        if len(sentence) > longest_sent_len:\n            longest_sent_len = len(sentence)\n            longest_sent = sentence\n    return longest_sent_len\n\n# Verify it works\ntext = 'The quick brown fox jumps over the lazy dog. The quick fox jumped over the lazy dog.'\nprint(get_longest_sentence(text))", "category": "Python"}, {"instruction": "Create a Python program that prints out a given list of numbers in reverse order.", "input": "[1, 2, 3, 4, 5]", "output": "for i in range(len(list) - 1, -1, -1):\n    print(list[i])", "category": "Python"}, {"instruction": "What are the three main principles of OOP?", "input": "", "output": "The three main principles of Object Oriented Programming (OOP) are encapsulation, inheritance, and polymorphism. Encapsulation is the process of wrapping data and functions together into one unit. Inheritance is the process of allowing a class to inherit the properties and behavior of a parent class. Polymorphism is the ability to define multiple versions of the same function or object depending on the context in which they are used.", "category": "Python"}, {"instruction": "Write pseudocode for the merge sort algorithm.", "input": "", "output": "Mergesort(A):\n  if A has 1 item : \n      return A\n  else\n      divide A into two parts (left and right) of roughly equal size\n      B = Mergesort(left)\n      C = Mergesort(right)\n      D = Merge(B,C)\n      return D\n\nMerge(B,C):\n  create an empty list D\n  while B and C are not empty:\n      if B[0] \u2264 C[0]:\n          add the first item of B to the end of D\n          remove the first item of B\n      else:\n          add the first item of C to the end of D\n          remove the first item of C\n  while B is not empty:\n      add the first item of B to the end of D\n      remove the first item of B\n  while C is not empty:\n      add the first item of C to the end of D\n      remove the first item of C\n  return D", "category": "Python"}, {"instruction": "Create a function to select the kth smallest item from a list.", "input": "lst = [3, 6, 8, 2, 10, 11]", "output": "# Create a function to select the kth smallest item from a list\ndef kth_smallest(lst, k):\n    sorted_lst = sorted(lst)\n\n    return sorted_lst[k - 1]\n\n# test the function\nitem = kth_smallest(lst, 4)\nprint(item) # Output: 8", "category": "Python"}, {"instruction": "Find all the even numbers in the given range.", "input": "min_num = 4\nmax_num = 17", "output": "# Find all the even numbers in the given range\neven_nums = [num for num in range(min_num, max_num + 1) if num % 2 == 0]\n\nprint(even_nums) # Output: [4, 6, 8, 10, 12, 14, 16]", "category": "Python"}, {"instruction": "Using a for loop, calculate the distance between one point to every other point in the given list.", "input": "points = [\n    (10, 20),\n    (12, 22),\n    (14, 24)\n]", "output": "# Using a for loop, calculate the distance between one point to every other point in the given list\nfrom math import sqrt\n\ndistances = []\nfor i in range(len(points)):\n    for j in range(len(points)):\n        if i != j:\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            distance = sqrt((x2 - x1)**2 + (y2 - y1)**2)\n            distances.append(distance)\n\nprint(distances)  # Output: [2.8284271247461903, 4.242640687119285, 2.8284271247461903]", "category": "Python"}, {"instruction": "Change the code using decorator to log how long the function runs.", "input": "def sum_function(a, b):\n    return a + b", "output": "import time\n\ndef log_time(func):\n    def inner(*args, **kwargs):\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time()\n\n        print(f'Function {func.__name__} took {end-start} sec to run')\n\n        return result\n    return inner\n\n@log_time\ndef sum_function(a, b):\n    return a + b", "category": "Python"}, {"instruction": "Extract the list of urls using the beautifulsoup library.", "input": "html_text = '''<html>\n  <body>\n    <h1>List Of URLs</h1>\n    <p>Here is a list of URLs:</p>\n    <ul>\n      <li><a href=\"http://example.com\">Example</a></li>\n      <li><a href=\"http://example2.com\">Example2</a></li>\n    </ul>\n  </body>\n</html>'''", "output": "# Extract the list of urls using the beautifulsoup library\nfrom bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(html_text, 'html.parser')\nurls = [link.get('href') for link in soup.find_all('a')]\n\nprint(urls) # Output: ['http://example.com', 'http://example2.com']", "category": "Python"}, {"instruction": "Group the given list of names into 3 different categories based on the first letter of the name.", "input": "names = [\"Adam\", \"Bill\", \"Brian\", \"Clarence\", \"Doug\", \"Emily\", \"Fred\", \"George\", \"Henry\"]", "output": "# Group the given list of names into 3 different categories based on the first letter of the name\n\ngroup1 = [name for name in names if name[0] in ['A', 'B', 'C']]\ngroup2 = [name for name in names if name[0] in ['D', 'E', 'F']]\ngroup3 = [name for name in names if name[0] in ['G', 'H']]\n\nprint(group1) # Output: ['Adam', 'Bill', 'Brian', 'Clarence']\nprint(group2) # Output: ['Doug', 'Emily', 'Fred'] \nprint(group3) # Output: ['George', 'Henry']", "category": "Python"}, {"instruction": "Find the probability of a random variable following a normal distribution with a mean of 10 and a standard deviation of 2.", "input": "x = 12", "output": "# Find the probability of a random variable following a normal distribution with a mean of 10 and a standard deviation of 2.\nfrom scipy.stats import norm\n\nprob = norm.pdf(x, 10, 2)\n\nprint(prob) # Output: 0.17603266338214976", "category": "Python"}, {"instruction": "Sum the numbers in the given array using reduce.", "input": "numbers = [1, 2, 3, 4, 5]", "output": "# Sum the numbers in the given array using reduce\nfrom functools import reduce\n\nsum = reduce(lambda x, y: x + y, numbers)\n\nprint(sum) # Output: 15", "category": "Python"}, {"instruction": "Sort the data using heap sort.", "input": "data = [12, 11, 15, 10, 9, 1, 2, 3, 13, 14, 4, 5, 6, 7, 8]", "output": "def heap_sort(data):  \n    # Create an empty Max Heap\n    max_heap = MaxHeap() \n    # Add elements to the Max Heap\n    for element in data:\n        max_heap.insert(element)\n    \n    sorted_data = []\n    while max_heap.count > 0:\n        # Pop the Maximum element from the Max Heap\n        maximum = max_heap.extract_max()\n        sorted_data.append(maximum)\n \n    return sorted_data\n\nsorted_data = heap_sort(data)\nprint(sorted_data) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]", "category": "Python"}, {"instruction": "Create a function in Python that takes two parameters, x and y, and prints out all numbers between x and y.", "input": "", "output": "def display_numbers(x, y):\n  for i in range(x,y+1):\n    print(i)", "category": "Python"}, {"instruction": "Debug the following code and explain why it gave an error.", "input": "def sum(a, b):\n    try:\n      return a + b\n    except TypeError: \n        return \"inputs should be numbers\"\n    finally:\n        print(\"This function has successfully executed\")\noutput = sum(1, '2')", "output": "The code gave an error because a TypeError was raised due to trying to add an integer and a string. The error can be resolved by adding type-checking in the code: \n\ndef sum(a, b):\n    try:\n      if type(a) == int and type(b) == int:\n        return a + b\n      else:\n        return \"inputs should be numbers\"\n    except TypeError: \n        return \"inputs should be numbers\"\n    finally:\n        print(\"This function has successfully executed\")\noutput = sum(1, '2')", "category": "Python"}, {"instruction": "Write a function to delete redundant items from a list.", "input": "[3, 2, 1, 3, 5, 6, 3, 2]", "output": "def delete_redundant_items(list_param):\n    \"\"\"\n    Function to delete redundant items from a list\n    \"\"\"\n    result_list = []\n    for item in list_param:\n        if item not in result_list:\n            result_list.append(item)\n    return result_list", "category": "Python"}, {"instruction": "Create a function that takes a string of brackets and checks if they are correctly matched or not.", "input": "", "output": "def check_brackets(bracket_string):\n    \"\"\"\n    Function that checks if bracket string is correctly matched.\n    \"\"\"\n    stack = []\n    open_brackets = {'[', '{', '('}\n    close_brackets = {']', '}', ')'}\n    \n    for bracket in bracket_string:\n        if bracket in open_brackets:\n            stack.append(bracket)\n        elif bracket in close_brackets:\n            if not stack or close_brackets[bracket] != stack.pop():\n                return False\n        \n    return not stack", "category": "Python"}, {"instruction": "Implement a function that prints n asterisk characters in a row.", "input": "", "output": "def print_asterisks(n):\n  for i in range(n): \n    print(\"*\", end=\"\")\n  print()", "category": "Python"}, {"instruction": "How would you store the values of this array of dictionaries in a database?", "input": "[\n {'name': 'John', 'age': 28},\n {'name': 'Marry', 'age': 27},\n {'name': 'David', 'age': 30}\n]", "output": "The values of the array of dictionaries can be stored in a database using an SQL query. The query would create a table with columns for each key in the dictionaries and then store the values in their respective columns. For each dictionary, an INSERT query would be run to add the values of that dictionary to database.", "category": "Python"}, {"instruction": "Write a Python program to create a nested dictionary from two lists.", "input": "l1 = ['a', 'b', 'c'] \nl2 = [1, 2, 3]", "output": "{'a': 1, 'b': 2, 'c': 3}", "category": "Python"}, {"instruction": "Suggest a data structure in Python to store a list of countries and their capitals.", "input": "", "output": "A dictionary can be used to store a list of countries and their respective capitals. The key for each country should be the name of the country and the value should be its capital city. For example: \n\ndict = {\n    'India': 'New Delhi',\n    'China': 'Beijing', \n    'UK': 'London'\n}", "category": "Python"}, {"instruction": "What could be a use case of a 'while' loop in Python?", "input": "", "output": "A while loop can be used to iterate over a sequence or perform a computation until a specific condition is met. For example, it can be used to generate a list of prime numbers, where it would check if the current number is a prime number by checking if its divisible by any of the already discovered primes before it.", "category": "Python"}, {"instruction": "Name one benefit of using a function in Python.", "input": "", "output": "One of the key benefits of using functions in Python is code reusability. Functions help reduce the code duplication and promote code readability by allowing us to store and reuse code in a single place. This makes it easier for us to debug and modify existing code. Furthermore, functions can help reduce the cognitive load and effort required to understand the code. As functions encapsulate related code blocks, we can focus on the logic contained within the function instead of worrying about unrelated code.", "category": "Python"}, {"instruction": "Create a python class with a method to generate the following table format", "input": "", "output": "class Table_Generator:\n    def generate_table(self):\n        print('+---------+--------+--------+')\n        print('|   S.No  |  Name  |  Age   |')\n        print('+---------+--------+--------+')", "category": "Python"}, {"instruction": "Create a validation function to check if the inputed string contains any numbers.", "input": "", "output": "import re\n\ndef validate_string(input_str):\n    pattern = r\"\\d\"\n    if re.search(pattern, input_str):\n        return False\n    else:\n        return True", "category": "Python"}, {"instruction": "Explain the concept of Convolutional Neural Networks.", "input": "", "output": "Convolutional Neural Networks (CNNs) are a type of deep learning neural network used primarily in image processing, computer vision, and natural language processing tasks. CNNs utilize a grid of neurons that learn to extract relevant features from an input, such as patterns or shapes, known as filters. This allows CNNs to perform hierarchical feature extraction from input data, which is useful in areas where the data has a nonlinear or highly structured nature. CNNs can be used to classify images, detect objects in images, extract features from audio and video signals, and much more.", "category": "Python"}, {"instruction": "Create a Python module for extracting the sum of all digits of an integer.", "input": "", "output": "def digit_sum(number):\n    if number == 0:\n        return 0\n    return (number % 10) + digit_sum(number // 10)", "category": "Python"}, {"instruction": "Write a Python program to get the volume of a sphere with a given radius.", "input": "", "output": "import math\n\ndef sphere_volume(radius):\n    return (4*math.pi*radius*radius*radius)/3", "category": "Python"}, {"instruction": "Design an algorithm to retrieve the longest word from an array of strings.", "input": "[\u2018Hello\u2019, \u2018World\u2019, \u2018This\u2019, \u2018is\u2019, \u2018a\u2019, \u2018code\u2019]", "output": "def get_longest_word(strings):\n    longest_word = ''\n    for s in strings:\n        if len(s) > len(longest_word):\n            longest_word = s\n    return longest_word", "category": "Python"}, {"instruction": "Write a function to encode a given string using ROT13 cipher.", "input": "String: Hello world", "output": "def rot13(string):\n    encoded = \"\"\n    for char in string:\n        if char.isalpha():\n            ascii_val = ord(char)\n            ascii_val += 13\n            if ascii_val > ord('z'):\n                ascii_val -= 26\n            encoded += chr(ascii_val)\n        else:\n            encoded += char\n    return encoded", "category": "Python"}, {"instruction": "Write a function to generate the next line of Pascal's Triangle given the parent line.", "input": "Parent line: [1, 2, 1]", "output": "def next_pascals_triangle(parent):\n    next_line = [1]\n    for i in range(len(parent)-1):\n        next_line.append(parent[i] + parent[i+1])\n    next_line.append(1)\n    return next_line", "category": "Python"}, {"instruction": "Create a function to print out a FizzBuzz pattern for a given number range.", "input": "Number range: 5-20", "output": "def fizzbuzz_pattern(n):\n    for num in range(n, n+16):\n        if num % 3 == 0 and num % 5 == 0:\n            print(\"FizzBuzz\")\n        elif num % 3 == 0:\n            print(\"Fizz\")\n        elif num % 5 == 0:\n            print(\"Buzz\")\n        else:\n            print(num)", "category": "Python"}, {"instruction": "Write code to convert a given hexadecimal string to a binary string.", "input": "Hexadecimal string: 7468", "output": "def hex_to_bin(hexadecimal_str):\n    return bin(int(hexadecimal_str, 16))[2:] # [2:] removes 0b from the start", "category": "Python"}, {"instruction": "Write code to return a list of prime numbers in the given range.", "input": "Start: 10. End: 15", "output": "def get_prime_numbers(start, end):\n    prime_numbers = []\n    for num in range(start, end + 1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                prime_numbers.append(num)\n    return prime_numbers\n    \n# print list of prime numbers\nprint(get_prime_numbers(10, 15))  \n# Output: [11, 13, 15]", "category": "Python"}, {"instruction": "For a given array of integers, write a function to find the mean.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def calculate_mean(arr):\n    return sum(arr) / len(arr)\n    \n# Driver Code \nif __name__ == '__main__': \n    arr = [1, 2, 3, 4, 5]\n    mean = calculate_mean(arr)\n    print(\"Mean for given array is:\", mean)", "category": "Python"}, {"instruction": "Calculate the number of anagrams present in a given string.", "input": "string = \"listen\"", "output": "def calculateAnagrams(string): \n   \n    # Create a list of all permutations \n    all_permutations = [''.join(i) for i in permutations(string)] \n   \n    # Return the count of all permutations \n    return len(all_permutations) \n  \n# Driver code \nprint(calculateAnagrams('listen'))", "category": "Python"}, {"instruction": "Write an algorithm to check whether a given word is palindrome or not.", "input": "", "output": "def is_palindrome(str):\n    # reverse the string \n    rev_str = str[::-1] \n  \n    # if string is equal then return true \n    if rev_str == str: \n        return True\n    return False", "category": "Python"}, {"instruction": "Name a few use cases of Convolutional Neural Networks.", "input": "", "output": "Convolutional Neural Networks are widely used in domains such as computer vision, natural language processing, pattern recognition, time series analysis, audio processing, object recognition and classification, and for other tasks such as image segmentation, automated image captioning, image deblurring, object detection and tracking.", "category": "Python"}, {"instruction": "Give a few examples of when to use a Stack data structure.", "input": "", "output": "A stack data structure can be used for a variety of tasks, such as for traversal of a recursive object, storing and retrieving data from a history buffer, expression evaluation, and undo and redo operations. Another common use case is storage of a continuous stream of data, such as a rolling list of recent purchases.", "category": "Python"}, {"instruction": "Create a program that takes in a list of numbers and returns the product of all the elements in the list.", "input": "[2, 4, 10, 5]", "output": "def product(nums):\n  total = 1\n  for num in nums:\n    total *= num\n  return total", "category": "Python"}, {"instruction": "Create a function to filter out any strings containing the word \"the\" from a list of strings.", "input": "", "output": "def filter_the(string_list):\n    filtered_list = []\n    for string in string_list:\n        if \"the\" not in string:\n            filtered_list.append(string)\n    return filtered_list", "category": "Python"}, {"instruction": "Create a function to remove all the characters in a string except a-z, A-Z and 0-9.", "input": "", "output": "def remove_non_alphanumeric(string):\n    filtered_string = \"\"\n    for char in string:\n        if char.isalnum():\n            filtered_string += char\n    return filtered_string", "category": "Python"}, {"instruction": "Complete the following code to find the longest word in the given string.", "input": "def longest_word(sentence):", "output": "def longest_word(sentence):\n    words = sentence.split()\n    longest_word = ''\n    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n            longest_word = word\n    return longest_word", "category": "Python"}, {"instruction": "Complete the following code to print a 2D array passed as parameter.", "input": "def print2Dlist (list) :", "output": "def print2Dlist (list) :\n\tfor row in list:\n\t\tfor element in row:\n\t\t\tprint (element, end=\" \") \n\t\tprint ()", "category": "Python"}, {"instruction": "Design a python class for a dog to print its name and age when given.", "input": "Ginger, 3", "output": "class Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def get_name(self):\n        return self.name\n\n    def get_age(self):\n        return self.age\n\ndog = Dog('Ginger', 3)\nprint(dog.get_name())\nprint(dog.get_age())", "category": "Python"}, {"instruction": "Create a UUID in Python.", "input": "", "output": "import uuid\n\nprint(uuid.uuid4())", "category": "Python"}, {"instruction": "Create a class in Python named 'Car' and implement a method that shows the current speed of the car.", "input": "", "output": "class Car():\n    def __init__(self, speed):\n        self.speed = speed\n\n    def show_speed(self):\n        print(\"The current speed is:\", self.speed)", "category": "Python"}, {"instruction": "Create a function that identifies the type of a value", "input": "", "output": "def identify_value_type(val):\n    if type(val) is int:\n        return 'int'\n    elif type(val) is float:\n        return 'float'\n    elif type(val) is str:\n        return 'str'\n    elif type(val) is list:\n        return 'list'\n    elif type(val) is dict:\n        return 'dict'", "category": "Python"}, {"instruction": "From a given string, count the number of unique characters", "input": "", "output": "def count_unique_chars(s):\n    chars = set()\n    for char in s:\n        chars.add(char)\n    return len(chars)", "category": "Python"}, {"instruction": "Are ternary operators fast in Python?", "input": "", "output": "Ternary operators are often faster than if/else statements in Python, as they can reduce the amount of code and conditionals needed. However, there are some cases where an if/else statement may be faster, such as when there are multiple conditions that need to be checked.", "category": "Python"}, {"instruction": "Compute the sum of two give two-dimensional arrays.", "input": "array1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\narray2 = [[1, 3, 5], [2, 4, 6], [7, 8, 9]]", "output": "def matrix_sum(a, b):\n    result = [[0 for d in range(len(a))] for d in range(len(a[0]))]\n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            result[i][j] = a[i][j] + b[i][j]\n    return result", "category": "Python"}, {"instruction": "Edit the following code for optimal performance.", "input": "def sum_nums():\n    result = 0 \n    for i in range(10):\n        result += i\n    return result", "output": "def sum_nums():\n    result = 0\n    n = 10\n    while n > 0:\n        result += (n - 1)\n        n -= 1\n    return result", "category": "Python"}, {"instruction": "Write a Python function to print a multiplication table of size 10.", "input": "", "output": "def print_multiplication_table(size):\n    for i in range(1, size+1):\n        for j in range(1, size+1):\n            print(i*j, end=\"\\t\")\n        print(\"\\r\")\n \nprint_multiplication_table(10)", "category": "Python"}, {"instruction": "Code a program to display the prime factors of a number.", "input": "30", "output": "def find_prime_factors(n):\n prime_factors = []\n for i in range(2, n + 1):\n if n % i == 0:\n if is_prime(i):\n prime_factors.append(i)\n return prime_factors\n\ndef is_prime(n):\n if n <= 1:\n return False\n for i in range(2, int(n**0.5) + 1):\n if n % i == 0:\n return False\n return True", "category": "Python"}, {"instruction": "Create a function that can detect if a word is a palindrome.", "input": "Word: racecar", "output": "def isPalindrome(string): \n    left = 0\n    right = len(string) - 1\n  \n    while right >= left:\n        if not string[left] == string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n\n# Test program\nisPalindrome(\"racecar\")\n\n# Output\n# True", "category": "Python"}, {"instruction": "Convert a string to its inverse form.", "input": "String: \"Hello World!\"", "output": "def string_inverse(string): \n    inverse_string = \"\"\n    for i in range(len(string)-1, -1, -1):\n        inverse_string += string[i]\n    return inverse_string\n\n# Test program\nstring = \"Hello World!\"\ninverse_string = string_inverse(string)\n\nprint(\"Original String: %s\" % string)\nprint(\"Inverse String: %s\" % inverse_string)\n\n# Output\n# Original String: Hello World!\n# Inverse String: !dlroW olleH", "category": "Python"}, {"instruction": "Write a function in Python that takes a number, x, and returns True if the number is even or False if the number is odd.", "input": "", "output": "def is_even(x):\n   return x%2 == 0", "category": "Python"}, {"instruction": "Build a function to detect if a provided number is prime.", "input": "", "output": "def is_prime(num):\n    if num <= 1: \n        return False\n    for i in range(2, num): \n        if num % i == 0: \n            return False\n    return True", "category": "Python"}, {"instruction": "Create a Python function to print a Fibonacci sequence up to n number of digits.", "input": "", "output": "def fib(n):\n a,b = 0,1\n while a<n:\n  print(a, end=' ')\n  a,b = b,a+b\n print()", "category": "Python"}, {"instruction": "Write a function in Python that takes a character (i.e. a string of length 1) and returns True if it is a vowel, False otherwise.", "input": "", "output": "def is_vowel(char):\n    vowels = 'aeiou'\n    return char in vowels", "category": "Python"}, {"instruction": "Create a function in Python which takes a list and finds the second highest number in it.", "input": "arr = [2, 3, 1, 5, 4]", "output": "def second_highest_num(arr):\n  arr.sort()\n  return arr[-2]", "category": "Python"}, {"instruction": "Create a class that represents a circle", "input": "radius = 5.5", "output": "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    def area(self):\n        return self.radius * self.radius * 3.14\n\nc = Circle(radius) \nprint(c.area())  # Output: 95.033", "category": "Python"}, {"instruction": "Deconstruct this line of Python code and explain what it does", "input": "y = [x**2 for x in range(10)]", "output": "This line of code is a Python List Comprehension, it will iterate through the range of 0 to 9 and square each of those numbers and add them to a new list 'y'. The list will contain the squares of the numbers 0 to 9, i.e. [0, 1, 4, 9, 16, 25, 36, 49, 64, 81].", "category": "Python"}, {"instruction": "Write a function that can generate all permutations of a given string.", "input": "string = \"ABC\"", "output": "def permute(string):\n    if len(string) == 1:\n        return [string] \n\n    prevList = permute(string[1:]) \n\n    nextList = [] \n    for i in range(len(prevList)): \n        for j in range(len(string)): \n            newString = prevList[i][:j] + string[0:1] + prevList[i][j:] \n            if newString not in nextList: \n                nextList.append(newString) \n    return nextList", "category": "Python"}, {"instruction": "Write a function that can split an array into two equally-sized subarrays.", "input": "arr = [1, 2, 3, 4, 5, 6]", "output": "def split_array(arr):\n    if len(arr) % 2 != 0:\n        return False\n\n    mid = len(arr)// 2\n    left_arr = arr[:mid]\n    right_arr = arr[mid:]\n\n    return [left_arr, right_arr]", "category": "Python"}, {"instruction": "Write a function to replace the Kth smallest number in integer array with 0.", "input": "nums = [2, 9, 8, 11, 5]\nK = 3", "output": "def replace_kth_smallest(nums, k):\n    min_num = min(nums)\n    min_count = nums.count(min_num)\n    if k > min_count:\n        k -= min_count\n        nums.remove(min_num)\n    nums[k-1] = 0\n    return nums", "category": "Python"}, {"instruction": "Create a Python program which takes a sentence and prints back the words in reverse order", "input": "", "output": "def reverse_words(sentence):\n  words = sentence.split()\n  words.reverse()\n  return ' '.join(words)", "category": "Python"}, {"instruction": "Write a Python function that takes two strings and returns the longest common subsequence.", "input": "str1 = \"AGGTAB\"\nstr2 = \"GXTXAYB\"", "output": "def LongestCommonSubsequence(str1, str2):\n    n = len(str1)\n    m = len(str2)\n    t = [[0 for j in range(m+1)] for i in range(n+1)]\n    \n    for i in range(1, n+1): \n        for j in range(1, m+1):  \n            if str1[i-1] == str2[j-1]: \n                t[i][j] = 1 + t[i-1][j-1] \n            else: \n                t[i][j] = max(t[i-1][j], t[i][j-1])   \n    return t[n][m]", "category": "Python"}, {"instruction": "Write a python regex pattern to filter the following list of strings.", "input": "string_list = ['ABC1', 'DEF2', 'GHI3', 'ABC4', 'JKL5']", "output": "import re \n  \nstring_list = ['ABC1', 'DEF2', 'GHI3', 'ABC4', 'JKL5']\nfiltered_list = list(filter(lambda x: re.search('^[A-Z]{3}[0-9]$',x), string_list)) \n\nprint(filtered_list) \n \n# Output: ['ABC1', 'DEF2', 'GHI3']", "category": "Python"}, {"instruction": "Add code to make an API call using a library to a given JSON endpoint and retrieve the data.", "input": "API URL: https://example.com/endpoint/data", "output": "import requests\n \nurl = \"https://example.com/endpoint/data\"\nresponse = requests.get(url)\ndata = response.json()", "category": "Python"}, {"instruction": "Code a function to generate a random string of 10 randomly selected characters.", "input": "", "output": "import string\nimport random\n\ndef generate_random_string():\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(10))\n\nrandom_string = generate_random_string()", "category": "Python"}, {"instruction": "What is the difference between compile-time and run-time errors?", "input": "", "output": "Compile-time errors occur when code does not conform to the syntax specified by the programming language, and usually prevent the code from being executed. Run-time errors occur when code is syntactically correct, but there are still problems executing the code. Run-time errors typically occur at the point where code is executed, as opposed to compile-time errors which occur at the point of compilation. The types of errors usually depend on the type of language used for programming. For example, compiling Java code with a C++ compiler would cause a compile-time error since the two languages have different syntaxes.", "category": "Python"}, {"instruction": "Write a function in Python that takes a list and returns the one with all negative numbers sorted in ascending order.", "input": "[3, -4, 1, -2]", "output": "def remove_negative_numbers(lst):\n  negative = []\n  for x in lst:\n    if x < 0:\n      negative.append(x)\n  return sorted(negative)", "category": "Python"}, {"instruction": "What is the reuse principle in software engineering?", "input": "", "output": "The reuse principle in software engineering states that software components should be written and designed for reuse in other software components and systems. This can save developers time and money when developing software, since they can use existing components to build new functions and features into their software products. Additionally, it helps promote consistent coding, makes debugging easier, and reduces the risk of introducing bugs and other errors.", "category": "Python"}, {"instruction": "Fill in the blanks of the following Python code to implement a Selection Sort algorithm.", "input": "def selection_sort(arr):\n    for [i] in [range](len(arr),1,-1):\n        max_element=arr[0]\n        for [j] in [range]([i]):\n            if arr[j] > max_element :\n                max_element=arr[j]\n          \n        [temp] = arr[i]\n        arr[i] = max_element\n        arr[arr.index(max_element)] = [temp]", "output": "def selection_sort(arr):\n    for i in range(len(arr),1,-1):\n        max_element=arr[0]\n        for j in range(i):\n            if arr[j] > max_element :\n                max_element=arr[j]\n          \n        temp = arr[i-1]\n        arr[i-1] = max_element\n        arr[arr.index(max_element)] = temp", "category": "Python"}, {"instruction": "Create a graphical user interface using Python to perform the following function", "input": "Take two inputs from the user: a name and an age", "output": "import tkinter \n  \n# Create an instance of tkinter \nroot = tkinter.Tk()  \n  \n# Create two lables and two input boxes \nname_label = tkinter.Label(root, text ='Name: ')   \nage_label = tkinter.Label(root, text ='Age: ') \nname_entry = tkinter.Entry(root) \nage_entry = tkinter.Entry(root) \n  \n# Place the labels,entry boxes in the desired layout \nname_label.grid(row = 0, column = 0)   \nname_entry.grid(row = 0, column = 1)  \nage_label.grid(row = 1, column = 0)   \nage_entry.grid(row = 1, column = 1) \n  \nroot.mainloop()", "category": "Python"}, {"instruction": "Write a correct implementation of the following algorithm", "input": "Binary search for an element x in a sorted array", "output": "def binary_search(arr, x): \n    low = 0\n    high = len(arr) - 1\n    while low <= high: \n        mid = (high+low)//2\n        if arr[mid] < x: \n            low = mid + 1\n        elif arr[mid] > x: \n            high = mid - 1\n        else: \n            return mid \n  \n    return -1", "category": "Python"}, {"instruction": "Write a function to calculate the number of letter and non-letter characters in a string.", "input": "Input: 'If These Hills'", "output": "def numberOfLettersAndNonLetterCharacters(string):\n    count_characters = 0\n    count_non_characters = 0\n    \n    for char in string:\n        if char.isalpha():\n            count_characters += 1\n        else:\n            count_non_characters += 1\n    return (count_characters, count_non_characters)\n\nprint(numberOfLettersAndNonLetterCharacters('If These Hills'))", "category": "Python"}, {"instruction": "Explain what boolean operators are and what do they do.", "input": "", "output": "Boolean operators are logical operators which allow us to connect two or more conditions in a statement. These operators return a boolean value when evaluates multiple conditions or objects. The three main boolean operators are AND, OR, NOT. The AND operator returns true if both conditions are true, OR operator if any one of the condition is true and NOT operator returns true only if the condition is false.", "category": "Python"}, {"instruction": "Generate a function in Python which takes a list and sorts the list elements in ascending order", "input": "", "output": "def sort_ascending(nums):\n  return sorted(nums)", "category": "Python"}, {"instruction": "Write a Python program to print the calendar of a given month and year", "input": "", "output": "import calendar\n\ndef get_calendar(month, year):\n  return calendar.month(year, month)", "category": "Python"}, {"instruction": "Write code to search for a number in a sorted array.", "input": "", "output": "def binary_search(list, target):\n    low = 0\n    high = len(list)-1\n    while low <= high:\n        mid = (low + high) // 2\n        if list[mid] == target:\n            return mid\n        if list[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1", "category": "Python"}, {"instruction": "Find all substring of a string.", "input": "String: \"abcdefg\"", "output": "# function to find all the substrings of a given string  \ndef substr(string):  \n    length = len(string) \n  \n    # Weighted Index of the string  \n    w_index = 0\n      \n    list_substr = [] \n  \n    # Run a loop from 0 to n-1 \n    while w_index < length: \n  \n        # Run inner loop from w_index + 1 to n  \n        s_index = w_index + 1\n        while s_index < length + 1: \n            list_substr.append(string[w_index:s_index])\n            s_index += 1\n          \n        w_index += 1\n          \n    return list_substr\n\n# Test program \ns = \"abcdefg\"\nprint(substr(s)) \n\n# Output\n# ['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'b', 'bc', 'bcd', 'bcde', 'bcdef', 'bcdefg', 'c', 'cd', 'cde', 'cdef', 'cdefg', 'd', 'de', 'def', 'defg', 'e', 'ef', 'efg', 'f', 'fg', 'g']", "category": "Python"}, {"instruction": "Use the NumPy package to multiply two matrices.", "input": "Matrix1: [[1, 2], [3, 4]]\nMatrix2: [[2, 3], [4, 5]]", "output": "import numpy as np\n \nmatrix1 = np.array([[1, 2], [3, 4]])\nmatrix2 = np.array([[2, 3], [4, 5]])\n \nproduct = np.matmul(matrix1, matrix2)\nprint(product)\n\n# Output\n# array([[10, 13],\n#        [22, 29]])", "category": "Python"}, {"instruction": "Create a machine learning classifier that can classify the sentiment of a text.", "input": "Text: This product is really bad", "output": "# import required libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Read the data into a Pandas DataFrame\ndata = pd.read_csv('data.csv')\n\n# Convert the Labels (Positive/Negative) to numbers\ndata['Sentiment'] = [1 if sentiment == 'Positive' else 0 for sentiment in data['Sentiment']]\n\n# Create the feature matrix\ncount_vectorizer = CountVectorizer()\nX = count_vectorizer.fit_transform(data['Text'])\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, data['Sentiment'], test_size=0.20, random_state=42)\n\n# Train a Multinomial Naive Bayes Classifier\nclf = MultinomialNB().fit(X_train, y_train)\n\n# Use the Classifier to predict the label of the input text\nprediction = clf.predict(count_vectorizer.transform([\"This product is really bad\"]))[0]\n\nif prediction == 1:\n    print(\"Positive\")\nelse:\n    print(\"Negative\")", "category": "Python"}, {"instruction": "Create a class in Python to represent a rectangle with the attributes width, height, and area.", "input": "", "output": "class Rectangle:\n  def __init__(self, width, height):\n    self.width = width\n    self.height = height\n    self.area = width * height", "category": "Python"}, {"instruction": "How do I create a function that sums two integers in Python?", "input": "", "output": "def add_two_ints(a, b):\n    return a + b", "category": "Python"}, {"instruction": "Create a class called \"IDgenerator\" that generates a list of unique random numbers between a given range.", "input": "", "output": "import random\n\nclass IDGenerator:\n    def __init__(self, min_val, max_val):\n        self.min_val = min_val\n        self.max_val = max_val\n        self.ids = []\n\n    def generate(self):\n        rand_int = random.randint(self.min_val, self.max_val)\n        while rand_int in self.ids:\n            rand_int = random.randint(self.min_val, self.max_val)\n        self.ids.append(rand_int)\n        return rand_int", "category": "Python"}, {"instruction": "Design a tree data structure to store employee records in an organization.", "input": "", "output": "class EmployeeTree:\n    def __init__(self, name):\n        self.name = name\n        self.children = []\n\n    # add a sub-employee to the tree\n    def add_child(self, name):\n        self.children.append(EmployeeTree(name))\n\n    # remove a sub-employee from the tree\n    def remove_child(self, name):\n        for child in self.children:\n            if child.name == name:\n                self.children.remove(child)", "category": "Python"}, {"instruction": "Write a Python code to find the number of vowels in a provided string.", "input": "string = \"Hello, World!\"", "output": "# Count the number of vowels in the string\nnum_vowels = 0\nfor char in string:\n    if char in 'aeiouAEIOU':\n        num_vowels += 1\n\nprint(\"Number of vowels:\", num_vowels)", "category": "Python"}, {"instruction": "Write a python code to check for a number being prime or not.", "input": "num = 11", "output": "# Initialize a boolean no_prime\nno_prime = False\n\n# Check all numbers lower than num\nfor i in range(2, num):\n    if num % i == 0: \n        no_prime = True\n        break \n\n# Print the appropriate output\nif no_prime:\n    print(num, 'is not prime')\nelse:\n    print(num, 'is prime')", "category": "Python"}, {"instruction": "Write a python code snippet to square the number 12.", "input": "", "output": "x = 12\ny = x**2\nprint(y)", "category": "Python"}, {"instruction": "Edit the code to fix the following bug: The code doesn't return the expected output.", "input": "def sum(numbers):\n    x = 0\n    for n in numbers:\n        x += n\n    return x", "output": "def sum(numbers):\n    x = 0\n    for n in numbers:\n        x += n\n    return int(x)", "category": "Python"}, {"instruction": "Sort a given array according to the given criteria", "input": "[1, 20, 12, 15, 5], 'desc'", "output": "def sort_array(arr, order):\n    if order == 'asc': \n        arr.sort() \n    else: \n        arr.sort(reverse=True) \n    return arr \n\narr = [1, 20, 12, 15, 5] \norder = 'desc'\n\nprint(sort_array(arr, order))\n# Output: [20, 15, 12, 5, 1]", "category": "Python"}, {"instruction": "You need to write a function to find the index of a value in an array", "input": "[1, 2, 3, 4], 3", "output": "def find_index(arr, val):\n    for index, elem in enumerate(arr):\n        if val == elem:\n            return index\n    return -1\n\nprint(find_index([1, 2, 3, 4], 3))\n# Output: 2", "category": "Python"}, {"instruction": "Determine whether a given number is an armstrong number or not", "input": "153", "output": "def is_armstrong_number(num):\n  digits = [int(x) for x in str(num)]\n  sum_ = 0\n  for digit in digits:\n    sum_ += pow(digit, len(digits))\n  return num == sum_\n\nprint(is_armstrong_number(153))\n# Output: True", "category": "Python"}, {"instruction": "Generate a list of prime numbers", "input": "", "output": "def generate_primes(n):\n    prime_list = []\n    for num in range(2, n + 1): \n        if all(num % i != 0 for i in range(2, num)): # check if num is prime\n            prime_list.append(num)\n    return prime_list", "category": "Python"}, {"instruction": "Rewrite the following code in a more efficient way, keeping the same logic:", "input": "for i in range(len(lst)-1):\n    for j in range(i+1, len(lst)):\n        if lst[i]==lst[j]:\n            return True", "output": "def find_duplicate(lst):\n    seen = set()\n    for elem in lst:\n        if elem in seen:\n            return True\n        seen.add(elem)\n    return False", "category": "Python"}, {"instruction": "Create a module in Python to read webpages into the program", "input": "", "output": "import urllib\n\ndef read_webpage(url):\n    with urllib.request.urlopen(url) as response:\n        return response.read()", "category": "Python"}, {"instruction": "Write a Python program to calculate the frequency of each element in a given list.", "input": "mylist = [2, 3, 4, 2, 3, 5, 6, 7]", "output": "def frequency_count(mylist):\n    freq = {}\n    for element in mylist:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return freq\n    \nprint(frequency_count(mylist)) # output {2: 2, 3: 2, 4: 1, 5: 1, 6: 1, 7: 1}", "category": "Python"}, {"instruction": "Identify the correct code to execute an API call with the python requests library.", "input": "", "output": "import requests\n \nresponse = requests.get('http://example.com/api')", "category": "Python"}, {"instruction": "Create an API endpoint that takes two inputs (phone number and name) and updates contact details in the database.", "input": "", "output": "@app.route(\"/api/update_contact_details\", methods=['PUT'])\ndef update_contact_details():\n    # Get the inputs from the request body\n    phone_number = request.json['phone_number']\n    name = request.json['name']\n    # Query the database\n    db.execute(\"UPDATE contacts SET name = '{name}' WHERE phone = '{phone_number}'\".format(name=name, phone_number=phone_number))\n    return jsonify(status=\"success\")", "category": "Python"}, {"instruction": "Write a Python code snippet that checks if all elements in the input list are equal.", "input": "[10, 10, 10]", "output": "all_equal = all(x == 10 for x in [10, 10, 10])", "category": "Python"}, {"instruction": "Write a function to print out all possible permutations of a list of numbers.", "input": "list = [1, 2, 3]", "output": "def permutations(list): \n    if len(list) == 0: \n        return [] \n    if len(list) == 1: \n        return [list]\n    l = [] #empty list \n  \n    for i in range(len(list)): \n        m = list[i] \n        remList = list[:i] + list[i+1:] \n        for p in permutations(remList): \n            l.append([m] + p) \n    return l", "category": "Python"}, {"instruction": "Create a BST with two data elements 10 and 15.", "input": "", "output": "class Node:\n    def __init__(self, data):\n        self.data = data \n        self.left = None\n        self.right = None\n\nclass BST:\n    def __init__(self):\n        self.root = None\n  \n  \n    def insert(self, value):\n        if self.root is None:\n            self.root = Node(value)\n        else:\n            self._insert(value, self.root)\n  \n    def _insert(self, value, cur_node):\n        if value < cur_node.data:\n            if cur_node.left is None:\n                cur_node.left = Node(value)\n            else:\n                self._insert(value, cur_node.left)\n        elif value >= cur_node.data:\n            if cur_node.right is None:\n                cur_node.right = Node(value)\n            else:\n                self._insert(value, cur_node.right)\n        else:\n            pass \n\nbst = BST()\nbst.insert(10)\nbst.insert(15)", "category": "Python"}, {"instruction": "Create a print statement that will print out a formatted table containing the elements of a 2D list.", "input": "2D List: [[1,2,3], [4,5,6], [7,8,9]]", "output": "# Get the list\ntwoD_list = [[1,2,3], [4,5,6], [7,8,9]]\n\n# Print it out as a table\nfor row in twoD_list:\n    for val in row:\n        print('{:4}'.format(val), end=\"\")\n    print()\n\n# Output\n#   1   2   3\n#   4   5   6\n#   7   8   9", "category": "Python"}, {"instruction": "Given a binary tree, write a program to calculate the sum of all its nodes.", "input": "", "output": "def calculateSumOfBinaryTree(root):\n    if root == None:\n        return 0\n    else:\n        return root.data + calculateSumOfBinaryTree(root.left) + calculateSumOfBinaryTree(root.right)", "category": "Python"}, {"instruction": "Develop a code to check if a given array is sorted or not.", "input": "[1, 2, 4, 3]", "output": "def is_sorted(array):\n for i in range(len(array)-1):\n if array[i] > array[i+1]:\n return False\n return True", "category": "Python"}, {"instruction": "Split the sentence into individual words using Python.", "input": "sentence = \"This sentence needs to be split.\"", "output": "words = sentence.split(' ')\nprint(words)\n# Output: ['This', 'sentence', 'needs', 'to', 'be', 'split.']", "category": "Python"}, {"instruction": "Create a function to process the following data and return the average temperature for the last five days.", "input": "days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\ntemps = [27, 28, 29, 20, 21]", "output": "def get_avg_temp(days, temps):\n    total = 0\n    for i in range(len(days)):\n        total += temps[i]\n        \n    avg = total / len(days)\n    \n    return avg", "category": "Python"}, {"instruction": "Create a boolean function called \"is_num_even\" which takes in a number and returns true if the number is even.", "input": "", "output": "def is_num_even(number):\n    if number % 2 == 0:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Print all the odd numbers from 1 to 10 (inclusive)", "input": "", "output": "for num in range(1, 11):\n    if num % 2 == 1:\n        print(num)", "category": "Python"}, {"instruction": "Create classes to represent a credit card and account holder.", "input": "No input.", "output": "class CreditCard:\n    def __init__(self, card_number):\n        self.card_number = card_number\n\nclass AccountHolder:\n    def __init__(self):\n        self.cards = []\n    def add_card(self, card):\n        self.cards.append(card)", "category": "Python"}, {"instruction": "Write a Python class that implements a sorted list.", "input": "No input.", "output": "class SortedList:\n    def __init__(self):\n        self.items = []\n\n    def add(self, item):\n        i = 0\n        while i < len(self.items) and self.items[i] < item:\n            i += 1\n        self.items.insert(i, item)\n\n    def remove(self, item):\n        i = 0\n        while i < len(self.items) and self.items[i] != item:\n            i += 1\n        if i < len(self.items):\n            del self.items[i]\n\n    def remove_at(self, index):\n        del self.items[index]", "category": "Python"}, {"instruction": "Modify the given code to debug 'NameError: name 'x' is not defined'.", "input": "nums = range(20)\nfor x in nums:\n    if x % 2 == 0:\n        print(square(x))", "output": "nums = range(20)\nfor x in nums:\n    if x % 2 == 0:\n        print(x**2)", "category": "Python"}, {"instruction": "How would you perform a two-way pivot table in Python using Pandas?", "input": "", "output": "Pandas can be used to perform a two-way pivot table in Python using the pivot_table() method. The pivot_table() method takes a data frame as an argument and can be used to reshape the data frame into a two-way pivot table. It takes several parameters, including values, index, columns, aggfunc, and fill_value. For example, if we want to calculate the total sales for each customer for each product, we can use the following statement: \n\npd.pivot_table(data, values=\"sales\", columns=\"product\", index=\"customer\", aggfunc=\"sum\", fill_value=0)", "category": "Python"}, {"instruction": "Create two classes, Dog and Cat, that extend the Animal class.", "input": "class Animal:\n    def __init__(self, name):\n        self.name = name\n        self.health = 100", "output": "class Animal:\n    def __init__(self, name):\n        self.name = name\n        self.health = 100\n\nclass Dog(Animal):\n    def bark(self):\n        print(\"Woof!\")\n\nclass Cat(Animal):\n    def meow(self):\n        print(\"Meow!\")", "category": "Python"}, {"instruction": "Implement a vector class in Python that allows for basic vector operations such as vector addition, subtraction and scalar multiplication.", "input": "", "output": "class Vector(object):\n \n  def __init__(self, components):\n    self.components = components\n \n  def add(self, vector):\n    if len(self.components) != len(vector.components):\n      return None\n    components = [x + y for x, y in zip(self.components, vector.components)]\n    return Vector(components)\n \n  def sub(self, vector):\n    if len(self.components) != len(vector.components):\n      return None\n    components = [x - y for x, y in zip(self.components, vector.components)]\n    return Vector(components)\n \n  def scalar_mul(self, scalar):\n    components = [x * scalar for x in self.components]\n    return Vector(components)", "category": "Python"}, {"instruction": "How could you loop through the elements of a list in Python?", "input": "", "output": "for element in my_list:\n    # do something with the element", "category": "Python"}, {"instruction": "Compute the Fibonacci series up to the following number n.", "input": "", "output": "def fibonacci(n):\n  a = 0 \n  b = 1\n  arr = []\n  arr.append(a)\n  arr.append(b)\n  for i in range(2,n):\n      c = a + b\n      a = b\n      b = c\n      arr.append(c)\n  return arr", "category": "Python"}, {"instruction": "How would you implement a webhook using Flask?", "input": "", "output": "import flask\n\n@app.route('/webhook', methods=['POST'])\ndef webhook():\n    # retrieve the data from the request\n    data = request.get_json() \n\n    # do something with the given data\n    # ...\n\n    # return the response\n    return { 'message': 'OK' }", "category": "Python"}, {"instruction": "Create a new function that takes two lists as input and returns a new list consisting of elements which are not in the other list.", "input": "list1 = [1, 2, 3, 4]\n list2 = [3, 4, 5, 6]", "output": "def non_shared(list1, list2):\n    non_shared_elements = [element for element in list1 if element not in list2]\n    return non_shared_elements", "category": "Python"}, {"instruction": "Write a Python code that detects if a given character is uppercase, lowercase, or something else.", "input": "", "output": "def is_type(character):\n  if ord(character) >= 65 and ord(character) <= 90:\n    return \"uppercase\"\n  elif ord(character) >= 97 and ord(character) <= 122:\n    return \"lowercase\"\n  else:\n    return \"something else\"", "category": "Python"}, {"instruction": "Create a function that takes a string of characters and returns the minimal number of division/multiplication operations needed to make all characters within the string the same.", "input": "acdc", "output": "def operations(string):\n    char_set = set(string)\n    while len(char_set) > 1:\n        char_arr = list(char_set)\n        x = char_arr[0]\n        y = char_arr[1]\n        if x == y:\n            break\n        elif x > y:\n            new_val = x/y\n            for i in range(len(string)):\n                if string[i] == x:\n                    string[i] = new_val\n        else:\n            new_val = y/x\n            for i in range(len(string)):\n                if string[i] == x:\n                    string[i] = new_val\n        char_set = set(string)\n    return len(char_set)-1", "category": "Python"}, {"instruction": "Design a program which can take an array of integers and output the index of the maximum element.", "input": "[10, 4, 15, 6, 20]", "output": "def max_index(lst): \n    max = 0\n    max_index = 0\n    for i in range(len(lst)): \n        if lst[i] > max: \n            max = lst[i]\n            max_index = i\n    return max_index", "category": "Python"}, {"instruction": "Create a program to create a new string where the first and last occurrence of each character is removed.", "input": "'Hello World'", "output": "def strip_string(s): \n    new_str = \"\"\n    counts = {}\n    \n    # Create a dictionary to record the number of occurrences of each character\n    for letter in s: \n        if letter not in counts:\n            counts[letter] = 1\n        else: \n            counts[letter] += 1\n    \n    for char in s: \n        if counts[char] > 1: \n            new_str += char\n        counts[char] -= 1\n    return new_str", "category": "Python"}, {"instruction": "Code a program to delete a specified item from a list.", "input": "Delete item \"Apple\" from the list [\"Banana\", \"Apple\", \"Orange\"]", "output": "def delete_item(lst, item): \n    if item in lst: \n        lst.remove(item)\n    return lst", "category": "Python"}, {"instruction": "Generate a correct program to sum the even numbers from 0 to n.", "input": "", "output": "def sum_even(n):\n    sum = 0\n    for i in range(0,n+1):\n        if i % 2 == 0:\n            sum += i\n    return sum", "category": "Python"}, {"instruction": "Produce a function which can take two strings as input and check if they are anagrams.", "input": "'silent', 'listen'", "output": "def is_anagram(str1, str2): \n    # convert strings to lowercase\n    str1_lower = str1.lower()\n    str2_lower = str2.lower()\n\n    # sort the strings \n    str1_sorted = ''.join(sorted(str1_lower))  \n    str2_sorted = ''.join(sorted(str2_lower)) \n\n    # compare the sorted strings \n    if(str1_sorted == str2_sorted):  \n        return True\n    else: \n        return False", "category": "Python"}, {"instruction": "Create a function in Python to delete an element from a given list at a specified index.", "input": "list = [1, 2, 3, 4, 5]\nindex = 2", "output": "def deleteElement(list, index): \n   del list[index] \n   return list\n  \nlist = [1, 2, 3, 4, 5] \nindex = 2\n  \nprint(deleteElement(list, index))", "category": "Python"}, {"instruction": "What is the most efficient way to find the maximum value in a Python list?", "input": "", "output": "The most efficient way to find the maximum value in a Python list is to use the built-in max() function. For example: max(list).", "category": "Python"}, {"instruction": "Create a function to invert the keys and values of a given dictionary.", "input": "my_dict = { \"name\": \"John\", \"age\": 22 }", "output": "def invert_dict(dictionary):\n    inv_dict = {v: k for k, v in dictionary.items()}\n    return inv_dict", "category": "Python"}, {"instruction": "Create an array of all the prime numbers up to 50.", "input": "", "output": "def is_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \nprime_array = []\nfor i in range(2, 51):\n    if is_prime(i):\n        prime_array.append(i)", "category": "Python"}, {"instruction": "Edit the code to make sure the output error messages are informative.", "input": "def myfunc(param):\n if type(param) != str:\n     print(f\"{param} is not valid input type\")", "output": "def myfunc(param):\n if not isinstance(param, str):\n     print(f\"Expected a string for parameter 'param' but received type '{type(param).__name__}'\")", "category": "Python"}, {"instruction": "Using the given list and dictionary, write the Python code to remove duplicate objects from the list.", "input": "list_one = [{\"Name\": \"John\", \"Lastname\": \"Smith\"}, {\"Name\": \"John\", \"Lastname\": \"Smith\"}, {\"Name\": \"Janet\", \"Lastname\": \"Wise\"}]\ndict_one = {\"John\": \"Smith\", \"Janet\": \"Wise\"}", "output": "new_list = []\n\nfor item in list_one: \n    if item['Name'] + item['Lastname'] not in new_list: \n        new_list.append(item['Name'] + item['Lastname']) \n    if item['Name'] + dict_one[item['Name']] not in new_list: \n        new_list.append(item['Name'] + dict_one[item['Name']])\n\nfinal_list = [item for item in list_one if item['Name'] + item['Lastname'] in new_list]", "category": "Python"}, {"instruction": "Using a list comprehension, create a function to give only the even numbers in a given list.", "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8]", "output": "def only_even(arr):\n    return [ num for num in arr if num % 2 == 0 ]", "category": "Python"}, {"instruction": "Find the Fibonacci number for a given number using a for loop.", "input": "", "output": "def fibonacci(n):\n    fibonacci_numbers = [0,1]\n    for i in range(2, n+1):\n        fibonacci_numbers.append(fibonacci_numbers[i-1] + fibonacci_numbers[i-2])\n    return fibonacci_numbers[n]", "category": "Python"}, {"instruction": "Using a while loop, write a program to delete all duplicate elements from an array.", "input": "arr = [1, 2, 3, 2, 3, 4, 3]", "output": "def remove_duplicates(arr):\n    i = 0\n    while i < len(arr):\n        if arr.count(arr[i]) > 1:\n            arr.remove(arr[i])\n        else:\n            i += 1\n    return arr", "category": "Python"}, {"instruction": "Create a function to decode a given string using the provided cipher.", "input": "decoding_cipher = { \"x\" : \"a\", \"y\": \"b\", \"z\" : \"c\" }\nstring = \"xyz\"", "output": "def decode_string(decoding_cipher, string):\n    result = \"\"\n    for char in string:\n        result += decoding_cipher[char]\n    return result", "category": "Python"}, {"instruction": "Create a function that takes a given string and encodes it with a specified cipher.", "input": "encoding_cipher = {\"a\" : \"x\", \"b\" : \"y\", \"c\": \"z\"}\nstring = \"abc\"", "output": "def encode_string(encoding_cipher, string):\n    result = \"\"\n    for char in string:\n        result += encoding_cipher[char]\n    return result", "category": "Python"}, {"instruction": "Use conditionals to decide what to print using the input array.", "input": "arr = [\"hamburger\", \"hot dog\", \"cheese\"]", "output": "if len(arr) == 0:\n   print(\"No food available\")\nelif len(arr) == 1:\n   print(arr[0] + \" is available\")\nelif len(arr) == 2:\n   print(arr[0] + \" and \"+ arr[1] + \" are available\")\nelse:\n   print(\"Multiple items are avaiable: \" + ', '.join(arr))", "category": "Python"}, {"instruction": "Create a list comprehension to generate the multiples of a number up to a limit.", "input": "multiples of 7 until 50", "output": "multiples_list = [n * 7 for n in range(0, 51) if n * 7 <= 50]", "category": "Python"}, {"instruction": "Design a class for representing a person in Python.", "input": "", "output": "class Person:\n    \"\"\"\n    Class to represent a person\n    \"\"\"\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address\n    \n    def birthday(self):\n        \"\"\"\n        Increments the age of the person\n        \"\"\"\n        self.age += 1", "category": "Python"}, {"instruction": "Create a for loop that prints all even numbers from 0 to 10 (inclusive).", "input": "", "output": "for i in range(0, 11):\n    if (i % 2 == 0):\n        print(i)", "category": "Python"}, {"instruction": "Create an object that uses constructor overloading in Python.", "input": "", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __init__(self, name, age, job):\n        self.name = name\n        self.age = age\n        self.job = job\n\np1 = Person('John Doe', 25)\np2 = Person('Jane Doe', 30, 'Software Engineer')", "category": "Python"}, {"instruction": "Describe what a condition in a while loop does in Python.", "input": "", "output": "A condition in a while loop in Python allows code to be executed repeatedly until a certain condition is met. While the condition is true, the code inside the loop is executed and if the condition is false, the loop is exited. This allows for a loop to continue running until a certain condition is met.", "category": "Python"}, {"instruction": "Create a Python program to take a float input and output its binary equivalent.", "input": "25.68", "output": "def floatToBin(num):\n    whole, decimal = str(num).split(\".\")   \n    whole = int(whole)\n    decimal = int (decimal) \n    res = bin(whole).lstrip(\"0b\")+\".\"\n    for x in range(10):\n        decimal *= 2\n        res += str(decimal//1)\n        decimal %= 1\n    return res \n \n# Driver code  \nnumber = 25.68\nprint(floatToBin(number)) # returns '11001.1011'", "category": "Python"}, {"instruction": "Generate a program to remove duplicates from an unsorted linked list.", "input": "", "output": "class Node: \n  \n    def __init__(self, data): \n        self.data = data  \n        self.next = None\n  \ndef remove_duplicates(head): \n    h = {} \n  \n    temp = head \n    prev = None\n    while(temp): \n        if temp.data in h: \n            prev.next = temp.next\n            temp = None\n        else: \n            h[temp.data] = True\n            prev = temp \n        temp = prev.next\n\nif __name__ == \"__main__\":\n    pass", "category": "Python"}, {"instruction": "Create a code to generate a Mulberry Tree of height n levels.", "input": "", "output": "def get_mulberry_tree(n):\n    spaces = n - 1\n    for i in range(1, n+1):\n        for j in range(spaces):\n            print(end = \" \") \n        spaces = spaces - 1\n        for j in range(i):\n            print(\"* \", end = \"\")\n        print() \n\nif __name__ == \"__main__\": \n    n = 5\n    get_mulberry_tree(n)", "category": "Python"}, {"instruction": "Design an algorithm to produce a binary tree from given inorder and preorder traversals.", "input": "inorder: [4,2,5,1,3,6]\npreorder: [1,2,4,5,3,6]", "output": "class Node: \n    # A constructor to create a  \n    # new linked node  \n    def __init__(self, data):  \n        self.data = data  \n        self.left = None\n        self.right = None\n\ndef binary_tree_from_inorder_preorder(inorder, preorder): \n    if len(inorder) in [0, 1]: \n        return Node(inorder[0]) if inorder else None\n              \n    root_val = preorder[0]\n    root = Node(root_val) \n  \n    i_index = inorder.index(root_val) \n  \n    root.left = binary_tree_from_inorder_preorder(inorder[:i_index],\n                                      preorder[1:i_index + 1]) \n  \n    root.right = binary_tree_from_inorder_preorder(inorder[i_index + 1:],  \n                                       preorder[i_index + 1:]) \n  \n    return root\n\nif __name__ == \"__main__\":\n    inorder=[4,2,5,1,3,6]\n    preorder=[1,2,4,5,3,6]\n    root = binary_tree_from_inorder_preorder(inorder, preorder)", "category": "Python"}, {"instruction": "Compose a function to generate a palette of random colors.", "input": "", "output": "import random\n\ndef generate_palette(n): \n    palette = [] \n    for i in range(n): \n        rgb = [] \n        for j in range(3): \n            rgb.append(random.randint(1, 255)) \n        palette.append(rgb) \n          \n    return palette\n\nif __name__ == \"__main__\": \n    n = 10\n    palette = generate_palette(n) \n    print(palette)", "category": "Python"}, {"instruction": "Become an algorithm to check if a linked list is empty.", "input": "", "output": "def is_list_empty(head):\n    if head == None:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Create an efficient matrix multiplication of two given matrices.", "input": "matrix1 = [[1, 2], [3, 4]]\nmatrix2 = [[5, 6], [7, 8]]", "output": "def matrix_multiply(matrix1, matrix2):\n    if len(matrix1[0]) != len(matrix2):\n        return \"Matrices should have the same size for multiplication\"\n    result = [[0 for x in range(len(matrix1))] for j in range(len(matrix2[0]))]\n    for i in range(len(matrix1)):\n        for j in range(len(matrix2[0])):\n            for k in range(len(matrix2)):\n                result[i][j] += matrix1[i][k] * matrix2[k][j]\n    return result\n\nif __name__ == \"__main__\":\n    matrix1 = [[1, 2], [3, 4]]\n    matrix2 = [[5, 6], [7, 8]]\n    print(matrix_multiply(matrix1, matrix2))", "category": "Python"}, {"instruction": "Develop a code to identify the most commonly used words in a given text.", "input": "The quick brown fox jumps over the lazy dog", "output": "from collections import Counter \n  \ndef most_common_words(text): \n    words = text.split() \n    counter = Counter(words) \n    high_occur = counter.most_common(3) \n    return high_occur\n\nif __name__ == \"__main__\":\n    text = \"The quick brown fox jumps over the lazy dog\"\n    most_common_words(text)", "category": "Python"}, {"instruction": "Implement a reverse for loop in Python.", "input": "", "output": "for i in reversed(range(0, 10)):\n   print(i)", "category": "Python"}, {"instruction": "Write a Python script to check if an email address is valid depending on the given conditions.", "input": "Email address: johnsmith@example.com\nCheck the following conditions:\n1. Must contain an \"@\" symbol\n2. Must contain a \".\"\n3. Must have at least 6 characters", "output": "import re\n\ndef is_valid_email(email):\n    regex = r\"^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-zA-Z]{2,6}$\"\n    if re.search(regex, email) is not None:\n        return True\n    else:\n        return False\n\nemail = 'johnsmith@example.com'\nif is_valid_email(email):\n    print(\"Valid email\")\nelse:\n    print(\"Invalid email\")", "category": "Python"}, {"instruction": "Write a code to find the maximum length of the longest consecutive increasing subsequence in the given array.", "input": "arr = [2, 3, 1, 10, 5, 6, 8, 7]", "output": "def max_length(arr): \n    ans = 1\n    j = 0\n\n    for i in range(len(arr)): \n        if (arr[i+1] - arr[i] > 0): \n            j += 1\n            ans = max(ans, j+1)\n        else:  \n            j = 0\n    return ans\n\nprint(max_length(arr))", "category": "Python"}, {"instruction": "Write a code that finds all the prime numbers in a given range of numbers.", "input": "start_num = 1\nend_num = 100", "output": "primes = []\nfor num in range(start_num, end_num + 1):\n  if num > 1:\n    for i in range(2, num):\n      if num % i == 0:\n        break\n    else:\n      primes.append(num)\n\nprint(primes)", "category": "Python"}, {"instruction": "How can you call a function named \"myFunction\" in both JavaScript and Python?", "input": "", "output": "In JavaScript: myFunction();\nIn Python: myFunction()", "category": "Python"}, {"instruction": "Design a program to find the fibonacci number at the given position in the sequence.", "input": "", "output": "def fibonacci(n):\n if n == 0 or n == 1:\n return n\n else:\n return fibonacci(n-1) + fibonacci(n-2)", "category": "Python"}, {"instruction": "Create a Python function to print out a string in reverse order.", "input": "\"This is a string\"", "output": "def reverse_string(input_str):\n    return input_str[::-1]\n \nprint(reverse_string(\"This is a string\"))", "category": "Python"}, {"instruction": "Write a Python script to print the current day, month and year.", "input": "", "output": "from datetime import datetime\n\nnow = datetime.now()\n\nprint(\"Today is\", now.day, now.month, now.year)", "category": "Python"}, {"instruction": "Generate Python code to extract only the keys from the given dictionary.", "input": "d = {'name': 'John', 'age': 24, 'city': 'New York'}", "output": "keys = list(d.keys())", "category": "Python"}, {"instruction": "How can we optimize the performance of the given code?", "input": "myList = [1, 2, 3]\nfor item in myList:\n    print(item)", "output": "Use list comprehension to reduce the amount of code used, such as:\n\nprint([item for item in myList])", "category": "Python"}, {"instruction": "Generate Python code to retrieve a list of tuples in the given string.", "input": "String: \"[('test1',1), ('test2',2)]\"", "output": "list_items = [item.replace(\"'\", \"\").replace(\"(\", \"\").replace(\")\", \"\").split(\",\") for item in s[1:-1].split(\"), (\")]\nlist_of_tuples = [(item[0], int(item[1])) for item in list_items]", "category": "Python"}, {"instruction": "Modify the code to create an AI model to classify the given dataset.", "input": "dataset = {\n    'x1': ['apple', 'banana'],\n    'x2': ['red', 'yellow'],\n    'label': ['fruit', 'fruit']\n}", "output": "class Model(nn.Module):\n    def __init__(self):\n        super(Model, self).__init__()\n        self.fc1 = nn.Linear(2, 32)\n        self.fc2 = nn.Linear(32, 32)\n        self.fc3 = nn.Linear(32, 2)\n\n    def forward(self, x):\n        x = x.view(-1, 2)\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        x = F.softmax(x, dim=-1)\n        return x\n\nmodel = Model()\ncriterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.005)", "category": "Python"}, {"instruction": "Suggest an algorithm to find the number of nodes in a binary tree.", "input": "", "output": "Here is a possible algorithm to count the number of nodes in a binary tree:\n\n1. Initialize count as 0\n2. If the tree is empty, return 0.\n3. Else\n   a. Recursively call the procedure on left subtree.\n   b. Add 1 to the `count` variable.\n   c. Recursively call the procedure on right subtree.\n4. Return count.", "category": "Python"}, {"instruction": "Print the results of the following arithmetic expression using python.", "input": "6/3+3*2", "output": "15.0", "category": "Python"}, {"instruction": "Create a Python function to remove duplicates in a given list.", "input": "list_of_numbers = [2, 3, 3, 5, 5]", "output": "def remove_duplicates(list_of_numbers):\n  result = []\n  for number in list_of_numbers:\n    if number not in result:\n      result.append(number)\n  return result", "category": "Python"}, {"instruction": "Generate a list of 10 random numbers between 0 and 500 in Python.", "input": "", "output": "import random\nnumbers = [random.randint(0,500) for i in range(10)]\nprint(numbers)", "category": "Python"}, {"instruction": "How would you sort an array of integers using Merge Sort algorithm?", "input": "", "output": "def merge_sort(arr): \n    # Base case: if the list has 0 or 1 elements it is already sorted \n    if len(arr) > 1: \n        mid = len(arr)//2 \n        # Split the array \n        left = arr[:mid]  \n        right = arr[mid:]  \n  \n        # Recursively call merge_sort on left and right half\n        merge_sort(left) \n        merge_sort(right) \n  \n        # Set up variables to help track merges\n        i = 0 # left array index \n        j = 0 # right array index \n        k = 0 # result array index \n  \n        # Merge the two halves \n        while i < len(left) and j < len(right): \n            if left[i] < right[j]: \n                arr[k] = left[i] \n                i+=1 \n            else: \n                arr[k] = right[j] \n                j+=1 \n            k+=1\n          \n        # Copy the rest of the left half and right half \n        while i < len(left): \n            arr[k] = left[i] \n            i+=1\n            k+=1\n          \n        while j < len(right): \n            arr[k] = right[j] \n            j+=1\n            k+=1", "category": "Python"}, {"instruction": "How would you write a program to determine the greatest common divisor (GCD) of two non-negative integers?", "input": "", "output": "def gcd(a, b):\n    # Base case\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n\n    # Calculate the greatest common divisor using Euclid's algorithm\n    while b != 0:\n        a %= b\n        a, b = b, a\n        \n    return a", "category": "Python"}, {"instruction": "Using the below Python code, Write a code snippet to index all the values of an array.", "input": "arr = [3, 8, 2, 5, 1]", "output": "for i, val in enumerate(arr):\n    print(f\"arr[{i}] = {val}\")", "category": "Python"}, {"instruction": "Given a list of numbers and a target sum, write a Python program to determine whether there is a set of three numbers in the list that add up to the target sum.", "input": "[2, 7, 5, 1, 8]", "output": "def find_target_sum(nums, target_sum):\n    for i in range(0, len(nums) - 2):\n        for j in range(i+1, len(nums) - 1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_sum:\n                    return True\n    return False", "category": "Python"}, {"instruction": "Create a software program that encrypts a text message.", "input": "", "output": "def encrypt(msg):\n    change = {'a': '@', 'e': '3', 'i': '1', 'o': '0', 's': '5'}\n    encrypted = \"\"\n    for c in msg:\n        if c in change:\n            encrypted += change[c]\n        else:\n            encrypted += c\n    return encrypted", "category": "Python"}, {"instruction": "Write a factorial program without using the inbuilt factorial function in Python.", "input": "", "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "category": "Python"}, {"instruction": "Generate a string array of length 10, containing only alphabets in lower case containing 10 random characters.", "input": "", "output": "import random\ndef gen_string_arr(n):\n    output = []\n    for i in range(n):\n        output.append(''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=10)))\n    return output", "category": "Python"}, {"instruction": "Rewrite the following function to optimize its performance.", "input": "def indexString(listStr, s):\n    output = []\n    for i in listStr:\n        if s in i:\n            output.append(i)\n    return output", "output": "def indexString(listStr, s):\n    output = []\n    for i in listStr:\n        if i.find(s) != -1 :\n            output.append(i)\n    return output", "category": "Python"}, {"instruction": "Design an algorithm in Python to detect anomalies in the given data.", "input": "Input a dataset containing two columns, temperature and pressure.", "output": "def detect_anomaly(data): \n    # Step 1: Calculate mean \n    mean_1 = np.mean(data['temperature']) \n    mean_2 = np.mean(data['pressure']) \n  \n    # Step 2: Calculate the standard deviation \n    sd_1 = np.std(data['temperature']) \n    sd_2 = np.std(data['pressure']) \n  \n    # Step 3: Calculate the threshold\n    cutoff = sd_1 * 3\n  \n    # Step 4: Apply threshold and mark anomalies \n    lower_limit_temperature = mean_1 - cutoff \n    upper_limit_temperature = mean_1 + cutoff \n  \n    lower_limit_pressure = mean_2 - cutoff \n    upper_limit_pressure = mean_2 + cutoff \n  \n    # Mark the anomalies by setting the value as 1 \n    data['anomaly'] = 0 \n    data.loc[data['temperature'] < lower_limit_temperature, 'anomaly'] = 1  \n    data.loc[data['temperature'] > upper_limit_temperature, 'anomaly'] = 1  \n    data.loc[data['pressure'] < lower_limit_pressure, 'anomaly'] = 1  \n    data.loc[data['pressure'] > upper_limit_pressure, 'anomaly'] = 1  \n  \n    # Return the dataframe \n    return data", "category": "Python"}, {"instruction": "Create a neural network in Python using the given input and output.", "input": "Input a set of 3 input values (x1, x2, x3) and two output values (y1, y2).", "output": "import numpy as np \nimport tensorflow as tf\n\n# Create the model \nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Dense(2, activation='sigmoid', input_shape=(3,))\n]) \n\n# Compile the model \nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy']) \n\n# Create the input and output data \ninput_data = np.array([[x1, x2, x3]])\noutput_data = np.array([[y1, y2]])\n\n# Train the model \nmodel.fit(input_data, output_data, epochs=100)", "category": "Python"}, {"instruction": "Develop a program to encode and decode a given string.", "input": "Input a string s to be encoded.", "output": "def encode(s): \n    encoded_str = \"\" \n    for i in s: \n        encoded_str += str(ord(i)) \n  \n    return encoded_str \n  \ndef decode(s): \n    decoded_str = \"\" \n    for i in range(0, len(s), 2): \n        decoded_str += chr(int(s[i:i+2])) \n  \n    return decoded_str", "category": "Python"}, {"instruction": "Use the function \"randint()\" to generate a random number between 1 and 10 in Python.", "input": "", "output": "from random import randint\nrandom_num = randint(1,10)\nprint(random_num)", "category": "Python"}, {"instruction": "Suggest a way to count the number of occurrences of each element in the list.", "input": "numbers = [2, 3, 2, 5, 8, 3, 10]", "output": "# Method 1 - Using Dictionary\nnumber_dict = dict()\nfor num in numbers:\n    if num in number_dict:\n        number_dict[num] += 1\n    else:\n        number_dict[num] = 1\nprint(number_dict)\n# Output: {2: 2, 3: 2, 5: 1, 8: 1, 10: 1}\n\n# Method 2 - Using Counter\nfrom collections import Counter\nnumber_count = Counter(numbers)\nprint(number_count)\n# Output: Counter({2: 2, 3: 2, 5: 1, 8: 1, 10: 1})", "category": "Python"}, {"instruction": "Suggest a way to identify and remove duplicate elements from the list.", "input": "numbers = [2, 3, 2, 5, 8, 3, 10]", "output": "# Method 1 - Using Set\nnumbers_set = set(numbers)\nnumbers_set = list(numbers_set)\nprint(numbers_set)\n# Output: [2, 3, 5, 8, 10]\n\n# Method 2 - Using Loop\nno_duplicate = [] \nfor num in numbers: \n    if num not in no_duplicate: \n        no_duplicate.append(num) \nprint(no_duplicate)\n# Output: [2, 3, 5, 8, 10]", "category": "Python"}, {"instruction": "Generate an array of length n with random numbers in the range 0 - 100", "input": "", "output": "import random\ndef gen_num_arr(n):\n    output = []\n    for i in range(n):\n        output.append(random.randint(0, 101))\n    return output", "category": "Python"}, {"instruction": "Given two strings, write a function to check if one string is a rotation of the other.", "input": "str1 = \"beans\"\nstr2 = \"esban\"", "output": "def is_rotation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n        \n    temp = str1 + str1\n    return str2 in temp", "category": "Python"}, {"instruction": "Write a Python program to create a numerical addition table", "input": "", "output": "def addition_table(n):\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            print(i + j, end= \" \")\n        print()\n\naddition_table(10)", "category": "Python"}, {"instruction": "Create an API using Python which returns the number of words in a given string.", "input": "", "output": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route(\"/get_words_count\", methods=[\"GET\"])\ndef get_words_count():\n    sentence = request.args.get(\"sentence\")\n    words = sentence.split(\" \")\n    return jsonify({\"words_count\": len(words)})\n\nif __name__ == \"__main__\":\n    app.run()", "category": "Python"}, {"instruction": "Create a Python class for circles with radius and color as its properties.", "input": "", "output": "class Circle:\n \n    # Constructor\n    def __init__(self, radius, color):\n        self.radius = radius\n        self.color = color\n \n    # To get radius\n    def getRadius(self):\n        return self.radius\n \n    # To get color\n    def getColor(self):\n        return self.color", "category": "Python"}, {"instruction": "Summarize the following passage in five sentences.", "input": "Machine learning is the scientific study of algorithms and statistical models that computer systems use in order to perform a specific task without using explicit instructions, relying on patterns and inference instead. It is seen as a subset of artificial intelligence. Machine learning algorithms build a mathematical model of sample data, known as \u201ctraining data\u201d, in order to make predictions or decisions without being explicitly programmed to do so.", "output": "Machine learning is a scientific field of study which uses algorithms and statistical models to allow computers to complete tasks without direct instructions or programming. It is a subset of artificial intelligence, using training data to form a mathematical model and make predictions. Machine learning algorithms can make decisions without explicit programming and rely on patterns and inference. It is an invaluable tool for data analysis and can be used for a wide variety of tasks such as image recognition and natural language processing.", "category": "Python"}, {"instruction": "Write a python program to convert a number from base 10 to base 8.", "input": "", "output": "def convert_base_10_to_base_8(number):\n   binary_number = bin(number)[2:]\n   octal_number = oct(int(binary_number, 2))[2:]\n   return octal_number", "category": "Python"}, {"instruction": "Write a python script to print 'Hello World' in HTML format", "input": "", "output": "print(\"<p>Hello World</p>\")", "category": "Python"}, {"instruction": "Compare two strings and return the longest one.", "input": "string1 = \"Hello\"\nstring2 = \"World\"", "output": "def compare_strings(string1, string2): \n    if len(string1) > len(string2): \n        return string1 \n    return string2", "category": "Python"}, {"instruction": "Create a function to determine if a given string is an anagram of another. An anagram is a word or phrase formed by rearranging the letters of another word or phrase.", "input": "", "output": "def is_anagram(str1, str2):\n   sorted_str1 = \"\".join(sorted(str1))\n   sorted_str2 = \"\".join(sorted(str2))\n   \n   if sorted_str1 == sorted_str2: \n       return True \n   return False", "category": "Python"}, {"instruction": "Using a list comprehension, create a filtered list which contains numbers that are divisible by 2.", "input": "nums = [1, 2, 3, 4, 5, 6]", "output": "filtered_list = [num for num in nums if num % 2 == 0]", "category": "Python"}, {"instruction": "Create a Python program to find all the perfect squares between 1 and n.", "input": "", "output": "def perfect_squares(n):\n    result = []\n    for i in range(1, n+1):\n        if is_perfect_square(i):\n            result.append(i)\n    return result\n\ndef is_perfect_square(n):\n    sqrt = int(n**.5)\n    return sqrt**2 == n\n\nif __name__ == '__main__':\n    n = 25\n    result = perfect_squares(n)\n    print(result)", "category": "Python"}, {"instruction": "Write a Python program to fill a dictionary with key as a number and value as a string for square with {1: \"1\", 2: \"4\", 3: \"9\", ...}.", "input": "", "output": "dic = {}\nfor i in range (1,11):\n    dic[i] = str(i ** 2)\nprint(dic)", "category": "Python"}, {"instruction": "Develop a program to apply a given operation (addition or subtraction) on two numbers.", "input": "operation: 'addition', a: 4, b:20", "output": "def operate(operation, a, b):\n    if operation == 'addition':\n        return a + b\n    elif operation == 'subtraction':\n        return a - b\n    else:\n        return 'Invalid operation.'\n\nprint(operate('addition', 4, 20)) # prints 24", "category": "Python"}, {"instruction": "Create a program to tokenize a given string into a list of strings.", "input": "'Hello! My name is Bob.'", "output": "import nltk\n\ndef tokenize(string):\n    tokens = nltk.word_tokenize(string)\n    return tokens\n\nprint(tokenize('Hello! My name is Bob.')) # prints [\"Hello\", \"!\", \"My\", \"name\", \"is\", \"Bob\", \".\"]", "category": "Python"}, {"instruction": "Create a function that, given a number, reverses the digits and returns them in an array.", "input": "12345", "output": "def reverse(num):\n    arr = []\n    while num > 0:\n        digit = num % 10\n        arr.append(digit)\n        num //= 10\n    return arr\n\nprint(reverse(12345)) # prints [5, 4, 3, 2, 1]", "category": "Python"}, {"instruction": "Develop a logic to generate Fibonacci Series till n terms.", "input": "n = 6", "output": "def fibonacci(n):\n    a = 0\n    b = 1\n    print(a)\n    print(b)\n    for i in range (2,n):\n        c = a+b\n        a = b\n        b = c\n        print(c)\nfibonacci(6)", "category": "Python"}, {"instruction": "Implement a function in Python to find the maximum number from a list of integers.", "input": "[3, 5, 1, 6, 10]", "output": "def findMax(list): \n    max = list[0] \n  \n    for i in list: \n        if i > max: \n            max = i \n  \n    return max", "category": "Python"}, {"instruction": "How to create an empty data frame in Pandas?", "input": "", "output": "import pandas as pd\n\ndf = pd.DataFrame()", "category": "Python"}, {"instruction": "How can we use the list comprehension method in Python to reverse a given list of string?", "input": "list_of_strings = [\"cat\", \"dog\", \"rabbit\"]", "output": "reversed_list_of_strings = [string[::-1] for string in list_of_strings]", "category": "Python"}, {"instruction": "In Python, how can we calculate the mean of a numerical data set?", "input": "", "output": "def mean(data):\n    return sum(data) / len(data)", "category": "Python"}, {"instruction": "Given a stream of blog posts from a certain website, how would you filter out posts with more than 50 comments in Python?", "input": "stream_of_blog_posts = [{'title': 'post1', 'comments': 35}, {'title': 'post2', 'comments': 52}, {'title': 'post3', 'comments': 19}]", "output": "posts_with_more_than_50_comments = [post for post in stream_of_blog_posts if post['comments'] > 50]", "category": "Python"}, {"instruction": "What is the difference between an interface and an abstract class?", "input": "", "output": "The main difference between an interface and an abstract class is that an interface can only contain abstract methods while an abstract class can include both abstract and non-abstract methods. Additionally, an interface can be implemented by multiple classes while a class can only extend a single abstract class. Interfaces are also limited to public methods while an abstract class can contain any type of access modifiers.", "category": "Python"}, {"instruction": "Why should you use functions in programming?", "input": "", "output": "Using functions in programming helps to break down complex tasks into more manageable pieces, which makes code easier to read and maintain. Functions also allow for the reuse of code, which can help to reduce overall development time and resources. Additionally, functions improve code organization and enable functions to be tested independently, making debugging easier.", "category": "Python"}, {"instruction": "Utilize Python to implement an algorithm which finds the largest number in an array.", "input": "", "output": "def largestNumber(arr): \n    max = arr[0] \n    for i in range(1, len(arr)): \n        if arr[i] > max: \n            max = arr[i] \n    return max", "category": "Python"}, {"instruction": "Create a Python program to return the longest word in a sentence", "input": "\"The dog likes to run around the yard\"", "output": "def longest_word(sentence):\n    words = sentence.split()\n    longest = 0\n    for word in words:\n        if len(word) > longest:\n            longest = len(word)\n            longest_word = word\n\n    return longest_word\n\nprint(longest_word(\"The dog likes to run around the yard\"))", "category": "Python"}, {"instruction": "determine if two strings are anagrams or not.", "input": "string1 = 'listen'\nstring2 = 'silent'", "output": "\"\"\"\nDetermine if two strings are anagrams or not\n\"\"\"\n\ndef is_anagram(string1, string2):   \n    # get lists of characters\n    list1 = list(string1.lower())\n    list2 = list(string2.lower())\n\n    # sort both lists\n    list1.sort()\n    list2.sort()\n\n    if list1 == list2: \n        return True\n    else:\n        return False\n\nif __name__ == '__main__': \n    string1 = 'listen'\n    string2 = 'silent'\n    print(\"Result: \" + str(is_anagram(string1, string2)))", "category": "Python"}, {"instruction": "Generate a function to calculate the probability of an event.", "input": "num_outcomes = 36\nnum_favourable_outcomes = 9", "output": "\"\"\"\nGenerate a function to calculate the probability of an event\n\"\"\"\ndef calculate_probability(num_outcomes, num_favourable_outcomes):\n    # calculate probability \n    probability = float(num_favourable_outcomes) / float(num_outcomes)\n    return probability\n    \nif __name__ == '__main__': \n    num_outcomes = 36\n    num_favourable_outcomes = 9\n    print(\"Probability of an event is: \" + str(calculate_probability(num_outcomes, num_favourable_outcomes)))", "category": "Python"}, {"instruction": "edit the existing function to calculate the compound interest.", "input": "# Calculate Simple Interest \ndef calcSimpleInterest(p, r, t): \n    return (p * r * t) / 100", "output": "\"\"\"\nEdit the existing function to calculate the compound interest\n\"\"\"\n# Calculate Compound Interest \ndef calcCompoundInterest(p, r, t): \n    # Calculate Simple Interest \n    interest= p * (pow((1 + r / 100), t)) \n    return interest\n\nif __name__ == '__main__': \n    principal_amount = 1000\n    rate_of_interest = 5\n    time_period = 5\n    print(\"Compound interest is\", calcCompoundInterest(principal_amount, rate_of_interest, time_period))", "category": "Python"}, {"instruction": "Write a function to delete a node from the given linked list.", "input": "Linked list: 10 --> 20 --> 30\nNode to delete: 10", "output": "def deleteNode(head, node): \n    if head == None: \n        return \n\t  \n    # If node to be deleted is head node \n    if head.val == node: \n        head = None\n        return head \n\t  \n    # Find prev node \n    prev = None\n    curr = head \n    while curr and curr.val != node: \n        prev = curr \n        curr = curr.next\n\n    # Unlink node from linked list \n    prev.next = curr.next\n    curr = None\n\n    return head", "category": "Python"}, {"instruction": "Construct a function in Python that takes a list and returns the mean of the elements in the list.", "input": "[30, 10, 40, 20]", "output": "def mean(list): \n    # Finding total of the list elements \n    total = 0\n    for num in list: \n        total += num \n\n    # Calculate mean of the list \n   mean = total / len(list) \n\n    # Return the mean \n    return mean", "category": "Python"}, {"instruction": "Write a function that prints the same string three times consecutively.", "input": "string = \"Hello World!\"", "output": "def print_three_times(string):\n    for _ in range(3):\n        print(string)\n        \nprint_three_times(\"Hello World!\")", "category": "Python"}, {"instruction": "Implement Naive Bayes for classification.", "input": "", "output": "import numpy as np\n\n# Create a data set\nX = np.array([[0, 0, 0], [0, 1, 0], [1, 0, 0], [1, 1, 0], [0, 0, 1], [0, 1, 1], [1, 0, 1], [1, 1, 1]])\ny = np.array([0, 0, 0, 0, 1, 1, 1, 1])\n\n# Build a Naive Bayes classifier\nnaive_bayes = GaussianNB()\n\n# Train the classifier using the training data\nnaive_bayes.fit(X, y)", "category": "Python"}, {"instruction": "Implement a neural network for regression", "input": "", "output": "import tensorflow as tf\n\n# create input layer\ninputs = tf.keras.Input(shape=(2,))\n\n# create the first layer of the network with 16 neurons\nfc1 = tf.keras.layers.Dense(16, activation=\"relu\")(inputs)\n\n# create the second layer of the network with 8 neurons\nfc2 = tf.keras.layers.Dense(8, activation=\"relu\")(fc1)\n\n# create the output layer of the network with 1 neuron (for regression)\noutputs = tf.keras.layers.Dense(1, activation=\"sigmoid\")(fc2)\n\n# create the model and compile it.\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\nmodel.compile(optimizer='Adam', loss='mse')", "category": "Python"}, {"instruction": "Write a function to convert an anagram of a string to a dictionary", "input": "word = \"geeksforgeeks\"", "output": "def convert_anagram(word):\n    result = {}\n    for c in word:\n        result.setdefault(c, 0)\n        result[c] += 1\n    return result", "category": "Python"}, {"instruction": "Given a list of strings, create a Python3 program that counts the number of strings that start with the letter 'a'.", "input": "example_list = [\"Apple\", \"Cat\", \"Ant\", \"Table\"]", "output": "def count_str_starts_a(l):\n    count = 0\n    for word in l:\n        if word[0].lower() == 'a':\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Create a function in Python that takes a sentence as input and returns a dictionary of each word and its frequency in the sentence.", "input": "example_sentence = \"The quick brown fox jumps over the lazy dog.\"", "output": "def word_frequency(sentence):\n    words = sentence.split()\n    freq_dict = {}\n    for word in words:\n        if word in freq_dict:\n            freq_dict[word] += 1\n        else:\n            freq_dict[word] = 1\n    return freq_dict", "category": "Python"}, {"instruction": "Given a list of strings, create a Python function that sorts them in alphabetical order.", "input": "example_list = [\"Apple\", \"Banana\", \"Cherry\"]", "output": "def sort_list(l):\n    l.sort()\n    return l", "category": "Python"}, {"instruction": "Generate the nth Fibonacci number using a loop.", "input": "", "output": "def fibonacci_loop(n):\n    prev, curr = 0, 1\n    for _ in range(1, n):\n        prev, curr = curr, prev + curr\n    return curr\n\nif __name__ == '__main__':\n    print(fibonacci_loop(10))", "category": "Python"}, {"instruction": "Generate a random valid email address.", "input": "", "output": "import random\n\ndef generate_email():\n characters = 'abcdefghijklmnopqrstuvwxyz0123456789'\n email_address = ''.join(random.choice(characters) for i in range(10))\n return email_address + '@example.com'", "category": "Python"}, {"instruction": "Compose a program to create a dictionary of characteristics from a given list .", "input": "itemList = [\"Apple\", \"Orange\", \"Grapes\", \"Bananas\", \"Watermelons\"]", "output": "def create_characterstic_dictionary(itemList):\n    out = {}\n    for item in itemList:\n        out[item] = len(item)\n    return out\n\nif __name__ == '__main__':\n    itemList = [\"Apple\", \"Orange\", \"Grapes\", \"Bananas\", \"Watermelons\"]\n    print(create_characterstic_dictionary(itemList))", "category": "Python"}, {"instruction": "Convert a given string from lowercase to uppercase characters.", "input": "\"this is a string\"", "output": "def convert_to_uppercase(string):\n    return string.upper()\n    \nif __name__ == '__main__':\n    print(convert_to_uppercase(\"this is a string\"))", "category": "Python"}, {"instruction": "Find the smallest positive number that is not present in a given list.", "input": "my_list = [1, 3, 6, 9, 11]", "output": "def find_missing_number(my_list):\n    sorted_list = sorted(my_list)\n    for i, num in enumerate(sorted_list):\n        if i != num:\n            return i\n    return max(sorted_list) + 1", "category": "Python"}, {"instruction": "Edit the following function to remove duplicate elements from a list.", "input": "def remove_duplicates(list):\n    new_list = []\n    for element in list:\n        new_list.append(element)\n    return new_list", "output": "def remove_duplicates(list):\n    new_list = []\n    for element in list:\n        if element not in new_list:\n            new_list.append(element)\n    return new_list", "category": "Python"}, {"instruction": "How can you remove all the empty strings from a list?", "input": "", "output": "filtered_list = [x for x in list if x!= '']", "category": "Python"}, {"instruction": "How do you sort a dictionary by values in Python?", "input": "", "output": "sorted_dict = dict(sorted(mydict.items(), key=lambda x: x[1]))", "category": "Python"}, {"instruction": "How to generate a random number between two given numbers in Python?", "input": "", "output": "import random \n\ndef random_number(minimum, maximum): \n    return random.randint(minimum, maximum)", "category": "Python"}, {"instruction": "Write a method to remove the trailing spaces from a string in Python.", "input": "", "output": "def remove_trailing_spaces(s): \n    return s.rstrip()", "category": "Python"}, {"instruction": "How do you check if a character is a digit in Python?", "input": "", "output": "if c.isdigit():\n   # character is a digit", "category": "Python"}, {"instruction": "Write a method to find the maximum number of elements in an array such that all subarrays add up to a specified number.", "input": "arr = [1, 2, 3, 4, 5, 6, 7]", "output": "def find_max(arr, target): \n  dp = [[False for i in range(target + 1)] for j in range(len(arr))]\n  for i in range(len(arr)):\n      dp[i][0] = True\n  for i in range(1, len(arr)): \n    for j in range(1, target + 1): \n      if dp[i - 1][j]: \n          dp[i][j] = dp[i - 1][j] \n      elif j >= arr[i]: \n          dp[i][j] = dp[i - 1][j - arr[i]] \n  max_val = 0\n  for i in range(1, target + 1): \n    if dp[len(arr) - 1][i]: \n      max_val = max(max_val, i) \n  return max_val", "category": "Python"}, {"instruction": "How to delete a specific item from a Python dictionary?", "input": "", "output": "dictionary_name.pop(\"item_name\", None)", "category": "Python"}, {"instruction": "Print a random permutation of an array of integers.", "input": "[1,2,3,4,5]", "output": "import random\n\ndef random_permutation(arr):\n    new_arr = arr.copy()\n    random.shuffle(new_arr)\n    return new_arr\n\nif __name__ == '__main__':\n    print(random_permutation([1,2,3,4,5]))", "category": "Python"}, {"instruction": "Given an input string and a pattern, find the first index of the pattern in the string.", "input": "string: \u201cThe quick brown fox jumps over the lazy dog\u201d\npattern: \u201cdog\u201d", "output": "def find_pattern_index(string, pattern):\n for i in range(len(string) - len(pattern) + 1): \n  if string[i:i+len(pattern)] == pattern: \n   return i \n return -1\n \nprint(find_pattern_index(\"The quick brown fox jumps over the lazy dog\", \"dog\"))\n# Output: 40", "category": "Python"}, {"instruction": "Decompose a given number into its prime factors.", "input": "25", "output": "def prime_factorize(n):\n prime_factors = []\n i = 2\n while i * i <= n:\n if n % i:\n i += 1\n else:\n n //= i\n prime_factors.append(i)\n if n > 1:\n prime_factors.append(n)\n return prime_factors\n \nprint(prime_factorize(25))\n# Output: [5, 5]", "category": "Python"}, {"instruction": "Write an algorithm to count the number of pairs whose difference is k.", "input": "nums = [1, 5, 3, 4, 7, 8]\nk = 3", "output": "def count_pairs(nums, k):\n    count = 0\n    # Create a set to store all the elements of the array\n    num_set = set(nums)\n    for num in nums:\n        if num + k in num_set:\n            count += 1\n\n    return count\n\nnum_diff = 3\npair_count = count_pairs(nums, num_diff)\nprint(\"Number of pairs with difference\", num_diff, \" is :\", pair_count)", "category": "Python"}, {"instruction": "Create an algorithm that performs bubble sort.", "input": "", "output": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n-1, 0, -1):\n        for j in range(i):\n            if arr[j] > arr[j+1]:\n                arr[j+1], arr[j] = arr[j], arr[j+1]", "category": "Python"}, {"instruction": "Design an algorithm that can efficiently search for an element in a given sorted array", "input": "", "output": "def binary_search(arr, x):\n  start = 0\n  end = len(arr) - 1\n  while start <= end:\n    mid = start + (end - start)//2\n    if arr[mid] == x:\n      return mid\n    elif arr[mid] < x: \n      start = mid + 1\n    else: \n      end = mid - 1\n  return -1", "category": "Python"}, {"instruction": "Write a Python program that takes two lists, adds their items and returns a new list.", "input": "list_a = [1, 2, 3]\nlist_b = [4, 5, 6]", "output": "def add_list_items(list_a, list_b):\n    output = []\n    for item_a, item_b in zip(list_a, list_b):\n        output.append(item_a + item_b)\n    return output", "category": "Python"}, {"instruction": "Create an algorithm that will return all numbers in the given array that are greater than 10.", "input": "[5, 8, 10, 12, 15, 17, 20]", "output": "def get_over_10(arr):\n    output = []\n    for num in arr:\n        if num > 10:\n            output.append(num)\n    return output", "category": "Python"}, {"instruction": "What is the Python function for swapping two variables' values?", "input": "", "output": "The Python function for swapping two variables' values is \"*a, b = b, a*\". This is a simple one-line expression that swaps the values of the two variables.", "category": "Python"}, {"instruction": "Explain the benefits of using the OOP approach in programming.", "input": "", "output": "Using the Object-Oriented Programming (OOP) approach in programming offers a number of advantages such as increased code reusability, easier maintenance, data hiding, and better performance. OOP makes it easier to model real-world objects and their relationships, allowing developers to reduce complexity by breaking programs down into smaller parts. This makes it easier to identify, debug and modify code. Additionally, OOP promotes the development of extensible and reusable code, cutting down on the cost and time of development. Finally, OOP allows for better tracking of data and control over which elements outside the program can modify the data.", "category": "Python"}, {"instruction": "Write a code for finding the maximum value within a range.", "input": "List: [10, 20, 30, 5, 40] \nRange: [20, 40]", "output": "max = 0\nfor num in list:\n    if num >= 20 and num <= 40:\n        max = max(max, num)\nprint(max) # 40", "category": "Python"}, {"instruction": "Given an array of integers, write a program to find the longest consecutive sequence.", "input": "[1, 9, 3, 10, 4, 20, 2]", "output": "def longest_consecutive(numbers):\n    longest_sequence = 0\n    numbers_set = set(numbers)\n \n    for num in numbers:\n        if num - 1 not in numbers_set:\n            current_number = num\n            current_sequence = 1\n \n            while current_number + 1 in numbers_set:\n                current_sequence += 1\n                current_number += 1\n \n            longest_sequence = max(longest_sequence, current_sequence)\n \n    return longest_sequence", "category": "Python"}, {"instruction": "Create a for loop in Python that will iterate through a given list and add the square of each element to a new list.", "input": "nums = [2, 3, 4]", "output": "# Create an empty list\nsquared_nums = []\n\n# Iterate through the given list \nfor num in nums:\n  # Calculate the square of the element\n  squared_num = num * num\n  # Append it to the new list\n  squared_nums.append(squared_num)\n\n# Print the new list\nprint(squared_nums) \n# Output: [4, 9, 16]", "category": "Python"}, {"instruction": "Write a loop in Python to find the summation of the square of the first 10 natural numbers.", "input": "", "output": "sum = 0\nfor i in range(1, 11): \n    sum += i**2 \n \nprint(\"The sum of the square of the first 10 natural numbers is\", sum)", "category": "Python"}, {"instruction": "Design a Python class that allows a user to set and get the name of an object.", "input": "", "output": "class User:\n    def __init__(self, name):\n        self.name = name\n\n    def getName(self):\n        return self.name\n\n    def setName(self, name):\n        self.name = name", "category": "Python"}, {"instruction": "Design an algorithm to calculate the intersection of two given lists.", "input": "List1 = [2, 5, 9, 12, 17]\nList2 = [3, 5, 9, 10]", "output": "def intersection(list1, list2):\n    # Initialize an empty list \n    intersection_list = []\n\n    # Iterate over elements of the first list\n    for num in list1:\n        # Compare each element of first list with elements of second list\n        if num in list2:\n            # Add to the intersection list if matches\n            intersection_list.append(num)\n\n    return intersection_list\n\nif __name__ == \"__main__\":\n    list1 = [2, 5, 9, 12, 17]\n    list2 = [3, 5, 9, 10]\n    print(intersection(list1, list2))", "category": "Python"}, {"instruction": "Generate a sequence of prime numbers between a given range using the Sieve of Eratosthenes algorithm.", "input": "", "output": "def sieve_of_eratosthenes(lower, upper):\n    # Create a list of prime numbers\n    prime_list = [True] * (upper + 1)\n    prime_list[0] = False\n    prime_list[1] = False\n\n    # Iterate over the list until the square root of the upper limit\n    for i in range(2, int(upper ** 0.5) + 1):\n        # If i is true, then it is prime\n        if prime_list[i]:\n            # Set all multiples of i to false\n            for j in range(i*i, upper + 1, i):\n                prime_list[j] = False\n\n    # Get the list of prime numbers between lower and upper\n    prime_nums = []\n    for i in range(lower, upper + 1):\n        if prime_list[i]:\n            prime_nums.append(i)\n\n    return prime_nums\n\nif __name__ == \"__main__\":\n    lower = 0\n    upper = 50\n    print(sieve_of_eratosthenes(lower, upper))", "category": "Python"}, {"instruction": "Design an algorithm to compute the number of trailing zeroes in a factorial number.", "input": "", "output": "def count_trailing_zeroes(factorial_number):\n    \n\u00a0 \u00a0 # Initialize count \n\u00a0 \u00a0 count = 0\n\n\u00a0 \u00a0 # Keep dividing n by powers of 5 and update count\n\u00a0 \u00a0 i = 5\n\u00a0 \u00a0 while (factorial_number/i>=1):\n\u00a0 \u00a0 \u00a0 \u00a0 count += int(factorial_number/i)\n\u00a0 \u00a0 \u00a0 \u00a0 i *= 5\n\u00a0 \u00a0 \u00a0 \u00a0 \n\u00a0 \u00a0 return int(count)\n\nif __name__ == \"__main__\":\n    factorial_number = 12\n    print(count_trailing_zeroes(factorial_number))", "category": "Python"}, {"instruction": "Extract the country code from a given phone number of the format +cc xxx-xxx-xxxx", "input": "+91 983-741-3256", "output": "def extract_country_code(number):\n    # Check if number is valid\n    if len(number) == 13 and number[0] == '+':\n        # Extract the country code\n        cc = number[1:3]\n        return cc\n\nif __name__ == \"__main__\":\n    number = \"+91 983-741-3256\"\n    print(extract_country_code(number))", "category": "Python"}, {"instruction": "Reverse the words in a sentence stored as a list in Python.", "input": "['word', 'one', 'is', 'this']", "output": "def reverse_words(words):\n    # Get the length of the words\n    n = len(words)\n\n    # Reverse the list words\n    for i in range(n // 2):\n        words[i], words[n - 1 - i] = words[n - 1 - i], words[i]\n\n    return words\n\nif __name__ == \"__main__\":\n    words = ['word', 'one', 'is', 'this']\n    print(reverse_words(words))", "category": "Python"}, {"instruction": "Create a function which determines if a given number is a palindrome.", "input": "7337", "output": "def palindrome(num):\n    # convert the number to a string\n    num_str = str(num)\n\n    # Reverse the string using slicing\n    rev_str = num_str[::-1]\n\n    # check if the given number is equal to the reversed string\n    if num_str == rev_str:\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    num = 7337\n    print(palindrome(num))", "category": "Python"}, {"instruction": "Write a function that takes two strings as parameters and return a new string that has the characters of the second string appended to the first string.", "input": "\"hello\",\"world\"", "output": "def append_string(string1, string2):\n    return string1 + string2\n\nif __name__ == '__main__':\n    string1 = \"hello\"\n    string2 = \"world\"\n    result = append_string(string1, string2)\n    print(result)", "category": "Python"}, {"instruction": "Output the number of words in a given sentence stored as a string.", "input": "\"Welcome to the world of coding!\"", "output": "def count_words(sentence):\n    return len(sentence.split())\n\nif __name__ == '__main__':\n    sentence = \"Welcome to the world of coding!\"\n    print(count_words(sentence))", "category": "Python"}, {"instruction": "Design a class that stores and prints a complex number.", "input": "", "output": "class ComplexNumber:\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n\n    def __str__(self):\n        return '{} + {}i'.format(self.real, self.imag)\n\nif __name__ == '__main__':\n    c = ComplexNumber(2, 8)\n    print(c)", "category": "Python"}, {"instruction": "Create a computer program that takes a string as an input and builds a dictionary of words and their respective frequencies.", "input": "\"the quick brown fox jumps over the lazy dog\"", "output": "def get_frequency(input):\n    # Split the input into words\n    words = input.split()\n\n    # Create a dictionary to store the words and the frequency\n    frequency = dict()\n\n    # Iterate over the words and store the frequency\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n            \n    return frequency\n\nif __name__ == \"__main__\":\n    # Input string\n    input = \"the quick brown fox jumps over the lazy dog\"\n\n    # Get the frequency of words\n    frequency = get_frequency(input)\n\n    # Print the frequency\n    print(frequency)", "category": "Python"}, {"instruction": "Given an array, separate the odd and even numbers, and return a list of two different arrays, one for even and one for odd numbers.", "input": "[3, 6, 9, 12, 21]", "output": "def separate_even_odd(arr):\n even = []\n odd = []\n for i in arr:\n if i % 2 == 0:\n even.append(i)\n else:\n odd.append(i)\n return even, odd\n\nprint(separate_even_odd([3, 6, 9, 12, 21]))\n# Output: ([6, 12], [3, 9, 21])", "category": "Python"}, {"instruction": "Given an array of integers, write an algorithm to reorder the array so that all the negative integers appear before all the positive integers.", "input": "arr = [4, -7, -3, 9, 1, -4]", "output": "def reorder_arr(arr): \n  negatives = [] \n  positives = [] \n\n  for item in arr: \n    if item < 0: \n      negatives.append(item) \n    elif item >= 0: \n      positives.append(item) \n    \n  return negatives + positives", "category": "Python"}, {"instruction": "Use the information provided to create a class in Python which represent a Rectangle.", "input": "The Rectangle class should have: \n- Attributes of length and width\n- A method to compute the area of the rectangle", "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n   \n    def get_area(self):\n        return self.length * self.width", "category": "Python"}, {"instruction": "Show an example of a while loop in Python.", "input": "", "output": "i = 0\n\nwhile i < 10:\n    print(i)\n    i += 1", "category": "Python"}, {"instruction": "Create an array in Python containing five strings.", "input": "", "output": "my_words = [\"Hello\", \"World\", \"Python\", \"Programming\", \"Code\"]", "category": "Python"}, {"instruction": "Write the code to create a class in Python named \"Person\".", "input": "", "output": "class Person:\n    def __init__(self, name, age=None):\n        self.name = name\n        self.age = age", "category": "Python"}, {"instruction": "Create a Python script to find the greatest common divisor (GCD) of a pair of integers.", "input": "Number 1: 10\nNumber 2: 12", "output": "def findGCD(x, y): \n  \n    # This function implements the Euclidian algorithm \n    # to find GCD of two numbers \n    while(y): \n        x, y = y, x % y \n  \n    return x \n  \n# Driver program \ngcd = findGCD(10, 12) \nprint(gcd)", "category": "Python"}, {"instruction": "Modify the program to accept user input of two numbers, and show the result based on the operator provided.", "input": "def calculate(num1, num2):\n    result = num1 + num2\n    return result", "output": "def calculate(num1, num2, operator):\n    if (operator == '+'):\n        result = num1 + num2\n    elif (operator == '-'):\n        result = num1 - num2\n    elif (operator == '*'):\n        result = num1 * num2\n    elif (operator == '/'):\n        result = num1 / num2\n    else:\n        print(\"Invalid operator\")\n    return result", "category": "Python"}, {"instruction": "Rewrite the following program using OOP concepts.", "input": "NUMBER_OF_ELEMENTS = 10\narr = [0] * NUMBER_OF_ELEMENTS\n\ndef set_element(index, value):\n    arr[index] = value", "output": "class Array():\n    def __init__(self, num_elements):\n        self.arr = [0] * num_elements\n\n    def set_element(self, index, value):\n        self.arr[index] = value", "category": "Python"}, {"instruction": "Add proper type annotations to the following Python function.", "input": "def get_favorite_number(name):\n  return name + 10", "output": "def get_favorite_number(name: str) -> int:\n  return name + 10", "category": "Python"}, {"instruction": "Edit the following Python code to add a loop to generate a list of numbers from 1 to 10.", "input": "numbers = []", "output": "numbers = []\n\nfor i in range(1, 11):\n numbers.append(i)", "category": "Python"}, {"instruction": "Create a class in Python to represent a book and include a method for getting the name of the book.", "input": "", "output": "class Book:\n    def __init__(self, name):\n        self.name = name\n\n    def get_name(self):\n        return self.name", "category": "Python"}, {"instruction": "We have a list of integers, write a function in Python to find the second smallest element in the list.", "input": "[2, 4, 7, 10, 8]", "output": "def find_second_smallest(list_nums):\n    sorted_list = sorted(list_nums)\n    return sorted_list[1]\n\nfind_second_smallest([2, 4, 7, 10, 8])", "category": "Python"}, {"instruction": "Write a function in Python to calculate the sum of all even integers in a list.", "input": "[1, 2, 3, 4, 5]", "output": "def sum_even_ints(list_nums):\n    total_sum = 0\n    for num in list_nums:\n        if num % 2 == 0:\n            total_sum += num\n    return total_sum\n\nsum_even_ints([1, 2, 3, 4, 5])", "category": "Python"}, {"instruction": "Write a Python program to remove an empty tuple from a list of tuples.", "input": "list1 = [ (), ('a',), ('b', 'c'), ('d', 'e', 'f')]", "output": "list2 = [ t for t in list1 if t ]\nprint(list2)", "category": "Python"}, {"instruction": "Describe a complete algorithm for sorting n integers.", "input": "", "output": "The algorithm for sorting n integers is a divide-and-conquer algorithm.\n\nThe algorithm works as follows:\n1. Select a pivot element from the array.\n2. Split the array into two sub-arrays based on the pivot element. \n3.  For each of the sub-arrays, use the same sorting algorithm to sort their contents. \n4. Once both sub-arrays are sorted, merge the two sub-arrays into one sorted array.", "category": "Python"}, {"instruction": "Convert this Python statement into a list comprehension.", "input": "for item1 in list1:\n    for item2 in list2:\n        if item1 == item2:\n            result_list.append(item1)", "output": "result_list = [item1 for item1 in list1 for item2 in list2 if item1 == item2]", "category": "Python"}, {"instruction": "Develop a natural language processing model to detect sarcasm in text.", "input": "", "output": "# This code is written in Python\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LogisticRegression\n\n# Load dataset \ndf = pd.read_csv('sarcasm_data.csv')\n\n# Vectorize text using CountVectorizer\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(df['text'])\ny = df['label']\n\n# Split into train and test dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=2)\n\n# Train model using Logistic Regression\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Evaluate model performance\nscore = model.score(X_test, y_test)\nprint(f'Model Accuracy: {score*100}%')", "category": "Python"}, {"instruction": "Develop an AI model to classify emails with spam contents.", "input": "", "output": "# import necessary libraries in Python\nimport pandas as pd\nimport numpy as np \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# read data \ndf = pd.read_csv('emails.csv')\nX = df['text']\ny = df['label']\n\n# Vectorize emails using TF-IDF\nvectorizer = TfidfVectorizer()\nX_vec = vectorizer.fit_transform(X)\n\n# split dataset into training and test data \nX_train, X_test, y_train, y_test = train_test_split(X_vec, y, test_size=0.2, random_state=2)\n\n# train model using the training data\nclf = MultinomialNB()\nclf.fit(X_train, y_train)\n\n# evaluate performance on the test data\nscore = clf.score(X_test, y_test)\nprint(f'Model Accuracy: {score*100}%')", "category": "Python"}, {"instruction": "Write a function in Python that takes two strings as input and returns a sorted version of the first string with all occurrences of the letters in the second string removed.", "input": "firstString = 'hello world'\nsecondString = 'lo'", "output": "def remove_occurrences(first_string, second_string):\n  original_string_list = list(first_string)\n  for char in second_string:\n    if char in original_string_list:\n      original_string_list.remove(char)\n  return ''.join(sorted(original_string_list))\n\n# Usage\nprint(remove_occurrences('hello world', 'lo')) # Output: dehwr", "category": "Python"}, {"instruction": "Create a program to check if a number lies between two other numbers.", "input": "Num1 = 25\nNum2 = 70\nNum3 = 40", "output": "def check_in_range(num1, num2, num3):\n    if (num1 < num3 and num3 < num2):\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Rearrange the characters of given string in the order of their frequency.", "input": "String = \"tree\"", "output": "def rearrange(string):\n    Frequency={}\n    newstr=''\n    for c in string:\n        if c not in Frequency:\n            Frequency[c] = 1\n        else:\n            Frequency[c] = Frequency[c]+1\n    for key,value in sorted(Frequency.items(), key=lambda x: x[1], reverse=True):\n        for i in range(value):\n            newstr = newstr+key\n    return newstr", "category": "Python"}, {"instruction": "Rewrite the given function without using the ternary expression.", "input": "def func(x):\n    return x if x > 0 else x + 10", "output": "def func(x):\n    if x > 0:\n        return x\n    else:\n        return x + 10", "category": "Python"}, {"instruction": "Explain what is an algorithm.", "input": "", "output": "An algorithm is a set of steps or procedures used to solve a problem or accomplish a task. Algorithms are designed to perform an operation on a given set of inputs in order to obtain the desired output. Algorithms can be implemented in various ways, such as in pseudocode or in a programming language. Algorithms are commonly used for complex tasks such as image processing, data sorting, text processing, and AI applications.", "category": "Python"}, {"instruction": "Explain what is a neural network.", "input": "", "output": "A neural network is an artificial intelligence system made up of connected units which process information. Each unit is analogous to a neuron in the human brain, and in a neural network, information travels from the input nodes, through the hidden layers, to the output nodes. The neurons in each layer are connected to each other, and the strength of their connection is determined by weights that are specified in advance. When input data enters the neural network, it is processed through the layers and is ultimately used to generate a numerical output corresponding to the classified input.", "category": "Python"}, {"instruction": "Explain what is a median in statistics.", "input": "", "output": "The median is a statistical measure that is used to represent the middle value of a set of data points. It is calculated by arranging the given data points in ascending or descending order and taking the mean of the two middle values, if the set of data points contains an even number of values. If it contains an odd number of values, the median is simply the middle value. The median is not affected by outliers, making it a more robust measure of central tendency than the mean. It is a helpful measure when analyzing large datasets, as it can give a better representation of the data than a mean, which can be greatly influenced by outliers.", "category": "Python"}, {"instruction": "Design a Python script to extract the name, date of birth, and address from a given string.", "input": "John Smith; 10/03/1994; 9 Hall Street, Anytown", "output": "import re \n\npattern = re.compile(r'(?P<name>[\\w ]+); (?P<dob>[\\d/]+); (?P<addr>[\\w ]+[,][\\w ]+)')\nmatch = pattern.search('John Smith; 10/03/1994; 9 Hall Street, Anytown') \nname = match.group('name') \ndob = match.group('dob') \naddr = match.group('addr')", "category": "Python"}, {"instruction": "Create a Python class with two methods; one to add two numbers, and another to subtract two numbers.", "input": "", "output": "class Calculator:\n    def add(self, x, y):\n        return x + y\n\n    def subtract(self, x, y):\n        return x - y", "category": "Python"}, {"instruction": "In Python, write a program to remove all duplicates from a given list of integers.", "input": "", "output": "def remove_duplicates(arr):\n    result = [] \n    seen = set() \n    for item in arr:\n        if item not in seen:\n            result.append(item)\n            seen.add(item)\n    return result", "category": "Python"}, {"instruction": "Update the following code to be Python 3 compatible.", "input": "print \"Welcome to the Program.\"", "output": "print(\"Welcome to the Program.\")", "category": "Python"}, {"instruction": "Create a data structure suitable for storing a list of scores for a game.", "input": "", "output": "scores = []\n\n# Function to add a new score to the scores list\ndef add_score(score):\n    scores.append(score)\n\n# Function to display all the scores in the scores list\ndef display_scores():\n    for score in scores:\n        print(score)", "category": "Python"}, {"instruction": "Remove all non-alphabetical characters from the given string.", "input": "String: \"Hello,123_[World!]%$\"", "output": "import re\n\ndef remove_non_alphabetic(string):\n  return re.sub(\"[^a-zA-Z ]\", \"\", string)", "category": "Python"}, {"instruction": "Write a Python program to find the closest number in a given array to a given number.", "input": "Array: [3, 6, 9, 12, 15], Number: 10", "output": "def closest_number(nums, number): \n  min_diff = abs(nums[0] - number) \n  min_num = nums[0] \n  for num in nums:\n    min_diff_temp = abs(num - number) \n    if min_diff_temp < min_diff:\n    \tmin_diff = min_diff_temp\n    \tmin_num = num\n  return min_num", "category": "Python"}, {"instruction": "Suggest a solution to print the third character from a string in Python.", "input": "String = \"Hello, world!\"", "output": "print(string[2]) # Output: l", "category": "Python"}, {"instruction": "Build a program in Python to check if a number is Odd or Even.", "input": "", "output": "def odd_even(n):\n\tif (n % 2 == 0):\n\t\tprint(\"Even\")\n\telse:\n\t\tprint(\"Odd\")", "category": "Python"}, {"instruction": "Determine the syntax for a function call in Python.", "input": "", "output": "Function calls in Python must include the name of the function followed by parentheses and the arguments inside the parentheses. If you do not include any arguments, the parentheses should still be included. An example would be:\n\n\u2003\u2003my_function()", "category": "Python"}, {"instruction": "Write a function to identify all palindromes in the given string.", "input": "", "output": "def find_palindromes(string):\n    result = []\n    for i in range(len(string)):\n        for j in range(i+2,len(string)+1):\n            if string[i:j] == string[j-1:i-1:-1]:\n                result.append(string[i:j])\n    return result", "category": "Python"}, {"instruction": "What is the difference between while and do while loops in programming?", "input": "", "output": "The main difference between while and do while loops is that a while loop will only execute the loop body if the condition evaluates to true, while a do while loop will always execute the loop body at least once, and then continue to execute the loop body until the condition evaluates to false. This means that a do while loop is guaranteed to run at least once, whereas a while loop may not run at all.", "category": "Python"}, {"instruction": "Write a function to calculate the sum of the elements of an array with float values.", "input": "", "output": "def sum_float_array(float_array):\n    total = 0\n    for i in float_array:\n        total += i\n    return total", "category": "Python"}, {"instruction": "Add a method to the Customer class to print out customer's name, age and email", "input": "", "output": "class Customer:\n    def __init__(self, name, age, email):\n        self.name = name\n        self.age = age\n        self.email = email\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n    \n    def get_email(self):\n        return self.email\n    \n    def print_customer_data(self):\n        print('Name: ' + self.name + ', Age: ' + str(self.age) + ', Email: ' + self.email)", "category": "Python"}, {"instruction": "What is the principal difference between a linked list and an array?", "input": "", "output": "The principal difference between a linked list and an array is that a linked list is a collection of points that each point to their respective memory locations, while an array is a contiguous block of memory locations. A linked list has the advantage of being able to insert and delete nodes at any time, while the elements of an array must be shifted to make room for new elements. Similarly, linked lists do not require a pre-allocated block of memory, so it is more memory efficient than an array.", "category": "Python"}, {"instruction": "Create a class for customer data.", "input": "", "output": "class Customer:\n    def __init__(self, name, age, email):\n        self.name = name\n        self.age = age\n        self.email = email\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n    \n    def get_email(self):\n        return self.email", "category": "Python"}, {"instruction": "Write a function in Python to take a string as input and return a dictionary with the count of each letter in the string.", "input": "string = \"This is a string of characters\"", "output": "def count_letters(string):\n    letter_count = {}\n    for char in string:\n        if char not in letter_count:\n            letter_count[char] = 1\n        else:\n            letter_count[char] += 1;\n    return letter_count\n\nprint(count_letters(string))", "category": "Python"}, {"instruction": "Create a function in Python to split a given string into a list of strings using a space as a delimiter.", "input": "string = \"This is a string to split\"", "output": "def split_string(string):\n    return string.split(\" \")\n\nprint(split_string(string))", "category": "Python"}, {"instruction": "Create a function in Python to remove all characters other than letters and numbers from a string.", "input": "string = \"This#%&string c&$o#th=esa#@ll cha*%$racter\"", "output": "import re\n\ndef remove_characters(string):\n    return re.sub('[^A-Za-z0-9]+', '', string)\n\nprint(remove_characters(string))", "category": "Python"}, {"instruction": "Create a function in Python that takes a string as an input and returns a new string that is the reverse of the input string.", "input": "string = \"Reverse Me\"", "output": "def reverse_string(string):\n    return string[::-1]\n\nprint(reverse_string(string))", "category": "Python"}, {"instruction": "Write a function in Python that will take two integers as inputs and compute their average.", "input": "int1 = 10\nint2 = 15", "output": "def calculate_average(int1, int2):\n    return (int1 + int2) / 2\n\nprint(calculate_average(int1, int2))", "category": "Python"}, {"instruction": "Write a function that takes in a string of text and counts the number of times each letter appears in the string", "input": "text = \"The quick brown fox jumps over the lazy dog\"", "output": "def count_letters(text):\n    letter_count = {}\n    for character in text:\n        if character not in letter_count:\n            letter_count[character] = 1\n        else:\n            letter_count[character] += 1\n    return letter_count\n\nprint(count_letters(text))", "category": "Python"}, {"instruction": "Create a Python function which takes a dictionary and prints the contents of the dictionary in a human readable format.", "input": "", "output": "def printDictionary(dictionary):\n    for key in dictionary.keys():\n        print(key, \":\", dictionary[key])", "category": "Python"}, {"instruction": "Implement an algorithm in Python to find the GCD (Greatest Common Divisor) of two numbers", "input": "", "output": "def gcd(a, b): \n  \n   if (a == 0): \n       return b \n       \n   if (b == 0): \n       return a \n       \n   if (a == b): \n       return a \n       \n   if (a > b): \n       return gcd(a-b, b) \n      \n   return gcd(a, b-a)", "category": "Python"}, {"instruction": "Create a Python function which takes a given string and replaces all its characters with the next consecutive character.", "input": "", "output": "def shift_string(string):\n  result = \"\"\n  for ch in string:\n    result += chr(ord(ch) + 1)\n  return result", "category": "Python"}, {"instruction": "Sort the following list using Python's built-in sorting functions.", "input": "unsorted_list = [5, 1, 6, 8, 2, 4]", "output": "unsorted_list.sort()\n# unsorted_list is now [1, 2, 4, 5, 6, 8]", "category": "Python"}, {"instruction": "Create an algorithm that takes in an array of integers and returns true if two of the integers add up to a target number.", "input": "example_array = [10, 7, 8, 3, 5]\ntarget_num = 13", "output": "def two_sum_algorithm(arr, target): \n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] + arr[j] == target: \n                return True\n  \n    return False\n\ntwo_sum_algorithm(example_array, target_num)", "category": "Python"}, {"instruction": "Create a class in Python called Cat with constructor that takes three arguments i.e. name, color and age. The class should have three methods called meow, purr and display_info.", "input": "", "output": "class Cat:\n    def __init__(self, name, color, age):\n        self.name = name\n        self.color = color\n        self.age = age\n    \n    def meow(self):\n        print('%s the %s cat meows!' % (self.name, self.color))\n    \n    def purr(self):\n        print('%s the %s cat purrs contentedly.' % (self.name, self.color))\n    \n    def display_info(self):\n        print('%s is a %s cat and is %d years old.' % (self.name, self.color, self.age))", "category": "Python"}, {"instruction": "Create an algorithm to merge two sorted linked lists.", "input": "Linked List 1: 1 - 4 - 7\nLinked List 2: 2 - 5 - 8", "output": "def merge_sorted_lists(list1, list2):\n    if not list1:\n        return list2\n    if not list2:\n        return list1\n        \n    if list1.val < list2.val:\n       head = list1\n       list1 = list1.next\n   else:\n       head = list2\n       list2 = list2.next\n  \n   cur = head\n  \n   while list1 and list2:\n       if list1.val < list2.val:\n           cur.next = list1\n           list1 = list1.next\n       else:\n           cur.next = list2\n           list2 = list2.next\n          \n       cur = cur.next\n          \n   cur.next = list1 if list1 else list2\n  \n   return head", "category": "Python"}, {"instruction": "Write a TensorFlow program for a linear regression model.", "input": "", "output": "import tensorflow as tf\n\n# Create variables\na = tf.Variable(0.5)\nb = tf.Variable(0.5)\n\n# > Create the input data, y and x\nx = tf.placeholder(tf.float32)\ny = tf.placeholder(tf.float32)\n\n# > Model: y = ax + b\ny_pred = a * x + b\n\n# > Loss: Mean Squared Error (MSE)\nloss = tf.reduce_mean(tf.square(y_pred - y))\n\n# > Optimizer: Gradient Descent\ntrain_op = tf.train.GradientDescentOptimizer(0.01).minimize(loss)\n\n# > Initialize all variables\ninit = tf.global_variables_initializer()\n\n# > Execute the graph\nwith tf.Session() as sess:\n    sess.run(init)\n    for step in range(200):\n        sess.run(train_op, {x: [1, 2, 3, 4], y: [2, 4, 6, 8]})\n        if (step + 1) % 20 == 0:\n            loss_val = sess.run(loss, {x: [1, 2, 3, 4], y: [2, 4, 6, 8]})\n            print(\"Step:\", step + 1, \" Loss:\", loss_val)", "category": "Python"}, {"instruction": "Explain B-Tree data structure.", "input": "", "output": "B-trees are a kind of self-balancing search tree data structure. They are frequently used in databases, file systems, and operating systems. A B-tree consists of a root node, internal nodes, and leaf nodes. The root may or may not have values associated with it. Internal nodes store values and pointers to subtrees to the left and right. Leaf nodes store the actual data. The keys in B-trees are usually sorted. As data is added or deleted, the tree self-balances to maintain order, making searching and inserting items efficient. B-trees are optimal for systems with slow or limited seek times (such as hard drives), while other data structures like binary search trees are better suited for systems with faster seek times.", "category": "Python"}, {"instruction": "Compute the sum of elements in the following input array.", "input": "[4, 7, 2, 9, 10, 15]", "output": "def sum_array(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total", "category": "Python"}, {"instruction": "Count the number of vowels present in the input text.", "input": "Good morning!", "output": "def vowel_count(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for c in text:\n        if c.lower() in vowels:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Implement quicksort in Python", "input": "", "output": "def quicksort(array):\n    if len(array) < 2:\n        return array\n    else:\n        pivot = array[0]\n        less = [i for i in array[1:] if i <= pivot]\n        greater = [i for i in array[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)", "category": "Python"}, {"instruction": "Use TensorFlow to build a machine learning model for predicting continuous values given a data set of temperature vs electricity consumption.", "input": "", "output": "import tensorflow as tf\nimport matplotlib.pyplot as plt\n\n#Import the dataset\nx = tf.placeholder(tf.float32)\ny = tf.placeholder(tf.float32)\n  \n# Create our model\nmodel = tf.keras.Sequential([tf.keras.layers.Dense(1, input_shape=[1])])\n\n# Compile the model\nmodel.compile(loss='mean_squared_error', optimizer='sgd')\n\n# Fit the model\nmodel.fit(x, y, epochs=10)\n\n# Plot the result\nplt.plot(x, y, 'ro', label='original data')\nplt.plot(x, model.predict(x), label='predicted')\nplt.xlabel('Temperature')\nplt.ylabel('Electricity Consumption')\nplt.legend()\nplt.show()", "category": "Python"}, {"instruction": "Use dictionaries in Python to merge the data from two given dictionaries.", "input": "dictA = {\n  'keyA': 1,\n  'keyB': 2\n}\ndictB = {\n  'keyC': 3,\n  'keyD': 4\n}", "output": "dictC = {**dictA, **dictB}", "category": "Python"}, {"instruction": "Edit the given code snippet to reverse the elements of a list in Python.", "input": "", "output": "def reverseList(list): \n    list.reverse() \n    return list", "category": "Python"}, {"instruction": "How would you form a list from two lists by taking elements at same index from both the lists?", "input": "", "output": "def form_list_from_list(list1, list2):\n    return [list1[i] + list2[i] for i in range(len(list1))]\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3] \n    list2 = [4, 5, 6]\n    print(form_list_from_list(list1, list2))", "category": "Python"}, {"instruction": "Write a code to get the second smallest number from a list of integers.", "input": "", "output": "def second_smallest(numbers):\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]\n\nif __name__ == '__main__':\n    numbers = [1, 5, 2, 9, 3, 6]\n    print(second_smallest(numbers))", "category": "Python"}, {"instruction": "How would you calculate the distance between two points in a three-dimensional space?", "input": "", "output": "def distance_3d(x1, y1, z1, x2, y2, z2):\n    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2 + (z2 - z1)**2)\n\nif __name__ == '__main__':\n    x1, y1, z1 = 1, 2, 3\n    x2, y2, z2 = 5, 6, 7\n    print(distance_3d(x1, y1, z1, x2, y2, z2))", "category": "Python"}, {"instruction": "Edit the following code to print the position of an element x in a list y.", "input": "list y = [2, 3, 4, 1, 5]\nx = 1", "output": "list y = [2, 3, 4, 1, 5]\nx = 1\n\ndef find_position(y, x):\n    for index, value in enumerate(y):\n        if value == x:\n            return index\n    return f\"{x} is not in the list\"\n\nif __name__ == '__main__':\n    print(find_position(y, x))", "category": "Python"}, {"instruction": "Compose an algorithm to determine whether a given string contains all unique characters.", "input": "", "output": "def is_unique(string):\n   char_set = set()\n   for char in string:\n       if char in char_set:\n           return False\n       else:\n           char_set.add(char)\n   return True", "category": "Python"}, {"instruction": "Write a Python program to print the numbers of a specified list after removing even numbers from it.", "input": "", "output": "def print_odd(numbers):\n    odd_numbers = []\n    for num in numbers:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    return odd_numbers\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(print_odd(numbers))", "category": "Python"}, {"instruction": "How would you generate a Fibonacci sequence up to n in a list?", "input": "", "output": "def generate_fibonacci_sequence(n):\n    result = [1]\n \n    current_number = 1\n    next_number = 1\n    while current_number <= n:\n        result.append(current_number)\n        current_number, next_number = next_number, current_number + next_number\n \n    return result\n\nif __name__ == '__main__':\n print(generate_fibonacci_sequence(10))", "category": "Python"}, {"instruction": "Create a program that finds the average of two numbers.", "input": "7 and 9", "output": "def find_average(num1, num2):\n    return (num1 + num2) / 2\n\nif __name__ == '__main__':\n    print(find_average(7, 9))", "category": "Python"}, {"instruction": "Using the array below, count the occurrence of the number 3.", "input": "arr = [1, 1, 2, 3, 3, 3, 4, 5]", "output": "arr = [1, 1, 2, 3, 3, 3, 4, 5]\n\ndef count_number(arr, num):\n    count = 0\n    for val in arr:\n        if val == num:\n            count += 1\n    return count\n\ncount = count_number(arr, 3)\nprint(count)  # Output: 3", "category": "Python"}, {"instruction": "Given an array of integers, replace each element of the array with its square.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def get_squares(arr):\n    squares = []\n    for num in arr:\n        squares.append(num ** 2)\n    return squares\n\narr = [1, 2, 3, 4, 5]\nsquares = get_squares(arr)\n\nprint(*squares)  # Output: 1 4 9 16 25", "category": "Python"}, {"instruction": "Sort the following list of numbers in increasing order without using any built-in sorting method.", "input": "arr = [2, 5, 3, 8, 7]", "output": "def sort_increasing(arr):\n    for i in range(len(arr)):\n        min_index = i\n        for j in range(i, len(arr)):\n            if arr[min_index] > arr[j]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr\n\narr = [2, 5, 3, 8, 7] \nsorted_arr = sort_increasing(arr)\nprint(*sorted_arr) # Output: 2 3 5 7 8", "category": "Python"}, {"instruction": "Programmatically generate a random password of length 8 that contains at least one lowercase letter, one uppercase letter, one number, and one special character.", "input": "", "output": "import string\nimport random\n\ndef generate_password():\n    letters = string.ascii_letters\n    numbers = string.digits\n    symbols = string.punctuation\n\n    chars = letters + numbers + symbols\n    length = 8\n\n    password = \"\".join(random.sample(chars, length))\n    if any(char.islower() for char in password) \\\n        and any(char.isupper() for char in password) \\\n            and any(char.isdigit() for char in password) \\\n                and any(char in symbols for char in password):\n        return password\n\nrandom_password = generate_password()\nprint(random_password)  # Output: eQ@0?St$", "category": "Python"}, {"instruction": "Given the following array and a number k, determine if two elements from the array add up to k.", "input": "arr = [10, 15, 3, 7], k = 17", "output": "def findSum(arr, k):\n    s = set()\n    for num in arr:\n        diff = k - num\n        if diff in s:\n            return True\n        s.add(num)\n    return False\n\narr = [10, 15, 3, 7] \nk = 17 \nprint(findSum(arr, k))  # Output: True", "category": "Python"}, {"instruction": "Replace the values in the following array with its cumulative sum.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def cumulative_sum(arr):\n    cum_sum = []\n    temp_sum = 0\n    for num in arr:\n        temp_sum += num\n        cum_sum.append(temp_sum)\n    return cum_sum\n\narr = [1, 2, 3, 4, 5] \ncum_sum = cumulative_sum(arr)\n\nprint(cum_sum)  # Output: [1, 3, 6, 10, 15]", "category": "Python"}, {"instruction": "Given the following text, create a Python function that finds the number of unique words in the text.", "input": "This is a sample text to find the number of unique words.", "output": "def find_unique_words(text):\n    words = set(text.split(\" \"))\n    return len(words)\n\nunique_words = find_unique_words(\"This is a sample text to find the number of unique words.\")\nprint(unique_words)", "category": "Python"}, {"instruction": "Create an algorithm to determine if two strings are rotations of each other.", "input": "\"abcde\", \"eabcd\"", "output": "def is_rotation(str1, str2):\n    return len(str1) == len(str2) and str2 in str1+str1", "category": "Python"}, {"instruction": "Create a function to get the root of a quadratic equation", "input": "1, 4, 4", "output": "def get_roots_of_quad_eqn(a, b, c):\n    # compute discriminant \n    d = (b**2) - (4 * a * c)\n    \n    # compute roots\n    root1 = (-b + math.sqrt(d)) / (2 * a) \n    root2 = (-b - math.sqrt(d)) / (2 * a) \n    \n    # return the roots\n    return root1, root2\n\nif __name__ == '__main__':\n    a, b, c = 1, 4, 4\n    print(get_roots_of_quad_eqn(a, b, c))", "category": "Python"}, {"instruction": "Using Tensorflow, set up a model to predict the classification of a handwritten digit.", "input": "", "output": "import tensorflow as tf\n\n#load the MNIST data\nmnist = tf.keras.datasets.mnist\n\n#split the data into train and test\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n#normalize the data between 0 and 1\nx_train = tf.keras.utils.normalize(x_train, axis=1)\nx_test = tf.keras.utils.normalize(x_test, axis=1)\n\n#build the model\nmodel = tf.keras.models.Sequential()\n\n# add the input layer of the model\nmodel.add(tf.keras.layers.Flatten())\n\n# add the hidden layers\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))\n\n#add the output layer\n#NOTE: We are using output dimension as 10 because we are trying to predict 10 classifications (i.e. 0 to 9)\nmodel.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))\n\n#compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n#train the model\nmodel.fit(x_train, y_train, epochs=3)\n\n#evaluate the model\nval_loss, val_acc = model.evaluate(x_test, y_test) \nprint(val_loss, val_acc)", "category": "Python"}, {"instruction": "Design a function that will print out the leap years in a given interval", "input": "From 2015 to 2050", "output": "def print_leap_years(start_year, end_year): \n    for year in range(start_year, end_year + 1):\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            print(year)\n\nprint_leap_years(2015, 2050)", "category": "Python"}, {"instruction": "Explain why it is important to have exception handling", "input": "", "output": "Exception handling is important for a program as it allows the program to gracefully handle any unexpected or erroneous conditions. This helps keep the program running by providing meaningful feedback and prompts to the user. It also helps reduce the risk of having some part of the program crashing due to an unforeseen and avoidable event. Exception handling also encourages developers to write more robust and structured code as they are aware that their code might be faced with unpredictable conditions, and they will expect their code to be able to handle them gracefully.", "category": "Python"}, {"instruction": "create a function that calculates the total cost of a meal including taxes and tips.", "input": "meal_price = 35\nsales_tax = 0.09\ntip_percentage = 0.18", "output": "\"\"\"\nCreate a function that calculates the total cost of a meal including taxes and tips\n\"\"\"\n\ndef calculate_total_meal_cost(meal_price, sales_tax, tip_percentage): \n    # Calculate subtotal\n    subtotal = meal_price + meal_price * tip_percentage\n    # Calculate tax\n    tax =  subtotal * sales_tax\n    # Calculate total\n    total = subtotal + tax\n\n    return total\n\nif __name__ == '__main__': \n    meal_price = 35\n    sales_tax = 0.09\n    tip_percentage = 0.18\n    print(\"Total cost of meal is: \" + str(calculate_total_meal_cost(meal_price, sales_tax, tip_percentage)))", "category": "Python"}, {"instruction": "How would you check an integer is divisible by 7 or not in Python?", "input": "", "output": "We can use the modulo operator (%) to check if an integer is divisible by another number in Python.\n\nThe modulo operator (%) returns the remainder of the division. If the remainder is zero then the two numbers are divisible.\n\nFor example, to check if an integer is divisible by 7, we can use:\n\nif (x % 7) == 0:\n    # x is divisible by 7\nelse:\n    # x is not divisible by 7", "category": "Python"}, {"instruction": "Explain the concept of merging two sorted lists.", "input": "", "output": "Merging two sorted lists involves examining elements of each list and inserting them in order into a third list. This process continues until all elements from the two lists have been inserted into the third resulting list. The algorithm requires that the two starting lists be in sorted order, although the elements can be in any order (ascending, descending, or random) as long as each list is sorted.", "category": "Python"}, {"instruction": "Given the following 2D array. Create a function to find the sum of each row.", "input": "Array = [[2, 5, 6], [4, 1, 3], [5, 9, 0]]", "output": "def sum_row(arr):\n    total = []\n    for row in arr:\n        total.append(sum(row))\n    return total", "category": "Python"}, {"instruction": "Suppose we have a list of numbers, write a Python code to compute the average of the list.", "input": "list = [1, 5, 8, 9, 10]", "output": "def find_average(list):\n    sum = 0\n    for num in list:\n        sum += num\n    return sum/len(list)", "category": "Python"}, {"instruction": "Design an object-oriented class in Python that stores a book's title, author, and publisher.", "input": "", "output": "class Book:\n  \n  def __init__(self, title, author, publisher):\n    self._title = title\n    self._author = author\n    self._publisher = publisher\n\n  def get_title(self):\n    return self._title\n\n  def set_title(self, title):\n    self._title = title\n\n  def get_author(self):\n    return self._author\n  \n  def set_author(self, author):\n    self._author = author\n\n  def get_publisher(self):\n    return self._publisher\n  \n  def set_publisher(self, publisher):\n    self._publisher = publisher", "category": "Python"}, {"instruction": "Build a Python dictionary that contains five elements.", "input": "", "output": "myDictionary = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\",\n  \"key4\": \"value4\",\n  \"key5\": \"value5\"\n}", "category": "Python"}, {"instruction": "Build a Python function that normalizes a given array.", "input": "array = [4, 8, 15, 23, 42]", "output": "def normalize(array):\n    min_val = min(array)\n    max_val = max(array)\n    normalized = [ (x-min_val) / (max_val-min_val) for x in array]\n  return normalized", "category": "Python"}, {"instruction": "Given an array of integers, write a function to find the maximum difference between a lower element and an upper element.", "input": "Array: [3, 10, 2, 6, 4, 8, 1]", "output": "def findMaxDifference(arr):\n    min_element = arr[0]\n    max_difference = arr[1] - arr[0]\n    for num in arr:\n        if num - min_element > max_difference:\n            max_difference = num - min_element\n        if num < min_element:\n            min_element = num\n    return max_difference", "category": "Python"}, {"instruction": "What is the basic syntax to define a function in Python 3?", "input": "", "output": "def function_name(parameters):\n    \"\"\" function docstring \"\"\"\n    statement(s)", "category": "Python"}, {"instruction": "Suggest a data structure to efficiently store a set of phone numbers", "input": "", "output": "A good data structure for efficiently storing a set of phone numbers is a Hash Table. This data structure uses a hash function to map each phone number to the value(s) associated with it and stores the values in a linked list. This data structure provides constant time lookup, insert and delete operations, making it ideal for storing a large set of phone numbers.", "category": "Python"}, {"instruction": "Explain how you would use the givew array to create a valid JSON output.", "input": "array = [\n  \"firstname\" => \"Nikola\", \n  \"lastname\" => \"Tesla\", \n  \"birthdate\" => \"10-07-1856\"\n ]", "output": "We can use the given array to create a valid JSON output by first converting it into an object by wrapping it in curly brackets and then assign keys for each value. For example, \n{\n  \"firstname\": \"Nikola\", \n  \"lastname\": \"Tesla\", \n  \"birthdate\": \"10-07-1856\"\n }\nOnce the object is created, it need to be converted to a JSON string using a JSON library such as JSON.stringify() method in JavaScript. The resulting string looks like this:\n\n\"{\\\"firstname\\\":\\\"Nikola\\\",\\\"lastname\\\":\\\"Tesla\\\",\\\"birthdate\\\":\\\"10-07-1856\\\"}\"", "category": "Python"}, {"instruction": "Implement a class in Python which implements the given method.", "input": "class Test:\n    def print_name(name):\n        print(name)", "output": "class Test:\n    def print_name(self, name):\n        print(name)", "category": "Python"}, {"instruction": "Create a new dictionary in Python with the given keys and values.", "input": "Keys: A, B\nValues: 1, 2", "output": "d = {'A': 1, 'B': 2}", "category": "Python"}, {"instruction": "Develop a function to fetch the maximum element from a given dictionary.", "input": "d = {'Name': 'John', 'Age': 28, 'Score': 98}", "output": "def getMaxElement(d): \n  maxElement = max(d.values()) \n  for key, value in d.items(): \n    if (value == maxElement):  \n        return key, value", "category": "Python"}, {"instruction": "Create a loop through a given list of numbers and check if the number is divisible by 3.", "input": "nums = [3, 5, 7, 8, 10, 11]", "output": "for num in nums:\n  if num % 3 == 0:\n    print (f\"{num} is divisible by 3.\")", "category": "Python"}, {"instruction": "Apply K-means clustering to a 3-dimensional dataset given a certain number of clusters.", "input": "Number of Clusters = 4", "output": "from sklearn.cluster import KMeans\n\n# prepare the data\nX = [... the 3-dimensional dataset ...]\n\n# define the clustering model\nkmeans_model = KMeans(n_clusters=4)\n\n# fit the model\nkmeans_model.fit(X)\n\n# get the cluster centers\ncluster_centers = kmeans_model.cluster_centers_\n\n# get the labels for each point\nlabels = kmeans_model.labels_", "category": "Python"}, {"instruction": "Train a machine learning model for a classification problem.", "input": "X = [[0, 1], [1, 1], [0, 0], [1, 0]]\ny = [1, 0, 1, 0]", "output": "# importing the necessary libraries\nimport numpy as np \nfrom sklearn.svm import SVC \n\n# creating a svm classifier\nclf = SVC(kernel = 'linear') \n\n# fitting the model \nclf.fit(X, y)", "category": "Python"}, {"instruction": "Run a sentiment analysis on a given text.", "input": "Text: \"The movie was amazing!\"", "output": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nanalyzer = SentimentIntensityAnalyzer()\n\n# run sentiment analysis\nsentiment = analyzer.polarity_scores(text)\n\nfor key in sentiment:\n    print('{0}: {1}'.format(key, sentiment[key]))\n\n# output\ncompound: 0.6249\nneg: 0.0\nneu: 0.406\npos: 0.594", "category": "Python"}, {"instruction": "Design a function that takes two parameters a and two and returns the result of a multiplied by two", "input": "", "output": "def mul_two(a, b):\n    return a * b\n\nif __name__ == '__main__':\n    x = int(input('Enter first number: '))\n    y = int(input('Enter second number: '))\n    print(mul_two(x, y))", "category": "Python"}, {"instruction": "Create a program to identify a given string as a valid ISBN 10 code", "input": "", "output": "def is_valid_isbn_10(code):\n    # check for the length\n    if len(code) != 10:\n        return False\n    # check for leading \"X\" characters\n    if code.startswith(\"X\"):\n        return False\n    # check for digits\n    if not code.isdigit():\n        return False\n    # calculate the check digit\n    sum = 0\n    for i in range(9): \n        sum += int(code[i]) * (10 - i)\n    checksum = sum % 11\n    # check for valid check digit\n    if not (checksum==int(code[9]) or (checksum == 10 and code[9] == 'X')):\n        return False\n    # No errors found\n    return True\n\nif __name__ == '__main__':\n    code = input('Enter the ISBN-10 code: ')\n    print(is_valid_isbn_10(code))", "category": "Python"}, {"instruction": "Create an algorithm that returns an array of the unique items in a given list.", "input": "[1, 2, 4, 2, 5, 6, 7, 1, 4]", "output": "def unique(arr):\n    unique_list = []\n    for el in arr:\n        if el not in unique_list:\n            unique_list.append(el)\n    return unique_list", "category": "Python"}, {"instruction": "Find the average value of the following array in Python.", "input": "arr = [1,2,3,4,5]", "output": "import numpy as np\n\narr = [1,2,3,4,5]\naverage = np.mean(arr)\nprint(f\"The average of the array is: {average}\")", "category": "Python"}, {"instruction": "Write a regex (in Python) to match the following pattern: \"an apple a day keeps the doctor away\"", "input": "", "output": "import re\n\nregex = r\"\\ban\\sapple\\s\\ba\\sday\\skeeps\\sthe\\sdoctor\\saway\\b\"", "category": "Python"}, {"instruction": "Create a function to format a given list of numbers with commas as thousands separators.", "input": "", "output": "def format_numbers(nums):\n    formatted_nums = []\n    for num in nums:\n        formatted_nums.append(\"{:,}\".format(num))\n    return formatted_nums", "category": "Python"}, {"instruction": "Using the given NumPy array, print out all the elements that are greater than 5.", "input": "import numpy as np\n\narr = np.array([4, 6, 2, 8, 0, 7, 5])", "output": "import numpy as np\n\narr = np.array([4, 6, 2, 8, 0, 7, 5])\n\nprint(\"Elements greater than 5:\")\nfor element in arr:\n if element > 5:\n print(element)", "category": "Python"}, {"instruction": "Write a Python code to search for a given keyword in a dictionary.", "input": "dictionary = {\n    \u201cCar\u201d: \u201cA vehicle with four wheels\u201d,\n    \u201cLaptop\u201d: \u201cA computer for personal use\u201d,\n    \u201cGame\u201d: \u201cAn activity for entertainment\u201d\n    }", "output": "def search(dic, keyword):\n    for key, value in dic.items():\n        if keyword in key:\n            return value\n    return \"No matching keyword found!\"\nsearch(dictionary, 'Laptop')", "category": "Python"}, {"instruction": "Use a built-in Python method to print the contents of a list in reverse order.", "input": "arr = [1, 2, 3, 4]", "output": "# use a built-in python method to print the list in reverse order\narr.reverse() # using the list reverse method\nprint(arr)", "category": "Python"}, {"instruction": "Using a dictionary comprehension, select the keys that start with a specific letter.", "input": "d = {'cat' : 1, 'dog' : 2, 'mouse' : 3}", "output": "# select the keys that start with 'c'\ndict = {k: v for k, v in d.items() if k.startswith('c')}", "category": "Python"}, {"instruction": "Generate a unique ID for a given string.", "input": "s = \"Hello World\"", "output": "# generate a unqiue ID for the given string\nimport uuid \n  \n# string \nstring = \"Hello World\"\n  \n# printing the original string \nprint(\"The original string is : \" + string) \n  \n# generating the unique ID \nstring_id = uuid.uuid4() \n  \n# printing the unique ID \nprint(\"The unique id for given string is : \", string_id)", "category": "Python"}, {"instruction": "Construct a for loop to check for prime numbers up to a given number.", "input": "n = 20", "output": "# construct a for loop to check for prime numbers up to 20\nfor num in range(2, n+1):\n    isPrime = True\n    \n    for i in range(2, num):\n        if (num % i == 0):\n            isPrime = False\n            break\n    if isPrime:\n        print(num, \" is a prime number\")", "category": "Python"}, {"instruction": "Add an 'except' statement to the following python code to prevent a ValueError.", "input": "a = 5\nb = 0\n\ntry:\n    c = a / b", "output": "a = 5\nb = 0\n\ntry:\n    c = a / b\nexcept ZeroDivisionError:\n    print(\"b cannot be zero\")", "category": "Python"}, {"instruction": "Using a recursive algorithm, reverse the order of elements in a list.", "input": "arr = [1, 2, 3, 4, 5]", "output": "# recursive approach\ndef recursive_reverse(arr, length):\n    if length == 0:\n        return\n\n    recursive_reverse(arr, length - 1)\n    arr.append(arr[length - 1])\n    arr.pop(length - 1)\n    \n# call function on the data\nrecursive_reverse(arr, len(arr))", "category": "Python"}, {"instruction": "Create a matrix of 5 x 4 and set the values to 0.", "input": "", "output": "# create a matrix of 5 x 4\nmatrix = [[0 for x in range(4)] for y in range(5)]", "category": "Python"}, {"instruction": "For a given list of numbers, write a palindrome checker.", "input": "sample = [1, 2, 3, 4, 5, 4, 3, 2, 1]", "output": "def is_palindrome(sample):\n    res = True\n    i = 0\n    j = len(sample) - 1\n    while i < j:\n        if sample[i] != sample[j]:\n            res = False\n            break\n        else:\n            i += 1\n            j -= 1\n            \n    return res", "category": "Python"}, {"instruction": "Find the 2 smallest elements in a Python list of integers.", "input": "[2, 3, 5, 8, 4, 9, 11]", "output": "min1, min2 = list[0], list[1]\nfor num in list:\n    if num < min1:\n        min2 = min1\n        min1 = num\n    elif num < min2:\n        min2 = num", "category": "Python"}, {"instruction": "Create a class in Python with the attributes name and age.", "input": "", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "category": "Python"}, {"instruction": "Create an array of 10 numbers in Python with values from 0 to 9.", "input": "", "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "category": "Python"}, {"instruction": "Create a for loop in Python that traverse a list and prints out every second element", "input": "lst = [1,2,3,4,5]", "output": "for i in range(0, len(lst), 2):\n    print(lst[i])", "category": "Python"}, {"instruction": "Create a function that takes two strings, s1 and s2, and checks to see if s2 is a substring of s1", "input": "s1 = \"Hello World\"\ns2 = \"Hello\"", "output": "def isSubstring(s1, s2): \n    if s2 in s1: \n        return True\n    else: \n        return False", "category": "Python"}, {"instruction": "Formulate a statement using Python that will return the value 'True' when the user's age is equal to 21.", "input": "userage = 21", "output": "if userage == 21:\n    print(True)", "category": "Python"}, {"instruction": "Create a list containing the number of characters in each word of the sentence.", "input": "sentence = \"the quick brown fox jumps over the lazy dog\"", "output": "def count_characters_per_word(sentence):\n    words = sentence.split(' ') \n    char_count_per_word = [] \n    for word in words:\n        char_count_per_word.append(len(word)) \n    return char_count_per_word\n\nprint(count_characters_per_word(\"the quick brown fox jumps over the lazy dog\"))\n# Output: [3, 5, 5, 3, 5, 3, 4, 3]", "category": "Python"}, {"instruction": "Create a dictionary containing the count of each word in the sentence.", "input": "sentence = \"the quick brown fox jumps over the lazy dog\"", "output": "def count_words(sentence):\n    words = sentence.split()\n    word_count = {}\n    for word in words:\n        if word in word_count.keys():\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count\n\nprint(count_words(\"the quick brown fox jumps over the lazy dog\"))\n# Output: {'the': 2, 'quick': 1, 'brown': 1, 'fox': 1, 'jumps': 1, 'over': 1, 'lazy': 1, 'dog': 1}", "category": "Python"}, {"instruction": "Design a function to filter words based on give characters.", "input": "characters = \"aeiou\"\nwords = ['apple','elephant','mountain','river']", "output": "def filter_words(characters, words):\n    result = []\n    for word in words:\n        if set(characters).issubset(word):\n            result.append(word)\n    return result\n\nprint(filter_words(\"aeiou\", ['apple','elephant','mountain','river']))\n# Output: ['apple', 'elephant', 'river']", "category": "Python"}, {"instruction": "Given a list of numbers, write a Python program to find the maximum and minimum number.", "input": "[4, 7, -2, 11, 9]", "output": "Maximum Number = 11\nMinimum Number = -2", "category": "Python"}, {"instruction": "Create an API endpoint for the following model.", "input": "class Comment(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)", "output": "from django.http import JsonResponse\n\ndef comments_list(request):\n    if request.method == 'GET':\n        comments = Comment.objects.all()\n        comments_list = [{\n            'id': comment.id,\n            'user': comment.user.username,           \n            'content': comment.content,\n            'created_at': comment.created_at,\n            'updated_at': comment.updated_at\n        } for comment in comments]\n        return JsonResponse(comments_list, safe=False)", "category": "Python"}, {"instruction": "Add a feature to the following code that prints the current date and time.", "input": "def hello_world():\n    print(\"Hello world!\")", "output": "import datetime\ndef hello_world():\n    print(\"Hello world!\")\n    now = datetime.datetime.now()\n    print(now.strftime(\"%Y-%m-%d %H:%M:%S\"))", "category": "Python"}, {"instruction": "Describe the sorting algorithm Bubble Sort.", "input": "", "output": "Bubble sort is an algorithm for sorting a collection of items. It iterates over the collection and compares adjacent items, swapping them if they are out of order. This step is repeated until all items are sorted. Bubble sort has a time complexity of O(n^2), making it a slow sorting algorithm. It is still often used as it is simple to implement and requires little memory.", "category": "Python"}, {"instruction": "Write a python to convert an IP address from dot-decimal notation to binary notation.", "input": "192.168.1.1", "output": "def convert_ip_address(ip_address):\n    \"\"\"\n    Convert IP address from dot-decimal notation (e.g. 192.168.1.1) to binary.\n    \"\"\"\n    # Split the IP address in octets\n    octets = ip_address.split('.')\n    \n    # Convert each octet to binary\n    binary_octets = [bin(int(numeric_octet))[2:].zfill(8) for numeric_octet in octets]\n    \n    # Join the binary octets and return the IP address in binary notation\n    return ''.join(binary_octets)\n\nif __name__ == '__main__':\n    ip_address = '192.168.1.1'\n    print(convert_ip_address(ip_address))", "category": "Python"}, {"instruction": "Create a program in python that sorts a given list.", "input": "", "output": "def bubbleSort(arr):\n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [64, 34, 25, 12, 22, 11, 90] \n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "category": "Python"}, {"instruction": "Write a code to output the cosine similarity between two vectors.", "input": "vector1 = [1, 2, 3]\nvector2 = [4, 5, 6]", "output": "import numpy as np\n\ndef cosine_similarity(vector1, vector2):\n    \n    # normalize the vectors\n    v1 = np.array(vector1)/np.linalg.norm(vector1)\n    v2 = np.array(vector2)/np.linalg.norm(vector2)\n    \n    # calculate cosine similarity\n    return np.dot(v1, v2) \n    \nif __name__ == '__main__':\n    vector1 = [1, 2, 3]\n    vector2 = [4, 5, 6]\n    print(cosine_similarity(vector1, vector2))", "category": "Python"}, {"instruction": "Using numpy, write a code to multiply matrix A and B together", "input": "matrix A:\n[[1, 2], [3, 4]]\nmatrix B:\n[[5, 6], [7, 8]]", "output": "import numpy as np\n\ndef matrix_multiply(A, B):\n    \"\"\"\n    Multiply matrix A and B using numpy\n    \"\"\"\n    # Convert the matrices to numpy arrays\n    A = np.array(A)\n    B = np.array(B)\n    \n    # Multiply the matrices\n    C = np.dot(A, B)\n    \n    return C\n\nif __name__ == '__main__':\n    # example matrices\n    A = [[1, 2], [3, 4]]\n    B = [[5, 6], [7, 8]] \n    print(matrix_multiply(A, B))", "category": "Python"}, {"instruction": "Write code to find the maximum sum for a contiguous subarray of a given array.", "input": "", "output": "def max_sum_subarray(nums):\n    current_sum = 0\n    max_sum = -float('inf')\n    for num in nums:\n        current_sum += num\n        max_sum = max(max_sum, current_sum)\n        current_sum = max(current_sum, 0)\n    return max_sum", "category": "Python"}, {"instruction": "Create a function to parse a string that has lines of key/value pairs and return a dictionary of the values paired with the keys.", "input": "", "output": "def parse_key_value_pairs(string):\n    result = {}\n    lines = string.split(\"\\n\")\n    for line in lines:\n        if line:\n            key, value = line.split(\":\")\n            result[key] = value\n    return result", "category": "Python"}, {"instruction": "Create a class to represent a calculator with the following methods: add, subtract, multiply, and divide", "input": "", "output": "class Calculator:\n    def add(self, num1, num2):\n        return num1 + num2\n\n    def subtract(self, num1, num2):\n        return num1 - num2\n\n    def multiply(self, num1, num2):\n        return num1 * num2\n\n    def divide(self, num1, num2):\n        return num1 / num2", "category": "Python"}, {"instruction": "Create a function that takes a list of numbers and identifies the sublists of numbers that add up to a given sum.", "input": "", "output": "def sublist_sum(nums, target):\n    result = []\n    current_sum = 0\n    start = 0\n    for end in range(len(nums)):\n        current_sum += nums[end]\n        while current_sum > target and start < end:\n            current_sum -= nums[start]\n            start += 1\n        if current_sum == target:\n            result.append(nums[start:end+1])\n    return result", "category": "Python"}, {"instruction": "Make a single change in the following code to throw an error when the argument to the function is negative.", "input": "def calculate_square_root(n):\n    return n**(1/2)", "output": "def calculate_square_root(n):\n    if n < 0:\n        raise ValueError(\"n must be a positive number\")\n    return n**(1/2)", "category": "Python"}, {"instruction": "Write code to iterate through a nested dictionary and return the sum of all values.", "input": "dictionary = {\n 'level1': {\n  'level2a': {\n   'level3a': 1,\n   'level3b': 3\n  },\n  'level2b': {\n   'level3a': 4,\n   'level3b': 5\n  }\n }\n}", "output": "dictionary = {\n 'level1': {\n  'level2a': {\n   'level3a': 1,\n   'level3b': 3\n  },\n  'level2b': {\n   'level3a': 4,\n   'level3b': 5\n  }\n }\n}\n\ndef iterate_dict(d):\n    result = 0\n    for value in d.values():\n        if type(value) is dict:\n            result += iterate_dict(value)\n        else:\n            result += value\n    return result\n\nprint(iterate_dict(dictionary)) # 13", "category": "Python"}, {"instruction": "Design a class in Python to model a hospital.", "input": "", "output": "class Hospital:\n    def __init__(self, location, name, rooms, staff):\n        self.location = location\n        self.name = name\n        self.rooms = rooms\n        self.staff = staff\n    \n    def get_location(self):\n        return self.location\n    \n    def get_name(self):\n        return self.name\n    \n    def get_rooms(self):\n        return self.rooms\n    \n    def get_staff(self):\n        return self.staff\n    \n    def set_location(self, location):\n        self.location = location\n    \n    def set_name(self, name):\n        self.name = name\n    \n    def set_rooms(self, rooms):\n        self.rooms = rooms\n    \n    def set_staff(self, staff):\n        self.staff = staff", "category": "Python"}, {"instruction": "What is the difference between post() and get() in AJAX?", "input": "", "output": "The main difference between post() and get() in AJAX is that post() sends the data in the body of the request and get() sends it in the URL. Post() is generally used to send form data, and can be used for creating or updating data on the server. Get() is usually used for requesting data from the server, and can be used for reading data from the server.", "category": "Python"}, {"instruction": "How do you connect to a MySQL database in Python?", "input": "", "output": "You can connect to a MySQL database in Python using the mysql.connect() method. The syntax of this method is as follows:\n\nmysql.connect(host=\"localhost\", user=\"username\", password=\"password\", database=\"database_name\")\n\nOnce you have successfully connected to the MySQL database, you can run SQL queries or perform other operations.", "category": "Python"}, {"instruction": "Write a function to reverse a given sentence in Python.", "input": "Given sentence: \"The quick brown fox jumps over the lazy dog.\"", "output": "def reverse_sentence(sentence):\n    words = sentence.split()\n    reversed_words = words[::-1]\n    reversed_sentence = ' '.join(reversed_words)\n    return reversed_sentence\n\nif __name__ == '__main__': \n    sentence = \"The quick brown fox jumps over the lazy dog.\"\n    print(reverse_sentence(sentence))", "category": "Python"}, {"instruction": "Write an algorithm to identify below number is prime or not.", "input": "7", "output": "# Function to check for prime number \ndef isPrime(n): \n      \n    # Corner cases \n    if n <= 1: \n        return False\n  \n    # Check from 2 to n-1 \n    for i in range(2, n): \n        if n % i == 0: \n            return False\n  \n    return True\n\n# Driver Program \nif isPrime(7):\n    print(\"YES! It is a prime number\")\nelse:\n    print(\"No! It is not a prime number\")", "category": "Python"}, {"instruction": "Create a Python script to generate a random password of 8 characters that contains an uppercase letter, a special symbol and a number.", "input": "", "output": "import random\nimport string\n\ndef generate_random_password():\n  password = \"\"\n  character_types = string.ascii_letters + string.digits + string.punctuation\n  length = 8\n  for _ in range(length):\n    password += random.choice(character_types)\n  return password\n\nprint(generate_random_password())", "category": "Python"}, {"instruction": "Inject a variable in a Python script, named \"greeting_message\" with the value \"hello world\"", "input": "", "output": "greeting_message = \"hello world\"", "category": "Python"}, {"instruction": "Parse the following JSON string in Python.", "input": "{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}", "output": "import json\n\ndata = '{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}'\n\n# parse the JSON string\nparsed_string = json.loads(data) \n\n# print the individual elements\nname = parsed_string[\"name\"]\nage = parsed_string[\"age\"]\ncity = parsed_string[\"city\"]\n\nprint(name)\nprint(age)\nprint(city)", "category": "Python"}, {"instruction": "Create a visualization in Matplotlib to display sales figures over the last 6 months.", "input": "", "output": "import matplotlib.pyplot as plt\nimport numpy as np\n \nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']\nsales = [40000, 42000, 46000, 50000, 60000, 63000]\n \nfig, ax = plt.subplots()\nax.plot(months, sales, marker='o')\nax.set_title('Monthly Sales')\nax.set_xlabel('Month')\nax.set_ylabel('Sales ($)')\nax.set_ylim(0, max(sales) + 5000)\n \nplt.show()", "category": "Python"}, {"instruction": "Using the comments as a guide, fill in the blanks with code where applicable to make the function jumbledLetters() work.", "input": "def jumbledLetters(word):\n    \"\"\"Returns a randomly jumbled version of the given word.\"\"\"\n    new_word = \"\"\n    for letter in word:\n        #__TODO__ use the random module to generate a number between 0 and the length of the word\n        num = ____ \n        #__TODO__ add the letter to the string `new_word` using the `num` generated in the previous step\n        ____ \n    return new_word", "output": "def jumbledLetters(word):\n    \"\"\"Returns a randomly jumbled version of the given word.\"\"\"\n    new_word = \"\"\n    for letter in word:\n        #__TODO__ use the random module to generate a number between 0 and the length of the word\n        num = random.randint(0, len(word)-1)\n        #__TODO__ add the letter to the string `new_word` using the `num` generated in the previous step\n        new_word += word[num]\n    return new_word", "category": "Python"}, {"instruction": "Write a python program that takes in two input strings and checks if the second string is an anagram of the first one.", "input": "silent, listen", "output": "def anagram_check (str1, str2): \n    if(sorted(str1)== sorted(str2)): \n        print(\"The strings are anagrams.\")  \n    else: \n        print(\"The strings aren't anagrams.\")         \n\n# Driver code \nstr1 = \"silent\"\nstr2 = \"listen\"\nanagram_check(str1, str2)", "category": "Python"}, {"instruction": "Generate the Fibonacci sequence using a for loop in Python.", "input": "", "output": "def generateFibonacciSequence(n):\n    fib_sequence = [0,1]\n    for i in range(2,n):\n        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])\n        \n    return fib_sequence", "category": "Python"}, {"instruction": "Implement quicksort algorithm in Python for a list of integers.", "input": "[4, 2, 5, 3, 1]", "output": "def quicksort(arr):\n\tif len(arr) <= 1:\n\t\treturn arr\n\tpivot = arr[len(arr) // 2]\n\tleft = [x for x in arr if x < pivot]\n\tmiddle = [x for x in arr if x == pivot]\n\tright = [x for x in arr if x > pivot]\n\treturn quicksort(left) + middle + quicksort(right)", "category": "Python"}, {"instruction": "Create a function to return all possible sums of two numbers.", "input": "", "output": "def two_num_sums(nums):\n    \"\"\"Returns a list of all possible sums of two numbers from nums.\"\"\"\n    combinations = []\n\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            combination = nums[i]+nums[j]\n            combinations.append(combination)\n\n    return combinations", "category": "Python"}, {"instruction": "Take in a JSON string and convert it into a valid Python 3 dictionary.", "input": "'{\"name\": \"john\", \"age\": 32}'", "output": "{'name': 'john', 'age': 32}", "category": "Python"}, {"instruction": "Write a set of if-else statements to convert numerical grade 1-100 to their letter grade equivalent.", "input": "", "output": "if grade >= 90:\n  letter_grade = 'A'\nelif grade >= 80:\n  letter_grade = 'B'\nelif grade >= 70:\n  letter_grade = 'C'\nelif grade >= 60:\n  letter_grade = 'D'\nelse:\n  letter_grade = 'F'", "category": "Python"}, {"instruction": "Parse a given input of timestamp and convert it to a datetime object in python.", "input": "1552520802", "output": "datetime.datetime(2019, 3, 12, 17, 33, 22)", "category": "Python"}, {"instruction": "Write a code to generate a list with the first 20 Fibonacci numbers.", "input": "", "output": "def fibonacci(n):\n    \"\"\"\n    Generate a list with the first n Fibonacci numbers.\n    \"\"\"\n    fib_list = [0, 1]\n\n    # Generate the list and stop when n is reached\n    while len(fib_list) < n:\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    \n    return fib_list\n\nif __name__ == '__main__':\n    print(fibonacci(20))", "category": "Python"}, {"instruction": "Develop a program that performs basic arithmetic operations (+, -, /, *)", "input": "", "output": "def add(x, y):\n   return x + y\n\ndef subtract(x, y):\n   return x - y\n\ndef multiply(x, y):\n   return x * y\n\ndef divide(x, y):\n   return x / y", "category": "Python"}, {"instruction": "Create a program to evaluate a postfix expression.", "input": "", "output": "# Python program to evaluate value of a postfix expression \n  \n# Class to convert the expression \nclass Conversion: \n       \n    # Constructor to initialize the class variables \n    def __init__(self, capacity): \n        self.top = -1\n        self.capacity = capacity \n        # This array is used a stack \n        self.array = [] \n        # Precedence setting \n        self.output = [] \n        self.precedence = {'+':1, '-':1, '*':2, '/':2, '^':3}\n       \n    # check if the stack is empty \n    def isEmpty(self): \n        return True if self.top == -1 else False\n       \n    # Return the value of the top of the stack \n    def peek(self): \n        return self.array[-1] \n       \n    # Pop the element from the stack \n    def pop(self): \n        if not self.isEmpty(): \n            self.top -= 1\n            return self.array.pop() \n        else: \n            return \"$\"\n       \n    # Push the element to the stack \n    def push(self, op): \n        self.top += 1\n        self.array.append(op)  \n   \n    # A utility function to check is the given character \n    # is operand  \n    def isOperand(self, ch): \n        return ch.isalpha() \n   \n    # Check if the precedence of operator is strictly \n    # less than top of stack or not \n    def notGreater(self, i): \n        try: \n            a = self.precedence[i] \n            b = self.precedence[self.peek()] \n            return True if a  <= b else False\n        except KeyError:  \n            return False\n              \n    # The main function that converts given infix expression \n    # to postfix expression  \n    def infixToPostfix(self, exp): \n           \n        # Iterate over the expression for conversion \n        for i in exp: \n            # If the character is an operand,  \n            # add it to output \n            if self.isOperand(i): \n                self.output.append(i) \n              \n            # If the character is an '(', push it to stack \n            elif i  == '(': \n                self.push(i) \n   \n            # If the scanned character is an ')', pop and  \n            # output from the stack until and '(' is found \n            elif i == ')': \n                while( (not self.isEmpty()) and self.peek() != '('): \n                    a = self.pop() \n                    self.output.append(a) \n                if (not self.isEmpty() and self.peek() != '('): \n                    return -1\n                else: \n                    self.pop() \n   \n            # An operator is encountered \n            else: \n                while(not self.isEmpty() and self.notGreater(i)): \n                    self.output.append(self.pop()) \n                self.push(i) \n   \n        # pop all the operator from the stack \n        while not self.isEmpty(): \n            self.output.append(self.pop()) \n   \n        return \"\".join(self.output) \n   \ncount = 0\n\n# Driver program to test above function \nexp = \"a+b*(c^d-e)^(f+g*h)-i\"\nobj = Conversion(len(exp)) \nans = obj.infixToPostfix(exp) \nprint(ans)\n\n# This function evaluates value of a postfix expression \ndef evaluatePostfix(exp): \n\t\n\t# Create a stack \n\tstack = [] \n\t\n\t# Scan all characters one by one \n\tfor i in exp: \n\t\t\n\t\t# If the character is a number, push it to the stack \n\t\tif i.isdigit(): \n\t\t\tstack.append(int(i)) \n\n\t\t# If the character is an operator, pop two \n\t\t# elements from stack apply the operator \n\t\telse: \n\t\t\tval1 = stack.pop() \n\t\t\tval2 = stack.pop() \n\t\t\tif i == '+': \n\t\t\t\tstack.append(val2 + val1) \n\t\t\telif i == '-': \n\t\t\t\tstack.append(val2 - val1) \n\t\t\telif i == '*': \n\t\t\t\tstack.append(val2 * val1) \n\t\t\telse: \n\t\t\t\tstack.append(val2 / val1) \n\n\treturn stack.pop() \n\n# Driver Program to test above function \n#exp = \"231*+9-\"\n#exp = ans\n#print(exp)\n\n#print('postfix evaluation: %d' %(evaluatePostfix(exp) ))", "category": "Python"}, {"instruction": "Create a JSON object from a dictionary in Python.", "input": "{\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"address\": {\n        \"street\": \"Main Street\",\n        \"city\": \"New York City\"\n    }\n}", "output": "import json\n\ndata = {\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"address\": {\n        \"street\": \"Main Street\",\n        \"city\": \"New York City\"\n    }\n}\n\njson_data = json.dumps(data)\nprint(json_data)\n# Output: {\"name\": \"John Doe\", \"age\": 30, \"address\": {\"street\": \"Main Street\", \"city\": \"New York City\"}}", "category": "Python"}, {"instruction": "Create a random matrix using NumPy where the elements have 2 decimal places.", "input": "", "output": "import numpy as np \n\n# Create a 2\u00d72 matrix \nrandom_matrix = np.random.rand(2,2) \n\n# Round to two decimal places \nnp.around(random_matrix, decimals=2)", "category": "Python"}, {"instruction": "Create an array in Python with 6 elements and print the last three elements.", "input": "", "output": "my_array = [1, 2, 3, 4, 5, 6] \n#Print the last three elements\nprint (my_array[-3:]) \n#Output:[4, 5, 6]", "category": "Python"}, {"instruction": "Write a Python program to exchange the values of two different variables.", "input": "x = 10 \ny = 20", "output": "x, y = y, x", "category": "Python"}, {"instruction": "Generate a code snippet to perform an element-wise multiplication of two NumPy arrays named A and B.", "input": "A = [1,2,3]\nB = [4,5,6]", "output": "import numpy as np\n \nA = np.array([1,2,3])\nB = np.array([4,5,6])\n \nC = np.multiply(A, B)\nprint(C)", "category": "Python"}, {"instruction": "Generate a Pandas code snippet to calculate the averages of the elements of each row in the given dataframe?", "input": "dataframe = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['a', 'b', 'c'])", "output": "import pandas as pd\n  \ndataframe = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['a', 'b', 'c'])\n \ndataframe['avg'] = dataframe.mean(axis=1)\n\nprint(dataframe)", "category": "Python"}, {"instruction": "Write a code snippet to count the occurrence of number 4 in an array called arr.", "input": "arr = [1, 4, 2, 4, 5]", "output": "arr = [1, 4, 2, 4, 5]\n\ncount = 0\nfor num in arr:\n    if num == 4:\n        count += 1\n\nprint(count)", "category": "Python"}, {"instruction": "Generate an appropriate python code snippet to capitalize all elements of an array called A.", "input": "A = ['welcome', 'to', 'my', 'website']", "output": "A = ['welcome', 'to', 'my', 'website']\n\nA = [x.capitalize() for x in A]\n\nprint(A)", "category": "Python"}, {"instruction": "Generate a 5-dimensional array using the numpy library", "input": "", "output": "import numpy as np\n\narr = np.zeros((5,5,5,5,5))", "category": "Python"}, {"instruction": "Sort the given list using the quicksort algorithm.", "input": "my_list = [8, 5, 3, 9, 6, 1]", "output": "def quick_sort(arr):\n  if len(arr) <= 1:\n    return arr\n  else:\n    pivot = arr[0]\n    left, right = [], []\n    # pivot\n    for x in arr[1:]:\n      if x > pivot:\n        right.append(x)\n      else:\n        left.append(x)\n    # concatenate\n    return quick_sort(left) + [pivot] + quick_sort(right)\n\nquick_sort(my_list)", "category": "Python"}, {"instruction": "Suggest a sorting algorithm to sort a list in ascending order.", "input": "my_list = [3, 8, 5, 4, 1, 9, 7]", "output": "The best sorting algorithm to use for this task would be the Bubble Sort algorithm. In the Bubble Sort algorithm, the list is looped through and elements are compared to each other and swapped if they are not in the correct order. This process is repeated until the list is sorted.", "category": "Python"}, {"instruction": "Build a function in Python that takes a string as the input and prints each letter of the string on a separate line.", "input": "", "output": "def print_letters(string): \n    for letter in string: \n        print(letter)", "category": "Python"}, {"instruction": "Correct any errors in the following code.", "input": "def get_student_avg (studentss):\n    for stdent in studentss:\n        sum = 0\n        for grade in stdent['grades']:\n            sum += grade\n        avg = sum // len studnet['grades']\n        stdent['avg']= avg", "output": "def get_student_avg (studentss):\n    for student in studentss:\n        sum = 0\n        for grade in student['grades']:\n            sum += grade\n        avg = sum // len(student['grades'])\n        student['avg']= avg", "category": "Python"}, {"instruction": "Create a class for a Rectangle with attributes for its length and width, and methods to calculate its area, perimeter and diagonal.", "input": "", "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    \n    def area(self):\n        return self.length * self.width\n    \n    def perimeter(self):\n        return (2*self.length) + (2*self.width)\n    \n    def diagonal(self):\n        return (self.length**2 + self.width**2)**0.5", "category": "Python"}, {"instruction": "Create a class that can be used to generate random numbers between a given range.", "input": "", "output": "class RandomNumberGenerator:\n    def __init__(self, min_num, max_num):\n        self.min_num = min_num\n        self.max_num = max_num\n    \n    def get_random_number(self):\n        return random.randint(self.min_num, self.max_num)", "category": "Python"}, {"instruction": "Given a list of numbers and a search value, check if the value is present in the list and return a boolean value.", "input": "nums = [2, 4, 6, 8, 10]\nvalue = 6", "output": "def search_list(nums, value):\n    for num in nums:\n        if num == value:\n            return True\n    return False\n\nnums = [2, 4, 6, 8, 10]\nvalue = 6\n\nresult = search_list(nums, value)\nprint(result) # Output: True", "category": "Python"}, {"instruction": "Write a function in Python to calculate the compound interest given the principal amount, rate of interest and number of years.", "input": "p = 1000\nr = 0.10\nn = 3", "output": "def calc_comp_int(principal, rate, num_years):\n    return principal * (1 + rate) ** num_years - principal\n\nprint(calc_comp_int(p, r, n))", "category": "Python"}, {"instruction": "Write a sample program that performs text classification", "input": "", "output": "import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\n# load dataset\ndataframe = pd.read_csv('text_classification_data.csv')\n\n# convert to vectors\nvectorizer = TfidfVectorizer()\nvectors = vectorizer.fit_transform(dataframe['text'])\n\n# split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(vectors, dataframe['label'], test_size = 0.25)\n\n# create model\nmodel = LogisticRegression()\n\n# train model\nmodel.fit(X_train,y_train)\n\n# test model\npredictions = model.predict(X_test)", "category": "Python"}, {"instruction": "Construct an algorithm in pseudocode to sort a given array of numbers.", "input": "[3, 1, 4, 5, 7, 2]", "output": "sort(array A[]):\n  for i = 1 to n-1\n  begin\n    min = i\n    for j = (i + 1) to n\n      if A[j] < A[min]\n        min = j\n    swap the value at index min and index i\n  end\n  return A[]", "category": "Python"}, {"instruction": "Compare the performance of two different neural network architectures.", "input": "Two convolutional neural networks (CNNs) with different depth of layers have been trained on the MNIST dataset.", "output": "# evaluate the performance on the test dataset\nfrom sklearn.metrics import accuracy_score\n\n# load the test dataset\nX_test, y_test = load_dataset()\n\n# evaluate each model\ny_pred_1 = model_1.predict(X_test)\nacc_1 = accuracy_score(y_test, y_pred_1)\n\ny_pred_2 = model_2.predict(X_test)\nacc_2 = accuracy_score(y_test, y_pred_2)\n\n# compare the performance\nif acc_1 > acc_2:\n    print('Model 1 has better performance than Model 2.')\nelif acc_2 > acc_1:\n    print('Model 2 has better performance than Model 1.')\nelse:\n    print('The performances of the two models are equal.')", "category": "Python"}, {"instruction": "Construct a machine learning model in Python for the given dataset.", "input": "The dataset contains information on the daily income of 500 students. You should be able to predict the income of a student based on the given characteristics.", "output": "import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# load dataset\ndataframe = pd.read_csv('student_income_data.csv')\n\n# split into input X and output y\nX = dataframe.iloc[:,:-1]\ny = dataframe.iloc[:,-1]\n\n# split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25)\n\n# create model\nmodel = LinearRegression()\n\n# train model\nmodel.fit(X_train,y_train)\n\n# test model\npredictions = model.predict(X_test)", "category": "Python"}, {"instruction": "Implement a stack to store and retrieve items in last-in first-out order.", "input": "", "output": "class Stack:\n    def __init__(self):\n        self.items = []\n    \n    def push(self, item):\n        self.items.append(item)\n    \n    def pop(self):\n        return self.items.pop()\n    \n    def peek(self):\n        return self.items[len(self.items)-1]\n    \n    def size(self):\n        return len(self.items)", "category": "Python"}, {"instruction": "You are given a string, output a new string with its vowels removed.", "input": "\"Hello World\"", "output": "def removeVowels(s):\n    vowels = 'aeiouAEIOU'\n    s_without_vowel = ''\n    for c in s:\n        if c not in vowels:\n            s_without_vowel += c\n    return s_without_vowel\n\nprint(removeVowels(\"Hello World\"))\n# Output: Hll Wld", "category": "Python"}, {"instruction": "Reorganize the following code in a more efficient way using Python.", "input": "def get_student_avg(students):\n    for student in students:\n        sum = 0\n        for grade in student['grades']:\n            sum += grade\n        avg = sum / len(student['grades'])\n        student['avg'] = avg", "output": "def get_student_avg(students):\n    for student in students:\n        student['avg'] = sum(student['grades']) / len(student['grades'])", "category": "Python"}, {"instruction": "How does the break statement work in a for loop?", "input": "", "output": "The break statement is used to break out of a loop, including a for loop. When a break statement is encountered inside a loop, it causes the loop to stop executing and control to be transferred outside the loop. For example, in a for loop, if the break statement is encountered, the loop is terminated immediately, and the program control will be transferred outside the loop.", "category": "Python"}, {"instruction": "Generate a timestamp based on the current date.", "input": "", "output": "import time\n\ntimestamp = int(time.time())\nprint(timestamp) # 1598059584", "category": "Python"}, {"instruction": "Write a Python program to find all numbers divisible by 5 but not a multiple of 7, between 1500 and 2700 (both included).", "input": "", "output": "result = []\nfor i in range(1500, 2701):\n  if i % 5 == 0 and i % 7 != 0:\n    result.append(i)\n\nprint(result) # [1505, 1540, 1575, 1610, 1645, 1680, 1715, 1750, 1785, 1820, 1855, 1890, 1925, 1960, 1995, 2030, 2065, 2100, 2135, 2170, 2205, 2240, 2275, 2310, 2345, 2380, 2415, 2450, 2485, 2520, 2555, 2590, 2625, 2660, 2695]", "category": "Python"}, {"instruction": "Generate a random string 10 characters in length using the given Python code.", "input": "import random", "output": "import random\n\ndef generate_random_string(length):\n    \"\"\"Generate a random string with given length using a set of lowercase and uppercase letters, numbers, and punctuation characters.\"\"\"\n    chars = \"abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()[]{}\\\\|;:'\"\",./<>?\"\n    result = \"\"\n    for i in range(length):\n        result += random.choice(chars)\n    return result\n\nrandom_string = generate_random_string(10)\nprint(random_string) #eg. 7O?1Y%%&_K", "category": "Python"}, {"instruction": "Given an array of integers, write a function that returns the index of the smallest number in the array.", "input": "array = [3, 1, 9, 6, 17]", "output": "def findSmallest(arr):\n    \n    smallest_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[smallest_index]:\n            smallest_index = i\n    \n    return smallest_index\n\nindex_of_smallest = findSmallest(array)\nprint(index_of_smallest) #prints 1", "category": "Python"}, {"instruction": "Write Python code which changes a string to all lowercase characters.", "input": "String: \"This is a string in Uppercase!!!\"", "output": "text = \"This is a string in Uppercase!!!\"\ntext = text.lower()\nprint(text)", "category": "Python"}, {"instruction": "Identify the data type (int, string, list, etc.) of the following expression in Python", "input": "\"hello world\"", "output": "string", "category": "Python"}, {"instruction": "Rewrite the following Python function without using an elif statement.", "input": "def find_type(x):\n    if x == \"a\":\n        print(\"alpha\")\n    elif x == \"b\":\n        print(\"beta\")\n    elif x == \"c\":\n        print(\"gamma\")", "output": "def find_type(x):\n    type_map = {\"a\": \"alpha\", \"b\": \"beta\", \"c\": \"gamma\"}\n    if x in type_map:\n        print(type_map[x])", "category": "Python"}, {"instruction": "Create a function in Python that executes the below pseudocode.", "input": "Input: A list of integers\n\nFor each integer:\n    If the integer is even, add 1 to the list\n    If the integer is odd, subtract 1 from the list\n\nOutput: A new list of integers", "output": "def modify_list(int_list):\n    for i in range(len(int_list)):\n        if int_list[i] % 2 == 0:\n            int_list[i] += 1\n        else:\n            int_list[i] -= 1\n    return int_list", "category": "Python"}, {"instruction": "Write a Python function that accepts a list and returns the sum of the numbers present in the list.", "input": "list = [1, 2, 3, 4, 5]", "output": "def list_sum(lst):\n    result = 0\n    for num in lst:\n        result += num\n    return result", "category": "Python"}, {"instruction": "Create a Python program that takes two strings as input and finds their longest common subsequence.", "input": "x = \u201cABCBDAB\u201d\n y = \u201cBDCABA\u201d", "output": "def longestSubsequence(x, y): \n    m = len(x) \n    n = len(y) \n  \n    L = [[None]*(n+1) for i in range(m+1)] \n   \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif x[i-1] == y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n    index = L[m][n] \n  \n    lcs = [\"\"] * (index+1) \n    lcs[index] = \"\\0\" \n  \n    i = m \n    j = n \n    while i > 0 and j > 0: \n  \n        if x[i-1] == y[j-1]: \n            lcs[index-1] = x[i-1] \n            i-=1\n            j-=1\n            index-=1\n  \n        elif L[i-1][j] > L[i][j-1]: \n            i-=1\n        else: \n            j-=1\n  \n    print(\"Longest common subsequence of \" + x + \" and \" + y + \" is \\\"\" + \"\".join(lcs) + \"\\\"\")", "category": "Python"}, {"instruction": "Suggest an algorithm to sum values of pairs in an array.", "input": "arr = [2, 3, 5, 7]", "output": "def array_sum(arr):\n    sum = 0\n    for i in range(0, len(arr)-1, 2):\n        sum += arr[i] + arr[i+1]\n    return sum", "category": "Python"}, {"instruction": "Write a method in Python to append a given list to another list.", "input": "list_1 = [1,2,3]\nlist_2 = [4,5,6]", "output": "list_1.extend(list_2)", "category": "Python"}, {"instruction": "Design a recursive algorithm in Python to calculate the sum of all elements in the given array", "input": "[1, 3, 7, 9, 11]", "output": "def recursive_sum(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] + recursive_sum(arr[1:])\n\narr = [1, 3, 7, 9, 11]\nprint(recursive_sum(arr))", "category": "Python"}, {"instruction": "Write a function in Python for sorting a given list of numbers.", "input": "[29, 11, 46, 7, 248, 1724]", "output": "def sort_list(numbers):\n  return sorted(numbers)", "category": "Python"}, {"instruction": "Create a dictionary with the keys of the students' IDs and their corresponding grades as the values.", "input": "student_ids = [1000, 1001, 1002, 1003] \ngrades = [90, 80, 60, 50]", "output": "def create_grade_dict(student_ids, grades):\n    # Create an empty dictionary\n    grade_dict = {} \n    # Loop based on length of student ids \n    for i in range(len(student_ids)):  \n         # Add id as key and grade as value\n        grade_dict[student_ids[i]] = grades[i] \n    # Return the grade dictionary    \n    return grade_dict", "category": "Python"}, {"instruction": "Write a function to create a Nim game board with size n.", "input": "", "output": "def create_game_board(n):\n    # Create an empty list\n    game_board = []\n    # Loop based on number of rows\n    for i in range(n):\n        # Create an empty row\n        row = []\n        # Loop based on number of columns\n        for j in range(n):\n            # Add value 0 at each position\n            row.append(0)\n        # Add the row in empty list\n        game_board.append(row)\n    # Return the game board\n    return game_board", "category": "Python"}, {"instruction": "Fix the bug in the following Python script:", "input": "def is_odd(x):\n  if x % 2 == 1\n    return True\n\nis_odd(5)", "output": "def is_odd(x):\n  if x % 2 == 1:\n    return True\n  else:\n    return False\n\nis_odd(5)", "category": "Python"}, {"instruction": "You are given an array of integers and an integer k. Output one of the maximum sums of k consecutive elements in the array.", "input": "array = [1, -3, 4, 5, 7, 8, -2, 9, -1]\nk=3", "output": "def max_sum_k_elements(array, k):\n    max_sum = array[0]\n    for i in range(len(array)-k+1):\n        sum_temp = 0\n        for j in range(k):\n            sum_temp += array[i+j]\n        if sum_temp > max_sum:\n            max_sum = sum_temp\n    return max_sum\n\nmax_sum_k_elements(array, k)", "category": "Python"}, {"instruction": "You are given a string s, output the longest substring with no repeating characters.", "input": "s = \"abcabcbb\"", "output": "def longest_substring(s):\n    length = len(s)\n    current_length = 1\n    last_occur= {s[0]:0 }\n    max_length = 0\n    i = 0 \n    while i < length:\n        if(s[i] in last_occur):\n            current_length = i - last_occur[s[i]]\n            if(current_length > max_length):\n                max_length = current_length\n            last_occur[s[i]] = i\n        else:\n            last_occur[s[i]] = i\n            current_length += 1\n            if(current_length > max_length):\n                max_length = current_length\n        i += 1\n    return max_length\n\nlongest_substring(s)\n3", "category": "Python"}, {"instruction": "Explain the concept of an ASCII table", "input": "", "output": "An ASCII table is a table that shows the correspondence between characters and symbols commonly used in computers or electronic devices. It consists of a set of codes that represent unique characters, such as letters, numbers, and symbols. Each code is represented by a number between 0 and 127 and is referred to by its decimal, octal, hexadecimal, or binary numbers. It is used to store, transmit, and display characters in different computer systems.", "category": "Python"}, {"instruction": "Define a function to search for a specific element in an array", "input": "[5, 10, 2, 4, 7]", "output": "def search(arr, e):\n    for i in range(len(arr)):\n        if (arr[i] == e):\n            return i\n    return -1", "category": "Python"}, {"instruction": "Convert a given list into a dictionary in Python", "input": "[\"apple\", \"banana\", \"cherry\"]", "output": "dict = {\n    \"apple\": 0,\n    \"banana\": 1,\n    \"cherry\": 2\n}", "category": "Python"}, {"instruction": "Explain how to use the built-in bubble sort function for sorting a given list of numbers.", "input": "[4, 9, 0, 3, 5, 7]", "output": "The built-in bubble sort function can be used to sort the given list of numbers. The algorithm starts from the beginning of the list and compares two adjacent elements. If the first number is larger than the second number, they are swapped. This process is repeated until the end of the list is reached. After one iteration, the largest element is placed at the end of the list. This process is then repeated for the remaining elements until the list is completely sorted. To use the Python built-in bubble sort function, simply call the bubble sort on the list, and it will return the sorted list.", "category": "Python"}, {"instruction": "Generate a Python dictionary that contains student information.", "input": "Name: John; Age: 22; Grade: A;", "output": "{\n \"name\": \"John\",\n \"age\": 22,\n \"grade\": \"A\"\n}", "category": "Python"}, {"instruction": "Use the given data to print out the average of the numbers.", "input": "[1, 7, 8, 10]", "output": "def calculateAverage(nums):\n    average = 0\n    for num in nums:\n        average += num\n    return average / len(nums)\n\nprint(calculateAverage([1,7,8,10]))\n# Output: 6.5", "category": "Python"}, {"instruction": "Modify the given code so it prints a prime number table.", "input": "table_size = 10", "output": "# Include the necessary library\nfrom prime_generator import get_prime\n\n# Get a list of prime numbers\nprimes = get_prime(table_size)\n\n# Print the prime number table\nprint(\" Prime Number Table\")\nprint(\" --------------------\")\n\nfor i in range(table_size):\n    print(f\"{primes[i]:>4} {(i+1)*primes[i]:>4}\")", "category": "Python"}, {"instruction": "Correct this function so that it returns a correct multiplication table.", "input": "def multiplication_table(number):\n    for row in range(1, number + 1):\n        output = ''\n        for column in range(1, number + 1):\n            output = output + '%d*%d=%d\\t' % (row, column, row * row)\n        print(output)", "output": "def multiplication_table(number):\n    for row in range(1, number + 1):\n        output = ''\n        for column in range(1, number + 1):\n            output = output + '%d*%d=%d\\t' % (row, column, row * column)\n        print(output)", "category": "Python"}, {"instruction": "Explain the differences between Stacks and Queues in computer science.", "input": "", "output": "Stacks are data structures that operate in a Last In First Out (LIFO) order, while Queues are data structures that operate in a First In First Out (FIFO) order. In a stack, items can only be added or removed from the top, while in a queue, items can be added at the front and removed from the rear. Additionally, stack elements have direct access to the top element, while queue elements are only able to access the front element.", "category": "Python"}, {"instruction": "Write a Python program to sort a list of tuples using Lambda.", "input": "list = [(3, 4), (5, 1), (2, 0)]", "output": "sorted_list = sorted(list, key=lambda x: x[1])", "category": "Python"}, {"instruction": "Describe the purpose of using an Array in programming.", "input": "", "output": "An array is a data structure used in programming to store a collection of elements of the same type in a contiguous block of memory. Arrays are used to hold items such as numbers, strings, objects, etc. and to perform operations such as searching, sorting, and manipulation on the elements of the array. Arrays are also used to implement other data structures such as stacks, queues, and linked lists.", "category": "Python"}, {"instruction": "Rewrite the following Python code without using the 'list comprehension' syntax.", "input": "[x * x for x in range(5)]", "output": "list_result = []\nfor x in range(5):\n    list_result.append(x*x)", "category": "Python"}, {"instruction": "Write a loop in Python for printing all even numbers between 1 and 10.", "input": "", "output": "for i in range(1, 11):\n    if i % 2 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Write an if else statement in Python for checking if a given number is positive or negative.", "input": "", "output": "if x > 0:\n  print(\"The number is positive\")\nelse:\n  print(\"The number is negative\")", "category": "Python"}, {"instruction": "How to use the reduce function in Python for computing the sum of elements in a list?", "input": "", "output": "from functools import reduce\n\ndef my_sum(list):\n  return reduce((lambda x, y: x + y), list)", "category": "Python"}, {"instruction": "Write a class for a shopping cart in Python.", "input": "", "output": "class ShoppingCart:\n    def __init__(self):\n        self.cart = {}\n\n    def add_item(self, item, price):\n        self.cart[item] = price\n\n    def get_cart_total(self):\n        return sum(self.cart.values())", "category": "Python"}, {"instruction": "Given an array [1, 2, 3, 4], write a Python code snippet to print the items in the array in a single line.", "input": "[1, 2, 3, 4]", "output": "arr = [1, 2, 3, 4]\nprint(*arr, sep=\", \") // 1, 2, 3, 4", "category": "Python"}, {"instruction": "Create a function sumToN that takes a single argument and returns the sum of the numbers from 1 to the argument.", "input": "", "output": "def sumToN(n):\n  sum = 0\n  for i in range(1, n+1):\n    sum += i\n  return sum", "category": "Python"}, {"instruction": "Develop a solution for the classic pattern recognition problem -\u00a0the Towers of Hanoi.", "input": "", "output": "// function to solve the Tower of Hanoi problem\ndef solveTowerOfHanoi(n, source, auxillary, destination): \n  if n==1: \n    print(\"Move disk 1 from source\",source,\"to destination\",destination) \n    return \n  solveTowerOfHanoi(n-1, source, destination, auxillary) \n  print(\"Move disk\",n,\"from source\",source,\"to destination\",destination) \n  solveTowerOfHanoi(n-1, auxillary, source, destination) \n\n# Driver code \nn = 3\nsolveTowerOfHanoi(n, 'A', 'B', 'C') \n\nOutput:\nMove disk 1 from source A to destination C\nMove disk 2 from source A to destination B\nMove disk 1 from source C to destination B\nMove disk 3 from source A to destination C\nMove disk 1 from source B to destination A\nMove disk 2 from source B to destination C\nMove disk 1 from source A to destination C", "category": "Python"}, {"instruction": "Explain the concept of recursion with an example.", "input": "", "output": "Recursion is a technique in which a function calls itself. It is used to solve problems which can be broken down into sub-problems that are similar to the original problem. An example of recursion is the Fibonacci sequence, where a number in the sequence is the sum of the previous two numbers. The sequence can be computed using a recursive function:\n\ndef Fibonacci(n): \n  if n<0: \n    print(\"Incorrect input\") \n  elif n==1: \n    return 0\n  elif n==2: \n    return 1\n  else: \n    return Fibonacci(n-1)+Fibonacci(n-2) \n  \n# Driver program \nprint(Fibonacci(6)) \n\nOutput:\n5", "category": "Python"}, {"instruction": "Make a copy of a given dictionary in Python.", "input": "", "output": "import copy\n\noriginal_dict = {1: 'a', 2: 'b', 3: 'c'}\nnew_dict = copy.deepcopy(original_dict)", "category": "Python"}, {"instruction": "Create a Python class named \"Bicycle\" which has two attributes named \"color\" and \"wheels\".", "input": "", "output": "class Bicycle: \n  def __init__(self, color, wheels):\n      self.color = color\n      self.wheels = wheels", "category": "Python"}, {"instruction": "Write a Python class for a Employee object to store the basic properties such as name, age, salary, etc.", "input": "", "output": "class Employee:\n \n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary\n \n    def get_details(self):\n        return \"Name: {}, Age: {}, Salary: {}\".format(self.name, self.age, self.salary)", "category": "Python"}, {"instruction": "Implement a sorting algorithm in Python to arrange the given array in descending order.", "input": "[10, 80, 40, 20, 60]", "output": "def descendingOrder(arr): \n    arr.sort(reverse = True) \n    return arr \n  \n# Driver code \narr = [10, 80, 40, 20, 60] \noutput = descendingOrder(arr) \nprint(output)", "category": "Python"}, {"instruction": "Create a JSON string representation of the given Python dictionary.", "input": "{'name': 'John', 'age': 20, 'hobby': 'Coding'}", "output": "var jsonStr = JSON.stringify({name: \"John\", age: 20, hobby: \"Coding\"});", "category": "Python"}, {"instruction": "Write a Python function that takes a list of n strings and a number k and returns the longest string with length of k or less.", "input": "", "output": "def find_longest_at_length(lst, k):\n    longest_str = lst[0]\n    for s in lst[1:]:\n        if len(s) <= k and len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "category": "Python"}, {"instruction": "Write a Python function that takes a list of strings as an input and returns a new list with the strings sorted by length.", "input": "", "output": "def sort_by_length(lst):\n  return sorted(lst, key=len)", "category": "Python"}, {"instruction": "Write a Python function to convert a given number of days into weeks, days.", "input": "", "output": "def convert_days(days):\n  weeks = days // 7\n  days = days % 7\n  return (weeks, days)", "category": "Python"}, {"instruction": "Using Python, parse a given XML document and output the names of all elements with the \u201cclass\u201d attribute.", "input": "", "output": "from xml.etree import ElementTree\n\ndef find_elements(tree):\n    elements = []\n    for elem in tree.iter():\n        if 'class' in elem.attrib:\n            elements.append(elem.tag)\n    return elements", "category": "Python"}, {"instruction": "Write a function that takes a two-dimensional array and flattens it into an one-dimensional array.", "input": "", "output": "def flatten(arr):\n    return [item for row in arr for item in row]", "category": "Python"}, {"instruction": "Develop a Python script to count the number of characters, words, and sentences present in a given string.", "input": "This is a sample sentence to test the program.", "output": "string = 'This is a sample sentence to test the program.'\ncharacter_count = len(string)\nword_count = len(string.split())\nsentence_count = len(string.split('.'))\n\nprint('Number of characters: ', character_count)\nprint('Number of words: ', word_count)\nprint('Number of sentences: ', sentence_count)\n\nOutput:\nNumber of characters: 45\nNumber of words: 8\nNumber of sentences: 1", "category": "Python"}, {"instruction": "Using the code provided, create an algorithm in Python to print the numbers from 1 to 10.", "input": "", "output": "for i in range(1, 11): \n    print(i)", "category": "Python"}, {"instruction": "How do you insert a given element in a balanced AVL tree?", "input": "", "output": "The process of insertion in a balanced AVL tree is similar to the process in a binary search tree, with two additional steps. First, the tree is checked to see if it needs to be rebalanced. If it does, the tree is rebalanced according to the AVL rules. Second, any newly inserted node is checked against its siblings to see if it is in balance or not. If it's not, the tree is rotated to balance it. In order to insert an element in a balanced AVL tree, the following steps must be taken:\n\n1. Start by searching the tree to see if the node to be inserted already exists in the tree.\n2. If the node does not exist, insert it in the same fashion as in a binary search tree.\n3. Perform post-insertion balancing. This involves checking the newly inserted node's balance factors and rotation if either one is unequal.\n4. Update the current node's balance factor as well as the ancestors' balance factors until the root is reached.\n5. Once all nodes that need to be balanced have been updated, the insertion is complete.", "category": "Python"}, {"instruction": "Generate a random password that is at least 8 characters and contains numbers, uppercase letters, and symbols.", "input": "", "output": "\"\"\"\nGenerate a random password that is at least 8 characters and contains numbers, uppercase letters, and symbols.\n\"\"\"\n\nimport random\n\ndef generate_password():\n    charset = \"01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()?\"\n    password = \"\"\n    for _ in range(8):\n        password += random.choice(charset)\n    return password\n    \nif __name__ == '__main__':\n    print(generate_password())", "category": "Python"}, {"instruction": "Create a function in Python that takes as arguments two strings and returns a boolean if both strings are equal or not.", "input": "string1 = \"Hello\"\nstring2 = \"World\"", "output": "def is_equal(str1, str2):\n    if str1 == str2:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Given a function, create a program to identify whether the output is equal to 1, 0 or -1.", "input": "def func(x):\n    if x < 0:\n        return -1\n    elif x == 0:\n        return 0\n    else:\n        return 1", "output": "def func_val(x):\n    result = func(x)\n    if result == -1:\n        return -1\n    elif result == 0:\n        return 0\n    else:\n        return 1", "category": "Python"}, {"instruction": "Edit the following class to make sure any variables created as part of the class cannot be modified by the program", "input": "class Example:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y", "output": "class Example:\n    def __init__(self, x, y):\n        self.__x = x\n        self.__y = y\n    @property\n    def x(self):\n        return self.__x\n    @x.setter\n    def x(self, val):\n        raise AttributeError(\"Cannot modify x\")\n    @property\n    def y(self):\n        return self.__y\n    @y.setter\n    def y(self, val):\n        raise AttributeError(\"Cannot modify y\")", "category": "Python"}, {"instruction": "Create a function in Python that takes an input list of strings and returns the longest string in the list.", "input": "list = [\"cat\", \"dog\", \"elephant\"]", "output": "def longest_string(list):\n  longest_word = \"\"\n  for word in list:\n    if len(word) > len(longest_word):\n      longest_word = word\n  return longest_word", "category": "Python"}, {"instruction": "Create an array that contains the numbers from 0 to 10 in Python.", "input": "", "output": "arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Create a function that prints out the Pythagorean theorem in Python.", "input": "", "output": "def pythagoras_theorem():\n    \"\"\"Print the Pythagorean theorem in Python.\"\"\"\n    print(\"The Pythagorean theorem states that the sum of the squares of the two sides of a right triangle is equal to the square of the hypotenuse.\")", "category": "Python"}, {"instruction": "Edit the following Python code to add error handling for invalid inputs.", "input": "def area_triangle(base,height):\n    pass", "output": "def area_triangle(base,height):\n    if base == 0 or height == 0:\n        raise ValueError(\"Base and height should not be zero.\")\n    else:\n        return 0.5 * base * height", "category": "Python"}, {"instruction": "Write a code snippet that returns the root of a given binary tree.", "input": "tree = \n        3\n      /   \\\n    4      5\n  /    \\    \\\n3       6    7", "output": "def root(tree):\n    if not tree:\n        return None\n    return tree.val", "category": "Python"}, {"instruction": "Write a function to print the four elements in the given list in reverse order", "input": "list = [\"a\", \"b\", \"c\", \"d\"]", "output": "def print_reverse_order(lst):\n    for item in reversed(lst):\n        print(item)\n\nprint_reverse_order(list)", "category": "Python"}, {"instruction": "Write an algorithm in Python to count how many words a given string contains.", "input": "", "output": "def count_words(string):\n\twords = string.split()\n\treturn len(words)", "category": "Python"}, {"instruction": "Implement a function in Python that takes a list of integers and the size of the list. The function should return a list in which every element is multiplied by three and none of the elements exceeding the size of the list.", "input": "s=[1,2,3,4]", "output": "def multiply_by_3(s):\n    result = []\n    for x in s:\n        if x*3 <len(s):\n            result.append(x * 3)\n    return result", "category": "Python"}, {"instruction": "Implement a function in Python that takes two array-like structures and returns a new array containing all elements from the first one that do not appear in the second one.", "input": "list_1 = [9, 4, 2, 1, 5]\nlist_2 = [4, 6, 2]", "output": "def difference_array(list_1, list_2):\n  new_list = []\n  for i in list_1:\n    if i not in list_2:\n      new_list.append(i)\n  return new_list", "category": "Python"}, {"instruction": "Design a logic in Rust to check if an entered integer is a prime number or not.", "input": "", "output": "fn is_prime(number: i32) -> bool {\n    if number == 0 || number == 1 {\n        return false\n    }\n    for i in 2..(number/2) {\n        if number % i == 0 {\n            return false\n        }\n    }\n    return true\n}", "category": "Python"}, {"instruction": "Write a code snippet in Python to generate a random float with up to 4 decimal places.", "input": "", "output": "import random\ndef random_float(a,b):\n  return round(random.uniform(a,b), 4)", "category": "Python"}, {"instruction": "Use a Linked List structure to implement a stack data structure.", "input": "", "output": "\"\"\"\nUse a Linked List structure to implement a stack data structure.\n\"\"\"\n\nclass Node:\n    def __init__(self, val):\n        self.value = val\n        self.next = None\n\nclass Stack:\n    def __init__(self):\n        self.top = None\n        self.size = 0\n\n    def push(self, val):\n        new_node = Node(val)\n        new_node.next = self.top\n        self.top = new_node\n        self.size += 1\n    \n    def pop(self):\n        if self.top == None:\n            return None\n        else:\n            pop_node = self.top\n            self.top = self.top.next\n            self.size -= 1\n            return pop_node.value", "category": "Python"}, {"instruction": "Sum up all the values in a 2D list.", "input": "list = [[1,2,3],[4,5,6],[7,8,9]]", "output": "\"\"\"\nSum up all the values in a 2D list.\n\"\"\"\n\ndef sum_2d_list(list_2d):\n    sum = 0\n    for l in list_2d:\n        for n in l:\n            sum += n\n    return sum\n\nif __name__ == '__main__':\n    list_2d = [[1,2,3],[4,5,6],[7,8,9]]\n    print(sum_2d_list(list_2d))", "category": "Python"}, {"instruction": "Given a dictionary of key-value pairs, write a function to reorder the dictionary based on the values.", "input": "d = {'John': 15, 'Anna': 20, 'Bob': 10}", "output": "\"\"\"\nGiven a dictionary of key-value pairs, write a function to reorder the dictionary based on the values.\n\"\"\"\n\ndef reorder_dict(d):\n    sorted_dict = {}\n    sorted_values = sorted(d.values())\n\n    while sorted_values:\n        key = sorted(d, key=lambda k: d[k] == sorted_values[0])[0]\n        sorted_dict[key] = d[key]\n        sorted_values.remove(d[key])\n\n    return sorted_dict\n\nif __name__ == '__main__':\n    d = {'John': 15, 'Anna': 20, 'Bob': 10}\n    print(reorder_dict(d))", "category": "Python"}, {"instruction": "Create a class named 'Stack' with the following methods:  push, pop, peek, isEmpty.", "input": "", "output": "\"\"\"\nCreate a class named 'Stack' with the following methods: push, pop, peek, isEmpty.\n\"\"\"\n\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n    \n    def peek(self):\n        return self.items[-1]\n    \n    def isEmpty(self):\n        return self.items == []", "category": "Python"}, {"instruction": "Determine whether a given string is a palindrome using stack data structure.", "input": "string = \"racecar\"", "output": "\"\"\"\nDetermine whether a given string is a palindrome using stack data structure.\n\"\"\"\n\ndef is_palindrome(string):\n    # reverse the string\n    stack = []\n    for char in string:\n        stack.append(char)\n\n    rev_string = \"\"\n    while stack:\n        rev_string = rev_string + stack.pop()\n\n    # compare reversed string with original string\n    if rev_string == string:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    string = \"racecar\"\n    print(is_palindrome(string))", "category": "Python"}, {"instruction": "Describe the advantages and disadvantages of using recursion.", "input": "", "output": "Recursion has many advantages including that it is often easier to understand, it eliminates the need for loops, and it can make for concise code when addressing complex problems. However, recursion also has disadvantages such as the potential for infinite loops and excessive memory consumption due to the overhead of function calls. Additionally, recursion can be slower than using loops in some cases.", "category": "Python"}, {"instruction": "Count the number of occurrences of a given number in a list of numbers.", "input": "numbers = [1,1,2,3,4,4,4,5]\nnumber = 4", "output": "\"\"\"\nCount the number of occurrences of a given number in a list of numbers.\n\"\"\"\n\nnumbers = [1,1,2,3,4,4,4,5]\nnumber = 4\n\ndef count_occurrences(numbers, number):\n    count = 0\n    for num in numbers:\n        if num == number:\n            count += 1\n    return count\n\nprint(count_occurrences(numbers, number))", "category": "Python"}, {"instruction": "Select all customers from the customer_table with age greater than 25 and their zip codes within a given range.", "input": "customer_table = [['Eliza', 22, 48001], ['John', 26, 48034], ['Michael', 50, 48323]]\nzipcode_range = (48000, 48200)", "output": "\"\"\"\nSelect all customers from the customer_table with age greater than 25 and their zip codes within a given range.\n\"\"\"\n\n#select customers\ncustomers = [ customer for customer in customer_table if (customer[1] > 25) and (customer[2] >= zipcode_range[0] and customer[2] <= zipcode_range[1])]\n\nprint(customers)", "category": "Python"}, {"instruction": "You need to generate a random four-digit number and return it as an integer.", "input": "", "output": "import random\n\ndef generateRandomNumber():\n    return random.randint(1000,9999)", "category": "Python"}, {"instruction": "Generate Python code to find the compound interest for a given principal amount, rate, and time period.", "input": "", "output": "# Python program to find compound interest\n\ndef compound_interest(p,r,t):\n    # p is the principal amount \n    # r is the rate \n    # t is the time period \n  \n    # Calculating compound interest \n    CI = p * (pow((1 + r / 100), t))\n    print(\"Compound interest is\", CI) \n\np=1000\nr=10\nt=2\ncompound_interest(p,r,t)", "category": "Python"}, {"instruction": "Design an algorithm to detect whether two given strings are permutations of each other.", "input": "", "output": "Algorithm:\n\n// Take two strings, str1 and str2\n\n// Step 1:\n// Start\n\n// Step 2:\n// Run a loop over the length of the strings\n\n// Step 3:\n// For each character in str1, check if it also exists in str2. If it does, continue to next character. \n\n// Step 4:\n// If a character does not have a corresponding character in the other string, return False. \n\n// Step 5:\n// If all the characters are found, return True. \n\n// Step 6:\n// Stop", "category": "Python"}, {"instruction": "Generate a simple Flask route to handle a GET request.", "input": "", "output": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/myroute\", methods=[\"GET\"])\ndef myfunc():\n  # write code here\n\nif __name__ == '__main__':\n app.run()", "category": "Python"}, {"instruction": "Create a class for a basketball team.", "input": "", "output": "class BasketballTeam:\n\n    def __init__(self, name, players):\n        self.name = name\n        self.players = players\n    \n    def get_name(self):\n        return self.name\n    \n    def get_players(self):\n        return self.players\n    \n    def add_player(self, player):\n        self.players.append(player)\n        return self.players", "category": "Python"}, {"instruction": "Formulate a plan to automate a login process.", "input": "", "output": "1. Identify the website that requires the login process.\n2. Connect to the website using the appropriate library/API.\n3. Get the username and password credentials from a secure database (or a file).\n4. Use the credentials to create a login request.\n5. Capture the response and analyze the outcome.\n6. Extract any key elements of the response that are required to perform other activities (if required).\n7. Log details from the login request in the database (or a file).\n8. Handle any error cases appropriately.", "category": "Python"}, {"instruction": "Design an algorithm in Python to detect palindrome strings.", "input": "", "output": "def is_palindrome(s):\n    rev = ''.join(reversed(s))\n    if (s == rev): \n        return True\n    return False", "category": "Python"}, {"instruction": "Construct a multi-threaded application in Python to read and calculate the sum of a list of numbers.", "input": "List of numbers:[25, 10, 5, 20]", "output": "import threading \n  \n# function to read the numbers \ndef read_sum(list_of_numbers): \n    total = 0\n    for number in list_of_numbers: \n        total += number  \n  \n    print(\"Sum of the list of numbers is: {}\".format(total)) \n  \n# Driver code \nlist_of_numbers = [25, 10, 5, 20] \nstart = 0\nend = len(list_of_numbers) \n  \n# creating thread \nt1 = threading.Thread(target=read_sum, args=(list_of_numbers[start:end],)) \n  \n# starting thread 1 \nt1.start() \n# wait until thread 1 is completely executed \nt1.join() \n  \n# both threads completely executed \nprint(\"Done!\")", "category": "Python"}, {"instruction": "We want to display a random number between 1 and 10 using Python. Write a program for that.", "input": "", "output": "import random\nrandomNumber = random.randint(1, 10)\nprint(randomNumber)", "category": "Python"}, {"instruction": "Create a program to generate random passwords of 8 characters consisting of letters, numbers and special characters.", "input": "", "output": "import random\nimport string\n\ndef generate_password(length):\n    letters_and_digits = string.ascii_letters + string.digits \n    special_characters = '!@#$%^&*()'\n    chars = letters_and_digits + special_characters\n    return ''.join(random.choice(chars) for i in range(length))\n\nprint(generate_password(8)) # output = xT@lo6Sw", "category": "Python"}, {"instruction": "Create a program to search for a word in a document.", "input": "document = \"This is a sample document with some words.\"\nword = \"words\"", "output": "def search(document, word):\n    if word in document:\n        print(\"The word '{}' was found in the document\".format(word))\n    else:\n        print(\"The word '{}' was not found in the document\".format(word))\n\nsearch(document, word) # output = \"The word 'words' was found in the document.\"", "category": "Python"}, {"instruction": "Write a code to extract data from a PDF document.", "input": "", "output": "# install the required package\npip install pdfminer.six\n\n# importing all the required modules \nfrom pdfminer.pdfparser import PDFParser \nfrom pdfminer.pdfdocument import PDFDocument \n\n# open the pdf file \nfp = open('sample_form.pdf', 'rb') \n\n# create parser object \nparser = PDFParser(fp) \n\n# create pdf document object \ndoc = PDFDocument(parser) \n\n# get the text data from pdf file \ndata = doc.get_data() \n\n# print the text extracted \nprint(data)", "category": "Python"}, {"instruction": "Create an efficient algorithm that finds the intersection between two sorted arrays.", "input": "arr1 = [1, 2, 6, 8, 9]\narr2 = [2, 3, 5, 6, 7]", "output": "def intersection(arr1, arr2): \n\n    result = []\n    \n    i = 0\n    j = 0\n  \n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] < arr2[j]: \n            i += 1\n        elif arr2[j] < arr1[i]: \n            j += 1\n        else: \n            result.append(arr2[j]) \n            j += 1\n            i += 1\n  \n    return result", "category": "Python"}, {"instruction": "Make a valid http request call with the following parameters", "input": "url = 'www.example.com'\nMethod = 'GET'\nHeader = 'Content-Type:application/json'", "output": "import requests\n\nurl = 'www.example.com'\nheaders = {'Content-Type':'application/json'}\nr = requests.get(url, headers=headers)", "category": "Python"}, {"instruction": "Parse a JSON string.", "input": "{\"name\":\"John\", \"age\":30}", "output": "import json\n\njson_data = '{\"name\":\"John\", \"age\":30}'\n\ndata = json.loads(json_data)\n\nname = data[\"name\"]\nage = data[\"age\"]\n\nprint(f\"Name: {name}, Age: {age}\")", "category": "Python"}, {"instruction": "Create a list comprehension in Python to generate odd numbers between 1 and 10", "input": "", "output": "odd_numbers = [x for x in range(1, 11) if x % 2 != 0]", "category": "Python"}, {"instruction": "Create a function in Python to identify if the inputted number is odd or even.", "input": "", "output": "def is_odd_or_even(num): \n  return \"even\" if num % 2 == 0 else \"odd\"", "category": "Python"}, {"instruction": "Create a function in Python for sending an email using the SMTP protocol.", "input": "", "output": "import smtplib\n\ndef send_email(sender, recipient, message): \n  smtp_server = smtplib.SMTP(\"smtp.example.com\")\n  smtp_server.sendmail(sender, recipient, message)\n  smtp_server.quit()", "category": "Python"}, {"instruction": "Write a function in Python which can generate a random string consisting of lowercase letters, numbers and symbols.", "input": "", "output": "import string\nimport random\n\ndef random_string(stringLength=10):\n  lettersAndDigits = string.ascii_letters + string.digits + string.punctuation\n  return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))", "category": "Python"}, {"instruction": "Create an array of random integers between 1 to 10 using the function **np.random.randint**.", "input": "", "output": "# Create array of random integers between 1 to 10\nimport numpy as np\nrandom_integers = np.random.randint(low=1, high=10, size=10)", "category": "Python"}, {"instruction": "Create a python function that will convert a string to all uppercase.", "input": "", "output": "def toUpperCase(str):\n  return str.upper()", "category": "Python"}, {"instruction": "Use Python to write a code that displays a multiplication table of a given number.", "input": "8", "output": "def multTable(n):\n    for i in range(1, 11):\n        print(\"{} x {} = {}\".format(n, i, n*i))", "category": "Python"}, {"instruction": "Define a function called find_sum that takes a list of numbers and adds them all together.", "input": "", "output": "def find_sum(seq): \n    s = 0 \n      \n    # iterate over the sequence \n    for i in seq: \n        s += i \n      \n    return s", "category": "Python"}, {"instruction": "Retrieve the value of an item in a given array.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def get_item_val(arr, idx):\n\t\"\"\"Retrieves the value of an item from the given array at a given index.\"\"\"\n\tif idx < 0 or idx > len(arr):\n\t\treturn None\n\treturn arr[idx]", "category": "Python"}, {"instruction": "Provide a function to read a single line of user input in Python.", "input": "", "output": "def read_input():\n    \"\"\"Reads a single line of user input.\"\"\"\n    return input()", "category": "Python"}, {"instruction": "Using an array, write a Python script that prints the sum of the numbers from 0 to 10.", "input": "", "output": "arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nsum = 0\n  \n# Iterate to find the sum \nfor i in range (0, len(arr)): \n    sum = sum + arr[i] \n      \n# Print the sum  \nprint(sum)", "category": "Python"}, {"instruction": "Implement a queue data structure.", "input": "", "output": "class Queue:\n    def __init__(self):\n        self.data = []\n\n    def is_empty(self):\n        return not self.data \n\n    def enqueue(self, element):\n        self.data.append(element)\n\n    def dequeue(self):\n        return self.data.pop(0)\n        \n    def peek(self):\n        if not self.is_empty():\n            return self.data[0]", "category": "Python"}, {"instruction": "Run a sentiment analysis of the following sentence using Python.", "input": "The food was really good but the service was terrible.", "output": "\"\"\"\nRun a sentiment analysis of the sentence using Python\n\"\"\"\nimport nltk \nfrom textblob import TextBlob \n\ntext = 'The food was really good but the service was terrible.'\nblob = TextBlob(text) \nfor sentence in blob.sentences:\n    print(sentence.sentiment)\n\n# Output\nSentiment(polarity=0.05, subjectivity=0.6)", "category": "Python"}, {"instruction": "Which data structure is most suitable for storing a large list of numbers?", "input": "", "output": "Heap or binary tree. A heap or binary tree data structure are most suitable for storing a large list of numbers as it provides O(log n) time complexity for insertion, search and deletion.", "category": "Python"}, {"instruction": "Write a function that calculates the Fibonacci numbers to the nth number", "input": "", "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)", "category": "Python"}, {"instruction": "Implement a function that takes in a number n and deletes all the even numbers in an array of integers first n numbers.", "input": "arr = [2, 3, 4, 5, 6, 7]\nn = 6", "output": "def delete_even(arr, n): \n    # initialise a list \n    odd_list =[]\n    # loop over the array\n    for i in range(n): \n        # if the number is odd \n        if arr[i] % 2 != 0:\n            # add it to the list \n            odd_list.append(arr[i])\n    # return the list of odd numbers\n    return odd_list", "category": "Python"}, {"instruction": "Create a function to insert a given character at every odd index in a given string.", "input": "string = \"Hello\"\ncharacter = 'z'", "output": "def insert_character(string, character): \n    # initialise a new string\n    new_string = \"\"\n    # loop over the string\n    for i in range(len(string)):\n        # if the index is odd \n        if i % 2 != 0:\n            # add the character\n            new_string += character\n        # add the current character\n        new_string += string[i]\n    # return the new string\n    return new_string", "category": "Python"}, {"instruction": "Create a function that takes in an array of strings and a search term and returns an array of indices of strings that match the search term.", "input": "array = [\"I love dogs\",\"I hate cats\",\"Dogs are the best\"] \nsearch_term = \"dogs\"", "output": "def search_indices(array, search_term):\n    # initialise an empty list \n    indices_list = [] \n    # loop over the array\n    for index, s in enumerate(array): \n        # if the search term is in the string \n        if search_term in s.lower(): \n            # append the index to the list \n            indices_list.append(index)\n    # return the list of indices \n    return indices_list", "category": "Python"}, {"instruction": "Using the comments as a guide, implement a function that takes as input a list of integers and returns the maximum value.", "input": "nums = [2, 8, 9, 10]", "output": "def find_max(nums): \n    # initialise the max to the first element of the list \n    max = nums[0]\n    # loop over the list\n    for i in range(1, len(nums)): \n       # if the current element is greater than the max, \n       # update the max \n        if nums[i] > max: \n            max = nums[i]\n    # return the maximum value\n    return max", "category": "Python"}, {"instruction": "Write a Python statement to print out the common items between two lists.", "input": "list1 = [1, 2, 3, 4]\nlist2 = [2, 4, 6 , 8]", "output": "for i in list1:\n  if i in list2:\n    print(i)", "category": "Python"}, {"instruction": "Create an array of 10 random integers between 1 to 50 and print them.", "input": "", "output": "# Create an array of 10 random integers\nimport random\narray = []\nfor i in range(10):\n    array.append(random.randint(1, 50))\n\nprint(array) # [33, 22, 34, 18, 28, 22, 17, 11, 26, 45]", "category": "Python"}, {"instruction": "Create a class with two methods \"get_sum\" and \"get_product\" for calculating the sum and product of two numbers respectively.", "input": "", "output": "class Calculator:\n    \"\"\"Class for calculating the sum and product of two numbers.\"\"\"\n\n    # Method for calculating sum of two numbers\n    def get_sum(self, num1, num2):\n        return num1 + num2\n    \n    # Method for calculating product of two numbers\n    def get_product(self, num1, num2):\n        return num1 * num2\n\n# Create an instance of the class\ncalc = Calculator()\n\n# Calculate the sum\nsum_value = calc.get_sum(3, 4)\nprint(\"Sum:\", sum_value) # 7\n\n# Calculate the product\nproduct_value = calc.get_product(3, 4)\nprint(\"Product:\", product_value) # 12", "category": "Python"}, {"instruction": "Debug the following code for finding the median of three numbers.", "input": "def find_median(a, b, c):\n    if a > b: \n        if b > c:\n            return b \n        elif a > c:\n            return c\n        else:\n            return a\n    elif b > c:\n        return b\n    elif a > c:\n        return a\n    else:\n        return c", "output": "def find_median(a, b, c):\n    # Calculate the maximum of the three numbers\n    max_num = max(a, b, c)\n    # Calculate the minimum of the three numbers\n    min_num = min(a, b, c)\n    # Calculate the median value as the sum of the three numbers minus the maximum and minimum\n    median = a + b + c - max_num - min_num\n    return median\n\nmedian_value = find_median(2, 3, 5)\nprint(median_value) # 3", "category": "Python"}, {"instruction": "Given a string, write a code that counts the number of alphabets in it.", "input": "input_string = \"Hello World!\"", "output": "input_string = \"Hello World!\"\n\n# Count the number of alphabets\nnum_alphabets = sum(c.isalpha() for c in input_string) \n\nprint(\"Number of alphabets in the string:\", num_alphabets)", "category": "Python"}, {"instruction": "What is the difference between procedural and object-oriented programming?", "input": "", "output": "The main difference between procedural and object-oriented programming is that object-oriented programming focuses on the objects and how they interact with each other, while procedural programming focuses on executing a sequence of steps. In object-oriented programming, data and functions are encapsulated into objects that can interact with each other, while procedural programming relies on the execution of a sequence of instructions. In addition, object-oriented programming encourages code reusability, while procedural programming does not.", "category": "Python"}, {"instruction": "Design an algorithm to add two given binary numbers", "input": "", "output": "def add_binary(b1, b2):\n \u00a0 \u00a0# initalize result\n \u00a0 \u00a0result = \"\"\n \u00a0 \u00a0carry = 0\n \u00a0 \u00a0# iterate over the bits\n \u00a0 \u00a0for i in range(max(len(b1), len(b2))):\n \u00a0 \u00a0 \u00a0 \u00a0a = int(b1[-i-1]) if i < len(b1) else 0\n \u00a0 \u00a0 \u00a0 \u00a0b = int(b2[-i-1]) if i < len(b2) else 0\n \u00a0 \u00a0 \u00a0 \u00a0#calculate sum\n \u00a0 \u00a0 \u00a0 \u00a0sum = carry ^ a ^ b\n \u00a0 \u00a0 \u00a0 \u00a0result = str(sum) + result\n \u00a0 \u00a0 \u00a0 \u00a0# calculate the carry\n \u00a0 \u00a0 \u00a0 \u00a0carry = (carry&a) | (carry&b) | (a&b)\n \u00a0 \u00a0#append the carry to the result\n \u00a0 \u00a0if carry:\n \u00a0 \u00a0 \u00a0 \u00a0result = '1' + result\n \u00a0 \u00a0return result", "category": "Python"}, {"instruction": "Create a program to detect a loop in a linked list", "input": "", "output": "def detect_loop(head): \n    slow_p = head \n    fast_p = head \n\n    while(slow_p and fast_p and fast_p.next): \n        slow_p = slow_p.next\n        fast_p = fast_p.next.next\n        if slow_p == fast_p: \n            return 1\n    return 0", "category": "Python"}, {"instruction": "Create a sorting algorithm for an array that only needs 1 iteration", "input": "", "output": "def one_iteration_sort(arr):\n    for i in range(len(arr)):\n        min_index = i\n        for j in range(i, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]", "category": "Python"}, {"instruction": "Write the code to calculate a factorial recursively", "input": "", "output": "def factorial(n):\n \u00a0 \u00a0if n == 0:\n \u00a0 \u00a0 \u00a0 \u00a0return 1\n \u00a0 \u00a0else:\n \u00a0 \u00a0 \u00a0 \u00a0return n * factorial(n - 1)", "category": "Python"}, {"instruction": "Design the algorithm to perform a depth-first search on given binary tree", "input": "", "output": "def DFS(root):\n    s = Stack()\n    s.push(root)\n    while (s.size() > 0):\n        node = s.pop()\n        # Do something with the node\n        if (node.left != NULL):\n            s.push(node.left)\n        if (node.right != NULL):\n            s.push(node.right)", "category": "Python"}, {"instruction": "Design algorithm for the below use case", "input": "Given two arrays A and B of the same length, determine whether there is a\u00a0pair of indices\u00a0(i, j) such that\u00a0A[i] == B[j].", "output": "def check_if_pair_exists(arr_a, arr_b):\n    for i in range(len(arr_a)): \n        for j in range(len(arr_b)): \n            if arr_a[i] == arr_b[j]: \n                return True\n    return False", "category": "Python"}, {"instruction": "Generate permutations of the given array of numbers.", "input": "numbers = [1, 2, 3]", "output": "def permutations(arr):\n    # base case:\n    if len(arr) == 0:\n        return []\n \n    # base case: \n    if len(arr) == 1:\n        return [arr]\n \n    # find all permutations for arr of size n-1\n    smaller_permutations = permutations(arr[1:])\n \n    # find permutations for element at the index 0\n    current_element = arr[0]\n    permutations_for_current_element = []\n \n    # iterate smaller permutations\n    for per in smaller_permutations:\n        # create new permutation\n        for i in range(len(per)+1):\n            # copy original values\n            new_permutation = per[:]\n            # insert current element\n            new_permutation.insert(i, current_element)\n            permutations_for_current_element.append(new_permutation)\n \n    return permutations_for_current_element", "category": "Python"}, {"instruction": "Create a program to detect a negative number in an array of numbers.", "input": "numbers = [10, -5, 4, 20]", "output": "def detect_negative_number(numbers):\n    flag = False\n    for num in numbers:\n        if num < 0:\n            flag = True\n            break\n    return flag", "category": "Python"}, {"instruction": "Develop an API that returns a list of students and their ages.", "input": "", "output": "import flask\n\napp = flask.Flask(__name__)\n\nstudents = {\n    'John': 20,\n    'Jane': 19,\n    'Bob': 22\n}\n\n@app.route(\"/get_student_ages\", methods = [\"GET\"])\ndef get_student_ages():\n    return flask.jsonify(students)\n  \nif __name__ == \"__main__\":\n    app.run()", "category": "Python"}, {"instruction": "Using Python, create a program that prints out the numbers 0 to 100.", "input": "", "output": "for i in range(101):\n    print(i)", "category": "Python"}, {"instruction": "Given a data set, calculate the average using Python.", "input": "[1, 2, 3, 4, 5]", "output": "nums = [1,2,3,4,5]\nsum = 0\n\nfor num in nums:\n  sum +=num\n\naverage =sum / len(nums)\n\nprint(average) // output is 3.0", "category": "Python"}, {"instruction": "Explain the concept of the depth-first search algorithm and provide an example.", "input": "", "output": "Depth-first search (DFS) is an algorithm used to traverse a tree or graph data structure. It starts at the root of the tree, explores as far as possible down a given branch and then backtracks along the same path before exploring a new branch. For example, consider a BST (Binary Search Tree) where we want to traverse all the elements, the algorithm starts at the root node, then traverses all the elements in the left subtree before traversing all the elements in the right subtree.", "category": "Python"}, {"instruction": "Create a function to print a table using a given dictionary.", "input": "example_dict = {\n    'Name': ['John', 'Stella', 'Daniel'], \n    'Age': [20, 23, 19]\n}", "output": "def print_table(dictionary):\n    \"\"\"Prints a table from a dictionary of lists.\"\"\"\n    # retrieve the lists\n    names = dictionary['Name']\n    ages = dictionary['Age']\n\n    # print the table\n    print('\\tName\\tAge')\n    print('-' * 20)\n    for i, name in enumerate(names):\n        age = ages[i]\n        print(f'\\t{name}\\t{age}')", "category": "Python"}, {"instruction": "Clone a given array.", "input": "arr = [1,2,3,4,5]", "output": "def clone(arr):\n  new_arr = arr.copy()\n  return new_arr", "category": "Python"}, {"instruction": "Write a function to classify a text as positive or negative.", "input": "text = \"This is an amazing product.\"", "output": "def classify_text(text):\n  score = 0\n  words = text.split(\" \")\n  for word in words:\n    if word in positive_words:\n      score += 1\n    elif word in negative_words:\n      score -= 1\n  if score > 0:\n    return \"positive\"\n  elif score == 0:\n    return \"neutral\"\n  else:\n    return \"negative\"", "category": "Python"}, {"instruction": "Write a function to decode a string encoded using Base64.", "input": "encoded_s = \"TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgdGluY2lkdXJlIGV4c2VlIGRlc2VydW50IG1vbGxpdCBhbmltIGlwc3VtIHRlbXBvcmUgYSBjb25zZXF1YXQgcXVpcyBkb2xvcmVtIG5pc2ku", "output": "import base64 \ndef decode_base64(encoded_s):\n   decoded_s = base64.b64decode(encoded_s).decode('utf-8') \n   return decoded_s", "category": "Python"}, {"instruction": "You have been given a list containing both words and numbers. You need to write a code to generate a new list containing only words in the original list and to calculate the average length of the words.", "input": "mixed_list = ['cat', 1, 'dog', 2, 'rabbit', 3]", "output": "def get_words(mixed_list):\n  words = []\n  for item in mixed_list:\n    if type(item) == str:\n      words.append(item)\n  return words\n\ndef get_average_word_length(words):\n  total_length = 0\n  for word in words:\n    total_length += len(word)\n  return total_length/len(words)\n\nif __name__ == \"__main__\":\n  words = get_words(mixed_list)\n  print(\"Words in original list:\", words)\n  print(\"Average length of the words:\", get_average_word_length(words))", "category": "Python"}, {"instruction": "Write a code to generate fibonacci series for first n numbers.", "input": "", "output": "def generate_fibonacci(n):\n  fibonacci = [0, 1]\n  for i in range(2, n):\n    fibonacci.append(fibonacci[i - 1] + fibonacci[i - 2])\n  return fibonacci[:n]\n\nif __name__ == \"__main__\":\n  print(generate_fibonacci(n))", "category": "Python"}, {"instruction": "You have been given a list of user details (Names, Addresses etc). Write a code to filter out the users whose age is more than 21.", "input": "user_details = [\n {'name': 'John Doe', 'age': 34, 'address': '123 Main Street'},\n {'name': 'Jane Doe', 'age': 18, 'address': '456 Wallaby Way'},\n {'name': 'Bob Smith', 'age': 21, 'address': '789 Ocean View'},\n]", "output": "def filter_users(user_details):\n  users_over_21 = []\n  for user in user_details:\n    if user['age'] > 21:\n      users_over_21.append(user)\n  return users_over_21\n\nif __name__ == \"__main__\":\n  print(\"Users over 21:\", filter_users(user_details))", "category": "Python"}, {"instruction": "Use the given array to find distinct values.", "input": "arr = [1, 2, 3, 3, 4, 5]", "output": "def find_distinct(arr):\n    distinct_list = []\n    for num in arr:\n        if num not in distinct_list:\n            distinct_list.append(num)\n\n    return distinct_list\n\narr = [1, 2, 3, 3, 4, 5]\nprint(find_distinct(arr))  # Output: [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Given a string of text, write a python script to remove all non-alphanumeric characters.", "input": "", "output": "def remove_non_alphanumeric_chars(input_string):\n  return ''.join(c for c in input_string if c.isalnum())", "category": "Python"}, {"instruction": "What is the meaning of the acronym JSON?", "input": "", "output": "The acronym JSON stands for JavaScript Object Notation. It is a text-based format for data interchange, which makes it easy for machines to parse and generate.", "category": "Python"}, {"instruction": "What is the difference between higher order functions and first class functions?", "input": "", "output": "Higher order functions are functions that can take other functions as arguments or return other functions as output. First class functions are functions that can be passed as arguments to other functions, returned from other functions, assigned to variables, or used in any other way that a value can be used.", "category": "Python"}, {"instruction": "Name two methods of sorting a list in Python.", "input": "", "output": "The two methods of sorting a list in Python are the sorted() function and the .sort() method.", "category": "Python"}, {"instruction": "Edit the code to create a program to print all the leap years between 1900 and 2000.", "input": "for year in range(1900, 2001):\n    # TODO", "output": "for year in range(1900, 2001):\n    if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:\n        print(year)", "category": "Python"}, {"instruction": "Given a linked list, write a program to delete a given node.", "input": "1 -> 2 -> 3 -> 4 -> 5 -> NULL\nNode = 3", "output": "class Node: \n    def __init__(self, data): \n        self.data = data  \n        self.next = None\n\ndef delete_node(head, node):\n    prev = None\n    curr = head\n    while(curr is not None and curr.data != node):\n        prev = curr\n        curr = curr.next\n    prev.next = curr.next", "category": "Python"}, {"instruction": "Given two strings, s1 and s2, write a program to return the longest common substring between them.", "input": "s1 = 'abcdef'\ns2 = 'fghijk'", "output": "def longest_common_substring(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\nlongest_substring = longest_common_substring(s1, s2)", "category": "Python"}, {"instruction": "Create a program to calculate the mean of the following list.", "input": "myList = [4, 8, 10, 15]", "output": "def mean(myList):\n    sum = 0\n    for num in myList:\n        sum += num\n    average = round(sum/len(myList), 2)\n    return average\n\nmean_result = mean(myList)", "category": "Python"}, {"instruction": "Generate a random 6-digit integer.", "input": "", "output": "import random\n\nrandom_int = str(random.randint(100000, 999999))", "category": "Python"}, {"instruction": "With the provided data, find the correlation coefficient between the two variables.", "input": "x: [4, 5, 7, 8]\ny: [6, 7, 8, 10]", "output": "x = [4, 5, 7, 8]\ny = [6, 7, 8, 10]\n\ndef find_correlation_coefficient(x, y):\n    n = len(x)\n    # Calculate the sums\n    sum_x = sum(x)\n    sum_y = sum(y)\n    # Calculate the sum of the squares\n    squared_sum_x = sum([pow(x[i], 2) for i in range(n)])\n    squared_sum_y = sum([pow(y[i], 2) for i in range(n)])\n    # Calculate the sum of the products\n    product_sum = sum([x[i]*y[i] for i in range(n)])\n    # Calculate the correlation coefficient\n    num = product_sum - (sum_x * sum_y/n)\n    den = ((squared_sum_x - (pow(sum_x,2) / n)) * (squared_sum_y - (pow(sum_y,2) / n))) ** 0.5\n    r = num/den\n    return r\n\nprint(\" The correlation coefficient is: \" + str(find_correlation_coefficient(x, y))) # 0.9", "category": "Python"}, {"instruction": "Create a Python dictionary with customer details provided.", "input": "Name: John\nAge: 25\nGender: Male\nOccupation: Chef", "output": "customer = { \n'name': 'John',\n'age': 25,\n'gender': 'Male',\n'occupation': 'Chef'\n}", "category": "Python"}, {"instruction": "Using recursion, write a Python program to find the factorial of a given number.", "input": "Number: 5", "output": "def factorial(num): \n    if num == 1: \n        return 1\n    else: \n        return num * factorial(num-1)\n\nans = factorial(5)\nprint(ans)", "category": "Python"}, {"instruction": "Rewrite the following Python code to a Bash program.", "input": "v = [1, 2, 3, 4, 5]\nfor i in v:\nprint(i)", "output": "v=(1 2 3 4 5)\n\nfor i in ${v[@]}; do\n    echo $i\ndone", "category": "Python"}, {"instruction": "Create a Python class for a user object that includes a name and email field.", "input": "", "output": "class User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email", "category": "Python"}, {"instruction": "Write a Python code to group the following numbers according to their last digit [1, 9, 5, 4, 6, 7, 8, 11].", "input": "[1, 9, 5, 4, 6, 7, 8, 11]", "output": "group_by_last_digit = {\n    0: [],\n    1: [1],\n    2: [],\n    3: [],\n    4: [4],\n    5: [5],\n    6: [6],\n    7: [7],\n    8: [8],\n    9: [9],\n    11: [11]\n}", "category": "Python"}, {"instruction": "Write a function to extract the elements from a given list and add them to a new list.", "input": "given_list = [0, 2, 4, 6, 8]", "output": "def extract_and_add_elements(given_list):\n    new_list = []\n    for x in given_list:\n        new_list.append(x)\n    return new_list", "category": "Python"}, {"instruction": "Create a class in Python with one method called talk that prints a string when invoked.", "input": "", "output": "class MyClass:\n  def talk(self):\n    print(\"Hello, world!\")", "category": "Python"}, {"instruction": "You have been given a list of numbers. Write a code to generate a new list of numbers containing only the even numbers from the original list.", "input": "numbers = [2, 3, 5, 6, 8, 9, 10]", "output": "def get_even_numbers(numbers):\n  even_numbers = []\n  for num in numbers:\n    if num % 2 == 0:\n      even_numbers.append(num)\n  return even_numbers\n\nif __name__ == \"__main__\":\n  print(\"Even numbers from original list:\", get_even_numbers(numbers))", "category": "Python"}, {"instruction": "Create a Python program to analyze a given list of URL requests and count the number of unique requests.", "input": "", "output": "def count_unique_requests(url_list):\n    return len(set(url_list))", "category": "Python"}, {"instruction": "You have been given a list of strings. Write a code to generate a new list containing only the strings with length less than 6 characters.", "input": "strings = ['Ready', 'Set', 'Go', 'Hello', 'Pizza', 'Book']", "output": "def get_shorter_strings(strings):\n  shorter_strings = []\n  for string in strings:\n    if len(string) < 6:\n      shorter_strings.append(string)\n  return shorter_strings\n\nif __name__ == \"__main__\":\n  print(\"strings with length less than 6:\", get_shorter_strings(strings))", "category": "Python"}, {"instruction": "Filter a given list of numbers in Python to find all the even numbers.", "input": "list1 = [3, 4, 5, 6, 7, 8, 9]", "output": "list2 = [number for number in list1 if number % 2 == 0]\nprint(list2) #[4, 6, 8]", "category": "Python"}, {"instruction": "Generate a random probability distribution with mean 0 and standard deviation 1 in Python.", "input": "", "output": "import numpy as np\n\ndist = np.random.normal(0, 1, 1000)  # mean, standard deviation, samples", "category": "Python"}, {"instruction": "Write an algorithm to find the longest sub string without repeating characters.", "input": "string = 'abcabcbb'", "output": "def length_longest_substring(string):\n    start = 0\n    max_length = 0\n    seen = {}\n    for end in range(len(string)):\n        # Check if the character has been previously seen.\n        if string[end] in seen:\n            # Move the starting point of the substring to the index after the last seen character of this character.\n            start = max(start, seen[string[end]] + 1)\n        # Update the index value of the last seen character.\n        seen[string[end]] = end\n        # Calculate the length of the current substring.\n        max_length = max(max_length, end - start + 1)\n    # Return the maximum length of the substring.\n    return max_length", "category": "Python"}, {"instruction": "Given a string of text, print the count of all the words.", "input": "", "output": "def word_count(string):\n    count = 0\n    for word in string.split():\n        count += 1\n    return count", "category": "Python"}, {"instruction": "Build a code to print out all permutations of the characters in a given string.", "input": "\"ABC\"", "output": "def permute(s): \n    if len(s) == 0: \n        return [''] \n    prev_permutation_list = permute(s[1:len(s)])  \n    next_list = [] \n    for p in prev_permutation_list: \n        for j in range(len(p) + 1): \n            next_list.append(p[0:j] + s[0] + p[j:len(p)])  \n    return next_list", "category": "Python"}, {"instruction": "Design a code to divide two integers without using division operator.", "input": "38, 4", "output": "def divide_without_operator(x, y):\n    if x == 0:\n        return 0 \n  \n    sign = 1\n    if x * y < 0:\n        sign = -1\n  \n    x = abs(x) \n    y = abs(y) \n  \n    result = 0\n  \n    while (x >= y): \n  \n        temp = y \n        i = 1\n  \n        while (x >= temp): \n            x -= temp \n            result += i \n            i <<= 1 \n            temp <<= 1 \n  \n    return result * sign", "category": "Python"}, {"instruction": "Construct a code to remove all numbers greater than specified value from a given list.", "input": "[1, 6, 4, 9, 5, 8, 2], 7", "output": "def remove_greater(arr, value):\n    new_arr = []\n    for num in arr:\n        if num <= value:\n            new_arr.append(num)\n    return new_arr", "category": "Python"}, {"instruction": "Design a code to arrange an array of numbers such that all odd numbers come before even numbers.", "input": "[2, 8, 3, 4, 9]", "output": "def rearrange_arr(arr): \n    odd_list, even_list = [], [] \n    for num in arr: \n        if num & 1: \n            odd_list.append(num) \n        else: \n            even_list.append(num) \n  \n    return odd_list + even_list", "category": "Python"}, {"instruction": "Compose a code to find the mean and median of a given list", "input": "[1, 6, 4, 9, 5, 8, 2]", "output": "def get_mean_median(nums):\n    num_count = len(nums) \n    num_sum = 0.0\n    for num in nums: \n        num_sum += num\n  \n    mean = num_sum / num_count \n  \n    nums.sort() \n    if num_count % 2 == 0: \n        median1 = nums[num_count//2] \n        median2 = nums[num_count//2 - 1] \n        median = (median1 + median2)/2\n    else: \n        median = nums[num_count//2] \n  \n    return mean, median", "category": "Python"}, {"instruction": "Design a data structure to store a list of names of the student with their respective grades in a class.", "input": "Student names and grades\n\n[\n    ['John', 90], \n    ['Tom', 80],\n    ['Jill', 95],\n    ['Stacy', 75]\n]", "output": "class StudentGrades:\n    def __init__(self, names, grades):\n        self.names = names\n        self.grades = grades\n    \n    def add_entry(self, name, grade):\n        self.names.append(name)\n        self.grades.append(grade)\n        \n    def get_grade(self, name):\n        for i in range(len(self.names)):\n            if self.names[i] == name:\n               return self.grades[i]", "category": "Python"}, {"instruction": "Write a class and its constructor in Python for a vehicle object that has the fields 'type', 'make', 'model' and 'color'.", "input": "Car, Toyota, Camry, Red", "output": "class Vehicle:\n    def __init__(self, vehicle_type, make, model, color):\n        self.type = vehicle_type\n        self.make = make\n        self.model = model\n        self.color = color\n\ncar = Vehicle(\"Car\", \"Toyota\", \"Camry\", \"Red\")", "category": "Python"}, {"instruction": "Write a function to detect if the given integer is even or odd.", "input": "number = 3", "output": "def is_even(number):\n    if number % 2 == 0:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Write a Python program to find the longest substring in a given string which has no repeating characters.", "input": "", "output": "def longest_substring_without_repeating_characters(str):\n    start, max_len = 0, 0\n    used_char = {}\n\n    for i, char in enumerate(str):\n        if char in used_char and start <= used_char[char]:\n            start = used_char[char] + 1\n        else:\n            max_len = max(max_len, i - start + 1)\n\n        used_char[char] = i\n        \n    return max_len", "category": "Python"}, {"instruction": "Create a for loop in Python that iterates over every element in a list named 'nums'.", "input": "nums = [1, 4, 6, 8, 10]", "output": "for num in nums:\n    # Do something with num", "category": "Python"}, {"instruction": "Using a given array of numbers, create a function to display the frequency of each number.", "input": "", "output": "def frequency(array):\n    count = {}\n    # Count the number of occurances\n    for element in array:\n        if element not in count:\n            count[element] = 1\n        else:\n            count[element] += 1\n\n    # Display the count\n    for element in count:\n        print(\"Number {} occurs {} times\".format(element, count[element]))", "category": "Python"}, {"instruction": "Write code that validates a given number is within a given range", "input": "num = 5\nmin = 0\nmax = 10", "output": "def in_range(num, min, max):\n    if num in range(min, max):\n        print(f'{num} is in range')\n    else:\n        print(f'{num} is not in range')\nin_range(num, min, max) # Output: 5 is in range", "category": "Python"}, {"instruction": "Read an array of numbers and output an array with all the even numbers", "input": "array = [2, 3, 4, 5, 6, 7, 8]", "output": "even_array = [i for i in array if i % 2 == 0] \nprint(even_array) # Output: [2, 4, 6, 8]", "category": "Python"}, {"instruction": "Given a 2-dimensional array, print the elements across each row.", "input": "arr = [[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]]", "output": "for row in arr:\n    for col in row:\n        print(col, end=\" \")\n    print(\"\")\n# Output\n1 2 3\n4 5 6\n7 8 9", "category": "Python"}, {"instruction": "What is a bot?", "input": "", "output": "A bot is a software application that automates simple tasks such as sending messages, responding to questions, or performing other tasks. It is often used to create interactive experiences with users, such as chatbots or virtual assistants. It can also be used to automate online activities such as web browsing and data entry.", "category": "Python"}, {"instruction": "Edit a piece of code to fix a syntax error.", "input": "def loopList(list) \n  for i in range(5) \n    sum += list i\n  \n  return sum", "output": "def loopList(list): \n  sum = 0\n  for i in range(5):\n    sum += list[i] \n  \n  return sum", "category": "Python"}, {"instruction": "Write a code to detect all possible anagrams of a given word in Python.", "input": "word = \"cat\"", "output": "def all_anagrams(word):\n \n    if len(word) ==0:\n        return [word]\n    else:\n        temp = []\n        for anagram in all_anagrams(word[1:]):\n            for i in range(len(word)):\n                temp.append(anagram[:i] + word[0:1] + anagram[i:])\n        return temp\n\nall_anagrams(word) // Returns ['act', 'atc', 'cat', 'cta', 'tac', 'tca']", "category": "Python"}, {"instruction": "Write a Python program to identify whether or not a given number is prime.", "input": "", "output": "def is_prime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Write a code to count the occurrences of a particular element in a given list.", "input": "list1 = [1, 2, 3, 3, 3, 4, 5]\nelement = 3", "output": "def count_occurrences(list1, element):\n  count = 0\n  for elem in list1:\n    if elem == element:\n      count += 1\n  return count\n\nif __name__ == \"__main__\":\n  print(\"Number of occurrences of\", element, \"in the list:\", count_occurrences(list1, element))", "category": "Python"}, {"instruction": "Write a Python Class to store a telephone directory's details.", "input": "", "output": "class TelephoneDirectory:\n def __init__(self):\n self.contacts = {}\n\n def add(self, name, number):\n self.contacts[name] = number\n\n def find(self, name):\n return self.contacts[name]", "category": "Python"}, {"instruction": "Given an array of integers, find the maximum difference between two elements in the array such that the larger element appears after the smaller element in the array.", "input": "[5, 2, 4, 7, 15]", "output": "def maxDifference(arr):\n  # Initialize max difference\n  max_difference = 0\n\n  # Traverse the array\n  for i in range(len(arr) - 1):\n    for j in range(i + 1, len(arr)):\n      # Find the difference between two elements\n      diff = arr[j] - arr[i]\n\n      # Check if the difference is the maximum\n      if diff > max_difference:\n        max_difference = diff\n\n  return max_difference\n\n# Output\nmaxDifference([5, 2, 4, 7, 15]) # 13", "category": "Python"}, {"instruction": "Take the following list of temperatures in Celsius and convert them to Fahrenheit.", "input": "[10, 15, 20, 25, 30]", "output": "def celsius_to_fahrenheit(celsius):\n    return (celsius * (9/5)) + 32\n\nif __name__ == '__main__':\n    temperatures = [10, 15, 20, 25, 30]\n    fahrenheit_temperatures = []\n    for temp in temperatures:\n        fahrenheit_temperatures.append(celsius_to_fahrenheit(temp))\n    \n    print(fahrenheit_temperatures)", "category": "Python"}, {"instruction": "Write a Python program to calculate the number of bits needed to represent an integer in binary form.", "input": "", "output": "def num_of_bits(num):\n    return len(bin(num)[2:])\n\nif __name__ == '__main__':\n    print(num_of_bits(50))", "category": "Python"}, {"instruction": "Write a Python script to parse given web pages and extract links from it.", "input": "", "output": "\"\"\"\nWrite a Python script to parse given web pages and extract links from it\n\"\"\"\n\nfrom bs4 import BeautifulSoup\nimport requests\n\ndef extract_links(url):\n    response = requests.get(url)\n    data = response.text\n    soup = BeautifulSoup(data, 'html.parser')\n    links = []\n    for link in soup.find_all('a'):\n        links.append(link.get('href'))\n    return links\n\nif __name__ == '__main__':\n    print(extract_links('https://example.com'))", "category": "Python"}, {"instruction": "Create a method to filter out odd numbers from an array.", "input": "array = [6, 5, 9, 10, 11, 8]", "output": "def filter_odd_numbers(array): \n    result = [] \n    for i in array: \n        if i % 2 == 0: \n            result.append(i) \n    return result\n\n# Driver code\narray = [6, 5, 9, 10, 11, 8] \nprint(filter_odd_numbers(array))", "category": "Python"}, {"instruction": "Generate a function in Python to compute the area of a rectangle.", "input": "", "output": "def area_rectangle(length, breadth): \n    return length * breadth", "category": "Python"}, {"instruction": "Design a function to calculate the GCD (greatest common divisor) of two given integers.", "input": "", "output": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a", "category": "Python"}, {"instruction": "Design a function to input an array and sort it using QuickSort algorithm.", "input": "", "output": "def quicksort(arr): \n    if len(arr) <= 1:\n        return arr\n  \n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)", "category": "Python"}, {"instruction": "Write a function to create a matrix NxN with values of 0 filled in.", "input": "", "output": "def generate_matrix(n):\n    matrix = []\n    for _ in range(n):\n        matrix.append([0 for _ in range(n)])\n    return matrix", "category": "Python"}, {"instruction": "Construct a class to represent a basic calculator with functions for addition, subtraction, multiplication and division.", "input": "", "output": "class Calculator:\n    def __init__(self):\n        pass\n\n    def add(self, a, b):\n        return a + b\n    \n    def subtract(self, a, b):\n        return a - b\n\n    def multiply(self, a, b):\n        return a * b\n\n    def divide(self, a, b):\n        return a / b", "category": "Python"}, {"instruction": "Write a Python code to generate random numbers from the given list.", "input": "[10, 20, 30, 40]", "output": "import random\n\nnumbers = [10, 20, 30, 40]\n\nrandom_number = random.choice(numbers)\n\nprint(random_number)", "category": "Python"}, {"instruction": "Devise a Python code snippet to return the last character of a given string.", "input": "string = \"stackoverflow\"", "output": "last_char = string[-1]\nprint(last_char)", "category": "Python"}, {"instruction": "Create a pandas dataframe to display the given data as a table.", "input": "Name     Age     City\nAlice    25      London\nBob      32      Tokyo", "output": "import pandas as pd\n\ndata = [\n {'Name': 'Alice', 'Age': 25, 'City': 'London' },\n {'Name': 'Bob', 'Age': 32, 'City': 'Tokyo' }\n ]\n\ndata_frame = pd.DataFrame(data)\nprint(data_frame)\n\nOutput:\nName  Age     City\n0  Alice    25    London\n1    Bob    32     Tokyo", "category": "Python"}, {"instruction": "Create a function that processes an array to remove all the duplicated elements", "input": "[1, 1, 2, 5, 6, 6, 10]", "output": "def remove_duplicates(arr):\n  new_arr = []\n  \n  for i in arr:\n    if i not in new_arr:\n      new_arr.append(i)\n  \n  return new_arr\n  \nremove_duplicates([1, 1, 2, 5, 6, 6, 10])\n# returns [1, 2, 5, 6, 10]", "category": "Python"}, {"instruction": "Analyze the following code and suggest a modification", "input": "def hello():\n    print('Hello!')", "output": "# This code prints out \"Hello!\" when called.\n# A modification to include a parameter for a name would be as follows:\ndef hello(name):\n    print('Hello, ' + name + '!')", "category": "Python"}, {"instruction": "Modify the following python program to include a comment explaining the purpose of the code", "input": "numbers = [1, 2, 3, 4, 5]\nsum = 0\nfor num in numbers:\n    sum += num", "output": "# This program is used to calculate the sum of a given list of numbers\n\nnumbers = [1, 2, 3, 4, 5]\nsum = 0\nfor num in numbers:\n    sum += num", "category": "Python"}, {"instruction": "Given the following array, delete all occurrences of the number 4.", "input": "list1 = [4, 3, 4, 2, 3, 4, 4]", "output": "list1 = [4, 3, 4, 2, 3, 4, 4]\n\ndef delete_four(arr):\n    \"\"\"This function deletes all occurrences of the number 4 in the given array\"\"\"\n    for i in range(len(arr)):\n        if arr[i] == 4:\n            arr.pop(i)\n            i -= 1\n    return arr\n\nprint(delete_four(list1))", "category": "Python"}, {"instruction": "Create a function that takes an array and prints out the biggest number in it.", "input": "[1, 7, 2, 11, 4]", "output": "def find_max_num(nums_list):\n    \"\"\"This function takes an array and prints out the biggest number in it.\"\"\"\n    max_num = nums_list[0]\n    for num in nums_list:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nnums_list = [1, 7, 2, 11, 4]\nprint(find_max_num(nums_list))", "category": "Python"}, {"instruction": "Create a Python program to calculate the square root of a number provided by the user.", "input": "", "output": "def square_root(number):\n    \"\"\"This program takes a number and calculates its square root.\"\"\"\n    return number**0.5\n\nnum = int(input(\"Enter a number: \"))\nprint(\"The square root of \", num, \" is \", square_root(num))", "category": "Python"}, {"instruction": "Create an algorithm that takes two integers and returns the smallest common multiple of the two numbers.", "input": "x = 12\ny = 24", "output": "def smallest_common_multiple(x, y):\n  for i in range(1, y+1):\n    if (i % x == 0) and (i % y == 0):\n      return i\n\nif __name__ == '__main__':\n  x = 12\n  y = 24\n  print(smallest_common_multiple(x, y))", "category": "Python"}, {"instruction": "Create a method to convert a given number to Roman numeral format.", "input": "num = 2020", "output": "def int_to_roman(num):\n  roman_numerals = {\n    1: 'I',\n    4: 'IV',\n    5: 'V',\n    9: 'IX',\n    10: 'X',\n    40: 'XL',\n    50: 'L',\n    90: 'XC',\n    100: 'C',\n    400: 'CD',\n    500: 'D',\n    900: 'CM',\n    1000: 'M'\n  }\n  result = ''\n  for n in sorted(roman_numerals.keys(), reverse=True):\n    count = num // n\n    result += roman_numerals[n] * count\n    num %= n\n  return result\n\nif __name__ == '__main__':\n  num = 2020\n  print(int_to_roman(num))", "category": "Python"}, {"instruction": "Analyze the following code and answer the following question: Is there a bug in this code?", "input": "def foo(num):\n  if num == 0:\n    return 1\n  else:\n    return foo(num - 1)", "output": "Yes, there is a bug in this code. The function `foo` does not have a base case and will cause an infinite recursion if it is called with a non-zero argument. The base case should be if `num == 0` then `return 1` else `return foo(num - 1)`.", "category": "Python"}, {"instruction": "Generate a Python code snippet to print the list of numbers from 0 to 9.", "input": "", "output": "for i in range(0,10):\n    print(i)", "category": "Python"}, {"instruction": "Find the number of occurrences of \u2018Python\u2019 in the given string.", "input": "Python is a great language. Python is easy to learn.", "output": "def count_occurences(str, word):\n    return str.count(word)\n\nif __name__ == '__main__':\n    str = 'Python is a great language. Python is easy to learn.'\n    print(count_occurences(str, 'Python'))", "category": "Python"}, {"instruction": "Remove any element from an array that is greater than 10", "input": "[3, 5, 10, 20, 7]", "output": "def removeGreaterThanTen(arr): \n\t# Create a new_arr array\n    new_arr = [] \n\n    # Iterate each element in array\n    for i in range(len(arr)):\n\n        # Check if the element is greater than 10\n        if arr[i] <= 10: \n            # Add the element to the new_arr\n            new_arr.append(arr[i]) \n\n    return new_arr", "category": "Python"}, {"instruction": "Find the largest key in a dictionary", "input": "{'a':1, 'b':5, 'c':6, 'd':9}", "output": "def findLargestKey(d): \n\t# Initialize largest_key and largest_val\n    largest_key = None\n    largest_val = -1\n\t\n    # Iterate each key-value in dictionary\n    for key, value in d.items():\n\t\t# Initialize largest_key and largest_val\n        if value > largest_val: \n            largest_val = value\n            largest_key = key\n  \n    return largest_key", "category": "Python"}, {"instruction": "Create an algorithm to compute the greatest common divisor between two numbers.", "input": "m = 8, n = 20", "output": "def gcd(m, n):\n    # base case \n    if m == 0:\n        return n\n    \n    # recursive case\n    return gcd(n % m, m)\n\nprint(gcd(8, 20)) # Output: 4", "category": "Python"}, {"instruction": "Create a Python class for a movie instance with name, director, and year fields.", "input": "", "output": "class Movie:\n    def __init__(self, name, director, year):\n        self.name = name\n        self.director = director\n        self.year = year", "category": "Python"}, {"instruction": "Re-implement the same program in a different language of your choice.", "input": "def quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quick_sort(less) + [pivot] + quick_sort(greater)", "output": "def quick sort(arr):\n    if len(arr) < 2:\n        return arr\n    else: \n        pivot = arr[0]\n        left = [x for x in arr[1:] if x <= pivot]\n        right = [x for x in arr[1:] if x > pivot]\n        return quick_sort(left) + [pivot] + quick_sort(right)", "category": "Python"}, {"instruction": "Create a Python script that inputs an integer and prints \"odd\" if the number is odd, or \"even\" if the number is even.", "input": "", "output": "def check_even_or_odd(num):\n  if num % 2 == 0:\n    print(\"even\")\n  else:\n    print(\"odd\")\n  \ncheck_even_or_odd(5) # odd", "category": "Python"}, {"instruction": "Implement a bubble sort on the given array of integers.", "input": "[4, 8, 1, 3, 9]", "output": "def bubble_sort(arr):\n  for _ in range(len(arr) -1): \n    for i in range(len(arr)-1):\n      if arr[i] > arr[i+1]:\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr\nprint(bubble_sort([4, 8, 1, 3, 9])) # [1, 3, 4, 8, 9]", "category": "Python"}, {"instruction": "In what languages can the TensorFlow library be used?", "input": "", "output": "The TensorFlow library can be used in Python, C++, JavaScript, Java, Go, Swift, and R. It is also supported in different platforms such as iOS, Android, and web browsers.", "category": "Python"}, {"instruction": "How do you define and call a function in Python?", "input": "", "output": "In Python, a function is defined using the `def` keyword followed by the function name, a list of parameters and the code block that implements the function. To call a function, you need to provide the name of the function followed by a list of arguments. For example, to define and call a function called `myfunc` with an argument `x`:\n\ndef myfunc(x):\n    # function implementation\n\nmyfunc(x)  # call the function with argument x", "category": "Python"}, {"instruction": "Calculate the value of PI using the Leibniz formula.", "input": "", "output": "def calculatePi():\n    pi = 0.0\n    N = 10000\n    sign = 1\n    for i in range(N):\n        pi += 4.0 * sign / (2.0 * i + 1.0)\n        sign *= -1\n    return pi\n\nprint(\"\u03c0 = \", calculatePi()) # 3.141592653589793", "category": "Python"}, {"instruction": "Solve the following problem. Given an array of integers, return an array with the elements multiplied by two.", "input": "arr = [2, 8, 10, 9]", "output": "def doubleElements(arr):\n  return [num * 2 for num in arr]\n  \narr = [2, 8, 10, 9]\nprint(doubleElements(arr)) // [4, 16, 20, 18]", "category": "Python"}, {"instruction": "Write a Python code to sort a given list into descending order.", "input": "", "output": "def sortDescending(nums):\n  nums.sort(reverse=True)\n  return nums", "category": "Python"}, {"instruction": "Look at the given code and find the bug in it.", "input": "def add_numbers(x,y):\n    return x + y + 1", "output": "The bug in the given code is that it adds 1 extra to the result of the function. To fix this, the return statement should be modified to: return x + y.", "category": "Python"}, {"instruction": "Extract only the digits from a given string using Python.", "input": "", "output": "import re\n\ndef extract_digits(string):\n    regex = r\"\\D\"\n    return re.sub(regex, \"\", string)", "category": "Python"}, {"instruction": "Write a Python script to convert a given number of minutes into hours and minutes.", "input": "", "output": "def minutes_to_hours(minutes):\n  hours = minutes // 60\n  minutes = minutes % 60\n  return hours, minutes", "category": "Python"}, {"instruction": "Develop a high-level algorithm for pathfinding.", "input": "", "output": "def find_path(start, end):\n    # Create an empty list to store the path\n    path = []\n\n    # Create a dictionary to store visited nodes\n    visited = {start: None}\n\n    # Create a queue and add the initial space to it\n    queue = [start]\n\n    # Keep looping until the queue is empty\n    while len(queue) > 0:\n        # Get the first element in the queue\n        curr = queue.pop(0)\n\n        # Add the current node to the path\n        path.append(curr)\n\n        # Check if we reached the end of the path\n        if curr == end:\n            return path\n\n        # Explore all neighbours of the current node\n        for neighbour in get_neighbours(curr):\n            # Check if the neighbour is not visited previously\n            if neighbour not in visited:\n                # Add the neighbour to the queue and mark it as visited\n                queue.append(neighbour)\n                visited[neighbour] = curr\n    # If the queue is empty, there is no path\n    return None", "category": "Python"}, {"instruction": "Edit the provided code so that it prints 10 rows and 10 columns of stars.", "input": "for row in range(5):\n    for col in range(5):\n        print(\"*\")", "output": "for row in range(10):\n    for col in range(10):\n        print(\"*\", end=\"\")\n    print()", "category": "Python"}, {"instruction": "Replace the \"TODO\" comment in the following Python statement with an appropriate value.", "input": "count = 0\n# TODO: add 1 to count", "output": "count = 0\ncount += 1", "category": "Python"}, {"instruction": "Write a Python code to generate Fibonacci sequence up to 'n' numbers, where 'n' is a given integer.", "input": "", "output": "def generateFib(n): \n    fib = [0, 1] \n    while len(fib) < n : \n        fib.append(fib[-1] + fib[-2]) \n          \n    return fib[:n]", "category": "Python"}, {"instruction": "Convert the Python code using the range function in the for loop to a list comprehension statement.", "input": "my_list = []\nfor i in range(10):\n    my_list.append(i)", "output": "my_list = [i for i in range(10)]", "category": "Python"}, {"instruction": "Create a variable in Python to store 10 multidimensional arrays.", "input": "", "output": "arrays = [[[1,2], [3,4]],\n          [[5,6], [7,8]],\n          [[9,10], [11,12]],\n          [[13,14], [15,16]],\n          [[17,18], [19,20]],\n          [[21,22], [23,24]],\n          [[25,26], [27,28]],\n          [[29,30], [31,32]],\n          [[33,34], [35,36]],\n          [[37,38], [39,40]]]", "category": "Python"}, {"instruction": "Create a Python Exception to handle Nonetype Error.", "input": "", "output": "try:\n    my_list = [1, 2, 3]\n    my_list[3]\nexcept TypeError:\n    print(\"Error: Nonetype Found\")", "category": "Python"}, {"instruction": "Write a multi-line comment in Python describing what the following program does.", "input": "def hello():\n    print(\"Hello World\")", "output": "\"\"\"\nThis program prints \"Hello World\" when executed. \nIt defines a function called \"hello\" that does not take any parameters \nand simply prints out \"Hello World\" when it is called.\n\"\"\"", "category": "Python"}, {"instruction": "Create a function that takes a list and returns a tuple containing the maximum and minimum values of the list.", "input": "[1, 4, 7, 3, 8]", "output": "def maxMin(arr):\n    # Initialize the maximum and the minimum value\n    maxi = arr[0] \n    mini = arr[0] \n  \n    # Iterate each element in arr to find the maximum and minimum\n    for i in range(1, len(arr)): \n        if arr[i] > maxi: \n            maxi = arr[i] \n        elif arr[i] < mini: \n            mini = arr[i]\n  \n    return (maxi, mini)", "category": "Python"}, {"instruction": "Create a function to get the intersection of two sorted arrays", "input": "arr1 = [1, 3, 4, 5, 6] \narr2 = [3, 5, 7, 8]", "output": "def intersection(arr1, arr2):\n    # Initialize a result array\n    res = [] \n\n    # Iterate each element of the first array and find in second array\n    for i in range(len(arr1)): \n        for j in range(len(arr2)):\n            # If element is present then append it to result array\n            if arr1[i] == arr2[j]: \n                res.append(arr1[i])\n  \n    return res", "category": "Python"}, {"instruction": "Create a regex pattern in Python that can extract URL from a text string.", "input": "text = \"Visit http://www.example.com for more information.\"", "output": "import re\n\npattern = re.compile(r'(https?://\\S+)')\nurls = re.findall(pattern, text)", "category": "Python"}, {"instruction": "Given a list of integers, determine the sum of all of elements in the list.", "input": "[3, 4, 5, 6]", "output": "def get_sum(nums):\n    total_sum = 0\n    for num in nums:\n        total_sum += num\n    return total_sum", "category": "Python"}, {"instruction": "Develop a machine learning model in Python to predict the credit risk of a customer based on their bank transaction data.", "input": "<100 rows of bank transaction data>", "output": "#import necessary models\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n#split data into train and test sets\nx_train, x_test, y_train, y_test = train_test_split(bank_data, credit_risk, test_size = 0.3)\n\n#create the machine learning model\nlr_model = LogisticRegression()\n\n#train the model\nlr_model.fit(x_train, y_train)", "category": "Python"}, {"instruction": "Generate a random password using a given string of characters.", "input": "String: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()\"", "output": "\"\"\"\nGenerate a random password using a given string of characters\n\"\"\"\n\nimport random \n\ndef generate_password(string):\n    password = ''\n    for _ in range(16):\n        password += random.choice(string)\n    return password\n\nif __name__ == '__main__':\n    string = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()\"\n    print(generate_password(string))", "category": "Python"}, {"instruction": "Write a function in Python to remove the element with the value of \u2018apple\u2019 from the list.", "input": "fruits =[\"banana\", \"apple\", \"mango\", \"orange\"]", "output": "def removeValue(fruits, elem):\n    for e in fruits:\n        if e == elem:\n            fruits.remove(e)\n            break\n\nremoveValue(fruits, \"apple\")\n\nprint(fruits) # ['banana', 'mango', 'orange']", "category": "Python"}, {"instruction": "Use the input to write a loop in Python to print each product details.", "input": "products = [\n  { \"name\": \"iPhone XS\", \"price\": 1000 },\n  { \"name\": \"iPhone XR\", \"price\": 800 },\n  { \"name\": \"iPad Air\", \"price\": 600 }\n]", "output": "for product in products:\n    print(\"Product name: \" + product['name'] + \", Price: \" + str(product['price']))\n\n# Output\n# Product name: iPhone XS, Price: 1000\n# Product name: iPhone XR, Price: 800\n# Product name: iPad Air, Price: 600", "category": "Python"}, {"instruction": "Find the length of a Python list.", "input": "List = [1,2,3]", "output": "List = [1,2,3]\n\nlength = len(List)\nprint(length)\n\n# Output\n3", "category": "Python"}, {"instruction": "Generate a random 2D array with the given dimensions.", "input": "Rows: 5 \nColumns: 3", "output": "import numpy as np\n\nrows = 5\ncolumns = 3\n\narr = np.random.randint(0, 11, size=(rows, columns)) \n\nprint(arr)", "category": "Python"}, {"instruction": "Write a Python program to insert a given string into another string at a certain index.", "input": "Variable String = \"The quick brown fox\" \nString To Insert = \"jumps over\"\nIndex = 16", "output": "The quick brown jumps over fox", "category": "Python"}, {"instruction": "Generate a random letter from the string provided.", "input": "string = \"Hello World\"", "output": "import random\n\nrandom_letter = random.choice(string) # Output: a randomly generated letter from the string", "category": "Python"}, {"instruction": "Determine if the word \"hello\" is present in the provided list.", "input": "words = [\"hi\", \"goodbye\", \"apple\", \"orange\"]", "output": "if \"hello\" in words:\n  print(\"Yes, the word hello is present in the provided list.\")\nelse:\n  print(\"No, the word hello is not present in the provided list.\")", "category": "Python"}, {"instruction": "Write a code snippet to find all the elements in a list that are greater than a specified number.", "input": "lst = [1, 5, 10, 15, 27]\nk = 10", "output": "# Initializing an empty list\nnew_lst = []\n\n# Iterating over the given list\nfor elem in lst:\n  # Appending elements that are greater than 10\n  if elem > k:\n    new_lst.append(elem)\n\n# Printing corresponding result \nprint(new_lst) # Output: [15, 27]", "category": "Python"}, {"instruction": "Rewrite the following code in a more descriptive style and make it easier to read.", "input": "for i in range(1, n):\n    for j in range(1, n):\n        if i + j == n:\n            print(i, j)", "output": "for i in range(1, n):\n    for j in range(1, n):\n        # check if the sum of i and j is equal to n\n        if (i + j) == n:\n            print(i, j)", "category": "Python"}, {"instruction": "Create a Python code snippet to identify the root cause of a Software Bug.", "input": "", "output": "def find_causes(data):\n    # identify the root cause of the bug\n\n    causes = set()\n    for line in data:\n        for cause in line.get('causes', []):\n            causes.add(cause)\n\n    # filter insignificant causes\n    causes = [cause for cause in causes if cause not in insignificant_causes]\n\n    return causes", "category": "Python"}, {"instruction": "Write a function in Python to generate a list with the numbers from 0 to the provided number.", "input": "num = 10", "output": "def generateList(n):\n    list = []\n    for i in range(n+1):\n        list.append(i)\n    return list\n\nprint(generateList(num)) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Write a TensorFlow code snippet to build a convolutional neural network and display the results of the training process.", "input": "", "output": "import tensorflow as tf\n\n# define a convolutional neural network\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# compile and fit model\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=5)\n\n# display results\nmodel.evaluate(x_test, y_test)\n['loss', 'accuracy']\n[0.32971992206192017, 0.8856600217819214]", "category": "Python"}, {"instruction": "Rewrite the following code so that it is easier to read and understand.", "input": "def is_string_palindrome(str):\n    revstr=str[::-1] \n    if revstr==str: \n            return true \n    else: \n            return false", "output": "def is_string_palindrome(str):\n    reverse_str = str[::-1] \n    if reverse_str == str:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Design a Python program to find the longest increasing subsequence in a given array.", "input": "", "output": "def long_increasing_subsequence(arr):\n    # Number of items in given array\n    n = len(arr)\n \n    # Initialize 'lengths' values for all indices\n    lengths = [1]*n\n \n    # Find the longest increasing subsequence\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i] and lengths[j] + 1 > lengths[i]:\n                lengths[i] = lengths[j] + 1\n \n    return lengths", "category": "Python"}, {"instruction": "Create a Python function that takes an array of numbers and returns a string that represent the mean and median of the numbers.", "input": "[1, 2, 3, 4, 5]", "output": "def get_mean_and_median(numbers):\n    mean = sum(numbers)/len(numbers)\n    sorted_numbers = sorted(numbers)\n    index = int(len(sorted_numbers) / 2)\n    median = sorted_numbers[index]\n    return \"Mean: {}, Median: {}\".format(mean, median)", "category": "Python"}, {"instruction": "Given a matrix of X, Y coordinates, write a Python function that returns the angle between the two points.", "input": "X1 = 2\nY1 = 3\nX2 = 7\nY2 = 10", "output": "import math\n\ndef calculate_angle(X1, Y1, X2, Y2):\n    deltaY = Y2 - Y1\n    deltaX = X2 - X1\n    angleInDegrees = (math.atan2(deltaY, deltaX)) * 180 / math.pi\n    return angleInDegrees", "category": "Python"}, {"instruction": "You will be given a list of strings as input. Write a program to print out the longest string in the list.", "input": "['Hello', 'World', 'I', 'Am', 'Here']", "output": "def get_longest_str(str_list):\n    longest_str = str_list[0]\n    for str in str_list:\n        if len(str) > len(longest_str):\n            longest_str = str\n    \n    return longest_str", "category": "Python"}, {"instruction": "You will be given a list of numbers as input. Write a program to remove the duplicates and return only the distinct values.", "input": "[1, 1, 2, 3, 4, 4, 5]", "output": "def remove_duplicates(arr):\n    no_duplicates = []\n    for i in arr:\n        if i not in no_duplicates:\n            no_duplicates.append(i)\n    return no_duplicates", "category": "Python"}, {"instruction": "Create a program to find out the most frequent letter in a sentence.", "input": "The quick brown fox jumps over the lazy dog.", "output": "def most_frequent_letter(sentence):\n    freq_dict = {}\n    for letter in sentence:\n        if letter in freq_dict:\n            freq_dict[letter] += 1\n        else:\n            freq_dict[letter] = 1\n    \n    most_freq_letter = max(freq_dict, key = freq_dict.get)\n    return most_freq_letter", "category": "Python"}, {"instruction": "Write a function to create a list with all the prime numbers in the range of 0 to 100.", "input": "", "output": "def create_prime_list(upper_limit):\n    prime_list = []\n    for num in range(2,upper_limit+1):\n        flag=0\n        for i in range(2,num):\n            if num % i == 0:\n                flag=1\n        if flag==0:\n            prime_list.append(num)\n    return prime_list", "category": "Python"}, {"instruction": "Parse the following XML data using Python.", "input": "<students>\n    <student>\n        <name>John</name>\n        <age>24</age>\n    </student>\n    <student>\n        <name>Jack</name>\n        <age>22</age>\n    </student>\n    <student>\n        <name>Sam</name>\n        <age>25</age>\n    </student>\n</students>", "output": "import xml.etree.ElementTree as ET\n\nroot = ET.fromstring('<students>  <student>    <name>John</name>    <age>24</age>  </student>  <student>    <name>Jack</name>    <age>22</age>  </student>  <student>    <name>Sam</name>    <age>25</age>  </student></students>')\n\nstudents = root.findall('student')\nfor student in students:\n    name = student.find('name').text\n    age = student.find('age').text\n    print(name, age)", "category": "Python"}, {"instruction": "Use a loop to find the average of all given numbers.", "input": "[1, 2, 3, 4, 5]", "output": "def find_avg(nums):\n total = 0\n for num in nums:\n  total += num\n\nreturn total / len(nums)\n\nlist = [1, 2, 3, 4, 5]\nprint(find_avg(list))\n# Output: 3.0", "category": "Python"}, {"instruction": "Generate a string representation of a binary tree.", "input": "", "output": "def tree_str(root):\n    if root is None:\n        return ''\n\n    left_str = tree_str(root.left)\n    right_str = tree_str(root.right)\n\n    if left_str != '' and right_str != '':\n        return '(' + left_str + ')' + str(root.val) + '(' + right_str + ')'\n    if left_str != '' and right_str == '':\n        return '(' + left_str + ')' + str(root.val)\n    if left_str == '' and right_str != '':\n        return  str(root.val) + '(' + right_str + ')'\n    else:\n        return str(root.val)", "category": "Python"}, {"instruction": "Explain what a while loop is.", "input": "", "output": "A while loop is a control flow statement that repeats a set of instructions while a certain condition is true. It consists of a loop condition and a set of instructions that are to be executed as long as the condition remains true. The loop condition is evaluated first, and if it returns true then the instruction set is executed, after which the condition is evaluated again. This process is repeated until the condition returns false, at which point the loop terminates and execution continues at the statement after the loop.", "category": "Python"}, {"instruction": "Create an algorithm to find the median of a given list of numbers.", "input": "[2, 5, 7, 4, 3]", "output": "def find_median(list_of_numbers):\n    sorted_list = sorted(list_of_numbers)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        median1 = sorted_list[length // 2]\n        median2 = sorted_list[(length // 2) - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = sorted_list[length // 2]\n    return median", "category": "Python"}, {"instruction": "Write a method that produces a random password with the specified number of characters.", "input": "", "output": "import string\nimport random\n\ndef generate_password(characters):\n  password = ''\n\n  for _ in range(characters):\n    password += random.choice(string.ascii_letters + string.digits)\n\n  return password", "category": "Python"}, {"instruction": "Write a function to convert a 3 letter acronym to its full form.", "input": "Acronym: \"GDP\"", "output": "\"\"\"\nConvert a 3 letter acronym to its full form\n\"\"\"\n\ndef acronym_to_full_form(acronym):\n    acronyms = {\n        'GDP': 'Gross Domestic Product',\n        'CIA': 'Central Intelligence Agency',\n        'NASA': 'National Aeronautics and Space Administration'\n    }\n\n    return acronyms[acronym]\n\nif __name__ == '__main__':\n    acronym = \"GDP\"\n    print(acronym_to_full_form(acronym))", "category": "Python"}, {"instruction": "Extract a numeric value from the following string in Python.", "input": "myString = \"The length of the tree is 25 meters\"", "output": "import re\n\nnewString = re.findall(r\"[\\d.]+\", myString)\nprint(newString[0]) # 25", "category": "Python"}, {"instruction": "Find the 5th element of the list in Python.", "input": "list = [12, 34, 87, 90, 80, 21]", "output": "element = list[4]\nprint(element) # 80", "category": "Python"}, {"instruction": "How can you create a for loop in Python to loop through a list?", "input": "", "output": "# loop through a list\nlist = [1, 2, 3, 4, 5]\nfor item in list:\n    print(item)", "category": "Python"}, {"instruction": "Describe the basics of programming for a beginner.", "input": "", "output": "Programming is the process of writing computer code to create programs that can perform specific tasks or operations. It involves using a programming language to give instructions to a computer to carry out a specific task. A program can involve calculations, data processing, and more complex tasks such as simulation, game-playing, and artificial intelligence. A programmer typically communicates their code in a language that can be understood by the computer, such as HTML, Python, or Java. Programming can be a rewarding and challenging experience, as programmers are often creating something that did not previously exist.", "category": "Python"}, {"instruction": "Rewrite the following Python function so it returns the opposite of the original output.", "input": "def returnsThree() :\n return 3", "output": "def returnsThree():\n    return -3", "category": "Python"}, {"instruction": "What is a common use case for a ternary operator?", "input": "", "output": "A common use case for a ternary operator is to use it as a shortcut for an if/else statement. A ternary operator can be used to quickly assign the result of a boolean expression to a variable. For example, the following code is similar to an if/else statement:\n\na = 5\nb = 10\nresult = a if a > b else b\n\nIn this example, if a is greater than b, then result will be assigned the value of a. Otherwise, it will be assigned the value of b.", "category": "Python"}, {"instruction": "Reverse an array of integers using Python.", "input": "arr = [1, 2, 3, 4, 5]", "output": "arr = [1, 2, 3, 4, 5]\n \n# reversing the array\narr.reverse()\n \n# print the reversed array\nprint(arr)\n \n# Output:\n[5, 4, 3, 2, 1]", "category": "Python"}, {"instruction": "Construct a basic data structure to store a dictionary of words and their definitions.", "input": "", "output": "class WordDictionary(object): \n    def __init__(self): \n        self.words = {} \n\n    def add_definition(self, word, definition): \n        self.words[word] = definition\n\n    def lookup_definition(self, word): \n        if word in self.words: \n            return self.words[word]\n        else: \n            return None\n\n    def delete_word(self, word): \n        del self.words[word]", "category": "Python"}, {"instruction": "Format the following array of numbers using Python.", "input": "arr = [3, 1, 4, 5, 9, 8]", "output": "arr = [3, 1, 4, 5, 9, 8]\n\n# sorting the array\narr.sort()\n\n# print the array\nprint(arr)\n\n# Output:\n[1, 3, 4, 5, 8, 9]", "category": "Python"}, {"instruction": "Write a function to check if the given string `str1` is a permutation of the string `str2`", "input": "str1 = 'program'\nstr2 = 'gramopr'", "output": "def is_permutation(str1, str2): \n    \"\"\"\n    Function to check if the given string str1 is a permutation of the string str2 \n    \n    Parameters: \n    str1 (str): first string \n    str2 (str): second string \n    \n    Returns: \n    bool: True if str1 is a permutation of str2, False otherwise\n    \"\"\"\n    if (len(str1) != len(str2)): \n        return False\n    else: \n        count = [0] * 128\n        for i in range(len(str1)):\n            count[ord(str1[i])] +=1\n            count[ord(str2[i])] -=1\n        for i in range(128):\n            if count[i] != 0: \n                return False\n        return True", "category": "Python"}, {"instruction": "Create a TensorFlow 2.0 program that takes a 3D array and normalizes the values by dividing each element by the sum of all elements in the array.", "input": "", "output": "import numpy as np \nimport tensorflow as tf\n\n# Function to normalize a 3D array  \n# by dividing each element by the sum of all elements \ndef normalize3d(arr): \n   \n    # Shape of the array \n    m, n, o = arr.shape\n   \n    # Calculating sum \n    sum_ = np.sum(arr) \n      \n    # Initializing the output array \n    output = np.empty_like(arr) \n      \n    # calculating the normalized value \n    # and storing in output array \n    for i in range(m): \n        for j in range(n): \n            for k in range(o): \n                    output[i][j][k] = arr[i][j][k]/sum_ \n                      \n    # returning the normalized array \n    return output \n\n# Initializing the array\narr = np.random.randint(1, 10, (2, 2, 4))\n\n# Using tensorflow method\noutput = tf.expand_dims(tf.constant(arr, dtype=tf.float32), axis=-1) / tf.math.reduce_sum(tf.constant(arr))\n\n# Printing the normalized array using both methods\nprint(normalize3d(arr))\nprint(output)", "category": "Python"}, {"instruction": "Input two arrays and write a program to merge the two given sorted arrays into one sorted array.", "input": "arr1 = [3, 5, 7]\narr2 = [2, 4]", "output": "def merge_arrays(arr1, arr2):\n    # creating a new list to store the result\n    merged_arr = []\n    # looping over the two arrays\n    for i in range(len(arr1)):\n        merged_arr.append(arr1[i])\n    for i in range(len(arr2)):\n        merged_arr.append(arr2[i])\n    # sorting function to sort the merged array\n    merged_arr.sort()\n    return merged_arr\n\n# Driver code\nnew_arr = merge_arrays(arr1, arr2)\n\n# to print the sorted merged array\nprint(new_arr)\n# Output: [2, 3, 4, 5, 7]", "category": "Python"}, {"instruction": "Input a sentence with repeated words and write a Python code to remove all the repeated words.", "input": "sentence = 'The the cat cat sat sat on on the the mat'", "output": "def remove_repeated_words(sentence):\n    words = sentence.split(\" \")\n    result = []\n\n    for word in words:\n        if word not in result:\n            result.append(word)\n    return \" \".join(result)\n\nprint(remove_repeated_words(sentence))\n# Output: The cat sat on the mat", "category": "Python"}, {"instruction": "Input an array and remove all duplicates from the given array.", "input": "arr = [1, 2, 3, 1, 2]", "output": "def remove_duplicates(arr): \n    result = [] \n    for item in arr: \n        if item not in result: \n            result.append(item) \n    return result\n\nprint(remove_duplicates(arr)) \n# Output: [1, 2, 3]", "category": "Python"}, {"instruction": "Design a Python program which prints the elements in reverse order", "input": "my_list = [1,2,3,4,5]", "output": "def print_reverse(my_list):\n    for i in range(len(my_list)-1, -1, -1):\n        print(my_list[i])\n\nprint_reverse(my_list)", "category": "Python"}, {"instruction": "Create a program in Python which takes any string as an input and prints the number of each of its characters", "input": "hello", "output": "character_count = {'h':1, 'e':1, 'l':2, 'o':1}", "category": "Python"}, {"instruction": "Using this list, write a Python program to print out all the duplicate elements", "input": "my_list = [1, 2, 3, 2, 4, 3]", "output": "duplicate = []\n\nfor value in my_list:\n    if my_list.count(value) > 1:\n        if value not in duplicate:\n            duplicate.append(value)\n\nprint(duplicate)", "category": "Python"}, {"instruction": "Find the most suitable 10-lines python code to generate all permutations of a 3 letters word", "input": "", "output": "from itertools import permutations \ndef all_permutations(str): \n    permList = permutations(str) \n  \n    for perm in list(permList): \n        print(''.join(perm)) \n  \nif __name__ == \"__main__\": \n    string = \"ABC\"\n    all_permutations(string)", "category": "Python"}, {"instruction": "Generate a valid python loop to print out the elements of a list.", "input": "List = [1,2,3,4,5]", "output": "for element in List:\n    print(element)", "category": "Python"}, {"instruction": "Design a Python program to read string inputs and print out the reverse of the same", "input": "", "output": "def reverse_string(string):\n  string = string[::-1]\n  return string", "category": "Python"}, {"instruction": "Implement a function to calculate the sum of digits of a given positive integer.", "input": "", "output": "def sum_digits(n):\n  total = 0\n  while n:\n    total += n % 10\n    n //= 10\n  return total", "category": "Python"}, {"instruction": "Generate a list of all pairwise combinations of the numbers in the given list.", "input": "[1,2,3,4]", "output": "def combinations(list_of_numbers):\n  result = []\n\n  for i in range(len(list_of_numbers)):\n    for j in range(len(list_of_numbers)):\n      if i != j:\n        result.append([list_of_numbers[i], list_of_numbers[j]])\n  \n  return result", "category": "Python"}, {"instruction": "Given a list of student's grades, write a program to calculate their average.", "input": "Grades = [90, 95, 80, 75]", "output": "\"\"\"\nCalculate the average of a given list of grades\n\"\"\"\n\ndef average(grades):\n    sum = 0\n    for grade in grades:\n        sum += grade\n    \n    return sum / len(grades)\n\nif __name__ == '__main__':\n    grades = [90, 95, 80, 75]\n    print(average(grades))", "category": "Python"}, {"instruction": "Create a program that will guess a number between 0 and 10.", "input": "", "output": "import random\n\ndef guessing_game():\n    secret_number = random.randint(0, 10)\n    guess = int(input(\"Guess a number between 0 and 10: \"))\n    while guess != secret_number:\n        print(\"Incorrect! Try again.\")\n        guess = int(input(\"Guess a number between 0 and 10: \")) \n    print(\"Correct!\")", "category": "Python"}, {"instruction": "Read a code that prints out the Fibonacci Series.", "input": "", "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "You are given a list of integers and need to calculate the maximum number in the list.", "input": "[3, 4, 7, 1]", "output": "def get_max(numbers):\n    max_value = numbers[0]\n    for number in numbers:\n        if (number > max_value):\n            max_value = number\n    return max_value", "category": "Python"}, {"instruction": "What's the output of this program in Python given the following input?", "input": "input_string = \"Hello, World!\"   \nlist_of_chars = list(input_string)\n\nfor current_char in list_of_chars:\n print(current_char)", "output": "H\ne\nl\nl\no\n,\n \nW\no\nr\nl\nd\n!", "category": "Python"}, {"instruction": "Create a code to format the given text using a given indentation level.", "input": "text = \"This is a sample text to format.\"\nindentation = 4", "output": "def indent_text(text, indentation):\n    \"\"\"\n    A function to format the given text using a given indentation level.\n    Input: string, integer\n    Output: string\n    \"\"\"\n    # Split the text into lines\n    lines = text.splitlines()\n    # Iterate through each line of the text\n    for i in range(len(lines)):\n        # Add the indentation to each line\n        lines[i] = \" \" * indentation + lines[i]\n    # Join all the lines\n    indented_text = \"\\n\".join(lines)\n    \n    return indented_text", "category": "Python"}, {"instruction": "Create a code to search a given string for a specific keyword and return the index of the keyword.", "input": "text = \"Report on the COVID-19 pandemic\"\nkeyword = \"COVID-19\"", "output": "def search_string(text, keyword):\n    \"\"\"\n    A function to search a given string for a specific keyword and return the index of the keyword.\n    Input: string, keyword\n    Output: integer or None\n    \"\"\"\n    # Use the find() method to search the string\n    index = text.find(keyword)\n    \n    # Return None if the keyword was not found\n    if index == -1:\n        return None\n    # Return the index if the keyword was found\n    else:\n        return index", "category": "Python"}, {"instruction": "Write a code to take in a string and determine if the string is a palindrome or not.", "input": "string = \"civic\"", "output": "def is_palindrome(string):\n    \"\"\"\n    Return True is the input string is a Palindrome, False if not.\n    Input: string\n    Output: Boolean\n    \"\"\"\n    # Cast input to string\n    if not isinstance(string, str):\n        string = str(string)\n    \n    # Reverse the string\n    rev_string = string[::-1]\n    \n    #Compare original string with reversed string\n    if string == rev_string:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Create a function to flatten a 2D array.", "input": "[[1, 2], [3, 4], [5, 6]]", "output": "def flatten_2D_array(arr):\n    \"\"\"\n    A function to flatten a 2D array.\n    Input: A 2D array.\n    Output: A 1D array.\n    \"\"\"\n    flattened_arr = []\n    for sub_arr in arr:\n        flattened_arr += sub_arr\n    return flattened_arr", "category": "Python"}, {"instruction": "Write a Python code snippet to sum up all the elements in a given dictionary.", "input": "{\n  'a': 10,\n  'b': 15,\n  'c': 20\n}", "output": "d = {'a': 10, 'b': 15, 'c': 20} \n\nprint(sum(d.values())) # Output: 45", "category": "Python"}, {"instruction": "Write a Python code snippet to get the first 1000 prime numbers.", "input": "", "output": "primes = []\nn = 2\nwhile len(primes) < 1000:\n if is_prime(n):\n primes.append(n)\n n += 1\n\nprint(primes)", "category": "Python"}, {"instruction": "Create a program to sum numbers in a given range m to n inclusive.", "input": "m = 4, n = 8", "output": "def sum_in_range(m, n):\n    sum = 0\n    for i in range(m, n+1):\n        sum+=i\n    return sum", "category": "Python"}, {"instruction": "Build a TensorFlow model to perform sentiment analysis on text.", "input": "", "output": "import tensorflow as tf\n\n# Get the data\ndataset = tf.keras.utils.get_file(\n  'aclImdb_v1.tar.gz', \n  'http://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz')\n\n# Load the data and prepare it for the model\nreviews_train, reviews_test, labels_train, labels_test \\\n  = tf.keras.datasets.imdb.load_data(\n    path=str(dataset)[:-7] + \"/aclImdb/train/\")\n\n# Convert the integers back to words\nword2id = tf.keras.datasets.imdb.get_word_index()\nword2id = {k:(v+3) for k,v in word2id.items()}\nword2id[\"<PAD>\"] = 0\nword2id[\"<START>\"] = 1\nword2id[\"<UNK>\"] = 2 \nword2id[\"<UNUSED>\"] = 3\n\nid2word = {value:key for key,value in word2id.items()}\n\n# Model for sentiment analysis\nmodel = tf.keras.Sequential([\n  tf.keras.layers.Embedding(input_dim=len(word2id)+1, output_dim=256),\n  tf.keras.layers.GlobalAveragePooling1D(),\n  tf.keras.layers.Dense(256, activation=tf.nn.relu),\n  tf.keras.layers.Dropout(0.2),\n  tf.keras.layers.Dense(1, activation=tf.nn.sigmoid)\n])\n\nmodel.compile(\n  optimizer='adam', \n  loss='binary_crossentropy', \n  metrics=['accuracy']\n)\n\nmodel.fit(\n  reviews_train, \n  labels_train, \n  epochs=10,\n  validation_data=(reviews_test, labels_test)\n)", "category": "Python"}, {"instruction": "Generate a list in Python that contains the numbers from 0 to 50 that are divisible by 7.", "input": "", "output": "numbers = []\nfor i in range(51):\n  if i % 7 == 0:\n    numbers.append(i)\nprint(numbers)\n# output: [0, 7, 14, 21, 28, 35, 42, 49]", "category": "Python"}, {"instruction": "Edit the following Python code to make it error-free.", "input": "a = 33\nab = a +", "output": "a = 33\nab = a + b", "category": "Python"}, {"instruction": "Build a Lambda function using Python to calculate the sum of two numbers.", "input": "n1 = 5\nn2 = 8", "output": "def add_two_numbers(n1, n2):\n return n1 + n2", "category": "Python"}, {"instruction": "Create a function to calculate the factorial of 5 using Python.", "input": "", "output": "def factorial(n): \n   if n == 0: \n       return 1\n   else: \n       return n * factorial(n-1) \nprint(factorial(5)) # Output: 120", "category": "Python"}, {"instruction": "Given a list of integers, write a Python code to return the most frequent item.", "input": "num_list = [3, 7, 8, 8, 5, 7, 8, 6, 8]", "output": "ModeElement = max(set(num_list), key = num_list.count) \nprint(\"Most Frequent Element : \", ModeElement)", "category": "Python"}, {"instruction": "Write a Python script to find the maximum depth of a given nested list.", "input": "nested_list = [[1,2], [3,4], [5,6,7]]", "output": "def max_depth_of_nested_list(nested_list):\n    max_depth = 1\n    for inner_list in nested_list:\n        depth = 1\n        if type(inner_list) == list:\n            depth += max_depth_of_nested_list(inner_list)\n        max_depth=max(depth, max_depth)\n    return max_depth", "category": "Python"}, {"instruction": "Write a Python script to calculate the total of all the elements in a nested list.", "input": "nested_list = [[1,2,3], [4,5,6], [7,8,9]]", "output": "def sum_of_nested_list(nested_list):\n    total = 0\n    for internal_list in nested_list:\n        for num in internal_list:\n            total += num\n    return total", "category": "Python"}, {"instruction": "Given a list of numbers and a target number, write a Python program to find if there exists a sublist whose sum equals the target.", "input": "numbers = [2, 4, 8, 9, 5, 7], target = 15", "output": "def sublist_sum(numbers, target) : \n    n = len(numbers) \n  \n    # Consider all sublists of arr[] and return \n    # true if given sum is present in any of them \n    for i in range(n) : \n        curr_sum = numbers[i] \n  \n        # Try different endpoints for current subarray \n        j = i+1\n        while j<=n : \n  \n            if curr_sum == target : \n                return True\n  \n            if curr_sum > target or j == n: \n                break\n  \n            curr_sum = curr_sum + numbers[j] \n            j += 1\n  \n    return False", "category": "Python"}, {"instruction": "Create a class to store a given list of strings.", "input": "List: ['hello', 'world', 'hi']", "output": "class StrList:\n def __init__(self, str_list):\n    self.str_list = str_list\n   \n  def get_list(self):\n    return self.str_list", "category": "Python"}, {"instruction": "Grant access to content by creating a function that takes in an age and returns a boolean.", "input": "Age: 20", "output": "def check_age(age):\n  if age < 18:\n    return False\n  else:\n    return True", "category": "Python"}, {"instruction": "Retrieve all the values from the nested dictionary.", "input": "data_dict = {\n'key1': {\n  'inner_key1': \"1\",\n  'inner_key2': \"2\"\n},\n'key2': {\n  'inner_key1': \"3\",\n  'inner_key2': \"4\"\n}\n}", "output": "for key1_value in data_dict.values():\n  for (inner_key1, inner_key2) in key1_value.items():\n    print(inner_key1, inner_key2)", "category": "Python"}, {"instruction": "Implement a function to remove all occurrences of an element in a given list", "input": "", "output": "def remove_element(list, element): \n    return [x for x in list if x != element]", "category": "Python"}, {"instruction": "Create a bash script to print the version of python installed in the computer.", "input": "", "output": "#!/bin/bash\npython --version", "category": "Python"}, {"instruction": "Create a function to check if two strings are an anagram of one another using Python.", "input": "str1 = 'cat'\nstr2 = 'tac'", "output": "def anagram_checker(str1, str2): \n    if (len(str1)==len(str2)): \n        if (\"\".join(sorted(str1.lower())) == \"\".join(sorted(str2.lower()))): \n            return True\n        else: \n            return False", "category": "Python"}, {"instruction": "Convert the following recursive function to an iterative one.", "input": "def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n - 1)", "output": "def factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result = result * i\n    return result", "category": "Python"}, {"instruction": "Generate a Python class definition for a pig object that includes the following properties.", "input": "name: string\ncolor: string\nage: integer", "output": "class Pig(object):\n    def __init__(self, name, color, age):\n        self.name = name\n        self.color = color\n        self.age = age\n    \n    def set_name(self, name):\n        self.name = name\n    \n    def set_color(self, color):\n        self.color = color\n    \n    def set_age(self, age):\n        self.age = age", "category": "Python"}, {"instruction": "Edit this code so it can classify whether a number is even or odd.", "input": "def classify_number(num):", "output": "def classify_number(num):\n    if num % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"", "category": "Python"}, {"instruction": "Write a Python function to compare two lists and return the elements that are in both of them.", "input": "list1 = [3, 5, 7, 8]\nlist2 = [3, 5, 10, 12]", "output": "def compare_lists(list1, list2):\n    return [x for x in list1 if x in list2]", "category": "Python"}, {"instruction": "Write a function to convert a Roman numeral to an integer.", "input": "", "output": "def roman_to_integer(numeral):\n  romans = {\"I\": 1,\n            \"V\": 5,\n            \"X\": 10,\n            \"L\": 50,\n            \"C\": 100,\n            \"D\": 500,\n            \"M\": 1000\n            }\n  num = 0\n  i = 0\n  while i < len(numeral):\n    if i+1 < len(numeral):\n      if romans[numeral[i]] >= romans[numeral[i+1]]:\n        num = num + romans[numeral[i]]\n      else :\n        num = num + romans[numeral[i+1]] - romans[numeral[i]]\n        i+=1\n    else:\n      num = num + romans[numeral[i]]\n    i+=1\n  return num", "category": "Python"}, {"instruction": "Write a Python program to find all the factors of an integer.", "input": "number = 16", "output": "def find_factors(number):\n    factors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            factors.append(i)\n    return factors", "category": "Python"}, {"instruction": "Modify the 'Bike' class so that when instances are created they are assigned a unique ID.", "input": "", "output": "# Define a class for a bike\nclass Bike:\n _id = 0\n\n def __init__(self, color, make, description): \n  Bike._id += 1\n  self.id = Bike._id\n  self.color = color\n  self.make = make\n  self.description = description", "category": "Python"}, {"instruction": "Create a class for a bike which has a color, make and description as attributes.", "input": "", "output": "# Define a class for a bike\nclass Bike:\n def __init__(self, color, make, description): \n  self.color = color\n  self.make = make\n  self.description = description", "category": "Python"}, {"instruction": "Add a constructor to the above class to make sure that firstname and lastname are provided when creating a new instance.", "input": "", "output": "# Define a python class \nclass Person: \n def __init__(self, firstname, lastname, address): \n  # make sure that firstname and lastname are provided when creating a new instance\n  if (firstname == \"\" or lastname == \"\"): \n   raise ValueError(\"firstname and lastname can't be empty\")\n  self.firstname = firstname\n  self.lastname = lastname\n  self.address = address", "category": "Python"}, {"instruction": "Create a Python class with the following attributes: firstname, lastname and address.", "input": "", "output": "# Define a python class \nclass Person: \n def __init__(self, firstname, lastname, address): \n  self.firstname = firstname\n  self.lastname = lastname\n  self.address = address", "category": "Python"}, {"instruction": "Find the smallest missing positive number in an array.", "input": "[-2, 0, 1, 3]", "output": "# Find the smallest missing positive number\ndef smallest_positive(arr): \n s = set(arr) \n i = 1 \n while i in s: \n i += 1\n return i\n\narr = [-2, 0, 1, 3] \nsmallest = smallest_positive(arr)\nprint(smallest) # 2", "category": "Python"}, {"instruction": "Create a Python dictionary which contains the student name and their grade for the course.", "input": "{\n \"John\": 85, \n \"Alice\": 91,\n \"Bob\": 74\n}", "output": "student_grades = {\n \"John\": 85, \n \"Alice\": 91,\n \"Bob\": 74\n}", "category": "Python"}, {"instruction": "Perform sentiment analysis on the given text using NLTK library in Python.", "input": "The food here is amazing.", "output": "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentences = [\"The food here is amazing!\"]\n\nsid = SentimentIntensityAnalyzer()\n\nfor sentence in sentences:\n    ss = sid.polarity_scores(sentence)\n    print(\"for sentence: {}, sentiment analysis: {}\".format(sentence, ss))\n\n# Output\n# for sentence: The food here is amazing!, sentiment analysis: {'neg': 0.0, 'neu': 0.436, 'pos': 0.564, 'compound': 0.6249}", "category": "Python"}, {"instruction": "Deploy the following ML model on the Cloud.", "input": "", "output": "1. Prepare the model:\n- Download, install and configure Cloud platform with the required SDKs.\n- Upload the ML model on the Cloud.\n- Perform necessary pre-processing steps.\n\n2. Deploy the model:\n- Use a deployment framework to deploy the model on the Cloud. \n- containerize the model using Docker. \n- provide appropriate access for the model for it to be queried.\n\n3. Test the model:\n- Run test cases for the model and assess the accuracy and performance of the model.\n- Set up a monitoring system for the model.", "category": "Python"}, {"instruction": "Check this code and add an if statement to print out \u201ceven\u201d if the number is divisible by 2 and \u201codd\u201d if not.", "input": "for n in range (1,10):\n\tprint(n)", "output": "for n in range (1, 10):\n    if n % 2 == 0:\n        print(n, \"even\")\n    else:\n        print(n, \"odd\")", "category": "Python"}, {"instruction": "Write a code in Python to print out the common elements of two lists which are [2, 4, 6, 8] and [3, 6, 9, 12].", "input": "", "output": "#Function to print out the common elements of two lists\ndef commonElements(l1, l2):\n    result = [value for value in l1 if value in l2]\n    return result\n\n# Lists to compare\nlist1 = [2, 4, 6, 8] \nlist2 = [3, 6, 9, 12] \n\n# Output  \nprint(commonElements(list1, list2)) \n\n# Output: [6]", "category": "Python"}, {"instruction": "Write a Python code to calculate the total price of a given list of items including taxes.", "input": "items = [\n  {\"name\": \"apple\", \"price\": 10},\n  {\"name\": \"orange\", \"price\": 20},\n  {\"name\": \"banana\", \"price\": 5}\n]\ntax_rate = 5", "output": "#Calculate total price of a given list of items including taxes\n\nitems = [\n  {\"name\": \"apple\", \"price\": 10},\n  {\"name\": \"orange\", \"price\": 20},\n  {\"name\": \"banana\", \"price\": 5}\n]\ntax_rate = 5\n\ntotal_price = 0\n\nfor item in items:\n  total_price += item['price']\n\ntotal_price = total_price + (total_price * (tax_rate/100))\n\nprint(total_price)", "category": "Python"}, {"instruction": "Write a Python class that has two variables 'name' and 'age' and a method to print the values of both variables.", "input": "", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def print_values(self):\n        print(\"Name:\", self.name)\n        print(\"Age:\", self.age)", "category": "Python"}, {"instruction": "What is the complexity class of the below Python code snippet for adding an item to a list?", "input": "list = [1, 2, 3]\nlist.append(4)", "output": "The complexity class of this code snippet is O(1) since appending an item to a list has constant time complexity.", "category": "Python"}, {"instruction": "Write a code in Python that returns an inversion of a given string.", "input": "tea", "output": "def reverseStr(s): \n    return s[::-1] \n  \ns = \"tea\"\nprint(reverseStr(s))", "category": "Python"}, {"instruction": "Create an array in Python that contains numbers from 1 to 5.", "input": "", "output": "my_array = [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Solve the following programming puzzle using Python.", "input": "A rope connected two opposite trees.  You need to cut the rope so the rope is never longer than 10 meters.  What is the shortest distance you can cut?", "output": "def closest_cutting_distance(total_rope_length):\n    '''This function will calculate the shortest distance you can cut a rope so the rope is never longer than 10 meters.'''\n    if total_rope_length <= 10:\n        return total_rope_length\n    else:\n        return total_rope_length - 10", "category": "Python"}, {"instruction": "Create a new dictionary that contains the intersection between the following two dictionaries.", "input": "d1 = {'a': 1, 'b': 2, 'c': 3}\nd2 = {'b': 2, 'c': 4, 'd': 5}", "output": "d1 = {'a': 1, 'b': 2, 'c': 3}\nd2 = {'b': 2, 'c': 4, 'd': 5}\nd3 = { k:v for k,v in d1.items() if k in d2.keys() }", "category": "Python"}, {"instruction": "Create a function that will calculate the cumulative sum of a list.", "input": "[1, 2, 3, 4, 5]", "output": "def cumulative_sum(lst):\n    '''This function will calculate the cumulative sum of a list.'''\n    result = []\n    s = 0\n    for item in lst:\n        s += item\n        result.append(s)\n    return result", "category": "Python"}, {"instruction": "Create a function that will return the total number of specific items in a list.", "input": "[1, 1, 2, 3, 3, 3]", "output": "def count_items(lst, item):\n    '''This function will return the total number of specific items in a list.'''\n    return len([x for x in lst if x == item])", "category": "Python"}, {"instruction": "Suggest a way to check if a given string contains alphanumeric characters", "input": "", "output": "The simplest way to check if a given string contains alphanumeric characters is to use the built-in isalnum() method which will return True if the string contains at least one alphanumeric character and False otherwise. Example:\n\nmy_string = 'Hello123'\n\nif my_string.isalnum():\n    print('Contains alphanumeric characters')\nelse:\n    print('Does not contain alphanumeric characters')", "category": "Python"}, {"instruction": "Suggest a method to run a python program from an interactive terminal session.", "input": "", "output": "The simplest way to run a python program from an interactive terminal session is to use the \"python\" command. For example, if you have a file called \"myprog.py\", you can type \"python myprog.py\" at the command line and the program will be executed. Alternately, you can use the \"execfile\" command, which takes a file name as an argument and executes it.", "category": "Python"}, {"instruction": "Create a function that takes a list of strings as input and returns a string of the list sorted in the alphabetical order.", "input": "[\"apple\", \"banana\", \"cherry\"]", "output": "def sort_strings_alphabetically(words):\n# Use the built-in sorted() function to sort the list of strings\nsorted_words = sorted(words)\n# Join the sorted list of words separated by spaces\nreturn \" \".join(sorted_words)", "category": "Python"}, {"instruction": "Write a function to remove duplicate elements from a list keeping only the first occurrence of each element.", "input": "[1, 2, 3, 3, 3, 4, 4, 5]", "output": "def remove_duplicates(nums):\n # Create a list to store the first occurrence of each number\n seen = []\n # Iterate over the list\n for num in nums:\n  # If the number is not in the seen list, add it\n  if num not in seen:\n   seen.append(num)\n return seen", "category": "Python"}, {"instruction": "Provide the logic for sorting an array of strings alphabetically.", "input": "", "output": "for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n        if arr[i] > arr[j]:\n            arr[i], arr[j] = arr[j], arr[i]", "category": "Python"}, {"instruction": "Create a Visual Studio Code extension that provides auto-complete features for a specific language.", "input": "", "output": "This Visual Studio Code extension will create an Auto-Complete Provider for a specific language (e.g. JavaScript, Python, etc.). It will analyze the syntax of a given language and provide word suggestions while typing in the source code. The extension should be able to detect the language type from the file extension and then provide the auto-complete suggestions accordingly.", "category": "Python"}, {"instruction": "Why is HashTable data structure the best choice for fast lookup operations?", "input": "", "output": "HashTable data structure is the best choice for fast lookup operations because it stores the data in key-value pairs and uses hashing algorithms to quickly identify the location of the data in memory. With this data structure, lookups can be done in O(1) time complexity, which is much more efficient than other data structures.", "category": "Python"}, {"instruction": "Write a Python function to sort the given array of dictionaries by key value.", "input": "arr = [{'name': 'Jose', 'age': 32}, {'name': 'Ravi', 'age': 23}, {'name': 'Paul', 'age': 26}]", "output": "def sort_by_key(arr):\n return sorted(arr, key=lambda i: i['name'])", "category": "Python"}, {"instruction": "Write a function that prints Fibonacci numbers up to N (N>1).", "input": "", "output": "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2, n+1): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Fix the bug in this code.", "input": "def calculate_area(length, width):\narea = (length * width)\nif area > 20:\n    return 'Area too large'", "output": "def calculate_area(length, width):\narea = (length * width)\nif area > 20:\n    return 'Area too large'\nelse:\n    return area", "category": "Python"}, {"instruction": "Create a new class in Python named \"Employee\".", "input": "", "output": "class Employee:\n    def __init__(self):\n        pass", "category": "Python"}, {"instruction": "In the following Python function, insert code to check if the given number is even or odd.", "input": "def check_num(num):\n    # TODO\n    if num % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")", "output": "def check_num(num):\n    assert isinstance(num, int), \"num must be an integer value\"\n    if num % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")", "category": "Python"}, {"instruction": "Given a list of sentence fragments, use a loop in Python to print each fragment on a separate line.", "input": "sentences = [\"Hello\", \"My name is\", \"John\", \"Nice to meet you!\"]", "output": "for sentence in sentences:\n    print(sentence)", "category": "Python"}, {"instruction": "Write a function in Python to generate a list of numbers that is the square of all numbers between 1 and the number provided.", "input": "num = 10", "output": "def generate_square_list(num):\n    result = []\n    for i in range(1, num+1):\n        result.append(i*i)\n    return result", "category": "Python"}, {"instruction": "Write a for loop that iterates through a list of numbers and prints only the even numbers.", "input": "[1, 2, 3, 4, 5, 6]", "output": "for i in [1,2,3,4,5,6]:\n    if i % 2 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Create a generator expression to print the square of a list of numbers.", "input": "numbers = [1, 2, 3, 4, 5]", "output": "numbers = [1, 2, 3, 4, 5]\n\n# generator expression\nsquares = (num ** 2 for num in numbers)\n\nfor square in squares: \n    print(square)", "category": "Python"}, {"instruction": "Extend the given list of numbers by adding all odd numbers from 0 to 10.", "input": "my_list = [0, 2, 4, 6, 8, 10]", "output": "my_list = [0, 2, 4, 6, 8, 10]\nmy_list.extend([num for num in range(11) if num % 2 != 0])", "category": "Python"}, {"instruction": "Using list comprehension, create a list of all even numbers from 0 to 10.", "input": "", "output": "even_numbers = [num for num in range(11) if num % 2 == 0]", "category": "Python"}, {"instruction": "Generate a function `recursive_sum` that computes the sum of a list of integers recursively.", "input": "", "output": "def recursive_sum(lst): \n    # Base case\n    if not len(lst): \n        return 0\n    return lst[0] + recursive_sum(lst[1:])", "category": "Python"}, {"instruction": "What does a negative index signify in a Python array?", "input": "", "output": "A negative index in a Python array is used to access elements from the end of the array, where the last element of the array is at index -1.", "category": "Python"}, {"instruction": "Write a code to find the day of the week corresponding to a given date using the calendar module?", "input": "Day: 25\nMonth: December\nYear: 2020", "output": "\"\"\"\nFind the day of the week corresponding to a given date using calendar module\n\"\"\"\n\nimport calendar\n\ndef get_day_of_week(day, month, year):\n    dayNumber = calendar.weekday(year,month,day)\n    dayName = calendar.day_name[dayNumber] \n    return dayName\n    \nif __name__ == '__main__':\n    day = 25\n    month = 12\n    year = 2020\n    print(get_day_of_week(day, month, year))", "category": "Python"}, {"instruction": "Explain the practical application of sorting algorithms", "input": "", "output": "Sorting algorithms are used in many practical applications, such as sorting data in databases, large scale data analysis, and search engine optimization. They are also used in sorting algorithms used in operating system kernels and in finding the shortest path in graph theory. Sorting algorithms can also be used to improve the performance of applications by sorting data according to certain criteria, thus reducing the amount of computation time required. In addition, sorting algorithms are used in designing algorithms for data compression and in machine learning. Generally, sorting algorithms are used to bring data into some form of order so that it can be searched or traversed more easily. By improving the efficiency of data retrieval, sorting algorithms can improve the overall performance of applications.", "category": "Python"}, {"instruction": "What is the difference between supervised learning and unsupervised learning?", "input": "", "output": "Supervised learning is a type of machine learning where the algorithm is given a labelled dataset and its goal is to learn a mapping between the given input and the given output. The labels in the dataset act as a supervisor to guide the algorithm towards its learning path.\nUnsupervised learning is a type of machine learning where the algorithm is given an unlabelled dataset and its goal is to learn from the data and discover patterns and insights from the data without being given any explicit guidance. The algorithm must learn by itself how to organize the data and extract useful information from it.", "category": "Python"}, {"instruction": "Generate the output given the following input to the Python function you wrote in  task 11.", "input": "print_primes(5, 15)", "output": "5\n7\n11\n13", "category": "Python"}, {"instruction": "Create a function in Python that prints out all prime numbers between two given numbers.", "input": "", "output": "def print_primes(start, end):\n    for num in range(start, end):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                print(num)", "category": "Python"}, {"instruction": "Complete the following function in Python which will return all the numbers in a list between a given minimum and maximum.", "input": "def getRange(min, max):", "output": "def getRange(min, max):\n  return [i for i in range(min, max+1)]", "category": "Python"}, {"instruction": "Suggest a possible numpy code to normalize a data in the following manner.", "input": "Normalize the data such that the values lie in the range 0-1.", "output": "import numpy as np\n\ndef normalize(arr):\n    arr = np.array(arr)\n    return (arr - arr.min()) / (arr.max() - arr.min())", "category": "Python"}, {"instruction": "Write a function that takes a list of words and detects if they are anagrams.", "input": "a_list=[\"potato\",\"tomato\"]", "output": "def is_anagram(a_list):\n    \n    l1 = [''.join(sorted(word)) for word in a_list[0]]\n    l2 = [''.join(sorted(word)) for word in a_list[1]]\n    return l1 == l2", "category": "Python"}, {"instruction": "Suggest a python code to print all the even numbers from the given list.", "input": "list_of_numbers = [11, 22, 31, 37, 44]", "output": "list_of_numbers = [11, 22, 31, 37, 44]\nfor num in list_of_numbers:\n    if num % 2 == 0:\n        print(num)", "category": "Python"}, {"instruction": "Design a function to generate the random password", "input": "", "output": "import random\n\ndef generate_password():\n    #Declare a string of all possible characters\n    all_chars = \"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+=-`'\"\n    #Declare the length of password\n    password_len = 8\n    #Create empty string\n    password = \"\"\n    for i in range(password_len):\n        #Generate a random index\n        rand_index = random.randint(0, len(all_chars)-1)\n        #Append character at the index to password\n        password += all_chars[rand_index]\n    return password", "category": "Python"}, {"instruction": "Write a Python script that uses regular expressions to check whether a given URL is correctly formatted or not.", "input": "", "output": "import re\n\ndef is_valid_url(url):\n # Check if the URL is valid using a regex\n regex = re.compile(r\"^(?:http|ftp)s?://([^/]+[.])*[^/]+/?.*$\")\n if regex.match(url):\n  return True\n return False", "category": "Python"}, {"instruction": "Write a function to implement the Levenshtein Distance algorithm. The Levenshtein Distance algorithm calculates the minimum number of single-character edits (insertions, deletions, or substitutions) necessary to transform one string into another string.", "input": "\"cats\", \"dogs\"", "output": "def levenshtein_distance(str1, str2):\n # Create a matrix for storing the distances\n m = [[0 for x in range(len(str2) + 1)] for x in range(len(str1) + 1)]\n # Mark the first Edit Distance value as 0\n m[0][0] = 0\n \n # Iterate over the matrix \n for i in range(0, len(str1) + 1):\n  for j in range(0, len(str2) + 1):\n   # If we are at the first row or first col, mark the cells with corresponding numbers\n   if i == 0:\n    m[i][j] = j\n   elif j == 0:\n    m[i][j] = i\n   # Otherwise, calculate the distance according to the  formula\n   else:\n    if str1[i-1] == str2[j-1]:\n     m[i][j] = m[i-1][j-1]\n    else:\n     m[i][j] = min(m[i-1][j], m[i-1][j-1], m[i][j-1]) + 1\n  \n # Return the last element in the matrix, which is the Levenshtein Distance\n return m[-1][-1]", "category": "Python"}, {"instruction": "Create a program to determine whether a given sequence is an arithmetic progression or not.", "input": "[-6, -2, 2, 6]", "output": "def is_arithmetic_progression(arr):\n # Check if the given array is empty\n if len(arr) == 0:\n  return False\n # Initialize the common difference and the first element\n commonDifference = arr[1] - arr[0]\n firstElement = arr[0]\n # Iterate over the array\n for i in range(len(arr)):\n  if arr[i] != firstElement + (i * commonDifference):\n   return False\n # If all elements are in an arithmetic progression\n return True", "category": "Python"}, {"instruction": "Construct an algorithm to predict the next 3 days' stock market movements given the stock prices from the past 5 days.", "input": "[69.04, 67.07, 68.3, 68.91, 70.09]", "output": "def predict_stock_movements(data):\n# Initialize empty list to store predicted values\npredictions = []\n\n# Iterate over the given data\nfor i in range(len(data)-2):\n # Calculate the average of the 5 days\n avg = sum(data[i:i+3])/3\n # Calculate the current and past day market movement\n curr_mov = data[i+2] - data[i+1]\n past_mov = data[i+1] - data[i]\n # Predict the next day\n prediction = avg + curr_mov + past_mov\n predictions.append(prediction)\n\nreturn predictions", "category": "Python"}, {"instruction": "Create a report in PDF format that displays the most frequent words used in the New York Times articles.", "input": "", "output": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nfrom textblob import TextBlob\nfrom nltk.tokenize import word_tokenize \nfrom nltk.tokenize import sent_tokenize\nfrom nltk.probability import FreqDist\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib.backends.backend_pdf import PdfPages\n\ndef get_top_words(string):\n tokenized_words = word_tokenize(string)\n freqdist = FreqDist(tokenized_words)\n return freqdist.most_common(15)\n\n# Download nltk dependencies\n# nltk.download('punkt')\n# nltk.download('vader_lexicon')\n\n# Scrape news articles\narticles = scrape_nyt()\n\n# Get top words\ntop_words = []\nfor article in articles:\n top_words.append(get_top_words(article))\n\n# Create PDF report\npp = PdfPages('nyt_word_freq.pdf')\nplt.figure(figsize=(15,10))\nplt.bar(*zip(*top_words))\nplt.xticks(rotation=90)\npp.savefig()\npp.close()", "category": "Python"}, {"instruction": "Modify the code below to pull data from the API endpoint provided.", "input": "Endpoint: https://jsonplaceholder.typicode.com/posts", "output": "import requests\n\nurl = 'https://jsonplaceholder.typicode.com/posts'\n\nresponse = requests.get(url)\ndata = response.json()\n\nfor post in data:\n    title = post['title']\n    body = post['body']\n    \n    print('Title: ', title)\n    print('Body: ', body)", "category": "Python"}, {"instruction": "Calculate the maximum element in the given list.", "input": "my_list = [2, 1, 7, 5, 3]", "output": "def max_element(my_list): \n    max_num = my_list[0] \n    for num in my_list: \n        if num > max_num: \n            max_num = num\n    return max_num", "category": "Python"}, {"instruction": "How can you generate a random number in the range of 1 to 10 in Python?", "input": "", "output": "import random\nrandom_number = random.randint(1, 10)", "category": "Python"}, {"instruction": "In Python, write a function to print out a sequence of numbers from 1 to 10.", "input": "", "output": "def print_sequence():\n  for i in range(1, 11):\n    print(i)\n\nprint_sequence() # Output: 1 2 3 4 5 6 7 8 9 10", "category": "Python"}, {"instruction": "In Python, create a function that takes a string as an argument and returns a string with the vowels replaced with an asterisk (*).", "input": "", "output": "def replace_vowels(string):\n\tvowels = \"aeiou\"\n\tresult = \"\"\n\tfor char in string:\n\t\tif char in vowels:\n\t\t\tchar = \"*\"\n\t\tresult += char\n\treturn result", "category": "Python"}, {"instruction": "Create an algorithm to calculate the mean, mode and median in a given set of numbers.", "input": "", "output": "def mean(nums):\n    return sum(nums)/len(nums)\n\ndef mode(nums):\n    countDict = {}\n    for num in nums:\n        if num in countDict:\n            countDict[num] += 1\n        else:\n            countDict[num] = 1\n    maxValue = 0\n    maxKey = -1\n    for key, value in countDict.items():\n        if value > maxValue:\n            maxValue = value\n            maxKey = key\n    return maxKey\n\ndef median(nums):\n    nums.sort()\n    if len(nums) % 2 == 0:\n        return (nums[len(nums)//2] + nums[len(nums)//2-1])/2\n    else:\n        return nums[(len(nums)-1)//2]\n\nif __name__ == '__main__':\n    nums = [1,2,2,2,3,4,5]\n    print(\"Mean: \", mean(nums))\n    print(\"Mode: \", mode(nums))\n    print(\"Median: \", median(nums))", "category": "Python"}, {"instruction": "Write a Python script to compute Pi to the Nth digit.", "input": "", "output": "import math\n\nn = int(input(\"Enter the number of digits of pi to compute: \"))\n\n# Compute pi to nth decimal place\npi = round(math.pi, n)\n\nprint(\"The value of pi to {0} decimal places is: {1}\".format(n, pi))", "category": "Python"}, {"instruction": "Create an algorithm to classify a given set of data into three classes.", "input": "", "output": "from sklearn.neighbors import KNeighborsClassifier\nimport numpy as np\n\n# X is the training data\nX = np.array([[0, 0], [1, 1], [1, 0], [0, 1], [1, 2], [2, 1], [2, 2]])\n\n# y is the labels of the classes\ny = np.array([0, 0, 1, 1, 2, 2, 2])\n\n# Create the model\nmodel = KNeighborsClassifier(n_neighbors=3)\n\n# Fit the model using the training data\nmodel.fit(X, y)\n\n# Use the model to make predictions \nprediction = model.predict([[2, 3]])\n\nprint(prediction)", "category": "Python"}, {"instruction": "Create a python function that computes the area of a rectangle given the length and width.", "input": "", "output": "def calculateRectangleArea(length, width):\n  area = length * width\n  return area", "category": "Python"}, {"instruction": "Change the following list of strings to uppercase in Python.", "input": "List: ['one', 'two', 'three']", "output": "list_strings = [\"one\", \"two\", \"three\"]\n\nlist_strings = [string.upper() for string in list_strings]\n\nprint(list_strings)", "category": "Python"}, {"instruction": "How can we dynamically add an element to a set in Python?", "input": "", "output": "In Python, we can dynamically add an element to a set using the add() method. For example, \n\ns = set()\ns.add(4)\nprint(s)", "category": "Python"}, {"instruction": "Write a code to flatten a two-dimensional list into one-dimensional list in Python.", "input": "Two-dimensional List: [[1,2], [3,4], [5,6]]", "output": "def flatten_2d_list(lst):\n  flat_list = []\n  for elem in lst:\n    for item in elem:\n      flat_list.append(item)\n  return flat_list\n\ntest_list = [[1,2], [3,4], [5,6]] \nprint(flatten_2d_list(test_list))", "category": "Python"}, {"instruction": "Write a Python code to print the following output:\nday     temperature\nMonday    20\nTuesday   25", "input": "", "output": "print(\"day     temperature\")\nprint(\"Monday    20\")\nprint(\"Tuesday   25\")", "category": "Python"}, {"instruction": "Develop a solution to this algorithm problem.", "input": "Given an int array A, find the min absolute difference between any two of its elements.", "output": "def minAbsDifference(arr):\n    min_difference = float(\"inf\")\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_difference:\n                min_difference = diff\n    return min_difference", "category": "Python"}, {"instruction": "Create an RNN model to classify emails into spam and not spam.", "input": "", "output": "#imports\nimport tensorflow as tf \nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout \n#Model\nmodel = tf.keras.models.Sequential([\n    Embedding(vocab_size, embedding_dim, input_length = max_len),\n    LSTM(128),\n    Dense(64, activation = 'relu'),\n    Dropout(0.25),\n    Dense(1, activation = 'sigmoid')\n])", "category": "Python"}, {"instruction": "Reverse a string using a stack.", "input": "string: hello", "output": "def reverse_string_using_stack(string): \n    stack = []\n    for char in string:\n        stack.append(char)\n    reversed_string = ''\n    while len(stack) > 0: \n        reversed_string += stack.pop()\n    return reversed_string", "category": "Python"}, {"instruction": "Develop a Python function that returns the first two characters of a string.", "input": "string = \"GPT-3\"", "output": "def first_two_chars(string):\n  return string[:2]", "category": "Python"}, {"instruction": "Inside a Python program, how would you convert a float number to a string?", "input": "", "output": "str_number = str(float_number)", "category": "Python"}, {"instruction": "Create a pandas DataFrame based on the given input CSV.", "input": "EmployeeID,EmployeeName,Salary\n1,John,12345\n2,David,23456\n3,Steve,34567", "output": "import pandas as pd\n\ndf = pd.read_csv(\"input.csv\")\nprint(df)", "category": "Python"}, {"instruction": "Create a nested loop that increments a variable from 0 to 5.", "input": "", "output": "for i in range(0, 5):\n    for j in range(0, 5):\n        var += 1", "category": "Python"}, {"instruction": "Create a program to find the most frequently used word in a given text.", "input": "Text: Machine learning is a subset of artificial intelligence and is a powerful tool in data science.", "output": "import collections \n  \n# function to get most frequently used word \ndef most_frequent(string): \n  \n    # split the string into list of words \n    split_it = string.split() \n      \n    # pass the split_it list to instance of Counter class. \n    Counter = collections.Counter(split_it) \n  \n    # most_common() produces k frequently encountered \n    # input values and their respective counts. \n    most_occur = Counter.most_common(1) \n  \n    return most_occur[0][0]  \n  \n#Driver function \ntext = \"Machine learning is a subset of artificial intelligence and is a powerful tool in data science.\"\nprint(most_frequent(text))", "category": "Python"}, {"instruction": "Create a program to filter out keywords from a given text.", "input": "Text: This is a text containing some keywords\nKeywords: [\"keywords\", \"text\"]", "output": "def filter_keywords(text, keywords):\n  words = text.split()\n  filtered_words = [word for word in words if word not in keywords]\n  return ' '.join(filtered_words)\n  \ntext = 'This is a text containing some keywords'\nkeywords = ['keywords', 'text']\n\nprint(filter_keywords(text, keywords))", "category": "Python"}, {"instruction": "Design an algorithm that sorts a given array of integers in ascending order.", "input": "[5, 4, 2, 6, 1]", "output": "def sort_array(arr):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] = arr[j+1], arr[j]\n  return arr", "category": "Python"}, {"instruction": "Write Python code to find the nth element of a Fibonacci sequence.", "input": "", "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)", "category": "Python"}, {"instruction": "Find the length of the longest substring without repeating characters", "input": "string = \"abcabcbb\"", "output": "def longest_substring(string):\n    longest_substring = \"\"\n    curr_substring = \"\"\n    char_set = set()\n    for char in string:\n        if char not in char_set:\n            curr_substring += char\n            char_set.add(char)\n        else:\n            if len(curr_substring) > len(longest_substring):\n                longest_substring = curr_substring\n            curr_substring = char\n            char_set = set(char)\n    if len(curr_substring) > len(longest_substring):\n        longest_substring = curr_substring\n    return len(longest_substring)", "category": "Python"}, {"instruction": "How can you remove the duplicate items from a list of integers in Python?", "input": "", "output": "You can remove the duplicate items from a list of integers in Python by using the set() function. For example:\n\na = [1, 2, 3, 3, 4]\nb = list(set(a))\nprint(b)\n# Output: [1, 2, 3, 4]", "category": "Python"}, {"instruction": "How can you sort a list of integers by their absolute value in Python?", "input": "", "output": "You can sort a list of integers by their absolute value using the sort() method. For example: \n \nnumbers = [2, -1, 5, 0, -4] \nnumbers.sort(key = lambda x: abs(x)) \nprint(numbers)\n# Output: [0, -1, 2, -4, 5]", "category": "Python"}, {"instruction": "Suggest a way to gracefully handle errors in Python code.", "input": "", "output": "In Python, errors can be handled gracefully using try and except blocks. The try block contains the code that might throw an exception and the except block is used to handle the exception. In addition, the finally block is used to perform any clean up after the code is executed. Additionally, custom exception classes can be implemented and used to handle errors more granularly.", "category": "Python"}, {"instruction": "What is the algorithm used in the following python snippet?", "input": "defbinarySearch( arr, low, high, x): \n   \n    if high >= low: \n  \n        mid = (high + low) // 2\n  \n        # Check if x is present at mid \n        if arr[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        elif arr[mid] < x: \n            return binarySearch(arr, mid + 1, high, x) \n  \n        # If x is smaller, ignore right half \n        else: \n            return binarySearch(arr, low, mid - 1, x)", "output": "The algorithm used in this python snippet is a binary search algorithm. Binary search is an efficient search algorithm that searches a sorted array for a specified element in O(log n) time complexity. The algorithm works by first determining the median of the array, and then comparing the value at the median to the value being searched for. If the value at the median is the same as the value being searched for, the algorithm returns the index at which it found the element. Otherwise, it will either ignore the left or right half of the array depending on whether the value at the median is larger or smaller than the value being searched for. The algorithm then repeats this step on the narrowed down subarray until the element is found.", "category": "Python"}, {"instruction": "Create a class in Python named 'Foo' that has two methods named 'add' and 'subtract' to add and subtract two given numbers respectively.", "input": "", "output": "class Foo:\n  def add(self, num1, num2):\n    return num1 + num2\n\n  def subtract(self, num1, num2):\n    return num1 - num2", "category": "Python"}, {"instruction": "Translate a given string of comma-separated words into a list of words in Python.", "input": "\"apple, orange, grape\"", "output": "words = \"apple, orange, grape\".split(\", \")\nprint(words) # ['apple', 'orange', 'grape']", "category": "Python"}, {"instruction": "Create a class in Python named 'Bar' that has an attribute named 'fname' and a single method named 'sayHello'.", "input": "", "output": "class Bar:\n  def __init__(self, fname):\n    self.fname = fname\n  \n  def sayHello(self):\n    print \"Hello, \" + self.fname + \"!\"", "category": "Python"}, {"instruction": "How can we inverse the numerical order of elements stored in an array?", "input": "", "output": "To invert the order of elements stored in an array, we can use the reverse() function. This function takes in an array and reverses the order of the elements in-place, returning nothing. The syntax is as follows:\n\narray.reverse()", "category": "Python"}, {"instruction": "Write a python program to remove all the elements from a list that are less than 10.", "input": "mylist = [4, 7, 21, 24, 88, 12]", "output": "def remove_less_than_10(mylist):\n    return [n for n in mylist if n >= 10]", "category": "Python"}, {"instruction": "Create a dictionary to store the phone numbers of your friends.", "input": "list_friends = [\"John\", \"Doe\", \"Jane\", \"Smith\"]", "output": "friends_phone_numbers = {}\nfor name in list_friends:\n    phone_number = input(f'Please enter the phone number for {name}: ')\n    friends_phone_numbers[name] = phone_number", "category": "Python"}, {"instruction": "Use the given code to create a Pandas Dataframe.", "input": "data = {'Name': ['Jack', 'James', 'Joe'], \n        'Age': [21, 22, 23]}", "output": "import pandas as pd\ndf = pd.DataFrame(data)", "category": "Python"}, {"instruction": "Create a program that prints out the set of all prime divisors of a given number", "input": "num = 50", "output": "primes = []\nfor i in range(2, num+1):\n    is_prime = True\n    for j in range(2, int(i**0.5)+1):\n        if (i % j) == 0:\n            is_prime = False\n            break\n\n    if is_prime:\n        primes.append(i)\n\nprime_divisors = {i for i in primes if num % i == 0}\nprint(prime_divisors)", "category": "Python"}, {"instruction": "Sort an array of integers according to their frequency of occurrence", "input": "arr = [1, 1, 2, 2, 2, 3, 4, 4]", "output": "freq = {}\nfor i in arr:\n    if i in freq.keys():\n        freq[i] += 1\n    else: \n        freq[i] = 1\n\n# Create list of tuple\nfreq_lst = []\nfor k,v in freq.items():\n    freq_lst.append((k,v))\n\n# Sort the list of tuple in descending order\nfreq_lst = sorted(freq_lst, key = lambda x : x[1], reverse = True)\n\n# Create list from sorted tuple\nsorted_arr = [i[0] for i in freq_lst]\nprint(sorted_arr)", "category": "Python"}, {"instruction": "Design a program that takes a date in the format dd/mm/yyyy as input and prints the day of that given date", "input": "01/02/2020", "output": "day = int(input(\"Enter date in dd/mm/yyyy format: \").split('/')[0])\nmonth = int(input(\"Enter date in dd/mm/yyyy format: \").split('/')[1])\nyear = int(input(\"Enter date in dd/mm/yyyy format: \").split('/')[2])\n\n# Determine day name\nday_num = datetime(year, month, day).weekday()\ndays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\nday_name = days[day_num]\n\nprint(\"The day is: \", day_name)", "category": "Python"}, {"instruction": "Create a program that finds all the prime numbers between 1-100", "input": "", "output": "for number in range(1,101):\n    # To check if a number is prime or not\n    is_prime = True\n  \n    # We need to check until the square root of that number\n    for i in range(2, int(number**0.5)+1):\n        if number % i == 0:\n            is_prime = False\n            break\n  \n    if is_prime:\n        print(number, end=\" \")", "category": "Python"}, {"instruction": "Modify the previous program to also print the sum of the subarray elements", "input": "arr = [1, 4, 6, 8, -5, 7], k = 11", "output": "max_sum = 0 \nstart = 0 \nend = 0\n\n# Loop through each element of the array\nfor i in range(len(arr)): \n    sum = 0\n  \n    # Find maximum sum subarray\n    for j in range(i, len(arr)): \n        sum += arr[j] \n        if (sum > max_sum and sum <= k): \n            max_sum = sum \n            start = i \n            end = j \n  \n# Print maximum subarray and its sum\nprint(\"Maximum sum subarray with sum <=\", k, \"is\") \nprint(\"[\", end=\"\") \nfor i in range(start, end+1): \n    print(arr[i], end=\", \") \nprint(\"]\")\nprint(\"Sum of the subarray elements:\", max_sum)", "category": "Python"}, {"instruction": "Given an array of n elements and an integer k, find the subarray with the maximum sum less than k.", "input": "arr = [1, 4, 6, 8, -5, 7], k = 11", "output": "max_sum = 0 \nstart = 0 \nend = 0\n\n# Loop through each element of the array\nfor i in range(len(arr)): \n    sum = 0\n  \n    # Find maximum sum subarray\n    for j in range(i, len(arr)): \n        sum += arr[j] \n        if (sum > max_sum and sum <= k): \n            max_sum = sum \n            start = i \n            end = j \n  \n# Print maximum subarray\nprint(\"Maximum sum subarray with sum <=\", k, \"is\") \nprint(\"[\", end=\"\") \nfor i in range(start, end+1): \n    print(arr[i], end=\", \") \nprint(\"]\")", "category": "Python"}, {"instruction": "Parse data from a given JSON object.", "input": "data:\n{\n  \"data\": [\n    {\n      \"name\": \"John\",\n      \"age\": 24\n    },\n    {\n      \"name\": \"Bob\",\n      \"age\": 26\n    }\n  ]\n}", "output": "import json\n\ndata = '{\"data\":[{\"name\":\"John\",\"age\":24},{\"name\":\"Bob\",\"age\":26}]}'\n\nparsed_data = json.loads(data)\n\nfor item in parsed_data['data']:\n  print(item['name'] + \" is \" + str(item['age']) + \"years old.\")", "category": "Python"}, {"instruction": "Create a function to reverse a list without using the reverse() method.", "input": "", "output": "def reverse_list(lst): \n    reversed_list = [] \n    for i in range(len(lst) - 1, -1, -1): \n        reversed_list.append(lst[i]) \n    return reversed_list", "category": "Python"}, {"instruction": "Create a script in Python for printing the Fibonacci series for a given range of numbers.", "input": "start = 1\nend = 10", "output": "a,b = 0,1\nfor i in range(start, end+1):\n    print(a)\n    a,b = b,a+b", "category": "Python"}, {"instruction": "How can we sort a dictionary by value in Python?", "input": "", "output": "We can use the sorted() function in combination with the operator.itemgetter() operator to sort the dictionary by value in Python. The syntax is as follows:\n\nsorted(dictionary.items(), key=operator.itemgetter(1))", "category": "Python"}, {"instruction": "Update a given line of code to make a function return 'True' if both values are equal.", "input": "def compare(val1, val2):\n    if val1 == val2:", "output": "def compare(val1, val2):\n    if val1 == val2:\n      return True", "category": "Python"}, {"instruction": "Generate a unique key using the following string.", "input": "my_str = \"Hello World\"", "output": "import uuid \n \nkey = uuid.uuid5(uuid.NAMESPACE_DNS, my_str)", "category": "Python"}, {"instruction": "Write a function in Python to print a diamond pattern of stars.", "input": "", "output": "def diamond_pattern():\n row = 5\n for i in range(1, row + 1):\n  print(\" \"*(row-i)+\"*\"*(2*i-1))\n if row > 1:\n  for i in range(row-1, 0, -1):\n   print(\" \"*(row-i)+\"*\"*(2*i-1))", "category": "Python"}, {"instruction": "Create a Python Search Algorithm to search for a given number in a given sorted array.", "input": "data = [1, 7, 11, 14, 16]\nsearch_num = 14", "output": "def search(data, search_num):\n for i in range(len(data)):\n  if data[i] == search_num:\n   return i\n return -1", "category": "Python"}, {"instruction": "Write a function in Python to generate all permutations of the given list of letters.", "input": "['a','b','c','d']", "output": "def permutations(letters):\n permutations = []\n for a in letters:\n for b in letters:\n for c in letters:\n for d in letters:\n permutations.append(''.join(sorted([a, b, c, d])))\n return permutations", "category": "Python"}, {"instruction": "Create a Python class to represent a Person object. The class should contain the person's name, age, and occupation.", "input": "", "output": "class Person:\n  def __init__(self, name, age, occupation):\n    self.name = name\n    self.age = age\n    self.occupation = occupation", "category": "Python"}, {"instruction": "Create a program that reverses an array", "input": "Array = [1,2,3,4,5]", "output": "def reverse(arr):\n    start = 0\n    end = len(arr)-1\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n    return arr\n\narr = [1,2,3,4,5]\n\nprint(reverse(arr))", "category": "Python"}, {"instruction": "Create a code that removes all duplicates from an input array", "input": "Array = [1,2,3,3,2,1]", "output": "def remove_duplicates(arr):\n    result = []\n    for i in arr:\n        if i not in result:\n            result.append(i)\n    return result\n\narr = [1,2,3,3,2,1]\n\nprint(remove_duplicates(arr))", "category": "Python"}, {"instruction": "Write a Python script to generate random passwords with a combinations of 6 letters and numbers.", "input": "", "output": "import random\n\ndef generate_password(): \n    chars = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    password = ''\n    for i in range(6):\n        password += random.choice(chars)\n    return password\n\nprint(generate_password())", "category": "Python"}, {"instruction": "Create a class Animal with two methods: speak(), which prints out the sound the animal makes, and eat() which prints out the food the animal eats.", "input": "", "output": "class Animal():\n    def __init__(self):\n        pass\n    def speak(self):\n        print(\"Animal sound\")\n    def eat(self):\n        print(\"Animal food\")", "category": "Python"}, {"instruction": "Create a code that sums the first n Fibonacci numbers.", "input": "num = 5", "output": "def sum_n_fibonacci_numbers(num):\n    \"\"\"This function takes in a number, n, and sums\n    the first n Fibonacci numbers.\n    \n    Parameters\n    ----------\n    num : int\n        The number of Fibonacci numbers to sum.\n    \n    Returns\n    -------\n    The sum of the first n Fibonacci numbers.\n    \"\"\"\n    \n    fib = [0, 1]\n    if num < 0:\n        return None\n    elif num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        for i in range(2, num + 1):\n            fib.append(fib[i-2] + fib[i-1])\n        return sum(fib)", "category": "Python"}, {"instruction": "Create a function that takes in two lists of numbers and returns a new list of numbers in which each element is the sum of the corresponding elements in the two input lists.", "input": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]", "output": "def add_lists_elementwise(list1, list2):\n    \"\"\"This function takes in two lists of numbers and \n    returns a new list of numbers in which each element\n    is the sum of the corresponding elements in the \n    two input lists.\n    \n    Parameters\n    ----------\n    list1 : list\n        The first list of numbers.\n    list2 : list\n        The second list of numbers.\n    \n    Returns\n    -------\n    A new list in which each element is the sum of the\n    corresponding elements in the two input lists.\n    \"\"\"\n    \n    return [x + y for x, y in zip(list1, list2)]", "category": "Python"}, {"instruction": "Create a code to sort a list of strings based on the length of the strings.", "input": "my_list = ['apples', 'bananas', 'oranges']", "output": "def sort_strings_by_length(my_list):\n    \"\"\"This function takes in a list of strings and sorts\n    them based on the length of the strings.\n    \n    Parameters\n    ----------\n    my_list : list\n        The list of strings.\n    \n    Returns\n    -------\n    The sorted list of strings.\n    \"\"\"\n    \n    return sorted(my_list, key=len)", "category": "Python"}, {"instruction": "Create a function that takes in a dictionary and returns a new dictionary with the values squared.", "input": "my_dict = {1:5, 2:6, 3:7}", "output": "def squared_values(my_dict):\n    \"\"\"This function takes in a dictionary as an argument,\n    and returns a new dictionary containing the values of the\n    original dictionary squared.\n    \n    Parameters\n    ----------\n    my_dict : dict\n        The input dictionary.\n    Returns\n    -------\n    A new dictionary with the values of the original\n    dictionary squared.\n    \"\"\"\n    \n    return {k : v**2 for k, v in my_dict.items()}", "category": "Python"}, {"instruction": "Create a function to search a list l for the value v.", "input": "list l = [1, 2, 3, 4, 5, 6]\nvalue v = 4", "output": "def search_list(l, v):\n    # Iterate through the list\n    for i in l:\n        # Check if the current item is equal to v\n        if i == v:\n            return True\n    \n    # Return False if we did not find the value\n    return False\n\n# Search for the value 4\nsearch_list([1, 2, 3, 4, 5, 6], 4) # Output: True", "category": "Python"}, {"instruction": "Design a function in Python to split a sentence into words", "input": "", "output": "def split_sentence(sentence):\n    return sentence.split(' ')", "category": "Python"}, {"instruction": "Write the following pseudocode in python", "input": "\"for each element in the list, check if the number is even\"", "output": "for element in some_list:\n    if element % 2 == 0:\n        # do something", "category": "Python"}, {"instruction": "Design a function in Python that takes two parameters, a list and a number, and returns a list where all elements are multiplied by the number.", "input": "[1,2,3], 4", "output": "def mul_list(input_list, number): \n    return [x*number for x in input_list]", "category": "Python"}, {"instruction": "Define a class in Python to represent a rectangle and add a method to calculate its area.", "input": "", "output": "class Rectangle:\n    def __init__(self, length, width):\n         self.length = length\n         self.width = width\n\n    def area(self):\n        return self.length * self.width", "category": "Python"}, {"instruction": "Given a list of words, create a reverse lookup dictionary (word as key, indices as values).", "input": "words = ['apple', 'ball', 'cat', 'ball']", "output": "words = ['apple', 'ball', 'cat', 'ball']\n\nreverse_lookup = {word: [i for i, v in enumerate(words) if v == word] for word in set(words)}", "category": "Python"}, {"instruction": "Complete the given function to print the Cartesian product of two sets.", "input": "A = {0, 1, 2}\nB = {3, 4, 5, 6}\n\ndef cartesian_product(A, B):", "output": "A = {0, 1, 2}\nB = {3, 4, 5, 6}\n\ndef cartesian_product(A, B):\n\tC = set()\n\tfor a in A:\n\t\tfor b in B:\n\t\t\tC.add((a, b))\n\treturn C", "category": "Python"}, {"instruction": "Add the `color` parameter to this function and make sure it works properly.", "input": "def printShape(num, shape):\n    for i in range(0,num):\n        print(shape)", "output": "def printShape(num, shape, color):\n\tfor i in range(0, num):\n\t\tprint(color + shape)", "category": "Python"}, {"instruction": "Given the following function that takes in a string and returns true if it is a palindrone. Rewrite the function to make it more optimized.", "input": "def is_palindrome(s):\n    s = str(s).lower().replace(\" \",\"\")\n    return s == s[::-1]", "output": "def is_palindrome(s):\n    s = ''.join(char.lower() for char in s if char.isalpha())\n    return s == s[::-1]", "category": "Python"}, {"instruction": "Create an inheritance hierarchy of three classes, \"Person\", \"Student\" and \"Professor\"", "input": "", "output": "class Person { \n  // properties and methods\n} \n  \nclass Student extends Person { \n  // properties and methods\n} \n  \nclass Professor extends Person { \n  // properties and methods\n}", "category": "Python"}, {"instruction": "Answer the following question: What is the difference between a keyword and an identifier in Python?", "input": "", "output": "In Python, a keyword is a reserved word that has a specific pre-defined meaning and purpose in the language, while an identifier is any name that you assign to a variable, function, class, module or any other object. Keywords are words that are reserved for specific functions and operations, while identifiers are used to name user-defined objects.", "category": "Python"}, {"instruction": "Write a Python script to Iterate over a given list and print the square of the numbers in the list.", "input": "list = [3, 4, 5]", "output": "for num in list:\n  print(num*num)", "category": "Python"}, {"instruction": "Write a function in Python to implement a linear search algorithm. The algorithm should return the index of the number in the array if found, otherwise -1.", "input": "data = [7, 13, 11, 9, 12]\nsearch_num = 9", "output": "def linear_search(data, search_num):\n for index, num in enumerate(data):\n  if num == search_num:\n   return index\n return -1", "category": "Python"}, {"instruction": "Implement a function in Python to reverse the contents of a given dictionary.", "input": "dictionary = {\n    \"name\": \"John Doe\", \n    \"age\": 30,\n    \"city\": \"New York\"\n    }", "output": "def reverse_dictionary(d): \n    return dict(zip(d.values(), d.keys())) \n\nprint(reverse_dictionary(dictionary))", "category": "Python"}, {"instruction": "Convert this function written in Python to JavaScript code.", "input": "def divide_two_numbers(a, b):\n    if b == 0: \n        return \"Division by 0 not allowed!\"\n    return a / b", "output": "function divide_two_numbers(a, b) {\n    if(b == 0) {\n        return \"Division by 0 not allowed!\";\n    }\n    return a / b;\n}", "category": "Python"}, {"instruction": "Write a function that prints values from the given list in one line separated by a comma and a space.", "input": "list = [4, 10, 15]", "output": "def print_list(list):\n    for item in list:\n        print(item, end=', ')\n\nprint_list(list) # Output: 4, 10, 15,", "category": "Python"}, {"instruction": "Create an object-oriented Python program to simulate a simple calculator with a add, subtract and \\multiply\" function", "input": "", "output": "\"\"\"Object-oriented Python program to simulate a simple calculator with add, subtract and multiply function\"\"\"\n\n# create a class Calculator\nclass Calculator:\n\n    def add(self, x, y):\n        return x + y\n\n    def subtract(self, x, y):\n        return x - y\n\n    def multiply(self, x, y):\n        return x * y\n\n# create an instance of class Calculator\ncalc = Calculator()\n\n# call the add, subtract and multiply functions \nprint(calc.add(5,5))\nprint(calc.subtract(5,5))\nprint(calc.multiply(5,5))", "category": "Python"}, {"instruction": "Convert the following timestamp to ISO 8601 format", "input": "1579183000", "output": "import time\n\ndef timestamp_to_iso8601(timestamp):\n    \"\"\"Convert the given timestamp to ISO 8601 format\"\"\"\n    return time.strftime('%Y-%m-%dT%H:%M:%SZ', time.localtime(timestamp))", "category": "Python"}, {"instruction": "Create a function to check if an array contains any duplicate elements", "input": "[1, 3, 5, 7, 9]", "output": "def has_duplicates(arr):\n    \"\"\"Check if an array contains any duplicate elements.\"\"\"\n    return len(arr) != len(set(arr))", "category": "Python"}, {"instruction": "Write a function to sort a list of integers in non-increasing order", "input": "[9, 6, 7, 4, 3, 5]", "output": "def sort_desc(arr):\n    \"\"\"Sort a list of integers in non-increasing order.\"\"\"\n    return sorted(arr, reverse=True)", "category": "Python"}, {"instruction": "encode a given string using the Base64 algorithm", "input": "String: MySuperSecretString", "output": "import base64\n\ndef encode_base64(string):\n    \"\"\"Encode the given string using the Base64 algorithm\"\"\"\n    byte_string = string.encode('utf-8')\n    return base64.b64encode(byte_string).decode('utf-8')", "category": "Python"}, {"instruction": "Create a function which takes an array as input and check if any of its elements are equal to the given value.", "input": "Array: [1, 2, 3, 4, 5]\nValue: 4", "output": "def element_equal(arr, value):\n    \"\"\"Check if any element in the array is equal to the given value.\"\"\"\n    for ele in arr:\n        if ele == value:\n            return True\n    return False", "category": "Python"}, {"instruction": "Write a code that converts a given binary number to its equivalent decimal number.", "input": "", "output": "def binary_to_decimal(binary): \n    decimal = 0\n    base = 1\n    binary = str(binary)\n    length = len(binary) \n    for i in range(length-1, -1, -1): \n        if (binary[i] == '1'):      \n            decimal += base\n        base = base * 2\n    return decimal", "category": "Python"}, {"instruction": "What is the mathematical expression for calculating next fibonacci number from any number?", "input": "", "output": "The mathematical expression for calculating the next fibonacci number from any number is F(n+1)=F(n)+F(n-1) where n is the number for which we want to calculate the next fibonacci number.", "category": "Python"}, {"instruction": "How do you install a Python package on Windows?", "input": "", "output": "The easiest way to install a Python package on Windows is to open the Command Prompt and type the command 'pip install <package name>'. This will install the package using pip, the Python package manager. Alternatively, Python packages can be installed using the Windows Subsystem for Linux (WSL). To do this, open a bash shell using the Windows Key + x and typing 'bash'. Then, type 'sudo apt install <package name>'. This will install the package from the Ubuntu repositories.", "category": "Python"}, {"instruction": "Create a program to calculate the total marks of a student.", "input": "Marks of 5 Subjects:\nEnglish: 35\nMaths: 88\nChemistry: 70\nPhysics: 45\nComputer: 80", "output": "def calculate_total(marks):\n    total = 0\n    for mark in marks:\n        total += mark\n    return total\n\nscores = {\n    \"English\": 35,\n    \"Maths\": 88,\n    \"Chemistry\": 70,\n    \"Physics\": 45,\n    \"Computer\": 80\n}\n\ntotal_marks = calculate_total(scores.values())\nprint(total_marks) # Output: 328", "category": "Python"}, {"instruction": "Generate a random text using the given code.", "input": "seed_text = \"This is starting sentence.\"", "output": "This is starting sentence. It was a sunny day with a gentle breeze. I walked slowly, taking in the scenery around me. The birds were singing and the grass was swaying in the wind. The sky was a brilliant blue with white clouds drifting by. I felt a peace come over me, a peace that I hadn't felt in a long time.", "category": "Python"}, {"instruction": "Generate a function to flatten a nested list.", "input": "list = [1, 2, [3, 4, [5]], [[6], 7]]", "output": "def flatten_list(list):\n    s=[]\n    \n    for v in list:\n        if isinstance(v, list):\n            s+=flatten_list(v)\n        else:\n            s.append(v)\n    \n    return s", "category": "Python"}, {"instruction": "Generate a function that prints all combination of unique integer elements from an array.", "input": "Array: [1,2,3]", "output": "def print_all_combinations(arr):\n    n = len(arr)\n    result = []\n    def combinations(arr, start, end, index, r):\n        if index == r: \n            result.append(list(arr[start : end + 1]))  \n            return\n        for i in range(start, end + 1): \n            arr[start], arr[i] = arr[i], arr[start]  \n            combinations(arr, start + 1, end, index + 1, r) \n            arr[start], arr[i] = arr[i], arr[start] \n  \n    for i in range(1, n + 1):\n        combinations(arr, 0, n - 1, 0, i)\n    print(*result, sep = \"\\n\")", "category": "Python"}, {"instruction": "Implement a class to calculate the sum of two numbers.", "input": "", "output": "# Program to calculate sum of two numbers\n\nclass Sum:\n    def __init__(self, num1, num2):\n        self.num1 = num1\n        self.num2 = num2\n    \n    def calculate_sum(self):\n        return self.num1 + self.num2\n\nnum1 = 10\nnum2 = 20\n\ns = Sum(num1, num2)\nprint(f\"The sum of {num1} and {num2} is {s.calculate_sum()}.\")", "category": "Python"}, {"instruction": "Check if the following word is a palindrome", "input": "word = \"level\"", "output": "word = \"level\"\n\n# Program to check if a word is a palindrome\n\nis_palindrome = True\nfor i in range(len(word)//2):\n    if word[i] != word[len(word)-1-i]:\n        is_palindrome = False\n        break\n\nif is_palindrome:\n    print(f\"{word} is a palindrome.\")\nelse:\n    print(f\"{word} is not a palindrome.\")", "category": "Python"}, {"instruction": "Implement a custom defined length function that works with strings.", "input": "", "output": "# Implementation of custom length function\n\ndef length(string):\n    count = 0\n    for char in string:\n        count += 1\n    return count\n\nprint(length(\"Hello World!\"))", "category": "Python"}, {"instruction": "Construct a python program to determine if a number is prime or composite.", "input": "", "output": "# Program to determine whether a number is prime or composite\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nnumber = int(input(\"Enter a number: \"))\nif is_prime(number):\n    print(f\"{number} is a prime number.\")\nelse:\n    print(f\"{number} is a composite number.\")", "category": "Python"}, {"instruction": "Construct a Fibonacci Heap class.", "input": "", "output": "\"\"\"\nConstruct a Fibonacci Heap class\n\"\"\"\n\nclass FibonacciHeap:\n    def __init__(self):\n        self.min = None\n        self.nodes = []\n    \n    def insert(self, node):\n        self.nodes.append(node)\n        if self.min is None or node.key < self.min.key:\n            self.min = node\n    \n    def extract_min(self):\n        min_node = self.min\n        self.min = None\n        return min_node \n\nif __name__ == '__main__':\n    heap = FibonacciHeap()\n    node1 = Node(3)\n    node2 = Node(10)\n    heap.insert(node1)\n    heap.insert(node2)\n    print(heap.extract_min().data) # prints 3", "category": "Python"}, {"instruction": "Construct a Linked List class.", "input": "", "output": "\"\"\"\nConstruct a Linked List class\n\"\"\"\n\nclass Node: \n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    \n    def add_node(self, data):\n        temp = Node(data) \n        temp.next = self.head\n        self.head = temp\n    \n    def print_list(self):\n        current = self.head\n        while current:\n            print(current.data)\n            current = current.next\n\nif __name__ == '__main__':\n    llist = LinkedList()\n    llist.add_node(1)\n    llist.add_node(3)\n    llist.add_node(5)\n    llist.add_node(7)\n    llist.print_list() # prints 7 5 3 1", "category": "Python"}, {"instruction": "How can you convert a binary search tree into an array?", "input": "", "output": "One way to convert a binary search tree into an array is to first use an inorder traversal to visit all the nodes of the tree in order. We can then store the node values into an array as we traverse. This will result in an array containing the elements in ascending order, which is the same order they would appear in the binary search tree. This approach runs in O(n) time complexity.", "category": "Python"}, {"instruction": "Describe an efficient way to find the minimum value in an unsorted array.", "input": "", "output": "One efficient way to find the minimum value in an unsorted array is to make use of the divide-and-conquer approach. We can split the array into two halves and find the minimum element in each of them. Then we can compare the two minimum elements to find the global minimum in the array. This approach runs in O(log n) time complexity.", "category": "Python"}, {"instruction": "Generate a method to print the Nth element of a Fibonacci sequence.", "input": "N: 5", "output": "def Fibonacci(n): \n    f1 = 0 \n    f2= 1\n    if n<1: \n        print(\"Incorrect input\") \n    elif n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else:\n        for x in range(2, n): \n            next = f1 + f2 \n            f1 = f2 \n            f2 = next \n        return f2", "category": "Python"}, {"instruction": "Write a code to reverse a sentence word by word.", "input": "This is a sentence", "output": "def reverse_words(sentence):\n    words = sentence.split(' ')\n    reversed_words = [word[::-1] for word in words]\n    return ' '.join(reversed_words)\n    \nprint(reverse_words('This is a sentence')) # Output: sihT si a ecnetnes", "category": "Python"}, {"instruction": "Generate a random number between 0 and 1 using the random module in Python.", "input": "", "output": "import random\n\nrandom_number = random.random()\nprint(random_number) # Output: 0.00549342319234", "category": "Python"}, {"instruction": "Create a generator which generates the first ten square numbers.", "input": "", "output": "def generate_squares():\n    for num in range(1, 11):\n        yield num**2\n\nfor square in generate_squares():\n    print(square, end=', ') # Output: 1, 4, 9, 16, 25, 36, 49, 64, 81, 100,", "category": "Python"}, {"instruction": "Write a Python code to compute the dot product of two given vectors.", "input": "[1, 2, 3] and [4, 5, 6]", "output": "def dot_product(v1, v2):\n    product = 0\n    for i in range(len(v1)):\n        product += v1[i] * v2[i]\n    return product", "category": "Python"}, {"instruction": "Write a Python code that checks if a given string only contains alphabets.", "input": "", "output": "import re \n  \ndef is_alphabetic(string):  \n    Pattern = re.compile(\"^[a-zA-Z]*$\")\n    return bool(Pattern.match(string))", "category": "Python"}, {"instruction": "How do you add an element to the end of an array in Python?", "input": "", "output": "To add an element to the end of an array in Python, use the append() method. For example, to add the element \"apple\" to the end of the array [\"orange\", \"banana\"], use the following code:\n\nmy_array = [\"orange\", \"banana\"]\nmy_array.append(\"apple\")", "category": "Python"}, {"instruction": "Write a Python class for a Person with attributes name, age, and address.", "input": "", "output": "class Person:\n  def __init__(self, name, age, address):\n    self.name = name\n    self.age = age\n    self.address = address\n    \n  def setName(self, name):\n    self.name = name\n  \n  def getName(self):\n    return self.name\n  \n  def setAge(self, age):\n    self.age = age\n  \n  def getAge(self):\n    return self.age\n  \n  def setAddress(self, address):\n    self.address = address\n  \n  def getAddress(self):\n    return self.address", "category": "Python"}, {"instruction": "Develop a Python script to print out a given string 5 times.", "input": "str = \"Hello World!\"", "output": "for i in range(5):\n  print(str)", "category": "Python"}, {"instruction": "Compute the product of two matrices.", "input": "A [[2, 4], [3, 7]]\nB [[9, 2], [7, 1]]", "output": "# Python Program to calculate the product of two matrices \n\nA = [[2, 4], [3, 7]] \nB = [[9, 2], [7, 1]] \n  \n\n# function to calculate the product of two matrices \ndef multiplyMatrix(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    if colsA != rowsB: \n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\") \n        return\n  \n    # Create an empty product matrix C[rowA][colB] \n    C = [[0 for row in range(colsB)] for col in range(rowsA)] \n  \n    # Multiply and fill in the product matrix \n    for i in range(rowsA): \n        for j in range(colsB): \n            for k in range(colsA): \n                  C[i][j] += A[i][k] * B[k][j] \n  \n    return C \n  \n  \n# Print the product \nresult = multiplyMatrix(A, B) \nfor r in result: \n    print(r)", "category": "Python"}, {"instruction": "Create a new virtual environment for Python.", "input": "", "output": "Convert your current directory to a virtual environment:\n\npython3 -m venv <name of virtual environment>\n\nActivate the virtual environment:\n\nsource <name of virtual environment>/bin/activate\n    \nDeactivate the virtual environment:\n\ndeactivate", "category": "Python"}, {"instruction": "Given the following list, create a Python dictionary having the ID as the key and the full name as the value.", "input": "my_list = [('John', '1'), ('Alice', '2'), ('Bob', '3')]", "output": "my_dict = dict(my_list)\nprint(my_dict)\n# Output: {'John': '1', 'Alice': '2', 'Bob': '3'}", "category": "Python"}, {"instruction": "Using the input list, write a function to calculate the sum of all the elements in the list.", "input": "my_list = [1, 2, 3, 4]", "output": "def calculate_sum(my_list):\n    sum = 0\n    for i in my_list:\n        sum += i\n    return sum\n\nprint(calculate_sum(my_list))\n# Output: 10", "category": "Python"}, {"instruction": "Write a function in Python to calculate the number of minutes a user has been logged in.", "input": "log_in_time = '11:30:00', log_out_time = '13:30:00'", "output": "def calculate_time_difference(log_in_time, log_out_time) :\n  time_in = datetime.strptime(log_in_time, '%H:%M:%S')\n  time_out = datetime.strptime(log_out_time, '%H:%M:%S')\n  diff = time_out - time_in\n  minute_difference = diff.seconds // 60\n  return minute_difference\n\nprint(calculate_time_difference('11:30:00', '13:30:00'))\n# Output: 120", "category": "Python"}, {"instruction": "Summarize the key concepts in this Python code snippet.", "input": "import random\n\nfor x in range(0, 10):\n  print(\"Random number generated: \", random.randrange(1, 10))", "output": "This Python code snippet generates and prints out 10 random numbers between 1 and 10 using the \"random.randrange()\" function.", "category": "Python"}, {"instruction": "Compare two given arrays and find the common elements present in both", "input": "arr1 = [1, 2, 3, 5], arr2 = [3, 5, 7, 8]", "output": "def get_common_elements(arr1, arr2):\n    common_elements = []\n    for a in arr1:\n        if a in arr2:\n            common_elements.append(a)\n    return common_elements", "category": "Python"}, {"instruction": "Iterate over a given array and modify each element by adding a constant value to it.", "input": "arr = [3, 7, 8], constant = 4", "output": "def modify_elements(arr, constant):\n    for i in range(len(arr)):\n        arr[i] += constant", "category": "Python"}, {"instruction": "Create a function that examines the character and determines if it's an uppercase letter or not.", "input": "", "output": "def is_uppercase(character):\n    if character.isalpha and character.isupper():\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Identify the bug in the following code and provide a solution.", "input": "def calculate_average(numbers):\n    sum = 0\n    for number in numbers:\n       sum += numbers\n    return sum/len(numbers)", "output": "The bug in the code is that the variable \"number\" is not used inside the for loop. Instead, the variable \"numbers\" is used. To fix this, the line \"sum += numbers\" should be replaced with \"sum += number\". This will ensure that the correct variable is used inside the loop and the code will execute as expected.", "category": "Python"}, {"instruction": "What needs to be done to use the random module in Python?", "input": "", "output": "The random module needs to be imported in order to use it in Python. To do this, you can use the following line of code: \"import random\". Once the module has been imported, you can use the functions provided by the module in your code.", "category": "Python"}, {"instruction": "Edit the following program to output a list of the numbers that are divisible by 3", "input": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nresult = []\nfor num in numbers:\n    if num % 3 == 0:\n        result.append(num)\n\nprint(result)", "category": "Python"}, {"instruction": "Use a nested loop to print the output.", "input": "", "output": "for i in range(3):\n    for j in range(3):\n        print('*', end=' ')\n    print()", "category": "Python"}, {"instruction": "Implement a breadth-first search algorithm to find the shortest path between two nodes.", "input": "", "output": "def BFS(graph, start, end):\n\t# Create an empty queue \n    queue = []\n    # Create a set to store visited nodes\n    visited = set()\n    # Enqueue the starting node\n    queue.append([start])\n    while queue:\n        # Get the first path and process it\n        path = queue.pop()\n        # Get the last node from the path\n        node = path[-1]\n        \n        if node == end:\n            return path\n        elif node not in visited:\n            # Create a list of neighbours\n            neighbours = graph[node]\n            # Go through all neighbours\n            for neighbour in neighbours:\n                # Create a new path with the neighbour\n                new_path = list(path)\n                new_path.append(neighbour)\n                # Add the new path to the queue\n                queue.append(new_path)\n            # Mark the node as visited\n            visited.add(node)\n    return None", "category": "Python"}, {"instruction": "Generate a 5 rows by 4 columns matrix of random numbers between 0 and 10 in Python", "input": "", "output": "import random \n\nmatrix = [] \nfor i in range(5): \n    matrix.append([random.randint(0, 10) for j in range(4)]) \n\nprint(matrix)", "category": "Python"}, {"instruction": "Write a Python script to find all the numbers which are divisible by 7, but are not multiples of 5; between 2000 and 3200 (both included).", "input": "", "output": "res = []\nfor i in range(2000, 3200):\n    if (i%7 == 0) and (i%5 != 0):\n        res.append(str(i))\n\nprint(','.join(res))", "category": "Python"}, {"instruction": "Store the given data in a dictionary structure in python.", "input": "key: name \nvalue: John", "output": "mydict = {\n    \"name\": \"John\"\n}", "category": "Python"}, {"instruction": "Write a Python program to find all pairs of numbers in the given list whose sum is equal to the given number.", "input": "nums = [1, 2, 3, 4, 5], sum = 8", "output": "def find_pairs(nums, sum):\n  result = []\n  for i in range(len(nums)):\n    for j in range(i+1, len(nums)):\n      if nums[i] + nums[j] == sum:\n        result.append((nums[i], nums[j]))\n  return result\n\nres = find_pairs(nums, sum)\nprint(res)\n# Output: [(2, 6), (3, 5)]", "category": "Python"}, {"instruction": "Create a for loop in Python to find the combined length of all the strings in a list.", "input": "list = ['Data', 'Science', 'AI']", "output": "total_length = 0\n\nfor s in list:\n   total_length += len(s)\n\nprint(total_length)", "category": "Python"}, {"instruction": "Rewrite the above function in Python to use binary search algorithm instead of linear search.", "input": "data = [7, 13, 11, 9, 12]\nsearch_num = 9", "output": "def binary_search(data, search_num):\n low = 0\n high = len(data) - 1\n while low <= high:\n  mid = (low + high)//2\n  if data[mid] == search_num:\n   return mid\n  elif data[mid] < search_num:\n   low = mid + 1\n  else:\n   high = mid - 1\n return -1", "category": "Python"}, {"instruction": "Write a Python function to calculate the sum of the series 1^2 + 2^2 + 3^2 + ... + n^2.", "input": "n = 8", "output": "def sum_series(n):\n sum = 0 \n for num in range(1, n + 1):\n sum += num**2\n return sum", "category": "Python"}, {"instruction": "How can this code be refactored to make it more efficient?", "input": "x = 100\nif (x > 50)\n  y = x + 20\nelse\n  y = x - 20", "output": "The code can be refactored as follows: y = x+20 if x > 50 else x-", "category": "Python"}, {"instruction": "Suggest a Python program to execute a given block of code a specified number of times.", "input": "execute_n_times(5, print(\"Hello World!\"))", "output": "def execute_n_times(n, code):\n    for _ in range(n):\n        exec(code)", "category": "Python"}, {"instruction": "Write a Python program to remove duplicates from a list of dictionaries based on their values for a given key.", "input": "original_list = [{'name':'John', 'age': 25}, {'name':'Jim', 'age': 25}, {'name':'Lisa', 'age': 20}]", "output": "def remove_duplicates(original_list, key):\n    seen = set()\n    new_list = [item for item in original_list if key not in seen and (seen.add(item[key]) if item[key] is not None else True)]\n    return new_list", "category": "Python"}, {"instruction": "Write a Python function that takes a list of strings as parameter and returns a dictionary with the strings as keys and the length of each string as value.", "input": "words = ['apple', 'banana', 'cat']", "output": "def string_lengths(words):\n    return {word:len(word) for word in words}", "category": "Python"}, {"instruction": "Suggest a Python code for sorting a list of dictionaries based on ascending order of a given key.", "input": "original_list = [{'name':'John', 'age': 25}, {'name':'Jim', 'age': 18}, {'name':'Lisa', 'age': 20}]", "output": "def sort_by_age(original_list):\n    Return sorted(original_list, key = lambda i: i['age'])", "category": "Python"}, {"instruction": "Create a python script that takes three required parameters 'x', 'y' and 'z' and prints the result of x * y * z", "input": "x=4\ny=3\nz=2", "output": "def multiply(x, y, z):\n  return x * y * z\n  \nprint(multiply(4, 3, 2)) //output 24", "category": "Python"}, {"instruction": "Write a function to print a given character N times.", "input": "", "output": "def print_n_times(character, times):\n    for _ in range(times):\n        print(character, end=\"\")\n\nprint_n_times(\"*\", 5)", "category": "Python"}, {"instruction": "Enter the variables from the equation below into Python code.", "input": "2x + 5y - 7z = 9", "output": "x = 2\ny = 5\nz = -7", "category": "Python"}, {"instruction": "How do you debug an application in Python?", "input": "", "output": "Debugging an application in Python can be done using a variety of methods such as using a debugger like pdb, setting breakpoints, using logging, using the assert statement, etc. Additionally, tools like PyCharm and Visual Studio Code come with built-in debugging capabilities.", "category": "Python"}, {"instruction": "How would you extract emails from a given string using regex in Python?", "input": "", "output": "import re\n\ns = 'This string contains an email address: email@example.com'\n\nemails = re.findall(r'[\\w\\.-]+@[\\w\\.-]+', s)", "category": "Python"}, {"instruction": "Describe the differences between a static website and a dynamic website.", "input": "", "output": "static websites contain fixed content that is served whenever a user requests a page, while dynamic websites store content in a database and generate the page content based on user input or other variables. Static websites are faster to build and are easier to maintain, while dynamic websites can provide users with more interactive experiences.", "category": "Python"}, {"instruction": "Write a Python program to create a function that takes two numbers as arguments and returns a list of all odd numbers between them.", "input": "start_range = 2\nend_range = 10", "output": "def get_odds(start_range, end_range):\n    return [num for num in range(start_range, end_range+1) if num % 2 != 0]", "category": "Python"}, {"instruction": "Write a code to make an API call to a remote server.", "input": "", "output": "import requests\n\nurl = \"http://example.com/api\"\n\nresponse = requests.get(url)\ndata = response.json()", "category": "Python"}, {"instruction": "Assign ``num = 5`` to the ``num`` variable using the Python assignment operator.", "input": "", "output": "num = 5", "category": "Python"}, {"instruction": "Create a class in python with three functions, two of which must be called `add` and `subtract`.", "input": "", "output": "class MathOperations:\n    def add(self, a, b):\n        return a + b\n    \n    def subtract(self, a, b):\n        return a - b\n    \n    def multiply(self, a, b):\n        return a * b", "category": "Python"}, {"instruction": "Identify which elements in an array are even numbers.", "input": "nums = [1, 2, 3, 4, 5]", "output": "def is_even_num(nums):\n    result = []\n    for num in nums:\n        if num % 2 == 0:\n            result.append(num)\n    \n    return result", "category": "Python"}, {"instruction": "Design a function to get the user input and print the maximum among them.", "input": "", "output": "def getMaxNumber():\n    numbers = []\n    \n    num = int(input(\"Enter how many numbers: \"))\n    \n    for i in range(num):\n        numbers.append(int(input(\"Enter a number: \")))\n        \n    maxNum = max(numbers)\n    print(\"The maximum number is\", maxNum)", "category": "Python"}, {"instruction": "Write a code to find the sum of values present in two dimensional array", "input": "arr = [[1,2], [3,4], [5,6]]", "output": "def sum_two_dimensional_array(arr):\n    total = 0\n    for sublist in arr:\n        for i in sublist:\n            total += i\n    return total", "category": "Python"}, {"instruction": "Create a function to find all anagrams of a given word.", "input": "word = \"abbac\"", "output": "def anagrams(word):\n    if len(word) == 1:\n        return [word]\n    else:\n        anagrams_list = []\n        for i, letter in enumerate(word):\n            for j in anagrams(word[:i]+word[i+1:]):\n                anagrams_list.append(letter+j)\n        return anagrams_list", "category": "Python"}, {"instruction": "Write a code to convert an input string of numbers to an integer.", "input": "input_str = '1234'", "output": "def str_to_int(input_str):\n    num = 0\n    for i in input_str:\n        num = num * 10 + (ord(i) - ord('0')) \n    return num", "category": "Python"}, {"instruction": "Create a function to return the count of even numbers in a list", "input": "list_num = [4, 5, 6, 7, 8]", "output": "def count_even_numbers(list_num):\n    count = 0\n    for i in list_num:\n        if (i % 2 == 0):\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Design a program to search a list for a specified item", "input": "", "output": "def search_list(array, item):\n    for i in range(len(array)):\n        if array[i] == item:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Modify the following code so that it prints the Fibonacci numbers up to the given number", "input": "x = 10", "output": "def fibonacci(x):\n    a = 0\n    b = 1\n    if x < 0:\n        return []\n    elif x == 0:\n        return 0\n    elif x == 1:\n        return [0, 1]\n    else:\n        c = a + b\n        res = [a, b, c]\n        while c < x:\n            a = b\n            b = c\n            c = a + b\n            res.append(c)\n        return res", "category": "Python"}, {"instruction": "Rearrange the given fragments of code in order to build an ``if ... else ...`` statement in Python.", "input": "print('Success!')\nelse:\nif a > b", "output": "if a > b:\n    print('Success!')\nelse:", "category": "Python"}, {"instruction": "Write a Python program to convert an integer to a Roman numeral.", "input": "number = 2019", "output": "def to_roman(num):\n    thousands = [\"\", \"M\", \"MM\", \"MMM\"]\n    hundreds = [\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"]\n    tens = [\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"]\n    ones = [\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"]\n    \n    return thousands[num//1000] + hundreds[(num%1000)//100] + tens[(num%100)//10] + ones[num%10]", "category": "Python"}, {"instruction": "Write a Python program to compare two given lists and return True if their contents are the same.", "input": "list1 = [1, 3, 8, 9]\nlist2 = [1, 3, 8, 9]", "output": "def compare_lists(list1, list2):\n    return list1 == list2", "category": "Python"}, {"instruction": "Suggest a Python code for printing the sum, minimum and maximum of a given list.", "input": "list_elements = [1, 2, 4, 6, 8, 9]", "output": "def list_calculations(list_elements):\n    print('sum:', sum(list_elements))\n    print('min:', min(list_elements))\n    print('max:', max(list_elements))", "category": "Python"}, {"instruction": "Create an array containing 10 random numbers between 0 and 10.", "input": "", "output": "import random\n\n# Create an array with 10 random numbers\narray = []\nfor i in range(10):\n    array.append(random.randint(0,10))\n\n# Print the array\nprint(array)", "category": "Python"}, {"instruction": "Use .split() in Python to break the following text into a list of sentences.", "input": "text = \"Hello! My name is John. What is your name?\"", "output": "text = \"Hello! My name is John. What is your name?\"\n\nsentences = text.split(\". \")\nprint(sentences) # ['Hello! My name is John', 'What is your name?']", "category": "Python"}, {"instruction": "Write an algorithm to find the middle item in a linked list.", "input": "", "output": "# Finds the middle node in a linked list \n# Input: head of the linked list \n# Return: the middle element of the linked list \ndef findMiddleNode(head): \n\t# If the linked list is empty \n\tif (head is None): \n\t\treturn None\n\n\t# Find the length of the linked list \n\tlength, node = 0, head \n\twhile (node is not None): \n\t\tlength += 1\n\t\tnode = node.next\n\n\t# Jump to the middle of linked list \n\tnode = head \n\tfor _ in range(length // 2): \n\t\tnode = node.next\n\t\t\n\treturn mid", "category": "Python"}, {"instruction": "Create an array that contains the elements 1, 3, 5, 7, and 9 in random order.", "input": "", "output": "import random\n\n# Create an array with all our values\narray = [1, 3, 5, 7, 9]\n\n# Use the shuffle function to randomize\nrandom.shuffle(array)\n\n# Print out the randomized array\nprint(array)", "category": "Python"}, {"instruction": "Create a variable to store the text \"Python is a programming language\" and then print it.", "input": "", "output": "text = \"Python is a programming language\"\nprint(text)", "category": "Python"}, {"instruction": "Write a function to compare two lists of numbers and return a new list with the elements which are common to both the lists.", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [3, 5, 6, 7, 8]", "output": "def compare_lists(list1, list2):\n    new_list = []\n    for element in list1:\n        if element in list2:\n            new_list.append(element)\n    return new_list\n    \n# Call the compare_lists()\nlist_common = compare_lists(list1, list2)\n\n# Print the new_list\nprint(list_common) # [3, 5]", "category": "Python"}, {"instruction": "Write a code snippet that prints the current date and time in the format YYYY-MM-DD HH:MM:SS.", "input": "", "output": "import datetime\n\n# Get the current datetime\nnow = datetime.datetime.now()\n\n# Prints the current datetime in YYYY-MM-DD HH:MM:SS format\nprint(now.strftime(\"%Y-%m-%d %H:%M:%S\"))", "category": "Python"}, {"instruction": "Create a program that takes a given string and returns the frequency of each alphabet character.", "input": "", "output": "def get_character_frequency(str):\n    char_freq = {}\n    for char in str:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    return char_freq\n\nget_character_frequency(\"Hello World!\") # Output: { 'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1 }", "category": "Python"}, {"instruction": "Create a function that takes two strings and finds the longest common substring between them.", "input": "", "output": "def longest_common_substring(s1, s2): \n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]", "category": "Python"}, {"instruction": "Write a Python program to find the four letter words from a given list.", "input": "[\"tree\", \"door\", \"apple\", \"ball\", \"house\", \"cat\", \"wood\"].", "output": "\"\"\"\nA Python program to find the four letter words from a given list\n\"\"\"\n\n# Initializing the list \nwords = [\"tree\", \"door\", \"apple\", \"ball\", \"house\", \"cat\", \"wood\"] \n\n# Using list comprehension to extract four letter words \nfour_letter_words = [word for word in words if len(word) == 4] \n\n# Printing the four letter words \nprint(\"Four letter words:\", four_letter_words)", "category": "Python"}, {"instruction": "Create a program to print the FizzBuzz series", "input": "Up to the number 25", "output": "def fizzbuzz(n): \n    for num in range(1, n+1):\n        if num % 3 == 0 and num % 5 == 0:\n            print(\"FizzBuzz\")\n        elif num % 3 == 0: \n            print(\"Fizz\") \n        elif num % 5 == 0: \n            print(\"Buzz\")\n        else: \n            print(num)", "category": "Python"}, {"instruction": "Create a python program to determine the comprehesive count of words in a given string", "input": "Given the string s =\"python programming is fun\"", "output": "def count_words(s):\n    words = s.split(' ')\n    count = len(words)\n    return count", "category": "Python"}, {"instruction": "Create a function to print an inverted triangle", "input": "It should display 8 lines with 5 asterisks", "output": "def print_inverted_triangle():\n    for i in range(8, 0, -1):\n        print(\"*\" * i)", "category": "Python"}, {"instruction": "Create a function to generate Pythagorean Triples up to a given limit.", "input": "Limit: 20", "output": "# Create a function to generate pythagorean triples\ndef generator(limit):\n\t# Create an empty list to store the result\n\tresult = []\n    # Iterate over limit\n\tfor n in range(1, limit + 1):\n\t\tfor m in range(n + 1, limit +1):\n\t\t\ta = m*m - n*n\n\t\t\tb = 2*m*n\n\t\t\tc = m*m + n*n\n\t\t\tif c > limit:\n\t\t\t\tbreak\n\t\t\tif a > b:\n\t\t\t\tresult.append([a, b, c])\n\t\t\tif a < b:\n\t\t\t\tresult.append([b, a, c])\n\treturn result\n\n# Driver code\nlimit = 20\npythagorean_triples = generator(limit)\nprint(pythagorean_triples)", "category": "Python"}, {"instruction": "Calculate the Hamming distance of two binary strings.", "input": "String1: 1001100 \nString2: 1010101", "output": "def hammingDistance(str1, str2): \n    # Iterate through all possibles index of the strings \n    # and counting the number of different characters and return it.\n    distance = 0\n    for index in range(len(str1)): \n        if str1[index] != str2[index]: \n            distance += 1\n  \n    return distance \n\n# Driver code \nstr1 = '1001100'\nstr2 = '1010101'\nprint(hammingDistance(str1, str2))", "category": "Python"}, {"instruction": "Integrate the plotting library Matplotlib into this Python script.", "input": "import pandas as pd\ndata = pd.read_csv('data.csv')", "output": "import pandas as pd\nimport matplotlib.pyplot as plt \n\n# Read csv file \ndata = pd.read_csv('data.csv')  \n\n# Data visualization \nplt.plot(data) \nplt.xlabel('x-axis') \nplt.ylabel('y-axis')  \nplt.title('Plot of data')  \nplt.show()", "category": "Python"}, {"instruction": "Default a neural network architecture to classify the handwritten digit from 0 to 9.", "input": "", "output": "# Define the architecture\ndef model(input_shape):\n    model = tf.keras.Sequential([\n        tf.keras.layers.Flatten(input_shape=input_shape),\n        tf.keras.layers.Dense(128, activation='relu'),\n        tf.keras.layers.Dense(10, activation='softmax')\n    ]) \n    \n    model.compile(optimizer='adam',\n                  loss='sparse_categorical_crossentropy',\n                  metrics=['accuracy']) \n    \n    return model", "category": "Python"}, {"instruction": "Write a code for extracting the last n elements of a list.", "input": "List: [1, 2, 3, 4, 5], n = 3", "output": "# Define a function to extract the required elements\ndef extract_last_elements(list, n): \n    # Get the length of list \n    l = len(list)    \n    # Check if n is negative or greater than length \n    if n <= 0 or n > l: \n        return [] \n  \n    # return the last n elements \n    return list[l - n:]\n\n# Driver code\nlist = [1, 2, 3, 4, 5]\nn = 3\nprint (extract_last_elements(list, n))", "category": "Python"}, {"instruction": "Compute the cosine similarity of two vectors.", "input": "Vectors: [2, 3] and [4, -5]", "output": "def cosine_similarity(v1, v2):\n    dot = 0\n    mag1 = 0\n    mag2 = 0\n    for a, b in zip(v1, v2):\n        dot += a*b\n        mag1 += a**2\n        mag2 += b**2\n    return dot/(mag1**0.5 * mag2**0.5)\n\nv1 = [2, 3]\nv2 = [4, -5]\n\ncosine_sim = cosine_similarity(v1, v2)\n\nprint(cosine_sim)", "category": "Python"}, {"instruction": "Create a loop to print out all odd number from 0 to 10.", "input": "", "output": "for i in range(0, 11): \n    if i % 2 != 0:\n        print(i)", "category": "Python"}, {"instruction": "Write a python script to print out a list comprehension that prints out all the integers in a given range", "input": "1-10", "output": "my_list = [x for x in range(1, 11)]  \nprint(my_list)", "category": "Python"}, {"instruction": "Without using any built-in functions, generate a Python code to remove the duplicated elements in a list", "input": "", "output": "def remove_duplicates(l): \n    res = [] \n    for i in l: \n        if i not in res: \n            res.append(i) \n    return res", "category": "Python"}, {"instruction": "Write a Python program to shuffle the items of a given list in random order.", "input": "list_elements = [1, 2, 3, 4, 5]", "output": "from random import shuffle\n\ndef shuffle_list(list_elements):\n    shuffle(list_elements)\n    return list_elements", "category": "Python"}, {"instruction": "Using the comment as a guide, write a nested loop to iterate over all elements of a multi-dimensional array", "input": "[[1, 2, 3], \n [4, 5, 6], \n [7, 8, 9]]", "output": "for i in range(len(array)):\n    for j in range(len(array[i])):\n        print(array[i][j])", "category": "Python"}, {"instruction": "Devise a recursive solution to the problem.", "input": "Find the sum of all numbers from 1 to N", "output": "def sum_recursive(n):\n    if n == 0:\n        return 0\n    else:\n        return n + sum_recursive(n-1)", "category": "Python"}, {"instruction": "How do you create a new list in Python from a given list that contains the square of each element?", "input": "", "output": "The following code creates a new list from the given list by squaring each element using a list comprehension: new_list = [el**2 for el in original_list]", "category": "Python"}, {"instruction": "Create a class called Vehicle in Python with attributes for type (car, truck, motorcycle etc.), make, model, year, and speed.", "input": "", "output": "class Vehicle:\n    def __init__(self, type, make, model, year, speed):\n        self.type = type\n        self.make = make\n        self.model = model\n        self.year = year\n        self.speed = speed", "category": "Python"}, {"instruction": "How to select data from a Pandas DataFrame?", "input": "", "output": "Pandas DataFrames can be queried by selecting specific columns and/or rows.\n\nTo select a single column from a DataFrame, you can use the following syntax:\n\ndf['column_name']\n\nTo select multiple columns from a DataFrame, you can use the following syntax:\n\ndf[['column_1', 'column_2', 'column_3']]\n\nTo select rows from a DataFrame, you can use the following syntax:\n\ndf[(df['column_name'] == condition) & (df['column_name_2'] > condition)]", "category": "Python"}, {"instruction": "What is the most efficient way to delete a key from a Python dictionary?", "input": "", "output": "The most efficient way to delete a key from a Python dictionary is to use the del keyword. This will delete the specified key and its associated value from the dictionary.", "category": "Python"}, {"instruction": "Using Python, create a function that takes a string as an argument and returns a updated string where each character is repeated twice.", "input": "inputValue = \"Hello\"", "output": "def repeatCharacters(inputValue):\n  outputValue = \"\"\n  for char in inputValue: \n    outputValue += char * 2 \n  return outputValue", "category": "Python"}, {"instruction": "Write a function in Python which takes a list of integers as an argument and returns a new list which contains the maximum value of each unique number in the input list.", "input": "intList = [1, 4, 2, 9, 3, 5, 1, 9]", "output": "def maxValuesInList(intList):\n  uniqueValues = set(intList)\n  maxValuesList = []\n  for value in uniqueValues:\n    maxValue = max([item for item in intList if item == value])\n    maxValuesList.append(maxValue)\n  return maxValuesList", "category": "Python"}, {"instruction": "Using Python, make a function that takes a list of strings as an argument and returns a new list of all the strings in uppercase.", "input": "listOfStrings = [\"apple\", \"banana\", \"mango\"]", "output": "def convertStringsToUppercase(listOfStrings):\n  return [string.upper() for string in listOfStrings]", "category": "Python"}, {"instruction": "Remove all the punctuation from a given string", "input": "\"Welcome to the world of computers!\"", "output": "import string\n\ndef remove_punctuation(text):\n    punctuations = string.punctuation\n    no_punct = \"\"\n    for char in text:\n        if char not in punctuations:\n            no_punct += char\n    return no_punct\n\nif __name__ == '__main__':\n    text = 'Welcome to the world of computers!'\n    print(remove_punctuation(text))", "category": "Python"}, {"instruction": "Given a binary tree, write a function to determine whether it is a valid binary search tree.", "input": "", "output": "def is_valid_bst(root):\n\n    def helper(node, lower_limit, upper_limit):\n        # base case\n        if not node:\n            return True\n        \n        val = node.val\n        if val <= lower_limit or val >= upper_limit:\n            return False\n\n        if not helper(node.right, val, upper_limit):\n            return False\n        if not helper(node.left, lower_limit, val):\n            return False\n        return True\n    \n    return helper(root, float('-inf'), float('inf'))\n\nif __name__ == '__main__':\n    # Assume a binary tree is defined\n    root = Node().root\n    result = is_valid_bst(root)\n    print(result)", "category": "Python"}, {"instruction": "Write an algorithm to find the maximum subarray sum within the provided input array.", "input": "[-2, 1, -3, 4, -1, 2, 1, -5, 4]", "output": "def max_subarray_sum(arr):\n    max_sum = 0\n    curr_sum = 0\n    for x in arr:\n        curr_sum += x\n        if curr_sum < 0:\n            curr_sum = 0\n        elif curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n\nif __name__ == '__main__':\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n    print(max_subarray_sum(arr))", "category": "Python"}, {"instruction": "Given a linked list, write a function to find the nth to last node.", "input": "", "output": "def nth_to_last_node(head, n):\n    left_ptr = head\n    right_ptr = head\n    for _ in range(n-1):\n        if not right_ptr.nextnode:\n            raise LookupError('Error: n is larger than the linked list')\n        right_ptr = right_ptr.nextnode \n    while right_ptr.nextnode:\n        left_ptr = left_ptr.nextnode\n        right_ptr = right_ptr.nextnode\n    return left_ptr\n\nif __name__ == '__main__':\n    ll = LinkedList() # Assume LinkedList with nodes is defined\n    head = ll.head\n    result = nth_to_last_node(head, 3)\n    print(result.value)", "category": "Python"}, {"instruction": "Given a two-dimensional array of integers, find the maximum sum of numbers you can find by tracing a path from the top-left to bottom-right corner.", "input": "[[1, 5, 4], [2, 3, 4], [1, 9, 3]]", "output": "def max_sum(arr):\n    result = [[None] * len(arr[0]) for _ in range(len(arr))]\n    result[0][0] = arr[0][0]\n    for i in range(1, len(arr[0])):\n        result[0][i] = arr[0][i] + result[0][i - 1]\n    for i in range(1, len(arr)):\n        result[i][0] = arr[i][0] + result[i - 1][0]\n    for i in range(1, len(arr)):\n        for j in range(1, len(arr[0])):\n            result[i][j] = max(result[i - 1][j], result[i][j - 1]) + arr[i][j]\n    return result[- 1][- 1]\n\nif __name__ == '__main__':\n    arr = [[1, 5, 4], [2, 3, 4], [1, 9, 3]]\n    print(max_sum(arr))", "category": "Python"}, {"instruction": "Generate a random string of 16 characters containing both alphabetical and numerical characters.", "input": "", "output": "import random\nimport string\n\ndef random_string():\n    characters = string.ascii_letters + string.digits\n    random_string = ''.join(random.choices(characters, k=16))\n    return random_string\n\nif __name__ == '__main__':\n    print(random_string())", "category": "Python"}, {"instruction": "Implement a function to compute the binomial coefficient.", "input": "", "output": "def compute_binomial_coefficient(n, k):\n    if k == 0 or k == n:\n        return 1\n    else:\n        return compute_binomial_coefficient(n-1,k-1) + compute_binomial_coefficient(n-1,k)", "category": "Python"}, {"instruction": "Write a code to perform a linear search in a given list.", "input": "[1, 6, 2, 8, 5], 8", "output": "def linear_search(my_list, x):\n    for i in range(len(my_list)):\n        if my_list[i] == x:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Write a a code to find all the prime numbers from 0 to 100", "input": "", "output": "# create a list of all the prime numbers\nprime_list = []\n\n# iterate through 0 to 100\nfor i in range(1,101):\n    if i > 1:\n        # loop through 2 to i/2\n        for j in range(2,i//2):\n            # if i is divisible by j, then it is not a prime number\n            if (i % j) == 0:\n                break\n        else:\n            # add the prime number to the prime list\n            prime_list.append(i)\n\nprint(prime_list) # prints the list of all prime numbers from 0 to 100.", "category": "Python"}, {"instruction": "Remove the duplicates in a list.", "input": "arr = [1,2,1,2,3]", "output": "arr = [1,2,1,2,3]\n\nres = []\nfor x in arr: \n    if x not in res: \n        res.append(x)\nprint(res) # prints [1,2,3], which is the list without any duplicates.", "category": "Python"}, {"instruction": "Create a function in python to find the minimum value in an array.", "input": "arr = [3,6,2,7,1]", "output": "def find_min(arr): \n    min = arr[0] \n    for x in arr: \n        if x < min: \n            min = x \n    return min\n\nresult = find_min(arr)\nprint(result) # prints 1, which is the minimum in the array.", "category": "Python"}, {"instruction": "Explain the purpose of a static method in a Python class", "input": "", "output": "A static method is a method that is bound to a class rather than an object. It does not require an instance of the class to be created in order to be called, and it does not have access to the attributes or methods of an instance of that class. Static methods are usually used to provide methods for manipulation of class attributes and/or to provide utility methods for the class.", "category": "Python"}, {"instruction": "Generate a code segment that prints all the elements of a 2-dimensional array.", "input": "", "output": "for array in 2d_array:\n    for element in array:\n        print(element)", "category": "Python"}, {"instruction": "Explain the use of semicolon in the following python code.", "input": "a = 5; b = 6; c = 7;", "output": "The semicolon is used here to separate multiple statements on the same line. In this case, the code is assigning values to variables; by separating these assignments with semicolons, they are all evaluated in a single statement as opposed to writing three separate statements.", "category": "Python"}, {"instruction": "Create a Python class to store attributes of a student", "input": "", "output": "class Student:\n    def __init__(self, name, grade, age):\n        self.name = name\n        self.grade = grade\n        self.age = age\n\n    def get_name(self):\n        return self.name\n\n    def get_grade(self):\n        return self.grade\n\n    def get_age(self):\n        return self.age", "category": "Python"}, {"instruction": "Rewrite the following function without using the ``for`` loop.", "input": "def double_array(array):\n    for i in range(len(array)):\n        array[i] *= 2", "output": "def double_array(array):\n    array[:] = [x * 2 for x in array]", "category": "Python"}, {"instruction": "Create a looping statement in Python to print the alphabet in lowercase.", "input": "", "output": "for letter in \"abcdefghijklmnopqrstuvwxyz\":\n    print(letter)", "category": "Python"}, {"instruction": "Edit the following code to register an account on a website.", "input": "import requests\n\nurl = \"www.example.com/register\"\ndata = \"username=myname\"", "output": "import requests\n\nurl = \"www.example.com/register\"\ndata = { \"username\" : \"myname\", \"password\" : \"secret_password\", \"email\" : \"myname@example.com\" }\n\nresponse = requests.post(url, data=data)", "category": "Python"}, {"instruction": "Create a class in Python called \"Person\" and define two methods - one for getting a name, and one for saying hello.", "input": "", "output": "class Person(object):\n    def __init__(self, name):\n        self.name = name\n    \n    def getName(self):\n        return self.name\n    \n    def say_hello(self):\n        print(\"Hello, my name is %s\" % self.name)", "category": "Python"}, {"instruction": "Write a code to implement Multiple Linear Regression for a dataset.", "input": "", "output": "\"\"\"\nA code to implement Multiple Linear Regression for a given dataset\n\"\"\"\n\nimport numpy as np\n\ndef multiple_linear_regression(X, y):\n    '''\n    This function accepts feature matrix X and target vector y,\n    and returns the coefficients of the determined multiple linear regression model.\n    '''\n    X = np.concatenate((np.ones((X.shape[0], 1)), X), axis=1) \n    #concatenate a column of ones to X\n    return np.linalg.inv(X.T @ X) @ X.T @ y", "category": "Python"}, {"instruction": "Given two integers, how to find the GCD of them in Python?", "input": "", "output": "def gcd(a, b): \n  if(b == 0): \n    return a \n  else: \n    return gcd(b, a % b)", "category": "Python"}, {"instruction": "Write a function in Python to find the sum of all even numbers between 0 and a given number.", "input": "", "output": "def sum_of_even_numbers(n):\n    result = 0\n    for i in range(0, n + 1):\n        if i % 2 == 0:\n            result += i\n    \n    return result", "category": "Python"}, {"instruction": "Create an artificial neural network in PyTorch to predict the next word in a sentence.", "input": "", "output": "import torch \nimport torch.nn as nn \n\nclass ANN(nn.Module):\n    def __init__(self, vocab_size, embedding_dim, hidden_dim):\n        super().__init__()\n        self.embedding = nn.Embedding(vocab_size, embedding_dim) \n        self.fc1 = nn.Linear(embedding_dim, hidden_dim) \n        self.fc2 = nn.Linear(hidden_dim, vocab_size)\n    \n    def forward(self, x):\n        embedded = self.embedding(x) \n        out = self.fc1(embedded)\n        out = self.fc2(out) \n        return out", "category": "Python"}, {"instruction": "Create a python script that connects to a database and outputs the average age of users.", "input": "", "output": "import pandas as pd \nimport sqlite3\n\n# Connect to database\nconn = sqlite3.connect(\"myDB.db\")\n\n# Read Data \ndf = pd.read_sql(\"SELECT age FROM Users\", conn)\n\n# Calculate average \navg_age = df.mean()\n\n# Output the average age of users \nprint(\"Average age of users: \", avg_age)", "category": "Python"}, {"instruction": "Create a GUI interface for a multiplayer card game using PyQt5.", "input": "", "output": "import sys \nimport PyQt5 \nfrom PyQt5.QtWidgets import QApplication, QWidget \n  \n  \nclass Game(QWidget): \n    def __init__(self): \n        super().__init__() \n        self.title = 'Multiplayer Card Game' \n        self.left = 400 \n        self.top = 400 \n        self.width = 300 \n        self.height = 100 \n        self.initUI()\n  \n    def initUI(self): \n        self.setWindowTitle(self.title) \n        self.setGeometry(self.left, self.top,  \n                         self.width, self.height)\n        self.show() \n  \napp = QApplication(sys.argv) \nscreen = Game() \nsys.exit(app.exec_())", "category": "Python"}, {"instruction": "Explain what a sorting algorithm is and describe one.", "input": "", "output": "A sorting algorithm is an algorithm that is used to rearrange a sequence of items so that they are in a certain order. One example of a sorting algorithm is the bubble sort. The bubble sort works by comparing two adjacent elements in the list, and swapping them if they are out of order. This process is then repeated until the list is sorted.", "category": "Python"}, {"instruction": "In Python, write a function that takes two integers a, b and returns a*b.", "input": "", "output": "def multiply(a, b):\n  return a * b", "category": "Python"}, {"instruction": "Using pandas, create a dataframe with two columns and five rows.", "input": "", "output": "import pandas as pd\n\ndf = pd.DataFrame(\n    [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]], \n    columns=['a', 'b']\n    )", "category": "Python"}, {"instruction": "Convert the following SQL query into a Python pandas DataFrame.", "input": "SELECT product.name, store.location, store.country\nFROM product\nINNER JOIN store\nON product.store_id = store.store_id", "output": "import pandas as pd\n\ndf = pd.read_sql_query(\n'SELECT product.name, store.location, store.country'\n'FROM product'\n'INNER JOIN store'\n'ON product.store_id = store.store_id',\nconn\n )", "category": "Python"}, {"instruction": "Generate a Hash Table in Python with given length and values.", "input": "size = 10\nvalues = [20, 12, 45, 89, 78, 90]", "output": "hash_table = [None]*size\n\nfor value in values:\n    hash_value = value % size\n    hash_table[hash_value] = value\n \nprint(hash_table)", "category": "Python"}, {"instruction": "Name an advantage of using linked list over an array.", "input": "", "output": "One advantage of a linked list over an array is that it does not require the memory for storing all the elements to be allocated at once. Linked lists allow memory to be allocated as needed and can be easily expanded as new records are added. Also, linked list can easily insert and remove elements at any position in the list. Additionally, they can easily be manipulated or sorted in the same order in which they are stored. Finally, linked lists can store data items of different sizes while arrays require all elements to be the same size.", "category": "Python"}, {"instruction": "How would you reverse a string in Python?", "input": "", "output": "my_string = \"Hello World!\"\nmy_string = my_string[::-1]  # slice the string from start to finish in reverse order", "category": "Python"}, {"instruction": "Write a function to print the permutations of a given string.", "input": "", "output": "def print_permutations(string):\n    if len(string) == 1:\n        print(string)\n    else:\n        for permutation in (print_permutations(string[1:])):\n            for i in range(len(string)):\n                print(permutation[:i] + string[0] + permutation[i:])\n\nprint_permutations(\"abc\")", "category": "Python"}, {"instruction": "Using Python, create a function to return the number of days in a particular month.", "input": "September", "output": "def days_in_month(month):\n if month == 'January' or month == 'March' or month == 'May' or month == 'July' or month == 'August' or month == 'October' or month == 'December':\n  return 31\n elif month == 'February':\n  return 28\n else:\n  return 30\n  \n# Output\ndays_in_month('September') \n# Output \n30", "category": "Python"}, {"instruction": "Create a Python program to calculate prime numbers between 0 to 50.", "input": "", "output": "# Program to calculate prime numbers between 0 to 50\n\n# list of prime numbers\nprime_list = []\nfor num in range(0,51):  \n   # prime numbers are greater than 1  \n   if num > 1:  \n       for i in range(2, num):  \n           if (num % i) == 0:  \n               break  \n       else:  \n           prime_list.append(num)\n\nprint(prime_list)", "category": "Python"}, {"instruction": "Print all the permutations of a given list", "input": "[1, 2, 3]", "output": "def permute(lis):\n    if len(lis) == 0:\n        return [] \n    if len(lis) == 1:\n        return [lis] \n  \n    l = [] \n    for i in range(len(lis)):\n        m = lis[i] \n  \n        remLis = lis[:i] + lis[i+1:] \n  \n        for p in permute(remLis): \n            l.append([m] + p) \n    return l \n\nlist1 = [1, 2, 3]\nresult = permute(list1) \nfor i in result: \n    print(i)", "category": "Python"}, {"instruction": "Create a Python script to fetch the weather data of a given city", "input": "Bangalore", "output": "import requests\n\ncity = \"Bangalore\"\nurl = f\"http://api.openweathermap.org/data/2.5/weather?q={city}&appid=your_api_key\"\n\n# Fetching the JSON data\nresponse = requests.get(url)\ndata = response.json()\n \n# Get the main weather data\nweather_data = data[\"main\"]\n \n# Obtain the current temperature \ntemp = weather_data[\"temp\"]\n \nprint(f\"The current temperature in {city} is {temp} degrees Celsius.\")", "category": "Python"}, {"instruction": "Write Python code to print the most frequent characters in a given string.", "input": "String: I love apples", "output": "def most_frequent_char(s):\n    count = [0] * 256\n    max_count = 0\n    max_id = 0\n    for i in range(len(s)):\n        count[ord(s[i])] += 1\n        if count[ord(s[i])] > max_count:\n            max_count = count[ord(s[i])]\n            max_id = i\n    \n    return s[max_id]", "category": "Python"}, {"instruction": "Given a binary tree, print out a post-order traversal of its nodes.", "input": "", "output": "def postorder_traverse(root):\n\n  if root == null:\n    return\n\n  postorder_traverse(root.left)\n  postorder_traverse(root.right)\n  print(root.value)", "category": "Python"}, {"instruction": "Create a function which takes an array of strings as an argument and return the longest string.", "input": "array =['cake', 'apple', 'orange']", "output": "def largest_string(array):\n   largest_string=array[0]\n   for i in array:\n      if len(i) > len(largest_string):\n         largest_string = i\n   return largest_string", "category": "Python"}, {"instruction": "Write a Python script to remove duplicates from the list.", "input": "my_list = [1,2,4,4,1,2]", "output": "def remove_duplicates(my_list): \n    new_list = [] \n    for item in my_list: \n        if item not in new_list: \n            new_list.append(item) \n    return new_list", "category": "Python"}, {"instruction": "How to remove all special characters from a string?", "input": "string=\"It@#$%^&*( ) is a;?.incredible# time\"", "output": "def remove_special_characters(string):\n    new_string = \"\"\n    for char in string:\n        if char.isalpha() or char.isdigit() or char==\" \":\n            new_string += char\n    return new_string", "category": "Python"}, {"instruction": "Create an algorithm that will search for a key-value pair in an object.", "input": "searchKey='c'\nobject= {\n    \"a\": 1,\n    \"b\": 2,\n    \"c\": 3,\n    \"d\": 4,\n    \"e\": 5\n}", "output": "def search(searchKey, object):\n    if searchKey in object:\n        return object[searchKey]\n    else:\n        return -1", "category": "Python"}, {"instruction": "Create a function that returns a list of Prime numbers between 0-50.", "input": "", "output": "def prime_numbers():\n    primes=[]\n    for i in range (1,51):\n        count=0\n        for j in range (2,i):\n            if i%j==0:\n                count+=1\n        if count==0:\n            primes.append(i)\n    return primes", "category": "Python"}, {"instruction": "How to sort a list of tuples in Python?", "input": "", "output": "You can sort a list of tuples in Python by using the sorted() function. For example:\n\ntuple_list = [('John', 18), ('Jane', 20), ('Bob', 16)]\n\nsorted_list = sorted(tuple_list, key=lambda tup: tup[1])\n\nprint(sorted_list)\n\n# Output: [('Bob', 16), ('John', 18), ('Jane', 20)]", "category": "Python"}, {"instruction": "How to check if a string contains a specific character in Python?", "input": "", "output": "You can check if a string contains a specific character in Python by using the in operator. For example:\n\nmy_string = \"Hello World!\"\n\nif 'W' in my_string:\n    print(\"The string contains the character W\")", "category": "Python"}, {"instruction": "How would you implement a simple object oriented Programming concept in Python?", "input": "", "output": "In Python, object-oriented programming is supported by classes which contain attributes that represent the characteristics of an object, and methods which represent the actions that an object can take. To implement a simple object-oriented concept in Python, we would first define a class that represents the type of object we wish to create. This class will contain attributes (i.e. data fields) that define the state of the object, as well as methods that define the behaviors of the object. Finally, we can create objects using the class definition, providing an initial state and access to the methods.", "category": "Python"}, {"instruction": "Write a code to output a substring of the given string", "input": "String: Hello World\nStart: 3\nEnd: 5", "output": "\"\"\"\nWrite a code to output a substring of the given string\n\"\"\"\n\ndef substring(inp_str, start, end):\n    return inp_str[start:end]\n\nif __name__ == '__main__':\n    inp_str = \"Hello World\" \n    start = 3\n    end = 5\n    print(substring(inp_str, start, end))", "category": "Python"}, {"instruction": "Create an in-place version of selection sort in Python.", "input": "arr = [5, 2, 4, 6, 8, 1]", "output": "def selection_sort(arr): \n\n    # Traverse through all array elements \n    for i in range(len(arr)): \n  \n        # Find the minimum element in remaining unsorted array \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n                \n        # Swap the found minimum element with the first element         \n        arr[i], arr[min_idx] = arr[min_idx], arr[i]", "category": "Python"}, {"instruction": "Create a Python class for Animal", "input": "", "output": "class Animal:\n    def __init__(self, name, type):\n        self.name = name\n        self.type = type", "category": "Python"}, {"instruction": "Implement a neural network that classifies an MNIST digit into one of the 10 classes.", "input": "", "output": "import tensorflow as tf\n# Load the mnist data set\nmnist = tf.keras.datasets.mnist\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n# Normalize the input from 0-255 to 0-1\nx_train = tf.keras.utils.normalize(x_train, axis=1)\nx_test = tf.keras.utils.normalize(x_test, axis=1)\n# Build the model \nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Flatten())\n# Add two hidden layers\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))\n# Add the output layer\nmodel.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n# Train the model\nmodel.fit(x_train, y_train, epochs=3)\n# Evaluate the accuracy\nval_loss, val_acc = model.evaluate(x_test, y_test)\nprint(val_loss, val_acc)", "category": "Python"}, {"instruction": "Modify the Python code below to solve the following error: \"TypeError: 'str' object is not callable\".", "input": "\"\"\"\ndef greet(name):\n    print('Hello', name())\ngreet('John')\n\"\"\"", "output": "def greet(name):\n    print('Hello', name)\ngreet('John')", "category": "Python"}, {"instruction": "Create a recursive function in Python which returns the sum of the elements in a given list.", "input": "", "output": "def recursive_sum(arr):\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + recursive_sum(arr[1:])", "category": "Python"}, {"instruction": "Debug the given Python code and make sure that it runs without errors.", "input": "def add_two_numbers(a, b):\n  return a b", "output": "def add_two_numbers(a, b):\n  return a + b", "category": "Python"}, {"instruction": "Create a Python script that calculates the sum of two given numbers.", "input": "", "output": "def sum(x, y):\n  return x + y;", "category": "Python"}, {"instruction": "Create an algorithm in pseudocode to find the maximum value in an array.", "input": "", "output": "max = 0\n\nfor each element in array\n  if element > max \n    max = element\n\nreturn max", "category": "Python"}, {"instruction": "Create a function to capitalize the first letter in each word of the given string.", "input": "my_string = 'this is a test'", "output": "def capitalize_words(string):\n  words = string.split(' ')\n  capitalized_words = []\n  for word in words:\n    capitalized_word = word[0].upper() + word[1:]\n    capitalized_words.append(capitalized_word)\n  return ' '.join(capitalized_words)", "category": "Python"}, {"instruction": "Tell the difference between the two provided pieces of code.", "input": "def recursive(num):\n if num<=0:\n return 0\n else:\n return num + recursive(num-1)\n\ndef iterative(num):\n result = 0\n for i in range(1, num+1):\n result += i\n return result", "output": "The recursive code uses a recursive call to loop through each value from num to 0, while the iterative code uses a for-loop to add up from 1 to num.", "category": "Python"}, {"instruction": "Implement a sorting algorithm for the given list of numbers.", "input": "sort_me = [10, 4, 1, 5]", "output": "def sorting_algorithm(sort_me):\n    len_sortme = len(sort_me)\n    for i in range(len_sortme):\n        for j in range(0, len_sortme-i-1):\n            if sort_me[j] > sort_me[j+1]:\n                sort_me[j], sort_me[j+1] = sort_me[j+1], sort_me[j]\n    return sort_me", "category": "Python"}, {"instruction": "Develop a function that takes a dictionary and returns a list", "input": "{\"Name\": \"John\", \"Age\": 45}", "output": "def dict_to_list(d):\n    lst = []\n    for k, v in d.items():\n        lst.append((k, v))\n    return lst", "category": "Python"}, {"instruction": "Design a efficient algorithm to check if two tree structures are identical at the root node level.", "input": "", "output": "\"\"\"\nDesign a efficient algorithm to check if two tree structures are identical at the root node level.\n\nInput: Two root nodes (Node1, Node2)\n\nOutput: Boolean\n\n\"\"\"\n# This approach uses a breadth-first search\ndef is_identical(root1, root2):\n    if root1 is None and root2 is None:\n        return True\n    \n    # Check if the data of both nodes is the same\n    if root1 is not None and root2 is not None:\n        if root1.data != root2.data:\n            return False\n  \n        # If yes, then recursively traverse left and right sub-trees\n        return (is_identical(root1.left, root2.left) \n                and is_identical(root1.right, root2.right)) \n    \n    # If we reach here, then one node is NULL and other is not\n    return False", "category": "Python"}, {"instruction": "Determine the index of an element in a given array using binary search.", "input": "arr = [1, 2, 3, 4, 5, 6, 7]\nelement = 4", "output": "\"\"\"\nDetermine the index of an element in a given array using binary search.\n\nInput: arr (list)  element (int)\n\nOutput: index (int)\n\n\"\"\"\ndef binary_search(arr, element):\n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if element < arr[mid]:\n            end = mid - 1\n        elif element > arr[mid]:\n            start = mid + 1\n        else:\n            return mid\n    \n    return -1\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    element = 4\n    print(binary_search(arr, element)) \n    # Output: 3", "category": "Python"}, {"instruction": "Given the following code, write a function to calculate the length of the linked list.", "input": "\"\"\"\nclass Node:\n  def __init__(self, val, next=None):\n    self.val = val\n    self.next = next\n\nhead = Node(4, Node(3, Node(2, Node(1))))\n\"\"\"", "output": "\"\"\"\nGiven the following code, write a function to calculate the length of the linked list.\n\nInput: Head of the linked list (Node)\n\nOutput: Length of the linked list (int)\n\n\"\"\"\ndef get_length(head):\n    if head is None:\n        return 0\n    \n    length = 1\n    node = head\n    \n    while node.next is not None:\n        length += 1\n        node = node.next\n    \n    return length\n\nif __name__ == '__main__':\n    head = Node(4, Node(3, Node(2, Node(1))))\n    print(get_length(head)) \n    # Output: 4", "category": "Python"}, {"instruction": "Generate a random 16 character string.", "input": "", "output": "import random\nimport string\n\ndef generate_string():\n    chars = string.ascii_letters + string.digits \n    return ''.join(random.choice(chars) for _ in range(16))\n\nif __name__ == '__main__':\n    print(generate_string()) \n    # Output: 5A5l7p9XohHmFWhh", "category": "Python"}, {"instruction": "Design a function that counts the number of times a word occurs in a sentence.", "input": "sentence = \"The quick brown fox jumped over the lazy dog.\"", "output": "\"\"\"\nDesign a function that counts the number of times a word occurs in a sentence.\n\nInput: sentence (string)\n\nOutput: number of times word appears in the sentence (int)\n\n\"\"\"\ndef count_word(sentence, word):\n    return sentence.lower().split().count(word.lower())\n\nif __name__ == '__main__':\n    sentence = \"The quick brown fox jumped over the lazy dog.\"\n    print(count_word(sentence, \"The\"))\n    # Output: 1", "category": "Python"}, {"instruction": "How can you create a class in python?", "input": "", "output": "A class can be created in Python by using the keyword class followed by the name of the class. The class should include a constructor method __init__() that specifies the attributes and behaviors of the class and it should also end with a colon. Inside the class body, methods and attributes can be defined as required.", "category": "Python"}, {"instruction": "You are given a list of numbers, write a program to calculate the mode.", "input": "[1, 2, 3, 3, 4, 4, 5]", "output": "from collections import Counter\n\ndef find_mode(lst):\n    counter = Counter(lst)\n    mode_vals = [val for val, count in counter.items() if count == max(counter.values())]\n    return min(mode_vals)\n\nprint(find_mode([1, 2, 3, 3, 4, 4, 5]))", "category": "Python"}, {"instruction": "What is the use of tuple in python?", "input": "", "output": "Tuple is an immutable collection of objects in Python. It is sequence of values which are immutable, meaning that the values can't be modified. Tuple is useful in data integrity because it ensures that the values in the tuple will remain consistent when passed to a function or used in an expression. It is also used to store related data that must not be changed throughout a program. Some common operations on tuple include indexing, iteration, membership testing. Tuples are also useful in multiple function argument packing and unpacking. Tuples are also commonly used in dictionary as keys.", "category": "Python"}, {"instruction": "Write a Python function to input a number and print if it is positive, negative, or zero", "input": "", "output": "def check_sign(num):\n  if num > 0:\n    print(\"Positive\")\n  elif num < 0:\n    print(\"Negative\")\n  else:\n    print(\"Zero\")", "category": "Python"}, {"instruction": "Compare functions and classes in Python.", "input": "", "output": "Functions in Python are blocks of reusable code that are used to perform a single, specific action. Classes, on the other hand, are a way of grouping related data and functions together. Classes allow objects to be grouped and given common properties and behaviors.", "category": "Python"}, {"instruction": "Explain the uses of the `in` operator in Python.", "input": "", "output": "The in operator in Python is used to determine whether an item is present in a sequence. It checks for the presence of an item in lists, sets, tuples, dictionaries, and strings. It is also used to iterate over the items of a sequence in a for loop.", "category": "Python"}, {"instruction": "Create an algorithm to compute the sum of the digits of a given positive integer.", "input": "", "output": "\"\"\"\nCreate an algorithm to compute the sum of the digits of a given positive integer.\n\nInput: number (int)\n\nOutput: sum of the digits of the number (int)\n\n\"\"\"\ndef compute_sum(number):\n    if number < 0:\n        return 0\n    \n    # get the last digit\n    last_digit = number % 10\n    \n    # recursive call to get the sum of the remaining digits\n    remainder_sum = compute_sum(number // 10)\n    \n    return last_digit + remainder_sum\n\nif __name__ == '__main__':\n    number = 9876\n    print(compute_sum(number)) \n    # Output: 36", "category": "Python"}, {"instruction": "Generate a Python program that creates a list of numbers from 1 to 10.", "input": "", "output": "# Create a list of numbers from 1 to 10\nnumbers = list(range(1, 11))\nprint(numbers)", "category": "Python"}, {"instruction": "Write a function to sort a list of numbers using merge sort.", "input": "myList = [4, 8, 2, 3, 1]", "output": "def mergeSort(myList): \n    if len(myList) >1: \n        mid = len(myList)//2 #Finding the mid of the array \n        L = myList[:mid] # Dividing the array elements  \n        R = myList[mid:] # into 2 halves \n  \n        mergeSort(L) # Sorting the first half \n        mergeSort(R) # Sorting the second half \n  \n        i = j = k = 0\n          \n        # Copy data to temp arrays L[] and R[] \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                myList[k] = L[i] \n                i+= 1\n            else: \n                myList[k] = R[j] \n                j+= 1\n            k+= 1\n          \n        # Checking if any element was left \n        while i < len(L): \n            myList[k] = L[i] \n            i+= 1\n            k+= 1\n          \n        while j < len(R): \n            myList[k] = R[j] \n            j+= 1\n            k+= 1", "category": "Python"}, {"instruction": "Generate a random word from a given list of words", "input": "words = ['apple', 'banana', 'grape', 'orange']", "output": "import random\n\ndef get_random_word(words):\n    return random.choice(words)\n\nif __name__ == '__main__':\n    print(get_random_word(words))", "category": "Python"}, {"instruction": "Combine the following two lists into a dictionary in Python.", "input": "list1 = [\"a\", \"b\", \"c\"]\nlist2 = [1, 2, 3]", "output": "dict1 = {\n    \"a\": 1,\n    \"b\": 2,\n    \"c\": 3\n}", "category": "Python"}, {"instruction": "Create a recursive Python function to generate the Fibonacci series up to n-th terms.", "input": "", "output": "\"\"\"\nCreate a recursive Python function to generate the Fibonacci series up to n-th terms.\n\"\"\"\n\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nif __name__ == '__main__':\n    print(fibonacci(5))  # 5", "category": "Python"}, {"instruction": "Create a function that takes two numbers and returns their greatest common divisor in Python.", "input": "", "output": "\"\"\"\nCreate a function that takes two numbers and returns their greatest common divisor in Python.\n\"\"\"\n\ndef greatest_common_divisor(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a - b, b)\n    return greatest_common_divisor(a, b - a)\n\nif __name__ == '__main__':\n    print(greatest_common_divisor(20, 25))  # 5", "category": "Python"}, {"instruction": "Write an if-else condition to check for vowel or consonants in a character in Python.", "input": "", "output": "\"\"\"\nWrite an if-else condition to check for vowel or consonants in a character in Python.\n\"\"\"\n\ndef is_vowel_or_consonant(letter):\n    vowels = \"aeiouAEIOU\"\n    if letter in vowels:\n        return \"Vowel\"\n    else:\n        return \"Consonant\"\n\nif __name__ == '__main__':\n    print(is_vowel_or_consonant(\"a\"))  # Vowel", "category": "Python"}, {"instruction": "Write a Python program to select all rows from a table named 'products' that have a price less than 10", "input": "", "output": "SELECT * FROM products WHERE price < 10;", "category": "Python"}, {"instruction": "Write an algorithm to find the maximum depth of nested dictionary", "input": "dict = {\u2018a\u2019:{\u2018b\u2019:{\u2018c\u2019:1}}, \u2018d\u2019:2}", "output": "def findMaxDepth(dict_):\n   max_depth = 1\n   for val in dict_.values():\n      if isinstance(val, dict):\n         max_depth = max(max_depth, 1 + findMaxDepth(val))\n   return max_depth\n\nfindMaxDepth(dict) // 3", "category": "Python"}, {"instruction": "Convert a number in base 10 to binary", "input": "num = 5", "output": "def base10_to_binary(num):\n    binary_num = ''\n    while num > 0:\n        remainder = num % 2\n        binary_num = str(remainder) + binary_num\n        num = num // 2\n    return binary_num\n\nbase10_to_binary(5)  # '101'", "category": "Python"}, {"instruction": "Design an algorithm to search for the longest string in a list.", "input": "list = [\"apples\", \"bananas\", \"kiwis\"]", "output": "def find_longest_string(list):\n    # Set initial max_length to the length of the first item in list\n    max_length = len(list[0])\n    # Set initial max_string to the first string in the list\n    max_string = list[0]\n    # Loop through remaining strings in the list\n    for i in range(1, len(list)):\n        current_string = list[i]\n        current_length = len(current_string)\n        if current_length > max_length:\n            max_length = current_length\n            max_string = current_string\n    return max_string", "category": "Python"}, {"instruction": "Build an algorithm to compare two strings and report whether they are identical or not.", "input": "string1 = \"hello\";\nstring2 = \"world\";", "output": "function compareStrings(string1, string2) {\n    if (string1 === string2) {\n        return \"the strings are identical\"\n    } else {\n        return \"the strings are not identical\"\n    }\n}", "category": "Python"}, {"instruction": "Find all vowels in a sentence using Python.", "input": "sentence = \"This is a sample sentence.\"", "output": "vowels = []\nfor c in sentence:\n    if c in ('a', 'e', 'i', 'o', 'u'):\n        vowels.append(c)\n\nprint(vowels)", "category": "Python"}, {"instruction": "What is the correct code for looping through a list of elements in Python?", "input": "", "output": "for element in list:\n    print(element)", "category": "Python"}, {"instruction": "Develop a program to find all pairs in a list that sum up to a given number", "input": "[1, 2, 4, 5, 6, 7], 8", "output": "def pair_sum(arr, k): \n  \n    # Seen pairs \n    pairs = set() \n  \n    # Iterate through the array \n    for i in range(0, len(arr)): \n  \n        # Calculate the complement value \n        complement = k - arr[i] \n  \n        # Check if the complement exists in the array \n        if complement in arr[i + 1:]: \n  \n            # Add the pair to the seen pairs set \n            pairs.add((arr[i], complement)) \n  \n    return pairs \n\n# Driver code \narr = [1, 2, 4, 5, 6, 7] \nk = 8\n\npair_sums = pair_sum(arr, k) \nprint(pair_sums)", "category": "Python"}, {"instruction": "Develop an algorithm to find the maximum number of overlapping intervals.", "input": "[[2, 3], [1, 5], [7, 10]]", "output": "def maxOverlaps(intervals): \n    if len(intervals) == 0: \n        return 0\n  \n    # Sort intervals according to their starting time \n    intervals.sort(key = lambda x: x[0])\n  \n    # Creating an array that stores the number of \n    # overlapping intervals for each interval \n    result = [0] * len(intervals) \n  \n    # Initialising result[0] (as the first interval is always \n    # non-overlapping as it has no previous intervals) \n    result[0] = 1\n  \n    # Initializing the endpoint variable for comparison \n    endpoint = intervals[0][1] \n  \n    for i in range(1, len(intervals)): \n        # If the current interval's start time is less \n        # than or equal to the endpoint, it's overlapping \n        if intervals[i][0] <= endpoint: \n            # Store the maximum number of overlapping \n            # intervals \n            result[i] = result[i - 1] + 1\n        else: \n            result[i] = 1\n          \n        # Update the endpoint \n        endpoint = max(endpoint, intervals[i][1]) \n  \n    # Finding the maximum number of overlapping intervals \n    maximum_overlaps = max(result) \n  \n    return maximum_overlaps", "category": "Python"}, {"instruction": "Print all the odd numbers between a given range in Python.", "input": "start = 5 \nend = 20", "output": "start = 5\nend = 20\n\nfor num in range(start, end+1): \n    if num % 2 != 0: \n        print(num, end = ' ')\n\n# Outputs 5 7 9 11 13 15 17 19", "category": "Python"}, {"instruction": "Write a validation code to verify if a given string is an integer.", "input": "", "output": "def is_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False", "category": "Python"}, {"instruction": "Sort the given list of integers in descending order using the Bubble sort technique.", "input": "[3, 5, 2, 8, 9, 1]", "output": "def bubble_sort_descending(nums):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] < nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n\na = [3, 5, 2, 8, 9, 1]\na = bubble_sort_descending(a)\nprint(a) # prints [9, 8, 5, 3, 2, 1]", "category": "Python"}, {"instruction": "Create an iterator in Python that yields only even numbers.", "input": "", "output": "def even_numbers():\n    i = 0\n    while True:\n        if i % 2 == 0:\n            yield i\n        i += 1", "category": "Python"}, {"instruction": "Suggest a code snippet to shuffle a list of numbers.", "input": "[1, 2, 3, 4, 5]", "output": "import random\n\nnumbers = [1, 2, 3, 4, 5]\nrandom.shuffle(numbers)\nprint(numbers)", "category": "Python"}, {"instruction": "Create a Python function to generate all prime numbers less than a given number.", "input": "", "output": "def generate_prime_numbers(n): \n    primes = [] \n    for num in range(2, n + 1): \n        is_prime = True\n        for i in range(2, num): \n            if (num % i == 0): \n                is_prime = False\n        if is_prime: \n            primes.append(num) \n    return primes", "category": "Python"}, {"instruction": "Change the given Python script to not assign any variables", "input": "x = 10\ny = \"Some Text\"", "output": "# no variables are assigned", "category": "Python"}, {"instruction": "Unpack a given list of tuples", "input": "tuples = [('John', 23), ('Adam', 45)]", "output": "def unpack_tuples(tuples):\n    names, ages = zip(*tuples)\n    return list(names), list(ages)\n\nif __name__ == '__main__':\n    names, ages = unpack_tuples(tuples)\n    print(names)\n    print(ages)", "category": "Python"}, {"instruction": "Print the letter frequency of a given string", "input": "string = \"Hello World\"", "output": "from collections import Counter\n\ndef get_letter_frequency(string):\n    counter = Counter(string)\n    for key, value in counter.items():\n        print(f'{key}: {value}')\n\nif __name__ == '__main__':\n    get_letter_frequency(string)", "category": "Python"}, {"instruction": "Design a class for representing a triangle with its 3 sides", "input": "", "output": "class Triangle:\n    def __init__(self, side1, side2, side3):\n        self.side1 = side1\n        self.side2 = side2\n        self.side3 = side3\n\n    def area(self):\n        semi = (self.side1 + self.side2 + self.side3) / 2.0\n        return (semi*(semi-self.side1)*(semi-self.side2)*(semi-self.side3)) ** 0.5", "category": "Python"}, {"instruction": "Where does a Python interpreter look for modules?", "input": "", "output": "The Python interpreter looks for modules in the following locations: the home directory, the built-in modules, the PYTHONPATH environment variable, and the standard Python library path.", "category": "Python"}, {"instruction": "Make a program to find the sum of each row in a two-dimensional array.", "input": "[[1,2,3], [2,3,4]]", "output": "def row_sum(arr):\n    total_sum = 0\n    for row in arr:\n        total_sum += sum(row)\n    return total_sum", "category": "Python"}, {"instruction": "Modify the following Python code to make it run faster", "input": "def roll_dice(n):\n    values = []\n    for i in range(n):\n        values.append(random.randint(1,6))\n    return values", "output": "import random\n    \ndef roll_dice(n):\n    values = []\n    random.seed() \n    for i in range(n):\n        values.append(random.randint(1,6))\n    return values", "category": "Python"}, {"instruction": "Create a function that takes two arrays and returns the elements that are present in both of them.", "input": "Input array 1: [1, 2, 3, 4, 5]\nInput array 2: [3, 4, 5, 6, 7]", "output": "def find_common_elements(arr1, arr2):\n    common_elements = []\n    for element1 in arr1:\n        if element1 in arr2:\n            common_elements.append(element1)\n    return common_elements\n\nprint(find_common_elements([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]))\n\n# Output: [3, 4, 5]", "category": "Python"}, {"instruction": "Write a method to take two strings as the inputs and check if the second string is a substring of the first one or not.", "input": "String1: hello world\nString2: world", "output": "def is_substring(string1, string2):\n    if string2 in string1: \n        return True\n    else:\n        return False\n\nstring1 = 'hello world'\nstring2 = 'world'\n\nis_substring(string1, string2) # will return True", "category": "Python"}, {"instruction": "What is a use case for inheritance in object-oriented programming?", "input": "", "output": "In object-oriented programming, inheritance is used to create and maintain a hierarchical relationship between classes. By inheriting properties and methods from a parent class, a child class can reuse and extend the functionalities of the parent class. This allows developers to write less code and keep their codebase organized by logically grouping similar classes into a hierarchy, which can then be further extended with new features.", "category": "Python"}, {"instruction": "Create a Python function that will take two lists as inputs, and return a list that contains all the common items between the lists.", "input": "list1 = [1,2, 3, 4, 5]\nlist2 = [2,4,6,8]", "output": "def common_elements(list1, list2):\n    return [item for item in list1 if item in list2] \n\nlist1 = [1,2, 3, 4, 5]\nlist2 = [2,4,6,8]\n\ncommon_items_list = common_elements(list1, list2)\nprint(common_items_list)", "category": "Python"}, {"instruction": "What is an example of a one-to-one mapping?", "input": "", "output": "An example of a one-to-one mapping is a function, which pairs each element in one set to a unique element in another set, such that each element in the first set is paired with exactly one element in the second set. For example, the following function is one-to-one: f(x) = x + 1. This function maps each number x to a unique number x + 1.", "category": "Python"}, {"instruction": "Write a code to print the words \"Hello world!\" n times if n is given as an input.", "input": "", "output": "def hello(n):\n    if n > 0:\n        for x in range(n):\n            print(\"Hello world!\")\n    else:\n        print(\"Input should be a number greater than 0\")\n\nhello(5)", "category": "Python"}, {"instruction": "Create a class in Python to represent a book with the title, author and year of publication as attributes.", "input": "", "output": "class Book:\n    def __init__(self, title, author, year):\n        self.title = title\n        self.author = author\n        self.year = year", "category": "Python"}, {"instruction": "Write a Python function to normalize a given list of numbers so that they sum up to 1.", "input": "arr = [2, 4, 6, 8]", "output": "def normalize(arr):\n    # calculate the sum of the given numbers\n    total = sum(arr)\n\n    # normalize each number in the array\n    normalized_arr = [number / total for number in arr]\n    \n    return normalized_arr\n\n# print the normalized array\nprint(normalize(arr)) # prints [0.1, 0.2, 0.3, 0.4]", "category": "Python"}, {"instruction": "Create an array of 100 elements filled with random numbers from 1 to 100.", "input": "", "output": "import random\n\n# Create an array of 100 elements with 0 values\nrandom_num_arr = [0] * 100\n\n# Fill each of the 100 elements with random numbers from 1 to 100\nfor i in range(100):\n    random_num_arr[i] = random.randint(1, 100)\n\nprint(random_num_arr)", "category": "Python"}, {"instruction": "Create a line chart from given data on the number of car sales in the UK from 2008 to 2019.", "input": "year = ['2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019']\nnumber_of_sales = [1.8, 2.1, 2.5, 2.6, 2.8, 3.0, 3.2, 3.5, 3.7, 3.8, 4.0, 4.2]", "output": "import matplotlib.pyplot as plt\n\n# Make a data frame from the given data\ndf = pd.DataFrame({'year': year, 'number_of_sales': number_of_sales})\n\n# Plot a line chart\nplt.plot(df['year'], df['number_of_sales'], linewidth=3)\nplt.title(\"Car Sales in the UK from 2008 to 2019\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"Number of sales\")\n\n# Show the plot\nplt.show()", "category": "Python"}, {"instruction": "What kind of sorting algorithm is Insertion Sort?", "input": "", "output": "Insertion sort is a comparison-based sorting algorithm in which the elements are compared and arranged in a particular order. In this algorithm, a sublist is created which is sorted and at each iteration it is compared with the elements of the original list and placed in the correct position. It is an in-place sorting algorithm, meaning it doesn\u2019t require any additional data structures for sorting.", "category": "Python"}, {"instruction": "Identify the largest element of an array with python.", "input": "[9, 4, 2, 8, 7]", "output": "def find_largest_num(a): \n  if len(a) == 0: \n    return\n  max = a[0] \n  for num in a: \n    if num > max: \n      max = num \n  return max", "category": "Python"}, {"instruction": "Create a Python class called Dog that contains the following attributes: breed, name, and age.", "input": "", "output": "class Dog:\n    def __init__(self, breed, name, age):\n        self.breed = breed\n        self.name = name\n        self.age = age", "category": "Python"}, {"instruction": "Given a sorted list of integers, write a Python function to search for a specific target element.", "input": "", "output": "def binary_search(list, target):\n low = 0\n high = len(list) - 1\n\n while low <= high:\n  mid = (low + high) // 2\n  if list[mid] < target:\n   low = mid + 1\n  elif list[mid] > target:\n   high = mid - 1\n  else:\n   return mid\n return False", "category": "Python"}, {"instruction": "Retrieve the public IP address of your machine using Python.", "input": "", "output": "import requests\n\ndef get_public_ip():\n response = requests.get('https://api.ipify.org')\n return response.text", "category": "Python"}, {"instruction": "Construct a for loop to print out numbers ranging from 1 to 10, skipping even numbers.", "input": "", "output": "for i in range(1,11):\n if i % 2 != 0:\n print(i)", "category": "Python"}, {"instruction": "Create a class in Python called 'Rectangle' to store the coordinates of a rectangle.", "input": "", "output": "class Rectangle: \n    def __init__(self, x1, y1, x2, y2): \n        self.x1 = x1\n        self.y1 = y1\n        self.x2 = x2\n        self.y2 = y2\n  \n    def get_coordinates(self): \n        return (self.x1, self.y1, self.x2, self.y2)", "category": "Python"}, {"instruction": "Construct a function to set up a dictionary with words and corresponding counts of occurrences of each word.", "input": "`<code>'hey hey hello hello hell oh hello',</code>`", "output": "\"\"\"\nConstruct a function to set up a dictionary with words and corresponding counts of occurrences of each word\n\"\"\"\ndef word_count(string):\n    word_dict = {}\n    for word in string.split():\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n\n    return word_dict\n\nif __name__ == '__main__':\n    print(word_count('hey hey hello hello hell oh hello'))", "category": "Python"}, {"instruction": "Construct a program to print the Pyramid pattern using asterisks.", "input": "", "output": "\"\"\"\nConstruct a program to print the Pyramid pattern using asterisks\n\"\"\"\nfor i in range(0, 5):\n    for j in range(0, i+1):\n        print(\"*\", end=\"\")\n    print()", "category": "Python"}, {"instruction": "Construct an algorithm to find the longest common prefix string amongst an array of strings.", "input": "`<code>['leet', 'leets', 'lee', 'leeston', 'leeve']</code>`", "output": "\"\"\"\nConstruct an algorithm to find the longest common prefix string amongst an array of strings\n\"\"\"\ndef longest_common_prefix(strs):\n    prefix = strs[0]\n    i = 0\n    while i < len(prefix):\n        for string in strs:\n            if i >= len(string) or string[i] != prefix[i]:\n                return prefix[0:i]\n        i += 1\n    return prefix\n\nif __name__ == '__main__':\n    print(longest_common_prefix(['leet', 'leets', 'lee', 'leeston', 'leeve']))", "category": "Python"}, {"instruction": "Create an algorithm to search for a substring in a given string.", "input": "`<code>'Hello World!', substring = 'll'</code>`", "output": "\"\"\"\nCreate an algorithm to search for a substring in a given string\n\"\"\"\ndef search(string, substring):\n    for i in range(len(string)):\n        if string[i: i + len(substring)] == substring:\n            return True\n    return False\n\nif __name__ == '__main__':\n    print(search('Hello World!', 'll'))", "category": "Python"}, {"instruction": "Construct a dialogue bot using natural language processing techniques.", "input": "`<code>Hello!</code>`", "output": "\"\"\"\nConstruct a dialogue bot using natural language processing techniques\n\"\"\"\nimport nltk\n\n# Define a simple set of rules to respond to the user's input\ndef respond(input):\n\tif input == \"hello\" or input == \"hi\":\n\t\treturn(\"Hello. How can I help you today?\")\n\telif input == \"goodbye\":\n\t\treturn(\"Goodbye! Have a nice day.\")\n\telse:\n\t\treturn(\"I'm sorry, I don't understand what you said.\")\n\n# Tokenize the input string and call the respond function\ndef chatbot(input_string):\n\ttokens = nltk.word_tokenize(input_string)\n\tresponse = respond(' '.join(tokens))\n\treturn response\n\nif __name__ == '__main__':\n\tprint(chatbot(\"Hello!\"))", "category": "Python"}, {"instruction": "Create a copy of the given code without using the copy.deepcopy()", "input": "import copy\n\nlist1 = [[1, 2], [3, 4]]\nlist2 = copy.deepcopy(list1)", "output": "list2 = []\nfor i in range(len(list1)):\n    list2.append(list1[i].copy())", "category": "Python"}, {"instruction": "Create a recursive function that returns the Fibonacci number corresponding to a given input.", "input": "", "output": "def Fibonacci(n): \n    if n <= 1: \n        return n \n    else: \n        return(Fibonacci(n-1) + Fibonacci(n-2)) \n  \n# Driver Code \nnterms = 10\n  \n# check if the number of terms is valid \nif nterms <= 0: \n    print(\"Plese enter a positive integer\") \nelse: \n    print(\"Fibonacci sequence:\") \n    for i in range(nterms): \n        print(Fibonacci(i))", "category": "Python"}, {"instruction": "Create a Python code snippet to create a line chart with three different categories.", "input": "category1 = [1,2,3,4]\ncategory2 = [4,5,6,7]\ncategory3 = [7,8,9,10]", "output": "import matplotlib.pyplot as plt\n\n# Data to plot\ncategory1 = [1,2,3,4]\ncategory2 = [4,5,6,7]\ncategory3 = [7,8,9,10]\n\n# Create the line plot\nplt.plot(category1, label='Category 1')\nplt.plot(category2, label='Category 2')\nplt.plot(category3, label='Category 3')\n\n# change font type and size\nplt.rc('font', size=16)\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()", "category": "Python"}, {"instruction": "Create a Python program to sort a dictionary by value.", "input": "my_dict = {\u201cOne\u201d:1, \u201cTwo\u201d:2, \u201cThree\u201d:3}", "output": "my_dict = {'One': 1, 'Two': 2, 'Three': 3}\n\n#sort dictionary by value\nsorted_dict = sorted(my_dict.items(), key=lambda kv: kv[1])\n\nprint(sorted_dict)", "category": "Python"}, {"instruction": "Debug this code snippet to print a list of all 6-digit numbers.", "input": "", "output": "def printList(): \n    i = 11\n    while(i <= 99999): \n        if (i >= 10000 and i <= 99999): \n            print(i) \n        i = i + 1\n\n# Call the function \nprintList()", "category": "Python"}, {"instruction": "Compute the occurrence of each character in a given string.", "input": "my_string = \"Hello World!\"", "output": "def compute_occurrences(my_string):\n    count_dict = {}\n    for c in my_string:\n        count_dict[c] = count_dict.get(c, 0) +1\n    return count_dict\n\n# test\nmy_string = \"Hello World!\"\nprint(compute_occurrences(my_string)) # {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}", "category": "Python"}, {"instruction": "Generate a linear regression model with a categorical independent variable.", "input": "", "output": "from sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import OneHotEncoder\n\nX = df[[\"categorical_var\"]]\ny = df[\"target\"]\n\nencoder = OneHotEncoder()\nencoded_X = encoder.fit_transform(X)\n\nmodel = LogisticRegression(solver=\"lbfgs\")\nmodel.fit(encoded_X, y)", "category": "Python"}, {"instruction": "Write a function in Python to select all the elements from a list whose index is a multiple of 3.", "input": "test_list = [2, 5, 8, 12, 9, 82, 3]", "output": "def select_multiples_of_3(input_list):\n    result = []\n    for index, num in enumerate(input_list):\n        if index % 3 == 0:\n            result.append(num)\n    return result\n\n# test\ntest_list = [2, 5, 8, 12, 9, 82, 3]\nprint(select_multiples_of_3(test_list)) # [2, 12, 3]", "category": "Python"}, {"instruction": "Create a Python code to reverse the given string.", "input": "", "output": "def reverse_string(string):\n return string[::-1]", "category": "Python"}, {"instruction": "Create a Python script to separate a given string into words and count the number of times the each word is used in the string.", "input": "", "output": "def count_words(string):\n counts = {}\n words = string.split()\n for word in words:\n if word in counts:\n counts[word] += 1\n else:\n counts[word] = 1\n return counts", "category": "Python"}, {"instruction": "Create a Python function to generate the first n prime numers.", "input": "", "output": "def generate_prime_numbers(n):\n prime_nums = []\n i = 2\n while len(prime_nums) < n:\n if is_prime(i):\n prime_nums.append(i)\n i += 1\n return prime_nums\n\ndef is_prime(n):\n if n <= 1:\n return False\n for i in range(2, int(n**0.5) + 1):\n if n % i == 0:\n return False\n return True", "category": "Python"}, {"instruction": "Write a Python function to compare two strings and return all the common elements.", "input": "s1='python'\ns2='programming'", "output": "def find_common_elements(s1, s2):\n res = []\n for i in s1:\n if i in s2:\n res.append(i)\n return res\n\nfind_common_elements(s1,s2)\n#Output: ['n']", "category": "Python"}, {"instruction": "Sort a given array using quicksort algorithm.", "input": "arr = [3, 2, 9, 10, 1]", "output": "def quicksort(arr):\n  if len(arr) <= 1:\n    return arr\n  \n  pivot = arr[len(arr) // 2]\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\nprint(quicksort(arr))", "category": "Python"}, {"instruction": "Given an integer array, output the largest sum of all the possible subarray sums, use Python for the solution.", "input": "Example array: [-2,1,-3,4,-1,2,1,-5,4]", "output": "def largest_sum(arr):\n    cur_sum = 0\n    max_sum = float(\"-inf\")\n    for i in range(len(arr)):\n        cur_sum = max(arr[i], cur_sum + arr[i])\n        max_sum = max(max_sum, cur_sum)\n    return max_sum", "category": "Python"}, {"instruction": "Now write a function to generate all the factorial numbers from 1 to n.", "input": "", "output": "def generate_factorials(n):\n    factorials = [1]\n    for num in range(1,n+1):\n        if num == 1:\n            factorials.append(1)\n        else:\n            factorials.append(factorials[-1]*num)\n    return factorials", "category": "Python"}, {"instruction": "Write a function that given a string of character, returns the number of vowels in it.", "input": "Example string: \"hello world\"", "output": "def count_vowels(s): \n    vowels = 'aeiou'\n    count = 0\n    for char in s: \n        if char in vowels: \n            count += 1\n    return count", "category": "Python"}, {"instruction": "Write a for loop to output all the odd numbers from 1 to 10 in Python.", "input": "", "output": "for i in range(1,11):\n   if (i % 2 != 0):\n       print(i)", "category": "Python"}, {"instruction": "Extract all values from the following dictionary:", "input": "{'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9] }", "output": "myDict = {'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]}\nvalues = [val for vals in myDict.values() for val in vals]\nprint(values)", "category": "Python"}, {"instruction": "Reorder a given array such that all even elements are placed before odd elements.", "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8]", "output": "def reorder_array(arr):\n    \"\"\"Reorders a given array such that all even elements are placed before odd elements.\"\"\"\n    even = [i for i in arr if i % 2 == 0]\n    odd = [j for j in arr if j % 2 != 0]\n\n    return even + odd\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    ordered = reorder_array(arr)\n    print(ordered)", "category": "Python"}, {"instruction": "How many unique elements are present in the given array?", "input": "arr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]", "output": "def count_unique_elements(arr):\n    \"\"\"Returns the number of unique elements present in the given array.\"\"\"\n    unique_elements = set(arr)\n    return len(unique_elements)\n\nif __name__ == '__main__':\n    arr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n    count = count_unique_elements(arr)\n    print('Number of unique elements:', count)", "category": "Python"}, {"instruction": "Create code to extract the middle character of a given string.", "input": "string = \"middle\"", "output": "def get_middle_char(string):\n    \"\"\"Returns the middle character of a given string.\"\"\"\n    middle_index = int(len(string) / 2)\n    return string[middle_index]\n\nif __name__ == '__main__':\n    string = \"middle\"\n    print(get_middle_char(string))", "category": "Python"}, {"instruction": "Are there any palindromes in the given sequence of numbers?", "input": "seq = [2332, 24124, 1221, 89898]", "output": "def has_palindrome(seq):\n    \"\"\"Returns True if the given sequence has a palindrome, otherwise returns False\"\"\"\n    for num in seq:\n        if str(num) == str(num)[::-1]:\n            return True\n    return False\n\nif __name__ == '__main__':\n    seq = [2332, 24124, 1221, 89898]\n    print(has_palindrome(seq))", "category": "Python"}, {"instruction": "Assume that we have an array of integers. Create code to input the array and output the sum of all the elements of the array.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def calculate_sum(arr):\n    \"\"\"Calculates sum of all elements in the given array\"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    print(calculate_sum(arr))", "category": "Python"}, {"instruction": "How can we convert strings to float in Python?", "input": "", "output": "We can convert strings to float in Python by using the float() function. This takes a string argument and returns a floating-point number. For example, float(\"10.5\") would return 10.5 as a float.", "category": "Python"}, {"instruction": "Create a variable in Python and assign it the value 15.", "input": "", "output": "num = 15", "category": "Python"}, {"instruction": "Write a Python code snippet to iterate over a list of strings and print the length of each string.", "input": "List: [\"Hello\", \"World\", \"!\"]", "output": "for string in list:\n    print(len(string))\n    \n# Output: 5, 5, 1", "category": "Python"}, {"instruction": "List 5 elements of the Python standard library.", "input": "", "output": "sys, os, logging, string, collections", "category": "Python"}, {"instruction": "Write a Python script to validate the following input", "input": "Validate a Date type field with the following format: YYYY/MM/DD", "output": "# Import the required datetime module\nimport datetime\n\ndef validate_date(date):\n    # Check if the date matches with the given format\n    try:\n       datetime.datetime.strptime(date, '%Y/%m/%d')\n       return True\n    except ValueError:\n        return False", "category": "Python"}, {"instruction": "write a piece of code to print out the first n Fibonacci numbers in Python.", "input": "n = 8", "output": "def Fibonacci(n): \n    fibList = [0, 1] \n    \n    if n <= 0: \n        print(\"Incorrect input\") \n    elif n == 1: \n        print(fibList[0]) \n    elif n == 2: \n        print(fibList) \n    else: \n        temp = fibList[0] + fibList[1] \n        while len(fibList) < n: \n            fibList.append(temp) \n            temp = fibList[len(fibList)-1] +   fibList[len(fibList)-2] \n      \n    return fibList \n  \n\nprint(Fibonacci(8))", "category": "Python"}, {"instruction": "Develop a python program to sort a list of strings alphabetically from a-z.", "input": "list1 = [\"cat\", \"apple\", \"banana\", \"dog\"]", "output": "def sort_alphabetically(list1):\n    list1.sort()\n    return list1\n\nprint(sort_alphabetically(list1))", "category": "Python"}, {"instruction": "code a Python script that converts temperatures in celsius to fahrenheit.", "input": "", "output": "def celsius_to_fahrenheit(celsius):\n    return (celsius * 9/5) + 32", "category": "Python"}, {"instruction": "Write a Python function to print out the squares of the numbers between 1 and 10.", "input": "", "output": "def print_squares():\n    for i in range(1, 11):\n        print(i**2)", "category": "Python"}, {"instruction": "Given a String and a list of words, write a Python program to determine if the String is a sequence of any of the words in the list.", "input": "string = \"thequickbrownfox\" \nwords_list = [\"the\", \"quick\", \"brown\", \"fox\"]", "output": "def is_valid_sequence(string, words_list):\n    str_index = 0\n    for word in words_list:\n        if len(string[str_index:]) < len(word):\n            return False\n        if string[str_index:str_index+len(word)] != word:\n            return False\n        str_index += len(word)\n    return True", "category": "Python"}, {"instruction": "Given a list of numbers, write a function to determine if the list is an arithmetic sequence.", "input": "nums = [2, 4, 6, 8, 10]", "output": "def is_arithmetic_sequence(nums):\n    difference = nums[1] - nums[0]\n\n    for i in range(len(nums)-1):\n        if nums[i+1] - nums[i] != difference:\n            return False\n    return True", "category": "Python"}, {"instruction": "Develop a machine learning system to detect fraud.", "input": "", "output": "The machine learning system should use supervised learning techniques to learn from labeled data. It should identify trends, anomalies and irregularities by leveraging statistical techniques such as clustering and classification, feature engineering, and outlier detection. The system should utilize data from sources such as transaction data, customer behavior data and external risk information sources such as IP addresses, device information and anomaly detection.", "category": "Python"}, {"instruction": "Generate a random 10 character alphanumeric string in Python.", "input": "", "output": "import random\nimport string\n\ndef generate_random_string():\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=10))", "category": "Python"}, {"instruction": "Create a Python class that accepts a name and an age to create a person instance.", "input": "", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def __str__(self):\n        return f'Name: {self.name}, Age: {self.age}'", "category": "Python"}, {"instruction": "Using a for loop, print all the odd numbers between 1 and 20 (inclusive).", "input": "", "output": "for i in range(1, 21):\n    if i % 2 != 0:\n        print(i)", "category": "Python"}, {"instruction": "Compare two Python objects to check if they have the same values.", "input": "obj1 = {'a':1,'b':2}\nobj2 = {'b':2, 'a':1}", "output": "def compareObjects(obj1, obj2):\n    '''\n    Checks if two Python objects have the same value\n    '''\n    if obj1 == obj2:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Implement a heuristic algorithm in Python to find an approximate solution to the traveling salesman problem.", "input": "", "output": "def traveling_salesman_heuristic(distance_matrix):\n    # Create a list of cities\n    num_cities = len(distance_matrix)\n    cities = range(num_cities)\n    \n    # Create a list of visited cities and an empty list for the route\n    visited = [False for _ in range(num_cities)]\n    route = []\n    \n    # Start from the first city\n    current_city = 0\n    visited[current_city] = True\n    route.append(current_city)\n \n    # Find the total distance of the route so far\n    total_distance = 0\n    \n    # Keep looping until all cities are visited\n    while False in visited:\n        # Find the nearest unvisited city\n        best_city = 0\n        best_distance = float('inf')\n        for i in range(1, num_cities):\n            if not visited[i] and distance_matrix[current_city][i] < best_distance:\n                best_city = i\n                best_distance = distance_matrix[current_city][i]\n                \n        # Mark the best city as visited\n        visited[best_city] = True\n        \n        # Add the best city to the route\n        route.append(best_city)\n        \n        # Accumulate the total distance\n        total_distance += best_distance\n        \n        # Change the current city to the best city\n        current_city = best_city\n        \n    # Add the distance from the last city to the first\n    total_distance += distance_matrix[route[-1]][route[0]]\n    \n    return route, total_distance", "category": "Python"}, {"instruction": "Given a list of numbers, write a program to check if there exists a triplet in the list whose sum is equal to the given number.", "input": "nums = [2, 7, 11, 15], target = 24", "output": "def triplet_sum(nums, target):\n for i in range(len(nums) - 2):\n  for j in range(i+1, len(nums) - 1):\n   for k in range(j+1, len(nums)):\n    if nums[i] + nums[j] + nums[k] == target:\n     return True\n return False\n \nprint(triplet_sum(nums, target))", "category": "Python"}, {"instruction": "Create a Python class for a thread-safe queue.", "input": "", "output": "import threading\n\nclass ThreadSafeQueue():\n    def __init__(self):\n        self.queue = []\n        self.lock = threading.Lock()\n\n    def push(self, item):\n        with self.lock:\n            self.queue.append(item)\n\n    def pop(self):\n        with self.lock:\n            item = self.queue.pop(0)\n        return item", "category": "Python"}, {"instruction": "Given a matrix, write a program to traverse it spirally.", "input": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def spiral_traverse(arr):\n res = []\n top_row, bottom_row = 0, len(arr) - 1\n left_col, right_col = 0, len(arr[0]) - 1\n \n while top_row <= bottom_row and left_col <= right_col:\n  for i in range(left_col, right_col + 1):\n   res.append(arr[top_row][i])\n  top_row += 1\n \n  for i in range(top_row, bottom_row + 1):\n   res.append(arr[i][right_col])\n  right_col -= 1\n \n  for i in range(right_col, left_col - 1, -1):\n   res.append(arr[bottom_row][i])\n  bottom_row -= 1\n \n  for i in range(bottom_row, top_row - 1, -1):\n   res.append(arr[i][left_col])\n  left_col += 1\n \n return res\n\nprint(spiral_traverse(matrix))", "category": "Python"}, {"instruction": "Create a Python function to generate a Fibonacci sequence of a given length.", "input": "", "output": "def generate_fibonacci(length): \n    result = [0, 1] \n    for i in range(2,length): \n        result.append(result[i-2] + result[i-1]) \n    return result", "category": "Python"}, {"instruction": "Write a pseudocode for the Depth-First Search algorithm", "input": "", "output": "// Define a function DFS(vertex):\nDFS(vertex):\n  // Mark the current node as Visited\n  Mark the current node as Visited\n  \n  // Loop through the adjacent nodes\n  for each adjacent node of vertex:\n    // If the adjacent node has not been visited\n    if the adjacent node has not been visited:\n      // Call DFS on the adjacent node\n      call DFS(adjacent node)\n\n// Call the DFS function on the root node\ncall DFS(root node)", "category": "Python"}, {"instruction": "Edit the given Python program to print the sum of two given numbers", "input": "firstNumber = 5\nsecondNumber = 10\n\nprint(\"The difference is: \", firstNumber - secondNumber)", "output": "firstNumber = 5\nsecondNumber = 10\n\nprint(\"The sum is: \", firstNumber + secondNumber)", "category": "Python"}, {"instruction": "Generate a valid Python expression that multiplies the given numbers.", "input": "3 and 4", "output": "3 * 4", "category": "Python"}, {"instruction": "Write an algorithm for sorting an array in ascending order using the Bubble Sort technique.", "input": "[3, 7, 4, 1, 9]", "output": "// Start loop\nfor i in range(length of array):\n\n  // Start inner loop\n  for j in range(i+1, length of array):\n\n    // Compare elements and swap if needed\n    if array[i] > array[j]:\n      temp = array[i]\n      array[i] = array[j]\n      array[j] = temp\n\n  // End inner loop\n\n// End loop\n\n// Result: array is now sorted in ascending order [1, 3, 4, 7, 9]", "category": "Python"}, {"instruction": "In Python, create a function that takes 2 integers and returns the maximum number.", "input": "", "output": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b", "category": "Python"}, {"instruction": "Create a single line program in Python to check if a number is divisible by 5.", "input": "", "output": "print(lambda x: x%5 == 0, \"is divisible by 5.\")", "category": "Python"}, {"instruction": "Write a Python program to print a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys.", "input": "", "output": "dct = {}\nfor i in range(1, 16):\n dct[i] = i**2\n\nprint(dct)", "category": "Python"}, {"instruction": "Given a matrix of m*n size, write a program to find the largest number in the matrix.", "input": "matrix = \n[[1, 2, 3], \n [4, 5, 6], \n [7, 8, 9]]", "output": "def largest_number_in_matrix(matrix): \n largest = -1\n for row in matrix: \n for ele in row: \n largest = max(largest, ele) \n return largest \n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]  \nprint(largest_number_in_matrix(matrix)) # 9", "category": "Python"}, {"instruction": "Write a function that takes a number x and multiplies it by itself n amount of times using recursion.", "input": "x = 4\nn = 3", "output": "def recursive_multiply(x, n):\n\t# Base case\n    if n == 0:\n        return 1\n    return x * recursive_multiply(x, n - 1)\n\n# Example\nx = 4\nn = 3\nprint(recursive_multiply(x, n))\n# Output: 64", "category": "Python"}, {"instruction": "Write a function to detect the smallest window in a string containing all characters of another string.", "input": "string1 = \"abcde\", string2 = \"ade\"", "output": "def smallest_window(str1, str2):\n min_str = \"\"\n min_size = float(\"inf\")\n \n for i in range(len(str1)):\n  for j in range(i+1, len(str1)):\n   curr_str = str1[i:j+1]\n   count = 0\n   for ch in str2:\n    if ch in curr_str:\n     count += 1\n   if len(curr_str) < min_size and count == len(str2):\n    min_str = curr_str\n    min_size = len(curr_str)\n return min_str\n \nprint(smallest_window(\"abcde\", \"ade\"))", "category": "Python"}, {"instruction": "Given a list of numbers, find the lowest and highest numbers in the list.", "input": "numbers = [5, 8, 2, 9, 4, 7]", "output": "def find_min_max(numbers):\n    lowest = numbers[0]\n    highest = numbers[0]\n    for num in numbers:\n        if num < lowest:\n            lowest = num\n        if num > highest:\n            highest = num\n    return (lowest, highest)", "category": "Python"}, {"instruction": "Write a function to find the median of 3 numbers.", "input": "", "output": "def median_of_three(x, y, z):\n    if x>= y:\n        if y>=z:\n            return y\n        elif x>=z:\n            return z\n        else:\n            return x\n    else:\n        if x>=z:\n            return x\n        elif y>=z:\n            return z\n        else:\n            return y", "category": "Python"}, {"instruction": "Given a 2D array, print out all the elements in a spiral order.", "input": "[\n    [1,  2,  3,  4,  5],\n    [6,  7,  8,  9,  10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n]", "output": "def print_in_spiral_order(arr):\n    row_start = 0\n    row_stop = len(arr) - 1\n    col_start = 0 \n    col_stop = len(arr[0]) - 1\n    while row_start <= row_stop and col_start <= col_stop:\n        for i in range(col_start, col_stop + 1):\n            print(arr[row_start][i], end=' ')\n        row_start += 1\n        for i in range(row_start, row_stop + 1):\n            print(arr[i][col_stop], end=' ')\n        col_stop -= 1\n        if row_start <= row_stop:\n            for i in range(col_stop, col_start - 1, -1):\n                print(arr[row_stop][i], end=' ')\n        row_stop -= 1\n        if col_start <= col_stop:\n            for i in range(row_stop, row_start - 1, -1):\n                print(arr[i][col_start], end=' ')\n        col_start += 1", "category": "Python"}, {"instruction": "Develop an algorithm in Python to reverse a given string.", "input": "string = \"Hello\"", "output": "def reverse(string):\n    str = \"\" \n    for i in string: \n        str = i + str \n    return str\n  \nstring = \"Hello\"\n\nprint(reverse(string))", "category": "Python"}, {"instruction": "Compute the GCD of two numbers in Python.", "input": "a = 10, b = 15", "output": "def gcd(a,b): \n    if(b==0): \n        return a \n    else: \n        return gcd(b,a%b) \na = 10\nb = 15\ngcd = gcd(a,b) \nprint(gcd)", "category": "Python"}, {"instruction": "Create a list comprehension in Python to extract all the even numbers from a given list.", "input": "list = [3,4,5,6,7,8]", "output": "evens_list = [num for num in list if num % 2 == 0]", "category": "Python"}, {"instruction": "How would you search for an element in an array using a linear search algorithm in Python?", "input": "", "output": "def linearSearch(arr, x): \n \n    for i in range(len(arr)): \n  \n        if arr[i] == x: \n            return i \n \n    return -1", "category": "Python"}, {"instruction": "How would you write a function in Python for generating a Fibonacci sequence?", "input": "", "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Create a fizz-buzz Python program to print numbers from 1 to 50 but for multiple of 3 print \u201cFizz\u201d and for the multiple of 5 print \u201cBuzz\u201d and for numbers which are multiple of both 3 and 5 print \u201cFizzBuzz\u201d.", "input": "", "output": "for num in range(1,51): \n    if num % 3 == 0 and num % 5 == 0: \n        print(\"FizzBuzz\") \n    elif num % 3 == 0: \n        print(\"Fizz\") \n    elif num % 5 == 0: \n        print(\"Buzz\") \n    else: \n        print(num)", "category": "Python"}, {"instruction": "Write a Python function to remove all elements from a set in another set", "input": "Set A = {1, 2, 3, 4} \nSet B = {2, 3}", "output": "def remove_from_set(A, B):\n  for element in B:\n    A.discard(element)\n  return A\n\nA = {1, 2, 3, 4} \nB = {2, 3}\n\nprint(remove_from_set(A,B)) \n# Output: {1, 4}", "category": "Python"}, {"instruction": "Explain the purpose of stack in programming.", "input": "", "output": "The stack is a data structure which stores data in a Last In First Out (LIFO) manner. It is used in programming for various operations such as function calls, expression evaluation, storing local variables, and peripheral operations such as undo or redo. The stack is an area of memory in which programs temporarily store data as they execute.", "category": "Python"}, {"instruction": "Create a Fibonacci series of n numbers.", "input": "n = 5", "output": "def fibonacci_sequence(n):\n    a, b = 0, 1\n    fib_series = [a]\n    while b < n:\n        fib_series.append(b)\n        a, b = b, a+b\n    return fib_series\n\nprint(fibonacci_sequence(n)) #[0, 1, 1, 2, 3]", "category": "Python"}, {"instruction": "Create a list comprehension to generate a new list of composed strings.", "input": "names = [\"John\", \"Steve\", \"Bob\"]\nblanks = [\"__'s cat\", \"__'s dog\", \"__'s parrot\"]", "output": "[name + blank for name in names for blank in blanks]", "category": "Python"}, {"instruction": "Write a code that adds two integers without using any arithmetic operators.", "input": "", "output": "def add_two_integers(a, b): \n    while b != 0:\n        carry = a & b     \n        a = a ^ b      \n        b = carry << 1  \n    return a", "category": "Python"}, {"instruction": "Make a deep copy of an object using JSON.", "input": "", "output": "import json\n\ndef deep_copy(obj):\n    return json.loads(json.dumps(obj))", "category": "Python"}, {"instruction": "Create a function for detecting changes in an array of numbers.", "input": "", "output": "def detect_changes(numbers):\n    results = []\n    for i in range(1, len(numbers)):\n        if numbers[i] != numbers[i-1]:\n            results.append((i, numbers[i]))\n    return results", "category": "Python"}, {"instruction": "Write a Python script to find the prime factors of a number.", "input": "Number: 24", "output": "\"\"\"\nWrite a Python script to find the prime factors of a number\n\"\"\"\n\ndef find_prime_factors(num):\n    prime_factors = []\n    for i in range(2, num+1):\n        count = 0\n        while num % i == 0:\n            count += 1\n            num //= i\n        if count > 0:\n            prime_factors.append((i, count))\n \n    return prime_factors\n\nif __name__ == '__main__':\n    n = 24\n    prime_factors = find_prime_factors(n)\n    print(prime_factors)", "category": "Python"}, {"instruction": "Explain how to use unsupervised machine learning to classify the following dataset", "input": "DataSet:\nA (2, 3, 4)\nB (5, 6, 7)\nC (8, 9, 10)", "output": "Unsupervised machine learning methods can be used to classify the given dataset by applying clustering algorithms. Clustering algorithms group objects which are similar to each other into clusters, while also attempting to keep the clusters distinct from each other. A clustering algorithm could be used to group the given dataset together and form distinct clusters. Each cluster would represent a distinct group, and each group would have a distinct set of characteristics. For example, the algorithm could group A, B, and C into one cluster, thus showing that each entry in the dataset has similar characteristics.", "category": "Python"}, {"instruction": "Create a function to group an array of numbers based on the following conditions.", "input": "array = [3, 15, 10, 5, 11, 14]\nconditions = [((3 <= x) & (x <= 10)), ((11 <= x) & (x <= 14))]", "output": "def group_arrays(array, conditions):\n    groups = []\n    for condition in conditions:\n        group = [x for x in array if condition(x)]\n        groups.append(group)\n    return groups", "category": "Python"}, {"instruction": "Calculate the sum of the following 2-dimensional array in Python.", "input": "arr = [[1, 2], [3, 4], [5, 6]]", "output": "def sum_2d_array(arr):\n result = 0\n for row in arr:\n  for num in row:\n   result += num\n return result\n \nprint(sum_2d_array([[1, 2], [3, 4], [5, 6]]))", "category": "Python"}, {"instruction": "Describe the algorithm and time complexity of selection sort.", "input": "", "output": "The selection sort algorithm works by repeatedly finding the minimum element in an unsorted list and then swapping it with the element in the current position. The algorithm has a time complexity of O(n^2) as it has to iterate through both the subarray to find the minimum element and then swap it.", "category": "Python"}, {"instruction": "Define a function in Python that takes an integer and returns \"positive\" if it is positive, \"zero\" if the integer is 0, and \"negative\" if the integer is negative.", "input": "", "output": "def pos_neg_zero(num):\n  if num > 0:\n    return \"positive\"\n  elif num < 0:\n    return \"negative\"\n  else:\n    return \"zero\"", "category": "Python"}, {"instruction": "Concatenate two lists in Python (using an appropriate method).", "input": "list1 = [1,2,3,4]\nlist2 = [5,6,7,8]", "output": "list3 = list1 + list2", "category": "Python"}, {"instruction": "You are given a 2-dimensional array. Write a function in Python to find the sum of each row.", "input": "arr = [[1, 3, 2],\n       [4, 6, 5],\n       [7, 9, 8]]", "output": "def row_sum(arr):\n    row_sum_arr = []\n    for row in arr:\n        row_sum_arr.append(sum(row))\n    return row_sum_arr\n\nrow_sum_arr = row_sum(arr)\nprint(row_sum_arr)\n# Output: [6, 15, 24]", "category": "Python"}, {"instruction": "Given a list of integers, write a program to check if there exist any pairs of numbers that sum to a given number.", "input": "v = [2, 3, 4, 9], sum = 8", "output": "def findSumPairs(v, sum):  \n    v.sort()\n    l = 0\n    r = len(v) - 1\n    while l < r: \n        if v[l] + v[r] == sum:\n            return True\n        elif v[l] + v[r] > sum:\n            r -= 1\n        else:\n            l += 1\n    return False\n  \nv = [2, 3, 4, 9]\nsum = 8\nprint(findSumPairs(v, sum))", "category": "Python"}, {"instruction": "Generate a random string of 10 characters with two vowels, three consonants and five digits.", "input": "", "output": "import random\n\ndef generate_string(vowels,consonants,digits):\n    s = ''\n    for _ in range(vowels):\n        s+=random.choice('aeiou')\n    for _ in range(consonants):\n        s+=random.choice('bcdfghjklmnpqrstvwxyz')\n    for _ in range(digits):\n        s+=str(random.randint(0,9))\n    return s\n\nprint(generate_string(2,3,5))", "category": "Python"}, {"instruction": "Create a function which takes a set of numbers as argument and returns a dictionary containing the frequency of each number.", "input": "my_set = {1, 2, 2, 3, 4, 5, 6}", "output": "def freq_dict(my_set):\n    # Initialize a empty dict\n    frequency_dict = dict()\n    # Iterate over given set\n    for num in my_set:\n        # Add or update item in the dict\n        frequency_dict[num] = frequency_dict.get(num, 0) + 1\n    return frequency_dict\n\n# Example\nmy_set = {1, 2, 2, 3, 4, 5, 6}\nprint(freq_dict(my_set))\n# Output: {1: 1, 2: 2, 3: 1, 4: 1, 5: 1, 6: 1}", "category": "Python"}, {"instruction": "Create a function which takes a string, converts it to lowercase, and prints out the most commonly-used character in the string.", "input": "string = \"Hello World\"", "output": "def most_common_char(string):\n    # Convert to lowercase\n    string = string.lower()\n    # Create an empty dict\n    chars = dict()\n    # Iterate over string\n    for char in string:\n        # Check if the character is in the dict\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    # Get most common char\n    most_common_char = sorted(chars.items(), key=lambda x: x[1], reverse=True)[0][0]\n\n    return most_common_char\n\n# Example\nstring = \"Hello World\"\nprint(most_common_char(string))\n# Output: l", "category": "Python"}, {"instruction": "Create a function which takes a variable number of arguments, checks if all of them are a list, and then adds all the items in the lists.", "input": "my_lists = [[1,2,3], [4,5], [6,7,8]]", "output": "# Function which takes variable arguments\ndef add_lists(*args):\n\n    # Check if all arguments are lists\n    for arg in args:\n        if not isinstance(arg, list):\n            return \"All the arguments should be a list.\"\n\n    # Add all items of the lists\n    result = 0\n    for lst in args:\n        # Iterate each item in the list\n        for item in lst:\n            result += item\n    return result\n\n# Example\nmy_lists = [[1,2,3], [4,5], [6,7,8]]\nprint(add_lists(*my_lists))\n# Output: 36", "category": "Python"}, {"instruction": "Create a Python program that sorts an array of integers using the insertion sort algorithm.", "input": "[4, 2, 6, 8, 1]", "output": "def insertionSort(arr): \n  \n    # Traverse through 1 to len(arr) \n    for i in range(1, len(arr)): \n  \n        key = arr[i] \n  \n        # Move elements of arr[0..i-1], that are \n        # greater than key, to one position ahead \n        # of their current position \n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key \n  \n# Driver code to test above \narr = [12, 11, 13, 5, 6] \ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (arr[i])", "category": "Python"}, {"instruction": "Write a Python program that takes a string entered by the user, reverses it and displays the reversed version of the string.", "input": "", "output": "def reverse_string(s): \n    return s[::-1]\n  \ninput_string = input(\"Enter a string: \")\n  \nreversed_string = reverse_string(input_string) \n  \nprint(\"The reversed string is:\", reversed_string)", "category": "Python"}, {"instruction": "Create a program that reads an integer N and calculates the sum of the series 1/1 + 1/2 + 1/3 + . . . . . + 1/N.", "input": "", "output": "def calculate_series_sum(N):\n    summation = 0\n    for i in range(1, N+1):\n        summation += (1 / i)\n    return summation", "category": "Python"}, {"instruction": "Create a program that reads a list of integers and returns the highest prime number in the list.", "input": "", "output": "def get_highest_prime(numbers):\n  highest_prime = 0\n  for num in numbers:\n    for i in range(2, num): \n      if (num % i == 0): \n        break\n    else:\n      highest_prime = max(highest_prime, num)\n  return highest_prime", "category": "Python"}, {"instruction": "Create a program that reads two numbers and prints out their greatest common divisor.", "input": "", "output": "def gcd(a, b):\n  if a == 0:\n    return b \n  return gcd(b % a, a)", "category": "Python"}, {"instruction": "You are given an array of integers and the task is to create a function that returns the maximum pairwise product of those numbers.", "input": "", "output": "def max_pairwise_product(nums):\n  max_product = 0\n  for i in range(len(nums)):\n      for j in range(i+1,len(nums)):\n          max_product = max(max_product, nums[i] * nums[j])\n  return max_product", "category": "Python"}, {"instruction": "Write a function that takes a list of strings and returns the longest common prefix of the list of strings.", "input": "", "output": "def longest_common_prefix(strings):\n    if len(strings) == 0:\n        return \"\"\n    smallest_string = min(strings, key=len)\n    end_word_index = len(smallest_string)\n\n    for i in range(end_word_index):\n        for word in strings:\n            if word[i] != smallest_string[i]:\n                return smallest_string[:i] \n    return smallest_string", "category": "Python"}, {"instruction": "Create a program that reads 6 numbers from the user and outputs whether they form an increasing subsequence of length 3 or not.", "input": "", "output": "def increasing_subsequence(arr):\n  for i in range(len(arr)-2):\n    if (arr[i] < arr[i+1]) and (arr[i+1] < arr[i+2]):\n      return 'True'\n  return 'False'", "category": "Python"}, {"instruction": "Create a function that prints all the prime numbers between 1 and a given number.", "input": "", "output": "def print_prime_numbers(upper_limit):\n  prime_numbers_list = []\n  for num in range(2, upper_limit+1):\n   if all(num % i != 0 for i in range(2, num)): \n    prime_numbers_list.append(num)\n  print(\"The prime numbers between 1 and\",upper_limit,\"are:\",prime_numbers_list)", "category": "Python"}, {"instruction": "Create a program that reads an integer and prints out the next Fibonacci number.", "input": "", "output": "def get_next_fibonacci_number(n):\n  if n == 0 or n == 1:\n    return n\n  else:\n    fibonacci_sequence = [0,1] \n    for i in range(2, n + 1): \n      next_value = fibonacci_sequence[i-2] + fibonacci_sequence[i-1] \n      fibonacci_sequence.append(next_value)\n    return fibonacci_sequence[n]", "category": "Python"}, {"instruction": "Write a Python program that finds the most common word in a given string.", "input": "This is the first sentence of a sample text.", "output": "def get_most_common_word(text):\n words = text.split()\n common_words = {}\n for word in words:\n if word in common_words:\n common_words[word] += 1\n else:\n common_words[word] = 1\n\n max_word = \"\"\n max_count = 0\n for word, count in common_words.items():\n if count > max_count:\n max_word = word\n max_count = count\n return max_word", "category": "Python"}, {"instruction": "Transform a given Python list of integers into a dictionary that contains the numbers as keys and its squares as values.", "input": "[1,2,3]", "output": "my_list = [1,2,3]\ndict_squares = {x:x**2 for x in my_list}", "category": "Python"}, {"instruction": "Implement a Search algorithm in Python with a space complexity of O(n).", "input": "", "output": "def search(list, target): \n    for i in range(len(list)): \n        if list[i] == target: \n            return i \n    return -1", "category": "Python"}, {"instruction": "Use a regular expression to replace URLs with \"URL\" in a given text in Python.", "input": "This is a text with a link http://example.com", "output": "import re\n\ntext = \"This is a text with a link http://example.com\"\ntext = re.sub(r'http\\S+', 'URL', text)\nprint(text)\n# Prints: This is a text with a link URL", "category": "Python"}, {"instruction": "Sort a given list of numbers from smallest to largest with Python.", "input": "[12,3,7,9,1]", "output": "myList = [12,3,7,9,1] \nmyList.sort() \nprint(myList) \n# Prints [1,3,7,9,12]", "category": "Python"}, {"instruction": "Create a class in Python to represent a car and include methods to set and get the car's color, model, and year.", "input": "", "output": "class Car:\n    def __init__(self, model, year, color):\n        self.model = model\n        self.year = year\n        self.color = color\n\n    def set_color(self, color):\n        self.color = color\n\n    def get_color(self):\n        return self.color\n\n    def set_model(self, model):\n        self.model = model\n\n    def get_model(self):\n        return self.model\n\n    def set_year(self, year):\n        self.year = year\n\n    def get_year(self):\n        return self.year", "category": "Python"}, {"instruction": "Create a class in Python to represent a bank account and add methods to display, withdraw, deposit and transfer money.", "input": "The bank account has the following details:\n- Customer Name: John Doe\n- Account Number: 12345\n- Balance: $1000", "output": "class BankAccount:\n    def __init__(self, customer_name, account_number, balance):\n        self.customer_name = customer_name\n        self.account_number = account_number\n        self.balance = balance\n\n    def display_balance(self):\n        print('Your balance is', self.balance)\n\n    def withdraw_amount(self, amount):\n        self.balance -= amount\n        print('You withdrew', amount, 'from your account.')\n\n    def deposit_amount(self, amount):\n        self.balance += amount\n        print('You deposited', amount, 'into your account.')\n\n    def transfer_amount(self, target_account, amount):\n        self.balance -= amount\n        target_account.balance += amount\n        print('You transferred', amount, 'to the account', target_account.account_number)", "category": "Python"}, {"instruction": "Suggest an appropriate way to select the last element of a given list in Python.", "input": "", "output": "list[-1]", "category": "Python"}, {"instruction": "Suggest a Pandas DataFrame command to remove element duplicates from a given dataframe.", "input": "", "output": "df.drop_duplicates()", "category": "Python"}, {"instruction": "Create a program to convert a binary number to its decimal equivalent.", "input": "", "output": "def binary_to_decimal(number):\n    result = 0\n    power = 0\n    for digit in str(number)[::-1]:\n        if digit == '1':\n            result += 2 ** power\n        power += 1\n    return result", "category": "Python"}, {"instruction": "Generate a Python program to calculate the total number of vowels in a given string.", "input": "string = \"Today is a beautiful day\"", "output": "def calculate_vowels(string):\n    vowels = 'aeiou'\n    count = 0\n    \n    for char in string:\n        if char in vowels:\n            count += 1\n    return count\n\nprint(calculate_vowels(\"Today is a beautiful day\"))", "category": "Python"}, {"instruction": "Create a function to input a number and prints out its prime factorization", "input": "24", "output": "def prime_factors(num):\n    factors = list()\n    x = 2\n    while x * x <= num:\n        while num % x == 0:\n            factors.append(x)\n            num /= x\n        x += 1\n    if num > 1:\n        factors.append(num)\n    return factors\n\nprint(prime_factors(24))", "category": "Python"}, {"instruction": "Create a Python program that generates a random number between 0 and 10 and checks if the generated number is even.", "input": "", "output": "import random\n\nnum = random.randint(0, 10)\n\nif (num % 2 == 0):\n    print(str(num) + \" is even.\")\nelse:\n    print(str(num) + \" is odd.\")", "category": "Python"}, {"instruction": "Generate a random hexadecimal string with a length of 8 characters.", "input": "", "output": "import random\n\ndef generate_hex():\n    hex_values = '0123456789ABCDEF'\n    string_length = 8\n    hex_string = '' \n    for _ in range(string_length): \n        hex_character = random.choice(hex_values) \n        hex_string += hex_character\n    return hex_string\n\nif __name__ == '__main__':\n    print(generate_hex())", "category": "Python"}, {"instruction": "Define a function to find the factorial of the given number.", "input": "", "output": "def factorial(num):\n    if num <= 1:\n        return 1\n    else:\n        return num * factorial(num-1)", "category": "Python"}, {"instruction": "Create a program to search a nested list and print all the elements containing the number 3.", "input": "nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, [3, 4, 5]]]", "output": "def search_nested_list(nested_list):\n    for element in nested_list:\n        if isinstance(element, list):\n            search_nested_list(element)\n        elif element == 3:\n            print(element)\n\nsearch_nested_list(nested_list)", "category": "Python"}, {"instruction": "Given two strings, write a Python function that finds the common letters between them.", "input": "String 1: apple\nString 2: oranges", "output": "def find_common_letters(s1, s2):\n    letters = set()\n\n    for letter in s1:\n        if letter in s2:\n            letters.add(letter)\n    return letters\n\n# Example\ns1 = 'apple'\ns2 = 'oranges'\nprint(find_common_letters(s1, s2))\n# Output: {'a', 'e'}", "category": "Python"}, {"instruction": "What are the main data types in Python?", "input": "", "output": "The main data types in Python are numbers, strings, lists, tuples, dictionaries, and sets.", "category": "Python"}, {"instruction": "Build a machine learning model to classify the type of iris flower.", "input": "", "output": "from sklearn.datasets import load_iris\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Load data\niris_data = load_iris()\nX = iris_data.data\ny = iris_data.target\n\n# Create a model and train it\nmodel = RandomForestClassifier()\nmodel.fit(X, y)\n\n# Make predictions\npredictions = model.predict(X)", "category": "Python"}, {"instruction": "Write a Python function to find all pairs in a given list of numbers whose sum equals a given target number", "input": "Given List: [1, 4, 2, 9, 5]\nTarget number: 7", "output": "def find_pairs_sum(numbers, target):\n    res = [] \n    for i in range(len(numbers)): \n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target: \n                res.append([numbers[i], numbers[j]]) \n  \n    return res", "category": "Python"}, {"instruction": "Construct a loop to print all the numbers divisible by 3 between 1 and 20", "input": "", "output": "for num in range(1, 21):\n    if num % 3 == 0:\n        print(num)", "category": "Python"}, {"instruction": "Generate a JSON string from a given Python dictionary", "input": "my_dict = {\n    \"title\": \"GPT Model Evaluation\",\n    \"category\": \"Natural Language Processing\",\n    \"score\": 8\n}", "output": "json.dumps(my_dict)", "category": "Python"}, {"instruction": "Compute the minimum string edit distance between two strings of same length.", "input": "str1 = \"kitten\"\nstr2 = \"sitting\"", "output": "def minimumEditDistance(str1, str2):\n    m = len(str1)\n    n = len(str2)\n \n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0: \n                dp[i][j] = j \n            elif j == 0: \n                dp[i][j] = i \n            elif str1[i - 1] == str2[j - 1]: \n                dp[i][j] = dp[i - 1][j - 1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j - 1],       \n                                   dp[i - 1][j],       \n                                   dp[i - 1][j - 1]     \n                                   ) \n  \n    return dp[m][n]\n\nmin_edit_distance = minimumEditDistance(str1, str2)\nprint(min_edit_distance) # output: 3", "category": "Python"}, {"instruction": "Write a code to find the factorial of a given number using a recursive function.", "input": "", "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "category": "Python"}, {"instruction": "Rewrite the following piece of code to check if a string is a palindrome or not.", "input": "String text = \"malayalam\"", "output": "def is_palindrome(text): \n    start = 0\n    end = len(text) - 1\n    while start < end:\n        if text[start] != text[end]:\n            return False\n        start += 1\n        end -= 1\n    return True", "category": "Python"}, {"instruction": "Edit the function so that an element can be deleted from the list.", "input": "def delete_element(list, element):\n    # TODO", "output": "def delete_element(list, element):\n    # iterate through the list\n    for elem in list:\n        if elem == element:\n            list.remove(elem)\n    return list", "category": "Python"}, {"instruction": "How would you modify the code to check whether the list contains an even number?", "input": "list_data = [1, 2, 3, 4]\nfor item in list_data:  \n    print(item)", "output": "list_data = [1, 2, 3, 4]\nflag = False\nfor item in list_data:  \n    print(item)\n    if item % 2 == 0:\n       flag = True\nif flag:\n    print(\"List contains even number.\")", "category": "Python"}, {"instruction": "Compare the input list with a pre-defined list and return a new list containing only the elements that are present in both lists.", "input": "my_list = [1, 2, 3, 4]\npre_defined_list = [2, 4, 6, 8]", "output": "def compare_lists(my_list, pre_defined_list):\n    new_list = []\n    for element in my_list:\n        if element in pre_defined_list:\n            new_list.append(element)\n    return new_list", "category": "Python"}, {"instruction": "How would you modify the following code to store the output of the function in a dictionary?", "input": "def convert_list_keys(list_of_data):\n    key_list = []\n    for item in list_of_data:\n        key_list.append(item[0])\n    return key_list", "output": "def convert_list_keys(list_of_data):\n    key_dict = {}\n    for item in list_of_data:\n        key_dict[item[0]] = item\n    return key_dict", "category": "Python"}, {"instruction": "Write a Python program to filter out all the elements greater than 5 in the given list.", "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "myList = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n result = list(filter(lambda x: x <= 5, myList))\n print(result)", "category": "Python"}, {"instruction": "Write a code in Python to find the subsequence of a given sequence.", "input": "sequence = [1, 6, 2, 4, 3, 7]", "output": "def findSubsequence(sequence): \n    subSeq = [] \n    maxLen = 1\n  \n    # looping through the sequence \n    for i in range(len(sequence)): \n        j = i + 1\n        while j < len(sequence): \n            # checking for non decreasing sequence \n            if sequence[j] >= sequence[i]: \n                subSeq.append(sequence[j]) \n                i = j \n                j += 1\n  \n            # checking for the subsequence with the max length \n            if len(subSeq) > maxLen: \n                maxLen = len(subSeq) \n  \n            # reset subSeq for the next subsequence if current element is starting of new subsequence \n            else: \n                subSeq = [] \n  \n    # return-1 when there is no subsequence  \n    if maxLen == 1: \n        return -1\n    else: \n        return maxLen \n  \n# Driver Code \nsequence = [1, 6, 2, 4, 3, 7] \nprint(\"LCS is \", findSubsequence(sequence))", "category": "Python"}, {"instruction": "Write a computer program to generate a matrix filled with zeros.", "input": "", "output": "def generateMatrix(m, n): \n  \n    # Initialize a m * n matrix with all 0s \n    matrix = [[0 for x in range(n)] for y in range(m)] \n    return matrix \n  \n# Driver code \nm = 4\nn = 5\nprint(generateMatrix(m, n))", "category": "Python"}, {"instruction": "Create a list in Python using list comprehension to obtain a new list which contains only the even numbers from the given list.", "input": "originalList = [1, 3, 4, 17, 19, 6, 2]", "output": "evenlist = [i for i in originalList if i%2==0]", "category": "Python"}, {"instruction": "Explain why normalization is needed for natural language processing.", "input": "", "output": "Normalization is a step in natural language processing (NLP) that is used to make the text more consistent and easier to process. It is important in NLP because different pieces of text can still have the same meaning even if the words used in the text are different. Normalization can make the text more consistent by unifying the words to a common form, such as lowercasing all words, so that the model can process them more effectively. It can also be used to remove irrelevant characters, like punctuation, so that they don't affect the analysis.", "category": "Python"}, {"instruction": "Given an integer n, write a Python program to print a pattern.", "input": "n = 5", "output": "for i in range(1, n+1): \n  for j in range(1,i+1): \n    print(\"* \", end=\"\")  \n  print(\"\\r\")", "category": "Python"}, {"instruction": "Create a list comprehension that outputs a list of strings with the same character.", "input": "string=\"This is a test.\"", "output": "[x for x in string if x == 't']", "category": "Python"}, {"instruction": "Explain the purpose of principal component analysis.", "input": "", "output": "Principal Component Analysis (PCA) is a method of dimensionality reduction used to reduce the number of variables in large datasets. It works by transforming a set of correlated variables into a new set of uncorrelated variables, called principal components. The principal components represent the most relevant information in the data, while also reducing the complexity of the data. By using these components as variables in analysis, it helps to visualize and interpret the data more easily.", "category": "Python"}, {"instruction": "Create a method that given an array as input, outputs the quantity of odd numbers.", "input": "[1,2,3,4,5,6,7]", "output": "def countOdds(arr): \n    return len([x for x in arr if x % 2 != 0])", "category": "Python"}, {"instruction": "Determine the two largest numbers in a given list.", "input": "lst = [11, 5, 3, 21, 19, 17]", "output": "def find_two_largest(lst):\n    max1 = 0\n    max2 = 0\n    for val in lst:\n        if val > max1:\n            max2 = max1\n            max1 = val\n        elif val > max2:\n            max2 = val\n    return (max1, max2)\n\nprint(find_two_largest(lst))", "category": "Python"}, {"instruction": "Create a program to calculate the Fibonacci sequence up to the nth element.", "input": "", "output": "def fibonacci(n):\n    a = 0\n    b = 1\n    if n==1:\n        print(a)\n    else:\n        print(a)\n        print(b)\n        for i in range(2,n):\n            c=a+b\n            a=b\n            b=c\n            print(b)", "category": "Python"}, {"instruction": "Write an algorithm to sort a list of numbers from least to greatest.", "input": "", "output": "def sort_list(mylist):\n    for i in range(len(mylist)):\n        min_idx = i\n        for j in range(i+1, len(mylist)):\n            if mylist[min_idx] > mylist[j]:\n                min_idx = j\n        mylist[i], mylist[min_idx] = mylist[min_idx], mylist[i]\n    return mylist", "category": "Python"}, {"instruction": "Using the given Python code, format the number 7.321 to contain two decimal points.", "input": "n=7.321", "output": "'{:.2f}'.format(n)", "category": "Python"}, {"instruction": "Create a script in Python that plots a bar chart showing the count of beers sold in a bar in a particular week.", "input": "beer_sales = [200, 500, 600, 100, 800]", "output": "import matplotlib.pyplot as plt\n\nweek = [1, 2, 3, 4, 5]\nplt.bar(week,beer_sales)\nplt.xlabel('Week')\nplt.ylabel('Number of beers sold')\nplt.show()", "category": "Python"}, {"instruction": "Convert the following array to a numpy array and print it:", "input": "[2, 4, 6, 8]", "output": "import numpy as np \narr = np.array([2,4,6,8])\nprint(arr)", "category": "Python"}, {"instruction": "Create an array of 10 integers initialized to zero and print their values.", "input": "", "output": "import numpy as np \narr = np.zeros(10, dtype=int)\nprint(arr)", "category": "Python"}, {"instruction": "Compute the factorial of a given number using a recursive algorithm.", "input": "", "output": "def factorial(n): \n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "category": "Python"}, {"instruction": "Create an algorithm for sorting a list of numbers using bubble sort.", "input": "[3,1,5,4,2]", "output": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\nbubble_sort([3,1,5,4,2])", "category": "Python"}, {"instruction": "Write an algorithm to find the common elements in two arrays.", "input": "", "output": "A possible algorithm to find the common elements in two arrays is as follows:\n\n1. Initialize an empty array to store the common elements.\n2. Iterate through the first array and for each element, check if it exists in the second array.\n3. If the element does exist in the second array, add it to the common elements array.\n4. Return the common elements array.", "category": "Python"}, {"instruction": "Choose a suitable data structure for finding the minimum and maximum element from a collection of numbers.", "input": "", "output": "Heap is an appropriate data structure for finding the minimum and maximum elements from a collection of numbers as it allows for efficient access to the minimum and maximum values using the min-heap and max-heap properties.", "category": "Python"}, {"instruction": "Write a function in Python to print out the most common words in a given text.", "input": "This is a test text. It can be used to test a function for the most common words.", "output": "def most_common(text):\n    text_list = text.lower().split()\n    results = {}\n    for word in text_list:\n        if word not in results:\n            results[word] = 1\n        else:\n            results[word] += 1\n\n    sorted_words = sorted(results.items(), key=lambda kv: kv[1], reverse=True)\n    for word, count in sorted_words[:10]:\n        print(word, count)", "category": "Python"}, {"instruction": "Develop a program to find the smallest number in a list", "input": "list = [25, 67, 12, 8]", "output": "list = [25, 67, 12, 8]\n\ndef find_smallest(list):\n    smallest = list[0]\n    for number in list:\n        if number < smallest:\n            smallest = number\n    return smallest\n\nprint(find_smallest(list))", "category": "Python"}, {"instruction": "Create an algorithm to compute the sum of all the numbers in a list", "input": "list = [14, 37, 54, 20]", "output": "list = [14, 37, 54, 20]\n\ndef compute_sum(list):\n    total_sum = 0\n    for number in list:\n        total_sum += number\n    return total_sum\n\nprint(compute_sum(list))", "category": "Python"}, {"instruction": "Generate a program to filter a list of numbers, passing only the greater than a given number", "input": "list = [12, 24, 36, 45], 36", "output": "list = [12, 24, 36, 45]\ngiven_number = 36\n\ndef filter_list(list, given_number):\n    filtered_list = []\n    for number in list:\n        if number > given_number:\n            filtered_list.append(number)\n    return filtered_list\n\nprint(filter_list(list, given_number))", "category": "Python"}, {"instruction": "Given an array of strings and a string, write a program to find the first index of the string in the array.", "input": "arr = [\"Hello\", \"World\", \"World\"]\nstring = \"World\"", "output": "def find_index(arr, string):\n    for i in range(len(arr)):\n        if arr[i] == string:\n            return i\n    return -1\n\nindex = find_index(arr, string)\nprint(index)", "category": "Python"}, {"instruction": "Develop a program to count the number of items of a given list", "input": "list = [43, 87, 21, 65]", "output": "list = [43, 87, 21, 65]\n\ndef count_list_items(list):\n    count = 0\n    for item in list:\n        count += 1\n    return count\n\nprint(count_list_items(list))", "category": "Python"}, {"instruction": "Create a function that takes two numerical parameters and checks if they are equal.", "input": "", "output": "def is_equal(num1, num2):\n    if num1 == num2:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Create a class for a Counter object that will keep track of a total count, and increase and decrease the count when functions are called.", "input": "", "output": "class Counter:\n    def __init__(self):\n        self.count = 0\n\n    def increase_count(self):\n        self.count += 1\n\n    def decrease_count(self):\n        self.count -= 1", "category": "Python"}, {"instruction": "Compose a function that takes in two strings and produces an array of characters that are only in the first string.", "input": "stringA = \"abcdefg\"\nstringB = \"hijklmn\"", "output": "def to_array(strA, strB):\n    output = []\n    for char in strA:\n        if char not in strB:\n            output.append(char)\n    return output\n\nresult = to_array(stringA, stringB)\nprint(result)", "category": "Python"}, {"instruction": "Using random module, generate a random sequence of 8 numbers from range 1 to 8.", "input": "", "output": "import random\n\nrandom_sequence = random.sample(range(1, 9), 8)\nprint(random_sequence)", "category": "Python"}, {"instruction": "Given a list of words, sort them using a bubble sort algorithm.", "input": "['apple', 'banana', 'cherry', 'date']", "output": "['apple', 'banana', 'cherry', 'date']\n\ndef bubble_sort(words):\n    n = len(words)\n    for i in range(n): \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n            if words[j] > words[j+1]: \n                words[j], words[j+1] = words[j+1], words[j]\n    return words", "category": "Python"}, {"instruction": "Define a function that takes an array of strings and combines the strings into a single string.", "input": "array = [\"Hello\", \"World\"]", "output": "def combine_strings(strings_array):\n    output_string = \"\"\n    for string in strings_array:\n        output_string += string\n    \n    return output_string\n\ncombine_strings(array)", "category": "Python"}, {"instruction": "Calculate the square root of a number without using any built-in function.", "input": "num = 25", "output": "def calculate_sqrt(num):\n   # Babylonian method\n   x = num\n   y = 1\n \n   while x > y:\n       x = (x + y) / 2\n       y = num / x\n \n   return x\n\ncalculate_sqrt(num)", "category": "Python"}, {"instruction": "Find the latitude and longitude of an input address.", "input": "address = \"1600 Amphitheatre Parkway, Mountain View, CA\"", "output": "import geocoder\n\ng = geocoder.google(address)\n\nprint(\"Latitude: \" + str(g.latlng[0])) \nprint(\"Longitude: \" + str(g.latlng[1]))", "category": "Python"}, {"instruction": "Aggregate and calculate the mean of the following array by grouping them by the key 'region'.", "input": "array = [\n    {'name': 'John', 'region': 'West', 'score': 4},\n    {'name': 'Jane', 'region': 'West', 'score': 10},\n    {'name': 'Bob', 'region': 'East', 'score': 5},\n    {'name': 'Alice', 'region': 'East', 'score': 20}\n]", "output": "import pandas as pd\n\ndf = pd.DataFrame(array)\nmean_by_region = df.groupby('region')['score'].mean() \n\nprint(mean_by_region)", "category": "Python"}, {"instruction": "Create a program which takes an integer input n and prints its factorial.", "input": "n = 5", "output": "def factorial(n): \n    fact = 1\n    for i in range(1, n+1): \n        fact = fact * i \n    return fact\n\nprint(factorial(n))", "category": "Python"}, {"instruction": "Generate a random string of length n containing only lowercase letters.", "input": "", "output": "import random\nimport string\n\ndef random_string_generator(n):\n    return ''.join(random.choices(string.ascii_lowercase, k=n))\n\nrandom_string = random_string_generator(n)", "category": "Python"}, {"instruction": "Explain what a trisection algorithm is.", "input": "", "output": "A trisection algorithm is a method used to divide an interval into three equal parts. It involves dividing a closed interval into three parts using only two points that lie in the original interval. It is useful for quickly finding roots of equations as the points at each division become closer and closer to the root. The method can be applied in a number of applications such as numerical analysis and optimization.", "category": "Python"}, {"instruction": "How does a hash table work?", "input": "", "output": "A hash table is a data structure that stores data items in an associative array where the key is used to quickly search for the data item. It is based on the concept of hashing which converts a key into an address in the array. Each address points to the data item associated with that key. The hash table offers fast lookup times by using hashing functions which are designed to spread data evenly over the table.", "category": "Python"}, {"instruction": "Create a dictionary that contains 10 entries.", "input": "", "output": "tutorials = {\n  'Python': 'http://www.python.org/',\n  'Django': 'http://www.djangoproject.com/',\n  'Selenium': 'https://pypi.python.org/pypi/selenium',\n  'Robotics': 'http://www.robotics-focus.com/',\n  'Machine Learning': 'https://en.wikipedia.org/wiki/Machine_learning',\n  'Data Science': 'http://www.datascience.com/',\n  'Big Data': 'https://aws.amazon.com/big-data/',\n  'Cloud Computing': 'http://www.mcp.com/cloud-computing/',\n  'Artificial Intelligence': 'https://www.microsoft.com/en-us/research/ai/',\n  'Internet of Things': 'https://www.intel.com/content/www/us/en/internet-of-things/overview.html'\n}", "category": "Python"}, {"instruction": "Given a class definition, write a method to count the number of objects created in the class.", "input": "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "output": "class Student:\n    _count = 0\n    def __init__(self, name, age):\n        self._count += 1\n        self.name = name\n        self.age = age\n\n    @classmethod\n    def get_count(cls):\n        return cls._count", "category": "Python"}, {"instruction": "Create a new list by changing all the strings in a given list to uppercase.", "input": "lst = [\"apple\", \"orange\", \"banana\"]", "output": "def to_upper_case_list(lst):\n    res = []\n    for s in lst:\n        res.append(s.upper())\n    return res\n\nif __name__ == '__main__':\n    lst = [\"apple\", \"orange\", \"banana\"]\n    print(to_upper_case_list(lst))", "category": "Python"}, {"instruction": "Check if an element is present in a list.", "input": "lst = [1, 2, 3, 4]\nelement = 5", "output": "def is_element_in_list(lst, element):\n    return element in lst\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4]\n    element = 5\n    print(is_element_in_list(lst, element))", "category": "Python"}, {"instruction": "Convert a string to all uppercase.", "input": "text = \"Hello World\"", "output": "def to_uppercase(text):\n    return text.upper()\n\nif __name__ == '__main__':\n    text = \"Hello World\"\n    print(to_uppercase(text))", "category": "Python"}, {"instruction": "Calculate the area of a rectangle given height and width.", "input": "height = 2\nwidth = 5", "output": "def area_rectangle(height, width):\n    return height*width\n\nif __name__ == '__main__':\n    print(area_rectangle(2, 5))", "category": "Python"}, {"instruction": "Write a function to receive a list of numbers and return the sum of the list.", "input": "", "output": "def list_sum(list):\n    sum = 0\n    for num in list:\n        sum += num\n    return sum\n\nif __name__ == '__main__':\n    print(list_sum([1, 2, 3, 4]))", "category": "Python"}, {"instruction": "Write Python code to replace all the vowels with underscore.", "input": "string = \"Hello World!\"", "output": "string = \"Hello World!\"\n\nvowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\ndef replace_vowels_with_underscore(string):\n    result = \"\"\n    for char in string:\n        if char in vowels:\n            result += \"_\"\n        else:\n            result += char\n    return result\n\nprint(replace_vowels_with_underscore(string)) # Output: \"H_ll_ W_rld!\"", "category": "Python"}, {"instruction": "Design a function in Python to find all the elements in an array that are divisible by 3.", "input": "arr = [3, 8, 15, 20, 7]", "output": "arr = [3, 8, 15, 20, 7]\n\ndef divisible_by_3(arr):\n    result = []\n    for element in arr:\n        if element % 3 == 0:\n            result.append(element)\n    return result\n\nprint(divisible_by_3(arr)) # Output: [3, 15, 20]", "category": "Python"}, {"instruction": "Create a function in Python that shuffles the elements of an input list.", "input": "arr = [1, 4, 5, 8, 9, 2]", "output": "import random \n\narr = [1, 4, 5, 8, 9, 2]\n\ndef randomize_list(arr): \n    random.shuffle(arr) \n    return arr \n\nprint(randomize_list(arr)) # Output: [9, 1, 2, 4, 5, 8]", "category": "Python"}, {"instruction": "Write a function in Python to generate a list containing the sum of corresponding elements given two lists.", "input": "list1 = [9, 4, 8]\nlist2 = [1, 8, 5]", "output": "list1 = [9, 4, 8]\nlist2 = [1, 8, 5]\ndef add_corresponding_elements(list1, list2):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i])\n    return result\n\nprint(add_corresponding_elements(list1, list2)) # Output: [10, 12, 13]", "category": "Python"}, {"instruction": "Construct a loop in Python to invert the order of a string.", "input": "string = \"Hello World!\"", "output": "string = \"Hello World!\"\ninverted_string = \"\"\nfor char in string:\n    inverted_string = char + inverted_string\n\nprint(inverted_string) # Output: \"!dlroW olleH\"", "category": "Python"}, {"instruction": "Train a sentiment analysis model using a corpus of movie reviews.", "input": "", "output": "import pandas as pd\nimport numpy as np\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Dense, Embedding, LSTM, Dropout\nfrom keras.models import Sequential\n\n# Load corpus of movie reviews\ndata = pd.read_csv('movie_reviews.csv')\nsentences = data['review'].values\ny = data['sentiment'].values\n\n# Create tokenizer\ntokenizer = Tokenizer(num_words=2000)\ntokenizer.fit_on_texts(sentences)\nX = tokenizer.texts_to_sequences(sentences)\nvocab_size = len(tokenizer.word_index)+1\nX = pad_sequences(X)\n\n# Build and train a model\nmodel = Sequential()\nmodel.add(Embedding(vocab_size, 128, input_length=X.shape[1]))\nmodel.add(LSTM(64, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n# fit the model with epochs\nmodel.fit(X,y, batch_size=64, epochs=15)\n\n# Evaluate the model\nscores = model.evaluate(X, y, verbose=0)\nprint(\"Accuracy: %.2f%%\" % (scores[1]*100))", "category": "Python"}, {"instruction": "Create a 3D scatterplot in Python to visualize 3 different datasets.", "input": "", "output": "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nx1 = np.array([1,2,3,4,5])\ny1 = np.array([2,3,4,5,6])\nz1 = np.array([3,4,5,6,7])\n\nx2 = np.array([10,11,12,13,14])\ny2 = np.array([20,21,22,23,24])\nz2 = np.array([40,41,42,43,44])\n\nx3 = np.array([100,200,300,400,500])\ny3 = np.array([200,400,600,800,1000])\nz3 = np.array([1,2,3,4,5])\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(x1, y1, z1, c='r', marker='o', label='dataset1')\nax.scatter(x2, y2, z2, c='y', marker='^', label='dataset2')\nax.scatter(x3, y3, z3, c='g', marker='d', label='dataset3')\nax.legend()\n\nplt.show()", "category": "Python"}, {"instruction": "Generate a random password with 8 characters, including upper and lower case letters, numbers, and special characters.", "input": "", "output": "import string\nimport random\n\ndef generate_password():\n    # create a string of all possible characters\n    chars = string.ascii_letters + string.digits + string.punctuation\n    # generate a random password with 8 characters\n    password = ''.join(random.choice(chars) for i in range(8))\n    return password\n\n# Generate a random password\npassword = generate_password()\nprint(password)", "category": "Python"}, {"instruction": "Create a program in python to simulate a game of rock, paper, scissors.", "input": "", "output": "from random import randint \n\ndef rock_paper_scissors():\n    print(\"rock, paper, scissors!\")\n    player = input(\"Your input: \")\n    rand_num = randint(0,2)\n    if rand_num == 0:\n        computer = \"rock\"\n    elif rand_num == 1:\n        computer = \"paper\"\n    else:\n        computer = \"scissors\" \n\n    print(\"The computer plays: \" + computer)\n    if player == computer:\n        print(\"It's a tie!\")\n    elif player == \"rock\":\n        if computer == \"paper\":\n            print(\"Computer wins!\")\n        else:\n            print(\"Player wins!\")\n    elif player == \"paper\":\n        if computer == \"scissors\":\n            print(\"Computer wins!\")\n        else:\n            print(\"Player wins!\")\n    elif player == \"scissors\":\n        if computer == \"rock\":\n            print(\"Computer wins!\")\n        else:\n            print(\"Player wins!\")\n    else:\n        print(\"Invalid input! You have to choose between rock, paper or scissors\")\n\nrock_paper_scissors()", "category": "Python"}, {"instruction": "Write a code that takes an array and returns an array of all elements in the original except for the duplicates.", "input": "[1, 2, 2, 3, 4, 4, 5]", "output": "def remove_duplicates(arr):\n    new_arr = []\n    seen = set()\n    for i in arr:\n        if i not in seen:\n            seen.add(i)\n            new_arr.append(i)\n    return new_arr\n\nremove_duplicates([1,2,2,3,4,4,5])\n# output: [1,2,3,4,5]", "category": "Python"}, {"instruction": "The following code is broken, please rewrite it so that it prints out all the primes within a range of 1-100.", "input": "for i in range(2,100):\n    if i % 2 == 0:\n        print (i, \" is prime\")", "output": "for i in range(2,100):\n    is_prime = True\n    for j in range(2,i):\n        if i % j == 0:\n            is_prime = False\n            break\n    if is_prime:\n        print(i, \"is prime\")", "category": "Python"}, {"instruction": "Use the collections module in python to return the most common phrase from a list of strings.", "input": "[ \"hello world\", \"hello\", \"hello world again\" ]", "output": "from collections import Counter\n\ndef most_common_phrase(string_list):\n    c = Counter(string_list)\n    return c.most_common(1)[0][0]\n\nmost_common_phrase([\"hello world\", \"hello\", \"hello world again\"])\n# output: 'hello world'", "category": "Python"}, {"instruction": "Use the regex module in python to remove all punctuation in a given string.", "input": "\"Hello, world!\"", "output": "import re\n\ndef remove_punc(string):\n    punc_pattern = re.compile('[^\\w\\s]')\n    return punc_pattern.sub('', string)\n\nremove_punc(\"Hello, world!\")\n# output: 'Hello world'", "category": "Python"}, {"instruction": "Create a program in python that takes a number as input and checks if it is a prime number", "input": "5", "output": "def is_prime(num):\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if (num % i == 0):\n                return False\n    return True\n\nis_prime(5)\n# output: True", "category": "Python"}, {"instruction": "Write a code that takes a list of strings and a string, and returns a list containing all strings from the given list that have the given string as a substring.", "input": "['Hello', 'Hello, world', 'Bonjour', 'My name is John']\nString: 'lo'", "output": "def find_substring(lst, query):\n    result = []\n    for el in lst:\n        if query in el:\n            result.append(el)\n    return result\n\nfind_substring(['Hello', 'Hello, world', 'Bonjour', 'My name is John'], 'lo')\n# output: ['Hello', 'Hello, world']", "category": "Python"}, {"instruction": "Write a function to convert a given list of strings into a dictionary where the key is a string in the list, and the value is the frequency of the string in the list.", "input": "[\"hello\", \"hello\", \"world\", \"welcome\", \"hello\"]", "output": "def list_to_dict(lst):\n    my_dict = {}\n    for i in lst:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    return my_dict\n\nlist_to_dict([\"hello\", \"hello\", \"world\", \"welcome\", \"hello\"]) \n# output: {'hello': 3, 'world': 1, 'welcome': 1}", "category": "Python"}, {"instruction": "Use Numpy or Pandas to calculate the mean of the following array.", "input": "array = [3, 4, 8, 10, 14]", "output": "import numpy as np\n\nmean = np.mean(array)\nprint(mean)", "category": "Python"}, {"instruction": "Given a list of numbers, write a Python code to replace negative numbers with 0 in the list.", "input": "data = [-4, -2, 5, 8, -1, 0]", "output": "data = [0, 0, 5, 8, 0, 0]\n\nresult = [0 if ele < 0 else ele for ele in data] # List comprehension", "category": "Python"}, {"instruction": "Create a function to generate random English sentences.", "input": "<noinputn>", "output": "import random\nimport nltk\n\ndef generate_sentences(num_sentences):\n    sentences = []\n    for _ in range(num_sentences):\n        sentence = []\n        while True:\n            word = random.choice(nltk.corpus.words.words())\n            sentence.append(word)\n            if word[-1] == '.':\n                break\n        sentences.append(' '.join(sentence))\n    return sentences", "category": "Python"}, {"instruction": "Create a copy of an existing array.", "input": "my_arr = [1, 2, 3]", "output": "import copy\n\nmy_arr_copy = copy.deepcopy(my_arr)", "category": "Python"}, {"instruction": "Compute the bulk density of a polyhedron using the formula $\\frac{mass}{volume}$.", "input": "mass = 3.5 g, volume = 2.6 cm$^3$", "output": "def compute_bulk_density(mass, volume):\n    \"\"\"Compute the bulk density of a polyhedron using the formula $\\frac{mass}{volume}$.\"\"\"\n    return mass / volume\n\nif __name__ == '__main__':\n    mass = 3.5 # g\n    volume = 2.6 # cm^3\n    print(compute_bulk_density(mass, volume))", "category": "Python"}, {"instruction": "Given an array with n numbers, write a function to find if there exists three elements in the array whose sum is equal to a given number.", "input": "array = [5, 3, 1, 8], number = 14", "output": "def sum_three_elements(array, number):\n    \"\"\"Given an array with n numbers, find if there exists three elements in the array whose sum is equal to a given number.\"\"\"\n    array.sort()\n    for i in range(len(array) - 2):\n        left = i + 1\n        right = len(array) - 1\n        while left < right:\n            temp = array[i] + array[left] + array[right]\n            if temp == number:\n                return True\n            elif temp < number:\n                left += 1\n            else:\n                right -= 1\n    return False\n\nif __name__ == '__main__':\n    a = [5, 3, 1, 8]\n    number = 14\n    print(sum_three_elements(a, number))", "category": "Python"}, {"instruction": "Print the sum of the first ten natural numbers.", "input": "", "output": "def sum_of_first_ten():\n    \"\"\"Print the sum of the first ten natural numbers.\"\"\"\n    total = 0\n    for i in range(1, 11):\n        total += i\n    return total\n\nif __name__ == '__main__':\n    print(sum_of_first_ten())", "category": "Python"}, {"instruction": "Construct a function to check whether a string is a valid IPv4 address or not.", "input": "", "output": "def is_valid_ipv4(string):\n    # Split the string at the '.'s\n    parts = string.split(\".\")\n\n    # Check if the length of the parts is valid\n    if len(parts) != 4:\n            return False\n\n    # Iterate over each part and check if it is a valid number\n    for part in parts:\n        if not part.isdigit() or int(part) > 255 or int(part) < 0:\n            return False\n\n    return True\n\nif __name__ == '__main__':\n    string = \"192.168.1.1\"\n    print(is_valid_ipv4(string))", "category": "Python"}, {"instruction": "Find the maximum product of three numbers in an array.", "input": "[1, -5, -6, 10, 20, 15]", "output": "def max_product_of_three(arr):\n    \"\"\"Find the maximum product of three numbers in an array.\"\"\"\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Return max product of the first three numbers\n    return arr[0] * arr[1] * arr[2]\n\nif __name__ == '__main__':\n    print(max_product_of_three([1, -5, -6, 10, 20, 15]))", "category": "Python"}, {"instruction": "Compress the following string using a Huffman algorithm.", "input": "\"aaaaaaaaabccddddee\"", "output": "import heapq\n\ndef huffman_encode(string):\n    freq = {}\n    for c in string:\n        freq[c] = freq.get(c, 0) + 1\n    \n    heap = [[weight, [char, \"\"]] for char, weight in freq.items()]\n    heapq.heapify(heap)\n\n    while len(heap) > 1:\n        low = heapq.heappop(heap)\n        high = heapq.heappop(heap)\n        for pair in low[1:]:\n            pair[1] = '0' + pair[1]\n        for pair in high[1:]:\n            pair[1] = '1' + pair[1]\n        heapq.heappush(heap, [low[0] + high[0]] + low[1:] + high[1:])\n    \n    encoded = \"\"\n    codes = dict()\n    for char, code in heap[0][1:]:    \n        codes[char] = code\n        encoded += code\n\n    return codes, encoded\n\nif __name__ == '__main__':\n    string = \"aaaaaaaaabccddddee\"\n    codes, encoded = huffman_encode(string)\n    print(encoded)", "category": "Python"}, {"instruction": "Check if two strings are an anagram of each other.", "input": "string1 = \"elbon\" string2 = \"noble\"", "output": "def is_anagram(string1, string2):\n    # Make sure strings are the same length\n    if len(string1) != len(string2):\n        return False\n\n    # Create dictionary of letter frequency for each string \n    char_freq1 = {}\n    char_freq2 = {}\n\n    # Iterate through each character in the strings\n    for char in string1:\n        char_freq1[char] = char_freq1.get(char, 0) + 1\n    for char in string2:\n        char_freq2[char] = char_freq2.get(char, 0) + 1\n\n    # Compare the two dictionaries\n    if char_freq1 == char_freq2:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    string1 = \"elbon\"\n    string2 = \"noble\"\n    print(is_anagram(string1, string2))", "category": "Python"}, {"instruction": "Create a function that recursively flattens an array of arbitrarily nested arrays.", "input": "array = [[1, [2, [3, [[4, 5], 6]]]], 7]", "output": "def flatten_list(l):\n  for el in l:\n    if isinstance(el, list):\n      yield from flatten_list(el)\n    else:\n      yield el", "category": "Python"}, {"instruction": "Create a function that returns the longest word in a sentence.", "input": "sentence = \"This is a sentence with lots of words.\"", "output": "def get_longest_word(sentence):\n    words = sentence.split()\n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word", "category": "Python"}, {"instruction": "Using the provided text, remove all punctuation and store the resulting output in a new variable.", "input": "text = \"This is a text string with punctuation!\"", "output": "import re\n\nnew_text = re.sub('[^\\w\\s]','', text)", "category": "Python"}, {"instruction": "Write a function to select the second max value in an array.", "input": "a = [1, 3, 6, 8, 7, 0]", "output": "def selectSecondMax(arr): \n    max_1 = 0\n    max_2 = 0\n  \n    for value in arr: \n        if (value > max_1): \n            max_2 = max_1 \n            max_1 = value \n        elif (value > max_2 and value != max_1): \n            max_2 = value\n    return max_2 \n  \na = [1, 3, 6, 8, 7, 0]\nprint(selectSecondMax(a)) # output: 6", "category": "Python"}, {"instruction": "Create a function to create a simple calculator for addition, subtraction, multiplication and division.", "input": "", "output": "def simple_calculator(action, a, b):\n    if action == \"add\":\n        return a + b\n    elif action == \"subtract\":\n        return a - b\n    elif action == \"multiply\":\n        return a * b\n    elif action == \"divide\":\n        return a / b\n    else:\n        return 0", "category": "Python"}, {"instruction": "Develop an algorithm for a breadth-first search.", "input": "", "output": "Breadth-first search (BFS) is an algorithm used to traverse a graph or tree data structure. The algorithm works by starting at the root node and exploring each of its adjacent nodes before exploring any of its children. The adjacent nodes are explored in the order with which they were discovered in the graph or tree. The algorithm moves from node to node by visiting the nearest neighbors first, as opposed to a depth-first search, which moves from node to node by exploring the furthest nodes first. The basic algorithm for a breadth-first search is as follows:\n\n1. Create an empty queue\n2. Enqueue the root\n3. While the queue is not empty: \n    a. Dequeue the next node\n    b. If it is the desired node, return success\n    c. Else, add all of its children to the queue\n4. Return failure", "category": "Python"}, {"instruction": "Develop a program to determine if a given year is a leap year.", "input": "year = 2024", "output": "# Determining if a year is a leap year\n\n# Assigning the current year\nyear = 2024\n\n# Checking if the year is a leap year\nif (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n    print(year, \"is a leap year\")\nelse:\n    print(year, \"is not a leap year\")", "category": "Python"}, {"instruction": "Suggest a method in Python to remove any whitespaces from a given string.", "input": "", "output": "The easiest way to remove whitespaces from a string in Python is to use the replace() method. This method takes two arguments, the string to be replaced and the string to replace it with. To remove all existing whitespace, use the string ' ' as the replace argument. For example, given the string \"This is my string\", the following code would remove all whitespace from the string:\n\nstring = \"This is my string\"\nstring = string.replace(' ', '')", "category": "Python"}, {"instruction": "Create a function to add two numbers without using the + operator.", "input": "", "output": "def add_numbers(a, b):\n  while b != 0:\n    carry = a & b\n    a = a ^ b\n    b = carry << 1\n  return a\n\nprint(add_numbers(3,4)) #Prints 7", "category": "Python"}, {"instruction": "Write a simple formatter to wrap the text at a given number of characters.", "input": "", "output": "def wrap_text(text, columns):\n  wrapped_text = \"\"\n  for i in range(0, len(text), columns):\n    wrapped_text += text[i:i+columns] + \"\\n\"\n  return wrapped_text\n \ntext = \"It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout.\"\nprint(wrap_text(text, 30)) \n\n# Prints\n# It is a long established \n# fact that a reader will \n# be distracted by the rea\n# dable content of a page \n# when looking at its layo\n# ut.", "category": "Python"}, {"instruction": "You need to implement a function that finds the longest string inside an array.", "input": "array = [\"cherry\", \"apple\", \"applepie\", \"strawberry\", \"raspberry\"]", "output": "def find_longest_str(arr):\n  longest_str = \"\"\n  for s in arr:\n    if len(s) > len(longest_str):\n      longest_str = s\n  return longest_str\n \nresult = find_longest_str(array)\nprint(result) # prints \"applepie\"", "category": "Python"}, {"instruction": "Write a function to delete an element from a given array", "input": "[1, 2, 3, 4], 3", "output": "def delete_element(arr, x):\n    new_arr = []\n    for i in arr:\n        if i != x: \n            new_arr.append(i)\n    return new_arr", "category": "Python"}, {"instruction": "Write a function that checks whether an array contains an element", "input": "[1, 5, 10]", "output": "def exists(arr, target):\n    for i in arr:\n        if i == target:\n            return True\n    return False", "category": "Python"}, {"instruction": "Write an algorithm that sorts the following list of integers in ascending order", "input": "[15, 5, 8, 0, 42]", "output": "def sort_list(lst):\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] > lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst", "category": "Python"}, {"instruction": "Write a function that takes a 2D array as input and returns the transposed array", "input": "[[1, 2], [3, 4], [5, 6]]", "output": "def transpose(arr):\n    new_arr = []\n    for i in range(len(arr[0])):\n        new_arr.append([row[i] for row in arr])\n    return new_arr", "category": "Python"}, {"instruction": "Create a function that returns the number of prime numbers between the numbers provided in the input.", "input": "start_num = 10\nend_num = 30", "output": "def count_primes(start_num, end_num):\n    primes_count = 0\n    for num in range(start_num, end_num + 1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                primes_count += 1\n    return primes_count", "category": "Python"}, {"instruction": "Write a function that computes the factorial of a positive integer.", "input": "8", "output": "def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n-1) \n\nprint(factorial(8)) # output: 40320", "category": "Python"}, {"instruction": "Convert a binary string to a decimal integer.", "input": "binString=\"11101\"", "output": "def binaryToDecimal(binString): \n    num = 0\n    for i in range(len(binString)): \n        num += int(binString[i]) * pow(2, len(binString)-1-i) \n    return num\n  \nbinString=\"11101\"\nbinaryToDecimal(binString) # output: 29", "category": "Python"}, {"instruction": "Compress a given string to shorter characters by replacing substrings of length 3.", "input": "string = \"aaabbcc\"", "output": "def compress(string):\n    compressed = \"\"\n    count = 1\n    for i in range(len(string)):\n        if (i+1 < len(string) and string[i] == string[i+1]):\n            count += 1\n        else:\n            if count > 3:\n                compressed += string[i] + str(count)\n            else:\n                compressed += string[i]*count\n            count = 1\n    return compressed\n\nstring = \"aaabbcc\"\nprint(compress(string)) # output: a3b2c2", "category": "Python"}, {"instruction": "Output the top 5 most common strings in a given list of strings.", "input": "[\"apple\", \"orange\", \"apple\", \"banana\", \"apple\", \"cherry\", \"banana\"]", "output": "from collections import Counter\nword_freq = Counter([\"apple\", \"orange\", \"apple\", \"banana\", \"apple\", \"cherry\", \"banana\"])\nwords = word_freq.most_common(5)\nfor word, freq in words:\n    print(word, freq)\n\nOutput:\napple 3\nbanana 2\norange 1\ncherry 1", "category": "Python"}, {"instruction": "Implement a search algorithm to find an element in an array.", "input": "Array: [2, 4, 6, 8, 10]\nElement to find: 8", "output": "def search(arr, elem):\n    for i in range(len(arr)):\n        if arr[i] == elem:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Edit the following code so that it prints the sum of all elements of given array", "input": "arr = [1,5,8,4,2]\ndef sumArray(arr):\n    for i in len(arr):\n        print(arr[i])", "output": "arr = [1,5,8,4,2]\ndef sumArray(arr):\n    total = 0\n    for i in arr:\n        total += i\n    print(total)", "category": "Python"}, {"instruction": "Write a routine to print the elements in a linked list.", "input": "", "output": "class Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n\ndef printList(head): \n    temp = head \n    while(temp): \n        print (temp.data, end=\" \") \n        temp = temp.next", "category": "Python"}, {"instruction": "Using the given data point, train a linear regression model.", "input": "[4, 7], [2, 5], [3, 6]", "output": "import numpy as np\n\nX = np.array([[4,7], [2,5], [3,6]])\ny = np.array([7, 5, 6])\n\nfrom sklearn.linear_model import LinearRegression  \nmodel = LinearRegression()  \nmodel.fit(X, y)", "category": "Python"}, {"instruction": "Create a list comprehension expression to generate a list of the squares of all even numbers from 1 to 10.", "input": "", "output": "[x**2 for x in range(1, 11) if x % 2 == 0]", "category": "Python"}, {"instruction": "Calculate the number of minutes in 3 hours using Python.", "input": "", "output": "minutes = 3 * 60\nprint(minutes)", "category": "Python"}, {"instruction": "Write a function in Python that accepts a list of numbers and returns a list of the squares of the numbers.", "input": "", "output": "def power_list(numbers):\n  return [num**2 for num in numbers]", "category": "Python"}, {"instruction": "Sum the numbers from 1 to 10 using a for loop in Python.", "input": "", "output": "total = 0\nfor i in range(1, 11):\n  total += i\n\nprint(total)", "category": "Python"}, {"instruction": "Write a Python program to create a dictionary with values being doubled for every key.", "input": "{'a':4, 'b':7}", "output": "my_dict = {'a': 4, 'b': 7} \ndouble_dict = {k : 2*v for (k,v) in my_dict.items()} \nprint(double_dict)", "category": "Python"}, {"instruction": "You need to parse a JSON string and access a value from it.", "input": "jsonString = {\n  \"name\": \"John Smith\",\n  \"age\": 25\n}", "output": "import json\n\njsonObject = json.loads(jsonString)\nname = jsonObject[\"name\"]", "category": "Python"}, {"instruction": "There is an array of integer numbers. You need to replace all the odd numbers with 0.", "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "def replace_odds_with_zero(arr):\n  for i in range(len(arr)):\n    if arr[i] % 2 == 1:\n      arr[i] = 0\n  return arr", "category": "Python"}, {"instruction": "How do you implement depth-first search in Python?", "input": "", "output": "def depth_first_search(graph, start):\n    explored = [] # List of already explored nodes\n    stack = [start] # Stack of nodes to explore\n\n    while stack:\n        node = stack.pop() # Pop the next node from stack\n        if node not in explored:\n            explored.append(node) # Add the node to explored\n            neighbors = graph[node] # List of neighbors of node\n            for neighbor in neighbors:\n                stack.append(neighbor) # Add neighbors to stack\n    \n    return explored", "category": "Python"}, {"instruction": "What is a lambda expression in Python?", "input": "", "output": "A lambda expression is an anonymous function in Python, which can take any number of arguments and return any type of expression or value. Lambda functions are mainly used for functional programming and can be used wherever normal functions can be used, such as in the filter, map, and reduce functions.", "category": "Python"}, {"instruction": "Create a function that deletes all non-alphanumeric characters from an input string.", "input": "", "output": "def clean_string(input_string):\n    alphaNumericString = [ch for ch in input_string if ch.isalnum()]\n    return ''.join(alphaNumericString)", "category": "Python"}, {"instruction": "How do you extract all the unique words from a string in Python?", "input": "", "output": "def get_unique_words(input_string):\n    words = input_string.split()\n    unique_words = set(words)\n    return list(unique_words) # Retruns a list of all unique words present in the string.", "category": "Python"}, {"instruction": "You mustreverse a given array of numbers in-place.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def reverse_array(arr):\n    low = 0\n    high = len(arr)-1\n    while low<high:\n        arr[low], arr[high] = arr[high], arr[low]\n        low += 1\n        high -= 1\n    return arr", "category": "Python"}, {"instruction": "You must refactor a code to reduce the complexity and improve its readability.", "input": "def is_even(num):\n    if num == 0:\n        return True\n    else:\n        return is_odd(num - 1)\n\ndef is_odd(num):\n    if num == 0:\n        return False\n    else:\n        return is_even(num - 1)", "output": "def is_even(num):\n    return num % 2 == 0\n\ndef is_odd(num):\n    return num % 2 != 0", "category": "Python"}, {"instruction": "You are given a string. Remove duplicated characters from the string and return the output.", "input": "string = \"Mississippi\"", "output": "def remove_duplicates(string): \n    new_string = [] \n    for i in string: \n        if i not in new_string: \n            new_string.append(i)    \n    return ''.join(new_string)", "category": "Python"}, {"instruction": "Create a function to convert a string of words into a dictionary with the words as keys.", "input": "string = \"Hello World Bye World\"", "output": "def string_to_dict(string):\n    data = string.split(' ') \n    answer = dict() \n    for element in data: \n        if element in answer: \n            answer[element] += 1\n        else: \n            answer[element] = 1\n    return answer", "category": "Python"}, {"instruction": "Perform insertion sort on a given array.", "input": "arr = [5, 1, 6, 2, 4, 3]", "output": "def insertionSort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and key < arr[j]:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = key\n    return arr\n\narr = [5, 1, 6, 2, 4, 3]\nprint(insertionSort(arr)) # output: [1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Write a function to retrieve and reverse the order of all words in a sentence.", "input": "sentence = \"This is a sentence.\"", "output": "def reverseSentence(sentence):\n    words = sentence.split()\n    rev_words = [word[::-1] for word in words]\n    return \" \".join(rev_words)\n\nsentence = \"This is a sentence.\"\nprint(reverseSentence(sentence)) # output: sihT si a ecnetnes.", "category": "Python"}, {"instruction": "Write a function to determine if two rectangles intersect.", "input": "rect1 = (x1, y1, w1, h1)\nrect2 = (x2, y2, w2, h2)", "output": "def is_intersect(rect1, rect2):\n    if rect1[0] > rect2[0] + rect2[2] or rect1[0] + rect1[2] < rect2[0] or rect1[1] > rect2[1] + rect2[3] or rect1[1] + rect1[3] < rect2[1]:\n        return False\n    else:\n        return True", "category": "Python"}, {"instruction": "Create a function that checks if a string contains all the vowels.", "input": "", "output": "def check_if_string_contains_all_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str_vowels = [ltr for ltr in string.lower() if ltr in vowels]\n    return len(str_vowels) == len(vowels)", "category": "Python"}, {"instruction": "Write a code snippet to print the minutes between two timestamps.", "input": "t1 = datetime.datetime(2020, 1, 1, 12, 0)\nt2 = datetime.datetime(2020, 1, 1, 15, 30)", "output": "from datetime import datetime, timedelta\n\nt1 = datetime(2020, 1, 1, 12, 0)\nt2 = datetime(2020, 1, 1, 15, 30)\n\nminutes_difference = int((t2-t1).total_seconds()/60)\nprint(\"The difference in minutes between the two timestamps is: \" + str(minutes_difference) + \" minutes.\")", "category": "Python"}, {"instruction": "Create a simple Python program that prints the characters of a string in reverse order.", "input": "String to be printed: \"Hello\"", "output": "string = \"Hello\" \n\nrevString = \"\" \nfor i in range(len(string)-1,-1,-1): \n\trevString = revString + string[i] \n  \nprint(revString)", "category": "Python"}, {"instruction": "let A be a n x n matrix, write a function to calculate the trace of A", "input": "A = [[1,2,3],[4,5,6],[7,8,9]]", "output": "def trace(A):\n    # initialize trace\n    trace = 0\n    \n    # loop through matrix A\n    for i in range(len(A)):\n        for j in range(len(A)):\n            # when i equals j\n            if i == j:\n                trace += A[i][j]\n\n    return trace", "category": "Python"}, {"instruction": "Generate a program to delete a node with a given value from the Linked List.", "input": "linked_list = [10, 5, 3, 4, 6, 5]\nvalue = 5", "output": "# Delete a Node from a Linked List\n \n# Node class \nclass Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \n# LinkedList class \nclass LinkedList: \n    def __init__(self): \n        self.head = None\n  \n    # Function to delete a node with a given value \n    def delete_by_value(self, value): \n        # Check if Linked List is empty \n        if self.head is None: \n            return \n  \n        # Keep a track of the current node\n        current = self.head \n  \n        # Check to delete the head node \n        if current.data == value: \n            self.head = current.next\n            current = None\n            return \n  \n        # Iterate through the Linked List\n        while current.next is not None: \n            # Get the next node \n            next_node = current.next\n            # Check if the node contains the value \n            if next_node.data == value: \n                # Delete the node and break out of the loop\n                current.next = None\n                current.next = next_node.next\n                break\n  \n            # Step to the next node\n            current = current.next\n  \n# Main Program \nlinked_list = LinkedList()\nlinked_list.head = Node(10)\nlinked_list.head.next = Node(5)\nlinked_list.head.next.next = Node(3)\nlinked_list.head.next.next.next = Node(4)\nlinked_list.head.next.next.next.next = Node(6)\nlinked_list.head.next.next.next.next.next = Node(5)\nvalue = 5\nlinked_list.delete_by_value(value)", "category": "Python"}, {"instruction": "Edit the code so that it can handle the fractions.", "input": "def calculate(x, y): \n    if isinstance(x, int) and isinstance(y, int): \n        return x + y \n    else: \n        return \"Please use integers only.\"", "output": "def calculate(x, y): \n    # Check if the numbers are integers or floats \n    if isinstance(x, (int, float)) and isinstance(y, (int, float)): \n        return x + y \n    else: \n        return \"Please use numbers only.\"", "category": "Python"}, {"instruction": "Generate a function that takes an array and computes the minimum element within the array.", "input": "array = [2,3,5,1,4]", "output": "# Calculate Minimum Element\ndef find_min(arr):\n    # Set a variable to store the minimum element of the array \n    minimum = arr[0] \n    # Compare each element of the array with the current min element \n    for i in range(1, len(arr)): \n        if arr[i] < minimum: \n            minimum = arr[i] \n    return minimum \n\n# Main Program\narray = [2,3,5,1,4]\nresult = find_min(array)\nprint(result)", "category": "Python"}, {"instruction": "Submit an algorithm to find the first non-repeating character of the given string.", "input": "string = \"bacdedbage\"", "output": "# Find First Non-Repeating Character\ndef first_non_repeat(string): \n    seen = {} \n\n    for char in string: \n        if char not in seen: \n            seen[char] = 0 \n        seen[char] += 1\n\n    # Find the first character that appears once\n    for i in range(len(string)): \n        if seen[string[i]] == 1: \n            return string[i] \n      \n    return '_'\n\n\n# Main Program\nstring = \"bacdedbage\"\nresult = first_non_repeat(string)\nprint(result)", "category": "Python"}, {"instruction": "Print the longest substring of a string that does not have any repeated characters.", "input": "string = \"abcaabccbad\"", "output": "# Longest Substring with no repeated chars\ndef longestSubstringWithoutDuplication(string): \n    longest = \"\" \n    start = 0 \n    seen = {} \n      \n    for i, char in enumerate(string): \n         # Stop current substring when repeating character is found\n        if char in seen and start <= seen[char]: \n            start = seen[char] + 1\n        # Add the character to the dictionary\n        seen[char] = i \n        # Update longest substring\n        longest = max(longest, string[start:i + 1], key = len) \n      \n    return longest\n\n# Main Program\nstring = \"abcaabccbad\"\nresult = longestSubstringWithoutDuplication(string)\nprint(result)", "category": "Python"}, {"instruction": "Submit a program to a computer that takes an array and reverses it.", "input": "array = [1,2,3,4,5]", "output": "# Reverse an Array\n\ndef reverse_array(arr): \n    return [arr[i] for i in range(len(arr)-1, -1, -1)] \n  \n# Driver program \narr = [1, 2, 3, 4, 5] \nresult = reverse_array(arr) \nprint(result)", "category": "Python"}, {"instruction": "Update the code to add to a given list all even numbers between 0 and 10 (inclusive).", "input": "my_list = []", "output": "my_list = []\nfor i in range(11):\n    if i % 2 == 0:\n        my_list.append(i)\n\nprint(my_list)  # prints [0, 2, 4, 6, 8, 10]", "category": "Python"}, {"instruction": "Using the comment as a guide, complete the code to reverse an array in-place.", "input": "def reverse_arr(arr):\n    \"\"\"Reverses an array in-place. This means the existing array will be modified!\"\"\"\n    # TODO: write the code here", "output": "def reverse_arr(arr):\n    \"\"\"Reverses an array in-place. This means the existing array will be modified!\"\"\"\n    # reverse the array in-place\n    for i in range(len(arr)//2): \n        arr[i], arr[len(arr)-i-1] = arr[len(arr)-i-1], arr[i]", "category": "Python"}, {"instruction": "Create a class called `Employee` that contains instances of a name, age, and salary.", "input": "", "output": "class Employee:\n    \"\"\"\n    This class contains instance variables of a name, age, and salary.\n    \"\"\"\n\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary", "category": "Python"}, {"instruction": "Write an algorithm to count the number of distinct values in an array", "input": "arr = [1, 2, 3, 2, 4, 5, 3, 2]", "output": "def count_distinct_values(arr):\n    # use a set to store the distinct values\n    distinct_values = set()\n    \n    # loop through the array\n    for i in arr:\n        # add each value to the set\n        distinct_values.add(i)\n    # return the size of the set\n    return len(distinct_values)", "category": "Python"}, {"instruction": "Write a Python while loop that iterates through the list `my_list` and prints each item.", "input": "my_list = [1, 2, 3, 4, 5]", "output": "i = 0\nwhile i < len(my_list):\n    print(my_list[i])\n    i += 1", "category": "Python"}, {"instruction": "Create a class for a bank account and include the following functions: deposit() and withdraw().", "input": "", "output": "class BankAccount:\n    def __init__(self, balance):\n        self.balance = balance\n    \n    def deposit(self, amount):\n        self.balance += amount\n    \n    def withdraw(self, amount):\n        self.balance -= amount", "category": "Python"}, {"instruction": "You need to provide an efficient way to implement a stack.", "input": "", "output": "class Stack:\n    def __init__(self):\n        self.items = []\n    \n    def push(self,item):\n        self.items.append(item)\n    \n    def pop(self):\n        return self.items.pop()\n    \n    def isEmpty(self):\n        return (self.items == [])", "category": "Python"}, {"instruction": "Write a function that produces an array of Fibonacci numbers with n numbers.", "input": "", "output": "def fibonacci(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    elif n > 2:\n        fib_nums = [0, 1]\n        for i in range(2, n):\n            fib_nums.append(fib_nums[i-1] + fib_nums[i-2])\n        return fib_nums", "category": "Python"}, {"instruction": "Create a function that takes an array as input and returns true if all elements in the array are similarly oriented (i.e. either all positive or all negative).", "input": "[-2, -4, -7, -9]", "output": "def is_all_same_sign(arr):\n    is_same_sign = True\n    for i in range(len(arr)):\n        if i == 0:\n            sign = (arr[i] >= 0)\n        else:\n            if (arr[i] < 0) != sign:\n                is_same_sign = False\n    return is_same_sign", "category": "Python"}, {"instruction": "Create a function that produces input strings for a calculator.", "input": "", "output": "def create_input_string(nums, ops):\n    input_str = \"\"\n    \n    for i in range(len(nums)):\n        if i == 0:\n            input_str += str(nums[i])\n        else:\n            input_str += ops[i - 1] + str(nums[i])\n    \n    return input_str", "category": "Python"}, {"instruction": "Create a dictionary where the keys are the integers up to 10, and the values are the cubes of those same integers.", "input": "", "output": "def create_dict():\n    cube_dict = {}\n    for i in range(1,11):\n        cube_dict[i] = i**3\n    return cube_dict", "category": "Python"}, {"instruction": "Write a Python script that takes in a string and prints out the frequency distribution of the letters in the string.", "input": "apple", "output": "def frequency_distribution(string):\n    \n    # create a dictionary of frequencies    \n    freq_dict = {}\n    for i in string:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    \n    # print the result\n    for key, value in freq_dict.items():\n        print (key + ': ' + str(value))", "category": "Python"}, {"instruction": "Design an algorithm that can be used to identify if a given binary tree is a valid BST.", "input": "", "output": "def isValidBST(root): \n\t\n\t# Base Case \n\tif root is None: \n\t\treturn True\n\t\t\n\t# Check recursive if left is valid \n\tif not isValidBST(root.left): \n\t\treturn False\n\n\t# If root's value is smaller than left subtree, not valid \n\tif root.left is not None and root.data < root.left.data: \n\t\treturn False\n\n\t# Check recursive if right is valid \n\tif not isValidBST(root.right): \n\t\treturn False\n\n\t# If root's value is greater than right subtree, not valid \n\tif root.right is not None and root.data > root.right.data: \n\t\treturn False\n\n\treturn True", "category": "Python"}, {"instruction": "Enhance the given code to add a search function.", "input": "def display_list(list):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for item in list:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(item)", "output": "def display_list(list, search_term=None):\n    for item in list:\n        if search_term is None or search_term in item:\n            print(item)", "category": "Python"}, {"instruction": "Debug the following code to correct a logical error.", "input": "def sort_list(nums):\n    sorted_nums = []\n    for i in range(len(nums)):\n        print(max(nums))\n        sorted_nums.append(max(nums))\n        nums.remove(max(nums))\n    return sorted_nums", "output": "def sort_list(nums):\n    sorted_nums = []\n    for i in range(len(nums)):\n        max_num = max(nums)\n        sorted_nums.append(max_num)\n        nums.remove(max_num)\n    return sorted_nums", "category": "Python"}, {"instruction": "Write a Python program to count the number of upper and lower case letters in a given string.", "input": "s = \u201cHello World\u201d", "output": "def count_letters(s):\n    upper_count = 0\n    lower_count = 0\n    for c in s:\n        if c.isupper():\n            upper_count += 1 \n        elif c.islower():\n            lower_count += 1 \n    return upper_count, lower_count", "category": "Python"}, {"instruction": "Write a function which takes in two parameters and returns the largest of them", "input": "num1 = 4, num2 = 3", "output": "def find_largest(num1, num2):\n    if num1 > num2:\n        return num1\n    else:\n        return num2", "category": "Python"}, {"instruction": "Construct a class in Python that describes a car", "input": "", "output": "class Car:\n    def __init__(self, brand, color):\n        self.brand = brand\n        self.color = color\n    def describe(self):\n        return \u201cThis car is a {} and it is {}.\u201d.format(self.brand, self.color)", "category": "Python"}, {"instruction": "Write a function to convert a timestamp from epoch time to human readable time", "input": "epoch = 1597968470", "output": "import datetime\ndef epoch_to_human_time(epoch):\n    # convert timestamp to human readable time\n    human_time = datetime.datetime.utcfromtimestamp(epoch).strftime('%Y-%m-%d %H:%M:%S')\n    # return human readable time\n    return human_time", "category": "Python"}, {"instruction": "Construct a binary search tree from the given array of integers.", "input": "[ 10, 5, 15, 1, 8, 12, 2 ]", "output": "class Node: \n    def __init__(self, data): \n        self.data = data  \n        self.left = None\n        self.right = None\n  \ndef insert(root,data): \n    if root is None: \n        return Node(data) \n    else: \n        if root.data > data: \n            root.left=insert(root.left,data) \n        else: \n            root.right=insert(root.right, data) \n        return root \n\nroot = None\nnodes = [10, 5, 15, 1, 8, 12, 2] \nfor data in nodes:\n    root = insert(root, data)", "category": "Python"}, {"instruction": "Convert the binary input to its decimal value.", "input": "binary = \"1101\"", "output": "def binary_to_decimal(binary):\n    decimal = 0\n    for digit in binary:\n        decimal = decimal * 2 + int(digit)\n    return decimal\n\nprint(binary_to_decimal(\"1101\"))\n\n# Output:\n13", "category": "Python"}, {"instruction": "Generate 10 random numbers between 5 to 10.", "input": "", "output": "import random\n\n# Generate 10 random numbers between 5 and 10\nrandom_numbers = [random.randint(5, 10) for _ in range(10)]\n\nprint(\"The 10 random numbers are: \", random_numbers)", "category": "Python"}, {"instruction": "Compute the centroid of given points using mathematical formulas.", "input": "points = [(2, 3), (4, 7), (6, 9)]", "output": "def calculate_centroid(points): \n    n = len(points) \n  \n    centroidX = sum(row[0] for row in points) / n\n    centroidY = sum(row[1] for row in points) / n\n     \n    return [centroidX, centroidY] \n  \npoints = [(2, 3), (4, 7), (6, 9)] \nprint(calculate_centroid(points))", "category": "Python"}, {"instruction": "What are lambda expressions in Python?", "input": "", "output": "Lambda expressions in Python are anonymous functions that can take in arguments and return a value. They are commonly used for performing operations on collections of data, or for making code more concise.", "category": "Python"}, {"instruction": "Using the below array, create an object with key for individual item and value for the count of the item.", "input": "['Apple', 'Apple', 'Orange', 'Banana']", "output": "items = ['Apple', 'Apple', 'Orange', 'Banana']\n\ncount = {}\nfor item in items:\n    if item in count:\n        count[item] += 1\n    else:\n        count[item] = 1\n\nprint(count)", "category": "Python"}, {"instruction": "Create a function in Python that prints out the numbers from 0 to the given parameter.", "input": "10", "output": "def printnumbers(n):\n    for i in range(n+1):\n        print(i)\n\nprintnumbers(10)", "category": "Python"}, {"instruction": "Create a Python script for removing all whitespace from a given string.", "input": "string = \" Hi There \"", "output": "no_whitespace = string.replace(\" \", \"\")\nprint(no_whitespace)", "category": "Python"}, {"instruction": "Create a function to calculate the value of \"e\" to the nth term.", "input": "term = 5", "output": "def calculate_e(term): \n    e = 0\n    for i in range(term + 1): \n        e += 1 / math.factorial(i) \n    return e", "category": "Python"}, {"instruction": "Using the list of numbers, create a filter in Python that removes all odd numbers from the list.", "input": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "filtered_list = list(filter(lambda x: x % 2 == 0, numbers))", "category": "Python"}, {"instruction": "Create a class called Person with two variables, name and age, and two methods, getName() and setAge().", "input": "", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n \n    def getName(self):\n        return self.name\n \n    def setAge(self, age):\n        self.age = age", "category": "Python"}, {"instruction": "Output the command line argument received by a Python function.", "input": "", "output": "import sys\n\ndef get_command_line_arg():\n    print(sys.argv[1])", "category": "Python"}, {"instruction": "Describe the different data types available in Python.", "input": "", "output": "The different data types available in Python include strings, integers, floats, tuples, lists, dictionaries, sets, booleans, and None.", "category": "Python"}, {"instruction": "Define a function to calculate the median of a given array of numbers.", "input": "", "output": "def median(numbers):\n    sorted_numbers = sorted(numbers)\n\n    if len(numbers) % 2 == 1:\n        return sorted_numbers[len(numbers)//2]\n    else:\n        middle1 = sorted_numbers[len(numbers)//2]\n        middle2 = sorted_numbers[len(numbers)//2 - 1]\n        return (middle1 + middle2) / 2", "category": "Python"}, {"instruction": "What are the different ways to loop through a list in Python?", "input": "", "output": "The different ways of looping through a list in Python are the for loop, the while loop, the list comprehension, and the map() function.", "category": "Python"}, {"instruction": "Add the two given integer variables using a Python script.", "input": "a = 5\nb = 10", "output": "sum = a + b\nprint(sum)", "category": "Python"}, {"instruction": "Write a function that given a positive number, returns the sum of all positive numbers from 1 to the given number.", "input": "number = 10", "output": "def sum_numbers(number):\n    # Initialize sum\n    total = 0\n    # Iterate through 1 to number\n    for i in range(1, number + 1):\n        total += i\n    return total\n\nsum_result = sum_numbers(10)\nprint('Total sum: {}'.format(sum_result))", "category": "Python"}, {"instruction": "Given a list of numbers, construct a function that returns the highest and the lowest numbers.", "input": "numbers = [3, 10, 2, 8, 5]", "output": "def get_min_max(numbers):\n    # Set min and max to first number\n    lowest = numbers[0]\n    highest = numbers[0]\n    # Iterate through each number \n    for num in numbers:\n        if num < lowest:\n            lowest = num\n        if num > highest:\n            highest = num\n    # Return min and max in a tuple\n    return (lowest, highest)\n\nmin_max_nums = get_min_max([3, 10, 2, 8, 5])\nprint(min_max_nums)", "category": "Python"}, {"instruction": "Create a function that given a string of words, counts the frequency of each word.", "input": "word_string = \"I am learning a lot of new things!\"", "output": "def count_word_frequencies(word_string):\n    # Split string into separate words\n    words = word_string.split()\n    # Initialize dictionary for word frequencies\n    word_freqs = {}\n    # Iterate through each word\n    for word in words:\n        if word in word_freqs:\n            # Increment count if word already in dictionary\n            word_freqs[word] += 1\n        else:\n            # Add word if first time it appears\n            word_freqs[word] = 1\n\n    return word_freqs\n\nword_frequencies = count_word_frequencies(\"I am learning a lot of new things!\")\nprint(word_frequencies)", "category": "Python"}, {"instruction": "Write a function that given a list of strings, filters out empty strings.", "input": "string_list = [\"Hello\", \"\", \"Bye\", \"\", \"See you!\"]", "output": "def filter_empty_strings(string_list):\n    return [string for string in string_list if string]", "category": "Python"}, {"instruction": "Write a code to display the current directory path in the terminal.", "input": "", "output": "import os\n\ncurrdir = os.getcwd()\nprint(currdir)", "category": "Python"}, {"instruction": "Create a function to generate a random string with the given length.", "input": "Length = 8", "output": "import string\nimport random\n\ndef generate_random_string(length):\n    char_list = \"\".join(random.sample(string.ascii_letters, length))\n    return char_list", "category": "Python"}, {"instruction": "Write a function that takes a string and returns the number of times the string occurs in the given array", "input": "string = \"hello\", arr = [\"hello\", \"hi\", \"hello\", \"salut\"]", "output": "def count_string_occurrences(string, arr):\n    # initialize count\n    count = 0\n    # loop through array\n    for i in arr:\n        # if element equals string, increment count\n        if i == string:\n            count += 1\n    # return count\n    return count", "category": "Python"}, {"instruction": "Offer a solution to the following programming problem", "input": "Given a list of strings, return the longest string", "output": "def longest_string(string_list):\n    longest_string = \"\"\n    for s in string_list:\n        if len(s) > len(longest_string): \n            longest_string = s\n    return longest_string", "category": "Python"}, {"instruction": "Develop a python program to search for a substring in a string.", "input": "String = \"This is a sample string\"\nSubstring = \"sample\"", "output": "def search_substring(string, substring):\n    start = 0\n    index = -1\n\n    while start < len(string):\n        i = string.find(substring, start)\n        if i == -1:\n            break\n        else:\n            index = i\n            start = i + 1\n\n    return index", "category": "Python"}, {"instruction": "Write an algorithm to find the maximum substring in the given string.", "input": "abcadefghi", "output": "def findMaxSubstring(string):\n    max_len = 0\n    max_substring = \"\"\n    for i in range(len(string)):\n        current_substring = []\n        for j in range(i, len(string)):\n            if string[j] not in current_substring:\n                current_substring.append(string[j])\n            else:\n                break\n        if len(current_substring) > max_len:\n            max_len = len(current_substring)\n            max_substring = ''.join(current_substring)\n    return max_substring", "category": "Python"}, {"instruction": "Write a function which checks if a number is a prime number.", "input": "", "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Suggest a suitable algorithm for sorting an array of numbers in increasing order.", "input": "", "output": "A suitable algorithm for sorting an array of numbers in increasing order could be the Quick Sort algorithm. This algorithm has an average time complexity of O(nlog(n)), making it an efficient sorting algorithm for large datasets.", "category": "Python"}, {"instruction": "Suggest a suitable data structure for storing employee information.", "input": "", "output": "A suitable data structure for storing employee information could be a hash table, where the keys are the employee IDs, and the values are the employee details such as name, role, and contact details. This data structure would provide efficient lookups, while being easy to maintain and update.", "category": "Python"}, {"instruction": "Construct a custom data type that is capable of representing the information of a student in a college.", "input": "", "output": "A custom data type that is capable of representing the information of a student in a college could be a dictionary where the keys represent different student details, such as name, student ID, GPA, and course load. The values for each key would be the respective information for a particular student.", "category": "Python"}, {"instruction": "Define an application programming interface (API) for a given program.", "input": "", "output": "An application programming interface (API) for a program can be defined as a set of routines, protocols, and tools that provide access services for a software component. An API can expose some aspects of a program's functionality, such as creating a user or managing database records, so that other programs can interact with it and access its data.", "category": "Python"}, {"instruction": "Complete the function below to make a list of n numbers and return the result.", "input": "n = 5", "output": "def create_list(n):\n  result = [] \n  for i in range(0,n): \n    result.append(i) \n  return result", "category": "Python"}, {"instruction": "Parse the following JSON string and extract all the keys into a list.", "input": "jsonString = '{\"name\": \"John\", \"age\": 20, \"location\": \"New York\"}'", "output": "import json\n\njsonString = '{\"name\": \"John\", \"age\": 20, \"location\": \"New York\"}'\n\n# Use json.loads to parse the string\ndata = json.loads(jsonString)\n\n# initializing a list\nlist = []\n\n# extract the keys \nfor key in data:\n    list.append(key)\n    \nprint(list)\n\n# Output: ['name', 'age', 'location']", "category": "Python"}, {"instruction": "Create a for-loop in Python that iterates through a list of numbers and prints out only the numbers in the list that are divisible by 5.", "input": "myList = [10,11,20,21,30,31,40]", "output": "for i in myList:\n    if i % 5 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Write a function that returns the largest number in a list.", "input": "List: [1,2,3,4,5,6]", "output": "def get_largest(lst):\n    largest = 0\n    for i in range (0,len(lst)):\n        if lst[i] > largest:\n            largest = lst[i]\n    return largest\n\n# Driver code\nmyList = [1,2,3,4,5,6]\nprint(get_largest(myList)) # Output: 6", "category": "Python"}, {"instruction": "Write a function to generate a random password based on the given parameters.", "input": "Parameters: Length of password must be 8 characters, must contain at least one uppercase letter, contain at least one lowercase letter and must include at least one number", "output": "import random\nimport string\n\ndef generate_password(min_length, max_length, upper_case, lower_case, number):\n    password = []\n    for _ in range(min_length, max_length + 1):\n        password.append(random.choice(string.ascii_lowercase if lower_case else '') +\n                        random.choice(string.ascii_uppercase if upper_case else '') +\n                        random.choice(string.digits if number else ''))\n    \n    random.shuffle(password)\n    return ''.join(password)\n\n# Driver code\nprint(generate_password(8, 8, True, True, True))", "category": "Python"}, {"instruction": "Write a list comprehension to generate a list of all prime numbers less than 100.", "input": "[noinput]", "output": "# An efficient list comprehension to generate a list of prime numbers\n# less than 100\nprime_numbers = [num for num in range(2, 100) \n                 if all(num % i != 0 for i in range(2, int(pow(num, 0.5) + 1)))]", "category": "Python"}, {"instruction": "Write a Python script to return the index of a specific value from a given list.", "input": "List: [1,2,3,4,5]\nValue: 4", "output": "list = [1,2,3,4,5]\nvalue = 4\n\nindex_value = list.index(value)\nprint(index_value) # 3", "category": "Python"}, {"instruction": "Write a Python program to find the number of days in a month specified by the user.", "input": "Month: February", "output": "days = 28\n\nif month == 'February':\n    print(days)\nelse:\n    print('Invalid Month')", "category": "Python"}, {"instruction": "Create a data frame that for a given set of students contains their name, age, and grade level.", "input": "John (age 18, grade 12),\nJane (age 17, grade 11),\nTom (age 19, grade 13),\nEmily (age 17, grade 11).", "output": "import pandas as pd\n\ndf = pd.DataFrame({\n    \"Name\": [\"John\",\"Jane\",\"Tom\",\"Emily\"],\n    \"Age\": [18,17,19,17],\n    \"Grade Level\": [12,11,13,11]\n})\n\nprint(df)", "category": "Python"}, {"instruction": "Create a new class 'Dog' with a private attribute 'name' and two public methods 'bark' and 'setName'.", "input": "", "output": "class Dog:\n    __name = \"\"\n    \n    def __init__(self, name):\n        self.__name = name\n    \n    def bark(self):\n        print(\"Woof!\")\n    \n    def setName(self, name):\n        self.__name = name", "category": "Python"}, {"instruction": "Write a Python for loop to produces the following output:", "input": "", "output": "for i in range(1, 11):\n    print(f\"{i}x{i} = {i*i}\")\n\n// Output:\n1x1 = 1\n2x2 = 4\n3x3 = 9\n4x4 = 16\n5x5 = 25\n6x6 = 36\n7x7 = 49\n8x8 = 64\n9x9 = 81\n10x10 = 100", "category": "Python"}, {"instruction": "Find the frequency of each letter in the given string.", "input": "string = \"banana\"", "output": "freq = {} \n  \nfor i in string: \n    if i in freq: \n        freq[i] += 1\n    else: \n        freq[i] = 1\n# freq is {'b': 1, 'a': 3, 'n': 2}", "category": "Python"}, {"instruction": "Format the following list of strings according to the desired output.", "input": "input_strings = [\"Hello\", \"world\", \"in\", \"Python\"]", "output": "input_strings = [\"Hello\", \"world\", \"in\", \"Python\"]\n\noutput_string = ' '.join(input_strings)\noutput_string = output_string.capitalize() + '!'\nprint(output_string) \n# Output: Hello world in python!", "category": "Python"}, {"instruction": "Create a function to check if a given string contains valid JSON data and returns true if it does.", "input": "string_to_check = \"{'name': 'John', 'age': 30}\"", "output": "def check_valid_json(string_to_check):\n    try:\n        json.loads(string_to_check)\n        return True\n    except Exception as e:\n        return False", "category": "Python"}, {"instruction": "Develop a program to generate a random integer from 1 to 100.", "input": "", "output": "import random\n \nrandom_int = random.randint(1,100)\nprint(random_int)", "category": "Python"}, {"instruction": "Create a function that takes in two parameters ``str_1``and ``str_2``and returns a boolean indicating whether or not ``str_1`` is contained in ``str_2``.", "input": "str_1 = \"hello\", str_2 = \"hello world\"", "output": "def is_string_contained(str_1, str_2):\n    return str_1 in str_2", "category": "Python"}, {"instruction": "Rewrite the following code snippet to an equivalent code in Python.", "input": "int i = 0;\nwhile (i < 10)\n{\n   System.out.println(i);\n   i++;\n}", "output": "i = 0\nwhile i < 10:\n    print(i)\n    i += 1", "category": "Python"}, {"instruction": "Create an array of 10 people in Python.", "input": "", "output": "people = [\"John\", \"Mia\", \"Nick\", \"Sarah\", \"Emma\", \"Alex\", \"Jayden\", \"Olivia\", \"Lucas\", \"Ava\"]", "category": "Python"}, {"instruction": "Write a code to get the top 5 Twitter trends in the US.", "input": "", "output": "\"\"\"\nGet the top 5 Twitter trends in the US\n\"\"\"\n\nimport tweepy\n\ndef get_top_trends():\n    # Setup authorization\n    auth = tweepy.OAuthHandler('','')\n    auth.set_access_token('','')\n    api = tweepy.API(auth)\n\n    # Get trends\n    trends_result = api.trends_place(23424977)\n    trends = trends_result[0]['trends']\n\n    # Get top 5 trends\n    top_trends = []\n    for trend in trends:\n        if trend['tweet_volume'] is not None and len(top_trends) < 5:\n            top_trends.append(trend['name'])\n\n    return top_trends\n\nif __name__ == '__main__':\n    print(get_top_trends())", "category": "Python"}, {"instruction": "Modify the following code to handle large numbers correctly.", "input": "def factorial(n):  \n   fact = 1\n   for i in range(1, n+1): \n       fact *= i \n   return fact", "output": "def factorial(n):\n    fact = 1\n    for i in range(1, n+1): \n        fact = fact*i % 10**10\n    return fact % 10**10", "category": "Python"}, {"instruction": "Write a Python function to create an empty dictionary.", "input": "", "output": "def create_empty_dict():\n  return {}", "category": "Python"}, {"instruction": "Write a Python program to display even numbers between two intervals.", "input": "", "output": "def print_even_numbers_in_range(start, end):\n    for i in range(start, end+1):\n        if i % 2 == 0:\n            print(i)\n\nprint_even_numbers_in_range(2, 10)", "category": "Python"}, {"instruction": "Write a function to fill an array of size n with random integers in the range 0...k-1.", "input": "", "output": "def random_fill_array(n, k):\n    arr = []\n    for _ in range(n):\n        arr.append(random.randint(0, k-1))\n    return arr", "category": "Python"}, {"instruction": "Implement a method that verifies whether an array of numbers is in increasing order.", "input": "arr = [2, 3, 5, 10, 15]", "output": "def is_increasing_order(arr):\n    for i in range(len(arr)-1):\n        if arr[i+1] <= arr[i]:\n            return False\n    return True", "category": "Python"}, {"instruction": "How do you sort an array of integers in ascending and descending order?", "input": "", "output": "The easiest way to sort an array of integers in ascending order is to use the built-in sorting function in the programming language of your choice. For example, in Python, the sorted() function can be used. Similarly, to sort an array of integers in descending order, you can use the sorted() function with the reverse argument set to True.", "category": "Python"}, {"instruction": "Write a code that finds the most frequent element in a list.", "input": "data = [1, 2, 3, 2, 3, 2, 1, 2, 3]", "output": "def find_most_frequent(data):\n    counts = {}\n    for item in data:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n    most_frequent_item = max(counts, key=counts.get)\n    return most_frequent_item", "category": "Python"}, {"instruction": "Is it possible to create a copy of a multi-dimensional array in Python?", "input": "", "output": "Yes, it is possible to create a copy of a multi-dimensional array in Python using the copy or deepcopy methods from the copy module. These methods return a new object that is a shallow or deep copy of an array respectively.", "category": "Python"}, {"instruction": "Implement the function compute_sum() that takes an array of integers and return their sum.", "input": "arr = [1, 5, 7, -2, 3]", "output": "def compute_sum(arr):\n    result = 0\n    for num in arr:\n        result += num\n    return result", "category": "Python"}, {"instruction": "Use Python to design a function that concatenates two given strings.", "input": "\"Hello\" and \"World\"", "output": "def concatStrings(a, b): \n\treturn a + \" \" + b \n \nstring1 = \"Hello\"\nstring2 = \"World\"\n \nprint(concatStrings(string1, string2)) # Output: Hello World", "category": "Python"}, {"instruction": "Write a Python program to check if a string starts with a letter 'A'.", "input": "str = \"I love apples\"", "output": "if str.startswith(\"A\"):\n  print(\"The string starts with 'A'.\")\nelse:\n  print(\"The string does not start with 'A'.\")", "category": "Python"}, {"instruction": "Rewrite the following code snippet in Python to multiply an array of two numbers with each element in the array.", "input": "var numbers = [3, 5];\n\nfor (var i = 0; i < numbers.length; i++) {\n  numbers[i] = numbers[i] * 2;\n}", "output": "numbers = [3, 5]\n\nfor i in range(len(numbers)):\n  numbers[i] *= 2", "category": "Python"}, {"instruction": "Explain the differences between the sorting algorithms Insertion Sort and Bubble Sort", "input": "", "output": "Insertion sort and bubble sort are two of the most common sorting algorithms. Insertion sort is based on iterating and swapping through a list to find the right location for each element. Each element is compared to the previous element and swapped if it is out of order. Bubble sort is based on comparing each pair of adjacent elements and swapping them if they are out of order. Insertion sort has a time complexity of O(n^2) in average and worst-case scenarios, while bubble sort has a time complexity of O(n^2) in both. Bubble sort requires fewer comparison compared to insertion sort, however insertion sort requires fewer swaps. Therefore, insertion sort is usually more efficient when sorting a partially sorted list.", "category": "Python"}, {"instruction": "Write a Python function for transforming all characters of a string to upper case.", "input": "string: 'Hello World!'", "output": "def toUpperCase(string):\n    return string.upper()\n\n# Output: HELLO WORLD!", "category": "Python"}, {"instruction": "Generate a custom URL for a Google search.", "input": "Search: Python Programming", "output": "https://www.google.com/search?q=python+programming", "category": "Python"}, {"instruction": "Create a function to calculate the total discount when given items to purchase and their corresponding discounts.", "input": "item_list = [\"shirt\", \"trees\", \"shoes\"]\ndiscount_list = [0.25, 0.3, 0.2]", "output": "def calculate_total_discount(items, discounts):\n    total_discount = 0\n    for i in range(len(items)):\n        total_discount += discounts[i]\n    return total_discount", "category": "Python"}, {"instruction": "Create a block of code which sorts the given list in increasing order.", "input": "List = [10, 4, 5, 7, 2]", "output": "# Create a new list to store the sorted elements\nsortedList = []\n\n# Loop through the given list and add the sorted elements to the new list\nwhile List:\n    minimum = List[0]\n    for x in List: \n        if x < minimum:\n            minimum = x\n    sortedList.append(minimum)\n    List.remove(minimum)\n\n# Print the sorted list\nprint(sortedList) # Output: [2, 4, 5, 7, 10]", "category": "Python"}, {"instruction": "Create a request handler for a POST request in Python Flask.", "input": "", "output": "# Import the necessary libraries\nfrom flask import Flask, request\n\n# Initialize the app\napp = Flask(__name__) \n  \n@app.route('/post_request_handler', methods = ['POST']) \ndef post_request_handler(): \n\n    # Extract the data from POST request \n    data = request.get_json()  \n\n    # Do something with the data\n\n    # Return a response\n    return \"Post request handled\", 200", "category": "Python"}, {"instruction": "Write a for loop in python for printing the square of numbers from 0 to 4.", "input": "", "output": "for num in range(5):\n    print(num**2)", "category": "Python"}, {"instruction": "Implement a function that is able to sum two integers, without using the '+' operator.", "input": "x = 10\ny = 20", "output": "def sum_without_plus(x,y):\n    while y != 0:\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n    return x\n\nresult = sum_without_plus(x, y)\nprint (result)\n# Output: 30", "category": "Python"}, {"instruction": "Develop a function that is able to print a list of consecutive numbers between 1 and N, given an integer N as argument.", "input": "N = 5", "output": "def print_n_numbers(N):\n    for x in range(1,N+1):\n        print (x) \n\nprint_n_numbers(N) \n# Output: 1 2 3 4 5", "category": "Python"}, {"instruction": "Develop a function that is able to compute the number of days between two dates.", "input": "date1 = \"27 April, 2020\"\ndate2 = \"8 May, 2020\"", "output": "from datetime import datetime \n  \ndef days_between_dates(date1, date2): \n    date1 = datetime.strptime(date1, \"%d %B, %Y\") \n    date2 = datetime.strptime(date2, \"%d %B, %Y\") \n    return (date2 - date1).days \n\noutput = days_between_dates(date1, date2) \nprint (output) \n# Output: 11", "category": "Python"}, {"instruction": "Output a list that contains all the non-repeating characters from a given string.", "input": "string = \u201cthequickbrownfoxjumpsoverthelazydog\u201d", "output": "def non_repeating_characters(string):\n    character_set = set() \n    for c in string: \n        if c not in character_set: \n            character_set.add(c)\n    return list(character_set)\n\noutput = non_repeating_characters(string)\n# Output: ['h', 'd', 'g', 'u', 'e', 'm', 'o', 'p', 'q', 't', 'v', 'i', 'c', 'b', 'k', 'x', 'f', 'z', 'a', 'y', 'r', 'w', 'l', 'n', 's', 'j']", "category": "Python"}, {"instruction": "Develop a function to compute the cost of a route.", "input": "distance_matrix=[\n [ 0, 10, 15, 20 ], \n [ 10, 0, 35, 25 ], \n [ 15, 35, 0, 30 ], \n [ 20, 25, 30, 0 ]\n]\n\nroute = [0, 2, 3, 1]", "output": "def get_route_cost(distance_matrix,route):\n    cost = 0\n    for i in range(len(route)-1):\n        cost += distance_matrix[route[i]][route[i+1]]\n    return cost\n  \nroute_cost = get_route_cost(distance_matrix, route) \nprint (route_cost) \n# Output: 90", "category": "Python"}, {"instruction": "What is the most efficient way to search for a specific item in an array?", "input": "", "output": "The most efficient way to search for a specific item in an array is to use a binary search algorithm. Binary search works by repeatedly dividing the array in half until the desired item is found. This method has a time complexity of O(log n).", "category": "Python"}, {"instruction": "How do you check if a given string is in a list?", "input": "", "output": "You can check if a given string is in a list by using the \"in\" keyword. For example, if you have a list of strings [\"apple\", \"banana\", \"orange\"] and you want to check if the string \"banana\" is in the list, you can use the following syntax: \n\nif \"banana\" in lst:\n    print(\"String is in list\")", "category": "Python"}, {"instruction": "Using binary search, find the index of a given number in an array of length n.", "input": "", "output": "def binary_search(arr, x):\n    low = 0\n    high = len(arr)-1\n    while low<=high:\n        mid = (low+high)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1", "category": "Python"}, {"instruction": "Given a list of words, write a Python program to find all pairs of distinct indices (i, j) in the given list, so that the concatenation of the two words, i.e. words[i] + words[j] is a palindrome.", "input": "words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"]", "output": "def find_palindrome_pairs(words): \n    res = [] \n    for i in range(len(words)): \n  \n        for j in range(len(words)): \n            if i != j: \n                word = words[i] + words[j] \n                if word == word[::-1]: \n                    res.append((i, j)) \n    return res \nprint(find_palindrome_pairs(words))", "category": "Python"}, {"instruction": "Create a function in Python that takes a sentence as an argument and returns the formatted sentence with the first letter of each word capitalized.", "input": "sentence = \"this is a sentence\"", "output": "def capitalize_sentence(sentence):\n  words = sentence.split()\n  capitalized_words = [word.capitalize() for word in words]\n  return \" \".join(capitalized_words)", "category": "Python"}, {"instruction": "Given an array of numbers, write a Python function to remove even numbers from the array.", "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "def remove_even_numbers(arr):\n    return [x for x in arr if x % 2 != 0]", "category": "Python"}, {"instruction": "Create a NumPy array to store the values of a given function.", "input": "import numpy as np\n\ndef f(x):\n    return x**2", "output": "xs = np.linspace(0,10,100)\nys = np.array([f(x) for x in xs])", "category": "Python"}, {"instruction": "Read in a 2D array with three columns.", "input": "[[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9]]", "output": "# Create an empty list\narray = []\n\n# Iterate over the 2D array\nfor row in array_input:\n    \n    # Create a temporary list\n    temp_list = []\n\n    # Iterate over each column\n    for col in row:\n        temp_list.append(col)\n\n    # Append the temporary list to the array\n    array.append(temp_list)", "category": "Python"}, {"instruction": "Normalize a given vector.", "input": "vector = [2, 5, 6]", "output": "# Calculate sum of vector elements\nvector_sum = 0\nfor x in vector:\n    vector_sum += x\n\n# Normalize vector\nnormalized_vector = [x/vector_sum for x in vector]\n\n# Print the normalized vector\nprint(normalized_vector)", "category": "Python"}, {"instruction": "Write code to store an input string in a hashmap with the count of its occurrence as the value", "input": "The input string is \"apple\".", "output": "string = \"apple\"\ncount_map = dict()\n\nfor char in string:\n    if char in count_map:\n        count_map[char] += 1\n    else:\n        count_map[char] = 1\n\nprint(count_map)", "category": "Python"}, {"instruction": "Describe a method for adding two numbers that uses a stack data structure", "input": "", "output": "A method for adding two numbers using a stack data structure involves the following steps: \n1. Push the two numbers onto the stack. \n2. Pop the two numbers off the stack and add them together. \n3. Push the result onto the stack.\n4. Pop the result off the stack and return it as the final answer.", "category": "Python"}, {"instruction": "Describe an algorithm for sorting an array of n integers in O(n log n) time.", "input": "", "output": "A sorting algorithm applicable to an array of n integers in O(n log n) time is Merge Sort. Its procedure first divides the input array into two halves until there are no more divisions are possible. This is the \"divide and conquer\" step of the algorithm. Then, each pair of divided arrays is sorted and merged into a single, sorted array. This is the \"combine\" step of the sorting algorithm. Finally, the sorted sub-arrays are combined in an organized manner to obtain the final sorted array. This algorithm is considered to be efficient, as it runs in O(n log n) time, where n is the number of elements in the array.", "category": "Python"}, {"instruction": "Write a Python script to merge two given dictionaries into one", "input": "dict1 = {'a': 1, 'c': 3, 'd': 4}\ndict2 = {'a': 6, 'b': 2, 'c': 4}", "output": "dict1 = {'a': 1, 'c': 3, 'd': 4}\ndict2 = {'a': 6, 'b': 2, 'c': 4}\n\ndict3 = {**dict1, **dict2}\nprint(dict3) # {'a': 6, 'c': 4, 'd': 4, 'b': 2}", "category": "Python"}, {"instruction": "Create a python program to implement a Binary Search in an array", "input": "arr = [2, 3, 4, 10, 40]\nx = 10", "output": "def binarySearch(arr, x):\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = int((low + high)/2)\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            return mid\n    return -1\narr = [2, 3, 4, 10, 40]\nx = 10\nresult = binarySearch(arr, x)\nif result != -1:\n    print(\"Element is present at index\",result) \nelse:\n    print(\"Element is not present in array\")", "category": "Python"}, {"instruction": "Write a python program to extract the substring from a string after a specific character", "input": "string = \"Hello,World!\"\ncharacter = \",\"", "output": "string = \"Hello,World!\"\ncharacter = \",\"\nresult = string[string.find(character)+1:]\nprint(result) # World!", "category": "Python"}, {"instruction": "Construct a while loop statement to print only even numbers between 0 to 10 in Python.", "input": "", "output": "i = 0\n\nwhile i <= 10: \n if i % 2 == 0:\n print(i)\n i = i + 1", "category": "Python"}, {"instruction": "Add up the elements of a given matrix.", "input": "matrix = [[1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9]]", "output": "# Initialize the sum\nsum = 0\n\n# Iterate over the matrix\nfor row in matrix:\n    # Iterate over the elements of each row\n    for elem in row:\n        # Add up the elements\n        sum += elem\n\n# Print the sum\nprint(sum)", "category": "Python"}, {"instruction": "How to generate all permutations of a given list of items?", "input": "", "output": "def permutation(lst):\n \n if len(lst) == 0:\n return []\n \n if len(lst) == 1:\n return [lst]\n \n l = []\n \n for i in range(len(lst)):\n m = lst[i]\n remLst = lst[:i] + lst[i+1:]\n \n for p in permutation(remLst):\n l.append([m] + p)\n \n return l", "category": "Python"}, {"instruction": "Using a for loop and an if statement, count how many even numbers are in the given array.", "input": "[1,2,3,4]", "output": "count = 0\nfor num in [1,2,3,4]:\n if num % 2 == 0:\n count += 1", "category": "Python"}, {"instruction": "Change the following variable declaration into Python.", "input": "int num = 10;", "output": "num = 10", "category": "Python"}, {"instruction": "Write code to check if the word 'python' is present in a given string.", "input": "string = 'I love the programming language Python'", "output": "def string_has_python(string):\n  return 'python' in string", "category": "Python"}, {"instruction": "Given a list of strings, write a Python program to print each individual string in uppercase.", "input": "string_list = [\"apple\",\"banana\",\"oranges\"]", "output": "def print_uppercase(string_list):\n  for string in string_list:\n    print(string.upper())", "category": "Python"}, {"instruction": "From a list of numbers, find the smallest number using Python.", "input": "[21, 9, 67, 34]", "output": "\"\"\"\nFrom a list of numbers, find the smallest number using Python.\n\"\"\"\n\n# Initialize the list of numbers\nlist_of_nums = [21, 9, 67, 34]\n\n# Sort the list in order\nlist_of_nums.sort()\n\n# Print the first element of the sorted list\nprint(list_of_nums[0])", "category": "Python"}, {"instruction": "Sort all strings in a list alphabetically, using Python.", "input": "[\"apple\", \"dog\", \"cat\", \"banana\"]", "output": "\"\"\"\nSort all strings in a list alphabetically, using Python.\n\"\"\"\n\n# Initialize the list of strings\nlist_of_strings = [\"apple\", \"dog\", \"cat\", \"banana\"]\n\n# Sort the list alphabetically\nlist_of_strings.sort()\n\n# Print the sorted list\nprint(list_of_strings)", "category": "Python"}, {"instruction": "Write a Python program to convert a string to a list. The string is \"This is a test\".", "input": "\"This is a test\"", "output": "\"\"\"\nWrite a Python program to convert a string to a list.\n\"\"\"\ndef string_to_list(str):\n    return str.split()\n\nif __name__ == '__main__':\n    str = \"This is a test\"\n    print(string_to_list(str))", "category": "Python"}, {"instruction": "Given a 2-d array, write a method to flatten the array.", "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def flatten(arr):\n    flat_list = []\n    for sublist in arr:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list", "category": "Python"}, {"instruction": "Construct a class in Python named \"Person\" which stores first name and last name in instance variables", "input": "", "output": "class Person:\n  def __init__(self, first_name, last_name):\n    self.first_name = first_name\n    self.last_name = last_name", "category": "Python"}, {"instruction": "Create a function in Python to take two numbers as input and return their sum.", "input": "", "output": "def add_nums(num1, num2):\n    return num1 + num2", "category": "Python"}, {"instruction": "Print all the elements of the given 2D array in row-wise order.", "input": "arr = [[1,2], [3,4]]", "output": "for row in arr:\n for ele in row:\n print(ele)", "category": "Python"}, {"instruction": "Create a list of numbers in the range [0, 10) that are divisible by 3.", "input": "", "output": "# Initialize an empty list\nlist_by_3 = []\n\n# Iterate over the range\nfor i in range(0, 10):\n    # Check if the number is divisible by 3    \n    if i % 3 == 0:\n        # Append it to the list\n        list_by_3.append(i)\n\n# Print the list\nprint(list_by_3)", "category": "Python"}, {"instruction": "Generate a dictionary with keys being the list elements and values being the list indexes.", "input": "mylist = ['a','b','c','d']", "output": "# Initialize an empty dictionary\ndict_list = {}\n\n# Iterate over the list\nfor i, item in enumerate(mylist):\n    # Add the elements of the list as keys with the index as their value\n    dict_list[item] = i\n\n# Print the dictionary\nprint(dict_list)", "category": "Python"}, {"instruction": "Calculate the maximum of an input array.", "input": "mylist = [1, 4, 5, 6, 8, -3]", "output": "# Initialize the max\nmax = mylist[0]\n\n# Iterate over the list\nfor i in mylist:\n    # Check for bigger value\n    if i > max:\n        # Update the max\n        max = i\n\n# Print the max\nprint(max)", "category": "Python"}, {"instruction": "Using Python, write a code snippet to identify the capital of a given country.", "input": "Country: India", "output": "if country == 'India':\n  capital = 'New Delhi'\nprint(capital)", "category": "Python"}, {"instruction": "Add a method to a given class to check if an element is present in it.", "input": "", "output": "class MyClass:\n  def __init__(self, elements):\n    self.elements = elements\n\n  def contains(self, element):\n    return element in self.elements", "category": "Python"}, {"instruction": "Using TensorFlow, create a model that predicts the price of an item from its features.", "input": "", "output": "import tensorflow as tf\n\n# Define the inputs, weights and bias.\ninputs = tf.keras.Input(shape=(features))\nweights = tf.keras.layers.Dense(3, activation='relu')(inputs)\nbias = tf.Variable(tf.random_normal([1]))\n\n# Create the model.\nmodel = tf.keras.Model(inputs, weights + bias)\n\n# Compile and fit the model.\nmodel.compile(optimizer='adam', loss='mse', metrics=['accuracy'])\nmodel.fit(x_train, y_train, validation_split=0.2, epochs=50)", "category": "Python"}, {"instruction": "Convert the following code snippet from Python 2 code to Python 3 code.", "input": "x = raw_input(\"What is your name? \")", "output": "x = input(\"What is your name? \")", "category": "Python"}, {"instruction": "List the primitive data types of the language Python.", "input": "", "output": "Python data types include integers, floating-point numbers, strings, Booleans, lists, sets, dictionaries, tuples, and None.", "category": "Python"}, {"instruction": "Explain how a hash table works.", "input": "", "output": "A hash table is a data structure that stores key-value pairs where the key is used to generate a unique index, or \"hash\". The hash is then used to access the value associated with the key. This allows for quick lookups of the data as the index is calculated from the key, resulting in an efficient way to store and retrieve the data.", "category": "Python"}, {"instruction": "Differentiate between a stack and a queue.", "input": "", "output": "A stack is a data structure that operates on a Last-In-First-Out (LIFO) principle, meaning the element that was added last will be removed first. A queue is a data structure that works on a First-In-First-Out (FIFO) principle, meaning the element that was added first will be removed first. Stacks are often used to reverse the order of elements or to store data temporarily, while queues are used for processing queues of data such as tasks and messages.", "category": "Python"}, {"instruction": "Provide an example of a memoization technique in programming.", "input": "", "output": "An example of a memoization technique in programming is to store the result of a function call in a lookup table. When the function is called for the same input in the future, the stored result can be accessed quickly from the lookup table instead of needing to calculate it again, resulting in improved performance.", "category": "Python"}, {"instruction": "How does a recursive function work?", "input": "", "output": "A recursive function is a function that calls itself in order to complete its task. When a recursive function is called, it will break the problem into smaller sub-problems, and call itself with the smaller sub-problems. This process will repeat until the smallest sub-problem is solved, at which point the recursive function will return the result of all the sub-problems it encountered.", "category": "Python"}, {"instruction": "Summarize the following article in less than 100 words.", "input": "Machine Learning is an advanced course that is currently trending in the tech world. With the help of machine learning, many complex patterns and functions can be solved using algorithms and mathematical models. The ever-increasing advancements in technology also mean that the applications of machine learning are also widening every day.", "output": "Machine Learning is a powerful tool utilized in the tech industry to unlock complex patterns and functions. Advances in hardware and software technologies are allowing machine learning to be used in wider applications than ever before, making it a growing trend in the industry. It involves algorithms and mathematical models to complete tasks, resulting in improved efficiency and practical solutions to existing problems.", "category": "Python"}, {"instruction": "Write code to find the longest word in the given list and output it.", "input": "words_list = [\"apple\", \"mango\", \"banana\", \"blueberry\"]", "output": "def find_longest_word(lst):\n    longest_word = \"\"\n    for word in lst:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word", "category": "Python"}, {"instruction": "Output code for a function that will remove all instances of an element from a given list.", "input": "my_list = [1, 3, 5, 3, 7, 9, 3]", "output": "def remove_element(lst, element):\n    return [x for x in lst if x != element]", "category": "Python"}, {"instruction": "Write a function to sum up all the elements in a given list and output the result.", "input": "my_list = [2, 4, 9, 16]", "output": "def sum_list_elements(lst):\n    result = 0\n    for num in lst:\n        result += num\n    return result", "category": "Python"}, {"instruction": "Output the code for a function to generate the Fibonacci sequence up to the given number n.", "input": "", "output": "def generate_fibonacci(n):\n    fibonacci_list = [0, 1]\n    i = 1\n    while i < n:\n        fibonacci_list.append(fibonacci_list[i] + fibonacci_list[i-1])\n        i = i + 1\n    return fibonacci_list", "category": "Python"}, {"instruction": "Output code for a function that prints the multiplication table of a given number.", "input": "", "output": "def multiplication_table(num):\n    for i in range(1, 11):\n        print(num, 'x', i, '=', num*i)", "category": "Python"}, {"instruction": "How can you sort a list in decending order in Python?", "input": "", "output": "my_list = [4, 8, 19, 6, 17, 11]\n\nsorted_list = sorted(my_list, reverse=True)", "category": "Python"}, {"instruction": "Create a class with two methods which will print out strings \"Hello\" and \"Goodbye\".", "input": "", "output": "class MyClass:\n    def hello_method(self):\n        print(\"Hello\")\n    \n    def goodbye_method(self):\n        print(\"Goodbye\")", "category": "Python"}, {"instruction": "How can you concatenate two strings in Python?", "input": "", "output": "# Using the + operator \nstr1 = \"Hi\"\nstr2 = \" there!\"\nstr3 = str1 + str2 \nprint(str3)\n\n# Output: Hi there!\n\n# Using the join() method\nstr1 = \"Hi\"\nstr2 = \" there!\"\nstr3 = \"\".join([str1, str2]) \nprint(str3)\n\n# Output: Hi there!", "category": "Python"}, {"instruction": "Write an algorithm to calculate the nth Fibonacci number.", "input": "", "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)", "category": "Python"}, {"instruction": "Write a class to represent a point in a 2-D plane.", "input": "", "output": "class Point: \n    \n    def __init__(self, x_coordinate, y_coordinate): \n        self.x = x_coordinate \n        self.y = y_coordinate \n  \n    def get_x(self): \n        return self.x \n  \n    def get_y(self): \n        return self.y \n  \n    def set_x(self, x_coordinate): \n        self.x = x_coordinate \n  \n    def set_y(self, y_coordinate): \n        self.y = y_coordinate \n  \n    def distance(self, other_point): \n        x_diff_sq = (self.x - other_point.x) * (self.x - other_point.x) \n        y_diff_sq = (self.y - other_point.y) * (self.y - other_point.y) \n          \n        return (x_diff_sq + y_diff_sq) ** 0.5 \n  \np1 = Point(1, 2) \np2 = Point(3, 4) \n\nprint(p1.distance(p2))", "category": "Python"}, {"instruction": "Find the index of the first character in a string that is not a space.", "input": "string: \"    Hello world!\"", "output": "def find_index(string): \n    for i in range(len(string)):  \n        if string[i] != ' ': \n            return i \n    return -1\n\nstring = \"    Hello world!\"\nprint(find_index(string))", "category": "Python"}, {"instruction": "Write a recursive function to calculate the Fibonacci sequence.", "input": "", "output": "def fibo(n): \n  \n    if n <= 1: \n        return n \n    else: \n        return(fibo(n-1) + fibo(n-2)) \n  \n# take input from the user \nnterms = 10\n\n# check if the number of terms is valid \nif nterms <= 0: \n   print(\"Please enter a positive integer\") \nelse: \n   print(\"Fibonacci sequence:\") \n   for i in range(nterms): \n       print(fibo(i))", "category": "Python"}, {"instruction": "Create a function that takes a list of numbers and removes all elements that occur more than once.", "input": "[1, 2, 3, 1, 2, 5]", "output": "def remove_duplicates(numbers): \n    new_list = [] \n    for num in numbers: \n        if num not in new_list: \n            new_list.append(num) \n    return new_list \n\nprint (remove_duplicates([1, 2, 3, 1, 2, 5]))", "category": "Python"}, {"instruction": "Generate a properly formatted JSON object in Python to represent the following details: name = John, age = 34", "input": "", "output": "{\n  \"name\": \"John\",\n  \"age\": 34\n}", "category": "Python"}, {"instruction": "Write a Tensorflow code for building a neural network with two input layers, two hidden layers and one output layer.", "input": "", "output": "model = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(64, activation='relu', input_shape=[2]),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(1)\n])", "category": "Python"}, {"instruction": "Alter the following python code such that it prints \"Hello, world!\"", "input": "for x in range(1,10):\n    print(x)", "output": "for x in range(1,10):\n    if x == 5:\n        print('Hello, world!')\n    else:\n        print(x)", "category": "Python"}, {"instruction": "Visualize the following dataset using a bar chart in matplotlib.", "input": "labels = ['A', 'B', 'C', 'D', 'E', 'F']\nvalues = [8, 5, 7, 12, 4, 10]", "output": "import matplotlib.pyplot as plt\n\nlabels = ['A', 'B', 'C', 'D', 'E', 'F']\nvalues = [8, 5, 7, 12, 4, 10]\n\nplt.bar(labels, values)\nplt.title('Dataset')\nplt.xlabel('Category') \nplt.ylabel('Value')\nplt.show()", "category": "Python"}, {"instruction": "Create a loop in Python that prints the integers between 1 and 10 (including 1 and 10).", "input": "", "output": "for i in range(1, 11):\n  print(i)", "category": "Python"}, {"instruction": "Create a for loop to print all the even numbers between 1 and 10 (including 1 and 10).", "input": "", "output": "for i in range(1, 11):\n    if i % 2 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Analyze the following list of strings and find the most frequent character.", "input": "strings = [\"hello\", \"world\", \"foo\", \"bar\"]", "output": "strings = [\"hello\", \"world\", \"foo\", \"bar\"]\n\nchar_counts = {}\nfor string in strings:\n    for char in string:\n        if char not in char_counts:\n            char_counts[char] = 0\n        char_counts[char] += 1\n\nmost_frequent = max(char_counts, key=lambda k: char_counts[k])\nprint(most_frequent) # prints l", "category": "Python"}, {"instruction": "Given an array of integers and an integer k, write a program to find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k.", "input": "[1,3,5,7,3,9], k=3", "output": "def solution(arr, target):\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, i + target + 1):\n            if j >= len(arr):\n                break\n            if arr[i] == arr[j]:\n                return True\n    return False", "category": "Python"}, {"instruction": "Generate a Delete API endpoint in Python Flask for a user to delete their data from a database.", "input": "", "output": "@app.route('/delete/<int:user_id>', methods=['DELETE'])\ndef delete(user_id):\n   user = db.query.get(user_id)\n   db.session.delete(user)\n   db.session.commit()\n   return jsonify({'message':'User deleted successfully'})", "category": "Python"}, {"instruction": "Construct a Django view that outputs the following string", "input": "Hello World!", "output": "from django.http import HttpResponse\n\ndef hello_world(request):\n return HttpResponse(\"Hello World!\")", "category": "Python"}, {"instruction": "Construct a loop to apply a function to each element of a list", "input": "[2, 5, 8], function square", "output": "def apply_function(list, f):\n    for i in range(len(list)):\n        list[i] = f(list[i])\n    return list\n\ndef square(x):\n    return x*x\n\nlist = [2, 5, 8]\napply_function(list, square)", "category": "Python"}, {"instruction": "Generate code to create a PDF report from a given dataset.", "input": "The dataset contains information about customer orders.", "output": "def generate_report(data):\n    doc = PDFDocument()\n    title = doc.add_heading('Customer Report', 0)\n    doc.add_page_break()\n\n    table = doc.add_table(rows=1, cols=2)\n    table.style = 'TableGrid'\n    header_row = table.rows[0]\n    header_row.cells[0].text = 'Order ID'\n    header_row.cells[1].text = 'Amount'\n\n    rows = len(data)\n    for row in range(rows):\n        new_row = table.add_row()\n        new_row.cells[0].text = str(data[row][0])\n        new_row.cells[1].text = '{:.2f}'.format(data[row][1])\n\n    doc.add_page_break()\n    doc.save('Customer_Report.pdf')", "category": "Python"}, {"instruction": "Write a Python program to divide the numbers in the list by a given number", "input": "[2, 4, 10], 2", "output": "def divide_list(list, n):\n    return [x/n for x in list]", "category": "Python"}, {"instruction": "Generate a 10x10 multiplication table in Python.", "input": "", "output": "for i in range(1,11): \n   for j in range(1,11): \n        print(i*j, end = \"\\t\") \n   print()", "category": "Python"}, {"instruction": "Write a Python snippet to print from 1 to 10 (inclusive) using a for loop", "input": "", "output": "for i in range(1, 11):\n  print(i)", "category": "Python"}, {"instruction": "How would you solve this leetcode problem in Python?", "input": "Problem: Implement the following function\n\n```def majorityElement(self, nums: List[int]) -> int:```\n\nGiven an array of size n, find the majority element. The majority element is the element that appears more than \u230a n/2 \u230b times.", "output": "def majorityElement(self, nums: List[int]):\n    majority_count = len(nums)//2\n    num_count = {}\n    for num in nums:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    for key, value in num_count.items():\n        if value > majority_count:\n            return key", "category": "Python"}, {"instruction": "Create a python program that takes a keyword as an input and prints the top 10 relevant Wikipedia articles for that keyword", "input": "", "output": "import wikipedia\n\ndef get_top_ten_results(keyword):\n    results = wikipedia.search(keyword, results=10)\n    for result in results:\n        print(result)", "category": "Python"}, {"instruction": "Change the following code from Python to JavaScript", "input": "def add_numbers(a, b):\n    return a + b", "output": "function addNumbers(a, b) {\n    return a + b; \n}", "category": "Python"}, {"instruction": "How can you make a dictionary key iterable in Python?", "input": "", "output": "A dictionary in Python can be made iterable using a for loop. To iterate over the keys of a dictionary, we can use the ``dict.keys()`` method which returns an iterable object of the keys in the dictionary. This iterable can then be used to iterate over the keys of the dictionary.", "category": "Python"}, {"instruction": "Given an array of integers, sort the array in-place using quick sort.", "input": "[12, 8, 9, 10, 4]", "output": "def quickSort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    pivot = arr[len(arr)//2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n\n    return quickSort(left) + middle + quickSort(right)", "category": "Python"}, {"instruction": "For a given array of numbers, find the length of the longest increasing subsequence", "input": "[1, 5, 4, 3, 8, 10, 6]", "output": "def longest_increasing_subsequence(arr):\n    n = len(arr)\n    lis = [1] * n \n  \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n    return maximum", "category": "Python"}, {"instruction": "Create a code that can be used to perform a linear search in an array.", "input": "[1, 3, 5, 7, 8, 9], 8", "output": "func linearSearch(_ array: [Int], _ x: Int) -> Int {\n    for (index, value) in array.enumerated() {\n        if value == x {\n            return index\n        }\n    }\n    return -1\n}\n\nprint(linearSearch([1, 3, 5, 7, 8, 9], 8))", "category": "Python"}, {"instruction": "Generate a random password with at least 8 characters and with at least 1 number and 1 letter.", "input": "", "output": "import string \nimport random \n\ndef generate_password(n):  # n is the length of the password\n  \n    alphabet = string.ascii_letters + string.digits\n    password = ''.join(random.choice(alphabet) for i in range(n))\n    while not any(c.isdigit() for c in password) or not any(c.isalpha() for c in password):\n        password = ''.join(random.choice(alphabet) for i in range(n))\n    return password\n\nprint(generate_password(8))", "category": "Python"}, {"instruction": "Come up with a Python generator expression to iterate over a given list and return only even elements.", "input": "[1, 2, 3, 4, 5, 6, 7, 8]", "output": "even_list = (x for x in [1, 2, 3, 4, 5, 6, 7, 8] if x%2 == 0)", "category": "Python"}, {"instruction": "Modify the following python code to calculate the average of a list of numbers.", "input": "def list_average(numbers):\n    '''This function will calculate the average of a list of numbers.'''", "output": "def list_average(numbers):\n    '''This function will calculate the average of a list of numbers.'''\n    return sum(numbers) / len(numbers)", "category": "Python"}, {"instruction": "Compare and contrast the advantages and disadvantages of using AJAX for a website.", "input": "", "output": "AJAX provides several advantages for a website. It allows for asynchronus data transfer between the server and the client, making it possible to update a web page without refreshing the whole page. It also improves the user experience by providing a faster, smoother interface. By minimizing server load, AJAX facilitates better scalability.\n\nOn the other hand, AJAX can lead to slower response times, especially if a large amount of data is being transferred. It can also be difficult to debug since errors are often not visible to the user or the developer. Additionally, AJAX requires JavaScript to be enabled, which may not be the case for all users.", "category": "Python"}, {"instruction": "How to debug a program in Python?", "input": "", "output": "In Python, debugging a program can be done by using a debugger to step through code line by line and checking the current state of the values, variables, objects, and functions. Using a debugger is useful for understanding the exact flow of code and finding errors or unexpected behavior. Python also provides a number of built-in debugging tools such as the ``pdb`` module which can be used to debug a program.", "category": "Python"}, {"instruction": "Write a Python snippet to print the same message 10 times.", "input": "", "output": "for _ in range(10):\n  print(\"Hello World!\")", "category": "Python"}, {"instruction": "Write a function in Python to move the last element of a given list to the beginning of the list.", "input": "", "output": "def move_last_to_front(list):\n  list[0], list[-1] = list[-1], list[0]\n  return list", "category": "Python"}, {"instruction": "Reverse the order of the values in the input list using Python.", "input": "list = [1, 4, 5, 6, 7]", "output": "list = [7, 6, 5, 4, 1]\n\ndef reverse_list(input_list):\n    \"\"\"Reverse the order of the values in the input list.\"\"\"\n    return input_list[::-1]\n\nif __name__ == '__main__':\n    list = [1, 4, 5, 6, 7]\n    print(reverse_list(list))", "category": "Python"}, {"instruction": "Create a loop in Python to find the sum of all integers from 1 to 100.", "input": "", "output": "total = 0\nfor num in range(1, 101): \n    total+= num \n\nprint(\"Sum of all integers from 1 to 100 is\", total)", "category": "Python"}, {"instruction": "Create a Python dictionary with key-values pairs (fruit-quantity) as listed below.", "input": "apple = 5, banana = 10, orange = 15", "output": "fruit_dict = {\n    \"apple\":5,\n    \"banana\":10,\n    \"orange\":15\n    }", "category": "Python"}, {"instruction": "Design an algorithm for sorting data in ascending order using selection sort.", "input": "", "output": "def selection_sort(arr):\n\n    for i in range(len(arr)):\n        min_index = i\n        for j in range(i+1, len(arr)):\n            if arr[min_index] > arr[j]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n\n    return arr", "category": "Python"}, {"instruction": "Write a Python program to sort the dictionary by key.", "input": "myDict = {'a': 1, 'c': 3, 'b': 2}", "output": "sortedDict = sorted(myDict)\nfor key in sortedDict:\n    print(key, ':', myDict[key])", "category": "Python"}, {"instruction": "Write a function to reverse the contents of a stack.", "input": "", "output": "def reverseStack(stack):\n    revStack = []\n \n    while len(stack) > 0:\n        top = stack.pop()\n        revStack.append(top)\n \n    return revStack", "category": "Python"}, {"instruction": "How would you print the sum of all elements in a 2-dimensional array?", "input": "array=[[1,2], [3,4], [5,6]]", "output": "sum=0\nfor i in range(len(array)):\n    for j in range(len(array[i])):\n        sum+= array[i][j] \n\nprint(sum)", "category": "Python"}, {"instruction": "Rewrite the following code snippet from an object-oriented programming perspective.", "input": "def find_greeting(name):\n    if name == \"Alice\":\n        return \"Hi Alice!\"\n    else:\n        return \"Hello!\"", "output": "This code snippet can be rewritten using an object-oriented programming approach by creating two classes - Greeting and Person. \n\nclass Person:\n    def __init__(self, name):\n        self.name = name\n\nclass Greeting:\n    def __init__(self):\n        self.greetings = {\"Alice\": \"Hi Alice!\",\n                          \"default\": \"Hello!\"}\n\n    def find_greeting(self, person):\n        if person.name in self.greetings:\n            return self.greetings[person.name]\n        else:\n            return self.greetings[\"default\"]", "category": "Python"}, {"instruction": "Rewrite this code snippet from a functional programming perspective.", "input": "def is_even_sum(nums):\n    return sum([1 for x in nums if x % 2 == 0]) > 0", "output": "This code snippet can be rewritten using a functional programming approach by using the built-in any() function.\n\ndef is_even_sum(nums):\n    return any(x % 2 == 0 for x in nums)", "category": "Python"}, {"instruction": "How would you improve the efficiency of the following code snippet?", "input": "def get_total(list):\n    total = 0 \n    for item in list:\n        total += item\n    return total", "output": "One way to improve the efficiency of this code snippet is to use the built-in sum() function. This avoids having to manually iterate over the list and keep a running total. So the code can be rewritten as:\n\ndef get_total(list):\n    return sum(list)", "category": "Python"}, {"instruction": "Explain what the following python code prints out.", "input": "for i in range(10):\n    print(i**2)", "output": "The code prints out the squares of the numbers 0 to 9, i.e., 0, 1, 4, 9, 16, 25, 36, 49, 64 and 81.", "category": "Python"}, {"instruction": "Write a code that prints all the possible outcomes of rolling two dice.", "input": "", "output": "def roll_two_dices():\n    for i in range(1, 7):\n        for j in range(1, 7):\n            print(f\"({i}, {j})\")", "category": "Python"}, {"instruction": "Remove the extra spaces from a given string and make the spaces between letters and words consistent.", "input": "\"  The  quick  brown fox  jumps  over  the lazy  dog  \"", "output": "def remove_extra_spaces(s):\n    s = s.strip()\n    words = s.split(\" \")\n    result = \"\"\n    for word in words:\n        if word:\n            result += word + \" \"\n    return result.strip()", "category": "Python"}, {"instruction": "Write a Python code that reverses the order of words in a sentence.", "input": "\"This is a sentence\"", "output": "def reverseWords(sentence): \n  return ' '.join(sentence.split()[::-1])\n\n# Output: \"sentence a is This\"", "category": "Python"}, {"instruction": "Write a Python code to find all the prime numbers below a given number.", "input": "", "output": "def get_primes(n): \n  primes = [] \n  for num in range(2, n+1): \n    is_prime = True     \n    for div in range(2, n): \n      if (num % div == 0): \n        is_prime = False      \n    if is_prime: \n      primes.append(num) \n  return primes", "category": "Python"}, {"instruction": "Given a binary search tree and a target value, write a python function to search for the closest node value to the target.", "input": "", "output": "def closestInBST(root, target):\n  res = root.val\n  while root:\n    if root.val == target:\n      return root.val\n    if abs(root.val-target) < abs(res-target):\n      res = root.val\n    if target < root.val:\n      root = root.left\n    else:\n      root = root.right\n  return res", "category": "Python"}, {"instruction": "Construct an array in Python of size 10 and fill it with random integers from 0 to 5.", "input": "", "output": "import random\n\narray = []\nfor i in range(10):\n  array.append(random.randint(0,5))\n  \nprint(array)", "category": "Python"}, {"instruction": "Create a Python program that takes two lists as arguments, and returns a list that contains the elements present in both lists.", "input": "list1 = [2, 3, 4, 5] \nlist2 = [1, 4, 6]", "output": "def common_elements_of_two_lists(list1, list2): \n    result = [] \n    for element in list1: \n        if element in list2: \n            result.append(element) \n    return result", "category": "Python"}, {"instruction": "Edit the following code to make the output more reusable.", "input": "def get_name(names):\n    print(\"Here's my name:\")\n    for name in names:\n        print(name)\n    return", "output": "def get_name(names):\n    result = []\n    for name in names:\n        result.append(name)\n    return result", "category": "Python"}, {"instruction": "Construct the code which will generate addition equations with randomized numbers ranging from 0 to 5.", "input": "", "output": "import random\n\ndef generate_addition_equation():\n\n    a = random.randrange(0, 6)\n    b = random.randrange(0, 6)\n\n    equation = str(a) + \" + \" + str(b) + \" = \"\n\n    return equation", "category": "Python"}, {"instruction": "Using the function you wrote in 4.\nWrite a Python program to convert a binary list to an integer", "input": "binary_list = [1, 0, 1, 0]", "output": "def binary_list_to_int(binary_list):\n    return int(''.join(str(x) for x in binary_list), 2)", "category": "Python"}, {"instruction": "Add a new key-value pair (\"year\": 2020) to the given dictionary using Python.", "input": "dictionary = {\"name\": \"John\", \"age\": 30}", "output": "dictionary = {\"name\": \"John\", \"age\": 30}\n\ndef add_year(dictionary):\n    \"\"\"Add a new key-value pair (\"year\": 2020) to the dictionary\"\"\"\n    dictionary[\"year\"] = 2020\n    return dictionary\n\nif __name__ == '__main__':\n    dictionary = {\"name\": \"John\", \"age\": 30}\n    print(add_year(dictionary))", "category": "Python"}, {"instruction": "Create a Python script to combine two lists into a dictionary", "input": "list1 = [1, 2, 3]\nlist2 = [\"a\", \"b\", \"c\"]", "output": "list1 = [1, 2, 3]\nlist2 = [\"a\", \"b\", \"c\"]\n\ndef combine_lists(list1, list2):\n    \"\"\"Combine two lists into a dictionary\"\"\"\n    return {key: value for key, value in zip(list1, list2)}\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3]\n    list2 = [\"a\", \"b\", \"c\"]\n    print(combine_lists(list1, list2))", "category": "Python"}, {"instruction": "Create a function in Python to generate a list of consecutive natural numbers starting from 1 up to a given number.", "input": "n = 8", "output": "def gen_list_of_consecutive_numbers(n):\n    \"\"\"Generate a list of consecutive natural numbers up to a given number n\"\"\"\n    return list(range(1, n + 1))\n\nif __name__ == '__main__':\n    n = 8\n    print(gen_list_of_consecutive_numbers(n))", "category": "Python"}, {"instruction": "What is the difference between a software engineer and a software developer?", "input": "", "output": "Software engineers focus on developing and building software. They design software, maintenance and testing. They may also be involved in the development of applications, the creation of databases, and hardware integration. \n \nSoftware developers focus on coding, debugging, testing and maintenance of existing software. Developers may also be involved in the development of new applications. They are generally experts in one or more programming languages.", "category": "Python"}, {"instruction": "Compose a Python code for computing the factorial of a given number.", "input": "", "output": "def factorial(n): \n\tif n <= 1 : \n\t\treturn 1 \n\telse : \n\t\treturn n * factorial(n-1)", "category": "Python"}, {"instruction": "Develop a function that converts an array of real numbers to its nearest integer values.", "input": "Array: [3.5, 4.7, 7.9]", "output": "def to_nearest_int(real_num_list):\n    return [round(x) for x in real_num_list] \n\nto_nearest_int([3.5,4.7,7.9])\n\nResult: [4, 5, 8]", "category": "Python"}, {"instruction": "Create a function that takes a 2D array as the argument and returns an array that contains the sums of each row.", "input": "[[0, 2, 3],\n [1, 2, 3],\n [2, 2, 3]\n]", "output": "def row_sum(A): \n    result = [] \n  \n    for row in A: \n        sum = 0  \n        for element in row: \n           sum = sum + element \n        result.append(sum) \n  \n    return result", "category": "Python"}, {"instruction": "Generate an array that contains the first n Fibonacci numbers", "input": "n = 10", "output": "def generate_fibonacci_numbers(n):\n    arr =[0, 1]\n    for i in range (2, n):\n        arr.append(arr[i-1] + arr[i-2])\n    return arr", "category": "Python"}, {"instruction": "Generate an array of length n that contains the square of the numbers from 1 to n.", "input": "n = 10", "output": "def generate_square_numbers(n):\n    arr = []\n    for i in range(1, n+1):\n        arr.append(i*i)\n    return arr", "category": "Python"}, {"instruction": "Create an algorithm to detect whether an array is sorted in a given order.", "input": "array = [1, 2, 4, 7, 10, 11]", "output": "def is_sorted(arr, order = \"asc\"):\n    #check if array is sorted in ascending or descending order\n    if order == \"asc\":\n        for i in range(0, len(arr)-1):\n            if arr[i] > arr[i+1]:\n                return False\n    elif order == \"desc\":\n        for i in range(0, len(arr)-1):\n            if arr[i] < arr[i+1]:\n                return False\n    else:\n        print(\"Error: Invalid sort order!\")\n    return True", "category": "Python"}, {"instruction": "Given a dictionary with keys as strings and values as numbers, calculate the sum of the values", "input": "myDict = {'x': 12, 'y': 23, 'z': 8}", "output": "def sum_of_dict(myDict):\n    result = 0\n    for key in myDict:\n        result += myDict[key]\n    return result\n\nprint(sum_of_dict(myDict))", "category": "Python"}, {"instruction": "Write a Python function to remove the whitespace from the beginning and end of a string", "input": "myStr = \"   hello   \"", "output": "def trim_whitespace(myStr):\n  myStr = myStr.strip()\n  return myStr\n\nprint(trim_whitespace(myStr))", "category": "Python"}, {"instruction": "Create a program to generate the Pascal's triangle", "input": "", "output": "def pascal_triangle(n): \n  \n    # Create an empty list \n    pascal=[]\n  \n    for line in range(1, n+1): \n        l=[1]\n        for i in range(1,line): \n            l.append(pascal[line-2][i-1]+pascal[line-2][i]) \n        l.append(1) \n        pascal.append(l)\n                     \n    return pascal \n  \nprint(pascal_triangle(6))\n# Output -> [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]", "category": "Python"}, {"instruction": "How can you find all the subsets of a set in Python?", "input": "", "output": "In Python, you can use the itertools.combinations module to find all the subsets of a set. The syntax is as follows: \n\nimport itertools\nlist(itertools.combinations(<list or set>, <length of subset>)) \n\nFor example, to find all the subsets of a set [1,2,3] of length 2, you can run: list(itertools.combinations([1,2,3], 2)) // Output -> [(1,2), (1,3), (2,3)]", "category": "Python"}, {"instruction": "Sum the integers from 0 to 10", "input": "", "output": "def sum(start, end):\n    sum = 0\n    for i in range(start, end+1):\n        sum += i\n    return sum\n\nprint(sum(0, 10)) # Output -> 55", "category": "Python"}, {"instruction": "How can you delete an element from a tuple in Python?", "input": "", "output": "You cannot delete an element from a tuple in Python because tuples are immutable. However, you can create a new tuple with all elements except the one you want to delete. For example, if you want to delete the element at index 3, you can create a new tuple by slicing the tuple from 0 to 3 and then adding the remaining elements after index 3. For example:\n\ntup = (1, 2, 3, 4, 5)\ntup = tup[:3] + tup[3+1:]  # Output -> (1, 2, 3, 5)", "category": "Python"}, {"instruction": "Determine whether a given string contains a valid number", "input": "String : abc123", "output": "def is_valid_number(string):\n    for c in string:\n        if not c.isdigit():\n            return False\n    return True\n\nprint(is_valid_number('abc123')) # Output -> False", "category": "Python"}, {"instruction": "Write code to return the kth element in the Fibonacci sequence.", "input": "", "output": "def return_fibonacci(k):\n    a = 0\n    b = 1\n    if k < 0:\n        return \"Incorrect input\"\n    elif k == 0:\n        return a\n    elif k == 1:\n        return b\n    else:\n        for i in range(2, k+1):\n            c = a + b\n            a = b\n            b = c\n        return b", "category": "Python"}, {"instruction": "Create a program to convert a string of ASCII characters to its equivalent decimal value", "input": "String : hello", "output": "def ascii_to_decimal(string):\n    decimal_value = 0\n    for c in string:\n        decimal_value += ord(c)\n    return decimal_value\n\nprint(ascii_to_decimal('hello')) # Output -> 104 101 108 108 111", "category": "Python"}, {"instruction": "Parses the following JSON object and create an object from it.", "input": "{\n  \"name\": \"John\",\n  \"age\": 25,\n  \"address\": \"123 Main Street\"\n}", "output": "import json\n\ndata = {\n  \"name\": \"John\", \n  \"age\": 25,\n  \"address\": \"123 Main Street\"\n}\n\nuserObject = json.loads(data)\nprint(userObject)", "category": "Python"}, {"instruction": "Write a code to encrypt a text using a Ceasar cipher", "input": "", "output": "def ceasar_cipher(plaintext, shift): \n    ciphertext = \"\" \n    for i in range(len(plaintext)): \n        char = plaintext[i] \n        if (char.isupper()): \n            ciphertext += chr((ord(char) + shift - 65) % 26 + 65)\n        else: \n            ciphertext += chr((ord(char) + shift - 97) % 26 + 97)\n    return ciphertext", "category": "Python"}, {"instruction": "Write a piece of code in Python that prints a multiplication table", "input": "", "output": "def multiplication_table(n):\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            print(\"{}x{}={}\".format(i, j, i*j))\n        print(\"\")", "category": "Python"}, {"instruction": "Write a Python program to collect the data from the form below.", "input": "Name: John \nEmail: john@email.com \nPhone: (999)-999-9999", "output": "name = input(\"Name: \")\nemail = input(\"Email: \")\nphone = input(\"Phone: \")\n\ndata = {\n    \"name\": name,\n    \"email\": email,\n    \"phone\": phone\n}", "category": "Python"}, {"instruction": "Construct a Python dictionary with the countries and their total population.", "input": "countries = [\"USA\", \"Canada\", \"India\", \"China\", \"Japan\"]", "output": "population = {\"USA\": 331, \n              \"Canada\": 37, \n              \"India\": 1351, \n              \"China\": 1414, \n              \"Japan\": 126}", "category": "Python"}, {"instruction": "Give an example of inheritance in Python", "input": "", "output": "class Animal:\n  def __init__(self, name):\n    self.name = name\n   \n  def eat(self):\n    print(f\"{self.name} is eating\")\n\nclass Dog(Animal):\n  def bark(self):\n    print(f\"{self.name} is barking\")\n\ndog = Dog(\"Fido\")\ndog.eat()\ndog.bark()\n\n# Output:\n# Fido is eating\n# Fido is barking", "category": "Python"}, {"instruction": "Implement the quicksort algorithm.", "input": "[12, -6, 47, 18, 0, -3]", "output": "def quicksort(alist):\n    quicksort_helper(alist, 0, len(alist)-1)\n\ndef quicksort_helper(alist, first, last):\n    if first < last:\n        splitpoint = partition(alist, first, last)\n        quicksort_helper(alist, first, splitpoint-1)\n        quicksort_helper(alist, splitpoint+1, last)\n\ndef partition(alist, first, last):\n    pivot = alist[first]\n\n    leftmark = first+1\n    rightmark = last\n\n    done = False\n    while not done:\n        while leftmark <= rightmark and alist[leftmark] <= pivot:\n            leftmark = leftmark + 1\n\n        while alist[rightmark] >= pivot and rightmark >= leftmark:\n            rightmark = rightmark - 1\n\n        if rightmark < leftmark:\n            done = True\n        else:\n            temp = alist[leftmark]\n            alist[leftmark] = alist[rightmark]\n            alist[rightmark] = temp\n\n    temp = alist[first]\n    alist[first] = alist[rightmark]\n    alist[rightmark] = temp\n\n    return rightmark", "category": "Python"}, {"instruction": "Create an algorithm that prints the common elements of two arrays.", "input": "arr1 = [3, 10, 15, 7]\narr2 = [7, 8, 5, 10]", "output": "def common_elements(arr1, arr2):\n   result = []\n   for numbers in arr1:\n       if numbers in arr2:\n           result.append(numbers)\n   return result\n\nprint(common_elements(arr1, arr2)) # Output: [7, 10]", "category": "Python"}, {"instruction": "Write a Python program to compute the summation of a list of numbers.", "input": "list = [1, 2, 3, 4, 5]", "output": "def compute_summation(list):\n    result = 0\n    for i in list:\n        result += i\n    return result", "category": "Python"}, {"instruction": "Write a Python program to truncate a string after a given number of characters.", "input": "string = \"Hello World!\", limit = 6", "output": "def truncate_string(string, limit):\n    return string[:limit]", "category": "Python"}, {"instruction": "How can you detect the version of Python installed?", "input": "", "output": "You can detect the version of Python installed by running `python -V` in the command line. This will print the version of Python installed. Alternatively, you can execute `import sys; print(sys.version)` in the Python shell.", "category": "Python"}, {"instruction": "Find all the factors of N (greater than 0), add them together and return the result.", "input": "N = 30", "output": "def sum_factors_of_N(N):\n    sum = 0\n    for i in range(1, N+1):\n        if N % i == 0:\n            sum += i\n    return sum", "category": "Python"}, {"instruction": "Compute the maximum sum of m consecutive values in a given array.", "input": "arr = [2, 6, 1, 3, 7, 4, 9]\nm = 3", "output": "def max_m_consecutive_sum(arr, m):\n    max_sum = 0\n    for i in range(len(arr) - m + 1):\n        curr_sum = 0\n        for j in range(i, i + m):\n            curr_sum += arr[j]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum", "category": "Python"}, {"instruction": "Write a code to generate random words from a given text.", "input": "text = \"Hello World!\"", "output": "import random\n\ndef generate_random_word_from_text(text):\n    words = text.split()\n    return random.choice(words)\n\nif __name__ == '__main__':\n    text = \"Hello World!\"\n    print(generate_random_word_from_text(text))", "category": "Python"}, {"instruction": "Create a dictionary in Python to store the frequency of characters in a string.", "input": "string = \"Hello World!\"", "output": "# Empty dictionary\nfrequencies = {}\n\n# Iterate over each character in the string\nfor char in string:\n    # Check if the character exists as a key in the dictionary\n    if char in frequencies:\n        # Increase the count by 1 if it exists\n        frequencies[char] += 1\n    else:\n        # Set the count to 1 for a new character\n        frequencies[char] = 1", "category": "Python"}, {"instruction": "Create a list comprehension to extract unique characters from a string.", "input": "string = \"Hello World\"", "output": "unique_characters = [char for char in string if string.count(char) == 1]\nprint(unique_characters)", "category": "Python"}, {"instruction": "For the following array of integers, find the number of instances of 6:", "input": "[1,2,3,4,5,6,7,8,9,10,6,6]", "output": "count = 0\nfor i in [1,2,3,4,5,6,7,8,9,10,6,6]:\n    if i == 6:\n        count += 1\nprint (\"Number of instances of 6:\",count)", "category": "Python"}, {"instruction": "Determine if all the elements in a list are unique.", "input": "[3,4,5,5,6]", "output": "def has_unique_elements(arr):\n    unique_elements = set(arr)\n    if len(unique_elements) == len(arr):\n        return True\n    return False", "category": "Python"}, {"instruction": "Write a function to print an array without duplicate elements.", "input": "[4,3,6,5,4,7]", "output": "def remove_duplicates(arr):\n    seen = set()\n    for x in arr:\n        if x not in seen:\n            seen.add(x)\n            print(x)", "category": "Python"}, {"instruction": "Determine the number of ints in a list.", "input": "[2, 5, 7, 3, 8]", "output": "def count_int(arr):\n    count = 0\n    for n in arr:\n        if type(n) == int:\n            count +=1\n    return count", "category": "Python"}, {"instruction": "Print out all even elements in an array.", "input": "[1,2,3,4,5]", "output": "def print_even(arr):\n    even = []\n    for num in arr:\n        if num % 2 == 0:\n            even.append(num)\n    return even", "category": "Python"}, {"instruction": "Compute the sum of each separate element in an array.", "input": "[1,2,3,4]", "output": "def sum_of_elements(arr): \n    total = 0\n    for num in arr: \n        total += num  \n    return total", "category": "Python"}, {"instruction": "Write a code that finds the largest palindromic number in a given array", "input": "[73, 111, 109]", "output": "def largest_palindromic_number(arr):\n    largest = 0\n\n    for i in arr:\n        s = str(i)\n        if s == s[::-1]:\n            largest = max(i, largest) \n    return largest\n\nlargest = largest_palindromic_number([73, 111, 109])\nprint(\"The largest palindromic number is:\", largest)", "category": "Python"}, {"instruction": "Filter the following list of integer using python, so that only the numbers divisible by 2 are left", "input": "[1, 2, 3, 4, 5, 6, 7, 8]", "output": "def filter_list(list): \n    new_list = []\n    for item in list:\n        if item % 2 == 0:\n            new_list.append(item)\n    return new_list \n\nlist = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(filter_list(list))\n\n# Output: [2, 4, 6, 8]", "category": "Python"}, {"instruction": "Using list comprehension, write a Python code to get a list of all possible subsets of the list [1, 2, 3]", "input": "[1, 2, 3]", "output": "subsets = [[x for x in [1, 2, 3]] for y in range(0, 2**len([1, 2, 3]))]", "category": "Python"}, {"instruction": "Implement a method to generate a random password with 8 characters, which at least contain one capital letter, one small letter, and one digit.", "input": "", "output": "import string\nimport random\n\ndef passwordGenerator(length):\n    str = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    passwd = \"\".join(random.choice(str) for x in range(length))\n    if (any(x.isupper() for x in passwd) and any(x.islower() for x in passwd) and any(x.isdigit() for x in passwd)): \n        return passwd\n    else:\n        return passwordGenerator(length)\n\nprint(passwordGenerator(8))", "category": "Python"}, {"instruction": "Using the Python language, sort the following list in ascending order.", "input": "mylist = [5, 2, 3, 1, 4]", "output": "mylist.sort() \n# mylist is now [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Using the Python 3 language, access the second character of the string.", "input": "string = \"Hello!\"", "output": "print(string[1])", "category": "Python"}, {"instruction": "Create a validation function in Python 3 that checks if the value is an integer", "input": "", "output": "def validate_integer(val):\n    if isinstance(val, int):\n        return True\n    else: \n        return False", "category": "Python"}, {"instruction": "Write a Python code that prints the longest continuous increasing sequence of integers within a given list.", "input": "[1, 2, 3, 4, 5, 6, 7, 8, 4, 5, 6, 7, 8, 9]", "output": "def longest_continuous_increasing(arr):\n  \"\"\"Function to return the length of the longest continuous increasing sequence of integers within a given list\n  \n  Args:\n      arr (list): a list of integers\n  \n  Returns:\n      int: the length of the longest continuous increasing sequence\n  \"\"\"\n  n = len(arr)\n  max_len = 0\n  curr_len = 1\n\n  for i in range(1, n): \n    if arr[i] > arr[i-1]: \n      curr_len += 1\n    else: \n      # update current length of the increasing sequence\n      max_len = max(curr_len, max_len) \n      curr_len = 1\n  return max(max_len, curr_len) \n \n# Driver code \narr = [1, 2, 3, 4, 5, 6, 7, 8, 4, 5, 6, 7, 8, 9] \nprint(longest_continuous_increasing(arr)) # Output: 9", "category": "Python"}, {"instruction": "Write a Python program to make a dictionary that contains a number as a key, and its cube as the corresponding value.", "input": "", "output": "def cube_dictionary(n):\n    d = {}\n    for i in range(1, n+1):\n        d[i] = i**3\n    return d", "category": "Python"}, {"instruction": "Design a sorting algorithm to order a list of integers in descending order.", "input": "[4,7,2,8,9,1]", "output": "def descend_sort(nums):\n    for i in range(len(nums)-1): \n      for j in range(i+1,len(nums)): \n        if nums[i]<nums[j]: \n          nums[i],nums[j]=nums[j],nums[i] \n    return nums", "category": "Python"}, {"instruction": "Describe what a hash function is.", "input": "", "output": "A hash function is a function which maps a given input of arbitrary or variable length to a fixed length output. It is deterministic, meaning that the same input will always result in the same output, and it is a one-way function, meaning that it is not possible to reconstruct the input from the output. The main purpose of a hash function is to act as a digital fingerprint for data or messages, allowing them to be quickly compared with other fingerprints to determine whether they are the same or different.", "category": "Python"}, {"instruction": "Explain why object-oriented programming is useful?", "input": "", "output": "Object-oriented programming (OOP) is a programming paradigm that uses objects and their interactions to design applications and computer programs. OOP allows for efficient development and maintenance of large scale software systems by allowing developers to create objects which have their own independent properties and methods. OOP programming also provides for abstraction, which allows for complex software systems to be broken down into simpler, more manageable components. OOP also provides for better code reuse, which allows developers to easily reuse code that has been written before, instead of having to rewrite it from scratch. Finally, OOP allows for better data security, as all data related to an object can be stored in one place and accessed only by that object, which makes it more difficult for malicious actors to access or tamper with a system's data.", "category": "Python"}, {"instruction": "You need to read a code and count the number of lines of code.", "input": "def function(a, b):\n    c = a + b\n    d = a * b\n    return c + d", "output": "def count_lines_of_code(code):\n    lines = code.splitlines()\n    return len(lines)\n\nif __name__ == '__main__':\n    code=\"\"\"\ndef function(a, b):\n    c = a + b\n    d = a * b\n    return c + d\n    \"\"\"\n    print(count_lines_of_code(code))", "category": "Python"}, {"instruction": "Write a code to check if one given string is a substring of another.", "input": "string1=\"programming\"\nstring2=\"gram\"", "output": "def is_substring(string1, string2):\n    return string2 in string1\n\nif __name__ == '__main__':\n    string1=\"programming\"\n    string2=\"gram\"\n    print(is_substring(string1, string2))", "category": "Python"}, {"instruction": "Write a Python expression to compute the exponential of a given number.", "input": "x = 3", "output": "import math\nmath.exp(x)", "category": "Python"}, {"instruction": "Write a Python expression to generate a list containing numbers from 0 to 12 (not including 12).", "input": "", "output": "[x for x in range(0, 12)]", "category": "Python"}, {"instruction": "Write a Python expression to compute the GCD (Greatest Common Divisor) of two numbers.", "input": "a = 10, b = 15", "output": "def compute_gcd(a, b):\n    while b:\n        a, b = b, a % b\n    \n    return a", "category": "Python"}, {"instruction": "Construct correctly a for-loop in Python that iterates 6 times from 0 to 5", "input": "", "output": "for i in range(6):\n    print(i)", "category": "Python"}, {"instruction": "Change the following code so that it will still print the same output but with a better runtime complexity.", "input": "def find_duplicates(list):\n    duplicates = []\n    for i in range(len(list)):\n        current = list[i]\n        for j in range(len(list)):\n            if i != j and list[j] == current:\n                duplicates.append(current)\n    return duplicates", "output": "def find_duplicates(list):\n    duplicates = []\n    seen = set()\n    for i in range(len(list)):\n        current = list[i]\n        if current in seen:\n            duplicates.append(current)\n        else:\n            seen.add(current)\n    return duplicates", "category": "Python"}, {"instruction": "Write a Python program that takes two numbers as input and outputs the greatest common divisor (GCD) between them.", "input": "18 9", "output": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\nx = int(input(\"Enter the first number: \"))\ny = int(input(\"Enter the second number: \"))\n\nprint(\"The GCD of {} and {} is {}\".format(x, y, gcd(x, y)))", "category": "Python"}, {"instruction": "Implement a function to check whether a given array contains an odd number or not.", "input": "array = [2, 3, 5, 9, 22, 13]", "output": "def check_odd(array): \n    for i in array:\n        if (i % 2 != 0):\n            return True\n    return False \n  \narray = [2, 3, 5, 9, 22, 13] \nif (check_odd(array)): \n    print(\"Array contains an odd number\") \nelse: \n    print(\"Array does not contain an odd number\")", "category": "Python"}, {"instruction": "Create a function in Python that takes two list of strings as parameters and returns a third list of strings which are the elements common in both lists.", "input": "list1 = [\"apple\", \"orange\", \"banana\", \"cherry\"] \nlist2 = [\"apple\", \"grapes\", \"banana\", \"watermelon\"]", "output": "def common(list1, list2): \n    ans_list = [] \n    \n    for i in list1: \n        for j in list2: \n            if i == j: \n                ans_list.append(i) \n    return ans_list \n  \nif __name__ == \"__main__\": \n    list1 = [\"apple\", \"orange\", \"banana\", \"cherry\"] \n    list2 = [\"apple\", \"grapes\", \"banana\", \"watermelon\"]\n    print(common(list1, list2)) # ['apple', 'banana']", "category": "Python"}, {"instruction": "Create a machine learning algorithm to classify emails as spam or not spam.", "input": "", "output": "import numpy as np \nfrom sklearn.naive_bayes import MultinomialNB \nfrom sklearn.feature_extraction.text import CountVectorizer \n\n# Create feature vectors \nvectorizer = CountVectorizer() \n\n# Train the model \nclassifier = MultinomialNB() \n\n# training data \ntraining_data = [\n   (\"cheap replica watches\", \"spam\"), \n   (\"click here to win money\", \"spam\"), \n   (\"I like your offer\", \"not spam\")]\n\n# Extract feature vectors \ntrain_features = vectorizer.fit_transform([data[0] for data in training_data]) \n\n# Train classifier \nclassifier.fit(train_features, [data[1] for data in training_data]) \n\n# Test email \ntest_email = \"Click here to get special offers\"\ntest_features = vectorizer.transform([test_email]) \nprediction = classifier.predict(test_features) \n\nif prediction[0] == \"spam\": \n   print(\"Test email is marked as spam\") \nelif prediction[0] == \"not spam\": \n   print(\"Test email is marked as not spam\")", "category": "Python"}, {"instruction": "Construct an algorithm to apply merge sort to an array of integers.", "input": "[1, 10, 2, 5, 8, 7]", "output": "# Python program for Merge Sort\n\n# Merges two subarrays of arr[]. \n# First subarray is arr[l..m] \n# Second subarray is arr[m+1..r] \ndef merge(arr, l, m, r): \n\tn1 = m - l + 1\n\tn2 = r- m \n\n# create temp arrays \n\tL = [0] * (n1) \n\tR = [0] * (n2) \n\n# Copy data to temp arrays L[] and R[] \n\tfor i in range(0 , n1): \n\t\tL[i] = arr[l + i] \n\n\tfor j in range(0 , n2): \n\t\tR[j] = arr[m + 1 + j] \n\n# Merge the temp arrays back into arr[l..r] \n\ti = 0\t # Initial index of first subarray \n\tj = 0\t # Initial index of second subarray \n\tk = l\t # Initial index of merged subarray \n\n\twhile i < n1 and j < n2 : \n\t\tif L[i] <= R[j]: \n\t\t\tarr[k] = L[i] \n\t\t\ti += 1\n\t\telse: \n\t\t\tarr[k] = R[j] \n\t\t\tj += 1\n\t\tk += 1\n\n# Copy the remaining elements of L[], if there \n# are any \n\twhile i < n1: \n\t\tarr[k] = L[i] \n\t\ti += 1\n\t\tk += 1\n\n# Copy the remaining elements of R[], if there \n# are any \n\twhile j < n2: \n\t\tarr[k] = R[j] \n\t\tj += 1\n\t\tk += 1\n\n# l is for left index and r is right index of the \n# sub-array of arr to be sorted \ndef mergeSort(arr,l,r): \n\tif l < r: \n\t\t\n\t\t# Same as (l+r)//2, but avoids overflow for \n\t\t# large l and h \n\t\tm = (l+(r-1))//2\n\t\t\n\t\t# Sort first and second halves \n\t\tmergeSort(arr, l, m) \n\t\tmergeSort(arr, m+1, r) \n\t\tmerge(arr, l, m, r) \n\n# Driver code to test above \narr = [1, 10, 2, 5, 8, 7] \nn = len(arr) \nprint (\"Given array is\") \nfor i in range(n): \n\tprint (\"%d\" %arr[i]), \n\nmergeSort(arr,0,n-1) \nprint (\"\\n\\nSorted array is\") \nfor i in range(n): \n\tprint (\"%d\" %arr[i]), \n\n# This code is contributed by Shreyanshi Arun", "category": "Python"}, {"instruction": "What is principle of DRY (Don\u2019t Repeat Yourself) in coding?", "input": "", "output": "The principle of DRY (Don\u2019t Repeat Yourself) states that code should not be written twice, and instead should be reused. This means that code should be organized such that similar functionalities are grouped together so as to avoid duplication, making the code more efficient, robust, and maintainable. It also allows for code to be more easily refactored in order to correct errors or to add new features.", "category": "Python"}, {"instruction": "Which library should be used to process data in Scala?", "input": "", "output": "The Apache Spark library is the most common library used to process data in Scala. Apache Spark provides an easy-to-use, distributed environment for analytics and data processing applications. It offers APIs in Java, Python, and Scala, allowing users to neatly integrate data processing with high-level programming languages.", "category": "Python"}, {"instruction": "Create a list comprehension that returns the even numbers in a given list.", "input": "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "output": "even_nums = [num for num in my_list if num % 2 == 0]", "category": "Python"}, {"instruction": "Write a Python script to display the numbers from 1 to 10 in ascending order.", "input": "", "output": "for num in range(1, 11):\n    print(num)", "category": "Python"}, {"instruction": "Write a function to convert a string of digits to the corresponding integer value.", "input": "string = \"12345\"", "output": "def toInt(string):\n    number = 0\n    for char in string:\n        number = (number * 10) + int(char)\n    return number\n\n# Test\nprint(toInt(string)) #12345", "category": "Python"}, {"instruction": "Use Python to print a multiplication table for the numbers from 1 to 10.", "input": "", "output": "# Print multiplication table\nfor i in range(1, 11):\n    for j in range(1, 11):\n        print('{0} x {1} = {2}'.format(i, j, i*j))\n    print('\\n')", "category": "Python"}, {"instruction": "Compose an if-else block in Python for checking if a string is empty.", "input": "str1 = \"My String\"\nstr2 = \"\"", "output": "if len(str1) > 0:\n    print(\"Not empty\")\nelse:\n    print(\"Empty\")", "category": "Python"}, {"instruction": "Construct an if-else statement in Python that swaps the values of two variables.", "input": "a = 2\nb = 5", "output": "if a > b:\n    temp = a\n    a = b\n    b = temp\nelse:\n    temp = a\n    a = b\n    b = temp", "category": "Python"}, {"instruction": "Using a while loop in Python, print numbers from 5 to 19.", "input": "", "output": "i = 5\nwhile i < 20:\n    print(i)\n    i += 1", "category": "Python"}, {"instruction": "Formulate a loop in Python that prints 7 to 18.", "input": "", "output": "for i in range(7, 19):\n    print(i)", "category": "Python"}, {"instruction": "Write a Python code snippet to display the multiplication table of 5.", "input": "", "output": "for i in range(1, 11):\n    print(f\"5 * {i} = {5 * i}\")", "category": "Python"}, {"instruction": "Create a script in Python to search a given string for a substring", "input": "string = \"Hello World!\"\nsubstring = \"llo\"", "output": "def searchSubstring(string, substring): \n    results = [] \n    n = len(string) \n    m = len(substring) \n\n    for i in range(n - m + 1): \n        j = 0\n\n        while(j < m): \n            if(string[i + j] != substring[j]): \n                break\n            j += 1\n\n        if j == m: \n            results.append(i)\n  \n    print(results) \n\nstring = \"Hello World!\" \nsubstring = \"llo\"\nsearchSubstring(string, substring)", "category": "Python"}, {"instruction": "Write a function to generate valid random passwords.", "input": "passwordlen = 8", "output": "import string\nimport random\n\ndef generate_password(passwordlen):\n    ''' \n    This function generates a random password of the given length\n    '''\n    code_str = string.ascii_letters + string.digits\n    password = ''.join(random.choice(code_str) for i in range(passwordlen))\n    return password\n\nif __name__ == '__main__':\n    passwordlen = 8\n    print(generate_password(passwordlen))", "category": "Python"}, {"instruction": "Join two dictionaries by adding the values with the same key.", "input": "d1 = {\"a\": 1, \"b\": 2, \"c\": 3}\nd2 = {\"a\": 10, \"d\": 20, \"e\": 30}", "output": "def join_dictionaries(d1, d2):\n    ''' \n    This function joins two dictionaries by adding their values with\n    the same key\n    '''\n    result = {}\n    for k1, v1 in d1.items():\n        result[k1] = v1\n    \n    for k2, v2 in d2.items():\n        if k2 in result.keys():\n            result[k2] += v2\n        else:\n            result[k2] = v2\n            \n    return result\n\nif __name__ == '__main__':\n    d1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n    d2 = {\"a\": 10, \"d\": 20, \"e\": 30}\n    print(join_dictionaries(d1, d2))", "category": "Python"}, {"instruction": "Compute the edits between two strings.", "input": "str1 = \"I am eating\"\nstr2 = \"I am eating a sandwich\"", "output": "def edit_distance(str1, str2):\n    \"\"\"\n    Compute the edit distance between two strings\n    \"\"\"\n    m = len(str1)\n    n = len(str2)\n\n    distance = [[0 for i in range(n+1)] for j in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n\n            # If first string is empty, only option is to insert all characters of second string\n            if i == 0:\n                distance[i][j] = j\n\n            # If second string is empty, only option is to remove all characters of first string\n            elif j == 0:\n                distance[i][j] = i\n\n            # If last characters are same, ignore last char and recur for remaining string\n            elif str1[i-1] == str2[j-1]:\n                distance[i][j] = distance[i-1][j-1]\n\n            # If last characters are not same, consider all possibilities and find minimum\n            else:\n                replace_cost = distance[i-1][j-1] + 1\n                remove_cost = distance[i-1][j] + 1\n                insert_cost = distance[i][j-1] + 1\n                distance[i][j] = min(replace_cost, remove_cost, insert_cost)\n\n    return distance[m][n]\nif __name__ == '__main__':\n    str1 = \"I am eating\"\n    str2 = \"I am eating a sandwich\"\n    print(edit_distance(str1, str2))", "category": "Python"}, {"instruction": "Generate a number in range between 1 to 10  randomly.", "input": "", "output": "import random\n\ndef random_num():\n    return random.randint(1, 10)\n\nif __name__ == '__main__':\n    print(random_num())", "category": "Python"}, {"instruction": "Write an algorithm to calculate the median of a given array.", "input": "Array=[7, 4, 5, 2, 6]", "output": "Step 1: Start \nStep 2: Set an empty array, called median_arr.\nStep 3: Sort the given array.\nStep 4: Check if the length of the array is even or odd. \nStep 5: If even, calculate the average of the middle two elements and store it in median_arr. \nStep 6: If odd, store the middle element in the median_arr.\nStep 7: Return the array median_arr containing the median. \nStep 8: End.", "category": "Python"}, {"instruction": "Write a recursive version of the following code.", "input": "def factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result", "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)", "category": "Python"}, {"instruction": "Develop a logistic regression model using Python to predict the outcome of a binary classification dataset.", "input": "", "output": "import pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n \n# Load the dataset\ndf = pd.read_csv(\"data.csv\")\n \n# Split the data into features (X) and targets (y)\nX= df.drop(\"target\",axis=1)\ny = df[\"target\"]\n \n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2)\n \n# Initialize and fit the logistic regression model\nclf = LogisticRegression().fit(X_train, y_train)\n \n# Make predictions on the test set\npredictions = clf.predict(X_test)", "category": "Python"}, {"instruction": "Implement a Python function to check if an integer is even or odd.", "input": "", "output": "def is_even(num):\n  return num % 2 == 0", "category": "Python"}, {"instruction": "Implement a function in Python that takes two parameters, an array and a number, and sorts the array in ascending order by the number.", "input": "[5, 29, 4, 7, 28], 3", "output": "def sort_array_by_nth_parameter(arr, n):\n  return sorted(arr, key=lambda x: x[n])\n\nnumbers = [5, 29, 4, 7, 28]\nsorted_numbers = sort_array_by_nth_parameter(numbers, 3)\nprint(sorted_numbers)", "category": "Python"}, {"instruction": "Write a function to generate a random password that is 10 characters long.", "input": "", "output": "import random\nimport string\n\ndef generate_password(length):\n    chars = string.ascii_letters + string.digits\n    return ''.join(random.choice(chars) for _ in range(length))\n\nprint(generate_password(10))", "category": "Python"}, {"instruction": "Create an array with 5 elements in Python.", "input": "", "output": "arr = [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Describe what a closure is in programming.", "input": "", "output": "A closure is a special type of function that allows a program to access variables and functions from an outer (or parent) scope, even after that outer scope has been closed or finished executing. The closure essentially \"closes\" the variables and functions from the outer scope, making them available for use in the inner scope of the function.", "category": "Python"}, {"instruction": "Create a Python program to convert an input string to Morse code.", "input": "", "output": "def string_to_morse(user_string):\n morse_code = \"\"\n for ch in user_string:\n if ch.lower() in Morse.alpha:\n morse_code += Morse.alpha[ch.lower()] + \" \"\n return morse_code", "category": "Python"}, {"instruction": "Given an array of numbers, write a Python program to find the second highest element in the array.", "input": "[1, 3, 5, 4, 7, 9]", "output": "def second_highest(arr):\n arr.sort()\n return arr[-2]", "category": "Python"}, {"instruction": "Given a list of strings, write a Python program to remove all duplicates from the list.", "input": "[\u201ccat\u201d, \u201cdog\u201d, \u201ccat\u201d, \u201cparrot\u201d, \u201cgoat\u201d, \u201cdog\u201d]", "output": "def remove_duplicates(list):\n res = [] \n for str in list:\n if str not in res:\n res.append(str)\n return res", "category": "Python"}, {"instruction": "Create a Python program to generate a random 8-character alphanumeric string. The string should contain at least one lowercase letter, one uppercase letter, one digit and one special character.", "input": "", "output": "import string\nimport random\n\ndef generate_random_string():\n chars = string.ascii_letters + string.digits + string.punctuation\n string_length = 8\n random_string = ''.join(random.choice(chars) for _ in range(string_length))\n return random_string", "category": "Python"}, {"instruction": "Use a machine learning model to predict the next number in a given sequence.", "input": "Sequence: [1, 4, 9, 16, 25]", "output": "The next number in the given sequence is 36.\n\nTo use a machine learning model, the dataset should be split into features and labels. The features could be the numbers in the sequence, and the label could be the next number. The model can be trained on this dataset to accurately predict the next number in a sequence.", "category": "Python"}, {"instruction": "Create a low-level PyTorch implementation of the following neural network structure, using the class PyTorch provides.", "input": "Input shape: (300, 100)\n\nOutput shape: (2, 5)", "output": "import torch\n\nclass MyNetwork(torch.nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.fc1 = torch.nn.Linear(300, 150)\n        self.fc2 = torch.nn.Linear(150, 100)\n        self.fc3 = torch.nn.Linear(100, 50)\n        self.fc4 = torch.nn.Linear(50, 5)\n        self.softmax = torch.nn.Softmax(dim=1)\n\n\n    def forward(self, x):\n        x = self.fc1(x)\n        x = self.fc2(x)\n        x = self.fc3(x)\n        x = self.fc4(x)\n        \n        return self.softmax(x)", "category": "Python"}, {"instruction": "Train a neural network using TensorFlow to predict housing prices.", "input": "", "output": "import tensorflow as tf\nimport numpy as np\nfrom tensorflow import keras\n\n# Load the dataset\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.housing_prices.load_data()\n\n# Normalize the input data\nx_train = x_train / 255.0\nx_test = x_test / 255.0\n\n# Build the model\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Flatten(input_shape=(x_train.shape[1], x_train.shape[2])),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(1)\n])\n\n# Compile and fit the model\nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=10)\n\n# Evaluate the model\ntest_loss, test_accuracy = model.evaluate(x_test, y_test)\nprint('Test accuracy {:.2f}%'.format(test_accuracy*100))", "category": "Python"}, {"instruction": "Train a logistic regression model on the housing prices dataset with 5 features.", "input": "", "output": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n#read in the dataset\ndata = pd.read_csv('housing_prices.csv')\n\n#inspect the data\ndata.info()\ndata.describe()\n\n#split the data into train & test\nX = data[['Bedrooms','Bathrooms','Square_Feet','Parking','Yard']]\ny = data['Price']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n#train the logistic regression model\nlogreg = LogisticRegression().fit(X_train, y_train)\n\n#evaluate model performance\nprint(\"Training set score: {:.3f}\".format(logreg.score(X_train, y_train)))\nprint(\"Test set score: {:.3f}\".format(logreg.score(X_test, y_test)))", "category": "Python"}, {"instruction": "Write a Lambda function in Python to generate random numbers in the range of 10 to 50.", "input": "", "output": "import random\ndef random_num():\n    return random.randint(10,50)", "category": "Python"}, {"instruction": "Develop a Python program to calculate the area of a triangle given its three sides.", "input": "", "output": "# Function to calculate area of triangle  \ndef calculateArea(a, b, c): \n     \n    # Calculating the semi-perimeter of triangle  \n    s = (a + b + c) / 2\n  \n    # Calculate the area  \n    area = (s*(s - a)*(s - b)*(s - c)) ** 0.5    \n    \n    return area \n\n# Driver code  \na = 5\nb = 6\nc = 7\nprint(\"Area of triangle is %0.2f\" %calculateArea(a, b, c))", "category": "Python"}, {"instruction": "Construct a Pandas dataframe that contains the average monthly temperatures of a given location over the year.", "input": "", "output": "import pandas as pd\n\n# define the year \nyear = 2020\n\n# define the list of months\nmonths = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n          \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n\n# define the list of temperatures\ntemperatures =[32.2, 37.3, 43.3, 51.4, 63.4, 70.4, \n               72.7, 73.4, 68.7, 56.4, 43.7, 34.2]\n\n# construct the dataframe\ndf = pd.DataFrame({\n    'month': months,\n    'temperature': temperatures\n})\n\n# set the index to the month column\ndf.set_index('month', inplace=True)", "category": "Python"}, {"instruction": "Write a code to create Fibonacci sequence in Python", "input": "", "output": "def Fibonacci(n): \n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else: \n        return Fibonacci(n-1) + Fibonacci(n-2)", "category": "Python"}, {"instruction": "Create a script in Python to sort a given array.", "input": "[1, 5, 4, 3, 6, 2]", "output": "sorted_array = [1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Construct an array which contains the count of each character present in the given string.", "input": "String: \u201cHello world\u201d", "output": "def characterCount(str): \n    # create a dictionary and store count \n    # of every character \n    freq = {} \n  \n    for i in str: \n        if i in freq: \n            freq[i] += 1\n        else: \n            freq[i] = 1\n          \n    # return the dictionary    \n    return freq \n  \n# Driver code \nstr = \"Hello world\"\nprint(characterCount(str))", "category": "Python"}, {"instruction": "Develop an algorithm to traverse a two-dimensional array.", "input": "A two-dimensional array with 3 rows and 4 columns.", "output": "One possible algorithm to traverse a two-dimensional array is an in-place spiral traversal. Start at the top left corner of the array and traverse in a clockwise direction while updating the location at each step. Each time move one step in the direction you are currently going, then turn right and continue in the new direction. When you reach the end of a row or column, turn right and continue in the new direction until you have traversed the entire array. \n\nFor example, for an array of 3 rows and 4 columns: \n\nStep 1: [0, 0] \nStep 2: [0, 1] \nStep 3: [0, 2] \nStep 4: [0, 3] \nStep 5: [1, 3] \nStep 6: [2, 3] \nStep 7: [2, 2] \nStep 8: [2, 1] \nStep 9: [2, 0] \nStep 10: [1, 0] \nStep 11: [1, 1] \nStep 12: [1, 2]", "category": "Python"}, {"instruction": "Assign values to a given linked list", "input": "A linked list with 4 nodes", "output": "class Node: \n    def __init__(self,data): \n        self.data = data\n        self.next = None\n  \nclass LinkedList: \n    def __init__(self):  \n        self.head = None\n  \n    def assignValues(self, dataList): \n        node1 = Node(dataList[0]) \n        node2 = Node(dataList[1]) \n        node3 = Node(dataList[2]) \n        node4 = Node(dataList[3]) \n  \n        self.head = node1 \n        node1.next = node2 \n        node2.next = node3 \n        node3.next = node4 \n\ndataList = [1, 2, 3, 4] \nllist = LinkedList() \nllist.assignValues(dataList)", "category": "Python"}, {"instruction": "Create a program to check if two binary trees are identical.", "input": "", "output": "def is_identical(root1, root2): \n    #Check if root1 and root2 are both none\n    if root1 == None and root2 == None:\n        return True\n    #Check if root1 and root2 are none\n    if root1 == None or root2 == None:\n        return False\n    #Check if their data is same\n    if root1.data == root2.data:\n        #Check if their left subtrees are same\n        left_identical = is_identical(root1.left, root2.left)\n        #Check if their right subtrees are same\n        right_identical = is_identical(root1.right, root2.right)\n        if left_identical and right_identical:\n            return True\n    return False", "category": "Python"}, {"instruction": "Define a tuple in Python.", "input": "", "output": "my_tuple = (1, 2, 3)  # Output: (1, 2, 3)", "category": "Python"}, {"instruction": "Create a class in Python which contains three attributes and a method.", "input": "", "output": "class MyClass:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def get_values(self):\n        return self.x, self.y, self.z", "category": "Python"}, {"instruction": "Use numpy to create a 3x3 matrix full of zeros.", "input": "", "output": "import numpy as np \n  \n  \n# create a 3x3 matrix full of zeros using numpy\nmatrix_zeros = np.zeros( (3,3) )\nprint(matrix_zeros)", "category": "Python"}, {"instruction": "Create a Python program to accept a string from the user and print out the number of vowels in the string.", "input": "Hello World", "output": "def countVowels(str): \n\tvowel = 0\n\tfor i in str: \n\t\tif i.lower() in ['a', 'e', 'i', 'o', 'u']: \n\t\t\tvowel += 1\n\treturn vowel \n\n# Driver code \nstr = \"Hello World\"\nprint(\"Number of vowels are:\", countVowels(str))", "category": "Python"}]
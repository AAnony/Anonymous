[{"instruction": "Design a function to convert a ternary tree to a doubly linked list.", "input": "", "output": "def convertTernaryTreeToDoublyLinkedList(root):\n    # Edge case\n    if (root == None):\n        return \n    \n    # Create two empty lists to hold left and right list of root\n    left = []\n    right = []\n    # Add root to left list that will hold left subtree\n    left.append(root.val)\n    # Store the value of the root for later use\n    val = root.val\n    # Recur to get the left and right lists of the left\n    # and right subtree\n    getLeft(root.left, left)\n    getRight(root.right, right)\n\n    # To see the linked list join the left and right lists\n    left.extend(right)\n\n    # Get the length of the list\n    length = len(left)\n\n    # Join the left and right list with the middle element\n    # of the root.\n    for i in range(length):\n        if i<length-1:\n            left[i].next = left[i+1]\n        else:\n            left[i].next = None\n        if i>0:\n            left[i].prev = left[i-1]\n        else:\n            left[i].prev = None\n    \n    # Return the list\n    return left\n\ndef getLeft(root, left):\n    # Iterative way to traverse and get all left subtree elements\n    if root:\n        left.append(root) \n        root = root.left\n        getLeft(root, left)\n\ndef getRight(root, right):\n    # Iterative way to traverse and get all right subtree elements\n    if root:\n        right.append(root)\n        root = root.right\n        getRight(root, right)", "category": "Python"}, {"instruction": "Explain the concept of parameter estimation in machine learning.", "input": "", "output": "Parameter estimation is the process of determining the optimal values for the parameters of a machine learning algorithm. The values that produce the best performance on the training data are typically used as the parameters for the model. By optimizing the parameters, the model can fit the data more accurately and lead to improved generalization performance. Parameter estimation can involve manual tuning, or the use of automated techniques such as grid search or stochastic optimization.", "category": "Python"}, {"instruction": "Explain the difference between unidirectional and bidirectional recurrent neural networks.", "input": "", "output": "A unidirectional recurrent neural network (RNN) accepts a single input and produces a single output. The input sequence is processed one step at a time and the output of each step depends only on the current input and the weights of the network. This type of network is often used in language models and other sequence-based predictions. \n\nIn contrast, a bidirectional recurrent neural network (BRNN) processes the input sequence in both the forward and backward directions. This allows the network to make use of both past and future context when making predictions. Additionally, it has the potential to learn longer-term dependencies since the state of the network is shared between both directions. This type of network is commonly used in areas like speech recognition and natural language understanding.", "category": "Python"}, {"instruction": "How can you convert a given list of integers into a comma-separated string in Python?", "input": "", "output": "We can use the join() method to convert a given list of integers into a comma-separated string in Python. The syntax for this method is as follows:\n\nlistOfIntegers = [1, 2, 3, 4] \ns = ','.join(str(e) for e in listOfIntegers)\nprint(s)", "category": "Python"}, {"instruction": "Generate five random numbers between 0 and 10 in Python.", "input": "", "output": "import random\nrandom.sample(range(0, 10), 5)", "category": "Python"}, {"instruction": "Create a program that can output the permutation of a given string.", "input": "Find the permutation of \u201cABC\u201d", "output": "def permutation(str):\n    if len(str) == 0:\n        return []\n    if len(str) == 1:\n        return [str]\n    lst = [] \n    for i in range(len(str)):\n       m = str[i] \n       remLst = permutation(str[:i] + str[i+1:])\n       for p in remLst:\n           lst.append([m] + p)\n    return lst\n\nif __name__ == \"__main__\":\n    str = \"ABC\"\n    print(permutation(str))", "category": "Python"}, {"instruction": "Design a program to find out how many times a pattern occurs in a given string.", "input": "Find the number of times \u201cquick\u201d occurs in \u201cThe quick brown fox jumps over the lazy dog.\u201d", "output": "def count_pattern(sentence, pattern):\n    count = 0\n    words = sentence.split(' ')\n    for word in words:\n        if word == pattern:\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    sentence = \"The quick brown fox jumps over the lazy dog.\"\n    pattern = \"quick\"\n    print(count_pattern(sentence, pattern))", "category": "Python"}, {"instruction": "Write a code to extract the length of the longest sentence in a given text", "input": "Text: The quick brown fox jumps over the lazy dog. The quick fox jumped over the lazy dog.", "output": "def get_longest_sentence(text):\n    sentences = text.split('. ')\n    longest_sent_len = 0\n    longest_sent = ''\n    for sentence in sentences:\n        if len(sentence) > longest_sent_len:\n            longest_sent_len = len(sentence)\n            longest_sent = sentence\n    return longest_sent_len\n\n# Verify it works\ntext = 'The quick brown fox jumps over the lazy dog. The quick fox jumped over the lazy dog.'\nprint(get_longest_sentence(text))", "category": "Python"}, {"instruction": "Create a Python program that prints out a given list of numbers in reverse order.", "input": "[1, 2, 3, 4, 5]", "output": "for i in range(len(list) - 1, -1, -1):\n    print(list[i])", "category": "Python"}, {"instruction": "What are the three main principles of OOP?", "input": "", "output": "The three main principles of Object Oriented Programming (OOP) are encapsulation, inheritance, and polymorphism. Encapsulation is the process of wrapping data and functions together into one unit. Inheritance is the process of allowing a class to inherit the properties and behavior of a parent class. Polymorphism is the ability to define multiple versions of the same function or object depending on the context in which they are used.", "category": "Python"}, {"instruction": "Write pseudocode for the merge sort algorithm.", "input": "", "output": "Mergesort(A):\n  if A has 1 item : \n      return A\n  else\n      divide A into two parts (left and right) of roughly equal size\n      B = Mergesort(left)\n      C = Mergesort(right)\n      D = Merge(B,C)\n      return D\n\nMerge(B,C):\n  create an empty list D\n  while B and C are not empty:\n      if B[0] \u2264 C[0]:\n          add the first item of B to the end of D\n          remove the first item of B\n      else:\n          add the first item of C to the end of D\n          remove the first item of C\n  while B is not empty:\n      add the first item of B to the end of D\n      remove the first item of B\n  while C is not empty:\n      add the first item of C to the end of D\n      remove the first item of C\n  return D", "category": "Python"}, {"instruction": "Create a function to select the kth smallest item from a list.", "input": "lst = [3, 6, 8, 2, 10, 11]", "output": "# Create a function to select the kth smallest item from a list\ndef kth_smallest(lst, k):\n    sorted_lst = sorted(lst)\n\n    return sorted_lst[k - 1]\n\n# test the function\nitem = kth_smallest(lst, 4)\nprint(item) # Output: 8", "category": "Python"}, {"instruction": "Find all the even numbers in the given range.", "input": "min_num = 4\nmax_num = 17", "output": "# Find all the even numbers in the given range\neven_nums = [num for num in range(min_num, max_num + 1) if num % 2 == 0]\n\nprint(even_nums) # Output: [4, 6, 8, 10, 12, 14, 16]", "category": "Python"}, {"instruction": "Using a for loop, calculate the distance between one point to every other point in the given list.", "input": "points = [\n    (10, 20),\n    (12, 22),\n    (14, 24)\n]", "output": "# Using a for loop, calculate the distance between one point to every other point in the given list\nfrom math import sqrt\n\ndistances = []\nfor i in range(len(points)):\n    for j in range(len(points)):\n        if i != j:\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            distance = sqrt((x2 - x1)**2 + (y2 - y1)**2)\n            distances.append(distance)\n\nprint(distances)  # Output: [2.8284271247461903, 4.242640687119285, 2.8284271247461903]", "category": "Python"}, {"instruction": "Change the code using decorator to log how long the function runs.", "input": "def sum_function(a, b):\n    return a + b", "output": "import time\n\ndef log_time(func):\n    def inner(*args, **kwargs):\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time()\n\n        print(f'Function {func.__name__} took {end-start} sec to run')\n\n        return result\n    return inner\n\n@log_time\ndef sum_function(a, b):\n    return a + b", "category": "Python"}, {"instruction": "Extract the list of urls using the beautifulsoup library.", "input": "html_text = '''<html>\n  <body>\n    <h1>List Of URLs</h1>\n    <p>Here is a list of URLs:</p>\n    <ul>\n      <li><a href=\"http://example.com\">Example</a></li>\n      <li><a href=\"http://example2.com\">Example2</a></li>\n    </ul>\n  </body>\n</html>'''", "output": "# Extract the list of urls using the beautifulsoup library\nfrom bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(html_text, 'html.parser')\nurls = [link.get('href') for link in soup.find_all('a')]\n\nprint(urls) # Output: ['http://example.com', 'http://example2.com']", "category": "Python"}, {"instruction": "Group the given list of names into 3 different categories based on the first letter of the name.", "input": "names = [\"Adam\", \"Bill\", \"Brian\", \"Clarence\", \"Doug\", \"Emily\", \"Fred\", \"George\", \"Henry\"]", "output": "# Group the given list of names into 3 different categories based on the first letter of the name\n\ngroup1 = [name for name in names if name[0] in ['A', 'B', 'C']]\ngroup2 = [name for name in names if name[0] in ['D', 'E', 'F']]\ngroup3 = [name for name in names if name[0] in ['G', 'H']]\n\nprint(group1) # Output: ['Adam', 'Bill', 'Brian', 'Clarence']\nprint(group2) # Output: ['Doug', 'Emily', 'Fred'] \nprint(group3) # Output: ['George', 'Henry']", "category": "Python"}, {"instruction": "Find the probability of a random variable following a normal distribution with a mean of 10 and a standard deviation of 2.", "input": "x = 12", "output": "# Find the probability of a random variable following a normal distribution with a mean of 10 and a standard deviation of 2.\nfrom scipy.stats import norm\n\nprob = norm.pdf(x, 10, 2)\n\nprint(prob) # Output: 0.17603266338214976", "category": "Python"}, {"instruction": "Sum the numbers in the given array using reduce.", "input": "numbers = [1, 2, 3, 4, 5]", "output": "# Sum the numbers in the given array using reduce\nfrom functools import reduce\n\nsum = reduce(lambda x, y: x + y, numbers)\n\nprint(sum) # Output: 15", "category": "Python"}, {"instruction": "Sort the data using heap sort.", "input": "data = [12, 11, 15, 10, 9, 1, 2, 3, 13, 14, 4, 5, 6, 7, 8]", "output": "def heap_sort(data):  \n    # Create an empty Max Heap\n    max_heap = MaxHeap() \n    # Add elements to the Max Heap\n    for element in data:\n        max_heap.insert(element)\n    \n    sorted_data = []\n    while max_heap.count > 0:\n        # Pop the Maximum element from the Max Heap\n        maximum = max_heap.extract_max()\n        sorted_data.append(maximum)\n \n    return sorted_data\n\nsorted_data = heap_sort(data)\nprint(sorted_data) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]", "category": "Python"}, {"instruction": "Create a function in Python that takes two parameters, x and y, and prints out all numbers between x and y.", "input": "", "output": "def display_numbers(x, y):\n  for i in range(x,y+1):\n    print(i)", "category": "Python"}, {"instruction": "Debug the following code and explain why it gave an error.", "input": "def sum(a, b):\n    try:\n      return a + b\n    except TypeError: \n        return \"inputs should be numbers\"\n    finally:\n        print(\"This function has successfully executed\")\noutput = sum(1, '2')", "output": "The code gave an error because a TypeError was raised due to trying to add an integer and a string. The error can be resolved by adding type-checking in the code: \n\ndef sum(a, b):\n    try:\n      if type(a) == int and type(b) == int:\n        return a + b\n      else:\n        return \"inputs should be numbers\"\n    except TypeError: \n        return \"inputs should be numbers\"\n    finally:\n        print(\"This function has successfully executed\")\noutput = sum(1, '2')", "category": "Python"}, {"instruction": "Write a function to delete redundant items from a list.", "input": "[3, 2, 1, 3, 5, 6, 3, 2]", "output": "def delete_redundant_items(list_param):\n    \"\"\"\n    Function to delete redundant items from a list\n    \"\"\"\n    result_list = []\n    for item in list_param:\n        if item not in result_list:\n            result_list.append(item)\n    return result_list", "category": "Python"}, {"instruction": "Create a function that takes a string of brackets and checks if they are correctly matched or not.", "input": "", "output": "def check_brackets(bracket_string):\n    \"\"\"\n    Function that checks if bracket string is correctly matched.\n    \"\"\"\n    stack = []\n    open_brackets = {'[', '{', '('}\n    close_brackets = {']', '}', ')'}\n    \n    for bracket in bracket_string:\n        if bracket in open_brackets:\n            stack.append(bracket)\n        elif bracket in close_brackets:\n            if not stack or close_brackets[bracket] != stack.pop():\n                return False\n        \n    return not stack", "category": "Python"}, {"instruction": "Implement a function that prints n asterisk characters in a row.", "input": "", "output": "def print_asterisks(n):\n  for i in range(n): \n    print(\"*\", end=\"\")\n  print()", "category": "Python"}, {"instruction": "How would you store the values of this array of dictionaries in a database?", "input": "[\n {'name': 'John', 'age': 28},\n {'name': 'Marry', 'age': 27},\n {'name': 'David', 'age': 30}\n]", "output": "The values of the array of dictionaries can be stored in a database using an SQL query. The query would create a table with columns for each key in the dictionaries and then store the values in their respective columns. For each dictionary, an INSERT query would be run to add the values of that dictionary to database.", "category": "Python"}, {"instruction": "Write a Python program to create a nested dictionary from two lists.", "input": "l1 = ['a', 'b', 'c'] \nl2 = [1, 2, 3]", "output": "{'a': 1, 'b': 2, 'c': 3}", "category": "Python"}, {"instruction": "Suggest a data structure in Python to store a list of countries and their capitals.", "input": "", "output": "A dictionary can be used to store a list of countries and their respective capitals. The key for each country should be the name of the country and the value should be its capital city. For example: \n\ndict = {\n    'India': 'New Delhi',\n    'China': 'Beijing', \n    'UK': 'London'\n}", "category": "Python"}, {"instruction": "What could be a use case of a 'while' loop in Python?", "input": "", "output": "A while loop can be used to iterate over a sequence or perform a computation until a specific condition is met. For example, it can be used to generate a list of prime numbers, where it would check if the current number is a prime number by checking if its divisible by any of the already discovered primes before it.", "category": "Python"}, {"instruction": "Name one benefit of using a function in Python.", "input": "", "output": "One of the key benefits of using functions in Python is code reusability. Functions help reduce the code duplication and promote code readability by allowing us to store and reuse code in a single place. This makes it easier for us to debug and modify existing code. Furthermore, functions can help reduce the cognitive load and effort required to understand the code. As functions encapsulate related code blocks, we can focus on the logic contained within the function instead of worrying about unrelated code.", "category": "Python"}, {"instruction": "Create a python class with a method to generate the following table format", "input": "", "output": "class Table_Generator:\n    def generate_table(self):\n        print('+---------+--------+--------+')\n        print('|   S.No  |  Name  |  Age   |')\n        print('+---------+--------+--------+')", "category": "Python"}, {"instruction": "Create a validation function to check if the inputed string contains any numbers.", "input": "", "output": "import re\n\ndef validate_string(input_str):\n    pattern = r\"\\d\"\n    if re.search(pattern, input_str):\n        return False\n    else:\n        return True", "category": "Python"}, {"instruction": "Explain the concept of Convolutional Neural Networks.", "input": "", "output": "Convolutional Neural Networks (CNNs) are a type of deep learning neural network used primarily in image processing, computer vision, and natural language processing tasks. CNNs utilize a grid of neurons that learn to extract relevant features from an input, such as patterns or shapes, known as filters. This allows CNNs to perform hierarchical feature extraction from input data, which is useful in areas where the data has a nonlinear or highly structured nature. CNNs can be used to classify images, detect objects in images, extract features from audio and video signals, and much more.", "category": "Python"}, {"instruction": "Create a Python module for extracting the sum of all digits of an integer.", "input": "", "output": "def digit_sum(number):\n    if number == 0:\n        return 0\n    return (number % 10) + digit_sum(number // 10)", "category": "Python"}, {"instruction": "Write a Python program to get the volume of a sphere with a given radius.", "input": "", "output": "import math\n\ndef sphere_volume(radius):\n    return (4*math.pi*radius*radius*radius)/3", "category": "Python"}, {"instruction": "Design an algorithm to retrieve the longest word from an array of strings.", "input": "[\u2018Hello\u2019, \u2018World\u2019, \u2018This\u2019, \u2018is\u2019, \u2018a\u2019, \u2018code\u2019]", "output": "def get_longest_word(strings):\n    longest_word = ''\n    for s in strings:\n        if len(s) > len(longest_word):\n            longest_word = s\n    return longest_word", "category": "Python"}, {"instruction": "Write a function to encode a given string using ROT13 cipher.", "input": "String: Hello world", "output": "def rot13(string):\n    encoded = \"\"\n    for char in string:\n        if char.isalpha():\n            ascii_val = ord(char)\n            ascii_val += 13\n            if ascii_val > ord('z'):\n                ascii_val -= 26\n            encoded += chr(ascii_val)\n        else:\n            encoded += char\n    return encoded", "category": "Python"}, {"instruction": "Write a function to generate the next line of Pascal's Triangle given the parent line.", "input": "Parent line: [1, 2, 1]", "output": "def next_pascals_triangle(parent):\n    next_line = [1]\n    for i in range(len(parent)-1):\n        next_line.append(parent[i] + parent[i+1])\n    next_line.append(1)\n    return next_line", "category": "Python"}, {"instruction": "Create a function to print out a FizzBuzz pattern for a given number range.", "input": "Number range: 5-20", "output": "def fizzbuzz_pattern(n):\n    for num in range(n, n+16):\n        if num % 3 == 0 and num % 5 == 0:\n            print(\"FizzBuzz\")\n        elif num % 3 == 0:\n            print(\"Fizz\")\n        elif num % 5 == 0:\n            print(\"Buzz\")\n        else:\n            print(num)", "category": "Python"}, {"instruction": "Write code to convert a given hexadecimal string to a binary string.", "input": "Hexadecimal string: 7468", "output": "def hex_to_bin(hexadecimal_str):\n    return bin(int(hexadecimal_str, 16))[2:] # [2:] removes 0b from the start", "category": "Python"}, {"instruction": "Write code to return a list of prime numbers in the given range.", "input": "Start: 10. End: 15", "output": "def get_prime_numbers(start, end):\n    prime_numbers = []\n    for num in range(start, end + 1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                prime_numbers.append(num)\n    return prime_numbers\n    \n# print list of prime numbers\nprint(get_prime_numbers(10, 15))  \n# Output: [11, 13, 15]", "category": "Python"}, {"instruction": "For a given array of integers, write a function to find the mean.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def calculate_mean(arr):\n    return sum(arr) / len(arr)\n    \n# Driver Code \nif __name__ == '__main__': \n    arr = [1, 2, 3, 4, 5]\n    mean = calculate_mean(arr)\n    print(\"Mean for given array is:\", mean)", "category": "Python"}, {"instruction": "Calculate the number of anagrams present in a given string.", "input": "string = \"listen\"", "output": "def calculateAnagrams(string): \n   \n    # Create a list of all permutations \n    all_permutations = [''.join(i) for i in permutations(string)] \n   \n    # Return the count of all permutations \n    return len(all_permutations) \n  \n# Driver code \nprint(calculateAnagrams('listen'))", "category": "Python"}, {"instruction": "Write an algorithm to check whether a given word is palindrome or not.", "input": "", "output": "def is_palindrome(str):\n    # reverse the string \n    rev_str = str[::-1] \n  \n    # if string is equal then return true \n    if rev_str == str: \n        return True\n    return False", "category": "Python"}, {"instruction": "Name a few use cases of Convolutional Neural Networks.", "input": "", "output": "Convolutional Neural Networks are widely used in domains such as computer vision, natural language processing, pattern recognition, time series analysis, audio processing, object recognition and classification, and for other tasks such as image segmentation, automated image captioning, image deblurring, object detection and tracking.", "category": "Python"}, {"instruction": "Give a few examples of when to use a Stack data structure.", "input": "", "output": "A stack data structure can be used for a variety of tasks, such as for traversal of a recursive object, storing and retrieving data from a history buffer, expression evaluation, and undo and redo operations. Another common use case is storage of a continuous stream of data, such as a rolling list of recent purchases.", "category": "Python"}, {"instruction": "Create a program that takes in a list of numbers and returns the product of all the elements in the list.", "input": "[2, 4, 10, 5]", "output": "def product(nums):\n  total = 1\n  for num in nums:\n    total *= num\n  return total", "category": "Python"}, {"instruction": "Create a function to filter out any strings containing the word \"the\" from a list of strings.", "input": "", "output": "def filter_the(string_list):\n    filtered_list = []\n    for string in string_list:\n        if \"the\" not in string:\n            filtered_list.append(string)\n    return filtered_list", "category": "Python"}, {"instruction": "Create a function to remove all the characters in a string except a-z, A-Z and 0-9.", "input": "", "output": "def remove_non_alphanumeric(string):\n    filtered_string = \"\"\n    for char in string:\n        if char.isalnum():\n            filtered_string += char\n    return filtered_string", "category": "Python"}, {"instruction": "Complete the following code to find the longest word in the given string.", "input": "def longest_word(sentence):", "output": "def longest_word(sentence):\n    words = sentence.split()\n    longest_word = ''\n    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n            longest_word = word\n    return longest_word", "category": "Python"}, {"instruction": "Complete the following code to print a 2D array passed as parameter.", "input": "def print2Dlist (list) :", "output": "def print2Dlist (list) :\n\tfor row in list:\n\t\tfor element in row:\n\t\t\tprint (element, end=\" \") \n\t\tprint ()", "category": "Python"}, {"instruction": "Design a python class for a dog to print its name and age when given.", "input": "Ginger, 3", "output": "class Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def get_name(self):\n        return self.name\n\n    def get_age(self):\n        return self.age\n\ndog = Dog('Ginger', 3)\nprint(dog.get_name())\nprint(dog.get_age())", "category": "Python"}, {"instruction": "Create a UUID in Python.", "input": "", "output": "import uuid\n\nprint(uuid.uuid4())", "category": "Python"}, {"instruction": "Create a class in Python named 'Car' and implement a method that shows the current speed of the car.", "input": "", "output": "class Car():\n    def __init__(self, speed):\n        self.speed = speed\n\n    def show_speed(self):\n        print(\"The current speed is:\", self.speed)", "category": "Python"}, {"instruction": "Create a function that identifies the type of a value", "input": "", "output": "def identify_value_type(val):\n    if type(val) is int:\n        return 'int'\n    elif type(val) is float:\n        return 'float'\n    elif type(val) is str:\n        return 'str'\n    elif type(val) is list:\n        return 'list'\n    elif type(val) is dict:\n        return 'dict'", "category": "Python"}, {"instruction": "From a given string, count the number of unique characters", "input": "", "output": "def count_unique_chars(s):\n    chars = set()\n    for char in s:\n        chars.add(char)\n    return len(chars)", "category": "Python"}, {"instruction": "Are ternary operators fast in Python?", "input": "", "output": "Ternary operators are often faster than if/else statements in Python, as they can reduce the amount of code and conditionals needed. However, there are some cases where an if/else statement may be faster, such as when there are multiple conditions that need to be checked.", "category": "Python"}, {"instruction": "Compute the sum of two give two-dimensional arrays.", "input": "array1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\narray2 = [[1, 3, 5], [2, 4, 6], [7, 8, 9]]", "output": "def matrix_sum(a, b):\n    result = [[0 for d in range(len(a))] for d in range(len(a[0]))]\n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            result[i][j] = a[i][j] + b[i][j]\n    return result", "category": "Python"}, {"instruction": "Edit the following code for optimal performance.", "input": "def sum_nums():\n    result = 0 \n    for i in range(10):\n        result += i\n    return result", "output": "def sum_nums():\n    result = 0\n    n = 10\n    while n > 0:\n        result += (n - 1)\n        n -= 1\n    return result", "category": "Python"}, {"instruction": "Write a Python function to print a multiplication table of size 10.", "input": "", "output": "def print_multiplication_table(size):\n    for i in range(1, size+1):\n        for j in range(1, size+1):\n            print(i*j, end=\"\\t\")\n        print(\"\\r\")\n \nprint_multiplication_table(10)", "category": "Python"}, {"instruction": "Code a program to display the prime factors of a number.", "input": "30", "output": "def find_prime_factors(n):\n prime_factors = []\n for i in range(2, n + 1):\n if n % i == 0:\n if is_prime(i):\n prime_factors.append(i)\n return prime_factors\n\ndef is_prime(n):\n if n <= 1:\n return False\n for i in range(2, int(n**0.5) + 1):\n if n % i == 0:\n return False\n return True", "category": "Python"}, {"instruction": "Create a function that can detect if a word is a palindrome.", "input": "Word: racecar", "output": "def isPalindrome(string): \n    left = 0\n    right = len(string) - 1\n  \n    while right >= left:\n        if not string[left] == string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n\n# Test program\nisPalindrome(\"racecar\")\n\n# Output\n# True", "category": "Python"}, {"instruction": "Convert a string to its inverse form.", "input": "String: \"Hello World!\"", "output": "def string_inverse(string): \n    inverse_string = \"\"\n    for i in range(len(string)-1, -1, -1):\n        inverse_string += string[i]\n    return inverse_string\n\n# Test program\nstring = \"Hello World!\"\ninverse_string = string_inverse(string)\n\nprint(\"Original String: %s\" % string)\nprint(\"Inverse String: %s\" % inverse_string)\n\n# Output\n# Original String: Hello World!\n# Inverse String: !dlroW olleH", "category": "Python"}, {"instruction": "Write a function in Python that takes a number, x, and returns True if the number is even or False if the number is odd.", "input": "", "output": "def is_even(x):\n   return x%2 == 0", "category": "Python"}, {"instruction": "Build a function to detect if a provided number is prime.", "input": "", "output": "def is_prime(num):\n    if num <= 1: \n        return False\n    for i in range(2, num): \n        if num % i == 0: \n            return False\n    return True", "category": "Python"}, {"instruction": "Create a Python function to print a Fibonacci sequence up to n number of digits.", "input": "", "output": "def fib(n):\n a,b = 0,1\n while a<n:\n  print(a, end=' ')\n  a,b = b,a+b\n print()", "category": "Python"}, {"instruction": "Write a function in Python that takes a character (i.e. a string of length 1) and returns True if it is a vowel, False otherwise.", "input": "", "output": "def is_vowel(char):\n    vowels = 'aeiou'\n    return char in vowels", "category": "Python"}, {"instruction": "Create a function in Python which takes a list and finds the second highest number in it.", "input": "arr = [2, 3, 1, 5, 4]", "output": "def second_highest_num(arr):\n  arr.sort()\n  return arr[-2]", "category": "Python"}, {"instruction": "Create a class that represents a circle", "input": "radius = 5.5", "output": "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    def area(self):\n        return self.radius * self.radius * 3.14\n\nc = Circle(radius) \nprint(c.area())  # Output: 95.033", "category": "Python"}, {"instruction": "Deconstruct this line of Python code and explain what it does", "input": "y = [x**2 for x in range(10)]", "output": "This line of code is a Python List Comprehension, it will iterate through the range of 0 to 9 and square each of those numbers and add them to a new list 'y'. The list will contain the squares of the numbers 0 to 9, i.e. [0, 1, 4, 9, 16, 25, 36, 49, 64, 81].", "category": "Python"}, {"instruction": "Write a function that can generate all permutations of a given string.", "input": "string = \"ABC\"", "output": "def permute(string):\n    if len(string) == 1:\n        return [string] \n\n    prevList = permute(string[1:]) \n\n    nextList = [] \n    for i in range(len(prevList)): \n        for j in range(len(string)): \n            newString = prevList[i][:j] + string[0:1] + prevList[i][j:] \n            if newString not in nextList: \n                nextList.append(newString) \n    return nextList", "category": "Python"}, {"instruction": "Write a function that can split an array into two equally-sized subarrays.", "input": "arr = [1, 2, 3, 4, 5, 6]", "output": "def split_array(arr):\n    if len(arr) % 2 != 0:\n        return False\n\n    mid = len(arr)// 2\n    left_arr = arr[:mid]\n    right_arr = arr[mid:]\n\n    return [left_arr, right_arr]", "category": "Python"}, {"instruction": "Write a function to replace the Kth smallest number in integer array with 0.", "input": "nums = [2, 9, 8, 11, 5]\nK = 3", "output": "def replace_kth_smallest(nums, k):\n    min_num = min(nums)\n    min_count = nums.count(min_num)\n    if k > min_count:\n        k -= min_count\n        nums.remove(min_num)\n    nums[k-1] = 0\n    return nums", "category": "Python"}, {"instruction": "Create a Python program which takes a sentence and prints back the words in reverse order", "input": "", "output": "def reverse_words(sentence):\n  words = sentence.split()\n  words.reverse()\n  return ' '.join(words)", "category": "Python"}, {"instruction": "Write a Python function that takes two strings and returns the longest common subsequence.", "input": "str1 = \"AGGTAB\"\nstr2 = \"GXTXAYB\"", "output": "def LongestCommonSubsequence(str1, str2):\n    n = len(str1)\n    m = len(str2)\n    t = [[0 for j in range(m+1)] for i in range(n+1)]\n    \n    for i in range(1, n+1): \n        for j in range(1, m+1):  \n            if str1[i-1] == str2[j-1]: \n                t[i][j] = 1 + t[i-1][j-1] \n            else: \n                t[i][j] = max(t[i-1][j], t[i][j-1])   \n    return t[n][m]", "category": "Python"}, {"instruction": "Write a python regex pattern to filter the following list of strings.", "input": "string_list = ['ABC1', 'DEF2', 'GHI3', 'ABC4', 'JKL5']", "output": "import re \n  \nstring_list = ['ABC1', 'DEF2', 'GHI3', 'ABC4', 'JKL5']\nfiltered_list = list(filter(lambda x: re.search('^[A-Z]{3}[0-9]$',x), string_list)) \n\nprint(filtered_list) \n \n# Output: ['ABC1', 'DEF2', 'GHI3']", "category": "Python"}, {"instruction": "Add code to make an API call using a library to a given JSON endpoint and retrieve the data.", "input": "API URL: https://example.com/endpoint/data", "output": "import requests\n \nurl = \"https://example.com/endpoint/data\"\nresponse = requests.get(url)\ndata = response.json()", "category": "Python"}, {"instruction": "Code a function to generate a random string of 10 randomly selected characters.", "input": "", "output": "import string\nimport random\n\ndef generate_random_string():\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(10))\n\nrandom_string = generate_random_string()", "category": "Python"}, {"instruction": "What is the difference between compile-time and run-time errors?", "input": "", "output": "Compile-time errors occur when code does not conform to the syntax specified by the programming language, and usually prevent the code from being executed. Run-time errors occur when code is syntactically correct, but there are still problems executing the code. Run-time errors typically occur at the point where code is executed, as opposed to compile-time errors which occur at the point of compilation. The types of errors usually depend on the type of language used for programming. For example, compiling Java code with a C++ compiler would cause a compile-time error since the two languages have different syntaxes.", "category": "Python"}, {"instruction": "Write a function in Python that takes a list and returns the one with all negative numbers sorted in ascending order.", "input": "[3, -4, 1, -2]", "output": "def remove_negative_numbers(lst):\n  negative = []\n  for x in lst:\n    if x < 0:\n      negative.append(x)\n  return sorted(negative)", "category": "Python"}, {"instruction": "What is the reuse principle in software engineering?", "input": "", "output": "The reuse principle in software engineering states that software components should be written and designed for reuse in other software components and systems. This can save developers time and money when developing software, since they can use existing components to build new functions and features into their software products. Additionally, it helps promote consistent coding, makes debugging easier, and reduces the risk of introducing bugs and other errors.", "category": "Python"}, {"instruction": "Fill in the blanks of the following Python code to implement a Selection Sort algorithm.", "input": "def selection_sort(arr):\n    for [i] in [range](len(arr),1,-1):\n        max_element=arr[0]\n        for [j] in [range]([i]):\n            if arr[j] > max_element :\n                max_element=arr[j]\n          \n        [temp] = arr[i]\n        arr[i] = max_element\n        arr[arr.index(max_element)] = [temp]", "output": "def selection_sort(arr):\n    for i in range(len(arr),1,-1):\n        max_element=arr[0]\n        for j in range(i):\n            if arr[j] > max_element :\n                max_element=arr[j]\n          \n        temp = arr[i-1]\n        arr[i-1] = max_element\n        arr[arr.index(max_element)] = temp", "category": "Python"}, {"instruction": "Create a graphical user interface using Python to perform the following function", "input": "Take two inputs from the user: a name and an age", "output": "import tkinter \n  \n# Create an instance of tkinter \nroot = tkinter.Tk()  \n  \n# Create two lables and two input boxes \nname_label = tkinter.Label(root, text ='Name: ')   \nage_label = tkinter.Label(root, text ='Age: ') \nname_entry = tkinter.Entry(root) \nage_entry = tkinter.Entry(root) \n  \n# Place the labels,entry boxes in the desired layout \nname_label.grid(row = 0, column = 0)   \nname_entry.grid(row = 0, column = 1)  \nage_label.grid(row = 1, column = 0)   \nage_entry.grid(row = 1, column = 1) \n  \nroot.mainloop()", "category": "Python"}, {"instruction": "Write a correct implementation of the following algorithm", "input": "Binary search for an element x in a sorted array", "output": "def binary_search(arr, x): \n    low = 0\n    high = len(arr) - 1\n    while low <= high: \n        mid = (high+low)//2\n        if arr[mid] < x: \n            low = mid + 1\n        elif arr[mid] > x: \n            high = mid - 1\n        else: \n            return mid \n  \n    return -1", "category": "Python"}, {"instruction": "Write a function to calculate the number of letter and non-letter characters in a string.", "input": "Input: 'If These Hills'", "output": "def numberOfLettersAndNonLetterCharacters(string):\n    count_characters = 0\n    count_non_characters = 0\n    \n    for char in string:\n        if char.isalpha():\n            count_characters += 1\n        else:\n            count_non_characters += 1\n    return (count_characters, count_non_characters)\n\nprint(numberOfLettersAndNonLetterCharacters('If These Hills'))", "category": "Python"}, {"instruction": "Explain what boolean operators are and what do they do.", "input": "", "output": "Boolean operators are logical operators which allow us to connect two or more conditions in a statement. These operators return a boolean value when evaluates multiple conditions or objects. The three main boolean operators are AND, OR, NOT. The AND operator returns true if both conditions are true, OR operator if any one of the condition is true and NOT operator returns true only if the condition is false.", "category": "Python"}, {"instruction": "Generate a function in Python which takes a list and sorts the list elements in ascending order", "input": "", "output": "def sort_ascending(nums):\n  return sorted(nums)", "category": "Python"}, {"instruction": "Write a Python program to print the calendar of a given month and year", "input": "", "output": "import calendar\n\ndef get_calendar(month, year):\n  return calendar.month(year, month)", "category": "Python"}, {"instruction": "Write code to search for a number in a sorted array.", "input": "", "output": "def binary_search(list, target):\n    low = 0\n    high = len(list)-1\n    while low <= high:\n        mid = (low + high) // 2\n        if list[mid] == target:\n            return mid\n        if list[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1", "category": "Python"}, {"instruction": "Find all substring of a string.", "input": "String: \"abcdefg\"", "output": "# function to find all the substrings of a given string  \ndef substr(string):  \n    length = len(string) \n  \n    # Weighted Index of the string  \n    w_index = 0\n      \n    list_substr = [] \n  \n    # Run a loop from 0 to n-1 \n    while w_index < length: \n  \n        # Run inner loop from w_index + 1 to n  \n        s_index = w_index + 1\n        while s_index < length + 1: \n            list_substr.append(string[w_index:s_index])\n            s_index += 1\n          \n        w_index += 1\n          \n    return list_substr\n\n# Test program \ns = \"abcdefg\"\nprint(substr(s)) \n\n# Output\n# ['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'b', 'bc', 'bcd', 'bcde', 'bcdef', 'bcdefg', 'c', 'cd', 'cde', 'cdef', 'cdefg', 'd', 'de', 'def', 'defg', 'e', 'ef', 'efg', 'f', 'fg', 'g']", "category": "Python"}, {"instruction": "Use the NumPy package to multiply two matrices.", "input": "Matrix1: [[1, 2], [3, 4]]\nMatrix2: [[2, 3], [4, 5]]", "output": "import numpy as np\n \nmatrix1 = np.array([[1, 2], [3, 4]])\nmatrix2 = np.array([[2, 3], [4, 5]])\n \nproduct = np.matmul(matrix1, matrix2)\nprint(product)\n\n# Output\n# array([[10, 13],\n#        [22, 29]])", "category": "Python"}, {"instruction": "Create a machine learning classifier that can classify the sentiment of a text.", "input": "Text: This product is really bad", "output": "# import required libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Read the data into a Pandas DataFrame\ndata = pd.read_csv('data.csv')\n\n# Convert the Labels (Positive/Negative) to numbers\ndata['Sentiment'] = [1 if sentiment == 'Positive' else 0 for sentiment in data['Sentiment']]\n\n# Create the feature matrix\ncount_vectorizer = CountVectorizer()\nX = count_vectorizer.fit_transform(data['Text'])\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, data['Sentiment'], test_size=0.20, random_state=42)\n\n# Train a Multinomial Naive Bayes Classifier\nclf = MultinomialNB().fit(X_train, y_train)\n\n# Use the Classifier to predict the label of the input text\nprediction = clf.predict(count_vectorizer.transform([\"This product is really bad\"]))[0]\n\nif prediction == 1:\n    print(\"Positive\")\nelse:\n    print(\"Negative\")", "category": "Python"}, {"instruction": "Create a class in Python to represent a rectangle with the attributes width, height, and area.", "input": "", "output": "class Rectangle:\n  def __init__(self, width, height):\n    self.width = width\n    self.height = height\n    self.area = width * height", "category": "Python"}, {"instruction": "How do I create a function that sums two integers in Python?", "input": "", "output": "def add_two_ints(a, b):\n    return a + b", "category": "Python"}, {"instruction": "Create a class called \"IDgenerator\" that generates a list of unique random numbers between a given range.", "input": "", "output": "import random\n\nclass IDGenerator:\n    def __init__(self, min_val, max_val):\n        self.min_val = min_val\n        self.max_val = max_val\n        self.ids = []\n\n    def generate(self):\n        rand_int = random.randint(self.min_val, self.max_val)\n        while rand_int in self.ids:\n            rand_int = random.randint(self.min_val, self.max_val)\n        self.ids.append(rand_int)\n        return rand_int", "category": "Python"}, {"instruction": "Design a tree data structure to store employee records in an organization.", "input": "", "output": "class EmployeeTree:\n    def __init__(self, name):\n        self.name = name\n        self.children = []\n\n    # add a sub-employee to the tree\n    def add_child(self, name):\n        self.children.append(EmployeeTree(name))\n\n    # remove a sub-employee from the tree\n    def remove_child(self, name):\n        for child in self.children:\n            if child.name == name:\n                self.children.remove(child)", "category": "Python"}, {"instruction": "Write a Python code to find the number of vowels in a provided string.", "input": "string = \"Hello, World!\"", "output": "# Count the number of vowels in the string\nnum_vowels = 0\nfor char in string:\n    if char in 'aeiouAEIOU':\n        num_vowels += 1\n\nprint(\"Number of vowels:\", num_vowels)", "category": "Python"}, {"instruction": "Write a python code to check for a number being prime or not.", "input": "num = 11", "output": "# Initialize a boolean no_prime\nno_prime = False\n\n# Check all numbers lower than num\nfor i in range(2, num):\n    if num % i == 0: \n        no_prime = True\n        break \n\n# Print the appropriate output\nif no_prime:\n    print(num, 'is not prime')\nelse:\n    print(num, 'is prime')", "category": "Python"}, {"instruction": "Write a python code snippet to square the number 12.", "input": "", "output": "x = 12\ny = x**2\nprint(y)", "category": "Python"}, {"instruction": "Edit the code to fix the following bug: The code doesn't return the expected output.", "input": "def sum(numbers):\n    x = 0\n    for n in numbers:\n        x += n\n    return x", "output": "def sum(numbers):\n    x = 0\n    for n in numbers:\n        x += n\n    return int(x)", "category": "Python"}, {"instruction": "Sort a given array according to the given criteria", "input": "[1, 20, 12, 15, 5], 'desc'", "output": "def sort_array(arr, order):\n    if order == 'asc': \n        arr.sort() \n    else: \n        arr.sort(reverse=True) \n    return arr \n\narr = [1, 20, 12, 15, 5] \norder = 'desc'\n\nprint(sort_array(arr, order))\n# Output: [20, 15, 12, 5, 1]", "category": "Python"}, {"instruction": "You need to write a function to find the index of a value in an array", "input": "[1, 2, 3, 4], 3", "output": "def find_index(arr, val):\n    for index, elem in enumerate(arr):\n        if val == elem:\n            return index\n    return -1\n\nprint(find_index([1, 2, 3, 4], 3))\n# Output: 2", "category": "Python"}, {"instruction": "Determine whether a given number is an armstrong number or not", "input": "153", "output": "def is_armstrong_number(num):\n  digits = [int(x) for x in str(num)]\n  sum_ = 0\n  for digit in digits:\n    sum_ += pow(digit, len(digits))\n  return num == sum_\n\nprint(is_armstrong_number(153))\n# Output: True", "category": "Python"}, {"instruction": "Generate a list of prime numbers", "input": "", "output": "def generate_primes(n):\n    prime_list = []\n    for num in range(2, n + 1): \n        if all(num % i != 0 for i in range(2, num)): # check if num is prime\n            prime_list.append(num)\n    return prime_list", "category": "Python"}, {"instruction": "Rewrite the following code in a more efficient way, keeping the same logic:", "input": "for i in range(len(lst)-1):\n    for j in range(i+1, len(lst)):\n        if lst[i]==lst[j]:\n            return True", "output": "def find_duplicate(lst):\n    seen = set()\n    for elem in lst:\n        if elem in seen:\n            return True\n        seen.add(elem)\n    return False", "category": "Python"}, {"instruction": "Create a module in Python to read webpages into the program", "input": "", "output": "import urllib\n\ndef read_webpage(url):\n    with urllib.request.urlopen(url) as response:\n        return response.read()", "category": "Python"}, {"instruction": "Write a Python program to calculate the frequency of each element in a given list.", "input": "mylist = [2, 3, 4, 2, 3, 5, 6, 7]", "output": "def frequency_count(mylist):\n    freq = {}\n    for element in mylist:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return freq\n    \nprint(frequency_count(mylist)) # output {2: 2, 3: 2, 4: 1, 5: 1, 6: 1, 7: 1}", "category": "Python"}, {"instruction": "Identify the correct code to execute an API call with the python requests library.", "input": "", "output": "import requests\n \nresponse = requests.get('http://example.com/api')", "category": "Python"}, {"instruction": "Create an API endpoint that takes two inputs (phone number and name) and updates contact details in the database.", "input": "", "output": "@app.route(\"/api/update_contact_details\", methods=['PUT'])\ndef update_contact_details():\n    # Get the inputs from the request body\n    phone_number = request.json['phone_number']\n    name = request.json['name']\n    # Query the database\n    db.execute(\"UPDATE contacts SET name = '{name}' WHERE phone = '{phone_number}'\".format(name=name, phone_number=phone_number))\n    return jsonify(status=\"success\")", "category": "Python"}, {"instruction": "Write a Python code snippet that checks if all elements in the input list are equal.", "input": "[10, 10, 10]", "output": "all_equal = all(x == 10 for x in [10, 10, 10])", "category": "Python"}, {"instruction": "Write a function to print out all possible permutations of a list of numbers.", "input": "list = [1, 2, 3]", "output": "def permutations(list): \n    if len(list) == 0: \n        return [] \n    if len(list) == 1: \n        return [list]\n    l = [] #empty list \n  \n    for i in range(len(list)): \n        m = list[i] \n        remList = list[:i] + list[i+1:] \n        for p in permutations(remList): \n            l.append([m] + p) \n    return l", "category": "Python"}, {"instruction": "Create a BST with two data elements 10 and 15.", "input": "", "output": "class Node:\n    def __init__(self, data):\n        self.data = data \n        self.left = None\n        self.right = None\n\nclass BST:\n    def __init__(self):\n        self.root = None\n  \n  \n    def insert(self, value):\n        if self.root is None:\n            self.root = Node(value)\n        else:\n            self._insert(value, self.root)\n  \n    def _insert(self, value, cur_node):\n        if value < cur_node.data:\n            if cur_node.left is None:\n                cur_node.left = Node(value)\n            else:\n                self._insert(value, cur_node.left)\n        elif value >= cur_node.data:\n            if cur_node.right is None:\n                cur_node.right = Node(value)\n            else:\n                self._insert(value, cur_node.right)\n        else:\n            pass \n\nbst = BST()\nbst.insert(10)\nbst.insert(15)", "category": "Python"}, {"instruction": "Create a print statement that will print out a formatted table containing the elements of a 2D list.", "input": "2D List: [[1,2,3], [4,5,6], [7,8,9]]", "output": "# Get the list\ntwoD_list = [[1,2,3], [4,5,6], [7,8,9]]\n\n# Print it out as a table\nfor row in twoD_list:\n    for val in row:\n        print('{:4}'.format(val), end=\"\")\n    print()\n\n# Output\n#   1   2   3\n#   4   5   6\n#   7   8   9", "category": "Python"}, {"instruction": "Given a binary tree, write a program to calculate the sum of all its nodes.", "input": "", "output": "def calculateSumOfBinaryTree(root):\n    if root == None:\n        return 0\n    else:\n        return root.data + calculateSumOfBinaryTree(root.left) + calculateSumOfBinaryTree(root.right)", "category": "Python"}, {"instruction": "Develop a code to check if a given array is sorted or not.", "input": "[1, 2, 4, 3]", "output": "def is_sorted(array):\n for i in range(len(array)-1):\n if array[i] > array[i+1]:\n return False\n return True", "category": "Python"}, {"instruction": "Split the sentence into individual words using Python.", "input": "sentence = \"This sentence needs to be split.\"", "output": "words = sentence.split(' ')\nprint(words)\n# Output: ['This', 'sentence', 'needs', 'to', 'be', 'split.']", "category": "Python"}, {"instruction": "Create a function to process the following data and return the average temperature for the last five days.", "input": "days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\ntemps = [27, 28, 29, 20, 21]", "output": "def get_avg_temp(days, temps):\n    total = 0\n    for i in range(len(days)):\n        total += temps[i]\n        \n    avg = total / len(days)\n    \n    return avg", "category": "Python"}, {"instruction": "Create a boolean function called \"is_num_even\" which takes in a number and returns true if the number is even.", "input": "", "output": "def is_num_even(number):\n    if number % 2 == 0:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Print all the odd numbers from 1 to 10 (inclusive)", "input": "", "output": "for num in range(1, 11):\n    if num % 2 == 1:\n        print(num)", "category": "Python"}, {"instruction": "Create classes to represent a credit card and account holder.", "input": "No input.", "output": "class CreditCard:\n    def __init__(self, card_number):\n        self.card_number = card_number\n\nclass AccountHolder:\n    def __init__(self):\n        self.cards = []\n    def add_card(self, card):\n        self.cards.append(card)", "category": "Python"}, {"instruction": "Write a Python class that implements a sorted list.", "input": "No input.", "output": "class SortedList:\n    def __init__(self):\n        self.items = []\n\n    def add(self, item):\n        i = 0\n        while i < len(self.items) and self.items[i] < item:\n            i += 1\n        self.items.insert(i, item)\n\n    def remove(self, item):\n        i = 0\n        while i < len(self.items) and self.items[i] != item:\n            i += 1\n        if i < len(self.items):\n            del self.items[i]\n\n    def remove_at(self, index):\n        del self.items[index]", "category": "Python"}, {"instruction": "Modify the given code to debug 'NameError: name 'x' is not defined'.", "input": "nums = range(20)\nfor x in nums:\n    if x % 2 == 0:\n        print(square(x))", "output": "nums = range(20)\nfor x in nums:\n    if x % 2 == 0:\n        print(x**2)", "category": "Python"}, {"instruction": "How would you perform a two-way pivot table in Python using Pandas?", "input": "", "output": "Pandas can be used to perform a two-way pivot table in Python using the pivot_table() method. The pivot_table() method takes a data frame as an argument and can be used to reshape the data frame into a two-way pivot table. It takes several parameters, including values, index, columns, aggfunc, and fill_value. For example, if we want to calculate the total sales for each customer for each product, we can use the following statement: \n\npd.pivot_table(data, values=\"sales\", columns=\"product\", index=\"customer\", aggfunc=\"sum\", fill_value=0)", "category": "Python"}, {"instruction": "Create two classes, Dog and Cat, that extend the Animal class.", "input": "class Animal:\n    def __init__(self, name):\n        self.name = name\n        self.health = 100", "output": "class Animal:\n    def __init__(self, name):\n        self.name = name\n        self.health = 100\n\nclass Dog(Animal):\n    def bark(self):\n        print(\"Woof!\")\n\nclass Cat(Animal):\n    def meow(self):\n        print(\"Meow!\")", "category": "Python"}, {"instruction": "Implement a vector class in Python that allows for basic vector operations such as vector addition, subtraction and scalar multiplication.", "input": "", "output": "class Vector(object):\n \n  def __init__(self, components):\n    self.components = components\n \n  def add(self, vector):\n    if len(self.components) != len(vector.components):\n      return None\n    components = [x + y for x, y in zip(self.components, vector.components)]\n    return Vector(components)\n \n  def sub(self, vector):\n    if len(self.components) != len(vector.components):\n      return None\n    components = [x - y for x, y in zip(self.components, vector.components)]\n    return Vector(components)\n \n  def scalar_mul(self, scalar):\n    components = [x * scalar for x in self.components]\n    return Vector(components)", "category": "Python"}, {"instruction": "How could you loop through the elements of a list in Python?", "input": "", "output": "for element in my_list:\n    # do something with the element", "category": "Python"}, {"instruction": "Compute the Fibonacci series up to the following number n.", "input": "", "output": "def fibonacci(n):\n  a = 0 \n  b = 1\n  arr = []\n  arr.append(a)\n  arr.append(b)\n  for i in range(2,n):\n      c = a + b\n      a = b\n      b = c\n      arr.append(c)\n  return arr", "category": "Python"}, {"instruction": "How would you implement a webhook using Flask?", "input": "", "output": "import flask\n\n@app.route('/webhook', methods=['POST'])\ndef webhook():\n    # retrieve the data from the request\n    data = request.get_json() \n\n    # do something with the given data\n    # ...\n\n    # return the response\n    return { 'message': 'OK' }", "category": "Python"}, {"instruction": "Create a new function that takes two lists as input and returns a new list consisting of elements which are not in the other list.", "input": "list1 = [1, 2, 3, 4]\n list2 = [3, 4, 5, 6]", "output": "def non_shared(list1, list2):\n    non_shared_elements = [element for element in list1 if element not in list2]\n    return non_shared_elements", "category": "Python"}, {"instruction": "Write a Python code that detects if a given character is uppercase, lowercase, or something else.", "input": "", "output": "def is_type(character):\n  if ord(character) >= 65 and ord(character) <= 90:\n    return \"uppercase\"\n  elif ord(character) >= 97 and ord(character) <= 122:\n    return \"lowercase\"\n  else:\n    return \"something else\"", "category": "Python"}, {"instruction": "Create a function that takes a string of characters and returns the minimal number of division/multiplication operations needed to make all characters within the string the same.", "input": "acdc", "output": "def operations(string):\n    char_set = set(string)\n    while len(char_set) > 1:\n        char_arr = list(char_set)\n        x = char_arr[0]\n        y = char_arr[1]\n        if x == y:\n            break\n        elif x > y:\n            new_val = x/y\n            for i in range(len(string)):\n                if string[i] == x:\n                    string[i] = new_val\n        else:\n            new_val = y/x\n            for i in range(len(string)):\n                if string[i] == x:\n                    string[i] = new_val\n        char_set = set(string)\n    return len(char_set)-1", "category": "Python"}, {"instruction": "Design a program which can take an array of integers and output the index of the maximum element.", "input": "[10, 4, 15, 6, 20]", "output": "def max_index(lst): \n    max = 0\n    max_index = 0\n    for i in range(len(lst)): \n        if lst[i] > max: \n            max = lst[i]\n            max_index = i\n    return max_index", "category": "Python"}, {"instruction": "Create a program to create a new string where the first and last occurrence of each character is removed.", "input": "'Hello World'", "output": "def strip_string(s): \n    new_str = \"\"\n    counts = {}\n    \n    # Create a dictionary to record the number of occurrences of each character\n    for letter in s: \n        if letter not in counts:\n            counts[letter] = 1\n        else: \n            counts[letter] += 1\n    \n    for char in s: \n        if counts[char] > 1: \n            new_str += char\n        counts[char] -= 1\n    return new_str", "category": "Python"}, {"instruction": "Code a program to delete a specified item from a list.", "input": "Delete item \"Apple\" from the list [\"Banana\", \"Apple\", \"Orange\"]", "output": "def delete_item(lst, item): \n    if item in lst: \n        lst.remove(item)\n    return lst", "category": "Python"}, {"instruction": "Generate a correct program to sum the even numbers from 0 to n.", "input": "", "output": "def sum_even(n):\n    sum = 0\n    for i in range(0,n+1):\n        if i % 2 == 0:\n            sum += i\n    return sum", "category": "Python"}, {"instruction": "Produce a function which can take two strings as input and check if they are anagrams.", "input": "'silent', 'listen'", "output": "def is_anagram(str1, str2): \n    # convert strings to lowercase\n    str1_lower = str1.lower()\n    str2_lower = str2.lower()\n\n    # sort the strings \n    str1_sorted = ''.join(sorted(str1_lower))  \n    str2_sorted = ''.join(sorted(str2_lower)) \n\n    # compare the sorted strings \n    if(str1_sorted == str2_sorted):  \n        return True\n    else: \n        return False", "category": "Python"}, {"instruction": "Create a function in Python to delete an element from a given list at a specified index.", "input": "list = [1, 2, 3, 4, 5]\nindex = 2", "output": "def deleteElement(list, index): \n   del list[index] \n   return list\n  \nlist = [1, 2, 3, 4, 5] \nindex = 2\n  \nprint(deleteElement(list, index))", "category": "Python"}, {"instruction": "What is the most efficient way to find the maximum value in a Python list?", "input": "", "output": "The most efficient way to find the maximum value in a Python list is to use the built-in max() function. For example: max(list).", "category": "Python"}, {"instruction": "Create a function to invert the keys and values of a given dictionary.", "input": "my_dict = { \"name\": \"John\", \"age\": 22 }", "output": "def invert_dict(dictionary):\n    inv_dict = {v: k for k, v in dictionary.items()}\n    return inv_dict", "category": "Python"}, {"instruction": "Create an array of all the prime numbers up to 50.", "input": "", "output": "def is_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \nprime_array = []\nfor i in range(2, 51):\n    if is_prime(i):\n        prime_array.append(i)", "category": "Python"}, {"instruction": "Edit the code to make sure the output error messages are informative.", "input": "def myfunc(param):\n if type(param) != str:\n     print(f\"{param} is not valid input type\")", "output": "def myfunc(param):\n if not isinstance(param, str):\n     print(f\"Expected a string for parameter 'param' but received type '{type(param).__name__}'\")", "category": "Python"}, {"instruction": "Using the given list and dictionary, write the Python code to remove duplicate objects from the list.", "input": "list_one = [{\"Name\": \"John\", \"Lastname\": \"Smith\"}, {\"Name\": \"John\", \"Lastname\": \"Smith\"}, {\"Name\": \"Janet\", \"Lastname\": \"Wise\"}]\ndict_one = {\"John\": \"Smith\", \"Janet\": \"Wise\"}", "output": "new_list = []\n\nfor item in list_one: \n    if item['Name'] + item['Lastname'] not in new_list: \n        new_list.append(item['Name'] + item['Lastname']) \n    if item['Name'] + dict_one[item['Name']] not in new_list: \n        new_list.append(item['Name'] + dict_one[item['Name']])\n\nfinal_list = [item for item in list_one if item['Name'] + item['Lastname'] in new_list]", "category": "Python"}, {"instruction": "Using a list comprehension, create a function to give only the even numbers in a given list.", "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8]", "output": "def only_even(arr):\n    return [ num for num in arr if num % 2 == 0 ]", "category": "Python"}, {"instruction": "Find the Fibonacci number for a given number using a for loop.", "input": "", "output": "def fibonacci(n):\n    fibonacci_numbers = [0,1]\n    for i in range(2, n+1):\n        fibonacci_numbers.append(fibonacci_numbers[i-1] + fibonacci_numbers[i-2])\n    return fibonacci_numbers[n]", "category": "Python"}, {"instruction": "Using a while loop, write a program to delete all duplicate elements from an array.", "input": "arr = [1, 2, 3, 2, 3, 4, 3]", "output": "def remove_duplicates(arr):\n    i = 0\n    while i < len(arr):\n        if arr.count(arr[i]) > 1:\n            arr.remove(arr[i])\n        else:\n            i += 1\n    return arr", "category": "Python"}, {"instruction": "Create a function to decode a given string using the provided cipher.", "input": "decoding_cipher = { \"x\" : \"a\", \"y\": \"b\", \"z\" : \"c\" }\nstring = \"xyz\"", "output": "def decode_string(decoding_cipher, string):\n    result = \"\"\n    for char in string:\n        result += decoding_cipher[char]\n    return result", "category": "Python"}, {"instruction": "Create a function that takes a given string and encodes it with a specified cipher.", "input": "encoding_cipher = {\"a\" : \"x\", \"b\" : \"y\", \"c\": \"z\"}\nstring = \"abc\"", "output": "def encode_string(encoding_cipher, string):\n    result = \"\"\n    for char in string:\n        result += encoding_cipher[char]\n    return result", "category": "Python"}, {"instruction": "Use conditionals to decide what to print using the input array.", "input": "arr = [\"hamburger\", \"hot dog\", \"cheese\"]", "output": "if len(arr) == 0:\n   print(\"No food available\")\nelif len(arr) == 1:\n   print(arr[0] + \" is available\")\nelif len(arr) == 2:\n   print(arr[0] + \" and \"+ arr[1] + \" are available\")\nelse:\n   print(\"Multiple items are avaiable: \" + ', '.join(arr))", "category": "Python"}, {"instruction": "Create a list comprehension to generate the multiples of a number up to a limit.", "input": "multiples of 7 until 50", "output": "multiples_list = [n * 7 for n in range(0, 51) if n * 7 <= 50]", "category": "Python"}, {"instruction": "Design a class for representing a person in Python.", "input": "", "output": "class Person:\n    \"\"\"\n    Class to represent a person\n    \"\"\"\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address\n    \n    def birthday(self):\n        \"\"\"\n        Increments the age of the person\n        \"\"\"\n        self.age += 1", "category": "Python"}, {"instruction": "Create a for loop that prints all even numbers from 0 to 10 (inclusive).", "input": "", "output": "for i in range(0, 11):\n    if (i % 2 == 0):\n        print(i)", "category": "Python"}, {"instruction": "Create an object that uses constructor overloading in Python.", "input": "", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __init__(self, name, age, job):\n        self.name = name\n        self.age = age\n        self.job = job\n\np1 = Person('John Doe', 25)\np2 = Person('Jane Doe', 30, 'Software Engineer')", "category": "Python"}, {"instruction": "Describe what a condition in a while loop does in Python.", "input": "", "output": "A condition in a while loop in Python allows code to be executed repeatedly until a certain condition is met. While the condition is true, the code inside the loop is executed and if the condition is false, the loop is exited. This allows for a loop to continue running until a certain condition is met.", "category": "Python"}, {"instruction": "Create a Python program to take a float input and output its binary equivalent.", "input": "25.68", "output": "def floatToBin(num):\n    whole, decimal = str(num).split(\".\")   \n    whole = int(whole)\n    decimal = int (decimal) \n    res = bin(whole).lstrip(\"0b\")+\".\"\n    for x in range(10):\n        decimal *= 2\n        res += str(decimal//1)\n        decimal %= 1\n    return res \n \n# Driver code  \nnumber = 25.68\nprint(floatToBin(number)) # returns '11001.1011'", "category": "Python"}, {"instruction": "Generate a program to remove duplicates from an unsorted linked list.", "input": "", "output": "class Node: \n  \n    def __init__(self, data): \n        self.data = data  \n        self.next = None\n  \ndef remove_duplicates(head): \n    h = {} \n  \n    temp = head \n    prev = None\n    while(temp): \n        if temp.data in h: \n            prev.next = temp.next\n            temp = None\n        else: \n            h[temp.data] = True\n            prev = temp \n        temp = prev.next\n\nif __name__ == \"__main__\":\n    pass", "category": "Python"}, {"instruction": "Create a code to generate a Mulberry Tree of height n levels.", "input": "", "output": "def get_mulberry_tree(n):\n    spaces = n - 1\n    for i in range(1, n+1):\n        for j in range(spaces):\n            print(end = \" \") \n        spaces = spaces - 1\n        for j in range(i):\n            print(\"* \", end = \"\")\n        print() \n\nif __name__ == \"__main__\": \n    n = 5\n    get_mulberry_tree(n)", "category": "Python"}, {"instruction": "Design an algorithm to produce a binary tree from given inorder and preorder traversals.", "input": "inorder: [4,2,5,1,3,6]\npreorder: [1,2,4,5,3,6]", "output": "class Node: \n    # A constructor to create a  \n    # new linked node  \n    def __init__(self, data):  \n        self.data = data  \n        self.left = None\n        self.right = None\n\ndef binary_tree_from_inorder_preorder(inorder, preorder): \n    if len(inorder) in [0, 1]: \n        return Node(inorder[0]) if inorder else None\n              \n    root_val = preorder[0]\n    root = Node(root_val) \n  \n    i_index = inorder.index(root_val) \n  \n    root.left = binary_tree_from_inorder_preorder(inorder[:i_index],\n                                      preorder[1:i_index + 1]) \n  \n    root.right = binary_tree_from_inorder_preorder(inorder[i_index + 1:],  \n                                       preorder[i_index + 1:]) \n  \n    return root\n\nif __name__ == \"__main__\":\n    inorder=[4,2,5,1,3,6]\n    preorder=[1,2,4,5,3,6]\n    root = binary_tree_from_inorder_preorder(inorder, preorder)", "category": "Python"}, {"instruction": "Compose a function to generate a palette of random colors.", "input": "", "output": "import random\n\ndef generate_palette(n): \n    palette = [] \n    for i in range(n): \n        rgb = [] \n        for j in range(3): \n            rgb.append(random.randint(1, 255)) \n        palette.append(rgb) \n          \n    return palette\n\nif __name__ == \"__main__\": \n    n = 10\n    palette = generate_palette(n) \n    print(palette)", "category": "Python"}, {"instruction": "Become an algorithm to check if a linked list is empty.", "input": "", "output": "def is_list_empty(head):\n    if head == None:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Create an efficient matrix multiplication of two given matrices.", "input": "matrix1 = [[1, 2], [3, 4]]\nmatrix2 = [[5, 6], [7, 8]]", "output": "def matrix_multiply(matrix1, matrix2):\n    if len(matrix1[0]) != len(matrix2):\n        return \"Matrices should have the same size for multiplication\"\n    result = [[0 for x in range(len(matrix1))] for j in range(len(matrix2[0]))]\n    for i in range(len(matrix1)):\n        for j in range(len(matrix2[0])):\n            for k in range(len(matrix2)):\n                result[i][j] += matrix1[i][k] * matrix2[k][j]\n    return result\n\nif __name__ == \"__main__\":\n    matrix1 = [[1, 2], [3, 4]]\n    matrix2 = [[5, 6], [7, 8]]\n    print(matrix_multiply(matrix1, matrix2))", "category": "Python"}, {"instruction": "Develop a code to identify the most commonly used words in a given text.", "input": "The quick brown fox jumps over the lazy dog", "output": "from collections import Counter \n  \ndef most_common_words(text): \n    words = text.split() \n    counter = Counter(words) \n    high_occur = counter.most_common(3) \n    return high_occur\n\nif __name__ == \"__main__\":\n    text = \"The quick brown fox jumps over the lazy dog\"\n    most_common_words(text)", "category": "Python"}, {"instruction": "Implement a reverse for loop in Python.", "input": "", "output": "for i in reversed(range(0, 10)):\n   print(i)", "category": "Python"}, {"instruction": "Write a Python script to check if an email address is valid depending on the given conditions.", "input": "Email address: johnsmith@example.com\nCheck the following conditions:\n1. Must contain an \"@\" symbol\n2. Must contain a \".\"\n3. Must have at least 6 characters", "output": "import re\n\ndef is_valid_email(email):\n    regex = r\"^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-zA-Z]{2,6}$\"\n    if re.search(regex, email) is not None:\n        return True\n    else:\n        return False\n\nemail = 'johnsmith@example.com'\nif is_valid_email(email):\n    print(\"Valid email\")\nelse:\n    print(\"Invalid email\")", "category": "Python"}, {"instruction": "Write a code to find the maximum length of the longest consecutive increasing subsequence in the given array.", "input": "arr = [2, 3, 1, 10, 5, 6, 8, 7]", "output": "def max_length(arr): \n    ans = 1\n    j = 0\n\n    for i in range(len(arr)): \n        if (arr[i+1] - arr[i] > 0): \n            j += 1\n            ans = max(ans, j+1)\n        else:  \n            j = 0\n    return ans\n\nprint(max_length(arr))", "category": "Python"}, {"instruction": "Write a code that finds all the prime numbers in a given range of numbers.", "input": "start_num = 1\nend_num = 100", "output": "primes = []\nfor num in range(start_num, end_num + 1):\n  if num > 1:\n    for i in range(2, num):\n      if num % i == 0:\n        break\n    else:\n      primes.append(num)\n\nprint(primes)", "category": "Python"}, {"instruction": "How can you call a function named \"myFunction\" in both JavaScript and Python?", "input": "", "output": "In JavaScript: myFunction();\nIn Python: myFunction()", "category": "Python"}, {"instruction": "Design a program to find the fibonacci number at the given position in the sequence.", "input": "", "output": "def fibonacci(n):\n if n == 0 or n == 1:\n return n\n else:\n return fibonacci(n-1) + fibonacci(n-2)", "category": "Python"}, {"instruction": "Create a Python function to print out a string in reverse order.", "input": "\"This is a string\"", "output": "def reverse_string(input_str):\n    return input_str[::-1]\n \nprint(reverse_string(\"This is a string\"))", "category": "Python"}, {"instruction": "Write a Python script to print the current day, month and year.", "input": "", "output": "from datetime import datetime\n\nnow = datetime.now()\n\nprint(\"Today is\", now.day, now.month, now.year)", "category": "Python"}, {"instruction": "Generate Python code to extract only the keys from the given dictionary.", "input": "d = {'name': 'John', 'age': 24, 'city': 'New York'}", "output": "keys = list(d.keys())", "category": "Python"}, {"instruction": "How can we optimize the performance of the given code?", "input": "myList = [1, 2, 3]\nfor item in myList:\n    print(item)", "output": "Use list comprehension to reduce the amount of code used, such as:\n\nprint([item for item in myList])", "category": "Python"}, {"instruction": "Generate Python code to retrieve a list of tuples in the given string.", "input": "String: \"[('test1',1), ('test2',2)]\"", "output": "list_items = [item.replace(\"'\", \"\").replace(\"(\", \"\").replace(\")\", \"\").split(\",\") for item in s[1:-1].split(\"), (\")]\nlist_of_tuples = [(item[0], int(item[1])) for item in list_items]", "category": "Python"}, {"instruction": "Modify the code to create an AI model to classify the given dataset.", "input": "dataset = {\n    'x1': ['apple', 'banana'],\n    'x2': ['red', 'yellow'],\n    'label': ['fruit', 'fruit']\n}", "output": "class Model(nn.Module):\n    def __init__(self):\n        super(Model, self).__init__()\n        self.fc1 = nn.Linear(2, 32)\n        self.fc2 = nn.Linear(32, 32)\n        self.fc3 = nn.Linear(32, 2)\n\n    def forward(self, x):\n        x = x.view(-1, 2)\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        x = F.softmax(x, dim=-1)\n        return x\n\nmodel = Model()\ncriterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.005)", "category": "Python"}, {"instruction": "Suggest an algorithm to find the number of nodes in a binary tree.", "input": "", "output": "Here is a possible algorithm to count the number of nodes in a binary tree:\n\n1. Initialize count as 0\n2. If the tree is empty, return 0.\n3. Else\n   a. Recursively call the procedure on left subtree.\n   b. Add 1 to the `count` variable.\n   c. Recursively call the procedure on right subtree.\n4. Return count.", "category": "Python"}, {"instruction": "Print the results of the following arithmetic expression using python.", "input": "6/3+3*2", "output": "15.0", "category": "Python"}, {"instruction": "Create a Python function to remove duplicates in a given list.", "input": "list_of_numbers = [2, 3, 3, 5, 5]", "output": "def remove_duplicates(list_of_numbers):\n  result = []\n  for number in list_of_numbers:\n    if number not in result:\n      result.append(number)\n  return result", "category": "Python"}, {"instruction": "Generate a list of 10 random numbers between 0 and 500 in Python.", "input": "", "output": "import random\nnumbers = [random.randint(0,500) for i in range(10)]\nprint(numbers)", "category": "Python"}, {"instruction": "How would you sort an array of integers using Merge Sort algorithm?", "input": "", "output": "def merge_sort(arr): \n    # Base case: if the list has 0 or 1 elements it is already sorted \n    if len(arr) > 1: \n        mid = len(arr)//2 \n        # Split the array \n        left = arr[:mid]  \n        right = arr[mid:]  \n  \n        # Recursively call merge_sort on left and right half\n        merge_sort(left) \n        merge_sort(right) \n  \n        # Set up variables to help track merges\n        i = 0 # left array index \n        j = 0 # right array index \n        k = 0 # result array index \n  \n        # Merge the two halves \n        while i < len(left) and j < len(right): \n            if left[i] < right[j]: \n                arr[k] = left[i] \n                i+=1 \n            else: \n                arr[k] = right[j] \n                j+=1 \n            k+=1\n          \n        # Copy the rest of the left half and right half \n        while i < len(left): \n            arr[k] = left[i] \n            i+=1\n            k+=1\n          \n        while j < len(right): \n            arr[k] = right[j] \n            j+=1\n            k+=1", "category": "Python"}, {"instruction": "How would you write a program to determine the greatest common divisor (GCD) of two non-negative integers?", "input": "", "output": "def gcd(a, b):\n    # Base case\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n\n    # Calculate the greatest common divisor using Euclid's algorithm\n    while b != 0:\n        a %= b\n        a, b = b, a\n        \n    return a", "category": "Python"}, {"instruction": "Using the below Python code, Write a code snippet to index all the values of an array.", "input": "arr = [3, 8, 2, 5, 1]", "output": "for i, val in enumerate(arr):\n    print(f\"arr[{i}] = {val}\")", "category": "Python"}, {"instruction": "Given a list of numbers and a target sum, write a Python program to determine whether there is a set of three numbers in the list that add up to the target sum.", "input": "[2, 7, 5, 1, 8]", "output": "def find_target_sum(nums, target_sum):\n    for i in range(0, len(nums) - 2):\n        for j in range(i+1, len(nums) - 1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_sum:\n                    return True\n    return False", "category": "Python"}, {"instruction": "Create a software program that encrypts a text message.", "input": "", "output": "def encrypt(msg):\n    change = {'a': '@', 'e': '3', 'i': '1', 'o': '0', 's': '5'}\n    encrypted = \"\"\n    for c in msg:\n        if c in change:\n            encrypted += change[c]\n        else:\n            encrypted += c\n    return encrypted", "category": "Python"}, {"instruction": "Write a factorial program without using the inbuilt factorial function in Python.", "input": "", "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "category": "Python"}, {"instruction": "Generate a string array of length 10, containing only alphabets in lower case containing 10 random characters.", "input": "", "output": "import random\ndef gen_string_arr(n):\n    output = []\n    for i in range(n):\n        output.append(''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=10)))\n    return output", "category": "Python"}, {"instruction": "Rewrite the following function to optimize its performance.", "input": "def indexString(listStr, s):\n    output = []\n    for i in listStr:\n        if s in i:\n            output.append(i)\n    return output", "output": "def indexString(listStr, s):\n    output = []\n    for i in listStr:\n        if i.find(s) != -1 :\n            output.append(i)\n    return output", "category": "Python"}, {"instruction": "Design an algorithm in Python to detect anomalies in the given data.", "input": "Input a dataset containing two columns, temperature and pressure.", "output": "def detect_anomaly(data): \n    # Step 1: Calculate mean \n    mean_1 = np.mean(data['temperature']) \n    mean_2 = np.mean(data['pressure']) \n  \n    # Step 2: Calculate the standard deviation \n    sd_1 = np.std(data['temperature']) \n    sd_2 = np.std(data['pressure']) \n  \n    # Step 3: Calculate the threshold\n    cutoff = sd_1 * 3\n  \n    # Step 4: Apply threshold and mark anomalies \n    lower_limit_temperature = mean_1 - cutoff \n    upper_limit_temperature = mean_1 + cutoff \n  \n    lower_limit_pressure = mean_2 - cutoff \n    upper_limit_pressure = mean_2 + cutoff \n  \n    # Mark the anomalies by setting the value as 1 \n    data['anomaly'] = 0 \n    data.loc[data['temperature'] < lower_limit_temperature, 'anomaly'] = 1  \n    data.loc[data['temperature'] > upper_limit_temperature, 'anomaly'] = 1  \n    data.loc[data['pressure'] < lower_limit_pressure, 'anomaly'] = 1  \n    data.loc[data['pressure'] > upper_limit_pressure, 'anomaly'] = 1  \n  \n    # Return the dataframe \n    return data", "category": "Python"}, {"instruction": "Create a neural network in Python using the given input and output.", "input": "Input a set of 3 input values (x1, x2, x3) and two output values (y1, y2).", "output": "import numpy as np \nimport tensorflow as tf\n\n# Create the model \nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Dense(2, activation='sigmoid', input_shape=(3,))\n]) \n\n# Compile the model \nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy']) \n\n# Create the input and output data \ninput_data = np.array([[x1, x2, x3]])\noutput_data = np.array([[y1, y2]])\n\n# Train the model \nmodel.fit(input_data, output_data, epochs=100)", "category": "Python"}, {"instruction": "Develop a program to encode and decode a given string.", "input": "Input a string s to be encoded.", "output": "def encode(s): \n    encoded_str = \"\" \n    for i in s: \n        encoded_str += str(ord(i)) \n  \n    return encoded_str \n  \ndef decode(s): \n    decoded_str = \"\" \n    for i in range(0, len(s), 2): \n        decoded_str += chr(int(s[i:i+2])) \n  \n    return decoded_str", "category": "Python"}, {"instruction": "Use the function \"randint()\" to generate a random number between 1 and 10 in Python.", "input": "", "output": "from random import randint\nrandom_num = randint(1,10)\nprint(random_num)", "category": "Python"}, {"instruction": "Suggest a way to count the number of occurrences of each element in the list.", "input": "numbers = [2, 3, 2, 5, 8, 3, 10]", "output": "# Method 1 - Using Dictionary\nnumber_dict = dict()\nfor num in numbers:\n    if num in number_dict:\n        number_dict[num] += 1\n    else:\n        number_dict[num] = 1\nprint(number_dict)\n# Output: {2: 2, 3: 2, 5: 1, 8: 1, 10: 1}\n\n# Method 2 - Using Counter\nfrom collections import Counter\nnumber_count = Counter(numbers)\nprint(number_count)\n# Output: Counter({2: 2, 3: 2, 5: 1, 8: 1, 10: 1})", "category": "Python"}, {"instruction": "Suggest a way to identify and remove duplicate elements from the list.", "input": "numbers = [2, 3, 2, 5, 8, 3, 10]", "output": "# Method 1 - Using Set\nnumbers_set = set(numbers)\nnumbers_set = list(numbers_set)\nprint(numbers_set)\n# Output: [2, 3, 5, 8, 10]\n\n# Method 2 - Using Loop\nno_duplicate = [] \nfor num in numbers: \n    if num not in no_duplicate: \n        no_duplicate.append(num) \nprint(no_duplicate)\n# Output: [2, 3, 5, 8, 10]", "category": "Python"}, {"instruction": "Generate an array of length n with random numbers in the range 0 - 100", "input": "", "output": "import random\ndef gen_num_arr(n):\n    output = []\n    for i in range(n):\n        output.append(random.randint(0, 101))\n    return output", "category": "Python"}, {"instruction": "Given two strings, write a function to check if one string is a rotation of the other.", "input": "str1 = \"beans\"\nstr2 = \"esban\"", "output": "def is_rotation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n        \n    temp = str1 + str1\n    return str2 in temp", "category": "Python"}, {"instruction": "Write a Python program to create a numerical addition table", "input": "", "output": "def addition_table(n):\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            print(i + j, end= \" \")\n        print()\n\naddition_table(10)", "category": "Python"}, {"instruction": "Create an API using Python which returns the number of words in a given string.", "input": "", "output": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route(\"/get_words_count\", methods=[\"GET\"])\ndef get_words_count():\n    sentence = request.args.get(\"sentence\")\n    words = sentence.split(\" \")\n    return jsonify({\"words_count\": len(words)})\n\nif __name__ == \"__main__\":\n    app.run()", "category": "Python"}, {"instruction": "Create a Python class for circles with radius and color as its properties.", "input": "", "output": "class Circle:\n \n    # Constructor\n    def __init__(self, radius, color):\n        self.radius = radius\n        self.color = color\n \n    # To get radius\n    def getRadius(self):\n        return self.radius\n \n    # To get color\n    def getColor(self):\n        return self.color", "category": "Python"}, {"instruction": "Summarize the following passage in five sentences.", "input": "Machine learning is the scientific study of algorithms and statistical models that computer systems use in order to perform a specific task without using explicit instructions, relying on patterns and inference instead. It is seen as a subset of artificial intelligence. Machine learning algorithms build a mathematical model of sample data, known as \u201ctraining data\u201d, in order to make predictions or decisions without being explicitly programmed to do so.", "output": "Machine learning is a scientific field of study which uses algorithms and statistical models to allow computers to complete tasks without direct instructions or programming. It is a subset of artificial intelligence, using training data to form a mathematical model and make predictions. Machine learning algorithms can make decisions without explicit programming and rely on patterns and inference. It is an invaluable tool for data analysis and can be used for a wide variety of tasks such as image recognition and natural language processing.", "category": "Python"}, {"instruction": "Write a python program to convert a number from base 10 to base 8.", "input": "", "output": "def convert_base_10_to_base_8(number):\n   binary_number = bin(number)[2:]\n   octal_number = oct(int(binary_number, 2))[2:]\n   return octal_number", "category": "Python"}, {"instruction": "Write a python script to print 'Hello World' in HTML format", "input": "", "output": "print(\"<p>Hello World</p>\")", "category": "Python"}, {"instruction": "Compare two strings and return the longest one.", "input": "string1 = \"Hello\"\nstring2 = \"World\"", "output": "def compare_strings(string1, string2): \n    if len(string1) > len(string2): \n        return string1 \n    return string2", "category": "Python"}, {"instruction": "Create a function to determine if a given string is an anagram of another. An anagram is a word or phrase formed by rearranging the letters of another word or phrase.", "input": "", "output": "def is_anagram(str1, str2):\n   sorted_str1 = \"\".join(sorted(str1))\n   sorted_str2 = \"\".join(sorted(str2))\n   \n   if sorted_str1 == sorted_str2: \n       return True \n   return False", "category": "Python"}, {"instruction": "Using a list comprehension, create a filtered list which contains numbers that are divisible by 2.", "input": "nums = [1, 2, 3, 4, 5, 6]", "output": "filtered_list = [num for num in nums if num % 2 == 0]", "category": "Python"}, {"instruction": "Create a Python program to find all the perfect squares between 1 and n.", "input": "", "output": "def perfect_squares(n):\n    result = []\n    for i in range(1, n+1):\n        if is_perfect_square(i):\n            result.append(i)\n    return result\n\ndef is_perfect_square(n):\n    sqrt = int(n**.5)\n    return sqrt**2 == n\n\nif __name__ == '__main__':\n    n = 25\n    result = perfect_squares(n)\n    print(result)", "category": "Python"}, {"instruction": "Write a Python program to fill a dictionary with key as a number and value as a string for square with {1: \"1\", 2: \"4\", 3: \"9\", ...}.", "input": "", "output": "dic = {}\nfor i in range (1,11):\n    dic[i] = str(i ** 2)\nprint(dic)", "category": "Python"}, {"instruction": "Develop a program to apply a given operation (addition or subtraction) on two numbers.", "input": "operation: 'addition', a: 4, b:20", "output": "def operate(operation, a, b):\n    if operation == 'addition':\n        return a + b\n    elif operation == 'subtraction':\n        return a - b\n    else:\n        return 'Invalid operation.'\n\nprint(operate('addition', 4, 20)) # prints 24", "category": "Python"}, {"instruction": "Create a program to tokenize a given string into a list of strings.", "input": "'Hello! My name is Bob.'", "output": "import nltk\n\ndef tokenize(string):\n    tokens = nltk.word_tokenize(string)\n    return tokens\n\nprint(tokenize('Hello! My name is Bob.')) # prints [\"Hello\", \"!\", \"My\", \"name\", \"is\", \"Bob\", \".\"]", "category": "Python"}, {"instruction": "Create a function that, given a number, reverses the digits and returns them in an array.", "input": "12345", "output": "def reverse(num):\n    arr = []\n    while num > 0:\n        digit = num % 10\n        arr.append(digit)\n        num //= 10\n    return arr\n\nprint(reverse(12345)) # prints [5, 4, 3, 2, 1]", "category": "Python"}, {"instruction": "Develop a logic to generate Fibonacci Series till n terms.", "input": "n = 6", "output": "def fibonacci(n):\n    a = 0\n    b = 1\n    print(a)\n    print(b)\n    for i in range (2,n):\n        c = a+b\n        a = b\n        b = c\n        print(c)\nfibonacci(6)", "category": "Python"}, {"instruction": "Implement a function in Python to find the maximum number from a list of integers.", "input": "[3, 5, 1, 6, 10]", "output": "def findMax(list): \n    max = list[0] \n  \n    for i in list: \n        if i > max: \n            max = i \n  \n    return max", "category": "Python"}, {"instruction": "How to create an empty data frame in Pandas?", "input": "", "output": "import pandas as pd\n\ndf = pd.DataFrame()", "category": "Python"}, {"instruction": "How can we use the list comprehension method in Python to reverse a given list of string?", "input": "list_of_strings = [\"cat\", \"dog\", \"rabbit\"]", "output": "reversed_list_of_strings = [string[::-1] for string in list_of_strings]", "category": "Python"}, {"instruction": "In Python, how can we calculate the mean of a numerical data set?", "input": "", "output": "def mean(data):\n    return sum(data) / len(data)", "category": "Python"}, {"instruction": "Given a stream of blog posts from a certain website, how would you filter out posts with more than 50 comments in Python?", "input": "stream_of_blog_posts = [{'title': 'post1', 'comments': 35}, {'title': 'post2', 'comments': 52}, {'title': 'post3', 'comments': 19}]", "output": "posts_with_more_than_50_comments = [post for post in stream_of_blog_posts if post['comments'] > 50]", "category": "Python"}, {"instruction": "What is the difference between an interface and an abstract class?", "input": "", "output": "The main difference between an interface and an abstract class is that an interface can only contain abstract methods while an abstract class can include both abstract and non-abstract methods. Additionally, an interface can be implemented by multiple classes while a class can only extend a single abstract class. Interfaces are also limited to public methods while an abstract class can contain any type of access modifiers.", "category": "Python"}, {"instruction": "Why should you use functions in programming?", "input": "", "output": "Using functions in programming helps to break down complex tasks into more manageable pieces, which makes code easier to read and maintain. Functions also allow for the reuse of code, which can help to reduce overall development time and resources. Additionally, functions improve code organization and enable functions to be tested independently, making debugging easier.", "category": "Python"}, {"instruction": "Utilize Python to implement an algorithm which finds the largest number in an array.", "input": "", "output": "def largestNumber(arr): \n    max = arr[0] \n    for i in range(1, len(arr)): \n        if arr[i] > max: \n            max = arr[i] \n    return max", "category": "Python"}, {"instruction": "Create a Python program to return the longest word in a sentence", "input": "\"The dog likes to run around the yard\"", "output": "def longest_word(sentence):\n    words = sentence.split()\n    longest = 0\n    for word in words:\n        if len(word) > longest:\n            longest = len(word)\n            longest_word = word\n\n    return longest_word\n\nprint(longest_word(\"The dog likes to run around the yard\"))", "category": "Python"}, {"instruction": "determine if two strings are anagrams or not.", "input": "string1 = 'listen'\nstring2 = 'silent'", "output": "\"\"\"\nDetermine if two strings are anagrams or not\n\"\"\"\n\ndef is_anagram(string1, string2):   \n    # get lists of characters\n    list1 = list(string1.lower())\n    list2 = list(string2.lower())\n\n    # sort both lists\n    list1.sort()\n    list2.sort()\n\n    if list1 == list2: \n        return True\n    else:\n        return False\n\nif __name__ == '__main__': \n    string1 = 'listen'\n    string2 = 'silent'\n    print(\"Result: \" + str(is_anagram(string1, string2)))", "category": "Python"}, {"instruction": "Generate a function to calculate the probability of an event.", "input": "num_outcomes = 36\nnum_favourable_outcomes = 9", "output": "\"\"\"\nGenerate a function to calculate the probability of an event\n\"\"\"\ndef calculate_probability(num_outcomes, num_favourable_outcomes):\n    # calculate probability \n    probability = float(num_favourable_outcomes) / float(num_outcomes)\n    return probability\n    \nif __name__ == '__main__': \n    num_outcomes = 36\n    num_favourable_outcomes = 9\n    print(\"Probability of an event is: \" + str(calculate_probability(num_outcomes, num_favourable_outcomes)))", "category": "Python"}, {"instruction": "edit the existing function to calculate the compound interest.", "input": "# Calculate Simple Interest \ndef calcSimpleInterest(p, r, t): \n    return (p * r * t) / 100", "output": "\"\"\"\nEdit the existing function to calculate the compound interest\n\"\"\"\n# Calculate Compound Interest \ndef calcCompoundInterest(p, r, t): \n    # Calculate Simple Interest \n    interest= p * (pow((1 + r / 100), t)) \n    return interest\n\nif __name__ == '__main__': \n    principal_amount = 1000\n    rate_of_interest = 5\n    time_period = 5\n    print(\"Compound interest is\", calcCompoundInterest(principal_amount, rate_of_interest, time_period))", "category": "Python"}, {"instruction": "Write a function to delete a node from the given linked list.", "input": "Linked list: 10 --> 20 --> 30\nNode to delete: 10", "output": "def deleteNode(head, node): \n    if head == None: \n        return \n\t  \n    # If node to be deleted is head node \n    if head.val == node: \n        head = None\n        return head \n\t  \n    # Find prev node \n    prev = None\n    curr = head \n    while curr and curr.val != node: \n        prev = curr \n        curr = curr.next\n\n    # Unlink node from linked list \n    prev.next = curr.next\n    curr = None\n\n    return head", "category": "Python"}, {"instruction": "Construct a function in Python that takes a list and returns the mean of the elements in the list.", "input": "[30, 10, 40, 20]", "output": "def mean(list): \n    # Finding total of the list elements \n    total = 0\n    for num in list: \n        total += num \n\n    # Calculate mean of the list \n   mean = total / len(list) \n\n    # Return the mean \n    return mean", "category": "Python"}, {"instruction": "Write a function that prints the same string three times consecutively.", "input": "string = \"Hello World!\"", "output": "def print_three_times(string):\n    for _ in range(3):\n        print(string)\n        \nprint_three_times(\"Hello World!\")", "category": "Python"}, {"instruction": "Implement Naive Bayes for classification.", "input": "", "output": "import numpy as np\n\n# Create a data set\nX = np.array([[0, 0, 0], [0, 1, 0], [1, 0, 0], [1, 1, 0], [0, 0, 1], [0, 1, 1], [1, 0, 1], [1, 1, 1]])\ny = np.array([0, 0, 0, 0, 1, 1, 1, 1])\n\n# Build a Naive Bayes classifier\nnaive_bayes = GaussianNB()\n\n# Train the classifier using the training data\nnaive_bayes.fit(X, y)", "category": "Python"}, {"instruction": "Implement a neural network for regression", "input": "", "output": "import tensorflow as tf\n\n# create input layer\ninputs = tf.keras.Input(shape=(2,))\n\n# create the first layer of the network with 16 neurons\nfc1 = tf.keras.layers.Dense(16, activation=\"relu\")(inputs)\n\n# create the second layer of the network with 8 neurons\nfc2 = tf.keras.layers.Dense(8, activation=\"relu\")(fc1)\n\n# create the output layer of the network with 1 neuron (for regression)\noutputs = tf.keras.layers.Dense(1, activation=\"sigmoid\")(fc2)\n\n# create the model and compile it.\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\nmodel.compile(optimizer='Adam', loss='mse')", "category": "Python"}, {"instruction": "Write a function to convert an anagram of a string to a dictionary", "input": "word = \"geeksforgeeks\"", "output": "def convert_anagram(word):\n    result = {}\n    for c in word:\n        result.setdefault(c, 0)\n        result[c] += 1\n    return result", "category": "Python"}, {"instruction": "Given a list of strings, create a Python3 program that counts the number of strings that start with the letter 'a'.", "input": "example_list = [\"Apple\", \"Cat\", \"Ant\", \"Table\"]", "output": "def count_str_starts_a(l):\n    count = 0\n    for word in l:\n        if word[0].lower() == 'a':\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Create a function in Python that takes a sentence as input and returns a dictionary of each word and its frequency in the sentence.", "input": "example_sentence = \"The quick brown fox jumps over the lazy dog.\"", "output": "def word_frequency(sentence):\n    words = sentence.split()\n    freq_dict = {}\n    for word in words:\n        if word in freq_dict:\n            freq_dict[word] += 1\n        else:\n            freq_dict[word] = 1\n    return freq_dict", "category": "Python"}, {"instruction": "Given a list of strings, create a Python function that sorts them in alphabetical order.", "input": "example_list = [\"Apple\", \"Banana\", \"Cherry\"]", "output": "def sort_list(l):\n    l.sort()\n    return l", "category": "Python"}, {"instruction": "Generate the nth Fibonacci number using a loop.", "input": "", "output": "def fibonacci_loop(n):\n    prev, curr = 0, 1\n    for _ in range(1, n):\n        prev, curr = curr, prev + curr\n    return curr\n\nif __name__ == '__main__':\n    print(fibonacci_loop(10))", "category": "Python"}, {"instruction": "Generate a random valid email address.", "input": "", "output": "import random\n\ndef generate_email():\n characters = 'abcdefghijklmnopqrstuvwxyz0123456789'\n email_address = ''.join(random.choice(characters) for i in range(10))\n return email_address + '@example.com'", "category": "Python"}, {"instruction": "Compose a program to create a dictionary of characteristics from a given list .", "input": "itemList = [\"Apple\", \"Orange\", \"Grapes\", \"Bananas\", \"Watermelons\"]", "output": "def create_characterstic_dictionary(itemList):\n    out = {}\n    for item in itemList:\n        out[item] = len(item)\n    return out\n\nif __name__ == '__main__':\n    itemList = [\"Apple\", \"Orange\", \"Grapes\", \"Bananas\", \"Watermelons\"]\n    print(create_characterstic_dictionary(itemList))", "category": "Python"}, {"instruction": "Convert a given string from lowercase to uppercase characters.", "input": "\"this is a string\"", "output": "def convert_to_uppercase(string):\n    return string.upper()\n    \nif __name__ == '__main__':\n    print(convert_to_uppercase(\"this is a string\"))", "category": "Python"}, {"instruction": "Find the smallest positive number that is not present in a given list.", "input": "my_list = [1, 3, 6, 9, 11]", "output": "def find_missing_number(my_list):\n    sorted_list = sorted(my_list)\n    for i, num in enumerate(sorted_list):\n        if i != num:\n            return i\n    return max(sorted_list) + 1", "category": "Python"}, {"instruction": "Edit the following function to remove duplicate elements from a list.", "input": "def remove_duplicates(list):\n    new_list = []\n    for element in list:\n        new_list.append(element)\n    return new_list", "output": "def remove_duplicates(list):\n    new_list = []\n    for element in list:\n        if element not in new_list:\n            new_list.append(element)\n    return new_list", "category": "Python"}, {"instruction": "How can you remove all the empty strings from a list?", "input": "", "output": "filtered_list = [x for x in list if x!= '']", "category": "Python"}, {"instruction": "How do you sort a dictionary by values in Python?", "input": "", "output": "sorted_dict = dict(sorted(mydict.items(), key=lambda x: x[1]))", "category": "Python"}, {"instruction": "How to generate a random number between two given numbers in Python?", "input": "", "output": "import random \n\ndef random_number(minimum, maximum): \n    return random.randint(minimum, maximum)", "category": "Python"}, {"instruction": "Write a method to remove the trailing spaces from a string in Python.", "input": "", "output": "def remove_trailing_spaces(s): \n    return s.rstrip()", "category": "Python"}, {"instruction": "How do you check if a character is a digit in Python?", "input": "", "output": "if c.isdigit():\n   # character is a digit", "category": "Python"}, {"instruction": "Write a method to find the maximum number of elements in an array such that all subarrays add up to a specified number.", "input": "arr = [1, 2, 3, 4, 5, 6, 7]", "output": "def find_max(arr, target): \n  dp = [[False for i in range(target + 1)] for j in range(len(arr))]\n  for i in range(len(arr)):\n      dp[i][0] = True\n  for i in range(1, len(arr)): \n    for j in range(1, target + 1): \n      if dp[i - 1][j]: \n          dp[i][j] = dp[i - 1][j] \n      elif j >= arr[i]: \n          dp[i][j] = dp[i - 1][j - arr[i]] \n  max_val = 0\n  for i in range(1, target + 1): \n    if dp[len(arr) - 1][i]: \n      max_val = max(max_val, i) \n  return max_val", "category": "Python"}, {"instruction": "How to delete a specific item from a Python dictionary?", "input": "", "output": "dictionary_name.pop(\"item_name\", None)", "category": "Python"}, {"instruction": "Print a random permutation of an array of integers.", "input": "[1,2,3,4,5]", "output": "import random\n\ndef random_permutation(arr):\n    new_arr = arr.copy()\n    random.shuffle(new_arr)\n    return new_arr\n\nif __name__ == '__main__':\n    print(random_permutation([1,2,3,4,5]))", "category": "Python"}, {"instruction": "Given an input string and a pattern, find the first index of the pattern in the string.", "input": "string: \u201cThe quick brown fox jumps over the lazy dog\u201d\npattern: \u201cdog\u201d", "output": "def find_pattern_index(string, pattern):\n for i in range(len(string) - len(pattern) + 1): \n  if string[i:i+len(pattern)] == pattern: \n   return i \n return -1\n \nprint(find_pattern_index(\"The quick brown fox jumps over the lazy dog\", \"dog\"))\n# Output: 40", "category": "Python"}, {"instruction": "Decompose a given number into its prime factors.", "input": "25", "output": "def prime_factorize(n):\n prime_factors = []\n i = 2\n while i * i <= n:\n if n % i:\n i += 1\n else:\n n //= i\n prime_factors.append(i)\n if n > 1:\n prime_factors.append(n)\n return prime_factors\n \nprint(prime_factorize(25))\n# Output: [5, 5]", "category": "Python"}, {"instruction": "Write an algorithm to count the number of pairs whose difference is k.", "input": "nums = [1, 5, 3, 4, 7, 8]\nk = 3", "output": "def count_pairs(nums, k):\n    count = 0\n    # Create a set to store all the elements of the array\n    num_set = set(nums)\n    for num in nums:\n        if num + k in num_set:\n            count += 1\n\n    return count\n\nnum_diff = 3\npair_count = count_pairs(nums, num_diff)\nprint(\"Number of pairs with difference\", num_diff, \" is :\", pair_count)", "category": "Python"}, {"instruction": "Create an algorithm that performs bubble sort.", "input": "", "output": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n-1, 0, -1):\n        for j in range(i):\n            if arr[j] > arr[j+1]:\n                arr[j+1], arr[j] = arr[j], arr[j+1]", "category": "Python"}, {"instruction": "Design an algorithm that can efficiently search for an element in a given sorted array", "input": "", "output": "def binary_search(arr, x):\n  start = 0\n  end = len(arr) - 1\n  while start <= end:\n    mid = start + (end - start)//2\n    if arr[mid] == x:\n      return mid\n    elif arr[mid] < x: \n      start = mid + 1\n    else: \n      end = mid - 1\n  return -1", "category": "Python"}, {"instruction": "Write a Python program that takes two lists, adds their items and returns a new list.", "input": "list_a = [1, 2, 3]\nlist_b = [4, 5, 6]", "output": "def add_list_items(list_a, list_b):\n    output = []\n    for item_a, item_b in zip(list_a, list_b):\n        output.append(item_a + item_b)\n    return output", "category": "Python"}, {"instruction": "Create an algorithm that will return all numbers in the given array that are greater than 10.", "input": "[5, 8, 10, 12, 15, 17, 20]", "output": "def get_over_10(arr):\n    output = []\n    for num in arr:\n        if num > 10:\n            output.append(num)\n    return output", "category": "Python"}, {"instruction": "What is the Python function for swapping two variables' values?", "input": "", "output": "The Python function for swapping two variables' values is \"*a, b = b, a*\". This is a simple one-line expression that swaps the values of the two variables.", "category": "Python"}, {"instruction": "Explain the benefits of using the OOP approach in programming.", "input": "", "output": "Using the Object-Oriented Programming (OOP) approach in programming offers a number of advantages such as increased code reusability, easier maintenance, data hiding, and better performance. OOP makes it easier to model real-world objects and their relationships, allowing developers to reduce complexity by breaking programs down into smaller parts. This makes it easier to identify, debug and modify code. Additionally, OOP promotes the development of extensible and reusable code, cutting down on the cost and time of development. Finally, OOP allows for better tracking of data and control over which elements outside the program can modify the data.", "category": "Python"}, {"instruction": "Write a code for finding the maximum value within a range.", "input": "List: [10, 20, 30, 5, 40] \nRange: [20, 40]", "output": "max = 0\nfor num in list:\n    if num >= 20 and num <= 40:\n        max = max(max, num)\nprint(max) # 40", "category": "Python"}, {"instruction": "Given an array of integers, write a program to find the longest consecutive sequence.", "input": "[1, 9, 3, 10, 4, 20, 2]", "output": "def longest_consecutive(numbers):\n    longest_sequence = 0\n    numbers_set = set(numbers)\n \n    for num in numbers:\n        if num - 1 not in numbers_set:\n            current_number = num\n            current_sequence = 1\n \n            while current_number + 1 in numbers_set:\n                current_sequence += 1\n                current_number += 1\n \n            longest_sequence = max(longest_sequence, current_sequence)\n \n    return longest_sequence", "category": "Python"}, {"instruction": "Create a for loop in Python that will iterate through a given list and add the square of each element to a new list.", "input": "nums = [2, 3, 4]", "output": "# Create an empty list\nsquared_nums = []\n\n# Iterate through the given list \nfor num in nums:\n  # Calculate the square of the element\n  squared_num = num * num\n  # Append it to the new list\n  squared_nums.append(squared_num)\n\n# Print the new list\nprint(squared_nums) \n# Output: [4, 9, 16]", "category": "Python"}, {"instruction": "Write a loop in Python to find the summation of the square of the first 10 natural numbers.", "input": "", "output": "sum = 0\nfor i in range(1, 11): \n    sum += i**2 \n \nprint(\"The sum of the square of the first 10 natural numbers is\", sum)", "category": "Python"}, {"instruction": "Design a Python class that allows a user to set and get the name of an object.", "input": "", "output": "class User:\n    def __init__(self, name):\n        self.name = name\n\n    def getName(self):\n        return self.name\n\n    def setName(self, name):\n        self.name = name", "category": "Python"}, {"instruction": "Design an algorithm to calculate the intersection of two given lists.", "input": "List1 = [2, 5, 9, 12, 17]\nList2 = [3, 5, 9, 10]", "output": "def intersection(list1, list2):\n    # Initialize an empty list \n    intersection_list = []\n\n    # Iterate over elements of the first list\n    for num in list1:\n        # Compare each element of first list with elements of second list\n        if num in list2:\n            # Add to the intersection list if matches\n            intersection_list.append(num)\n\n    return intersection_list\n\nif __name__ == \"__main__\":\n    list1 = [2, 5, 9, 12, 17]\n    list2 = [3, 5, 9, 10]\n    print(intersection(list1, list2))", "category": "Python"}, {"instruction": "Generate a sequence of prime numbers between a given range using the Sieve of Eratosthenes algorithm.", "input": "", "output": "def sieve_of_eratosthenes(lower, upper):\n    # Create a list of prime numbers\n    prime_list = [True] * (upper + 1)\n    prime_list[0] = False\n    prime_list[1] = False\n\n    # Iterate over the list until the square root of the upper limit\n    for i in range(2, int(upper ** 0.5) + 1):\n        # If i is true, then it is prime\n        if prime_list[i]:\n            # Set all multiples of i to false\n            for j in range(i*i, upper + 1, i):\n                prime_list[j] = False\n\n    # Get the list of prime numbers between lower and upper\n    prime_nums = []\n    for i in range(lower, upper + 1):\n        if prime_list[i]:\n            prime_nums.append(i)\n\n    return prime_nums\n\nif __name__ == \"__main__\":\n    lower = 0\n    upper = 50\n    print(sieve_of_eratosthenes(lower, upper))", "category": "Python"}, {"instruction": "Design an algorithm to compute the number of trailing zeroes in a factorial number.", "input": "", "output": "def count_trailing_zeroes(factorial_number):\n    \n\u00a0 \u00a0 # Initialize count \n\u00a0 \u00a0 count = 0\n\n\u00a0 \u00a0 # Keep dividing n by powers of 5 and update count\n\u00a0 \u00a0 i = 5\n\u00a0 \u00a0 while (factorial_number/i>=1):\n\u00a0 \u00a0 \u00a0 \u00a0 count += int(factorial_number/i)\n\u00a0 \u00a0 \u00a0 \u00a0 i *= 5\n\u00a0 \u00a0 \u00a0 \u00a0 \n\u00a0 \u00a0 return int(count)\n\nif __name__ == \"__main__\":\n    factorial_number = 12\n    print(count_trailing_zeroes(factorial_number))", "category": "Python"}, {"instruction": "Extract the country code from a given phone number of the format +cc xxx-xxx-xxxx", "input": "+91 983-741-3256", "output": "def extract_country_code(number):\n    # Check if number is valid\n    if len(number) == 13 and number[0] == '+':\n        # Extract the country code\n        cc = number[1:3]\n        return cc\n\nif __name__ == \"__main__\":\n    number = \"+91 983-741-3256\"\n    print(extract_country_code(number))", "category": "Python"}, {"instruction": "Reverse the words in a sentence stored as a list in Python.", "input": "['word', 'one', 'is', 'this']", "output": "def reverse_words(words):\n    # Get the length of the words\n    n = len(words)\n\n    # Reverse the list words\n    for i in range(n // 2):\n        words[i], words[n - 1 - i] = words[n - 1 - i], words[i]\n\n    return words\n\nif __name__ == \"__main__\":\n    words = ['word', 'one', 'is', 'this']\n    print(reverse_words(words))", "category": "Python"}, {"instruction": "Create a function which determines if a given number is a palindrome.", "input": "7337", "output": "def palindrome(num):\n    # convert the number to a string\n    num_str = str(num)\n\n    # Reverse the string using slicing\n    rev_str = num_str[::-1]\n\n    # check if the given number is equal to the reversed string\n    if num_str == rev_str:\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    num = 7337\n    print(palindrome(num))", "category": "Python"}, {"instruction": "Write a function that takes two strings as parameters and return a new string that has the characters of the second string appended to the first string.", "input": "\"hello\",\"world\"", "output": "def append_string(string1, string2):\n    return string1 + string2\n\nif __name__ == '__main__':\n    string1 = \"hello\"\n    string2 = \"world\"\n    result = append_string(string1, string2)\n    print(result)", "category": "Python"}, {"instruction": "Output the number of words in a given sentence stored as a string.", "input": "\"Welcome to the world of coding!\"", "output": "def count_words(sentence):\n    return len(sentence.split())\n\nif __name__ == '__main__':\n    sentence = \"Welcome to the world of coding!\"\n    print(count_words(sentence))", "category": "Python"}, {"instruction": "Design a class that stores and prints a complex number.", "input": "", "output": "class ComplexNumber:\n    def __init__(self, real, imag):\n        self.real = real\n        self.imag = imag\n\n    def __str__(self):\n        return '{} + {}i'.format(self.real, self.imag)\n\nif __name__ == '__main__':\n    c = ComplexNumber(2, 8)\n    print(c)", "category": "Python"}, {"instruction": "Create a computer program that takes a string as an input and builds a dictionary of words and their respective frequencies.", "input": "\"the quick brown fox jumps over the lazy dog\"", "output": "def get_frequency(input):\n    # Split the input into words\n    words = input.split()\n\n    # Create a dictionary to store the words and the frequency\n    frequency = dict()\n\n    # Iterate over the words and store the frequency\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n            \n    return frequency\n\nif __name__ == \"__main__\":\n    # Input string\n    input = \"the quick brown fox jumps over the lazy dog\"\n\n    # Get the frequency of words\n    frequency = get_frequency(input)\n\n    # Print the frequency\n    print(frequency)", "category": "Python"}, {"instruction": "Given an array, separate the odd and even numbers, and return a list of two different arrays, one for even and one for odd numbers.", "input": "[3, 6, 9, 12, 21]", "output": "def separate_even_odd(arr):\n even = []\n odd = []\n for i in arr:\n if i % 2 == 0:\n even.append(i)\n else:\n odd.append(i)\n return even, odd\n\nprint(separate_even_odd([3, 6, 9, 12, 21]))\n# Output: ([6, 12], [3, 9, 21])", "category": "Python"}, {"instruction": "Given an array of integers, write an algorithm to reorder the array so that all the negative integers appear before all the positive integers.", "input": "arr = [4, -7, -3, 9, 1, -4]", "output": "def reorder_arr(arr): \n  negatives = [] \n  positives = [] \n\n  for item in arr: \n    if item < 0: \n      negatives.append(item) \n    elif item >= 0: \n      positives.append(item) \n    \n  return negatives + positives", "category": "Python"}, {"instruction": "Use the information provided to create a class in Python which represent a Rectangle.", "input": "The Rectangle class should have: \n- Attributes of length and width\n- A method to compute the area of the rectangle", "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n   \n    def get_area(self):\n        return self.length * self.width", "category": "Python"}, {"instruction": "Show an example of a while loop in Python.", "input": "", "output": "i = 0\n\nwhile i < 10:\n    print(i)\n    i += 1", "category": "Python"}, {"instruction": "Create an array in Python containing five strings.", "input": "", "output": "my_words = [\"Hello\", \"World\", \"Python\", \"Programming\", \"Code\"]", "category": "Python"}, {"instruction": "Write the code to create a class in Python named \"Person\".", "input": "", "output": "class Person:\n    def __init__(self, name, age=None):\n        self.name = name\n        self.age = age", "category": "Python"}, {"instruction": "Create a Python script to find the greatest common divisor (GCD) of a pair of integers.", "input": "Number 1: 10\nNumber 2: 12", "output": "def findGCD(x, y): \n  \n    # This function implements the Euclidian algorithm \n    # to find GCD of two numbers \n    while(y): \n        x, y = y, x % y \n  \n    return x \n  \n# Driver program \ngcd = findGCD(10, 12) \nprint(gcd)", "category": "Python"}, {"instruction": "Modify the program to accept user input of two numbers, and show the result based on the operator provided.", "input": "def calculate(num1, num2):\n    result = num1 + num2\n    return result", "output": "def calculate(num1, num2, operator):\n    if (operator == '+'):\n        result = num1 + num2\n    elif (operator == '-'):\n        result = num1 - num2\n    elif (operator == '*'):\n        result = num1 * num2\n    elif (operator == '/'):\n        result = num1 / num2\n    else:\n        print(\"Invalid operator\")\n    return result", "category": "Python"}, {"instruction": "Rewrite the following program using OOP concepts.", "input": "NUMBER_OF_ELEMENTS = 10\narr = [0] * NUMBER_OF_ELEMENTS\n\ndef set_element(index, value):\n    arr[index] = value", "output": "class Array():\n    def __init__(self, num_elements):\n        self.arr = [0] * num_elements\n\n    def set_element(self, index, value):\n        self.arr[index] = value", "category": "Python"}, {"instruction": "Add proper type annotations to the following Python function.", "input": "def get_favorite_number(name):\n  return name + 10", "output": "def get_favorite_number(name: str) -> int:\n  return name + 10", "category": "Python"}, {"instruction": "Edit the following Python code to add a loop to generate a list of numbers from 1 to 10.", "input": "numbers = []", "output": "numbers = []\n\nfor i in range(1, 11):\n numbers.append(i)", "category": "Python"}, {"instruction": "Create a class in Python to represent a book and include a method for getting the name of the book.", "input": "", "output": "class Book:\n    def __init__(self, name):\n        self.name = name\n\n    def get_name(self):\n        return self.name", "category": "Python"}, {"instruction": "We have a list of integers, write a function in Python to find the second smallest element in the list.", "input": "[2, 4, 7, 10, 8]", "output": "def find_second_smallest(list_nums):\n    sorted_list = sorted(list_nums)\n    return sorted_list[1]\n\nfind_second_smallest([2, 4, 7, 10, 8])", "category": "Python"}, {"instruction": "Write a function in Python to calculate the sum of all even integers in a list.", "input": "[1, 2, 3, 4, 5]", "output": "def sum_even_ints(list_nums):\n    total_sum = 0\n    for num in list_nums:\n        if num % 2 == 0:\n            total_sum += num\n    return total_sum\n\nsum_even_ints([1, 2, 3, 4, 5])", "category": "Python"}, {"instruction": "Write a Python program to remove an empty tuple from a list of tuples.", "input": "list1 = [ (), ('a',), ('b', 'c'), ('d', 'e', 'f')]", "output": "list2 = [ t for t in list1 if t ]\nprint(list2)", "category": "Python"}, {"instruction": "Describe a complete algorithm for sorting n integers.", "input": "", "output": "The algorithm for sorting n integers is a divide-and-conquer algorithm.\n\nThe algorithm works as follows:\n1. Select a pivot element from the array.\n2. Split the array into two sub-arrays based on the pivot element. \n3.  For each of the sub-arrays, use the same sorting algorithm to sort their contents. \n4. Once both sub-arrays are sorted, merge the two sub-arrays into one sorted array.", "category": "Python"}, {"instruction": "Convert this Python statement into a list comprehension.", "input": "for item1 in list1:\n    for item2 in list2:\n        if item1 == item2:\n            result_list.append(item1)", "output": "result_list = [item1 for item1 in list1 for item2 in list2 if item1 == item2]", "category": "Python"}, {"instruction": "Develop a natural language processing model to detect sarcasm in text.", "input": "", "output": "# This code is written in Python\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LogisticRegression\n\n# Load dataset \ndf = pd.read_csv('sarcasm_data.csv')\n\n# Vectorize text using CountVectorizer\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(df['text'])\ny = df['label']\n\n# Split into train and test dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=2)\n\n# Train model using Logistic Regression\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Evaluate model performance\nscore = model.score(X_test, y_test)\nprint(f'Model Accuracy: {score*100}%')", "category": "Python"}, {"instruction": "Develop an AI model to classify emails with spam contents.", "input": "", "output": "# import necessary libraries in Python\nimport pandas as pd\nimport numpy as np \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# read data \ndf = pd.read_csv('emails.csv')\nX = df['text']\ny = df['label']\n\n# Vectorize emails using TF-IDF\nvectorizer = TfidfVectorizer()\nX_vec = vectorizer.fit_transform(X)\n\n# split dataset into training and test data \nX_train, X_test, y_train, y_test = train_test_split(X_vec, y, test_size=0.2, random_state=2)\n\n# train model using the training data\nclf = MultinomialNB()\nclf.fit(X_train, y_train)\n\n# evaluate performance on the test data\nscore = clf.score(X_test, y_test)\nprint(f'Model Accuracy: {score*100}%')", "category": "Python"}, {"instruction": "Write a function in Python that takes two strings as input and returns a sorted version of the first string with all occurrences of the letters in the second string removed.", "input": "firstString = 'hello world'\nsecondString = 'lo'", "output": "def remove_occurrences(first_string, second_string):\n  original_string_list = list(first_string)\n  for char in second_string:\n    if char in original_string_list:\n      original_string_list.remove(char)\n  return ''.join(sorted(original_string_list))\n\n# Usage\nprint(remove_occurrences('hello world', 'lo')) # Output: dehwr", "category": "Python"}, {"instruction": "Create a program to check if a number lies between two other numbers.", "input": "Num1 = 25\nNum2 = 70\nNum3 = 40", "output": "def check_in_range(num1, num2, num3):\n    if (num1 < num3 and num3 < num2):\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Rearrange the characters of given string in the order of their frequency.", "input": "String = \"tree\"", "output": "def rearrange(string):\n    Frequency={}\n    newstr=''\n    for c in string:\n        if c not in Frequency:\n            Frequency[c] = 1\n        else:\n            Frequency[c] = Frequency[c]+1\n    for key,value in sorted(Frequency.items(), key=lambda x: x[1], reverse=True):\n        for i in range(value):\n            newstr = newstr+key\n    return newstr", "category": "Python"}, {"instruction": "Rewrite the given function without using the ternary expression.", "input": "def func(x):\n    return x if x > 0 else x + 10", "output": "def func(x):\n    if x > 0:\n        return x\n    else:\n        return x + 10", "category": "Python"}, {"instruction": "Explain what is an algorithm.", "input": "", "output": "An algorithm is a set of steps or procedures used to solve a problem or accomplish a task. Algorithms are designed to perform an operation on a given set of inputs in order to obtain the desired output. Algorithms can be implemented in various ways, such as in pseudocode or in a programming language. Algorithms are commonly used for complex tasks such as image processing, data sorting, text processing, and AI applications.", "category": "Python"}, {"instruction": "Explain what is a neural network.", "input": "", "output": "A neural network is an artificial intelligence system made up of connected units which process information. Each unit is analogous to a neuron in the human brain, and in a neural network, information travels from the input nodes, through the hidden layers, to the output nodes. The neurons in each layer are connected to each other, and the strength of their connection is determined by weights that are specified in advance. When input data enters the neural network, it is processed through the layers and is ultimately used to generate a numerical output corresponding to the classified input.", "category": "Python"}, {"instruction": "Explain what is a median in statistics.", "input": "", "output": "The median is a statistical measure that is used to represent the middle value of a set of data points. It is calculated by arranging the given data points in ascending or descending order and taking the mean of the two middle values, if the set of data points contains an even number of values. If it contains an odd number of values, the median is simply the middle value. The median is not affected by outliers, making it a more robust measure of central tendency than the mean. It is a helpful measure when analyzing large datasets, as it can give a better representation of the data than a mean, which can be greatly influenced by outliers.", "category": "Python"}, {"instruction": "Design a Python script to extract the name, date of birth, and address from a given string.", "input": "John Smith; 10/03/1994; 9 Hall Street, Anytown", "output": "import re \n\npattern = re.compile(r'(?P<name>[\\w ]+); (?P<dob>[\\d/]+); (?P<addr>[\\w ]+[,][\\w ]+)')\nmatch = pattern.search('John Smith; 10/03/1994; 9 Hall Street, Anytown') \nname = match.group('name') \ndob = match.group('dob') \naddr = match.group('addr')", "category": "Python"}, {"instruction": "Create a Python class with two methods; one to add two numbers, and another to subtract two numbers.", "input": "", "output": "class Calculator:\n    def add(self, x, y):\n        return x + y\n\n    def subtract(self, x, y):\n        return x - y", "category": "Python"}, {"instruction": "In Python, write a program to remove all duplicates from a given list of integers.", "input": "", "output": "def remove_duplicates(arr):\n    result = [] \n    seen = set() \n    for item in arr:\n        if item not in seen:\n            result.append(item)\n            seen.add(item)\n    return result", "category": "Python"}, {"instruction": "Update the following code to be Python 3 compatible.", "input": "print \"Welcome to the Program.\"", "output": "print(\"Welcome to the Program.\")", "category": "Python"}, {"instruction": "Create a data structure suitable for storing a list of scores for a game.", "input": "", "output": "scores = []\n\n# Function to add a new score to the scores list\ndef add_score(score):\n    scores.append(score)\n\n# Function to display all the scores in the scores list\ndef display_scores():\n    for score in scores:\n        print(score)", "category": "Python"}, {"instruction": "Remove all non-alphabetical characters from the given string.", "input": "String: \"Hello,123_[World!]%$\"", "output": "import re\n\ndef remove_non_alphabetic(string):\n  return re.sub(\"[^a-zA-Z ]\", \"\", string)", "category": "Python"}, {"instruction": "Write a Python program to find the closest number in a given array to a given number.", "input": "Array: [3, 6, 9, 12, 15], Number: 10", "output": "def closest_number(nums, number): \n  min_diff = abs(nums[0] - number) \n  min_num = nums[0] \n  for num in nums:\n    min_diff_temp = abs(num - number) \n    if min_diff_temp < min_diff:\n    \tmin_diff = min_diff_temp\n    \tmin_num = num\n  return min_num", "category": "Python"}, {"instruction": "Suggest a solution to print the third character from a string in Python.", "input": "String = \"Hello, world!\"", "output": "print(string[2]) # Output: l", "category": "Python"}, {"instruction": "Build a program in Python to check if a number is Odd or Even.", "input": "", "output": "def odd_even(n):\n\tif (n % 2 == 0):\n\t\tprint(\"Even\")\n\telse:\n\t\tprint(\"Odd\")", "category": "Python"}, {"instruction": "Determine the syntax for a function call in Python.", "input": "", "output": "Function calls in Python must include the name of the function followed by parentheses and the arguments inside the parentheses. If you do not include any arguments, the parentheses should still be included. An example would be:\n\n\u2003\u2003my_function()", "category": "Python"}, {"instruction": "Write a function to identify all palindromes in the given string.", "input": "", "output": "def find_palindromes(string):\n    result = []\n    for i in range(len(string)):\n        for j in range(i+2,len(string)+1):\n            if string[i:j] == string[j-1:i-1:-1]:\n                result.append(string[i:j])\n    return result", "category": "Python"}, {"instruction": "What is the difference between while and do while loops in programming?", "input": "", "output": "The main difference between while and do while loops is that a while loop will only execute the loop body if the condition evaluates to true, while a do while loop will always execute the loop body at least once, and then continue to execute the loop body until the condition evaluates to false. This means that a do while loop is guaranteed to run at least once, whereas a while loop may not run at all.", "category": "Python"}, {"instruction": "Write a function to calculate the sum of the elements of an array with float values.", "input": "", "output": "def sum_float_array(float_array):\n    total = 0\n    for i in float_array:\n        total += i\n    return total", "category": "Python"}, {"instruction": "Add a method to the Customer class to print out customer's name, age and email", "input": "", "output": "class Customer:\n    def __init__(self, name, age, email):\n        self.name = name\n        self.age = age\n        self.email = email\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n    \n    def get_email(self):\n        return self.email\n    \n    def print_customer_data(self):\n        print('Name: ' + self.name + ', Age: ' + str(self.age) + ', Email: ' + self.email)", "category": "Python"}, {"instruction": "What is the principal difference between a linked list and an array?", "input": "", "output": "The principal difference between a linked list and an array is that a linked list is a collection of points that each point to their respective memory locations, while an array is a contiguous block of memory locations. A linked list has the advantage of being able to insert and delete nodes at any time, while the elements of an array must be shifted to make room for new elements. Similarly, linked lists do not require a pre-allocated block of memory, so it is more memory efficient than an array.", "category": "Python"}, {"instruction": "Create a class for customer data.", "input": "", "output": "class Customer:\n    def __init__(self, name, age, email):\n        self.name = name\n        self.age = age\n        self.email = email\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n    \n    def get_email(self):\n        return self.email", "category": "Python"}, {"instruction": "Write a function in Python to take a string as input and return a dictionary with the count of each letter in the string.", "input": "string = \"This is a string of characters\"", "output": "def count_letters(string):\n    letter_count = {}\n    for char in string:\n        if char not in letter_count:\n            letter_count[char] = 1\n        else:\n            letter_count[char] += 1;\n    return letter_count\n\nprint(count_letters(string))", "category": "Python"}, {"instruction": "Create a function in Python to split a given string into a list of strings using a space as a delimiter.", "input": "string = \"This is a string to split\"", "output": "def split_string(string):\n    return string.split(\" \")\n\nprint(split_string(string))", "category": "Python"}, {"instruction": "Create a function in Python to remove all characters other than letters and numbers from a string.", "input": "string = \"This#%&string c&$o#th=esa#@ll cha*%$racter\"", "output": "import re\n\ndef remove_characters(string):\n    return re.sub('[^A-Za-z0-9]+', '', string)\n\nprint(remove_characters(string))", "category": "Python"}, {"instruction": "Create a function in Python that takes a string as an input and returns a new string that is the reverse of the input string.", "input": "string = \"Reverse Me\"", "output": "def reverse_string(string):\n    return string[::-1]\n\nprint(reverse_string(string))", "category": "Python"}, {"instruction": "Write a function in Python that will take two integers as inputs and compute their average.", "input": "int1 = 10\nint2 = 15", "output": "def calculate_average(int1, int2):\n    return (int1 + int2) / 2\n\nprint(calculate_average(int1, int2))", "category": "Python"}, {"instruction": "Write a function that takes in a string of text and counts the number of times each letter appears in the string", "input": "text = \"The quick brown fox jumps over the lazy dog\"", "output": "def count_letters(text):\n    letter_count = {}\n    for character in text:\n        if character not in letter_count:\n            letter_count[character] = 1\n        else:\n            letter_count[character] += 1\n    return letter_count\n\nprint(count_letters(text))", "category": "Python"}, {"instruction": "Create a Python function which takes a dictionary and prints the contents of the dictionary in a human readable format.", "input": "", "output": "def printDictionary(dictionary):\n    for key in dictionary.keys():\n        print(key, \":\", dictionary[key])", "category": "Python"}, {"instruction": "Implement an algorithm in Python to find the GCD (Greatest Common Divisor) of two numbers", "input": "", "output": "def gcd(a, b): \n  \n   if (a == 0): \n       return b \n       \n   if (b == 0): \n       return a \n       \n   if (a == b): \n       return a \n       \n   if (a > b): \n       return gcd(a-b, b) \n      \n   return gcd(a, b-a)", "category": "Python"}, {"instruction": "Create a Python function which takes a given string and replaces all its characters with the next consecutive character.", "input": "", "output": "def shift_string(string):\n  result = \"\"\n  for ch in string:\n    result += chr(ord(ch) + 1)\n  return result", "category": "Python"}, {"instruction": "Sort the following list using Python's built-in sorting functions.", "input": "unsorted_list = [5, 1, 6, 8, 2, 4]", "output": "unsorted_list.sort()\n# unsorted_list is now [1, 2, 4, 5, 6, 8]", "category": "Python"}, {"instruction": "Create an algorithm that takes in an array of integers and returns true if two of the integers add up to a target number.", "input": "example_array = [10, 7, 8, 3, 5]\ntarget_num = 13", "output": "def two_sum_algorithm(arr, target): \n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] + arr[j] == target: \n                return True\n  \n    return False\n\ntwo_sum_algorithm(example_array, target_num)", "category": "Python"}, {"instruction": "Create a class in Python called Cat with constructor that takes three arguments i.e. name, color and age. The class should have three methods called meow, purr and display_info.", "input": "", "output": "class Cat:\n    def __init__(self, name, color, age):\n        self.name = name\n        self.color = color\n        self.age = age\n    \n    def meow(self):\n        print('%s the %s cat meows!' % (self.name, self.color))\n    \n    def purr(self):\n        print('%s the %s cat purrs contentedly.' % (self.name, self.color))\n    \n    def display_info(self):\n        print('%s is a %s cat and is %d years old.' % (self.name, self.color, self.age))", "category": "Python"}, {"instruction": "Create an algorithm to merge two sorted linked lists.", "input": "Linked List 1: 1 - 4 - 7\nLinked List 2: 2 - 5 - 8", "output": "def merge_sorted_lists(list1, list2):\n    if not list1:\n        return list2\n    if not list2:\n        return list1\n        \n    if list1.val < list2.val:\n       head = list1\n       list1 = list1.next\n   else:\n       head = list2\n       list2 = list2.next\n  \n   cur = head\n  \n   while list1 and list2:\n       if list1.val < list2.val:\n           cur.next = list1\n           list1 = list1.next\n       else:\n           cur.next = list2\n           list2 = list2.next\n          \n       cur = cur.next\n          \n   cur.next = list1 if list1 else list2\n  \n   return head", "category": "Python"}, {"instruction": "Write a TensorFlow program for a linear regression model.", "input": "", "output": "import tensorflow as tf\n\n# Create variables\na = tf.Variable(0.5)\nb = tf.Variable(0.5)\n\n# > Create the input data, y and x\nx = tf.placeholder(tf.float32)\ny = tf.placeholder(tf.float32)\n\n# > Model: y = ax + b\ny_pred = a * x + b\n\n# > Loss: Mean Squared Error (MSE)\nloss = tf.reduce_mean(tf.square(y_pred - y))\n\n# > Optimizer: Gradient Descent\ntrain_op = tf.train.GradientDescentOptimizer(0.01).minimize(loss)\n\n# > Initialize all variables\ninit = tf.global_variables_initializer()\n\n# > Execute the graph\nwith tf.Session() as sess:\n    sess.run(init)\n    for step in range(200):\n        sess.run(train_op, {x: [1, 2, 3, 4], y: [2, 4, 6, 8]})\n        if (step + 1) % 20 == 0:\n            loss_val = sess.run(loss, {x: [1, 2, 3, 4], y: [2, 4, 6, 8]})\n            print(\"Step:\", step + 1, \" Loss:\", loss_val)", "category": "Python"}, {"instruction": "Explain B-Tree data structure.", "input": "", "output": "B-trees are a kind of self-balancing search tree data structure. They are frequently used in databases, file systems, and operating systems. A B-tree consists of a root node, internal nodes, and leaf nodes. The root may or may not have values associated with it. Internal nodes store values and pointers to subtrees to the left and right. Leaf nodes store the actual data. The keys in B-trees are usually sorted. As data is added or deleted, the tree self-balances to maintain order, making searching and inserting items efficient. B-trees are optimal for systems with slow or limited seek times (such as hard drives), while other data structures like binary search trees are better suited for systems with faster seek times.", "category": "Python"}, {"instruction": "Compute the sum of elements in the following input array.", "input": "[4, 7, 2, 9, 10, 15]", "output": "def sum_array(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total", "category": "Python"}, {"instruction": "Count the number of vowels present in the input text.", "input": "Good morning!", "output": "def vowel_count(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for c in text:\n        if c.lower() in vowels:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Implement quicksort in Python", "input": "", "output": "def quicksort(array):\n    if len(array) < 2:\n        return array\n    else:\n        pivot = array[0]\n        less = [i for i in array[1:] if i <= pivot]\n        greater = [i for i in array[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)", "category": "Python"}, {"instruction": "Use TensorFlow to build a machine learning model for predicting continuous values given a data set of temperature vs electricity consumption.", "input": "", "output": "import tensorflow as tf\nimport matplotlib.pyplot as plt\n\n#Import the dataset\nx = tf.placeholder(tf.float32)\ny = tf.placeholder(tf.float32)\n  \n# Create our model\nmodel = tf.keras.Sequential([tf.keras.layers.Dense(1, input_shape=[1])])\n\n# Compile the model\nmodel.compile(loss='mean_squared_error', optimizer='sgd')\n\n# Fit the model\nmodel.fit(x, y, epochs=10)\n\n# Plot the result\nplt.plot(x, y, 'ro', label='original data')\nplt.plot(x, model.predict(x), label='predicted')\nplt.xlabel('Temperature')\nplt.ylabel('Electricity Consumption')\nplt.legend()\nplt.show()", "category": "Python"}, {"instruction": "Use dictionaries in Python to merge the data from two given dictionaries.", "input": "dictA = {\n  'keyA': 1,\n  'keyB': 2\n}\ndictB = {\n  'keyC': 3,\n  'keyD': 4\n}", "output": "dictC = {**dictA, **dictB}", "category": "Python"}, {"instruction": "Edit the given code snippet to reverse the elements of a list in Python.", "input": "", "output": "def reverseList(list): \n    list.reverse() \n    return list", "category": "Python"}, {"instruction": "How would you form a list from two lists by taking elements at same index from both the lists?", "input": "", "output": "def form_list_from_list(list1, list2):\n    return [list1[i] + list2[i] for i in range(len(list1))]\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3] \n    list2 = [4, 5, 6]\n    print(form_list_from_list(list1, list2))", "category": "Python"}, {"instruction": "Write a code to get the second smallest number from a list of integers.", "input": "", "output": "def second_smallest(numbers):\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]\n\nif __name__ == '__main__':\n    numbers = [1, 5, 2, 9, 3, 6]\n    print(second_smallest(numbers))", "category": "Python"}, {"instruction": "How would you calculate the distance between two points in a three-dimensional space?", "input": "", "output": "def distance_3d(x1, y1, z1, x2, y2, z2):\n    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2 + (z2 - z1)**2)\n\nif __name__ == '__main__':\n    x1, y1, z1 = 1, 2, 3\n    x2, y2, z2 = 5, 6, 7\n    print(distance_3d(x1, y1, z1, x2, y2, z2))", "category": "Python"}, {"instruction": "Edit the following code to print the position of an element x in a list y.", "input": "list y = [2, 3, 4, 1, 5]\nx = 1", "output": "list y = [2, 3, 4, 1, 5]\nx = 1\n\ndef find_position(y, x):\n    for index, value in enumerate(y):\n        if value == x:\n            return index\n    return f\"{x} is not in the list\"\n\nif __name__ == '__main__':\n    print(find_position(y, x))", "category": "Python"}, {"instruction": "Compose an algorithm to determine whether a given string contains all unique characters.", "input": "", "output": "def is_unique(string):\n   char_set = set()\n   for char in string:\n       if char in char_set:\n           return False\n       else:\n           char_set.add(char)\n   return True", "category": "Python"}, {"instruction": "Write a Python program to print the numbers of a specified list after removing even numbers from it.", "input": "", "output": "def print_odd(numbers):\n    odd_numbers = []\n    for num in numbers:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    return odd_numbers\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(print_odd(numbers))", "category": "Python"}, {"instruction": "How would you generate a Fibonacci sequence up to n in a list?", "input": "", "output": "def generate_fibonacci_sequence(n):\n    result = [1]\n \n    current_number = 1\n    next_number = 1\n    while current_number <= n:\n        result.append(current_number)\n        current_number, next_number = next_number, current_number + next_number\n \n    return result\n\nif __name__ == '__main__':\n print(generate_fibonacci_sequence(10))", "category": "Python"}, {"instruction": "Given a two-dimensional array of integers, find the maximum sum of numbers you can find by tracing a path from the top-left to bottom-right corner.", "input": "[[1, 5, 4], [2, 3, 4], [1, 9, 3]]", "output": "def max_sum(arr):\n    result = [[None] * len(arr[0]) for _ in range(len(arr))]\n    result[0][0] = arr[0][0]\n    for i in range(1, len(arr[0])):\n        result[0][i] = arr[0][i] + result[0][i - 1]\n    for i in range(1, len(arr)):\n        result[i][0] = arr[i][0] + result[i - 1][0]\n    for i in range(1, len(arr)):\n        for j in range(1, len(arr[0])):\n            result[i][j] = max(result[i - 1][j], result[i][j - 1]) + arr[i][j]\n    return result[- 1][- 1]\n\nif __name__ == '__main__':\n    arr = [[1, 5, 4], [2, 3, 4], [1, 9, 3]]\n    print(max_sum(arr))", "category": "Python"}, {"instruction": "Generate a random string of 16 characters containing both alphabetical and numerical characters.", "input": "", "output": "import random\nimport string\n\ndef random_string():\n    characters = string.ascii_letters + string.digits\n    random_string = ''.join(random.choices(characters, k=16))\n    return random_string\n\nif __name__ == '__main__':\n    print(random_string())", "category": "Python"}, {"instruction": "Implement a function to compute the binomial coefficient.", "input": "", "output": "def compute_binomial_coefficient(n, k):\n    if k == 0 or k == n:\n        return 1\n    else:\n        return compute_binomial_coefficient(n-1,k-1) + compute_binomial_coefficient(n-1,k)", "category": "Python"}, {"instruction": "Write a code to perform a linear search in a given list.", "input": "[1, 6, 2, 8, 5], 8", "output": "def linear_search(my_list, x):\n    for i in range(len(my_list)):\n        if my_list[i] == x:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Write a a code to find all the prime numbers from 0 to 100", "input": "", "output": "# create a list of all the prime numbers\nprime_list = []\n\n# iterate through 0 to 100\nfor i in range(1,101):\n    if i > 1:\n        # loop through 2 to i/2\n        for j in range(2,i//2):\n            # if i is divisible by j, then it is not a prime number\n            if (i % j) == 0:\n                break\n        else:\n            # add the prime number to the prime list\n            prime_list.append(i)\n\nprint(prime_list) # prints the list of all prime numbers from 0 to 100.", "category": "Python"}, {"instruction": "Remove the duplicates in a list.", "input": "arr = [1,2,1,2,3]", "output": "arr = [1,2,1,2,3]\n\nres = []\nfor x in arr: \n    if x not in res: \n        res.append(x)\nprint(res) # prints [1,2,3], which is the list without any duplicates.", "category": "Python"}, {"instruction": "Create a function in python to find the minimum value in an array.", "input": "arr = [3,6,2,7,1]", "output": "def find_min(arr): \n    min = arr[0] \n    for x in arr: \n        if x < min: \n            min = x \n    return min\n\nresult = find_min(arr)\nprint(result) # prints 1, which is the minimum in the array.", "category": "Python"}, {"instruction": "Explain the purpose of a static method in a Python class", "input": "", "output": "A static method is a method that is bound to a class rather than an object. It does not require an instance of the class to be created in order to be called, and it does not have access to the attributes or methods of an instance of that class. Static methods are usually used to provide methods for manipulation of class attributes and/or to provide utility methods for the class.", "category": "Python"}, {"instruction": "Generate a code segment that prints all the elements of a 2-dimensional array.", "input": "", "output": "for array in 2d_array:\n    for element in array:\n        print(element)", "category": "Python"}, {"instruction": "Explain the use of semicolon in the following python code.", "input": "a = 5; b = 6; c = 7;", "output": "The semicolon is used here to separate multiple statements on the same line. In this case, the code is assigning values to variables; by separating these assignments with semicolons, they are all evaluated in a single statement as opposed to writing three separate statements.", "category": "Python"}, {"instruction": "Create a Python class to store attributes of a student", "input": "", "output": "class Student:\n    def __init__(self, name, grade, age):\n        self.name = name\n        self.grade = grade\n        self.age = age\n\n    def get_name(self):\n        return self.name\n\n    def get_grade(self):\n        return self.grade\n\n    def get_age(self):\n        return self.age", "category": "Python"}, {"instruction": "Rewrite the following function without using the ``for`` loop.", "input": "def double_array(array):\n    for i in range(len(array)):\n        array[i] *= 2", "output": "def double_array(array):\n    array[:] = [x * 2 for x in array]", "category": "Python"}, {"instruction": "Create a looping statement in Python to print the alphabet in lowercase.", "input": "", "output": "for letter in \"abcdefghijklmnopqrstuvwxyz\":\n    print(letter)", "category": "Python"}, {"instruction": "Edit the following code to register an account on a website.", "input": "import requests\n\nurl = \"www.example.com/register\"\ndata = \"username=myname\"", "output": "import requests\n\nurl = \"www.example.com/register\"\ndata = { \"username\" : \"myname\", \"password\" : \"secret_password\", \"email\" : \"myname@example.com\" }\n\nresponse = requests.post(url, data=data)", "category": "Python"}, {"instruction": "Create a class in Python called \"Person\" and define two methods - one for getting a name, and one for saying hello.", "input": "", "output": "class Person(object):\n    def __init__(self, name):\n        self.name = name\n    \n    def getName(self):\n        return self.name\n    \n    def say_hello(self):\n        print(\"Hello, my name is %s\" % self.name)", "category": "Python"}, {"instruction": "Write a code to implement Multiple Linear Regression for a dataset.", "input": "", "output": "\"\"\"\nA code to implement Multiple Linear Regression for a given dataset\n\"\"\"\n\nimport numpy as np\n\ndef multiple_linear_regression(X, y):\n    '''\n    This function accepts feature matrix X and target vector y,\n    and returns the coefficients of the determined multiple linear regression model.\n    '''\n    X = np.concatenate((np.ones((X.shape[0], 1)), X), axis=1) \n    #concatenate a column of ones to X\n    return np.linalg.inv(X.T @ X) @ X.T @ y", "category": "Python"}, {"instruction": "Given two integers, how to find the GCD of them in Python?", "input": "", "output": "def gcd(a, b): \n  if(b == 0): \n    return a \n  else: \n    return gcd(b, a % b)", "category": "Python"}, {"instruction": "Write a function in Python to find the sum of all even numbers between 0 and a given number.", "input": "", "output": "def sum_of_even_numbers(n):\n    result = 0\n    for i in range(0, n + 1):\n        if i % 2 == 0:\n            result += i\n    \n    return result", "category": "Python"}, {"instruction": "Create an artificial neural network in PyTorch to predict the next word in a sentence.", "input": "", "output": "import torch \nimport torch.nn as nn \n\nclass ANN(nn.Module):\n    def __init__(self, vocab_size, embedding_dim, hidden_dim):\n        super().__init__()\n        self.embedding = nn.Embedding(vocab_size, embedding_dim) \n        self.fc1 = nn.Linear(embedding_dim, hidden_dim) \n        self.fc2 = nn.Linear(hidden_dim, vocab_size)\n    \n    def forward(self, x):\n        embedded = self.embedding(x) \n        out = self.fc1(embedded)\n        out = self.fc2(out) \n        return out", "category": "Python"}, {"instruction": "Create a python script that connects to a database and outputs the average age of users.", "input": "", "output": "import pandas as pd \nimport sqlite3\n\n# Connect to database\nconn = sqlite3.connect(\"myDB.db\")\n\n# Read Data \ndf = pd.read_sql(\"SELECT age FROM Users\", conn)\n\n# Calculate average \navg_age = df.mean()\n\n# Output the average age of users \nprint(\"Average age of users: \", avg_age)", "category": "Python"}, {"instruction": "Create a GUI interface for a multiplayer card game using PyQt5.", "input": "", "output": "import sys \nimport PyQt5 \nfrom PyQt5.QtWidgets import QApplication, QWidget \n  \n  \nclass Game(QWidget): \n    def __init__(self): \n        super().__init__() \n        self.title = 'Multiplayer Card Game' \n        self.left = 400 \n        self.top = 400 \n        self.width = 300 \n        self.height = 100 \n        self.initUI()\n  \n    def initUI(self): \n        self.setWindowTitle(self.title) \n        self.setGeometry(self.left, self.top,  \n                         self.width, self.height)\n        self.show() \n  \napp = QApplication(sys.argv) \nscreen = Game() \nsys.exit(app.exec_())", "category": "Python"}, {"instruction": "Explain what a sorting algorithm is and describe one.", "input": "", "output": "A sorting algorithm is an algorithm that is used to rearrange a sequence of items so that they are in a certain order. One example of a sorting algorithm is the bubble sort. The bubble sort works by comparing two adjacent elements in the list, and swapping them if they are out of order. This process is then repeated until the list is sorted.", "category": "Python"}, {"instruction": "In Python, write a function that takes two integers a, b and returns a*b.", "input": "", "output": "def multiply(a, b):\n  return a * b", "category": "Python"}, {"instruction": "Using pandas, create a dataframe with two columns and five rows.", "input": "", "output": "import pandas as pd\n\ndf = pd.DataFrame(\n    [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]], \n    columns=['a', 'b']\n    )", "category": "Python"}, {"instruction": "Convert the following SQL query into a Python pandas DataFrame.", "input": "SELECT product.name, store.location, store.country\nFROM product\nINNER JOIN store\nON product.store_id = store.store_id", "output": "import pandas as pd\n\ndf = pd.read_sql_query(\n'SELECT product.name, store.location, store.country'\n'FROM product'\n'INNER JOIN store'\n'ON product.store_id = store.store_id',\nconn\n )", "category": "Python"}, {"instruction": "Generate a Hash Table in Python with given length and values.", "input": "size = 10\nvalues = [20, 12, 45, 89, 78, 90]", "output": "hash_table = [None]*size\n\nfor value in values:\n    hash_value = value % size\n    hash_table[hash_value] = value\n \nprint(hash_table)", "category": "Python"}, {"instruction": "Name an advantage of using linked list over an array.", "input": "", "output": "One advantage of a linked list over an array is that it does not require the memory for storing all the elements to be allocated at once. Linked lists allow memory to be allocated as needed and can be easily expanded as new records are added. Also, linked list can easily insert and remove elements at any position in the list. Additionally, they can easily be manipulated or sorted in the same order in which they are stored. Finally, linked lists can store data items of different sizes while arrays require all elements to be the same size.", "category": "Python"}, {"instruction": "How would you reverse a string in Python?", "input": "", "output": "my_string = \"Hello World!\"\nmy_string = my_string[::-1]  # slice the string from start to finish in reverse order", "category": "Python"}, {"instruction": "Write a function to print the permutations of a given string.", "input": "", "output": "def print_permutations(string):\n    if len(string) == 1:\n        print(string)\n    else:\n        for permutation in (print_permutations(string[1:])):\n            for i in range(len(string)):\n                print(permutation[:i] + string[0] + permutation[i:])\n\nprint_permutations(\"abc\")", "category": "Python"}, {"instruction": "Using Python, create a function to return the number of days in a particular month.", "input": "September", "output": "def days_in_month(month):\n if month == 'January' or month == 'March' or month == 'May' or month == 'July' or month == 'August' or month == 'October' or month == 'December':\n  return 31\n elif month == 'February':\n  return 28\n else:\n  return 30\n  \n# Output\ndays_in_month('September') \n# Output \n30", "category": "Python"}, {"instruction": "Create a Python program to calculate prime numbers between 0 to 50.", "input": "", "output": "# Program to calculate prime numbers between 0 to 50\n\n# list of prime numbers\nprime_list = []\nfor num in range(0,51):  \n   # prime numbers are greater than 1  \n   if num > 1:  \n       for i in range(2, num):  \n           if (num % i) == 0:  \n               break  \n       else:  \n           prime_list.append(num)\n\nprint(prime_list)", "category": "Python"}, {"instruction": "Print all the permutations of a given list", "input": "[1, 2, 3]", "output": "def permute(lis):\n    if len(lis) == 0:\n        return [] \n    if len(lis) == 1:\n        return [lis] \n  \n    l = [] \n    for i in range(len(lis)):\n        m = lis[i] \n  \n        remLis = lis[:i] + lis[i+1:] \n  \n        for p in permute(remLis): \n            l.append([m] + p) \n    return l \n\nlist1 = [1, 2, 3]\nresult = permute(list1) \nfor i in result: \n    print(i)", "category": "Python"}, {"instruction": "Create a Python script to fetch the weather data of a given city", "input": "Bangalore", "output": "import requests\n\ncity = \"Bangalore\"\nurl = f\"http://api.openweathermap.org/data/2.5/weather?q={city}&appid=your_api_key\"\n\n# Fetching the JSON data\nresponse = requests.get(url)\ndata = response.json()\n \n# Get the main weather data\nweather_data = data[\"main\"]\n \n# Obtain the current temperature \ntemp = weather_data[\"temp\"]\n \nprint(f\"The current temperature in {city} is {temp} degrees Celsius.\")", "category": "Python"}, {"instruction": "Write Python code to print the most frequent characters in a given string.", "input": "String: I love apples", "output": "def most_frequent_char(s):\n    count = [0] * 256\n    max_count = 0\n    max_id = 0\n    for i in range(len(s)):\n        count[ord(s[i])] += 1\n        if count[ord(s[i])] > max_count:\n            max_count = count[ord(s[i])]\n            max_id = i\n    \n    return s[max_id]", "category": "Python"}, {"instruction": "Given a binary tree, print out a post-order traversal of its nodes.", "input": "", "output": "def postorder_traverse(root):\n\n  if root == null:\n    return\n\n  postorder_traverse(root.left)\n  postorder_traverse(root.right)\n  print(root.value)", "category": "Python"}, {"instruction": "Create a function which takes an array of strings as an argument and return the longest string.", "input": "array =['cake', 'apple', 'orange']", "output": "def largest_string(array):\n   largest_string=array[0]\n   for i in array:\n      if len(i) > len(largest_string):\n         largest_string = i\n   return largest_string", "category": "Python"}, {"instruction": "Write a Python script to remove duplicates from the list.", "input": "my_list = [1,2,4,4,1,2]", "output": "def remove_duplicates(my_list): \n    new_list = [] \n    for item in my_list: \n        if item not in new_list: \n            new_list.append(item) \n    return new_list", "category": "Python"}, {"instruction": "How to remove all special characters from a string?", "input": "string=\"It@#$%^&*( ) is a;?.incredible# time\"", "output": "def remove_special_characters(string):\n    new_string = \"\"\n    for char in string:\n        if char.isalpha() or char.isdigit() or char==\" \":\n            new_string += char\n    return new_string", "category": "Python"}, {"instruction": "Create an algorithm that will search for a key-value pair in an object.", "input": "searchKey='c'\nobject= {\n    \"a\": 1,\n    \"b\": 2,\n    \"c\": 3,\n    \"d\": 4,\n    \"e\": 5\n}", "output": "def search(searchKey, object):\n    if searchKey in object:\n        return object[searchKey]\n    else:\n        return -1", "category": "Python"}, {"instruction": "Create a function that returns a list of Prime numbers between 0-50.", "input": "", "output": "def prime_numbers():\n    primes=[]\n    for i in range (1,51):\n        count=0\n        for j in range (2,i):\n            if i%j==0:\n                count+=1\n        if count==0:\n            primes.append(i)\n    return primes", "category": "Python"}, {"instruction": "How to sort a list of tuples in Python?", "input": "", "output": "You can sort a list of tuples in Python by using the sorted() function. For example:\n\ntuple_list = [('John', 18), ('Jane', 20), ('Bob', 16)]\n\nsorted_list = sorted(tuple_list, key=lambda tup: tup[1])\n\nprint(sorted_list)\n\n# Output: [('Bob', 16), ('John', 18), ('Jane', 20)]", "category": "Python"}, {"instruction": "How to check if a string contains a specific character in Python?", "input": "", "output": "You can check if a string contains a specific character in Python by using the in operator. For example:\n\nmy_string = \"Hello World!\"\n\nif 'W' in my_string:\n    print(\"The string contains the character W\")", "category": "Python"}, {"instruction": "How would you implement a simple object oriented Programming concept in Python?", "input": "", "output": "In Python, object-oriented programming is supported by classes which contain attributes that represent the characteristics of an object, and methods which represent the actions that an object can take. To implement a simple object-oriented concept in Python, we would first define a class that represents the type of object we wish to create. This class will contain attributes (i.e. data fields) that define the state of the object, as well as methods that define the behaviors of the object. Finally, we can create objects using the class definition, providing an initial state and access to the methods.", "category": "Python"}, {"instruction": "Write a code to output a substring of the given string", "input": "String: Hello World\nStart: 3\nEnd: 5", "output": "\"\"\"\nWrite a code to output a substring of the given string\n\"\"\"\n\ndef substring(inp_str, start, end):\n    return inp_str[start:end]\n\nif __name__ == '__main__':\n    inp_str = \"Hello World\" \n    start = 3\n    end = 5\n    print(substring(inp_str, start, end))", "category": "Python"}, {"instruction": "Create an in-place version of selection sort in Python.", "input": "arr = [5, 2, 4, 6, 8, 1]", "output": "def selection_sort(arr): \n\n    # Traverse through all array elements \n    for i in range(len(arr)): \n  \n        # Find the minimum element in remaining unsorted array \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n                \n        # Swap the found minimum element with the first element         \n        arr[i], arr[min_idx] = arr[min_idx], arr[i]", "category": "Python"}, {"instruction": "Create a Python class for Animal", "input": "", "output": "class Animal:\n    def __init__(self, name, type):\n        self.name = name\n        self.type = type", "category": "Python"}, {"instruction": "Implement a neural network that classifies an MNIST digit into one of the 10 classes.", "input": "", "output": "import tensorflow as tf\n# Load the mnist data set\nmnist = tf.keras.datasets.mnist\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n# Normalize the input from 0-255 to 0-1\nx_train = tf.keras.utils.normalize(x_train, axis=1)\nx_test = tf.keras.utils.normalize(x_test, axis=1)\n# Build the model \nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Flatten())\n# Add two hidden layers\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))\n# Add the output layer\nmodel.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n# Train the model\nmodel.fit(x_train, y_train, epochs=3)\n# Evaluate the accuracy\nval_loss, val_acc = model.evaluate(x_test, y_test)\nprint(val_loss, val_acc)", "category": "Python"}, {"instruction": "Modify the Python code below to solve the following error: \"TypeError: 'str' object is not callable\".", "input": "\"\"\"\ndef greet(name):\n    print('Hello', name())\ngreet('John')\n\"\"\"", "output": "def greet(name):\n    print('Hello', name)\ngreet('John')", "category": "Python"}, {"instruction": "Create a recursive function in Python which returns the sum of the elements in a given list.", "input": "", "output": "def recursive_sum(arr):\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + recursive_sum(arr[1:])", "category": "Python"}, {"instruction": "Debug the given Python code and make sure that it runs without errors.", "input": "def add_two_numbers(a, b):\n  return a b", "output": "def add_two_numbers(a, b):\n  return a + b", "category": "Python"}, {"instruction": "Create a Python script that calculates the sum of two given numbers.", "input": "", "output": "def sum(x, y):\n  return x + y;", "category": "Python"}, {"instruction": "Create an algorithm in pseudocode to find the maximum value in an array.", "input": "", "output": "max = 0\n\nfor each element in array\n  if element > max \n    max = element\n\nreturn max", "category": "Python"}, {"instruction": "Create a function to capitalize the first letter in each word of the given string.", "input": "my_string = 'this is a test'", "output": "def capitalize_words(string):\n  words = string.split(' ')\n  capitalized_words = []\n  for word in words:\n    capitalized_word = word[0].upper() + word[1:]\n    capitalized_words.append(capitalized_word)\n  return ' '.join(capitalized_words)", "category": "Python"}, {"instruction": "Tell the difference between the two provided pieces of code.", "input": "def recursive(num):\n if num<=0:\n return 0\n else:\n return num + recursive(num-1)\n\ndef iterative(num):\n result = 0\n for i in range(1, num+1):\n result += i\n return result", "output": "The recursive code uses a recursive call to loop through each value from num to 0, while the iterative code uses a for-loop to add up from 1 to num.", "category": "Python"}, {"instruction": "Implement a sorting algorithm for the given list of numbers.", "input": "sort_me = [10, 4, 1, 5]", "output": "def sorting_algorithm(sort_me):\n    len_sortme = len(sort_me)\n    for i in range(len_sortme):\n        for j in range(0, len_sortme-i-1):\n            if sort_me[j] > sort_me[j+1]:\n                sort_me[j], sort_me[j+1] = sort_me[j+1], sort_me[j]\n    return sort_me", "category": "Python"}, {"instruction": "Develop a function that takes a dictionary and returns a list", "input": "{\"Name\": \"John\", \"Age\": 45}", "output": "def dict_to_list(d):\n    lst = []\n    for k, v in d.items():\n        lst.append((k, v))\n    return lst", "category": "Python"}, {"instruction": "Design a efficient algorithm to check if two tree structures are identical at the root node level.", "input": "", "output": "\"\"\"\nDesign a efficient algorithm to check if two tree structures are identical at the root node level.\n\nInput: Two root nodes (Node1, Node2)\n\nOutput: Boolean\n\n\"\"\"\n# This approach uses a breadth-first search\ndef is_identical(root1, root2):\n    if root1 is None and root2 is None:\n        return True\n    \n    # Check if the data of both nodes is the same\n    if root1 is not None and root2 is not None:\n        if root1.data != root2.data:\n            return False\n  \n        # If yes, then recursively traverse left and right sub-trees\n        return (is_identical(root1.left, root2.left) \n                and is_identical(root1.right, root2.right)) \n    \n    # If we reach here, then one node is NULL and other is not\n    return False", "category": "Python"}, {"instruction": "Determine the index of an element in a given array using binary search.", "input": "arr = [1, 2, 3, 4, 5, 6, 7]\nelement = 4", "output": "\"\"\"\nDetermine the index of an element in a given array using binary search.\n\nInput: arr (list)  element (int)\n\nOutput: index (int)\n\n\"\"\"\ndef binary_search(arr, element):\n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if element < arr[mid]:\n            end = mid - 1\n        elif element > arr[mid]:\n            start = mid + 1\n        else:\n            return mid\n    \n    return -1\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    element = 4\n    print(binary_search(arr, element)) \n    # Output: 3", "category": "Python"}, {"instruction": "Given the following code, write a function to calculate the length of the linked list.", "input": "\"\"\"\nclass Node:\n  def __init__(self, val, next=None):\n    self.val = val\n    self.next = next\n\nhead = Node(4, Node(3, Node(2, Node(1))))\n\"\"\"", "output": "\"\"\"\nGiven the following code, write a function to calculate the length of the linked list.\n\nInput: Head of the linked list (Node)\n\nOutput: Length of the linked list (int)\n\n\"\"\"\ndef get_length(head):\n    if head is None:\n        return 0\n    \n    length = 1\n    node = head\n    \n    while node.next is not None:\n        length += 1\n        node = node.next\n    \n    return length\n\nif __name__ == '__main__':\n    head = Node(4, Node(3, Node(2, Node(1))))\n    print(get_length(head)) \n    # Output: 4", "category": "Python"}, {"instruction": "Generate a random 16 character string.", "input": "", "output": "import random\nimport string\n\ndef generate_string():\n    chars = string.ascii_letters + string.digits \n    return ''.join(random.choice(chars) for _ in range(16))\n\nif __name__ == '__main__':\n    print(generate_string()) \n    # Output: 5A5l7p9XohHmFWhh", "category": "Python"}, {"instruction": "Design a function that counts the number of times a word occurs in a sentence.", "input": "sentence = \"The quick brown fox jumped over the lazy dog.\"", "output": "\"\"\"\nDesign a function that counts the number of times a word occurs in a sentence.\n\nInput: sentence (string)\n\nOutput: number of times word appears in the sentence (int)\n\n\"\"\"\ndef count_word(sentence, word):\n    return sentence.lower().split().count(word.lower())\n\nif __name__ == '__main__':\n    sentence = \"The quick brown fox jumped over the lazy dog.\"\n    print(count_word(sentence, \"The\"))\n    # Output: 1", "category": "Python"}, {"instruction": "How can you create a class in python?", "input": "", "output": "A class can be created in Python by using the keyword class followed by the name of the class. The class should include a constructor method __init__() that specifies the attributes and behaviors of the class and it should also end with a colon. Inside the class body, methods and attributes can be defined as required.", "category": "Python"}, {"instruction": "You are given a list of numbers, write a program to calculate the mode.", "input": "[1, 2, 3, 3, 4, 4, 5]", "output": "from collections import Counter\n\ndef find_mode(lst):\n    counter = Counter(lst)\n    mode_vals = [val for val, count in counter.items() if count == max(counter.values())]\n    return min(mode_vals)\n\nprint(find_mode([1, 2, 3, 3, 4, 4, 5]))", "category": "Python"}, {"instruction": "What is the use of tuple in python?", "input": "", "output": "Tuple is an immutable collection of objects in Python. It is sequence of values which are immutable, meaning that the values can't be modified. Tuple is useful in data integrity because it ensures that the values in the tuple will remain consistent when passed to a function or used in an expression. It is also used to store related data that must not be changed throughout a program. Some common operations on tuple include indexing, iteration, membership testing. Tuples are also useful in multiple function argument packing and unpacking. Tuples are also commonly used in dictionary as keys.", "category": "Python"}, {"instruction": "Write a Python function to input a number and print if it is positive, negative, or zero", "input": "", "output": "def check_sign(num):\n  if num > 0:\n    print(\"Positive\")\n  elif num < 0:\n    print(\"Negative\")\n  else:\n    print(\"Zero\")", "category": "Python"}, {"instruction": "Compare functions and classes in Python.", "input": "", "output": "Functions in Python are blocks of reusable code that are used to perform a single, specific action. Classes, on the other hand, are a way of grouping related data and functions together. Classes allow objects to be grouped and given common properties and behaviors.", "category": "Python"}, {"instruction": "Explain the uses of the `in` operator in Python.", "input": "", "output": "The in operator in Python is used to determine whether an item is present in a sequence. It checks for the presence of an item in lists, sets, tuples, dictionaries, and strings. It is also used to iterate over the items of a sequence in a for loop.", "category": "Python"}, {"instruction": "Create an algorithm to compute the sum of the digits of a given positive integer.", "input": "", "output": "\"\"\"\nCreate an algorithm to compute the sum of the digits of a given positive integer.\n\nInput: number (int)\n\nOutput: sum of the digits of the number (int)\n\n\"\"\"\ndef compute_sum(number):\n    if number < 0:\n        return 0\n    \n    # get the last digit\n    last_digit = number % 10\n    \n    # recursive call to get the sum of the remaining digits\n    remainder_sum = compute_sum(number // 10)\n    \n    return last_digit + remainder_sum\n\nif __name__ == '__main__':\n    number = 9876\n    print(compute_sum(number)) \n    # Output: 36", "category": "Python"}, {"instruction": "Generate a Python program that creates a list of numbers from 1 to 10.", "input": "", "output": "# Create a list of numbers from 1 to 10\nnumbers = list(range(1, 11))\nprint(numbers)", "category": "Python"}, {"instruction": "Write a function to sort a list of numbers using merge sort.", "input": "myList = [4, 8, 2, 3, 1]", "output": "def mergeSort(myList): \n    if len(myList) >1: \n        mid = len(myList)//2 #Finding the mid of the array \n        L = myList[:mid] # Dividing the array elements  \n        R = myList[mid:] # into 2 halves \n  \n        mergeSort(L) # Sorting the first half \n        mergeSort(R) # Sorting the second half \n  \n        i = j = k = 0\n          \n        # Copy data to temp arrays L[] and R[] \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                myList[k] = L[i] \n                i+= 1\n            else: \n                myList[k] = R[j] \n                j+= 1\n            k+= 1\n          \n        # Checking if any element was left \n        while i < len(L): \n            myList[k] = L[i] \n            i+= 1\n            k+= 1\n          \n        while j < len(R): \n            myList[k] = R[j] \n            j+= 1\n            k+= 1", "category": "Python"}, {"instruction": "Generate a random word from a given list of words", "input": "words = ['apple', 'banana', 'grape', 'orange']", "output": "import random\n\ndef get_random_word(words):\n    return random.choice(words)\n\nif __name__ == '__main__':\n    print(get_random_word(words))", "category": "Python"}, {"instruction": "Combine the following two lists into a dictionary in Python.", "input": "list1 = [\"a\", \"b\", \"c\"]\nlist2 = [1, 2, 3]", "output": "dict1 = {\n    \"a\": 1,\n    \"b\": 2,\n    \"c\": 3\n}", "category": "Python"}, {"instruction": "Create a recursive Python function to generate the Fibonacci series up to n-th terms.", "input": "", "output": "\"\"\"\nCreate a recursive Python function to generate the Fibonacci series up to n-th terms.\n\"\"\"\n\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nif __name__ == '__main__':\n    print(fibonacci(5))  # 5", "category": "Python"}, {"instruction": "Create a function that takes two numbers and returns their greatest common divisor in Python.", "input": "", "output": "\"\"\"\nCreate a function that takes two numbers and returns their greatest common divisor in Python.\n\"\"\"\n\ndef greatest_common_divisor(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a - b, b)\n    return greatest_common_divisor(a, b - a)\n\nif __name__ == '__main__':\n    print(greatest_common_divisor(20, 25))  # 5", "category": "Python"}, {"instruction": "Write an if-else condition to check for vowel or consonants in a character in Python.", "input": "", "output": "\"\"\"\nWrite an if-else condition to check for vowel or consonants in a character in Python.\n\"\"\"\n\ndef is_vowel_or_consonant(letter):\n    vowels = \"aeiouAEIOU\"\n    if letter in vowels:\n        return \"Vowel\"\n    else:\n        return \"Consonant\"\n\nif __name__ == '__main__':\n    print(is_vowel_or_consonant(\"a\"))  # Vowel", "category": "Python"}, {"instruction": "Write a Python program to select all rows from a table named 'products' that have a price less than 10", "input": "", "output": "SELECT * FROM products WHERE price < 10;", "category": "Python"}, {"instruction": "Write an algorithm to find the maximum depth of nested dictionary", "input": "dict = {\u2018a\u2019:{\u2018b\u2019:{\u2018c\u2019:1}}, \u2018d\u2019:2}", "output": "def findMaxDepth(dict_):\n   max_depth = 1\n   for val in dict_.values():\n      if isinstance(val, dict):\n         max_depth = max(max_depth, 1 + findMaxDepth(val))\n   return max_depth\n\nfindMaxDepth(dict) // 3", "category": "Python"}, {"instruction": "Convert a number in base 10 to binary", "input": "num = 5", "output": "def base10_to_binary(num):\n    binary_num = ''\n    while num > 0:\n        remainder = num % 2\n        binary_num = str(remainder) + binary_num\n        num = num // 2\n    return binary_num\n\nbase10_to_binary(5)  # '101'", "category": "Python"}, {"instruction": "Design an algorithm to search for the longest string in a list.", "input": "list = [\"apples\", \"bananas\", \"kiwis\"]", "output": "def find_longest_string(list):\n    # Set initial max_length to the length of the first item in list\n    max_length = len(list[0])\n    # Set initial max_string to the first string in the list\n    max_string = list[0]\n    # Loop through remaining strings in the list\n    for i in range(1, len(list)):\n        current_string = list[i]\n        current_length = len(current_string)\n        if current_length > max_length:\n            max_length = current_length\n            max_string = current_string\n    return max_string", "category": "Python"}, {"instruction": "Build an algorithm to compare two strings and report whether they are identical or not.", "input": "string1 = \"hello\";\nstring2 = \"world\";", "output": "function compareStrings(string1, string2) {\n    if (string1 === string2) {\n        return \"the strings are identical\"\n    } else {\n        return \"the strings are not identical\"\n    }\n}", "category": "Python"}, {"instruction": "Find all vowels in a sentence using Python.", "input": "sentence = \"This is a sample sentence.\"", "output": "vowels = []\nfor c in sentence:\n    if c in ('a', 'e', 'i', 'o', 'u'):\n        vowels.append(c)\n\nprint(vowels)", "category": "Python"}, {"instruction": "What is the correct code for looping through a list of elements in Python?", "input": "", "output": "for element in list:\n    print(element)", "category": "Python"}, {"instruction": "Develop a program to find all pairs in a list that sum up to a given number", "input": "[1, 2, 4, 5, 6, 7], 8", "output": "def pair_sum(arr, k): \n  \n    # Seen pairs \n    pairs = set() \n  \n    # Iterate through the array \n    for i in range(0, len(arr)): \n  \n        # Calculate the complement value \n        complement = k - arr[i] \n  \n        # Check if the complement exists in the array \n        if complement in arr[i + 1:]: \n  \n            # Add the pair to the seen pairs set \n            pairs.add((arr[i], complement)) \n  \n    return pairs \n\n# Driver code \narr = [1, 2, 4, 5, 6, 7] \nk = 8\n\npair_sums = pair_sum(arr, k) \nprint(pair_sums)", "category": "Python"}, {"instruction": "Develop an algorithm to find the maximum number of overlapping intervals.", "input": "[[2, 3], [1, 5], [7, 10]]", "output": "def maxOverlaps(intervals): \n    if len(intervals) == 0: \n        return 0\n  \n    # Sort intervals according to their starting time \n    intervals.sort(key = lambda x: x[0])\n  \n    # Creating an array that stores the number of \n    # overlapping intervals for each interval \n    result = [0] * len(intervals) \n  \n    # Initialising result[0] (as the first interval is always \n    # non-overlapping as it has no previous intervals) \n    result[0] = 1\n  \n    # Initializing the endpoint variable for comparison \n    endpoint = intervals[0][1] \n  \n    for i in range(1, len(intervals)): \n        # If the current interval's start time is less \n        # than or equal to the endpoint, it's overlapping \n        if intervals[i][0] <= endpoint: \n            # Store the maximum number of overlapping \n            # intervals \n            result[i] = result[i - 1] + 1\n        else: \n            result[i] = 1\n          \n        # Update the endpoint \n        endpoint = max(endpoint, intervals[i][1]) \n  \n    # Finding the maximum number of overlapping intervals \n    maximum_overlaps = max(result) \n  \n    return maximum_overlaps", "category": "Python"}, {"instruction": "Print all the odd numbers between a given range in Python.", "input": "start = 5 \nend = 20", "output": "start = 5\nend = 20\n\nfor num in range(start, end+1): \n    if num % 2 != 0: \n        print(num, end = ' ')\n\n# Outputs 5 7 9 11 13 15 17 19", "category": "Python"}, {"instruction": "Write a validation code to verify if a given string is an integer.", "input": "", "output": "def is_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False", "category": "Python"}, {"instruction": "Sort the given list of integers in descending order using the Bubble sort technique.", "input": "[3, 5, 2, 8, 9, 1]", "output": "def bubble_sort_descending(nums):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] < nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n\na = [3, 5, 2, 8, 9, 1]\na = bubble_sort_descending(a)\nprint(a) # prints [9, 8, 5, 3, 2, 1]", "category": "Python"}, {"instruction": "Create an iterator in Python that yields only even numbers.", "input": "", "output": "def even_numbers():\n    i = 0\n    while True:\n        if i % 2 == 0:\n            yield i\n        i += 1", "category": "Python"}, {"instruction": "Suggest a code snippet to shuffle a list of numbers.", "input": "[1, 2, 3, 4, 5]", "output": "import random\n\nnumbers = [1, 2, 3, 4, 5]\nrandom.shuffle(numbers)\nprint(numbers)", "category": "Python"}, {"instruction": "Create a Python function to generate all prime numbers less than a given number.", "input": "", "output": "def generate_prime_numbers(n): \n    primes = [] \n    for num in range(2, n + 1): \n        is_prime = True\n        for i in range(2, num): \n            if (num % i == 0): \n                is_prime = False\n        if is_prime: \n            primes.append(num) \n    return primes", "category": "Python"}, {"instruction": "Change the given Python script to not assign any variables", "input": "x = 10\ny = \"Some Text\"", "output": "# no variables are assigned", "category": "Python"}, {"instruction": "Unpack a given list of tuples", "input": "tuples = [('John', 23), ('Adam', 45)]", "output": "def unpack_tuples(tuples):\n    names, ages = zip(*tuples)\n    return list(names), list(ages)\n\nif __name__ == '__main__':\n    names, ages = unpack_tuples(tuples)\n    print(names)\n    print(ages)", "category": "Python"}, {"instruction": "Print the letter frequency of a given string", "input": "string = \"Hello World\"", "output": "from collections import Counter\n\ndef get_letter_frequency(string):\n    counter = Counter(string)\n    for key, value in counter.items():\n        print(f'{key}: {value}')\n\nif __name__ == '__main__':\n    get_letter_frequency(string)", "category": "Python"}, {"instruction": "Design a class for representing a triangle with its 3 sides", "input": "", "output": "class Triangle:\n    def __init__(self, side1, side2, side3):\n        self.side1 = side1\n        self.side2 = side2\n        self.side3 = side3\n\n    def area(self):\n        semi = (self.side1 + self.side2 + self.side3) / 2.0\n        return (semi*(semi-self.side1)*(semi-self.side2)*(semi-self.side3)) ** 0.5", "category": "Python"}, {"instruction": "Where does a Python interpreter look for modules?", "input": "", "output": "The Python interpreter looks for modules in the following locations: the home directory, the built-in modules, the PYTHONPATH environment variable, and the standard Python library path.", "category": "Python"}, {"instruction": "Make a program to find the sum of each row in a two-dimensional array.", "input": "[[1,2,3], [2,3,4]]", "output": "def row_sum(arr):\n    total_sum = 0\n    for row in arr:\n        total_sum += sum(row)\n    return total_sum", "category": "Python"}, {"instruction": "Modify the following Python code to make it run faster", "input": "def roll_dice(n):\n    values = []\n    for i in range(n):\n        values.append(random.randint(1,6))\n    return values", "output": "import random\n    \ndef roll_dice(n):\n    values = []\n    random.seed() \n    for i in range(n):\n        values.append(random.randint(1,6))\n    return values", "category": "Python"}, {"instruction": "Create a function that takes two arrays and returns the elements that are present in both of them.", "input": "Input array 1: [1, 2, 3, 4, 5]\nInput array 2: [3, 4, 5, 6, 7]", "output": "def find_common_elements(arr1, arr2):\n    common_elements = []\n    for element1 in arr1:\n        if element1 in arr2:\n            common_elements.append(element1)\n    return common_elements\n\nprint(find_common_elements([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]))\n\n# Output: [3, 4, 5]", "category": "Python"}, {"instruction": "Write a method to take two strings as the inputs and check if the second string is a substring of the first one or not.", "input": "String1: hello world\nString2: world", "output": "def is_substring(string1, string2):\n    if string2 in string1: \n        return True\n    else:\n        return False\n\nstring1 = 'hello world'\nstring2 = 'world'\n\nis_substring(string1, string2) # will return True", "category": "Python"}, {"instruction": "What is a use case for inheritance in object-oriented programming?", "input": "", "output": "In object-oriented programming, inheritance is used to create and maintain a hierarchical relationship between classes. By inheriting properties and methods from a parent class, a child class can reuse and extend the functionalities of the parent class. This allows developers to write less code and keep their codebase organized by logically grouping similar classes into a hierarchy, which can then be further extended with new features.", "category": "Python"}, {"instruction": "Create a Python function that will take two lists as inputs, and return a list that contains all the common items between the lists.", "input": "list1 = [1,2, 3, 4, 5]\nlist2 = [2,4,6,8]", "output": "def common_elements(list1, list2):\n    return [item for item in list1 if item in list2] \n\nlist1 = [1,2, 3, 4, 5]\nlist2 = [2,4,6,8]\n\ncommon_items_list = common_elements(list1, list2)\nprint(common_items_list)", "category": "Python"}, {"instruction": "What is an example of a one-to-one mapping?", "input": "", "output": "An example of a one-to-one mapping is a function, which pairs each element in one set to a unique element in another set, such that each element in the first set is paired with exactly one element in the second set. For example, the following function is one-to-one: f(x) = x + 1. This function maps each number x to a unique number x + 1.", "category": "Python"}, {"instruction": "Write a code to print the words \"Hello world!\" n times if n is given as an input.", "input": "", "output": "def hello(n):\n    if n > 0:\n        for x in range(n):\n            print(\"Hello world!\")\n    else:\n        print(\"Input should be a number greater than 0\")\n\nhello(5)", "category": "Python"}, {"instruction": "Create a class in Python to represent a book with the title, author and year of publication as attributes.", "input": "", "output": "class Book:\n    def __init__(self, title, author, year):\n        self.title = title\n        self.author = author\n        self.year = year", "category": "Python"}, {"instruction": "Write a Python function to normalize a given list of numbers so that they sum up to 1.", "input": "arr = [2, 4, 6, 8]", "output": "def normalize(arr):\n    # calculate the sum of the given numbers\n    total = sum(arr)\n\n    # normalize each number in the array\n    normalized_arr = [number / total for number in arr]\n    \n    return normalized_arr\n\n# print the normalized array\nprint(normalize(arr)) # prints [0.1, 0.2, 0.3, 0.4]", "category": "Python"}, {"instruction": "Create an array of 100 elements filled with random numbers from 1 to 100.", "input": "", "output": "import random\n\n# Create an array of 100 elements with 0 values\nrandom_num_arr = [0] * 100\n\n# Fill each of the 100 elements with random numbers from 1 to 100\nfor i in range(100):\n    random_num_arr[i] = random.randint(1, 100)\n\nprint(random_num_arr)", "category": "Python"}, {"instruction": "Create a line chart from given data on the number of car sales in the UK from 2008 to 2019.", "input": "year = ['2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019']\nnumber_of_sales = [1.8, 2.1, 2.5, 2.6, 2.8, 3.0, 3.2, 3.5, 3.7, 3.8, 4.0, 4.2]", "output": "import matplotlib.pyplot as plt\n\n# Make a data frame from the given data\ndf = pd.DataFrame({'year': year, 'number_of_sales': number_of_sales})\n\n# Plot a line chart\nplt.plot(df['year'], df['number_of_sales'], linewidth=3)\nplt.title(\"Car Sales in the UK from 2008 to 2019\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"Number of sales\")\n\n# Show the plot\nplt.show()", "category": "Python"}, {"instruction": "What kind of sorting algorithm is Insertion Sort?", "input": "", "output": "Insertion sort is a comparison-based sorting algorithm in which the elements are compared and arranged in a particular order. In this algorithm, a sublist is created which is sorted and at each iteration it is compared with the elements of the original list and placed in the correct position. It is an in-place sorting algorithm, meaning it doesn\u2019t require any additional data structures for sorting.", "category": "Python"}, {"instruction": "Identify the largest element of an array with python.", "input": "[9, 4, 2, 8, 7]", "output": "def find_largest_num(a): \n  if len(a) == 0: \n    return\n  max = a[0] \n  for num in a: \n    if num > max: \n      max = num \n  return max", "category": "Python"}, {"instruction": "Create a Python class called Dog that contains the following attributes: breed, name, and age.", "input": "", "output": "class Dog:\n    def __init__(self, breed, name, age):\n        self.breed = breed\n        self.name = name\n        self.age = age", "category": "Python"}, {"instruction": "Given a sorted list of integers, write a Python function to search for a specific target element.", "input": "", "output": "def binary_search(list, target):\n low = 0\n high = len(list) - 1\n\n while low <= high:\n  mid = (low + high) // 2\n  if list[mid] < target:\n   low = mid + 1\n  elif list[mid] > target:\n   high = mid - 1\n  else:\n   return mid\n return False", "category": "Python"}, {"instruction": "Retrieve the public IP address of your machine using Python.", "input": "", "output": "import requests\n\ndef get_public_ip():\n response = requests.get('https://api.ipify.org')\n return response.text", "category": "Python"}, {"instruction": "Construct a for loop to print out numbers ranging from 1 to 10, skipping even numbers.", "input": "", "output": "for i in range(1,11):\n if i % 2 != 0:\n print(i)", "category": "Python"}, {"instruction": "Create a class in Python called 'Rectangle' to store the coordinates of a rectangle.", "input": "", "output": "class Rectangle: \n    def __init__(self, x1, y1, x2, y2): \n        self.x1 = x1\n        self.y1 = y1\n        self.x2 = x2\n        self.y2 = y2\n  \n    def get_coordinates(self): \n        return (self.x1, self.y1, self.x2, self.y2)", "category": "Python"}, {"instruction": "Construct a function to set up a dictionary with words and corresponding counts of occurrences of each word.", "input": "`<code>'hey hey hello hello hell oh hello',</code>`", "output": "\"\"\"\nConstruct a function to set up a dictionary with words and corresponding counts of occurrences of each word\n\"\"\"\ndef word_count(string):\n    word_dict = {}\n    for word in string.split():\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n\n    return word_dict\n\nif __name__ == '__main__':\n    print(word_count('hey hey hello hello hell oh hello'))", "category": "Python"}, {"instruction": "Construct a program to print the Pyramid pattern using asterisks.", "input": "", "output": "\"\"\"\nConstruct a program to print the Pyramid pattern using asterisks\n\"\"\"\nfor i in range(0, 5):\n    for j in range(0, i+1):\n        print(\"*\", end=\"\")\n    print()", "category": "Python"}, {"instruction": "Construct an algorithm to find the longest common prefix string amongst an array of strings.", "input": "`<code>['leet', 'leets', 'lee', 'leeston', 'leeve']</code>`", "output": "\"\"\"\nConstruct an algorithm to find the longest common prefix string amongst an array of strings\n\"\"\"\ndef longest_common_prefix(strs):\n    prefix = strs[0]\n    i = 0\n    while i < len(prefix):\n        for string in strs:\n            if i >= len(string) or string[i] != prefix[i]:\n                return prefix[0:i]\n        i += 1\n    return prefix\n\nif __name__ == '__main__':\n    print(longest_common_prefix(['leet', 'leets', 'lee', 'leeston', 'leeve']))", "category": "Python"}, {"instruction": "Create an algorithm to search for a substring in a given string.", "input": "`<code>'Hello World!', substring = 'll'</code>`", "output": "\"\"\"\nCreate an algorithm to search for a substring in a given string\n\"\"\"\ndef search(string, substring):\n    for i in range(len(string)):\n        if string[i: i + len(substring)] == substring:\n            return True\n    return False\n\nif __name__ == '__main__':\n    print(search('Hello World!', 'll'))", "category": "Python"}, {"instruction": "Construct a dialogue bot using natural language processing techniques.", "input": "`<code>Hello!</code>`", "output": "\"\"\"\nConstruct a dialogue bot using natural language processing techniques\n\"\"\"\nimport nltk\n\n# Define a simple set of rules to respond to the user's input\ndef respond(input):\n\tif input == \"hello\" or input == \"hi\":\n\t\treturn(\"Hello. How can I help you today?\")\n\telif input == \"goodbye\":\n\t\treturn(\"Goodbye! Have a nice day.\")\n\telse:\n\t\treturn(\"I'm sorry, I don't understand what you said.\")\n\n# Tokenize the input string and call the respond function\ndef chatbot(input_string):\n\ttokens = nltk.word_tokenize(input_string)\n\tresponse = respond(' '.join(tokens))\n\treturn response\n\nif __name__ == '__main__':\n\tprint(chatbot(\"Hello!\"))", "category": "Python"}, {"instruction": "Create a copy of the given code without using the copy.deepcopy()", "input": "import copy\n\nlist1 = [[1, 2], [3, 4]]\nlist2 = copy.deepcopy(list1)", "output": "list2 = []\nfor i in range(len(list1)):\n    list2.append(list1[i].copy())", "category": "Python"}, {"instruction": "Create a recursive function that returns the Fibonacci number corresponding to a given input.", "input": "", "output": "def Fibonacci(n): \n    if n <= 1: \n        return n \n    else: \n        return(Fibonacci(n-1) + Fibonacci(n-2)) \n  \n# Driver Code \nnterms = 10\n  \n# check if the number of terms is valid \nif nterms <= 0: \n    print(\"Plese enter a positive integer\") \nelse: \n    print(\"Fibonacci sequence:\") \n    for i in range(nterms): \n        print(Fibonacci(i))", "category": "Python"}, {"instruction": "Create a Python code snippet to create a line chart with three different categories.", "input": "category1 = [1,2,3,4]\ncategory2 = [4,5,6,7]\ncategory3 = [7,8,9,10]", "output": "import matplotlib.pyplot as plt\n\n# Data to plot\ncategory1 = [1,2,3,4]\ncategory2 = [4,5,6,7]\ncategory3 = [7,8,9,10]\n\n# Create the line plot\nplt.plot(category1, label='Category 1')\nplt.plot(category2, label='Category 2')\nplt.plot(category3, label='Category 3')\n\n# change font type and size\nplt.rc('font', size=16)\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()", "category": "Python"}, {"instruction": "Create a Python program to sort a dictionary by value.", "input": "my_dict = {\u201cOne\u201d:1, \u201cTwo\u201d:2, \u201cThree\u201d:3}", "output": "my_dict = {'One': 1, 'Two': 2, 'Three': 3}\n\n#sort dictionary by value\nsorted_dict = sorted(my_dict.items(), key=lambda kv: kv[1])\n\nprint(sorted_dict)", "category": "Python"}, {"instruction": "Debug this code snippet to print a list of all 6-digit numbers.", "input": "", "output": "def printList(): \n    i = 11\n    while(i <= 99999): \n        if (i >= 10000 and i <= 99999): \n            print(i) \n        i = i + 1\n\n# Call the function \nprintList()", "category": "Python"}, {"instruction": "Compute the occurrence of each character in a given string.", "input": "my_string = \"Hello World!\"", "output": "def compute_occurrences(my_string):\n    count_dict = {}\n    for c in my_string:\n        count_dict[c] = count_dict.get(c, 0) +1\n    return count_dict\n\n# test\nmy_string = \"Hello World!\"\nprint(compute_occurrences(my_string)) # {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}", "category": "Python"}, {"instruction": "Generate a linear regression model with a categorical independent variable.", "input": "", "output": "from sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import OneHotEncoder\n\nX = df[[\"categorical_var\"]]\ny = df[\"target\"]\n\nencoder = OneHotEncoder()\nencoded_X = encoder.fit_transform(X)\n\nmodel = LogisticRegression(solver=\"lbfgs\")\nmodel.fit(encoded_X, y)", "category": "Python"}, {"instruction": "Write a function in Python to select all the elements from a list whose index is a multiple of 3.", "input": "test_list = [2, 5, 8, 12, 9, 82, 3]", "output": "def select_multiples_of_3(input_list):\n    result = []\n    for index, num in enumerate(input_list):\n        if index % 3 == 0:\n            result.append(num)\n    return result\n\n# test\ntest_list = [2, 5, 8, 12, 9, 82, 3]\nprint(select_multiples_of_3(test_list)) # [2, 12, 3]", "category": "Python"}, {"instruction": "Create a Python code to reverse the given string.", "input": "", "output": "def reverse_string(string):\n return string[::-1]", "category": "Python"}, {"instruction": "Create a Python script to separate a given string into words and count the number of times the each word is used in the string.", "input": "", "output": "def count_words(string):\n counts = {}\n words = string.split()\n for word in words:\n if word in counts:\n counts[word] += 1\n else:\n counts[word] = 1\n return counts", "category": "Python"}, {"instruction": "Create a Python function to generate the first n prime numers.", "input": "", "output": "def generate_prime_numbers(n):\n prime_nums = []\n i = 2\n while len(prime_nums) < n:\n if is_prime(i):\n prime_nums.append(i)\n i += 1\n return prime_nums\n\ndef is_prime(n):\n if n <= 1:\n return False\n for i in range(2, int(n**0.5) + 1):\n if n % i == 0:\n return False\n return True", "category": "Python"}, {"instruction": "Write a Python function to compare two strings and return all the common elements.", "input": "s1='python'\ns2='programming'", "output": "def find_common_elements(s1, s2):\n res = []\n for i in s1:\n if i in s2:\n res.append(i)\n return res\n\nfind_common_elements(s1,s2)\n#Output: ['n']", "category": "Python"}, {"instruction": "Sort a given array using quicksort algorithm.", "input": "arr = [3, 2, 9, 10, 1]", "output": "def quicksort(arr):\n  if len(arr) <= 1:\n    return arr\n  \n  pivot = arr[len(arr) // 2]\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\nprint(quicksort(arr))", "category": "Python"}, {"instruction": "Given an integer array, output the largest sum of all the possible subarray sums, use Python for the solution.", "input": "Example array: [-2,1,-3,4,-1,2,1,-5,4]", "output": "def largest_sum(arr):\n    cur_sum = 0\n    max_sum = float(\"-inf\")\n    for i in range(len(arr)):\n        cur_sum = max(arr[i], cur_sum + arr[i])\n        max_sum = max(max_sum, cur_sum)\n    return max_sum", "category": "Python"}, {"instruction": "Now write a function to generate all the factorial numbers from 1 to n.", "input": "", "output": "def generate_factorials(n):\n    factorials = [1]\n    for num in range(1,n+1):\n        if num == 1:\n            factorials.append(1)\n        else:\n            factorials.append(factorials[-1]*num)\n    return factorials", "category": "Python"}, {"instruction": "Write a function that given a string of character, returns the number of vowels in it.", "input": "Example string: \"hello world\"", "output": "def count_vowels(s): \n    vowels = 'aeiou'\n    count = 0\n    for char in s: \n        if char in vowels: \n            count += 1\n    return count", "category": "Python"}, {"instruction": "Write a for loop to output all the odd numbers from 1 to 10 in Python.", "input": "", "output": "for i in range(1,11):\n   if (i % 2 != 0):\n       print(i)", "category": "Python"}, {"instruction": "Extract all values from the following dictionary:", "input": "{'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9] }", "output": "myDict = {'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]}\nvalues = [val for vals in myDict.values() for val in vals]\nprint(values)", "category": "Python"}, {"instruction": "Reorder a given array such that all even elements are placed before odd elements.", "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8]", "output": "def reorder_array(arr):\n    \"\"\"Reorders a given array such that all even elements are placed before odd elements.\"\"\"\n    even = [i for i in arr if i % 2 == 0]\n    odd = [j for j in arr if j % 2 != 0]\n\n    return even + odd\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    ordered = reorder_array(arr)\n    print(ordered)", "category": "Python"}, {"instruction": "How many unique elements are present in the given array?", "input": "arr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]", "output": "def count_unique_elements(arr):\n    \"\"\"Returns the number of unique elements present in the given array.\"\"\"\n    unique_elements = set(arr)\n    return len(unique_elements)\n\nif __name__ == '__main__':\n    arr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n    count = count_unique_elements(arr)\n    print('Number of unique elements:', count)", "category": "Python"}, {"instruction": "Create code to extract the middle character of a given string.", "input": "string = \"middle\"", "output": "def get_middle_char(string):\n    \"\"\"Returns the middle character of a given string.\"\"\"\n    middle_index = int(len(string) / 2)\n    return string[middle_index]\n\nif __name__ == '__main__':\n    string = \"middle\"\n    print(get_middle_char(string))", "category": "Python"}, {"instruction": "Are there any palindromes in the given sequence of numbers?", "input": "seq = [2332, 24124, 1221, 89898]", "output": "def has_palindrome(seq):\n    \"\"\"Returns True if the given sequence has a palindrome, otherwise returns False\"\"\"\n    for num in seq:\n        if str(num) == str(num)[::-1]:\n            return True\n    return False\n\nif __name__ == '__main__':\n    seq = [2332, 24124, 1221, 89898]\n    print(has_palindrome(seq))", "category": "Python"}, {"instruction": "Assume that we have an array of integers. Create code to input the array and output the sum of all the elements of the array.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def calculate_sum(arr):\n    \"\"\"Calculates sum of all elements in the given array\"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    print(calculate_sum(arr))", "category": "Python"}, {"instruction": "How can we convert strings to float in Python?", "input": "", "output": "We can convert strings to float in Python by using the float() function. This takes a string argument and returns a floating-point number. For example, float(\"10.5\") would return 10.5 as a float.", "category": "Python"}, {"instruction": "Create a variable in Python and assign it the value 15.", "input": "", "output": "num = 15", "category": "Python"}, {"instruction": "Write a Python code snippet to iterate over a list of strings and print the length of each string.", "input": "List: [\"Hello\", \"World\", \"!\"]", "output": "for string in list:\n    print(len(string))\n    \n# Output: 5, 5, 1", "category": "Python"}, {"instruction": "List 5 elements of the Python standard library.", "input": "", "output": "sys, os, logging, string, collections", "category": "Python"}, {"instruction": "Write a Python script to validate the following input", "input": "Validate a Date type field with the following format: YYYY/MM/DD", "output": "# Import the required datetime module\nimport datetime\n\ndef validate_date(date):\n    # Check if the date matches with the given format\n    try:\n       datetime.datetime.strptime(date, '%Y/%m/%d')\n       return True\n    except ValueError:\n        return False", "category": "Python"}, {"instruction": "write a piece of code to print out the first n Fibonacci numbers in Python.", "input": "n = 8", "output": "def Fibonacci(n): \n    fibList = [0, 1] \n    \n    if n <= 0: \n        print(\"Incorrect input\") \n    elif n == 1: \n        print(fibList[0]) \n    elif n == 2: \n        print(fibList) \n    else: \n        temp = fibList[0] + fibList[1] \n        while len(fibList) < n: \n            fibList.append(temp) \n            temp = fibList[len(fibList)-1] +   fibList[len(fibList)-2] \n      \n    return fibList \n  \n\nprint(Fibonacci(8))", "category": "Python"}, {"instruction": "Develop a python program to sort a list of strings alphabetically from a-z.", "input": "list1 = [\"cat\", \"apple\", \"banana\", \"dog\"]", "output": "def sort_alphabetically(list1):\n    list1.sort()\n    return list1\n\nprint(sort_alphabetically(list1))", "category": "Python"}, {"instruction": "code a Python script that converts temperatures in celsius to fahrenheit.", "input": "", "output": "def celsius_to_fahrenheit(celsius):\n    return (celsius * 9/5) + 32", "category": "Python"}, {"instruction": "Write a Python function to print out the squares of the numbers between 1 and 10.", "input": "", "output": "def print_squares():\n    for i in range(1, 11):\n        print(i**2)", "category": "Python"}, {"instruction": "Given a String and a list of words, write a Python program to determine if the String is a sequence of any of the words in the list.", "input": "string = \"thequickbrownfox\" \nwords_list = [\"the\", \"quick\", \"brown\", \"fox\"]", "output": "def is_valid_sequence(string, words_list):\n    str_index = 0\n    for word in words_list:\n        if len(string[str_index:]) < len(word):\n            return False\n        if string[str_index:str_index+len(word)] != word:\n            return False\n        str_index += len(word)\n    return True", "category": "Python"}, {"instruction": "Given a list of numbers, write a function to determine if the list is an arithmetic sequence.", "input": "nums = [2, 4, 6, 8, 10]", "output": "def is_arithmetic_sequence(nums):\n    difference = nums[1] - nums[0]\n\n    for i in range(len(nums)-1):\n        if nums[i+1] - nums[i] != difference:\n            return False\n    return True", "category": "Python"}, {"instruction": "Develop a machine learning system to detect fraud.", "input": "", "output": "The machine learning system should use supervised learning techniques to learn from labeled data. It should identify trends, anomalies and irregularities by leveraging statistical techniques such as clustering and classification, feature engineering, and outlier detection. The system should utilize data from sources such as transaction data, customer behavior data and external risk information sources such as IP addresses, device information and anomaly detection.", "category": "Python"}, {"instruction": "Generate a random 10 character alphanumeric string in Python.", "input": "", "output": "import random\nimport string\n\ndef generate_random_string():\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=10))", "category": "Python"}, {"instruction": "Create a Python class that accepts a name and an age to create a person instance.", "input": "", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def __str__(self):\n        return f'Name: {self.name}, Age: {self.age}'", "category": "Python"}, {"instruction": "Using a for loop, print all the odd numbers between 1 and 20 (inclusive).", "input": "", "output": "for i in range(1, 21):\n    if i % 2 != 0:\n        print(i)", "category": "Python"}, {"instruction": "Compare two Python objects to check if they have the same values.", "input": "obj1 = {'a':1,'b':2}\nobj2 = {'b':2, 'a':1}", "output": "def compareObjects(obj1, obj2):\n    '''\n    Checks if two Python objects have the same value\n    '''\n    if obj1 == obj2:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Implement a heuristic algorithm in Python to find an approximate solution to the traveling salesman problem.", "input": "", "output": "def traveling_salesman_heuristic(distance_matrix):\n    # Create a list of cities\n    num_cities = len(distance_matrix)\n    cities = range(num_cities)\n    \n    # Create a list of visited cities and an empty list for the route\n    visited = [False for _ in range(num_cities)]\n    route = []\n    \n    # Start from the first city\n    current_city = 0\n    visited[current_city] = True\n    route.append(current_city)\n \n    # Find the total distance of the route so far\n    total_distance = 0\n    \n    # Keep looping until all cities are visited\n    while False in visited:\n        # Find the nearest unvisited city\n        best_city = 0\n        best_distance = float('inf')\n        for i in range(1, num_cities):\n            if not visited[i] and distance_matrix[current_city][i] < best_distance:\n                best_city = i\n                best_distance = distance_matrix[current_city][i]\n                \n        # Mark the best city as visited\n        visited[best_city] = True\n        \n        # Add the best city to the route\n        route.append(best_city)\n        \n        # Accumulate the total distance\n        total_distance += best_distance\n        \n        # Change the current city to the best city\n        current_city = best_city\n        \n    # Add the distance from the last city to the first\n    total_distance += distance_matrix[route[-1]][route[0]]\n    \n    return route, total_distance", "category": "Python"}, {"instruction": "Given a list of numbers, write a program to check if there exists a triplet in the list whose sum is equal to the given number.", "input": "nums = [2, 7, 11, 15], target = 24", "output": "def triplet_sum(nums, target):\n for i in range(len(nums) - 2):\n  for j in range(i+1, len(nums) - 1):\n   for k in range(j+1, len(nums)):\n    if nums[i] + nums[j] + nums[k] == target:\n     return True\n return False\n \nprint(triplet_sum(nums, target))", "category": "Python"}, {"instruction": "Create a Python class for a thread-safe queue.", "input": "", "output": "import threading\n\nclass ThreadSafeQueue():\n    def __init__(self):\n        self.queue = []\n        self.lock = threading.Lock()\n\n    def push(self, item):\n        with self.lock:\n            self.queue.append(item)\n\n    def pop(self):\n        with self.lock:\n            item = self.queue.pop(0)\n        return item", "category": "Python"}, {"instruction": "Given a matrix, write a program to traverse it spirally.", "input": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def spiral_traverse(arr):\n res = []\n top_row, bottom_row = 0, len(arr) - 1\n left_col, right_col = 0, len(arr[0]) - 1\n \n while top_row <= bottom_row and left_col <= right_col:\n  for i in range(left_col, right_col + 1):\n   res.append(arr[top_row][i])\n  top_row += 1\n \n  for i in range(top_row, bottom_row + 1):\n   res.append(arr[i][right_col])\n  right_col -= 1\n \n  for i in range(right_col, left_col - 1, -1):\n   res.append(arr[bottom_row][i])\n  bottom_row -= 1\n \n  for i in range(bottom_row, top_row - 1, -1):\n   res.append(arr[i][left_col])\n  left_col += 1\n \n return res\n\nprint(spiral_traverse(matrix))", "category": "Python"}, {"instruction": "Create a Python function to generate a Fibonacci sequence of a given length.", "input": "", "output": "def generate_fibonacci(length): \n    result = [0, 1] \n    for i in range(2,length): \n        result.append(result[i-2] + result[i-1]) \n    return result", "category": "Python"}, {"instruction": "Write a pseudocode for the Depth-First Search algorithm", "input": "", "output": "// Define a function DFS(vertex):\nDFS(vertex):\n  // Mark the current node as Visited\n  Mark the current node as Visited\n  \n  // Loop through the adjacent nodes\n  for each adjacent node of vertex:\n    // If the adjacent node has not been visited\n    if the adjacent node has not been visited:\n      // Call DFS on the adjacent node\n      call DFS(adjacent node)\n\n// Call the DFS function on the root node\ncall DFS(root node)", "category": "Python"}, {"instruction": "Edit the given Python program to print the sum of two given numbers", "input": "firstNumber = 5\nsecondNumber = 10\n\nprint(\"The difference is: \", firstNumber - secondNumber)", "output": "firstNumber = 5\nsecondNumber = 10\n\nprint(\"The sum is: \", firstNumber + secondNumber)", "category": "Python"}, {"instruction": "Generate a valid Python expression that multiplies the given numbers.", "input": "3 and 4", "output": "3 * 4", "category": "Python"}, {"instruction": "Write an algorithm for sorting an array in ascending order using the Bubble Sort technique.", "input": "[3, 7, 4, 1, 9]", "output": "// Start loop\nfor i in range(length of array):\n\n  // Start inner loop\n  for j in range(i+1, length of array):\n\n    // Compare elements and swap if needed\n    if array[i] > array[j]:\n      temp = array[i]\n      array[i] = array[j]\n      array[j] = temp\n\n  // End inner loop\n\n// End loop\n\n// Result: array is now sorted in ascending order [1, 3, 4, 7, 9]", "category": "Python"}, {"instruction": "In Python, create a function that takes 2 integers and returns the maximum number.", "input": "", "output": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b", "category": "Python"}, {"instruction": "Create a single line program in Python to check if a number is divisible by 5.", "input": "", "output": "print(lambda x: x%5 == 0, \"is divisible by 5.\")", "category": "Python"}, {"instruction": "Write a Python program to print a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys.", "input": "", "output": "dct = {}\nfor i in range(1, 16):\n dct[i] = i**2\n\nprint(dct)", "category": "Python"}, {"instruction": "Given a matrix of m*n size, write a program to find the largest number in the matrix.", "input": "matrix = \n[[1, 2, 3], \n [4, 5, 6], \n [7, 8, 9]]", "output": "def largest_number_in_matrix(matrix): \n largest = -1\n for row in matrix: \n for ele in row: \n largest = max(largest, ele) \n return largest \n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]  \nprint(largest_number_in_matrix(matrix)) # 9", "category": "Python"}, {"instruction": "Write a function that takes a number x and multiplies it by itself n amount of times using recursion.", "input": "x = 4\nn = 3", "output": "def recursive_multiply(x, n):\n\t# Base case\n    if n == 0:\n        return 1\n    return x * recursive_multiply(x, n - 1)\n\n# Example\nx = 4\nn = 3\nprint(recursive_multiply(x, n))\n# Output: 64", "category": "Python"}, {"instruction": "Write a function to detect the smallest window in a string containing all characters of another string.", "input": "string1 = \"abcde\", string2 = \"ade\"", "output": "def smallest_window(str1, str2):\n min_str = \"\"\n min_size = float(\"inf\")\n \n for i in range(len(str1)):\n  for j in range(i+1, len(str1)):\n   curr_str = str1[i:j+1]\n   count = 0\n   for ch in str2:\n    if ch in curr_str:\n     count += 1\n   if len(curr_str) < min_size and count == len(str2):\n    min_str = curr_str\n    min_size = len(curr_str)\n return min_str\n \nprint(smallest_window(\"abcde\", \"ade\"))", "category": "Python"}, {"instruction": "Given a list of numbers, find the lowest and highest numbers in the list.", "input": "numbers = [5, 8, 2, 9, 4, 7]", "output": "def find_min_max(numbers):\n    lowest = numbers[0]\n    highest = numbers[0]\n    for num in numbers:\n        if num < lowest:\n            lowest = num\n        if num > highest:\n            highest = num\n    return (lowest, highest)", "category": "Python"}, {"instruction": "Write a function to find the median of 3 numbers.", "input": "", "output": "def median_of_three(x, y, z):\n    if x>= y:\n        if y>=z:\n            return y\n        elif x>=z:\n            return z\n        else:\n            return x\n    else:\n        if x>=z:\n            return x\n        elif y>=z:\n            return z\n        else:\n            return y", "category": "Python"}, {"instruction": "Given a 2D array, print out all the elements in a spiral order.", "input": "[\n    [1,  2,  3,  4,  5],\n    [6,  7,  8,  9,  10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n]", "output": "def print_in_spiral_order(arr):\n    row_start = 0\n    row_stop = len(arr) - 1\n    col_start = 0 \n    col_stop = len(arr[0]) - 1\n    while row_start <= row_stop and col_start <= col_stop:\n        for i in range(col_start, col_stop + 1):\n            print(arr[row_start][i], end=' ')\n        row_start += 1\n        for i in range(row_start, row_stop + 1):\n            print(arr[i][col_stop], end=' ')\n        col_stop -= 1\n        if row_start <= row_stop:\n            for i in range(col_stop, col_start - 1, -1):\n                print(arr[row_stop][i], end=' ')\n        row_stop -= 1\n        if col_start <= col_stop:\n            for i in range(row_stop, row_start - 1, -1):\n                print(arr[i][col_start], end=' ')\n        col_start += 1", "category": "Python"}, {"instruction": "Develop an algorithm in Python to reverse a given string.", "input": "string = \"Hello\"", "output": "def reverse(string):\n    str = \"\" \n    for i in string: \n        str = i + str \n    return str\n  \nstring = \"Hello\"\n\nprint(reverse(string))", "category": "Python"}, {"instruction": "Compute the GCD of two numbers in Python.", "input": "a = 10, b = 15", "output": "def gcd(a,b): \n    if(b==0): \n        return a \n    else: \n        return gcd(b,a%b) \na = 10\nb = 15\ngcd = gcd(a,b) \nprint(gcd)", "category": "Python"}, {"instruction": "Create a list comprehension in Python to extract all the even numbers from a given list.", "input": "list = [3,4,5,6,7,8]", "output": "evens_list = [num for num in list if num % 2 == 0]", "category": "Python"}, {"instruction": "How would you search for an element in an array using a linear search algorithm in Python?", "input": "", "output": "def linearSearch(arr, x): \n \n    for i in range(len(arr)): \n  \n        if arr[i] == x: \n            return i \n \n    return -1", "category": "Python"}, {"instruction": "How would you write a function in Python for generating a Fibonacci sequence?", "input": "", "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Create a fizz-buzz Python program to print numbers from 1 to 50 but for multiple of 3 print \u201cFizz\u201d and for the multiple of 5 print \u201cBuzz\u201d and for numbers which are multiple of both 3 and 5 print \u201cFizzBuzz\u201d.", "input": "", "output": "for num in range(1,51): \n    if num % 3 == 0 and num % 5 == 0: \n        print(\"FizzBuzz\") \n    elif num % 3 == 0: \n        print(\"Fizz\") \n    elif num % 5 == 0: \n        print(\"Buzz\") \n    else: \n        print(num)", "category": "Python"}, {"instruction": "Write a Python function to remove all elements from a set in another set", "input": "Set A = {1, 2, 3, 4} \nSet B = {2, 3}", "output": "def remove_from_set(A, B):\n  for element in B:\n    A.discard(element)\n  return A\n\nA = {1, 2, 3, 4} \nB = {2, 3}\n\nprint(remove_from_set(A,B)) \n# Output: {1, 4}", "category": "Python"}, {"instruction": "Explain the purpose of stack in programming.", "input": "", "output": "The stack is a data structure which stores data in a Last In First Out (LIFO) manner. It is used in programming for various operations such as function calls, expression evaluation, storing local variables, and peripheral operations such as undo or redo. The stack is an area of memory in which programs temporarily store data as they execute.", "category": "Python"}, {"instruction": "Create a Fibonacci series of n numbers.", "input": "n = 5", "output": "def fibonacci_sequence(n):\n    a, b = 0, 1\n    fib_series = [a]\n    while b < n:\n        fib_series.append(b)\n        a, b = b, a+b\n    return fib_series\n\nprint(fibonacci_sequence(n)) #[0, 1, 1, 2, 3]", "category": "Python"}, {"instruction": "Create a list comprehension to generate a new list of composed strings.", "input": "names = [\"John\", \"Steve\", \"Bob\"]\nblanks = [\"__'s cat\", \"__'s dog\", \"__'s parrot\"]", "output": "[name + blank for name in names for blank in blanks]", "category": "Python"}, {"instruction": "Write a code that adds two integers without using any arithmetic operators.", "input": "", "output": "def add_two_integers(a, b): \n    while b != 0:\n        carry = a & b     \n        a = a ^ b      \n        b = carry << 1  \n    return a", "category": "Python"}, {"instruction": "Make a deep copy of an object using JSON.", "input": "", "output": "import json\n\ndef deep_copy(obj):\n    return json.loads(json.dumps(obj))", "category": "Python"}, {"instruction": "Create a function for detecting changes in an array of numbers.", "input": "", "output": "def detect_changes(numbers):\n    results = []\n    for i in range(1, len(numbers)):\n        if numbers[i] != numbers[i-1]:\n            results.append((i, numbers[i]))\n    return results", "category": "Python"}, {"instruction": "Write a Python script to find the prime factors of a number.", "input": "Number: 24", "output": "\"\"\"\nWrite a Python script to find the prime factors of a number\n\"\"\"\n\ndef find_prime_factors(num):\n    prime_factors = []\n    for i in range(2, num+1):\n        count = 0\n        while num % i == 0:\n            count += 1\n            num //= i\n        if count > 0:\n            prime_factors.append((i, count))\n \n    return prime_factors\n\nif __name__ == '__main__':\n    n = 24\n    prime_factors = find_prime_factors(n)\n    print(prime_factors)", "category": "Python"}, {"instruction": "Explain how to use unsupervised machine learning to classify the following dataset", "input": "DataSet:\nA (2, 3, 4)\nB (5, 6, 7)\nC (8, 9, 10)", "output": "Unsupervised machine learning methods can be used to classify the given dataset by applying clustering algorithms. Clustering algorithms group objects which are similar to each other into clusters, while also attempting to keep the clusters distinct from each other. A clustering algorithm could be used to group the given dataset together and form distinct clusters. Each cluster would represent a distinct group, and each group would have a distinct set of characteristics. For example, the algorithm could group A, B, and C into one cluster, thus showing that each entry in the dataset has similar characteristics.", "category": "Python"}, {"instruction": "Create a function to group an array of numbers based on the following conditions.", "input": "array = [3, 15, 10, 5, 11, 14]\nconditions = [((3 <= x) & (x <= 10)), ((11 <= x) & (x <= 14))]", "output": "def group_arrays(array, conditions):\n    groups = []\n    for condition in conditions:\n        group = [x for x in array if condition(x)]\n        groups.append(group)\n    return groups", "category": "Python"}, {"instruction": "Calculate the sum of the following 2-dimensional array in Python.", "input": "arr = [[1, 2], [3, 4], [5, 6]]", "output": "def sum_2d_array(arr):\n result = 0\n for row in arr:\n  for num in row:\n   result += num\n return result\n \nprint(sum_2d_array([[1, 2], [3, 4], [5, 6]]))", "category": "Python"}, {"instruction": "Describe the algorithm and time complexity of selection sort.", "input": "", "output": "The selection sort algorithm works by repeatedly finding the minimum element in an unsorted list and then swapping it with the element in the current position. The algorithm has a time complexity of O(n^2) as it has to iterate through both the subarray to find the minimum element and then swap it.", "category": "Python"}, {"instruction": "Define a function in Python that takes an integer and returns \"positive\" if it is positive, \"zero\" if the integer is 0, and \"negative\" if the integer is negative.", "input": "", "output": "def pos_neg_zero(num):\n  if num > 0:\n    return \"positive\"\n  elif num < 0:\n    return \"negative\"\n  else:\n    return \"zero\"", "category": "Python"}, {"instruction": "Concatenate two lists in Python (using an appropriate method).", "input": "list1 = [1,2,3,4]\nlist2 = [5,6,7,8]", "output": "list3 = list1 + list2", "category": "Python"}, {"instruction": "You are given a 2-dimensional array. Write a function in Python to find the sum of each row.", "input": "arr = [[1, 3, 2],\n       [4, 6, 5],\n       [7, 9, 8]]", "output": "def row_sum(arr):\n    row_sum_arr = []\n    for row in arr:\n        row_sum_arr.append(sum(row))\n    return row_sum_arr\n\nrow_sum_arr = row_sum(arr)\nprint(row_sum_arr)\n# Output: [6, 15, 24]", "category": "Python"}, {"instruction": "Given a list of integers, write a program to check if there exist any pairs of numbers that sum to a given number.", "input": "v = [2, 3, 4, 9], sum = 8", "output": "def findSumPairs(v, sum):  \n    v.sort()\n    l = 0\n    r = len(v) - 1\n    while l < r: \n        if v[l] + v[r] == sum:\n            return True\n        elif v[l] + v[r] > sum:\n            r -= 1\n        else:\n            l += 1\n    return False\n  \nv = [2, 3, 4, 9]\nsum = 8\nprint(findSumPairs(v, sum))", "category": "Python"}, {"instruction": "Generate a random string of 10 characters with two vowels, three consonants and five digits.", "input": "", "output": "import random\n\ndef generate_string(vowels,consonants,digits):\n    s = ''\n    for _ in range(vowels):\n        s+=random.choice('aeiou')\n    for _ in range(consonants):\n        s+=random.choice('bcdfghjklmnpqrstvwxyz')\n    for _ in range(digits):\n        s+=str(random.randint(0,9))\n    return s\n\nprint(generate_string(2,3,5))", "category": "Python"}, {"instruction": "Create a function which takes a set of numbers as argument and returns a dictionary containing the frequency of each number.", "input": "my_set = {1, 2, 2, 3, 4, 5, 6}", "output": "def freq_dict(my_set):\n    # Initialize a empty dict\n    frequency_dict = dict()\n    # Iterate over given set\n    for num in my_set:\n        # Add or update item in the dict\n        frequency_dict[num] = frequency_dict.get(num, 0) + 1\n    return frequency_dict\n\n# Example\nmy_set = {1, 2, 2, 3, 4, 5, 6}\nprint(freq_dict(my_set))\n# Output: {1: 1, 2: 2, 3: 1, 4: 1, 5: 1, 6: 1}", "category": "Python"}, {"instruction": "Create a function which takes a string, converts it to lowercase, and prints out the most commonly-used character in the string.", "input": "string = \"Hello World\"", "output": "def most_common_char(string):\n    # Convert to lowercase\n    string = string.lower()\n    # Create an empty dict\n    chars = dict()\n    # Iterate over string\n    for char in string:\n        # Check if the character is in the dict\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    # Get most common char\n    most_common_char = sorted(chars.items(), key=lambda x: x[1], reverse=True)[0][0]\n\n    return most_common_char\n\n# Example\nstring = \"Hello World\"\nprint(most_common_char(string))\n# Output: l", "category": "Python"}, {"instruction": "Create a function which takes a variable number of arguments, checks if all of them are a list, and then adds all the items in the lists.", "input": "my_lists = [[1,2,3], [4,5], [6,7,8]]", "output": "# Function which takes variable arguments\ndef add_lists(*args):\n\n    # Check if all arguments are lists\n    for arg in args:\n        if not isinstance(arg, list):\n            return \"All the arguments should be a list.\"\n\n    # Add all items of the lists\n    result = 0\n    for lst in args:\n        # Iterate each item in the list\n        for item in lst:\n            result += item\n    return result\n\n# Example\nmy_lists = [[1,2,3], [4,5], [6,7,8]]\nprint(add_lists(*my_lists))\n# Output: 36", "category": "Python"}, {"instruction": "Create a Python program that sorts an array of integers using the insertion sort algorithm.", "input": "[4, 2, 6, 8, 1]", "output": "def insertionSort(arr): \n  \n    # Traverse through 1 to len(arr) \n    for i in range(1, len(arr)): \n  \n        key = arr[i] \n  \n        # Move elements of arr[0..i-1], that are \n        # greater than key, to one position ahead \n        # of their current position \n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key \n  \n# Driver code to test above \narr = [12, 11, 13, 5, 6] \ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (arr[i])", "category": "Python"}, {"instruction": "Write a Python program that takes a string entered by the user, reverses it and displays the reversed version of the string.", "input": "", "output": "def reverse_string(s): \n    return s[::-1]\n  \ninput_string = input(\"Enter a string: \")\n  \nreversed_string = reverse_string(input_string) \n  \nprint(\"The reversed string is:\", reversed_string)", "category": "Python"}, {"instruction": "Create a program that reads an integer N and calculates the sum of the series 1/1 + 1/2 + 1/3 + . . . . . + 1/N.", "input": "", "output": "def calculate_series_sum(N):\n    summation = 0\n    for i in range(1, N+1):\n        summation += (1 / i)\n    return summation", "category": "Python"}, {"instruction": "Create a program that reads a list of integers and returns the highest prime number in the list.", "input": "", "output": "def get_highest_prime(numbers):\n  highest_prime = 0\n  for num in numbers:\n    for i in range(2, num): \n      if (num % i == 0): \n        break\n    else:\n      highest_prime = max(highest_prime, num)\n  return highest_prime", "category": "Python"}, {"instruction": "Create a program that reads two numbers and prints out their greatest common divisor.", "input": "", "output": "def gcd(a, b):\n  if a == 0:\n    return b \n  return gcd(b % a, a)", "category": "Python"}, {"instruction": "You are given an array of integers and the task is to create a function that returns the maximum pairwise product of those numbers.", "input": "", "output": "def max_pairwise_product(nums):\n  max_product = 0\n  for i in range(len(nums)):\n      for j in range(i+1,len(nums)):\n          max_product = max(max_product, nums[i] * nums[j])\n  return max_product", "category": "Python"}, {"instruction": "Write a function that takes a list of strings and returns the longest common prefix of the list of strings.", "input": "", "output": "def longest_common_prefix(strings):\n    if len(strings) == 0:\n        return \"\"\n    smallest_string = min(strings, key=len)\n    end_word_index = len(smallest_string)\n\n    for i in range(end_word_index):\n        for word in strings:\n            if word[i] != smallest_string[i]:\n                return smallest_string[:i] \n    return smallest_string", "category": "Python"}, {"instruction": "Create a program that reads 6 numbers from the user and outputs whether they form an increasing subsequence of length 3 or not.", "input": "", "output": "def increasing_subsequence(arr):\n  for i in range(len(arr)-2):\n    if (arr[i] < arr[i+1]) and (arr[i+1] < arr[i+2]):\n      return 'True'\n  return 'False'", "category": "Python"}, {"instruction": "Create a function that prints all the prime numbers between 1 and a given number.", "input": "", "output": "def print_prime_numbers(upper_limit):\n  prime_numbers_list = []\n  for num in range(2, upper_limit+1):\n   if all(num % i != 0 for i in range(2, num)): \n    prime_numbers_list.append(num)\n  print(\"The prime numbers between 1 and\",upper_limit,\"are:\",prime_numbers_list)", "category": "Python"}, {"instruction": "Create a program that reads an integer and prints out the next Fibonacci number.", "input": "", "output": "def get_next_fibonacci_number(n):\n  if n == 0 or n == 1:\n    return n\n  else:\n    fibonacci_sequence = [0,1] \n    for i in range(2, n + 1): \n      next_value = fibonacci_sequence[i-2] + fibonacci_sequence[i-1] \n      fibonacci_sequence.append(next_value)\n    return fibonacci_sequence[n]", "category": "Python"}, {"instruction": "Write a Python program that finds the most common word in a given string.", "input": "This is the first sentence of a sample text.", "output": "def get_most_common_word(text):\n words = text.split()\n common_words = {}\n for word in words:\n if word in common_words:\n common_words[word] += 1\n else:\n common_words[word] = 1\n\n max_word = \"\"\n max_count = 0\n for word, count in common_words.items():\n if count > max_count:\n max_word = word\n max_count = count\n return max_word", "category": "Python"}, {"instruction": "Transform a given Python list of integers into a dictionary that contains the numbers as keys and its squares as values.", "input": "[1,2,3]", "output": "my_list = [1,2,3]\ndict_squares = {x:x**2 for x in my_list}", "category": "Python"}, {"instruction": "Implement a Search algorithm in Python with a space complexity of O(n).", "input": "", "output": "def search(list, target): \n    for i in range(len(list)): \n        if list[i] == target: \n            return i \n    return -1", "category": "Python"}, {"instruction": "Use a regular expression to replace URLs with \"URL\" in a given text in Python.", "input": "This is a text with a link http://example.com", "output": "import re\n\ntext = \"This is a text with a link http://example.com\"\ntext = re.sub(r'http\\S+', 'URL', text)\nprint(text)\n# Prints: This is a text with a link URL", "category": "Python"}, {"instruction": "Sort a given list of numbers from smallest to largest with Python.", "input": "[12,3,7,9,1]", "output": "myList = [12,3,7,9,1] \nmyList.sort() \nprint(myList) \n# Prints [1,3,7,9,12]", "category": "Python"}, {"instruction": "Create a class in Python to represent a car and include methods to set and get the car's color, model, and year.", "input": "", "output": "class Car:\n    def __init__(self, model, year, color):\n        self.model = model\n        self.year = year\n        self.color = color\n\n    def set_color(self, color):\n        self.color = color\n\n    def get_color(self):\n        return self.color\n\n    def set_model(self, model):\n        self.model = model\n\n    def get_model(self):\n        return self.model\n\n    def set_year(self, year):\n        self.year = year\n\n    def get_year(self):\n        return self.year", "category": "Python"}, {"instruction": "Create a class in Python to represent a bank account and add methods to display, withdraw, deposit and transfer money.", "input": "The bank account has the following details:\n- Customer Name: John Doe\n- Account Number: 12345\n- Balance: $1000", "output": "class BankAccount:\n    def __init__(self, customer_name, account_number, balance):\n        self.customer_name = customer_name\n        self.account_number = account_number\n        self.balance = balance\n\n    def display_balance(self):\n        print('Your balance is', self.balance)\n\n    def withdraw_amount(self, amount):\n        self.balance -= amount\n        print('You withdrew', amount, 'from your account.')\n\n    def deposit_amount(self, amount):\n        self.balance += amount\n        print('You deposited', amount, 'into your account.')\n\n    def transfer_amount(self, target_account, amount):\n        self.balance -= amount\n        target_account.balance += amount\n        print('You transferred', amount, 'to the account', target_account.account_number)", "category": "Python"}, {"instruction": "Suggest an appropriate way to select the last element of a given list in Python.", "input": "", "output": "list[-1]", "category": "Python"}, {"instruction": "Suggest a Pandas DataFrame command to remove element duplicates from a given dataframe.", "input": "", "output": "df.drop_duplicates()", "category": "Python"}, {"instruction": "Create a program to convert a binary number to its decimal equivalent.", "input": "", "output": "def binary_to_decimal(number):\n    result = 0\n    power = 0\n    for digit in str(number)[::-1]:\n        if digit == '1':\n            result += 2 ** power\n        power += 1\n    return result", "category": "Python"}, {"instruction": "Generate a Python program to calculate the total number of vowels in a given string.", "input": "string = \"Today is a beautiful day\"", "output": "def calculate_vowels(string):\n    vowels = 'aeiou'\n    count = 0\n    \n    for char in string:\n        if char in vowels:\n            count += 1\n    return count\n\nprint(calculate_vowels(\"Today is a beautiful day\"))", "category": "Python"}, {"instruction": "Create a function to input a number and prints out its prime factorization", "input": "24", "output": "def prime_factors(num):\n    factors = list()\n    x = 2\n    while x * x <= num:\n        while num % x == 0:\n            factors.append(x)\n            num /= x\n        x += 1\n    if num > 1:\n        factors.append(num)\n    return factors\n\nprint(prime_factors(24))", "category": "Python"}, {"instruction": "Create a Python program that generates a random number between 0 and 10 and checks if the generated number is even.", "input": "", "output": "import random\n\nnum = random.randint(0, 10)\n\nif (num % 2 == 0):\n    print(str(num) + \" is even.\")\nelse:\n    print(str(num) + \" is odd.\")", "category": "Python"}, {"instruction": "Generate a random hexadecimal string with a length of 8 characters.", "input": "", "output": "import random\n\ndef generate_hex():\n    hex_values = '0123456789ABCDEF'\n    string_length = 8\n    hex_string = '' \n    for _ in range(string_length): \n        hex_character = random.choice(hex_values) \n        hex_string += hex_character\n    return hex_string\n\nif __name__ == '__main__':\n    print(generate_hex())", "category": "Python"}, {"instruction": "Define a function to find the factorial of the given number.", "input": "", "output": "def factorial(num):\n    if num <= 1:\n        return 1\n    else:\n        return num * factorial(num-1)", "category": "Python"}, {"instruction": "Create a program to search a nested list and print all the elements containing the number 3.", "input": "nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, [3, 4, 5]]]", "output": "def search_nested_list(nested_list):\n    for element in nested_list:\n        if isinstance(element, list):\n            search_nested_list(element)\n        elif element == 3:\n            print(element)\n\nsearch_nested_list(nested_list)", "category": "Python"}, {"instruction": "Given two strings, write a Python function that finds the common letters between them.", "input": "String 1: apple\nString 2: oranges", "output": "def find_common_letters(s1, s2):\n    letters = set()\n\n    for letter in s1:\n        if letter in s2:\n            letters.add(letter)\n    return letters\n\n# Example\ns1 = 'apple'\ns2 = 'oranges'\nprint(find_common_letters(s1, s2))\n# Output: {'a', 'e'}", "category": "Python"}, {"instruction": "What are the main data types in Python?", "input": "", "output": "The main data types in Python are numbers, strings, lists, tuples, dictionaries, and sets.", "category": "Python"}, {"instruction": "Build a machine learning model to classify the type of iris flower.", "input": "", "output": "from sklearn.datasets import load_iris\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Load data\niris_data = load_iris()\nX = iris_data.data\ny = iris_data.target\n\n# Create a model and train it\nmodel = RandomForestClassifier()\nmodel.fit(X, y)\n\n# Make predictions\npredictions = model.predict(X)", "category": "Python"}, {"instruction": "Write a Python function to find all pairs in a given list of numbers whose sum equals a given target number", "input": "Given List: [1, 4, 2, 9, 5]\nTarget number: 7", "output": "def find_pairs_sum(numbers, target):\n    res = [] \n    for i in range(len(numbers)): \n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target: \n                res.append([numbers[i], numbers[j]]) \n  \n    return res", "category": "Python"}, {"instruction": "Construct a loop to print all the numbers divisible by 3 between 1 and 20", "input": "", "output": "for num in range(1, 21):\n    if num % 3 == 0:\n        print(num)", "category": "Python"}, {"instruction": "Generate a JSON string from a given Python dictionary", "input": "my_dict = {\n    \"title\": \"GPT Model Evaluation\",\n    \"category\": \"Natural Language Processing\",\n    \"score\": 8\n}", "output": "json.dumps(my_dict)", "category": "Python"}, {"instruction": "Compute the minimum string edit distance between two strings of same length.", "input": "str1 = \"kitten\"\nstr2 = \"sitting\"", "output": "def minimumEditDistance(str1, str2):\n    m = len(str1)\n    n = len(str2)\n \n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0: \n                dp[i][j] = j \n            elif j == 0: \n                dp[i][j] = i \n            elif str1[i - 1] == str2[j - 1]: \n                dp[i][j] = dp[i - 1][j - 1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j - 1],       \n                                   dp[i - 1][j],       \n                                   dp[i - 1][j - 1]     \n                                   ) \n  \n    return dp[m][n]\n\nmin_edit_distance = minimumEditDistance(str1, str2)\nprint(min_edit_distance) # output: 3", "category": "Python"}, {"instruction": "Write a code to find the factorial of a given number using a recursive function.", "input": "", "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "category": "Python"}, {"instruction": "Rewrite the following piece of code to check if a string is a palindrome or not.", "input": "String text = \"malayalam\"", "output": "def is_palindrome(text): \n    start = 0\n    end = len(text) - 1\n    while start < end:\n        if text[start] != text[end]:\n            return False\n        start += 1\n        end -= 1\n    return True", "category": "Python"}, {"instruction": "Edit the function so that an element can be deleted from the list.", "input": "def delete_element(list, element):\n    # TODO", "output": "def delete_element(list, element):\n    # iterate through the list\n    for elem in list:\n        if elem == element:\n            list.remove(elem)\n    return list", "category": "Python"}, {"instruction": "How would you modify the code to check whether the list contains an even number?", "input": "list_data = [1, 2, 3, 4]\nfor item in list_data:  \n    print(item)", "output": "list_data = [1, 2, 3, 4]\nflag = False\nfor item in list_data:  \n    print(item)\n    if item % 2 == 0:\n       flag = True\nif flag:\n    print(\"List contains even number.\")", "category": "Python"}, {"instruction": "Compare the input list with a pre-defined list and return a new list containing only the elements that are present in both lists.", "input": "my_list = [1, 2, 3, 4]\npre_defined_list = [2, 4, 6, 8]", "output": "def compare_lists(my_list, pre_defined_list):\n    new_list = []\n    for element in my_list:\n        if element in pre_defined_list:\n            new_list.append(element)\n    return new_list", "category": "Python"}, {"instruction": "How would you modify the following code to store the output of the function in a dictionary?", "input": "def convert_list_keys(list_of_data):\n    key_list = []\n    for item in list_of_data:\n        key_list.append(item[0])\n    return key_list", "output": "def convert_list_keys(list_of_data):\n    key_dict = {}\n    for item in list_of_data:\n        key_dict[item[0]] = item\n    return key_dict", "category": "Python"}, {"instruction": "Write a Python program to filter out all the elements greater than 5 in the given list.", "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "myList = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n result = list(filter(lambda x: x <= 5, myList))\n print(result)", "category": "Python"}, {"instruction": "Write a code in Python to find the subsequence of a given sequence.", "input": "sequence = [1, 6, 2, 4, 3, 7]", "output": "def findSubsequence(sequence): \n    subSeq = [] \n    maxLen = 1\n  \n    # looping through the sequence \n    for i in range(len(sequence)): \n        j = i + 1\n        while j < len(sequence): \n            # checking for non decreasing sequence \n            if sequence[j] >= sequence[i]: \n                subSeq.append(sequence[j]) \n                i = j \n                j += 1\n  \n            # checking for the subsequence with the max length \n            if len(subSeq) > maxLen: \n                maxLen = len(subSeq) \n  \n            # reset subSeq for the next subsequence if current element is starting of new subsequence \n            else: \n                subSeq = [] \n  \n    # return-1 when there is no subsequence  \n    if maxLen == 1: \n        return -1\n    else: \n        return maxLen \n  \n# Driver Code \nsequence = [1, 6, 2, 4, 3, 7] \nprint(\"LCS is \", findSubsequence(sequence))", "category": "Python"}, {"instruction": "Write a computer program to generate a matrix filled with zeros.", "input": "", "output": "def generateMatrix(m, n): \n  \n    # Initialize a m * n matrix with all 0s \n    matrix = [[0 for x in range(n)] for y in range(m)] \n    return matrix \n  \n# Driver code \nm = 4\nn = 5\nprint(generateMatrix(m, n))", "category": "Python"}, {"instruction": "Create a list in Python using list comprehension to obtain a new list which contains only the even numbers from the given list.", "input": "originalList = [1, 3, 4, 17, 19, 6, 2]", "output": "evenlist = [i for i in originalList if i%2==0]", "category": "Python"}, {"instruction": "Explain why normalization is needed for natural language processing.", "input": "", "output": "Normalization is a step in natural language processing (NLP) that is used to make the text more consistent and easier to process. It is important in NLP because different pieces of text can still have the same meaning even if the words used in the text are different. Normalization can make the text more consistent by unifying the words to a common form, such as lowercasing all words, so that the model can process them more effectively. It can also be used to remove irrelevant characters, like punctuation, so that they don't affect the analysis.", "category": "Python"}, {"instruction": "Given an integer n, write a Python program to print a pattern.", "input": "n = 5", "output": "for i in range(1, n+1): \n  for j in range(1,i+1): \n    print(\"* \", end=\"\")  \n  print(\"\\r\")", "category": "Python"}, {"instruction": "Create a list comprehension that outputs a list of strings with the same character.", "input": "string=\"This is a test.\"", "output": "[x for x in string if x == 't']", "category": "Python"}, {"instruction": "Explain the purpose of principal component analysis.", "input": "", "output": "Principal Component Analysis (PCA) is a method of dimensionality reduction used to reduce the number of variables in large datasets. It works by transforming a set of correlated variables into a new set of uncorrelated variables, called principal components. The principal components represent the most relevant information in the data, while also reducing the complexity of the data. By using these components as variables in analysis, it helps to visualize and interpret the data more easily.", "category": "Python"}, {"instruction": "Create a method that given an array as input, outputs the quantity of odd numbers.", "input": "[1,2,3,4,5,6,7]", "output": "def countOdds(arr): \n    return len([x for x in arr if x % 2 != 0])", "category": "Python"}, {"instruction": "Determine the two largest numbers in a given list.", "input": "lst = [11, 5, 3, 21, 19, 17]", "output": "def find_two_largest(lst):\n    max1 = 0\n    max2 = 0\n    for val in lst:\n        if val > max1:\n            max2 = max1\n            max1 = val\n        elif val > max2:\n            max2 = val\n    return (max1, max2)\n\nprint(find_two_largest(lst))", "category": "Python"}, {"instruction": "Create a program to calculate the Fibonacci sequence up to the nth element.", "input": "", "output": "def fibonacci(n):\n    a = 0\n    b = 1\n    if n==1:\n        print(a)\n    else:\n        print(a)\n        print(b)\n        for i in range(2,n):\n            c=a+b\n            a=b\n            b=c\n            print(b)", "category": "Python"}, {"instruction": "Write an algorithm to sort a list of numbers from least to greatest.", "input": "", "output": "def sort_list(mylist):\n    for i in range(len(mylist)):\n        min_idx = i\n        for j in range(i+1, len(mylist)):\n            if mylist[min_idx] > mylist[j]:\n                min_idx = j\n        mylist[i], mylist[min_idx] = mylist[min_idx], mylist[i]\n    return mylist", "category": "Python"}, {"instruction": "Using the given Python code, format the number 7.321 to contain two decimal points.", "input": "n=7.321", "output": "'{:.2f}'.format(n)", "category": "Python"}, {"instruction": "Create a script in Python that plots a bar chart showing the count of beers sold in a bar in a particular week.", "input": "beer_sales = [200, 500, 600, 100, 800]", "output": "import matplotlib.pyplot as plt\n\nweek = [1, 2, 3, 4, 5]\nplt.bar(week,beer_sales)\nplt.xlabel('Week')\nplt.ylabel('Number of beers sold')\nplt.show()", "category": "Python"}, {"instruction": "Convert the following array to a numpy array and print it:", "input": "[2, 4, 6, 8]", "output": "import numpy as np \narr = np.array([2,4,6,8])\nprint(arr)", "category": "Python"}, {"instruction": "Create an array of 10 integers initialized to zero and print their values.", "input": "", "output": "import numpy as np \narr = np.zeros(10, dtype=int)\nprint(arr)", "category": "Python"}, {"instruction": "Compute the factorial of a given number using a recursive algorithm.", "input": "", "output": "def factorial(n): \n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "category": "Python"}, {"instruction": "Create an algorithm for sorting a list of numbers using bubble sort.", "input": "[3,1,5,4,2]", "output": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\nbubble_sort([3,1,5,4,2])", "category": "Python"}, {"instruction": "Write an algorithm to find the common elements in two arrays.", "input": "", "output": "A possible algorithm to find the common elements in two arrays is as follows:\n\n1. Initialize an empty array to store the common elements.\n2. Iterate through the first array and for each element, check if it exists in the second array.\n3. If the element does exist in the second array, add it to the common elements array.\n4. Return the common elements array.", "category": "Python"}, {"instruction": "Choose a suitable data structure for finding the minimum and maximum element from a collection of numbers.", "input": "", "output": "Heap is an appropriate data structure for finding the minimum and maximum elements from a collection of numbers as it allows for efficient access to the minimum and maximum values using the min-heap and max-heap properties.", "category": "Python"}, {"instruction": "Write a function in Python to print out the most common words in a given text.", "input": "This is a test text. It can be used to test a function for the most common words.", "output": "def most_common(text):\n    text_list = text.lower().split()\n    results = {}\n    for word in text_list:\n        if word not in results:\n            results[word] = 1\n        else:\n            results[word] += 1\n\n    sorted_words = sorted(results.items(), key=lambda kv: kv[1], reverse=True)\n    for word, count in sorted_words[:10]:\n        print(word, count)", "category": "Python"}, {"instruction": "Develop a program to find the smallest number in a list", "input": "list = [25, 67, 12, 8]", "output": "list = [25, 67, 12, 8]\n\ndef find_smallest(list):\n    smallest = list[0]\n    for number in list:\n        if number < smallest:\n            smallest = number\n    return smallest\n\nprint(find_smallest(list))", "category": "Python"}, {"instruction": "Create an algorithm to compute the sum of all the numbers in a list", "input": "list = [14, 37, 54, 20]", "output": "list = [14, 37, 54, 20]\n\ndef compute_sum(list):\n    total_sum = 0\n    for number in list:\n        total_sum += number\n    return total_sum\n\nprint(compute_sum(list))", "category": "Python"}, {"instruction": "Generate a program to filter a list of numbers, passing only the greater than a given number", "input": "list = [12, 24, 36, 45], 36", "output": "list = [12, 24, 36, 45]\ngiven_number = 36\n\ndef filter_list(list, given_number):\n    filtered_list = []\n    for number in list:\n        if number > given_number:\n            filtered_list.append(number)\n    return filtered_list\n\nprint(filter_list(list, given_number))", "category": "Python"}, {"instruction": "Given an array of strings and a string, write a program to find the first index of the string in the array.", "input": "arr = [\"Hello\", \"World\", \"World\"]\nstring = \"World\"", "output": "def find_index(arr, string):\n    for i in range(len(arr)):\n        if arr[i] == string:\n            return i\n    return -1\n\nindex = find_index(arr, string)\nprint(index)", "category": "Python"}, {"instruction": "Develop a program to count the number of items of a given list", "input": "list = [43, 87, 21, 65]", "output": "list = [43, 87, 21, 65]\n\ndef count_list_items(list):\n    count = 0\n    for item in list:\n        count += 1\n    return count\n\nprint(count_list_items(list))", "category": "Python"}, {"instruction": "Create a function that takes two numerical parameters and checks if they are equal.", "input": "", "output": "def is_equal(num1, num2):\n    if num1 == num2:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Create a class for a Counter object that will keep track of a total count, and increase and decrease the count when functions are called.", "input": "", "output": "class Counter:\n    def __init__(self):\n        self.count = 0\n\n    def increase_count(self):\n        self.count += 1\n\n    def decrease_count(self):\n        self.count -= 1", "category": "Python"}, {"instruction": "Compose a function that takes in two strings and produces an array of characters that are only in the first string.", "input": "stringA = \"abcdefg\"\nstringB = \"hijklmn\"", "output": "def to_array(strA, strB):\n    output = []\n    for char in strA:\n        if char not in strB:\n            output.append(char)\n    return output\n\nresult = to_array(stringA, stringB)\nprint(result)", "category": "Python"}, {"instruction": "Using random module, generate a random sequence of 8 numbers from range 1 to 8.", "input": "", "output": "import random\n\nrandom_sequence = random.sample(range(1, 9), 8)\nprint(random_sequence)", "category": "Python"}, {"instruction": "Given a list of words, sort them using a bubble sort algorithm.", "input": "['apple', 'banana', 'cherry', 'date']", "output": "['apple', 'banana', 'cherry', 'date']\n\ndef bubble_sort(words):\n    n = len(words)\n    for i in range(n): \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n            if words[j] > words[j+1]: \n                words[j], words[j+1] = words[j+1], words[j]\n    return words", "category": "Python"}, {"instruction": "Define a function that takes an array of strings and combines the strings into a single string.", "input": "array = [\"Hello\", \"World\"]", "output": "def combine_strings(strings_array):\n    output_string = \"\"\n    for string in strings_array:\n        output_string += string\n    \n    return output_string\n\ncombine_strings(array)", "category": "Python"}, {"instruction": "Calculate the square root of a number without using any built-in function.", "input": "num = 25", "output": "def calculate_sqrt(num):\n   # Babylonian method\n   x = num\n   y = 1\n \n   while x > y:\n       x = (x + y) / 2\n       y = num / x\n \n   return x\n\ncalculate_sqrt(num)", "category": "Python"}, {"instruction": "Find the latitude and longitude of an input address.", "input": "address = \"1600 Amphitheatre Parkway, Mountain View, CA\"", "output": "import geocoder\n\ng = geocoder.google(address)\n\nprint(\"Latitude: \" + str(g.latlng[0])) \nprint(\"Longitude: \" + str(g.latlng[1]))", "category": "Python"}, {"instruction": "Aggregate and calculate the mean of the following array by grouping them by the key 'region'.", "input": "array = [\n    {'name': 'John', 'region': 'West', 'score': 4},\n    {'name': 'Jane', 'region': 'West', 'score': 10},\n    {'name': 'Bob', 'region': 'East', 'score': 5},\n    {'name': 'Alice', 'region': 'East', 'score': 20}\n]", "output": "import pandas as pd\n\ndf = pd.DataFrame(array)\nmean_by_region = df.groupby('region')['score'].mean() \n\nprint(mean_by_region)", "category": "Python"}, {"instruction": "Create a program which takes an integer input n and prints its factorial.", "input": "n = 5", "output": "def factorial(n): \n    fact = 1\n    for i in range(1, n+1): \n        fact = fact * i \n    return fact\n\nprint(factorial(n))", "category": "Python"}, {"instruction": "Generate a random string of length n containing only lowercase letters.", "input": "", "output": "import random\nimport string\n\ndef random_string_generator(n):\n    return ''.join(random.choices(string.ascii_lowercase, k=n))\n\nrandom_string = random_string_generator(n)", "category": "Python"}, {"instruction": "Explain what a trisection algorithm is.", "input": "", "output": "A trisection algorithm is a method used to divide an interval into three equal parts. It involves dividing a closed interval into three parts using only two points that lie in the original interval. It is useful for quickly finding roots of equations as the points at each division become closer and closer to the root. The method can be applied in a number of applications such as numerical analysis and optimization.", "category": "Python"}, {"instruction": "How does a hash table work?", "input": "", "output": "A hash table is a data structure that stores data items in an associative array where the key is used to quickly search for the data item. It is based on the concept of hashing which converts a key into an address in the array. Each address points to the data item associated with that key. The hash table offers fast lookup times by using hashing functions which are designed to spread data evenly over the table.", "category": "Python"}, {"instruction": "Create a dictionary that contains 10 entries.", "input": "", "output": "tutorials = {\n  'Python': 'http://www.python.org/',\n  'Django': 'http://www.djangoproject.com/',\n  'Selenium': 'https://pypi.python.org/pypi/selenium',\n  'Robotics': 'http://www.robotics-focus.com/',\n  'Machine Learning': 'https://en.wikipedia.org/wiki/Machine_learning',\n  'Data Science': 'http://www.datascience.com/',\n  'Big Data': 'https://aws.amazon.com/big-data/',\n  'Cloud Computing': 'http://www.mcp.com/cloud-computing/',\n  'Artificial Intelligence': 'https://www.microsoft.com/en-us/research/ai/',\n  'Internet of Things': 'https://www.intel.com/content/www/us/en/internet-of-things/overview.html'\n}", "category": "Python"}, {"instruction": "Given a class definition, write a method to count the number of objects created in the class.", "input": "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "output": "class Student:\n    _count = 0\n    def __init__(self, name, age):\n        self._count += 1\n        self.name = name\n        self.age = age\n\n    @classmethod\n    def get_count(cls):\n        return cls._count", "category": "Python"}, {"instruction": "Create a new list by changing all the strings in a given list to uppercase.", "input": "lst = [\"apple\", \"orange\", \"banana\"]", "output": "def to_upper_case_list(lst):\n    res = []\n    for s in lst:\n        res.append(s.upper())\n    return res\n\nif __name__ == '__main__':\n    lst = [\"apple\", \"orange\", \"banana\"]\n    print(to_upper_case_list(lst))", "category": "Python"}, {"instruction": "Check if an element is present in a list.", "input": "lst = [1, 2, 3, 4]\nelement = 5", "output": "def is_element_in_list(lst, element):\n    return element in lst\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4]\n    element = 5\n    print(is_element_in_list(lst, element))", "category": "Python"}, {"instruction": "Convert a string to all uppercase.", "input": "text = \"Hello World\"", "output": "def to_uppercase(text):\n    return text.upper()\n\nif __name__ == '__main__':\n    text = \"Hello World\"\n    print(to_uppercase(text))", "category": "Python"}, {"instruction": "Calculate the area of a rectangle given height and width.", "input": "height = 2\nwidth = 5", "output": "def area_rectangle(height, width):\n    return height*width\n\nif __name__ == '__main__':\n    print(area_rectangle(2, 5))", "category": "Python"}, {"instruction": "Write a function to receive a list of numbers and return the sum of the list.", "input": "", "output": "def list_sum(list):\n    sum = 0\n    for num in list:\n        sum += num\n    return sum\n\nif __name__ == '__main__':\n    print(list_sum([1, 2, 3, 4]))", "category": "Python"}, {"instruction": "Write Python code to replace all the vowels with underscore.", "input": "string = \"Hello World!\"", "output": "string = \"Hello World!\"\n\nvowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\ndef replace_vowels_with_underscore(string):\n    result = \"\"\n    for char in string:\n        if char in vowels:\n            result += \"_\"\n        else:\n            result += char\n    return result\n\nprint(replace_vowels_with_underscore(string)) # Output: \"H_ll_ W_rld!\"", "category": "Python"}, {"instruction": "Design a function in Python to find all the elements in an array that are divisible by 3.", "input": "arr = [3, 8, 15, 20, 7]", "output": "arr = [3, 8, 15, 20, 7]\n\ndef divisible_by_3(arr):\n    result = []\n    for element in arr:\n        if element % 3 == 0:\n            result.append(element)\n    return result\n\nprint(divisible_by_3(arr)) # Output: [3, 15, 20]", "category": "Python"}, {"instruction": "Create a function in Python that shuffles the elements of an input list.", "input": "arr = [1, 4, 5, 8, 9, 2]", "output": "import random \n\narr = [1, 4, 5, 8, 9, 2]\n\ndef randomize_list(arr): \n    random.shuffle(arr) \n    return arr \n\nprint(randomize_list(arr)) # Output: [9, 1, 2, 4, 5, 8]", "category": "Python"}, {"instruction": "Write a function in Python to generate a list containing the sum of corresponding elements given two lists.", "input": "list1 = [9, 4, 8]\nlist2 = [1, 8, 5]", "output": "list1 = [9, 4, 8]\nlist2 = [1, 8, 5]\ndef add_corresponding_elements(list1, list2):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i])\n    return result\n\nprint(add_corresponding_elements(list1, list2)) # Output: [10, 12, 13]", "category": "Python"}, {"instruction": "Construct a loop in Python to invert the order of a string.", "input": "string = \"Hello World!\"", "output": "string = \"Hello World!\"\ninverted_string = \"\"\nfor char in string:\n    inverted_string = char + inverted_string\n\nprint(inverted_string) # Output: \"!dlroW olleH\"", "category": "Python"}, {"instruction": "Train a sentiment analysis model using a corpus of movie reviews.", "input": "", "output": "import pandas as pd\nimport numpy as np\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Dense, Embedding, LSTM, Dropout\nfrom keras.models import Sequential\n\n# Load corpus of movie reviews\ndata = pd.read_csv('movie_reviews.csv')\nsentences = data['review'].values\ny = data['sentiment'].values\n\n# Create tokenizer\ntokenizer = Tokenizer(num_words=2000)\ntokenizer.fit_on_texts(sentences)\nX = tokenizer.texts_to_sequences(sentences)\nvocab_size = len(tokenizer.word_index)+1\nX = pad_sequences(X)\n\n# Build and train a model\nmodel = Sequential()\nmodel.add(Embedding(vocab_size, 128, input_length=X.shape[1]))\nmodel.add(LSTM(64, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n# fit the model with epochs\nmodel.fit(X,y, batch_size=64, epochs=15)\n\n# Evaluate the model\nscores = model.evaluate(X, y, verbose=0)\nprint(\"Accuracy: %.2f%%\" % (scores[1]*100))", "category": "Python"}, {"instruction": "Create a 3D scatterplot in Python to visualize 3 different datasets.", "input": "", "output": "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nx1 = np.array([1,2,3,4,5])\ny1 = np.array([2,3,4,5,6])\nz1 = np.array([3,4,5,6,7])\n\nx2 = np.array([10,11,12,13,14])\ny2 = np.array([20,21,22,23,24])\nz2 = np.array([40,41,42,43,44])\n\nx3 = np.array([100,200,300,400,500])\ny3 = np.array([200,400,600,800,1000])\nz3 = np.array([1,2,3,4,5])\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(x1, y1, z1, c='r', marker='o', label='dataset1')\nax.scatter(x2, y2, z2, c='y', marker='^', label='dataset2')\nax.scatter(x3, y3, z3, c='g', marker='d', label='dataset3')\nax.legend()\n\nplt.show()", "category": "Python"}, {"instruction": "Generate a random password with 8 characters, including upper and lower case letters, numbers, and special characters.", "input": "", "output": "import string\nimport random\n\ndef generate_password():\n    # create a string of all possible characters\n    chars = string.ascii_letters + string.digits + string.punctuation\n    # generate a random password with 8 characters\n    password = ''.join(random.choice(chars) for i in range(8))\n    return password\n\n# Generate a random password\npassword = generate_password()\nprint(password)", "category": "Python"}, {"instruction": "Create a program in python to simulate a game of rock, paper, scissors.", "input": "", "output": "from random import randint \n\ndef rock_paper_scissors():\n    print(\"rock, paper, scissors!\")\n    player = input(\"Your input: \")\n    rand_num = randint(0,2)\n    if rand_num == 0:\n        computer = \"rock\"\n    elif rand_num == 1:\n        computer = \"paper\"\n    else:\n        computer = \"scissors\" \n\n    print(\"The computer plays: \" + computer)\n    if player == computer:\n        print(\"It's a tie!\")\n    elif player == \"rock\":\n        if computer == \"paper\":\n            print(\"Computer wins!\")\n        else:\n            print(\"Player wins!\")\n    elif player == \"paper\":\n        if computer == \"scissors\":\n            print(\"Computer wins!\")\n        else:\n            print(\"Player wins!\")\n    elif player == \"scissors\":\n        if computer == \"rock\":\n            print(\"Computer wins!\")\n        else:\n            print(\"Player wins!\")\n    else:\n        print(\"Invalid input! You have to choose between rock, paper or scissors\")\n\nrock_paper_scissors()", "category": "Python"}, {"instruction": "Write a code that takes an array and returns an array of all elements in the original except for the duplicates.", "input": "[1, 2, 2, 3, 4, 4, 5]", "output": "def remove_duplicates(arr):\n    new_arr = []\n    seen = set()\n    for i in arr:\n        if i not in seen:\n            seen.add(i)\n            new_arr.append(i)\n    return new_arr\n\nremove_duplicates([1,2,2,3,4,4,5])\n# output: [1,2,3,4,5]", "category": "Python"}, {"instruction": "The following code is broken, please rewrite it so that it prints out all the primes within a range of 1-100.", "input": "for i in range(2,100):\n    if i % 2 == 0:\n        print (i, \" is prime\")", "output": "for i in range(2,100):\n    is_prime = True\n    for j in range(2,i):\n        if i % j == 0:\n            is_prime = False\n            break\n    if is_prime:\n        print(i, \"is prime\")", "category": "Python"}, {"instruction": "Use the collections module in python to return the most common phrase from a list of strings.", "input": "[ \"hello world\", \"hello\", \"hello world again\" ]", "output": "from collections import Counter\n\ndef most_common_phrase(string_list):\n    c = Counter(string_list)\n    return c.most_common(1)[0][0]\n\nmost_common_phrase([\"hello world\", \"hello\", \"hello world again\"])\n# output: 'hello world'", "category": "Python"}, {"instruction": "Use the regex module in python to remove all punctuation in a given string.", "input": "\"Hello, world!\"", "output": "import re\n\ndef remove_punc(string):\n    punc_pattern = re.compile('[^\\w\\s]')\n    return punc_pattern.sub('', string)\n\nremove_punc(\"Hello, world!\")\n# output: 'Hello world'", "category": "Python"}, {"instruction": "Create a program in python that takes a number as input and checks if it is a prime number", "input": "5", "output": "def is_prime(num):\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if (num % i == 0):\n                return False\n    return True\n\nis_prime(5)\n# output: True", "category": "Python"}, {"instruction": "Write a code that takes a list of strings and a string, and returns a list containing all strings from the given list that have the given string as a substring.", "input": "['Hello', 'Hello, world', 'Bonjour', 'My name is John']\nString: 'lo'", "output": "def find_substring(lst, query):\n    result = []\n    for el in lst:\n        if query in el:\n            result.append(el)\n    return result\n\nfind_substring(['Hello', 'Hello, world', 'Bonjour', 'My name is John'], 'lo')\n# output: ['Hello', 'Hello, world']", "category": "Python"}, {"instruction": "Write a function to convert a given list of strings into a dictionary where the key is a string in the list, and the value is the frequency of the string in the list.", "input": "[\"hello\", \"hello\", \"world\", \"welcome\", \"hello\"]", "output": "def list_to_dict(lst):\n    my_dict = {}\n    for i in lst:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    return my_dict\n\nlist_to_dict([\"hello\", \"hello\", \"world\", \"welcome\", \"hello\"]) \n# output: {'hello': 3, 'world': 1, 'welcome': 1}", "category": "Python"}, {"instruction": "Use Numpy or Pandas to calculate the mean of the following array.", "input": "array = [3, 4, 8, 10, 14]", "output": "import numpy as np\n\nmean = np.mean(array)\nprint(mean)", "category": "Python"}, {"instruction": "Given a list of numbers, write a Python code to replace negative numbers with 0 in the list.", "input": "data = [-4, -2, 5, 8, -1, 0]", "output": "data = [0, 0, 5, 8, 0, 0]\n\nresult = [0 if ele < 0 else ele for ele in data] # List comprehension", "category": "Python"}, {"instruction": "Create a function to generate random English sentences.", "input": "<noinputn>", "output": "import random\nimport nltk\n\ndef generate_sentences(num_sentences):\n    sentences = []\n    for _ in range(num_sentences):\n        sentence = []\n        while True:\n            word = random.choice(nltk.corpus.words.words())\n            sentence.append(word)\n            if word[-1] == '.':\n                break\n        sentences.append(' '.join(sentence))\n    return sentences", "category": "Python"}, {"instruction": "Create a copy of an existing array.", "input": "my_arr = [1, 2, 3]", "output": "import copy\n\nmy_arr_copy = copy.deepcopy(my_arr)", "category": "Python"}, {"instruction": "Compute the bulk density of a polyhedron using the formula $\\frac{mass}{volume}$.", "input": "mass = 3.5 g, volume = 2.6 cm$^3$", "output": "def compute_bulk_density(mass, volume):\n    \"\"\"Compute the bulk density of a polyhedron using the formula $\\frac{mass}{volume}$.\"\"\"\n    return mass / volume\n\nif __name__ == '__main__':\n    mass = 3.5 # g\n    volume = 2.6 # cm^3\n    print(compute_bulk_density(mass, volume))", "category": "Python"}, {"instruction": "Given an array with n numbers, write a function to find if there exists three elements in the array whose sum is equal to a given number.", "input": "array = [5, 3, 1, 8], number = 14", "output": "def sum_three_elements(array, number):\n    \"\"\"Given an array with n numbers, find if there exists three elements in the array whose sum is equal to a given number.\"\"\"\n    array.sort()\n    for i in range(len(array) - 2):\n        left = i + 1\n        right = len(array) - 1\n        while left < right:\n            temp = array[i] + array[left] + array[right]\n            if temp == number:\n                return True\n            elif temp < number:\n                left += 1\n            else:\n                right -= 1\n    return False\n\nif __name__ == '__main__':\n    a = [5, 3, 1, 8]\n    number = 14\n    print(sum_three_elements(a, number))", "category": "Python"}, {"instruction": "Print the sum of the first ten natural numbers.", "input": "", "output": "def sum_of_first_ten():\n    \"\"\"Print the sum of the first ten natural numbers.\"\"\"\n    total = 0\n    for i in range(1, 11):\n        total += i\n    return total\n\nif __name__ == '__main__':\n    print(sum_of_first_ten())", "category": "Python"}, {"instruction": "Construct a function to check whether a string is a valid IPv4 address or not.", "input": "", "output": "def is_valid_ipv4(string):\n    # Split the string at the '.'s\n    parts = string.split(\".\")\n\n    # Check if the length of the parts is valid\n    if len(parts) != 4:\n            return False\n\n    # Iterate over each part and check if it is a valid number\n    for part in parts:\n        if not part.isdigit() or int(part) > 255 or int(part) < 0:\n            return False\n\n    return True\n\nif __name__ == '__main__':\n    string = \"192.168.1.1\"\n    print(is_valid_ipv4(string))", "category": "Python"}, {"instruction": "Find the maximum product of three numbers in an array.", "input": "[1, -5, -6, 10, 20, 15]", "output": "def max_product_of_three(arr):\n    \"\"\"Find the maximum product of three numbers in an array.\"\"\"\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Return max product of the first three numbers\n    return arr[0] * arr[1] * arr[2]\n\nif __name__ == '__main__':\n    print(max_product_of_three([1, -5, -6, 10, 20, 15]))", "category": "Python"}, {"instruction": "Compress the following string using a Huffman algorithm.", "input": "\"aaaaaaaaabccddddee\"", "output": "import heapq\n\ndef huffman_encode(string):\n    freq = {}\n    for c in string:\n        freq[c] = freq.get(c, 0) + 1\n    \n    heap = [[weight, [char, \"\"]] for char, weight in freq.items()]\n    heapq.heapify(heap)\n\n    while len(heap) > 1:\n        low = heapq.heappop(heap)\n        high = heapq.heappop(heap)\n        for pair in low[1:]:\n            pair[1] = '0' + pair[1]\n        for pair in high[1:]:\n            pair[1] = '1' + pair[1]\n        heapq.heappush(heap, [low[0] + high[0]] + low[1:] + high[1:])\n    \n    encoded = \"\"\n    codes = dict()\n    for char, code in heap[0][1:]:    \n        codes[char] = code\n        encoded += code\n\n    return codes, encoded\n\nif __name__ == '__main__':\n    string = \"aaaaaaaaabccddddee\"\n    codes, encoded = huffman_encode(string)\n    print(encoded)", "category": "Python"}, {"instruction": "Check if two strings are an anagram of each other.", "input": "string1 = \"elbon\" string2 = \"noble\"", "output": "def is_anagram(string1, string2):\n    # Make sure strings are the same length\n    if len(string1) != len(string2):\n        return False\n\n    # Create dictionary of letter frequency for each string \n    char_freq1 = {}\n    char_freq2 = {}\n\n    # Iterate through each character in the strings\n    for char in string1:\n        char_freq1[char] = char_freq1.get(char, 0) + 1\n    for char in string2:\n        char_freq2[char] = char_freq2.get(char, 0) + 1\n\n    # Compare the two dictionaries\n    if char_freq1 == char_freq2:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    string1 = \"elbon\"\n    string2 = \"noble\"\n    print(is_anagram(string1, string2))", "category": "Python"}, {"instruction": "Create a function that recursively flattens an array of arbitrarily nested arrays.", "input": "array = [[1, [2, [3, [[4, 5], 6]]]], 7]", "output": "def flatten_list(l):\n  for el in l:\n    if isinstance(el, list):\n      yield from flatten_list(el)\n    else:\n      yield el", "category": "Python"}, {"instruction": "Create a function that returns the longest word in a sentence.", "input": "sentence = \"This is a sentence with lots of words.\"", "output": "def get_longest_word(sentence):\n    words = sentence.split()\n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word", "category": "Python"}, {"instruction": "Using the provided text, remove all punctuation and store the resulting output in a new variable.", "input": "text = \"This is a text string with punctuation!\"", "output": "import re\n\nnew_text = re.sub('[^\\w\\s]','', text)", "category": "Python"}, {"instruction": "Write a function to select the second max value in an array.", "input": "a = [1, 3, 6, 8, 7, 0]", "output": "def selectSecondMax(arr): \n    max_1 = 0\n    max_2 = 0\n  \n    for value in arr: \n        if (value > max_1): \n            max_2 = max_1 \n            max_1 = value \n        elif (value > max_2 and value != max_1): \n            max_2 = value\n    return max_2 \n  \na = [1, 3, 6, 8, 7, 0]\nprint(selectSecondMax(a)) # output: 6", "category": "Python"}, {"instruction": "Create a function to create a simple calculator for addition, subtraction, multiplication and division.", "input": "", "output": "def simple_calculator(action, a, b):\n    if action == \"add\":\n        return a + b\n    elif action == \"subtract\":\n        return a - b\n    elif action == \"multiply\":\n        return a * b\n    elif action == \"divide\":\n        return a / b\n    else:\n        return 0", "category": "Python"}, {"instruction": "Develop an algorithm for a breadth-first search.", "input": "", "output": "Breadth-first search (BFS) is an algorithm used to traverse a graph or tree data structure. The algorithm works by starting at the root node and exploring each of its adjacent nodes before exploring any of its children. The adjacent nodes are explored in the order with which they were discovered in the graph or tree. The algorithm moves from node to node by visiting the nearest neighbors first, as opposed to a depth-first search, which moves from node to node by exploring the furthest nodes first. The basic algorithm for a breadth-first search is as follows:\n\n1. Create an empty queue\n2. Enqueue the root\n3. While the queue is not empty: \n    a. Dequeue the next node\n    b. If it is the desired node, return success\n    c. Else, add all of its children to the queue\n4. Return failure", "category": "Python"}, {"instruction": "Develop a program to determine if a given year is a leap year.", "input": "year = 2024", "output": "# Determining if a year is a leap year\n\n# Assigning the current year\nyear = 2024\n\n# Checking if the year is a leap year\nif (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n    print(year, \"is a leap year\")\nelse:\n    print(year, \"is not a leap year\")", "category": "Python"}, {"instruction": "Suggest a method in Python to remove any whitespaces from a given string.", "input": "", "output": "The easiest way to remove whitespaces from a string in Python is to use the replace() method. This method takes two arguments, the string to be replaced and the string to replace it with. To remove all existing whitespace, use the string ' ' as the replace argument. For example, given the string \"This is my string\", the following code would remove all whitespace from the string:\n\nstring = \"This is my string\"\nstring = string.replace(' ', '')", "category": "Python"}, {"instruction": "Create a function to add two numbers without using the + operator.", "input": "", "output": "def add_numbers(a, b):\n  while b != 0:\n    carry = a & b\n    a = a ^ b\n    b = carry << 1\n  return a\n\nprint(add_numbers(3,4)) #Prints 7", "category": "Python"}, {"instruction": "Write a simple formatter to wrap the text at a given number of characters.", "input": "", "output": "def wrap_text(text, columns):\n  wrapped_text = \"\"\n  for i in range(0, len(text), columns):\n    wrapped_text += text[i:i+columns] + \"\\n\"\n  return wrapped_text\n \ntext = \"It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout.\"\nprint(wrap_text(text, 30)) \n\n# Prints\n# It is a long established \n# fact that a reader will \n# be distracted by the rea\n# dable content of a page \n# when looking at its layo\n# ut.", "category": "Python"}, {"instruction": "You need to implement a function that finds the longest string inside an array.", "input": "array = [\"cherry\", \"apple\", \"applepie\", \"strawberry\", \"raspberry\"]", "output": "def find_longest_str(arr):\n  longest_str = \"\"\n  for s in arr:\n    if len(s) > len(longest_str):\n      longest_str = s\n  return longest_str\n \nresult = find_longest_str(array)\nprint(result) # prints \"applepie\"", "category": "Python"}, {"instruction": "Write a function to delete an element from a given array", "input": "[1, 2, 3, 4], 3", "output": "def delete_element(arr, x):\n    new_arr = []\n    for i in arr:\n        if i != x: \n            new_arr.append(i)\n    return new_arr", "category": "Python"}, {"instruction": "Write a function that checks whether an array contains an element", "input": "[1, 5, 10]", "output": "def exists(arr, target):\n    for i in arr:\n        if i == target:\n            return True\n    return False", "category": "Python"}, {"instruction": "Write an algorithm that sorts the following list of integers in ascending order", "input": "[15, 5, 8, 0, 42]", "output": "def sort_list(lst):\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] > lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst", "category": "Python"}, {"instruction": "Write a function that takes a 2D array as input and returns the transposed array", "input": "[[1, 2], [3, 4], [5, 6]]", "output": "def transpose(arr):\n    new_arr = []\n    for i in range(len(arr[0])):\n        new_arr.append([row[i] for row in arr])\n    return new_arr", "category": "Python"}, {"instruction": "Create a function that returns the number of prime numbers between the numbers provided in the input.", "input": "start_num = 10\nend_num = 30", "output": "def count_primes(start_num, end_num):\n    primes_count = 0\n    for num in range(start_num, end_num + 1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                primes_count += 1\n    return primes_count", "category": "Python"}, {"instruction": "Write a function that computes the factorial of a positive integer.", "input": "8", "output": "def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n-1) \n\nprint(factorial(8)) # output: 40320", "category": "Python"}, {"instruction": "Convert a binary string to a decimal integer.", "input": "binString=\"11101\"", "output": "def binaryToDecimal(binString): \n    num = 0\n    for i in range(len(binString)): \n        num += int(binString[i]) * pow(2, len(binString)-1-i) \n    return num\n  \nbinString=\"11101\"\nbinaryToDecimal(binString) # output: 29", "category": "Python"}, {"instruction": "Compress a given string to shorter characters by replacing substrings of length 3.", "input": "string = \"aaabbcc\"", "output": "def compress(string):\n    compressed = \"\"\n    count = 1\n    for i in range(len(string)):\n        if (i+1 < len(string) and string[i] == string[i+1]):\n            count += 1\n        else:\n            if count > 3:\n                compressed += string[i] + str(count)\n            else:\n                compressed += string[i]*count\n            count = 1\n    return compressed\n\nstring = \"aaabbcc\"\nprint(compress(string)) # output: a3b2c2", "category": "Python"}, {"instruction": "Output the top 5 most common strings in a given list of strings.", "input": "[\"apple\", \"orange\", \"apple\", \"banana\", \"apple\", \"cherry\", \"banana\"]", "output": "from collections import Counter\nword_freq = Counter([\"apple\", \"orange\", \"apple\", \"banana\", \"apple\", \"cherry\", \"banana\"])\nwords = word_freq.most_common(5)\nfor word, freq in words:\n    print(word, freq)\n\nOutput:\napple 3\nbanana 2\norange 1\ncherry 1", "category": "Python"}, {"instruction": "Implement a search algorithm to find an element in an array.", "input": "Array: [2, 4, 6, 8, 10]\nElement to find: 8", "output": "def search(arr, elem):\n    for i in range(len(arr)):\n        if arr[i] == elem:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Edit the following code so that it prints the sum of all elements of given array", "input": "arr = [1,5,8,4,2]\ndef sumArray(arr):\n    for i in len(arr):\n        print(arr[i])", "output": "arr = [1,5,8,4,2]\ndef sumArray(arr):\n    total = 0\n    for i in arr:\n        total += i\n    print(total)", "category": "Python"}, {"instruction": "Write a routine to print the elements in a linked list.", "input": "", "output": "class Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n\ndef printList(head): \n    temp = head \n    while(temp): \n        print (temp.data, end=\" \") \n        temp = temp.next", "category": "Python"}]
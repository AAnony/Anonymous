[{"instruction": "Create a program that generates a random integer from 1 to 10.", "input": "", "output": "import random\n\nrandom_number = random.randint(1, 10)\nprint(\"A random number between 1 and 10 is: \" + str(random_number))", "category": "Python"}, {"instruction": "Write a method in Python which takes a positive integer and returns the sum of squares of all numbers smaller than the given number.", "input": "5", "output": "def sum_of_squares(n): \n    if n == 1: \n        return 1\n    else: \n        return n*n + sum_of_squares(n-1) \n\nnumber = 5\nresult = sum_of_squares(number)\nprint('The sum of squares of numbers smaller than {} is {}.'.format(number, result))", "category": "Python"}, {"instruction": "Sort a list of numbers so that the lowest number appears first.", "input": "n_list = [3, 9, 1, 4, 5]", "output": "def sort_list(n_list):\n    \"\"\"\n    Sort a given list of numbers in ascending order.\n\n    Parameters\n    ----------\n    n_list: list\n        The list of numbers to sort\n\n    Returns\n    -------\n    sorted_list : list\n        The sorted list\n    \"\"\"\n    sorted_list = sorted(n_list)\n    return sorted_list\n\nn_list = [3, 9, 1, 4, 5]\nprint(sort_list(n_list)) # Outputs [1, 3, 4, 5, 9]", "category": "Python"}, {"instruction": "Generate a random PIN of 8 characters.", "input": "", "output": "import random\n\ndef generate_pin():\n    \"\"\"\n    This function generates a random PIN of 8 characters.\n\n    Parameters\n    ----------\n    None\n\n    Returns\n    -------\n    pin : str\n        The generated PIN\n    \"\"\"\n    characters= \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n    pin = \"\"\n\n    for _ in range(8):\n        pin += random.choice(characters)\n    \n    return pin\n\nprint(generate_pin()) # Outputs a random PIN of 8 characters", "category": "Python"}, {"instruction": "Write a function to convert an array of strings to an array of floats.", "input": "string_arr=['1.1', '2.3', '3.4']", "output": "def array_to_floats(string_arr):\n    # Create an array to store the float values\n    float_arr = []\n    # Iterate over the given array and convert to float\n    for s in string_arr:\n        float_arr.append(float(s))\n    # Return the new array\n    return float_arr\n\nstring_arr=['1.1', '2.3', '3.4']\nresult = array_to_floats(string_arr)\nprint(\"The array as floats is:\", result)", "category": "Python"}, {"instruction": "Write a function to generate an array of all possible permutations of N numbers.", "input": "", "output": "def generate_permutations(n): \n  \n    if n == 0: \n        return [] \n    \n    if n == 1: \n        return [[1]] \n  \n    permutations = [] \n    for i in range(n): \n        permutations_n_1 = generate_permutations(n - 1) \n  \n        for perm in permutations_n_1: \n            for j in range(n): \n                r = perm.copy() \n                r.insert(j, n) \n                permutations.append(r) \n  \n    return permutations", "category": "Python"}, {"instruction": "Given a string, write code to remove all the consecutive characters and output the new string.", "input": "string='AAABBBCCC'", "output": "def remove_consecutive_chars(string):\n  # create an empty string\n  new_string = ''\n\n  # iterate over the characters of the given string\n  for i in range(len(string)-1):\n    if string[i] != string[i+1]:\n      new_string += string[i]\n  \n  # add the last character of the string to the output\n  new_string += string[-1]\n  # return the new string\n  return new_string\n\nstring='AAABBBCCC'\nresult = remove_consecutive_chars(string)\nprint(\"The new string is:\", result)", "category": "Python"}, {"instruction": "Complete the following function to return the indices at which the binary representation of a given number has no consecutive 1s.", "input": "num = 12", "output": "def find_indices(num):\n    # convert given number to binary\n    binary_num = bin(num)[2:]\n\n    # create an empty list to store required indices\n    indices_list = []\n    \n    # iterate over the binary number\n    for i in range(len(binary_num)-1):\n        if binary_num[i+1] != '1' or binary_num[i] != '1':\n            indices_list.append(i)\n   \n    # return the required indices\n    return indices_list\n\nnum = 12\nresult = find_indices(num)\nprint(\"The indices with no consecutive 1s are:\", result)", "category": "Python"}, {"instruction": "Implement a function to solve the following equation: x2+y2=z2", "input": "", "output": "def solve_eq(x, y, z):\n  '''This function will solve the equation: x^2 + y^2 = z^2.'''\n\n  # Use the Pythagorean Theorem\n  if x**2 + y**2 == z**2:\n    return True\n  else:\n    return False", "category": "Python"}, {"instruction": "Create a program that takes in two lists and prints out a new list with the elements from the first list followed by the elements from the second list.", "input": "list_1 = [1, 2, 3]\nlist_2 = [4, 5, 6]", "output": "# define a function to combine two lists into one\ndef combine_lists(list_1, list_2):\n    # create a new list\n    combined_list = []\n    \n    # append the elements from list 1\n    for ele in list_1:\n        combined_list.append(ele)\n\n    # append the elements from list 2    \n    for ele in list_2:\n        combined_list.append(ele)\n    \n    # return the combined list\n    return combined_list\n\n# input two lists\nlist_1 = [1, 2, 3]\nlist_2 = [4, 5, 6]\n\n# output the combined list\ncombined_list = combine_lists(list_1, list_2)\nprint(\"The combined list is \" + str(combined_list))", "category": "Python"}, {"instruction": "Create a Python class called Employee which contains the employee id and the name.", "input": "", "output": "# define the Employee class\nclass Employee:\n    # construct a new Employee instance\n    def __init__(self, id, name):\n        self.id = id\n        self.name = name\n\n# create a new Employee object\nemployee1 = Employee(1, \"John Doe\")\n\n# access the employee id and name\nprint(employee1.id)\nprint(employee1.name)", "category": "Python"}, {"instruction": "Create a class named 'Circle' which calculates the area and circumference given a radius.", "input": "", "output": "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * (self.radius**2)\n\n    def circumference(self):\n        return 2 * 3.14 * self.radius", "category": "Python"}, {"instruction": "Generate a python program to create a n-dimensional array filled with zeros.", "input": "n = 4", "output": "# Program to create a n-dimensional array filled with zeros \n\nimport numpy as np\n\n# Get the number of dimensions \nn = 4\n\n# Create an array of zeros of given size \narr = np.zeros((n,n,n,n))\n\nprint(arr)", "category": "Python"}, {"instruction": "Write a code to implement a round-robin scheduling algorithm.", "input": "processes = [10, 5, 7]\ntime_slice = 2", "output": "# Program to implement a round-robin scheduling algorithm\n\n# Get the list of processes and the time slice \nprocesses = [10, 5, 7]\ntime_slice = 2\n\n# Create an empty list to store the remaining burst time \nremaining_burst = []\n\n# Loop through all processes to get the remaining burst time \nfor process in processes:\n  remaining_burst.append(process)\n\n# Keep track of current time cycle \ntime = 0\n\n# Loop through the processes and implement round-robin scheduling\nwhile True:\n  done = True\n  \n  # Iterate through the processes\n  for i in range(len(processes)):\n    if remaining_burst[i] > 0:\n      done = False # Not done yet\n      \n      if remaining_burst[i] > time_slice:\n        # Increment timeline\n        time += time_slice\n        \n        # Reduce the remaining burst time \n        remaining_burst[i] -= time_slice\n      else:\n        # Increment timeline\n        time += remaining_burst[i]\n        \n        # Set remaining burst to 0 \n        remaining_burst[i] = 0\n\n  # Break the loop if all processes are done \n  if done:\n    break\n\nprint('Total time to schedule the processes is', time)", "category": "Python"}, {"instruction": "Write a code to simulate a random walk in two-dimensional space.", "input": "x_steps = 10", "output": "# Program to simulate a random walk in two-dimensional space\n\nimport random\n\nx_steps = 10\n\n# Initialize starting positions\nx = 0\ny = 0\n\n# Take a random step on each iteration\nfor _ in range(x_steps):\n  direction = random.randint(0, 3)\n  if direction == 0:\n    x += 1\n  elif direction == 1:\n    x -= 1\n  elif direction == 2:\n    y += 1\n  else:\n    y -= 1\n  \nprint(f'Final position is ({x},{y})')", "category": "Python"}, {"instruction": "Create a program to generate a random password of 10 characters consisting of both alphabets and numbers.", "input": "", "output": "# Program to generate a random password of 10 characters\n\nimport string \nimport random \n\n# Get all the symbols to use in the password \nsymbols = string.ascii_letters + string.digits \n\n# Generate a random password \npassword = ''.join(random.choice(symbols) for _ in range(10)) \n\nprint(password)", "category": "Python"}, {"instruction": "Rewrite the following code using the set module in Python", "input": "a = [1, 1, 2, 3, 4, 5, 5, 5]", "output": "import set\n\na = [1, 1, 2, 3, 4, 5, 5, 5]\na_set = set(a)\nnew_list = list(a_set)\nprint(new_list)", "category": "Python"}, {"instruction": "Find all duplicates in an array.", "input": "arr = [1, 2, 4, 2, 1, 5]", "output": "def find_duplicates(arr):\n    duplicates = []\n    seen = set()\n    for elem in arr:\n        if elem in seen:\n            duplicates.append(elem)\n        else:\n            seen.add(elem)\n    return duplicates", "category": "Python"}, {"instruction": "Generate a random code string with each character from A-Z and 0-10.", "input": "", "output": "import random\n\ndef random_code_string(length):\n    chars = [chr(i) for i in range(65, 91)] + [str(digit) for digit in range(10)]\n    code_string = \"\"\n    for _ in range(length):\n        random_char = random.choice(chars)\n        code_string += random_char\n    return code_string", "category": "Python"}, {"instruction": "Identify if a given integer is odd or even.", "input": "43", "output": "def identify_odd_even(num):\n    if num % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"", "category": "Python"}, {"instruction": "Sum every second element in an array.", "input": "arr = [1, 5, 4, 8, 10, 12]", "output": "def sum_second_elements(arr):\n    sum_num = 0\n    for i in range(1, len(arr), 2):\n        sum_num += arr[i]\n    return sum_num", "category": "Python"}, {"instruction": "Given a list of strings and a target string, return a list of strings which contain the target string", "input": "list_of_strings = [\"cat\", \"dog\", \"rat\", \"bat\"]\ntarget_string = \"at\"", "output": "list_of_strings = [\"cat\", \"dog\", \"rat\", \"bat\"]\ntarget_string = \"at\"\n\nresult = [string for string in list_of_strings if target_string in string]\n\nprint(result)", "category": "Python"}, {"instruction": "Given a 2D array, return the sums of all columns", "input": "arr = [[1,2,3],\n       [4,5,6],\n       [7,8,9]]", "output": "arr = [[1,2,3],\n       [4,5,6],\n       [7,8,9]]\n\nsums = []\n\nfor i in range(len(arr[0])):\n    total = 0\n    for row in arr:\n        total += row[i]\n    sums.append(total)\n\nprint(sums)", "category": "Python"}, {"instruction": "Given a collection of email addresses, group them by the domain", "input": "emails = [\"test@example.com\", \"example@example.org\", \"test@test.co.uk\"]", "output": "emails = [\"test@example.com\", \"example@example.org\", \"test@test.co.uk\"]\n\nfrom collections import defaultdict\n\nby_domain = defaultdict(list)\n\nfor email in emails:\n    domain = email.split(\"@\")[-1]\n    by_domain[domain].append(email)\n\nprint(dict(by_domain))", "category": "Python"}, {"instruction": "Given a list of words and a target word, determine if the target word is in the list", "input": "list_words = [\"apple\", \"banana\", \"orange\", \"mango\"]\ntarget_word = \"pineapple\"", "output": "list_words = [\"apple\", \"banana\", \"orange\", \"mango\"]\ntarget_word = \"pineapple\"\n\nif target_word in list_words:\n  print (\"Target word is in the list\")\nelse:\n  print (\"Target word is not in the list\")", "category": "Python"}, {"instruction": "Create a process to reverse a string without using any built-in functions.", "input": "string = \"Hello world\"", "output": "def reverse_string(string): \n  # Create an empty string \n  rev_string = \"\" \n  \n  # Iterate through the string and build the reversed string \n  for char in string: \n    rev_string = char + rev_string \n  \n  # Return the reversed string \n  return rev_string \n\nprint(reverse_string(string)) # dlrow olleH", "category": "Python"}, {"instruction": "Create an algorithm that uses a hash table to detect if an element is a duplicate.", "input": "array = [2, 3, 4, 5, 6, 3]", "output": "def detect_duplicate(array): \n  # Create a hash table to store elements in the array \n  hash_table = dict() \n  \n  # Iterate through the array, check if the elements are already stored in the hash table  \n  # If the elements are already stored in the hash table, return True \n  for element in array: \n    if element in hash_table: \n      return True \n    else: \n      # Else, add the element to the hash table \n      hash_table[element] = 1\n    \n  # Return False if no duplicates are found \n  return False\n\nprint(detect_duplicate(array)) # True", "category": "Python"}, {"instruction": "Create a process to sort an array of numbers from least to greatest.", "input": "arr = [3, 4, 12, 1, 5, 85]", "output": "def sort_array(arr): \n  # Loop through the array, swap each element until it is in order (ascending)\n  for i in range(len(arr) - 1): \n    for j in range(i + 1, len(arr)): \n      if arr[i] > arr[j]: \n        temp = arr[i] \n        arr[i] = arr[j] \n        arr[j] = temp \n  \n  # Return the sorted array \n  return arr\n\nprint(sort_array(arr)) # [1, 3, 4, 5, 12, 85]", "category": "Python"}, {"instruction": "Write a Python function that takes a string as an argument and checks if it contains the word \u201cPython\u201d.", "input": "text = \"This sentence does not contain the word Python\"", "output": "def contains_python(string): \n  if \"Python\" in string: \n    return True\n  else: \n    return False\n\nprint(contains_python(text)) # False", "category": "Python"}, {"instruction": "Create a class to save data of a user's account.", "input": "", "output": "class Account:\n    def __init__(self, username, password, email):\n        self.username = username\n        self.password = password\n        self.email = email\n    \n    def get_info(self):\n        return (self.username, self.password, self.email)", "category": "Python"}, {"instruction": "List all the prime numbers less than a specified number \u2018n\u2019", "input": "n = 10", "output": "def is_prime(n):\n    \"\"\"Returns True if n is a prime number and False otherwise.\"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef prime_numbers_less_than(n):\n    \"\"\"Returns a list of all prime numbers less than n.\"\"\"\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\nn = 10\nprint(prime_numbers_less_than(n)) # [2, 3, 5, 7]", "category": "Python"}, {"instruction": "Count the number of leaf nodes in a binary tree.", "input": "tree = \n{ \n    \"data\": 10, \n    \"left\": { \n        \"data\": 20, \n        \"left\": { \n            \"data\": 40 \n        }, \n        \"right\": { \n            \"data\": 50 \n        } \n    }, \n    \"right\": { \n        \"data\": 30, \n        \"left\": { \n            \"data\": 60 \n        } \n    } \n}", "output": "def countLeafNodes(tree):\n    if tree is None:\n        return 0\n    if tree[\"left\"] is None and tree[\"right\"] is None:\n        return 1 \n    leftLeaf = countLeafNodes(tree[\"left\"])\n    rightLeaf = countLeafNodes(tree[\"right\"])\n    return leftLeaf + rightLeaf\n\ntree = { \n    \"data\": 10, \n    \"left\": { \n        \"data\": 20, \n        \"left\": { \n            \"data\": 40 \n        }, \n        \"right\": { \n            \"data\": 50 \n        } \n    }, \n    \"right\": { \n        \"data\": 30, \n        \"left\": { \n            \"data\": 60 \n        } \n    } \n} \n\nprint(countLeafNodes(tree)) # 3", "category": "Python"}, {"instruction": "Rewrite the code so that it can run in Python 3 instead of Python 2.", "input": "#!/usr/bin/env python\nprint 'Hello, world!'", "output": "#!/usr/bin/env python\n\nprint('Hello, world!')", "category": "Python"}, {"instruction": "Build a TensorFlow model for classification of a 2-D dataset.", "input": "X = [[1, 2], [3, 4], [5, 6]]\nY = [0, 1, 1]", "output": "\"\"\"\nBuild a TensorFlow model for classification of a 2-D dataset.\n\nInput:\nX = [[1, 2], [3, 4], [5, 6]]\nY = [0, 1, 1]\n\nOutput:\nimport tensorflow as tf\n\n# data\nX = tf.constant([[1, 2], [3, 4], [5, 6]], dtype=tf.float32)\nY = tf.constant([0, 1, 1], dtype=tf.float32)\n\n# model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(2, activation='relu'))\nmodel.add(tf.keras.layers.Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(X, Y, epochs=50, batch_size=3)\n\"\"\"", "category": "Python"}, {"instruction": "Design a code snippet to sort a hashtable by its keys.", "input": "{8: \"hello\", 3: \"goodbye\", 2: \"aloha\", 4: \"bonjour\", 6: \"ni hao\"}", "output": "// a function to sort the hashtable by its keys\nfunc sortHashTableKeys(hashTable map[int]string) map[int]string {\n    // a slice to store the keys in order\n    var keys []int\n    for key := range hashTable {\n        keys = append(keys, key)\n    }\n\n    // sort the slice \n    sort.Ints(keys)\n    \n    // create a new map with the sorted keys\n    sortedHashTable := make(map[int]string)\n    for _, key := range keys {\n        sortedHashTable[key] = hashTable[key]\n    }\n\n    return sortedHashTable\n}", "category": "Python"}, {"instruction": "Write a python code snippet to calculate the sum of any number of integers.", "input": "num1 = 10\nnum2 = 6 \nnum3 = 8", "output": "sum = num1 + num2 + num3\nprint(\"The sum is\", sum)", "category": "Python"}, {"instruction": "Create a function that takes a single argument and returns a string describing the type of argument.", "input": "", "output": "def get_argument_type(arg):\n    if isinstance(arg, str):\n        return 'string'\n    if isinstance(arg, int):\n        return 'integer'\n    if isinstance(arg, float):\n        return 'float'\n    if isinstance(arg, list):\n        return 'list'\n    if isinstance(arg, dict):\n        return 'dictionary'", "category": "Python"}, {"instruction": "Suggest an algorithm to find the longest common sub-string in two strings", "input": "Two strings of length n and m", "output": "A possible algorithm to find the longest common sub-string in two strings is the dynamic programming approach. The algorithm works by comparing the two given strings letter by letter and storing the results in a two-dimensional array. The algorithm checks the characters at each index of the given strings and if they are equal, the value of the corresponding cell is set to 1 plus the previous diagonal cell's value. If the characters are not equal, the cell is set to 0. The longest sub-string is then determined by traversing through the matrix and looking for the maximum value.", "category": "Python"}, {"instruction": "Suggest an appropriate data structure to store the test scores of a class", "input": "Test scores of each student in the class", "output": "An appropriate data structure to store the test scores of a class is a nested dictionary. The outer dictionary will have the student's name as the key and the inner dictionary will have the test name as the key and the score as the value. For example, if we have the test scores for three students for two tests, we can store it as follows: \n\nscores = { \n    'John': { \n        'Test1': 95,\n        'Test2': 73\n    }, \n    'Adam': { \n        'Test1': 87, \n        'Test2': 86 \n    }, \n    'Sarah': { \n        'Test1': 76, \n        'Test2': 75 \n    }\n}", "category": "Python"}, {"instruction": "Suggest a data structure and implementation to store a list of vehicles", "input": "A list of cars and buses", "output": "A list of vehicles can be stored in an adjacency list data structure. Each node in the graph represents either a car or a bus. The edges link the respective cars and buses, indicating their connectivity. For example, if we have a list of cars and buses, we can store it as follows: \n\ngraph = {\n    'cars': {'car1', 'car2', ...}, \n    'buses': {'bus1', 'bus2', ...}, \n    'edges': { \n        ('car1', 'bus1'), \n        ('car2', 'bus2'), \n        ...\n    } \n}", "category": "Python"}, {"instruction": "Given the following code snippet, write the code to achieve the expected output", "input": "def convert_to_title_case(input):\n    # Expected Output:\n    # input = \"this is a Title\"\n    # Output = This Is A Title", "output": "def convert_to_title_case(input):\n    words = input.split(' ')\n    output = []\n    for word in words:\n        output.append(word.capitalize())\n    return ' '.join(output)\n\n# Expected Output:\ninput = \"this is a title\"\n# Output = This Is A Title\nprint(convert_to_title_case(input))", "category": "Python"}, {"instruction": "Explain why the following code snippet produces the output it does", "input": "lst = [[1, 2], [1, 2], [3, 4]]\n[x for i in lst for x in i]", "output": "The code snippet is using a nested list comprehension to flatten the list ``lst``. The outer loop iterates over each sublist in the list while the inner loop iterates over each element of the sublist. As a result, the output is a flattened list containing all the elements in the original list. In this case, the output is [1, 2, 1, 2, 3, 4].", "category": "Python"}, {"instruction": "Write a Python function that prints the frequencies of even and odd numbers in a given array.", "input": "[2, 5, 4, 6, 8, 10]", "output": "def frequency_of_odd_and_even(arr):\n    freq_even = 0\n    freq_odd = 0\n    for i in arr:\n        if i % 2 == 0:\n            freq_even += 1\n        else:\n            freq_odd += 1\n    print(\"Frequency of even numbers:\", freq_even)\n    print(\"Frequency of odd numbers:\", freq_odd)", "category": "Python"}, {"instruction": "Create a function to sort a list of numbers without using python's built-in sort function.", "input": "[3,5,4,2,1]", "output": "# Function to sort a list of numbers without using Python's built-in sort function\ndef my_sort(numbers):\n    n = len(numbers)\n\n    for i in range(n): \n        for j in range(0, n-i-1):\n            if numbers[j] > numbers[j+1] :\n                numbers[j], numbers[j+1] = numbers[j+1], numbers[j]\n                \n    return numbers\n\n# Example list\nlist = [3,5,4,2,1]\nprint(my_sort(list))", "category": "Python"}, {"instruction": "Create an HTTP request to retrieve data from an API.", "input": "API_URL = \"https://example.com/api/get_data\"", "output": "import requests\n\nresponse = requests.get(API_URL)\ndata = response.json()", "category": "Python"}, {"instruction": "Create a for loop for copying an array.", "input": "arr = [1, 2, 3, 4, 5]", "output": "arr_copy = []\nfor i in arr:\n    arr_copy.append(i)", "category": "Python"}, {"instruction": "Insert a line into the code to improve its efficiency.", "input": "def double_list(lst):\n    for i in range(len(lst)):\n        lst[i] *= 2", "output": "def double_list(lst):\n    output_list = [x * 2 for x in lst]\n    return output_list", "category": "Python"}, {"instruction": "Find the sum of all even numbers in the following list (Python code):", "input": "[1, 4, 6, 7, 8, 12, 19]", "output": "sum_even_num = 0\nfor num in [1, 4, 6, 7, 8, 12, 19]:\n    if num % 2 == 0:\n        sum_even_num = sum_even_num + num \nprint(sum_even_num)", "category": "Python"}, {"instruction": "Create a program that prints a given 2D array in a spiral form.", "input": "a = [[1,2,3],[4,5,6],[7,8,9]]", "output": "def spiral_print(a):\n    m = len(a)\n    n = len(a[0])\n \n    t = 0   #top\n    b = m-1 #bottom\n    l = 0   #left\n    r = n-1 #right\n\n    dir = 0\n    while l<=r and t<=b:\n\n        if dir == 0:\n            for i in range(l, r+1):\n                print(a[t][i], end=\" \")\n            t += 1\n        elif dir == 1:\n            for i in range(t, b+1):\n                print(a[i][r], end=\" \")\n            r -= 1\n        elif dir == 2:\n            for i in range(r, l-1, -1):\n                print(a[b][i], end=\" \")\n            b -= 1\n        elif dir == 3:\n            for i in range(b, t-1, -1):\n                print(a[i][l], end=\" \")\n            l += 1\n\n        dir=(dir+1)%4", "category": "Python"}, {"instruction": "Create a function that takes a string as an argument and checks if all the characters in the string are unique, and returns a boolean.", "input": "", "output": "def are_all_characters_unique(string):\n    seen_characters = set()\n    for c in string:\n        if c in seen_characters:\n            return False\n        seen_characters.add(c)\n    return True", "category": "Python"}, {"instruction": "Create a function that takes a list of strings and returns a new list of strings with the first letter of each string as capital.", "input": "names = [\"mary\", \"john\", \"joseph\"]", "output": "def capitalize_names(names):\n new_names = []\n for name in names:\n    new_name = name[0].capitalize() + name[1:]\n    new_names.append(new_name)\n return new_names", "category": "Python"}, {"instruction": "Write a code to identify palindromic numbers between 1 and a given number n.", "input": "", "output": "def printPalindromicNumbers(n): \n    for num in range(1, n + 1):\n        s = str(num)\n        if(s == s[::-1]):\n            print(num, end=\" \")\n\nprintPalindromicNumbers(100)", "category": "Python"}, {"instruction": "Describe the differences between np.array and a list.", "input": "", "output": "Numpy arrays are more efficient than lists as they are homogeneous in nature. This means that all the items in a numpy array must be of the same data type, while a list can contain items of any data type. Additionally, numpy arrays can be multi-dimensional while lists are only one-dimensional. Numpy arrays can be indexed and sliced the same way as lists. However, operations on numpy arrays are much faster than operations on lists. Lastly, numpy arrays support vectorization which allows for efficient computation.", "category": "Python"}, {"instruction": "Construct a boolean check to detect if a given string contains the word \"hello\".", "input": "", "output": "def contains_hello(input_string):\n    return \"hello\" in input_string", "category": "Python"}, {"instruction": "Use NLTK to analyse the sentiment of a given text.", "input": "The movie is awesome", "output": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n \nsid = SentimentIntensityAnalyzer()\n \ntext = \"The movie is awesome\"\n  \nscores = sid.polarity_scores(text)\n  \nprint(scores['compound'])\n\n# Output\n0.6249", "category": "Python"}, {"instruction": "Write a Python script to determine how many lowercase letters are in a given string.", "input": "string = \"Hello World!\"", "output": "\"\"\"\nPython script to determine how many lowercase letters are in a given string \n\"\"\"\n\n# Initialize a variable to count the lowercase letters\nlowercase_letter_count = 0\n\n# Loop through each character in the string\nfor char in string:\n    # Check if the character is a lowercase letter\n    if char.islower():\n        # If yes, then increment the counter\n        lowercase_letter_count += 1\n\n# Print the total number of lowercase letters\nprint(lowercase_letter_count)", "category": "Python"}, {"instruction": "Write a code to construct the following rectangle pattern", "input": "6", "output": "def drawRectangle(size):\n    for i in range(size):\n        print(\"* \" * size) \ndrawRectangle(6)", "category": "Python"}, {"instruction": "Implement a function to calculate the greatest common divisor", "input": "42, 56", "output": "def gcd(a, b):\n    while b > 0:\n        a, b = b, a % b\n    return a\nprint(gcd(42, 56))", "category": "Python"}, {"instruction": "Write a python function that takes two strings as an argument and returns the True if they are anagrams of each other, else False.", "input": "\"rat\" and \"tar\"", "output": "def check_anagrams(str1,str2):\n    str1_list = list(str1) \n    str1_list.sort() \n    str2_list = list(str2) \n    str2_list.sort() \n    return (str1_list == str2_list) \n  \n# Driver code  \nstr1 = \"rat\"\nstr2 = \"tar\"\nif check_anagrams(str1, str2): \n    print(\"The strings are anagrams.\")\nelse:\n    print(\"The strings aren't anagrams.\")", "category": "Python"}, {"instruction": "Update the given code to generate the correct output", "input": "def func(x, n):\n    s = 0\n    for i in range (n):\n        s += (x**i)\n    return s\n\nOutput: The sum of series x^1 + x^2 + x^3 + ... + x^n is", "output": "def func(x, n):\n    s = 0\n    for i in range (n):\n        s += (x**i)\n    return s\n\ndef generateSumString(x, n):\n    result = \"The sum of series \"\n    for i in range(1, n+1):\n        result += x + \"^\" + str(i)\n        if(i != n):\n            result += \" + \"\n        else:\n            result += \" is\"\n    return result\n\ndef main():\n   x = 4\n   n = 5 \n   print(generateSumString(x, n), func(x,n))\n\nmain()", "category": "Python"}, {"instruction": "Find out the number of odd numbers in an array", "input": "[2, 9, 0, 5, 3]", "output": "def odd_num(arr): \n    count = 0\n    for num in arr: \n        if num % 2 != 0: \n            count += 1\n    return count \n        \n# Test Array \narr = [2, 9, 0, 5, 3] \n# Function Call \nodd_num(arr)", "category": "Python"}, {"instruction": "In Python, write code to sort a list of integers in ascending order.", "input": "[9, 15, 5, 11, 4]", "output": "def sort_list(list_of_numbers):\n   list_of_numbers.sort()\n   return list_of_numbers\n\nprint(sort_list([9, 15, 5, 11, 4])) # Output: [4, 5, 9, 11, 15]", "category": "Python"}, {"instruction": "Output a list of all even numbers between two given positive integers m and n.", "input": "m=2, n=10", "output": "def evenNumbers(m,n):\n    evenNum=[]\n    for i in range(m,n+1):\n        if i%2 == 0:\n            evenNum.append(i)\n    return evenNum", "category": "Python"}, {"instruction": "Create a Python class named 'Student' that contains the name, age and grade of a student.", "input": "", "output": "class Student:\n  def __init__(self, name, age, grade):\n    self.name = name\n    self.age = age\n    self.grade = grade", "category": "Python"}, {"instruction": "Write a code to print the common elements of two given arrays", "input": "arr1 = [2, 3, 4, 5]\narr2 = [3, 6, 7, 8]", "output": "def common_elements(arr1, arr2):\n    common = []\n    for i in arr1:\n        if i in arr2:\n            common.append(i)\n    return common", "category": "Python"}, {"instruction": "Create a class in Python that takes a list of numbers and finds the average.", "input": "list: [4, 5, 6]", "output": "class AverageCalculator:\n    def __init__(self, numbers):\n        self.numbers = numbers\n    \n    def calculate_average(self): \n        total = 0\n        for item in self.numbers:\n            total += item\n        return total / len(self.numbers)", "category": "Python"}, {"instruction": "Generate an algorithm in any language that can find the sum of the numbers in a given array", "input": "", "output": "Function sumArray (arr[])\n{\n    sum = 0\n    for i = 0 to arr.length - 1\n        sum += arr[i]\n    end for\n    return sum\n}", "category": "Python"}, {"instruction": "Create a Python code to print out all the common elements in two lists.", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [2, 3, 4, 6]", "output": "def get_common_elements(list1, list2):\n    \"\"\"\n    Function to get all the common elements in two lists.\n    \n    Arguments:\n        list1 {list}: The first list.\n        list2 {list}: The second list.\n    \n    Returns:\n        list: A list containing all the common elements in both lists.\n    \"\"\"\n    common_elements = []\n    for element in list1:\n        if element in list2:\n            common_elements.append(element)\n    return common_elements", "category": "Python"}, {"instruction": "Create a Python function to find all unique values in a list.", "input": "L = [1, 2, 4, 2, 1]", "output": "def find_unique_values(L):\n    \"\"\"\n    Function to find all the unique values in a list.\n    \n    Arguments:\n        L {list}: The list to search in.\n    \n    Returns:\n        set: The set of unique values.\n    \"\"\"\n    unique_values = set()\n    for item in L:\n        if item not in unique_values:\n            unique_values.add(item)\n    return unique_values", "category": "Python"}, {"instruction": "Create a Python function to return the frequency table of a list of words.", "input": "words = [\"apple\", \"mango\", \"cherry\", \"banana\", \"apple\", \"mango\"]", "output": "def create_frequency_table(words):\n    \"\"\"\n    Function to create a frequency table for a given list of words.\n    \n    Arguments:\n        words {list}: List of words.\n    \n    Returns:\n        dictionary: Frequency table of words.\n    \"\"\"\n    frequency_table = dict()\n    for word in words:\n        if word in frequency_table:\n            frequency_table[word] += 1\n        else:\n            frequency_table[word] = 1\n    return frequency_table", "category": "Python"}, {"instruction": "Create a function in Python to take a positive integer and return its factorial.", "input": "num = 5", "output": "def factorial(num): \n    \"\"\"Function to return the factorial of a positive integer\"\"\"\n    if(num <=1): \n        return 1\n    else: \n        return(num*factorial(num-1))", "category": "Python"}, {"instruction": "Explain the functional programming paradigm.", "input": "", "output": "Functional Programming is a programming paradigm that emphasizes the use of functions, or predefined sequences of commands, to produce desired results. This paradigm tries to avoid state and mutable data, and instead use higher-order functions to pass functions as arguments. This makes it easier to understand, debug, and test code as functions are isolated from one another, making it less prone to errors.", "category": "Python"}, {"instruction": "Generate a list of unique numbers between A and B where both A and B are input parameters.", "input": "a = 0\nb = 5", "output": "def create_list(a, b):\n\tresult = []\n\tfor i in range(a, b+1):\n\t\tif i not in result:\n\t\t\tresult.append(i)\n\treturn result\n\na = 0\nb = 5", "category": "Python"}, {"instruction": "Write a function to check if the parentheses in given expression are balanced or not.", "input": "expression = \"((A+B)-C)*D+((E-F)*G\"", "output": "def is_balanced(expression):\n\topen_paratheses = 0\n\tfor char in expression:\n\t\tif char == '(':\n\t\t\topen_paratheses += 1\n\t\telif char == ')':\n\t\t\topen_paratheses -= 1\n\t\tif open_paratheses < 0:\n\t\t\treturn False\n\treturn open_paratheses == 0\n\nexpression = \"((A+B)-C)*D+((E-F)*G\"", "category": "Python"}, {"instruction": "Suggest a code in Python that will calculate the area of any given shape.", "input": "", "output": "def area(shape):\n    if shape == \"rectangle\":\n        length = float(input(\"Please enter the length: \"))\n        width = float(input(\"Please enter the width: \"))\n        return length * width\n\n    elif shape == \"triangle\":\n        base = float(input(\"Please enter the base: \"))\n        height = float(input(\"Please enter the height: \"))\n        return 0.5 * base * height\n\n    elif shape == \"circle\":\n        r = float(input(\"Please enter the radius: \"))\n        return 3.14 * r * r", "category": "Python"}, {"instruction": "Generate a function in python that takes two lists and returns the product of their longest common substrings.", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [2, 3, 5, 7]", "output": "def longest_common_substring(list1, list2):\n    longest_substring = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                current_substring = 1\n                k, l = i+1, j+1\n                while k < len(list1) and l < len(list2) and list1[k] == list2[l]:\n                    current_substring += 1\n                    k += 1\n                    l += 1\n                longest_substring = max(longest_substring, current_substring)\n\n    if longest_substring == 0:\n        return 0\n    else:\n        return list1[0] * list2[0] * longest_substring", "category": "Python"}, {"instruction": "Write a Python function that takes a number n as parameter and prints out all even numbers from 2 to n.", "input": "", "output": "def printEven(n): \n   for i in range(2, n+1): \n      if(i % 2 == 0): \n         print(i, end = \" \")", "category": "Python"}, {"instruction": "Modify the following Python code to print the program output unique and ordered.", "input": "x = [1, 2, 3, 4, 4, 3, 1]\nprint(x)", "output": "x = [1, 2, 3, 4]\ny = list(set(x))\ny.sort()\nprint(y)", "category": "Python"}, {"instruction": "Generate a graphical representation of a dataset.", "input": "The following data describes the height of students in grade 8:\n\nX: 155 cm , 159 cm , 166 cm , 165 cm, 186 cm\n\nY: 50 kg , 60 kg , 55 kg, 45 kg , 75 kg", "output": "import matplotlib.pyplot as plt\n\nx_list = [155, 159, 166, 165, 186]\ny_list = [50, 60, 55, 45, 75]\n\nplt.scatter(x_list, y_list )\n\nplt.xlabel(\"Height (cm)\")\nplt.ylabel(\"Weight (kg)\")\nplt.title(\"Height vs Weight of Grade 8 Students\")\n\nplt.show()", "category": "Python"}, {"instruction": "Train an AI model to predict whether an email is spam or not.", "input": "", "output": "import nltk\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# loading data\ndata = [('This is an email about about a promotion', 'spam'),\n\t('We want to transfer money to your account', 'spam'),\n\t('This email is about programming', 'not_spam'),\n\t('There is a new version of python', 'not_spam'),\n]\n\n# extracting features\nX, y = [], []\nfor feat, lab in data:\n\tX.append(feat)\n\ty.append(lab)\n\ncv = CountVectorizer()\nX_vect = cv.fit_transform(X)\n\n# training the model\nmodel = MultinomialNB()\nmodel.fit(X_vect, y)\n\n# predicting\nprediction = model.predict(cv.transform([\"This is an email about a discount sale\"]))\nprint(prediction)\n\n# Output\n['spam']", "category": "Python"}, {"instruction": "Develop an algorithm that checks for balanced parentheses in a given string.", "input": "", "output": "def is_balanced(input_string):\n    stack = []\n    for char in input_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0", "category": "Python"}, {"instruction": "Estimate the area of a shape using data from the given Pandas dataframe.", "input": "Stored in the form of a Pandas dataframe.\n0    1    2   \na    5    b   \n4    4    5", "output": "", "category": "Python"}, {"instruction": "Design a machine learning model to classify an article as either a sports article or a food article.", "input": "", "output": "The machine learning model can be designed as a sequence of layers built with Keras, followed by a dense layer with two units \u2013 one for sports and one for food, and a softmax activation function to achieve the final output. We can feed the model with a dataset consisting of article texts labeled as 'sports' or 'food'. Then, the model can be trained using gradient descent. After training is complete, the model can be used to classify new articles as either 'sports' or 'food' articles.", "category": "Python"}, {"instruction": "Write a paint program that displays a 10x10 blue square on the screen.", "input": "", "output": "import tkinter as tk\n\n# Create a window\nroot = tk.Tk()\n\n# Create a canvas \ncanvas = tk.Canvas(root, width=100, height=100)\n\n# Create a blue square\ncanvas.create_rectangle(0, 0, 100, 100, fill=\"blue\")\n\n# Pack the canvas\ncanvas.pack()\n\n# Display the window\nroot.mainloop()", "category": "Python"}, {"instruction": "Create a class in Python named 'Car' with attributes 'color' and 'make', and methods 'start' and 'stop'.", "input": "", "output": "class Car:\n    def __init__(self, color, make):\n        self.color = color\n        self.make = make\n    \n    def start(self):\n        print(\"Car started.\")\n        \n    def stop(self):\n        print(\"Car stopped.\")", "category": "Python"}, {"instruction": "Write a Python program to prompt the user for a string and print the number of unique characters it contains.", "input": "", "output": "user_string = input(\"Please enter a string: \")\n\nunique_chars = set()\n\nfor char in user_string:\n    unique_chars.add(char)\n\nprint(\"The string contains\", len(unique_chars), \"unique character(s).\")", "category": "Python"}, {"instruction": "Explain the difference between subclasses and superclasses.", "input": "", "output": "A superclass is a class from which other classes can inherit methods and properties. A subclass is a class that has inherited a superclass' methods and properties. In object-oriented programming (OOP), a class can be both a superclass and a subclass simultaneously. When a class inherits from another class it is said to extend the superclass, thereby creating a subclass. As such, a subclass has all the properties and methods of its superclass, as well as additional properties and methods that are unique to the subclass itself.", "category": "Python"}, {"instruction": "Create a python program that takes a string as input and prints the length of the longest substring without repeatingcharacters.", "input": "\"abcabcbb\"", "output": "def find_longest_substring(s):\n  max_length = 0\n  start = 0\n  usedChar = {}\n\n  for i in range(len(s)):\n    if s[i] in usedChar and start <= usedChar[s[i]]:\n        start = usedChar[s[i]] + 1\n    else:\n        max_length = max(max_length, i - start + 1)\n\n    usedChar[s[i]] = i\n\n  return max_length\n\ninput_string = \"abcabcbb\"\n\nprint(\"The length of longest substring without repeating characters is: {}\".format(find_longest_substring(input_string)))", "category": "Python"}, {"instruction": "Suggest a technique to detect plagiarism in programming assignments.", "input": "", "output": "One technique to detect plagiarism in programming assignments is to compute the similarity between submissions and reference solutions. This can be done by extracting the key pieces of code from submissions, such as functions and loops, and then comparing them against the reference solution. If the extracted pieces of code are more similar than would be expected by chance, it could be an indication of plagiarism.", "category": "Python"}, {"instruction": "Add a try-catch block around the code example that catches an exception if it is thrown.", "input": "with open(\"myfile.txt\") as f:\n    for line in f:\n        print(line)", "output": "try:\n    with open(\"myfile.txt\") as f:\n        for line in f:\n            print(line)\nexcept:\n    print(\"An exception has been thrown\")", "category": "Python"}, {"instruction": "Write a Python program to parse a date string and display the date in ISO 8601 format.", "input": "date_string = '21 May 2021'", "output": "from datetime import datetime\nimport re\n\n# Parse the date string \ndate = datetime.strptime(date_string, '%d %B %Y')\n\n# Convert the date to ISO 8601 format\niso_8601 = date.strftime(\"%Y-%m-%d\")\n\n# Print the ISO 8601 formatted date\nprint(iso_8601)", "category": "Python"}, {"instruction": "Convert an array of tuples of 2 numbers into an array of complex numbers.", "input": "tuple_array = [(3,4), (5,6), (7,8)]", "output": "import numpy as np \n\n# Convert the array of tuples into an array of complex numbers \ncomplex_arr = np.array(tuple_array, dtype=complex)\n\n# Print the complex array\nprint(complex_arr)", "category": "Python"}, {"instruction": "Perform a linear search on an array of 10 numbers and return the index for the target number.", "input": "nums = [2, 8, -4, 1, 0, 5, 3, 9, 6, 10]\ntarget_num = 8", "output": "def linear_search(nums, target_num):\n    # Get the length of the array\n    len_nums = len(nums)\n\n    # Loop through the array to find the index of the target number\n    for i in range(len_nums):\n        if nums[i] == target_num:\n            # Return the index of the target number\n            return i\n\n# Get the index of the target number\nindex = linear_search(nums, target_num)\n\n# Print the index\nprint(index)", "category": "Python"}, {"instruction": "Using the turtle module, create a drawing of a triangle.", "input": "import turtle\n<noinput>", "output": "import turtle\n# create an instance of Turtle class\nmy_turtle = turtle.Turtle()\nmy_turtle.speed(0)\n# draw a triangle\nmy_turtle.forward(100)\nmy_turtle.left(120)\nmy_turtle.forward(100)\nmy_turtle.left(120)\nmy_turtle.forward(100)\n# finish the drawing\nmy_turtle.done()", "category": "Python"}, {"instruction": "Compare two strings and return the index of the first character that is unequal in the two strings.", "input": "string1 = \"Hello world!\"\nstring2 = \"Howdy world!\"", "output": "def get_index_of_first_diff(string1, string2):\n    # Get the length of the strings \n    len_1 = len(string1)\n    len_2 = len(string2)\n\n    # Get the length of the shorter string\n    len_shorter = min(len_1, len_2)\n\n    # Compare the two strings character by character\n    for i in range(len_shorter):\n        if string1[i] != string2[i]:\n            # Return the index of the first differing character\n            return i\n\n# Get the index of first differing character\nindex = get_index_of_first_diff(string1, string2)\n\n# Print the index\nprint(index)", "category": "Python"}, {"instruction": "Create an instance of an Apache Spark DataFrame using an existing Pandas dataframe.", "input": "import pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})", "output": "from pyspark.sql import SparkSession\n\n# Create SparkSession object\nspark = SparkSession.builder.getOrCreate()\n\n# Create Spark DataFrame using Pandas df\nspark_df = spark.createDataFrame(df)", "category": "Python"}, {"instruction": "Explain the purpose of the %i in a Python format string.", "input": "", "output": "The %i in Python is a special format specifier used to format integer numbers. When used in a format string, it will convert the number to an integer and insert it into the output string. This can be used to easily format numbers when printing output.", "category": "Python"}, {"instruction": "Re-write this Python code as a JavaScript function.", "input": "def double_number(num):\n  return num * 2", "output": "function doubleNumber(num) {\n  return num * 2;\n}", "category": "Python"}, {"instruction": "Multiply two input matrices using numpy.", "input": "matrix A:\n[[1,2],\n[3,4]]\n\nmatrix B:\n[[5,6],\n[7,8]]", "output": "import numpy as np\nA = np.array([[1,2], [3,4]]) \nB = np.array([[5,6], [7,8]]) \n\nC = np.matmul(A,B)\nprint(C)", "category": "Python"}, {"instruction": "Create a function in Python that takes two integers N and M and prints out all possible combinations of numbers that add up to N and are at most M.", "input": "N=8, M=3", "output": "def combinations_with_sum(n, m): \n  for i in range(1, m): \n    for j in range(i, m):\n      if i + j == n:\n        print(i, '+', j, '=', n)", "category": "Python"}, {"instruction": "Create an asyncio event loop and execute a coroutine.", "input": "", "output": "import asyncio\n\nasync def myfunc():\n   print(\"I'm in a coroutine\")\n\nloop = asyncio.get_event_loop()\ntry:\n    loop.run_until_complete(myfunc())\n\nfinally:\n    loop.close()", "category": "Python"}, {"instruction": "Create a Python program that finds the highest number in a list of numbers.", "input": "[2, 4, 32, 41, 19]", "output": "# Initializing list\nlist_of_numbers = [2, 4, 32, 41, 19]\n\n# Finding the highest number\nmax_number = max(list_of_numbers)\n\n# Printing the result\nprint(max_number)\n\n# Output: 41", "category": "Python"}, {"instruction": "Create a function that takes in an array of strings and outputs an array of tuples of the first and last word in each string.", "input": "array = [\"Hello World\", \"Foo Bar\", \"Goodbye Moon\"]", "output": "def first_last_words(arr):\n    \"\"\"Gets the first and last word from each string.\n    \n    Parameters:\n    arr (list): array of strings\n    \"\"\"\n    result = []\n    for string in arr:\n        words = string.split()\n        result.append((words[0], words[-1]))\n    return result\n\nif __name__ == '__main__':\n    array = [\"Hello World\", \"Foo Bar\", \"Goodbye Moon\"]\n    print(first_last_words(array))", "category": "Python"}, {"instruction": "Write a code to check if a string contains only digits and output true or false.", "input": "string = \"1234567890\"", "output": "def is_digits(str):\n    \"\"\"Checks if a string contains only digits.\n    \n    Parameters:\n    str (str): string to be tested\n    \"\"\"\n    return str.isdigit()\n\nif __name__ == '__main__':\n    string = \"1234567890\"\n    print(is_digits(string))", "category": "Python"}, {"instruction": "Find the number of different words in a string of unlimited length.", "input": "string = \"This is a long sentence about nothing.\"", "output": "def word_count(str):\n    \"\"\"Counts the number of different words in a string of unlimited length.\n    \n    Parameters:\n    str (str): string to be counted\n    \"\"\"\n    words = str.split()\n    return len(set(words))\n\nif __name__ == '__main__':\n    string = \"This is a long sentence about nothing.\"\n    print(word_count(string))", "category": "Python"}, {"instruction": "Compute the sum of all elements in a numpy array.", "input": "import numpy as np\narr = np.array([[1,2,3],[4,5,6]])", "output": "import numpy as np\narr = np.array([[1,2,3],[4,5,6]])\n\n# Get the sum of all elements in the array\ntotal_sum = np.sum(arr)\n\n# Print the sum\nprint(total_sum)", "category": "Python"}, {"instruction": "Create a dictionary such that each element in the list is a key and the respective value is its length.", "input": "words = ['cat', 'dog', 'elephant']", "output": "#Create a new dictionary\nwordLengths = {}\n\n#Fill in the dictionary with the words as keys and their respective lengths as values\nfor word in words:\n    wordLengths[word] = len(word)\n\n#Print the populated dictionary\nprint(wordLengths)", "category": "Python"}, {"instruction": "Create a function that filters the numbers in the list and returns a list of prime numbers only.", "input": "list3 = [3, 4, 5, 7, 11, 13]", "output": "def primeNums(inputList):\n    #Create an empty list\n    primes = []\n\n    #Iterate over the list\n    for num in inputList:\n        #Check if the number is prime\n        isPrime = True\n        for i in range(2, num):\n            if num % i == 0:\n                isPrime = False\n        #Add the number to the list if prime\n        if isPrime:\n            primes.append(num)\n\n    #Return the list\n    return primes\n\n#Print the list\nprint(primeNums(list3))", "category": "Python"}, {"instruction": "Provide an example of a Python class and its elements.", "input": "", "output": "class Car: \n    def __init__(self, color, make, model): \n        self.color = color \n        self.make = make \n        self.model = model \n    \n    def start(self): \n        print(\"Engine started!\") \n\nford_mustang = Car('Red', 'Ford', 'Mustang') \nford_mustang.start()", "category": "Python"}, {"instruction": "Compose a program to reverse a list of numbers", "input": "", "output": "def reverse_nums(num_list):\n    n = len(num_list)\n    for i in range(n//2):\n        num_list[i], num_list[n-i-1] = num_list[n-i-1], num_list[i]\n    return num_list", "category": "Python"}, {"instruction": "Given an integer n, write a program to print out the prime numbers up to n.", "input": "", "output": "def is_prime(n):\n if n <= 1:\n return False\n for i in range(2, int(n**0.5) + 1):\n if n % i == 0:\n return False\n return True\n\ndef find_prime_numbers(n):\n primes = []\n for i in range(2, n + 1):\n if is_prime(i):\n primes.append(i)\n return primes", "category": "Python"}, {"instruction": "Complete the following function to output a reversed string", "input": "", "output": "def reverse(s):\n    rev = \"\"\n \n    i = len(s)\n    while i > 0:\n        rev += s[ i - 1 ]\n        i = i - 1\n \n    return rev", "category": "Python"}, {"instruction": "Write a function that returns the length of the longest common substring between two strings.", "input": "s1 = 'abcde'\ns2 = 'abfghe'", "output": "def longest_common_substring(s1, s2): \n    m = len(s1) \n    n = len(s2) \n  \n    # initialize matrix \n    L = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n    # To store the length of longest common substring \n    length = 0 \n  \n    # Comparing each character of s1 and s2 \n    for i in range(m + 1): \n        for j in range(n + 1): \n  \n            # If current character of s1 and s2 matches \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]: \n                L[i][j] = L[i - 1][j - 1] + 1\n                length = max(length, L[i][j]) \n            else: \n                L[i][j] = 0\n  \n    return length \n\n# Driver code \ns1 = 'abcde'\ns2 = 'abfghe'\nprint(\"Length of Longest Common Substring is: \", longest_common_substring(s1, s2))", "category": "Python"}, {"instruction": "Generate a code to reverse a string without using any loop.", "input": "Input String = \"Hello World!\"", "output": "input_string = 'Hello World!'\n\ndef reverse_string(input_string):\n    if len(input_string) == 0:\n        return \"\" \n    else:\n        return reverse_string(input_string[1:]) + input_string[0] \n \nres = reverse_string(input_string) \nprint(res)", "category": "Python"}, {"instruction": "Change the given array to a singly linked list without using a loop.", "input": "array = [1, 2, 3, 4, 5]", "output": "class Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \ndef convertToLinkedList(arr):\n    # Last Node \n    last = None\n  \n    # convert given array to linked list \n    for i in range(len(arr) - 1, -1, -1): \n        # create a new node \n        node = Node(arr[i]) \n  \n        # link existing list with new node \n        node.next = last\n        last = node\n  \n    return node\n\n# Driver code\narray = [1, 2, 3, 4, 5]\nhead = convertToLinkedList(array) \nwhile head != None: \n    print(head.data) \n    head = head.next", "category": "Python"}, {"instruction": "Create a program that prints the greatest common divisor between two numbers.", "input": "num1 = 99\nnum2 = 77", "output": "def gcd(num1, num2): \n      \n    if(num2 == 0): \n        return num1 \n    else: \n        return gcd(num2, num1 % num2) \n  \n# Driver code \nnum1 = 99\nnum2 = 77\nprint (\"The GCD of\", num1, \"and\", num2, \"is\", gcd(num1, num2))", "category": "Python"}, {"instruction": "Construct a python code to print the following text in reverse.", "input": "Hello World", "output": "text = 'Hello World'\nprint(text[::-1])", "category": "Python"}, {"instruction": "Select the Python data types which can store a sequence of items.", "input": "", "output": "Sequence data types in Python include lists, tuples and range objects.", "category": "Python"}, {"instruction": "How to check if a given number is an Armstrong number in Python?", "input": "", "output": "#Function to check if a number is an Armstrong number\ndef isArmstrong(number):\n   sum  = 0\n   temp = number\n\n   while temp > 0:\n    digit = temp % 10\n    sum += digit ** 3\n    temp //= 10\n \n   if number == sum:\n       return True\n   else:\n       return False\n   \n#Usage\nnumber = 9\nif(isArmstrong(number)):\n    print(f\"{number} is an Armstrong number\")\nelse:\n    print(f\"{number} is not an Armstrong number\")", "category": "Python"}, {"instruction": "Explain how to use Binary Search in Python?", "input": "", "output": "Binary search is an efficient search algorithm for sorted arrays. In Python, the bisect module can be used for binary search. The bisect.bisect() function finds the position of the number in the list or a place for the number if it is not present. The bisect.bisect_left() function does the same, but carefully chooses its insertion point to the left of any existing entries of the same value.\n\nFor example, to search for an element in a list, one can use the following code:\n\nimport bisect\n\ndef binary_search(list, item):\n    pos = bisect.bisect_left(list, item)\n    if pos != len(list) and list[pos] == item:\n        return pos\n    else:\n        return -1\n\nlist = [1, 2, 4, 7, 8]\nprint(binary_search(list, 2))  # Outputs 1", "category": "Python"}, {"instruction": "Create a program in Go that will take an array of integers and return the smallest number.", "input": "", "output": "func min(numbers []int) int {\n\tmin := numbers[0]\n\tfor _, number := range numbers {\n\t\tif min > number {\n\t\t\tmin = number\n\t\t}\n\t}\n\treturn min \n}", "category": "Python"}, {"instruction": "Suggest an algorithm in Python that will detect an anomaly in time-series data.", "input": "", "output": "We can use Gaussian Mixture Models to detect anomalies in time-series data. This method takes the time-series data as input and trains a model using the data. The model defines a probability distribution for the time-series data, and the anomalies are detected as those data points which have a low probability of occurring according to the distribution.", "category": "Python"}, {"instruction": "Use Django to create a basic website for a restaurant.", "input": "", "output": "We can use Django to create a basic website for a restaurant by following the steps below: \n\n1. Design a template for the website using HTML and CSS\n2. Create a Django project with the basic layout as given by the template\n3. Create views that will be used to render different pages (eg. home page, menu page, contact page, etc.)\n4. Create models in the Django project which will store information related to the restaurant, such as menu items, pricing, opening times, etc.\n5. Create URLs for each of the views\n6. Add the necessary code to link the models and views together\n7. Create a form for customers to submit their queries\n8. Add necessary functionality to the website, such as a search feature and ordering system", "category": "Python"}, {"instruction": "Train a model to classify text into two categories, positive and negative.", "input": "", "output": "import nltk\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# tokenize text\ndef tokenize(text):\n    tokens = nltk.word_tokenize(text)\n    return tokens\n\n# build a Bag of Words model\ncountVec = CountVectorizer(tokenizer=tokenize)\n\n# load training data\ntrainData, trainLabels = loadTrainingData()\n\n# Learn a vocabulary dictionary\ncountVec.fit(trainData)\n\n# transform training data into a document-term matrix\nX_train = countVec.transform(trainData)\n\n# split data into training and validation sets\nX_train, X_valid, y_train, y_valid = train_test_split(X_train, trainLabels, test_size = 0.2, random_state = 0)\n\n# train a Multinomial Naive Bayes classifier \nclf = MultinomialNB().fit(X_train, y_train)\n\n# predict sentiment on validation data\npredicted = clf.predict(X_valid)", "category": "Python"}, {"instruction": "Implement a function which will take two strings as input and reverse their order while maintaining the same character at each index.", "input": "s1 = \"hello\"\ns2 = \"world\"", "output": "def reverse_string_order(s1, s2):\n    result = \"\"\n    for i in range(len(s1)):\n        result += s2[i] + s1[i]\n    return result", "category": "Python"}, {"instruction": "Design a function that takes in an integer and prints the multiplication table till that input number.", "input": "", "output": "def print_multiplication_table(n):\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            print(i*j, end=\" \")\n        print()\n\nprint_multiplication_table(n)", "category": "Python"}, {"instruction": "Modify the code provided so it prints the first 10 prime numbers.", "input": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True", "output": "def is_prime(n): \n    if n == 1: \n        return False\n    for i in range(2, n): \n        if n % i == 0: \n            return False\n    return True\n\ndef print_primes():\n    count = 0\n    number = 2\n    while(count != 10):\n        if is_prime(number):\n            print(number)\n            count += 1\n        number += 1\n\nprint_primes()", "category": "Python"}, {"instruction": "Change the response to now fulfill the following purpose", "input": "Find the number of ones in a binary number 101011", "output": "def find_ones(n):\n    count = 0\n    while n > 0:\n        if n % 10 == 1:\n            count += 1\n        n //= 10        \n    return count", "category": "Python"}, {"instruction": "Generate a program that finds the sum of all natural numbers from 0 to n", "input": "", "output": "def find_sum(n): \n    sum = 0\n    for i in range(n+1): \n        sum += i \n    return sum", "category": "Python"}, {"instruction": "Give an example of the binary search algorithm", "input": "", "output": "def binary_search(arr, target): \n    low = 0\n    high = len(arr) - 1\n  \n    while low <= high: \n  \n        mid = (low+high) // 2\n  \n        # Check if target is present at mid \n        if arr[mid] == target: \n            return mid \n  \n        # If target is greater than mid, ignore left half \n        elif arr[mid] < target: \n            low = mid + 1\n  \n        # If target is smaller than mid, ignore right half \n        else: \n            high = mid - 1\n  \n    # If we reach here, then the element was not present \n    return -1", "category": "Python"}, {"instruction": "Generate code to remove duplicate characters from a string.", "input": "string = \"google\"", "output": "def remove_duplicates(string):\n    res = \"\" \n    for i in string: \n        if i not in res: \n            res = res + i\n    return res", "category": "Python"}, {"instruction": "Replace each character of a string with the next character in alphabetic order.", "input": "", "output": "def replace_chars(s): \n    chars = list(s) \n    res = \"\" \n    for char in chars: \n        res += chr(ord(char) + 1) \n  \n    return res", "category": "Python"}, {"instruction": "Replace the comments in the code with the proper Python code.", "input": "#TODO: get the date from the user\n#TODO: get the month from the user", "output": "date = int(input(\"Enter the date: \"))\nmonth = int(input(\"Enter the month: \"))", "category": "Python"}, {"instruction": "Program a function to remove all the even numbers from an array", "input": "", "output": "def remove_even(arr):\n    new_arr = []\n    for num in arr:\n        if num % 2 != 0:\n            new_arr.append(num)\n    return new_arr", "category": "Python"}, {"instruction": "Create a function to output true if the given string is a palindrome, otherwise output false.", "input": "string = \"racecar\"", "output": "def is_palindrome(str):\n    \"\"\"Checks if a given string is a palindrome.\n    \n    Parameters:\n    str (str): string to be tested\n    \"\"\"\n    str = str.lower()\n    return str[::-1] == str\n\nif __name__ == '__main__':\n    string = \"racecar\"\n    print(is_palindrome(string))", "category": "Python"}, {"instruction": "Change the code to make it an Expression Statement in Python", "input": "x + 1", "output": "print(x + 1)", "category": "Python"}, {"instruction": "Use nltk package in Python and remove stopwords from the given text.", "input": "Text: \"I am wondering what is the best way to learn English.\"", "output": "import nltk\nfrom nltk.corpus import stopwords\n\ntxt = \"I am wondering what is the best way to learn English.\"\nwords = nltk.word_tokenize(txt)\nfiltered_words = [w for w in words if not w in stopwords.words('english')] \n  \nprint(filtered_words)", "category": "Python"}, {"instruction": "Visit the API documentation and create code to make a POST request using Python.", "input": "", "output": "import requests \n  \ndata = {'name': 'John Doe', 'age': '25'} \n  \nheaders = {'Content-type': 'application/x-www-form-urlencoded', 'Accept': 'text/plain'} \n  \nresponse = requests.post('https://example.com/api/v1/data', data=data, headers=headers)", "category": "Python"}, {"instruction": "Code a function in Python to calculate the nth value of the Fibonacci sequence.", "input": "", "output": "def fibonacci(n): \n    if n <= 0: \n        return 0 \n    elif n == 1: \n        return 1\n    else: \n        return fibonacci(n-1) + fibonacci(n-2)", "category": "Python"}, {"instruction": "Take the following array as an argument and output the sum of all the numbers in the array using Python.", "input": "[1, 2, 3, 4, 5]", "output": "def sum_of_array(arr):\n  return sum(arr)\n\narray = [1, 2, 3, 4, 5]\nresult = sum_of_array(array)\n\nprint(resutl) # Output: 15", "category": "Python"}, {"instruction": "Suggest a way to convert the following XML code into JSON in Python.", "input": "<data>\n  <records> \n  \t<record name=\"John Smith\" age=\"27\">\n   \t\t<address>123 Main Street</address>\n   \t</record>\n    <record name=\"Jane Smith\" age=\"18\">\n    \t<address>167 King Avenue</address>\n    </record>\n  </records>\n</data>", "output": "import json \nimport xmltodict \n  \nxml_data = \"\"\"\n<data> \n  <records> \n    <record name=\"John Smith\" age=\"27\"> \n      <address>123 Main Street</address> \n    </record> \n    <record name=\"Jane Smith\" age=\"18\"> \n      <address>167 King Avenue</address> \n    </record> \n  </records>\n</data> \n\"\"\"\n  \nxml_dict = xmltodict.parse(xml_data)  \njson_data = json.dumps(xml_dict) \nprint(json_data)", "category": "Python"}, {"instruction": "Create an algorithm to find the longest common substring from two given strings.", "input": "String1: 'Hello World', String2: 'Hey World'", "output": "def longest_common_substring(s1, s2): \n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))] \n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)): \n        for y in range(1, 1 + len(s2)): \n            if s1[x - 1] == s2[y - 1]: \n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else: \n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\nprint(longest_common_substring('Hello World', 'Hey World'))  # Result: 'ello Wo'", "category": "Python"}, {"instruction": "Implement an algorithm to find all the sets of three numbers in an array which adds up to a given number.", "input": "Array: [2, 5, 8], Number: 10", "output": "def three_sum(array, number):\n   result_sets = [] \n   for i in range(len(array) - 2):\n       for j in range(i+1, len(array) - 1):\n           for k in range(j+1, len(array)):\n               if array[i] + array[j] + array[k] == number: \n                   result_sets.append([array[i], array[j], array[k]])\n   return result_sets \n\nprint(three_sum([2, 5, 8], 10)) # Result: [[2, 5, 8]]", "category": "Python"}, {"instruction": "Give an algorithm to delete a key, say k, from a binary search tree (BST).", "input": "", "output": "1. If the tree is empty, then return \n2. Find the key to be deleted in the tree and store it in a temporary node. \n3. Check if the key to be deleted has zero children or one child. \n    a. If the key has one child, then copy the child to the temporary node and delete the key. \n    b. If the key has two children, then find inorder successor of the key, copy it to the temporary node and delete the key.\n4. Free the memory occupied by the temporary node.", "category": "Python"}, {"instruction": "Create a Python 3 script that prints out the total number of days in the current month.", "input": "", "output": "import calendar\n\nprint(calendar.monthrange(2020, 11)[1])", "category": "Python"}, {"instruction": "Edit the following code so that it prints the first odd number in a given list.", "input": "nums = [2, 3, 4, 5, 6]", "output": "for num in nums:\n    if num % 2 == 1:\n        print(num)\n        break", "category": "Python"}, {"instruction": "Build a web scraper in Python to fetch the restaurant details from the website.", "input": "<uri of the website>", "output": "import requests \nfrom bs4 import BeautifulSoup \n  \npage = requests.get(<uri of website>) \nsoup = BeautifulSoup(page.content, 'html.parser') \n  \nrests = soup.find_all('div', class_='restaurant-item')\n\n# Parse the details of restaurants one by one\nfor rest in rests:  \n    name = rest.find('div', class_='restaurant-name') \n    cuisine = rest.find('li', class_='cuisine-list-item') \n    location = rest.find('li', class_='restaurant-location') \n    rating = rest.find('span', class_='star-rating-text') \n      \n    # Print details of restaurant \n    print(name.text, cuisine.text, location.text, rating.text)", "category": "Python"}, {"instruction": "Describe the working of a set in Python.", "input": "", "output": "A set in Python is an unordered collection of unique elements. It is an efficient data structure which provides a variety of operations such as membership testing, intersection, union and difference. Sets in Python do not allow duplicate elements and also do not maintain any particular order of the elements. Sets are mutable meaning that elements can be added or removed from them.", "category": "Python"}, {"instruction": "Generate a list comprehension in Python to get the cube of all the numbers between 1 to 10", "input": "", "output": "cubes_list = [x**3 for x in range(1, 11)]", "category": "Python"}, {"instruction": "Create a Python class that processes a string of text", "input": "String = \"Hello World\"", "output": "class StringProcessor:\n    def __init__(self, String):\n        self.string = String\n\n    def processString(self):\n        myString = \"\"\n        for char in self.string:\n            if char.isalnum():\n                myString += char.lower()\n        return myString", "category": "Python"}, {"instruction": "Create a sorting algorithm in Python that will sort an array of numbers in ascending order", "input": "[3, 1, 5, 2, 4, 6]", "output": "def sort_nums_asc(arr):\n    for i in range(len(arr)):\n        lowest_value_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[lowest_value_index]:\n                lowest_value_index = j\n        arr[i], arr[lowest_value_index] = arr[lowest_value_index], arr[i]\n    return arr", "category": "Python"}, {"instruction": "Explain the principle of dynamic programming.", "input": "", "output": "Dynamic programming is a technique for solving complex problems by breaking them down into smaller subproblems. The subproblems are solved and stored in a table, which is reused to solve future subproblems. This technique allows for efficient solutions regardless of the complexity of the problem, as it exploits the overlapping subproblems property to reduce time complexity.", "category": "Python"}, {"instruction": "You are given two strings, A and B. Write a function to delete the characters in A that also appear in B.", "input": "A = 'abcbbdef'\nB = 'abcdc'", "output": "def delete(A, B):\n    for i in B:\n        if i in A:\n            A = A.replace(i, '')\n    return A\n\ndelete(A, B) # Output: 'bdef'", "category": "Python"}, {"instruction": "What data structure can you use to store a set of unique values?", "input": "", "output": "A set is a data structure that stores a collection of unique values. A set is efficient for checking if a particular value exists in the collection, as the existence of the value can be checked in constant time.", "category": "Python"}, {"instruction": "Write a function in Python that takes an integer as an input and prints the number of digits in the integer.", "input": "num = 1234", "output": "def countDigits(num):\n    count = 0\n    while(num > 0):\n        num = num//10\n        count += 1\n    return count\n\nprint(countDigits(num)) # Output: 4", "category": "Python"}, {"instruction": "What is a hashmap, and what is it used for?", "input": "", "output": "A hashmap (also known as a dictionary or associative array) is a data structure that stores key-value pairs. It is used to store and retrieve information using a keyword or search term as the key. The key can then be used to quickly fetch the associated value from the hashmap. This makes hashmaps a powerful tool for storing and accessing large amounts of data efficiently.", "category": "Python"}, {"instruction": "Create a Python function that takes in a time string in the format hh:mm:ss and returns the time in seconds.", "input": "time_string = '01:10:30'", "output": "def time_in_seconds(time_string):\n    hour, minutes, seconds = map(int, time_string.split(':'))\n    return second + minutes * 60 + hour * 3600\ntime_in_seconds(time_string) # 4290", "category": "Python"}, {"instruction": "What is the definition of polymorphism in programming?", "input": "", "output": "Polymorphism in programming is a principle allowing the same code to be used for objects of different types, or for a given object to behave differently in different contexts. Polymorphism is an essential element of object-oriented programming, as it allows for code reusability, among other benefits. Polymorphism is achieved in programming by using inheritance and abstraction, along with virtual functions and templates. Examples of polymorphism include the various forms of overloading and overriding, and type punning.", "category": "Python"}, {"instruction": "Create an array of length n, containing all even numbers starting from 0.", "input": "", "output": "def create_array(n):\n    arr = []\n    for i in range(0, n, 2):\n        arr.append(i)\n    return arr", "category": "Python"}, {"instruction": "Given a JSON object, encode it using Base64.", "input": "{\n\"name\":\"John Doe\",\n\"age\":25\n}", "output": "import base64\n\njson_object = '{\"name\":\"John Doe\",\"age\":25}'\nencoded_object = base64.b64encode(bytes(json_object, 'utf-8'))\nprint(encoded_object)", "category": "Python"}, {"instruction": "Develop a program to spell a given word.", "input": "\"Hello\"", "output": "def spellWord(word):\n    words = list(word)\n    for i in range(len(words)):\n        print(words[i])", "category": "Python"}, {"instruction": "Write a Python program to remove the nth index character from a nonempty string.", "input": "var_str = Python, n = 0", "output": "def remove_character(var_str, n):\n  first_part = var_str[:n] \n  last_part = var_str[n+1:]\n  return first_part + last_part\n\nprint(remove_character('Python', 0))\n\nOutput: ython", "category": "Python"}, {"instruction": "Change the code to make it a valid Python program.", "input": "x = \"hello world", "output": "x = \"hello world\"", "category": "Python"}, {"instruction": "What data type does the output of this Python code have?", "input": "x = 5", "output": "integer", "category": "Python"}, {"instruction": "Create a Python class to hold a student's information: name, age and major.", "input": "", "output": "class Student:\n def __init__(self, name, age, major):\n self.name = name\n self.age = age\n self.major = major\n\ndef get_name(self):\n return self.name\n\ndef get_age(self):\n return self.age\n\ndef get_major(self):\n return self.major", "category": "Python"}, {"instruction": "Create a program to split the given string on a specific character.", "input": "String: \"A/B/C/D\"\nCharacter: \"/\"", "output": "def split_string(string, character):\n    return string.split(character)\n    \nif __name__ == '__main__':\n    string = \"A/B/C/D\"\n    character = \"/\"\n    print(split_string(string, character)) # outputs ['A', 'B', 'C', 'D']", "category": "Python"}, {"instruction": "Generate all combinations of the string \"abcd\".", "input": "", "output": "def generate_combinations(string):\n    result = []\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            result.append(string[i:j])\n    return result\n\nif __name__ == '__main__':\n    string = \"abcd\"\n    print(generate_combinations(string)) # outputs ['a', 'ab', 'abc', 'abcd', 'b', 'bc', 'bcd', 'c', 'cd', 'd']", "category": "Python"}, {"instruction": "Explain what is the purpose of a classifier model in machine learning", "input": "", "output": "The purpose of a classifier model in machine learning is to predict the class or category of an input data point. A classifier acts as a decision boundary between different categories of data points. It takes a set of input features, applies a set of mathematical operations to them, and uses them to make a prediction about the class of the input data point.", "category": "Python"}, {"instruction": "Given a list of integers, write a function to compute their average.", "input": "List of integers: [1, 2, 3, 4, 5]", "output": "def compute_average(lst): \n    total = 0\n    for num in lst: \n        total += num \n        \n    # calculate the average \n    avg = total / len(lst) \n    \n    return avg\n\n# Driver Code \nlst = [1, 2, 3, 4, 5] \nprint(\"Average of the list =\", round(compute_average(lst), 2))", "category": "Python"}, {"instruction": "Create a function that takes in two strings and determines of the strings are anagrams", "input": "String 1: \"spite\"\nString 2: \"pists\"", "output": "def is_anagram(str1, str2): \n    # convert the strings to lowercase \n    str1 = str1.lower() \n    str2 = str2.lower() \n\n    # sorting both the strings \n    s1 = sorted(str1) \n    s2 = sorted(str2) \n\n    if len(s1) != len(s2): \n        return False\n\n    # compare character by character \n    for i in range(len(s1)): \n        if s1[i] != s2[i]: \n            return False\n    return True\n\n# Driver code \nif is_anagram(\"spite\", \"pists\"):\n    print(\"Strings are anagrams\")\nelse:\n    print(\"Strings are not anagrams\")", "category": "Python"}, {"instruction": "Rewrite this code into Python.", "input": "ArrayList<Integer> arr = new ArrayList<>();\nfor (int i = 0; i < 10; i++) {\n    arr.add(i);\n}\n\nint sum = 0;\nfor(int num : arr){\n    sum += num;\n}", "output": "arr = []\nfor i in range(10):\n    arr.append(i)\n\nsum = 0\nfor num in arr:\n    sum += num", "category": "Python"}, {"instruction": "Find a way to calculate the power of a number without using * or **", "input": "base = 3\nexponent = 4", "output": "def power(base, exponent): \n    result = 1\n    for _ in range(exponent):\n        result *= base \n    return result", "category": "Python"}, {"instruction": "Create a function that reverses a given string without using the built-in parity.", "input": "str = 'I am here for the coding challenge\"", "output": "def reverse_string_without_parity(str):\n  # Create empty string \n  reversed_str = \"\" \n  # Iterate through the input string in the reverse order\n  for i in range(len(str)-1,-1,-1): \n    reversed_str += str[i] \n  return reversed_str", "category": "Python"}, {"instruction": "Edit the following code so that it prints out all powers of 2 up to 2^n", "input": "n = 5", "output": "def power_of_2(n):\n    result = 1\n    for i in range(n):\n        print(result)\n        result *= 2", "category": "Python"}, {"instruction": "Write a function to find the smallest subarray with a given sum.", "input": "arr = [3, 4, 5, 6, 7], sum = 11", "output": "def smallest_subarray_sum(arr, sum):\n\n    start = 0\n    end = 1\n    min_length = float('inf')\n    current_sum = arr[start]\n    while(end < len(arr)):\n        while(current_sum < sum and end < len(arr)):\n            current_sum += arr[end]\n            end += 1\n\n        while(start < end and current_sum >= sum):\n            min_length = min(min_length, end-start)\n            current_sum -= arr[start]\n            start += 1\n    \n    return min_length", "category": "Python"}, {"instruction": "Find a way to get the size of a linked list without traversing it.", "input": "head: 1 -> 2 -> 3 -> 4 -> 5 -> null", "output": "def get_list_size(head):\n    count = 0\n    temp = head\n    while(temp):\n        count += 1\n        temp = temp.next\n    return count", "category": "Python"}, {"instruction": "Implement a method that reverses a linked list", "input": "head = 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> null", "output": "// A linked list node \nclass Node: \n    # Constructor to create a new node \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n\n# Function to reverse the linked list  \ndef reverse(head): \n    prev = None\n    current = head\n    while(current is not None): \n        next = current.next\n        current.next = prev \n        prev = current \n        current = next\n    head = prev \n    return head", "category": "Python"}, {"instruction": "Find a way to randomly swap two elements of an array.", "input": "[1, 2, 3, 4, 5]", "output": "import random \n# Function to swap two elements \n# in a list at positions i and j  \ndef swap(arr, i, j): \n    arr[i], arr[j] = arr[j], arr[i] \n\n# Function to generate a random \n# permutation of arr[]  \ndef randomize ( arr, n ) : \n    # Start from the last element and swap \n    # one by one. We don't need to run for\n    # the first element that's why i > 0 \n    for i in range(n-1,0,-1): \n        # Pick a random index from 0\n        # to i \n        j = random.randint(0,i+1) \n        # Swap arr[i] with the element \n        # at random index \n        swap(arr, i, j)", "category": "Python"}, {"instruction": "Modify the following code so that it takes a string as a parameter, reverses it and prints out the reversed string.", "input": "str = \"Hello World!\"", "output": "def reverse_string(str):\n  reverse = \"\" \n  # Traverse through each letter of the input string \n  for i in range(len(str) - 1, -1, -1): \n    reverse = reverse + str[i] \n  print(reverse)", "category": "Python"}, {"instruction": "Edit the given code to ensure it outputs appropriate messages for successful and unsuccessful output.", "input": "def handleInput(name):\n  if len(name) > 0:\n    print('Hello, ' + name)", "output": "def handleInput(name):\n    if len(name) > 0:\n        print('Hello, ' + name)\n    else:\n        print('No name provided.')", "category": "Python"}, {"instruction": "You are given a list of numbers. Count how many of them are prime numbers.", "input": "[1,2,3,4,5,6,7]", "output": "def count_primes(numbers):\n    count = 0\n    for number in numbers:\n        if is_prime(number):\n            count += 1\n    return count\n \ndef is_prime(number):\n    if number <= 1:\n        return False\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Get all permutations of string.", "input": "string = \"abc\"", "output": "from itertools import permutations \n  \ndef permutations_string(string):\n    return list(permutations(string))\n\npermutations_string(\"abc\")\n\nOutput: [('a', 'b', 'c'), ('a', 'c', 'b'), ('b', 'a', 'c'), ('b', 'c', 'a'), ('c', 'a', 'b'), ('c', 'b', 'a')]", "category": "Python"}, {"instruction": "Given a number n, print \u201cHello\u201d n times.", "input": "n = 5", "output": "def print_hello(n):\n    for i in range (n):\n        print(\"Hello\")\n\nprint_hello(5)\n\nOutput: \nHello \nHello \nHello \nHello \nHello", "category": "Python"}, {"instruction": "Determine the longest word in a given string.", "input": "sentence = \"I am Python Programmer\"", "output": "def longest_word(sentence):\n    words = sentence.split()\n    max_len = len(words[0])\n     \n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n     \n    return max_word\n \nprint(longest_word('I am Python Programmer'))\n\nOutput: Programmer", "category": "Python"}, {"instruction": "Iterate over a list and count the number of occurrences of each item.", "input": "list1 = [10, 20, 30, 10, 10, 40, 10]", "output": "def count_instances(list1):\n    count_dict = dict() \n\n    for item in list1: \n        if (item in count_dict): \n            count_dict[item] += 1\n        else: \n            count_dict[item] = 1\n   \n    for key, value in count_dict.items(): \n        print(f\"{key} : {value}\") \n  \ncount_instances(list1)\n\nOutput: 10 : 4, 20 : 1, 30 : 1, 40 : 1", "category": "Python"}, {"instruction": "Count how many words are in a string and output the count.", "input": "string = \"Hello world!\"", "output": "def count_words(str):\n    \"\"\"Counts how many words are in a string.\n    \n    Parameters:\n    str (str): string to be counted\n    \"\"\"\n    return len(str.split())\n\nif __name__ == '__main__':\n    string = \"Hello world!\"\n    print(count_words(string))", "category": "Python"}, {"instruction": "Rewrite the program to get the same output", "input": "def find_sum(x):\n   sum = 0\n   for i in range(1,x):\n      if i % 3 == 0 or i % 5 == 0:\n        sum += i\n   return sum", "output": "def find_sum(x):\n    sum = 0\n    for i in range(1, x):\n        if i % 3 == 0:\n            sum += i\n        elif i % 5 == 0:\n            sum += i\n    return sum", "category": "Python"}, {"instruction": "Create a program to determine if a number is divisible by another number", "input": "", "output": "def is_divisible(n, m):\n    if n % m == 0:\n        return True\n    return False", "category": "Python"}, {"instruction": "Write a code to encode a given body of text into base64", "input": "text=\"Hello World\"", "output": "import base64\ndef encode_base64(text):\n return base64.b64encode(text.encode()).decode()", "category": "Python"}, {"instruction": "Create a new array of integers which contains the sum of corresponding elements of two existing arrays.", "input": "arr1 = [1, 2, 3]\narr2 = [4, 5, 6]", "output": "arr1 = [1, 2, 3]\narr2 = [4, 5, 6]\n\n# Initialize new array\narr_sum = [0 for _ in range(len(arr1))]\n\n# Add the values of both arrays\nfor i in range(len(arr1)):\n    arr_sum[i] = arr1[i] + arr2[i]\n\nprint(arr_sum)\n# Output: [5, 7, 9]", "category": "Python"}, {"instruction": "Write a web scraper in Python to collect the data from the top 1000 IMDB movies", "input": "", "output": "import requests\nfrom bs4 import BeautifulSoup\n \nurl = 'https://www.imdb.com/search/title/?title_type=feature&sort=num_votes,desc&view=simple&count=250&start=1'\nhtml_doc = requests.get(url).text\nsoup = BeautifulSoup(html_doc, 'html.parser')\n\n# extract data from HTML table\ntable = soup.find('table', attrs={'class': 'chart'})\nmovies = []\nfor row in table.find_all('tr')[1:]:\n    title = row.find('td', style='').get_text()\n    rating = row.find('td', class_='ratingColumn imdbRating').get_text().strip()\n    movies.append({'title': title, 'rating': rating})\n\nprint(movies)", "category": "Python"}, {"instruction": "Develop a Python code to extract all words from a sentence that begin with a specific letter.", "input": "sentence = \"I love coding in Python\"\nletter = \"P\"", "output": "sentence = \"I love coding in Python\"\nletter = \"P\"\n\nwords_starting_with_P = [word for word in sentence.split() if word.startswith(letter)]\n\nprint(words_starting_with_P)\n# Output: ['Python']", "category": "Python"}, {"instruction": "Describe how a linked list data structure works in pseudo code.", "input": "", "output": "A linked list is a linear data structure that consists of a sequence of elements, each element containing a pointer to the next element in the list. Some implementations may also contain a pointer to the previous element in the list. Pseudo-code would look like:\n\nSTART \nClass Node \n   int data \n   Node next \nEND Class \n\nNode head  // the start of the list \n\n// traverse the list \nwhile (current != NULL) {\n   // process node \n   current = current.next \n}\n\nEND", "category": "Python"}, {"instruction": "Find the minimum value from a given array.", "input": "[3, -2, 4, 7]", "output": "def findMin(arr):\n    current_min = arr[0]\n    for num in arr:\n        if num < current_min:\n            current_min = num\n    return current_min", "category": "Python"}, {"instruction": "Create a machine learning model in Python using the given data that classifies the data into either 'positive' or 'negative'.", "input": "<contents of the dataset>, data type: binary classification", "output": "# Load the dataset\nX, y = <contents of the dataset>\n\n# Split the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Train the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\n\nprint(\"Accuracy score: \", accuracy)", "category": "Python"}, {"instruction": "Create an algorithm that iterates through a given string and returns the number of alphabets present in the string.", "input": "\"abracadabra\"", "output": "def count_alphabets(string):\n  count = 0\n  for i in range(len(string)):\n    if string[i].isalpha():\n      count += 1\n  return count", "category": "Python"}, {"instruction": "Design a function which prints all the permutations of a given list of numbers.", "input": "", "output": "def permutations(nums):\n    if len(nums) == 1:\n        return [nums]\n    res = []\n    for i in range(len(nums)):\n        for p in permutations(nums[:i] + nums[i+1:]):\n            res.append([nums[i]] + p)\n    return res\n\nif __name__ == '__main__':\n    nums = [1, 2, 3]\n    print(permutations(nums)) # [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]", "category": "Python"}, {"instruction": "Design a function which takes two numbers as input and returns the largest one as output.", "input": "", "output": "def largest_of_two(num1, num2):\n  if num1 > num2:\n    return num1\n  else:\n    return num2", "category": "Python"}, {"instruction": "Modify the following code to compute the sum of squares of the numbers from k to n.", "input": "def sum(k, n):\n    sum = 0\n    for i in range(k, n+1):\n        sum += i\n    return sum", "output": "def sum_squares(k, n):\n    sum = 0\n    for i in range(k, n+1):\n        sum += i**2\n    return sum", "category": "Python"}, {"instruction": "Debug the following function.", "input": "def f(n):\n    i = 0\n    while i < n:\n        i+=1\n        if i % 5 == 0:\n        print(i)", "output": "def f(n): \n    i = 0\n    while i < n:\n        i+=1\n\t\t# Fixed missing indentation\n        if i % 5 == 0:\n            print(i)\n\t\t# Added missing closing bracket after print() statement", "category": "Python"}, {"instruction": "Rewrite the following code snippet in Python to print out the word \"Hello\":\n\nprint(\"Hello\")", "input": "", "output": "print(\"Hello\")", "category": "Python"}, {"instruction": "Analyze the following code and explain what it does:\n\ndef func(n):\n    if n == 0:\n        return 0\n    else:\n        return n + func(n - 1)", "input": "", "output": "This code implements a recursive function to compute the sum of numbers from 1 to n. Specifically, the base case is when n is 0, and the recursive case is when n is greater than 0. In the recursive case, the function will call itself with n-1 as the argument, and then adds n to the result of that call. Thus, each recursive call will add one more number until it reaches the base case. This is known as the base case and recursion principle. The result of the function will be the sum of the numbers from 1 to n.", "category": "Python"}, {"instruction": "Implement a for loop in Python to iterate through a given list of numbers.", "input": "[1, 2, 3, 4]", "output": "for num in [1, 2, 3, 4]:\n    print(num)", "category": "Python"}, {"instruction": "Identify the bug in the following python code:\n\ndef foo(x):\n    x[0] = 2", "input": "[0, 1, 2]", "output": "This code is trying to modify an immutable object (a tuple) as it is attempting to assign a value to the first element in a tuple. The correct way to do this is with a list, not a tuple. The code should be changed to:\n\ndef foo(x):\n    x[0] = 2\n    \nwhere the input x is a list instead of a tuple.", "category": "Python"}, {"instruction": "Convert the following paragraph from English to Python code:\n\n\"Given a list of numbers, find the largest number\".", "input": "", "output": "def find_largest(nums):\n    largest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n    return largest", "category": "Python"}, {"instruction": "Convert the following matrix into a list of lists in Python.", "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "list_of_lists = [[1,2,3], [4,5,6], [7,8,9]]", "category": "Python"}, {"instruction": "Create a class in Python named 'Circle' with a parameterized constructor to take the radius of the circle as input.", "input": "", "output": "class Circle():\n    def __init__(self, radius):\n        self.radius = radius", "category": "Python"}, {"instruction": "Explain why software design patterns are important in software development.", "input": "", "output": "Software design patterns are important because they allow developers to create extensible and maintainable software applications. Design patterns provide a way of reusing the same code and structure across multiple applications, while allowing the application to remain logically organized. This can reduce the amount of time it takes to develop and debug applications, as well as prevent bugs from arising due to unfamiliar code structures. Additionally, well-designed applications can be easier for new developers to understand and contribute to. Lastly, design patterns can help improve the overall organization and scalability of a codebase.", "category": "Python"}, {"instruction": "Suggest the best algorithm to reverse a string.", "input": "", "output": "# Algorithm to reverse a string\ndef reverse_string(s):\n# Create a result string\n result = \"\"\n # Iterate through the string in reverse order\n for i in range(len(s)-1, -1, -1):\n result += s[i]\nreturn result", "category": "Python"}, {"instruction": "Describe an algorithm to convert an array of numbers into an array of its squares.", "input": "", "output": "def calculate_squares(arr):\n result = []\n for num in arr:\n result.append(num ** 2)\n return result", "category": "Python"}, {"instruction": "Sort the list below using insertion sort in Python:", "input": "list = [1,12,1,4,8,10,13]", "output": "list = [1,1,4,8,10,12,13]\n\ndef insertion_sort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key\narr = [1,12,1,4,8,10,13]\ninsertion_sort(arr)\nprint (arr)", "category": "Python"}, {"instruction": "Identify the data type of the following Python expression:\n\n{\"name\": \"John\", \"age\": 40}", "input": "", "output": "This expression is a dictionary, which is a type of data structure in Python. A dictionary is a key-value pair, where the key is unique and the value can be a list of data items or a single item. In this example, the key is \"name\" and the value is \"John\", and the key is \"age\" and the value is 40.", "category": "Python"}, {"instruction": "Construct an object-oriented code for a Book class.", "input": "", "output": "class Book:\n    def __init__(self, title, author, year):\n        self.title = title\n        self.author = author\n        self.year = year\n        \n    def get_title(self):\n        return self.title\n    \n    def get_author(self):\n        return self.author\n    \n    def get_year(self):\n        return self.year\n    \n    def set_title(self, new_title):\n        self.title = new_title\n        \n    def set_author(self, new_author):\n        self.author = new_author\n        \n    def set_year(self, new_year):\n        self.year = new_year", "category": "Python"}, {"instruction": "Suggest a better algorithm for calculating Fibonacci sequence.", "input": "", "output": "A better algorithm for calculating Fibonacci sequence is the iterative method. Instead of making recursive calls, this method computes each element of the Fibonacci sequence in a loop. This method is more efficient and requires less memory overhead. The algorithm is as follows:\n\ndef iterative_fibonacci(n):\n    a = 0\n    b = 1\n    for i in range(1,n+1):\n        c = a + b\n        a = b\n        b = c\n    return a", "category": "Python"}, {"instruction": "Write a generic code for traversing a tree.", "input": "", "output": "def traverse_tree(root): \n  if root is None: \n    return\n\t\n  traverse_tree(root.left) \n  print(root.data) \n  traverse_tree(root.right)", "category": "Python"}, {"instruction": "Generate the Fibonacci sequence in a given range in Python.", "input": "n = 8", "output": "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \nFibonacci(n)", "category": "Python"}, {"instruction": "For a given programming language, list the data types supported by that language.", "input": "", "output": "In Java, the supported data types include primitive data types like int, float, char, as well as non-primitive types such as String, Array, List, Set, and Map.", "category": "Python"}, {"instruction": "Create a correlation heatmap in Python using a given dataset.", "input": "import pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame(np.random.randint(0,100,size=(100, 4)), columns=list('ABCD'))", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\n\ncorr = data.corr()\n\nsns.heatmap(corr, \n        xticklabels=corr.columns,\n        yticklabels=corr.columns)\nplt.show()", "category": "Python"}, {"instruction": "Provide a function to implement a Binary Tree traversal.", "input": "", "output": "def printTree(root): \n    \n    # Check if tree is empty\n    if root == None: \n        return\n    \n    # First print the root data\n    print(root.data, end=\" \")\n    \n    # First recur on left child\n    printTree(root.left)\n    \n    # the recur on right child\n    printTree(root.right)", "category": "Python"}, {"instruction": "Describe the working of a Recurrent Neural Network (RNN).", "input": "", "output": "A Recurrent Neural Network (RNN) is a type of artificial neural network that is widely used for natural language processing, dialogue systems, and time series prediction. RNNs have the ability to process data sequences, which gives them an advantage over traditional neural networks. This is done by using recurrent connections between the hidden layers of the network. In this type of network architecture, the outputs from the previous layer are used as inputs to the next layer. This allows the network to remember the context of the data sequentially, which makes it suitable for problems with a temporal component. RNNs can also be used to train the model to produce a sequence output by predicting the next item in the sequence.", "category": "Python"}, {"instruction": "How can you handle errors in Python?", "input": "", "output": "Python provides two ways to handle errors: \n\n1. The try and except statement, and \n2. The raise statement.\n\nThe try and except statement is used to catch and handle exceptions, while the raise statement is used to explicitly raise an exception.", "category": "Python"}, {"instruction": "Implement the bottom up cut rod algorithm in Python.", "input": "", "output": "def bottomUpCutRod(prices, n): \n \n    # Create an array of size n+1 \n    temp_array = [0 for i in range(n+1)] \n    for i in range(1, n+1): \n        tempval = -float('inf') \n        for j in range(i): \n            tempval = max(tempval, prices[j] + temp_array[i-j-1]) \n        temp_array[i] = tempval \n  \n    return temp_array[n]", "category": "Python"}, {"instruction": "Implement a class to implement a Huffman coding algorithm.", "input": "", "output": "class HuffmanCoding:\n \n    def __init__(self, inp_string):\n        self.inp_string = inp_string\n        self.string_length = len(inp_string)\n        self.frequency_table = self.get_frequency_table(inp_string)\n        self.huff_tree = self.build_huffman_tree(self.frequency_table)\n \n    def get_frequency_table(self, inp_string):\n        # Create dictionary to store frequencies\n        freq_table = {}\n        # Count frequency of characters in the string\n        for char in inp_string:\n            if char in freq_table:\n                freq_table[char] += 1\n            else:\n                freq_table[char] = 1\n        # Return the frequency table\n        return freq_table\n \n    def build_huffman_tree(self, frequency_table):\n        # Create a priority queue to store the trees \n        pq = PriorityQueue()\n        # Create a tree for each value\n        for value in frequency_table:\n            pq.put((frequency_table[value], Node(value)))\n        # Start the loop with two trees\n        while pq.qsize() > 1:\n            left_node = pq.get()\n            right_node = pq.get()\n            combined_freq = left_node[0] + right_node[0]\n            new_node = Node(left=left_node[1], right=right_node[1])\n            pq.put((combined_freq, new_node))\n        # Return the tree\n        return pq.get()[1]", "category": "Python"}, {"instruction": "Create a user-defined type in Python to store information about a person.", "input": "", "output": "class Person:\n    def __init__(self, firstname, lastname, age):\n        self.firstname = firstname\n        self.lastname = lastname\n        self.age = age\n\nperson1 = Person('John', 'Smith', 25)", "category": "Python"}, {"instruction": "Suggest one line of code that should be added to the following function to make it more efficient.", "input": "def search_prime_numbers(n):\n    for num in range(2, n + 1):\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            print(num)", "output": "def search_prime_numbers(n):\n    for num in range(2, n + 1):\n        if num > 2 and num % 2 == 0: // This line can be added to make the function more efficient by avoiding the check for even numbers greater than 2.\n            continue\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            print(num)", "category": "Python"}, {"instruction": "Suggest a data structure that can be used to store contacts information (name, email, phone number).", "input": "", "output": "A hash table can be used to store the contacts information as it provides a key-value mapping of the information. Keys can be either the name, email or phone number depending on the mapping pattern desired. A set or LinkedList can also be used for this purpose, as the information does not have any orders associated with it.", "category": "Python"}, {"instruction": "Suggest a method to search for a specified character in a string.", "input": "", "output": "One approach is to loop through each character in the string and check if it matches the character to be searched for. If it does, the index of the character can be returned, or a boolean indicating whether the character is present in the string or not can be returned. Another approach is to use built-in string functions such as .indexOf() or .includes() to search for the specified character.", "category": "Python"}, {"instruction": "Suggest an improvement to make the code more efficient.", "input": "a = [1,2,3,4,5]\nloop_count = len(a)\nwhile loop_count > 0:\n    print(loop_count)\n    loop_count -= 1", "output": "a = [1,2,3,4,5]\nfor number in a:\n    print(number) // Instead of looping through the number of items in 'a', loop through the items of 'a' directly.", "category": "Python"}, {"instruction": "Create a class that contains two methods: one to generate a random number between a given range, and one to create a list of \"n\" random numbers.", "input": "n = 10, min = 0, max = 100", "output": "class RandomNumberList:\n    def __init__(self):\n        self.numbers = []\n    \n    def generate_random(self, min, max):\n        return random.randint(min, max) \n    \n    def create_list(self, n, min, max):\n \u00a0 \u00a0# Generate a list of n random numbers between min and max\n \u00a0 \u00a0 \u00a0 \u00a0self.numbers = [self.generate_random(min, max) for _ in range(n)]\n        return self.numbers", "category": "Python"}, {"instruction": "Create a loop in Python to multiply each element of a list with 10.", "input": "lst = [1, 2, 3, 4, 5]", "output": "def multiply_list(lst):\n    for i in range(len(lst)):\n        lst[i] *= 10\n    return lst", "category": "Python"}, {"instruction": "Print the maximum element in a linked list.", "input": "head - [1, 3, 4, 10, 8]", "output": "def maximum(head): \n    max = head.data \n    while head is not None: \n        if max < head.data: \n            max = head.data \n        head = head.next\n    return max", "category": "Python"}, {"instruction": "Create a multi-dimensional array in Python.", "input": "", "output": "arr = [[1,2,3], [4,5,6], [7,8,9]]", "category": "Python"}, {"instruction": "Replace the placeholders in the following Python code snippet with appropriate values.", "input": "for x in range(__, __):\n    print(x)", "output": "for x in range(0, 10):\n    print(x)", "category": "Python"}, {"instruction": "Create a program to generate the n-th Fibonacci number.", "input": "", "output": "def fibonacci(n):\n    '''This function returns the n-th Fibonacci number.'''\n\n    if n == 0 or n == 1:\n        return n\n    \n    fib_n_1 = 0\n    fib_n_2 = 1\n\n    for i in range(2, n+1):\n        fib_n = fib_n_1 + fib_n_2\n        fib_n_1, fib_n_2 = fib_n_2, fib_n\n\n    return fib_n", "category": "Python"}, {"instruction": "Identify and correct the bug in the following program.", "input": "def square_numbers(lst):\n    lst_sq = []\n    lst_sq.append(lst[i] ** 2 for i in range(len(lst)))\n    return lst_sq", "output": "def square_numbers(lst):\n    lst_sq = []\n    for i in range(len(lst)):\n        lst_sq.append(lst[i] ** 2)\n    return lst_sq", "category": "Python"}, {"instruction": "Suggest a way of decoding a string encoded using Base64.", "input": "encoded_string = \"SGVsbG8gV29ybGQ=\"", "output": "import base64\n\ndef decodeBase64(encoded_string):\n    return base64.b64decode(encoded_string).decode('utf-8')\n\nprint(decodeBase64(encoded_string))\n# Output: Hello World", "category": "Python"}, {"instruction": "Suggest a way of encrypting text using a Caesar cipher.", "input": "plaintext = \"Hello World\"", "output": "def caesar_encrypt(plaintext, k):\n    ciphertext = \"\" \n  \n    # traverse text \n    for i in range(len(plaintext)): \n        char = plaintext[i] \n  \n        # Encrypt uppercase characters \n        if (char.isupper()): \n            ciphertext += chr((ord(char) + k-65) % 26 + 65) \n  \n        # Encrypt lowercase characters \n        else: \n            ciphertext += chr((ord(char) + k - 97) % 26 + 97) \n  \n    return ciphertext \n\nprint(caesar_encrypt(plaintext, 3))\n# Output: Khoor Zruog", "category": "Python"}, {"instruction": "Suggest a way of replacing all the vowels in a string with a star (*).", "input": "string = \"Hello World!\"", "output": "print(''.join([x if x not in 'aeiou' else '*' for x in string]))\n# Output: H*ll* W*rld!", "category": "Python"}, {"instruction": "Create a class in Python that creates an immutable list.", "input": "", "output": "class ImmutableList:\n    def __init__(self, list_values):\n        self._dict = dict()\n        for i, elem in enumerate(list_values):\n            self._dict[i] = elem\n    \n    def __getitem__(self, item):\n        return self._dict[item]\n    \n    def __len__(self):\n        return len(self._dict)", "category": "Python"}, {"instruction": "Suggest a completion to the following python code to print the square of a number.", "input": "number = 5\n\nprint(number)", "output": "number = 5\n\nprint(number*number) # Output: 25", "category": "Python"}, {"instruction": "Create a decision tree to classify if a given student's grade ranges from A to D.", "input": "", "output": "# Decision Tree\ndef classify_grades_decision_tree(grade):\n    if grade in range(90, 101): # A range\n        return 'A'\n    elif grade in range(80,90): # B range\n        return 'B'\n    elif grade in range(70,80): # C range\n        return 'C'\n    elif grade in range(60,70): # D range\n        return 'D'\n    else:\n        return 'Error: Grade not in range'\n\n# Driver code\n# Testing\nprint(classify_grades_decision_tree(87)) # Output: B", "category": "Python"}, {"instruction": "Using the given list of names, create a new set that contains only the names with length greater than 6.", "input": "names = [\"John\", \"Jacob\", \"Sophia\", \"Olivia\", \"Michael\"]", "output": "names = [\"John\", \"Jacob\", \"Sophia\", \"Olivia\", \"Michael\"]\n\nlong_names = {name for name in names if len(name) > 6}\nprint(long_names) # Output: {'Sophia', 'Olivia', 'Michael'}", "category": "Python"}, {"instruction": "Design a function in Python to automate the extraction of emails from a single HTML page.", "input": "<html>\n<body>\n Janice's email is janice@example.com, and Susie's is susie@example.com.\n </body>\n </html>", "output": "def extract_emails(html_page):\n emails = []\n soup = BeautifulSoup(html_page)\n for a in soup.find_all('a'):\n  if a.get('href') and (a.get('href').startswith('mailto:')):\n  emails.append(a.get('href')[7:])\n return emails\n\n# Usage \npage = '<html>\n <body>\n  Janice's email is janice@example.com, and Susie's is susie@example.com.\n </body>\n </html>'\n\nemails = extract_emails(page)\nprint(emails)\n# Output: ['janice@example.com', 'susie@example.com']", "category": "Python"}, {"instruction": "Flatten this nested list into a single list.", "input": "nested_list = [[1,2], [3,4], [5,6]]", "output": "import itertools\nflattened_list = list(itertools.chain.from_iterable(nested_list))\nprint(flattened_list)\n# Output: [1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Write a function in Python to sort this dictionary by values.", "input": "my_dict = {\"Jerry\": 10, \"Marcus\": 3, \"Hanna\": 5}", "output": "def sort_dict_by_values(d):\n    sorted_dict = dict(sorted(d.items(), key=lambda x: x[1])) \n    return sorted_dict\n\nprint(sort_dict_by_values(my_dict))\n# Output: {'Marcus': 3, 'Hanna': 5, 'Jerry': 10}", "category": "Python"}, {"instruction": "Find the longest palindromic substring of this string.", "input": "string = \"carrace\"", "output": "def longest_palindrome_substring(string):\n    n = len(string)\n    t = [[False for _ in range(n)] for _ in range(n)]  \n    max_length = 1\n    i = 0\n    while (i < n): \n        t[i][i] = True\n        i = i + 1\n    start = 0\n    i = 0\n    while i < n - 1: \n        if (string[i] == string[i + 1]): \n            t[i][i + 1] = True\n            start = i \n            max_length = 2\n        i = i + 1\n    k = 3\n    while k <= n: \n        i = 0\n        while i < (n - k + 1): \n            j = i + k - 1\n            if (t[i + 1][j - 1] and \n                    string[i] == string[j]): \n                t[i][j] = True\n                if (k > max_length): \n                    start = i \n                    max_length = k \n            i = i + 1\n        k = k + 1\n    longest_palindrome = string[start:start+max_length]\n    return longest_palindrome\n  \nprint(longest_palindrome_substring(string))\n# Output: carrac", "category": "Python"}, {"instruction": "Given a list of student records, write a Python code snippet to find all the students who scored above 80.", "input": "studentList = [ \n    {'name': 'John', 'score': 80},\n    {'name': 'Jane', 'score': 90},\n    {'name': 'Tom', 'score': 75},\n    {'name': 'Eric', 'score': 85}\n  ]", "output": "highScoringStudents = [student for student in studentList if student['score'] > 80]", "category": "Python"}, {"instruction": "Given an array of integers, find the longest subarray with total sum less than the given sum.", "input": "arr = [1, -2, 2, 4, 3], sum = 3", "output": "arr = [1, -2, 2, 4, 3]\nsum = 3\n\n# create an empty list to store the longest subarray\nlongest = []\n\n# loop through the array\nfor i in range(len(arr)):\n    # set the sum of current subarray to 0 \n    curr_sum = 0\n    # another loop to check if any subarray of the array\n    # has a sum less than the given sum\n    for j in range(i, len(arr)):\n        curr_sum += arr[j]\n        # if any subarray is found update the longest list\n        if curr_sum < sum:\n            longest = arr[i: j + 1]\n\nprint(\"The longest subarray with total sum less than the given sum is:\", longest)", "category": "Python"}, {"instruction": "Extract a character's count from a given string.", "input": "string = \"this is a sample string\"", "output": "def count_characters(string):\n    '''This function takes a string as argument and returns a dictionary\n       that contains the count of characters in the given string.''' \n    # create an empty dictionary\n    char_count = {}\n    # iterate over the characters and add to dictionary if not already present\n    for char in string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            # Increment the count if already present\n            char_count[char] += 1 \n    return char_count", "category": "Python"}, {"instruction": "Given an array of numbers, find the maximum product of any three numbers in the array.", "input": "arr = [2, 5, 6, 9, -2, -7, -1]", "output": "arr = [2, 5, 6, 9, -2, -7, -1]\n\n# create an empty list to store the products of all triplets\ntriplets = []\n\n# loop through the array\nfor i in range(len(arr)):\n    for j in range(i+1,len(arr)):\n        for k in range(j+1,len(arr)):\n            # calculate and append the product of each triplet to the list\n            triplets.append(arr[i]*arr[j]*arr[k])\n\n# get the maximum product from the list\nmax_product = max(triplets)\n\nprint(\"The maximum product of any three numbers in the array is:\", max_product)", "category": "Python"}, {"instruction": "Given a target number, find two numbers in the list whose sum is equal to the target number.", "input": "list = [2, 7, 11, 15], target = 9", "output": "list = [2, 7, 11, 15]\ntarget = 9\n\nfor i in range(0, len(list) - 1):\n    for j in range(i + 1, len(list)):\n        if list[i] + list[j] == target:\n            print('The two numbers in the list whose sum is equal to the target number are %d and %d' %(list[i], list[j]))", "category": "Python"}, {"instruction": "Generate a 4 by 4 multiplication table.", "input": "", "output": "for i in range(1, 5):\n    for j in range(1, 5):\n        print(i*j, end=\"\\t\")\n    print()\n\n# Output\n1\t2\t3\t4\t\n2\t4\t6\t8\t\n3\t6\t9\t12\t\n4\t8\t12\t16", "category": "Python"}, {"instruction": "Generate a 10 character random user password with at least one Upper Case letter, one lower case letter, one number, and one special character.", "input": "", "output": "import random\nimport string\n\ndef generate_password(length):\n    char_types = list(string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation)\n    password = []\n    for _ in range(length):\n        ch = random.choice(char_types)\n        while ch in password:\n            ch = random.choice(char_types)\n        password.append(ch)\n \n    return ''.join(password)\n\npassword = generate_password(10)\nprint(password) # e.W8.vHc2e", "category": "Python"}, {"instruction": "Create a class called \"Computer\" with two attributes \"name\" and \"model\" and two methods \"get_name\" and \"get_model\".", "input": "", "output": "class Computer:\n    def __init__(self, name, model):\n        self.name = name\n        self.model = model\n    \n    def get_name(self):\n        return self.name\n    \n    def get_model(self):\n        return self.model", "category": "Python"}, {"instruction": "Implement a sorting algorithm which takes an array of integers as input and sorts it in ascending order.", "input": "[34, 19, 42, -9, 2018, 0, 105]", "output": "def sorting_algorithm(arr):\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n\n# Test\narr = [34, 19, 42, -9, 2018, 0, 105]\nprint(sorting_algorithm(arr)) # [-9, 0, 19, 34, 42, 105, 2018]", "category": "Python"}, {"instruction": "Using Numpy, create an array of size 10 and fill it with random integer numbers between 0 and 9.", "input": "", "output": "import numpy as np\n\narr = np.random.randint(low=0, high=10, size=10)", "category": "Python"}, {"instruction": "Take an array of strings and a character and return an array containing only the strings containing the given character.", "input": "", "output": "def filter_by_character(str_arr, char):\n    filtered_arr = []\n    for string in str_arr:\n        if char in string:\n            filtered_arr.append(string)\n    return filtered_arr", "category": "Python"}, {"instruction": "Create a function that takes a matrix (MxN array) and returns the transposed matrix.", "input": "", "output": "def transpose(matrix):\n    tr_matrix = [[None for i in range(len(matrix))] for j in range(len(matrix[0]))]\n    for i, row in enumerate(matrix):\n        for j, col in enumerate(row):\n            tr_matrix[j][i] = col\n    return tr_matrix", "category": "Python"}, {"instruction": "Output the longest consecutive character string in a given string.", "input": "", "output": "def longest_consecutive_str(s):\n    longest_str = \"\"\n    cur_str = \"\"\n\n    for char in s:\n        if not cur_str or char == cur_str[-1]:\n            cur_str += char\n        else:\n            if len(cur_str) > len(longest_str):\n                longest_str = cur_str\n            cur_str = char\n\n    if len(cur_str) > len(longest_str):\n            longest_str = cur_str\n\n    return longest_str", "category": "Python"}, {"instruction": "Take an array of strings and return a new array containing only the strings with the longest length.", "input": "", "output": "def longest_strings(str_arr):\n    longest = 0\n    strings = []\n    for string in str_arr:\n        if len(string) > longest:\n            strings = [string]\n            longest = len(string)\n        elif len(string) == longest:\n            strings.append(string)\n    return strings", "category": "Python"}, {"instruction": "Compile a function that checks if a number is prime. Output true if prime, false if not.", "input": "", "output": "def is_prime(num):\n    # form 2 to num-1\n    for i in range(2, num):\n        # percentage to check, output False if divisible by any number\n        if num % i == 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Take an array of integers and return true if there is a triplet whose sum is equals to the given target.", "input": "arr = [1, 4, 45, 6, 10, -8], target = 16", "output": "def find_triplet_sum(arr, target):\n    arr.sort()\n    for i in range(0, len(arr)-2):\n        left = i + 1\n        right = len(arr) - 1\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n\n            if curr_sum == target:\n                return True \n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False", "category": "Python"}, {"instruction": "Output the below tree structure in Python.", "input": "", "output": "print('  *  ')\nprint(' *** ')\nprint('*****')", "category": "Python"}, {"instruction": "Write a code to decrypt a given cipher text using the Caesar cipher", "input": "cipher_text=\"dfwlrq\"", "output": "def decrypt_caesar_cipher(cipher_text):\n alphabet=\"abcdefghijklmnopqrstuvwxyz\"\n output=\"\"\n for char in cipher_text:\n   i=(alphabet.index(char)-3)%26\n   output+=alphabet[i]\n return output", "category": "Python"}, {"instruction": "Write a code to determine if a given list contains a particular element", "input": "nums=[1,2,3,4]", "output": "def contains(nums, element):\n return element in nums", "category": "Python"}, {"instruction": "Write a Python script which checks if an input string is a palindrome.", "input": "", "output": "def is_palindrome(input_string):\n    input_string = input_string.lower()\n    if len(input_string) == 0:\n        return False\n    if len(input_string) == 1:\n        return True\n\n    if input_string[0] == input_string[-1]:\n        return is_palindrome(input_string[1:-1])\n\n    return False\n\n# Usage \nstring = 'RADAR'\nresult = is_palindrome(string)\nprint(result) # Output: True", "category": "Python"}, {"instruction": "Create a program in Python to remove duplicate values from a list.", "input": "list_a = [1, 2, 2, 3, 4, 4]", "output": "def remove_duplicates(list): \n    unique = [] \n    for item in list: \n        if item not in unique: \n            unique.append(item) \n    return unique \n\nlist_a = [1, 2, 2, 3, 4, 4]\nlist_a = remove_duplicates(list_a)\nprint(list_a)", "category": "Python"}, {"instruction": "Design a function in Python to toggle whether a given HTML tag has a given class.", "input": "<div class=\"myClass\">Hello world</div>", "output": "def toggle_class(html_string, tag, tag_class):\n    soup = BeautifulSoup(html_string, 'html.parser')\n    tag_html = soup.find(tag)\n\n    if tag_html:\n        classes = tag_html.get('class')\n        if classes and tag_class in classes:\n            classes.remove(tag_class)\n        else:\n            classes.append(tag_class)\n        tag_html['class'] = classes\n    return soup.decode()\n\n# Usage\nhtml_string = '<div class=\"myClass\">Hello world</div>'\ntag = 'div'\ntag_class = 'myClass'\nnew_html_string = toggle_class(html_string, tag, tag_class)\nprint(new_html_string)\n# Output: <div>Hello world</div>", "category": "Python"}, {"instruction": "Build a class in Python with three methods.", "input": "", "output": "class MyClass:\n  def __init__(self):\n   # initialization code \n   self.data = []\n   self.count = 0\n \n  def add_data(self, data_element):\n   # add data to a list\n   self.data.append(data_element)\n   self.count += 1 \n \n  def get_data_count(self):\n   # return number of data elements\n   return self.count", "category": "Python"}, {"instruction": "Create a function to print the numbers from 1 to 20, and also print \"skip\" for multiplies of 3 and 5.", "input": "", "output": "def print_numbers():\n    '''This function prints numbers from 1 to 20, and also prints \"skip\" for the multiplies of 3 and 5.'''\n    for num in range(1, 21):\n        if num % 3 == 0 and num % 5 == 0:\n            print(\"skip\")\n        else:\n            print(num)\n\nprint_numbers()\n# Output: 1 2 skip 4 5 skip 7 8 skip 10 11 skip 13 14 skip 16 17 skip 19 20", "category": "Python"}, {"instruction": "Update the given function to return the greatest common divisor of two numbers.", "input": "def divisor_function(a, b):\n    \"\"\"Returns the greatest common divisor of two numbers.\"\"\"\n    return a % b", "output": "def divisor_function(a, b):\n    \"\"\"Returns the greatest common divisor of two numbers.\"\"\"\n    if b == 0:\n        return a\n    else:\n        return divisor_function(b, a % b)", "category": "Python"}, {"instruction": "Construct a Python program to print out the biggest number from a given list.", "input": "my_list = [6, 5, 9, 1, 8, 2]", "output": "def find_max(my_list):\n    max_num = my_list[0]\n    for num in my_list:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nprint(find_max(my_list))", "category": "Python"}, {"instruction": "Generate a Matrix with random integers between 1-50 and output the Matrix.", "input": "rows = 5\ncolumns = 6", "output": "import random\n\nrows = 5\ncolumns = 6\n\nmatrix = [[random.randint(1,50) for c in range(columns)]for r in range(rows)]\n\nfor row in matrix:\n    print(row)", "category": "Python"}, {"instruction": "Write a code that will check if a given string is a palindrome or not without using extra space.", "input": "string = \"level\"", "output": "def is_palindrome(string):\n    left, right = 0, len(string)-1\n    \n    while right >= left:\n        if string[left] != string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \nif is_palindrome(string):\n    print(\"The string is a palindrome\")\nelse:\n    print(\"The string is not a palindrome\")", "category": "Python"}, {"instruction": "Write a code that will delete a node in a Linked List at a given position.", "input": "# Node class \nclass Node: \n    # Function to initialise the node object \n    def __init__(self, data): \n        self.data = data  # Assign data \n        self.next = None  # Initialize next as null \n  \n# Linked List class \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n        \n# Given Position\nposition = 5", "output": "# Node class \nclass Node: \n    # Function to initialise the node object \n    def __init__(self, data): \n        self.data = data  # Assign data \n        self.next = None  # Initialize next as null \n  \n# Linked List class \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n\n    # Function to delete given node at position \n    def delete_node(self, position): \n  \n        # If linked list is empty \n        if self.head == None: \n            return \n  \n        # Store head node \n        temp = self.head \n  \n        # If head needs to be removed \n        if position == 0: \n            self.head = temp.next\n            temp = None\n            return \n  \n        # Find previous node of the node to be deleted \n        for i in range(position -1 ): \n            temp = temp.next\n            if temp is None: \n                break\n  \n        # If position is more than number of nodes \n        if temp is None: \n            return \n        if temp.next is None: \n            return \n  \n        # Node temp.next is the node to be deleted \n        # store pointer to the next of node to be deleted \n        next = temp.next.next\n  \n        # Unlink the node from linked list \n        temp.next = None\n  \n        temp.next = next \n  \n# Given Position\nposition = 5\n\n# Create a linked list with four nodes\nlinked_list = LinkedList()\nlinked_list.head = Node(1)\nsecond = Node(2)\nthird = Node(3)\nfourth = Node(4)\n\n# Now connect the linked list \nlinked_list.head.next = second\nsecond.next = third\nthird.next = fourth\n\n# Delete the node from given position\nlinked_list.delete_node(position)", "category": "Python"}, {"instruction": "Create a function that returns true if the given number is a prime number.", "input": "number = 9", "output": "def is_prime(number):\n    if number < 2:\n        return False\n    for i in range(2, number // 2 + 1):\n        if number % i == 0:\n            return False\n    return True\n\nif is_prime(number):\n    print(\"The number is a prime number\")\nelse:\n    print(\"The number is not a prime number\")", "category": "Python"}, {"instruction": "Rewrite the loop as a generator expression.", "input": "arr = []\nfor i in range(5):\n    arr.append(i)", "output": "arr = [i for i in range(5)]\narr = (i for i in range(5))", "category": "Python"}, {"instruction": "Write a Python program to compare two lists and print the elements which are not common between the two.", "input": "list_a = [1, 2, 3, 4, 5]\nlist_b = [3, 4, 5, 6, 7]", "output": "list_a = [1, 2, 3, 4, 5]\nlist_b = [3, 4, 5, 6, 7]\n\nnot_common_elements = [i for i in list_a if not(i in list_b)] + [i for i in list_b if not(i in list_a)]\n\nprint(not_common_elements)", "category": "Python"}, {"instruction": "Modify the code so that it prints \"Python is the best language\" five times.", "input": "for i in range(10):\n    print(\"Python is great!\")", "output": "for i in range(5):\n    print(\"Python is the best language!\")", "category": "Python"}, {"instruction": "Create a print statement in Python to print the first 5 elements in a list.", "input": "[2, 3, 4, 5, 6, 7, 8]", "output": "print(list[:5])", "category": "Python"}, {"instruction": "Create a Flask route for handling GET requests with the path \"/hello\".", "input": "", "output": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/hello\", methods=[\"GET\"]) \ndef hello(): \n    return \"Hello!\"", "category": "Python"}, {"instruction": "How would you implement a function to determine if a number is even or odd in Python?", "input": "", "output": "def even_odd(number):\n    if number % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")", "category": "Python"}, {"instruction": "Create a function that takes a list of strings as an argument and returns a list containing only non-duplicate strings.", "input": "my_list = [\"Apple\", \"Orange\", \"Grapes\", \"Apple\", \"Watermelon\"]", "output": "def remove_duplicates(arr):\n    final_list = []\n    for i in arr:\n        if i not in final_list:\n            final_list.append(i)\n    return final_list", "category": "Python"}, {"instruction": "Count and return the number of lowercase and uppercase characters in a given string.", "input": "my_str = \"Hello World!\"", "output": "def count_cases(s):\n    num_lower = 0\n    num_upper = 0\n    for char in s:\n        if char.islower():\n            num_lower += 1\n        elif char.isupper():\n            num_upper += 1\n    return num_lower, num_upper", "category": "Python"}, {"instruction": "Decompose the following code into two different functions.", "input": "def calculateMinimumDifference(nums):\n    if len(nums) <= 1: return 0\n    min_diff = float('inf')\n    for x in range(1, len(nums)):\n        min_diff = min(min_diff, abs(nums[x] - nums[x-1]))\n    return min_diff", "output": "def calculate_diff(arr):\n    return abs(arr[0] - arr[1])\n\ndef calculate_minimum_difference(nums):\n    if len(nums) <= 1: return 0\n    min_diff = float('inf')\n    for x in range(1, len(nums)):\n        min_diff = min(min_diff, calculate_diff(nums[x-1:x+1]))\n    return min_diff", "category": "Python"}, {"instruction": "Given a range of numbers, write a python program to find the sum of the elements within that range.", "input": "range: 1 to 10", "output": "def sum_range(start, end):\n    res = 0\n    for i in range(start, end+1):\n        res += i\n    return res\n\nsum_range(1, 10)", "category": "Python"}, {"instruction": "Write a python code to insert a new node at the head of a linked list", "input": "", "output": "# Node class \nclass Node: \n \n\t# Function to initialise the node object \n\tdef __init__(self, data): \n\t\tself.data = data # Assign data \n\t\tself.next = None # Initialize next as null \n\n# Linked List class \nclass LinkedList: \n\n\t# Function to initialize head \n\tdef __init__(self): \n\t\tself.head = None\n\n\t# Function to insert a new node at the beginning \n\tdef insert_at_head(self, new_data): \n\t\t\n\t\t# Create a new node \n\t\tnew_node = Node(new_data) \n\n\t\t# update the new nodes next to old head\n\t\tnew_node.next = self.head \n\n\t\t# update head to new node \n\t\tself.head = new_node", "category": "Python"}, {"instruction": "Develop a code to get the current date and time and print it", "input": "", "output": "from datetime import datetime\n\ndef get_current_datetime():\n    # Get the current date and time\n    current_datetime = datetime.now()\n    # Print the current date and time\n    print(\"Current date and time:\", current_datetime)\n\n# Call the function\nget_current_datetime()", "category": "Python"}, {"instruction": "Create a class with the name \"Animal\" and add the methods \"make_sound\" and \"eat\".", "input": "", "output": "class Animal:\n\n    def make_sound(self):\n        \"\"\"Makes a sound specific to the animal.\"\"\"\n        pass\n    \n    def eat(self):\n        \"\"\"Eats food.\"\"\"\n        pass", "category": "Python"}, {"instruction": "Write the code to create a one-dimensional array and initialize it with random numbers of length 4.", "input": "", "output": "import random\n\ndef create_random_array():\n    lst = []\n    for i in range(4):\n        lst.append(random.randint(1,10))\n\n    return lst", "category": "Python"}, {"instruction": "Write the code for a function that takes two parameters n and m and returns the sum of the first n odd integers starting with m.", "input": "", "output": "def sum_of_odd_integers(n,m):\n    total_sum = 0\n    for i in range(m,m+(2*n-1),2):\n        total_sum += i\n    return total_sum", "category": "Python"}, {"instruction": "Fix the following code so that it works without errors.", "input": "```\ndef remove_characters(name, characters):\n    for c in characters:\n        name.replace(c, '')\n    return name\n\nname = \"Alice\"\ncharacters = [\"A\", \"e\"]\n```", "output": "```\ndef remove_characters(name, characters):\n    for c in characters:\n        name = name.replace(c, '')\n    return name\n\nname = \"Alice\"\ncharacters = [\"A\", \"e\"]\n```", "category": "Python"}, {"instruction": "Design a function in Python to format a given string as a URL slug.", "input": "string = \"This is a sample string to be converted\"", "output": "def format_as_slug(string):\n    slug = string.lower()\n    slug = slug.strip()\n    slug = slug.replace(' ', '-')\n    slug = re.sub('[^a-zA-Z0-9_\\-]', '', slug)\n    return slug\n\n# Usage \nstring = \"This is a sample string to be converted\"\nresult = format_as_slug(string)\nprint(result) # Output: this-is-a-sample-string-to-be-converted", "category": "Python"}, {"instruction": "You need to design a database for a school where multiple students can have a tutor of a subject. What is the best way to design the database?", "input": "", "output": "The best way to design the database is to create three tables: students, tutors and subjects. The students table would contain columns for each student's name, ID and contact details. The tutors table would contain the tutor's name, ID and contact details. The subjects table would contain the subject name, description and number of available tutors. The three tables would then be linked by a linking table, which would contain two columns - one for the student ID, one for the tutor ID - and an extra column to identify which subject the tutor-student pair is associated with.", "category": "Python"}, {"instruction": "Write code to sort a Python list of tuples based on their second element in the tuple.", "input": "list_of_tuples = [('a', 5), ('b', 1), ('c', 10)]", "output": "list_of_tuples.sort(key=lambda tup: tup[1])", "category": "Python"}, {"instruction": "Write an algorithm to print all possible combinations of balanced parentheses.", "input": "", "output": "def generateParenthesis(N): \n    string = \"\" \n    result = [] \n  \n    # dfs on the result \n    def generate(left, right, string): \n        if (left == 0 and right == 0): \n            result.append(string) \n            return\n  \n        if left > 0: \n            generate(left - 1, right, string + \"(\") \n  \n        if left < right: \n            generate(left, right - 1, string + \")\") \n  \n    # calling the function \n    if N > 0: \n        generate(N, N, string) \n    return result \n  \n# Driver function \nprint(generateParenthesis(3))", "category": "Python"}, {"instruction": "Write a function in Python to encourage user input by prompting the user \"Please enter a valid email address.\"", "input": "", "output": "def get_email(): \n  email = input(\"Please enter a valid email address: \")\n  return email", "category": "Python"}, {"instruction": "Explain what the \"continue\" statement does.", "input": "", "output": "The \"continue\" statement is used to skip the current iteration of a loop and continue with the next iteration. It is commonly used to ignore certain items in a list or when the program should take a different action based on a particular condition.", "category": "Python"}, {"instruction": "Given two lists, create a function that finds the common elements between the two lists.", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [2, 3, 4, 6, 7]", "output": "def find_common(list1, list2):\n    common_elems = []\n    for elem in list1:\n        if elem in list2:\n            common_elems.append(elem)\n    return common_elems", "category": "Python"}, {"instruction": "Create a Python class 'Calculator' with two methods: 'add' and 'sub'.", "input": "", "output": "class Calculator:\n def add(self, x, y):\n  return x + y\n\n def sub(self, x, y):\n  return x - y", "category": "Python"}, {"instruction": "Edit the given function in Python to convert the given list of integers a into a multidimensional list of size len(a) X len(a).", "input": "def convert_to_multi(a):\n    return [a]", "output": "def convert_to_multi(a):\n    result = []\n    for i in range(len(a)):\n        row = []\n        for j in range(len(a)):\n            row.append(a[j])\n        result.append(row)\n    return result", "category": "Python"}, {"instruction": "Create a function that compares two numbers and returns 'lower', 'higher', or 'equal' based on the comparison.", "input": "", "output": "def compare_numbers(num1, num2):\n    if num1<num2:\n        return 'lower'\n    elif num1>num2:\n        return 'higher'\n    else:\n        return 'equal'", "category": "Python"}, {"instruction": "Design a class that stores the data of an individual employee", "input": "", "output": "class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary\n\n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n\n    def get_salary(self):\n        return self.salary", "category": "Python"}, {"instruction": "Using a conditional statement, print a message depending on the day of the week.", "input": "day_of_week = \"Thursday\"", "output": "if day_of_week == \"Monday\":\n    print(\"It's Monday\")\nelif day_of_week == \"Tuesday\":\n    print(\"It's Tuesday\")\nelif day_of_week == \"Wednesday\":\n    print(\"It's Wednesday\")\nelif day_of_week == \"Thursday\":\n    print(\"It's Thursday\")\nelif day_of_week == \"Friday\":\n    print(\"It's Friday\")\nelif day_of_week == \"Saturday\":\n    print(\"It's Saturday\")\nelif day_of_week == \"Sunday\":\n    print(\"It's Sunday\")", "category": "Python"}, {"instruction": "Write a function that takes an array and prints every element in a single line.", "input": "my_array = [1, 2, 3]", "output": "def print_array(arr):\n    for element in arr:\n        print(element, end=' ')", "category": "Python"}, {"instruction": "Construct a JSON structure from its respective python dictionaries", "input": "a = {\n  \"name\": \"John\",\n  \"age\": 32\n}\n\nb = {\n  \"cars\": [\"Ford\", \"BMW\", \"Fiat\"]\n}", "output": "import json\n\ndata = {**a, **b}\njson_data = json.dumps(data)", "category": "Python"}, {"instruction": "Create a code block that calculates the root of a given number", "input": "Find the square root of 16", "output": "#calculate the square root of a given number\ndef get_square_root(num):\n    root = num ** 0.5\n    return root\nif __name__ == '__main__':\n    number = 16\n    root = get_square_root(number)\n    print(\"Square root of {} is {}\".format(number, root))", "category": "Python"}, {"instruction": "Using the provided class, add a new method to print the age of employees.", "input": "class Employee: \n    def __init__(self, name, age): \n        self.name = name\n        self.age = age", "output": "class Employee: \n    def __init__(self, name, age): \n        self.name = name\n        self.age = age \n\n    def get_age(self): \n        print(self.age)", "category": "Python"}, {"instruction": "In a given list, replace the even numbers by their square.", "input": "[1, 2, 3, 4, 5, 6]", "output": "def even_nums_square(nums): \n    for i in range(len(nums)): \n        # check for even number \n        if nums[i] % 2 == 0: \n            # square the number \n            nums[i] = nums[i] * nums[i] \n    return nums", "category": "Python"}, {"instruction": "Given a 2D array, replace every element with the greatest element on its row.", "input": "[[6, 2, 9],\n [3, 8, 7],\n [1, 4, 5]]", "output": "def greatest_element(arr): \n    # loop through elements of 1D array \n    for i in range(len(arr)): \n        max_element = arr[i][0] \n  \n        # loop through elements of 2D array \n        for j in range(len(arr[i])):  \n            if arr[i][j] > max_element: \n                max_element = arr[i][j] \n              \n        # replace every element with max_element \n        for j in range(len(arr[i])): \n            arr[i][j] = max_element \n    return arr", "category": "Python"}, {"instruction": "Initialize a 2D array with `0`s.", "input": "", "output": "def init2DArray(rows, cols): \n    # initialize the array \n    arr = [[0 for i in range(cols)] for j in range(rows)]\n    return arr", "category": "Python"}, {"instruction": "Generate a URL to search the desired content on Google using Python.", "input": "Search Keyword: Covid-19 Pandemic", "output": "import urllib\nurl = 'https://www.google.com/search?q=Covid-19+Pandemic'\nurllib.request.urlopen(url)", "category": "Python"}, {"instruction": "Write a Python code snippet to evaluate an expression stored as a string.", "input": "expression = '2+2*2'", "output": "def evaluate_expression(expression):\n    return eval(expression)\n\nprint(evaluate_expression(expression))", "category": "Python"}, {"instruction": "Write a Python program to get the IP address from a given hostname", "input": "google.com", "output": "import socket\n\ndef get_ip(hostname):\n    return socket.gethostbyname(hostname)\n\nprint(get_ip('google.com'))", "category": "Python"}, {"instruction": "Convert the following JS code from a callback to a promise.", "input": "function downloadData(url, callback) {\n  // Code to download data\n  if (/* success */) {\n    callback(null, data)\n  } else {\n    callback(err, null)\n  }\n}", "output": "function downloadData(url) {\n  return new Promise((resolve, reject) => {\n    // Code to download data\n    if (/* success */) {\n      resolve(data)\n    } else {\n      reject(err)\n    }\n  })\n}", "category": "Python"}, {"instruction": "Write an algorithm in Python to find the number of distinct words in a given sentence.", "input": "\"This is a test sentence.\"", "output": "def count_distinct_words(sentence):\n    distinct_words = set([word.lower() for word in sentence.split()])\n    return len(distinct_words)\n    \nprint(count_distinct_words(\"This is a test sentence.\")) # Outputs: 4", "category": "Python"}, {"instruction": "Create a function which takes two parameters and returns true if the second parameter is a power of the first parameter.", "input": "x = 16\ny = 4", "output": "def is_a_power_of(x, y):\n    if x == y:\n        return True\n\n    if x > y and y != 0:\n        return is_a_power_of(x/y, y) \n    else:\n        return False\n\npower_of = is_a_power_of(x, y)", "category": "Python"}, {"instruction": "Implement a k-nearest neighbors algorithm to predict point labels.", "input": "", "output": "# k-nearest neighbor algorithm\ndef knn(k, data, targets, query):\n    # find k nearest neighbors of the query\n\tindices = get_neighbors(k, data, query)\n\t\n\t# find most common label among the neighbors\n\tcounts = {}\n\tfor index in indices:\n\t\tlabel = targets[index]\n\t\tcounts[label] = counts.get(label, 0) + 1\n\t\n\t# from the most to the least occurring \n\tlabels = sorted(counts, key=counts.get, reverse=True)\n\treturn labels[0]", "category": "Python"}, {"instruction": "how to implement a recursive function for computing Fibonacci numbers?", "input": "max_num = 5", "output": "def Fibonacci(n):\n    if n==0 or n==1:\n        return n \n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)\n\ndef Fibonacci_Series(max_num):\n    for n in range(max_num+1):\n        print(Fibonacci(n))\n\n# Output: 0 1 1 2 3 5", "category": "Python"}, {"instruction": "Develop a code that can calculate the cumulative sum of an array", "input": "[2, 4, 6, 8, 10]", "output": "def cummulative_sum(arr):\n    cum_sum = 0 \n    for num in arr:\n       cum_sum += num\n    return cum_sum\nif __name__ == '__main__':\n    test_list = [2, 4, 6, 8, 10]\n    print('Cumulative Sum:', cummulative_sum(test_list))", "category": "Python"}, {"instruction": "Given a function that takes two parameters \"a\" and \"b\", write a code to add the two parameters together and return the result.", "input": "a = 1, b = 2", "output": "#Add two parameters together and return the result\ndef add_two_params(a, b):\n    return a + b\nresult = add_two_params(1, 2)\nprint('The result is', result)", "category": "Python"}, {"instruction": "Write a code to find control characters such as carriage returns inside a given string", "input": "'This is a string\\r\\nwith some control characters'", "output": "#Function to find control characters\ndef find_control_chars(string):\n    control_chars = [\n        '\\r', \n        '\\n'\n    ]\n    for char in control_chars:\n        if char in string:\n            return True\n    return False\n    \nstring = 'This is a string\\r\\nwith some control characters'\ncontrol_char_exists = find_control_chars(string)\nprint('Control character exists:', control_char_exists)", "category": "Python"}, {"instruction": "Generate a new list from an old list by multiplying each element of the old list with a given number", "input": "numbers = [2, 4, 6]\nmultiply = 5", "output": "def multiply_elements(numbers, multiply):\n    new_list = []\n    for num in numbers:\n        new_list.append(num * multiply)\n    return new_list\n\nnumbers = [2, 4, 6]\nmultiply = 5\n\nprint(multiply_elements(numbers, multiply))", "category": "Python"}, {"instruction": "Write a Python code that takes a string and replace all the non-alphanumeric characters with a given character.", "input": "string = 'Hello, world!'\ncharacter = '#'", "output": "import re\n\ndef replace_non_alphanum(string, character):\n    return re.sub(r'\\W', character, string)\n\nstring = 'Hello, world!'\ncharacter = '#'\n\nprint(replace_non_alphanum(string, character))", "category": "Python"}, {"instruction": "Write a code that takes two lists and find the longest common starting substring", "input": "list1 = ['cat', 'car', 'camel']\nlist2 = ['carry', 'cap', 'caterpillar']", "output": "def find_longest_substring(list1, list2):\n    string1 = list1[0]\n    string2 = list2[0]\n    min_length = min(len(string1), len(string2))\n    longest_substring = \"\"\n    \n    for i in range(min_length):\n        if string1[i] == string2[i]:\n            longest_substring += string1[i]\n        else:\n            break\n    return longest_substring\n    \nprint(find_longest_substring(list1, list2))", "category": "Python"}, {"instruction": "Write a Python code take a given string and return the string in reverse.", "input": "hello", "output": "def reverse_string(string):\n    return string[::-1]\n\nprint(reverse_string('hello'))", "category": "Python"}, {"instruction": "Take the following array and add up all of the numbers", "input": "numbers = [4,15,7,10,45]", "output": "def sum_numbers(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\nprint(sum_numbers(numbers))", "category": "Python"}, {"instruction": "Fix the bug in the following code that causes the output to be incorrect.", "input": "def calculate_sum(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\nnumbers = [2, 3, 5]\nresult = calculate_sum(numbers)\n\nprint(f'Sum of {numbers} is {result}')", "output": "def calculate_sum(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\nnumbers = [2, 3, 5]\nresult = calculate_sum(numbers)\n\nprint(f'Sum of {numbers} is {result}.')", "category": "Python"}, {"instruction": "Implement a class to create an object with the given characteristics", "input": "Characteristics: Name, Age, Gender", "output": "class Person:\n    def __init__(self, name, age, gender):\n        self.name = name \n        self.age = age \n        self.gender = gender \n\n    def get_details(self):\n        return f\"Name: {self.name}, Age: {self.age}, Gender: {self.gender}\"", "category": "Python"}, {"instruction": "Implement a function that creates a dictionary from two lists which contain the keys and values, respectively.", "input": "keys = [\"name\", \"age\", \"city\"]\nvalues = [\"John\", 30, \"New York\"]", "output": "def create_dictionary(keys, values):\n    # Create an empty dictionary\n    my_dict = {}\n    # Populate the dictionary with elements from lists\n    for i in range(len(keys)): \n        my_dict[keys[i]] = values[i]\n    return my_dict", "category": "Python"}, {"instruction": "How can you print the Hello World message using the Tkinter module in Python?", "input": "", "output": "\"\"\"Print the Hello World message using the Tkinter module in Python\"\"\"\nimport tkinter as tk\n\n# Create the main window\nwindow = tk.Tk()\n\n# Create the label with the text\nhello_label = tk.Label(window, text=\"Hello World\")\n\n# Pack the label to the window\nhello_label.pack()\n\n# Main loop\nwindow.mainloop()", "category": "Python"}, {"instruction": "Create a Python function to sort a list of dictionaries in ascending order of \"count\".", "input": "data = [\n    {'name': 'Alice', 'count': 5}, \n    {'name': 'Bob', 'count': 3}, \n    {'name': 'John', 'count': 7},\n    {'name': 'David', 'count': 4},\n]", "output": "def sort_dict_list(data):\n    \"\"\"Sort a list of dictionaries in ascending order of 'count'\n   \n    Args:\n        data (list): A list of dictionaries\n   \n    Returns:\n        list: A sorted list of dictionaries\n    \"\"\"\n \n    sorted_data = sorted(data, key=lambda x: x['count'])\n    return sorted_data\n\nif __name__ == '__main__':\n    data = [\n        {'name': 'Alice', 'count': 5}, \n        {'name': 'Bob', 'count': 3}, \n        {'name': 'John', 'count': 7},\n        {'name': 'David', 'count': 4},\n    ]\n    sorted_data = sort_dict_list(data)\n    print(sorted_data)", "category": "Python"}, {"instruction": "Construct an if-statement to check whether the given element is present in an array or not.", "input": "arr = [4, 5, 6]\nelement = 5", "output": "if element in arr:\n    print(\"Element is present in array\")", "category": "Python"}, {"instruction": "Write a Python script to calculate the total and the average of an array of numbers.", "input": "arr = [56, 23, 89, 17, 13, 10]", "output": "total=sum(arr)\navg=sum(arr)/len(arr)\nprint(\"Total of the array elements is: \"+str(total))\nprint(\"Average of the array elements is: \"+str(avg))", "category": "Python"}, {"instruction": "Write a Python function to calculate the sum of all items in a given dictionary with integer values.", "input": "dict = {'a': 5, 'b': 10, 'c': 3}", "output": "def dict_sum(nums):\n sum = 0\n for key, val in nums.items():\n  sum +=val\n return sum\n\nprint(dict_sum(dict)) //Output is: 18", "category": "Python"}, {"instruction": "Given an array of strings, write a code snippet in Python that finds the longest string and prints its length.", "input": "arr = [\"Dog\",\"Cat\",\"Mouse\"]", "output": "arr = [\"Dog\",\"Cat\",\"Mouse\"]\nlongest_str = max(arr, key=len)\nprint(len(longest_str))", "category": "Python"}, {"instruction": "Write a Python program to create a list of n numbers (where n is the input) and print the list in reverse order.", "input": "n=5", "output": "n = 5\nlst = list(range(n, 0, -1))\nprint(lst)", "category": "Python"}, {"instruction": "Create a python function that takes in a list and returns a new list with all the even elements of the original list.", "input": "", "output": "def get_even_elements(arr):\n    return [num for num in arr if num % 2 == 0]", "category": "Python"}, {"instruction": "From the input text, create a dictionary that contains the count of the most frequent words.", "input": "The quick brown fox jumped over the lazy dog.", "output": "from collections import Counter\n\ndef most_frequent_words(text):\n    word_list = text.split()\n    word_counts = Counter(word_list)\n    return word_counts.most_common()", "category": "Python"}, {"instruction": "Design a Python class to represent a Triangle and its properties, such as area, perimeter, and angles.", "input": "", "output": "class Triangle:\n    def __init__(self, side_a, side_b, side_c):\n        self.side_a = side_a\n        self.side_b = side_b\n        self.side_c = side_c\n\n    def get_area(self):\n        s = (self.side_a+self.side_b+self.side_c)/2\n        return (s*(s-self.side_a)*(s-self.side_b)*(s-self.side_c)) ** 0.5\n\n    def get_perimeter(self):\n        return self.side_a + self.side_b + self.side_c\n\n    def get_angles(self):\n        a = (self.side_b**2 + self.side_c**2 - self.side_a**2)/(2*self.side_b*self.side_c)\n        b = (self.side_a**2 + self.side_c**2 - self.side_b**2)/(2*self.side_a*self.side_c)\n        c = (self.side_b**2 + self.side_a**2 - self.side_c**2)/(2*self.side_b*self.side_a)\n        return [a, b, c]", "category": "Python"}, {"instruction": "Design a Python class to represent a student and their GPA.", "input": "", "output": "class Student:\n\n    def __init__(self, name, gpa):\n        self.name = name\n        self.gpa = gpa\n\n    def get_name(self):\n        return self.name\n\n    def get_gpa(self):\n        return self.gpa", "category": "Python"}, {"instruction": "Write a function that takes a list of numbers and returns their sum.", "input": "", "output": "def sum_list(list_nums):\n  total = 0\n  for num in list_nums:\n    total += num\n  return total", "category": "Python"}, {"instruction": "Edit the following code to make it work in Python 3.", "input": "# Python 2\ndef greet(name):\n    print \"Hello,\", name\n\ngreet(\"John\")", "output": "# Python 3\ndef greet(name):\n    print(\"Hello,\", name)\n    \ngreet(\"John\")", "category": "Python"}, {"instruction": "Create a Python script to print the first N numbers of the Fibonacci sequence.", "input": "", "output": "def print_fibonacci(n):\n    # make a list of the first n numbers in the Fibonacci series\n    fibonacci = [0, 1]\n    while len(fibonacci) < n:\n        fibonacci.append(fibonacci[-1] + fibonacci[-2])\n    \n    # print out the list\n    for number in fibonacci:\n        print(number)", "category": "Python"}, {"instruction": "Write a function that converts a list of strings to a dictionary.", "input": "", "output": "def string_list_to_dictionary(string_list):\n    result = {}\n    for s in string_list:\n        result[s] = True\n    return result", "category": "Python"}, {"instruction": "Given a list of numbers and the length n, write a Python program to add the elements of all even indexed values to the corresponding odd indexed values.", "input": "my_list = [5, 10, 15, 20, 25]\nn = 5", "output": "def add_corresponding_elements(lst, n):\n    result = 0\n\n    for i in range(0, n, 2): \n        result += lst[i] + lst[i + 1] \n\n    return result\n\nmy_list = [5, 10, 15, 20, 25]\nn = 5\n\nresult = add_corresponding_elements(my_list, n)\nprint(result)  # Output: 35", "category": "Python"}, {"instruction": "Convert the following Python code from functions to lambda expressions.", "input": "def cube(x):\n    return x ** 3\n\ndef add_cube(x, y):\n    return cube(x) + cube(y)", "output": "cube = lambda x: x ** 3\nadd_cube = lambda x, y: cube(x) + cube(y)", "category": "Python"}, {"instruction": "Write a Python function to split a string into a list of strings, separated by a given delimiter.", "input": "", "output": "def split_string(string, delimiter):\n    \"\"\"Split a string into a list of strings, separated by a given delimiter.\"\"\"\n    return string.split(delimiter)", "category": "Python"}, {"instruction": "Modify the following code to include a try/except statement.", "input": "def read_file(filename):\n    with open(filename) as f:\n        return f.read()", "output": "def read_file(filename):\n    try:\n        with open(filename) as f:\n            return f.read()\n    except FileNotFoundError:\n        print(f\"File {filename} was not found.\")", "category": "Python"}, {"instruction": "Generate a Python function that takes 'string' as an argument and return a new string with the last two characters of 'string' repeated.", "input": "", "output": "def repeat_last_two_char(string):\n    \"\"\"Takes a string as an argument and returns a new string with the last two characters repeated.\"\"\"\n    if len(string) < 2:\n        return \"\"\n    return string[:-2] + string[-2:] * 2", "category": "Python"}, {"instruction": "Write an algorithm in Python to determine if an array has duplicate elements or not.", "input": "", "output": "def containsDuplicate(arr):\n    seen = set()\n    for element in arr:\n        if element in seen:\n            return True\n        seen.add(element)\n    return False", "category": "Python"}, {"instruction": "Implement a function in Python to determine if a string is a palindrome.", "input": "", "output": "def is_palindrome(str): \n    rev = ''.join(reversed(str)) \n\n    if (str == rev): \n        return True\n    return False", "category": "Python"}, {"instruction": "Create a function that takes an array of strings and returns an array of their lengths.", "input": "[\u2018Hello\u2019, \u2018World\u2019]", "output": "def array_length(arr):\n    return [len(s) for s in arr]\n\nif __name__ == '__main__':\n    arr = ['Hello', 'World']\n    print(array_length(arr))", "category": "Python"}, {"instruction": "Create an algorithm to convert a temperature from Celsius to Fahrenheit.", "input": "0", "output": "def ctoF(temperature):\n    return (temperature * 1.8) + 32\n\nif __name__ == '__main__':\n    print(ctoF(0))", "category": "Python"}, {"instruction": "Create a function that returns the nth Fibonacci number.", "input": "", "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)", "category": "Python"}, {"instruction": "Generate a hash for a given dictionary.", "input": "my_dict = {'name': 'John', 'age': 27, 'profession': 'programmer'}", "output": "import hashlib\n\ndef generate_hash(my_dict):\n    my_string = str(my_dict)\n    res = hashlib.md5(my_string.encode()).hexdigest() \n    \n    return res\n\nprint(generate_hash(my_dict))", "category": "Python"}, {"instruction": "Write a function to classify the input based on the following criteria: \nIf the input is positive, output \"positive\"; if the input is zero, output \"zero\"; if the input is negative, output \"negative\".", "input": "", "output": "def classify(x):\n    if x > 0:\n        return \"positive\"\n    elif x == 0:\n        return \"zero\"\n    else:\n        return \"negative\"", "category": "Python"}, {"instruction": "Write a function that takes in a 2D matrix and outputs the transpose of the matrix.", "input": "", "output": "def transpose_matrix(matrix):\n    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]", "category": "Python"}, {"instruction": "Perform PCA on a dataset.", "input": "", "output": "from sklearn.decomposition import PCA\n\ndef perform_pca(X):\n    pca = PCA(n_components=2)\n    pca.fit(X)\n    X_pca = pca.transform(X)\n\n    return X_pca", "category": "Python"}, {"instruction": "Write code to print out all the even numbers from a given list of numbers.", "input": "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "for number in my_list:\n    if (number % 2 == 0):\n        print(number)", "category": "Python"}, {"instruction": "Write a function that takes in a list and a target value, and returns a new list with the target value removed.", "input": "my_list = [1,2,3,4,5,6]\ntarget = 3", "output": "def remove_target(my_list, target):\n    return [x for x in my_list if x != target]\n\nmy_list = remove_target(my_list, target)\nprint(my_list)", "category": "Python"}, {"instruction": "Create a data frame from a dictionary.", "input": "my_dict = {'state': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada'], \n        'year': [2000, 2001, 2002, 2001, 2002],\n        'pop': [1.5, 1.7, 3.6, 2.4, 2.9]}", "output": "import pandas as pd\n\nmy_df = pd.DataFrame(my_dict)\nprint(my_df)", "category": "Python"}, {"instruction": "How can you create a copy of a list?", "input": "", "output": "You can create a copy of a list by using the \"list\" method. For example, to create a copy of a list called \"my_list\", you can simply write \"my_list_copy = list(my_list)\".", "category": "Python"}, {"instruction": "Implement a sequence to sequence model for translation.", "input": "", "output": "from tensorflow.keras.layers import Input, LSTM, Dense\n\ndef seq2seq_model(src_length, trg_length, embedding_dim, num_enc_tokens, num_dec_tokens):\n    # Define an input layer.\n    encoder_inputs = Input(shape=(None, num_enc_tokens))\n    # Add an LSTM layer with `src_length` number of units\n    encoder_lstm = LSTM(src_length, return_state=True)\n    # Define the encoder output, state and the encoder states\n    encoder_outputs, state_h, state_c = encoder_lstm(encoder_inputs)\n    # Discard `encoder_outputs` and only keep the states.\n    encoder_states = [state_h, state_c]\n\n    # Set up the decoder, using `encoder_states` as initial state.\n    decoder_inputs = Input(shape=(None, num_dec_tokens))\n    # Add an LSTM layer with `src_length` number of units\n    decoder_lstm = LSTM(src_length, return_state=True, return_sequences=True)\n    decoder_outputs, _, _ = decoder_lstm(decoder_inputs, initial_state=encoder_states)\n    # Add a fully connected layer\n    decoder_dense = Dense(trg_length, activation='softmax')\n    # Define the output of the decoder\n    decoder_outputs = decoder_dense(decoder_outputs)\n\n    # Create a model\n    model = Model([encoder_inputs, decoder_inputs], decoder_outputs)\n    # Compile the model\n    model.compile(optimizer='adam', loss='categorical_crossentropy')\n    return model", "category": "Python"}, {"instruction": "Write a Python program to find the equilibrium index of an array. An index of an array is called equilibrium index if the sum of elements at lower indexes is equal to the sum of elements at higher indexes.", "input": "arr = [-7, 1, 9, -4, 3, 2]", "output": "def find_equilibrium_index(arr):\n    total_sum = sum(arr)\n\n    left_sum = 0\n    \n    for index, num in enumerate(arr):\n        total_sum -= num\n        if left_sum == total_sum:\n            return index \n        left_sum += num\n    return -1\n\narr = [-7, 1, 9, -4, 3, 2]\nprint(find_equilibrium_index(arr)) # Output: 2", "category": "Python"}, {"instruction": "Given a two dimensional array, write a Python program to print the second diagonal of the array.", "input": "my_array = [[1, 2, 3],\n             [4, 5, 6],\n             [7, 8, 9]]", "output": "my_array = [[1, 2, 3],\n             [4, 5, 6],\n             [7, 8, 9]]\n\n# A function to print second diagonal of \n# given array\ndef print_second_diagonal(arr): \n    # Find length of given array \n    n = len(arr)  \n      \n    # Traverse second diagonal \n    for i in range(0, n): \n        print(arr[i][n-1-i], end = \" \") \n          \n# Driver code \nprint_second_diagonal(my_array)\n# Output: 3 6 9", "category": "Python"}, {"instruction": "Write a Python function to return the most frequent character in the given string.", "input": "my_string = \"hello world\"", "output": "def most_frequent(s):\n    char_freq = {}\n    max_freq = 0\n    most_frequent_char = \"\"\n\n    for c in s:\n        if c in char_freq:\n            char_freq[c] += 1\n        else:\n            char_freq[c] = 1\n\n        if char_freq[c] > max_freq:\n            max_freq = char_freq[c]\n            most_frequent_char = c\n\n    return most_frequent_char\n\nmy_string = \"hello world\"\nprint(most_frequent(my_string)) # Output: 'l'", "category": "Python"}, {"instruction": "Write a Python program to compare two strings and return True if both the strings are equal, otherwise False.", "input": "s1 = \"Hello\"\ns2 = \"Hello\"", "output": "s1 = \"Hello\"\ns2 = \"Hello\"\n\nprint(s1 == s2) # Output: True", "category": "Python"}, {"instruction": "Write a Python program to divide two numbers and return the quotient and remainder of the division.", "input": "x = 10\ny = 3", "output": "x = 10\ny = 3\n\nquotient = int(x / y)\nremainder = x % y\n\nprint(\"Quotient:\", quotient)\nprint(\"Remainder:\", remainder)\n# Output: Quotient: 3, Remainder: 1", "category": "Python"}, {"instruction": "Write a Python program to iterate the given list and print the square or each element.", "input": "my_list = [1, 2, 3, 4]", "output": "my_list = [1, 2, 3, 4]\n\nfor i in my_list:\n    print(i**2)\n\n# Output: 1, 4, 9, 16", "category": "Python"}, {"instruction": "Suggest a way to combine two lists of dictionaries into one list of dictionaries in Python.", "input": "list1 = [{'name': 'John', 'age': 23}, {'name': 'Mary', 'age': 20}]\nlist2 = [{'name': 'Steve', 'age': 25}, {'name': 'Jake', 'age': 18}]", "output": "combinedList = list1 + list2", "category": "Python"}, {"instruction": "Formulate a regex expression in Python to check if a given string is an email address.", "input": "", "output": "import re \n\ndef is_email(string): \n   regex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w+$'\n   if(re.search(regex,string)): \n      print(\"Valid Email\")  \n   else: \n      print(\"Invalid Email\")", "category": "Python"}, {"instruction": "Develop a python code snippet to create a list, with the name \"fruits\" containing strings of the names of 5 fruits.", "input": "", "output": "fruits = [\"apple\", \"banana\", \"mango\", \"strawberry\", \"kiwi\"]", "category": "Python"}, {"instruction": "Create a class in Python which has a method to sort an array of numbers in increasing order.", "input": "nums = [4, 3, 1, 6]", "output": "class ArraySort:\n    def __init__(self, nums):\n        self.nums = nums\n    \n    def sort(self):\n        for i in range(len(self.nums)):\n            for j in range(i+1, len(self.nums)):\n                if self.nums[i] > self.nums[j]:\n                    temp = self.nums[i]\n                    self.nums[i] = self.nums[j]\n                    self.nums[j] = temp\n        return self.nums", "category": "Python"}, {"instruction": "Output the contents of a list in a comma-separated string.", "input": "myList = [14, 19, 22, 27, 30]", "output": "def list_to_string(myList): \n    # initialize an empty string \n    string = \"\" \n  \n    # traverse in the string  \n    for ele in myList:\n        string += str(ele) +\",\"\n  \n    # return result string  \n    return string\n  \n# Driver code \nmyList = [14, 19, 22, 27, 30]\nprint(list_to_string(myList))", "category": "Python"}, {"instruction": "Create a Python code that takes two strings and combine them into a single string.", "input": "str1 = \"Hello\"\nstr2 = \"World\"", "output": "combinedString = str1 + ' ' + str2\nprint(combinedString) # Hello World", "category": "Python"}, {"instruction": "Generate a program that identifies the type of triangle formed by the three given sides.", "input": "side1 = 4\nside2 = 4\nside3 = 5", "output": "if side1 == side2 and side2 == side3:\n    print(\"Equilateral Triangle\")\nelif side1 == side2 or side2 == side3 or side1 == side3:\n    print(\"Isosceles Triangle\")\nelif side1 != side2 and side2 != side3 and side1 != side3:\n    print(\"Scalene Triangle\")", "category": "Python"}, {"instruction": "Implement an algorithm to remove duplicates from a linked list.", "input": "", "output": "Algorithm to remove duplicate elements from a linked list:\n\n1. Initialize a hash set to store the unique elements of the linked list.\n2. Iterate through the linked list, if the element is not present in the hash set, add it to the set.\n3. Else, remove the element from the linked list.\n4. Return the modified list once all the elements have been iterated through.", "category": "Python"}, {"instruction": "Suggest a modification to the following python code to make it efficient.", "input": "def median(my_list):\n\thalf = len(my_list)//2\n\tmedian_index = len(my_list) - half\n\treturn my_list[median_index]", "output": "def median(my_list):\n\thalf = len(my_list)//2\n\tmy_list.sort()\n\tmedian_index = len(my_list) - half\n\treturn my_list[median_index]\n\nThe suggested modification is to add a sorting step to the code before finding the median index. This will ensure the list is always in order and the median index can be found in an efficient manner.", "category": "Python"}, {"instruction": "Sort an array A of integers in ascending order without using any pre-defined sorting functions.", "input": "[23, 1, 32, 15, 40]", "output": "Algorithm to sort an array A of integers in ascending order without using any pre-defined sorting functions:\n\n1. Initialize a variable swapped to false.\n2. Iterate through the array A, compare each pair of adjacent elements and swap them if they are not in ascending order.\n3. After each iteration, if a swap has occurred, set swapped to true, otherwise set it to false.\n4. Repeat step 2 and 3 until swapped is false.", "category": "Python"}, {"instruction": "Create an algorithm to detect if an array A contains duplicates.", "input": "", "output": "Algorithm to detect duplicate elements in an array A:\n\n1. Initialize a hash set set to store the elements of array A.\n2. Iterate through the array A, if the element is already present in the set, return True. Otherwise add the element to the set.\n3. Return False once all the elements have been iterated through.", "category": "Python"}, {"instruction": "How would you create a new array with only the positive numbers from the following array in Python?", "input": "[-2, -5, 3, 6, 0, -3]", "output": "arr = [-2,-5,3,6,0,-3]\n\npos_arr = [num for num in arr if num >= 0]", "category": "Python"}, {"instruction": "Create a class in Python named ``Rectangle`` with two attributes length and width.", "input": "", "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width", "category": "Python"}, {"instruction": "Create a cryptography program that computes the factorial of a given number.", "input": "num = 5", "output": "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n\nif __name__ == '__main__':\n    num = 5\n    result = factorial(num)\n    print(result)", "category": "Python"}, {"instruction": "Given a linked list, remove all elements from it which have greater value than a given number X.", "input": "head = [7, 14, 28, 21, 32]\nvalue = 21", "output": "class node:\n    def __init__(self, data):\n        self. data = data\n        self. next = None\n\ndef removeGreater(head, value):\n    while head and head.data > value:\n        head = head.next\n    p = head\n    while p and p.next:\n        if p.next.data > value:\n            p.next = p.next.next\n        else:\n            p = p.next\n    return head\n\nif __name__ == '__main__':\n    head = node(7)\n    head.next = node(14)\n    head.next.next = node(28)\n    head.next.next.next = node(21)\n    head.next.next.next.next = node(32)\n\n    result = removeGreater(head, 21)\n    while result:\n        print(result.data, end=\" \")\n        result= result.next", "category": "Python"}, {"instruction": "Find a way to generate all the unique permutations for a given string.", "input": "s = 'ABC'", "output": "def permutation(str): \n    if len(str) == 0: \n        return [] \n    if len(str) == 1: \n        return [str]  \n    l = []  \n    for i in range(len(str)): \n       m = str[i]  \n       remLst = str[:i] + str[i+1:]  \n       for p in permutation(remLst): \n           l.append([m] + p) \n    return l \n\nif __name__== \"__main__\":\n    s = 'ABC'\n    perms = permutation(s)\n    for p in perms:\n        print(''.join(p))", "category": "Python"}, {"instruction": "Write a function to check if a number is a power of 2.", "input": "num = 8", "output": "def isPowerOfTwo(num): \n    if (num == 0): \n        return False\n  \n    while (num != 1): \n        if (num % 2 != 0): \n            return False\n        num = num // 2\n              \n    return True\n  \n# Driver code \nif __name__=='__main__':\n    num = 8\n    if(isPowerOfTwo(num)): \n        print('Yes') \n    else: \n        print('No')", "category": "Python"}, {"instruction": "Given an array of integers and an integer, return true if any two integers in the array add up to the given integer.", "input": "arr = [1, 2, 3, 4]\nsum = 7", "output": "def test_sum(arr, sum): \n    for i in range(len(arr)-1): \n        for j in range(i+1, len(arr)): \n            if arr[i] + arr[j] == sum: \n                return True \n    return False\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4] \n    sum = 7\n    result = test_sum(arr, sum) \n    if result: \n        print(\"Array has two elements with the given sum\") \n    else: \n        print(\"Array doesn't have two elements with the given sum\")", "category": "Python"}, {"instruction": "Create a python program to count how many times a word appears in a given string.", "input": "The quick brown fox jumps over the lazy dog", "output": "def count_word(word, input):\n    count = 0\n    for w in input.split():\n        if w == word:\n           count += 1\n    return count\n\nif __name__ == '__main__':\n    word = 'fox'\n    input = 'The quick brown fox jumps over the lazy dog'\n    result = count_word(word, input)\n    print(f' \"{word}\" occurs {result} times in the given string.')", "category": "Python"}, {"instruction": "Explain what a try-except statement is and how it should be used.", "input": "", "output": "A try-except statement is a mechanism for handling errors that may occur in a program in a controlled manner. It is used to catch errors in the program, process them gracefully and prevent the program from crashing. The syntax of try-except is try: followed by the code to be executed and except clause to handle the error. This code block can also be augmented with a finally clause to execute the code at the end of the execution of the try-except block.", "category": "Python"}, {"instruction": "Execute the following code in a Python Shell and explain the output.", "input": "a = 5\nb = 6\n\nprint(a,b)", "output": "The code will print 5 and 6 on separate lines. This is because we have not specified a separator, thus the default separator (whitespace) will be used.\n\nOutput:\n5\n6", "category": "Python"}, {"instruction": "Sort the following list of numbers using Merge Sort", "input": "List = [5,7,3,9,2]", "output": "def mergesort(nums): \n    if len(nums) == 1: \n        return nums \n  \n    mid = len(nums) // 2\n    left_list = nums[:mid] \n    right_list = nums[mid:] \n  \n    left_list = mergesort(left_list) \n    right_list = mergesort(right_list) \n    return merge(left_list, right_list) \n\ndef merge(left_list, right_list): \n    sorted_list = [] \n    left_list_index = right_list_index = 0\n  \n    left_list_length, right_list_length = len(left_list), len(right_list) \n  \n    for _ in range(left_list_length + right_list_length): \n        if left_list_index < left_list_length and right_list_index < right_list_length: \n            if left_list[left_list_index] <= right_list[right_list_index]: \n                sorted_list.append(left_list[left_list_index]) \n                left_list_index += 1\n            else: \n                sorted_list.append(right_list[right_list_index]) \n                right_list_index += 1\n        elif left_list_index == left_list_length: \n            sorted_list.append(right_list[right_list_index]) \n            right_list_index += 1\n        elif right_list_index == right_list_length: \n            sorted_list.append(left_list[left_list_index]) \n            left_list_index += 1\n  \n    return sorted_list \n\nOutput:\n[2, 3, 5, 7, 9]", "category": "Python"}, {"instruction": "Develop a program to remove duplicate items in the list.", "input": "", "output": "def remove_duplicates(list_values):\n    result = []\n    for i in list_values:\n        if i not in result:\n            result.append(i)\n    return result", "category": "Python"}, {"instruction": "Describe the purpose and usage of the statement break.", "input": "", "output": "The break statement is used to terminate a loop prematurely. It is mostly used to escape an infinite loop or to move out of a loop when a specific condition is met. It can be used in while, for and nested loops.", "category": "Python"}, {"instruction": "Reverse a string without using any in-built Python functions.", "input": "String: racecar", "output": "rev_str = \"\"\nfor ch in string:\n    rev_str = ch + rev_str\nreturn rev_str", "category": "Python"}, {"instruction": "Create a function to find the larger number in a given list.", "input": "myList = [18, 24, 34, 30]", "output": "def larger_num(myList): \n    \n    # Initialize maximum element \n    max = myList[0] \n  \n    # Traverse list elements from second and \n    # compare every element with current max  \n    for i in range(1, len(myList)): \n        if myList[i] > max: \n            max = myList[i] \n    return max \n  \nmyList = [18, 24, 34, 30]\nprint(larger_num(myList))", "category": "Python"}, {"instruction": "Compare two given objects and output the differences.", "input": "Object 1: {name: John, age: 30, city: New York}\nObject 2: {name: John, age: 40, city: Las Vegas}", "output": "def compare_objects(object1, object2):\n    for key, value in object1.items():\n        if key in object2:\n            if object1[key] != object2[key]:\n                print(\"Different values for \" + key + \": \" + str(object1[key]) + \" vs. \" + str(object2[key]))\n        else:\n            print(\"New key not in second object: \" + key)\n    for key, value in object2.items():\n        if key not in object1:\n            print(\"New key not in first object: \" + key)\n    \ncompare_objects({\"name\": \"John\", \"age\": 30, \"city\": \"New York\"},\n                {\"name\": \"John\", \"age\": 40, \"city\": \"Las Vegas\"})\n\n# Output:\n# Different values for age: 30 vs. 40\n# New key not in first object: city", "category": "Python"}, {"instruction": "Create a program that adds up 11 numbers.", "input": "11 numbers: 3, 6, 8, 12, 4, 19, 23, 12, 15, 10, 20", "output": "# defining a function  \ndef add_ele(numbers): \n  \n    # Initialize result \n    result = 0\n    i = 0\n  \n    # Iterating elements in list  \n    for i in range(len(numbers)): \n        result += numbers[i] \n    return result \n  \n# Driver code \nnumbers = [3, 6, 8, 12, 4, 19, 23, 12, 15, 10, 20]\nprint(add_ele(numbers))", "category": "Python"}, {"instruction": "Create a variable called ``new_list`` that contains all elements from the list ``old_list`` which are greater than 5.", "input": "old_list = [2, 3, 5, 7, 9]", "output": "old_list = [2, 3, 5, 7, 9]\nnew_list = []\nfor i in old_list: \n    if i > 5:\n        new_list.append(i)", "category": "Python"}, {"instruction": "Write a code to normalize a given array of numbers between 0 and 1 where min = 0, max = 1 and every other number is proportional to it.", "input": "arr = [10, 20, 30, 25, 0]", "output": "def normalize_array(arr):\n  # Check if the array is empty\n  if len(arr) == 0:\n    return []\n  \n  # Get min and max of the array\n  min_el = min(arr)\n  max_el = max(arr)\n  \n  # Normalize elements in the array\n  normalized_arr = [(el - min_el) / (max_el - min_el) for el in arr]\n  \n  return normalized_arr\n  \nnormalized_arr = normalize_array(arr)\nprint(\"Normalized array:\", normalized_arr)", "category": "Python"}, {"instruction": "Create a function to convert the given string to hexadecimal code.", "input": "", "output": "def string_to_hexadecimal(string):\n    # convert the string to list of bytes\n    bytes_ = [ord(char) for char in string] \n    \n    # convert the bytes to hexadecimal code\n    hexadecimal_list = [hex(byte) for byte in bytes_] \n    \n    # remove the \"0x\" from the hexadecimal code\n    hexadecimal_list = [item[2:] for item in hexadecimal_list]\n    \n    # join all the code into a single string\n    hexadecimal_string = ''.join(hexadecimal_list)\n    \n    return hexadecimal_string", "category": "Python"}, {"instruction": "Write a code to print a binary tree in pre order traversal.", "input": "", "output": "def pre_order_traversal(root):\n    # Return if tree is empty\n  if root == None:\n    return\n  # Print the data of node\n  print(root.data),\n\n  # Recursively call the pre-order traversal on left subtree \n  pre_order_traversal(root.left)\n  \n  # Recursively call the pre-order traversal on right subtree\n  pre_order_traversal(root.right)", "category": "Python"}, {"instruction": "Create a function to categorize a given array of numbers into prime and composite numbers.", "input": "arr = [2, 5, 7, 11, 17, 21, 25]", "output": "def is_prime(num):\n    # check prime\n    divisors = []\n    for x in range(1, num + 1):\n        if (num % x == 0):\n            divisors.append(x)\n    if len(divisors) == 2:\n        return True\n    else:\n        return False\n\ndef categorize_numbers(arr):\n    prime_nums = []\n    composite_nums = []\n    for number in arr:\n        if is_prime(number):\n            prime_nums.append(number)\n        else:\n            composite_nums.append(number)\n    return prime_nums, composite_nums\n    \nprime_nums, composite_nums = categorize_numbers(arr)\nprint(\"Prime numbers in arr:\", prime_nums)\nprint(\"Composite numbers in arr:\", composite_nums)", "category": "Python"}, {"instruction": "Design a class to convert a given string to Morse code and store it as a list.", "input": "", "output": "class MorseCodeConverter:\n    def __init__(self, string):\n        self.string = string\n        self.alphabet = {\n            'a': '.-',\n            'b': '-...',\n            'c': '-.-.',\n            'd': '-..',\n            'e': '.',\n            'f': '..-.',\n            'g': '--.',\n            'h': '....',\n            'i': '..',\n            'j': '.---',\n            'k': '-.-',\n            'l': '.-..',\n            'm': '--',\n            'n': '-.',\n            'o': '---',\n            'p': '.--.',\n            'q': '--.-',\n            'r': '.-.',\n            's': '...',\n            't': '-',\n            'u': '..-',\n            'v': '...-',\n            'w': '.--',\n            'x': '-..-',\n            'y': '-.--',\n            'z': '--..',\n            '1': '.----',\n            '2': '..---',\n            '3': '...--',\n            '4': '....-',\n            '5': '.....',\n            '6': '-....',\n            '7': '--...',\n            '8': '---..',\n            '9': '----.',\n            '0': '-----'\n        }\n    \n    def convert(self):\n        morse_code = []\n        for char in self.string:\n            if char in self.alphabet:\n                morse_code.append(self.alphabet[char])\n        return morse_code", "category": "Python"}, {"instruction": "Create a function to reversed an array in place.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def reverse_array(arr):\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        temp = arr[start]\n        arr[start] = arr[end]\n        arr[end] = temp\n        start += 1\n        end -= 1\n    return arr\n\nprint(reverse_array(arr))", "category": "Python"}, {"instruction": "Create a class for a grocery item with attributes for item name, quantity and price.", "input": "", "output": "class GroceryItem:\n  def __init__(self, name, quantity, price):\n    self.name = name\n    self.quantity = quantity\n    self.price = price\n  \n  def total_price(self):\n    return self.quantity * self.price", "category": "Python"}, {"instruction": "Write a code to generate a random 8 character string containing only lowercase letters.", "input": "", "output": "import random\nimport string\n\ndef generate_random_string(length):\n  return ''.join(random.choices(string.ascii_lowercase, k=length))\n\nrandom_string = generate_random_string(8)\nprint(\"Random 8-character string:\", random_string)", "category": "Python"}, {"instruction": "Create a function to count how many vowels are in a given string.", "input": "", "output": "def count_vowels(string):\n  vowels = \"aeiou\"\n  count = 0\n  \n  for char in string:\n    if char in vowels:\n      count += 1\n      \n  return count", "category": "Python"}, {"instruction": "Is a string immutable in Python?", "input": "", "output": "Yes, a string is immutable in Python. Once a string is created, it cannot be changed.", "category": "Python"}, {"instruction": "What is the syntax of a for loop in Python?", "input": "", "output": "The syntax of a for loop in Python is: \nfor item in iterable:\n    statement(s)", "category": "Python"}, {"instruction": "What is the maximum number of parameters that a function can take in Python?", "input": "", "output": "A function in Python can take up to 255 parameters.", "category": "Python"}, {"instruction": "Calculate the sum of all odd numbers between two given numbers.", "input": "Lower limit: 3\nUpper limit: 7", "output": "def sumOfOddNumbers(lower, upper):\n    total = 0\n    for i in range(lower, upper+1): \n        if (i % 2 != 0): \n            total += i\n    return total", "category": "Python"}, {"instruction": "Write a code that takes a string and an integer as arguments and returns the number of words in the string that are of the provided length.", "input": "String: \"Hello World\"\nLength: 5", "output": "def wordCountByLength(string, length):\n    words = string.split()\n    return sum(1 for word in words if len(word) == length)", "category": "Python"}, {"instruction": "Write a function to convert decimal number to binary number.", "input": "", "output": "def decimalToBinary(num):\n    if num > 1:\n        decimalToBinary(num // 2)\n    return num % 2", "category": "Python"}, {"instruction": "Given a list of strings, create a function to convert all of the strings into uppercase.", "input": "", "output": "def to_uppercase(str_list):\n    return [s.upper() for s in str_list]", "category": "Python"}, {"instruction": "Create an algorithm for finding the largest number in a list.", "input": "", "output": "def find_largest(nums):\n    largest = nums[0]\n    for num in nums[1:]:\n        if num > largest:\n            largest = num\n    return largest", "category": "Python"}, {"instruction": "Create a function that takes in a string and returns a boolean indicating whether or not the string contains the letter \"u\".", "input": "", "output": "def contains_letter_u(str):\n    for char in str:\n        if char == 'u':\n            return True\n    return False", "category": "Python"}, {"instruction": "Create an algorithm to detect if a linked list contains a cycle.", "input": "", "output": "def has_cycle(head):\n    slow = head\n    fast = head\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n        if slow == fast:\n            return True\n    return False", "category": "Python"}, {"instruction": "Create a function which takes in an array and returns a list of all the elements which appear only once in the array.", "input": "", "output": "def find_unique_elements(arr):\n    unique_elements = []\n    for elem in arr:\n        if arr.count(elem) == 1:\n            unique_elements.append(elem)\n    return unique_elements", "category": "Python"}, {"instruction": "Create a function which takes two strings and compares them to see if they are anagrams of each other.", "input": "", "output": "def isAnagram(str1, str2):\n    list1 = sorted(str1.lower())\n    list2 = sorted(str2.lower())\n    if list1 == list2:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Suggest some changes to the following code that will reduce the runtime complexity.", "input": "def search_array(arr, target):\n    '''This function searches a given array for the target and returns its index if found.'''\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1", "output": "def search_array(arr, target):\n    '''This function searches a given array for the target and returns its index if found.'''\n    for i, num in enumerate(arr):\n        if num == target:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Suggest a solution to make the following code work correctly.", "input": "def count_sum(arr):\n    '''This function adds all elements in ``arr`` and returns the total sum.'''\n    sum = 0\n    for n in arr:\n        sum += n\n    return sum", "output": "def count_sum(arr):\n    '''This function adds all elements in ``arr`` and returns the total sum.'''\n    sum = 0\n    for n in arr:\n        if isinstance(n, (int, float)):\n            sum += n\n    return sum", "category": "Python"}, {"instruction": "Use a for loop to sum all the elements in an array.", "input": "myArr = [2, 5, 8, 11]", "output": "def Sum_list(list): \n    sum = 0\n    for i in range(len(list)):\n        sum += list[i] \n    return sum \n\nmyArr = [2, 5, 8, 11]\nprint(Sum_list(myArr))", "category": "Python"}, {"instruction": "Read the following array and remove all the numbers divisible by 4.", "input": "list_int = [2,4,6,10]", "output": "list_int = [num for num in list_int if num % 4 != 0]", "category": "Python"}, {"instruction": "Create a program to remove all duplicate elements from a list and return a new list with the unique elements.", "input": "", "output": "def remove_duplicates(nums):\n    temp_list = []\n    for num in nums:\n        if num not in temp_list:\n            temp_list.append(num)\n    return temp_list", "category": "Python"}, {"instruction": "Name three built-in Python data types.", "input": "", "output": "The three built-in Python data types are integers, floats, and strings.", "category": "Python"}, {"instruction": "How to check if a given year is a leap year in Python?", "input": "", "output": "def leap_year(year):\n    if (year % 4 == 0) and (year % 100 != 0 or year % 400 == 0):\n        return True\n    return False", "category": "Python"}, {"instruction": "Write a code to form a triangle pattern with the character '$'", "input": "", "output": "for i in range(5): \n    for j in range(i+1): \n        print('$', end=\"\") \n    print()", "category": "Python"}, {"instruction": "Using the re library, trim the following string of all whitespace.", "input": "my_string = \"  Hello, World!  \"", "output": "import re\n\nmy_string = \"  Hello, World!  \"\n\nmodified_string = re.sub('\\s+', '', my_string)\n\nprint(modified_string)", "category": "Python"}, {"instruction": "Replace all empty strings with a default value using the following list.", "input": "my_list = [\"apple\", \"\", \"grapes\", \"\", \"bananas\"]", "output": "my_list = [\"apple\", \"\", \"grapes\", \"\", \"bananas\"]\n\nmy_list = [x if x != \"\" else \"default\" for x in my_list]\n\nprint(my_list)", "category": "Python"}, {"instruction": "Using the numpy library, reshape the given matrix array to 5 rows and 2 columns.", "input": "import numpy as np \narr = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]])", "output": "arr = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]])\n\nreshaped_arr = arr.reshape(5, 2)\n\nprint(reshaped_arr)", "category": "Python"}, {"instruction": "Construct a Python function to count the number of words in a given sentence", "input": "This is a sentence", "output": "def word_count(sentence):\n    return len(sentence.split())\n\nprint(word_count('This is a sentence')) # Output: 5", "category": "Python"}, {"instruction": "Create a python function that takes a string of characters as an argument and returns a list of all unique combinations of characters possible.", "input": "abc", "output": "def generate_unique_permutations(string):\n    output = []\n    for x in range(len(string)):\n        for y in range(x + 1,len(string)+1):\n            output.append(''.join(sorted(string[x:y])))  \n    return output\n\nprint(generate_unique_permutations(\"abc\")) #Output: ['a', 'ab', 'abc', 'ac', 'b', 'bc', 'c']", "category": "Python"}, {"instruction": "Build a neural network for binary classification using TensorFlow.", "input": "", "output": "\"\"\"\nBuild a neural network for binary classification using TensorFlow\n\"\"\"\nimport tensorflow as tf\n\n# Define the model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(units=8, activation='relu', input_shape=(2,))) \nmodel.add(tf.keras.layers.Dense(units=4, activation='relu'))\nmodel.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])", "category": "Python"}, {"instruction": "Create a Macros in Excel to transpose a given set of data", "input": "", "output": "Sub Transpose() \n \n    Dim ReadyRange As Range \n \n     \n \n    Set ReadyRange = Selection \n \n    ReadyRange.Copy \n \n    ReadyRange.PasteSpecial xlPasteAll, Transpose:=True \n \nEnd Sub", "category": "Python"}, {"instruction": "Create a function to find the standard deviation of a list of numbers", "input": "[2,4,4,4,5,5,7,9]", "output": "def std_deviation(data): \n    n = len(data) \n\t \n    mean = sum(data) /n \n    sum_sqr = sum(pow(x-mean,2) for x in data) \n    stdev = sqrt(sum_sqr/n) \n\t\n    return stdev \n    \nstd_deviation([2,4,4,4,5,5,7,9])", "category": "Python"}, {"instruction": "Generate a key-value pair such that the key is a string of length 3 and the value is a random number from 0 to 9", "input": "", "output": "import random\n\nkey = ''.join(random.choices(string.ascii_letters, k = 3))\nvalue = random.randint(0, 9)\ndata = {key : value}", "category": "Python"}, {"instruction": "Create a list comprehension for the following code.", "input": "number_list = []\nfor x in range(10):\n    if x % 2 == 0:\n        number_list.append(x)", "output": "number_list = [x for x in range(10) if x % 2 == 0]", "category": "Python"}, {"instruction": "Identify the key differences between a set and a dictionary in Python.", "input": "", "output": "The key difference between a set and a dictionary in Python is that a set stores unordered elements while a dictionary stores key-value pairs. Additionally, dictionaries have a set of keys that are unique and immutable, while sets are unordered collections of unique and immutable elements. Sets are more efficient for searching and testing for membership, while dictionaries are more efficient for retrieving specific values.", "category": "Python"}, {"instruction": "List two advantages and two disadvantages of using a linked list data structure", "input": "", "output": "Advantages of using a linked list data structure: \n1. A linked list can grow and shrink in size as needed since nodes can be dynamically allocated. \n2. Nodes can be added at any point in the list without traversing the whole list. \n\nDisadvantages of using a linked list data structure: \n1. Time efficiency is reduced  since nodes must be searched sequentially. \n2. Memory efficiency is reduced since each node requires additional space to store references to the next node.", "category": "Python"}, {"instruction": "Implement an algorithm to sort the following array.", "input": "[3, 5, 4, 6, 1, 2]", "output": "def sortArray(array):\n    n = len(array)\n    for i in range(n):\n        min_index = i\n        for j in range(i+1, n):\n            if array[min_index] > array[j]:\n                min_index = j\n        array[i], array[min_index] = array[min_index], array[i]\n    return array", "category": "Python"}, {"instruction": "Generate a random password of length 8 using Python.", "input": "", "output": "import random\n\ndef generate_password(length):\n    chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\n    password = \"\"\n    for i in range(length):\n        index = random.randint(0, len(chars)-1)\n        password += chars[index]\n    return password\n\nlength = 8\npassword = generate_password(length)\nprint(\"Here's your random password:\", password)", "category": "Python"}, {"instruction": "Normalize a column \"Weight\" in a Pandas dataframe.", "input": "", "output": "import pandas as pd\n\n# Read data from csv file\ndf = pd.read_csv(\"data.csv\")\n\n# Normalize the column \"Weight\"\ndf['Weight']=(df['Weight']-df['Weight'].min())/(df['Weight'].max()-df['Weight'].min())\n\n# Print the dataframe\nprint(df)", "category": "Python"}, {"instruction": "Convert a string representation of a JSON object to an actual JSON object in Python.", "input": "'{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'", "output": "import json\n\njson_string = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\n\njson_object = json.loads(json_string)", "category": "Python"}, {"instruction": "Generate a list of 1000 random numbers between 1 and 1000 using Python.", "input": "", "output": "import random\n\nrandom_list = [random.randint(1, 1000) for _ in range(1000)]", "category": "Python"}, {"instruction": "Implement a machine learning model in Python to predict customer churn.", "input": "", "output": "import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\n# Load dataset\ncustomers = pd.read_csv(\"customers.csv\")\n\n# Split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(\n    customers.drop('Churn', axis=1), \n    customers.Churn,\n    test_size=0.2, \n    random_state=42)\n\n# Create model\nmodel = LogisticRegression()\n\n# Fit and make predictions\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n\n# Calculate accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))", "category": "Python"}, {"instruction": "Write a Tensorflow program to perform binary classification on a given dataset.", "input": "", "output": "import tensorflow as tf\n\nmnist = tf.keras.datasets.mnist\n\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\nx_train, x_test = x_train / 255.0, x_test / 255.0\n\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Flatten(input_shape=(28, 28)),\n  tf.keras.layers.Dense(128, activation='relu'),\n  tf.keras.layers.Dense(2, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=5)\n\nmodel.evaluate(x_test,  y_test, verbose=2)", "category": "Python"}, {"instruction": "Provide a Python function to calculate the number of times a word appears in a given string", "input": "\"This is a sample string. There are some words in this string.\"", "output": "def count_words(s): \n    tokens = s.split() \n    word_freq = {} \n    for token in tokens: \n        if token in word_freq: \n            word_freq[token] += 1\n        else: \n            word_freq[token] = 1\n        \n    return word_freq", "category": "Python"}, {"instruction": "Convert a given string to its lowercase version", "input": "Python", "output": "lower_case = \"python\"", "category": "Python"}, {"instruction": "Write a Python function that takes an integer as an argument and returns the square of that number", "input": "", "output": "def square(n):\n    return n ** 2", "category": "Python"}, {"instruction": "Generate a dictionary that has 5 string-string key-value pairs", "input": "", "output": "import random\n\nkeys = [''.join(random.choices(string.ascii_letters, k = 3)) for i in range(5)]\nvalues = [''.join(random.choices(string.ascii_letters, k = 3)) for i in range(5)]\n\ndata = {key:value for key, value in zip(keys, values)}", "category": "Python"}, {"instruction": "Using the bubble sort algorithm, sort the following array.", "input": "[3, 5, 2, 1, 4]", "output": "def bubbleSort(arr): \n    n = len(arr)\n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n    return arr\n  \n  \n# Driver code \narr = [3, 5, 2, 1, 4]\n  \nbubbleSort(arr)\n\nOutput: [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Create a function in python that takes a string as an argument and prints out two copies of the string.", "input": "string = \"Hello World!\"", "output": "def print_twice(string):\n    print(string)\n    print(string)\n    \nprint_twice(string)", "category": "Python"}, {"instruction": "Design a Python function to return the list of values in two separate lists for even and odd numbers in a given list.", "input": "[1, 2, 3, 4, 5]", "output": "def separateEvenOdd(nums):\n    evenList = []\n    oddList = []\n\n    for n in nums:\n        if n % 2 == 0:\n            evenList.append(n)\n        else:\n            oddList.append(n)\n\n    return evenList, oddList\n\nprint(separateEvenOdd([1,2,3,4,5]))", "category": "Python"}, {"instruction": "Create a function that takes two integers and returns the remainder when the greater integer is divided by the smaller integer.", "input": "", "output": "def remainder(a,b):\n    if a > b:\n        return a % b\n    else:\n        return b % a", "category": "Python"}, {"instruction": "Generate a pseudocode of a breadth first search algorithm.", "input": "", "output": "1. Create a queue Q\n\n2. Enqueue item S(source) onto Q\n\n3. For each element v in the adjacency list of S \n    3.1. Enqueue v onto Q\n    3.2. Set v's predecessor to S\n\n4. While Q is not empty\n    4.1. Dequeue an item u from Q \n    4.2. For each element v in the adjacency list of u\n       4.2.1. If v is unvisited, then\n           4.2.1.1. set v's predecessor to u\n           4.2.2.2. enqueue v onto Q\n\n5. Return each node's predecessor", "category": "Python"}, {"instruction": "Design an approach in Python to retrieve a record from a database.", "input": "", "output": "import sqlite3\n\ndef retrieve_record(db_name, table_name, id):\n    try:  \n        con = sqlite3.connect(db_name)\n        cur = con.cursor()\n        cur.execute(\"SELECT * FROM {} where id={};\".format(table_name, id))\n        record = cur.fetchone()\n    except:\n        record = None\n    finally:    \n        cur.close()\n        con.close()\n    return record", "category": "Python"}, {"instruction": "Describe a pipelined architecture for a processor", "input": "", "output": "A pipelined Processor architecture is one in which the instruction set is divided into separate stages, each associated with a specific segment in the computation process. As an instruction is entered, it is routed to the appropriate stage in the pipeline and progresses sequentially, thereby allowing the processor to complete multiple instructions simultaneously. The stages, known as the pipeline stages, can include IF (Instruction Fetch), ID (Instruction Decode), EX (Execution), MEM (Memory Access) and WB (Write-Back). The IF and ID stages typically handle instruction fetch and decode, while EX and MEM perform instruction execution and memory access, respectively. The final stage, WB, is responsible for writing the result to memory or a register.", "category": "Python"}, {"instruction": "Create a function to print a multiline message in Python", "input": "message = \"This is a multiline \nmessage.\"", "output": "def print_multiline_message(message):\n    print(message)", "category": "Python"}, {"instruction": "Create a Python program to replace all instances of a specific character in a string.", "input": "string = \"Hello World!\"\ncharacter = \"o\"\nreplacement_character = \"_\"", "output": "def replace_character(string, character, replacement_character):\n    new_string = \"\"\n    for c in string:\n        if c == character:\n            new_string += replacement_character\n        else:\n            new_string += c\n    return new_string", "category": "Python"}, {"instruction": "Write a function to find the n-th Fibonacci number for a given n", "input": "", "output": "def get_fibonacci(n):\n    a, b = 0, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b", "category": "Python"}, {"instruction": "Using the given information, write a function to calculate a 5-digit ISBN number.", "input": "Author name: Bob Smith\nTitle of Book: Learn Programming\nPublisher: Aztec Publishing\nYear Published: 2020", "output": "def calculate_isbn(authorname, title, publisher, yearpublished):\n    authorname_string = authorname.replace(' ', '')\n    title_string = title.replace(' ', '')\n    publisher_string = publisher.replace(' ', '')\n\n    isbn_total = 0\n\n    for letter in authorname_string:\n        isbn_total += ord(letter)\n\n    for letter in title_string:\n        isbn_total += ord(letter)\n\n    for letter in publisher_string:\n        isbn_total += ord(letter) \n\n    isbn_total += yearpublished\n\n    while isbn_total > 9999:\n        isbn_total = isbn_total % 10000\n\n    isbn_string = str(isbn_total).zfill(5)\n\n    return isbn_string", "category": "Python"}, {"instruction": "Create a boolean function to check whether a given string contains all alphabets", "input": "phrase = \"The quick brown fox jumps over the lazy dog\"", "output": "def is_alphabetical(phrase):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in alphabet:\n        if letter not in phrase:\n            return False\n    return True", "category": "Python"}, {"instruction": "Create a function to compute the Fibonacci sequence for a given input", "input": "", "output": "def compute_fibonacci(n):\n    fib_list = []\n    a, b = 0, 1\n\n    while a < n:\n        fib_list.append(a)\n        a, b = b, a+b\n    return fib_list", "category": "Python"}, {"instruction": "Write a Python program to find the minimum cost of a path from top left cell to bottom right cell of a matrix.", "input": "matrix = [[2, 0, 3, 5],\n          [4, 5, 1, 2],\n          [3, 1, 2, 7]]", "output": "def min_path_sum(matrix):\n\n    # initialize the solution matrix\n    res = [[0 for _ in range(len(matrix[0]))] for _ in range(len(matrix))]\n\n    # copying the first row elements\n    res[0] = matrix[0]\n\n    # iterate over the remaining rows\n    for i in range(1, len(matrix)):\n        # copy the first element\n        res[i][0] = res[i-1][0] + matrix[i][0]\n\n        for j in range(1, len(matrix[0])):\n            # choose the smaller of the two\n            res[i][j] = min(res[i-1][j], res[i][j-1]) + matrix[i][j]\n\n    # return the bottom-right element\n    return res[len(matrix)-1][len(matrix[0])-1]", "category": "Python"}, {"instruction": "Write a Python program to return a boolean indicating whether a substring is present within a given string.", "input": "string = 'Hello world'\nsubstring = 'world'", "output": "def contains_substring(string, substring):\n  return substring in string", "category": "Python"}, {"instruction": "Write a Python function to filter a given list of strings by the specified character?", "input": "my_list = ['Hello', 'World', 'Hi', 'Python']\ncharacter = 'o'", "output": "def filter_list_by_character(my_list, character):\n  return [item for item in my_list if character in item]", "category": "Python"}, {"instruction": "Create a class in Python with a constructor and two methods.", "input": "", "output": "class MyClass:\n  def __init__(self):\n    self.x = 0\n\n  def method_1(self):\n    self.x +=1\n\n  def method_2(self, arg1):\n    self.x += arg1", "category": "Python"}, {"instruction": "Implement a function to calculate the absolute value of a number.", "input": "-7", "output": "```\ndef absValue(num): \n    if num >= 0: \n        return num \n    else: \n        return -num \n  \nprint( absValue(-7) )\n\n```", "category": "Python"}, {"instruction": "Create a method to generate a random integer between 1 and 10 in Python.", "input": "", "output": "import random\n\ndef random_int():\n    return random.randint(1, 10)", "category": "Python"}, {"instruction": "Describe what an abstract class is used for.", "input": "", "output": "An abstract class is a class that contains abstract methods and variables. Abstract classes are meant to be inherited and customized by their subclasses. They are used to provide basic implementations of commonly used methods, as well as impose a common interface between different subclasses.", "category": "Python"}, {"instruction": "Develop Python code to print out all the divisors of a given number", "input": "30", "output": "def get_divisors(n):\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors \n\nprint(get_divisors(30)) # output [1, 2, 3, 5, 6, 10, 15, 30]", "category": "Python"}, {"instruction": "Create an algorithm to generate a random password", "input": "", "output": "def generate_password(length):\n  password = \"\"\n  characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()\"\n  for i in range(length):\n    password += choice(characters)\n  return password\n\nprint(generate_password(10)) // output 5s@N#s9J@2", "category": "Python"}, {"instruction": "Compress a given string by counting the occurrences of each character.", "input": "", "output": "def compress_string(s):\n    l = len(s) \n    \n    # If operations length is 0 \n    if l == 0: \n        return \"\" \n  \n    # Erroneous characters in the  \n    #original string are ignored. \n    if l == 1 or s[0] == s[1]: \n        return s[0] + str(1) \n    \n    # Initialize the variable \n    count = 1\n    s1 = \"\" \n     \n    # Here i is the indexing variable \n    i = 1\n    while i < l: \n            # If the current character matches with the next one \n            if (s[i] == s[i - 1]): \n                count += 1\n            else: \n                s1 = s1 + s[i - 1] + str(count) \n                count = 1\n            i += 1\n    s1 = s1 + s[i - 1] + str(count)\n    \n    return s1 \n  \ns = \"geeksforgeeks\"\n\nprint(compress_string(s))\n\nOutput: g1e2k2s2f1o1r1g1e1e1k1s1", "category": "Python"}, {"instruction": "Programmatically generate 10 random numbers between 0 and 1.", "input": "", "output": "import random \n\nfor x in range(10): \n  print(random.random()) \n\nOutput: 0.06344054085111036 0.2881477132700741 0.17747003808770072 0.4838670382036148 0.8504676489597706 0.6951969864720918 0.3444948373996736 0.251203536083174 0.603054609456176 0.8579147959146845", "category": "Python"}, {"instruction": "Explain how to convert an expression from postfix notation to infix notation", "input": "", "output": "Infix notation is a way of writing an expression in which the operators are placed between the operands, such as 2 + 5, whereas postfix notation is a way of writing an expression in which the operators are placed after the operands, such as 2 5 +. To convert an expression from postfix notation to infix notation, scan the expression from left to right. If an operand is encountered, simply push it onto a stack. If an operator is encountered, pop two operands from the stack and place the operator in between them. Finally, push the resulting expression back onto the stack and repeat this until the end of the expression is reached.", "category": "Python"}, {"instruction": "Create a program that logs the time a user entered a program.", "input": "", "output": "import time\n\ndef log_time():\n    current_time = time.time()\n    print(\"You entered the program at\", current_time)", "category": "Python"}, {"instruction": "Write a function to produce a copy of an array", "input": "[1, 2, 3, 4]", "output": "def copy_array(arr): \n    new_arr = list(arr) \n    return new_arr", "category": "Python"}, {"instruction": "Generate a Python script that implements a Linked List data structure.", "input": "", "output": "# define Node\nclass Node(object):\n\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n# define LinkedList\nclass LinkedList:\n\n    def __init__(self, head=None):\n        self.head = head\n    \n    def insert(self, node):\n        current = self.head\n        if not self.head:\n            self.head = node\n        else:\n            while current.next:\n                current = current.next\n            current.next = node\n\n     def delete_node(self, data):\n        current = self.head\n        while current.data != data and current.next is not None:\n            previous = current\n            current = current.next\n        if current.data == data:\n            if current == self.head:\n                self.head = current.next\n            else:\n                previous.next = current.next", "category": "Python"}, {"instruction": "Implement a method to sort a list of numbers using the quick sort algorithm.", "input": "[10, 3, 9, -2, 8, 7]", "output": "def quickSort(arr): \n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quickSort(left) + middle + quickSort(right)", "category": "Python"}, {"instruction": "Write a code to implement an LRU (Least Recently Used) cache.", "input": "", "output": "class LRUCache:\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.cache = {}\n        self.lru = list()\n           \n    # get an item from the cache and update its timestamp\n    def get(self, key):\n        if key in self.cache:\n            self.lru.remove(key)\n            self.lru.append(key)\n            return self.cache[key]\n        else:\n            return -1\n             \n    # add a new item to the cache, discard the least recently used item if cache is full \n    def put(self, key, value):\n        if len(self.cache) >= self.capacity:\n            self.cache.pop(self.lru[0])\n            self.lru.pop(0)\n        if key in self.cache: \n            self.lru.remove(key)\n        self.cache[key] = value\n        self.lru.append(key)", "category": "Python"}, {"instruction": "Analyze this code for potential runtime errors.", "input": "def factorial(n):\n    result = 1\n    if n >= 0:\n        for i in n:\n            result *= i\n        return result", "output": "This code may result in a runtime error because an iterable is expected as an argument for the for loop, but the argument passed is a number rather than an iterable. Additionally, the if-statement does not have an else block making it possible for the function to return None instead of a number. To fix the code, the argument passing to the for loop should be changed to range(n) and the if-statement should have an else block that returns 1 if n is smaller than 0.", "category": "Python"}, {"instruction": "Compile a piece of code written in Python language.", "input": "", "output": "python -c \"import py_compile; py_compile.compile('foo.py')\"", "category": "Python"}, {"instruction": "Rewrite this function using a recursive algorithm.", "input": "def factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result", "output": "def factorial(n): \n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "category": "Python"}, {"instruction": "Compute the Fibonacci sequence upto n.", "input": "", "output": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)", "category": "Python"}, {"instruction": "Create a function to print a Diamond shape.", "input": "Size: 5", "output": "def print_diamond(size):\n    for i in range(1, size + 1):\n        print(\" \" * (size - i) + \"*\" * (2 * i - 1))\n    for i in range(size - 1, 0, -1):\n        print(\" \" * (size - i) + \"*\" * (2 * i - 1))", "category": "Python"}, {"instruction": "Using Python, write a function to format a given date.", "input": "Date: \"2021-02-14\"\nFormat: \"dd/mm/yyyy\"", "output": "def format_date(date, date_format):\n date = date.split('-') \n day = date[2]\n month = date[1]\n year = date[0]\n if date_format == \"dd/mm/yyyy\": \n  formatted_date = day + \"/\" + month + \"/\" + year\n return formatted_date", "category": "Python"}, {"instruction": "What data type is best suited to store a list of students' names?", "input": "", "output": "A list of students' names can best be stored using a string data type. Strings are character sequences, making them well-suited for storing text-based information such as names. Storing a list of student names as a string is also more efficient memory-wise than other data types, since strings are immutable and can be reused for different values.", "category": "Python"}, {"instruction": "Design a function to remove all duplicate words from a sentence.", "input": "\"This is this is a sentence with with repeats repeats\"", "output": "def removeDuplicates(txt):\n    newTxt = []\n    txt = txt.split()\n\n    for x in txt:\n        if x not in newTxt:\n            newTxt.append(x)\n\n    return \" \".join(newTxt)", "category": "Python"}, {"instruction": "Generate an array in Python of size 10 filled with Random numbers between 1 to 100.", "input": "", "output": "import random\narr = [random.randint(1,100) for i in range(10)]", "category": "Python"}, {"instruction": "Create a web application using Flask in Python that displays the current date and time.", "input": "", "output": "from flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef current_datetime():\n    from datetime import datetime\n    now = datetime.now()\n    return render_template('template.html', current_datetime = now)\n\nif __name__ == \"__main__\":\n\tapp.run(debug = True)\n\ntemplate.html:\n<html>\n    <head>\n        <title> Current Date and Time</title>\n    </head>\n    <body>\n        <h1> Current Date and Time </h1>\n        <p> The current date and time is {{ current_datetime }}</p>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Create an array in Python of size 10 filled with zeroes.", "input": "", "output": "arr = [0] * 10", "category": "Python"}, {"instruction": "Provide an appropriate name for a Python module that contains a class for a user.", "input": "", "output": "The appropriate name for the module could be \"user_class.py\".", "category": "Python"}, {"instruction": "Print the fibonacci sequence of length 10", "input": "", "output": "def fibonacci(length): \n    result = [] \n    a, b = 0, 1\n    for _ in range(length): \n        result.append(a) \n        a, b = b, a + b \n    return result", "category": "Python"}, {"instruction": "Debug this Python code and explain why it was not running.", "input": "def string_split(string, n):\nwords = string.split(\" \")\nfor x in words[:n]:\nprint(\" \".join(words[:x]))", "output": "def string_split(string, n):\n    words = string.split(\" \")\n    for x in range(n):\n        print(\" \".join(words[:x]))\n\nThe code was not running as initially written because the range used in the for loop was not provided. Inside the for loop, the variable x needed to be given a range (e.g. range(n)) so that it can iterate over each of the elements of the words list properly. The loop should have looked like this: for x in range(n):.", "category": "Python"}, {"instruction": "Count the number of occurrences of each character in a given string and print the output.", "input": "str = \"abbabbabbb\"", "output": "from collections import Counter\nstr = \"abbabbabbb\"\nletters = Counter(str)\nfor key, value in letters.items():\n    print(f\"Character {key} occurs {value} time(s)\")", "category": "Python"}, {"instruction": "Write a Python code snippet to sort a dictionary by its values in ascending order.", "input": "dictionary = {'a': 5, 'b': 2, 'c': 4}", "output": "sorted_dictionary = dict(sorted(dictionary.items(), key=lambda item: item[1]))\nprint(sorted_dictionary) # result: {'b': 2, 'c': 4, 'a': 5}", "category": "Python"}, {"instruction": "Write a code snippet to convert a list in Python to a set.", "input": "list1 = [1,2,3,4,5]", "output": "set1 = set(list1) # set1 will now contain [1,2,3,4,5]", "category": "Python"}, {"instruction": "Parse a given JSON string and extract all the values of the key \"name\".", "input": "json_str = '{\"name\": \"Jack\", \"age\": 22, \"status\": \"Active\"}'", "output": "import json\n\nparsed = json.loads(json_str)\nname_list = []\n\nfor key, value in parsed.items():\n    if key == 'name':\n        name_list.append(value)\n\nprint(name_list)", "category": "Python"}, {"instruction": "Implement a Bubble Sort algorithm.", "input": "list = [10, 5, 9, 25, 1]", "output": "def bubbleSort(list): \n    n = len(list) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if list[j] > list[j+1] : \n                list[j], list[j+1] = list[j+1], list[j] \n  \n# Driver code to test above \nlist = [10, 5, 9, 25, 1]\nbubbleSort(list) \nprint (\"Sorted array :\") \nprint(list)", "category": "Python"}, {"instruction": "Write a function in Python to compress a given string.", "input": "aabcccccaaa", "output": "def compression(string):\n    output = \"\"\n    count = 1\n    curr_char = string[0]\n    for char in string[1:]:\n        if char == curr_char:\n            count += 1\n        else:\n            output += curr_char + str(count)\n            curr_char = char\n            count = 1\n    output += curr_char + str(count)\n    return output\n\nprint(compression('aabcccccaaa'))\n# Output: a2b1c5a3", "category": "Python"}, {"instruction": "Write a function to classify a news article by its tone.", "input": "", "output": "def classifyArticle(article):\n    tone_dict = {\n        'positive': 0,\n        'neutral': 0,\n        'negative': 0\n    }\n    for token in article:\n        if token in pos_words:\n            tone_dict['positive'] += 1\n        elif token in neg_words:\n            tone_dict['negative'] += 1\n        else:\n            tone_dict['neutral'] += 1\n\n    sorted_tones = sorted(tone_dict.items(), key=lambda x:x[1], reverse=True)\n    return sorted_tones[0][0]", "category": "Python"}, {"instruction": "Implement a stack data structure using linked lists.", "input": "", "output": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.next = None\n\nclass Stack:\n\tdef __init__(self):\n\t\tself.head = None\n\t\tself.num_elements = 0\n\n\tdef push(self, element):\n\t\tnew_node = Node(element)\n\t\tif self.head == None:\n\t\t\tself.head = new_node\n\t\telse:\n\t\t\tnew_node.next = self.head\n\t\t\tself.head = new_node\n\t\tself.num_elements += 1\n\t\t\n\tdef pop(self):\n\t\tif self.is_empty():\n\t\t\treturn None\n\t\ttemp = self.head\n\t\tself.head = self.head.next\n\t\tself.num_elements -= 1\n\t\treturn temp.data\n\n\tdef is_empty(self):\n\t\tif self.num_elements == 0:\n\t\t\treturn True\n\t\treturn False\n\n\tdef top(self):\n\t\tif self.head:\n\t\t\treturn self.head.data\n\t\treturn None", "category": "Python"}, {"instruction": "Given a list of numbers, create a function that finds the two elements that sum to a given target number.", "input": "nums = [2, 45, 7, 9, 15]\ntarget = 16", "output": "def two_sum(nums, target):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [i, j]\n\nresult = two_sum(nums, target)\nprint(result) \n\n# Output: [2, 3]", "category": "Python"}, {"instruction": "Explain how you would loop over a list of dictionaries to extract all the values", "input": "", "output": "To loop through a list of dictionaries, you can use a for loop. For example:\n\nmy_list = [{\"name\": \"John Doe\"}, {\"age\": 25}]\nfor item in my_list:\n    for key, value in item.items():\n        print(key, \":\", value)\n\nThis will loop through each item in the list as a dictionary, and for each dictionary, it will loop through all the key-value pairs and print them out.", "category": "Python"}, {"instruction": "Generate an algorithm that sorts the elements of an array.", "input": "[6, 3, 8, 9, 4]", "output": "def sort_array(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in correct position\n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\n# Driver code to test above \narr = [6, 3, 8, 9, 4] \nsort_array(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "category": "Python"}, {"instruction": "Name four significant members of the Python community.", "input": "", "output": "Guido van Rossum, Kenneth Reitz, Monty Python, and Brett Cannon.", "category": "Python"}, {"instruction": "Create a class to store and print information about a book.", "input": "", "output": "class Book:\n    def __init__(self, title, author, publisher, pages):\n        self.title = title\n        self.author = author\n        self.publisher = publisher\n        self.pages = pages\n   \n    def print_info(self):\n        print(f\"Title: {self.title}\")\n        print(f\"Author: {self.author}\")\n        print(f\"Publisher: {self.publisher}\")\n        print(f\"Pages: {self.pages}\")", "category": "Python"}, {"instruction": "Write a function in Python that takes a number and returns the square of the number.", "input": "x = 15", "output": "def square(x):\n    \"\"\"This function takes an integer x and returns its square\"\"\"\n    return x * x\n    \nx = 15\nprint(square(x)) # prints 225", "category": "Python"}, {"instruction": "How to remove duplicates from a list in Python?", "input": "", "output": "In Python, duplicates can be removed from a list by converting the list to a set. Sets are unordered collections of unique elements. They do not allow duplicate elements, thus when a list is converted to a set, all duplicates are removed.\n\nFor example, if the list is named my_list, then the set can be constructed as follows:\n\nmy_set = set(my_list)", "category": "Python"}, {"instruction": "How to find the number of elements within a list in Python?", "input": "", "output": "The number of elements in a list can be obtained using the len() method in Python.\nFor example, if the list is named my_list, the number of elements can be obtained as len(my_list).", "category": "Python"}, {"instruction": "Create a function that encodes a message into a Vigenere cipher", "input": "", "output": "def vigenere_encode(message, key):\n    encoded_message = \"\"\n    key_index = 0\n    for character in message:\n        if character.isalpha():\n            shift_amount = ord(key[key_index]) % 26\n            key_index += 1\n            if key_index == len(key):\n                key_index = 0  \n            shifted_char_code = ord(character) + shift_amount\n            if shifted_char_code > ord('z'):\n                shifted_char_code -= 26\n            encoded_message += chr(shifted_char_code)\n        else:\n            encoded_message += character\n    return encoded_message", "category": "Python"}, {"instruction": "Write a function that takes two strings and searches for all the occurrences of the first string in the second and returns the positions of the pattern within the string.", "input": "string1 = \"aa\"\nstring2 = \"aaaaaa\"", "output": "def pattern_occurences(string1, string2):\n    positions = []\n    for i in range(len(string2)):\n        if string1 == string2[i:i+len(string1)]:\n            positions.append(i)\n    return positions", "category": "Python"}, {"instruction": "Create a function that takes an array of numbers and a target number as input, and returns true if the target number is present in the given array, false otherwise.", "input": "list1 = [1,2,3,4]\ntarget = 2", "output": "def contains_target(list1, target):\n    return target in list1", "category": "Python"}, {"instruction": "Write a function to concatenate two strings without using the concatenation operator \"+\".", "input": "", "output": "def concat(string1, string2):\n    result = \"\"\n    for i in string1:\n        result += i\n    for j in string2:\n        result += j\n    return result", "category": "Python"}, {"instruction": "Design a class in Python to store a book's title, author, and number of pages.", "input": "", "output": "class Book:\n    def __init__(self, title, author, pages):\n        self.title = title\n        self.author = author\n        self.pages = pages\n\n    def get_title(self):\n        return self.title\n\n    def get_author(self):\n        return self.author\n\n    def get_pages(self):\n        return self.pages", "category": "Python"}, {"instruction": "Design a class in Python to store information about a car, such as its make, year, and mileage.", "input": "", "output": "class Car:\n    def __init__(self, make, year, mileage):\n        self.make = make\n        self.year = year\n        self.mileage = mileage\n\n    def get_make(self):\n        return self.make\n\n    def get_year(self):\n        return self.year\n\n    def get_mileage(self):\n        return self.mileage", "category": "Python"}, {"instruction": "Write a script in Python to find the longest word in a given string.", "input": "sample_string = \"This is a sample string containing a few words\"", "output": "def longest_word(sample_string):\n    words_list = sample_string.split()\n    longest_word = \"\"\n    for word in words_list:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word", "category": "Python"}, {"instruction": "Design a class in Python to store a user profile information such as name, age, city, etc.", "input": "", "output": "class UserProfile:\n    def __init__(self, name, age, city):\n        self.name = name\n        self.age = age\n        self.city = city\n\n    def get_name(self):\n        return self.name\n\n    def get_age(self):\n        return self.age\n\n    def get_city(self):\n        return self.city", "category": "Python"}, {"instruction": "Create a Python program to calculate the mean, median, and mode of a given set of data.", "input": "data = [1, 4, 6, 3, 8, 9]", "output": "def calculate_mean(data):\n    '''Function to calculate mean of data'''\n    mean = sum(data) / len(data)\n    return mean\n\ndef calculate_median(data):\n    '''Function to calculate median of data'''\n    data.sort()\n    mid_index = len(data) // 2\n    median = data[mid_index]\n    return median\n\ndef calculate_mode(data):\n    '''Function to calculate mode of data'''\n    count_dict = {}\n    mode_list = []\n    # count the frequency of each element\n    for i in data:\n        count_dict[i] = data.count(i)\n    # find the maximum frequency\n    max_freq = max(count_dict.values())\n    # find all elements with maximum frequency\n    for k,v in count_dict.items():\n        if max_freq == v:\n            mode_list.append(k)\n    return mode_list\n\ndata = [1, 4, 6, 3, 8, 9]\nmean = calculate_mean(data)\nmedian = calculate_median(data)\nmode = calculate_mode(data)\n\nprint(f\"Mean of data is: {mean}\")\nprint(f\"Median of data is: {median}\")\nprint(f\"Mode of data is: {mode}\")", "category": "Python"}, {"instruction": "Create an algorithm to encourage work balance and productivity in remote work.", "input": "", "output": "One algorithm to encourage work balance and productivity in remote work is a scheduling algorithm that assigns workloads over manageable working windows with rest periods in between to allow for breaks and recovery. This algorithm can be designed to set maximum and minimum limit for each allocated workload and for duration for the rest periods, based on the individual's productive and rest needs. It can be used to monitor and manage workloads to ensure that workers do not experience fatigue or workload overload. Additionally, the algorithm can be designed to keep track of work performance over time to provide appropriate feedback and recommendations in order to help workers optimize their performance.", "category": "Python"}, {"instruction": "Write a function that sorts its arguments in descending order.", "input": "nums = [4, 8, 10, 3, 5]", "output": "def sort_descending(*args):\n    args = list(args)\n    for i in range(len(args)-1):\n        for j in range(i+1, len(args)):\n            if args[i] < args[j]:\n                args[i], args[j] = args[j], args[i]\n    return args", "category": "Python"}, {"instruction": "Given two strings, write a Python code to delete all occurrences of the second string from the first string.", "input": "str1 = \"abcabcabcabcabcabcabcabcabcabc\"\nstr2 = \"abc\"", "output": "def delete_occurrences(str1, str2):\n    return str1.replace(str2, '')", "category": "Python"}, {"instruction": "Write a function to find the index of the point that lies closest to the origin.", "input": "points = [[1,1],[-1,2],[3,-4]]", "output": "def closest_point(points):\n    min_dist = float('inf')\n    for i in range(len(points)):\n        dist = points[i][0]**2 + points[i][1]**2 \n        if dist < min_dist:\n            min_dist = dist\n            closest_index = i\n\n    return closest_index", "category": "Python"}, {"instruction": "Write a code to multiply two matrices, assuming the two matrices can be multiplied.", "input": "A = [[1, 2], [3, 4]] \nB = [[5, 6], [7, 8]]", "output": "def multiply_matrices(A, B):\n    if len(A[0]) != len(B):\n        raise ValueError(\"Matrices cannot be multiplied\")\n\n    rows_A = len(A)\n    columns_A = len(A[0])\n    rows_B = len(B)\n    columns_B = len(B[0])\n\n    result = [[0 for column in range(columns_B)] for row in range(rows_A)]\n\n    for row in range(rows_A):\n        for column in range(columns_B):\n            for k in range(columns_A):\n                result[row][column] += A[row][k] * B[k][column]\n\n    return result", "category": "Python"}, {"instruction": "Implement an algorithm to find the number of occurrences of a substring in a string.", "input": "string = \"This is a test\"\nsubstring = \"is\"", "output": "def count_substring(string, substring):\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n\n    return count\n\nresult = count_substring(string, substring)\nprint(result)\n\n# Output: 2", "category": "Python"}, {"instruction": "Suggest an improvement for the following piece of code", "input": "def addTwoNumbers(a, b):\n    return a + b", "output": "def addTwoNumbers(a, b):\n    try:\n        if type(a) == str or type(b) == str:\n            raise TypeError('Inputs must be of type int or float')\n        return a + b\n    except TypeError as e:\n        print(e)", "category": "Python"}, {"instruction": "Create a Python loop that will iterate through the following list and will print each item's value multiplied with 5.", "input": "numbers = [5, 10, 15, 20, 25]", "output": "for number in numbers:\n    print(number*5)", "category": "Python"}, {"instruction": "Create a script in Python which can generate random numbers in a given range.", "input": "", "output": "import random\n\ndef generate_random_number_in_range(min_value, max_value):\n    return random.randint(min_value, max_value)", "category": "Python"}, {"instruction": "You need to generate an array of strings of length 5 to 10 characters.", "input": "", "output": "import string\nimport random\n\ndef generate_string_array(length):\n    # This function will generate an array of strings\n    array_of_strings = []\n    for _ in range(length):\n        new_string = ''.join(random.choice(string.ascii_lowercase) for _ in range(random.randint(5,10)))\n        array_of_strings.append(new_string)\n    return array_of_strings", "category": "Python"}, {"instruction": "Create a function that takes in a positive integer up to 1000 and prints out its prime factorization.", "input": "num = 17", "output": "def prime_factorization(num):\n    '''This function takes in a positive integer and prints out its prime factorization.'''\n    factors = []\n    dividend = num\n    divisor = 2\n    while divisor <= dividend:\n        if dividend % divisor == 0:\n            factors.append(divisor)\n            dividend //= divisor\n        else:\n            divisor += 1\n    return factors", "category": "Python"}, {"instruction": "Write a function which will take an array as an argument and return an object with the keys being the elements of the array and the values being their counts.", "input": "my_array = [1, 2, 2, 3]", "output": "def count_elements(my_array):\n    '''This function takes an array as an argument and returns an object with the \n    keys being the elements of the array and the values being their counts.'''\n    counts = {}\n    for element in my_array:\n        if element in counts:\n            counts[element] += 1\n        else:\n            counts[element] = 1\n    return counts", "category": "Python"}, {"instruction": "Analyze a provided string of characters and return the number of occurrences of each character.", "input": "input_string = \"HelloWorld\"", "output": "def analyze_string(input_string):\n    '''This function analyzes a provided string of characters and \n    returns the number of occurrences of each character.'''\n    dict_count = {}\n    for char in input_string:\n        if char in dict_count:\n            dict_count[char] += 1\n        else:\n            dict_count[char] = 1\n    return dict_count", "category": "Python"}, {"instruction": "Create a function which will take in a string and returns a string in reverse order.", "input": "", "output": "def reverse_string(s):\n    '''This function takes in a string and returns a string in reverse order.'''\n    return s[::-1]", "category": "Python"}, {"instruction": "Create a function that takes in a number and returns all the prime factors.", "input": "num = 30", "output": "def prime_factorize(num):\n    '''This function takes in a number and returns all the prime factors.'''\n    primes = []\n    i = 2\n    while i * i <= num:\n        while num % i == 0:\n            primes.append(i)\n            num //= i\n        i += 1\n    if num > 1:\n        primes.append(num)\n    return primes", "category": "Python"}, {"instruction": "Create a function that takes in two variables and checks if they have the same type.", "input": "", "output": "def type_checker(x, y):\n    '''This function takes in two variables and checks if they have the same type.'''\n    return type(x) == type(y)", "category": "Python"}, {"instruction": "Create a class named Person.", "input": "", "output": "class Person:\n    '''This class represents a person with a name and age.'''\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "category": "Python"}, {"instruction": "Sort an array of integers in ascending order without using the built-in sort() function.", "input": "my_array = [1, 6, 9, 5, 8, 10, 4, 2, 7, 3]", "output": "def sort_ascending(my_array):\n    '''This function sorts an array of integers in ascending order without using the built-in sort() function.'''\n    n = len(my_array)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if my_array[j] > my_array[j+1]:\n                my_array[j], my_array[j+1] = my_array[j+1], my_array[j]\n    return my_array", "category": "Python"}, {"instruction": "Given the following Python code, generate a function that will print the first 5 elements of a list.", "input": "my_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "def print_first_five(my_list):\n    \"\"\"This function prints the first five elements of a list.\"\"\"\n    print(my_list[:5])", "category": "Python"}, {"instruction": "Implement a sorting algorithm in Python for the given data.", "input": "Data: [4, 2, 3, 8, 1]", "output": "def sort_data(data):\n    for i in range(len(data)):\n        min_index = i\n        for j in range(i+1, len(data)):\n            if data[min_index] > data[j]:\n                min_index = j\n        data[i], data[min_index] = data[min_index], data[i]\n       \n    return data", "category": "Python"}, {"instruction": "Create a Python class to represent a 3 x 3 matrix with variable values.", "input": "", "output": "class Matrix:\n    def __init__(self, a00=0, a01=0, a02=0, a10=0, a11=0, a12=0, a20=0, a21=0, a22=0):\n        self.matrix = [[a00, a01, a02],\n                        [a10, a11, a12],\n                        [a20, a21, a22]]\n    \n    def __str__(self):\n        return str(self.matrix)", "category": "Python"}, {"instruction": "Employ an algorithm to predict the customer churn rate.", "input": "A dataset containing customer data such as demographics, spending patterns, customer lifetime value and customer satisfaction.", "output": "A supervised learning algorithm can be employed to predict customer churn rate. This will involve training the algorithm on the customer dataset, by providing features such as customer age, spending pattern, customer lifetime value and customer satisfaction, as well as a target the algorithm should learn from. The trained model can then be used to predict customer churn rate.", "category": "Python"}, {"instruction": "Write a Python script to display the number of days between two given dates.", "input": "Date 1: 21 May 2020\nDate 2: 13 June 2020", "output": "import datetime \nstart_date = datetime.date(2020, 5, 21)\nend_date = datetime.date(2020, 6, 13)\ndelta = end_date - start_date\nprint(\"Number of days between two dates:\", delta.days)", "category": "Python"}, {"instruction": "Given two strings, find the longest common substring between them.", "input": "s1 = \"Hello, world!\"\ns2 = \"world, goodbye!\"", "output": "def longest_substring(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\ns1 = \"Hello, world!\"\ns2 = \"world, goodbye!\"\nprint(longest_substring(s1, s2))\n\n# Output: world", "category": "Python"}, {"instruction": "Develop a Chatbot that can respond to the user's queries about programming languages.", "input": "", "output": "def chatbot():\n    while True: \n        # User's query \n        query = input(\"What would you like to know about programming languages? \")\n\n        # Checking if query is relevant \n        if \"language\" in query:\n            # Provide response \n            print(\"There are many different programming languages, and these can range from low-level languages such as assembly, to high-level languages such as Python and Java.\")\n        else: \n            # Provide different response for irrelevant query \n            print(\"I'm sorry, I don't understand your query. Please ask me something else.\")", "category": "Python"}, {"instruction": "Create a data visualization comparing the population of California and New York.", "input": "", "output": "import matplotlib.pyplot as plt \n  \n# X axis values \nx = ['California', 'New York'] \n# Y axis values \npop = [39.56, 19.45] \n  \n# plotting bars  \nplt.bar(x, pop) \n  \n# Naming the x-axis \nplt.xlabel('State') \n# naming the y-axis \nplt.ylabel('Population') \n  \n# giving a title to the figure \nplt.title('California vs. New York Population') \n  \n# function to show the plot \nplt.show()", "category": "Python"}, {"instruction": "Using the input, create a function to calculate the average of the set.", "input": "nums = [1, 2, 3, 4, 5]", "output": "def avg_nums(nums):\n  total = 0\n  for num in nums:\n    total += num\n  avg = total / len(nums)\n  return avg\n\nprint(avg_nums([1, 2, 3, 4, 5]))\n\n# Output: 3.0", "category": "Python"}, {"instruction": "Create a method in Python to generate all the prime numbers between 1 and 100.", "input": "", "output": "def prime_generator(n):\n    primes = []\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\nprint(prime_generator(100))", "category": "Python"}, {"instruction": "Find the most common element in a list of strings.", "input": "mylist = [\"red\", \"blue\", \"red\", \"green\", \"green\", \"red\"]", "output": "def most_common_element(mylist):\n    count = 0\n    common = None\n\n    for i in mylist:\n        curr_count = mylist.count(i)\n        if curr_count > count:\n            common = i\n            count = curr_count\n    return common\n\nprint(most_common_element(mylist))\n\n#Output:\nred", "category": "Python"}, {"instruction": "Generate a correct Python code to turn a list of strings into a list of their lengths.", "input": "mylist = [\"hello\", \"world\", \"fire\", \"feline\"]", "output": "length_list = [len(x) for x in mylist]\n\n#Output:\nlength_list = [5, 5, 4, 6]", "category": "Python"}, {"instruction": "Manipulate a given list of strings to capitalize the first letter in each string.", "input": "mylist = [\"this\", \"is\", \"a\", \"list\"]", "output": "def capitalize(mylist):\n  new_list = []\n  \n  for item in mylist:\n    new_list.append(item.capitalize())\n  \n  return new_list\n\nprint(capitalize(mylist))\n\n#Output:\n['This', 'Is', 'A', 'List']", "category": "Python"}, {"instruction": "Create a function to print out words that include the letter \"e\" from a given list of strings.", "input": "mylist = [\"hello\", \"world\", \"fire\", \"feline\"]", "output": "def print_words_with_e(mylist):\n for word in mylist:\n  if 'e' in word:\n   print(word)\n\nprint_words_with_e(mylist)\n\n#Output: \nhello\nfire\nfeline", "category": "Python"}, {"instruction": "Generate a Python program to extract the digits of a given number and print the extracted digits in descending order.", "input": "num = 318", "output": "def extractDigits(num):\n    extracted_list = []\n    while num > 0:\n        extracted_list.append(num%10)\n        num //= 10\n    extracted_list.sort(reverse=True)\n    return extracted_list", "category": "Python"}, {"instruction": "Design a Python class to represent a rectangle with a length and width attribute.", "input": "", "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    \n    def get_area(self):\n        return self.length*self.width", "category": "Python"}, {"instruction": "Create a Python class to represent an employee record with fields name and salary.", "input": "", "output": "class Employee:\n    def __init__(self, name, salary):\n        self.name = name\n        self.salary = salary\n    \n    def get_name(self):\n        return self.name\n    \n    def get_salary(self):\n        return self.salary", "category": "Python"}, {"instruction": "Design a Python class to represent a 3 x 3 chess board.", "input": "", "output": "class ChessBoard:\n    def __init__(self):\n        self.board = [\n            [\"a1\",\"b1\",\"c1\"],\n            [\"a2\",\"b2\",\"c2\"],\n            [\"a3\",\"b3\",\"c3\"]\n        ]\n\n    def __str__(self):\n        board_string = \"\"\n        for row in self.board:\n            for col in row:\n                board_string += col + \" \"\n            board_string += \"\\n\"\n        return board_string", "category": "Python"}, {"instruction": "Create a Python class that encodes a given number using the Base58 algorithm.", "input": "number = 123456789", "output": "class Base58Encoder:\n    '''This class encodes numbers using the Base58 algorithm'''\n    def __init__(self,number):\n        self.number = number\n\n    def encode(self):\n        encoded = \"\" \n        alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    \n        while self.number > 0:\n            remainder = self.number % 58 \n            self.number = self.number // 58 \n            encoded = alphabet[remainder] + encoded \n    \n        return encoded", "category": "Python"}, {"instruction": "Create a Python program that compares two given lists to check if they have any common element.", "input": "list1 = [1,2,3]\nlist2 = [4,5,6]", "output": "def compare_lists(list1, list2):\n    '''This function checks if two lists have any common element'''\n    found_common = False\n    \n    for x in list1:\n        if x in list2:\n            found_common = True\n            break\n    return found_common", "category": "Python"}, {"instruction": "Create a Python script that shows the frequency of words in a given text.", "input": "text = \"Hello, this is a sentence.\"", "output": "def calc_word_freq(text):\n    '''This function calculates word frequency in a given text'''\n    word_freq = {}\n    for word in text.split():\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n\n    for word,freq in word_freq.items():\n        print(f'{word} - {freq}')", "category": "Python"}, {"instruction": "Create a wrapper class for a given API that takes string input and returns JSON output.", "input": "url = \"http://example.com/api\"", "output": "class APIWrapper:\n    '''This class wraps a given API and provides a convenient way to use it'''\n    def __init__(self,url):\n        self.url = url\n\n    def call_api(self, input):\n        params = {\"input\": input}\n        response = requests.get(self.url, params=params).json()\n        return response", "category": "Python"}, {"instruction": "Convert a given string to the CamelCase format.", "input": "string = \"this is a string\"", "output": "def to_camel_case(string):\n    '''This function converts a given string to the CamelCase format'''\n    res = \"\"\n    for word in string.split():\n        res += word[0].upper() + word[1:]\n    return res", "category": "Python"}, {"instruction": "Implement a function that calculates the sum of n numbers.", "input": "numbers = [1,2,3,4]", "output": "def sum_n_numbers(numbers):\n    '''This function returns the sum of n numbers'''\n    total = 0\n    for n in numbers:\n        total += n\n    return total", "category": "Python"}, {"instruction": "Read the given JSON data and return a list of all the keys.", "input": "{\n  \"name\": \"John\",\n  \"age\": 21,\n  \"isActive\": true\n}", "output": "def get_keys(data): \n  keys = []\n  for key in data:\n    keys.append(key)\n  return keys", "category": "Python"}, {"instruction": "You need to write an API request in Python to return JSON data from an API endpoint.", "input": "", "output": "import requests\n\nAPI_ENDPOINT = 'api.example.com/data'\n\nresponse = requests.get(API_ENDPOINT)\n\nif response.status_code == 200:\n    data = response.json()", "category": "Python"}, {"instruction": "You need to edit the given code for sorting. Make the array sort in descending order.", "input": "arr = [3, 5, 8, 9, 10]", "output": "def quick_sort(arr): \n    if len(arr) <= 1:\n        return arr\n  \n    pivot = arr[-1]\n    lesser_elements = [i for i in arr[:-1] if i <= pivot]\n    greater_elements = [i for i in arr[:-1] if i > pivot]\n    return quick_sort(greater_elements) + [pivot] + quick_sort(lesser_elements)", "category": "Python"}, {"instruction": "Create a function in Python to generate all possible strings of length k from given lowercase characters.", "input": "set = {'a', 'b', 'c'}\nk = 3", "output": "def generate_strings(set, k): \n\tstrings = [] \n\tn = len(set) \n\t\n\tdef generate_strings_recur(sub, count): \n\t\t\n\t\t# Base cases \n\t\tif count == 0 : \n\t\t\tstrings.append(sub) \n\t\t\treturn\n\t\t\n\t\tfor i in range(n): \n\t\t\t\n\t\t\t# Next character of string to be \n\t\t\t# formed \n\t\t\tnew_sub = sub + set[i] \n\t\t\t\n\t\t\t# Recursion call \n\t\t\tgenerate_strings_recur(new_sub, \n\t\t\t\t\t\t\t\tcount-1) \n\t\n\tcount = k \n\tsub = \"\" \n\t\n\t# Call to generate all strings of length k \n\tgenerate_strings_recur(sub, count) \n\t\n\treturn strings", "category": "Python"}, {"instruction": "Construct a list in Python that contains the names of the months in order, starting with January.", "input": "", "output": "months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]", "category": "Python"}, {"instruction": "Write a code to generate an array of 10 random integers in the range 0-99.", "input": "", "output": "import random\n \ndef random_int_array(num):\n    array = []\n    for i in range(num):\n        num = random.randint(0, 99)\n        array.append(num)\n    return array\n\nprint(random_int_array(10))", "category": "Python"}, {"instruction": "Create a function in Python that will print out a random word from a given list.", "input": "words_list = ['cat', 'dog', 'ball', 'toy']", "output": "import random\n\ndef random_word(words_list):\n    word = random.choice(words_list)\n    print(word)\n\nrandom_word(words_list)", "category": "Python"}, {"instruction": "Create a program in Python to generate a random number in the range from 0 to 10.", "input": "", "output": "import random \n\nprint(random.randint(0, 10))", "category": "Python"}, {"instruction": "Develop a function in Python to convert a temperature in Celsius to Fahrenheit.", "input": "Temperature in Celsius: 30", "output": "def celsius_to_fahrenheit(celsius):\n    return (celsius * 1.8) + 32\n\nprint(celsius_to_fahrenheit(30))", "category": "Python"}, {"instruction": "Generate all possible permutations of the characters in a given string", "input": "", "output": "def permutations(string):\n    \"\"\"\n    Function to generate all possible permutations of a given string\n    \"\"\"\n    if len(string) == 0:\n        return ['']\n    prev_list = permutations(string[1:len(string)])\n    next_list = []\n    for i in range(0,len(prev_list)):\n        for j in range(0,len(string)):\n            new_string = prev_list[i][0:j]+string[0]+prev_list[i][j:len(string)-1]\n            if new_string not in next_list:\n                next_list.append(new_string)\n    return next_list\n\nif __name__ == '__main__':\n    string = 'abcd'\n    print(permutations(string))\n    # should print ['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'dabc', 'dbac', 'bdac', 'bdca', 'dacb', 'dcab', 'dcba', 'adbc', 'dbca', 'dcab', 'dcba']", "category": "Python"}, {"instruction": "Merge two dictionaries into another dictionary", "input": "dict1 = {'a':1, 'b':2}\ndict2 = {'c':3, 'd':4}", "output": "def merge(dict1, dict2):\n    \"\"\"\n    Function to merge two dictionaries\n    \"\"\"\n    return {**dict1, **dict2}\n\nif __name__ == '__main__':\n    dict1 = {'a':1, 'b':2}\n    dict2 = {'c':3, 'd':4}\n    print(merge(dict1, dict2))\n    # should print {'a': 1, 'b': 2, 'c': 3, 'd': 4}", "category": "Python"}, {"instruction": "Build a neural network using Python", "input": "import numpy as np\n\n# Sample data\nX = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\ny = np.array([[0, 1, 1, 0]]).T", "output": "import keras\n\n# Create a neural network\nmodel = keras.Sequential([\n    keras.layers.Dense(2, activation='sigmoid'),\n    keras.layers.Dense(1, activation='sigmoid')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\n# Train the model\nmodel.fit(X, y, epochs=1000)", "category": "Python"}, {"instruction": "Calculate the area of a triangle given the coordinates of its three vertices.", "input": "x1 = 1\ny1 = 5\nx2 = 4\ny2 = 3\nx3 = 7\ny3 = 2", "output": "def calculate_triangle_area(x1, y1, x2, y2, x3, y3):\n    \"\"\"\n    Function to calculate the area of a triangle given the coordinates of its 3 vertices\n    \"\"\"\n    a = ((x2 - x1)**2 + (y2 - y1)**2)**0.5\n    b = ((x3 - x2)**2 + (y3 - y2)**2)**0.5\n    c = ((x1 - x3)**2 + (y1 - y3)**2)**0.5\n    s = (a + b + c) / 2\n    return ((s*(s-a)*(s-b)*(s-c))**0.5)\n    \nif __name__ == \"__main__\":\n    x1 = 1\n    y1 = 5\n    x2 = 4\n    y2 = 3\n    x3 = 7\n    y3 = 2\n    print(calculate_triangle_area(x1, y1, x2, y2, x3, y3))\n    # should print 4.24", "category": "Python"}, {"instruction": "Create a function that takes two lists and returns a dictionary with the elements of each list as keys.", "input": "list1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]", "output": "def create_dictionary(list1, list2):\n    \"\"\"\n    Function to create a dictionary with two lists\n    \"\"\"\n    return {list1[i]: list2[i] for i in range(len(list1))}\n    \nif __name__ == '__main__':\n    list1 = ['a', 'b', 'c']\n    list2 = [1, 2, 3]\n    print(create_dictionary(list1, list2))\n    # should print {'a': 1, 'b': 2, 'c': 3}", "category": "Python"}, {"instruction": "Make a 3D scatter chart with a dataset containing 5 rows and 3 columns.", "input": "import pandas as pd\n\n# Sample dataset\ndata = {'X': [1,2,3,4,5], 'Y': [6,7,8,9,10], 'Z': [11,12,13,14,15]}\ndf = pd.DataFrame(data)", "output": "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n\n# Create 3D scatter plot\nfig = plt.figure()\nax = Axes3D(fig)\nax.scatter(df['X'], df['Y'], df['Z'])\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('Z')\nplt.show()", "category": "Python"}, {"instruction": "Write a function that takes two strings and returns a boolean value indicating whether the two strings are anagrams or not.", "input": "", "output": "def anagram(s1, s2):\n    \n    # Strip whitespaces and convert to lowercase\n    s1 = s1.replace(' ', '').lower()\n    s2 = s2.replace(' ', '').lower()\n    \n    # Return boolean indicating anagram status\n    return sorted(s1) == sorted(s2)\n\nif __name__ == '__main__':\n    print(anagram('tea', 'eat')) \n    # should print True", "category": "Python"}, {"instruction": "Design a Python class to represent a user with fields name and age.", "input": "", "output": "class User:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age", "category": "Python"}, {"instruction": "Suggest a way to extract all the words from an HTML page using Python.", "input": "", "output": "Using the BeautifulSoup library, you can parse the HTML page and extract all the words using the \"get_text()\" method.", "category": "Python"}, {"instruction": "Create a class that has 3 methods. The first method should multiply two numbers, the second should add two numbers, and the third should calculate the modulus of two numbers.", "input": "", "output": "class Calculator:\n    def multiply(self, num1, num2):\n        return num1 * num2\n        \n    def add(self, num1, num2):\n        return num1 + num2\n        \n    def modulus(self, num1, num2):\n        return num1 % num2", "category": "Python"}, {"instruction": "Calculate the sum of squared differences between every number in a list and the mean of the list.", "input": "[1, 2, 3, 4]", "output": "def sum_squared_diffs(nums):\n    mean = sum(nums) / len(nums)\n    return sum((num - mean)**2 for num in nums)", "category": "Python"}, {"instruction": "Convert a given list to a dictionary with items as keys and their corresponding position in the list as values.", "input": "[\u2018a\u2019, \u2018b\u2019, \u2018c\u2019, \u2018d\u2019]", "output": "def list_to_dict(lst):\n    return {k: v for v, k in enumerate(lst)}", "category": "Python"}, {"instruction": "Using the provided data structure, create a class in Python to represent a car.", "input": "car = { \n    \"make\": \"Honda\", \n    \"model\": \"Civic\", \n    \"year\": 2011\n}", "output": "class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n    \n    def __str__(self):\n        return f\"{self.make} {self.model} ({self.year})\"", "category": "Python"}, {"instruction": "Write a Python program to generate a dictionary that contains a number (x) of random numbers.", "input": "x = 10", "output": "import random\n\nrandom_numbers = {} \n  \nfor i in range(x + 1): \n    n = random.randint(1, 50) \n      \n    random_numbers[i+1] = n\n      \nprint(random_numbers)", "category": "Python"}, {"instruction": "Refactor this code to use the built-in functions.", "input": "def find_odd(array):\n    is_odd = False\n    for element in array:\n        if element % 2 == 1:\n            is_odd = True\n            break\n    return is_odd", "output": "def find_odd(array):\n    return any(element % 2 == 1 for element in array)", "category": "Python"}, {"instruction": "Explain the differences between the list, set, and dictionary data structures in Python.", "input": "", "output": "List is an ordered sequence of data that can hold duplicate values. It is one of the most widely used data structures in Python, and is created by placing all the items in a square bracket and separating them by commas. Set is an unordered collection of data that cannot hold duplicate values. Set is created by enclosing all the items in a set() function. Dictionary is an unordered collection of key:value pairs. It is similar to real-life dictionaries in that it stores key-value pairs and retrieves values based on the associated key. It is created with curly brackets and key:value pairs, separated by commas.", "category": "Python"}, {"instruction": "Implement an efficient sorting algorithm in Python.", "input": "", "output": "def sort(arr): \n    if len(arr) == 0: \n        return [] \n    else: \n        pivot = arr[0] \n        lesser = sort([x for x in arr[1:] if x < pivot])\n        greater = sort([x for x in arr[1:] if x >= pivot])\n        return lesser + [pivot] + greater", "category": "Python"}, {"instruction": "Generate a list of words that contain the substring \"al\" using Python.", "input": "", "output": "words = [\"arrival\", \"essential\", \"animal\", \"pascal\", \"medieval\", \"festival\", \"final\", \"spirited\", \"downfall\", \"functional\", \"locational\", \"fundamental\"]", "category": "Python"}, {"instruction": "Create a program that implements a Stack (LIFO) using an array", "input": "", "output": "class Stack:\n    def __init__(self):\n        self.stack = []\n    \n    def push(self, item):\n        self.stack.append(item)\n    \n    def pop(self):\n        if self.is_empty():\n            return None\n        return self.stack.pop()\n    \n    def is_empty(self):\n        return len(self.stack) == 0", "category": "Python"}, {"instruction": "Create a program that adds two sets of numbers together.", "input": "Set 1: [1, 3, 5]\nSet 2: [2, 4, 6]", "output": "def add_sets(set1, set2):\n    result=[]\n    for i in range(max(len(set1),len(set2))):\n        if i < len(set1):\n            result.append(set1[i])\n        if i < len(set2):\n            result.append(set2[i])\n    return result", "category": "Python"}, {"instruction": "Design an algorithm to find the maximum number from a set of numbers", "input": "Set of numbers: [24, 5, 40, 15]", "output": "# Algorithm\n\n1. Initialize maximum as 0\n2. Iterate through each number in the set\n  a. if number > maximum:\n      i. set maximum as number\n3. Return maximum", "category": "Python"}, {"instruction": "Create a function that takes a string and returns the longest set of characters in descending order.", "input": "Hello World", "output": "def longest_substring(string):\n    longest = ''\n    current = ''\n    for i in range(len(string)):\n        if (i==0 or string[i] >= string[i-1]):\n            current += string[i]\n            if (len(current) > len(longest)):\n                longest = current\n        else:\n            current = string[i]\n    return longest", "category": "Python"}, {"instruction": "Compute the median of an array of integers in Python.", "input": "[1, 2, 3, 4, 5]", "output": "def median(arr): \n    arr.sort() \n    if (len(arr) % 2 != 0): \n        return arr[len(arr) // 2] \n    else: \n        return (arr[(len(arr) // 2) - 1] + arr[len(arr) // 2]) / 2.0", "category": "Python"}, {"instruction": "Create an algorithm in Python that sorts an array of n numbers using insertion sort.", "input": "[5, 3, 2, 4, 1]", "output": "def insert_sort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key", "category": "Python"}, {"instruction": "Create a Python function that takes one argument as an array of integers and returns the sum of all the integers.", "input": "[2, 3, 4, 5]", "output": "def sum_array(array):\n    res = 0\n    for i in array:\n        res += i\n    return res", "category": "Python"}, {"instruction": "Write a method to sum up two matrices", "input": "Matrix A: [[3, 5, 7],\n           [1, 6, 9]]\nMatrix B: [[4, 8, 2],\n           [3, 5, 7]]", "output": "def matrix_addition(A, B):\n    if len(A) != len(B) or len(A[0]) != len(B[0]):\n        return 'Matrices cannot be added!'\n    else:\n        result = [[0 for i in range(len(A[0]))] for j in range(len(A))]\n        for i in range(len(A)):\n            for j in range(len(A[0])):\n                result[i][j] = A[i][j] + B[i][j]\n        return result\n\nA = [[3, 5, 7], [1, 6, 9]]\nB = [[4, 8, 2], [3, 5, 7]]\n\nprint(matrix_addition(A, B)) # [[7, 13, 9], [4, 11, 16]]", "category": "Python"}, {"instruction": "How to generate a random string of a given length in Python?", "input": "Length: 10", "output": "import random\nimport string\n\nlength = 10\n\nx = ''.join(random.choices(string.ascii_letters + string.digits, k=length))\nprint(x) # 'sbMTWHmfrh'", "category": "Python"}, {"instruction": "What is the Python built-in function to swap two values?", "input": "", "output": "The Python built-in function to swap two values is the \"tuple unpacking\" operator (x, y = y, x). This allows you to swap two variables without having to use a temporary variable.", "category": "Python"}, {"instruction": "You need to write a function to find the sum of the squares of even numbers in a given list.", "input": "list_example = [2, 3, 4, 5]", "output": "def sum_of_even_squares(lst):\n    sum = 0\n    for elem in lst:\n        if elem % 2 == 0:\n            sum += elem**2\n    return sum\n\ntotal_sum = sum_of_even_squares(list_example) #total_sum is equal to", "category": "Python"}, {"instruction": "How can we trim a specified amount of characters from the beginning of a string in Python?", "input": "", "output": "def trim_string(string, n):\n    return string[n:]", "category": "Python"}, {"instruction": "How can we check if a given string is a valid IP address or not?", "input": "", "output": "import re\n\ndef isvalid_ip(string):\n    regex = r\"^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$\"\n    if re.search(regex, string):\n        return True \n    else: \n        return False", "category": "Python"}, {"instruction": "Reverse the order of a list without using the built-in reverse function.", "input": "", "output": "def reverse_list(lst):\n    rev = []\n    for x in lst:\n        rev.insert(0, x)\n    return rev", "category": "Python"}, {"instruction": "What is the syntax to create a list of numbers from 0 to n in Python?", "input": "", "output": "def create_list(n):\n    return [i for i in range(n+1)]", "category": "Python"}, {"instruction": "How can we remove all elements of a list that meet a certain condition?", "input": "", "output": "def remove_condition(lst, condition):\n    return [x for x in lst if not condition(x)]", "category": "Python"}, {"instruction": "Write code to generate a random six-character string that contains at least one lowercase letter and one number.", "input": "", "output": "import string\nimport random\n\ndef generate_code():\n    chars = string.ascii_lowercase + string.digits\n    return ''.join(random.choices(chars, k=6))", "category": "Python"}, {"instruction": "Using the provided objects and classes, write a code snippet in Python to implement polymorphism.", "input": "class Animal:\n  def sound(self):\n    pass\n\nclass Cat(Animal):\n  def sound(self):\n    print(\"Meow\")\n\nclass Dog(Animal):\n  def sound(self):\n    print(\"Bark\")", "output": "def make_sound(animal):\n  animal.sound()\n  \nmake_sound(Cat())  #Prints \"Meow\"\nmake_sound(Dog())  #Prints \"Bark\"", "category": "Python"}, {"instruction": "Calculate the number of days between two given dates in Python.", "input": "date1 = '2020-09-13'\ndate2 = '2021-02-06'", "output": "122", "category": "Python"}, {"instruction": "Explain in brief the concept of type casting in programming languages.", "input": "", "output": "Type casting is the process of converting one data type into another. It is generally used to convert values from one type to another in order to perform specific operations. In programming languages, type casting involves converting a value of one data type such as an integer or a string into a new data type such as a float or a boolean. Type casting ensures that the operations performed on the data are valid and helps reduce the chances of errors due to incompatibility of data types.", "category": "Python"}, {"instruction": "You need to create a function that takes a character as input and prints out all words from a given dictionary that start with the given character.", "input": "dictionary = [\"apple\", \"ball\", \"cat\", \"dog\"]\ncharacter = 'd'", "output": "def search_dictionary(dictionary, character):\n    result = []\n    for word in dictionary:\n        if word[0] == character:\n            result.append(word)\n    return result", "category": "Python"}, {"instruction": "Create a list comprehension for a given list that only contains odd numbers.", "input": "[1, 2, 3, 4, 5, 6, 7, 8]", "output": "odd_nums = [num for num in [1, 2, 3, 4, 5, 6, 7, 8] if num % 2 != 0 ]", "category": "Python"}, {"instruction": "Make a class that creates a list and has a maximum length.", "input": "", "output": "class LimitedList:\n    def __init__ (self, max_len):\n        self.max_len = max_len\n        self.items = []\n\n    def add(self, item):\n        if len(self.items) < self.max_len:\n            self.items.append(item)\n        else:\n            self.items.pop(0)\n            self.items.append(item)\n\n    def get_list(self):\n        return self.items", "category": "Python"}, {"instruction": "Describe the difference between the 'break' and 'continue' keywords in Python.", "input": "", "output": "The 'break' keyword is used to end a loop and exit the loop, whereas the 'continue' keyword is used to skip the current iteration and continue with the next iteration.", "category": "Python"}, {"instruction": "Describe how LSTMs are used to predict time-series data.", "input": "", "output": "Long Short-Term Memory (LSTM) networks are a type of Recurrent Neural Network (RNN) that enable the model to learn long-term dependencies by remembering information from long periods of time. LSTMs are commonly used to model time-series data such as stock prices, sensor readings, or other sequences of data points that contain predictable patterns. The LSTM predicts the next step in the sequential data using the past data points, and can be used to perform tasks such as forecasting future data points and anomaly detection.", "category": "Python"}, {"instruction": "Explain how to use functions in Python to perform operations on dictionaries.", "input": "", "output": "Python dictionaries are mappings between keys and values, allowing for efficient retrieval of values using its associated key. Various functions can be used to manipulate the data in the dictionaries, such as the get() function to retrieve the value for a given key, the clear() function to delete all values, the keys() and values() functions to retrieve all keys and values respectively, and the items() function to retrieve a list of key-value pairs.", "category": "Python"}, {"instruction": "Modify the program to take input from the user and create a two-dimensional array in Python.", "input": "", "output": "rows, cols = (int(x) for x in input(\"Enter size of 2D array: \").split())\narr = [[None for x in range(cols)] for y in range(rows)]\nfor i in range(rows):\n    for j in range(cols):\n        arr[i][j] = int(input(\"Enter element: \"))", "category": "Python"}, {"instruction": "Create a function in Python that takes in a string and returns a list of all unique characters in it.", "input": "string = \"banana\"", "output": "def unique_chars(string): \n    char_list = [] \n    for char in string: \n        if(char not in char_list): \n            char_list.append(char) \n    return char_list", "category": "Python"}, {"instruction": "Write a function that takes in two arrays of integers and returns the sum of the elements in both arrays.", "input": "array1 = [1, 2, 3] \narray2 = [4, 5, 6]", "output": "def sum_arrays(arr1, arr2):\n    sums = []\n    for i in range(len(arr1)):\n        sums.append(arr1[i] + arr2[i])\n    return sums", "category": "Python"}, {"instruction": "Go through the following code and create test cases for it.", "input": "def reverse_string(string):\n  rev_str = \"\"\n\n  # Loop through the string in reverse order\n  for i in range(len(string)-1, -1, -1):\n    rev_str += string[i]\n\n  return rev_str", "output": "import unittest\n\nclass ReverseStringTests(unittest.TestCase):\n    def test_reverse_string_with_single_character_string(self):\n        result = reverse_string(\"a\")\n        self.assertEqual(result, \"a\")\n\n    def test_reverse_string_with_even_length_string(self):\n        result = reverse_string(\"hello\")\n        self.assertEqual(result, \"olleh\")\n\n    def test_reverse_string_with_odd_length_string(self):\n        result = reverse_string(\"world\")\n        self.assertEqual(result, \"dlrow\")\n\n\nif __name__ == '_main_':\nunittest.main()", "category": "Python"}, {"instruction": "Create a function to evaluate a given expression written in infix notation.", "input": "exp = \"5 + (7 * 8) / 3\"", "output": "def eval_exp(exp): \n    stack = [] \n  \n    for char in exp: \n        if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or char in \"0123456789\": \n            stack.append(char)\n  \n        else: \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + char + val1))) \n  \n    return int(stack.pop()) \n\nprint(eval_exp(exp))", "category": "Python"}, {"instruction": "Write a function to simulate a dice roll.", "input": "", "output": "import random\n\ndef roll_dice():\n    return random.randint(1, 6)", "category": "Python"}, {"instruction": "Write a function to reverse an integer.", "input": "x = 12345", "output": "def reverse_integer(x):\n    rev_int = 0\n    while x > 0:\n        rev_int = rev_int * 10 + (x % 10)\n        x //= 10\n    return rev_int", "category": "Python"}, {"instruction": "Write a function that takes a two-dimensional array and returns its transpose.", "input": "arr = [[1,2,3], [4,5,6], [7,8,9]]", "output": "def transpose(arr):\n    transpose_arr = [[0] *len(arr) for _ in range(len(arr[0]))]\n    for row in range(len(arr)):\n        for col in range(len(arr[0])):\n            transpose_arr[col][row] = arr[row][col]\n    return transpose_arr", "category": "Python"}, {"instruction": "Write a Python program to generate a 3x3 Identity matrix", "input": "", "output": "def generate_identity_matrix():\n    matrix = [[0, 0, 0],\n              [0, 0, 0],\n              [0, 0, 0]]\n\n    for i in range(len(matrix)):\n        for j in range(len(matrix)):\n            if i == j:\n                matrix[i][j] = 1\n            else:\n                matrix[i][j] = 0\n    \n    return matrix", "category": "Python"}, {"instruction": "Edit the code to produce the output of the following matrix multiplication", "input": "X = [[2, 3, 9],\n     [8, 7, 6],\n     [1, 6, 4]]\nY = [[9, 4, 5],\n     [7, 3, 3],\n     [2, 1, 5]]", "output": "X = [[2, 3, 9],\n     [8, 7, 6],\n     [1, 6, 4]]\nY = [[9, 4, 5],\n     [7, 3, 3],\n     [2, 1, 5]]\n\ndef mat_mult(X, Y):\n    result = [[0, 0, 0],\n              [0, 0, 0],\n              [0, 0, 0]]\n    for i in range(len(X)):\n        for j in range(len(Y[0])):\n            for k in range(len(Y)):\n                result[i][j] += X[i][k] * Y[k][j]\n    return result", "category": "Python"}, {"instruction": "Remove all duplicates from this list using Python", "input": "list=[5,5,5,7,8,8,9]", "output": "list=[5,7,8,9]\n\nlist = list(dict.fromkeys(list))", "category": "Python"}, {"instruction": "Generate code to find the maximum element from a given list", "input": "list=[-2, 12, 3, 0, -5]", "output": "def find_max(list):\n    max_element = float('-inf')\n    for element in list:\n        if element > max_element:\n            max_element = element\n    return max_element\n\nprint(find_max(list)) # Prints 12", "category": "Python"}, {"instruction": "Use a for loop to add up all odd elements in a list", "input": "list=[4,5,7,9,11,3]", "output": "odd_total = 0\nfor element in list:\n    if element % 2 != 0:\n        odd_total += element\nprint(odd_total) # Prints 25", "category": "Python"}, {"instruction": "Write a basic python program to accept a string input, use it to create a dictionary and sort it by alphabetical order", "input": "ToBeOrNotToBe", "output": "inp =raw_input(\"Enter String:\")\nmy_dict = {}\nfor character in inp:\n     if character not in my_dict:\n         my_dict[character] = 1\n     else:\n         my_dict[character] += 1\n\nsorted_order = sorted(my_dict.items(), key=lambda x: x[0])\n\nprint(\"Sorted Dictionary\")\nfor character in sorted_order:\n    print(\"{} : {}\".format(character[0], character[1]))", "category": "Python"}, {"instruction": "Define a class in Python that takes a string and returns the length of the string.", "input": "", "output": "class StringLength:\n  def __init__(self, string):\n    self.string = string\n\n  def getLength(self):\n    return len(self.string)", "category": "Python"}, {"instruction": "Write a python code to concatenate two strings and reverse the result.", "input": "string1 = \"Hello\"\nstring2 = \"World\"", "output": "res = string1+string2\nres = res[::-1] \nprint(res)", "category": "Python"}, {"instruction": "You need to convert any given number to its octal representation.", "input": "", "output": "def octal_representation(num):\n    output = \"\"\n    while num > 0:\n        output = str(num % 8) + output\n        num //= 8\n    return output", "category": "Python"}, {"instruction": "You need to remove duplicates from a list while preserving the order of the items.", "input": "", "output": "def remove_duplicates(list):\n    output = []\n    seen = set()\n    for i in list:\n        if i not in seen:\n            seen.add(i)\n            output.append(i)\n        return output", "category": "Python"}, {"instruction": "Create a Python class for a student that holds their name, age and grade.", "input": "", "output": "class Student:\n def __init__(self, name, age, grade):\n  self.name = name\n  self.age = age\n  self.grade = grade\n\ndef get_student_info(self):\n  return (f\"{self.name}, {self.age}, {self.grade}\")", "category": "Python"}, {"instruction": "Write a function to find the highest prime number that can be divided by a given number.", "input": "", "output": "def highest_prime(num):\n    highest_factor = 0\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0 and is_prime(i):\n            highest_factor = i\n    return highest_factor\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Create a function that takes two arguments, a number and a list, and returns a list with all elements from the original list multiplied by the number.", "input": "num = 2\nlst = [1, 2, 3, 4]", "output": "# function to multiply each element of list by number \ndef lst_multiply(num, lst):\n    new_lst = []\n    for num in lst:\n        new_lst.append(num * num)\n    return new_lst\n\n# main program\nprint(lst_multiply(num, lst))", "category": "Python"}, {"instruction": "Create a method to filter an array and return all elements that are greater than or equal to 10.", "input": "arr = [1, 2, 6, 10, 14, 18]", "output": "# method to filter an array \ndef filter(arr):\n    new_arr = []\n    for element in arr:\n        if element >= 10:\n            new_arr.append(element)\n    return new_arr\n\n# main program\nprint(filter(arr))", "category": "Python"}, {"instruction": "Write code to implement the Binary Search algorithm in Python.", "input": "", "output": "def binary_search(arr, target):\n    low, high = 0, len(arr) - 1\n\n    while low <= high:\n        mid = low + (high - low)//2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1  # not found", "category": "Python"}, {"instruction": "Create a webhook in Python to listen to webhook requests.", "input": "", "output": "import time\n\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/webhook', methods=['POST'])\ndef webhook():\n    data = request.get_json()\n    print(data)\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)", "category": "Python"}, {"instruction": "Compute the maximum value of a List in Python.", "input": "", "output": "max_val = max(my_list)  # Computes the maximum of the list", "category": "Python"}, {"instruction": "Change the provided dataset into a 3-dimensional tensor, in order to feed it into a Convolutional Neural Network model.", "input": "Dataset containing 10,000 grayscale images of size 32x32", "output": "import numpy as np \n  \n# Creating the 3D tensor \nX = np.zeros((10000, 32, 32)) \n  \n# Initializing it with the grayscale images \nX[:,:,:] = dataset", "category": "Python"}, {"instruction": "Write a Python program to read two numbers and print their multiplication?", "input": "Number1: 5\nNumber2: 10", "output": "#Take the two numbers from the user\nnumber1 = int(input('Number1:  '))\nnumber2 = int(input('Number2: '))\n\n#Multiply and print the result\nresult = number1 * number2\nprint('The result is:', result)\n\nOutput:\nThe result is: 50", "category": "Python"}, {"instruction": "Create a function which accepts a string and prints out each word with the count of its characters.", "input": "String: \"Hello World\"", "output": "def print_word_lengths(input_string):\n  #Split the string into individual words\n  words = input_string.split()\n  \n  #Iterate over each word\n  for word in words:\n    #Print the word and the length of the word\n    print('{}: {}'.format(word, len(word)))\n\nprint_word_lengths('Hello World')\n\nOutput:\nHello: 5\nWorld: 5", "category": "Python"}, {"instruction": "Create a program that extracts the first and last names from a string.", "input": "Full Name: \"Barack Obama\"", "output": "def extract_names(full_name):\n  #Split the name into separate words\n  name_parts = full_name.split()\n  \n  #Check if the name has multiple words\n  if len(name_parts) == 1:\n    return None\n  \n  #Extract the first and last names\n  first_name = name_parts[0]\n  last_name = name_parts[-1]\n  \n  #Return the first and last names\n  return first_name, last_name\n\nprint(extract_names(\"Barack Obama\"))\n\nOutput:\n('Barack', 'Obama')", "category": "Python"}, {"instruction": "Design a function to validate a phone number.", "input": "Phone Number: 212-555-0000", "output": "def check_phone_number(phone_number):\n  #Remove any non-numeric characters\n  phone_number = phone_number.replace(\"-\", \"\")\n  phone_number = phone_number.replace(\" \", \"\")\n\n  #Check if the phone number is 10 digits long\n  if (len(phone_number) != 10):\n    return False\n\n  #Check each digit is a number\n  for digit in phone_number:\n    if not digit.isdigit():\n      return False\n\n  #Check the area code is valid\n  area_code = phone_number[0:3]\n  valid_area_codes = [\"201\", \"212\", \"203\", \"202\", \"205\"]\n  if area_code not in valid_area_codes:\n    return False\n\n  #All tests passed\n  return True\n\nprint(check_phone_number('212-555-0000'))\n\nOutput:\nTrue", "category": "Python"}, {"instruction": "Design a Python class to represent geometric shapes.", "input": "", "output": "class GeometricShape:\n\n    def __init__(self, sides):\n        self.sides = sides\n\n    def area(self):\n        if self.sides == 3:\n            return ((self.sides[0] + self.sides[1] + self.sides[2]) / 2)\n        else:\n            return 0", "category": "Python"}, {"instruction": "Create a function in Julia to calculate the Median of an array.", "input": "arr = [1, 2, 2, 3, 6, 8]", "output": "function median(arr)\n  sorted_arr = sort(arr)\n  n = length(sorted_arr)\n  if n % 2 == 0\n      return (sorted_arr[n \u00f7 2] + sorted_arr[(n \u00f7 2) + 1]) / 2\n  else\n      return sorted_arr[(n + 1) \u00f7 2]\n  end\nend", "category": "Python"}, {"instruction": "Create a barplot using Matplotlib to display the given data.", "input": "Data: [2, 3, 5, 7, 9]", "output": "import matplotlib.pyplot as plt \n  \n# Creating the data \ndata = [2, 3, 5, 7, 9]  \n  \n# Creating the figure and axis \nfig, ax = plt.subplots()  \n  \n# plotting the barplot \nax.bar(range(len(data)), data)  \n  \n# show the plot \nplt.show()", "category": "Python"}, {"instruction": "Make a POST request to the same server and download the response content", "input": "", "output": "import requests\n \nurl = 'http://example.com/'\ndata = {'key': 'value'}\n \nresponse = requests.post(url, data=data)\n \n#Download response content\nwith open('response_content.txt', 'wb') as f:\n    f.write(response.content)", "category": "Python"}, {"instruction": "Create an algorithm to implement a binary search.", "input": "", "output": "def binary_search(arr, x): \n  \n    # find the leftmost and rightmost point \n    l = 0\n    r = len(arr) - 1\n      \n    while l <= r: \n  \n        mid = l + (r - l)//2\n  \n        # if element is present at the middle  \n        if arr[mid] == x: \n            return mid \n  \n        # if element is smaller than mid,  \n        # then it can only be present  \n        # in left subarray \n        elif arr[mid] < x: \n            l = mid + 1\n  \n        # else the element can only  \n        # be present in right subarray \n        else: \n            r = mid - 1\n      \n    # if we reach here,  \n    # then the element was not present \n    return -1", "category": "Python"}, {"instruction": "Generate the reCAPTCHA API key.", "input": "", "output": "Go to the Google reCAPTCHA admin page, sign up for an API key, and register the domain for your website. Once registered, you will receive a code for your API key.", "category": "Python"}, {"instruction": "Create a function to calculate the total cost of a shopping cart, given the price and the quantity of each item.", "input": "Item \tPrice \tQuantity\nApple \t2$ \t\t2\nOrange \t3$ \t\t5\nBanana \t1$ \t\t1", "output": "def total_cost(items):\n  total = 0\n  for item in items:\n    total += item['price'] * item['quantity']\n  return total\n  \nitems = [\n  { 'item': 'Apple', 'price': 2, 'quantity': 2 },\n  { 'item': 'Orange', 'price': 3, 'quantity': 5 },\n  { 'item': 'Banana', 'price': 1, 'quantity': 1 }\n]\ntotal = total_cost(items)\nprint(total)", "category": "Python"}, {"instruction": "You are given an array of strings. Write a Python script to sort the array in alphabetical order.", "input": "\"ball\", \"cat\", \"dog\", \"apple\"", "output": "arr = [\"ball\", \"cat\", \"dog\", \"apple\"]\narr.sort()\nprint(arr)", "category": "Python"}, {"instruction": "You are given an array of numbers. Create a function to check if the array contains duplicate values.", "input": "11, 15, 40, 14, 11", "output": "def contains_duplicates(arr):\n  unique_elements = set(arr)\n  if len(arr) != len(unique_elements):\n    return True\n  else:\n    return False", "category": "Python"}, {"instruction": "Make a function that accepts 2 numbers and return the largest one.", "input": "2, 3", "output": "def largest(x, y):\n  if (x > y):\n    return x\n  else:\n    return y", "category": "Python"}, {"instruction": "Write a Python program to check if a string contains any special characters.", "input": "CS 1501", "output": "def has_special_characters(s):\n  special_characters = '!@#$%^&*()_+-=[]{};:,.<>/?'\n  for char in special_characters:\n    if char in s:\n      return True\n  return False", "category": "Python"}, {"instruction": "Create a function in Python that takes two parameters and calculates the Employee Bonus depending on the hours worked.", "input": "hours - 14\nhourly_rate - 17", "output": "def employee_bonus(hours, hourly_rate):\n    if hours <= 0:\n        return 0\n\n    # Calculate the total amount\n    total_amount = hours * hourly_rate\n    \n    # Calculate the bonus with 10%\n    bonus = total_amount * 0.1\n\n    return bonus", "category": "Python"}, {"instruction": "Create optional command line parameters in a Python script.", "input": "", "output": "import argparse\n\nparser = argparse.ArgumentParser()\nparser.add_argument('-i', '--inputfile', type=str,help='input file')\nparser.add_argument('-o', '--outputfile', type=str,help='output file')\nparser.add_argument('-d', '--debug', action='store_true',help='enable debugging')\nargs = parser.parse_args()", "category": "Python"}, {"instruction": "Create an Angular app with a login page and registration page.", "input": "", "output": "The Angular app will include a login and a registration page. The login page will have an input field for the user to enter their username and password. The registration page will have input fields for the user to enter their username, password, and email address. The app will also contain a service to store the user registration data and a guard to protect the registration page from unauthorized access.", "category": "Python"}, {"instruction": "Train a recursive neural network to classify whether a sentence is positive or negative.", "input": "", "output": "import tensorflow as tf\n\n# Setup the RNN\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(input_dim=vocab_size, output_dim=embedding_dim),\n    tf.keras.layers.GRU(32, return_sequences=True),\n    tf.keras.layers.Dense(2, activation='softmax')\n])\n\n# Compile and fit\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n              \nmodel.fit(x_train, y_train, epochs=5)", "category": "Python"}, {"instruction": "Compute the entropy of a given probability distribution.", "input": "Distribution: [2/9, 3/9, 4/9]", "output": "import math\n\n# Calculates the entropy of the given distribution\nentropy = -sum([p * math.log2(p) for p in distribution])", "category": "Python"}, {"instruction": "Find out the number of occurrences of a vowels a, e, i, o, or u in the given string.", "input": "String: The quick brown fox", "output": "var count = 0\nlet vowels = \"aeiou\"\nfor c in string {\n  if vowels.contains(c) {\n    count += 1\n  }\n}\nprint(count)\n// Output: 4", "category": "Python"}, {"instruction": "You need to create a Python function to remove duplicate elements from a given list.", "input": "[11,46,70,23, 11, 33, 46]", "output": "def remove_duplicates(numbers):\n    s = set()\n    for n in numbers:\n        if n not in s:\n            s.add(n)\n    return list(s)", "category": "Python"}, {"instruction": "Analyze this text using spaCy.", "input": "Text: Modern technologies are revolutionizing the way we live and work.", "output": "import spacy\n\nnlp = spacy.load(\"en_core_web_sm\")\n\ndoc = nlp(\"Modern technologies are revolutionizing the way we live and work.\")\n\nfor token in doc:\n    print(token.text, token.lemma_, token.pos_, token.tag_, token.dep_,\n            token.shape_, token.is_alpha, token.is_stop)", "category": "Python"}, {"instruction": "Preprocess this data using Python.", "input": "Data:\n[\n  {\n    \"A\": 1,\n    \"B\": 2,\n    \"C\": 3\n  },\n  {\n    \"A\": 2,\n    \"B\": 3,\n    \"C\": 5\n  },\n  {\n    \"A\": 4,\n    \"B\": 1,\n    \"C\": 9\n  }\n]", "output": "import pandas as pd \n\ndata = [\n  {\n    \"A\": 1,\n    \"B\": 2,\n    \"C\": 3\n  },\n  {\n    \"A\": 2,\n    \"B\": 3,\n    \"C\": 5\n  },\n  {\n    \"A\": 4,\n    \"B\": 1,\n    \"C\": 9\n  }\n]\n\ndf = pd.DataFrame(data)\n\npreprocessed_data = df.apply(lambda x: (x - x.mean()) / x.std())", "category": "Python"}, {"instruction": "Write an if-else statement in Python to print \"Grater than 10\" if a number is greater than 10, and \"Less than 10\" if a number is less than 10.", "input": "Number: 8", "output": "if 8 > 10:\n  print(\"Grater than 10\")\nelse:\n  print(\"Less than 10\")", "category": "Python"}, {"instruction": "Convert this Ruby code to Python.", "input": "def add_two_numbers(a, b)\n  a + b \nend", "output": "def add_two_numbers(a, b):\n  return a + b", "category": "Python"}, {"instruction": "Write an algorithm to insert a new element in a given sorted array.", "input": "", "output": "def insert(arr, num): \n    # start from the rightmost element\n    i = len(arr) - 1\n    while ( i >= 0 and arr[i] > num):\n        arr[i+1] = arr[i]\n        i -= 1\n  \n    arr[i+1] = num", "category": "Python"}, {"instruction": "Write a Python script to take two list and output the common elements of the given lists.", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]", "output": "def findCommon(list1,list2): \n    common = [] \n      \n    # traverse through elements of list1 \n    for x in list1: \n          \n        # traverse through elements of list2 \n        for y in list2: \n              \n            # if common element is found append to list \n            if x == y: \n                common.append(x) \n    return common", "category": "Python"}, {"instruction": "Get a user input and check if the input is a palindrome.", "input": "", "output": "def is_palindrome(user_input):\n    rev_input = user_input[::-1]\n    \n    if (rev_input == user_input):\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Write an algorithm to find the smallest missing positive number from a given list of integers.", "input": "[3, 4, -10, -2, 9, 8, 1]", "output": "def findSmallestMissing(arr):\n    smallest_missing = 1\n    \n    for num in arr:\n        if (num == smallest_missing):\n           smallest_missing += 1\n    \n    return smallest_missing", "category": "Python"}, {"instruction": "Create a function that generates a series of Fibonacci numbers up to a certain number of items.", "input": "", "output": "def generate_fibonacci(n):\n    \"\"\"\n    Generates a series of Fibonacci numbers up to a certain number of items.\n    \"\"\"\n    fib = [0, 1]\n \n    if n < 2:\n        return fib[:n]\n \n    for i in range(2, n):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib", "category": "Python"}, {"instruction": "Write a python program to get all possible permutations of a given set of characters.", "input": "", "output": "def get_permutations(s):\n  \"\"\"Get all possible permutations of a given set of characters.\"\"\"\n  n = len(s)\n  result = []\n  def recurse(i):\n    if i == n:\n      result.append(''.join(s))\n      return\n    for j in range(i, n):\n      s[i], s[j] = s[j], s[i]\n      recurse(i+1) # recurse over each character\n      s[i], s[j] = s[j], s[i] # backtrack\n  recurse(0)\n  return result", "category": "Python"}, {"instruction": "Using inspect module to count the number of lines of code in a module.", "input": "", "output": "def get_module_lines(module):\n    \"\"\"\n    Returns the number of lines of code in a given module,\n    using the inspect module.\n    \"\"\"\n    import inspect\n    sourcelines = inspect.getsourcelines(module)\n    line_count = len(sourcelines[0])\n    return line_count", "category": "Python"}]
[{"instruction": "Write a Python script that extracts the name and age of all customers from the customer table in a database.", "input": "", "output": "import MySQLdb \n\n# connect to database\ndb = MySQLdb.connect(host=\"localhost\", user=\"user\", passwd=\"password\", db=\"customers\")  \n\n# create a cursor \ncursor = db.cursor()\n\n# execute SQL query \ncursor.execute(\"SELECT name, age FROM customers\")  \n\n# fetch the rows \nrows = cursor.fetchall() \n\n# traverse over the results \nfor row in rows: \n    name = row[0] \n    age = row[1] \n    print(\"Name = {}, Age = {}\".format(name, age))", "category": "Python"}, {"instruction": "Create a function that takes a list of strings and combines them together into one string", "input": "[\"This\", \"is\", \"a\", \"list\", \"of\", \"strings\"]", "output": "def combineStrings(strings):\n    combined_string = \"\"\n    for string in strings:\n        combined_string += string + \" \"\n    return combined_string\n\ncombined_string = combineStrings([\"This\", \"is\", \"a\", \"list\", \"of\", \"strings\"])", "category": "Python"}, {"instruction": "Write a function in Python to calculate the length and breadth of a given rectangle.", "input": "", "output": "def calculate_rectangle_length_and_breadth(x, y):\n    length = x\n    breadth = y\n    return length, breadth", "category": "Python"}, {"instruction": "Generate three different sorting algorithms for a list of integers.", "input": "", "output": "# Bubble Sort algorithm\ndef bubble_sort(lst):\n    for i in range(len(lst)-1):\n        for j in range(len(lst)-1-i):\n            if lst[j] > lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst\n\n# Insertion Sort algorithm\ndef insertion_sort(lst):\n    for i in range(1, len(lst)):\n        key = lst[i]\n        j = i - 1\n        while j >= 0 and key < lst[j]:\n            lst[j+1] = lst[j]\n            j -= 1\n        lst[j+1] = key\n    return lst\n\n# Heap Sort algorithm\ndef heap_sort(lst):\n    # build max heap\n    for i in range(len(lst) // 2 - 1, -1, -1):\n        heapify(lst, len(lst), i)\n   \n    # extract elements\n    for i in range(len(lst) - 1, 0, -1):\n        lst[i], lst[0] = lst[0], lst[i]\n        heapify(lst, i, 0)\n    return lst\n\ndef heapify(lst, n, i):\n    # Find largest among root, left child and right child\n    largest = i \n    l = 2 * i + 1\n    r = 2 * i + 2 \n  \n    if l < n and lst[i] < lst[l]:\n        largest = l\n  \n    if r < n and lst[largest] < lst[r]:\n        largest = r\n  \n    # change root, if needed\n    if largest != i:\n        lst[i], lst[largest] = lst[largest], lst[i]\n        heapify(lst, n, largest)", "category": "Python"}, {"instruction": "Write a code block to return a random value from a given list", "input": "[1, 4, 8, 12]", "output": "#Return a random value from a given list\nimport random\n\ndef get_random_value(lst):\n    n = random.randint(0, len(lst) - 1)\n    return lst[n]\n\ntest_list = [1, 4, 8, 12]\nrandom_value = get_random_value(test_list)\nprint('Random value:', random_value)", "category": "Python"}, {"instruction": "Create a method to calculate the amount of tax to be paid based on the inputs of income and country.", "input": "income = 20000, country = Ireland", "output": "#Calculate the applicable tax amount \ndef get_tax_amount(income, country):\n    #Country specific logic\n    if country == 'Ireland':\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.15\n    #Calulate tax amount\n    tax_amount = income * tax_rate\n    return tax_amount\nif __name__ == '__main__':\n    income = 20000\n    country = 'Ireland'\n    tax_amount = get_tax_amount(income, country)\n    print('Tax amount:', tax_amount)", "category": "Python"}, {"instruction": "Convert the following SQL statement into a Python def() and write the code.", "input": "SELECT order_id, order_time, subtotal FROM orders WHERE order_time > NOW()", "output": "def get_order_info(order_time):\n    query = \"SELECT order_id, order_time, subtotal FROM orders WHERE order_time > %s\"\n    cursor.execute(query, (order_time, ))\n    rows = cursor.fetchall()\n    return rows", "category": "Python"}, {"instruction": "What command should be added to the function to make sure the input list is sorted?", "input": "def remove_duplicates(list):\n    # TODO: add command\n    new_list = []\n    for element in list:\n        if element not in new_list:\n            new_list.append(element)\n    return new_list", "output": "def remove_duplicates(list):\n    # sort the list\n    list.sort()\n    new_list = []\n    for element in list:\n        if element not in new_list:\n            new_list.append(element)\n    return new_list", "category": "Python"}, {"instruction": "Construct a class in Python that contains three variables and two methods.", "input": "", "output": "class myClass():\n    def __init__(self):\n        self.var1 = \"Hello\"\n        self.var2 = \"World!\"\n        self.var3 = 5\n    def method1(self):\n        print(self.var1)\n    def method2(self):\n        print(self.var2)", "category": "Python"}, {"instruction": "Construct a for loop in Python to find the sum of all the the numbers between 15 and 30 (inclusive).", "input": "", "output": "total_sum = 0 \nfor num in range(15, 31): \n    total_sum += num \nprint(total_sum)", "category": "Python"}, {"instruction": "Create a function that prints a provided message 3 times", "input": "message = \"Hello World!\"", "output": "def print_message(message): \n for i in range(3): \n  print(message)", "category": "Python"}, {"instruction": "Create a new array from the given array by replacing all the odd numbers with 0.", "input": "arr = [3, 5, 7, 9, 1]", "output": "arr = [3, 5, 7, 9, 1]\n\nnew_arr = [num if num % 2 == 0 else 0 for num in arr]\nprint(new_arr)", "category": "Python"}, {"instruction": "Extract all the words that begin with 's' from the given list.", "input": "list_of_strings = ['stack', 'super', 'stone', 'sit']", "output": "list_of_strings = ['stack', 'super', 'stone', 'sit']\n\nwords_start_s = [word for word in list_of_strings if word.startswith('s')]\nprint(words_start_s)", "category": "Python"}, {"instruction": "Generate a new array and store only elements that are greater than 5.", "input": "arr = [3, 9, 8, 1, 6, 4]", "output": "arr = [3, 9, 8, 1, 6, 4]\n\nnew_arr = [num for num in arr if num > 5]\nprint(new_arr)", "category": "Python"}, {"instruction": "Re-write this algorithm in pseudo-code.", "input": "def checkEven(number): \n\tif(number % 2 == 0): \n\t\treturn True\n\telse: \n\t\treturn False", "output": "function checkEven(number)\n\tif number modulo 2 = 0\n\t\treturn true\n\telse\n\t\treturn false\nend function", "category": "Python"}, {"instruction": "Use a random number generator to generate random numbers between 1 and 10.", "input": "", "output": "import random\n\ndef random_numbers():\n    for _ in range(10):\n        num = random.randint(1, 10)\n        print(num)\n\nrandom_numbers()", "category": "Python"}, {"instruction": "Create a function to decrypt an encrypted string.", "input": "", "output": "def decrypt(enc_string):\n    s = 0\n    decrypted = ''\n \n    for i in range(len(enc_string)):\n        s += ord(enc_string[i])\n        decrypted += chr(s)\n \n    return decrypted", "category": "Python"}, {"instruction": "Explain the differences between a multi-threaded application and a multi-process application.", "input": "", "output": "A multi-threaded application is an application that uses multiple threads of execution to execute different tasks simultaneously. All threads share the same address space, so multiple threads can access the same data in memory. This provides a more optimized use of resources, as one thread does not need to wait for another thread to finish before accessing the same data.\n\nA multi-process application is an application that uses multiple processes to execute different tasks simultaneously. Each process has its own separate address space, meaning the processes do not share the same data in memory. This means that the processes can\u2019t directly access data from each other, and communication between processes must be established through inter-process communication mechanisms like pipes, sockets, and message queues.", "category": "Python"}, {"instruction": "Write a loop that iterates over the characters in a string, and if the character is an 'o', print the character.", "input": "\"Hello World\"", "output": "for char in \"Hello World\":\n    if char == 'o':\n        print(char)", "category": "Python"}, {"instruction": "Create a simple calculator program in Python.", "input": "", "output": "def add(num1, num2): \n  return num1 + num2 \n\ndef subtract(num1, num2): \n  return num1 - num2 \n\ndef multiply(num1, num2): \n  return num1 * num2 \n\ndef divide(num1, num2): \n  return num1 / num2 \n\n# Infinite loop until user chooses to exit \nwhile True: \n    print(\"Select operation:\") \n    print(\"1. Add\") \n    print(\"2. Subtract\") \n    print(\"3. Multiply\") \n    print(\"4. Divide\")\n    print(\"5. Exit\") \n    choice = input(\"Enter choice (1/2/3/4):\") \n  \n    # Check if choice is one of the four options \n    if choice in ('1', '2', '3', '4', '5'): \n        num1 = float(input(\"Enter first number: \")) \n        num2 = float(input(\"Enter second number: \")) \n  \n        if choice == '1': \n            print(num1, \"+\", num2, \"=\", add(num1, num2)) \n\n        elif choice == '2': \n            print(num1, \"-\", num2, \"=\", subtract(num1, num2)) \n  \n        elif choice == '3': \n            print(num1, \"*\", num2, \"=\", multiply(num1, num2)) \n\n        elif choice == '4': \n            print(num1, \"/\", num2, \"=\", divide(num1, num2))\n        elif choice == '5':\n            break\n        else: \n            print(\"Invalid Input\") \n    else: \n        print(\"Invalid Input\")", "category": "Python"}, {"instruction": "Fix this indentation error in the following Python code", "input": "def double(number):\n return number * 2", "output": "def double(number):\n    return number * 2", "category": "Python"}, {"instruction": "Write a code to find the maximum value in a numeric array using recursion.", "input": "array = [1, -2, 3, -4, 5]", "output": "def find_max(arr): \n  #base case \n  if len(arr) == 1: \n      return arr[0] \n  else: \n      max_n = find_max(arr[1:]) \n      #compare the maximum element with the first element of the array \n      if arr[0] > max_n: \n          return arr[0] \n      else: \n          return max_n \n  \n# Print maximum value in the array \nprint(find_max(array)) \n\n#output \n5", "category": "Python"}, {"instruction": "Summarize the features of the Python pandas library.", "input": "", "output": "Pandas is a Python library used for data manipulation and analysis. It provides an efficient and flexible data structure for labeled and relational data called DataFrame, and operations for groupby aggregation, merging, joining, reshaping, and other manipulations. It also offers statistical functions for descriptive statistics, optimization, plotting, and visualization. Finally, pandas is designed to be fast and efficient, with powerful options for indexing, handling missing data, time-series, and automatic conversion of data.", "category": "Python"}, {"instruction": "Generate a Python Fibonacci sequence of length n", "input": "n = 7", "output": "def fibonacci_sequence(n): \n    nums = []\n    a, b = 0,1\n    for i in range(n): \n        nums.append(a)\n        a, b = b, a + b \n    return nums\n\nprint(fibonacci_sequence(7))", "category": "Python"}, {"instruction": "Suggest two ways to loop through a python dictionary", "input": "", "output": "1. Using for loop: \n\nfor key, value in dict.items(): \n    # Do something with key and value\n\n2. Using while loop:\n\nkeys = list(dict.keys()) \ni = 0\nwhile i < len(keys):\n    key = keys[i] \n    value = dict[key]\n    # Do something with key and value\n    i += 1", "category": "Python"}, {"instruction": "Create a for loop to output the square roots of the numbers between 0 and 10 using the math library.", "input": "", "output": "import math\n\nfor i in range(0,11):\n    print(math.sqrt(i))", "category": "Python"}, {"instruction": "Create two functions to check if a given list contains a specific element.", "input": "list = [4, 1, 6, 9, 8]\nitem = 8", "output": "def check_list(lst, item):\n    return item in lst\n\ndef check_list_version2(lst, item):\n    for x in lst:\n        if x == item: \n            return True\n    return False", "category": "Python"}, {"instruction": "Write a Python program to count how many times a given element appears in the list.", "input": "my_list = [1, 2, 5, 4, 2, 1, 5]", "output": "my_list = [1, 2, 5, 4, 2, 1, 5]\ncount = 0\nfor i in my_list:\n  if i == 5:\n    count += 1\nprint(count) #2", "category": "Python"}, {"instruction": "Read the given Python code and generate the output for the following input.", "input": "my_list = range(1, 11)", "output": "my_list = range(1, 11)\noutput = 0\nfor i in my_list:\n output += i\nprint(output) #55", "category": "Python"}, {"instruction": "Write a code snippet to compute the average of a set of integers.", "input": "[3, 7, 11, 15]", "output": "def avg(arr): \n    sum = 0 \n    for num in arr:\n        sum += num \n    return sum/len(arr)  \n  \nnumbers = [3, 7, 11, 15]\naverage = avg(numbers) \nprint(\"Average of the numbers:\",average)  // Output: 9.5", "category": "Python"}, {"instruction": "Implement a Vue component that displays a table layout.", "input": "", "output": "The component can be implemented in the following way: \n\n<template> \n  <div> \n    <table> \n      <tr v-for=\"row in rows\"> \n        <td v-for=\"item in row\">{{item}}</td> \n      </tr> \n    </table>\n  </div>\n</template> \n\n<script> \nexport default { \n  name: 'TableComponent', \n  props: { \n    rows: { \n      type: Array \n    } \n  } \n} \n</script>", "category": "Python"}, {"instruction": "Design a web scraper in Python to extract the text content from Wikipedia articles.", "input": "", "output": "The web scraper can be designed using the Python library BeautifulSoup. The scraper can take a url of a wiki article as an argument and extract the text content using the method find_all('p'). The text content of the article can then be extracted using the get_text() method.", "category": "Python"}, {"instruction": "Write a python program to create a class called cube.", "input": "", "output": "class Cube:\n    def __init__(self, length, width, height):\n        self.length = length\n        self.width = width\n        self.height = height\n\n    def calculate_volume(self):\n        return self.length * self.width * self.height", "category": "Python"}, {"instruction": "Create code that given two linked lists, determine if they intersect", "input": "Two linked lists: list1 = [3, 7, 8, 10] and list2 = [99, 1, 8, 10]", "output": "def are_lists_intersect(list1, list2): \n  \n    # Set pointer to head node \n    temp1 = list1 \n    temp2 = list2 \n  \n    # Get lengths \n    list1_length = 0\n    list2_length = 0\n  \n    # Count length for each list \n    while (temp1): \n        list1_length += 1\n        temp1 = temp1.next\n  \n    while (temp2): \n        list2_length += 1\n        temp2 = temp2.next\n  \n    # Store longer list in tem1 \n    if list1_length > list2_length: \n        temp1 = list1 \n        temp2 = list2 \n    else: \n        temp1 = list2 \n        temp2 = list1 \n  \n    # Take difference to get number of nodes to \n    # traverse for longer list \n    diff = abs(list1_length - list2_length) \n  \n    # Move pointer for longer list to  \n    # difference node to get same position \n    # node in both list \n    for i in range(diff): \n        temp1 = temp1.next\n  \n    # Move all pointer together till they meet \n    while(temp1 and temp2): \n        if (temp1 == temp2): \n            return True\n  \n        temp1 = temp1.next\n        temp2 = temp2.next\n  \n    # Return false if no common node found \n    return False", "category": "Python"}, {"instruction": "Edit this code so that it can marshall a json object", "input": "import json\ndata = {\n    \"name\": \"John Doe\",\n    \"age\": 30\n}", "output": "import json\n\ndata = {\n    \"name\": \"John Doe\",\n    \"age\": 30\n}\n\nmarshalled_data = json.dumps(data)", "category": "Python"}, {"instruction": "Create code that will reverse the order of elements in this list.", "input": "list = [1, 2, 3, 4]", "output": "def reverse_list(list): \n    start = 0\n    end = len(list) - 1\n    while start < end: \n        list[start], list[end] = list[end], list[start] \n        start += 1\n        end -= 1\n    return list", "category": "Python"}, {"instruction": "Explain how to find the minimum value of a list.", "input": "", "output": "We can use the built-in min() function to find the minimum value in a list. This function takes an iterable such as a list, tuple or set as an argument and returns the smallest item in the iterable. For example, if given a list of numbers, the min() function would return the number with the lowest value.\n\nExample: \n\nmy_list = [3, 6, 2, 8, 4]\nmin_val = min(my_list)\nprint(min_val)  # 2", "category": "Python"}, {"instruction": "How can we use a list comprehension to make a copy of a given list?", "input": "", "output": "list_copy = [x for x in given_list]", "category": "Python"}, {"instruction": "Generate a two-dimensional array of 3 rows and 3 columns with all elements equal to 1.", "input": "", "output": "import numpy as np\n\narr = np.ones((3,3))\nprint(arr)", "category": "Python"}, {"instruction": "Write a code in Python for comparing two strings without using a built-in function.", "input": "string1 = \"apple\"\nstring2 = \"orange\"", "output": "string1 = \"apple\" \nstring2 = \"orange\" \nlength = min(len(string1), len(string2))\n\nfor i in range(length):\n  if string1[i] != string2[i]:\n    result = string1[i] < string2[i]\n    break\n\nif result == True:\n  print(string1 + \" follows \" + string2 + \" alphabetically.\")\nelse:\n  print(string2 + \" follows \" + string1 + \" alphabetically.\")", "category": "Python"}, {"instruction": "Write a function that takes two arguments, an array arr and a value x, and returns the number of times x appears in the array arr.", "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 5]\nx = 5", "output": "def count_val(arr, x):\n    count = 0 \n    for i in arr:\n        if i == x:\n            count += 1\n    return count\n\ncount_val(arr, x)", "category": "Python"}, {"instruction": "Generate a random password of 16 characters that includes a mix of alphanumeric characters and punctuation.", "input": "", "output": "import string\nimport random\n\ndef random_password(str_len):\n    alphanumeric = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(alphanumeric) for i in range(str_len))\n\nrandom_password(16)", "category": "Python"}, {"instruction": "Declare a variable named 'items' and assign it a list containing the elements \u2018pen\u2019, \u2018paper\u2019 and \u2018pencil\u2019 in Python.", "input": "", "output": "items = ['pen', 'paper', 'pencil']", "category": "Python"}, {"instruction": "Change the following code to implement the Observer Design Pattern in Python.", "input": "class Publisher: \n    def __init__(self): \n        self.observers = [] \n  \n    def add(self, observer): \n        if observer not in self.observers: \n            self.observers.append(observer) \n        else: \n            print('Failed to add: {}'.format(observer)) \n  \n    def remove(self): \n        self.observers.remove(observer) \n  \n    def notifyAll(self, *args, **kwargs): \n        for observer in self.observers: \n            observer.notify(self, *args, **kwargs)", "output": "class Publisher: \n\n    def __init__(self): \n        self.observers = [] \n        self.state = None\n    \n    def getState(self): \n        return self.state \n\n    def setState(self, state): \n        self.state = state \n        self.notifyAll() \n\n    def add(self, observer): \n        if observer not in self.observers: \n            self.observers.append(observer) \n        else: \n            print('Failed to add: {}'.format(observer)) \n  \n    def remove(self): \n        self.observers.remove(observer) \n  \n    def notifyAll(self, *args, **kwargs): \n        for observer in self.observers: \n            if args and kwargs: \n                observer.notify(self, *args, **kwargs) \n            else: \n                observer.notify(self)", "category": "Python"}, {"instruction": "Modify the following code to kill a thread after 10 seconds.", "input": "import threading \nfrom time import sleep\n  \ndef worker(): \n    try: \n        while True: \n            print(\"Thread\") \n            sleep(1) \n\nthreads = [] \nfor x in range(40): \n    t = threading.Thread(target=worker) \n    threads.append(t) \n    t.start()", "output": "import threading \nimport signal \nfrom time import sleep \n\ndef exitThread(signum, frame): \n    raise SystemExit \n\ndef worker(): \n    try: \n        signal.signal(signal.SIGALRM, exitThread) \n        signal.alarm(10) \n        while True: \n            print(\"Thread\")  \n            sleep(1) \n\nthreads = [] \nfor x in range(40): \n    t = threading.Thread(target=worker) \n    threads.append(t) \n    t.start()", "category": "Python"}, {"instruction": "Compact a given list into a dictionary with unique items as keys.", "input": "given_list = [1,1,1,2,2,3]", "output": "uniques = {}\nfor item in given_list:\n     if item not in uniques:\n        uniques[item] = 1\n     else:\n        uniques[item] += 1\n\n# result: {1: 3, 2: 2, 3: 1}", "category": "Python"}, {"instruction": "Implement the merge sort algorithm to sort a given array ascending.", "input": "given_array = [7,9,3,8,1]", "output": "def merge_sort(arr):\n    if len(arr) > 1: \n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n\n        #calling merge sort function on left and right arrays\n        merge_sort(L) \n        merge_sort(R) \n\n        i = j = k = 0\n        # Copying data to temp arrays L[] and R[] \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                arr[k] = L[i] \n                i+=1\n            else: \n                arr[k] = R[j] \n                j+=1\n            k+=1\n  \n        # Checking if any element was left \n        while i < len(L): \n            arr[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            arr[k] = R[j] \n            j+=1\n            k+=1\n\nar =[7,9,3,8,1]\nmerge_sort(ar)\n\n# printing sorted array \nprint (ar)", "category": "Python"}, {"instruction": "Generate a gradient descent algorithm to optimize a cost function.", "input": "", "output": "def gradient_descent(cost_function, theta, eta, tolerance):\n    cost = cost_function(theta)\n    diff = tolerance + 1\n    while diff > tolerance:\n        theta_updated = theta\n        for i in range(len(theta)):\n            theta[i] = theta[i] - eta * cost_function.gradient_wrt_theta(theta, i)\n            diff = sum((theta_updated[i] - theta[i])**2 for i in range(len(theta)))\n    return theta", "category": "Python"}, {"instruction": "Get the top ten most used words within a string.", "input": "", "output": "import collections\n\ndef get_most_used_words(string):\n    # Tokenize the string\n    words = string.split()\n\n    # Calculate frequency of each word\n    freq = {}\n    for word in words:\n       if word in freq:\n           freq[word] += 1\n       else:\n           freq[word] = 1\n\n    # Sort the words in descending order of frequency\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n\n    # Get the top ten most used words\n    most_used_words = [word for word, count in sorted_freq[:10]]\n\n    return most_used_words", "category": "Python"}, {"instruction": "Make a REST API call to get the latest version of Python.", "input": "", "output": "import requests\n\ndef get_latest_python_version():\n    url = 'https://www.python.org/ftp/python/'\n    response = requests.get(url)\n    \n    if response.status_code == 200:\n        html = response.text\n        start_index = html.find('<a href=\"')\n        \n        if start_index != -1:\n            end_index = html.find('/\">', start_index + 1)\n\n            if end_index != -1:\n                version = html[start_index + 9:end_index]\n                return version\n\n    return None", "category": "Python"}, {"instruction": "Create a user interface for a customer order system.", "input": "", "output": "import tkinter\n\n# create the main window \nroot = Tk() \n  \n# create the user interface \nroot.title(\"Order System\") \nroot.geometry(\"400x200\") \n  \n# create widgets \nLabel(root, text = 'Name:').grid(row = 0, column = 0, padx = 10, pady = 10) \nEntry(root).grid(row = 0, column = 1, columnspan = 2, padx = 10, pady = 10) \nLabel(root, text = 'Email address:').grid(row = 1, column = 0, padx = 10, pady = 10) \nEntry(root).grid(row = 1, column = 1, columnspan = 2, padx = 10, pady = 10) \nButton(root, text = 'Submit').grid(row = 2, column = 1, padx = 10, pady = 10) \nButton(root, text = 'Cancel').grid(row = 2, column = 2, padx = 10, pady = 10) \n\n# enter main event loop \nroot.mainloop()", "category": "Python"}, {"instruction": "Write a code snippet to store the output of an API call into a variable.", "input": "url = 'http://example.com/api/v1/data'", "output": "import requests\n\nurl = 'http://example.com/api/v1/data'\nresponse = requests.get(url)\ndata = response.json()", "category": "Python"}, {"instruction": "Create a function to build a queue (i.e., a sequence of objects)", "input": "", "output": "class Queue: \n      \n    def __init__(self): \n        self.items = [] \n  \n    def enqueue(self, item): \n        self.items.insert(0, item) \n  \n    def dequeue(self): \n        if not self.is_empty(): \n            return self.items.pop() \n  \n    def is_empty(self): \n        return len(self.items) == 0 \n  \n    def peek(self): \n        if not self.is_empty(): \n            return self.items[-1].value \n  \n    def __len__(self): \n        return self.size() \n  \n    def size(self): \n        return len(self.items)", "category": "Python"}, {"instruction": "Create code that given a stack (i.e., a sequence of objects), returns the reversed stack", "input": "stack = [1, 2, 3, 4]", "output": "def reverse_stack(stack): \n\tif len(stack) == 0: \n\t\treturn \n\t\n\t# Pop the first element from the stack \n\ttemp = stack.pop()\n\n\t# Call the reverse_stack method on the remaining elements \n\treverse_stack(stack) \n\n\t# Push the poped element to the bottom of the stack \n\tinsert_at_bottom(stack, temp) \n\n\treturn stack\n\ndef insert_at_bottom(stack, item): \n\tif len(stack) == 0: \n\t\tstack.append(item) \n\t\n\telse: \n\t\ttemp = stack.pop() \n\t\tinsert_at_bottom(stack, item) \n\t\tstack.append(temp)", "category": "Python"}, {"instruction": "Create a function that will add two numbers (represented as linked lists)", "input": "Linked lists: list1 = [2, 4, 3] and list2 = [5, 6, 4]", "output": "def add_numbers(list1, list2): \n    start = result = ListNode(0)\n    carry = 0\n\n    # Iterate both Lists until the end \n    while list1 or list2 or carry: \n        val1 = 0\n        val2 = 0\n\n        # If l1 is not None, add data\n        if list1: \n            val1 = list1.data \n            list1 = list1.next \n\n        # If l2 is not None, add data\n        if list2: \n            val2 = list2.data \n            list2 = list2.next \n\n        # Calculate sum\n        total = val1 + val2 + carry \n\n        # Update result list present node\n        result.next = ListNode(total % 10) \n        result = result.next \n        carry = total // 10\n  \n    # Return head node of the result list \n    return start.next", "category": "Python"}, {"instruction": "Create code that given two binary search trees, determine if they are identical", "input": "Two Binary Search Trees: Tree1 and Tree2", "output": "def are_identical(Tree1, Tree2): \n    # Both trees are empty \n    if Tree1==None and Tree2==None: \n        return True\n  \n    # If only one of them is empty \n    if (Tree1==None or Tree2==None): \n        return False\n  \n    # Both non-empty, compare the data and \n    # recur for left and right sub-tree \n    if (Tree1.data==Tree2.data and \n        are_identical(Tree1.left, Tree2.left)and\n        are_identical(Tree1.right, Tree2.right)): \n        return True \n    else: \n        return False", "category": "Python"}, {"instruction": "Create code to find the longest subarray with equal number of 0's and 1's", "input": "list = [0, 0, 1, 0, 1, 0, 0, 1]", "output": "def longest_subarray(arr): \n    # Stores index of previos zero \n    prev_zero = -1 \n  \n    # Stores index and length of longest subarray with equal 0 and 1 \n    max_len = 0\n    start_index = 0\n  \n    # Traverse the given array \n    for i in range(len(arr)): \n        # Update previous zero \n        if arr[i] == 0: \n            prev_zero = i \n  \n        # Calculate difference b/w current and previous zero \n        diff = i - prev_zero \n  \n        # Update max_len if required \n        if (diff > max_len): \n            max_len = diff \n            start_index = prev_zero + 1\n  \n    # Return longest sub-array \n    return arr[start_index:start_index + max_len]", "category": "Python"}, {"instruction": "Create code that, given a string, returns the longest permutation of the same character", "input": "str = \"abcccdef\"", "output": "def longest_consecutive_character(str):\n\t# Store character, length of longest permutation, and current length\n    max_char = str[0]\n    max_length = 1\n    cur_length = 1\n    \n    # Iterate over the string\n    for i in range(1, len(str)):\n        # If the characters are the same\n        if str[i] == str[i-1]:\n            cur_length += 1\n            \n            # Check if the current permutation is longest\n            if cur_length > max_length:\n                max_char = str[i]\n                max_length = cur_length\n        # Reset count if character changes\n        else: \n            cur_length = 1\n    \n    return max_char, max_length", "category": "Python"}, {"instruction": "Create a function that will find the maximum length of increasing subarray in a list", "input": "list = [2, 3, 3, 1, 4, 5, 8, 4]", "output": "def longest_increasing_subarray(arr):\n    max_length = 1\n    curr_length = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            curr_length += 1\n        else:\n            if curr_length > max_length:\n                max_length = curr_length\n            curr_length = 1\n    \n    if curr_length > max_length:\n        max_length = curr_length\n    \n    return max_length", "category": "Python"}, {"instruction": "Construct a switch-case statement to output \"Monthly\" if the user enters \"M\" to output \"Yearly\" if the user enters \"Y\", and \"Invalid\" if the user enters neither \"M\" nor \"Y\".", "input": "", "output": "def printOption(option):\nswitch(option):\n    case \"M\":\n        print(\"Monthly\")\n        break\n    case \"Y\":\n        print(\"Yearly\")\n        break\n    default:\n        print(\"Invalid\")", "category": "Python"}, {"instruction": "Write a code to find the maximum of three numbers using if else.", "input": "", "output": "def maximum_of_three(x, y, z): \n    if x > y and x > z: \n        max = x \n    elif y > x and y > z: \n        max = y \n    else: \n        max = z \n    return max", "category": "Python"}, {"instruction": "Generate a recursive function for the following task:", "input": "Given a list of integers, \"find the max element present in the list\".", "output": "def find_max(list):\n    # base condition\n    if len(list) == 1:\n        return list[0] \n    else:\n        # compare the current element to the next element\n        max_element = max(list[0], list[1])\n        # remove the compared element\n        list.pop(1)\n        # call the function on the remaining list\n        return find_max(list[:1] + [max_element] + list[1:])", "category": "Python"}, {"instruction": "You are passed an array and a value. Write a Python program to insert the value in the array at the end.", "input": "array = [1, 2, 3, 4], value = 7", "output": "array = [1, 2, 3, 4, 7]", "category": "Python"}, {"instruction": "Create a function that takes two numbers as an argument and compares them to find the highest number.", "input": "x = 5\ny = 8", "output": "def highest_number(num1, num2):\n  if num1 > num2:\n    return num1\n  else:\n    return num2\n\nhighest_number(x, y)   # returns 8", "category": "Python"}, {"instruction": "Write a code to find the maximum of 3 arguments.", "input": "", "output": "def find_max(a, b, c):\n    max_value = a\n    if b > max_value:\n        max_value = b\n    if c > max_value:\n        max_value = c\n    return max_value\n\nprint(find_max(1, 2, 3))  # Output: 3", "category": "Python"}, {"instruction": "What does the `filter()` method do in Python?", "input": "", "output": "The filter() method in Python takes in a function and a list as arguments. The function is called with all the items in the list and a new list is returned which contains items\nfor which the function evaluates to True.\nIt is typically used to filter out elements from a list based on a certain condition.", "category": "Python"}, {"instruction": "Create a FOR loop to print out the odd numbers between a given range.", "input": "min = 1, max = 10", "output": "\"\"\"\nCreate a FOR loop to print out the odd numbers between a given range\n\"\"\"\n\n# define the range\nmin = input[0]\nmax = input[1]\n\n# iterate through the range\nfor i in range(min, max+1):\n    # check for odd numbers\n    if i % 2 == 1:\n        print(i)", "category": "Python"}, {"instruction": "Design a linked list data structure.", "input": "", "output": "\"\"\"\nDesign a linked list data structure\n\"\"\"\n\nclass ListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def append(self, data):\n        new_node = ListNode(data)\n\n        if self.head is None:\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next is not None:\n                current = current.next\n            current.next = new_node\n\n    def search(self, target):\n        current = self.head\n        while current is not None:\n            if current.data == target:\n                return current\n            current = current.next\n        return None\n\n    def print_list(self):\n        current = self.head\n        while current is not None:\n            print(current.data)\n            current = current.next", "category": "Python"}, {"instruction": "Write a code to fetch the last 4 commits of a git repository.", "input": "user: 'rnyagah', repo: 'GPT-Evaluation'", "output": "\"\"\"\nWrite a code to fetch the last 4 commits of a git repository\n\"\"\"\n\nimport requests\n\nuser = 'rnyagah'\nrepo = 'GPT-Evaluation'\n\nurl = f'https://api.github.com/repos/{user}/{repo}/commits'\n\nresponse = requests.get(url)\ndata = response.json()\n\n# get the last 4 commits\ncommits = data[:4]\n\nfor commit in commits:\n    print(f'commit {commit[\"sha\"]}: {commit[\"commit\"][\"message\"]}')", "category": "Python"}, {"instruction": "Write a code to create a 3x3 matrix with all elements 1.", "input": "", "output": "#import numpy library\nimport numpy as np\n\n#create a 3x3 matrix with all elements 1 \nx = np.ones((3,3))\nprint(x)", "category": "Python"}, {"instruction": "Create a text classifier using a Random Forest algorithm.", "input": "[['Ready Player One', 'Adventure'],\n['IT', 'Drama'],\n['Halloween', 'Horror'],\n['Pirates of the Caribbean', 'Adventure']]", "output": "\"\"\"\nCreate a text classifier using a Random Forest algorithm\n\"\"\"\n \nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\n\n# create the dataframe from the given input\ndf = pd.DataFrame(columns=['text', 'category'], data=input)\n\n# define the features and labels\nX = df['text']\ny = df['category']\n\n# create and train the model\nmodel = RandomForestClassifier(n_estimators=100, random_state=0)\nmodel = model.fit(X, y)", "category": "Python"}, {"instruction": "Construct a Python class to represent a student with attributes such as name, age, and course. The class should have a method that returns the student information in a formatted output", "input": "Student Name: John Smith\nAge: 17\nCourse: Computer Science", "output": "class Student: \n    def __init__(self, name, age, course): \n        self.name = name \n        self.age = age\n        self.course = course\n\n    def get_info(self): \n        return f\"Name: {self.name}, Age: {self.age}, Course: {self.course}\"\n\nstudent = Student(\"John Smith\", 17, \"Computer Science\")\n\nprint(student.get_info()) # Name: John Smith, Age: 17, Course: Computer Science", "category": "Python"}, {"instruction": "Modify a given code to sort a two-dimensional array (matrix) using bubble sort.", "input": "Matrix: \n[[1, 5, 2], \n[8, 4, 6],\n[3, 7, 9]]", "output": "def bubble_sort(arr): \n    n = len(arr) \n    for i in range(n):\n        for j in range(0, n-i-1): \n            for k in range(0, 3): \n                if arr[j][k] > arr[j+1][k] : \n                    arr[j][k], arr[j+1][k] = arr[j+1][k], arr[j][k]\n  \narr = [[1, 5, 2], \n       [8, 4, 6], \n       [3, 7, 9]]\n\nbubble_sort(arr)\nprint(\"Sorted matrix: \") \nfor row in arr: \n    print(row)", "category": "Python"}, {"instruction": "Below is the code of a shopping list application. Modify it to add a function to calculate the total cost of all items in the list.", "input": "shopping_list = {\n    'item1': 2.5,\n    'item2': 3.5,\n    'item3': 4.25\n}", "output": "shopping_list = {\n    'item1': 2.5,\n    'item2': 3.5,\n    'item3': 4.25\n}\n\ndef calculate_cost(list):\n    cost = 0\n    for item in list:\n        cost += list[item]\n    return cost\n\ntotal_cost = calculate_cost(shopping_list)\nprint(total_cost)  # prints 10.25", "category": "Python"}, {"instruction": "Write a code to implement insertion sort on a given list.", "input": "List: [4, 3, 6, 1, 5]", "output": "def insertionSort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key \n  \narr = [4, 3, 6, 1, 5]\ninsertionSort(arr)\nprint (\"Sorted array is: \") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i])", "category": "Python"}, {"instruction": "Write a code to get the IP address of a system.", "input": "", "output": "import socket \n  \nhostname = socket.gethostname() \nIPAddr = socket.gethostbyname(hostname) \n  \nprint(\"The IP address of the system is:\" + IPAddr)", "category": "Python"}, {"instruction": "Write a code to establish a connection between your server and a remote database.", "input": "Server host: 127.0.0.1\nDatabase Name: my_db\nUsername: root\nPassword: pw123", "output": "\"\"\"\nEstablish a connection between your server and a remote database\n\"\"\"\n\nimport pymysql\n\ndb = pymysql.connect(host='127.0.0.1', user='root', \n                      password='pw123', db='my_db')", "category": "Python"}, {"instruction": "Write a code to retrieve tweets from a specific Twitter account by using their API.", "input": "Twitter account: \"@twitter\"", "output": "\"\"\"\nRetrieve tweets from a specific Twitter account\n\"\"\"\n\nimport tweepy\n\n#Enter the respective information \nconsumer_key = 'XXXXXXXXXX'\nconsumer_secret = 'XXXXXXXXXX'\naccess_token = 'XXXXXXXXXX'\naccess_token_secret = 'XXXXXXXXXX'\n\n#Authentication using the given keys \nauth = tweepy.OAuthHandler(consumer_key, consumer_secret) \nauth.set_access_token(access_token, access_token_secret) \n\n#getting the API  \napi = tweepy.API(auth) \n\n#fetch tweets related to \"@twitter\"\ntweets = api.user_timeline(\"@twitter\") \n\n#display first five tweets \nfor tweet in tweets[:5]: \n    print(tweet.text)", "category": "Python"}, {"instruction": "Modify the following code to generate the Fibonacci sequence up to the nth term", "input": "", "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Edit the following code to calculate the standard deviation of a given list", "input": "", "output": "def calculate_std_dev(nums):\n    mean = sum(nums)/len(nums)\n    sum_deviation = 0\n    for num in nums:\n        diff = num - mean\n        squared_deviation = diff ** 2\n        sum_deviation += squared_deviation\n    std_dev = (sum_deviation/(len(nums)-1)) ** 0.5\n    return std_dev", "category": "Python"}, {"instruction": "Modify the following given program to print all prime number between 1 and n", "input": "", "output": "def check_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef print_prime_numbers(n):\n    for num in range(1, n + 1):\n        if check_prime(num):\n            print(num)", "category": "Python"}, {"instruction": "Design a code to check if a given list is ordered in an increasing order.", "input": "lst = [1, 2, 3, 5, 4]", "output": "def is_increasing(lst):\n    for i in range(len(lst)-1):\n        if lst[i] >= lst[i+1]:\n            return False\n    return True", "category": "Python"}, {"instruction": "Design a program in Python to remove all even elements from a given list.", "input": "lst = [2, 4, 5, 6, 8, 10]", "output": "def remove_even(lst):\n    evens = []\n    for num in lst:\n        if num % 2 != 0:\n            evens.append(num)\n    return evens", "category": "Python"}, {"instruction": "Design a program in Python which takes a string as input and returns a list of words from the string.", "input": "string1 = 'Python Programming is Fun!'", "output": "def get_words(string1):\n    words = string1.split()\n    return words", "category": "Python"}, {"instruction": "Create a code that removes all duplicate elements in a given array.", "input": "Array: [5, 10, 5, 7, 10]", "output": "def unique_elements(arr): \n    new_arr = [] \n    for i in arr:\n        if i not in new_arr: \n            new_arr.append(i) \n    return new_arr \n  \narr = [5, 10, 5, 7, 10] \n\nprint(unique_elements(arr)) # [5, 10, 7]", "category": "Python"}, {"instruction": "Write a code to input an array and find the maximum and minimum element in it.", "input": "arr = [1, 2, 3, 4, 5, 6]", "output": "def find_min_max(arr):\n    min_num = arr[0]\n    max_num = arr[0]\n    for num in arr:\n        if num < min_num:\n            min_num = num \n        if num > max_num:\n            max_num = num \n    return max_num, min_num\n\nmax_num, min_num = find_min_max(arr)\nprint('Max element is', max_num, 'and min element is', min_num)  # prints Max element is 6 and min element is 1", "category": "Python"}, {"instruction": "Write a Python code using list comprehension to get the power of each element in a list.", "input": "list_num = [1, 2, 3, 4, 5]", "output": "power_list = [num**2 for num in list_num]\nprint(power_list)  # prints [1, 4, 9, 16, 25]", "category": "Python"}, {"instruction": "Edit the following code to insert a new item at the end of a given Python list.", "input": "items = [1, 2, 3]\nnew_item = 4", "output": "items = [1, 2, 3] + [new_item]\nprint(items)  # prints [1, 2, 3, 4]", "category": "Python"}, {"instruction": "Calculate the number of valid permutations of length n with respect to a given set of n distinct elements.", "input": "n=5", "output": "#Calculate the number of valid permutations of length n with respect to a given set of n distinct elements.\n\ndef num_permutations(n):\n    if n == 0:\n        return 0\n    else:\n        return math.factorial(n)\n\nif __name__ == '__main__':\n    print(num_permutations(5))", "category": "Python"}, {"instruction": "Create a function to calculate log base 10 in Python.", "input": "", "output": "import math\n\ndef log10(x):\n    return math.log10(x)\n\nif __name__ == '__main__':\n    print(log10(10))", "category": "Python"}, {"instruction": "Design a data structure to store books that keeps track of page numbers.", "input": "", "output": "class Book:\n    def __init__(self, title, num_pages):\n        self.title = title\n        self.num_pages = num_pages\n        self.pages_read = 0\n    \n    def read(self, num_pages):\n        self.pages_read += num_pages\n\n# Create an instance\nbook = Book(\"War and Peace\", 1220)\n\n# Read some pages\nbook.read(50)\n\n# Check the number of pages read\nbook.pages_read # returns 50", "category": "Python"}, {"instruction": "Create a list in Python of elements 0-9 in random order.", "input": "", "output": "import random \n\n# Generate a list of 10 numbers\nnums = [i for i in range(10)]\n\n# Shuffle the list\nrandom.shuffle(nums) \n\n# Print the shuffled list\nprint(nums) # [5, 0, 2, 3, 9, 8, 4, 1, 7, 6]", "category": "Python"}, {"instruction": "Given an array of integers, write an algorithm to find the maximum difference between any two elements in the array.", "input": "nums = [3, 2, 7, 1, 4]", "output": "def find_max_difference(nums):\n    # Initialize a max difference\n    max_diff = float('-inf')\n    \n    # Iterate through the array\n    for i in range(1, len(nums)):\n        diff = nums[i] - nums[i-1]\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n\n# Call the function\nfind_max_difference([3, 2, 7, 1, 4]) # returns 6", "category": "Python"}, {"instruction": "Create a class in Python and define several functions for that class.", "input": "", "output": "class MyClass:\n    def __init__(self):\n        pass \n\n    def add(self, x, y):\n        return x + y\n\n    def subtract(self, x, y):\n        return x - y\n\n    def multiply(self, x, y):\n        return x * y\n\n    def divide(self, x, y):\n        return x / y", "category": "Python"}, {"instruction": "Find the longest substring of two characters that is a palindrome.", "input": "string = \"banana\"", "output": "def longest_palindrome(string):\n    # Create an empty substring\n    longest_substring = ''\n    \n    # Iterate through the string\n    for i in range(len(string)-1): \n        for j in range(i+1, len(string)):\n            substring = string[i:j+1]\n            if substring == substring[::-1] and len(substring) > len(longest_substring):\n                longest_substring = substring\n    return longest_substring\n\n# Call the function\nlongest_palindrome('banana') # returns 'anana'", "category": "Python"}, {"instruction": "Implement a random number generator in Python that returns a random number in the range of 1-100.", "input": "", "output": "import random\n\ndef rand_num():\n    return random.randint(1, 100)", "category": "Python"}, {"instruction": "Create a program that assigns an ID to each element of an array.", "input": "arr = [\"Car\", \"Bike\", \"Bus\"]", "output": "# Create program that assigns an ID to each element of an array\n\narr = [\"Car\", \"Bike\", \"Bus\"]\n\n# Initialize a counter\ncounter = 0\n\n# Loop over each element of the array\nfor element in arr:\n    # Assign an ID to the element (in this case, the counter value)\n    element_id = counter\n\n    # Print the assigned ID\n    print(f\"Element {element} is assigned ID {element_id}\")\n\n    # Increment the counter\n    counter += 1", "category": "Python"}, {"instruction": "Find the longest word in a piece of text.", "input": "The quick brown fox jumps over the lazy dog", "output": "# Find the longest word in a piece of text\n\n# Split the text into a list of words\nwords =  \"The quick brown fox jumps over the lazy dog\".split()\n\n# Initialize a variable to keep track of the longest word\nlongest_word = \"\"\n\n# Loop over each word in the list\nfor word in words:\n    # Check if the current word is longer than the longest word\n    if len(word) > len(longest_word):\n        # Update the longest word\n        longest_word = word\n\n# Print the longest word\nprint(longest_word)", "category": "Python"}, {"instruction": "Create a function that takes an array as a parameter and continuously adds each item to the total sum.", "input": "arr = [6, 4, 3, 10]", "output": "def addItems(arr):\n  total = 0\n  for number in arr:\n    total = total + number\n  return total", "category": "Python"}, {"instruction": "Construct a loop that prints the even numbers from 0 to 20, one number per line.", "input": "", "output": "for i in range(0, 21):\n    if i % 2 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Suggest a way to generate random passwords using Python.", "input": "", "output": "One way to generate random passwords using Python is to use the string module's methods. Using the string.ascii_letters and string.digits sequences, we can create a random sequence of alphanumeric characters. The string module's choice() function can then be used to randomly select characters from this sequence to create a new password string. The length of the password should be specified as an argument to the choice() function. For example, to generate an 8 character long password, you can use string.choice(string.ascii_letters + string.digits, 8).", "category": "Python"}, {"instruction": "Write a script in Python to make an http request and extract the title of the web page.", "input": "url = 'https://en.wikipedia.org/wiki/Deep_learning'", "output": "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_page_title(url):\n    \"\"\"\n    This function makes an HTTP request to the given URL and extracts the title of the web page.\n    \"\"\"\n    response = requests.get(url)\n    soup = BeautifulSoup(response.content, 'html.parser')\n    return soup.title.string\n\nprint(get_page_title('https://en.wikipedia.org/wiki/Deep_learning'))", "category": "Python"}, {"instruction": "Explain what is Cross-validation in Machine Learning.", "input": "", "output": "Cross-validation is a technique used to evaluate a machine learning model by dividing the dataset into training and validation sets. The model is trained on the training set, and its performance is evaluated on the validation set. In other words, cross-validation is a method for selecting model hyperparameters and for assessing performance of a model. It is a technique used to ensure that we are not overfitting to the training data and evaluate the accuracy of a model on unseen data. This can be done by splitting the data into a set of folds, typically 5 - 10, and running model training and testing k times, with each time one of the folds as the validation set and the other folds as the training set. The result of this process is the average validation accuracy across the k folds of the data. This gives us a better understanding of how the model will perform in production.", "category": "Python"}, {"instruction": "Create a class called 'Product' in Python and assign the following attributes to it.", "input": "name, price, description", "output": "class Product:\n    \"\"\"\n    A class that represents a product with its attributes.\n    \"\"\"\n    def __init__(self, name, price, description):\n        \"\"\"\n        Initialize a Product object.\n        \"\"\"\n        self.name = name \n        self.price = price \n        self.description = description", "category": "Python"}, {"instruction": "Suggest a way to filter out comments containing profane language in a text corpus.", "input": "", "output": "One way to filter out comments containing profane language in a text corpus is to use a rule-based algorithm with a list of profane words and phrases. This algorithm can be configured to identify words or phrases in a given corpus that match the list of profane words and phrases, and flag them as inappropriate. A second approach is to use natural language processing to identify profane content. This involves training a machine learning model to detect profanity by analyzing patterns in the text, such as its word or phrase context, structure, and so on.", "category": "Python"}, {"instruction": "Translate the following statement from English to Python code: \"If the value of x is greater than 10, print 'x is greater than 10.\"", "input": "", "output": "if x > 10:\n    print(\"x is greater than 10.\")", "category": "Python"}, {"instruction": "Write a reusuable function in Python that takes two string variables and returns the longest string.", "input": "", "output": "def longest_string(str1, str2):\n    if len(str1) > len(str2):\n        return str1\n    else:\n        return str2", "category": "Python"}, {"instruction": "What is abstraction in computer programming?", "input": "", "output": "Abstraction in computer programming is the process of hiding details of how the code is implemented and only exposing the information that is necessary. It involves separating a complex task into simpler and smaller units in order to solve problems efficiently. It also helps to break down a complex system into its fundamental parts and allow a programmer to focus on the most important parts.", "category": "Python"}, {"instruction": "Write a code to traverse a matrix in spiral form.", "input": "", "output": "def spiral_traverse(matrix):\n    top = 0\n    left = 0\n    right = len(matrix[0])-1\n    bottom = len(matrix)-1\n    while top <= bottom and left <= right:\n        for i in range(left, right+1):\n            print(matrix[top][i], end = ' ')\n        top += 1\n        for i in range(top, bottom+1):\n            print(matrix[i][right], end = ' ')\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left-1, -1):\n                print(matrix[bottom][i], end = ' ')\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top-1, -1):\n                print(matrix[i][left], end = ' ')\n            left += 1", "category": "Python"}, {"instruction": "Implement a search algorithm to search a node in a binary search tree.", "input": "", "output": "def search(node, key):\n   if node is None or node.key == key:\n        return node\n \n   if node.key < key:\n        return search(node.right, key)\n \n    return search(node.left, key)", "category": "Python"}, {"instruction": "Write a code in Python to remove all the duplicate elements from a list and print the result.", "input": "list: [2, 3, 3, 4, 5, 5]", "output": "\"\"\"\nWrite a code in Python to remove all the duplicate elements from a list and print the result\n\"\"\"\n\ndef remove_duplicates(lst):\n    new_list = []\n    for i in lst:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n\nif __name__ == '__main__':\n    lst = [2,3,3,4,5,5]\n    print(\"List with duplicates removed:\", remove_duplicates(lst))", "category": "Python"}, {"instruction": "Given two lists, write a Python program to print all common elements in them.", "input": "list1 = [10, 20, 30, 40] \nlist2 = [30, 40, 50, 60]", "output": "def common_elements(list1, list2):\n    common = []\n    for elem in list1:\n        if elem in list2:\n            common.append(elem)\n    return common", "category": "Python"}, {"instruction": "Write a Python program to insert a given string at a specific position within another given string.", "input": "string1 = 'Python is fun' \nstring2 = 'awesome '\nposition = 7", "output": "def insert_string(string1, string2, pos):\n    return string1[:pos] + string2 + string1[pos:]", "category": "Python"}, {"instruction": "Given the following nested loop structure, write code to print all elements in the array.", "input": "arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "for row in arr:\n    for elem in row:\n        print(elem, end=' ')\n    print()\n\n# Output\n# 1 2 3\n# 4 5 6\n# 7 8 9", "category": "Python"}, {"instruction": "Write a Python code snippet to check if an integer is between 5 and 10 (including both).", "input": "x = 8", "output": "if 5 <= x <= 10:\n    print('The integer is between 5 and 10.')\nelse:\n    print('The integer is not between 5 and 10.')", "category": "Python"}, {"instruction": "Write a Python code to construct a dictionary from the given input.", "input": "key_arr = [100, 200, 300]\nvalue_arr = [\"apple\", \"banana\", \"mango\"]", "output": "def dict_from_arrs(key_arr, value_arr):\n    return dict(zip(key_arr, value_arr))", "category": "Python"}, {"instruction": "Write a Python function to find the minimum element from the given array.", "input": "arr = [11, 9, 10, 14]", "output": "def find_min(arr):\n    return min(arr)", "category": "Python"}, {"instruction": "Create an array of the squared values of all elements of the given array.", "input": "arr = [2, 3, 6, 8]", "output": "def square_arr(arr):\n    return [x**2 for x in arr]", "category": "Python"}, {"instruction": "Explain how a support vector machine works.", "input": "", "output": "A Support Vector Machine (SVM) is a supervised learning algorithm that can be used for binary classification, regression, or outlier detection. SVMs use a hyperplane to separate data points into two categories, each represented by a different class. The hyperplane divides data points into classes by minimizing the distance between them and maximizing the margin between the two classes, while creating a decision boundary. SVMs then use a kernel function to project the data into a higher dimensional space and maximize the distance between observations. This allows SVMs to identify non-linear patterns in data and find the optimal decision boundary. The support vectors are points closest to the decision boundary", "category": "Python"}, {"instruction": "Differentiate the methods of machine learning and explain the differences.", "input": "", "output": "There are three main methods of machine learning: supervised learning, unsupervised learning, and reinforcement learning. In supervised learning, the model is trained using labeled data, that is, data that has its output (or target) value given to the model. Unsupervised learning models learn by extracting patterns from unlabeled datasets without the need for a defined output value. Reinforcement learning models use reward-based learning to maximize a reward signal by taking actions in an environment. Supervised and unsupervised learning use input data and a set of instructions to learn from known data. Reinforcement learning, on the other hand, uses an environment with a reward system to teach an agent how to achieve a goal through a series of trial-and-error based decisions.", "category": "Python"}, {"instruction": "Create a function called `replace_words` which replaces all the words specified in; the given list of words with their corresponding synonyms.", "input": "string = \u201cThe quick brown fox jumps over the lazy dog\u201d\nwords = [[\u2018quick\u2019, \u2018fast\u2019], [\u2018lazy\u2019, \u2018sluggish\u2019]]", "output": "def replace_words(string, words): \n    for item in words: \n        string = string.replace(item[0], item[1])\n    return string\n\nreplaced_string = replace_words(string, words)\nprint(replaced_string)", "category": "Python"}, {"instruction": "Create a function named `binary_search` that implement a binary search algorithm.", "input": "list = [1, 3, 5, 7, 8, 9, 11]\ngoal = 5", "output": "def binary_search(list, goal): \n    start = 0 \n    end = len(list) - 1\n    while start <= end: \n        mid = (start + end) // 2\n        if list[mid] == goal: \n            return mid \n        elif goal < list[mid]: \n            end = mid - 1 \n        else: \n            start = mid + 1\n    return -1\n\nresult = binary_search(list, goal)\nprint(result)", "category": "Python"}, {"instruction": "Assign 1 to all the elements of a 2D array that are divisible by 3.", "input": "arr = [[1,2,3],\n       [10,15,20],\n       [3, 8, 6]]", "output": "for row in range(len(arr)): \n    for col in range(len(arr[row])): \n        if arr[row][col] % 3 == 0: \n            arr[row][col] = 1\nprint(arr)", "category": "Python"}, {"instruction": "Write a code to filter and print all lines that end in the given character.", "input": "string = \u2018Hello world\\nMy name is John\\nHello again\\nToday is Monday\u2019\ncharacter = \u2018n\u2019", "output": "lines = string.split(\"\\n\") \nfor line in lines: \n    if line.endswith(character): \n        print(line)", "category": "Python"}, {"instruction": "Create a function that detects whether a given string is a palindrome.", "input": "string = \u2018level\u2019", "output": "def detect_palindrome(string): \n    reversed_string = string[::-1] \n    if (string == reversed_string): \n        return \"This string is a palindrome\" \n    else: \n        return \"This string is not a palindrome\"\n\nprint(detect_palindrome(string))", "category": "Python"}, {"instruction": "Create a function called `convert_csv_to_json` to convert the following csv to the corresponding JSON formatt.", "input": "city,country,latitude,longitude\nFrankfurt,Germany,50.1117,8.6785\nLondon,UK,51.4667,-0.25", "output": "import json\n\ndef convert_csv_to_json(csv_string):\n    lines = csv_string.split(\"\\n\")\n    keys = lines[0].split(\",\")\n    out_list = [] \n    for line_num in range(1, len(lines)):\n        line = lines[line_num]\n        values = line.split(\",\")\n        item = {}\n        for key_num in range(0, len(keys)):\n            key = keys[key_num]\n            val = values[key_num]\n            item[key] = val\n        out_list.append(item)\n    return json.dumps(out_list)", "category": "Python"}, {"instruction": "Create a function that multiplies each element of the input array by 10 and returns the result.", "input": "arr = [2, 3, 4]", "output": "def multiply_by_10(arr):\n  newArr = []\n  for i in arr:\n    newArr.append(i * 10)\n  return newArr\n\narr = [2, 3, 4]\n\nprint(multiply_by_10(arr))", "category": "Python"}, {"instruction": "Create a Python function that takes an array of strings and returns a dictionary whose keys are the strings and the values are the lengths of the strings.", "input": "arr = [\"apple\", \"banana\", \"cherry\"]", "output": "def array_lengths_to_dict(arr):\n    my_dict = {}\n    for s in arr:\n        my_dict[s] = len(s)\n    return my_dict\n\narr = [\"apple\", \"banana\", \"cherry\"]\n\nprint(array_lengths_to_dict(arr))", "category": "Python"}, {"instruction": "Write a Python program that finds the longest common subsequence of two strings.", "input": "str1 = \"ABGXABCAB\"\nstr2 = \"ZXABGAYBCB\"", "output": "def lcs(str1, str2):\n    m = len(str1)\n    n = len(str2)\n\n    table = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                table[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    lcs = []\n    i = m\n    j = n\n    while i > 0 and j > 0:\n        if str1[i-1] == str2[j-1]:\n            lcs.append(str1[i-1])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs[::-1]\n\n\nstr1 = \"ABGXABCAB\"\nstr2 = \"ZXABGAYBCB\"\n\nprint(lcs(str1, str2))", "category": "Python"}, {"instruction": "Write a Python function to check if a given number is a prime number or not. A prime number is an integer greater than 1 which is not divisible by any other numbers.", "input": "11", "output": "def is_prime(n):\n  #Check if n islarger than one \n  if n > 1:\n    # Check if n is divisible by any number between2 and n\n    for i in range(2,n):\n      if (n % i) == 0:\n        return False\n    else:\n      return True\n  else:\n    return False", "category": "Python"}, {"instruction": "Write a Python code snippet for a function to calculate the number of words in a given string.", "input": "myString = \"The sky is blue\"", "output": "def countWords (myString): \n    return len(myString.split()) \n\nnum = countWords(myString) \nprint(\"Number of words =\", num)", "category": "Python"}, {"instruction": "Create an artificial neural network to predict the stock prices.", "input": "", "output": "import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \nfrom sklearn.neural_network import MLPRegressor\n \n# Read data into a dataframe \ndf = pd.read_csv('stock_data.csv') \n \n# Split the data into features and target \nX = np.array(df[['open', 'high', 'low', 'volume']]) \ny = np.array(df['close']) \n \n# Create the model and fit the data \nmodel = MLPRegressor(hidden_layer_sizes=(4,4,4), max_iter=20000) \nmodel.fit(X,y) \n \n# Make predictions based on the test data \npredictions = model.predict(X) \n \n# Plot the results to compare the predicted and actual values \nplt.scatter(y, predictions) \nplt.xlabel('Actual Prices') \nplt.ylabel('Predicted Prices') \nplt.title('Predicted vs Actual Stock Prices') \nplt.show()", "category": "Python"}, {"instruction": "Write a code to print all prime numbers up to 1000.", "input": "", "output": "def is_prime(x):\n    if x<2:\n        return False\n    for i in range(2, int(x**0.5)+1):\n        if x % i == 0:\n            return False\n    return True\n\nfor x in range(2,1001):\n    if is_prime(x):\n        print(x)", "category": "Python"}, {"instruction": "Convert a Python function to a JavaScript function.", "input": "def add(a, b):\n    return a + b", "output": "function add(a, b) {\n    return a + b;\n}", "category": "Python"}, {"instruction": "Design a function to select the nth smallest element from an array.", "input": "int[] arr = {11, -2, 4, 9, -5, 7}", "output": "def selectNthSmallest(arr, n): \n \n    # sort the array \n    arr = sorted(arr) \n  \n    # return the nth smallest element \n    return arr[n-1]  \n      \n# Driver code \narr = [11, -2, 4, 9, -5, 7]  \nn = 3\n  \n# Output \nprint(selectNthSmallest(arr, n))", "category": "Python"}, {"instruction": "Given a list containing strings, write a Python program to filter out unique strings.", "input": "mylist = [\"fox\", \"fox\", \"cat\", \"dog\", \"dog\"]", "output": "mylist = list(set(mylist))\nprint(mylist)", "category": "Python"}, {"instruction": "Determine the number of words in the given passage using text processing in Python.", "input": "passage = \"Once upon a midnight dreary, while I pondered, weak and weary\"", "output": "n_words = len(passage.split())\nprint(\"The number of words in the passage is:\", n_words)", "category": "Python"}, {"instruction": "Create a function in Python that takes a string and prints the frequency table of all its characters.", "input": "string = \u201cHello world\"", "output": "def get_freq_table(string): \n    char_freq_dict = dict() \n    for char in string: \n        if char in char_freq_dict.keys(): \n            char_freq_dict[char] += 1\n        else: \n            char_freq_dict[char] = 1\n    print (\"Frequency table of given string is : \\n\",char_freq_dict) \n\nget_freq_table(string)", "category": "Python"}, {"instruction": "Given two strings s1 and s2, find the number of times the characters in s2 are present in s1.", "input": "s1 = \"Hello World\", s2 = \"o\"", "output": "s1 = \"Hello World\"\ns2 = \"o\"\n\ndef count_characters(s1, s2):\n    count = 0\n    for c in s1:\n        if c == s2:\n            count += 1\n    return count\n\nprint(count_characters(s1,s2))", "category": "Python"}, {"instruction": "Given a JSON object, write a Python program to convert it into a Pandas dataframe.", "input": "{\n  \"name\": \"John\",\n  \"age\": 30,\n  \"city\": \"New York\"\n}", "output": "import pandas as pd\n\ndata = {\n  \"name\": \"John\",\n  \"age\": 30,\n  \"city\": \"New York\"\n}\n\ndf = pd.DataFrame([data])", "category": "Python"}, {"instruction": "Filter out the integers from the list that are divisible by 6.", "input": "nums = [1, 2, 4, 6, 7, 8, 10, 12, 14, 18]", "output": "nums = [1, 2, 4, 6, 7, 8, 10, 12, 14, 18]\n\ndef filter_divisible_by_6(nums):\n    return [num for num in nums if num % 6 == 0]\n\nprint(filter_divisible_by_6(nums))", "category": "Python"}, {"instruction": "Rewrite the code to remove the unnecessary boolean flag", "input": "flag = False\ndef printFooBar(x):\n    fooBarArray = []\n    for i in range(x):\n        fooBarArray.append(i)\n        flag = True\n    if flag and len(fooBarArray) > 0:\n        print(fooBarArray)", "output": "def printFooBar(x):\n    fooBarArray = []\n    for i in range(x):\n        fooBarArray.append(i)\n    if len(fooBarArray) > 0:\n        print(fooBarArray)", "category": "Python"}, {"instruction": "Create an algorithm to implement a stack using a single queue.", "input": "", "output": "class Stack:\n    def __init__(self):\n        self.queue = []\n\n    def push(self, item):\n        self.queue.append(item)\n        # Reverse the queue to implement a stack\n        self.queue.reverse()\n\n    def pop(self):\n        if self.queue:\n            # Reverse the queue to implement a stack\n            self.queue.reverse()\n            return self.queue.pop()\n        return None", "category": "Python"}, {"instruction": "Create an algorithm that sorts a given list of numbers.", "input": "[1, 5, -3, 0, 8]", "output": "def bubble_sort(list):\n  for i in range(len(list)):\n   for j in range(len(list)-1-i):\n    if list[j] > list[j+1]:\n     list[j], list[j+1] = list[j+1], list[j]\n  return list\n\nbubble_sort([1,5,-3,0,8])", "category": "Python"}, {"instruction": "You need to develop a function which checks if a given string is palindrome or not.", "input": "String: \"redder\"", "output": "def is_palindrome(input_string): \n    # Convert string to lower case to ignore capitalization.\n    input_string = input_string.lower() \n    # Reverse input string \n    rev_string = reversed(input_string) \n  \n    # Check if strings are equal or not \n    if (list(input_string) == list(rev_string)): \n        return True\n    else: \n        return False\n  \nprint(is_palindrome(\"redder\"))", "category": "Python"}, {"instruction": "Given two strings, develop a function to calculate edit distance between them.", "input": "Strings: \"kitten\" and \"sitting\"", "output": "def edit_distance(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n\n    dp = [[0 for x in range(n2 + 1)] for x in range(n1 + 1)] \n\n    for i in range(n1 + 1): \n        for j in range(n2 + 1): \n            if i == 0: \n                dp[i][j] = j\n            elif j == 0: \n                dp[i][j] = i\n            elif str1[i - 1] == str2[j - 1]: \n                dp[i][j] = dp[i - 1][j - 1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j - 1],\n                                   dp[i - 1][j],\n                                   dp[i - 1][j - 1]) \n  \n    return dp[n1][n2] \n\nedit_distance(\"kitten\", \"sitting\")", "category": "Python"}, {"instruction": "Develop a function to encode a text string in a ROT13 manner.", "input": "String: \"Hello World\"", "output": "def rot13(message):\n    output = []\n    for char in message:\n        char_code = ord(char)\n        if char_code >= ord('A') and char_code <= ord('Z'):\n            # Rotate lower case characters\n            char_code += 13\n            if char_code > ord('Z'):\n                char_code -= 26\n        elif char_code >= ord('a') and char_code <= ord('z'):\n            # Rotate upper case characters\n            char_code += 13\n            if char_code > ord('z'):\n                char_code -= 26\n        output.append(chr(char_code))\n    return ''.join(output)\nprint(rot13(\"Hello World\"))", "category": "Python"}, {"instruction": "You need to develop a code that takes two strings and returns a boolean if the substrings are anagrams.", "input": "Strings: \"computer\" and \"computer\"", "output": "def isAnagram (str1, str2): \n    # Get length of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If length is not same, then strings are not anagrams \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n  \n    return True\n\nprint (isAnagram(\"computer\", \"computer\"))", "category": "Python"}, {"instruction": "Construct a data mining program to mine public internet data.", "input": "Twitter datasets", "output": "import tweepy\n \nCONSUMER_KEY = 'XXXXXXXXXXXXXXXXXXX'\nCONSUMER_SECRET = 'XXXXXXXXXXXXXXXXXXX'\nACCESS_TOKEN = 'XXXXXXXXXXXXXXXXXXX'\nACCESS_TOKEN_SECRET = 'XXXXXXXXXXXXXXXXXXXX'\n\n# authenticating\nauth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)\nauth.set_access_token(ACCESS_TOKEN, ACCESS_TOKEN_SECRET)\n\n# initializing the API for data mining\napi = tweepy.API(auth)\n\n# pulling the data from Twitter\ndata = api.search(q=\"data mining\", lang=\"en\", count=100, tweet_mode=\"extended\")\n\n# processing the data\nfor tweet in data:\n    print(tweet.full_text) # print the full text of each tweet", "category": "Python"}, {"instruction": "Implement a DFS algorithm for a tree data structure.", "input": "", "output": "def DFS(root):\n    S = []\n    visited = []\n \n    S.append(root)\n \n    while len(S) > 0:\n        node = S.pop()\n        visited.append(node)\n \n        for vertex in node.get_adjacent_vertices():\n            if vertex not in visited:\n                S.append(vertex)\n    return visited", "category": "Python"}, {"instruction": "Create a function in Python to add two numbers, which may take any number of arguments.", "input": "", "output": "def add(*nums):\n    \"\"\"Add two or more numbers.\"\"\"\n    # Initialize sum\n    result = 0\n\n    # Iterate through given numbers\n    for num in nums:\n        result += num\n\n    # Return the sum \n    return result\n    \n# Example\nsum = add(15, 7, 10)\nprint(sum)\n# Output: 32", "category": "Python"}, {"instruction": "Print the largest number in a given array in Python.", "input": "my_array = [5, 11, 7, 10, 2]", "output": "my_array = [5, 11, 7, 10, 2]\n\n# Function to find the largest number\ndef find_largest_number(array):\n    # Assume that the first item in the array is the largest\n    largest = array[0]\n\n    # Now loop through the array to find the largest number\n    for num in array:\n        # If a number is larger than the assumed largest, it is the new largest number\n        if num > largest:\n            largest = num\n\n    # Return the largest number\n    return largest\n\n# Call the function\nlargest = find_largest_number(my_array)\n\n# Print the result\nprint(largest)\n# Output: 11", "category": "Python"}, {"instruction": "Write a function in Python to normalize a given string by removing white spaces, changing to lower case and replacing special characters with underscores.", "input": "\"Hello World!\"", "output": "def normalize_string(string):\n    \"\"\"Normalize a string by removing white spaces, changing to lower case and replacing special characters with underscores.\"\"\"\n    # Remove whitespaces\n    normalized_string = string.replace(\" \", \"\")\n\n    # Convert to lowercase\n    normalized_string = normalized_string.lower()\n\n    # Replace special characters\n    characters = [\"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \"*\"]\n    for c in characters:\n        normalized_string = normalized_string.replace(c, \"_\")\n\n    return normalized_string\n\n# Example\nnormalized_string = normalize_string(\"Hello World!\")\nprint(normalized_string)\n# Output: hello_world_", "category": "Python"}, {"instruction": "Train a Random Forest classifier in Python on the Iris dataset.", "input": "", "output": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Import Iris dataset\niris_data = pd.read_csv(\"iris.csv\")\n\n# Split dataset into training and testing\nX = iris_data.drop(\"species\", axis=1)\ny = iris_data['species']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n\n# Train a Random Forest classifier\nclf = RandomForestClassifier() \nclf.fit(X_train, y_train)\n\n# Make predictions\npreds = clf.predict(X_test)", "category": "Python"}, {"instruction": "Edit the given Python code to compute the mean of the given list of numbers.", "input": "my_list = [10, 20, 30, 40, 50]\nsum = 0.0\n\nfor x in my_list:\n  sum += x", "output": "my_list = [10, 20, 30, 40, 50]\nsum = 0.0\n\nfor x in my_list:\n  sum += x\n\nmean = sum / len(my_list)", "category": "Python"}, {"instruction": "Create a Python program to convert a given temperature in Celsius to Kelvin.", "input": "", "output": "def convert_celsius_to_kelvin(celsius):\n    kelvin = celsius + 273.15\n    return kelvin", "category": "Python"}, {"instruction": "Generate an 8 character random string.", "input": "", "output": "import string\nimport random\n\ndef gen_random_string(size):\n    letters = string.ascii_letters + string.digits\n    return ''.join(random.choice(letters) for i in range(size))\n\nrandom_string = gen_random_string(8)\nprint(random_string)", "category": "Python"}, {"instruction": "Write a function to find all elements that appear more than once in a given array.", "input": "[1, 3, 2, 3, 8, 9, 10]", "output": "def find_duplicates(numbers):\n    seen = set()\n    duplicates = set()\n    for num in numbers:\n        if num in seen:\n            duplicates.add(num)\n        else:\n            seen.add(num)\n    return list(duplicates)", "category": "Python"}, {"instruction": "Write a function to remove the first occurrence of a specified element from a given list.", "input": "[2, 4, 8, 9, 4]", "output": "def remove_first_occurrence(arr, element):\n    if element in arr:\n        arr.remove(element)\n    return arr", "category": "Python"}, {"instruction": "Develop an algorithm to modify a given string by changing the case of each character.", "input": "string = \"Hello World\"", "output": "def modify_string(string):\n  new_string = \"\"\n  for i in string:\n    if (i.isupper()) == True:\n      new_string += i.lower()\n    elif (i.islower()) == True:\n      new_string += i.upper()\n  return new_string", "category": "Python"}, {"instruction": "Edit the given code to validate an IP address.", "input": "# Function to validate an IPv4 address\ndef validate_IPv4(IP):", "output": "# Function to validate an IPv4 address\ndef validate_IPv4(IP):\n    # Split the IP string by '.' \n    ip_split = IP.split('.')\n    \n    #Checking for the corner cases \n    if (len(ip_split) == 4) and (1 <= int(ip_split[0]) <= 223) and (int(ip_split[0]) != 127) and (int(ip_split[0]) != 169 or int(ip_split[1]) != 254) and (0 <= int(ip_split[1]) <= 255 and 0 <= int(ip_split[2]) <= 255 and 0 <= int(ip_split[3]) <= 255): \n        return \"Valid IP!\"\n    else: \n        return \"Invalid IP!\"", "category": "Python"}, {"instruction": "You need to write an algorithm to find the third largest value in a Binary Search Tree.", "input": "8 \n      /   \\\n     3     10\n    / \\     \\\n   1   6     14\n      / \\    /\n     4   7  13", "output": "def third_largest(root):\n    if root is None:\n        return None\n \n    queue = []\n    queue.append(root)\n    while len(queue):\n        curr = queue.pop(0)\n \n        if curr.right:\n            queue.append(curr.right)\n        if curr.left:\n            queue.append(curr.left)\n \n    if len(queue)>1:\n        return queue[1].val\n    else:\n        return root.val", "category": "Python"}, {"instruction": "Develop an algorithm to print all the possible n-ary trees with a given number of nodes.", "input": "n=4", "output": "# Node class \nclass Node: \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.children = [] \n\n# A function to print the n-ary tree \ndef printNaryTreeUtil(root, func, level = 0): \n   \n    # If node is None, simply return \n    if root is None: \n        return\n  \n    # Process child nodes of root recursively \n    for i in range(len(root.children)): \n        printNaryTreeUtil(root.children[i], func, \n                          level + 1) \n  \n    # Call the function for the root \n    func(root, level) \n  \n# Function to generate n-ary trees    \ndef constructNaryTree(nodes): \n  \n    # Create a root node \n    root = Node(nodes[0]) \n  \n    # Create a stack which will be used to \n    # create children of root and their subtrees \n    s = [root] \n  \n    # Traverse the tree nodes in pre order fashion \n    i = 1\n    while i < len(nodes): \n  \n        node = s[len(s) - 1] \n        child = Node(nodes[i]) \n        node.children.append(child) \n        s.append(child) \n  \n        # If number of children of the node is equal to \n        # its degree, remove the node and its subtree \n        if len(node.children) == node.degree: \n            s.pop() \n  \n        i += 1\n  \n    return root \n    \n# Driver code \nif __name__ == '__main__': \n\n\t# Given number of nodes \n\tn = 4\n\n\t# Generate the nodes \n\tnodes = list(range(1, n + 1)) \n\n\t# Construct n-ary tree \n\troot = constructNaryTree(nodes) \n\n\t# Function to print the tree \n\tdef printTree(node, level): \n\t\tprint('\\t' * level, node.data, sep=\"\") \n\n\t# Print the tree \n\tprintNaryTreeUtil(root, printTree)", "category": "Python"}, {"instruction": "Generate a random string with the a capital letter followed by two lower case letters.", "input": "", "output": "import string\nimport random\ndef random_string():\n\n  capitalletter = random.choice(string.ascii_uppercase)\n  lowercaseletter1 = random.choice(string.ascii_lowercase)\n  lowercaseletter2 = random.choice(string.ascii_lowercase)\n\n  return capitalletter + lowercaseletter1 + lowercaseletter2", "category": "Python"}, {"instruction": "Using python, implement a method to find the longest common subsequence in two strings", "input": "str1 = \"AGGTAB\"\nstr2 = \"GXTXAYB\"", "output": "def lcs(str1, str2, n, m): \n    if n == 0 or m == 0:          \n        return 0\n  \n    elif str1[n-1] == str2[m-1]:   \n        return 1 + lcs(str1, str2, n-1, m-1) \n \n    else: \n        return max(lcs(str1, str2, n, m-1),    \n                   lcs(str1, str2, n-1, m))", "category": "Python"}, {"instruction": "Transform and print the given list which includes negative and positive numbers.", "input": "nums = [-5, -2, 3, 7, 1]", "output": "nums = [-5, -2, 3, 7, 1]\n\ndef transform(nums):\n return [abs(num) for num in nums]\n \nprint(transform(nums))", "category": "Python"}, {"instruction": "Write a Python code snippet that combines the elements of two lists into a single list.", "input": "list_1 = [\"Cat\", \"Dog\", \"Fish\"]\nlist_2 = [\"Monkey\", \"Tiger\", \"Lion\"]", "output": "single_list = list_1 + list_2", "category": "Python"}, {"instruction": "Create a function in Python that adds a new item to the beginning of a list.", "input": "my_list = [\"Cats\", \"Dogs\", \"Fish\"]", "output": "def insert_beginning(my_list, item):\n my_list = [item] + my_list\n return my_list", "category": "Python"}, {"instruction": "Create a class that detects if a String contains a palindrome", "input": "", "output": "class PalindromeChecker:\n  def __init__(self, word):\n    self.word = word\n \n  def contains_palindrome(self):\n    for i in range(len(self.word)):\n      if self.word[i] == self.word[len(self.word) - 1 - i]:\n        return True\n    return False", "category": "Python"}, {"instruction": "Create an algorithm to determine the maximum element in a given list.", "input": "my_list = [3, 6, 4, 1]", "output": "def find_max(my_list):\n    max_num = 0\n    for num in my_list:\n        if num > max_num:\n            max_num = num\n    return max_num", "category": "Python"}, {"instruction": "Write a function which takes a number and returns the Fibonacci sequence up to that number.", "input": "n = 10", "output": "def fibonacci(n):\n    fib_list = [1]\n    if n == 1:\n        return fib_list\n    else:\n        fib_list.append(1)\n        while len(fib_list) < n:\n            fib_list.append(fib_list[-1] + fib_list[-2])\n        return fib_list", "category": "Python"}, {"instruction": "Determine what header is needed for the following function.", "input": "def split_list(a_list):\n    mid_point = int(len(a_list) / 2)\n    first_half = a_list[:mid_point]\n    second_half = a_list[mid_point:]\n    return first_half, second_half", "output": "import math\ndef split_list(a_list):\n    mid_point = int(math.floor(len(a_list) / 2))\n    first_half = a_list[:mid_point]\n    second_half = a_list[mid_point:]\n    return first_half, second_half", "category": "Python"}, {"instruction": "Implement a web service in Python to retrieve the current temperature from an external API.", "input": "", "output": "import requests\n\n# Gets the current temperature from an external API\ndef get_current_temperature():\n    response = requests.get('https://weather.com/api/current-temperature')\n    response_json = response.json()\n    return response_json['current_temperature']", "category": "Python"}, {"instruction": "Write a function to check if an integer is a multiple of another integer.", "input": "", "output": "def is_multiple_of(num, multiple):\n    if num % multiple == 0:\n        return True\n    return False", "category": "Python"}, {"instruction": "Design a function in Python which takes a list of characters and returns the frequency of each character as a dictionary.", "input": "[\"a\", \"b\", \"c\", \"a\", \"a\", \"b\", \"d\"]", "output": "def character_frequency(lst):\n    \"\"\"Function to count the frequency of each character in a list\"\"\"\n    frequencies = {}\n    for c in lst:\n        if c in frequencies:\n            frequencies[c] += 1\n        else:\n            frequencies[c] = 1\n    return frequencies\n\nprint(character_frequency([\"a\", \"b\", \"c\", \"a\", \"a\", \"b\", \"d\"]))\n# Output: {'a': 3, 'b': 2, 'c': 1, 'd': 1}", "category": "Python"}, {"instruction": "Using any programming language, write a program which takes a number as an input and outputs the first two prime numbers after it.", "input": "7", "output": "def find_next_prime_numbers(num):\n    \"\"\"This function takes a number as an input\n    and returns the first two prime numbers after it\"\"\"\n    prime_numbers = []\n    # Increment num to the first prime number\n    while not is_prime(num):\n        num += 1\n    # Append num to prime_numbers (first prime after input)\n    prime_numbers.append(num)\n    # Increment num to the second prime number\n    num += 1\n    while not is_prime(num):\n        num += 1\n    # Append num to prime_numbers (second prime after input)\n    prime_numbers.append(num)\n    # Return the list of prime numbers\n    return prime_numbers\n\ndef is_prime(num): \n    \"\"\"Returns True if number is prime\"\"\"\n    if num <= 1: \n        return False\n    for i in range(2, num): \n        if num % i == 0: \n            return False  \n    return True\n\nprint(find_next_prime_numbers(7)) # Output: [11, 13]", "category": "Python"}, {"instruction": "Create an algorithm to sort the given list of integers.", "input": "[5, 7, 2, 4, 9]", "output": "def sort(lst):\n    for i in range(len(lst)):\n        min_index = i\n        for j in range(i+1, len(lst)):\n            if lst[j] < lst[min_index]:\n                min_index = j\n        lst[i], lst[min_index] = lst[min_index], lst[i]\n    return lst", "category": "Python"}, {"instruction": "Create a function that takes in two strings and returns the number of times the first string is found within the second string.", "input": "string1 = \"ab\"\nstring2 = \"abcabcabc\"", "output": "def count_substring(string1, string2):\n  count = 0\n  for i in range(len(string2)-len(string1)+1):\n    if string2[i:i+len(string1)] == string1:\n      count += 1\n  return count", "category": "Python"}, {"instruction": "Create a function to calculate the network's throughput given a data rate and a size of the packets.", "input": "Data Rate = 10 Mbps; Packet size = 1000 bits", "output": "def calculate_throughput(data_rate, packet_size):\n    return data_rate / (packet_size / 8)  # converting bits to bytes\n\nif __name__ == '__main__':\n    data_rate = 10 # Mbps\n    packet_size = 1000 # bits\n    throughput = calculate_throughput(data_rate, packet_size)\n    print(throughput) # 125000.0", "category": "Python"}, {"instruction": "Develop a function which returns the position of a given element in a list.", "input": "my_list = [1, 2, 3, 4]\nelement = 3", "output": "def find_index(my_list, element):\n    for i in range(len(my_list)):\n        if my_list[i] == element:\n            return i", "category": "Python"}, {"instruction": "Design an algorithm to find the longest substring with no repeating characters in a given string.", "input": "\"abcabcbb\"", "output": "def longest_no_repeat(s):\n    max_length = 0\n    length = 0\n    seen = dict() \n    \n    for i in range(len(s)):\n        if s[i] not in seen:\n            length += 1\n            seen[s[i]] = i \n        else:\n            if length > max_length:\n                max_length = length\n            length = i - seen[s[i]]\n            for j in seen:\n                if seen[j] < seen[s[i]]:\n                    del seen[j]\n            seen[s[i]] = i\n  \n    if length > max_length:\n        max_length = length\n  \n    return max_length\n\nif __name__ == '__main__':\n    s = \"abcabcbb\"\n    print(longest_no_repeat(s))", "category": "Python"}, {"instruction": "Train a classification model to classify the sentiment of the given sentence.", "input": "Sentence: I love this new book!", "output": "\"\"\"\nTrain a classification model to classify the sentiment of the given sentence.\n\"\"\"\n\nimport numpy as np\nimport tensorflow as tf\n\n# Create the model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(input_dim=vocab_size, output_dim=embedding_dim),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(embedding_dim)),\n    tf.keras.layers.Dense(embedding_dim, activation='relu'),\n    tf.keras.layers.Dense(2, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])\n\n# Train the model\nmodel.fit(train_input_data, train_labels, epochs=num_epochs)\n\n# Make prediction\npred = model.predict([np.array([sentence])])\n\n# Print prediction result\nif pred[0][0] > pred[0][1]:\n  print(\"Negative sentiment\")\nelse:\n  print(\"Positive sentiment\")", "category": "Python"}, {"instruction": "Create a Python function to generate a random hex color code.", "input": "", "output": "import random\n\ndef generate_random_hex_color_code():\n  hex_code = \"#\"\n  for i in range(6):\n    random_digit = random.choice(\"0123456789ABCDEF\")\n    hex_code += random_digit\n  return hex_code\n\nif __name__ == '__main__':\n  print(generate_random_hex_color_code())", "category": "Python"}, {"instruction": "Write code to print out the numbers up to and including the provided number, starting at 1.", "input": "number = 10", "output": "\"\"\"\nWrite code to print out the numbers up to and including the provided number, starting at 1.\n\"\"\"\n\ndef print_numbers_up_to(n):\n for i in range(1, n+1):\n print(i)\n\nif __name__ == '__main__':\n print_numbers_up_to(10)", "category": "Python"}, {"instruction": "Write a function to make an API call to the Yelp API to return the list of top 10 restaurants near a given address.", "input": "Address: 1234 Main Street, San Francisco, CA", "output": "\"\"\"\nWrite a function to make an API call to the Yelp API to return the list of top 10 restaurants near a given address.\n\"\"\"\n\nimport requests\n\ndef get_top_10_restaurants(address):\n    endpoint = 'https://api.yelp.com/v3/businesses/search'\n    headers = {'Authorization': 'Bearer your_api_key'} \n    params = {\n        'term': 'restaurants',\n        'location': address,\n        'limit': 10\n    }\n\n    response = requests.get(endpoint, headers=headers, params=params)\n    data = response.json()['businesses']\n\n    restaurants = []\n    for restaurant in data:\n        restaurants.append(restaurant['name'])\n    return restaurants\n\nif __name__ == '__main__':\n    print(get_top_10_restaurants('1234 Main Street, San Francisco, CA'))", "category": "Python"}, {"instruction": "Debug the following code to print out the result of the polynomial.", "input": "polynomial equation: f(x) = x\u00b3 + 5x - 62\nx = 9", "output": "\"\"\"\nDebug the following code to print out the result of the polynomial.\n\"\"\"\n\ndef evaluate_polynomial(coefficients, x):\n    result = 0\n    for i in range(len(coefficients)):\n        result += coefficients[i] * (x ** (len(coefficients) - i - 1))\n    return result\n\ncoefficients = [1, 5, -62]\nx = 9\n\nprint(evaluate_polynomial(coefficients, x)) # 390", "category": "Python"}, {"instruction": "Find the position of an element in an array.", "input": "arr = [1, 4, 7, 9]\ntarget = 4", "output": "def find_index(arr, target):\n    for i, num in enumerate(arr):\n        if num == target:\n            return i\n\nfind_index(arr, target)\n# Output: 1", "category": "Python"}, {"instruction": "How would you convert this list of strings to integers in Python?", "input": "str_list = ['1', '2', '3', '4']", "output": "int_list = [int(i) for i in str_list]\n# Output: [1, 2, 3, 4]", "category": "Python"}, {"instruction": "Create discrete buckets in a given array using the following algorithm.", "input": "[2, 3, 6, 7, 8]", "output": "def create_buckets(arr):\n    buckets = []\n    x = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] != x + 1:\n            buckets.append(arr[i-1])\n            x = arr[i]\n    buckets.append(arr[-1])\n    return buckets\n\ncreate_buckets([2, 3, 6, 7, 8])\n# Output: [2, 3, 6, 8]", "category": "Python"}, {"instruction": "Generate a Python program to generate the square of a number.", "input": "", "output": "def square(n):\n    return n*n", "category": "Python"}, {"instruction": "Create a program to generate all subsets of a set.", "input": "input_set = {1, 2, 3}", "output": "def all_subsets(input_set):\n    res = [[]]\n    for ele in input_set:\n        res += [i + [ele] for i in res]\n    return res", "category": "Python"}, {"instruction": "What is an example of an algorithm for solving Sudoku?", "input": "", "output": "One example algorithm for solving Sudoku is called 'Backtracking'. This algorithm works by first filling in possible solutions for the empty cells, then using a series of rules to determine the correct answer. The algorithm starts with each cell of the Sudoku and tries different numbers for it until a solution is found. If a solution is not found, it backtracks and tries a different number. This process is repeated until all cells have been filled in with the correct numbers, or there is no solution.", "category": "Python"}, {"instruction": "Create a program to return all the prime numbers under the nth number.", "input": "n = 10", "output": "def find_primes(n):\n    primes = []\n    for num in range(2, n + 1):\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            primes.append(num)\n    return primes", "category": "Python"}, {"instruction": "How would you create a function to calculate factorial of a given number in Python?", "input": "", "output": "def factorial(n):\n    if n == 0: \n        return 1\n    return n * factorial(n-1)", "category": "Python"}, {"instruction": "Create a function to raise a given number to the Nth power.", "input": "", "output": "def power(n, x):\n    if x == 0:\n        return 1\n    return n * power(n, x-1)", "category": "Python"}, {"instruction": "Write a code to generate a random password using random library of Python.", "input": "length = 8", "output": "import string \nimport random \n\ndef generate_password(length): \n    # Generate a random string of characters \n    letters = string.ascii_letters + string.digits \n    password = ''.join(random.choice(letters) for i in range(length)) \n  \n    return password\n  \n# Driver Code\nlength = 8\nprint(generate_password(length))", "category": "Python"}, {"instruction": "Write a function to determine the largest integer in an unordered array.", "input": "array = [6, 8, 1, 3, 4]", "output": "def largest_int(arr): \n    largest_int = arr[0] \n    for i in range(1, len(arr)): \n        if arr[i] > largest_int: \n            largest_int = arr[i] \n    return largest_int \n  \n# Driver Code\narray = [6, 8, 1, 3, 4]\nprint(largest_int(array))", "category": "Python"}, {"instruction": "Create a function that takes an array of integers and prints out their product.", "input": "array = [1,2,3,4,5]", "output": "def product(arr): \n    product = 1\n    for x in arr: \n        product *= x \n    return product \n  \n# Driver Code \narray = [1,2,3,4,5]\nprint(product(array))", "category": "Python"}, {"instruction": "How would you test a Turing machine?", "input": "", "output": "A Turing machine can be tested by providing sample inputs that cover various cases and examining the output. An ideal test would consist of input strings that cover all possible scenarios, such as inputs with no computation, inputs with long computations, inputs that flip a single bit, etc. Additionally, Turing machine implementations should be tested for edge cases, such as providing inputs with invalid syntax or supplying an input of exceptional size.", "category": "Python"}, {"instruction": "Explain the process of linear search in a few sentences.", "input": "", "output": "Linear search is a technique for searching for an element in a list by repeatedly checking every element until a match is found or the end of the list is reached. It is typically implemented as a loop, where each element is compared to the search key until a match is found, or until all the elements have been searched.", "category": "Python"}, {"instruction": "Create a while loop in Python to increment a counter by 1 until it reaches 10.", "input": "counter = 0", "output": "while counter < 10:\n    counter += 1", "category": "Python"}, {"instruction": "Write a function that takes two strings and determines if the first string is one character away from the second string.", "input": "String 1 = \"cat\", String 2 = \"cot\"", "output": "def oneAway(str1, str2): \n    len1 = len(str1) \n    len2 = len(str2) \n    if abs(len1 - len2) > 1: \n        return False\n    i = 0\n    j = 0 \n    count = 0 \n    while i < len1 and j < len2: \n        if str1[i] != str2[j]: \n            if count == 1: \n                return False\n            count = 1\n            if len1 > len2: \n                i += 1\n            elif len1 < len2: \n                j += 1 \n            else: \n                i +=1\n                j += 1 \n        else: \n            i += 1\n            j += 1\n    if i < len1 or j < len2: \n        count += 1 \n    return count == 1", "category": "Python"}, {"instruction": "Given an array of numbers, find the longest increasing sequence in the array.", "input": "Array = [2, 3, 5, 4, 7, 9, 6, 8]", "output": "def longest_increasing_sequence(arr):\n    lengths = [1]*len(arr)\n    \n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lengths[i] = max(lengths[i], lengths[j] + 1)\n    \n    max_length_index = 0\n    for i in range(len(lengths)):\n        if lengths[i] > lengths[max_length_index]:\n            max_length_index = i\n    \n    current_index = max_length_index\n    sequence = [arr[max_length_index]]\n    for i in range(max_length_index-1, -1, -1):\n        if lengths[i] == lengths[current_index] - 1 and arr[i] < arr[current_index]:\n            sequence.append(arr[i])\n            current_index = i\n    sequence.reverse()\n    return sequence", "category": "Python"}, {"instruction": "Implement a function to perform in-place array rotation.", "input": "arr = [1, 2, 3, 4, 5]\nrotation = 2", "output": "def rotate_in_place(arr, rotation):\n    rotation %= len(arr)\n    \n    start = 0\n    count = 0\n    while count < len(arr):\n        current_index = start\n        current_value = arr[start]\n        next_index = (current_index + rotation) % len(arr)\n        while next_index != start:\n            next_value = arr[next_index]\n            arr[next_index] = current_value\n            current_index = next_index\n            current_value = next_value\n            next_index = (current_index + rotation) % len(arr)\n            count += 1\n        arr[start] = current_value\n        start += 1\n        count += 1", "category": "Python"}, {"instruction": "Given two strings, find the minimum number of operations required to convert one string to the other.", "input": "String 1 = \"horse\"\nString 2 = \"ros\"", "output": "def find_edit_distance(str1, str2):\n    len_str1 = len(str1)\n    len_str2 = len(str2)\n\n    matrix = [[0] * (len_str2+1) for _ in range(len_str1+1)]\n    for i in range(len_str1+1):\n        matrix[i][0] = i\n    for j in range(len_str2+1):\n        matrix[0][j] = j\n\n    for i in range(1, len_str1+1):\n        for j in range(1, len_str2+1):\n            if str1[i-1] == str2[j-1]:\n                matrix[i][j] = matrix[i-1][j-1]\n            else:\n                matrix[i][j] = min(matrix[i-1][j]+1, matrix[i][j-1]+1, matrix[i-1][j-1]+1)\n\n    return matrix[len_str1][len_str2]", "category": "Python"}, {"instruction": "Design a class for a grocery store inventory management system.", "input": "", "output": "class GroceryInventory:\n    def __init__(self):\n        self.inventory = {}\n\n    def add_item(self, item, quantity):\n        if item not in self.inventory:\n            self.inventory[item] = quantity\n        else:\n            self.inventory[item] += quantity\n            \n    def remove_item(self, item, quantity):\n        if item in self.inventory:\n            self.inventory[item] -= quantity\n            if self.inventory[item] <= 0:\n                del self.inventory[item]\n    \n    def get_inventory(self):\n        return self.inventory", "category": "Python"}, {"instruction": "Build a quickly-sortable tree from a given array.", "input": "Array = [3, 8, 4, 5, 2, 10, 7]", "output": "class TreeNode: \n    def __init__(self, key): \n        self.left = None\n        self.right = None\n        self.key = key \n\ndef quick_sort_tree(arr):\n    if not arr:\n        return None\n\n    pivot = arr[0]\n    pivot_node = TreeNode(pivot)\n    \n    left_subtree_elements  = [x for x in arr[1:] if x < pivot]\n    right_subtree_elements = [x for x in arr[1:] if x >= pivot]\n\n    pivot_node.left  = quick_sort_tree(left_subtree_elements)  \n    pivot_node.right = quick_sort_tree(right_subtree_elements) \n\n    return pivot_node", "category": "Python"}, {"instruction": "Write code to find the powers of two in a given range.", "input": "Range:  0 to 20", "output": "def powers_of_two(start, end):\n    powers = []\n    current_power = 1\n    while current_power < end:\n        if current_power >= start: \n            powers.append(current_power)\n        current_power *= 2\n    return powers", "category": "Python"}, {"instruction": "Develop a Django application to store car model, make and year in the database.", "input": "", "output": "# create Django project \ndjango-admin startproject car_database \n  \n# create Django app \ncd car_database \ndjango-admin startapp cars \n  \n# Add 'cars' to INSTALLED_APPS in settings.py\nINSTALLED_APPS = (  \n    ...\n    'cars',\n)\n  \n# Create models.py file\nclass Car(models.Model):\n    model = models.CharField(max_length=50)\n    make = models.CharField(max_length=50)\n    year = models.IntegerField()\n  \n# Make and apply migrations \npython manage.py makemigrations \npython manage.py migrate", "category": "Python"}, {"instruction": "Build a function to convert an adjacency matrix into an adjacency list.", "input": "A = \n[[0, 1, 0, 0], \n [1, 0, 1, 1], \n [0, 1, 0, 0], \n [0, 1, 0, 0]]", "output": "def adjacency_matrix_to_list(A):\n    \"\"\"\n    Convert an adjacency matrix to an adjacency list\n    \n    Parameters\n    ----------\n    A: 2D list representing an adjacency matrix\n    \n    Returns\n    -------\n    adj_list: Adjacency list\n    \"\"\"\n    n = len(A)\n    adj_list = [[] for i in range(n)]\n        \n    for i in range(n):\n        for j in range(n):\n            if A[i][j] == 1:\n                adj_list[i].append(j)\n                \n    return adj_list", "category": "Python"}, {"instruction": "How can a programmer optimize a code to improve its performance?", "input": "", "output": "A programmer can optimize a code to improve its performance by using techniques like loop optimization, code refactoring, resource optimization, cache optimization, and parallel computing. Loop optimization involves reducing the number of iterations in loops, using variables instead of literals, removing redundant loops, debugging errors, and choosing the most efficient looping techniques. Code refactoring involves restructuring the code to make it more concise, readable, and maintainable. Resource optimization involves using efficient data structures, such as hash tables and balanced trees, to reduce computational resources as well as using optimized algorithms. Cache optimization involves designing well-crafted caches to store frequently accessed data, while parallel computing allows multiple tasks to be completed simultaneously on different CPU cores.", "category": "Python"}, {"instruction": "What is the significance of a long identifier name in programming?", "input": "", "output": "A long identifier name is important for programming as it clearly and accurately describes the purpose of the identifier. It is easier for another programmer to understand what a specific code does if the identifier names are descriptive of their purpose. Long and descriptive names also make the code more organized and help to preserve the syntax. In addition, it allows for better debugging and easier maintenance in the long run.", "category": "Python"}, {"instruction": "What is Naive Bayes classification?", "input": "", "output": "Naive Bayes classification is a supervised machine learning technique used for classification tasks which is based on the Bayes Theorem. It assumes that each input feature is independent of each other, which is called the assumption of \"naive\" Bayes. The algorithm uses prior knowledge of the data set and determines the probability of each class, given the data. Based on these probabilities it then assigns a class to the input, using a decision rule (usually the maximum a posteriori likelihood), to maximize the overall accuracy of the model.", "category": "Python"}, {"instruction": "Train a model in PyTorch to classify the following dataset into 4 classes.", "input": "", "output": "import torch\n\n# Load the dataset\ntrain_data, valid_data, test_data = torch.utils.data.random_split(dataset, (1000, 400, 200))\n\n# Build the model\nmodel = torch.nn.Sequential(\n    torch.nn.Linear(7, 15), \n    torch.nn.ReLU(), \n    torch.nn.Linear(15, 4), \n    torch.nn.Softmax()\n)\n\n# Compile the model\ncriterion = torch.nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n\n# Train the model\nmodel.train()\nfor epoch in range(10):\n    loss = 0\n    for data, target in train_loader:\n        data, target = data.to(device), target.to(device)\n        optimizer.zero_grad()\n        output = model(data)\n        loss += criterion(output, target).item()\n        loss.backward()\n        optimizer.step()\n    \n    print(f'Epoch: {epoch}, Loss: {loss/len(train_data)}')", "category": "Python"}, {"instruction": "Create a function to find the sum of the squares of all natural numbers up to a certain number.", "input": "n = 10", "output": "def sumOfSquares(n): \n    sum = 0\n    for i in range(1, n+1): \n        sum += i*i\n    return sum", "category": "Python"}, {"instruction": "Create a regex expression in Python that finds all numbers from 1 to 100 inclusive.", "input": "", "output": "import re\n\nregex = re.compile('[1-9]|[1-9][0-9]|100')", "category": "Python"}, {"instruction": "Debug the following code snippet in Python to find the maximum number accross a list of integers.", "input": "lst = [-1, 5, 10, 0, -9]", "output": "def find_maximum(lst):\n  max_value = float('-inf')\n  for i in lst:\n    if i > max_value:\n      max_value = i\n  return max_value\n\nprint(find_maximum(lst))", "category": "Python"}, {"instruction": "Extend the following code to ensure that the array of numbers is sorted using insertion sort.", "input": "arr = [9, 5, 7, 3]", "output": "def insertionSort(arr): \n    for i in range(1, len(arr)): \n        temp = arr[i] \n        j = i - 1\n        while j >= 0 and temp < arr[j]: \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = temp", "category": "Python"}, {"instruction": "Change the Python code to find the occurrences of an item in a list", "input": "def count(list_of_items, item): \n    return len(list_of_items)", "output": "def count(list_of_items, item): \n    count = 0\n    for i in list_of_items:\n        if i == item:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Build a program to print the frequency of characters in an input string.", "input": "input_string = \"abcabcabcabc\"", "output": "def frequency_chart(input_string): \n    # Dictionary to store character frequency \n    freq = {} \n  \n    # Loop over the input string \n    for char in input_string: \n        if char in freq: \n            freq[char] += 1\n        else: \n            freq[char] = 1\n  \n    return freq \n  \n# Driver Code \ninput_string = \"abcabcabcabc\"\nprint(frequency_chart(input_string))", "category": "Python"}, {"instruction": "Change the Python code to output the product of two numbers.", "input": "def multiply(a, b): \n    return a + b", "output": "def multiply(a, b): \n    return a * b", "category": "Python"}, {"instruction": "Create an object in Python that has three properties, \"Color\", \"Height\" and \"Weight\".", "input": "", "output": "myObject = { \n    'color': '',\n    'height': 0,\n    'weight': 0\n}", "category": "Python"}, {"instruction": "Make an API request to fetch the top 3 trending topics from Twitter.", "input": "", "output": "import requests \n\ntrends_url = \"https://api.twitter.com/1.1/trends/place.json?id=1\"\n\nheaders = {\n    'Authorization': '", "category": "Python"}, {"instruction": "Given a string, find the longest substring containing no repeated characters.", "input": "\"abcabcbb\"", "output": "def longest_substring(str): \n    seen = {} \n    start = 0 \n    maxlen = 0 \n  \n    for i, char in enumerate(str): \n        if char in seen: \n            start = max(start, seen[char] + 1) \n        seen[char] = i \n        maxlen = max(maxlen, i - start + 1) \n  \n    return maxlen \n  \nprint(longest_substring(\"abcabcbb\")) \n# Output: 3", "category": "Python"}, {"instruction": "Write Python code to create a list of numbers from 1 to 10 (including 10).", "input": "", "output": "list_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Create a Python script to print the following output.", "input": "", "output": "for x in range(10):\n    for y in range(10):\n        print(\"*\" if (x + y) % 2 == 0 else \" \", end=\"\")\n    print(\"\")", "category": "Python"}, {"instruction": "Reduce the 3-dimensional numpy array to a 2-dimensional numpy array.", "input": "", "output": "import numpy as np\n\na_3d_array = np.array([[[1,2], [3,4]], [[5,6], [7,8]]])\n\na_2d_array = a_3d_array.reshape(4,2)", "category": "Python"}, {"instruction": "Find the maximum and minimum values of a given list of integers in Python.", "input": "", "output": "int_list = [3, 5, 2, 4, 1]\nmax_value = max(int_list)\nmin_value = min(int_list)", "category": "Python"}, {"instruction": "Implement a web scraper in Python to extract all headlines from a web page.", "input": "", "output": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com/'\n\nresponse = requests.get(url)\nhtml = response.text\nsoup = BeautifulSoup(html, 'html.parser')\n\nheadlines = []\nfor tag in soup.find_all('h1', class_='headline'):\n    headline = tag.string\n    headlines.append(headline)", "category": "Python"}, {"instruction": "Using the standard library to construct a generator that returns the first n prime numbers.", "input": "", "output": "from math import sqrt\n\ndef prime_numbers(n):\n    primes = []\n    i = 2\n    while len(primes) < n:\n        for number in range(2, int(sqrt(i)) + 1):\n            if i % number == 0:\n                break\n        else:\n            primes.append(i)\n        i += 1\n    yield from primes", "category": "Python"}, {"instruction": "Write a class in Python to represent an entry in a contact book.", "input": "", "output": "class ContactEntry:\n    def __init__(self, name, phone_number, email):\n        self.name = name\n        self.phone_number = phone_number\n        self.email = email", "category": "Python"}, {"instruction": "How would you define a Python decorator called ``logger`` to log the functions being called?", "input": "", "output": "from functools import wraps\n\ndef logger(func):\n    @wraps(func)\n    def log_function(*args, **kwargs):\n        print('Running \"{}\" with arguments {}, {}'.format(func.__name__, args, kwargs))\n        return func(*args, **kwargs)\n    return log_function", "category": "Python"}, {"instruction": "Given two sets, A and B, write a program to find the union of the two.", "input": "A = {1, 2, 3, 4, 5}\nB = {3, 4, 5, 6, 7}", "output": "def union(A, B):\n    union_set = set()\n    for item in A:        \n        union_set.add(item)\n    \n    for item in B:\n        union_set.add(item)\n    return union_set", "category": "Python"}, {"instruction": "Explain in simple terms what a dictionary is in Python.", "input": "", "output": "In Python, a dictionary is a collection of unordered key-value pairs. It is a mutable data type which allows users to store data in the form of key-value pairs. A key is an immutable object (like a number, string, or tuple) that is used to access the value stored for the corresponding key. A value can be any type of object like an integer, float, list, string, etc.", "category": "Python"}, {"instruction": "Evaluate the following arithmetic expression with Python.", "input": "15 * (2 + 7)", "output": "195", "category": "Python"}, {"instruction": "Create a function in Python which takes two strings as arguments and returns true if the first string contains the second string, false otherwise.", "input": "", "output": "def contains(string1, string2):\n    return string2 in string1", "category": "Python"}, {"instruction": "Write a class to implement a stack using an array.", "input": "", "output": "class Stack: \n    \n    def __init__(self): \n        self.stack = [] \n  \n    def isEmpty(self): \n        return self.stack == [] \n  \n    def push(self, data): \n        self.stack.append(data) \n    \n    def pop(self): \n        data = self.stack[-1] \n        del self.stack[-1] \n        return data \n  \n    def peek(self): \n        return self.stack[-1] \n  \n    def sizeStack(self): \n        return len(self.stack)", "category": "Python"}, {"instruction": "Construct a class that can be used to check if the braces in an expression are balanced.", "input": "expression = \"[(}{)]\"", "output": "class BalancedBraces: \n    \n    def checkBalanced(self, expression):\n        s = []\n        for i in expression:\n            if i == '(' or i == '[' or i == '{': \n                s.append(i)\n            elif i == ')' or i == ']' or i == '}':\n                if len(s) > 0 and (\n                (i == ')' and s[len(s)-1] == '(')or \n                (i == ']' and s[len(s)-1] == '[')or \n                (i == '}' and s[len(s)-1] == '{')):\n                    s.pop()\n                else:\n                    return False\n        return len(s) == 0", "category": "Python"}, {"instruction": "Create a function that calculates the length of a linked list.", "input": "Linked List: 10 -> 20 -> 30 -> 40 -> 50", "output": "def list_length(head):\n    count = 0\n    while head is not None:\n        count += 1\n        head = head.next\n    return count", "category": "Python"}, {"instruction": "Rewrite this function to reverse the order of the elements in the array.", "input": "list = [1,2,3,4,5]", "output": "def reverse_list(list): \n    mid = len(list)//2\n    for i in range(mid): \n        tmp = list[i]\n        list[i] = list[len(list)-i-1] \n        list[len(list)-i-1]=tmp \n    return list", "category": "Python"}, {"instruction": "Fetch data from the internet using an API call in Python", "input": "\"https://api.example.com/v1/search\"", "output": "import requests\n\nurl = \"https://api.example.com/v1/search\"\n\nresponse = requests.get(url)\ndata = response.json()\nprint(data)", "category": "Python"}, {"instruction": "Take a list of objects as input and return a list with removed duplicates.", "input": "objects = [1, 2, 3, 4, 5, 1, 2, 3]", "output": "def remove_duplicates(objects):\n    new_list = []\n    for obj in objects:\n        if obj not in new_list:\n            new_list.append(obj)\n    return new_list", "category": "Python"}, {"instruction": "Wirte a function that takes a string as input and returns the number of times the character 'a' appears in it.", "input": "string = \"abacadaba\"", "output": "def count_a(string):\n    count = 0\n    for char in string:\n        if char == 'a':\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Take a list of numbers and remove the numbers that are greater than 10.", "input": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]", "output": "def remove_greater_than_10(numbers):\n    return [x for x in numbers if x <= 10]", "category": "Python"}, {"instruction": "Merge the two following dictionaries into one with Python.", "input": "dict1 = {'a':1, 'b':2}\ndict2 = {'c':3, 'd':4};", "output": "dict1 = {'a':1, 'b':2}\ndict2 = {'c':3, 'd':4};\n\nmerged_dict = {**dict1, **dict2}\n\nprint(merged_dict) // returns {'a': 1, 'b': 2, 'c': 3, 'd': 4}", "category": "Python"}, {"instruction": "Given a number n, write a program to find the nth prime number.", "input": "", "output": "def nth_prime(n):\n    if n == 0:\n        return None\n    \n    primeCount = 0\n    checkNum = 2\n    while(primeCount < n):\n        isPrime = True\n        for i in range(2, checkNum):\n            if checkNum % i == 0:\n                isPrime = False\n        \n        if isPrime == True:\n            primeCount += 1\n        \n        if primeCount == n:\n            return checkNum\n        else:\n            checkNum += 1", "category": "Python"}, {"instruction": "Given a starting number, write a program to generate the Fibonacci sequence up to nth number.", "input": "", "output": "def fibonacci(n):\n    if n <= 0:\n        return None \n    \n    first = 0\n    second = 1\n    sequence = [first, second]\n    for i in range(2, n):\n        next_term = first + second\n        sequence.append(next_term)\n        first = second\n        second = next_term\n    return sequence", "category": "Python"}, {"instruction": "Write a code to filter the even numbers from the following array:", "input": "my_array = [1,2,3,4,5,6]", "output": "even_numbers = []\nfor number in my_array:\n    if number % 2 == 0:\n        even_numbers.append(number)\n\nprint(even_numbers)", "category": "Python"}, {"instruction": "Write a function in Python that takes a list of integer as input and return the most frequent value in the list.", "input": "[3, 9, 5, 6, 3, 9, 5]", "output": "def most_frequent_value(list):\n    return max(set(list), key = list.count)", "category": "Python"}, {"instruction": "Create a function to find a pair of elements in an array whose sum matches the given target.", "input": "numbers = [1, 2, 3, 4, 5], target = 6", "output": "def find_pair(numbers, target):\n  nums_set = set(numbers)\n  for num in nums_set:\n    if target - num in nums_set:\n      return [num, target-num]", "category": "Python"}, {"instruction": "Format the given list of numbers in such a way that element at i'th index is the product of all elements in the list except the i'th element.", "input": "numbers = [1, 2, 3, 4]", "output": "def format_list(numbers):\n    result = []\n    prod = 1\n    for i in range(0, len(numbers)):\n        prod = prod * numbers[i]\n    for i in range(0, len(numbers)):\n        result.append(prod // numbers[i])\n    return result", "category": "Python"}, {"instruction": "Read a list of strings and return a list which contains only the strings with length at least 3.", "input": "list = [\"Apple\", \"cat\", \"dog\", \"banana\", \"mouse\"]", "output": "newList = [i for i in list if len(i) >= 3]\nprint(newList)\n\n# Output: ['Apple', 'banana', 'mouse']", "category": "Python"}, {"instruction": "Edit this code to create a function which prints the Fibonacci series.", "input": "", "output": "def Fibonacci(n): \n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \nfor n in range(10):\n    print(Fibonacci(n))", "category": "Python"}, {"instruction": "Create a loop in Python to print odd numbers between 10 and 25.", "input": "", "output": "for i in range(11, 25, 2):\n    print(i)", "category": "Python"}, {"instruction": "Read an array of integers and sort it in increasing order.", "input": "arr = [3, 1, 4, 5, 2]", "output": "def sortArray(arr): \n    n = len(arr) \n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\nsortArray(arr) \nprint(arr)\n\n# Output: [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Write a Python script to create a dictionary of key - value pairs from a list.", "input": "list = [\"apple\", \"banana\", \"cherry\"]", "output": "dictionary = dict.fromkeys(list, 0)\n\nprint(dictionary)\n\n# Output: {'apple': 0, 'banana': 0, 'cherry': 0}", "category": "Python"}, {"instruction": "Create a format string in Python to output the sentence \u201cHello, my name is John Doe.\u201d", "input": "name = \"John Doe\"", "output": "print(f\"Hello, my name is {name}.\")", "category": "Python"}, {"instruction": "Read the integers in a given list and return the sum of the squares of the list elements.", "input": "arr = [1, 2, 3]", "output": "def squares_sum(arr):\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i] ** 2\n    return sum", "category": "Python"}, {"instruction": "Generate a function to convert an infix expression to a postfix expression.", "input": "\"A + B * C\"", "output": "def infix_to_postfix(exp):\n  stack = []\n  postfix_exp = \"\"\n  # Convert the expression to a list\n  exp_list = exp.split()\n\n  for char in exp_list:\n    # If the character is an operand, append it \n    if char in ['A', 'B', 'C']:\n      postfix_exp += char\n    # If the character is an operator, push it to the stack\n    elif char in ['+', '-', '*', '/']:\n      stack.append(char)\n    # When the closing parentheses is encountered, pop all the operators from the stack\n    elif char == ')':\n      while stack[-1] != '(': \n        postfix_exp += stack.pop() \n      stack.pop() #pop the opening parentheses\n\n  # Pop all the operators in the stack\n  while stack:\n    postfix_exp += stack.pop()\n  \n  return postfix_exp\n\nexp = \"A + B * C\" \nresult = infix_to_postfix(exp) \nprint(result) #ABC*+", "category": "Python"}, {"instruction": "Write a code to group the elements in a list into a dictionary with the list element as the key and the number of times the element is repeated in the list as the value.", "input": "[1, 2, 2, 2, 3, 3, 4, 4, 5]", "output": "def group_list(list): \n  result = {} \n  for element in list: \n    if element in result: \n      result[element] += 1 \n    else: \n      result[element] = 1 \n  \n  return result \n\nlist = [1, 2, 2, 2, 3, 3, 4, 4, 5] \nresult = group_list(list) \nprint(result) #{1: 1, 2: 3, 3: 2, 4: 2, 5: 1}", "category": "Python"}, {"instruction": "Write a code to validate an email entered by the user.", "input": "", "output": "\"\"\"\nValidate an email entered by the user\n\"\"\"\n\nimport re\n\ndef validate_email(email):\n regex = '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n if(re.search(regex, email)):\n  return True\n else:\n  return False\n  \nif __name__ == '__main__':\n email = input('Enter email address: ')\n if validate_email(email):\n  print('Valid email address')\n else:\n  print('Invalid email address')", "category": "Python"}, {"instruction": "Identify the Python statement used for looping.", "input": "", "output": "for", "category": "Python"}, {"instruction": "Create a function which returns the factorial of a given number.", "input": "", "output": "\"\"\"\nFunction which returns factorial of a given number\n\"\"\"\n\ndef factorial(num):\n    if (num == 0):\n        return 1\n    else:\n        return num * factorial(num-1)\n    \nif __name__ == '__main__':\n    print(factorial(5))", "category": "Python"}, {"instruction": "Write a function that creates a new array from a given array of integers, leaving out the negative ones.", "input": "list1 = [-1, 1, 2, -2, 3, -3]", "output": "def removeNegative(list1):\n    outputArray = [x for x in list1 if x >= 0]\n    return outputArray\n\n# testing\nlist1 = [-1, 1, 2, -2, 3, -3]\nprint(removeNegative(list1)) # Output: [1,2,3]", "category": "Python"}, {"instruction": "Create a list comprehension that outputs a list of odd numbers from a given list of numbers.", "input": "numbers = [1,2,3,4,5,6,7,8,9,10]", "output": "odd = [x for x in numbers if x % 2 != 0]\nprint(odd) # Output: [1, 3, 5, 7, 9]", "category": "Python"}, {"instruction": "Write code that takes in two numeric variables x and y, and if x is divisible by y, it should print \"x is divisible by y\"Otherwise it should print \"x is not divisible by y\".", "input": "x = 9, y = 3", "output": "def is_divisible(x, y):\n    if x % y == 0:\n        print(\"x is divisible by y\")\n    else:\n        print(\"x is not divisible by y\")\n\n# testing\nx = 9\ny = 3\nprint(is_divisible(x ,y)) # Output: x is divisible by y", "category": "Python"}, {"instruction": "Using the following input and code, edit the code so the output returns a list with only the unique elements from the list.", "input": "list1 = [1,2,2,4,4,4,5]", "output": "def unique_list(list1):\n    unique_list = []\n    for x in list1:  \n        if x not in unique_list: \n            unique_list.append(x) \n      \n    return unique_list\n\n# testing\nlist1 = [1,2,2,4,4,4,5]\nprint(unique_list(list1)) # Output: [1, 2, 4, 5]", "category": "Python"}, {"instruction": "Read two strings from the user and check if they are anagrams.", "input": "string1 = 'listen', string2 = 'silent'", "output": "def isAnagram(string1, string2): \n    # get lengths of strings \n    string1_length = len(string1) \n    string2_length = len(string2) \n  \n    # if length dont match\n    if string1_length != string2_length: \n        return False\n  \n    # sorting both strings\n    string1 = sorted(string1) \n    string2 = sorted(string2) \n  \n    # compare the sorted strings \n    for i in range(0, string1_length): \n        if string1[i] != string2[i]: \n            return False\n  \n    return True\n\n# testing\nstring1 = 'listen'\nstring2 = 'silent'\nprint(isAnagram(string1, string2)) # Output: True", "category": "Python"}, {"instruction": "Analyze the following sentence to determine the type of verb phrase involved.", "input": "We have met several times.", "output": "The verb phrase in this sentence is a perfect verb phrase, as it indicates an action that has been completed in the past and has a continuing result in the present. The verb in the phrase is \"have met\".", "category": "Python"}, {"instruction": "Use expand tabs to replace all the tabs in the following text with four spaces.", "input": "text = '\\thello \\tworld \\t'", "output": "import re\ntext = '\\thello \\tworld \\t'\ntext = re.sub('\\t', '    ', text)\nprint(text)", "category": "Python"}, {"instruction": "Enhance the following code to find the average of all the even numbers in the array:", "input": "my_array = [1,2,3,4,5,6]", "output": "even_numbers = []\nfor number in my_array:\n    if number % 2 == 0:\n        even_numbers.append(number)\n\naverage = sum(even_numbers) / len(even_numbers)\nprint(average)", "category": "Python"}, {"instruction": "Edit the Python code to reverse a linked list.", "input": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None", "output": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\ndef reverse_list(head):\n    prev = None\n    while head != None:\n        next = head.next\n        head.next = prev\n        prev = head\n        head = next\n    return prev", "category": "Python"}, {"instruction": "Convert a string to its corresponding integer value.", "input": "String: \"123\"", "output": "def string_to_int(s):\n    res = 0\n    for char in s:\n        res = res * 10 + int(char)\n    return res", "category": "Python"}, {"instruction": "Remove all duplicates from an array.", "input": "[1, 1, 2, 3, 4, 5, 3, 4]", "output": "def remove_duplicates(arr):\n    res = []\n    seen = set()\n    for element in arr:\n        if element not in seen:\n            res.append(element)\n            seen.add(element)\n    return res", "category": "Python"}, {"instruction": "Implement the Euclidean distance formula using a def function in Python.", "input": "", "output": "def euclidean_dist(x, y):\n    # write function here\n    dist = 0\n    # iterate through each coordinate of the points\n    for i in range(len(x)):\n        # calculate the distance between corresponding coordinates\n        dist += (x[i]-y[i])**2\n    return (dist**0.5)", "category": "Python"}, {"instruction": "Write a long-running Python script with a while loop?", "input": "", "output": "while True:\n    # perform a long-running task\n    pass # or perform an action", "category": "Python"}, {"instruction": "Create two lists, one in Python and one in JavaScript, with 10 numbers each.", "input": "", "output": "Python List: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nJavaScript List: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Create a class to represent a blog post in Python.", "input": "", "output": "class BlogPost:\n    def __init__(self, title, content, author):\n        self.title = title\n        self.content = content\n        self.author = author\n\n    def edit_post(self, new_title, new_content):\n        self.title = new_title\n        self.content = new_content", "category": "Python"}, {"instruction": "Write a Python program to read a list of numbers and print them as a single string without any space.", "input": "[34, 32, 67, 85]", "output": "my_list = [34, 32, 67, 85] \n  \n# using join() \nprint(''.join(str(n) for n in my_list))", "category": "Python"}, {"instruction": "Perform a selection sort on the given array", "input": "[4, 1, 10, 8, 5]", "output": "def selection_sort(arr): \n    for i in range(len(arr)): \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j        \n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\n\nprint(selection_sort([4, 1, 10, 8, 5]))", "category": "Python"}, {"instruction": "Read the comment in the code and update the code accordingly.", "input": "def get_multiples(n, limit):\n    \"\"\"Return list of n's multiples for all numbers up to limit\"\"\"\n    multiples = []\n    # TODO: Your code here\n    return multiples", "output": "def get_multiples(n, limit):\n    \"\"\"Return list of n's multiples for all numbers up to limit\"\"\"\n    multiples = []\n    for i in range(limit + 1):\n        if i % n == 0:\n            multiples.append(i)  \n    return multiples", "category": "Python"}, {"instruction": "Write a Python program to calculate the sum of the digits in an integer", "input": "N = 155", "output": "def sum_digits(n):\n    s = 0\n    while(n):\n        s += n % 10\n        n //= 10\n    return s\n\nprint(sum_digits(155))", "category": "Python"}, {"instruction": "Modify the program to work with any dataset", "input": "def sum_values(data):\n    \"\"\"Returns the sum of values in the given dataset.\"\"\"\n    sum = 0\n    # TODO: Your code here\n    return sum", "output": "def sum_values(data):\n    \"\"\"Returns the sum of values in the given dataset.\"\"\"\n    sum = 0\n    for val in data:\n        sum += val\n    return sum", "category": "Python"}, {"instruction": "Debug the following code and update the list \"result\" accordingly.", "input": "def foo(nums):\n    result = []\n    for val in nums:\n        val += 2\n        result.append(val)\n        return result\n\nnums = [1, 2, 3, 4]", "output": "def foo(nums):\n    result = []\n    for val in nums:\n        val += 2\n        result.append(val)\n    return result\n\nnums = [1, 2, 3, 4]\n\nresult = foo(nums)", "category": "Python"}, {"instruction": "Construct an if-else statement to compare two variables.", "input": "variable1: 5\n  variable2: 10", "output": "variable1 = 5\nvariable2 = 10\n\nif variable1 > variable2:\n  print(\"variable1 is greater than variable2\")\nelif variable1 < variable2:\n  print(\"variable1 is less than variable2\")\nelse:\n  print(\"variable1 is equal to variable2\")", "category": "Python"}, {"instruction": "Write an algorithm that reverses a string.", "input": "Hello World", "output": "def reverse_string(string):\n  reversed_string = \"\"\n  for char in string:\n    reversed_string = char + reversed_string\n  return reversed_string", "category": "Python"}, {"instruction": "Program a binary search algorithm.", "input": "data: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  target: 16", "output": "def binary_search(data, target):\n    low = 0\n    high = len(data) - 1\n    \n    while low <= high:\n        index = (low + high) // 2\n        value = data[index]\n\n        if value == target:\n            return index\n\n        if target < value:\n            high = index - 1\n        else:\n            low = index + 1\n\n    return -1\n\ndata = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\ntarget = 16\n\nindex = binary_search(data, target)\nif index != -1:\n    print(\"Target is at index: {}\".format(index))\nelse: \n    print(\"Target not found\")", "category": "Python"}, {"instruction": "Write Python code to merge two given dictionaries into a single dictionary.", "input": "Dictionary 1: {'A':1, 'B':2} \nDictionary 2: {'C':3, 'D':4}", "output": "def merge_dicts(dic1, dic2): \n    res = {**dic1, **dic2} \n    return res", "category": "Python"}, {"instruction": "Write a Python program to convert a given binary string to its equivalent hexadecimal representation.", "input": "", "output": "def bin_to_hex(binary_string):\n    dec = int(binary_string, 2)\n    hex_string = hex(dec).replace('x', '')\n    return hex_string", "category": "Python"}, {"instruction": "Create a Python program to extract the URLs from a given list of strings.", "input": "['https://stackoverflow.com/questions/42063887/how-to-extract-urls-from-a-list-of-strings-in-python',\n 'This is an example of a string without a URL']", "output": "import re\n\ndef extract_urls(strings):\n  urls = []\n  for s in strings:\n    urls += re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', s)\n  return urls", "category": "Python"}, {"instruction": "Create a Python script to generate random numbers from 1 to 10 in a given range.", "input": "", "output": "import random\n\ndef random_num_gen(start, end):\n  \n  random_nums = []\n  \n  for _ in range(start, end + 1):\n    random_nums.append(random.randint(1, 10))\n  \n  return random_nums", "category": "Python"}, {"instruction": "Write a function to sum values stored in a dictonary using for loop.", "input": "mydict = {\u2018a\u2019:1, \u2018b\u2019:2, \u2018c\u2019:3}", "output": "def sum_dict_values(mydict):\n  ans = 0\n  for key,val in mydict.items():\n    ans += val\n  return ans", "category": "Python"}, {"instruction": "Design a function in Python to sort a list of tuples based on the first element.", "input": "", "output": "def sort_list_of_tuples(my_list):\n    my_list.sort(key=lambda x: x[0])\n    return my_list", "category": "Python"}, {"instruction": "Suggest a way to search for a target element in a binary search tree in less than O(n) time.", "input": "", "output": "The binary search tree can be traversed in a depth-first manner to search for the target element in a time complexity of O(log n), where n is the number of nodes in the binary search tree. In a depth-first search, the target node is compared with each node in the tree and if it does not match, the left or right subtree is recursively searched depending on whether the target element is smaller or bigger than the current node. This way, the target element can be searched in less than O(n) time.", "category": "Python"}, {"instruction": "Write a function that takes in a list of strings and returns True if any of the strings contains the letter `a`.", "input": "", "output": "def contains_A(strings):\n    for string in strings:\n        if 'a' in string:\n            return True\n    return False", "category": "Python"}, {"instruction": "Split the given string into words and remove any words that have less than 4 characters.", "input": "string = 'This is a test string'", "output": "string = 'This is a test string'\nwords = string.split()\nfiltered_words = []\nfor word in words:\n    if len(word) >= 4:\n        filtered_words.append(word)\n\nprint(filtered_words)\n\n# Output:\n# ['This', 'test', 'string']", "category": "Python"}, {"instruction": "Write an algorithm to calculate the average of a list of integers given as input.", "input": "", "output": "def average(nums):\n    \"\"\"\n    Takes a list of numbers and returns the average.\n    \"\"\"\n    \n    total = 0\n    for num in nums:\n        total += num\n    \n    return total / len(nums)", "category": "Python"}, {"instruction": "Construct a Python class for a camera object.", "input": "", "output": "class Camera:\n    \"\"\"Class representing a camera\"\"\"\n    \n    def __init__(self, brand, model):\n        \"\"\"\"\"\"\n        self.brand = brand \n        self.model = model \n    \n    def get_brand(self):\n        \"\"\"\"\"\"\n        return self.brand\n    \n    def get_model(self):\n        \"\"\"\"\"\"\n        return self.model", "category": "Python"}, {"instruction": "Create a function that takes two arguments (n and m) and returns a randomly shuffled array of length n and containing only elements from 0 to m.", "input": "n = 5\nm = 10", "output": "def shuffle_array(n, m):\n    arr = []\n    for i in range(n):\n        arr.append(random.randint(0,m))\n    random.shuffle(arr)\n    return arr", "category": "Python"}, {"instruction": "In the following code, what is the purpose of the 'if' statement?", "input": "words = [\"apple\", \"pie\", \"make\"]\n\nfor word in words:\n  if len(word) > 4:\n    print(word)", "output": "The 'if' statement is used to check if the length of the current word is greater than 4, and if it is, the word is printed.", "category": "Python"}, {"instruction": "Write a function that takes two parameters, an array of integers and an integer value, and returns the number of occurrences of the given value in the array.", "input": "input_array = [1, 2, 3, 2, 1]\ninput_value = 2", "output": "def count_occurrences(input_array, input_value):\n    return len([item for item in input_array if item == input_value])", "category": "Python"}, {"instruction": "Create a TensorFlow neural network model to classify animals into 4 categories.", "input": "", "output": "import tensorflow as tf\n\n# Define the model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Flatten(input_shape=(28, 28)),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(4, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])", "category": "Python"}, {"instruction": "Write a Python program to parse a text string given a regular expression and return the matches.", "input": "", "output": "import re\n\ndef parse(expression, string):\n  matches = re.finditer(expression, string)\n  return [match.group(0) for match in matches]", "category": "Python"}, {"instruction": "Insert 15 random numbers between 0 and 10 in a list.", "input": "", "output": "import random\n\nnumbers = []\nfor i in range(15):\n    numbers.append(random.randrange(0, 10))\nprint(numbers)", "category": "Python"}, {"instruction": "Create a function in python to print all values between two given values. Do not include the two given values in the output.", "input": "", "output": "def print_range(start, end): \n    for value in range(start + 1, end): \n        print(value, end = \" \")", "category": "Python"}, {"instruction": "Edit the given code in Python to produce the desired output.", "input": "lst = [3, 8, 9]\n\nfor i in lst:\n    print(i)\n\nExpected Output:\n3\n8\n9", "output": "lst = [3, 8, 9]\n\nfor i in lst:\n    print(str(i))\n\n# Output\n3\n8\n9", "category": "Python"}, {"instruction": "Name some of the important data types in Python.", "input": "", "output": "The important data types in Python are integers, floats, strings, booleans, lists, tuples, dictionaries and sets.", "category": "Python"}, {"instruction": "Tell me how to print an IMDB movie rating using Python", "input": "", "output": "import imdb\n\n# create an instance of the IMDb class\nia = imdb.IMDb()\n\n# get the movie\nmovie = ia.get_movie('tt0111161') # The Shawshank Redemption\n\n# get the rating\nrating = movie['rating']\n\n# print the rating\nprint(f\"Rating for the movie 'The Shawshank Redemption': {rating}\")", "category": "Python"}, {"instruction": "Write a function to reverse a linked list in O(n) time complexity.", "input": "", "output": "def reverse(head):\n    prev = None\n    curr = head\n    while curr is not None:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    head = prev\n    return head", "category": "Python"}, {"instruction": "Translate the following JavaScript code into Python.", "input": "let x = 10;\nif(x > 0){\n    console.log(\"x is positive\");\n}", "output": "x = 10\nif x > 0:\n    print(\"x is positive\")", "category": "Python"}, {"instruction": "Given a list of lists, generate a single flattened list.", "input": "lst = [[1, 2], [3, 4], [5, 6]]", "output": "lst = [[1, 2], [3, 4], [5, 6]]\nflattened = [item for sublist in lst for item in sublist]\nprint(flattened)", "category": "Python"}, {"instruction": "Create a function that takes two parameters, a string and an integer, and prints the string the given number of times.", "input": "string = \"Hello\"\nnumber = 3", "output": "def printString(string, number):\n    for i in range(number):\n        print(string)\n\nprintString(string, number)", "category": "Python"}, {"instruction": "Given a string containing a comma-separated list of integers, write code to print all the even numbers.", "input": "string = \"23, 2, 5, 16, 1, 9, 8\"", "output": "#Split the string into a list of integers\nnumbers = [int(x) for x in string.split(',')]\n\n#Iterate through the list, if the integer is even, print it\nfor number in numbers:\n    if number % 2 == 0:\n        print(number)", "category": "Python"}, {"instruction": "Implement an algorithm to delete a node in a singly linked list, given only access to the node.", "input": "head = [4, 5, 1, 9]\ndel = 5", "output": "def deleteNode(head, del): \n  \n    # If the node to be deleted is the head node \n    if head.data == del: \n        head = head.next\n        return head \n  \n    # Find previous node of the node to be deleted \n    previous = head \n    while previous.next and previous.next.data != del: \n        previous = previous.next\n  \n    # If node to be deleted is not present in the list \n    if previous.next is None: \n        return head \n  \n    # Change the next pointer of the previos node \n    previous.next = previous.next.next\n  \n    return head", "category": "Python"}, {"instruction": "Write a code that returns the longest substring of the given string without repeating characters.", "input": "string = \"abcabcbb\"", "output": "def longestSubstring(s): \n    length = len(s) \n    longest_string = 0\n    i = 0\n       \n    while (i < length): \n   \n        # Store the last index of the current character \n        last_char_index = -1\n        string_set = set() \n        current_string = 0\n          \n        for j in range(i, length): \n  \n            # If the character is already in string_set \n            if s[j] in string_set: \n                # Update the last index \n                last_char_index = j \n                break\n  \n            else: \n                # Add the character to string_set \n                string_set.add(s[j]) \n  \n                # Increase its length by 1 \n                current_string += 1\n              \n        if longest_string < current_string: \n            longest_string = current_string \n  \n        # Move ahead until the last index \n        i = last_char_index + 1 \n  \n    return longest_string", "category": "Python"}, {"instruction": "Write a function that takes two strings and returns True if one of the strings is the other string reversed.", "input": "string_1 = \"abcde\"\nstring_2 = \"edcba\"", "output": "def isReverse(string_1, string_2):\n    if len(string_1) != len(string_2):\n        return False\n    for i in range(len(string_1)):\n        if string_1[i] != string_2[len(string_2)-i-1]:\n            return False\n    return True", "category": "Python"}, {"instruction": "Explain the difference between a shallow copy and a deep copy.", "input": "", "output": "A shallow copy of an object creates a new object with the same values as the original but with a different location in memory. A deep copy of an object copies not just the values of the original object but also creates copies of any objects that the original object is referencing. The result is two objects which are completely independent of each other.", "category": "Python"}, {"instruction": "Generate code that implements a method to compare two strings.", "input": "", "output": "def compare_strings(str1, str2):\n    if len(str1) != len(str2):\n        return False\n\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            return False\n\n    return True", "category": "Python"}, {"instruction": "Convert the code from OOP to a functional programming style.", "input": "class Employee:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    def print_details(self):\n        print(f\"Name: {self.name}, age: {self.age}\")", "output": "def Employee(name, age):\n    return (name, age)\n\ndef print_details(employee):\n    name, age = employee\n    print(f\"Name: {name}, age: {age}\")", "category": "Python"}, {"instruction": "Implement a function that takes in three string parameters and prints out the longest one.", "input": "", "output": "def longest_string(str1, str2, str3):\n    if len(str1) >= len(str2) and len(str1) >= len(str3):\n        print(str1)\n    elif len(str2) >= len(str1) and len(str2) >= len(str3):\n        print(str2)\n    else:\n        print(str3)", "category": "Python"}, {"instruction": "How many jokes can you write in Python?", "input": "", "output": "There is no definite answer to this question. It depends on the creativity and programming skills of the individual. It is possible to write an infinite number of jokes, but writing a joke that is funny and unique will require more effort and expertise.", "category": "Python"}, {"instruction": "Make a HTTP request to get the content of the given URL.", "input": "https://example.com", "output": "import requests\n\nresponse = requests.get(\"https://example.com\")\nprint(response.content)", "category": "Python"}, {"instruction": "Construct a class which inherits from the parent class by implementing the abstract method.", "input": "class Parent:\n  def __init__(self):\n    pass\n  \n  def parent_func(self):\n    print('Parent Function')\n    \nclass Child(Parent):\n # TODO: implement abstract method", "output": "class Parent:\n  def __init__(self):\n    pass\n  \n  def parent_func(self):\n    print('Parent Function')\n    \nclass Child(Parent):\n  def abstract_method(self):\n    pass", "category": "Python"}, {"instruction": "Write function to encrypt the text with Caesar Cipher.", "input": "text = \"hello\"\nshift = 3", "output": "def caesar_cipher(text, shift):\n    ciphered = ''\n    for char in text:\n        ciphered += chr(ord(char) + shift)\n    return ciphered", "category": "Python"}, {"instruction": "Given a two-dimensional array, write a code to print the elements column-wise.", "input": "[[1, 2], [3, 4], [5, 6]]", "output": "# Define a function to print elements column-wise \ndef print_columnwise(arr):\n\n # Get the number of rows and columns\n num_rows = len(arr)\n num_cols = len(arr[0])\n \n # Initialize the columns \n k = 0\n\n # Iterate through the rows\n while k < num_cols :\n  # Iterate through the columns\n  for i in range(num_rows):\n   # Print the element\n   print(arr[i][k], end=\" \")\n  \n  # Update the column\n  k = k + 1\n  print()\n\n# Get the array\narr = [[1, 2], [3, 4], [5, 6]]\n\n# Print the elements column-wise \nprint_columnwise(arr)", "category": "Python"}, {"instruction": "Create a code to print the items from a given array in reverse.", "input": "[1,2,3,4]", "output": "# Define the function to print array in reverse\ndef print_reverse(arr):\n \n # Base case\n if len(arr) == 0 :\n  return\n\n # Print the last value\n print(arr.pop())\n\n # Recursive call with array - 1 \n return print_reverse(arr)\n\n# Get the array\narr = [1,2,3,4]\n\n# Print the array in reverse\nprint(\"The array in reverse is: \")\nprint_reverse(arr)", "category": "Python"}, {"instruction": "Create a code to raise a number to a given power p.", "input": "2", "output": "# Define the function to raise a number to a given power\ndef power(x, p):\n \n # The base case is when power is 0 \n if p == 0:\n  return 1\n  \n # if power is not 0, then recursively call the function power \n return x * power(x, p-1)\n\n# Get the number\nx = 2\n\n# Get the power\np = 3\n\n# Calculate the result\nresult = power(x, p)\n\n# Print the result\nprint(\"The result is: \", result)", "category": "Python"}, {"instruction": "Write a code to generate 1000 random numbers and print the mean of these random numbers.", "input": "", "output": "# Import the random module\nimport random\n\n# Generate 1000 random numbers \nrandom_numbers = [random.randint(1, 1000) for i in range(1000)]\n\n# Calculate mean of the random numbers\nmean = sum(random_numbers)/len(random_numbers)\n\n# Print mean of random numbers\nprint(\"The mean of 1000 random numbers is: \", mean)", "category": "Python"}, {"instruction": "What data structure would you use to store a matrix in Python", "input": "", "output": "The best data structure to store a matrix in Python is a two-dimensional list. A two-dimensional list is a list of lists where each sub-list represents a row in the matrix. This makes it easy to access and modify values in the matrix.", "category": "Python"}, {"instruction": "How would you code a basic spell-checker", "input": "", "output": "def spell_checker(input_text):\n    correct_words = []\n    wrong_words = []\n    \n    for word in input_text.split():\n        if is_correct(word):\n            correct_words.append(word)\n        else:\n            wrong_words.append(word)\n            \n    return correct_words, wrong_words\n\n# where is_correct() is an appropriate function to determine if the word is spelled correctly or not", "category": "Python"}, {"instruction": "Design a memory efficient algorithm for a given problem.", "input": "Given a list of integers, find the average of all the elements.", "output": "def find_average(nums):\n    length = len(nums)\n    total = 0\n    \n    for i in range(length):\n        total += nums[i]\n        \n    return total / length", "category": "Python"}, {"instruction": "Explain one of the most significant application of neural networks in computer science.", "input": "", "output": "One of the most significant applications of neural networks in computer science is image recognition. Neural networks, with their deep learning capabilities, are able to tackle complex image recognition problems that are difficult to solve with traditional algorithmic approaches. Neural network based systems have been used successfully to identify objects in photos, process real-time video frames, and even to diagnose medical conditions such as cancer.", "category": "Python"}, {"instruction": "How can you use recurrent neural networks for sequence prediction?", "input": "", "output": "Recurrent neural networks (RNNs) can be used for sequence prediction tasks. RNNs are powerful models that are able to capture patterns from sequences of data and can remember information from previous inputs. The network is comprised of layers and nodes, and each layer contains nodes that are connected to the previous layer. When a sequence is fed into the network, the nodes of the first layer are activated based on the input. The output of the first layer serves as the input for the next layer, and so on. As the sequence progresses, the internal state of the network is updated and used to make predictions. The output of the RNN is then a prediction of the next element in the sequence.", "category": "Python"}, {"instruction": "How is AI used in finance?", "input": "", "output": "AI is being increasingly used in finance to improve the accuracy and speed of processes, make better-informed decisions, and streamline customer service. Financial institutions use AI to automate and speed up operations such as accounts payable and receivable, loans underwriting, money management, fraud detection, and decision-making in stock markets. AI can also be used to help manage large amounts of data and detect patterns in the data. For example, AI can be used to perform sentiment analysis on large amounts of customer data or to detect potential fraudulent activity. It can also provide insights into customer behavior and preferences that can be used to personalize services and create targeted product offerings.", "category": "Python"}, {"instruction": "How do you develop a software application through agile?", "input": "", "output": "Developing a software application through agile is a process that systematically focuses on small, incremental changes that are then tested on a regular basis to ensure their effectiveness. This type of development conflicts with traditional linear development approaches that focus on big, planned and predetermined changes. Agile development cycles include iterative sprints and frequent collaboration between stakeholders to ensure the project is proceeding in the right direction. In agile, software development proceeds in a cyclic and iterative manner, which involves planning, designing, coding, and testing. During the sprints, stakeholders review and discuss software progress to ensure continued progress is being made and to help with decision making. Agile development typically involves using automated tools and technologies such as configuration management software and integrated development environments to facilitate quicker development cycles.", "category": "Python"}, {"instruction": "Create a function that takes two strings as parameters, compares them, and returns 0 if they are equal, 1 if the first string is greater, and -1 if the second string is greater.", "input": "", "output": "def compare_strings(str1, str2):\n    if str1 == str2:\n        return 0\n    elif str1 > str2:\n        return 1\n    else:\n        return -1", "category": "Python"}, {"instruction": "Create a class to illustrate the concept of encapsulation in Python.", "input": "", "output": "class Car:\n    def __init__(self, brand, model, year):\n        self.__brand = brand\n        self.__model = model\n        self.__year = year\n    \n    def get_brand(self):\n        return self.__brand\n    \n    def get_model(self):\n        return self.__model\n    \n    def get_year(self):\n        return self.__year", "category": "Python"}, {"instruction": "Create a program that finds the average of two numbers.", "input": "7 and 9", "output": "def find_average(num1, num2):\n    return (num1 + num2) / 2\n\nif __name__ == '__main__':\n    print(find_average(7, 9))", "category": "Python"}, {"instruction": "Using the array below, count the occurrence of the number 3.", "input": "arr = [1, 1, 2, 3, 3, 3, 4, 5]", "output": "arr = [1, 1, 2, 3, 3, 3, 4, 5]\n\ndef count_number(arr, num):\n    count = 0\n    for val in arr:\n        if val == num:\n            count += 1\n    return count\n\ncount = count_number(arr, 3)\nprint(count)  # Output: 3", "category": "Python"}, {"instruction": "Given an array of integers, replace each element of the array with its square.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def get_squares(arr):\n    squares = []\n    for num in arr:\n        squares.append(num ** 2)\n    return squares\n\narr = [1, 2, 3, 4, 5]\nsquares = get_squares(arr)\n\nprint(*squares)  # Output: 1 4 9 16 25", "category": "Python"}, {"instruction": "Sort the following list of numbers in increasing order without using any built-in sorting method.", "input": "arr = [2, 5, 3, 8, 7]", "output": "def sort_increasing(arr):\n    for i in range(len(arr)):\n        min_index = i\n        for j in range(i, len(arr)):\n            if arr[min_index] > arr[j]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr\n\narr = [2, 5, 3, 8, 7] \nsorted_arr = sort_increasing(arr)\nprint(*sorted_arr) # Output: 2 3 5 7 8", "category": "Python"}, {"instruction": "Programmatically generate a random password of length 8 that contains at least one lowercase letter, one uppercase letter, one number, and one special character.", "input": "", "output": "import string\nimport random\n\ndef generate_password():\n    letters = string.ascii_letters\n    numbers = string.digits\n    symbols = string.punctuation\n\n    chars = letters + numbers + symbols\n    length = 8\n\n    password = \"\".join(random.sample(chars, length))\n    if any(char.islower() for char in password) \\\n        and any(char.isupper() for char in password) \\\n            and any(char.isdigit() for char in password) \\\n                and any(char in symbols for char in password):\n        return password\n\nrandom_password = generate_password()\nprint(random_password)  # Output: eQ@0?St$", "category": "Python"}, {"instruction": "Given the following array and a number k, determine if two elements from the array add up to k.", "input": "arr = [10, 15, 3, 7], k = 17", "output": "def findSum(arr, k):\n    s = set()\n    for num in arr:\n        diff = k - num\n        if diff in s:\n            return True\n        s.add(num)\n    return False\n\narr = [10, 15, 3, 7] \nk = 17 \nprint(findSum(arr, k))  # Output: True", "category": "Python"}, {"instruction": "Replace the values in the following array with its cumulative sum.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def cumulative_sum(arr):\n    cum_sum = []\n    temp_sum = 0\n    for num in arr:\n        temp_sum += num\n        cum_sum.append(temp_sum)\n    return cum_sum\n\narr = [1, 2, 3, 4, 5] \ncum_sum = cumulative_sum(arr)\n\nprint(cum_sum)  # Output: [1, 3, 6, 10, 15]", "category": "Python"}, {"instruction": "Given the following text, create a Python function that finds the number of unique words in the text.", "input": "This is a sample text to find the number of unique words.", "output": "def find_unique_words(text):\n    words = set(text.split(\" \"))\n    return len(words)\n\nunique_words = find_unique_words(\"This is a sample text to find the number of unique words.\")\nprint(unique_words)", "category": "Python"}, {"instruction": "Create an algorithm to determine if two strings are rotations of each other.", "input": "\"abcde\", \"eabcd\"", "output": "def is_rotation(str1, str2):\n    return len(str1) == len(str2) and str2 in str1+str1", "category": "Python"}, {"instruction": "Create a function to get the root of a quadratic equation", "input": "1, 4, 4", "output": "def get_roots_of_quad_eqn(a, b, c):\n    # compute discriminant \n    d = (b**2) - (4 * a * c)\n    \n    # compute roots\n    root1 = (-b + math.sqrt(d)) / (2 * a) \n    root2 = (-b - math.sqrt(d)) / (2 * a) \n    \n    # return the roots\n    return root1, root2\n\nif __name__ == '__main__':\n    a, b, c = 1, 4, 4\n    print(get_roots_of_quad_eqn(a, b, c))", "category": "Python"}, {"instruction": "Using Tensorflow, set up a model to predict the classification of a handwritten digit.", "input": "", "output": "import tensorflow as tf\n\n#load the MNIST data\nmnist = tf.keras.datasets.mnist\n\n#split the data into train and test\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n#normalize the data between 0 and 1\nx_train = tf.keras.utils.normalize(x_train, axis=1)\nx_test = tf.keras.utils.normalize(x_test, axis=1)\n\n#build the model\nmodel = tf.keras.models.Sequential()\n\n# add the input layer of the model\nmodel.add(tf.keras.layers.Flatten())\n\n# add the hidden layers\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))\n\n#add the output layer\n#NOTE: We are using output dimension as 10 because we are trying to predict 10 classifications (i.e. 0 to 9)\nmodel.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))\n\n#compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n#train the model\nmodel.fit(x_train, y_train, epochs=3)\n\n#evaluate the model\nval_loss, val_acc = model.evaluate(x_test, y_test) \nprint(val_loss, val_acc)", "category": "Python"}, {"instruction": "Design a function that will print out the leap years in a given interval", "input": "From 2015 to 2050", "output": "def print_leap_years(start_year, end_year): \n    for year in range(start_year, end_year + 1):\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            print(year)\n\nprint_leap_years(2015, 2050)", "category": "Python"}, {"instruction": "Explain why it is important to have exception handling", "input": "", "output": "Exception handling is important for a program as it allows the program to gracefully handle any unexpected or erroneous conditions. This helps keep the program running by providing meaningful feedback and prompts to the user. It also helps reduce the risk of having some part of the program crashing due to an unforeseen and avoidable event. Exception handling also encourages developers to write more robust and structured code as they are aware that their code might be faced with unpredictable conditions, and they will expect their code to be able to handle them gracefully.", "category": "Python"}, {"instruction": "create a function that calculates the total cost of a meal including taxes and tips.", "input": "meal_price = 35\nsales_tax = 0.09\ntip_percentage = 0.18", "output": "\"\"\"\nCreate a function that calculates the total cost of a meal including taxes and tips\n\"\"\"\n\ndef calculate_total_meal_cost(meal_price, sales_tax, tip_percentage): \n    # Calculate subtotal\n    subtotal = meal_price + meal_price * tip_percentage\n    # Calculate tax\n    tax =  subtotal * sales_tax\n    # Calculate total\n    total = subtotal + tax\n\n    return total\n\nif __name__ == '__main__': \n    meal_price = 35\n    sales_tax = 0.09\n    tip_percentage = 0.18\n    print(\"Total cost of meal is: \" + str(calculate_total_meal_cost(meal_price, sales_tax, tip_percentage)))", "category": "Python"}, {"instruction": "How would you check an integer is divisible by 7 or not in Python?", "input": "", "output": "We can use the modulo operator (%) to check if an integer is divisible by another number in Python.\n\nThe modulo operator (%) returns the remainder of the division. If the remainder is zero then the two numbers are divisible.\n\nFor example, to check if an integer is divisible by 7, we can use:\n\nif (x % 7) == 0:\n    # x is divisible by 7\nelse:\n    # x is not divisible by 7", "category": "Python"}, {"instruction": "Explain the concept of merging two sorted lists.", "input": "", "output": "Merging two sorted lists involves examining elements of each list and inserting them in order into a third list. This process continues until all elements from the two lists have been inserted into the third resulting list. The algorithm requires that the two starting lists be in sorted order, although the elements can be in any order (ascending, descending, or random) as long as each list is sorted.", "category": "Python"}, {"instruction": "Given the following 2D array. Create a function to find the sum of each row.", "input": "Array = [[2, 5, 6], [4, 1, 3], [5, 9, 0]]", "output": "def sum_row(arr):\n    total = []\n    for row in arr:\n        total.append(sum(row))\n    return total", "category": "Python"}, {"instruction": "Suppose we have a list of numbers, write a Python code to compute the average of the list.", "input": "list = [1, 5, 8, 9, 10]", "output": "def find_average(list):\n    sum = 0\n    for num in list:\n        sum += num\n    return sum/len(list)", "category": "Python"}, {"instruction": "Design an object-oriented class in Python that stores a book's title, author, and publisher.", "input": "", "output": "class Book:\n  \n  def __init__(self, title, author, publisher):\n    self._title = title\n    self._author = author\n    self._publisher = publisher\n\n  def get_title(self):\n    return self._title\n\n  def set_title(self, title):\n    self._title = title\n\n  def get_author(self):\n    return self._author\n  \n  def set_author(self, author):\n    self._author = author\n\n  def get_publisher(self):\n    return self._publisher\n  \n  def set_publisher(self, publisher):\n    self._publisher = publisher", "category": "Python"}, {"instruction": "Build a Python dictionary that contains five elements.", "input": "", "output": "myDictionary = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\",\n  \"key4\": \"value4\",\n  \"key5\": \"value5\"\n}", "category": "Python"}, {"instruction": "Build a Python function that normalizes a given array.", "input": "array = [4, 8, 15, 23, 42]", "output": "def normalize(array):\n    min_val = min(array)\n    max_val = max(array)\n    normalized = [ (x-min_val) / (max_val-min_val) for x in array]\n  return normalized", "category": "Python"}, {"instruction": "Given an array of integers, write a function to find the maximum difference between a lower element and an upper element.", "input": "Array: [3, 10, 2, 6, 4, 8, 1]", "output": "def findMaxDifference(arr):\n    min_element = arr[0]\n    max_difference = arr[1] - arr[0]\n    for num in arr:\n        if num - min_element > max_difference:\n            max_difference = num - min_element\n        if num < min_element:\n            min_element = num\n    return max_difference", "category": "Python"}, {"instruction": "What is the basic syntax to define a function in Python 3?", "input": "", "output": "def function_name(parameters):\n    \"\"\" function docstring \"\"\"\n    statement(s)", "category": "Python"}, {"instruction": "Suggest a data structure to efficiently store a set of phone numbers", "input": "", "output": "A good data structure for efficiently storing a set of phone numbers is a Hash Table. This data structure uses a hash function to map each phone number to the value(s) associated with it and stores the values in a linked list. This data structure provides constant time lookup, insert and delete operations, making it ideal for storing a large set of phone numbers.", "category": "Python"}, {"instruction": "Explain how you would use the givew array to create a valid JSON output.", "input": "array = [\n  \"firstname\" => \"Nikola\", \n  \"lastname\" => \"Tesla\", \n  \"birthdate\" => \"10-07-1856\"\n ]", "output": "We can use the given array to create a valid JSON output by first converting it into an object by wrapping it in curly brackets and then assign keys for each value. For example, \n{\n  \"firstname\": \"Nikola\", \n  \"lastname\": \"Tesla\", \n  \"birthdate\": \"10-07-1856\"\n }\nOnce the object is created, it need to be converted to a JSON string using a JSON library such as JSON.stringify() method in JavaScript. The resulting string looks like this:\n\n\"{\\\"firstname\\\":\\\"Nikola\\\",\\\"lastname\\\":\\\"Tesla\\\",\\\"birthdate\\\":\\\"10-07-1856\\\"}\"", "category": "Python"}, {"instruction": "Implement a class in Python which implements the given method.", "input": "class Test:\n    def print_name(name):\n        print(name)", "output": "class Test:\n    def print_name(self, name):\n        print(name)", "category": "Python"}, {"instruction": "Create a new dictionary in Python with the given keys and values.", "input": "Keys: A, B\nValues: 1, 2", "output": "d = {'A': 1, 'B': 2}", "category": "Python"}, {"instruction": "Develop a function to fetch the maximum element from a given dictionary.", "input": "d = {'Name': 'John', 'Age': 28, 'Score': 98}", "output": "def getMaxElement(d): \n  maxElement = max(d.values()) \n  for key, value in d.items(): \n    if (value == maxElement):  \n        return key, value", "category": "Python"}, {"instruction": "Create a loop through a given list of numbers and check if the number is divisible by 3.", "input": "nums = [3, 5, 7, 8, 10, 11]", "output": "for num in nums:\n  if num % 3 == 0:\n    print (f\"{num} is divisible by 3.\")", "category": "Python"}, {"instruction": "Apply K-means clustering to a 3-dimensional dataset given a certain number of clusters.", "input": "Number of Clusters = 4", "output": "from sklearn.cluster import KMeans\n\n# prepare the data\nX = [... the 3-dimensional dataset ...]\n\n# define the clustering model\nkmeans_model = KMeans(n_clusters=4)\n\n# fit the model\nkmeans_model.fit(X)\n\n# get the cluster centers\ncluster_centers = kmeans_model.cluster_centers_\n\n# get the labels for each point\nlabels = kmeans_model.labels_", "category": "Python"}, {"instruction": "Train a machine learning model for a classification problem.", "input": "X = [[0, 1], [1, 1], [0, 0], [1, 0]]\ny = [1, 0, 1, 0]", "output": "# importing the necessary libraries\nimport numpy as np \nfrom sklearn.svm import SVC \n\n# creating a svm classifier\nclf = SVC(kernel = 'linear') \n\n# fitting the model \nclf.fit(X, y)", "category": "Python"}, {"instruction": "Run a sentiment analysis on a given text.", "input": "Text: \"The movie was amazing!\"", "output": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nanalyzer = SentimentIntensityAnalyzer()\n\n# run sentiment analysis\nsentiment = analyzer.polarity_scores(text)\n\nfor key in sentiment:\n    print('{0}: {1}'.format(key, sentiment[key]))\n\n# output\ncompound: 0.6249\nneg: 0.0\nneu: 0.406\npos: 0.594", "category": "Python"}, {"instruction": "Design a function that takes two parameters a and two and returns the result of a multiplied by two", "input": "", "output": "def mul_two(a, b):\n    return a * b\n\nif __name__ == '__main__':\n    x = int(input('Enter first number: '))\n    y = int(input('Enter second number: '))\n    print(mul_two(x, y))", "category": "Python"}, {"instruction": "Create a program to identify a given string as a valid ISBN 10 code", "input": "", "output": "def is_valid_isbn_10(code):\n    # check for the length\n    if len(code) != 10:\n        return False\n    # check for leading \"X\" characters\n    if code.startswith(\"X\"):\n        return False\n    # check for digits\n    if not code.isdigit():\n        return False\n    # calculate the check digit\n    sum = 0\n    for i in range(9): \n        sum += int(code[i]) * (10 - i)\n    checksum = sum % 11\n    # check for valid check digit\n    if not (checksum==int(code[9]) or (checksum == 10 and code[9] == 'X')):\n        return False\n    # No errors found\n    return True\n\nif __name__ == '__main__':\n    code = input('Enter the ISBN-10 code: ')\n    print(is_valid_isbn_10(code))", "category": "Python"}, {"instruction": "Create an algorithm that returns an array of the unique items in a given list.", "input": "[1, 2, 4, 2, 5, 6, 7, 1, 4]", "output": "def unique(arr):\n    unique_list = []\n    for el in arr:\n        if el not in unique_list:\n            unique_list.append(el)\n    return unique_list", "category": "Python"}, {"instruction": "Find the average value of the following array in Python.", "input": "arr = [1,2,3,4,5]", "output": "import numpy as np\n\narr = [1,2,3,4,5]\naverage = np.mean(arr)\nprint(f\"The average of the array is: {average}\")", "category": "Python"}, {"instruction": "Write a regex (in Python) to match the following pattern: \"an apple a day keeps the doctor away\"", "input": "", "output": "import re\n\nregex = r\"\\ban\\sapple\\s\\ba\\sday\\skeeps\\sthe\\sdoctor\\saway\\b\"", "category": "Python"}, {"instruction": "Create a function to format a given list of numbers with commas as thousands separators.", "input": "", "output": "def format_numbers(nums):\n    formatted_nums = []\n    for num in nums:\n        formatted_nums.append(\"{:,}\".format(num))\n    return formatted_nums", "category": "Python"}, {"instruction": "Using the given NumPy array, print out all the elements that are greater than 5.", "input": "import numpy as np\n\narr = np.array([4, 6, 2, 8, 0, 7, 5])", "output": "import numpy as np\n\narr = np.array([4, 6, 2, 8, 0, 7, 5])\n\nprint(\"Elements greater than 5:\")\nfor element in arr:\n if element > 5:\n print(element)", "category": "Python"}, {"instruction": "Write a Python code to search for a given keyword in a dictionary.", "input": "dictionary = {\n    \u201cCar\u201d: \u201cA vehicle with four wheels\u201d,\n    \u201cLaptop\u201d: \u201cA computer for personal use\u201d,\n    \u201cGame\u201d: \u201cAn activity for entertainment\u201d\n    }", "output": "def search(dic, keyword):\n    for key, value in dic.items():\n        if keyword in key:\n            return value\n    return \"No matching keyword found!\"\nsearch(dictionary, 'Laptop')", "category": "Python"}, {"instruction": "Use a built-in Python method to print the contents of a list in reverse order.", "input": "arr = [1, 2, 3, 4]", "output": "# use a built-in python method to print the list in reverse order\narr.reverse() # using the list reverse method\nprint(arr)", "category": "Python"}, {"instruction": "Using a dictionary comprehension, select the keys that start with a specific letter.", "input": "d = {'cat' : 1, 'dog' : 2, 'mouse' : 3}", "output": "# select the keys that start with 'c'\ndict = {k: v for k, v in d.items() if k.startswith('c')}", "category": "Python"}, {"instruction": "Generate a unique ID for a given string.", "input": "s = \"Hello World\"", "output": "# generate a unqiue ID for the given string\nimport uuid \n  \n# string \nstring = \"Hello World\"\n  \n# printing the original string \nprint(\"The original string is : \" + string) \n  \n# generating the unique ID \nstring_id = uuid.uuid4() \n  \n# printing the unique ID \nprint(\"The unique id for given string is : \", string_id)", "category": "Python"}, {"instruction": "Construct a for loop to check for prime numbers up to a given number.", "input": "n = 20", "output": "# construct a for loop to check for prime numbers up to 20\nfor num in range(2, n+1):\n    isPrime = True\n    \n    for i in range(2, num):\n        if (num % i == 0):\n            isPrime = False\n            break\n    if isPrime:\n        print(num, \" is a prime number\")", "category": "Python"}, {"instruction": "Add an 'except' statement to the following python code to prevent a ValueError.", "input": "a = 5\nb = 0\n\ntry:\n    c = a / b", "output": "a = 5\nb = 0\n\ntry:\n    c = a / b\nexcept ZeroDivisionError:\n    print(\"b cannot be zero\")", "category": "Python"}, {"instruction": "Using a recursive algorithm, reverse the order of elements in a list.", "input": "arr = [1, 2, 3, 4, 5]", "output": "# recursive approach\ndef recursive_reverse(arr, length):\n    if length == 0:\n        return\n\n    recursive_reverse(arr, length - 1)\n    arr.append(arr[length - 1])\n    arr.pop(length - 1)\n    \n# call function on the data\nrecursive_reverse(arr, len(arr))", "category": "Python"}, {"instruction": "Create a matrix of 5 x 4 and set the values to 0.", "input": "", "output": "# create a matrix of 5 x 4\nmatrix = [[0 for x in range(4)] for y in range(5)]", "category": "Python"}, {"instruction": "For a given list of numbers, write a palindrome checker.", "input": "sample = [1, 2, 3, 4, 5, 4, 3, 2, 1]", "output": "def is_palindrome(sample):\n    res = True\n    i = 0\n    j = len(sample) - 1\n    while i < j:\n        if sample[i] != sample[j]:\n            res = False\n            break\n        else:\n            i += 1\n            j -= 1\n            \n    return res", "category": "Python"}, {"instruction": "Find the 2 smallest elements in a Python list of integers.", "input": "[2, 3, 5, 8, 4, 9, 11]", "output": "min1, min2 = list[0], list[1]\nfor num in list:\n    if num < min1:\n        min2 = min1\n        min1 = num\n    elif num < min2:\n        min2 = num", "category": "Python"}, {"instruction": "Create a class in Python with the attributes name and age.", "input": "", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "category": "Python"}, {"instruction": "Create an array of 10 numbers in Python with values from 0 to 9.", "input": "", "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "category": "Python"}, {"instruction": "Create a for loop in Python that traverse a list and prints out every second element", "input": "lst = [1,2,3,4,5]", "output": "for i in range(0, len(lst), 2):\n    print(lst[i])", "category": "Python"}, {"instruction": "Create a function that takes two strings, s1 and s2, and checks to see if s2 is a substring of s1", "input": "s1 = \"Hello World\"\ns2 = \"Hello\"", "output": "def isSubstring(s1, s2): \n    if s2 in s1: \n        return True\n    else: \n        return False", "category": "Python"}, {"instruction": "Formulate a statement using Python that will return the value 'True' when the user's age is equal to 21.", "input": "userage = 21", "output": "if userage == 21:\n    print(True)", "category": "Python"}, {"instruction": "Create a list containing the number of characters in each word of the sentence.", "input": "sentence = \"the quick brown fox jumps over the lazy dog\"", "output": "def count_characters_per_word(sentence):\n    words = sentence.split(' ') \n    char_count_per_word = [] \n    for word in words:\n        char_count_per_word.append(len(word)) \n    return char_count_per_word\n\nprint(count_characters_per_word(\"the quick brown fox jumps over the lazy dog\"))\n# Output: [3, 5, 5, 3, 5, 3, 4, 3]", "category": "Python"}, {"instruction": "Create a dictionary containing the count of each word in the sentence.", "input": "sentence = \"the quick brown fox jumps over the lazy dog\"", "output": "def count_words(sentence):\n    words = sentence.split()\n    word_count = {}\n    for word in words:\n        if word in word_count.keys():\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count\n\nprint(count_words(\"the quick brown fox jumps over the lazy dog\"))\n# Output: {'the': 2, 'quick': 1, 'brown': 1, 'fox': 1, 'jumps': 1, 'over': 1, 'lazy': 1, 'dog': 1}", "category": "Python"}, {"instruction": "Design a function to filter words based on give characters.", "input": "characters = \"aeiou\"\nwords = ['apple','elephant','mountain','river']", "output": "def filter_words(characters, words):\n    result = []\n    for word in words:\n        if set(characters).issubset(word):\n            result.append(word)\n    return result\n\nprint(filter_words(\"aeiou\", ['apple','elephant','mountain','river']))\n# Output: ['apple', 'elephant', 'river']", "category": "Python"}, {"instruction": "Given a list of numbers, write a Python program to find the maximum and minimum number.", "input": "[4, 7, -2, 11, 9]", "output": "Maximum Number = 11\nMinimum Number = -2", "category": "Python"}, {"instruction": "Create an API endpoint for the following model.", "input": "class Comment(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)", "output": "from django.http import JsonResponse\n\ndef comments_list(request):\n    if request.method == 'GET':\n        comments = Comment.objects.all()\n        comments_list = [{\n            'id': comment.id,\n            'user': comment.user.username,           \n            'content': comment.content,\n            'created_at': comment.created_at,\n            'updated_at': comment.updated_at\n        } for comment in comments]\n        return JsonResponse(comments_list, safe=False)", "category": "Python"}, {"instruction": "Add a feature to the following code that prints the current date and time.", "input": "def hello_world():\n    print(\"Hello world!\")", "output": "import datetime\ndef hello_world():\n    print(\"Hello world!\")\n    now = datetime.datetime.now()\n    print(now.strftime(\"%Y-%m-%d %H:%M:%S\"))", "category": "Python"}, {"instruction": "Describe the sorting algorithm Bubble Sort.", "input": "", "output": "Bubble sort is an algorithm for sorting a collection of items. It iterates over the collection and compares adjacent items, swapping them if they are out of order. This step is repeated until all items are sorted. Bubble sort has a time complexity of O(n^2), making it a slow sorting algorithm. It is still often used as it is simple to implement and requires little memory.", "category": "Python"}, {"instruction": "Write a python to convert an IP address from dot-decimal notation to binary notation.", "input": "192.168.1.1", "output": "def convert_ip_address(ip_address):\n    \"\"\"\n    Convert IP address from dot-decimal notation (e.g. 192.168.1.1) to binary.\n    \"\"\"\n    # Split the IP address in octets\n    octets = ip_address.split('.')\n    \n    # Convert each octet to binary\n    binary_octets = [bin(int(numeric_octet))[2:].zfill(8) for numeric_octet in octets]\n    \n    # Join the binary octets and return the IP address in binary notation\n    return ''.join(binary_octets)\n\nif __name__ == '__main__':\n    ip_address = '192.168.1.1'\n    print(convert_ip_address(ip_address))", "category": "Python"}, {"instruction": "Create a program in python that sorts a given list.", "input": "", "output": "def bubbleSort(arr):\n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [64, 34, 25, 12, 22, 11, 90] \n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "category": "Python"}, {"instruction": "Write a code to output the cosine similarity between two vectors.", "input": "vector1 = [1, 2, 3]\nvector2 = [4, 5, 6]", "output": "import numpy as np\n\ndef cosine_similarity(vector1, vector2):\n    \n    # normalize the vectors\n    v1 = np.array(vector1)/np.linalg.norm(vector1)\n    v2 = np.array(vector2)/np.linalg.norm(vector2)\n    \n    # calculate cosine similarity\n    return np.dot(v1, v2) \n    \nif __name__ == '__main__':\n    vector1 = [1, 2, 3]\n    vector2 = [4, 5, 6]\n    print(cosine_similarity(vector1, vector2))", "category": "Python"}, {"instruction": "Using numpy, write a code to multiply matrix A and B together", "input": "matrix A:\n[[1, 2], [3, 4]]\nmatrix B:\n[[5, 6], [7, 8]]", "output": "import numpy as np\n\ndef matrix_multiply(A, B):\n    \"\"\"\n    Multiply matrix A and B using numpy\n    \"\"\"\n    # Convert the matrices to numpy arrays\n    A = np.array(A)\n    B = np.array(B)\n    \n    # Multiply the matrices\n    C = np.dot(A, B)\n    \n    return C\n\nif __name__ == '__main__':\n    # example matrices\n    A = [[1, 2], [3, 4]]\n    B = [[5, 6], [7, 8]] \n    print(matrix_multiply(A, B))", "category": "Python"}, {"instruction": "Write code to find the maximum sum for a contiguous subarray of a given array.", "input": "", "output": "def max_sum_subarray(nums):\n    current_sum = 0\n    max_sum = -float('inf')\n    for num in nums:\n        current_sum += num\n        max_sum = max(max_sum, current_sum)\n        current_sum = max(current_sum, 0)\n    return max_sum", "category": "Python"}, {"instruction": "Create a function to parse a string that has lines of key/value pairs and return a dictionary of the values paired with the keys.", "input": "", "output": "def parse_key_value_pairs(string):\n    result = {}\n    lines = string.split(\"\\n\")\n    for line in lines:\n        if line:\n            key, value = line.split(\":\")\n            result[key] = value\n    return result", "category": "Python"}, {"instruction": "Create a class to represent a calculator with the following methods: add, subtract, multiply, and divide", "input": "", "output": "class Calculator:\n    def add(self, num1, num2):\n        return num1 + num2\n\n    def subtract(self, num1, num2):\n        return num1 - num2\n\n    def multiply(self, num1, num2):\n        return num1 * num2\n\n    def divide(self, num1, num2):\n        return num1 / num2", "category": "Python"}, {"instruction": "Create a function that takes a list of numbers and identifies the sublists of numbers that add up to a given sum.", "input": "", "output": "def sublist_sum(nums, target):\n    result = []\n    current_sum = 0\n    start = 0\n    for end in range(len(nums)):\n        current_sum += nums[end]\n        while current_sum > target and start < end:\n            current_sum -= nums[start]\n            start += 1\n        if current_sum == target:\n            result.append(nums[start:end+1])\n    return result", "category": "Python"}, {"instruction": "Make a single change in the following code to throw an error when the argument to the function is negative.", "input": "def calculate_square_root(n):\n    return n**(1/2)", "output": "def calculate_square_root(n):\n    if n < 0:\n        raise ValueError(\"n must be a positive number\")\n    return n**(1/2)", "category": "Python"}, {"instruction": "Write code to iterate through a nested dictionary and return the sum of all values.", "input": "dictionary = {\n 'level1': {\n  'level2a': {\n   'level3a': 1,\n   'level3b': 3\n  },\n  'level2b': {\n   'level3a': 4,\n   'level3b': 5\n  }\n }\n}", "output": "dictionary = {\n 'level1': {\n  'level2a': {\n   'level3a': 1,\n   'level3b': 3\n  },\n  'level2b': {\n   'level3a': 4,\n   'level3b': 5\n  }\n }\n}\n\ndef iterate_dict(d):\n    result = 0\n    for value in d.values():\n        if type(value) is dict:\n            result += iterate_dict(value)\n        else:\n            result += value\n    return result\n\nprint(iterate_dict(dictionary)) # 13", "category": "Python"}, {"instruction": "Design a class in Python to model a hospital.", "input": "", "output": "class Hospital:\n    def __init__(self, location, name, rooms, staff):\n        self.location = location\n        self.name = name\n        self.rooms = rooms\n        self.staff = staff\n    \n    def get_location(self):\n        return self.location\n    \n    def get_name(self):\n        return self.name\n    \n    def get_rooms(self):\n        return self.rooms\n    \n    def get_staff(self):\n        return self.staff\n    \n    def set_location(self, location):\n        self.location = location\n    \n    def set_name(self, name):\n        self.name = name\n    \n    def set_rooms(self, rooms):\n        self.rooms = rooms\n    \n    def set_staff(self, staff):\n        self.staff = staff", "category": "Python"}, {"instruction": "What is the difference between post() and get() in AJAX?", "input": "", "output": "The main difference between post() and get() in AJAX is that post() sends the data in the body of the request and get() sends it in the URL. Post() is generally used to send form data, and can be used for creating or updating data on the server. Get() is usually used for requesting data from the server, and can be used for reading data from the server.", "category": "Python"}, {"instruction": "How do you connect to a MySQL database in Python?", "input": "", "output": "You can connect to a MySQL database in Python using the mysql.connect() method. The syntax of this method is as follows:\n\nmysql.connect(host=\"localhost\", user=\"username\", password=\"password\", database=\"database_name\")\n\nOnce you have successfully connected to the MySQL database, you can run SQL queries or perform other operations.", "category": "Python"}, {"instruction": "Write a function to reverse a given sentence in Python.", "input": "Given sentence: \"The quick brown fox jumps over the lazy dog.\"", "output": "def reverse_sentence(sentence):\n    words = sentence.split()\n    reversed_words = words[::-1]\n    reversed_sentence = ' '.join(reversed_words)\n    return reversed_sentence\n\nif __name__ == '__main__': \n    sentence = \"The quick brown fox jumps over the lazy dog.\"\n    print(reverse_sentence(sentence))", "category": "Python"}, {"instruction": "Write an algorithm to identify below number is prime or not.", "input": "7", "output": "# Function to check for prime number \ndef isPrime(n): \n      \n    # Corner cases \n    if n <= 1: \n        return False\n  \n    # Check from 2 to n-1 \n    for i in range(2, n): \n        if n % i == 0: \n            return False\n  \n    return True\n\n# Driver Program \nif isPrime(7):\n    print(\"YES! It is a prime number\")\nelse:\n    print(\"No! It is not a prime number\")", "category": "Python"}, {"instruction": "Create a Python script to generate a random password of 8 characters that contains an uppercase letter, a special symbol and a number.", "input": "", "output": "import random\nimport string\n\ndef generate_random_password():\n  password = \"\"\n  character_types = string.ascii_letters + string.digits + string.punctuation\n  length = 8\n  for _ in range(length):\n    password += random.choice(character_types)\n  return password\n\nprint(generate_random_password())", "category": "Python"}, {"instruction": "Inject a variable in a Python script, named \"greeting_message\" with the value \"hello world\"", "input": "", "output": "greeting_message = \"hello world\"", "category": "Python"}, {"instruction": "Parse the following JSON string in Python.", "input": "{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}", "output": "import json\n\ndata = '{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}'\n\n# parse the JSON string\nparsed_string = json.loads(data) \n\n# print the individual elements\nname = parsed_string[\"name\"]\nage = parsed_string[\"age\"]\ncity = parsed_string[\"city\"]\n\nprint(name)\nprint(age)\nprint(city)", "category": "Python"}, {"instruction": "Create a visualization in Matplotlib to display sales figures over the last 6 months.", "input": "", "output": "import matplotlib.pyplot as plt\nimport numpy as np\n \nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']\nsales = [40000, 42000, 46000, 50000, 60000, 63000]\n \nfig, ax = plt.subplots()\nax.plot(months, sales, marker='o')\nax.set_title('Monthly Sales')\nax.set_xlabel('Month')\nax.set_ylabel('Sales ($)')\nax.set_ylim(0, max(sales) + 5000)\n \nplt.show()", "category": "Python"}, {"instruction": "Using the comments as a guide, fill in the blanks with code where applicable to make the function jumbledLetters() work.", "input": "def jumbledLetters(word):\n    \"\"\"Returns a randomly jumbled version of the given word.\"\"\"\n    new_word = \"\"\n    for letter in word:\n        #__TODO__ use the random module to generate a number between 0 and the length of the word\n        num = ____ \n        #__TODO__ add the letter to the string `new_word` using the `num` generated in the previous step\n        ____ \n    return new_word", "output": "def jumbledLetters(word):\n    \"\"\"Returns a randomly jumbled version of the given word.\"\"\"\n    new_word = \"\"\n    for letter in word:\n        #__TODO__ use the random module to generate a number between 0 and the length of the word\n        num = random.randint(0, len(word)-1)\n        #__TODO__ add the letter to the string `new_word` using the `num` generated in the previous step\n        new_word += word[num]\n    return new_word", "category": "Python"}, {"instruction": "Write a python program that takes in two input strings and checks if the second string is an anagram of the first one.", "input": "silent, listen", "output": "def anagram_check (str1, str2): \n    if(sorted(str1)== sorted(str2)): \n        print(\"The strings are anagrams.\")  \n    else: \n        print(\"The strings aren't anagrams.\")         \n\n# Driver code \nstr1 = \"silent\"\nstr2 = \"listen\"\nanagram_check(str1, str2)", "category": "Python"}, {"instruction": "Generate the Fibonacci sequence using a for loop in Python.", "input": "", "output": "def generateFibonacciSequence(n):\n    fib_sequence = [0,1]\n    for i in range(2,n):\n        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])\n        \n    return fib_sequence", "category": "Python"}, {"instruction": "Implement quicksort algorithm in Python for a list of integers.", "input": "[4, 2, 5, 3, 1]", "output": "def quicksort(arr):\n\tif len(arr) <= 1:\n\t\treturn arr\n\tpivot = arr[len(arr) // 2]\n\tleft = [x for x in arr if x < pivot]\n\tmiddle = [x for x in arr if x == pivot]\n\tright = [x for x in arr if x > pivot]\n\treturn quicksort(left) + middle + quicksort(right)", "category": "Python"}, {"instruction": "Create a function to return all possible sums of two numbers.", "input": "", "output": "def two_num_sums(nums):\n    \"\"\"Returns a list of all possible sums of two numbers from nums.\"\"\"\n    combinations = []\n\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            combination = nums[i]+nums[j]\n            combinations.append(combination)\n\n    return combinations", "category": "Python"}, {"instruction": "Take in a JSON string and convert it into a valid Python 3 dictionary.", "input": "'{\"name\": \"john\", \"age\": 32}'", "output": "{'name': 'john', 'age': 32}", "category": "Python"}, {"instruction": "Write a set of if-else statements to convert numerical grade 1-100 to their letter grade equivalent.", "input": "", "output": "if grade >= 90:\n  letter_grade = 'A'\nelif grade >= 80:\n  letter_grade = 'B'\nelif grade >= 70:\n  letter_grade = 'C'\nelif grade >= 60:\n  letter_grade = 'D'\nelse:\n  letter_grade = 'F'", "category": "Python"}, {"instruction": "Parse a given input of timestamp and convert it to a datetime object in python.", "input": "1552520802", "output": "datetime.datetime(2019, 3, 12, 17, 33, 22)", "category": "Python"}, {"instruction": "Write a code to generate a list with the first 20 Fibonacci numbers.", "input": "", "output": "def fibonacci(n):\n    \"\"\"\n    Generate a list with the first n Fibonacci numbers.\n    \"\"\"\n    fib_list = [0, 1]\n\n    # Generate the list and stop when n is reached\n    while len(fib_list) < n:\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    \n    return fib_list\n\nif __name__ == '__main__':\n    print(fibonacci(20))", "category": "Python"}, {"instruction": "Develop a program that performs basic arithmetic operations (+, -, /, *)", "input": "", "output": "def add(x, y):\n   return x + y\n\ndef subtract(x, y):\n   return x - y\n\ndef multiply(x, y):\n   return x * y\n\ndef divide(x, y):\n   return x / y", "category": "Python"}, {"instruction": "Create a program to evaluate a postfix expression.", "input": "", "output": "# Python program to evaluate value of a postfix expression \n  \n# Class to convert the expression \nclass Conversion: \n       \n    # Constructor to initialize the class variables \n    def __init__(self, capacity): \n        self.top = -1\n        self.capacity = capacity \n        # This array is used a stack \n        self.array = [] \n        # Precedence setting \n        self.output = [] \n        self.precedence = {'+':1, '-':1, '*':2, '/':2, '^':3}\n       \n    # check if the stack is empty \n    def isEmpty(self): \n        return True if self.top == -1 else False\n       \n    # Return the value of the top of the stack \n    def peek(self): \n        return self.array[-1] \n       \n    # Pop the element from the stack \n    def pop(self): \n        if not self.isEmpty(): \n            self.top -= 1\n            return self.array.pop() \n        else: \n            return \"$\"\n       \n    # Push the element to the stack \n    def push(self, op): \n        self.top += 1\n        self.array.append(op)  \n   \n    # A utility function to check is the given character \n    # is operand  \n    def isOperand(self, ch): \n        return ch.isalpha() \n   \n    # Check if the precedence of operator is strictly \n    # less than top of stack or not \n    def notGreater(self, i): \n        try: \n            a = self.precedence[i] \n            b = self.precedence[self.peek()] \n            return True if a  <= b else False\n        except KeyError:  \n            return False\n              \n    # The main function that converts given infix expression \n    # to postfix expression  \n    def infixToPostfix(self, exp): \n           \n        # Iterate over the expression for conversion \n        for i in exp: \n            # If the character is an operand,  \n            # add it to output \n            if self.isOperand(i): \n                self.output.append(i) \n              \n            # If the character is an '(', push it to stack \n            elif i  == '(': \n                self.push(i) \n   \n            # If the scanned character is an ')', pop and  \n            # output from the stack until and '(' is found \n            elif i == ')': \n                while( (not self.isEmpty()) and self.peek() != '('): \n                    a = self.pop() \n                    self.output.append(a) \n                if (not self.isEmpty() and self.peek() != '('): \n                    return -1\n                else: \n                    self.pop() \n   \n            # An operator is encountered \n            else: \n                while(not self.isEmpty() and self.notGreater(i)): \n                    self.output.append(self.pop()) \n                self.push(i) \n   \n        # pop all the operator from the stack \n        while not self.isEmpty(): \n            self.output.append(self.pop()) \n   \n        return \"\".join(self.output) \n   \ncount = 0\n\n# Driver program to test above function \nexp = \"a+b*(c^d-e)^(f+g*h)-i\"\nobj = Conversion(len(exp)) \nans = obj.infixToPostfix(exp) \nprint(ans)\n\n# This function evaluates value of a postfix expression \ndef evaluatePostfix(exp): \n\t\n\t# Create a stack \n\tstack = [] \n\t\n\t# Scan all characters one by one \n\tfor i in exp: \n\t\t\n\t\t# If the character is a number, push it to the stack \n\t\tif i.isdigit(): \n\t\t\tstack.append(int(i)) \n\n\t\t# If the character is an operator, pop two \n\t\t# elements from stack apply the operator \n\t\telse: \n\t\t\tval1 = stack.pop() \n\t\t\tval2 = stack.pop() \n\t\t\tif i == '+': \n\t\t\t\tstack.append(val2 + val1) \n\t\t\telif i == '-': \n\t\t\t\tstack.append(val2 - val1) \n\t\t\telif i == '*': \n\t\t\t\tstack.append(val2 * val1) \n\t\t\telse: \n\t\t\t\tstack.append(val2 / val1) \n\n\treturn stack.pop() \n\n# Driver Program to test above function \n#exp = \"231*+9-\"\n#exp = ans\n#print(exp)\n\n#print('postfix evaluation: %d' %(evaluatePostfix(exp) ))", "category": "Python"}, {"instruction": "Create a JSON object from a dictionary in Python.", "input": "{\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"address\": {\n        \"street\": \"Main Street\",\n        \"city\": \"New York City\"\n    }\n}", "output": "import json\n\ndata = {\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"address\": {\n        \"street\": \"Main Street\",\n        \"city\": \"New York City\"\n    }\n}\n\njson_data = json.dumps(data)\nprint(json_data)\n# Output: {\"name\": \"John Doe\", \"age\": 30, \"address\": {\"street\": \"Main Street\", \"city\": \"New York City\"}}", "category": "Python"}, {"instruction": "Create a random matrix using NumPy where the elements have 2 decimal places.", "input": "", "output": "import numpy as np \n\n# Create a 2\u00d72 matrix \nrandom_matrix = np.random.rand(2,2) \n\n# Round to two decimal places \nnp.around(random_matrix, decimals=2)", "category": "Python"}, {"instruction": "Create an array in Python with 6 elements and print the last three elements.", "input": "", "output": "my_array = [1, 2, 3, 4, 5, 6] \n#Print the last three elements\nprint (my_array[-3:]) \n#Output:[4, 5, 6]", "category": "Python"}, {"instruction": "Write a Python program to exchange the values of two different variables.", "input": "x = 10 \ny = 20", "output": "x, y = y, x", "category": "Python"}, {"instruction": "Generate a code snippet to perform an element-wise multiplication of two NumPy arrays named A and B.", "input": "A = [1,2,3]\nB = [4,5,6]", "output": "import numpy as np\n \nA = np.array([1,2,3])\nB = np.array([4,5,6])\n \nC = np.multiply(A, B)\nprint(C)", "category": "Python"}, {"instruction": "Generate a Pandas code snippet to calculate the averages of the elements of each row in the given dataframe?", "input": "dataframe = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['a', 'b', 'c'])", "output": "import pandas as pd\n  \ndataframe = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['a', 'b', 'c'])\n \ndataframe['avg'] = dataframe.mean(axis=1)\n\nprint(dataframe)", "category": "Python"}, {"instruction": "Write a code snippet to count the occurrence of number 4 in an array called arr.", "input": "arr = [1, 4, 2, 4, 5]", "output": "arr = [1, 4, 2, 4, 5]\n\ncount = 0\nfor num in arr:\n    if num == 4:\n        count += 1\n\nprint(count)", "category": "Python"}, {"instruction": "Generate an appropriate python code snippet to capitalize all elements of an array called A.", "input": "A = ['welcome', 'to', 'my', 'website']", "output": "A = ['welcome', 'to', 'my', 'website']\n\nA = [x.capitalize() for x in A]\n\nprint(A)", "category": "Python"}, {"instruction": "Generate a 5-dimensional array using the numpy library", "input": "", "output": "import numpy as np\n\narr = np.zeros((5,5,5,5,5))", "category": "Python"}, {"instruction": "Sort the given list using the quicksort algorithm.", "input": "my_list = [8, 5, 3, 9, 6, 1]", "output": "def quick_sort(arr):\n  if len(arr) <= 1:\n    return arr\n  else:\n    pivot = arr[0]\n    left, right = [], []\n    # pivot\n    for x in arr[1:]:\n      if x > pivot:\n        right.append(x)\n      else:\n        left.append(x)\n    # concatenate\n    return quick_sort(left) + [pivot] + quick_sort(right)\n\nquick_sort(my_list)", "category": "Python"}, {"instruction": "Suggest a sorting algorithm to sort a list in ascending order.", "input": "my_list = [3, 8, 5, 4, 1, 9, 7]", "output": "The best sorting algorithm to use for this task would be the Bubble Sort algorithm. In the Bubble Sort algorithm, the list is looped through and elements are compared to each other and swapped if they are not in the correct order. This process is repeated until the list is sorted.", "category": "Python"}, {"instruction": "Build a function in Python that takes a string as the input and prints each letter of the string on a separate line.", "input": "", "output": "def print_letters(string): \n    for letter in string: \n        print(letter)", "category": "Python"}, {"instruction": "Correct any errors in the following code.", "input": "def get_student_avg (studentss):\n    for stdent in studentss:\n        sum = 0\n        for grade in stdent['grades']:\n            sum += grade\n        avg = sum // len studnet['grades']\n        stdent['avg']= avg", "output": "def get_student_avg (studentss):\n    for student in studentss:\n        sum = 0\n        for grade in student['grades']:\n            sum += grade\n        avg = sum // len(student['grades'])\n        student['avg']= avg", "category": "Python"}, {"instruction": "Create a class for a Rectangle with attributes for its length and width, and methods to calculate its area, perimeter and diagonal.", "input": "", "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    \n    def area(self):\n        return self.length * self.width\n    \n    def perimeter(self):\n        return (2*self.length) + (2*self.width)\n    \n    def diagonal(self):\n        return (self.length**2 + self.width**2)**0.5", "category": "Python"}, {"instruction": "Create a class that can be used to generate random numbers between a given range.", "input": "", "output": "class RandomNumberGenerator:\n    def __init__(self, min_num, max_num):\n        self.min_num = min_num\n        self.max_num = max_num\n    \n    def get_random_number(self):\n        return random.randint(self.min_num, self.max_num)", "category": "Python"}, {"instruction": "Given a list of numbers and a search value, check if the value is present in the list and return a boolean value.", "input": "nums = [2, 4, 6, 8, 10]\nvalue = 6", "output": "def search_list(nums, value):\n    for num in nums:\n        if num == value:\n            return True\n    return False\n\nnums = [2, 4, 6, 8, 10]\nvalue = 6\n\nresult = search_list(nums, value)\nprint(result) # Output: True", "category": "Python"}, {"instruction": "Write a function in Python to calculate the compound interest given the principal amount, rate of interest and number of years.", "input": "p = 1000\nr = 0.10\nn = 3", "output": "def calc_comp_int(principal, rate, num_years):\n    return principal * (1 + rate) ** num_years - principal\n\nprint(calc_comp_int(p, r, n))", "category": "Python"}, {"instruction": "Write a sample program that performs text classification", "input": "", "output": "import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\n# load dataset\ndataframe = pd.read_csv('text_classification_data.csv')\n\n# convert to vectors\nvectorizer = TfidfVectorizer()\nvectors = vectorizer.fit_transform(dataframe['text'])\n\n# split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(vectors, dataframe['label'], test_size = 0.25)\n\n# create model\nmodel = LogisticRegression()\n\n# train model\nmodel.fit(X_train,y_train)\n\n# test model\npredictions = model.predict(X_test)", "category": "Python"}, {"instruction": "Construct an algorithm in pseudocode to sort a given array of numbers.", "input": "[3, 1, 4, 5, 7, 2]", "output": "sort(array A[]):\n  for i = 1 to n-1\n  begin\n    min = i\n    for j = (i + 1) to n\n      if A[j] < A[min]\n        min = j\n    swap the value at index min and index i\n  end\n  return A[]", "category": "Python"}, {"instruction": "Compare the performance of two different neural network architectures.", "input": "Two convolutional neural networks (CNNs) with different depth of layers have been trained on the MNIST dataset.", "output": "# evaluate the performance on the test dataset\nfrom sklearn.metrics import accuracy_score\n\n# load the test dataset\nX_test, y_test = load_dataset()\n\n# evaluate each model\ny_pred_1 = model_1.predict(X_test)\nacc_1 = accuracy_score(y_test, y_pred_1)\n\ny_pred_2 = model_2.predict(X_test)\nacc_2 = accuracy_score(y_test, y_pred_2)\n\n# compare the performance\nif acc_1 > acc_2:\n    print('Model 1 has better performance than Model 2.')\nelif acc_2 > acc_1:\n    print('Model 2 has better performance than Model 1.')\nelse:\n    print('The performances of the two models are equal.')", "category": "Python"}, {"instruction": "Construct a machine learning model in Python for the given dataset.", "input": "The dataset contains information on the daily income of 500 students. You should be able to predict the income of a student based on the given characteristics.", "output": "import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# load dataset\ndataframe = pd.read_csv('student_income_data.csv')\n\n# split into input X and output y\nX = dataframe.iloc[:,:-1]\ny = dataframe.iloc[:,-1]\n\n# split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25)\n\n# create model\nmodel = LinearRegression()\n\n# train model\nmodel.fit(X_train,y_train)\n\n# test model\npredictions = model.predict(X_test)", "category": "Python"}, {"instruction": "Implement a stack to store and retrieve items in last-in first-out order.", "input": "", "output": "class Stack:\n    def __init__(self):\n        self.items = []\n    \n    def push(self, item):\n        self.items.append(item)\n    \n    def pop(self):\n        return self.items.pop()\n    \n    def peek(self):\n        return self.items[len(self.items)-1]\n    \n    def size(self):\n        return len(self.items)", "category": "Python"}, {"instruction": "You are given a string, output a new string with its vowels removed.", "input": "\"Hello World\"", "output": "def removeVowels(s):\n    vowels = 'aeiouAEIOU'\n    s_without_vowel = ''\n    for c in s:\n        if c not in vowels:\n            s_without_vowel += c\n    return s_without_vowel\n\nprint(removeVowels(\"Hello World\"))\n# Output: Hll Wld", "category": "Python"}, {"instruction": "Reorganize the following code in a more efficient way using Python.", "input": "def get_student_avg(students):\n    for student in students:\n        sum = 0\n        for grade in student['grades']:\n            sum += grade\n        avg = sum / len(student['grades'])\n        student['avg'] = avg", "output": "def get_student_avg(students):\n    for student in students:\n        student['avg'] = sum(student['grades']) / len(student['grades'])", "category": "Python"}, {"instruction": "How does the break statement work in a for loop?", "input": "", "output": "The break statement is used to break out of a loop, including a for loop. When a break statement is encountered inside a loop, it causes the loop to stop executing and control to be transferred outside the loop. For example, in a for loop, if the break statement is encountered, the loop is terminated immediately, and the program control will be transferred outside the loop.", "category": "Python"}, {"instruction": "Generate a timestamp based on the current date.", "input": "", "output": "import time\n\ntimestamp = int(time.time())\nprint(timestamp) # 1598059584", "category": "Python"}, {"instruction": "Write a Python program to find all numbers divisible by 5 but not a multiple of 7, between 1500 and 2700 (both included).", "input": "", "output": "result = []\nfor i in range(1500, 2701):\n  if i % 5 == 0 and i % 7 != 0:\n    result.append(i)\n\nprint(result) # [1505, 1540, 1575, 1610, 1645, 1680, 1715, 1750, 1785, 1820, 1855, 1890, 1925, 1960, 1995, 2030, 2065, 2100, 2135, 2170, 2205, 2240, 2275, 2310, 2345, 2380, 2415, 2450, 2485, 2520, 2555, 2590, 2625, 2660, 2695]", "category": "Python"}, {"instruction": "Generate a random string 10 characters in length using the given Python code.", "input": "import random", "output": "import random\n\ndef generate_random_string(length):\n    \"\"\"Generate a random string with given length using a set of lowercase and uppercase letters, numbers, and punctuation characters.\"\"\"\n    chars = \"abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()[]{}\\\\|;:'\"\",./<>?\"\n    result = \"\"\n    for i in range(length):\n        result += random.choice(chars)\n    return result\n\nrandom_string = generate_random_string(10)\nprint(random_string) #eg. 7O?1Y%%&_K", "category": "Python"}, {"instruction": "Given an array of integers, write a function that returns the index of the smallest number in the array.", "input": "array = [3, 1, 9, 6, 17]", "output": "def findSmallest(arr):\n    \n    smallest_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[smallest_index]:\n            smallest_index = i\n    \n    return smallest_index\n\nindex_of_smallest = findSmallest(array)\nprint(index_of_smallest) #prints 1", "category": "Python"}, {"instruction": "Write Python code which changes a string to all lowercase characters.", "input": "String: \"This is a string in Uppercase!!!\"", "output": "text = \"This is a string in Uppercase!!!\"\ntext = text.lower()\nprint(text)", "category": "Python"}, {"instruction": "Identify the data type (int, string, list, etc.) of the following expression in Python", "input": "\"hello world\"", "output": "string", "category": "Python"}, {"instruction": "Rewrite the following Python function without using an elif statement.", "input": "def find_type(x):\n    if x == \"a\":\n        print(\"alpha\")\n    elif x == \"b\":\n        print(\"beta\")\n    elif x == \"c\":\n        print(\"gamma\")", "output": "def find_type(x):\n    type_map = {\"a\": \"alpha\", \"b\": \"beta\", \"c\": \"gamma\"}\n    if x in type_map:\n        print(type_map[x])", "category": "Python"}, {"instruction": "Create a function in Python that executes the below pseudocode.", "input": "Input: A list of integers\n\nFor each integer:\n    If the integer is even, add 1 to the list\n    If the integer is odd, subtract 1 from the list\n\nOutput: A new list of integers", "output": "def modify_list(int_list):\n    for i in range(len(int_list)):\n        if int_list[i] % 2 == 0:\n            int_list[i] += 1\n        else:\n            int_list[i] -= 1\n    return int_list", "category": "Python"}, {"instruction": "Write a Python function that accepts a list and returns the sum of the numbers present in the list.", "input": "list = [1, 2, 3, 4, 5]", "output": "def list_sum(lst):\n    result = 0\n    for num in lst:\n        result += num\n    return result", "category": "Python"}, {"instruction": "Create a Python program that takes two strings as input and finds their longest common subsequence.", "input": "x = \u201cABCBDAB\u201d\n y = \u201cBDCABA\u201d", "output": "def longestSubsequence(x, y): \n    m = len(x) \n    n = len(y) \n  \n    L = [[None]*(n+1) for i in range(m+1)] \n   \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif x[i-1] == y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n    index = L[m][n] \n  \n    lcs = [\"\"] * (index+1) \n    lcs[index] = \"\\0\" \n  \n    i = m \n    j = n \n    while i > 0 and j > 0: \n  \n        if x[i-1] == y[j-1]: \n            lcs[index-1] = x[i-1] \n            i-=1\n            j-=1\n            index-=1\n  \n        elif L[i-1][j] > L[i][j-1]: \n            i-=1\n        else: \n            j-=1\n  \n    print(\"Longest common subsequence of \" + x + \" and \" + y + \" is \\\"\" + \"\".join(lcs) + \"\\\"\")", "category": "Python"}, {"instruction": "Suggest an algorithm to sum values of pairs in an array.", "input": "arr = [2, 3, 5, 7]", "output": "def array_sum(arr):\n    sum = 0\n    for i in range(0, len(arr)-1, 2):\n        sum += arr[i] + arr[i+1]\n    return sum", "category": "Python"}, {"instruction": "Write a method in Python to append a given list to another list.", "input": "list_1 = [1,2,3]\nlist_2 = [4,5,6]", "output": "list_1.extend(list_2)", "category": "Python"}, {"instruction": "Design a recursive algorithm in Python to calculate the sum of all elements in the given array", "input": "[1, 3, 7, 9, 11]", "output": "def recursive_sum(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] + recursive_sum(arr[1:])\n\narr = [1, 3, 7, 9, 11]\nprint(recursive_sum(arr))", "category": "Python"}, {"instruction": "Write a function in Python for sorting a given list of numbers.", "input": "[29, 11, 46, 7, 248, 1724]", "output": "def sort_list(numbers):\n  return sorted(numbers)", "category": "Python"}, {"instruction": "Create a dictionary with the keys of the students' IDs and their corresponding grades as the values.", "input": "student_ids = [1000, 1001, 1002, 1003] \ngrades = [90, 80, 60, 50]", "output": "def create_grade_dict(student_ids, grades):\n    # Create an empty dictionary\n    grade_dict = {} \n    # Loop based on length of student ids \n    for i in range(len(student_ids)):  \n         # Add id as key and grade as value\n        grade_dict[student_ids[i]] = grades[i] \n    # Return the grade dictionary    \n    return grade_dict", "category": "Python"}, {"instruction": "Write a function to create a Nim game board with size n.", "input": "", "output": "def create_game_board(n):\n    # Create an empty list\n    game_board = []\n    # Loop based on number of rows\n    for i in range(n):\n        # Create an empty row\n        row = []\n        # Loop based on number of columns\n        for j in range(n):\n            # Add value 0 at each position\n            row.append(0)\n        # Add the row in empty list\n        game_board.append(row)\n    # Return the game board\n    return game_board", "category": "Python"}, {"instruction": "Fix the bug in the following Python script:", "input": "def is_odd(x):\n  if x % 2 == 1\n    return True\n\nis_odd(5)", "output": "def is_odd(x):\n  if x % 2 == 1:\n    return True\n  else:\n    return False\n\nis_odd(5)", "category": "Python"}, {"instruction": "You are given an array of integers and an integer k. Output one of the maximum sums of k consecutive elements in the array.", "input": "array = [1, -3, 4, 5, 7, 8, -2, 9, -1]\nk=3", "output": "def max_sum_k_elements(array, k):\n    max_sum = array[0]\n    for i in range(len(array)-k+1):\n        sum_temp = 0\n        for j in range(k):\n            sum_temp += array[i+j]\n        if sum_temp > max_sum:\n            max_sum = sum_temp\n    return max_sum\n\nmax_sum_k_elements(array, k)", "category": "Python"}, {"instruction": "You are given a string s, output the longest substring with no repeating characters.", "input": "s = \"abcabcbb\"", "output": "def longest_substring(s):\n    length = len(s)\n    current_length = 1\n    last_occur= {s[0]:0 }\n    max_length = 0\n    i = 0 \n    while i < length:\n        if(s[i] in last_occur):\n            current_length = i - last_occur[s[i]]\n            if(current_length > max_length):\n                max_length = current_length\n            last_occur[s[i]] = i\n        else:\n            last_occur[s[i]] = i\n            current_length += 1\n            if(current_length > max_length):\n                max_length = current_length\n        i += 1\n    return max_length\n\nlongest_substring(s)\n3", "category": "Python"}, {"instruction": "Explain the concept of an ASCII table", "input": "", "output": "An ASCII table is a table that shows the correspondence between characters and symbols commonly used in computers or electronic devices. It consists of a set of codes that represent unique characters, such as letters, numbers, and symbols. Each code is represented by a number between 0 and 127 and is referred to by its decimal, octal, hexadecimal, or binary numbers. It is used to store, transmit, and display characters in different computer systems.", "category": "Python"}, {"instruction": "Define a function to search for a specific element in an array", "input": "[5, 10, 2, 4, 7]", "output": "def search(arr, e):\n    for i in range(len(arr)):\n        if (arr[i] == e):\n            return i\n    return -1", "category": "Python"}, {"instruction": "Convert a given list into a dictionary in Python", "input": "[\"apple\", \"banana\", \"cherry\"]", "output": "dict = {\n    \"apple\": 0,\n    \"banana\": 1,\n    \"cherry\": 2\n}", "category": "Python"}, {"instruction": "Explain how to use the built-in bubble sort function for sorting a given list of numbers.", "input": "[4, 9, 0, 3, 5, 7]", "output": "The built-in bubble sort function can be used to sort the given list of numbers. The algorithm starts from the beginning of the list and compares two adjacent elements. If the first number is larger than the second number, they are swapped. This process is repeated until the end of the list is reached. After one iteration, the largest element is placed at the end of the list. This process is then repeated for the remaining elements until the list is completely sorted. To use the Python built-in bubble sort function, simply call the bubble sort on the list, and it will return the sorted list.", "category": "Python"}, {"instruction": "Generate a Python dictionary that contains student information.", "input": "Name: John; Age: 22; Grade: A;", "output": "{\n \"name\": \"John\",\n \"age\": 22,\n \"grade\": \"A\"\n}", "category": "Python"}, {"instruction": "Use the given data to print out the average of the numbers.", "input": "[1, 7, 8, 10]", "output": "def calculateAverage(nums):\n    average = 0\n    for num in nums:\n        average += num\n    return average / len(nums)\n\nprint(calculateAverage([1,7,8,10]))\n# Output: 6.5", "category": "Python"}, {"instruction": "Modify the given code so it prints a prime number table.", "input": "table_size = 10", "output": "# Include the necessary library\nfrom prime_generator import get_prime\n\n# Get a list of prime numbers\nprimes = get_prime(table_size)\n\n# Print the prime number table\nprint(\" Prime Number Table\")\nprint(\" --------------------\")\n\nfor i in range(table_size):\n    print(f\"{primes[i]:>4} {(i+1)*primes[i]:>4}\")", "category": "Python"}, {"instruction": "Correct this function so that it returns a correct multiplication table.", "input": "def multiplication_table(number):\n    for row in range(1, number + 1):\n        output = ''\n        for column in range(1, number + 1):\n            output = output + '%d*%d=%d\\t' % (row, column, row * row)\n        print(output)", "output": "def multiplication_table(number):\n    for row in range(1, number + 1):\n        output = ''\n        for column in range(1, number + 1):\n            output = output + '%d*%d=%d\\t' % (row, column, row * column)\n        print(output)", "category": "Python"}, {"instruction": "Explain the differences between Stacks and Queues in computer science.", "input": "", "output": "Stacks are data structures that operate in a Last In First Out (LIFO) order, while Queues are data structures that operate in a First In First Out (FIFO) order. In a stack, items can only be added or removed from the top, while in a queue, items can be added at the front and removed from the rear. Additionally, stack elements have direct access to the top element, while queue elements are only able to access the front element.", "category": "Python"}, {"instruction": "Write a Python program to sort a list of tuples using Lambda.", "input": "list = [(3, 4), (5, 1), (2, 0)]", "output": "sorted_list = sorted(list, key=lambda x: x[1])", "category": "Python"}, {"instruction": "Describe the purpose of using an Array in programming.", "input": "", "output": "An array is a data structure used in programming to store a collection of elements of the same type in a contiguous block of memory. Arrays are used to hold items such as numbers, strings, objects, etc. and to perform operations such as searching, sorting, and manipulation on the elements of the array. Arrays are also used to implement other data structures such as stacks, queues, and linked lists.", "category": "Python"}, {"instruction": "Rewrite the following Python code without using the 'list comprehension' syntax.", "input": "[x * x for x in range(5)]", "output": "list_result = []\nfor x in range(5):\n    list_result.append(x*x)", "category": "Python"}, {"instruction": "Write a loop in Python for printing all even numbers between 1 and 10.", "input": "", "output": "for i in range(1, 11):\n    if i % 2 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Write an if else statement in Python for checking if a given number is positive or negative.", "input": "", "output": "if x > 0:\n  print(\"The number is positive\")\nelse:\n  print(\"The number is negative\")", "category": "Python"}, {"instruction": "How to use the reduce function in Python for computing the sum of elements in a list?", "input": "", "output": "from functools import reduce\n\ndef my_sum(list):\n  return reduce((lambda x, y: x + y), list)", "category": "Python"}, {"instruction": "Write a class for a shopping cart in Python.", "input": "", "output": "class ShoppingCart:\n    def __init__(self):\n        self.cart = {}\n\n    def add_item(self, item, price):\n        self.cart[item] = price\n\n    def get_cart_total(self):\n        return sum(self.cart.values())", "category": "Python"}, {"instruction": "Given an array [1, 2, 3, 4], write a Python code snippet to print the items in the array in a single line.", "input": "[1, 2, 3, 4]", "output": "arr = [1, 2, 3, 4]\nprint(*arr, sep=\", \") // 1, 2, 3, 4", "category": "Python"}, {"instruction": "Create a function sumToN that takes a single argument and returns the sum of the numbers from 1 to the argument.", "input": "", "output": "def sumToN(n):\n  sum = 0\n  for i in range(1, n+1):\n    sum += i\n  return sum", "category": "Python"}, {"instruction": "Develop a solution for the classic pattern recognition problem -\u00a0the Towers of Hanoi.", "input": "", "output": "// function to solve the Tower of Hanoi problem\ndef solveTowerOfHanoi(n, source, auxillary, destination): \n  if n==1: \n    print(\"Move disk 1 from source\",source,\"to destination\",destination) \n    return \n  solveTowerOfHanoi(n-1, source, destination, auxillary) \n  print(\"Move disk\",n,\"from source\",source,\"to destination\",destination) \n  solveTowerOfHanoi(n-1, auxillary, source, destination) \n\n# Driver code \nn = 3\nsolveTowerOfHanoi(n, 'A', 'B', 'C') \n\nOutput:\nMove disk 1 from source A to destination C\nMove disk 2 from source A to destination B\nMove disk 1 from source C to destination B\nMove disk 3 from source A to destination C\nMove disk 1 from source B to destination A\nMove disk 2 from source B to destination C\nMove disk 1 from source A to destination C", "category": "Python"}, {"instruction": "Explain the concept of recursion with an example.", "input": "", "output": "Recursion is a technique in which a function calls itself. It is used to solve problems which can be broken down into sub-problems that are similar to the original problem. An example of recursion is the Fibonacci sequence, where a number in the sequence is the sum of the previous two numbers. The sequence can be computed using a recursive function:\n\ndef Fibonacci(n): \n  if n<0: \n    print(\"Incorrect input\") \n  elif n==1: \n    return 0\n  elif n==2: \n    return 1\n  else: \n    return Fibonacci(n-1)+Fibonacci(n-2) \n  \n# Driver program \nprint(Fibonacci(6)) \n\nOutput:\n5", "category": "Python"}, {"instruction": "Make a copy of a given dictionary in Python.", "input": "", "output": "import copy\n\noriginal_dict = {1: 'a', 2: 'b', 3: 'c'}\nnew_dict = copy.deepcopy(original_dict)", "category": "Python"}, {"instruction": "Create a Python class named \"Bicycle\" which has two attributes named \"color\" and \"wheels\".", "input": "", "output": "class Bicycle: \n  def __init__(self, color, wheels):\n      self.color = color\n      self.wheels = wheels", "category": "Python"}, {"instruction": "Write a Python class for a Employee object to store the basic properties such as name, age, salary, etc.", "input": "", "output": "class Employee:\n \n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary\n \n    def get_details(self):\n        return \"Name: {}, Age: {}, Salary: {}\".format(self.name, self.age, self.salary)", "category": "Python"}, {"instruction": "Implement a sorting algorithm in Python to arrange the given array in descending order.", "input": "[10, 80, 40, 20, 60]", "output": "def descendingOrder(arr): \n    arr.sort(reverse = True) \n    return arr \n  \n# Driver code \narr = [10, 80, 40, 20, 60] \noutput = descendingOrder(arr) \nprint(output)", "category": "Python"}, {"instruction": "Create a JSON string representation of the given Python dictionary.", "input": "{'name': 'John', 'age': 20, 'hobby': 'Coding'}", "output": "var jsonStr = JSON.stringify({name: \"John\", age: 20, hobby: \"Coding\"});", "category": "Python"}, {"instruction": "Write a Python function that takes a list of n strings and a number k and returns the longest string with length of k or less.", "input": "", "output": "def find_longest_at_length(lst, k):\n    longest_str = lst[0]\n    for s in lst[1:]:\n        if len(s) <= k and len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "category": "Python"}, {"instruction": "Write a Python function that takes a list of strings as an input and returns a new list with the strings sorted by length.", "input": "", "output": "def sort_by_length(lst):\n  return sorted(lst, key=len)", "category": "Python"}, {"instruction": "Write a Python function to convert a given number of days into weeks, days.", "input": "", "output": "def convert_days(days):\n  weeks = days // 7\n  days = days % 7\n  return (weeks, days)", "category": "Python"}, {"instruction": "Using Python, parse a given XML document and output the names of all elements with the \u201cclass\u201d attribute.", "input": "", "output": "from xml.etree import ElementTree\n\ndef find_elements(tree):\n    elements = []\n    for elem in tree.iter():\n        if 'class' in elem.attrib:\n            elements.append(elem.tag)\n    return elements", "category": "Python"}, {"instruction": "Write a function that takes a two-dimensional array and flattens it into an one-dimensional array.", "input": "", "output": "def flatten(arr):\n    return [item for row in arr for item in row]", "category": "Python"}, {"instruction": "Develop a Python script to count the number of characters, words, and sentences present in a given string.", "input": "This is a sample sentence to test the program.", "output": "string = 'This is a sample sentence to test the program.'\ncharacter_count = len(string)\nword_count = len(string.split())\nsentence_count = len(string.split('.'))\n\nprint('Number of characters: ', character_count)\nprint('Number of words: ', word_count)\nprint('Number of sentences: ', sentence_count)\n\nOutput:\nNumber of characters: 45\nNumber of words: 8\nNumber of sentences: 1", "category": "Python"}, {"instruction": "Using the code provided, create an algorithm in Python to print the numbers from 1 to 10.", "input": "", "output": "for i in range(1, 11): \n    print(i)", "category": "Python"}, {"instruction": "How do you insert a given element in a balanced AVL tree?", "input": "", "output": "The process of insertion in a balanced AVL tree is similar to the process in a binary search tree, with two additional steps. First, the tree is checked to see if it needs to be rebalanced. If it does, the tree is rebalanced according to the AVL rules. Second, any newly inserted node is checked against its siblings to see if it is in balance or not. If it's not, the tree is rotated to balance it. In order to insert an element in a balanced AVL tree, the following steps must be taken:\n\n1. Start by searching the tree to see if the node to be inserted already exists in the tree.\n2. If the node does not exist, insert it in the same fashion as in a binary search tree.\n3. Perform post-insertion balancing. This involves checking the newly inserted node's balance factors and rotation if either one is unequal.\n4. Update the current node's balance factor as well as the ancestors' balance factors until the root is reached.\n5. Once all nodes that need to be balanced have been updated, the insertion is complete.", "category": "Python"}, {"instruction": "Generate a random password that is at least 8 characters and contains numbers, uppercase letters, and symbols.", "input": "", "output": "\"\"\"\nGenerate a random password that is at least 8 characters and contains numbers, uppercase letters, and symbols.\n\"\"\"\n\nimport random\n\ndef generate_password():\n    charset = \"01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()?\"\n    password = \"\"\n    for _ in range(8):\n        password += random.choice(charset)\n    return password\n    \nif __name__ == '__main__':\n    print(generate_password())", "category": "Python"}, {"instruction": "Create a function in Python that takes as arguments two strings and returns a boolean if both strings are equal or not.", "input": "string1 = \"Hello\"\nstring2 = \"World\"", "output": "def is_equal(str1, str2):\n    if str1 == str2:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Given a function, create a program to identify whether the output is equal to 1, 0 or -1.", "input": "def func(x):\n    if x < 0:\n        return -1\n    elif x == 0:\n        return 0\n    else:\n        return 1", "output": "def func_val(x):\n    result = func(x)\n    if result == -1:\n        return -1\n    elif result == 0:\n        return 0\n    else:\n        return 1", "category": "Python"}, {"instruction": "Edit the following class to make sure any variables created as part of the class cannot be modified by the program", "input": "class Example:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y", "output": "class Example:\n    def __init__(self, x, y):\n        self.__x = x\n        self.__y = y\n    @property\n    def x(self):\n        return self.__x\n    @x.setter\n    def x(self, val):\n        raise AttributeError(\"Cannot modify x\")\n    @property\n    def y(self):\n        return self.__y\n    @y.setter\n    def y(self, val):\n        raise AttributeError(\"Cannot modify y\")", "category": "Python"}, {"instruction": "Create a function in Python that takes an input list of strings and returns the longest string in the list.", "input": "list = [\"cat\", \"dog\", \"elephant\"]", "output": "def longest_string(list):\n  longest_word = \"\"\n  for word in list:\n    if len(word) > len(longest_word):\n      longest_word = word\n  return longest_word", "category": "Python"}, {"instruction": "Create an array that contains the numbers from 0 to 10 in Python.", "input": "", "output": "arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Create a function that prints out the Pythagorean theorem in Python.", "input": "", "output": "def pythagoras_theorem():\n    \"\"\"Print the Pythagorean theorem in Python.\"\"\"\n    print(\"The Pythagorean theorem states that the sum of the squares of the two sides of a right triangle is equal to the square of the hypotenuse.\")", "category": "Python"}, {"instruction": "Edit the following Python code to add error handling for invalid inputs.", "input": "def area_triangle(base,height):\n    pass", "output": "def area_triangle(base,height):\n    if base == 0 or height == 0:\n        raise ValueError(\"Base and height should not be zero.\")\n    else:\n        return 0.5 * base * height", "category": "Python"}, {"instruction": "Write a code snippet that returns the root of a given binary tree.", "input": "tree = \n        3\n      /   \\\n    4      5\n  /    \\    \\\n3       6    7", "output": "def root(tree):\n    if not tree:\n        return None\n    return tree.val", "category": "Python"}, {"instruction": "Write a function to print the four elements in the given list in reverse order", "input": "list = [\"a\", \"b\", \"c\", \"d\"]", "output": "def print_reverse_order(lst):\n    for item in reversed(lst):\n        print(item)\n\nprint_reverse_order(list)", "category": "Python"}, {"instruction": "Write an algorithm in Python to count how many words a given string contains.", "input": "", "output": "def count_words(string):\n\twords = string.split()\n\treturn len(words)", "category": "Python"}, {"instruction": "Implement a function in Python that takes a list of integers and the size of the list. The function should return a list in which every element is multiplied by three and none of the elements exceeding the size of the list.", "input": "s=[1,2,3,4]", "output": "def multiply_by_3(s):\n    result = []\n    for x in s:\n        if x*3 <len(s):\n            result.append(x * 3)\n    return result", "category": "Python"}, {"instruction": "Implement a function in Python that takes two array-like structures and returns a new array containing all elements from the first one that do not appear in the second one.", "input": "list_1 = [9, 4, 2, 1, 5]\nlist_2 = [4, 6, 2]", "output": "def difference_array(list_1, list_2):\n  new_list = []\n  for i in list_1:\n    if i not in list_2:\n      new_list.append(i)\n  return new_list", "category": "Python"}, {"instruction": "Design a logic in Rust to check if an entered integer is a prime number or not.", "input": "", "output": "fn is_prime(number: i32) -> bool {\n    if number == 0 || number == 1 {\n        return false\n    }\n    for i in 2..(number/2) {\n        if number % i == 0 {\n            return false\n        }\n    }\n    return true\n}", "category": "Python"}, {"instruction": "Write a code snippet in Python to generate a random float with up to 4 decimal places.", "input": "", "output": "import random\ndef random_float(a,b):\n  return round(random.uniform(a,b), 4)", "category": "Python"}, {"instruction": "Use a Linked List structure to implement a stack data structure.", "input": "", "output": "\"\"\"\nUse a Linked List structure to implement a stack data structure.\n\"\"\"\n\nclass Node:\n    def __init__(self, val):\n        self.value = val\n        self.next = None\n\nclass Stack:\n    def __init__(self):\n        self.top = None\n        self.size = 0\n\n    def push(self, val):\n        new_node = Node(val)\n        new_node.next = self.top\n        self.top = new_node\n        self.size += 1\n    \n    def pop(self):\n        if self.top == None:\n            return None\n        else:\n            pop_node = self.top\n            self.top = self.top.next\n            self.size -= 1\n            return pop_node.value", "category": "Python"}, {"instruction": "Sum up all the values in a 2D list.", "input": "list = [[1,2,3],[4,5,6],[7,8,9]]", "output": "\"\"\"\nSum up all the values in a 2D list.\n\"\"\"\n\ndef sum_2d_list(list_2d):\n    sum = 0\n    for l in list_2d:\n        for n in l:\n            sum += n\n    return sum\n\nif __name__ == '__main__':\n    list_2d = [[1,2,3],[4,5,6],[7,8,9]]\n    print(sum_2d_list(list_2d))", "category": "Python"}, {"instruction": "Given a dictionary of key-value pairs, write a function to reorder the dictionary based on the values.", "input": "d = {'John': 15, 'Anna': 20, 'Bob': 10}", "output": "\"\"\"\nGiven a dictionary of key-value pairs, write a function to reorder the dictionary based on the values.\n\"\"\"\n\ndef reorder_dict(d):\n    sorted_dict = {}\n    sorted_values = sorted(d.values())\n\n    while sorted_values:\n        key = sorted(d, key=lambda k: d[k] == sorted_values[0])[0]\n        sorted_dict[key] = d[key]\n        sorted_values.remove(d[key])\n\n    return sorted_dict\n\nif __name__ == '__main__':\n    d = {'John': 15, 'Anna': 20, 'Bob': 10}\n    print(reorder_dict(d))", "category": "Python"}, {"instruction": "Create a class named 'Stack' with the following methods:  push, pop, peek, isEmpty.", "input": "", "output": "\"\"\"\nCreate a class named 'Stack' with the following methods: push, pop, peek, isEmpty.\n\"\"\"\n\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n    \n    def peek(self):\n        return self.items[-1]\n    \n    def isEmpty(self):\n        return self.items == []", "category": "Python"}, {"instruction": "Determine whether a given string is a palindrome using stack data structure.", "input": "string = \"racecar\"", "output": "\"\"\"\nDetermine whether a given string is a palindrome using stack data structure.\n\"\"\"\n\ndef is_palindrome(string):\n    # reverse the string\n    stack = []\n    for char in string:\n        stack.append(char)\n\n    rev_string = \"\"\n    while stack:\n        rev_string = rev_string + stack.pop()\n\n    # compare reversed string with original string\n    if rev_string == string:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    string = \"racecar\"\n    print(is_palindrome(string))", "category": "Python"}, {"instruction": "Describe the advantages and disadvantages of using recursion.", "input": "", "output": "Recursion has many advantages including that it is often easier to understand, it eliminates the need for loops, and it can make for concise code when addressing complex problems. However, recursion also has disadvantages such as the potential for infinite loops and excessive memory consumption due to the overhead of function calls. Additionally, recursion can be slower than using loops in some cases.", "category": "Python"}, {"instruction": "Count the number of occurrences of a given number in a list of numbers.", "input": "numbers = [1,1,2,3,4,4,4,5]\nnumber = 4", "output": "\"\"\"\nCount the number of occurrences of a given number in a list of numbers.\n\"\"\"\n\nnumbers = [1,1,2,3,4,4,4,5]\nnumber = 4\n\ndef count_occurrences(numbers, number):\n    count = 0\n    for num in numbers:\n        if num == number:\n            count += 1\n    return count\n\nprint(count_occurrences(numbers, number))", "category": "Python"}, {"instruction": "Select all customers from the customer_table with age greater than 25 and their zip codes within a given range.", "input": "customer_table = [['Eliza', 22, 48001], ['John', 26, 48034], ['Michael', 50, 48323]]\nzipcode_range = (48000, 48200)", "output": "\"\"\"\nSelect all customers from the customer_table with age greater than 25 and their zip codes within a given range.\n\"\"\"\n\n#select customers\ncustomers = [ customer for customer in customer_table if (customer[1] > 25) and (customer[2] >= zipcode_range[0] and customer[2] <= zipcode_range[1])]\n\nprint(customers)", "category": "Python"}, {"instruction": "You need to generate a random four-digit number and return it as an integer.", "input": "", "output": "import random\n\ndef generateRandomNumber():\n    return random.randint(1000,9999)", "category": "Python"}, {"instruction": "Generate Python code to find the compound interest for a given principal amount, rate, and time period.", "input": "", "output": "# Python program to find compound interest\n\ndef compound_interest(p,r,t):\n    # p is the principal amount \n    # r is the rate \n    # t is the time period \n  \n    # Calculating compound interest \n    CI = p * (pow((1 + r / 100), t))\n    print(\"Compound interest is\", CI) \n\np=1000\nr=10\nt=2\ncompound_interest(p,r,t)", "category": "Python"}, {"instruction": "Design an algorithm to detect whether two given strings are permutations of each other.", "input": "", "output": "Algorithm:\n\n// Take two strings, str1 and str2\n\n// Step 1:\n// Start\n\n// Step 2:\n// Run a loop over the length of the strings\n\n// Step 3:\n// For each character in str1, check if it also exists in str2. If it does, continue to next character. \n\n// Step 4:\n// If a character does not have a corresponding character in the other string, return False. \n\n// Step 5:\n// If all the characters are found, return True. \n\n// Step 6:\n// Stop", "category": "Python"}, {"instruction": "Generate a simple Flask route to handle a GET request.", "input": "", "output": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/myroute\", methods=[\"GET\"])\ndef myfunc():\n  # write code here\n\nif __name__ == '__main__':\n app.run()", "category": "Python"}, {"instruction": "Create a class for a basketball team.", "input": "", "output": "class BasketballTeam:\n\n    def __init__(self, name, players):\n        self.name = name\n        self.players = players\n    \n    def get_name(self):\n        return self.name\n    \n    def get_players(self):\n        return self.players\n    \n    def add_player(self, player):\n        self.players.append(player)\n        return self.players", "category": "Python"}, {"instruction": "Formulate a plan to automate a login process.", "input": "", "output": "1. Identify the website that requires the login process.\n2. Connect to the website using the appropriate library/API.\n3. Get the username and password credentials from a secure database (or a file).\n4. Use the credentials to create a login request.\n5. Capture the response and analyze the outcome.\n6. Extract any key elements of the response that are required to perform other activities (if required).\n7. Log details from the login request in the database (or a file).\n8. Handle any error cases appropriately.", "category": "Python"}, {"instruction": "Design an algorithm in Python to detect palindrome strings.", "input": "", "output": "def is_palindrome(s):\n    rev = ''.join(reversed(s))\n    if (s == rev): \n        return True\n    return False", "category": "Python"}, {"instruction": "Construct a multi-threaded application in Python to read and calculate the sum of a list of numbers.", "input": "List of numbers:[25, 10, 5, 20]", "output": "import threading \n  \n# function to read the numbers \ndef read_sum(list_of_numbers): \n    total = 0\n    for number in list_of_numbers: \n        total += number  \n  \n    print(\"Sum of the list of numbers is: {}\".format(total)) \n  \n# Driver code \nlist_of_numbers = [25, 10, 5, 20] \nstart = 0\nend = len(list_of_numbers) \n  \n# creating thread \nt1 = threading.Thread(target=read_sum, args=(list_of_numbers[start:end],)) \n  \n# starting thread 1 \nt1.start() \n# wait until thread 1 is completely executed \nt1.join() \n  \n# both threads completely executed \nprint(\"Done!\")", "category": "Python"}, {"instruction": "We want to display a random number between 1 and 10 using Python. Write a program for that.", "input": "", "output": "import random\nrandomNumber = random.randint(1, 10)\nprint(randomNumber)", "category": "Python"}, {"instruction": "Create a program to generate random passwords of 8 characters consisting of letters, numbers and special characters.", "input": "", "output": "import random\nimport string\n\ndef generate_password(length):\n    letters_and_digits = string.ascii_letters + string.digits \n    special_characters = '!@#$%^&*()'\n    chars = letters_and_digits + special_characters\n    return ''.join(random.choice(chars) for i in range(length))\n\nprint(generate_password(8)) # output = xT@lo6Sw", "category": "Python"}, {"instruction": "Create a program to search for a word in a document.", "input": "document = \"This is a sample document with some words.\"\nword = \"words\"", "output": "def search(document, word):\n    if word in document:\n        print(\"The word '{}' was found in the document\".format(word))\n    else:\n        print(\"The word '{}' was not found in the document\".format(word))\n\nsearch(document, word) # output = \"The word 'words' was found in the document.\"", "category": "Python"}, {"instruction": "Write a code to extract data from a PDF document.", "input": "", "output": "# install the required package\npip install pdfminer.six\n\n# importing all the required modules \nfrom pdfminer.pdfparser import PDFParser \nfrom pdfminer.pdfdocument import PDFDocument \n\n# open the pdf file \nfp = open('sample_form.pdf', 'rb') \n\n# create parser object \nparser = PDFParser(fp) \n\n# create pdf document object \ndoc = PDFDocument(parser) \n\n# get the text data from pdf file \ndata = doc.get_data() \n\n# print the text extracted \nprint(data)", "category": "Python"}, {"instruction": "Create an efficient algorithm that finds the intersection between two sorted arrays.", "input": "arr1 = [1, 2, 6, 8, 9]\narr2 = [2, 3, 5, 6, 7]", "output": "def intersection(arr1, arr2): \n\n    result = []\n    \n    i = 0\n    j = 0\n  \n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] < arr2[j]: \n            i += 1\n        elif arr2[j] < arr1[i]: \n            j += 1\n        else: \n            result.append(arr2[j]) \n            j += 1\n            i += 1\n  \n    return result", "category": "Python"}, {"instruction": "Make a valid http request call with the following parameters", "input": "url = 'www.example.com'\nMethod = 'GET'\nHeader = 'Content-Type:application/json'", "output": "import requests\n\nurl = 'www.example.com'\nheaders = {'Content-Type':'application/json'}\nr = requests.get(url, headers=headers)", "category": "Python"}, {"instruction": "Parse a JSON string.", "input": "{\"name\":\"John\", \"age\":30}", "output": "import json\n\njson_data = '{\"name\":\"John\", \"age\":30}'\n\ndata = json.loads(json_data)\n\nname = data[\"name\"]\nage = data[\"age\"]\n\nprint(f\"Name: {name}, Age: {age}\")", "category": "Python"}, {"instruction": "Create a list comprehension in Python to generate odd numbers between 1 and 10", "input": "", "output": "odd_numbers = [x for x in range(1, 11) if x % 2 != 0]", "category": "Python"}, {"instruction": "Create a function in Python to identify if the inputted number is odd or even.", "input": "", "output": "def is_odd_or_even(num): \n  return \"even\" if num % 2 == 0 else \"odd\"", "category": "Python"}, {"instruction": "Create a function in Python for sending an email using the SMTP protocol.", "input": "", "output": "import smtplib\n\ndef send_email(sender, recipient, message): \n  smtp_server = smtplib.SMTP(\"smtp.example.com\")\n  smtp_server.sendmail(sender, recipient, message)\n  smtp_server.quit()", "category": "Python"}, {"instruction": "Write a function in Python which can generate a random string consisting of lowercase letters, numbers and symbols.", "input": "", "output": "import string\nimport random\n\ndef random_string(stringLength=10):\n  lettersAndDigits = string.ascii_letters + string.digits + string.punctuation\n  return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))", "category": "Python"}, {"instruction": "Create an array of random integers between 1 to 10 using the function **np.random.randint**.", "input": "", "output": "# Create array of random integers between 1 to 10\nimport numpy as np\nrandom_integers = np.random.randint(low=1, high=10, size=10)", "category": "Python"}, {"instruction": "Create a python function that will convert a string to all uppercase.", "input": "", "output": "def toUpperCase(str):\n  return str.upper()", "category": "Python"}, {"instruction": "Use Python to write a code that displays a multiplication table of a given number.", "input": "8", "output": "def multTable(n):\n    for i in range(1, 11):\n        print(\"{} x {} = {}\".format(n, i, n*i))", "category": "Python"}, {"instruction": "Define a function called find_sum that takes a list of numbers and adds them all together.", "input": "", "output": "def find_sum(seq): \n    s = 0 \n      \n    # iterate over the sequence \n    for i in seq: \n        s += i \n      \n    return s", "category": "Python"}, {"instruction": "Retrieve the value of an item in a given array.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def get_item_val(arr, idx):\n\t\"\"\"Retrieves the value of an item from the given array at a given index.\"\"\"\n\tif idx < 0 or idx > len(arr):\n\t\treturn None\n\treturn arr[idx]", "category": "Python"}, {"instruction": "Provide a function to read a single line of user input in Python.", "input": "", "output": "def read_input():\n    \"\"\"Reads a single line of user input.\"\"\"\n    return input()", "category": "Python"}, {"instruction": "Using an array, write a Python script that prints the sum of the numbers from 0 to 10.", "input": "", "output": "arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nsum = 0\n  \n# Iterate to find the sum \nfor i in range (0, len(arr)): \n    sum = sum + arr[i] \n      \n# Print the sum  \nprint(sum)", "category": "Python"}, {"instruction": "Implement a queue data structure.", "input": "", "output": "class Queue:\n    def __init__(self):\n        self.data = []\n\n    def is_empty(self):\n        return not self.data \n\n    def enqueue(self, element):\n        self.data.append(element)\n\n    def dequeue(self):\n        return self.data.pop(0)\n        \n    def peek(self):\n        if not self.is_empty():\n            return self.data[0]", "category": "Python"}, {"instruction": "Run a sentiment analysis of the following sentence using Python.", "input": "The food was really good but the service was terrible.", "output": "\"\"\"\nRun a sentiment analysis of the sentence using Python\n\"\"\"\nimport nltk \nfrom textblob import TextBlob \n\ntext = 'The food was really good but the service was terrible.'\nblob = TextBlob(text) \nfor sentence in blob.sentences:\n    print(sentence.sentiment)\n\n# Output\nSentiment(polarity=0.05, subjectivity=0.6)", "category": "Python"}, {"instruction": "Which data structure is most suitable for storing a large list of numbers?", "input": "", "output": "Heap or binary tree. A heap or binary tree data structure are most suitable for storing a large list of numbers as it provides O(log n) time complexity for insertion, search and deletion.", "category": "Python"}, {"instruction": "Write a function that calculates the Fibonacci numbers to the nth number", "input": "", "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)", "category": "Python"}, {"instruction": "Implement a function that takes in a number n and deletes all the even numbers in an array of integers first n numbers.", "input": "arr = [2, 3, 4, 5, 6, 7]\nn = 6", "output": "def delete_even(arr, n): \n    # initialise a list \n    odd_list =[]\n    # loop over the array\n    for i in range(n): \n        # if the number is odd \n        if arr[i] % 2 != 0:\n            # add it to the list \n            odd_list.append(arr[i])\n    # return the list of odd numbers\n    return odd_list", "category": "Python"}, {"instruction": "Create a function to insert a given character at every odd index in a given string.", "input": "string = \"Hello\"\ncharacter = 'z'", "output": "def insert_character(string, character): \n    # initialise a new string\n    new_string = \"\"\n    # loop over the string\n    for i in range(len(string)):\n        # if the index is odd \n        if i % 2 != 0:\n            # add the character\n            new_string += character\n        # add the current character\n        new_string += string[i]\n    # return the new string\n    return new_string", "category": "Python"}, {"instruction": "Create a function that takes in an array of strings and a search term and returns an array of indices of strings that match the search term.", "input": "array = [\"I love dogs\",\"I hate cats\",\"Dogs are the best\"] \nsearch_term = \"dogs\"", "output": "def search_indices(array, search_term):\n    # initialise an empty list \n    indices_list = [] \n    # loop over the array\n    for index, s in enumerate(array): \n        # if the search term is in the string \n        if search_term in s.lower(): \n            # append the index to the list \n            indices_list.append(index)\n    # return the list of indices \n    return indices_list", "category": "Python"}, {"instruction": "Using the comments as a guide, implement a function that takes as input a list of integers and returns the maximum value.", "input": "nums = [2, 8, 9, 10]", "output": "def find_max(nums): \n    # initialise the max to the first element of the list \n    max = nums[0]\n    # loop over the list\n    for i in range(1, len(nums)): \n       # if the current element is greater than the max, \n       # update the max \n        if nums[i] > max: \n            max = nums[i]\n    # return the maximum value\n    return max", "category": "Python"}, {"instruction": "Write a Python statement to print out the common items between two lists.", "input": "list1 = [1, 2, 3, 4]\nlist2 = [2, 4, 6 , 8]", "output": "for i in list1:\n  if i in list2:\n    print(i)", "category": "Python"}, {"instruction": "Create an array of 10 random integers between 1 to 50 and print them.", "input": "", "output": "# Create an array of 10 random integers\nimport random\narray = []\nfor i in range(10):\n    array.append(random.randint(1, 50))\n\nprint(array) # [33, 22, 34, 18, 28, 22, 17, 11, 26, 45]", "category": "Python"}, {"instruction": "Create a class with two methods \"get_sum\" and \"get_product\" for calculating the sum and product of two numbers respectively.", "input": "", "output": "class Calculator:\n    \"\"\"Class for calculating the sum and product of two numbers.\"\"\"\n\n    # Method for calculating sum of two numbers\n    def get_sum(self, num1, num2):\n        return num1 + num2\n    \n    # Method for calculating product of two numbers\n    def get_product(self, num1, num2):\n        return num1 * num2\n\n# Create an instance of the class\ncalc = Calculator()\n\n# Calculate the sum\nsum_value = calc.get_sum(3, 4)\nprint(\"Sum:\", sum_value) # 7\n\n# Calculate the product\nproduct_value = calc.get_product(3, 4)\nprint(\"Product:\", product_value) # 12", "category": "Python"}, {"instruction": "Debug the following code for finding the median of three numbers.", "input": "def find_median(a, b, c):\n    if a > b: \n        if b > c:\n            return b \n        elif a > c:\n            return c\n        else:\n            return a\n    elif b > c:\n        return b\n    elif a > c:\n        return a\n    else:\n        return c", "output": "def find_median(a, b, c):\n    # Calculate the maximum of the three numbers\n    max_num = max(a, b, c)\n    # Calculate the minimum of the three numbers\n    min_num = min(a, b, c)\n    # Calculate the median value as the sum of the three numbers minus the maximum and minimum\n    median = a + b + c - max_num - min_num\n    return median\n\nmedian_value = find_median(2, 3, 5)\nprint(median_value) # 3", "category": "Python"}, {"instruction": "Given a string, write a code that counts the number of alphabets in it.", "input": "input_string = \"Hello World!\"", "output": "input_string = \"Hello World!\"\n\n# Count the number of alphabets\nnum_alphabets = sum(c.isalpha() for c in input_string) \n\nprint(\"Number of alphabets in the string:\", num_alphabets)", "category": "Python"}, {"instruction": "What is the difference between procedural and object-oriented programming?", "input": "", "output": "The main difference between procedural and object-oriented programming is that object-oriented programming focuses on the objects and how they interact with each other, while procedural programming focuses on executing a sequence of steps. In object-oriented programming, data and functions are encapsulated into objects that can interact with each other, while procedural programming relies on the execution of a sequence of instructions. In addition, object-oriented programming encourages code reusability, while procedural programming does not.", "category": "Python"}, {"instruction": "Design an algorithm to add two given binary numbers", "input": "", "output": "def add_binary(b1, b2):\n \u00a0 \u00a0# initalize result\n \u00a0 \u00a0result = \"\"\n \u00a0 \u00a0carry = 0\n \u00a0 \u00a0# iterate over the bits\n \u00a0 \u00a0for i in range(max(len(b1), len(b2))):\n \u00a0 \u00a0 \u00a0 \u00a0a = int(b1[-i-1]) if i < len(b1) else 0\n \u00a0 \u00a0 \u00a0 \u00a0b = int(b2[-i-1]) if i < len(b2) else 0\n \u00a0 \u00a0 \u00a0 \u00a0#calculate sum\n \u00a0 \u00a0 \u00a0 \u00a0sum = carry ^ a ^ b\n \u00a0 \u00a0 \u00a0 \u00a0result = str(sum) + result\n \u00a0 \u00a0 \u00a0 \u00a0# calculate the carry\n \u00a0 \u00a0 \u00a0 \u00a0carry = (carry&a) | (carry&b) | (a&b)\n \u00a0 \u00a0#append the carry to the result\n \u00a0 \u00a0if carry:\n \u00a0 \u00a0 \u00a0 \u00a0result = '1' + result\n \u00a0 \u00a0return result", "category": "Python"}, {"instruction": "Create a program to detect a loop in a linked list", "input": "", "output": "def detect_loop(head): \n    slow_p = head \n    fast_p = head \n\n    while(slow_p and fast_p and fast_p.next): \n        slow_p = slow_p.next\n        fast_p = fast_p.next.next\n        if slow_p == fast_p: \n            return 1\n    return 0", "category": "Python"}, {"instruction": "Create a sorting algorithm for an array that only needs 1 iteration", "input": "", "output": "def one_iteration_sort(arr):\n    for i in range(len(arr)):\n        min_index = i\n        for j in range(i, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]", "category": "Python"}, {"instruction": "Write the code to calculate a factorial recursively", "input": "", "output": "def factorial(n):\n \u00a0 \u00a0if n == 0:\n \u00a0 \u00a0 \u00a0 \u00a0return 1\n \u00a0 \u00a0else:\n \u00a0 \u00a0 \u00a0 \u00a0return n * factorial(n - 1)", "category": "Python"}, {"instruction": "Design the algorithm to perform a depth-first search on given binary tree", "input": "", "output": "def DFS(root):\n    s = Stack()\n    s.push(root)\n    while (s.size() > 0):\n        node = s.pop()\n        # Do something with the node\n        if (node.left != NULL):\n            s.push(node.left)\n        if (node.right != NULL):\n            s.push(node.right)", "category": "Python"}, {"instruction": "Design algorithm for the below use case", "input": "Given two arrays A and B of the same length, determine whether there is a\u00a0pair of indices\u00a0(i, j) such that\u00a0A[i] == B[j].", "output": "def check_if_pair_exists(arr_a, arr_b):\n    for i in range(len(arr_a)): \n        for j in range(len(arr_b)): \n            if arr_a[i] == arr_b[j]: \n                return True\n    return False", "category": "Python"}, {"instruction": "Generate permutations of the given array of numbers.", "input": "numbers = [1, 2, 3]", "output": "def permutations(arr):\n    # base case:\n    if len(arr) == 0:\n        return []\n \n    # base case: \n    if len(arr) == 1:\n        return [arr]\n \n    # find all permutations for arr of size n-1\n    smaller_permutations = permutations(arr[1:])\n \n    # find permutations for element at the index 0\n    current_element = arr[0]\n    permutations_for_current_element = []\n \n    # iterate smaller permutations\n    for per in smaller_permutations:\n        # create new permutation\n        for i in range(len(per)+1):\n            # copy original values\n            new_permutation = per[:]\n            # insert current element\n            new_permutation.insert(i, current_element)\n            permutations_for_current_element.append(new_permutation)\n \n    return permutations_for_current_element", "category": "Python"}, {"instruction": "Create a program to detect a negative number in an array of numbers.", "input": "numbers = [10, -5, 4, 20]", "output": "def detect_negative_number(numbers):\n    flag = False\n    for num in numbers:\n        if num < 0:\n            flag = True\n            break\n    return flag", "category": "Python"}, {"instruction": "Develop an API that returns a list of students and their ages.", "input": "", "output": "import flask\n\napp = flask.Flask(__name__)\n\nstudents = {\n    'John': 20,\n    'Jane': 19,\n    'Bob': 22\n}\n\n@app.route(\"/get_student_ages\", methods = [\"GET\"])\ndef get_student_ages():\n    return flask.jsonify(students)\n  \nif __name__ == \"__main__\":\n    app.run()", "category": "Python"}, {"instruction": "Using Python, create a program that prints out the numbers 0 to 100.", "input": "", "output": "for i in range(101):\n    print(i)", "category": "Python"}, {"instruction": "Given a data set, calculate the average using Python.", "input": "[1, 2, 3, 4, 5]", "output": "nums = [1,2,3,4,5]\nsum = 0\n\nfor num in nums:\n  sum +=num\n\naverage =sum / len(nums)\n\nprint(average) // output is 3.0", "category": "Python"}, {"instruction": "Explain the concept of the depth-first search algorithm and provide an example.", "input": "", "output": "Depth-first search (DFS) is an algorithm used to traverse a tree or graph data structure. It starts at the root of the tree, explores as far as possible down a given branch and then backtracks along the same path before exploring a new branch. For example, consider a BST (Binary Search Tree) where we want to traverse all the elements, the algorithm starts at the root node, then traverses all the elements in the left subtree before traversing all the elements in the right subtree.", "category": "Python"}, {"instruction": "Create a function to print a table using a given dictionary.", "input": "example_dict = {\n    'Name': ['John', 'Stella', 'Daniel'], \n    'Age': [20, 23, 19]\n}", "output": "def print_table(dictionary):\n    \"\"\"Prints a table from a dictionary of lists.\"\"\"\n    # retrieve the lists\n    names = dictionary['Name']\n    ages = dictionary['Age']\n\n    # print the table\n    print('\\tName\\tAge')\n    print('-' * 20)\n    for i, name in enumerate(names):\n        age = ages[i]\n        print(f'\\t{name}\\t{age}')", "category": "Python"}, {"instruction": "Clone a given array.", "input": "arr = [1,2,3,4,5]", "output": "def clone(arr):\n  new_arr = arr.copy()\n  return new_arr", "category": "Python"}, {"instruction": "Write a function to classify a text as positive or negative.", "input": "text = \"This is an amazing product.\"", "output": "def classify_text(text):\n  score = 0\n  words = text.split(\" \")\n  for word in words:\n    if word in positive_words:\n      score += 1\n    elif word in negative_words:\n      score -= 1\n  if score > 0:\n    return \"positive\"\n  elif score == 0:\n    return \"neutral\"\n  else:\n    return \"negative\"", "category": "Python"}, {"instruction": "Write a function to decode a string encoded using Base64.", "input": "encoded_s = \"TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgdGluY2lkdXJlIGV4c2VlIGRlc2VydW50IG1vbGxpdCBhbmltIGlwc3VtIHRlbXBvcmUgYSBjb25zZXF1YXQgcXVpcyBkb2xvcmVtIG5pc2ku", "output": "import base64 \ndef decode_base64(encoded_s):\n   decoded_s = base64.b64decode(encoded_s).decode('utf-8') \n   return decoded_s", "category": "Python"}, {"instruction": "You have been given a list containing both words and numbers. You need to write a code to generate a new list containing only words in the original list and to calculate the average length of the words.", "input": "mixed_list = ['cat', 1, 'dog', 2, 'rabbit', 3]", "output": "def get_words(mixed_list):\n  words = []\n  for item in mixed_list:\n    if type(item) == str:\n      words.append(item)\n  return words\n\ndef get_average_word_length(words):\n  total_length = 0\n  for word in words:\n    total_length += len(word)\n  return total_length/len(words)\n\nif __name__ == \"__main__\":\n  words = get_words(mixed_list)\n  print(\"Words in original list:\", words)\n  print(\"Average length of the words:\", get_average_word_length(words))", "category": "Python"}, {"instruction": "Write a code to generate fibonacci series for first n numbers.", "input": "", "output": "def generate_fibonacci(n):\n  fibonacci = [0, 1]\n  for i in range(2, n):\n    fibonacci.append(fibonacci[i - 1] + fibonacci[i - 2])\n  return fibonacci[:n]\n\nif __name__ == \"__main__\":\n  print(generate_fibonacci(n))", "category": "Python"}, {"instruction": "You have been given a list of user details (Names, Addresses etc). Write a code to filter out the users whose age is more than 21.", "input": "user_details = [\n {'name': 'John Doe', 'age': 34, 'address': '123 Main Street'},\n {'name': 'Jane Doe', 'age': 18, 'address': '456 Wallaby Way'},\n {'name': 'Bob Smith', 'age': 21, 'address': '789 Ocean View'},\n]", "output": "def filter_users(user_details):\n  users_over_21 = []\n  for user in user_details:\n    if user['age'] > 21:\n      users_over_21.append(user)\n  return users_over_21\n\nif __name__ == \"__main__\":\n  print(\"Users over 21:\", filter_users(user_details))", "category": "Python"}, {"instruction": "Use the given array to find distinct values.", "input": "arr = [1, 2, 3, 3, 4, 5]", "output": "def find_distinct(arr):\n    distinct_list = []\n    for num in arr:\n        if num not in distinct_list:\n            distinct_list.append(num)\n\n    return distinct_list\n\narr = [1, 2, 3, 3, 4, 5]\nprint(find_distinct(arr))  # Output: [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Given a string of text, write a python script to remove all non-alphanumeric characters.", "input": "", "output": "def remove_non_alphanumeric_chars(input_string):\n  return ''.join(c for c in input_string if c.isalnum())", "category": "Python"}, {"instruction": "What is the meaning of the acronym JSON?", "input": "", "output": "The acronym JSON stands for JavaScript Object Notation. It is a text-based format for data interchange, which makes it easy for machines to parse and generate.", "category": "Python"}, {"instruction": "What is the difference between higher order functions and first class functions?", "input": "", "output": "Higher order functions are functions that can take other functions as arguments or return other functions as output. First class functions are functions that can be passed as arguments to other functions, returned from other functions, assigned to variables, or used in any other way that a value can be used.", "category": "Python"}, {"instruction": "Name two methods of sorting a list in Python.", "input": "", "output": "The two methods of sorting a list in Python are the sorted() function and the .sort() method.", "category": "Python"}, {"instruction": "Edit the code to create a program to print all the leap years between 1900 and 2000.", "input": "for year in range(1900, 2001):\n    # TODO", "output": "for year in range(1900, 2001):\n    if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:\n        print(year)", "category": "Python"}, {"instruction": "Given a linked list, write a program to delete a given node.", "input": "1 -> 2 -> 3 -> 4 -> 5 -> NULL\nNode = 3", "output": "class Node: \n    def __init__(self, data): \n        self.data = data  \n        self.next = None\n\ndef delete_node(head, node):\n    prev = None\n    curr = head\n    while(curr is not None and curr.data != node):\n        prev = curr\n        curr = curr.next\n    prev.next = curr.next", "category": "Python"}, {"instruction": "Given two strings, s1 and s2, write a program to return the longest common substring between them.", "input": "s1 = 'abcdef'\ns2 = 'fghijk'", "output": "def longest_common_substring(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\nlongest_substring = longest_common_substring(s1, s2)", "category": "Python"}, {"instruction": "Create a program to calculate the mean of the following list.", "input": "myList = [4, 8, 10, 15]", "output": "def mean(myList):\n    sum = 0\n    for num in myList:\n        sum += num\n    average = round(sum/len(myList), 2)\n    return average\n\nmean_result = mean(myList)", "category": "Python"}, {"instruction": "Generate a random 6-digit integer.", "input": "", "output": "import random\n\nrandom_int = str(random.randint(100000, 999999))", "category": "Python"}, {"instruction": "With the provided data, find the correlation coefficient between the two variables.", "input": "x: [4, 5, 7, 8]\ny: [6, 7, 8, 10]", "output": "x = [4, 5, 7, 8]\ny = [6, 7, 8, 10]\n\ndef find_correlation_coefficient(x, y):\n    n = len(x)\n    # Calculate the sums\n    sum_x = sum(x)\n    sum_y = sum(y)\n    # Calculate the sum of the squares\n    squared_sum_x = sum([pow(x[i], 2) for i in range(n)])\n    squared_sum_y = sum([pow(y[i], 2) for i in range(n)])\n    # Calculate the sum of the products\n    product_sum = sum([x[i]*y[i] for i in range(n)])\n    # Calculate the correlation coefficient\n    num = product_sum - (sum_x * sum_y/n)\n    den = ((squared_sum_x - (pow(sum_x,2) / n)) * (squared_sum_y - (pow(sum_y,2) / n))) ** 0.5\n    r = num/den\n    return r\n\nprint(\" The correlation coefficient is: \" + str(find_correlation_coefficient(x, y))) # 0.9", "category": "Python"}, {"instruction": "Create a Python dictionary with customer details provided.", "input": "Name: John\nAge: 25\nGender: Male\nOccupation: Chef", "output": "customer = { \n'name': 'John',\n'age': 25,\n'gender': 'Male',\n'occupation': 'Chef'\n}", "category": "Python"}, {"instruction": "Using recursion, write a Python program to find the factorial of a given number.", "input": "Number: 5", "output": "def factorial(num): \n    if num == 1: \n        return 1\n    else: \n        return num * factorial(num-1)\n\nans = factorial(5)\nprint(ans)", "category": "Python"}, {"instruction": "Rewrite the following Python code to a Bash program.", "input": "v = [1, 2, 3, 4, 5]\nfor i in v:\nprint(i)", "output": "v=(1 2 3 4 5)\n\nfor i in ${v[@]}; do\n    echo $i\ndone", "category": "Python"}, {"instruction": "Create a Python class for a user object that includes a name and email field.", "input": "", "output": "class User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email", "category": "Python"}, {"instruction": "Write a Python code to group the following numbers according to their last digit [1, 9, 5, 4, 6, 7, 8, 11].", "input": "[1, 9, 5, 4, 6, 7, 8, 11]", "output": "group_by_last_digit = {\n    0: [],\n    1: [1],\n    2: [],\n    3: [],\n    4: [4],\n    5: [5],\n    6: [6],\n    7: [7],\n    8: [8],\n    9: [9],\n    11: [11]\n}", "category": "Python"}, {"instruction": "Write a function to extract the elements from a given list and add them to a new list.", "input": "given_list = [0, 2, 4, 6, 8]", "output": "def extract_and_add_elements(given_list):\n    new_list = []\n    for x in given_list:\n        new_list.append(x)\n    return new_list", "category": "Python"}, {"instruction": "Create a class in Python with one method called talk that prints a string when invoked.", "input": "", "output": "class MyClass:\n  def talk(self):\n    print(\"Hello, world!\")", "category": "Python"}, {"instruction": "You have been given a list of numbers. Write a code to generate a new list of numbers containing only the even numbers from the original list.", "input": "numbers = [2, 3, 5, 6, 8, 9, 10]", "output": "def get_even_numbers(numbers):\n  even_numbers = []\n  for num in numbers:\n    if num % 2 == 0:\n      even_numbers.append(num)\n  return even_numbers\n\nif __name__ == \"__main__\":\n  print(\"Even numbers from original list:\", get_even_numbers(numbers))", "category": "Python"}, {"instruction": "Create a Python program to analyze a given list of URL requests and count the number of unique requests.", "input": "", "output": "def count_unique_requests(url_list):\n    return len(set(url_list))", "category": "Python"}, {"instruction": "You have been given a list of strings. Write a code to generate a new list containing only the strings with length less than 6 characters.", "input": "strings = ['Ready', 'Set', 'Go', 'Hello', 'Pizza', 'Book']", "output": "def get_shorter_strings(strings):\n  shorter_strings = []\n  for string in strings:\n    if len(string) < 6:\n      shorter_strings.append(string)\n  return shorter_strings\n\nif __name__ == \"__main__\":\n  print(\"strings with length less than 6:\", get_shorter_strings(strings))", "category": "Python"}, {"instruction": "Filter a given list of numbers in Python to find all the even numbers.", "input": "list1 = [3, 4, 5, 6, 7, 8, 9]", "output": "list2 = [number for number in list1 if number % 2 == 0]\nprint(list2) #[4, 6, 8]", "category": "Python"}, {"instruction": "Generate a random probability distribution with mean 0 and standard deviation 1 in Python.", "input": "", "output": "import numpy as np\n\ndist = np.random.normal(0, 1, 1000)  # mean, standard deviation, samples", "category": "Python"}, {"instruction": "Write an algorithm to find the longest sub string without repeating characters.", "input": "string = 'abcabcbb'", "output": "def length_longest_substring(string):\n    start = 0\n    max_length = 0\n    seen = {}\n    for end in range(len(string)):\n        # Check if the character has been previously seen.\n        if string[end] in seen:\n            # Move the starting point of the substring to the index after the last seen character of this character.\n            start = max(start, seen[string[end]] + 1)\n        # Update the index value of the last seen character.\n        seen[string[end]] = end\n        # Calculate the length of the current substring.\n        max_length = max(max_length, end - start + 1)\n    # Return the maximum length of the substring.\n    return max_length", "category": "Python"}, {"instruction": "Given a string of text, print the count of all the words.", "input": "", "output": "def word_count(string):\n    count = 0\n    for word in string.split():\n        count += 1\n    return count", "category": "Python"}, {"instruction": "Build a code to print out all permutations of the characters in a given string.", "input": "\"ABC\"", "output": "def permute(s): \n    if len(s) == 0: \n        return [''] \n    prev_permutation_list = permute(s[1:len(s)])  \n    next_list = [] \n    for p in prev_permutation_list: \n        for j in range(len(p) + 1): \n            next_list.append(p[0:j] + s[0] + p[j:len(p)])  \n    return next_list", "category": "Python"}, {"instruction": "Design a code to divide two integers without using division operator.", "input": "38, 4", "output": "def divide_without_operator(x, y):\n    if x == 0:\n        return 0 \n  \n    sign = 1\n    if x * y < 0:\n        sign = -1\n  \n    x = abs(x) \n    y = abs(y) \n  \n    result = 0\n  \n    while (x >= y): \n  \n        temp = y \n        i = 1\n  \n        while (x >= temp): \n            x -= temp \n            result += i \n            i <<= 1 \n            temp <<= 1 \n  \n    return result * sign", "category": "Python"}, {"instruction": "Construct a code to remove all numbers greater than specified value from a given list.", "input": "[1, 6, 4, 9, 5, 8, 2], 7", "output": "def remove_greater(arr, value):\n    new_arr = []\n    for num in arr:\n        if num <= value:\n            new_arr.append(num)\n    return new_arr", "category": "Python"}, {"instruction": "Design a code to arrange an array of numbers such that all odd numbers come before even numbers.", "input": "[2, 8, 3, 4, 9]", "output": "def rearrange_arr(arr): \n    odd_list, even_list = [], [] \n    for num in arr: \n        if num & 1: \n            odd_list.append(num) \n        else: \n            even_list.append(num) \n  \n    return odd_list + even_list", "category": "Python"}, {"instruction": "Compose a code to find the mean and median of a given list", "input": "[1, 6, 4, 9, 5, 8, 2]", "output": "def get_mean_median(nums):\n    num_count = len(nums) \n    num_sum = 0.0\n    for num in nums: \n        num_sum += num\n  \n    mean = num_sum / num_count \n  \n    nums.sort() \n    if num_count % 2 == 0: \n        median1 = nums[num_count//2] \n        median2 = nums[num_count//2 - 1] \n        median = (median1 + median2)/2\n    else: \n        median = nums[num_count//2] \n  \n    return mean, median", "category": "Python"}, {"instruction": "Design a data structure to store a list of names of the student with their respective grades in a class.", "input": "Student names and grades\n\n[\n    ['John', 90], \n    ['Tom', 80],\n    ['Jill', 95],\n    ['Stacy', 75]\n]", "output": "class StudentGrades:\n    def __init__(self, names, grades):\n        self.names = names\n        self.grades = grades\n    \n    def add_entry(self, name, grade):\n        self.names.append(name)\n        self.grades.append(grade)\n        \n    def get_grade(self, name):\n        for i in range(len(self.names)):\n            if self.names[i] == name:\n               return self.grades[i]", "category": "Python"}, {"instruction": "Write a class and its constructor in Python for a vehicle object that has the fields 'type', 'make', 'model' and 'color'.", "input": "Car, Toyota, Camry, Red", "output": "class Vehicle:\n    def __init__(self, vehicle_type, make, model, color):\n        self.type = vehicle_type\n        self.make = make\n        self.model = model\n        self.color = color\n\ncar = Vehicle(\"Car\", \"Toyota\", \"Camry\", \"Red\")", "category": "Python"}, {"instruction": "Write a function to detect if the given integer is even or odd.", "input": "number = 3", "output": "def is_even(number):\n    if number % 2 == 0:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Write a Python program to find the longest substring in a given string which has no repeating characters.", "input": "", "output": "def longest_substring_without_repeating_characters(str):\n    start, max_len = 0, 0\n    used_char = {}\n\n    for i, char in enumerate(str):\n        if char in used_char and start <= used_char[char]:\n            start = used_char[char] + 1\n        else:\n            max_len = max(max_len, i - start + 1)\n\n        used_char[char] = i\n        \n    return max_len", "category": "Python"}, {"instruction": "Create a for loop in Python that iterates over every element in a list named 'nums'.", "input": "nums = [1, 4, 6, 8, 10]", "output": "for num in nums:\n    # Do something with num", "category": "Python"}, {"instruction": "Using a given array of numbers, create a function to display the frequency of each number.", "input": "", "output": "def frequency(array):\n    count = {}\n    # Count the number of occurances\n    for element in array:\n        if element not in count:\n            count[element] = 1\n        else:\n            count[element] += 1\n\n    # Display the count\n    for element in count:\n        print(\"Number {} occurs {} times\".format(element, count[element]))", "category": "Python"}, {"instruction": "Write code that validates a given number is within a given range", "input": "num = 5\nmin = 0\nmax = 10", "output": "def in_range(num, min, max):\n    if num in range(min, max):\n        print(f'{num} is in range')\n    else:\n        print(f'{num} is not in range')\nin_range(num, min, max) # Output: 5 is in range", "category": "Python"}, {"instruction": "Read an array of numbers and output an array with all the even numbers", "input": "array = [2, 3, 4, 5, 6, 7, 8]", "output": "even_array = [i for i in array if i % 2 == 0] \nprint(even_array) # Output: [2, 4, 6, 8]", "category": "Python"}, {"instruction": "Given a 2-dimensional array, print the elements across each row.", "input": "arr = [[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]]", "output": "for row in arr:\n    for col in row:\n        print(col, end=\" \")\n    print(\"\")\n# Output\n1 2 3\n4 5 6\n7 8 9", "category": "Python"}, {"instruction": "What is a bot?", "input": "", "output": "A bot is a software application that automates simple tasks such as sending messages, responding to questions, or performing other tasks. It is often used to create interactive experiences with users, such as chatbots or virtual assistants. It can also be used to automate online activities such as web browsing and data entry.", "category": "Python"}, {"instruction": "Edit a piece of code to fix a syntax error.", "input": "def loopList(list) \n  for i in range(5) \n    sum += list i\n  \n  return sum", "output": "def loopList(list): \n  sum = 0\n  for i in range(5):\n    sum += list[i] \n  \n  return sum", "category": "Python"}, {"instruction": "Write a code to detect all possible anagrams of a given word in Python.", "input": "word = \"cat\"", "output": "def all_anagrams(word):\n \n    if len(word) ==0:\n        return [word]\n    else:\n        temp = []\n        for anagram in all_anagrams(word[1:]):\n            for i in range(len(word)):\n                temp.append(anagram[:i] + word[0:1] + anagram[i:])\n        return temp\n\nall_anagrams(word) // Returns ['act', 'atc', 'cat', 'cta', 'tac', 'tca']", "category": "Python"}, {"instruction": "Write a Python program to identify whether or not a given number is prime.", "input": "", "output": "def is_prime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Write a code to count the occurrences of a particular element in a given list.", "input": "list1 = [1, 2, 3, 3, 3, 4, 5]\nelement = 3", "output": "def count_occurrences(list1, element):\n  count = 0\n  for elem in list1:\n    if elem == element:\n      count += 1\n  return count\n\nif __name__ == \"__main__\":\n  print(\"Number of occurrences of\", element, \"in the list:\", count_occurrences(list1, element))", "category": "Python"}, {"instruction": "Write a Python Class to store a telephone directory's details.", "input": "", "output": "class TelephoneDirectory:\n def __init__(self):\n self.contacts = {}\n\n def add(self, name, number):\n self.contacts[name] = number\n\n def find(self, name):\n return self.contacts[name]", "category": "Python"}, {"instruction": "Given an array of integers, find the maximum difference between two elements in the array such that the larger element appears after the smaller element in the array.", "input": "[5, 2, 4, 7, 15]", "output": "def maxDifference(arr):\n  # Initialize max difference\n  max_difference = 0\n\n  # Traverse the array\n  for i in range(len(arr) - 1):\n    for j in range(i + 1, len(arr)):\n      # Find the difference between two elements\n      diff = arr[j] - arr[i]\n\n      # Check if the difference is the maximum\n      if diff > max_difference:\n        max_difference = diff\n\n  return max_difference\n\n# Output\nmaxDifference([5, 2, 4, 7, 15]) # 13", "category": "Python"}, {"instruction": "Take the following list of temperatures in Celsius and convert them to Fahrenheit.", "input": "[10, 15, 20, 25, 30]", "output": "def celsius_to_fahrenheit(celsius):\n    return (celsius * (9/5)) + 32\n\nif __name__ == '__main__':\n    temperatures = [10, 15, 20, 25, 30]\n    fahrenheit_temperatures = []\n    for temp in temperatures:\n        fahrenheit_temperatures.append(celsius_to_fahrenheit(temp))\n    \n    print(fahrenheit_temperatures)", "category": "Python"}, {"instruction": "Write a Python program to calculate the number of bits needed to represent an integer in binary form.", "input": "", "output": "def num_of_bits(num):\n    return len(bin(num)[2:])\n\nif __name__ == '__main__':\n    print(num_of_bits(50))", "category": "Python"}, {"instruction": "Write a Python script to parse given web pages and extract links from it.", "input": "", "output": "\"\"\"\nWrite a Python script to parse given web pages and extract links from it\n\"\"\"\n\nfrom bs4 import BeautifulSoup\nimport requests\n\ndef extract_links(url):\n    response = requests.get(url)\n    data = response.text\n    soup = BeautifulSoup(data, 'html.parser')\n    links = []\n    for link in soup.find_all('a'):\n        links.append(link.get('href'))\n    return links\n\nif __name__ == '__main__':\n    print(extract_links('https://example.com'))", "category": "Python"}, {"instruction": "Create a method to filter out odd numbers from an array.", "input": "array = [6, 5, 9, 10, 11, 8]", "output": "def filter_odd_numbers(array): \n    result = [] \n    for i in array: \n        if i % 2 == 0: \n            result.append(i) \n    return result\n\n# Driver code\narray = [6, 5, 9, 10, 11, 8] \nprint(filter_odd_numbers(array))", "category": "Python"}, {"instruction": "Generate a function in Python to compute the area of a rectangle.", "input": "", "output": "def area_rectangle(length, breadth): \n    return length * breadth", "category": "Python"}, {"instruction": "Design a function to calculate the GCD (greatest common divisor) of two given integers.", "input": "", "output": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a", "category": "Python"}, {"instruction": "Design a function to input an array and sort it using QuickSort algorithm.", "input": "", "output": "def quicksort(arr): \n    if len(arr) <= 1:\n        return arr\n  \n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)", "category": "Python"}, {"instruction": "Write a function to create a matrix NxN with values of 0 filled in.", "input": "", "output": "def generate_matrix(n):\n    matrix = []\n    for _ in range(n):\n        matrix.append([0 for _ in range(n)])\n    return matrix", "category": "Python"}, {"instruction": "Construct a class to represent a basic calculator with functions for addition, subtraction, multiplication and division.", "input": "", "output": "class Calculator:\n    def __init__(self):\n        pass\n\n    def add(self, a, b):\n        return a + b\n    \n    def subtract(self, a, b):\n        return a - b\n\n    def multiply(self, a, b):\n        return a * b\n\n    def divide(self, a, b):\n        return a / b", "category": "Python"}, {"instruction": "Write a Python code to generate random numbers from the given list.", "input": "[10, 20, 30, 40]", "output": "import random\n\nnumbers = [10, 20, 30, 40]\n\nrandom_number = random.choice(numbers)\n\nprint(random_number)", "category": "Python"}, {"instruction": "Devise a Python code snippet to return the last character of a given string.", "input": "string = \"stackoverflow\"", "output": "last_char = string[-1]\nprint(last_char)", "category": "Python"}, {"instruction": "Create a pandas dataframe to display the given data as a table.", "input": "Name     Age     City\nAlice    25      London\nBob      32      Tokyo", "output": "import pandas as pd\n\ndata = [\n {'Name': 'Alice', 'Age': 25, 'City': 'London' },\n {'Name': 'Bob', 'Age': 32, 'City': 'Tokyo' }\n ]\n\ndata_frame = pd.DataFrame(data)\nprint(data_frame)\n\nOutput:\nName  Age     City\n0  Alice    25    London\n1    Bob    32     Tokyo", "category": "Python"}, {"instruction": "Create a function that processes an array to remove all the duplicated elements", "input": "[1, 1, 2, 5, 6, 6, 10]", "output": "def remove_duplicates(arr):\n  new_arr = []\n  \n  for i in arr:\n    if i not in new_arr:\n      new_arr.append(i)\n  \n  return new_arr\n  \nremove_duplicates([1, 1, 2, 5, 6, 6, 10])\n# returns [1, 2, 5, 6, 10]", "category": "Python"}, {"instruction": "Analyze the following code and suggest a modification", "input": "def hello():\n    print('Hello!')", "output": "# This code prints out \"Hello!\" when called.\n# A modification to include a parameter for a name would be as follows:\ndef hello(name):\n    print('Hello, ' + name + '!')", "category": "Python"}, {"instruction": "Modify the following python program to include a comment explaining the purpose of the code", "input": "numbers = [1, 2, 3, 4, 5]\nsum = 0\nfor num in numbers:\n    sum += num", "output": "# This program is used to calculate the sum of a given list of numbers\n\nnumbers = [1, 2, 3, 4, 5]\nsum = 0\nfor num in numbers:\n    sum += num", "category": "Python"}, {"instruction": "Given the following array, delete all occurrences of the number 4.", "input": "list1 = [4, 3, 4, 2, 3, 4, 4]", "output": "list1 = [4, 3, 4, 2, 3, 4, 4]\n\ndef delete_four(arr):\n    \"\"\"This function deletes all occurrences of the number 4 in the given array\"\"\"\n    for i in range(len(arr)):\n        if arr[i] == 4:\n            arr.pop(i)\n            i -= 1\n    return arr\n\nprint(delete_four(list1))", "category": "Python"}, {"instruction": "Create a function that takes an array and prints out the biggest number in it.", "input": "[1, 7, 2, 11, 4]", "output": "def find_max_num(nums_list):\n    \"\"\"This function takes an array and prints out the biggest number in it.\"\"\"\n    max_num = nums_list[0]\n    for num in nums_list:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nnums_list = [1, 7, 2, 11, 4]\nprint(find_max_num(nums_list))", "category": "Python"}, {"instruction": "Create a Python program to calculate the square root of a number provided by the user.", "input": "", "output": "def square_root(number):\n    \"\"\"This program takes a number and calculates its square root.\"\"\"\n    return number**0.5\n\nnum = int(input(\"Enter a number: \"))\nprint(\"The square root of \", num, \" is \", square_root(num))", "category": "Python"}, {"instruction": "Create an algorithm that takes two integers and returns the smallest common multiple of the two numbers.", "input": "x = 12\ny = 24", "output": "def smallest_common_multiple(x, y):\n  for i in range(1, y+1):\n    if (i % x == 0) and (i % y == 0):\n      return i\n\nif __name__ == '__main__':\n  x = 12\n  y = 24\n  print(smallest_common_multiple(x, y))", "category": "Python"}, {"instruction": "Create a method to convert a given number to Roman numeral format.", "input": "num = 2020", "output": "def int_to_roman(num):\n  roman_numerals = {\n    1: 'I',\n    4: 'IV',\n    5: 'V',\n    9: 'IX',\n    10: 'X',\n    40: 'XL',\n    50: 'L',\n    90: 'XC',\n    100: 'C',\n    400: 'CD',\n    500: 'D',\n    900: 'CM',\n    1000: 'M'\n  }\n  result = ''\n  for n in sorted(roman_numerals.keys(), reverse=True):\n    count = num // n\n    result += roman_numerals[n] * count\n    num %= n\n  return result\n\nif __name__ == '__main__':\n  num = 2020\n  print(int_to_roman(num))", "category": "Python"}, {"instruction": "Analyze the following code and answer the following question: Is there a bug in this code?", "input": "def foo(num):\n  if num == 0:\n    return 1\n  else:\n    return foo(num - 1)", "output": "Yes, there is a bug in this code. The function `foo` does not have a base case and will cause an infinite recursion if it is called with a non-zero argument. The base case should be if `num == 0` then `return 1` else `return foo(num - 1)`.", "category": "Python"}, {"instruction": "Generate a Python code snippet to print the list of numbers from 0 to 9.", "input": "", "output": "for i in range(0,10):\n    print(i)", "category": "Python"}, {"instruction": "Find the number of occurrences of \u2018Python\u2019 in the given string.", "input": "Python is a great language. Python is easy to learn.", "output": "def count_occurences(str, word):\n    return str.count(word)\n\nif __name__ == '__main__':\n    str = 'Python is a great language. Python is easy to learn.'\n    print(count_occurences(str, 'Python'))", "category": "Python"}, {"instruction": "Remove any element from an array that is greater than 10", "input": "[3, 5, 10, 20, 7]", "output": "def removeGreaterThanTen(arr): \n\t# Create a new_arr array\n    new_arr = [] \n\n    # Iterate each element in array\n    for i in range(len(arr)):\n\n        # Check if the element is greater than 10\n        if arr[i] <= 10: \n            # Add the element to the new_arr\n            new_arr.append(arr[i]) \n\n    return new_arr", "category": "Python"}, {"instruction": "Find the largest key in a dictionary", "input": "{'a':1, 'b':5, 'c':6, 'd':9}", "output": "def findLargestKey(d): \n\t# Initialize largest_key and largest_val\n    largest_key = None\n    largest_val = -1\n\t\n    # Iterate each key-value in dictionary\n    for key, value in d.items():\n\t\t# Initialize largest_key and largest_val\n        if value > largest_val: \n            largest_val = value\n            largest_key = key\n  \n    return largest_key", "category": "Python"}, {"instruction": "Create an algorithm to compute the greatest common divisor between two numbers.", "input": "m = 8, n = 20", "output": "def gcd(m, n):\n    # base case \n    if m == 0:\n        return n\n    \n    # recursive case\n    return gcd(n % m, m)\n\nprint(gcd(8, 20)) # Output: 4", "category": "Python"}, {"instruction": "Create a Python class for a movie instance with name, director, and year fields.", "input": "", "output": "class Movie:\n    def __init__(self, name, director, year):\n        self.name = name\n        self.director = director\n        self.year = year", "category": "Python"}, {"instruction": "Re-implement the same program in a different language of your choice.", "input": "def quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quick_sort(less) + [pivot] + quick_sort(greater)", "output": "def quick sort(arr):\n    if len(arr) < 2:\n        return arr\n    else: \n        pivot = arr[0]\n        left = [x for x in arr[1:] if x <= pivot]\n        right = [x for x in arr[1:] if x > pivot]\n        return quick_sort(left) + [pivot] + quick_sort(right)", "category": "Python"}, {"instruction": "Create a Python script that inputs an integer and prints \"odd\" if the number is odd, or \"even\" if the number is even.", "input": "", "output": "def check_even_or_odd(num):\n  if num % 2 == 0:\n    print(\"even\")\n  else:\n    print(\"odd\")\n  \ncheck_even_or_odd(5) # odd", "category": "Python"}, {"instruction": "Implement a bubble sort on the given array of integers.", "input": "[4, 8, 1, 3, 9]", "output": "def bubble_sort(arr):\n  for _ in range(len(arr) -1): \n    for i in range(len(arr)-1):\n      if arr[i] > arr[i+1]:\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr\nprint(bubble_sort([4, 8, 1, 3, 9])) # [1, 3, 4, 8, 9]", "category": "Python"}, {"instruction": "In what languages can the TensorFlow library be used?", "input": "", "output": "The TensorFlow library can be used in Python, C++, JavaScript, Java, Go, Swift, and R. It is also supported in different platforms such as iOS, Android, and web browsers.", "category": "Python"}, {"instruction": "How do you define and call a function in Python?", "input": "", "output": "In Python, a function is defined using the `def` keyword followed by the function name, a list of parameters and the code block that implements the function. To call a function, you need to provide the name of the function followed by a list of arguments. For example, to define and call a function called `myfunc` with an argument `x`:\n\ndef myfunc(x):\n    # function implementation\n\nmyfunc(x)  # call the function with argument x", "category": "Python"}, {"instruction": "Calculate the value of PI using the Leibniz formula.", "input": "", "output": "def calculatePi():\n    pi = 0.0\n    N = 10000\n    sign = 1\n    for i in range(N):\n        pi += 4.0 * sign / (2.0 * i + 1.0)\n        sign *= -1\n    return pi\n\nprint(\"\u03c0 = \", calculatePi()) # 3.141592653589793", "category": "Python"}, {"instruction": "Solve the following problem. Given an array of integers, return an array with the elements multiplied by two.", "input": "arr = [2, 8, 10, 9]", "output": "def doubleElements(arr):\n  return [num * 2 for num in arr]\n  \narr = [2, 8, 10, 9]\nprint(doubleElements(arr)) // [4, 16, 20, 18]", "category": "Python"}, {"instruction": "Write a Python code to sort a given list into descending order.", "input": "", "output": "def sortDescending(nums):\n  nums.sort(reverse=True)\n  return nums", "category": "Python"}, {"instruction": "Look at the given code and find the bug in it.", "input": "def add_numbers(x,y):\n    return x + y + 1", "output": "The bug in the given code is that it adds 1 extra to the result of the function. To fix this, the return statement should be modified to: return x + y.", "category": "Python"}, {"instruction": "Extract only the digits from a given string using Python.", "input": "", "output": "import re\n\ndef extract_digits(string):\n    regex = r\"\\D\"\n    return re.sub(regex, \"\", string)", "category": "Python"}, {"instruction": "Write a Python script to convert a given number of minutes into hours and minutes.", "input": "", "output": "def minutes_to_hours(minutes):\n  hours = minutes // 60\n  minutes = minutes % 60\n  return hours, minutes", "category": "Python"}, {"instruction": "Develop a high-level algorithm for pathfinding.", "input": "", "output": "def find_path(start, end):\n    # Create an empty list to store the path\n    path = []\n\n    # Create a dictionary to store visited nodes\n    visited = {start: None}\n\n    # Create a queue and add the initial space to it\n    queue = [start]\n\n    # Keep looping until the queue is empty\n    while len(queue) > 0:\n        # Get the first element in the queue\n        curr = queue.pop(0)\n\n        # Add the current node to the path\n        path.append(curr)\n\n        # Check if we reached the end of the path\n        if curr == end:\n            return path\n\n        # Explore all neighbours of the current node\n        for neighbour in get_neighbours(curr):\n            # Check if the neighbour is not visited previously\n            if neighbour not in visited:\n                # Add the neighbour to the queue and mark it as visited\n                queue.append(neighbour)\n                visited[neighbour] = curr\n    # If the queue is empty, there is no path\n    return None", "category": "Python"}, {"instruction": "Edit the provided code so that it prints 10 rows and 10 columns of stars.", "input": "for row in range(5):\n    for col in range(5):\n        print(\"*\")", "output": "for row in range(10):\n    for col in range(10):\n        print(\"*\", end=\"\")\n    print()", "category": "Python"}, {"instruction": "Replace the \"TODO\" comment in the following Python statement with an appropriate value.", "input": "count = 0\n# TODO: add 1 to count", "output": "count = 0\ncount += 1", "category": "Python"}]
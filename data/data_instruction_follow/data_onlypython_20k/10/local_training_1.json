[{"instruction": "Create a class in Python for representing a 2-dimensional point.", "input": "", "output": "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y", "category": "Python"}, {"instruction": "Create a NumPy array with all the elements set to 0.", "input": "", "output": "import numpy as np\narr = np.zeros(shape=(10, 10))", "category": "Python"}, {"instruction": "Write a function to group a list of strings based on the first two characters of each string.", "input": "list = [\"aa12\", \"bd32\", \"ca53\", \"db34\"]", "output": "def group_list(list):\n    grouped = {}\n    for item in list:\n        key = item[:2]\n        if key not in grouped:\n            grouped[ key ] = [item]\n        else:\n            grouped[ key ].append(item)\n    return grouped", "category": "Python"}, {"instruction": "Write a function to measure the similarity between two strings.", "input": "", "output": "def similarity(string1, string2):\n    common_chars = set(string1).intersection(string2)\n    return len(common_chars) / (len(string1) + len(string2) - len(common_chars))\n\nif __name__ == \"__main__\":\n    string1 = \"test\"\n    string2 = \"testimony\"\n    sim = similarity(string1, string2)\n    print(sim)", "category": "Python"}, {"instruction": "Write a code to count repeated words in a given sentence.", "input": "\"This is a sentence. This is a test sentence.\"", "output": "def count_words(sentence):\n    words = sentence.split()\n    counts = dict()\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n    return counts\n\nif __name__ == '__main__':\n    sentence = \"This is a sentence. This is a test sentence.\"\n    word_counts = count_words(sentence)\n    print(word_counts)", "category": "Python"}, {"instruction": "Write a code to convert an integer to a float in Python.", "input": "", "output": "# Convert an integer to a float in Python\ndef int_to_float(num):\n    return float(num)\n\nif __name__ == '__main__':\n    integer = 5 # Sample integer\n    print(int_to_float(integer))", "category": "Python"}, {"instruction": "Compare two JSON objects in Python.", "input": "first_obj = {\n    'name': 'John',\n    'age': 30\n}\nsecond_obj = {\n    'name': 'John',\n    'age': 34\n}", "output": "import json\n\n# Compare two JSON objects and return `True` if equal, `False` if not\ndef compare_json_objects(first_obj, second_obj):\n    first_obj_str = json.dumps(first_obj)\n    second_obj_str = json.dumps(second_obj)\n    if first_obj_str == second_obj_str:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    first_obj = {\n        'name': 'John',\n        'age': 30\n    }\n    second_obj = {\n        'name': 'John',\n        'age': 34\n    }\n    print(compare_json_objects(first_obj, second_obj))", "category": "Python"}, {"instruction": "Create an API call in Python to search for a movie by title.", "input": "", "output": "import requests\n\ndef search_movie_by_title(title):\n    url = 'https://api.themoviedb.org/3/search/movie?api_key=<api_key>&query=' + title\n    response = requests.get(url).json()\n    return response", "category": "Python"}, {"instruction": "Implement a function in Python that takes an array of numbers and returns the index of the maximum element.", "input": "[4,7,9,2,10]", "output": "def find_index_max(arr):\n    max_index = 0\n    for i in range(1, len(arr)):\n        if arr[max_index] < arr[i]:\n            max_index = i\n    return max_index", "category": "Python"}, {"instruction": "Write a function in Python to convert a given decimal number into its binary form.", "input": "", "output": "def decimal_to_binary(num):\n    binary = []\n\n    while num > 0:\n        binary.append(num%2)\n        num //= 2\n    binary.reverse()\n    return binary", "category": "Python"}, {"instruction": "Add functionality to a given Python class to retrieve a book ISBN by its title.", "input": "", "output": "class Book:\n    def __init__(self, title, isbn):\n        self.title = title\n        self.isbn = isbn\n        \n    def get_ISBN_by_title(self, title):\n        if self.title == title:\n            return self.isbn\n        else:\n            return None", "category": "Python"}, {"instruction": "Compute the maximum sum of elements of a given subarray of length k in an array of integers.", "input": "arr = [22, 4, 65, -12, 8, 99, 103], k = 2", "output": "def find_max_sum(arr, k):\n    max_sum = 0\n    window_sum = 0\n    \n    # Compute the sum of first k elements \n    for i in range(k):\n        window_sum += arr[i]\n        \n    max_sum = window_sum\n    \n    # Add new element while removing the first\n    for i in range(k, len(arr)):\n        window_sum += arr[i] - arr[i - k]\n        max_sum = max(max_sum, window_sum)\n        \n    return max_sum", "category": "Python"}, {"instruction": "Design an algorithm to sort an array using Quick Sort.", "input": "Array: [5, 3, 6, 2, 1, 4]", "output": "def quickSort(arr, low, high):\n    # Base case\n    if low >= high:\n        return\n\n    # Pivot is the middle element\n    pivot = arr[(low + high) // 2]\n    i = low # Left pointer\n    j = high # Right pointer\n\n    while i <= j:\n        # If the current value is smaller or equal than the pivot\n        while arr[i] < pivot:\n            i += 1\n        # If the current value is larger than the pivot\n        while arr[j] > pivot:\n            j -= 1\n\n        # If values are not in the correct order\n        if i <= j:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n\n    # Recursively sort the left and right halves\n    quickSort(arr, low, j)\n    quickSort(arr, i, high)\n\narr = [5, 3, 6, 2, 1, 4]\nquickSort(arr, 0, len(arr)-1)\nprint(arr)\n\nOutput: [1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Design a program to find the longest palindrome inside a given string.", "input": "String: \"abcaaacbcb\"", "output": "def longestPalindrome(string):\n # set up the N^2 matrix to store the boolean\n # values of the characters that are palindromes\n n = len(string)\n matrix = [[False for i in range(n)] for j in range(n)]\n\n max_length = 1\n start = 0\n\n # Every single character is a palindrome of length 1\n for i in range(n):\n  matrix[i][i] = True\n\n # Check for substrings of length 2\n for i in range(n - 1):\n  if string[i] == string[i + 1]:\n   matrix[i][i + 1] = True\n   start = i\n   max_length = 2\n\n # Check for substrings of length 3 and more\n for substring_length in range(3, n + 1):\n  for i in range(n - substring_length + 1):\n   end = i + substring_length - 1\n   if matrix[i + 1][end - 1] and string[i] == string[end]:\n    matrix[i][end] = True\n \n    if substring_length > max_length:\n     start = i\n     max_length = substring_length\n \n print(\"Longest palindrome substring is:\", \n\tstring[start:start + max_length])\n\nlongestPalindrome(\"abcaaacbcb\")\n\nOutput: Longest palindrome substring is: aaacbcaaa", "category": "Python"}, {"instruction": "Construct an algorithm to search for the Given Normalised Word in a Normalised Trie.", "input": "Normalised Trie:\nroot \n|\ns -- a - l -- u -- t\n|\ns -- e - l -- e -- c\nGiven Normalised Word: sault", "output": "def searchWord(node, word):\n if len(word) == 0:\n  return True\n  \n # Check if the character at first position is in the children of the current node\n if word[0] in node.children:\n  # Get the node of the character at first position\n  nextNode = node.children[word[0]]\n  \n  # Check if the rest of the string is present in the \n  # remaining children of the current node\n  return searchWord(nextNode, word[1:])\n # If the character is not found\n else:\n  return False\n  \n# Function to normalize the word\ndef normalize(word):\n # If the word contains only lower case letters\n if word.islower():\n  return word\n \n word = word.lower()\n return word\n \n# Main program\ntrie = Trie() \ntrie.add(\"sault\")\n\n# The word to be searched\nword = \"sault\"\n\n# Normalize the word\nword = normalize(word)\n\n# Search the normalized word in the trie\nif searchWord(trie.root, word):\n print(\"Found!\")\nelse:\n print(\"Not Found!\")\n\nOutput: Found!", "category": "Python"}, {"instruction": "Create a function to remove specified nodes from a linked list.", "input": "Linked List:\n10 -> 21 -> 14 -> 35 -> 19 -> 63 -> null\nNode: 14", "output": "def deleteNode(head, node):\n prev = None\n current = head\n # traverse the list until node is found\n while current is not None:\n  if current.data == node:\n  break\n  prev = current\n  current = current.next\n # if the node is the first node\n if prev is None:\n  head = current.next\n else:\n prev.next = current.next\n return head\n\nhead = {\n data: 10,\n next : { \n  data: 21, \n  next: { \n   data: 14, \n   next: { \n    data: 35, \n    next: { \n     data: 19, \n     next: { \n      data: 63, \n      next: None\n     } \n   }\n }\n}\n}\n\nprint(deleteNode(head, 14)) \n\nOutput:\ndata: 10,\nnext : { \n  data: 21, \n  next: { \n   data: 35, \n   next: { \n    data: 19, \n    next: { \n     data: 63, \n     next: None\n    } \n  }\n}\n}", "category": "Python"}, {"instruction": "Write a SQL query to select the elements from the table whose ID is not present in the given python list.", "input": "Table: 'products'\nColumns: 'id', 'name', 'category', 'price'\nPython List: [2, 3, 8]", "output": "SELECT * FROM products WHERE id NOT IN (2,3,8);", "category": "Python"}, {"instruction": "Implement a method to find the shortest path between two points in a two-dimensional array using Dijkstra's\nalgorithm.", "input": "The two-dimensional array:\n[[1, 8, 3],\n [4, 5, 6],\n [9, 5, 0]]\nStart point: [0, 0]\nEnd point: [2, 2]", "output": "# the weights array will be used to store the distances\n# from the start cell to any other cell in the array\nweights = [[float('inf')] * 3 for _ in range(3)]\nweights[0][0] = 0\n# Directions are up, down, left and right\ndirections = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\n# The queue for Dijkstra's algorithm\nq = [(0, 0)]\nwhile q:\n # curr is the current cell in consideration\n curr = q.pop(0)\n # curr_dist is the distance of the current cell\n # from the start cell\n curr_dist = weights[curr[0]][curr[1]]\n # check all the adjacent cells\n for direction in directions:\n  row = curr[0] + direction[0]\n  col = curr[1] + direction[1]\n  # if the adjacent cell is within the array\n  if 0 <= row < 3 and 0 <= col < 3:\n   # if the distance of the adjacent cell is bigger\n   # than current cell distance + 1, update it\n   if weights[row][col] > curr_dist + 1:\n    weights[row][col] = curr_dist + 1\n    q.append((row, col))\n\n# the distance from the start to the end point will\n# be stored in the weights array at the given location\ndistance = weights[2][2]\nprint(f\"The shortest path from start to end is {distance}\")", "category": "Python"}, {"instruction": "Write a Python code to open a web page and print its content.", "input": "url = \"www.wikipedia.org\"", "output": "import requests\n\nurl = \"www.wikipedia.org\"\n\ntry:\n    response = requests.get(url)\n    if response.status_code == 200:\n        print(response.text)\n    else:\n        print(\"Oops! Something went wrong!\")\n\nexcept Exception as e:\n    print(\"Exception occurred: %s\" % (e))", "category": "Python"}, {"instruction": "Calculate the total number of possible binary trees with n nodes.", "input": "", "output": "def numTrees(n): \n    if n == 0: \n        return 1\n    else: \n        num = 0\n        for roots in range(1, n+1): \n            leftNum = numTrees(roots - 1) \n            rightNum = numTrees(n - roots) \n            num += leftNum * rightNum \n    return num", "category": "Python"}, {"instruction": "Edit the following code to print out the nth Fibonacci number.", "input": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)", "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\nprint(Fibonacci(n))", "category": "Python"}, {"instruction": "Write a function that sums the elements of an array", "input": "", "output": "def array_sum(array):\n res = 0\n for el in array:\n  res += el\n return res", "category": "Python"}, {"instruction": "Find any two numbers in an array such that their sum is equal to a given value.", "input": "array = [3, 4, 5, 6, 7, 8]\nvalue = 11", "output": "for i in range(len(array)):\n for j in range(i+1, len(array)):\n  if array[i] + array[j] == value:\n   print(array[i], array[j])", "category": "Python"}, {"instruction": "Create a for loop that prints the numbers 0 to 10 and prints if the number is even or odd.", "input": "", "output": "for i in range(11):\n if i % 2 == 0:\n print(f'{i} is even')\n else:\n print(f'{i} is odd')", "category": "Python"}, {"instruction": "Create an array in Python containing the cube of all the integers from 1 to 10.", "input": "", "output": "import array\nint_array = array.array(\"i\", [i*i*i for i in range(1, 11)])", "category": "Python"}, {"instruction": "Create a function to find the longest common prefix of two strings.", "input": "str1 = \"hello\", str2 = \"helmet\"", "output": "def longest_common_prefix(str1, str2):\n    lcp = \"\"\n    i = 0\n    while i < len(str1) and i < len(str2) and str1[i] == str2[i]:\n        lcp += str1[i]\n        i += 1\n    return lcp", "category": "Python"}, {"instruction": "Find the maximum value from a Python dictionary.", "input": "sample_dict = {'a': 10, 'b': 20, 'c': 40, 'd': 30}", "output": "def find_max(sample_dict):\n  max_val = 0\n  for key, val in sample_dict.items():\n    if val > max_val:\n      max_val = val\n  return max_val", "category": "Python"}, {"instruction": "Given a list of integers, find the largest number.", "input": "test_list = [2, 5, 10, 15]", "output": "def largest_number(test_list): \n    max_number = test_list[0] \n    for i in test_list: \n        if i > max_number: \n            max_number = i \n    return max_number", "category": "Python"}, {"instruction": "Write a function to print the first n perfect square numbers.", "input": "", "output": "def print_perfect_squares(n):\n    for i in range(1,n+1):\n        square = i*i\n        print(square)", "category": "Python"}, {"instruction": "Create a function that prints a list of all the even numbers from a given list of integers.", "input": "test_list = [1, 2, 3, 4, 5, 6]", "output": "def print_even(test_list):\n    even_list = []\n    for num in test_list:\n        if num % 2 == 0:\n            even_list.append(num)\n    print(even_list)", "category": "Python"}, {"instruction": "Create an iOS app that calculates and shows the currency conversion rate between two different countries.", "input": "", "output": "import UIKit\n\nclass ViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // Do any additional setup after loading the view.\n        \n        let fromCurrency = \"USD\"\n        let toCurrency = \"AUD\"\n        \n        CurrencyService.shared.getCurrencyExchangeRate(fromCurrency: fromCurrency, toCurrency: toCurrency) { exchangeRate in\n            print(\"The exchange rate from \\(fromCurrency) to \\(toCurrency) is \" + exchangeRate)\n        }\n    }\n\n}\n\nclass CurrencyService {\n    \n    static let shared = CurrencyService()\n    \n    func getCurrencyExchangeRate(fromCurrency: String, toCurrency: String, completion: @escaping (String) -> Void) {\n        guard let url = URL(string: \"https://api.exchangeratesapi.io/latest?base=\\(fromCurrency)&symbols=\\(toCurrency)\") else {\n            return\n        }\n        \n        URLSession.shared.dataTask(with: url) { (data: Data?, response: URLResponse?, error: Error?) in\n            if let error = error {\n                print(\"Error: Could not request exchange rate from server. \\(error.localizedDescription)\")\n            }\n            \n            guard let data = data else {\n                print(\"Error: Did not receive data\")\n                return\n            }\n            \n            do {\n                let json = try JSONSerialization.jsonObject(with: data, options: [])\n                guard let jsonDict = json as? Dictionary<String, Any>,\n                    let rates = jsonDict[\"rates\"] as? Dictionary<String, Double>,\n                    let exchangeRate = rates[toCurrency] else {\n                        print(\"Error: Could not get exchange rate from JSON\")\n                        return\n                }\n                completion(String(exchangeRate))\n            } catch {\n                print(\"Error: Could not parse JSON: \\(error.localizedDescription)\")\n            }\n        }.resume()\n    }\n    \n}", "category": "Python"}, {"instruction": "Write a code to get the current time in Python", "input": "", "output": "import time\n\n# return UTC time as a float\ncurrent_time = time.time()\n\n# return current time as a string in this format:\n# 'Thu Feb 28 15: 16: 14 2019'\ncurrent_time_str = time.ctime()", "category": "Python"}, {"instruction": "Write a code to check if the string has all unique characters in Python", "input": "", "output": "def isUnique(string): \n \n    # Assuming character set is ASCII (128 characters) \n    if len(string) > 128: \n        return False\n \n    char_set = [False for _ in range(128)] \n    for char in string: \n        char_value = ord(char) \n \n        if char_set[char_value]: \n            return False\n \n        char_set[char_value] = True\n \n    return True", "category": "Python"}, {"instruction": "How to make an http request in Python", "input": "", "output": "import requests\n\nr = requests.get('http://www.example.com/')\nprint(r.text)", "category": "Python"}, {"instruction": "Generate a random string using 8 characters in Python.", "input": "", "output": "import random \nimport string\n\ndef generate_random_string(size):\n    return ''.join(random.choices(string.ascii_uppercase + string.digits, k = size))\n    \nprint(generate_random_string(8))", "category": "Python"}, {"instruction": "Modify the given Python code to redirect to a different page when the button is clicked.", "input": "<button>Visit example.com</button>", "output": "<button onclick=\"window.location.href='https://example.com/';\">Visit example.com</button>", "category": "Python"}, {"instruction": "Create a dictionary in Python with two keys and it corresponds to two values.", "input": "", "output": "my_dict = {\"key1\" : \"value1\", \"key2\" : \"value2\"}", "category": "Python"}, {"instruction": "Create a for-loop in Python for printing all numbers from 1 to 9 (inclusive).", "input": "", "output": "for x in range(1, 10): \n  print(x)", "category": "Python"}, {"instruction": "Generate Python code to reverse a string", "input": "Input string: Hello", "output": "def reverseString(str): \n    reversed_str = \"\" \n    for i in str: \n        reversed_str = i + reversed_str \n    return reversed_str   \n\nreverseString(\"Hello\")", "category": "Python"}, {"instruction": "Explain the meaning of the term \u2018data encapsulation\u2019 in Object-Oriented Programming.", "input": "", "output": "Data encapsulation is an important feature of Object-Oriented Programming (OOP). It is a technique of combining data and functions into a single unit called class. data encapsulation hides the implementation details of a class and exposes only the necessary and relevant information which is known as abstraction. This helps to reduce complexity and increase robustness of a program as the implementation details are hidden from the user.", "category": "Python"}, {"instruction": "Change the following code so that it will only return the words that contain more than 5 characters.", "input": "def get_words(text):\n     return text.split(\" \")", "output": "def get_words(text):\n    return [word for word in text.split(\" \") if len(word) > 5]", "category": "Python"}, {"instruction": "How do we define the scope of a variable in Python?", "input": "", "output": "In Python, the scope of a variable is determined by the location of its definition. Variables defined within a function have a local scope, while variables defined outside a function have a global scope. Local variables are accessible only within the same function in which they are declared, while global variables are accessible within all functions.", "category": "Python"}, {"instruction": "What is the significance of the \u2018except\u2019 statement in Python?", "input": "", "output": "The \u2018except\u2019 statement in python is used to handle exceptions that may arise while executing a program. Exceptions can be either syntactic or logical errors. The \u2018except\u2019 statement can be used to catch the specific type of exception and handle them appropriately. For example, it can be used to catch a ValueError, TypeError or IndexError, or any other type of exception, and appropriately handle it.", "category": "Python"}, {"instruction": "Write a Python code to extract the first 3 elements of the following list.", "input": "list = [1, 2, 3, 4, 5]", "output": "first_three_elements = list[:3]", "category": "Python"}, {"instruction": "Suggest an algorithm to solve a N queens problem.", "input": "", "output": "One possible algorithm to solve a N queens problem is to use backtracking. The basic idea is to place a queen in a column and try to place the other queen in the next column, and then repeating this in the subsequent columns until all of the queens are placed in the board.", "category": "Python"}, {"instruction": "Write a Python code to create two empty lists.", "input": "", "output": "list_one = []\nlist_two = []", "category": "Python"}, {"instruction": "Write a Python method to generate a random string of length 10", "input": "", "output": "import random\nimport string\n\ndef random_string(length):\n    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))", "category": "Python"}, {"instruction": "Given the following JSON data, create a Python program to read the data and print the name of the city with the highest population.", "input": "{\n  \"cities\": [\n    {\n      \"name\": \"New York\",\n      \"population\": 8175133\n    },\n    {\n      \"name\": \"Los Angeles\",\n      \"population\": 3792621\n    },\n    {\n      \"name\": \"Chicago\",\n      \"population\": 2695598\n    }\n  ]\n}", "output": "import json\n\nwith open('data.json') as f:\n    data = json.load(f)\n\nmax_population = 0\nmax_city_name = \"\"\nfor city in data['cities']:\n    if city['population'] > max_population:\n        max_population = city['population']\n        max_city_name = city['name']\n\nprint(\"The city with the highest population is\", max_city_name)", "category": "Python"}, {"instruction": "Create a Python program to edit the following line of code to change the text color of the button.", "input": "<button>Press Me</button>", "output": "<button style=\"color: red;\">Press Me</button>", "category": "Python"}, {"instruction": "Implement bubble sort in Python.", "input": "", "output": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]", "category": "Python"}, {"instruction": "Implement an iterator in Python for the following string.", "input": "string = 'Hello World!'", "output": "class Iterator:\n    def __init__(self, data):\n        self.data = data\n        self.index = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.index >= len(self.data):\n            raise StopIteration\n        char = self.data[self.index]\n        self.index += 1\n        return char\n\niterator = Iterator(string)\nfor char in iterator:\n    print(char)", "category": "Python"}, {"instruction": "What is the purpose behind using comments while writing code?", "input": "", "output": "Comments are used while writing code to explain the logic and purpose behind the code. This is important for multiple reasons, such as helping other developers better understand the code and providing helpful reminders for developers returning to the code at a later time. Additionally, good comments make it easier to debug and maintain the code.", "category": "Python"}, {"instruction": "Design an algorithm to calculate the Fibonacci sequence up to a given number n.", "input": "", "output": "We can design an algorithm to calculate the Fibonacci sequence up to a given number n. The algorithm would include two variables, a1 and a2, initially set to 0 and 1. These values would then be updated at each iteration to hold the latest two Fibonacci sequence numbers. A loop would be used to calculate the Fibonacci numbers from 0 up to the given number n. For each iteration, the latest two variables a1 and a2 would be added and stored in the new variable a3. a2 will then be assigned the value stored in a1 and a3 will be assigned to a2. This cycle would continue until the sum of a1 and a2 exceeds the input number n. At that point, the loop would terminate and the Fibonacci sequence will be calculated up to n.", "category": "Python"}, {"instruction": "How would you solve the following problem: Given a list of numbers, find the two numbers that add up to a given sum?", "input": "[3, 6, 2, 8, 4], sum = 10", "output": "def find_sum(arr, num):\n    found = False\n    arr_set = set(arr)\n    for i in arr_set:\n        x = num - i\n        if x in arr_set and x != i:  # make sure the numbers aren't the same\n            found = True\n            return i, x\n\n    if not found:\n        return False", "category": "Python"}, {"instruction": "A website has a form with a textarea field of length 3 rows and 20 columns. Write code to check that the user doesn't exceed the character limit of the textarea.", "input": "", "output": "def check_char_limit(text, rows, cols):\n    lines = text.splitlines()\n    if len(lines) > rows:\n        return False \n    for line in lines:\n        if len(line) > cols:\n            return False\n    return True", "category": "Python"}, {"instruction": "Replace all the ``None`` in the following code to create a valid python statement.", "input": "def find_min(numbers):\n    min = None\n    for number in numbers:\n        if min is None:\n            min = number\n        elif number < min:\n            min = number", "output": "def find_min(numbers):\n    min = float('inf')  # use a high value\n    for number in numbers:\n        if number < min:\n            min = number\n    return min", "category": "Python"}, {"instruction": "Write a function to parse a given string and construct a dictionary which contains each word and the corresponding frequency.", "input": "my_string = 'Hello World'", "output": "def word_count(my_string): \n    words = my_string.split()  \n    frequency = {} \n    for word in words: \n        if word in frequency: \n            frequency[word] += 1\n        else: \n            frequency[word] = 1\n    return frequency\n\nfrequency_dict = word_count(my_string)\nprint(\"Frequency dictionary: \", frequency_dict)", "category": "Python"}, {"instruction": "Create a function to detect if two given strings are anagrams or not.", "input": "str1 = 'abc'\nstr2 = 'bac'", "output": "def is_anagram(str1, str2):\n    word1 = ''.join(sorted(str1))\n    word2 = ''.join(sorted(str2))\n    if word1 == word2:\n        return True\n    return False\n\nresult = is_anagram(str1, str2)\nprint(\"Is anagram:\", result)", "category": "Python"}, {"instruction": "Given a comma separated string, write a Python program to convert the string into a list.", "input": "my_string = \"Hello,World,Hi\"", "output": "my_list = my_string.split(',')\nprint(\"List:\", my_list)", "category": "Python"}, {"instruction": "Create a Python class to represent the 'Employee' entity.", "input": "", "output": "class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n    \n    def get_salary(self):\n        return self.salary", "category": "Python"}, {"instruction": "Generate a list of 10 random integers between 50 and 100.", "input": "", "output": "import random\nrand_num_list = [random.randint(50, 100) for i in range(10)]\nprint(rand_num_list)", "category": "Python"}, {"instruction": "Write a TensorFlow script to build a 3-layer neural network classifier.", "input": "", "output": "import tensorflow as tf\n \n#Create placeholders\nX = tf.placeholder(tf.float32, [None, 784])\ny = tf.placeholder(tf.float32, [None, 10])\n\n#Create first layer\nW1 = tf.Variable(tf.truncated_normal([784, 300], stddev=0.1))\nb1 = tf.Variable(tf.zeros([300]))\nA1 = tf.nn.relu(tf.add(tf.matmul(X, W1), b1))\n\n#Create second layer\nW2 = tf.Variable(tf.truncated_normal([300, 100], stddev=0.1))\nb2 = tf.Variable(tf.zeros([100]))\nA2 = tf.nn.relu(tf.add(tf.matmul(A1, W2), b2))\n\n#Create third layer\nW3 = tf.Variable(tf.truncated_normal([100, 10], stddev=0.1))\nb3 = tf.Variable(tf.zeros([10]))\nA3 = tf.nn.sigmoid(tf.add(tf.matmul(A2, W3), b3))\n\n#Define cross-entropy loss\nloss = tf.reduce_mean(-tf.reduce_sum(y*tf.log(A3), reduction_indices=[1]))\n\n#Define the accuracy\ncorrect_prediction = tf.equal(tf.argmax(A3,1), tf.argmax(y,1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\n#Train the model\ntrain_op = tf.train.AdamOptimizer(1e-4).minimize(loss)", "category": "Python"}, {"instruction": "Write a Python function to return an array of adjacent (horizontal and vertical) numbers of a given two-dimensional array.", "input": "[[1, 2, 3],\n[4, 5, 6],\n[7, 8, 9]]", "output": "def adjacent_numbers(array):\n    # Create a set of all possible adjacent numbers\n    # and add each array element to the set\n    adjacent_set = set()\n    for sublist in array:\n        for element in sublist:\n            adjacent_set.add(element)\n \n    # Iterate over each array element and its neighbours\n    for i in range(len(array)):\n        for j in range(len(array[0])):\n            # Check if the neighbour (left, right, top, bottom) exists\n            if i+1 < len(array):\n                adjacent_set.add(array[i+1][j])\n            if i-1 >= 0:\n                adjacent_set.add(array[i-1][j])\n            if j+1 < len(array[0]):\n                adjacent_set.add(array[i][j+1])\n            if j-1 >= 0:\n                adjacent_set.add(array[i][j-1])\n \n    # Remove the original elements from the set\n    for elem in array:\n        for a in elem:\n            adjacent_set.remove(a)\n \n    return list(adjacent_set)", "category": "Python"}, {"instruction": "Write a Python script to extract text from a given PDF page.", "input": "A PDF page with this content:\n\nThis is an example PDF page.\n\nIt contains text of varying lengths, from short one-word sentences to long multi-sentence paragraphs.", "output": "import PyPDF2\n \n#open the pdf\npdfFileObj = open('example.pdf', 'rb')\npdfReader = PyPDF2.PdfFileReader(pdfFileObj)\n \n#get the text from the specified page\npageObj = pdfReader.getPage(0)\n \n#print the text from the page\nprint(pageObj.extractText())", "category": "Python"}, {"instruction": "Write a Python function that validates a given credit card number.", "input": "", "output": "def validate(number):\n\"\"\" Validate credit card number using Luhn algorithm \"\"\"\n \n  num = [int(x) for x in str(number)]\n  return (sum(num[::-2] + [sum(divmod(d*2,10)) for d in num[-2::-2]]) % 10 == 0", "category": "Python"}, {"instruction": "Create an algorithm to detect if a given sentence contains any words that are offensive.", "input": "The following sentence contains a few offensive words: \"This stupid jerk is a complete moron!\"", "output": "def detect_offensive_words(sentence):\noffensive_words = [\"stupid\", \"jerk\", \"moron\"]\nwords = sentence.split(\" \")\n\nfor word in words:\n if word in offensive_words:\n return True\n \nreturn False", "category": "Python"}, {"instruction": "Create a variable in Python that stores the value \"Hello World!\"", "input": "", "output": "message = \"Hello World!\"", "category": "Python"}, {"instruction": "What is an abstract class?", "input": "", "output": "An abstract class is a special type of class which is only partially implemented. It contains one or more abstract methods which are methods that do not have any concrete implementation. Abstract classes cannot be instantiated and can only be used as base classes for other classes.", "category": "Python"}, {"instruction": "Create a function in Python that takes a string as an input and returns TRUE if it is a palindrome or FALSE if it is not.", "input": "", "output": "def is_palindrome(string): \n    left_pos = 0\n    right_pos = len(string) - 1\n    \n    while right_pos >= left_pos: \n        if not string[left_pos] == string[right_pos]: \n            return False\n        left_pos += 1\n        right_pos -= 1\n    return True", "category": "Python"}, {"instruction": "Create a Python script that asks the user to input an integer number and display the sum of all the preceding numbers.", "input": "", "output": "num = int(input(\"Please enter an integer number: \"))\n\nsum = 0\n\nfor i in range(1, num + 1):\n    sum += i\n    \nprint(\"The sum of all the preceding numbers is:\", sum)", "category": "Python"}, {"instruction": "Create a Python loop that prints numbers from 1 to 20", "input": "", "output": "for i in range(1, 21):\n    print(i)", "category": "Python"}, {"instruction": "Write a Python Evaluator to evaluate Python expression.", "input": "expression = \"5+3\"", "output": "def eval_expression(expression): \n return eval(expression) \n  \n# Call the function \nprint(eval_expression(expression))", "category": "Python"}, {"instruction": "Write a Python code to sort the given list of strings alphabetically.", "input": "lst = [\"Java\", \"C++\", \"Go\", \"Python\"]", "output": "def alphabetical_sort(lst):\n lst.sort()\n return lst\n\nprint(alphabetical_sort(lst))", "category": "Python"}, {"instruction": "Write a Python script to combine two given list of strings.", "input": "list1 = [\"Python\", \"Ruby\", \"JavaScript\"]\nlist2 = [\"C++\", \"C#\", \"GO\"]", "output": "def combine_lists(list1, list2):\n combined_list = list1 + list2\n return combined_list\n\nprint(combine_lists(list1, list2))", "category": "Python"}, {"instruction": "Write a Python program to filter out even numbers from a given list.", "input": "numbers = [2, 4, 6, 8, 10]", "output": "def filter_even_numbers(list):\n return [number for number in list if number % 2 == 1]\n\nprint(filter_even_numbers(numbers))", "category": "Python"}, {"instruction": "Write a Python program to retrieve a specific element from a given list.", "input": "list = [1, 4, 7, 9, 10]\nindex = 2", "output": "def get_element_by_index(list, index):\n return list[index]\n\nprint(get_element_by_index(list, index))", "category": "Python"}, {"instruction": "Write a Python program to swap the first and last element of a given list of integers.", "input": "numbers = [2, 3, 4, 5, 6]", "output": "def swap_first_last(list):\n list[0], list[-1] = list[-1], list[0]\n return list\n\nprint(swap_first_last(numbers))", "category": "Python"}, {"instruction": "Write a Python program to convert a given list of lists into a single list.", "input": "input_list = [[1, 2], [3, 4], [5, 6]]", "output": "def flatten_list(list):\n new_list = []\n for sublist in list:\n for item in sublist:\n new_list.append(item)\n return new_list\n\nprint(flatten_list(input_list))", "category": "Python"}, {"instruction": "Identify the issue in the following function and suggest a fix", "input": "def print_multiply(x, y):\n    for i in range(10):\n        print(x*i)", "output": "def print_multiply(x, y):\n    for i in range(10):\n        print(x*y)  # change i to y", "category": "Python"}, {"instruction": "Explain the purpose of try and except blocks when writing code.", "input": "", "output": "Try and except blocks are used in Python to catch and handle errors in code. The basic structure of a try-except block is a try statement followed by one or more except statements. The try block includes code that may throw an error and the except block includes code that will be executed if an error is thrown. This is useful for code that needs to handle any potential errors that may arise from its execution.", "category": "Python"}, {"instruction": "Develop a program to generate the Fibonacci sequence up to n.", "input": "", "output": "def fibonacci(n):\n    fib_sequence = [1, 1]\n\n    for i in range(2, n):\n        new_num = fib_sequence[i-2] + fib_sequence[i-1]\n        fib_sequence.append(new_num)\n\n    return fib_sequence\n\nfibonacci(10) # Output: [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]", "category": "Python"}, {"instruction": "Explain the concept of tokenization in relation to natural language processing.", "input": "", "output": "Tokenization is the process of breaking down a given sentence or text into smaller chunks known as tokens. This is an important step in natural language processing as it allows for further processing such as stemming, part of speech tagging, sentiment analysis, etc. For example, tokenization can break a sentence \"The young cat jumped onto the fence\" into [\"The\", \"young\", \"cat\", \"jumped\", \"onto\", \"the\", \"fence\"].", "category": "Python"}, {"instruction": "Write a Python script for checking if a given number is an even or odd number.", "input": "", "output": "\"\"\"\nCheck a given number is even or odd\n\"\"\"\ndef check_even_or_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\nif __name__ == '__main__':\n    num = int(input(\"Enter a number to check : \"))\n    print(\"The given number is\",check_even_or_odd(num))", "category": "Python"}, {"instruction": "Using the given function, find the transpose of the given matrix.", "input": "matrix = [[2, 3, 4], [1, 5, 3]]\n\ndef transpose(arr):", "output": "def transpose(arr): \n    transposed_matrix = [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))] \n    return transposed_matrix\n\ntranspose(matrix)", "category": "Python"}, {"instruction": "Create a function to add the corresponding values of two lists.", "input": "list1 = [3, 5, 2, 4]\nlist2 = [5, 4, 8, 7]", "output": "def add_values(list1, list2):\n    result_list = []\n    for i in range(len(list1)):\n        result_list.append(list1[i] + list2[i])\n    return result_list\n\nadd_values(list1, list2)", "category": "Python"}, {"instruction": "Find the minimum element of an array.", "input": "arr = [5, 2, 7, 4, 9, 1]", "output": "min_elem = arr[0]\nfor elem in arr[1:]:\n    if elem < min_elem:\n        min_elem = elem\nprint(min_elem)", "category": "Python"}, {"instruction": "Write an if statement to check whether an entered string is in lowercase", "input": "", "output": "if string == string.lower():\n    print(\"The string is in lower case\")\nelse:\n    print(\"The string is not in lower case\")", "category": "Python"}, {"instruction": "Find the bug in the following code.", "input": "def multiply(x, y):\n    z = 0\n    while y > 0:\n        y = y - 1\n        z = z + x\n    return z", "output": "The bug in the code is that the loop completion condition should be 'while y > 0' and should be changed to 'while y != 0' otherwise the code will enter into an infinite loop when y is negative.", "category": "Python"}, {"instruction": "Rewrite the following code in to a recursive function.", "input": "def calculate_fibonacci(n):\n    a, b = 0, 1\n    for i in range(1, n+1):\n        a, b = b, a + b\n    return a", "output": "def calculate_fibonacci(n):\n    if n < 0:\n        print(\"Incorrect input\")\n\n    elif n == 0:\n        return 0\n\n    elif n == 1:\n        return 1\n\n    else:\n        return calculate_fibonacci(n-1) + calculate_fibonacci(n-2)", "category": "Python"}, {"instruction": "Add error handling to the code snippet.", "input": "def calculate_average(numbers):\n    sum = 0\n    for number in numbers:\n        sum += number\n    return sum/len(numbers)", "output": "def calculate_average(numbers):\n    sum = 0\n    if len(numbers) == 0:\n        raise ValueError(\"list of numbers should not be empty\")\n    for number in numbers:\n        sum += number\n    try:\n        return sum/len(numbers)\n    except ZeroDivisionError:\n        print(\"division by 0 attempted\")", "category": "Python"}, {"instruction": "How do you import the math module in a Python program?", "input": "", "output": "import math", "category": "Python"}, {"instruction": "Write a function to rotate a matrix by 90 degrees.", "input": "", "output": "def rotate_matrix(matrix):\n    m = len(matrix)\n    # Create a new matrix\n    new_matrix = [[0 for _ in range(m)] for _ in range(m)]\n    # Rotate the matrix\n    for i in range(m):\n        for j in range(m): \n            new_matrix[j][m - i - 1] = matrix[i][j]\n    # Return the rotated matrix\n    return new_matrix", "category": "Python"}, {"instruction": "Suggest a way to find the maximum number in an array without using the built-in max() function.", "input": "", "output": "def find_max(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max", "category": "Python"}, {"instruction": "Suggest an algorithm to remove duplicates from an array.", "input": "", "output": "def remove_duplicates(arr):\n    # Create a seen set\n    seen = set()\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If element is already seen, remove it\n        if arr[i] in seen:\n            del arr[i]\n        # Else add element to seen set\n        else:\n            seen.add(arr[i])\n    return arr", "category": "Python"}, {"instruction": "Given an array and a target, write a program to search the target in the array and return the index.", "input": "arr = [5, 10, 20, 25, 30]\ntarget = 20", "output": "def search_target_in_array(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1  # element not found", "category": "Python"}, {"instruction": "Compute the total number of days in a given year.", "input": "", "output": "def get_total_days_in_year(year):\n    if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n        # leap year\n        return 366\n    else:\n        # non leap year\n        return 365", "category": "Python"}, {"instruction": "Explain the importance and use of an algorithm in computing.", "input": "", "output": "An algorithm is a step-by-step process that a computer can use to solve a problem or achieve a goal. Algorithms are essential to computing systems, as they provide methods for inputting, storing, interpreting, manipulating, and outputting data. Algorithms can process data with speed, accuracy, and reliability, and can be used for a variety of tasks including calculations, simulations, database manipulation, decision making, and artificial intelligence.", "category": "Python"}, {"instruction": "Define the difference between call by value and call by reference", "input": "", "output": "Call by value: In this method, a copy of the actual argument is passed to the formal argument. Any change made to the formal argument does not affect the actual argument. \n\nCall by reference: In this method, a reference to the actual argument is passed to the formal argument. Any change made to the formal argument changes the value of actual argument.", "category": "Python"}, {"instruction": "Create your own sorting algorithm", "input": "[3, 6, 4, 7, 1, 2]", "output": "def my_sort(arr):\n    length = len(arr) \n\tfor i in range(length): \n\t\tmin_ind = i \n\t\tfor j in range(i+1, length): \n\t\t\tif arr[ min_ind ] > arr[j]: \n\t\t\t\tmin_ind = j \n\t\tarr[i], arr[min_ind] = arr[min_ind], arr[i]\n\treturn arr", "category": "Python"}, {"instruction": "Write a code snippet for generating a random number between 1 and 100.", "input": "", "output": "import random\nrandomNumber = random.randint(1, 100)", "category": "Python"}, {"instruction": "Call a user-defined function in Python.", "input": "def add_two_numbers(x, y):\nreturn x + y", "output": "result = add_two_numbers(3, 5)\nprint(result)  # Outputs 8", "category": "Python"}, {"instruction": "Create an algorithm to reverse a linked list in place.", "input": "", "output": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None \n\ndef reverse_list(head):\n    prev = None\n    current = head\n    while current:\n        next = current.next\n        current.next = prev\n        prev = current\n        current = next\n    head = prev\n    return head", "category": "Python"}, {"instruction": "Create a python program that takes a sentence as input and returns the amount of vowels that occur in the sentence", "input": "", "output": "def count_vowels(sentence):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    count = 0\n    for char in sentence:\n        if char in vowels:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Write a method which takes 2 parameters and returns the greater one", "input": "", "output": "def max_num(x, y):\n    if x>y:\n        return x\n    else:\n        return y", "category": "Python"}, {"instruction": "Sort a given array in ascending order using the Gnome sort algorithm.", "input": "array = [8, 3, 6, 1, 5]", "output": "def gnome_sort(array):\n    i = 1\n    while i < len(array): \n        if array[i-1] <= array[i]: \n            i += 1\n        else: \n            array[i-1], array[i] = array[i], array[i-1] \n            i -= 1\n            if (i == 0): \n                i = 1\n    return array", "category": "Python"}, {"instruction": "Write a function to delete a given character from a string.", "input": "string = \"GPT MODEL\"\ncharacter = 'M'", "output": "def delete_char(string, character):\n    new_string = \"\"\n    for char in string:\n        if char != character:\n            new_string += char\n    return new_string", "category": "Python"}, {"instruction": "Create a function to sort a given array using selection sort.", "input": "arr = [5, 8, 1, 7, 2, 10, 3]", "output": "def selection_sort(arr): \n    for i in range(len(arr) - 1): \n        min = i \n        for j in range(i+1, len(arr)): \n            if arr[j] < arr[min]: \n                min = j \n        arr[i], arr[min] = arr[min], arr[i]\n    return arr", "category": "Python"}, {"instruction": "Analyze the sentiment of this statement using Python.", "input": "I am truly happy with the amazing results", "output": "import nltk\nnltk.download('vader_lexicon')\n\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentence = \"I am truly happy with the amazing results\"\nanalyzer = SentimentIntensityAnalyzer()\nsentiment = analyzer.polarity_scores(sentence)\n\nprint(\"The sentiment of the statement is:\", sentiment['compound'])", "category": "Python"}, {"instruction": "Manipulate the spreadsheet with Python to identify duplicates in column A.", "input": "", "output": "def find_duplicates(spreadsheet):\n    df = pd.read_excel(spreadsheet)\n    return df['A'][df['A'].duplicated(keep=False)]", "category": "Python"}, {"instruction": "Write code to print the prime numbers in a given range.", "input": "", "output": "def is_prime(n):\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\n\ndef print_primes(start, end):\n    for i in range(start, end + 1):\n        if is_prime(i):\n            print(i)", "category": "Python"}, {"instruction": "Write a script for reversing the order of alphabets in a string in Python.", "input": "", "output": "def reverseAlphabets(string): \n    string = ''.join(reversed(string)) \n    return string \n \nstring = \"string\"\nprint(reverseAlphabets(string)) # Output: gnirts", "category": "Python"}, {"instruction": "Suggest code for finding the maximum element in a Python dictionary.", "input": "", "output": "key_max = max(map_dictionary.keys(), key=(lambda k: map_dictionary[k])) \nval_max = map_dictionary[key_max]", "category": "Python"}, {"instruction": "Construct a network to recognize handwritten digits using a convolutional neural network in TensorFlow.", "input": "", "output": "import tensorflow as tf\nfrom tensorflow import keras \n\n# create a model\nmodel = keras.Sequential()\n\n# add a convolutional layer\nmodel.add(keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)))\n\n# add a max pooling layer\nmodel.add(keras.layers.MaxPool2D((2,2)))\n\n# add a flatten layer\nmodel.add(keras.layers.Flatten())\n\n# add a Dense layer\nmodel.add(keras.layers.Dense(128, activation='relu'))\n\n# add second Dense layer\nmodel.add(keras.layers.Dense(10, activation='softmax'))\n\n# compile the model\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])", "category": "Python"}, {"instruction": "Rewrite the following python program to convert UTC time to local time.", "input": "from datetime import datetime, timedelta\n\nutc_time = datetime.utcnow()", "output": "from datetime import datetime, timedelta \nimport time \n\nutc_time = datetime.utcnow()\nlocal_time = time.localtime(time.mktime(utc_time.timetuple())) \n\nprint(\"Local time: \", local_time)", "category": "Python"}, {"instruction": "Develop an algorithm to find the greatest common factor (GCF) of two numbers in Python.", "input": "", "output": "def gcf(a,b):\n    if a == 0 :\n        return b \n    return gcf(b % a, a)", "category": "Python"}, {"instruction": "Find the kth smallest element in an array. The array consists of integers only and the size of the array is given.", "input": "", "output": "def kthSmallest(arr, k): \n\t# Sort the given array \n\tarr.sort() \n\n\t# Return k'th element in  \n\t# the sorted array \n\treturn arr[k-1]", "category": "Python"}, {"instruction": "Take the following algorithm and turn it into a Python program.", "input": "", "output": "# Function to calculate \n# maximum number of edges \n# that can be added \n# to a graph without cycles \ndef max_edges(total_nodes): \n\t# initialize result to 0 \n\tresult = 0 \n\t\n\t# consider every pair of nodes \n\tfor i in range(total_nodes): \n\t\tfor j in range(i + 1, total_nodes): \n\t\t\tresult += 1  \n\t\t\n\t# return the result \n\treturn result", "category": "Python"}, {"instruction": "Generate a function to sort a 2-dimensional list in Python by the values of the second element in each sublist.", "input": "", "output": "def sort_by_second_element(lst): \n    lst.sort(key = lambda x: x[1]) \n    return lst", "category": "Python"}, {"instruction": "Develop a classifier in Python to predict the language of a given text.", "input": "", "output": "import nltk\n\nclass LanguageClassifier(object):\n\t\n    def __init__(self):\n        self.languages = []\n\t\n    def train(self, data):\n        train_sents = []\n        train_tags = []\n\n        # extract sentences and tags from data\n        for lang, sentences in data.items():\n            self.languages.append(lang)\n            train_sents.extend(sentences)\n            train_tags.extend([lang] * len(sentences))\n\n        # build featureset\n        feature_set = []\n        for (words, lang) in zip(train_sents, train_tags):\n            words_dict = dict([(word, True) for word in words])\n            feature_set.append((words_dict, lang))\n\t\n        # train classifier\n        self.classifier = nltk.NaiveBayesClassifier.train(feature_set)\n\n    def predict(self, sentence):\n        words_dict = dict([(word, True) for word in sentence])\n        return self.classifier.classify(words_dict)", "category": "Python"}, {"instruction": "Generate a list of prime numbers between two numbers A and B (both inclusive).", "input": "", "output": "def generate_primes(lower, upper): \n    prime_numbers = [] \n    for num in range(lower, upper + 1): \n        if num > 1: \n            for i in range(2, num): \n                if (num % i) == 0: \n                    break\n            else: \n                prime_numbers.append(num) \n    return prime_numbers", "category": "Python"}, {"instruction": "Create a while loop in Python to print all odd numbers between two numbers A and B (both inclusive).", "input": "", "output": "a = int(input(\"Enter lower range: \"))\nb = int(input(\"Enter upper range: \"))\n\nwhile a <= b: \n    if a % 2 != 0: \n        print(a) \n    a += 1", "category": "Python"}, {"instruction": "Generate a random 8 character password using the following conditions:", "input": "", "output": "import random\nimport string\n\ndef generatePassword():\n    chars = string.ascii_letters + string.digits + '!@#$%^&*/.:?|'\n    size = 8\n    random_string = \"\".join(random.choice(chars) for _ in range(size))\n    return random_string\n\nrandom_password = generatePassword()\nprint(random_password) # qr6.h^37", "category": "Python"}, {"instruction": "Create a Python script that takes a list of numbers as an argument and returns the maximum number in the list.", "input": "numbers = [8, 1, 2, 3, 4, 5, 6, 7]", "output": "def maximum_number(numbers):\n    max_number = numbers[0]\n\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_num:\n            max_number = numbers[i]\n    \n    return max_number\n\nmax_number = maximum_number(numbers)\nprint(max_number) # 8", "category": "Python"}, {"instruction": "Write a function that creates a random 4 digit pin using the following criteria:", "input": "", "output": "def generate_pin():\n    import random\n    numbers = [str(i) for i in range(10)]\n    random.shuffle(numbers)\n    return \"\".join(numbers[:4])", "category": "Python"}, {"instruction": "Using the MapReduce programming model, calculate the total number of purchases in a given dataset.", "input": "", "output": "def purchaseMapper(purchase):\n  return (purchase.entity_id, 1)\n\ndef purchaseReducer(entity, purchases):\n  return (entity, sum(purchases))", "category": "Python"}, {"instruction": "Create a code to check if a number is an Armstrong number or not", "input": "", "output": "def isArmstrongNumber(num):  \n    # initialize\n    sum_times_powers = 0\n    temp = num  \n  \n    while (temp != 0):  \n        # find remainder and get it\n        remainder = temp % 10 \n        sum_times_powers += remainder ** 3 \n        temp //= 10\n  \n    if (sum_times_powers == num):  \n        return True\n    else: \n        return False", "category": "Python"}, {"instruction": "Create a program to print the sum of all first 10 natural numbers.", "input": "", "output": "def sum_first_ten_natural_numbers():\n    sum = 0\n    for i in range(1, 11):\n        sum = sum + i\n    return sum\n\nprint(sum_first_ten_natural_numbers()) \n# Output: 55", "category": "Python"}, {"instruction": "Create a Python program to remove an item from a given list", "input": "", "output": "def remove_item_from_list(my_list, item):\n    if item in my_list:\n        my_list.remove(item)\n    return my_list", "category": "Python"}, {"instruction": "Create a code to print each word of a sentence on a new line", "input": "This is a sentence.", "output": "def print_sentence(s):\n    words = s.split(' ')\n    for word in words:\n        print(word)\n        \ns = \"This is a sentence.\"\nprint_sentence(s)\n\n# Output:\n# This\n# is\n# a\n# sentence.", "category": "Python"}, {"instruction": "Implement a python function to return \"true\" if the string is a palindrome and \"false\" if it is not", "input": "", "output": "def is_palindrome(s): \n    # Reversing string \n    rev = s[::-1] \n  \n    # Checking if reversed string is equal to  \n    # original string \n    if (s == rev): \n        return \"true\"\n    else: \n        return \"false\"", "category": "Python"}, {"instruction": "Develop a Python code to replace all occurrences of a specified phrase in a string.", "input": "string = \"This is a sample string. This has to be replaced.\"\nphrase = \"This\"\nnewString = \"That\"", "output": "string = string.replace(phrase, newString) \nprint(string) \n\n# Output: \nThat is a sample string. That has to be replaced.", "category": "Python"}, {"instruction": "Create a function to find the length of the longest substring that does not contain duplicate characters.", "input": "string = \"abcabcefghijklmnop\"", "output": "def longest_substring(string):\n    seen = set()\n    start = 0\n    max_length = 0\n    for end in range(len(string)):\n        if string[end] in seen:\n            start = max(start, seen[string[end]] + 1)\n        seen.add(string[end])\n        max_length = max(max_length, end-start+1)\n    return max_length", "category": "Python"}, {"instruction": "Generate a sorted list of numbers in an array using insertion sort?", "input": "arr = [5, 8, 1, 7, 2, 10, 3]", "output": "def insertion_sort(arr):\n    for i in range(len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and arr[j] > key:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = key\n    return arr", "category": "Python"}, {"instruction": "Design a program to compute the median of 3 integers.", "input": "", "output": "def median(a,b,c):\n    if a >= b:\n        if c >= a:\n            return a\n        elif b >= c:\n            return b\n        else:\n            return c\n    else:\n        if c >= b:\n            return b\n        elif a >= c:\n            return a\n        else:\n            return c", "category": "Python"}, {"instruction": "Create a program to calculate the standard deviation of an array of numbers.", "input": "arr = [10, 8, 12, 5, 9]", "output": "def stdev(arr):\n    n = len(arr)\n    mean = sum(arr) / n\n    variance = sum((x - mean) ** 2 for x in arr) / n\n    return (variance ** 0.5)", "category": "Python"}, {"instruction": "Generate a random set of 7 unique numbers between 0 and 10.", "input": "", "output": "import random\n\ndef generate_random_set():\n  generated_set = set()\n  while len(generated_set) < 7:\n    generated_set.add(random.randint(0, 10))\n  return generated_set", "category": "Python"}, {"instruction": "Write a Python function to calculate the least common multiple of two numbers.", "input": "", "output": "def lcm(a, b): \n    lcm = (a*b)//gcd(a,b) \n    return lcm\n\ndef gcd(a,b): \n    if a == 0 : \n        return b \n          \n    return gcd(b%a, a)", "category": "Python"}, {"instruction": "Implement a function that calculates the greatest common divisor of two integers.", "input": "n1 = 15\nn2 = 10", "output": "def cal_gcd(n1, n2): \n   if n2 == 0: \n       return n1 \n   else: \n       return cal_gcd(n2, n1 % n2) \n \ngcd = cal_gcd(n1, n2) \nprint (\"GCD of \" + str(n1) + \" and \" + str(n2) + \" is \" + str(gcd))", "category": "Python"}, {"instruction": "Given a list of student class enrollments, group students into classes that correspond with their major.", "input": "student_list = [{\"name\":\"John\", \"major\":\"Computer Science\"}, {\"name\":\"Alice\", \"major\":\"Business Administration\"},\n {\"name\":\"Bob\", \"major\":\"Computer Science\"}, {\"name\":\"Claire\", \"major\":\"Business Administration\"}]", "output": "def group_students_by_major(student_list):\n    # create a dictionary with two empty lists \n    student_groups = {\"Computer Science\": [], \"Business Administration\": []}\n    # iterate through the student list\n    for student in student_list:\n        # for each student in the list, add their name to the respective list\n        student_groups[student[\"major\"]].append(student[\"name\"])\n    # return the dictionary of groups\n    return student_groups", "category": "Python"}, {"instruction": "Implement a function that takes two strings and checks whether they are anagrams.", "input": "str1 = \"cinema\"\nstr2 = \"iceman\"", "output": "def anagram_checker(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    else:\n        char_list1 = [0] * 26\n        for char in str1:\n            char_list1[ord(char)-97] += 1\n        for char in str2:\n            if char_list1[ord(char)-97] == 0:\n                return False\n            char_list1[ord(char)-97] -= 1\n        return True", "category": "Python"}, {"instruction": "Write a code snippet using Python to pop an element from a list.", "input": "some_list = [1, 2, 3]", "output": "some_list.pop() # pops 3", "category": "Python"}, {"instruction": "Write a Python function that takes a list of floats as an argument and returns the sum of all elements.", "input": "some_list = [1.5, 5.9, 3.7, 5.2]", "output": "def sum_list(some_list):\n    result = 0\n    for num in some_list:\n        result += num\n    return result\n\nprint(sum_list(some_list)) # Prints 15.3", "category": "Python"}, {"instruction": "Create a Python dictionary with the following elements", "input": "Name: John\nAge: 25\nCity: New York", "output": "data = {\n    \"Name\": \"John\",\n    \"Age\": 25,\n    \"City\": \"New York\"\n}", "category": "Python"}, {"instruction": "Write a Python script to sort a given list of numbers in ascending order.", "input": "[3, 7, 1, 5, 4]", "output": "def sort_numbers_ascending(numbers): \n    # Sort the list \n    numbers.sort() \n    return numbers\n  \n# Driver code \nnums = [3, 7, 1, 5, 4] \n\nprint(sort_numbers_ascending(nums))", "category": "Python"}, {"instruction": "Convert the following statement into valid Python syntax.", "input": "x = \"string\"", "output": "x = 'string'", "category": "Python"}, {"instruction": "Write a Python program to print all integer numbers from a given range.", "input": "from 1 to 10", "output": "for i in range(1, 11):\n    print(i)", "category": "Python"}, {"instruction": "Describe the difference between a class and object in object oriented programming.", "input": "", "output": "A class is a blueprint for an object. It defines the data type of a particular object including the kinds of data it can store and the operations it can perform. An object is an instance of a class with actual values for the data elements it contains. It also has behavior, which is associated with the class functions that operates on the data elements of the object. Therefore, a class is a template used to create objects that share the same characteristics.", "category": "Python"}, {"instruction": "Implement a function that takes a number and returns its multiplication table up to 10.", "input": "n = 5", "output": "def print_multiplication_table(n):\n    # iterate through 0 to 10\n    for i in range(1, 11):\n        print(str(n) + 'x' + str(i) + ' = ' + str(n*i))\n\nprint_multiplication_table(n)", "category": "Python"}, {"instruction": "Write a function to count the occurence of an item in a given list.", "input": "[1, 2, 3, 2, 4]", "output": "def count_occurrence(arr, x): \n  \n    count = 0\n  \n    # traverse in the list \n    for ele in arr: \n  \n        # compare with each element of the list \n        if (ele == x): \n            count = count + 1\n  \n    return count \n  \n# Driver Code \narr = [1, 2, 3, 2, 4]  \nx = 2\nprint(\"Occurrence of the number is: \", count_occurrence(arr, x))", "category": "Python"}, {"instruction": "Create a variable in Python with the name \u201cstudentName\u201d and assign it your name as a string.", "input": "", "output": "studentName = \"John\"", "category": "Python"}, {"instruction": "What is Machine Learning?", "input": "", "output": "Machine Learning is a subset of Artificial Intelligence that enables computers to learn from patterns in data without explicitly being programmed. It enables them to improve over time by recognizing patterns and adjusting to new data. Machine Learning algorithms are used in a wide variety of applications, such as facial recognition, image recognition, natural language processing, predictive analytics, and robotics.", "category": "Python"}, {"instruction": "What is an API?", "input": "", "output": "API stands for Application Programming Interface. It is a set of routines, protocols, and tools for building software applications. APIs specify how software components should interact and are used when programming graphical user interface (GUI) components. APIs are used for accessing web-based services, such as entering and retrieving data from a remote database.", "category": "Python"}, {"instruction": "Write a Python script to generate a randomized list of 10 integers.", "input": "", "output": "import random\n\nrandom_numbers = random.sample(range(0, 101), 10)\nprint(random_numbers)", "category": "Python"}, {"instruction": "Sort a list of integers in ascending order using selection sort.", "input": "[ 9, 5, 2, 0, 7, 4, 1, 8, 6, 3]", "output": "def selection_sort(list): \n\n    for i in range(len(list)): \n  \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j\n        list[i], list[min_idx] = list[min_idx], list[i]\n\nlist = [9, 5, 2, 0, 7, 4, 1, 8, 6, 3]\nselection_sort(list) \nprint (\"Sorted array:\", list)", "category": "Python"}, {"instruction": "Describe in Python a custom exception for handling database connection errors.", "input": "", "output": "class DBConnectionError(Exception):\n  def __init__(self, message):\n    self.message = message\n    \n  def __str__(self):\n    return 'An Error Occured:\\n\\t' + self.message", "category": "Python"}, {"instruction": "Code a method in Python that determines the number of words in a given string.", "input": "", "output": "def word_count(s):\n  return len(s.split())", "category": "Python"}, {"instruction": "Reverse a string without using the reverse() function.", "input": "", "output": "def reverse_string(s): \n    str = \"\" \n    for i in s: \n        str = i + str\n    return str", "category": "Python"}, {"instruction": "Create a Python list of 10 numbers from 0 to 9.", "input": "", "output": "numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "category": "Python"}, {"instruction": "Design a class with 3 data members in Python.", "input": "", "output": "class MyClass: \n  def __init__(self, member1, member2, member3): \n    self.member1 = member1\n    self.member2 = member2\n    self.member3 = member3", "category": "Python"}, {"instruction": "Extract the type of the following object in Python.", "input": "a = [1, 2, 3]", "output": "list", "category": "Python"}, {"instruction": "Implement a function that finds the index of an item in a list.", "input": "lst = [1,2,3,4]\nitem = 3", "output": "def search(lst, item):\n    for index, element in enumerate(lst):\n        if element == item:\n            return index\n    return -1\n\nsearch(lst, item)", "category": "Python"}, {"instruction": "Implement a sorting algorithm for a given array in Python.", "input": "[3, 2, 1, 4]", "output": "sorted_array = [1, 2, 3, 4]\n\ndef SortArray(array):\n    for i in range(len(array)):\n        for j in range(len(array) - i - 1):\n            if array[j] > array[j + 1]:\n                array[j], array[j + 1] = array[j + 1], array[j]\n    return array\n\nsorted_array = SortArray(array)", "category": "Python"}, {"instruction": "Name the main features of a class-based programming language.", "input": "", "output": "The main features of a class-based programming language are encapsulation, inheritance, polymorphism and abstract classes. Encapsulation refers to the way code is organized and data is organized into objects and the methods used to access and manipulate the data. Inheritance is the ability for classes to inherit some of the properties of other classes. Polymorphism allows for objects of different types to act the same way in certain scenarios. Abstract classes provide an outline for other classes to follow, without having to directly use or implement all of the same functions as the parent class.", "category": "Python"}, {"instruction": "What are type hints in Python?", "input": "", "output": "Type hints in Python are optional pieces of information that can be specified when declaring a class, function or method, that allow Python to better understand the code and provide better type safety. Type hints allow the IDE or interpreter to provide better autocompletion and code checking features, as well as allow the compiler to optimize the code better.", "category": "Python"}, {"instruction": "Create a function to calculate the Fibonacci series from 0 to n.", "input": "", "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2, n+1): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Print a list of numbers from 1 to 10 except for 5 and 6.", "input": "", "output": "for num in range(1, 11):\n    if num != 5 and num != 6:\n        print(num)", "category": "Python"}, {"instruction": "Check if each item in the following list is a string.", "input": "[3, \"apple\", 5]", "output": "for item in [3, \"apple\", 5]:\n    if isinstance(item,str):\n        print(item, \"is a string\")\n    else:\n        print(item, \"is not a string\")", "category": "Python"}, {"instruction": "Write a function in Python to remove a given element from a list.", "input": "list = ['A', 'B', 'C', 'D']\nelement = 'B'", "output": "def remove_element(list, element): \n  if element in list: \n    list.remove(element)\n  return list\n\nprint(remove_element(list, element))", "category": "Python"}, {"instruction": "Sort a given list in increasing order.", "input": "my_list = [3, 4, 2, 6]", "output": "def sort_list(my_list):\n    \"\"\"Function to sort the list in increasing order\"\"\"\n    for i in range(len(my_list)):\n        min_idx = i\n        for j in range(i+1, len(my_list)):\n            if my_list[min_idx] > my_list[j]:\n                min_idx = j\n        my_list[i], my_list[min_idx] = my_list[min_idx], my_list[i]\n    return my_list\n    \nif __name__ == '__main__':\n    my_list = [3, 4, 2, 6]\n    sorted_list = sort_list(my_list)\n    print(sorted_list)  # [2, 3, 4, 6]", "category": "Python"}, {"instruction": "Write a code in which the values in the dictionaries will be swapped.", "input": "dic = {'x': 10, 'y': 20}", "output": "def swap_dictionary_values(dic):\n    \"\"\"Function to swap the values in the dictionaries\"\"\"\n    dic['x'], dic['y'] = dic['y'], dic['x']\n    return dic\n\nif __name__ == '__main__':\n    dic = {'x': 10, 'y': 20}\n    swapped_dic = swap_dictionary_values(dic)\n    print(swapped_dic) # {'x': 20, 'y': 10}", "category": "Python"}, {"instruction": "Create a function which will take two strings as parameters and will return a concatenated string.", "input": "", "output": "def concat_strings(str1, str2):\n    \"\"\"Function to concatenate two strings\"\"\"\n    return str1 + str2\n\nif __name__ == '__main__':\n    result = concat_strings('Hello ', 'World!')\n    print(result) #Hello World!", "category": "Python"}, {"instruction": "Write a function to find the length of the longest word in a sentence.", "input": "sentence = \"Today is a beautiful day\"", "output": "def find_longest_word(sentence):\n    words = sentence.split()\n    max_len = 0\n    longest_word = \"\"\n\n    for word in words:\n        if (len(word) > max_len):\n            max_len = len(word)\n            longest_word = word\n    \n    return max_len, longest_word\n\nif __name__ =='__main__':\n    sentence = \"Today is a beautiful day\"\n    max_len, longest_word = find_longest_word(sentence)\n    print(\"The longest word is '{}' with a length of {}\".format(longest_word, max_len))", "category": "Python"}, {"instruction": "Combine the two functions into a single function.", "input": "def add(x, y):\n    return x + y \n\ndef subtract(x, y):\n    return x - y", "output": "def calculate(x, y, op):\n    if op=='+':\n        return x + y \n    if op =='-':\n        return x - y", "category": "Python"}, {"instruction": "Create a program to print all prime numbers from 1 to a given number.", "input": "", "output": "def print_prime_numbers(n): \n    for num in range(2,n+1): \n        if is_prime(num): \n            print(num)", "category": "Python"}, {"instruction": "Generate a program in Python that takes two parameters and prints the result of their addition.", "input": "", "output": "def add_two_numbers(a, b):\n    return a + b", "category": "Python"}, {"instruction": "Create a program that reads a string input and replaces all instances of a word with a given replacement", "input": "Original string = \"Merry Christmas everyone, what a lovely day!\" Replacement word = \"Happy\"", "output": "def replace_word(originalString, replacementWord): \n    return originalString.replace('Christmas', replacementWord)\n# Output: \"Merry Happy everyone, what a lovely day!\"", "category": "Python"}, {"instruction": "Write a function to extract the digits of a number in an array.", "input": "Number = 4396", "output": "def extract_digits(number): \n   return [int(x) for x in str(number)] \n# Returns [4, 3, 9, 6]", "category": "Python"}, {"instruction": "Create a function to calculate the Pythagorean theorem given two legs", "input": "", "output": "def calculate_pythagorean_theorem(a, b):\n    c = math.sqrt(a**2 + b**2)\n    return c", "category": "Python"}, {"instruction": "Write a function to check if all the items in a list are of the same data type.", "input": "", "output": "def check_type(items):\n  # get the type of first item\n  item_type = type(items[0])\n  \n  # check if all items are of the same type\n  for item in items[1:]:\n    if item_type != type(item):\n      return False\n  return True\n\n# Test\nprint(check_type([1, 2, 3, 4])) # Output: True", "category": "Python"}, {"instruction": "Write a function that takes three parameters; a list of strings, an index of integers, and an alphabet string. The function should return only the items from the list at the specified indexes using letters from the alphabet as keys.", "input": "list_of_strings = [\"Foo\", \"Bar\", \"Baz\"]\nindexes = [0,2]\nalphabet_string = \"abc123\"", "output": "def select_list_items(list_of_strings, indexes, alphabet_string):\n    new_list = []\n    for index in indexes: \n        new_list.append(list_of_strings[alphabet_string.index(str(index))])\n    return new_list\n\nprint(select_list_items(list_of_strings, indexes, alphabet_string)) # Output: [\"Foo\", \"Baz\"]", "category": "Python"}, {"instruction": "Develop a code in Python to update all the elements of an array by a number", "input": "a = [1, 4, 5, 7, 9]", "output": "def update(a):\n    n = 2\n    a[:] = [x + n for x in a]\n    return a", "category": "Python"}, {"instruction": "Generate a Python dictionary containing the squares of the numbers from 1 to n.", "input": "int n = 10;", "output": "def generateDict(n):\n    dict = {}\n    for i in range(1, n+1):\n        dict[i] = i**2\n    return dict\n\nn = 10\nprint(generateDict(n))", "category": "Python"}, {"instruction": "Calculate the LCM (Least Common Multiple) of two integers.", "input": "int x = 15;\nint y = 10;", "output": "def lcm(x, y): \n    if x > y:\n        greater = x \n    else:\n        greater = y \n    while(True): \n        if((greater % x == 0) and (greater % y == 0)): \n            lcm = greater \n            break\n        greater += 1 \n    return lcm \n  \nx = 15\ny = 10\nprint(\"The L.C.M. is\", lcm(x, y))", "category": "Python"}, {"instruction": "Create a function to calculate the sum of all the values in the given array.", "input": "[2, 4, 6, 8]", "output": "def sum_of_array(arr):\n  total = 0\n  for num in arr:\n    total += num\n  return total\n\n# Output:", "category": "Python"}, {"instruction": "Generate a Python code to remove the given substring from the string.", "input": "String: \"The quick brown fox jumped over the lazy dog\"\nSubstring: \"brown\"", "output": "string = \"The quick brown fox jumped over the lazy dog\"\nsubstring = \"brown\"\nnew_string = string.replace(substring, \"\")\nprint(new_string)\n# Output: The quick  fox jumped over the lazy dog", "category": "Python"}, {"instruction": "Write a pseudo-code to implement a simple sorting algorithm.", "input": "", "output": "// Pseudo code for simple sorting\n\n// Define a sorting function \nfunction Sort(inputList):  \n \n// Loop through the list \n  for i from 0 to length(inputList) - 1 do:\n  \n    currentMinIndex = i \n   \n    // Search the lowest element \n    for j from i + 1 to length(inputList) do:\n      \n      // Update the smallest element \n      if inputList[j]<inputList[currentMinIndex] then \n        currentMinIndex = j\n    \n    // Swap the smallest element \n    if currentMinIndex != i do: \n      Swap(inputList[currentMinIndex],inputList[i]) \n \n// Return the sorted list \n  return inputList", "category": "Python"}, {"instruction": "Create a method in Python to round a number to 4 decimal points.", "input": "", "output": "def round_to_4_dp(num):\n    return round(num, 4)", "category": "Python"}, {"instruction": "Check if a string contains a substring, using Python.", "input": "haystack = \"The quick brown fox\"\nneedle = \"brown\"", "output": "needle in haystack # Output: True", "category": "Python"}, {"instruction": "Clean the input data using Python, so it is valid for a machine learning model.", "input": "data = [{'age': '30', 'income': '$1,000', 'address': 'New York'}, {'age': 'ab*', 'income': '$2,000', 'address': 'California'}]", "output": "data = [{'age': 30, 'income': 1000, 'address': 'New York'}, {'age': None, 'income': 2000, 'address': 'California'}]", "category": "Python"}, {"instruction": "Identify two coding languages used by Python developers.", "input": "", "output": "Two coding languages used by Python developers are Python and C++.", "category": "Python"}, {"instruction": "Write a Python program to add two matrices.", "input": "matrix1 = [[3, 5],\n           [6, 2]]\n\nmatrix2 = [[1, 2],\n           [3, 4]]", "output": "def add_matrices(mat1, mat2):\n    \"\"\"\n    This function takes two 2D matrices and adds them,\n    returning a new 2D matrix.\n    \"\"\"\n    output = []\n    \n    for i in range(len(mat1)):\n        row_m1 = mat1[i]\n        row_m2 = mat2[i]\n        row_sum = []\n        for j in range(len(row_m1)):\n            row_sum.append(row_m1[j] + row_m2[j])\n        output.append(row_sum)\n        \n    return output\n    \nresult = add_matrices(matrix1, matrix2)", "category": "Python"}, {"instruction": "Convert the following JSON string to a Python dictionary.", "input": "{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}", "output": "import json\n\njson_str = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\npy_dict = json.loads(json_str)\n\n# py_dict would be {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}", "category": "Python"}, {"instruction": "Define a function to collect unique values from a list of dictionaries based on the \"key\" field.", "input": "list = [{'name': 'Apple', 'price': 100}, {'name': 'Mango', 'price': 90}, {'name': 'Apple', 'price': 200}]", "output": "def collect_unique(dic_list, key):\n    unique_values = set()\n    for item in dic_list:\n        val = item.get(key)\n        if val is not None:\n            unique_values.add(val)\n    return list(unique_values)", "category": "Python"}, {"instruction": "What is the difference between sort() and sorted()?", "input": "", "output": "The sort() method sorts the elements of a given iterable in ascending order. It modifies the original list in place and does not return a value. The sorted() method on the other hand, returns an iterable sorted list without modifying the original sequence. It takes an optional 'key' argument to specify a function to be called on each list element prior to making comparisons.", "category": "Python"}, {"instruction": "Given a string, write a program to remove the leading and trailing white spaces from the string and output the modified string.", "input": "String: \"Hello world   \"", "output": "# Python program to remove leading and trailing white spaces from a string \n  \n# Function to remove leading and trailing white spaces \ndef removeWhitespaces(string): \n    # Remove leading and trailing whitespaces \n    newString = string.strip() \n  \n    # Returns the new string with leading and trailing \n    # whitespaces removed \n    return newString \n  \n# Driver program \ninputString = \"Hello world   \"\n  \n# Printing the modified string \nprint(removeWhitespaces(inputString))", "category": "Python"}, {"instruction": "Explain the purpose of the count() method.", "input": "", "output": "The count() method is used to count the number of times a particular item appears in a list. It takes the element as an argument and returns the count of the specified element in the list.", "category": "Python"}, {"instruction": "Describe how a bubble sort algorithm works.", "input": "", "output": "Bubble sort is a sorting algorithm in which adjacent elements in an array are compared and swapped if they are not in the correct order. The algorithm steps through the array multiple times, comparing adjacent elements and swapping them if the elements are not in the correct order. This process is repeated until all elements in the array are sorted.", "category": "Python"}, {"instruction": "Design a GUI in Python to accept user input and display a welcome message.", "input": "Message: Welcome to our website!", "output": "import tkinter as tk\n\nwindow = tk.Tk()\n\nlabel = tk.Label(text='Please enter your name:')\nlabel.pack()\n\nname = tk.Entry(window, width=25)\nname.pack()\n\ndef greet_user():\n\twelcome = \"Welcome to our website, \" + name.get()\n\t\n\tgreeting = tk.Label(text=welcome)\n\tgreeting.pack()\n\nbtn = tk.Button(window, text='Submit', command=greet_user)\nbtn.pack()\n\nwindow.mainloop()", "category": "Python"}, {"instruction": "Calculate the sum of the numbers given in the following list using Python.", "input": "my_list = [1, 2, 3, 4, 5]", "output": "my_list = [1, 2, 3, 4, 5]\n\n# Calculate the sum \nsum_nums = sum(my_list)\n\nprint(sum_nums) \n# Output: 15", "category": "Python"}, {"instruction": "Create a customer management system using Python and the Django web framework.", "input": "", "output": "Steps for creating a customer management system using Python and the Django web framework:\n1. Create a Django project\n2. Add customers app to the project \n3. Create a model for customers in the customers app\n4. Update the customers app's views function to include the logic for adding, deleting, and updating customers\n5. Add customers app the the project's urls.py file to map requests to the views functions\n6. Create and update templates in the customers app to provide the UI\n7. Run the Django project to launch the web application", "category": "Python"}, {"instruction": "Write a function in Python to assign the value 0 for special values, i.e. empty strings and NaN.", "input": "my_list = [5, 2, 3, None, '', 8]", "output": "def assign_values(list): \n    for i, val in enumerate(list): \n        if not val or val != val: \n            list[i] = 0\n            \n    return list\n\nmy_list = [5, 2, 3, None, '', 8] \nresult = assign_values(my_list) \nprint(result) \n# Output: [5, 2, 3, 0, 0, 8]", "category": "Python"}, {"instruction": "Explain how to create a custom exception in Python.", "input": "", "output": "To create a custom exception in Python, you will have to subclass Exception class and define your own exception class. For example: \n \nclass MyCustomException(Exception):\n  pass \n \nThen you can use the exception in a try-except block to handle expected errors:\n \ntry: \n  ...\nexcept MyCustomException: \n  ...", "category": "Python"}, {"instruction": "Create a Pandas DataFrame from a given dictionary of lists.", "input": "data = {'Year': [2020, 2021, 2022],\n 'Sales': [50000, 70000, 60000]}", "output": "import pandas as pd\n\ndf = pd.DataFrame(data)", "category": "Python"}, {"instruction": "Suggest a method to remove a given item from a given list.", "input": "", "output": "def remove_item(lst, item):\n if item in lst:\n    lst.remove(item)", "category": "Python"}, {"instruction": "Implement a method to check if a given string has all unique characters.", "input": "", "output": "def has_unique_chars(string): \n  chars = set() \n  for char in string: \n    if char in chars: \n      return False \n    else: \n      chars.add(char) \n  return True", "category": "Python"}, {"instruction": "Modify the following python code so that it accepts two numbers as input and returns the maximum of those numbers.", "input": "def get_max(num1):\n return num1", "output": "def get_max(num1, num2):\n return max(num1, num2)", "category": "Python"}, {"instruction": "Construct a python method to get the nth Fibonacci number.", "input": "", "output": "def get_nth_fibonacci(n):\n if n == 0 or n == 1:\n return n\n else:\n return get_nth_fibonacci(n-1) + get_nth_fibonacci(n-2)", "category": "Python"}, {"instruction": "Construct a python class to store a person's data like name, age, and hobbies.", "input": "", "output": "class Person:\n     def __init__(self, firstname, lastname, age, hobbies):\n           self.firstname = firstname\n           self.lastname = lastname\n           self.age = age\n           self.hobbies = hobbies", "category": "Python"}, {"instruction": "Write a function to flatten a given array of lists.", "input": "[[1,2], [3,4], [5,6]]", "output": "def flatten(arr):\n    output_list = []\n    for sublist in arr:\n        for item in sublist:\n            output_list.append(item)\n    return output_list", "category": "Python"}, {"instruction": "Implement a recursive binary search on a given sorted list.", "input": "[-4, -2, 0, 6, 7, 8]", "output": "def binary_search(arr, num, start, end): \n    if start >= end: \n        return None\n  \n    mid = start + (end - start)//2\n    if arr[mid] == num: \n        return mid \n  \n    if arr[mid] < num: \n        return binary_search(arr, num, mid+1, end) \n    else: \n        return binary_search(arr, num, start, mid-1)", "category": "Python"}, {"instruction": "Calculate the sum of all the prime numbers between a given range.", "input": "15 and 20", "output": "def sum_of_primes(start, end): \n    sum = 0\n    for i in range(start, end + 1):\n        if isPrime(i): \n            sum = sum + i \n    return sum\n    \ndef isPrime(num): \n    if num > 1: \n        for i in range(2, num): \n            if (num % i) == 0: \n                return False\n        return True\n    else: \n        return False", "category": "Python"}, {"instruction": "Write an expression to verify the validity of a given password in Python.", "input": "", "output": "import re \n  \ndef check(password): \n  \n    #Define pattern rules\n    pattern = r\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}\"\n      \n    if (re.search(pattern,password)): \n        return True\n    else: \n        return False \n  \n# Driver code     \npassword = \"Geronimo1\"\nif (check(password)): \n    print(\"Valid Password\") \nelse: \n    print(\"Invalid Password\")", "category": "Python"}, {"instruction": "Combine the two lists below using Python to produce a single list containing all elements from both.", "input": "list_one = [1, 2, 3]\nlist_two = [4, 5, 6]", "output": "list_one = [1, 2, 3]\nlist_two = [4, 5, 6]\ncombined_list = list_one + list_two\nprint(combined_list) # Output: [1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Provide an example of a recursive Python function to calculate the factorial of a number.", "input": "", "output": "def calculateFactorial(n):\n  if n == 0:\n    return 1\n\n  return n * calculateFactorial(n - 1)", "category": "Python"}, {"instruction": "What is the syntax for creating a class in Python?", "input": "", "output": "class MyClass:\n    <statement(s)>", "category": "Python"}, {"instruction": "Write a function that takes as input a string and returns a new string with all the vowels removed.", "input": "", "output": "def remove_vowels(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    new_string = \"\"\n    for letter in string:\n        if letter.lower() not in vowels:\n            new_string += letter\n    return new_string", "category": "Python"}, {"instruction": "Describe the function of the following code", "input": "while i < n:\n    print('Hello World!')", "output": "The code snippet is a basic example of a while loop in python. The code will loop through the code that is enclosed in the block and execute it for i (initialized to 0) values between 0 and n-1. In this case, the code will print \"Hello World!\" n times.", "category": "Python"}, {"instruction": "Code an algorithm to reverse an array of integers.", "input": "[1, 3, 4, 6, 8]", "output": "def reverse_array(arr):\n    left_index = 0\n    right_index = len(arr) - 1\n\n    while left_index < right_index:\n        arr[left_index], arr[right_index] = arr[right_index], arr[left_index]\n        left_index += 1\n        right_index -= 1\n    return arr\n\nif __name__ == \"__main__\":\n    print(reverse_array([1, 3, 4, 6, 8]))", "category": "Python"}, {"instruction": "Write a code to generate a list of all possible permutations of a given string.", "input": "\"ABC\"", "output": "def get_permutations(string):\n    if len(string) == 0:\n        return []\n    if len(string) == 1:\n        return [string]\n \n    permutations = []\n    for i, char in enumerate(string):\n        for permutation in get_permutations(string[:i] + string[i+1:]):\n            permutations.append(char + permutation)\n \n    return permutations\n\nif __name__ == \"__main__\":\n    print(get_permutations(\"ABC\"))", "category": "Python"}, {"instruction": "Write an algorithm that takes in an array and determines if it is a valid BST.", "input": "[9, 7, 3, 15, 20]", "output": "def is_valid_bst(arr):\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n\n    root_val = arr[0]\n    left_subtree = [i for i in arr if i < root_val]\n    right_subtree = [i for i in arr if i > root_val]\n\n    if sorted(left_subtree) == left_subtree and sorted(right_subtree, reverse=True) == right_subtree:\n        return (is_valid_bst(left_subtree) and is_valid_bst(right_subtree))\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    print(is_valid_bst([9, 7, 3, 15, 20]))", "category": "Python"}, {"instruction": "Compute the sum of all even numbers between 1 and 50.", "input": "", "output": "def sum_even(num):\n    total = 0 \n    for i in range(1, num+1):\n        if i % 2 == 0:\n            total += i\n    return total\n\nif __name__ == \"__main__\":\n    print(sum_even(50))", "category": "Python"}, {"instruction": "Write a function to filter a given list such that all any string starting with an 'S' is removed from the list.", "input": "['Swallow', 'Duck', 'Finch', 'Parrot']", "output": "def filter_list(lst):\n    return [elem for elem in lst if not elem.startswith('S')]\n\nif __name__ == \"__main__\":\n        print(filter_list(['Swallow', 'Duck', 'Finch', 'Parrot']))", "category": "Python"}, {"instruction": "Code a recursive solution for counting the number of characters in a given string.", "input": "example", "output": "def count_chars(string):\n    if len(string) == 0:\n        return 0\n    return 1 + count_chars(string[1:])", "category": "Python"}, {"instruction": "Develop a Python program to generate a list with numbers in range 3 to 12.", "input": "", "output": "# Generate a list with numbers in range 3 to 12 \nmy_list = list(range(3, 13)) \nprint(my_list) # [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "category": "Python"}, {"instruction": "Suggest a way to delete an item from a python list.", "input": "", "output": "You can use the built-in method \"remove\" to delete an item from a python list. \n\nFor example:\n\nmy_list = [1, 2, 3, 4, 5]\nmy_list.remove(4) # Remove item 4 from the list\n\nThe list will now be: [1, 2, 3, 5]", "category": "Python"}, {"instruction": "Develop a Python program to find the most frequent element in an array.", "input": "[3, 5, 1, 2, 4, 5, 5, 4, 2]", "output": "def most_frequent_element(arr):\n    count = 0\n    for i in arr:\n        current_count = arr.count(i)\n        if current_count > count:\n            count = current_count\n            most_frequent_element = i\n    return most_frequent_element\n\narr = [3, 5, 1, 2, 4, 5, 5, 4, 2]\nprint(most_frequent_element(arr)) # 5", "category": "Python"}, {"instruction": "Explain what the following function in Python does.", "input": "def print_max_element_idx(arr):\n    max_num = arr[0]\n    max_idx = 0\n    i = 1\n    while i < len(arr):\n        if arr[i] > max_num:\n            max_idx = i\n            max_num = arr[i]\n        i += 1\n    return max_idx", "output": "This function takes an array as input and then iterates through it. It keeps track of the maximum number and its index. At the end, it returns the index at which the maximum number is located.", "category": "Python"}, {"instruction": "What python library can be used for working with JSON data?", "input": "", "output": "The Python library 'json' can be used for working with JSON data.", "category": "Python"}, {"instruction": "Compress a string using Huffman coding in Python.", "input": "String: \"aaabbcc\"", "output": "def get_freq_list(s): \n      \n    # dictionaries are efficient for such a task \n    freq_list = {} \n  \n    for char in s: \n        if char in freq_list.keys(): \n            freq_list[char] += 1\n        else: \n            freq_list[char] = 1\n  \n    return freq_list \n  \ndef create_huffman_tree(freq_list): \n  \n    # create a priority queue \n    # to pop two minimum element each time \n    priority_queue = [] \n    for key in freq_list.keys(): \n        node = Node(key, freq_list[key]) \n        heapq.heappush(priority_queue, node) \n  \n    while len(priority_queue) > 1: \n        left_node = heapq.heappop(priority_queue) \n        right_node = heapq.heappop(priority_queue) \n  \n        new_node = Node(None, \n              left_node.freq + right_node.freq, \n              left_node, \n              right_node) \n        heapq.heappush(priority_queue, new_node) \n  \n    huffman_tree = heapq.heappop(priority_queue) \n    return huffman_tree \n    \ndef compress_string(huffman_tree, symbols): \n  \n    # create a character-code dict\n    code_dict = {} \n    _generate_codes(huffman_tree, '', code_dict) \n  \n    # encode the string \n    encoded_str = '' \n    for char in symbols: \n        encoded_str += code_dict[char] \n  \n    return encoded_str", "category": "Python"}, {"instruction": "Find and remove the bug from this Python code.", "input": "def function(a):\n    b = a / 0.5\n    c = a / 2.0\n    if b == c:\n        return \"equal\"\n    else:\n        return \"not equal\"", "output": "def function(a):\n    b = a * 2\n    c = a * 0.5\n    if b == c:\n        return \"equal\"\n    else:\n        return \"not equal\"", "category": "Python"}, {"instruction": "Compare two given JSON objects and create a merged object.", "input": "Object A: {\n\t\"name\": \"John\",\n\t\"age\": 35,\n\t\"interests\": [\"music\"]\n}\nObject B: {\n\t\"name\": \"John\",\n\t\"hobbies\": [\"cycling\"]\n}", "output": "def merge_json(json_a, json_b):\n # Create a new object\n merged = dict()\n # Iterate through the keys in both objects\n for key in json_a.keys() | json_b.keys():\n   # Merge the values of matching keys\n   if key in json_a and key in json_b:\n     if isinstance(json_a[key], list) and isinstance(json_b[key], list):\n       merged[key] = json_a[key] + json_b[key]\n     else:\n       merged[key] = [json_a[key], json_b[key]]\n   # Add keys that only exist in one object\n   elif key in json_a:\n     merged[key] = json_a[key]\n   elif key in json_b:\n     merged[key] = json_b[key]\n # Return the merged object\n return merged", "category": "Python"}, {"instruction": "Write pseudocode to sort a given list of integers using bubble sort.", "input": "", "output": "# Set a swap flag to true\nswap = true \n# While the flag is true\nwhile swap \n  # Set the swap flag to false\n  swap = false\n  # Iterate through the list\n  for i in range(len(list) - 1):\n    # Swap adjacent element if they are out of order\n    if list[i] > list[i + 1]:\n      temp = list[i]\n      list[i] = list[i + 1]\n      list[i + 1] = temp\n      # Set the flag back to true\n      swap = true", "category": "Python"}, {"instruction": "Write an algorithm in Python which reads a string and reorders it alphabetically.", "input": "string s = 'dcba'", "output": "def reorder_string(s):\n    s = sorted(s)\n    return ''.join(s)\n\nprint(reorder_string('dcba'))", "category": "Python"}, {"instruction": "Write a code to parse a JSON string into Python objects.", "input": "json_string = '{\"name\": \"John Doe\", \"age\": 42 }'", "output": "import json\n\njson_string = '{\"name\": \"John Doe\", \"age\": 42 }'\ndata = json.loads(json_string)\n\nprint(data['name']) # John Doe\nprint(data['age']) # 42", "category": "Python"}, {"instruction": "Write a function to compute a hash code for a string.", "input": "", "output": "def hash(string):\n    result = 0\n    for char in string:\n        result += ord(char)\n    return result", "category": "Python"}, {"instruction": "Write a Python function to find the most common element in a given list.", "input": "", "output": "def most_common(myList):\n  return max(set(myList), key=myList.count)", "category": "Python"}, {"instruction": "How can we generate a random number within a given range in Python?", "input": "", "output": "import random\n\nrandomNumber = random.randint(minNum, maxNum)", "category": "Python"}, {"instruction": "Write a function in Python to extract the first 5 characters of a string.", "input": "string = \"This is a sample string.\"", "output": "def get_first_five_characters(string):\n  return string[:5]\n\nprint(get_first_five_characters(string)) # Output: 'This '", "category": "Python"}, {"instruction": "Convert a string to lowercase, using Python.", "input": "my_string = \"Hello World\"", "output": "my_string.lower() # Output: \"hello world\"", "category": "Python"}, {"instruction": "Create a Python class that has an initialization method which takes in two parameters and sets them as class variables.", "input": "", "output": "class ExampleClass:\n    def __init__(self, param1, param2):\n        self.param1 = param1\n        self.param2 = param2", "category": "Python"}, {"instruction": "Create a Python function to check if a given array is sorted in ascending order.", "input": "arr = [1, 3, 5, 7, 6]", "output": "def is_sorted_ascending(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True", "category": "Python"}, {"instruction": "Given 2 string variables, write a function to find out if the 2 strings are anagrams.", "input": "str1 = 'schoolmaster', str2 = 'the classroom'", "output": "def are_anagrams(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    else:\n        counts = dict()\n        for char in str1:\n            counts[char] = counts.get(char, 0) + 1\n        for char in str2:\n            if char not in counts or counts[char] == 0:\n                return False\n            counts[char] -= 1\n    return True", "category": "Python"}, {"instruction": "Write a Python program to compute the gravitational force between two masses.", "input": "m1 = 5 kg, m2 = 10 kg", "output": "def calc_grav_force(m1, m2):\n    G = 6.67 * 10 ** -11 # gravitational constant\n    force = G * m1 * m2 / (4 * 3.14 ** 2)\n    return force", "category": "Python"}, {"instruction": "Create a search algorithm in Python to find an element in a sorted array in less than log(n) time.", "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8]", "output": "def binarySearch(arr, element):\n    start = 0;\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1 \n    return -1", "category": "Python"}, {"instruction": "Construct an algorithm in python to find the length of the longest common substring between two strings", "input": "str1 = \"'abbcdefg\"\nstr2 = \"zabxdefujh\"", "output": "def longest_common_substring(str1, str2):\n    len1 = len(str1)\n    len2 = len(str2)\n    result = 0\n    dp = [[0 for x in range(len2+1)] for x in range(len1+1)]\n    for i in range(len1+1):\n        for j in range(len2+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                result = max(result, dp[i][j])\n            else:\n                dp[i][j] = 0\n    return result", "category": "Python"}, {"instruction": "Change the following code so that it accepts a list as an argument and prints each element of the list.", "input": "def print_list(arr):\n\ti = 0\n\twhile (i < len(arr)):\n\t\tprint arr[i]\n\t\ti +=1", "output": "def print_list(arr):\n\tfor ele in arr:\n\t\tprint(ele)", "category": "Python"}, {"instruction": "Create a repeatable random number generator in Python", "input": "", "output": "import random\n\ndef repeatRandom(seed):\n  random.seed(seed)\n  return random.random()", "category": "Python"}, {"instruction": "Write an algorithm in python to find the second largest number of an unsorted list", "input": "arr = [1, 3, 4, 5, 9, 10, 11]", "output": "def find_sec_largest(arr):\n  max1 = max(arr[0], arr[1])\n  max2 = min(arr[0], arr[1])\n\n#Iterate over the array to find max2 and max1\nfor i in range(2, len(arr)):\n  if arr[i] > max1:\n    max2 = max1\n    max1 = arr[i]\n  elif arr[i] > max2 and arr[i]!=max1:\n    max2 = arr[i]\n  else:\n    continue\n\n# else return the second max\nreturn max2", "category": "Python"}, {"instruction": "Explain the concept of Base Class and Subclass", "input": "", "output": "A base class is a class that serves as a parent class for one or more subclasses. A subclass is a class that is derived from one or more base classes and inherits the properties and methods of its base classes. A subclass can also override and add its own properties and methods, while inheriting the properties and methods of its parent classes.", "category": "Python"}, {"instruction": "Create a program in python to find the longest common contiguous subarray between two integers.", "input": "int arr1[7] = {1,2,4,4,4,4,7}\nint arr2[5] = {1,4,4,5,5}", "output": "def long_com_subarr(arr1, arr2):\n    len1 = len(arr1)\n    len2 = len(arr2)\n    res = 0\n    count = 0 \n    \n    for i in range(len1):\n        for j in range(len2):\n            if arr1[i] == arr2[j]:\n                count += 1\n            else: \n                if result < count:\n                    res = count\n                count = 0\n    \n    return res", "category": "Python"}, {"instruction": "Convert the following pseudocode into Python code", "input": "for i = 0 to 9\n    print i", "output": "for i in range(10):\n    print(i)", "category": "Python"}, {"instruction": "You need to generate a list of all the even numbers between two given numbers.", "input": "", "output": "def even_numbers(start, end):\n even_nums = []\n for num in range(start, end):\n if num % 2 ==0:\n even_nums.append(num)\n return even_nums", "category": "Python"}, {"instruction": "Calculate the running average of a given array of data.", "input": "[1,6,3,5,2,7,8]", "output": "def calculate_running_average(arr):\n    running_sum = 0\n    for i in range(len(arr)):\n        running_sum += arr[i]\n        arr[i] = running_sum / (i+1)\n    return arr\n\narr = [1, 6, 3, 5, 2, 7, 8]\ncalculate_running_average(arr) # Returns [1.0, 3.5, 3.0, 3.75, 3.2, 4.16, 4.43]", "category": "Python"}, {"instruction": "Parse a JSON document and display its contents.", "input": "", "output": "import json\n\nwith open('filename.json', 'r') as json_file:\n    data = json.load(json_file)\n\nfor key, value in data.items():\n    print(key, ':', value)", "category": "Python"}, {"instruction": "Generate a random number from 1 to 1000.", "input": "", "output": "import random\n\nrandom_number = random.randint(1, 1000)", "category": "Python"}, {"instruction": "Implement a stack using a linked list.", "input": "", "output": "class Stack:\n\n    class Node:\n        def __init__(self, value):#, next=None):\n            self.value = value\n            self.next = None\n\n    def __init__(self):\n        self.head = None\n        self.count = 0\n\n    def isEmpty(self):\n        if self.count == 0:\n            return True\n        return False\n\n    def push(self, value):\n        node = self.Node(value)\n        node.next = self.head\n        self.head = node\n        self.count += 1\n\n    def pop(self):\n        if self.head == None:\n            return None\n        result = self.head.value\n        self.head = self.head.next\n        self.count -= 1\n        return result", "category": "Python"}, {"instruction": "Compute the distance between two points p1 and p2.", "input": "p1 = (3, 4), p2 = (6, 8).", "output": "import math\ndef distance(p1, p2):\n    xDiff = p2[0] - p1[0]\n    yDiff = p2[1] - p1[1]\n    return math.sqrt(xDiff**2 + yDiff**2)\n\ndistance((3,4), (6,8)) # Returns 5.0", "category": "Python"}, {"instruction": "Create a Python program that takes a given list of strings and prints out the string with the maximum length.", "input": "['code', 'programming', 'computer science', 'javascript', 'HTML']", "output": "max_len = 0\nmax_string = ''\nfor elem in ['code', 'programming', 'computer science', 'javascript', 'HTML']:\n    if len(elem) > max_len:\n        max_len = len(elem)\n        max_string = elem\n\nprint(max_string)", "category": "Python"}, {"instruction": "Modify the code to return the most repeated character.", "input": "def max_repeated_char(input_string):\n    char_count = dict()\n    max_count = 0\n    max_char = None\n    for char in input_string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n            \n    print(char_count)", "output": "def max_repeated_char(input_string):\n    char_count = dict()\n    max_count = 0\n    max_char = None\n    for char in input_string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n            \n    for char in char_count:\n        if char_count[char] > max_count:\n            max_count = char_count[char]\n            max_char = char\n    return max_char", "category": "Python"}, {"instruction": "Create a function to sum all the numbers in an array.", "input": "arr = [1, 2, 3, 4]", "output": "def sumList(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\nprint(sumList(arr))", "category": "Python"}, {"instruction": "Modify the following code so that the output is 4, 4.", "input": "import math \ndef f(x): \n    return math.sqrt(x) * math.sqrt(x+1)\n  \nprint(f(3))", "output": "import math \ndef f(x): \n    return math.pow(x, 2)\n  \nprint(f(4))", "category": "Python"}, {"instruction": "Create an algorithm to solve the Tower of Hanoi problem.", "input": "", "output": "def TowerOfHanoi(n , from_rod, to_rod, aux_rod): \n    if n == 1: \n        print (\"Move disk 1 from rod\",from_rod,\"to rod\",to_rod) \n        return\n    TowerOfHanoi(n-1, from_rod, aux_rod, to_rod) \n    print (\"Move disk\",n,\"from rod\",from_rod,\"to rod\",to_rod) \n    TowerOfHanoi(n-1, aux_rod, to_rod, from_rod)", "category": "Python"}, {"instruction": "Develop an algorithm for shuffling an array of numbers.", "input": "", "output": "def shuffleArray(arr):\n    for i in range(len(arr) - 1, 0, -1): \n        j = random.randint(0, i + 1)  \n        arr[i], arr[j] = arr[j], arr[i]\n    return arr", "category": "Python"}, {"instruction": "Write a code that finds all the prime numbers from 1 to n.", "input": "", "output": "def is_prime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_primes(n):\n    primes = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\nfind_primes(10) # Returns [2, 3, 5, 7]", "category": "Python"}, {"instruction": "You need to implement a class for a numerical calculator.", "input": "", "output": "class Calculator:\n def __init__(self):\n  self.result = 0\n\n def add(self, a, b):\n  self.result = a + b\n  return self.result\n\n def subtract(self, a, b):\n  self.result = a - b\n  return self.result\n\n def multiply(self, a, b):\n  self.result = a * b\n  return self.result\n\n def divide(self, a, b):\n  self.result = a / b\n  return self.result", "category": "Python"}, {"instruction": "Write a Python program to generate a list that contains only the non-unique elements from a given list.", "input": "[1,2,3,4,5,1,2,2,3,4]", "output": "def generate_non_unique_list(lst):\n new_list = []\n for i in lst:\n  if lst.count(i) > 1 and i not in new_list:\n   new_list.append(i)\n return new_list", "category": "Python"}, {"instruction": "Categorize a given list of integers into odd and even numbers.", "input": "[1,2,3,4,5,6,7,8,9]", "output": "def categorize_numbers(lst):\n odd = []\n even = []\n for num in lst:\n  if num % 2 == 0:\n   even.append(num)\n  else:\n   odd.append(num)\n return odd, even", "category": "Python"}, {"instruction": "Write a Python program to implement a text-based game", "input": "", "output": "import random\n\ndef intro():\n    print(\"Welcome to the game! You are stuck in a dungeon and must find a way out. Type 'help' for instructions.\")\n\ndef help_command():\n  print(\"Type 'north', 'south', 'west', or 'east' to move in that direction. Type 'check inventory' to view items in your inventory. Type 'quit' to quit.\")\n\ndef move(direction):\n  if direction == 'north':\n    print(\"You moved north.\")\n  elif direction == 'south':\n    print(\"You moved south.\")\n  elif direction == 'west':\n    print(\"You moved west.\")\n  elif direction == 'east':\n    print(\"You moved east.\")\n\ndef check_inventory():\n  print(\"You have nothing in your inventory.\")\n\ndef quit_game():\n  print(\"Thanks for playing!\")\n  return False\n\nintro()\nplaying = True\nwhile playing:\n  command = input(\"What would you like to do? > \").lower()\n  if command == 'help':\n    help_command()\n  elif command == 'north' or command == 'south' or command == 'west' or command == 'east':\n    move(command)\n  elif command == 'check inventory':\n    check_inventory()\n  elif command == 'quit':\n    playing = quit_game()", "category": "Python"}, {"instruction": "Create a neural network using TensorFlow.", "input": "", "output": "import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(units=128, activation='relu', input_shape=(10,)),\n    tf.keras.layers.Dense(units=128, activation='relu'),\n    tf.keras.layers.Dense(units=128, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])", "category": "Python"}, {"instruction": "Create a distributed system using Python", "input": "", "output": "import multiprocessing\n\ndef send_task(task):\n    # Send the task to a worker process \n    pass\n\ndef process(task):\n    # Process the task \n    pass\n\nif __name__ == '__main__': \n    processes = []\n    # Create two processes\n    process1 = multiprocessing.Process(target=send_task, args=(task,))\n    process2 = multiprocessing.Process(target=process, args=(task,))\n    processes.append(process1) # Put processes in a list \n    processes.append(process2)\n\n    # Run processes\n    for process in processes:\n        process.start()\n\n    # Exit the completed processes\n    for process in processes:\n        process.join()", "category": "Python"}, {"instruction": "Create a class named Dog in Python.", "input": "", "output": "class Dog:\n    def __init__(self):\n        pass\n    \n    def bark(self):\n        print(\"Bark!\")", "category": "Python"}, {"instruction": "Implement a quick-sort algorithm in Python to sort a given array in ascending order.", "input": "", "output": "def quick_sort(arr): \n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quick_sort(left) + middle + quick_sort(right)", "category": "Python"}, {"instruction": "Create a function that takes two parameters, an array and an object key, and returns an object containing all the elements in the array whose value is the same as the given object key.", "input": "array = [\"a\", \"b\", \"c\", \"a\", \"b\", \"d\"]\nkey = \"b\"", "output": "def group_by_key(array, key):\n    returned_object = {}\n    for item in array:\n        if item == key:\n            returned_object[item] = key\n    return returned_object\n\ngroup_by_key(array, key) # Returns {\"b\": \"b\"}", "category": "Python"}, {"instruction": "Find the maximum element in a Binary Search Tree.", "input": "", "output": "def findMax(root): \n    if root == None: # if tree is empty\n        return -1\n    while root.right: # Move right in  BST till the last node\n        root = root.right\n    return root.key", "category": "Python"}, {"instruction": "Create a function to retrieve the first value from a dictionary that starts with a given letter.", "input": "dictionary = { \"a\": 1, \"b\": 2, \"c\": 3 }\nstarting_letter = \u201cb\u201d", "output": "def get_first_value(dictionary, starting_letter):\n    for key, value in dictionary.items():\n        if key.startswith(starting_letter):\n            return value\n    return None # if no value found\n\nget_first_value(dictionary, starting_letter) # Returns 2", "category": "Python"}, {"instruction": "Parse and convert a string containing a valid JSON to a Python dictionary.", "input": "string = '{ \"a\": 1, \"b\": 2, \"c\": 3 }'", "output": "import json\n\ndef convert_json_string(string):\n    return json.loads(string)\n\nconvert_json_string(string) # Returns { \"a\": 1, \"b\": 2, \"c\": 3 }", "category": "Python"}, {"instruction": "Is a valid ISBN-10 number?", "input": "isbn = \"0478156686\"", "output": "import re \n\ndef is_valid_isbn(isbn):\n    pattern = r\"^\\d{9}[\\d|X]$\" # ISBN is a string with 10 digits\n    return True if re.match(pattern, isbn) else False\n\nis_valid_isbn(isbn) # Returns True", "category": "Python"}, {"instruction": "Given a list of numbers, return the first number that appears an odd number of times.", "input": "arr = [2,4,4,4,2,2,8,4]", "output": "def find_odd_occurrence_num(arr):\n    seen = {}\n    for item in arr:\n        if item not in seen:\n            seen[item] = 1\n        else:\n            seen[item] += 1\n    for item, count in seen.items():\n        if count % 2 != 0:\n            return item\n    return None\n\nfind_odd_occurrence_num(arr) # Returns 8", "category": "Python"}, {"instruction": "Find the duplicate in the array.", "input": "arr = [1,2,3,4,2]", "output": "def find_duplicate(arr):\n    seen = set()\n    for item in arr:\n        if item in seen:\n            return item\n        else:\n            seen.add(item)\n    return None # if no duplicate\n\nfind_duplicate(arr) # Returns 2", "category": "Python"}, {"instruction": "Create a function that takes a string and returns the first letter of each word in the string.", "input": "string = \"This is an example\"", "output": "def first_letters(string):\n    words = string.split()\n    first_letters = [word[0] for word in words]\n    return \"\".join(first_letters)\n\nfirst_letters(string) # Returns \"Tiiae\"", "category": "Python"}, {"instruction": "Write a function in Python to shuffle an array.", "input": "[1, 2, 3, 4, 5, 6]", "output": "import random\n\ndef shuffleArray(arr):\n    # Create a copy of the array\n    temp_arr = arr.copy()\n\n    # Iterate through the array and randomly\n    # swap elements\n    for i in range(len(temp_arr)):\n        j = random.randint(0, len(temp_arr)-1)\n        temp_arr[i], temp_arr[j] = temp_arr[j], temp_arr[i]\n\n    return temp_arr", "category": "Python"}, {"instruction": "Create an object-oriented design in Python to represent a customer.", "input": "", "output": "class Customer:\n    def __init__(self, name, address, email):\n        self.name = name\n        self.address = address\n        self.email = email\n\n    def get_name(self):\n        return self.name\n\n    def set_name(self, name):\n        self.name = name\n\n    def get_address(self):\n        return self.address\n\n    def set_address(self, address):\n        self.address = address\n\n    def get_email(self):\n        return self.email\n\n    def set_email(self, email):\n        self.email = email", "category": "Python"}, {"instruction": "Design an algorithm to check if a number is a palindrome.", "input": "7337", "output": "def is_palindrome(num):\n    num_str = str(num)\n    # compare the first and last characters\n    if num_str[0] != num_str[-1]:\n        return False\n    # go to the next pair of characters\n    if len(num_str) >= 3:\n        return is_palindrome(num_str[1:-1])\n    # all characters have been compared, number is a palindrome\n    return True", "category": "Python"}, {"instruction": "Use python to call a API to get the current temperature in New York City?", "input": "", "output": "import requests\n\n# API call to get current temperatures in New York City\nurl = 'http://api.openweathermap.org/data/2.5/weather?q=New York City,NY&units=imperial'\nresponse = requests.get(url)\ndata = response.json()\ncurrent_temperature = data['main']['temp']\nprint(current_temperature)", "category": "Python"}, {"instruction": "Create a dictionary with two key-value pairs in Python.", "input": "", "output": "my_dict = {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n}", "category": "Python"}, {"instruction": "Calculate the Fibonacci sequence till 10 using Python.", "input": "", "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\nfor i in range(1,11): \n    print(Fibonacci(i))", "category": "Python"}, {"instruction": "Create a virtual environment with Python version 2.7.", "input": "", "output": "pip install virtualenv\nvirtualenv -p python2.7 venv\nsource venv/bin/activate", "category": "Python"}, {"instruction": "Correct the following Python code so it prints out the current hour in 24-hour format.", "input": "import datetime\n\ncurrent_hour = datetime.now()\nprint(\"Current hour is\")\nprint(current_hour.hour)", "output": "import datetime\n\ncurrent_time = datetime.datetime.now()\nprint(\"Current hour is\")\nprint(current_time.strftime(\"%H\"))", "category": "Python"}, {"instruction": "Write a function to compute the product of all elements in a matrix.", "input": "[[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9],]", "output": "def product_matrix(matrix):\n product = 1\n for row in matrix:\n  for value in row:\n   product *= value\n return product", "category": "Python"}, {"instruction": "You need to compute the sum of all odd elements in a given matrix.", "input": "[[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9],]", "output": "def sum_odd_matrix(matrix):\n sum = 0\n for row in matrix:\n  for value in row:\n   if value % 2 != 0:\n    sum += value\n return sum", "category": "Python"}, {"instruction": "Using the array, sort it using insertion sort.", "input": "arr = [4, 2, 6, 7, 1]", "output": "def insertionSort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \narr = [4, 2, 6, 7, 1] \ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i])", "category": "Python"}, {"instruction": "Create a HTTP GET request using Python.", "input": "", "output": "import requests\n\nurl = 'https://www.example.com'\nresponse = requests.get(url)\n\nprint(response.text)", "category": "Python"}, {"instruction": "Write a Python script to print out a 5x5 multiplication table.", "input": "", "output": "for i in range(1, 6):\n    for j in range(1, 6):\n        print(i * j, end=\"\\t\")\n    print()", "category": "Python"}, {"instruction": "Create an algorithm to find all pairs of elements in a given array that sum up to a given target.", "input": "array = [1, 6, 4, 5, 3, 2]\ntarget = 5", "output": "def findSumPairs(arr, target): \n\n    # X stores elements and its \n    # frequencies in a dictionary \n    X = dict() \n    n = len(arr) \n    output = [] \n  \n    # Store counts of all elements \n    # of array in a hash \n    for i in range(0, n): \n        if arr[i] in X.keys(): \n            X[arr[i]] += 1\n        else: \n            X[arr[i]] = 1\n\n    # Loop over each element \n    for i in range(0, n): \n        # finding the compliment \n        k = target - arr[i] \n\n        # If compliment exists in X \n        # and it is not the same element \n        if (k in X.keys() and X[k] != 0\n            and k != arr[i]): \n            output.append([arr[i], k]) \n            X[k] = X[k] - 1\n  \n    # return content of output \n    return output \n\n# calling the findSumPairs function \nprint(findSumPairs(array, target)) \n\n# Output: [[1, 4], [2, 3]]", "category": "Python"}, {"instruction": "Create a program that can convert a given number (integer) to binary.", "input": "Convert 33 to binary numerals.", "output": "def convert_to_binary(n):\n    binary_num = ''\n    while n > 0:\n        binary_num = str(n%2) + binary_num\n        n = n//2\n    return binary_num\n    \nif __name__ == \"__main__\":\n    print(convert_to_binary(33))", "category": "Python"}, {"instruction": "Generate a character frequency histogram of a sentence.", "input": "Distribution of characters in \u201cThe quick brown fox jumps over the lazy dog.\u201d", "output": "def get_char_freq_histogram(string):\n    char_freq_dict = {}\n    for char in string:\n        if char in char_freq_dict:\n            char_freq_dict[char] += 1\n        else:\n            char_freq_dict[char] = 1\n    return char_freq_dict\n\nif __name__ == \"__main__\":\n    sentence = \"The quick brown fox jumps over the lazy dog.\"\n    char_freq_histogram = get_char_freq_histogram(sentence)\n    print(char_freq_histogram)", "category": "Python"}, {"instruction": "Design a function to sum up an array of numbers.", "input": "Sum up [2, 3, 5, 10, 16].", "output": "def calculate_sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\nif __name__ == \"__main__\":\n    arr = [2, 3, 5, 10, 16]\n    print(calculate_sum(arr))", "category": "Python"}, {"instruction": "Create a program that can output the current date and time in a user-friendly format.", "input": "", "output": "from datetime import datetime\n\ndef get_date_and_time():\n    current_date_and_time = datetime.now()\n    friendly_format = current_date_and_time.strftime('%c')\n    return friendly_format\n\nif __name__ == \"__main__\":\n    print(get_date_and_time())", "category": "Python"}, {"instruction": "Given a string, rearrange the characters in the string such that no two consecutive characters are the same.", "input": "my_str = \"ababab\"", "output": "def rearrange_string(my_str):\n    arr = list(my_str)\n    i, j = 0, 1\n    while i < len(arr):\n        if i+1 < len(arr) and arr[i] == arr[i+1]:\n            while j < len(arr):\n                if arr[j] != arr[i]:\n                    arr[i+1], arr[j] = arr[j], arr[i+1]\n                    break\n                j += 1\n        i += 1\n    return \"\".join(arr)", "category": "Python"}, {"instruction": "Rewrite the following code to use for-else statement.", "input": "arr = [1, 2, 3, 4]\n\ni = 0\nwhile True:\n    if i >= len(arr):\n        break\n    print(arr[i])\n    i += 1", "output": "arr = [1, 2, 3, 4]\n\nfor i in arr:\n    print(i)\nelse:\n    break", "category": "Python"}, {"instruction": "Describe what is recursion in programming and provide a simple example.", "input": "", "output": "Recursion is a programming concept in which a function calls itself until a certain condition is met. It can be used to solve problems that lend themselves to divide and conquer, such as computing the Nth element of a Fibonacci sequence. For example, the code to compute the 5th element of the Fibonacci sequence can be written using recursion in Python as follows:\n\ndef fibonacci(n): \n    if n <= 1: \n        return n \n    else: \n        return(fibonacci(n-1) + fibonacci(n-2)) \n  \nprint(fibonacci(5))  \n\nThe output of this code is 5.", "category": "Python"}, {"instruction": "For the following JSON object, write a function to get the average of all prices.", "input": "data = [\n  { \"name\": \"apple\", \"price\": 2},\n  { \"name\": \"banana\", \"price\": 4},\n  { \"name\": \"cucumber\", \"price\": 6},\n]", "output": "def avg_price(data):\n    sum = 0\n    for item in data: \n        sum += item[\"price\"] \n    return sum / len(data)", "category": "Python"}, {"instruction": "Write an algorithm to count the number of times the letter 'e' appears in a given string.", "input": "my_string = \"Hello World\"", "output": "def count_letter_e(my_string):\n    count = 0\n    for char in my_string:\n        if char == 'e':\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Given an array of strings and an integer n, implement a function to return the values with length greater than n as a new array.", "input": "data = [\"abc\", \"abcde\", \"abcdef\", \"abcdefgh\"]\nn = 3", "output": "def get_values_greater_than_n(data, n):\n  return [val for val in data if len(val) > n]", "category": "Python"}, {"instruction": "Using Python, write a function to multiply two matrices.", "input": "", "output": "def multiply_matrices(matrixA, matrixB): \n    \"\"\"\n    Matrix multiplication\n    :param matrixA: 2D array\n    :param matrixB: 2D array\n    :return: product of matrixA and matrixB\n    \"\"\"\n    \n    # Initialize matrix to store the result with size (m x n), where m and n are the rows and columns of matrixA and matrixB\n    result_matrix = [[0 for _ in range(len(matrixB[0]))] for _ in range(len(matrixA))]\n\n    for i in range(len(matrixA)): \n        for j in range(len(matrixB[0])): \n            for k in range(len(matrixB)): \n                result_matrix[i][j] += matrixA[i][k] * matrixB[k][j] \n  \n    return result_matrix", "category": "Python"}, {"instruction": "Analyze the following code and explain what is wrong with it.", "input": "function max_value(x, y){\nif (x > y){\nreturn x;\n}\nelse{\nreturn y;\n}\n}", "output": "The function will not work when x and y are equal as there is no else if statement to handle that condition. The code should be modified to either return x or y randomly or return a value that is not related to x or y like 'null' or '-1' when x and y are the same.", "category": "Python"}, {"instruction": "Generate an 8-digit alphanumeric string.", "input": "", "output": "import string\nimport random\n\nalphanumeric_string = ''.join(random.choices(string.ascii_letters + string.digits, k=8))\nprint(alphanumeric_string) # GH485TV6", "category": "Python"}, {"instruction": "Change the following directory path to absolute path.", "input": "path = \"../images/example.png\"", "output": "import os\n\npath = os.path.abspath(\"../images/example.png\")\nprint(path) # \\user\\path\\to\\images\\example.png", "category": "Python"}, {"instruction": "Design an algorithm to find the largest number in a given array.", "input": "arr = [2,4,6,9,3,7]", "output": "def max_in_array(arr):\n    max = 0\n    for i in range(len(arr)):\n        if arr[i] > max :\n            max = arr[i]\n    return max\n\nmaxValue = max_in_array(arr)\nprint(maxValue) # 9", "category": "Python"}, {"instruction": "Here is a list of strings and a specific string pattern. Write a code to return a list of all strings that match the pattern.", "input": "strings = [\"abc\",\"bcd\",\"cde\",\"def\",\"efg\"]\npattern = \"?ef\"", "output": "matched_strings = []\nfor string in strings:\n    if string[1:3] == pattern[1:3]:\n        matched_strings.append(string)\nprint(matched_strings) # [\"bcd\", \"def\"]", "category": "Python"}, {"instruction": "Rearrange the given string in alphabetical order.", "input": "string = 'zxcvbnmlkjhgfdsaqwertyuiop'", "output": "\"\"\"\nRearrange the given string in alphabetical order\n\"\"\"\n\ndef alphabetical_order(string):\n    result = ''.join(sorted(string))\n    return result\n\nstring = 'zxcvbnmlkjhgfdsaqwertyuiop'\nprint(alphabetical_order(string)) # print abcdefghijklmnopqrstuvwxyz", "category": "Python"}, {"instruction": "Given a string, remove all spaces from it.", "input": "string = 'This is a sample string'", "output": "\"\"\"\nGiven a string, remove all spaces from it\n\"\"\"\n\ndef remove_spaces(string):\n    result = ''\n    for c in string:\n        if c != ' ':\n            result += c\n    return result\n\nstring = 'This is a sample string'\nprint(remove_spaces(string)) # print Thisisasamplestring", "category": "Python"}, {"instruction": "Create a looping structure to display numbers from 1-10.", "input": "", "output": "\"\"\"\nCreate a looping structure to display numbers from 1-10\n\"\"\"\n\n# loop from 1 to 10\nfor num in range(1, 11):\n    print(num)", "category": "Python"}, {"instruction": "Using Python, classify the following sentence \"The cat is a mammal\" into either Animal or Plant.", "input": "", "output": "def classify_sentence(sentence):\n  if \"animal\" in sentence.lower():\n    return \"Animal\"\n  elif \"plant\" in sentence.lower():\n    return \"Plant\"\n\nsentence = \"The cat is a mammal\"\nprint(classify_sentence(sentence))", "category": "Python"}, {"instruction": "Given a string, edit it so that every first letter of each word is capitalized.", "input": "string = \"this is a test string\"", "output": "def capitalize_string(string):\n    words = string.split(' ')\n    capitalized_words = [word.capitalize() for word in words]\n    return ' '.join(capitalized_words)\n\nstring = \"this is a test string\" \ncapitalize_string(string)", "category": "Python"}, {"instruction": "Write a function to generate the Cartesian product of 2 sets in Python.", "input": "A = {1, 2}; B = {'a', 'b'}", "output": "from itertools import product\n \ndef get_cartesian_product(A, B):\n  return set(product(A, B))\n \nA = {1, 2}; B = {'a', 'b'}\nprint(get_cartesian_product(A,B))", "category": "Python"}, {"instruction": "Rewrite existing code to make it more efficient.", "input": "Improve the following code.\n```\nfor i in range(10):\n    print(i)\n```", "output": "def print_nums(n):\n    for i in range(n):\n        print(i)\n\nif __name__ == \"__main__\":\n    print_nums(10)", "category": "Python"}, {"instruction": "Write a Python class to represent a 2-dimensional point.", "input": "", "output": "class Point: \n    def __init__(self, x, y): \n        self.x = x \n        self.y = y \n        \n    def distance(self, other_point):\n        x1, y1 = self.x, self.y\n        x2, y2 = other_point.x, other_point.y\n        return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5", "category": "Python"}, {"instruction": "Output a string that is the reversed version of a given sentence.", "input": "Reverse \u201cWhere the wild things are\u201d", "output": "def reverse_string(sentence):\n    return ' '.join(sentence.split(' ')[::-1])\n\nif __name__ == \"__main__\":\n    sentence = \"Where the wild things are\"\n    print(reverse_string(sentence))", "category": "Python"}, {"instruction": "Create a program that can identify the next number in a sequence.", "input": "Find the next number in 3, 7, 11, 15.", "output": "def get_next_number(arr):\n    return arr[-1] + (arr[-1] - arr[-2])\n\nif __name__ == \"__main__\":\n    arr = [3, 7, 11, 15]\n    print(get_next_number(arr))", "category": "Python"}, {"instruction": "Create an algorithm that finds the greatest common divisor of two integers.", "input": "x = 20 \ny = 12", "output": "def find_gcd(x,y):\n   \n    # If x is greater than y\n    # Swapping the x and y\n    if x > y:\n        tmp = x\n        x = y\n        y = tmp\n\n    while y > 0:\n        tmp = y\n        y = x % y\n        x = tmp\n    return x\n\ngcd = find_gcd(20,12)\nprint(\"The greatest common divisor of 20 and 12 is: \", gcd)", "category": "Python"}, {"instruction": "Write a code snippet to implement a binary search algorithm.", "input": "", "output": "def binary_search(arr, target): \n\tstart = 0\n\tend = len(arr) - 1\n\n\twhile start <= end: \n\t\tmid = start + (end-start)//2\n\t\tif arr[mid] == target: \n\t\t\treturn mid \n\t\telif arr[mid] < target: \n\t\t\tstart = mid + 1\n\t\telse: \n\t\t\tend = mid - 1\n          \n\treturn -1", "category": "Python"}, {"instruction": "Explain what is a stack data structure in programming.", "input": "", "output": "A stack is a linear data structure that works on the principle of last-in, first-out (LIFO). It is a collection of objects or elements which can be added or removed from the top of the stack. It is commonly used as a way to store temporary data, and allows for fast retrieval of the data, as it is only necessary to access the item at the top of the stack. In computer science, the stack is used for a wide range of applications, including memory and runtime storage management, expression evaluation, and more.", "category": "Python"}, {"instruction": "Explain the concept of binary search in an array.", "input": "", "output": "Binary search is an algorithm used to find an element in a sorted array. It works by repeatedly dividing in half the array until the element being searched is found. Binary search starts by comparing the middle element of the array with the target value. If the target value matches the middle element, its position in the array is returned. If the target value is less than the middle element, the search continues in the lower half of the array. If the target value is greater than the middle element, the search continues in the upper half of the array. This process is repeated until the target element is found or until the entire array has been searched.", "category": "Python"}, {"instruction": "Write a Python script that prints the current date and time.", "input": "", "output": "from datetime import datetime\n\nnow = datetime.now()\nprint(now.strftime(\"%d-%m-%Y %H:%M:%S\"))", "category": "Python"}, {"instruction": "Explain the purpose of lambda functions in Python.", "input": "", "output": "Lambda functions are anonymous short functions that have no name. They are used when a user needs to define a function in just a single expression, usually a function that takes an argument and performs an action on it. Lambda functions can also be used in Python as an alternative to traditional functions when they\u2019re used within a code block, making the code more concise and easier to understand. Lambda functions can also be used to pass a function as an argument to another function. Finally, lambda functions can also be used to create smaller, simpler anonymous functions when the full power of Python\u2019s functions is not required.", "category": "Python"}, {"instruction": "Construct a Tensorflow model to classify the following inputs.", "input": "Images with labels \u201ccat\u201d and \u201cdog\u201d.", "output": "model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(224, 224, 3)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n\n    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])", "category": "Python"}, {"instruction": "What is the advantage of using dictionary comprehension in Python?", "input": "", "output": "The main advantage of using dictionary comprehension in Python is that it offers an efficient and concise way to create dictionaries. It can be used to create dictionaries from existing sequences or iterables, or to create new dictionaries from scratch. It also eliminates the need for writing multiple lines of code to create dictionaries.", "category": "Python"}, {"instruction": "Explain polymorphism in Python.", "input": "", "output": "Polymorphism in Python is the ability of an object to take on multiple forms. It is an object-oriented programming concept that allows for different implementations of a function or method to be used depending on the object type being used. In Python, this is done through sub-classing, the use of special methods such as the __init__ method, and by using type hints.", "category": "Python"}, {"instruction": "What is the difference between a list and a tuple in Python?", "input": "", "output": "The main difference between a list and a tuple in Python is that a list is mutable while a tuple is immutable. This means that a list can be changed or modified, while a tuple cannot. Tuples also have better performance than lists in terms of speed and memory usage. Tuples are also generally easier to read than lists, since they don't have commas separating their elements.", "category": "Python"}, {"instruction": "How do you convert a string to an integer in Python?", "input": "", "output": "In Python, strings can be converted to integers using the int() function. This function takes a string as its argument and returns an integer object. The int() function can also take optional parameters that allow for conversion from one base or radix, or from different types of numbers (e.g. octal, hexadecimal, binary).", "category": "Python"}, {"instruction": "Create a class in Python with two methods, one of which accepts an argument.", "input": "", "output": "class MyClass:\n    def __init__(self):\n        pass\n\n    def my_method(self, arg):\n        # method code\n        pass", "category": "Python"}, {"instruction": "Name the parameter of a Python function?", "input": "", "output": "The parameter of a Python function is the variable name listed after the function name in the function definition.", "category": "Python"}, {"instruction": "Implement a function to sort an array in ascending order.", "input": "Array: [7, 19, 5, 4, 16]", "output": "def sortArray(arr):\n    for i in range(len(arr)):\n        for j in range(1, len(arr)):\n            if arr[j] < arr[j-1]:\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n    return arr\n\nsortArray([7, 19, 5, 4, 16]) # [4, 5, 7, 16, 19]", "category": "Python"}, {"instruction": "Explain the concept of transfer learning.", "input": "", "output": "Transfer learning is a machine learning method where a model is trained on a task, then the learned knowledge is transferred to a new task. This process of knowledge transfer is enabled by the use of pre-trained models that have already been trained on large datasets, which can then be adapted to a given task using only a few additional training examples. This is especially useful for tasks that do not have enough labeled data available, as the pre-trained model can act as a regularizer and help the model learn better.", "category": "Python"}, {"instruction": "Describe how reinforcement learning works.", "input": "", "output": "Reinforcement learning is a type of machine learning algorithm that allows an agent to learn from its environment through trial and error. The agent takes an action within a given environment and receives a reward or punishment based on its performance. The agent uses this feedback to adjust its actions over time in order to maximize its future reward. Reinforcement learning works by interacting with the environment in a loop, taking actions, observing the results, updating the agent's estimates of its values and adjusting its behavior.", "category": "Python"}, {"instruction": "Implement a function to traverse a binary tree in pre-order.", "input": "", "output": "def traverse_preorder(root):\n    if (root == None):\n        return\n    else:\n        print(root.val)\n        traverse_preorder(root.left)\n        traverse_preorder(root.right)", "category": "Python"}, {"instruction": "Identify and explain the purpose of a Turing Test.", "input": "", "output": "A Turing Test is a measurement of a machine's ability to exhibit intelligent behaviour equivalent to, or indistinguishable from, that of a human. The test was proposed by Alan Turing in 1950 as a way of determining whether a machine is capable of intelligent thought. The Turing Test consists of a human evaluator interacting with both a human subject and a machine by asking questions and judging the responses. If the evaluator cannot determine the difference between the machine and the human subject, then the machine has passed the test. The purpose of the Turing Test is to provide a reliable method for determining if a machine is able to think and act intelligently.", "category": "Python"}, {"instruction": "Explain what an object-oriented programming language is.", "input": "", "output": "Object-oriented programming (OOP) is a programming language model in which programs are organized around objects rather than actions and data rather than logic. OOP languages allows the programmer to think in terms of classes and objects which makes it easier to maintain and modify existing code. In an OOP language, objects are collections of related variables and methods, and classes are templates of objects. Classes allow objects of the same type to be created with the same properties, while still allowing flexibility as new objects can be created with different properties.", "category": "Python"}, {"instruction": "Write a Python function to convert a dictionary into a list of tuples.", "input": "dictionary = {\n  \"name\": \"John\",\n  \"age\": 36\n}", "output": "def dict_to_tuple(dictionary): \n  return [(key, value) for key, value in dictionary.items()]", "category": "Python"}, {"instruction": "How can you generate a random array of 10 integers between 1 and 100?", "input": "", "output": "import random\n\ndef generate_random_array():\n    array = []\n    for i in range(10):\n        array.append(random.randint(1,100))\n    return array", "category": "Python"}, {"instruction": "How can you print a string character by character in Python?", "input": "", "output": "def char_by_char(string):\n    for char in string:\n        print(char)", "category": "Python"}, {"instruction": "Write code to implement a priority queue in Python.", "input": "", "output": "class PriorityQueue:\n    def __init__(self):\n        self.queue = []\n \n    # Create the enqueue(data) method to add data inside the queue\n    def enqueue(self, data):\n        self.queue.append(data)\n \n    # Create the dequeue() method to remove data from the queue\n    def dequeue(self):\n        if self.queue:\n            min_item = min(self.queue)\n            self.queue.remove(min_item)\n            return min_item\n        else:\n            return None", "category": "Python"}, {"instruction": "How can you sort a list of dictionaries by values of the dictionary in Python?", "input": "", "output": "def sort_dict_by_values(dict_list):\n    return sorted(dict_list, key=lambda k: k['value'])", "category": "Python"}, {"instruction": "Design a function which takes a parameter and returns the sum of its cube of its digits", "input": "", "output": "def sum_of_cube_of_digits(num):\n    sum = 0\n    while (num > 0):\n        digit = num % 10\n        sum += digit**3\n        num //= 10\n    return sum", "category": "Python"}, {"instruction": "Calculate the sum of all numbers in the given array that are multiples of the given number.", "input": "numbers=[2, 4, 6, 8, 10, 12]\nnum=3", "output": "def sum_multiples(lst, n):\n    return sum([i for i in lst if i % n == 0])", "category": "Python"}, {"instruction": "Given a list of numbers, write a program which partitions the list into two parts, such that the sum of the elements in the first part exceeds the sum of the elements in the second part.", "input": "", "output": "def partition(lst):\n    left_sum, right_sum = 0, sum(lst)\n    for i in range(len(lst)-1):\n        left_sum += lst[i]\n        right_sum -= lst[i]\n        if left_sum > right_sum:\n            return lst[:i+1], lst[i+1:]\n    return None", "category": "Python"}, {"instruction": "Count the number of characters in a sentence that begin with a consonant.", "input": "", "output": "def count_consonants(sentence):\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    count = 0\n    for ch in sentence:\n        if ch.lower() in consonants:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Return the index of the value if it is present in the list or -1 if it is not present.", "input": "", "output": "def search(lst, val):\n    for i in range(len(lst)):\n        if lst[i] == val:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Given an array of integers, create a program that finds the longest subarray with a sum of 0.", "input": "", "output": "def longest_sum_zero(arr):\n    left = 0\n    max_len = 0\n    sum = 0\n    hash_map = dict()\n    for right in range(len(arr)):\n        sum += arr[right]\n        if sum == 0:\n            max_len = max(max_len, right - left + 1)\n        if sum in hash_map:\n            left = max(left, hash_map[sum] + 1)\n            max_len = max(max_len, right - left + 1)\n        hash_map[sum] = right\n\n    return max_len", "category": "Python"}, {"instruction": "Write a function that takes two arguments, a number and a list, and returns the indices in the list that add up the number.", "input": "", "output": "def two_sum(num, lst):\n    indices = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == num:\n                indices.append([i,j])\n    return indices", "category": "Python"}, {"instruction": "Generate a random password with at least 8 characters that contain both upper and lowercase letters and numbers.", "input": "", "output": "import string\nimport random\n\ndef generate_password():\n    char_set = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    return ''.join(random.sample(char_set, 8))", "category": "Python"}, {"instruction": "Edit the following code to return the elements in the reversed order.", "input": "def reverse_list(lst):\n    for i in range(0, len(lst)):\n        temp = lst[i]\n        lst[i] = lst[len(lst)-1-i]\n        lst[len(lst)-1-i] = temp\n    return lst", "output": "def reverse_list(lst):\n    for i in range(0, len(lst)//2):\n        temp = lst[i]\n        lst[i] = lst[len(lst)-1-i]\n        lst[len(lst)-1-i] = temp\n    return lst", "category": "Python"}, {"instruction": "Write a function that determines if a given substring is present in a string or not.", "input": "", "output": "def is_substring_present(string, sub_string):\n for i in range(len(string)):\n if string[i : (i + len(sub_string))] == sub_string:\n return True\n return False", "category": "Python"}, {"instruction": "Write a Python class to implement a linked list.", "input": "", "output": "class Node:\n def __init__(self, data):\n self.data = data\n self.next = None\n\nclass LinkedList:\n def __init__(self):\n self.head = None\n \n def push(self, data):\n node = Node(data)\n node.next = self.head\n self.head = node\n \n def pop(self):\n data = self.head.data\n self.head = self.head.next\n return data", "category": "Python"}, {"instruction": "Write a function in Python that takes a list of strings and checks if they are all the same length.", "input": "[\"Hello\", \"World\"]", "output": "def is_all_same_length(list_str):\n  \"\"\"Check if all strings in a list are of same length.\"\"\"\n  return len(set(map(len, list_str))) == 1", "category": "Python"}, {"instruction": "Construct a loop to display each character in a string one at a time.", "input": "Hello World!", "output": "def display_char(s):\n    for char in s:\n        print(char)\n\ns = \"Hello World!\"\ndisplay_char(s)", "category": "Python"}, {"instruction": "Update the following function to only print the even numbers in a given list", "input": "def print_list(list):\n    for i in list:\n            print(i)", "output": "def print_list(list):\n    for i in list:\n        if i%2==0:\n            print(i)", "category": "Python"}, {"instruction": "What is the function of the \u2018enumerate\u2019 keyword in Python?", "input": "", "output": "The 'enumerate' keyword is used to iterate over an iterable and keep track of the index along the way. Its syntax is \"enumerate(iterable, start=0)\". Each iteration yields a tuple containing the index of the element and the element itself. This is most commonly used for loops that need to track the index of the elements in the iterable. For example, the loop below will print out all the elements and their respective indices in a list:\n\nmy_list = [\"A\",\"B\",\"C\"]\nfor index, element in enumerate(my_list):\n    print(index, element)\n\n# Output:\n# 0 A\n# 1 B\n# 2 C", "category": "Python"}, {"instruction": "Given a n x n matrix where each element is 0 or 1, how can you find the area of the largest square sub-matrix composed of only \u20181s\u2019?", "input": "", "output": "The simplest way to find the area of the largest square sub-matrix composed entirely of '1's is to use a dynamic programming approach. The algorithm works by iterating through all the elements in the matrix. At each cell, it checks if the current element is a '1' and if the other elements around it form a square sub-matrix of size at least one containing '1's, and if so it updates the answer accordingly. The code for finding the area of the largest square sub-matrix composed of only '1's may look like this:\n\n# n is the size of the matrix\ndef maximum_square_submatrix(matrix, n):\n    # answer stores the maximum size of the square\n    ans = 0\n\n    # dp array of size n+1 x n+1\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            # if the element is 1\n            if matrix[i-1][j-1] == 1:\n                # find the minimum of the elements on its left, top and diagonal\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n                # update the answer\n                ans = max(ans, dp[i][j])\n\n    # return the answer\n    return ans * ans", "category": "Python"}, {"instruction": "Update the code to ensure that an error is raised if the input is the wrong type.", "input": "def age_calc(age):\n return age + 5", "output": "def age_calc(age):\n if not isinstance(age, int):\n raise TypeError(\"Input for age calculation must be int\")\n return age + 5", "category": "Python"}, {"instruction": "Update the code so that it only prints out the lines which contain the word \u201cprint\u201d.", "input": "src_code = \"\"\"if x == 1:\n print \"hello\"\n if y == 2:\n print \"world\"\n print \"!\"", "output": "src_code = \"\"\"if x == 1:\n print \"hello\"\n if y == 2:\n print \"world\"\n print \"!\"\n\n# updated code\nlines = src_code.splitlines()\n\nfor line in lines:\n if \"print\" in line:\n print(line)", "category": "Python"}, {"instruction": "Write a Python function which takes a number as an argument and print \"even\" if the number is even and print \"odd\" if the number is odd.", "input": "", "output": "def print_even_odd(number):\n if number % 2 == 0:\n print(\"even\")\n else:\n print(\"odd\")", "category": "Python"}, {"instruction": "Break down the given code into its individual parts.", "input": "def square_sum(x, y):\n return x*x + y*y", "output": "def square_sum(x, y):\n return x * x + y * y\n\n# Break down code\n# part 1\ndef square_sum(x, y):\n# part 2\n return x * x + y * y\n# part 3\n# return calculated value", "category": "Python"}, {"instruction": "Update the code to handle cases when the two numbers in the array are the same.", "input": "def add_two_numbers(nums):\n return nums[0] + nums[1]", "output": "def add_two_numbers(nums):\n if nums[0] == nums[1]:\n return nums[0]\n else:\n return nums[0] + nums[1]", "category": "Python"}, {"instruction": "Convert a code written in Python 3 into code compatible with Python 2.", "input": "input = int(input('Enter your number: '))", "output": "import sys\nif sys.version_info.major == 3:\n input = int(input('Enter your number: '))\nelse:\n input = int(raw_input('Enter your number: '))", "category": "Python"}, {"instruction": "Suggest an algorithm to implement a stack with two queues.", "input": "", "output": "Algorithm for implementing a stack with two queues: \n1. Create two queues and enqueue the element to the first queue.\n2. Dequeue an element from the first queue, and enqueue it again to the second queue. \n3. Now, enqueue the next element from the first queue to the first queue.\n4. Repeat steps 2 and 3, until all the elements are dequeued from the first queue. \n5. Dequeue an element from the second queue, this will be the top of the stack.", "category": "Python"}, {"instruction": "Suggest a way to classify text documents into a certain number of topics.", "input": "", "output": "One way to classify text documents into a certain number of topics is to use latent Dirichlet allocation (LDA). LDA is a generative statistical model that allows for documents to be modeled as a mixture of topics. It fits well when documents are short and there is a large number of topics to be identified. The model takes as input a corpus of documents, builds a bag-of-words for each document, and then assigns a probability distribution to each document for the topics present. In this way, documents can be classified according to the respective topic with the highest probability.", "category": "Python"}, {"instruction": "Write a Python program to calculate the sum of all multiples of 3 and 5 between 1 and a given number.", "input": "", "output": "def sum_multiples_of_3_and_5(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 or i % 5 == 0: \n            sum += i\n    return sum", "category": "Python"}, {"instruction": "Generate a code to take in a list of sentences, totaling no more than 100 words and output the longest sentence.", "input": "['This sentence is the longest.', 'This sentence is the shortest.']", "output": "def get_longest_sentence(lst):\n    longest_sentence = ''\n    longest_len = 0\n    for s in lst:\n        s_len = len(s)\n        if s_len > longest_len:\n            longest_sentence = s\n            longest_len = s_len\n    return longest_sentence\n\nif __name__ == '__main__':\n    lst = ['This sentence is the longest.', 'This sentence is the shortest.']\n    longest_sentence = get_longest_sentence(lst)\n    print(longest_sentence)", "category": "Python"}, {"instruction": "Compute a factorial of a given integer.", "input": "5", "output": "\"\"\"\nCompute a factorial of a given integer\n\"\"\"\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nif __name__ == '__main__':\n    n = int(input())\n    print(factorial(n))", "category": "Python"}, {"instruction": "Create a Python script to scrape HTML data from a website.", "input": "", "output": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://www.example.com/\"\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\n# extract information from HTML\ndata = soup.find_all(\"div\", {\"class\": \"content\"})\n\n# save scraped data \nwith open('filename.txt', 'w') as file:\n    for content in data:\n        file.write(str(content))", "category": "Python"}, {"instruction": "Given two strings, write a program to find the number of common characters.", "input": "string_1 = \"computer\"\nstring_2 = \"science\"", "output": "def num_common_characters(str1, str2):\n    char_count = {}\n    for c in str1:\n        if c in str2:\n            if c not in char_count:\n                char_count[c] = 1\n            else:\n                char_count[c] += 1\n    return sum(char_count.values())", "category": "Python"}, {"instruction": "Generate a python statement to print out \"Hello World\".", "input": "", "output": "print(\"Hello World\")", "category": "Python"}, {"instruction": "Implement FTP server in Python", "input": "", "output": "import ftplib\n\ndef start_ftp_server(host, port, user, password):\n    server = ftplib.FTP()\n    server.connect(host, port)\n    server.login(user, password)\n    print('FTP Server started successfully')\n\nstart_ftp_server('localhost', 21, 'testuser', 'testpass')", "category": "Python"}, {"instruction": "Write a code to create a function to rotate a given linked list.", "input": "", "output": "\"\"\"\nCreate a function to rotate a given linked list\n\"\"\"\n\n# Create a class node\nclass Node: \n\t# Create a constructor to initialise the node object \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\n\nclass LinkedList: \n\t# Create a constructor to initialise the linked list \n\tdef __init__(self): \n\t\tself.head = None\n\t\n\t# Create a function to rotate the linked list \n\tdef rotate(self, index):\n\t\tif (index == 0): \n\t\t\treturn\n\t\tprev = None            \n\t\tcurr = self.head\n\t\twhile (index > 0):\n\t\t\tprev = curr\n\t\t\tcurr = curr.next\n\t\t\tindex -= 1\n\t\t\n\t\tprev.next = None\n\t\tself.head = curr\n\t\twhile (curr.next != None):\n\t\t\tcurr = curr.next\n\t\tcurr.next = self.head", "category": "Python"}, {"instruction": "Given a 2 dimensional array, create a code to transpose the array.", "input": "", "output": "def transpose_matrix(matrix): \n\trow = len(matrix) \n\tcol = len(matrix[0]) \n\ttranspose = [[0 for j in range(row)] for i in range(col)] \n  \n\tfor i in range(row): \n\t\tfor j in range(col): \n\t\t\ttranspose[j][i] = matrix[i][j] \n  \n\treturn transpose \n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(transpose_matrix(matrix))", "category": "Python"}, {"instruction": "Write a code to create a dictionary containing the frequency of each word in a given string.", "input": "S = \"hello world\"", "output": "def word_frequency(S): \n  frequency = dict() \n  words = S.split() \n  \n  for word in words: \n    if word in frequency: \n        frequency[word] += 1\n    else: \n        frequency[word] = 1\n  \n  return frequency\n\nprint(word_frequency(S))", "category": "Python"}, {"instruction": "Develop a code to delete a given element from a list.", "input": "[3, 6, 8, 14], element: 14", "output": "def delete_element(given_list, element):\n    for i in range(len(given_list)):\n        if given_list[i] == element:\n            del given_list[i]\n            break\n    return given_list", "category": "Python"}, {"instruction": "Develop a code to sort a list in ascending or descending order.", "input": "givenList: [5, -3, 2, 4, 0], sortOrder: \"ascending\"", "output": "def sort_list(givenList, sortOrder): \n    for i in range(len(givenList)): \n        for j in range(i + 1, len(givenList)):\n            if sortOrder == \"ascending\":    \n                if givenList[i] > givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i] \n            elif sortOrder == \"descending\":    \n                if givenList[i] < givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i]\n    return givenList", "category": "Python"}, {"instruction": "Design a code to search a given element x in a vector.", "input": "vector: [3, 17, 5, 11], x: 5", "output": "def search_x(x, vector):\n    for i in range(len(vector)):\n        if vector[i] == x:\n            return i \n    return -1", "category": "Python"}, {"instruction": "Create a function that returns the maximum element of a given list.", "input": "Given List: [3, 12, 2, 6, -9]", "output": "def max_val(list):\n    max_val = list[0]\n    for i in range(len(list)):\n        if list[i] > max_val:\n            max_val = list[i]\n    return max_val", "category": "Python"}, {"instruction": "Identify the type of input that is required for this Python function.", "input": "def get_sum(a, b):\n    # return the sum of two numbers", "output": "The type of input required for this Python function is two numerical values (for example, integers or floats).", "category": "Python"}, {"instruction": "Implement a Wiki page title search using Python.", "input": "Search string: \"Machine Learning\"", "output": "\"\"\"\nImplement a Wiki page title search using Python\n\"\"\"\n\nimport wikipedia\n\ndef search_wiki_title(search_string):\n    try:\n        wikipedia.set_lang(\"en\")\n        result = wikipedia.search(search_string)[0]\n    except (wikipedia.exceptions.PageError, wikipedia.exceptions.DisambiguationError):\n        result = None\n    return result\n\nif __name__ == '__main__':\n    search_string = input('Search string: ')\n    result = search_wiki_title(search_string)\n    print(result)", "category": "Python"}, {"instruction": "Write a function to find the average of given numbers using a list.", "input": "nums = [2, 4, 6, 8]", "output": "\"\"\"\nWrite a function to find the average of given numbers using a list\n\"\"\"\n\ndef find_average(nums):\n    return sum(nums) / len(nums)\n    \nif __name__ == '__main__':\n    nums = [2, 4, 6, 8]\n    print(find_average(nums))", "category": "Python"}, {"instruction": "Generate a Fibonacci sequence with a given length.", "input": "length = 10", "output": "def generate_fibonacci_sequence(length):\n sequence = []\n current_val, next_val = 0,1\n for i in range(length):\n   sequence.append(current_val)\n   current_val, next_val = next_val, current_val + next_val\n return sequence\n\nprint(generate_fibonacci_sequence(length))\n#Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "category": "Python"}, {"instruction": "Implement a factorial function in Python.", "input": "", "output": "def factorial(n):\n if n == 0:\n return 1\n else:\n return n * factorial(n-1)", "category": "Python"}, {"instruction": "Create a Python class to work with complex numbers.", "input": "", "output": "class ComplexNumber:\n    \"\"\"This class is used to work with complex numbers.\"\"\"\n    def __init__(self, real, imag): \n        self.real = real \n        self.imag = imag \n      \n    def __add__(self, other):\n        \"\"\"This method overloads the '+' operator to add complex numbers.\"\"\"\n        return ComplexNumber(self.real + other.real, self.imag + other.imag) \n      \n    def __sub__(self, other):\n        \"\"\"This method overloads the '-' operator to subtract complex numbers.\"\"\"\n        return ComplexNumber(self.real - other.real, self.imag - other.imag) \n  \n    def __mul__(self, other): \n        \"\"\"This method overloads the '*' operator to multiply complex numbers.\"\"\"\n        return ComplexNumber(self.real*other.real - self.imag*other.imag, self.real*other.imag + self.imag*other.real) \n  \n    def __str__(self): \n        \"\"\"This method overrides the __str__ method to print complex numbers in a readable format.\"\"\"\n        return self.real + self.imag + \"i\"\n\nif __name__ == '__main__':\n    c1 = ComplexNumber(1, 2) \n    c2 = ComplexNumber(2, 3) \n  \n    print(\"Addition of c1 and c2 =\", c1 + c2) \n    print(\"Subtration of c1 and c2 =\", c1 - c2) \n    print(\"Multiplication of c1 and c2 =\", c1 * c2)", "category": "Python"}, {"instruction": "Write a code to filter out all even numbers from an array which contains both even and odd numbers.", "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "def filter_even_numbers(arr):\n    \"\"\"This function takes an array and filters out all even numbers.\"\"\"\n    result = []\n    for num in arr:\n        if num % 2 != 0:\n            result.append(num)\n    return result\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    result = filter_even_numbers(arr)\n    print(result)", "category": "Python"}, {"instruction": "Create a function that allows users to sign up for your feature using their username and password.", "input": "", "output": "def sign_up(username, password):\n    \"\"\"This function will allow users to sign up for the feature using their username and password.\"\"\"\n    # Implement sign up feature\n    # ...\n\nif __name__ == '__main__':\n    username = \"JohnDoe\"\n    password = \"Passw0rd\"\n    sign_up(username, password)\n    print(\"Sign up successful!\")", "category": "Python"}, {"instruction": "Generate a function to identify prime numbers between 0 and n.", "input": "", "output": "def is_prime(n):\n    \"\"\"This function will check if a number is a prime number or not.\"\"\"\n    # Corner case \n    if n <= 1: \n        return False\n\n    # Check from 2 to n-1 \n    for i in range(2,n): \n        if n % i == 0: \n            return False\n    return True\n\nif __name__ == '__main__':\n    for n in range(2, 100):\n        if is_prime(n):\n            print(n)", "category": "Python"}, {"instruction": "Given a list of grocery items, write a code to generate 1 list containing only the fruits in the list.", "input": "items =[\"apple\",\"banana\",\"grapes\",\"rice\",\"onion\"]", "output": "def filter_fruits(items):\n    \"\"\"This function takes a list of grocery items and generates a list containing only the fruits.\"\"\"\n    fruits = []\n    for item in items:\n        if item in [\"apple\", \"banana\", \"grapes\"]:\n            fruits.append(item)\n    return fruits\n\nif __name__ == '__main__':\n    items =[\"apple\",\"banana\",\"grapes\",\"rice\",\"onion\"]\n    fruits = filter_fruits(items)\n    print(fruits)", "category": "Python"}, {"instruction": "Use PyTorch to write a function that predicts a class label based on five numerical features.", "input": "X = [[0.1, 0.2, 0.3, 0.4, 0.5],[0.2, 0.3, 0.4, 0.5, 0.6]]", "output": "\"\"\"\nA PyTorch function that predicts a class label based on five numerical features.\n\"\"\"\n\nimport torch\nimport torch.nn as nn\n\n\n# Define the model\nclass Model(nn.Module):\n    def __init__(self):\n        super(Model, self).__init__()\n        self.fc1 = nn.Linear(5, 8)\n        self.fc2 = nn.Linear(8, 4)\n        self.fc3 = nn.Linear(4, 2)\n\n    def forward(self, x):\n        x = torch.relu(self.fc1(x))\n        x = torch.relu(self.fc2(x))\n        x = self.fc3(x)\n        return x\n\n# Instantiate the model\nmodel = Model()\n\n# Input\nX = torch.tensor([[0.1, 0.2, 0.3, 0.4, 0.5],[0.2, 0.3, 0.4, 0.5, 0.6]])\n\n# Get the prediction\nprediction = model(X)", "category": "Python"}, {"instruction": "Generate a List Comprehension that returns a list containing the first 5 prime numbers", "input": "", "output": "[x for x in range(2, 11) if all(x % y != 0 for y in range(2,x))][:5]", "category": "Python"}, {"instruction": "Reverse the given list using python.", "input": "list_to_reverse = [2, 3, 5, 6, 8, 10, 11]", "output": "def reverse_list(input_list):\n    \"\"\"Return a reversed copy of the list\"\"\"\n    return input_list[::-1]", "category": "Python"}, {"instruction": "Generate a random unique ID and store it in a variable.", "input": "", "output": "import uuid\n\nrandom_id = uuid.uuid4()", "category": "Python"}, {"instruction": "Parse the following JSON data and extract the \"name\" field.", "input": "{\n  \"id\": 12345,\n  \"name\": \"John Smith\",\n  \"age\": 30\n}", "output": "import json\n\ndata = '{ \"id\": 12345, \"name\": \"John Smith\", \"age\": 30 }'\n\njson_data = json.loads(data)\n\nname = json_data[\"name\"]\n\nprint(name)\n\n# Output: John Smith", "category": "Python"}, {"instruction": "Create a function to find out if a number is even", "input": "", "output": "def isEven(n): \n    if (n % 2 == 0): \n        return True\n    else: \n        return False", "category": "Python"}, {"instruction": "Preprocess a natural language text for text classification.", "input": "Text: \u201cThe food I ate yesterday was really amazing. I loved the entire experience.\u201d", "output": "text = \"The food I ate yesterday was really amazing. I loved the entire experience.\"\n \n# lowercase \ntext = text.lower() \n\n# remove punctuation \ntext = re.sub(r'[^\\w\\s]','',text) \n\n# remove digits \ntext = re.sub(r'\\d+','',text) \n\n# Tokenization \ntokens = word_tokenize(text) \n\n# Stopword removal \nfiltered_words = [word for word in tokens if word not in stopwords.words('english')] \n\n# Lemmatization\nlemmatizer = WordNetLemmatizer() \nlemmatized_word = [lemmatizer.lemmatize(word) for word in filtered_words] \n\nprint(lemmatized_word)", "category": "Python"}, {"instruction": "Alter the code to include a break statement in the loop.", "input": "for i in range(0, 10):\n    print(\"The number is \" + str(i))", "output": "for i in range(0, 10):\n    print(\"The number is \" + str(i))\n    if i == 5:\n        break", "category": "Python"}, {"instruction": "Develop a class in Python to print the name and age of the user.", "input": "Name:\"John\", Age:\"25\"", "output": "class Hello: \n    def __init__(self,name,age): \n        self.name = name\n        self.age = age\n    \n    def printNameAge(self): \n        print(\"Name:\", self.name, \"Age:\", self.age)\n  \nobj1 = Hello(\"John\", 25) \nobj1.printNameAge()", "category": "Python"}, {"instruction": "If a pandas dataframe has five columns and four rows, what is the shape of the dataframe?", "input": "", "output": "The shape of the pandas dataframe would be (4, 5).", "category": "Python"}, {"instruction": "How does a try-except block work in Python?", "input": "", "output": "A try-except block in Python allows a code block to be tested for errors. The code that could potentially cause an exception is placed in the try clause and the code that handles the exception is put in the except clause. If an error is encountered in the try clause, the program execution is transferred to the except clause for further handling. The except clause can also be used to handle multiple exceptions in the same block of code.", "category": "Python"}, {"instruction": "Explain what the yield keyword does in Python.", "input": "", "output": "The yield keyword in Python is used to create an iterator. When a function containing yield is called, it does not execute the code as a normal function would, instead it returns a generator object which is an iterator. Each time next() is called on the iterator, the yield statement is executed and returns a value. The execution of the function can be stopped at any point using the yield statement and the function can save the state of its variables when a yield statement is encountered, allowing it to be resumed after all the values have been generated.", "category": "Python"}, {"instruction": "What is a for loop?", "input": "", "output": "A for loop is a programming structure used to repeat a specific set of instructions for a given number of times or until a specified condition is met. The syntax of a for loop is \"for <variable> in <sequence>:\" and the format is \"for <variable> in range(<start_value>, <end_value>):\" where the start and end value are optional. The code within the loop will be executed until the given condition is met, or the loop is terminated with a break command.", "category": "Python"}, {"instruction": "Develop a for loop to write a program to print the first 5 prime numbers", "input": "", "output": "count = 0 # to count the number of prime numbers\n\nfor num in range(1,100):  \n\n   # all prime numbers are greater than 1\n   if num > 1:\n       for i in range(2,num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)\n           count += 1\n       if count == 5:\n           break", "category": "Python"}, {"instruction": "Create a function to do a binary search on a sorted list of integers.", "input": "nums = [2, 4, 5, 7, 8, 9, 10, 14]", "output": "def binary_search(nums, target):\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1 # target is not found", "category": "Python"}, {"instruction": "Write a code to wrap a text in a box, with the given length and padding parameters.", "input": "text = \"Hello World!\", length = 20, padding = 5", "output": "def wrap_in_box(text, length, padding): \n    border = \"\"\n    for i in range(length): \n        border += \"-\"\n    space = \"\"\n    for i in range(padding):\n        space += \" \"\n    text = space + text + space \n    if len(text) > length:\n        text = text[:length-1]\n    text = text.center(length)\n    print(border)\n    print(text)\n    print(border)", "category": "Python"}, {"instruction": "Explain the concept behind the Python decorator.", "input": "", "output": "Python decorator is a function which takes another function as argument and extends the behavior of that function without modifying its code. It allows developers to modify the behavior of a function, class or method at runtime without changing the code itself. Decorators are heavily used in frameworks like Flask and Django which are based on the MVC pattern. Decorators allow developers to easily modify and extend the code without having to rewrite it.", "category": "Python"}, {"instruction": "Write a script in Python for generating a histogram for a given set of data.", "input": "[3, 5, 8, 1, 9, 12]", "output": "import matplotlib.pyplot as plt\n\ndata = [3, 5, 8, 1, 9, 12]\nplt.hist(data, color='blue', ec='black')\n\nplt.title(\"Histogram\")\nplt.xlabel(\"Values\")\nplt.ylabel(\"Frequency\")\n\nplt.show()", "category": "Python"}, {"instruction": "Suggest a code snippet in Python to delete the dictionary entry with a key called \"name\".", "input": "sample_dic = {'id': 123, 'name': 'John Doe'}", "output": "del sample_dic['name']", "category": "Python"}, {"instruction": "Generate a code to convert a given number to its English word equivalent.", "input": "", "output": "# dictionary to convert numbers to words\nnumber_words = {0 : 'zero', 1: 'one', 2 : 'two',\n                3 : 'three', 4 : 'four', 5 : 'five', \n                6 : 'six', 7 : 'seven', 8 : 'eight', \n                9 : 'nine', 10 : 'ten'}\n\n# convert number to string\ndef convert_to_words(n):\n    if n in number_words:\n        return number_words[n]\n    return \"\"\n\n# Driver code\nprint(convert_to_words(5))\n# Output: five", "category": "Python"}, {"instruction": "Edit the given code to print out the largest even number in the given list.", "input": "lst = [1, 8, 9, 10, 6]", "output": "lst = [1, 8, 9, 10, 6]\n\neven_nums = []\n\nfor num in lst:\n    if num % 2 == 0:\n        even_nums.append(num)\n\nif even_nums:\n    print(max(even_nums))\nelse:\n    print(\"No even numbers in the list.\")\n# Output: 10", "category": "Python"}, {"instruction": "Create a program to guess a secret number between 1 and 100.", "input": "", "output": "# secret number\nsecret_number = 42\n\n# user guess\nguess = 0\n\n# guessing loop\nwhile guess != secret_number:\n    \n    # ask user to enter a guess\n    guess = int(input(\"Guess a number between 1 and 100: \"))\n\n    # provide hints\n    if guess < secret_number:\n        print(\"Too low. Try something higher.\")\n    elif guess > secret_number:\n        print(\"Too high. Try something lower.\")\n    else:\n        print(\"You guessed it! The secret number was {}\".format(secret_number))", "category": "Python"}, {"instruction": "Write a script in Python for drawing a rectangle on the screen.", "input": "", "output": "import pygame \n  \n# Initialize the game engine \npygame.init() \n  \n# Define the colors \nBLACK = (0, 0, 0) \nWHITE = (255, 255, 255) \n  \n# Set the window size \nsize = (400, 500) \nscreen = pygame.display.set_mode(size) \n  \n# Iterate over the list of rectangles \nrects = [pygame.Rect(75, 150, 150, 50), \n         pygame.Rect(200, 150, 150, 50)] \n  \n# Iterate over the list of rectangles \nfor rect in rects: \n    pygame.draw.rect(screen, WHITE, rect) \n  \n# Update the display \npygame.display.flip()", "category": "Python"}, {"instruction": "Implement a function to print each element of a given array in reverse.", "input": "array = [2, 4, 6, 8]", "output": "def print_reversed_array(array):\n  for i in range(len(array)-1, -1, -1):\n    print(array[i])", "category": "Python"}, {"instruction": "You need to write a for loop in Python that takes two arguments, N and K and prints out the numbers from 0 to N which are divisible by K.", "input": "N: 15\nK: 4", "output": "for i in range(0, N+1):\n    if i % K == 0:\n        print(i)", "category": "Python"}, {"instruction": "Write a few lines of code in Python that prints out name followed by age.", "input": "name: John\nage: 25", "output": "name = \"John\"\nage = 25\nprint(name + \" \" + str(age))", "category": "Python"}, {"instruction": "Create a Python function which accepts two numbers then return an array with the Fibonacci sequence starting by the two numbers.", "input": "start_1: 1\nstart_2: 2", "output": "def fib_array(start_1, start_2):\n    arr = [start_1, start_2]\n    while True:\n        next_num = arr[-1] + arr[-2]\n        if next_num > 100:\n            break\n        arr.append(next_num)\n    return arr", "category": "Python"}, {"instruction": "Write a Python program to print out the longest word entered by the user.", "input": "string = \"Happiness is the best thing\"", "output": "def find_longest_word(string): \n    # split the string \n    word_list = string.split() \n  \n    # sort the list \n    word_list.sort(key = len) \n  \n    # return the last word \n    # which will be the longest \n    return word_list[-1]\n  \n# driver code \nstring = \"Happiness is the best thing\"\n \nprint(find_longest_word(string)) # Output: Happiness", "category": "Python"}, {"instruction": "Identify the correct syntax for creating a class with name 'Car' in Python.", "input": "", "output": "class Car:\n  pass", "category": "Python"}, {"instruction": "Find the most frequent integer in the list: [3, 5, 2, 3, 1, 5, 3, 3, 2].", "input": "", "output": "my_list = [3, 5, 2, 3, 1, 5, 3, 3, 2]\nmax_freq = 0\nmax_num = 0\n# Use a dictionary to store the frequence of each number\ndict = { i : my_list.count(i) for i in my_list }\nfor num, freq in dict.items():\n    if freq > max_freq:\n        max_freq = freq\n        max_num = num\nprint(max_num) # Output: 3", "category": "Python"}, {"instruction": "Write a Python function that takes in an argument 'arr' which is an array of integers and prints the arithmetic mean of the array.", "input": "arr = [2, 8, 10, 22, 4]", "output": "def mean(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    mean = sum/len(arr)\n    print(mean)\nmean(arr) # Output: 10.0", "category": "Python"}, {"instruction": "Create a class in Python that will allow us to initialize and store a given list of numbers.", "input": "", "output": "class NumbersList:\n    def __init__(self, numbers_list):\n        self.numbers_list = numbers_list\n    \n    def get_list(self):\n        return self.numbers_list\n    \n    def set_list(self, numbers_list):\n        self.numbers_list = numbers_list", "category": "Python"}, {"instruction": "Complete the following snippet with proper code that will return the highest value in a given list.", "input": "my_list = [1,2,3,4,5]", "output": "def find_highest(lst):\n    current_max = lst[0]\n    # Iterate through list\n    for item in lst:\n        if item > current_max:\n            current_max = item\n    # Return the max value\n    return current_max \n\n# Call the function with the given list\nmy_list = [1,2,3,4,5]\nprint(find_highest(my_list)) # 5", "category": "Python"}, {"instruction": "Create a Python script to compact a given list of elements.", "input": "my_list = [1,1,2,3,3,3,4,4,4,4,5]", "output": "def compact_list(lst):\n    # Define a new list to hold the compacted elements\n    new_list = []\n    current = None\n    \n    # Iterate through lst\n    for item in lst:\n        if item != current:\n            current = item\n            new_list.append(current)\n    # Return the new list\n    return new_list\n    \n# Call the function with the given list\nmy_list = [1,1,2,3,3,3,4,4,4,4,5]\nprint(compact_list(my_list)) # [1,2,3,4,5]", "category": "Python"}, {"instruction": "Write a code snippet to create an object of type Car in Python.", "input": "", "output": "class Car():\n    def __init__(self):\n        self.make = \"\"\n        self.model = \"\"\n        self.year = 0\n        self.color = \"\"\n \ncar = Car()", "category": "Python"}, {"instruction": "Write a single line of code to convert a string to a date in Python.", "input": "", "output": "date = datetime.strptime('01/01/2019', '%d/%m/%Y')", "category": "Python"}, {"instruction": "Create a function in Python to find all elements of a given list whose sum is equal to a given number.", "input": "list = [5, 7, 9, 4]\nnumber = 18", "output": "def find_elements(list, number): \n    result = [] \n    for i in range(len(list)): \n        for j in range(i + 1, len(list)): \n            if list[i] + list[j] == number: \n                result.append([list[i], list[j]]) \n  \n    return result \n  \n# Driver code \nlist = [5, 7, 9, 4] \nn = 18\nprint(find_elements(list, n))", "category": "Python"}, {"instruction": "Using Django, create a view to render a template.", "input": "", "output": "from django.shortcuts import render\n\ndef view(request):\n    return render(request, 'template.html')", "category": "Python"}, {"instruction": "Write a code to calculate the roots of a quadratic equation in Python.", "input": "", "output": "import math\n\ndef calculate_roots(a, b, c):\n  # calculate the discriminant\n  d = (b**2) - (4*a*c)\n  \n  # find two solutions\n  sol1 = (-b-math.sqrt(d))/(2*a)\n  sol2 = (-b+math.sqrt(d))/(2*a)\n  \n  print('The solutions are {0} and {1}'.format(sol1,sol2))", "category": "Python"}, {"instruction": "Create a TensorFlow model to recognize handwritten numbers.", "input": "", "output": "\"\"\"\nCreate a TensorFlow model to recognize handwritten numbers\n\"\"\"\n\nimport tensorflow as tf\n\n# Load in the data set\nmnist = tf.keras.datasets.mnist\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n# Pre-process the data \nx_train, x_test = x_train / 255.0, x_test / 255.0\n\n# Create the model\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Flatten(input_shape=(28, 28)),\n  tf.keras.layers.Dense(128, activation='relu'),\n  tf.keras.layers.Dropout(0.2),\n  tf.keras.layers.Dense(10)\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(x_train, y_train, epochs=5)\n\n# Evaluate the model\nmodel.evaluate(x_test,  y_test, verbose=2)", "category": "Python"}, {"instruction": "Parse the following HTML using the BeautifulSoup library in Python.", "input": "html = '<h1>This is a heading</h1><p>This is a paragraph.</p>'", "output": "from bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(html, 'html.parser')\n\nheading = soup.h1.string\nparagraph = soup.p.string\n\nprint(\"Heading:\", heading)\nprint(\"Paragraph:\", paragraph)\n\n# Output:\nHeading: This is a heading\nParagraph: This is a paragraph.", "category": "Python"}, {"instruction": "What is the difference between deep copy and shallow copy in Python?", "input": "", "output": "A shallow copy of an object creates a new reference to the existing object, while a deep copy creates a new object with a different reference but with the same values. In a shallow copy, changes made to the copied object will be reflected in the original object, whereas with a deep copy, the changes are independent. For example, if a list is shallow copied, the copied list will share the same elements as the original list, while a deep copy will contain independent copies of the original list's elements.", "category": "Python"}, {"instruction": "Write a Python function to convert temperatures from Fahrenheit to Celsius.", "input": "", "output": "def fahrenheit_to_celsius(f):\n return (f - 32) * 5 / 9", "category": "Python"}, {"instruction": "Implement a function in Python that sorts a list in ascending order using Bubble Sort algorithm.", "input": "my_list = [4, 6, 3, 9, 1]", "output": "def bubble_sort(list):\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[i] > list[j]:\n                list[i], list[j] = list[j], list[i]\n    return list\n\nmy_list = [4, 6, 3, 9, 1]\nprint(bubble_sort(my_list))", "category": "Python"}, {"instruction": "Create a Python dictionary to store information about a student. The student should have the following attributes: name, age, grades, and graduation year.", "input": "", "output": "student = {\n 'name': '',\n 'age': 0,\n 'grades': [],\n 'graduation_year': 0\n}", "category": "Python"}, {"instruction": "Write a Python function to compute the total amount of a given grocery bill after taxes.", "input": "items = [('apple', 1.49), ('banana', 0.99), ('bread', 4.99)]", "output": "def compute_total_after_taxes(items):\n tax = 0.07\n total = 0\n for item in items:\n  price = item[1]\n  tax_amount = price * tax\n  total += price + tax_amount\n return round(total, 2)", "category": "Python"}, {"instruction": "Design a function to calculate the sum of the squares of the numbers between 1 and n.", "input": "", "output": "def sum_of_squares(n):\n    sum_squares = 0\n    for i in range(1, n+1):\n        sum_squares += i**2\n    return sum_squares", "category": "Python"}, {"instruction": "Design an algorithm to swap two numbers in Python.", "input": "Swap 10 and 20", "output": "def swapNumbers(a, b): \n  temp = a \n  a = b \n  b = temp \n \n  print(\"After swapping: a =\", a, \" b =\", b) \n\n# Driver program \na = 10\nb = 20\nswapNumbers(a, b)", "category": "Python"}, {"instruction": "Define a function that takes a string and prints it in reverse order.", "input": "", "output": "def print_reverse(str):\n    for i in range(len(str)-1, -1, -1):\n        print(str[i], end=\"\")\n    print()", "category": "Python"}, {"instruction": "How do you create a new dataframe from existing two pandas dataframes?", "input": "", "output": "You can create a new dataframe by using the concat() or merge() functions of pandas.  With concat(), you can create a new dataframe by stacking the existing two dataframes on top/bottom of one another. With merge(), you can combine two dataframes by joining them on a key of your choice.", "category": "Python"}, {"instruction": "Write a Pandas code to drop all rows with missing values from a given dataframe.", "input": "Dataframe name: df", "output": "df.dropna(inplace=True)", "category": "Python"}, {"instruction": "Implement an algorithm to find the power of a number.", "input": "Base: 2, Exponent: 3", "output": "def power(base, exponent):\n result = 1\n while exponent > 0:\n result *= base\n exponent -= 1\n return result\nresult = power(2, 3)\nprint(result)\n# 8", "category": "Python"}, {"instruction": "Create a Python dictionary with the key-value: \"Alice\": 28", "input": "", "output": "example_dict = {'Alice': 28}", "category": "Python"}, {"instruction": "Find the maximum element in a given array (unsorted) using a linear search approach.", "input": "[10, 5, 15, 80, 25]", "output": "\"\"\"\nFind the maximum element in a given array (unsorted) using a linear search approach\n\"\"\"\n\ndef linear_search_max(arr):\n    max_element = arr[0]\n    for elem in arr[1:]:\n        if elem > max_element:\n            max_element = elem\n    return max_element\n\nif __name__ == '__main__':\n    arr = [10, 5, 15, 80, 25]\n    max_element = linear_search_max(arr)\n    print(max_element)", "category": "Python"}, {"instruction": "Design a program that prints out the multiplication table up to 12 x 12.", "input": "", "output": "\"\"\"\nDesign a program that prints out the multiplication table up to 12 x 12\n\"\"\"\n\nfor i in range(1, 13):\n    for j in range(1, 13):\n        print('{} x {} = {}'.format(i, j, i * j))\n    print(\"\")", "category": "Python"}, {"instruction": "Devise a function that converts a number represented in the binary system to a decimal number.", "input": "1100", "output": "\"\"\"\nDevise a function that converts a number represented in the binary system to a decimal number\n\"\"\"\n\ndef binary_to_decimal(number):\n    decimal = 0\n    power = 0\n    while number != 0:\n        last_digit = number % 10\n        decimal += last_digit * pow(2, power)\n        power += 1\n        number //= 10\n    return decimal", "category": "Python"}, {"instruction": "Compute the number of days since January 1st, 1971 until the given date.", "input": "May 3rd, 2012", "output": "\"\"\"\nCalculate the number of days since January 1st, 1971 until the given date\n\"\"\"\n\nimport datetime as dt\n\ndef num_days(date_str):\n    datetime_object = dt.datetime.strptime(date_str, \"%B %d, %Y\").date()\n    ref_date = dt.datetime(1971, 1, 1).date()\n    return (datetime_object - ref_date).days\n\nif __name__ == '__main__':\n    print(num_days('May 3rd, 2012'))", "category": "Python"}, {"instruction": "Create a function to calculate the exponent of a given number x raised to power y.", "input": "", "output": "def exponent(x,y): \n    if(y == 0): \n        return 1\n    elif (int(y % 2) == 0): \n        y = int(y / 2) \n        return exponent(x, y) * exponent(x, y) \n    else: \n        return (x * exponent(x, int(y / 2)) * exponent(x, int(y / 2))) \n\nexponent(5,3) # Output: 125", "category": "Python"}, {"instruction": "Design a Python program to print all numbers between 0 and 100 that are divisible by 3 and 5.", "input": "", "output": "for i in range(101):\n    if i % 3 == 0 and i % 5 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Write a method to calculate the average of three numbers in Python.", "input": "", "output": "def avg(num1, num2, num3):\n return (num1 + num2 + num3) / 3", "category": "Python"}, {"instruction": "Write a code segment that manipulates a Fibonacci sequence until the sum is greater than a given number.", "input": "10", "output": "def fibonacci_sum(number):\n    fib_list = [0,1]\n    while True:\n        next_number = fib_list[-1] + fib_list[-2]\n        if next_number > number:\n            break\n        fib_list.append(next_number)\n    return sum(fib_list[:-1])", "category": "Python"}, {"instruction": "Create a function to determine if two strings are symmetrical.", "input": "", "output": "def is_symmetrical(str1, str2):\n    for i in range(0, len(str1)):\n        if str1[i] != str2[-i-1]:\n            return False\n    return True", "category": "Python"}, {"instruction": "Code a function that takes a dictionary as a parameter and prints out the key-value pairs.", "input": "", "output": "def print_dict(dictionary):\n    for key, value in dictionary.items():\n        print(f\"{key}: {value}\")", "category": "Python"}, {"instruction": "Write a python function to detect if two lists contain the same items in different order.", "input": "", "output": "def compare_lists(list1, list2):\n    return sorted(list1) == sorted(list2)", "category": "Python"}, {"instruction": "Generate a simple python function to concatenate two lists.", "input": "", "output": "def concatenate_lists(list1, list2):\n    return list1 + list2", "category": "Python"}, {"instruction": "Design a neural network architecture in TensorFlow to predict the sentiment of a movie review", "input": "", "output": "model = tf.keras.Sequential([\n    tf.keras.layers.Embedding(input_dim=vocabulary_size, output_dim=embedding_dim),\n    tf.keras.layers.GlobalAveragePooling1D(),\n    tf.keras.layers.Dense(24, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])", "category": "Python"}, {"instruction": "Write a code to delete all empty values in a given dictionary.", "input": "my_dict = {'a': '', 'b': False, 'c': 0, 'd': None}", "output": "def delete_empty_values(d):\n    new_dict = {key: value for key, value in d.items() if value != 0 and value != False and value != None and value != ''}\n    return new_dict \n\nmy_dict = delete_empty_values(my_dict)\nprint(my_dict) # Output -> {'b': False}", "category": "Python"}, {"instruction": "Create a function in Python to calculate the sum of the square of all numbers from 1 to n.", "input": "", "output": "def sum_squares(n): \n   total = 0\n   for x in range(1,n+1): \n      total += x * x\n   return total", "category": "Python"}, {"instruction": "Write a Python function to create a dictionary from two given lists. The first list should be the keys and the second list should be the values.", "input": "", "output": "def create_dict(keys, values):\n return dict(zip(keys, values))", "category": "Python"}, {"instruction": "Write a Python function to add an item to a given list.", "input": "", "output": "def add_item(items, item):\n items.append(item)\n return items", "category": "Python"}, {"instruction": "Create a function that takes an array of numbers, calculates the sum of the numbers across all the arrays, and returns the average of those sums.", "input": "arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def get_average_sum(arr):\n    total = 0\n    count = 0\n    for sub_arr in arr:\n        total += sum(sub_arr)\n        count += len(sub_arr)\n    return total / count", "category": "Python"}, {"instruction": "Implement a function in Python that makes a copy of a list.", "input": "my_list = [1, 2, 3, 4]", "output": "def copy_list(lst):\n    new_lst = lst[:]\n    return new_lst\n\nmy_list = [1, 2, 3, 4]\nprint(copy_list(my_list))", "category": "Python"}, {"instruction": "How can you find the maximum element in an array using the reduce() method?", "input": "", "output": "The reduce() method can be used to find the maximum element in an array by applying a function to each element of the array that checks if the current element is greater than the previously seen maximum. This function can be used as the argument to the reduce() method and it will return the maximum value seen in the array.", "category": "Python"}, {"instruction": "Replace all characters in the given string with the given character", "input": "string = \"Hello World\"\nchar = \"x\"", "output": "def replace_chars(string, char):\n    output = \"\"\n    for c in string:\n        output += char\n    return output\n\nreplace_chars(string, char)  # Output: xxxxx xxxxx", "category": "Python"}, {"instruction": "Generate all possible combinations of strings that can be formed using the given characters", "input": "chars = [\"a\", \"b\", \"c\"]", "output": "import itertools\n\ncombinations = [''.join(i) for i in itertools.product(chars)]\n\n# Output: [\"a\", \"b\", \"c\", \"ab\", \"ac\", \"ba\", \"bc\", \"ca\", \"cb\", \"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]", "category": "Python"}, {"instruction": "Separate the given list into two lists for even and odd numbers", "input": "lst = [1, 2, 3, 4, 5]", "output": "even_lst = []\nodd_lst = []\nfor num in lst:\n    if num % 2 == 0:\n        even_lst.append(num)\n    else:\n        odd_lst.append(num)", "category": "Python"}, {"instruction": "Create a function to remove all non alphabetical characters from thestring", "input": "string = \"Hello, world!\"", "output": "def clean_string(string):\n    output = \"\"\n    for char in string:\n        if char.isalpha():\n            output += char\n    return output\n    \nclean_string(string) # Output: Helloworld", "category": "Python"}, {"instruction": "Design a Greedy Algorithm to solve the sum-subset problem.", "input": "", "output": "def subsetsum(arr, target):\n  arr.sort() \n  n = len(arr) \n  sum = 0\n  result = [] \n  \n  for i in range(n):\n    if ( sum + arr[i] <= target):\n      result.append(arr[i])\n      sum = sum + arr[i]\n  \n  return result", "category": "Python"}, {"instruction": "Design a Bubble Sort algorithm for a list of numbers.", "input": "", "output": "def bubbleSort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr", "category": "Python"}, {"instruction": "Given a tree, write a function that finds the deepest node in the tree.", "input": "", "output": "def findDeepestNode(root):\n    if root is None:\n        return None\n    queue = []\n    queue.append(root)\n    while len(queue) > 0:\n        res = queue[0]\n        queue.pop()\n        if res.left is not None:\n            queue.append(res.left)\n        if res.right is not None:\n            queue.append(res.right)\n    return res", "category": "Python"}, {"instruction": "Given a list of strings, write a Python function to expand each element into a set of characters.", "input": "['hello', 'world']", "output": "def expand_list(strings): \n    new_list = []\n    for string in strings: \n        for character in string: \n            new_list.append(character) \n    return new_list", "category": "Python"}, {"instruction": "Code an algorithm to implement merge sort", "input": "[5, 2, 4, 6, 1, 7, 8]", "output": "def merge_sort(arr):\n    if len(arr) >1:\n        mid = len(arr) // 2 \n        left_half = arr[:mid]  \n        right_half = arr[mid:] \n\n        merge_sort(left_half) \n        merge_sort(right_half) \n\n        i = 0\n        j = 0\n        k = 0\n  \n        while i < len(left_half) and j < len(right_half):  \n            if left_half[i] < right_half[j]:  \n                arr[k] = left_half[i]  \n                i += 1\n\n            else:  \n                arr[k] = right_half[j]  \n                j += 1\n            k += 1\n      \n        while i < len(left_half):  \n            arr[k] = left_half[i]  \n            i += 1\n            k += 1\n          \n        while j < len(right_half):  \n            arr[k] = right_half[j]  \n            j += 1\n            k += 1\n\nif __name__ == '__main__':\n\tarr = [5, 2, 4, 6, 1, 7, 8]\n\tmerge_sort(arr)\n\tprint(arr)", "category": "Python"}, {"instruction": "Code a function to flatten a dictionary.", "input": "{\"a\": 1, \"b\": {\"c\": 2, \"d\": 3}}", "output": "def flatten_dict(d):\n\tflattened_dict = {}\n\n\tfor key, val in d.items():\n\t\tif type(val) is dict: # if val is a dict\n\t\t\tfor k, v in val.items():\n\t\t\t\tflattened_dict[key + \"_\" + k] = v\n\t\telse:\n\t\t\tflattened_dict[key] = val\n\n\treturn flattened_dict\n\nif __name__ == '__main__':\n\td = {\"a\": 1, \"b\": {\"c\": 2, \"d\": 3}}\n\tprint(flatten_dict(d))", "category": "Python"}, {"instruction": "Create an algorithm to print out the unique characters in a given string.", "input": "word = \"Hello World\"", "output": "def unique_chars(word):\n  unique_characters = set()\n  for char in word:\n    if char not in unique_characters:\n      unique_characters.add(char)\n  return unique_characters\n\nword = \"Hello World\"\nunique_characters = unique_chars(word)\nprint(\"Unique characters in \", word, \"are:\", unique_characters)", "category": "Python"}, {"instruction": "Generate a random string of length 10 made up of characters \u2018a\u2019 to \u2018d\u2019.", "input": "", "output": "import random\n\nrand_string = ''\nfor i in range(10):\n    rand_string += random.choice(['a', 'b', 'c', 'd'])\n    \nprint(rand_string)", "category": "Python"}, {"instruction": "Describe what a software bug is.", "input": "", "output": "A software bug is a mistake, error or an unexpected behavior or result in a computer program or system that causes it to produce an incorrect or unexpected result, or to behave in unintended ways. It is generally caused by errors in the source code or the semantic understanding of the code that is written. A software bug can occur at any level of the software development process, from the design stage to the compilation stage, and can be caused by incorrect specifications, poor coding, incorrect debugging or incorrect implementation.", "category": "Python"}, {"instruction": "Fix the following code to prevent errors from crashing the program.", "input": "def foo(a):\n    print(a)\nfoo(\"hi\")\nfoo(1)", "output": "def foo(a):\n    \"\"\"\n    A function that prints a value.\n    Args:\n     a (any): value to print\n    Returns:\n     nothing\n    \"\"\"\n    if isinstance(a, (int, float, str)): \n        print(a)\n    else:\n        print(\"Error: must be a string, int, or float\")\n\nif __name__ == '__main__':\n    foo(\"hi\")\n    foo(1)", "category": "Python"}, {"instruction": "Create a method called `combineName` that takes in two strings and combines them together into a full name.", "input": "firstName = 'John'\nlastName = 'Smith'", "output": "def combineName(firstName, lastName):\n    \"\"\"\n    A method that takes in two strings and combines them into a full name.\n    Args: \n     firstName (str): first name \n     lastName (str): last name\n    Returns:\n     fullName (str): combined full name \n    \"\"\" \n    fullName = firstName + \" \" + lastName\n    return fullName\n    \nif __name__ == '__main__':\n    firstName = 'John'\n    lastName = 'Smith'\n    print(combineName(firstName, lastName))", "category": "Python"}, {"instruction": "Create a Rails application with a user sign up with name, email and password.", "input": "", "output": "rails new AppName\n\ncd AppName\n\n# Add devise for user auth\nrails g devise:install\n\n# Generate a model for the user\nrails g devise user username email password\n\n# Create a database and migrate\nrake db:create db:migrate\n\n# Add routes for the login & signup\nRails.application.routes.draw do\n  devise_for :users\nend", "category": "Python"}, {"instruction": "Design a machine learning algorithm to classify the given dataset.", "input": "Dataset of images of cats and dogs", "output": "\"\"\"\nDesign a machine learning algorithm to classify the given dataset\n\"\"\"\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n#Prepare data\ndata = pd.read_csv('path/to/dataset') \n\n#Preprocess data\nX = data.drop('label', axis=1)\ny = data['label']\n\n#Split into training and test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n#Feature scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\n#Train the model\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n#Evaluate the model\nfrom sklearn.metrics import accuracy_score\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\nprint(accuracy)", "category": "Python"}, {"instruction": "Create a recursive function that takes two parameters, a number and a base and returns the result as a string.", "input": "14, 16", "output": "def convert_to_base(num, base): \n    \"\"\" \n    Function to convert num to a given base \n    \"\"\"\n    converted_string = \"\" \n\n    # Base Case \n    if num < base: \n        if num < 10: \n            return str(num) \n        else: \n            return chr(num - 10 + ord('A')) \n\n    rem = num % base \n    if rem < 10: \n        converted_string = str(rem) + converted_string \n    else: \n        converted_string = chr(rem - 10 + ord('A')) + converted_string \n    num = num // base \n    return convert_to_base(num, base) + converted_string", "category": "Python"}, {"instruction": "Create a new array that is a copy of the given input array, consisting of all elements smaller than 5.", "input": "[4, 8, 9, 7, 5, 1, 10]", "output": "new_array = [item for item in given_array if item < 5]  # [4, 1]", "category": "Python"}, {"instruction": "Write a code to count the number of occurrences of a given word in an array of strings.", "input": "words = ['apple', 'banana', 'apple', 'kiwi', 'apple']\ntarget_word = 'apple'", "output": "def count_word(words, target_word):\n    counter = 0\n    for word in words:\n        if word == target_word:\n            counter += 1\n    return counter", "category": "Python"}, {"instruction": "Generate a program in Python that prints all days of the week", "input": "", "output": "#list of Weekdays\nweekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \n            \"Saturday\", \"Sunday\"]\n\n#print Weekdays\nfor weekday in weekdays:\n    print(weekday)", "category": "Python"}, {"instruction": "Sort an array of integers using a heapsort algorithm.", "input": "[3, 6, 2, 9, 1]", "output": "def heapsort(A):\n    # step 1: create the heap\n    heapify(A)\n\n    # step 2: sort the heap\n    for size in range(len(A), 1, -1):\n        A[0], A[size - 1] = A[size - 1], A[0]\n        sift_down(A, 0, size - 1)\n\n    # step 3: return the sorted result\n    return A", "category": "Python"}, {"instruction": "Create a function that returns a randomly selected element from a list.", "input": "list = [1, 2, 3, 4, 5]", "output": "import random\n\ndef get_random_element(list):\n    \"\"\"\n    A function to return a randomly selected element from a list.\n    Args: \n     list (list): a list\n    Returns:\n     element (int): a randomly selected element\n    \"\"\"\n    index = random.randint(0, len(list)-1)\n    element = list[index]\n    return element\n\nif __name__ == '__main__':\n    list = [1, 2, 3, 4, 5]\n    print(get_random_element(list))", "category": "Python"}, {"instruction": "Build a function to identify a duplicate element in a list", "input": "list = [2,4,8,7,2,5]", "output": "def find_duplicate(list):\n\tvisited = set()\n\tfor num in list:\n\t\tif num in visited:\n\t\t\treturn num\n\t\telse:\n\t\t\tvisited.add(num)\n\treturn None\n\nlist = [2,4,8,7,2,5]\nprint(find_duplicate(list)) # Output: 2", "category": "Python"}, {"instruction": "Output a list with all the numbers from 0 to 100 that are divisible by 8.", "input": "", "output": "result = [x for x in range(101) if x % 8 == 0]\nprint(result)# [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 100]", "category": "Python"}, {"instruction": "Write an Object-Oriented Python program to find the area of a triangle given the base and the height.", "input": "", "output": "class Triangle:\n    def __init__(self, base, height):\n        self.base = base\n        self.height = height\n\n    def calculate_area(self):\n        area = (self.base * self.height) / 2\n        return area\n\n# Create triangle\ntriangle = Triangle(10, 5)\n\n# Find the area\narea = triangle.calculate_area()\n\n# Print the area\nprint(area)", "category": "Python"}, {"instruction": "Create a function in Python to evaluate the given numpy array and return the maximum absolute difference of any two elements.", "input": "// Array A\nimport numpy as np\nA = np.array([1, 4, 5, -3])", "output": "def max_difference(A):\n    return max(abs(np.max(A) - np.min(A)), abs(A[-1] - A[0]))", "category": "Python"}, {"instruction": "Read the given input, and write a Python code to create a dictionary which contains unique elements as keys and their corresponding count as values.", "input": "Input: ['a',\"a\",'b',1,1,1,'c']", "output": "my_list = ['a',\"a\",'b',1,1,1,'c']\nmy_dict = {}\nfor i in my_list:\n    my_dict[i] = my_dict.get(i, 0) + 1\n\nprint(my_dict) \n# Output: {'a': 2, 'b': 1, 1: 3, 'c': 1}", "category": "Python"}, {"instruction": "Translate this piece of JavaScript into Python.", "input": "let val = 10;\nif (val > 5) {\n  console.log(\"val is greater than 5\");\n}", "output": "val = 10\nif val > 5:\n    print(\"val is greater than 5\")", "category": "Python"}, {"instruction": "Write a Django code to print the name of all the users in the database.", "input": "", "output": "from django.contrib.auth.models import User\n\nusers = User.objects.all()\nfor user in users:\n    print(user.username)", "category": "Python"}, {"instruction": "Create a data structure in Python that stores the details of a shoe product.", "input": "Name: \"Nike Air Max 720\"\nPrice: $219.99\nSize: 8\nColor: White", "output": "class ShoeProduct:\n    def __init__(self, name, price, size, color):\n        self.name = name\n        self.price = price\n        self.size = size\n        self.color = color", "category": "Python"}, {"instruction": "You need to edit a Python code snippet to add a loop and make it print the square of the numbers from 1 to 10.", "input": "", "output": "for i in range(1, 11):\n    square = i * i\n    print(square)", "category": "Python"}, {"instruction": "Write a Python program to randomly sample a list without replacement.", "input": "list = [30, 40, 50, 60, 70, 80]", "output": "import random\n\ndef sample_list(list):\n    list_copy = list.copy()\n    sampled_list = []\n    while list_copy:\n        element = random.choice(list_copy)\n        sampled_list.append(element)\n        list_copy.remove(element)\n    return sampled_list", "category": "Python"}, {"instruction": "Edit the Python code snippet to remove the syntax error.", "input": "def calculate_area(length, width):\n    area = length * width\n    return \u201cThe area is\u201d + area", "output": "def calculate_area(length, width):\n    area = length * width\n    return \"The area is \" + str(area)", "category": "Python"}, {"instruction": "Given a list of integers, write a program to convert it into a list of strings.", "input": "integers = [1, 2, 3, 4]", "output": "def convert_to_string(integers):\n    string_list = []\n    for item in integers:\n        string_list.append(str(item))\n    return string_list", "category": "Python"}, {"instruction": "Create a function to search the given list to find a key value and return its position.", "input": "arr = ['a', 'b', 'c', 'd']\nkey = 'a'", "output": "def search(arr, key): \n    for i in range(len(arr)):\n\t    if arr[i] == key:\n            return i \n    return -1", "category": "Python"}, {"instruction": "Write a Python program to create a copy of a given set.", "input": "my_set = {1, 2, 3, 4, 5}", "output": "def clone_set(my_set):\n    new_set = set()\n    for item in my_set:\n        new_set.add(item)\n    return new_set", "category": "Python"}, {"instruction": "Create a function that returns the longest substring of the string given.", "input": "string = \"Hello world!\"", "output": "def longest_substring(string):\n    curr_len = 1\n    max_len = 1\n    prev_index = 0\n    n = len(string)\n    visited = [-1] * 256\n    visited[ord(string[0])] = 0\n    for i in range(1,n):\n        prev_index = visited[ord(string[i])]\n        if prev_index == -1 or (i - curr_len > prev_index):\n            curr_len+=1\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n            curr_len = i - prev_index\n        visited[ord(string[i])] = i\n    if curr_len > max_len:\n        max_len = curr_len\n    return max_len", "category": "Python"}, {"instruction": "Select all rows in a pandas dataframe where at least one value exists in the column named \u2018name\u2019.", "input": "", "output": "selected_rows = df[df.name.notnull()]", "category": "Python"}, {"instruction": "What data structure would be suitable to represent a sparse matrix with thousands of columns and rows?", "input": "", "output": "A dictionary of dictionaries or a linked list could be used to represent a sparse matrix with thousands of columns and rows. The outer dictionary would serve as an index table to refer to each row of the matrix while the inner dictionary contains key-value pairs of column index and the corresponding item or element in the specified row.", "category": "Python"}, {"instruction": "What data structure should be used to store a customer\u2019s name, address, and phone number?", "input": "", "output": "A dictionary or set can be used to store a customer\u2019s name, address, and phone number. The customer's name would be used as the key and the associated customer information such as address and phone number would be stored as the value.", "category": "Python"}, {"instruction": "Change the following program to use a try/except/finally block to handle errors.", "input": "def read_file(file):\n    with open(file) as f:\n        for line in f:\n            print(line)", "output": "try:\n    def read_file(file):\n        with open(file) as f:\n            for line in f:\n                print(line)\nexcept IOError:\n    print(\"Error: Could not read file\")\nfinally:\n    print(\"Closing file\")\n    f.close()", "category": "Python"}, {"instruction": "Develop a program in Python to implement a Simple Linear Regression model.", "input": "", "output": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# generate dataset\nx = np.random.rand(100, 1)\ny = 4 + 3 * x + np.random.rand(100, 1)\n\n# linear regression\nx_b = np.c_[np.ones((100, 1)), x]\ntheta_best = np.linalg.inv(x_b.T.dot(x_b)).dot(x_b.T).dot(y)\n\n# prediction\nx_new = np.array([[0], [1]])\nx_new_b = np.c_[np.ones((2, 1)), x_new]\ny_predict = x_new_b.dot(theta_best)\n\n# plot\nplt.plot(x, y, \"b.\")\nplt.plot(x_new, y_predict, \"r-\")\nplt.axis([0, 1, 0, 15])\nplt.show()", "category": "Python"}, {"instruction": "Design a function to get the number of elements in a JSON array in Python.", "input": "[{\"name\":\"John\"},{\"name\":\"Bob\"},{\"name\":\"Alice\"}]", "output": "def get_num_elements(data):\n    count = 0\n    for item in data:\n        count += 1\n    return count\n\ndata = [{\"name\":\"John\"},{\"name\":\"Bob\"},{\"name\":\"Alice\"}]\nprint(get_num_elements(data))", "category": "Python"}, {"instruction": "How would you use Recursion to solve the Fibonacci Sequence in Python?", "input": "", "output": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return(fibonacci(n-1) + fibonacci(n-2))\n    \nprint(fibonacci(10))", "category": "Python"}, {"instruction": "How can you create a Pandas DataFrame using a given list of dictionaries?", "input": "[{\"animal\": \"cat\"}, {\"animal\": \"dog\"}, {\"animal\": \"fish\"}]", "output": "import pandas as pd\ndata = [{\"animal\": \"cat\"}, {\"animal\": \"dog\"}, {\"animal\": \"fish\"}]\ndf = pd.DataFrame(data)\nprint(df)", "category": "Python"}, {"instruction": "Design a program in Python that will count the words in a sentence.", "input": "This is a sample sentence.", "output": "def word_count(sentence):\n    words = sentence.split(' ')\n    return len(words)\n\nprint(word_count('This is a sample sentence.'))", "category": "Python"}, {"instruction": "Design a function that uses a for loop to print all odd numbers from 1 to 10.", "input": "", "output": "def print_odd_numbers():\n    for i in range(1, 11):\n        if i % 2 != 0:\n            print(i)\n\nprint_odd_numbers()", "category": "Python"}, {"instruction": "Edit the code to print \u201cWelcome to Python Programming\u201d five times.", "input": "print(\"Hello Python\")", "output": "for i in range(5):\n  print(\"Welcome to Python Programming\")", "category": "Python"}, {"instruction": "Generate an array of 5 random hexadecimal numbers.", "input": "", "output": "import random\n\nhex_arr = []\nfor i in range(5):\n rand_hex = random.randint(0, 255)\n hex_arr.append(hex(rand_hex))\n\nprint(hex_arr)", "category": "Python"}, {"instruction": "Create a function in Python to modify the given list and remove all strings with length less than three.", "input": "mylist = ['Apple', 'Cat', 'Hello', 'Hi']", "output": "def remove_short(mylist):\n    mylist = [x for x in mylist if len(x) >= 3]\n    return mylist\n    \nprint(remove_short(mylist))\n# Output: ['Apple', 'Hello']", "category": "Python"}, {"instruction": "Write a class in Python to store the objects of student and their grades.", "input": "", "output": "# Class to store student and grades\n\nclass StudentGrades:\n    def __init__(self, student_name):\n        self.student_name = student_name\n        self.grades = {}\n     \n    def add_grade(self, course_name, grade):\n        self.grades[course_name] = grade\n    \n    def get_total_grade(self):\n        total_grade = 0\n        for grade in self.grades.values():\n            total_grade += grade\n        return total_grade", "category": "Python"}, {"instruction": "Describe two ways to insert elements into a hashmap in Python.", "input": "", "output": "1. The simplest way is to use the Square Bracket ([]) Notation. For example, hashmap[key] = value allows you to insert key-value pair into a hashmap. \n2. The other way to insert elements into a hashmap is by using the update() method. This method takes in a dictionary object as an argument and updates the existing hashmap with values from the dictionary.", "category": "Python"}, {"instruction": "Create an input validation function in Python which checks that the input is an integer between 2-6.", "input": "", "output": "def input_validation(input):\n    try:\n        input = int(input)\n        if input >= 2 and input <= 6:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False", "category": "Python"}, {"instruction": "Let's try a different sort algorithm. Generate a Python code snippet to implement merge sort.", "input": "", "output": "# Merges two subarrays of arr[]. \n# First subarray is arr[l..m] \n# Second subarray is arr[m+1..r] \ndef merge(arr, l, m, r): \n    n1 = m - l + 1\n    n2 = r- m \n  \n    # create temp arrays \n    L = [0] * (n1) \n    R = [0] * (n2) \n  \n    # Copy data to temp arrays L[] and R[] \n    for i in range(0 , n1): \n        L[i] = arr[l + i] \n  \n    for j in range(0 , n2): \n        R[j] = arr[m + 1 + j] \n  \n    # Merge the temp arrays back into arr[l..r] \n    i = 0     # Initial index of first subarray \n    j = 0     # Initial index of second subarray \n    k = l     # Initial index of merged subarray \n  \n    while i < n1 and j < n2 : \n        if L[i] <= R[j]: \n            arr[k] = L[i] \n            i += 1\n        else: \n            arr[k] = R[j] \n            j += 1\n        k += 1\n  \n    # Copy the remaining elements of L[], if there \n    # are any \n    while i < n1: \n        arr[k] = L[i] \n        i += 1\n        k += 1\n  \n    # Copy the remaining elements of R[], if there \n    # are any \n    while j < n2: \n        arr[k] = R[j] \n        j += 1\n        k += 1\n  \n# l is for left index and r is right index of the \n# sub-array of arr to be sorted \ndef mergeSort(arr,l,r): \n    if l < r: \n  \n        # Same as (l+r)//2, but avoids overflow for \n        # large l and h \n        m = (l+(r-1))//2\n  \n        # Sort first and second halves \n        mergeSort(arr, l, m) \n        mergeSort(arr, m+1, r) \n        merge(arr, l, m, r)", "category": "Python"}, {"instruction": "Create a Python program to take the input and print the output as shown in the example below.", "input": "list1 = [10, 20, 30, [40, 50], [60, 70], 80]", "output": "print(list1[3][1])\nprint(list1[4][0])\n\nprint(list1[3][1]) # output: 50\nprint(list1[4][0]) # output: 60", "category": "Python"}, {"instruction": "Create an algorithm which is able to sort a given array of integers in descending order.", "input": "", "output": "def sort_descending(nums):\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if nums[i] > nums[j]:\n                nums[i],nums[j] = nums[j],nums[i]\n    return nums", "category": "Python"}, {"instruction": "Design an algorithm to determine if an integer is even or odd.", "input": "", "output": "def is_even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Design a class for a user profile.", "input": "", "output": "class UserProfile:\n  def __init__(self, username, password, email, full_name, date_of_birth, address):\n    self.username = username\n    self.password = password\n    self.email = email\n    self.full_name = full_name\n    self.date_of_birth = date_of_birth\n    self.address = address\n \n  def update_phone_number(self, phone_number):\n    self.phone_number = phone_number", "category": "Python"}, {"instruction": "Explain how inheritance works in programming.", "input": "", "output": "Inheritance is a feature of object-oriented programming (OOP) that allows one class, known as the \"parent class\" or \"base class\", to pass its properties and methods to another class, known as the \"child class\" or \"inherited class\". This relationship between the classes allows for code reuse, as the child class can access the data and functionality of the parent class. Additionally, the child class is allowed to modify and add onto the parent class's features, allowing for even more code reuse between classes and creating more efficient developer workflows.", "category": "Python"}, {"instruction": "How would you create a function in Python to add two numbers?", "input": "", "output": "def add(a, b):\n\treturn a + b \n\n# Usage \nprint(add(3,4)) # output: 7", "category": "Python"}, {"instruction": "When would you use a while-loop in Python?", "input": "", "output": "A while-loop in Python is used when we need to iterate through a set of instructions or code block until a condition is met or false. It allows us to perform an operation multiple times until the condition is met. For example, we can use a while-loop to iterate and check if a certain number is prime or not.", "category": "Python"}, {"instruction": "Create a new list which contains even elements from the existing list A.", "input": "A = [1, 4, 5, 12, 3, 7, 16]", "output": "A = [1, 4, 5, 12, 3, 7, 16]\neven_list = [x for x in A if x % 2 == 0 ]", "category": "Python"}, {"instruction": "Make a function in Python that sorts a list of integers in increasing order.", "input": "[50, 2, 8, 7, 19, 29]", "output": "def sortInt(nums):\n    for i in range(len(nums)-1):\n        for j in range(i+1,len(nums)):\n            if nums[i] > nums[j]:\n                #Swap\n                nums[i],nums[j] = nums[j],nums[i]\n    return nums", "category": "Python"}, {"instruction": "Write a Python function to create a dictionary with the given list as its keys and values.", "input": "list = [\"a\", \"b\", \"c\"]", "output": "def create_dict(list):\n  return dict(zip(list, list))\n\ndict = create_dict(list)\nprint(dict)\n# Output: {'a': 'a', 'b': 'b', 'c': 'c'}", "category": "Python"}, {"instruction": "Write a Python function that takes a list of numbers and returns the mean and standard deviation of that list.", "input": "list = [1, 2, 3, 4, 5]", "output": "import statistics\n\ndef get_stats(list):\n mean = statistics.mean(list)\n stdev = statistics.stdev(list)\n return mean, stdev\n\nmean, stdev = get_stats(list)\nprint(\"Mean:\", mean)\nprint(\"Standard Deviation:\", stdev)", "category": "Python"}, {"instruction": "Create a function in Python which checks if an input value is positive or negative.", "input": "", "output": "def check_sign(x):\n  if x < 0:\n    print(\"The number is negative.\")\n  elif x > 0:\n    print(\"The number is positive.\")\n  else:\n    print(\"The number is 0.\")", "category": "Python"}, {"instruction": "Edit the given python code to execute the arithmetic operation.", "input": "a = 8\nb = a+2", "output": "a = 8\nb = a + 2\nc = a * b\nprint(c)", "category": "Python"}, {"instruction": "Design a program to count the total number of even numbers in a given array.", "input": "[1, 2, 3, 4, 5, 6]", "output": "def count_evens(arr):\n    count = 0\n    for i in arr:\n        if (i % 2)  == 0:\n            count+=1\n    return count\n\narr = [1, 2, 3, 4, 5, 6]\ncount = count_evens(arr)\n\nprint(count)", "category": "Python"}, {"instruction": "Use Python to reverse the order of a string input.", "input": "I love coding", "output": "def reverse_string(string): \n    return string[::-1]\n\nstring_input = 'I love coding'\n\nreverse_string(string_input)", "category": "Python"}, {"instruction": "Create an array of random integers from 0-10 and print the sum of all elements in the array.", "input": "", "output": "import random\n\n# generate random integers\nint_list = [random.randint(0, 10) for i in range(10)]\n\n# calculate the sum\ntotal = 0\nfor e in int_list:\n    total += e\n\n# print the sum\nprint(total)", "category": "Python"}, {"instruction": "Edit the given code to use dynamic programming to solve the problem.", "input": "def rod_cutting(arr, n):\n    if n <= 0:\n        return 0\n    max_val = 0\n    for i in range(0, n):\n        max_val = max(max_val, arr[i] + rod_cutting(arr, n-i-1))\n    return max_val", "output": "def rod_cutting(arr, n):\n    dp = [-1 for _ in range(n+1)]\n    dp[0] = 0\n    for i in range(1, n+1):\n        for j in range(i):\n            dp[i] = max(dp[i], arr[j] + dp[i - j - 1])\n    return dp[n]", "category": "Python"}, {"instruction": "Print out the Fibonacci series up to a given number.", "input": "n = 5", "output": "def print_fibonacci_series(n):\n    a = 0\n    b = 1\n    print(a, end = \" \")\n    print(b, end = \" \")\n    for _ in range(2, n):\n        c = a + b\n        a = b\n        b = c\n        print(c, end = \" \")\n    print()\n\nprint_fibonacci_series(5)", "category": "Python"}, {"instruction": "Write a class that implements an arithmetic operator.", "input": "None", "output": "class ArithmeticOperator:\n    def __init__(self, operator, left, right):\n        self.operator = operator\n        self.left = left\n        self.right = right\n\n    def operate(self):\n        if self.operator == \"+\":\n            return self.left + self.right\n        elif self.operator == \"-\":\n            return self.left - self.right\n        elif self.operator == \"*\":\n            return self.left * self.right\n        elif self.operator == \"/\":\n            return self.left / self.right\n        else:\n            raise ValueError('Not a valid operator')", "category": "Python"}, {"instruction": "Write a function which will print out a given pattern.", "input": "*\n**\n***\n****", "output": "def print_pattern(n):\n    for i in range(1, n+1):\n        print(\"*\" * i)\n\nprint_pattern(4)", "category": "Python"}, {"instruction": "Create a Python program that prints out all even numbers between 0 and the given number n.", "input": "", "output": "def print_even_numbers(n):\n  for i in range (0, n+1):\n    if i % 2 == 0:\n      print (i)\n\nprint_even_numbers(20)", "category": "Python"}, {"instruction": "Create a function that prints out the List of tuples.", "input": "t = [(1, 5), (0, 1), (10, 20)]", "output": "def print_list_tuple(t):\n    for item in t:\n        print(item)", "category": "Python"}, {"instruction": "Create a function to encrypt a string using the XOR operator.", "input": "key = 'ABCDEFG'", "output": "def xor_encrypt(string, key):\n    encrypted_string = \"\"\n    for i, letter in enumerate(string):\n        encrypted_string += chr(ord(letter) ^ ord(key[i % len(key)]))\n    return encrypted_string", "category": "Python"}, {"instruction": "What algorithm should be used for predicting the output for a given input?", "input": "", "output": "The type of algorithm to be used for predicting the output for a given input depends on the complexity of the task. Common algorithms used for prediction tasks include Support Vector Machines, Random Forests, k-Nearest Neighbors and Artificial Neural Networks.", "category": "Python"}, {"instruction": "Create a function that takes in a string and returns an array of the words which are longer than 5 characters.", "input": "\"Welcome to the world of programming\"", "output": "def get_long_words(s):\n    words = s.split(\" \")\n    result = []\n    for word in words:\n        if len(word) > 5:\n            result.append(word)\n    return result", "category": "Python"}, {"instruction": "We have a list of numbers and a given sum. Write a program to determine if any two numbers from the list sum up to the given sum.", "input": "[1,2,3,4], 6", "output": "def two_sum(nums, target):\n    for i in range(len(nums) - 1):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return (i, j)\n    return -1", "category": "Python"}, {"instruction": "Create a function that takes a string and checks if the string contains any special characters.", "input": "Hello World", "output": "def has_special_characters(s):\n    return not all(char.isalnum() for char in s)", "category": "Python"}, {"instruction": "Generate a loop to find the largest sub-array in a given array with contiguous elements and its sum.", "input": "Array: [-2, 6, -3, 5, -2, 3, 4, -2]", "output": "\"\"\"\nGenerate a loop to find the largest sub-array in a given array with contiguous elements and its sum.\n\"\"\"\n\ndef largest_subarray_sum(array):\n    best_sum = 0\n    current_sum = 0\n    current_start_index = 0\n    best_start_index = -1\n    best_end_index = -1\n    for i in range(len(array)):\n        current_sum += array[i]\n        if current_sum > best_sum:\n            best_sum = current_sum\n            best_start_index = current_start_index\n            best_end_index = i\n        if current_sum < 0:\n            current_sum = 0\n            current_start_index = i + 1\n    return (best_sum, best_start_index, best_end_index)\n\nif __name__ == '__main__':\n    array = [-2, 6, -3, 5, -2, 3, 4, -2]\n    print(largest_subarray_sum(array))", "category": "Python"}, {"instruction": "Create a function to edit a given string, replacing all the vowels with a given character.", "input": "String: \"Hello world\"\nCharacter: 'x'", "output": "\"\"\"\nCreate a function to edit a given string, replacing all the vowels with a given character.\n\"\"\"\ndef replace_vowels(string, replacement_character):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = \"\"\n    for char in string:\n        if char in vowels:\n            new_str += replacement_character\n        else:\n            new_str += char\n    return new_str\n\nif __name__ == '__main__':\n    string = \"Hello world\"\n    replacement_character = 'x' \n    print(replace_vowels(string, replacement_character))", "category": "Python"}, {"instruction": "Create a data structure to store all of the prime numbers up to 1 million.", "input": "", "output": "\"\"\"\nCreate a data structure to store all of the prime numbers up to 1 million.\n\"\"\"\nimport math\n\ndef sieveOfEratosthenes(n):\n    prime_numbers = [True]*(n+1) \n    prime_numbers[0] = False\n    prime_numbers[1] = False\n      \n    for i in range(2, int(math.sqrt(n)+1)): \n        if (prime_numbers[i]): \n            for j in range(i*i, n+1, i): \n                prime_numbers[j] = False\n      \n    prime_numbers_list = []\n    for k in range(n+1): \n        if prime_numbers[k]: \n            prime_numbers_list.append(k)\n      \n    return prime_numbers_list\n\nif __name__ == '__main__':\n    n = 1000000\n    prime_numbers_list = sieveOfEratosthenes(n)\n    print(prime_numbers_list)", "category": "Python"}, {"instruction": "Use features of the Python language to implement 3-way partitioning of a given array.", "input": "Array: [9,6,7,4,1,6,3]", "output": "\"\"\"\nUse features of the Python language to implement 3-way partitioning of a given array.\n\"\"\"\ndef threeWayPartition(array, pivot): \n    less = [] \n    equal = [] \n    greater = [] \n    for i in array: \n        if i < pivot: \n            less.append(i) \n        elif i == pivot: \n            equal.append(i) \n        else: \n            greater.append(i)   \n    return less + equal + greater \n\nif __name__ == '__main__': \n    array = [9,6,7,4,1,6,3]\n    pivot = 6\n    print(threeWayPartition(array, pivot))", "category": "Python"}, {"instruction": "Create a function which receives two strings and checks if the characters in the first string appear in the same order as in the second string.", "input": "String 1: \"Hello World\" \nString 2: \"World Hello\"", "output": "\"\"\"\nCreate a function which receives two strings and checks if the characters in the first string appear in the same order as in the second string.\n\"\"\"\ndef check_order(str1,str2): \n    stack=[]\n    j=0\n    for i in range(len(str2)): \n        if str2[i]==str1[j]: \n            stack.append(str2[i]) \n            j+=1\n            if stack==str1: \n                return True\n                \n    return False\n\nif __name__ == '__main__': \n    str1 = \"Hello World\"\n    str2 = \"World Hello\"\n    print(check_order(str1,str2))", "category": "Python"}, {"instruction": "Generate a loop to read each word from a given sentence and display them as a list.", "input": "Sentence: \"Python is a great programming language\"", "output": "\"\"\"\nGenerate a loop to read each word from a given sentence and display them as a list.\n\"\"\"\nsentence = \"Python is a great programming language\"\nwords = sentence.split()\n\nword_list= []\nfor word in words:\n    word_list.append(word)\n\nprint(word_list)", "category": "Python"}, {"instruction": "Create an algorithm to find the optimal sum from a set of given numbers such that the sum is equal to a given target.", "input": "Target: 10\nNumbers: [1,4,5,3,6]", "output": "\"\"\"\nCreate an algorithm to find the optimal sum from a set of given numbers such that the sum is equal to a given target.\n\"\"\"\ndef optimal_sum(target, numbers): \n    if (target == 0): \n        return True\n    n = len(numbers) \n    subset = [True] + [False]*target \n      \n    for i in range(n): \n        for j in range(target,numbers[i]-1,-1): \n            subset[j] = subset[j] or subset[j-numbers[i]] \n  \n    return subset[target] \n\nif __name__ == '__main__': \n    target = 10\n    numbers = [1,4,5,3,6]\n    print(optimal_sum(target, numbers))", "category": "Python"}, {"instruction": "Create a function which converts a string representation of number in English to a numerical value.", "input": "\"one thousand two hundred and thirty four\"", "output": "\"\"\"\nCreate a function which converts a string representation of number in English to a numerical value.\n\"\"\"\n\ndef convert_english_number(number_string):\n    word_values = {\"one\":1,\"two\":2,\"three\":3,\"four\":4,\"five\":5,\"six\":6,\"seven\":7,\"eight\":8,\"nine\":9,\"ten\":10,\"eleven\":11,\"twelve\":12,\"thirteen\":13,\"fourteen\":14,\"fifteen\":15,\"sixteen\":16,\"seventeen\":17,\"eighteen\":18,\"nineteen\":19,\"twenty\":20,\"thirty\":30,\"forty\":40,\"fifty\":50,\"sixty\":60,\"seventy\":70,\"eighty\":80,\"ninety\":90}\n    word_list = number_string.split()\n\n    final_num = 0\n    i=0\n    while i<len(word_list): \n        if word_list[i] in word_values.keys():\n            final_num += word_values[word_list[i]]\n        elif word_list[i]==\"hundred\":\n            final_num = final_num*100\n            \n        if(i+1<len(word_list) and word_list[i+1]==\"hundred\"):\n            final_num += word_values[word_list[i]]*100\n        i+=1\n    return final_num\n\nif __name__ == '__main__':\n    print(convert_english_number(\"one thousand two hundred and thirty four\"))", "category": "Python"}, {"instruction": "Construct an IPython code cell to display the content of a given pandas DataFrame.", "input": "DataFrame:\nName      Age\nAlice      26\nBob        32\nCarol      12", "output": "import pandas as pd\n\ndf = pd.DataFrame({'Name': ['Alice', 'Bob', 'Carol'],\n                   'Age': [26, 32, 12]})\n\ndf", "category": "Python"}, {"instruction": "Suggest a way to solve the following problem in Python: extracting the last element from a given list.", "input": "", "output": "A convenient way to extract the last element from a given list in Python is to use negative indexing. This allows you to access the last element of a list by using the index -1. For example, the following code will return the last element of the list \"my_list\": \n\nmy_last_element = my_list[-1]", "category": "Python"}, {"instruction": "Write a Python script that prints out the Fibonacci sequence up to the nth number.", "input": "10", "output": "\"\"\"\nPrint out the Fibonacci sequence up to the nth number\n\"\"\"\ndef printFibSequence(n): \n    \n    # Initialize first two terms \n    a = 0\n    b = 1\n\t\n    # Add the first two terms \n    print(a, end=\" \") \n    print(b, end=\" \") \n\t\n    # Loop up to the n-2th number\n    for i in range(2, n): \n        c = a + b \n        print(c, end=\" \") \n        a = b \n        b = c \n\n# Main program\nif __name__ == '__main__':\n    n = 10 \n    printFibSequence(n)", "category": "Python"}, {"instruction": "Add comments to the following code to explain briefly its purpose.", "input": "def sum_of_numbers(n):\n    total = 0\n    for i in range(n):\n        total += i\n    return total", "output": "\"\"\"\nThis function is used to calculate the \nsum of the first 'n' natural numbers\n\"\"\"\ndef sum_of_numbers(n): \n    # Initialize total to 0\n    total = 0 \n\n    # Loop through the first 'n' natural numbers\n    for i in range(n): \n        # Add the current number to the total\n        total += i \n\n    # Return total\n    return total", "category": "Python"}, {"instruction": "Generate random numbers in the range of 1 to 100 using a for loop in Python.", "input": "", "output": "import random\n\nfor i in range(100):\n\trand_num = random.randint(1, 100)\n\tprint(rand_num)", "category": "Python"}, {"instruction": "From the array of integers given below, write a Python code snippet to select all even numbers.", "input": "array = [1, 9, 4, 10, 5, 12];", "output": "even_numbers = [num for num in array if num % 2 == 0]", "category": "Python"}, {"instruction": "Generate a random number between the two numbers provided.", "input": "min = 5\nmax = 10", "output": "import random\n\ndef randomNumber(min, max):\n    return random.randint(min, max)", "category": "Python"}, {"instruction": "Write a function to sort a stack in ascending order.", "input": "stack = [4, 7, 2, 1]", "output": "def sortStackAsc(stack):\n    sorted_stack = []\n\n    while stack:\n        current_element = stack.pop()\n        while sorted_stack and current_element < sorted_stack[-1]:\n            stack.append(sorted_stack.pop())\n        sorted_stack.append(current_element)\n\n    return sorted_stack", "category": "Python"}, {"instruction": "Write a generic function to split an array into n equal slices.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def splitArr(arr, n):\n    if n > len(arr):\n        return -1\n    result = []\n    for i in range(0, len(arr), n):\n        result.append(arr[i:i+n])\n    return result", "category": "Python"}, {"instruction": "In Python, create a function that reverses a list.", "input": "", "output": "def reverse_list(list): \n    return list[::-1] \n  \nlist = [10, 16, 1, 5] \n  \nprint(\"Original List\", list) \nprint(\"Reversed List\", reverse_list(list))", "category": "Python"}, {"instruction": "Create a class with two methods to generate a random Integer and String", "input": "", "output": "import random\n\nclass randomGenerator:\n  \n    def __init__(self):\n        pass\n    \n    def generate_random_int(self):\n        return random.randint(0,100)\n    \n    def generate_random_string(self):\n        return ''.join(random.choices(string.ascii_letters + string.digits, k=10))\n\nrandomGenerator = randomGenerator()", "category": "Python"}, {"instruction": "Analyze the following two functions to determine which one will be faster for executing a given operation.", "input": "Function 1:\n\ndef f1(x):\n    for i in range(1, x):\n        print(i)\n\nFunction 2:\n\ndef f2(x):\n    i = 1\n    while i < x:\n        print(i)\n        i += 1", "output": "Function 2 will be faster than Function 1 for executing a given operation. This is because Function 2 uses a while loop, which checks the condition before executing the loop body, while Function 1 uses a for loop, which executes the loop body before checking the condition.", "category": "Python"}, {"instruction": "Write a function in Python to format a given date according to the format \"Day-Name, Month Name, Day, Year\".", "input": "\"2019-06-27\"", "output": "def format_date(date): \n    date_list = date.split('-') \n    formatted_date = date_list[2] + '-' + calendar.month_name[int(date_list[1])] + '-' + date_list[0] \n    return formatted_date", "category": "Python"}, {"instruction": "Describe a way to implement quicksort.", "input": "", "output": "Quicksort is an efficient sorting algorithm that works by selecting a \"pivot\" element from the array and partitioning the other elements into two sub-arrays based on whether they are less than or greater than the pivot element. Quicksort then recursively sorts the sub-arrays in the same way. The algorithm runs in O(nlog(n)) time and is one of the most widely used sorting algorithms.", "category": "Python"}, {"instruction": "Generate a code to throttle a stream of messages that exceeds a set limit of messages within a certain time window.", "input": "limit = 100\ntime_window = 5 seconds", "output": "import time\n\ndef throttle_messages(limit, window):\n    count = 0\n    start = time.time()\n \n    while count < limit:\n        next_message = yield\n        count += 1\n         \n        end = time.time()\n        if (end - start) > window: \n            count = 0\n            start = end\n            \n    yield", "category": "Python"}, {"instruction": "Create a python generator that prints fibonacci numbers from n to 2*n-1.", "input": "n = 10", "output": "def fibonacci_generator(n):\n    a, b = 0, 1\n    while a < 2 * n - 1:\n        yield a\n        a, b = b, a + b", "category": "Python"}, {"instruction": "Write code to count the number of times a given pattern has occured in a given string.", "input": "Text: \u201cThis is a test string to practice coding. This string contains the pattern \u201cis\u201d", "output": "def countOccurrence(txt, pattern):\n  count = 0\n  for i in range(len(txt)):\n    if txt[i:i+len(pattern)] == pattern:\n      count += 1\n  return count", "category": "Python"}, {"instruction": "Implement a function to insert an element into a binary search tree.", "input": "tree = \n    5\n   / \\\n  2   8", "output": "def insert(self,val): \n\tif not self.root: \n\t\tself.root = Node(val) \n\telse: \n\t\tcurrent = self.root\n\t\twhile True: \n\t\t\tif val < current.val: \n\t\t\t\tif current.left: \n\t\t\t\t\tcurrent = current.left \n\t\t\t\telse: \n\t\t\t\t\tcurrent.left = Node(val) \n\t\t\t\t\tbreak\n\t\t\telif val > current.val: \n\t\t\t\tif current.right: \n\t\t\t\t\tcurrent = current.right \n\t\t\t\telse: \n\t\t\t\t\tcurrent.right = Node(val) \n\t\t\t\t\tbreak\n\t\t\telse: \n\t\t\t\tbreak", "category": "Python"}, {"instruction": "Generate a code to capitalize the first letter of each word of a given sentence.", "input": "text = \"This is a sample sentence.\"", "output": "def capitalize_first_letter(text):\n    words = text.split(' ')\n    capitalized_words = [word[0].upper() + word[1:] for word in words]\n    return ' '.join(capitalized_words)\n\ntext = \"This is a sample sentence.\"\ncapitalized_text = capitalize_first_letter(text)\nprint(capitalized_text) # Output: This Is A Sample Sentence.", "category": "Python"}, {"instruction": "Modify the program to support calculating Fibonacci numbers up to the nth number.", "input": "", "output": "def FibonacciSeries(n):\n    if n <= 0:\n        return [0]\n    elif n == 1:\n        return [0,1]\n    else:\n        series = [0,1]\n        for i in range(2, n):\n            curr_num = series[i-1] + series[i-2]\n            series.append(curr_num)\n        return series", "category": "Python"}, {"instruction": "Can you modify the program so that it prints out all words in the sentence along with their count?", "input": "\"The quick brown fox jumped over the lazy dog.\"", "output": "def print_words_with_count(sentence):\n  word_count = {}\n  words = sentence.split()\n  \n  for word in words:\n    if word not in word_count:\n      word_count[word] = 1\n    else:\n      word_count[word] += 1\n  \n  for word, count in word_count.items():\n    print(\"Word: %s  Count: %d\" % (word, count))", "category": "Python"}, {"instruction": "Change the following code to reduce its running time", "input": "for i in range(0, len(nums)):\n    if nums[i] == target:\n        return i", "output": "def find_target(nums, target): \n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    return -1\n\nif __name__ == '__main__':\n    nums = [2, 3, 5, 7]\n    target = 5\n    index = -1\n    for i in range(0, len(nums)):\n        if nums[i] == target:\n            index = i\n            break\n    if (index == -1):\n        print(\"Target not found!\")\n    else:\n        print(\"Target found at index:\", index)", "category": "Python"}, {"instruction": "Understand the parameters used in the following code and explain their purpose.", "input": "def doSomething(x, y, z): \n    pass", "output": "The parameters x, y and z are used in this function to represent arbitrary values. They can represent integers, floats, strings, lists, dictionaries, objects, etc. Depending on the specific implementation of this function, the parameters can take any meaning, representing any value. For example, it could be a function that performs an arithmetic operation, in which case x, y and z will represent the three numbers in the operation, or a function that processes a list, in which case x, y and z will represent the start index, end index and the list respectively.", "category": "Python"}, {"instruction": "Modify the following code to return the product of all numbers in a given list.", "input": "def product_list(numbers):\n    # Initialize the result\n    result = 1\n    # Iterate over the input numbers\n    for x in numbers:\n        result = result * x\n    # Return the result\n    return result", "output": "def product_list(numbers):\n    # Initialize the result\n    result = 1\n    # Iterate over the input numbers\n    for x in numbers:\n        result *= x\n    # Return the result\n    return result", "category": "Python"}, {"instruction": "Suggest a better data structure that can be used to store a large amount of data in a way that querying data is fast.", "input": "", "output": "A better data structure to store a large amount of data in a way that querying is fast would be a Hash Table. Hash Tables store data in an associative array, allowing for fast searches and retrieval of data.", "category": "Python"}, {"instruction": "Suggest improvements to the following code to optimize its performance.", "input": "requests = []\nfor i in range(100000000):\n    requests.append(i)", "output": "requests = []\nfor i in range(100000000):\n    requests.append(i)\n\n# use list comprehension to generate the list in one line\nrequests = [i for i in range(100000000)]", "category": "Python"}, {"instruction": "Generate random numbers 0 to 1000.", "input": "", "output": "import random\n\nfor i in range(10):\n    print(random.randint(0, 1000))", "category": "Python"}, {"instruction": "Create a Python script that calculates the surface area of a cylinder.", "input": "", "output": "def surface_area_cylinder(radius, height):\n    pi = 3.14\n    return 2*pi*radius*(radius + height)", "category": "Python"}, {"instruction": "Identify the error in the code given below.", "input": "# Sum of elements in a list\n\nmy_list = [1, 2, 3]\n\nsum = 0\n\nfor i in range(my_list):\n    sum += i\n\nprint(sum)", "output": "The error is in line 6 while using the range function. The range function expects the start and end parameters to be int type, but in this case the parameter passed to the range function is a list. This should be changed to range(len(my_list)) so that the code will iterate over the elements of the list instead.", "category": "Python"}, {"instruction": "Explain the use of *args and **kwargs in Python.", "input": "", "output": "*args and **kwargs are special syntax in Python used to pass a variable number of arguments to a function. *args denotes positional arguments, while **kwargs represents keyword arguments. The syntax allows functions to take arbitrary number of arguments and provide flexibility for functions to handle different arguments.", "category": "Python"}, {"instruction": "Write code to remove duplicates and maintain the order of elements in a given list.", "input": "list = [3, 1, 7, 5, 3, 8, 7]", "output": "def remove_duplicates(list): \n    new_list = []\n    for element in list:\n        if element not in new_list:\n            new_list.append(element)\n    return new_list\n\nprint(remove_duplicates(list))", "category": "Python"}, {"instruction": "Create a function that prints the binary representation of a number.", "input": "number = 5", "output": "def print_binary(number): \n    binary_string = \"\"\n    while number != 0: \n        remainder = number % 2\n        binary_string = str(remainder) + binary_string\n        number = number // 2\n    return binary_string \n\nprint(print_binary(number))", "category": "Python"}, {"instruction": "Given an input of numbers, sort the numbers in descending order.", "input": "arr = [6, 2, 5, 3, 9]", "output": "def sort_numbers_desc(arr): \n    for i in range(len(arr)): \n  \n        max_element = arr[i] \n        max_index = i \n  \n        for j in range(i+1, len(arr)): \n            if arr[j] > max_element: \n                max_element = arr[j] \n                max_index = j  \n  \n        arr[i], arr[max_index] = arr[max_index], arr[i] \n    return arr\n\nprint(sort_numbers_desc(arr))", "category": "Python"}, {"instruction": "Write a function to merge two sorted lists into one sorted list.", "input": "list1 = [3, 5, 7]\nlist2 = [1, 4, 6]", "output": "def merge_lists(list1, list2):\n    final_list = []\n    i, j = 0, 0\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            final_list.append(list1[i])\n            i += 1\n        else:\n            final_list.append(list2[j])\n            j += 1\n    \n    while i < len(list1):\n        final_list.append(list1[i])\n        i += 1\n\n    while j < len(list2):\n        final_list.append(list2[j])\n        j += 1\n    \n    return final_list\n\nprint(merge_lists(list1, list2))", "category": "Python"}, {"instruction": "Write a code to print the largest element of an array if the array contains all negative numbers.", "input": "arr = [-10, -20, -50, -30]", "output": "def largest_negative_number(arr): \n    largest = float('-inf')\n    for i in range(len(arr)): \n        if arr[i] > largest: \n            largest = arr[i] \n    return largest \n  \n# Driver Code \narr = [-10, -20, -50, -30] \n  \nprint(largest_negative_number(arr))", "category": "Python"}, {"instruction": "Compute the sum of a given array using a Python function.", "input": "arr = [1, 2, 3, 4]", "output": "def compute_sum(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n\nprint(compute_sum(arr))\n\nOutput:\n10", "category": "Python"}, {"instruction": "Write a Python function that generates a key-value pair for the given array.", "input": "arr = [1, 2, 3, 4]", "output": "def generate_key_value(arr):\n    key_val_pairs = {k:v for k,v in enumerate(arr)}\n    return key_val_pairs\n\nprint(generate_key_value(arr))\n\nOutput:\n{0: 1, 1: 2, 2: 3, 3: 4}", "category": "Python"}, {"instruction": "Write code to output the sum of the numbers 1-100.", "input": "", "output": "def sum_nums(n):\n    total = 0\n    for i in range(1,n+1):\n        total += i\n    return total\n\nprint(sum_nums(100))", "category": "Python"}, {"instruction": "Write a code to shuffle a list randomly in Python", "input": "", "output": "import random\n\nmy_list = [1, 2, 3, 4, 5]\n\nrandom.shuffle(my_list)\n\nprint(my_list)", "category": "Python"}, {"instruction": "Create a linked list with the following elements: 5, 6, 7, 8.", "input": "", "output": "class Node: \n    def __init__(self, data): \n        self.data = data\n        self.next = None\n\nclass LinkedList:\n\n    def __init__(self):  \n        self.head = None\n\n    def append(self, data):\n        new_node = Node(data)\n\n        if self.head == None:\n            self.head = new_node\n        else:\n            curr = self.head\n            while curr.next != None:\n                curr = curr.next\n            curr.next = new_node\n\nlist = LinkedList() \nlist.append(5) \nlist.append(6) \nlist.append(7) \nlist.append(8)", "category": "Python"}, {"instruction": "Implement a search() function that uses binary search to find a given element in an array.", "input": "", "output": "def search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1", "category": "Python"}, {"instruction": "Generate a random sample with size n from a given pandas DataFrame.", "input": "", "output": "import pandas as pd\n\ndef sample_df(df,n):\n    return df.sample(n)", "category": "Python"}, {"instruction": "Name a data structure that allows efficient insertion and deletion of elements at the beginning, middle and end.", "input": "", "output": "A doubly-linked list is a data structure that allows efficient insertion and deletion of elements at the beginning, middle and end. It consists of nodes, which contain data and two references (or links) each pointing to the previous and/or next node in the linked list. By traversing the list via these links it is possible to insert and delete elements anywhere in the list in constant time.", "category": "Python"}, {"instruction": "What is the most efficient way to search for an element in a list?", "input": "", "output": "The most efficient way to search for an element in a list is by using a binary search, which is a divide and conquer search algorithm that halves the search space after each iteration. Binary search is generally more efficient than linear search, as it has a time complexity of O(log n).", "category": "Python"}, {"instruction": "Explain why function scope is important in Python.", "input": "", "output": "Function scope is important in Python because it allows for the scoping of data to the specific environment in which the function was invoked. This is critical for ensuring that code runs correctly and that variables are isolated to the environment in which the associated function was called. Scoping also helps promote the common programming practice of modularity and encapsulation, as it allows you to create \"black-boxes\" that separate the internal implementation of a function from the external environment. Scoping also helps to ensure that only the variables and data which are intended to be used within a function are actually used within it, as any variables which are out of scope will be inaccessible.", "category": "Python"}, {"instruction": "Create a function which takes in a string and returns a dictionary that counts its character frequency.", "input": "", "output": "def char_frequency(string): \n    counts = {}\n    for char in string:\n        if counts.get(char) == None: \n            counts[char] = 1\n        else: \n            counts[char] += 1\n    return counts", "category": "Python"}, {"instruction": "What are the prerequisites for learning Python?", "input": "", "output": "The prerequisites for learning Python are basic knowledge of Computer Science concepts, knowledge of some programming language like C/C++, understanding of Object-Oriented Programming, and familiarity with some text editors like Notepad++, Visual Studio Code, etc.", "category": "Python"}, {"instruction": "Given a binary tree, write a function to serialize and deserialize the tree.", "input": "", "output": "def serialize(root):\n    if not root:\n        return \"None\"\n \n    serializedTree = root.val\n \n    serializedTree += \",\" + serialize(root.left)\n    serializedTree += \",\" + serialize(root.right)\n    return serializedTree\n \ndef deserialize(serializedTree):\n    q = deque(serializedTree.split(','))\n \n    def recur(q): \n        val = q.popleft()\n        if val == 'None':\n            return None\n        count = TreeNode(val)\n        count.left = recur(q)\n        count.right = recur(q)\n        return count\n \n    return recur(q)", "category": "Python"}, {"instruction": "Create a function that will take a string as an input and returns the number of upper case letters in it.", "input": "", "output": "def countUpperCase(string):\n    # Initialize counter variable\n    count = 0\n\n    # Loop through characters in string\n    for c in string:\n        # If character is upper case increment counter\n        if c.isupper():\n            count += 1\n\n    return count", "category": "Python"}, {"instruction": "Create a function to divide two numbers and return an integer result.", "input": "", "output": "def div(x, y):\n    if y == 0:\n        raise ValueError('Cannot divide by zero')\n    else:\n        return x // y", "category": "Python"}, {"instruction": "Write a loop in Python to find all numbers below 100 that are divisible by 7.", "input": "", "output": "for i in range(1,100):\n    if i % 7 == 0:\n        print(i, end=\" \")", "category": "Python"}, {"instruction": "Suggest a method to remove the pair of parentheses ( ) and the words inside them from the following python string.", "input": "my_string = 'This is (a sample) string with (parentheses)'", "output": "import re\n\nmy_string = 'This is (a sample) string with (parentheses)'\nop = re.sub(r'\\([^)]*\\)', '', my_string)\nprint(op)", "category": "Python"}, {"instruction": "Edit the program such that it prints the elements in a deck of cards in a specific format.", "input": "", "output": "# Symbols for the different ranks\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"Jack\", \"Queen\", \"King\", \"Ace\"]\n# Symbols for the different suits\nsuits = [\"Clubs\", \"Diamonds\", \"Hearts\", \"Spades\"]\n\n# Create a deck of cards as a 2D array\ndeck = []\nfor i in range(len(ranks)):\n    for j in range(len(suits)):\n        deck.append([ranks[i], suits[j]])\n\n# Print the elements in the deck array\nfor i in range(len(deck)):\n    rank = deck[i][0]\n    suit = deck[i][1]\n    print(\"Card %d: %s of %s\" % (i+1, rank, suit))", "category": "Python"}, {"instruction": "Design a program to partition an array into two subarrays such that the difference between the sum of the two subarrays is minimum.", "input": "Input Array: [1, 6, 5, 11, 3]", "output": "def min_partition_array(arr):\n    total = 0\n    for i in arr:\n        total += i\n    sum1, sum2 = 0, total\n    n = len(arr)\n    flag = [[False for i in range(total + 1)] for j in range(n + 1)]\n    flag[0][0] = True\n    for i in range(1, n + 1):\n        for j in range(total + 1):\n            if arr[i - 1] <= j:\n                flag[i][j] = flag[i - 1][j] or flag[i - 1][j - arr[i - 1]]\n            else:\n                flag[i][j] = flag[i - 1][j]\n    for j in range(0, int(total / 2) + 1):\n        if flag[n][j]:\n            sum1 = j\n            sum2 = total - j\n            break\n    return sum1, sum2\n \n# Partition [1, 6, 5, 11, 3]\nsubarr1, subarr2 = min_partition_array([1, 6, 5, 11, 3])\nprint ((subarr1, subarr2)) # prints (8, 9)", "category": "Python"}, {"instruction": "Create a for loop in Python to iterate over all items in a list.", "input": "my_list = [1, 2, 3, 4, 5]", "output": "for item in my_list:\n    print(item)", "category": "Python"}, {"instruction": "Find the longest substring with non-repeating characters", "input": "", "output": "def longest_substring(string):\n    # Initialize the max length and the substring\n    max_length = 0\n    substring = ''\n\n    # Create an empty set to store previously seen characters\n    char_set = set()\n\n    # Iterate over the string\n    for char in string:\n        # If the character hasn't already been seen,\n        if char not in char_set:\n            # add it to the set\n            char_set.add(char)\n            # and extend the substring\n            substring += char\n        else:\n            # if the character has already been seen\n            # check whether the current substring is longer than the current max length\n            if len(substring) > max_length:\n                max_length = len(substring)\n            # Clear the set and the substring\n            char_set.clear()\n            substring = ''\n\n    # Check the last substring\n    if len(substring) > max_length:\n        max_length = len(substring)\n    \n    return max_length", "category": "Python"}, {"instruction": "Design and implement a function that takes two lists of integers as parameters and returns the minimum difference between two elements of the two lists.", "input": "list1 = [2, 4, 7, 13] \nlist2 = [3, 8, 9, 14]", "output": "def min_difference(list1, list2):\n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n\n    for a in list1:\n        for b in list2:\n            # Update min_diff only if the difference \n            # between a and b is smaller than min_diff \n            min_diff = min(min_diff, abs(a - b))\n    \n    return min_diff", "category": "Python"}, {"instruction": "Edit the code to add an if statement that returns the string \"even\" if the value of the variable is even, or the string \"odd\" if the value of the variable is odd.", "input": "var number = 5\ndef even_odd(number):\n  #TODO", "output": "def even_odd(number):\n    if number % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"", "category": "Python"}, {"instruction": "Update the code to return a different string depending on the value of the variable test", "input": "var test = 3\ndef change(test):\n  #TODO", "output": "def change(test):\n    if test==1:\n        return \"One\"\n    elif test==2:\n        return \"Two\"\n    elif test==3:\n        return \"Three\"\n    else:\n        return \"Not Found\"", "category": "Python"}, {"instruction": "Write a function that switches the odd elements and the even elements in a list", "input": "def switch_list(mylist):\n    #TODO", "output": "def switch_list(mylist):\n    for i in range(0, len(mylist), 2):\n        temp = mylist[i]\n        mylist[i] = mylist[i + 1]\n        mylist[i + 1] = temp\n    return mylist", "category": "Python"}, {"instruction": "Develop an algorithm in Python to find the average of four numbers.", "input": "[2, 4, 8, 5]", "output": "def avg(numbers):\n sum = 0\n for num in numbers:\n  sum += num\n return sum/len(numbers)\n\naverage = avg([2, 4, 8, 5])\nprint(average)", "category": "Python"}, {"instruction": "Write a Python program to add the items of two given lists and create a new list.", "input": "[1, 2, 3], [4, 5, 6]", "output": "newList = [x + y for x, y in zip([1, 2, 3], [4, 5, 6])]", "category": "Python"}, {"instruction": "Create a Flask application to redirect the user to a given URL when the user input is valid.", "input": "", "output": "from flask import Flask, redirect, request\n\napp = Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n    if request.method == 'POST':\n        if request.form['userInput']:\n            url = 'https://www.example.com'\n            return redirect(url)\n    return '''\n    <form method=\"POST\">\n        <input type=\"text\" name=\"userInput\" placeholder=\"Type something..\" />\n        <input type=\"submit\" value=\"Submit\" />\n    </form>\n    '''\n\nif __name__ == \"__main__\":\n    app.run()", "category": "Python"}, {"instruction": "Create a program in Scala to calculate the average price of all products in the table \u201cProducts\u201d.", "input": "", "output": "import scala.io.Source\n\nval products = Source.fromFile(\"products.txt\").getLines.toList\nval avgPrice = products.map(p => p.split(\",\")(4).toDouble).sum/products.length\nprintln(s\"The average price is: $avgPrice\")", "category": "Python"}, {"instruction": "How would you create an API endpoint that returns a list of users?", "input": "", "output": "import flask\n\napp = flask.Flask(__name__)\n\n@app.route(\"/users\", methods=(\"GET\",))\ndef get_users():\n    users = [\n        {\"name\": \"John Smith\", \"age\": 45},\n        {\"name\": \"Tim Jones\", \"age\": 34},\n        {\"name\": \"Alice Jackson\", \"age\": 24}\n    ]\n    return flask.jsonify(users)", "category": "Python"}, {"instruction": "Suggest a way to create a linked list in python.", "input": "", "output": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def append(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n\n        current = self.head\n        while current.next:\n            current = current.next\n\n        current.next = new_node", "category": "Python"}, {"instruction": "Create a function to generate Fibonacci numbers less than 100.", "input": "", "output": "def generateFibonacci(num):\n    a = 0\n    b = 1\n    fib_sequence = []\n    while a < num:\n        fib_sequence.append(a)\n        a, b = b, a + b\n    return fib_sequence", "category": "Python"}, {"instruction": "Create a function to check whether a given value is in an array.", "input": "arr = [1,2,3,4]\nx = 2", "output": "def is_value_in_arr(arr, x):\n    if x in arr:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Create a class in Python that implements an algorithm for sorting a list of numbers.", "input": "list = [3, 2, 5, 1, 4]", "output": "class SortNum():\n    def selection_sort(self, list):\n        for i in range(len(list)):\n            min_idx = i\n            for j in range(i + 1, len(list)):\n                if list[min_idx] > list[j]:\n                    min_idx = j\n            list[i], list[min_idx] = list[min_idx], list[i]\n        return list", "category": "Python"}, {"instruction": "Given a list of phone numbers, write a code to find the one with the highest digits.", "input": "phone_numbers = [\"+440123456789\", \"+45987654321\", \"+441234567890\"]", "output": "highest = 0\nhighest_phone = None\n\nfor number in phone_numbers:\n    number_digits = ''.join(filter(str.isdigit, number))\n    if int(number_digits) > highest:\n        highest_phone = number\n        highest = int(number_digits)\n\nprint(f\"The phone number with highest digits is {highest_phone}.\")", "category": "Python"}, {"instruction": "Write a web scraper using Python", "input": "", "output": "import requests\nfrom bs4 import BeautifulSoup\n \n# Function to scrape for the specified HTML elements\ndef scrape(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.content, 'html.parser')\n\n    # Use the .find, .find_all, .select and .select_one methods to scrape website\n    titles = soup.find_all(\"title\")\n    content = soup.find_all(\"p\")\n    headings = soup.find_all(\"h1\")\n    links = soup.find_all(\"a\")\n \n    # Extract text from each element and store in variables\n    title = titles[0].text\n    content_p = [p.text for p in content]\n    headings_h1 = [h1.text for h1 in headings]\n    link_urls = [a.get(\"href\") for a in links]\n \n    # Print out each element\n    print(title)\n    print(\"\\n\")\n    print(\"Content paragraphs:\")\n    for paragraph in content_p:\n        print(paragraph)\n    print(\"\\n\")\n    print(\"Headings:\")\n    for heading in headings_h1:\n        print(heading)\n    print(\"\\n\")\n    print(\"Links and URLs:\")\n    for link in link_urls:\n        print(link)\n\n# Scrape the website below\nscrape('https://en.wikipedia.org/wiki/Python_(programming_language)')", "category": "Python"}, {"instruction": "Write an algorithm to calculate the maximum subarray sum", "input": "list_of_numbers = [-2, 3, 1, -4]", "output": "def max_subarray_sum(list_of_numbers): \n \n    max_so_far = 0\n    max_ending_here = 0\n \n    for i in range(0,len(list_of_numbers)): \n        max_ending_here = max_ending_here + list_of_numbers[i] \n        if (max_ending_here < 0): \n            max_ending_here = 0\n  \n        elif (max_so_far < max_ending_here): \n            max_so_far = max_ending_here \n              \n    return max_so_far", "category": "Python"}, {"instruction": "Encrypt the following string using a substitution cipher", "input": "thisisasupersecurestring", "output": "dnklkfaxvgpsvpytjimnzt", "category": "Python"}, {"instruction": "Write a function in Python that takes in a list and returns the second largest element", "input": "list_of_numbers = [5, 10, 15, 20]", "output": "def second_largest(list_of_numbers):\n    max_num = max(list_of_numbers)\n    sec_max_num = None\n    for num in list_of_numbers:\n        if num != max_num and (sec_max_num is None or sec_max_num < num):\n            sec_max_num = num\n    return sec_max_num", "category": "Python"}, {"instruction": "Create a GPT-2 model to generate text given a seed phrase.", "input": "", "output": "from transformers import GPT2Tokenizer, GPT2LMHeadModel\n \ntokenizer = GPT2Tokenizer.from_pretrained('gpt2')\nmodel = GPT2LMHeadModel.from_pretrained('gpt2')\n \ndef generate_text(seed_phrase):\n    input_ids = torch.tensor(tokenizer.encode(seed_phrase)).unsqueeze(0)\n    output_ids = model.generate(\n        input_ids=input_ids, \n        max_length=100, \n        do_sample=True\n    )\n    return tokenizer.decode(output_ids[0])", "category": "Python"}, {"instruction": "Train a machine learning model to predict the stock price of a company based on historical data.", "input": "Historical data for the company Apple Inc.", "output": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.linear_model import LinearRegression\n\n# Read the dataset\ndataset = pd.read_csv('Apple_Historical_Data.csv')\n\n# Get target and predictors\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n\n# Train the Linear Regression model\nlr_model = LinearRegression()\nlr_model.fit(X, y)\n\n# Predict stock price \nprediction = lr_model.predict(X)", "category": "Python"}, {"instruction": "Print a pyramid of stars that has 5 levels.", "input": "", "output": "for i in range(5):\n    for j in range(i+1):\n        print(\"*\", end=\" \")\n    print(\"\")", "category": "Python"}, {"instruction": "Using the following list of countries and their population, write a program that prints the name and population of the most populous country.", "input": "countries = [{'name': 'India', 'population': 1367030000}, {'name': 'China', 'population': 1406918015}, {'name': 'United States', 'population': 327000000}]", "output": "def find_most_populous_country(countries):\n    max_population = 0\n    most_populous_country = None\n    for country in countries:\n        if country['population'] > max_population:\n            max_population = country['population']\n            most_populous_country = country\n    return f'The most populous country is {most_populous_country[\"name\"]} with a population of {most_populous_country[\"population\"]}'\n\nprint(find_most_populous_country(countries)) # Output: The most populous country is China with a population of 1406918015", "category": "Python"}, {"instruction": "Given two strings, find out if one is a permutation of the other.", "input": "string1 = \"cat\"\nstring2 = \"act\"", "output": "def check_permutation(string1, string2):\n    if len(string1) != len(string2):\n        # The strings can't be permutations if they are different lengths\n        return False\n    \n    # Convert the strings to lists\n    list1 = list(string1)\n    list2 = list(string2)\n    \n    # Sort the lists to make comparison easier\n    list1.sort()\n    list2.sort()\n    \n    # Compare the elements in the sorted lists\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    \n    return True\n\n# Example\nprint(check_permutation(\"cat\", \"act\")) # Output: True", "category": "Python"}, {"instruction": "Identify a code snippet from the following four options.", "input": "def calculate_sum(numbers):\n    result = 0\n    for num in numbers:\n        result += num\n    return result\n\nfor option in ['A', 'B', 'C', 'D']:\n    print(option)", "output": "A is not a valid code snippet.\n\nB is not a valid code snippet.\n\nC is not a valid code snippet.\n\nD is not a valid code snippet.\n\nThe correct code snippet is:\n\ndef calculate_sum(numbers):\n    result = 0\n    for num in numbers:\n        result += num\n    return result", "category": "Python"}, {"instruction": "Create a for loop to iterate through a given list and print the list elements.", "input": "list_items = [2, 3, 4, 5, 6, 7, 8]", "output": "\"\"\"\nCreate a for loop to iterate through a given list and print the list elements\n\"\"\"\n\nlist_items = [2, 3, 4, 5, 6, 7, 8]\n\nfor item in list_items:\n    print(item)", "category": "Python"}, {"instruction": "Print only the odd numbers from the given list.", "input": "list_items = [2, 3, 4, 5, 6, 7, 8]", "output": "\"\"\"\nPrint only the odd numbers from the given list\n\"\"\"\n\nlist_items = [2, 3, 4, 5, 6, 7, 8]\n\nfor item in list_items:\n    if item % 2 != 0:\n        print(item)", "category": "Python"}, {"instruction": "Write a code that prints each word in a given string on a separate line.", "input": "", "output": "\"\"\"\nWrite a code that prints each word in a given string on a separate line\n\"\"\"\n\ndef print_words(string):\n    words = string.split() \n    for word in words:\n        print(word)\n\nif __name__ == '__main__':\n    string = \"This is a coding challenge\"\n    print_words(string)", "category": "Python"}, {"instruction": "Given a Dataframe, select the two columns as specified and store into a new separate Dataframe.", "input": "import pandas as pd \n  \ndata = {'Name':['Tom', 'nick', 'krish', 'jack'], \n        'Age':[20, 21, 19, 18] \n       } \n\ndf = pd.DataFrame(data)  \n\ncols = ['Name', 'Age']", "output": "import pandas as pd \n  \ndata = {'Name':['Tom', 'nick', 'krish', 'jack'], \n        'Age':[20, 21, 19, 18] \n       } \n\ndf = pd.DataFrame(data)  \n\ncols = ['Name', 'Age']\n\n# Creating new Dataframe  \ndf_new = df[cols] \n\nprint(df_new)", "category": "Python"}, {"instruction": "How can you optimized the following program's runtime?", "input": "def my_function(my_list):\n    output = []\n    for i in range(len(my_list)):\n        output.append(my_list[i] * 2)\n    return output", "output": "def my_function(my_list):\n    output = []\n    for i in range(0, len(my_list), 2):\n        output.append(my_list[i] * 2)\n    return output\nBy looping over the list in steps of two, the function will only have to go through half of the elements, thus optimizing the runtime.", "category": "Python"}, {"instruction": "Create a function in Python that takes a list and returns the first two elements that adds up to 0.", "input": "[1, 5, 2, -7, 3]", "output": "def zero_sum_pair(list):\n    # loop through the list \n    for i in range(len(list)): \n        for j in range(i + 1, len(list)): \n            if list[i] + list[j] == 0: \n                return [list[i], list[j]] \n    return None", "category": "Python"}, {"instruction": "Code an algorithm to find the closest pair of elements in a given array with respect to a given target number.", "input": "arr = [10, 22, 28, 29, 30, 40], target = 44", "output": "def closest_pair(arr, target): \n    min_difference = 999999\n    min_pair = (-1, -1)\n      \n    # Iterate through all elements \n    for i in range(len(arr)): \n          \n        # Loop through rest of elements \n        for j in range(i + 1, len(arr)): \n            diff = abs(arr[i] + arr[j] - target) \n          \n            # Check for maximum difference \n            if diff < min_difference: \n                min_difference = diff \n                min_pair = (i, j) \n      \n    return min_pair", "category": "Python"}, {"instruction": "Given an array of integers, find the maximum possible sum of a subarray within the array.", "input": "", "output": "def maxSubArraySum(arr):\n    maxsum = arr[0] \n    for i in range(len(arr)):\n        newSum = 0\n        for j in range(1, len(arr)):\n            newSum += arr[j]\n            if(newSum > maxsum):\n                maxsum = newSum\n    return maxsum", "category": "Python"}, {"instruction": "Find the sum of two integers without using + or - signs.", "input": "a = 7\nb = 5", "output": "def add(a, b): \n    # Iterate till there is no carry  \n    while (b != 0): \n          \n        # Carry now contains common  \n        # set bits of x and y \n        carry = a & b \n  \n        # Sum of bits of x and y where at  \n        # least one of the bits is not set \n        a = a ^ b \n  \n        # Carry is shifted by one so that  \n        # adding it to x gives the required sum \n        b = carry << 1\n          \n    return a", "category": "Python"}, {"instruction": "Generate a code to implement a binary search in an array with upto 1 million elements.", "input": "", "output": "def binary_search(arr, x): \n    l = 0\n    r = len(arr) - 1\n\n    while l <= r: \n        mid = l + (r - l) // 2\n        if arr[mid] == x: \n            return mid \n        elif arr[mid] < x: \n            l = mid + 1\n        else: \n            r = mid - 1\n  \n    return -1", "category": "Python"}, {"instruction": "Sum the numbers in the following array and print the result.", "input": "array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "total = 0\nfor row in array:\n    for element in row:\n        total += element\nprint(total)", "category": "Python"}, {"instruction": "Name a function in Python which can be used to convert a list to a dictionary.", "input": "", "output": "The function in Python which can be used to convert a list to a dictionary is the dict() function. This function takes in an iterable such as a list as an argument and returns a dictionary with the elements of the iterable as the keys and their index as the values.", "category": "Python"}, {"instruction": "Return the index of the first occurrence of an element in the given array.", "input": "arr = [2, 3, 3, 1, 5, 2]", "output": "def first_occurrence(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return i\n    return -1", "category": "Python"}, {"instruction": "What should I add in this function to generate a random number?", "input": "def generate_random():\n    # Your code here", "output": "import random\ndef generate_random():\n    return random.randint(0,100)", "category": "Python"}, {"instruction": "Create a function to generate random numbers from 0-99.", "input": "", "output": "import random\n\ndef random_number():\n    return random.randint(0,99)", "category": "Python"}, {"instruction": "What is the difference between a string in Python and a list?", "input": "", "output": "In Python, strings are immutable which means they can not be changed once created. On the other hand, a list is mutable, meaning the elements can be altered after the list is created. Additionally, strings are sequences of characters, whereas lists are sequences of any type of data.", "category": "Python"}, {"instruction": "Create a list in Python that contains the first 10 multiples of 3.", "input": "", "output": "multiples_list = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]", "category": "Python"}, {"instruction": "Write a Python program to format the following list of IP addresses.", "input": "ip_addresses = [\"192.168.1.1\", \"255.255.255.255\",\"8.8.8.8\"]", "output": "def format_IP_addresses(ip_addresses):\n    return [str(IPAddress(ip)) for ip in ip_addresses]", "category": "Python"}, {"instruction": "Generate a list of random alphanumeric strings of length 25.", "input": "", "output": "import random\nimport string\n\ndef random_strings_list(length):\n    alphanumeric_chars = string.ascii_letters + string.digits\n    strings_list = []\n    for _ in range(length):\n        random_string = ''.join(random.choices(alphanumeric_chars, k=25))\n        strings_list.append(random_string)\n    return strings_list", "category": "Python"}, {"instruction": "Write a Python program to compare two dictionaries by key.", "input": "", "output": "def compare_dicts_by_key(dic1, dic2):\n    if len(dic1) != len(dic2):\n        return False\n    for key in dic1:\n        if key not in dic2 or dic1[key] != dic2[key]:\n            return False\n    return True", "category": "Python"}, {"instruction": "Define a function in Python that calculates the sum of the sum of the elements of a nested list.", "input": "", "output": "def nestedListSum(nested_list):\n    total = 0\n    for sub_list in nested_list:\n        total += sum(sub_list)\n    return total", "category": "Python"}, {"instruction": "Write a Python program to implement Find-Max algorithm.", "input": "arr = [10, 7, 8, 11, 15]", "output": "def FindMax(arr):\n    curr_max = arr[0]\n    curr_index = 0\n    for i in range(len(arr)):\n        if arr[i] > curr_max:\n            curr_max = arr[i]\n            curr_index = i\n    return curr_max, curr_index\n\nif __name__ == \"__main__\":\n    arr = [10, 7, 8, 11, 15]\n    curr_max, curr_index = FindMax(arr)\n    print(\"Max element:\", curr_max)\n    print(\"Index of max element:\", curr_index)", "category": "Python"}, {"instruction": "Write a function to check whether a linked list contains a given value.", "input": "", "output": "def contains(value, head):\n    current_node = head\n    while current_node is not None:\n        if current_node.value == value:\n            return True\n        current_node = current_node.next\n    return False", "category": "Python"}, {"instruction": "Create a class in Python that can be used as a context manager.", "input": "", "output": "class myContextManager:\n    def __init__(self, name):\n        self.name = name\n        print(\"Context Manager initialized.\")\n        \n    def __enter__(self):\n        print(\"Entering context.\")\n        return self\n        \n    def __exit__(self, type, value, traceback):\n        print(f\"Exiting context: {self.name}\")", "category": "Python"}, {"instruction": "Define an iterator class in Python.", "input": "", "output": "class myIterator:\n    def __init__(self, data):\n        self.data = data\n        self.index = 0\n        \n    def __iter__(self):\n        return self\n    \n    def __next__(self):\n        if self.index >= len(self.data):\n            raise StopIteration\n        item = self.data[self.index]\n        self.index += 1\n        return item", "category": "Python"}, {"instruction": "Generate code to calculate the average age of a group of people.", "input": "[[\"Person\", \"Age\"],\n[\"Jim\",26],\n[\"John\", 39],\n[\"Tracy\",19]]", "output": "def average_age(people):\n    total_age = 0\n    for p, a in people:\n        total_age += a\n    return total_age/len(people)", "category": "Python"}, {"instruction": "Design a recursanve function in Python that prints a given string in reverse.", "input": "hello", "output": "def print_string_reverse(str):\n    if not str:\n        return\n    else:\n        print_string_reverse(str[1:])\n        print(str[0], end='')", "category": "Python"}, {"instruction": "Find all the prime numbers within a given range.", "input": "2, 20", "output": "def get_primes_in_range(a, b):\n    primes = []\n    for num in range(a, b + 1):\n        if all(num % i != 0 for i in range(2, num)):\n            primes.append(num)\n    return primes", "category": "Python"}, {"instruction": "Generate a five digit random string.", "input": "", "output": "import random\ndef generate_rand_str():\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=5))", "category": "Python"}, {"instruction": "Convert a date in the format \"MM/dd/yyyy\" to a timestamp.", "input": "04/23/2021", "output": "import time\ndef convert_date_to_timestamp(d):\n    return time.mktime(time.strptime(d, \"%m/%d/%Y\"))", "category": "Python"}, {"instruction": "Write a Python program to find all numbers from 1 to the given number n which are divisible by 6.", "input": "", "output": "def findDivisibleBySix(n):\n  result = []\n  for i in range(1, n+1):\n    if i % 6 == 0:\n      result.append(i)\n  return result", "category": "Python"}, {"instruction": "Create a function in Python to break down the number into its digits", "input": "", "output": "def break_down(n):\n    digit_list = [int(x) for x in str(n)]\n    return digit_list", "category": "Python"}, {"instruction": "Design a key-value database with Python for storing course information.", "input": "The database should contain the following fields: Course Name, Course ID, Course Description and Course Instructor.", "output": "import sqlite3\n\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\n# Create table\nc.execute('CREATE TABLE Course (course_name TEXT, course_id TEXT, course_description TEXT, course_instructor TEXT)')\n\n# Save (commit) the changes\nconn.commit()\n\n# Close the connection\nconn.close()", "category": "Python"}, {"instruction": "Generate pseudocode to solve the Fibonacci sequence.", "input": "", "output": "Function Fibonacci(n)\n  Declare f0, f1, fn\n  f0 = 0\n  f1 = 1\n\n  if n = 0\n    fn = f0\n  else if n = 1\n    fn = f1\n  else\n    for i = 2 to n\n      fn = f0 + f1\n      f0 = f1\n      f1 = fn\n    end for\n\n    return fn\nEnd Function", "category": "Python"}, {"instruction": "Construct a class in Python that can calculate the volume of a cube given its side length.", "input": "", "output": "class Cube(object):\n    \n    def __init__(self, side_length):\n        self.side_length = side_length\n    \n    \n    def calculate_volume(self):\n        return self.side_length * self.side_length * self.side_length", "category": "Python"}, {"instruction": "Describe the difference between lists and tuples", "input": "", "output": "The main difference between lists and tuples is that lists are mutable, meaning they can be changed, while tuples are immutable and cannot be changed. Lists are used when the data is expected to change, while tuples are used when the data is expected to stay the same. In addition, a list can contain any type of data, while a tuple can only contain one type of data. Lastly, a list uses square brackets, while a tuple uses parentheses.", "category": "Python"}, {"instruction": "Using Python, write code to check if a list contains duplicates or not.", "input": "list = [10, 20, 30, 40, 50]", "output": "def has_duplicates(list): \n    seen = set() \n    for item in list: \n        if item in seen: \n            return True \n        seen.add(item) \n    return False", "category": "Python"}, {"instruction": "Print the first element that occurs in the list and is divisible by 5.", "input": "list = [2, 3, 5, 10, 15, 30]", "output": "for element in list:\n    if element % 5 == 0:\n        print(element)\n        break", "category": "Python"}, {"instruction": "Construct a class that takes a string and capitalizes the first letter.", "input": "", "output": "class CapitalizedWord:\n    def __init__(self, word):\n        self.word = word\n    \n    def get_capitalized_word(self):\n        return self.word[0].upper() + self.word[1:]", "category": "Python"}]
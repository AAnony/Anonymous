[{"instruction": "Write Clojure code to solve the following problem.", "input": "Problem: Given a list of words and a target word, find the index of the target word in the list.\n\nExample: (\"apple\", \"banana\", \"citrus\") \"banana\"", "output": "(defn solve-problem [lst target]\n  (-> lst\n      (map #(first %) (map-indexed vector))\n      (filter #(= (second %) target))\n      (first)\n      (first)))", "category": "Python"}, {"instruction": "Design an algorithm to print out the prime numbers between 1 and 100.", "input": "", "output": "// Function to print prime numbers between 1 and 100 \nvoid print_prime_numbers() \n{ \n    bool prime[100+1]; \n    memset(prime, true, sizeof(prime));\n  \n    for (int p = 2; p*p < 100+1; p++) \n    {   \n        // If prime[p] is not changed, then it is a prime \n        if (prime[p] == true) \n        { \n            // Update all multiples of p \n            for (int i=p*p; i <= 100; i += p) \n                prime[i] = false; \n        } \n    } \n  \n    // Print all prime numbers \n    for (int p=2; p <= 100; p++) \n       if (prime[p]) \n          cout << p << \" \"; \n}", "category": "Python"}, {"instruction": "Construct an object-oriented program to print out the numerals from 1 to 10.", "input": "", "output": "class Program {\n  public static void main(String[] args) {\n    for (int i=1; i<=10; i++) {\n      System.out.println(i);\n    }\n  }\n}", "category": "Python"}, {"instruction": "Provide a solution for the following coding challenge:", "input": "Challenge: Given an array of integers, return the maximum sum of any contiguous subarray of the array.\n\nExample: [34, -50, 42, 14, -5, 86]", "output": "Solution:\n\n// Using Kadane's algorithm\nfunction maxSubArraySum(arr) {\n  let max_so_far = 0; \n  let max_ending_here = 0; \n \n  for (let i = 0; i < arr.length; i++) { \n    max_ending_here = max_ending_here + arr[i]; \n    if (max_ending_here < 0) {\n      max_ending_here = 0; \n    }\n    else if (max_so_far < max_ending_here) {\n      max_so_far = max_ending_here; \n    }\n  } \n  return max_so_far; \n}", "category": "Python"}, {"instruction": "Create a CSS rule for a class called \"main-text\" which sets the font weight of the text to bold and the font color to blue.", "input": "", "output": ".main-text {\n  font-weight: bold;\n  color: blue;\n}", "category": "Python"}, {"instruction": "Design an algorithm to traverse a tree in level-order.", "input": "", "output": "def traverseLevelOrder(root): \n    if root is None: \n        return\n  \n    # Create an empty queue for level order traversal \n    queue = [] \n  \n    # Enqueue root and initialize height \n    queue.append(root) \n  \n    while (len(queue) > 0): \n        # Print front of queue and remove it from queue \n        node = queue.pop(0) \n        print node.data, \n  \n        # Enqueue left child \n        if node.left is not None: \n            queue.append(node.left) \n  \n        # Enqueue right child \n        if node.right is not None: \n            queue.append(node.right)", "category": "Python"}, {"instruction": "Refactor the code to use a recursive algorithm instead of a loop to find the factorial of a given number.", "input": "", "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "category": "Python"}, {"instruction": "Update the following HTML page so it displays a simple form.", "input": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>My Form</title>\n  </head>\n  <body>\n    <!-- Your code goes here! -->\n  </body>\n</html>", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>My Form</title>\n  </head>\n  <body>\n    <form action=\"#\">\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" name=\"name\">\n        <label for=\"email\">Email:</label>\n        <input type=\"text\" name=\"email\">\n        <button>Submit</button>\n    </form>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Update the following JavaScript code to use object-oriented programming.", "input": "const calculator = {\n  number1: 0,\n  number2: 0,\n  add(num1, num2) {\n    return num1 + num2;\n  },\n  subtract(num1, num2) {\n    return num1 - num2;\n  },\n  multiply(num1, num2) {\n    return num1 * num2;\n  },\n  divide(num1, num2) {\n    return num1 / num2;\n  }\n}", "output": "class Calculator {\n  constructor(num1, num2) {\n    this.num1 = num1;\n    this.num2 = num2;\n  }\n  add() {\n    return this.num1 + this.num2;\n  }\n  subtract() {\n    return this.num1 - this.num2;\n  }\n  multiply() {\n    return this.num1 * this.num2;\n  }\n  divide() {\n    return this.num1 / this.num2;\n  }\n}", "category": "Python"}, {"instruction": "What is the Big-O notation of a given algorithm", "input": "", "output": "Big-O notation is a method of expressing the time complexity of an algorithm. It quotes the upper bound of an algorithm\u2019s running time in terms of a function of the size of the input data. This is useful for determining the efficacy of an algorithm as different inputs of different sizes require different run times from the same algorithm. Big-O notation is typically expressed in terms of the number of operations on the input data, with each scale increasing the complexity exponentially.", "category": "Python"}, {"instruction": "Create a program in Python that takes two strings as input and determines if they are anagrams of each other", "input": "string1=\"listen\";\nstring2=\"silent\";", "output": "def isAnagram(str1, str2): \n\n # convert both strings into lowercase \n str1 = str1.lower()\n str2 = str2.lower()\n  \n # sort both strings \n sortedStr1 = ''.join(sorted(str1)) \n sortedStr2 = ''.join(sorted(str2)) \n  \n # check if sorted strings are equal \n if sortedStr1 == sortedStr2: \n     return True\n else: \n     return False\n\nresult = isAnagram(string1, string2)\nprint(result)", "category": "Python"}, {"instruction": "Calculate the total distance traveled by an object with a given initial velocity and acceleration", "input": "Initial velocity = 12 m/s\n Acceleration = 2 m/s^2", "output": "total_distance = 36 m", "category": "Python"}, {"instruction": "Explain the concept of recurrence relations in algorithms", "input": "", "output": "A recurrence relation is an equation that defines a sequence of terms in terms of the values of the preceding terms. It is typically used to define a sequence in which each term depends on the values of previous terms. Recurrence relations are used in algorithms and computer programs to recursively calculate a sequence of values. For example, the Fibonacci sequence is a famous sequence whose terms are defined by recurrence relation F_(n+1) = F_n + F_(n-1). This means that each term in that sequence is the sum of the previous two terms.", "category": "Python"}, {"instruction": "Write an HTML page with a header that displays your name.", "input": "", "output": "<html>\n  <head>\n    <title>My webpage</title>\n  </head>\n  <body>\n    <h1>My name is John Smith</h1>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create a Java class Person with instance variables firstName and lastName.", "input": "", "output": "public class Person {\n  private String firstName;\n  private String lastName;\n\n  public Person(String firstName, String lastName) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n  }\n}", "category": "Python"}, {"instruction": "Generate an SQL query to get all the columns of the table \"Users\".", "input": "", "output": "SELECT * FROM Users", "category": "Python"}, {"instruction": "Using only the existing variables, edit the code to subtract the `total_price` by 10%.", "input": "total_price = 100\nfinal_price = total_price", "output": "final_price = total_price - (total_price * 0.10)", "category": "Python"}, {"instruction": "Edit the following C program so that it prints the factorial of a number.", "input": "#include <stdio.h>\n \nint main()\n{\n    int i, num;\n    \n    scanf(\"%d\", &num);", "output": "#include <stdio.h>\n \n//Computes the factorial of a given number\nint factorial(int num)\n{\n    if(num == 0 || num ==1)\n        return 1;\n    return num * factorial(num-1);\n}\n\nint main()\n{\n    int num;\n    scanf(\"%d\", &num);\n    printf(\"Factorial = %d\", factorial(num));\n    return 0;\n}", "category": "Python"}, {"instruction": "Generate a list of numbers starting from 10 to 50.", "input": "", "output": "myList = list(range(10,51))", "category": "Python"}, {"instruction": "Program to swap all even and odd elements in a given array.", "input": "my_list = [1, 2, 3, 4, 5, 6, 7, 8]", "output": "def swap_even_and_odd(my_list):\n for i in range(len(my_list)-1):\n if i % 2 == 0 and my_list[i] % 2 != 0:\n my_list[i], my_list[i+1] = my_list[i+1], my_list[i]\n return my_list\n\nprint(swap_even_and_odd(my_list))", "category": "Python"}, {"instruction": "You need to code a program that prints out the nth Fibonacci number.", "input": "n=10", "output": "def Fibonacci(n): \n if n<0: \n print(\"Incorrect input\") \n elif n==1: \n return 0 \n elif n==2: \n return 1 \n else: \n return Fibonacci(n-1)+Fibonacci(n-2) \n\nprint(Fibonacci(10))", "category": "Python"}, {"instruction": "You're asked to generate a unique list from a given list of duplicate integers.", "input": "input_list = [1, 1, 2, 3, 3, 3, 4, 4, 5, 5]", "output": "result_list = list(set(input_list))", "category": "Python"}, {"instruction": "Write a Python program to fill a matrix with random numbers.", "input": "rows = 4 \ncolumns = 3", "output": "matrix = [[randint(0, 99) for x in range(columns)] for y in range(rows)]", "category": "Python"}, {"instruction": "Your program needs to read a matrix of integers and then print out the sum of each column.", "input": "matrix = [[1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9]]", "output": "The sum of first column is 12 \nThe sum of second column is 15 \nThe sum of third column is 18", "category": "Python"}, {"instruction": "Using MongoDB, update the product price for a specific product.", "input": "product = {name: \u201ciPhone\u201d, price: 1000}", "output": "db.products.update({name:\"iPhone\"},{$set: {price: 1000}});", "category": "Python"}, {"instruction": "Write an SQL query to list the students' names who scored more than 90 in an exam.", "input": "", "output": "SELECT name\nFROM students\nWHERE score > 90;", "category": "Python"}, {"instruction": "Code a function that takes an array and counts the odd numbers in it.", "input": "input_array = [1, 2, 3, 4, 5]", "output": "def countOddNumbers(input_array): \n count = 0\n for num in input_array:\n  if num % 2 != 0: \n   count += 1\n return count\n\nprint(countOddNumbers(input_array))", "category": "Python"}, {"instruction": "Create a Java program to compute the total price of a customer's order based on item prices and quantities.", "input": "item_price = [30, 20, 15], quantity = [2, 4, 1]", "output": "public static int computeTotalPrice(int[] item_price, int[] quantity) {\n    int sum = 0;\n    for (int i = 0; i < item_price.length; i++) {\n        sum += item_price[i] * quantity[i];\n    }\n    return sum;\n}\n\nSystem.out.println(computeTotalPrice(item_price, quantity));", "category": "Python"}, {"instruction": "Create a JavaScript code snippet to check the validity of a credit card number.", "input": "credit_card_number = \u20181234567891234567\u2019", "output": "function validateCardNumber(credit_card_number) {\n  // remove any non-digits\n  var card_number = credit_card_number.replace(/\\D/g, '');\n\n   // add odd digits in even length strings or even digits in odd length strings\n  var sum = 0;\n  for (var i = 0; i < card_number.length; i++) {\n    var intVal = parseInt(card_number.substr(i, 1));\n    if (i % 2 == 0) {\n      intVal *= 2;\n      if (intVal > 9) {\n        intVal = 1 + (intVal % 10);\n      }\n    }\n    sum += intVal;\n  }\n  // If the result is divisible by 10, the card number is valid\n  return (sum % 10 == 0);\n}\n\nconsole.log(validateCardNumber(credit_card_number))", "category": "Python"}, {"instruction": "Describe succinctly the benefits of using a database for storing Big Data.", "input": "", "output": "Using a database for storing Big Data can provide many benefits, such as scalability, improved data consistency and integrity, improved data security, and decreased maintenance costs. Database technologies also facilitate the ability to perform various analytics techniques, such as mining and predictive analytics, on large datasets.", "category": "Python"}, {"instruction": "Create a string object in Java that stores the text \"Hello, World!\".", "input": "", "output": "String hello = \"Hello, World!\";", "category": "Python"}, {"instruction": "Insert a record into a database table named \u2018customers\u2019 with the following values.", "input": "ID: 123\nName: John Doe\nAge: 35", "output": "INSERT INTO customers (ID, Name, Age) VALUES (123, 'John Doe', 35);", "category": "Python"}, {"instruction": "Find the surface area of a cube with a side length of 6 cm.", "input": "", "output": "The surface area of a cube with side length of 6 cm is 216 cm2.", "category": "Python"}, {"instruction": "Create a function that takes two strings and out put the number of similar characters in both strings.", "input": "String 1: coding\nString 2: debugging", "output": "def char_count(str1, str2): \n    count = 0\n    for i in str1:\n        if i in str2: \n            count = count + 1\n    return count", "category": "Python"}, {"instruction": "Explore the data set provided and answer the following questions.", "input": "Data set:\n[\n  {'name': 'Alice',  'age': 20, 'profession': 'Teacher'},\n  {'name': 'Bob',  'age': 30, 'profession': 'Engineer'},\n  {'name': 'Craig',  'age': 40, 'profession': 'Doctor'},\n]", "output": "What is the oldest person in the data set?\nCraig (age 40) is the oldest person in the data set.", "category": "Python"}, {"instruction": "Using MySQL, find the 10 customers who have made the most orders.", "input": "", "output": "SELECT u.*, COUNT(o.id) as count\nFROM users u\nJOIN orders o ON o.user_id = u.id\nGROUP BY u.id\nORDER BY count DESC\nLIMIT 10;", "category": "Python"}, {"instruction": "Write a Java class named\u00a0\"Shape\" which has an abstract method named \"surfaceArea\".", "input": "", "output": "public abstract class Shape {\n    public abstract double surfaceArea();\n}", "category": "Python"}, {"instruction": "Your program needs to edit an existing string by replacing certain words with another word.", "input": "string = \"I am the biggest fan of coding\"", "output": "def replace_word(string, old_word, new_word):\n return string.replace(old_word, new_word)\n\nprint(replace_word(string, \"coding\", \"programming\"))", "category": "Python"}, {"instruction": "Develop a program that picks a random item from a given list of strings.", "input": "words = [\"Python\", \"programming\", \"language\"]", "output": "import random\ndef random_word(words):\n return random.choice(words)\n \nprint(random_word(words))", "category": "Python"}, {"instruction": "How would you convert a binary number to decimal in JavaScript?", "input": "", "output": "const binaryToDecimal = binaryString => parseInt(binaryString, 2);", "category": "Python"}, {"instruction": "Generate a program in Go for printing the first 10 prime numbers.", "input": "", "output": "func printFirstTenPrime(){\n    count := 0\n    for i := 1; ; i++ {\n        if (isPrime(i)) {\n            fmt.Printf(\"%d \", i)\n            count++;\n        }\n        if (count == 10) {\n            break\n        }\n    }\n    fmt.Println()\n}\n\nfunc isPrime(num int) bool {\n    for i := 2; i <= num/2; i++ {\n        if num%i == 0 {\n            return false\n        }\n    }\n    return true\n}", "category": "Python"}, {"instruction": "Rewrite the following program to make it print out the smallest number in a given list.", "input": "def smallestNumber(numbers):\n    largest = numbers[0]\n    for number in numbers:\n        if largest < number:\n            largest = number\n    return largest", "output": "def smallestNumber(numbers):\n    smallest = numbers[0]\n    for number in numbers:\n        if smallest > number:\n            smallest = number\n    return smallest", "category": "Python"}, {"instruction": "Write a function to calculate the standard deviation of data points in Python.", "input": "", "output": "def stdev(data):\n    avg = sum(data) / len(data)\n    total = 0\n    for x in data:\n        total += (x - avg) ** 2\n    return (total / (len(data) - 1)) ** 0.5", "category": "Python"}, {"instruction": "Create a class for a 2D vector in Java.", "input": "", "output": "public class Vector2D {\n    public double x, y;\n\n    public Vector2D(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    public double magnitude() {\n        return Math.sqrt(x * x + y * y);\n    }\n\n    public Vector2D add(Vector2D o) {\n        return new Vector2D(x + o.x, y + o.y);\n    }\n}", "category": "Python"}, {"instruction": "Print all members of the list that are greater than 10.", "input": "theList = [1, 15, 20, 9, 12, 13]", "output": "15", "category": "Python"}, {"instruction": "Convert the date 1972-05-18 to a UNIX timestamp.", "input": "", "output": "1255908800", "category": "Python"}, {"instruction": "Generate a function that takes a given list of strings and orders them by their lengths.", "input": "words = [\"Python\", \"programming\", \"language\"]", "output": "def sort_by_length(words):\n return sorted(words, key=len) \n\nprint(sort_by_length(words))", "category": "Python"}, {"instruction": "Write a CSS code to display a web page with a centered container of width 800px.", "input": "", "output": "body {\n  margin: 0;\n}\n\n#container {\n  margin: 0 auto;\n  width: 800px;\n}", "category": "Python"}, {"instruction": "Write a class in Python for representing a rectangle. This class should store the length and width of the rectangle, and be able to compute its area.", "input": "", "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n \n    def area(self):\n        return self.length * self.width", "category": "Python"}, {"instruction": "Write a query in MySQL for selecting all records from a table named \"students\" which have \"age\" greater than 15.", "input": "", "output": "SELECT * FROM students WHERE age > 15;", "category": "Python"}, {"instruction": "Create a JavaScript object that keeps track of event data such as time, attendees, and location.", "input": "", "output": "var event = {\n  time: \"12pm\",\n  attendees: [\"John\", \"Jane\", \"Jack\"],\n  location: \"New York\"\n};", "category": "Python"}, {"instruction": "Write a SQL query for creating a table named \"users\" with columns for \"name\", \"email\" and \"age\".", "input": "", "output": "CREATE TABLE users(\n name VARCHAR(255) NOT NULL,\n email VARCHAR(255) NOT NULL,\n age INT NOT NULL\n);", "category": "Python"}, {"instruction": "Create a boolean variable in Java, initialized to false.", "input": "", "output": "boolean variable = false;", "category": "Python"}, {"instruction": "Write a Python program to calculate the sum of two numbers entered by the user.", "input": "", "output": "num1 = float(input(\"Enter first number: \"))\nnum2 = float(input(\"Enter second number: \"))\n\n# Adding two numbers\nsum = num1 + num2\n\n# Display the sum\nprint('The sum of {0} and {1} is {2}'.format(num1, num2, sum))", "category": "Python"}, {"instruction": "Write a HTML code for a webpage that displays the headline \"Hello World!\".", "input": "", "output": "<html>\n <head>\n  <title>Hello World</title>\n </head>\n <body>\n  <h1>Hello World!</h1>\n </body>\n</html>", "category": "Python"}, {"instruction": "Write an SQL query for finding the average salary of employees in a table whose age is greater than 25.", "input": "", "output": "SELECT AVG(salary) FROM employees WHERE age > 25;", "category": "Python"}, {"instruction": "Write an SQL query that returns the sum of all orders sent by customers who were born in the month of May.", "input": "", "output": "SELECT SUM(OrderCost) \nFROM Orders o, Customers c \nWHERE o.CustomerId = c.CustomerId \nAND MONTH(c.DOB) = 5;", "category": "Python"}, {"instruction": "Create a MongoDB query to find documents with a field value within a certain range.", "input": "collectionName: shapes\nfieldName: area\nrange: [200, 500]", "output": "db.shapes.find( { area: { $gte: 200, $lte: 500 } } )", "category": "Python"}, {"instruction": "Create a CSS class with border radius and a background colour.", "input": "", "output": ".rounded-box {\n    border-radius: 8px;\n    background-color: #f5f5f5;\n}", "category": "Python"}, {"instruction": "Write a code that prints \u201cHello, World\u201d in a new line.", "input": "", "output": "\"\"\"\nWrite a code that prints Hello World\n\"\"\"\n\ndef print_hello_world():\n\tprint('Hello, World!')\n\nif __name__ == '__main__':\n\tprint_hello_world()", "category": "Python"}, {"instruction": "Suggest a command to print the contents of a directory", "input": "", "output": "ls", "category": "Python"}, {"instruction": "Suggest a command to find out the IP address of a domain", "input": "", "output": "dig <domain name> +short", "category": "Python"}, {"instruction": "Modify the given code to be able to print an asterisk pyramid as specified in the output.", "input": "rows = 5\n\nfor i in range(0, rows):\n    for j in range(0, i + 1):\n        print(\"*\", end=' ')\n    print(\"\\r\")", "output": "rows = 5\n\nfor i in range(0, rows):\n    for j in range(0, rows-i-1):\n        print(end=\" \")\n    for j in range(0, i + 1):\n        print(\"*\", end=' ')\n    print(\"\\r\")", "category": "Python"}, {"instruction": "Write a code to print a count-down timer.", "input": "", "output": "import time\n \nfor i in range(10, 0, -1):\n    print(i)\n    time.sleep(1)", "category": "Python"}, {"instruction": "Complete the following Python program for converting the given list into a dictionary.", "input": "list1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]\n\ndef to_dict(list1, list2):\n    ???", "output": "list1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]\n\ndef to_dict(list1, list2):\n    return dict(zip(list1, list2))", "category": "Python"}, {"instruction": "Write a pseudocode for a function to print a list of integers.", "input": "", "output": "FUNCTION printList(list)\n    FOR i = 0 TO list.length\n        PRINT list[i]\n    END FOR\nEND FUNCTION", "category": "Python"}, {"instruction": "Explain what an interpreter is and how it works in programming.", "input": "", "output": "An interpreter is a type of computer program that translates and executes code written in a programming language. The interpreter reads in the source code, analyses it and then executes the instructions. The interpreter executes the instructions line by line, stopping each time it encounters an error and displaying an error message. This helps the programmer quickly identify and fix errors in the code.", "category": "Python"}, {"instruction": "Edit this C++ code to remove all comments.", "input": "// This is a comment\n// This is another comment\nint main() {\n    /*\n    This is a multiline comment\n    */\n    std::cout << \"Hello World\";    \n    return 0;\n}", "output": "int main() {\n    std::cout << \"Hello World\";    \n    return 0;\n}", "category": "Python"}, {"instruction": "Write a short HTML page to display a welcome message.", "input": "", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Welcome</title>\n  </head>\n  <body>\n    <h1>Welcome!</h1>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a function that parses a json string into a Python dict.", "input": "", "output": "def parse_json_to_dict(json_string):\n    return json.loads(json_string)", "category": "Python"}, {"instruction": "Create an SQL query to retrieve all records from a table where the values of two columns do not match.", "input": "", "output": "SELECT * FROM table_name WHERE column_1 != column_2;", "category": "Python"}, {"instruction": "Create a JavaScript program to print out a pattern of some kind.", "input": "", "output": "for (let i=1; i<=4; i++){\n  let output = '';\n  for (let j=4; j>=i; j--){\n    output += '*';\n  }\n  console.log(output);\n}", "category": "Python"}, {"instruction": "Generate a Python program to perform matrix multiplication.", "input": "", "output": "# Python program to multiply two matrices \n# 3x3 matrix \nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n# 3x4 matrix\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\n# result is 3x4\nresult = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\n# iterate through rows of X\nfor i in range(len(X)):\n   # iterate through columns of Y\n   for j in range(len(Y[0])):\n       # iterate through rows of Y\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\nfor r in result:\n   print(r)", "category": "Python"}, {"instruction": "Create a regular expression to search for all sentences that start with \"I like\".", "input": "", "output": "^I like.*", "category": "Python"}, {"instruction": "Code a program that takes a list and removes all the duplicate numbers.", "input": "mylist = [1, 2, 3, 1, 2, 4, 5]", "output": "\"\"\"\nRemove all duplicate numbers from a list\n\"\"\"\n\ndef remove_duplicates(mylist):\n    mylist = list(dict.fromkeys(mylist))\n    return mylist\n\nif __name__ == '__main__':\n    mylist = [1, 2, 3, 1, 2, 4, 5]\n    mylist = remove_duplicates(mylist)\n    print(mylist)", "category": "Python"}, {"instruction": "Generate a 2D list of size 5x5 with random numbers between 0 and 9.", "input": "", "output": "\"\"\"\nGenerate a 2D list of size 5x5 with random numbers between 0 and 9\n\"\"\"\n\nimport random\n\ndef generate_2d_list(rows, columns):\n    matrix = [[random.randint(0, 9) for i in range(columns)] for j in range(rows)]\n    return matrix\n\nif __name__ == '__main__':\n    rows = 5\n    columns = 5\n    matrix = generate_2d_list(rows, columns)\n    print(matrix)", "category": "Python"}, {"instruction": "Write a code to create a FizzBuzz game, that prints the numbers from 1 to 50, replacing all the numbers divisible by 3 with the word \"Fizz\" and the numbers divisible by 5 with the word \"Buzz\".", "input": "", "output": "\"\"\"\nWrite a code to create a FizzBuzz game\n\"\"\"\n\ndef fizz_buzz():\n    for i in range(1, 51):\n        if i % 3 == 0 and i % 5 == 0:\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            print(\"Fizz\")\n        elif i % 5 == 0:\n            print(\"Buzz\")\n        else:\n            print(i)\n\nif __name__ == '__main__':\n    fizz_buzz()", "category": "Python"}, {"instruction": "Write a code to print a human-readable description of a given HTTP status code.", "input": "HTTP Status Code: 503", "output": "if(status_code == 503):\n    print(\"The 503 status code means that the web server is currently unable to handle the request due to a temporary overloading or maintenance of the server.\")", "category": "Python"}, {"instruction": "Given an array of integers, return an array of twice the values", "input": "arr = [1, 2, 3, 4]", "output": "def double_array(arr):\n    doubled_arr = []\n    for i in arr:\n        doubled_arr.append(i*2)\n    return doubled_arr", "category": "Python"}, {"instruction": "Implement a computationally efficient algorithm to solve the following problem", "input": "Given an array of integers, check if the sum of any two integers in the array is divisible by 10", "output": "def check_divisible(arr):\n    arr.sort()\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] + arr[j]) % 10 == 0:\n                return True\n    return False", "category": "Python"}, {"instruction": "Create a switch statement to provide different output depending on the given input", "input": "Input: \"5\"", "output": "switch (input) {\n case \"5\":\n  System.out.println(\"Input is 5\");\n  break;\n default:\n  System.out.println(\"No match\");\n  break;\n}", "category": "Python"}, {"instruction": "Add some markup to the following text", "input": "Hello World!", "output": "<p>Hello <strong>World</strong>!</p>", "category": "Python"}, {"instruction": "Generate a valid HTML page with the following styles and content", "input": "background color: yellow;\npadding: 10px;\nContent: \"Hello World!\"", "output": "<html>\n  <head>\n    <title>Hello World!</title>\n    <style>\n      body { \n        background-color: yellow; \n        padding: 10px;\n      }\n    </style>\n  </head>\n  <body>\n    <p>Hello World!</p>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Rearrange the array so each element is divisible by 3", "input": "[5,12,17,30,11]", "output": "[30, 12, 5, 17, 11]", "category": "Python"}, {"instruction": "Modify the program to read data from the column 'Comments' in the table 'Users'", "input": "#include <iostream>\n\nint main() {\n std::cout << \"Hello, World!\" << std::endl;\n return 0;\n}", "output": "#include <iostream>\n#include <string>\n\nint main() {\n    std::string comment;\n\n    // Read data from the \"Comments\" column in the \"Users\" table\n    std::cin >> comment;\n    std::cout << comment << std::endl;\n\n    return 0;\n}", "category": "Python"}, {"instruction": "Generate a valid C++ code to print the next 10 prime numbers", "input": "", "output": "#include <bits/stdc++.h> \nusing namespace std; \n  \nvoid printNextPrime(int n) \n{ \n    int prime;             \n    int flag; \n    int count = 0;         \n    prime = n + 1;         \n\n    while (count < 10) \n    { \n        flag = 0; \n        for (int i = 2; i <= sqrt(prime); i++) \n        { \n            if (prime % i == 0) \n            { \n                flag = 1; \n                prime++; \n                break; \n            } \n        } \n        if (flag == 0) \n        { \n            cout << prime << \" \"; \n            prime++; \n            count++; \n        } \n    } \n} \n  \nint main() \n{ \n    int n = 10; \n    cout << \"The next 10 prime numbers are : \\n\"; \n    printNextPrime(n); \n    return 0; \n}", "category": "Python"}, {"instruction": "Write a query in SQL to find the name of the employee with the largest salary.", "input": "TABLE employees (\nname TEXT, \nsalary INTEGER\n)", "output": "SELECT name FROM employees ORDER BY salary DESC LIMIT 1;", "category": "Python"}, {"instruction": "Write an Assembly language code to calculate the result of 3*5", "input": "", "output": "MOV AX, 3 ; Move 3 to AX\nMOV BX, 5 ; Move 5 to BX\nMUL BX ; Multiply AX and BX \n; The result is now stored in AX", "category": "Python"}, {"instruction": "Write a CSS code to style the following HTML", "input": "<div class='container'>\n  <h1>Welcome</h1>\n</div>", "output": ".container {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\nh1 {\n    font-size: 2em;\n    color: #0000FF;\n    font-weight: bold;\n    text-align: center;\n}", "category": "Python"}, {"instruction": "Design an algorithm that searches for a target element in an array", "input": "arr = [1,3,5,6,7]\ntarget = 6", "output": "def search(arr, target): \n    for i in range(len(arr)): \n        if arr[i] == target: \n            return i\n    return -1\n\nprint(\"Index of 6 is\", search(arr, target))", "category": "Python"}, {"instruction": "Generate HTML to highlight the third word in a  given string.", "input": "String: Hello world!", "output": "<span style=\"background-color: yellow\">Hello</span> <span>world</span>!", "category": "Python"}, {"instruction": "Design a neural network to classify the outcome of a coin toss.", "input": "", "output": "import numpy as np \nimport keras \nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation\n\nmodel = Sequential()\nmodel.add(Dense(2, input_dim=2))\nmodel.add(Activation('relu'))\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))\n\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=50, batch_size=32)", "category": "Python"}, {"instruction": "Output an array that contains all the unique elements from two input arrays", "input": "arr1 = [1, 2, 3], arr2 = [2, 3, 4]", "output": "def unique_elements(arr1, arr2):\n    res = [] \n    i = j = 0\n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] == arr2[j]: \n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]: \n            res.append(arr1[i]) \n            i += 1\n        else: \n            res.append(arr2[j]) \n            j += 1\n    res.extend(arr1[i:]) \n    res.extend(arr2[j:]) \n    return list(set(res))", "category": "Python"}, {"instruction": "Write a Python program to find the simple interest.", "input": "principle = 1000, rate of interest = 5%, time duration = 5 years", "output": "# Simple Interest\n\nprinciple = 1000; \nrate = 5; \ntime = 5; \n\n# Calculate simple interest \nSimple_Interest = (principle*time*rate)/100; \n\nprint(\"Simple Interest = %.2f\" %Simple_Interest);", "category": "Python"}, {"instruction": "Update the following code to return the key of the highest value in the dictionary.", "input": "sample_dict = {\"a\":1, \"b\":2, \"c\": 3}", "output": "sample_dict = {\"a\":1, \"b\":2, \"c\": 3}\n\ndef get_key_highest_value(dict):\n    highest_value = max(dict.values())\n    for key, value in dict.items():\n        if value == highest_value:\n            return key", "category": "Python"}, {"instruction": "Classify these numbers as even or odd", "input": "21, 2, 8", "output": "Odd, Even, Even", "category": "Python"}, {"instruction": "Write code in C++ for sorting a given array of integers", "input": "arr = [4,3,7,2,9,6]", "output": "#include<iostream>  \nusing namespace std; \n  \n// Function to sort given array  \nvoid sort(int arr[], int n)  \n{  \n    int i, j;  \n    for (i = 0; i < n-1; i++)      \n      \n    // Last i elements are already in place  \n    for (j = 0; j < n-i-1; j++)  \n        if (arr[j] > arr[j+1])  \n            swap(arr[j], arr[j+1]);  \n}  \n  \n/* Function to swap two numbers */\nvoid swap(int *a, int *b)  \n{  \n    int temp = *a;  \n    *a = *b;  \n    *b = temp;  \n}  \nint main()  \n{  \n    int arr[] = {4,3,7,2,9,6};  \n    int n = sizeof(arr)/sizeof(arr[0]);  \n  \n    sort(arr, n);  \n  \n    cout << \"Sorted array: \\n\";  \n    for (int i=0; i < n; i++)  \n        cout << arr[i] << \" \";  \n    cout << endl;  \n    return 0;  \n}", "category": "Python"}, {"instruction": "Create a three-dimensional array with all elements set to 0 of length 3\u00d72\u00d72.", "input": "", "output": "import numpy as np\n\nx = np.zeros((3,2,2))", "category": "Python"}, {"instruction": "Complete the following HTML code to create a hyperlink.", "input": "<a href=\"", "output": "<a href=\"http://www.example.com\">Link Text</a>", "category": "Python"}, {"instruction": "Create a function in R to determine the probability of rolling a dice with a given number of sides.", "input": "", "output": "dice_prob <- function(sides = 6)\n{\n  if (sides <= 2) {\n    stop(\"The number of sides should be greater than 2.\")\n  }\n  1/sides\n}", "category": "Python"}, {"instruction": "Write an SQL query to create a table called \"orders\" with columns for the order id and customer name.", "input": "", "output": "CREATE TABLE orders \n (\n   order_id INTEGER,\n   customer_name VARCHAR(255)\n );", "category": "Python"}, {"instruction": "Write a Swift program to convert a Python dictionary to a Swift dictionary.", "input": "py_dict = {\"a\": 1, \"b\": 2, \"c\": 3}", "output": "let sw_dict = py_dict as! [String: Int]", "category": "Python"}, {"instruction": "Create an HTML partial for a form that includes inputs for first name and last name.", "input": "", "output": "<form>\n  <label>First Name:</label> \n  <input type=\"text\" name=\"fname\">\n  <label>Last Name:</label> \n  <input type=\"text\" name=\"lname\">\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Generate a Vue.js component to display a table.", "input": "", "output": "Vue.component('Table', { \n  props: { \n    list: Array \n  }, \n  template: ` \n    <div> \n      <div> \n        <table border=\"1\">\n          <tr v-for=\"item in list\">\n            <td v-for=\"detail in item\">{{ detail }}</td>\n          </tr>\n        </table> \n      </div> \n    </div> \n  `\n})", "category": "Python"}, {"instruction": "Compose a CSS selector that creates buttons that appear on hover.", "input": "", "output": "button:hover {\n  opacity: 1;\n  background-color: #f1f1f1;\n}", "category": "Python"}, {"instruction": "Construct a CSS class for a text that needs to be centered on the page.", "input": "", "output": ".centerText \n{ \n    text-align: center; \n    margin: auto; \n}", "category": "Python"}, {"instruction": "Parse this string to extract the integer value.", "input": "value = 'The integer value is 12'", "output": "import re\nvalue = 'The integer value is 12'\n \nm = re.search(r'\\d+', value)\nprint(int(m.group(0)))", "category": "Python"}, {"instruction": "Develop a web page with React.", "input": "", "output": "import React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass MyFirstReactPage extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>This is my first React page!</h1>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <MyFirstReactPage />, \n  document.querySelector('#root')\n);", "category": "Python"}, {"instruction": "3D print a model of a house.", "input": "", "output": "import stl\nfrom mpl_toolkits import mplot3d\nfrom matplotlib import pyplot\n\n# Create the mesh\ndata = stl.mesh.Mesh.from_file(\"house.stl\")\n\n# 3D plot\npyplot.figure()\nax = pyplot.axes(projection ='3d')\nax.add_collection3d(mplot3d.art3d.Poly3DCollection(data.vectors))\n\n# Set size\nscale = data.points.flatten(-1)\nax.auto_scale_xyz(scale, scale, scale)\n\n# Save to file\npyplot.savefig('house.png', dpi = 600)", "category": "Python"}, {"instruction": "Convert the given string to a list containing the words in the string.", "input": "my_string = \"This is a string\"", "output": "my_list = my_string.split(\" \")", "category": "Python"}, {"instruction": "Suggest an expression that can be used to convert a given list to a set.", "input": "my_list = [1, 2, 3, 3, 3, 4]", "output": "my_set = set(my_list)", "category": "Python"}, {"instruction": "Create a class to store data of a patient's medical record.", "input": "", "output": "class PatientRecord:\n    def __init__(self, name, age, height, weight, medical_history):\n        self.name = name\n        self.age = age\n        self.height = height\n        self.weight = weight\n        self.medical_history = medical_history", "category": "Python"}, {"instruction": "Suggest a condition for the given if statement to make sure the given number is between 1 and 10.", "input": "number = 8", "output": "if 1 <= number <= 10:\n    print(\"The number is between 1 and 10\")", "category": "Python"}, {"instruction": "Write a PHP script to check if an input is a number or a string.", "input": "", "output": "<?php\n \n// Function to check if a given input is a number or a string.\nfunction is_number_or_string($input) {\n    if (is_numeric($input)) {\n        echo 'The input is a number.';\n    } else {\n        echo 'The input is a string.';\n    }\n}", "category": "Python"}, {"instruction": "Write a Swift code snippet to create a button with user specified text and size.", "input": "", "output": "let button = UIButton()\nbutton.setTitle(\"Button Title\", for: .normal)\nbutton.frame = CGRect(x: 0, y: 0, width: 100, height: 50)\nview.addSubview(button)", "category": "Python"}, {"instruction": "Write a Java program that reads an integer value N and prints all prime numbers less than N.", "input": "", "output": "public class PrimeNumbers {\n   public static void main(String[] args) {\n      int N = 25;\n      for (int i = 2; i < N; i++) { \n          int count = 0; \n          for (int j = 2; j <= Math.sqrt(i); j++) {\n              if (i % j == 0) {\n                  count++; \n                  break; \n              }\n          }\n          if (count == 0) {\n              System.out.print(i + \" \"); \n          }\n      }         \n   }\n}", "category": "Python"}, {"instruction": "Write a JavaScript function to check if a given input number is perfect or not. A perfect number is a number whose sum of divisors equals the number itself.", "input": "", "output": "function isPerfect(n) { \n    let sum = 0; \n    for (let i = 1; i < n; i++) { \n        if (n % i == 0) {\n            sum += i; \n        }\n    }\n    return sum === n;\n}", "category": "Python"}, {"instruction": "Re-write the following code using functional programming style.", "input": "x = range(1, 10)\nfor i in x:\n  print(i)", "output": "x = range(1, 10)\nlist(map(print, x))", "category": "Python"}, {"instruction": "Create a lambda function in Python to fetch the age of a person from their given DOB.", "input": "", "output": "import datetime\n\ncalculate_age = lambda dob: int((datetime.date.today() - dob).days / 365.25)", "category": "Python"}, {"instruction": "Create a HTML page which displays the result of multiplying two user-provided numbers.", "input": "", "output": "<!DOCTYPE html>\n<html>\n  <head>\n   <title>Multiply</title>\n  </head>\n  <body>\n    <h1>Multiplication Result</h1>\n    <form action=\"\" method=\"POST\">\n      Enter the first number: <input type=\"text\" name=\"num1\"><br>\n      Enter the second number: <input type=\"text\" name=\"num2\"><br>\n      <input type=\"submit\" value=\"Submit\">\n    </form>\n    <p>\n      <?php\n        if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n          $num1=$_POST['num1'];\n          $num2=$_POST['num2'];\n          echo \"Result: \".$num1*$num2;\n        }\n      ?>\n    </p>  \n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a SQL query to display the names and addresses of customers who have not made any purchases.", "input": "", "output": "SELECT Name, Address\nFROM Customers\nWHERE NOT EXISTS (SELECT * \n                  FROM Orders \n                  WHERE Customers.ID = Orders.CustomerID);", "category": "Python"}, {"instruction": "Create a website that displays the current day's weather forecast in Philadelphia.", "input": "", "output": "<html>\n<head>\n  <title>Weather App</title>\n</head>\n<body>\n  <h1>Weather in Philadelphia</h1>\n  <h2>Today</h2>\n  <div id=\"weather\">\n    <script>\n\n    // API call to get the weather forecast\n    fetch(\"https://api.weather.gov/gridpoints/PHI/20,34/forecast\")\n      .then(response => response.json())\n      .then(data => {\n        // store data in variables\n        let tempHigh = data.properties.periods[0].temperature\n        let tempLow = data.properties.periods[0].temperatureTrend\n        let weatherDescription = data.properties.periods[0].shortForecast\n        let windSpeedInMPH = data.properties.periods[0].windSpeed\n        let windDirection = data.properties.periods[0].windDirection\n        \n        // create HTML string for displaying the forecast\n        let forecastHTML = `\n          <p><strong>Today's High:</strong> ${tempHigh}&deg;F</p>\n          <p><strong>Today's Low:</strong> ${tempLow}&deg;F</p>\n          <p><strong>Description:</strong> ${weatherDescription}</p>\n          <p><strong>Wind Speed:</strong> ${windSpeedInMPH} MPH, ${windDirection}</p>\n        `\n        // display forecast on the page\n        document.getElementById('weather').innerHTML = forecastHTML;\n      });\n\n    </script>\n  </div>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create an array of objects that contains the inventory of a store.", "input": "Inventory of a store:\n- Apple: 10\n- Orange: 20\n- Banana: 5\n- Grapes: 15", "output": "var inventory = [ \n    {item: 'Apple', qty: 10}, \n    {item: 'Orange', qty: 20}, \n \u00a0\u00a0 {item: 'Banana', qty: 5}, \n \u00a0\u00a0 {item: 'Grapes', qty: 15} \n];", "category": "Python"}, {"instruction": "Generate Fibonacci numbers up to 50 using a while loop.", "input": "", "output": "a = 0\nb = 1\nprint(a)\nprint(b)\nwhile b < 50:\n    c = a + b\n    a = b\n    b = c\n    print(c)", "category": "Python"}, {"instruction": "Create a SQL query to retrieve all employees whose age is equal to or greater than 25 and write the query in the output field.", "input": "", "output": "SELECT * FROM employees WHERE age >= 25;", "category": "Python"}, {"instruction": "Create a function that takes in a string and returns a dictionary with each word as a key and its count as the value.", "input": "string = \"This is a test string\"", "output": "def word_count_dict(string):\n    word_list = string.split()\n    word_dict = {}\n    for word in word_list:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    return word_dict\n\nstring = \"This is a test string\"\nprint(word_count_dict(string))", "category": "Python"}, {"instruction": "Using a for loop, count the number of words in the below string.", "input": "string = \"This is a test string\"", "output": "count = 0\nfor word in string.split():\n    count += 1\n\nprint(\"Number of words:\", count)", "category": "Python"}, {"instruction": "Write an HTML code to create a simple two-column table and fill it with 4 random colors.", "input": "", "output": "<table>\n  <thead>\n    <th>Color 1</th>\n    <th>Color 2</th>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"background-color: #e12b33;\">&nbsp;</td>\n      <td style=\"background-color: #2771e1;\">&nbsp;</td>\n    </tr>\n    <tr>\n      <td style=\"background-color: #f3af02;\">&nbsp;</td>\n      <td style=\"background-color: #30e717;\">&nbsp;</td>\n    </tr>\n  </tbody>\n</table>", "category": "Python"}, {"instruction": "Write a Java program to convert a given integer value to octal.", "input": "", "output": "public class Octal { \n   \n    public static void main(String[] args) { \n          \n        int num = 21; \n        String octal = Integer.toOctalString(num); \n        System.out.println(\"Octal: \" + octal); \n    } \n}", "category": "Python"}, {"instruction": "Write an SQL query to list all the customers who have purchased any item from the \u201celectronics\u201d category.", "input": "", "output": "SELECT customers.* \nFROM customers, products, order_items \nWHERE customers.id = order_items.customer_id \nAND order_items.product_id = products.id \nAND products.category = 'electronics';", "category": "Python"}, {"instruction": "Write a C program to output all odd numbers from 0 to 500.", "input": "", "output": "#include <stdio.h> \n \nint main() \n{ \n    int i = 0; \n  \n    // Iterate from 0 to 500 \n    while (i <= 500) { \n        if (i % 2 != 0) \n            printf(\"%d \", i); \n  \n        i++; \n    } \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Write a html code snippet to create a simple ordered list containing 5 economic terms.", "input": "", "output": "<ol>\n    <li>GDP - Gross Domestic Product</li>\n    <li>GNP - Gross National Product</li>\n    <li>Inflation</li>\n    <li>Deflation</li>\n    <li>Econometrics</li>\n</ol>", "category": "Python"}, {"instruction": "Write a CSS program to change the text color of a given element from red to blue.", "input": "<div>This is an example text</div>", "output": "<div style=\"color: blue;\">This is an example text</div>", "category": "Python"}, {"instruction": "What are the differences between data types int and float in Java?", "input": "", "output": "In Java, data types int and float represent different levels of precision: int is for whole numbers, while float is for decimal numbers. Int has a 32-bit size, which allows for whole numbers from -2^31 to 2^31-1. Float is 32-bit and can refer to decimal values of up to seven digits. Float can also be expressed in scientific notation. In addition, int is an integer type, while float is a floating-point type. Both int and float can be used in arithmetic operations in Java.", "category": "Python"}, {"instruction": "Write a loop to print out all the elements in the given dictionary.", "input": "my_dict = {\"a\": 1, \"b\": 2, \"c\": 3}", "output": "for key, value in my_dict.items():\n    print(f\"{key}:{value}\")", "category": "Python"}, {"instruction": "Define a function which can generate a list of 15 random numbers between 1 to 30.", "input": "", "output": "\"\"\"\nDefine a function which can generate a list of 15 random numbers between 1 to 30\n\"\"\"\nimport random\n\ndef generate_random_list():\n    return [random.randint(1,30) for _ in range(15)]\n    \nif __name__ == '__main__':\n    print(generate_random_list())", "category": "Python"}, {"instruction": "Create a regex pattern to extract all phone numbers from a given string.", "input": "", "output": "pattern = r'\\d{3}-\\d{3}-\\d{4}|\\(\\d{3}\\)\\s\\d{3}-\\d{4}|\\d{10}|\\d{3}\\s\\d{3}\\s\\d{4}'", "category": "Python"}, {"instruction": "Create a dictionary that has the keys and values of a given list.", "input": "my_list = [2, 4, 6, 8]", "output": "my_list = [2, 4, 6, 8]\n\n# Create an empty dict \nmy_dict = {}\n\n# Add elements to the dict\nfor i in my_list:\n    my_dict[i] = i**2\n\nprint(my_dict) # prints {2: 4, 4: 16, 6: 36, 8: 64}", "category": "Python"}, {"instruction": "Write an algorithm that returns the word with the most vowels in the sentence.", "input": "The quick brown fox jumps over the lazy dog.", "output": "def most_vowels(sentence):\n    # Split sentence into words\n    words = sentence.split(\" \")\n    # Keep track of our highest vowel count and the associated word\n    highest_count = 0\n    most_vowels_word = \"\"\n    # Count the number of vowels in each word\n    for word in words:\n        num_vowels = 0\n        for c in word:\n            if c.lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                num_vowels += 1\n        # Store word if it has the highest vowel count\n        if num_vowels > highest_count:\n            highest_count = num_vowels\n            most_vowels_word = word\n    return most_vowels_word\n\nif __name__ == \"__main__\":\n    print(most_vowels(\"The quick brown fox jumps over the lazy dog.\")) # prints brown", "category": "Python"}, {"instruction": "Write a function to calculate the value of the mathematical series:", "input": "x = 2", "output": "def calculate_series(x):\n    \"\"\" Calculate the value of the mathematical series \"\"\"\n    result = 0\n    for i in range(1, x + 1):\n        result += (1 / (i * i))\n    return result\n    \nif __name__ == \"__main__\":\n    result = calculate_series(2)\n    print(result) # prints 1.25", "category": "Python"}, {"instruction": "How many are hypernyms of the given word?", "input": "cat", "output": "from nltk.corpus import wordnet\n\n# get the synset object \nsynset = wordnet.synsets('cat')[0]\n\n# find the hypernyms and count the number of hypernyms\ncount = len(list(synset.hypernyms()))\n\nprint(\"There are {} hypernyms of the word 'cat'.\".format(count)) # prints There are 6 hypernyms of the word 'cat'.", "category": "Python"}, {"instruction": "Create a FizzBuzz program.", "input": "", "output": "\"\"\"\nCreate a FizzBuzz program\n\"\"\"\nfor num in range(1, 101):\n    if num % 3 == 0 and num % 5 == 0:\n        print(\"FizzBuzz\")\n    elif num % 3 == 0:\n        print(\"Fizz\")\n    elif num % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print(num)", "category": "Python"}, {"instruction": "Calculate the total area of a circle given the radius.", "input": "radius = 5", "output": "radius = 5\n\nimport math\n\n# calculate the area\narea = math.pi * radius ** 2\n\nprint(\"The total area of the circle is \"+str(area)) # prints The total area of the circle is 78.53981633974483", "category": "Python"}, {"instruction": "Keep only the characters from the input string that have a numerical value from 0 to 9.", "input": "The number is 559", "output": "input_str = \"The number is 559\"\n\noutput_str = \"\".join([i for i in input_str if i.isnumeric()])\n\nprint(output_str) # prints 559", "category": "Python"}, {"instruction": "Suggest how to optimize the following MySQL query.", "input": "SELECT * FROM customers WHERE last_name LIKE 'Smith';", "output": "SELECT * FROM customers WHERE last_name='Smith';", "category": "Python"}, {"instruction": "Create a script to fetch the information from the following API endpoint.", "input": "https://dummyapi.io/data/api/user", "output": "import requests\n\n# Make the API call\nurl = \"https://dummyapi.io/data/api/user\"\nresponse = requests.get(url)\n\n# Fetch the information\nif response.status_code == 200:\n    data = response.json()\n    username = data['username']\n    email = data['email']\n    # Print the obtained info\n    print(f'Username: {username}, Email: {email}')", "category": "Python"}, {"instruction": "Suggest what should be done to make the following C++ code more efficient.", "input": "int arr[5];\nfor(int i=0; i<5; i++){\n    arr[i] = i;\n}", "output": "int arr[5];\nfor(int i=0; i<5; i++){\n    arr[i] = i*i;\n}", "category": "Python"}, {"instruction": "Create a class in Python that keeps the track records of animals in the zoo.", "input": "", "output": "class Zoo:\n    def __init__(self):\n        self.records = {}\n\n    def add_record(self, animal, count):\n        if animal in self.records:\n            self.records[animal] += count\n        else:\n            self.records[animal] = count\n\n    def get_count(self, animal):\n        if animal in self.records:\n            return self.records[animal]\n        else:\n            return 0", "category": "Python"}, {"instruction": "Describe how to handle a POST request in Express.", "input": "", "output": "const express = require('express');\nconst app = express();\n\napp.post('/myroute', (request, response) => {\n  // Handle the POST request here\n});", "category": "Python"}, {"instruction": "Suggest a better design for the following JavaScript code to match the DRY principle.", "input": "let calorie_per_apple = 100;\nlet calorie_per_banana = 200;\nlet calorie_per_pear = 150;\n\nlet total_calorie = calorie_per_apple + calorie_per_banana + calorie_per_pear;", "output": "let fruits = {\n  \"apple\": 100,\n  \"banana\": 200,\n  \"pear\": 150\n}\n\nlet total_calorie = 0;\nObject.values(fruits).forEach(calorie => {\n  total_calorie += calorie;\n})", "category": "Python"}, {"instruction": "Create a SQL query to return the information about the student's name, grade and city with the grade below 50.", "input": "", "output": "SELECT name, grade, city\nFROM students\nWHERE grade < 50;", "category": "Python"}, {"instruction": "Write a function to find the first prime number after the given number.", "input": "num = 5", "output": "def find_next_prime(num):\n    # check for all the numbers starting from num\n    for number in range(num+1, num + 1000):\n        # iterate from 2 to number\n        for factor in range(2, number):\n            # check if the number is prime\n            if number % factor == 0:\n                break\n        else:\n            # return the first prime\n            return number\n\nif __name__ == \"__main__\":\n    print(find_next_prime(5)) # prints 7", "category": "Python"}, {"instruction": "Split a given string according to the given delimiter.", "input": "my_string = \"This is a test string\"\ndelimiter = \" \"", "output": "my_string = \"This is a test string\"\ndelimiter = \" \"\n\n# use str.split() to split the string\nsplitted = my_string.split(delimiter)\n\nprint(splitted) # prints ['This', 'is', 'a', 'test', 'string']", "category": "Python"}, {"instruction": "Store the output of the following statement into a variable called `result`.", "input": "a = [1, 2, 3]", "output": "result = a[::-1]", "category": "Python"}, {"instruction": "Write a CSS rule to set the font family of all <h1> tags to be \"Roboto\".", "input": "", "output": "h1 {\n  font-family: 'Roboto';\n}", "category": "Python"}, {"instruction": "Compute the modulus of 12/5 using a Lua function.", "input": "", "output": "function modulus(dividend, divisor)\n  return dividend % divisor\nend\n\nmodulus(12, 5)", "category": "Python"}, {"instruction": "Design a HTML page with a header and 2 sections", "input": "", "output": "<html>\n <head>\n  <title>MyPage</title>\n </head>\n <body>\n  <header>\n   <h1>Welcome to My Page</h1>\n  </header>\n  <section>\n   Content in Section 1\n  </section>\n  <section>\n   Content in Section 2\n  </section>\n </body>\n</html>", "category": "Python"}, {"instruction": "Write a query in MongoDB to find all documents with the value of field \"city\" as \"Berlin\".", "input": "", "output": "db.collection.find({\"city\": \"Berlin\"})", "category": "Python"}, {"instruction": "Make a C# program which prints the current date and time.", "input": "", "output": "using System;\n\npublic class Program\n{\n   public static void Main()\n   {\n      Console.WriteLine(DateTime.Now);\n   }\n}", "category": "Python"}, {"instruction": "Generate a Python function to get the index of a given string from a list of strings.", "input": "list_of_strings = [\"apple\", \"banana\", \"cherry\"]", "output": "def find_index(list_of_strings, target_string):\n    for i, string in enumerate(list_of_strings):\n        if string == target_string:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Create a MySQL query to get the item names and their respective prices from the table \"Orders\".", "input": "", "output": "SELECT ItemName, ItemPrice FROM Orders;", "category": "Python"}, {"instruction": "Design a CSS layout for a div with height of 50px, width of 100px and a rounded-corner of 10px.", "input": "", "output": "div {\n height: 50px;\nwidth: 100px;\nborder-radius: 10px;\n}", "category": "Python"}, {"instruction": "Add the following content to the existing MongoDB database.", "input": "{\n   name: \"John Doe\",\n   age: 25,\n   city: \"New York\"\n}", "output": "import pymongo\n\nclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\ndb = client[\"mydatabase\"]\ncollection = db[\"mycollection\"]\n\ncollection.insert_one({\n    \"name\": \"John Doe\",\n    \"age\": 25,\n    \"city\": \"New York\"\n})", "category": "Python"}, {"instruction": "Calculate the result of the expression 5*10-3 in PHP.", "input": "", "output": "$result = 5 * 10 - 3;", "category": "Python"}, {"instruction": "Create a CSS class for an element with the size of 100px X 100px and a background color of yellow.", "input": "", "output": ".myElement {\n width: 100px;\n height: 100px;\n background-color: yellow;\n}", "category": "Python"}, {"instruction": "Create a tensorflow model that recognizes handwritten digits from the MNIST dataset.", "input": "", "output": "import tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Flatten\nfrom tensorflow.keras.models import Sequential\n\n# Load the MNIST data\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n\n# Normalizing the intensities\nx_train = x_train/255\nx_test = x_test/255\n\n# Build the model\nmodel = Sequential()\nmodel.add(Flatten(input_shape=(28, 28)))  # flattening input data\nmodel.add(Dense(128, activation='relu'))  # hidden layers\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))  # output layer\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(x_train, y_train, validation_split=0.2, epochs=3)\n\n# Evaluate the model\nmodel.evaluate(x_test, y_test)", "category": "Python"}, {"instruction": "Create an HTML page that displays two columns consisting of the numbers 1 to 10.", "input": "", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Two columns of numbers from 1 to 10</title>\n  </head>\n  <body>\n    <h1>Two columns of numbers from 1 to 10</h1>\n    <table>\n      <tr>\n        <th>Column 1</th>\n        <th>Column 2</th>\n      </tr>\n      <tr>\n        <td>1</td>\n        <td>6</td>\n      </tr>\n      <tr>\n        <td>2</td>\n        <td>7</td>\n      </tr>\n      <tr>\n        <td>3</td>\n        <td>8</td>\n      </tr>\n      <tr>\n        <td>4</td>\n        <td>9</td>\n      </tr>\n      <tr>\n        <td>5</td>\n        <td>10</td>\n      </tr>\n    </table>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create a Boolean expression in Python to check if a number is a multiple of 5.", "input": "", "output": "# Boolean expression\n# Checks to see if x is a multiple of 5\ndef is_multiple_of_5(x):\n    return x % 5 == 0", "category": "Python"}, {"instruction": "Create a HashMap in Java which contains the name of fruits and their corresponding prices.", "input": "Mango - $2.4, Orange - $1.4, Apple - $3.2", "output": "import java.util.HashMap; \n\npublic class FruitMap \n{ \n    public static void main(String args[]) \n    { \n  \n        // Creating a HashMap of fruit name \n        // and their corresponding prices \n        HashMap<String, Double> fruitMap = new HashMap<>(); \n  \n        // Mapping string values to double \n        fruitMap.put(\"Mango\", 2.4); \n        fruitMap.put(\"Orange\", 1.4); \n        fruitMap.put(\"Apple\", 3.2); \n  \n        // Displaying the HashMap \n        System.out.println(fruitMap); \n    } \n}", "category": "Python"}, {"instruction": "Write a Java program to perform a linear search on a given array to find a given number.", "input": "array = [23, 54, 12, 64, 76, 13, 45]\nto_find = 45", "output": "public class LinearSearch \n{ \n    // This function returns index of element x in arr[] \n    static int search(int arr[], int x) \n    { \n        int n = arr.length; \n        for(int i = 0; i < n; i++) \n        { \n            if(arr[i] == x) \n                return i; \n        } \n        return -1; \n    } \n  \n    public static void main(String args[]) \n    { \n        int arr[] = {23, 54, 12, 64, 76, 13, 45}; \n        int x = 45; \n  \n        int index = search(arr, x); \n        if (index == -1) \n            System.out.println(\"Element not present\"); \n        else\n            System.out.println(\"Element found at index \" + index); \n    } \n}", "category": "Python"}, {"instruction": "Underline the correct option regarding the statement below\nA Python code to print the first 5 Fibonacci numbers is:", "input": "", "output": "A. print(1, 1, 2, 3, 5) \nB. print(0, 1, 2, 3, 5) \nC. print(1, 1, 3, 5, 8) \nD. print(0, 1, 1, 2, 3)\n\nD. print(0, 1, 1, 2, 3)", "category": "Python"}, {"instruction": "Manipulate a given list in Python where every element in the list has to be doubled.", "input": "my_list = [1, 2, 3, 4]", "output": "my_list = [2, 4, 6, 8]", "category": "Python"}, {"instruction": "Find a Python solution for this leetcode problem.", "input": "Given an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.", "output": "def twoSum(nums, target):\n    numDict = dict()\n    for index, num in enumerate(nums):\n        if num in numDict.keys():\n            return [numDict[num], index]\n        else:\n            numDict[target-num] = index", "category": "Python"}, {"instruction": "Build a state machine to simulate a vending machine.", "input": "", "output": "// States\nconst IDLE = 'IDLE';\nconst COIN_INPUT = 'COIN_INPUT';\nconst SELECTION = 'SELECTION';\nconst DISPENSE = 'DISPENSE';\n \n// Transitions\nconst transitions = {\n    [IDLE]: [COIN_INPUT],\n    [COIN_INPUT]: [SELECTION],\n    [SELECTION]: [DISPENSE],\n    [DISPENSE]: [IDLE]\n};\n \n// Actions\nconst ENTER_COIN = 'enter_coin';\nconst SELECT_ITEM = 'select_item'; \nconst DISPENSE_ITEM = 'dispense_item';\n\n// State machine\nconst stateMachine = createStateMachine({\n    transitions: transitions,\n    actions: {\n        [ENTER_COIN]: (args) => enterCoin(args),\n        [SELECT_ITEM]: (args) => selectItem(args),\n        [DISPENSE_ITEM]: (args) => dispenseItem(args)\n    }\n});\n\n// Vending machine\nconst vendingMachine = {\n    // Initial state\n    currentState: IDLE,\n\n    // Methods\n    enterCoin: (args) => stateMachine.invoke(ENTER_COIN, args),\n    selectItem: (args) => stateMachine.invoke(SELECT_ITEM, args),\n    dispenseItem: (args) => stateMachine.invoke(DISPENSE_ITEM, args)\n};", "category": "Python"}, {"instruction": "Using the code snippet given below, write a JavaScript code to make the background color of the paragraphs \"#f0f0f0\".", "input": "<p>Paragraph 1</p>\n<p>Paragraph 2</p>", "output": "<script>\ndocument.querySelectorAll('p').forEach(el => {\n el.style.backgroundColor = \"#f0f0f0\"; \n});\n</script>\n<p>Paragraph 1</p>\n<p>Paragraph 2</p>", "category": "Python"}, {"instruction": "Generate a sum of square numbers from 1 to 5.", "input": "", "output": "Sum of squares of all numbers from 1 to 5 is 55 (1^2 + 2^2 + 3^2 + 4^2 +5^2).", "category": "Python"}, {"instruction": "Create a MySQL query to display all users in the \u201cusers\u201d table who are over the age of 25.", "input": "", "output": "SELECT * FROM users WHERE age > 25;", "category": "Python"}, {"instruction": "Create Git commands to clone a remote repository called \u201cmy-project\u201d.", "input": "", "output": "git clone https://github.com/username/my-project.git", "category": "Python"}, {"instruction": "Generate a JSON response from the following Java object.", "input": "User user = new User(\"jane\", \"doe\", \"jane.doe@gmail.com\");", "output": "{\n    \"firstName\": \"jane\",\n    \"lastName\": \"doe\",\n    \"email\": \"jane.doe@gmail.com\"\n}", "category": "Python"}, {"instruction": "What are the benefits of using the break statement in a loop?", "input": "", "output": "The break statement is often used to terminate a loop prematurely if a certain condition is met. This can provide an efficient way to end a loop when a condition is found and can help improve the readability and performance of the code. Additionally, it can be used to handle any exceptions that may occur while the loop is running.", "category": "Python"}, {"instruction": "What data structure should be used to store a set of strings?", "input": "", "output": "A set is the ideal data structure to store a set of strings. It is a collection of unique values and can store any primitive data types. No duplicates are allowed in a set and it is also unordered, meaning it does not keep track of the order in which items were added.", "category": "Python"}, {"instruction": "Import the pandas library in Python.", "input": "", "output": "import pandas as pd", "category": "Python"}, {"instruction": "Given a list of strings, return a new list with the longest strings.", "input": "str_list = [\"Hello\", \"world\", \"This\", \"is\", \"a\", \"sentence\"]", "output": "def longest_strings(str_list): \n\tlongest_str = [] \n\t\n\tfor s in str_list: \n\t\tif len(s) == max(map(len, str_list)): \n\t\t\tlongest_str.append(s) \n\t\n\treturn longest_str \n\nprint(longest_strings([\"Hello\", \"world\", \"This\", \"is\", \"a\", \"sentence\"])) # Output: [\"Hello\", \"world\", \"sentence\"]", "category": "Python"}, {"instruction": "Return the string \"Hello world\" as a response from a web service written in Java.", "input": "", "output": "@GET\n@Path(\"/helloWorld\")\n@Produces(MediaType.TEXT_PLAIN)\npublic String getHelloWorldString() {\n  return \"Hello world\";\n}", "category": "Python"}, {"instruction": "Create an array of size 10, initialize the array elements with random values between 1 to 10.", "input": "", "output": "import random \narr = []\n\nfor _ in range(10):\n    elem = random.randint(1,10)\n    arr.append(elem)\n\nprint(arr)", "category": "Python"}, {"instruction": "Using the \"for\" loop, print out all odd numbers from 1 to 10.", "input": "", "output": "for i in range(1, 11):\n    if i%2 != 0:\n        print(i)\n\n# Output: 1, 3, 5, 7, 9", "category": "Python"}, {"instruction": "Create an object of class 'Car' with attributes 'color' and 'speed'.", "input": "", "output": "myCar = Car(\"red\", 50)", "category": "Python"}, {"instruction": "Write a function that takes an integer and doubles it.", "input": "", "output": "def doubleInt(num): \n    return num * 2", "category": "Python"}, {"instruction": "Improve the following implementation of a binary search algorithm.", "input": "def binary_search(array, target):\n  low = 0\n  high = len(array)-1\n  while low <= high:\n    mid = (low+high)//2\n    if array[mid] == target:\n      return mid\n    elif array[mid] < target:\n      low = mid+1\n    else:\n      high = mid-1", "output": "def binary_search(array, target):\n  low = 0\n  high = len(array)-1\n  while low <= high:\n    mid = (low+high)//2\n    if array[mid] == target:\n      return mid\n    elif array[mid] < target:\n      low = mid+1\n    else:\n      high = mid-1\n  return -1 # target not found", "category": "Python"}, {"instruction": "Write code to solve this DP(Dynamic Programming) problem from LeetCode.", "input": "You are given coins of different denominations and a total amount of money. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.", "output": "def coinChange(coins, amount):\n    dp = [float(\"inf\")] * (amount + 1)\n    dp[0] = 0\n\n    for coin in coins:\n        for x in range(coin, amount + 1):\n            dp[x] = min(dp[x], dp[x - coin] + 1)\n    if dp[amount] == float(\"inf\"):\n        return -1\n    return dp[amount]", "category": "Python"}, {"instruction": "Edit this HTML code to add the Google Font \u201cRoboto\u201d.", "input": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title>My First Web Page</title>\n</head>\n<body>\n\n</body>\n</html>", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<link href=\"https://fonts.googleapis.com/css?family=Roboto&display=swap\" rel=\"stylesheet\">\n<title>My First Web Page</title>\n<style> \n  body {\n    font-family: 'Roboto', sans-serif; \n  }\n</style>\n</head>\n<body>\n\n</body>\n</html>", "category": "Python"}, {"instruction": "Create a SQL query to find all users from the \u201cusers\u201d table who have a last name of \u201cSmith\u201d.", "input": "", "output": "SELECT * FROM users WHERE lastName = 'Smith';", "category": "Python"}, {"instruction": "Create an array with values two and six repeated ten times.", "input": "", "output": "[ 2, 6, 2, 6, 2, 6, 2, 6, 2, 6, 2, 6, 2, 6, 2, 6, 2, 6, 2, 6 ]", "category": "Python"}, {"instruction": "Concisely explain in one sentence what a class is in object-oriented programming.", "input": "", "output": "A class is a blueprint from which individual objects are created, containing the attributes and behaviors of the objects.", "category": "Python"}, {"instruction": "Using the code snippet given below, add a unique class called btn which will remove the default styles from the submit button.", "input": "<form action=\"/contact.php\">\n  <input type=\"text\" name=\"name\">\n  <input type=\"email\" name=\"email\">\n  <input type=\"submit\" value=\"Submit\">\n</form>", "output": "<form action=\"/contact.php\">\n  <input type=\"text\" name=\"name\">\n  <input type=\"email\" name=\"email\">\n  <input type=\"submit\" value=\"Submit\" class=\"btn\">\n</form>", "category": "Python"}, {"instruction": "Using the code given below, add JavaScript code to make the hyperlinks open in a new tab.", "input": "<ul>\n  <li><a href=\"#\">Home</a></li>\n  <li><a href=\"#\">About</a></li>\n  <li><a href=\"#\">Contact</a></li>\n</ul>", "output": "<ul>\n  <li><a href=\"#\" target=\"_blank\">Home</a></li>\n  <li><a href=\"#\" target=\"_blank\">About</a></li>\n  <li><a href=\"#\" target=\"_blank\">Contact</a></li>\n</ul>", "category": "Python"}, {"instruction": "Write a JavaScript code to delete an item from an array.", "input": "let arr = [1, 2, 3, 4, 5];", "output": "function removeElement(arr, index) {\n    if (index >= 0 && index < arr.length) {\n        arr.splice(index, 1);\n    }\n    return arr;\n}\n// Usage\nremoveElement(arr, 2); // returns [1, 2, 4, 5]", "category": "Python"}, {"instruction": "Using the code snippet given below, add a class called contactForm to the HTML form.", "input": "<form action=\"/contact.php\" id=\"contactForm\">\n  <input type=\"text\" name=\"name\">\n  <input type=\"email\" name=\"email\">\n  <input type=\"submit\" value=\"Submit\">\n</form>", "output": "<form action=\"/contact.php\" id=\"contactForm\" class=\"contactForm\">\n  <input type=\"text\" name=\"name\">\n  <input type=\"email\" name=\"email\">\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Write a Python code snippet to find the index of the second occurrence of a substring in a given string.", "input": "\"Python is an interpreted, high-level, general-purpose programming language.\"\n\"general-purpose\"", "output": "import re \n  \nstring = \"Python is an interpreted, high-level, general-purpose programming language.\"\nsubstring = \"general-purpose\"\n\nsecond_occurrence = [(m.start(0)) for m in re.finditer(substring, string)][1]\nprint('The second occurrence of the substring starts at index:', second_occurrence)", "category": "Python"}, {"instruction": "Using the SQL query given below, add a new column called 'total_Quantity' to the table output which is the sum of quantity of all the orders by customer_id", "input": "SELECT customer_id, item_id, quantity \nFROM orders;", "output": "SELECT customer_id, item_id, quantity, \n\t(SELECT SUM(quantity) FROM orders WHERE customer_id = o.customer_id) AS total_Quantity \nFROM orders AS o;", "category": "Python"}, {"instruction": "Using the code given below, add classes to the navigation links on the page to make them display horizontally instead of vertically.", "input": "<ul>\n  <li><a href=\"#\">Home</a></li>\n  <li><a href=\"#\">About</a></li>\n  <li><a href=\"#\">Contact</a></li>\n</ul>", "output": "<ul class=\"horizontal-list\">\n  <li><a href=\"#\" class=\"horizontal-item\">Home</a></li>\n  <li><a href=\"#\" class=\"horizontal-item\">About</a></li>\n  <li><a href=\"#\" class=\"horizontal-item\">Contact</a></li>\n</ul>", "category": "Python"}, {"instruction": "Using the code given below, add a class called \"active\" to the first navigation link to make it highlighted when the page is loaded.", "input": "<ul>\n  <li><a href=\"#\">Home</a></li>\n  <li><a href=\"#\">About</a></li>\n  <li><a href=\"#\">Contact</a></li>\n</ul>", "output": "<ul>\n  <li><a href=\"#\" class=\"active\">Home</a></li>\n  <li><a href=\"#\">About</a></li>\n  <li><a href=\"#\">Contact</a></li>\n</ul>", "category": "Python"}, {"instruction": "Create a C++ program to generate a multiplication table of size n x n.", "input": "<n = 3>", "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n  int n = 3;\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= n; j++)\n      cout << i * j << \" \";\n    cout << endl;\n  }\n  return 0;\n}", "category": "Python"}, {"instruction": "Create a function to swap two elements of an array in JavaScript.", "input": "<x=[1, 2, 3, 4] >", "output": "function swapElements(x) {\n  let temp = x[0];\n  x[0] = x[1];\n  x[1] = temp;\n}", "category": "Python"}, {"instruction": "Use C# to create a function that takes in a string and count the number of uppercase characters within the string.", "input": "<input_str=\"Hello World\" >", "output": "public int CountUppercase(string input_str)  \n    {  \n        // Initialize count \n        int count = 0;  \n      \n        // Count uppercase characters  \n        foreach (char c in input_str)  \n        {  \n            if (Char.IsUpper(c))  \n                count++;  \n        }  \n      \n        // Return the count \n        return count;  \n    }", "category": "Python"}, {"instruction": "Code a Java program to find the area of an equilateral triangle.", "input": "", "output": "import java.util.Scanner;\n\npublic class AreaOfTriangle {\n    public static void main(String[] args) {\n        double s;\n        double area;\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"Enter the side of the equilateral triangle:\");\n        s = sc.nextDouble();\n        area = (Math.sqrt(3) / 4) * (s * s);\n        System.out.println(\"Area of equilateral triangle is \" + area);\n    }\n}", "category": "Python"}, {"instruction": "Write a code in PHP to display the top 5 most viewed pages in a website.", "input": "", "output": "$sql = \"SELECT page_name, view_count FROM pages ORDER BY view_count DESC LIMIT 5\";\n$result = mysqli_query($conn, $sql);\n\nif (mysqli_num_rows($result) > 0) {\n  while($row = mysqli_fetch_assoc($result)) {\n    echo \"Page Name: \" . $row[\"page_name\"]. \" - Views: \" . $row[\"view_count\"]. \"\";\n  }\n} else {\necho \"No records found\";\n}", "category": "Python"}, {"instruction": "Edit the following code to allow for the user to input an unlimited list of numbers.", "input": "", "output": "# Prime numbers between 2 and n\n\nn = int(input(\"Enter a positive integer: \"))\n\n# Initially assuming all integers between 2 and n are prime\nprimeArray = [True] * (n + 1)\n\n# Create list of prime numbers\nfor p in range(2, n+1): \n    # If prime[p] is not changed, then it is a prime \n    if primeArray[p]== True: \n        # Update all multiples of p \n        for i in range(2*p,n+1,p): \n            primeArray[i] = False\n\n# Print all prime numbers \nfor i in range(2,n+1): \n    if primeArray[i]: \n        print(i, end=\" \")", "category": "Python"}, {"instruction": "Write a code to store the user input in a list and then find the average of the items in the list.", "input": "", "output": "numbers = []\nwhile True:\n    user_input = input('input a number (input \"done\" to finish): ')\n    if user_input.lower() == \"done\":\n        break\n    numbers.append(float(user_input))\n\navg = sum(numbers) / len(numbers)\nprint('The average is', avg)", "category": "Python"}, {"instruction": "Convert the list of numbers into a dictionary where the numeric values are the keys and the corresponding characters are the values.", "input": "num_list = [1, 2, 3]\nchar_list = ['a', 'b', 'c']", "output": "dict_num_char = {num_list[i]: char_list[i] for i in range(len(num_list))}\nprint(dict_num_char)", "category": "Python"}, {"instruction": "Write a code in JavaScript to make all letters in a string upper case.", "input": "<input_str=\"Hello World\" >", "output": "def makeUpperCase(input_str): \n  return input_str.upper()\n\nresult = makeUpperCase(\"Hello World\")\nprint(result)", "category": "Python"}, {"instruction": "Write a sql query to retrieve the title and the date published of books created by the author \u201cSmith\u201d.", "input": "", "output": "SELECT title, date_published\nFROM books\nWHERE author=\u2018Smith\u2019", "category": "Python"}, {"instruction": "Create a type hint for a given parameter.", "input": "Parameter: data", "output": "data: List = []", "category": "Python"}, {"instruction": "Given two linked list, write a Python program to compare them and output true if they are equal, false if not", "input": "head1 -> 20 -> 40 -> 60 -> 90\nhead2 -> 60 -> 20 -> 90 -> 70", "output": "false", "category": "Python"}, {"instruction": "Build a SQL table to store customer contacts.", "input": "", "output": "CREATE TABLE contacts (\n contact_id int NOT NULL AUTO_INCREMENT,\n first_name varchar (50) NOT NULL,\n last_name varchar (50) NOT NULL,\n email varchar (255) NOT NULL, \n phone_number varchar (25) NOT NULL,\n PRIMARY KEY (contact_id) \n);", "category": "Python"}, {"instruction": "Create an algorithm that sorts an array of words in alphabetical order.", "input": "words = [ 'hello', 'this', 'is', 'a', 'test' ]", "output": "def alphabeticSort(words):\n    words.sort() \n    return words \n\nalphabeticSort(words) # Output: ['a', 'hello', 'is', 'test', 'this']", "category": "Python"}, {"instruction": "Use Python to filter out all the numbers divisible by 3 from a given list.", "input": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "def filter_list(numbers):\n    return [x for x in numbers if x % 3 == 0]\n\nfilter_list(numbers) # Output: [3, 6, 9]", "category": "Python"}, {"instruction": "Use PHP to replace all occurances of the word 'apple' with the word 'orange' in a given string.", "input": "string = 'This apple is red and this apple is green'", "output": "<?php\n$string = 'This apple is red and this apple is green';\n$string = str_replace('apple', 'orange', $string);\necho $string; // Output: This orange is red and this orange is green\n?>", "category": "Python"}, {"instruction": "You need to delete a given pattern of characters from a string", "input": "string: \"aaabbbccc\"\npattern: \"ab\"", "output": "\"ccc\"", "category": "Python"}, {"instruction": "Write a Python program to check if a substring is present in a set of strings", "input": "substring: \"abc\"\nstrings: [\"hoabcll\", \"aaabcbc\", \"abcbal\"]", "output": "True", "category": "Python"}, {"instruction": "Given an array with n elements, find the maximum element of the array.", "input": "[1, 10, 5, 33, 4]", "output": "33", "category": "Python"}, {"instruction": "Generate all possible strings of length n using A, B and C", "input": "3", "output": "['AAA', 'AAB', 'AAC', 'ABA', 'ABB', 'ABC', 'ACA', 'ACB', 'ACC', 'BAA', 'BAB', 'BAC', 'BBA', 'BBB', 'BBC', 'BCA', 'BCB', 'BCC', 'CAA', 'CAB', 'CAC', 'CBA', 'CBB', 'CBC', 'CCA', 'CCB', 'CCC']", "category": "Python"}, {"instruction": "Generate a Fibonacci number sequence with n numbers", "input": "10", "output": "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "category": "Python"}, {"instruction": "Find the output of the following array after sorting it in ascending order.", "input": "array = [6, 2, 9, 4, 1]", "output": "[1, 2, 4, 6, 9]", "category": "Python"}, {"instruction": "Convert the following temperature to its equivalent Fahrenheit measurement.", "input": "Temperature: 20 degrees Celsius", "output": "The equivalent Fahrenheit measurement is 68 degrees Fahrenheit.", "category": "Python"}, {"instruction": "Compute the mean of the given data set.", "input": "Data set: {4, 5, 6, 7}", "output": "The mean of the data set is 5.5.", "category": "Python"}, {"instruction": "Find all the string literals in a given C++ program.", "input": "#include <iostream>\nint main(){\n std::cout << \"Hello World!\" << std::endl;\n return 0;\n}", "output": "\"Hello World!\"", "category": "Python"}, {"instruction": "Retrieve the name of the third author from a given list of authors.", "input": "Authors: John Doe, Jane Smith, Tom Johnson", "output": "Tom Johnson.", "category": "Python"}, {"instruction": "Edit the following HTML code to add an ID attribute with value \"demo-id\" to the <h1> element.", "input": "<h1>This is a heading</h1>", "output": "<h1 id=\"demo-id\">This is a heading</h1>", "category": "Python"}, {"instruction": "Check if the following string can be used as a valid e-mail", "input": "String: myName@domain", "output": "Yes, this string can be used as a valid e-mail.", "category": "Python"}, {"instruction": "Create an HTML form that can process the user's email address.", "input": "", "output": "<form method=\"post\" action=\"process.php\">\n\n  <label>Email address:</label>\n  <input type=\"email\" name=\"user_email\" required>\n  <input type=\"submit\" value=\"Submit\">\n \n</form>", "category": "Python"}, {"instruction": "Design a CSS class for displaying a gradient transparent background.", "input": "", "output": ".gradient {\nbackground: linear-gradient(rgba(19,72,155,0.63), rgba(8,48,107,0.63));\n}", "category": "Python"}, {"instruction": "Check if the following statement is a valid python syntax", "input": "Statement: for x in range(0, len(listname))", "output": "Yes, the statement is a valid Python syntax.", "category": "Python"}, {"instruction": "Write a different style of a given JavaScript code snippet.", "input": "function sum(a, b) {\n  return a + b;\n}", "output": "function addVals(x, y) {\n    return x + y;\n}", "category": "Python"}, {"instruction": "Write a PHP code snippet to display \"Hello, World!\" in console.", "input": "", "output": "<?php\n  echo \"Hello, World!\"; \n?>", "category": "Python"}, {"instruction": "Debug the given code and explain your solution.", "input": "words = ['hello', 'world', 'foo', 'bar']\nfor i in words:\n   if i == 'foo':\n      break\nprint('Done')", "output": "The code will not print out \"Done\" as it is inside an infinite loop. To fix this, we can either remove the 'break' statement or add an else statement after the if statement as a way of exiting the loop when the condition is not satisfied. \n\nwords = ['hello', 'world', 'foo', 'bar']\nfor i in words:\n   if i == 'foo':\n      break\nelse:\n    print('Done')", "category": "Python"}, {"instruction": "Create a function that calculates the total amount of money after 5 years given an initial amount of money and a certain rate of interest.", "input": "Initial amount: 1000\nRate of interest: 2%", "output": "def total_amount(initial, interest): \n    total = initial \n    for i in range(1, 5): \n        total += total * (interest/100) \n    return total", "category": "Python"}, {"instruction": "Retrieve the word with the second highest frequency from a given text.", "input": "Text: This is a sample text with a lot of words.", "output": "words = text.split()\nfreq_dict = {}\nfor word in words:\n    if word in freq_dict.keys():\n        freq_dict[word] += 1\n    else:\n        freq_dict[word] = 1\nsorted_words = sorted(freq_dict.items(), reverse=True, key=lambda x: x[1])\nsecond_highest_freq_word = sorted_words[1][0]\nprint(second_highest_freq_word)", "category": "Python"}, {"instruction": "Convert the given code by replacing for loop with a while loop.", "input": "for i in range(5):\n    print(i)", "output": "i = 0\nwhile i < 5:\n    print(i)\n    i += 1", "category": "Python"}, {"instruction": "Retrieve the third item from a linked list.", "input": "", "output": "def get_third_item(linked_list):\n    curr_node = linked_list\n    for i in range(2):\n        curr_node = curr_node.next # Moves onto the third item. \n    return curr_node.data # Returns the data of the third item.", "category": "Python"}, {"instruction": "Construct a C++ program that checks whether a number is prime or not.", "input": "number = 17", "output": "#include <iostream>\n \nusing namespace std;\n \nint main()\n{\n    int n, i, c;\n \n    n = 17;\n    c = 0;\n \n    for (i = 1; i <= n; i++)\n    {\n        if (n % i == 0)\n        {\n            c++;\n        }\n    }\n \n    if (c == 2)\n    {\n        cout << n << \" is a prime number\" << endl;\n    }\n    else\n    {\n        cout << n << \" is not a prime number\" << endl;\n    }\n \n    return 0;\n}", "category": "Python"}, {"instruction": "Describe a data structure for storing the given data.", "input": "Name, Phone number, Address", "output": "A hash table data structure can be used to store the given data. The name will be used as the key and then an associative array or a structure can be used to store the phone number and address associated with the name.", "category": "Python"}, {"instruction": "Given two strings s1 and s2, write a program to edit s1 to s2 by removing, inserting or replacing one character in s1.", "input": "s1 = \u201ccat\u201d\ns2 = \u201chat\u201d", "output": "def edit_strings(s1, s2):\n    s1_arr = list(s1)\n    s2_arr = list(s2)\n\n    i = 0\n    while i < len(s1):\n        if s1[i] == s2[i]:\n            i += 1\n        else:\n            # remove character\n            del s1_arr[i]\n            if s1_arr == s2_arr:\n                return 'removal'\n            # insert character\n            s1_arr.insert(i, s2[i])\n            if s1_arr == s2_arr:\n                return 'insertion'\n            # replace character\n            s1_arr[i] = s2[i]\n            if s1_arr == s2_arr:\n                return 'replacement'\n            break\n    return None", "category": "Python"}, {"instruction": "Given two lists of strings, write a program to combine them into a dictionary whose keys are the strings in one list and values are the strings in the other list.", "input": "list1 = [\u201ccat\u201d, \u201cdog\u201d, \u201chorse\u201d]\nlist2 = [\u201cmeow\u201d, \u201cbark\u201d, \u201cneigh\u201d]", "output": "def combine_lists(list1, list2):\n    dictionary = dict()\n    for i in range(len(list1)):\n        dictionary[list1[i]] = list2[i]\n    return dictionary", "category": "Python"}, {"instruction": "Implement a class to represent a vector, with initial vector and a scaler. Include methods to add, subtract and multiply two vectors.", "input": "", "output": "class Vector():\n    def __init__(self, vector, scaler):\n        self.vector = vector\n        self.scaler = scaler\n\n    def add_vector(self, other_vector):\n        result_vector = []\n        for i in range(len(self.vector)):\n            result_vector.append(self.vector[i] + other_vector.vector[i])\n        return Vector(result_vector, self.scaler)\n    \n    def sub_vector(self, other_vector):\n        result_vector = []\n        for i in range(len(self.vector)):\n            result_vector.append(self.vector[i] - other_vector.vector[i])\n        return Vector(result_vector, self.scaler)\n\n    def mul_vector(self, scaler):\n        result_vector = []\n        for element in self.vector:\n            result_vector.append(element * scaler)\n        return Vector(result_vector, self.scaler)", "category": "Python"}, {"instruction": "Implement a function to remove all occurrences of string t from string s.", "input": "s = 'The quick brown fox jumps over the lazy dog.'\nt = 'the'", "output": "def remove_string(s, t):\n    if t not in s:\n        return s\n    s = s.lower()\n    t = t.lower()\n    indices = []\n    start = 0\n    while True:\n        index = s.find(t, start)\n        if index == -1:\n            break\n        indices.append(index)\n        start = index + 1\n    offset = 0\n    for index in indices:\n        s = s[:index - offset] + s[index - offset + len(t):]\n        offset += len(t)\n    return s", "category": "Python"}, {"instruction": "Generate a random string of length 8 with characters from a-zA-Z0-9.", "input": "", "output": "import random\nimport string\n\ndef random_string():\n    letters = string.ascii_letters + string.digits\n    return ''.join(random.choice(letters) for i in range(8))", "category": "Python"}, {"instruction": "Given a string s and a list of words words, write a program to find all occurrences of words in the string s.", "input": "s = 'The quick brown fox jumps over the lazy dog.'\nwords = ['quick', 'fox', 'dog']", "output": "def find_words(s, words):\n    occurrence_indices = []\n    for word in words:\n        start = 0\n        while True:\n            index = s.find(word, start)\n            if index == -1:\n                break\n            else:\n                occurrence_indices.append(index)\n                start = index + 1\n    return occurrence_indices", "category": "Python"}, {"instruction": "Create a JavaScript function for finding two largest numbers among a given array of numbers", "input": "Array of numbers: [3, 6, 8, 5, 9, 1]", "output": "function findLargest(numArray) {\n  var largest = numArray[0];\n  var secondLargest;\n \n  for( var i = 1; i < numArray.length; i++ ) {\n    if( numArray[i] > largest ) {\n      secondLargest = largest;\n      largest = numArray[i];\n    }\n    else if ( numArray[i] > secondLargest ) {\n      secondLargest = numArray[i];\n    }\n  }\n \n  return [largest, secondLargest];\n}\n\nUsage:\nvar largest2 = findLargest([3, 6, 8, 5, 9, 1]);\n\nOutput:\n[9, 8]", "category": "Python"}, {"instruction": "Given a string s, write a program to classify it as a palindrome or not.", "input": "s = \u201cmalayalam\u201d", "output": "def is_palindrome(s):\n    n = len(s)\n    for i in range(n//2):\n        if s[i] != s[n-1-i]:\n            return False\n    return True", "category": "Python"}, {"instruction": "Write a basic script in Python that counts from 0 to 10.", "input": "", "output": "for i in range(11):\n    print(i)", "category": "Python"}, {"instruction": "Write a SQL query to get the name, age and address of the people whose age is greater than 25.", "input": "", "output": "SELECT name, age, address \nFROM persons \nWHERE age > 25;", "category": "Python"}, {"instruction": "Solve the following Problem and display the answer using JavaScript: What is 3+4*2?", "input": "", "output": "let x = 3 + 4 * 2;\nconsole.log(x);", "category": "Python"}, {"instruction": "Write a CSS code to create a navigation menu with drop down sub menus.", "input": "", "output": "<ul>\n    <li>\n        <div>Navigation Menu</div>\n        <ul>\n            <li>\n                <div>Link 1</div>\n            </li>\n            <li>\n                <div>Link 2</div>\n                <ul>\n                    <li>\n                        <div>Link 2.1</div>\n                    </li>\n                    <li>\n                        <div>Link 2.2</div>\n                    </li>\n                </ul>\n            </li>\n        </ul>\n    </li>\n</ul>\n\n<style>\nul {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n\nli > div {\n  background-color: #eee;\n  padding: 8px;\n  cursor: pointer;\n}\n\nli > ul {\n  display: none;\n}\n\nli:hover > ul {\n  display: block;\n  position: absolute;\n}\n</style>", "category": "Python"}, {"instruction": "Develop a code snippet in Java to create a thread that runs a simple print statement every 5 seconds.", "input": "", "output": "public class MyTask implements Runnable { \n    public void run() \n    { \n        while (true) { \n            System.out.println(\"This is the task running every 5 seconds.\"); \n            try { \n                Thread.sleep(5000); \n            } \n            catch (InterruptedException e) { \n                e.printStackTrace(); \n            } \n        } \n    } \n} \n  \npublic class Main { \n    public static void main (String[] args) \n    { \n        MyTask task = new MyTask(); \n        Thread thread = new Thread(task); \n        thread.start(); \n    } \n}", "category": "Python"}, {"instruction": "Develop a PHP code snippet to retrieve all records from a database table \"POSTS\".", "input": "", "output": "<?php\n    // Establish a connection to the database\n    $conn = new mysqli('localhost', 'username', 'password', 'database');\n\n    // Check the connection\n    if ($conn->connect_error) {\n        die(\"Connection failed:\" . $conn->connect_error);\n    }\n\n    // Execute the query\n    $sql = \"SELECT * FROM POSTS\";\n    $result = $conn->query($sql);\n\n    // Loop through the results\n    if ($result->num_rows > 0) {\n        while($row = $result->fetch_assoc()) {\n            echo $row['title'] . \"<br />\";\n        }\n    }\n\n    // Close the connection\n    $conn->close();\n?>", "category": "Python"}, {"instruction": "Create a ReactJS component to display a modal window with a form.", "input": "", "output": "import React from 'react';\n\nconst ModalWindow = ({ showModal, closeModal }) => {\n  return (\n    showModal && (\n      <div>\n        <div>\n            <h3> Modal Window </h3>\n        </div>\n        <div>\n            <form> \n              ... \n            </form>\n        </div>\n        <div>\n            <button type=\"button\" onClick={closeModal}>\n              Close\n            </button>\n        </div>\n      </div>\n    )\n  );\n}\n\nexport default ModalWindow;", "category": "Python"}, {"instruction": "Develop a machine learning model in Python to classify emails as either important or not important.", "input": "", "output": "import numpy as np\nimport pandas as pd\nimport sklearn\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Read the dataset\ndata = pd.read_csv('emails.csv')\n\n# Pre-process the dataset for label encoding and feature extraction\nlabel_encoder = LabelEncoder()\ny = label_encoder.fit_transform(data.category.values)\n\ntfidf_vectorizer = TfidfVectorizer(stop_words='english', min_df=2)\nX = tfidf_vectorizer.fit_transform(data.body.values)\n\n# Split the dataset into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train the Multinomial Naive Bayes model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\nscore = model.score(X_test, y_test)\nprint('Test accuracy: ', score)", "category": "Python"}, {"instruction": "Write an HTML code snippet to create an interactive dropdown menu.", "input": "", "output": "<select>\n  <option value=\"\">Select an option</option>\n  <option value=\"animal\"> Animal</option>\n  <option value=\"plant\"> Plant</option>\n  <option value=\"mineral\"> Mineral</option>\n</select>", "category": "Python"}, {"instruction": "Develop a SQL query to count the number of people who are born before 1992.", "input": "", "output": "SELECT COUNT(*) FROM people WHERE year_of_birth < 1992;", "category": "Python"}, {"instruction": "Develop an HTML/CSS code for creating a three column layout with a header, footer and content.", "input": "", "output": "<!-- flexbox design -->\n<div class=\"layout-wrapper\" style=\"display: flex; flex-direction: row;\">\n  <div class=\"header\" style=\"flex: 1; background-color: red;\">\n    Header\n  </div>\n  <div class=\"body\" style=\"flex: 3; display:flex; flex-direction: row;\">\n    <div class=\"left-column\" style=\"flex: 1; background-color: yellow;\">\n      Left Column\n    </div>\n    <div class=\"middle-column\" style=\"flex: 3; background-color: green;\">\n      Content\n    </div>\n    <div class=\"right-column\" style=\"flex: 1; background-color: blue;\">\n      Right Column\n    </div>\n  </div>\n  <div class=\"footer\" style=\"flex: 1; background-color: purple;\">\n    Footer\n  </div>\n</div>", "category": "Python"}, {"instruction": "Generate a new List from the given list such that the elements are squares of the preceding numbers.", "input": "givenList = [1, 2, 3, 4]", "output": "newList = [x**2 for x in givenList]", "category": "Python"}, {"instruction": "Write a Python code to sort the names into ascending order.", "input": "names = [\"Vladimir Putin\",\"Joe Biden\",\"Xi Jinping\"]", "output": "names.sort()", "category": "Python"}, {"instruction": "What are the similarities between dictionaries and Lists in Python?", "input": "", "output": "Both dictionaries and lists are container data structures in Python which allow for the storage and retrieval of data. They are both mutable, meaning the contents can be updated, changed and manipulated. They also both contain an ordered sequence of elements, allowing for indexing into each one. However, dictionaries use a key:value pair, whereas lists contain only values.", "category": "Python"}, {"instruction": "Separate the numbers in the given string variable.", "input": "String: 1a2b34c", "output": "nums = [int(x) for x in my_string if x.isdigit()]", "category": "Python"}, {"instruction": "Comment the code snippet.", "input": "i = 0\nwhile i < 10:\n    print(i)\n    i = i + 1", "output": "# This program will print numbers from 0 to 9\n# i is used to keep track of the loop's iteration count\n# The while block will be run until i reaches 10\n# Each iteration, i is incremented by 1", "category": "Python"}, {"instruction": "Write a Python code to remove the characters 'a', 'b', and 'c' from a given string.", "input": "String: abcabcabc", "output": "def remove_chars(string):\n    for char in \"abc\":\n        string = string.replace(char, '')\n    return string", "category": "Python"}, {"instruction": "Update a MongoDB document such that it replace a specific field with a new value.", "input": "db_name: \"users\"\ncollection_name: \"customers\"\nfield_name: \"name\"\nnew_value: \"John Doe\"", "output": "db.customers.update(\n    { name: \"John Doe\" },\n    {\n        $set: {\n            name: \"John Doe\"\n        }\n    }\n)", "category": "Python"}, {"instruction": "Write a code that takes a given list and sorts them using heapsort.", "input": "arr = [1, 6, 5, 4, 8, 2]", "output": "def heapsort(arr):\n    # Build the max heapify \n    n = len(arr) \n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n\n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i] # swap \n        heapify(arr, i, 0) \n\ndef heapify(arr, n, i): \n    largest = i # Initialize largest as root \n    l = 2 * i + 1     # left = 2*i + 1 \n    r = 2 * i + 2     # right = 2*i + 2 \n  \n    # check if left child of root exists and is \n    # greater than root \n    if l < n and arr[i] < arr[l]: \n        largest = l \n  \n    # check if right child of root exists and is \n    # greater than root \n    if r < n and arr[largest] < arr[r]: \n        largest = r \n  \n    # Change root, if needed \n    if largest != i: \n        arr[i],arr[largest] = arr[largest],arr[i] # swap \n  \n        # Heapify the root. \n        heapify(arr, n, largest) \n\n# Driver code \nif __name__ == \"__main__\":\n    arr = [1, 6, 5, 4, 8, 2]\n    heapsort(arr) \n    n = len(arr) \n    print (\"Sorted array is\") \n    for i in range(n): \n        print (\"%d\" %arr[i]),", "category": "Python"}, {"instruction": "Update the below code with a flag to control the output according to the argument given", "input": "flag = False\nstr1 = \"Hello World\"\n\nif flag == False:\n    print(str1)", "output": "flag = False\nstr1 = \"Hello World\"\n\nif flag:\n    print(str1)\nelse:\n    print(\"The flag is set to False, so nothing is printed\")", "category": "Python"}, {"instruction": "Create a function to print out a multiplication table of two given multidimensional arrays.", "input": "arr1 = [ [1,2] , [3,4] ]\narr2 = [ [5,6] , [7,8] ]", "output": "def mult_table(arr1, arr2):\n    for i in range(len(arr1)):\n        for j in range(len(arr2[0])):\n            for k in range(len(arr2)):\n                print(arr1[i][k] * arr2[k][j], end=\" \")\n        print()\n\narr1 = [ [1,2] , [3,4] ]\narr2 = [ [5,6] , [7,8] ]\n\nmult_table(arr1, arr2)\n\n# Output: \n5 12 \n15 24", "category": "Python"}, {"instruction": "Change the following code for the output to be a list", "input": "num1 = 5\nnum2 = 7", "output": "num1 = 5\nnum2 = 7\n\noutput = [num1, num2]\nprint(output) # Output: [5, 7]", "category": "Python"}, {"instruction": "Create a C++ program that finds the first 8 prime numbers.", "input": "", "output": "#include <iostream>\n \nusing namespace std;\n \nint main()\n{\n    int n, i, c;\n \n    for (n = 2; n <= 16; n++)\n    {\n        c = 0;\n \n        for (i = 1; i <= n; i++)\n        {\n            if (n % i == 0)\n            {\n                c++;\n            }\n        }\n \n        if (c == 2)\n        {\n            cout << n << endl;\n        }\n    }\n \n    return 0;\n}", "category": "Python"}, {"instruction": "Write a code to extract the odd numbers from a given array in JavaScript.", "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "function oddNumbers(arr) {\n   let oddNumbers = arr.filter(function(element) {\n      return element % 2 !== 0;\n   });\n   return oddNumbers;\n}", "category": "Python"}, {"instruction": "Using C#, write a code to convert a Fahrenheit temperature to its equivalent in Celsius.", "input": "50", "output": "public static double FahrenheitToCelsius(double fahrenheitTemperature)\n{\n    double celsiusTemperature = (fahrenheitTemperature - 32) / 1.8;\n    \n    return celsiusTemperature;\n}", "category": "Python"}, {"instruction": "Given a two-dimensional array, write a Python code to sum each row in the array and store it in a new array.", "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def sum_row_in_2d_array(arr):\n    result = []\n    # iterating through array\n    for sub_arr in arr:\n        sum=0\n        # iterating through sub array\n        for element in sub_arr:\n            sum += element\n        # Adding sum to result list\n        result.append(sum)\n \n    return result", "category": "Python"}, {"instruction": "Combine the two given strings and capitalize the resulting letters.", "input": "Hello\nWorld", "output": "def capitalize_combined_string(str1,str2):\n    combined_str = str1 + str2\n    return combined_str.upper()", "category": "Python"}, {"instruction": "Write a CSS class that will apply a border around an HTML element.", "input": "", "output": ".bordered {\n  border: 1px solid black;\n}", "category": "Python"}, {"instruction": "Given a comma-separated string with numbers, remove the max value from it and output a string with comma-separated values", "input": "8, 12, 5, 2, 18", "output": "\"8, 12, 5, 2\"", "category": "Python"}, {"instruction": "Generate HTML output for displaying the following table:\n\n| Name    | Age | \n| ------- | --- | \n| John    | 25  | \n| David   | 34  | \n| Sarah   | 22  |", "input": "", "output": "<table>\n    <tr>\n      <th>Name</th>\n      <th>Age</th>\n    </tr>\n    <tr>\n      <td>John</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <td>David</td>\n      <td>34</td>\n    </tr>\n    <tr>\n      <td>Sarah</td>\n      <td>22</td>\n    </tr>\n  </table>", "category": "Python"}, {"instruction": "Construct a for loop in Python to iterate through the list [3, 2, 5, 4, 6] in reverse order.", "input": "", "output": "for num in reversed([3, 2, 5, 4, 6]):\n    print(num)", "category": "Python"}, {"instruction": "Write a C program that creates an array of 4 elements in a structure and print it.", "input": "", "output": "#include<stdio.h>  \n#include<stdlib.h>  \n\nstruct array_struct {\n   int a[4];\n};\n\nint main() {\n  struct array_struct s;\n\n  s.a[0] = 13;\n  s.a[1] = 5;\n  s.a[2] = 17;\n  s.a[3] = 89;\n  \n  printf(\"s.a[0]: %d\\n\", s.a[0]);\n  printf(\"s.a[1]: %d\\n\", s.a[1]);\n  printf(\"s.a[2]: %d\\n\", s.a[2]);\n  printf(\"s.a[3]: %d\\n\", s.a[3]);\n}", "category": "Python"}, {"instruction": "Create a Python function that takes an object as an input and returns its names and values.", "input": "Input: {\"name\": \"John\", \"age\": 25, \"cities\": [\"New York\", \"Boston\"]}", "output": "def get_object_details(input_obj):\n    output = []\n    for key, value in input_obj.items():\n        if type(value) == list:\n            value = \", \".join(value)\n        output.append(f\"{key}: {value}\")\n    return \"\\n\".join(output)", "category": "Python"}, {"instruction": "Refactor the following Java code to improve readability and dynamism.", "input": "public class Movies {\n  private int movieCount = 5;\n  private String genre = \"action\";\n \n  public void printMovieDetails() {\n    System.out.println(\"The movie count is \" + movieCount);\n    System.out.println(\"The genre is \" + genre);\n  }\n}", "output": "public class Movies {\n  private int movieCount;\n  private String genre;\n \n  public Movies(int movieCount, String genre) {\n    this.movieCount = movieCount;\n    this.genre = genre;\n  }\n \n  public void printMovieDetails() {\n    System.out.println(\"The movie count is \" + movieCount);\n    System.out.println(\"The genre is \" + genre);\n  }\n}", "category": "Python"}, {"instruction": "Write a SQL query that returns the 10 most recently created entries from a table with a timestamp column.", "input": "", "output": "SELECT *\nFROM table\nORDER BY timestamp DESC\nLIMIT 10;", "category": "Python"}, {"instruction": "Parse the following HTML string and get a list of all the <p> tags.", "input": "<html>\n  <p>This is a paragraph</p>\n  <div>\n    <span>This is a span</span>\n    <p>This is also a paragraph</p>\n    <p>This is another paragraph</p>\n  </div>\n</html>", "output": "from bs4 import BeautifulSoup\n\nhtml_str = \"\"\"\n<html>\n  <p>This is a paragraph</p>\n  <div>\n    <span>This is a span</span>\n    <p>This is also a paragraph</p>\n    <p>This is another paragraph</p>\n  </div>\n</html>\n\"\"\"\n\nsoup = BeautifulSoup(html_str, 'html.parser')\nparagraphs = soup.find_all('p')\n\nfor p in paragraphs:\n    print(p)", "category": "Python"}, {"instruction": "Create a MySQL table with three columns containing values from a given list.", "input": "List: \nTom, 14, 80\nMary, 27, 96\nJohn, 8, 75", "output": "CREATE TABLE my_table (\n  name TEXT NOT NULL,\n  age INT NOT NULL,\n  score INT NOT NULL\n);\n\nINSERT INTO my_table (name, age, score) VALUES\n('Tom', 14, 80),\n('Mary', 27, 96),\n('John', 8, 75);", "category": "Python"}, {"instruction": "Suggest a completion for the following code so that all the words in a list are printed in reverse", "input": "words = ['hello', 'world', 'my', 'name', 'is', 'john']\n\nfor word in words:", "output": "words = ['hello', 'world', 'my', 'name', 'is', 'john']\n\nfor word in words:\n    print(word[::-1], end=\" \")\n\n# Output: olleh dlrow ym eman si nhoj", "category": "Python"}, {"instruction": "Write an SQL query that returns the second highest salary from a table with a salary column.", "input": "", "output": "SELECT MAX(salary) as SecondHighestSalary\nFROM salary\nWHERE salary NOT IN (SELECT MAX(salary) FROM salary)", "category": "Python"}, {"instruction": "Write a SQL query to find the values that have occurred more than twice.", "input": "Table name: values\n\n| id  |  value |\n|---|---|\n| 1  | 3  |\n| 2  | 3  |\n| 3  | 4  |\n| 4  | 5  |\n| 5  | 3  |", "output": "SELECT value\nFROM value\nWHERE COUNT(*) > 2\nGROUP BY value;", "category": "Python"}, {"instruction": "Write an HTML page with two headings \"Home\" and \"About\".", "input": "", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Title</title>\n</head>\n<body>\n  <h1>Home</h1>\n  <h1>About</h1>\n</body>\n</html>", "category": "Python"}, {"instruction": "How would you display the following message as an error in JavaScript?\n\n\"Username and password do not match.\"", "input": "", "output": "console.error(\"Username and password do not match.\")", "category": "Python"}, {"instruction": "Write a regular expression to match all strings which contain at least one character from A-F.", "input": "", "output": "[A-F].*", "category": "Python"}, {"instruction": "Create a function in JavaScript to convert a number to its equivalent string format.", "input": "123", "output": "function numberToString(num){\n    return num.toString();\n}", "category": "Python"}, {"instruction": "Create a CSS selector to select all divs on the page with IDs beginning with \"heading_\".", "input": "", "output": "div[id^=\"heading_\"] {\n    // CSS declarations here\n}", "category": "Python"}, {"instruction": "Construct a for loop in Java which will iterate through an array and print each item in a new line.", "input": "int[] arr = {1, 2, 3, 4, 5};", "output": "for (int i = 0; i < arr.length; i++) {\n    System.out.println(arr[i]);\n}", "category": "Python"}, {"instruction": "Write a function in SQL to calculate the total number of students by course.", "input": "TABLE student\n    ( \n    id INT AUTO_INCREMENT PRIMARY KEY, \n    name VARCHAR(255), \n    age INT\n    );\n\nTABLE course\n    ( \n    id INT AUTO_INCREMENT PRIMARY KEY, \n    name VARCHAR(255), \n    student_id INT\n    );", "output": "SELECT course.name, COUNT(student.id) AS \"Total Students\" \nFROM course \nINNER JOIN student ON course.student_id = student.id\nGROUP BY course.name;", "category": "Python"}, {"instruction": "Generate an HTML element to display the following data in a table format.", "input": "Students: [[\"Name\", \"Bert\"], [\"Age\", 10], [\"Sex\", \"Male\"]", "output": "<table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n    <th>Sex</th>\n  </tr>\n  <tr>\n    <td>Bert</td>\n    <td>10</td>\n    <td>Male</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Implementation the quicksort algorithm using c++.", "input": "", "output": "// C++ code for quick sort \n#include <bits/stdc++.h> \nusing namespace std; \n  \n// A utility function to swap two elements \nvoid swap(int* a, int* b) \n{ \n    int t = *a; \n    *a = *b; \n    *b = t; \n} \n  \n/* This function takes last element as pivot, \nplaces the pivot element at its correct \nposition in sorted array, and places all \nsmaller (smaller than pivot) to left of \npivot and all greater elements to right \nof pivot */\nint partition (int arr[], int low, int high) \n{ \n    int pivot = arr[high];    // pivot \n    int i = (low - 1);  // Index of smaller element \n  \n    for (int j = low; j <= high- 1; j++) \n    { \n        // If current element is smaller than or \n        // equal to pivot \n        if (arr[j] <= pivot) \n        { \n            i++;    // increment index of smaller element \n            swap(&arr[i], &arr[j]); \n        } \n    } \n    swap(&arr[i + 1], &arr[high]); \n    return (i + 1); \n} \n  \n/* The main function that implements QuickSort \narr[] --> Array to be sorted, \nlow  --> Starting index, \nhigh  --> Ending index */\nvoid quickSort(int arr[], int low, int high) \n{ \n    if (low < high) \n    { \n        /* pi is partitioning index, arr[p] is now \n           at right place */\n        int pi = partition(arr, low, high); \n  \n        // Separately sort elements before \n        // partition and after partition \n        quickSort(arr, low, pi - 1); \n        quickSort(arr, pi + 1, high); \n    } \n} \n  \n/* Function to print an array */\nvoid printArray(int arr[], int size) \n{ \n    int i; \n    for (i=0; i < size; i++) \n        cout << arr[i] << \" \"; \n    cout << endl; \n}", "category": "Python"}, {"instruction": "Write a code that migrates data from one database to another", "input": "", "output": "import MySQLdb\nimport pymongo\n\n# Establishing the connection mysql\nmysql_con = MySQLdb.connect( <MySQL connection details> )\ncursor = mysql_con.cursor()\n\n# Establishing the connection mongodb\nmongo_con = pymongo.MongoClient( <MongoDB connection details> )\ndb = mongo_con.mydatabase\n\n# Migrating the data\ncursor.execute( \"SELECT * FROM users\" )\nrecords = cursor.fetchall()\n\nfor record in records:\n    db.users.insert_one({\n        'name': record[0],\n        'age' : record[1],\n        'email': record[2]\n    })", "category": "Python"}, {"instruction": "Write a C program to simulate the producer-consumer problem.", "input": "", "output": "#define MAX_BUFFER_SIZE 10\n\n// structure of buffer\ntypedef struct {\n int buffer[MAX_BUFFER_SIZE];\n int counter;\n} buffer_t;\n\n// initialize buffer\nvoid init_buffer(buffer_t *buffer) {\n buffer->counter = 0;\n}\n\n// produce an item and add it to the buffer\nvoid produce(buffer_t *buffer, int item) {\n if (buffer->counter < MAX_BUFFER_SIZE) {\n  buffer->buffer[buffer->counter++] = item;\n }\n}\n\n// consume an item from the buffer\nint consume(buffer_t *buffer) {\n if (buffer->counter > 0) {\n  int item = buffer->buffer[--buffer->counter];\n  return item;\n }\n return -1;\n}", "category": "Python"}, {"instruction": "Write a Java program to find the sum of two arrays of length 10", "input": "", "output": "public static int[] sumArrays(int[] arr1, int[] arr2){\n        int[] result = new int[arr1.length];\n        for(int i=0; i<arr1.length; i++){\n            result[i] = arr1[i] + arr2[i];\n        }\n        return result;\n    }", "category": "Python"}, {"instruction": "Create an SQL table to store information about books and authors", "input": "", "output": "CREATE TABLE books (\n    book_id INT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    author_id INT NOT NULL,\n    FOREIGN KEY (author_id) REFERENCES authors (author_id)\n);\n\nCREATE TABLE authors (\n    author_id INT PRIMARY KEY,\n    first_name VARCHAR(255) NOT NULL,\n    last_name VARCHAR(255) NOT NULL\n);", "category": "Python"}, {"instruction": "Extend the program from Question 4 to allow the user to specify the upper limit.", "input": "", "output": "#include <iostream>\n\nint main()\n{\n    int n;\n    std::cout << \"Enter the upper limit: \";\n    std::cin >> n;\n\n    for (int i = 2; i <= n; i += 2)\n    {\n        std::cout << i << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}", "category": "Python"}, {"instruction": "Write a Python program to test whether all elements of a given list are equal or not.", "input": "[3,3,3]", "output": "def all_elements_equal(lst):\n return lst[1:] == lst[:-1]", "category": "Python"}, {"instruction": "Write a Python function to decode a given string (with special characters) to its original form.", "input": "", "output": "def decode_string(string):\n return string.encode().decode('unicode_escape')", "category": "Python"}, {"instruction": "Write a Python function that takes in a string and outputs a dictionary where the keys are the characters in the string and the values are the frequency of the characters in the string.", "input": "", "output": "def freq_dict(string):\n freq = {}\n for c in string:\n if c in freq:\n freq[c] += 1\n else:\n freq[c] = 1\n return freq", "category": "Python"}, {"instruction": "Create a JavaScript object which will contain data about a person.", "input": "", "output": "var person = {\n    name: \"John Doe\",\n    age: 30,\n    gender: \"Male\"\n};", "category": "Python"}, {"instruction": "Write a query in MySQL which will get all the records from a table.", "input": "", "output": "SELECT * FROM table_name;", "category": "Python"}, {"instruction": "Create a column-oriented MySQL table with the columns \"id\", \"name\", \"age\".", "input": "", "output": "CREATE TABLE `MyTable` (\n   `id` int(11) NOT NULL AUTO_INCREMENT,\n   `name` varchar(45) NOT NULL,\n   `age` int(11) NOT NULL,\n   PRIMARY KEY (`id`)\n);", "category": "Python"}, {"instruction": "Write a query in MySQL to find all records with the Age > 21.", "input": "", "output": "SELECT * FROM MyTable WHERE Age > 21;", "category": "Python"}, {"instruction": "Create a Java program that reads in two strings and outputs their longest common substring.", "input": "myCodingSkillzz and AnotherCodingSkill", "output": "CodingSkill", "category": "Python"}, {"instruction": "Create a Java program that reads in a sentence from the user and prints out the lengths of each word in the sentence.", "input": "This is a sentence", "output": "4 2 1 8", "category": "Python"}, {"instruction": "Write a function that takes two strings and determines if they are an anagram.", "input": "string1 = \"converse\"\nstring2 = \"conserve\"", "output": "def is_anagram(str1, str2): \n    # Get lengths of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If the length of both strings are not same,  \n    # then they cannot be anagram \n    if n1 != n2: \n        return 0\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return 0\n  \n    return 1\n\nis_anagram(string1, string2) // 1", "category": "Python"}, {"instruction": "Write a JavaScript function that removes duplicates from an array.", "input": "array = [1, 2, 3, 1, 4, 5, 6, 2, 8]", "output": "function removeDuplicates(array) { \n    let uniqueArray = [];\n    for (let i = 0; i < array.length; i++) { \n        if (uniqueArray.indexOf(array[i]) === -1) { \n            uniqueArray.push(array[i])\n        } \n    } \n    return uniqueArray;\n}\n\nremoveDuplicates(array); // [1, 2, 3, 4, 5, 6, 8]", "category": "Python"}, {"instruction": "Write a function to compute the Fibonacci numbers and the sum of their squares.", "input": "", "output": "def fibonacci (n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\ndef sum_of_squares (n):\n    result = 0\n    for i in range(n+1):\n        result += fibonacci(i)**2\n    return result", "category": "Python"}, {"instruction": "Write a Python program to abbreviate a name.", "input": "name = \"John Smith\"", "output": "def abbreviateName(name): \n    split_name = name.split(' '); \n    abbrev_name = str(split_name[0][0] + '.' + split_name[1]); \n    return abbrev_name;", "category": "Python"}, {"instruction": "Given a dictionary, write a function to count the number of items in the dictionary.", "input": "dictionary = {'name': 'John', 'age': 30}", "output": "def count_items(dict):\n    item_count = 0\n    for key in dict:\n        item_count += 1\n    return item_count", "category": "Python"}, {"instruction": "Write some HTML code that adds a background color to the complete web page.", "input": "", "output": "<html>\n  <head> \n    <style> body {background-color: #F0F0F0;}</style>\n  </head>\n</html>", "category": "Python"}, {"instruction": "Design a data structure to keep track of a student's marks for a given course.", "input": "", "output": "class StudentMark{ \n   //stores student ID \n   int student_id; \n   \n   //stores course name \n   string course_name; \n   \n   //stores marks \n   int marks; \n   \n   //constructor \n   StudentMark(int student_id, string course_name, int marks) \n   { \n      this->student_id = student_id; \n      this->course_name = course_name; \n      this->marks = marks; \n   } \n}", "category": "Python"}, {"instruction": "Implement the insertion sort algorithm.", "input": "[4, 6, 3, 8, 1, 8]", "output": "def insertion_sort(input_list):\n    for index in range(1, len(input_list)):\n        current_value = input_list[index]\n        position = index\n\n        while position > 0 and input_list[position - 1] > current_value:\n            input_list[position] = input_list[position - 1]\n            position = position - 1\n\n        input_list[position] = current_value\n    return input_list", "category": "Python"}, {"instruction": "Given the following list, use list comprehension to create a new list with the string \"student_\" added to the beginning of each student's name.", "input": "students = ['John', 'Randy', 'Marie', 'Clare']", "output": "new_list = [\"student_\" + name for name in students]", "category": "Python"}, {"instruction": "Initialize a list to store the square of all numbers from 1 to 10.", "input": "", "output": "my_list = [x**2 for x in range(1, 11)]", "category": "Python"}, {"instruction": "Construct a for loop in PHP that produces the integers from 0 to 10.", "input": "", "output": "for ($i = 0; $i <= 10; $i++) {\n  echo $i;\n}", "category": "Python"}, {"instruction": "Create an if statement in JavaScript that prints \"Your number is bigger than 10\" if a given number is bigger than 10.", "input": "", "output": "if (number > 10) {\n  console.log(\"Your number is bigger than 10\");\n}", "category": "Python"}, {"instruction": "Create a while loop in C++ that iterates over integers from 1 to 10.", "input": "", "output": "int i = 1;\nwhile (i <= 10) {\n    cout << i << endl;\n    i++;\n}", "category": "Python"}, {"instruction": "Construct a SQL query to find the employee records with salary between 2000 and 3000 dollars.", "input": "", "output": "SELECT * FROM Employees WHERE Salary BETWEEN 2000 AND 3000;", "category": "Python"}, {"instruction": "Which keyword is used to define a function in Python?", "input": "", "output": "The keyword used to define a function in Python is \"def\".", "category": "Python"}, {"instruction": "You need to write a query in SQL to calculate the total salary of the employees in the database.", "input": "", "output": "SELECT SUM(salary)\nFROM Employees;", "category": "Python"}, {"instruction": "Construct a set of HTML tags to design a simple two-column layout.", "input": "", "output": "<html>\n  <head>\n    <title>Two-column layout</title>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"column-left\">\n        <!--Your content here-->\n      </div>\n      <div class=\"column-right\">\n        <!--Your content here-->\n      </div>\n    </div>\n  </body>\n</html>", "category": "Python"}, {"instruction": "What is object-oriented programming, and what are the benefits of using it?", "input": "", "output": "Object-oriented programming (OOP) is a programming approach that is based on the concept of objects. It is used to create a model of a real or abstract system to make programming more efficient, easier to debug, and more maintainable. OOP allows developers to write code that is reusable and maintainable, as it enables the creation of components that can be adapted and used in a variety of different contexts. Additionally, OOP allows for better communication between different parts of a program, as components can communicate with each other in a simpler and more understandable manner.", "category": "Python"}, {"instruction": "Create a function in Python that performs a web scrape and returns the most frequent words from the resulting text.", "input": "", "output": "def scrape_frequent_words(url):\n    try:\n        from bs4 import BeautifulSoup\n        from collections import Counter\n    \n        # Get html from the given url\n        html_content = requests.get(url).text\n        # Parse the html\n        soup = BeautifulSoup(html_content)\n        \n        # Get all text from the page\n        all_texts = soup.find_all(text=True)\n\n        # Extract only words\n        words = [word for text in all_texts for word in text.split()]\n\n        # Calculate frequency \n        frequency = dict(Counter(words))\n        \n        # Return the word with most frequency \n        return max(frequency, key=frequency.get)", "category": "Python"}, {"instruction": "Write a SQL query to get employee names from the Employees table where salary is greater than 50000.", "input": "", "output": "SELECT Name FROM Employees WHERE Salary > 50000", "category": "Python"}, {"instruction": "Develop a program to convert an infix expression to prefix notation.", "input": "A*(B+C)-D/(E+F)", "output": "def infix_to_prefix(exp): \n\t# stack to store operators\n\tstack = [] \n\n\t# prefix expression\n\tpref_exp = \"\" \n\t\n\t# traverse through the expression\n\tfor char in exp: \n\t\t\n\t\t# if the character is an operand \n\t\t# add it to prefix expression\n\t\tif char.isalpha(): \n\t\t\tpref_exp += char \n\t\t\n\t\t# if the character is an operator\n\t\telif char in \"*/+-^\": \n\t\t\t\n\t\t\t# push the operator to the stack \n\t\t\tstack.append(char) \n\n\t\t# if the character is ')' \n\t\telif char == ')': \n\t\t\t\n\t\t\t# pop all the operators from \n\t\t\t# the stack until '(' is found \n\t\t\twhile(stack[-1] != '('): \n\t\t\t\tpref_exp += stack.pop() \n\t\t\t\n\t\t\t# remove '(' from the stack \n\t\t\tstack.pop() \n\t\t\t\n\t# add all the operators to the prefix expression \n\twhile len(stack) != 0: \n\t\tpref_exp += stack.pop() \n        \n\treturn pref_exp", "category": "Python"}, {"instruction": "In JavaScript, construct a function to count the occurence of an element in an array.", "input": "var array = [1, 2, 3, 4, 1];\nint element = 1;", "output": "function countOccurence(array, element) {\n    let count = 0;\n    array.forEach(el => {\n        if(el === element) \n            count++\n    });\n    return count;\n}\n\nvar array = [1, 2, 3, 4, 1];\nlet element = 1;\n\nconsole.log(countOccurence(array, element)); // 2", "category": "Python"}, {"instruction": "In Python, construct a function to fit a curve to a given set of data points.", "input": "xdata = [0, 1, 2, 4, 11, 18]\nydata = [2, 3, 4, 6, 12, 17]", "output": "from scipy.optimize import curve_fit\n\ndef func(x, a, b, c):\n    return a*x**2 + b*x + c\n\nxdata = [0, 1, 2, 4, 11, 18]\nydata = [2, 3, 4, 6, 12, 17]\n\npopt, pcov = curve_fit(func, xdata, ydata)", "category": "Python"}, {"instruction": "In Java, develop a program which prints the size of a given array.", "input": "int[] array = {1,2,3,4,5};", "output": "public class main{\n    public static void main(String[] args){\n        int[] array = {1, 2, 3, 4, 5};\n        System.out.println(\"Size of the array is: \" + array.length);\n    }\n}", "category": "Python"}, {"instruction": "How would you use a for loop in Python to print the sum of all even numbers between 50 and 100?", "input": "", "output": "total = 0\nfor i in range(50, 101):\n    if i % 2 == 0:\n        total += i\nprint(f\"The sum of all even numbers between 50 and 100 is {total}\")", "category": "Python"}, {"instruction": "Create a React component in JavaScript which displays the given string as a status update.", "input": "", "output": "import React from 'react';\n\nconst StatusUpdate = ({ statusText }) => {\n  return (\n    <div>\n      <p>{statusText}</p>\n    </div>\n  );\n};\n\nexport default StatusUpdate;", "category": "Python"}, {"instruction": "Write a piece of code in Java to check if the following string contains a numeric character.", "input": "\"Hello World!\"", "output": "String str = \"Hello World!\";\nboolean isNumeric = false; \n  \nfor (int i = 0; i < str.length(); i++) \n{ \n    if (Character.isDigit(str.charAt(i))) \n    { \n        isNumeric = true; \n        break; \n    } \n} \n\nif (isNumeric) \n    System.out.println(\"The given string contains a numeric character.\"); \nelse\n    System.out.println(\"The given string does not contain a numeric character.\");", "category": "Python"}, {"instruction": "How would you use an if-else statement in C# to check if a new account needs to be created for the following user?", "input": "username: \"johndoe\"\nstatus: \"inactive\"", "output": "string username = \"johndoe\";\nstring status = \"inactive\";\n\nif (status == \"inactive\") {\n    // Create new account for John Doe\n} else {\n    // No new account needs to be created\n}", "category": "Python"}, {"instruction": "Create a SQL query to update all rows of the table \"product\" if their stock is below 10.", "input": "", "output": "UPDATE product\nSET stock = 10\nWHERE stock < 10;", "category": "Python"}, {"instruction": "Write a JavaScript code to reverse the following string.", "input": "\"Hello World!\"", "output": "let str = \"Hello World!\";\nlet reversedStr = str.split(\"\").reverse().join(\"\");\nconsole.log(reversedStr);", "category": "Python"}, {"instruction": "How would you delete the element \"Apple\" from the following list?", "input": "[\"Pear\", \"Grape\", \"Apple\", \"Banana\", \"Mango\"]", "output": "fruit_list = [\"Pear\", \"Grape\", \"Apple\", \"Banana\", \"Mango\"]\nfruit_list.remove(\"Apple\")", "category": "Python"}, {"instruction": "Write a short piece of code in Java to display the following message.", "input": "", "output": "System.out.println(\"Welcome to the Java programming course!\");", "category": "Python"}, {"instruction": "Write code in Java to find the maximum value of the array.", "input": "[1, 4, 6, 8, 9, 4, 2]", "output": "public static double maxValue(double[] array) {\n    double maxValue = array[0];\n    for (int i = 1; i < array.length; i++) {\n        if (array[i] > maxValue)\n            maxValue = array[i];\n    }\n    return maxValue;\n}", "category": "Python"}, {"instruction": "Write a short piece of code in Python to calculate the area of a triangle with the sides 6 cm, 8 cm, and 10 cm.", "input": "", "output": "def calculate_triangle_area(side1, side2, side3):\n    '''This function calculates the area of a triangle given three sides.'''\n    s = (side1 + side2 + side3) / 2\n    return ((s*(s-side1)*(s-side2)*(s-side3))**0.5)\n\narea = calculate_triangle_area(6,8,10)\nprint(f\"The area of the triangle is {area} cm2\")", "category": "Python"}, {"instruction": "Make a call to the \"getProducts\" API Endpoint.", "input": "", "output": "fetch('https://api.example.com/getProducts', {\n    method: 'GET',\n    headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n}).then(res=>res.json())", "category": "Python"}, {"instruction": "Suggest an API endpoint in Ruby on Rails for creating a new blog post.", "input": "", "output": "post \"/posts\" do\n  post = Post.new(params[:post])\n  if post.save\n    status 202\n    json post.to_json\n  else\n    status 400\n    json post.errors\n  end\nend", "category": "Python"}, {"instruction": "Create a class in Python that implements the __len__ method to return the length of a given string.", "input": "", "output": "class StringLength:\n    def __len__(self, string):\n        return len(string)", "category": "Python"}, {"instruction": "Develop a function in C++ to find the roots of a quadratic equation ax^2 + bx + c = 0.", "input": "", "output": "double findRoots(double a, double b, double c) \n{\n    double result;\n\n    if ((b*b - 4*a*c) < 0) {\n        return INT_MIN;\n    } else {\n        result = (-b + sqrt(b*b - 4*a*c)) / (2*a);\n        return result;\n    }\n}", "category": "Python"}, {"instruction": "Develop a new class in Python to represent a Rectangle object with getArea() and getPerimeter() methods.", "input": "", "output": "class Rectangle: \n    def __init__(self, length, width): \n        self.length = length \n        self.width = width \n\n    def getArea(self): \n        return self.length * self.width \n\n    def getPerimeter(self): \n        return 2 * (self.length + self.width)", "category": "Python"}, {"instruction": "How is data stored in a binary tree in C++?", "input": "", "output": "Data is typically stored in a binary tree in C++ using a linked list with each node representing a data item. A node consists of a data element and two child nodes, known as the left and right nodes. The left node represents the lesser element, while the right node represents the greater element. Each node also includes a link to each of its children and a link to its parent node. This structure allows for efficient searching and insertion of elements in the binary tree.", "category": "Python"}, {"instruction": "Describe the differences between the stack and the heap memory in C++.", "input": "", "output": "The stack memory is a region of memory used for storing local variables and function parameters when a function is called, while the heap memory is a region of memory that is dynamically allocated during runtime and is used for storing objects and dynamic variables. The stack is managed and optimized by the CPU, while the heap is managed by the runtime environment. The stack is significantly faster than the heap as it uses pre-allocated memory and does not require memory fragmentation; however, the size of objects stored in the stack is limited. On the other hand, the heap can allocate larger blocks of memory, but the time taken to allocate a block is greater than that of the stack.", "category": "Python"}, {"instruction": "Develop a class in Java to implement a calculator with functions add(), subtract(), multiply(), and divide().", "input": "", "output": "public class Calculator {\n\n    public static double add(double a, double b) {\n        return a + b;\n    }\n\n    public static double subtract(double a, double b) {\n        return a - b;\n    }\n\n    public static double multiply(double a, double b) {\n        return a * b;\n    }\n\n    public static double divide(double a, double b) {\n        return a / b;\n    }\n\n}", "category": "Python"}, {"instruction": "What is the difference between the static and dynamic memory allocation in C++?", "input": "", "output": "Static memory allocation is a one-time allocation of memory that persists throughout the life of the program, while dynamic memory allocation is the allocation of memory during runtime as and when required. Static memory allocation provides better performance than dynamic memory allocation, but dynamic memory allocation allows for greater flexibility. Additionally, static memory allocation is more predictable in terms of memory usage, while dynamic memory allocation might result in memory wastage if the allocated memory is not released properly.", "category": "Python"}, {"instruction": "List all possible combinations of three elements from a given array.", "input": "[1, 2, 3, 4]", "output": "[1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]", "category": "Python"}, {"instruction": "Suggest an API endpoint for updating an existing blog post in Ruby on Rails.", "input": "", "output": "put \"/posts/:id\" do\n  post = Post.find(params[:id])\n  if post.update(params[:post])\n    status 200\n    json post.to_json\n  else\n    status 400\n    json post.errors\n  end\nend", "category": "Python"}, {"instruction": "Develop an HTML page with three sections, each containing different colors.", "input": "", "output": "<html>\n    <head>\n        <style>\n            #section1 {\n                background-color: red;\n            }\n            #section2 {\n                background-color: blue;\n            }\n            #section3 {\n                background-color: yellow;\n            }\n        </style>\n    </head>\n    <body>\n        <div id=\"section1\"></div>\n        <div id=\"section2\"></div>\n        <div id=\"section3\"></div>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Develop an HTML form which includes two input fields, an label and a submit button.", "input": "", "output": "<html>\n    <head>\n    </head>\n    <body>\n        <form>\n            <label>Name: </label><input type=\"text\" name=\"name\"><br>\n            <label>Age: </label><input type=\"text\" name=\"age\"><br>\n            <input type=\"submit\" value=\"Submit\">\n        </form>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Create a Swift class which includes one constant, one variable and one function.", "input": "", "output": "class MyClass { \n    let constant = \"constant value\" \n    var variable = 0 \n\n    func increase() { \n        variable += 1 \n    } \n}", "category": "Python"}, {"instruction": "Generate a dynamic HTML table displaying 10 random numbers from 1 to 100.", "input": "", "output": "<html>\n    <head>\n    </head>\n    <body>\n        <div>\n        <table>\n            <tr><th>Random Numbers</th></tr>\n            <tr><td><?php echo rand(1,100); ?></td></tr>\n            <tr><td><?php echo rand(1,100); ?></td></tr>\n            <tr><td><?php echo rand(1,100); ?></td></tr>\n            <tr><td><?php echo rand(1,100); ?></td></tr>\n            <tr><td><?php echo rand(1,100); ?></td></tr>\n            <tr><td><?php echo rand(1,100); ?></td></tr>\n            <tr><td><?php echo rand(1,100); ?></td></tr>\n            <tr><td><?php echo rand(1,100); ?></td></tr>\n            <tr><td><?php echo rand(1,100); ?></td></tr>\n            <tr><td><?php echo rand(1,100); ?></td></tr>\n        </table>\n        </div>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Write a SQL query to get all people living in London, ordered by their last name", "input": "", "output": "SELECT * \nFROM People \nWHERE city = 'London' \nORDER BY last_name ASC;", "category": "Python"}, {"instruction": "Develop an HTML page with a div and table, and use CSS to make alternating rows of the table red and blue.", "input": "", "output": "<html>\n    <head>\n        <style>\n            table tr:nth-child(2n) {\n                background-color: red;\n            }\n            table tr:nth-child(2n+1) {\n                background-color: blue;\n            }\n        </style>\n    </head>\n    <body>\n        <div>\n            <table>\n                <tr>\n                    <th>Cell 1</th>\n                    <th>Cell 2</th>\n                    <th>Cell 3</th>\n                </tr>\n                <tr>\n                    <td>Data 1</td>\n                    <td>Data 2</td>\n                    <td>Data 3</td>\n                </tr>\n                <tr>\n                    <td>Data 4</td>\n                    <td>Data 5</td>\n                    <td>Data 6</td>\n                </tr>\n            </table>\n        </div>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Write a SQL query to get all employees' name and salary who are from department \"IT\"", "input": "", "output": "SELECT name, salary \nFROM Employees \nWHERE department = 'IT';", "category": "Python"}, {"instruction": "Convert the following SQL query into a Java code using JDBC.", "input": "SELECT Employees.Name FROM Employees WHERE Employees.Salary > 50000", "output": "String queryString = \"SELECT Employees.Name FROM Employees WHERE Employees.Salary > ?\";\nPreparedStatement pstmt = conn.prepareStatement(queryString);\npstmt.setDouble(1, 50000);\nResultSet rs = pstmt.executeQuery();\nwhile (rs.next()) {\n    String name = rs.getString(1);\n    // Process the name\n}", "category": "Python"}, {"instruction": "Construct a SQL query to get all the rows of a table ordered by the largest value in each row first.", "input": "SELECT ...", "output": "SELECT * \nFROM Table \nORDER BY MAX(column1, column2, ...) DESC;", "category": "Python"}, {"instruction": "Write a MySQL query statement that find the total number of records in a table.", "input": "", "output": "SELECT COUNT(*) FROM table_name;", "category": "Python"}, {"instruction": "Calling a calculator API, what is the output of the query \"3 * (9 + 5) / 8\"?", "input": "", "output": "The output of the query is 9.375.", "category": "Python"}, {"instruction": "Create a SQL query that returns the average number of orders per month for customers in California.", "input": "", "output": "SELECT AVG(NumOrders) FROM \n (SELECT COUNT(OrderId) AS NumOrders \n  FROM Orders \n  WHERE State = 'CA' \n  GROUP BY MONTH(OrderDate)) AS TotalOrders;", "category": "Python"}, {"instruction": "Convert 10 decimals to binary.", "input": "10", "output": "1010", "category": "Python"}, {"instruction": "Create a SQL query to find all the departments with more than 3 employees.", "input": "", "output": "SELECT department, COUNT(*) \nFROM employees \nGROUP BY department \nHAVING COUNT(*) > 3;", "category": "Python"}, {"instruction": "Create a CSS selector to target the second and third <div> element with the class 'container'.", "input": "", "output": "div.container:nth-child(2), div.container:nth-child(3) { ... }", "category": "Python"}, {"instruction": "Create a SQL query to find the employees who live in California and earn more than $80,000 per year.", "input": "", "output": "SELECT * FROM employees \nWHERE state = 'California' AND salary > 80000;", "category": "Python"}, {"instruction": "Write a PHP snippet to set cookie for the current page with the name \"username\" and value \"foo\".", "input": "", "output": "setcookie('username', 'foo', 0);", "category": "Python"}, {"instruction": "Create a React component that renders a HTML anchor link with the text \"Visit my website\".", "input": "", "output": "import React from 'react'; \n \nconst Link = () => ( \n  <a href=\"/\">Visit my website</a> \n); \n \nexport default Link;", "category": "Python"}, {"instruction": "Create a CSS selector to target the inputs elements with a class 'button'.", "input": "", "output": "input.button { ... }", "category": "Python"}, {"instruction": "Create a Java method that takes three integers as parameters and computes their average.", "input": "", "output": "public static double threeIntAvg(int a, int b, int c) {\n    return (a + b + c) / 3.0;\n}", "category": "Python"}, {"instruction": "Write a JavaScript code to filter the values of an array which are greater than a given number.", "input": "array = [1, 2, 4, 5, 6, 8];\n value = 5;", "output": "function filterArrayValues(array, value) {\n    return array.filter(x => x > value);\n}\n\nif __name__ == '__main__':\n    array = [1, 2, 4, 5, 6, 8];\n    value = 5;\n    print(filterArrayValues(array, value))", "category": "Python"}, {"instruction": "Create an HTML page containing a form labeled \"Contact Us\" containing 3 input fields named: name, email, and message.", "input": "", "output": "<html>\n    <head>\n        <title>Contact Us</title>\n    </head>\n    <body>\n        <h1>Contact Us</h1>\n        <form>\n            Name: <input type=\"text\" name=\"name\"/><br />\n            Email: <input type=\"text\" name=\"email\"/><br />\n            Message: <input type=\"text\" name=\"message\"/><br />\n            <input type=\"submit\" value=\"Submit\" />\n        </form>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Compare two dates in JavaScript and return 1 if the first date is after the second date.", "input": "date1 = new Date('August 19, 2025');\ndate2 = new Date('August 20, 2025');", "output": "function compareDates(date1, date2) {\n    const timeDifference = date1.getTime() - date2.getTime(); \n    if(timeDifference > 0) {\n        // date1 is after date2\n        return 1;\n    } else {\n        // date2 is after date1\n        return 0;\n    }       \n}\n\nif __name__ == '__main__':\n    date1 = new Date('August 19, 2025');\n    date2 = new Date('August 20, 2025');\n    print(compareDates(date1, date2))", "category": "Python"}, {"instruction": "Create an array in JavaScript of objects, each with a name key and a value of a random number.", "input": "", "output": "let array = [];\n\nfor (let i = 0; i < 10; i++) {\n    let randomNumber = Math.floor(Math.random() * 100);\n    let obj = { name: `element ${i + 1}`, value: randomNumber };\n    array.push(obj);\n}\n\nconsole.log(array);", "category": "Python"}, {"instruction": "Create a JSON object to store student information like name, age, interests.", "input": "{\n    \"firstname\": \"John\",\n    \"lastname\": \"Smith\",\n    \"age\": 18,\n    \"interests\": [\"music\", \"sports\", \"reading\"]\n}", "output": "{\n    \"studentInfo\": {\n        \"firstname\": \"John\",\n        \"lastname\": \"Smith\",\n        \"age\": 18,\n        \"interests\": [\"music\", \"sports\", \"reading\"]\n    }\n}", "category": "Python"}, {"instruction": "Create a function in Python that takes two strings and checks if the characters in the second string exist in the first string.", "input": "s1 = \"hello world\"\ns2 = \"llo\"", "output": "def char_exists_in_string(s1, s2):\n    for char in s2:\n        if char not in s1:\n            return False\n    \n    return True\n\nif __name__ == '__main__':\n    s1 = \"hello world\"\n    s2 = \"llo\"\n    print(char_exists_in_string(s1, s2))", "category": "Python"}, {"instruction": "Write a SQL query to find the employees with an annual income greater than 10000.", "input": "", "output": "SELECT * FROM Employees \nWHERE annual_income > 10000", "category": "Python"}, {"instruction": "Write an HTML page containing an <input> element with the name \"username\".", "input": "", "output": "<html>\n  <head>\n  </head>\n  <body>\n    <input type=\"text\" name=\"username\"/>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a query to select a distinct list of data from an SQL table.", "input": "", "output": "SELECT DISTINCT * FROM <table_name>;", "category": "Python"}, {"instruction": "Create a dictionary with two keys and a list of values assigned to each key.", "input": "", "output": "my_dict = {\n    \"key1\": [1, 2, 3],\n    \"key2\": [4, 5, 6]\n}", "category": "Python"}, {"instruction": "Generate an array of random numbers with a size of 10.", "input": "", "output": "import random\n\nmy_arr = [random.randint(1,100) for _ in range(10)]\n\nprint(my_arr) # Output: [76, 64, 26, 62, 59, 35, 66, 18, 52, 49]", "category": "Python"}, {"instruction": "Suggest a regex pattern to match a valid alphanumeric string.", "input": "", "output": "^[a-zA-Z0-9]+$", "category": "Python"}, {"instruction": "Suggest a JavaScript code to make an AJAX request to fetch data from a server.", "input": "", "output": "var XHR = new XMLHttpRequest();\n\nXHR.onreadystatechange = function () {\n    if (XHR.readyState == 4 && XHR.status == 200) {\n        var data = JSON.parse(XHR.responseText);\n        // Handle the response data here\n    }\n};\n\nXHR.open(\"GET\", url);\nXHR.send();", "category": "Python"}, {"instruction": "Which of the following is a valid way to declare a variable in Java?", "input": "", "output": "int variable; \nString variable = \"\";\nboolean variable = false;", "category": "Python"}, {"instruction": "Take the following dictionary and sort its values alphabetically.", "input": "{\"SPACELINE\": \"Flight of the Future\", \"LUCY\": \"Rocket Science\"}", "output": "sorted_dict = dict(sorted({\"SPACELINE\": \"Flight of the Future\", \"LUCY\": \"Rocket Science\"}.items(), key=lambda x: x[1]))", "category": "Python"}, {"instruction": "How would you reverse the order of the elements in a given singly linked list in-place?", "input": "", "output": "def reverse_inplace(head): \n    if head is None or head.next is None: \n        return head  \n        \n    prev_node = None\n    next_node = None\n    curr_node = head  \n    \n    while curr_node is not None: \n        next_node = curr_node.next\n        curr_node.next = prev_node\n        prev_node = curr_node\n        curr_node = next_node\n        \n    return prev_node", "category": "Python"}, {"instruction": "Take the following string and read it into a list in Python.", "input": "\"apple, banana, peach, orange\"", "output": "list = [x.strip() for x in \"apple, banana, peach, orange\".split(\",\")]", "category": "Python"}, {"instruction": "Write a code to calculate the sum of the cubes of the numbers in the list.", "input": "[1,2,3,4,5]", "output": "\"\"\"\nFunction to calculate the sum of the cubes of the numbers in the list\n\"\"\"\ndef list_cube_sum(list):\n    \"\"\"\n    Calculate the sum of the cubes of the numbers in the list\n    \"\"\"\n    total = 0\n    for i in list:\n        total += i**3\n    return total\n\nif __name__ == '__main__':\n    print(list_cube_sum([1, 2, 3, 4, 5])) # prints 225", "category": "Python"}, {"instruction": "Create a new HTML page and add a heading to it.", "input": "", "output": "<!DOCTYPE html>\n<html>\n <head>\n  <title>My HTML Page</title>\n </head>\n <body>\n  <h1>My Page Heading</h1>\n </body>\n</html>", "category": "Python"}, {"instruction": "Write a code to format a number with two decimal places.", "input": "23.14159", "output": "\"\"\"\nFunction to format a number with two decimal places\n\"\"\"\n\ndef two_decimals(num):\n    \"\"\"\n    Format a number with two decimal places\n    \"\"\"\n    return \"{:.2f}\".format(num)\n\nif __name__ == '__main__':\n    print(two_decimals(23.14159)) # prints 23.14", "category": "Python"}, {"instruction": "Find the first unique number in the list.", "input": "[1,2,3,4,5,5,4,3,2,1,6]", "output": "6", "category": "Python"}, {"instruction": "Delete every third character in a string.", "input": "String: \"Hello World\"", "output": "HloWrd", "category": "Python"}, {"instruction": "Create a Python dictionary with three elements and print the key-value pairs.", "input": "", "output": "my_dict = {\n    'name': 'John',\n    'age': 30,\n    'city': 'New York'\n}\n\nfor key, value in my_dict.items():\n    print(f'{key}: {value}')", "category": "Python"}, {"instruction": "Create a Python class with an instance method that prints the number of objects created.", "input": "", "output": "class Person:\n     num_objects = 0\n\n     def __init__(self):\n          Person.num_objects += 1\n    \n     def print_num_objects(self):\n          print(Person.num_objects)", "category": "Python"}, {"instruction": "How would you implement Skip-Gram model in TensorFlow?", "input": "", "output": "To implement a Skip-Gram model in TensorFlow, you would need to define the model architecture. You would then need to define the training data, which can be done using tf.data packages. Finally, you would need to use an optimization algorithm such as the AdamOptimizer to train the model.", "category": "Python"}, {"instruction": "Write Python code to print the last three elements from a given list.", "input": "[2, 4, 6, 8, 10, 12]", "output": "my_list = [2, 4, 6, 8, 10, 12]\nprint(my_list[-3:]) # Output: [10, 12]", "category": "Python"}, {"instruction": "Write a function to compare two lists and print out whether they are equal or not.", "input": "list1 = [1, 2, 3]\nlist2 = [2, 3, 4]", "output": "def compare_lists(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i] != list2[i]:\n                return False\n        return True\n\nlist1 = [1, 2, 3]\nlist2 = [2, 3, 4]    \nprint(compare_lists(list1, list2)) # Output: False", "category": "Python"}, {"instruction": "Sum all the numbers divisible by 3 and 7 in the list.", "input": "[27, 21, 63, 77, 49]", "output": "84", "category": "Python"}, {"instruction": "Write a function to print a user's name and age from a given dictionary.", "input": "user_data = {'name':'John Doe',\n             'age': 24\n            }", "output": "def print_info(data):\n print(\"Name: \" + data['name'])\n print(\"Age: \" + str(data['age']))", "category": "Python"}, {"instruction": "Suggest an edit to fix the following code snippet.", "input": "for num in range(10):\n  if num % 2 == 0\n    print(num);", "output": "for num in range(10):\n  if num % 2 == 0:\n    print(num);", "category": "Python"}, {"instruction": "Create a SQL query to display the details of all employees who have served more than 4 years in their current role.", "input": "Sample table: \n\n+------------+----------+------------+--------------+--------------------------+\n| emp_id     | name     | department | doj          | current_role              |\n+------------+----------+------------+--------------+--------------------------+\n|    101     | John     | IT         | 2018-04-10   | Senior Software Engineer  |\n|    102     | Tom      | HR         | 2017-02-28   | HR Manager                |\n|    103     | Jane     | Accounting | 2015-10-07   | Junior Accountant         |\n+------------+----------+------------+--------------+--------------------------+", "output": "SELECT \n    emp_id,\n    name,\n    department,\n    doj,\n    current_role\nFROM \n    employees\nWHERE \n    DATE_SUB(CURDATE(), INTERVAL 4 YEAR) <= doj;", "category": "Python"}, {"instruction": "Print the \"hello world\" in uppercase.", "input": "", "output": "print(\"HELLO WORLD\".upper())", "category": "Python"}, {"instruction": "Using the code, update the variable to count from 4 to 14.", "input": "x = 4", "output": "for x in range(4, 15):\n    print(x)", "category": "Python"}, {"instruction": "Create a class with two methods, one to return the name and the other to return the age.", "input": "", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def get_name(self):\n        return self.name\n\n    def get_age(self):\n        return self.age", "category": "Python"}, {"instruction": "Create a new list where the elements are the square of the elements in the given list.", "input": "list = [1, 2, 3, 4]", "output": "new_list = [x**2 for x in list]", "category": "Python"}, {"instruction": "Write a function, which given an array and a number, returns the array with the number added.", "input": "arr = [1, 2, 3, 4]\nnum = 10", "output": "def add_num(arr, num):\n    return [x + num for x in arr]", "category": "Python"}, {"instruction": "Create classes in Java to represent a school and its students.", "input": "", "output": "public class School {\n    private String name;\n    private List<Student> students;\n\n    //constructor, getters, setters, and other methods\n    \n    public void addStudent(Student student) {\n        students.add(student);\n    }\n}\n\npublic class Student {\n    private String name;\n    private int age;\n\n    //constructor, getters, setters, and other methods\n    \n    public void setAge(int age) {\n        this.age = age;\n    }\n}", "category": "Python"}, {"instruction": "Develop an AI Assistant to identify questions in a given sentence.", "input": "", "output": "A question-answering system is an AI Assistant that can identify questions in a given sentence. It utilizes natural language processing techniques such as language models, semantic analysis, and lookup tables to analyze the given sentence and extract out the questions.", "category": "Python"}, {"instruction": "Describe three ways to optimize a given database.", "input": "", "output": "Three ways to optimize a database are database normalization, indexing, and partitioning. Database normalization involves restructuring a database schema into multiple tables and establishing referential integrity. Indexing is a technique used to speed up the retrieval of data from a table. Partitioning, also known as sharding, is a database optimization technique that divides a database into multiple, smaller databases.", "category": "Python"}, {"instruction": "Implement source-to-source transformation of the following code.", "input": "x = a + b\ny = a + c\nz = b + d", "output": "x = a + b\ny = x + (c - b)\nz = x + (d - b)", "category": "Python"}, {"instruction": "Suggest a vector representation for the following phrases.", "input": "happy, angry", "output": "happy = [1, 0, 0, 0]\nangry = [0, 1, 0, 0]", "category": "Python"}, {"instruction": "Identify an ideal algorithm to find the longest palindrome in a given string.", "input": "", "output": "The Manacher\u2019s Algorithm is an ideal algorithm to find the longest palindrome in a given string. This algorithm utilizes dynamic programming to find the longest palindrome in linear time complexity by iterating through the string and checking whether a substring is a palindrome or not.", "category": "Python"}, {"instruction": "Develop a function to evaluate the following expression.", "input": "3 + 2 * 4", "output": "def evaluate(expr):\n  return eval(expr)\n\nprint(evaluate('3 + 2 * 4'))\n\n# Output\n11", "category": "Python"}, {"instruction": "Fill in the blanks to calculate the standard deviation of an array using the formula.", "input": "", "output": "\ud835\udf0e = \u221a((\u2211(x - mean)^2)/n)", "category": "Python"}, {"instruction": "Combine a loop and a conditional statement to output the following", "input": "[2, 3, 4, 5]", "output": "arr = [2, 3, 4, 5] \n\nfor i in arr: \n    if i % 2 == 0: \n        print(i) \n\n# Output: \n2\n4", "category": "Python"}, {"instruction": "Suggest a technique to optimize memory usage", "input": "", "output": "One way to optimize memory usage is to use strategic data structures like hash tables and trees that can store data in a more space-efficient manner. Additionally, one can use code optimization techniques such as code reuse and memory caching to reduce memory usage. One should also think carefully about data structure design choices, such as choosing between an array and linked list, to minimize memory usage.", "category": "Python"}, {"instruction": "Convert the given code to use a dictionary instead of lists.", "input": "list1 = ['a', 'b', 'c']\nlist2 = ['d', 'e', 'f']", "output": "dict1 = {'a': 'd', 'b': 'e', 'c': 'f'}", "category": "Python"}, {"instruction": "Write a function that takes a single parameter and returns the absolute value of the parameter.", "input": "", "output": "def absolute_value(x):\n    if x < 0:\n        return -x\n    else:\n        return x", "category": "Python"}, {"instruction": "Construct two strings from a given string and print these strings separately.", "input": "str = \"Hello World!\"", "output": "str1 = str[:5]\nstr2 = str[6:]\nprint(str1)\nprint(str2)", "category": "Python"}, {"instruction": "Code a function in Java to search an array for a specific element.", "input": "array x = [1, 4, 6, 8, 5]\nelement = 5", "output": "public static int linearSearch(int[] x, int element) \n    {\n        for (int i = 0; i < x.length; i++) { \n            if (x[i] == element) \n                return i; \n        } \n        return -1; \n    }", "category": "Python"}, {"instruction": "Create a JavaScript class with 3 methods and a constructor", "input": "", "output": "class Person {\n\n    // constructor\n    constructor(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    // method to get the name\n    getName() {\n        return this.name;\n    }\n\n    // method to get the age\n    getAge() {\n        return this.age;\n    }\n\n    // method to set the age\n    setAge(age) {\n        this.age = age;\n    }\n}", "category": "Python"}, {"instruction": "Use the given JSON data to create a function that returns the number of males in the dataset.", "input": "Sample JSON data:\n\n[\n  {\n    \"name\": \"John\",\n    \"age\": 25,\n    \"gender\": \"male\"\n  },\n  {\n    \"name\": \"Jane\",\n    \"age\": 22,\n    \"gender\": \"female\"\n  },\n  {\n    \"name\": \"Bob\",\n    \"age\": 28,\n    \"gender\": \"male\"\n  },\n  {\n    \"name\": \"Jill\",\n    \"age\": 24,\n    \"gender\": \"female\"\n  }\n]", "output": "def get_num_males(data):\n    # create a counter variable\n    num_males = 0\n    # loop through the data\n    for person in data:\n        if person['gender'] == 'male':\n            num_males += 1\n    # return the number of males\n    return num_males", "category": "Python"}, {"instruction": "Edit the following JavaScript code to remove any warnings given by the linter.", "input": "let favoriteNumber = [7,9,42];\nconst printNumber = (number) => console.log(number);\n\nfor (let idx = 0; idx < favoriteNumber.length; idx +=1) {\n  printNumber(favoriteNumber[idx])\n}", "output": "let favoriteNumber = [7, 9, 42];\nconst printNumber = (number) => console.log(number);\n\nfor (let idx = 0; idx < favoriteNumber.length; idx += 1) {\n  printNumber(favoriteNumber[idx]);\n}", "category": "Python"}, {"instruction": "Create a user interface to display a chart showing the number of people of a certain gender and age group.", "input": "Sample JSON data to be used: \n\n[\n  {\n    \"name\": \"John\",\n    \"age\": 25,\n    \"gender\": \"male\"\n  },\n  {\n    \"name\": \"Jane\",\n    \"age\": 22,\n    \"gender\": \"female\"\n  },\n  {\n    \"name\": \"Bob\",\n    \"age\": 28,\n    \"gender\": \"male\"\n  },\n  {\n    \"name\": \"Jill\",\n    \"age\": 24,\n    \"gender\": \"female\"\n  }\n]", "output": "import json\nimport plotly.graph_objs as go\n\ndef create_chart():\n    data = json.load('data.json')\n    males = 0 \n    females = 0\n    male_ages = [0] * 100\n    females_ages = [0] * 100\n\n    # count males/females and age group \n    for person in data:\n        if person['gender'] == 'male':\n            males += 1\n            age = int(person['age'])\n            male_ages[age] += 1\n        else:\n            females += 1\n            age = int(person['age'])\n            females_ages[age] += 1\n\n    # create data\n    data = [\n        go.Bar(\n            name='Males',\n            x=list(range(100)),\n            y=male_ages\n        ),\n        go.Bar(\n            name='Females',\n            x=list(range(100)),\n            y=females_ages\n        )\n    ]\n\n    # Create Layout\n    layout = go.Layout(\n        title='Number of People by Gender and Age Group',\n        yaxis=dict(title='Number of People'),\n        xaxis=dict(title='Age')\n    )\n\n    # Create Figure\n    figure = go.Figure(data=data, layout=layout)\n\n    # Plot and save the chart\n    figure.show()\n    figure.write_image('gender_age.png')\n\ncreate_chart()", "category": "Python"}, {"instruction": "Create a hash table in Python using a dictionary.", "input": "", "output": "h = {}\n\n# Add key:value pairs\nh['key1'] = 'value1'\nh['key2'] = 'value2'\nh['key3'] = 'value3'", "category": "Python"}, {"instruction": "Write a MongoDB query to get the first 3 documents in a collection of documents.", "input": "", "output": "db.collection.find({}).limit(3)", "category": "Python"}, {"instruction": "Write a SQL query to create a table with three columns called A, B, and C, where the data type for each column is defined as string.", "input": "", "output": "CREATE TABLE table_name (\n  A VARCHAR(255) NOT NULL,\n  B VARCHAR(255) NOT NULL,\n  C VARCHAR(255) NOT NULL\n);", "category": "Python"}, {"instruction": "Create a function to add two integers in assembly language.", "input": "", "output": "add:\n    ; Function to add two integers\n \n    ; Set stack frame\n    push    ebp\n    mov     ebp, esp\n \n    ; Store the arguments on the stack\n    mov     eax, [ebp + 8] ; First argument\n    mov     ebx, [ebp + 12] ; Second argument\n \n    ; Add them\n    add     eax, ebx\n \n    ; Retrieve the stack frame\n    pop     ebp\n \n    ; Return\n    ret", "category": "Python"}, {"instruction": "Create a nested For loop in Python with the outer loop counting from 0  to 3 and the inner loop counting from 5 to 10.", "input": "", "output": "for i in range(0,4):\n  for j in range(5,11):\n    print(\"outer loop at: \"+str(i)+\" inner loop at: \"+str(j))", "category": "Python"}, {"instruction": "Create a for loop in Python for the range between 0 and 10.", "input": "", "output": "for i in range(0,11):\n\tprint(i)", "category": "Python"}, {"instruction": "Create a softmax activation function in Python.", "input": "", "output": "def softmax(x):\n  \"\"\"Compute softmax values for each sets of scores in x.\"\"\"\n  e_x = np.exp(x - np.max(x))\n  return e_x / e_x.sum(axis=0)", "category": "Python"}, {"instruction": "Create a program in C# to check if an input string contains a specific character or not.", "input": "input_string = \"Hello World\"\ncharacter = 'l'", "output": "public static bool CheckChar(String input_string, char character)  \n{  \n    bool found = false; \n  \n    foreach (char c in input_string)  \n    {  \n        if (c == character)  \n        {  \n            found = true;  \n            break;  \n        }  \n    }  \n    return found;  \n}  \n  \n// Driver Code \nString input_string = \"Hello World\"; \n  \nchar character = 'l'; \n  \nif (CheckChar(input_string, character)) \n    Console.WriteLine(\"Yes\"); \nelse\n    Console.WriteLine(\"No\");", "category": "Python"}, {"instruction": "Create an algorithm in Java to calculate the average of five numbers.", "input": "", "output": "public static double avgOfFiveNums(int a, int b, int c, int d, int e) {\n \n  double avg = (a + b + c + d + e) / 5.0;\n \n  return avg;\n}", "category": "Python"}, {"instruction": "Create a program in HTML to display the following two paragraphs side by side.", "input": "P1: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\nP2: Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.", "output": "<html>\n<head>\n    <title>Side by Side Paragraphs</title>\n    <style>\n  .column {\n    float: left;\n    width: 50%;\n  }\n\n  /* Clear floats after the columns */\n  .row:after {\n    content: \"\";\n    display: table;\n    clear: both;\n  }\n    </style>\n</head>\n<body>\n\n    <div class=\"row\">\n  <div class=\"column\">\n    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n  </div>\n  <div class=\"column\">\n    <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n  </div>\n    </div>\n\n</body>\n</html>", "category": "Python"}, {"instruction": "Using SQL, write a query to find the maximum price of a product in the database.", "input": "", "output": "SELECT MAX(price)\nFROM products;", "category": "Python"}, {"instruction": "Write an API call in Python using the request module to get data from a URL.", "input": "https://www.example.com", "output": "import requests \n\nr = requests.get(url = \"https://www.example.com\") \ndata = r.json()", "category": "Python"}, {"instruction": "Suggest a way to secure user passwords", "input": "", "output": "One way to secure user passwords is to use a secure hash algorithm such as bcrypt, scrypt, etc. to hash the passwords before storing them in the database. This ensures that even if the passwords are exposed, they will not be easily readable. Furthermore, it is important to use a secure server and to monitor the database for any suspicious activity.", "category": "Python"}, {"instruction": "Create a class in Python which models a bank account using the concept of class and object.", "input": "", "output": "class BankAccount: \n def __init__(self, name, balance): \n  self.name = name \n  self.balance = balance \n def deposit(self, amount): \n  self.balance += amount \n def withdraw(self, amount): \n  self.balance -= amount", "category": "Python"}, {"instruction": "Create a Javascript object that stores the number of cats and dogs in a given location.", "input": "", "output": "const pets = {\n  cats: 10,\n  dogs: 12\n};", "category": "Python"}, {"instruction": "Generate a function that takes an array of integers and rearranges the elements in a cyclical fashion, such that the element at index 0 comes last, the element at index 1 goes to the front, the element at index 2 is inserted after the element at the last index and so on.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def rearrange_array(arr):\n    output = []\n    for i in range(len(arr)):\n        idx = (i + 1) % len(arr)\n        output.append(arr[idx])\n    return output", "category": "Python"}, {"instruction": "Modify the function such that it takes two arrays, one containing numbers and the other containing symbols as arguments and returns a string where each number is replaced with its associated symbol.", "input": "nums = [1,2,3,4,5]\nsymbols = [\"A\",\"B\",\"C\",\"D\",\"E\"]", "output": "def join_nums_symbols(nums, symbols):\n    assert len(nums) == len(symbols), \"length of nums and symbols should be equal\"\n\n    result = \"\"\n    for i in range(len(nums)):\n        result += str(nums[i]) + symbols[i]\n    return result", "category": "Python"}, {"instruction": "Generate a program to calculate the combination of n elements taken k at a time.", "input": "n = 8\nk = 3", "output": "def combinations(n, k):\n    if k == 0 or k > n:\n        return []\n    result = []\n    def dfs(start,n,k):\n        if k == 0:\n            result.append(temp[:])\n            return \n        for i in range(start, n):\n            temp.append(i)\n            dfs(i+1, n, k-1)\n            temp.pop()\n            \n    temp = []\n    dfs(0, n, k)\n    return result", "category": "Python"}, {"instruction": "When given a list of strings, identify which strings are palindromes", "input": "list = ['abc', 'abb', 'cba']", "output": "result = []\nfor s in list:\n    if s == s[::-1]:\n        result.append(s)\n\nprint(result) #['abb']", "category": "Python"}, {"instruction": "Write a function that takes in a string and returns a list of all words in the string in alphabetical order", "input": "str = \"Here is a sentence to sort\"", "output": "def alphabetically_sort_words(str):\n    words = str.split(' ')\n    words.sort()\n    return words\n\nprint(alphabetically_sort_words(\"Here is a sentence to sort\")) # prints ['Here', 'a', 'is', 'sentence', 'sort', 'to']", "category": "Python"}, {"instruction": "Write a code that returns a 2-dimensional array of size n by m containing all 0s", "input": "n = 3 and m = 5", "output": "def create2DArray(n, m):\n    array = [[0 for x in range(m)] for y in range(n)]\n    return array\n\nprint(create2DArray(3, 5)) \n# prints [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]", "category": "Python"}, {"instruction": "Write a function that returns the larger number from two numbers provided.", "input": "4, 5", "output": "def largest(a, b):\n    \"\"\"Returns the larger number from two numbers provided.\"\"\"\n    if a > b:\n        return a\n    else:\n        return b\n\nnum1 = 4\nnum2 = 5\nprint(largest(num1, num2))", "category": "Python"}, {"instruction": "Create a list comprehension that multiplies each item in a list by 2.", "input": "[1,2,3,4]", "output": "list_comprehension = [x*2 for x in [1,2,3,4]]\nprint(list_comprehension)", "category": "Python"}, {"instruction": "What is the C# code to check if a number is divisible by 5?", "input": "", "output": "bool isDivisibleByFive(int number) \n{ \n    return number % 5 == 0; \n}", "category": "Python"}, {"instruction": "You need to create a web form with 3 input fields: Name, Age, and Email.", "input": "", "output": "<form>\n    Name: <input type=\"text\" name=\"name\" required>\n    Age: <input type=\"number\" name=\"age\" required>\n    Email: <input type=\"email\" name=\"email\" required>\n</form>", "category": "Python"}, {"instruction": "Read this HTML code and explain in a few words what this snippet does.", "input": "<div id=\"test\">Hello World!</div>", "output": "This HTML code snippet creates a div with the id \"test\" and displays the text \"Hello World!\" within it.", "category": "Python"}, {"instruction": "Convert this SQL query into a valid Postgres statement.", "input": "SELECT * FROM student WHERE GPA = 4.0", "output": "SELECT * FROM student WHERE GPA = 4.0::float8;", "category": "Python"}, {"instruction": "What type of data is this PHP statement trying to process?", "input": "$number = intval($input_value);", "output": "This statement is trying to process a numerical data type.", "category": "Python"}, {"instruction": "Figure out which column's information is being displayed in this SQL query.", "input": "SELECT name, age FROM students WHERE id = 8", "output": "name and age.", "category": "Python"}, {"instruction": "Convert this Python data structure into a valid JSON string.", "input": "data = {\n    \"key1\" : [1,2,3],\n    \"key2\" : {\n        'subkey1' : True,\n        'subkey2' : 'Hello World'\n    }\n}", "output": "json_string = json.dumps(data)", "category": "Python"}, {"instruction": "Create a Python function and call it split_string that takes a string and a delimiter as arguments and returns a list containing the string split by the delimiter.", "input": "my_string = \"hello, world\"\ndelimiter = ','", "output": "def split_string(string, delimiter):\n    strList = string.split(delimiter)\n    return strList", "category": "Python"}, {"instruction": "Create a program that prints the last two elements of a list.", "input": "arr = [1,2,3,4,5,6,7]", "output": "def get_last_two(arr):\n    return arr[-2:]", "category": "Python"}, {"instruction": "Given a string, write an algorithm to remove all occurrences of a given letter.", "input": "my_string = \"Python is a popular programming language\"\nletter = 'o'", "output": "def remove_letter(string, letter):\n    output = \"\"\n    for s in string:\n        if s != letter:\n            output += s\n    return output", "category": "Python"}, {"instruction": "Create a function that evaluates a mathematical expression stored as a string.", "input": "expression = \"1+2*3/4\"", "output": "def evaluate_expr(expression):\n    return eval(expression)", "category": "Python"}, {"instruction": "Develop a C# function to check if a given number is Armstrong or not. An Armstrong number is one which is equal to the sum of its digits raised to the power of the number of digits.", "input": "", "output": "static bool IsArmstrong(int num)\n{\n  int origNum = num;\n  int sum = 0;\n  int digits = 0;\n\n  while (num != 0)\n  {\n    digits++;\n    num /= 10;\n  }\n  num = origNum;\n  while (num != 0)\n  {\n    sum +=Math.Pow(num % 10, digits);\n    num /= 10;\n  }\n\n  if (sum== origNum)\n     return true;\n\n  return false;\n}", "category": "Python"}, {"instruction": "Develop an algorithm to find the depth in a tree.", "input": "", "output": "def tree_depth(root): \n    if root is None: \n        return 0 ;  \n  \n    else :  \n        left_height = tree_depth(root.left) \n        right_height = tree_depth(root.right) \n  \n        if (left_height > right_height): \n            return left_height+1\n        else: \n            return right_height+1", "category": "Python"}, {"instruction": "Write a C# function to generate all combinations of length n of a given array.", "input": "", "output": "static void GenerateCombinations(int[] arr, int n)\n        {\n            int[] result = new int[n];\n            GenerateCombination(arr, 0, 0, result);\n        }\n\n        static void GenerateCombination(int[] arr, int start, int index, int[] result)\n        {\n            if (index == result.Length)\n            {\n                Console.WriteLine(String.Join(\",\", result));\n                return;\n            }\n\n            for (int i = start; i < arr.Length; i++)\n            {\n                result[index] = arr[i];\n                GenerateCombination(arr, i + 1, index + 1, result);\n            }\n        }", "category": "Python"}, {"instruction": "Develop an algorithm to reverse an integer.", "input": "123", "output": "def reverse(num): \n    reversed_num = 0\n    while num>0:\n        last = num%10\n        reversed_num = (reversed_num*10)+last\n        num = num//10\n    return reversed_num\n\nnum = 123\nprint(\"Reverse of\", num, \"is\", reverse(num)) \n# Output: Reverse of 123 is 321", "category": "Python"}, {"instruction": "Implement a SQL query to find the top 5 highest paid employees.", "input": "", "output": "SELECT name, salary \nFROM employees \nORDER BY salary DESC \nLIMIT 5;", "category": "Python"}, {"instruction": "Perform a search operation to find all the words starting with \"th\".", "input": "Sentence: The big cat ate the small mouse.", "output": "['The', 'the', 'that']", "category": "Python"}, {"instruction": "Determine the maximum and minimum value of an array.", "input": "[3, 6, 9, -1, 2]", "output": "Max: 9\nMin: -1", "category": "Python"}, {"instruction": "Build a state machine in Python to process incoming keyboard events", "input": "", "output": "# Define a StateMachine class\nclass StateMachine: \n    def __init__(self): \n        self.handlers = {} \n        self.startState = None\n        self.endStates = [] \n  \n    def add_state(self, state): \n        self.handlers[state.name] = state\n  \n    def set_start(self, name): \n        self.startState = name\n  \n    def set_end(self, name): \n        self.endStates.append(name) \n  \n    def run(self): \n        try: \n            handler = self.handlers[self.startState] \n        except: \n            raise(Exception, \"Must call .set_start() before .run()\")\n        while True:\n            # Get the next keyboard event\n            event = get_event()\n            if event:\n                newState = handler.run(event) \n            if newState.name in self.endStates: \n                break \n            else: \n                handler = self.handlers[newState.name]", "category": "Python"}, {"instruction": "Compare the two strings and report the index of the first mismatch.", "input": "String 1: hello\nString 2: holla", "output": "3", "category": "Python"}, {"instruction": "Write a code to calculate the age in years and months given the date of birth.", "input": "Date of Birth: 4 June 1998", "output": "def age_calc(date_of_birth):\n    \"\"\"\n    This function takes in a date of birth and calculates \n    the age in years and months.\n    \"\"\"\n    today = datetime.date.today()\n    age_years = today.year - date_of_birth.year\n    age_months = today.month - date_of_birth.month\n    if age_months < 0:\n        age_years -= 1\n        age_months += 12\n    return age_years, age_months\n\ndate_of_birth = datetime.date(1998, 6, 4)\nprint(age_calc(date_of_birth))\n\n# Output: (21, 10)", "category": "Python"}, {"instruction": "Create a function that filters a list of strings based on their length.", "input": "List = [\"Carrot\", \"Apple\", \"Orange\", \"Banana\", \"Pear\"]", "output": "def filter_string_length(strings):\n    \"\"\"\n    This function takes in a list of strings and filters out those\n    that are not longer than 5 characters.\n    \"\"\"\n    return [s for s in strings if len(s) > 5]\n\nlist_strings = [\"Carrot\", \"Apple\", \"Orange\", \"Banana\", \"Pear\"]\nfiltered_list = filter_string_length(list_strings)\nprint(filtered_list)\n\n# Output: [\"Carrot\", \"Orange\", \"Banana\"]", "category": "Python"}, {"instruction": "How to loop over a key-value pair in a dictionary?", "input": "", "output": "A key-value pair in a dictionary can be looped over using the \"for\" loop with the \"items()\" method. For example, if the dictionary is {'a': 1, 'b': 2, 'c': 3}, it can be looped over as:\n\nfor key, value in dictionary.items():\n  print(key, value)\n\nIt will print the key-value pairs as:\na 1\nb 2\nc 3", "category": "Python"}, {"instruction": "How to convert a list of words into a set?", "input": "", "output": "A list of words can be converted into a set by using the built-in \"set()\" function. For example, if the list is [\"apple\", \"banana\", \"cherry\"], the set converted from this list will look like {\"apple\", \"banana\", \"cherry\"}.", "category": "Python"}, {"instruction": "How to retrieve the data of the first element in a JSON array?", "input": "", "output": "The data of the first element in a JSON array can be retrieved using the index \"0\". For example, if the JSON array is [\"apple\", \"banana\", \"cherry\"], then the data of the first element can be retrieved by \"array[0]\". It would return the data \"apple\".", "category": "Python"}, {"instruction": "Debug and resolve the error in the following code:", "input": "message = \"Welcome!\"\nprint(message)\nprintf(message)", "output": "The error is \"NameError: name 'printf' is not defined\". To solve the error, remove the second line \"printf(message)\" as \"printf()\" is not a valid function.", "category": "Python"}, {"instruction": "Write a CSS code to change the font size of an element with id=\"main\".", "input": "", "output": "#main {\n font-size: 16px;\n}", "category": "Python"}, {"instruction": "Augment an integer list with zeros after every 4 elements.", "input": "List = [1,2,3,4,5,6,7,8]", "output": "def list_augment(int_list):\n    \"\"\"\n    This function takes in a list of integers and \n    augments it with zeros after every 4 elements.\n    \"\"\"\n    augmented_list = []\n    for i in range(0, len(int_list), 4):\n        augmented_list.append(int_list[i:i + 4])\n        augmented_list.append(0)\n    augmented_list.pop()\n    return [item for sublist in augmented_list for item in sublist]\n    \nint_list = [1,2,3,4,5,6,7,8]\nprint(list_augment(int_list))\n\n# Output: [1, 2, 3, 4, 0, 5, 6, 7, 8, 0]", "category": "Python"}, {"instruction": "Write a regex pattern to match a float number with at least one decimal place.", "input": "", "output": "^-?\\d+(\\.\\d+)?$", "category": "Python"}, {"instruction": "Write a SQL query to select all the people between the ages of 18 and 25", "input": "", "output": "SELECT * FROM people WHERE age BETWEEN 18 AND 25;", "category": "Python"}, {"instruction": "Generate a series of natural numbers from 1 to 50 using regex", "input": "", "output": "^(?:(((?!([0-4]?[0-9]|50)|)|50)|[1-4]?[0-9])$", "category": "Python"}, {"instruction": "Create a C++ program for grading system", "input": "", "output": "#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n    double grade;\n\n    cout << \"Enter your test score (0-100): \";\n    cin >> grade;\n\n    if (grade >= 90 && grade <= 100)\n    {\n        cout << \"Grade: A\";\n    }\n    else if (grade >= 80 && grade <90)\n    {\n        cout << \"Grade: B\";\n    }\n    else if (grade >= 70 && grade <80)\n    {\n        cout << \"Grade: C\";\n    }\n    else if (grade >= 60 && grade <70)\n    {\n        cout << \"Grade: D\";\n    }\n    else if (grade >= 0 && grade <60)\n    {\n        cout << \"Grade: F\";\n    }\n\n    return 0;\n}", "category": "Python"}, {"instruction": "Develop a program in Python that takes two array elements as input and finds their product", "input": "Array1: [1, 5, 8, 9]\nArray2: [2, 3, 4, 6]", "output": "import numpy as np\n\narr1 = np.array([1,5,8,9])\narr2 = np.array([2,3,4,6])\n\nresult = arr1 * arr2\n\nprint(f'Product of the two arrays: {result}')", "category": "Python"}, {"instruction": "Develop a Java program that takes two strings as input and outputs the common characters in both strings.", "input": "String A: abcde\nString B: defgh", "output": "public class CommonChars {\n    public static void main(String[] args) {\n        String str1 = \"abcde\";\n        String str2 = \"defgh\";\n       \n        //Loop through both strings\n        for (int i = 0; i < str1.length(); i++) {\n            char ch1 = str1.charAt(i);\n            for (int j = 0; j < str2.length(); j++) {\n                char ch2 = str2.charAt(j);\n                \n                // Compare characters\n                if (ch1 == ch2) {\n                    System.out.println(ch1);\n                }\n            }\n        }\n   }\n}", "category": "Python"}, {"instruction": "Edit the following code to perform arithmetic operation", "input": "#include <stdio.h>\n \nint main(void) \n{\n    int a = 5;\n    int b = 4;\n \n    printf(\"%d\", a);\n    printf(\"%d\", b);\n \n    return 0;\n}", "output": "#include <stdio.h>\n \nint main(void) \n{\n    int a = 5;\n    int b = 4;\n \n    printf(\"%d + %d = %d\\n\", a, b, a+b);\n \n    return 0;\n}", "category": "Python"}, {"instruction": "Rank a list of integer from high to low", "input": "[2, 5, 8, 3, 9, 6]", "output": "[9, 8, 6, 5, 3, 2]", "category": "Python"}, {"instruction": "Analyse a provided JSON object and change the value of a specific key to the sum of 2 other keys", "input": "{\n  \"key1\": 10,\n  \"key2\": 20,\n  \"key3\": 0\n}", "output": "{\n  \"key1\": 10,\n  \"key2\": 20,\n  \"key3\": 30\n}", "category": "Python"}, {"instruction": "Write a SQL query to find the average price of the products in a given product type.", "input": "", "output": "SELECT AVG(price) \nFROM products \nWHERE type = 'product_type'", "category": "Python"}, {"instruction": "Suggest a use case for natural language processing in healthcare.", "input": "", "output": "Natural language processing can be used in healthcare to analyze patient documents for insights, automate medical coding, detect drug interactions, identify risk factors and trends, and improve healthcare communication. For example, a natural language processing system can be used to scan patient notes to identify potential symptoms and suggest possible diagnoses. Additionally, natural language processing systems can also be used to automate medical coding and make medical texts searchable and easier to understand.", "category": "Python"}, {"instruction": "Suggest a use case for reinforcement learning in business.", "input": "", "output": "Reinforcement learning can be used in business to automate processes, optimize products and services, improve marketing campaigns, and develop better customer experiences. For example, a reinforcement learning model can learn the best way to stock products in a store and optimize product placement to maximize sales. Additionally, reinforcement learning can also be used to automate customer service tasks, adjust product prices in real-time based on customer demand, and optimize marketing campaigns with personalized content.", "category": "Python"}, {"instruction": "Suggest a possible use case of deep learning in healthcare.", "input": "", "output": "Deep learning can be used in healthcare to improve diagnosis accuracy, automate medical image analysis, predict risk of diseases, and improve treatments. For example, a deep learning model can be used to analyze CT scans to detect cancerous nodules or classify different types of mammograms. Additionally, deep learning models can also be used to predict a patient's risk or response to specific treatments, and predict the onset of certain diseases.", "category": "Python"}, {"instruction": "Parse and save the following article in a dataset.", "input": "\"The Boston Celtics have signed forward Gordon Hayward to a four-year deal.\n\nGood move from the Celtics, who are coming off of a teams worst record since 2007?\n\nThe 29-year-old Hayward has averaged 10.7 points and 5 rebounds per game in his eight-year career\"", "output": "{\n    \"team\": \"Boston Celtics\", \n    \"player\": \"Gordon Hayward\", \n    \"contract\": \"Four-year deal\", \n    \"recent_record\": \"teams worst record since 2007\", \n    \"average_points\": 10.7, \n    \"average_rebounds\": 5\n}", "category": "Python"}, {"instruction": "Write a C++ function to remove all the duplicates in a given array.", "input": "", "output": "void removeDuplicates(int arr[], int n) \n{ \n   // Return, if array is empty \n   // or contains a single element \n   if (n==0 || n==1) \n       return; \n  \n   int temp[n]; \n  \n   // Start traversing elements \n   int j = 0; \n   for (int i=0; i<n-1; i++) \n   { \n       // If current element is not equal \n       // to next element then store that \n       // current element \n       if (arr[i] != arr[i+1]) \n           temp[j++] = arr[i]; \n   } \n  \n   // Store the last element as whether \n   // it is unique or repeated, it hasn't \n   // stored previously \n   temp[j++] = arr[n-1]; \n  \n   // Modify original array \n   for (int i=0; i<j; i++) \n       arr[i] = temp[i]; \n}", "category": "Python"}, {"instruction": "Create an array in Javascript that contains elements of different datatypes.", "input": "", "output": "let array = [1, \"String\", true, { key: \"value\" }, [1,2]];", "category": "Python"}, {"instruction": "Create an animated loading bar using CSS.", "input": "", "output": "<div class=\"progress-bar\">\n  <div class=\"progress-bar-fill\"></div>\n</div>\n\n<style>\n  .progress-bar {\n    width: 200px;\n    height: 30px;\n    background-color: #ccc;\n    border-radius: 5px;\n    box-shadow: inset 0 0 5px #ccc;\n  }\n  .progress-bar-fill {\n    width: 0%;\n    height: 30px;\n    background-color: #02b3e4;\n    border-radius: 5px;\n\n    transition: width 1s;\n  }\n\n  .progress-bar:hover .progress-bar-fill {\n    width: 100%;\n  }\n</style>", "category": "Python"}, {"instruction": "Write a CSS selector that selects every second list item.", "input": "", "output": "ul li:nth-child(2n+2) {\n    // Styling\n}", "category": "Python"}, {"instruction": "Generate a class in java to convert Fahrenheit to Celsius", "input": "", "output": "public class FahrenheitToCelsius { \n  \n    // F to C conversion formula \n    public static double fahrenheitToCelsius(double fahrenheit) { \n        return ((fahrenheit - 32) * 5) / 9; \n    } \n  \n    public static void main(String[] args) { \n        double fahrenheit = 100; \n        double celsius = fahrenheitToCelsius(fahrenheit); \n        System.out.printf(\"%.2f degree Fahrenheit is equal to %.2f degree Celsius\",fahrenheit,celsius); \n    } \n}", "category": "Python"}, {"instruction": "Develop a program in Swift to check if three sides form a valid triangle", "input": "", "output": "import Foundation\n\nfunc isTriangle(sideA: Int, sideB: Int, sideC: Int) -> Bool {\n    let sides = [sideA, sideB, sideC].sorted()\n  \n    return sides[2] < sides[1] + sides[0]\n}\n\n// Usage\nprint(isTriangle(sideA: 3, sideB: 4, sideC: 6) // Output: true\nprint(isTriangle(sideA: 3, sideB: 9, sideC: 10) // Output: false", "category": "Python"}, {"instruction": "Write code to construct a linked list in C++.", "input": "Node data:\n- 2\n- 4\n- 5\n- 9", "output": "#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n \n// Utility function to create a linked list\nNode* createLinkedList(int arr[], int n)\n{\n    Node* head = new Node();\n    Node* temp = head;\n    for (int i = 0; i < n; i++) {\n        Node* newNode = new Node();\n        newNode->data = arr[i];\n        temp->next = newNode;\n        temp = temp->next;\n    }\n    temp->next = nullptr;\n    return head;\n}\n \nint main()\n{\n    int arr[]={2, 4, 5, 9}; \n    Node* head = createLinkedList(arr, 4);\n    return 0;\n}", "category": "Python"}, {"instruction": "What are the differences between a Java applet and a Java application?", "input": "", "output": "The main difference between a Java applet and a Java application is that an applet is a client-side application that is downloaded from server and is run in a web browser, while a Java application is a stand-alone program which runs directly on the included JVM. Applet code is able to access resources from the server, like databases and other back-end services, while a Java application runs within its own sandbox. Additionally, a Java applet requires a web browser plug-in in order to run, while a Java application does not.   Another important difference between a Java applet and a Java application is that the code for a Java applet is visible to the end user, while the code for a Java application is hidden from the user. Thus, Java applets cannot be used to secure confidential information or data.  Finally, Java applets are limited by the client system due to the fact that they are displayed and executed in the web browser, while Java applications are platform-independent and can be executed on any operating system.", "category": "Python"}, {"instruction": "Implement a web scraper in Python to fetch all the URLs from a given website.", "input": "The website URL is https://www.example.com", "output": "import re\nimport requests\n\nurls = set()\n \ndef get_urls(url):\n    website = requests.get(url)\n    content = website.text\n    links = re.findall(r'<a .*?href=[\\'\"](.*?)[\\'\"].*?>', content)\n \n    for i in links:\n        if i.startswith(\"/\"):\n            base_url = url\n            i = base_url + i\n            if i in urls:\n                continue\n            urls.add(i)\n            get_urls(i)\n        elif url in i:\n            if i in urls:\n                continue\n            urls.add(i)\n            get_urls(i)\n \nif __name__ == \"__main__\":\n    get_urls(\"https://www.example.com\")\n    for i in urls:\n        print(i)", "category": "Python"}, {"instruction": "Convert this string to a Sanskrit translation.", "input": "Hello world", "output": "namask\u0101ra vasudeva", "category": "Python"}, {"instruction": "Create a HTML page with a table which contains data about the student population.", "input": "", "output": "<html>\n<body>\n\n<table>\n<tr>\n  <th>Student Name</th>\n  <th>Class</th>\n  <th>Age</th>\n</tr>\n<tr>\n  <td>John</td>\n  <td>8th</td>\n  <td>14</td>\n</tr>\n<tr>\n  <td>Ann</td>\n  <td>9th</td>\n  <td>15</td>\n</tr>\n<tr>\n  <td>James</td>\n  <td>10th</td>\n  <td>16</td>\n</tr>\n</table>\n\n</body>\n</html>", "category": "Python"}, {"instruction": "Given a text string modify it by capitalizing the letters after a period.", "input": "hello world. this is from gpt", "output": "hello world. This is from GPT", "category": "Python"}, {"instruction": "Create some sample data to test a supervised learning algorithm.", "input": "", "output": "import numpy as np\nX = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ny = np.array([1, 0, -1])", "category": "Python"}, {"instruction": "Create a function to print the current local time.", "input": "", "output": "def printCurrentLocalTime():\n    currentLocalTime = datetime.datetime.now()\n    print(currentLocalTime.strftime(\"%c\"))", "category": "Python"}, {"instruction": "Write an iterator in Python to iterate through the given list and output each element", "input": "myList = ['Hi', 'Bye', 'Hello', 'World']", "output": "def iterateMyList(myList):\n    iterator = iter(myList)\n    while True:\n        try: \n            print(next(iterator))\n        except StopIteration: \n            break", "category": "Python"}, {"instruction": "Create an array of integers that contain all the prime numbers between 1 and 50", "input": "", "output": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]", "category": "Python"}, {"instruction": "Create a TensorFlow tensor with the following data", "input": "[[1, 2],\n[3, 4],\n[5, 6]]", "output": "tf.constant([[1., 2.], [3., 4.], [5., 6.]])", "category": "Python"}, {"instruction": "Using the given linked list, find out the second last element.", "input": "1 -> 3 -> 5 -> 7 -> 9 -> 11", "output": "Node *secondLastElement(Node *head)\n{\n    if (head == NULL || head->next == NULL) \n        return NULL;\n \n    Node *secondLast = head;\n    while (secondLast->next->next != NULL) \n        secondLast = secondLast->next;\n    return secondLast;\n}", "category": "Python"}, {"instruction": "Write a Java method to calculate the total marks of a student given their marks of 5 subjects.", "input": "int marks_sub1 = 80;\nint marks_sub2 = 90;\nint marks_sub3 = 85;\nint marks_sub4 = 92;\nint marks_sub5 = 87;", "output": "public static int calculateTotalMarks(int marks_sub1, int marks_sub2, int marks_sub3, int marks_sub4, int marks_sub5) {\n    return marks_sub1 + marks_sub2 + marks_sub3 + marks_sub4 + marks_sub5;\n}", "category": "Python"}, {"instruction": "Construct a CSS class to set the font color of a paragraph to pink.", "input": "", "output": ".pinktext {\n    color: pink;\n}", "category": "Python"}, {"instruction": "Create a regex pattern to identify alphanumeric characters.", "input": "", "output": "[A-Za-z0-9]", "category": "Python"}, {"instruction": "Write a SQL query to select the top 10 countries ordered by population density.", "input": "Table Name: countries \nColumns: name, population, area", "output": "SELECT name, population, area \nFROM countries \nORDER BY population/area DESC \nLIMIT 10;", "category": "Python"}, {"instruction": "Write HTML code to set the font size of a page to 18px.", "input": "", "output": "<html>\n    <head>\n    <style>\n    body {\n        font-size: 18px;\n    }\n    </style>\n    </head>\n</html>", "category": "Python"}, {"instruction": "Write a Java program that prints all integers between 30 & 50 (inclusive).", "input": "", "output": "public class PrintIntegers \n{\n    public static void main(String[] args)\n    {\n        for(int i=30; i<=50; i++)\n        {\n            System.out.println(i);    \n        }\n    }\n}", "category": "Python"}, {"instruction": "Create a Linux shell command to find out the total disk space available in a given mount point", "input": "", "output": "df -h /mount/point", "category": "Python"}, {"instruction": "Output the sum of the following two arrays", "input": "arr_1 = [2,3,4]\narr_2 = [1,2,3]", "output": "arr_1 = [2,3,4]\narr_2 = [1,2,3]\n\nsum = 0\nfor i in range(len(arr_1)):\n    sum += arr_1[i] + arr_2[i]\n\nprint(\"The sum of the two arrays is\",sum)", "category": "Python"}, {"instruction": "Write a user authentication code in Python", "input": "", "output": "def authentication(username,password): \n    if username == \"username\" and password == \"password\": \n        print (\"Login successful\") \n    else: \n        print (\"Incorrect username or password\") \n\nusername = input(\"Enter your username: \")\npassword = input(\"Enter your password: \")\n\nauthentication(username, password)", "category": "Python"}, {"instruction": "Update the following function so that it returns the greatest among three numbers", "input": "def find_max(a, b):\n    if a > b:\n        return a\n    else:\n        return b", "output": "def find_max(a, b, c):\n    if a >= b and a >= c:\n        return a\n    elif b >= a and b >= c:\n        return b\n    else:\n        return c", "category": "Python"}, {"instruction": "Create a program using PHP to display the length of the longest common substring in two given strings.", "input": "", "output": "<?php \n  \n// Function to find the length of the longest common substring \nfunction lcsLength($str1, $str2) \n{ \n    // store the lengths of strings    \n    $len1 = strlen($str1);     \n    $len2 = strlen($str2);    \n    \n    // Declare empty 2D array of size  \n    // (length of str1 x length of str2)    \n    $dp = [];     \n    $max = 0;     \n  \n    // initialize all elements of dp[][] = 0    \n    for ($i = 0; $i <= $len1; $i++) \n    { \n        for ($j = 0; $j <= $len2; $j++) \n        { \n            $dp[$i][$j] = 0; \n        } \n    }     \n  \n    //LCS procedure   \n    for ($i = 0; $i <= $len1; $i++) \n    { \n        for ($j = 0; $j <= $len2; $j++) \n        { \n            // if character of str1 and str2  \n            // match and indices are not same    \n            if ($i > 0 &&  \n                $j > 0 &&  \n                $str1[$i - 1] == $str2[$j - 1])   \n            { \n                // reduce length by 1    \n                $dp[$i][$j] = $dp[$i - 1][$j - 1] + 1; \n                  \n                // update the maximum length  \n                $max = max($max, $dp[$i][$j]); \n            } \n        } \n    } \n  \n    // return the maximum length     \n    return $max; \n} \n  \n// Driver Code \n$str1 = \"abcdxyz\"; \n$str2 = \"xyzabcd\"; \n  \n// Function Call \necho lcsLength($str1, $str2); \n  \n?>", "category": "Python"}, {"instruction": "Write a code to get the top 10 trending topics on Twitter with their volume using the Twitter API.", "input": "", "output": "\"\"\"\nGet the top 10 trending topics on Twitter with their volume using the Twitter API\n\"\"\"\n\nimport tweepy\n\n#Authenticate to Twitter\nauth = tweepy.OAuthHandler(\"CONSUMER_KEY\", \"CONSUMER_SECRET\")\nauth.set_access_token(\"ACCESS_KEY\", \"ACCESS_SECRET\")\n\n#Create API Object\napi = tweepy.API(auth)\n\n#Get top 10 trending topics\ntrends = api.trends_place(23424975) # 23424975 is the WOEID code for the US\n\n#Print the top 10 trending topics\nfor trend in trends[0][\"trends\"][:10]:\n    print(trend[\"name\"] + \" (Volume: \" + str(trend[\"tweet_volume\"]) + \")\")", "category": "Python"}, {"instruction": "Develop an algorithm in Python to determine whether two strings are anagrams.", "input": "", "output": "def is_anagram(string1, string2):\n    # Create a dictionaries for strings\n    string1_dict = {}\n    string2_dict = {}\n  \n    # Add the chars from each string to the dictionaries\n    for char in string1:\n        if char not in string1_dict:\n            string1_dict[char] = 1\n        else:\n            string1_dict[char] += 1\n    \n    for char in string2:\n        if char not in string2_dict:\n            string2_dict[char] = 1\n        else:\n            string2_dict[char] += 1\n    \n    # Check if the dictionaries have the same entries\n    for key in string1_dict:\n        if key not in string2_dict:\n            return False\n        elif string1_dict[key] != string2_dict[key]:\n            return False\n    \n    return True\n  \n# Test the algorithm\nstring1 = \"listen\"\nstring2 = \"silent\"\n\nif(is_anagram(string1, string2)):\n    print(\"The strings are anagrams\")\nelse:\n    print(\"The strings are not anagrams\")", "category": "Python"}, {"instruction": "Create a Swift program to display the letters of the English alphabet in ascending order.", "input": "", "output": "let letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nfor letter in letters {\n    print(letter)\n}", "category": "Python"}, {"instruction": "Build a MapReduce job with Hadoop to find the 99th percentile of a given data set.", "input": "", "output": "//Mapper Code\n \nimport java.io.IOException;\n \nimport org.apache.hadoop.io.LongWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapreduce.Mapper;\n \npublic class MapperClass extends Mapper<LongWritable, Text, Text, LongWritable> {\n \n    LongWritable one = new LongWritable(1);\n    Text data = new Text();\n \n    @Override\n    protected void map(LongWritable key, Text value, Context context) \n      throws IOException, InterruptedException {\n \n        String[] line = value.toString().split(\",\");\n        String number = line[0];\n        // Emit key-value pair for number\n        data.set(number);\n        context.write(data, one);\n \n    }\n  \n}\n \n//Reducer Code\n \nimport java.io.IOException;\n \nimport org.apache.hadoop.io.LongWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapreduce.Reducer;\n \npublic class ReducerClass extends Reducer<Text, LongWritable, Text, LongWritable> {\n \n    int percentile;\n    @Override\n    protected void setup(Context context) \n      throws IOException, InterruptedException {\n \n        //Get percentile from context configuration\n        percentile = context.getConfiguration().getInt(\"percentile\", 99);\n    }\n \n    @Override\n    protected void reduce(Text key, Iterable<LongWritable> values,\n      Context context)\n      throws IOException, InterruptedException {\n \n        LongWritable result = new LongWritable();\n        int sum = 0;\n        // Sum up the values\n        for (LongWritable value : values) {\n            sum += value.get();\n        }\n \n        // Calculate percentile\n        int percentage = (sum*100)/percentile;\n \n        if (percentile == percentage) {\n            result.set(Long.parseLong((key.toString())));\n            context.write(new Text(\"Percentile 99:\"), result);\n        }\n \n    }\n  \n}", "category": "Python"}, {"instruction": "Create an array of objects in JavaScript that contains five objects, each representing a different programming language.", "input": "", "output": "var languages = [\n    {langName: \"JavaScript\", creator: \"Brendan Eich\", releaseYear: 1995},\n    {langName: \"Python\", creator: \"Guido van Rossum\", releaseYear: 1991},\n    {langName: \"C\", creator: \"Dennis Ritchie\", releaseYear: 1972},\n    {langName: \"Java\", creator: \"James Gosling\", releaseYear: 1995},\n    {langName: \"C++\", creator: \"Bjarne Stroustrup\", releaseYear: 1985}\n]", "category": "Python"}, {"instruction": "Implement a function in C that given inputs x, y and z, return the largest of them.", "input": "x = 3, y = 4, z = 6", "output": "#include <stdio.h>\n \n// Function to find maximum \nint max_of_three(int x, int y, int z) \n{ \n   int max = x; \n\t\n   if (y > max) \n      max = y; \n     \n   if (z > max) \n      max = z; \n   \n   return max; \n} \n \n// Driver program\nint main() \n{ \n   int x = 3, y = 4, z = 6; \n   printf(\"%d\", max_of_three(x, y, z)); \n \n   return 0; \n}", "category": "Python"}, {"instruction": "Write a SQL query to get the title and year of the oldest movie in a database.", "input": "", "output": "SELECT title, year \nFROM movies\nORDER BY year ASC \nLIMIT 1;", "category": "Python"}, {"instruction": "Select all the records from a SQL table where the `name` column contains the value `John`.", "input": "", "output": "SELECT * FROM table_name WHERE `name` LIKE '%John%';", "category": "Python"}, {"instruction": "Write a SQL statement to retrieve the first three customers from a table.", "input": "", "output": "SELECT * FROM Customers LIMIT 3;", "category": "Python"}, {"instruction": "Write a Python function that takes an array of strings as an argument and returns a boolean.", "input": "", "output": "def check_array(arr):\n  if len(arr) == 0:\n    return False\n\n  for str in arr:\n    if len(str) == 0:\n      return False\n   \n  return True", "category": "Python"}, {"instruction": "Write an HTML page with an input form having two text input fields", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>My page</title>\n</head>\n<body>\n  <form>\n    <input type=\"text\" name=\"name\" placeholder=\"Name\">\n    <input type=\"text\" name=\"email\" placeholder=\"Email\">\n    <input type=\"submit\" value=\"Submit\">\n  </form>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create a SQL query to get the highest salary in the table 'Employee'", "input": "", "output": "SELECT MAX(Salary) FROM Employee;", "category": "Python"}, {"instruction": "Create a SQL query to find all first names in the table 'Employee'", "input": "", "output": "SELECT FirstName FROM Employee;", "category": "Python"}, {"instruction": "Create a new Python dictionary with numbers 1-10 as keys and their corresponding squares as values.", "input": "", "output": "squares = {1:1, 2:4, 3:9, 4:16, 5:25, 6:36, 7:49, 8:64, 9:81, 10:100}", "category": "Python"}, {"instruction": "Print out the string formed by repeating each character in a given string n times.", "input": "String: \"abc\", n: 3", "output": "def repeat_string(string, n):\n    repeated = \"\"\n    for letter in string:\n        for _ in range(n):\n            repeated += letter\n    return repeated", "category": "Python"}, {"instruction": "Build a program that prints out the length of a given list.", "input": "", "output": "def list_length(list):\n    return len(list)", "category": "Python"}, {"instruction": "Code a function to clamp a given number between a minimum value and maximum value.", "input": "Number: 8, Minimum: 3, Maximum: 10", "output": "def clamp_number(num, min_value, max_value):\n    if num < min_value: \n        return min_value \n    elif num > max_value: \n        return max_value \n    else: \n        return num", "category": "Python"}, {"instruction": "Develop a program that prints out the output of the following expression.", "input": "[2, 4, 6, 8]", "output": "def expression_output(lst):\n    s = 0\n    for i in lst:\n        s += i**2 - 5*i + 6\n    return s", "category": "Python"}, {"instruction": "Create a linked list from the given array of numbers.", "input": "[2, 4, 5, 6, 7]", "output": "Head -> 2 -> 4 -> 5 -> 6 -> 7 -> None", "category": "Python"}, {"instruction": "Compare 2 databases and update non matching information from database A to database B using SQL.", "input": "Table A: \n\n| name | age | \n|------|-----|\n| John | 20  | \n| Joe  | 25  | \n\nTable B:\n\n| name | age |\n|------|-----|\n| John | 25  |", "output": "UPDATE TableB  \nSET TableB.age = TableA.age \nFROM TableA \nWHERE TableB.name = TableA.name;", "category": "Python"}, {"instruction": "Introduce a vector of size 10 with all elements initialized to 0.", "input": "", "output": "vector<int> v(10, 0);", "category": "Python"}, {"instruction": "Write a class in Python to represent a division with two integers and the following operations: addition, subtraction, multiplication and division.", "input": "", "output": "class Division():\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        \n    def add(self):\n        return self.x + self.y\n    \n    def subtract(self):\n        return self.x - self.y\n    \n    def multiply(self):\n        return self.x * self.y\n    \n    def divide(self):\n        return self.x / self.y\n    \n    \ndiv = Division(10, 5)\nprint(\"Addition of the two numbers:\", div.add())\nprint(\"Subtraction of the two numbers:\", div.subtract())\nprint(\"Multiplication of the two numbers:\", div.multiply())\nprint(\"Division of the two numbers:\", div.divide())", "category": "Python"}, {"instruction": "Write code to detect the dominant language in a string.", "input": "This is a test string with multiple languages, including French, Spanish, and English.", "output": "import langdetect\n\ndef detect_language(s):\n    \"\"\"\n    Detects the dominant language from a given string.\n\n    Parameters\n    ----------\n    s : str\n        A string containing multiple languages\n\n    Returns\n    -------\n    str\n        The dominant language found in the given string\n    \"\"\"\n    return langdetect.detect(s)\n\ntext = \"This is a test string with multiple languages, including French, Spanish, and English.\"\nlang = detect_language(text)\nprint('The dominant language found in the text is:', lang)", "category": "Python"}, {"instruction": "Train a machine learning model to classify cats and dogs.", "input": "", "output": "\"\"\"\nTrain a machine learning model to classify cats and dogs\n\"\"\"\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers import Activation, Dropout, Flatten, Dense\nfrom keras import backend as K\n\n# Setting up Image Data Generator\ntrain_data_dir = 'data/train'\nvalidation_data_dir = 'data/validation'\n\nimg_width, img_height = 100, 100\ntrain_datagen = ImageDataGenerator(\n rescale=1. / 255,\n shear_range=0.2,\n zoom_range=0.2,\n horizontal_flip=True)\n\ntest_datagen = ImageDataGenerator(rescale=1. / 255)\n\ntrain_generator = train_datagen.flow_from_directory(\n train_data_dir,\n target_size=(img_width, img_height),\n batch_size=32,\n class_mode='binary')\n\nvalidation_generator = test_datagen.flow_from_directory(\n validation_data_dir,\n target_size=(img_width, img_height),\n batch_size=32,\n class_mode='binary')\n\n# Setting up the model\nmodel = Sequential()\nmodel.add(Conv2D(32, (3, 3), input_shape=(img_width, img_height, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(32, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(64, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(64))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))\n\nmodel.compile(loss='binary_crossentropy',\n optimizer='rmsprop',\n metrics=['accuracy'])\n\n# Training the model\nmodel.fit_generator(\n train_generator,\n steps_per_epoch=2000,\n epochs=50,\n validation_data=validation_generator,\n validation_steps=800)", "category": "Python"}, {"instruction": "Explain how to detect prime numbers in Python.", "input": "", "output": "We can detect prime numbers in Python by using a for loop. The for loop will iterate over all numbers from 2 up to the given number. For each number we loop through, we check to see if the number is divisible by any other number greater than 1. If the number is divisible by any other number, then we know it is not a prime number. If the number is only divisible by 1 and itself, then we know it is a prime number.", "category": "Python"}, {"instruction": "Create a JavaScript function to find the length of the longest common substring between \"apple\" and \"pineapple\".", "input": "", "output": "function longestCommonSubstring(str1, str2) {\n  let longestSubstring = '';\n  let longestStringLength = 0;\n\n  for (let i = 0; i < str1.length; i++) {\n    for (let j = 0; j < str2.length; j++) {\n      let tempSubstring = '';\n      let k = i;\n\n      while (str1[k] === str2[j]) {\n        tempSubstring += str1[k++];\n        j++;\n      }\n      \n      if (tempSubstring.length > longestStringLength) {\n        longestStringLength = tempSubstring.length;\n        longestSubstring = tempSubstring;\n      }\n    }\n  }\n  \n  return longestSubstring;\n}\n\nlongestCommonSubstring(\"apple\", \"pineapple\"); // output -> \"apple\"", "category": "Python"}, {"instruction": "Suggest a method in Python for sorting a list of strings on the basis of their length in ascending order.", "input": "", "output": "We can use the built-in sorted() function to sort the list of strings on the basis of their length in ascending order. The syntax for sorting is as follows:\n\nsorted(list_of_strings, key=len)\n\nwhere 'list_of_strings' is the list of strings we want to sort and 'len' is the length function for getting the length of each string.", "category": "Python"}, {"instruction": "Suggest a solution for validating a password which should contain at least 1 uppercase character, 1 lowercase character and 1 digit.", "input": "", "output": "We can use a regular expression to validate a password. A regular expression to validate a password with at least 1 uppercase character, 1 lowercase character and 1 digit should be:\n\n^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).+$\n\nIf the password matches the regular expression, the password is valid. Otherwise, the password is invalid.", "category": "Python"}, {"instruction": "Write a script which takes a list as an argument and shuffles it.", "input": "my_list = [1,2,3,4,5]", "output": "import random\n\ndef shuffle_list(my_list):\n    random.shuffle(my_list)\n    return my_list", "category": "Python"}, {"instruction": "Write a script which receives two integers as parameters and returns their average as output.", "input": "", "output": "def average(a, b):\n    return (a+b)/2", "category": "Python"}, {"instruction": "Create a function in Python which takes a string as an argument and returns the first character of the string in upper case.", "input": "", "output": "def first_upper_char(input_string):\n    if len(input_string) == 0:\n        return ''\n    else:\n        return input_string[0].upper()", "category": "Python"}, {"instruction": "Generate a short HTML div element.", "input": "", "output": "<div></div>", "category": "Python"}, {"instruction": "Suggest a solution to store years in ISO 8601 format in Python.", "input": "", "output": "We can use the datetime.date class to store dates in ISO 8601 format. We just need to create an instance of datetime.date using the year, month and day. Then, we can convert it to the ISO 8601 format string using isoformat() method of datetime.date. For example:\nimport datetime\ndate = datetime.date(2016, 1, 1)\niso_date = date.isoformat()\nprint(iso_date) // Output: '2016-01-01'", "category": "Python"}, {"instruction": "Construct a bash command to list all network connections in the system.", "input": "", "output": "netstat -an", "category": "Python"}, {"instruction": "Create a script in Python which takes a number as an argument and prints its corresponding nth Fibonacci number.", "input": "", "output": "def fibonacci(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)", "category": "Python"}, {"instruction": "Implement a Fibonacci series generator using Python.", "input": "", "output": "def generate_fibonacci(n):\n a, b = 0, 1\n fibonacci_series = [a]\n for i in range(n-1):\n a, b = b, a+b\n fibonacci_series.append(b)\n return fibonacci_series", "category": "Python"}, {"instruction": "How do you calculate the sum of a list of numbers in Python?", "input": "", "output": "The sum of a list of numbers in Python can be calculated using the built-in sum() function. This function takes an iterable object (such as a list or tuple) containing numbers as its argument and returns the sum of all the elements in the object. For example, sum([1,2,3]) will return 6.", "category": "Python"}, {"instruction": "How can you sort an array using insertion sort?", "input": "", "output": "Insertion sort is a sorting algorithm in which each item of the array is inserted at its correct position in the sorted list. It involves scanning the array and comparing each element with its adjacent elements in the array. If the element is smaller than its neighbors, it is swapped with its left neighbor, and if the element is larger, it is swapped with its right neighbor. This process is repeated until the array is sorted.", "category": "Python"}, {"instruction": "Edit the following JavaScript code snippet to add an event listener to the button such that when it is clicked, an alert message is shown.", "input": "let button = document.querySelector(\"#button\");", "output": "let button = document.querySelector(\"#button\");\nbutton.addEventListener(\"click\", function(){\n alert(\"Button was clicked!\");\n});", "category": "Python"}, {"instruction": "Suggest a way to complete the following Python program which takes two strings as input and prints out the longer string.", "input": "first_str = 'hello'\nsecond_str = 'world'", "output": "if len(first_str) == len(second_str):\n    print('The two strings are of equal length.')\nelif len(first_str) > len(second_str):\n    print(first_str)\nelse:\n    print(second_str)", "category": "Python"}, {"instruction": "Design a struct in C that can be used to store personal information, such as name, age, etc.", "input": "", "output": "struct PersonalInfo {\n    char name[50];\n    int age;\n    char phone[15];\n    char address[120];\n};", "category": "Python"}, {"instruction": "Rewrite the following code snippet with fewer lines of code.", "input": "ans = 0\nfor i in range(1,10):\n  ans += i", "output": "ans = sum(range(1,10))", "category": "Python"}, {"instruction": "Write an SQL query to find the latest users who have logged in.", "input": "", "output": "SELECT *\nFROM users\nORDER BY last_login DESC\nLIMIT 1;", "category": "Python"}, {"instruction": "Create a function that takes two string arguments, adds the corresponding numbers together, and returns the result.", "input": "string1 = \"5\"\nstring2 = \"7\"", "output": "def add_numbers(x, y):\n  return int(x) + int(y)\n\nresult = add_numbers(string1, string2)\nprint(result) # Outputs 12", "category": "Python"}, {"instruction": "Write a JavaScript code to capitalize every word in a sentence.", "input": "sentence = 'hello world!'", "output": "// This function takes a string and capitalizes every word in the string \nfunction capitalizeSentence(sentence) {\n  // Split the sentence into individual words\n  let words = sentence.split(' ');\n\n  // Initialize the capitalized string\n  let capitalized = '';\n\n  // Iterate through the words\n  for (let word of words) {\n    // Uppercase the first letter of the word \n    let capitalizedWord = word[0].toUpperCase() + word.slice(1); \n\n    // Append the capitalized word to the string\n    capitalized += capitalizedWord + ' ';\n  }\n\n  // Return the capitalized string\n  return capitalized;\n}\n\n// Print the capitalized sentence\nconsole.log(capitalizeSentence(sentence));\n\n// Output: 'Hello World!'", "category": "Python"}, {"instruction": "Find the last 10 digits of the result of raising 2 to the power of 1000.", "input": "", "output": "The last 10 digits of 2^1000 are 4814077888.", "category": "Python"}, {"instruction": "Write a SQL query to find the highest student GPA within a specific course.", "input": "", "output": "SELECT MAX(student_gpa)\nFROM course_table\nWHERE course_id = 'xyz123';", "category": "Python"}, {"instruction": "How many lines of code are required to generate a Fibonacci sequence up to the n-th number?", "input": "", "output": "The number of lines of code required to generate a Fibonacci sequence up to the n-th number is 3: one line to set the conditions, one line for the base case, and one line of the recursive loop. This does not include any lines for printing the result.", "category": "Python"}, {"instruction": "Create a function in Python to insert a new item into an existing list.", "input": "new_item = 5\nexisting_list = [1, 2, 3, 4]", "output": "def insert_new_item(new_item, existing_list):\n    \"\"\"Inserts a new item into an existing list.\n    \n    Args:\n        new_item (int): The item to be inserted.\n        existing_list (list): The existing list.\n    \n    Returns:\n        list: List with the new item inserted.\n    \"\"\"\n    existing_list.append(new_item)\n    return existing_list", "category": "Python"}, {"instruction": "Build a regression model to predict house prices based on crime rate and school quality.", "input": "", "output": "model = sklearn.linear_model.LinearRegression()\nmodel.fit(data[['crime_rate', 'school_quality]], data['house_price'])", "category": "Python"}, {"instruction": "Use CSS to create a box containing some text with a light green background, black text, and a white border.", "input": "", "output": ".box {\n    background-color: lightgreen;\n    color: black;\n    border: 1px solid white;\n}", "category": "Python"}, {"instruction": "Create a Python class to store a customer's name, address, and phone number.", "input": "", "output": "class Customer:\n    def __init__(self, name, address, phone):\n        self.name = name\n        self.address = address\n        self.phone = phone", "category": "Python"}, {"instruction": "Create a Django model that includes a user's name, email address, and age.", "input": "", "output": "class UserModel(models.Model):\n    name = models.CharField(max_length=100)\n    address = models.CharField(max_length = 200)\n    age = models.IntegerField()", "category": "Python"}, {"instruction": "Generate an HTML select element containing the names of all continents.", "input": "", "output": "<select name=\"continents\">\n  <option value=\"Africa\">Africa</option>\n  <option value=\"Antarctica\">Antarctica</option>\n  <option value=\"Asia\">Asia</option>\n  <option value=\"Australia\">Australia</option>\n  <option value=\"Europe\">Europe</option>\n  <option value=\"North America\">North America</option>\n  <option value=\"South America\">South America</option>\n</select>", "category": "Python"}, {"instruction": "Write a SQL query to select the employee name, start date, and salary of all employees who have joined after 2018.", "input": "", "output": "SELECT employeeName, startDate, salary \nFROM employees \nWHERE startDate > '2018-01-01';", "category": "Python"}, {"instruction": "Modify the given code to create a for loop that prints a list of numbers from 0 to 10.", "input": "int i = 0", "output": "for i in range(11):\n    print(i)", "category": "Python"}, {"instruction": "Modify the given JavaScript code to delete an element from an array.", "input": "arr = [1, 2, 3]", "output": "function delElement(arr, el) { \n    var index = arr.indexOf(el);\n    if (index > -1) {\n      arr.splice(index, 1); \n    } \n    return arr;\n} \n\ndelElement(arr, 3)\n\n# Output\n[1, 2]", "category": "Python"}, {"instruction": "Create a XML document to store information about books.", "input": "Book Title: \"The Adventures of Tom Sawyer\"\nBook Author: Mark Twain\nBook Year: 1876\nThe Genre: Fiction", "output": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<book>\n    <title>The Adventures of Tom Sawyer</title>\n    <author>Mark Twain</author>\n    <year>1876</year>\n    <genre>Fiction</genre> \n</book>", "category": "Python"}, {"instruction": "Construct a function to detect if a binary tree is balanced", "input": "", "output": "# A utility function to get the height of the tree \ndef height(node): \n  \n    # Base Case : Tree is empty \n    if node is None: \n        return 0 ; \n  \n    # If tree is not empty then height = 1 + max of left \n    # height and right heights  \n    return 1 + max(height(node.left) ,height(node.right)) \n  \n  \n# Function to get the difference of \n# height of left and right subtrees \ndef getHeightDiff(node): \n    if node is None: \n        return 0\n  \n    # Get the height difference of left and right subtrees \n    heightDiff = height(node.left) - height(node.right) \n  \n    # Get the maximum of left and right subtree \n    # height differences \n    return max(heightDiff, getHeightDiff(node.left) ,getHeightDiff(node.right)) \n  \n# The main function that checks if binary tree is \n# height-balanced or not \ndef isBalanced(root): \n    if root is None: \n        return 1\n  \n    # Get the height difference \n    heightDiff = getHeightDiff(root) \n  \n    # If heightDiff is more than 1 then tree is \n    # not balanced so return 0 \n    if (abs(heightDiff) > 1): \n        return 0\n    else: \n        # tree is balanced return 1 \n        return 1", "category": "Python"}, {"instruction": "Create a program to find the longest substring with unique characters", "input": "", "output": "def longest_substring(string): \n    n = len(string) \n  \n    ''' Initialization of stings, \n    a and b ''' \n    a = \"\" \n    b = \"\"  \n  \n    ''' Initialization of maximum length substring \n    having distinct characters ''' \n    maxlen = 0  \n  \n    ''' 1. Pick starting point \n    2. intialise substrng \"a\"\n    3. Find the longest such \n    substring by comparing \n    current and previous  \n    substring ''' \n    for i in range(n):\n        a += string[i] \n        b = \"\" \n        for j in range(i + 1, n): \n            if string[j] not in a:              \n                b += string[j] \n            else: \n                break\n        if len(a) > maxlen: \n            maxlen = len(a) \n        a += b\n    return maxlen", "category": "Python"}, {"instruction": "Construct a code to determine if two strings are equal", "input": "abc\nabc", "output": "true", "category": "Python"}, {"instruction": "Construct a program that can calculate the factorial of a number using a while loop", "input": "", "output": "def factorial_while(n):\n    factorial = 1\n    while n>0:\n        factorial = factorial * n\n        n = n - 1\n    return factorial", "category": "Python"}, {"instruction": "Write a function to compute the factorial of a number using recursion.", "input": "", "output": "def factorial_recursion( n ):\n   if n == 1:\n       return n\n   else:\n       return n * factorial_recursion( n - 1 )", "category": "Python"}, {"instruction": "Analyze the given text using opinion mining.", "input": "The new iPhone is awesome, I love it!", "output": "import nltk \nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer \nsid = SentimentIntensityAnalyzer() \nss = sid.polarity_scores(text) \n\n# Output\n{'neg': 0.0, 'neu': 0.49, 'pos': 0.51, 'compound': 0.7717}", "category": "Python"}, {"instruction": "Write a Python code that prints out the first 5 elements of a tuple.", "input": "", "output": "tup=(1,2,3,4,5,6,7,8,9,10)\n\nfor i in range(0,5): \n    print (tup[i])", "category": "Python"}, {"instruction": "Translate the following Python programme into JavaScript.", "input": "num1 = 8\nnum2 = 0\n\nif num1 > num2:\n  print(\"num1 is greater than num2\")\nelse:\n  print(\"num2 is greater than num1\")", "output": "let num1 = 8;\nlet num2 = 0;\n\nif (num1 > num2) {\n  console.log(\"num1 is greater than num2\");\n} else {\n  console.log(\"num2 is greater than num1\");\n}", "category": "Python"}, {"instruction": "Edit the existing CSS stylesheet by adding a regular font family rule.", "input": "", "output": "body {\n   font-family: Arial, Helvetica, sans-serif;\n}", "category": "Python"}, {"instruction": "Use NumPy to create a 3x3 array of random numbers from 0 to 1.", "input": "", "output": "import numpy as np\narr = np.random.rand(3, 3)\nprint(arr)\n\n# Output\n[[0.78000621 0.36251339 0.91162219]\n [0.52734163 0.56699849 0.03191476]\n [0.81245571 0.21147751 0.72691151]]", "category": "Python"}, {"instruction": "Read the given JSON data and display the value of the \"Name\" field.", "input": "{\n  \"Name\": \"Text Analyzer\",\n  \"Version\": \"1.0.0\",\n  \"Author\": \"John Doe\"\n}", "output": "import json\n\n# Reading data\ndata = {\n  \"Name\": \"Text Analyzer\",\n  \"Version\": \"1.0.0\",\n  \"Author\": \"John Doe\"\n}\n\n# Printing the value of the \"Name\" field\nprint(json.dumps(data['Name']))\n\n# Output\nText Analyzer", "category": "Python"}, {"instruction": "Create a shell script to make a directory in the home directory.", "input": "", "output": "#!/bin/bash\nmkdir ~/new_dir", "category": "Python"}, {"instruction": "Find the number of unique items in the given array.", "input": "arr = [1, 2, 1, 4, 5]", "output": "arr = [1, 2, 1, 4, 5];\nconst uniqueItems = new Set(arr);\nconsole.log(uniqueItems.size);\n\n# Output\n4", "category": "Python"}, {"instruction": "Fix the following Java code by replacing the letter \"u\" with \"v\".", "input": "String s1 = \"Update\";", "output": "String s1 = \"Update\";\nString s2 = s1.replace('u','v');", "category": "Python"}, {"instruction": "Find the similarity between two given sentences using NLTK library.", "input": "sentence1 = \"This has been an exciting journey\"\nsentence2 = \"It's been a thrilling ride\"", "output": "import nltk\nfrom nltk.corpus import wordnet\nsentence1 = \"This has been an exciting journey\"\ns1 = nltk.word_tokenize(sentence1) \nsentence2 = \"It's been a thrilling ride\"\ns2 = nltk.word_tokenize(sentence2) \n\n# First we convert the words into their respective synonyms\nsyn1 = []\nfor word in s1:\n    for syn in wordnet.synsets(word): \n        for l in syn.lemmas(): \n            syn1.append(l.name())\n\nsyn2 = []\nfor word in s2:\n    for syn in wordnet.synsets(word): \n        for l in syn.lemmas(): \n            syn2.append(l.name())\n\n# Calculating similarity using Path_Similarity \nsimilarity = []\nfor word1 in syn1:\n    for word2 in syn2:\n        p_sim = wordnet.path_similarity(wordnet.synset(word1),wordnet.synset(word2))\n        similarity.append(p_sim)\n       \n# Calculate the average of all similarity scores\nresult = sum(similarity)/len(similarity)\n\n# Output\n0.6521739130434783", "category": "Python"}, {"instruction": "Given the following HTML code, add a second paragraph.", "input": "<p>This is my first paragraph</p>", "output": "<p>This is my first paragraph</p>\n<p>This is my second paragraph</p>", "category": "Python"}, {"instruction": "Construct a for loop that prints out all prime numbers between 500 and 1000", "input": "", "output": "for i in range(500, 1000):\n    flag = 1\n    for j in range(2, i):\n        if i % j == 0:\n            flag = 0\n            break\n    if flag == 1:\n        print(i)", "category": "Python"}, {"instruction": "Construct an if-else statement that checks if the given day is a holiday", "input": "day = \"Sunday\"", "output": "if (day == \"Sunday\"){\n    console.log(\"Today is a holiday.\")\n} else {\n    console.log(\"Today is not a holiday.\")\n}", "category": "Python"}, {"instruction": "Compute the maximum value in a random array", "input": "[4,6,9,2,11,7]", "output": "maxValue = 11", "category": "Python"}, {"instruction": "Create a dictionary of items with the corresponding price in Python.", "input": "items = ['book', 'pen', 'chair']\nprices = [10, 2, 5]", "output": "prices_dict = dict(zip(items, prices))\n# prices_dict = {'book': 10, 'pen': 2, 'chair': 5}", "category": "Python"}, {"instruction": "Construct a for loop to print a list of order numbers in ascending order.", "input": "order_num = [1530, 3489, 7421, 4792]", "output": "for order_num in sorted(order_num):\n    print(order_num)\n    \n# Output:\n# 1530\n# 3489\n# 4792\n# 7421", "category": "Python"}, {"instruction": "Generate a list comprehension to replicate the given code example.", "input": "my_list = [1, 2, 3, 4, 5]\nmy_output = []\n\nfor item in my_list:\n    my_output.append(item*item)", "output": "my_output = [item*item for item in my_list]", "category": "Python"}, {"instruction": "Write a code to generate a dictionary that contains the frequencies of all English alphabets in a given sentence.", "input": "Sentence: The brain is a powerful tool", "output": "def get_alphabet_frequencies(sentence):\n    \"\"\"Function to generate a dictionary that contains the frequencies of all English alphabets in a given sentence\"\"\"\n    alphabet_freq = dict()\n    for el in sentence:\n        if el.isalpha():\n            el = el.lower()\n            if el in alphabet_freq:\n                alphabet_freq[el] += 1\n            else:\n                alphabet_freq[el] = 1\n    return alphabet_freq\n\nif __name__ == '__main__':\n    sentence = \"The brain is a powerful tool\"\n    alphabet_freq = get_alphabet_frequencies(sentence)\n    print(alphabet_freq)", "category": "Python"}, {"instruction": "Identify all the statements that are erroneous or have logical errors.", "input": "a = 2\nb = 1\nif a > b\n    print(\"a is greater than b\")\nelif a == b\n    print(\"a is equal to b\")\nelse\n    print(\"b is greater than a\")", "output": "The statements that are erroneous or have logical errors are:\n1) There is no colon (:) after the 'if' and 'elif' statements\n2) There is no colon (:) after the 'else' statement.\n3) The parentheses after 'print' are unnecessary.", "category": "Python"}, {"instruction": "Fix the code so that the loop terminates after 10 iterations.", "input": "# Start of code\ni = 1\nwhile i<100:\n    print(i)\n    i += 1\n# End of code", "output": "# Start of code\ni = 1\nwhile i<=10:\n    print(i)\n    i += 1\n# End of code", "category": "Python"}, {"instruction": "Write a python code to find median of two sorted arrays.", "input": "A = [1,4,6,7]B = [3,5,8,9]", "output": "def find_median(A, B):\n    \"\"\"Function to find median of two sorted arrays\"\"\"\n    m = len(A)\n    n = len(B)\n    if m > n:\n        A,B,m,n = B,A,n,m\n    imin, imax, half_len = 0, m , (m+n+1) // 2\n    while imin <= imax:\n        i = (imin+imax) // 2\n        j = half_len -i\n        if i < m and B[j-1] > A[i]:\n            # i is too small, must increase it\n            imin = i + 1\n        elif i > 0 and A[i-1] > B[j]:\n            # i is too big, must decrease it\n            imax = i - 1\n        else:\n            # i is perfect\n            if i == 0:\n                max_of_left = B[j-1] \n            elif j == 0:\n                max_of_left = A[i-1] \n            else:\n                max_of_left = max(A[i-1], B[j-1]) \n \n            if (m + n) % 2 == 1:\n                return max_of_left \n \n            if i == m:\n                min_of_right = B[j] \n            elif j == n:\n                min_of_right = A[i] \n            else:\n                min_of_right = min(A[i], B[j]) \n \n            return (max_of_left + min_of_right) / 2.0\n\nif __name__ == '__main__':\n    A = [1,4,6,7]\n    B = [3,5,8,9]\n    median = find_median(A, B)\n    print(median)", "category": "Python"}, {"instruction": "Write a function that takes an integer parameter and find the maximum of the three numbers with the help of ternary operator.", "input": "", "output": "def find_max_of_three(a, b, c):\n    \"\"\"Function that takes an integer parameter and find the maximum of the three numbers with the help of ternary operator\"\"\"\n    max_value = a if a > b and a > c else (b if b > a and b > c else c)\n    return max_value\n\nif __name__ == '__main__':\n    a = 1\n    b = 5\n    c = 3\n    max_value = find_max_of_three(a, b, c)\n    print(max_value)", "category": "Python"}, {"instruction": "Write a code to create a list that preserves the order of the original input and contains only the odd numbers from it?", "input": "[1,2,3,4,5,6,7,8,9]", "output": "def odd_numbers_list(input_data):\n    \"\"\"Function to create a list that preserves the order of the original input and contains only the odd numbers from it\"\"\"\n    output_list = [] \n    for el in input_data: \n        if el % 2 != 0:\n            output_list.append(el) \n    return output_list\n\nif __name__ == '__main__':\n    input_data = [1,2,3,4,5,6,7,8,9]\n    output_list = odd_numbers_list(input_data)\n    print(output_list)", "category": "Python"}, {"instruction": "Using the input as a guide, write code that prints out a copy of the 2d matrix with its elements transposed.", "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]]", "output": "def transpose_matrix(matrix):\n    \"\"\"Function to transpose 2d list matrix\"\"\"\n    row = len(matrix) \n    col = len(matrix[0]) \n  \n    transpose = [[0 for j in range(row)] for i in range(col)] \n  \n    for i in range(row): \n        for j in range(col): \n            transpose[j][i] = matrix[i][j] \n  \n    for i in range(col): \n        print(transpose[i]) \n\nif __name__ == '__main__':\n    matrix = [[1,2,3],[4,5,6],[7,8,9]]\n    transpose_matrix(matrix)", "category": "Python"}, {"instruction": "Change the following list of strings into a single combined string.", "input": "my_list = [\"Hello\", \"world\", \"this\", \"is\", \"a\", \"test\"]", "output": "# Create the string from the list\nmy_string = ' '.join(map(str, my_list)) \n# Print the string\nprint(my_string) # Hello world this is a test", "category": "Python"}, {"instruction": "Write a code that swaps the two numbers using a temporary variable.", "input": "a = 10, b = 20", "output": "# Swapping two numbers using a temporary variable\na, b = 10, 20 \ntemp = a \na = b \nb = temp \nprint('a:', a) \nprint('b:', b)", "category": "Python"}, {"instruction": "Write a Python program that parses a JSON object and returns only the values of a specific key.", "input": "JSON object: {\n    \"name\": \"John\",\n    \"age\": 42,\n    \"location\": \"New York\"\n}\n\nKey: \"name\"", "output": "import json\n\n# Load JSON data\ndata_str = '''\n{\n    \"name\": \"John\",\n    \"age\": 42,\n    \"location\": \"New York\"\n}\n'''\ndata_dict = json.loads(data_str)\n\n# Get the value of the given key\nname = data_dict.get('name') # John", "category": "Python"}, {"instruction": "Change the following linked list into an array.", "input": "Linked list: 1->3->5->7->9", "output": "# Create a linked list\nclass Node: \n    def __init__(self, data): \n        self.data = data\n        self.next = None\n\n# Function to convert linked list to array\ndef list_to_array(head): \n    arr = []\n    if head is None: \n        return arr\n    cur = head\n    while cur is not None: \n        arr.append(cur.data) \n        cur = cur.next\n    return arr\n\narr = list_to_array(head) \nprint(arr)", "category": "Python"}, {"instruction": "Write a statement to select the rows from the following table that have age>25.", "input": "Table: People\n\nName | Age | Location\n\nJohn | 21 | New York\n\nJane | 33 | London", "output": "SELECT * FROM People WHERE Age > 25;", "category": "Python"}, {"instruction": "Generate a JavaScript code to console log the elements in a given array for each iteration.", "input": "let my_array = [1, 2, 3]", "output": "for (let i = 0; i < my_array.length; i++) {\n    console.log(my_array[i]);\n}\n# Output:\n# 1\n# 2\n# 3", "category": "Python"}, {"instruction": "Construct a SQL query to select the orders with order_num >= 1000.", "input": "", "output": "SELECT * FROM orders WHERE order_num >= 1000;", "category": "Python"}, {"instruction": "Generate a Python code to add two numbers using a lambda expression.", "input": "num1 = 10\nnum2 = 25", "output": "add = lambda num1, num2: num1 + num2\n\nprint(add(num1, num2))  # Output: 35", "category": "Python"}, {"instruction": "Construct a for loop in Python to print the array in descending order.", "input": "my_array = [4, 3, 5, 7, 1]", "output": "for i in sorted(my_array, reverse=True):\n  print(i)\n\n# Output:\n# 7\n# 5\n# 4\n# 3\n# 1", "category": "Python"}, {"instruction": "Output the last two words in the following string", "input": "I only have one wish.", "output": "wish.", "category": "Python"}, {"instruction": "Rewrite the following code snippet so that it is compatible with Python 3", "input": "sum = 0\nfor num in range(10):\n   sum = sum + num\nprint sum", "output": "sum = 0\nfor num in range(10):\n   sum += num\n\nprint(sum)", "category": "Python"}, {"instruction": "Define a command line application that prints \u201cHello, world.\u201d", "input": "", "output": "import argparse\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\"--print_hello\", help=\"print hello, world\", action=\"store_true\")\n\nif __name__ == \"__main__\":\n    args = parser.parse_args()\n    \n    if args.print_hello:\n       print(\"Hello, world.\")", "category": "Python"}, {"instruction": "Write a Python algorithm to find the most common value in an array.", "input": "arr = [1, 2, 3, 3, 3, 3, 4, 4, 5]", "output": "def most_common(arr):\n    freq = {}\n    \n    # Count the frequency of each element\n    for el in arr:\n        if el not in freq:\n            freq[el] = 1\n        else:\n            freq[el] += 1\n            \n    # Find the maximum frequency\n    max_freq = -1\n    for el, freq in freq.items():\n        max_freq = max(max_freq, freq)\n    \n    # Find the element with maximum frequency\n    most_common_el = None\n    for el, freq in freq.items():\n        if freq == max_freq:\n            most_common_el = el\n    \n    return most_common_el", "category": "Python"}, {"instruction": "Create a dictionary with the key-value pairs of the given tuple.", "input": "my_tuple = ((\"a\", 1), (\"b\", 2), (\"c\", 3))", "output": "my_dict = dict(my_tuple)", "category": "Python"}, {"instruction": "Modify the given list to include only unique items.", "input": "my_list = [1, 2, 2, 3, 3, 4]", "output": "my_list = list(set(my_list))", "category": "Python"}, {"instruction": "Create a list comprehension that prints each pair in a given list of tuples.", "input": "my_list = [(\"apple\", \"red\"), (\"banana\", \"yellow\")]", "output": "[print(v1, v2) for (v1, v2) in my_list]", "category": "Python"}, {"instruction": "Parse the following HTML content and retrieve the values from the key elements.", "input": "<li><a href=\"/home\">Home</a></li>\n<li><a href=\"/about\">About</a></li>", "output": "from bs4 import BeautifulSoup\n\nhtml_data = '''\n<li><a href=\"/home\">Home</a></li>\n<li><a href=\"/about\">About</a></li>\n'''\n\nsoup = BeautifulSoup(html_data, 'lxml')\n\n# Get content from <a> tags \nlinks = soup.find_all('a') \n\n# Retrieve the values from each link\nfor link in links:\n    print(link.get('href'))", "category": "Python"}, {"instruction": "Create a class named \u201cVehicle\u201d that has 3 instance variables.", "input": "", "output": "class Vehicle:\n    def __init__(self, name, color, max_speed):\n        self.name = name\n        self.color = color\n        self.max_speed = max_speed", "category": "Python"}, {"instruction": "Detect if the given URL contains a query string.", "input": "url = https://www.example.com/?food=burger", "output": "True", "category": "Python"}, {"instruction": "Unwrap the function parameter with default argument.", "input": "def func(arg1, arg2=\"default\"):\n    pass", "output": "def func(arg1, arg2):\n    if arg2 is None:\n        arg2 = \"default\"\n    pass", "category": "Python"}, {"instruction": "Write a C++ program to print a decimal number in reverse", "input": "", "output": "#include<iostream>\nusing namespace std;\n\nint main()\n{\n    int num = 54321;\n    int reversed = 0;\n    \n    while(num != 0) {\n        reversed = reversed * 10 + num % 10;\n        num /= 10;\n    }\n    cout << \"Reversed Number: \" << reversed << endl;\n    return 0;\n}", "category": "Python"}, {"instruction": "Create a program to convert a given time in GMT form to local time.", "input": "", "output": "from datetime import datetime, timezone\n\ndef local_time(gmt_time):\n    utc_time = datetime.fromisoformat(gmt_time.replace(\"Z\", \"+00:00\"))\n \n    local_time = utc_time.astimezone()\n \n    return local_time.isoformat()", "category": "Python"}, {"instruction": "Given a string s and an integer k, write a code to find the kth most frequent element in the string", "input": "String s: \"hello world hello\"\nInteger k: 2", "output": "# Counting frequencies \ncounts = dict() \nwords = s.split(' ') \nfor word in words: \n    if word in counts: \n        counts[word] += 1\n    else: \n        counts[word] = 1\n  \n# Getting the kth most frequent element \nkth_most_frequent = sorted(counts, key = counts.get, reverse = True)[k-1] \n  \nprint(kth_most_frequent) \n\n# Output: hello", "category": "Python"}, {"instruction": "Write a Regex expression to search for all words ending with \"ed\"", "input": "", "output": "regex = r\"\\w*ed\\b\"", "category": "Python"}, {"instruction": "Create a JavaScript function to format a given number with commas.", "input": "num = 1000", "output": "function commaFormatting(num) {\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nconsole.log(commaFormatting(num))  // Output: 1,000", "category": "Python"}, {"instruction": "Swap the values of the two given numbers using a temporary variable.", "input": "a = 1\nb = 2", "output": "temp = a \na = b\nb = temp", "category": "Python"}, {"instruction": "Retrieve the data in the given URL.", "input": "URL: https://www.example.com/", "output": "import requests\n\nurl = 'https://www.example.com/'\n\n# Make an API call and store the response\nres = requests.get(url)\n\n# Retrieve the data\ndata = res.text", "category": "Python"}, {"instruction": "Write code to convert JSON to XML with provided attribute.", "input": "{  \n   \"employees\":{  \n      \"employee\":[  \n         {  \n            \"name\":\"John Smith\",\n            \"id\":123\n         },\n         {  \n            \"name\":\"Jane Doe\",\n            \"id\":456\n         }\n      ]\n   }\n} \n\nAttribute: \"person\"", "output": "import json  \nimport xmltodict  \n\n# Load JSON data\ndata_str = '''\n   {  \n   \"employees\":{  \n      \"employee\":[  \n         {  \n            \"name\":\"John Smith\",\n            \"id\":123\n         },\n         {  \n            \"name\":\"Jane Doe\",\n            \"id\":456\n         }\n      ]\n   }\n} \n'''\ndata_dict = json.loads(data_str)\n\n# Covert JSON to XML\nxml_data = xmltodict.unparse(data_dict, attr_prefix='', cdata=False)\nxml_data = xml_data.replace('<employee>', '<employee person=\"\">')\n\n# Print XML\nprint(xml_data)", "category": "Python"}, {"instruction": "Generate a code to form a Pascal Triangle with the given input.", "input": "n = 5", "output": "def pascal(n): \n    # An auxiliary array to store \n    # generated pascal triangle values \n    arr =[[0 for x in range(n)] for x in range(n)] \n      \n    # Iterate through every line and  \n    # print integer(s) in it \n    for line in range(0, n): \n          \n        # Every line has number of  \n        # integers equal to line number \n        for i in range(0, line + 1): \n              \n            # First and last values  \n            # in every row are 1 \n            if (i == 0 or i == line): \n                arr[line][i] = 1\n                print(arr[line][i], end=\" \") \n            else: \n                arr[line][i] = (arr[line - 1][i - 1] +\n                                arr[line - 1][i]) \n                print(arr[line][i], end=\" \") \n        print(\"\\r\")", "category": "Python"}, {"instruction": "Write a SQL statement to delete all records from a table called 'students' where the grade is below 3.", "input": "", "output": "DELETE FROM students\nWHERE grade < 3;", "category": "Python"}, {"instruction": "Create a query in MongoDB to update the age of a document with the name 'John'.", "input": "", "output": "# Create a query in MongoDB to update the age of a document with the name 'John'\ndb.users.updateOne(\n  { name: 'John' },\n  { $set: { age: 18 } }\n)", "category": "Python"}, {"instruction": "Create a JavaScript function to retrieve a value from an object with a given key.", "input": "", "output": "// Create a JavaScript function to retrieve a value from an object with a given key\nfunction getValue(obj, key) {\n  return obj[key];\n}", "category": "Python"}, {"instruction": "Write an expression in PHP to get the length of an array called 'data'.", "input": "", "output": "// Write an expression in PHP to get the length of an array called 'data'\n$length = count($data);", "category": "Python"}, {"instruction": "Create a regex pattern to match all URLs in a text.", "input": "", "output": "# Create a regex pattern to match all URLs in a text\npattern = r\"((http|ftp|https):\\/\\/)?[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;:/~\\+#]*[\\w\\-\\@?^=%&amp;/~\\+#])?\"", "category": "Python"}, {"instruction": "Write an expression in JavaScript to calculate the perimeter of a triangle with sides 3, 4 and 5.", "input": "", "output": "var a = 3;\nvar b = 4;\nvar c = 5;\n\nvar perimeter = a + b + c; // 12", "category": "Python"}, {"instruction": "Calculate the sum of all the multiples of 3 and 5 between 0 and n", "input": "n = 10", "output": "def sum_multiples(n):\n    result = 0\n    for i in range(1, n):\n        if i % 3 == 0 or i % 5 == 0:\n            result += i\n    return result\n\nif __name__ == '__main__':\n    print(sum_multiples(n))", "category": "Python"}, {"instruction": "Create a HTML form with two input fields called 'name' and 'age'.", "input": "", "output": "<form>\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" name=\"name\" id=\"name\">\n  <label for=\"age\">Age:</label>\n  <input type=\"number\" name=\"age\" id=\"age\">\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Identify which line of code contains a syntax error?", "input": "def getFibonacciNumber(n):\n  a, b = 0, 1\n  for i in range 0, n\n    a, b = b, a + b\n  return a", "output": "The line \"for i in range 0, n\" contains a syntax error. The syntax for the for loop should be \"for i in range(0, n)\".", "category": "Python"}, {"instruction": "Construct an SQL statement to select data from two tables.", "input": "", "output": "SELECT table_1.*, table_2.* FROM table_1, table_2 WHERE table_1.column_name = table_2.column_name;", "category": "Python"}, {"instruction": "What is the Keras library used for?", "input": "", "output": "Keras is an open-source library used for creating and training models in deep learning. It is designed to be user-friendly and allows E-commerce developers to quickly build powerful neural networks with minimal lines of code. It is built on top of popular libraries such as Theano, TensorFlow, and CNTK.", "category": "Python"}, {"instruction": "Identify the Python command to search a string for a specific keyword.", "input": "", "output": "string.find('keyword') or string.index('keyword')", "category": "Python"}, {"instruction": "Create a class in Java called Student with two fields called id and name.", "input": "", "output": "public class Student {\n    int id;\n    String name;\n    \n    public Student(int id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n    \n    public int getId() {\n        return this.id;\n    }\n    \n    public void setId(int id) {\n        this.id = id;\n    }\n    \n    public String getName() {\n        return this.name;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n}", "category": "Python"}, {"instruction": "Write a Jupyter Notebook cell to print a greeting with the text \"Hello, World!\".", "input": "", "output": "print('Hello, World!')", "category": "Python"}, {"instruction": "Create a program that finds the sum of all numbers divisible by 4 between 150 and 300", "input": "", "output": "sum = 3750", "category": "Python"}, {"instruction": "Output the 7th element in the given array", "input": "[5, 10, 20, 12, 15, 7]", "output": "element = 15", "category": "Python"}, {"instruction": "Write an HTML document with a table containing three columns: name, email and phone.", "input": "", "output": "<html>\n <head>\n  <title>Contacts Table</title></title>\n </head>\n <body>\n  <table>\n   <thead>\n    <th>Name</th>\n    <th>Email</th>\n    <th>Phone</th>\n   </thead>\n   <tbody>\n    <tr>\n     <td>John</td>\n     <td>john@example.com</td>\n     <td>123-456-7890</td>\n    </tr>\n   </tbody>\n  </table>\n </body>\n</html>", "category": "Python"}, {"instruction": "Determine if a given word is a valid word of English language.", "input": "Word: lycanthropy", "output": "Yes, lycanthropy is a valid word of English language.", "category": "Python"}, {"instruction": "What is the definition of a compolier?", "input": "", "output": "A compiler is a computer program that translates written source code from one programming language into another language (often called the target language) that can be understood and executed by another computer. The process of compiling typically involves analysis, transformation, and optimization of code to generate object code or executable code. The generated object code or executable code is then linked into one or more executable programs or libraries.", "category": "Python"}, {"instruction": "Write a Python program to create a dictionary containing students and their scores.", "input": "", "output": "# Declare an empty dictionary\nscores = {}\n\n# Enter some students and their scores\nscores['student1'] = 90\nscores['student2'] = 85\nscores['student3'] = 100\n\n# Print the scores\nprint(scores)\n\n# Output - {'student1': 90, 'student2': 85, 'student3': 100}", "category": "Python"}, {"instruction": "Describe the main difference between a switch statement and an if-else statement in C++", "input": "", "output": "The main difference between a switch statement and an if-else statement in C++ is that the switch statement is used for multiple-branch control of the program, while the if-else statement is used for dual-branch control. The switch statement tests the value of a variable from a given set of matches and branch the program to different parts of the code according to the value of the variable, while the if-else statement tests the condition of the variable and branch the program according to whether the condition is true or false. Another main difference is that a switch statement only allows integer values and characters char, while an if-else statement can take any type of value. Finally, the switch statement allows for the use of break statements to avoid the execution of multiple branches of code.", "category": "Python"}, {"instruction": "Rewrite the following php code in a more efficient manner", "input": "$string = \"Hello World!\";\nfor ($i = 0; $i < strlen($string); $i++){\n    echo $string[$i] . \"\\n\";\n}", "output": "$string = \"Hello World!\";\nfor ($char of str_split($string)) {\n    echo $char . \"\\n\";\n}", "category": "Python"}, {"instruction": "Suggest a MySQL query that retrieves all students from the \"Idaho\" state.", "input": "", "output": "SELECT * FROM students\nWHERE state = 'Idaho';", "category": "Python"}, {"instruction": "Design a class in Java to represent a stack data structure, and implement operations such as push, pop and size.", "input": "", "output": "public class Stack {\n    private int[] arr;\n    private int top;\n    private int capacity;\n  \n    public Stack(int capacity) {\n        this.arr = new int[capacity];\n        this.top = -1;\n        this.capacity = capacity;\n    }\n  \n    public boolean isFull() {\n        return top == capacity - 1;\n    }\n  \n    public boolean isEmpty() {\n        return top == -1;\n    }\n  \n    public int size() {\n        return top + 1;\n    }\n  \n    public void push(int x) {\n        if(isFull()) {\n            return;\n        }\n        top++;\n        arr[top] = x;\n    }\n  \n    public int pop() {\n        if(isEmpty()) {\n            return -1;\n        }\n        int popped = arr[top];\n        top--;\n        return popped;\n    }\n}", "category": "Python"}, {"instruction": "Write a Java method that checks if a nested integer contains an even number.", "input": "[1, 2, [3, 4, [7, 8]]]", "output": "public static boolean containsEven(List<Object> list) {  \n    for (Object obj : list) {          \n        if(obj instanceof Integer){\n            if((Integer)obj % 2 == 0){\n                return true;                   \n            }\n        } \n        else if(obj instanceof List<?>){\n            if (containsEven((List<?>)obj)){\n                return true;\n            }\n        }\n    } \n    return false;\n}", "category": "Python"}, {"instruction": "You are given two arrays, A and B. Write a program to determine if B is a subset of A.", "input": "A = [1, 2, 3, 4, 5]\nB = [2, 3, 5]", "output": "def is_subset(A, B):\n    for i in B:\n        if i not in A:\n            return False\n    \n    return True", "category": "Python"}, {"instruction": "You are given two matrices, M1 and M2. Write a python code to multiply them.", "input": "M1 : \n[[2, 3], \n [5, 6]]\n\nM2 : \n[[1, 2], \n [3, 4]]", "output": "def matrix_multiply(M1, M2):\n    M3 = [[0, 0], [0, 0]]\n    for i in range(len(M1)):\n        for j in range(len(M2[0])):\n            for k in range(len(M2)):\n                M3[i][j] += M1[i][k] * M2[k][j]\n    \n    return M3", "category": "Python"}, {"instruction": "Generate pseudo code for a function that swaps two numbers x and y.", "input": "", "output": "// Function to swap two numbers\ndef swap(x, y):\n    // Store the value of x into a temporary variable  \n    temp = x\n\n    // Store y in x  \n    x = y\n\n    // Store temp in y  \n    y = temp\n    return x,y", "category": "Python"}, {"instruction": "Read the following block of code. What is the main goal of the code?", "input": "def first_duplicate(arr):\n    seen = set()\n    for i in arr:\n        if i in seen:\n            return i\n        seen.add(i)\n    return -1", "output": "The main goal of the code is to find the first duplicate element in an array.", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to track the mouse movement.", "input": "", "output": "document.addEventListener(\"mousemove\", function(e) {\n   console.log(\"mouse is at x:\" + e.clientX + \" y:\" + e.clientY);\n});", "category": "Python"}, {"instruction": "Construct a class in Java that creates methods for finding the area and circumference of a circle.", "input": "", "output": "public class Circle {\n  double radius;\n \n  public Circle(double radius) {\n    this.radius = radius;  \n  }\n \n  public double getArea(){\n    return Math.PI * Math.pow(radius, 2);\n  }\n \n  public double getCircumference(){\n    return 2 * Math.PI * radius;\n  }\n}", "category": "Python"}, {"instruction": "Rank the following programming languages according to the year of their initial release.\n  \nJavaScript, Java, Python, C++", "input": "", "output": "C++ (1985), Java (1995), JavaScript (1995), Python (1991)", "category": "Python"}, {"instruction": "Write a Go program that prints the numbers from 1 to 100, replacing any number divisible by 4 with \"Four\".", "input": "", "output": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    // Iterate from 1 to 100\n    for i := 1; i <= 100; i++ {\n        // If the number is divisible by 4, print \"Four\"\n        if i%4 == 0 {\n            fmt.Println(\"Four\")\n        // Otherwise print the number\n        } else {\n            fmt.Println(i)\n        }\n    }\n}", "category": "Python"}, {"instruction": "What is a state machine in software engineering?", "input": "", "output": "A state machine in software engineering is a model of computation used to design programs and algorithms that have an input, a process, and an output. A state machine is built from a set of states, any of which can be the current state at any given time, and it transitions from one state to another in reaction to events or inputs. The process of the state machine is the set of predefined operations associated with each state and the set of transitions that dictate how the state machine moves from one state to another.", "category": "Python"}, {"instruction": "Create a short Java program designed to accept two numbers and find their greatest common divisor (GCD).", "input": "", "output": "public class GCD {\n\n    public static int getGCD(int x, int y) { \n        // Base case \n        if (x == 0) \n            return y; \n        if (y == 0) \n            return x; \n  \n        // If x is greater \n        if (x > y) \n            return getGCD(x%y, y); \n  \n        return getGCD(x, y%x); \n    } \n  \n    public static void main(String[] args) { \n        int x = 40; \n        int y = 20; \n        System.out.println(\"GCD of \" + x +\" and \" + y + \" is \" + getGCD(x, y)); \n    } \n}", "category": "Python"}, {"instruction": "What type of loop can be used to iterate through the items of a list in Python?", "input": "", "output": "The most common type of loop for iterating through the items of a list in Python is the for loop. This loop iterates through each item in the list one by one, allowing the programmer to perform operations on each item in the list. For example:\n\nmy_list = [1, 2, 3]\nfor item in my_list:\n    print(item)\n\n# Output\n# 1\n# 2\n# 3", "category": "Python"}, {"instruction": "Design a Bash script to replace all the characters in a string.", "input": "String to be changed: My name is Jane\nCharacters to be replaced: a->A, e->E", "output": "#!/bin/bash\n\nstring=\"My name is Jane\"\nstring=\"${string//a/A}\"\nstring=\"${string//e/E}\"\necho $string", "category": "Python"}, {"instruction": "Create an SQL query to find all customers from California who made more than 5 orders.", "input": "", "output": "SELECT c.*\nFROM Customers c\nINNER JOIN\n    (SELECT CustomerId, COUNT(OrderId) as NumOrders\n     FROM Orders \n     WHERE State = 'CA'\n     GROUP BY CustomerId\n     HAVING COUNT(OrderId) > 5) as Tot\nON c.CustomerId = Tot.CustomerId;", "category": "Python"}, {"instruction": "Categorize the given sentence into a specific class.", "input": "Sentence: It was a beautiful sunny day.", "output": "The given sentence belongs to the class 'positive sentiment'.", "category": "Python"}, {"instruction": "Create a SQL statement to select a list of customer names and the number of orders each customer has made.", "input": "", "output": "SELECT name, COUNT(name)\nFROM orders\nGROUP BY name", "category": "Python"}, {"instruction": "Write a function that reduces an array of numbers to a single number.", "input": "[2, 4, 6, 8, 10]", "output": "def reduceArray(arr):\n    if not arr:\n        return 0\n    result = arr[0]\n    for num in arr[1:]:\n        result = result + num\n    return result\n\nprint(reduceArray([2, 4, 6, 8, 10])) # Outputs: 30", "category": "Python"}, {"instruction": "Edit this HTML code to only display the title.", "input": "<html>\n<head>\n    <title>HTML Document</title>\n</head>\n<body>\n    <h1>Hello World!</h1>\n</body>\n</html>", "output": "<html>\n<head>\n    <title>HTML Document</title>\n</head>\n</html>", "category": "Python"}, {"instruction": "Create a class that implements a polygon using an array of Point objects.", "input": "", "output": "// Define a polygon class\npublic class Polygon {\n  // An array of Points to represent the vertices of a polygon\n  private Point[] vertices;\n \n  // A constructor that takes an array of Points\n  public Polygon(Point[] vertices) {\n    this.vertices = vertices;\n  }\n \n  // A method that returns the area of the polygon\n  public double getArea() {\n    double area = 0;\n    int j = this.vertices.length - 1;\n    for (int i = 0; i < this.vertices.length; i++) {\n\t\tarea += (this.vertices[j].getX() + this.vertices[i].getX()) \n\t\t\t\t* (this.vertices[j].getY() - this.vertices[i].getY());\n\t\tj = i; \n    }   \n    return Math.abs(area / 2); \n  }\n}", "category": "Python"}, {"instruction": "Write a SQL query to count the number of customers in each country in the 'customers' table.", "input": "", "output": "SELECT country, COUNT(*) AS NumCustomers\nFROM customers\nGROUP BY country;", "category": "Python"}, {"instruction": "Write a bash script to print all processes currently running on the system.", "input": "", "output": "#!/bin/bash\n\nfor proc in $(ps aux | awk '{ print $2 }')\ndo\n    ps axo pid,ppid,args | egrep -i \"^[[:space:]]*$proc\"\ndone", "category": "Python"}, {"instruction": "Write an algorithm to convert a given 2D matrix into a 1D array.", "input": "matrix = [[1,2,3],[4,5,6]]", "output": "def convert_matrix_to_array(matrix):\n    res = []\n    for row in matrix:\n        for element in row:\n            res.append(element)\n    return res\n\n# Output: [1,2,3,4,5,6]", "category": "Python"}, {"instruction": "Create a method that deletes all the empty elements from a given array of strings.", "input": "arr = [\"a\", \"\", \"b\", \"\", \"c\"]", "output": "def delete_empty_elements(arr):\n    return [e for e in arr if e]\n\n# Output: [\"a\", \"b\", \"c\"]", "category": "Python"}, {"instruction": "Create a SQL query that counts the number of users in a given table.", "input": "Table name: users", "output": "SELECT COUNT(*) FROM users", "category": "Python"}, {"instruction": "Given an array of objects, write a function that sorts the array in ascending order of its \"price\" property.", "input": "[\n  {'name': 'Laptop', 'price': 1200},\n  {'name': 'Monitor', 'price': 500},\n  {'name': 'Mouse', 'price': 50}\n]", "output": "def sort_by_price(arr):\n    arr.sort(key=lambda item: item['price'])\n    return arr\n\n# Output: [{'name': 'Mouse', 'price': 50}, {'name': 'Monitor', 'price': 500}, {'name': 'Laptop', 'price': 1200}]", "category": "Python"}, {"instruction": "Given a string of integers, create a method to generate an array in which each integer is added to the sum of its neighbors.", "input": "s = \"3456\"", "output": "def generate_sum_array(s):\n    res = [int(s[0])]\n    for i in range(1, len(s)):\n        res.append(int(s[i-1]) + int(s[i]))\n    res.append(int(s[-1]))\n    return res\n\n# Output: [3, 8, 11, 13]", "category": "Python"}, {"instruction": "Write a PHP script that creates a MySQL database table with three fields: \"ID\", \"name\", and \"age\".", "input": "", "output": "<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// sql to create table\n$sql = \"CREATE TABLE MyTable (\nid INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\nname VARCHAR(255) NOT NULL,\nage VARCHAR(255)\n)\";\n\nif ($conn->query($sql) === TRUE) {\n    echo \"Table MyTable created successfully\";\n} else {\n    echo \"Error creating table: \" . $conn->error;\n}\n\n$conn->close();\n?>", "category": "Python"}, {"instruction": "Can you make some changes so that the following C code compiles correctly?", "input": "#include <stdio.h>\n\nint main()\n{\nprintf(\"Hello World!\")\nreturn 0\n}", "output": "#include <stdio.h>\n\nint main()\n{\n    printf(\"Hello World!\");\n    return 0;\n}", "category": "Python"}, {"instruction": "Write a SQL statement to select the names and IDs of customers from the customers table that live in California.", "input": "", "output": "SELECT name, id FROM customers WHERE state = 'California';", "category": "Python"}, {"instruction": "Write a line of C code to declare a 2D array of size 5x5.", "input": "", "output": "int array[5][5];", "category": "Python"}, {"instruction": "Write a line of HTML code to set a bulleted list.", "input": "", "output": "<ul>\n  <li>Item 1</li>\n  <li>Item 2</li>\n  <li>Item 3</li>\n</ul>", "category": "Python"}, {"instruction": "Parse this JSON data using JavaScript.", "input": "{\n  \"name\": \"John Smith\",\n  \"age\": 35,\n  \"location\": \"Online\"\n}", "output": "let data = {\n  \"name\": \"John Smith\",\n  \"age\": 35,\n  \"location\": \"Online\"\n};\n\nlet name = data.name;\nlet age = data.age;\nlet location = data.location;\n\nconsole.log(name); // Outputs: John Smith\nconsole.log(age); // Outputs: 35\nconsole.log(location); // Outputs: Online", "category": "Python"}, {"instruction": "Write a JavaScript function to check if a number is in the Fibonacci sequence.", "input": "", "output": "function isFibonacci(num) { \n\tlet a = 0,\n\t\tb = 1;\n\twhile (a <= num) { \n\t\tif (a == num) \n\t\t\treturn true; \n\t\tlet c = a + b; \n\t\ta = b; \n\t\tb = c; \n\t} \n\treturn false; \n} \n\nconsole.log(isFibonacci(5)); // Outputs: true", "category": "Python"}, {"instruction": "Implemet a JavaScript function to print all the leap year between 2014 and 2050.", "input": "", "output": "function leapYears() {\n\tfor (let year = 2014; year <= 2050; year++) {\n\t\tif (year % 4 == 0) {\n\t\t\tconsole.log(year);\n\t\t}\n\t}\n}\n\nleapYears();", "category": "Python"}, {"instruction": "Re-implement this Ruby code in Python", "input": "def fibonacci(n)\n  return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2)\nend", "output": "def fibonacci(n): \n    if n < 2: \n        return n \n    return fibonacci(n - 1) + fibonacci(n - 2) \n  \nprint(fibonacci(7)) # Outputs: 13", "category": "Python"}, {"instruction": "Retrieve data from a collection in a MongoDB database and display the result in ascending order.", "input": "db.myCollection.find().sort({name: 1})", "output": "db.myCollection.find().sort({name: 1})\n    .limit(20)\n    .skip(20)\n    .toArray();", "category": "Python"}, {"instruction": "Deducde whether the following code is a valid Java statement", "input": "345=num;", "output": "false", "category": "Python"}, {"instruction": "Is this SQL query valid?", "input": "SELECT * FROM foobar ORDER BY name", "output": "true", "category": "Python"}, {"instruction": "Generate code to return a fibonacci sequence up to n elements.", "input": "n = 10", "output": "def Fibonacci(n): \n  \n    #taking 1st two fibonacci nubers as 0 and 1 \n    FibArray = [0, 1] \n      \n    while len(FibArray) < n: \n        next_fib = FibArray[-1] + FibArray[-2] \n        FibArray.append(next_fib) \n          \n    return FibArray \n    \n# Driver Code \nprint(Fibonacci(n))", "category": "Python"}, {"instruction": "Create an algorithm that computes the sum of its maximum K (given) digits", "input": "arr = [1, 2, 3, 4, 5], K = 3", "output": "def max_sum_digits(arr, K):\n    max_sum = 0\n    arr.sort()\n    for i in range(K):\n        max_sum += arr[len(arr)-1-i]\n    return max_sum", "category": "Python"}, {"instruction": "Given a string, write a code that checks it for palindrome", "input": "str = \"abba\"", "output": "def is_palindrome(str):\n    return str == str[::-1]", "category": "Python"}, {"instruction": "Design a GUI app to welcome the user and output a message", "input": "", "output": "import tkinter as tk \n\nwindow = tk.Tk()\nwindow.title(\"Welcome App\") \n\nframe = tk.Frame(window) \nframe.grid(row=0, column=0) \n\nlabel = tk.Label(frame, text=\"Welcome\", font=(\"Arial\", 40))\nlabel.grid(row=0, column=0) \n\nmessage = tk.Message(frame, text=\"Hello user!\", width=1000)\nmessage.grid(row=2, column=0)  \n\nwindow.mainloop()", "category": "Python"}, {"instruction": "In Python, write a script that prints out the elements of a list.", "input": "list = [1, 2, 3, 4, 5]", "output": "list = [1, 2, 3, 4, 5]\n\nfor x in list:\n    print(x)", "category": "Python"}, {"instruction": "Design an algorithm for finding the frequency of occurrence of each character in a given string", "input": "str = \"hello world\"", "output": "def char_frequency(str):\n    freq = {}\n    for char in str:\n        if char in freq: \n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq", "category": "Python"}, {"instruction": "Given an integer N, write a code that finds the next palindrome of N.", "input": "N = 187", "output": "next_palindrome = 191", "category": "Python"}, {"instruction": "Given a hash table, write a program to print the keys and values in sequence.", "input": "data = {\n    \"Name\": \"John\",\n    \"Age\": 25,\n    \"Country\": \"USA\"\n}", "output": "def print_hash_table(data):\n    for key in data:\n        print(key + \": \" + str(data[key]))", "category": "Python"}, {"instruction": "Why is algorithmic complexity important?", "input": "", "output": "Algorithmic complexity is an important measure of how efficient a program is since it tells how much time and memory a program consumes in relation to its input size. A more efficient program can be built to solve a problem faster, use fewer resources, and be more scalable.", "category": "Python"}, {"instruction": "Given an array, remove the duplicate elements.", "input": "[1, 4, 6, 1, 4, 8]", "output": "def remove_duplicates(arr):\n    return list(dict.fromkeys(arr))", "category": "Python"}, {"instruction": "Given a dataframe, write a function to add a new column that contains the results of a calculation between two columns.", "input": "dataframe = Pandas DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['A', 'B', 'C'])", "output": "def add_calculation_column(dataframe, calculation, column_name):\n    dataframe[column_name] = dataframe.eval(calculation)\n    return dataframe", "category": "Python"}, {"instruction": "Given a data table, write a function to select the columns.", "input": "table = [['Name', 'Age', 'Score', 'City'],\n         ['Alice', '21', '85', 'New York'],\n         ['Bob', '23', '92', 'Los Angeles'],\n         ['Cathy', '20', '73', 'London']]", "output": "def select_columns(table, columns):\n    output = [table[0]] + [[row[i] for i in columns] for row in table[1:]]\n    return output", "category": "Python"}, {"instruction": "Given a string and an int n, write a function to extract the subsequence of length n from the string.", "input": "s = \"hello world\", n = 6", "output": "def extractString(string, n): \n    return string[:n]", "category": "Python"}, {"instruction": "Define a function that takes a string as input and returns true if it is a valid IP address.", "input": "ip_str = \"127.0.0.1\"", "output": "def is_valid_ip(ip_str):\n    ip_addr = ip_str.split('.')\n\n    if len(ip_addr) != 4:\n        return False\n    for item in ip_addr:\n        if not 0 <= int(item) <= 255:\n            return False\n    return True", "category": "Python"}, {"instruction": "Make an API call that fetches the user details and stores it in a DB.", "input": "// URL: '/users/fetch'\n// Parameters: username, password", "output": "const request = require('request');\n\nfunction fetchUser(username, password) {\n  const url = `/users/fetch?username=${username}&&password=${password}`;\n  request.get(url, (err, res) => {\n    if (err) {\n      console.log('Failed to fetch user', err);\n      return;\n    }\n    \n    const userData = JSON.parse(res.body);\n    // insert userData into database\n  });\n}", "category": "Python"}, {"instruction": "Describe the features of HTML.", "input": "", "output": "HTML (Hyper Text Markup Language) is the standard markup language for structuring content for the web. It includes features such as support for images, multimedia (audio, video, animations), tables, forms, lists, direct linking of multimedia content and external documents. HTML also supports the interactive use of JavaScript, which allows it to be used to create dynamic and responsive websites. Additionally, HTML can support the creation of documents that are accessible to those using assistive technologies, such as screen readers.", "category": "Python"}, {"instruction": "Execute a basic SQL query using C#.", "input": "", "output": "// Create and open a connection\nstring connString = \"Data Source=localhost;Database=A;User ID=ads;Password=adspassword;\";\nSqlConnection conn = new SqlConnection(connString);\nconn.Open();\n\n// Create a SQL command\nstring Sql = \"SELECT * FROM Customer\";\n\n// Execute a basic SQL query\nSqlCommand command = new SqlCommand(Sql, conn);\nSqlDataReader dataReader = command.ExecuteReader();\n\n// Read the results\nwhile (dataReader.Read())\n{\n    Console.WriteLine(String.Format(\"{0} {1} {2}\",\n    dataReader[\"customerID\"],\n    dataReader[\"customerName\"],\n    dataReader[\"customerCity\"]));\n}\n\n//close the connection\nconn.Close();", "category": "Python"}, {"instruction": "You need to convert the following statement in SQL to equivalent PostgreSQL syntax.", "input": "SELECT * FROM Table WHERE Name='John'", "output": "SELECT * FROM Table \nWHERE Name = 'John'", "category": "Python"}, {"instruction": "Create a program that prints out a list of all numbers from 0 to 10, except for five.", "input": "", "output": "for num in range(11):\n    if num != 5:\n        print(num)", "category": "Python"}, {"instruction": "You need to write a function to check if given input is a palindrome string.", "input": "string = \"level\"", "output": "def is_palindrome(string): \n    left = 0\n    right = len(string) - 1\n  \n    while right >= left: \n        if string[left] != string[right]: \n            return False\n        left += 1\n        right -= 1\n    return True", "category": "Python"}, {"instruction": "Convert the given code in Java to an equivalent expression in Python.", "input": "int x = 10;", "output": "x = 10", "category": "Python"}, {"instruction": "Create a SQL query to join two tables based on their common fields.", "input": "Table1 (field1, field2, field3)\nTable2 (field2, field4, field5)", "output": "SELECT * \nFROM Table1 \nINNER JOIN Table2 \nON Table1.field2 = Table2.field2", "category": "Python"}, {"instruction": "Convert the following enum type expression in Java for days of the week to equivalent C# syntax.", "input": "enum Weekday {SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY};", "output": "enum Weekday \n{\n    Sunday, \n    Monday, \n    Tuesday, \n    Wednesday, \n    Thursday, \n    Friday, \n    Saturday\n};", "category": "Python"}, {"instruction": "Write a Python script that randomly shuffles the elements of a given array.", "input": "list = [1, 2, 3, 4, 5]", "output": "import random\n\ndef shuffle(arr):\n    random.shuffle(arr)\n    return arr\n\nresult = shuffle([1, 2, 3, 4, 5])\nprint(result)", "category": "Python"}, {"instruction": "Describe how you would use a dictionary to reverse a string.", "input": "", "output": "A dictionary can be used to reverse a string by mapping each character to its reversed counterpart. Create a dictionary with all the characters from the string as keys and their reversed version as the values. To reverse a string, iterate through it and look up each character in the dictionary and add its value to a new string. Once all the characters have been reversed, the new string is the reversed version of the original.", "category": "Python"}, {"instruction": "How would you create a website that provides users with their daily horoscopes?", "input": "", "output": "The website should provide the users with an interface to select their star sign from a drop-down list. When the user selects their star sign, the website should display their daily horoscope. To achieve this, the website should connect to a database which contains the daily horoscopes for each of the star signs.", "category": "Python"}, {"instruction": "Write an HTML function that renders a Text Area on a website.", "input": "", "output": "<textarea rows=\"4\" cols=\"50\"></textarea>", "category": "Python"}, {"instruction": "How would you design the data structure to store and process results from a 5-choice multiple choice test.", "input": "", "output": "class TestResults {\n    // A map containing the question id as key and the selected answer as value\n    Map<Integer, Integer> answers;\n  \n    // A map containing the question id as key and a boolean indicating whether the answer was correct or not as value\n    Map<Integer, Boolean> scores;\n  \n    // A map containing the question id as key and a list of all the possible answers as value\n    Map<Integer, List<String>> questions;\n  \n    public TestResults(Map<Integer, Integer> answers, Map<Integer, Boolean> scores, Map<Integer, List<String>> questions) {\n        this.answers = answers;\n        this.scores = scores;\n        this.questions = questions;\n    }\n  \n    public Map<Integer, Integer> getAnswers() {\n        return answers;\n    }\n  \n    public Map<Integer, Boolean> getScores() {\n        return scores;\n    }\n    \n    public Map<Integer, List<String>> getQuestions() {\n        return questions;\n    }\n}", "category": "Python"}, {"instruction": "Write a Java program to print out the lyrics of the song \u201cMary Had a Little Lamb\u201d.", "input": "", "output": "public class Lyrics {\n\n    public static void main(String[] args) {\n        System.out.println(\"Mary had a little lamb,\");\n        System.out.println(\"Little lamb, little lamb,\");\n        System.out.println(\"Mary had a little lamb,\");\n        System.out.println(\"Its fleece was white as snow.\");\n        System.out.println();\n        System.out.println(\"And everywhere that Mary went,\");\n        System.out.println(\"Mary went, Mary went,\");\n        System.out.println(\"Everywhere that Mary went,\");\n        System.out.println(\"The lamb was sure to go.\");\n    }\n}", "category": "Python"}, {"instruction": "Modify the following code to remove all punctuation and special characters.", "input": "function removeSpecialCharacters(str) {\nvar pattern = new RegExp(\"[ `!@#$%^&*()+\\-=\\[\\]{};':\\\"\\\\|,.<>\\/?~]\");\nreturn str.replace(pattern, '');\n}", "output": "function removeSpecialCharacters(str) {\n    var pattern = new RegExp(\"[^a-zA-Z0-9]\");\n    return str.replace(pattern, '');\n}", "category": "Python"}, {"instruction": "Create a basic Java program that implements a binary search tree.", "input": "", "output": "class BinarySearchTree { \n    Node root; \n    \n    /* Class containing left and right child of current node and key value*/\n    class Node { \n        int key; \n        Node left, right; \n  \n        public Node(int item) { \n            key = item; \n            left = right = null; \n        } \n    } \n  \n    // Constructor \n    BinarySearchTree() {  \n        root = null;  \n    } \n  \n    // This method mainly calls insertRec() \n    void insert(int key) { \n       root = insertRec(root, key); \n    } \n      \n    /* A recursive function to insert a new key in BST */\n    Node insertRec(Node root, int key) { \n  \n        /* If the tree is empty, return a new node */\n        if (root == null) { \n            root = new Node(key); \n            return root; \n        } \n  \n        /* Otherwise, recur down the tree */\n        if (key < root.key) \n            root.left = insertRec(root.left, key); \n        else if (key > root.key) \n            root.right = insertRec(root.right, key); \n  \n        /* return the (unchanged) node pointer */\n        return root; \n    } \n    \n    // This method mainly calls InorderRec() \n    void inorder()  { \n       inorderRec(root); \n    } \n  \n    // A utility function to do inorder traversal of BST \n    void inorderRec(Node root) { \n        if (root != null) { \n            inorderRec(root.left); \n            System.out.println(root.key); \n            inorderRec(root.right); \n        } \n    } \n  \n    // Driver Program to test above functions\n    public static void main(String[] args) { \n        BinarySearchTree tree = new BinarySearchTree(); \n  \n        /* Let us create following BST \n              50 \n           /     \\ \n          30      70 \n         /  \\    /  \\ \n        20   40  60   80 */\n        tree.insert(50); \n        tree.insert(30); \n        tree.insert(20); \n        tree.insert(40); \n        tree.insert(70); \n        tree.insert(60); \n        tree.insert(80); \n  \n        // print inorder traversal of the BST \n        tree.inorder(); \n    } \n}", "category": "Python"}, {"instruction": "Write a Python function to generate a list of Fibonacci numbers up to the given limit n.", "input": "", "output": "def generate_fibonacci(n):\n fibonacci_list = [0, 1]\n for i in range(2, n+1):\n fibonacci_list.append(fibonacci_list[i-2] + fibonacci_list[i-1])\n return fibonacci_list", "category": "Python"}, {"instruction": "Create a program to find the largest common factor in two numbers.", "input": "24 and 48", "output": "def hcf(x, y): \n  \n    if x > y: \n        smaller = y \n    else: \n        smaller = x \n    \n    for i in range(1, smaller+1): \n        if((x % i == 0) and (y % i == 0)): \n            hcf = i \n            \n    return hcf \n\nx = 24\ny = 48\n\nprint (\"The H.C.F. of 24 and 48 is\", hcf(x, y))", "category": "Python"}, {"instruction": "Implement a Class in Java that creates a new array of two integers and allows the user to set and get the values of the array.", "input": "", "output": "public class TwoIntegers {\n    private int[] twoIntegers;\n    \n    public TwoIntegers() {\n        twoIntegers = new int[2];\n    }\n    \n    public int getFirst() {\n        return twoIntegers[0];\n    }\n    \n    public int getSecond() {\n        return twoIntegers[1];\n    }\n    \n    public void setFirst(int first) {\n        twoIntegers[0] = first;\n    }\n    \n    public void setSecond(int second) {\n        twoIntegers[1] = second;\n    }\n}", "category": "Python"}, {"instruction": "Design a data structure in Java to store student records which includes Roll Number, Name, and Grade of the student.", "input": "", "output": "public class Student {\n    private int rollNumber;\n    private String name;\n    private int grade;\n    \n    public Student (int rollNumber, String name, int grade) {\n        this.rollNumber = rollNumber;\n        this.name = name;\n        this.grade = grade;\n    }\n    \n    public int getRollNumber() {\n        return this.rollNumber;\n    }\n    \n    public String getName() {\n        return this.name;\n    }\n    \n    public int getGrade() {\n        return this.grade;\n    }\n}", "category": "Python"}, {"instruction": "Use CSS to style an HTML table with a heading and 6 rows and 4 columns.", "input": "", "output": "<html>\n    <head>\n        <style>\n            table {\n                border-collapse: collapse;\n                width: 100%;\n            }\n            \n            th, td {\n                text-align: left;\n                padding: 8px;\n            }\n            \n            tr:nth-child(even) {\n                background-color: #f2f2f2;\n            }\n        </style>\n    </head>\n    <body>\n        <table>\n            <tr>\n            <th>Heading1</th>\n            <th>Heading2</th>\n            <th>Heading3</th>\n            <th>Heading4</th>\n            </tr>\n            <tr>\n            <td>row1_col1</td>\n            <td>row1_col2</td>\n            <td>row1_col3</td>\n            <td>row1_col4</td>\n            </tr>\n            <tr>\n            <td>row2_col1</td>\n            <td>row2_col2</td>\n            <td>row2_col3</td>\n            <td>row2_col4</td>\n            </tr>\n            <tr>\n            <td>row3_col1</td>\n            <td>row3_col2</td>\n            <td>row3_col3</td>\n            <td>row3_col4</td>\n            </tr>\n            <tr>\n            <td>row4_col1</td>\n            <td>row4_col2</td>\n            <td>row4_col3</td>\n            <td>row4_col4</td>\n            </tr>\n            <tr>\n            <td>row5_col1</td>\n            <td>row5_col2</td>\n            <td>row5_col3</td>\n            <td>row5_col4</td>\n            </tr>\n            <tr>\n            <td>row6_col1</td>\n            <td>row6_col2</td>\n            <td>row6_col3</td>\n            <td>row6_col4</td>\n            </tr>\n        </table>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Design a network for sending data from a server to a client.", "input": "", "output": "The network should include a server to send data, and a client to receive data. The server should have a dedicated IP address and listening port to receive instructions from the client, such as HTTP requests. The client should have a unique IP address, and should connect to the server to request data. Both the client and server should have the necessary network infrastructure for data transmission, such as routers, gateways, and firewalls.", "category": "Python"}, {"instruction": "Describe the data structures used to implement a stack data structure.", "input": "", "output": "Data structures used to implement a stack data structure are as follows - linked lists, arrays, dynamic arrays, and resizable arrays. Linked lists are used when the stack size needs to change frequently as this ensures that space is not wasted. Whereas, for a fixed stack size, arrays can be used. A dynamic array is an array with a pre-allocated capacity, so if the stack size exceeds the capacity of the array then it will resize itself to accommodate the new stack size. Lastly, resizable arrays adjust the capacity automatically when new items are added or existing items are removed.", "category": "Python"}, {"instruction": "Design an algorithm in JavaScript to find maximum element within an array.", "input": "[4,7,2,1,0,6,5]", "output": "function findMax(arr) { \n\n    let max = arr[0]; \n \n    // Loop through array elements \n    // and compare with max \n    for (let i = 1; i < arr.length; i++) \n        if (arr[i] > max) \n            max = arr[i]; \n  \n    // return max element \n    return max; \n} \n\n// let arr = [4,7,2,1,0,6,5]\n// console.log(findMax(arr)) # returns 7", "category": "Python"}, {"instruction": "Create a functional programming paradigm in Python.", "input": "", "output": "def functional_programming(lst):\n    return list(map(lambda x : x*2, filter(lambda x : x % 2 == 0, lst)))\n \nprint(functional_programming([1,2,3,4,5]))      \n# Output: [4, 8]", "category": "Python"}, {"instruction": "Describe the process of debugging a code.", "input": "", "output": "Debugging is the process of identifying and fixing errors in the code. It involves finding the root cause of the error and removing it. The process of debugging involves isolating the offending code, identifying the bug, obtaining an understanding of why the bug occurred, determining if a fix can be made (without breaking any other code), testing the fix and re-running the code to ensure the bug is fixed.", "category": "Python"}, {"instruction": "Edit the following Java code to round a number to two decimal places.", "input": "double num = 3.14159;", "output": "double num = 3.14159;\nnum = Math.round(num * 100.0) / 100.0;\nSystem.out.println(num);\n// Output: 3.14", "category": "Python"}, {"instruction": "How does the Fibonacci number sequence work?", "input": "", "output": "The Fibonacci sequence is a sequence of numbers where each number in the sequence is the sum of the two numbers preceding it. The first two numbers in the sequence are 0 and 1. The sequence starts with 0 and 1 and continues by adding the two previous numbers to get the next number in the sequence. For example, the first six numbers in the Fibonacci sequence are 0, 1, 1, 2, 3, 5. The sequence can be represented as 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, and so on.", "category": "Python"}, {"instruction": "Explain the concept of permission levels in Linux.", "input": "", "output": "In Linux, permission levels are used to control access to various files and directories. The permission levels are represented by a triplet of numbers set for user (owner), group, and others. An effective way of applying these permission levels is to first assign an appropriate permission level (i.e. read, write, execute) to each category, and then adjust the individual files or directories that require additional security. This can be done by restricting certain operations (e.g. writing or executing a file) to specific users or groups.", "category": "Python"}, {"instruction": "Write a Python program to analyze the sentiment of a given text.", "input": "The restaurant food was terrible.", "output": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsia = SentimentIntensityAnalyzer()\nsentiment = sia.polarity_scores(input_text)\nprint(sentiment)\n# {'neg': 0.404, 'neu': 0.596, 'pos': 0.0, 'compound': -0.7424}", "category": "Python"}, {"instruction": "Write a function that will format a given string in proper title case.", "input": "title = 'the quick brown fox'", "output": "def format_title(title):\n    \"\"\"\n    This function will format a given string in proper title case.\n    \"\"\"\n    formatted_title = ' '.join([word[0].upper() + word[1:] for word in title.split()])\n    return formatted_title\n\ntitle = 'the quick brown fox'\n\nprint(format_title(title))", "category": "Python"}, {"instruction": "Create a function that will validate if a given date is in the correct format.", "input": "date = '12/04/2021'", "output": "def validate_date(date):\n    \"\"\"\n    This function will validate if a given date is in the correct format.\n    \"\"\"\n    try:\n        year, month, day = date.split('/')\n        int(year)\n        int(month)\n        int(day)\n        isValidDate = True\n    except:\n        isValidDate = False\n    return isValidDate\n\ndate = '12/04/2021'\n\nprint(validate_date(date))", "category": "Python"}, {"instruction": "A function needs to be created that will take a list of strings and return a list of the same strings without duplicates.", "input": "list_of_strings = [\"a\", \"b\", \"c\", \"a\", \"d\"]", "output": "def remove_duplicates(list_of_strings):\n    \"\"\"\n    This function will take a list of strings and return a list of the same strings without duplicates.\n    \"\"\"\n    unique_strings = list(set(list_of_strings))\n    return unique_strings\n\nlist_of_strings = [\"a\", \"b\", \"c\", \"a\", \"d\"]\nprint(remove_duplicates(list_of_strings))", "category": "Python"}, {"instruction": "Generate an HTML list with the following entries:", "input": "Apple\nBanana\nCherry", "output": "<ul>\n <li>Apple</li>\n <li>Banana</li>\n <li>Cherry</li>\n</ul>", "category": "Python"}, {"instruction": "Construct a for loop in JavaScript to iterate through an array of strings and print out each one.", "input": "", "output": "let strArray = [\"Hello\", \"World\", \"!\"];\nfor(let i = 0; i < strArray.length; i++) {\n    console.log(strArray[i]);\n}", "category": "Python"}, {"instruction": "Design a MongoDB schema for a collection to store books with fields for title, author and ISBN.", "input": "", "output": "{\n  \"_id\": ObjectId(), \n  \"title\": String,\n  \"author\": String,\n  \"ISBN\": String\n}", "category": "Python"}, {"instruction": "Create a MySql query to find all the students with a grade above 8.", "input": "", "output": "SELECT * FROM students WHERE grade > 8;", "category": "Python"}, {"instruction": "create a function to compare two strings and return a boolean depending on their equality or inequality.", "input": "string1 = 'hello' \nstring2 = 'world'", "output": "def compare_strings(string1, string2):\n    \"\"\"\n    This function will compare two strings and return a boolean \n    depending on their equality or inequality. \n    \"\"\"\n    is_same = string1 == string2\n    return is_same\n\nstring1 = 'hello' \nstring2 = 'world'\n\nprint(compare_strings(string1, string2))", "category": "Python"}, {"instruction": "Given a list of positive integers, write a program to find two elements whose sum equals a given target value.", "input": "[1, 2, 3, 4, 5], 4", "output": "def find_sum_target(nums, target):\n for i in range(len(nums) - 1):\n for j in range(i+1, len(nums)):\n if nums[i] + nums[j] == target:\n return [nums[i], nums[j]]\n return []", "category": "Python"}, {"instruction": "Write a function to get data from a NoSQL database.", "input": "// Database Name: MyDatabase\n// Collection Name: userData\n// Search Query: username: 'admin'\n// Fields to Return: firstName, lastName", "output": "function getData(dbName, collectionName, query, fields) {\n  return db.get(dbName)\n    .collection(collectionName)\n    .find(query, fields)\n    .toArray();\n}\n\n// Usage\nlet searchQuery = { username: 'admin' };\nlet fieldsToReturn = { firstName: 1, lastName: 1 }; \nlet results = getData(\"MyDatabase\", \"userData\", searchQuery, fieldsToReturn);", "category": "Python"}, {"instruction": "Print out the sum of even numbers from the following range.", "input": "range(1,10)", "output": "sum = 0\nfor num in range(1,10):\n    if num % 2 == 0:\n        sum += num\nprint(sum) // Output: 20", "category": "Python"}, {"instruction": "Calculate the amount of UTF-8 bytes need to code string \"Hello\".", "input": "", "output": "The UTF-8 representation of the string \"Hello\" stores it in 5 bytes.", "category": "Python"}, {"instruction": "Design a code in C# to check if the input number is positive, negative or zero.", "input": "", "output": "public static void checkNumber(int num){ \n    if( num > 0 ) \n        Console.WriteLine(\"Positive\"); \n    else if( num < 0 )\n        Console.WriteLine(\"Negative\"); \n    else\n        Console.WriteLine(\"Zero\"); \n} \n\ncheckNumber(-17); \n// Outputs Negative.", "category": "Python"}, {"instruction": "Write a query in SQL to show all the details of the customers with age greater than 30.", "input": "Table name: customers\nFields: name, age", "output": "SELECT * FROM customers WHERE age > 30;", "category": "Python"}, {"instruction": "Find the third element of an array [1, 3, 5, 7, 9].", "input": "", "output": "The third element of the array is 5.", "category": "Python"}, {"instruction": "Design a function in Java to output the same string in reverse order.", "input": "String: 'Hello World!'", "output": "public static String reverseString(String input){\n    StringBuilder output = new StringBuilder();\n    for (int i = input.length()-1; i >= 0; i--){\n        output.append(input.charAt(i));\n    }\n    return output.toString();\n}\n\nSystem.out.println(reverseString(\"Hello World!\")); // Outputs \"!dlroW olleH\"", "category": "Python"}, {"instruction": "Construct a for loop in PHP to print the value of each element in an array of 10 elements.", "input": "Array: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "output": "<?php\n$elements = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\nfor($i = 0; $i < count($elements); $i ++){\n    echo $elements[$i];\n}\n?>", "category": "Python"}, {"instruction": "Find the highest common factor of two numbers 8 and 12.", "input": "", "output": "The highest common factor of 8 and 12 is 4.", "category": "Python"}, {"instruction": "Design a function in Python to calculate the Fibonacci sequence up to a particular number.", "input": "", "output": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nfor i in range(1, n+1):\n    print(fibonacci(i))", "category": "Python"}, {"instruction": "Create a Ruby class that has two methods - one for calculating the result of multiplications and one for calculating the addition of two numbers.", "input": "", "output": "class Calculator\n    def multiply(a, b)\n        return a * b\n    end\n\n    def add(a, b)\n        return a + b\n    end\nend", "category": "Python"}, {"instruction": "Print all possible combination and permutations with length 3 for a given array.", "input": "[1, 2, 3]", "output": "def get_permutations(array):\n  results = []\n  if len(array) == 0:\n    return results\n  if len(array) == 1:\n    results.append([array[0]])\n    return results\n  for i in range(len(array)):\n  permutations = get_permutations(array[:i] + array[i+1:])\n    for permutation in permutations:\n      results.append([array[i]] + permutation)\n  return results", "category": "Python"}, {"instruction": "Read a line of input from the user and print the length of the line.", "input": "Hello World.", "output": "len(input)", "category": "Python"}, {"instruction": "Configure the following network parameters", "input": "ip_address = \"176.4.3.39\";\nnetmask = \"255.255.255.0\";\ndefault_gateway = \"176.4.3.253\";", "output": "ip_address=\"176.4.3.39\"\nnetmask=\"255.255.255.0\"\ndefault_gateway=\"176.4.3.253\"\n\n# Configure network\nifconfig eth0 ${ip_address} netmask ${netmask}\nroute add default gw ${default_gateway}", "category": "Python"}, {"instruction": "Remove all HTML tags from a string.", "input": "\"<h1>Hello World</h1>\"", "output": "function stripHTMLTags(str) {\n  return str.replace(/<[^>]*>/g, \"\");\n}\n\n// Usage\nstripHTMLTags(\"<h1>Hello World</h1>\"); // result: \"Hello World\"", "category": "Python"}, {"instruction": "Make an API call to retrieve the latest news headlines for the world.", "input": "", "output": "function getLatestNews() {\n  const url = 'http://newsapi.org/v2/top-headlines?country=world&apiKey=*****';\n\n  return fetch(url)\n  .then(response => response.json())\n  .then(data => data.articles);\n}\n\n// Usage\ngetLatestNews().then(headlines => console.log(headlines));", "category": "Python"}, {"instruction": "Write a Python code to calculate the number of unique combinations of three digits from 0 to 9.", "input": "", "output": "def combinations(n, k):\n    from itertools import combinations\n    return len(list(combinations(range(n), k)))\n \ncomb = combinations(10, 3)\nprint(comb)", "category": "Python"}, {"instruction": "Write a Python code to print a Pascal's triangle with five rows.", "input": "", "output": "def pascal_triangle(n): \n    trow = [1] \n    y = [0] \n    for x in range(max(n, 0)): \n        print(trow) \n        trow = [ l + r for l, r in zip(trow + y, y + trow)] \n        if(x > 0):\n            trow.append(1)\n    return n >= 1\npascal_triangle(5)", "category": "Python"}, {"instruction": "Classify the following statement as either true or false. Java and JavaScript are the same language.", "input": "", "output": "False. Java and JavaScript are two different programming languages. Java is a statically typed, strong-typing, object-oriented language while JavaScript is an interpreted language and is used mainly in web development.", "category": "Python"}, {"instruction": "Convert a linked list to an array in JavaScript.", "input": "function LinkedList() {\n    this.head = null;\n    this.tail = null;\n}  \n  \nfunction Node(value, next, prev) {\n    this.value = value;\n    this.next = next;\n    this.prev = prev;\n}\n\nlet list = new LinkedList();\nlist.head = new Node(1, new Node(2, new Node(3, new Node(4, null, null), null), null), null);\nlist.tail = new Node(4, null, new Node(3, null, new Node(2, null, new Node(1, null, null))))", "output": "function linkedListToArray(list) {\n    const array = [];\n    let currentNode = list.head;\n    while (currentNode) {\n        array.push(currentNode.value);\n        currentNode = currentNode.next;\n    }\n    return array;\n} \n\nconsole.log(linkedListToArray(list));", "category": "Python"}, {"instruction": "Modify the given HTML code so that it redirects to the page specified in the href attribute.", "input": "<a>Redirect Here</a>", "output": "<a href=\"http://example.com\" >Redirect Here</a>", "category": "Python"}, {"instruction": "Organize the given code snippet into an array data structure.", "input": "[\"1\", \"Hello\", \"there\", \"10\", \"45\", \"Apple\"]", "output": "var array = [\"1\", \"Hello\", \"there\", \"10\", \"45\", \"Apple\"];", "category": "Python"}, {"instruction": "Build a HTML page with the provided structure.", "input": "<html>\n    <head>\n    </head>\n    <body>\n    </body>\n</html>", "output": "<html>\n    <head>\n        <title>Page Title</title>\n    </head>\n    <body>\n        <h1>Welcome to my page</h1>\n\n        <p>This is a simple page example built with HTML and CSS.</p>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Develop a Java function that takes a string and searches for the occurrence of a given character.", "input": "string=\"Hello World\";\nch='l';", "output": "public static int findOccurrence (String string, char ch) \n{ \n    int count = 0; \n    for (int i=0; i<string.length(); i++) \n    { \n        if (string.charAt(i) == ch) \n            count++; \n    } \n    return count; \n}", "category": "Python"}, {"instruction": "Develop a Python code that takes a string as input and converts it to all uppercase.", "input": "string = \"Hello World\"", "output": "def toUpperCase(string):\n    return string.upper()", "category": "Python"}, {"instruction": "Write a SQL statement that returns the average age of people in the table.", "input": "", "output": "SELECT AVG(age) FROM people;", "category": "Python"}, {"instruction": "Read the given input and output a JSON document.", "input": "{\"foo\": \"hello\", \"bar\": \"world\"}", "output": "json_encode($input);", "category": "Python"}, {"instruction": "Generate a random password with 8 characters long including lowercase letters, uppercase letters, and numbers.", "input": "", "output": "function generatePassword() {\n  let characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  let password = '';\n\n  for (let i = 0; i < 8; i++) {\n    let characterIndex = Math.floor(Math.random() * characters.length);\n    let character = characters[characterIndex];\n    password += character;\n  }\n\n  return password;\n}\n\n// Usage\ngeneratePassword(); // result: 2Kj93Cc8", "category": "Python"}, {"instruction": "Do some data analysis and find the average of the given data.", "input": "[12, 15, 6, 8, 10, 20]", "output": "double AvgData(int[] input) {\n  double sum = 0;\n  for (int i = 0; i < input.Length; i++) {\n    sum += input[i];\n  }\n  return sum / input.Length;\n}", "category": "Python"}, {"instruction": "Write a function in Java that returns a random element from an array.", "input": "int[] A = {3, 5, 7, 9, 12};", "output": "public static int getRandomElement(int[] A) {\nint randomIndex = (int)(Math.random() * A.length); \nreturn A[randomIndex]; \n}", "category": "Python"}, {"instruction": "Describe the feature of \"promise\" in JavaScript.", "input": "", "output": "Promises in JavaScript are objects that represent the eventual completion or failure of an asynchronous operation. They allow us to structure contingencies within our code, and to take actions based on the eventual result of asynchronous tasks.", "category": "Python"}, {"instruction": "Generate a code in Python to generate a list containing multiplication table up to 10.", "input": "", "output": "multiplication_table = []\nfor i in range(1, 11):\n    multiplication_table.append([x*i for x in range(1, 11)])\nprint(multiplication_table)", "category": "Python"}, {"instruction": "Generate a Python function to generate Fibonacci sequence given a number n.", "input": "n = 5", "output": "def Fibonacci(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b", "category": "Python"}, {"instruction": "Describe the Pandas feature \"DataFrame\"", "input": "", "output": "Pandas DataFrame is a two-dimensional data structure, i.e. data is aligned in a tabular fashion in rows and columns. It is a widely used tool for data manipulation and analysis in Python. It offers a variety of features such as filtering, sorting, adding/removing columns, updating the data, indexing, and many others.", "category": "Python"}, {"instruction": "Write a code in Python to toggle all characters in a string.", "input": "The string is: \"Hello World!\"", "output": "s = \"Hello World!\" \nres = \"\" \nfor char in s: \n    if char.islower():\n        res += char.upper() \n    elif char.isupper():\n        res += char.lower()\nprint(res)", "category": "Python"}, {"instruction": "Write an SQL query to return rows from a table and sorted in ascending order.", "input": "Table Name: Animals", "output": "SELECT * FROM Animals ORDER BY Animals ASC", "category": "Python"}, {"instruction": "Handle the given input and output a CSV string.", "input": "[{ user_id: 1, name: 'John', age: 15 }, { user_id: 2, name: 'Bob', age: 22 }]", "output": "user_id,name,age\n1,John,15\n2,Bob,22", "category": "Python"}, {"instruction": "Based on the input, output the number of elements in the given array.", "input": "arr = [1, 2, 3, 4, 5]", "output": "arr.length // Output: 5", "category": "Python"}, {"instruction": "Sort an array of strings based on their length.", "input": "[\"a\", \"abc\", \"ab\", \"abcd\", \"abcde\"]", "output": "function sortByLength(arr) {\n  return arr.sort((a, b) => a.length - b.length);\n}\n\n// Usage\nsortByLength([\"a\", \"abc\", \"ab\", \"abcd\", \"abcde\"]); // result: [\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]", "category": "Python"}, {"instruction": "Edit the provided HTML structure to add an ordered list inside the body with 3 list items.", "input": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title>My Webpage</title>\n</head>\n<body>\n\n</body>\n</html>", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title>My Webpage</title>\n</head>\n<body>\n<ol>\n  <li>List Item 1</li>\n  <li>List Item 2</li>\n  <li>List Item 3</li>\n</ol>\n</body>\n</html>", "category": "Python"}, {"instruction": "Find the length of the longest common subsequence in the following two strings: \"ABCBDAB\" and \"BDCABA\".", "input": "", "output": "def longest_common_subsequence(str1, str2):\n  n = len(str1)\n  m = len(str2)\n  \n  dp = [[0] * (m+1) for _ in range(n+1)]\n\n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if str1[i-1] == str2[j-1]:\n        dp[i][j] = 1 + dp[i-1][j-1]\n      else:\n        dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n  \n  return dp[n][m]", "category": "Python"}, {"instruction": "Report the number of words in the following text.", "input": "This is a sample text", "output": "def count_words(text):\n  return len(text.split())", "category": "Python"}, {"instruction": "Calculate the probability of an event given the following probability of each outcome: (0.1, 0.2, 0.3, 0.4).", "input": "", "output": "The probability of the event occurring is 0.1 + 0.2 + 0.3 + 0.4 = 1.0", "category": "Python"}, {"instruction": "Explain the differences between Bitwise AND, OR, and XOR operations.", "input": "", "output": "The bitwise AND (&) operation returns a 1 in a given bit position if both bits being compared are equal to 1. The bitwise OR (|) operation returns a 1 in a given bit position if either or both of the bits being compared are equal to 1. The bitwise XOR (^) operation produces a result of 1 if the two bits being compared are different and 0 if both bits are the same.", "category": "Python"}, {"instruction": "Perform a binary search on the following list of integers: [0, 1, 2, 3, 4, 5, 6, 7, 8].", "input": "", "output": "def binary_search(nums, target):\n  low = 0\n  high = len(nums) - 1\n\n  while low <= high:\n    mid = (low + high) // 2\n    if target == nums[mid]:\n      return mid\n    elif target < nums[mid]:\n      high = mid - 1\n    else:\n      low = mid + 1\n  \n  return -1", "category": "Python"}, {"instruction": "Write a Python code to find the largest and the second largest numbers in a list.", "input": "List: [2, 9, 12, 45, 10, 20]", "output": "def getLargestTwo(l):\n    first_largest = second_largest = float('-inf')\n    for num in l:\n        if num > first_largest:\n            second_largest = first_largest\n            first_largest = num\n        elif num > second_largest and num != first_largest:\n            second_largest = num\n    return (first_largest, second_largest)", "category": "Python"}, {"instruction": "W rite a function to display a string in reverse order.", "input": "String: Hello world", "output": "def reverseString(string):\n    return string[::-1]", "category": "Python"}, {"instruction": "Write a code snippet to create an array filled with alternating 0s and 1s.", "input": "Array size: 5", "output": "def createAlternateArray(n):\n    result = [False] * n\n    for i in range(n):\n        if i % 2 == 0:\n            result[i] = True\n    return result", "category": "Python"}, {"instruction": "Construct a Java method to convert a string to its equivalent title case format.", "input": "String: this is the string to be converted", "output": "public static String toTitleCase(String input) {\n    StringBuilder titleCase = new StringBuilder();\n    boolean nextTitleCase = true;\n    for (char c : input.toCharArray()) {\n        if (Character.isSpaceChar(c)) {\n            nextTitleCase = true;\n        } else if (nextTitleCase) {\n            c = Character.toTitleCase(c);\n            nextTitleCase = false;\n        }\n        titleCase.append(c);\n    }\n    return titleCase.toString();", "category": "Python"}, {"instruction": "Generate a program in Java to find the mean of n numbers.", "input": "", "output": "public class Mean {\n\n    // Method to calculate the mean of n numbers\n    static double mean(int numbers[])\n    {\n        double sum = 0.0;\n        for (int i : numbers)\n            sum += i;\n        return sum / numbers.length;\n    }\n\n    public static void main(String[] args)\n    {\n        int numbers[] = { 10, 20, 30, 40, 50 };\n\n        // Display the result\n        System.out.println(\"Mean of numbers is : \" + mean(numbers));\n    }\n}", "category": "Python"}, {"instruction": "Create a logic using Python that checks if a string contains only alphabetical characters or not.", "input": "", "output": "def checkAlphabet(string): \n\n   alphabets = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\n   for i in string: \n      if i not in alphabets: \n         return False\n   return True", "category": "Python"}, {"instruction": "Generate a query using SQL to filter all values greater than 30 from a table.", "input": "", "output": "SELECT value FROM tablename WHERE value > 30;", "category": "Python"}, {"instruction": "What are the reachable, non-reachable and partially reachable states in a DFA?", "input": "", "output": "In a Deterministic Finite Automaton (DFA), there are three types of states: reachable states, non-reachable states, and partially reachable states. Reachable states are those states which can be reached from the start state. Non-reachable states are those which can never be reached from the start state. Partially reachable states are those that can only be reached from the start state through some other states.", "category": "Python"}, {"instruction": "Is this JavaScript condition valid?", "input": "if (a === b)", "output": "true", "category": "Python"}, {"instruction": "Update the query to return the distinct first names of all users in the database.", "input": "db.userData.find()", "output": "db.userData.distinct(\"firstName\")", "category": "Python"}, {"instruction": "Create a one line solution in Python to remove all vowels from a string.", "input": "", "output": "my_string = 'This is a sentence without any vowels'\nnew_string = ''.join([i for i in my_string if i not in 'aeiouAEIOU']) \nprint(new_string)", "category": "Python"}, {"instruction": "Create a regular expression to check if a given string contains any the letter 'X'.", "input": "", "output": "RegExp(\"X\", \"i\")", "category": "Python"}, {"instruction": "Write a regular expression that matches even numbers within a given string.", "input": "", "output": "RegExp(\"[0-9]*[02468]\")", "category": "Python"}, {"instruction": "Edit the following sentence so that it becomes grammatically correct.", "input": "Sentence: I was leaving to work.", "output": "I was leaving for work.", "category": "Python"}, {"instruction": "Create a CSS selector to select every 5th element in a page.", "input": "", "output": ":nth-child(5n)", "category": "Python"}, {"instruction": "Write a PHP function to describe a variable type given the value.", "input": "value: \"Hello\"", "output": "function describe_variable_type($value) \n{ \n    if(is_int($value)) \n        return 'integer'; \n    elseif(is_float($value)) \n        return 'float'; \n    elseif(is_bool($value)) \n        return 'boolean'; \n    elseif(is_string($value)) \n        return 'string'; \n    else \n        return 'unknown'; \n}", "category": "Python"}, {"instruction": "Write a SQL query to find the name of a customer from a given customer id.", "input": "customer_id: 100", "output": "SELECT name FROM customers WHERE customer_id = 100", "category": "Python"}, {"instruction": "Create an array of 15 random floats in Python between 0 and 1.", "input": "", "output": "import random\n\nrandom_floats = [random.uniform(0, 1) for _ in range(15)]", "category": "Python"}, {"instruction": "Explain the concept of memory leak in C++.", "input": "", "output": "A memory leak in C++ occurs when a programmer allocates memory but fails to deallocate that memory when it is no longer needed. This results in memory being unnecessarily allocated and unavailable for other uses. This can lead to decreased performance as well as limit the amount of available memory, causing the program to crash.", "category": "Python"}, {"instruction": "Edit the given C++ code to find and print the maximum number in an array of integers.", "input": "int a[5] = {2, 3, 4, 5, 1};", "output": "int a[5] = {2, 3, 4, 5, 1};\n\nint maxNum = a[0];\n\nfor(int i = 1; i < 5; i++)\n{\n if(a[i] > maxNum)\n  maxNum = a[i];\n}\n\n// maximum number is:\ncout << maxNum << endl;", "category": "Python"}, {"instruction": "Divide a list of numbers into two smaller lists, one with even numbers and one with odd numbers.", "input": "[1, 2, 3, 4, 5, 6]", "output": "def divide_list(numbers):\n    even_list = []\n    odd_list = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return even_list, odd_list\n\n# Driver Code\nnumbers = [1, 2, 3, 4, 5, 6]\neven_list, odd_list = divide_list(numbers)\nprint(even_list) # [2, 4, 6]\nprint(odd_list)  # [1, 3, 5]", "category": "Python"}, {"instruction": "Implement a custom promise-based JavaScript library.", "input": "", "output": "const Promise = (() => {\n  let resolveCallbacks = [];\n  let rejectCallbacks = [];\n\n  const promise = (executor) => {\n   executor((data) => {\n     resolveCallbacks.forEach(callback => {\n       callback(data);\n     });\n   }, (error) => {\n     rejectCallbacks.forEach(callback => {\n       callback(error);\n     });\n   });\n\n   return {\n     then: (resolve, reject) => {\n       resolveCallbacks.push(resolve);\n       rejectCallbacks.push(reject);\n     }\n   };\n  };\n\n  return promise;\n})();", "category": "Python"}, {"instruction": "Create a function to normalize a given pandas dataframe.", "input": "", "output": "def normalize_df(df): \n    normalized_df=(df-df.min())/(df.max()-df.min())\n    return normalized_df\n\nnorm_df = normalize_df(df)", "category": "Python"}, {"instruction": "Given the python code below, reverse the order of the lines to form a valid program.", "input": "def myFunc(): \n    print(1) \n    return \nprint(2)", "output": "def myFunc(): \n    print(2) \n    return \nprint(1)", "category": "Python"}, {"instruction": "Generate a list of all the prime numbers in the range from 0 to the given number n.", "input": "", "output": "def is_prime(n):\n    \"\"\"\n    This function will check if a given number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef generate_list_of_primes(n):\n    \"\"\"\n    This function will generate a list of all the prime numbers in the range from 0 to the given number n.\n    \"\"\"\n    primes = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "category": "Python"}, {"instruction": "Write a Python code to calculate the sum of three given numbers, if the values are equal, then return triple their sum", "input": "", "output": "def sumThree(n1, n2, n3):\n    \"\"\"\n    This function returns the sum of three numbers\n\tIf the values are equal, it will return triple their sum\n    \"\"\"\n    if n1 == n2 == n3:\n        return 3 * (n1 + n2 + n3)\n    else:\n        return n1 + n2 + n3", "category": "Python"}, {"instruction": "Create a function in Python to return the approximate value of sin(x) using degrees", "input": "", "output": "import math\ndef sin_deg(x):\n   \"\"\"\n   Returns the approximate value of the sine of x, given in degrees.\n   \"\"\"\n   return math.sin(math.radians(x))", "category": "Python"}, {"instruction": "Create an algorithm in Python to combine two sorted lists into a single sorted list.", "input": "list1 = [3, 5, 7]\nlist2 = [1, 2, 4]", "output": "def merge_lists(lst1, lst2): \n  sorted_list = []\n  i=j=0\n  while (i<len(lst1) and j<len(lst2)):\n    if lst1[i] <= lst2[j]:\n      sorted_list.append(lst1[i])\n      i+=1\n    else:\n      sorted_list.append(lst2[j])\n      j+=1\n\n  sorted_list  += lst1[i:]\n  sorted_list += lst2[j:]\n \n  return sorted_list\n\nlist1 = [3, 5, 7]\nlist2 = [1, 2, 4]\n \nprint(merge_lists(list1, list2))", "category": "Python"}, {"instruction": "Write HTML code to display the following table.", "input": "", "output": "<table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th> \n    <th>Country</th>\n  </tr>\n  <tr>\n    <td>John</td>\n    <td>30</td> \n    <td>USA</td>\n  </tr>\n  <tr>\n    <td>Mary</td>\n    <td>25</td> \n    <td>Canada</td>\n  </tr>\n  <tr>\n    <td>Jane</td>\n    <td>40</td> \n    <td>Australia</td>\n  </tr>\n<table>", "category": "Python"}, {"instruction": "Write an SQL query to produce an output which contains the name of the employee and the number of orders that employee has been responsible for.", "input": "", "output": "SELECT e.name, COUNT(o.employee_id) as order_count\nFROM employees e \nINNER JOIN orders o \nON e.id=o.employee_id \nGROUP BY e.name;", "category": "Python"}, {"instruction": "What is the result of x = 2 and y = 3 in this function, f(x,y) = x^3 + 2y^2?", "input": "", "output": "The result of x = 2 and y = 3 in the function f(x,y) = x^3 + 2y^2 is 19.", "category": "Python"}, {"instruction": "Write a Python function to remove punctuation from a given sentence.", "input": "The quick brown fox jumps over the lazy dog!", "output": "def remove_punctuation(sentence):\n punctuation_marks = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n new_sentence = \"\"\n for char in sentence:\n if char not in punctuation_marks:\n new_sentence += char\n return new_sentence", "category": "Python"}, {"instruction": "Write a SQL query to find the count of all customers whose age is more than 20?", "input": "", "output": "SELECT COUNT(*)\nFROM customers c\nWHERE c.age > 20;", "category": "Python"}, {"instruction": "Create a mySQL script to create a table called \"User\" with columns user_id, name, and mobile_number?", "input": "", "output": "CREATE TABLE User (\n  user_id int NOT NULL AUTO_INCREMENT PRIMARY KEY,\n  name varchar(50) NOT NULL,\n  mobile_number varchar(20) NOT NULL\n);", "category": "Python"}, {"instruction": "Write a Python Function to implement the game of Tic-Tac-Toe.", "input": "", "output": "class GameState:\n    def __init__(self):\n        self.board = [[None, None, None],\n                      [None, None, None],\n                      [None, None, None]\n        ]\n    \n    def is_game_over(self):\n        b = self.board\n        # Check if a player won\n        if b[0][0] == b[0][1] == b[0][2] != None or b[1][0] == b[1][1] == b[1][2] != None or b[2][0] == b[2][1] == b[2][2] != None:\n            return True\n        elif b[0][0] == b[1][0] == b[2][0] != None or b[0][1] == b[1][1] == b[2][1] != None or b[0][2] == b[1][2] == b[2][2] != None:\n            return True\n        elif b[0][0] == b[1][1] == b[2][2] != None or b[0][2] == b[1][1] == b[2][0] != None:\n            return True\n        # Check if the board is full\n        elif any(None in row for row in b):\n            return False\n        # All positions filled, no winner\n        else:\n            return True", "category": "Python"}, {"instruction": "Arrange the following characters in a valid Python expression.", "input": "<, 1, %, (", "output": "(1 % <)", "category": "Python"}, {"instruction": "Define a class in Python that represents a currency.", "input": "", "output": "class Currency:\n    def __init__(self, currency_name, currency_symbol, currency_value):\n        self.name = currency_name\n        self.symbol = currency_symbol\n        self.value = currency_value\n        \n    def __str__(self):\n        return f\"{self.name}: {self.symbol}{self.value}\"", "category": "Python"}, {"instruction": "Write a Python function to convert a given Unix timestamp to a readable format like \"day, month, date, hours:minutes:seconds, year\".", "input": "", "output": "import datetime\n\ndef timestamp_to_readable(unix_timestamp):\n    return datetime.datetime.fromtimestamp(unix_timestamp).strftime(\"%A, %B %d, %H:%M:%S, %Y\")", "category": "Python"}, {"instruction": "Submit an optimized solution to the following leetcode problem.", "input": "Problem: Given two binary trees, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.", "output": "def isSameTree(p, q):\n    if p is None and q is None:\n        return True\n    if p is None or q is None:\n        return False\n    if p.val != q.val:\n        return False\n    return isSameTree(p.left, q.left) and isSameTree(p.right, q.right)", "category": "Python"}, {"instruction": "Write a Python function to calculate the power of a number raised to the nth power.", "input": "", "output": "def calculate_power(base, power):\n    if power == 0:\n        return 1\n    else:\n        return base * calculate_power(base, power - 1)", "category": "Python"}, {"instruction": "Generate a password that is at least 8 characters long and contains at least one letter, one number, and one special character.", "input": "", "output": "import random\nimport string\n\ndef generate_password():\n    characters = string.ascii_letters + string.digits + string.punctuation\n    length = 8\n    password = ''.join(random.choice(characters) for _ in range(length))\n    while not (any(c.isdigit() for c in password) and any(c.isalpha() for c in password)\n           and any(c in string.punctuation for c in password)):\n        password = ''.join(random.choice(characters) for _ in range(length))\n    return password", "category": "Python"}, {"instruction": "Change the following code to convert the temperature from Fahrenheit to Celsius.", "input": "def convert_fahrenheit_to_celsius(temperature):\n    return temperature - 32", "output": "def convert_fahrenheit_to_celsius(temperature):\n    return (temperature - 32) * 5 / 9", "category": "Python"}, {"instruction": "Generate a code snippet to calculate the sum of an array", "input": "arr = [1, 23, 4, 3, 5]", "output": "def summation(arr):\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n\nprint(summation(arr)) # Output: 36", "category": "Python"}, {"instruction": "Create a class for constructing a new tree", "input": "", "output": "class TreeNode:\n\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n    \n    def Insert(self, data):\n        if self.data:\n            if data < self.data:\n                if self.left is None:\n                    self.left = TreeNode(data)\n                else:\n                    self.left.Insert(data)\n            elif data > self.data:\n                if self.right is None:\n                    self.right = TreeNode(data)\n                else:\n                    self.right.Insert(data)\n        else:\n            self.data = data", "category": "Python"}, {"instruction": "Write a function to generate anagrams for a given string", "input": "str = \"cat\"", "output": "import itertools\n\ndef anagrams(str):\n    return [\"\".join(permutation) for permutation in itertools.permutations(str)]\n\nprint(anagrams(str)) # Output: ['cat', 'cta', 'act', 'atc', 'tca', 'tac']", "category": "Python"}, {"instruction": "Design a function to create a secure password", "input": "", "output": "import random\nimport string\n\ndef secure_password(strong=False):\n    length = random.randint(8, 16)\n    letters = string.ascii_lowercase+string.ascii_uppercase+string.digits\n    if strong:\n        symbols = string.punctuation\n        letters += symbols\n    return ''.join(random.choice(letters) for i in range(length))", "category": "Python"}, {"instruction": "Construct a data dictionary for a movie", "input": "", "output": "movie_dict = {\n  'title' : str,\n  'director' : str,\n  'producer' : str,\n  'writer' : str,\n  'actors' : list,\n  'release_date' : date,\n  'runtime_minutes' : int,\n  'budget' : int,\n  'production_company' : str,\n  'box_office' : int,\n  'genres' : list,\n  'plot' : str,\n  'awards' : list,\n  'language' : str,\n  'country' : str,\n}", "category": "Python"}, {"instruction": "Write a JavaScript function to create a new object from the given object.", "input": "obj = {\n    \"name\": \"John\",\n    \"age\": 30\n}", "output": "function cloneObject(obj){\n    let newObj = {}\n \n    for (let key in obj){\n        if (obj.hasOwnProperty(key)){\n            newObj[key] = obj[key]\n        }\n    }\n    return newObj\n}", "category": "Python"}, {"instruction": "Write a function to compare two strings and return the number of different characters in each string.", "input": "", "output": "def compare_strings(s1, s2):\n    s1_chars = list(s1)\n    s2_chars = list(s2)\n    num_diff_chars = 0\n    for char in s1_chars:\n        if char not in s2_chars:\n            num_diff_chars += 1\n    for char in s2_chars:\n        if char not in s1_chars:\n            num_diff_chars += 1\n    return num_diff_chars", "category": "Python"}, {"instruction": "Construct a for loop in Java to increment a counter from 0 to 10.", "input": "", "output": "for (int i = 0; i < 10; i++) { \n   System.out.println(i); \n}", "category": "Python"}, {"instruction": "Analyze an object-oriented program written in Python and suggest changes to improve its technical quality.", "input": "def main():\n  my_list = [1,2,3,4] \n\n  for element in my_list:\n    print(element)\n\nif __name__== \"__main__\"\n  main()", "output": "The program can be improved to make use of better data structure, such as a list comprehension. This would allow faster iteration over the list and reduce duplicate lines of code.\n\ndef main():\n  my_list = [1,2,3,4] \n\n  my_list = [element for element in my_list] \n\n  for element in my_list:\n    print(element)\n\nif __name__== \"__main__\"\n  main()", "category": "Python"}, {"instruction": "Train a machine learning algorithm to classify objects into one of two classes.", "input": "", "output": "from sklearn.svm import SVC \nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\n\n# Load the iris dataset \niris = load_iris()\n\n# Split the data into train and test sets \nX_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, \n                                                    random_state=0)\n\n# Train the model using SVC \nclf = SVC(kernel='linear', C=1).fit(X_train, y_train)\n\n# Predict the labels of the test set \ny_pred = clf.predict(X_test)", "category": "Python"}, {"instruction": "Create a serverless application with AWS Lambda.", "input": "", "output": "Create an AWS Lambda function with associated IAM roles and policies that define the function\u2019s access to related AWS resources. Package your code into a .zip file and upload it to AWS Lambda. Connect the Lambda function to an API Gateway to make your function accessible through an API endpoint.", "category": "Python"}, {"instruction": "Write a Java program that adds two numbers and checks whether the sum is greater than 5 or not.", "input": "int x = 3;\nint y = 4;", "output": "public class Add {\n    public static void main(String[] args) {\n        int x = 3;\n        int y = 4;\n\n        int sum = x + y;\n\n        if (sum > 5) {\n            System.out.println(\"Greater than 5\");\n        } else {\n            System.out.println(\"Less than or equal to 5\");\n        }\n    }\n}", "category": "Python"}, {"instruction": "Given a string in Python, generate a new string with the same set of characters but in the reverse order.", "input": "str = \"abcdefg\"", "output": "str = \"gfedcba\"", "category": "Python"}, {"instruction": "Given the following Python code, identify if it is syntactically correct or not.", "input": "def add(a\nb):\nreturn a+b", "output": "false", "category": "Python"}, {"instruction": "Write a C program that takes an array and its size as an argument and returns its maximum value.", "input": "int array[] = { 12, 3, 4, 5, 10, 7 };", "output": "#include <stdio.h>\nint getMax(int arr[], int n)\n{\n    int i;\n    int max = arr[0];\n    for (i = 1; i < n; i++)\n        if (arr[i] > max)\n            max = arr[i];\n    return max;\n} \nint main()\n{\n    int arr[] = { 12, 3, 4, 5, 10, 7 };\n    int n = sizeof(arr) / sizeof(arr[0]);\n    printf(\"Maximum element is %d\", getMax(arr, n));\n    return 0;\n}", "category": "Python"}, {"instruction": "Build a script to print the words that have the most occurrences in a given string.", "input": "\"This is just a simple string\"", "output": "def most_occurrences(sentence):\n    freq = {}\n    for word in sentence.split():\n        freq[word] = freq.get(word, 0) + 1\n\n    freq_words = [(freq[word], word) for word in freq]\n    freq_words.sort(reverse=True)\n    print(freq_words[:2])\n\nmost_occurrences(\"This is just a simple string\")", "category": "Python"}, {"instruction": "Use PHP to create a web page redirect script.", "input": "", "output": "<?php\n    header(\"Location: http://www.example.com\");\n    die();\n?>", "category": "Python"}, {"instruction": "Build a PHP function to check if two strings are anagrams.", "input": "$s1 = 'abcd';\n$s2 = 'dcba';", "output": "function is_anagram($s1, $s2) { \n    // If the lengths of the strings are not equal,\n    // they cannot be anagrams\n    if (strlen($s1) != strlen($s2)) { \n        return false; \n    } \n  \n    // Create an array and assign value 0 to each character\n    $count = array(); \n    for ($i = 0; $i < strlen($s1); $i++) { \n        $count[$s1[$i]] = 0; \n    } \n  \n    // Increase the count of each character found in first string\n    for ($i = 0; $i < strlen($s1); $i++) { \n        $count[$s1[$i]]++; \n    } \n  \n    // Decrease the count of each character found in second string\n    for ($i = 0; $i < strlen($s2); $i++) { \n        $count[$s2[$i]]--; \n    } \n  \n    // If all the counts are 0, then they are anagrams\n    foreach ($count as $value) { \n        if ($value != 0) { \n            return false; \n        } \n    } \n  \n    return true; \n}", "category": "Python"}, {"instruction": "Write a Python function that takes a list of integers and returns True if any of the integers is divisible by 7.", "input": "", "output": "def is_divisible_by_seven(ints):\n    return any(num % 7 == 0 for num in ints)", "category": "Python"}, {"instruction": "Modify this C program to minimize the number of lines without applying the ternary operator.", "input": "int min = num1 < num2 ? num1 : num2;", "output": "int min;\nif (num1 < num2) {\n   min = num1;\n} else {\n   min = num2;\n}", "category": "Python"}, {"instruction": "Implement an algorithm to subtract two strings, represented as a linked list, in the order they appear in and return the result as a linked list.", "input": "l1 = [\"1\",\"2\",\"3\"],\nl2 = [\"9\",\"2\"]", "output": "def linkedListSubtract(l1, l2):\n    dummy_node = ListNode(0)\n    current = dummy_node\n \n    carry = 0\n    while l1 or l2:\n        curr_value1 = 0\n        curr_value2 = 0\n        if l1 :\n            curr_value1 += int(l1.val)\n            l1 = l1.next\n        if l2 :\n            curr_value2 += int(l2.val)\n            l2 = l2.next\n        curr_value = curr_value1 - curr_value2 - carry\n        if curr_value < 0 :\n            curr_value += 10\n            carry = 1\n        else :\n            carry = 0\n        current.next = ListNode(str(curr_value))\n        current = current.next\n \n    if carry > 0 :\n        current.next = ListNode(str(carry))\n    return dummy_node.next", "category": "Python"}, {"instruction": "Create a Java program that takes a list of integers as an argument and computes the longest increasing subsequence.", "input": "[8, 10, 1, 4, 15, 6, 7]", "output": "public class LongestIncreasingSubsequence {\n  \n    public static int longestSubsequence (int[] nums) {\n        // Base case\n        if (nums.length == 0) {\n            return 0;\n        }\n \n        int[] dp = new int[nums.length];\n        dp[0] = 1;\n        int maxLength = 1;\n \n        for (int i=1; i < nums.length; i++) {\n            int temp = 0;\n            for (int j=0; j < i; j++) {\n                if (nums[j] < nums[i]) {\n                    temp = Math.max(dp[j], temp);\n                }\n            }\n \n            dp[i] = temp + 1;\n            maxLength = Math.max(dp[i], maxLength);\n        }\n \n        return maxLength;\n    }\n}", "category": "Python"}, {"instruction": "Use Java to send an HTTP request to an API endpoint with a login form.", "input": "", "output": "import java.net.*; \nimport java.io.*; \n\npublic class HttpClient {\n\n  public static void main(String[] args) {\n\n    try { \n      URL url = new URL(\"http://example.com/api/login\"); \n\n      HttpURLConnection con = (HttpURLConnection) url.openConnection(); \n\n      // Request headers\n      con.setRequestMethod(\"POST\");\n      con.setRequestProperty(\"Content-Type\", \"application/json\");\n\n      // Request body\n      String body = \"{\\\"username\\\":\\\"john_doe\\\", \\\"password\\\":\\\"password123\\\"}\";\n\n      // Send POST request\n      con.setDoOutput(true);\n      DataOutputStream wr = new DataOutputStream(con.getOutputStream());\n      wr.writeBytes(body);\n      wr.flush();\n      wr.close();\n\n      // Output response \n      int responseCode = con.getResponseCode();\n      System.out.println(\"Response code: \" + responseCode);\n      BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n      String inputLine;\n      StringBuffer content = new StringBuffer();\n      while ((inputLine = in.readLine()) != null) {\n        content.append(inputLine);\n      }\n      in.close();\n      System.out.println(content.toString());\n    } \n    catch (Exception ex) { \n      ex.printStackTrace();\n    } \n  } \n}", "category": "Python"}, {"instruction": "Install and set up a database management system called MongoDB.", "input": "", "output": "1. Download and install the MongoDB server\n2. Create data directories, a log file and a configuration file\n3. Update configuration entries to reflect storage capacity and logging preferences\n4. Start the MongoDB service\n5. Create new users, roles and databases\n6. Connect applications to MongoDB", "category": "Python"}, {"instruction": "Generate code which returns a random character from a given list of strings.", "input": "['apple','orange','pineapple','grape']", "output": "import random \n\ndef random_character(strings): \n    return random.choice(strings)\n\nrandom_character(['apple','orange','pineapple','grape'])", "category": "Python"}, {"instruction": "Create a HTML page displaying a table holding information about the 10 most populous countries in the world.", "input": "", "output": "<html>\n  <head>\n    <title>Population of the World</title>\n  </head>\n  <body>\n    <table>\n      <tr>\n        <th>Country</th>\n        <th>Population</th>\n      </tr>\n      <tr>\n        <td>China</td <td>1,439,323,776</td>\n      </tr>\n      <tr>\n        <td>India</td> <td>1,380,004,385</td>\n      </tr>\n      <tr>\n        <td>United States</td> <td>329,064,917</td>\n      </tr>\n      <tr>\n        <td>Indonesia</td> <td>273,523,615</td>\n      </tr>\n      <tr>\n        <td>Pakistan</td> <td>220,892,340</td>\n      </tr>\n      <tr>\n        <td>Brazil</td> <td>212,559,717</td>\n      </tr>\n      <tr>\n        <td>Nigeria</td> <td>206,139,589</td>\n      </tr>\n      <tr>\n        <td>Bangladesh</td> <td>164,689,383</td>\n      </tr>\n      <tr>\n        <td>Russia</td> <td>145,934,462</td>\n      </tr>\n      <tr>\n        <td>Mexico</td> <td>126,577,691</td>\n      </tr>\n    </table>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Edit a first person narrative created by a GPT model in order to make the narrative more coherent.", "input": "I was walking in the forest and suddenly I saw a dragon. It was huge and its scales glimmered in the sunlight. It had sharp claws and its eyes were red.", "output": "I was strolling through the dense forest when, out of the corner of my eye, I noticed something large and shimmering in the sunlight. As I approached, I saw a magnificent dragon lounging among the trees. Its scales glinted in the sun's rays and its massive, sharply-clawed feet were planted firmly into the ground. Its eyes burned a deep red as it watched my slow approach.", "category": "Python"}, {"instruction": "Write a function in JavaScript to flatten the given array.", "input": "[1, [[2, 3], 4], 5, [6]]", "output": "function flatten(arr) {\n  const flattened = [];\n  // Call the function recursively\n  const flattenHelper = (a) => {\n    for (let i = 0; i < a.length; i++) {\n      Array.isArray(a[i]) ? flattenHelper(a[i]) : flattened.push(a[i]);\n    }\n  };\n\n  flattenHelper(arr);\n  return flattened;\n}", "category": "Python"}, {"instruction": "Given an array of integers, remove any duplicate numbers and sort the remaining elements in ascending order.", "input": "arr = [3, 9, 8, 4, 6, 7, 5, 4]", "output": "arr = [3, 4, 5, 6, 7, 8, 9]", "category": "Python"}, {"instruction": "Add a method to the following class which prints the student's name in upper case.", "input": "class Student:\n  def __init__(self, name):\n    self.name = name", "output": "class Student:\n  def __init__(self, name):\n    self.name = name\n  \n  def print_name_upper(self):\n    print(self.name.upper())", "category": "Python"}, {"instruction": "Given the following code, write a function to validate the input dates are in increasing order.", "input": "# Validate if the inputs are valid dates\ndef validate_dates(date_list):\n    pass", "output": "# Validate if the inputs are valid dates\ndef validate_dates(date_list):\n    if len(date_list) == 0:\n        return True\n    prev_date = date_list[0]\n    for date in date_list[1:]:\n        if date < prev_date:\n            return False\n        prev_date = date\n    return True", "category": "Python"}, {"instruction": "Generate HTML to create a table with 3 columns and 6 rows with the first row as the header.", "input": "", "output": "<table>\n <tr>\n  <th>Header 1</th>\n  <th>Header 2</th>\n  <th>Header 3</th>\n </tr>\n <tr>\n  <td>Row 1 Column 1</td>\n  <td>Row 1 Column 2</td>\n  <td>Row 1 Column 3</td>\n </tr>\n <tr>\n  <td>Row 2 Column 1</td>\n  <td>Row 2 Column 2</td>\n  <td>Row 2 Column 3</td>\n </tr>\n <tr>\n  <td>Row 3 Column 1</td>\n  <td>Row 3 Column 2</td>\n  <td>Row 3 Column 3</td>\n </tr>\n <tr>\n  <td>Row 4 Column 1</td>\n  <td>Row 4 Column 2</td>\n  <td>Row 4 Column 3</td>\n </tr>\n <tr>\n  <td>Row 5 Column 1</td>\n  <td>Row 5 Column 2</td>\n  <td>Row 5 Column 3</td>\n </tr>\n <tr>\n  <td>Row 6 Column 1</td>\n  <td>Row 6 Column 2</td>\n  <td>Row 6 Column 3</td>\n </tr>\n</table>", "category": "Python"}, {"instruction": "Given an array of strings and the task is to find the longest string from the given string array.", "input": "[\"Google\", \"Facebook\", \"Amazon\", \"Zapier\" ]", "output": "public class LongestString {\n \n    public static String getLongestString(String[] array) {\n    \n        if(array.length == 0) {\n            return null;\n        }\n         \n        String longestString = array[0]; \n         \n        for(int i = 1; i < array.length; i++) {\n            if(array[i].length() > longestString.length()) {\n                longestString = array[i];\n            }\n        }\n         \n        return longestString;\n    }\n    \n    public static void main(String[] args) {\n \n        String[] array = {\"Google\", \"Facebook\", \"Amazon\", \"Zapier\"};\n         \n        String longestString = getLongestString(array);\n         \n        System.out.println(\"Longest string: \"+longestString); \n    }\n}", "category": "Python"}, {"instruction": "Implement a queue following the classic FIFO (First-in-first-out) principle using Python.", "input": "", "output": "class Queue:\n    def __init__(self):\n        self.queue = []\n\n    def enqueue(self, val):\n        self.queue.append(val)\n\n    def dequeue(self):\n        if self.queue:\n            return self.queue.pop(0)\n        else:\n            return None\n\n    def peek(self):\n        if self.queue:\n            return self.queue[0]\n        else:\n            return None", "category": "Python"}, {"instruction": "Find the sum of the products of the digits of a given number with its reverse.", "input": "Number = 1234", "output": "The sum of the products of the digits of 1234 with its reverse is 30.\n\nsum = (1*4) + (2*3) + (3*2) + (4*1) = 30.", "category": "Python"}, {"instruction": "Write a function to find the path from a source point to a destination point in a given 2D array.", "input": "Array: [[0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [1, 0, 0, 1, 0], [0, 0, 0, 1, 0]]\nSource Point: [0, 0]\nDestination Point: [3, 4]", "output": "def find_path(array, source, dest):\n    path = [source]\n    sx, sy = source\n    while path[-1] != dest:\n        dx, dy = path[-1]\n        if dx > 0 and array[dx - 1][dy] == 0:\n            path.append([dx-1, dy])\n        elif dy > 0 and array[dx][dy-1] == 0:\n            path.append([dx, dy-1])\n        elif dx < len(array)-1 and array[dx + 1][dy] == 0:\n            path.append([dx+1, dy])\n        elif dy < len(array[0])-1 and array[dx][dy+1] == 0:\n            path.append([dx, dy+1])\n    return path", "category": "Python"}, {"instruction": "Calculate the sum of the cube of integers from 1 to n.", "input": "", "output": "def cube_sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum", "category": "Python"}, {"instruction": "Calculate the maximum sum of a subarray of length k.", "input": "Array: [1, 3, 4, 5, 20, 32]\nK: 3", "output": "The maximum sum of a subarray of length 3 is 51 (20 + 5 +26).", "category": "Python"}, {"instruction": "Create an array of integers using C++ where the first element is equal to the last element.", "input": "", "output": "#include <iostream>\nusing namespace std;\n \nint main() \n{\n    // set the array size\n    int n = 5;\n    int arr[n];\n\n    // set the first and last element to the same value\n    arr[0] = 5;\n    arr[n-1] = 5;\n\n    // fill in the other elements\n    for (int i = 1; i < (n-1); i++)\n        arr[i] = 0;\n\n    // print the array\n    for (int i=0; i<n; i++)\n\t\tcout << arr[i] << \" \"; \n\t\n\treturn 0;\n}", "category": "Python"}, {"instruction": "Train a Naive Bayes model in Python to classify emails into spam and non-spam classes.", "input": "", "output": "# import libraries \nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# read in the data \ndata = pd.read_csv('email_data.csv')\n\n# split into training and test data\nX_train, X_test, y_train, y_test = train_test_split(data['text'], data['label'], test_size=0.33, random_state=42)\n\n# create vectorizer and transform training data\ncount_vector = CountVectorizer()\ncount_train = count_vector.fit_transform(X_train)\n\n# create and train a Naive Bayes model\nNB_classifier = MultinomialNB()\nNB_classifier.fit(count_train,y_train)\n\n# transform test data\ncount_test = count_vector.transform(X_test)\n\n# predict test labels\npreds = NB_classifier.predict(count_test)", "category": "Python"}, {"instruction": "Create a clould-based web application in Java to store financial details.", "input": "", "output": "import java.io.*; \nimport java.util.*; \nimport com.amazonaws.services.lambda.*; \nimport com.google.gson.Gson;\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport org.json.simple.*; \nimport org.json.simple.JSONObject; \n\npublic class DataStorage implements RequestHandler<JSONObject, JSONObject> { \n  public JSONObject handleRequest(JSONObject input, Context context) { \n    // Read details from the request \n    String userID = (String)input.get(\"userID\"); \n    String transactionID = (String)input.get(\"transactionID\"); \n    float amount = ((Number)input.get(\"amount\")).floatValue(); \n    String description = (String)input.get(\"description\"); \n \n    // Store data in database\n    // Code for storing data\n\n    return response; \n  } \n}", "category": "Python"}, {"instruction": "Create a website layout with three columns and fixed size main section.", "input": "", "output": "<style> \n  .container {\n    display: flex; \n  }\n\n  .column {\n    flex: 1; \n  }\n\n  .main {\n    flex: 2;\n  }\n</style>\n\n<div class=\"container\"> \n  <div class=\"column\"> </div>\n  <div class=\"main\"> </div>\n  <div class=\"column\"> </div>\n</div>", "category": "Python"}, {"instruction": "Choose a sorting algorithm and write a function in C++ to sort a list of numbers.", "input": "", "output": "void selectionSort(int arr[], int n)  \n{  \n    int i, j, min_idx;  \n  \n    // One by one move boundary of unsorted subarray  \n    for (i = 0; i < n-1; i++)  \n    {  \n        // Find the minimum element in unsorted array  \n        min_idx = i;  \n        for (j = i+1; j < n; j++)  \n        if (arr[j] < arr[min_idx])  \n            min_idx = j;  \n  \n        // Swap the found minimum element with the first element  \n        swap(&arr[min_idx], &arr[i]);  \n    }  \n}", "category": "Python"}, {"instruction": "Create a React app with two routes Home and About with two separate components.", "input": "", "output": "import React from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\n// Home Component \nconst Home = () => {\n  return(\n    <div>\n      <h1>Home</h1>\n    </div>\n  );\n}\n\n// About Component \nconst About = () => {\n  return(\n    <div>\n      <h1>About</h1>\n    </div>\n  );\n}\n\n// Main App\nclass App extends React.Component {\n  render(){\n    return(\n      <Router>\n        <div>\n          // Home Route\n          <Route path=\"/\" exact component={Home} />\n\n          // About Route\n          <Route path=\"/about\" exact component={About} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;", "category": "Python"}, {"instruction": "Create a CSS rule to display an element with a dark orange background color.", "input": "", "output": ".dark-orange {\n  background-color: #EC672B;\n}", "category": "Python"}, {"instruction": "You need to debug this code and ensure that it runs properly.", "input": "def cost_calc(product, quantity): \n    total_cost = 0\n    for i, q in zip(products, quantity):\n        cost = i.cost * q \n        total_cost = total_cost + cost \n        return total_cost:", "output": "def cost_calc(products, quantity): \n    total_cost = 0\n    for i, q in zip(products, quantity):\n        cost = i.cost * q \n        total_cost += cost \n    return total_cost", "category": "Python"}, {"instruction": "Write a Python function to generate a random password with length 8 containing any combination of upper and lowercase letters, numbers, and symbols.", "input": "", "output": "import string \nimport random \n\ndef generate_password(): \n\tletter_lower = string.ascii_lowercase\n\tletter_upper = string.ascii_uppercase\n\tsymbols = string.punctuation\n\tdigits = string.digits\n\tpassword = ''.join(random.choice(letter_lower + letter_upper + symbols + digits) for i in range(8))\n\treturn password\n\npassword = generate_password()\nprint(password)", "category": "Python"}, {"instruction": "Create a SQL query to count the total number of movies for every genre in the database.", "input": "", "output": "SELECT genre, COUNT(*) as total_movies \n  FROM Movies \n GROUP BY genre", "category": "Python"}, {"instruction": "Create a bash script that creates three TextFiles named first.txt, second.txt, and third.txt each having 10 lines of text.", "input": "", "output": "#!/bin/bash\n \nfor file in {first,second,third}.txt; do\n   touch $file\n   for i in {1..10}; do\n      echo \"This is line $i in the file $file\" >> $file\n   done\ndone", "category": "Python"}, {"instruction": "Write a code to filter out the names longer than 5 characters from the following list.", "input": "data = [\"James\", \"John\", \"Susan\", \"Bella\", \"Natalie\", \"Adam\", \"Sam\", \"Eric\"]", "output": "data = [\"James\", \"John\", \"Susan\", \"Bella\", \"Natalie\", \"Adam\", \"Sam\", \"Eric\"]\n\nfiltered_data = [name for name in data if len(name) > 5]\n\nprint(filtered_data) \n# Output: [\"James\", \"John\", \"Bella\", \"Natalie\", \"Sam\"]", "category": "Python"}, {"instruction": "Construct an SQL query to find the total number of female employees with a certain department in a company.", "input": "Department: HR", "output": "SELECT COUNT(*)\nFROM Employees\nWHERE Department='HR'\nAND Gender='F';", "category": "Python"}, {"instruction": "Create a JavaScript program to generate Fibonacci series up to a given number.", "input": "", "output": "function printFibonacciSeries(n) \n{ \n    let a = 0, b = 1;\n\n  // Iterate through the series and print the \n  // value for every number \n  for (let i = 1; i <= n; i++) { \n    console.log(a); \n    let sum = a + b; \n    a = b; \n    b = sum; \n  } \n} \n\n// Driver code \nlet n = 10;\nprintFibonacciSeries(n);", "category": "Python"}, {"instruction": "Write a Scala function to generate a range of numbers.", "input": "", "output": "def generateRange(start:Int, end:Int): List[Int] = {     \n   if (start > end) List(end)\n   else start :: generateRange(start+1, end)\n}", "category": "Python"}, {"instruction": "Create a Perl script to parse a given string and extract all names.", "input": "", "output": "my $str = 'John, Paul, George and Ringo';\n\nmy @names = split(',\\s', $str);\n\nforeach my $name (@names) {\n print $name; \n}", "category": "Python"}, {"instruction": "Create a KMP algorithm in Python to find a pattern in a given text.", "input": "Text: abcabdababd\nPattern:abd", "output": "def KMPSearch(pat, txt): \n    M = len(pat) \n    N = len(txt) \n  \n    # create lps[] that will hold the longest prefix suffix  \n    # values for pattern \n    lps = [0]*M \n    j = 0 # index for pat[] \n  \n    # Preprocess the pattern (calculate lps[] array) \n    computeLPSArray(pat, M, lps) \n  \n    i = 0 # index for txt[] \n    while i < N: \n        if pat[j] == txt[i]: \n            i += 1\n            j += 1\n  \n        if j == M: \n            print(\"Found pattern at index \" + str(i-j)) \n            j = lps[j-1] \n  \n        # mismatch after j matches \n        elif i < N and pat[j] != txt[i]: \n            # Do not match lps[0..lps[j-1]] characters, \n            # they will match anyway \n            if j != 0: \n                j = lps[j-1] \n            else: \n                i += 1\n        \ndef computeLPSArray(pat, M, lps): \n    len = 0 # length of the previous longest prefix suffix \n  \n    lps[0] # lps[0] is always 0 \n    i = 1\n  \n    # the loop calculates lps[i] for i = 1 to M-1 \n    while i < M: \n        if pat[i]== pat[len]: \n            len += 1\n            lps[i] = len\n            i += 1\n        else: \n            # This is tricky. Consider the example. \n            # AAACAAAA and i = 7. The idea is similar  \n            # to search step. \n            if len != 0: \n                len = lps[len-1] \n  \n                # Also, note that we do not increment i here \n            else: \n                lps[i] = 0\n                i += 1", "category": "Python"}, {"instruction": "Create a C++ function to determine the number of inversions in an array.", "input": "", "output": "int merge(int arr[], int temp[], int left, int mid, int right) \n{ \n    int i, j, k; \n    int inv_count = 0; \n  \n    i = left; /* i is index for left subarray */\n    j = mid; /* j is index for right subarray */\n    k = left; /* k is index for resultant merged subarray */\n    while ((i <= mid - 1) && (j <= right)) { \n        if (arr[i] <= arr[j]) { \n            temp[k++] = arr[i++]; \n        } \n        else { \n            temp[k++] = arr[j++]; \n  \n            /* this is tricky -- see above \n               explanation/diagram for merge()*/\n            inv_count = inv_count + (mid - i); \n        } \n    } \n  \n    /* Copy the remaining elements of left subarray \n       (if there are any) to temp*/\n    while (i <= mid - 1) \n        temp[k++] = arr[i++]; \n  \n    /* Copy the remaining elements of right subarray \n       (if there are any) to temp*/\n    while (j <= right) \n        temp[k++] = arr[j++]; \n  \n    /*Copy back the merged elements to original array*/\n    for (i = left; i <= right; i++) \n        arr[i] = temp[i]; \n  \n    return inv_count; \n}", "category": "Python"}, {"instruction": "Write a SQL query to find students residing in a particular city.", "input": "City: London", "output": "SELECT * \nFROM Students \nWHERE City = 'London';", "category": "Python"}, {"instruction": "Write a function in Python to remove all 'null' values from a nested dictionary.", "input": "", "output": "def remove_nulls(dictionary):\n    if isinstance(dictionary, dict):\n        return {key: remove_nulls(value) \n        for key, value in dictionary.items() if not value == None}\n    else:\n        return dictionary", "category": "Python"}, {"instruction": "Create a database to store customer data and products.", "input": "", "output": "CREATE DATABASE customers_and_products;\n\nUSE customers_and_products;\n\nCREATE TABLE customers ( \n    id INT NOT NULL AUTO_INCREMENT, \n    first_name VARCHAR(255) NOT NULL, \n    last_name VARCHAR(255) NOT NULL, \n    email VARCHAR(255) NOT NULL, \n    PRIMARY KEY(id) \n);\n\nCREATE TABLE products ( \n    id INT NOT NULL AUTO_INCREMENT, \n    name VARCHAR(255) NOT NULL, \n    price INT NOT NULL, \n    PRIMARY KEY(id) \n);", "category": "Python"}, {"instruction": "Generate a code snippet to define a class called Animal in Java.", "input": "", "output": "public class Animal {\n    \n    // instance variables\n    private String name;\n    private int age;\n        \n    // constructor\n    public Animal(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n \n    // methods\n    public void eat() { \n        System.out.println(\"I'm eating!\"); \n    }\n    public void sleep() { \n        System.out.println(\"I'm sleeping!\"); \n    }\n}", "category": "Python"}, {"instruction": "Given a list of numbers, create a code to find the maximum product of three numbers.", "input": "[-1, -2, 4, 5, 8, 9]", "output": "def max_product_three_numbers(arr):\n    arr.sort()\n    return max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1])\n\nmax_product = max_product_three_numbers([-1, -2, 4, 5, 8, 9])\nprint(max_product)  # Output: 360", "category": "Python"}, {"instruction": "Create a code to create a userid from the given firstname and lastname.", "input": "Firstname: John\nLastname: Smith", "output": "def create_userid(firstname, lastname):\n    userid = firstname[0] + lastname[:5]\n    return userid\n\nuserid = create_userid(\"John\", \"Smith\")\nprint(userid) # Output: JSmith", "category": "Python"}, {"instruction": "Write a code to generate all possible binary strings of length 5.", "input": "", "output": "def gen_binary_strings(n):\n    result = []\n    for i in range(2**n):\n        s = bin(i)[2:]\n        s = s.zfill(n)\n        result.append(s)\n    return result\n\nprint(gen_binary_strings(5))\n# Output: ['00000', '00001', '00010', '00011', '00100', '00101', '00110', '00111', '01000', '01001', '01010', '01011', '01100', '01101', '01110', '01111', '10000', '10001', '10010', '10011', '10100', '10101', '10110', '10111', '11000', '11001', '11010', '11011', '11100', '11101', '11110', '11111']", "category": "Python"}, {"instruction": "Given an array of integers, create a code to return the second-largest number.", "input": "[12, 45, 2, 41, 31, 10, 8, 6, 4]", "output": "def second_largest(arr):\n    largest = max(arr)\n    arr.remove(largest)\n    return max(arr)", "category": "Python"}, {"instruction": "Suggest a way to scale the following function for n values.", "input": "def scale(x):\n    return x * 2", "output": "def scale(arr, n):\n    return [x * 2  for x in arr[:n]]", "category": "Python"}, {"instruction": "Create a code to get the difference between two timestamps in seconds.", "input": "timestamp1 = \"2020-07-02 14:13:37\"\ntimestamp2 = \"2020-07-03 13:21:46\"", "output": "import datetime\n\ndef get_difference_in_seconds(timestamp1, timestamp2):\n    datetime1 = datetime.datetime.strptime(timestamp1, \"%Y-%m-%d %H:%M:%S\")\n    datetime2 = datetime.datetime.strptime(timestamp2, \"%Y-%m-%d %H:%M:%S\")\n    difference = (datetime2 - datetime1).total_seconds()\n    return difference", "category": "Python"}, {"instruction": "Create an HTML view with a button that changes its text when clicked.", "input": "", "output": "<button id=\"button\">Click me!</button>\n\n<script>\n  document.getElementById('button').addEventListener('click', function(){\n    this.innerText=\"I am clicked!\";\n  });\n </script>", "category": "Python"}, {"instruction": "Separate the words in a given string using a single space.", "input": "str = \"thequickbrownfoxjumps\"", "output": "str = \"the quick brown fox jumps\"", "category": "Python"}, {"instruction": "Create a program that outputs a spiral array from the given input of a 2D array.", "input": "[[ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9]]", "output": "[1, 2, 3, 6, 9, 8, 7, 4, 5]", "category": "Python"}, {"instruction": "Compute the sum of all integers from 1 to the given number n.", "input": "", "output": "def print_sum(n):\n sum = 0\n for i in range(1, n+1):\n sum += i\n return sum", "category": "Python"}, {"instruction": "Explain in plain English the difference between the set() and list() methods in Python.", "input": "", "output": "The main difference between sets and lists in Python is the way the elements are stored. Lists store the elements in an ordered sequence, whereas sets store the elements in an unordered set. Sets are faster in terms of performance because they do not have duplicate elements. This means that when checking if an element exists in a set, the process is faster than checking for elements in a list. Furthermore, sets also do not allow for indexing, as the elements are unordered.", "category": "Python"}, {"instruction": "Propose an algorithm in Python for sorting a given list of numbers in descending order.", "input": "", "output": "One possible solution would be to use a variation of the bubble sort algorithm, where the elements are being swapped from the last element to the first element.\n\ndef sort_numbers_descending(elements):\n  n = len(elements)\n  # Traverse through all elements\n  for i in range(n-1):\n    # Last i elements are already in place\n    for j in range(n-1-i):\n      # Swap if the element found is greater\n      # than the next element\n      if elements[j] < elements[j+1]:\n        temp = elements[j]\n        elements[j] = elements[j+1]\n        elements[j+1] = temp\n  return elements", "category": "Python"}, {"instruction": "Proposition some ideas for a C++ program to calculate the average price of a product given its list of purchased items.", "input": "", "output": "One possible solution would involve creating a program that takes a list of purchased items and calculates the average price of the product. The program could take the following steps:\n1. Sum the prices of all items in the list.\n2. Divide the sum by the number of items in the list.\n3. Output the average price of the product.", "category": "Python"}, {"instruction": "In C#, write a loop to sum up a given array of numbers.", "input": "int[] numbers = {1, 2, 3, 4, 5};", "output": "int sum = 0;\nfor(int i = 0; i < numbers.length; i++) {\n  sum += numbers[i];\n}", "category": "Python"}, {"instruction": "Write a for-loop in Java for printing the numbers from 1 to 10 with a space separating each number.", "input": "", "output": "for (int i = 1; i <= 10; i++) {\n  System.out.print(i + \" \");\n}", "category": "Python"}, {"instruction": "Create a C++ class to print the \"Hello World!\" string.", "input": "", "output": "#include <iostream>\n \nusing namespace std;\n \nclass HelloWorld {\n public:\n HelloWorld() {\n cout << \"Hello World!\" << endl;\n }\n};\n\nint main() {\n HelloWorld hw; \n return 0; \n}", "category": "Python"}, {"instruction": "Write a SQL query to get the names of all customers with orders that have a total cost greater than $100.", "input": "Table names: customers, orders\nTable columns: customers(customer_id, customer_name), orders(order_id, customer_id, order_cost).", "output": "SELECT c.customer_name \nFROM customers c \nINNER JOIN orders o \nON c.customer_id = o.customer_id \nWHERE o.order_cost > 100;", "category": "Python"}, {"instruction": "Describe in English the function of this Javascript code.", "input": "function addUser(username, age) {\n const user = {\n name: username,\n age: age\n };\n \n return user;\n}", "output": "This Javascript code defines a function called 'addUser' which takes two parameters: username and age. It creates a 'user' object with the username and age as its properties and returns the object.", "category": "Python"}, {"instruction": "Balance the following reaction equation?", "input": "NaOH + H2SO4 \u2192", "output": "NaOH + H2SO4 \u2192 Na2SO4 + 2H2O.", "category": "Python"}, {"instruction": "Create a SQL query to display unique job titles from the the table \"employees\"?", "input": "Table name: employees\nColumns: employee_id, job_title", "output": "SELECT DISTINCT job_title \nFROM employees;", "category": "Python"}, {"instruction": "Create a function which prints out squares of all numbers from 1 to a given number in JavaScript.", "input": "", "output": "function printSquares(n) {\n    for (let i = 1; i <= n; i++) {\n        console.log(i*i)\n    }\n}", "category": "Python"}, {"instruction": "Discover and remove redundant code from this C++ program.", "input": "#include <iostream>\n\nint main()\n{\n  int a = 3;\n  int b = 3;\n\n  a++;\n  b++;\n  int c = 10;\n  a++;\n  b++;\n\n  std::cout << a << \" \" << b << \" \" << c << std::endl;\n  return 0;\n}", "output": "#include <iostream>\n\nint main()\n{\n  int a = 3;\n  int b = 3;\n\n  a++;\n  b++;\n  int c = 10;\n\n  std::cout << a << \" \" << b << \" \" << c << std::endl;\n  return 0;\n}", "category": "Python"}, {"instruction": "Create an object in JavaScript which produces some random number when the object is called.", "input": "", "output": "let randomNumber = {\n    getNumber: function() {\n        return Math.floor(Math.random() * 10);\n    }\n}\n\nlet myNum = randomNumber.getNumber(); // Possible output: 5", "category": "Python"}, {"instruction": "Write a PHP script to get the length of a string.", "input": "string = \"Hello World!\"", "output": "<?php\n$string = \"Hello World!\";\necho strlen($string);\n?>", "category": "Python"}, {"instruction": "Manipulate a 2D array in Python such that it consists of the maximum value of each column.", "input": "array = [[1, 2, 3], \n        [4, 5, 6], \n        [7, 8, 9]]", "output": "array = [[7, 8, 9], \n        [7, 8, 9], \n        [7, 8, 9]]\n\ndef max_columns(array): \n    for col in range(len(array[0])): \n        m = array[0][col] \n        for row in array:\n            if row[col] > m: \n                m = row[col]\n        for row in range(len(array)):\n            array[row][col] = m \n    return array", "category": "Python"}, {"instruction": "Create a basic UI in HTML/CSS for a shopping cart website.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n <title>Shopping Cart</title>\n <style>\n  body { margin: 0px; }\n  #container {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n  }\n  #header {\n    height: 100px;\n    background-color: #eee;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  #content {\n    flex: 1;\n    background-color: #ccc;\n  }\n  #footer {\n    height: 100px;\n    background-color: #eee;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n </style>\n</head>\n<body>\n <div id=\"container\">\n  <div id=\"header\">\n   <h1>Shopping Cart</h1>\n  </div>\n  <div id=\"content\">\n   <!-- Content here -->\n  </div>\n  <div id=\"footer\">\n   &copy; All rights reserved\n  </div>\n </div>\n</body>\n</html>", "category": "Python"}, {"instruction": "Rewrite the following recursive algorithm in Java.\n\ndef recursive(n):\n  if n == 0:\n    return 0\n  else:\n    return n + recursive(n-1)", "input": "", "output": "public static int recursive(int n) {\n  if (n == 0) {\n    return 0;\n  } else {\n    return n + recursive(n - 1);\n  }\n}", "category": "Python"}, {"instruction": "Write a script in PHP for generating a random alphanumeric string of length 10.", "input": "", "output": "<?php\nfunction generateRandomString($length = 10) {\n  $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  $charactersLength = strlen($characters);\n  $randomString = '';\n  for ($i = 0; $i < $length; $i++) {\n    $randomString .= $characters[rand(0, $charactersLength - 1)];\n  }\n  return $randomString;\n}\n\necho generateRandomString(10);", "category": "Python"}, {"instruction": "Create an API in Go that takes a string and returns the amount of words present in the given string.", "input": "", "output": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n)\n\nfunc CountWords(str string) int {\n  return len(strings.Fields(str))\n}\n\nfunc main() {\n  result := CountWords(\"The quick brown fox jumps over the lazy dog\")\n  fmt.Println(result) // Output: 9\n}", "category": "Python"}, {"instruction": "Create a GUI that displays text and a button.", "input": "", "output": "import tkinter as tk \n\nroot = tk.Tk() \n\ntk.Label(root, text='Hello World!').pack() \ntk.Button(root, text=\"Click Me!\").pack() \n\nroot.mainloop()", "category": "Python"}, {"instruction": "Write a query to list the names and total order amount of customers who have purchased any item from the Items table.", "input": "", "output": "SELECT customers.name, SUM(items.price * orders.quantity) AS total \nFROM customers \nINNER JOIN orders \nON customers.id = orders.customer_id\nINNER JOIN items \nON orders.item_id = items.id\nGROUP BY customers.name", "category": "Python"}, {"instruction": "Write a function which takes in a list containing integers, strings and floats and returns the sum of all numbers in the list.", "input": "list = [2, 'John', 8.2, 3.4, 11]", "output": "def sum_numbers(lst): \n    sum = 0\n    for item in lst: \n        if type(item) == int or type(item) == float: \n            sum += item \n    return sum", "category": "Python"}, {"instruction": "Write a query to retrieve the names of customers from the Customers table who have orders in the Orders table.", "input": "", "output": "SELECT customers.name \nFROM customers \nINNER JOIN orders\nON customers.id = orders.customer_id", "category": "Python"}, {"instruction": "Write a function which takes a list and an additional argument, and returns the elements of the list which are greater than the argument.", "input": "list = [10, 20, 30, 40, 50, 60]\nargument = 25", "output": "def greater(list, argument):\n    output = [] \n    for int in list:\n        if int > argument:\n            output.append(int)\n    return output", "category": "Python"}, {"instruction": "Write a JavaScript program to clone a given object.", "input": "", "output": "function clone(obj) {\n    let cloneobj = {}; \n    \n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            cloneobj[key] = obj[key]; \n        }\n    }\n \n    return cloneobj; \n}", "category": "Python"}, {"instruction": "Write a Java program to generate the following patterns using a for loop.\n\n* \n** \n*** \n****", "input": "", "output": "public class Pattern { \n    public static void main(String[] args) { \n        for (int i = 1; i <= 4; i++) { \n            for (int j = 1; j <= i; j++ ) \n            System.out.print(\"*\"); \n            System.out.println(); \n        } \n    } \n}", "category": "Python"}, {"instruction": "Use C++ to implement the bubble sort algorithm.", "input": "", "output": "void bubbleSort(int arr[], int n) \n{ \n   int i, j; \n   for (i = 0; i < n-1; i++)       \n  \n       // Last i elements are already in place \n       for (j = 0; j < n-i-1; j++)  \n           if (arr[j] > arr[j+1]) \n              swap(&arr[j], &arr[j+1]); \n}", "category": "Python"}, {"instruction": "Create a Python dictionary object", "input": "{'a':1, 'b':2, 'c':3}", "output": "mydict = {'a':1, 'b':2, 'c':3}", "category": "Python"}, {"instruction": "Represent the following expression using a program", "input": "x = 5, y = 3", "output": "x = 5\ny = 3\nresult = x + y\nprint(result)", "category": "Python"}, {"instruction": "Create a sorting algorithm to order a given array.", "input": "[ 2 , 8 , 3 , 10 , 16 ]", "output": "def sort_array(arr):\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]  # swap\n    return arr", "category": "Python"}, {"instruction": "Create a program in Javascript that takes an array of numbers and an integer and returns an array containing only the numbers that are larger than the given integer.", "input": "Array of numbers: [4, 8, 12, 7, 3]  \nInteger: 7", "output": "function filterBiggerThan(arr, num) {\n  return arr.filter(n => n > num);\n}", "category": "Python"}, {"instruction": "Design an algorithm in Python to retrieve all elements in a given array that occur only once.", "input": "", "output": "def singleOccurence(arr): \n    ans = []\n    for i in range(len(arr)): \n        count = 0\n        for j in range(len(arr)): \n            if arr[i] == arr[j]: \n                count+=1\n        if count == 1: \n            ans.append(arr[i]) \n    return ans", "category": "Python"}, {"instruction": "Write a C++ program that reads in a series of integers and prints out the most frequent.", "input": "", "output": "#include <iostream> \n#include <algorithm>\nusing namespace std; \n\nvoid mostFrequent(int arr[], int n) \n{ \n    sort(arr, arr + n); \n  \n    int max_count = 1, res = arr[0], curr_count = 1; \n  \n    for (int i = 1; i < n; i++) { \n        if (arr[i] == arr[i - 1]) \n            curr_count++; \n        else { \n            if (curr_count > max_count) { \n                max_count = curr_count; \n                res = arr[i - 1]; \n            } \n            curr_count = 1; \n        } \n    } \n  \n    if (curr_count > max_count) \n    { \n        max_count = curr_count; \n        res = arr[n - 1]; \n    } \n  \n cout << \"Most frequent element is: \"<< res; \n} \n\nint main() \n{ \n    int arr[] = { 1, 5, 2, 1, 3, 2, 5 }; \n    int n = sizeof(arr) / sizeof(arr[0]); \n    \n    mostFrequent(arr, n); \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Create a function in Python to find all pairs of integers that sum up to k.", "input": "", "output": "def find_pair(arr,k):\n  pairs = []\n  found_elements = set()\n  for num in arr:\n    diff = k - num\n    if diff in found_elements:\n      pairs.append([min(num,diff), max(num,diff)])\n    found_elements.add(num)\n  return pairs", "category": "Python"}, {"instruction": "Write a class in Ruby that implements the following methods: `add`, `subtract`, `multiply`, and `divide`.", "input": "", "output": "class Arithmetic\n  def add(x, y)\n    x + y\n  end  \n  def subtract(x, y)\n    x - y\n  end  \n  def multiply(x, y)\n    x * y\n  end  \n  def divide(x, y)\n    x.to_f / y\n  end\nend", "category": "Python"}, {"instruction": "How can you use a function to determine whether a given array is in increasing or decreasing order or unordered?", "input": "", "output": "def check_order(arr):\n     order = 0\n     if arr[0] < arr[1]:\n         order = 1\n     elif arr[0] > arr[1]:\n         order = -1\n     \n     for i in range(1, len(arr)-1):\n        if arr[i] > arr[i+1] and order == 1:\n            return 0\n        elif arr[i] < arr[i+1] and order == -1:\n            return 0\n     return order", "category": "Python"}, {"instruction": "Use CSS to style an HTML paragraph.", "input": "<p> This is a sample paragraph. </p>", "output": "<p style=\"font-family: Arial, sans-serif; font-size: 1.2em; color: #1a1a1a; line-height: 1.8em;\">This is a sample paragraph.</p>", "category": "Python"}, {"instruction": "Use HTML to create a webpage which featured a table.", "input": "", "output": "<html>\n  <head>\n    <title>Page Title</title>\n  </head>\n  <body>\n    <h1>My Table Webpage</h1>\n    <table>\n        <tr>\n            <th>Column 1</th>\n            <th>Column 2</th>\n        </tr>\n        <tr>\n            <td>Row 1, Column 1</td>\n            <td>Row 1, Column 2</td>\n        </tr>\n        <tr>\n            <td>Row 2, Column 1</td>\n            <td>Row 2, Column 2</td>\n        </tr>\n        <tr>\n            <td>Row 3, Column 1</td>\n            <td>Row 3, Column 2</td>\n        </tr>\n    </table>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a code to delete white space from this sentence.", "input": "This is  a sentence with    extra white  space.", "output": "sentence = 'This is  a sentence with    extra white  space.'\nsentence = sentence.replace(' ', '')\nprint(sentence) # outputs 'Thisisasentencewithextrawhitespace.'", "category": "Python"}, {"instruction": "Create a JSON object with the key 'name' and the value 'John'.", "input": "", "output": "{\n  \"name\": \"John\"\n}", "category": "Python"}, {"instruction": "Replace the following PHP code with an equivalent JavaScript code", "input": "$someNumber = 10;", "output": "let someNumber = 10;", "category": "Python"}, {"instruction": "Write a Python script to check if two string variables are anagrams or not.", "input": "", "output": "def is_anagram(str1, str2):\n    # removing all whitespace from strings \n    str1 = ''.join(str1.split())\n    str2 = ''.join(str2.split()) \n\n    # create list for each string \n    list_str1 = list(str1.upper()) \n    list_str2 = list(str2.upper()) \n\n    # sort the list \n    list_str1.sort() \n    list_str2.sort() \n\n    # checking if both lists are identical or not \n    if (list_str1 == list_str2): \n        return True\n    else: \n        return False", "category": "Python"}, {"instruction": "Create a script in Bash to print the 1st and 3rd program arguments.", "input": "", "output": "#!/bin/bash\necho $1\necho $3", "category": "Python"}, {"instruction": "Design a function to parse the given URL and return its components.", "input": "url = \"https://www.example.com/path/to/file.php?query=123&param=value\"", "output": "def parse_url(url):\n    parsed = {}\n    parsed[\"domain\"], parsed[\"path\"] = url.split('/', 2)[2:4]\n    params = parsed[\"path\"].split('?')[1] if \"?\" in parsed[\"path\"] else None\n    parsed[\"query\"] = params.split('&') if params else None\n    return parsed", "category": "Python"}, {"instruction": "Create a regex pattern to match a string that contains two words separated by a single space.", "input": "", "output": "import re \npattern = re.compile(r\"\\w+\\s\\w+\")", "category": "Python"}, {"instruction": "Compute the sum of all the even numbers and odd numbers in an array of numbers.", "input": "[1, 2, 3, 4, 5, 6]", "output": "def sum_of_even_odd(arr):\n  even_sum = 0\n  odd_sum = 0\n  for i in arr:\n    if i % 2 == 0:\n      even_sum += i\n    else:\n      odd_sum += i\n  return even_sum, odd_sum", "category": "Python"}, {"instruction": "Suggest a more efficient way to write the following for loop.", "input": "for (i = 0; i < arr.length; i++) { \n  console.log(arr[i]); \n}", "output": "arr.forEach(item => console.log(item));", "category": "Python"}, {"instruction": "Implement the algorithm to reverse a singly linked list.", "input": "", "output": "# Node class  \nclass Node:\n    def __init__(self, data):\n        self.data = data   \n        self.next = None \n  \n# LinkedList class \nclass LinkedList:  \n    # Function to initialize head \n    def __init__(self):\n        self.head = None\n  \n    def reverse(self): \n        prev = None\n        current = self.head \n        while(current is not None): \n            next = current.next\n            current.next = prev \n            prev = current \n            current = next\n        self.head = prev", "category": "Python"}, {"instruction": "Update the code to create a class named Person that contains two instance attributes-name and age.", "input": "class Person():\n    # TODO: add name and age instance attributes", "output": "class Person():\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "category": "Python"}, {"instruction": "Create a Python script to print out all prime numbers up to and including a given number n.", "input": "", "output": "def print_prime_numbers(n):  \n    for num in range(2, n + 1):  \n        is_prime = True \n        for i in range(2, num):  \n            if (num % i) == 0:  \n                is_prime = False\n                break\n        if is_prime:\n            print(num)", "category": "Python"}, {"instruction": "Design a function to find the Fibonacci sequence numbers given n.", "input": "n = 5", "output": "def Fibonacci(n):  \n    if n == 0:   \n        return 0  \n    elif n == 1:  \n        return 1  \n    else:  \n        return Fibonacci(n-1) + Fibonacci(n-2)", "category": "Python"}, {"instruction": "Design an algorithm that computes the minimum number of moves taking an array of integers to a sorted array.", "input": "[1, 3, 5, 4, 2]", "output": "def minMoves(arr): \n    n = len(arr) \n    moves = 0\n    for i in range(n):  \n        for j in range(n - 1):\n            if arr[j] > arr[j + 1]:  \n                temp = arr[j]\n                arr[j] = arr[j + 1] \n                arr[j + 1] = temp\n                moves += 1\n\n    return moves", "category": "Python"}, {"instruction": "Generate a summary of an article containing more than 500 words.", "input": "", "output": "The article is about _____. It discusses the subject in depth, exploring various aspects of the topic. It provides a comprehensive overview of different perspectives on the topic and presents evidence to support its conclusions. In conclusion, the article provides a comprehensive evaluation of _____ by offering a balanced and unbiased assessment of the subject.", "category": "Python"}, {"instruction": "Create a program that takes in two lists of numbers and computes the maximum difference between the two lists.", "input": "List 1: [20, 10, 4, 0]\nList 2: [17, 1, 10, 7, 8]", "output": "19", "category": "Python"}, {"instruction": "Develop a program that offers the maximum value from a list of numbers.", "input": "[2, 10, 7, 15, 8, 11]", "output": "15", "category": "Python"}, {"instruction": "Design a function to compute n^2-2n.", "input": "", "output": "def calculate_n_squared(n):\n    return n**2 - 2*n", "category": "Python"}, {"instruction": "Write a function in Python to check if two lists have the same elements regardless of their order.", "input": "list1 = [\"cat\", \"dog\", \"mouse\"]\nlist2 = [\"mouse\", \"dog\", \"cat\"]", "output": "def is_similar(list_1, list_2):\n  if len(list_1) != len(list_2):\n    return False\n  list_1.sort()\n  list_2.sort()\n  for i, j in zip(list_1, list_2):\n    if i != j:\n      return False\n  return True", "category": "Python"}, {"instruction": "Edit the following CSS class to display a square box with a border-radius of 10px", "input": ".square {\n  width: 100px;\n  height: 100px;\n}", "output": ".square {\n  width: 100px;\n  height: 100px;\n  border-radius: 10px;\n}", "category": "Python"}, {"instruction": "Name a specific package that can be used to implement a REST API in Node.js", "input": "", "output": "The Express.js package can be used to implement a REST API in Node.js.", "category": "Python"}, {"instruction": "Implement a recursive function that finds the nth number in the Fibonacci sequence.", "input": "", "output": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(5)) # outputs 5", "category": "Python"}, {"instruction": "Generate a query to find the name and age of all students whose age is greater than 18.", "input": "", "output": "SELECT name, age FROM students WHERE age > 18;", "category": "Python"}, {"instruction": "Write code to create an SQLite table called \"Students\" with 5 columns: student_id, name, age, class, and grade.", "input": "", "output": "# Import sqlite3 module\nimport sqlite3\n \n# Connect to the Students.db database\nconn = sqlite3.connect('Students.db')\n \n# Create the Students table\nconn.execute(\"\"\"\nCREATE TABLE Students (\n              student_id INTEGER PRIMARY KEY,\n              name TEXT NOT NULL,\n              age INTEGER NOT NULL,\n              class TEXT NOT NULL,\n              grade INTEGER NOT NULL);\n\"\"\")\nconn.close()", "category": "Python"}, {"instruction": "Given an array, find the 2 elements which have the largest sum.", "input": "arr = [2, 8, 3, 5, 10, 1]", "output": "def find_largest_sum(arr):\n  max_sum = 0\n  first_ele = arr[0]\n  sec_ele = arr[1]\n\n  for i in range(0, len(arr)):\n    for j in range(i+1, len(arr)):\n      curr_sum = arr[i] + arr[j]\n      if curr_sum > max_sum:\n        max_sum = curr_sum\n        first_ele = arr[i]\n        sec_ele = arr[j]\n  return [first_ele, sec_ele]\n\nprint(find_largest_sum(arr)) # outputs [10, 8]", "category": "Python"}, {"instruction": "Generate a dictionary with 10 elements and display it.", "input": "", "output": "dictionary = {\n 'A': 'Apple',\n 'B': 'Ball',\n 'C': 'Cat',\n 'D': 'Dog',\n 'E': 'Elephant',\n 'F': 'Fish',\n 'G': 'Goat',\n 'H': 'Horse',\n 'I': 'Ink',\n 'J': 'Jelly'\n}\n \nprint(dictionary)", "category": "Python"}, {"instruction": "Write code using the NumPy random library to simulate the rolling of two fair six-sided dice.", "input": "", "output": "import numpy as np\nnp.random.seed(0)\n\n# simulate the rolling of two fair six-sided dice\noutcomes = np.random.randint(1,7, size=(2,2))\nprint(outcomes)", "category": "Python"}, {"instruction": "Design a MySQL table with 3 columns to store the order details", "input": "The columns should include Product No, Quantity, and Price.", "output": "CREATE TABLE order_details (\n  product_no VARCHAR(20) NOT NULL,\n  quantity INT NOT NULL,\n  price DECIMAL(10,2)\n);", "category": "Python"}, {"instruction": "Convert the following string \"The quick brown fox jumps over the lazy dog\" to an array", "input": "", "output": "[\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]", "category": "Python"}, {"instruction": "Modify the following code segment to add multiple values in an array", "input": "var myArray  = [];\nmyArray[0] = 'x';", "output": "var myArray = [];\nmyArray.push('x', 'y', 'z');", "category": "Python"}, {"instruction": "Write a SASS mixin to add shadow style to multiple elements", "input": "", "output": "@mixin myshadow($shdwBlur, $shdwColor)\n{\n    -webkit-box-shadow : 0 0 $shdwBlur $shdwColor;\n    -moz-box-shadow    : 0 0 $shdwBlur $shdwColor;\n    box-shadow         : 0 0 $shdwBlur $shdwColor;\n}", "category": "Python"}, {"instruction": "Model a NoSQL database using CosmosDB", "input": "The database should store user posts, which consists of the post ID, content text, user ID and date of creation.", "output": "Azure Cosmos DB is a NoSQL database-as-a-service model that provides a schema-free data model and supports automatic indexing of all data. \nTo model a posts database with CosmosDB, create a database and a container. \nThen create item in the container, each item should contain the fields \"Post ID\", \"ContentText\", \"User ID\" and \"Date of Creation\". \nThese fields should be indexed to allow for efficient queries and retrieval of the posts data.", "category": "Python"}, {"instruction": "Generate a web service function in Python to return the current date and time.", "input": "", "output": "import datetime\n\ndef get_current_time():\n    now = datetime.datetime.now()\n    return now.strftime(\"%Y-%m-%d %H:%M:%S\")", "category": "Python"}, {"instruction": "Rewrite the following code segment using Java 1.8's Lambda Expressions.", "input": "BiFunction<Double, Double, Double> bf = new BiFunction<Double, Double, Double>() {\n\n   public Double apply(Double d1, Double d2) { \n      return (d1*d2)/2;\n   }\n}", "output": "BiFunction <Double, Double, Double> bf = (d1, d2) -> (d1*d2)/2;", "category": "Python"}, {"instruction": "Develop a C++ function to update the contents of an integer array.", "input": "The int array contains {1, 2, 3, 4, 5}. \nUpdate the array so that it contains {2, 4, 6, 8, 10}.", "output": "void updateArray (int arr[], int n) \n{ \n    for (int i=0; i<n; i++) \n        arr[i] = arr[i] * 2; \n}", "category": "Python"}, {"instruction": "Use the reduce function to calculate the product of elements in an array", "input": "[1, 2, 3, 4, 5]", "output": "const product = arr.reduce((acc, curr) => acc * curr, 1);", "category": "Python"}, {"instruction": "Write a script that prints out the current value of environment variables", "input": "", "output": "For example, using Node.js:\n\nObject.keys(process.env).forEach(key => {\n  console.log(`${key}: ${process.env[key]}`);\n});", "category": "Python"}, {"instruction": "Design a JavaScript class to instantiate objects for student records.", "input": "The student records should store the student name, age, and score of the last test.", "output": "class Student {\n  constructor(name, age, lastScore) {\n    this.name = name;\n    this.age = age;\n    this.lastScore = lastScore;\n  }\n}", "category": "Python"}, {"instruction": "Identify which of these strings is a valid email address?", "input": "name@example.com,lily.flower@example.net,www@example.org", "output": "name@example.com is a valid email address.", "category": "Python"}, {"instruction": "Write a MySQL query to find all the customers who have placed an order in the last 30 days.", "input": "", "output": "SELECT * FROM customers\nWHERE EXISTS (SELECT *\n              FROM orders\n              WHERE customers.CustomerID = orders.CustomerID\n              AND orders.OrderDate > NOW() - INTERVAL 30 DAY)", "category": "Python"}, {"instruction": "Create a data structure to store employee information.", "input": "", "output": "class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary \n\nemployee_list = []", "category": "Python"}, {"instruction": "Write a function in Python that takes two arguments, a list of strings and a letter, and returns the strings which contain the letter.", "input": "lst = [\"apple\",\"banana\",\"kiwi\",\"pear\"], letter = \"a\"", "output": "def find_with_letter(lst, letter):\n    result = []\n    for s in lst:\n        if letter in s:\n            result.append(s)\n    \n    return result", "category": "Python"}, {"instruction": "Sort the given list of numbers in non-decreasing order with selection sort.", "input": "[2, 1, 5, 3, 4]", "output": "[1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Write an HTML webpage to display a table with employee details.", "input": "", "output": "<html> \n  <head> \n    <title>Employee Details</title>\n  </head>\n  <body>\n    <h2>Employee Details</h2>\n\n    <table> \n      <thead> \n        <tr> \n          <th>Name</th> \n          <th>Age</th> \n          <th>Salary</th> \n        </tr>\n      </thead> \n      <tbody>\n        <tr> \n          <td>John</td> \n          <td>30</td> \n          <td>50,000</td> \n        </tr> \n        <tr> \n          <td>Alice</td> \n          <td>27</td> \n          <td>45,000</td> \n        </tr> \n        <tr> \n          <td>Vinod</td> \n          <td>35</td> \n          <td>70,000</td> \n        </tr> \n      </tbody> \n    </table>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Given a dictionary of words, write Python code to find out the longest word in the dictionary.", "input": "dictionary = [\"apple\", \"orange\", \"pineapple\", \"banana\"]", "output": "def findLongestWord(dictionary):\n    longestWord = ''\n    longestLength = 0\n    for word in dictionary:\n        if len(word) > longestLength:\n            longestWord = word\n            longestLength = len(word)\n    return longestWord", "category": "Python"}, {"instruction": "What does the following code do?", "input": "def division(num1, num2):\n    return num1 / num2", "output": "The code defines a function called division which takes two numbers as arguments and returns the result of dividing the first number by the second number.", "category": "Python"}, {"instruction": "Convert the following function to a lambda expression", "input": "def power_of_two(x):\n    return x ** 2", "output": "power_of_two = lambda x : x ** 2", "category": "Python"}, {"instruction": "Re-write the following function to use list comprehension.", "input": "def negative_list(numbers):\n    negative = []\n    for num in numbers:\n        if num < 0:\n            negative.append(num)\n    return negative", "output": "def negative_list(numbers):\n    return [num for num in numbers if num < 0]", "category": "Python"}, {"instruction": "Create an array of size n filled with the string \"hello\".", "input": "", "output": "def fillWithHello(n):\n    arr = [] \n    for i in range(0, n): \n        arr.append(\"hello\") \n    return arr", "category": "Python"}, {"instruction": "Write code for displaying the Fibinacci sequence up to the nth term.", "input": "", "output": "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Write a JavaScript function to convert an array of strings to a comma-separated string.", "input": "arr = [\"this\", \"is\", \"a\", \"test\"]", "output": "//Function to convert an array of strings to a comma-separated string\nfunction arr_to_csv(arr) {\n    return arr.join(\",\");\n}\n\n// Testing code\nconsole.log(arr_to_csv(arr));", "category": "Python"}, {"instruction": "Create an array of strings, of size 5, by taking the string input from the user.", "input": "\"hello\", \"world\", \"this\", \"is\", \"a\"", "output": "arr = [\"hello\", \"world\", \"this\", \"is\", \"a\"]", "category": "Python"}, {"instruction": "Explain the term \"backtracking\".", "input": "", "output": "Backtracking is a general algorithm for finding all (or some) solutions to some computational problems, that incrementally builds candidates to the solutions and abandons each partial candidate c (\"backtracks\") as soon as it determines that c cannot possibly be completed to a valid solution.", "category": "Python"}, {"instruction": "Implement the following algorithm in Java.", "input": "// Bubble sort algorithm \nfor i in 0 to n-1 \n  for j in 0 to n-i-1 \n    if array[j] > array[j+1] \n      swap array[j] and array[j+1]", "output": "public void bubbleSort(int[] arr){\n  for (int i = 0; i < arr.length - 1; i++) {\n    for (int j = 0; j < arr.length - i - 1; j++) {\n      if (arr[j] > arr[j + 1]) {\n        int temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n      }\n    }\n  }\n}", "category": "Python"}, {"instruction": "Write a jQuery code snippet to retrieve the value of an input field with an id of \"name\".", "input": "", "output": "$(\"#name\").val();", "category": "Python"}, {"instruction": "Explain the concept of Generative Adversarial Networks (GANs).", "input": "", "output": "Generative Adversarial Networks (GANs) are a type of deep neural network that are composed of two sub-networks; a generative network and a discriminative network. The generative network produces samples such as images, audio, or text that try to fool the discriminator network, which is trained to recognize real data from generated data. The two networks are trained together in an adversarial setting, in which the generator attempts to generate data that is indistinguishable from real data and the discriminator tries to distinguish real data from generated data.", "category": "Python"}, {"instruction": "Find the greatest common divisor of these two numbers.", "input": "9 and 15", "output": "3", "category": "Python"}, {"instruction": "Write a loop in React that renders a list of numbers from 1 - 10.", "input": "", "output": "render() {\n  const numbers = [1,2,3,4,5,6,7,8,9,10];\n  return (\n    <ul>\n      {numbers.map(number => <li>{number}</li>)}\n    </ul>\n  );\n}", "category": "Python"}, {"instruction": "Given a positive integer, find the sum of its digits.", "input": "", "output": "def findSum(num): \n    res = 0\n    num = str(num)\n    for i in range(0, len(num)): \n        res = res + int(num[i]) \n    \n    return res", "category": "Python"}, {"instruction": "Debug the following code to make it compile properly.", "input": "def addNumbers(num1, num2)\n  return num1 + num2", "output": "def addNumbers(num1, num2):\n  return num1 + num2", "category": "Python"}, {"instruction": "Given a character sequence, find the longest palindromic substring.", "input": "sequence: madam", "output": "madam", "category": "Python"}, {"instruction": "Convert the following nested for loop into a single line list comprehension.", "input": "a = [1, 2, 3, 4]\nb = [5, 6, 7, 8]\n\nresult = []\nfor i in a:\n    for j in b:\n        result.append((i, j))", "output": "result = [(i,j) for i in a for j in b]", "category": "Python"}, {"instruction": "Pre-process the following dataset and convert it into a tabular format using Pandas.", "input": "data = [{\"name\": \"john\", \"age\": 20, \"location\": \"New York\"},\n        {\"name\": \"sarah\", \"age\": 30, \"location\": \"Los Angeles\"}]", "output": "import pandas as pd\n\ndf = pd.DataFrame(data)\n\n# Create tabular format \n df = df[[\"name\", \"age\", \"location\"]]", "category": "Python"}, {"instruction": "Find all substrings from a given string.", "input": "", "output": "def find_substring(str):\n    substrings = []\n    for length in range(1, len(str)+1):\n        for start in range(len(str)- length + 1):\n            substrings.append(str[start:start+length])\n    return substrings", "category": "Python"}, {"instruction": "Softmax a list of numbers and then sum the output.", "input": "[1, 2, 3]", "output": "def softmax(arr): \n    a = np.exp(arr)\n    return a / np.sum(a) \ndef sum_softmax(arr): \n    return np.sum(softmax(arr))", "category": "Python"}, {"instruction": "How would you modify the following code to print the square of each number in the given list?", "input": "nums = [1, 2, 3, 4]", "output": "nums = [1, 2, 3, 4]\n\nfor i in range(len(nums)):\n    nums[i] = nums[i] * nums[i]\n\nprint(nums) # [1, 4, 9, 16]", "category": "Python"}, {"instruction": "Write pseudo code for finding the maximum element in an array.", "input": "", "output": "START\nSET max_element to 0\nLOOP through array\n IF current element is greater than max_element\n SET max_element to current element\nEND LOOP\nPRINT maximum element\nEND", "category": "Python"}, {"instruction": "Create a PHP page to add two numbers.", "input": "", "output": "<html>\n <head>\n  <title>Add two numbers</title>\n </head>\n <body>\n  <?php\n   if (isset($_POST['add'])) {\n   $num1 = $_POST['num1'];\n   $num2 = $_POST['num2'];\n   $sum = $num1 + $num2;\n   ?>\n    <p>The sum of <?php echo $num1; ?> and <?php echo $num2; ?> is <?php echo $sum; ?></p>\n   <?php\n   } else {\n   ?>\n   <form action=\"add.php\" method=\"post\">\n    <label>Enter first number:</label>\n    <input type=\"text\" name=\"num1\">\n    <br>\n    <label>Enter second number:</label>\n    <input type=\"text\" name=\"num2\">\n    <input type=\"submit\" name=\"add\" value=\"Add\">\n   </form>\n   <?php\n   }\n  ?>\n </body>\n</html>", "category": "Python"}, {"instruction": "Write a JavaScript function to generate a random whole number.", "input": "", "output": "function getRandomNumber() {\n return Math.floor(Math.random() * 100);\n}", "category": "Python"}, {"instruction": "Identify the most frequent word in a given sentence.", "input": "This is a beautiful summer day", "output": "The most frequent word in the sentence is \"a\".", "category": "Python"}, {"instruction": "Develop a machine learning algorithm to predict stock prices.", "input": "Historical stock prices", "output": "The algorithm should include parts like data preprocessing, feature extraction, selecting the right model, hyperparameter optimization and evaluation.", "category": "Python"}, {"instruction": "Determine the average of 3 numbers.", "input": "30, 20, 60", "output": "The average of the 3 numbers is 36.", "category": "Python"}, {"instruction": "Write a function that takes a string of numbers separated by commas and returns the sum of all the numbers.", "input": "\"1,2,3,4\"", "output": "def sum_numbers(nums): \n    nums = nums.split(',')\n    total = 0\n  \n    # Traverse the string and add all elements \n    # of it to the total. \n    for i in range(len(nums)): \n        total += int(nums[i]) \n  \n    # return total \n    return total \n\nprint(sum_numbers(\"1,2,3,4\")) # 10", "category": "Python"}, {"instruction": "Write a CSS selector to select all paragraph elements with a class of \"highlight\".", "input": "", "output": "p.highlight {\n    /* CSS styles */\n}", "category": "Python"}, {"instruction": "Create a neural network in Python to recognize handwriting.", "input": "MNIST hand-written digit dataset", "output": "The code to create a neural network in Python to recognize handwriting should consist of several parts. These parts include importing the MNIST dataset, preprocessing the data, building the neural network model, training the network, evaluting the network's performance, and improving the accuracy using hyperparameters.", "category": "Python"}, {"instruction": "Predict the sentiment of a given sentence.", "input": "This movie was fairly dull.", "output": "The sentiment of the statement is negative.", "category": "Python"}, {"instruction": "Deploy a Docker container to Heroku.", "input": "Heroku account details", "output": "Log in to Heroku using the account details provided.\nUse the command \"heroku container:push web -a [app-name]\" to deploy the container to Heroku. This command will build and push the Docker container to your Heroku app. You can monitor the progress of the deployment in the \u2018Activity\u2019 tab.", "category": "Python"}, {"instruction": "Create a program to check if two given strings are a rotation of each other.", "input": "string1 = \"abcd\", string2= \"cdab\"", "output": "def isRotation(s1, s2):   \n    if len(s1) != len(s2): \n        return False\n  \n    temp = s1 + s1 \n    return (temp.count(s2) > 0)", "category": "Python"}, {"instruction": "Create an algorithm to sort a given array in ascending order using Bubble sort.", "input": "", "output": "def bubble_sort(arr): \n    # length of the array \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n-1): \n   \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]", "category": "Python"}, {"instruction": "Create a function to calculate the Levenshtein distance between two strings", "input": "str1 = \"geeks\", str2 = \"geek\"", "output": "def lev_dist(str1, str2):\n    if len(str1) < len(str2):\n        return lev_dist(str2, str1)\n    \n    if len(str2) == 0:\n        return len(str1)\n \n    previous_row = range(len(str2) + 1)\n    for i, c1 in enumerate(str1):\n        current_row = [i + 1]\n        for j, c2 in enumerate(str2):\n            insertions = previous_row[j + 1] + 1\n            deletions = current_row[j] + 1\n            substitutions = previous_row[j] + (c1 != c2)\n            current_row.append(min(insertions, deletions, substitutions))\n        previous_row = current_row\n    \n    return previous_row[-1]", "category": "Python"}, {"instruction": "Toast a Python function to swap the values of two given variables.", "input": "a = 10, b= 20", "output": "def swap(a, b): \n    a, b = b, a \n    return (a,b)", "category": "Python"}, {"instruction": "Design an HTML page with a table of products and their prices.", "input": "Table with 5 products and their prices", "output": "<html>\n <head>\n  <title>Product Prices</title>\n </head>\n <body>\n  <h1>Product Prices</h1>\n  <table>\n   <tr>\n    <th>Product Name</th><th>Price</th>\n   </tr>\n   <tr>\n    <td>Laptop</td><td>1000</td>\n   </tr>\n   <tr>\n    <td>Keyboard</td><td>50</td>\n   </tr>\n   <tr>\n    <td>Monitor</td><td>200</td>\n   </tr>\n   <tr>\n    <td>Mouse</td><td>30</td>\n   </tr>\n   <tr>\n    <td>Headphones</td><td>50</td>\n   </tr>\n  </table>\n </body>\n</html>", "category": "Python"}, {"instruction": "Create a method that prints all elements of an array", "input": "[1,2,3]", "output": "def print_elements(arr):\n    \"\"\"\n    Print all elements of an array.\n    \"\"\"\n    for num in arr:\n        print(num)\n\narr = [1,2,3]\nprint_elements(arr)", "category": "Python"}, {"instruction": "Given a string ``word``, write code to return the third character in the string.", "input": "word = \"hello\"", "output": "third_character = word[2] # the third character is 'l'", "category": "Python"}, {"instruction": "Replace the \"TODO\" placeholder in the following python code.", "input": "def add_two_numbers(a, b):\n    '''This function takes two numbers and returns their sum.'''\n    # TODO", "output": "def add_two_numbers(a, b):\n    '''This function takes two numbers and returns their sum.'''\n    return a + b", "category": "Python"}, {"instruction": "Create a program to compare the elements of three arrays and print the elements that are present in all the arrays.", "input": "arr1 = [2, 3, 4]\narr2 = [1, 2, 5]\narr3 = [2, 4, 6]", "output": "def compare_arrays(arr1, arr2, arr3):\n  common_elements = []\n  for elem in arr1:\n    if elem in arr2 and elem in arr3:\n      common_elements.append(elem)\n  print(common_elements)", "category": "Python"}, {"instruction": "Write a function that prints an array elements in a reverse order.", "input": "arr = [0, 1, 2, 3, 4, 5]", "output": "def reverse_print_array(arr):\n  for i in range(len(arr)-1, -1, -1):\n    print(arr[i])", "category": "Python"}, {"instruction": "Write a function that takes a string, a key and a value as parameters and replaces all occurrences of the key with the value in the string.", "input": "s = \"This is a sample sentence with some keys to replace.\"\nkey = \"keys\"\nvalue = \"words\"", "output": "def replace_key_value(s, key, value):\n  replacedStr = s.replace(key, value) \n  return replacedStr", "category": "Python"}, {"instruction": "Create a SQL query to find the 3 oldest employees in the 'employees' table.", "input": "", "output": "SELECT * \nFROM employees\nORDER BY date_of_birth \nLIMIT 3;", "category": "Python"}, {"instruction": "Edit the following code such that output is an array of objects of key value pairs.", "input": "let fruit = [\"apple\", \"banana\", \"orange\"];\nlet colors = [\"red\", \"yellow\", \"orange\"];", "output": "let fruits = [\"apple\", \"banana\", \"orange\"];\nlet colors = [\"red\", \"yellow\", \"orange\"];\n\nlet fruitObj = [];\n\nfor (let i = 0; i < fruits.length; i++) {\n    let obj = {};\n    obj.name = fruits[i];\n    obj.color = colors[i];\n    fruitObj.push(obj);\n}", "category": "Python"}, {"instruction": "Create a for loop for printing out the elements in a given list in reverse order.", "input": "my_list = [1,2,3,4]", "output": "for i in range(len(my_list)-1, -1, -1):\n    print(my_list[i])", "category": "Python"}, {"instruction": "Construct a code to check if an input string is a palindrome.", "input": "s = \"racecar\"", "output": "def check_palindrome(s): \n    return s == s[::-1] \n  \ncheck_palindrome(s)", "category": "Python"}, {"instruction": "Create a dictionary where the keys are names and the values are their associated ages.", "input": "name_list = [\"Kai\", \"Jane\", \"Andy\", \"Emily\"]\nage_list = [23, 32, 16, 55]", "output": "name_age_dict = dict(zip(name_list, age_list))", "category": "Python"}, {"instruction": "Construct code to compute the average height from a list of heights.", "input": "heights = [170, 140, 160, 180, 160]", "output": "sum_heights = 0\nfor height in heights:\n    sum_heights += height\navg_height = sum_heights/len(heights)", "category": "Python"}, {"instruction": "Construct a for loop to print out each element in a given list.", "input": "my_list = [2, 3, 5, 8]", "output": "for i in my_list:\n    print(i)", "category": "Python"}, {"instruction": "Create an if statement to determine if an input number is even.", "input": "num = 5", "output": "if num % 2 == 0:\n    print(\"The number is even\")\nelse:\n    print(\"The number is odd\")", "category": "Python"}, {"instruction": "Create a function that takes a number \"n\" as an argument and returns the nth Fibonacci number", "input": "n = 15", "output": "def fibonacci(n): \n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return fibonacci(n-1) + fibonacci(n-2) \n  \nfibonacci(15)", "category": "Python"}, {"instruction": "Create a for loop for iterating over list y and adding its elements to a new list", "input": "y = [1,2,3,4,5]", "output": "new_list = []\nfor el in y:\n    new_list.append(el)", "category": "Python"}, {"instruction": "Create a HTML page that displays a table with 4 columns; Book Name, Author, Price and Rating.", "input": "", "output": "<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" width=\"500\"> \n    <tr> \n        <th>Book Name</th> \n        <th>Author</th> \n        <th>Price</th> \n        <th>Rating</th>  \n    </tr> \n    <tr>\n        <td><b>Harry Potter and the Sorcerer's Stone</b></td> \n        <td>J. K. Rowling</td> \n        <td>$7.99</td> \n        <td>4.7</td> \n    </tr> \n</table>", "category": "Python"}, {"instruction": "What is an object in object-oriented programming?", "input": "", "output": "In object-oriented programming, an object is a self-contained entity that contains both data and code, which together define and control its behavior. Objects can communicate with one another by sending messages and receiving data in response. Objects are used to represent real-world concepts, such as people, places, and things.", "category": "Python"}, {"instruction": "Write a function that takes an array of integers and returns the minimum difference between two consecutive elements.", "input": "arr = [4, 2, 7, 5, 1]", "output": "def min_difference(arr):\n  min_diff = abs(arr[1] - arr[0])\n  for i in range(1, len(arr)-1):\n    diff = abs(arr[i+1] - arr[i])\n    if diff < min_diff:\n      min_diff = diff\n  return min_diff", "category": "Python"}, {"instruction": "Create an algorithm to find the smallest positive integer not present in an array.", "input": "arr = [2, 3, 7, 6, 8, -1, -10, 15]", "output": "def find_missing(arr):\n  # sort the array\n  arr.sort()\n  \n  # iterate through the array \n  # to find the smallest positive integer not present \n  for i in range(len(arr)):\n    if arr[i] > 0:\n      if arr[i+1] != arr[i] + 1:\n        return arr[i] + 1\n  return arr[-1] + 1", "category": "Python"}, {"instruction": "Sort the following array using the merge sort algorithm.", "input": "arr = [4, 10, 5, 1, 8, 9]", "output": "def merge_sort(arr):\n    if len(arr) > 1: \n      mid = len(arr)//2\n      left_arr = arr[:mid]\n      right_arr = arr[mid:]\n\n      merge_sort(left_arr)\n      merge_sort(right_arr)\n\n      i = j = k = 0\n\n      while i < len(left_arr) and j < len(right_arr): \n        if left_arr[i] < right_arr[j]: \n            arr[k] = left_arr[i] \n            i+=1\n        else: \n            arr[k] = right_arr[j] \n            j+=1\n        k+=1\n      while i < len(left_arr): \n        arr[k] = left_arr[i] \n        i+=1\n        k+=1\n      \n      while j < len(right_arr): \n        arr[k] = right_arr[j] \n        j+=1\n        k+=1", "category": "Python"}, {"instruction": "Create an algorithm for searching for an element in a sorted array.", "input": "arr = [2, 4, 6, 8, 10]\ntarget = 6", "output": "def binary_search(arr, target):\n  low = 0\n  high = len(arr) - 1\n\n  while low <= high: \n    mid = (low + high) // 2\n    if arr[mid] == target: \n      return mid \n    elif arr[mid] < target: \n      low = mid + 1\n    else: \n      high = mid - 1\n  return -1", "category": "Python"}, {"instruction": "Generate Java code to display a message on a GUI.", "input": "", "output": "import javax.swing.JOptionPane;\n \npublic class DisplayMessage {\n \n    public static void main(String[] args) {\n        JOptionPane.showMessageDialog(null, \"Hello world!\", \"Message\", JOptionPane.INFORMATION_MESSAGE);\n    }\n \n}", "category": "Python"}, {"instruction": "Write a JavaScript function to convert a number from octal to decimal.", "input": "octal_number = 014", "output": "function octToDec(octal_number){\n    let dec_number = 0;\n    let i = 0;\n    while(octal_number != 0){\n        dec_number += (octal_number % 10) * Math.pow(8,i);\n        octal_number = Math.floor(octal_number/10);\n        i++;\n    }\n    return dec_number;\n}\nvar decimal_number = octToDec(014);\nconsole.log(decimal_number);", "category": "Python"}, {"instruction": "Write a C program to calculate the order of a particular number in ascending order.", "input": "input_number = 4", "output": "int input_number = 4;\n \nint order = 0;\n \nfor(int i=0; i < input_number; i++){\n    order++;\n}\n \nprintf(\"The order of the number %d in ascending order is %d.\", input_number, order);", "category": "Python"}, {"instruction": "Find the sum of the squares of the following numbers.", "input": "[2, 3, 4]", "output": "sum = 0\nfor number in [2, 3, 4]:\n    sum += number ** 2\n\nprint(sum) # Output: 29", "category": "Python"}, {"instruction": "Generate C# code that creates an instance of the Customer class.", "input": "", "output": "Customer customer = new Customer();", "category": "Python"}, {"instruction": "Parse and extract the title of this HTML page.", "input": "<html><head><title>This is the Page Title</title></head></html>", "output": "title = soup.find('title').text\nprint(title) # Output: This is the Page Title", "category": "Python"}, {"instruction": "Update the SQL table with the following data.", "input": "id \tname     \tage\n1\t    John        26", "output": "UPDATE Table\nSET name = 'John', age = 26\nWHERE id = 1;", "category": "Python"}, {"instruction": "Create a PHP program to count the number of occurrences of a given word in a string.", "input": "Test string, word", "output": "<?php\n\nfunction count_occurrences($string, $word) {\n    $words = explode(\" \", $string);\n    $count = 0;\n    foreach ($words as $w)\n        if (strtolower($w) == strtolower($word))\n            $count++;\n    return $count;\n}\n\n$string = \"Test string\";\n$word = \"string\";\n\necho count_occurrences($string, $word);\n\n?>\n// Output: 1", "category": "Python"}, {"instruction": "Train a Neural Network model to classify handwritten digits.", "input": "", "output": "from sklearn.neural_network import MLPClassifier\n\nmodel = MLPClassifier()\nmodel.fit(X_train, y_train) # X_train and y_train are the training data", "category": "Python"}, {"instruction": "Generate an HTML table that displays the student names and grades in a 3x3 grid.", "input": "Student1: B\nStudent2: A\nStudent3: C\nStudent4: D\nStudent5: F\nStudent6: A", "output": "<table style=\"width:100%\">\n  <tr>\n    <th>Student</th>\n    <th>Grade</th> \n  </tr>\n  <tr>\n    <td>Student1</td>\n    <td>B</td>\n  </tr>\n  <tr>\n    <td>Student2</td>\n    <td>A</td> \n  </tr>\n  <tr>\n    <td>Student3</td>\n    <td>C</td> \n  </tr>\n  <tr>\n    <td>Student4</td>\n    <td>D</td> \n  </tr>\n  <tr>\n    <td>Student5</td>\n    <td>F</td> \n  </tr>\n  <tr>\n    <td>Student6</td>\n    <td>A</td> \n  </tr>\n</table>", "category": "Python"}, {"instruction": "Complete the following C++ code to print the 3rd element from the array.", "input": "int arr[5] = {1,2,3,4,5};", "output": "std::cout << arr[2] << std::endl;", "category": "Python"}, {"instruction": "Compile this Java program to determine any compile-time errors.", "input": "public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println(\"Hello , World\");\n  }\n}", "output": "No compile-time error.", "category": "Python"}, {"instruction": "Summarize this text in one sentence.", "input": "Machine Learning is the study of algorithms that improve automatically through the experience gained from available data.", "output": "Machine Learning is the process of using algorithms to gain insights from data and to improve automation.", "category": "Python"}, {"instruction": "List the people who have bought \"Apple iPod\" from the \"Electronics\" category.", "input": "", "output": "SELECT people \nFROM orders \nWHERE item = 'Apple iPod' AND category = 'Electronics'", "category": "Python"}, {"instruction": "Assign \"D\" as the grade for a student whose score is higher than 80 and lower than 90.", "input": "score = 85", "output": "if score > 80 and score < 90:\n    grade = \"D\"", "category": "Python"}, {"instruction": "Query the MongoDB database for all the documents that have \"Status\" field set to \"Done\".", "input": "", "output": "db.collection.find({\"Status\":\"Done\"})", "category": "Python"}, {"instruction": "Calculate the total cost of items purchased by a customer.", "input": "price1 = 10\nquantity1 = 5\nprice2 = 15\nquantity2 = 3", "output": "total_cost = (price1*quantity1) + (price2*quantity2)\nprint(total_cost)  # Output: 95", "category": "Python"}, {"instruction": "What is Big O notation?", "input": "", "output": "Big O notation is a measure of the complexity of an algorithm. It describes the worst-case complexity of a given algorithm in terms of time and/or space as the problem size increases.  It can indicate whether an algorithm's performance increases linearly or exponentially as the problem size increases.", "category": "Python"}, {"instruction": "Write a Python program to find the unique elements in a list.", "input": "2, 3, 9, 5, 2, 4, 9", "output": "def unique_elements(input_list): \n    result_list = []\n    for item in input_list: \n        if item not in result_list: \n            result_list.append(item)\n    return result_list\n\ninput_list = [2, 3, 9, 5, 2, 4, 9]\nprint(unique_elements(input_list))\n# Output: [2, 3, 9, 5, 4]", "category": "Python"}, {"instruction": "Write a SQL query to display all the columns of the 'Employees' table.", "input": "", "output": "SELECT *\nFROM Employees;", "category": "Python"}, {"instruction": "Create a list of all the prime numbers between 3 and 20", "input": "", "output": "[3, 5, 7, 11, 13, 17, 19]", "category": "Python"}, {"instruction": "Edit this HTML code so that the header text is represented correctly.", "input": "<h2>This is a Heading</h2>", "output": "<h2><span style=\"font-weight:bold;\">This is a Heading</span></h2>", "category": "Python"}, {"instruction": "Convert this SQL query into MongoDB", "input": "SELECT DISTINCT\n    user_name\nFROM\n    user_login_history\nWHERE\n    user_id >= 1000", "output": "db.user_login_history.distinct(\"user_name\", { \"user_id\" : { $gte : 1000 } })", "category": "Python"}, {"instruction": "Merge two sorted lists into a single sorted list", "input": "list1 = [1,3,5,7] \nlist2 = [2,4,6,8]", "output": "def merge_sorted_lists(list1, list2):\n    merged_list = []\n    i = 0\n    j = 0\n\n    # Iterate through the lists until all elements have been merged\n    while (i < len(list1) and j < len(list2)):\n        # If the element from the first list is smaller, add it \n        # to the merged list\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i+=1\n        # Otherwise add the element from the second list\n        else:\n            merged_list.append(list2[j])\n            j+=1\n \n    # Append any remaining elements from the first list\n    while i < len(list1):\n        merged_list.append(list1[i])\n        i+=1\n \n    # Append any remaining elements from the second list\n    while j < len(list2):\n        merged_list.append(list2[j])\n        j+=1\n \n    return merged_list", "category": "Python"}, {"instruction": "Given a list of strings, write a program to return all strings with first character as 'c'.", "input": "list_strings = [\"cat\", \"dog\", \"cow\", \"duck\"]", "output": "required_strings = []\n\nfor string in list_strings:\n    if string[0] == 'c':\n        required_strings.append(string)\n    \n# required_strings = [\"cat\", \"cow\"]", "category": "Python"}, {"instruction": "How would you output the average value of a given list of numbers?", "input": "list_int = [2, 7, 15, 25]", "output": "avg = sum(list_int) / len(list_int) # avg = 11.5", "category": "Python"}, {"instruction": "Create a new list from an existing list with no duplication.", "input": "list_int = [4, 7, 4, 8, 6, 7]", "output": "new_list_ints = list(set(list_int)) # new_list_ints = [4, 7, 8, 6]", "category": "Python"}, {"instruction": "Find the length of the longest substring of a string", "input": "text = \"Hello, world!\"", "output": "length = 6 # The longest substring is \"Hello,\" which has 6 characters.", "category": "Python"}, {"instruction": "How would you find the number of occurrences of a particular character in a given string?", "input": "string = \"hellohowareyou\"\nchar = 'o'", "output": "count_char = string.count(char) # count_char = 2", "category": "Python"}, {"instruction": "Using the comment as a guide, convert the following code from a for loop to a while loop.", "input": "data_list = [1, 3, 5, 7, 9]\n\n# Loops through the data_list and prints out all elements\nfor element in data_list:\n    print(element)", "output": "data_list = [1, 3, 5, 7, 9]\n\n# Loops through the data_list and prints out all elements\ni = 0\nwhile i < len(data_list):\n    print(data_list[i])\n    i += 1", "category": "Python"}, {"instruction": "Retrieve the elements at indexes 2 and 5 in the list.", "input": "list_nums = [1, 4, 7, 2, 9]", "output": "elements = [list_nums[2], list_nums[5]] # elements = [7, 9]", "category": "Python"}, {"instruction": "Write a function to multiply two given numbers and return the product.", "input": "num1 = 5\nnum2 = 8", "output": "def multiply(num1, num2):\n    '''This function multiplies two given numbers and returns the product.'''\n    return num1 * num2 # returns 40", "category": "Python"}, {"instruction": "How would you find the maximum number in a list of length 5?", "input": "list_nums = [1, 4, 7, 2, 9]", "output": "maximum_num = max(list_nums) # maximum_num = 9", "category": "Python"}, {"instruction": "Find the difference between the two dates", "input": "import datetime\ndate1 = datetime.date(2020, 5, 15)\ndate2 = datetime.date(2020, 4, 15)", "output": "diff = date1 - date2\ndifference = diff.days # difference = 30 days", "category": "Python"}, {"instruction": "Rearrange the following code to print out the list elements in reverse order.", "input": "colors = [\"red\", \"green\", \"blue\"]", "output": "colors = [\"red\", \"green\", \"blue\"]\ncolors.reverse()\nfor color in colors:\n    print(color)", "category": "Python"}, {"instruction": "Create a function to find the value of Pi rounded to the 3rd decimal point.", "input": "", "output": "def find_pi():\n    pi = 3.141\n    return round(pi, 3) # rounded to the 3rd decimal point", "category": "Python"}, {"instruction": "Implement find_difference() to calculate the absolute difference between two integers.", "input": "input_int1 = 5\ninput_int2 = 9", "output": "def find_difference(input_int1, input_int2):\n    '''This function calculates the absolute difference between two integers.'''\n    return abs(input_int1 - input_int2) # returns 4", "category": "Python"}, {"instruction": "Use the built-in sort method to sort a list of strings by their length.", "input": "mylist = ['this', 'is', 'a', 'long', 'list', 'of', 'strings']", "output": "mylist.sort(key=len)\nprint(mylist)", "category": "Python"}, {"instruction": "Create a dictionary mapping each character in a string to its frequency", "input": "text = \"Hello, world!\"", "output": "char_freq = {\n    'H': 1,\n    'e': 1,\n    'l': 2,\n    'o': 2,\n    ',': 1,\n    ' ': 1,\n    'w': 1,\n    'r': 1,\n    'd': 1,\n    '!': 1\n}", "category": "Python"}, {"instruction": "Write a code to create a 2-D array with size (4,4) and fill it with 1's.", "input": "", "output": "arr = [[1 for _ in range(4)] for _ in range(4)]", "category": "Python"}, {"instruction": "What is the difference between a sequential and a parallel collection?", "input": "", "output": "The difference between a sequential and a parallel collection is the way in which data is processed. A sequential collection is processed one item at a time, from start to finish in a single thread. A parallel collection is processed in chunks at the same time, using multiple threads. The main advantage of using a parallel collection is that it can take advantage of multiple cores in a processor, allowing for faster data processing.", "category": "Python"}, {"instruction": "Complete the following regular expression for email address validation.", "input": "^[\\w\\.+-]+@", "output": "^[\\w\\.+-]+@[\\w\\.-]+\\.[a-zA-Z]{2,4}$", "category": "Python"}, {"instruction": "What is the importance of writing unit tests?", "input": "", "output": "The importance of writing unit tests is to ensure that the code works correctly and produce the expected results. By writing automated unit tests, developers can quickly and easily detect bugs and errors in their code. Unit tests also help with the building of reliable system architectures since the code is thoroughly tested even before the application is released. Unit tests also help in the code maintenance process since programmers can quickly identify changes made in the code that introduces bugs.", "category": "Python"}, {"instruction": "Complete the following code to implement a binary search.", "input": "def binary_search(arr, x):", "output": "def binary_search(arr, x):\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1", "category": "Python"}, {"instruction": "Generate an artificial neural network code to recognize alphanumeric digits.", "input": "", "output": "import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPool2D\n\n# define model\nmodel = Sequential()\n\n# add layers\nmodel.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 3)))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))\n\n# compile model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# fit model\nmodel.fit(x_train, y_train, epochs=10)\n\n# evaluate model\nscore = model.evaluate(x_test, y_test, verbose=0)", "category": "Python"}, {"instruction": "What is the purpose of using global variables in programming?", "input": "", "output": "The purpose of using global variables in programming is to allow variables to be shared among multiple functions. Global variables are accessible by all the functions within a program and provide an easy way to share data between different functions. By declaring a variable as global, its value can be changed by any other part of the program. This helps reduce the amount of code repetition and makes it easier to maintain the code.", "category": "Python"}, {"instruction": "Write a function to sort a list of strings by length.", "input": "", "output": "def sort_by_length(lst):\n    lst.sort(key=len)\n    return lst", "category": "Python"}, {"instruction": "Make a jQuery call to retrieve data from a MySQL database", "input": "", "output": "$.ajax({\n    url: '<phpfile>.php',\n    method: 'GET',\n    dataType: 'json',\n    success: function(response){\n        //handle the response\n    }\n})", "category": "Python"}, {"instruction": "What are the two main types of bug tracking tool?", "input": "", "output": "The two main types of bug tracking tools are issue tracking systems and bug tracking systems. Issue tracking systems are used for managing customer service or support requests. Bug tracking systems are used for managing and tracking software bugs. Both tools are designed to help developers keep track of software issues, prioritize work, assign tasks, and report on progress.", "category": "Python"}, {"instruction": "What is the cut-off frequency of a high-pass filter?", "input": "", "output": "The cut-off frequency of a high-pass filter is the frequency at which the output signal is significantly reduced in magnitude compared with the input signal. It is used to remove low frequency components from a signal. It is commonly measured in hertz (Hz).", "category": "Python"}, {"instruction": "How can you remove an element from a JavaScript array?", "input": "", "output": "In JavaScript, you can remove an element from an array using the splice() method. For example: myArray.splice(index,1);", "category": "Python"}, {"instruction": "Write a SQL query that extracts information from a table with columns (Id, Name, Age).", "input": "", "output": "SELECT Id, Name, Age FROM table_name;", "category": "Python"}, {"instruction": "Write a code in Java to replace all the occurrences of a given value (5) in an array with a new value (10).", "input": "arr = [2, 5, 1, 5, 8]", "output": "for (int i = 0; i < arr.length; i++) { \n    if (arr[i] == 5) \n        arr[i] = 10; \n}", "category": "Python"}, {"instruction": "Write a code to compute the sum of the elements in a given array of integers.", "input": "arr = [2, 4, 6, 8]", "output": "int sum = 0;\nfor (int i = 0; i < arr.length; i++) {\n    sum += arr[i];\n}", "category": "Python"}, {"instruction": "Write a C++ code snippet to search for a given value (45) in an array.", "input": "arr = [12, 4, 17, 6, 21, 45, 33]", "output": "int value = 45;\nbool found = false;\n\nfor(int i = 0; i < arr.length; i++){\n    if(arr[i] == value){\n        found = true;\n        break;\n    }\n}\n\nif(found)\n   cout << \"Value found in the array\" << endl;\nelse\n   cout << \"Value not found in the array\" << endl;", "category": "Python"}, {"instruction": "How can you declare a new array in Java?", "input": "", "output": "In Java, you can declare a new array using the following syntax: int[] arrayName = new int[arraySize];", "category": "Python"}, {"instruction": "Describe the concept of OOP in programming.", "input": "", "output": "Object-oriented programming (OOP) is a programming paradigm that uses objects and classes to organize data and define methods of operation on that data. It is based on the concepts of abstraction, encapsulation, inheritance, and polymorphism. OOP simplifies the development and maintenance of software by providing a model for how to structure, design, and use code. OOP also makes it easier to build applications for large and small teams.", "category": "Python"}, {"instruction": "Perform a linear search in a list named 'mylist' and return the index of the first occurrence of a target value.", "input": "mylist = [1, 2, 3, 4, 5, 6, 7]\ntarget = 4", "output": "def linear_search(mylist, target):\n for i in range(len(mylist)):\n if mylist[i] == target:\n return i\n return -1", "category": "Python"}, {"instruction": "Create a dictionary from two lists with the same length.", "input": "mylist1 = [\"a\", \"b\", \"c\", \"d\"]\nmylist2 = [\"1\", \"2\", \"3\", \"4\"]", "output": "mydict = dict(zip(mylist1, mylist2))\nprint(mydict)", "category": "Python"}, {"instruction": "rewrite the following for-loop as a while-loop", "input": "for i in range(0, 5):\n    print(i)", "output": "\"\"\"\nRewrite the following for-loop as a while-loop\n\"\"\"\n\ni = 0\nwhile i < 5:\n    print(i)\n    i += 1", "category": "Python"}, {"instruction": "Create a program to create a list of all the numbers from 1 to 10 which are divisible by 3", "input": "", "output": "\"\"\"\nCreate a program to create a list of all the numbers from 1 to 10 which are divisible by 3\n\"\"\"\n\ndef divisible_by_three():\n    divisible_by_three_list = []\n    for i in range(1, 11):\n        if i % 3 == 0:\n            divisible_by_three_list.append(i)\n    return divisible_by_three_list\n\nif __name__ == '__main__':\n    print(divisible_by_three())", "category": "Python"}, {"instruction": "Write a function that sorts the given list of numbers in descending order", "input": "[1, 2, 3, 5, 8, 10]", "output": "\"\"\"\nWrite a function that sorts the given list of numbers in descending order\n\"\"\"\n\ndef sort_list_descending(numbers):\n    numbers.sort(reverse = True)\n    return numbers\n\nif __name__ == '__main__':\n    print(sort_list_descending([1, 2, 3, 5, 8, 10]))", "category": "Python"}, {"instruction": "Create a program to write an overwriting if-else logic for the following switch statement", "input": "switch(a) {\n  case 1: \n    func1();\n    break;\n  case 2: \n    func2();\n    break;\n}", "output": "\"\"\"\nCreate a program to write an overwriting if-else logic for the following switch statement\n\"\"\"\n\ndef switch_to_if_else(a):\n  if a == 1:\n    func1()\n  elif a == 2:\n    func2()\n\nif __name__ == '__main__':\n    switch_to_if_else(a)", "category": "Python"}, {"instruction": "Create a program to convert the input sentence to Pig Latin.", "input": "I am a computer programmer", "output": "\"\"\"\nCreate a program to convert the input sentence to Pig Latin.\n\"\"\"\n\ndef pig_latin(sentence):\n    words = sentence.split()\n    new_words = []\n    for word in words:\n        if word[0] in 'aeiou':\n            new_words.append(word + 'ay')\n        else:\n            new_words.append(word[1:] + word[0] + 'ay')\n    return ' '.join(new_words)\n\nif __name__ == '__main__':\n    print(pig_latin('I am a computer programmer'))", "category": "Python"}, {"instruction": "Write a code to compute the mean of an input list of numbers.", "input": "mylist = [1,2,3,4,5]", "output": "\"\"\"\nWrite a code to compute the mean of an input list of numbers\n\"\"\"\n\n# List containing the elements\nmylist = [1,2,3,4,5]\n\n# Computing the sum and number of elements\nsum = 0\nnum_elements = len(mylist)\n\n# Looping through each element\nfor i in mylist:\n    sum += i\n\n# Computing the mean\nmean = sum/num_elements\n\n# Printing the mean\nprint(\"Mean of the list is\", mean)", "category": "Python"}, {"instruction": "Write a code to merge two given lists of equal size.", "input": "list1 = [1,2,3]\nlist2 = [4,5,6]", "output": "\"\"\"\nWrite a code to merge two given lists of equal size\n\"\"\"\n\n# Given lists\nlist1 = [1,2,3]\nlist2 = [4,5,6]\n\n# Initialising an empty list\nmerged_list = []\n\n# Merging the lists\nfor i in range(len(list1)):\n    merged_list.append(list1[i])\n    merged_list.append(list2[i])\n\n# Printing the merged list\nprint(\"Merged list is\", merged_list)", "category": "Python"}, {"instruction": "Write a code to generate the multiplication table of a given integer.", "input": "x = 5", "output": "\"\"\"\nWrite a code to generate the multiplication table of a given integer\n\"\"\"\n\n# Number for which multiplication table will be generated\nx = 5\n\n# Generating the multiplication table\nfor i in range(1,11):\n    # Printing each row of the table\n    print(\"{} x {} = {}\".format(x,i,x*i))", "category": "Python"}, {"instruction": "Write a code to find the maximum in a given list of integers.", "input": "mylist = [1,2,3,4,5]", "output": "\"\"\"\nWrite a code to find the maximum in a given list of integers\n\"\"\"\n\n# List containing the elements\nmylist = [1,2,3,4,5]\n\n# Finding the maximum element\nmax = mylist[0]\n\n# Looping through each element to find if it is the maximum\nfor i in range(1,len(mylist)):\n    # Comparing the element with the maximum\n    if mylist[i] > max:\n        max = mylist[i]\n\n# Printing the maximum element\nprint(\"Maximum element of the list is\", max)", "category": "Python"}, {"instruction": "Write a code to convert a given list of strings to uppercase.", "input": "mylist = [\"hello\",\"world\"]", "output": "\"\"\"\nWrite a code to convert a given list of strings to uppercase\n\"\"\"\n\n# List containing the strings\nmylist = [\"hello\",\"world\"]\n\n# Converting the list of strings to uppercase\nupper_list = [string.upper() for string in mylist]\n \n# Printing the new list\nprint(\"List with strings in uppercase is\", upper_list)", "category": "Python"}, {"instruction": "Write a code to delete all the vowels from a given string.", "input": "string = \"hello world\"", "output": "\"\"\"\nWrite a code to delete all the vowels from a given string\n\"\"\"\n\n# Given string\nstring = \"hello world\"\n\n# Removing all the vowels from the string\nno_vowels = \"\".join([letter for letter in string if letter not in \"aeiouAEIOU\"])\n\n# Printing the new string\nprint(\"String without vowels is\", no_vowels)", "category": "Python"}, {"instruction": "Write a code to check whether two strings are anagrams or not.", "input": "first = \"listen\"\nsecond = \"silent\"", "output": "\"\"\"\nWrite a code to check whether two strings are anagrams or not\n\"\"\"\n\n# Strings to be checked\nfirst = \"listen\"\nsecond = \"silent\"\n\n# Sorting the strings\nfirst_sorted = \"\".join(sorted(first))\nsecond_sorted = \"\".join(sorted(second))\n\n# Checking if both sorted strings are equal or not\nif first_sorted == second_sorted:\n    print(\"Strings are Anagrams\")\nelse:\n    print(\"Strings are not Anagrams\")", "category": "Python"}, {"instruction": "Write a code to create a 3 x 3 matrix containing all 0s.", "input": "", "output": "\"\"\"\nWrite a code to create a 3 x 3 matrix containing all 0s\n\"\"\"\n\n# Creating an empty 3 x 3 matrix\nmatrix = [[0 for x in range(3)] for y in range(3)] \n  \n# Printing the matrix\nprint(matrix)", "category": "Python"}, {"instruction": "Write a code to generate a random number between 1 to 10.", "input": "", "output": "\"\"\"\nWrite a code to generate a random number between 1 to 10\n\"\"\"\n\nimport random\n\n# Generate random number between 1 to 10 \nrandom_number = random.randint(1,10)\n\n# Printing the random number\nprint(random_number)", "category": "Python"}, {"instruction": "Create a dictionary containing the key-value pair of a given string.", "input": "string = \"test string\"", "output": "\"\"\"\nCreate a dictionary containing the key-value pair of a given string\n\"\"\"\n\n# Given string\nstring = \"test string\"\n\n# Initialising an empty dictionary\nmy_dict = {}\n\n# Looping through the given string\nfor char in string:\n    # If the character is not already in dictionary\n    if char not in my_dict:\n        # Adding the character to the dictionary\n        my_dict[char] = 1\n    # If the character already exists in dictionary\n    else:\n        # Incrementing the frequency\n        my_dict[char] += 1\n        \n# Printing the dictionary\nprint(my_dict)", "category": "Python"}, {"instruction": "Create a program to compute the checksum of a given data packet", "input": "data_packet = [0xff, 0x0a, 0x1b, 0x3f]", "output": "\"\"\"\nCreate a program to compute the checksum of a given data packet\n\"\"\"\n\ndef compute_checksum(data_packet):\n    checksum = 0\n    for x in data_packet:\n        checksum += x\n    return checksum\n\nif __name__ == '__main__':\n    data_packet = [0xff, 0x0a, 0x1b, 0x3f]\n    print(compute_checksum(data_packet))", "category": "Python"}, {"instruction": "Create a program to parse a given string and return a dictionary with all the words and their frequency", "input": "\"this is a practice string to learn the parsing of strings\"", "output": "\"\"\"\nCreate a program to parse a given string and return a dictionary with all the words and their frequency\n\"\"\"\n\ndef parse_string(string):\n    words = string.split()\n    word_dict = {}\n    for word in words:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    return word_dict\n\nif __name__ == '__main__':\n    print(parse_string(\"this is a practice string to learn the parsing of strings\"))", "category": "Python"}, {"instruction": "Create a program to classify whether the given number is even or odd", "input": "5", "output": "\"\"\"\nCreate a program to classify whether the given number is even or odd\n\"\"\"\n\ndef even_or_odd(number: int) -> str:\n    if number % 2 == 0:\n        return 'even'\n    else:\n        return 'odd'\n\nif __name__ == '__main__':\n    print(even_or_odd(5))", "category": "Python"}, {"instruction": "Create a program to generate the sum of all the elements in a given list", "input": "[1, 2, 3, 4, 5]", "output": "\"\"\"\nCreate a program to generate the sum of all the elements in a given list\n\"\"\"\n\ndef sum_list(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total\n\nif __name__ == '__main__':\n    print(sum_list([1, 2, 3, 4, 5]))", "category": "Python"}, {"instruction": "Write a Python program that tests if a given number is divisible by 3.", "input": "num = 51", "output": "if (num % 3 == 0):\n    print(\"The number is divisible by 3\")\nelse:\n    print(\"The number is not divisible by 3\")", "category": "Python"}, {"instruction": "Classify the following sentence as a question or a statement.", "input": "Have you ever tried eating a brussel sprout?", "output": "Question.", "category": "Python"}, {"instruction": "Write a SQL query to find the names of customers who have ordered products.", "input": "", "output": "SELECT c.name\nFROM customers c, orders o\nWHERE o.customer_id = c.id", "category": "Python"}, {"instruction": "Find the total number of elements in the following array.", "input": "my_array = [[1,2], 3, 4]", "output": "Total number of elements = 4", "category": "Python"}, {"instruction": "Create a JavaScript function that finds the shortest word in a string.", "input": "sentence = \"I'm so excited to begin this journey\"", "output": "function findShortestWord(sentence) { \n    let words = sentence.split(\" \"); \n    let shortestWord = words[0]; \n  \n    for (let i = 0; i < words.length; i++) { \n        if (words[i].length < shortestWord.length) \n            shortestWord = words[i]; \n    } \n  \n    return shortestWord; \n}", "category": "Python"}, {"instruction": "Create a web page with a centered title and paragraph in HTML.", "input": "title = \"My First Web Page\"\nparagraph = \"This is my first web page. It is an amazing experience!\"", "output": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>My First Web Page</title>\n    </head>\n    <body>\n        <div class=\"main\">\n            <h1 align=\"center\">My First Web Page</h1>\n            <p align=\"center\">This is my first web page. It is an amazing experience!</p>\n        </div>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Classify the following sentence as positive or negative sentiment.", "input": "This is the worst experience ever.", "output": "Negative sentiment.", "category": "Python"}, {"instruction": "Write a code to remove the duplicates from a given list.", "input": "mylist = [1,2,3,1,2]", "output": "\"\"\"\nWrite a code to remove the duplicates from a given list\n\"\"\"\n\n# List containing the elements\nmylist = [1,2,3,1,2]\n\n# Creating a new list with unique elements\nunique_list = list(set(mylist))\n\n# Printing the new list\nprint(\"New list with unique elements is {}\".format(unique_list))", "category": "Python"}, {"instruction": "Given a list of numbers, find the index of the greatest value.", "input": "lst = [3, 5, 6, 8, 9]", "output": "index = 4", "category": "Python"}, {"instruction": "Convert the following string to a list of strings.", "input": "words = \"How are you doing today\"", "output": "words = [\"How\", \"are\", \"you\", \"doing\", \"today\"]", "category": "Python"}, {"instruction": "Create a regex to match the characters \"CDE\" in any order.", "input": "", "output": "regex = r\"(C|D|E){3}\"", "category": "Python"}, {"instruction": "Write a Python program to split special characters with a given string.", "input": "string = \"Hello@#World\"", "output": "string = \"Hello @# World\"", "category": "Python"}, {"instruction": "Create a program that extracts a given pattern from a given string", "input": "text = \"Hello world!\", pattern = \"l\"", "output": "\"\"\"\nCreate a program that extracts a given pattern from a given string\n\"\"\"\n\ndef extract_pattern(text, pattern):\n    result = []\n    for i in range(len(text)):\n        if text[i] == pattern:\n            result.append(i)\n    return result\n\nif __name__ == '__main__':\n    text = \"Hello world!\"\n    pattern = \"l\"\n    print(extract_pattern(text, pattern))", "category": "Python"}, {"instruction": "Create a program to generate all possible pairs of a given list of numbers", "input": "[1, 2, 3]", "output": "\"\"\"\nCreate a program to generate all possible pairs of a given list of numbers\n\"\"\"\n\ndef generate_pairs(nums):\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            pairs.append((nums[i], nums[j]))\n    return pairs\n\nif __name__ == '__main__':\n    print(generate_pairs([1, 2, 3]))", "category": "Python"}, {"instruction": "Create a program to check if a given string is a palindrome", "input": "\"racecar\"", "output": "\"\"\"\nCreate a program to check if a given string is a palindrome\n\"\"\"\n\ndef is_palindrome(string):\n    n = len(string)\n    for i in range(n // 2):\n        if string[i] != string[n-i-1]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    print(is_palindrome(\"racecar\"))", "category": "Python"}, {"instruction": "Create a program to find all the factors of a given number", "input": "24", "output": "\"\"\"\nCreate a program to find all the factors of a given number \n\"\"\"\n\ndef find_factors(num):\n    factors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            factors.append(i)\n    return factors\n\nif __name__ == '__main__':\n    print(find_factors(24))", "category": "Python"}, {"instruction": "Generate a 5x5 array with all its elements equal to 1.", "input": "", "output": "arr = [[1,1,1,1,1],\n       [1,1,1,1,1],\n       [1,1,1,1,1],\n       [1,1,1,1,1],\n       [1,1,1,1,1]]", "category": "Python"}, {"instruction": "Edit the following code so it outputs the odd numbers between 1 and 50.", "input": "for i in range(1,51):\n    print(i)", "output": "for i in range(1,51):\n    if i % 2 != 0:\n        print(i)", "category": "Python"}, {"instruction": "Write a code to check whether the input string is a palindrome or not.", "input": "a man a plan a canal panama", "output": "\"\"\"\nWrite a code to check whether the input string is a palindrome or not\n\"\"\"\n\ndef check_palindrome(input_string):\n    rev_str = input_string[::-1]\n \n    # Checking if both string are equal or not\n    if rev_str == input_string:\n        return True\n    return False\n  \n# main function\nif __name__ == \"__main__\":\n    str = \"a man a plan a canal panama\"\n    if check_palindrome(str):\n        print(\"String is Palindrome\")\n    else:\n        print(\"String is not Palindrome\")", "category": "Python"}, {"instruction": "Create a Regular Expression pattern to find words that contain the letters \"a\", \"b\", and \"c\".", "input": "", "output": "\\b[abc]+\\w*\\b", "category": "Python"}, {"instruction": "Create a new button using HTML.", "input": "", "output": "<button>My Button</button>", "category": "Python"}, {"instruction": "Write code in Java to sort an array of integers in ascending order.", "input": "[5, 2, 8, 10, 4, 9]", "output": "public static void sortAscending(int[] arr) {\n    for(int i = 0; i < arr.length - 1; i++) {\n        int min = i;\n        for (int j = i + 1; j < arr.length; j++) {\n            if (arr[j] < arr[min]) {\n                min = j;\n            }\n        }\n        int tmp = arr[i];\n        arr[i] = arr[min];\n        arr[min] = tmp;\n    }\n}", "category": "Python"}, {"instruction": "Write an algorithm to find the largest element in an array.", "input": "[8, 11, 12, 5, 3]", "output": "// Algorithm to find the largest element in an array\n\n// Step 1: Create a variable 'max' and initialize it with value of the first element in the array\nint max = arr[0];\n\n// Step 2: Iterate through the array and compare each element with 'max'\nfor (int i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n        max = arr[i];\n    }\n}\n\n// Step 3: Return the value of 'max'\nreturn max;", "category": "Python"}, {"instruction": "Write code in Java to generate the Fibonacci sequence up to N numbers.", "input": "N = 10", "output": "public class Fibonacci { \n  \n    public static void FibonacciN(int n) { \n        int i, f=0, s=1; \n  \n        if (n == 1) \n            System.out.print(f+ \" \"); \n  \n        else { \n            System.out.print(f+\" \"+s+\" \"); \n  \n            for (i = 2; i < n; i++) { \n                int next = f + s; \n                System.out.print(next+\" \"); \n                f= s; \n                s = next; \n            } \n        } \n    } \n}", "category": "Python"}, {"instruction": "Create a function that takes in a list of numbers and returns true if the list contains at least one positive number", "input": "list_of_numbers = [-2, -5, 0, 3]", "output": "def is_positive_number(numbers):\n    for num in numbers:\n        if num > 0:\n            return True\n    return False", "category": "Python"}, {"instruction": "Create a function that takes in a string and replaces all punctuation with a space", "input": "", "output": "import string\n\ndef replace_punctuation(string):\n    for char in string:\n        if char in string.punctuation:\n            string = string.replace(char, \" \")\n    return string", "category": "Python"}, {"instruction": "Write a function that takes in a string and returns a list of all the words that have more than 5 characters", "input": "", "output": "def long_words(string):\n    words = string.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > 5:\n            long_words_list.append(word)\n    return long_words_list", "category": "Python"}, {"instruction": "Create a function that takes in a string and counts the number of vowels in it", "input": "", "output": "def count_vowels(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "In a given string, create a function that returns the longest consecutive sequence of characters.", "input": "my_string = \u201cabccdeefghj\"", "output": "def longest_consecutive(string):\n    character_list = []\n    max_length = 0\n    max_sequence = ''\n    for char in string:\n        if char in character_list:\n            continue\n        else:\n            character_list.append(char)\n            current_length = 1\n            for i in range(1, len(string)):\n                if string[i-1] == char and string[i] == char:\n                    current_length += 1\n            if current_length>max_length:\n                max_length = current_length\n                max_sequence = char*max_length\n    return max_sequence", "category": "Python"}, {"instruction": "You are given a list of numbers. Create a function that returns a new list with duplicates removed", "input": "list_of_numbers = [3, 6, 5, 5, 7, 6, 3]", "output": "def remove_duplicates(numbers):\n    new_list = []\n    for num in numbers:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list", "category": "Python"}, {"instruction": "Create a function that takes in a list of temperatures and returns the average temperature", "input": "list_of_temperatures = [20, 24, 26, 18]", "output": "def average_temperature(temperatures):\n    num_items = len(temperatures)\n    sum_items = 0\n    for temperature in temperatures:\n        sum_items += temperature\n    return sum_items / num_items", "category": "Python"}, {"instruction": "Create a for loop that goes through every element of list_of_words and prints \u2018success\u2019 if an element is equal to \u201cexample\u201d and prints \u2018failure\u2019 in any other case.", "input": "list_of_words = [\"hello\", \"example\", \"world\"]", "output": "for word in list_of_words:\n    if word == \"example\":\n        print(\"success\")\n    else:\n        print(\"failure\")", "category": "Python"}, {"instruction": "Given a list of numbers, print the difference between the largest and the smallest number.", "input": "list_of_numbers = [10, 7, 5, 12, 4]", "output": "difference = max(list_of_numbers) - min(list_of_numbers)\nprint(difference)", "category": "Python"}, {"instruction": "You are given a matrix of m rows and n columns. Write a function that calculates the transpose of the given matrix.", "input": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def transpose(matrix):\n    m = len(matrix)\n    n = len(matrix[0])\n\n    transpose_matrix = [[0] * m for _ in range(n)]\n    for i in range(m):\n        for j in range(n):\n            transpose_matrix[j][i] = matrix[i][j]\n\n    return transpose_matrix", "category": "Python"}, {"instruction": "Create a list comprehension that takes all the elements of list_one and creates a new list where all the elements are doubled.", "input": "list_one = [1, 2, 3, 4, 5]", "output": "[x*2 for x in list_one]", "category": "Python"}, {"instruction": "Write a SQL query to add a new column \"age\" in the employees table.", "input": "", "output": "ALTER TABLE Employees\nADD COLUMN age INT;", "category": "Python"}, {"instruction": "Design a function in Python to delete duplicates from a list.", "input": "The list is: [2, 3, 2, 4, 5, 5, 6]", "output": "def remove_duplicates(list): \n      \n    unique_list = [] \n      \n    for x in list: \n        if x not in unique_list: \n            unique_list.append(x) \n    return unique_list \n  \nlist = [2, 3, 2, 4, 5, 5, 6] \nprint (\"Original List: \", list) \nprint (\"Unique List: \", remove_duplicates(list)) \n\nOutput: \nOriginal List: [2, 3, 2, 4, 5, 5, 6]\nUnique List: [2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Implement an algorithm to find the sum of all the elements in an array.", "input": "The array is: [3, 5, 8, 10, 4]", "output": "// Algorithm to calculate the sum of all the elements in an array\n\n// Step 1: Initialize a variable 'sum' and set it equal to 0\nint sum = 0;\n\n// Step 2: Iterate through the array and add each element to 'sum'\nfor (int i = 0; i < arr.length; i++) {\n    sum += arr[i];\n}\n\n// Step 3: Return the value of sum\nreturn sum;", "category": "Python"}, {"instruction": "Write a MySQL query to display the name, job and salary of all employees.", "input": "", "output": "SELECT name, job, salary \nFROM employees;", "category": "Python"}, {"instruction": "Construct a while loop that increments a counter every time a number is divisible by 3.", "input": "", "output": "int count = 0; \nint i = 0; \nwhile(i < 100)\n{\n     if(i % 3 == 0)\n          count++; \n     i++;\n}", "category": "Python"}, {"instruction": "Write a function in Java that takes two strings as parameters and returns true if the first string is a substring of the second.", "input": "", "output": "public boolean isSubstring(String s1, String s2) \n{ \n    int M = s1.length(); \n    int N = s2.length(); \n  \n    for (int i = 0; i <= N - M; i++) { \n        int j; \n  \n        for (j = 0; j < M; j++) \n            if (s2.charAt(i + j) != s1.charAt(j)) \n                break; \n  \n        if (j == M) \n            return true; \n    } \n  \n    return false; \n}", "category": "Python"}, {"instruction": "Create an HTML form with three input fields: firstName, lastName and age.", "input": "", "output": "<form> \n    First Name:<br> \n    <input type=\"text\" name=\"firstName\"><br> \n    Last Name:<br> \n    <input type=\"text\" name=\"lastName\"><br> \n    Age:<br> \n    <input type=\"number\" name=\"age\"><br><br> \n    <input type=\"submit\" value=\"Submit\"> \n</form>", "category": "Python"}, {"instruction": "Construct a for loop that prints out the numbers from 1 to 10", "input": "", "output": "for i in range(1, 11):\n    print(i)", "category": "Python"}, {"instruction": "Create a function in Python which takes two parameters and returns their product.", "input": "", "output": "def product(a, b):\n    return a*b", "category": "Python"}, {"instruction": "What is the largest prime factor of the number 885?", "input": "", "output": "The largest prime factor of 885 is 5.", "category": "Python"}, {"instruction": "Write a Java program to calculate the sum of the two given integers.", "input": "Integers: 4 and 9", "output": "public static int addIntegers(int a, int b) {\n    int sum = a + b;\n    return sum;\n}\n\npublic static void main(String[] args) {\n    int x = 4, y = 9;\n    int sum = addIntegers(x, y);\n    System.out.println(\"Sum is: \"+sum);\n}", "category": "Python"}, {"instruction": "Create a class in Python to represent a Person.", "input": "", "output": "class Person:\n    # Constructor \n    def __init__(self, name, age): \n         \n        # instance attributes \n        self.name = name \n        self.age = age \n  \n    # instance method \n    def greeting(self): \n        print(\"My name is\", self.name) \n  \n# construct an object \nperson1 = Person(\"John\", 36) \n  \n# call a method of the object \nperson1.greeting()", "category": "Python"}, {"instruction": "Convert the following binary number to a decimal number.", "input": "Binary Number: 10011", "output": "19 (10011 = 2^4 + 2^3 + 2^1 = 16 + 8 + 1 = 25)", "category": "Python"}, {"instruction": "Write a PL/SQL program to print out all numbers from 1 to 10.", "input": "", "output": "BEGIN\n  FOR i IN 1..10 LOOP\n    DBMS_OUTPUT.PUT_LINE(i);\n  END LOOP;\nEND;", "category": "Python"}, {"instruction": "Create a new CSS animation rule to rotate an object a full circle.", "input": "", "output": "@keyframes rotate {\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform: rotate(360deg);\n    }\n}", "category": "Python"}, {"instruction": "Write a SQL query to select the name and address from a given table.", "input": "Table: Employee", "output": "SELECT name, address FROM Employee", "category": "Python"}, {"instruction": "Write a Python program to loop through all the items in a given list.", "input": "List: [1, 2, 3, 4, 5, 6]", "output": "my_list = [1, 2, 3, 4, 5, 6]\nfor item in my_list:\n    print(item)", "category": "Python"}, {"instruction": "Write a JavaScript function to capitalize the first letter of each word in a string.", "input": "String: \"This is an example\".", "output": "function capitalizeFirstLetter(str) {\n    return str.replace(/\\w\\S*/g, function(txt) {\n        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    });\n}\ncapitalizeFirstLetter('This is an example');", "category": "Python"}, {"instruction": "Find the sum of two numbers using C#.", "input": "The two numbers are: 123 and 456", "output": "int  result = 123 + 456;\nConsole.WriteLine(result); //Output: 579", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to remove the last element from an array.", "input": "Array: [1, 2, 3, 4, 5]", "output": "let array = [1, 2, 3, 4, 5];\narray.pop(); // remove the last element\nconsole.log(array); // [1, 2, 3, 4]", "category": "Python"}, {"instruction": "Multiply two vectors of size 5 and return the output.", "input": "a = [1, 2, 3, 4, 5] \nb = [5, 4, 3, 2, 1]", "output": "[5, 8, 9, 8, 5]", "category": "Python"}, {"instruction": "Write a function to compare two strings and return True if they are anagrams.", "input": "str1 = 'silent'\nstr2 = 'listen'", "output": "def anagram(str1, str2): \n\n    # Get lenghts of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If lengths are not same, then strings   \n    # are not anagrams \n    if n1 != n2:\n        return False\n    str1 = ''.join(sorted(str1))\n    str2 = ''.join(sorted(str2))\n    # Comparing sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n\n    return True\n\nprint(anagram(str1, str2))", "category": "Python"}, {"instruction": "Using the input string, write a code to replace the \"!\" with a \"?\".", "input": "string = \"Hello World!\"", "output": "string = \"Hello World!\"\nstring = string.replace(\"!\", \"?\")\nprint(string)", "category": "Python"}, {"instruction": "Write a JavaScript code to valid a password based on the following rules:", "input": "", "output": "function validatePassword(password) {\n  // Minimum 8 characters, one uppercase letter, one lowercase letter, one number, and one special character\n  const re = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/;\n  if (password.match(re)) {\n    return true;\n  }\n  return false;\n}", "category": "Python"}, {"instruction": "Design a function in Python that returns the median of an array of integers.", "input": "", "output": "def median(arr):\n  sortedArr = sorted(arr)\n  length = len(arr)\n  if length % 2 == 0:\n    return ((sortedArr[length//2-1] + sortedArr[length//2])/2)\n  else:\n    return sortedArr[length//2]", "category": "Python"}, {"instruction": "Write an HTML code to create a horizontal line.", "input": "", "output": "<hr>", "category": "Python"}, {"instruction": "Reorder a given array in specialized order", "input": "", "output": "def reorder_array(arr):\n    \"\"\"\n    Reorder a given array in specialized order\n    :param arr: the input array to reorder\n    :return: the reordered array\n    \"\"\"\n    # determine the size of the array\n    n = len(arr)\n    \n    # create a new array to store the reordered results\n    reordered = [0] * n\n    \n    # loop through the array \n    for i in range(n):\n        # calculate the position of the current element\n        pos = 2 * (arr[i] % (1 + n // 2))\n        # find the first vacant position in the new array\n        while reordered[pos] != 0:\n            pos += 1\n        # assign the current element to the vacant position\n        reordered[pos] = arr[i]\n    \n    return reordered", "category": "Python"}, {"instruction": "Create a function to find the position of a substring in a string", "input": "", "output": "def find_substring(string, substring):\n    \"\"\"\n    Find the position of a substring in a string\n    :param string: the string\n    :param substring: the substring to find\n    :return: the position of the substring in the string\n    \"\"\"\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            return i\n    return -1  # substring not found", "category": "Python"}, {"instruction": "Generate a data structure that can efficiently store an array of words", "input": "", "output": "\"\"\"\nGenerate a data structure that can efficiently store an array of words\n\"\"\"\n\n# create a trie (a node with 26 references to other nodes)\nclass TrieNode:\n    def __init__(self):\n        self.children = dict()\n        self.end = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word):\n        node = self.root\n        for c in word:\n            if c not in node.children:\n                node.children[c] = TrieNode()\n            node = node.children[c]\n        node.end = True\n\n# create an empty array\nword_array = []\n\n# create a new trie\ntrie = Trie()\n\n# iterate over the array and insert the words into the trie\nfor word in word_array:\n    trie.insert(word)", "category": "Python"}, {"instruction": "Debug the following Python code", "input": "def f(x):\n    if x > 0:\n        return -1\n    else:\n        return 1", "output": "\"\"\"\nDebug the following Python code\n\ndef f(x):\n    if x > 0:\n        return -1\n    else:\n        return 1\n\"\"\"\n\n# incorrect indentation of the else statement\ndef f(x):\n    if x > 0:\n        return -1\n    else:\n        return 1   # correct indentation", "category": "Python"}, {"instruction": "Create a function to generate a random password of length n", "input": "", "output": "import random\n\ndef generate_password(n):\n    \"\"\"\n    Create a function to generate a random password of length n\n    :param n: the length of the password\n    :return: a random password of length n\n    \"\"\" \n    # create a character list of symbols, alphabets, and numbers\n    characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+-='\n    # create a list of length n with random characters\n    password = [random.choice(characters) for _ in range(n)] \n    # convert the list to a string\n    password = ''.join(password)  \n    # return the password\n    return password", "category": "Python"}, {"instruction": "Generate pseudocode for a matrix multiplication algorithm.", "input": "", "output": "\"\"\"\nGenerate pseudocode for a matrix multiplication algorithm.\n\"\"\"\n\n# Create an NxN matrix result, initialized to 0\nresult = zeros(NxN)\n\n# loop through matrix A and B\nfor i in range(N):\n    for j in range(N):\n        for k in range(N):\n            # multiply the elements of A and B\n            result[i][j] += A[i][k] * B[k][j]\n\n# return the result matrix\nreturn result", "category": "Python"}, {"instruction": "Write code to remove all occurrences of a given element from a list", "input": "", "output": "def remove_element(list, element):\n    \"\"\"\n    Remove all occurrences of a given element from a list\n    :param list: the list\n    :param element: the element to remove\n    :return: the filtered list\n    \"\"\"\n    filtered_list = [item for item in list if item != element]\n    return filtered_list", "category": "Python"}, {"instruction": "Write code to flatten a nested list", "input": "", "output": "def flatten_list(list):\n    \"\"\"\n    Flatten a nested list\n    :param list: the nested list to flatten\n    :return: a flattened list\n    \"\"\"\n    flattened_list = []\n    for item in list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list", "category": "Python"}, {"instruction": "Write code to find the intersection of two sorted lists", "input": "list1 = [1, 3, 4, 6]\nlist2 = [1, 2, 5, 6]", "output": "def find_intersection(list1, list2):\n    \"\"\"\n    Find the intersection of two sorted lists\n    :param list1: the first sorted list\n    :param list2: the second sorted list\n    :return: a list with elements found in both lists\n    \"\"\"\n    intersection = []\n    p1 = p2 = 0\n    while p1 < len(list1) and p2 < len(list2):\n        if list1[p1] == list2[p2]:\n            intersection.append(list1[p1])\n            p1 += 1\n            p2 += 1\n        elif list1[p1] < list2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n    return intersection\n\nlist1 = [1, 3, 4, 6]\nlist2 = [1, 2, 5, 6]\nprint(find_intersection(list1, list2))", "category": "Python"}, {"instruction": "Implement a function to extract the last two words from a string of words", "input": "", "output": "def get_last_two_words(string):\n    \"\"\"\n    Extract and return the last two words from a string of words\n    :param string: the input string\n    :return: the last two words\n    \"\"\"\n    words = string.split(\" \")\n    return words[-2:]", "category": "Python"}, {"instruction": "Write a function to find the longest string in a list of strings.", "input": "", "output": "def find_longest_string(strings):\n    \"\"\"\n    Find and return the longest string in a list of strings.\n    :param strings: the list of strings\n    :return: the longest string\n    \"\"\"\n    longest = \"\"\n    for string in strings:\n        if len(string) > len(longest):\n            longest = string\n    return longest", "category": "Python"}, {"instruction": "Write a function to calculate the average score of a list of numbers.", "input": "", "output": "def get_average(numbers):\n    \"\"\"\n    Calculate and return the average of a list of numbers\n    :param numbers: the list of numbers\n    :return: the average of the numbers\n    \"\"\"\n    total = 0\n    for number in numbers:\n        total += number\n    return total / len(numbers)", "category": "Python"}, {"instruction": "Write a code to reverse the order of a data structure such as array, list, or stack.", "input": "list1 = [1, 3, 5, 7, 9]", "output": "list1.reverse() # [9, 7, 5, 3, 1]", "category": "Python"}, {"instruction": "Create a program in C++ that calculates the absolute difference between two numbers.", "input": "num1 = 50;\nnum2 = 40;", "output": "#include <iostream>\nusing namespace std;\n\nint main() \n{\n  int num1 = 50;\n  int num2 = 40;\n  int absDiff = abs(num1 - num2);\n  cout << \"The absolute difference between two numbers is: \" << absDiff;\n  return 0;\n}", "category": "Python"}, {"instruction": "Design an HTML form with the following fields: first name, last name, age, phone number and address.", "input": "", "output": "<form> \n  <label> First Name: </label> \n  <input type=\"text\" name=\"firstname\" required> \n  <label> Last Name: </label> \n  <input type=\"text\" name=\"lastname\" required> \n  <label> Age: </label> \n  <input type=\"number\" name=\"age\" min=\"18\" required> \n  <label> Phone Number: </label> \n  <input type=\"tel\" name=\"phone\" required> \n  <label> Address: </label> \n  <input type=\"text\" name=\"address\" required> \n  <input type=\"submit\" value=\"Submit\"> \n</form>", "category": "Python"}, {"instruction": "Create a Ruby program to check if a number is even or odd.", "input": "", "output": "def is_even(number)\n  number % 2 == 0\nend", "category": "Python"}, {"instruction": "Use the list comprehension syntax to make a new list whose elements are the square of the first list.", "input": "lst = [1, 2, 3, 4]", "output": "[x**2 for x in lst]", "category": "Python"}, {"instruction": "Classify a given sentence based on the intention behind it.", "input": "sentence = \"I want to buy a car\"", "output": "The given sentence is a request intention.", "category": "Python"}, {"instruction": "Find the top 5 most common words in a given string.", "input": "s = \"Hello world, this is a sample string for the task\"", "output": "\"\"\"\nFind the top 5 most common words in a given string\n\"\"\"\n\nfrom collections import Counter\n\ndef get_top_five_words(s):\n    \"\"\"Get the top five most common words in a given string.\n    \n    Args:\n        s (str): The string to process.\n        \n    Returns:\n        list: A list of (word, count) tuples sorted in descending order\n            of the most common words.\n    \"\"\"\n    words = s.split()\n    counts = Counter(words).most_common(5)\n    return counts\n    \nif __name__ == '__main__':\n    s = \"Hello world, this is a sample string for the task\"\n    print(get_top_five_words(s))", "category": "Python"}, {"instruction": "Find the longest common substring between two strings.", "input": "s1 = \"Tangible\"\ns2 = \"Non-Tangible\"", "output": "\"\"\"\nFind the longest common substring between two strings\n\"\"\"\n\ndef longest_common_substring(s1, s2):\n    \"\"\"Find the longest common substring between two strings.\n    \n    Args:\n        s1 (str): The first string.\n        s2 (str): The second string.\n        \n    Returns:\n        str: The longest common substring.\n    \"\"\"\n    max_length = 0\n    longest_substring = \"\"\n    len1, len2 = len(s1), len(s2)\n    for i in range(len1): \n        for j in range(len2):\n            length = 0\n            while i + length < len1 and j + length < len2:\n                if s1[i + length] != s2[j + length]:\n                    break \n                length += 1\n            if length > max_length:\n                max_length = length\n                longest_substring = s1[i : i + length]\n    return longest_substring\n    \nif __name__ == '__main__':\n    s1 = \"Tangible\"\n    s2 = \"Non-Tangible\"\n    print(longest_common_substring(s1, s2))", "category": "Python"}, {"instruction": "Normalize a given array such that it adds up to 1.", "input": "[3, 0, 9, 5]", "output": "[0.15, 0.0, 0.45, 0.3]", "category": "Python"}, {"instruction": "Create a function to reverse a string.", "input": "s = \"hello world\"", "output": "\"\"\"\nReverse string\n\"\"\"\n\ndef reverse_string(s):\n    \"\"\"Reverse a given string.\n    \n    Args:\n        s (str): The string to reverse.\n        \n    Returns:\n        str: The reversed string.\n    \"\"\"\n    return s[::-1]\n    \nif __name__ == '__main__':\n    s = \"hello world\"\n    print(reverse_string(s))", "category": "Python"}, {"instruction": "Edit the program to print the given date in the format \"dd/mm/yyyy\".", "input": "year = 2020\nmonth = 5\nday = 3", "output": "# Print date in dd/mm/yyyy format\nprint(\"{:02d}/{:02d}/{:04d}\".format(day, month, year))", "category": "Python"}, {"instruction": "convert all words in a sentence to camelCase", "input": "The quick brown fox jumps over the lazy dog", "output": "\"\"\"\nConvert all words in a sentence to camelCase\n\nInput: The quick brown fox jumps over the lazy dog\n\nOutput: theQuickBrownFoxJumpsOverTheLazyDog\n\"\"\"\n\ndef toCamelCase(sentence):\n    words = sentence.split(\" \")\n    result = \"\"\n    for index, word in enumerate(words):\n        if index > 0:\n            small_word = word.capitalize()\n            result += small_word\n        else:\n            result += word\n    return result\n\nsentence = \"The quick brown fox jumps over the lazy dog\"\nprint(toCamelCase(sentence))", "category": "Python"}, {"instruction": "Compare two integers and print the larger one.", "input": "a = 3, b = 5", "output": "if a > b:\n    print(a)\nelse:\n    print(b)", "category": "Python"}, {"instruction": "Find the smallest element in a given array.", "input": "[6, 8, 1, 4, 5]", "output": "1", "category": "Python"}, {"instruction": "Calculate the sum of an array of integers", "input": "[3, 5, 7, 9]", "output": "24", "category": "Python"}, {"instruction": "Create a program that prints the first 10 Fibonacci numbers.", "input": "", "output": "\"\"\"\nPrint the first ten Fibonacci numbers\n\"\"\"\n\ndef print_first_ten_fibonacci_numbers():\n    \"\"\"Print the first ten Fibonacci numbers.\"\"\"\n\n    n1, n2 = 0, 1\n    num = 0\n    while num < 10:\n        print(n1)\n        nth= n1 + n2\n        n1 = n2\n        n2 = nth\n        num += 1\n        \nif __name__ == '__main__':\n    print_first_ten_fibonacci_numbers()", "category": "Python"}, {"instruction": "Generate an random integer between 1 and 6.", "input": "", "output": "Math.floor(Math.random() * 6) + 1;", "category": "Python"}, {"instruction": "Debug the following JavaScript code which calculates the average of an array of integers:", "input": "arr = [2, 3, 4, 5]\nsum = 0\nfor (i = 0; i < arr.length; i++) {\nsum += arr[i]}\naverage = sum / arr.length", "output": "arr = [2, 3, 4, 5]\nsum = 0\nfor (i = 0; i < arr.length; i++) {\n  sum += arr[i];\n}\naverage = sum / arr.length;\nconsole.log(average);", "category": "Python"}, {"instruction": "Create an HTML page displaying a table of 3 rows and 3 columns.", "input": "", "output": "<table>\n  <tr>\n    <td>Column 1</td>\n    <td>Column 2</td>\n    <td>Column 3</td>\n  </tr>\n  <tr>\n    <td>Row 1</td>\n    <td>Row 1</td>\n    <td>Row 1</td>\n  </tr>\n  <tr>\n    <td>Row 2</td>\n    <td>Row 2</td>\n    <td>Row 2</td>\n  </tr>\n  <tr>\n    <td>Row 3</td>\n    <td>Row 3</td>\n    <td>Row 3</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Redesign the following Python program with functions.", "input": "my_list = [5, 10, 15, 20]\nsum = 0\nfor number in my_list:\nsum = sum + number", "output": "def sum_of_list(my_list):\n  sum = 0\n  for number in my_list:\n    sum = sum + number\n  return sum\n\nmy_list = [5, 10, 15, 20]\nresult = sum_of_list(my_list)", "category": "Python"}, {"instruction": "How would you determine if a given number is a prime number?", "input": "", "output": "A prime number is a number that is only divisible by 1 and itself. To check if a given number is a prime number, first use a loop to check all the numbers from 1 to the given number. If any of the numbers evenly divide the given number, then the number is not a prime. Otherwise, the number is a prime number.", "category": "Python"}, {"instruction": "Write a function that takes a list of integers as inputs and returns the sum of the square of all the even numbers.", "input": "lst = [2, 8, 9, 5, 3, 10]", "output": "def sum_square_even(lst):\n    result = 0\n    for num in lst:\n        if (num % 2 == 0):\n            result += num ** 2\n    return result\n\nprint(sum_square_even(lst))", "category": "Python"}, {"instruction": "classify the following sentence using a sentiment analysis model.", "input": "The movie is awesome.", "output": "\"\"\"\nClassify the following sentence using a sentiment analysis model.\nSentence: The movie is awesome.\n\"\"\"\n\nfrom textblob import TextBlob\n\nsentence = \"The movie is awesome.\"\n\n# convert the sentence to a TextBlob object\nblob = TextBlob(sentence)\n\n# get the sentiment\nsentiment = blob.sentiment\n\nif sentiment.polarity > 0:  # positive sentiment\n    print(\"This sentence is classified as Positive.\")\nelif sentiment.polarity == 0:  # neutral sentiment\n    print(\"This sentence is classified as Neutral.\")\nelse:  # negative sentiment\n    print(\"This sentence is classified as Negative.\")", "category": "Python"}, {"instruction": "Given a binary tree, write a code snippet to list all of its descendant leafs.", "input": "", "output": "def listDescendantLeaves(root):\n    if not root: \n        return\n    elif not root.left and not root.right: \n        print(root.val) \n    listDescendantLeaves(root.left) \n    listDescendantLeaves(root.right)", "category": "Python"}, {"instruction": "Write a function that checks if a string is a palindrome or not.", "input": "string = \"ana\"", "output": "def is_palindrome(string):\n    rev = ''.join(reversed(string))\n    if rev == string:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Connect to a MySQL database and select all rows from Customers where Phone is greater than 1000.", "input": "", "output": "import mysql.connector\n\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"\",\n  passwd=\"\",\n  database=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nmycursor.execute(\"SELECT * FROM customers WHERE phone > 1000\")\n\nmyresult = mycursor.fetchall()\n\nfor x in myresult:\n  print(x)", "category": "Python"}, {"instruction": "Write an algorithm to generate the Fibonacci series up to the nth term", "input": "", "output": "def fibonacci(n):  \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Write C++ code to find the maximum subarray sum", "input": "", "output": "int maxSubarraySum(int arr[], int n) { \n    int max_so_far = 0, max_ending_here = 0; \n  \n    for (int i = 0; i < n; i++) { \n        max_ending_here = max_ending_here + arr[i]; \n        if (max_so_far < max_ending_here) \n            max_so_far = max_ending_here; \n  \n        if (max_ending_here < 0) \n            max_ending_here = 0; \n    } \n    return max_so_far; \n}", "category": "Python"}, {"instruction": "Write a JavaScript code to calculate the factorial of a number", "input": "", "output": "function factorial(n){\n    if (n == 0){\n        return 1;\n    }\n    else{\n        return n * factorial(n - 1);\n    }\n}", "category": "Python"}, {"instruction": "Write a function to determine if two strings are anagrams of each other", "input": "", "output": "def are_anagrams(str1, str2):\n    if len(str1) != len(str2):\n        return False\n\n    freq1 = {}\n    freq2 = {}\n\n    for char in str1:\n        if char not in freq1:\n            freq1[char] = 1\n        else:\n            freq1[char] += 1\n\n    for char in str2:\n        if char not in freq2:\n            freq2[char] = 1\n        else:\n            freq2[char] += 1\n\n    for key in freq1:\n        if key not in freq2 or freq2[key] != freq1[key]:\n            return False\n    \n    return True", "category": "Python"}, {"instruction": "Write a SQL query to find the names of all employees working at a given department", "input": "", "output": "SELECT e.name \nFROM employee e \nJOIN department d ON e.departmentid = d.id \nWHERE d.name = 'given department'", "category": "Python"}, {"instruction": "Write a Java program to print out the first n prime numbers", "input": "", "output": "public static void printPrimeNumbers(int n) \n    { \n        int num; \n        int count=0;\n        for (int i = 2; i <= n;) \n        { \n            num=0; \n            for (int j = 2; j <= i / 2; j++)  \n            { \n                if (i % j == 0) \n                { \n                    num++; \n                    break; \n                } \n            } \n            if (num == 0) \n            { \n                System.out.print(i+\" \"); \n                count++; \n            } \n            i++; \n        } \n    }", "category": "Python"}, {"instruction": "Write an algorithm to check if an array contains a given value", "input": "arr = [1, 7, 5, 8, 44]\nvalue = 5", "output": "def check_value(arr, value):\n    for item in arr:\n        if item == value:\n            return True\n    return False", "category": "Python"}, {"instruction": "Write a code to compare two lists and find the common elements.", "input": "list1 = [3, 6, 9, 12]\nlist2 = [2, 4, 5, 6, 8, 9]", "output": "def find_common(list1, list2):\n    # initial list to store common elements\n    result = []\n\n    # iterate through the list\n    for num in list1:\n        # check if the number is in list2\n        if num in list2:\n            # append the element\n            result.append(num)\n\n    return result\n    \nprint(find_common(list1, list2))", "category": "Python"}, {"instruction": "Write a Django Model API to store status and published date for a blog post.", "input": "", "output": "from django.db import models\n\nclass BlogPost(models.Model):\n    # post title\n    title = models.CharField(max_length = 200)\n    # post status (draft / published)\n    status = models.CharField(max_length = 20)\n    # post publish date\n    published = models.DateTimeField(auto_now_add = True)", "category": "Python"}, {"instruction": "Write a function to get the mean of the given list of numbers.", "input": "lst = [1, 4, 5, 9, 3]", "output": "def mean(lst):\n    # calculate the sum\n    total = 0\n    for item in lst:\n        total += item\n    \n    # calculate the mean\n    mean = total / len(lst)\n    return mean\n\nprint(mean(lst))", "category": "Python"}, {"instruction": "Write a SQL query to get the total amount from orders table where status is \"complete\".", "input": "", "output": "SELECT SUM(amount)\nFROM orders\nWHERE status = 'completed';", "category": "Python"}, {"instruction": "Given a list of strings, write a code to find the longest string.", "input": "lst = ['one', 'two', 'three', 'four', 'five']", "output": "# initial max length\nmax_length = 0\n# empty string to store the max length string\nmax_str = ''\n\n# iterate through the list\nfor string in lst:\n    # get the length\n    length = len(string)\n    # update the max length\n    if length > max_length:\n        # get the string\n        max_str = string\n        # update max length\n        max_length = len(string)\n\nprint(max_str)", "category": "Python"}, {"instruction": "Write a code to take two string inputs and generate the output string containing alternate characters from each string.", "input": "str1 = 'abc'\nstr2 = '123'", "output": "def alternate_char(str1, str2):\n    # get the length of string\n    n = len(str1)\n\n    # initialize the output string\n    output_str = ''\n\n    # generate the output string\n    for i in range(n):\n        output_str += str1[i] + str2[i]\n    \n    return output_str\n\nprint(alternate_char(str1, str2))", "category": "Python"}, {"instruction": "Change the following array so that it orders in ascending order", "input": "array = [3, 7, 1, 8, 4]", "output": "array.sort()", "category": "Python"}, {"instruction": "Read a code and identify the data type of the variables a and b", "input": "a = 8\nb = \"Hello\"", "output": "A is an integer and B is a string.", "category": "Python"}, {"instruction": "Write a simple calculator program.", "input": "", "output": "def calculator():\n    number1 = int(input(\"Please enter first number: \"))\n    number2 = int(input(\"Please enter second number: \"))\n    print(\"Please choose operation -\\n\" \\\n          \"1. Add\\n\" \\\n          \"2. Subtract\\n\" \\\n          \"3. Multiply\\n\" \\\n          \"4. Divide\\n\") \n\n    choice = int(input(\"Enter your choice: \"))\n    if choice == 1:\n        ans = number1 + number2\n        print(\"Answer={}\".format(ans))\n    elif choice == 2:\n        ans = number1 - number2\n        print(\"Answer={}\".format(ans))\n    elif choice == 3:\n        ans = number1 * number2\n        print(\"Answer={}\".format(ans))\n    elif choice == 4:\n        ans = number1 / number2\n        print(\"Answer={}\".format(ans))\n    else:\n        print(\"Invalid Choice\")", "category": "Python"}, {"instruction": "Parse the string \"Hello[1]World[4]123[3]\" into a list.", "input": "string = \"Hello[1]World[4]123[3]\"", "output": "my_list = string.split('[')\nmy_list = [item.replace(']', '') for item in my_list]\nmy_list = [int(item) for item in my_list[1::2]]", "category": "Python"}, {"instruction": "Generate a unique and random password for a user using python.", "input": "", "output": "import random \ncharacters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+-=[ ]{}:'\npassword = random.choices(characters, k = 16) \nprint(\"\".join(password))", "category": "Python"}, {"instruction": "Create a Linked List Node with the data of type integer.", "input": "", "output": "class Node: \n  \n  # Function to initializaee the node object \n  def __init__(self, data): \n    self.data = data # Assign data \n    self.next = None # Initialize next as null", "category": "Python"}, {"instruction": "Using the numpy library, create a 3x3 Identity Matrix.", "input": "", "output": "iden_matrix = numpy.identity(3) \nprint(iden_matrix)", "category": "Python"}, {"instruction": "For the following two arrays, create a code snippet to return the intersecting element.", "input": "arr1 = [1, 9, 4, 10]\narr2 = [2, 4, 7, 8]", "output": "intersect_arr = [] \nfor i in arr1:\n    if i in arr2:\n        intersect_arr.append(i)\nreturn intersect_arr", "category": "Python"}, {"instruction": "Write a code snippet to return the item with the highest value in a given dictionary.", "input": "d = {'a':20, 'b':10, 'c':15}", "output": "key = max(d, key = d.get) \nval = d[key]\nreturn (key, val)", "category": "Python"}, {"instruction": "Estimate the time complexity of the following algorithm.", "input": "for i in range(n):\n    for j in range(n):\n        print(i + j)", "output": "O(n^2)", "category": "Python"}, {"instruction": "Create a for loop to print the numbers from 1 to 100.", "input": "", "output": "for i in range(1, 101):\n    print(i)", "category": "Python"}, {"instruction": "Given a string, write a function to remove all the duplicate characters.", "input": "string = \"apple\"", "output": "def remove_duplicates(string): \n    new_string = \"\" \n    for char in string:\n        if char not in new_string:\n            new_string += char \n    return new_string", "category": "Python"}, {"instruction": "Find the number of times a letter appears in a string.", "input": "string = \"Hello World\"\nletter = 'l'", "output": "count = string.count(letter)", "category": "Python"}, {"instruction": "Connect to a MongoDB database and select all documents from the collection \u2018customers\u2019.", "input": "", "output": "import pymongo\n\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmydoc = mycol.find({})\n\nfor x in mydoc:\n  print(x)", "category": "Python"}, {"instruction": "Write a code to delete all items from a list with a value of 3.", "input": "mylist = [2, 3, 3, 4, 5, 6, 4, 7]", "output": "mylist = [item for item in mylist if item != 3]", "category": "Python"}, {"instruction": "Read a code and find all the function calls that are made.", "input": "print('Hello world!')\nmy_function()\nmy_function2(2, 3)", "output": "The two function calls made are \"my_function()\" and \"my_function2(2, 3)\".", "category": "Python"}, {"instruction": "Write a function to remove duplicate items in a list.", "input": "mylist = [2, 3, 3, 4, 5, 6, 4, 7]", "output": "def remove_duplicates(mylist):\n    return set(mylist)", "category": "Python"}, {"instruction": "Change the following array so that it only contains numbers divisible by 3", "input": "mylist = [2, 4, 5, 6, 7, 11, 12, 22]", "output": "mylist = [x for x in mylist if x % 3 == 0]", "category": "Python"}, {"instruction": "Write a code to return the first 3 elements in a list.", "input": "mylist = [1,4,3,6,7,2,4]", "output": "mylist[:3]", "category": "Python"}, {"instruction": "Read the following two JSON strings and merge them", "input": "json1 = {\n    \"name\": \"John\",\n    \"age\": 20\n}\n\njson2 = {\n    \"address\": \"123 Street\"\n}", "output": "import json\n\njson1 = json.loads(json1)\njson2 = json.loads(json2)\nmerged_json = {**json1, **json2}", "category": "Python"}, {"instruction": "Create a new array that contains only the even numbers from a given array.", "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8]", "output": "arr = [x for x in arr if x % 2 == 0]", "category": "Python"}, {"instruction": "Construct an if-else statement that returns \u2018even\u2019 if the given number is even and \u2018odd\u2019 if the given number is odd.", "input": "", "output": "if n % 2 == 0:\n    return 'even'\nelse:\n    return 'odd'", "category": "Python"}, {"instruction": "Explain what the following line of code does.", "input": "a %= b", "output": "This line of code assigns the remainder of a divided by b to a, so that the resulting value of a is the remainder of a divided by b. For example, if a is 10 and b is 3, the value of a after executing this line of code would be 1 (the remainder of 10 divided by 3).", "category": "Python"}, {"instruction": "Create a JavaScript program which takes an array of integers as a parameter and reverses the array in-place.", "input": "[3, 5, 9, 1, 6]", "output": "function reverseArrayInPlace(nums) {\n    let left = 0;\n    let right = nums.length - 1;\n  \n    while (left < right) {\n        let temp = nums[left];\n        nums[left] = nums[right];\n        nums[right] = temp;\n  \n        left++;\n        right--;\n    }\n    return nums;\n}", "category": "Python"}, {"instruction": "Sum up the numbers in the array in Javascript.", "input": "arr = [1,2,3,4,5]", "output": "let sum = arr.reduce((total, num) => total + num);\nconsole.log(sum); // 15", "category": "Python"}, {"instruction": "Create a function that takes in two numbers as arguments and returns the product of the two.", "input": "", "output": "def multiply(x, y):\n    return x*y", "category": "Python"}, {"instruction": "Write a SQL query to return the sum of all salaries.", "input": "", "output": "SELECT SUM(salary)\nFROM employees;", "category": "Python"}, {"instruction": "Write a function that takes a string and reverses the words.", "input": "text = \"Hello World!\"", "output": "def reverseWords(text):\n    return ' '.join(text.split()[::-1])\n\nreverseWords(text) # \"World! Hello\"", "category": "Python"}, {"instruction": "Write a list comprehension to square each number in the list.", "input": "arr = [1, 2, 3, 4, 5]", "output": "arr = [x**2 for x in arr] # [1, 4, 9, 16, 25]", "category": "Python"}, {"instruction": "Generate a random integer between 4 and 8 (inclusively).", "input": "", "output": "import random\nx = random.randint(4, 8)", "category": "Python"}, {"instruction": "Sort the array in ascending order.", "input": "arr = [3, 2, 1, 5, 4]", "output": "arr.sort() # [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Create a function that takes an array as an argument and returns the sum of all the elements in the array.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def arraySum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total", "category": "Python"}, {"instruction": "Change the variable `x` to the data type desired.", "input": "x = 'Hello World!'", "output": "x = \"Hello World!\"", "category": "Python"}, {"instruction": "Write a script using Bash that replaces all vowels with a number.", "input": "", "output": "#!/bin/bash\n\nstring=\"Hello World!\"\nvowels=(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")\n\nfor i in \"${vowels[@]}\"\ndo\n    string=\"${string//$i/0}\"\ndone\n\necho $string #H0ll0 W0rld!", "category": "Python"}, {"instruction": "Edit the code to create a try-except block to handle the exception.", "input": "a = 5\nb = 0\n\nans = a/b", "output": "try:\n    a = 5\n    b = 0\n\n    ans = a/b\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero.\")", "category": "Python"}, {"instruction": "Create a PHP code to check if an array contains a given item.", "input": "$input_array = array(1,2,3,4,5);\n$item_to_check = 3;", "output": "<?php\n$input_array = array(1,2,3,4,5);\n$item_to_check = 3;\n\nif(in_array($item_to_check, $input_array)) {\n  echo \"Array contains the given item.\";\n} else {\n  echo \"Array doesn't contain the given item.\";\n}\n?>", "category": "Python"}, {"instruction": "Create a Ruby code that prints out the median of a given array of numbers.", "input": "nums = [1, 7, 3, 6]", "output": "nums = [1, 7, 3, 6]\nsorted_nums = nums.sort\n\n# Calculation of median \nif sorted_nums.length % 2 == 0\n  mid_index = sorted_nums.length/2\n  median = (sorted_nums[mid_index] + sorted_nums[mid_index - 1])/2.to_f\nelse\n  mid_index = sorted_nums.length/2\n  median = sorted_nums[mid_index]\nend\n\nputs median", "category": "Python"}, {"instruction": "Write a SQL query to find the total number of orders placed between two given dates.", "input": "start_date = '2020-01-01'\nend_date = '2020-02-01'", "output": "SELECT COUNT(*)\nFROM orders\nWHERE order_date BETWEEN '2020-01-01' AND '2020-02-01';", "category": "Python"}, {"instruction": "Write a HTML code that create a form for user to fill out their current address.", "input": "", "output": "<form action=\"\">\n    <label for=\"street\">Street</label>\n    <input type=\"text\" name=\"street\" id=\"street\">\n    <label for=\"city\">City</label>\n    <input type=\"text\" name=\"city\" id=\"city\">\n    <label for=\"state\">State</label>\n    <input type=\"text\" name=\"state\" id=\"state\">\n    <label for=\"zip\">Zip Code</label>\n    <input type=\"text\" name=\"zip\" id=\"zip\"> \n    <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Using the given function, create a loop that counts from 0 to 9.", "input": "function printNum(num){\n  console.log(num)\n}", "output": "for (let i = 0; i < 10; i++){\n    printNum(i);\n}", "category": "Python"}, {"instruction": "Create a JSON object with three key-value pairs.", "input": "", "output": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"age\": 30\n}", "category": "Python"}, {"instruction": "Count the number of characters in the string.", "input": "text = \"Hello World!\"", "output": "len(text) # 12", "category": "Python"}, {"instruction": "Generate a random number between 0 and 1 (inclusively).", "input": "", "output": "Math.random(); // a random number between 0 and 1 (inclusively)", "category": "Python"}, {"instruction": "How to delete a particular row in an SQLite database table?", "input": "", "output": "To delete a particular row in an SQLite database table, you can use the DELETE statement with a WHERE clause to specify the row to be deleted. For example: DELETE FROM table_name WHERE condition;", "category": "Python"}, {"instruction": "Generate a regular expression to match a valid email address.", "input": "", "output": "/^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/", "category": "Python"}, {"instruction": "Write a MySQL query to print the column names of a table named 'employees'.", "input": "", "output": "SELECT column_name FROM information_schema.columns WHERE table_name = 'employees';", "category": "Python"}, {"instruction": "Rewrite the following C++ code using only pointer references instead of array subscripts:", "input": "int arr[3] = {1,2,3};\nint sum = 0;\nfor (int i = 0; i < 3; i++) \n{\n    sum += arr[i];\n}", "output": "int arr[3] = {1,2,3};\nint sum = 0;\nint* ptr = arr;\nfor (int i = 0; i < 3; i++) \n{\n    sum += *(ptr+i); \n}", "category": "Python"}, {"instruction": "Write a JavaScript code to get the current browser URL.", "input": "", "output": "var currentURL = window.location.href;\nconsole.log(currentURL);", "category": "Python"}, {"instruction": "What is the purpose of a constructor in a class in Java?", "input": "", "output": "The purpose of a constructor in a class in Java is to initialize an object of that class. A constructor is a special kind of method that is used to create an object of its associated class. When an object of the class is created, the constructor is used to set the initial state of the object.", "category": "Python"}, {"instruction": "Write an algorithm in Python to determine if a number is even or odd.", "input": "", "output": "def is_even(num): \n    if num % 2 == 0: \n        return True \n    else: \n        return False", "category": "Python"}, {"instruction": "Create a Swift code that show the number of days in the given month.", "input": "int month = 5", "output": "let month = 5\nlet daysEndingInth = [3, 0, 3, 2, 3, 2, 3, 3, 2, 3, 2, 3]\nlet daysInMonth = daysEndingInth[month - 1] \nprint(\"The number of days in the month of \\(month) is \\(daysInMonth).\")", "category": "Python"}, {"instruction": "Write a SQL query to update a value x in a column y in a table z.", "input": "x = 5, y = 'amount' and z = 'payments'.", "output": "UPDATE payments \nSET amount = 5 \nWHERE payments.amount IS NOT NULL;", "category": "Python"}, {"instruction": "Describe the basic syntax of a Java function?", "input": "", "output": "A Java function consists of a function name, return type, parameters (arguments), and body. The syntax of a Java function is as follows: \npublic <return type> <function name>(<list of parameters>) { \n    // function body \n    <statements> \n}", "category": "Python"}, {"instruction": "Write a function to print all prime numbers between two given numbers.", "input": "", "output": "def print_prime_numbers_in_range(start, end):\n  # start = starting number\n  # end = ending number\n\n  for num in range(start, end+1):\n    # Prime numbers are greater than 1\n    if num > 1:\n      for i in range(2, num):\n        if (num % i) == 0:\n          break\n      else:\n        print(num)\n---\n\n11. Instruction: Generate a snippet of code to reverse given string\n11. Input:\n<noinput>\n11. Output:\ndef reverse_string(input_string):\n  string_length = len(input_string)\n  reversed_string = \"\"\n  \n  for i in range(string_length-1,-1,-1):\n    reversed_string += input_string[i]\n  \n  return reversed_string", "category": "Python"}, {"instruction": "Design a program to find the longest element in the given list.", "input": "[10, 100, 200, 500, 400]", "output": "def longest_element(list):\n  max_length = 0\n  max_length_item = None\n\n  for item in list:\n    if len(item) > max_length:\n      max_length = len(item)\n      max_length_item = item\n\n  return max_length_item\n\nlist = [10, 100, 200, 500, 400]\nlongest_element(list) # 500", "category": "Python"}, {"instruction": "Create a list comprehension to generate a list of multiples of 3 from 0 to 23.", "input": "", "output": "list_of_multiples_of_3 = [x*3 for x in range(8)]", "category": "Python"}, {"instruction": "Write a code to convert a given spredsheet in csv format to json format.", "input": "", "output": "import csv\nimport json\n\ndef csv_to_json():\n    # Path of csv file\n    file_csv = 'mycsvfile.csv'\n    \n    # Path of json file\n    file_json = 'myjsonfile.json'\n    \n    with open(file_csv, 'r') as input_file:\n        reader = csv.DictReader(input_file)\n        data = list(reader)\n    \n    with open(file_json, 'w') as output_file:\n        json.dump(data, output_file)\n\ncsv_to_json()", "category": "Python"}, {"instruction": "Generate a snippet of code to extract all the URLs from the given string.", "input": "This string contains some urls such as https://www.google.com and https://www.facebook.com.", "output": "import re\n\nstring = \"This string contains some urls such as https://www.google.com and https://www.facebook.com.\"\n\nurls = re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', string) \n\nprint(urls)", "category": "Python"}, {"instruction": "Compose a function named average_list which takes a list of numbers as its argument and computes the average.", "input": "", "output": "def average_list(nums):\n    return sum(nums)/len(nums)", "category": "Python"}, {"instruction": "How to reverse a list in C++?", "input": "", "output": "You can reverse a list in C++ using the std::reverse algorithm. To reverse the list, pass the list as the first parameter and the beginning and end of the list as the second and third parameter, respectively. Alternatively, you can also reverse the list using a for loop and the operator [] to access each element of the list.", "category": "Python"}, {"instruction": "Is it possible to set a breakpoint that is not associated with any source code line in a GDB program?", "input": "", "output": "Yes, it is possible to set a breakpoint that is not associated with any source code line in a GDB program. For example, you can set a breakpoint on a function or a memory address. You can do this by using the break command with '*' prefix followed by the address of the breakpoint.", "category": "Python"}, {"instruction": "Edit the Python code so that it prints out the total number of elements in the list.", "input": "list = [1, 2, 3, 4, 5]", "output": "list = [1, 2, 3, 4, 5]\nprint(\"Total number of elements in the list: \", len(list))", "category": "Python"}, {"instruction": "Create a Java program that prints out the contents of a given two-dimensional array.", "input": "int[][] arr = {{1,2},{3,4},{5,6}}", "output": "public class TwoDArray {\n\n    public static void main(String[] args) {\n        int[][] arr = {{1,2},{3,4},{5,6}};\n\n        for(int i=0;i<arr.length;i++){\n            for(int j=0;j<arr[i].length;j++){\n                System.out.print(arr[i][j]+\" \");\n            }\n            System.out.println();\n        }\n    }\n}", "category": "Python"}, {"instruction": "Follow the comments in the code to complete the program which prints a conversion table from Fahrenheit to Celsius.", "input": "# This program prints a conversion table from Fahrenheit to Celsius\n\n# Print a heading for the table\n# TODO\n\n# Print the column headings\n# TODO\n\n# Calculate and print the table body\n# TODO", "output": "# This program prints a conversion table from Fahrenheit to Celsius\n\n# Print a heading for the table\nprint(\"Fahrenheit to Celsius Conversion Table\")\n\n# Print the column headings\nprint(\"Fahrenheit \\t Celsius\")\n\n# Calculate and print the table body\nfor fahr in range(-50 , 121):\n  celsius = (fahr - 32) * 5 / 9\n  print(\"%3d \\t\\t %.2f\" % (fahr, celsius))", "category": "Python"}, {"instruction": "Create a function to calculate the area of a given circle.", "input": "", "output": "def area_circle(radius):\n    return 3.14 * (radius**2)", "category": "Python"}, {"instruction": "Write code to find the sum of all numbers between 1 and 10.", "input": "", "output": "sum = 0\nfor i in range(1,11):\n    sum += i\nprint(sum)", "category": "Python"}, {"instruction": "Edit the following code to print out all even numbers from 1 to 10.", "input": "for i in range(1,11):\n    print(i)", "output": "for i in range(1,11):\n    if i % 2 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Write code to create a list of all prime numbers between 2 and 100.", "input": "", "output": "def find_primes(n): \n    prime_list = [2] \n    for number in range(2, n + 1): \n        is_prime = True\n        for k in range(2, number): \n            if number % k == 0: \n                is_prime = False \n        if is_prime: \n            prime_list.append(number) \n    return prime_list", "category": "Python"}, {"instruction": "Write a function that checks if a give number is even or odd.", "input": "", "output": "def is_even(n):\n    if n%2 == 0:\n        return True  \n    else:\n        return False", "category": "Python"}, {"instruction": "Write code that removes spaces from a given string.", "input": "string = \" A B C D \"", "output": "def remove_spaces(string): \n    return \"\".join(string.split())", "category": "Python"}, {"instruction": "Write a class to represent a 2D point with x and y coordinates.", "input": "", "output": "class Point:\n    def __init__(self, x, y):\n        self.x = x \n        self.y = y \n   \n    def __str__(self): \n        return \"({0},{1})\".format(self.x, self.y)", "category": "Python"}, {"instruction": "Write a function to generate the nth Fibonacci number.", "input": "< noinput >", "output": "def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-2) + fib(n-1)", "category": "Python"}, {"instruction": "Write a function to find the maximum difference between two numbers in a given array.", "input": "arr = [5, 3, 17, 11, 9]", "output": "def max_difference(arr):\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = arr[i+1] - arr[i]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff", "category": "Python"}, {"instruction": "Create a nested loop to print every combination of numbers between 0-9", "input": "", "output": "for i in range(10):\n    for j in range(10):\n        print(i, j)", "category": "Python"}, {"instruction": "Write a function to find the number of distinct states in a given matrix.", "input": "matrix = [[1, 0, 0],\n          [1, 0, 1],\n          [1, 1, 1]]", "output": "def find_num_distinct_states(matrix):\n    states = set()\n    for row in matrix:\n        state = \"\".join([str(x) for x in row])\n        states.add(state)\n    return len(states)", "category": "Python"}, {"instruction": "Create an array of length 15 containing numbers divisible by 3 up to 45.", "input": "", "output": "arr = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45]", "category": "Python"}, {"instruction": "Write a replace method for a string class which replaces the given string with a given set of characters.", "input": "string = \"Hello World!\"\nreplace_with = \"Greetings!\"", "output": "def replace(self, replace_with):\n    new_string = \"\"\n    for char in self:\n        if char == \" \":\n            new_string += replace_with\n        else:\n            new_string += char\n    return new_string", "category": "Python"}, {"instruction": "Formulate an equation to calculate the height of a triangle given the angle, side lengths and opposite side length.", "input": "", "output": "Height of triangle = opposite side length * sin (angle) / side length", "category": "Python"}, {"instruction": "Develop a classification algorithm in Python to predict whether a bird is a hawk or a falcon.", "input": "", "output": "import pandas as pd\nimport numpy as np\n\n# Define features\nfeatures = [\"wing_shape\", \"size\", \"tails_length\", \"color_pattern\"] \n\n# Load the data\ndata = pd.read_csv(\"birds.csv\")\n\n# Preprocess the data to generate feature vectors\nX = np.array(data[features]) \n\n# Make a target vector \ny = np.array(data[\"species\"]) \n\n# Divide the data into training and test sets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train a classification model\nfrom sklearn.tree import DecisionTreeClassifier\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Generate evaluation metrics\nfrom sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_test, y_pred)\n\nprint(\"Model accuracy: %.2f\" % accuracy)", "category": "Python"}, {"instruction": "Create a function in Java for computing the factorial of a positive integer number.", "input": "", "output": "public static long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    long result = 1;\n    for (int i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}", "category": "Python"}, {"instruction": "Create a C++ program for randomly shuffling an array of integers.", "input": "", "output": "#include <iostream>\n#include <algorithm>\n#include <random>\n\nvoid shuffleArray(int array[], int size) {\n\tstd::random_device rd;\n\tstd::mt19937 g(rd()); \n\tstd::shuffle(array, array+size, g); \n}\n\nint main() \n{ \n\tint array[] = {1, 2, 3, 4, 5, 6, 7, 8}; \n\tint size = sizeof(array) / sizeof(array[0]); \n\n    // Print original array\n    std::cout << \"Original array: \";\n    for (int i : array)\n        std::cout << i << \" \";\n    std::cout << \"\\n\";\n\n    // Shuffle array\n\tshuffleArray(array, size); \n\n    // Print shuffled array\n    std::cout << \"Shuffled array: \";\n    for (int i : array)\n        std::cout << i << \" \";\n    std::cout << \"\\n\";\n\n\treturn 0; \n}", "category": "Python"}, {"instruction": "Use the function to debug the given program and prevent the segmentation fault.", "input": "#include <stdio.h>\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    int n = 5;\n    int i;\n    // TODO\n    for (i = 0; i <= n; i++) {\n        printf(\"%d\\n\", array[i]);\n    }\n    return 0;\n}", "output": "#include <stdio.h>\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    int n = 5;\n    int i;\n    // Limit loop size to the length of the array\n    for (i = 0; i < n; i++) {\n        printf(\"%d\\n\", array[i]);\n    }\n    return 0;\n}", "category": "Python"}, {"instruction": "Write an SQL query to calculate the average order price for each product category in the \"orders\" table.", "input": "", "output": "SELECT category, AVG(price) as \"Average Order Price\"\nFROM orders\nGROUP BY category;", "category": "Python"}, {"instruction": "Create a JSX code that renders a \"Hello, World!\" message in the browser.", "input": "", "output": "import React from \"react\";\n\nfunction App() {\n  return (\n    <div>\n      <h1>Hello, World!</h1>\n    </div>\n  );\n}\n\nexport default App;", "category": "Python"}, {"instruction": "Write a function in JavaScript to count the number of vowels in a given string.", "input": "const string = \"abcdefg\"", "output": "function countVowels(string) {\n    let vowelCount = 0;\n    const vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n  \n    for (let i = 0; i < string.length; i++) {\n      if (vowels.includes(string[i])) {\n        vowelCount++;\n      }\n    }\n  \n    return vowelCount;\n}\n\nconst string = \"abcdefg\";\nconsole.log(countVowels(string));", "category": "Python"}, {"instruction": "Create a C program that prints out the Fibonacci sequence.", "input": "", "output": "#include <stdio.h>\n\nint main()\n{\n    int i, num, first=0, second=1, next;\n    printf(\"Enter the number of elements: \");\n    scanf(\"%d\", &num);\n    printf(\"Fibonacci Series: \");\n    for (i = 0; i < num; i++)\n    {\n        if (i <= 1)\n            next = i;\n        else\n        {\n            next = first + second;\n            first = second;\n            second = next;\n        }\n        printf(\"%d \", next);\n    }\n    return 0;\n}", "category": "Python"}, {"instruction": "Write a Python function to convert a given string to lowercase.", "input": "string = \"FOO\"", "output": "def to_lowercase(string):\n    return string.lower()\n\nstring = \"FOO\"\nprint(to_lowercase(string))", "category": "Python"}, {"instruction": "Write a SQL query to calculate the total number of orders in the \"orders\" table.", "input": "", "output": "SELECT COUNT(*) AS \"Total Number of Orders\" \nFROM orders;", "category": "Python"}, {"instruction": "Create a Java program that prints out the sum of the numbers in the array.", "input": "int[] numbers = {1, 2, 3 , 4, 5};", "output": "public class SumOfArray {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3 , 4, 5};\n        int sum = 0;\n        for(int i=0; i < numbers.length;i++) {\n            sum = sum + numbers[i];\n        }\n        System.out.println(\"The sum of numbers in the given array is: \" + sum);\n    }\n}", "category": "Python"}, {"instruction": "Create a C++ program that sorts a given array in descending order.", "input": "int array[] = {6, 3, 8, 12, 9, 4};", "output": "#include<iostream>\nusing namespace std;\n \nint main()\n{\n    int array[] = {6, 3, 8, 12, 9, 4};\n    int arraySize = sizeof(array)/sizeof(array[0]);\n \n    //ascending order sorting\n    for(int i = 0; i < arraySize; i++)\n    {\n        // find the position of smallest element\n        int small = i;\n        for(int j = i+1; j < arraySize; j++)\n        {\n            if(array[j] > array[small])\n                small = j;\n        }\n \n        // swap the position of smallest element\n        int temp = array[i];\n        array[i] = array[small];\n        array[small] = temp;\n    }\n \n    // print the sorted array\n    cout << \"Sorted array : \";\n    for(int i = 0; i < arraySize; i++)\n        cout << array[i] << \" \";\n \n    return 0;\n}", "category": "Python"}, {"instruction": "Create a CSS script that centers the login form on the webpage.", "input": "", "output": ".login-form {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}", "category": "Python"}, {"instruction": "Follow the comments to complete the code that finds the maximum value in an array.", "input": "# Find the maximum value in an array\narr = [4, 5, 2, 8, 7]\n# TODO", "output": "# Find the maximum value in an array\narr = [4, 5, 2, 8, 7]\n\nmax_value = arr[0]\nfor i in range(1, len(arr)):\n    if arr[i] > max_value:\n        max_value = arr[i]\n\nprint(max_value)", "category": "Python"}, {"instruction": "Create a dictionary for counting the occurrence of each letter in the given string.", "input": "string = \"hello world\"\n#TODO", "output": "string = \"hello world\"\nletter_counts = {}\n\nfor letter in string:\n    if letter in letter_counts:\n       letter_counts[letter] += 1\n    else:\n        letter_counts[letter] = 1\n\nprint(letter_counts)", "category": "Python"}, {"instruction": "Modify the code to perform the mathematical expression \u201cx to the power of y\u201d.", "input": "# Calculate x to the power of y\n# TODO", "output": "# Calculate x to the power of y\nx_pow_y = x**y", "category": "Python"}, {"instruction": "Remove the boilerplate code from the program for printing 10 random numbers.", "input": "import random\n\n# Generate 10 random numbers\nfor i in range(10):\n    # TODO", "output": "import random\n\n# Generate 10 random numbers\nfor i in range(10):\n    print(random.randrange(1, 101))", "category": "Python"}, {"instruction": "Re-write the code segment as a list comprehension.", "input": "numbers = []\nfor i in range(10):\n    if i % 2 == 0:\n        numbers.append(i)", "output": "numbers = [i for i in range(10) if i % 2 == 0]", "category": "Python"}, {"instruction": "Use try-except statements to detect and handle exceptions in the code.", "input": "for i in range(n):\n    x = 1/i", "output": "try:\n    for i in range(n):\n        x = 1/i\nexcept ZeroDivisionError:\n    print(\"Zero division error encountered!\")", "category": "Python"}, {"instruction": "Replace the placeholder with a for loop for iterating over the numbers from 1 to n and printing them.", "input": "for i in range(n):\n    # TODO", "output": "for i in range(1, n+1):\n    print(i)", "category": "Python"}, {"instruction": "Write a function in HTML for creating a table of n rows and m columns.", "input": "", "output": "<table>\n  <tbody>\n    <% for (let i = 0; i < n; i++) { %>\n      <tr>\n        <% for (let j = 0; j < m; j++) { %>\n          <td>Cell Content</td>\n        <% } %>\n      </tr>\n    <% } %>\n  </tbody>\n</table>", "category": "Python"}, {"instruction": "Write a C++ code to find the average of an array of integers.", "input": "", "output": "#include <iostream>\n\nint calculateAverage(int array[], int n){\n    int sum = 0; \n    for (int i=0; i<n; i++){\n        sum += array[i]; \n    } \n    int average = sum/n;\n    return average;\n}", "category": "Python"}, {"instruction": "How can we encrypt a string in Python?", "input": "", "output": "We can encrypt a string in Python using the cryptography module. The cryptography module provides high level cryptographic primitives using the Fernet cipher. The Fernet cipher uses AES-128 in CBC mode and PKCS7 padding to encrypt the string.", "category": "Python"}, {"instruction": "What is the purpose of declaring a function as static in C++?", "input": "", "output": "The purpose of declaring a function as static in C++ is to restrict its visibility to only the translation unit in which it is declared. A static function can only be called from within the same translation unit and thus, it cannot be accessed from outside of that translation unit.", "category": "Python"}, {"instruction": "Create a function in JavaScript to find the number of occurrences of a letter in a word.", "input": "word: hello\nletter: l", "output": "function findOccurrences(word, letter) {\n    let count = 0;\n    for (let i = 0; i < word.length; i++) {\n        if (word.charAt(i) === letter) {\n            count++;\n        }\n    }\n    return count;\n}", "category": "Python"}, {"instruction": "Write a code to access the nth element of a linked list.", "input": "", "output": "# defining the Node class\nclass Node: \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\n\ndef getNthElement(head, n): \n\tcurrent = head \n\tcount = 0\n\n\t# looping through the linked list\n\twhile(current is not None): \n\t\tif (count == n): \n\t\t\treturn current.data \n\t\tcount += 1\n\t\tcurrent = current.next\n\treturn -1", "category": "Python"}, {"instruction": "Create an HTML form with a textbox, a submit button, and two radio buttons.", "input": "", "output": "<form>\n  <input type=\"text\" id=\"textbox\">\n  <input type=\"submit\" value=\"Submit\">\n  <input type=\"radio\" name=\"choice\" value=\"yes\">Yes\n  <input type=\"radio\" name=\"choice\" value=\"no\">No\n</form>", "category": "Python"}, {"instruction": "Write a code to connect to a remote database.", "input": "username: john\npassword: john123\nIP: 100.10.0.10", "output": "import psycopg2\n\nconn = psycopg2.connect(host=\"100.10.0.10\", database=\"mydb\", user=\"john\", password=\"john123\")", "category": "Python"}, {"instruction": "Write a code to get the time difference between two date-time objects.", "input": "date1: 2019-05-11 21:00:00\ndate2: 2019-05-13 10:00:00", "output": "from datetime import datetime\n\ndef time_difference(date1, date2):\n    date1_obj = datetime.strptime(date1, '%Y-%m-%d %H:%M:%S')\n    date2_obj = datetime.strptime(date2, '%Y-%m-%d %H:%M:%S')\n\n    return (date2_obj - date1_obj).total_seconds() // 3600\n\nprint(time_difference('2019-05-11 21:00:00', '2019-05-13 10:00:00')) # prints 33.0", "category": "Python"}, {"instruction": "Create a function in Java that takes a string and prints the reversed version.", "input": "", "output": "public static void reverseString(String str) { \n    StringBuilder sb = new StringBuilder(); \n  \n    for (int i = str.length() - 1; i >= 0; i--) { \n        sb.append(str.charAt(i)); \n    } \n  \n    System.out.print(sb.toString()); \n}", "category": "Python"}, {"instruction": "Write a Python code to calculate the mean of a given array.", "input": "[1,2,3,4]", "output": "# calculate the mean of given array\narr = [1,2,3,4]\n\ndef calc_mean(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum / len(arr)\n\nprint(calc_mean(arr)) # prints 2.5", "category": "Python"}, {"instruction": "Create a regular expression to validate a URL string.", "input": "", "output": "# Regular expression to validate a URL string\n^(http:\\/\\/|https:\\/\\/|ftp:\\/\\/)?(www\\.)?([a-zA-Z0-9]+(-?[a-zA-Z0-9])*\\.)+[\\w]{2,5}(\\/\\S*)?$", "category": "Python"}, {"instruction": "Create a function in JavaScript that takes an array of integers and returns the largest number.", "input": "", "output": "function findMax(arr) {\n    let max = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}", "category": "Python"}, {"instruction": "Write a code to sort the following array in increasing order.", "input": "[10, 2, 7, 8, 32, 4]", "output": "# sorting array using insertion sort\narr = [10, 2, 7, 8, 32, 4] \n\n# traverse through all array elements \nfor i in range(1, len(arr)):\n    key = arr[i]\n\n    # move elements of arr[0..i-1], that are greater than key,\n    # to one position ahead of their current position\n    j = i-1\n    while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n    arr[j + 1] = key\n  \n#print the sorted array\nprint(arr)", "category": "Python"}, {"instruction": "Create a new folder called 'data' within the current working directory.", "input": "", "output": "import os\n\n# create 'data' folder in the current working directory\ncurrent_directory = os.getcwd()\nnew_directory = os.path.join(current_directory, 'data')\nos.mkdir(new_directory)", "category": "Python"}, {"instruction": "Write a code to print the current date and time in ISO format.", "input": "", "output": "from datetime import datetime\n\ndate_time_obj = datetime.now()\n\nprint(date_time_obj.isoformat()) # prints \"2020-07-29T15:10:01.584131\"", "category": "Python"}, {"instruction": "Rewrite the following Python code using a for-loop.", "input": "i = 0\nwhile i <= 10:\n    print(i)\n    i += 1", "output": "for i in range(11):\n    print(i)", "category": "Python"}, {"instruction": "Write a Java program to generate random numbers", "input": "", "output": "import java.util.Random; \n  \npublic class GenerateRandom { \n  \n    public static void main(String[] args) \n    { \n  \n        Random rand = new Random(); \n  \n        // Generate random integers in range 0 to 999 \n        int x = rand.nextInt(1000); \n        System.out.println(\"Random Integers: \" + x); \n  \n        // Generate Random doubles \n        double y = rand.nextDouble(); \n        System.out.println(\"Random Doubles: \" + y); \n  \n        // Generate Random Boolean \n        boolean z = rand.nextBoolean(); \n        System.out.println(\"Random Boolean: \" + z); \n    } \n}", "category": "Python"}, {"instruction": "Write a C program to find the sum of all digits of a given number", "input": "", "output": "#include <stdio.h>\n\nint getSumOfDigits(int num) {\n    // Initialize sum\n    int sum = 0;\n\n    // Find the sum of digits\n    while(num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n\n    return sum;\n}\n\nint main() {\n    int num;\n    scanf(\"%d\", &num);\n\n    printf(\"Sum of digits of %d is %d\\n\", num, getSumOfDigits(num));\n\n    return 0;\n}", "category": "Python"}, {"instruction": "Write a code to add two linked lists of different sizes.", "input": "list1 = [2->4->3]\nlist2 = [5->6->4->1]", "output": "# adding two linked lists\nclass Node: \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\n\ndef addTwoLists(first, second):\n    # defining current and prev variables\n    prev = None\n    carry = 0\n    temp = None\n\n    # looping until one list has all nodes added\n    while(first is not None or second is not None): \n        Node = Node() \t\t# Node data\n\n        Node.data = carry + (first.data if first else 0) + (second.data if second else 0) \n\t\t\n        # update carry\n        if Node.data >= 10: \n            Node.data = Node.data % 10\n            carry = 1\n        else: \n            carry = 0\n \n        temp = Node\n        # Move first, second pointers ahead\n        if first is not None: \n            first = first.next\n        if second is not None: \n            second = second.next\n\n        # Attach the previous node to the current node\n        if prev is not None: \n            prev.next = Node \n        prev = Node\n\t\t\n    if carry > 0: \n        temp.next = Node \n        temp.data = carry \n    return result", "category": "Python"}, {"instruction": "Create a function in Java to convert a list of strings to a 2D array.", "input": "list: [\"aa\", \"bb\", \"cc\"]", "output": "public static String[][] convertTo2DArray(List<String> strings) {\n    int n = strings.size();\n    String[][] array = new String[n][1];\n    for (int i = 0; i < n; i++) {\n        array[i][0] = strings.get(i);\n    }\n    return array;\n    \n}", "category": "Python"}, {"instruction": "Modify the code below to make it calculate the sum of all the numbers from 1 to n.", "input": "num = 5\nsum = 0\nfor i in range(num):\n  sum += i", "output": "num = 5\nsum = 0\nfor i in range(1, num+1):\n  sum += i", "category": "Python"}, {"instruction": "Create a program to generate a histogram using data from a set of numbers.", "input": "values = [3, 4, 2, 5, 8, 1, 2, 6]", "output": "import matplotlib.pyplot as plt\n\nvalues = [3, 4, 2, 5, 8, 1, 2, 6]\n\nplt.hist(values, bins= 10, edgecolor='black', color='b')\n\nplt.xlabel('Values')\nplt.ylabel('Frequency')\n\nplt.title('Histogram')\n\nplt.show()", "category": "Python"}, {"instruction": "Write an SQL query to calculate the difference between the total salaries of male and female employees in a table.", "input": "", "output": "SELECT SUM(CASE WHEN gender = 'female' THEN salary ELSE 0 END) - SUM(CASE WHEN gender = 'male' THEN salary ELSE 0 END)\nFROM employees;", "category": "Python"}, {"instruction": "Create a C# program which takes two strings as parameters, and returns true if the two strings are anagrams of each other.", "input": "'listen', 'silent'", "output": "bool AreAnagrams(string s1, string s2)\n{\n    if (s1.Length != s2.Length)\n        return false;\n \n    int[] a = new int[256];\n    int n = s1.Length;\n    for (int i = 0; i < n; i++)\n    {\n        int c1 = (int)s1[i];\n        int c2 = (int)s2[i];\n \n        a[c1]++;\n        a[c2]--;\n    }\n \n    for (int i = 0; i < 256; i++)\n    {\n        if (a[i] != 0)\n            return false;\n    }\n \n    return true;\n}", "category": "Python"}, {"instruction": "Write a Python program to generate the first n Fibonacci numbers.", "input": "", "output": "def generate_fibonacci_numbers(n):\n   if n==1:\n       return [0]\n   elif n==2:\n       return [0,1]\n   else:\n       fib_list = [0,1]\n       for i in range(2,n):\n           fib_list.append(fib_list[i-1]+fib_list[i-2])\n       return fib_list", "category": "Python"}, {"instruction": "Create a JavaScript function that takes a given sentence as a parameter and capitalizes the first letter of each word.", "input": "'hello world'", "output": "function capitalizeSentence(str) {\n    let words = str.split(' ');\n    let res = [];\n  \n    for (let word of words) {\n        res.push(word[0].toUpperCase() + word.slice(1));\n    }\n  \n    return res.join(' ');\n}", "category": "Python"}, {"instruction": "Write an SQL query to calculate the average salary of all employees in a table, rounded to the nearest integer.", "input": "", "output": "SELECT ROUND(AVG(salary))\nFROM employees;", "category": "Python"}, {"instruction": "Create a Java program to take a given string and replace all occurrences of a given letter with another given letter", "input": "'bbac', 'b', 'a'", "output": "public String ReplaceLetters(String str, char oldChar, char newChar) {\n    return str.replace(oldChar, newChar);\n}", "category": "Python"}, {"instruction": "Write a Python program to remove all instances of a given value from a given list.", "input": "[1, 2, 3, 2, 3, 4], 2", "output": "def remove_value(nums, val):\n    res = []\n    for num in nums:\n        if num != val:\n            res.append(num)\n    return res", "category": "Python"}, {"instruction": "Write a Python program to concatenate all elements in a list into a string separated by a given separator.", "input": "input_list = [\"Python\", \"is\", \"a\", \"programming\", \"language\"]\nseparator = \"-\"", "output": "def list_to_string(input_list, separator):\n    return separator.join(input_list)", "category": "Python"}, {"instruction": "Write an SQL query to select the number of employees in each department, sorted by the department name in ascending order.", "input": "", "output": "SELECT department, COUNT(employee_ID)\nFROM employees\nGROUP BY department\nORDER BY department ASC;", "category": "Python"}, {"instruction": "Create an HTML page where the main content area has a random background color when the page is loaded.", "input": "", "output": "<!DOCTYPE html>\n<html>\n   <head>\n      <title>RandomBackground</title>\n      <script>\n         window.addEventListener(\"load\",function(){\n            var randomColor = \"#\"+((1<<24)*Math.random()|0).toString(16);\n            document.querySelector(\"body\").style.background = randomColor;\n         });\n      </script>\n   </head>\n   <body>\n   </body>\n</html>", "category": "Python"}, {"instruction": "Write a C# function which takes 2 strings as parameters and returns a new string which is a concatenation of the two parameters.", "input": "'Hello', 'World!'", "output": "string ConcatenateStrings(string str1, string str2)\n{\n   return str1 + str2;\n}", "category": "Python"}, {"instruction": "Create a JavaScript function which takes a string as a parameter and returns the most frequent character in the string.", "input": "'Hello World!'", "output": "function mostFrequentChar(string) {\n    let charMap = {};\n    let maxCount = 0;\n    let freqChar = '';\n  \n    for (let char of string) {\n        if (charMap[char]) {\n            charMap[char]++;\n        } else {\n            charMap[char] = 1;\n        }\n    }\n  \n    for (let char in charMap) {\n        if (charMap[char] > maxCount) {\n            maxCount = charMap[char];\n            freqChar = char;\n        }\n    }\n  \n    return freqChar;\n}", "category": "Python"}, {"instruction": "Generate a dictionary of 10 key-value pairs, where the key is a string and the values are random numbers from 1 to 100.", "input": "", "output": "import random\n\nd = dict()\n\nkeys = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"]\n\nfor key in keys:\n    d[key] =  random.randint(1,100)\n\nprint(d)", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to print the numbers from 1 to 10.", "input": "", "output": "for (let i = 1; i <= 10; i++) {\n  console.log(i);\n}", "category": "Python"}, {"instruction": "Write a function to find the number of occurrences of an element in a list.", "input": "arr = [10, 20, 10, 40, 40, 40, 50]", "output": "def count_occurrences(arr, element):\n    count = 0\n    for e in arr:\n        if e == element:\n            count += 1\n    return count\n\nprint(count_occurrences(arr, 40)) # Outputs: 3", "category": "Python"}, {"instruction": "Create a function to convert Celsius to Fahrenheit.", "input": "", "output": "def celsius_to_fahrenheit(c):\n    f = c * (9/5) + 32\n    return f", "category": "Python"}, {"instruction": "Create a Java program which takes an integer array as a parameter, sorts the array in ascending order, and returns the sorted array.", "input": "[3, 5, 9, 1, 6]", "output": "public int[] SortIntegerArray(int[] nums)\n{\n    Arrays.sort(nums);\n    return nums;\n}", "category": "Python"}, {"instruction": "Write an HTML template to display a greeting message. The message should include the name of the user who visits the website.", "input": "username = \"John\"", "output": "<html>\n\t<head>\n\t\t<title>Greeting Message</title>\n\t</head>\n\t<body>\n\t\t<h1>Hello, {{ username }}!</h1>\n\t</body>\n</html>", "category": "Python"}, {"instruction": "Write a Java program to reverse a given string.", "input": "", "output": "public class ReverseString\n{ \n\n    public static void main(String[] args) \n    { \n        String input = \"Hello\"; \n        StringBuilder input1 = new StringBuilder(); \n  \n        // append a string into StringBuilder input1 \n        input1.append(input); \n  \n        // reverse StringBuilder input1 \n        input1 = input1.reverse(); \n  \n        // print reversed String \n        System.out.println(input1); \n    } \n}", "category": "Python"}, {"instruction": "Write a C# program to find the maximum and minimum of three numbers.", "input": "", "output": "public void Maximum_Minimum(int num1, int num2, int num3)\n{\n    int max = Math.Max(Math.Max(num1, num2),num3);\n    int min =  Math.Min(Math.Min(num1,num2),num3);\n    Console.WriteLine(\"Maximum Number is : \" + max);\n    Console.WriteLine(\"Minimum Number is : \" + min);\n}", "category": "Python"}, {"instruction": "Edit the following code to add try catch block.", "input": "x = \"5\"\ny = \"2\"\nsum = int(x) + int(y)\nprint(\"Sum of x and y is\", sum)", "output": "x = \"5\"\ny = \"2\"\ntry:\n   sum = int(x) + int(y)\n   print(\"Sum of x and y is\", sum)\nexcept:\n   print(\"Error: Invalid input\")", "category": "Python"}, {"instruction": "Write a function to remove all whitespace characters from a given string.", "input": "myString = \"Hello   World    \"", "output": "def remove_whitespaces(myString):\n    return ''.join(myString.split())\n\nmyString = \"Hello   World    \"\nprint(remove_whitespaces(myString))", "category": "Python"}, {"instruction": "What is the output of the following code?", "input": "list1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]\n\nfor x, y in zip(list1, list2):\n    print(x * y)", "output": "a\nbb\nccc", "category": "Python"}, {"instruction": "Edit the following code to remove the bugs.", "input": "def reverse_string(user_string): \n  if len(user_string) == 0: \n    return \"\" \n  else: \n    return reverse_string(user_string[1:]) + user_string[0] \n    \nprint(reverse_string(\u201ctest\u201d))", "output": "def reverse_string(user_string): \n  reversed_string = ''\n  if len(user_string) == 0: \n    return \"\" \n  else: \n    reversed_string = reverse_string(user_string[1:]) + user_string[0] \n    return reversed_string\n\nuser_string = 'test'\nprint(reverse_string(user_string))", "category": "Python"}, {"instruction": "Write a script to check if a given number is a palindrome or not.", "input": "inputNumber = 121", "output": "# Function to check whether the inputNumber is palindrome or not\ndef is_palindrome(inputNumber):\n\n   # negative numbers are not palindrome\n   if inputNumber < 0:\n       return False\n\n   # find the number of digits in the inputNumber\n   div = 1\n   while (inputNumber / div >= 10):\n       div *= 10\n\n   # check if the most significant and least significant digits match\n   while (inputNumber != 0):\n       # compare first and last digits\n       firstdigit = inputNumber // div\n       lastdigit =  inputNumber % 10\n       if firstdigit != lastdigit:\n           return False\n\n       # remove the most and least significant digit of inputNumber\n       inputNumber = (inputNumber % div) // 10\n\n       # reduce div by a factor of 2,  since 2 digits\n       # were removed\n       div = div // 100\n   return True\n\n# Driver code to test above\ninputNumber = 121\nif is_palindrome(inputNumber) :\n  print(\"Yes\")\nelse:\n  print(\"No\")", "category": "Python"}, {"instruction": "Rewrite the following code using ternary operator.", "input": "num1 = 5\nnum2 = 10\n\nif num1 < num2:\n    print(\"num1 is smaller than num2\")\nelse:\n    print(\"num1 is greater than or equal to num2\")", "output": "num1 = 5\nnum2 = 10\n\nprint(\"num1 is smaller than num2\") if (num1 < num2) else print(\"num1 is greater than or equal to num2\")", "category": "Python"}, {"instruction": "Validate whether the string contains only alphabets or not.", "input": "myString = \"abc123\"", "output": "def check_string_alphabets(myString):\n    for character in myString:\n        if (not character.isalpha()):\n            return False\n    return True\n\nmyString = \"abc123\"\nif (check_string_alphabets(myString)):\n    print(\"String contains only alphabets\")\nelse:\n    print(\"String contains numbers\")", "category": "Python"}, {"instruction": "Write a Python function that takes two lists of equal length and creates a dictionary of the elements in each list that have the same index.", "input": "list_one = [1, 2, 3, 4]\nlist_two = [\"a\", \"b\", \"c\", \"d\"]", "output": "def list_dict(list_one, list_two):\n    \"\"\"Create a dictionary of elements in the two lists which have the same index.\"\"\"\n    assert len(list_one) == len(list_two), \"lists must be same length\"\n    dict = {}\n    for i in range(len(list_one)):\n        dict[list_one[i]] = list_two[i]\n    return dict", "category": "Python"}, {"instruction": "Implement a function that finds the maximum element in a given array.", "input": "arr = [45, 7, 0, 82, 23]", "output": "def find_max_element(arr): \n    max_element = arr[0] \n    for index in range(1, len(arr)): \n        if arr[index] > max_element: \n            max_element = arr[index] \n    return max_element\n  \narr = [45, 7, 0, 82, 23]\nmax_element = find_max_element(arr) \nprint(max_element)", "category": "Python"}, {"instruction": "Write a shell script to print the top 3  most frequently used commands.", "input": "", "output": "#!/bin/bash\n# Store all commands used in the last hour in command_list.\nhistory | tail -$(($(date +%H) * 60)) -n $(($(date +%M)+1)) | cut -d ' ' -f 5 > command_list\n# Create frequency database and store them in frequency.dat\ncat command_list | sort | uniq -c | sort -rn > frequency.dat\n# Print top 3 commands\nhead -3 frequency.dat", "category": "Python"}, {"instruction": "Parse the string and return the number of unique alphabets in the string.", "input": "StringInput = \"apple\"", "output": "int count = 0;\nfor (int i = 0; i < StringInput.length(); i++) {\n  if ((StringInput.charAt(i) >= 'a' && StringInput.charAt(i) <= 'z') || (StringInput.charAt(i) >= 'A' && StringInput.charAt(i) <= 'Z')) {\n   count++;\n  }\n}\nSystem.out.println(\"Number of unique alphabets: \" + count);", "category": "Python"}, {"instruction": "Create a class in Java named Puppy that has two instance variables, age and name and two methods, bark and sleep.", "input": "", "output": "public class Puppy { \n   // Instance Variables \n   String name; \n   int age; \n  \n   // Constructor \n   public Puppy(String name, int age){ \n      this.name = name; \n      this.age = age; \n   } \n  \n   // Methods \n   public void bark(){ \n      System.out.println(\"Woof Woof!\"); \n   } \n  \n   public void sleep(){ \n      System.out.println(\"Zzzzzz...\"); \n   } \n}", "category": "Python"}, {"instruction": "Create a table to store customer information.", "input": "", "output": "CREATE TABLE customers (\n   id int NOT NULL AUTO_INCREMENT,\n   name varchar(100) NOT NULL,\n   email varchar(100) NOT NULL,\n   phone varchar(20) NOT NULL,\n   address varchar(200) NOT NULL,\n   PRIMARY KEY (id)\n);", "category": "Python"}, {"instruction": "Write a C++ function to generate a random integer between 0 and 10.", "input": "", "output": "#include <iostream> \n#include <cstdlib> \n#include <ctime> \nusing namespace std; \n\nint randomIntGenerator() \n{ \n   // Setting the seed \n   srand(time(0)); \n\n   // Generating random integer \n   return (rand()%11); \n}", "category": "Python"}, {"instruction": "Using the following code, clean up the bugs and make sure the output functions correctly.", "input": "def example_func(lst):\n   for element in lst:\n      if (type(element) == int):\n         lst.append(element + 5)\n   return lst\n \nexample_func([1, 2, \"hello\"])", "output": "def example_func(lst):\n   output_lst = []\n   for element in lst:\n      if (type(element) == int):\n         output_lst.append(element + 5)\n   return output_lst\n \nexample_func([1, 2, \"hello\"])", "category": "Python"}, {"instruction": "How to print the elements of a two-dimensional array in C?", "input": "", "output": "We can use nested loops to print the elements of a two-dimensional array in C. The outer loop iterates over the rows, while the inner loop iterates over the columns. For example, the following code snippet prints the elements of a two-dimensional array: \n \nint array[3][3] = {{1,2,3},{4,5,6},{7,8,9}};\nfor (int i=0; i<3; i++)\n{   \n    for(int j=0; j<3; j++) \n    {\n        printf(\"%d \", array[i][j]); \n    }\n    printf(\"\\n\");\n}", "category": "Python"}, {"instruction": "Read the JSON string below and convert it into a dictionary.", "input": "jsonString = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'", "output": "import json\n\njsonObject = json.loads(jsonString)\ndictionary = dict(jsonObject)\nprint(dictionary)", "category": "Python"}, {"instruction": "Write a Python function to calculate the factorial of a number (a non-negative integer).", "input": "", "output": "def factorial(num):\n    \"\"\"\n    Calculates factorial of a given number.\n    \"\"\"\n    # Base case\n    if num == 0:\n        return 1\n    # Recursion\n    else:\n        return num * factorial(num-1)", "category": "Python"}, {"instruction": "Create a quick-sort algorithm in Python.", "input": "", "output": "def quick_sort(arr):\n    \"\"\"Sort a list of numbers in ascending order using the Quick-Sort algorithm\"\"\"\n    if len(arr) == 0:\n        return []\n\n    pivot = arr[0]\n    left_arr = [x for x in arr if x < pivot]\n    right_arr = [x for x in arr if x > pivot]\n    return quick_sort(left_arr) + [pivot] + quick_sort(right_arr)", "category": "Python"}, {"instruction": "Create a program that finds all the prime numbers less than or equal to a given number.", "input": "", "output": "def find_primes(num):\n    \"\"\"Find all the prime numbers less than or equal to a given number.\"\"\"\n    primes = []\n    for i in range(2, num + 1):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes", "category": "Python"}, {"instruction": "Write a JavaScript function to validate a given URL.", "input": "", "output": "function isValidURL(url) {\n    const regex = /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/;\n    return regex.test(url);\n}", "category": "Python"}, {"instruction": "Write a Python program to print out an ASCII art of a given word.", "input": "word = \"happy\"", "output": "def draw_word(word):\n    art = \"\"\"\n                 __\n           _   /  \\\\\n           \\\\_/\\_/\\_/\n           /    |\n           \\___/\n          \\\\\\\\_//\n           \\/ \\/\n            \\/\n        \"\"\"\n    for letter in word:\n        art += \"  \" + letter\n    print(art)", "category": "Python"}, {"instruction": "Write a Javascript function to determine if the given number is an even number or not.", "input": "", "output": "function isEven(num) {\nreturn num % 2 === 0;\n}", "category": "Python"}, {"instruction": "Write a Python program to get the day of week from a given date and time.", "input": "from datetime import datetime\ndate = datetime(2020, 4, 20, 19, 15, 0)", "output": "from datetime import datetime\n\ndef get_day_of_week(date):\n    return date.strftime(\"%A\")", "category": "Python"}, {"instruction": "Write a Python program to split a string on a given character separator.", "input": "mystring = \"Hello, World!\"\nseparator = \",\"", "output": "def split(mystring, separator):\n    return mystring.split(separator)", "category": "Python"}, {"instruction": "Create a function to calculate the maximum of two numbers.", "input": "", "output": "def max_of_two(x, y):\n    if x > y:\n        return x\n    else:\n        return y", "category": "Python"}, {"instruction": "Write a SQL query to find all the users in a database with age greater than 25.", "input": "", "output": "SELECT * FROM users WHERE age > 25", "category": "Python"}, {"instruction": "Develop an algorithm to find the value of n where n is the index of the Fibonacci sequence.", "input": "", "output": "def nth_fibonacci_number(n):\n    \"\"\"Find the value of n where n is the index of the Fibonacci Sequence.\"\"\" \n    if n < 2:\n        return n \n    elif n == 2:\n        return 1\n    else:\n        return nth_fibonacci_number(n-1) + nth_fibonacci_number(n-2)", "category": "Python"}, {"instruction": "Find the second smallest element in an integer array of size n.", "input": "array = [4, 5, 8, 2, 9, 13]", "output": "def second_smallest(array):\n\nsmallest = min(array)\nsecond_smallest = float('inf')\n\nfor num in array:\n    if num > smallest and num < second_smallest:\n        second_smallest = num\n        \nreturn second_smallest", "category": "Python"}, {"instruction": "Create a program that can calculate the distance between two points in three-dimensional space.", "input": "point1 = (1, 5, 9)\npoint2 = (4, 2, 8)", "output": "def dist_points_3d(point1, point2):\n    \"\"\"Calculate the distance between two points in three-dimensional space.\"\"\"\n    distance = ((point1[0] - point2[0]) ** 2 + \n                (point1[1] - point2[1]) ** 2 + \n                (point1[2] - point2[2]) ** 2) ** 0.5\n    return distance", "category": "Python"}, {"instruction": "Create a program that can filter out words of a string that contain a specific character.", "input": "string = \"This is a sentence\"\ncharacter = 's'", "output": "def filter_string(string, character):\n    \"\"\"Filter out words of a string that contain a specific character.\"\"\"\n    words = string.split(' ')\n    filtered_words = []\n    for word in words:\n        if character not in word:\n            filtered_words.append(word)\n    return ' '.join(filtered_words)", "category": "Python"}, {"instruction": "FOr a given list, create a program that prints out the standard deviation of the elements in the list.", "input": "list = [1, 4, 9, 16]", "output": "def std_dev(list):\n    \"\"\"Print the standard deviation of elements in a given list.\"\"\"\n    numerator = 0\n    mean = sum(list) / len(list)\n    for num in list:\n        numerator += (num - mean) ** 2\n    sd = (numerator / (len(list) - 1)) ** 0.5\n    return sd", "category": "Python"}, {"instruction": "Design an algorithm that creates a random password of 8 characters.", "input": "", "output": "def generate_password():\n    \"\"\"Generate a random password of 8 characters.\"\"\"\n    import random\n    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()'\n    password = ''\n    for i in range(8):\n        password += random.SystemRandom().choice(chars)\n    return password", "category": "Python"}, {"instruction": "Write a function that takes in a matrix of numbers and reverses the order of the rows and columns.", "input": "matrix = [[1, 2, 3], \n          [4, 5, 6], \n          [7, 8, 9]\n         ]", "output": "def reverse_matrix(matrix):\n    \"\"\"Reverse the order of the rows and columns in a matrix of numbers.\"\"\"\n    reversed_matrix = [[0 for i in range(len(matrix[0]))] for j in range(len(matrix))]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            reversed_matrix[j][i] = matrix[i][j]\n    return reversed_matrix", "category": "Python"}, {"instruction": "Design an algorithm that takes a list of strings and returns the longest string.", "input": "list = [\"cat\", \"dog\", \"lion\", \"bird\"]", "output": "def find_longest(list):\n    \"\"\"Return the longest string from a list of strings.\"\"\" \n    longest = list[0]\n    for item in list:\n        if len(item) > len(longest):\n            longest = item\n    return longest", "category": "Python"}, {"instruction": "Write a function that takes in a list of numbers and prints out the greatest number.", "input": "list = [8, 2, 14, 25]", "output": "def find_greatest(list):\n    \"\"\"Print out the greatest number from a list of numbers.\"\"\"\n    greatest = list[0]\n    for num in list:\n        if num > greatest:\n            greatest = num\n    print('The greatest number is: ', greatest)", "category": "Python"}, {"instruction": "Create a program that ciphers a given text using the caesar cipher.", "input": "text = \"This is a secret message\"\nkey = 3", "output": "def caesar_cipher(text, key):\n    \"\"\"Cipher a given text using the Caesar Cipher.\"\"\"\n    ciphertext = \"\"\n    for char in text: \n        if not char.isalpha():\n            ciphertext += char\n            continue\n        offset = ord('a') if char.islower() else ord('A')\n        new_char = (ord(char) - offset + key) % 26\n        ciphertext += chr(offset + new_char)\n    return ciphertext", "category": "Python"}, {"instruction": "Code an algorithm to reverse an array of integers.", "input": "[1, 3, 4, 6, 8]", "output": "def reverse_array(arr):\n    left_index = 0\n    right_index = len(arr) - 1\n\n    while left_index < right_index:\n        arr[left_index], arr[right_index] = arr[right_index], arr[left_index]\n        left_index += 1\n        right_index -= 1\n    return arr\n\nif __name__ == \"__main__\":\n    print(reverse_array([1, 3, 4, 6, 8]))", "category": "Python"}, {"instruction": "Write a function that takes a string and returns a boolean based on whether the string is a palindrome or not.", "input": "", "output": "def is_palindrome(str):\n    \"\"\"\n    Checks if the given input string is a palindrome or not.\n    \"\"\"\n    return str == str[::-1]", "category": "Python"}, {"instruction": "Create a program which will take the user's name and output a custom message depending on the supplied name", "input": "name = 'John'", "output": "def greet_user(name):\n    \"\"\"\n    Greet the user with a custom message depending on the supplied name.\n    \"\"\"\n    if name == 'John':\n        print('Hey there John! Welcome back!')\n    elif name == 'Mary':\n        print('Good morning Mary! How are you doing today?')\n    else:\n        print('Hi there! Welcome to our service!')", "category": "Python"}, {"instruction": "Given the following array of dictionaries, write a function in Python to find and return the longest common prefix in the keys of dictionaries.", "input": "arr_of_dictionaries = [\n    {\n        \"name\": \"John Doe\",\n        \"country\": \"United States\"\n    },\n    {\n        \"name\": \"Jane Doe\",\n        \"state\": \"New York\"\n    }\n]", "output": "def longest_common_prefix(arr_of_dictionaries):\n    prefix = ''\n    if len(arr_of_dictionaries) == 0:\n        return prefix\n    first_dict_keys = arr_of_dictionaries[0].keys()\n    for i in range(len(list(first_dict_keys)[0])):\n        char = list(first_dict_keys)[0][i]\n        for dict in arr_of_dictionaries:\n            if list(dict.keys())[0][i] != char:\n                return prefix\n        prefix += char\n    return prefix", "category": "Python"}, {"instruction": "Write a Java program that takes two strings as inputs and checks if one string is a rotation of the other.", "input": "", "output": "import java.util.Arrays;\n \nclass GFG {\n \n    // Function to check if two strings are \n    // rotations of each other or not\n    static boolean areRotations(String str1, String str2)\n    {\n        // There lengths must be same and str2 should \n        // be a substring of str1 concatenated with \n        // str1.\n        return (str1.length() == str2.length())\n            && ((str1 + str1).indexOf(str2) != -1);\n    }\n \n    // Driver program \n    public static void main(String[] args) \n    {\n        String str1 = \"ABACD\";\n        String str2 = \"CDABA\";\n \n        if (areRotations(str1, str2))\n            System.out.println(\"Strings are rotations of each other\");\n        else\n            System.out.println(\"Strings are not rotations of each other\");\n    }\n}", "category": "Python"}, {"instruction": "Using the given list, create a function in Python that classifies each number as odd or even.", "input": "lst = [1, 2, 6, 8, 4]", "output": "def classifyList(lst):\n    result = []\n    for num in lst: \n        if num % 2 == 0: \n            result.append('even')\n        else:\n            result.append('odd')\n    return result", "category": "Python"}, {"instruction": "Given the following object, write a function in JavaScript to count the occurrences of each character in the object's values.", "input": "obj = {\n \"name\": \"John Doe\"\n}", "output": "function countOccurences(obj) {\n    let result = {};\n    for (let value of Object.values(obj)) {\n        for (let char of value) {\n            result[char] = result[char] + 1 || 1;\n        }\n    }\n    return result; \n}", "category": "Python"}, {"instruction": "Write a function in JavaScript that takes an integer n and returns the nth Fibonacci number.", "input": "", "output": "function Fibonacci(n) { \n  if (n <= 1) return n; \n  return Fibonacci(n-1) + Fibonacci(n-2); \n}", "category": "Python"}, {"instruction": "Edit the original code snippet so that it prints in the correct syntax for a Python 3 script.", "input": "#!/usr/bin/python\nprint \"Hello, World!\"", "output": "#!/usr/bin/python\nprint(\"Hello, World!\")", "category": "Python"}, {"instruction": "Sum all the prices in the list of dictionaries and output the result as an integer.", "input": "list_of_dictionaries = [{\"price\": 5}, {\"price\": 7}, {\"price\": 9}]", "output": "21", "category": "Python"}, {"instruction": "Calculate the mean of a list of numbers.", "input": "lst = [1, 2, 3, 4, 5]", "output": "def calculate_mean(lst):\n    return sum(lst) / len(lst)\n\nprint(calculate_mean([1, 2, 3, 4, 5]))", "category": "Python"}, {"instruction": "Create a function to generate the nth term in the Fibonacci sequence.", "input": "n = 3", "output": "def get_fib_term(n): \n    if n <= 1: \n        return n \n    else: \n        return get_fib_term(n-1) + get_fib_term(n-2)\n  \nprint(get_fib_term(3))", "category": "Python"}, {"instruction": "Given a list of strings, write a program to sort the strings in alphabetical order.", "input": "lst = [\"apple\", \"orange\", \"grapes\"]", "output": "def sort_in_alphabetical_order(lst): \n    lst.sort()\n    return lst\n\nprint(sort_in_alphabetical_order([\"apple\", \"orange\", \"grapes\"]))", "category": "Python"}, {"instruction": "Create a program to generate an XOR linked list.", "input": "", "output": "class Node: \n    def __init__(self, data): \n        self.data = data \n        self.npx = None\n  \nclass XORLinkedList: \n    def __init__(self): \n        self.head = None\n  \n    def add(self, item): \n        new_node = Node(item) \n        new_node.npx = self.head \n        if self.head is not None: \n            self.head.npx = new_node.npx ^ self.head.npx \n        self.head = new_node \n  \n    def printList(self): \n        temp = self.head \n        while(temp): \n            print(temp.data), \n            prev = temp \n            temp = self.XOR(temp.npx, prev) \n  \n    def XOR(self, a, b): \n        return (a or b) and (not a or not b) \n  \na = XORLinkedList() \na.add(2) \na.add(3) \na.add(4) \na.add(5) \na.printList()", "category": "Python"}, {"instruction": "Given an array, write a program that checks if any two numbers sum to 0.", "input": "arr = [-3, -2, 1, 2, 3]", "output": "def check_if_sum_zero(arr): \n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] + arr[j] == 0): \n                return True\n    return False\n\nprint(check_if_sum_zero([-3, -2, 1, 2, 3]))", "category": "Python"}, {"instruction": "Create an algorithm to sort a list of numbers in ascending order.", "input": "lst = [2, 5, 1, 7, 4]", "output": "def sort_list_ascending(lst):\n    # Traverse through all array elements \n    for i in range(len(lst)): \n  \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(lst)): \n            if lst[min_idx] > lst[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        lst[i], lst[min_idx] = lst[min_idx], lst[i] \n  \n    return lst\n  \n# Driver code to test above \nlst = [2, 5, 1, 7, 4] \nprint(sort_list_ascending(lst))", "category": "Python"}, {"instruction": "Given a list of numbers, write a function to find the largest value in the list.", "input": "lst = [1, 5, 9, 12, 8]", "output": "def get_largest_value(lst):\n    max_value = lst[0]\n    for num in lst:\n        if num > max_value:\n            max_value = num\n    return max_value\n\nprint(get_largest_value(lst))", "category": "Python"}, {"instruction": "Write a C++ code to find the greatest common divisor of two integers", "input": "", "output": "#include<iostream>\n\nusing namespace std;\n\nint gcd(int first, int second) {\n    // Base case\n    if (second == 0)\n        return first;\n    \n    return gcd(second, first % second);\n}\n\nint main() {\n    // Define two integers\n    int first = 10;\n    int second = 20;\n    \n    cout << \"The greatest common divisor of \" << first << \" and \" << second << \" is \" << gcd(first, second) << endl;\n\n    return 0;\n}", "category": "Python"}, {"instruction": "Write a function in Java that takes a string consisting of brackets and output true if the brackets are properly nested, else output false.", "input": "", "output": "public static boolean isBalanced(String str) \n{ \n    if(str.length() == 0) \n        return true; \n      \n    Stack<Character> stack  = new Stack<Character>(); \n  \n    for(int i = 0; i < str.length(); i++) \n    { \n        char current = str.charAt(i); \n          \n        if(current == '{' || current == '(' || current == '[') \n        { \n        stack.push(current); \n        } \n  \n        if(current == '}' || current == ')' || current == ']') \n        { \n            if(stack.isEmpty()) \n                return false; \n  \n            char last = stack.peek(); \n            if(current == '}' && last == '{' || current == ')' && last == '(' || current == ']' && last == '[') \n                stack.pop(); \n            else \n                return false; \n        }\n    } \n \n    return stack.isEmpty(); \n}", "category": "Python"}, {"instruction": "Given a string and a set of delimiters, write a function in JavaScript to split the string.", "input": "string = \"Hello, world!\"\ndelimiters = [\" \", \",\", \"-\", \"!\"]", "output": "function splitStringWithDelimiters (string, delimiters) { \n  let result = []; \n  let s = string; \n  while (s.length > 0) { \n    let char = s[0]; \n    if (delimiters.includes(char)) { \n      s = s.substr(1); \n    } else { \n      let index = 0; \n      for (const delimiter of delimiters) { \n        if (s.indexOf(delimiter) > 0 && s.indexOf(delimiter) < index) { \n          index = s.indexOf(delimiter); \n        } \n      } \n      if (index === 0) { \n        index = s.length; \n      } \n      result.push(s.substr(0, index)); \n      s = s.substr(index); \n    } \n  } \n  return result; \n}", "category": "Python"}, {"instruction": "Create an array in Java with 10 floating-point values and output the average of these values.", "input": "", "output": "// Create an array \nfloat arr[] = {1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.1};\n\n// Calculate average \nfloat sum = 0;\nfor (int i = 0; i < 10; i++) {\n    sum += arr[i];\n}\n\nfloat average = sum / 10;\nSystem.out.println(\"Average of the array values: \" + average);", "category": "Python"}, {"instruction": "Find the power of a number using an iterative approach in Java.", "input": "", "output": "public static int power(int base, int exp) \n{ \n    int result = 1; \n    while (exp != 0) \n    { \n        result *= base; \n        --exp; \n    } \n    return result; \n}", "category": "Python"}, {"instruction": "Write an SQL query to display all the employee names in the 'students' table.", "input": "", "output": "SELECT name FROM students;", "category": "Python"}, {"instruction": "Find the index of the number 23 in the given array.", "input": "[78, 82, 6, 23, 77, 57, 88]", "output": "3", "category": "Python"}, {"instruction": "Concisely describe how a Linked List works.", "input": "", "output": "A linked list is a linear data structure in which each node is comprised of a data element as well as a pointer to the next node in the list. This allows it to form a chain, with each node pointing to the next node in the list and the last node pointing to null.", "category": "Python"}, {"instruction": "Using an object-oriented programming language, create a class that has two methods - one to calculate the area of a circle and another to calculate the circumference.", "input": "", "output": "class Circle():\n    def __init__(self, radius):\n        self.radius = radius\n    def area(self): \n        return self.radius ** 2 * 3.14 \n    def circumference(self): \n        return 2 * self.radius * 3.14", "category": "Python"}, {"instruction": "Sort a list of 5 numbers in descending order.", "input": "[123, 45, 287, 398, 135]", "output": "[398, 287, 135, 123, 45]", "category": "Python"}, {"instruction": "Create a function to check whether a number entered is prime or not.", "input": "", "output": "def is_prime(number):\n   # If given number is greater than 1\n   if number > 1:\n       # Iterate from 2 to n / 2\n       for i in range(2, number//2):\n           # If num is divisible by any number between \n           # 2 and n / 2, it is not prime\n           if (number % i) == 0:\n               return False\n       else:\n           return True\n# If the number is less than or equal to 1\n   else:\n       return False", "category": "Python"}, {"instruction": "Create a HTML page with 3 sections, using div tags.", "input": "", "output": "<div>\n  <div id=\"section1\"> Section 1... </div> \n  <div id=\"section2\"> Section 2... </div> \n  <div id=\"section3\"> Section 3... </div>\n</div>", "category": "Python"}, {"instruction": "Design a function to remove duplicates from an array", "input": "", "output": "def remove_duplicates(arr):\n    # Stores the unique elements\n    unique = []\n\n    # Iterate through the array\n    for elem in arr:\n        # If the element is not already in the unique list\n        if elem not in unique:\n            # Add it to the unique list\n            unique.append(elem)\n\n    # Return the array without duplicates\n    return unique", "category": "Python"}, {"instruction": "Create a loop to print hello world 5 times.", "input": "", "output": "for (int i = 0; i < 5; i++){ \n  System.out.println(\"Hello World!\"); \n}", "category": "Python"}, {"instruction": "Create a function that takes a number and returns the sum of all its divisors.", "input": "", "output": "def get_divisor_sum(n):\n    divisor_sum = 0\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            divisor_sum += i\n    return divisor_sum", "category": "Python"}, {"instruction": "Create function to return the cube of a number.", "input": "", "output": "def cube_number(x):\n    return x**3", "category": "Python"}, {"instruction": "Develop a function to swap the position of two elements in an array.", "input": "", "output": "def swap_elements(arr, i, j):\n    arr[i], arr[j] = arr[j], arr[i]\n    return arr", "category": "Python"}, {"instruction": "Create a code that sorts element in an array.", "input": "", "output": "def sort_elements(arr):\n    return sorted(arr)", "category": "Python"}, {"instruction": "Make a code to determine whether a given number is prime or not.", "input": "", "output": "def is_prime(x):\n    for i in range(2,int(x**0.5)+1):\n        if x % i == 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Create a program to count the total characters in a string.", "input": "", "output": "def count_string_characters(string):\n    return len(string)", "category": "Python"}, {"instruction": "Write a function in Python that takes a string and a set of characters as inputs and removes all characters in the string that are in the set.", "input": "string = \"Hello, world!\"\ncharset = [\"o\", \"!\"]", "output": "def removeChars(string, charset):\n\tresult = \"\"\n\tfor c in string:\n\t\tif c not in charset:\n\t\t\tresult += c\n\treturn result", "category": "Python"}, {"instruction": "Write an SQL query to select all entries from the \"Users\" table.", "input": "", "output": "SELECT * FROM Users;", "category": "Python"}, {"instruction": "Convert the given string to uppercase.", "input": "Hello World", "output": "HELLO WORLD", "category": "Python"}, {"instruction": "Create a class Employee with constructor to initialize the instance variables _name and _age", "input": "", "output": "class Employee {\n    \n    private String _name;\n    private int _age;\n    \n    public Employee(String name, int age) {\n        this._name = name;\n        this._age = age;\n    }\n    \n    public String getName() {\n        return _name;\n    }\n    \n    public int getAge() {\n        return _age;\n    }\n}", "category": "Python"}, {"instruction": "Write a code to implement Selection Sort in Java", "input": "", "output": "public class SelectionSort {\n    public static void sort(int[] arr) {\n        int n = arr.length;\n \n        // One by one move boundary of unsorted subarray\n        for (int i = 0; i < n-1; i++)\n        {\n            // Find the minimum element in unsorted array\n            int min_idx = i;\n            for (int j = i+1; j < n; j++)\n                if (arr[j] < arr[min_idx])\n                    min_idx = j;\n \n            // Swap the found minimum element with the first\n            // element\n            int temp = arr[min_idx];\n            arr[min_idx] = arr[i];\n            arr[i] = temp;\n        }\n    }\n}", "category": "Python"}, {"instruction": "Explain the following CSS rule.", "input": "p {\n  font-size: 20px;\n  font-weight: bold;\n}", "output": "The CSS rule will assign a font size of 20px and a font weight of bold to all paragraph elements. It will make the text in any \"p\" element display in a bold font with a font size of 20px.", "category": "Python"}, {"instruction": "Create a new array in JavaScript containing only even numbers from the given input array.", "input": "Array: [3,7,10,6,23]", "output": "let evenArray = [3,7,10,6,23].filter(num => num % 2 == 0); \n//evenArray: [10,6]", "category": "Python"}, {"instruction": "Write a JavaScript function that takes a single parameter and returns a string.", "input": "Parameter: num (integer) = 3", "output": "function getString(num) { \n  return \"The number is \" + num; \n}", "category": "Python"}, {"instruction": "Convert the following code from Swift to Java.", "input": "let age = 25", "output": "int age = 25;", "category": "Python"}, {"instruction": "Write a MongoDB query that returns all the records that have a \u201cname\u201d field set to \u201cJohn\u201d", "input": "", "output": "db.collection. find({\"name\": \"John\"})", "category": "Python"}, {"instruction": "Explain the purpose of the following CSS selector.", "input": ".main a", "output": "The purpose of the CSS selector \".main a\" is to select all links (anchor tags, \"a\") that are descendants of the element with class name \"main\".", "category": "Python"}, {"instruction": "Classify the given code as either functional programming or object-oriented programming.", "input": "def double(x):\n  return x * 2", "output": "The given code is an example of functional programming.", "category": "Python"}, {"instruction": "Debug the given SQL query.", "input": "SELECT Name, COUNT(*) \nFROM Employees\nGROUP BY Name", "output": "SELECT Name, COUNT(*) \nFROM Employees\nGROUP BY Name\nHAVING COUNT(*) > 1;", "category": "Python"}, {"instruction": "Determine the output of the given Python code.", "input": "x = [1, 2, 3, 4, 5] \ny = x \ny[2] = 6", "output": "The output of the given Python code is [1, 2, 6, 4, 5].", "category": "Python"}, {"instruction": "Write an SQL query to find the second highest salary of an employee.", "input": "", "output": "SELECT MAX(Salary) \nFROM Employee \nWHERE Salary NOT IN (SELECT MAX(Salary) FROM Employee);", "category": "Python"}, {"instruction": "Write a Python code to calculate the sum of natural numbers up to n.", "input": "", "output": "def n_sum(n):\n    sum = 0\n    for i in range(n+1):\n        sum += i\n    return sum", "category": "Python"}, {"instruction": "Create an HTML form to accept the user's name, email, phone number and address.", "input": "", "output": "<form>\n  <input type=\"text\" name=\"name\" placeholder=\"Name\" required><br>\n  <input type=\"email\" name=\"email\" placeholder=\"Email\" required><br>\n  <input type=\"tel\" name=\"phone\" placeholder=\"Phone Number\" required><br>\n  <textarea name=\"address\" placeholder=\"Address\" required></textarea><br>\n  <input type=\"submit\">\n</form>", "category": "Python"}, {"instruction": "Given an array of integers, write an algorithm to find the first repeating element.", "input": "[2, 5, 1, 2, 3, 5]", "output": "int findFirstRepeating(int arr[], int n) \n{ \n    unordered_set<int> s; \n  \n    for (int i = 0; i < n; i++) { \n        if (s.find(arr[i]) != s.end()) \n            return arr[i];         \n        s.insert(arr[i]); \n    }  \n  \n    return -1; \n}", "category": "Python"}, {"instruction": "Write a JavaScript code to check if a string is a valid email address.", "input": "", "output": "function validateEmail(email) \n{\n\tvar re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\treturn re.test(String(email).toLowerCase());\n}", "category": "Python"}, {"instruction": "Write a SQL query to display all products in the database which have not been sold yet.", "input": "", "output": "SELECT * FROM Products WHERE product_id NOT IN (SELECT product_id FROM Sales);", "category": "Python"}, {"instruction": "Create a for loop in Java that iterates over the given array and prints the values.", "input": "Array: int[] arr = {1, 2, 3, 4, 5};", "output": "for (int i = 0; i < arr.length; i++) { \n  System.out.println(arr[i]); \n}", "category": "Python"}, {"instruction": "Convert the following SQL query to MongoDB.", "input": "SELECT * FROM Customers WHERE age > 30", "output": "db.customers.find({\"age\" : {\"$gt\": 30}})", "category": "Python"}, {"instruction": "Edit the given HTML so that it renders as a centered, level-two heading.", "input": "<h1>Heading Text</h1>", "output": "<h2 style=\"text-align: center;\">Heading Text</h2>", "category": "Python"}, {"instruction": "Rewrite the given JavaScript code in Python.", "input": "let array = [0,1,2,3];\n  const newArray = array.map(item => item + 3);", "output": "array = [0,1,2,3]\nnew_array = list(map(lambda item: item + 3, array))", "category": "Python"}, {"instruction": "Update the following code to use a while loop instead of a for loop", "input": "`# Define an array\narr = [1, 2, 3, 4]\n\n# Iterate over the array and print each element\nfor i in arr:\n    print(i)`", "output": "# Define an array\narr = [1, 2, 3, 4]\n\n# Initialize the index\ni = 0\n\n# Iterate over the array and print each element\nwhile i < len(arr):\n    print(arr[i])\n    i += 1", "category": "Python"}, {"instruction": "Calculate the sum of the numbers in the array [1, 5, 7, 10]", "input": "", "output": "# Define the array\narr = [1, 5, 7, 10]\n\n# Calculate the sum\nsum = sum(arr)\n\n# Print the result\nprint(\"The sum of the numbers in the array is \" + str(sum) + \".\")", "category": "Python"}, {"instruction": "Correct the following HTML code to remove mistakes and indentation errors", "input": "`<html><head><title>My Site</title></head>\n <body>\n   <h1>Welcome!</h1><p>My website\n </body>\n </html>`", "output": "<html>\n  <head>\n    <title>My Site</title>\n  </head>\n  <body>\n    <h1>Welcome!</h1>\n    <p>My website</p>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a Python program to print out the Fibonacci sequence up to 20 numbers", "input": "", "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b \n\n# Driver Program \nprint(\"Fibonacci sequence:\") \nfor i in range(20): \n    print(fibonacci(i))", "category": "Python"}, {"instruction": "Parse the following JSON and extract the value of the variable 'price'.", "input": "`{\n \"item\": \"Shoes\",\n \"price\": 125\n}`", "output": "import json \n\n# parse the JSON string\ndata = json.loads(input_json)\n\n# extract the value of the price variable\nprice = data['price']", "category": "Python"}, {"instruction": "Write the SQL query to delete all records from the table 'Customer'", "input": "", "output": "DELETE FROM Customer;", "category": "Python"}, {"instruction": "Design a class Car with a constructor to initialize the variables _type, _year and _color", "input": "", "output": "class Car:\n    \n    def __init__(self, type, year, color):\n        self._type = type\n        self._year = year\n        self._color = color", "category": "Python"}, {"instruction": "Write a query to find out the maximum salary earned by an employee", "input": "", "output": "SELECT MAX(salary)\nFROM Employees;", "category": "Python"}, {"instruction": "Create a program in JavaScript to check if two strings are anagrams.", "input": "", "output": "// Function to check if two strings are anagrams\nconst isAnagram = (string1, string2) => {\n  // Check if string lengths are the same\n  let string1Arr = string1.split('').sort();\n  let string2Arr = string2.split('').sort();\n  if (string1Arr.length !== string2Arr.length) return false;\n  \n  // Compare each character in the strings\n  for (let i = 0; i < string1Arr.length; i++) {\n    if (string1Arr[i] !== string2Arr[i]) return false;\n  }\n  \n  // Return true if all characters match\n  return true;\n}", "category": "Python"}, {"instruction": "Construct a query in PostgreSQL to delete all the rows from a table.", "input": "", "output": "DELETE FROM table_name;", "category": "Python"}, {"instruction": "Create a function in Python to evaluate if a given number is prime.", "input": "", "output": "def is_prime(num):\n    if num <= 1: \n        return False\n    for i in range(2, num//2 + 1): \n        if num % i == 0: \n            return False\n    return True", "category": "Python"}, {"instruction": "Write a code to find the maximum subarray sum in an array using dynamic programming.", "input": "", "output": "def maxSubArraySum(arr): \n    n = len(arr) \n  \n    max_so_far = -float('inf') \n    max_ending_here = 0\n  \n    for i in range(0, n): \n        max_ending_here = max_ending_here + arr[i] \n        if (max_so_far < max_ending_here): \n            max_so_far = max_ending_here \n  \n        if max_ending_here < 0: \n            max_ending_here = 0   \n    return max_so_far", "category": "Python"}, {"instruction": "Create a function in Java to find the larger of two integers.", "input": "", "output": "public static int max(int x, int y) {\n    if (x > y)\n      return x;\n    else \n      return y;\n}", "category": "Python"}, {"instruction": "Implement a function in Python to convert a string containing dates from the format MM/DD/YYYY to DD-MM-YYYY.", "input": "\"02/20/2020\"", "output": "def mmddyyyy2ddmmyyyy(date_string):\n    if len(date_string) != 10:\n        raise ValueError('Invalid date format')\n    mm, dd, yyyy = date_string.split('/')\n    new_date_string = '{}-{}-{}'.format(dd, mm, yyyy)\n    return new_date_string", "category": "Python"}, {"instruction": "Create a program in Java to print out the Fibonacci sequence of numbers up to 10.", "input": "", "output": "public class Fibonacci {\n\n  public static void main(String[] args) {\n    int n1=0,n2=1,n3,i,count=10;\n    System.out.print(n1+\" \"+n2);\n    \n    for(i=2;i<count;++i) {\n      n3=n1+n2;\n      System.out.print(\" \"+n3);\n      n1=n2;\n      n2=n3;\n    }   \n  }\n}", "category": "Python"}, {"instruction": "Create a SQL query to calculate the count of each type of book in a library.", "input": "Noinput", "output": "SELECT books.type, COUNT(*) AS book_count\nFROM books\nGROUP BY books.type;", "category": "Python"}, {"instruction": "Construct a query in PostgreSQL to find the names and emails of all users who have \"google.com\" in their emails.", "input": "", "output": "SELECT name, email\nFROM users\nWHERE email LIKES '%google.com%';", "category": "Python"}, {"instruction": "Create a function in HTML to display a blinking text on the webpage.", "input": "", "output": "<script> \nfunction blink() { \n    var text = document.getElementById('blink');\n    text.style.visibility = (text.style.visibility == 'hidden' ? '' : 'hidden');\n    setTimeout(\"blink()\", 500); \n} \nblink();\n</script> \n<span id=\"blink\">Text to blink</span>", "category": "Python"}, {"instruction": "Create a program in Python that calculates the average of numbers in a list.", "input": "[9, 5, 10, 12]", "output": "def average(numbers):\n    return sum(numbers) / len(numbers)\n\nprint(average([9, 5, 10, 12]))   # Output: 9.5", "category": "Python"}, {"instruction": "Write a C++ program that prints out the prime numbers up to 100.", "input": "", "output": "#include <iostream> \nusing namespace std; \n  \nvoid printPrimeNumber(int n) \n{ \n    int flag; \n  \n    for (int i = 2; i <=n; i++) { \n        flag = 0; \n        for (int j = 2; j < i; j++) { \n            if (i % j == 0) { \n                flag = 1; \n                break; \n            } \n        } \n        if (flag == 0) \n            cout << i << \" \"; \n    } \n} \n  \nint main() \n{ \n    int n = 100; \n    printPrimeNumber(n); \n    return 0; \n}", "category": "Python"}, {"instruction": "Use the Gaussian algorithm to learn the optimal parameters of a 2D linear regression model.", "input": "Training dataset: {(x1,y1), (x2,y2), (x3,y3)}", "output": "def gaussian(x, y):\n    n = len(x)\n    l = np.linalg.inv(np.dot(x.T, x))\n    k = np.dot(x.T, y)\n    return np.dot(l, k).T", "category": "Python"}, {"instruction": "Edit a python function to generate the fibonacci sequence.", "input": "def fibonacci(n):\n    a = 1\n    b = 0\n    for i in range(n):\n        print(a)\n        a, b = b, a+b", "output": "def fibonacci(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        print(a)\n        a, b = b, a+b", "category": "Python"}, {"instruction": "Write an API to return the average transaction amount of a customer.", "input": "", "output": "@app.route('/get_average_transaction_amount', methods=['GET'])\ndef get_average_transaction_amount():\n    customer_id = request.args.get('customer_id')\n    query = \"SELECT AVG(transaction_amount) FROM transactions WHERE customer_id = %s\"\n    result = db.query(query, customer_id)\n    return jsonify(result)", "category": "Python"}, {"instruction": "Create a loop to traverse a given binary tree.", "input": "", "output": "def traverse_tree(root):\n\n    # Initialize the stack\n    stack = [root]\n\n    # traversal loop\n    while stack:\n        node = stack.pop()\n\n        # Do something with the node\n        ...\n\n        # Push the left and right nodes to the stack\n        if node.right:\n            stack.append(node.right)\n        if node.left:\n            stack.append(node.left)", "category": "Python"}, {"instruction": "Use the back-propagation algorithm to learn the weights of a given neural network.", "input": "", "output": "# Initialize weights with random values & weights\nweights = np.random.uniform(-1,1, (num_nodes, num_inputs))\nbias = np.random.uniform(-1,1, num_nodes)\n\n#Forward pass\nwhile True:\n    \n    # Compute a_L and estimated output y_hat\n    a_L, y_hat = compute_forward_pass(x, weights, bias)\n    \n    # Compute the loss\n    loss = compute_loss(y_hat, y)\n    \n    # Compute delta and derivatives\n    delta = compute_delta(a_L, y)\n    weights_derivatives, bias_derivatives = compute_derivatives(x, a_L, delta)\n\n    # Update the weights\n    weights -= learning_rate * weights_derivatives\n    bias -= learning_rate * bias_derivatives", "category": "Python"}, {"instruction": "Create a project in random forest to learn the target variable given a set of predictor variables.", "input": "predictor_vars = [\"age\", \"occupation\"]\ntarget_var = \"income\"", "output": "from sklearn.ensemble import RandomForestRegressor\n\n# Initialize the model\nmodel = RandomForestRegressor()\n\n# Train the model using the predictor variables\nmodel.fit(predictor_vars, target_var)", "category": "Python"}, {"instruction": "Write a regular expression to validate a given string of IP addresses.", "input": "", "output": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$", "category": "Python"}, {"instruction": "Create an if-else statement to classify a given number into an even or an odd.", "input": "", "output": "if (num % 2 == 0):\n    print(\"Even\")\nelse:\n    print(\"Odd\")", "category": "Python"}, {"instruction": "Create a loop to iterate over characters in a given string.", "input": "Sample string s = \"Hello World\"", "output": "for char in s:\n    print(char)", "category": "Python"}, {"instruction": "Generate a function to multiply two integers.", "input": "", "output": "def multiply_ints(x, y): \n    return x * y", "category": "Python"}, {"instruction": "Design a program to find the occurrence of a given character in a given string.", "input": "Given string: \"Hello World!\"\nCharacter to find: o", "output": "def occurance_count(str, char):\n    count = 0\n    for c in str:\n        if c == char:\n            count += 1\n    \n    return count", "category": "Python"}, {"instruction": "Design a program to find the nth Fibonacci number.", "input": "n: 10", "output": "def nth_fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        n1, n2 = 1, 1\n        for i in range(2, n):\n            n1, n2 = n2, n1 + n2\n        return n2", "category": "Python"}, {"instruction": "Write a script to delete an element from an array given its index.", "input": "Given array: [1, 2, 3, 4]\nIndex of element to delete: 1", "output": "def delete_element(lst, index):\n    del lst[index]\n    return lst", "category": "Python"}, {"instruction": "Design a program to find the intersection of two given arrays.", "input": "list_one=[5, 10, 15, 20, 25]\nlist_two=[15, 17, 20, 22, 25, 27]", "output": "def intersection(list_one, list_two):\n    lst = []\n    for i in list_one:\n        if i in list_two:\n            lst.append(i)\n    return lst", "category": "Python"}, {"instruction": "Write a script to generate the Fibonacci sequence up to a certain number.", "input": "Number of elements to generate: 10", "output": "def fibonacci_sequence(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        lst = [1, 1]\n        while len(lst) < n:\n            lst.append(lst[-1] + lst[-2])\n        return lst", "category": "Python"}, {"instruction": "Create an HTML page to display a table of students", "input": "Data of students: First name, LastName and Age", "output": "<html>\n  <head> <title>My Student Table </title> </head>\n  <body>\n    <table>\n      <thead>\n        <tr>\n          <th>First Name</th>\n          <th>Last Name</th>\n          <th>Age</th>\n        </tr>\n      </thead>\n      <tbody>\n        {% for firstName, lastName, age in studentsList %}\n          <tr>\n            <td>{{ firstName }}</td>\n            <td>{{ lastName }}</td>\n            <td>{{ age }}</td>\n          </tr>\n        {% endfor %}\n      </tbody>\n    </table>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Add the code for a sleep() function to the following script.", "input": "#This script will be used to write a status update in Slack.\nimport os\n\ndef update_status(message):\n    os.system('curl -X POST --data '{ \"text\": \"' + message + '\"}'' .....)", "output": "#This script will be used to write a status update in Slack.\nimport os\nimport time\n\ndef update_status(message):\n    os.system('curl -X POST --data '{ \"text\": \"' + message + '\"}'' .....)\n    time.sleep(1)", "category": "Python"}, {"instruction": "Write a JavaScript function to check whether a given number is odd or even.", "input": "num = 21", "output": "function isEvenNumber(num) {\n  return num % 2 === 0;\n}\n\nlet result = isEvenNumber(21);\nconsole.log(result); //false", "category": "Python"}, {"instruction": "Explain what a for loop does in Python.", "input": "", "output": "A for loop in Python is used to iterate over a sequence (list, tuple, string) or other iterable objects. It executes a set of statements specified in the for loop for each item of the sequence. It makes it easier to write and execute code multiple times without having to write the same code multiple times.", "category": "Python"}, {"instruction": "Group a list of dictionaries by a shared key.", "input": "mylist = [{'name': 'john', 'age': 20}, {'name': 'jane', 'age': 19}, {'name': 'bob', 'age': 22}]", "output": "from collections import defaultdict\n\ngrouped_dicts = defaultdict(list)\n\nfor x in mylist:\n grouped_dicts[x['name']].append(x)", "category": "Python"}, {"instruction": "Convert a string to all lowercase using the built-in string method.", "input": "string = \"This Is A String\"", "output": "lowercase_string = string.lower()\nprint(lowercase_string)", "category": "Python"}, {"instruction": "Calculate the sum of all the numbers in a list named 'mylist'.", "input": "mylist = [1,2,3,4,5]", "output": "total_sum = 0\nfor num in mylist:\n total_sum += num\nprint(total_sum)", "category": "Python"}, {"instruction": "Initialize an empty list in Python and then add three items to it.", "input": "", "output": "my_list = []\nmy_list.append(\"item1\")\nmy_list.append(\"item2\")\nmy_list.append(\"item3\")", "category": "Python"}, {"instruction": "Write a regular expression to extract all email addresses from a string.", "input": "string = \"My email address is john@doe.com and your email address is jane@doe.com\"", "output": "import re\n\nemails = re.findall(r\"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+\", string)\nprint(emails)", "category": "Python"}, {"instruction": "Use the 'requests' library to retrieve the HTML content of a website.", "input": "url = \"https://www.example.com\"", "output": "import requests\n\nhtml = requests.get(url).text", "category": "Python"}, {"instruction": "Create a class in Python called 'Car' and add instance variables for the car's make, model and year.", "input": "", "output": "class Car:\n    \n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year", "category": "Python"}, {"instruction": "Write a script to determine whether an element is present in a given array.", "input": "Given array: [1,2,5,7]\nNumber to find: 5", "output": "def element_in_array(lst, n): \n    for i in range(len(lst)): \n        if n == lst[i]: \n            return True \n    return False", "category": "Python"}, {"instruction": "Write a for-loop to print out the values from a list named 'mylist'", "input": "mylist = [1,2,3,4,5,6,7]", "output": "for i in mylist:\nprint(i)", "category": "Python"}, {"instruction": "Write a Python program to print out the list of even numbers from 0 to given limit.", "input": "limit = 10", "output": "# declare list of numbers\nnumbers = [x for x in range(0, limit+1)]\n\n# declare empty list of even numbers\neven_numbers = []\n\n# loop through list of numbers\nfor num in numbers:\n    # if number is even, append to even_numbers list\n    if num % 2 == 0:\n        even_numbers.append(num)\n\n# print even numbers\nprint(even_numbers) # Output: [0, 2, 4, 6, 8, 10]", "category": "Python"}, {"instruction": "Suggest an efficient data structure to store a list of words.", "input": "", "output": "A Trie (Prefix Tree) data structure is an efficient data structure for storing a list of words. It allows efficient insertion, deletion and search operations. It stores the words in a hierarchical structure by prefixing the words. This makes search operations very efficient since it involves only a single traversal of the Trie structure.", "category": "Python"}, {"instruction": "Complete the following code to shuffle an array of elements.", "input": "#Declaring an array\narr = [1, 2, 3, 4, 5]\n\n# Your code\ndef shuffle(arr):", "output": "#Declaring an array\narr = [1, 2, 3, 4, 5]\n\n# Your code\ndef shuffle(arr):  \n    for i in range(len(arr)-1, 0, -1): \n        j = random.randint(0, i+1)\n        arr[i], arr[j] = arr[j], arr[i] \n    return arr", "category": "Python"}, {"instruction": "Explain what API stands for and what it does.", "input": "", "output": "API stands for Application Programming Interface, which is a set of routines, protocols, and tools used to build software applications. It defines how two applications can interact with each other and allows for data to be exchanged between them. APIs provide developers with predefined sets of code which can be used to perform a variety of tasks and help developers build applications quickly and easily.", "category": "Python"}, {"instruction": "Suggest a better algorithm to find the minimum element in a given array.", "input": "", "output": "The better algorithm would be to use a divide and conquer approach. This approach involves splitting the array into two halves, finding the minimum element in each half and then comparing the two elements to determine the overall minimum. This is a faster algorithm than the linear search approach in which we traverse the array from start to end and compare each element with the current minimum.", "category": "Python"}, {"instruction": "Write a Java program to print the sum of all integers from 1 to given integer.", "input": "integer = 5", "output": "public class SumIntegers {\n \n    public static void main(String[] args) {\n        int n = 5;\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        System.out.println(\"Sum of integers from 1 to \"+n+\": \"+sum);\n    }\n \n}\n// Output: Sum of integers from 1 to 5: 15", "category": "Python"}, {"instruction": "Create an HTML table with 3 columns containing the given data.", "input": "Data:\nName | Age | Hobby\nAlice | 20 | Reading\nBob | 25 | Outdoor activities", "output": "<table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n    <th>Hobby</th>\n  </tr>\n  <tr>\n    <td>Alice</td>\n    <td>20</td>\n    <td>Reading</td>\n  </tr>\n  <tr>\n    <td>Bob</td>\n    <td>25</td>\n    <td>Outdoor activities</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Write a PHP program to find the largest number from an array.", "input": "array = [10, 25, 2, 39]", "output": "<?php\n$arr = array(10, 25, 2, 39);\n$max = $arr[0];\n \nforeach ($arr as $value) {\n   if ($value > $max) {\n      $max = $value;\n   }\n}\n \necho $max; // Output: 39\n?>", "category": "Python"}, {"instruction": "Use JavaScript to filter an array of numbers such that only even numbers are returned.", "input": "[1, 4, 6, 7, 8, 3, 10]", "output": "const arr = [1, 4, 6, 7, 8, 3, 10];\n\nconst evenArr = arr.filter(num => num % 2 == 0);\n\nconsole.log(evenArr); // Output: [4, 6, 8, 10]", "category": "Python"}, {"instruction": "Design a program to flatten a given list.", "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def flatten_list(lst):\n    res = []\n    for l in lst:\n        for i in l:\n            res.append(i)\n    return res", "category": "Python"}, {"instruction": "Rewrite the following code so it can take a list as input instead of an integer.", "input": "def list_sum(num):\n    total = 0\n    for x in range(num):\n        total += x\n    return total", "output": "def list_sum(input_list):\n    total = 0\n    for item in input_list:\n        total += item\n    return total", "category": "Python"}, {"instruction": "Formulate an SQL query to make this table:", "input": "Table: books\n\nbook_id | book_title | book_edition\n------------------------", "output": "CREATE TABLE books (\n    book_id INTEGER PRIMARY KEY,\n    book_title VARCHAR(50),\n    book_edition VARCHAR(50)\n);", "category": "Python"}, {"instruction": "Write a code to find the square of the first n numbers.", "input": "", "output": "def square_of_first_n_number(n):\n    \"\"\"Find the square of the first n numbers\"\"\"\n    \n    # Initialize an empty list\n    squares = []\n\n    # Iterate to the first n numbers\n    for i in range(n):\n        # Compute the square and append to the list\n        squares.append(i * i)\n\n    return squares", "category": "Python"}, {"instruction": "What is the next output when this code is executed?", "input": "i = 0 \nwhile (i < 5): \n    print(i, sep = \", \")\n    i += 1", "output": "0, 1, 2, 3, 4", "category": "Python"}, {"instruction": "For the following list, print out the second element.", "input": "list = [\"apple\", \"banana\", \"cherry\"]", "output": "second_element = list[1]\nprint(second_element) # prints banana", "category": "Python"}, {"instruction": "Create an object in JavaScript that performs a task given a condition.", "input": "", "output": "const myObject = {\n  doTask: (condition) => {\n    if(condition) {\n      // code to perform the task\n    } \n  }\n}", "category": "Python"}, {"instruction": "Modify the function to also remove all whitespace from the string.", "input": "", "output": "import re\n\ndef remove_special_chars_and_whitespace(s):\n    return re.sub(r'\\s','', re.sub(r'[^\\w\\s]','', s))", "category": "Python"}, {"instruction": "Create a Python function to parse a string and remove all special characters.", "input": "", "output": "import re\n\ndef remove_special_chars(s):\n    return re.sub(r'[^\\w\\s]','', s)", "category": "Python"}, {"instruction": "Edit the above PHP function so that it also checks if a given number is prime.", "input": "", "output": "function isPrime($n) {\n  if ($n == 1) {\n    return false;\n  } \n  elseif ($n == 2) {\n    return true;\n  } \n  else {\n    for ($i = 2; $i <= sqrt($n); $i++) {\n      if ($n % $i == 0) {\n        return false;\n        break;\n      }\n    }\n    return true;\n  }\n}", "category": "Python"}, {"instruction": "Create an HTML form with two input boxes and a submit button.", "input": "", "output": "<form>\n   <label>Name: </label>\n   <input type=\"text\" name=\"name\"><br>\n   <label>Age: </label>\n   <input type=\"number\" name=\"age\"><br>\n   <input type=\"submit\" value=\"Submit\">\n </form>", "category": "Python"}, {"instruction": "Modify the above program to sort the array in descending order.", "input": "[3,8,5,1,2,6,4]", "output": "public class SortDescending { \n    public static void main(String[] args) \n    {\n        int[] numbers = {3,8,5,1,2,6,4};\n        int temp = 0;\n        for (int i = 0; i < numbers.length; i++) {\n            for (int j = i+1; j < numbers.length; j++) {\n                if (numbers[i] < numbers[j]) {\n                    //swap elements\n                    temp = numbers[i]; // assign value of i to temp\n                    numbers[i] = numbers[j];  // assign value of j to i\n                    numbers[j] = temp;  // assign value of temp to j\n                }\n            }\n        }\n        System.out.println(\"Array elements in descending order:\");\n        for (int i = 0; i < numbers.length; i++) { \n            System.out.print(numbers[i]+\" \"); \n        } \n    }\n}", "category": "Python"}, {"instruction": "Suppose there is an array of numbers. Write a Java program to sort the array in ascending order.", "input": "[3,8,5,1,2,6,4]", "output": "public class SortAscending { \n    public static void main(String[] args) \n    {\n        int[] numbers = {3,8,5,1,2,6,4};\n        int temp = 0;\n        for (int i = 0; i < numbers.length; i++) {\n            for (int j = i+1; j < numbers.length; j++) {\n                if (numbers[i] > numbers[j]) {\n                    //swap elements\n                    temp = numbers[i]; // assign value of i to temp\n                    numbers[i] = numbers[j];  // assign value of j to i\n                    numbers[j] = temp;  // assign value of temp to j\n                }\n            }\n        }\n        System.out.println(\"Array elements in ascending order:\");\n        for (int i = 0; i < numbers.length; i++) { \n            System.out.print(numbers[i]+\" \"); \n        } \n    }\n}", "category": "Python"}, {"instruction": "Create a binary search tree in JavaScript.", "input": "", "output": "class Node { \n  constructor(data) \n  { \n    this.data = data; \n    this.left = null; \n    this.right = null; \n  } \n} \n  \nclass BinarySearchTree { \n  constructor() \n  { \n    this.root = null; \n  } \n\n  insert(data) \n  { \n    let newNode = new Node(data); \n    if(this.root === null) \n    {\n      this.root = newNode; \n    }\n\n    else\n    { \n      this.insertNode(this.root, newNode);\n    } \n  }\n  \n  insertNode(node, newNode) \n  { \n    if(newNode.data < node.data) \n    { \n      if(node.left === null) \n      { \n        node.left = newNode; \n      } else { \n        this.insertNode(node.left, newNode); \n      } \n    } \n    else { \n      if(node.right === null) \n      { \n        node.right = newNode; \n      } else { \n        this.insertNode(node.right,newNode); \n      } \n    } \n  } \n}", "category": "Python"}, {"instruction": "Write an SQL query that selects the maximum price from all products.", "input": "Table Name: Products\nColumns: Name (varchar), Price (decimal)", "output": "SELECT MAX(Price) FROM Products;", "category": "Python"}, {"instruction": "Create a class in Ruby that prints a message when instantiated.", "input": "", "output": "class MyClass\n  def initialize\n    puts \"Welcome to MyClass!\"\n  end\nend", "category": "Python"}, {"instruction": "Create a JavaScript function that takes in two parameters and returns their sum.", "input": "", "output": "function sum(num1, num2) {\n return num1 + num2;\n}", "category": "Python"}, {"instruction": "Reverse the following String.", "input": "String = \"Hello World!\"", "output": "rev_string = String[::-1] \nprint(rev_string) # prints \"!dlroW olleH\"", "category": "Python"}, {"instruction": "Given a list, write code to convert the list into a dictionary.", "input": "list1 = [\"John\", \"Doe\", 23]", "output": "dict1 = dict(zip(['name', 'surname', 'age'], list1))\nprint(dict1) # prints {'name': 'John', 'surname': 'Doe', 'age': 23}", "category": "Python"}, {"instruction": "Given a two-dimensional array, write a code to sum the values in each row.", "input": "A = [[1, 2, 3], \n     [4, 5, 6], \n     [7, 8, 9]]", "output": "row_sum = []\nfor row in A:\n    row_sum.append(sum(row))\n    \nprint(row_sum) # prints [6, 15, 24]", "category": "Python"}, {"instruction": "Construct a for loop that will loop over the string \"Hello World\".", "input": "", "output": "for letter in \"Hello World\":\n    print(letter)", "category": "Python"}, {"instruction": "Given the following dictionary, change the value of the key \"a\" to \"apples\".", "input": "my_dict = {\"a\": \"bananas\", \"b\": \"pears\"}", "output": "my_dict = {\"a\": \"apples\", \"b\": \"pears\"}", "category": "Python"}, {"instruction": "Write a Python function to check whether a string has all unique characters.", "input": "", "output": "def all_unique(string): \n  # loops through each character in string \n  for char in string: \n  \n    # if character appears more than once, \n    # return False \n    if string.count(char) > 1: \n      return False \n      \n  # return True if no characters appear more than once\n  return True", "category": "Python"}, {"instruction": "Write a Python program to find out the common items from two given arrays.", "input": "arr1 = [1, 2, 3, 5, 7 ]\narr2 = [2, 3, 5, 6, 7]", "output": "common_items = []\n\nfor item in arr1:\n  if item in arr2:\n    common_items.append(item)\n\nprint(common_items)  # Output: [2, 3, 5, 7]", "category": "Python"}, {"instruction": "Given the following list, extract the item at index 2.", "input": "my_list = [\"apple\", \"banana\", \"mango\", \"grapes\"]", "output": "mango", "category": "Python"}, {"instruction": "Edit the following code snippet to add an error handling that allows the function to return an appropriate message when an invalid input is received.", "input": "def factorial(n):\n  \tif n == 0:\n  \t   return 1\n\telse:\n  \t   return n * factorial(n-1)", "output": "def factorial(n):\n  if n < 0:\n    return \"Invalid input!\"\n  elif n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)", "category": "Python"}, {"instruction": "Modify the following code to handle an input which is a negative number.", "input": "def power_func(number):\n    if number >= 0:\n        return number**2", "output": "def power_func(number):\n    if number < 0:\n        return \"Invalid input!\"\n    else:\n        return number**2", "category": "Python"}, {"instruction": "Generate a list of odd numbers from 80 to 100.", "input": "", "output": "[81, 83, 85, 87, 89, 91, 93, 95, 97, 99]", "category": "Python"}, {"instruction": "Design a program to compare two sorted lists and returning list with the common elements.", "input": "list_one=[5, 10, 15, 20, 25]\nlist_two=[15, 17, 20, 22, 25, 27]", "output": "def compare_list(list_one, list_two):\n    common_list = []\n    i, j = 0, 0\n    while (i < len(list_one) and j < len(list_two)):\n        if list_one[i] == list_two[j]:\n            common_list.append(list_one[i])\n            i += 1\n            j += 1\n        elif list_one[i] < list_two[j]:\n            i += 1\n        else:\n            j += 1\n    return common_list", "category": "Python"}, {"instruction": "How much would you substract 5 to 101?", "input": "", "output": "96", "category": "Python"}, {"instruction": "Rearrange the following list of numbers in an ascending order.", "input": "[9, 5, 8, 2, 4]", "output": "[2, 4, 5, 8, 9]", "category": "Python"}, {"instruction": "What data type should you use to store a list like [4, 7, 2] in a Python variable?", "input": "", "output": "The data type you should use to store a list like [4, 7, 2] in a Python variable is a list. The list type is specified using square brackets when declaring the variable. For example: my_list = [4, 7, 2].", "category": "Python"}, {"instruction": "What will happen when the following code is executed?", "input": "a_list = [1, 2, 3, 4, 5]\n\nfor i in a_list:\n    a_list.append(i + 6)\n\nprint(a_list)", "output": "[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12]", "category": "Python"}, {"instruction": "Write a function to remove all duplicate elements in an array.", "input": "data = [1, 2, 3, 2, 4, 5]", "output": "def remove_duplicates(data):\n    \"\"\"Remove all duplicate elements in an array\"\"\"\n    \n    # Initialize an empty list\n    unique_data = []\n\n    # Iterate over the data\n    for i in data:\n        # Check if element is not already in list\n        if i not in unique_data:\n            # If not, then add to list\n            unique_data.append(i)\n    \n    return unique_data\n\nprint(remove_duplicates(data)) # prints [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Write a code to print out all the prime numbers between 2 and 10.", "input": "", "output": "# initialize an empty list to store prime numbers\nprime_numbers = []\n\n# Iterate over the range from 2 to 10\nfor num in range(2, 11):\n    cnt = 0\n    # check if the number is divisible by any natural number from 2 to num-1\n    for i in range(2, num):\n        if num % i == 0:\n            cnt += 1\n    # if the number is not divisible by any of the numbers then add to the list\n    if cnt == 0:\n        prime_numbers.append(num)\n\nprint(prime_numbers) # prints [2, 3, 5, 7]", "category": "Python"}, {"instruction": "What would be the resulting string after executing this code?", "input": "a = \"Hello\"\nb = \"World\"\n\nc = a + \" \" + b\n\nc = f\"{c}!\"", "output": "c = \"Hello World!\"", "category": "Python"}, {"instruction": "Write a code to find the missing number in the given array.", "input": "A = [1, 2, 3, 4, 6, 7, 8]", "output": "# Create a set from the array\nA_set = set(A)\n\n# Determine the max value\nmax_val = max(A_set)\n\n# Find the missing number\nmissing_number = max_val - sum(A_set)\n\nprint(missing_number) # prints 5", "category": "Python"}, {"instruction": "Improve the following code to handle an input which is an empty list.", "input": "def check_even(arr):\n    if arr == []:\n        return \"The list is empty!\"\n    else:\n        return all(x % 2 == 0 for x in arr)", "output": "def check_even(arr):\n    if arr == []:\n        return \"The list is empty!\"\n    elif not arr:\n        return \"The list is empty!\"\n    else:\n        return all(x % 2 == 0 for x in arr)", "category": "Python"}, {"instruction": "Write a MySQL query to find the highest salary of each department.", "input": "", "output": "SELECT d.name, MAX(e.salary)\nFROM Department d\nINNER JOIN Employee e\nON d.department_id = e.department_id\nGROUP BY d.name;", "category": "Python"}, {"instruction": "Create an if-else statement in Python that checks if an integer is even or odd.", "input": "", "output": "if num % 2 == 0:\n    print(\"The number is even\")\nelse:\n    print(\"The number is odd\")", "category": "Python"}, {"instruction": "Given a number, create a function that returns a list that contains its divisors.", "input": "num = 20", "output": "def get_divisors(num):\n    \"\"\"This function returns a list that contains the divisors of a given number\"\"\"\n    return [x for x in range(1, num + 1) if num % x == 0]", "category": "Python"}, {"instruction": "How do you merge two sorted arrays in O(n) time?", "input": "", "output": "Merging two sorted arrays in O(n) time can be done using a two-pointer technique. Starting from the beginning of both the arrays, we keep track of the pointers and compare the elements at these positions. The smaller element is added to the merged array, and the pointer is then incremented. This is repeated until both arrays have been iterated over, with the remaining elements of the larger array being added to the merged array.", "category": "Python"}, {"instruction": "Write a JS program that takes a number n and prints out the first n even numbers.", "input": "n = 10", "output": "function getFirstNEvens(n) {\n    let arr = [];\n    for (let i = 0; i < n; i++) {\n        arr.push(2 * i);\n    }\n    return arr;\n}\n\nlet firstNEvens = getFirstNEvens(n);\nconsole.log(firstNEvens); // Output: [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]", "category": "Python"}, {"instruction": "Write a codde fragment to print out the most frequent element in an array.", "input": "arr = [1, 2, 2, 3, 4, 4, 5]", "output": "freq = {}\n\nfor el in arr:\n    if el in freq:\n        freq[el] += 1\n    else:\n        freq[el] = 1\n        \nmax_el, max_freq = None, 0\nfor el, freq in freq.items():\n    if freq > max_freq:\n        max_el = el\n        max_freq = freq\n        \nprint(max_el, max_freq)  # Output: 2 2", "category": "Python"}, {"instruction": "Generate an array with the first 10 even numbers", "input": "", "output": "[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]", "category": "Python"}, {"instruction": "How do you count the number of specific characters in a given string?", "input": "", "output": "You can use the count() method in Python to count the number of specific characters in a given string. For example:\n\ns = 'My name is John'\n\nnum_of_char = s.count('o')\n\nprint(num_of_char) #Output: 2", "category": "Python"}, {"instruction": "Can you explain what is imperative programming?", "input": "", "output": "Imperative programming is a programming paradigm that describes computation in terms of statements that change a program\u2019s state. Imperative programming focuses on describing how a program operates. It describes lists of instructions that the computer should execute, describing the steps from start to finish. Contrast this with functional programming, which describes what the program must do. In imperative programming, instructions are typically presented using decision-making (conditional) and looping (iteration) constructs. Examples of imperative programming languages are C, Java, and Python.", "category": "Python"}, {"instruction": "You need to find the largest subset of an array that sums up to a given value.", "input": "arr = [1, 2, 3, 4, 5], target = 8", "output": "def find_largest_subset(arr, target):\n    curr_sums, max_sum_list = [], []\n    for num in arr:\n        for curr_sum in curr_sums[:]:\n            new_sum = curr_sum + num\n            if new_sum == target:\n                if new_sum > sum(max_sum_list):\n                    max_sum_list = curr_sum + [num]\n            else:\n                curr_sums.append(new_sum)\n    return max_sum_list", "category": "Python"}, {"instruction": "Edit the Java code to filter out the persons whose age is less than 18.", "input": "List<Person> persons = new ArrayList<>();\n\nfor (Person person : persons) {\n    System.out.println(person.getName());\n}", "output": "List<Person> persons = new ArrayList<>();\n\nfor (Person person : persons) {\n    if (person.getAge() >= 18) {\n        System.out.println(person.getName());\n    }\n}", "category": "Python"}, {"instruction": "Generate a list of the first three even numbers", "input": "", "output": "[2, 4, 6]", "category": "Python"}, {"instruction": "Given a string s, write a function to check if the string is a palindrome.", "input": "s = \"A man, a plan, a canal: Panama!\"", "output": "def is_palindrome(s):\n    s = s.lower().replace(' ', '').replace(',', '').replace(':', '').replace('!', '')\n\n    return s == ''.join(reversed(s))", "category": "Python"}, {"instruction": "What is the command to print \"Hello World\" twelve times in Python?", "input": "", "output": "for i in range(12):\n    print(\"Hello World\")", "category": "Python"}, {"instruction": "Generate a random string of 12 characters using Python.", "input": "", "output": "import string\nimport random\n\n''.join(random.choices(string.ascii_letters + string.digits, k=12))", "category": "Python"}, {"instruction": "Implement a function in JavaScript to calculate the average of all elements in an array.", "input": "[2, 3, 9]", "output": "function avg(arr) {\n    let sum = 0;\n    for (const val of arr) {\n        sum += val;\n    }\n    return sum/arr.length;\n}\n\nconsole.log(avg([2,3,9])); // 4.666", "category": "Python"}, {"instruction": "Write a query in MongoDB to find all the documents in the collection \"Books\".", "input": "", "output": "db.Books.find({})", "category": "Python"}, {"instruction": "Classify the following transaction as valid or invalid using Python.", "input": "Transaction ID: 101\nTransaction Amount: -200", "output": "\"invalid\"", "category": "Python"}, {"instruction": "Classify whether the following is an imperative or functional programming language.", "input": "Java", "output": "Imperative Programming", "category": "Python"}, {"instruction": "Update the existing HTML structure to add a new div class named \"container\".", "input": "<body>\n    <h1> My First Webpage </h1>\n</body>", "output": "<body>\n    <div class=\"container\"></div>\n    <h1>My First Webpage</h1>\n</body>", "category": "Python"}, {"instruction": "Determine the type of the given variable.", "input": "var age = 20", "output": "Number.", "category": "Python"}, {"instruction": "Design a JSON structure including a \"name\" field and a \"date\" field.", "input": "", "output": "{\"name\": \"\", \"date\": \"\"}", "category": "Python"}, {"instruction": "Write a C++ class to represent a date.", "input": "", "output": "class Date \n{\nprivate:\n    int day;\n    int month;\n    int year;\n\npublic:\n    Date(int day, int month, int year); \n\n    int getDay() const; \n    int getMonth() const;\n    int getYear() const;\n\n    void setDay(int day);\n    void setMonth(int month);\n    void setYear(int year);\n};", "category": "Python"}, {"instruction": "Create a regex expression that captures a valid URL.", "input": "", "output": "^(https?:\\/\\/)([\\da-zA-Z\\.-]+)\\.([a-zA-Z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$", "category": "Python"}, {"instruction": "Reverse a string using Python code.", "input": "input_str = \"Hello world!\"", "output": "def reverse_string(input_str): \n    new_string = \"\" \n    for char in input_str: \n        new_string = char + new_string\n  \n    return new_string \n  \ninput_str = \"Hello world!\"\n\nprint(reverse_string(input_str))\n##\n5. Instruction: Create a program that prints a multiplication table that shows the product of any two numbers between 1 and 10.\n5. Input:\n<noinput>\n5. Output:\nfor i in range(1, 11): \n    for j in range(1, 11): \n        product = i * j\n        print(str(i) + '*' + str(j) +'=' + str(product), end = '  ') \n    print()", "category": "Python"}, {"instruction": "Construct a switch statement to log different grades messages based on the grade variable.", "input": "var grade = \"A+\";", "output": "switch(grade){\n   case \"A+\":\n      console.log(\"Excellent job!\");\n      break;\n   case \"A\":\n      console.log(\"Well done!\");\n      break;\n   case \"B\":\n      console.log(\"Good job!\");\n      break;\n   case \"C\":\n      console.log(\"Keep up the good work!\");\n      break;\n   default: \n      console.log(\"Keep up the hard work!\");\n      break;\n}", "category": "Python"}, {"instruction": "Summarize the given paragraph in < 100 words.", "input": "Ada Lovelace is widely considered to be the world's first computer programmer. She was born to the poet Lord Byron and Lady Byron in 1815. She was fascinated by mathematics and charmed Charles Babbage, who is known as the father of computers, into teaching her about his Analytical Engine. Lovelace wrote a detailed description of the machine in 1843, and also outlines how it could be used to carry out complex calculations.", "output": "Ada Lovelace was born in 1815 to Lord Byron and Lady Byron and is widely acknowledged as the world\u2019s first computer programmer. She was fascinated by mathematics and was able to learn about Charles Babbage\u2019s Analytical Engine from him. In 1843, she wrote a detailed description of the machine and how it could be used for complex calculations.", "category": "Python"}, {"instruction": "Write a Python code snippet to print the pyramid structure with the given number of lines.", "input": "4", "output": "*   \n   ***\n  *****\n *******", "category": "Python"}, {"instruction": "Find the index of the given word in the sentence.", "input": "Word: music\nSentence: I love listening to music.", "output": "7.", "category": "Python"}, {"instruction": "Compare the two strings character-by-character and return the number of differences using Java.", "input": "String 1: Hello\nString 2: Halle", "output": "int diff = 0;\n\nfor (int i=0; i < Math.min(str1.length(), str2.length()); i++) {\n    if (str1.charAt(i) != str2.charAt(i)) {\n        diff++;\n    }\n}\nreturn diff;", "category": "Python"}, {"instruction": "Construct an array of objects with the fields \"name\" and \"age\".", "input": "", "output": "[\n  {\n    \"name\": \"\",\n    \"age\": \n  },\n  {\n    \"name\": \"\",\n    \"age\": \n  },\n  ...\n]", "category": "Python"}, {"instruction": "Explain the purpose of try-catch statement in JavaScript.", "input": "", "output": "The try-catch statement is used to handle errors in JavaScript code. It allows the code to continue running even if there is an error. The try clause contains the code that may throw an error, and the catch clause contains code that will execute when an error is thrown.", "category": "Python"}, {"instruction": "Convert the given binary string to its corresponding decimal number.", "input": "10111101", "output": "189.", "category": "Python"}, {"instruction": "Compare and contrast  two sorting algorithms: Bubble sort and Quick sort.", "input": "", "output": "Bubble sort is an algorithm that compares adjacent elements and swaps positions if they are out of order. It continues in this manner with loops until all elements of the array are in their correct order. Quick sort is very similar in its approach, but chooses a \"pivot\" element and divides the remaining array into two parts based on whether the elements are less than or greater than the pivot element. Bubble sort is simpler but has worse time complexity than Quick sort, which is more efficient.", "category": "Python"}, {"instruction": "Create a CSS style to set the background color of a div class \"sample\".", "input": "", "output": ".sample{\n   background-color: #fff;\n}", "category": "Python"}, {"instruction": "Describe the purpose of the given function.", "input": "function avg(a,b){\n   return (a+b)/2;\n}", "output": "The purpose of this function is to calculate the average of two given numbers and return the result.", "category": "Python"}, {"instruction": "Modify the following for loop to loop backwards.", "input": "for(var i=0; i<nums.length; i++){\n   console.log(nums[i]);\n}", "output": "for(var i=nums.length-1; i>=0; i--){\n   console.log(nums[i]);\n}", "category": "Python"}, {"instruction": "Construct a for loop to iterate through an array of numbers.", "input": "var nums = [1,2,3,4,5]", "output": "for(var i=0; i<nums.length; i++){\n   console.log(nums[i]);\n}", "category": "Python"}, {"instruction": "Generate a unique 6 character alphanumeric string.", "input": "", "output": "j4xdu6.", "category": "Python"}, {"instruction": "Write an SQL statement to select the name, city and country of all stores.", "input": "", "output": "SELECT name, city, country\nFROM stores;", "category": "Python"}, {"instruction": "Generate a 15-digit random number using Python.", "input": "", "output": "import random\n\nrandom.randint(100000000000000, 999999999999999)", "category": "Python"}, {"instruction": "Count the number of words in this sentence using Python.", "input": "This sentence has a total of eight words.", "output": "8", "category": "Python"}, {"instruction": "Given a string, create a function that takes out all the duplicated characters in the string.", "input": "string = 'Keeep Learning'", "output": "def remove_duplicates(s):\n  seen = []\n  res = \"\"\n  for char in s:\n    if(char in seen):\n      continue\n    else:\n      seen.append(char)\n      res += char\n  return res\n\nstring = 'Keeep Learning'\nprint(remove_duplicates(string)) # Keep Larning", "category": "Python"}, {"instruction": "Write a code to multiple two numbers without using the multiplication operator.", "input": "", "output": "def multiply(x,y):\n  if(y == 0):\n    return 0\n  return x + multiply(x,y-1)\n\nmultiply(5,4) # 20", "category": "Python"}, {"instruction": "How do you declare a variable in Python?", "input": "", "output": "In Python, you can declare a variable by assigning a value to it. For example, x = 1 is a variable declaration which creates a variable named x with the value of 1.", "category": "Python"}, {"instruction": "Write a Python function to check if a value exists in a list.", "input": "", "output": "def is_in_list(lst, val):\n    return val in lst", "category": "Python"}, {"instruction": "Explain the concept of object-oriented programming.", "input": "", "output": "Object-oriented programming (OOP) is a programming paradigm based on the concept of \"objects\", which can contain data and code: data in the form of fields and code in the form of procedures. OOP is used to design objects which contain both data and functions as one unit and help in creating reusable code.", "category": "Python"}, {"instruction": "Write a code to remove the oldest elements from a list until the list contains at most 10 elements.", "input": "list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "output": "def remove_old_elements(lst):\n  for i in range(len(lst) - 10):\n    lst.pop(0)\n  return lst\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(remove_old_elements(list)) # [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "category": "Python"}, {"instruction": "Explain the concept of Big O notation in one sentence.", "input": "", "output": "Big O notation is a way to measure the efficiency of algorithms and to compare them based on how their running time or space complexity grows relative to the size of the input.", "category": "Python"}, {"instruction": "Create a program to display all prime numbers between a given range.", "input": "a, b = 2, 8", "output": "def prime_numbers_in_range(a, b):\n    \"\"\"\n    Displays all prime numbers between a given range.\n    \"\"\"\n    for num in range(a, b+1):\n        if is_prime(num):\n            print(num,' is prime.')\n\ndef is_prime(num):\n    \"\"\"\n    Checks if a number is prime or not.\n    \"\"\"\n    if num == 1:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False \n    return True", "category": "Python"}, {"instruction": "Write code to concatenate two given strings.", "input": "str1 = 'hello'\nstr2 = 'world'", "output": "def concatenate(str1, str2):\n    \"\"\"\n    Concatenates two given strings.\n    \"\"\"\n    return str1 + str2", "category": "Python"}, {"instruction": "Write code to find the most frequent item in an array", "input": "arr = [1, 4, 6, 8, 9, 1, 4, 6]", "output": "def most_frequent_item(arr):\n    \"\"\"\n    Finds the most frequent item in an array.\n    \"\"\"\n    dictionary = {}\n    for i in arr:\n        if i in dictionary:\n            dictionary[i] += 1\n        else:\n            dictionary[i] = 1\n\n    max_count = 0\n    max_item = 0\n\n    for k, v in dictionary.items():\n        if v > max_count:\n            max_item = k\n            max_count = v\n    return max_item", "category": "Python"}, {"instruction": "Find the index of a given item in an array", "input": "arr = [1, 4, 6, 8, 9]\nitem = 8", "output": "def find_index(arr, item):\n    \"\"\"\n    Finds the index of a given item in an array\n    \"\"\"\n    for i, num in enumerate(arr):\n        if num == item:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Write code to find the longest substring of unique characters in a given string.", "input": "string = 'abcabcbb'", "output": "def find_longest_substring(string):\n    \"\"\"\n    Finds the longest substring of unique characters in a given string.\n    \"\"\"\n    longest_substring = ''\n    current_substring = ''\n    for ch in string:\n        if ch not in current_substring:\n            current_substring += ch\n            if len(current_substring) > len(longest_substring):\n                longest_substring = current_substring\n        else:\n            current_substring = ch\n    return longest_substring", "category": "Python"}, {"instruction": "Write code to implement Bubble Sort.", "input": "arr = [5, 8, 2, 4, 7, 10]", "output": "def bubble_sort(arr):\n    \"\"\"\n    Implementation of the Bubble Sort algorithm.\n    \"\"\"\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-1-i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr", "category": "Python"}, {"instruction": "Write a function to calculate the arithmetic mean of an array of numbers", "input": "arr = [5, 8, 2, 4, 7, 10]", "output": "def calculate_mean(arr):\n    \"\"\"\n    Calculate the arithmetic mean of an array of numbers.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    \n    return sum(arr) / len(arr)", "category": "Python"}, {"instruction": "Write code to find the smallest number in an array of numbers.", "input": "arr = [5, 8, 2, 4, 7, 10]", "output": "def find_smallest_number(arr):\n    \"\"\"\n    Finds the smallest number in an array of numbers.\n    \"\"\"\n    min_num = arr[0]\n    for num in arr[1:]:\n        if num < min_num:\n            min_num = num\n    return min_num", "category": "Python"}, {"instruction": "Write a Javascript code to check if the given number is a prime number.", "input": "", "output": "function isPrimeNumber(num) {\n  for(var i = 2; i < num; i++){\n    if(num % i === 0) {\n      return false;\n    }\n  }\n  return num > 1;\n}", "category": "Python"}, {"instruction": "What is the purpose of treemaps in data visualization?", "input": "", "output": "Treemaps are used to represent hierarchical data visually. They are used to visualize large datasets by dividing them into rectangles proportional to their values. This makes it easier to quickly compare values and identify patterns across datasets.", "category": "Python"}, {"instruction": "Write a SQL query to select the top 3 highest salaries in a employees table.", "input": "", "output": "SELECT TOP 3 salary FROM employees ORDER BY salary DESC;", "category": "Python"}, {"instruction": "What is data transformation and how is it used?", "input": "", "output": "Data transformation is the process of converting data from one format to another format. It is mainly used for cleaning and normalizing data before it is used for further analysis or machine learning. Data transformation involves a range of operations from removing outliers and duplicates, performing calculations to creating new columns and more.", "category": "Python"}, {"instruction": "Create a method in Java to return the largest of three numbers.", "input": "", "output": "public static int max(int num1, int num2, int num3) {\nint max = num1;\nif (num2 > max) {\n max = num2;\n}\nif (num3 > max) {\n max = num3;\n}\nreturn max;\n}", "category": "Python"}, {"instruction": "What is the correct syntax for an infinite loop in C++?", "input": "", "output": "while (true) {\n    // Code to run\n}", "category": "Python"}, {"instruction": "Construct a SQL query to find all columns in a table called \"customers\" where the first name is equal to 'John'.", "input": "", "output": "SELECT * FROM customers WHERE firstName = 'John';", "category": "Python"}, {"instruction": "Write a Java program to find the largest element in a given array.", "input": "", "output": "public class Largest { \n  \n    static int getLargest(int[] inputArray){ \n        int largest = inputArray[0]; \n        for(int i = 1; i < inputArray.length; i++){ \n            if(inputArray[i] > largest){ \n                largest = inputArray[i]; \n            } \n        } \n        return largest; \n    } \n      \n    public static void main(String[] args){ \n        int[] arr = {10,4,20,5,89}; \n        System.out.println(\"Largest element in the array is: \"+getLargest(arr)); \n    } \n}", "category": "Python"}, {"instruction": "Create an HTML form with radio buttons for selecting gender.", "input": "", "output": "<form>\n  <label>Gender:</label><br>\n  <input type=\"radio\" name=\"gender\" value=\"male\"> Male<br>\n  <input type=\"radio\" name=\"gender\" value=\"female\"> Female<br> \n</form>", "category": "Python"}, {"instruction": "Write a PHP program to find the sum of all elements of an array.", "input": "", "output": "<?php\n \nfunction sum_array($arr) {\n    $sum = 0;\n    foreach ($arr as $val) {\n        $sum += $val;\n    }\n    return $sum;\n}\n \n$arr = array(5, 10, 25);\necho sum_array($arr); //40\n?>", "category": "Python"}, {"instruction": "Write a Ruby program to search for a specific item in an array of strings.", "input": "array = [\"Apple\",\"Banana\",\"Mango\",\"Orange\"]", "output": "def search_array(array, item) \n  return array.include?(item)\nend\n  \nputs search_array(array, \"Mango\") #true", "category": "Python"}, {"instruction": "Write a query in SQL to select all the rows from table Books.", "input": "", "output": "SELECT * FROM Books;", "category": "Python"}, {"instruction": "Construct a regular expression to check if a string begins with a given substring.", "input": "", "output": "//String begins with substring\nvar regex = /^substring/;\n\nif (input_str.match(regex)) {\n  console.log('The string begins with the substring.');\n}", "category": "Python"}, {"instruction": "Write a C++ function to find the maximum element in an array.", "input": "", "output": "// C++ program to find maximum in arr[] of size n \n\nint arr[] = {10, 324, 45, 90, 9808}; \n\nint n = sizeof(arr)/sizeof(arr[0]); \n\nint max = arr[0];\n\n// Traverse array elements from second and \n// compare every element with current max   \nfor (int i = 1; i < n; i++) \n    if (arr[i] > max) \n        max = arr[i]; \n\nprintf(\"Maximum element = %d\", max);", "category": "Python"}, {"instruction": "Construct a regular expression to extract all words from a given string that start with a specific letter.", "input": "input_str = \"The quick brown fox jumped over the lazy dog\"", "output": "var regex = /\\b[qQ]\\w+\\b/g;\n \nvar result = input_str.match(regex);\n\nconsole.log(result); //['quick']", "category": "Python"}, {"instruction": "Write a JavaScript function to check if an array contains a specific element.", "input": "var arr = [1,2,3,4];", "output": "function contains(arr, element) {\n  return arr.indexOf(element) > -1;\n}\n\nconsole.log(contains(arr, 2)); //true", "category": "Python"}, {"instruction": "Given a string, write a Python program to find the first non-repeating character in it.", "input": "input_str = \"aaaaabbbbccc\"", "output": "def first_non_repeating_char(input_str): \n \n    char_count = {}\n \n    for ch in input_str: \n \n        if ch in char_count: \n \n            char_count[ch] += 1\n \n        else: \n \n            char_count[ch] = 1\n \n    for ch in input_str: \n \n        if char_count[ch] == 1: \n            return ch \n \n    return None\n\nprint(first_non_repeating_char(input_str))", "category": "Python"}, {"instruction": "Write an algorithm to perform binary search on a sorted array.", "input": "", "output": "def binarySearch(array, item):\n  low = 0\n  high = len(array) - 1\n\n  while low <= high:\n    mid = (low + high) // 2\n    guess = array[mid]\n    if guess == item:\n      return mid\n    if guess > item:\n      high = mid - 1\n    else:\n      low = mid + 1\n  return None", "category": "Python"}, {"instruction": "Write a C++ code to find the longest common substring in two strings.", "input": "", "output": "#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring longestCommonSubstring(const string& s1, const string& s2) \n{ \n    int n1 = s1.length(); \n    int n2 = s2.length(); \n  \n    int maxlen = 0;\n    int endingIndex = n1;\n            \n    int dp[n1 + 1][n2 + 1]; \n  \n    for (int i = 0; i <= n1; i++) { \n        for (int j = 0; j <= n2; j++) { \n            if (i == 0 || j == 0) { \n                dp[i][j] = 0; \n            } else if (s1[i - 1] == s2[j - 1]) { \n                dp[i][j] = dp[i - 1][j - 1] + 1; \n  \n                if (dp[i][j] > maxlen) { \n                    maxlen = dp[i][j]; \n                    endingIndex = i; \n                } \n            } else { \n                dp[i][j] = 0; \n            } \n        } \n    } \n  \n    return s1.substr(endingIndex - maxlen, maxlen); \n}", "category": "Python"}, {"instruction": "Create a JavaScript function that takes an array of numbers and returns the median value from the array.", "input": "", "output": "function getMedian(arr) {\n  arr.sort(function (a, b) {\n    return a - b;\n  });\n  \n  let mid = Math.floor(arr.length / 2);\n  \n  if (arr.length % 2 === 0) {\n    return (arr[mid - 1] + arr[mid]) / 2;\n  } else {\n    return arr[mid];\n  }\n}", "category": "Python"}, {"instruction": "Create a Node.js function to concatenate two strings.", "input": "", "output": "function concatenate(str1, str2) {\n  return str1 + str2;\n}\n\nconsole.log(concatenate('Hello', 'World')); //HelloWorld", "category": "Python"}, {"instruction": "Create a list of two-word phrases using each of the four words ('apple', 'bear', 'cat', 'dog').", "input": "", "output": "[('apple', 'bear'), ('apple', 'cat'), ('apple', 'dog'), ('bear', 'cat'), ('bear', 'dog'), ('cat', 'dog')]", "category": "Python"}, {"instruction": "Given a list of numbers, find the minimum and maximum elements.", "input": "[3, 4, 8, 1, 5, 0, 9]", "output": "min_el = 0\nmax_el = 9", "category": "Python"}, {"instruction": "Assign the value 'Hello World' to the variable 'message'.", "input": "", "output": "message = \"Hello World\"", "category": "Python"}, {"instruction": "Write a JavaScript code to eliminate any symbols from a given string.", "input": "", "output": "const eliminateSymbols = str => str.replace(/[^\\w\\s]/gi, \"\");", "category": "Python"}, {"instruction": "Create a Python program to find the maximum value in the given array.", "input": "[2, 4, 5, 7, 8]", "output": "def find_max(arr): \n    max_val = arr[0] \n    for i in range(len(arr)): \n        if max_val < arr[i]: \n            max_val = arr[i] \n    return max_val \n\narr = [2, 4, 5, 7, 8] \nmax_val = find_max(arr) \nprint(max_val)", "category": "Python"}, {"instruction": "Improve the following code in order to create a balanced binary search tree.", "input": "Node insert(int x, Node root) \n{ \n    if (root == NULL) { \n        root = new Node; \n        root->key = x; \n        root->left = root->right = NULL; \n    } \n    else    if (x < root->key) \n        root->left = insert(x, root->left); \n    else \n        root->right = insert(x, root->right); \n    return root; \n}", "output": "Node insert(int x, Node root) \n{ \n    if (root == NULL) { \n        root = new Node; \n        root->key = x; \n        root->left = root->right = NULL; \n    } \n    else    if (x < root->key) \n        root->left = insert(x, root->left); \n    else \n        root->right = insert(x, root->right); \n    root = balance(root); \n    return root; \n} \n\nNode balance(Node root) \n{ \n    int left_height = height(root->left); \n    int right_height = height(root->right); \n    if (abs(left_height - right_height) > 1) { \n        if (right_height > left_height) \n            root = leftRotate(root); \n        else\n            root = rightRotate(root); \n    } \n    return root; \n}", "category": "Python"}, {"instruction": "Modify the following function to return the number of unique elements in a given array.", "input": "int count_unique(int array[], int n) \n{ \n    int count = 0; \n    int i; \n    for (i = 0; i < n; i++) { \n        int j; \n        for (j = 0; j < i; j++) { \n            if (array[i] == array[j]) \n                break; \n        } \n        if (i == j) \n            count++; \n    } \n    return count; \n}", "output": "int count_unique(int array[], int n) \n{ \n    int count = 0; \n    int visited[n]; \n    for (int i = 0; i < n; i++) \n        visited[i] = 0; \n\n    for (int i = 0; i < n; i++) { \n        if (!visited[i]) { \n            visited[i] = 1; \n            count++; \n            for (int j = i + 1; j < n; j++) \n                if (array[i] == array[j]) \n                    visited[j] = 1; \n        } \n    } \n    return count; \n}", "category": "Python"}, {"instruction": "Implement a Java program for finding the index of an element in a sorted array.", "input": "", "output": "public int binarySearch(int[] arr, int val){\n    int left = 0;\n    int right = arr.length - 1;\n    while (left <= right) {\n        int mid = left + (right - left) /2 ;\n        if (arr[mid] == val) \n            return mid;\n        else if (arr[mid] < val) \n            left = mid + 1;\n        else \n            right = mid - 1;\n    }  \n    return -1;\n}", "category": "Python"}, {"instruction": "Write a Python function to find the intersection between two lists.", "input": "list1 = [1, 2, 3, 5, 7]\nlist2 = [3, 4, 5, 6]", "output": "def intersection(list1, list2):\n    result = []\n    for i in list1:\n        for j in list2:\n            if i==j:\n                result.append(i)\n    return result", "category": "Python"}, {"instruction": "Create a function to convert a given number from decimal to binary representation using Python.", "input": "", "output": "def dec_to_binary(num):\n    binary = \"\"\n    while num > 0:\n        binary+= str(num % 2)\n        num = num // 2\n    return binary[::-1]", "category": "Python"}, {"instruction": "Write a Python function to remove the characters which have odd index values of a given string.", "input": "string = \"Hello World\"", "output": "def remove_odd_index(string):\n    result = \"\" \n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result", "category": "Python"}, {"instruction": "Calculate the sum of all elements in a given list using Python.", "input": "list1 = [1, 2 ,3, 4, 5]", "output": "sum_list = 15", "category": "Python"}, {"instruction": "Find the longest palindrome in a given string using Python.", "input": "string = \"My name is John\"", "output": "def longest_palindrome(string):\n    palindrome = ''\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            if substring == substring[::-1] and len(substring) > len(palindrome):\n                palindrome = substring\n    return palindrome", "category": "Python"}, {"instruction": "Write a Python function to format a specified string to limit the number of characters to 6.", "input": "string = \"Hello world\"", "output": "def limit_char(string):\n    if len(string) > 6 :\n        return string[:6]\n    else:\n        return string", "category": "Python"}, {"instruction": "Convert the following number into binary representation using Python.", "input": "12", "output": "binary = \"0b1100\"", "category": "Python"}, {"instruction": "Using Python, create a function to check if a given string contains an uppercase letter.", "input": "", "output": "def contains_uppercase(text):\n  for char in text:\n    if char.isupper():\n      return True\n  return False", "category": "Python"}, {"instruction": "Compute the result of the following mathematical expression in Python.", "input": "(4 + 5 * 7 - 9) / 2", "output": "result = 17", "category": "Python"}, {"instruction": "Write a Python script to find the common elements in two given lists.", "input": "list1 = [1, 2, 3, 5, 7]\nlist2 = [2, 3, 4, 5, 6]", "output": "def common_elements(list1, list2):\n    common_ele = []   \n    for i in list1:\n        for j in list2:\n            if i==j:\n                common_ele.append(i)\n    return common_ele", "category": "Python"}, {"instruction": "Create a C++ code to find the average of n numbers.", "input": "", "output": "#include <iostream> \nusing namespace std; \n  \nfloat avg(int n, int arr[]) \n{  \n    float sum, avg; \n  \n    for (int i = 0; i < n; i++) \n    {\n        sum = sum + arr[i]; \n    }\n    avg = sum / n; \n    return avg; \n}", "category": "Python"}, {"instruction": "Design a PHP code snippet to create a simple calculator.", "input": "", "output": "<?php \n\n// Function to get the addition of two numbers \nfunction addition($num1, $num2){ \n\t$sum = $num1 + $num2; \n\techo \"Result of addition is: \" . $sum; \n} \n\n// Function to get the subtraction of two numbers \nfunction subtraction($num1, $num2){ \n\t$diff = $num1 - $num2; \n\techo \"Result of subtraction is: \" . $diff; \n}\n\n// Function to get the multiplication of two numbers \nfunction multiplication($num1, $num2){ \n\t$prod = $num1 * $num2; \n\techo \"Result of multiplication is: \" . $prod; \n}\n\n// Function to get the division of two numbers \nfunction division($num1, $num2){ \n\t$quot = $num1 / $num2; \n\techo \"Result of division is: \" . $quot; \n} \n\n?>", "category": "Python"}, {"instruction": "Write a SQL query to join two tables on a specified conditions.", "input": "Table 1:\nid  name  age\n1     a     15\n2     b     18\n3     c     20\nTable 2:\nid  class  marks\n1    10      80\n2    10      75\n3    11      70", "output": "SELECT table1.id, table1.name, table1.age, table2.class, table2.marks FROM table1 INNER JOIN table2 ON table1.id = table2.id WHERE table1.age > 18;", "category": "Python"}, {"instruction": "Create a Java program to check for a palindrome.", "input": "", "output": "public class Palindrome {  \n    public static boolean isPalindrome(String str){ \n        // Pointers pointing to the beginning \n        // and the end of the string \n        int i = 0, j = str.length() - 1; \n  \n        // While there are characters toc compare \n        while (i < j) { \n  \n            // If there is a mismatch \n            if (str.charAt(i) != str.charAt(j)) \n                return false; \n  \n            // Increment first pointer and \n            // decrement the other \n            i++; \n            j--; \n        } \n  \n        // Given string is a palindrome \n        return true; \n    } \n}", "category": "Python"}, {"instruction": "Describe the details of the try-except statement in Python.", "input": "", "output": "The try-except statement in Python is used to handle exceptions in code. All the code that has a potential for raising an exception is placed in the \"try\" block and the code that is executed if an exception is raised is placed in the \"except\" block. The \"Except\" block is also used to catch a specific exception and handle it accordingly.", "category": "Python"}, {"instruction": "Create a function in Python to calculate the factorial of a number.", "input": "", "output": "def factorial(n):\n    \"\"\"This function returns the factorial of a given integer\"\"\"\n    if n == 0:\n        return 1\n    else: \n        return n * factorial(n-1)", "category": "Python"}, {"instruction": "Given a list of integers, create code to remove the duplicates.", "input": "my_list = [1, 4, 4, 6, 6, 8]", "output": "unique_list = list(set(my_list))", "category": "Python"}, {"instruction": "How can you get the length of a list in Python?", "input": "", "output": "You can use the built-in function len() to get the length of a list in Python.", "category": "Python"}, {"instruction": "Write a function in Python to calculate the value of \"e\" to 4 decimal places.", "input": "", "output": "from math import e\n\ndef calc_e():\n    \"\"\"This function calculates the value of e to 4 decimal places\"\"\"\n    return round(e, 4)", "category": "Python"}, {"instruction": "Implement a function that takes two integers and returns the smaller one.", "input": "", "output": "def min_integer(a, b):\n    \"\"\"This function returns the minimum of two integers\"\"\"\n    return min(a, b)", "category": "Python"}, {"instruction": "Create some code that iterates through a list and prints out each element.", "input": "my_list = [1, 4, 6, 8]", "output": "for item in my_list:\n    print(item)", "category": "Python"}, {"instruction": "Create a function to find the greatest common divisor of two numbers in Python.", "input": "", "output": "def gcd(a, b):\n     while b != 0:\n        a, b = b, a % b\n     return a", "category": "Python"}, {"instruction": "What type of object is \"None\" in Python?", "input": "", "output": "None is a special constant in Python and is of type NoneType.", "category": "Python"}, {"instruction": "Create a python class called \"Employee\" that contains 3 instance variables.", "input": "", "output": "class Employee:\n    \"\"\"A class for representing an employee\"\"\"\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary", "category": "Python"}, {"instruction": "Create a function in Python that prints out a stringified version of a list.", "input": "[1, 4, 6, 8]", "output": "def print_str_list(in_list):\n    \"\"\"This function takes a list and returns a stringified version of it\"\"\"\n    return \" \".join(str(x) for x in in_list)", "category": "Python"}, {"instruction": "Edit the following function so that it counts the even numbers in the given array.", "input": "arr = [1, 2, 3, 4]", "output": "def countEvens(arr):\n count = 0\n for num in arr:\n  if num % 2 == 0:\n   count += 1\n return count", "category": "Python"}, {"instruction": "Create a function to find the total area of a triangle, given its base and height.", "input": "", "output": "def findAreaOfTriangle(base, height):\n return 0.5 * base * height", "category": "Python"}, {"instruction": "Write a Python program to determine if a given number is an Armstrong number.", "input": "", "output": "def isArmstrongNumber(num):\n sum = 0\n temp = num\n while temp > 0:\n  digit = temp % 10\n  sum += digit ** 3\n  temp //= 10\n if num == sum:\n  return True\n else:\n  return False", "category": "Python"}, {"instruction": "Write a shell script to prompt a user for their name and display a personalized message.", "input": "", "output": "#!/bin/bash\nread -p \"Enter your name: \" name\necho \"Hello $name, welcome to our website!\"", "category": "Python"}, {"instruction": "Improve the following React component to render a link with the text \"Visit us Here\".", "input": "", "output": "import React from 'react'; \n\nclass Link extends React.Component { \n\trender() { \n\t\treturn ( \n\t\t\t<div> \n\t\t\t\t<a href=\"#\">Visit us Here</a> \n\t\t\t</div> \n\t\t); \n\t} \n} \nexport default Link;", "category": "Python"}, {"instruction": "Create a function to check if an item is in a list", "input": "", "output": "def check_list_contains(item_list, item):\n    \"\"\"This function checks if an item is in a list\"\"\"\n    return item in item_list", "category": "Python"}, {"instruction": "Sort the given list of numbers in ascending order using Python.", "input": "numbers = [3, 5, 7, 1, 2]", "output": "sorted_numbers = [1, 2, 3, 5, 7]", "category": "Python"}, {"instruction": "Using Python, create a list containing the first 20 prime numbers.", "input": "", "output": "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]", "category": "Python"}, {"instruction": "Count the number of unique elements in the following list.", "input": "my_list = [1, 2, 3, 1]", "output": "unique_count = len(set(my_list))", "category": "Python"}, {"instruction": "Write code in Java to create a linked list.", "input": "", "output": "class Node{\n    int data; \n    Node next; \n        \n    Node(int d){\n        data = d; \n        next = null; \n    } \n} \n\nclass LinkedList{ \n    Node head; \n        \n    public void insert(int data){ \n        Node node = new Node(data); \n        if (head == null) { \n            head = node; \n        } \n        else { \n            Node n = head; \n            while (n.next != null) { \n                n = n.next; \n            } \n            n.next = node; \n        } \n    } \n}", "category": "Python"}, {"instruction": "Name a few Python libraries used for data analysis.", "input": "", "output": "Data analysis libraries in Python include Pandas, NumPy, SciPy, Matplotlib, Scikit-Learn and Seaborn.", "category": "Python"}, {"instruction": "Create a MongoDB query for finding a record in the collection that contains a specific value for a given field.", "input": "The collection is named 'books' and contains the fields 'title', 'author', and 'pub_date'. We would like to find a record where the title is \"Harry Potter and The Sorcerer's Stone\".", "output": "db.books.find({\"title\" : \"Harry Potter and The Sorcerer's Stone\"});", "category": "Python"}, {"instruction": "Describe how to debug a C++ program using GDB.", "input": "", "output": "Debugging a C++ program using GDB involves running the program with the \u2018gdb\u2019 command and then setting breakpoints and examining variables. This can be done by typing in \u2018break\u2019 followed by the line number, or \u2018b\u2019 followed by the function name, where the program should halt. Once the program is halted, variables and registers can be inspected to determine what is causing the program to fail. Finally, the \u2018continue\u2019 or \u2018c\u2019 command can be used to resume normal execution.", "category": "Python"}, {"instruction": "Write a Python function to generate the powerset of a given list.", "input": "list = [2, 4, 6]", "output": "def generate_powerset(list):\n powerset = []\n for i in range(2**len(list)):\n  subset = [list[bit] for bit in range(len(list)) if is_bit_set(i, bit)]\n  powerset.append(subset)\n return powerset\n\ndef is_bit_set(num, bit):\n return (num & (1 << bit)) != 0", "category": "Python"}, {"instruction": "Write a Python script to count the number of occurances of each character in a given string.", "input": "string = \"Mississippi\"", "output": "def count_chars(string):\n char_occurrences = {}\n for char in string:\n  if char not in char_occurrences:\n   char_occurrences[char] = 1\n  else:\n   char_occurrences[char] += 1\n return char_occurrences", "category": "Python"}, {"instruction": "Write a Python function to compute the maximum value for each key in a given dictionary.", "input": "d = {'a':10, 'b':20, 'c':30}", "output": "def max_values(d):\n return {key: max(d.values()) for key in d}", "category": "Python"}, {"instruction": "Explain the concept of inheritance in Python?", "input": "", "output": "Inheritance in Python allows a class to inherit attributes and behavior from another class, called the parent class. Inheritance enables code reuse, making it an important part of object-oriented programming (OOP). A class that inherits attributes and behavior from a parent is called a child class or derived class. The parent class is also known as the base class or superclass.\n\nIn Python, inheritance is specified by placing classes in parentheses after the class name: class DerivedClass(BaseClass):. This syntax allows the DerivedClass to inherit all attributes and methods from the BaseClass. It also allows the DerivedClass to override methods of the BaseClass, and add new attributes and methods.", "category": "Python"}, {"instruction": "Write a Python function to replace all the occurrences of a given substring with another.", "input": "string = \"Hello World\"\nsubstring = \"World\"\nreplacement = \"Universe\"", "output": "def replace_substring(string, substring, replacement):\n return string.replace(substring, replacement)", "category": "Python"}, {"instruction": "Write a Python function to check if a given string is an anagram of another or not.", "input": "word1 = \"cat\"\nword2 = \"tac\"", "output": "def is_anagram(word1, word2):\n return sorted(word1) == sorted(word2)", "category": "Python"}, {"instruction": "Generate a random 5-character string using the letters a-z.", "input": "", "output": "import random\n\ncharacters = \"abcdefghijklmnopqrstuvwxyz\"\n\nrandom_string = \"\"\nfor i in range(5):\n    random_string += random.choice(characters)\n\nprint(random_string)", "category": "Python"}, {"instruction": "Write a Python program to print the following pattern.", "input": "", "output": "for i in range(1,6):\n  for j in range(1,i+1):\n    print(\"*\", end=\" \")\n  print()", "category": "Python"}, {"instruction": "Find the largest number from the given list of numbers.", "input": "[7, 9, 11, 5]", "output": "largest_number = 11", "category": "Python"}, {"instruction": "Create a MySQL table 'employees' with columns name, age, department and salary.", "input": "", "output": "CREATE TABLE employees (\n    name VARCHAR(255) NOT NULL,\n    age INT NOT NULL,\n    department VARCHAR(255) NOT NULL,\n    salary DOUBLE NOT NULL\n);", "category": "Python"}, {"instruction": "Write a JavaScript code to print the first 10 terms of the Fibonacci series.", "input": "", "output": "let a = 0, b = 1, c, limit = 10;\n\nconsole.log(\"Fibonacci Series of \"+limit+\" numbers:\");\n\nfor(var i=0; i < limit; i++){\n    if(i<=1){\n        c=i;\n    }\n    else{\n        c=a+b;\n        a=b;\n        b=c;\n    }\n    \n    console.log(c);\n}", "category": "Python"}, {"instruction": "Calculate the square root of the given number.", "input": "25", "output": "sqrt(25) = 5", "category": "Python"}, {"instruction": "Write a Python function to create a two-dimensional array of specified dimensions.", "input": "", "output": "def create_2D_array(rows, columns):\n arr = [[] * columns] * rows\n return arr", "category": "Python"}, {"instruction": "Write a code to check whether a given year is a leap year or not", "input": "", "output": "def is_leap_year(year):\n    \"\"\"\n    Checks if the given year is a leap year or not.\n    \"\"\"\n    if ((year % 4 == 0) and (year % 100 != 0)) or (year % 400 == 0):  \n        return True  \n    else:  \n        return False", "category": "Python"}, {"instruction": "Construct a Java program for sorting a given array in ascending order.", "input": "", "output": "public class ArraySort { \n    public static int[] sortArray(int[] arr) { \n        int n = arr.length; \n        for (int i = 0; i < n - 1; i++) { \n            int min_idx = i; \n            for (int j = i + 1; j < n; j++) \n                if (arr[j] < arr[min_idx]) \n                    min_idx = j; \n            int temp = arr[min_idx]; \n            arr[min_idx] = arr[i]; \n            arr[i] = temp; \n        } \n        return arr; \n    } \n}", "category": "Python"}, {"instruction": "Write a query for filtering an array of objects in a MongoDB collection by their 'age' field.", "input": "The collection is named 'users' and the filter should return objects with age greater than 21", "output": "db.users.find({\"age\": { $gt: 21 }});", "category": "Python"}, {"instruction": "Multiply each element in the following list with 10.", "input": "my_list = [2, 4, 6]", "output": "my_list = [x * 10 for x in my_list]", "category": "Python"}, {"instruction": "Sort the following list in descending order.", "input": "my_list = [1, 5, 3, 7]", "output": "my_list.sort(reverse=True)", "category": "Python"}, {"instruction": "Create a pandas dataframe from the following dictionary.", "input": "data = {'Name': ['Jerry', 'Peter', 'Paul', 'John'], \n'Age': [20, 22, 18, 24]}", "output": "import pandas as pd\n\ndf = pd.DataFrame(data)", "category": "Python"}, {"instruction": "Create a new empty dictionary.", "input": "", "output": "my_dict = dict()", "category": "Python"}, {"instruction": "Split the following string at the comma.", "input": "my_str = \"Hello,World\"", "output": "my_str_split = my_str.split(\",\")", "category": "Python"}, {"instruction": "Define a function to check if a number is odd.", "input": "", "output": "def is_odd(num):\n    if num % 2 != 0:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Print the first 5 elements of the following list.", "input": "my_list = [2, 4, 6, 8, 10, 12, 14]", "output": "for elem in my_list[:5]:\n    print(elem)", "category": "Python"}, {"instruction": "Create a CSS rule that sets the font-weight of all h1 headings to bold.", "input": "", "output": "h1 {\n  font-weight: bold;\n}", "category": "Python"}, {"instruction": "Convert the following list to a set.", "input": "my_list = [2, 3, 5, 7]", "output": "my_set = set(my_list)", "category": "Python"}, {"instruction": "Convert the following strings to lower case.", "input": "s1 = \"Hello World!\"\ns2 = \"HELLO WORLD!\"", "output": "s1 = \"Hello World!\".lower()\ns2 = \"HELLO WORLD!\".lower()", "category": "Python"}, {"instruction": "Purge all rows from the following dataframe that have a negative value in the Age column.", "input": "import pandas as pd \n\ndata = {'Name': ['Jerry', 'Peter', 'Paul', 'John'], \n'Age': [20, 22, -18, 24]} \n\ndf = pd.DataFrame(data)", "output": "import pandas as pd \n\ndata = {'Name': ['Jerry', 'Peter', 'Paul', 'John'], \n'Age': [20, 22, -18, 24]} \n\ndf = pd.DataFrame(data)\n\ndf = df[df['Age'] >= 0]", "category": "Python"}, {"instruction": "Construct a query in SQL to find the names of the customers who made purchase on a given date.", "input": "The table name is 'Orders' and the given date is '2020-06-25'.", "output": "SELECT customer FROM orders WHERE date = '2020-06-25';", "category": "Python"}, {"instruction": "Describe how to create a 'dockerfile'", "input": "", "output": "A Dockerfile is created by specifying a set of instructions for how to build an image for a Docker container. A Dockerfile should specify a base image and the desired version, update the package manager, set environment variables, run commands, define the port mapping for the application, add files from the host filesystem to the image, and set an entrypoint for the container.", "category": "Python"}, {"instruction": "Suggest the best practice for minimizing the risk of SQL injection attacks.", "input": "", "output": "The best practice for minimizing the risk of SQL injection attacks is to use parameterized inputs and prepared statements. This enables the database to identify the data as separate values and thus renders SQL injection attacks ineffective. Additionally, input should be validated to ensure only valid data is accepted and to avoid any malicious manipulation of the input.", "category": "Python"}, {"instruction": "Describe the steps of creating an application using the Flask framework.", "input": "", "output": "Steps to creating a Flask application include importing the Flask module, creating an instance of Flask, creating an HTML template file, and creating a route for the app that renders the HTML template. The next step is to create a file containing the code to execute on each route; this could include performing a database query, calling a web API, running functions, etc. Once the application has been built, it can be run using a Flask client, such as the flask command line interface.", "category": "Python"}, {"instruction": "Name the components of a typical machine learning pipeline.", "input": "", "output": "A typical machine learning pipeline consists of data pre-processing, model training, model evaluation and model deployment. Data pre-processing involves cleaning, formatting, and transforming the data, while model training involves selecting an appropriate model and using it to learn from the data. Model evaluation evaluates the models and assists in model selection. The final step is deployment of the model, to enable inference from and prediction on new data points.", "category": "Python"}, {"instruction": "Change the following code snippet to generate a random integer from 0 to 10.", "input": "", "output": "import random\n\nrandom_int = random.randint(0, 10)", "category": "Python"}, {"instruction": "Show how to convert the JSON object below to a JavaScript object", "input": "{\n    \"id\": 1234,\n    \"num_sessions\": 5\n}", "output": "let data = {\n id: 1234,\n num_sessions: 5\n};\nlet object = JSON.parse(JSON.stringify(data));", "category": "Python"}, {"instruction": "Describe the function of the following code", "input": "while i < n:\n    print('Hello World!')", "output": "The code snippet is a basic example of a while loop in python. The code will loop through the code that is enclosed in the block and execute it for i (initialized to 0) values between 0 and n-1. In this case, the code will print \"Hello World!\" n times.", "category": "Python"}, {"instruction": "Write a function that takes as input a string and returns a new string with all the vowels removed.", "input": "", "output": "def remove_vowels(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    new_string = \"\"\n    for letter in string:\n        if letter.lower() not in vowels:\n            new_string += letter\n    return new_string", "category": "Python"}, {"instruction": "Find the Big O notation of the following code", "input": "def factorial(n):\n    answer = 1\n    for i in range(1, n+1):\n        answer *= i\n    return answer", "output": "The Big O notation of the given code is O(n).", "category": "Python"}, {"instruction": "Create a loop to print a sequence of numbers from 3 to 10", "input": "", "output": "for i in range(3, 11):\n    print(i)", "category": "Python"}, {"instruction": "Return a valid URL with the given parameters.", "input": "Domain: example.com \n\nEndpoint: /api/v1/users\n\nParameters:\n\nid: 4\n\nname: Alex", "output": "The URL is:\nhttps://example.com/api/v1/users?id=4&name=Alex", "category": "Python"}, {"instruction": "Use the given test data to debug the following code.", "input": "def check_odd_even(number):\n    if number % 2 == 0:\n        print(\"even\")\n    else:\n        print(\"odd\")\n\nTest data: \n1. number: 4 \n2. number: -7", "output": "Test 1:\ncheck_odd_even(4)\n\nOutput:\n'even'\n\nTest 2:\ncheck_odd_even(-7)\n\nOutput:\n'odd'", "category": "Python"}, {"instruction": "Add error handling to the code snippet.", "input": "def calculate_average(numbers):\n    sum = 0\n    for number in numbers:\n        sum += number\n    return sum/len(numbers)", "output": "def calculate_average(numbers):\n    sum = 0\n    if len(numbers) == 0:\n        raise ValueError(\"list of numbers should not be empty\")\n    for number in numbers:\n        sum += number\n    try:\n        return sum/len(numbers)\n    except ZeroDivisionError:\n        print(\"division by 0 attempted\")", "category": "Python"}, {"instruction": "Search in the API documentation to find all possible parameters that can be used with the API call.", "input": "", "output": "The API contains the following parameters that can be used with the API call: \n- search queries\n- sorting criteria\n- filters\n- categories\n- limit\n- offset\n- user information\n- timestamp", "category": "Python"}, {"instruction": "How would you write a SQL query to select all customers who have placed more than two orders?", "input": "", "output": "SELECT customers.*\nFROM customers\nWHERE EXISTS \n(SELECT COUNT(*)\n FROM orders\n WHERE orders.customer_id = customers_id\n HAVING COUNT(*) > 2);", "category": "Python"}, {"instruction": "Write a JavaScript function to generate all possible combinations of a given set of elements.", "input": "", "output": "function getCombinations(array) {\n  let result = [];\n  for (let i = 0;i < array.length; i++) {\n    let current = array.splice(i, 1);\n    let tempArray = array.slice();\n    if (array.length > 1) {\n      let tempPermutations = getCombinations(tempArray);\n      tempPermutations.forEach(permutations => {\n        result.push(current.concat(permutations));\n      });\n    } else {\n      result.push(current.concat(array));\n    }\n    array.splice(i, 0, current[0]);\n  }\n  return result;\n}", "category": "Python"}, {"instruction": "Create a regular expression to match a string that contains only a-z and 0-9 characters.", "input": "", "output": "^[a-z0-9]+$", "category": "Python"}, {"instruction": "Write an SQL query to select the most recent 5 orders for each customer.", "input": "customers: \n\nid  name  city\n1    John  Paris\n2    Adam   London\n3   David  Paris\n4    Mary  Tokyo\n\norders: \n\nid  customer_id   date\n1      1           2020-02-20\n2      1           2020-03-15\n3      2           2020-02-09\n4      2           2020-02-23\n5      3           2020-01-14\n6      3           2020-04-25\n7      4           2019-11-15\n8      4           2019-12-12", "output": "SELECT o.*\nFROM orders o,\n     (SELECT customer_id, MAX(date) as last_date \n      FROM orders\n      GROUP BY customer_id) as last\nWHERE o.customer_id = last.customer_id\nAND o.date  >= (SELECT MAX(date) FROM orders WHERE customer_id = last.customer_id AND date < last.last_date)\nORDER BY o.customer_id, o.date DESC", "category": "Python"}, {"instruction": "How do you import the math module in a Python program?", "input": "", "output": "import math", "category": "Python"}, {"instruction": "What is the Big O notation for the following algorithm?", "input": "function add(x, y):\n  result = x + y\n  return result", "output": "O(1)", "category": "Python"}, {"instruction": "Edit the following line of code in a Java program to calculate the sum of all elements in an array.", "input": "int sum = 0;\nfor int i = 0; i < nums.length; i--", "output": "int sum = 0;\nfor(int i = 0; i < nums.length; i++) {\n sum += nums[i];\n}", "category": "Python"}, {"instruction": "Write a SQL query to calculate the total count of customers in each city.", "input": "customers: \n\nid  name  city\n1    John  Paris\n2    Adam   London\n3   David  Paris\n4    Mary  Tokyo\n5   Sarah  London", "output": "select city, count(*) as total_count \nfrom customers\ngroup by city;", "category": "Python"}, {"instruction": "Write a JavaScript function to find the longest common subsequence between two given sequences.", "input": "sequence1 = [1, 5, 9, 3, 2]\nsequence2 = [8, 2, 5, 7]", "output": "function longestCommonSubsequence(sequence1, sequence2) {\n let dp = [];\n\n for(let i=0; i<=sequence1.length; i++) {\n  dp.push([]);\n  for(let j=0; j<=sequence2.length; j++) {\n   dp[i][j] = 0;\n  }\n }\n\n for(let i=1; i<=sequence1.length; i++) {\n  for(let j=1; j<=sequence2.length; j++) {\n   if(sequence1[i-1] == sequence2[j-1]) {\n    dp[i][j] =1+ dp[i-1][j-1];\n   }\n   else {\n    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);\n   }\n  }\n }\n return dp[sequence1.length][sequence2.length];\n}", "category": "Python"}, {"instruction": "Rewrite the following code in to a recursive function.", "input": "def calculate_fibonacci(n):\n    a, b = 0, 1\n    for i in range(1, n+1):\n        a, b = b, a + b\n    return a", "output": "def calculate_fibonacci(n):\n    if n < 0:\n        print(\"Incorrect input\")\n\n    elif n == 0:\n        return 0\n\n    elif n == 1:\n        return 1\n\n    else:\n        return calculate_fibonacci(n-1) + calculate_fibonacci(n-2)", "category": "Python"}, {"instruction": "Find the bug in the following code.", "input": "def multiply(x, y):\n    z = 0\n    while y > 0:\n        y = y - 1\n        z = z + x\n    return z", "output": "The bug in the code is that the loop completion condition should be 'while y > 0' and should be changed to 'while y != 0' otherwise the code will enter into an infinite loop when y is negative.", "category": "Python"}, {"instruction": "Write an if statement to check whether an entered string is in lowercase", "input": "", "output": "if string == string.lower():\n    print(\"The string is in lower case\")\nelse:\n    print(\"The string is not in lower case\")", "category": "Python"}, {"instruction": "Find the minimum element of an array.", "input": "arr = [5, 2, 7, 4, 9, 1]", "output": "min_elem = arr[0]\nfor elem in arr[1:]:\n    if elem < min_elem:\n        min_elem = elem\nprint(min_elem)", "category": "Python"}, {"instruction": "Write a JavaScript code to merge two arrays into a third array.", "input": "arr1 = [\u201ca\u201d, \u201cb\u201d]\narr2 = [1, 2]", "output": "let arr3 = [...arr1, ...arr2];\n\nconsole.log(arr3); // [\"a\", \"b\", 1, 2]", "category": "Python"}, {"instruction": "Write a Java program to convert a binary string to a decimal number.", "input": "", "output": "public class BinaryToDecimal { \n\n\tpublic static int binToDecimal(String binaryNumber)  \n\t{  \n\t\tint decimal = 0;  \n\t\tint power = 0;  \n\t\tfor(int i = binaryNumber.length() - 1; i >= 0; i--)  \n\t\t{   \n\t\t\tif (binaryNumber.charAt(i) == '1') \n\t\t\t\tdecimal += Math.pow(2, power); \n\t\t\tpower++; \n\t\t}  \n\t\treturn decimal;  \n\t}  \n\t\n}", "category": "Python"}, {"instruction": "Develop a Java program to rotate a two-dimensional array clockwise by 90 degrees.", "input": "[[1, 2], \n [3, 4]]", "output": "public class RotateMatrix \n{  \n    public static void rotate(int[][] arr, int n) \n    {  \n        for (int x = 0; x < n/2; x++) \n        {     \n            for (int y = x; y < n-x-1; y++) \n            { \n                int temp = arr[x][y];  \n                arr[x][y] = arr[y][n-1-x];  \n                arr[y][n-1-x] = arr[n-1-x][n-1-y];  \n                arr[n-1-x][n-1-y] = arr[n-1-y][x];  \n                arr[n-1-y][x] = temp;  \n            }  \n        }  \n    }  \n}", "category": "Python"}, {"instruction": "Write a SQL query to get a list of all the employees with a salary greater than $50,000.", "input": "", "output": "SELECT * \nFROM Employees \nWHERE Salary > 50000;", "category": "Python"}, {"instruction": "Create a HTML page with text \"Hello, World!\"", "input": "", "output": "<html>\n<head>\n   <title>Hello, World!</title>\n</head>\n<body>\n   <h1>Hello, World!</h1>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a C++ program that calculates the mean and median of an array of integer numbers.", "input": "[1, 3, 5, 7, 9]", "output": "#include <iostream> \n#include <vector> \n#include <algorithm> \n\nusing namespace std;\n\nint main() {\n  vector<int> numbers = {1, 3, 5, 7, 9};\n  int sum = 0;\n  for (auto const& n: numbers)\n    sum += n;\n\n  double mean = sum/numbers.size();\n  double median;\n  if (numbers.size() % 2 == 0)\n    median = (numbers[numbers.size()/2] + numbers[numbers.size()/2 - 1])/2.0;\n  else\n    median = numbers[numbers.size()/2];\n\n  cout<<\"Mean: \"<<mean<<endl;\n  cout<<\"Median: \"<<median;\n\n  return 0;\n}", "category": "Python"}, {"instruction": "Create a function to find the length of the longest substring that does not contain duplicate characters.", "input": "string = \"abcabcefghijklmnop\"", "output": "def longest_substring(string):\n    seen = set()\n    start = 0\n    max_length = 0\n    for end in range(len(string)):\n        if string[end] in seen:\n            start = max(start, seen[string[end]] + 1)\n        seen.add(string[end])\n        max_length = max(max_length, end-start+1)\n    return max_length", "category": "Python"}, {"instruction": "Write a function to rotate a matrix by 90 degrees.", "input": "", "output": "def rotate_matrix(matrix):\n    m = len(matrix)\n    # Create a new matrix\n    new_matrix = [[0 for _ in range(m)] for _ in range(m)]\n    # Rotate the matrix\n    for i in range(m):\n        for j in range(m): \n            new_matrix[j][m - i - 1] = matrix[i][j]\n    # Return the rotated matrix\n    return new_matrix", "category": "Python"}, {"instruction": "Generate a sorted list of numbers in an array using insertion sort?", "input": "arr = [5, 8, 1, 7, 2, 10, 3]", "output": "def insertion_sort(arr):\n    for i in range(len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and arr[j] > key:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = key\n    return arr", "category": "Python"}, {"instruction": "Design a program to compute the median of 3 integers.", "input": "", "output": "def median(a,b,c):\n    if a >= b:\n        if c >= a:\n            return a\n        elif b >= c:\n            return b\n        else:\n            return c\n    else:\n        if c >= b:\n            return b\n        elif a >= c:\n            return a\n        else:\n            return c", "category": "Python"}, {"instruction": "Generate code to create a 3 x 3 matrix with values 1 to 9.", "input": "", "output": "matrix = [[1,2,3], [4,5,6], [7,8,9]]", "category": "Python"}, {"instruction": "Write a parser to convert an XML document to a dictionary.", "input": "", "output": "from xml.etree.ElementTree import fromstring\n\ndef xml_to_dict(xml_string):\n    xml_dict = {}\n    root = fromstring(xml_string)\n    for element in root:\n        xml_dict[element.tag] = element.text\n    return xml_dict", "category": "Python"}, {"instruction": "Manipulate the spreadsheet with Python to identify duplicates in column A.", "input": "", "output": "def find_duplicates(spreadsheet):\n    df = pd.read_excel(spreadsheet)\n    return df['A'][df['A'].duplicated(keep=False)]", "category": "Python"}, {"instruction": "Create a function to sort a given array using selection sort.", "input": "arr = [5, 8, 1, 7, 2, 10, 3]", "output": "def selection_sort(arr): \n    for i in range(len(arr) - 1): \n        min = i \n        for j in range(i+1, len(arr)): \n            if arr[j] < arr[min]: \n                min = j \n        arr[i], arr[min] = arr[min], arr[i]\n    return arr", "category": "Python"}, {"instruction": "Using the given function, find the transpose of the given matrix.", "input": "matrix = [[2, 3, 4], [1, 5, 3]]\n\ndef transpose(arr):", "output": "def transpose(arr): \n    transposed_matrix = [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))] \n    return transposed_matrix\n\ntranspose(matrix)", "category": "Python"}, {"instruction": "Create a function to add the corresponding values of two lists.", "input": "list1 = [3, 5, 2, 4]\nlist2 = [5, 4, 8, 7]", "output": "def add_values(list1, list2):\n    result_list = []\n    for i in range(len(list1)):\n        result_list.append(list1[i] + list2[i])\n    return result_list\n\nadd_values(list1, list2)", "category": "Python"}, {"instruction": "Write code to print the prime numbers in a given range.", "input": "", "output": "def is_prime(n):\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\n\ndef print_primes(start, end):\n    for i in range(start, end + 1):\n        if is_prime(i):\n            print(i)", "category": "Python"}, {"instruction": "Develop a Python code to replace all occurrences of a specified phrase in a string.", "input": "string = \"This is a sample string. This has to be replaced.\"\nphrase = \"This\"\nnewString = \"That\"", "output": "string = string.replace(phrase, newString) \nprint(string) \n\n# Output: \nThat is a sample string. That has to be replaced.", "category": "Python"}, {"instruction": "Suggest a way to find the maximum number in an array without using the built-in max() function.", "input": "", "output": "def find_max(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max", "category": "Python"}, {"instruction": "Given an array and a target, write a program to search the target in the array and return the index.", "input": "arr = [5, 10, 20, 25, 30]\ntarget = 20", "output": "def search_target_in_array(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1  # element not found", "category": "Python"}, {"instruction": "Find the median of three numbers", "input": "4, 8, 10", "output": "8", "category": "Python"}, {"instruction": "If a button is clicked, what code can you write to show an alert?", "input": "", "output": "document.getElementById('button').addEventListener('click', (e)=>{\n    alert('Button is clicked!');\n});", "category": "Python"}, {"instruction": "Write a SQL query to update the employee's salary in the following table.", "input": "Table name: Employees\n\nid  name    department    salary\n1   John    D1            3000\n2   Sam     D2            3500\n3   Tom     D1            4000\n4   Susan   D2            5000", "output": "UPDATE Employees \nSET salary = salary * 1.07\nWHERE department = \u2018D2\u2019;", "category": "Python"}, {"instruction": "Write a code snippet for generating a random number between 1 and 100.", "input": "", "output": "import random\nrandomNumber = random.randint(1, 100)", "category": "Python"}, {"instruction": "Write a regex pattern to match the strings that contain only alphabetic characters.", "input": "", "output": "pattern = /^[a-zA-Z]+$/", "category": "Python"}, {"instruction": "Calculate the sum of a given list containing any type of elements.", "input": "[1, 2, 3, 'a', 'b', 4]", "output": "sum = 10", "category": "Python"}, {"instruction": "Write a function in JavaScript to print the Fibonacci sequence up to the given number.", "input": "", "output": "function fibonacciSequence(n) {\n    let sequence = [0, 1]\n    let i = 2 \n    while (i < n) {\n        sequence.push(sequence[i - 2] + sequence[i - 1]);\n        i++;\n    }\n    return sequence;\n}", "category": "Python"}, {"instruction": "Call a user-defined function in Python.", "input": "def add_two_numbers(x, y):\nreturn x + y", "output": "result = add_two_numbers(3, 5)\nprint(result)  # Outputs 8", "category": "Python"}, {"instruction": "Subtract two numbers and return the result.", "input": "97, 42", "output": "55", "category": "Python"}, {"instruction": "Create an algorithm to reverse a linked list in place.", "input": "", "output": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None \n\ndef reverse_list(head):\n    prev = None\n    current = head\n    while current:\n        next = current.next\n        current.next = prev\n        prev = current\n        current = next\n    head = prev\n    return head", "category": "Python"}, {"instruction": "Create a python program that takes a sentence as input and returns the amount of vowels that occur in the sentence", "input": "", "output": "def count_vowels(sentence):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    count = 0\n    for char in sentence:\n        if char in vowels:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Create a new class called \"Rectangle\" with two properties: width and height", "input": "", "output": "class Rectangle {\n    int width;\n    int height;\n    \n    public Rectangle (int width, int height){\n        this.width = width;\n        this.height = height;\n    }\n}", "category": "Python"}, {"instruction": "Create an HTML element which displays a button with the text \"Submit\"", "input": "", "output": "<button>Submit</button>", "category": "Python"}, {"instruction": "Generate a loop in which all the numbers from 1 to 10 will be printed", "input": "", "output": "for x in range(1,11):\n    print(x)", "category": "Python"}, {"instruction": "Write a method which takes 2 parameters and returns the greater one", "input": "", "output": "def max_num(x, y):\n    if x>y:\n        return x\n    else:\n        return y", "category": "Python"}, {"instruction": "Create your own sorting algorithm", "input": "[3, 6, 4, 7, 1, 2]", "output": "def my_sort(arr):\n    length = len(arr) \n\tfor i in range(length): \n\t\tmin_ind = i \n\t\tfor j in range(i+1, length): \n\t\t\tif arr[ min_ind ] > arr[j]: \n\t\t\t\tmin_ind = j \n\t\tarr[i], arr[min_ind] = arr[min_ind], arr[i]\n\treturn arr", "category": "Python"}, {"instruction": "Calculate the reverse of a string", "input": "Hello World", "output": "dlroW olleH", "category": "Python"}, {"instruction": "Write a code to read each character of a string", "input": "Hello World", "output": "for i in range(len(string)): \n   print(string[i], end = \"\")", "category": "Python"}, {"instruction": "Define the difference between call by value and call by reference", "input": "", "output": "Call by value: In this method, a copy of the actual argument is passed to the formal argument. Any change made to the formal argument does not affect the actual argument. \n\nCall by reference: In this method, a reference to the actual argument is passed to the formal argument. Any change made to the formal argument changes the value of actual argument.", "category": "Python"}, {"instruction": "Create a method to calculate the area of a circle, given its radius as argument.", "input": "", "output": "def calculate_area_of_circle(r):\n    return 3.14 * (r**2)", "category": "Python"}, {"instruction": "Fill the gaps in the following code to send an email with an attachment.", "input": "import smtplib\n\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\nfrom_address = ''\nto_address = ''\n\n# create message object instance\nmessage = MIMEMultipart()\n\n# setup the parameters of the message\nmessage['From'] = from_address\nmessage['To'] = to_address\nmessage['Subject'] = \"Testing\"\n\n# add in the message body\nmessage.attach(MIMEText('Hello world','plain'))\n\n# TODO: attach a pdf file\n\n# create server\nserver = smtplib.SMTP('smtp.gmail.com', 587)\n\n# TODO: start server\n\n# TODO: send mail\n\n# TODO: close the connection", "output": "import smtplib\n\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\nfrom email.mime.base import MIMEBase\nfrom email import encoders\n\nfrom_address = ''\nto_address = ''\n\n# create message object instance\nmessage = MIMEMultipart()\n\n# setup the parameters of the message\nmessage['From'] = from_address\nmessage['To'] = to_address\nmessage['Subject'] = \"Testing\"\n\n# add in the message body\nmessage.attach(MIMEText('Hello world','plain'))\n\n# attach a pdf file\nfilename = \"example_file.pdf\" \nattachment = open(filename, \"rb\") \n\npart = MIMEBase('application', 'octet-stream')\npart.set_payload((attachment).read())\nencoders.encode_base64(part)\npart.add_header('Content-Disposition', \"attachment; filename= %s\" % filename)\n\nmessage.attach(part)\n\n# create server\nserver = smtplib.SMTP('smtp.gmail.com', 587)\n\n# start server\nserver.starttls() \n  \n# Login \nserver.login(from_address, \"password\") \n  \n# send mail\nserver.sendmail(from_address, to_address, message.as_string()) \n\n# close the connection\nserver.quit()", "category": "Python"}, {"instruction": "Compute the total number of days in a given year.", "input": "", "output": "def get_total_days_in_year(year):\n    if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n        # leap year\n        return 366\n    else:\n        # non leap year\n        return 365", "category": "Python"}, {"instruction": "Print the elements in the array backwards.", "input": "arr=[1,2,3,4,5]", "output": "let arr = [1,2,3,4,5]; \n\narr.reverse(); \nconsole.log(arr);", "category": "Python"}, {"instruction": "Create a CSS code to set the font-family of the content inside a div.", "input": "", "output": "div { \n   font-family: 'roboto', sans-serif; \n}", "category": "Python"}, {"instruction": "What is the corresponding HTML tag for this sentence?", "input": "I am bold", "output": "<b>I am bold</b>", "category": "Python"}, {"instruction": "Write an SQL query to display the first name and last name of all employees in the Employees table.", "input": "", "output": "SELECT first_name, last_name\nFROM Employees;", "category": "Python"}, {"instruction": "Suggest an algorithm to remove duplicates from an array.", "input": "", "output": "def remove_duplicates(arr):\n    # Create a seen set\n    seen = set()\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If element is already seen, remove it\n        if arr[i] in seen:\n            del arr[i]\n        # Else add element to seen set\n        else:\n            seen.add(arr[i])\n    return arr", "category": "Python"}, {"instruction": "Create an array with 10 integers and sort them in ascending order.", "input": "", "output": "let array = [9,4,5,6,1,8,2,0,3,7]; \n  \narray.sort((a,b) => a-b); \nconsole.log(array);", "category": "Python"}, {"instruction": "Explain the importance and use of an algorithm in computing.", "input": "", "output": "An algorithm is a step-by-step process that a computer can use to solve a problem or achieve a goal. Algorithms are essential to computing systems, as they provide methods for inputting, storing, interpreting, manipulating, and outputting data. Algorithms can process data with speed, accuracy, and reliability, and can be used for a variety of tasks including calculations, simulations, database manipulation, decision making, and artificial intelligence.", "category": "Python"}, {"instruction": "Change the variable name of the given example to a lowercase variable.", "input": "let MyFavoriteMovie = 'The Matrix';", "output": "let myFavoriteMovie = 'The Matrix';", "category": "Python"}, {"instruction": "Calculate the area of the triangle.", "input": "Base: 8cm\nHeight: 5cm", "output": "The area of the triangle is 20 square centimeters.", "category": "Python"}, {"instruction": "Construct a JSON object", "input": "", "output": "{\n    \"name\": \"John Doe\",\n    \"age\": 24,\n    \"address\": \"123 Any Street, Anytown, USA\"\n}", "category": "Python"}, {"instruction": "Write a code to check if the content of two strings is the same", "input": "Hello, World!\nHello World!", "output": "if string1.replace(' ', '') == string2.replace(' ', ''):\n    print(\"The strings have the same content\")\nelse: \n    print(\"The strings do not have the same content\")", "category": "Python"}, {"instruction": "Generate a valid SQL query to select data from table 'user_accounts'", "input": "", "output": "SELECT * FROM user_accounts;", "category": "Python"}, {"instruction": "Write a JavaScript code to compare the values of two strings", "input": "", "output": "if (string1 === string2) {\n    console.log(\"The strings are equal.\")\n} else {\n    console.log(\"The strings are not equal.\")\n}", "category": "Python"}, {"instruction": "Create a for loop for printing out the numbers from 0 to 10.", "input": "", "output": "for(let i = 0; i < 11; i++){ \n    console.log(i); \n}", "category": "Python"}, {"instruction": "Create a class, \"Person\", which represents a person and has two properties, \"name\" and \"age\"", "input": "", "output": "public class Person {\n     private String name;\n     private int age;\n     \n     public Person(String name, int age){\n         this.name = name;\n         this.age = age;\n     }\n     \n     public String getName(){\n         return this.name;\n     }\n     \n     public int getAge(){\n         return this.age;\n     }\n}", "category": "Python"}, {"instruction": "Create a HTML page with a table containing five columns and four rows.", "input": "", "output": "<html>\n<head>\n   <title>Table with Columns and Rows</title>\n</head>\n<body>\n   <table>\n      <tr>\n         <th>Column 1</th>\n         <th>Column 2</th>\n         <th>Column 3</th>\n         <th>Column 4</th>\n         <th>Column 5</th>\n      </tr>\n      <tr>\n         <td>Cell 1</td>\n         <td>Cell 2</td>\n         <td>Cell 3</td>\n         <td>Cell 4</td>\n         <td>Cell 5</td>\n      </tr>\n      <tr>\n         <td>Cell 6</td>\n         <td>Cell 7</td>\n         <td>Cell 8</td>\n         <td>Cell 9</td>\n         <td>Cell 10</td>\n      </tr>\n      <tr>\n         <td>Cell 11</td>\n         <td>Cell 12</td>\n         <td>Cell 13</td>\n         <td>Cell 14</td>\n         <td>Cell 15</td>\n      </tr>\n   </table>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create a CSS class called \"container\" which has a width of 960px and margin auto.", "input": "", "output": ".container {\n    width: 960px;\n    margin: 0 auto;\n}", "category": "Python"}, {"instruction": "Suggest a function in JavaScript for repeating a given string a specified number of times.", "input": "", "output": "const repeat = (str, n) => \n    Array(n).fill(str).join('');", "category": "Python"}, {"instruction": "Suggest code for finding the maximum element in a Python dictionary.", "input": "", "output": "key_max = max(map_dictionary.keys(), key=(lambda k: map_dictionary[k])) \nval_max = map_dictionary[key_max]", "category": "Python"}, {"instruction": "Suggest a loop in JavaScript for traversing an array of objects.", "input": "", "output": "for (let obj of array) {\n  // Your loop code here\n}", "category": "Python"}, {"instruction": "Write a script in JavaScript for reversing an array.", "input": "", "output": "const reverseArray = arr => \n    arr.slice().reverse();", "category": "Python"}, {"instruction": "Suggest a code for removing the first element from an array.", "input": "", "output": "arr.splice(0, 1);", "category": "Python"}, {"instruction": "Implement a function for calculating the total number of digits in a number.", "input": "", "output": "public int numDigits(int number) {\n    int digits = 0;\n    while (number > 0) {\n        number /= 10;\n        ++digits;\n    }\n    return digits;\n}", "category": "Python"}, {"instruction": "Suggest a condition for including an element in an array.", "input": "", "output": "array.push(element) if element satisfies a certain condition, such as element.value === 5;", "category": "Python"}, {"instruction": "Develop a function to calculate the mean of a set of numbers in C#.", "input": "", "output": "public static double mean(params int[] numbers)\n{\n    double result = 0;\n    foreach(int number in numbers)\n    {\n        result += number;\n    }\n    return result/numbers.Length;\n}", "category": "Python"}, {"instruction": "Construct a network to recognize handwritten digits using a convolutional neural network in TensorFlow.", "input": "", "output": "import tensorflow as tf\nfrom tensorflow import keras \n\n# create a model\nmodel = keras.Sequential()\n\n# add a convolutional layer\nmodel.add(keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)))\n\n# add a max pooling layer\nmodel.add(keras.layers.MaxPool2D((2,2)))\n\n# add a flatten layer\nmodel.add(keras.layers.Flatten())\n\n# add a Dense layer\nmodel.add(keras.layers.Dense(128, activation='relu'))\n\n# add second Dense layer\nmodel.add(keras.layers.Dense(10, activation='softmax'))\n\n# compile the model\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])", "category": "Python"}, {"instruction": "Rewrite the following python program to convert UTC time to local time.", "input": "from datetime import datetime, timedelta\n\nutc_time = datetime.utcnow()", "output": "from datetime import datetime, timedelta \nimport time \n\nutc_time = datetime.utcnow()\nlocal_time = time.localtime(time.mktime(utc_time.timetuple())) \n\nprint(\"Local time: \", local_time)", "category": "Python"}, {"instruction": "Develop an algorithm to find the greatest common factor (GCF) of two numbers in Python.", "input": "", "output": "def gcf(a,b):\n    if a == 0 :\n        return b \n    return gcf(b % a, a)", "category": "Python"}, {"instruction": "Find the kth smallest element in an array. The array consists of integers only and the size of the array is given.", "input": "", "output": "def kthSmallest(arr, k): \n\t# Sort the given array \n\tarr.sort() \n\n\t# Return k'th element in  \n\t# the sorted array \n\treturn arr[k-1]", "category": "Python"}, {"instruction": "Rewrite the following in-place insertion sort algorithm in Java.", "input": "", "output": "public class InsertionSort { \n\tpublic static void inplaceInsertionSort(int[] array) { \n\t\t// Iterate over array elements \n\t\tfor (int i = 1; i < array.length; i++) { \n\t\t\tint value = array[i]; \n\t\t\tint j = i; \n\t\t\t// Check whether the adjacent element in \n\t\t\t// left side is greater or not \n\t\t\twhile (j > 0 && array[j - 1] > value) { \n\t\t\t\t// shifting the elements \n\t\t\t\tarray[j] = array[j - 1]; \n\t\t\t\tj--; \n\t\t\t} \n\t\t\t// moving the element in right side \n\t\t\tarray[j] = value; \n\t\t} \n\t} \n\t// Driver Code \n\tpublic static void main(String[] args) { \n\t\tint[] arr = { 20, 12, 10, 15, 2 }; \n\t\tinplaceInsertionSort(arr); \n\t\tfor (int i : arr) { \n\t\t\tSystem.out.print(i + \" \"); \n\t\t} \n\n\t}", "category": "Python"}, {"instruction": "Take the following algorithm and turn it into a Python program.", "input": "", "output": "# Function to calculate \n# maximum number of edges \n# that can be added \n# to a graph without cycles \ndef max_edges(total_nodes): \n\t# initialize result to 0 \n\tresult = 0 \n\t\n\t# consider every pair of nodes \n\tfor i in range(total_nodes): \n\t\tfor j in range(i + 1, total_nodes): \n\t\t\tresult += 1  \n\t\t\n\t# return the result \n\treturn result", "category": "Python"}, {"instruction": "Generate a function to sort a 2-dimensional list in Python by the values of the second element in each sublist.", "input": "", "output": "def sort_by_second_element(lst): \n    lst.sort(key = lambda x: x[1]) \n    return lst", "category": "Python"}, {"instruction": "Suggest a statement for deleting an element from an array at a given index.", "input": "", "output": "array.splice(index, 1);", "category": "Python"}, {"instruction": "How can you replace a specific element from an array in JavaScript?", "input": "", "output": "The element can be replaced in JavaScript by using the Array.prototype.fill() method. \n\nFor example:\narr.fill(value, start, end); \n// start is the index of the first element to be replaced, end is the index of the last element to be replaced.", "category": "Python"}, {"instruction": "Suggest a way to remove duplicate characters from a string in JavaScript.", "input": "", "output": "The Set data structure can be used to remove duplicate characters from a string in JavaScript. \n\nFor example:\n[...new Set(\"string\")].join(\"\"); // returns \"strng\"", "category": "Python"}, {"instruction": "Write a script in PHP for converting a string to lowercase.", "input": "", "output": "<?php\n  $string = \"STRING\";\n  $string = strtolower($string);\n  echo($string); \n  // output: string\n?>", "category": "Python"}, {"instruction": "Write a CSS rule to change the font color of the h1 element to green.", "input": "", "output": "h1 {\n  color: green;\n}", "category": "Python"}, {"instruction": "Using JavaScript, create a function that takes two arguments and returns the greater one.", "input": "", "output": "function getGreater(num1, num2) {\n return Math.max(num1, num2);\n}", "category": "Python"}, {"instruction": "Create an array of strings in Java.", "input": "", "output": "String[] myArray = {\"Hello\", \"World\", \"Foo\", \"Bar\"};", "category": "Python"}, {"instruction": "Edit the following Java program to output the sum of the two numbers.", "input": "int firstnum = 5;\nint secondnum = 10;", "output": "int firstnum = 5;\nint secondnum = 10;\n\nint sum = firstnum + secondnum;\nSystem.out.println(\"The sum of the two numbers is: \" + sum);", "category": "Python"}, {"instruction": "Write a code in Ruby to find the area of a circle with radius 10.", "input": "", "output": "# Define PI \nPI = 3.1415\n\n# Calculate the area of a circle with radius 10\narea = PI * 10**2\n\n# Print the area\nputs \"The area of the circle is #{area}\"", "category": "Python"}, {"instruction": "Create an SQL query to get the average of all the prices in the products table.", "input": "", "output": "SELECT AVG(price) FROM products;", "category": "Python"}, {"instruction": "What are three methods to reverse a string in JavaScript?", "input": "", "output": "Three methods to reverse a string in JavaScript are: \n1. Using the reverse() method \n2. Using a for loop \n3. Using the split() and join() methods", "category": "Python"}, {"instruction": "Develop a classifier in Python to predict the language of a given text.", "input": "", "output": "import nltk\n\nclass LanguageClassifier(object):\n\t\n    def __init__(self):\n        self.languages = []\n\t\n    def train(self, data):\n        train_sents = []\n        train_tags = []\n\n        # extract sentences and tags from data\n        for lang, sentences in data.items():\n            self.languages.append(lang)\n            train_sents.extend(sentences)\n            train_tags.extend([lang] * len(sentences))\n\n        # build featureset\n        feature_set = []\n        for (words, lang) in zip(train_sents, train_tags):\n            words_dict = dict([(word, True) for word in words])\n            feature_set.append((words_dict, lang))\n\t\n        # train classifier\n        self.classifier = nltk.NaiveBayesClassifier.train(feature_set)\n\n    def predict(self, sentence):\n        words_dict = dict([(word, True) for word in sentence])\n        return self.classifier.classify(words_dict)", "category": "Python"}, {"instruction": "Write a code to get all the records from the users table with role \"admin\".", "input": "", "output": "SELECT * FROM users WHERE role = 'admin';", "category": "Python"}, {"instruction": "What is the syntax for declaring a constant in Java?", "input": "", "output": "In Java, the syntax for declaring a constant is \n\npublic static final <data-type> <constant-name> = <value>;", "category": "Python"}, {"instruction": "Write a code to get the user input for two numbers and print the sum of the two numbers.", "input": "", "output": "# Get user input for two numbers\nnum1 = int(input(\"Enter first number: \"))\nnum2 = int(input(\"Enter second number: \"))\n\n# Print the sum of the two numbers\nprint(\"The sum of the two numbers is:\", num1 + num2)", "category": "Python"}, {"instruction": "Create an array in JavaScript of 10 numbers ranging from 1 to 100.", "input": "", "output": "// Create an array of 10 numbers ranging from 1 to 100\nlet array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\narray = array.map(num => num * 10);\nconsole.log(array); // [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]", "category": "Python"}, {"instruction": "Create a SQL query to get the sum of the items sold from the orders table.", "input": "", "output": "SELECT SUM(quantity) FROM orders;", "category": "Python"}, {"instruction": "Create a MySQL query to list all the cars in the database with the make, model, and year.", "input": "", "output": "SELECT make, model, year FROM cars;", "category": "Python"}, {"instruction": "Write a Python script for checking if a given number is an even or odd number.", "input": "", "output": "\"\"\"\nCheck a given number is even or odd\n\"\"\"\ndef check_even_or_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\nif __name__ == '__main__':\n    num = int(input(\"Enter a number to check : \"))\n    print(\"The given number is\",check_even_or_odd(num))", "category": "Python"}, {"instruction": "Write a script for reversing the order of alphabets in a string in Python.", "input": "", "output": "def reverseAlphabets(string): \n    string = ''.join(reversed(string)) \n    return string \n \nstring = \"string\"\nprint(reverseAlphabets(string)) # Output: gnirts", "category": "Python"}, {"instruction": "Output the number of items in a hashmap with key-value pairs [\"Mon\", \"Monday\"], [\"Tue\", \"Tuesday\"], and [\"Wed\", \"Wednesday\"].", "input": "", "output": "//Create a hashmap\nHashMap<String, String> map = new HashMap<String, String>();\nmap.put(\"Mon\", \"Monday\");\nmap.put(\"Tue\", \"Tuesday\");\nmap.put(\"Wed\", \"Wednesday\");\n\n// Output the number of items in the hashmap\nSystem.out.println(\"Number of items in the hashmap: \" + map.size());  // Outputs 3", "category": "Python"}, {"instruction": "Write a SQL query to get the employee ID, first name and last name of the all employees with the last name starting with 'G'", "input": "", "output": "SELECT employee_id, first_name, last_name \nFROM employees \nWHERE last_name LIKE 'G%';", "category": "Python"}, {"instruction": "Generate a list of prime numbers between two numbers A and B (both inclusive).", "input": "", "output": "def generate_primes(lower, upper): \n    prime_numbers = [] \n    for num in range(lower, upper + 1): \n        if num > 1: \n            for i in range(2, num): \n                if (num % i) == 0: \n                    break\n            else: \n                prime_numbers.append(num) \n    return prime_numbers", "category": "Python"}, {"instruction": "Edit the following PHP code to add a custom header to the response.", "input": "<?php\n  header(\"Content-Type: application/json\");\n  echo json_encode($data);\n?>", "output": "<?php\n  header(\"Content-Type: application/json\");\n  header(\"X-Custom-Header: Custom Value\");\n  echo json_encode($data);\n?>", "category": "Python"}, {"instruction": "Write a SQL query to select the first 10 records from a table called \"Employees\".", "input": "", "output": "SELECT * FROM Employees LIMIT 10;", "category": "Python"}, {"instruction": "Create a code to check if a number is an Armstrong number or not", "input": "", "output": "def isArmstrongNumber(num):  \n    # initialize\n    sum_times_powers = 0\n    temp = num  \n  \n    while (temp != 0):  \n        # find remainder and get it\n        remainder = temp % 10 \n        sum_times_powers += remainder ** 3 \n        temp //= 10\n  \n    if (sum_times_powers == num):  \n        return True\n    else: \n        return False", "category": "Python"}, {"instruction": "Create a program to print the sum of all first 10 natural numbers.", "input": "", "output": "def sum_first_ten_natural_numbers():\n    sum = 0\n    for i in range(1, 11):\n        sum = sum + i\n    return sum\n\nprint(sum_first_ten_natural_numbers()) \n# Output: 55", "category": "Python"}, {"instruction": "Create a JavaScript code snippet to generate a random number between 0 and 100", "input": "", "output": "function getRandomNumberBetween0And100() {\n  return Math.floor(Math.random() * 101);\n}\n\nlet randomNumber = getRandomNumberBetween0And100();\nconsole.log(randomNumber);", "category": "Python"}, {"instruction": "Create a Python program to remove an item from a given list", "input": "", "output": "def remove_item_from_list(my_list, item):\n    if item in my_list:\n        my_list.remove(item)\n    return my_list", "category": "Python"}, {"instruction": "Create a code to print each word of a sentence on a new line", "input": "This is a sentence.", "output": "def print_sentence(s):\n    words = s.split(' ')\n    for word in words:\n        print(word)\n        \ns = \"This is a sentence.\"\nprint_sentence(s)\n\n# Output:\n# This\n# is\n# a\n# sentence.", "category": "Python"}, {"instruction": "Generate a valid code to sum two given numbers", "input": "", "output": "def sum_two_numbers(num1, num2):\n    return num1 + num2", "category": "Python"}, {"instruction": "Implement a python function to return \"true\" if the string is a palindrome and \"false\" if it is not", "input": "", "output": "def is_palindrome(s): \n    # Reversing string \n    rev = s[::-1] \n  \n    # Checking if reversed string is equal to  \n    # original string \n    if (s == rev): \n        return \"true\"\n    else: \n        return \"false\"", "category": "Python"}, {"instruction": "Create a JavaScript function that takes in an array as an argument and counts the occurrence of a given element", "input": "[1, 2, 2, 4, 6], element=2", "output": "function countOccurrence(arr, element) {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == element) {\n      count++;\n    }\n  }\n  return count;\n}\n\nlet arr = [1, 2, 2, 4, 6];\nlet element = 2;\nconsole.log(countOccurrence(arr, element)); // Output: 2", "category": "Python"}, {"instruction": "Create an HTML form which accepts an input string and returns the longest word in the string", "input": "Hello world!", "output": "<html>\n  <head>\n    <title>Longest word finder</title>\n    <script type=\"text/javascript\">\n      function longestWordFinder() {\n        // Get user input\n        const inputString = document.getElementById(\"inputString\").value;\n\n        // Split the input string into an array of words\n        let words = inputString.split(\" \");\n\n        // Iterate through the words array and find the longest word\n        let longestWord = words[0];\n        for (let i = 1; i < words.length; i++) {\n            if (words[i].length > longestWord.length)\n                longestWord = words[i];\n        }\n\n        // Display the result\n        document.getElementById(\"result\").innerHTML = longestWord;\n      } \n    </script>\n  </head>\n  <body>\n    <h1>Longest Word Finder</h1>\n    <input type=\"text\" id=\"inputString\" />\n    <button type=\"submit\" onclick=\"longestWordFinder()\">Submit</button>\n    <p>The longest word is: <span id=\"result\"></span></p>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a Java program to add two large numbers of any length.", "input": "12345 and 54321", "output": "public static String addTwoLargeNumbers(String num1, String num2) { \n    String result= \"\";\n  \n    // make sure num1 is negative and num2 is positive \n    if (compareNumSize(num1, num2) < 0) \n        return addTwoLargeNumbers(num2, num1); \n  \n    // variables to maintain the carry  \n    int carry = 0; \n  \n    // traverse from the end of both the strings \n    int num1_len = num1.length(), num2_len = num2.length(); \n    for (int i = num1_len - 1, j = num2_len - 1; i >= 0 || j >= 0;) { \n  \n        int n1 = i >= 0 ? num1.charAt(i) - '0' : 0; \n        int n2 = j >= 0 ? num2.charAt(j) - '0' : 0; \n  \n        int sum = (n1 + n2 + carry) % 10; \n        carry = (n1 + n2 + carry) / 10; \n  \n        result = sum + result; \n  \n        if (i >= 0) \n            i--; \n        if (j >= 0) \n            j--; \n    } \n  \n    // to add carry if carry exists \n    if (carry > 0) \n        result = carry + result; \n  \n    return result; \n}", "category": "Python"}, {"instruction": "Create an HTML page that has an input field and a button. When the button is clicked, the text from the input field should be printed to the console.", "input": "", "output": "<html>\n  <head>\n  </head>\n  <body>\n    <input type=\"text\" id=\"myInput\">\n    <button onclick=\"printInput()\">Print Input</button>\n    \n    <script>\n      function printInput(){\n        const inputVal = document.getElementById(\"myInput\").value;\n        console.log(inputVal);\n      }\n    </script>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a Java method that takes a string and returns a copy of the string with all lowercase letters replaced with uppercase letters.", "input": "mixed case", "output": "public static String toUpperCase(String s) {\n    return s.toUpperCase();\n}", "category": "Python"}, {"instruction": "Write a JavaScript program to check if two numbers are equal.", "input": "3 and 5", "output": "function areEqual(x, y){\n    if (x === y){\n        return true;\n    }\n    else{\n        return false;\n    }\n}", "category": "Python"}, {"instruction": "Write a SQL query to get the name, age and job title of all employees who are over 35 years old.", "input": "", "output": "SELECT name, age, job_title \nFROM employees \nWHERE age > 35;", "category": "Python"}, {"instruction": "Create an HTML page with a table that displays the given data.", "input": "Dessert  | Calories\nChocolate Cake | 450\nIce Cream Sundae | 300\nDonut | 350", "output": "<html>\n<head>\n  <title>Calorie Table</title>\n</head>\n<body>\n  <h1>Calorie Table</h1>\n  <table>\n    <thead>\n      <th>Dessert</th>\n      <th>Calories</th>\n    </thead>\n    <tbody>\n      <tr>\n        <td>Chocolate Cake</td>\n        <td>450</td>\n      </tr>\n      <tr>\n        <td>Ice Cream Sundae</td>\n        <td>300</td>\n      </tr>\n      <tr>\n        <td>Donut</td>\n        <td>350</td>\n      </tr>\n    </tbody>\n  </table>\n</body>\n</html>", "category": "Python"}, {"instruction": "Using the Java stream API, create a program that takes a list of integers and returns the number that appears most often in the list.", "input": "[1, 3, 3, 3, 4, 5, 5, 5, 6]", "output": "import java.util.List;\nimport java.util.stream.Collectors;\n\npublic class Solution {\n\n  public static int getMostFrequentNumber(List<Integer> list) {\n    return list.stream()\n        .collect(Collectors.groupingBy(Integer::intValue, Collectors.counting()))\n        .entrySet().stream()\n        .max(Map.Entry.comparingByValue())\n        .get().getKey();\n  }\n}", "category": "Python"}, {"instruction": "Create an algorithm using JavaScript that finds the largest number in an array.", "input": "[1, 7, 4, 11, 18]", "output": "function findLargestNumber(nums) {\n    let largest = nums[0];\n    for (let i = 1; i < nums.length; i++) {\n        if (nums[i] > largest) {\n            largest = nums[i];\n        }\n    }\n    return largest;\n}", "category": "Python"}, {"instruction": "Create a class in Java that takes two arguments, a name of type String and an id of type int.", "input": "", "output": "public class Person {\n  private String name;\n  private int id;\n\n  public Person(String name, int id) {\n    this.name = name;\n    this.id = id;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public int getId() {\n    return id;\n  }\n}", "category": "Python"}, {"instruction": "Code a for loop to print out the multiplication table of a given number.", "input": "number = 5", "output": "for i in range(1, 11):\n    print('{} x {} = {}'.format(number, i, number*i))\n\n# Output\n# 5 x 1 = 5\n# 5 x 2 = 10\n# 5 x 3 = 15\n# 5 x 4 = 20\n# 5 x 5 = 25\n# 5 x 6 = 30\n# 5 x 7 = 35\n# 5 x 8 = 40\n# 5 x 9 = 45\n# 5 x 10 = 50", "category": "Python"}, {"instruction": "Generate a random 8 character password using the following conditions:", "input": "", "output": "import random\nimport string\n\ndef generatePassword():\n    chars = string.ascii_letters + string.digits + '!@#$%^&*/.:?|'\n    size = 8\n    random_string = \"\".join(random.choice(chars) for _ in range(size))\n    return random_string\n\nrandom_password = generatePassword()\nprint(random_password) # qr6.h^37", "category": "Python"}, {"instruction": "Assign a variable 'name' with a value of your choice in JavaScript.", "input": "", "output": "let name = \"John\";", "category": "Python"}, {"instruction": "Design and code a HTML table that displays a list of students.", "input": "", "output": "<table>\n  <thead>\n    <tr>\n      <th>Student Name</th>\n      <th>Student ID</th>\n      <th>Class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>John Smith</td>\n      <td>12345</td>\n      <td>Freshman</td>\n    </tr>\n    <tr>\n      <td>Mary Jones</td>\n      <td>45678</td>\n      <td>Sophomore</td>\n    </tr>\n  </tbody>\n</table>", "category": "Python"}, {"instruction": "Create a Python script that takes a list of numbers as an argument and returns the maximum number in the list.", "input": "numbers = [8, 1, 2, 3, 4, 5, 6, 7]", "output": "def maximum_number(numbers):\n    max_number = numbers[0]\n\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_num:\n            max_number = numbers[i]\n    \n    return max_number\n\nmax_number = maximum_number(numbers)\nprint(max_number) # 8", "category": "Python"}, {"instruction": "Write a function that creates a random 4 digit pin using the following criteria:", "input": "", "output": "def generate_pin():\n    import random\n    numbers = [str(i) for i in range(10)]\n    random.shuffle(numbers)\n    return \"\".join(numbers[:4])", "category": "Python"}, {"instruction": "Code a HTML form that collects the user's first name, last name, age, email address and an optional message.", "input": "", "output": "<form>\n  <input type=\"text\" name=\"first_name\" placeholder=\"First name\">\n  <input type=\"text\" name=\"last_name\" placeholder=\"Last name\">\n  <input type=\"number\" name=\"age\" placeholder=\"Age\">\n  <input type=\"email\" name=\"email\" placeholder=\"Email address\">\n  <textarea name=\"message\" placeholder=\"Optional message\"></textarea>\n  <input type=\"submit\">\n</form>", "category": "Python"}, {"instruction": "Create a while loop in Python to print all odd numbers between two numbers A and B (both inclusive).", "input": "", "output": "a = int(input(\"Enter lower range: \"))\nb = int(input(\"Enter upper range: \"))\n\nwhile a <= b: \n    if a % 2 != 0: \n        print(a) \n    a += 1", "category": "Python"}, {"instruction": "Explain why the following CSS element is not displaying correctly.", "input": "<div class=\"container\">\n  <div class=\"my-element\" style=\"position: absolute;></div>\n</div>", "output": "The \"my-element\" element is not displaying correctly because it is positioned absolutely, which removes it from the normal flow of the document. As a result, its containing \"container\" is not aware of the element's size and is unable to accurately position it. In order to fix this issue, the \"position\" value should be changed to \"relative\" or \"static\" to render the element correctly within its container.", "category": "Python"}, {"instruction": "Describe what the following C++ code does.", "input": "int val = 0, sum = 0;\n\nfor (int i = 0; i < sizeof(arr) / sizeof(arr[0]); i++) {\n    val = arr[i] * i;\n    sum += val;", "output": "This C++ code iterates through an array of values and calculates the sum of each value multiplied by its index in the array. So for the array [1,2,3], the value 0 would be multiplied by index 0, and the value 1 would be multiplied by index 1, and the value 3 would be multiplied by index 2. This loop would then produce the result of 0 + 2 + 6, which is 8.", "category": "Python"}, {"instruction": "Create an HTML page that displays a table of the 10 most visited countries.", "input": "Country | Number of Visitors\nUnited States| 206 million\nChina | 61 million\nSpain | 82 million\nUnited Kingdom | 37 million\nGermany | 37 million\nFrance | 86 million\nItaly | 58 million\nTurkey | 39 million\nJapan | 28 million\nRussia | 28 million", "output": "<html>\n<head>\n  <title>Top 10 Visited Countries</title>\n</head>\n<body>\n  <h1>Top 10 Visited Countries</h1>\n  <table>\n    <thead>\n      <th>Country</th>\n      <th>Number of Visitors</th>\n    </thead>\n    <tbody>\n      <tr>\n        <td>United States</td>\n        <td>206 million</td>\n      </tr>\n      <tr>\n        <td>China</td>\n        <td>61 million</td>\n      </tr>\n      <tr>\n        <td>Spain</td>\n        <td>82 million</td>\n      </tr>\n      <tr>\n        <td>United Kingdom</td>\n        <td>37 million</td>\n      </tr>\n      <tr>\n        <td>Germany</td>\n        <td>37 million</td>\n      </tr>\n      <tr>\n        <td>France</td>\n        <td>86 million</td>\n      </tr>\n      <tr>\n        <td>Italy</td>\n        <td>58 million</td>\n      </tr>\n      <tr>\n        <td>Turkey</td>\n        <td>39 million</td>\n      </tr>\n      <tr>\n        <td>Japan</td>\n        <td>28 million</td>\n      </tr>\n      <tr>\n        <td>Russia</td>\n        <td>28 million</td>\n      </tr>\n    </tbody>\n  </table>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create a JavaScript program to toggle a boolean value.", "input": "", "output": "function toggleBoolean(val) {\n  return !val\n}", "category": "Python"}, {"instruction": "Write an algorithmic query in SQL to find the number of days since each employee joined the organization.", "input": "", "output": "SELECT name, DATEDIFF(NOW(), date_joined) AS days_since_joining FROM Employees;", "category": "Python"}, {"instruction": "Using the MapReduce programming model, calculate the total number of purchases in a given dataset.", "input": "", "output": "def purchaseMapper(purchase):\n  return (purchase.entity_id, 1)\n\ndef purchaseReducer(entity, purchases):\n  return (entity, sum(purchases))", "category": "Python"}, {"instruction": "Create an HTML page with a form to sign up for a newsletter.", "input": "", "output": "<html>\n<head>\n  <title>Newsletter Sign Up</title>\n</head>\n<body>\n  <form action=\"submit.html\" method=\"POST\">\n    <h1>Newsletter Sign Up</h1>\n    Name: <input type=\"text\" name=\"name\"><br>\n    Email: <input type=\"email\" name=\"email\"><br>\n    <input type=\"submit\" value=\"Submit\">\n  </form>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create a SQL query to select the name and email of employees with an id in the range [10, 20].", "input": "", "output": "SELECT name, email FROM Employees WHERE id BETWEEN 10 AND 20;", "category": "Python"}, {"instruction": "Fix the following JavaScript bug.", "input": "function helloWorld() {\n  console.log('Hello' + 'World')", "output": "function helloWorld() {\n  console.log('Hello' + ' ' + 'World')", "category": "Python"}, {"instruction": "Write code to increment the value in the variable \"x\" by 3.", "input": "", "output": "x = x + 3;", "category": "Python"}, {"instruction": "Generate an XML format to store the contact information of a customer", "input": "Name: John Smith\nPhone: 123456789\nEmail: john@example.com", "output": "<contact>\n <name>John Smith</name>\n <phone>123456789</phone>\n <email>john@example.com</email>\n</contact>", "category": "Python"}, {"instruction": "Design a class to represent a string with length 20 characters", "input": "", "output": "public class String20 { \n   private String str;\n   private int length;\n\n   public String20(String str)  \n   {  \n      this.length = 20;\n      this.str = str.length()<=length ? str : str.substring(0, length);  \n   }  \n}", "category": "Python"}, {"instruction": "Write a short JavaScript program to detect browser type.", "input": "", "output": "function detectBrowser() { \n        // return the browser version \n        var browserName = navigator.appName;\n        var browserVersion = navigator.appVersion;\n        return (browserName + \" \" + browserVersion);\n    }", "category": "Python"}, {"instruction": "Given a Python dictionary with integer keys, write a function to convert the dictionary into a list of tuples.", "input": "d = {1: 'a', 2: 'b'}", "output": "def dict_to_tuple(d):\n  return list(d.items())", "category": "Python"}, {"instruction": "Create an XML structure with the root element \"recipes\".", "input": "", "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<recipes>\n\n</recipes>", "category": "Python"}, {"instruction": "Create a MySQL statement to find the row with the lowest value in a column \"Price\".", "input": "", "output": "SELECT * \nFROM table\nORDER BY Price ASC\nLIMIT 1;", "category": "Python"}, {"instruction": "Edit the following HTML markup to add a \"Welcome!\" heading.", "input": "<section>\n <span>This is a sample section</span>\n</section>", "output": "<section>\n <h1>Welcome!</h1>\n <span>This is a sample section</span>\n</section>", "category": "Python"}, {"instruction": "Write a Bash script that checks if a given directory exists.", "input": "", "output": "if [ -d \"$1\" ]; then\n  echo \"The directory exists.\"\nelse\n  echo \"The directory does not exist.\"\nfi", "category": "Python"}, {"instruction": "Write a Node.js script that takes an array of numbers [1,3,7] and multiplies each number by 2.", "input": "", "output": "let numbers = [1,3,7];\nlet result = numbers.map(number => number * 2);\nconsole.log(result);", "category": "Python"}, {"instruction": "Find the average of a given list of numbers in Java.", "input": "int[] numbers = {2, 4, 6};", "output": "int sum = 0;\nfor (int number : numbers) {\n sum += number;\n}\nint average = sum / numbers.length;", "category": "Python"}, {"instruction": "Create a Python class called \"Person\" with name and age as attributes.", "input": "", "output": "class Person:\n def __init__(self, name, age):\n     self.name = name\n     self.age = age", "category": "Python"}, {"instruction": "Write a short SQL query to find the row with the highest value in a column \"Quantity\".", "input": "", "output": "SELECT *\nFROM table\nORDER BY Quantity DESC\nLIMIT 1;", "category": "Python"}, {"instruction": "Given a JavaScript string, replace all instances of the word \"today\" with the word \"tomorrow\".", "input": "let str = \"Today is a great day.\"", "output": "let str = \"Tomorrow is a great day.\"", "category": "Python"}, {"instruction": "What are the differences between a class and an object?", "input": "", "output": "A class is a blueprint or template for objects. It is a definition of the object\u2019s properties, methods and behaviors. An object is an instance of a class, meaning it takes on the properties, methods and behaviors defined by the class. A class can have multiple objects, and each object can have different values for its properties. Objects allow us to model real-world objects in software.", "category": "Python"}, {"instruction": "Construct a program to remove leading zeros from a string.", "input": "'00abc'", "output": "def remove_leading_zeros(str):\n    return str.lstrip('0')", "category": "Python"}, {"instruction": "Can you explain the bubble sort algorithm?", "input": "", "output": "Bubble sort is a simple sorting algorithm which iterates through a list and compares adjacent elements, swapping them if they are in the incorrect order. This process is repeated until the list is sorted in its correct order. It is a slow algorithm as it requires multiple iterations of the list, but it is simple to understand and implement.", "category": "Python"}, {"instruction": "Create a function to return the largest element from a list.", "input": "[3, 9, 6, 2, 5]", "output": "def largest_element(lst):\n    largest = lst[0]\n    for num in lst:\n        if num > largest:\n            largest = num\n    return largest", "category": "Python"}, {"instruction": "Edit the following string by replacing the spaces with an underscore.", "input": "This is a sample string", "output": "This_is_a_sample_string", "category": "Python"}, {"instruction": "What is the purpose of declaring an enum in Java?", "input": "", "output": "The purpose of declaring an enum in Java is to clearly identify a set of related constants that can be tracked. Enums are used to define a special type that contains a fixed set of constants. Enums provide type safety and make the code more self-documenting. They also make it easier for the compiler to check for correct usage since enums can be easily identified.", "category": "Python"}, {"instruction": "Write a Java program to find the 10 numbers closest to the given number.", "input": "50", "output": "import java.util.Arrays; \n\nclass CloseNumber { \n    \n    // function to find 10 numbers closest to x \n    static void closeNums(int x, int arr[], int n) \n    { \n        // array which stores 10 numbers \n        // closest to x \n        int result[] = new int[10]; \n        int index = 0; \n  \n        // initialize difference between \n        // x and arr[i] \n        int dif = Integer.MAX_VALUE; \n  \n        // traverse in the array and \n        // find the 10 closest numbers \n        for (int i = 0; i < n; i++) { \n            if (x == arr[i]) \n                continue; \n            if (Math.abs(x - arr[i]) < dif) { \n                result[index++] = arr[i]; \n                if (index == 10) { \n                    Arrays.sort(result); \n                    index--; \n                } \n  \n                // update dif \n                if (index > 0) \n                    dif = Math.abs(x - result[index - 1]); \n            } \n        } \n  \n        // print the 10 closest numbers \n        for (int i = 0; i < 10; i++) \n            System.out.print(result[i] + \" \"); \n    } \n  \n    // Driver Code \n    public static void main(String[] args) \n    { \n        int arr[] = { 43, 3, 11, 15, 78, \n                    88, 24, 50, 36, 44 }; \n        int x = 50; \n  \n        int n = arr.length; \n        closeNums(x, arr, n); \n    } \n}", "category": "Python"}, {"instruction": "Create a C++ function to print all possible paths from top left to bottom right of a MxN matrix.", "input": "", "output": "#include <iostream> \n  \n// Maximum size of the matrix \n#define M 4 \n#define N 4 \n  \n// Function to Print all the paths from top left to bottom right \nvoid printPathsUtil(int mat[M][N], int x, int y, int m, int n, int path[M][N]) \n{ \n   // Reached the bottom of the matrix so we are left with \n   // only option to move right \n   if (x == m - 1) \n   { \n      for (int j = y; j < n; j++) \n         path[x][j] = mat[x][j]; \n  \n      for (int i = 0; i < m; i++) \n      { \n         for (int j = 0; j < n; j++) \n            std::cout << path[i][j] << \" \"; \n         std::cout << std::endl; \n      } \n  \n      return; \n   } \n  \n   // Reached the right corner of the matrix we are left with \n   // only the downward movement. \n   if (y == n - 1) \n   { \n      for (int i = x; i < m; i++) \n         path[i][y] = mat[i][y]; \n  \n      for (int i = 0; i < m; i++) \n      { \n         for (int j = 0; j < n; j++) \n            std::cout << path[i][j] << \" \"; \n         std::cout << std::endl; \n      } \n  \n      return; \n   } \n  \n   // Add the current cell to the path being generated \n   path[x][y] = mat[x][y]; \n  \n   // Print all the paths that are possible after moving down \n   printPathsUtil(mat, x + 1, y, m, n, path); \n  \n   // Print all the paths that are possible after moving right \n   printPathsUtil(mat, x, y + 1, m, n, path); \n  \n   // Remove the current cell from the path[] \n   path[x][y] = 0; \n} \n  \n// Function to print all paths from top left to bottom right in a \n// given two dimensional array \nvoid printPaths(int mat[M][N], int m, int n) \n{ \n   // Create an array to store paths \n   int path[M][N]; \n  \n   // Initialize the path array to all -1's \n   for (int i = 0; i < m; i++) \n      for (int j = 0; j < n; j++) \n         path[i][j] = -1; \n  \n   // Call to print all paths \n   printPathsUtil(mat, 0, 0, m, n, path); \n} \n \nint main() \n{ \n   int mat[M][N] = { {1, 2, 3, 4}, \n                     {5, 6, 7, 8}, \n                     {9, 10, 11, 12}, \n                     {13, 14, 15, 16} }; \n   \n   // Print all paths \n   printPaths(mat, M, N); \n  \n   return 0; \n}", "category": "Python"}, {"instruction": "What is the time complexity of insertion sort algorithm in big O notation?", "input": "", "output": "O(n^2).", "category": "Python"}, {"instruction": "Implement a linear search algorithm in C language that takes an array and a value as input and returns the index of the value\u2019s first occurrence in the given array.", "input": "Array: [3, 4, 6, 9, 10]\nvalue: 9", "output": "int linearSearch(int array[], int size, int key)\n{\n  for (int i = 0; i < size; i++) {\n    if (array[i] == key) \n      return i;\n  }\n  return -1;\n}", "category": "Python"}, {"instruction": "Create an object data structure in JavaScript to represent a student and store details such as student's name, age, gender, and program.", "input": "", "output": "let student = {\n  name: '',\n  age: 0,\n  gender: '',\n  program: ''\n};", "category": "Python"}, {"instruction": "Write a code snippet using Python to print the following sentence \"Programming is fun!\".", "input": "", "output": "print(\"Programming is fun!\")", "category": "Python"}, {"instruction": "Write a Python code snippet to calculate the area of a triangle with side lengths 3, 4, and 5.", "input": "", "output": "def area(a, b, c):\n    s = (a + b + c) / 2\n    return (s*(s-a)*(s-b)*(s-c)) ** 0.5\n\nprint(area(3, 4, 5)) # 6.0", "category": "Python"}, {"instruction": "Write a Java program to read an array of strings and sort them lexicographically (alphabetically).", "input": "String[] arr = {\"apple\", \"cat\", \"hello\"};", "output": "import java.util.Arrays;\n\npublic class SortStrings {\n    \n    public static void main(String[] args) {\n        String[] arr = {\"apple\", \"cat\", \"hello\"};\n        Arrays.sort(arr);\n        for(String s: arr){\n            System.out.println(s);\n        }\n    }\n}\n\n// Output:\napple\ncat\nhello", "category": "Python"}, {"instruction": "Write a Java program to find the common elements between two arrays.", "input": "int[] arr1 = {1, 2, 3, 4, 5}\nint[] arr2 = {2, 5, 6, 7}", "output": "import java.util.Arrays;\n\npublic class CommonElements {\n    \n    public static void main(String[] args) {\n        int[] arr1 = {1, 2, 3, 4, 5};\n        int[] arr2 = {2, 5, 6, 7};\n        \n        for(int i=0; i < arr1.length; i++){\n            for(int j = 0; j < arr2.length; j++) \n                if(arr1[i] == arr2[j]) \n                    System.out.println(arr1[i]);\n        }\n    }\n}", "category": "Python"}, {"instruction": "What is the output of the following code?\n\nlist1 = [1, 2, 3]\nlist2 = list1\nlist1[0] = 'a'", "input": "", "output": "The output of the code is ['a', 2, 3] because list2 is just a reference to the same object as list1, so when list1 is changed the changes are reflected in the list2 as well.", "category": "Python"}, {"instruction": "Write a SQL query to list the names, address, and phone numbers of all customers in the \u2018customer\u2019 table.", "input": "", "output": "SELECT name, address, phone_number FROM customer;", "category": "Python"}, {"instruction": "Use jQuery to toggle a div with the class 'hide'", "input": "", "output": "$('.hide').toggle();", "category": "Python"}, {"instruction": "Compute the average of a group of numbers", "input": "[10, 13, 45, 36, 27]", "output": "double average = 0;\nfor (int i = 0; i < numbers.length; i++) {\n    average += numbers[i];\n} \naverage /= numbers.length;", "category": "Python"}, {"instruction": "Convert a LinkedList to an array of objects", "input": "", "output": "Object[] array = linkedList.toArray();", "category": "Python"}, {"instruction": "Generate a JavaScript program to check if a number is within a given range", "input": "Lower bound x = 10 \nUpper bound y = 20", "output": "function withinRange(number, x, y) \n{\n    return (number >= x && number <= y);\n}", "category": "Python"}, {"instruction": "Determine the sum of the squares of all even numbers in a given array.", "input": "[1, 2, 3, 4, 5, 6]", "output": "int sum = 0;\nfor (int i = 0; i < array.length; i++){\n    if (array[i] % 2 == 0){\n        sum += Math.pow(array[i], 2);\n    }\n}\nreturn sum;", "category": "Python"}, {"instruction": "Write an R program to find the square of a number", "input": "", "output": "x <- 5\nsquare_x <- x * x;\nprint(paste0('The square of ',x,' is ',square_x))", "category": "Python"}, {"instruction": "What is the purpose of an immutable object in Python?", "input": "", "output": "The purpose of an immutable object in Python is to make sure that once an object is created, it cannot be modified. This is useful when data must not change between multiple parts of a program. Immutable objects can also help ensure thread safety by preventing different threads from modifying the same data.", "category": "Python"}, {"instruction": "Create a .Net console application to print a greeting according to the user\u2019s input", "input": "", "output": "Console.WriteLine(\"What is your name?\");\nstring name = Console.ReadLine();\n\nif (name == \"John\")\n    Console.WriteLine(\"Hello John!\");\nelse if (name == \"Sarah\")\n    Console.WriteLine(\"Good morning Sarah!\"); \nelse\n    Console.WriteLine(\"Hi there!\");", "category": "Python"}, {"instruction": "Rearrange the given array in an ascending order using selection sort algorithm.", "input": "Array: [2, 8, 5, 3, 9]", "output": "function SelectionSort(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    let min = i;\n    for (let j = i+1; j < arr.length; j++) {\n      if (arr[j] < arr[min])\n        min = j;\n    }\n    let temp = arr[i];\n    arr[i] = arr[min];\n    arr[min] = temp;\n  } \n  return arr;\n}\n\nSelectionSort([2, 8, 5, 3, 9]); // Output: [2, 3, 5, 8, 9]", "category": "Python"}, {"instruction": "Create a function to merge two dictionaries in Python.", "input": "", "output": "def merge_dicts(dict1, dict2):\n    merged_dict = {**dict1, **dict2}\n    return merged_dict", "category": "Python"}, {"instruction": "Generate a program to convert a date in the format 'dd/mm/yyyy' to a date in the format 'yyyy/mm/dd'.", "input": "02/12/2020", "output": "def convert_date(date):\n  date_list = date.split('/')\n  return '{}/{}/{}'.format(date_list[2],date_list[1],date_list[0])", "category": "Python"}, {"instruction": "Given a list of lists, find the longest sublist.", "input": "list = [[1,2,3], [2,3,4,5], [4,5,6]]", "output": "def find_longest_sublist(list):\n    longestList = []\n    for subList in list:\n        if len(subList) > len(longestList):\n            longestList = subList\n    return longestList", "category": "Python"}, {"instruction": "Given a string, find the word with the longest length.", "input": "input_string = \"Hello World\"", "output": "def find_longest_word(input_string):\n    longest_word = ''\n    for word in input_string.split():\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word", "category": "Python"}, {"instruction": "Write a code to calculate the average of three given integers", "input": "", "output": "def calculate_average(a,b,c):\n    return (a+b+c)/3", "category": "Python"}, {"instruction": "Find the most frequent character in an inputted string.", "input": "input_string = \"Hello, world\"", "output": "def find_most_frequent_character(input_string):\n    char_count_dict = {}\n    for char in input_string:\n        if char in char_count_dict.keys():\n            char_count_dict[char] += 1\n        else:\n            char_count_dict[char] = 1\n    max_count = 0\n    max_char = ''\n    for char in char_count_dict.keys():\n        if char_count_dict[char] > max_count:\n            max_count = char_count_dict[char]\n            max_char = char\n    return max_char", "category": "Python"}, {"instruction": "Edit the code to check whether the given number is a triangle number.", "input": "def is_triangle_number(num):\n    return num == num", "output": "def is_triangle_number(num):\n    number = 0\n    for i in range(num+1):\n        number += i\n        if number == num:\n            return True\n    return False", "category": "Python"}, {"instruction": "Write a code line to loop over an array of strings.", "input": "arr = [\"a\", \"b\", \"c\", \"d\"]", "output": "arr.forEach(string => {\n   // code\n});", "category": "Python"}, {"instruction": "What is the name of the attribute for creating a hover effect for an element in CSS?", "input": "", "output": "The attribute used in CSS to create a hover effect for an element is the ':hover' pseudo-class.", "category": "Python"}, {"instruction": "Output the 3 world most populous cities", "input": "", "output": "The world's three most populous cities are Tokyo (37.4 million), Delhi (29.8 million) and Shanghai (26.3 million).", "category": "Python"}, {"instruction": "Extract the first 4 characters from the string \"Hello World\".", "input": "string = \"Hello World\"", "output": "Substring = \"Hell\".", "category": "Python"}, {"instruction": "Compare the following two strings and list the differences.", "input": "string1 = \"Hello World\"\nstring2 = \"Hello World!\"", "output": "The strings are different as the second string has an exclamation mark at the end.", "category": "Python"}, {"instruction": "In the following snippet, make the necessary changes to store the result as a float value", "input": "a = 5\nb = 20\nresult = a / b;", "output": "a = 5\nb = 20\nresult = float(a / b);", "category": "Python"}, {"instruction": "Write a query to extract data from a table called \"inventory\" which contains the columns: id, item, quantity", "input": "", "output": "SELECT id, item, quantity\nFROM inventory", "category": "Python"}, {"instruction": "Write a code snippet to declare two string variables.", "input": "", "output": "string1 = \"a\"\nstring2 = \"b\"", "category": "Python"}, {"instruction": "Create a CSS rule to make the text of an element bold.", "input": "", "output": "font-weight: bold;", "category": "Python"}, {"instruction": "Generate a function to implement the following purpose in Java", "input": "Find the square root of a number", "output": "public static double squareRoot(double x) { \n    return Math.sqrt(x);\n}", "category": "Python"}, {"instruction": "Find all occurrences of a substring in a given string.", "input": "string = \"the cat in the hat\"\nsubstring = \"cat\"", "output": "def find_substring_occurrences(string, substring):\n    occurrence_list = []\n    index = 0\n    while string.find(substring, index) != -1:\n        index = string.find(substring, index)\n        occurrence_list.append(index)\n        index += 1\n    return occurrence_list", "category": "Python"}, {"instruction": "Edit the code to add each item to a dictionary.", "input": "def add_to_dict(input_dict, key, value):\n    return", "output": "def add_to_dict(input_dict, key, value):\n    if key in input_dict:\n        input_dict[key].append(value)\n    else:\n        input_dict[key] = [value]\n    return input_dict", "category": "Python"}, {"instruction": "Create a program that prints out an Egyptian multiplication table up to twelve", "input": "", "output": "def print_egyptian_table():\n    print(\"Egyptian Multiplication Table\")\n    print(\"----------------------------\")\n\n    for i in range(1,13):\n        for j in range(1,13):\n            product = i * j\n            print(f\"{i} x {j} = {product}\")\n        print(\"----------------------------\")\n\nif __name__ == \"__main__\":\n    print_egyptian_table()", "category": "Python"}, {"instruction": "Generate a function that takes a list of strings and returns a list that includes capitalized version of all strings", "input": "['hello', 'world', 'my', 'name', 'is']", "output": "def capitalize_list(words):\n    \"\"\"This function takes a list of strings and returns a list that \n    includes capitalized version of all strings\n    \"\"\"\n\n    capitalized_list = []\n\n    for word in words:\n        capitalized_word = word.capitalize()\n        capitalized_list.append(capitalized_word)\n    \n    return capitalized_list", "category": "Python"}, {"instruction": "Create a React component to accept a list of items and render them in a table.", "input": "", "output": "import React from 'react';\n\nfunction TableComponent(props) {\n  const items = props.items;\n  const tableRows = items.map((row, index) => (\n    <tr key={index}>\n      {row.map((cell, index) => <td key={index}>{cell}</td>)}\n    </tr>\n  ));\n  return (\n    <table>\n      <tbody>{tableRows}</tbody>\n    </table>\n  );\n}\n\nexport default TableComponent;", "category": "Python"}, {"instruction": "Use the given function to detect if a given string is a palindrome.", "input": "", "output": "def is_palindrome(str):\n    reversedStr = str[::-1]\n    if reversedStr == str:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Write an SQL query to find the total number of books in the library.", "input": "", "output": "SELECT COUNT(*) FROM books;", "category": "Python"}, {"instruction": "Use the given function to generate a random password of the specified length.", "input": "", "output": "import random\n\ndef generate_password(length):\n    alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'\n    password = ''\n    for i in range(length):\n        password += random.choice(alphabet)\n    return password", "category": "Python"}, {"instruction": "Write a Python program to print the multiplication table of a number.", "input": "", "output": "def print_mult_table(n):\n    for i in range(1, 11):\n        print('{} x {} = {}'.format(n, i, n*i))", "category": "Python"}, {"instruction": "Replace the \"TODO\" with the appropriate code for implementing a binary search algorithm in Python.", "input": "# TODO", "output": "def binarySearch(arr, target):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == target:\n            return mid\n\n        elif arr[mid] < target:\n            low = mid + 1\n\n        else:\n            high = mid - 1\n\n    return -1", "category": "Python"}, {"instruction": "Use the given function to convert an integer to a string.", "input": "int num = 5", "output": "def int_to_string(num):\n    return str(num)", "category": "Python"}, {"instruction": "Create a function to generate a list of all prime numbers in a given range.", "input": "", "output": "def prime_nums(n): \n    prime_list = [] \n    for i in range(2, n + 1): \n        for j in range(2,i): \n            if (i % j) == 0: \n                break\n        else: \n            prime_list.append(i)\n    return prime_list", "category": "Python"}, {"instruction": "Generate a code that concatenates a reversed copy of a given string to itself.", "input": "Python", "output": "def concatenate_reversed(s):\n    \"\"\"This function takes a string as input and concatenates a reversed copy of it to itself\"\"\"\n    return s + s[::-1]", "category": "Python"}, {"instruction": "Create a code to find all prime numbers between 2 and a given integer.", "input": "", "output": "def find_primes_below(n):\n    \"\"\"This function finds all prime numbers between 2 and a given integer\"\"\"\n    primes = [True] * n\n    primes[0], primes[1] = False, False\n\n    # Find prime numbers\n    for i, is_prime in enumerate(primes):\n      if is_prime:\n        for num in range(i*i, n, i):\n            primes[num] = False\n\n    # Filter out primes\n    return [i for i, prime in enumerate(primes) if prime]", "category": "Python"}, {"instruction": "Generate code to generate a random number between 0 and 5, both inclusive.", "input": "", "output": "import random\n\ndef random_num0_to_5():\n    \"\"\"This function generates a random number between 0 and 5, both inclusive\"\"\"\n    return random.randint(0, 5)", "category": "Python"}, {"instruction": "Write code for sorting an array in-place.", "input": "", "output": "def quicksort(arr):\n    \"\"\"This function takes an array as parameter and sorts it in-place\"\"\"\n    if len(arr) <= 1:\n        return\n    pivot = arr[0]\n    left, right = [], []\n    for i in range(1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    quicksort(left)\n    quicksort(right)\n    arr[:] = left + [pivot] + right", "category": "Python"}, {"instruction": "Write code to assign a variable the value of the cube of 5.", "input": "", "output": "cube_of_5 = 5**3 # assign a variable the value of the cube of 5.", "category": "Python"}, {"instruction": "Create an algorithm that finds the maximum element of an array.", "input": "[2, 3, 5, 1, 4]", "output": "def find_max_element(arr):\n    \"\"\"This function takes an array and returns the maximum element\"\"\"\n    max_el = arr[0]\n    for el in arr:\n        if el > max_el:\n            max_el = el\n    return max_el", "category": "Python"}, {"instruction": "Create a function that takes in a list of strings and returns a new list of only the strings longer than 4 characters.", "input": "['Python', 'JavaScript', 'C++', 'Scala', 'Haskell']", "output": "def filter_long_words(str_list):\n    \"\"\"This function takes a list of strings and returns a new list of only the strings longer than 4 characters\"\"\"\n    result = []\n    for word in str_list:\n        if len(word) > 4:\n            result.append(word)\n    return result", "category": "Python"}, {"instruction": "Suggest two input values for the following code snippet such that it generates the output '2, 4'.", "input": "x = int(input())\ny = int(input())\nprint(x*2, y*2)", "output": "The two input values that generate the output '2, 4' are x = 1, y = 2.", "category": "Python"}, {"instruction": "Write a python program to determine whether a given number is a perfect square or not.", "input": "", "output": "def is_perfect_square(n):\n    \"\"\"This function takes a number as input and determines whether it is a perfect square or not\"\"\"\n    i = 1\n    while i*i < n:\n        i += 1\n    if i*i == n:\n        return True\n    return False", "category": "Python"}, {"instruction": "Design a data structure using JavaScript to represent a binary tree.", "input": "", "output": "class Node {\n  constructor(data, left = null, right = null) {\n      this.data = data;\n      this.left = left;\n      this.right = right;\n  }\n}\n\nclass BinaryTree {\n  constructor() {\n      this.root = null;\n  }\n}", "category": "Python"}, {"instruction": "Generate a random array of 10 integers using JavaScript.", "input": "", "output": "let randomArray = []; \nfor(let i = 0; i < 10; i++) { \n    randomArray.push(Math.floor(Math.random() * 100)); \n} \nconsole.log(randomArray);", "category": "Python"}, {"instruction": "Write a function in Java to check if a given string is a palindrome (a word, phrase, or sequence that reads the same backward as forward).", "input": "", "output": "public static boolean isPalindrome(String str) {\n  for(int i=0; i<str.length()/2;i++) {\n    if(str.charAt(i) != str.charAt(str.length()-i-1)) \n      return false;\n  }\n  return true;\n}", "category": "Python"}, {"instruction": "Create a Python function to calculate the area of a triangle using Heron\u2019s formula.", "input": "a = 4\nb = 5\nc = 7", "output": "def triangle_area(a, b, c):\n    \"\"\"Calculate the area of a triangle using Heron's formula\"\"\"\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\n\nprint(triangle_area(a, b, c))", "category": "Python"}, {"instruction": "Create a function which takes a string as an input and checks if it is a palindrome.", "input": "string = \"level\"", "output": "def is_palindrome(string): \n    if string == string[::-1]: \n        return True\n    return False\n  \nstring = \"level\"\nresult = is_palindrome(string)\nprint(result)", "category": "Python"}, {"instruction": "Create a function which takes a string and returns a reversed version of it.", "input": "string = \"Hello World!\"", "output": "def reverse_string(string):\n    return string[::-1]\n\nstring = \"Hello World!\"\nresult = reverse_string(string)\nprint(result)", "category": "Python"}, {"instruction": "Our program should accept an arbitrary number of integers and output a list of the largest number from each.", "input": "1 2 3 4 5", "output": "def largest_number(nums):\n    largest = []\n    for num in nums:\n        if len(largest) == 0 or num > largest[-1]:\n            largest.append(num)\n    return largest\n\nnums = [1,2,3,4,5]\nresult = largest_number(nums)\nprint(result)", "category": "Python"}, {"instruction": "Create a function to determine the output of", "input": "def my_func(x):\n    if x == 0:\n        return 1\n    else:\n        return x * my_func(x-1)\n\nx = 5", "output": "def my_func(x):\n    if x == 0:\n        return 1\n    else: \n        return x * my_func (x-1) \n\ndef solve(x): \n    return my_func(x)\n\nx = 5\nresult = solve(x)\nprint(result)", "category": "Python"}, {"instruction": "Identify the data types of the following values:", "input": "name = \"John\"\nage = 25", "output": "name = str\nage = int", "category": "Python"}, {"instruction": "Generate a function which takes three numbers and returns the smallest.", "input": "n1 = 5\nn2 = 10\nn3 = 3", "output": "def get_min(n1, n2, n3):\n    mins = [n1, n2, n3]\n    return min(mins)", "category": "Python"}, {"instruction": "Create a function which takes a list and a value and returns true if the value is present in the list, otherwise false", "input": "list = [1, 2, 3, 4, 5]\nval = 3", "output": "def check_val(lst, val): \n    return val in lst", "category": "Python"}, {"instruction": "Write a Python program to combine the elements of two lists of equal length into a dictionary.", "input": "list1 = ['a', 'b', 'c'] \nlist2 = [1, 2, 3]", "output": "dict = {}\nfor i in range(len(list1)): \n    dict[list1[i]] = list2[i] \n  \nprint(dict)", "category": "Python"}, {"instruction": "Convert this python code into Java code", "input": "my_list = [1, 2, 3, 4, 5]\n\nfor i in my_list:\n    if i % 2 == 0:\n        print(i)", "output": "int[] my_list = {1,2,3,4,5};\n\nfor(int i : my_list){\n   if(i % 2 == 0)\n       System.out.println(i);\n}", "category": "Python"}, {"instruction": "In the following code, identify the list of variables present.", "input": "def f(x):\n    y = 2 * x  \n    z = x ** y \n    w = [x, y, z]\n    return w", "output": "x, y, z, and w", "category": "Python"}, {"instruction": "Identify the names of different classes in the following code snippet.", "input": "class Student: \n    \n    def __init__(self, name, roll_number): \n        self.name = name \n        self.roll_number = roll_number \n        \n    def print_details(self): \n        print(\"Name:\", self.name) \n        print(\"Roll number:\", self.roll_number)", "output": "Student", "category": "Python"}, {"instruction": "Suggest a possible solution to the following problem: Given an array of integers, find the maximum continuous sum that can be achieved by adding the numbers in the array.", "input": "", "output": "A possible solution to the given problem is to use the Kadane's algorithm. This algorithm iterates through the array and at each iteration, it keeps track of the maximum continuous sum seen so far, and updates it accordingly. At the end of the iteration, the algorithm returns the maximum continuous sum.", "category": "Python"}, {"instruction": "Create an algorithm to generate all possible subsets of a given set of elements.", "input": "", "output": "The following algorithm can be used to generate all possible subsets of a given set of elements:\n1. Create an empty list to store the subsets.\n2. Iterate over each element in the given set and for each element:\n     a. Add the element to the list of subsets.\n     b. For each subset in the list:\n        i. Create a new subset with the element added to the existing subset.\n        ii. Add the new subset to the list of subsets.\n3. Return the list of subsets.", "category": "Python"}, {"instruction": "Create a CSS rule that makes all h2's have a blue background color.", "input": "", "output": "h2 {\n    background-color: blue;\n}", "category": "Python"}, {"instruction": "Create a css class to center the text in a given div.", "input": "", "output": ".text-center {\n    text-align: center;\n    margin-left: auto;\n    margin-right: auto;\n}", "category": "Python"}, {"instruction": "Write a Ruby method to check if a given list contains an integer.", "input": "list = [1, 2.5, \"Hello\"]", "output": "def list_contains_integer?(list)\n  list.each do |item|\n    return true if item.is_a? Integer\n  end\n  false\nend\n\nlist_contains_integer?(list)", "category": "Python"}, {"instruction": "Given a list of integers, find the largest number.", "input": "test_list = [2, 5, 10, 15]", "output": "def largest_number(test_list): \n    max_number = test_list[0] \n    for i in test_list: \n        if i > max_number: \n            max_number = i \n    return max_number", "category": "Python"}, {"instruction": "Write a function to print the first n perfect square numbers.", "input": "", "output": "def print_perfect_squares(n):\n    for i in range(1,n+1):\n        square = i*i\n        print(square)", "category": "Python"}, {"instruction": "Write a JS code that returns the items in an alphabetical order.", "input": "let items = [\"Cat\", \"Dog\", \"Elephant\", \"Rabbit\", \"Fox\"]", "output": "let items = [\"Cat\", \"Dog\", \"Elephant\", \"Rabbit\", \"Fox\"]\n\nfunction sortAlphabetically(items) {\n  return items.sort();\n}\n\nlet result = sortAlphabetically(items);\nconsole.log(result);", "category": "Python"}]
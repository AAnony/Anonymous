[{"instruction": "Write a Python function that takes a number n as parameter and prints out all even numbers from 2 to n.", "input": "", "output": "def printEven(n): \n   for i in range(2, n+1): \n      if(i % 2 == 0): \n         print(i, end = \" \")", "category": "Python"}, {"instruction": "Write a C# code snippet to create a list with the following string payload and print it out.", "input": "\"apple\",  \"banana\", \"mango\"", "output": "List<string> fruits = new List<string> { \"apple\", \"banana\", \"mango\" };\n\nforeach (string fruit in fruits)\n{\n   Console.WriteLine(fruit);\n}", "category": "Python"}, {"instruction": "Create a CSS style sheet that changes the font size of all 'h1' tags to \"3rem\".", "input": "", "output": "h1 {\n   font-size: 3rem;\n}", "category": "Python"}, {"instruction": "Create an array in Ruby that contains the following strings: \"cat\",  \"dog\", \"fish\".", "input": "", "output": "arr = [\"cat\", \"dog\", \"fish\"]", "category": "Python"}, {"instruction": "Write a code to find the first two numbers in a list that add up to a given number.", "input": "my_list = [1, 2, 5, 6, 10] \nsum = 8", "output": "def find_two_numbers(my_list, sum):\n    for i in range(len(my_list)):\n        for j in range(i + 1, len(my_list)):\n            if my_list[i] + my_list[j] == sum:\n                return my_list[i], my_list[j]\n\nfind_two_numbers(my_list, sum);", "category": "Python"}, {"instruction": "Create a PHP program that declares a function that takes two parameters. The function should check if the two parameters are equal and if so, return true.", "input": "", "output": "<?php\n   function checkEqual($a, $b) {\n      if ($a == $b) {\n         return true;\n      } else {\n         return false;\n      }\n   }\n?>", "category": "Python"}, {"instruction": "Modify the following Python code to print the program output unique and ordered.", "input": "x = [1, 2, 3, 4, 4, 3, 1]\nprint(x)", "output": "x = [1, 2, 3, 4]\ny = list(set(x))\ny.sort()\nprint(y)", "category": "Python"}, {"instruction": "Generate a graphical representation of a dataset.", "input": "The following data describes the height of students in grade 8:\n\nX: 155 cm , 159 cm , 166 cm , 165 cm, 186 cm\n\nY: 50 kg , 60 kg , 55 kg, 45 kg , 75 kg", "output": "import matplotlib.pyplot as plt\n\nx_list = [155, 159, 166, 165, 186]\ny_list = [50, 60, 55, 45, 75]\n\nplt.scatter(x_list, y_list )\n\nplt.xlabel(\"Height (cm)\")\nplt.ylabel(\"Weight (kg)\")\nplt.title(\"Height vs Weight of Grade 8 Students\")\n\nplt.show()", "category": "Python"}, {"instruction": "Write a JavaScript program that allows the user to input two numbers and shows the bigger number.", "input": "", "output": "function biggestNum(){\nvar num1 = parseInt(prompt(\"Please enter the first number: \")); \nvar num2 = parseInt(prompt(\"Please enter the second number: \")); \n  \nif(num1 > num2){\n  alert(\"The largest number is: \" + num1); \n}\nelse if(num2 > num1){\n  alert(\"The largest number is: \" + num2); \n}\nelse{\n  alert(\"Both numbers are equal.\");\n}\n}\nbiggestNum();", "category": "Python"}, {"instruction": "Design a class in Java that stores the number of letters, numbers, and special characters in a given string.", "input": "", "output": "\"\"\"\nJava class to store the number of letters, numbers and special characters in a given string\n\"\"\"\n\npublic class StringInfo {\n    // Instance Variables \n    int letterCount;\n    int numberCount;\n    int specialCharCount;\n\n    // Constructor to initialize all the instance variables\n    public StringInfo() {\n        this.letterCount = 0;\n        this.numberCount = 0;\n        this.specialCharCount = 0;\n    }\n\n    // A method to find the count of letters, numbers and special characters in a given string\n    public void findCounts(String str) {\n        // Loop through each character in the string\n        for (char c : str.toCharArray()) {\n            if (Character.isLetter(c)) {\n                letterCount++;\n            } else if (Character.isDigit(c)) {\n                numberCount++;\n            } else {\n                specialCharCount++;\n            }\n        }\n    }\n\n    // Accessor methods to get the count of each type of character\n    public int getLetterCount() {\n        return letterCount;\n    }\n\n    public int getNumberCount() {\n        return numberCount;\n    }\n\n    public int getSpecialCharCount() {\n        return specialCharCount;\n    }\n}", "category": "Python"}, {"instruction": "Write a Java method to check if a string is a palindrome (same forwards and backwards).", "input": "string = \"racecar\"", "output": "\"\"\"\nJava method to check if a string is a palindrome \n\"\"\"\n\npublic static boolean isPalindrome(String s) {\n    //base case\n    if(s.length() == 0 || s.length() == 1)\n        return true; \n    if(s.charAt(0) == s.charAt(s.length()-1))\n        return isPalindrome(s.substring(1, s.length()-1));\n\n    //if not match \n    return false; \n}", "category": "Python"}, {"instruction": "Write a Python script to determine how many lowercase letters are in a given string.", "input": "string = \"Hello World!\"", "output": "\"\"\"\nPython script to determine how many lowercase letters are in a given string \n\"\"\"\n\n# Initialize a variable to count the lowercase letters\nlowercase_letter_count = 0\n\n# Loop through each character in the string\nfor char in string:\n    # Check if the character is a lowercase letter\n    if char.islower():\n        # If yes, then increment the counter\n        lowercase_letter_count += 1\n\n# Print the total number of lowercase letters\nprint(lowercase_letter_count)", "category": "Python"}, {"instruction": "Train an AI model to predict whether an email is spam or not.", "input": "", "output": "import nltk\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# loading data\ndata = [('This is an email about about a promotion', 'spam'),\n\t('We want to transfer money to your account', 'spam'),\n\t('This email is about programming', 'not_spam'),\n\t('There is a new version of python', 'not_spam'),\n]\n\n# extracting features\nX, y = [], []\nfor feat, lab in data:\n\tX.append(feat)\n\ty.append(lab)\n\ncv = CountVectorizer()\nX_vect = cv.fit_transform(X)\n\n# training the model\nmodel = MultinomialNB()\nmodel.fit(X_vect, y)\n\n# predicting\nprediction = model.predict(cv.transform([\"This is an email about a discount sale\"]))\nprint(prediction)\n\n# Output\n['spam']", "category": "Python"}, {"instruction": "Create an HTML table that contains the following string values and rows.", "input": "Header1 Header2\nValue1A Value1B\nValue2A Value2B\nValue3A Value3B", "output": "<table>\n   <tr>\n      <th>Header1</th>\n      <th>Header2</th>\n   </tr>\n   <tr>\n      <td>Value1A</td>\n      <td>Value1B</td>\n   </tr>\n   <tr>\n      <td>Value2A</td>\n      <td>Value2B</td>\n   </tr>\n    <tr>\n      <td>Value3A</td>\n      <td>Value3B</td>\n   </tr>\n</table>", "category": "Python"}, {"instruction": "Build a TensorFlow model for classification of a 2-D dataset.", "input": "X = [[1, 2], [3, 4], [5, 6]]\nY = [0, 1, 1]", "output": "\"\"\"\nBuild a TensorFlow model for classification of a 2-D dataset.\n\nInput:\nX = [[1, 2], [3, 4], [5, 6]]\nY = [0, 1, 1]\n\nOutput:\nimport tensorflow as tf\n\n# data\nX = tf.constant([[1, 2], [3, 4], [5, 6]], dtype=tf.float32)\nY = tf.constant([0, 1, 1], dtype=tf.float32)\n\n# model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(2, activation='relu'))\nmodel.add(tf.keras.layers.Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(X, Y, epochs=50, batch_size=3)\n\"\"\"", "category": "Python"}, {"instruction": "Use jquery to dynamically select an element of a given HTML form and change its value.", "input": "Form element: input with id=\"name\"", "output": "$(\"#name\").val(\"John Doe\");", "category": "Python"}, {"instruction": "Generate a code that takes an array of integers and splits them into two equal halves", "input": "arr = [1, 2, 3, 4, 5, 6]", "output": "def split_array(arr):\n    n = len(arr)\n    mid = n//2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    return left_half, right_half", "category": "Python"}, {"instruction": "Create a process to reverse a string without using any built-in functions.", "input": "string = \"Hello world\"", "output": "def reverse_string(string): \n  # Create an empty string \n  rev_string = \"\" \n  \n  # Iterate through the string and build the reversed string \n  for char in string: \n    rev_string = char + rev_string \n  \n  # Return the reversed string \n  return rev_string \n\nprint(reverse_string(string)) # dlrow olleH", "category": "Python"}, {"instruction": "Create an algorithm that uses a hash table to detect if an element is a duplicate.", "input": "array = [2, 3, 4, 5, 6, 3]", "output": "def detect_duplicate(array): \n  # Create a hash table to store elements in the array \n  hash_table = dict() \n  \n  # Iterate through the array, check if the elements are already stored in the hash table  \n  # If the elements are already stored in the hash table, return True \n  for element in array: \n    if element in hash_table: \n      return True \n    else: \n      # Else, add the element to the hash table \n      hash_table[element] = 1\n    \n  # Return False if no duplicates are found \n  return False\n\nprint(detect_duplicate(array)) # True", "category": "Python"}, {"instruction": "Create a process to sort an array of numbers from least to greatest.", "input": "arr = [3, 4, 12, 1, 5, 85]", "output": "def sort_array(arr): \n  # Loop through the array, swap each element until it is in order (ascending)\n  for i in range(len(arr) - 1): \n    for j in range(i + 1, len(arr)): \n      if arr[i] > arr[j]: \n        temp = arr[i] \n        arr[i] = arr[j] \n        arr[j] = temp \n  \n  # Return the sorted array \n  return arr\n\nprint(sort_array(arr)) # [1, 3, 4, 5, 12, 85]", "category": "Python"}, {"instruction": "Write a Python function that takes a string as an argument and checks if it contains the word \u201cPython\u201d.", "input": "text = \"This sentence does not contain the word Python\"", "output": "def contains_python(string): \n  if \"Python\" in string: \n    return True\n  else: \n    return False\n\nprint(contains_python(text)) # False", "category": "Python"}, {"instruction": "Generate a SQL query to update the job title for all the employees with name 'John'", "input": "", "output": "UPDATE employees\nSET JobTitle = 'Software Engineer'\nWHERE Name = 'John'", "category": "Python"}, {"instruction": "Create a web page to display two input fields to enter the two numbers", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Input fields</title>\n</head>\n\n<body>\n    <h1>Input fields to enter two numbers</h1>\n    <form>\n        <p>Enter the first number:<p>\n        <input type=\"number\" name=\"number1\"><br><br>\n        <p>Enter the second number:</p>\n        <input type=\"number\" name=\"number2\"><br><br>\n        <input type=\"submit\" value=\"Submit\">\n    </form>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a shell script to perform a binary search of an array", "input": "[2, 3, 6, 8, 10], 8", "output": "#!/bin/bash\n\narr=(2 3 6 8 10)\ntarget=8\nfunction binary_search()\n{\n   left=0\n   right=${#arr[@]}-1\n   while [ $left -le $right ]\n   do\n      mid=$(( ($left+$right)/2 ))\n      if [ ${arr[$mid]} -eq $target ]\n      then\n         echo \"Number found at position: $(($mid+1))\"\n         return\n      elif [ ${arr[$mid]} -lt $target ]\n      then\n         left=$(($mid + 1))\n      else\n         right=$(($mid - 1))\n      fi\n   done\n   echo \"Number not found!\"\n}\nbinary_search ${arr[@]} $target", "category": "Python"}, {"instruction": "Write a JavaScript program to find the longest common prefix string amongst two given strings?", "input": "\"hello\" and \"heaven\"", "output": "function longestCommonPrefix(str1, str2) {\n    let prefix = '';\n    let min_len = Math.min(str1.length, str2.length);\n    for (let i = 0; i < min_len; i++) {\n        if (str1[i] === str2[i]) {\n            prefix += str1[i];\n        } else {\n            break;\n        }\n    }\n    return prefix;\n}\nlet str1 = 'hello'; \nlet str2 = 'heaven';\nconsole.log(longestCommonPrefix(str1,str2));", "category": "Python"}, {"instruction": "Write a code to construct the following rectangle pattern", "input": "6", "output": "def drawRectangle(size):\n    for i in range(size):\n        print(\"* \" * size) \ndrawRectangle(6)", "category": "Python"}, {"instruction": "Implement a function to calculate the greatest common divisor", "input": "42, 56", "output": "def gcd(a, b):\n    while b > 0:\n        a, b = b, a % b\n    return a\nprint(gcd(42, 56))", "category": "Python"}, {"instruction": "Print the array elements in reverse order using a recursive function in JavaScript", "input": "[1,2,3,4]", "output": "function reversePrintArray(arr) {\n    if (arr.length === 0) {\n        return;\n    }\n    reversePrintArray(arr.slice(1));\n    console.log(arr[0]);\n}", "category": "Python"}, {"instruction": "Write a python function that takes two strings as an argument and returns the True if they are anagrams of each other, else False.", "input": "\"rat\" and \"tar\"", "output": "def check_anagrams(str1,str2):\n    str1_list = list(str1) \n    str1_list.sort() \n    str2_list = list(str2) \n    str2_list.sort() \n    return (str1_list == str2_list) \n  \n# Driver code  \nstr1 = \"rat\"\nstr2 = \"tar\"\nif check_anagrams(str1, str2): \n    print(\"The strings are anagrams.\")\nelse:\n    print(\"The strings aren't anagrams.\")", "category": "Python"}, {"instruction": "Create a new class named 'Book' with the following fields", "input": "Title, Author, Publisher, ISBN, Price", "output": "public class Book {\n    public string Title { get; set; }\n    public string Author { get; set; }\n    public string Publisher { get; set; }\n    public string ISBN { get; set; }\n    public double Price { get; set; }\n}", "category": "Python"}, {"instruction": "Generate a working C program to accept a sentence as an input and count the occurrences of each letter in the sentence", "input": "", "output": "#include <stdio.h>\n#include<string.h>\n\n// function to count the occurrence of letters\nint countOccurrences(char *str)\n{\n    int count = 0;\n    int i;\n    int j;\n    int len = strlen(str);\n\n    // Iterate through each letter in the string\n    for (i = 0; i < len; i++)\n    {\n        int numberCount = 0;\n        // Check if the current character matches with any of the other character\n        for (j = 0; j < len; j++)\n        {\n            if (str[i] == str[j])\n            {\n                numberCount++;\n            }\n        }\n\n        // If number of occurrence of current character is more than 1, then increments 'count'\n        if (numberCount > 1)\n        {\n            count++;\n        }\n    }\n\n    return count;\n}\n\nint main()\n{\n    char str[] = \"This is a sentence\";\n\n    int count = countOccurrences(str);\n    printf(\"\\nNumber of letters having more than one occurrence : %d\\n\", count);\n    return 0;\n}", "category": "Python"}, {"instruction": "Update the given code to generate the correct output", "input": "def func(x, n):\n    s = 0\n    for i in range (n):\n        s += (x**i)\n    return s\n\nOutput: The sum of series x^1 + x^2 + x^3 + ... + x^n is", "output": "def func(x, n):\n    s = 0\n    for i in range (n):\n        s += (x**i)\n    return s\n\ndef generateSumString(x, n):\n    result = \"The sum of series \"\n    for i in range(1, n+1):\n        result += x + \"^\" + str(i)\n        if(i != n):\n            result += \" + \"\n        else:\n            result += \" is\"\n    return result\n\ndef main():\n   x = 4\n   n = 5 \n   print(generateSumString(x, n), func(x,n))\n\nmain()", "category": "Python"}, {"instruction": "Display the multiplication table for a given number.", "input": "num = 6", "output": "def num_mult_table(num): \n  # Iterate through the numbers from 1 to 10 \n  for i in range(1,11): \n    # Print the multiplication table for the given number \n    print(\"{} x {} = {}\".format(num, i, num*i))\n    \nnum_mult_table(num) \n\n# Output \n# 6 x 1 = 6 \n# 6 x 2 = 12 \n# 6 x 3 = 18 \n# 6 x 4 = 24 \n# 6 x 5 = 30 \n# 6 x 6 = 36 \n# 6 x 7 = 42 \n# 6 x 8 = 48 \n# 6 x 9 = 54 \n# 6 x 10 = 60 \n#", "category": "Python"}, {"instruction": "Create a program that implements an autocomplete or predictive search feature.", "input": "words = [\"Apple\", \"App\", \"Application\", \"Applications\", \"Apples\", \"Ace\", \"Acer\"]", "output": "def autocomplete(user_input, words): \n  # Store the output words in a list \n  output = [] \n  \n  # Iterate through the words and check if the user input matches the beginning of the word \n  for word in words: \n    if word.startswith(user_input): \n      output.append(word)\n  \n  # Return the output words \n  return output \n\nprint(autocomplete(\"app\", words)) # [\"App\", \"Application\", \"Applications\", \"Apples\"]", "category": "Python"}, {"instruction": "Write a function that takes a list of strings and joins them together with a pipe (|).", "input": "words = [\"Apple\", \"App\", \"Application\", \"Applications\", \"Apples\", \"Ace\", \"Acer\"]", "output": "def join_strings_with_pipe(words): \n  # Join the words with a pipe \n  return \"|\".join(words)\n\nprint(join_strings_with_pipe(words)) # Apple|App|Application|Applications|Apples|Ace|Acer", "category": "Python"}, {"instruction": "Given a list of integers, return a new list with even numbers doubled.", "input": "lst = [1, 2, 3, 4, 5, 6]", "output": "def double_even_numbers(lst): \n  # Iterate through the list and double the even numbers \n  double_lst = [] \n  for num in lst: \n    if num % 2 == 0: \n      double_lst.append(num * 2) \n    else: \n      double_lst.append(num)\n  \n  # Return the new list \n  return double_lst \n\nprint(double_even_numbers(lst)) # [1, 4, 3, 8, 5, 12]", "category": "Python"}, {"instruction": "Check the human readable date and convert it to the ISO 8601 format.", "input": "Monday, April 7th, 2020", "output": "", "category": "Python"}, {"instruction": "Write a Python function to subtract two given numberss.", "input": "", "output": "def subtract_numbers(num1, num2):\n  return num1 - num2", "category": "Python"}, {"instruction": "Create a function to convert an XML string to a JSON object.", "input": "", "output": "import xmltodict\n\ndef xmlToJsonObject(xmlStr):\n  return xmltodict.parse(xmlStr)", "category": "Python"}, {"instruction": "Write a Python function to filter a given list of strings and return the list with the strings having length greater than the given number.", "input": "list = ['Example', 'cat', 'dog', 'hello', 'word']\nlength = 4", "output": "def filter_list(list, length):\n  return [string for string in list if len(string) > length]", "category": "Python"}, {"instruction": "Write an instruction for a GPT model to generate a response when it is given a given an English sentence as input.", "input": "\"How are you today?\"", "output": "return \"I'm doing great, thank you for asking!\"", "category": "Python"}, {"instruction": "Write a JavaScript program to generate and print multiplication table up to 10.", "input": "", "output": "for(var i = 1; i <= 10; i++) {\n  for(var j = 1; j <= 10; j++) {\n    console.log(i + \" x \" + j + \" = \" + (i*j));\n  }\n}", "category": "Python"}, {"instruction": "Create a function to merge two lists and remove duplicates.", "input": "list1 = [1, 3, 5, 7] \nlist2 = [2, 3, 8, 10]", "output": "def merge_lists(list1, list2):\n  merged_list = list1 + list2\n  return list(dict.fromkeys(merged_list))", "category": "Python"}, {"instruction": "Generate a working React component to parse GEDCOM data.", "input": "", "output": "import React, { useState } from 'react';\n\nconst GEDCOMParser = () => {\n    const [data, setData] = useState();\n\n    const parseGEDCOM = (gedcomData) => {\n        let parsedData = {};\n        gedcomData.split(\"\\n\").forEach(line => {\n            let fields = line.split(\" \");\n            parsedData[fields[1]] = fields[2]\n        });\n        setData(parsedData);\n    }\n\n    return (\n        <React.Fragment>\n            <input\n                type=\"file\"\n                accept=\".ged\"\n                onChange={({ target }) => parseGEDCOM(target.file)}\n            />\n            {data && (\n                <div>\n                    {Object.keys(data).map(key => (\n                        <div key={key}>{key}: {data[key]}</div>\n                    ))}\n                </div>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default GEDCOMParser;", "category": "Python"}, {"instruction": "Using MongoDB and Node.js, create an API to post a new quote to a given collection.", "input": "quote = \"A journey of a thousand miles begins with a single step.\"", "output": "const MongoClient = require('mongodb').MongoClient;\nconst assert = require('assert');\n// Connection URL\nconst url = 'mongodb://localhost:27017';\n// Database Name\nconst dbName = 'QuotesDB';\n\n// Create a new MongoClient\nconst client = new MongoClient(url);\n\n// Use connect method to connect to the Server\nclient.connect(function(err) {\n  assert.equal(null, err);\n  console.log(\"Connected successfully to server\");\n\n  const db = client.db(dbName);\n  db.collection('quotes').insertOne({\"quote\": \"A journey of a thousand miles begins with a single step.\"}, (err, res) => {\n    if (err) {\n        console.log(\"Failed to insert quote\", err);\n    } else {\n        console.log(\"Inserted new quote\");\n    }\n    client.close();\n  });\n\n});", "category": "Python"}, {"instruction": "Use linear regression to predict the price of a car based on its make and model.", "input": "make = ['Mazda', 'Volkswagen', 'Chevrolet']\n model = ['3', 'PASSAT', 'Malibu']", "output": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# load data\ndata = pd.read_csv('cars.csv')\n\n# create feature matrix\nX = data[['make', 'model']]\n\n# set target variable\ny = data['price']\n\n# one-hot encode categorical make and model data\nX = pd.get_dummies(X, columns=['make', 'model'])\n\n# create and fit model\nmodel = LinearRegression()\nmodel.fit(X, y)", "category": "Python"}, {"instruction": "Create a React component which shows a list of items with a delete button for each item.", "input": "", "output": "import React from 'react';\n\nconst ItemList = (props) => {\n  return (\n    <div>\n      {props.items.map((item) => (\n        <div key={item.id} className=\"item\">\n          {item.name} \n          <button\n            className=\"delete-btn\"\n            onClick={() => props.onDeleteItem(item.id)}\n          >\n            Delete\n          </button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ItemList;", "category": "Python"}, {"instruction": "Design an SQL query to select the top 10 most popular movies from a given movie table.", "input": "", "output": "SELECT title, count(*) as cnt \nFROM movie_table \nGROUP BY title \nORDER BY cnt DESC \nLIMIT 10;", "category": "Python"}, {"instruction": "Write a function in Java which takes an array of integers and calculates the average value.", "input": "", "output": "public static double calculateAverage(int[] array)\n{\n    double sum = 0; \n    for(int i = 0; i < array.length; i++) {\n        sum += array[i];\n    }\n    return sum / array.length;\n}", "category": "Python"}, {"instruction": "Create a python script to check if a substring exists in a given string", "input": "", "output": "def is_substring(s1, s2):\n    return s2 in s1", "category": "Python"}, {"instruction": "Generate a script to print out the sum of all even numbers in a given list", "input": "[2, 4, 5, 6, 7, 8]", "output": "def get_sum_of_evens(numbers):\n    sum_of_evens = 0\n    for num in numbers:\n        if num % 2 == 0: \n            sum_of_evens += num\n    return sum_of_evens\n\nnumbers = [2, 4, 5, 6, 7, 8]\nprint(get_sum_of_evens(numbers))", "category": "Python"}, {"instruction": "Write a function to identify the most frequent letter in a string.", "input": "string = \"Hello Universe\"", "output": "from collections import Counter \n\ndef most_frequent_letter(string): \n  # Count the letter frequency \n  words = Counter(string) \n  \n  # Identify the most frequent letter \n  most_common = words.most_common(1)[0][0]\n  \n  # Return the most frequent letter \n  return most_common\n\nprint(most_frequent_letter(string)) # l", "category": "Python"}, {"instruction": "Design a PHP program to check whether two given numbers are equal or not.", "input": "", "output": "<?php\n \nfunction check_equal($num1, $num2) {\n  if($num1 == $num2){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n  \n$num1 = 5; \n$num2 = 5; \n  \n$result = check_equal($num1,$num2);\nif($result) {\n echo \"Numbers are equal\";\n}\nelse {\n echo \"Numbers are not equal\";\n} \n\n?>", "category": "Python"}, {"instruction": "Create an Angular component to display a message and a button.", "input": "message: \"Hello World\"", "output": "@Component({\n  selector: 'app-hello-world',\n  template: `\n    <p>{{ message }}</p>\n    <button>Show Message</button>\n  `\n})\nexport class HelloWorldComponent {\n  message = \"Hello World\";\n}", "category": "Python"}, {"instruction": "Find out the number of odd numbers in an array", "input": "[2, 9, 0, 5, 3]", "output": "def odd_num(arr): \n    count = 0\n    for num in arr: \n        if num % 2 != 0: \n            count += 1\n    return count \n        \n# Test Array \narr = [2, 9, 0, 5, 3] \n# Function Call \nodd_num(arr)", "category": "Python"}, {"instruction": "Create an array in JavaScript to store integers from 1 to 10", "input": "", "output": "var array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Write a shell script to print the unique values from an array.", "input": "[1, 2, 2, 3, 4, 4, 5]", "output": "#!/bin/bash\nInputArray=(1 2 2 3 4 4 5)\n\necho \"Unique values in the array: \" \necho $(echo \"${InputArray[@]}\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')", "category": "Python"}, {"instruction": "Create a program in C to calculate the average of nodes in the given linked list.", "input": "", "output": "int calculateAverage(struct node* head) \n{ \n    if (head == NULL) \n        return 0;\n  \n    int count = 0;\n    int sum = 0;\n  \n    struct node* temp = head; \n    while (temp != NULL){ \n        sum += temp->data; \n        temp = temp->next;\n        count++; \n    } \n    return sum/count; \n}", "category": "Python"}, {"instruction": "Create a function in Java to remove all the values equal to the given number from an array.", "input": "", "output": "public static int[] removeFromArray(int[] arr, int num){\n    int[] newArr = new int[arr.length];\n    int newIndex = 0;\n    \n    for(int i = 0; i < arr.length; i++){\n        if(arr[i] != num){\n            newArr[newIndex] = arr[i];\n            newIndex++;\n        }\n    }\n    return Arrays.copyOfRange(newArr, 0, newIndex);\n}", "category": "Python"}, {"instruction": "Write a JavaScript code that randomly generates a 2D array of size m X n, wherein each element has a random value between 0 and 5.", "input": "", "output": "function genRandom2DArray(m, n){ \n    let result = new Array(m);\n  \n    for (let i = 0; i < m; i++) {\n    result[i] = new Array(n);\n  \n    for (let j = 0; j < n; j++) {\n        result[i][j] = Math.floor(Math.random() * 6);\n    } \n    }\n    return result; \n}", "category": "Python"}, {"instruction": "Output a single string composed of all the characters of the given string, one after the other.", "input": "This is a string", "output": "thisisastring", "category": "Python"}, {"instruction": "Write an algorithm to traverse a binary tree.", "input": "", "output": "def traverseTree(root): \n   if root != None: \n      traverseTree(root.left) \n      print(root.item) \n      traverseTree(root.right)", "category": "Python"}, {"instruction": "Create a CSS class for styling the background of any page red.", "input": "", "output": ".redBackground {\n  background-color: red;\n}", "category": "Python"}, {"instruction": "Write a CSS selector for selecting the first paragraph in any web page.", "input": "", "output": "p:first-of-type {\n  /* styles go here */\n}", "category": "Python"}, {"instruction": "Design a function in PHP that takes two strings as input and return true if the strings are an anagram of each other.", "input": "string1 = \u201clisten\u201d\nstring2 = \u201csilent\u201d", "output": "function checkAnagram(string1, string2) {\n  if(string1.length !== string2.length) {\n    return false;\n  }\n  var charCounter1 = {}, charCounter2 = {};\n\n  for(var  i = 0; i < string1.length; i++) {\n    var char1 = string1[i];\n    var char2 = string2[i];\n\n    if(charCounter1[char1]) {\n      charCounter1[char1]++;\n    } else {\n      charCounter1[char1] = 1;\n    }\n\n    if(charCounter2[char2]) {\n      charCounter2[char2]++;\n    } else {\n      charCounter2[char2] = 1;\n    }\n  }\n\n  for(var char in charCounter1) {\n    if(charCounter1[char] !== charCounter2[char]) {\n      return false;\n    }\n  }\n\n  return true;\n}", "category": "Python"}, {"instruction": "Write an HTML table with four columns consisting of ID, name, email address and phone number.", "input": "", "output": "<table>\n  <tr>\n    <th>ID</th>\n    <th>Name</th>\n    <th>Email Address</th>\n    <th>Phone Number</th>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Create a Python class named 'Student' that contains the name, age and grade of a student.", "input": "", "output": "class Student:\n  def __init__(self, name, age, grade):\n    self.name = name\n    self.age = age\n    self.grade = grade", "category": "Python"}, {"instruction": "Design a function that takes a sentence and returns an array with each word in the sentence as an element.", "input": "", "output": "def sentence_to_array(sentence):\n\u00a0\u00a0\u00a0\u00a0return sentence.split(' ')", "category": "Python"}, {"instruction": "Write a code to print the common elements of two given arrays", "input": "arr1 = [2, 3, 4, 5]\narr2 = [3, 6, 7, 8]", "output": "def common_elements(arr1, arr2):\n    common = []\n    for i in arr1:\n        if i in arr2:\n            common.append(i)\n    return common", "category": "Python"}, {"instruction": "Create a JavaScript program which takes two arguments as strings and returns true if they both have the same length", "input": "", "output": "function sameLength(str1, str2) {\n    if (str1.length == str2.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}", "category": "Python"}, {"instruction": "Design a function that takes a string of HTML tags in an input and removes the tags from the string", "input": "", "output": "def strip_tags(s):\n    tag = False\n    out = \"\"\n    for c in s:\n        if c == \"<\":\n            tag = True\n        elif c == \">\":\n            tag = False\n        elif not tag:\n            out += c\n    return out", "category": "Python"}, {"instruction": "Output a list of all even numbers between two given positive integers m and n.", "input": "m=2, n=10", "output": "def evenNumbers(m,n):\n    evenNum=[]\n    for i in range(m,n+1):\n        if i%2 == 0:\n            evenNum.append(i)\n    return evenNum", "category": "Python"}, {"instruction": "Create a program in Ruby to print out all prime numbers up to a given positive integer m.", "input": "", "output": "def is_prime?(num)\n  is_prime = true\n  for divisor in 2..(num-1)\n    if (num % divisor == 0) \n      is_prime = false\n      break\n    end\n  end\n  return is_prime\nend\n\ndef primes_upto(m)\n  primes = []\n  for n in 2..m\n    primes << n if is_prime?(n)\n  end\n  return primes\nend", "category": "Python"}, {"instruction": "Select all records from the Users table whose age is greater than 18.", "input": "", "output": "SELECT * FROM Users WHERE Age > 18;", "category": "Python"}, {"instruction": "Modify and update the given HTML code to include a background color.", "input": "<html>\n<head>\n  <title>My Page</title>\n</head>\n<body>\n  <h1>My Page</h1>\n</body>\n</html>", "output": "<html>\n<head>\n  <title>My Page</title>\n</head>\n<body style=\"background-color: #FFFFFF;\">\n  <h1>My Page</h1>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write an SQL query to sort records in descending order based on salary", "input": "", "output": "SELECT * FROM Employees ORDER BY salary DESC", "category": "Python"}, {"instruction": "Calculate the sum of squares of the numbers till 10", "input": "", "output": "385", "category": "Python"}, {"instruction": "Write a regular expression to detect phone numbers with country code in a string", "input": "+918327886067", "output": "/\\+\\d{12}/", "category": "Python"}, {"instruction": "With the given input, make a css class which will give a box-shadow with 4px spread radius", "input": "shadow size: 6px;\nshadow color: yellow", "output": ".box-shadow {\n    box-shadow: 0 0 6px 0 yellow;\n}", "category": "Python"}, {"instruction": "Convert a given three-digit number to its binary equivalent", "input": "456", "output": "111001000", "category": "Python"}, {"instruction": "Write a JavaScript code to find all the elements with class 'myclass' in a given HTML page and alert their inner HTML.", "input": "", "output": "let elements = document.getElementsByClassName('myclass');\n\nfor(let i=0; i<elements.length; i++){\n   alert(elements[i].innerHTML);\n}", "category": "Python"}, {"instruction": "In Python, write code to sort a list of integers in ascending order.", "input": "[9, 15, 5, 11, 4]", "output": "def sort_list(list_of_numbers):\n   list_of_numbers.sort()\n   return list_of_numbers\n\nprint(sort_list([9, 15, 5, 11, 4])) # Output: [4, 5, 9, 11, 15]", "category": "Python"}, {"instruction": "Build a HTML page with a section containing two buttons", "input": "", "output": "<html>\n  <head>\n    <title>Button Section</title>\n  </head>\n  <body>\n    <div>\n      <button>First button</button>\n      <button>Second button</button>\n    </div>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write an SQL query to find all the rows in a table containing the number 5.", "input": "", "output": "SELECT * FROM table_name WHERE number = 5;", "category": "Python"}, {"instruction": "Create an HTML form that submits data to a server.", "input": "", "output": "<form action=\"server.php\" method=\"post\">\n   <input type=\"text\" name=\"name\" placeholder=\"Your Name\">\n   <input type=\"text\" name=\"age\" placeholder=\"Your Age\">\n   <button type=\"submit\">Submit</button>\n</form>", "category": "Python"}, {"instruction": "Use CSS to create a text area with the width of 300px and the height of 200px", "input": "", "output": "<style>\n   textarea{\n     width: 300px;\n     height: 200px;\n   }\n</style>", "category": "Python"}, {"instruction": "Write C++ code to create a class 'Fruit' that has two attributes - 'name' and 'color'.", "input": "", "output": "class Fruit {\n   private:\n      string name;\n      string color;\n \n   public:\n      Fruit(string name, string color) {\n         this->name = name;\n         this->color = color;\n      }\n      // other methods to access and manipulate attributes\n};", "category": "Python"}, {"instruction": "Write a lambda expression to find the maximum value of two numbers.", "input": "", "output": "maximum = lambda num1, num2: num1 if num1 > num2 else num2", "category": "Python"}, {"instruction": "Extract a specific key-value pair from the given dictionary", "input": "dic = {\"Name\": \"John\", \"age\": \"27\", \"Address\": \"Street 79\"}", "output": "Age = dic[\"age\"]", "category": "Python"}, {"instruction": "Analyze the following text and label each token", "input": "Romeo loves Juliet.", "output": "[('Romeo', 'NOUN'), ('loves', 'VERB'), ('Juliet', 'NOUN'), ('.', 'PUNCT')]", "category": "Python"}, {"instruction": "Print out a message for an incorrect guess", "input": "", "output": "print(\"Sorry, that's not correct. Please try again\")", "category": "Python"}, {"instruction": "Introduce a condition to change the background color of a given HTML page to green when the user clicks a button.", "input": "", "output": "<script>\n   function changeBackgroundColor() {\n     document.body.style.backgroundColor = 'green';\n   }\n</script>\n<button onclick=\"changeBackgroundColor()\">Change background color!</button>", "category": "Python"}, {"instruction": "Write an SQL query to return rows from the 'customers' table sorted in alphabetical order according to the 'name' column.", "input": "", "output": "SELECT *\nFROM customers\nORDER BY name", "category": "Python"}, {"instruction": "Write an SQL query to create a table named 'students' consisting of three columns: 'name', 'age', and 'score'.", "input": "", "output": "CREATE TABLE Students (\n    name varchar(255),\n    age int,\n    score int\n);", "category": "Python"}, {"instruction": "Write a Ruby program to calculate the sum of the integers between 1 and 10 (both inclusive).", "input": "", "output": "def sum_of_numbers\n  total = 0 \n  (1..10).each { |x| total += x }\n  total\nend\n\nputs sum_of_numbers", "category": "Python"}, {"instruction": "Create a web page that displays a message in different languages by using HTML, CSS, and JavaScript.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Hello World in Different Languages</title>\n  <style>\n    body {\n      font-family: sans-serif;\n      background-color: #eee;\n      text-align: center;\n      padding: 20px;\n    }\n    select {\n      background-color: #f0f0f0;\n      font-size: 1rem;\n      padding: 5px 10px;\n      margin-top: 20px;\n      border: none;\n      border-radius: 5px;\n    }\n    button {\n      background-color: #444;\n      color: #fff;\n      font-size: 1rem;\n      padding: 5px 10px;\n      margin-top: 20px;\n      border: none;\n      border-radius: 5px;\n    }\n    .language-message {\n      font-size: 2rem;\n      margin: 20px;\n      color: #444;\n    }\n  </style>\n</head>\n<body>\n  <h1>Hello World in Different Languages</h1>\n  <select id=\"language-selector\">\n    <option value=\"English\">English</option>\n    <option value=\"French\">French</option>\n    <option value=\"Spanish\">Spanish</option>\n    <option value=\"German\">German</option>\n    <option value=\"Italian\">Italian</option>\n  </select>\n  <button type=\"button\" id=\"language-button\">Show!</button>\n  <label class=\"language-message\" id=\"language-message\"></label>\n\n  <script>\n    // Get language button, message label, and language selector elements\n    const languageButton = document.querySelector('#language-button');\n    const languageMessage = document.querySelector('#language-message');\n    const languageSelector = document.querySelector('#language-selector');\n\n    let messages = {\n      'English': 'Hello, World!',\n      'French': 'Bonjour le monde!',\n      'Spanish': 'Hola Mundo!',\n      'German': 'Hallo Welt!',\n      'Italian': 'Ciao Mondo!'\n    };\n\n    languageButton.addEventListener('click', () => {\n      let language = languageSelector.value;\n      languageMessage.innerText = messages[language];\n    });\n  </script>\n</body>\n</html>", "category": "Python"}, {"instruction": "Design a currency exchange program using JavaScript that allows the user to instantly receive the exchange rate for a particular currency.", "input": "", "output": "const currencyExchange = (baseCurrency, foreignCurrency) => {\n  let response;\n\n  const endpoint = `https://api.exchangeratesapi.io/latest?base=${baseCurrency}&symbols=${foreignCurrency}`;\n\n  // Use Fetch API to make a call to endpoint\n  fetch(endpoint)\n  .then(res => {\n    res.json()\n    .then(data => {\n      response = data.rates[foreignCurrency];\n      console.log(response);\n    })\n  });\n};\n\n// Call to currencyExchange\ncurrencyExchange(\"USD\", \"EUR\");", "category": "Python"}, {"instruction": "Create a console application in C++ that computes the sum of two numbers that are user input.", "input": "", "output": "#include <iostream>\n\nusing namespace std;\n\nint main(){\n    int num1;\n    int num2;\n    int sum;\n    \n    cout<<\"Please enter two numbers: \";\n    cin>> num1;\n    cin>> num2;\n    \n    sum = num1 + num2;\n    cout<<\"The sum of the two numbers is: \" << sum <<endl;\n    return 0;\n}", "category": "Python"}, {"instruction": "Design a basic calculator using HTML, CSS, and JavaScript.", "input": "", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML/CSS/Javascript Calculator</title>\n    <style>\n      * {\n        box-sizing: border-box;\n      }\n      .calculator {\n        width: 425px;\n        background-color: #fafafa;\n        padding: 20px;\n        border-radius: 8px;\n      }\n      .calculator-display {\n        display: flex;\n        align-items: flex-end;\n        padding: 0px 20px;\n        font-size: 2.5rem;\n        font-family: sans-serif;\n      }\n      .calculator-keypad {\n        display: grid;\n        grid-template-columns: repeat(4, 1fr);\n        grid-gap: 8px;\n      }\n      .calculator-key {\n        background-color: #f0f0f0;\n        width: 100%;\n        height: 80px;\n        border-radius: 8px;\n        font-size: 1.25rem;\n        font-family: sans-serif;\n        font-weight: bold;\n        color: #444;\n        cursor: pointer;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"calculator\">\n      <div class=\"calculator-display\"></div>\n      <div class=\"calculator-keypad\"></div>\n    </div>\n    <script>\n      const calculator = {\n        displayValue: '0',\n        firstOperand: null,\n        waitingForSecondOperand: false,\n        operator: null\n      };\n      \n      function updateDisplay() {\n        const display = document.querySelector('.calculator-display');\n        display.innerText = calculator.displayValue;\n      }\n    \n      updateDisplay();\n      \n      // add event listeners for the calculator buttons\n      \n    </script>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create a website using HTML and CSS that displays \"Hello, World!\".", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Hello World</title>\n  <style>\n  \tbody {\n  \t\tbackground-color: #eee;\n  \t\ttext-align: center;\n  \t\tpadding: 20px;\n  \t}\n  \th1 {\n  \t\tfont-family: sans-serif;\n  \t\tfont-size: 2em;\n  \t\tletter-spacing: 2px;\n  \t\tcolor: #444;\n  \t\tmargin-bottom: 20px;\n  \t}\n  </style>\n</head>\n<body>\n\t<h1>Hello, World!</h1>\n</body>\n</html>", "category": "Python"}, {"instruction": "Using SQL, write a query to find the most recently hired employee.", "input": "", "output": "SELECT last_name, first_name\nFROM employees\nORDER BY hire_date DESC\nLIMIT 1;", "category": "Python"}, {"instruction": "Calculate the area of a circle with a radius of 10 cm.", "input": "", "output": "314.16 cm2", "category": "Python"}, {"instruction": "Write a jQuery code to show an alert when the button is clicked.", "input": "", "output": "$('#btn').click(function(){\n  alert('Button clicked!');\n});", "category": "Python"}, {"instruction": "Separate the given words on the basis of their given data types.", "input": "Words: Yellow, 3.2, purple", "output": "String: Yellow\nFloat: 3.2\nString: purple", "category": "Python"}, {"instruction": "Translate the following sentence from Spanish to English.", "input": "Nuestras ideas eran descabelladas.", "output": "Our ideas were outlandish.", "category": "Python"}, {"instruction": "Write a code to add a new key and value to a given dictionary.", "input": "Dictionary: {'name': 'John', 'age': 18, 'city': 'New York'}\n New Key: 'profession', Value: 'journalist'", "output": "dictionary['profession'] = 'journalist' # add new key and value to dictionary{'name': 'John', 'age': 18, 'city': 'New York', 'profession': 'journalist' }", "category": "Python"}, {"instruction": "Insert records into a MySQL table named \"Products\" with the specified columns: \"ProductID\", \"Name\" and \"Price\".", "input": "ProductID: 1, Name: \"Notebook\", Price: 15.50\nProductID: 2, Name: \"Pen\", Price: 3.50\nProductID: 3, Name: \"Pencil\", Price: 2.00", "output": "INSERT INTO Products (ProductID, Name, Price) VALUES \n(1, 'Notebook', 15.50), \n(2, 'Pen', 3.50), \n(3, 'Pencil', 2.00);", "category": "Python"}, {"instruction": "Execute a provided MySQL query and return the result.", "input": "SELECT Last_Name, COUNT(*) \nFROM Employees\nWHERE Job_Position = \"Accountant\"\nGROUP BY Last_Name", "output": "Miller - 7\nAndrews - 2\nGardner - 5", "category": "Python"}, {"instruction": "Design a function to find the number of common keys between two arrays.", "input": "let array1 = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"];\nlet array2 = [\"b\", \"d\", \"f\", \"g\", \"h\", \"i\"];", "output": "function commonKeys(array1, array2) {\n  let commonKeys = [];\n  for (let i = 0; i < array1.length; i++) {\n    if (array2.indexOf(array1[i]) !== -1) {\n      commonKeys.push(array1[i]);\n    }\n  }\n  \n  return commonKeys.length;\n}", "category": "Python"}, {"instruction": "Create a MySQL table named \"customers\" with 4 columns: \"CustomerID\", \"Name\", \"Address\" and \"Phone\".", "input": "", "output": "CREATE TABLE customers (\n  CustomerID int NOT NULL AUTO_INCREMENT, \n  Name varchar(255) NOT NULL, \n  Address varchar(255) NOT NULL,\n  Phone varchar(255) NOT NULL, \n  PRIMARY KEY (CustomerID)\n);", "category": "Python"}, {"instruction": "Design an interactive game using HTML, CSS and JavaScript.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Hunted Maze</title>\n  <style>\n    * {\n      box-sizing: border-box;\n    }\n    body{\n      font-family: sans-serif;\n      background-color: #eee;\n      text-align: center;\n      padding: 20px;\n    }\n    h1 {\n      font-size: 2rem;\n      color: #444;\n    }\n    .maze {\n      position: relative;\n      width: 800px;\n      height: 600px;\n      background-color: #f0f0f0;\n      border-radius: 8px;\n    }\n    .box {\n      position: absolute;\n      width: 25px;\n      height: 25px;\n      background-color: #444;\n      border-radius: 4px;\n      top: 0;\n      left: 0;\n    }\n  </style>\n</head>\n<body>\n  <h1>Hunted Maze</h1>\n  <div class=\"maze\">\n    <div class=\"box\"></div>\n  </div>\n  <script>\n    // add logic for the game\n\n  </script>\n</body>\n</html>", "category": "Python"}, {"instruction": "Using SQL, write a query to find the employee names and the departments that they work in.", "input": "", "output": "SELECT last_name, first_name, department\nFROM employees;", "category": "Python"}, {"instruction": "Suggest a completion to the following SQL command and explain.", "input": "SELECT column1, column2", "output": "SELECT column1, column2\nFROM table_name\nWHERE condition\n\nThis statement will return the values of column1 and column2 from the table_name table where the condition is fulfilled.", "category": "Python"}, {"instruction": "How would you write a for loop to iterate over an array of integers in Bash?", "input": "", "output": "for i in $(seq 0 $((${#array[@]} - 1))); do \n  echo \"${array[$i]}\"\ndone", "category": "Python"}, {"instruction": "Rewrite the following python code to an equivalent code using lambda and sorted function.", "input": "def sort_by_length(words):\n    return sorted(words, key=lambda x: len(x))", "output": "sort_by_length = lambda words: sorted(words, key=len)", "category": "Python"}, {"instruction": "Analyze and improve the following basic shell script.", "input": "#!/bin/bash\n# simple bash script\necho \"Hello World\"", "output": "#!/bin/bash\n# Simple bash script\n\n# Store name in a variable\nname=\"World\"\n\n# Print message\necho \"Hello $name\"", "category": "Python"}, {"instruction": "Produce HTML output with a yellow background using the following CSS style.", "input": ".background {\n    background-color: #000;\n}", "output": "<html> \n <head> \n  <style> \n   .background { \n    background-color: #000; \n   } \n  </style> \n </head> \n <body> \n  <div class=\"background\" style=\"background-color: #FFFF00;\"></div> \n </body> \n</html>", "category": "Python"}, {"instruction": "Write C++ code to search for a particular element in a singly linked list.", "input": "Linked list: 1->2->5->7->9\nElement to be searched: 5", "output": "#include<iostream>\nusing namespace std;\n\nstruct Node\n{\n    int data;\n    Node *next;\n};\n \n// Function to search a given element x in the list\nbool search(Node* head, int x)\n{\n    Node* current = head;\n    while (current != NULL)\n    {\n        if (current->data == x)\n            return true;\n        current = current->next;\n    }\n    return false;\n}\n \n// Program to test function search()\nint main()\n{\n    Node* head = NULL;\n    Node* second = NULL;\n    Node* third = NULL;\n \n    head = new Node();  \n    second = new Node();\n    third = new Node();\n \n    head->data = 1;\n    head->next = second;\n    \n    second->data = 2;\n    second->next = third;\n \n    third->data = 5;\n    third->next = NULL;\n \n    int elementToSearch = 5;\n    if(search(head, elementToSearch)) \n        cout<<\"Yes, Element Found\";\n    else\n        cout<<\"No, Element Not Found\";\n}", "category": "Python"}, {"instruction": "Create a SQL query that updates the age of a user with a given ID.", "input": "", "output": "UPDATE users SET age = age + 1 WHERE id = <specified_id>;", "category": "Python"}, {"instruction": "Develop an HTML page which displays a user's profile information (name, age, phone number).", "input": "", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>User Profile</title>\n</head>\n<body>\n    <h1>User Profile</h1>\n    <p>Name: John Doe</p>\n    <p>Age: 24</p>\n    <p>Phone Number: 123-456-789</p>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a Java program which prints out the maximum element in an array.", "input": "nums = [6, 4, 7, 2, 8]", "output": "public static int maxElement(int[] nums) {\n\tint max = 0;\n\tfor (int i = 0; i < nums.length; i++)\n\t\tmax = Math.max(nums[i], max);\n    return max;\n}", "category": "Python"}, {"instruction": "Create a MySQL query to return the employee details from the \"employees\" table with the minimum salary.", "input": "Table Name: Employees\nColumns: Emp_ID, First_Name, Last_Name, Job_Position, Salary", "output": "SELECT * FROM Employees ORDER BY Salary ASC LIMIT 1", "category": "Python"}, {"instruction": "Create a class in Java which stores the details of a book (title, author, ISBN).", "input": "", "output": "class Book {\n    String title;\n    String author;\n    String isbn;\n    \n    public Book(String title, String author, String isbn) {\n        this.title = title;\n        this.author = author;\n        this.isbn = isbn;\n    }\n}", "category": "Python"}, {"instruction": "Write a Ruby program that takes user input and checks if the input is a prime number.", "input": "", "output": "def is_prime?(num)\n  (2..Math.sqrt(num)).each { |n| return false if num % n == 0 }\n  true\nend", "category": "Python"}, {"instruction": "Explain the role of the \"break\" keyword in a switch statement in Java.", "input": "", "output": "The \"break\" keyword is used in a switch statement to terminate the switch block. When it is encountered, the code execution jumps to the line immediately after the switch block. It is also used to exit out of a loop if a certain specified condition is met.", "category": "Python"}, {"instruction": "Write a 5-line Ruby program to print the Fibonacci series from 1 to 5.", "input": "", "output": "def fibonacci\n  x = 1\n  y = 1\n  for i in 1..5\n    output = x\n    sum = x + y\n    x = y\n    y = sum\n    puts output\n  end\nend\n\nfibonacci()", "category": "Python"}, {"instruction": "Produce the Java equivalent of the following PHP code block.", "input": "$arr = array(1, 2, 3, 4);\nforeach ($arr as $element) {\n  echo $element;\n}", "output": "int[] arr = {1, 2, 3, 4};\nfor (int element : arr) {\n  System.out.println(element);\n}", "category": "Python"}, {"instruction": "Create a bash script that asks a user to type in their name and prints out \"Hello <name>\"", "input": "", "output": "#!/bin/bash\n\necho \"Please enter your name:\"\nread name\necho \"Hello $name!\"", "category": "Python"}, {"instruction": "Construct an SQL query that significantly improves the performance of a given query.", "input": "SELECT * FROM students WHERE age >= 18", "output": "SELECT name, age\nFROM students\nWHERE age >= 18\nAND active = 1\nORDER BY age ASC\nLIMIT 10", "category": "Python"}, {"instruction": "How can you test a user-defined function with the name \"sum\" in JavaScript?", "input": "", "output": "function sumTest(){\n  let expectedResult = 15; \n  let actualResult = sum(5, 10);\n\n  if(expectedResult === actualResult){\n    console.log(\"sum test passed\");\n  }\n  else{\n    console.log(\"sum test failed\");\n  }\n}\n\nsumTest();", "category": "Python"}, {"instruction": "Create a HTML form which collects a user's name and email.", "input": "", "output": "<form action=\"form.php\" method=\"POST\">\n    <label>Name:<input type=\"text\" name=\"name\"></label>\n    <label>Email:<input type=\"email\" name=\"email\"></label>\n    <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Suggest a functional Node.js program to output the unique elements of an array.", "input": "let array = [2, 3, 4, 1, 3]", "output": "let array = [2, 3, 4, 1, 3];\nlet unique_elements = [...new Set(array)];\nconsole.log(unique_elements); // [2, 3, 4, 1]", "category": "Python"}, {"instruction": "Write a JavaScript function to find the number of days left from today to a given date.", "input": "let date = \"12/20/2020\";", "output": "function daysLeft(date){ \n  let today = new Date(); \n  let endDate = new Date(date); \n  let timeDifference = endDate - today; \n  \n  let daysLeft = Math.ceil(timeDifference / (1000 * 60 * 60 * 24));\n  \n  return daysLeft;\n }", "category": "Python"}, {"instruction": "Write a Java code to create a HashMap and add elements into it.", "input": "//Given Key and Value\n// key: \"name\"\n// value: \"John\"", "output": "HashMap<String, String> map = new HashMap<>();\n\nmap.put(\"name\", \"John\");", "category": "Python"}, {"instruction": "Write an SQL query to display the customer's first name, last name, and total spent.", "input": "Customer table:\nid | first_name | last_name | points\n1 | Harry | Potter | 500\n\nOrder table:\norder_id | customer_id | total\n23 | 1 | 25", "output": "SELECT c.first_name, c.last_name, SUM(o.total) AS total_spent\nFROM Customer c \n   JOIN Order o ON c.id = o.customer_id\nGROUP BY c.first_name, c.last_name", "category": "Python"}, {"instruction": "Write a function in Python that accepts an array as an argument and returns the index of the item with the maximum value.", "input": "arr = [2, 5, 9, 4, 10]", "output": "def find_max_index(arr):\n    if len(arr) == 0:\n        return None\n    max_val = arr[0]\n    max_index = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n            max_index = i\n    return max_index\n\narr = [2, 5, 9, 4, 10]\nmax_index = find_max_index(arr)\nprint(max_index)  # Output 4", "category": "Python"}, {"instruction": "How can we extract the first 2 characters from a string in Perl?", "input": "", "output": "$substr = substr $string, 0, 2;", "category": "Python"}, {"instruction": "How to check for a key in a dictionary in Python?", "input": "", "output": "if key in dictionary:\n    # execute this block of code\nelse:\n    # execute this block of code", "category": "Python"}, {"instruction": "What is the syntax for filtering a DataFrame using an OR condition in Pandas?", "input": "", "output": "df.loc[(condition1) | (condition2)]", "category": "Python"}, {"instruction": "In Java, what is a good way to make a deep copy of an object?", "input": "", "output": "A deep copy of an object can be obtained by using the Object.clone() method or by serializing and deserializing the object.", "category": "Python"}, {"instruction": "Create a function in Python that takes a number as an argument and displays the corresponding day from Monday to Sunday.", "input": "", "output": "def getDay(num):\n    days = {\n        0: 'Monday',\n        1: 'Tuesday',\n        2: 'Wednesday',\n        3: 'Thursday',\n        4: 'Friday',\n        5: 'Saturday',\n        6: 'Sunday',\n    }\n    return days[num]", "category": "Python"}, {"instruction": "Given an array of strings and an integer, write a function in Java to return a new array that contains the strings at each index less than the specified integer.", "input": "String[] array = {\"one\", \"two\", \"three\", \"four\", \"five\"};\nint integer = 3;", "output": "public static String[] filterArray(String[] array, int n) {\n    List<String> filteredArray = new ArrayList<String>();\n\n    for (int i = 0; i < array.length; i++) {\n        if (i < n) {\n            filteredArray.add(array[i]);\n        }\n    }\n\n    String[] newArray = new String[filteredArray.size()];\n    for (int i = 0; i < newArray.length; i++) {\n        newArray[i] = filteredArray.get(i);\n    }\n\n    return newArray;\n}", "category": "Python"}, {"instruction": "How do you create a MySQL query to find a specific employee by their name in a table named 'employees'?", "input": "", "output": "SELECT * FROM employees WHERE name = '<employee_name>';", "category": "Python"}, {"instruction": "Design a database schema for a retail store that tracks customers, purchases, and items.", "input": "", "output": "CREATE TABLE customers (\n\tid INTEGER NOT NULL AUTO_INCREMENT,\n\tname VARCHAR(255),\n\taddress VARCHAR(255),\n\temail VARCHAR(255),\n\tPRIMARY KEY (id)\n);\n \nCREATE TABLE items (\n\tid INTEGER NOT NULL AUTO_INCREMENT,\n\tname VARCHAR(255),\n\tprice DECIMAL(8,2),\n\tPRIMARY KEY (id)\n);\n \nCREATE TABLE purchases (\n\tid INTEGER NOT NULL AUTO_INCREMENT,\n\tcustomer_id INTEGER NOT NULL,\n\titem_id INTEGER NOT NULL,\n\tquantity INTEGER,\n\tPRIMARY KEY (id),\n\tFOREIGN KEY (customer_id) REFERENCES customers(id),\n\tFOREIGN KEY (item_id) REFERENCES items(id)\n);", "category": "Python"}, {"instruction": "Multiply every element of a list and print the result.", "input": "myList = [3, 4, 5]", "output": "mulp = 1\nfor i in myList:\n    mulp = mulp * i\nprint(mulp)", "category": "Python"}, {"instruction": "Write a code to return the list of integers between two given numbers.", "input": "start = 5\nend = 9", "output": "def get_integer_between(start, end):\n        return list(range(start, end + 1))\n\nprint(get_integer_between(start, end))", "category": "Python"}, {"instruction": "Sum the elements of a given array and print the result.", "input": "array = [2, -7, 4, 5]", "output": "s = sum(array)\nprint(s)", "category": "Python"}, {"instruction": "Print the first element of a given array.", "input": "myArray = [20, 45, 70, 95]", "output": "print(myArray[0])", "category": "Python"}, {"instruction": "Sort a given list of numbers and print the result.", "input": "myList = [9, 2, 5, 1, 8]", "output": "myList.sort()\nprint(myList)", "category": "Python"}, {"instruction": "Rewrite the following function so that it returns a tuple instead of two separate values.", "input": "def random_arr(arr):\n    idx = random.randint(0,len(arr)-1)\n    return arr[idx], idx", "output": "def random_arr(arr):\n    idx = random.randint(0, len(arr)-1)\n    return (arr[idx], idx)", "category": "Python"}, {"instruction": "Create a function that takes two integer arguments, subtracts the second one from the first one, and returns the result.", "input": "num1 = 3, num2 = 2", "output": "def subtract(num1, num2):\n    return num1 - num2\n\nresult = subtract(3, 2)\nprint(result)  # Output: 1", "category": "Python"}, {"instruction": "Design a class BankAccount that represents a bank account with the attributes name, balance, and interest_rate.", "input": "", "output": "class BankAccount:\n    def __init__(self, name, balance, interest_rate):\n        self.name = name\n        self.balance = balance\n        self.interest_rate = interest_rate\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdraw(self, amount):\n        self.balance -= amount", "category": "Python"}, {"instruction": "Write an algorithm that takes a set of numbers and returns the sum of all numbers in the set.", "input": "my_set = {2, 3, 4, 5}", "output": "def sum_set(my_set):\n    total = 0 # Initialize total\n    for num in my_set: \n        total += num\n    return total\n\nmy_set = {2, 3, 4, 5}\ntotal = sum_set(my_set)\nprint(total)  # Output 14", "category": "Python"}, {"instruction": "Construct a JSON object from an array of objects.", "input": "// Given Array\n[\n    {\n        \"name\": \"John\",\n        \"age\": 24\n    },\n    {\n        \"name\": \"Max\",\n        \"age\": 27\n    }\n]", "output": "{\"people\": [\n  {\n        \"name\": \"John\",\n        \"age\": 24\n    },\n    {\n        \"name\": \"Max\",\n        \"age\": 27\n    }\n]}", "category": "Python"}, {"instruction": "Compile a given C program and link it with a shared library.", "input": "// program code given\n#include <stdio.h>\nint main()\n{\n   printf(\"Hello World\");\n   return 0;\n}\n\n//Shared Library\nlibfoo.so", "output": "gcc -c yourprogram.c\ngcc -o yourprogram yourprogram.o -L/path/to/shared/library -lfoo", "category": "Python"}, {"instruction": "Write a JavaScript program to compare two Strings for equality, ignoring case.", "input": "String1: 'Hello'\nString2: 'heLLo'", "output": "const compareIgnoreCase = (string1, string2) => {\n    return string1.toUpperCase() === string2.toUpperCase();\n};\n\ncompareIgnoreCase(\"Hello\", \"heLLo\"); // true", "category": "Python"}, {"instruction": "Write a Swift program to calculate the factorial of a given integer.", "input": "", "output": "func factorial(_ n: UInt) -> UInt {\n    if n == 0 {\n        return 1\n    }\n    return n * factorial(n - 1)\n}\n\nprint(factorial(7))", "category": "Python"}, {"instruction": "Identify all the variables in this C++ program.", "input": "#include <iostream>\n \nint main()\n{   \n    int number = 10;\n    std::cout << number;\n    return 0;\n}", "output": "The variable in the above program is 'number'.", "category": "Python"}, {"instruction": "Create a tag cloud to visualize the most frequent words in the following sentence.", "input": "The quick brown fox jumps over the lazy dog", "output": "<div>\n  <span class=\"tag\" style=\"font-size: 300%;\">The</span>\n  <span class=\"tag\" style=\"font-size: 200%;\">quick</span>\n  <span class=\"tag\" style=\"font-size: 250%;\">brown</span>\n  <span class=\"tag\" style=\"font-size: 150%;\">fox</span>\n  <span class=\"tag\" style=\"font-size: 200%;\">jumps</span>\n  <span class=\"tag\" style=\"font-size: 250%;\">over</span>\n  <span class=\"tag\" style=\"font-size: 100%;\">the</span>\n  <span class=\"tag\" style=\"font-size: 150%;\">lazy</span>\n  <span class=\"tag\" style=\"font-size: 200%;\">dog</span>\n</div>", "category": "Python"}, {"instruction": "Using the input provided, generate a random string consisting of 8 characters.", "input": "[a, b, c, d, e, f, g, h]", "output": "import random\n\ndef random_string(arr):\n    return ''.join(random.sample(arr, 8))", "category": "Python"}, {"instruction": "What is the average value of all elements in a given array?", "input": "//Given Array\n[1, 8, 4, 5, 9]", "output": "total = 0\n\nfor i in arr:\n    total += i\n\naverage = total / len(arr)\n\nprint(average) # 5.6", "category": "Python"}, {"instruction": "Change the variable names in the given code to comply with the chosen coding standard.", "input": "x = \"Hello World!\"\ny = 1", "output": "message = \"Hello World!\"\nvalue = 1", "category": "Python"}, {"instruction": "Update the given code to sort an array of strings based on their lengths.", "input": "arr = [\"dogs\", \"cat\", \"lion\"]", "output": "def sort_by_length(arr):\n    arr.sort(key=len)\n    return arr", "category": "Python"}, {"instruction": "Create a regex pattern to match the following string: \"2019-08-21\".", "input": "", "output": "\\d{4}-\\d{2}-\\d{2}", "category": "Python"}, {"instruction": "Create a method that takes a string as a parameter and returns the number of unique characters present in the string.", "input": "python", "output": "def count_unique_characters(str):\n    characters = set()\n    for char in str:\n        characters.add(char)\n    return len(characters)", "category": "Python"}, {"instruction": "Write a test suite to test an arithmetic function that takes two arguments and returns the sum.", "input": "", "output": "import unittest\n\nclass TestArithmeticFunction(unittest.TestCase):\n    def test_sum(self):\n        self.assertEqual(arithmetic_function(2, 5), 7)\n        self.assertEqual(arithmetic_function(-4, 9), 5)\n        self.assertEqual(arithmetic_function(-2, 0), -2)\n\nif __name__ == '__main__':\n    unittest.main()", "category": "Python"}, {"instruction": "Using a single 'for' loop, iterate through an array and print out the indices and values of each element to the console.", "input": "[2, 5, 8, 9, 10]", "output": "for i in range(len(arr)):\n    print(\"Index: \" + str(i) + \", Value: \" + str(arr[i]))", "category": "Python"}, {"instruction": "Create a function to calculate the sum of 2 numbers and return 'None' if both the parameters are not numbers.", "input": "", "output": "def sum_of_two_numbers(x, y):\n    if type(x) is not int or type(y) is not int:\n        return None\n    return x + y", "category": "Python"}, {"instruction": "Write a query to select the last three records from the table \"Orders\".", "input": "Order table:\norder_id | customer_id | total\n21 | 2 | 10\n22 | 4 | 15\n23 | 1 | 25\n24 | 3 | 20", "output": "SELECT * \nFROM Orders \nORDER BY order_id DESC\nLIMIT 3", "category": "Python"}, {"instruction": "Create a function to generate a random number within the range of 0 and 1000.", "input": "", "output": "import random\n\ndef random_in_range():\n    return random.randint(0, 1000)", "category": "Python"}, {"instruction": "How can we extend the following JavaScript program to add two more students?", "input": "function getStudents(){\n    const students = [\n        {name: \"Tom\", age: 17},\n        {name: \"Jack\", age: 16},\n    ];\n    return students;\n}", "output": "function getStudents(){\n    const students = [\n        {name: \"Tom\", age: 17},\n        {name: \"Jack\", age: 16},\n        {name: \"Jill\", age: 13},\n        {name: \"Dave\", age: 21},\n    ];\n    return students;\n}", "category": "Python"}, {"instruction": "How can the following C code for Fibonacci Series be modified to include the nth element?", "input": "#include <stdio.h> \n  \nint Fibonacci(int n) \n{ \n    if (n <= 1) \n        return n; \n    return Fibonacci(n-1) + Fibonacci(n-2); \n}", "output": "#include <stdio.h> \n  \nint Fibonacci(int n) \n{ \n    int a = 0, b = 1, c; \n    if (n == 0) \n        return a; \n    for (int i = 2; i <= n; i++) \n    { \n        c = a + b; \n        a = b; \n        b = c; \n    } \n    return b; \n}", "category": "Python"}, {"instruction": "Write a CSS program to create a rectangular box with rounded corners, border and a drop shadow.", "input": "", "output": ".box {\n    width: 300px;\n    height: 200px;\n    background: #fff;\n    border-radius: 10px;\n    border: 1px solid gray;\n    box-shadow: 2px 5px 10px gray;\n    padding: 10px;\n}", "category": "Python"}, {"instruction": "Describe the action taken by the following code snippet and provide a sample output", "input": "def format_string(x): \n    return \"The output is: {}\".format(x)", "output": "The code snippet takes an input string, ``x``, and formats it by adding a prefix of \"The output is: \" to it and returns the formatted string. For example, if the input string is \"Hello\", the output string will be \"The output is: Hello\".", "category": "Python"}, {"instruction": "Observe the following code snippet and identify any errors that it contains", "input": "for i in range(10):\n    print(\"Hello world!\")", "output": "The code snippet does not contain any errors and will print \"Hello world!\" ten times.", "category": "Python"}, {"instruction": "Explain why the following code snippet produces the output it does", "input": "lst = [[1, 2], [1, 2], [3, 4]]\n[x for i in lst for x in i]", "output": "The code snippet is using a nested list comprehension to flatten the list ``lst``. The outer loop iterates over each sublist in the list while the inner loop iterates over each element of the sublist. As a result, the output is a flattened list containing all the elements in the original list. In this case, the output is [1, 2, 1, 2, 3, 4].", "category": "Python"}, {"instruction": "What is the difference between function overloading and function overriding in Java?", "input": "", "output": "Function overloading refers to using the same function name for different functions, with different parameter lists. On the other hand, function overriding refers to redefining a base class function with a child class that has the same signature.  Function overriding enables the child class to have a different implementation of the same method as the parent class.  This is especially useful in polymorphism.", "category": "Python"}, {"instruction": "How would you convert a decimal number such as 2.345 to a binary representation?", "input": "", "output": "2.345 can be converted to binary representation by multiplying 2.345 by 2 repeatedly and taking note of the whole number of each multiplication. \n\nThe binary representation of 2.345 is 10.011111.", "category": "Python"}, {"instruction": "Create a MySQL query to calculate the total price paid by customer with ID 1 in the last month.", "input": "", "output": "SELECT SUM(price)\nFROM orders\nWHERE customer_id = 1 and\n      order_date > DATE_SUB(NOW(), INTERVAL 1 MONTH)", "category": "Python"}, {"instruction": "Suppose you are given two lists A and B and you need to check if B\u2019s elements are all in A.", "input": "A = [1, 2, 3, 4, 5], B = [2, 3]", "output": "def compare_lists(A, B):\n    return set(B).issubset(set(A))", "category": "Python"}, {"instruction": "What is the volume of a sphere with radius 7 cm?", "input": "", "output": "The volume of a sphere with radius 7 cm is 1436.755 cm3.", "category": "Python"}, {"instruction": "Convert the given API call from cURL to Fetch", "input": "curl -X POST https://example.com/api/users -H 'Content-type: application/json' -d '{ \"name\": \"John\" }'", "output": "fetch(\"https://example.com/api/users\", {\n    method: 'POST',\n    headers: {\n        'Content-type': 'application/json'\n    },\n    body: JSON.stringify({name: 'John'})\n})", "category": "Python"}, {"instruction": "Create a JavaScript class that allows the user to choose the size, position and color of a textbox.", "input": "", "output": "class Textbox {\n    constructor(size, position, color) {\n        this.size = size;\n        this.position = position;\n        this.color = color;\n    }\n\n    showTextbox() {\n        const textbox = document.createElement(\"div\");\n        textbox.style.width = this.size + \"px\";\n        textbox.style.position = this.position;\n        textbox.style.background = this.color;\n        document.body.appendChild(textbox);\n    }\n}", "category": "Python"}, {"instruction": "Write a Python function that prints the frequencies of even and odd numbers in a given array.", "input": "[2, 5, 4, 6, 8, 10]", "output": "def frequency_of_odd_and_even(arr):\n    freq_even = 0\n    freq_odd = 0\n    for i in arr:\n        if i % 2 == 0:\n            freq_even += 1\n        else:\n            freq_odd += 1\n    print(\"Frequency of even numbers:\", freq_even)\n    print(\"Frequency of odd numbers:\", freq_odd)", "category": "Python"}, {"instruction": "Using the given input, print a zero (or cross) pattern using asterisks (*) and underscores (_)", "input": "3", "output": "*_*_*\n_*_*_\n*_*_*", "category": "Python"}, {"instruction": "Create a program to determine the intersecting elements of two lists", "input": "list1 = [1, 2, 3]\nlist2 = [3, 4, 5]", "output": "def intersection(list1, list2): \n    l1_set = set(list1) \n    l2_set = set(list2) \n  \n    commons = l1_set.intersection(l2_set) \n      \n    return list(commons) \n\n# Example \nlist1 = [1, 2, 3]\nlist2 = [3, 4, 5]\n\nprint(intersection(list1, list2))", "category": "Python"}, {"instruction": "Make a program to display the maximum, minimum and average of numbers in a list", "input": "[1,2,3,4,5]", "output": "list = [1,2,3,4,5]\nlist_length = len(list)\nmax_val = max(list)\nmin_val = min(list)\navg_val = sum(list) / list_length\n\n# Display Output\nprint(\"Maximum: \", max_val)\nprint(\"Minimum: \", min_val)\nprint(\"Average: \", avg_val)", "category": "Python"}, {"instruction": "Parse the HTML page to extract all anchor elements", "input": "", "output": "from bs4 import BeautifulSoup\n\n# HTML page \nhtml = '<html><a href=\"https://example.com\">Link 1</a><a href=\"https://example2.com\">Link 2</a></html>'\n\nsoup = BeautifulSoup(html, 'html.parser')\n\n# Extracting all anchor elements in a list\nanchor_elements = soup.findAll('a')\n\n# Printing anchor elements\nfor anchor in anchor_elements:\n    print(anchor)", "category": "Python"}, {"instruction": "Suggest a better way to store a series of strings for fast lookup", "input": "strings = [\"apple\", \"strawberry\", \"banana\"]", "output": "A better way to store a series of strings for fast lookup is to use a hash table. A hash table is a data structure that uses hashing to store data and allows for efficient lookups. To use a hash table to store the strings, we can create a mapping between each string and a unique key. For example, we can map \"apple\" to 0, \"strawberry\" to 1, and \"banana\" to 2. This allows us to quickly look up a string based on its key.", "category": "Python"}, {"instruction": "Given the following code snippet, write the code to achieve the expected output", "input": "def convert_to_title_case(input):\n    # Expected Output:\n    # input = \"this is a Title\"\n    # Output = This Is A Title", "output": "def convert_to_title_case(input):\n    words = input.split(' ')\n    output = []\n    for word in words:\n        output.append(word.capitalize())\n    return ' '.join(output)\n\n# Expected Output:\ninput = \"this is a title\"\n# Output = This Is A Title\nprint(convert_to_title_case(input))", "category": "Python"}, {"instruction": "Suggest an appropriate data structure and implementation to store employee details", "input": "Employee details like name, title and contact number", "output": "An appropriate data structure to store employee details is a dictionary. A dictionary maps each employee's name (or other identifier) to a dictionary that holds the employee's title, contact number and other relevant information. For example, the code to define an employee dictionary might look like this:\n\nemployees = {}\n\n#add new employee\nemployees['John'] = {'title': 'Manager', 'phone': '123-456-7890'}\n\n#access employee details\nprint(employees['John']['phone']) # prints '123-456-7890'", "category": "Python"}, {"instruction": "Suggest a data structure and implementation to store a list of vehicles", "input": "A list of cars and buses", "output": "A list of vehicles can be stored in an adjacency list data structure. Each node in the graph represents either a car or a bus. The edges link the respective cars and buses, indicating their connectivity. For example, if we have a list of cars and buses, we can store it as follows: \n\ngraph = {\n    'cars': {'car1', 'car2', ...}, \n    'buses': {'bus1', 'bus2', ...}, \n    'edges': { \n        ('car1', 'bus1'), \n        ('car2', 'bus2'), \n        ...\n    } \n}", "category": "Python"}, {"instruction": "Edit the following XML code to add a navigation bar to the top of a web page", "input": "<html>\n<head>\n  <title>My Webpage</title>\n</head>", "output": "<html>\n<head>\n  <title>My Webpage</title>\n</head>\n<body>\n  <nav>\n    <ul>\n      <li><a href=\"index.html\">Home</a></li>\n      <li><a href=\"about.html\">About Us</a></li>\n      <li><a href=\"contact.html\">Contact</a></li>\n    </ul>\n  </nav>\n</body>", "category": "Python"}, {"instruction": "Design an algorithm in Java to reverse a list of integers.", "input": "list = [1,2,3,4,5]", "output": "public static void reverseList(List<Integer> list) \n{\n    Collections.reverse(list); \n}", "category": "Python"}, {"instruction": "Compose a CSS 3D transformation to rotate an element by 45 degrees.", "input": "", "output": "transform: rotate3d(0, 1, 0, 45deg);", "category": "Python"}, {"instruction": "Write an Excel formula to calculate the average of the numbers in cells A1 and A2.", "input": "", "output": "=AVERAGE(A1,A2)", "category": "Python"}, {"instruction": "Create a Node.js server which serves a static HTML page.", "input": "", "output": "// Import the necessary modules\nconst http = require('http');\nconst fs = require('fs');\n\n// Create a simple server which serves a static HTML page\nhttp.createServer((req, res) => {\n    fs.readFile('./index.html',(err, data) => {\n        res.writeHead(200, {'Content-Type': 'text/html'});\n        res.write(data);\n        res.end();\n    });\n }).listen(3000);", "category": "Python"}, {"instruction": "Write an SQL query to retrieve all records from a table named \"customers\" where the \"country\" column equals \"USA\".", "input": "", "output": "SELECT * FROM customers WHERE country = 'USA';", "category": "Python"}, {"instruction": "Design a code snippet to sort a hashtable by its keys.", "input": "{8: \"hello\", 3: \"goodbye\", 2: \"aloha\", 4: \"bonjour\", 6: \"ni hao\"}", "output": "// a function to sort the hashtable by its keys\nfunc sortHashTableKeys(hashTable map[int]string) map[int]string {\n    // a slice to store the keys in order\n    var keys []int\n    for key := range hashTable {\n        keys = append(keys, key)\n    }\n\n    // sort the slice \n    sort.Ints(keys)\n    \n    // create a new map with the sorted keys\n    sortedHashTable := make(map[int]string)\n    for _, key := range keys {\n        sortedHashTable[key] = hashTable[key]\n    }\n\n    return sortedHashTable\n}", "category": "Python"}, {"instruction": "Create a function to sort a list of numbers without using python's built-in sort function.", "input": "[3,5,4,2,1]", "output": "# Function to sort a list of numbers without using Python's built-in sort function\ndef my_sort(numbers):\n    n = len(numbers)\n\n    for i in range(n): \n        for j in range(0, n-i-1):\n            if numbers[j] > numbers[j+1] :\n                numbers[j], numbers[j+1] = numbers[j+1], numbers[j]\n                \n    return numbers\n\n# Example list\nlist = [3,5,4,2,1]\nprint(my_sort(list))", "category": "Python"}, {"instruction": "Generate a valid cURL command to request data from a given API endpoint", "input": "Endpoint: testserver.com/api/user", "output": "curl -X GET \"testserver.com/api/user\" -H \"accept: application/json\"", "category": "Python"}, {"instruction": "Write a CSS code to give each element of a list the same width size.", "input": "<ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li> \n</ul>", "output": "ul {\n    list-style-type: none;\n    padding: 0;\n    margin: 0;\n}\n\nli {\n    display: inline-block;\n    width: 33.33%;\n}", "category": "Python"}, {"instruction": "Write a python code snippet to calculate the sum of any number of integers.", "input": "num1 = 10\nnum2 = 6 \nnum3 = 8", "output": "sum = num1 + num2 + num3\nprint(\"The sum is\", sum)", "category": "Python"}, {"instruction": "Formulate an algorithm in C++ to find the maximum and minimum elements in an unsorted array.", "input": "arr = {1, 7, 4, 2, 9, 6, 5}", "output": "#include <bits/stdc++.h> \nusing namespace std; \n  \n// Function to find maximum and minimum of \n// given array \npair <int, int> getMinMax(int arr[], int n) \n{ \n    pair <int, int> minmax; \n    int i; \n  \n    /* If array has even number of elements then \n    initialize the first two elements as minimum  \n    and maximum */\n    if (n % 2 == 0) \n    { \n        if (arr[0] > arr[1])  \n        { \n            minmax.second = arr[0]; \n            minmax.first = arr[1]; \n        }  \n        else\n        { \n            minmax.first = arr[0]; \n            minmax.second = arr[1]; \n        } \n        i = 2;  // set the startung index for loop \n    } \n  \n    /* If array has odd number of elements then  \n    initialize the first element as minimum and  \n    maximum */\n    else\n    { \n        minmax.first = arr[0]; \n        minmax.second = arr[0]; \n        i = 1;  // set the startung index for loop \n    } \n      \n    /* In the while loop, pick elements in pair and  \n    compare the pair with max and min so far */\n    while (i < n - 1)  \n    { \n        if (arr[i] > arr[i + 1])  \n        { \n            if(arr[i] > minmax.second) \n                minmax.second = arr[i]; \n            if(arr[i + 1] < minmax.first) \n                minmax.first = arr[i + 1]; \n        }  \n        else\n        { \n            if (arr[i] < minmax.first) \n                minmax.first = arr[i]; \n            if(arr[i + 1] > minmax.second) \n                minmax.second = arr[i + 1]; \n        } \n        i += 2; // Increment the index by 2 as two elements are processed in loop \n    } \n    return minmax; \n}", "category": "Python"}, {"instruction": "Create a function that takes a single argument and returns a string describing the type of argument.", "input": "", "output": "def get_argument_type(arg):\n    if isinstance(arg, str):\n        return 'string'\n    if isinstance(arg, int):\n        return 'integer'\n    if isinstance(arg, float):\n        return 'float'\n    if isinstance(arg, list):\n        return 'list'\n    if isinstance(arg, dict):\n        return 'dictionary'", "category": "Python"}, {"instruction": "Create a class for a book object with properties for the title, author and pages", "input": "", "output": "class Book:\n    def __init__(self, title, author, pages):\n        self.title = title\n        self.author = author\n        self.pages = pages", "category": "Python"}, {"instruction": "Suggest an algorithm to find the longest common sub-string in two strings", "input": "Two strings of length n and m", "output": "A possible algorithm to find the longest common sub-string in two strings is the dynamic programming approach. The algorithm works by comparing the two given strings letter by letter and storing the results in a two-dimensional array. The algorithm checks the characters at each index of the given strings and if they are equal, the value of the corresponding cell is set to 1 plus the previous diagonal cell's value. If the characters are not equal, the cell is set to 0. The longest sub-string is then determined by traversing through the matrix and looking for the maximum value.", "category": "Python"}, {"instruction": "Suggest an appropriate data structure to store the test scores of a class", "input": "Test scores of each student in the class", "output": "An appropriate data structure to store the test scores of a class is a nested dictionary. The outer dictionary will have the student's name as the key and the inner dictionary will have the test name as the key and the score as the value. For example, if we have the test scores for three students for two tests, we can store it as follows: \n\nscores = { \n    'John': { \n        'Test1': 95,\n        'Test2': 73\n    }, \n    'Adam': { \n        'Test1': 87, \n        'Test2': 86 \n    }, \n    'Sarah': { \n        'Test1': 76, \n        'Test2': 75 \n    }\n}", "category": "Python"}, {"instruction": "Write a SQL query to output the name, id, and address of each customer who has an address in a specified zip code.", "input": "zipcode = 39911", "output": "SELECT name, id, address \nFROM customers \nWHERE address LIKE '%39911%';", "category": "Python"}, {"instruction": "Rewrite the following program snippet according to the PEP8 guidelines:", "input": "def calculate_sum(a,b): return a+b;", "output": "def calculate_sum(a, b):\n    return a + b", "category": "Python"}, {"instruction": "Create an HTTP request to retrieve data from an API.", "input": "API_URL = \"https://example.com/api/get_data\"", "output": "import requests\n\nresponse = requests.get(API_URL)\ndata = response.json()", "category": "Python"}, {"instruction": "Switch the positions of the first and last element in a list.", "input": "list = [1, 2, 3, 4, 5]", "output": "list[0], list[-1] = list[-1], list[0]", "category": "Python"}, {"instruction": "What does this declaration mean in JavaScript ?", "input": "let myArray = []", "output": "The declaration let myArray = [] in JavaScript is declaring a variable myArray which is an empty array.", "category": "Python"}, {"instruction": "Create a program that prints a given 2D array in a spiral form.", "input": "a = [[1,2,3],[4,5,6],[7,8,9]]", "output": "def spiral_print(a):\n    m = len(a)\n    n = len(a[0])\n \n    t = 0   #top\n    b = m-1 #bottom\n    l = 0   #left\n    r = n-1 #right\n\n    dir = 0\n    while l<=r and t<=b:\n\n        if dir == 0:\n            for i in range(l, r+1):\n                print(a[t][i], end=\" \")\n            t += 1\n        elif dir == 1:\n            for i in range(t, b+1):\n                print(a[i][r], end=\" \")\n            r -= 1\n        elif dir == 2:\n            for i in range(r, l-1, -1):\n                print(a[b][i], end=\" \")\n            b -= 1\n        elif dir == 3:\n            for i in range(b, t-1, -1):\n                print(a[i][l], end=\" \")\n            l += 1\n\n        dir=(dir+1)%4", "category": "Python"}, {"instruction": "Create a function that takes a string as an argument and checks if all the characters in the string are unique, and returns a boolean.", "input": "", "output": "def are_all_characters_unique(string):\n    seen_characters = set()\n    for c in string:\n        if c in seen_characters:\n            return False\n        seen_characters.add(c)\n    return True", "category": "Python"}, {"instruction": "Create a function that takes a list of strings and returns a new list of strings with the first letter of each string as capital.", "input": "names = [\"mary\", \"john\", \"joseph\"]", "output": "def capitalize_names(names):\n new_names = []\n for name in names:\n    new_name = name[0].capitalize() + name[1:]\n    new_names.append(new_name)\n return new_names", "category": "Python"}, {"instruction": "Create a class and a method to convert an integer to a string.", "input": "", "output": "class IntToString {\n  public static String intToString(int n) {\n    String s = String.valueOf(n); \n    return s;\n  }\n}", "category": "Python"}, {"instruction": "Write a code to define a function to multiply two numbers passed as arguments.", "input": "", "output": "def multiply(x, y):\n   return x * y", "category": "Python"}, {"instruction": "Create a C++ class called \"TV\".", "input": "", "output": "class TV {\npublic:\n  TV(); // Constructor\n  void turnOn();\n  void turnOff();\n  void switchChannel();\n};", "category": "Python"}, {"instruction": "Describe the meaning of the variable name \u2018arraySize\u2019 in JavaScript", "input": "", "output": "The variable name arraySize in JavaScript is used to describe the size of an array, that is, the number of elements in the array.", "category": "Python"}, {"instruction": "Identify which of the given statements is incorrect.", "input": "- fopen() is a PHP function for opening a file\n- fgets() is a JavaScript function for reading contents of a file\n- fread() is a PHP function for reading contents of a file", "output": "fgets() is a JavaScript function for reading contents of a file is incorrect. The correct statement is fgets() is a PHP function for reading contents of a file.", "category": "Python"}, {"instruction": "Create an associative array containing 8 records of student data.", "input": "", "output": "let studentData = {\n  \"1\": {\n    \"name\": \"John\",\n    \"age\": \"18\",\n    \"country\": \"USA\"\n  },\n  \"2\": {\n    \"name\": \"Peter\",\n    \"age\": \"20\",\n    \"country\": \"UK\"\n  },\n  \"3\": {\n    \"name\": \"Anna\",\n    \"age\": \"19\",\n    \"country\": \"USA\"\n  },\n  \"4\": {\n    \"name\": \"Steven\",\n    \"age\": \"22\",\n    \"country\": \"Canada\"\n  },\n  \"5\": {\n    \"name\": \"Alex\",\n    \"age\": \"21\",\n    \"country\": \"Australia\"\n  },\n  \"6\": {\n    \"name\": \"David\",\n    \"age\": \"25\",\n    \"country\": \"UK\"\n  },\n  \"7\": {\n    \"name\": \"Dan\",\n    \"age\": \"23\",\n    \"country\": \"USA\"\n  },\n  \"8\": {\n    \"name\": \"Julia\",\n    \"age\": \"18\",\n    \"country\": \"Germany\"\n  }\n};\n\nconsole.log(studentData);", "category": "Python"}, {"instruction": "Write a code to find the number of singular and plural words in a given paragraph.", "input": "This is a pleasant evening. I prefer to stay at home for the evening.", "output": "let paragraph = \"This is a pleasant evening. I prefer to stay at home for the evening.\";\n\nlet words = paragraph.split(' ');\nlet countSingularWords = 0;\nlet countPluralWords = 0;\nfor (let i = 0; i < words.length; i++) {\n  let lastChar = words[i].charAt(words[i].length-1);\n  if (lastChar === 's') {\n    countPluralWords++;\n  } else {\n    countSingularWords++;\n  }\n}\n\nconsole.log(`Number of singular words = ${countSingularWords}`);\nconsole.log(`Number of plural words = ${countPluralWords}`);", "category": "Python"}, {"instruction": "Generate an array of random numbers using the JavaScript Math.random() function.", "input": "Array length :10", "output": "let arrayLength = 10;\nlet randomArray = [];\nfor (let i = 0; i < arrayLength; i++) {\n  randomArray.push(Math.random());\n}\n\nconsole.log(randomArray);", "category": "Python"}, {"instruction": "Write an HTML page to display a form for user registration.", "input": "", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>User Registration Form</title>\n  </head>\n  <body>\n    <h1>User Registration Form</h1>\n    <form>\n      <input type=\"text\" name=\"name\" placeholder=\"Enter your name\">\n      <input type=\"email\" name=\"email\" placeholder=\"Enter your email\">\n      <input type=\"password\" name=\"password\" placeholder=\"Enter your password\">\n      <input type=\"submit\" value=\"Submit\">\n    </form>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a code to print the Fibonacci series of n terms.", "input": "", "output": "def printFibonacciSeries(n):\n    a, b = 0, 1\n    for i in range(0, n):\n        print(a)\n        c = a + b\n        a = b\n        b = c\n\nprintFibonacciSeries(10)", "category": "Python"}, {"instruction": "How can the following JavaScript program be modified to include a letter grade for each student score?", "input": "let grades = [\n  {name: 'John', score: 90},\n  {name: 'Jack', score: 80},\n  {name: 'Jill', score: 85},\n]", "output": "let grades = [\n  {name: 'John', score: 90, grade: 'A'},\n  {name: 'Jack', score: 80, grade: 'B'},\n  {name: 'Jill', score: 85, grade: 'B+'},\n];\n\ngrades = grades.map(grade => {\n  let letter;\n  if (grade.score >= 90) {\n    letter = 'A';\n  } else if (grade.score >= 80) {\n    letter = 'B';\n  } else if (grade.score >= 70) {\n    letter = 'C';\n  } else if (grade.score >= 60) {\n    letter = 'D';\n  } else {\n    letter = 'F';\n  }\n  grade.grade = letter;\n  return grade;\n});", "category": "Python"}, {"instruction": "Create a Django application to store and retrieve questions and answers.", "input": "", "output": "# Project Name\nproject = 'questions_and_answers'\n\n# Application Name\napplication = 'qa_app'\n\n# Create the project directory\nimport os\nif not os.path.exists(project):\n    os.mkdir(project)\n\n# Create the Django application\nfrom django.core.management import call_command\ncall_command('startapp', application, project)\n\n# Setup the database\nfrom django.conf import settings\n\ndefault_db_name = project + '.sqlite3'\nsettings.configure(\n    DATABASES = {\n        'default': {\n            'ENGINE': 'django.db.backends.sqlite3',\n            'NAME': os.path.join(project, default_db_name),\n        }\n    }\n)\n\nfrom django.db import models\n\n# Create the models\nclass Question(models.Model):\n    question_text = models.CharField(max_length=200)\n    pub_date = models.DateTimeField('date published')\n\nclass Answer(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    answer_text = models.CharField(max_length=200)\n\n# Make and apply the migrations\ncall_command('makemigrations', application)\ncall_command('migrate')", "category": "Python"}, {"instruction": "Write a code to identify palindromic numbers between 1 and a given number n.", "input": "", "output": "def printPalindromicNumbers(n): \n    for num in range(1, n + 1):\n        s = str(num)\n        if(s == s[::-1]):\n            print(num, end=\" \")\n\nprintPalindromicNumbers(100)", "category": "Python"}, {"instruction": "Rewrite the following C program so that it prints the frequency of each character in a given string.", "input": "string = \"abcabcabc\"", "output": "#include <stdio.h>\n#include <string.h>\n\n// Fills frequency array with zero \nvoid clear(int count[], int n) \n{ \n\tint i; \n\tfor (i = 0; i < n; i++) \n\tcount[i] = 0; \n}\n\n// Calculate frequency of each character \n// in a string \nvoid calculateFrequency(char *str, int count[], int len) \n{ \n\tint i; \n\tfor (i = 0; i < len; i++) \n\t\tcount[str[i] - 'a']++;\t\n}\n\nint main() \n{ \n\tchar str[] = \"abcabcabc\"; \n\tint len = strlen(str); \n\t// Initialize frequency array \n\tint count[26] = { 0 }; \n\t\n\t// Clear the frequency array \n\tclear(count, 26); \n\t\n\t// Calculate frequency \n\tcalculateFrequency(str, count, len); \n\t\n\t// Print the frequency of each character \n\tfor (int i = 0; i < 26; i++) \n\t\tif(count[i] != 0) \n\t\t\tprintf(\"%c occurs %d times in the string \\n\", i + 'a', count[i]); \n\treturn 0; \n}", "category": "Python"}, {"instruction": "Draft a Javascript function that takes no arguments and returns \u2018Hello World\u2019", "input": "", "output": "function helloWorld() {\n\treturn \"Hello World\";\n}", "category": "Python"}, {"instruction": "Write code to create a new array with elements that are the doubled values of each element in the original array.", "input": "let nums = [1, 2, 3, 4];", "output": "let doubledNums = nums.map(x => x * 2);", "category": "Python"}, {"instruction": "Create a function that takes a user id and returns their name.", "input": "user_id = 1", "output": "def get_user_name(user_id):\n    sql_query = \"SELECT first_name, last_name FROM user_profiles WHERE user_id = ?\"\n    user = cursor.execute(sql_query, (user_id,))\n    return user[0] + \" \" + user[1]", "category": "Python"}, {"instruction": "Format a string for a discounted price.", "input": "price = 5.99\ndiscount = 0.20", "output": "discounted_price = '${:.2f}'.format(price * (1 - discount))", "category": "Python"}, {"instruction": "Create a for loop for copying an array.", "input": "arr = [1, 2, 3, 4, 5]", "output": "arr_copy = []\nfor i in arr:\n    arr_copy.append(i)", "category": "Python"}, {"instruction": "Create a function to print the multiples of an integer up to a limit.", "input": "let number = 3 \nlet limit = 10", "output": "let printMultiples = (num, limit) => {\n    for (let i = num; i <= limit; i += num) {\n        console.log(i);\n    }\n};\n\nprintMultiples(number, limit); // prints 3, 6, 9", "category": "Python"}, {"instruction": "Create a program to detect whether a given string contains only vowels or not.", "input": "let str = \"hello\"", "output": "let containsOnlyVowels = str => {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for (let i = 0; i < str.length; i++) {\n        if (!vowels.includes(str[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n\nlet result = containsOnlyVowels(str);\nconsole.log(result); // prints false", "category": "Python"}, {"instruction": "Insert a line into the code to improve its efficiency.", "input": "def double_list(lst):\n    for i in range(len(lst)):\n        lst[i] *= 2", "output": "def double_list(lst):\n    output_list = [x * 2 for x in lst]\n    return output_list", "category": "Python"}, {"instruction": "Find the sum of all even numbers in the following list (Python code):", "input": "[1, 4, 6, 7, 8, 12, 19]", "output": "sum_even_num = 0\nfor num in [1, 4, 6, 7, 8, 12, 19]:\n    if num % 2 == 0:\n        sum_even_num = sum_even_num + num \nprint(sum_even_num)", "category": "Python"}, {"instruction": "Assign a variable in JavaScript.", "input": "", "output": "let myVar = \"Hello World\";", "category": "Python"}, {"instruction": "Create a CSS style to position a logo in the top right corner of a webpage.", "input": "", "output": "#logo {\n    position: absolute;\n    top: 0;\n    right: 0;\n}", "category": "Python"}, {"instruction": "Create an HTML5 form to get a user's name, age, and gender.", "input": "", "output": "<form>\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" id=\"name\" name=\"name\" required/>\n  <br>\n  <label for=\"age\">Age:</label>\n  <input type=\"text\" id=\"age\" name=\"age\" required/>\n  <br>\n  <label for=\"gender\">Gender:</label>\n  <select type=\"text\" id=\"gender\" name=\"gender\" required>\n    <option>M</option>\n    <option>F</option>\n  </select>\n  <br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Compare two objects and return 0 if the objects are equal, greater than 0 if the first object is larger, \nand less than 0 if the second object is larger.", "input": "Object 1 - [name: John, age: 30]\nObject 2 - [name: Jane, age: 28]", "output": "int compareObjects(Object obj1, Object obj2) {\n    if (obj1.name == obj2.name) {\n        return obj1.age - obj2.age;\n    } \n    else {\n        return obj1.name.compareTo(obj2.name);\n    }\n}", "category": "Python"}, {"instruction": "Create a HTML page to display information about a group of users.", "input": "User details:\nJohn \u2013 Age: 24, Profession: Developer\nMark \u2013 Age: 26, Profession: Designer", "output": "<html>\n  <head>\n  </head>\n  <body>\n    <h1>User Details</h1>\n    <p>John \u2013 Age: 24, Profession: Developer</p>\n    <p>Mark \u2013 Age: 26, Profession: Designer</p>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Replace all punctuation marks in the following sentence with underscores.", "input": "She looked up at the stars and got lost in thought.", "output": "She_looked_up_at_the_stars_and_got_lost_in_thought_", "category": "Python"}, {"instruction": "Create a CSS rule to make all text in a webpage to have font-size 14px.", "input": "", "output": "* {\n    font-size: 14px; \n}", "category": "Python"}, {"instruction": "How do you comment multiple lines in JavaScript?", "input": "", "output": "In Javascript, one can comment multiple lines by enclosing the code or text within the /* and */ symbols. For example:\n/*\nThis is an example\nof a multi-line comment\n*/", "category": "Python"}, {"instruction": "What does typeof do in JavaScript?", "input": "", "output": "The typeof operator in JavaScript is used to determine the type of a value. It can be used to determine the type of primitives, such as string, number, boolean, null, undefined, and Symbol, and the type of objects. It returns a string indicating the type of the argument.", "category": "Python"}, {"instruction": "Construct a SQL query to find the total salary spending of an organization by employees in the month of June.", "input": "", "output": "SELECT SUM(salary) AS TotalSalarySpending FROM Empolyees WHERE MONTH(date) = 6;", "category": "Python"}, {"instruction": "Generate a python statement to print out \"Hello World\".", "input": "", "output": "print(\"Hello World\")", "category": "Python"}, {"instruction": "Create a for-loop structure in Java that prints out each index in the array A from 0 to the length of A minus 1.", "input": "int[] A = {1, 2, 3, 4, 5}", "output": "for(int i = 0; i < A.length; i++) {\n    System.out.println(\"A[\" + i + \"] = \" + A[i]);\n}", "category": "Python"}, {"instruction": "Suggest a name for a new string variable.", "input": "", "output": "The name for the new string variable could be \"nameString\".", "category": "Python"}, {"instruction": "Create a Java program to compute the volume of a cube.", "input": "", "output": "public class CubeVolume {\n \n    public static void main(String[] args) {\n        double sideLenght = 10; \n        double volume;\n \n        volume = sideLenght * sideLenght * sideLenght;\n \n        System.out.println(\"Volume of a cube with side lenght \"+ sideLenght +\" is: \" + volume);\n    }\n}", "category": "Python"}, {"instruction": "Create a Python program that finds the highest number in a list of numbers.", "input": "[2, 4, 32, 41, 19]", "output": "# Initializing list\nlist_of_numbers = [2, 4, 32, 41, 19]\n\n# Finding the highest number\nmax_number = max(list_of_numbers)\n\n# Printing the result\nprint(max_number)\n\n# Output: 41", "category": "Python"}, {"instruction": "Write a SQL query that finds the names and ages of employees who are older than 40 years.", "input": "", "output": "SELECT name, age\nFROM employees \nWHERE age > 40;", "category": "Python"}, {"instruction": "Write an SQL query to find the number of employees working in a company with a salary over 50000.", "input": "", "output": "SELECT COUNT(*)\nFROM employees\nWHERE salary > 50000;", "category": "Python"}, {"instruction": "Create a script in JavaScript for flipping a coin.", "input": "", "output": "function coinFlip(){\n  let flipResult = Math.floor(Math.random() * 2);\n  \n  if (flipResult == 0){\n    return \"Heads\";\n  } \n  else {\n    return \"Tails\";\n  }\n}\n\nlet result = coinFlip();\nconsole.log(result);", "category": "Python"}, {"instruction": "Write a SQL query to find the top 3 highest paying employee\u2019s name and salary.", "input": "", "output": "SELECT TOP 3 name, salary FROM employees ORDER BY salary DESC;", "category": "Python"}, {"instruction": "Create an HTML webpage which when opened displays the current date in a paragraph.", "input": "", "output": "<!DOCTYPE html> \n<html> \n   <head> \n   <title>Date Page</title> \n   </head> \n   <body> \n      <p> \n      <?php \n       echo \"Current date: \" . date(\"d-m-Y\"); \n      ?> \n      </p> \n   </body> \n</html>", "category": "Python"}, {"instruction": "Create a function that takes in an array of strings and outputs an array of tuples of the first and last word in each string.", "input": "array = [\"Hello World\", \"Foo Bar\", \"Goodbye Moon\"]", "output": "def first_last_words(arr):\n    \"\"\"Gets the first and last word from each string.\n    \n    Parameters:\n    arr (list): array of strings\n    \"\"\"\n    result = []\n    for string in arr:\n        words = string.split()\n        result.append((words[0], words[-1]))\n    return result\n\nif __name__ == '__main__':\n    array = [\"Hello World\", \"Foo Bar\", \"Goodbye Moon\"]\n    print(first_last_words(array))", "category": "Python"}, {"instruction": "Write a code to check if a string contains only digits and output true or false.", "input": "string = \"1234567890\"", "output": "def is_digits(str):\n    \"\"\"Checks if a string contains only digits.\n    \n    Parameters:\n    str (str): string to be tested\n    \"\"\"\n    return str.isdigit()\n\nif __name__ == '__main__':\n    string = \"1234567890\"\n    print(is_digits(string))", "category": "Python"}, {"instruction": "Find the number of different words in a string of unlimited length.", "input": "string = \"This is a long sentence about nothing.\"", "output": "def word_count(str):\n    \"\"\"Counts the number of different words in a string of unlimited length.\n    \n    Parameters:\n    str (str): string to be counted\n    \"\"\"\n    words = str.split()\n    return len(set(words))\n\nif __name__ == '__main__':\n    string = \"This is a long sentence about nothing.\"\n    print(word_count(string))", "category": "Python"}, {"instruction": "Replace the comments in the code with the proper Python code.", "input": "#TODO: get the date from the user\n#TODO: get the month from the user", "output": "date = int(input(\"Enter the date: \"))\nmonth = int(input(\"Enter the month: \"))", "category": "Python"}, {"instruction": "Create a function to output true if the given string is a palindrome, otherwise output false.", "input": "string = \"racecar\"", "output": "def is_palindrome(str):\n    \"\"\"Checks if a given string is a palindrome.\n    \n    Parameters:\n    str (str): string to be tested\n    \"\"\"\n    str = str.lower()\n    return str[::-1] == str\n\nif __name__ == '__main__':\n    string = \"racecar\"\n    print(is_palindrome(string))", "category": "Python"}, {"instruction": "Count how many words are in a string and output the count.", "input": "string = \"Hello world!\"", "output": "def count_words(str):\n    \"\"\"Counts how many words are in a string.\n    \n    Parameters:\n    str (str): string to be counted\n    \"\"\"\n    return len(str.split())\n\nif __name__ == '__main__':\n    string = \"Hello world!\"\n    print(count_words(string))", "category": "Python"}, {"instruction": "Rewrite the following code so that the loop runs in reverse (decreases rather than increases).", "input": "for i in range(0, 10):\n    print(i)", "output": "for i in range(10, 0, -1):\n    print(i)", "category": "Python"}, {"instruction": "Create a dictionary where the numbers 1 to 100 are the keys and the strings \"one\" to \"one hundred\" are the values.", "input": "", "output": "d = {\n    1: 'one',\n    2: 'two',\n    3: 'three',\n    4: 'four',\n    5: 'five',\n    6: 'six',\n    7: 'seven',\n    8: 'eight',\n    9: 'nine',\n    10: 'ten',\n    11: 'eleven',\n    12: 'twelve',\n    13: 'thirteen',\n    14: 'fourteen',\n    15: 'fifteen',\n    16: 'sixteen',\n    17: 'seventeen',\n    18: 'eighteen',\n    19: 'nineteen',\n    20: 'twenty',\n    21: 'twenty-one',\n    22: 'twenty-two',\n    23: 'twenty-three',\n    24: 'twenty-four',\n    25: 'twenty-five',\n    26: 'twenty-six',\n    27: 'twenty-seven',\n    28: 'twenty-eight',\n    29: 'twenty-nine',\n    30: 'thirty',\n    31: 'thirty-one',\n    32: 'thirty-two',\n    33: 'thirty-three',\n    34: 'thirty-four',\n    35: 'thirty-five',\n    36: 'thirty-six',\n    37: 'thirty-seven',\n    38: 'thirty-eight',\n    39: 'thirty-nine',\n    40: 'forty',\n    41: 'forty-one',\n    42: 'forty-two',\n    43: 'forty-three',\n    44: 'forty-four',\n    45: 'forty-five',\n    46: 'forty-six',\n    47: 'forty-seven',\n    48: 'forty-eight',\n    49: 'forty-nine',\n    50: 'fifty',\n    51: 'fifty-one',\n    52: 'fifty-two',\n    53: 'fifty-three',\n    54: 'fifty-four',\n    55: 'fifty-five',\n    56: 'fifty-six',\n    57: 'fifty-seven',\n    58: 'fifty-eight',\n    59: 'fifty-nine',\n    60: 'sixty',\n    61: 'sixty-one',\n    62: 'sixty-two',\n    63: 'sixty-three',\n    64: 'sixty-four',\n    65: 'sixty-five',\n    66: 'sixty-six',\n    67: 'sixty-seven',\n    68: 'sixty-eight',\n    69: 'sixty-nine',\n    70: 'seventy',\n    71: 'seventy-one',\n    72: 'seventy-two',\n    73: 'seventy-three',\n    74: 'seventy-four',\n    75: 'seventy-five',\n    76: 'seventy-six',\n    77: 'seventy-seven',\n    78: 'seventy-eight',\n    79: 'seventy-nine',\n    80: 'eighty',\n    81: 'eighty-one',\n    82: 'eighty-two',\n    83: 'eighty-three',\n    84: 'eighty-four',\n    85: 'eighty-five',\n    86: 'eighty-six',\n    87: 'eighty-seven',\n    88: 'eighty-eight',\n    89: 'eighty-nine',\n    90: 'ninety',\n    91: 'ninety-one',\n    92: 'ninety-two',\n    93: 'ninety-three',\n    94: 'ninety-four',\n    95: 'ninety-five',\n    96: 'ninety-six',\n    97: 'ninety-seven',\n    98: 'ninety-eight',\n    99: 'ninety-nine',\n    100: 'one hundred'\n    }", "category": "Python"}, {"instruction": "Replace the placeholder with actual API calls to execute the following code.", "input": "string search_term = \"coffee shop\"; \nlist results = API_call(search_term)\nprint(results)", "output": "string search_term = \"coffee shop\"; \nlist results = requests.get(\"https://api.example.com/search?term=\"+search_term).json()\nprint(results)", "category": "Python"}, {"instruction": "Create an asyncio event loop and execute a coroutine.", "input": "", "output": "import asyncio\n\nasync def myfunc():\n   print(\"I'm in a coroutine\")\n\nloop = asyncio.get_event_loop()\ntry:\n    loop.run_until_complete(myfunc())\n\nfinally:\n    loop.close()", "category": "Python"}, {"instruction": "Write a query in SQL that returns all customers with the name \"John\".", "input": "No input", "output": "SELECT * \nFROM customer \nWHERE customer_name = 'John';", "category": "Python"}, {"instruction": "Use a framework like React to create a button component that fires an event when clicked.", "input": "", "output": "class Button extends React.Component {\n  handleClick = () => {\n    console.log('Button was clicked!')\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        Click Me!\n      </button>\n    )\n  }\n}", "category": "Python"}, {"instruction": "Create a list of unique elements from a list of numbers.", "input": "nums = [1, 1, 2, 3, 3, 4, 4, 5, 6]", "output": "# Create a list of unique elements from given list\nunique_nums = list(set(nums))\n\n# Print the list\nprint(unique_nums)", "category": "Python"}, {"instruction": "Given a list of emails and corresponding info, write a code to keep only the emails and transform the list into a dictionary of emails and corresponding info.", "input": "my_list = [('john@example.com', 'John Smith', '27'), \n           ('sarah@example.com', 'Sarah Jane', '31'), \n           ('paul@example.com', 'Paul Walker', '45')]", "output": "# Create a dictionary of emails and corresponding info \nemail_dict = {email[0]: email[1:] for email in my_list}\n\n# Print the dictionary\nprint(email_dict)", "category": "Python"}, {"instruction": "Convert an array of tuples of 2 numbers into an array of complex numbers.", "input": "tuple_array = [(3,4), (5,6), (7,8)]", "output": "import numpy as np \n\n# Convert the array of tuples into an array of complex numbers \ncomplex_arr = np.array(tuple_array, dtype=complex)\n\n# Print the complex array\nprint(complex_arr)", "category": "Python"}, {"instruction": "Perform a linear search on an array of 10 numbers and return the index for the target number.", "input": "nums = [2, 8, -4, 1, 0, 5, 3, 9, 6, 10]\ntarget_num = 8", "output": "def linear_search(nums, target_num):\n    # Get the length of the array\n    len_nums = len(nums)\n\n    # Loop through the array to find the index of the target number\n    for i in range(len_nums):\n        if nums[i] == target_num:\n            # Return the index of the target number\n            return i\n\n# Get the index of the target number\nindex = linear_search(nums, target_num)\n\n# Print the index\nprint(index)", "category": "Python"}, {"instruction": "Compare two strings and return the index of the first character that is unequal in the two strings.", "input": "string1 = \"Hello world!\"\nstring2 = \"Howdy world!\"", "output": "def get_index_of_first_diff(string1, string2):\n    # Get the length of the strings \n    len_1 = len(string1)\n    len_2 = len(string2)\n\n    # Get the length of the shorter string\n    len_shorter = min(len_1, len_2)\n\n    # Compare the two strings character by character\n    for i in range(len_shorter):\n        if string1[i] != string2[i]:\n            # Return the index of the first differing character\n            return i\n\n# Get the index of first differing character\nindex = get_index_of_first_diff(string1, string2)\n\n# Print the index\nprint(index)", "category": "Python"}, {"instruction": "Parse a string containing HTML markups and extract the text content.", "input": "html_string = '<html><body><h1>Sample HTML String</h1>Hello there!</body></html>'", "output": "import html\n\n# Parse the string\nparsed_string = html.unescape(html_string)\n\n# Extract the text content\ntext_content = parsed_string.split('>')[-1]\n\n# Print the content\nprint(text_content)", "category": "Python"}, {"instruction": "Compute the sum of all elements in a numpy array.", "input": "import numpy as np\narr = np.array([[1,2,3],[4,5,6]])", "output": "import numpy as np\narr = np.array([[1,2,3],[4,5,6]])\n\n# Get the sum of all elements in the array\ntotal_sum = np.sum(arr)\n\n# Print the sum\nprint(total_sum)", "category": "Python"}, {"instruction": "Determine the output of this code snippet in C++: int x = 7; x = x + x + 2;", "input": "", "output": "The output of the code snippet is 22, since the value of x will be incremented twice, from 7 to 16 and then again from 16 to 22.", "category": "Python"}, {"instruction": "Create an instance of an Apache Spark DataFrame using an existing Pandas dataframe.", "input": "import pandas as pd\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})", "output": "from pyspark.sql import SparkSession\n\n# Create SparkSession object\nspark = SparkSession.builder.getOrCreate()\n\n# Create Spark DataFrame using Pandas df\nspark_df = spark.createDataFrame(df)", "category": "Python"}, {"instruction": "Explain the purpose of the %i in a Python format string.", "input": "", "output": "The %i in Python is a special format specifier used to format integer numbers. When used in a format string, it will convert the number to an integer and insert it into the output string. This can be used to easily format numbers when printing output.", "category": "Python"}, {"instruction": "Create a CSS style that changes the color of links to red when visited.", "input": "", "output": "a:link {\n    color: blue;\n}\n\na:visited {\n    color: red;\n}", "category": "Python"}, {"instruction": "Determine the type of data structure that is most suitable for the given case.", "input": "Use case: You need to store multiple formats of information like a person's name (string), age (integer) and pets (array) in a data structure.", "output": "The most suitable data structure for this use case is an object, as it is capable of storing multiple values of various types.", "category": "Python"}, {"instruction": "Re-write this Python code as a JavaScript function.", "input": "def double_number(num):\n  return num * 2", "output": "function doubleNumber(num) {\n  return num * 2;\n}", "category": "Python"}, {"instruction": "Multiply two input matrices using numpy.", "input": "matrix A:\n[[1,2],\n[3,4]]\n\nmatrix B:\n[[5,6],\n[7,8]]", "output": "import numpy as np\nA = np.array([[1,2], [3,4]]) \nB = np.array([[5,6], [7,8]]) \n\nC = np.matmul(A,B)\nprint(C)", "category": "Python"}, {"instruction": "Create a React class component that renders a paragraph of text from props.", "input": "", "output": "class Paragraph extends React.Component {\n  render() {\n    return <p>{this.props.text}</p>\n  }\n}", "category": "Python"}, {"instruction": "Create a function in Python that takes two integers N and M and prints out all possible combinations of numbers that add up to N and are at most M.", "input": "N=8, M=3", "output": "def combinations_with_sum(n, m): \n  for i in range(1, m): \n    for j in range(i, m):\n      if i + j == n:\n        print(i, '+', j, '=', n)", "category": "Python"}, {"instruction": "Change the following code snippet to use a different method to display the alert.", "input": "alert(\"Hello World!\");", "output": "console.log(\"Hello World!\");", "category": "Python"}, {"instruction": "Write a Python program to parse a date string and display the date in ISO 8601 format.", "input": "date_string = '21 May 2021'", "output": "from datetime import datetime\nimport re\n\n# Parse the date string \ndate = datetime.strptime(date_string, '%d %B %Y')\n\n# Convert the date to ISO 8601 format\niso_8601 = date.strftime(\"%Y-%m-%d\")\n\n# Print the ISO 8601 formatted date\nprint(iso_8601)", "category": "Python"}, {"instruction": "What is the command for cloning a GitHub repository?", "input": "", "output": "The command for cloning a GitHub repository is `git clone <repository-url>`.", "category": "Python"}, {"instruction": "How can you access the third element of a tuple T?", "input": "", "output": "T[2]", "category": "Python"}, {"instruction": "Fix the following C++ code segment.", "input": "#include <iostream>\n\nint main()\n{\n    if (a == b)\n    {\n        cout << a;", "output": "#include <iostream>\n\nint main()\n{\n    int a, b;\n    cin >> a >> b;\n    if (a == b)\n    {\n        cout << a;\n    }\n    return 0;\n}", "category": "Python"}, {"instruction": "Write a SQL query to find the number of customers that have purchased a product more than 5 times.", "input": "The database has three tables: \n \ncustomer(cust_id, cust_name, balance) \nproduct(prod_id, prod_name, price) \nsales(cust_id, prod_id, quantity)", "output": "SELECT count(*) \nFROM customer c \nJOIN sales s on c.cust_id = s.cust_id \nGROUP BY c.cust_id \nHAVING SUM(s.quantity) > 5;", "category": "Python"}, {"instruction": "Build a package and deploy it in the cloud.", "input": "The package is an API to authenticate users and the API should be able to authenticate users having different types of API keys.", "output": "Create a package containing API authentication logic and all the necessary API keys. Set up a cloud service, such as AWS or GCP, and deploy the package. Configure the cloud service to accept incoming requests and authenticate the user using the API keys.", "category": "Python"}, {"instruction": "Rewrite this code into Python.", "input": "ArrayList<Integer> arr = new ArrayList<>();\nfor (int i = 0; i < 10; i++) {\n    arr.add(i);\n}\n\nint sum = 0;\nfor(int num : arr){\n    sum += num;\n}", "output": "arr = []\nfor i in range(10):\n    arr.append(i)\n\nsum = 0\nfor num in arr:\n    sum += num", "category": "Python"}, {"instruction": "Explain the differences between OOP and procedural programming.", "input": "", "output": "Object-oriented programming (OOP) is a programming paradigm that is based on the concept of objects which contain both data and methods. These objects can interact with each other to create complex systems. Procedural programming is a programming paradigm that is based on the concept of procedures or functions that are used to complete a task. The main difference between OOP and procedural programming is that OOP focuses on the utilization of objects to create complex system while procedural programming focuses on the utilization of procedures or functions.", "category": "Python"}, {"instruction": "Find the errors in this HTML page.", "input": "<html>\n  <title> My Webpage </title>\n  <body>\n    <h2>Welcome!</h2>\n  </head>\n</html>", "output": "The error in the HTML page is that there is no closing <body> tag. The HTML page should have a closing </body> tag after the <h2>Welcome!</h2> tag.", "category": "Python"}, {"instruction": "Rewrite this SQL query in Postgres.", "input": "SELECT id, prof_name\nFROM teachers\nWHERE rank = 'assistant'", "output": "SELECT id, prof_name\nFROM teachers\nWHERE rank = 'Associate Professor'  // fixed the rank.", "category": "Python"}, {"instruction": "Identify the possible output types for the following task.", "input": "Task: Write a Spark program to calculate the mean and the median of a set of numbers.", "output": "The possible output types for the given task are Double, Int, Float, and Long.", "category": "Python"}, {"instruction": "Find a way to calculate the power of a number without using * or **", "input": "base = 3\nexponent = 4", "output": "def power(base, exponent): \n    result = 1\n    for _ in range(exponent):\n        result *= base \n    return result", "category": "Python"}, {"instruction": "Create a function that reverses a given string without using the built-in parity.", "input": "str = 'I am here for the coding challenge\"", "output": "def reverse_string_without_parity(str):\n  # Create empty string \n  reversed_str = \"\" \n  # Iterate through the input string in the reverse order\n  for i in range(len(str)-1,-1,-1): \n    reversed_str += str[i] \n  return reversed_str", "category": "Python"}, {"instruction": "Edit the following code so that it prints out all powers of 2 up to 2^n", "input": "n = 5", "output": "def power_of_2(n):\n    result = 1\n    for i in range(n):\n        print(result)\n        result *= 2", "category": "Python"}, {"instruction": "Write a function to find the smallest subarray with a given sum.", "input": "arr = [3, 4, 5, 6, 7], sum = 11", "output": "def smallest_subarray_sum(arr, sum):\n\n    start = 0\n    end = 1\n    min_length = float('inf')\n    current_sum = arr[start]\n    while(end < len(arr)):\n        while(current_sum < sum and end < len(arr)):\n            current_sum += arr[end]\n            end += 1\n\n        while(start < end and current_sum >= sum):\n            min_length = min(min_length, end-start)\n            current_sum -= arr[start]\n            start += 1\n    \n    return min_length", "category": "Python"}, {"instruction": "Find a way to get the size of a linked list without traversing it.", "input": "head: 1 -> 2 -> 3 -> 4 -> 5 -> null", "output": "def get_list_size(head):\n    count = 0\n    temp = head\n    while(temp):\n        count += 1\n        temp = temp.next\n    return count", "category": "Python"}, {"instruction": "Implement a method that reverses a linked list", "input": "head = 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> null", "output": "// A linked list node \nclass Node: \n    # Constructor to create a new node \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n\n# Function to reverse the linked list  \ndef reverse(head): \n    prev = None\n    current = head\n    while(current is not None): \n        next = current.next\n        current.next = prev \n        prev = current \n        current = next\n    head = prev \n    return head", "category": "Python"}, {"instruction": "Create a function that takes in two strings and determines of the strings are anagrams", "input": "String 1: \"spite\"\nString 2: \"pists\"", "output": "def is_anagram(str1, str2): \n    # convert the strings to lowercase \n    str1 = str1.lower() \n    str2 = str2.lower() \n\n    # sorting both the strings \n    s1 = sorted(str1) \n    s2 = sorted(str2) \n\n    if len(s1) != len(s2): \n        return False\n\n    # compare character by character \n    for i in range(len(s1)): \n        if s1[i] != s2[i]: \n            return False\n    return True\n\n# Driver code \nif is_anagram(\"spite\", \"pists\"):\n    print(\"Strings are anagrams\")\nelse:\n    print(\"Strings are not anagrams\")", "category": "Python"}, {"instruction": "Identify any type error that is present in the following code.", "input": "def sum_of_values(num_list): \n    total = 0\n    for value in num_list:\n        total += value \n    return total/len(num_list)\n\nsquare_value = sum_of_values(5)", "output": "Type error: The function sum_of_values() takes a list as an argument, but the argument provided is an integer (5).", "category": "Python"}, {"instruction": "Write a HTML page to display a bar chart representing the total sales of a company in different months.", "input": "Months: Jan, Feb, Mar, Apr, May \nTotal sales in each month: 2500, 4000, 4500, 6000, 5500", "output": "<html>\n<head>\n    <title>Bar Chart Representing Total Sales</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js@2.8.0\"></script>\n    <style>\n    canvas{\n        -moz-user-select: none;\n        -webkit-user-select: none;\n        -ms-user-select: none;\n    }\n    </style>\n</head>\n<body>\n<div style=\"width:75%;\">\n    <canvas id=\"myBarChart\"></canvas>\n</div>\n<script>\n    var ctx = document.getElementById('myBarChart').getContext('2d');\n    var myBarChart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n            labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\"],\n            datasets: [{\n                label: \"Total sales\",\n                data: [2500, 4000, 4500, 6000, 5500],\n                backgroundColor: [\n                    'rgba(255, 99, 132, 0.2)',\n                    'rgba(54, 162, 235, 0.2)',\n                    'rgba(255, 206, 86, 0.2)',\n                    'rgba(75, 192, 192, 0.2)',\n                    'rgba(153, 102, 255, 0.2)'\n                ],\n                borderColor: [\n                    'rgba(255, 99, 132, 1)',\n                    'rgba(54, 162, 235, 1)',\n                    'rgba(255, 206, 86, 1)',\n                    'rgba(75, 192, 192, 1)',\n                    'rgba(153, 102, 255, 1)'\n                ],\n            }]\n        },\n        options: {\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        beginAtZero: true\n                    }\n                }]\n            }\n        }\n    });\n</script>\n</body>\n</html>", "category": "Python"}, {"instruction": "Given a list of integers, write a function to compute their average.", "input": "List of integers: [1, 2, 3, 4, 5]", "output": "def compute_average(lst): \n    total = 0\n    for num in lst: \n        total += num \n        \n    # calculate the average \n    avg = total / len(lst) \n    \n    return avg\n\n# Driver Code \nlst = [1, 2, 3, 4, 5] \nprint(\"Average of the list =\", round(compute_average(lst), 2))", "category": "Python"}, {"instruction": "Change the code to make it a valid Python program.", "input": "x = \"hello world", "output": "x = \"hello world\"", "category": "Python"}, {"instruction": "What data type does the output of this Python code have?", "input": "x = 5", "output": "integer", "category": "Python"}, {"instruction": "Write a one-liner to print the elements from list L in reverse order.", "input": "L = [\"apple\", \"pear\", \"banana\"]", "output": "print(*L[::-1])", "category": "Python"}, {"instruction": "Change the last line of the code to assign a list value to the variable x.", "input": "x = None", "output": "x = []", "category": "Python"}, {"instruction": "Extract words starting with 's' in this sentence.", "input": "Sentence: I send a package to Steve.", "output": "send, Steve.", "category": "Python"}, {"instruction": "Write an Android app to display the current time and date", "input": "", "output": "public class MainActivity extends AppCompatActivity {\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n super.onCreate(savedInstanceState);\n setContentView(R.layout.activity_main);\n\n TextView tvTimeDate = findViewById(R.id.tvTimeDate);\n\n SimpleDateFormat dateFormat = new SimpleDateFormat(\"dd MMM yyyy, hh:mm aa\");\n Date date = new Date();\n String dateTime = dateFormat.format(date);\n\n tvTimeDate.setText(dateTime);\n }\n}", "category": "Python"}, {"instruction": "Create a Java program to print out the multiplication table for the first 10 numbers", "input": "", "output": "public class MultiplicationTable {\n public static void main(String[] args) {\n  for (int i = 1; i <= 10; i++) {\n   for (int j = 1; j <= 10; j++) {\n    System.out.print(i * j + \" \");\n   }\n   System.out.println();\n  }\n }\n}", "category": "Python"}, {"instruction": "Change the code to make it an Expression Statement in Python", "input": "x + 1", "output": "print(x + 1)", "category": "Python"}, {"instruction": "Write an R function to calculate the binomial coefficient of n and k", "input": "", "output": "binomial_coeff <- function(n, k) {\n   if((k == 0) | (k == n))  \n   return(1)\n   else return(binomial_coeff(n-1, k-1) + binomial_coeff(n-1,k))  \n}", "category": "Python"}, {"instruction": "Compile the following code in C++ and check for any warnings or errors.", "input": "#include<iostream>\nusing namespace std;\n\nint main() {\n cout << \"Hello World!\";\n return 0;\n}", "output": "No output is produced when compiling the above code in C++. Any warnings or errors should be indicated while compiling.", "category": "Python"}, {"instruction": "Create a Python class to hold a student's information: name, age and major.", "input": "", "output": "class Student:\n def __init__(self, name, age, major):\n self.name = name\n self.age = age\n self.major = major\n\ndef get_name(self):\n return self.name\n\ndef get_age(self):\n return self.age\n\ndef get_major(self):\n return self.major", "category": "Python"}, {"instruction": "Write a CSS style to turn all text in a document to italic.", "input": "", "output": "* {\n font-style: italic;\n}", "category": "Python"}, {"instruction": "Create a REST API endpoint that returns a list of all user names from a list of users.", "input": "", "output": "app.get('/users', (req, res) => {\n const users = [\n { id: 1, name: 'John' },\n { id: 2, name: 'Jane' },\n { id: 3, name: 'Jack' },\n ];\n\n const userNames = users.map(user => user.name);\n\n res.status(200).json(userNames);\n});", "category": "Python"}, {"instruction": "Create a program to split the given string on a specific character.", "input": "String: \"A/B/C/D\"\nCharacter: \"/\"", "output": "def split_string(string, character):\n    return string.split(character)\n    \nif __name__ == '__main__':\n    string = \"A/B/C/D\"\n    character = \"/\"\n    print(split_string(string, character)) # outputs ['A', 'B', 'C', 'D']", "category": "Python"}, {"instruction": "Generate all combinations of the string \"abcd\".", "input": "", "output": "def generate_combinations(string):\n    result = []\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            result.append(string[i:j])\n    return result\n\nif __name__ == '__main__':\n    string = \"abcd\"\n    print(generate_combinations(string)) # outputs ['a', 'ab', 'abc', 'abcd', 'b', 'bc', 'bcd', 'c', 'cd', 'd']", "category": "Python"}, {"instruction": "Explain what is the purpose of a classifier model in machine learning", "input": "", "output": "The purpose of a classifier model in machine learning is to predict the class or category of an input data point. A classifier acts as a decision boundary between different categories of data points. It takes a set of input features, applies a set of mathematical operations to them, and uses them to make a prediction about the class of the input data point.", "category": "Python"}, {"instruction": "Create a JavaScript object that holds the global temperatures for the last 5 years.", "input": "", "output": "const temperatures = {\n  2015: 34.7,\n  2016: 35.2,\n  2017: 35.7,\n  2018: 36.1,\n  2019: 36.7\n};", "category": "Python"}, {"instruction": "Find a way to randomly swap two elements of an array.", "input": "[1, 2, 3, 4, 5]", "output": "import random \n# Function to swap two elements \n# in a list at positions i and j  \ndef swap(arr, i, j): \n    arr[i], arr[j] = arr[j], arr[i] \n\n# Function to generate a random \n# permutation of arr[]  \ndef randomize ( arr, n ) : \n    # Start from the last element and swap \n    # one by one. We don't need to run for\n    # the first element that's why i > 0 \n    for i in range(n-1,0,-1): \n        # Pick a random index from 0\n        # to i \n        j = random.randint(0,i+1) \n        # Swap arr[i] with the element \n        # at random index \n        swap(arr, i, j)", "category": "Python"}, {"instruction": "Write a SQL query to retrieve the max and min values from a field.", "input": "table_name = 'Users'\ncolumn_name = 'age'", "output": "SELECT MAX(age) AS maximum, MIN(age) AS minimum \nFROM Users;", "category": "Python"}, {"instruction": "Using the input string, create a new string that contains all the characters in even indices.", "input": "my_string = \"abcdefghi\"", "output": "# Create an empty string\nnew_string = \"\"\n\n# Iterate over the even indices\nfor i in range(0, len(my_string), 2):\n    new_string += my_string[i]\n\n# Print the new string\nprint(new_string) # prints 'acegi'", "category": "Python"}, {"instruction": "Edit a given JSON string to set a specific value in it.", "input": "JSON String:  {\n \"name\": \"John Doe\",\n \"age\": 20,\n \"address\": {\n  \"street\": \"1 Main Street\", \n  \"city\": \"New York\"\n  }\n }\nSet the age to 25.", "output": "{\n \"name\": \"John Doe\",\n \"age\": 25,\n \"address\": {\n  \"street\": \"1 Main Street\", \n  \"city\": \"New York\"\n  }\n }", "category": "Python"}, {"instruction": "Replace each character of a string with the next character in alphabetic order.", "input": "", "output": "def replace_chars(s): \n    chars = list(s) \n    res = \"\" \n    for char in chars: \n        res += chr(ord(char) + 1) \n  \n    return res", "category": "Python"}, {"instruction": "Write a code in C to print a given integer in binary.", "input": "Integer: 10", "output": "#include <stdio.h>\n \nvoid printBinary(unsigned int num)\n{\n    if (num == 0)\n        printf(\"0\");\n    else\n    {\n        printBinary(num / 2);\n        printf(\"%d\", num % 2);\n    }\n}\n \nint main()\n{\n    int n = 10;\n \n    printf(\"The binary representation of %d is: \", n);\n    printBinary(n);\n    printf(\"\\n\");\n    return 0;\n}\n\n# Output: The binary representation of 10 is: 1010", "category": "Python"}, {"instruction": "Construct a linked list data structure in C language.", "input": "", "output": "#include <stdio.h>\n#include <stdlib.h>\n \n// Node of a linked list\nstruct Node \n{\n    int data;\n    struct Node *next;\n};\n \n// Function to create a new node\nstruct Node *newnode(int data)\n{\n    struct Node *temp = (struct Node*)malloc(sizeof(struct Node));\n    temp->data = data;\n    temp->next = NULL;\n    return temp;\n}\n\n// Function to insert a node at the beginning of the Linked List\nvoid insertAtBeginning(struct Node** head, int data) \n{\n    // Create the new node\n    struct Node* new_node = newnode(data); \n  \n    // Make the next of new node as head node\n    new_node->next = *head; \n  \n    // Move the head to point to the new node\n    *head = new_node;\n}\n\n// Function to insert a node at the end of the Linked List\nvoid append(struct Node** head, int data) \n{\n    struct Node* new_node = newnode(data);  \n  \n    // If the Linked List is empty, \n    // then make new_node as head \n    if (*head == NULL) \n    { \n        *head = new_node; \n        return; \n    } \n  \n    // Else traverse to the end of the Linked List\n    struct Node *last = *head;\n    while (last->next != NULL) \n        last = last->next; \n  \n    // Change the next of last node\n    last->next = new_node; \n    return; \n}", "category": "Python"}, {"instruction": "Write a code in SQL to select the employee information from 'employee' table where the salary is greater than 2000 and is less than 3000.", "input": "", "output": "SELECT * FROM employee \nWHERE salary > 2000 AND salary < 3000;", "category": "Python"}, {"instruction": "Use regular expressions to filter words beginning with 't' from a given sentence.", "input": "Sentence: The quick brown fox jumps over the lazy dog.", "output": "import re\n\nsentence = \"The quick brown fox jumps over the lazy dog.\"\n\nfiltered_words = re.findall(r\"\\b[tT]\\w+\", sentence)\n\nprint(filtered_words) \n\n# Output: ['The', 'that', 'the']", "category": "Python"}, {"instruction": "Provide an example of a Python class and its elements.", "input": "", "output": "class Car: \n    def __init__(self, color, make, model): \n        self.color = color \n        self.make = make \n        self.model = model \n    \n    def start(self): \n        print(\"Engine started!\") \n\nford_mustang = Car('Red', 'Ford', 'Mustang') \nford_mustang.start()", "category": "Python"}, {"instruction": "Write a function to calculate the perimeter of a provided triangle by using its three side lengths.", "input": "", "output": "def calculatePerimeter(s1, s2, s3):\n    \"\"\"This function will calculate the perimeter of a triangle\n    given its three side lengths\"\"\"\n\n    #Calculate the perimeter\n    perimeter = s1 + s2 + s3\n\n    #Return the perimeter\n    return perimeter", "category": "Python"}, {"instruction": "Depending on the provided boolean value, set the result to 0 or 1.", "input": "bool1 = False", "output": "#Set the result based on the boolean value\nif bool1:\n    result = 1\nelse:\n    result = 0\n\n#Print the result\nprint(result)", "category": "Python"}, {"instruction": "Construct an SQL query to delete records from the \"users\" table that have a name of \"John\" or \"David\".", "input": "", "output": "DELETE FROM users \n    WHERE name IN ('John', 'David');", "category": "Python"}, {"instruction": "Create a function that filters the numbers in the list and returns a list of prime numbers only.", "input": "list3 = [3, 4, 5, 7, 11, 13]", "output": "def primeNums(inputList):\n    #Create an empty list\n    primes = []\n\n    #Iterate over the list\n    for num in inputList:\n        #Check if the number is prime\n        isPrime = True\n        for i in range(2, num):\n            if num % i == 0:\n                isPrime = False\n        #Add the number to the list if prime\n        if isPrime:\n            primes.append(num)\n\n    #Return the list\n    return primes\n\n#Print the list\nprint(primeNums(list3))", "category": "Python"}, {"instruction": "Create a method that parses the provided HTML and returns a list of all the <p> tags.", "input": "<html>\n    <p>This is a test.</p>\n    <a href=\"\">link</a>\n    <p>Another test.</p>\n</html>", "output": "#Create a method to parse the HTML\ndef getPTags(html):\n    #Create an empty list\n    pTags = []\n\n    #Iterate over the HTML\n    for line in html.split(\"\\n\"):\n        #Check if the line is a <p> tag\n        if \"<p>\" in line:\n            #Add the tag to the list\n            pTags.append(line)\n\n    #Return the list\n    return pTags\n\n#Print the list\nprint(getPTags(html))", "category": "Python"}, {"instruction": "Create a dictionary such that each element in the list is a key and the respective value is its length.", "input": "words = ['cat', 'dog', 'elephant']", "output": "#Create a new dictionary\nwordLengths = {}\n\n#Fill in the dictionary with the words as keys and their respective lengths as values\nfor word in words:\n    wordLengths[word] = len(word)\n\n#Print the populated dictionary\nprint(wordLengths)", "category": "Python"}, {"instruction": "Replace the placeholder words in the string with the provided words.", "input": "This is a PLACEHOLDER1 sentence with PLACEHOLDER2 words.\nplaceholder1 = \"sample\"\nplaceholder2 = \"three\"", "output": "#Replace the words in the string\nmodifiedString = \"This is a \" + placeholder1 + \" sentence with \" + placeholder2 + \" words.\"\n\n#Print the modified string\nprint(modifiedString)", "category": "Python"}, {"instruction": "Create a table that lists the output of the given SQL query.", "input": "SELECT course_id, COUNT(*) as count\nFROM students\nGROUP BY course_id", "output": "course_id | count\n----------+------\nC1        | 10\nC2        | 5\nC3        | 3", "category": "Python"}, {"instruction": "Refactor the following code in C++ to incorporate dynamic memory allocation.", "input": "#include <stdio.h>\nint main() \n{ \n    int a[20]; \n    int n = 20;\n    for (int i=0; i<n; i++) \n        scanf(\"%d\", &a[i]); \n    return 0;\n}", "output": "#include <stdio.h>\n#include <stdlib.h>\nint main() \n{\n    int* a;\n    int n = 20;\n    a = (int *)malloc(n * sizeof(int)); \n    for (int i=0; i<n; i++) \n        scanf(\"%d\", &a[i]); \n    free(a); \n    return 0;\n}", "category": "Python"}, {"instruction": "Edit the following JSON to add a new key.", "input": "{\n \"name\" : \"Bob\", \n \"age\" : 32\n}", "output": "{\n \"name\" : \"Bob\", \n \"age\" : 32,\n \"profession\" : \"dentist\"\n}", "category": "Python"}, {"instruction": "Create an HTML page with a text input box, a submit button and a table to display the results.", "input": "", "output": "<html>\n    <head>\n        <title>Inputs</title>\n    </head>\n    <body>\n        <form>\n            <input type=\"text\" id=\"inputText\">\n            <input type=\"submit\" value=\"Submit\">\n        </form>\n        <table>\n            <thead>\n                <tr>\n                    <th>Input Text</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td id=\"displayValue\"></td>\n                </tr> \n            </tbody>\n        </table>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Modify the code provided so it prints the first 10 prime numbers.", "input": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True", "output": "def is_prime(n): \n    if n == 1: \n        return False\n    for i in range(2, n): \n        if n % i == 0: \n            return False\n    return True\n\ndef print_primes():\n    count = 0\n    number = 2\n    while(count != 10):\n        if is_prime(number):\n            print(number)\n            count += 1\n        number += 1\n\nprint_primes()", "category": "Python"}, {"instruction": "Generate a SQL query to update existing row in a table", "input": "Table = employee\nSet salary = 5000 where id = 2", "output": "UPDATE employee \nSET salary = 5000 \nWHERE id = 2;", "category": "Python"}, {"instruction": "Generate a SQL query to select all distinct numbers from a column named 'nums'", "input": "", "output": "SELECT DISTINCT nums FROM table;", "category": "Python"}, {"instruction": "Generate a Java program to sort an array of n elements in ascending order", "input": "", "output": "public static void sort(int arr[]) \n{ \n    int n = arr.length; \n  \n    // Build heap (rearrange array) \n    for (int i = n / 2 - 1; i >= 0; i--) \n        heapify(arr, n, i); \n  \n    // One by one extract an element from heap \n    for (int i=n-1; i>=0; i--) \n    { \n        // Move current root to end \n        int temp = arr[0]; \n        arr[0] = arr[i]; \n        arr[i] = temp; \n  \n        // call max heapify on the reduced heap \n        heapify(arr, i, 0); \n    } \n} \n  \n// To heapify a subtree rooted with node i which is \n// an index in arr[]. n is size of heap \nstatic void heapify(int arr[], int n, int i) \n{ \n    int largest = i; // Initialize largest as root \n    int l = 2*i + 1; // left = 2*i + 1 \n    int r = 2*i + 2; // right = 2*i + 2 \n  \n    // If left child is larger than root \n    if (l < n && arr[l] > arr[largest]) \n        largest = l; \n  \n    // If right child is larger than largest so far \n    if (r < n && arr[r] > arr[largest]) \n        largest = r; \n  \n    // If largest is not root \n    if (largest != i) \n    { \n        int swap = arr[i]; \n        arr[i] = arr[largest]; \n        arr[largest] = swap; \n  \n        // Recursively heapify the affected sub-tree \n        heapify(arr, n, largest); \n    } \n}", "category": "Python"}, {"instruction": "Change the response to now fulfill the following purpose", "input": "Find the number of ones in a binary number 101011", "output": "def find_ones(n):\n    count = 0\n    while n > 0:\n        if n % 10 == 1:\n            count += 1\n        n //= 10        \n    return count", "category": "Python"}, {"instruction": "Generate a program that finds the sum of all natural numbers from 0 to n", "input": "", "output": "def find_sum(n): \n    sum = 0\n    for i in range(n+1): \n        sum += i \n    return sum", "category": "Python"}, {"instruction": "Give an example of the binary search algorithm", "input": "", "output": "def binary_search(arr, target): \n    low = 0\n    high = len(arr) - 1\n  \n    while low <= high: \n  \n        mid = (low+high) // 2\n  \n        # Check if target is present at mid \n        if arr[mid] == target: \n            return mid \n  \n        # If target is greater than mid, ignore left half \n        elif arr[mid] < target: \n            low = mid + 1\n  \n        # If target is smaller than mid, ignore right half \n        else: \n            high = mid - 1\n  \n    # If we reach here, then the element was not present \n    return -1", "category": "Python"}, {"instruction": "Output the length of the string passed to the function.", "input": "def getLengthOfString(inputString):", "output": "def getLengthOfString(inputString):\n    #Get the length of the string\n    length = len(inputString)\n\n    #Return the length of the string\n    return length", "category": "Python"}, {"instruction": "Generate code to remove duplicate characters from a string.", "input": "string = \"google\"", "output": "def remove_duplicates(string):\n    res = \"\" \n    for i in string: \n        if i not in res: \n            res = res + i\n    return res", "category": "Python"}, {"instruction": "Answer the following question: what language is HTML typically written in?", "input": "", "output": "HTML is typically written in a markup language such as XML or XHTML.", "category": "Python"}, {"instruction": "Create an array of length 7 and set the values to the first 7 letters of the alphabet.", "input": "", "output": "const array = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];", "category": "Python"}, {"instruction": "Create a class named 'Shape' which has a method 'getArea' which returns the area of the shape.", "input": "", "output": "class Shape {\n  constructor() {\n  }\n\n  getArea() {\n    return 0;\n  }\n}", "category": "Python"}, {"instruction": "Update the code so that it prints out the first ten multiples of 5.", "input": "for (i=1; i<5; i++) {\n  console.log(i * 2);\n}", "output": "for (i=1; i<11; i++) {\n  console.log(i * 5);\n}", "category": "Python"}, {"instruction": "Create an array of items and calculate the average of the items.", "input": "[1, 5, 9, 8, 2]", "output": "const input = [1, 5, 9, 8, 2];\n\nconst average = input.reduce((sum, item) => sum + item) / input.length;\n\nconsole.log(average); // 5", "category": "Python"}, {"instruction": "Create a C# class that stores student information such as name, age, and classes.", "input": "", "output": "public class Student \n{ \n    public string name; \n    public int age; \n    public string[] classes; \n\n    public Student(string name, int age, string[] classes) \n    { \n        this.name = name; \n        this.age = age; \n        this.classes = classes; \n    } \n}", "category": "Python"}, {"instruction": "Create a function in JavaScript to extract the words from a given sentence that contains a specific letter.", "input": "Sentence: The quick brown fox jumps over the lazy dog\nLetter: o", "output": "function extractWordsWithLetter(sentence, letter) {\n    let words = sentence.split(' ');\n    let result = [];\n    words.forEach(word => {\n        if (word.includes(letter)) {\n            result.push(word);\n        }\n    }); \n    return result;\n}", "category": "Python"}, {"instruction": "Improve the function below to make it more efficient", "input": "def swap_case(x):\n y = \"\"\n for i in x:\n  if i.isupper():\n   y += i.lower()\n  else:\n   y += i.upper()\n return y", "output": "def swap_case(x):\n    return x.swapcase()", "category": "Python"}, {"instruction": "Create a for loop to traverse a list and print each element in the list in sequence.", "input": "list_to_traverse = [1,2,3,4,5]", "output": "for item in list_to_traverse:\n    print(item)", "category": "Python"}, {"instruction": "Output the sum of the largest and smallest numbers from the provided list.", "input": "list2 = [3, 4, 5, 8, 9]", "output": "#Get the largest and smallest numbers and assign them to variables\nlargestNumber = max(list2)\nsmallestNumber = min(list2)\n\n#Calculate the sum\nsumOfExtremes = largestNumber + smallestNumber\n\n#Print the sum\nprint(sumOfExtremes)", "category": "Python"}, {"instruction": "Using the turtle module, create a drawing of a triangle.", "input": "import turtle\n<noinput>", "output": "import turtle\n# create an instance of Turtle class\nmy_turtle = turtle.Turtle()\nmy_turtle.speed(0)\n# draw a triangle\nmy_turtle.forward(100)\nmy_turtle.left(120)\nmy_turtle.forward(100)\nmy_turtle.left(120)\nmy_turtle.forward(100)\n# finish the drawing\nmy_turtle.done()", "category": "Python"}, {"instruction": "Create a function in C++ that will sort a given array of integers in ascending order of their values.", "input": "unsorted_arr = {45, 21, 12, 56, 7, 47, 34}", "output": "#include<iostream>\nusing namespace std;\n\nvoid sort(int arr[], int n){ \n    int i, key, j; \n    for (i = 1; i < n; i++) { \n        key = arr[i]; \n        j = i - 1; \n  \n        while (j >= 0 && arr[j] > key) { \n            arr[j + 1] = arr[j]; \n            j = j - 1; \n        } \n        arr[j + 1] = key; \n    } \n}\n\n// Driver Code \nint main() { \n    int unsorted_arr[] = {45, 21, 12, 56, 7, 47, 34}; \n    int n = sizeof(unsorted_arr) / sizeof(unsorted_arr[0]); \n  \n    cout << \"Array before sorting: \\n\"; \n    for (int i = 0; i < n; i++) \n        cout << unsorted_arr[i] << \" \"; \n    cout << endl; \n  \n    sort(unsorted_arr, n); \n  \n    cout << \"Array after sorting: \\n\"; \n    for (int i = 0; i < n; i++) \n        cout << unsorted_arr[i] << \" \"; \n    cout << endl; \n    return 0; \n}", "category": "Python"}, {"instruction": "Write an HTML code for the following requirements", "input": "Create an anchor tag with the following text: \u201cClick Here to Learn More\u201d.", "output": "<a href=\"\">Click Here to Learn More</a>", "category": "Python"}, {"instruction": "Create a python program that takes a string as input and prints the length of the longest substring without repeatingcharacters.", "input": "\"abcabcbb\"", "output": "def find_longest_substring(s):\n  max_length = 0\n  start = 0\n  usedChar = {}\n\n  for i in range(len(s)):\n    if s[i] in usedChar and start <= usedChar[s[i]]:\n        start = usedChar[s[i]] + 1\n    else:\n        max_length = max(max_length, i - start + 1)\n\n    usedChar[s[i]] = i\n\n  return max_length\n\ninput_string = \"abcabcbb\"\n\nprint(\"The length of longest substring without repeating characters is: {}\".format(find_longest_substring(input_string)))", "category": "Python"}, {"instruction": "Suggest a technique to detect plagiarism in programming assignments.", "input": "", "output": "One technique to detect plagiarism in programming assignments is to compute the similarity between submissions and reference solutions. This can be done by extracting the key pieces of code from submissions, such as functions and loops, and then comparing them against the reference solution. If the extracted pieces of code are more similar than would be expected by chance, it could be an indication of plagiarism.", "category": "Python"}, {"instruction": "Complete the following HTML template with appropriate tags:", "input": "<html>\n<head> \n</head>\n<body>\n\n</body>\n</html>", "output": "<html>\n<head> \n  <title> Title of page </title>\n</head>\n<body>\n  <h1> Header title </h1>\n  <p> This is a sample content of a web page. </p>\n</body>\n</html>", "category": "Python"}, {"instruction": "Calculate the following expression using Java: (3^3+11) \u00d7 (3+3)", "input": "", "output": "int result = (int)Math.pow(3, 3) + 11 * (3 + 3);\n// result = 144", "category": "Python"}, {"instruction": "Create a SQL query to select the top 5 customers whose address is in the USA.", "input": "", "output": "SELECT TOP 5 customers.* \nFROM customers\nWHERE customers.address LIKE '%USA%'\nORDER BY customers.name", "category": "Python"}, {"instruction": "Create an object-oriented JavaScript class to represent a point in two-dimensional space.", "input": "", "output": "class Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  distance(other) {\n    let dx = this.x - other.x;\n    let dy = this.y - other.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n}", "category": "Python"}, {"instruction": "Using the input, classify whether the number is even or odd.", "input": "num = 5", "output": "if num % 2 == 0\n    puts \"The number is even\"\nelse\n    puts \"The number is odd\"\nend", "category": "Python"}, {"instruction": "Write a Ruby statement to check if the given number is even.", "input": "num = 6", "output": "if num % 2 == 0\n    puts \"The number is even\"\nend", "category": "Python"}, {"instruction": "Create a regex pattern to match strings having at least 3 digits.", "input": "", "output": "^\\d{3,}$", "category": "Python"}, {"instruction": "Create a CSS rule to set the div width to 100px.", "input": "", "output": "div {\n    width: 100px;\n}", "category": "Python"}, {"instruction": "Using the input, create a new list of strings where all strings in the new list have an uppercase first letter.", "input": "my_list = [\"hello\", \"world\", \"how\", \"are\", \"you?\"]", "output": "new_list = []\nfor string in my_list:\n    new_list.append(string.capitalize())\n\nprint(new_list) # prints ['Hello', 'World', 'How', 'Are', 'You?']", "category": "Python"}, {"instruction": "Write a Java program that creates two arrays and prints out the difference in number of elements between them.", "input": "int[] arr1 = {1, 2, 3, 4, 5};\nint[] arr2 = {1, 2, 3};", "output": "public class ArraySizeDiff {\n    public static void main(String[] args) {\n        int[] arr1 = {1, 2, 3, 4, 5};\n        int[] arr2 = {1, 2, 3};\n\n        int diff = arr1.length - arr2.length;\n        System.out.println(\"Difference in number of elements between the two arrays is: \" + diff);\n    }\n}", "category": "Python"}, {"instruction": "Add a try-catch block around the code example that catches an exception if it is thrown.", "input": "with open(\"myfile.txt\") as f:\n    for line in f:\n        print(line)", "output": "try:\n    with open(\"myfile.txt\") as f:\n        for line in f:\n            print(line)\nexcept:\n    print(\"An exception has been thrown\")", "category": "Python"}, {"instruction": "Change the code so it will output the multiplication result when \"multiply\" is clicked.", "input": "<button class=\"button\" onclick=\"calc()\">Multiply</button>\n\n<script>\n    let result;\n    function calc() {\n        // TODO: Output the multiplication result\n    }\n</script>", "output": "<button class=\"button\" onclick=\"calc()\">Multiply</button>\n\n<script>\n    let result;\n    function calc() {\n        result = 4*9\n        alert(`The result of the multiplication is: ${result}`)\n    }\n</script>", "category": "Python"}, {"instruction": "Generate a MySQL query to display all the columns of a table called \"employee\"", "input": "", "output": "SELECT * FROM employee;", "category": "Python"}, {"instruction": "Create a SQL query to find the employee who is earning the highest salary.", "input": "", "output": "SELECT name, MAX(salary)\nFROM employee\nGROUP BY name;", "category": "Python"}, {"instruction": "Create a JavaScript snippet to display the current date in the format \"Monday, DD-MM-YYYY\"", "input": "", "output": "let today = new Date();\nlet options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n\nlet dateText = today.toLocaleDateString('en-GB', options);\n\nconsole.log(dateText); // Monday, DD-MM-YYYY", "category": "Python"}, {"instruction": "Write a paint program that displays a 10x10 blue square on the screen.", "input": "", "output": "import tkinter as tk\n\n# Create a window\nroot = tk.Tk()\n\n# Create a canvas \ncanvas = tk.Canvas(root, width=100, height=100)\n\n# Create a blue square\ncanvas.create_rectangle(0, 0, 100, 100, fill=\"blue\")\n\n# Pack the canvas\ncanvas.pack()\n\n# Display the window\nroot.mainloop()", "category": "Python"}, {"instruction": "Given two strings, print the one that is longer.", "input": "string1 = \"Hello\"\nstring2 = \"World!\"", "output": "if len(string1) > len(string2):\n    print(string1)\nelse:\n    print(string2)", "category": "Python"}, {"instruction": "Create a class in Python named 'Car' with attributes 'color' and 'make', and methods 'start' and 'stop'.", "input": "", "output": "class Car:\n    def __init__(self, color, make):\n        self.color = color\n        self.make = make\n    \n    def start(self):\n        print(\"Car started.\")\n        \n    def stop(self):\n        print(\"Car stopped.\")", "category": "Python"}, {"instruction": "Write a SQL query to retrieve all rows from the table 'movies' whose genre is 'comedy'", "input": "", "output": "SELECT * FROM movies WHERE genre = 'comedy';", "category": "Python"}, {"instruction": "Create a JavaScript function that takes an array of numbers and returns true if every element is an even number and false otherwise", "input": "", "output": "function checkEven(array) {\n    for (var i = 0; i < array.length; i++) {\n        if (array[i] % 2 !== 0) {\n            return false;\n        }\n    }\n    return true;\n}", "category": "Python"}, {"instruction": "Write a Python program to prompt the user for a string and print the number of unique characters it contains.", "input": "", "output": "user_string = input(\"Please enter a string: \")\n\nunique_chars = set()\n\nfor char in user_string:\n    unique_chars.add(char)\n\nprint(\"The string contains\", len(unique_chars), \"unique character(s).\")", "category": "Python"}, {"instruction": "Explain the difference between subclasses and superclasses.", "input": "", "output": "A superclass is a class from which other classes can inherit methods and properties. A subclass is a class that has inherited a superclass' methods and properties. In object-oriented programming (OOP), a class can be both a superclass and a subclass simultaneously. When a class inherits from another class it is said to extend the superclass, thereby creating a subclass. As such, a subclass has all the properties and methods of its superclass, as well as additional properties and methods that are unique to the subclass itself.", "category": "Python"}, {"instruction": "Construct a dictionary from the provided list of tuples such that the keys and values are switched.", "input": "tuples = [('Hello', 5), ('World', 10)]", "output": "#Create a new dictionary\nnewDict = {}\n\n#Iterate through the list and swap the keys and values\nfor tup in tuples:\n    key, value = tup\n    newDict[value] = key\n\n#Print the new dictionary\nprint(newDict)", "category": "Python"}, {"instruction": "Write a function in Java to instantiate an Employee class with a given name and age.", "input": "", "output": "public class Employee {\n\tprivate String name;\n\tprivate int age;\n\t\n\tpublic Employee(String name, int age) {\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t}\n\t\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\tpublic int getAge() {\n\t\treturn age;\n\t}\n\t\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\t\n\tpublic void setAge(int age) {\n\t\tthis.age = age;\n\t}\n}", "category": "Python"}, {"instruction": "Create two classes 'Circle' and 'Rectangle' in Java which print the circumference and area of their respective shapes.", "input": "", "output": "class Circle {\n\tprivate double radius;\n\n\tpublic Circle(double radius) {\n\t\tthis.radius = radius;\n\t}\n\n\tpublic double getCircumference() {\t\n\t\treturn 2 * Math.PI * this.radius;\n\t}\n\n\tpublic double getArea() {\n\t\treturn Math.PI * this.radius * this.radius;\t\n\t}\n}\n\nclass Rectangle {\n\tprivate double width;\n\tprivate double length;\n\n\tpublic Rectangle(double width, double length) {\n\t\tthis.width = width;\n\t\tthis.length = length;\n\t}\n\n\tpublic double getCircumference() {\n\t\treturn 2*(this.width + this.length);\n\t}\n\n\tpublic double getArea() {\n\t\treturn this.width * this.length;\n\t}\n}", "category": "Python"}, {"instruction": "Generate a correct SQL statement to select the employees with their name, gender, age and salary", "input": "", "output": "SELECT name, gender, age, salary\nFROM employee;", "category": "Python"}, {"instruction": "Write an HTML code to display the results of a survey", "input": "Survey Results:\n- Option A: 40%\n- Option B: 30%\n- Option C: 20%\n- Option D: 10%", "output": "<div class=\"survey-results\">\n    <p>Survey Results:</p>\n    <ul>\n        <li>Option A: 40%</li>\n        <li>Option B: 30%</li>\n        <li>Option C: 20%</li>\n        <li>Option D: 10%</li>\n    </ul>\n</div>", "category": "Python"}, {"instruction": "Create a MongoDB query to find all the documents with the \"status\" field equal to \"completed\"", "input": "", "output": "db.collection.find({status: \"completed\"});", "category": "Python"}, {"instruction": "Create a SQL query to edit the contents of the \"employee\" table", "input": "Update the column \"salary\" of the employee with ID = 5", "output": "UPDATE employee\nSET salary=10000\nWHERE id=5;", "category": "Python"}, {"instruction": "Create a java program that checks if a given string has any special characters", "input": "String str = \"This is a string!\"", "output": "public class CheckSpecialChar {\n\n    public static void main(String[] args) {\n        String str = \"This is a string!\";\n        boolean flag = false;\n        String specialChar = \"[^a-zA-Z0-9]\";\n        if(str.matches(specialChar))\n        {\n            flag = true;\n        }\n        System.out.println(\"Does the string contains special character : \" + flag);\n    }\n\n}", "category": "Python"}, {"instruction": "Generate an expression in R that returns the number of elements in a vector", "input": "vec_1 <- c(1, 3, 5, 7)", "output": "length(vec_1)", "category": "Python"}, {"instruction": "What is an HTML tag?", "input": "", "output": "An HTML tag is an element in an HTML document that is used to structure and format the content of the page. Tags are used to create HTML elements like headings, paragraphs, and links. Tags typically contain attributes which provide additional information about the element, and also define how the element's content should be displayed. Tags are surrounded by angle brackets and typically follow the syntax <tag_name attribute=\"value\">content</tag_name>.", "category": "Python"}, {"instruction": "Design a function that takes in an integer and prints the multiplication table till that input number.", "input": "", "output": "def print_multiplication_table(n):\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            print(i*j, end=\" \")\n        print()\n\nprint_multiplication_table(n)", "category": "Python"}, {"instruction": "Modify the following code so that it takes a string as a parameter, reverses it and prints out the reversed string.", "input": "str = \"Hello World!\"", "output": "def reverse_string(str):\n  reverse = \"\" \n  # Traverse through each letter of the input string \n  for i in range(len(str) - 1, -1, -1): \n    reverse = reverse + str[i] \n  print(reverse)", "category": "Python"}, {"instruction": "Is the following code syntactically correct?", "input": "function addNumbers(a, b) {\n  return a + b", "output": "Yes. The function is syntactically correct.", "category": "Python"}, {"instruction": "How is a 2D array declared and initialized in Java?", "input": "", "output": "int[][] array 2D = new int[n][m]; \n//where n is the number of rows and m is the number of columns. \n//You can also create a 2D array by initializing elements with curly brackets, for example int[][] array2D = {{1,2,3},{4,5,6}};", "category": "Python"}, {"instruction": "How is an \"infinite loop\" created?", "input": "", "output": "An infinite loop is created by writing a loop that always evaluates to true, causing it to repeat indefinitely. This can be done by writing the loop with no condition, or a condition that can never be false. For example, a loop with the condition \u201ci < 10\u201d will run infinitely if it increments i by 1 each time, as its value will never reach 10.", "category": "Python"}, {"instruction": "Write a Bash command to list all the subdirectories of a given directory.", "input": "Path: /home/test", "output": "ls /home/test/*/", "category": "Python"}, {"instruction": "Find the sum of the sequence of numbers from 1 to 10.", "input": "", "output": "55", "category": "Python"}, {"instruction": "Create a SQL query to print names starting with a certain letter.", "input": "Letter: A", "output": "SELECT name FROM table WHERE name LIKE 'A%';", "category": "Python"}, {"instruction": "Given a JSON object, write a Python program to convert it into a Pandas dataframe.", "input": "{\n  \"name\": \"John\",\n  \"age\": 30,\n  \"city\": \"New York\"\n}", "output": "import pandas as pd\n\ndata = {\n  \"name\": \"John\",\n  \"age\": 30,\n  \"city\": \"New York\"\n}\n\ndf = pd.DataFrame([data])", "category": "Python"}, {"instruction": "Create an array of the first 10 natural numbers in JavaScript.", "input": "", "output": "let numbers = [1,2,3,4,5,6,7,8,9,10];", "category": "Python"}, {"instruction": "Create a C++ program that uses command line arguments to print out the argument passed in as a string.", "input": "", "output": "#include <iostream>\n\nusing namespace std;\n\nint main(int argc, char* argv[])\n{\n    cout << argv[1];\n    return 0;\n}", "category": "Python"}, {"instruction": "Given an array of numbers, find the index of the first occurrence of a given number in Java.", "input": "", "output": "public class FindIndex {\n    public static int findIndex(int[] arr, int n) { \n        int i; \n        for (i = 0; i < arr.length; i++) { \n            if (arr[i] == n) \n                break; \n        } \n        if (i < arr.length) \n            return i; \n        else\n            return -1; \n    } \n}", "category": "Python"}, {"instruction": "Write an algorithm to print all possible combinations of balanced parentheses.", "input": "", "output": "def generateParenthesis(N): \n    string = \"\" \n    result = [] \n  \n    # dfs on the result \n    def generate(left, right, string): \n        if (left == 0 and right == 0): \n            result.append(string) \n            return\n  \n        if left > 0: \n            generate(left - 1, right, string + \"(\") \n  \n        if left < right: \n            generate(left, right - 1, string + \")\") \n  \n    # calling the function \n    if N > 0: \n        generate(N, N, string) \n    return result \n  \n# Driver function \nprint(generateParenthesis(3))", "category": "Python"}, {"instruction": "Create an SQL query to find the First Name and Age of all people with the same Year of Birth.", "input": "noinput", "output": "SELECT FirstName, Age \nFROM TableName \nWHERE YEAR(Birthday) = YEAR(NOW())", "category": "Python"}, {"instruction": "Calculate the total product of all numbers in an array in JavaScript.", "input": "[5, 4, 2]", "output": "const product = arr => arr.reduce((finalProduct, num) => finalProduct * num);\nconsole.log(product([5,4,2]));", "category": "Python"}, {"instruction": "Calculate the number of valid permutations of length n with respect to a given set of n distinct elements.", "input": "n=5", "output": "#Calculate the number of valid permutations of length n with respect to a given set of n distinct elements.\n\ndef num_permutations(n):\n    if n == 0:\n        return 0\n    else:\n        return math.factorial(n)\n\nif __name__ == '__main__':\n    print(num_permutations(5))", "category": "Python"}, {"instruction": "Create a function to calculate log base 10 in Python.", "input": "", "output": "import math\n\ndef log10(x):\n    return math.log10(x)\n\nif __name__ == '__main__':\n    print(log10(10))", "category": "Python"}, {"instruction": "Edit a given sentence to make its sentence structure correct.", "input": "sentence = \"This is wrong sentence structure\"", "output": "sentence = \"This sentence has an incorrect structure.\"", "category": "Python"}, {"instruction": "What is \"branching\" in version control systems?", "input": "", "output": "Branching is the ability to create a separate line of development within a version control system. This allows developers to have multiple versions of the same project, each with its own unique changes. Branches are used to isolate different features or bug fixes in different versions, without affecting the main line of development.", "category": "Python"}, {"instruction": "Write code to sort a Python list of tuples based on their second element in the tuple.", "input": "list_of_tuples = [('a', 5), ('b', 1), ('c', 10)]", "output": "list_of_tuples.sort(key=lambda tup: tup[1])", "category": "Python"}, {"instruction": "Create a SQL query to select the maximum salary for each department from the \"Salary\" table.", "input": "", "output": "SELECT department, MAX(salary) FROM Salary GROUP BY department;", "category": "Python"}, {"instruction": "Construct a SQL query to select the names and ages of employees in the \"Employees\" table where the age is greater than 25.", "input": "", "output": "SELECT name, age FROM Employees WHERE age > 25;", "category": "Python"}, {"instruction": "Convert this MySQL query to MongoDB.", "input": "SELECT * FROM customers WHERE customer_id=1;", "output": "db.customers.find({ customer_id: 1 });", "category": "Python"}, {"instruction": "What data structure can you use to store a set of unique values?", "input": "", "output": "A set is a data structure that stores a collection of unique values. A set is efficient for checking if a particular value exists in the collection, as the existence of the value can be checked in constant time.", "category": "Python"}, {"instruction": "Write a function in Python that takes an integer as an input and prints the number of digits in the integer.", "input": "num = 1234", "output": "def countDigits(num):\n    count = 0\n    while(num > 0):\n        num = num//10\n        count += 1\n    return count\n\nprint(countDigits(num)) # Output: 4", "category": "Python"}, {"instruction": "Write a code snippet to add two numbers provided in two lists.", "input": "list1 = [2, 4, 3]\nlist2 = [5, 6, 4]", "output": "new_list = []\n \nfor i in range(len(list1)):\n    new_list.append(list1[i] + list2[i])\n \nprint(new_list) # Output: [7, 10, 7]", "category": "Python"}, {"instruction": "What is a hashmap, and what is it used for?", "input": "", "output": "A hashmap (also known as a dictionary or associative array) is a data structure that stores key-value pairs. It is used to store and retrieve information using a keyword or search term as the key. The key can then be used to quickly fetch the associated value from the hashmap. This makes hashmaps a powerful tool for storing and accessing large amounts of data efficiently.", "category": "Python"}, {"instruction": "Write a helper function in Haskell that prints out a given string in uppercase.", "input": "str = \"hello\"", "output": "uppercase str = map toUpper str", "category": "Python"}, {"instruction": "Gather the source code of a web page using a Java program.", "input": "String url = \"https://www.example.com\";", "output": "try {\n    URL page = new URL(url);\n    URLConnection conn = page.openConnection();\n    BufferedReader in = new BufferedReader(\n                     new InputStreamReader(conn.getInputStream())\n    );\n\n    String line;\n    while ((line = in.readLine()) != null) {\n        System.out.println(line);\n    }\n\n    in.close();\n} catch (IOException e) {\n    System.err.println(\"An IOException was caught!\");\n    e.printStackTrace();\n}", "category": "Python"}, {"instruction": "Design a data structure to store books that keeps track of page numbers.", "input": "", "output": "class Book:\n    def __init__(self, title, num_pages):\n        self.title = title\n        self.num_pages = num_pages\n        self.pages_read = 0\n    \n    def read(self, num_pages):\n        self.pages_read += num_pages\n\n# Create an instance\nbook = Book(\"War and Peace\", 1220)\n\n# Read some pages\nbook.read(50)\n\n# Check the number of pages read\nbook.pages_read # returns 50", "category": "Python"}, {"instruction": "Given the following HTML, change the text to \"Hello World\".", "input": "<p>Hi there</p>", "output": "<p>Hello World</p>", "category": "Python"}, {"instruction": "Using the following HTML, add an id attribute to the <div> element.", "input": "<div>Hello</div>", "output": "<div id=\"myDiv\">Hello</div>", "category": "Python"}, {"instruction": "Using the given HTML, add the class \"container\" to the <div> element.", "input": "<div>Hello</div>", "output": "<div class=\"container\">Hello</div>", "category": "Python"}, {"instruction": "Create a Python function that takes in a time string in the format hh:mm:ss and returns the time in seconds.", "input": "time_string = '01:10:30'", "output": "def time_in_seconds(time_string):\n    hour, minutes, seconds = map(int, time_string.split(':'))\n    return second + minutes * 60 + hour * 3600\ntime_in_seconds(time_string) # 4290", "category": "Python"}, {"instruction": "What is the definition of polymorphism in programming?", "input": "", "output": "Polymorphism in programming is a principle allowing the same code to be used for objects of different types, or for a given object to behave differently in different contexts. Polymorphism is an essential element of object-oriented programming, as it allows for code reusability, among other benefits. Polymorphism is achieved in programming by using inheritance and abstraction, along with virtual functions and templates. Examples of polymorphism include the various forms of overloading and overriding, and type punning.", "category": "Python"}, {"instruction": "Create a program in Python to remove duplicate values from a list.", "input": "list_a = [1, 2, 2, 3, 4, 4]", "output": "def remove_duplicates(list): \n    unique = [] \n    for item in list: \n        if item not in unique: \n            unique.append(item) \n    return unique \n\nlist_a = [1, 2, 2, 3, 4, 4]\nlist_a = remove_duplicates(list_a)\nprint(list_a)", "category": "Python"}, {"instruction": "Create a HTML page with a drop-down menu with values \u201cgreen\u201d, \u201cblue\u201d and \u201cred\u201d.", "input": "", "output": "<!DOCTYPE html>\n<html>\n    <body>\n        <select name=\"color\">\n            <option value=\"green\">Green</option>\n            <option value=\"blue\">Blue</option>\n            <option value=\"red\">Red</option>\n        </select>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Modify the above C program to reverse a sentence.", "input": "", "output": "#include<stdio.h>\n#include<string.h>\n \nvoid reverse(char *str) \n{ \n    int i = strlen(str) - 1, j = 0; \n  \n    while (i > j) { \n        char temp = str[i]; \n        str[i] = str[j]; \n        str[j] = temp; \n        i--; \n        j++; \n    } \n} \n  \nvoid reverseSentence(char *str) \n{ \n    reverse(str); \n  \n    int start = 0, end; \n    while (str[start] != '\\0') { \n        if (str[start] == ' ') { \n            start++; \n            continue;  \n        } \n \n        end = start + 1; \n        while (str[end] != ' ' && str[end] != '\\0') \n            end++; \n \n        reverse(str + start, end - start); \n  \n\t\tstart = end; \n    } \n} \n  \nint main() \n{ \n    char str[100] = \"How are you?\"; \n    reverseSentence(str); \n    printf(\"%s\", str); \n    return 0; \n}", "category": "Python"}, {"instruction": "Write a C++ program to generate Fibonacci numbers up to a maximum of n values.", "input": "n = 20", "output": "#include <iostream>\n\nint main() {\n    int n = 20;\n    int a = 0, b = 1, c;\n\n    std::cout << a << \" \" << b << \" \";\n\n    for (int i = 2; i < n; ++i) {\n        c = a + b;\n        std::cout << c << \" \";\n        a = b;\n        b = c;\n    }\n\n    return 0;\n}", "category": "Python"}, {"instruction": "You are given two strings, A and B. Write a function to delete the characters in A that also appear in B.", "input": "A = 'abcbbdef'\nB = 'abcdc'", "output": "def delete(A, B):\n    for i in B:\n        if i in A:\n            A = A.replace(i, '')\n    return A\n\ndelete(A, B) # Output: 'bdef'", "category": "Python"}, {"instruction": "Create a list in Python of elements 0-9 in random order.", "input": "", "output": "import random \n\n# Generate a list of 10 numbers\nnums = [i for i in range(10)]\n\n# Shuffle the list\nrandom.shuffle(nums) \n\n# Print the shuffled list\nprint(nums) # [5, 0, 2, 3, 9, 8, 4, 1, 7, 6]", "category": "Python"}, {"instruction": "Create a class in Python and define several functions for that class.", "input": "", "output": "class MyClass:\n    def __init__(self):\n        pass \n\n    def add(self, x, y):\n        return x + y\n\n    def subtract(self, x, y):\n        return x - y\n\n    def multiply(self, x, y):\n        return x * y\n\n    def divide(self, x, y):\n        return x / y", "category": "Python"}, {"instruction": "Create a class called 'Product' in Python and assign the following attributes to it.", "input": "name, price, description", "output": "class Product:\n    \"\"\"\n    A class that represents a product with its attributes.\n    \"\"\"\n    def __init__(self, name, price, description):\n        \"\"\"\n        Initialize a Product object.\n        \"\"\"\n        self.name = name \n        self.price = price \n        self.description = description", "category": "Python"}, {"instruction": "Suggest a way to filter out comments containing profane language in a text corpus.", "input": "", "output": "One way to filter out comments containing profane language in a text corpus is to use a rule-based algorithm with a list of profane words and phrases. This algorithm can be configured to identify words or phrases in a given corpus that match the list of profane words and phrases, and flag them as inappropriate. A second approach is to use natural language processing to identify profane content. This involves training a machine learning model to detect profanity by analyzing patterns in the text, such as its word or phrase context, structure, and so on.", "category": "Python"}, {"instruction": "How do you set up a local development environment for a Node.js application?", "input": "", "output": "Setting up a local development environment for a Node.js application involves installing a compatible version of Node.js and setting up the necessary modules. After installation, node\u2019s package manager, NPM, can be used to install the packages and dependencies for the application. Additionally, an IDE such as Visual Studio Code can be used for writing and running the code.", "category": "Python"}, {"instruction": "Write an SQL query to select only the first name, last name, and email columns from a table named 'customers'.", "input": "", "output": "SELECT first_name, last_name, email\nFROM customers;", "category": "Python"}, {"instruction": "How do you install the Django web framework?", "input": "", "output": "Install Django using pip by running the following command from the command line:\npip install Django\n\nYou can also install Django from source:\ngit clone https://github.com/django/django.git\ncd django\npython setup.py install", "category": "Python"}, {"instruction": "Write a CSS rule to make all text appear in bold font.", "input": "", "output": "body {\n    font-weight: bold;\n}", "category": "Python"}, {"instruction": "Write a JavaScript statement to log a string onto the console.", "input": "String: \"Print this message\"", "output": "console.log(\"Print this message\");", "category": "Python"}, {"instruction": "Translate the following statement from English to Python code: \"If the value of x is greater than 10, print 'x is greater than 10.\"", "input": "", "output": "if x > 10:\n    print(\"x is greater than 10.\")", "category": "Python"}, {"instruction": "Extract all the words from a given sentence and save them to a list.", "input": "Sentence: This is a sample sentence with words.", "output": "words = [\"this\", \"is\", \"a\", \"sample\", \"sentence\", \"with\", \"words\"]", "category": "Python"}, {"instruction": "Write a reusuable function in Python that takes two string variables and returns the longest string.", "input": "", "output": "def longest_string(str1, str2):\n    if len(str1) > len(str2):\n        return str1\n    else:\n        return str2", "category": "Python"}, {"instruction": "What is abstraction in computer programming?", "input": "", "output": "Abstraction in computer programming is the process of hiding details of how the code is implemented and only exposing the information that is necessary. It involves separating a complex task into simpler and smaller units in order to solve problems efficiently. It also helps to break down a complex system into its fundamental parts and allow a programmer to focus on the most important parts.", "category": "Python"}, {"instruction": "Write a code to traverse a matrix in spiral form.", "input": "", "output": "def spiral_traverse(matrix):\n    top = 0\n    left = 0\n    right = len(matrix[0])-1\n    bottom = len(matrix)-1\n    while top <= bottom and left <= right:\n        for i in range(left, right+1):\n            print(matrix[top][i], end = ' ')\n        top += 1\n        for i in range(top, bottom+1):\n            print(matrix[i][right], end = ' ')\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left-1, -1):\n                print(matrix[bottom][i], end = ' ')\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top-1, -1):\n                print(matrix[i][left], end = ' ')\n            left += 1", "category": "Python"}, {"instruction": "What is the Big O notation of the algorithm you wrote in Task 8?", "input": "", "output": "The algorithm has an O(n) time complexity, where n is the size of the input.", "category": "Python"}, {"instruction": "Implement a search algorithm to search a node in a binary search tree.", "input": "", "output": "def search(node, key):\n   if node is None or node.key == key:\n        return node\n \n   if node.key < key:\n        return search(node.right, key)\n \n    return search(node.left, key)", "category": "Python"}, {"instruction": "Given a string and two words, write a program to find the shortest sub sequence containing both words.", "input": "String: the quick brown fox jumps over the lazy dog\nTwo words: quick and dog", "output": "The sequence is \"quick brown fox jumps over the lazy dog\".", "category": "Python"}, {"instruction": "Explain what is Cross-validation in Machine Learning.", "input": "", "output": "Cross-validation is a technique used to evaluate a machine learning model by dividing the dataset into training and validation sets. The model is trained on the training set, and its performance is evaluated on the validation set. In other words, cross-validation is a method for selecting model hyperparameters and for assessing performance of a model. It is a technique used to ensure that we are not overfitting to the training data and evaluate the accuracy of a model on unseen data. This can be done by splitting the data into a set of folds, typically 5 - 10, and running model training and testing k times, with each time one of the folds as the validation set and the other folds as the training set. The result of this process is the average validation accuracy across the k folds of the data. This gives us a better understanding of how the model will perform in production.", "category": "Python"}, {"instruction": "Write a script in Python to make an http request and extract the title of the web page.", "input": "url = 'https://en.wikipedia.org/wiki/Deep_learning'", "output": "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_page_title(url):\n    \"\"\"\n    This function makes an HTTP request to the given URL and extracts the title of the web page.\n    \"\"\"\n    response = requests.get(url)\n    soup = BeautifulSoup(response.content, 'html.parser')\n    return soup.title.string\n\nprint(get_page_title('https://en.wikipedia.org/wiki/Deep_learning'))", "category": "Python"}, {"instruction": "Suggest a way to generate random passwords using Python.", "input": "", "output": "One way to generate random passwords using Python is to use the string module's methods. Using the string.ascii_letters and string.digits sequences, we can create a random sequence of alphanumeric characters. The string module's choice() function can then be used to randomly select characters from this sequence to create a new password string. The length of the password should be specified as an argument to the choice() function. For example, to generate an 8 character long password, you can use string.choice(string.ascii_letters + string.digits, 8).", "category": "Python"}, {"instruction": "Create a switch statement to convert an RGB value to HEX.", "input": "rgb = (255, 205, 100)", "output": "const convertRGBtoHEX = (rgb) => {\n    let hex = '';\n    switch (rgb) {\n        case (rgb[0], rgb[1], rgb[2]):\n            hex = (rgb[0] << 16 | rgb[1] << 8 | rgb[2]).toString(16);\n            break;\n        default:\n            hex = \"000000\";\n            break;\n    }\n    return hex;\n}\n\nconsole.log(convertRGBtoHEX([255, 205, 100]))", "category": "Python"}, {"instruction": "Find the longest substring of two characters that is a palindrome.", "input": "string = \"banana\"", "output": "def longest_palindrome(string):\n    # Create an empty substring\n    longest_substring = ''\n    \n    # Iterate through the string\n    for i in range(len(string)-1): \n        for j in range(i+1, len(string)):\n            substring = string[i:j+1]\n            if substring == substring[::-1] and len(substring) > len(longest_substring):\n                longest_substring = substring\n    return longest_substring\n\n# Call the function\nlongest_palindrome('banana') # returns 'anana'", "category": "Python"}, {"instruction": "Implement a random number generator in Python that returns a random number in the range of 1-100.", "input": "", "output": "import random\n\ndef rand_num():\n    return random.randint(1, 100)", "category": "Python"}, {"instruction": "What is the factorial of 5?", "input": "", "output": "The factorial of 5 is 1", "category": "Python"}, {"instruction": "Create a program that assigns an ID to each element of an array.", "input": "arr = [\"Car\", \"Bike\", \"Bus\"]", "output": "# Create program that assigns an ID to each element of an array\n\narr = [\"Car\", \"Bike\", \"Bus\"]\n\n# Initialize a counter\ncounter = 0\n\n# Loop over each element of the array\nfor element in arr:\n    # Assign an ID to the element (in this case, the counter value)\n    element_id = counter\n\n    # Print the assigned ID\n    print(f\"Element {element} is assigned ID {element_id}\")\n\n    # Increment the counter\n    counter += 1", "category": "Python"}, {"instruction": "Find the longest word in a piece of text.", "input": "The quick brown fox jumps over the lazy dog", "output": "# Find the longest word in a piece of text\n\n# Split the text into a list of words\nwords =  \"The quick brown fox jumps over the lazy dog\".split()\n\n# Initialize a variable to keep track of the longest word\nlongest_word = \"\"\n\n# Loop over each word in the list\nfor word in words:\n    # Check if the current word is longer than the longest word\n    if len(word) > len(longest_word):\n        # Update the longest word\n        longest_word = word\n\n# Print the longest word\nprint(longest_word)", "category": "Python"}, {"instruction": "Create a for loop that prints the contents of a list of strings.", "input": "list_of_strings = [\"John\", \"Bob\", \"Jill\", \"Sara\"]", "output": "list_of_strings = [\"John\", \"Bob\", \"Jill\", \"Sara\"]\n\nfor name in list_of_strings:\n    print(name)", "category": "Python"}, {"instruction": "Perform a bubble sort on the following array of numbers.", "input": "const arr = [9, 5, 7, 11, 2]", "output": "let arr = [9, 5, 7, 11, 2];\n\nfunction bubbleSort(arr) {\n  let swapped;\n\n  do {\n    swapped = false;\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] > arr[i+1]) {\n         let temp = arr[i];\n         arr[i] = arr[i+1];\n         arr[i+1] = temp;\n         swapped = true;\n      }\n    } \n  }\n  while (swapped);\n\n  return arr;\n}\n\nbubbleSort(arr);\n// Output: [2, 5, 7, 9, 11]", "category": "Python"}, {"instruction": "Given an array of integers, write an algorithm to find the maximum difference between any two elements in the array.", "input": "nums = [3, 2, 7, 1, 4]", "output": "def find_max_difference(nums):\n    # Initialize a max difference\n    max_diff = float('-inf')\n    \n    # Iterate through the array\n    for i in range(1, len(nums)):\n        diff = nums[i] - nums[i-1]\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n\n# Call the function\nfind_max_difference([3, 2, 7, 1, 4]) # returns 6", "category": "Python"}, {"instruction": "Should function A call function B or function B call function A?", "input": "A:\nfunction getData() {\n  // do something\n  return data;\n}\n\nB:\nfunction processData(data) {\n  // do something\n  return processedData;\n}", "output": "Function B should call function A, since function A is the one that provides the data for the processing done by function B.", "category": "Python"}, {"instruction": "Transform the following array into an HTML unordered list.", "input": "const veggies = [\"Lettuce\", \"Carrot\", \"Cucumber\"]", "output": "<ul>\n  <li>Lettuce</li>\n  <li>Carrot</li>\n  <li>Cucumber</li>\n</ul>", "category": "Python"}, {"instruction": "Write a C++ program to make an average of given 10 numbers.", "input": "arr = [3, 5, 8, 10, 14, 16, 22, 27, 33, 44]", "output": "#include<iostream> \nusing namespace std;\n  \n// Finds the average of given 10 numbers \nfloat Average(int arr[]) \n{\n    float sum = 0; \n  \n    for (int i=0; i<10; i++) \n    { \n        sum = sum + arr[i]; \n    }\n  \n    return (sum/10); \n} \n  \n// Driver program to run above function \nint main() \n{ \n    int numbers[10] = {3, 5, 8, 10, 14, 16, 22, 27, 33, 44}; \n  \n    cout << Average(numbers); \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Count the number of occurrences of the letter \u201ca\u201d in a given string.", "input": "string = \"My favorite animal is a dog\"", "output": "# 3", "category": "Python"}, {"instruction": "Create a function that takes an array as a parameter and continuously adds each item to the total sum.", "input": "arr = [6, 4, 3, 10]", "output": "def addItems(arr):\n  total = 0\n  for number in arr:\n    total = total + number\n  return total", "category": "Python"}, {"instruction": "Generate a unique 9-digit hexadecimal code.", "input": "", "output": "# 6ba62f1bf", "category": "Python"}, {"instruction": "Write an SQL query that returns the total number of items per category.", "input": "", "output": "SELECT category, COUNT(*) AS items \nFROM items \nGROUP BY category;", "category": "Python"}, {"instruction": "Construct a loop that prints the even numbers from 0 to 20, one number per line.", "input": "", "output": "for i in range(0, 21):\n    if i % 2 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Write a JavaScript function to check if a number is a whole number or has decimals.", "input": "", "output": "const isWholeNumber = (num) => {\n  if (num % 1 === 0) return true\n  return false\n}", "category": "Python"}, {"instruction": "Create a JS program that rotates a given string by 3 characters.", "input": "", "output": "function rotateString(string) { \n\treturn string.slice(3) + string.slice(0, 3); \n}", "category": "Python"}, {"instruction": "Explain the principle of dynamic programming.", "input": "", "output": "Dynamic programming is a technique for solving complex problems by breaking them down into smaller subproblems. The subproblems are solved and stored in a table, which is reused to solve future subproblems. This technique allows for efficient solutions regardless of the complexity of the problem, as it exploits the overlapping subproblems property to reduce time complexity.", "category": "Python"}, {"instruction": "Which language is used to develop applications for the Android platform?", "input": "", "output": "The official language for developing applications for the Android platform is Java. Java is an object-oriented programming language, which allows developers to create robust and reliable applications for Android devices.", "category": "Python"}, {"instruction": "You need to generate a virtual object with React.js.", "input": "", "output": "const VirtualObject = () => {\n  const [state, setState] = React.useState({ \n    height: 100,\n    width: 100,\n    backgroundColor: 'blue'\n  }); \n\nreturn ( \n  <div \n  style={{ \n   height: state.height,\n   width: state.width,\n   backgroundColor: state.backgroundColor\n  }} \n  >\n  </div> \n  );\n};", "category": "Python"}, {"instruction": "Visit the API documentation and create code to make a POST request using Python.", "input": "", "output": "import requests \n  \ndata = {'name': 'John Doe', 'age': '25'} \n  \nheaders = {'Content-type': 'application/x-www-form-urlencoded', 'Accept': 'text/plain'} \n  \nresponse = requests.post('https://example.com/api/v1/data', data=data, headers=headers)", "category": "Python"}, {"instruction": "Create a visualization to compare the customer preferences of two websites.", "input": "Website 1 has 4000 customers and their favourite products are video games and consoles.\nWebsite 2 has 5000 customers and their favourite products are movies, music and books.", "output": "The customer preferences can be compared using a bar chart. The X-axis can have the labels \u2018Website 1\u2019 and \u2018Website 2\u2019 and the Y-axis can have \u2018Video games/Consoles\u2019, \u2018Movies\u2019, \u2018Music\u2019 and \u2018Books\u2019 on the axis. The bars can represent the percentage of customers with the corresponding favourite product.", "category": "Python"}, {"instruction": "Code a function in Python to calculate the nth value of the Fibonacci sequence.", "input": "", "output": "def fibonacci(n): \n    if n <= 0: \n        return 0 \n    elif n == 1: \n        return 1\n    else: \n        return fibonacci(n-1) + fibonacci(n-2)", "category": "Python"}, {"instruction": "Extend the following HTML code to include a dropdown list.", "input": "<select class=\"form-control\">\n<option value=\"\">Select one</option>\n</select>", "output": "<select class=\"form-control\">\n  <option value=\"\">Select one</option>\n  <option value=\"Option 1\">Option 1</option>\n  <option value=\"Option 2\">Option 2</option>\n  <option value=\"Option 3\">Option 3</option>\n</select>", "category": "Python"}, {"instruction": "Write a SQL query to get the average of all the number from a single column.", "input": "", "output": "SELECT AVG(column_name) FROM table_name;", "category": "Python"}, {"instruction": "Take the following array as an argument and output the sum of all the numbers in the array using Python.", "input": "[1, 2, 3, 4, 5]", "output": "def sum_of_array(arr):\n  return sum(arr)\n\narray = [1, 2, 3, 4, 5]\nresult = sum_of_array(array)\n\nprint(resutl) # Output: 15", "category": "Python"}, {"instruction": "Create a function that takes two arguments, a string and a character, and replaces all occurrences of the character with the string in JavaScript.", "input": "", "output": "function replaceCharacter(str, char) { \n    return str.replace(new RegExp(char,\"g\"), str); \n} \n  \nlet str = \"Hello World\"; \nlet char = \"l\"; \nlet result = replaceCharacter(str, char); \n  \nconsole.log(result); // Output: Heooo Worod", "category": "Python"}, {"instruction": "Suggest a way to convert the following XML code into JSON in Python.", "input": "<data>\n  <records> \n  \t<record name=\"John Smith\" age=\"27\">\n   \t\t<address>123 Main Street</address>\n   \t</record>\n    <record name=\"Jane Smith\" age=\"18\">\n    \t<address>167 King Avenue</address>\n    </record>\n  </records>\n</data>", "output": "import json \nimport xmltodict \n  \nxml_data = \"\"\"\n<data> \n  <records> \n    <record name=\"John Smith\" age=\"27\"> \n      <address>123 Main Street</address> \n    </record> \n    <record name=\"Jane Smith\" age=\"18\"> \n      <address>167 King Avenue</address> \n    </record> \n  </records>\n</data> \n\"\"\"\n  \nxml_dict = xmltodict.parse(xml_data)  \njson_data = json.dumps(xml_dict) \nprint(json_data)", "category": "Python"}, {"instruction": "Write a SQL clause to get all the records from a table if the value in each column is greater than 5.", "input": "", "output": "SELECT * FROM table_name WHERE col1 > 5 AND col2 > 5 AND col3 > 5 AND ...;", "category": "Python"}, {"instruction": "Create an algorithm to find the longest common substring from two given strings.", "input": "String1: 'Hello World', String2: 'Hey World'", "output": "def longest_common_substring(s1, s2): \n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))] \n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)): \n        for y in range(1, 1 + len(s2)): \n            if s1[x - 1] == s2[y - 1]: \n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else: \n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\nprint(longest_common_substring('Hello World', 'Hey World'))  # Result: 'ello Wo'", "category": "Python"}, {"instruction": "Create a query to find the total payments from one customer in the last 10 months.", "input": "", "output": "SELECT SUM(payment_amount) \nFROM payments \nWHERE payment_date > NOW() - INTERVAL 10 MONTH \nAND customer_id = '<customer_id>';", "category": "Python"}, {"instruction": "Implement an algorithm to find all the sets of three numbers in an array which adds up to a given number.", "input": "Array: [2, 5, 8], Number: 10", "output": "def three_sum(array, number):\n   result_sets = [] \n   for i in range(len(array) - 2):\n       for j in range(i+1, len(array) - 1):\n           for k in range(j+1, len(array)):\n               if array[i] + array[j] + array[k] == number: \n                   result_sets.append([array[i], array[j], array[k]])\n   return result_sets \n\nprint(three_sum([2, 5, 8], 10)) # Result: [[2, 5, 8]]", "category": "Python"}, {"instruction": "Create a SQL query to find the total payments made a group of customers in the last 30 days.", "input": "", "output": "SELECT customer_id, SUM(payment_amount) \nFROM payments \nWHERE payment_date > NOW() - INTERVAL 30 DAY \nGROUP BY customer_id;", "category": "Python"}, {"instruction": "Write a query to find the five highest scores in a leaderboard table.", "input": "", "output": "SELECT *\nFROM leaderboard\nORDER BY score DESC\nLIMIT 5;", "category": "Python"}, {"instruction": "Create an SQL query to search for customer names whose age is greater than 30", "input": "", "output": "SELECT name \nFROM customers \nWHERE age > 30", "category": "Python"}, {"instruction": "Use nltk package in Python and remove stopwords from the given text.", "input": "Text: \"I am wondering what is the best way to learn English.\"", "output": "import nltk\nfrom nltk.corpus import stopwords\n\ntxt = \"I am wondering what is the best way to learn English.\"\nwords = nltk.word_tokenize(txt)\nfiltered_words = [w for w in words if not w in stopwords.words('english')] \n  \nprint(filtered_words)", "category": "Python"}, {"instruction": "Construct a switch statement for the given pseudo-code.", "input": "switch (day)\n  case Sunday:\n    print(\"Sunday is a Day of Rest\");\n    break;\n  case Saturday:\n    print(\"Saturday is a Day of Work\");\n    break;", "output": "switch (day)\n{\n  case \"Sunday\":\n    printf(\"Sunday is a Day of Rest\");\n    break;\n  case \"Saturday\":\n    printf(\"Saturday is a Day of Work\");\n    break;\n  default:\n    printf(\"Default Action\");\n    break;\n}", "category": "Python"}, {"instruction": "Build a web scraper in Python to fetch the restaurant details from the website.", "input": "<uri of the website>", "output": "import requests \nfrom bs4 import BeautifulSoup \n  \npage = requests.get(<uri of website>) \nsoup = BeautifulSoup(page.content, 'html.parser') \n  \nrests = soup.find_all('div', class_='restaurant-item')\n\n# Parse the details of restaurants one by one\nfor rest in rests:  \n    name = rest.find('div', class_='restaurant-name') \n    cuisine = rest.find('li', class_='cuisine-list-item') \n    location = rest.find('li', class_='restaurant-location') \n    rating = rest.find('span', class_='star-rating-text') \n      \n    # Print details of restaurant \n    print(name.text, cuisine.text, location.text, rating.text)", "category": "Python"}, {"instruction": "Edit the given code to ensure it outputs appropriate messages for successful and unsuccessful output.", "input": "def handleInput(name):\n  if len(name) > 0:\n    print('Hello, ' + name)", "output": "def handleInput(name):\n    if len(name) > 0:\n        print('Hello, ' + name)\n    else:\n        print('No name provided.')", "category": "Python"}, {"instruction": "You are given a list of numbers. Count how many of them are prime numbers.", "input": "[1,2,3,4,5,6,7]", "output": "def count_primes(numbers):\n    count = 0\n    for number in numbers:\n        if is_prime(number):\n            count += 1\n    return count\n \ndef is_prime(number):\n    if number <= 1:\n        return False\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "You need to create an HTML page containing a table that contains at least 4 columns and 5 rows.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n <title>HTML Table</title>\n</head>\n<body>\n  <table>\n   <tr>\n    <th>Column 1</th>\n    <th>Column 2</th>\n    <th>Column 3</th>\n    <th>Column 4</th>\n   </tr>\n   <tr>\n    <td>Row 1</td>\n    <td>Row 1</td>\n    <td>Row 1</td>\n    <td>Row 1</td>\n   </tr>\n   <tr>\n    <td>Row 2</td>\n    <td>Row 2</td>\n    <td>Row 2</td>\n    <td>Row 2</td>\n   </tr>\n   <tr>\n    <td>Row 3</td>\n    <td>Row 3</td>\n    <td>Row 3</td>\n    <td>Row 3</td>\n   </tr>\n   <tr>\n    <td>Row 4</td>\n    <td>Row 4</td>\n    <td>Row 4</td>\n    <td>Row 4</td>\n   </tr>\n   <tr>\n    <td>Row 5</td>\n    <td>Row 5</td>\n    <td>Row 5</td>\n    <td>Row 5</td>\n   </tr>\n  </table>\n</body>\n</html>", "category": "Python"}, {"instruction": "Get all permutations of string.", "input": "string = \"abc\"", "output": "from itertools import permutations \n  \ndef permutations_string(string):\n    return list(permutations(string))\n\npermutations_string(\"abc\")\n\nOutput: [('a', 'b', 'c'), ('a', 'c', 'b'), ('b', 'a', 'c'), ('b', 'c', 'a'), ('c', 'a', 'b'), ('c', 'b', 'a')]", "category": "Python"}, {"instruction": "Given two strings, return True if either of the strings appears at the very end of the other string, ignoring upper/lower case differences.", "input": "str1 = \"Strawberry\", str2 = \"berry\"", "output": "def check_case_ignore(str1, str2):\n    return str1.lower().endswith(str2.lower())\n\nprint(check_case_ignore('Strawberry', 'berry'))\n\nOutput: True", "category": "Python"}, {"instruction": "Given a number n, print \u201cHello\u201d n times.", "input": "n = 5", "output": "def print_hello(n):\n    for i in range (n):\n        print(\"Hello\")\n\nprint_hello(5)\n\nOutput: \nHello \nHello \nHello \nHello \nHello", "category": "Python"}, {"instruction": "Determine the longest word in a given string.", "input": "sentence = \"I am Python Programmer\"", "output": "def longest_word(sentence):\n    words = sentence.split()\n    max_len = len(words[0])\n     \n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n     \n    return max_word\n \nprint(longest_word('I am Python Programmer'))\n\nOutput: Programmer", "category": "Python"}, {"instruction": "Create a MySQL query to select the names of all the customers who have made a purchase in the past month.", "input": "", "output": "SELECT name\nFROM customers\nWHERE purchase_date > NOW()-INTERVAL 1 MONTH;", "category": "Python"}, {"instruction": "Iterate over a list and count the number of occurrences of each item.", "input": "list1 = [10, 20, 30, 10, 10, 40, 10]", "output": "def count_instances(list1):\n    count_dict = dict() \n\n    for item in list1: \n        if (item in count_dict): \n            count_dict[item] += 1\n        else: \n            count_dict[item] = 1\n   \n    for key, value in count_dict.items(): \n        print(f\"{key} : {value}\") \n  \ncount_instances(list1)\n\nOutput: 10 : 4, 20 : 1, 30 : 1, 40 : 1", "category": "Python"}, {"instruction": "Edit the following code to increment a variable by one when its value is less than 10.", "input": "int i = 5;", "output": "int i = 5;\nif (i < 10) {\n    i++;\n}", "category": "Python"}, {"instruction": "Fill in the blank to print a string 7 times.", "input": "", "output": "for i in range(7):\n    print(\"Hello, World!\")", "category": "Python"}, {"instruction": "Develop a program to spell a given word.", "input": "\"Hello\"", "output": "def spellWord(word):\n    words = list(word)\n    for i in range(len(words)):\n        print(words[i])", "category": "Python"}, {"instruction": "Build a function to loop through an array and check if each key exists in the object.", "input": "array = [1,2,3]\nobject = {\n  1: 'one',\n  2: 'two'\n}", "output": "function checkKeys(array, object) {\n  for (let i = 0; i < array.length; i++) {\n    let key = array[i];\n    if (object.hasOwnProperty(key)) {\n      console.log(\"key \"+key+\" exists\");\n    } else {\n      console.log(\"key \"+key+\" does not exist\");\n    }\n  }\n}", "category": "Python"}, {"instruction": "Given a JSON object, encode it using Base64.", "input": "{\n\"name\":\"John Doe\",\n\"age\":25\n}", "output": "import base64\n\njson_object = '{\"name\":\"John Doe\",\"age\":25}'\nencoded_object = base64.b64encode(bytes(json_object, 'utf-8'))\nprint(encoded_object)", "category": "Python"}, {"instruction": "Develop a function in Java to display the prime numbers between 0 and 100.", "input": "", "output": "public static void printPrimeNumbers(int n) {\n\n    for (int i = 2; i < n; i++) {\n        boolean isPrime = true;\n        for (int j = 2; j < i; j++) {\n            if (i % j == 0 ) {\n                isPrime = false;\n           \n            }\n        }\n            \n        if (isPrime) {\n            System.out.print(i + \" \");\n        }\n    }\n}", "category": "Python"}, {"instruction": "Using SVG element and CSS properties, create an animation of a car moving in a straight line.", "input": "", "output": "<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 500 500\" >\n  <rect x=\"0\" y=\"0\" width=\"500\" height=\"500\" fill=\"black\"/>\n  <rect x=\"20\" y=\"20\" width=\"20\" height=\"20\" fill=\"red\" id=\"car\"/>\n  <animate xlink:href=\"#car\" attributeName=\"x\" from=\"20\" to=\"480\" dur=\"4s\"\n    repeatCount=\"indefinite\" />\n</svg>", "category": "Python"}, {"instruction": "Write a Python program to remove the nth index character from a nonempty string.", "input": "var_str = Python, n = 0", "output": "def remove_character(var_str, n):\n  first_part = var_str[:n] \n  last_part = var_str[n+1:]\n  return first_part + last_part\n\nprint(remove_character('Python', 0))\n\nOutput: ython", "category": "Python"}, {"instruction": "You need to read a code and predict possible problems.", "input": "def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (fib(n-1) + fib(n-2))", "output": "The main problem with this code is that it is not very efficient. It uses a recursive approach which requires solving the same subproblem multiple times, thus leading to a large time complexity. To improve the efficiency of the code, it could be rewritten to use iteration instead of recursion.", "category": "Python"}, {"instruction": "Write a Bash script to check if the directory exists or not.", "input": "my_directory", "output": "#!/bin/bash\n\nif [ -d \"my_directory\" ]; then\n  echo \"The directory exists\"\nelse \n  echo \"The directory does not exist\"\nfi", "category": "Python"}, {"instruction": "Write a function in JavaScript which takes a situation as a parameter and returns the probability of success.", "input": "The probability of the stock market rising tomorrow.", "output": "function findProbability(situation) {\n // code to calculate probability \n return probability;\n}", "category": "Python"}, {"instruction": "Write a Node.js program to generate a random 3-character string.", "input": "", "output": "const randomString = function() { \n    const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; \n    let str = \"\"; \n      \n    for (let i = 0; i < 3; i++)   \n        str += alphabet[Math.floor(Math.random() * alphabet.length)]; \n\n    return str; \n} \n  \nconsole.log(randomString());", "category": "Python"}, {"instruction": "Create an XML document with three elements \"Company\", \"Product\", and \"Price\".", "input": "", "output": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<root>\n <Company>Company Name</Company>\n <Product>Product Name</Product>\n <Price>Price in Dollars</Price>\n</root>", "category": "Python"}, {"instruction": "Create an array of length n, containing all even numbers starting from 0.", "input": "", "output": "def create_array(n):\n    arr = []\n    for i in range(0, n, 2):\n        arr.append(i)\n    return arr", "category": "Python"}, {"instruction": "Create a C# class to serialize a JSON object", "input": "", "output": "[DataContract]\npublic class SampleObject\n{\n    [DataMember(Name = \"name\")]\n    public string Name { get; set; }\n\n    [DataMember(Name = \"age\")]\n    public int Age { get; set; }\n}\n\npublic static string SerializeObject(SampleObject obj)\n{  \n    DataContractJsonSerializer serializer = new DataContractJsonSerializer(obj.GetType());  \n \n    MemoryStream ms = new MemoryStream();  \n    serializer.WriteObject(ms, obj);  \n    string json = Encoding.Default.GetString(ms.ToArray());  \n    ms.Close();  \n \n    return json;\n}", "category": "Python"}, {"instruction": "Generate a list comprehension in Python to get the cube of all the numbers between 1 to 10", "input": "", "output": "cubes_list = [x**3 for x in range(1, 11)]", "category": "Python"}, {"instruction": "Generate a command to update a folder", "input": "", "output": "git pull origin master", "category": "Python"}, {"instruction": "Create a Python class that processes a string of text", "input": "String = \"Hello World\"", "output": "class StringProcessor:\n    def __init__(self, String):\n        self.string = String\n\n    def processString(self):\n        myString = \"\"\n        for char in self.string:\n            if char.isalnum():\n                myString += char.lower()\n        return myString", "category": "Python"}, {"instruction": "Write a function in Java to sum up all the elements in a two-dimensional array", "input": "int arr[][]={{1,2,3},{4,5,6}};", "output": "public static int findSum(int[][] array) {  \n    int sum=0;  \n    for(int i=0;i<array.length;i++){\n      for(int j=0;j<array[i].length;j++){\n        sum = sum+array[i][j];\n      }\n    }\n    return sum;  \n}", "category": "Python"}, {"instruction": "Create a bash script that sorts a list of numbers", "input": "list = [3,12,1,4,5]", "output": "#!/bin/bash\narr=($list)\nsort=`echo ${arr[*]} | tr \" \" \"\\n\" | sort -n`\necho $sort", "category": "Python"}, {"instruction": "Edit a JavaScript program to input a number and output its factorial", "input": "let n = 5;", "output": "function factorial(n) { \n    let result = 1; \n    for (let i = 2; i <= n; i++) \n        result *= i; \n    return result; \n} \nconsole.log( factorial(n) );", "category": "Python"}, {"instruction": "Retrieve the data stored in a SQL database", "input": "", "output": "SELECT * FROM database_name;", "category": "Python"}, {"instruction": "Classify a given paragraph as having a positive or negative sentiment", "input": "The customer service was horrible and the wait was too long.", "output": "Negative", "category": "Python"}, {"instruction": "Write a node.js program to get the name of the day for a given date", "input": "", "output": "const dateformat = require('dateformat');\n  \nconst getDayName = (date) => { \n     const dayName = dateformat(date,'dddd'); \n     return dayName;\n};", "category": "Python"}, {"instruction": "Generate a C program to count the frequency of each character in a given string", "input": "String = \u201cabcabcabc\u201d", "output": "#include <stdio.h> \n#include <string.h> \n\nvoid characterCount(char str[]) \n{ \n    int count[256] = {0}; \n  \n    int len = strlen(str); \n    \n    // Count the frequency of each character in the string \n    int i; \n    for (i = 0; i < len; i++) \n        count[str[i]]++; \n  \n    // print lowercase characters \n    for (i = 0; i < 26; i++) \n        if (count[i] != 0) \n            printf(\"'%c' has occurred %d time(s).\\n\", i + 'a', count[i]); \n  \n    // print uppercase characters \n    for (i = 65; i < 91; i++) \n        if (count[i] != 0) \n            printf(\"'%c' has occurred %d time(s).\\n\", i + 'A', count[i]); \n} \n\nint main() \n{ \n   char str[] = \"abcabcabc\"; \n   characterCount(str); \n   return 0; \n}", "category": "Python"}, {"instruction": "Create a sorting algorithm in Python that will sort an array of numbers in ascending order", "input": "[3, 1, 5, 2, 4, 6]", "output": "def sort_nums_asc(arr):\n    for i in range(len(arr)):\n        lowest_value_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[lowest_value_index]:\n                lowest_value_index = j\n        arr[i], arr[lowest_value_index] = arr[lowest_value_index], arr[i]\n    return arr", "category": "Python"}, {"instruction": "Write an SQL query to display the 10 most recently added products.", "input": "", "output": "SELECT *\nFROM products\nORDER BY date_created DESC\nLIMIT 10;", "category": "Python"}, {"instruction": "Train a SVM model on the given input data to classify the output as either \"yes\" or \"no\".", "input": "x1, x2, y\n2, 3, Yes\n3, 4, Yes\n3, 5, No", "output": "model = svm.SVC(kernel=\"linear\")\nmodel.fit(X, y)", "category": "Python"}, {"instruction": "Sort the given array [1, 7, 5, 4, 2] in ascending order.", "input": "", "output": "let arr = [1, 7, 5, 4, 2];\narr.sort(function(a, b){return a-b});\n\nconsole.log(arr); // [1, 2, 4, 5, 7]", "category": "Python"}, {"instruction": "Classify the following sentence into either Affective or Predicate.", "input": "\"She was beautiful.\"", "output": "Affective", "category": "Python"}, {"instruction": "Fill the missing statement for for-while loop based on following pseudocode:", "input": "i = 1", "output": "while i <= 10:\n # write statement here \n print(i)\n i = i + 1", "category": "Python"}, {"instruction": "Give an algorithm to delete a key, say k, from a binary search tree (BST).", "input": "", "output": "1. If the tree is empty, then return \n2. Find the key to be deleted in the tree and store it in a temporary node. \n3. Check if the key to be deleted has zero children or one child. \n    a. If the key has one child, then copy the child to the temporary node and delete the key. \n    b. If the key has two children, then find inorder successor of the key, copy it to the temporary node and delete the key.\n4. Free the memory occupied by the temporary node.", "category": "Python"}, {"instruction": "Write a JavaScript program to take an array of numbers, and return an array in which each element is the result of squaring the original.", "input": "[1,2,3,4]", "output": "[1,4,9,16]", "category": "Python"}, {"instruction": "Design a PHP class that can be used to store a user's name, age and gender.", "input": "", "output": "<?php\n\nclass User {\n  public $name;\n  public $age;\n  public $gender;\n\n  public function __construct($name, $age, $gender)\n  {\n    $this->name = $name;\n    $this->age = $age;\n    $this->gender = $gender;\n  }\n}", "category": "Python"}, {"instruction": "Create a Python 3 script that prints out the total number of days in the current month.", "input": "", "output": "import calendar\n\nprint(calendar.monthrange(2020, 11)[1])", "category": "Python"}, {"instruction": "Create an SQL table with three columns called id (int type), name (text type), and age (int type).", "input": "", "output": "CREATE TABLE people (\n    id INT PRIMARY KEY, \n    name TEXT,\n    age INT\n);", "category": "Python"}, {"instruction": "Update the HTML structure with a <p> tag that contains the text \"Welcome to my website\".", "input": "<html>\n<head>\n <title>My Website</title>\n</head>\n<body>\n\n</body>\n</html>", "output": "<html>\n<head>\n <title>My Website</title>\n</head>\n<body>\n <p>Welcome to my website</p>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create a HTML page with a form that takes user input and performs some action when the user clicks the submit button.", "input": "", "output": "<html>\n <head>\n  <title>Form Demo</title>\n </head>\n <body>\n  <form action=\"form_action.php\" method=\"post\">\n   <label for=\"username\">Username:</label>\n   <input type=\"text\" name=\"username\">\n   <input type=\"submit\" name=\"submit\" value=\"Submit\">\n  </form>\n </body>\n</html>", "category": "Python"}, {"instruction": "Create a JavaScript object that stores three pieces of digital contact data, an email address, a phone number, and a website URL.", "input": "", "output": "const contact = {\n email: 'example@example.com',\n phone: '000-000-0000',\n website: 'www.example.com'\n};", "category": "Python"}, {"instruction": "Create a PHP class that has two properties, an id and name.", "input": "", "output": "<?php\n\nclass Person {\n  public $id;\n  public $name;\n\n  public function __construct($id, $name)\n  {\n    $this->id = $id;\n    $this->name = $name;\n  }\n}", "category": "Python"}, {"instruction": "Create a variable in JavaScript that holds the value of a number.", "input": "", "output": "let number = 7;", "category": "Python"}, {"instruction": "Edit the following code so that it prints the first odd number in a given list.", "input": "nums = [2, 3, 4, 5, 6]", "output": "for num in nums:\n    if num % 2 == 1:\n        print(num)\n        break", "category": "Python"}, {"instruction": "Create a function in R that will return the maximum number in a given vector.", "input": "vec <- c(3,2,5,1,4,0)", "output": "max_num <- function(v){\n  return(max(v))\n}\nmax_num(vec)", "category": "Python"}, {"instruction": "Describe the working of a set in Python.", "input": "", "output": "A set in Python is an unordered collection of unique elements. It is an efficient data structure which provides a variety of operations such as membership testing, intersection, union and difference. Sets in Python do not allow duplicate elements and also do not maintain any particular order of the elements. Sets are mutable meaning that elements can be added or removed from them.", "category": "Python"}, {"instruction": "Write a code in Java for creating an instance of an interface.", "input": "", "output": "MyInterface myInterface = new MyInterface() {\n    @Override\n    public void myMethod() {\n        // Implement your code here\n    }\n};", "category": "Python"}, {"instruction": "Provide a MySQL query for selecting a record from a table called \"inventory\".", "input": "", "output": "SELECT * FROM inventory WHERE id = 1;", "category": "Python"}, {"instruction": "Design a JSON object with two keys, \"name\" and \"age\".", "input": "", "output": "{\n  \"name\": \"John Doe\",\n  \"age\": 25\n}", "category": "Python"}, {"instruction": "Create a program that reads a sentence, replaces all spaces with hyphens, and prints the modified sentence.", "input": "sentence = \"This is a sentence\"", "output": "def replace_space_with_hyphen(sentence):\n   return sentence.replace(\" \", \"-\")\n\nprint(replace_space_with_hyphen(sentence))", "category": "Python"}, {"instruction": "Design a function to take a string input and reverse the order of its words.", "input": "string = \"This is a sentence\"", "output": "def reverse_words_order(string):\n    words = string.split(' ')\n    words_reversed = words[::-1]\n    return ' '.join(words_reversed)\n\nprint(reverse_words_order(string))", "category": "Python"}, {"instruction": "Create a program to solve a math equation given in a string.", "input": "equation = \"6 + 3*2\"", "output": "def solve_math_equation(equation):\n    return eval(equation)\n\nprint(solve_math_equation(equation))", "category": "Python"}, {"instruction": "Convert the following matrix into a list of lists in Python.", "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "list_of_lists = [[1,2,3], [4,5,6], [7,8,9]]", "category": "Python"}, {"instruction": "Construct a regular expression that matches an email address that ends in .com.", "input": "", "output": "/\\S+@\\S+\\.com$/", "category": "Python"}, {"instruction": "Write HTML to create a paragraph with the text \"This is a paragraph\".", "input": "", "output": "<p>This is a paragraph</p>", "category": "Python"}, {"instruction": "Create a JSON string that represents a dictionary of two key-value pairs.", "input": "", "output": "{\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n}", "category": "Python"}, {"instruction": "Write an SQL query to retrieve the employee\u2019s name from a table with the employee\u2019s id.", "input": "employees (id, name, age)", "output": "SELECT name \nFROM employees \nWHERE id = ?", "category": "Python"}, {"instruction": "Create a class in Python named 'Circle' with a parameterized constructor to take the radius of the circle as input.", "input": "", "output": "class Circle():\n    def __init__(self, radius):\n        self.radius = radius", "category": "Python"}, {"instruction": "Write a SQL query that returns the sum of the values in a 'salary' column in a table named 'employees'.", "input": "", "output": "SELECT SUM(salary) FROM employees;", "category": "Python"}, {"instruction": "Write a Java code to create a thread and process the tasks in separate threads.", "input": "", "output": "public class Main {\n  public static void main(String[] args)  \n  { \n    Thread thread1 = new Thread(new Runnable(){ \n            public void run(){ \n                //task 1\n            } \n        });  \n    Thread thread2 = new Thread(new Runnable(){ \n            public void run(){ \n                //task 2\n            } \n        }); \n    thread1.start(); \n    thread2.start(); \n  }\n}", "category": "Python"}, {"instruction": "Write a MySQL query to count the number of book titles in the 'books' table having the word 'the' in their title.", "input": "", "output": "SELECT COUNT(*)\nFROM books\nWHERE title LIKE '%the%';", "category": "Python"}, {"instruction": "Create a C++ program to print a pattern's series of numbers.", "input": "", "output": "#include <iostream> \nusing namespace std;  \n  \nvoid printPattern(int n) \n{ \n    int i, j, num; \n    num = 1; \n  \n    // Prints the upper half  \n    for (i = 0; i <= n; i++) { \n        // Start with printing number 1 \n        num = 1; \n  \n        // Print 2*i+1 stars \n        for (j = 0; j < 2 * i + 1; j++) { \n            cout << num << \" \"; \n            if (i % 2 == 0)  \n                num++;   \n            else\n                num--; \n        } \n  \n        // Move to the next line \n        cout << endl; \n    } \n  \n    // Prints the lower half  \n    for (i = n; i > 0; i--) { \n        // Start with printing number 1 \n        num = 1; \n          \n        // print 2*i-1 stars \n        for (j = 0; j < 2 * i - 1; j++) { \n            cout << num << \" \"; \n            if (i % 2 == 0)  \n                num++;   \n            else\n                num--; \n        } \n          \n        // Move to the next line \n        cout << endl; \n    } \n} \n\nint main() \n{ \n    int n = 9; \n  \n    printPattern(n); \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Write a SQL query to group the records from a table named 'countries' by their population greater than 10 million.", "input": "", "output": "SELECT population, COUNT(*) as count\nFROM countries\nWHERE population > 10e6\nGROUP BY population;", "category": "Python"}, {"instruction": "Write a code to add two integers without any type conversion.", "input": "", "output": "function addIntWithoutTypeConversion(a, b) {\n  let sum = 0;\n  let carryin = 0;\n  let k = 0;\n  let temp_a = a;\n  let temp_b = b;\n\n  while (k < 32) {\n    let ak = a >> k & 1;\n    let bk = b >> k & 1;\n    let carryout = (ak & bk) | (ak & carryin) | (bk & carryin);\n    sum |= (ak ^ bk ^ carryin) << k;\n    carryin = carryout << 1;\n    k++;\n  }\n\n  return sum;\n}\n\nconst result = addIntWithoutTypeConversion(1, 2);\n\nconsole.log(result); // 3", "category": "Python"}, {"instruction": "Create a web page using HTML and CSS to display the current date and time.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Current Date and Time</title>\n    <style>\n        p {\n            font-size: 3em;\n            font-family: Arial, sans-serif;\n        }\n    </style>\n</head>\n<body>\n    <p id=\"time\"></p>\n\n    <script>\n        const today = new Date();\n        const time = `${today.toLocaleString()}`;\n        document.getElementById(\"time\").innerHTML = time;\n    </script>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a Java program to print all the Armstrong numbers between 100 to 500. An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the total number of digits.", "input": "", "output": "public class ArmstrongNumbers {\n \n    public static void main(String[] args) {\n \n        int min = 100;\n        int max = 500;\n \n        for (int number = min; number <= max; number++) {\n            int digits = 0;\n            int result = 0;\n            int originalNumber = number;\n \n            while (originalNumber != 0) {\n                originalNumber /= 10;\n                digits++;\n            }\n \n            originalNumber = number;\n \n            while (originalNumber != 0) {\n                int remainder = originalNumber % 10;\n                result += Math.pow(remainder, digits);\n                originalNumber /= 10;\n            }\n            if (result == number) {\n                System.out.println(number);\n            }\n        }\n    }\n}", "category": "Python"}, {"instruction": "Create a HTML document which show \"Hello World!\" text with red color in Times New Roman font.", "input": "", "output": "<html>\n <head>\n  <title>Hello World</title>\n </head>\n <body>\n  <p style=\"color: red; font-family: Times New Roman;\">Hello World!</p>\n </body>\n</html>", "category": "Python"}, {"instruction": "Using Swift, generate a random integer between 0 and 10.", "input": "", "output": "let randomNumber = Int.random(in: 0..<10)", "category": "Python"}, {"instruction": "Write a Perl program to remove the last element from an array and return the resulting array.", "input": "", "output": "@array = (\"one\",\"two\",\"three\",\"four\");\n \n# remove the last element\npop(@array);\n \n# print the resulting array\nprint \"@array\\n\";", "category": "Python"}, {"instruction": "Create a function in C++ that generates a random number between 0 and 1.", "input": "", "output": "#include <stdlib.h>\n#include <time.h>\n\nfloat genRandomNum(){\n    srand (time(NULL));\n    float randomNum = (float)rand()/(float)(RAND_MAX);\n    return randomNum;\n}", "category": "Python"}, {"instruction": "Implement a C program which will check if user input is an integer number or not.", "input": "", "output": "#include <stdio.h>\n\nint isInteger(int x) \n{ \n    // Your code here\n    if(x == (int) x) \n        return 1;  \n    else \n        return 0; \n} \n\nint main() \n{ \n    int num;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &num); \n    \n    if(isInteger(num)){\n        printf(\"It is an integer number.\");\n    } else{\n        printf(\"It is not an integer number.\");\n    }\n\n    return 0; \n}", "category": "Python"}, {"instruction": "Using Javascript, create an object that has a property of message with a value of \"Hello, World\"", "input": "", "output": "let obj = {\n   message: \"Hello, World\"\n}", "category": "Python"}, {"instruction": "Create a SQL query that lists all entries from a table that have a given parameter in the distinct column.", "input": "Table: employee\nParameter: name", "output": "SELECT DISTINCT name FROM employee;", "category": "Python"}, {"instruction": "Divide two floating-point numbers without using the '/' operator.", "input": "A = 5.0, B = 3.0", "output": "A * (1.0 / B)", "category": "Python"}, {"instruction": "Rewrite the following code snippet in Python to print out the word \"Hello\":\n\nprint(\"Hello\")", "input": "", "output": "print(\"Hello\")", "category": "Python"}, {"instruction": "Identify the data type of the following Python expression:\n\n{\"name\": \"John\", \"age\": 40}", "input": "", "output": "This expression is a dictionary, which is a type of data structure in Python. A dictionary is a key-value pair, where the key is unique and the value can be a list of data items or a single item. In this example, the key is \"name\" and the value is \"John\", and the key is \"age\" and the value is 40.", "category": "Python"}, {"instruction": "Analyze the following code and explain what it does:\n\ndef func(n):\n    if n == 0:\n        return 0\n    else:\n        return n + func(n - 1)", "input": "", "output": "This code implements a recursive function to compute the sum of numbers from 1 to n. Specifically, the base case is when n is 0, and the recursive case is when n is greater than 0. In the recursive case, the function will call itself with n-1 as the argument, and then adds n to the result of that call. Thus, each recursive call will add one more number until it reaches the base case. This is known as the base case and recursion principle. The result of the function will be the sum of the numbers from 1 to n.", "category": "Python"}, {"instruction": "Implement a for loop in Python to iterate through a given list of numbers.", "input": "[1, 2, 3, 4]", "output": "for num in [1, 2, 3, 4]:\n    print(num)", "category": "Python"}, {"instruction": "Write an HTML code to design a form which contain two fields, Name and Age. The form should have a button with text \"Submit\".", "input": "", "output": "<form action=\"form-handler.php\" method=\"post\">\n  <label>Name:</label><br>\n  <input type=\"text\" name=\"name\"><br>\n  <label>Age:</label><br>\n  <input type=\"text\" name=\"age\"><br>\n  \n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Generate a stack trace for the following JavaScript code:\n\nfunction foo(n) {\n    return n + 1;\n}\n\nfoo(2);", "input": "", "output": "Traceback (most recent call last):\n  File \"code.js\", line 3, in <module>\n    foo(2)\n  File \"code.js\", line 1, in foo\n    return n + 1\nTypeError: unsupported operand type(s) for +: 'int' and 'str'", "category": "Python"}, {"instruction": "Convert the following paragraph from English to Python code:\n\n\"Given a list of numbers, find the largest number\".", "input": "", "output": "def find_largest(nums):\n    largest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n    return largest", "category": "Python"}, {"instruction": "Create a C++ class called Employee with two data fields age and name.", "input": "", "output": "class Employee {\n    int age;\n    string name;\npublic:\n    int getAge() { return age; }\n    string getName() { return name; }\n    void setAge(int age) { this->age = age; }\n    void setName(string name) { this->name = name; }\n};", "category": "Python"}, {"instruction": "Create a JavaFX program that allows a user to move a square shape in 3 different directions using the arrow keys.", "input": "", "output": "import javafx.application.Application;\nimport javafx.scene.Scene;\nimport javafx.scene.input.KeyCode;\nimport javafx.scene.layout.Pane;\nimport javafx.scene.paint.Color;\nimport javafx.scene.shape.Rectangle;\nimport javafx.stage.Stage;\n\npublic class MoveSquare extends Application {\n    public static void main(String[] args) {\n        launch(args);\n    }\n    \n    public void start(Stage primaryStage) {       \n        Rectangle rect = new Rectangle(30, 30);\n        rect.setFill(Color.BLUE);\n        \n        Pane root = new Pane();\n        root.getChildren().add(rect);\n        \n        Scene scene = new Scene(root);\n        scene.setOnKeyPressed(event -> {\n            KeyCode keyPressed = event.getCode();\n            if (keyPressed == KeyCode.UP) {\n                rect.setY(rect.getY() - 5);\n            } else if (keyPressed == KeyCode.DOWN) {\n                rect.setY(rect.getY() + 5);\n            } else if (keyPressed == KeyCode.LEFT) {\n                rect.setX(rect.getX() - 5);\n            } else if (keyPressed == KeyCode.RIGHT) {\n                rect.setX(rect.getX() + 5);\n            }\n        });\n        \n        primaryStage.setTitle(\"Move Square\");\n        primaryStage.setScene(scene);\n        primaryStage.setWidth(300);\n        primaryStage.setHeight(300);\n        primaryStage.show();\n        \n        scene.requestFocus();\n    }\n}", "category": "Python"}, {"instruction": "Create an HTML page with a table which contains three rows and three columns.", "input": "", "output": "<html>\n    <head>\n        <title>Table Example</title>\n    </head>\n    <body>\n        <table>\n            <tr>\n                <td>Row 1, Column 1</td>\n                <td>Row 1, Column 2</td>\n                <td>Row 1, Column 3</td>\n            </tr>\n            <tr>\n                <td>Row 2, Column 1</td>\n                <td>Row 2, Column 2</td>\n                <td>Row 2, Column 3</td>\n            </tr>\n            <tr>\n                <td>Row 3, Column 1</td>\n                <td>Row 3, Column 2</td>\n                <td>Row 3, Column 3</td>\n            </tr>\n        </table>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Implement an R program to calculate the median of an integer array.", "input": "[2, 3, 4, 5]", "output": "calculate median <- function(arr){\n    sorted <- sort(arr)\n    n <- length(arr)\n    if(n%%2 == 0){\n        mid <- n/2\n        median <- (sorted[mid] + sorted[mid + 1] ) / 2\n    } else {\n        mid <- (n + 1) / 2\n        median <- sorted[mid]\n    }\n    return(median)\n}\n\ncalculate_median(c(2, 3, 4, 5))", "category": "Python"}, {"instruction": "Write a Bash script which will retrieve system information, including memory, storage and IP address.", "input": "", "output": "#!/bin/bash\n\n#Program to Retrieve System Information\nmemory=$(free -m | awk 'NR==2{printf \"Memory Usage: %s/%sMB (%.2f%%)\\n\", $3,$2,$3*100/$2 }')\n\n#Storage Information\nstorage=$(df -h | awk '$NF==\"/\"{printf \"Disk Usage: %d/%dGB (%s)\\n\", $3,$2,$5}')\n\n#IP Address\nipaddress=$(ip addr | awk '/^[0-9]+: / {}; /inet.*global/ {print \"IP Address: \" $2}')\n\n#Print Info\necho \"$memory\"\necho \"$storage\"\necho \"$ipaddress\"", "category": "Python"}, {"instruction": "Write a SELECT statement in SQL to get the count of customers with a salary greater than 40,000.", "input": "", "output": "SELECT COUNT(*) FROM customers WHERE salary > 40000;", "category": "Python"}, {"instruction": "Identify the bug in the following python code:\n\ndef foo(x):\n    x[0] = 2", "input": "[0, 1, 2]", "output": "This code is trying to modify an immutable object (a tuple) as it is attempting to assign a value to the first element in a tuple. The correct way to do this is with a list, not a tuple. The code should be changed to:\n\ndef foo(x):\n    x[0] = 2\n    \nwhere the input x is a list instead of a tuple.", "category": "Python"}, {"instruction": "Create a method in Java that takes two integers and finds the maximum of them.", "input": "", "output": "public static int findMax(int num1, int num2) {\n   return (num1 > num2) ? num1 : num2;\n}", "category": "Python"}, {"instruction": "Write a SQL query to generate a report which display the total number of customers in each country.", "input": "", "output": "SELECT COUNT(*) AS Customer_Count, Country \nFROM Customers \nGROUP BY Country;", "category": "Python"}, {"instruction": "Explain why software design patterns are important in software development.", "input": "", "output": "Software design patterns are important because they allow developers to create extensible and maintainable software applications. Design patterns provide a way of reusing the same code and structure across multiple applications, while allowing the application to remain logically organized. This can reduce the amount of time it takes to develop and debug applications, as well as prevent bugs from arising due to unfamiliar code structures. Additionally, well-designed applications can be easier for new developers to understand and contribute to. Lastly, design patterns can help improve the overall organization and scalability of a codebase.", "category": "Python"}, {"instruction": "Update the given function to return a list of tuples where each tuple contains the name and age of each person.", "input": "def get_person_info(name, age):\n    \"\"\"Returns a tuple containing name and age.\"\"\"\n    return \"Person \" + name + \" is \" + age + \" years old.\"", "output": "def get_person_info(name, age):\n    \"\"\"Returns a list of tuples containing name and age.\"\"\"\n    return [(name, int(age))]", "category": "Python"}, {"instruction": "Create an HTML NavBar so that clicking on Home takes the user to a Home page", "input": "<html>\n<body>\n\n</body>\n</html>", "output": "<html>\n<body>\n  <nav>\n    <ul>\n      <li><a href=\"index.html\">Home</a></li>\n    </ul>\n  </nav>\n</body>\n</html>", "category": "Python"}, {"instruction": "Construct a Python program to print out the biggest number from a given list.", "input": "my_list = [6, 5, 9, 1, 8, 2]", "output": "def find_max(my_list):\n    max_num = my_list[0]\n    for num in my_list:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nprint(find_max(my_list))", "category": "Python"}, {"instruction": "Generate a Matrix with random integers between 1-50 and output the Matrix.", "input": "rows = 5\ncolumns = 6", "output": "import random\n\nrows = 5\ncolumns = 6\n\nmatrix = [[random.randint(1,50) for c in range(columns)]for r in range(rows)]\n\nfor row in matrix:\n    print(row)", "category": "Python"}, {"instruction": "Write a code that will check if a given string is a palindrome or not without using extra space.", "input": "string = \"level\"", "output": "def is_palindrome(string):\n    left, right = 0, len(string)-1\n    \n    while right >= left:\n        if string[left] != string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \nif is_palindrome(string):\n    print(\"The string is a palindrome\")\nelse:\n    print(\"The string is not a palindrome\")", "category": "Python"}, {"instruction": "Write a code that will delete a node in a Linked List at a given position.", "input": "# Node class \nclass Node: \n    # Function to initialise the node object \n    def __init__(self, data): \n        self.data = data  # Assign data \n        self.next = None  # Initialize next as null \n  \n# Linked List class \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n        \n# Given Position\nposition = 5", "output": "# Node class \nclass Node: \n    # Function to initialise the node object \n    def __init__(self, data): \n        self.data = data  # Assign data \n        self.next = None  # Initialize next as null \n  \n# Linked List class \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n\n    # Function to delete given node at position \n    def delete_node(self, position): \n  \n        # If linked list is empty \n        if self.head == None: \n            return \n  \n        # Store head node \n        temp = self.head \n  \n        # If head needs to be removed \n        if position == 0: \n            self.head = temp.next\n            temp = None\n            return \n  \n        # Find previous node of the node to be deleted \n        for i in range(position -1 ): \n            temp = temp.next\n            if temp is None: \n                break\n  \n        # If position is more than number of nodes \n        if temp is None: \n            return \n        if temp.next is None: \n            return \n  \n        # Node temp.next is the node to be deleted \n        # store pointer to the next of node to be deleted \n        next = temp.next.next\n  \n        # Unlink the node from linked list \n        temp.next = None\n  \n        temp.next = next \n  \n# Given Position\nposition = 5\n\n# Create a linked list with four nodes\nlinked_list = LinkedList()\nlinked_list.head = Node(1)\nsecond = Node(2)\nthird = Node(3)\nfourth = Node(4)\n\n# Now connect the linked list \nlinked_list.head.next = second\nsecond.next = third\nthird.next = fourth\n\n# Delete the node from given position\nlinked_list.delete_node(position)", "category": "Python"}, {"instruction": "Create a function that returns true if the given number is a prime number.", "input": "number = 9", "output": "def is_prime(number):\n    if number < 2:\n        return False\n    for i in range(2, number // 2 + 1):\n        if number % i == 0:\n            return False\n    return True\n\nif is_prime(number):\n    print(\"The number is a prime number\")\nelse:\n    print(\"The number is not a prime number\")", "category": "Python"}, {"instruction": "Construct a loop that prints out the first 10 elements in a given list.", "input": "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "output": "for i in range(10):\n    print(my_list[i])", "category": "Python"}, {"instruction": "Write a JavaScript function that generates an array of numbers from 1 to 10 with their cubes.", "input": "", "output": "function getCubes(){\n    var arr = [];\n    for(var i = 1; i <= 10; i++){\n        arr.push(i*i*i);\n    }\n    return arr;\n}", "category": "Python"}, {"instruction": "Rewrite the loop as a generator expression.", "input": "arr = []\nfor i in range(5):\n    arr.append(i)", "output": "arr = [i for i in range(5)]\narr = (i for i in range(5))", "category": "Python"}, {"instruction": "Write a MongoDB query that retrieves the documents from the inventory collection where the quantity field is greater than 10.", "input": "", "output": "db.inventory.find( { quantity: { $gt: 10 } } )", "category": "Python"}, {"instruction": "Write a jQuery script to hide the element with ID \"hidden-element\".", "input": "", "output": "$(\"#hidden-element\").hide();", "category": "Python"}, {"instruction": "Write a Python program to compare two lists and print the elements which are not common between the two.", "input": "list_a = [1, 2, 3, 4, 5]\nlist_b = [3, 4, 5, 6, 7]", "output": "list_a = [1, 2, 3, 4, 5]\nlist_b = [3, 4, 5, 6, 7]\n\nnot_common_elements = [i for i in list_a if not(i in list_b)] + [i for i in list_b if not(i in list_a)]\n\nprint(not_common_elements)", "category": "Python"}, {"instruction": "Rewrite the code as a single line with a one-line lambda function.", "input": "def square(x):\n    return x * x", "output": "square = lambda x: x * x", "category": "Python"}, {"instruction": "Modify the program so that the \"count\" variable counts from 0 to 10 11.", "input": "count = 0\nwhile count < 10:\n    print(count)", "output": "count = 0\nwhile count <= 10:\n    print(count)\n    count = count + 1", "category": "Python"}, {"instruction": "Using the given list of strings, create a new list that contains only the lowercase letters.", "input": "words = [\"Alphabet\", \"Marble\", \"Buttons\"]", "output": "words = [\"Alphabet\", \"Marble\", \"Buttons\"]\n\nlowercase_letters = [word.lower() for word in words] \nprint(lowercase_letters) \n# Output: ['alphabet', 'marble', 'buttons']", "category": "Python"}, {"instruction": "Write a JavaScript function to convert the given 12-hour time format to 24-hour format.", "input": "time = \"12:05 PM\"", "output": "function convertTo24Hour(timeString) {\n    let [hours, minutes, period] = timeString.split(' ');\n    let [hoursString, minutesString] = hours.split(':');\n    let hoursInteger = parseInt(hoursString);\n    \n    if (period === 'AM' && hoursInteger === 12) {\n        hoursInteger = 0;\n    } else if (period === 'PM' && hoursInteger !== 12) {\n        hoursInteger += 12;\n    }\n    \n    return `${hoursInteger.toString().padStart(2, '0')}:${minutesString}`;\n}\n\nlet result = convertTo24Hour(time);\nconsole.log(result); // Outputs: \"00:05\"", "category": "Python"}, {"instruction": "Update the given function to return the greatest common divisor of two numbers.", "input": "def divisor_function(a, b):\n    \"\"\"Returns the greatest common divisor of two numbers.\"\"\"\n    return a % b", "output": "def divisor_function(a, b):\n    \"\"\"Returns the greatest common divisor of two numbers.\"\"\"\n    if b == 0:\n        return a\n    else:\n        return divisor_function(b, a % b)", "category": "Python"}, {"instruction": "Create a function to print the numbers from 1 to 20, and also print \"skip\" for multiplies of 3 and 5.", "input": "", "output": "def print_numbers():\n    '''This function prints numbers from 1 to 20, and also prints \"skip\" for the multiplies of 3 and 5.'''\n    for num in range(1, 21):\n        if num % 3 == 0 and num % 5 == 0:\n            print(\"skip\")\n        else:\n            print(num)\n\nprint_numbers()\n# Output: 1 2 skip 4 5 skip 7 8 skip 10 11 skip 13 14 skip 16 17 skip 19 20", "category": "Python"}, {"instruction": "Construct a regular expression that matches a string containing numbers from 0 to 9 within a range of 8 and 16 digits.", "input": "", "output": "^[0-9]{8,16}$", "category": "Python"}, {"instruction": "Create a function to add two integers x and y.", "input": "", "output": "def add_two_integers(x, y):\n return x + y", "category": "Python"}, {"instruction": "Suggest the best algorithm to reverse a string.", "input": "", "output": "# Algorithm to reverse a string\ndef reverse_string(s):\n# Create a result string\n result = \"\"\n # Iterate through the string in reverse order\n for i in range(len(s)-1, -1, -1):\n result += s[i]\nreturn result", "category": "Python"}, {"instruction": "Write a regular expression to match the following pattern: words that consist only of capital letters.", "input": "", "output": "^[A-Z]+$", "category": "Python"}, {"instruction": "Produce a snippet of C++ code to subtract two given numbers a and b.", "input": "", "output": "int a = 5;\nint b = 2;\n\nint c = a - b;", "category": "Python"}, {"instruction": "Describe an algorithm to convert an array of numbers into an array of its squares.", "input": "", "output": "def calculate_squares(arr):\n result = []\n for num in arr:\n result.append(num ** 2)\n return result", "category": "Python"}, {"instruction": "Write an algorithm in JavaScript to print all the elements inside a given array.", "input": "var names = [\"Harry\", \"Ron\", \"Hermione\"]", "output": "for (var i = 0; i < names.length; i++) {\n    console.log(names[i]);\n}", "category": "Python"}, {"instruction": "Create a shell script to find the first ten prime numbers", "input": "", "output": "#!/bin/bash\n\n# num will be the number to be checked\nnum=2\n\n# counter to count the number of Prime numbers\ncounter=0\n \necho \"First 10 prime numbers are:\"\n\nwhile [ $counter -lt 10 ]\ndo\n\t# isPrime will take value 0 or 1, 1 if prime\n\tisPrime=1\n \n\t# i will start from 2, because 2 is the smallest prime number\n\ti=2\n \n\t# this loop will run from 2 to less than given number\n\twhile [ $i -lt $num ]\n\tdo\n \n\t\tif [ `expr $num % $i` -eq 0 ]\n\t\tthen\n\t\t\t# if modulus comes out to be 0, then it is not prime\n\t\t\tisPrime=0\n\t\tfi\n \n\t\ti=`expr $i + 1`\n \n\tdone\n \n\t# if prime, then counter should be incremented\n\tif [ $isPrime -eq 1 ]\n\tthen\n\t\techo $num\n\t\tcounter=`expr $counter + 1`\n\tfi\n \n\t# increment the number for next loop\n\tnum=`expr $num + 1`\n \ndone", "category": "Python"}, {"instruction": "Sort the list below using insertion sort in Python:", "input": "list = [1,12,1,4,8,10,13]", "output": "list = [1,1,4,8,10,12,13]\n\ndef insertion_sort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key\narr = [1,12,1,4,8,10,13]\ninsertion_sort(arr)\nprint (arr)", "category": "Python"}, {"instruction": "Write an SQL query to find the name of customers who have ordered more than two items this month.", "input": "", "output": "SELECT C.name\nFROM Customers C \nINNER JOIN Orders O\nON C.customer_id = O.customer_id\nWHERE O.order_date >= CURRENT_DATE - INTERVAL '1' MONTH\nGROUP BY C.name\nHAVING COUNT(*) > 2;", "category": "Python"}, {"instruction": "Create a class in Python that creates an immutable list.", "input": "", "output": "class ImmutableList:\n    def __init__(self, list_values):\n        self._dict = dict()\n        for i, elem in enumerate(list_values):\n            self._dict[i] = elem\n    \n    def __getitem__(self, item):\n        return self._dict[item]\n    \n    def __len__(self):\n        return len(self._dict)", "category": "Python"}, {"instruction": "Suggest a completion to the following python code to print the square of a number.", "input": "number = 5\n\nprint(number)", "output": "number = 5\n\nprint(number*number) # Output: 25", "category": "Python"}, {"instruction": "Assign a class of 'active' to the last <a> element in the given HTML code.", "input": "<div>\n    <a href=\"#\">Home</a>\n    <a href=\"#\">About</a>\n    <a href=\"#\">Contact</a>\n</div>", "output": "<div>\n    <a href=\"#\">Home</a>\n    <a href=\"#\">About</a>\n    <a href=\"#\" class=\"active\">Contact</a>\n</div>", "category": "Python"}, {"instruction": "Suggest a completion for the following HTML code to demonstrate items in a unordered list.", "input": "<ul>\n    <li></li>\n</ul>", "output": "<ul>\n    <li>Apple</li>\n    <li>Orange</li>\n    <li>Banana</li>\n    <li>Grapes</li>\n</ul>", "category": "Python"}, {"instruction": "Create a decision tree to classify if a given student's grade ranges from A to D.", "input": "", "output": "# Decision Tree\ndef classify_grades_decision_tree(grade):\n    if grade in range(90, 101): # A range\n        return 'A'\n    elif grade in range(80,90): # B range\n        return 'B'\n    elif grade in range(70,80): # C range\n        return 'C'\n    elif grade in range(60,70): # D range\n        return 'D'\n    else:\n        return 'Error: Grade not in range'\n\n# Driver code\n# Testing\nprint(classify_grades_decision_tree(87)) # Output: B", "category": "Python"}, {"instruction": "Using the given list of names, create a new set that contains only the names with length greater than 6.", "input": "names = [\"John\", \"Jacob\", \"Sophia\", \"Olivia\", \"Michael\"]", "output": "names = [\"John\", \"Jacob\", \"Sophia\", \"Olivia\", \"Michael\"]\n\nlong_names = {name for name in names if len(name) > 6}\nprint(long_names) # Output: {'Sophia', 'Olivia', 'Michael'}", "category": "Python"}, {"instruction": "Write an SQL query to find the top 10 highest-priced items in the products table.", "input": "", "output": "SELECT item_name, price\nFROM products\nORDER BY price DESC\nLIMIT 10;", "category": "Python"}, {"instruction": "Write an SQL query that retrieves all rows from the \"Employees\" table where the salary is above 30000.", "input": "", "output": "SELECT * FROM Employees WHERE salary > 30000;", "category": "Python"}, {"instruction": "Create a for loop in C++ to print out all the even numbers from 0 to a given number.", "input": "", "output": "for (int i = 0; i <= n; i+=2) {\n    cout << i << \" \";\n}", "category": "Python"}, {"instruction": "Create a React component that takes two props, a message and a color, and displays the message with the desired color.", "input": "", "output": "const Message = (props) => {\n  return (\n    <div style={{color: props.color}}>{props.message}</div>\n  )\n}", "category": "Python"}, {"instruction": "Suggest a way of sorting an array of integers A in descending order.", "input": "A = [4, 7, 2, 9, 6];", "output": "A.sort(reverse=True);", "category": "Python"}, {"instruction": "Create a C# class named \"Car\" that models a car.", "input": "", "output": "class Car {\n    private string make;\n    private string model;\n    private int year;\n\n    public Car(string make, string model, int year) {\n        this.make = make;\n        this.model = model;\n        this.year = year;\n    }\n\n    public string getMake() {\n        return this.make;\n    }\n\n    public string getModel() {\n        return this.model;\n    }\n\n    public int getYear() {\n        return this.year;\n    }\n\n    public void setMake(string make) {\n        this.make = make;\n    }\n\n    public void setModel(string model) {\n        this.model = model;\n    }\n\n    public void setYear(int year) {\n        this.year = year;\n    }\n\n}", "category": "Python"}, {"instruction": "How does recursion work?", "input": "", "output": "Recursion is a method of problem solving where the solution to a problem relies on solving smaller instances of the same problem. In computing, recursion is a process by which a method calls itself continuously. A base case is used to terminate the recursion, and each time the method calls itself, it works on a smaller version of the problem. Recursive algorithms can be used to solve a wide range of problems, from sorting and searching algorithms, to graph traversal and problems in computer graphics.", "category": "Python"}, {"instruction": "Write a PHP script to fetch data from an API.", "input": "", "output": "<?php\n    //Initialize cURL\n    $curl = curl_init();\n\n    //Set cURL parameters\n    curl_setopt_array($curl, array(\n    CURLOPT_URL => \"http://path.to/api/\",\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_HTTPHEADER => array(\"Content-type: application/json\")\n    ));\n\n    //Execute cURL\n    $response = curl_exec($curl);\n\n    //Close cURL\n    curl_close($curl);\n\n    //Decode the response\n    $data = json_decode($response);\n\n    //Do something with the data\n    foreach ($data as $obj) {\n        echo $obj->name;\n        echo $obj->price;\n    }\n?>", "category": "Python"}, {"instruction": "Identify the type of layout used in this HTML structure.", "input": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"column\"><h1>Title</h1></div>\n    </div>\n    <div class=\"row\">\n        <div class=\"column\"><p>Content</p></div>\n        <div class=\"column\"><p>Content</p></div>\n        <div class=\"column\"><p>Content</p></div>\n    </div>\n</div>", "output": "The type of layout used in this HTML structure is a Grid Layout. The columns are divided into equal widths, which creates a grid pattern. The content within each column is arranged horizontally.", "category": "Python"}, {"instruction": "Construct an SQL statement to retrieve data from a table called \"users\".", "input": "", "output": "SELECT * FROM users;", "category": "Python"}, {"instruction": "Write a CSS rule to center a container with class \"main\".", "input": "", "output": ".main {\n    margin: 0 auto;\n    width: 100%;\n    display: block;\n    text-align: center;\n}", "category": "Python"}, {"instruction": "Create a Swift enum to represent the different mobile phone brands.", "input": "", "output": "enum MobilePhoneBrand {\n    case Apple\n    case Samsung\n    case Huawei\n    case Oppo\n    case Vivo\n    case Xiaomi\n}", "category": "Python"}, {"instruction": "What is HTML5 Canvas?", "input": "", "output": "HTML5 Canvas is an HTML element that can be used to draw graphics and animation with JavaScript scripts. It provides the ability to render graphics on the fly without the need for any plugins. Canvas elements are rendered as bitmap images which can be manipulated with code to create dynamic effects.", "category": "Python"}, {"instruction": "Create a new View subclass of UIView and name it \"MainView\".", "input": "", "output": "class MainView: UIView { \n  override func draw(_ rect: CGRect) {\n      // code to customize the main view\n  }\n}", "category": "Python"}, {"instruction": "What is an SQL JOIN?", "input": "", "output": "An SQL JOIN is a clause that allows for combining data from multiple tables in a relational database. A JOIN combines records from two or more tables based on the values from one or more columns. It is used in SELECT statement to join the results of two or more tables and then display the result set. There are four types of JOINs: INNER JOIN, LEFT JOIN, RIGHT JOIN, and FULL OUTER JOIN. Each one produces a different result set.", "category": "Python"}, {"instruction": "Write a JavaScript program to iterate through a 1D array, and print each value.", "input": "array = [1,2,3,4]", "output": "const array = [1,2,3,4];\n\nfor (let i = 0; i < array.length; i++) {\n  console.log(array[i]);\n}", "category": "Python"}, {"instruction": "Create a new view controller class named \"MainViewController\".", "input": "", "output": "class MainViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n\n}", "category": "Python"}, {"instruction": "Write a regular expression that matches all English alphabets.", "input": "", "output": "RegEx: [a-zA-Z]", "category": "Python"}, {"instruction": "Write a generic code for traversing a tree.", "input": "", "output": "def traverse_tree(root): \n  if root is None: \n    return\n\t\n  traverse_tree(root.left) \n  print(root.data) \n  traverse_tree(root.right)", "category": "Python"}, {"instruction": "Edit the following HTML code so that it displays a black, 100px border-radius circle.", "input": "<div class=\"circle\"></div>", "output": "<div class=\"circle\" style=\"border-radius: 100px; background-color: black; height: 100px; width: 100px;\"></div>", "category": "Python"}, {"instruction": "Rewrite the following code using try and except blocks.", "input": "if (len(list) == 0):\n    print(\"List is empty\")", "output": "try:\n    if (len(list) == 0):\n        print(\"List is empty\")\nexcept:\n    print(\"No list is given\")", "category": "Python"}, {"instruction": "Run the following program and provide the console output.", "input": "def multiply(x, y):\n    return x * y\n\nprint(multiply(2, 5))", "output": "10", "category": "Python"}, {"instruction": "Suggest a way to display the following list in a readable format.", "input": "list = [3,5,7,9,11]", "output": "print(\", \".join(str(x) for x in list)) \n# Output: 3, 5, 7, 9, 11", "category": "Python"}, {"instruction": "Create a multi-dimensional array in Python.", "input": "", "output": "arr = [[1,2,3], [4,5,6], [7,8,9]]", "category": "Python"}, {"instruction": "Identify the division of numbers 10 and 5.", "input": "", "output": "The division of 10 and 5 is 2.", "category": "Python"}, {"instruction": "Rewrite the below C statement using a ternary operator.", "input": "if (condition) {\n    result = 5;\n}\n\nelse {\n    result = 10;\n}", "output": "result = (condition) ? 5 : 10;", "category": "Python"}, {"instruction": "Replace the placeholders in the following Python code snippet with appropriate values.", "input": "for x in range(__, __):\n    print(x)", "output": "for x in range(0, 10):\n    print(x)", "category": "Python"}, {"instruction": "How do you test a web application using Selenium webdriver?", "input": "", "output": "In order to test a web application using Selenium webdriver, you need to create a Selenium script that navigates the web application, verifies the expected output, and records test results. You would then run the script on different browsers or devices to verify the application's functionality across various environments.", "category": "Python"}, {"instruction": "Update the below HTML snippet to make all the section heading elements center aligned.", "input": "<h1>Section 1</h1>\n<h2>Section 2</h2>\n<h3>Section 3</h3>", "output": "<h1 style=\"text-align: center;\">Section 1</h1>\n<h2 style=\"text-align: center;\">Section 2</h2>\n<h3 style=\"text-align: center;\">Section 3</h3>", "category": "Python"}, {"instruction": "What is the HTML code for a button tag that sends the user to a URL?", "input": "", "output": "<button type=\"button\" onclick=\"window.location.href='https://example.com'\">Go to website</button>", "category": "Python"}, {"instruction": "Suggest a better algorithm for calculating Fibonacci sequence.", "input": "", "output": "A better algorithm for calculating Fibonacci sequence is the iterative method. Instead of making recursive calls, this method computes each element of the Fibonacci sequence in a loop. This method is more efficient and requires less memory overhead. The algorithm is as follows:\n\ndef iterative_fibonacci(n):\n    a = 0\n    b = 1\n    for i in range(1,n+1):\n        c = a + b\n        a = b\n        b = c\n    return a", "category": "Python"}, {"instruction": "Create a class in Java with three private fields and three public functions to access those fields.", "input": "", "output": "public class MyClass{\n    private int num;\n    private double dbl; \n    private char c;\n\n    public int getNum(){\n        return num;\n    }\n    public void setNum(int num){\n        this.num = num;\n    }\n    public double getDbl(){\n        return dbl;\n    }\n    public void setDbl(double dbl){\n        this.dbl = dbl;\n    }\n    public char getChar(){\n        return c;\n    }\n    public void setChar(char c){\n        this.c = c;\n    }\n}", "category": "Python"}, {"instruction": "Extract the strings that match the following regex pattern from a text block", "input": "text block = \u201chotel #9888, school #9876, airport #987\u201d\nregex pattern = #[0-9]{4}", "output": "['#9888', '#9876', '#987']", "category": "Python"}, {"instruction": "Create a program to generate the n-th Fibonacci number.", "input": "", "output": "def fibonacci(n):\n    '''This function returns the n-th Fibonacci number.'''\n\n    if n == 0 or n == 1:\n        return n\n    \n    fib_n_1 = 0\n    fib_n_2 = 1\n\n    for i in range(2, n+1):\n        fib_n = fib_n_1 + fib_n_2\n        fib_n_1, fib_n_2 = fib_n_2, fib_n\n\n    return fib_n", "category": "Python"}, {"instruction": "Identify and correct the bug in the following program.", "input": "def square_numbers(lst):\n    lst_sq = []\n    lst_sq.append(lst[i] ** 2 for i in range(len(lst)))\n    return lst_sq", "output": "def square_numbers(lst):\n    lst_sq = []\n    for i in range(len(lst)):\n        lst_sq.append(lst[i] ** 2)\n    return lst_sq", "category": "Python"}, {"instruction": "Write a RabbitMQ consumer in Java to listen to a particular queue.", "input": "", "output": "import com.rabbitmq.client.ConnectionFactory;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.DeliverCallback;\n\npublic class Consumer {\n\n  public static void main(String[] args) throws Exception {\n    // establish a connection to the RabbitMQ broker\n    ConnectionFactory factory = new ConnectionFactory();\n    factory.setHost(\"hostname\");\n    Connection connection = factory.newConnection();\n    Channel channel = connection.createChannel();\n    \n    // declare a queue\n    String queueName = \"myQueue\";\n    channel.queueDeclare(queueName, false, false, false, null);\n\n    // set up a consumer that will listen to the declared queue\n    DeliverCallback deliverCallback = (consumerTag, delivery) -> {\n      String message = new String(delivery.getBody());\n      System.out.println(\"Received '\" + message + \"'\");\n    };\n    channel.basicConsume(queueName, true, deliverCallback, consumerTag -> { });\n  }\n}", "category": "Python"}, {"instruction": "Suggest a way of decoding a string encoded using Base64.", "input": "encoded_string = \"SGVsbG8gV29ybGQ=\"", "output": "import base64\n\ndef decodeBase64(encoded_string):\n    return base64.b64decode(encoded_string).decode('utf-8')\n\nprint(decodeBase64(encoded_string))\n# Output: Hello World", "category": "Python"}, {"instruction": "Suggest a way of encrypting text using a Caesar cipher.", "input": "plaintext = \"Hello World\"", "output": "def caesar_encrypt(plaintext, k):\n    ciphertext = \"\" \n  \n    # traverse text \n    for i in range(len(plaintext)): \n        char = plaintext[i] \n  \n        # Encrypt uppercase characters \n        if (char.isupper()): \n            ciphertext += chr((ord(char) + k-65) % 26 + 65) \n  \n        # Encrypt lowercase characters \n        else: \n            ciphertext += chr((ord(char) + k - 97) % 26 + 97) \n  \n    return ciphertext \n\nprint(caesar_encrypt(plaintext, 3))\n# Output: Khoor Zruog", "category": "Python"}, {"instruction": "Suggest a way of replacing all the vowels in a string with a star (*).", "input": "string = \"Hello World!\"", "output": "print(''.join([x if x not in 'aeiou' else '*' for x in string]))\n# Output: H*ll* W*rld!", "category": "Python"}, {"instruction": "Create a Ruby program that asks for a user's name and greets them with their name", "input": "", "output": "puts \"What is your name?\"\nname = gets.chomp\nputs \"Hello, #{name}!\"", "category": "Python"}, {"instruction": "Construct an object in JavaScript to store the details of a person with the fields \"name\",\"age\" and \"address\".", "input": "", "output": "let person = {\n  \"name\": \"John Doe\",\n  \"age\": 25,\n  \"address\": \"123 Main St, New York, NY 10001\"\n}", "category": "Python"}, {"instruction": "Create an algorithm that can recognize handwriting.", "input": "", "output": "The algorithm should use pre-processing techniques like image cropping, normalization, and thresholding to convert the raw input image into a binary image. It should then use feature extraction techniques like contours, corner detection, and Hough Transform to detect and separate the characters from the image. The algorithm should then use machine learning techniques like error-backpropagation and convolutional neural networks to classify and recognize the characters in the image.", "category": "Python"}, {"instruction": "Debug the following function.", "input": "def f(n):\n    i = 0\n    while i < n:\n        i+=1\n        if i % 5 == 0:\n        print(i)", "output": "def f(n): \n    i = 0\n    while i < n:\n        i+=1\n\t\t# Fixed missing indentation\n        if i % 5 == 0:\n            print(i)\n\t\t# Added missing closing bracket after print() statement", "category": "Python"}, {"instruction": "Design a function which takes two numbers as input and returns the largest one as output.", "input": "", "output": "def largest_of_two(num1, num2):\n  if num1 > num2:\n    return num1\n  else:\n    return num2", "category": "Python"}, {"instruction": "In the following code snippet, what will be the output of the print statement ?", "input": "x = 10\ny = 5\nx = x + y\nprint(x)", "output": "x = 10\ny = 5\nx = x + y\nprint(x) # Prints 15", "category": "Python"}, {"instruction": "Categorize the following phrases into the given categories.", "input": "phrase, category\nThis is a big mess, Disaster\nThat was a nice evening, Joy\nI am feeling thirsty, Discomfort", "output": "phrase, category\nThis is a big mess, Disaster\nThat was a nice evening, Joy\nI am feeling thirsty, Discomfort", "category": "Python"}, {"instruction": "Modify the following code to compute the sum of squares of the numbers from k to n.", "input": "def sum(k, n):\n    sum = 0\n    for i in range(k, n+1):\n        sum += i\n    return sum", "output": "def sum_squares(k, n):\n    sum = 0\n    for i in range(k, n+1):\n        sum += i**2\n    return sum", "category": "Python"}, {"instruction": "Write a Java program that takes an array of integers and prints the numbers that are divisible by 5", "input": "[10, 20, 25, 15]", "output": "// Create the array of integers\nint[] numbers = {10, 20, 25, 15};\n \n// Iterate over array and print numbers divisible by 5\nfor (int number : numbers) {\n  if (number % 5 == 0) {\n    System.out.println(number);\n  }\n}\n \n// Output: 10 20 25", "category": "Python"}, {"instruction": "Design a C++ class to count the occurrences of a character", "input": "", "output": "class CharCounter{\n  private:\n    char charToCount;\n    int counter;\n public:\n    CharCounter(char c) : charToCount{c}, counter{0} {}\n    void countChar(char c);\n    int getCounter();\n};\n\nvoid CharCounter::countChar(char c){\n    if (c == this->charToCount) this->counter++;\n}\n\nint CharCounter::getCounter(){\n    return this->counter;\n}", "category": "Python"}, {"instruction": "Create an HTML page with two <div> elements", "input": "", "output": "<html>\n  <body>\n    <div>\n      Content\n    </div>\n    <div>\n      Content\n    </div>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create a Java class with an empty constructor and a parameterized constructor", "input": "", "output": "public class TestConstructor {\n \n    public TestConstructor() {\n    }\n \n    public TestConstructor(int n) {\n        // code to run when constructor with parameter is called \n    }\n}", "category": "Python"}, {"instruction": "Create a Node.js script that logs a string.", "input": "", "output": "const fs = require('fs');\n\n// Logs the specified string\nfunction logString(str) {\n  console.log(str);\n}\n\nlogString('Log this string');", "category": "Python"}, {"instruction": "Create a Java method to interpret a given string into an integer.", "input": "", "output": "public static int stringToInteger(String s) { \n    int result = 0; \n    int power = 0; \n    for (int i = s.length() - 1; i >= 0; i--) { \n       char ch = s.charAt(i); \n       result += (ch - '0') * Math.pow(10, power); \n        power++; \n    } \n    return result; \n}", "category": "Python"}, {"instruction": "Write a JavaScript code to sort the characters of a string alphabetically.", "input": "", "output": "function sortString(str) { \n  return str.split(\"\").sort().join(\"\"); \n}", "category": "Python"}, {"instruction": "Implement a function that returns the reversed version of a given string.", "input": "", "output": "def reverse_string(string):\n  return string[::-1]", "category": "Python"}, {"instruction": "Create an array of size 10 with each element being a random integer between 0 and 1.", "input": "", "output": "arr = [random.randint(0, 1) for _ in range(10)]", "category": "Python"}, {"instruction": "Create a function in Haskell that takes an integer and returns a string representing its factorial.", "input": "", "output": "factorial :: Integer -> String\nfactorial n = show $ product [1..n]", "category": "Python"}, {"instruction": "Using the comment as a guide, edit the code to handle the error appropriately.", "input": "try:\n    # TODO: Make API call\nexcept Exception:\n    # TODO: Handle error", "output": "try:\n    # Make API call\nexcept Exception as e:\n    # Handle error\n    print(\"An error occurred:\", e)", "category": "Python"}, {"instruction": "Assign the correct data type for the following variable.", "input": "name = \"John Smith\"", "output": "name = \"John Smith\" # str", "category": "Python"}, {"instruction": "Design a function which prints all the permutations of a given list of numbers.", "input": "", "output": "def permutations(nums):\n    if len(nums) == 1:\n        return [nums]\n    res = []\n    for i in range(len(nums)):\n        for p in permutations(nums[:i] + nums[i+1:]):\n            res.append([nums[i]] + p)\n    return res\n\nif __name__ == '__main__':\n    nums = [1, 2, 3]\n    print(permutations(nums)) # [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]", "category": "Python"}, {"instruction": "Create an algorithm that iterates through a given string and returns the number of alphabets present in the string.", "input": "\"abracadabra\"", "output": "def count_alphabets(string):\n  count = 0\n  for i in range(len(string)):\n    if string[i].isalpha():\n      count += 1\n  return count", "category": "Python"}, {"instruction": "Write a function in R that takes a vector as an argument and returns a new vector in which each element is the average of that element with its two neighbors from the original vector.", "input": "c(1, 4, 2, 8, 6)", "output": "average_three <- function(x) {\n  c(mean(c(x[2], x[1])), mean(x), mean(c(x[2], x[3])))\n}", "category": "Python"}, {"instruction": "Style the following title with css.", "input": "<h1>My Webpage</h1>", "output": "<h1 style=\"display: block; text-align: center; font-size: 2em; color: #FF0000;\">My Webpage</h1>", "category": "Python"}, {"instruction": "Construct a for loop for iterating 10 times and executing a block of code.", "input": "", "output": "for (int i=0; i<10; i++) {\n    // execute block of code\n}", "category": "Python"}, {"instruction": "Create a regular expression for validating a lowercase alphabet, number, or underscore.", "input": "", "output": "^[a-z0-9_]*$", "category": "Python"}, {"instruction": "Construct an SQL query for fetching all rows from a table named \"Employees\".", "input": "", "output": "SELECT * FROM Employees;", "category": "Python"}, {"instruction": "Write a method to implement binary search using Java.", "input": "", "output": "public static int binarySearch(int[] array, int x) \n   { \n       int low = 0, high = array.length - 1; \n          \n       while (low <= high)  \n       { \n           int mid = (low + high) / 2; \n           if (array[mid] < x) \n               low = mid + 1; \n           else if (array[mid] > x)  \n               high = mid - 1; \n           else\n               return mid; \n       } \n       return -1; \n   }", "category": "Python"}, {"instruction": "Create a new array of integers which contains the sum of corresponding elements of two existing arrays.", "input": "arr1 = [1, 2, 3]\narr2 = [4, 5, 6]", "output": "arr1 = [1, 2, 3]\narr2 = [4, 5, 6]\n\n# Initialize new array\narr_sum = [0 for _ in range(len(arr1))]\n\n# Add the values of both arrays\nfor i in range(len(arr1)):\n    arr_sum[i] = arr1[i] + arr2[i]\n\nprint(arr_sum)\n# Output: [5, 7, 9]", "category": "Python"}, {"instruction": "Write a web scraper in Python to collect the data from the top 1000 IMDB movies", "input": "", "output": "import requests\nfrom bs4 import BeautifulSoup\n \nurl = 'https://www.imdb.com/search/title/?title_type=feature&sort=num_votes,desc&view=simple&count=250&start=1'\nhtml_doc = requests.get(url).text\nsoup = BeautifulSoup(html_doc, 'html.parser')\n\n# extract data from HTML table\ntable = soup.find('table', attrs={'class': 'chart'})\nmovies = []\nfor row in table.find_all('tr')[1:]:\n    title = row.find('td', style='').get_text()\n    rating = row.find('td', class_='ratingColumn imdbRating').get_text().strip()\n    movies.append({'title': title, 'rating': rating})\n\nprint(movies)", "category": "Python"}, {"instruction": "Construct an object-oriented code for a Book class.", "input": "", "output": "class Book:\n    def __init__(self, title, author, year):\n        self.title = title\n        self.author = author\n        self.year = year\n        \n    def get_title(self):\n        return self.title\n    \n    def get_author(self):\n        return self.author\n    \n    def get_year(self):\n        return self.year\n    \n    def set_title(self, new_title):\n        self.title = new_title\n        \n    def set_author(self, new_author):\n        self.author = new_author\n        \n    def set_year(self, new_year):\n        self.year = new_year", "category": "Python"}, {"instruction": "Develop a Python code to extract all words from a sentence that begin with a specific letter.", "input": "sentence = \"I love coding in Python\"\nletter = \"P\"", "output": "sentence = \"I love coding in Python\"\nletter = \"P\"\n\nwords_starting_with_P = [word for word in sentence.split() if word.startswith(letter)]\n\nprint(words_starting_with_P)\n# Output: ['Python']", "category": "Python"}, {"instruction": "Find the minimum value from a given array.", "input": "[3, -2, 4, 7]", "output": "def findMin(arr):\n    current_min = arr[0]\n    for num in arr:\n        if num < current_min:\n            current_min = num\n    return current_min", "category": "Python"}, {"instruction": "Create a Ruby program that takes a group of strings and returns the number of strings longer than 5 characters.", "input": "[\"Hello\", \"World\", \"Foo\", \"Bar\", \"Baz\"]", "output": "strings = [\"Hello\", \"World\", \"Foo\", \"Bar\", \"Baz\"]\ncount = 0\n\nstrings.each do |str|\n  if str.length > 5\n    count += 1\n  end\nend\n\nputs \"The number of strings longer than 5 characters is: #{count}\"", "category": "Python"}, {"instruction": "Create a web page using HTML and CSS where the font size of the content increases with the screen size.", "input": "", "output": "<!DOCTYPE html>\n<html>\n  <head>\n   <style>\n     h1{\n       font-size: 1.5em;\n     }\n     @media only screen and (min-width: 600px) {\n       h1 { font-size: 2em; }\n     }\n     @media only screen and (min-width: 900px) {\n       h1 { font-size: 2.5em; }\n     }\n   </style>\n  </head>\n  <body>\n  <h1>My Title</h1>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Parse the given XML document using an XSLT transformation and create an HTML table with the list of books and their authors.", "input": "<the content of the xml document>", "output": "<?xml version=\"1.0\"?>\n<xsl:stylesheet version=\"2.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n\n<xsl:template match=\"/\">\n <html>\n   <body>\n     <table border=\"1\">\n       <tr>\n         <th>Book</th>\n         <th>Author</th>\n       </tr>\n      <xsl:for-each select=\"catalog/book\">\n      <tr>\n        <td><xsl:value-of select=\"title\"/></td>\n        <td><xsl:value-of select=\"author\"/></td>\n      </tr>\n     </xsl:for-each>\n     </table>\n   </body>\n </html>\n</xsl:template>\n</xsl:stylesheet>", "category": "Python"}, {"instruction": "Implement a data structure in Java that implements a stack with the following methods: 'push', 'pop', 'peek', and 'isEmpty'.", "input": "", "output": "import java.util.*;\n \npublic class StackImplementation {\n \n    private Stack<Integer> stack;\n \n    public StackImplementation() {\n        stack = new Stack<>();\n    }\n \n    public void push(int x) {\n        stack.push(x);\n    }\n \n    public int pop() {\n        if (stack.isEmpty()) {\n            System.out.println(\"Stack is empty\");\n            return -1;\n        }\n        return stack.pop();\n    }\n \n    public int peek() {\n        if (stack.isEmpty()) {\n            System.out.println(\"Stack is empty\");\n            return -1;\n        }\n        return stack.peek();\n    }\n \n    public boolean isEmpty() {\n        return stack.isEmpty();\n    }\n}", "category": "Python"}, {"instruction": "Create a machine learning model in Python using the given data that classifies the data into either 'positive' or 'negative'.", "input": "<contents of the dataset>, data type: binary classification", "output": "# Load the dataset\nX, y = <contents of the dataset>\n\n# Split the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Train the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\n\nprint(\"Accuracy score: \", accuracy)", "category": "Python"}, {"instruction": "Create a regular expression pattern in JavaScript that checks if a given string is a valid mobile phone number in India.", "input": "", "output": "^[6-9]\\d{9}$", "category": "Python"}, {"instruction": "Describe how a linked list data structure works in pseudo code.", "input": "", "output": "A linked list is a linear data structure that consists of a sequence of elements, each element containing a pointer to the next element in the list. Some implementations may also contain a pointer to the previous element in the list. Pseudo-code would look like:\n\nSTART \nClass Node \n   int data \n   Node next \nEND Class \n\nNode head  // the start of the list \n\n// traverse the list \nwhile (current != NULL) {\n   // process node \n   current = current.next \n}\n\nEND", "category": "Python"}, {"instruction": "Modify the code so that it prints \"Python is the best language\" five times.", "input": "for i in range(10):\n    print(\"Python is great!\")", "output": "for i in range(5):\n    print(\"Python is the best language!\")", "category": "Python"}, {"instruction": "How can you make an AJAX request using jQuery?", "input": "", "output": "$.ajax({\n  url: \"test.html\",\n  context: document.body\n}).done(function() {\n  $( this ).addClass( \"done\" );\n});", "category": "Python"}, {"instruction": "How do you pass a parameter to a function in JavaScript?", "input": "", "output": "function foo(param) {\n    // do something with param\n}\n\nfoo(param); // pass the parameter here", "category": "Python"}, {"instruction": "Write a code to encode a given body of text into base64", "input": "text=\"Hello World\"", "output": "import base64\ndef encode_base64(text):\n return base64.b64encode(text.encode()).decode()", "category": "Python"}, {"instruction": "Modify the given code to set the third parameter to 0", "input": "def foo(x, y, z):\n    print(x, y, z)", "output": "def foo(x, y, z = 0):\n    print(x, y, z)", "category": "Python"}, {"instruction": "Create a program to determine if a number is divisible by another number", "input": "", "output": "def is_divisible(n, m):\n    if n % m == 0:\n        return True\n    return False", "category": "Python"}, {"instruction": "Rewrite the program to get the same output", "input": "def find_sum(x):\n   sum = 0\n   for i in range(1,x):\n      if i % 3 == 0 or i % 5 == 0:\n        sum += i\n   return sum", "output": "def find_sum(x):\n    sum = 0\n    for i in range(1, x):\n        if i % 3 == 0:\n            sum += i\n        elif i % 5 == 0:\n            sum += i\n    return sum", "category": "Python"}, {"instruction": "Modify the code for the given purpose", "input": "string = input(\"Enter a string: \")", "output": "string = input(\"Enter a string: \")\nif not string.isalpha():\n    print(\"Input must contain only letters\")", "category": "Python"}, {"instruction": "Program a function to remove all the even numbers from an array", "input": "", "output": "def remove_even(arr):\n    new_arr = []\n    for num in arr:\n        if num % 2 != 0:\n            new_arr.append(num)\n    return new_arr", "category": "Python"}, {"instruction": "Modify the given code to ensure that the input is a number", "input": "num = input(\"Enter a number: \")", "output": "num = input(\"Enter a number: \")\ntry:\n    num = int(num)\nexcept ValueError:\n    print(\"Input must be a number\")", "category": "Python"}, {"instruction": "Compose a program to reverse a list of numbers", "input": "", "output": "def reverse_nums(num_list):\n    n = len(num_list)\n    for i in range(n//2):\n        num_list[i], num_list[n-i-1] = num_list[n-i-1], num_list[i]\n    return num_list", "category": "Python"}, {"instruction": "Turn the following sentence into an imperative sentence.", "input": "Let's print \"Hello World\"", "output": "Print \"Hello World\".", "category": "Python"}, {"instruction": "Create an HTML page which displays Hello World in the center of the page.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Hello World</title>\n  <style>\n    body {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      margin: 0;\n    }\n  </style>\n</head>\n<body>\n  <h1>Hello World</h1>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create a function in JavaScript to sum two numbers.", "input": "", "output": "function addNumbers(a, b) {\n  return a + b;\n}", "category": "Python"}, {"instruction": "Create a Java class which sorts the given array of numbers.", "input": "[9, 2, 4, 3, 6, 1]", "output": "class ArraySort { \n  \n    void sort(int arr[]) { \n        int n = arr.length; \n  \n        // One by one move boundary of unsorted subarray \n        for (int i = 0; i < n-1; i++) { \n            \n            // Find the minimum element in unsorted array \n            int min_index = i; \n            for (int j = i+1; j < n; j++) \n                if (arr[j] < arr[min_index]) \n                    min_index = j; \n  \n            // Swap the found minimum element with the first element \n            int temp = arr[min_index]; \n            arr[min_index] = arr[i]; \n            arr[i] = temp; \n        } \n    } \n  \n    // Prints the array \n    void printArray(int arr[]) { \n        int n = arr.length; \n        for (int i=0; i<n; ++i) \n            System.out.print(arr[i] + \" \"); \n        System.out.println(); \n    } \n  \n    // Driver code to test above \n    public static void main(String args[]) \n    { \n        ArraySort ob = new ArraySort(); \n        int arr[] = {9, 2, 4, 3, 6, 1}; \n        ob.sort(arr); \n        System.out.println(\"Sorted array\"); \n        ob.printArray(arr); \n    } \n}", "category": "Python"}, {"instruction": "Create a PHP script to return whether a given number is divisible by 7", "input": "", "output": "<?php\n\nfunction isDivisibleBy7($num)\n{\n    return ($num % 7 == 0);\n}\n?>", "category": "Python"}, {"instruction": "Modify the following code to convert it from JavaScript to Java.", "input": "function getAverage(a, b) {\n  return (a + b) / 2;\n}", "output": "public float getAverage(float a, float b) {\n  return (a + b) / 2;\n}", "category": "Python"}, {"instruction": "Create a function in SQL to find the maximum salary of an employee.", "input": "", "output": "CREATE FUNCTION getMaxSalary() \nRETURNS int \nBEGIN \n  DECLARE @maxSalary int;\n  SELECT @maxSalary = MAX(salary) FROM employees; \n  RETURN @maxSalary; \nEND", "category": "Python"}, {"instruction": "Write a code to determine if a given list contains a particular element", "input": "nums=[1,2,3,4]", "output": "def contains(nums, element):\n return element in nums", "category": "Python"}, {"instruction": "Write a code to decrypt a given cipher text using the Caesar cipher", "input": "cipher_text=\"dfwlrq\"", "output": "def decrypt_caesar_cipher(cipher_text):\n alphabet=\"abcdefghijklmnopqrstuvwxyz\"\n output=\"\"\n for char in cipher_text:\n   i=(alphabet.index(char)-3)%26\n   output+=alphabet[i]\n return output", "category": "Python"}, {"instruction": "Write an HTML tag for a blockquote.", "input": "", "output": "<blockquote> </blockquote>", "category": "Python"}, {"instruction": "Write a JavaScript function that takes an array and counts the occurence of each element in the array.", "input": "[1, 4, 2, 4, 1]", "output": "function countOccurences(arr){\n    let count = {};\n    arr.forEach(function(i) { count[i] = (count[i]||0) + 1;});\n    return count;\n}", "category": "Python"}, {"instruction": "Using Numpy, create an array of size 10 and fill it with random integer numbers between 0 and 9.", "input": "", "output": "import numpy as np\n\narr = np.random.randint(low=0, high=10, size=10)", "category": "Python"}, {"instruction": "Create a web page with a login form that has 2 input fields.", "input": "", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>My Login Page</title>\n</head>\n<body>\n  <form action=\"/login\" method=\"post\">\n    <label for=\"username\">Username:</label><br>\n    <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Username\"><br>\n    <label for=\"password\">Password:</label><br>\n    <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Password\"><br><br>\n    <input type=\"submit\" value=\"Submit\">\n  </form>\n</body>\n</html>", "category": "Python"}, {"instruction": "Construct an SQL query to read the contents of a table called \"users\".", "input": "", "output": "SELECT * FROM users;", "category": "Python"}, {"instruction": "Take an array of strings and a character and return an array containing only the strings containing the given character.", "input": "", "output": "def filter_by_character(str_arr, char):\n    filtered_arr = []\n    for string in str_arr:\n        if char in string:\n            filtered_arr.append(string)\n    return filtered_arr", "category": "Python"}, {"instruction": "Create a function that takes a matrix (MxN array) and returns the transposed matrix.", "input": "", "output": "def transpose(matrix):\n    tr_matrix = [[None for i in range(len(matrix))] for j in range(len(matrix[0]))]\n    for i, row in enumerate(matrix):\n        for j, col in enumerate(row):\n            tr_matrix[j][i] = col\n    return tr_matrix", "category": "Python"}, {"instruction": "Output the longest consecutive character string in a given string.", "input": "", "output": "def longest_consecutive_str(s):\n    longest_str = \"\"\n    cur_str = \"\"\n\n    for char in s:\n        if not cur_str or char == cur_str[-1]:\n            cur_str += char\n        else:\n            if len(cur_str) > len(longest_str):\n                longest_str = cur_str\n            cur_str = char\n\n    if len(cur_str) > len(longest_str):\n            longest_str = cur_str\n\n    return longest_str", "category": "Python"}, {"instruction": "Take an array of strings and return a new array containing only the strings with the longest length.", "input": "", "output": "def longest_strings(str_arr):\n    longest = 0\n    strings = []\n    for string in str_arr:\n        if len(string) > longest:\n            strings = [string]\n            longest = len(string)\n        elif len(string) == longest:\n            strings.append(string)\n    return strings", "category": "Python"}, {"instruction": "Given a 2D array of characters, replace each '0' entry with 'x'.", "input": "[\n ['1', '0', '1'],\n ['0', '1', '0'],\n ['1', '0', '1'],\n]", "output": "[\n ['1', 'x', '1'],\n ['x', '1', 'x'],\n ['1', 'x', '1'],\n]", "category": "Python"}, {"instruction": "Compile a function that checks if a number is prime. Output true if prime, false if not.", "input": "", "output": "def is_prime(num):\n    # form 2 to num-1\n    for i in range(2, num):\n        # percentage to check, output False if divisible by any number\n        if num % i == 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Write a function that sorts an array of strings in ascending order based on the number of distinct characters in each string.", "input": "", "output": "def sort_by_distinct_characters(strings):\n    strings.sort(key=lambda x: len(set(list(x))))\n    return strings", "category": "Python"}, {"instruction": "Explain how the Naive Bayes classifier works.", "input": "", "output": "The Naive Bayes classifier is a probabilistic learning model that is based on the Bayes' theorem. It is a supervised learning algorithm that uses prior probabilities and uses it to observe the relationship between the dependent variable and the independent variable. This algorithm assumes that the different features are independent of each other, which is known as the \"naive\" assumption. It then computes the posterior probabilities of the target variable given the feature inputs, which is then used to classify the observation into one of the classes.", "category": "Python"}, {"instruction": "Create a function in C++ to print the Fibonacci numbers between 0 and 50.", "input": "", "output": "#include <iostream>\nvoid print_fibonacci(int n) {\n int first = 0, second = 1, next;\n while (first <= n) \n {\n std::cout << first << \" \"; \n next = first + second; \n first = second; \n second = next; \n } \n}\n\nint main () {\n int n = 50;\n print_fibonacci(n); \n return 0;\n}", "category": "Python"}, {"instruction": "Identify the correct data type for the value \"37.45\".", "input": "", "output": "float", "category": "Python"}, {"instruction": "Output the below tree structure in Python.", "input": "", "output": "print('  *  ')\nprint(' *** ')\nprint('*****')", "category": "Python"}, {"instruction": "Analyze the code below and suggest three ways to address the memory leak issue.", "input": "import os\n\ndef function():\n message = \"\"\n while True:\n message += \"a\" * 1024", "output": "1. Explicitly deallocate any unnecessary memory by using `del`: \n`del message`\n\n2. Close any open files or resources by using the `with` block for better resource management: \n```\nwith open(\"file_name\",\"w\") as f:\n    # process the file\n```\n\n3. Avoid using dynamic memory allocation where possible. You could use a fixed-sized string instead of a dynamically-allocated one. For example, you could use a `char` array:\n`char message[1500000]`", "category": "Python"}, {"instruction": "Create an HTML page that contains two textboxes. The first textbox is for the user to type in their name and the second textbox is for the user to type in their age.", "input": "", "output": "<html>\n    <head>\n        <title>Text Boxes</title>\n    </head>\n    <body>\n        <form>\n            Name: <input type=\"text\" name=\"name\" />\n            <br><br>\n            Age: <input type=\"text\" name=\"age\" />\n            <br><br>\n            <input type=\"submit\" value=\"Submit\">\n        </form>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Take an array of integers and return true if there is a triplet whose sum is equals to the given target.", "input": "arr = [1, 4, 45, 6, 10, -8], target = 16", "output": "def find_triplet_sum(arr, target):\n    arr.sort()\n    for i in range(0, len(arr)-2):\n        left = i + 1\n        right = len(arr) - 1\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n\n            if curr_sum == target:\n                return True \n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False", "category": "Python"}, {"instruction": "Scrape the results of a web page and extract all the names and emails.", "input": "", "output": "import requests\n\nr = requests.get('http://www.example.com/page')\n\nif r.status_code == 200:\n    data = r.text\n    names = re.findall(r'<span class=\"name\">(.*?)</span>', data)\n    emails = re.findall(r'<span class=\"email\">(.*?)</span>', data)", "category": "Python"}, {"instruction": "Given an integer n, write a program to print out the prime numbers up to n.", "input": "", "output": "def is_prime(n):\n if n <= 1:\n return False\n for i in range(2, int(n**0.5) + 1):\n if n % i == 0:\n return False\n return True\n\ndef find_prime_numbers(n):\n primes = []\n for i in range(2, n + 1):\n if is_prime(i):\n primes.append(i)\n return primes", "category": "Python"}, {"instruction": "Complete the following function to output a reversed string", "input": "", "output": "def reverse(s):\n    rev = \"\"\n \n    i = len(s)\n    while i > 0:\n        rev += s[ i - 1 ]\n        i = i - 1\n \n    return rev", "category": "Python"}, {"instruction": "Suggest an algorithm in Python that will detect an anomaly in time-series data.", "input": "", "output": "We can use Gaussian Mixture Models to detect anomalies in time-series data. This method takes the time-series data as input and trains a model using the data. The model defines a probability distribution for the time-series data, and the anomalies are detected as those data points which have a low probability of occurring according to the distribution.", "category": "Python"}, {"instruction": "Use Node.js to create a program which will take an array of strings and remove any duplicate values.", "input": "", "output": "function dedupeArray(arr){\n    let uniqueArray = [];\n    arr.forEach(item => {\n        if(uniqueArray.indexOf(item) === -1){\n            uniqueArray.push(item);\n        }\n    });\n    return uniqueArray;\n}", "category": "Python"}, {"instruction": "Create a program in JavaScript that will take a list of numbers and return the first index of the highest value.", "input": "list = [1, 2, 5, 4, 4]", "output": "function findIndexOfHighestValue(list){\n\tlet highest = list[0];\n\tlet highestIndex = 0;\n    for (let i=0; i<list.length; i++){\n        if (list[i] > highest){\n            highest = list[i];\n            highestIndex = i;\n        }\n    }\n    return highestIndex;\n}", "category": "Python"}, {"instruction": "Using Java, build a program that will convert a given number from one base to another.", "input": "", "output": "public static int convertBase(int num, int fromBase, int toBase) {\n    int result = 0;\n    int power = 1;\n    \n    while (num > 0) {\n        result += (num % toBase) * power;\n        power *= fromBase;\n        num /= toBase;\n    }\n    \n    return result;\n}", "category": "Python"}, {"instruction": "Use Django to create a basic website for a restaurant.", "input": "", "output": "We can use Django to create a basic website for a restaurant by following the steps below: \n\n1. Design a template for the website using HTML and CSS\n2. Create a Django project with the basic layout as given by the template\n3. Create views that will be used to render different pages (eg. home page, menu page, contact page, etc.)\n4. Create models in the Django project which will store information related to the restaurant, such as menu items, pricing, opening times, etc.\n5. Create URLs for each of the views\n6. Add the necessary code to link the models and views together\n7. Create a form for customers to submit their queries\n8. Add necessary functionality to the website, such as a search feature and ordering system", "category": "Python"}, {"instruction": "Suggest the best way to store the following data structure in a MySQL database.", "input": "[\n    {\n        \"id\": 25,\n        \"questions\": [\n            {\n                \"question_id\": 39,\n                \"question\": \"What is the capital of India?\"\n            }\n        ]\n    }\n]", "output": "The best way to store the above data in a MySQL database is to create three tables: \n\n1. A \"Questions\" table with the following fields: \n\t- id (Primary key)\n\t- question\n  \n2. An \"Answers\" table with the following fields:\n\t- id (Primary key)\n\t- question_id (Foreign key to the \"Questions\" table)\n  \n3. Allocations table with the following fields:\n\t- id (Primary key)\n\t- answer_id (Foreign key to the \"Answers\" table)\n\t- questions_id (Foreign key to the \"Questions\" table)\n\t\nThe \"Questions\" and \"Answers\" table should be related to each other by the \"question_id\" field. And the \"Questions\" and \"Answers\" table should be related to the \"Allocations\" table by the \"question_id\" and \"answer_id\" fields respectively.", "category": "Python"}, {"instruction": "Train a model to classify text into two categories, positive and negative.", "input": "", "output": "import nltk\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# tokenize text\ndef tokenize(text):\n    tokens = nltk.word_tokenize(text)\n    return tokens\n\n# build a Bag of Words model\ncountVec = CountVectorizer(tokenizer=tokenize)\n\n# load training data\ntrainData, trainLabels = loadTrainingData()\n\n# Learn a vocabulary dictionary\ncountVec.fit(trainData)\n\n# transform training data into a document-term matrix\nX_train = countVec.transform(trainData)\n\n# split data into training and validation sets\nX_train, X_valid, y_train, y_valid = train_test_split(X_train, trainLabels, test_size = 0.2, random_state = 0)\n\n# train a Multinomial Naive Bayes classifier \nclf = MultinomialNB().fit(X_train, y_train)\n\n# predict sentiment on validation data\npredicted = clf.predict(X_valid)", "category": "Python"}, {"instruction": "Find the bug in the following C++ program and suggest a fix.", "input": "#include <iostream>\nusing namespace std;\n\nint main() \n{\n    int a = 3;\n    int b = 4;\n    if(a < b)\n     return 0;\n    else\n     return 1;\n}", "output": "#include <iostream>\nusing namespace std;\n\nint main() \n{\n    int a = 3;\n    int b = 4;\n    if(a < b)\n     return 0;\n    else\n     return 1;\n}\n\n// fix: making it an if-else statement instead of using the return statements\nif (a < b)\n{\n    return 0;\n}\nelse \n{\n    return 1;\n}", "category": "Python"}, {"instruction": "Implement a function which will take two strings as input and reverse their order while maintaining the same character at each index.", "input": "s1 = \"hello\"\ns2 = \"world\"", "output": "def reverse_string_order(s1, s2):\n    result = \"\"\n    for i in range(len(s1)):\n        result += s2[i] + s1[i]\n    return result", "category": "Python"}, {"instruction": "Using Java, create a program that takes a list of strings, and returns the longest one.", "input": "strings = [\"hello\", \"world\", \"this\", \"is\", \"a\", \"test\"]", "output": "public static String getLongestString(String[] strings) {\n    int maxLength = 0;\n    String longestString = null;\n    for (String s: strings) {\n        if (s.length() > maxLength) {\n            maxLength = s.length();\n            longestString = s;\n        }\n    }\n    return longestString;\n}", "category": "Python"}, {"instruction": "Create a C++ program to count the number of trailing 0s in a given number.", "input": "", "output": "#include <iostream>\n \nint trailing_zeroes(int n)\n{\n    int cnt = 0;\n    while (n > 0)\n    {\n        if (n % 10 == 0)\n            cnt++;\n        else\n            break;\n        n /=  10;\n    }\n    return cnt;\n}\n \n// Driver code\nint main()\n{\n    int num = 102450;\n    std::cout << trailing_zeroes(num);\n    return 0;\n}\n\n// Output : 2", "category": "Python"}, {"instruction": "Write a C++ program to insert an element into a given vector.", "input": "", "output": "#include <iostream>\n#include <vector>\n \nvoid InsertElement(std::vector<int> &vec, int element, int index)\n{\n    vec.insert(vec.begin() + index, element);\n \n    // Print vector after inserting element\n    std::cout << \"Vector elements after insertion: \";\n    for (int i = 0; i < vec.size(); ++i)\n       std::cout << vec[i] << \" \";\n    std::cout << std::endl;\n}\n \nint main()\n{\n    // Initialize vector\n    std::vector<int> vec = {1, 2, 3, 4};\n \n    // Print vector before inserting element\n    std::cout << \"Vector elements before insertion: \";\n    for (int i = 0; i < vec.size(); ++i)\n        std::cout << vec[i] << \" \";\n    std::cout << std::endl;\n \n    // Insert element\n    int element = 5;\n    int index = 3;\n    InsertElement(vec, element, index);\n \n    return 0;\n}", "category": "Python"}, {"instruction": "Create an HTML page to display a heading, a table and a button.", "input": "headline = \u201cList of Products\u201d\ntable_headers = [\u201cName\u201d, \u201cPrice\u201d, \u201cQuantity\u201d]", "output": "<!DOCTYPE html>\n<html>\n   <head>\n       <title>My Webpage</title>\n   </head>\n   <body>\n       <h1>List of Products</h1>\n   \n       <table>\n           <thead>\n               <tr>\n                   <th>Name</th>\n                   <th>Price</th>\n                   <th>Quantity</th>\n               </tr>\n           </thead>\n           <tbody>\n               <!-- Table Data Here -->\n           </tbody>\n       </table>\n       \n       <button>Submit</button>\n   </body>\n</html>", "category": "Python"}, {"instruction": "Write an SQL query to calculate the sum of all prices of items purchased by customers.", "input": "", "output": "SELECT SUM(price) FROM Purchases;", "category": "Python"}, {"instruction": "Create a MySQL query to select all customers who have purchased items from a specific store in the last seven days.", "input": "store_id = 12345", "output": "SELECT * FROM Customers\nWHERE store_id = 12345\nAND purchases_date > DATE_SUB(CURDATE(), INTERVAL 7 DAY)", "category": "Python"}, {"instruction": "Create a program in Go that will take an array of integers and return the smallest number.", "input": "", "output": "func min(numbers []int) int {\n\tmin := numbers[0]\n\tfor _, number := range numbers {\n\t\tif min > number {\n\t\t\tmin = number\n\t\t}\n\t}\n\treturn min \n}", "category": "Python"}, {"instruction": "Given a URL string, create a JavaScript function to extract the domain name.", "input": "https://www.example.com", "output": "/**\n * Function to extract the domain name from a given URL string\n * @param {string} url - The URL\n * @return {string} The domain name\n */\nfunction extractDomain(url) {\n    var a = document.createElement('a');\n    a.href = url;\n    // Deconstruct the URL to get the domain\n    return a.hostname;\n}\n\nconst domain = extractDomain('https://www.example.com');\nconsole.log(domain); //outputs \"example.com\"", "category": "Python"}, {"instruction": "Why is using the+= operator more efficient than using a+=b on strings in Java?", "input": "", "output": "Using the += operator is more efficient on strings than using a+=b in Java because += operator creates only one string object in memory, whereas a+=b creates a new string every time and requires two string objects. This means that using += operator for strings is faster and uses less memory than using a+=b. This is because if we use a+=b then the expression is evaluated as a = new String(a+b). On the other hand when we use +=, then the expression is evaluated as a = a + b.", "category": "Python"}, {"instruction": "Create a Java class called Student that contains a first name, last name and age.", "input": "", "output": "public class Student {\n    private String firstName;\n    private String lastName;\n    private int age;\n      \n    public Student(String firstName, String lastName, int age) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.age = age;\n    }\n   \n    public String getFirstName() {\n        return firstName;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        if(age<0) {\n            throw new IllegalArgumentException(\"age must be >= 0\");\n        }\n        this.age = age;\n\t}\n}", "category": "Python"}, {"instruction": "Output the Fibonacci sequence up to 50", "input": "", "output": "0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55", "category": "Python"}, {"instruction": "Print out the product of all the even numbers between 0 and 10", "input": "", "output": "384", "category": "Python"}, {"instruction": "Output true if the given string contains the word \"Hello\", otherwise output false.", "input": "\"Hello world!\"", "output": "true", "category": "Python"}, {"instruction": "Evaluate the following expression and report the result", "input": "3 * (4 + 2) / 5", "output": "5.2", "category": "Python"}, {"instruction": "Write a function that returns the length of the longest common substring between two strings.", "input": "s1 = 'abcde'\ns2 = 'abfghe'", "output": "def longest_common_substring(s1, s2): \n    m = len(s1) \n    n = len(s2) \n  \n    # initialize matrix \n    L = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n    # To store the length of longest common substring \n    length = 0 \n  \n    # Comparing each character of s1 and s2 \n    for i in range(m + 1): \n        for j in range(n + 1): \n  \n            # If current character of s1 and s2 matches \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]: \n                L[i][j] = L[i - 1][j - 1] + 1\n                length = max(length, L[i][j]) \n            else: \n                L[i][j] = 0\n  \n    return length \n\n# Driver code \ns1 = 'abcde'\ns2 = 'abfghe'\nprint(\"Length of Longest Common Substring is: \", longest_common_substring(s1, s2))", "category": "Python"}, {"instruction": "Generate a code to reverse a string without using any loop.", "input": "Input String = \"Hello World!\"", "output": "input_string = 'Hello World!'\n\ndef reverse_string(input_string):\n    if len(input_string) == 0:\n        return \"\" \n    else:\n        return reverse_string(input_string[1:]) + input_string[0] \n \nres = reverse_string(input_string) \nprint(res)", "category": "Python"}, {"instruction": "Change the given array to a singly linked list without using a loop.", "input": "array = [1, 2, 3, 4, 5]", "output": "class Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \ndef convertToLinkedList(arr):\n    # Last Node \n    last = None\n  \n    # convert given array to linked list \n    for i in range(len(arr) - 1, -1, -1): \n        # create a new node \n        node = Node(arr[i]) \n  \n        # link existing list with new node \n        node.next = last\n        last = node\n  \n    return node\n\n# Driver code\narray = [1, 2, 3, 4, 5]\nhead = convertToLinkedList(array) \nwhile head != None: \n    print(head.data) \n    head = head.next", "category": "Python"}, {"instruction": "Write a JSON script that keeps track of the number of times a user has visited a website.", "input": "", "output": "{\n    \"user1\": {\n        \"visit_count\": 0\n    },\n    \"user2\": {\n        \"visit_count\": 0\n    }\n}", "category": "Python"}, {"instruction": "Create a program that prints the greatest common divisor between two numbers.", "input": "num1 = 99\nnum2 = 77", "output": "def gcd(num1, num2): \n      \n    if(num2 == 0): \n        return num1 \n    else: \n        return gcd(num2, num1 % num2) \n  \n# Driver code \nnum1 = 99\nnum2 = 77\nprint (\"The GCD of\", num1, \"and\", num2, \"is\", gcd(num1, num2))", "category": "Python"}, {"instruction": "Construct a python code to print the following text in reverse.", "input": "Hello World", "output": "text = 'Hello World'\nprint(text[::-1])", "category": "Python"}, {"instruction": "Write a SQL query to find all records from the table 'products' with a price equal to 10.", "input": "", "output": "SELECT * FROM products WHERE price = 10;", "category": "Python"}, {"instruction": "Select the Python data types which can store a sequence of items.", "input": "", "output": "Sequence data types in Python include lists, tuples and range objects.", "category": "Python"}, {"instruction": "Parse the following text and remove all non-alphanumeric characters", "input": "Hello$#@, this is a te*x&t", "output": "text = 'Hello, this is a text'\nout_text = re.sub('[^a-zA-Z0-9]', '', text)\nprint(out_text)", "category": "Python"}, {"instruction": "Construct an SQL query that retrieves the first 20 rows from a table.", "input": "", "output": "SELECT * FROM table_name LIMIT 20;", "category": "Python"}, {"instruction": "How to check if a given number is an Armstrong number in Python?", "input": "", "output": "#Function to check if a number is an Armstrong number\ndef isArmstrong(number):\n   sum  = 0\n   temp = number\n\n   while temp > 0:\n    digit = temp % 10\n    sum += digit ** 3\n    temp //= 10\n \n   if number == sum:\n       return True\n   else:\n       return False\n   \n#Usage\nnumber = 9\nif(isArmstrong(number)):\n    print(f\"{number} is an Armstrong number\")\nelse:\n    print(f\"{number} is not an Armstrong number\")", "category": "Python"}, {"instruction": "Explain how to use Binary Search in Python?", "input": "", "output": "Binary search is an efficient search algorithm for sorted arrays. In Python, the bisect module can be used for binary search. The bisect.bisect() function finds the position of the number in the list or a place for the number if it is not present. The bisect.bisect_left() function does the same, but carefully chooses its insertion point to the left of any existing entries of the same value.\n\nFor example, to search for an element in a list, one can use the following code:\n\nimport bisect\n\ndef binary_search(list, item):\n    pos = bisect.bisect_left(list, item)\n    if pos != len(list) and list[pos] == item:\n        return pos\n    else:\n        return -1\n\nlist = [1, 2, 4, 7, 8]\nprint(binary_search(list, 2))  # Outputs 1", "category": "Python"}, {"instruction": "Count the number of parameters for the given function.", "input": "def add_names(name1, name2, name3, name4, name5):\n    names = [name1, name2, name3, name4, name5] \n    return names", "output": "5 parameters.", "category": "Python"}, {"instruction": "Implement a sorting algorithm which takes an array of integers as input and sorts it in ascending order.", "input": "[34, 19, 42, -9, 2018, 0, 105]", "output": "def sorting_algorithm(arr):\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n\n# Test\narr = [34, 19, 42, -9, 2018, 0, 105]\nprint(sorting_algorithm(arr)) # [-9, 0, 19, 34, 42, 105, 2018]", "category": "Python"}, {"instruction": "Create a class called \"Computer\" with two attributes \"name\" and \"model\" and two methods \"get_name\" and \"get_model\".", "input": "", "output": "class Computer:\n    def __init__(self, name, model):\n        self.name = name\n        self.model = model\n    \n    def get_name(self):\n        return self.name\n    \n    def get_model(self):\n        return self.model", "category": "Python"}, {"instruction": "Create a dictionary of all the capital cities of Europe as key-value pairs.", "input": "", "output": "europe_capitals = {\n  'France': 'Paris',\n  'Germany': 'Berlin',\n  'Russia': 'Moscow',\n  'Greece': 'Athens',\n  'Norway': 'Oslo',\n  'Denmark': 'Copenhagen',\n  'Italy': 'Rome',\n  'Poland': 'Warsaw',\n  'Spain': 'Madrid',\n  'Sweden': 'Stockholm'\n}", "category": "Python"}, {"instruction": "Develop a code to get the current date and time and print it", "input": "", "output": "from datetime import datetime\n\ndef get_current_datetime():\n    # Get the current date and time\n    current_datetime = datetime.now()\n    # Print the current date and time\n    print(\"Current date and time:\", current_datetime)\n\n# Call the function\nget_current_datetime()", "category": "Python"}, {"instruction": "Find the sum of the first 10 positive integers", "input": "", "output": "The sum of the first 10 positive integers is 55.", "category": "Python"}, {"instruction": "Create a SQL query gives the total counts of a particular type of traffic on a given website", "input": "", "output": "SELECT COUNT(*) \nFROM traffic \nWHERE type = 'website' \nAND date = '<date>'", "category": "Python"}, {"instruction": "Write a MATLAB code to count how many element in an array is greater than a given number.", "input": "array = [4, 5, 2, 8, 9];\nnumber = 6;", "output": "array = [4, 5, 2, 8, 9];\nnumber = 6;\n\n% Count the number of elements in the array that are greater than the given number\ncount = 0;\nfor i=1:length(array)\n    if array(i) > number\n        count = count + 1;\n    end\nend\n\ndisp(count);  % Output: 2", "category": "Python"}, {"instruction": "Write a Swift code to split a string into an array of strings by a specific separator.", "input": "let string = \"Hello, World!\"\nlet separator = \",\"", "output": "let string = \"Hello, World!\"\nlet separator = \",\"\n\nlet array = string.components(separatedBy: separator)\nprint(array) // [\"Hello\", \" World!\"]", "category": "Python"}, {"instruction": "Write an assembly language program to generate a Fibonacci series with n number of elements.", "input": "", "output": ".section __DATA, \"rw\"\n   arraylength: .int 2\n   array:       .int 0, 1\n\n.text\n   .global _start\n_start:\n   mov r1, #0\nloop:\n   sub r2, r1, #1\n\tadd r3, array, r2\n\tldr r2, [r3]\n\n   sub r3, r1, #2\n\tadd r4, array, r3\n\tldr r3, [r4]\n\t\n\tadd r5, r2, r3\n\t\n   add r3, array, r1\n\tstr r5, [r3]\n\n\tldr r1, =arraylength\n\tadd r2, r1, #1\n\tstr r1, =arraylength\n\n\tcmp r1, r2\n\tbne loop", "category": "Python"}, {"instruction": "Replace words with corresponding synonyms in the given text", "input": "text: \"The cat is lazy and likes to sleep.\"\nword: \"sleep\"\nsynonym: \"nap\"", "output": "# Replace words with corresponding synonyms in the given text\n\ntext = \"The cat is lazy and likes to sleep.\"\n\n# Replace the word\ntext = text.replace(\"sleep\", \"nap\")\n\nprint(text) # \"The cat is lazy and likes to nap.\"", "category": "Python"}, {"instruction": "Find the inverse of the given matrix", "input": "[ [1, 2], [3, 4] ]", "output": "# Find the inverse of the given matrix\n\nA = [[1,2], [3,4]]\n\ninverse_A = [[round(A[1][1]*A[0][0] - A[0][1]*A[1][0]),\n        round(-A[1][0]*A[0][0] + A[0][1]*A[1][1])],\n        [round(-A[1][1]*A[0][1] + A[0][0]*A[1][0]),\n        round(A[1][1]*A[0][1] - A[0][0]*A[1][0])]]\n\nprint(inverse_A) # [[4,-2],[-3,1]]", "category": "Python"}, {"instruction": "Connect to a remote database using a JDBC connection.", "input": "host:localhost \nport: 3306\nusername: user \npassword:password \ndatabase: sampledb", "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\n\nString host = \"localhost\";\nint port = 3306;\nString username = \"user\";\nString password = \"password\";\nString database = \"sampledb\";\n\nString connectionString = \"jdbc:mysql://\"+host+\":\"+port+\"/\"+database;\nConnection connection = DriverManager.getConnection(connectionString , username, password);", "category": "Python"}, {"instruction": "Create a class with the name \"Animal\" and add the methods \"make_sound\" and \"eat\".", "input": "", "output": "class Animal:\n\n    def make_sound(self):\n        \"\"\"Makes a sound specific to the animal.\"\"\"\n        pass\n    \n    def eat(self):\n        \"\"\"Eats food.\"\"\"\n        pass", "category": "Python"}, {"instruction": "Write the code to produce a new array that includes all elements from two given arrays.", "input": "", "output": "def merge_two_arrays(arr1, arr2):\n    merged_arr = arr1 + arr2\n    return merged_arr", "category": "Python"}, {"instruction": "Write the code to create a one-dimensional array and initialize it with random numbers of length 4.", "input": "", "output": "import random\n\ndef create_random_array():\n    lst = []\n    for i in range(4):\n        lst.append(random.randint(1,10))\n\n    return lst", "category": "Python"}, {"instruction": "Determine how many elements in the list are greater than zero.", "input": "[2, -1, -5, 6, 7]", "output": "4", "category": "Python"}, {"instruction": "Write the code for a function that takes two parameters n and m and returns the sum of the first n odd integers starting with m.", "input": "", "output": "def sum_of_odd_integers(n,m):\n    total_sum = 0\n    for i in range(m,m+(2*n-1),2):\n        total_sum += i\n    return total_sum", "category": "Python"}, {"instruction": "Sort the list of numbers by increasing order.", "input": "[4, 6, 0, 1, 7, 9]", "output": "[0, 1, 4, 6, 7, 9]", "category": "Python"}, {"instruction": "Generate a Huffman code for a given set of symbols and probabilities", "input": "Symbols: ['A', 'B', 'C', 'D']\nProbabilities: [0.2, 0.3, 0.3, 0.2]", "output": "A: 00\nB: 01\nC: 10\nD: 11", "category": "Python"}, {"instruction": "Suggest a machine learning algorithm suitable for predicting the next seven days of weather", "input": "", "output": "A suitable machine learning algorithm for predicting the next seven days of weather would be an Long Short Term Memory (LSTM) Recurrent Neural Network (RNN). An LSTM RNN can be trained on historical weather data to learn the patterns and relationships between various weather variables. By utilizing these patterns and relationships, the model can then make predictions about the next seven days of weather.", "category": "Python"}, {"instruction": "Suggest an optimisation algorithm for a minimisation problem", "input": "", "output": "A suitable optimisation algorithm for a minimisation problem is Gradient Descent. Gradient Descent works by calculating the gradient of the cost function with respect to the input variables. This gradient is then used to update the input variables in order to reduce the cost. The process is repeated until an optimum value is reached.", "category": "Python"}, {"instruction": "Write a python code to insert a new node at the head of a linked list", "input": "", "output": "# Node class \nclass Node: \n \n\t# Function to initialise the node object \n\tdef __init__(self, data): \n\t\tself.data = data # Assign data \n\t\tself.next = None # Initialize next as null \n\n# Linked List class \nclass LinkedList: \n\n\t# Function to initialize head \n\tdef __init__(self): \n\t\tself.head = None\n\n\t# Function to insert a new node at the beginning \n\tdef insert_at_head(self, new_data): \n\t\t\n\t\t# Create a new node \n\t\tnew_node = Node(new_data) \n\n\t\t# update the new nodes next to old head\n\t\tnew_node.next = self.head \n\n\t\t# update head to new node \n\t\tself.head = new_node", "category": "Python"}, {"instruction": "Create a print statement in Python to print the first 5 elements in a list.", "input": "[2, 3, 4, 5, 6, 7, 8]", "output": "print(list[:5])", "category": "Python"}, {"instruction": "Write a JavaScript code to traverse through a given 2D array.", "input": "[\n  [1, 2],\n  [3, 4],\n  [5, 6]\n]", "output": "function traverse2DArray(arr) {\n    for(let i=0; i<arr.length; i++) {\n        for(let j=0; j<arr[i].length; j++) {\n            console.log(arr[i][j]);\n        }\n    }\n}", "category": "Python"}, {"instruction": "Modify the following HTML to create a link that opens in a new window.", "input": "<a href=\"www.example.com\">Example Link</a>", "output": "<a href=\"www.example.com\" target=\"_blank\">Example Link</a>", "category": "Python"}, {"instruction": "Create a Flask route for handling GET requests with the path \"/hello\".", "input": "", "output": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/hello\", methods=[\"GET\"]) \ndef hello(): \n    return \"Hello!\"", "category": "Python"}, {"instruction": "How would you implement a function to determine if a number is even or odd in Python?", "input": "", "output": "def even_odd(number):\n    if number % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")", "category": "Python"}, {"instruction": "Create an array of descending numbers starting from 10 to 1 using a for loop.", "input": "", "output": "numberArray = []\nfor x in range(10, 0, -1):\n    numberArray.append(x)\n\nprint(numberArray) # [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]", "category": "Python"}, {"instruction": "Parse the following XML document and print its content.", "input": "<people>\n<person>\n   <name>John Doe</name>\n   <age>45</age>\n</person>\n<person>\n   <name>Jane Doe</name>\n   <age>32</age>\n</person>\n</people>", "output": "Name: John Doe\nAge: 45\n\nName: Jane Doe\nAge: 32", "category": "Python"}, {"instruction": "Fix the following code so that it works without errors.", "input": "```\ndef remove_characters(name, characters):\n    for c in characters:\n        name.replace(c, '')\n    return name\n\nname = \"Alice\"\ncharacters = [\"A\", \"e\"]\n```", "output": "```\ndef remove_characters(name, characters):\n    for c in characters:\n        name = name.replace(c, '')\n    return name\n\nname = \"Alice\"\ncharacters = [\"A\", \"e\"]\n```", "category": "Python"}, {"instruction": "Rewrite the following code segment in C#.\n\nfor (i = 0; i < n; i++) {\n   j = j + i;\n}", "input": "", "output": "int j = 0;\nfor (int i = 0; i < n; i++)\n{\n    j += i;\n}", "category": "Python"}, {"instruction": "Create a SQL query that returns the names and salaries of all employees who are earning more than $100,000.", "input": "Employees table \ncolumns: id | name | salary\n\n1 | John | 120000\n2 | Jane | 150000\n3 | Jack | 160000", "output": "SELECT name, salary FROM Employees WHERE salary > 100000;", "category": "Python"}, {"instruction": "Create a SQL query that returns the records with the highest salary from the Employees table.", "input": "Employees table \ncolumns: id | name | salary\n\n1 | John | 120000\n2 | Jane | 150000\n3 | Jack | 160000", "output": "SELECT * FROM Employees ORDER by Salary DESC LIMIT 1;", "category": "Python"}, {"instruction": "What is the unit of measurement for the average speed of a car?", "input": "", "output": "The unit of measurement for the average speed of a car is kilometers per hour (km/h) or miles per hour (mph).", "category": "Python"}, {"instruction": "Create a function that takes a list of strings as an argument and returns a list containing only non-duplicate strings.", "input": "my_list = [\"Apple\", \"Orange\", \"Grapes\", \"Apple\", \"Watermelon\"]", "output": "def remove_duplicates(arr):\n    final_list = []\n    for i in arr:\n        if i not in final_list:\n            final_list.append(i)\n    return final_list", "category": "Python"}, {"instruction": "Count and return the number of lowercase and uppercase characters in a given string.", "input": "my_str = \"Hello World!\"", "output": "def count_cases(s):\n    num_lower = 0\n    num_upper = 0\n    for char in s:\n        if char.islower():\n            num_lower += 1\n        elif char.isupper():\n            num_upper += 1\n    return num_lower, num_upper", "category": "Python"}, {"instruction": "Decompose the following code into two different functions.", "input": "def calculateMinimumDifference(nums):\n    if len(nums) <= 1: return 0\n    min_diff = float('inf')\n    for x in range(1, len(nums)):\n        min_diff = min(min_diff, abs(nums[x] - nums[x-1]))\n    return min_diff", "output": "def calculate_diff(arr):\n    return abs(arr[0] - arr[1])\n\ndef calculate_minimum_difference(nums):\n    if len(nums) <= 1: return 0\n    min_diff = float('inf')\n    for x in range(1, len(nums)):\n        min_diff = min(min_diff, calculate_diff(nums[x-1:x+1]))\n    return min_diff", "category": "Python"}, {"instruction": "Given a range of numbers, write a python program to find the sum of the elements within that range.", "input": "range: 1 to 10", "output": "def sum_range(start, end):\n    res = 0\n    for i in range(start, end+1):\n        res += i\n    return res\n\nsum_range(1, 10)", "category": "Python"}, {"instruction": "Create a CSS stylesheet for a webpage that centers the heading and makes the background color gray.", "input": "", "output": "body {\n    background-color: gray;\n}\n\nh1 {\n    text-align: center;\n}", "category": "Python"}, {"instruction": "Explain what is meant by a backtracking algorithm.", "input": "", "output": "A backtracking algorithm is an algorithmic technique that is used to find all (or some) solutions to a problem by incrementally building a solution and testing it against the given constraints. If the solution is not feasible or the constraints are not satisfied, the algorithm takes a step back and explores a different path of solution construction. The process continues until a solution is found or all the possibilities are exhausted.", "category": "Python"}, {"instruction": "Create a stored procedure in SQL for selecting all the records from a customers table.", "input": "", "output": "CREATE PROCEDURE select_customers \nAS\nBEGIN\n SELECT * FROM customers;\nEND;", "category": "Python"}, {"instruction": "Add a try-catch block to the given code snippet.", "input": "def divide(num1, num2):\n    return num1 / num2", "output": "def divide(num1, num2):\n  try:\n    return num1 / num2\n  except:\n    print('Error: Unable to perform division')", "category": "Python"}, {"instruction": "Write a JavaScript program to parse and evaluate a simple mathematical expression entered as a string.", "input": "String str = \"2 + 3 * 4 - 5 / 3\";", "output": "function evaluateExpression(str) {\n    let expression = str.split(' ').map(el => {\n        if (el === '+' || el === '-' || el === '*' || el === '/') {\n            return el;\n        }\n        return parseInt(el);\n    });\n    let stack = [];\n    let result;\n\n    for (let i = 0; i < expression.length; i++) {\n        let el = expression[i];\n        if (typeof el === 'number') {\n            stack.push(el);\n        } else {\n            let secondOperand = stack.pop();\n            let firstOperand = stack.pop();\n            switch (el) {\n                case '+':\n                    result = firstOperand + secondOperand;\n                    break;\n                case '-':\n                    result = firstOperand - secondOperand;\n                    break;\n                case '*':\n                    result = firstOperand * secondOperand;\n                    break;\n                case '/':\n                    result = firstOperand / secondOperand;\n                    break;\n            }\n            stack.push(result);\n        }\n    }\n    return stack.pop();\n}\n\nconsole.log(evaluateExpression(\"2 + 3 * 4 - 5 / 3\"));", "category": "Python"}, {"instruction": "Create a function to check if the two strings can be made equal by replacing the letters with asterisks in the same order.", "input": "String s1 = \"aaabbcc\";\nString s2 =  \"a*a*b*c*\";", "output": "public boolean canBeEqual(String s1, String s2) {\n    if (s1.length() != s2.length()) return false;\n    int len = s1.length();\n    for (int i = 0; i < len; i++) {\n        if (s1.charAt(i) != s2.charAt(i) && s2.charAt(i) != '*') return false;\n    }\n    return true;\n}", "category": "Python"}, {"instruction": "Given a list of student records, write a Python code snippet to find all the students who scored above 80.", "input": "studentList = [ \n    {'name': 'John', 'score': 80},\n    {'name': 'Jane', 'score': 90},\n    {'name': 'Tom', 'score': 75},\n    {'name': 'Eric', 'score': 85}\n  ]", "output": "highScoringStudents = [student for student in studentList if student['score'] > 80]", "category": "Python"}, {"instruction": "Write a snippet of code for looping over a list of numbers.", "input": "myList = [1, 2, 3, 4]", "output": "for x in myList:\n  print(x)", "category": "Python"}, {"instruction": "Write a shell script to detect the internet speed and display it in the terminal.", "input": "", "output": "#!/bin/bash\n \n# This script shows the internet speed\n \n# Get deivce interface\ninterface=$(ip route list | grep default | cut -d' ' -f5)\n \n# Get download speed\ndownload=$(curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python -  | grep Download | cut -d':' -f2 | cut -d' ' -f2)\n \n# Get upload speed\nupload=$(curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python -  | grep Upload | cut -d':' -f2 | cut -d' ' -f2)\n \n# Echo the results\necho \"Device: $interface\"\necho \"Download speed: $download\"\necho \"Upload speed: $upload\"", "category": "Python"}, {"instruction": "Write a SQL query to find the 10 longest surnames from a given table of surnames.", "input": "", "output": "SELECT surname, LENGTH(surname) \nFROM table \nORDER BY LENGTH(surname) DESC \nLIMIT 10;", "category": "Python"}, {"instruction": "Write a Java program to remove n characters from a given string, starting from a specified position.", "input": "str = \"This is a sample string\"\n  n = 5\n  pos = 8", "output": "public static String removeCharAt(String s, int pos, int n) \n    { \n        return s.substring(0, pos) + s.substring(pos + n); \n    } \n  \n    // Driver Code \n    public static void main(String[] args) \n    { \n        String str = \"This is a sample string\"; \n        int n = 5; \n        int pos = 8; \n  \n        System.out.println(removeCharAt(str, pos, n)); \n    }", "category": "Python"}, {"instruction": "Create a SQL query to find the first name, last name, and the total number of orders placed for all customers, sorted by Number of orders in descending order.", "input": "", "output": "SELECT c.first_name, c.last_name, COUNT(o.customer_id) as num_orders \nFROM customers c JOIN orders o \nWHERE c.id = o.customer_id\nGROUP BY c.id\nORDER BY num_orders DESC;", "category": "Python"}, {"instruction": "Sort a given array in ascending order based on the second element of each array element pair.", "input": "arr = [(3, 5), (4, 1), (1, 4), (2, 2)]", "output": "arr = [(3, 5), (4, 1), (1, 4), (2, 2)]\n\n# sort the array based on the second element in each pair\narr.sort(key=lambda x: x[1])\n \nprint(\"The array sorted in ascending order based on the second element of each array element pair is:\", arr)", "category": "Python"}, {"instruction": "Concatenate two given strings and return the result.", "input": "string1 = \"Hello \", string2 = \"World\"", "output": "string1 = \"Hello \"\nstring2 = \"World\"\n\n# use '+' operator for string concatenation\nresult_string = string1 + string2 \n\nprint(\"The concatenated string is:\", result_string)", "category": "Python"}, {"instruction": "Extract a character's count from a given string.", "input": "string = \"this is a sample string\"", "output": "def count_characters(string):\n    '''This function takes a string as argument and returns a dictionary\n       that contains the count of characters in the given string.''' \n    # create an empty dictionary\n    char_count = {}\n    # iterate over the characters and add to dictionary if not already present\n    for char in string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            # Increment the count if already present\n            char_count[char] += 1 \n    return char_count", "category": "Python"}, {"instruction": "Given an array of numbers, find the maximum product of any three numbers in the array.", "input": "arr = [2, 5, 6, 9, -2, -7, -1]", "output": "arr = [2, 5, 6, 9, -2, -7, -1]\n\n# create an empty list to store the products of all triplets\ntriplets = []\n\n# loop through the array\nfor i in range(len(arr)):\n    for j in range(i+1,len(arr)):\n        for k in range(j+1,len(arr)):\n            # calculate and append the product of each triplet to the list\n            triplets.append(arr[i]*arr[j]*arr[k])\n\n# get the maximum product from the list\nmax_product = max(triplets)\n\nprint(\"The maximum product of any three numbers in the array is:\", max_product)", "category": "Python"}, {"instruction": "Given a target number, find two numbers in the list whose sum is equal to the target number.", "input": "list = [2, 7, 11, 15], target = 9", "output": "list = [2, 7, 11, 15]\ntarget = 9\n\nfor i in range(0, len(list) - 1):\n    for j in range(i + 1, len(list)):\n        if list[i] + list[j] == target:\n            print('The two numbers in the list whose sum is equal to the target number are %d and %d' %(list[i], list[j]))", "category": "Python"}, {"instruction": "Design a web page with a top navigation bar and 2 different color sidebars.", "input": "", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>My Web Page</title>\n  \n  <style>\n    body {\n      margin: 0;\n      padding: 0;\n    }\n\n    .top-nav {\n      position: fixed;\n      background-color: #222;\n      left: 0;\n      top: 0;\n      width: 100%;\n      text-align: center;\n    }\n\n    .sidebar-left {\n      float: left;\n      width: 25%;\n      height: 100%;\n      background-color: #f1f1f1;\n    }\n\n    .sidebar-right {\n      float: right;\n      width: 25%;\n      height: 100%;\n      background-color: #ccc;\n    }\n\n    .main {\n      margin-left: 25%;\n      margin-right: 25%;\n    }\n  </style>\n</head>\n<body>\n  <nav class=\"top-nav\">\n    <ul>\n      <li>{Your navigation items here}</li>\n    </ul>\n  </nav>\n  <div class=\"sidebar-left\"></div>\n  <div class=\"main\">\n    {Your main content here}\n  </div>\n  <div class=\"sidebar-right\"></div>\n</body>\n</html>", "category": "Python"}, {"instruction": "Generate a 4 by 4 multiplication table.", "input": "", "output": "for i in range(1, 5):\n    for j in range(1, 5):\n        print(i*j, end=\"\\t\")\n    print()\n\n# Output\n1\t2\t3\t4\t\n2\t4\t6\t8\t\n3\t6\t9\t12\t\n4\t8\t12\t16", "category": "Python"}, {"instruction": "Generate a 10 character random user password with at least one Upper Case letter, one lower case letter, one number, and one special character.", "input": "", "output": "import random\nimport string\n\ndef generate_password(length):\n    char_types = list(string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation)\n    password = []\n    for _ in range(length):\n        ch = random.choice(char_types)\n        while ch in password:\n            ch = random.choice(char_types)\n        password.append(ch)\n \n    return ''.join(password)\n\npassword = generate_password(10)\nprint(password) # e.W8.vHc2e", "category": "Python"}, {"instruction": "Given an array of integers, find the longest subarray with total sum less than the given sum.", "input": "arr = [1, -2, 2, 4, 3], sum = 3", "output": "arr = [1, -2, 2, 4, 3]\nsum = 3\n\n# create an empty list to store the longest subarray\nlongest = []\n\n# loop through the array\nfor i in range(len(arr)):\n    # set the sum of current subarray to 0 \n    curr_sum = 0\n    # another loop to check if any subarray of the array\n    # has a sum less than the given sum\n    for j in range(i, len(arr)):\n        curr_sum += arr[j]\n        # if any subarray is found update the longest list\n        if curr_sum < sum:\n            longest = arr[i: j + 1]\n\nprint(\"The longest subarray with total sum less than the given sum is:\", longest)", "category": "Python"}, {"instruction": "Evaluate the expression 3^2 + 5%2.", "input": "", "output": "\"\"\"\nEvaluate the expression 3^2 + 5%2\n\"\"\"\n\nint result = 3^2 + 5%2;\nSystem.out.println(\"Result: \"+ result);\n\n// Output: Result: 8", "category": "Python"}, {"instruction": "Create a SQL query to get the names of the customers who have placed orders more than 3 times.", "input": "", "output": "SELECT c.first_name, c.last_name\nFROM customers c JOIN orders o \nWHERE c.id = o.customer_id\nGROUP BY c.id\nHAVING COUNT(o.customer_id) > 3\nORDER BY c.first_name ASC;", "category": "Python"}, {"instruction": "Parse this HTML document and print out the text inside the first <h1> tag.", "input": "html_doc = \"<html><head><title>Sample Website</title></head><body><h1>Hello World!</h1><p>This is a sample website.</p><ul><li>Item 1</li><li>Item 2</li><ul></body></html>\"", "output": "from bs4 import BeautifulSoup\nsoup = BeautifulSoup(html_doc, 'html.parser')\nh1_text = soup.find(\"h1\").text\nprint(h1_text)\n# Output: Hello World!", "category": "Python"}, {"instruction": "Compile the given C++ code.", "input": "#include <iostream> \nusing namespace std; \nint main()\n{ \n  cout << \"Hello World!\"; \n  return 0; \n}", "output": "g++ file.cpp -o file", "category": "Python"}, {"instruction": "Build a class in Python with three methods.", "input": "", "output": "class MyClass:\n  def __init__(self):\n   # initialization code \n   self.data = []\n   self.count = 0\n \n  def add_data(self, data_element):\n   # add data to a list\n   self.data.append(data_element)\n   self.count += 1 \n \n  def get_data_count(self):\n   # return number of data elements\n   return self.count", "category": "Python"}, {"instruction": "Create a script in JavaScript to sort the elements of an array in ascending order.", "input": "", "output": "let array = [1, 9, 4, 2, 5, 7];\nlet sortedArray = array.sort(function(a, b){return a-b});\nconsole.log(sortedArray); // Output: [1, 2, 4, 5, 7, 9]", "category": "Python"}, {"instruction": "Design a function in Python to format a given string as a URL slug.", "input": "string = \"This is a sample string to be converted\"", "output": "def format_as_slug(string):\n    slug = string.lower()\n    slug = slug.strip()\n    slug = slug.replace(' ', '-')\n    slug = re.sub('[^a-zA-Z0-9_\\-]', '', slug)\n    return slug\n\n# Usage \nstring = \"This is a sample string to be converted\"\nresult = format_as_slug(string)\nprint(result) # Output: this-is-a-sample-string-to-be-converted", "category": "Python"}, {"instruction": "Design a function in Python to toggle whether a given HTML tag has a given class.", "input": "<div class=\"myClass\">Hello world</div>", "output": "def toggle_class(html_string, tag, tag_class):\n    soup = BeautifulSoup(html_string, 'html.parser')\n    tag_html = soup.find(tag)\n\n    if tag_html:\n        classes = tag_html.get('class')\n        if classes and tag_class in classes:\n            classes.remove(tag_class)\n        else:\n            classes.append(tag_class)\n        tag_html['class'] = classes\n    return soup.decode()\n\n# Usage\nhtml_string = '<div class=\"myClass\">Hello world</div>'\ntag = 'div'\ntag_class = 'myClass'\nnew_html_string = toggle_class(html_string, tag, tag_class)\nprint(new_html_string)\n# Output: <div>Hello world</div>", "category": "Python"}, {"instruction": "Write a Python script which checks if an input string is a palindrome.", "input": "", "output": "def is_palindrome(input_string):\n    input_string = input_string.lower()\n    if len(input_string) == 0:\n        return False\n    if len(input_string) == 1:\n        return True\n\n    if input_string[0] == input_string[-1]:\n        return is_palindrome(input_string[1:-1])\n\n    return False\n\n# Usage \nstring = 'RADAR'\nresult = is_palindrome(string)\nprint(result) # Output: True", "category": "Python"}, {"instruction": "Given an array of integers, write a program in JavaScript to find the sum of the elements of the given array?", "input": "", "output": "let array = [2,4,5,7,1];\nlet sumOfArrayElements = 0;\n\nfor(let i = 0; i < array.length; i++)\n{\n    sumOfArrayElements += array[i];\n}\n\nconsole.log(sumOfArrayElements); // Output: 19", "category": "Python"}, {"instruction": "Calculate the total number of unique elements in this array.", "input": "array = [[1, 1], [2, 2], [3, 3], [4, 4]]", "output": "total_items = len(array)\nunique_items = len(set(sum(array, [])))\ntotal_unique_items = total_items - unique_items\nprint(total_unique_items)\n# Output: 4", "category": "Python"}, {"instruction": "Design a function in Python to automate the extraction of emails from a single HTML page.", "input": "<html>\n<body>\n Janice's email is janice@example.com, and Susie's is susie@example.com.\n </body>\n </html>", "output": "def extract_emails(html_page):\n emails = []\n soup = BeautifulSoup(html_page)\n for a in soup.find_all('a'):\n  if a.get('href') and (a.get('href').startswith('mailto:')):\n  emails.append(a.get('href')[7:])\n return emails\n\n# Usage \npage = '<html>\n <body>\n  Janice's email is janice@example.com, and Susie's is susie@example.com.\n </body>\n </html>'\n\nemails = extract_emails(page)\nprint(emails)\n# Output: ['janice@example.com', 'susie@example.com']", "category": "Python"}, {"instruction": "Generate all possible permutations of this list.", "input": "my_list = [1, 2, 3]", "output": "from itertools import permutations\npermutation_list = list(permutations(my_list))\nprint(permutation_list)\n# Output: [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]", "category": "Python"}, {"instruction": "Create a set from this list where no duplicates will be present.", "input": "my_list = [1, 2, 1, 2, 3, 4]", "output": "my_set = set(my_list)\nprint(my_set)\n# Output: {1, 2, 3, 4}", "category": "Python"}, {"instruction": "Flatten this nested list into a single list.", "input": "nested_list = [[1,2], [3,4], [5,6]]", "output": "import itertools\nflattened_list = list(itertools.chain.from_iterable(nested_list))\nprint(flattened_list)\n# Output: [1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Write a function in Python to sort this dictionary by values.", "input": "my_dict = {\"Jerry\": 10, \"Marcus\": 3, \"Hanna\": 5}", "output": "def sort_dict_by_values(d):\n    sorted_dict = dict(sorted(d.items(), key=lambda x: x[1])) \n    return sorted_dict\n\nprint(sort_dict_by_values(my_dict))\n# Output: {'Marcus': 3, 'Hanna': 5, 'Jerry': 10}", "category": "Python"}, {"instruction": "Group the elements in this array into pairs and print them.", "input": "arr = [1, 2, 3, 4, 5]", "output": "i = 0\nwhile i < len(arr):\n    pair = (arr[i], arr[i+1])\n    print(pair)\n    i += 2\n# Output: (1, 2) (3, 4) (5, None)", "category": "Python"}, {"instruction": "Find the longest palindromic substring of this string.", "input": "string = \"carrace\"", "output": "def longest_palindrome_substring(string):\n    n = len(string)\n    t = [[False for _ in range(n)] for _ in range(n)]  \n    max_length = 1\n    i = 0\n    while (i < n): \n        t[i][i] = True\n        i = i + 1\n    start = 0\n    i = 0\n    while i < n - 1: \n        if (string[i] == string[i + 1]): \n            t[i][i + 1] = True\n            start = i \n            max_length = 2\n        i = i + 1\n    k = 3\n    while k <= n: \n        i = 0\n        while i < (n - k + 1): \n            j = i + k - 1\n            if (t[i + 1][j - 1] and \n                    string[i] == string[j]): \n                t[i][j] = True\n                if (k > max_length): \n                    start = i \n                    max_length = k \n            i = i + 1\n        k = k + 1\n    longest_palindrome = string[start:start+max_length]\n    return longest_palindrome\n  \nprint(longest_palindrome_substring(string))\n# Output: carrac", "category": "Python"}, {"instruction": "Using the comment as a guide, insert a for loop in the following code to print out all numbers from 0 to 10.", "input": "# TODO: Insert a for loop here", "output": "for i in range(0, 11):\n    print(i)", "category": "Python"}, {"instruction": "Use regex to extract words from the sentence 'Some of my favorite words are pencil, dinosaur, and coffee.'", "input": "", "output": "var words = 'Some of my favorite words are pencil, dinosaur, and coffee.';\nvar result = words.match(/[a-zA-Z]+/g);\nconsole.log(result);\n// Result: [\"Some\", \"of\", \"my\", \"favorite\", \"words\", \"are\", \"pencil\", \"dinosaur\", \"and\", \"coffee\"]", "category": "Python"}, {"instruction": "Write a code in Python to remove all the duplicate elements from a list and print the result.", "input": "list: [2, 3, 3, 4, 5, 5]", "output": "\"\"\"\nWrite a code in Python to remove all the duplicate elements from a list and print the result\n\"\"\"\n\ndef remove_duplicates(lst):\n    new_list = []\n    for i in lst:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n\nif __name__ == '__main__':\n    lst = [2,3,3,4,5,5]\n    print(\"List with duplicates removed:\", remove_duplicates(lst))", "category": "Python"}, {"instruction": "Write a code in Java to print out the power of two of the given number.", "input": "Number: 4", "output": "\"\"\"\nWrite a code in Java to print out the power of two of the given number\n\"\"\"\n\npublic class TwoPower \n{\n    public static void main(String[] args) \n    {\n        int number = 4;\n        double res = Math.pow(2,number);\n        System.out.println(\"2 to the power of \" + number + \" is \" + res);\n    }\n}", "category": "Python"}, {"instruction": "Print the duplicated items in an array of integers.", "input": "array: [1, 2, 3, 2, 5, 1]", "output": "\"\"\"\nPrint the duplicated items in an array of integers\n\"\"\"\n\npublic class DuplicateItems \n{\n    public static void main(String[] args) \n    {\n        int [] array = {1, 2, 3, 2, 5, 1};\n        List<Integer> duplicates = new ArrayList<Integer>();\n        \n        for(int i = 0; i < array.length-1; i++){\n            for(int j = i+1; j < array.length; j++){\n                if(array[i] == array[j] && !duplicates.contains(array[i])) {\n                    duplicates.add(array[i]);\n                }\n            }\n        }\n        System.out.println(\"Duplicate items: \" + duplicates);\n    }\n}", "category": "Python"}, {"instruction": "Write a code to create a web server for a given web page.", "input": "", "output": "# importing the modules\nimport http.server\nimport socketserver\n\n# defining the port number\nport = 8080\n\n# the web page\nindex_html = \"\"\"<!DOCTYPE html>\n<html>\n<head>\n<title>My Website</title>\n</head>\n<body>\n<h1> Welcome to my website!</h1>\n<p>Here you will find useful information about me and my work.</p>\n</body>\n</html>\n\"\"\"\n\n# define a handler\nclass RequestHandler(http.server.SimpleHTTPRequestHandler):\n    def do_GET(self):\n        # setting the response status code\n        self.send_response(200)\n        # setting the content type and other headers\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        # writing the index.html page\n        self.wfile.write(bytes(index_html, \"utf8\"))\n\n# define http server\nwith socketserver.TCPServer((\"\", port), RequestHandler) as httpd:\n    print(\"serving at port\", port)\n    # infinite loop\n    httpd.serve_forever()", "category": "Python"}, {"instruction": "Implement the merge sort algorithm to sort a given array ascending.", "input": "given_array = [7,9,3,8,1]", "output": "def merge_sort(arr):\n    if len(arr) > 1: \n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n\n        #calling merge sort function on left and right arrays\n        merge_sort(L) \n        merge_sort(R) \n\n        i = j = k = 0\n        # Copying data to temp arrays L[] and R[] \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                arr[k] = L[i] \n                i+=1\n            else: \n                arr[k] = R[j] \n                j+=1\n            k+=1\n  \n        # Checking if any element was left \n        while i < len(L): \n            arr[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            arr[k] = R[j] \n            j+=1\n            k+=1\n\nar =[7,9,3,8,1]\nmerge_sort(ar)\n\n# printing sorted array \nprint (ar)", "category": "Python"}, {"instruction": "Create an array of length 10 from a given list of values.", "input": "given_list = [1, 2, 3, 4, 5]", "output": "final_list = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Construct a pre-order traversal code to traverse a binary tree.", "input": "", "output": "def preOrder(root):\n  if root:\n    print(root.data)\n    preOrder(root.left)\n    preOrder(root.right)", "category": "Python"}, {"instruction": "Generate a gradient descent algorithm to optimize a cost function.", "input": "", "output": "def gradient_descent(cost_function, theta, eta, tolerance):\n    cost = cost_function(theta)\n    diff = tolerance + 1\n    while diff > tolerance:\n        theta_updated = theta\n        for i in range(len(theta)):\n            theta[i] = theta[i] - eta * cost_function.gradient_wrt_theta(theta, i)\n            diff = sum((theta_updated[i] - theta[i])**2 for i in range(len(theta)))\n    return theta", "category": "Python"}, {"instruction": "Construct a valid and optimized MySQL query to get the user details of all users who are younger than 24 and have subscribed more than 10 times.", "input": "", "output": "SELECT user_id, username, age, subscriptions \nFROM users \nWHERE age < 24 \nAND subscriptions >= 10", "category": "Python"}, {"instruction": "Write an SQL query to fetch the top 5 products with the highest sale prices from a table named 'products'.", "input": "", "output": "SELECT * FROM products ORDER BY sale_price desc LIMIT 5;", "category": "Python"}, {"instruction": "Create an API endpoint in NodeJS that returns a JSON object containing the current time.", "input": "", "output": "const express = require('express');\nconst app = express();\n\napp.get('/time', (req, res) => {\n const date = new Date();\n const time = {\n  hour: date.getHours(),\n  minutes: date.getMinutes(),\n  seconds: date.getSeconds()\n }\n res.json(time)\n});\n\napp.listen(6000);", "category": "Python"}, {"instruction": "Create a HTML page with a form that takes in two numbers as input and adds them together when the form is submitted.", "input": "", "output": "<!DOCTYPE html>\n<html>\n <head>\n  <title>Adding Form</title>\n </head>\n <body>\n  <form action=\"\" method=\"post\">\n   <input type=\"number\" name=\"a\">\n   <input type=\"number\" name=\"b\">\n   <input type=\"submit\" value=\"Submit\" />\n  </form>\n  <script>\n   document.querySelector('form').onsubmit = function(event) {\n    event.preventDefault();\n    const a = Number(document.querySelector('input[name=\"a\"]').value);\n    const b = Number(document.querySelector('input[name=\"b\"]').value);\n    const result = a + b;\n    alert(`The result of adding ${a} with ${b} is ${result}`);\n   }\n  </script>\n </body>\n</html>", "category": "Python"}, {"instruction": "Make a HTML5 webpage with a simple form.", "input": "", "output": "<!DOCTYPE html> \n<html> \n    <head> \n        <title>Simple Form</title> \n    </head> \n    <body> \n        <form> \n            Name: <input type=\"text\" name=\"name\"/><br><br> \n            Email:  <input type=\"email\" name=\"email\"/><br><br> \n            <input type=\"submit\" value=\"Submit\"/> \n        </form> \n    </body> \n</html>", "category": "Python"}, {"instruction": "Construct an expression in javascript to reverse a string.", "input": "", "output": "let reverseString = (str) => str.split('').reverse().join('');", "category": "Python"}, {"instruction": "Construct a SQL query to find all clients with a given email address.", "input": "The email address is \"test@example.com\"", "output": "SELECT * FROM clients WHERE email = 'test@example.com';", "category": "Python"}, {"instruction": "Generate a regex expression to find all words starting with \"ha\"", "input": "", "output": "^ha\\w+", "category": "Python"}, {"instruction": "Edit the following code snippet to add if/else logic for printing a success message.", "input": "num1 = 5\nnum2 = 6\nif num1 > num2:\n  print(\"The number is greater than 5.\")", "output": "num1 = 5\nnum2 = 6\nif num1 > num2:\n  print(\"The number is greater than 5.\")\nelse:\n  print(\"Success! The number is less than or equal to 5.\")", "category": "Python"}, {"instruction": "Get the top ten most used words within a string.", "input": "", "output": "import collections\n\ndef get_most_used_words(string):\n    # Tokenize the string\n    words = string.split()\n\n    # Calculate frequency of each word\n    freq = {}\n    for word in words:\n       if word in freq:\n           freq[word] += 1\n       else:\n           freq[word] = 1\n\n    # Sort the words in descending order of frequency\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n\n    # Get the top ten most used words\n    most_used_words = [word for word, count in sorted_freq[:10]]\n\n    return most_used_words", "category": "Python"}, {"instruction": "Compact a given list into a dictionary with unique items as keys.", "input": "given_list = [1,1,1,2,2,3]", "output": "uniques = {}\nfor item in given_list:\n     if item not in uniques:\n        uniques[item] = 1\n     else:\n        uniques[item] += 1\n\n# result: {1: 3, 2: 2, 3: 1}", "category": "Python"}, {"instruction": "Edit the code to make sure the program prints the correct output.", "input": "def my_function(x):\n\u00a0\u00a0\u00a0\u00a0y = x * 2\n\u00a0\u00a0\u00a0\u00a0return x + y\n\nresult = my_function(2)\nprint(result)", "output": "def my_function(x):\n\u00a0\u00a0\u00a0\u00a0y = x * 2\n\u00a0\u00a0\u00a0\u00a0return x + y\n\nresult = my_function(2)\nprint(\"The result is:\", result)", "category": "Python"}, {"instruction": "Modify the following code to kill a thread after 10 seconds.", "input": "import threading \nfrom time import sleep\n  \ndef worker(): \n    try: \n        while True: \n            print(\"Thread\") \n            sleep(1) \n\nthreads = [] \nfor x in range(40): \n    t = threading.Thread(target=worker) \n    threads.append(t) \n    t.start()", "output": "import threading \nimport signal \nfrom time import sleep \n\ndef exitThread(signum, frame): \n    raise SystemExit \n\ndef worker(): \n    try: \n        signal.signal(signal.SIGALRM, exitThread) \n        signal.alarm(10) \n        while True: \n            print(\"Thread\")  \n            sleep(1) \n\nthreads = [] \nfor x in range(40): \n    t = threading.Thread(target=worker) \n    threads.append(t) \n    t.start()", "category": "Python"}, {"instruction": "Create an array of 5 unique numbers between 1 and 15.", "input": "", "output": "[1, 7, 10, 11, 15]", "category": "Python"}, {"instruction": "Generate an HTML form with a text input box.", "input": "", "output": "<form> \n  <input type=\"text\" name=\"name\" /> \n</form>", "category": "Python"}, {"instruction": "Explain how to find the minimum value of a list.", "input": "", "output": "We can use the built-in min() function to find the minimum value in a list. This function takes an iterable such as a list, tuple or set as an argument and returns the smallest item in the iterable. For example, if given a list of numbers, the min() function would return the number with the lowest value.\n\nExample: \n\nmy_list = [3, 6, 2, 8, 4]\nmin_val = min(my_list)\nprint(min_val)  # 2", "category": "Python"}, {"instruction": "Describe a method to reverse the order of elements in a given array.", "input": "", "output": "A simple approach to reverse an array is to use two index variables, one at the start and one at the end of the array. Swap the elements present at these two indexes and increment the first index and decrement the second index, until the indexes meet.\n\nExample:\n\ndef reverseArray(arr, start, end): \n \n    while (start < end): \n        arr[start], arr[end] = arr[end], arr[start] \n        start += 1\n        end = end-1\n\narr = [1, 2, 3, 4, 5, 6] \nreverseArray(arr, 0, 5)", "category": "Python"}, {"instruction": "Write a JavaScript function to compare two strings without using any built-in functions.", "input": "", "output": "function compareStrings(str1, str2) {\n    if (str1.length !== str2.length) {\n        return false;\n    }\n\n    for (let i === 0; i < str1.length; i++) {\n        if (str1[i] !== str2[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}", "category": "Python"}, {"instruction": "Convert a list of numbers to a 5x5 matrix.", "input": "given_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]", "output": "matrix = [[1, 2, 3, 4, 5], \n          [6, 7, 8, 9, 10], \n          [11, 12, 13, 14, 15], \n          [16, 17, 18, 19, 20]]", "category": "Python"}, {"instruction": "Generate the SQL command to insert a new item in an existing table.", "input": "Table Name: users  \nValues: ('Adam', 34, 'Male')", "output": "INSERT INTO users (name, age, gender) VALUES ('Adam', 34, 'Male');", "category": "Python"}, {"instruction": "How can we use a list comprehension to make a copy of a given list?", "input": "", "output": "list_copy = [x for x in given_list]", "category": "Python"}, {"instruction": "Create a web page with a simple \"Hello World\" message.", "input": "", "output": "<html>\n  <head>\n    <title>Hello World</title>\n  </head>\n  <body>\n    <h1>Hello World!</h1>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Generate a two-dimensional array of 3 rows and 3 columns with all elements equal to 1.", "input": "", "output": "import numpy as np\n\narr = np.ones((3,3))\nprint(arr)", "category": "Python"}, {"instruction": "Write a function that takes two arguments, an array arr and a value x, and returns the number of times x appears in the array arr.", "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 5]\nx = 5", "output": "def count_val(arr, x):\n    count = 0 \n    for i in arr:\n        if i == x:\n            count += 1\n    return count\n\ncount_val(arr, x)", "category": "Python"}, {"instruction": "Generate a random password of 16 characters that includes a mix of alphanumeric characters and punctuation.", "input": "", "output": "import string\nimport random\n\ndef random_password(str_len):\n    alphanumeric = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(alphanumeric) for i in range(str_len))\n\nrandom_password(16)", "category": "Python"}, {"instruction": "Create an array from a given string and sort it in ascending order.", "input": "string = \"cbaefd\"", "output": "string = \"cbaefd\"\narray = list(string)\narray.sort()\nprint(array)", "category": "Python"}, {"instruction": "Create a vector in R to store the elements \u2018apple\u2019, \u2018mango\u2019, \u2018banana\u2019 and \u2018orange\u2019.", "input": "", "output": "fruits <- c(\"apple\", \"mango\", \"banana\", \"orange\")", "category": "Python"}, {"instruction": "Declare a variable named 'items' and assign it a list containing the elements \u2018pen\u2019, \u2018paper\u2019 and \u2018pencil\u2019 in Python.", "input": "", "output": "items = ['pen', 'paper', 'pencil']", "category": "Python"}, {"instruction": "Create an array of 20 unique values from 1 to 50.", "input": "", "output": "[1, 5, 6, 8, 13, 16, 18, 20, 21, 24, 25, 29, 31, 32, 36, 39, 40, 43, 44, 50]", "category": "Python"}, {"instruction": "Change the following code to implement the Observer Design Pattern in Python.", "input": "class Publisher: \n    def __init__(self): \n        self.observers = [] \n  \n    def add(self, observer): \n        if observer not in self.observers: \n            self.observers.append(observer) \n        else: \n            print('Failed to add: {}'.format(observer)) \n  \n    def remove(self): \n        self.observers.remove(observer) \n  \n    def notifyAll(self, *args, **kwargs): \n        for observer in self.observers: \n            observer.notify(self, *args, **kwargs)", "output": "class Publisher: \n\n    def __init__(self): \n        self.observers = [] \n        self.state = None\n    \n    def getState(self): \n        return self.state \n\n    def setState(self, state): \n        self.state = state \n        self.notifyAll() \n\n    def add(self, observer): \n        if observer not in self.observers: \n            self.observers.append(observer) \n        else: \n            print('Failed to add: {}'.format(observer)) \n  \n    def remove(self): \n        self.observers.remove(observer) \n  \n    def notifyAll(self, *args, **kwargs): \n        for observer in self.observers: \n            if args and kwargs: \n                observer.notify(self, *args, **kwargs) \n            else: \n                observer.notify(self)", "category": "Python"}, {"instruction": "Write a code in Python for comparing two strings without using a built-in function.", "input": "string1 = \"apple\"\nstring2 = \"orange\"", "output": "string1 = \"apple\" \nstring2 = \"orange\" \nlength = min(len(string1), len(string2))\n\nfor i in range(length):\n  if string1[i] != string2[i]:\n    result = string1[i] < string2[i]\n    break\n\nif result == True:\n  print(string1 + \" follows \" + string2 + \" alphabetically.\")\nelse:\n  print(string2 + \" follows \" + string1 + \" alphabetically.\")", "category": "Python"}, {"instruction": "Write a CSS rule to center-align the text of all <h1> elements on a web page.", "input": "", "output": "h1 {\n  text-align: center;\n}", "category": "Python"}, {"instruction": "Make a REST API call to get the latest version of Python.", "input": "", "output": "import requests\n\ndef get_latest_python_version():\n    url = 'https://www.python.org/ftp/python/'\n    response = requests.get(url)\n    \n    if response.status_code == 200:\n        html = response.text\n        start_index = html.find('<a href=\"')\n        \n        if start_index != -1:\n            end_index = html.find('/\">', start_index + 1)\n\n            if end_index != -1:\n                version = html[start_index + 9:end_index]\n                return version\n\n    return None", "category": "Python"}, {"instruction": "Create a user interface for a customer order system.", "input": "", "output": "import tkinter\n\n# create the main window \nroot = Tk() \n  \n# create the user interface \nroot.title(\"Order System\") \nroot.geometry(\"400x200\") \n  \n# create widgets \nLabel(root, text = 'Name:').grid(row = 0, column = 0, padx = 10, pady = 10) \nEntry(root).grid(row = 0, column = 1, columnspan = 2, padx = 10, pady = 10) \nLabel(root, text = 'Email address:').grid(row = 1, column = 0, padx = 10, pady = 10) \nEntry(root).grid(row = 1, column = 1, columnspan = 2, padx = 10, pady = 10) \nButton(root, text = 'Submit').grid(row = 2, column = 1, padx = 10, pady = 10) \nButton(root, text = 'Cancel').grid(row = 2, column = 2, padx = 10, pady = 10) \n\n# enter main event loop \nroot.mainloop()", "category": "Python"}, {"instruction": "Swap the elements at index 2 and 4.", "input": "arr = [1, 3, 5, 6, 8]", "output": "arr = [1, 3, 5, 6, 8]\n\narr[2], arr[4] = arr[4], arr[2]\nprint(arr)", "category": "Python"}, {"instruction": "Generate a new array and store only elements that are greater than 5.", "input": "arr = [3, 9, 8, 1, 6, 4]", "output": "arr = [3, 9, 8, 1, 6, 4]\n\nnew_arr = [num for num in arr if num > 5]\nprint(new_arr)", "category": "Python"}, {"instruction": "Create a new list of elements, multiplied by 10.", "input": "nums = [1, 2, 3, 4]", "output": "nums = [1, 2, 3, 4]\n\nnew_nums = [num*10 for num in nums]\nprint(new_nums)", "category": "Python"}, {"instruction": "Print out the length of each string in the list.", "input": "list_of_strings = ['hello', 'world', 'foobar']", "output": "list_of_strings = ['hello', 'world', 'foobar']\n\nfor string in list_of_strings:\n    print(len(string))", "category": "Python"}, {"instruction": "Create a CSS property to remove the vertical scrollbar.", "input": "", "output": "overflow-y: hidden;", "category": "Python"}, {"instruction": "Re-write this algorithm in pseudo-code.", "input": "def checkEven(number): \n\tif(number % 2 == 0): \n\t\treturn True\n\telse: \n\t\treturn False", "output": "function checkEven(number)\n\tif number modulo 2 = 0\n\t\treturn true\n\telse\n\t\treturn false\nend function", "category": "Python"}, {"instruction": "Name a popular library used to break down text into basic meaningful parts.", "input": "", "output": "NLTK (Natural Language Toolkit) is a popular library used for text processing and breaking it down into basic meaningful parts. It is a platform for building Python programs to work with human language data.", "category": "Python"}, {"instruction": "Write code to create an object with the key which will be incremented on every call of the code.", "input": "", "output": "let count = 0;\nconst keyObject = () => {\n    let newObj = {[`key_${count}`]: count};\n    count++;\n    return newObj;\n}", "category": "Python"}, {"instruction": "Write CSS code to position a block at the top centre of the page.", "input": "", "output": "block {\n    position: absolute;\n    top: 0;\n    left: 50%;\n    transform: translateX(-50%);\n}", "category": "Python"}, {"instruction": "Create a JavaScript function to check if a number is divisible by 4.", "input": "", "output": "const divisibleBy4 = (num) => {\n    if (num % 4 === 0) \n        return true;\n    else\n        return false;\n};", "category": "Python"}, {"instruction": "Write SQL query to get the records with age>25 and address in Mumbai.", "input": "", "output": "SELECT * FROM records WHERE age>25 and address like 'Mumbai%';", "category": "Python"}, {"instruction": "Recalculate this code block with the new input given and provide the new output.", "input": "a = '1'\nb = 2\nanswer = int(a) + int(b)\n\nNew input:\na = 5\nb = 3", "output": "answer = 8", "category": "Python"}, {"instruction": "Modify this string in such a way that it should start with \"Hello \" and must end with \" World\".", "input": "str = \"World, say hello\"", "output": "str = \"Hello World\"", "category": "Python"}, {"instruction": "Use a random number generator to generate random numbers between 1 and 10.", "input": "", "output": "import random\n\ndef random_numbers():\n    for _ in range(10):\n        num = random.randint(1, 10)\n        print(num)\n\nrandom_numbers()", "category": "Python"}, {"instruction": "Given two sorted arrays, find elements that exist in both arrays.", "input": "arr1 = [1, 2, 5, 8, 9, 10] \narr2 = [2, 5, 6, 9]", "output": "common_elements = [2, 5, 9]", "category": "Python"}, {"instruction": "Concatenate the elements of the list into a string.", "input": "list_of_strings = ['I', 'am', 'a', 'string']", "output": "list_of_strings = ['I', 'am', 'a', 'string']\n\nconcat = ' '.join(list_of_strings)\nprint(concat)", "category": "Python"}, {"instruction": "Extract all the words that begin with 's' from the given list.", "input": "list_of_strings = ['stack', 'super', 'stone', 'sit']", "output": "list_of_strings = ['stack', 'super', 'stone', 'sit']\n\nwords_start_s = [word for word in list_of_strings if word.startswith('s')]\nprint(words_start_s)", "category": "Python"}, {"instruction": "Reverse a given array's elements and print the resulting array.", "input": "arr = [1, 2, 3, 4, 5]", "output": "arr = [1, 2, 3, 4, 5]\n\narr.reverse()\nprint(arr)", "category": "Python"}, {"instruction": "Create a new array from the given array by replacing all the odd numbers with 0.", "input": "arr = [3, 5, 7, 9, 1]", "output": "arr = [3, 5, 7, 9, 1]\n\nnew_arr = [num if num % 2 == 0 else 0 for num in arr]\nprint(new_arr)", "category": "Python"}, {"instruction": "Write a code snippet to store the output of an API call into a variable.", "input": "url = 'http://example.com/api/v1/data'", "output": "import requests\n\nurl = 'http://example.com/api/v1/data'\nresponse = requests.get(url)\ndata = response.json()", "category": "Python"}, {"instruction": "Create a function to build a queue (i.e., a sequence of objects)", "input": "", "output": "class Queue: \n      \n    def __init__(self): \n        self.items = [] \n  \n    def enqueue(self, item): \n        self.items.insert(0, item) \n  \n    def dequeue(self): \n        if not self.is_empty(): \n            return self.items.pop() \n  \n    def is_empty(self): \n        return len(self.items) == 0 \n  \n    def peek(self): \n        if not self.is_empty(): \n            return self.items[-1].value \n  \n    def __len__(self): \n        return self.size() \n  \n    def size(self): \n        return len(self.items)", "category": "Python"}, {"instruction": "Create code that given a stack (i.e., a sequence of objects), returns the reversed stack", "input": "stack = [1, 2, 3, 4]", "output": "def reverse_stack(stack): \n\tif len(stack) == 0: \n\t\treturn \n\t\n\t# Pop the first element from the stack \n\ttemp = stack.pop()\n\n\t# Call the reverse_stack method on the remaining elements \n\treverse_stack(stack) \n\n\t# Push the poped element to the bottom of the stack \n\tinsert_at_bottom(stack, temp) \n\n\treturn stack\n\ndef insert_at_bottom(stack, item): \n\tif len(stack) == 0: \n\t\tstack.append(item) \n\t\n\telse: \n\t\ttemp = stack.pop() \n\t\tinsert_at_bottom(stack, item) \n\t\tstack.append(temp)", "category": "Python"}, {"instruction": "Create a function that will add two numbers (represented as linked lists)", "input": "Linked lists: list1 = [2, 4, 3] and list2 = [5, 6, 4]", "output": "def add_numbers(list1, list2): \n    start = result = ListNode(0)\n    carry = 0\n\n    # Iterate both Lists until the end \n    while list1 or list2 or carry: \n        val1 = 0\n        val2 = 0\n\n        # If l1 is not None, add data\n        if list1: \n            val1 = list1.data \n            list1 = list1.next \n\n        # If l2 is not None, add data\n        if list2: \n            val2 = list2.data \n            list2 = list2.next \n\n        # Calculate sum\n        total = val1 + val2 + carry \n\n        # Update result list present node\n        result.next = ListNode(total % 10) \n        result = result.next \n        carry = total // 10\n  \n    # Return head node of the result list \n    return start.next", "category": "Python"}, {"instruction": "Create code that given two binary search trees, determine if they are identical", "input": "Two Binary Search Trees: Tree1 and Tree2", "output": "def are_identical(Tree1, Tree2): \n    # Both trees are empty \n    if Tree1==None and Tree2==None: \n        return True\n  \n    # If only one of them is empty \n    if (Tree1==None or Tree2==None): \n        return False\n  \n    # Both non-empty, compare the data and \n    # recur for left and right sub-tree \n    if (Tree1.data==Tree2.data and \n        are_identical(Tree1.left, Tree2.left)and\n        are_identical(Tree1.right, Tree2.right)): \n        return True \n    else: \n        return False", "category": "Python"}, {"instruction": "Create code to find the longest subarray with equal number of 0's and 1's", "input": "list = [0, 0, 1, 0, 1, 0, 0, 1]", "output": "def longest_subarray(arr): \n    # Stores index of previos zero \n    prev_zero = -1 \n  \n    # Stores index and length of longest subarray with equal 0 and 1 \n    max_len = 0\n    start_index = 0\n  \n    # Traverse the given array \n    for i in range(len(arr)): \n        # Update previous zero \n        if arr[i] == 0: \n            prev_zero = i \n  \n        # Calculate difference b/w current and previous zero \n        diff = i - prev_zero \n  \n        # Update max_len if required \n        if (diff > max_len): \n            max_len = diff \n            start_index = prev_zero + 1\n  \n    # Return longest sub-array \n    return arr[start_index:start_index + max_len]", "category": "Python"}, {"instruction": "Create code that, given a string, returns the longest permutation of the same character", "input": "str = \"abcccdef\"", "output": "def longest_consecutive_character(str):\n\t# Store character, length of longest permutation, and current length\n    max_char = str[0]\n    max_length = 1\n    cur_length = 1\n    \n    # Iterate over the string\n    for i in range(1, len(str)):\n        # If the characters are the same\n        if str[i] == str[i-1]:\n            cur_length += 1\n            \n            # Check if the current permutation is longest\n            if cur_length > max_length:\n                max_char = str[i]\n                max_length = cur_length\n        # Reset count if character changes\n        else: \n            cur_length = 1\n    \n    return max_char, max_length", "category": "Python"}, {"instruction": "Create a virtual machine using Terraform.", "input": "", "output": "resource \"azurerm_resource_group\" \"example\" {\n  name     = \"example-resources\"\n  location = \"westus2\"\n}\n\nresource \"azurerm_virtual_machine\" \"example\" {\n  name                  = \"example-vm\"\n  location              = azurerm_resource_group.example.location\n  resource_group_name   = azurerm_resource_group.example.name\n  vm_size               = \"Standard_DS2_v2\"\n  storage_image_reference {\n    publisher = \"Canonical\"\n    offer     = \"UbuntuServer\"\n    sku       = \"16.04-LTS\"\n    version   = \"latest\"\n  }\n  storage_os_disk {\n    name              = \"myosdisk1\"\n    caching           = \"ReadWrite\"\n    create_option     = \"FromImage\"\n    disk_size_gb      = \"30\"\n  }\n  os_profile {\n    computer_name  = \"hostname\"\n    admin_username = \"username\"\n    admin_password = \"secure_password\"\n  }\n  os_profile_linux_config {\n    disable_password_authentication = false\n  }\n  tags = {\n    environment = \"Production\"\n  }\n}", "category": "Python"}, {"instruction": "Create a function that will find the maximum length of increasing subarray in a list", "input": "list = [2, 3, 3, 1, 4, 5, 8, 4]", "output": "def longest_increasing_subarray(arr):\n    max_length = 1\n    curr_length = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            curr_length += 1\n        else:\n            if curr_length > max_length:\n                max_length = curr_length\n            curr_length = 1\n    \n    if curr_length > max_length:\n        max_length = curr_length\n    \n    return max_length", "category": "Python"}, {"instruction": "Edit this code so that it can marshall a json object", "input": "import json\ndata = {\n    \"name\": \"John Doe\",\n    \"age\": 30\n}", "output": "import json\n\ndata = {\n    \"name\": \"John Doe\",\n    \"age\": 30\n}\n\nmarshalled_data = json.dumps(data)", "category": "Python"}, {"instruction": "Create code that given two linked lists, determine if they intersect", "input": "Two linked lists: list1 = [3, 7, 8, 10] and list2 = [99, 1, 8, 10]", "output": "def are_lists_intersect(list1, list2): \n  \n    # Set pointer to head node \n    temp1 = list1 \n    temp2 = list2 \n  \n    # Get lengths \n    list1_length = 0\n    list2_length = 0\n  \n    # Count length for each list \n    while (temp1): \n        list1_length += 1\n        temp1 = temp1.next\n  \n    while (temp2): \n        list2_length += 1\n        temp2 = temp2.next\n  \n    # Store longer list in tem1 \n    if list1_length > list2_length: \n        temp1 = list1 \n        temp2 = list2 \n    else: \n        temp1 = list2 \n        temp2 = list1 \n  \n    # Take difference to get number of nodes to \n    # traverse for longer list \n    diff = abs(list1_length - list2_length) \n  \n    # Move pointer for longer list to  \n    # difference node to get same position \n    # node in both list \n    for i in range(diff): \n        temp1 = temp1.next\n  \n    # Move all pointer together till they meet \n    while(temp1 and temp2): \n        if (temp1 == temp2): \n            return True\n  \n        temp1 = temp1.next\n        temp2 = temp2.next\n  \n    # Return false if no common node found \n    return False", "category": "Python"}, {"instruction": "Fix this indentation error in the following Python code", "input": "def double(number):\n return number * 2", "output": "def double(number):\n    return number * 2", "category": "Python"}, {"instruction": "What data structure is most appropriate for fast searches?", "input": "", "output": "A hash table is the most appropriate data structure for fast searches.", "category": "Python"}, {"instruction": "Create a function that prints a provided message 3 times", "input": "message = \"Hello World!\"", "output": "def print_message(message): \n for i in range(3): \n  print(message)", "category": "Python"}, {"instruction": "Create a function to add three numbers together", "input": "", "output": "def add_three(n1, n2, n3): \n  return n1 + n2 + n3", "category": "Python"}, {"instruction": "Determine the time complexity of the code given below as a function of n.", "input": "def foo(A, n): \n    if n == 1: \n        return A[0] \n    else: \n        return foo(A, n - 1) + A[n - 1]", "output": "O(n)", "category": "Python"}, {"instruction": "Create code that will reverse the order of elements in this list.", "input": "list = [1, 2, 3, 4]", "output": "def reverse_list(list): \n    start = 0\n    end = len(list) - 1\n    while start < end: \n        list[start], list[end] = list[end], list[start] \n        start += 1\n        end -= 1\n    return list", "category": "Python"}, {"instruction": "Create a function to decrypt an encrypted string.", "input": "", "output": "def decrypt(enc_string):\n    s = 0\n    decrypted = ''\n \n    for i in range(len(enc_string)):\n        s += ord(enc_string[i])\n        decrypted += chr(s)\n \n    return decrypted", "category": "Python"}, {"instruction": "Write an SQL query to find all the records in a given table that have a price greater than $1000.", "input": "Table name: Orders\nFields: price (decimal), item_name (string)", "output": "SELECT *\nFROM Orders\nWHERE price > 1000;", "category": "Python"}, {"instruction": "Construct a for loop in Python to find the sum of all the the numbers between 15 and 30 (inclusive).", "input": "", "output": "total_sum = 0 \nfor num in range(15, 31): \n    total_sum += num \nprint(total_sum)", "category": "Python"}, {"instruction": "Create a database schema for managing authentication users.", "input": "", "output": "CREATE TABLE users (\n\tid SERIAL PRIMARY KEY,\n\tusername VARCHAR NOT NULL UNIQUE,\n\tpassword VARCHAR NOT NULL,\n\tcreated_at TIMESTAMP NOT NULL DEFAULT NOW()\n);", "category": "Python"}, {"instruction": "Calculate the number of seconds in a day.", "input": "", "output": "seconds_in_day = 24 * 60 * 60", "category": "Python"}, {"instruction": "Create a function that compares two numbers and returns 'lower', 'higher', or 'equal' based on the comparison.", "input": "", "output": "def compare_numbers(num1, num2):\n    if num1<num2:\n        return 'lower'\n    elif num1>num2:\n        return 'higher'\n    else:\n        return 'equal'", "category": "Python"}, {"instruction": "Design a class that stores the data of an individual employee", "input": "", "output": "class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary\n\n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n\n    def get_salary(self):\n        return self.salary", "category": "Python"}, {"instruction": "Rewrite the following expression using an if-else statement.", "input": "x = 5\nif x > 4: \n    print('x is greater than 4')", "output": "x = 5\nif x > 4:\n    print('x is greater than 4')\nelse:\n    print('x is not greater than 4')", "category": "Python"}, {"instruction": "Using a conditional statement, print a message depending on the day of the week.", "input": "day_of_week = \"Thursday\"", "output": "if day_of_week == \"Monday\":\n    print(\"It's Monday\")\nelif day_of_week == \"Tuesday\":\n    print(\"It's Tuesday\")\nelif day_of_week == \"Wednesday\":\n    print(\"It's Wednesday\")\nelif day_of_week == \"Thursday\":\n    print(\"It's Thursday\")\nelif day_of_week == \"Friday\":\n    print(\"It's Friday\")\nelif day_of_week == \"Saturday\":\n    print(\"It's Saturday\")\nelif day_of_week == \"Sunday\":\n    print(\"It's Sunday\")", "category": "Python"}, {"instruction": "Write a statement which checks whether a number is within a given range.", "input": "number = 7\nmin_range = 5\nmax_range = 10", "output": "if (number >= min_range) and (number <= max_range):\n    print(\"The number is within the given range.\")", "category": "Python"}, {"instruction": "Write a function that takes an array and prints every element in a single line.", "input": "my_array = [1, 2, 3]", "output": "def print_array(arr):\n    for element in arr:\n        print(element, end=' ')", "category": "Python"}, {"instruction": "Construct a JSON structure from its respective python dictionaries", "input": "a = {\n  \"name\": \"John\",\n  \"age\": 32\n}\n\nb = {\n  \"cars\": [\"Ford\", \"BMW\", \"Fiat\"]\n}", "output": "import json\n\ndata = {**a, **b}\njson_data = json.dumps(data)", "category": "Python"}, {"instruction": "Make a simple program that adds two numbers.", "input": "", "output": "# Take the input from user\nnum1 = int(input(\"Enter number 1: \"))\nnum2 = int(input(\"Enter number 2: \"))\n\n# Add the numbers\nsum = num1 + num2\n\n# Print the result\nprint(\"The sum is: \" + str(sum))", "category": "Python"}, {"instruction": "Convert the given matrix into a comma-separated values (CSV) format.", "input": "[[1, 2, 3], \n [4, 5, 6], \n [7, 8, 9]]", "output": "1,2,3\n4,5,6\n7,8,9", "category": "Python"}, {"instruction": "Translate the provided sentence into Pig Latin.", "input": "The cat jumped over the box.", "output": "eThay atcay jumpeday overay ethay oxbay.", "category": "Python"}, {"instruction": "Explain in a sentence the concept of proxy objects.", "input": "", "output": "A proxy object is an intermediary object that is responsible for managing access to a target object or service to protect it from unauthorized access.", "category": "Python"}, {"instruction": "Using the provided class, add a new method to print the age of employees.", "input": "class Employee: \n    def __init__(self, name, age): \n        self.name = name\n        self.age = age", "output": "class Employee: \n    def __init__(self, name, age): \n        self.name = name\n        self.age = age \n\n    def get_age(self): \n        print(self.age)", "category": "Python"}, {"instruction": "Construct a regular expression pattern to match a specific set of strings.", "input": "Match the following strings: \nApple, Bananas, Oranges", "output": "^(Apple|Bananas|Oranges)$", "category": "Python"}, {"instruction": "Pass the following JSON array to an AJAX request.", "input": "[{\"name\":\"John\", \"age\":21}, {\"name\":\"Dave\", \"age\":25}]", "output": "$.ajax({\n  url: 'url',\n  type: 'POST',\n  contentType: 'application/json',\n  data: JSON.stringify([{\"name\":\"John\", \"age\":21}, {\"name\":\"Dave\", \"age\":25}])\n});", "category": "Python"}, {"instruction": "Change the value of the third element in the following array.", "input": "int[] arr = {1, 3, 4, 5};", "output": "arr[2] = 10;", "category": "Python"}, {"instruction": "Write CSS code to separate the sidebar from the content by a horizontal line.", "input": "", "output": "#sidebar {\n  border-bottom: 1px solid black;\n}\n\n#content {\n  border-top: 1px solid black;\n}", "category": "Python"}, {"instruction": "Create a route for a REST API to retrieve a list of all books.", "input": "", "output": "app.get('/books', (req, res) => {\n  // retrieve list of books from database\n  res.json(books);\n});", "category": "Python"}, {"instruction": "Write a function in Python to encourage user input by prompting the user \"Please enter a valid email address.\"", "input": "", "output": "def get_email(): \n  email = input(\"Please enter a valid email address: \")\n  return email", "category": "Python"}, {"instruction": "Explain what the \"continue\" statement does.", "input": "", "output": "The \"continue\" statement is used to skip the current iteration of a loop and continue with the next iteration. It is commonly used to ignore certain items in a list or when the program should take a different action based on a particular condition.", "category": "Python"}, {"instruction": "Define what a global variable is.", "input": "", "output": "A global variable is a variable that is accessible and can be modified in any part of a program. It is not limited to the scope of any particular function.", "category": "Python"}, {"instruction": "Given two lists, create a function that finds the common elements between the two lists.", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [2, 3, 4, 6, 7]", "output": "def find_common(list1, list2):\n    common_elems = []\n    for elem in list1:\n        if elem in list2:\n            common_elems.append(elem)\n    return common_elems", "category": "Python"}, {"instruction": "Create an if-else statement that prints \"Welcome!\" if the input is \"John\" and \"Goodbye!\" if the input is \"Caroline\".", "input": "", "output": "if name == \"John\":\n    print(\"Welcome!\")\nelse:\n    print(\"Goodbye!\")", "category": "Python"}, {"instruction": "Write a Java method to decide if one point is inside a given rectangle or not.", "input": "", "output": "public static boolean isPointInsideRectangle(Point p, Rectangle r) {\n    return (p.getX() <= r.getMaxX() && p.getX() >= r.getMinX() \n            && p.getY() <= r.getMaxY() && p.getY() >= r.getMinY());\n}", "category": "Python"}, {"instruction": "Edit the following HTML page to add a table with three rows and two columns.", "input": "<!-- HTML page -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title>Table Example</title>\n</head>\n<body>\n\n</body>\n</html>", "output": "<!-- Edited HTML page -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title>Table Example</title>\n</head>\n<body>\n  <table>\n   <tr>\n    <th>First Header</th>\n    <th>Second Header</th>\n   </tr>\n   <tr>\n    <td>Row 1, Cell 1</td>\n    <td>Row 1, Cell 2</td>\n   </tr>\n   <tr>\n    <td>Row 2, Cell 1</td>\n    <td>Row 2, Cell 2</td>\n   </tr>\n  </table>\n</body>\n</html>", "category": "Python"}, {"instruction": "how to implement a recursive function for computing Fibonacci numbers?", "input": "max_num = 5", "output": "def Fibonacci(n):\n    if n==0 or n==1:\n        return n \n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)\n\ndef Fibonacci_Series(max_num):\n    for n in range(max_num+1):\n        print(Fibonacci(n))\n\n# Output: 0 1 1 2 3 5", "category": "Python"}, {"instruction": "Create a Python class 'Calculator' with two methods: 'add' and 'sub'.", "input": "", "output": "class Calculator:\n def add(self, x, y):\n  return x + y\n\n def sub(self, x, y):\n  return x - y", "category": "Python"}, {"instruction": "Explain the concept of classes and objects in Java.", "input": "", "output": "Classes in Java are user-defined templates for creating objects. A class specifies the data and behavior associated with any objects created from it. An object is an instance of a class which contains its own set of attributes and methods. Objects can interact with each other\u2019s attributes and methods. Classes and objects are the fundamental components of object-oriented programming.", "category": "Python"}, {"instruction": "Create an object in JavaScript to save the particular book detail.", "input": "Title: Lord of the Rings\nAuthor: J.R.R. Tolkien", "output": "let book = { \n    title: 'Lord of the Rings', \n    author: 'J.R.R. Tolkien'\n};", "category": "Python"}, {"instruction": "Given a word, remove all the vowels from it in C.", "input": "", "output": "void remove_vowels(char *s) \n{ \n    for (int i = 0; s[i] != '\\0'; i++) \n    { \n        if (s[i] == 'a' || s[i] == 'A' || s[i] == 'e' || s[i] == 'E' || s[i] == 'i' || s[i] == 'I' || s[i] == 'o' || s[i] == 'O' || s[i] == 'u' || s[i] == 'U') \n        { \n            for (int j = i; s[j] != '\\0'; ++j) {\n                s[j] = s[j+1]; \n            } \n        } \n    } \n}", "category": "Python"}, {"instruction": "Find the data type of the variable x in the following JavaScript code snippet?", "input": "let x = \"Hello World\";", "output": "String.", "category": "Python"}, {"instruction": "Edit the given function in Python to convert the given list of integers a into a multidimensional list of size len(a) X len(a).", "input": "def convert_to_multi(a):\n    return [a]", "output": "def convert_to_multi(a):\n    result = []\n    for i in range(len(a)):\n        row = []\n        for j in range(len(a)):\n            row.append(a[j])\n        result.append(row)\n    return result", "category": "Python"}, {"instruction": "Write a function to implement heap sort in JavaScript.", "input": "", "output": "function heapSort(arr) {\n let n = arr.length;\n \n for (let i = Math.floor(n / 2 - 1); i >= 0; i--) {\n heapify(arr, n, i);\n }\n \n for (let i = n - 1; i > 0; i--) {\n [arr[0], arr[i]] = [arr[i], arr[0]];\n heapify(arr, i, 0);\n }\n \n return arr;\n}\n\nfunction heapify(arr, n, i) {\n let largest = i;\n let left = 2 * i + 1;\n let right = 2 * i + 2;\n\n if (left < n && arr[left] > arr[largest])\n largest = left;\n \n if (right < n && arr[right] > arr[largest])\n largest = right;\n \n if (largest !== i) {\n [arr[i], arr[largest]] = [arr[largest], arr[i]];\n heapify(arr, n, largest);\n }\n}", "category": "Python"}, {"instruction": "Identify the programming language of the sample code snippet.", "input": "def find_average(numbers):\n sum = 0\n for num in numbers:\n sum += num\n return sum / len(numbers)", "output": "Python.", "category": "Python"}, {"instruction": "Generate an SQL query to select product names and prices that are greater than $50.", "input": "", "output": "SELECT product_name, price \nFROM products \nWHERE price > 50;", "category": "Python"}, {"instruction": "Create a program which finds patterns in a stream of numbers and prints out the start of the pattern.", "input": "87, 88, 89, 87, 88, 89, 87, 88, 89", "output": "Pattern detected: 87, 88, 89.  Starting at index 0.", "category": "Python"}, {"instruction": "Construct a lambda function to filter a given list based on a given predicate.", "input": "numbers = [1, 2, 3, 4, 5, 6]\npredicate = lambda x: x % 2 == 0", "output": "filtered_list = list(filter(predicate, numbers)) #=> [2, 4, 6]", "category": "Python"}, {"instruction": "In a given list, replace the even numbers by their square.", "input": "[1, 2, 3, 4, 5, 6]", "output": "def even_nums_square(nums): \n    for i in range(len(nums)): \n        # check for even number \n        if nums[i] % 2 == 0: \n            # square the number \n            nums[i] = nums[i] * nums[i] \n    return nums", "category": "Python"}, {"instruction": "Convert the following JS code from a callback to a promise.", "input": "function downloadData(url, callback) {\n  // Code to download data\n  if (/* success */) {\n    callback(null, data)\n  } else {\n    callback(err, null)\n  }\n}", "output": "function downloadData(url) {\n  return new Promise((resolve, reject) => {\n    // Code to download data\n    if (/* success */) {\n      resolve(data)\n    } else {\n      reject(err)\n    }\n  })\n}", "category": "Python"}, {"instruction": "Write a Bash script for downloading a web page from the internet.", "input": "", "output": "#!/bin/bash\n\nif [ -z $1 ]; then\n  echo \"Please provide a URL as an argument\"\nelse\n  curl -O $1\nfi", "category": "Python"}, {"instruction": "Write an algorithm in Python to find the number of distinct words in a given sentence.", "input": "\"This is a test sentence.\"", "output": "def count_distinct_words(sentence):\n    distinct_words = set([word.lower() for word in sentence.split()])\n    return len(distinct_words)\n    \nprint(count_distinct_words(\"This is a test sentence.\")) # Outputs: 4", "category": "Python"}, {"instruction": "Create a function which takes two parameters and returns true if the second parameter is a power of the first parameter.", "input": "x = 16\ny = 4", "output": "def is_a_power_of(x, y):\n    if x == y:\n        return True\n\n    if x > y and y != 0:\n        return is_a_power_of(x/y, y) \n    else:\n        return False\n\npower_of = is_a_power_of(x, y)", "category": "Python"}, {"instruction": "Implement a k-nearest neighbors algorithm to predict point labels.", "input": "", "output": "# k-nearest neighbor algorithm\ndef knn(k, data, targets, query):\n    # find k nearest neighbors of the query\n\tindices = get_neighbors(k, data, query)\n\t\n\t# find most common label among the neighbors\n\tcounts = {}\n\tfor index in indices:\n\t\tlabel = targets[index]\n\t\tcounts[label] = counts.get(label, 0) + 1\n\t\n\t# from the most to the least occurring \n\tlabels = sorted(counts, key=counts.get, reverse=True)\n\treturn labels[0]", "category": "Python"}, {"instruction": "Create a Java program that removes duplicate elements from an array.", "input": "int arr[] = {12, 11, 12, 11, 13, 11};", "output": "import java.util.HashSet;\n\npublic class RemoveDuplicates {\n public static int[] removeDuplicates(int arr[]) \n    { \n        // HashSet for removing duplicates\n        HashSet<Integer> set = new HashSet<>();\n  \n        // adding elements to HashSet \n        for(int i=0; i<arr.length; i++) \n            set.add(arr[i]); \n  \n        // Converting HashSet to array\n        int i=0;\n        int new_arr[] = new int[set.size()];\n        for (Integer val : set)  \n            new_arr[i++] = val; \n        return new_arr; \n    } \n}", "category": "Python"}, {"instruction": "Write a SQL query to select the names of all the students from the table \"students\".", "input": "", "output": "SELECT name FROM students;", "category": "Python"}, {"instruction": "Write a function in Python to print out the elements of a given array in reverse order.", "input": "array = [1,2,3,4,5];", "output": "def reverse_array(array): \n  for i in reversed(array): \n    print(i) \n\nreverse_array(array); // Output: 5,4,3,2,1", "category": "Python"}, {"instruction": "Write a Java method to insert a given string at the beginning of every word in a given sentence.", "input": "String sentence = \"The quick brown fox jumps over the lazy dog\";", "output": "String addPrefix(String sentence, String prefix) { \n  String[] words = sentence.split(\" \"); \n  StringBuilder sb = new StringBuilder(); \n\n  for (String word: words) { \n    sb.append(prefix + word + \" \"); \n  } \n  return sb.toString(); \n}\n\naddPrefix(sentence, \"The\"); // Output: \"TheThe quick Thebrown Thefox Thejumps Theover Thethe Thelazy Thedog\"", "category": "Python"}, {"instruction": "Create an HTML input form to collect user information.", "input": "", "output": "<form action=\"\">\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" name=\"name\">\n  <br>\n  <label for=\"email\">Email:</label>\n  <input type=\"email\" name=\"email\">\n  <br>\n  <label for=\"age\">Age:</label>\n  <input type=\"number\" name=\"age\" min=\"1\" max=\"99\">\n  <br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Write a C# code to print an array in reverse order.", "input": "int[] numbers = {1,2,3,4};", "output": "public static void printArrayInReverse(int[] arr) { \n  Console.WriteLine(\"Array in reverse order: \");\n  for (int i = arr.Length-1; i >= 0; i--) {\n    Console.Write(arr[i] + \" \");\n  } \n}", "category": "Python"}, {"instruction": "Construct a Bash script to display the current date and time.", "input": "", "output": "#!/bin/bash\necho \"Today's date and time: $(date '+%Y-%m-%d %H:%M:%S')\"", "category": "Python"}, {"instruction": "Create an Angular component that displays information about a user.", "input": "const user = { \n  id: 1, \n  name: 'Bob', \n  age: 23, \n  email: 'bob@example.com'\n};", "output": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-user-info',\n  template: `\n    <div>\n      <p>ID: {{ user.id }}</p>\n      <p>Name: {{ user.name }}</p>\n      <p>Age: {{ user.age }}</p>\n      <p>Email: {{ user.email }}</p>\n    </div>\n  `\n})\nexport class UserInfoComponent implements OnInit {\n\n  user = {\n    id: 1,\n    name: 'Bob',\n    age: 23,\n    email: 'bob@example.com'\n  };\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}", "category": "Python"}, {"instruction": "Create a Node.js web server that takes a POST request and returns a string encoded in JSON.", "input": "", "output": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  if (req.method === 'POST') {\n    let body = '';\n    req.on('data', function (data) {\n      body += data;\n    });\n\n    req.on('end', function () {\n      res.writeHead(200, {'Content-Type': 'application/json'});\n      res.end(JSON.stringify({message: body}));\n    });\n  }\n});\n\nserver.listen(8100);", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to sum all the elements of an array.", "input": "array = [1,2,3,4,5];", "output": "function sumArray(array){\n  let sum = 0;\n  for (let i=0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n}\n\nsumArray(array); // Output: 15", "category": "Python"}, {"instruction": "Write a Java program to print the Fibonacci sequence up to the limit of n.", "input": "n = 10", "output": "public class Fibonacci { \n    public static void main(String[] args) { \n        int n = 10; \n        int num1=0, num2=1;\n        System.out.print(\"Fibonacci Series of \"+n+\" numbers:\");\n \n        for (int i = 1; i <= n; ++i) {\n            System.out.print(num1+\" \");\n            int sumOfPrevTwo = num1 + num2;\n            num1 = num2;\n            num2 = sumOfPrevTwo;\n        }\n    } \n}\n\n// Output: Fibonacci Series of 10 numbers: 0 1 1 2 3 5 8 13 21 34", "category": "Python"}, {"instruction": "Create a variable to store the age of a person and print a corresponding message.", "input": "age = 20", "output": "age = 20\nprint(f\"The age of the person is {age}.\")", "category": "Python"}, {"instruction": "Given a BST, write a function to find the number of values greater than the root node.", "input": "25 \n   /    \\          \n  15     35\n /  \\    /  \\ \n10  20  30  40", "output": "def count_values_greater_than_root(root):\n    count = 0\n    if root.right:\n        count += 1 + count_values_greater_than_root(root.right)\n    if root.left:\n        count += count_values_greater_than_root(root.left)\n    return count", "category": "Python"}, {"instruction": "Write a Java method that takes two numbers and returns the sum of them.", "input": "", "output": "public static int addNumbers(int a, int b) {\n return a + b;\n}", "category": "Python"}, {"instruction": "Create a SQL query that prints a list of customers and the total amount they have purchased.", "input": "Table 1: Customer\n-   Name\n-   Address\n\nTable 2: Order\n-   Customer Name\n-   Order Amount", "output": "SELECT c.Name, SUM(o.OrderAmount) AS TotalPurchased \nFROM Customer c \nLEFT JOIN Order o ON c.Name = o.CustomerName \nGROUP BY c.Name", "category": "Python"}, {"instruction": "Create a Keras model that can classify between two classes.", "input": "", "output": "from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\n\nnum_classes = 2\n\nmodel = Sequential()\nmodel.add(Dense(32, activation='relu', input_shape=(10,)))\nmodel.add(Dense(num_classes, activation='softmax'))\n\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])", "category": "Python"}, {"instruction": "Produce an output string with the first two letters of the words in the given string capitalized.", "input": "string = \"hello world\"", "output": "def capitalized(string):\n    \"\"\"\n    This function takes a string as a parameter and returns a new string with the first two letters of the words in the string capitalized.\n    \"\"\"\n    output_string = \"\"\n    words = string.split()\n    for word in words:\n        output_string += word[0].upper() + word[1].upper() + word[2:] + \" \"\n    return output_string.strip()\n\nprint(capitalized(string)) # prints \"HeLlO WoRlD\"", "category": "Python"}, {"instruction": "Create a game of rock-paper-scissors using functions and conditionals.", "input": "", "output": "def play_game():\n    \"\"\"\n    This function is a game of rock-paper-scissors.\n    \"\"\"\n    import random\n    player_input = input(\"Choose rock(r), paper(p) or scissors(s): \")\n    computer_choice = random.choice([\"r\", \"p\", \"s\"])\n    if player_input == computer_choice:\n        return \"It is a draw\"\n    elif player_input == \"r\":\n        if computer_choice == \"p\":\n            return \"Computer Wins!\"\n        else:\n            return \"Player Wins!\"\n    elif player_input == \"p\":\n        if computer_choice == \"s\":\n            return \"Computer Wins!\"\n        else:\n            return \"Player Wins!\"\n    elif player_input == \"s\":\n        if computer_choice == \"r\":\n            return \"Computer Wins!\"\n        else:\n            return \"Player Wins!\"\n    else:\n        return \"Invalid input\"\n\nprint(play_game())", "category": "Python"}, {"instruction": "Algorithmically classify a given word as either a verb (action word) or a noun (object).", "input": "word = \"write\"", "output": "def classify_word(word):\n    \"\"\"\n    This function takes a word as a parameter and returns its classification - verb or noun.\n    \"\"\"\n    if word in [\"run\", \"jump\", \"swim\"]:\n        return \"verb\"\n    else: \n        return \"noun\"\n\nprint(classify_word(\"write\")) # prints \"verb\"", "category": "Python"}, {"instruction": "Analyze the given list and return the index of the first occurrence of the number 7.", "input": "numbers = [1, 2, 3, 5, 4, 7, 9, 8, 7]", "output": "numbers = [1, 2, 3, 5, 4, 7, 9, 8, 7]\n\ndef find_index(lst):\n    \"\"\"\n    This function takes a list of numbers as a parameter and returns the index of the first occurrence of the number 7.\n    \"\"\"\n    for i in range(len(lst)):\n        if lst[i] == 7:\n            return i\n        \nprint(find_index(numbers)) # prints 5", "category": "Python"}, {"instruction": "Write a code to implement a basic calculator to add two numbers.", "input": "", "output": "def add_numbers(num1, num2):\n    \"\"\"\n    This function takes two numbers as parameters and returns their sum.\n    \"\"\"\n    return num1 + num2 \n\nif __name__ == \"__main__\":\n    num1 = float(input(\"Enter first number: \"))\n    num2 = float(input(\"Enter second number: \"))\n    print(add_numbers(num1, num2))", "category": "Python"}, {"instruction": "Create a function which takes two strings as parameters and return the concatenating of the two strings.", "input": "string_1 = \"hello\"\nstring_2 = \"world\"", "output": "def concatenate_strings(s1, s2):\n    \"\"\"\n    This function takes two strings as parameters and returns the concatenation of the two strings.\n    \"\"\"\n    return s1 + s2\n\nprint(concatenate_strings(string_1, string_2)) # prints \"helloworld\"", "category": "Python"}, {"instruction": "Based on the given input, generate a new list with its elements in reverse order.", "input": "my_list = [1,2,3,4,5]", "output": "new_list = my_list[::-1]\nprint(new_list) # prints [5,4,3,2,1]", "category": "Python"}, {"instruction": "Add a loop to the code to print out the numbers from 10 to 0.", "input": "for i in range(10):\n    print(i)", "output": "for i in range(10, 0, -1):\n    print(i)", "category": "Python"}, {"instruction": "Write a CSS style sheet for displaying a two-column table.", "input": "", "output": "table {\n  width: 100%; \n  border-collapse: collapse;\n}\n\ntd, th {\n  border: 1px solid #dddddd;\n  text-align: left;\n  padding: 8px;\n}\n\ntr:nth-child(even) {\n  background-color: #dddddd;\n}", "category": "Python"}, {"instruction": "Construct a SQL query to get the number of orders placed by each customer.", "input": "Orders table:\n+----+------------+---------+\n| id | order_no   | emp_id  |\n+----+------------+---------+\n| 1  | A001       | 1       |\n| 2  | A002       | 3       |\n| 3  | A003       | 2       |", "output": "SELECT COUNT(order_no) AS Orders, emp_id FROM Orders GROUP BY emp_id;", "category": "Python"}, {"instruction": "Compare two given strings and print the differences between them.", "input": "String1: This is a sentence.\nString2: This is not a sentence.", "output": "String1: This is a sentence.\nString2: This is not a sentence.\nDifferences: \nString1: 'a sentence.'\nString2: 'not a sentence.'", "category": "Python"}, {"instruction": "Find the prime factorization of the given number.", "input": "90", "output": "2 x 3 x 3 x 5", "category": "Python"}, {"instruction": "Create a CSS rule to align a paragraph text to the center of the page.", "input": "", "output": "p {\n text-align: center;\n}", "category": "Python"}, {"instruction": "Write a Node.js function that takes an array and returns the maximum value.", "input": "", "output": "function getMaxVal(arr) {\n let maxVal = arr[0];\n for (let i = 1; i < arr.length; i++) {\n if (arr[i] > maxVal) {\n maxVal = arr[i];\n  }\n }\n return maxVal;\n}", "category": "Python"}, {"instruction": "Create an HTML form that contains a text box and a submit button.", "input": "", "output": "<form>\n <input type=\"text\" name=\"inputText\">\n <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Create a MySQL query to find all orders in the last month.", "input": "Table: Order\n-   Date", "output": "SELECT * FROM Order\nWHERE Date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);", "category": "Python"}, {"instruction": "Design a basic linked list structure for storing integers.", "input": "", "output": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.length = 0\n\n    def isEmpty(self):\n        return self.head == None\n    \n    def insert(self, value):\n        node = Node(value)\n        node.next = self.head\n        self.head = node\n        self.length += 1\n        \n    def getSize(self):\n        return self.length", "category": "Python"}, {"instruction": "Create a HTML code to generate a three-column table from a given JSON object.", "input": "json = {\n \"name\": \"John\",\n \"age\": \"30\",\n \"city\": \"New York\"\n}", "output": "<table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n    <th>City</th>\n  </tr>\n  <tr>\n    <td>John</td>\n    <td>30</td>\n    <td>New York</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "You need to edit a given code in JavaScript to add multiple classes to a div element.", "input": "<div class=\"main-div\"></div>", "output": "<div class=\"main-div main-class second-class third-class\"></div>", "category": "Python"}, {"instruction": "Create a JavaScript code to find the frequency of each character in a string.", "input": "string=\"JavaScript\"", "output": "function getCharFrequencies (str) {\n  let charFreq = {};\n  for (let i = 0; i < str.length; i++) {\n    let char = str[i];\n    if (charFreq[char]) {\n      charFreq[char]++;\n    } \n    else {\n      charFreq[char] = 1;\n    }\n  }\n  return charFreq;\n}\n\nconsole.log(getCharFrequencies(string));", "category": "Python"}, {"instruction": "Create a Python class for a 3\u00d73 matrix.", "input": "", "output": "class Matrix3x3:\n\n    def __init__(self):\n        # Set the default 3x3 matrix values to 0\n        self.matrix = [[0,0,0],[0,0,0],[0,0,0]]\n\n    def set_value(self, x, y, value): \n        # Set the value in the matrix at position x and y\n        self.matrix[x][y] = value\n\n    def get_value(self, x, y): \n        # Get the value in the matrix at position x and y\n        return self.matrix[x][y]\n\n    def multiply_scalar(self, scalar): \n        # Multiply the matrix with a scalar\n        for i in range(3): \n            for j in range(3): \n                self.matrix[i][j] *= scalar", "category": "Python"}, {"instruction": "Create a PHP script to find the factorial of a given integer.", "input": "", "output": "<?php \nfunction factorial($num) { \n    if ($num == 0) { \n        return 1; \n    } \n    else { \n    return $num * factorial($num - 1); \n    } \n} \n  \n$num = 5; \necho \"Factorial of $num is  \" . factorial($num); \n?>", "category": "Python"}, {"instruction": "You need to write a script in Java to reverse a given list of Strings.", "input": "list = [\"John\", \"Alice\", \"Bob\"]", "output": "public class ReverseList {\n    public static void reverseList(List<String> list) \n    {\n        if (list.size() > 1) {\n            String temp = list.get(0);\n            list.remove(0);\n            reverseList(list);\n            list.add(temp);\n        }\n    }\n\n    public static void main(String[] args) \n    { \n        List<String> list = new ArrayList<String>(Arrays.asList(\"John\", \"Alice\", \"Bob\"));\n        reverseList(list);\n        System.out.println(list); \n    } \n}", "category": "Python"}, {"instruction": "Write an HTML form that collects the name, email, and address of a customer.", "input": "", "output": "<form>\n   Name:<br>\n   <input type=\"text\" name=\"name\"><br>\n   Email:<br>\n   <input type=\"email\" name=\"email\"><br>\n   Address:<br>\n   <input type=\"text\" name=\"address\"><br>\n   <input type=\"submit\">\n</form>", "category": "Python"}, {"instruction": "Create a C code to generate simple encryption for a given string.", "input": "string = \"Hello World!\"", "output": "#include <stdio.h>\n#include <string.h>\n\n// Function to encrypt string with simple encryption\nchar* encrypt(const char *str) \n{ \n    int len = strlen(str); \n\n    // Create an output string of size twice \n    char *encryption_str = (char*)malloc(2*len); \n\n    // Store encryption in output string \n    int j=0; \n    for (int i=0; i<len; i++, j++) \n    { \n        encryption_str[j] = (str[i] + 3) % 26; \n        j++; \n        encryption_str[j] = (str[i] + 5) % 26; \n    } \n  \n    // Return the resultant string \n    return encryption_str; \n} \n\nint main()\n{\n\t// Input string\n\tchs tr[] = \"Hello World!\";\n\n\t// Print encrypted string\n\tprintf(\"Encrypted String: %s\\n\", encrypt(str));\n\n\treturn 0;\n}", "category": "Python"}, {"instruction": "Write a Python program to convert all strings in a list to lower case", "input": "", "output": "def convert_to_lowercase(list_of_strings):\n    return [string.lower() for string in list_of_strings]\n\nif __name__ == '__main__':\n    string_list = [\"UPPERCASE\", \"lOwErCaSe\", \"MiXeDcAsE\"]\n    print(convert_to_lowercase(string_list))", "category": "Python"}, {"instruction": "How would you print the contents of a 2D array in Python?", "input": "", "output": "def print_2d_array(arr):\n    for row in arr:\n        for value in row:\n            print(value, end=\" \")\n        print()\n\nif __name__ == '__main__':\n    arr = [[1,2,3], [4,5,6], [7,8,9]]\n    print_2d_array(arr)", "category": "Python"}, {"instruction": "Create a function to iterate a list of strings and print them.", "input": "", "output": "def iterate_strings(string_list):\n    for string in string_list:\n        print(string)\n\nif __name__ == '__main__':\n    string_list = [\"apple\", \"banana\", \"cherry\"]\n    iterate_strings(string_list)", "category": "Python"}, {"instruction": "Implement a function which will take a list of numbers as an input and return a sorted list", "input": "", "output": "def sort_list(numbers):\n    #Base case\n    if len(numbers) <= 1:\n        return numbers\n\n    pivot = numbers[0]\n    left = []\n    right = []\n    #Divide\n    for num in numbers[1:]:\n        if num < pivot:\n            left.append(num)\n        else:\n            right.append(num)\n    #Conquer\n    left = sort_list(left)\n    right = sort_list(right)\n    #Combine\n    return left + [pivot] + right\n\nif __name__ == '__main__':\n    arr = [7, 3, 1, 9, 0]\n    print(sort_list(arr))", "category": "Python"}, {"instruction": "What is the best way to generate a random number in Python?", "input": "", "output": "The best way to generate a random number in Python is to use the random module. The random module provides access to functions  that are used to generate a random number in various distributions such as uniform, normal, exponential, and others.\n\nThe most basic function in random module is the function random(), which generates a random number from range [0, 1).\n\nFor example, the following code will generate a random number from range [1, 10):\n\n    import random\n\n    num = random.random() * 9 + 1  # Generates a random number from range [1, 10)", "category": "Python"}, {"instruction": "Implement a version of your own version of quicksort in Python", "input": "", "output": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    pivot = arr[0]\n    left = []\n    right = []\n\n    for num in arr[1:]:\n        if num < pivot:\n            left.append(num)\n        else:\n            right.append(num)\n\n    return quicksort(left) + [pivot] + quicksort(right)\n\nif __name__ == '__main__':\n    arr = [7, 3, 1, 9, 0]\n    print(quicksort(arr))", "category": "Python"}, {"instruction": "Create a Python program to calculate the product of a list of integers.", "input": "", "output": "def calculate_product(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product\n\nif __name__ == \"__main__\":\n    print(calculate_product([1,2,3,4,5]))", "category": "Python"}, {"instruction": "Suggest a way to count the number of two letter words in a string.", "input": "", "output": "def count_two_letter_words(string):\n    words = string.split()\n    count = 0\n    for word in words:\n        if len(word) == 2:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    string = \"This is a sample string with two letter words.\"\n    print(count_two_letter_words(string))", "category": "Python"}, {"instruction": "Design a URL shortening system where a given URL is converted to an 8 digit alphanumeric string.", "input": "https://www.example.com/", "output": "An 8 digit alphanumeric string can be generated by mapping the given URL to a hash value and then truncating it to 8 characters. For example, the given URL could be mapped to the hash \"d7539b2d\" and the resulting 8 character string could be \"d7539b2d\".", "category": "Python"}, {"instruction": "Create an array of 1000 random integers from 0 to 1000.", "input": "", "output": "function randomIntegers() {\n    let randomIntegers = [];\n    for (let i = 0; i < 1000; i++) {\n        randomIntegers[i] = Math.floor(Math.random() * 1001);\n    }\n    return randomIntegers;\n}\nrandomIntegers(); // Output: [513, 835, 593, 767, ...]", "category": "Python"}, {"instruction": "Convert the given decimal number to binary.", "input": "30", "output": "11110", "category": "Python"}, {"instruction": "Design a program for implementing a linear search algorithm", "input": "[3, 6, 8, 9, 15], 8", "output": "def linear_search(list, item):\n    for i in range(len(list)):\n        if list[i] == item:\n            return i \n    return -1", "category": "Python"}, {"instruction": "Design a program to partition a given list of numbers into two halves.", "input": "[2, 6, 3, 8, 9]", "output": "def partition(list):\n    half_len = len(list)//2\n    left_half = list[:half_len]\n    right_half = list[half_len:]\n    return left_half, right_half", "category": "Python"}, {"instruction": "Request the average temperature of the city 'Boston' from the Weather API.", "input": "", "output": "import requests\ndef get_average_temperature(city):\n    api_url = 'http://api.openweathermap.org/data/2.5/weather?q='+city+'&APPID=your_api_key'\n    response = requests.get(api_url)\n    data = response.json()\n    temp = data['main']['temp']\n    return temp - 273.15", "category": "Python"}, {"instruction": "Create a function that takes a list of words and returns a list of capitalized words.", "input": "['apple', 'orange', 'grape']", "output": "def capitalize_words(words):\n    result = []\n    for word in words:\n        result.append(word.capitalize())\n    return result", "category": "Python"}, {"instruction": "Create a program that will filter out all numbers divisible by 3 from the given list of integers.", "input": "[2, 3, 4, 6, 8, 9, 10, 12]", "output": "def filter_3(nums):\n    result = []\n    for num in nums:\n        if num % 3 != 0:\n            result.append(num)\n    return result", "category": "Python"}, {"instruction": "Write a code to generate a list of common elements from two given lists.", "input": "list_1 = [1, 2, 3, 4]\nlist_2 = [2, 4, 8, 16]", "output": "def common_list(list_1, list_2):\n    output = []\n    for i in list_1:\n        if i in list_2:\n            output.append(i)\n    return output\n\n# Result:\ncommon_list(list_1, list_2)  # [2, 4]", "category": "Python"}, {"instruction": "Compute the Minkowski distance between two lists.", "input": "list_1 = [1, 2, 3]\nlist_2 = [-1, -2, -3]", "output": "def minkowski_distance(list_1, list_2, p):\n    return (sum([abs(x-y)**p for x, y in zip(list_1, list_2)]))**(1/p)\n\n# Result:\nminkowski_distance(list_1, list_2, 3)  # 6.0", "category": "Python"}, {"instruction": "Implement a function that takes a string as a parameter and returns a modified string with the words reversed.", "input": "string = \"This is a sentence.\"", "output": "def reverse_words(sentence):\n    return ' '.join(sentence.split()[::-1])\n\n# Result:\nreverse_words(string)  # \"sentence. a is This\"", "category": "Python"}, {"instruction": "Compute the standard deviation of the given array.", "input": "data = [10, 15, 20, 25, 30]", "output": "import numpy as np\n\ndata = [10, 15, 20, 25, 30]\nstandard_deviation = np.std(data)\nprint(f\"Standard deviation of the given array is {standard_deviation}.\")", "category": "Python"}, {"instruction": "Calculate the average of the numbers in the given list.", "input": "numbers = [2, 10, 15, 20, 25, 30]", "output": "The average of the numbers in the given list is 17.5.", "category": "Python"}, {"instruction": "Perform a linear search on the given array for the target value.", "input": "arr = [2, 7, 4, 8, 10] \ntarget = 8", "output": "def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\nlinear_search(arr, target) # returns 3", "category": "Python"}, {"instruction": "Given input strings s and t, find the length of the longest common substring.", "input": "s = \"abcde\"\nt = \"acfgh\"", "output": "The length of the longest common substring of s and t is 2, since the characters \"a\" and \"c\" are the longest common substring.", "category": "Python"}, {"instruction": "Usage of Global Variable", "input": "", "output": "A global variable is a variable that can accessed by any part of a program. It is created outside any function body and can be used without passing it as an argument or declaring it in the function.", "category": "Python"}, {"instruction": "Write code to parse the given JSON dataset.", "input": "{\n \"name\": \"John\",\n \"age\": 20,\n \"location\": \"Texas\"\n}", "output": "import json\n\ndata = '{\"name\": \"John\", \"age\": 20, \"location\": \"Texas\"}'\ndata = json.loads(data)\nname = data[\"name\"]\nage = data[\"age\"]\nlocation = data[\"location\"]\n\nprint(f\"Name: {name}\")\nprint(f\"Age: {age}\")\nprint(f\"Location: {location}\")", "category": "Python"}, {"instruction": "Generate a random 4-digit PIN number.", "input": "", "output": "The generated random 4-digit PIN number is 8379.", "category": "Python"}, {"instruction": "Obtain the parameter names from a given JavaScript function.", "input": "function sum(x, y, z){\nreturn x + y + z;\n}", "output": "x, y, z", "category": "Python"}, {"instruction": "Write a SQL query to return rows that contain latitude greater than 50.", "input": "", "output": "SELECT * FROM table WHERE latitude > 50;", "category": "Python"}, {"instruction": "Describe what an else clause does in an if statement.", "input": "", "output": "An else clause is used in an if statement as a way to define an alternative block of code that will be executed when the condition of the if statement is not met.", "category": "Python"}, {"instruction": "Construct a loop in Java to traverse over all elements of an array", "input": "int[] numbers = {5, 7, 9, 22};", "output": "for(int i = 0; i < numbers.length; i++){\n    int element = numbers[i];\n    // execute code here\n}", "category": "Python"}, {"instruction": "Create a function that compares two binary strings and returns the number of differences between them.", "input": "string1 = \"100100\"\nstring2 = \"100011\"", "output": "def differences_in_binary_strings(string1, string2):\n  # initialise a variable to store total differences\n  total_differences = 0\n\n  # loop through each digit in the strings\n  for i in range(len(string1)):\n    # check if the digits in the same position in each string are different\n    if string1[i] != string2[i]:\n      # increment the total differences\n      total_differences += 1\n\n  return total_differences", "category": "Python"}, {"instruction": "Create a function to convert a given number of days to years, months, and days.", "input": "", "output": "def convert_days_to_years_months_days(n): \n  years = int(n/365) \n  months = int((n - (years*365))/30) \n  days = int(n - (years*365 + months*30))\n  \n  return (years, months, days)", "category": "Python"}, {"instruction": "Create a function to find the maximum element of a 3x3 matrix.", "input": "myMatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def find_max_element_of_matrix(matrix):\n  # declare a variable to store the max value \n  max = matrix[0][0]\n  \n  # loop through the matrix \n  for row in range(len(matrix)):\n    # loop through each element in the matrix \n    for col in range(len(matrix[row])):\n      # if the elements value is greater then the max value, set the max value to that element \n      if matrix[row][col] > max:\n        max = matrix[row][col]\n  \n  # return the max value\n  return max", "category": "Python"}, {"instruction": "Define a Python class called \u201cPerson\u201d.", "input": "", "output": "class Person:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\n \n  def speak(self, message):\n    print(f\"{self.name} says: {message}\")", "category": "Python"}, {"instruction": "Write a line of code to print the summation of all elements in a list.", "input": "list1 = [1, 2, 3, 4, 5]", "output": "print(sum(list1))", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to display \"Hello World!\" on the webpage.", "input": "", "output": "document.write(\"Hello World!\");", "category": "Python"}, {"instruction": "Build an algorithm to check if a given number is a prime number or not.", "input": "", "output": "def is_prime_number(num):\n    '''This algorithm will check if a given number is a prime number or not.'''\n    if num <= 1:\n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    return True\n\nif __name__ == '__main__':\n    num = 7\n    print(is_prime_number(num))", "category": "Python"}, {"instruction": "What is a stack overflow error and how can it be avoided?", "input": "", "output": "A stack overflow error occurs when too many functions are called or variables are used during the execution of a program, resulting in a stack overflow. This error is caused because the stack memory area is too full, and thus it can't store any more data. It can be avoided by using a larger stack, optimizing code to use less function calls, and using fewer local variables. Additionally, using recursive functions and a language with automatic memory management can help prevent stack overflow errors.", "category": "Python"}, {"instruction": "Design an algorithm to find the longest increasing subsequence in an array.", "input": "input = [9, 8, 4, 12, 2, 10, 6, 14, 1, 16, 3, 11, 5, 15, 7]", "output": "def get_longest_increasing_subsequence(input):\n    '''This algorithm will find the longest increasing subsequence in an array.'''\n    n = len(input)\n    leng = [1]*n\n    for i in range(n):\n        for j in range(i):\n            if(input[i] > input[j] and leng[i] < leng[j] + 1):\n                leng[i] = leng[j]+1\n    max_seq_len = max(leng)\n    max_seq = []\n    for i in range(n):\n        if(leng[i] == max_seq_len):\n            max_seq.append(input[i])\n            max_seq_len -= 1\n    max_seq.reverse()\n    return max_seq\n\nif __name__ == '__main__':\n    input = [9, 8, 4, 12, 2, 10, 6, 14, 1, 16, 3, 11, 5, 15, 7]\n    print(get_longest_increasing_subsequence(input))", "category": "Python"}, {"instruction": "Design and implement an algorithm to add two integers.", "input": "num1 = 4\nnum2 = 5", "output": "def add_integers(num1, num2):\n    '''This function will add two integers.'''\n    return num1 + num2\n\nif __name__ == '__main__':\n    num1 = 4\n    num2 = 5\n    print(add_integers(num1, num2))", "category": "Python"}, {"instruction": "Create a Python function that takes a list of strings and removes any words that include numbers.", "input": "list_of_strings = [\"hello123\", \"world456\", \"foo\", \"bar7\"]", "output": "def remove_numbers_from_list(list_of_strings):\n    '''This function will take a list of strings and remove any words that include numbers.'''\n    modified_list = []\n    for word in list_of_strings:\n        if not any(char.isdigit() for char in word):\n            modified_list.append(word)\n    return modified_list\n    \nif __name__ == '__main__':\n    list_of_strings = [\"hello123\", \"world456\", \"foo\", \"bar7\"]\n    print(remove_numbers_from_list(list_of_strings))", "category": "Python"}, {"instruction": "Retrieve the last character of a given string.", "input": "Programming", "output": "g", "category": "Python"}, {"instruction": "Find the maximum value in a given array of integers.", "input": "[4, 6, 9, 11, 15]", "output": "15", "category": "Python"}, {"instruction": "Create a JavaScript class to represent a rectangle with properties for width and height.", "input": "", "output": "class Rectangle {\n    constructor(width,height) {\n        this.width = width;\n        this.height = height;\n    }\n}", "category": "Python"}, {"instruction": "Transform the following XML code into JSON format.", "input": "<device>\n  <name>iPhone</name>\n  <os>iOS</os>\n  <price>999</price>\n</device>", "output": "{\n    \"device\": {\n        \"name\": \"iPhone\",\n        \"os\": \"iOS\",\n        \"price\": 999\n    }\n}", "category": "Python"}, {"instruction": "Find the mean of the following set of numbers: 10, 20, 30, 40", "input": "", "output": "25", "category": "Python"}, {"instruction": "Create a function to convert an integer to its binary representation.", "input": "num = 15", "output": "def int_to_binary(num):\n    '''This function will convert an integer to its binary representation.'''\n    binary = ''\n    while num > 0:\n        binary += str(num % 2)\n        num //= 2\n    return binary[::-1]\n\nif __name__ == '__main__':\n    num = 15\n    print(int_to_binary(num))", "category": "Python"}, {"instruction": "Create a CSS style sheet to change the font color of an heading to red.", "input": "", "output": "h1 {\n  color: red;\n}", "category": "Python"}, {"instruction": "Create a Python program to create a list of the first 10 prime numbers.", "input": "", "output": "def prime_numbers(n): \n  primes = [2] \n  num = 3\n \n  while len(primes) < n: \n    for i in range(2, num): \n      if (num % i == 0): \n        break\n    else: \n      primes.append(num) \n    num += 1\n  \n  return primes\n\n# Usage\nprint(prime_numbers(10)) # [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]", "category": "Python"}, {"instruction": "Create a recursive algorithm to sum the numbers between 1 and n (inclusive).", "input": "n = 5", "output": "function recSum(n) {\n  if (n === 1) return 1;\n  return n + recSum(n-1);\n}\n\n// Usage\nconsole.log(recSum(5)); // 15", "category": "Python"}, {"instruction": "Edit the given HTML structure to add a container element with the class name \"container\".", "input": "<div id=\"main\">\n  <p>This is the main content</p>\n</div>", "output": "<div id=\"main\">\n  <div class=\"container\">\n    <p>This is the main content</p>\n  </div>\n</div>", "category": "Python"}, {"instruction": "Write a SQL query to identify the employees whose salary is greater than $50k.", "input": "", "output": "SELECT *\nFROM Employees\nWHERE Salary > 50000;", "category": "Python"}, {"instruction": "Create a css style to display a bold, centered header with the text \"Hello World!\"", "input": "", "output": "h1 {\n    font-weight: bold;\n    text-align: center;\n}", "category": "Python"}, {"instruction": "Write a Python function to find the number of odd numbers in the given list.", "input": "[1, 4, 2, 6, 3, 9]", "output": "def countOddNumbers(numbers):\n  odd_numbers = 0\n  for i in numbers:\n    if i % 2 == 1: \n      odd_numbers += 1\n  return odd_numbers\n  \nprint(countOddNumbers([1, 4, 2, 6, 3, 9]))\n# Output: 3", "category": "Python"}, {"instruction": "Use regex to match a substring, 'the' within a sentence.", "input": "The quick brown fox", "output": "regex = /the/\n\nThis regex will match the substring \"the\" in the sentence \"The quick brown fox.\"", "category": "Python"}, {"instruction": "Develop an algorithm to calculate the length of a string.", "input": "", "output": "Algorithm:\n\n1. Input a string.\n2. Initialize a counter to 0.\n3. Iterate through the characters in the string, adding 1 to the counter for each character until the end of the string is reached.\n4. Output the counter.\n\nThe algorithm successfully calculates the length of a given string.", "category": "Python"}, {"instruction": "Create a new array in JavaScript given an existing one and a number.", "input": "[1,2,3,4]", "output": "var newArray = [1,2,3,4];\nvar n = 5;\n\nfor (let i = 0; i < n; i++) {\n newArray.push(i+1);\n}\n\nconsole.log(newArray); // [1,2,3,4,5]", "category": "Python"}, {"instruction": "Identify the data type of '2947'.", "input": "", "output": "The data type of '2947' is an integer.", "category": "Python"}, {"instruction": "Explain static and dynamic dispatch in C++.", "input": "", "output": "In C++, static dispatch is the process of binding a function call to the correct implementation of a function at compile time. This is done by the compiler by analyzing the function call and its arguments, and then choosing the corresponding function definition to use at compile time. This results in faster execution times, since the call is bound to the implementation during compilation instead of during runtime. \n\nDynamic dispatch, on the other hand, is the process of binding a function call to the correct implementation of a function at runtime. This is done by the program at runtime by examining the actual data types of the objects that are used as arguments in the function call and then choosing the appropriate function definition to use. This results in slower execution times, since the function call must be bound at runtime, but it also allows for more flexibility, since the code is not bound to a specific implementation until the program is actually running.", "category": "Python"}, {"instruction": "Design a data structure to find the first and last occurrence of a number in an array.", "input": "array = [1, 5, 7, 8, 8, 10]", "output": "class FindFirstLastOccurrence:\n    def __init__(self, arr):\n        self.arr = arr\n        self.first_occurrence = -1\n        self.last_occurrence = -1\n    \n    def findFirstLastOccurrence(self, k):\n        #Find the first occurrence\n        left = 0\n        right = len(self.arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if self.arr[mid] == k and (mid == 0 or self.arr[mid-1] < k):\n                self.first_occurrence = mid\n                break\n            elif self.arr[mid] < k:\n                left = mid+1\n            else:\n                right = mid-1\n        #Find the last occurrence\n        left = 0\n        right = len(self.arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if self.arr[mid] == k and (mid == len(self.arr)-1 or self.arr[mid+1] > k):\n                self.last_occurrence = mid\n                break\n            elif self.arr[mid] > k:\n                right = mid-1\n            else:\n                left = mid+1\n        \n        return self.first_occurrence, self.last_occurrence\n\nif __name__ == \"__main__\":\n    finder = FindFirstLastOccurrence([1, 5, 7, 8, 8, 10])\n    print(finder.findFirstLastOccurrence(8)) # (3,4)", "category": "Python"}, {"instruction": "Compare the insertion sort and the merge sort algorithms.", "input": "", "output": "Insertion sort is an in-place sorting algorithm that compares and inserts elements one at a time into a sorted list. It starts off with a single element and compares it to every element in the list. If the element is smaller than the element to the left, it moves the left element over and continues down the list until it reaches a spot where it is no longer smaller than the elements to the left, then it will insert the element in that spot. Insertion sort is a simple algorithm and is relatively fast for small lists. However, for larger lists, the time complexity can become large and the algorithm can be more expensive. \n\nMerge sort is an efficient, divide-and-conquer sorting algorithm that works by continuously dividing a list in half until it is broken down into individual elements, which are then recombined in sorted order. It has a time complexity of O(nlogn) in all cases, making it a very efficient algorithm for large lists. It also does not need additional memory for sorting, unlike some other sort algorithms. However, merge sort is not an in-place sorting algorithm and requires additional memory to perform the sorting.", "category": "Python"}, {"instruction": "Write C++ code to implement a stack data structure.", "input": "", "output": "#include <iostream> \n#include <vector> \n\nusing namespace std; \n\nclass Stack \n{ \n    vector<int> items; \n  \npublic: \n    void push(int item) \n    { \n        items.push_back(item); \n    } \n  \n    int pop() \n    { \n        int data = items.back(); \n        items.pop_back(); \n        return data; \n    } \n  \n    void printItems() \n    { \n        cout << \"Items in the stack are: \"; \n        for (int i = 0; i < items.size(); i++) \n            cout << items[i] << ' '; \n        cout << endl; \n    } \n}; \n  \nint main() \n{ \n    Stack s; \n    s.push(1); \n    s.push(2); \n    s.push(3);\n    s.push(4); \n    s.printItems();  \n    s.pop(); \n    s.printItems(); \n    return 0; \n}", "category": "Python"}, {"instruction": "Explain the differences between a function and a method in Java.", "input": "", "output": "In Java, a function refers to a block of code that performs a specific task and can be defined independently from any class, whereas a method refers to a block of code which is written inside a class and can access the data members and functions which are associated with the class. A function does not have access to the class data (state) and doesn't include the keyword \u201cthis\u201d, whereas a method has access to the class data and includes the keyword \u201cthis\u201d. A function is typically called from outside the class, whereas a method is usually called from inside the class and can be accessed by an object of the class.", "category": "Python"}, {"instruction": "Write a code to sort an array of integers using the quicksort algorithm.", "input": "array = [2, 4, 5, 1, 9, 0]", "output": "def quicksort(arr):\n    if len(arr) == 0 or len(arr) == 1:\n        return arr\n    else:\n        pivot = arr[0]\n        arr.remove(arr[0])\n        left_arr = []\n        right_arr = []\n        for element in arr:\n            if element <= pivot:\n                left_arr.append(element)\n            else:\n                right_arr.append(element)\n        left_arr = quicksort(left_arr)\n        right_arr = quicksort(right_arr)\n        sorted_arr = left_arr + [pivot] + right_arr\n        return sorted_arr\n\nif __name__ == \"__main__\":\n    array = [2, 4, 5, 1, 9, 0]\n    sorted_arr = quicksort(array)\n    print(sorted_arr)\n\n# Output: [0, 1, 2, 4, 5, 9]", "category": "Python"}, {"instruction": "Design a distributed system for an online pharmacy.", "input": "", "output": "The distributed system for an online pharmacy should consist of the following components: \n\n1. Database Server: Stores customer information, product inventory, and transaction data.\n2. Web Server: Serves web pages, process customer orders, and handles payment transactions.\n3. Application Server: Processes customer orders, handles inventory management tasks, and communicates with the pharmacy's service providers (such as shipping and billing).\n4. Messaging Server: Used to communicate with customers, send notifications, and handle customer service inquiries.\n5. Analytics Server: Collects data from the other components and used to generate reports and provide business insights.\n6. Warehouse Management System (WMS): Used by warehouse personnel to maintain inventory levels and fulfill customer orders. \n7. Payment Gateway: Provides payment processing services for customers. \n8. Content Delivery Network (CDN): Used to store and serve static content (such as images, videos, and audio files).", "category": "Python"}, {"instruction": "Create an if-statement for the given conditions.", "input": "x is greater than or equal to 5", "output": "if (x >= 5) {\n  // Do something\n}", "category": "Python"}, {"instruction": "Write a SQL query to display unique values from a column called \"id\".", "input": "", "output": "SELECT DISTINCT id\nFROM table;", "category": "Python"}, {"instruction": "Create a css style to set a border on the bottom side of the element.", "input": "", "output": "div {\n  border-bottom: 2px solid #000;\n}", "category": "Python"}, {"instruction": "Write a Python code to convert the given temperature from Celsius to Fahrenheit.", "input": "25", "output": "Celsius = 25\nFahrenheit = (Celsius * 9/5) + 32\n\nprint('{} degrees Celsius is equal to {} degrees Fahrenheit.'.format(Celsius, Fahrenheit))\n# Output: 25 degrees Celsius is equal to 77 degrees Fahrenheit.", "category": "Python"}, {"instruction": "Write a C program that takes an integer as input and prints the sum of all its digits.", "input": "n = 473", "output": "#include<stdio.h> \n\n//Function to find the sum of digits \nint SumOfDigits(int n) \n{ \n\tint sum = 0; \n\twhile(n>0) \n\t{ \n\t\t//Extracting the last digit of the number \n\t\tint rem = n % 10;  \n\t\tsum = sum + rem; \n\t\t\n\t\t//Removing the last digit from the number \n\t\tn = n / 10; \n\t} \n\treturn sum; \n} \n\n//Test Program\nint main() \n{ \n\tint num = 473; \n\tprintf(\"Sum of Digits of %d = %d\", num, SumOfDigits(num)); \n\n\treturn 0; \n}", "category": "Python"}, {"instruction": "Create a function to check if a string contains only unique characters.", "input": "string = \"Programming\"", "output": "def unique_chars(string):\n    # List to keep track of characters \n    characters = []\n    \n    for c in string:\n        if c not in characters:\n            characters.append(c)\n        else:  \n            return False\n    \n    return True", "category": "Python"}, {"instruction": "Write a Pyhton program to generate a new list whose elements are the two times of the given list elements.", "input": "List = [1, 2, 3, 4, 5]", "output": "# Generate a new list whose elements are twice of the given list elements \n\nlist1 = [1, 2, 3, 4, 5] \n   \nlist2 = [] \n   \n# using loop to iterate the elements \nfor i in list1: \n    list2.append(i * 2) \n      \n# printing the new list \nprint(list2)", "category": "Python"}, {"instruction": "Write a Python program to find all the prime numbers in the range between 1 to 1000.", "input": "", "output": "# Python program to find all the prime numbers in a \n# given range using Sieve of Eratosthenes \n\ndef SieveOfEratosthenes(n): \n    # Create a boolean array \"prime[0..n]\" and \n    # initialize all entries it as true. A value   \n    # in prime[i] will finally be False if i is \n    # Not a prime, else True. \n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n          \n        # If prime[p] is not changed, then it is  \n        # a prime \n        if (prime[p] == True): \n              \n            # Update all multiples of p \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n    \n    # Print all prime numbers \n    prime_nums_list = [] \n    for p in range(2, n): \n        if prime[p]: \n            prime_nums_list.append(p) \n    \n    return prime_nums_list \n  \n# Driver code \nn = 1000\nprint(SieveOfEratosthenes(n))", "category": "Python"}, {"instruction": "Write an SQL query to find the sum of all the credits in the table \"Transactions\".", "input": "Table: Transactions\n+----+------------+-------+\n| Id |   Date     | Credit|\n+----+------------+-------+\n| 1  |  12/01/19  |  5.00 |\n| 2  |  13/01/19  |  7.50 |\n| 3  |  14/01/19  |  8.50 |\n+----+------------+-------+", "output": "SELECT SUM(Credit) AS SumOfCredits FROM Transactions;", "category": "Python"}, {"instruction": "Add a condition to the following code in Python to check if the given number is greater or less than 5.", "input": "num = 3", "output": "if num > 5:\n    print(\"The number is greater than 5\")\nelif num < 5:\n    print(\"The number is less than 5\")", "category": "Python"}, {"instruction": "Output the maximum value of the following array in JavaScript.", "input": "A = [2, 4, 6, 8, 10]", "output": "10", "category": "Python"}, {"instruction": "Outline the steps for sorting a list in descending order.", "input": "", "output": "1. Reverse the elements of the list. \n2. Sort the reversed list using a sorting algorithm. \n3. Return the reversed sorted list.", "category": "Python"}, {"instruction": "Write a SQL query to calculate the sum of a column named \"Price\" from the table \"Products\".", "input": "", "output": "SELECT SUM(Price) FROM Products;", "category": "Python"}, {"instruction": "Create a Java program to print a square diamond pattern with '*' characters.", "input": "", "output": "public class DiamondPattern {\n  public static void main(String[] args) {\n    int n = 5;\n    for (int i = 1; i <= n; i++) {\n      for (int j = 1; j <= n - i; j++) {\n        System.out.print(\" \");\n      }\n      for (int j = 1; j <= i; j++) {\n        System.out.print(\"* \");\n      }\n      System.out.println();\n    }\n    for (int i = 1; i < n; i++) {\n      for (int j = 1; j <= i; j++) {\n        System.out.print(\" \");\n      }\n      for (int j = 1; j <= n - i; j++) {\n        System.out.print(\"* \");\n      }\n      System.out.println();\n    }\n  }\n}", "category": "Python"}, {"instruction": "What is the hexadecimal representation of the number 255?", "input": "", "output": "FF", "category": "Python"}, {"instruction": "Rewrite the code to implement a shell sort algorithm in Python.", "input": "", "output": "def shell_sort(arr):\n    n = len(arr)\n    gap = n//2\n \n    while gap > 0:\n \n        for i in range(gap,n):\n            temp = arr[i]\n            j = i\n            while  j >= gap and arr[j-gap] >temp:\n                arr[j] = arr[j-gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2", "category": "Python"}, {"instruction": "Use a loop in Java to print out the squares of numbers from 1 to 10.", "input": "", "output": "for (int i = 1; i <= 10; i++) {\n    System.out.println(i * i);\n}", "category": "Python"}, {"instruction": "Edit the css style to change color of the text to be green.", "input": "p {\n  font-weight: bold;\n  font-size: 16px;\n}", "output": "p {\n  font-weight: bold;\n  font-size: 16px;\n  color: green;\n}", "category": "Python"}, {"instruction": "Construct a for-loop with a range from 1 to 5.", "input": "", "output": "for (int i=1; i <= 5; i++) {\n  // Do something\n}", "category": "Python"}, {"instruction": "Write a JavaScript code to set the background color of the element.", "input": "#ffa11f", "output": "document.getElementById(\"element\").style.backgroundColor = \"#ffa11f\";", "category": "Python"}, {"instruction": "Do a range check based on the provided code and output results.", "input": "number = 4\nlower_bound = 2\nupper_bound = 5", "output": "True", "category": "Python"}, {"instruction": "Write a Python program to inverse a dictionary, so that the keys become values and values become keys.", "input": "dictionary = {1:'Apple', 2:'Orange', 3:'Banana'}", "output": "# Python program to inverse a dictionary \n  \n# Function to inverse a dictionary\ndef inverse_dict(dictionary): \n    inverse = dict() \n    for key in dictionary: \n        linverse = inverse.setdefault(dictionary[key], []) \n        linverse.append(key) \n    return inverse\n  \n# example dictionary  \ndictionary = {1:'Apple', 2:'Orange', 3:'Banana'}\n  \n# Print the inverse dictionary\nprint(inverse_dict(dictionary))", "category": "Python"}, {"instruction": "Create a code snippet for making a POST request using Python.", "input": "", "output": "import requests \nurl = 'https://www.example.com' \ndata = {'var1': 'value1', 'var2': 'value2'} \nresponse = requests.post(url, data=data)", "category": "Python"}, {"instruction": "What is an appropriate format to represent a 3-dimensional point?", "input": "", "output": "A 3-dimensional point can be represented as a tuple (x, y, z) consisting of the x-coordinate, y-coordinate, and z-coordinate of the point.", "category": "Python"}, {"instruction": "Generate a hash for a given dictionary.", "input": "my_dict = {'name': 'John', 'age': 27, 'profession': 'programmer'}", "output": "import hashlib\n\ndef generate_hash(my_dict):\n    my_string = str(my_dict)\n    res = hashlib.md5(my_string.encode()).hexdigest() \n    \n    return res\n\nprint(generate_hash(my_dict))", "category": "Python"}, {"instruction": "Output the last three elements of a list.", "input": "my_list = [7, 1, 5, 4, 0]", "output": "print(my_list[-3:])", "category": "Python"}, {"instruction": "Write a function to classify the input based on the following criteria: \nIf the input is positive, output \"positive\"; if the input is zero, output \"zero\"; if the input is negative, output \"negative\".", "input": "", "output": "def classify(x):\n    if x > 0:\n        return \"positive\"\n    elif x == 0:\n        return \"zero\"\n    else:\n        return \"negative\"", "category": "Python"}, {"instruction": "Write a function that takes in a 2D matrix and outputs the transpose of the matrix.", "input": "", "output": "def transpose_matrix(matrix):\n    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]", "category": "Python"}, {"instruction": "Perform PCA on a dataset.", "input": "", "output": "from sklearn.decomposition import PCA\n\ndef perform_pca(X):\n    pca = PCA(n_components=2)\n    pca.fit(X)\n    X_pca = pca.transform(X)\n\n    return X_pca", "category": "Python"}, {"instruction": "Write code to print out all the even numbers from a given list of numbers.", "input": "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "for number in my_list:\n    if (number % 2 == 0):\n        print(number)", "category": "Python"}, {"instruction": "Write a function that takes in a list and a target value, and returns a new list with the target value removed.", "input": "my_list = [1,2,3,4,5,6]\ntarget = 3", "output": "def remove_target(my_list, target):\n    return [x for x in my_list if x != target]\n\nmy_list = remove_target(my_list, target)\nprint(my_list)", "category": "Python"}, {"instruction": "Create a data frame from a dictionary.", "input": "my_dict = {'state': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada'], \n        'year': [2000, 2001, 2002, 2001, 2002],\n        'pop': [1.5, 1.7, 3.6, 2.4, 2.9]}", "output": "import pandas as pd\n\nmy_df = pd.DataFrame(my_dict)\nprint(my_df)", "category": "Python"}, {"instruction": "How can you create a copy of a list?", "input": "", "output": "You can create a copy of a list by using the \"list\" method. For example, to create a copy of a list called \"my_list\", you can simply write \"my_list_copy = list(my_list)\".", "category": "Python"}, {"instruction": "Implement a sequence to sequence model for translation.", "input": "", "output": "from tensorflow.keras.layers import Input, LSTM, Dense\n\ndef seq2seq_model(src_length, trg_length, embedding_dim, num_enc_tokens, num_dec_tokens):\n    # Define an input layer.\n    encoder_inputs = Input(shape=(None, num_enc_tokens))\n    # Add an LSTM layer with `src_length` number of units\n    encoder_lstm = LSTM(src_length, return_state=True)\n    # Define the encoder output, state and the encoder states\n    encoder_outputs, state_h, state_c = encoder_lstm(encoder_inputs)\n    # Discard `encoder_outputs` and only keep the states.\n    encoder_states = [state_h, state_c]\n\n    # Set up the decoder, using `encoder_states` as initial state.\n    decoder_inputs = Input(shape=(None, num_dec_tokens))\n    # Add an LSTM layer with `src_length` number of units\n    decoder_lstm = LSTM(src_length, return_state=True, return_sequences=True)\n    decoder_outputs, _, _ = decoder_lstm(decoder_inputs, initial_state=encoder_states)\n    # Add a fully connected layer\n    decoder_dense = Dense(trg_length, activation='softmax')\n    # Define the output of the decoder\n    decoder_outputs = decoder_dense(decoder_outputs)\n\n    # Create a model\n    model = Model([encoder_inputs, decoder_inputs], decoder_outputs)\n    # Compile the model\n    model.compile(optimizer='adam', loss='categorical_crossentropy')\n    return model", "category": "Python"}, {"instruction": "Write a Python program to find the equilibrium index of an array. An index of an array is called equilibrium index if the sum of elements at lower indexes is equal to the sum of elements at higher indexes.", "input": "arr = [-7, 1, 9, -4, 3, 2]", "output": "def find_equilibrium_index(arr):\n    total_sum = sum(arr)\n\n    left_sum = 0\n    \n    for index, num in enumerate(arr):\n        total_sum -= num\n        if left_sum == total_sum:\n            return index \n        left_sum += num\n    return -1\n\narr = [-7, 1, 9, -4, 3, 2]\nprint(find_equilibrium_index(arr)) # Output: 2", "category": "Python"}, {"instruction": "Given a two dimensional array, write a Python program to print the second diagonal of the array.", "input": "my_array = [[1, 2, 3],\n             [4, 5, 6],\n             [7, 8, 9]]", "output": "my_array = [[1, 2, 3],\n             [4, 5, 6],\n             [7, 8, 9]]\n\n# A function to print second diagonal of \n# given array\ndef print_second_diagonal(arr): \n    # Find length of given array \n    n = len(arr)  \n      \n    # Traverse second diagonal \n    for i in range(0, n): \n        print(arr[i][n-1-i], end = \" \") \n          \n# Driver code \nprint_second_diagonal(my_array)\n# Output: 3 6 9", "category": "Python"}, {"instruction": "Write a Python function to return the most frequent character in the given string.", "input": "my_string = \"hello world\"", "output": "def most_frequent(s):\n    char_freq = {}\n    max_freq = 0\n    most_frequent_char = \"\"\n\n    for c in s:\n        if c in char_freq:\n            char_freq[c] += 1\n        else:\n            char_freq[c] = 1\n\n        if char_freq[c] > max_freq:\n            max_freq = char_freq[c]\n            most_frequent_char = c\n\n    return most_frequent_char\n\nmy_string = \"hello world\"\nprint(most_frequent(my_string)) # Output: 'l'", "category": "Python"}, {"instruction": "Write a Python program to compare two strings and return True if both the strings are equal, otherwise False.", "input": "s1 = \"Hello\"\ns2 = \"Hello\"", "output": "s1 = \"Hello\"\ns2 = \"Hello\"\n\nprint(s1 == s2) # Output: True", "category": "Python"}, {"instruction": "Write a Python program to divide two numbers and return the quotient and remainder of the division.", "input": "x = 10\ny = 3", "output": "x = 10\ny = 3\n\nquotient = int(x / y)\nremainder = x % y\n\nprint(\"Quotient:\", quotient)\nprint(\"Remainder:\", remainder)\n# Output: Quotient: 3, Remainder: 1", "category": "Python"}, {"instruction": "Create a function that returns the nth Fibonacci number.", "input": "", "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)", "category": "Python"}, {"instruction": "Write a SQL query to list all the employees of a company.", "input": "", "output": "SELECT * FROM Employee;", "category": "Python"}, {"instruction": "Create an algorithm to convert a temperature from Celsius to Fahrenheit.", "input": "0", "output": "def ctoF(temperature):\n    return (temperature * 1.8) + 32\n\nif __name__ == '__main__':\n    print(ctoF(0))", "category": "Python"}, {"instruction": "Create a function that takes an array of strings and returns an array of their lengths.", "input": "[\u2018Hello\u2019, \u2018World\u2019]", "output": "def array_length(arr):\n    return [len(s) for s in arr]\n\nif __name__ == '__main__':\n    arr = ['Hello', 'World']\n    print(array_length(arr))", "category": "Python"}, {"instruction": "Design a class for an Employee with attributes name, experience, and salary.", "input": "", "output": "class Employee: \n    def __init__(self, name, experience, salary):\n        self.name = name\n        self.experience = experience\n        self.salary = salary\n        \n    def get_name(self):\n        return self.name\n    \n    def get_experience(self):\n        return self.experience\n    \n    def get_salary(self):\n        return self.salary", "category": "Python"}, {"instruction": "Create a function that returns true if number is divisible by 5.", "input": "", "output": "def isDivisibleByFive(n): \n    return (n % 5 == 0)", "category": "Python"}, {"instruction": "Construct an if/else statement that checks if a number is between 1 and 10.", "input": "", "output": "if n >= 1 and n <= 10:\n    # do something\nelse:\n    # do something else", "category": "Python"}, {"instruction": "Write a Python function to split a string into a list of strings, separated by a given delimiter.", "input": "", "output": "def split_string(string, delimiter):\n    \"\"\"Split a string into a list of strings, separated by a given delimiter.\"\"\"\n    return string.split(delimiter)", "category": "Python"}, {"instruction": "Construct an if statement with two conditions.", "input": "", "output": "if condition1 and condition2:\n    # do something", "category": "Python"}, {"instruction": "Modify the following code to include a try/except statement.", "input": "def read_file(filename):\n    with open(filename) as f:\n        return f.read()", "output": "def read_file(filename):\n    try:\n        with open(filename) as f:\n            return f.read()\n    except FileNotFoundError:\n        print(f\"File {filename} was not found.\")", "category": "Python"}, {"instruction": "Write a Python function to generate a dictionary with the keys 'a', 'b', 'c', and values of '1', '2', '3', respectively.", "input": "", "output": "def generate_dictionary():\n    \"\"\"Generate a dictionary with the keys 'a', 'b', 'c' and values of '1', '2', '3' respectively.\"\"\"\n    return {'a': 1, 'b': 2, 'c': 3}", "category": "Python"}, {"instruction": "Implement a function for generating a list of Fibonacci numbers up to n.", "input": "", "output": "def fibonacci_list(n): \n    fib_list = [1,1] \n    while fib_list[-1] < n: \n        next_num = fib_list[-1] + fib_list[-2] \n        fib_list.append(next_num)\n    return fib_list", "category": "Python"}, {"instruction": "Construct a for loop to interate over the following JSON data.", "input": "data = [{\"name\": \"John\", \"age\": 34}, {\"name\": \"Mary\", \"age\": 25}]", "output": "for item in data:\n    name = item['name']\n    age = item['age']\n    print(f\"{name}'s age is {age}\")", "category": "Python"}, {"instruction": "Create a JavaScript function to convert a given number to an array.", "input": "", "output": "function toArray(numb){\n    let arr = [];\n\n    while (numb > 0) {\n        let remainder = numb % 10;\n        numb = Math.floor(numb / 10);\n        arr.unshift(remainder);\n    }\n\n    return arr;\n}", "category": "Python"}, {"instruction": "Write an SQL query to select the customer names with an age of 25 or more.", "input": "", "output": "SELECT customer_name\nFROM customers\nWHERE age >= 25", "category": "Python"}, {"instruction": "Edit the following Java code to print the elements of an array in the form of a matrix.", "input": "public class Matrix \n{ \n    public static void main(String[] args) \n    { \n        int[][] myArray = {{1,2,3}, \n                            {4,5,6}, \n                            {7,8,9}}; \n    } \n}", "output": "public class Matrix \n{ \n    public static void main(String[] args) \n    { \n        int[][] myArray = {{1,2,3}, \n                            {4,5,6}, \n                            {7,8,9}}; \n        for (int i = 0; i < myArray.length; i++) \n        { \n            for (int j = 0; j < myArray[i].length; j++) \n            { \n                System.out.print(myArray[i][j] + \" \"); \n            } \n            System.out.println();\n        } \n    } \n}", "category": "Python"}, {"instruction": "Write an algorithm in Python to determine if an array has duplicate elements or not.", "input": "", "output": "def containsDuplicate(arr):\n    seen = set()\n    for element in arr:\n        if element in seen:\n            return True\n        seen.add(element)\n    return False", "category": "Python"}, {"instruction": "Create a SQL query to select the top five customers based on purchase amount", "input": "", "output": "SELECT TOP 5 *\nFROM customers\nORDER BY purchase_amount DESC", "category": "Python"}, {"instruction": "Implement a function in Python to determine if a string is a palindrome.", "input": "", "output": "def is_palindrome(str): \n    rev = ''.join(reversed(str)) \n\n    if (str == rev): \n        return True\n    return False", "category": "Python"}, {"instruction": "Create a JavaScript function to merge two given arrays.", "input": "", "output": "function mergeArray(arr1, arr2){\n    return arr1.concat(arr2);\n }", "category": "Python"}, {"instruction": "Generate a Python function that takes 'string' as an argument and return a new string with the last two characters of 'string' repeated.", "input": "", "output": "def repeat_last_two_char(string):\n    \"\"\"Takes a string as an argument and returns a new string with the last two characters repeated.\"\"\"\n    if len(string) < 2:\n        return \"\"\n    return string[:-2] + string[-2:] * 2", "category": "Python"}, {"instruction": "Explain how a Depth-First-Search (DFS) algorithm works.", "input": "", "output": "A Depth-First-Search (DFS) algorithm is a graph traversal technique used to traverse a graph or tree. It starts at the root node of the graph and visits each of its adjacent nodes in a pre-defined order. For each adjacent node, it visits the node and checks to see if the node has been visited. If the node has not been visited, the algorithm visits the node and adds it to the visited set. The algorithm then recursively visits the adjacent nodes of the node it just visited. It repeats this process until it has visited all the nodes in the graph.", "category": "Python"}, {"instruction": "Write a SQL query that counts the number of customers by country.", "input": "Table: Customers\n+----+------------+------------+-----------+\n| Id | First Name | Last Name  |  Country  |\n+----+------------+------------+-----------+\n| 1  | John       | Smith      | USA       |\n| 2  | Jackson    | Anderson   | UK        |\n| 3  | Alice      | White      | USA       |\n+----+------------+------------+-----------+", "output": "SELECT COUNT(*) AS CustomersCount, Country\nFROM Customers\nGROUP BY Country;", "category": "Python"}, {"instruction": "Create a JavaScript function for sorting an array of numbers in ascending order.", "input": "", "output": "function sortNumsAscend(arr) {\n    return arr.sort(function(a, b) {\n        return a - b;\n    });\n}", "category": "Python"}, {"instruction": "Write a code that prints the reversed version of a given Python list.", "input": "list = [1, 2, 3, 4]", "output": "def reverse_list(lst):\n    reversed_list = lst[::-1]\n    return reversed_list\n\nprint(reverse_list([1, 2, 3, 4]))", "category": "Python"}, {"instruction": "What is stdin and stdout in Python?", "input": "", "output": "In Python, stdin and stdout are two objects used to read standard input and print standard output respectively. stdin is used to read input from the command line or a script and stdout is used to write the output back to the command line or script. The advantage of using stdin and stdout is that they are portable and work on all versions of Python, whereas using input() and print() functions work only if the code is executed directly in Python interactive shell.", "category": "Python"}, {"instruction": "Write a code to print out all dates between two given dates in Python", "input": "start_date = '08/20/2020'\nend_date = '08/30/2020'", "output": "from datetime import timedelta, date\n\ndef daterange(start_date, end_date):\n    for n in range(int ((end_date - start_date).days)):\n        yield start_date + timedelta(n)\n\nstart_date = date(2020, 8, 20)\nend_date = date(2020, 8, 30)\nfor single_date in daterange(start_date,end_date):\n    print(single_date.strftime(\"%d/%m/%Y\"))", "category": "Python"}, {"instruction": "Modify the following code to print out all even numbers in the list.", "input": "lst = [1, 2, 3, 4, 5]", "output": "for i in lst:\n    if i % 2 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Write a function that takes in a list and an element, and returns the index of the element in the list.", "input": "list = [1, 2, 5, 8, 9]\nelement = 5", "output": "def find_index(lst, element):\n    for i,num in enumerate(lst):\n        if num == element:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Debug the following code to print a list of all prime numbers between 1 and 10", "input": "for i in range(1, 10):\n    for x n range 2, i // 2\n    if i % x == 0 \n    print(i)", "output": "for i in range(2, 10): \n    is_prime = True\n    for x in range(2, i // 2 + 1): \n        if i % x == 0: \n            is_prime = False\n            break\n    if is_prime: \n        print(i)", "category": "Python"}, {"instruction": "Explain what a Monadic function is.", "input": "", "output": "A monadic function is a function that takes a single argument, typically a value or a collection of values, and returns a result that is also typically a value or a collection of values. They are often used to model a computations on collections of data. Monads allow for more expressive code, letting developers write and handle complex operations like error-handling in a simpler and more consistent way.", "category": "Python"}, {"instruction": "Write a function in Java to find the length of the longest common subsequence of two strings.", "input": "", "output": "public static int longestCommonSubsequence(String s1, String s2) {\n    int[][] dp = new int[s1.length() + 1][s2.length() + 1];\n\n    for (int i = 0; i <= s1.length(); i++) {\n        for (int j = 0; j <= s2.length(); j++) {\n            if (i == 0 || j == 0) {\n                dp[i][j] = 0;\n            } else if (s1.charAt(i - 1) == s2.charAt(j - 1)) {\n                dp[i][j] = dp[i - 1][j - 1] + 1;\n            } else {\n                dp[i][j] = Math.max(dp[i][j - 1], dp[i - 1][j]);\n            }\n        }\n    }\n    return dp[s1.length()][s2.length()];\n}", "category": "Python"}, {"instruction": "Explain what supervised learning is.", "input": "", "output": "Supervised learning is a type of machine learning where a model is trained to predict a target variable based on input data. In this form of learning, the model is trained with labeled or labeled data points, allowing the model to learn patterns in the data that can be used to make predictions. Common applications of supervised learning include regression, classification, and time series prediction.", "category": "Python"}, {"instruction": "Suggest a way to optimize a given code segment.", "input": "x = 0\nfor i in range(100):\n    for j in range(100):\n        x = x + 1", "output": "To optimize this code segment, you can use the NumPy library to take advantage of vectorized operations and reduce the number of iterations. Additionally, you can use MultiProcessing to run the code in parallel, taking advantage of multiple cores on the machine:\n\nimport numpy as np\n\nx = np.zeros((100, 100))\n\nfor i in range(100):\n    x[i] = x[i] + 1", "category": "Python"}, {"instruction": "List three differences between a list and a tuple in Python.", "input": "", "output": "The three main differences between a list and a tuple in Python are:\n1. Lists are mutable and tuples are immutable. That is, changes can be made to a list whereas elements of a tuple cannot be changed.\n2. Lists use square brackets and tuples use parentheses.\n3. Lists store arbitrary objects, whereas tuples store data of a specific type. For example, a list could contain integers, strings and objects while a tuple can only contain a predetermined number of elements.", "category": "Python"}, {"instruction": "Explain what is the critical section on a process.", "input": "", "output": "The critical section of a process is a section of code that must be executed without interruption by other processes. In a multi-threaded system, the critical section is used to guarantee that only one thread can access resources or data structures at any given time. It also ensures that operations that must be mutually exclusive are executed in order to prevent race conditions.", "category": "Python"}, {"instruction": "Summarize how to handle missing data in Pandas.", "input": "", "output": "There are a few different approaches to handling missing data in Pandas. The most common is to fill the null values with a placeholder value such as 0 or NaN. Alternatively, you can drop the rows containing the missing values. Depending on the dataset, you may also be able to fill the missing values in with a suitable statistical or machine learning model or use a backfill or forward fill method to fill in the gaps.", "category": "Python"}, {"instruction": "Write a function in Python to merge two sorted arrays.", "input": "arr1 = [1, 5, 9]\narr2 = [2, 3, 6, 8]", "output": "def merge_sorted_arrays(arr1, arr2):\n    n1, n2 = len(arr1), len(arr2)\n    i, j, k = 0, 0, 0\n    arr3 = [0] * (n1 + n2)\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            arr3[k] = arr1[i]\n            i += 1\n        else:\n            arr3[k] = arr2[j]\n            j += 1\n        k += 1\n\n    # Copy remaining elements \n    while i < n1:\n        arr3[k] = arr1[i]\n        i += 1\n        k += 1\n\n    while j < n2:\n        arr3[k] = arr2[j]\n        j += 1\n        k += 1\n\n    return arr3", "category": "Python"}, {"instruction": "Explain what a hash table is.", "input": "", "output": "A hash table is a data structure used to store key-value pairs efficiently. It uses a hashing function to map each key to a unique memory address, which is used to store the associated value. Hash tables are used for fast lookups, as the time taken to find an item does not depend on the number of items stored, but rather on the size of the hash table, making them more efficient than searching through a linear list. They are also used for dynamic programming and caching data.", "category": "Python"}, {"instruction": "What is type hinting in Python?", "input": "", "output": "Type hinting is a feature of the Python language that allows one to add type information to a variable, a function, and its parameters. The type hinting allows Python to infer the type of data to be used and this helps the interpreter to identify any errors and provide more feedback during the development process. It also makes the code more readable and maintainable since type information can be used to provide auto-complete and better error messages.", "category": "Python"}, {"instruction": "Compare inheritance and composition in Python", "input": "", "output": "Inheritance and composition in Python are two approaches for achieving code reuse. Inheritance involves creating a parent class which contains method and member field definitions. These are then used in a subclass and can be overridden to make them more specialized. Composition involves designing objects that contain references to other objects, using instance variables whose types are interfaces or classes. This way, the composition object can act as a proxy to the inner objects, passing requests on to them as required. The advantages of composition over inheritance include greater control over class dependencies and better encapsulation.", "category": "Python"}, {"instruction": "Write a code that takes two lists and returns one combined list", "input": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]", "output": "def combine_lists(list1, list2):\n  combined_list = list1 + list2\n  return combined_list\n\nprint(combine_lists([1, 2, 3], [4, 5, 6]))", "category": "Python"}, {"instruction": "Generate a regular expression to match a UK phone number", "input": "", "output": "import re\npattern = re.compile(\"^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\./0-9]*$\")", "category": "Python"}, {"instruction": "Compare the two given strings and output the longer one.", "input": "let str1 = 'hello';\nlet str2 = 'world';", "output": "if (str1.length > str2.length) {\n  console.log(str1);\n} else {\n  console.log(str2);\n}", "category": "Python"}, {"instruction": "Check if the given number is an even or odd number.", "input": "let num = 42", "output": "if (num % 2 == 0) {\n  console.log('The number is even');\n} else {\n  console.log('The number is odd');\n}", "category": "Python"}, {"instruction": "Create a regular expression to find the pattern \"123456\" in a text.", "input": "", "output": "/123456/", "category": "Python"}, {"instruction": "Generate a JQuery code snippet to create a div and assign it a class of \"main\".", "input": "", "output": "$('<div>').addClass('main').appendTo('body');", "category": "Python"}, {"instruction": "Write a SQL query to get the data of the third row in the table named \"table_name\".", "input": "", "output": "SELECT * FROM table_name LIMIT 3, 1", "category": "Python"}, {"instruction": "Using the provided template, create a function which calculates the area of a right triangle.", "input": "# calculate the area of a right triangle\n# @param side_a {Number} - the length of side A of the triangle\n# @param side_b {Number} - the length of side B of the triangle", "output": "const areaOfRightTriangle = (side_a, side_b) => 0.5 * side_a * side_b;", "category": "Python"}, {"instruction": "Create a JavaScript function to convert a given string to a Base-64 encoded value.", "input": "", "output": "const convertToBase64 = str => btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g,\n  (match, p1) => String.fromCharCode(`0x${p1}`)));", "category": "Python"}, {"instruction": "Write a query in elasticsearch that returns documents that contain matching content.", "input": "Find all documents in the \"products\" index that contains the phrase \"Black Friday\"", "output": "GET products/_search\n{\n  \"query\": { \n    \"multi_match\": { \n      \"query\": \"Black Friday\", \n      \"fields\": [\"*\"] \n    }\n  }\n}", "category": "Python"}, {"instruction": "Identify the input and output for this code snippet.", "input": "def adder(x, y):\n    return x + y", "output": "Input: two integer variables, x and y\nOutput: the sum of x and y, an integer", "category": "Python"}, {"instruction": "Develop a Java program to calculate the average of three numbers", "input": "", "output": "public class AverageCalculator { \n  public static void main(String[] args) \n  {  \n    float num1 = 10.7f; \n    float num2 =", "category": "Python"}, {"instruction": "Generate a function in Python to calculate the total cost of an item given its price and quantity", "input": "Price=10 and Quantity=5", "output": "def calculate_total_cost(price, quantity):\n    return price * quantity", "category": "Python"}, {"instruction": "Write an SQL query to count the number of lines in an orders table", "input": "", "output": "SELECT COUNT(*) FROM orders;", "category": "Python"}, {"instruction": "Write a SQL query to select all occurrences of a color", "input": "Records:\n\nName  |  Color\n\nRobert  |  Red\nJohn    |  Blue\nMike    |  Red", "output": "SELECT * FROM Records\nWHERE Color='Red'", "category": "Python"}, {"instruction": "Create a JavaScript function that takes a name as a parameter and replaces spaces with '_'", "input": "Tom Smith", "output": "function replaceSpace(name){\n  return name.replace(/\\s/g,'_');\n}", "category": "Python"}, {"instruction": "Generate a Java program that prints the longest word in a sentence", "input": "Hello my name is John", "output": "public class longestWord{\n  public static void main(String[] args) {\n \n    String inputStr = \"Hello my name is John\";\n    String[] words = inputStr.split(\" \");\n \n    String longestWord = \"\";\n    int maxLength = 0;\n \n    for (String w : words){\n      if (w.length() > maxLength) {\n        maxLength = w.length();\n        longestWord = w;\n      }\n  }\n      System.out.println(\"Longest Word: \"+ longestWord);\n  }\n}", "category": "Python"}, {"instruction": "Develop a python code to sort an array of numbers", "input": "", "output": "def bubble_sort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]", "category": "Python"}, {"instruction": "Create a for loop in Java to find the sum of the first 20 numbers.", "input": "", "output": "int sum = 0;\nfor (int i=1; i <= 20; i++){\n   sum = sum + i;\n}\nSystem.out.printf(\"The sum of the first 20 numbers is %d\", sum);", "category": "Python"}, {"instruction": "Create a React component that displays a search bar.", "input": "", "output": "const SearchBar = () => {\n  return (\n    <div>\n      <input type=\"text\"/>\n      <button>Search</button>\n    </div>\n  );\n};", "category": "Python"}, {"instruction": "Devise a logic using PHP to check if a number is prime.", "input": "", "output": "function isPrimeNumber($number) {\n    for ($i = 2; $i < $number; $i++) {\n        if ($number % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}", "category": "Python"}, {"instruction": "Create an HTML document that displays a list of 5 items.", "input": "List of items:\nApple\nBanana\nOrange\nKiwi\nMango", "output": "<html>\n<body>\n    <ul>\n        <li>Apple</li>\n        <li>Banana</li>\n        <li>Orange</li>\n        <li>Kiwi</li>\n        <li>Mango</li>\n    </ul>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a SQL query to find all books in the library with the title \"Harry Potter\".", "input": "", "output": "SELECT * FROM library\nWHERE title = 'Harry Potter';", "category": "Python"}, {"instruction": "Reverse a list of integers and output the result.", "input": "[1, 2, 3, 4]", "output": "[4, 3, 2, 1]", "category": "Python"}, {"instruction": "Write a JavaScript program to find out the day of the week for a given date.", "input": "Date: June 1, 2021", "output": "let date = new Date('June 1, 2021');\nlet dayName = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\nlet day = dayName[date.getDay()];\n\nconsole.log(day);", "category": "Python"}, {"instruction": "Create an object with key-value pairs using JavaScript.", "input": "", "output": "let myObj = {\n key1: \"value1\",\n key2: \"value2\",\n key3: \"value3\"\n};", "category": "Python"}, {"instruction": "Tokenize the given sentence.", "input": "Sentence: He likes the quick brown fox", "output": "['He', 'likes', 'the', 'quick', 'brown', 'fox']", "category": "Python"}, {"instruction": "Convert the string in the given variable to lowercase.", "input": "String: \"HELLO WORLD!\"", "output": "str.toLowerCase();", "category": "Python"}, {"instruction": "Write a SQL statement to select all rows in a table.", "input": "Table name: student_info", "output": "SELECT * FROM student_info;", "category": "Python"}, {"instruction": "Parse the given string of JSON data.", "input": "\"{ \"name\": \"John\", \"age\": 20 }\"", "output": "const data = JSON.parse(\"{ \"name\": \"John\", \"age\": 20 }\");\nconst name = data.name;\nconst age = data.age;", "category": "Python"}, {"instruction": "Format a JSON string for better readability.", "input": "{\"message\": \"Hello World!\", \"version\": 1.0, \"owner\": \"John Doe\"}", "output": "{\n    \"message\": \"Hello World!\",\n    \"version\": 1.0,\n    \"owner\": \"John Doe\"\n}", "category": "Python"}, {"instruction": "Complete the following task: Create a function in JavaScript to check if a given number is even or odd.", "input": "", "output": "function isEven(num) {\n    if (num % 2 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}", "category": "Python"}, {"instruction": "Create a JavaScript function that takes an array of numbers as parameter and returns the second largest element in it.", "input": "", "output": "function secondLargestElement(arr){\n    let largest=arr[0];\n    let second_largest=arr[0];\n\n    for(let i=1; i<arr.length; i++){\n      // If current element is \n      // greater than largest \n      if (arr[i] > largest){\n        second_largest = largest; \n        largest = arr[i]; \n      }\n  \n      // If arr[i] is in between  \n      // largest and second_largest \n      else if (arr[i] > second_largest) \n        second_largest = arr[i]; \n    }\n    return second_largest; \n}", "category": "Python"}, {"instruction": "Edit the following code to print the last element of the list.", "input": "arr = [1, 2, 3]\ni = 0\nwhile i < len(arr):\n    print(arr[i])\n    i += 1", "output": "arr = [1, 2, 3]\ni = 0\nwhile i < len(arr):\n    print(arr[i])\n    i += 1\nprint(arr[len(ar)-1])", "category": "Python"}, {"instruction": "Edit the given code to add a function that calculates the area of a circle given its radius.", "input": "def circumference(r):\n    '''Calculates the circumference of a circle given its radius'''\n    return 2* PI * r", "output": "def circumference(r):\n    '''Calculates the circumference of a circle given its radius'''\n    return 2* PI * r\n\ndef area(r):\n    '''Calculates the area of a circle given its radius'''\n    return PI * r * r", "category": "Python"}, {"instruction": "Using the given code, add the missing terminating condition for the loop.", "input": "values = [3, 5, 7]\ni = 0\nwhile ():  # Add the condition\n    print(values[i])\n    i += 1", "output": "values = [3, 5, 7]\ni = 0\nwhile (i < len(values)):  # Add the condition\n    print(values[i])\n    i += 1", "category": "Python"}, {"instruction": "Answer the following question: What is an example of a while loop in JavaScript?", "input": "", "output": "A while loop in JavaScript repeats a set of instructions while a given condition is true. For example:\n\nlet i = 0;\nwhile (i < 10) {\n  console.log(i);\n  i++;\n}", "category": "Python"}, {"instruction": "Write a function in Python that takes in two lists and returns the lengths of the lists and the values that are common in both.", "input": "list1 = [1, 2, 3, 4, 6]\nlist2 = [2, 4, 8, 10]", "output": "def compare_lists(list1, list2):\n    length1 = len(list1) \n    length2 = len(list2) \n    common_values = list(set(list1).intersection(list2)) \n    return length1, length2, common_values", "category": "Python"}, {"instruction": "Edit the following code in Python to swap two elements in a list.", "input": "list1 = [1, 2, 4]\n\nlist1[0], list1[1] = list1[1], list1[0]", "output": "list1 = [1, 2, 4]\n\nlist1[0], list1[2] = list1[2], list1[0]", "category": "Python"}, {"instruction": "Convert the following Python code from functions to lambda expressions.", "input": "def cube(x):\n    return x ** 3\n\ndef add_cube(x, y):\n    return cube(x) + cube(y)", "output": "cube = lambda x: x ** 3\nadd_cube = lambda x, y: cube(x) + cube(y)", "category": "Python"}, {"instruction": "Create a Python class \"Point\" that has two instance variables x and y.", "input": "", "output": "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y", "category": "Python"}, {"instruction": "Design a function to convert a given numerical grade to a corresponding letter grade.", "input": "", "output": "def grade_to_letter(grade):\n    if grade >= 90:\n        return 'A'\n    elif grade >= 80:\n        return 'B'\n    elif grade >= 70:\n        return 'C'\n    elif grade >= 60:\n        return 'D'\n    else:\n        return 'F'", "category": "Python"}, {"instruction": "Devise a programming logic to find the sum of odd numbers between 1 and 50.", "input": "", "output": "total = 0\nfor i in range(1,51):\n    if (i % 2 == 1):\n        total += i\nprint(total)", "category": "Python"}, {"instruction": "Construct a query using Mongoose that returns all documents that match a certain criteria.", "input": "Find all documents in the \"users\" collection where the \"city\" field is equal to \"Los Angeles\".", "output": "db.users.find({city: \"Los Angeles\"})", "category": "Python"}, {"instruction": "Generate a correct C++ class definition to fulfill the following tasks.", "input": "Create a class that has four member variables: a, b, c and d.", "output": "class MyClass {\n    public: \n        int a;\n        int b;\n        int c;\n        int d;\n};", "category": "Python"}, {"instruction": "Convert the following function to use the reduce method in Python.", "input": "def sum_list(nums):\n  total = 0\n  for num in nums:\n    total += num\n  return total", "output": "def sum_list(nums):\n    return reduce(lambda x,y: x + y, nums)", "category": "Python"}, {"instruction": "Generate an SQL statement to select the top 10 most expensive items from a table named \"products\"", "input": "", "output": "SELECT * FROM products ORDER BY price DESC LIMIT 10;", "category": "Python"}, {"instruction": "Given a string variable, write a function to convert it to uppercase using Javascript.", "input": "", "output": "function toUpperCase(str) {\n  return str.toUpperCase();\n}", "category": "Python"}, {"instruction": "Create an array of 10 elements using Java.", "input": "", "output": "int[] array = new int[10];", "category": "Python"}, {"instruction": "Write an SQL query to find all books with the author's name 'J.K. Rowling'.", "input": "", "output": "SELECT * FROM library\nWHERE author = 'J.K. Rowling';", "category": "Python"}, {"instruction": "Write a SQL statement to select customers who have placed an order within the last month.", "input": "", "output": "SELECT *\nFROM customers\nWHERE DATEDIFF(CURDATE(), date_of_order) < 30;", "category": "Python"}, {"instruction": "Debug the following C code so that it compiles and runs successfully.", "input": "#include <stdio.h>\nint main {\n    printf(\"Hello World!\");\n    return 0;", "output": "#include <stdio.h>\nint main(void) {\n    printf(\"Hello World!\");\n    return 0; \n}", "category": "Python"}, {"instruction": "Write a JQuery snippet that shows an alert when a user clicks on a button.", "input": "", "output": "$(\"#button\").click(function(){\n    alert(\"You clicked on the button!\");\n});", "category": "Python"}, {"instruction": "Create a custom function to use in a python program that checks whether a given number is even or odd.", "input": "", "output": "def even_odd(num):\n    '''This function will check if a number is even or odd\n    and return 'even' or 'odd'.\n    '''\n    if num % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"", "category": "Python"}, {"instruction": "Merge the elements of two given arrays into one.", "input": "[1, 2, 3] and [4, 5, 6]", "output": "[1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Create a HTML form with three text fields (First Name, Last Name and Email).", "input": "", "output": "<form>\n    <label for=\"first-name\">First Name:</label>\n    <input type=\"text\" id=\"first-name\" name=\"first-name\">\n    <br>\n    <label for=\"last-name\">Last Name:</label>\n    <input type=\"text\" id=\"last-name\" name=\"last-name\">\n    <br>\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\">\n</form>", "category": "Python"}, {"instruction": "Write a SQL query to find the author of a book with the title \"The Cat in the Hat\".", "input": "", "output": "SELECT author FROM library\nWHERE title = 'The Cat in the Hat';", "category": "Python"}, {"instruction": "Implement a function in C++ to print the elements of an array.", "input": "", "output": "#include <iostream>\n \nvoid printArray(int arr[], int n) {\n    for (int i = 0; i < n; i++)\n       std::cout << arr[i] << ' ';\n \n    std::cout << '\\n';\n}", "category": "Python"}, {"instruction": "Generate a list with the numbers from 1 to 10 using Python.", "input": "", "output": "# Generate a list with the numbers from 1 to 10\nlistA = []\nfor i in range(1,11):\n    listA.append(i)\n    \nprint(listA)", "category": "Python"}, {"instruction": "Get a user input and check if the input is a palindrome.", "input": "", "output": "def is_palindrome(user_input):\n    rev_input = user_input[::-1]\n    \n    if (rev_input == user_input):\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Write a Python script to take two list and output the common elements of the given lists.", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]", "output": "def findCommon(list1,list2): \n    common = [] \n      \n    # traverse through elements of list1 \n    for x in list1: \n          \n        # traverse through elements of list2 \n        for y in list2: \n              \n            # if common element is found append to list \n            if x == y: \n                common.append(x) \n    return common", "category": "Python"}, {"instruction": "Create an HTML website with navigation, logo and footer.", "input": "<ninput>", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My Website</title>\n</head>\n<body>\n    <div class=\"navbar\">\n        <!-- navigation links here -->\n    </div>\n    <div class=\"logo\">\n        <!-- logo here -->\n    </div>\n    <div class=\"main-content\">\n        <!-- page content here -->\n    </div>\n    <div class=\"footer\">\n        <!-- footer here -->\n    </div>\n</body>\n</html>", "category": "Python"}, {"instruction": "Construct a regex in Java that matches a valid email address.", "input": "", "output": "String regex = \"^[\\\\w-_\\\\.+]*[\\\\w-_\\\\.]\\\\@([\\\\w]+\\\\.)+[\\\\w]+[\\\\w]$\";", "category": "Python"}, {"instruction": "Compute the median of an array of integers in Python.", "input": "[1, 2, 3, 4, 5]", "output": "def median(arr): \n    arr.sort() \n    if (len(arr) % 2 != 0): \n        return arr[len(arr) // 2] \n    else: \n        return (arr[(len(arr) // 2) - 1] + arr[len(arr) // 2]) / 2.0", "category": "Python"}, {"instruction": "Create an algorithm in JavaScript to merge two sorted arrays into one.", "input": "arr1 = [1, 3, 5, 7]\narr2 = [2, 4, 6, 8]", "output": "function mergeArrays(arr1, arr2) {\n    let result = [];\n    let index1 = 0;\n    let index2 = 0;\n\n    while (index1 < arr1.length && index2 < arr2.length) {\n        if (arr1[index1] < arr2[index2]) {\n            result.push(arr1[index1]);\n            index1++;\n        } else {\n            result.push(arr2[index2]);\n            index2++;\n        }\n    }\n\n    while (index1 < arr1.length) {\n        result.push(arr1[index1]);\n        index1++;\n    }\n\n    while (index2 < arr2.length) {\n        result.push(arr2[index2]);\n        index2++;\n    }\n\n    return result;\n}", "category": "Python"}, {"instruction": "Construct an HTML page with a table that displays employee information, including name, age, and salary.", "input": "", "output": "<html>\n  <head>\n    <title>Employee Information</title>\n  </head>\n  <body>\n    <table>\n      <tr>\n        <th>Name</th>\n        <th>Age</th>\n        <th>Salary</th>\n      </tr>\n      <tr>\n        <td>John</td>\n        <td>32</td>\n        <td>50000</td>\n      </tr>\n      <tr>\n        <td>Karen</td>\n        <td>30</td>\n        <td>45000</td>\n      </tr>\n      <tr>\n        <td>Bob</td>\n        <td>35</td>\n        <td>55000</td>\n      </tr>\n    </table>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create an algorithm in Python that sorts an array of n numbers using insertion sort.", "input": "[5, 3, 2, 4, 1]", "output": "def insert_sort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key", "category": "Python"}, {"instruction": "Create a data structure in C to store student information, including name, age, statistical data.", "input": "", "output": "#include <stdio.h>\n#include <string.h>\n\ntypedef struct {\n    char* name;\n    int age;\n    float statistics[];\n} student;", "category": "Python"}, {"instruction": "Create a Python function that takes one argument as an array of integers and returns the sum of all the integers.", "input": "[2, 3, 4, 5]", "output": "def sum_array(array):\n    res = 0\n    for i in array:\n        res += i\n    return res", "category": "Python"}, {"instruction": "Who is the author of the book \"Alice in Wonderland\"?", "input": "", "output": "The author of the book \"Alice in Wonderland\" is Lewis Carroll.", "category": "Python"}, {"instruction": "Write a method to sum up two matrices", "input": "Matrix A: [[3, 5, 7],\n           [1, 6, 9]]\nMatrix B: [[4, 8, 2],\n           [3, 5, 7]]", "output": "def matrix_addition(A, B):\n    if len(A) != len(B) or len(A[0]) != len(B[0]):\n        return 'Matrices cannot be added!'\n    else:\n        result = [[0 for i in range(len(A[0]))] for j in range(len(A))]\n        for i in range(len(A)):\n            for j in range(len(A[0])):\n                result[i][j] = A[i][j] + B[i][j]\n        return result\n\nA = [[3, 5, 7], [1, 6, 9]]\nB = [[4, 8, 2], [3, 5, 7]]\n\nprint(matrix_addition(A, B)) # [[7, 13, 9], [4, 11, 16]]", "category": "Python"}, {"instruction": "How to generate a random string of a given length in Python?", "input": "Length: 10", "output": "import random\nimport string\n\nlength = 10\n\nx = ''.join(random.choices(string.ascii_letters + string.digits, k=length))\nprint(x) # 'sbMTWHmfrh'", "category": "Python"}, {"instruction": "What is the Python built-in function to swap two values?", "input": "", "output": "The Python built-in function to swap two values is the \"tuple unpacking\" operator (x, y = y, x). This allows you to swap two variables without having to use a temporary variable.", "category": "Python"}, {"instruction": "What is the Euclidean distance between two points?", "input": "Two points: (1, 0) and (4, 3)", "output": "The Euclidean distance between two points (1, 0) and (4, 3) is 5.0.", "category": "Python"}, {"instruction": "Create a script to convert a number in scientific notation into a float", "input": "Number: 6.02e23", "output": "x = float(6.02e23)\nprint(x) # 6.02E+23", "category": "Python"}, {"instruction": "You need to write a function to find the sum of the squares of even numbers in a given list.", "input": "list_example = [2, 3, 4, 5]", "output": "def sum_of_even_squares(lst):\n    sum = 0\n    for elem in lst:\n        if elem % 2 == 0:\n            sum += elem**2\n    return sum\n\ntotal_sum = sum_of_even_squares(list_example) #total_sum is equal to", "category": "Python"}, {"instruction": "You need to write a function to find the absolute difference between a number and its reverse.", "input": "", "output": "def absolute_difference(n):\n    num = str(n)\n    rev = num[::-1]\n    diff = int(num) - int(rev)\n    return abs(diff)", "category": "Python"}, {"instruction": "Create a Bash script to delete the contents of a directory but preserve the directory structure.", "input": "", "output": "#!/bin/bash\nDIRECTORY=$1\nfind $DIRECTORY -mindepth 1 -maxdepth 1 -type f -exec rm '{}' \\;", "category": "Python"}, {"instruction": "Construct an SQL query to get the most recent entries from a table of blog posts.", "input": "", "output": "SELECT * FROM blog_posts ORDER BY timestamp DESC LIMIT 10;", "category": "Python"}, {"instruction": "Design a class that stores information about a person.", "input": "", "output": "class Person:\n    def __init__(self, first_name, last_name, age, gender):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n        self.gender = gender", "category": "Python"}, {"instruction": "Create a function that takes a string and returns the longest set of characters in descending order.", "input": "Hello World", "output": "def longest_substring(string):\n    longest = ''\n    current = ''\n    for i in range(len(string)):\n        if (i==0 or string[i] >= string[i-1]):\n            current += string[i]\n            if (len(current) > len(longest)):\n                longest = current\n        else:\n            current = string[i]\n    return longest", "category": "Python"}, {"instruction": "Given an array of integers, write a function to determine whether the array is a palindrome.", "input": "array = [1,2,3,2,1]", "output": "def isPalindrome(array): \n    return array == array[::-1]  # reversed array", "category": "Python"}, {"instruction": "Implement an efficient sorting algorithm in Python.", "input": "", "output": "def sort(arr): \n    if len(arr) == 0: \n        return [] \n    else: \n        pivot = arr[0] \n        lesser = sort([x for x in arr[1:] if x < pivot])\n        greater = sort([x for x in arr[1:] if x >= pivot])\n        return lesser + [pivot] + greater", "category": "Python"}, {"instruction": "Create a function in Swift to split a string by the given delimiter.", "input": "", "output": "func splitString(str: String, separator: String) -> [String] {\n    return str.components(separatedBy: separator)\n}", "category": "Python"}, {"instruction": "Write a function in JavaScript for computing the average value of a given array.", "input": "", "output": "function calculateAverage(arr) {\n    let sum = 0;\n    arr.forEach(element => {\n        sum += element;\n    });\n    return sum / arr.length;\n}", "category": "Python"}, {"instruction": "Modify the following code to make it work with big integers.", "input": "def multiply(x, y):\n    return x * y", "output": "def multiply(x, y):\n    return int(x) * int(y)", "category": "Python"}, {"instruction": "Generate a list of words that contain the substring \"al\" using Python.", "input": "", "output": "words = [\"arrival\", \"essential\", \"animal\", \"pascal\", \"medieval\", \"festival\", \"final\", \"spirited\", \"downfall\", \"functional\", \"locational\", \"fundamental\"]", "category": "Python"}, {"instruction": "Create a SQL query to join two tables on the customer_id column and print the name, age and income of all the customers.", "input": "Table 1: customer \ncustomer_id | name  | age\n1           | John  | 25\n2           | Doe   | 30\nTable 2: income\ncustomer_id | income\n1           | 30,000\n2           | 40,000", "output": "SELECT c.name, c.age, i.income\nFROM customer c\nINNER JOIN income i \nON c.customer_id = i.customer_id;", "category": "Python"}, {"instruction": "Using the data structure created in question 4, write a function to populate the person details.", "input": "name: John\nage: 23\nstreet: 123 Main St\ncity: New York\nstate: NY\nzip: 10222", "output": "def populate_person(name, age, street, city, state, zip):\n    person_data['name'] = name\n    person_data['age'] = age\n    person_data['address']['street'] = street\n    person_data['address']['city'] = city\n    person_data['address']['state'] = state\n    person_data['address']['zip'] = zip", "category": "Python"}, {"instruction": "Create an API endpoint in Node.js that would accept a GET request and print out the current date and time.", "input": "", "output": "app.get('/print-date-time', (req, res) => {\n    var newDate = new Date();\n    var currentDateTime = newDate.toLocaleString();\n    res.status(200).send(currentDateTime);\n});", "category": "Python"}, {"instruction": "Write a function in Java for calculating the Modified Julian Date for a given date.", "input": "", "output": "public double calculateModifiedJulianDate(String date) {\n    int year = Integer.parseInt(date.substring(0, 4));\n    int month = Integer.parseInt(date.substring(5, 7));\n    int day = Integer.parseInt(date.substring(8, 10));\n    int hour = Integer.parseInt(date.substring(11, 13));\n    int minute = Integer.parseInt(date.substring(14, 16));\n    int second = Integer.parseInt(date.substring(17));\n     \n    double julianDayNumber = 367*year - \n    (7.0/4.0) * (year + (month + 9)/12.0) + \n    (275.0/9.0)*(month) + day - 719561.5;\n \n    double modifiedJulianDayNumber = julianDayNumber + (hour + (minute + (second/60.0))/60.0)/24.0;\n \n    return modifiedJulianDayNumber;\n}", "category": "Python"}, {"instruction": "Create a program that implements a Stack (LIFO) using an array", "input": "", "output": "class Stack:\n    def __init__(self):\n        self.stack = []\n    \n    def push(self, item):\n        self.stack.append(item)\n    \n    def pop(self):\n        if self.is_empty():\n            return None\n        return self.stack.pop()\n    \n    def is_empty(self):\n        return len(self.stack) == 0", "category": "Python"}, {"instruction": "Insert this line of code to the third place in the for loop.", "input": "sum += i", "output": "for i in range(1, n):\n    sum += i - 1 \n    sum += i\n    sum += i + 1", "category": "Python"}, {"instruction": "Create a program that adds two sets of numbers together.", "input": "Set 1: [1, 3, 5]\nSet 2: [2, 4, 6]", "output": "def add_sets(set1, set2):\n    result=[]\n    for i in range(max(len(set1),len(set2))):\n        if i < len(set1):\n            result.append(set1[i])\n        if i < len(set2):\n            result.append(set2[i])\n    return result", "category": "Python"}, {"instruction": "Generate a loop that prints odd numbers between 0 to 10.", "input": "", "output": "for(int i = 0; i <= 10; i++){\n    if(i % 2 != 0)\n        System.out.println(i);\n}", "category": "Python"}, {"instruction": "Write Java code to generate a matrix of size n.", "input": "n = 5", "output": "public static int[][] generateMatrix(int n){\n    int[][] matrix = new int[n][n];\n    \n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            matrix[i][j] = i * n + j;\n        }\n    }\n    \n    return matrix;\n}", "category": "Python"}, {"instruction": "Design an algorithm to find the maximum number from a set of numbers", "input": "Set of numbers: [24, 5, 40, 15]", "output": "# Algorithm\n\n1. Initialize maximum as 0\n2. Iterate through each number in the set\n  a. if number > maximum:\n      i. set maximum as number\n3. Return maximum", "category": "Python"}, {"instruction": "Create a SQL query to find records from the given table with age greater than or equal to 30 and status is active.", "input": "Table:\nname   |  age  |  status\nJohn   |  28   |  Active\nDoe    |  30   |  Inactive\nAlice  |  40   |  Active", "output": "SELECT * FROM table \nWHERE age >= 30 AND status = 'Active';", "category": "Python"}, {"instruction": "Compute the absolute value of a given number.", "input": "x = -2", "output": "absX = abs(x)\nprint(\"Absolute value of\", x, \"is\", absX)", "category": "Python"}, {"instruction": "Describe 3 ways to make a web page more accessible", "input": "", "output": "Three ways to make a web page more accessible are:\n\n1. Provide alternative text for images and videos. This ensures people with vision or hearing impairment can understand the content on the page.\n2. Ensure that the page is navigable with a keyboard. This allows people who cannot use a mouse to still use the web page.\n3. Structure the page elements following standards such as HTML5 and ARIA to aid assistive technology users in navigating the page. This also helps machines understand the content and structure of a page.", "category": "Python"}, {"instruction": "Create a MongoDB query to find all documents where the 'name' field contains the string 'alex'.", "input": "", "output": "db.collection.find({\"name\": {$regex : /alex/i}})", "category": "Python"}, {"instruction": "Reverse the order of a list without using the built-in reverse function.", "input": "", "output": "def reverse_list(lst):\n    rev = []\n    for x in lst:\n        rev.insert(0, x)\n    return rev", "category": "Python"}, {"instruction": "What is the syntax to create a list of numbers from 0 to n in Python?", "input": "", "output": "def create_list(n):\n    return [i for i in range(n+1)]", "category": "Python"}, {"instruction": "How can we remove all elements of a list that meet a certain condition?", "input": "", "output": "def remove_condition(lst, condition):\n    return [x for x in lst if not condition(x)]", "category": "Python"}, {"instruction": "Write code to generate a random six-character string that contains at least one lowercase letter and one number.", "input": "", "output": "import string\nimport random\n\ndef generate_code():\n    chars = string.ascii_lowercase + string.digits\n    return ''.join(random.choices(chars, k=6))", "category": "Python"}, {"instruction": "You need to run a loop 'n' times and print a value each time.", "input": "let n = 10;", "output": "for (let i = 0; i < n; i++) {\n    console.log(i);\n}", "category": "Python"}, {"instruction": "Reorder an array of numbers in descending order.", "input": "let array = [3, 8, 5, 1, 9]", "output": "let sortedArray = array.sort((a,b) => b - a);", "category": "Python"}, {"instruction": "You need to generate an array of strings of length 5 to 10 characters.", "input": "", "output": "import string\nimport random\n\ndef generate_string_array(length):\n    # This function will generate an array of strings\n    array_of_strings = []\n    for _ in range(length):\n        new_string = ''.join(random.choice(string.ascii_lowercase) for _ in range(random.randint(5,10)))\n        array_of_strings.append(new_string)\n    return array_of_strings", "category": "Python"}, {"instruction": "Use regular expression to match all valid URLs in a string.", "input": "// This is a string containing valid and invalid URLs\nlet string = 'https://www.example.com/?q=test http://example.org#page http://example.com/# invalid_url'", "output": "let urls = string.match(/https?:\\/\\/(www\\.)?([a-zA-Z0-9][-a-zA-Z0-9]+\\.)+[a-zA-Z]+(\\/[-a-zA-Z0-9_:\\@&?=+,.!/~*'\\(\\)]*)?/g);", "category": "Python"}, {"instruction": "Create a script in Python which can generate random numbers in a given range.", "input": "", "output": "import random\n\ndef generate_random_number_in_range(min_value, max_value):\n    return random.randint(min_value, max_value)", "category": "Python"}, {"instruction": "You need to prefill an array with a given value.", "input": "let array = new Array(10);\nlet val = 'foo'", "output": "let prefilledArray = array.fill(val);", "category": "Python"}, {"instruction": "In JavaScript, write a function which can split a string into its constituent words.", "input": "", "output": "function split_string_to_words(string) {\n    return string.split(' ');\n}", "category": "Python"}, {"instruction": "You need to group an array of objects according to their property. Output an object containing the grouped items.", "input": "let array = [ \n    { name: \"John\", type: \"fruit\" }, \n    { name: \"Paul\", type: \"vegetable\" },\n    { name: \"Ringo\", type: \"fruit\" } \n]", "output": "let groupedItems = {\n    fruit: [{name: \"John\", type: \"fruit\"}, {name: \"Ringo\", type: \"fruit\"}],\n    vegetable: [{name: \"Paul\", type: \"vegetable\"}]\n}", "category": "Python"}, {"instruction": "Create a function in a Java class which can receive a string and remove punctuations.", "input": "", "output": "public class StringUtils {\n\n    public static String removePunctuation(String input) {\n        String output = input.replaceAll(\"[^a-zA-Z0-9 ]\", \"\");\n        return output;\n    }\n}", "category": "Python"}, {"instruction": "Generate a query in SQL which can retrieve the maximum price for each product.", "input": "", "output": "SELECT product_id, MAX(price)\nFROM product_table\nGROUP BY product_id;", "category": "Python"}, {"instruction": "Write a PHP function which receives an array as input and return a filtered array.", "input": "<?php \n$temp_array = array (1, 2, 3, 4, 5, 6, 7, 8, 9);", "output": "<?php\nfunction filter_array($array) {\n    // This function will filter the array and remove values that are not a number\n    $filtered_array = array();\n    foreach ($array as $value) {\n        if (is_numeric($value)) {\n            $filtered_array[] = $value;\n        }\n    }\n    return $filtered_array;\n}\n\n$temp_array = array (1, 2, 3, 4, 5, 6, 7, 8, 9);\n$filtered_array = filter_array($temp_array);", "category": "Python"}, {"instruction": "How can we check if a given string is a valid IP address or not?", "input": "", "output": "import re\n\ndef isvalid_ip(string):\n    regex = r\"^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$\"\n    if re.search(regex, string):\n        return True \n    else: \n        return False", "category": "Python"}, {"instruction": "How can we sort a given list of integers in ascending order?", "input": "", "output": "def sort_list(lst):\n    return sorted(lst)", "category": "Python"}, {"instruction": "How can we trim a specified amount of characters from the beginning of a string in Python?", "input": "", "output": "def trim_string(string, n):\n    return string[n:]", "category": "Python"}, {"instruction": "Design a MySQL query to retrieve the title of all subscribed books from the library database.", "input": "Table: books\nFields: id, title, author, is_subscribed", "output": "SELECT title \nFROM books \nWHERE is_subscribed IS TRUE;", "category": "Python"}, {"instruction": "What data structure would be best used to store a phone book?", "input": "", "output": "A hash table is a suitable data structure to store a phone book as it provides quick and efficient access to stored data via a simple hashing algorithm. This allows for simple lookups of data stored against a key, like a person's name. A hash table also provides quick insertion and deletion of data without impacting the efficiency of searches.", "category": "Python"}, {"instruction": "Write a Java Program to print the Fibonacci numbers for a given range.", "input": "", "output": "public class Fibonacci {\n\n    public static void main(String[] args) {\n         \n        int range = 10;\n        int i = 0;\n        int fibo = 0;\n        int fibo1 = 1;\n        int fibo2 = 1;\n\n        while(i <= range) {\n            System.out.print(fibo + \" \");\n            fibo = fibo1 + fibo2;\n            fibo1 = fibo2;\n            fibo2 = fibo;\n            i++;\n        }\n    }\n}", "category": "Python"}, {"instruction": "Explain the purpose of the \"head\" tag in HTML.", "input": "", "output": "The \"head\" tag in HTML is used to contain metadata about a page. This metadata includes tags such as title, description, js/css resources to include,  additional search keywords, etc. This metadata is essential for web search engine optimization and helps improve the visibility of the page on search engines. Additionally, the \"head\" tag can also be used to include additional scripts and style sheets to be used in the page.", "category": "Python"}, {"instruction": "Explain with a code snippet how to execute an AJAX request in JavaScript.", "input": "", "output": "const xhr = new XMLHttpRequest();\n\nxhr.open('GET', 'https://example.com/api');\nxhr.send();\n\nxhr.onreadystatechange = function() {\n    if (xhr.readyState === 4 && xhr.status === 200) {\n        // Response is ready and request was successful \n        console.log(xhr.responseText);\n    }\n}", "category": "Python"}, {"instruction": "Create an HTML form for entering a user's age.", "input": "", "output": "<form>\n    <label for=\"age\">Age: </label>\n    <input type=\"number\" name=\"age\" id=\"age\"/>\n</form>", "category": "Python"}, {"instruction": "Update the following Swift code to print the message \"Hello from Swift!\".", "input": "", "output": "print(\"Hello from Swift!\")", "category": "Python"}, {"instruction": "Design a query in SQLite to retrieve information about the books with more than 10 pages.", "input": "Table: books\nFields: id, title, author, num_pages", "output": "SELECT title, author, num_pages \nFROM books \nWHERE num_pages > 10;", "category": "Python"}, {"instruction": "Name 3 methods for making a web page more responsive", "input": "", "output": "Three methods for making a web page more responsive are:\n\n1. Minimize the number and size of images used in the page. This reduces the page size and load time. \n2. Implement lazy loading of images, i.e. delay loading images until they are needed. This helps avoid loading images that are far down the page and will not be visible to the user.\n3. Make use of modern web technologies such as AJAX to asynchronously update elements on the page without requiring a full page refresh.", "category": "Python"}, {"instruction": "Construct a web page with three columns and a header.", "input": "", "output": "<html>\n  <head>\n    <title>Three Column Page</title>\n  </head>\n  <body>\n    <h1> Three Column Page </h1>\n    <div>\n      <div style=\"float:left;width:33%;\">\n        Content for Column 1\n      </div>\n      <div style=\"float:left;width:33%;\">\n        Content for Column 2\n      </div>\n      <div style=\"float:left;width:33%;\">\n        Content for Column 3\n      </div>\n    </div>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Construct a HTML form with three input fields and a submit button.", "input": "", "output": "<form>\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" id=\"name\" name=\"name\"><br><br>\n  <label for=\"age\">Age:</label>\n  <input type=\"number\" id=\"age\" name=\"age\"><br><br>\n  <label for=\"salary\">Salary:</label>\n  <input type=\"number\" id=\"salary\" name=\"salary\"><br><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Design a SQL query to list all the unique authors in the book table.", "input": "Table: books\nFields: id, title, author, is_subscribed", "output": "SELECT DISTINCT author\nFROM books;", "category": "Python"}, {"instruction": "Write a method in Java that takes a string as input and returns its length.", "input": "", "output": "public static int getStringLength(String str) \n{ \n    // Return the length of the string\n    return str.length(); \n}", "category": "Python"}, {"instruction": "Write a function in C# to find the area of a triangle given 3 side lengths.", "input": "", "output": "public static double Area(double a, double b, double c) \n{ \n    // Calculate the semiperimeter  \n    double s = (a + b + c) / 2; \n  \n    // Calculate the area  \n    double area = Math.Sqrt(s * (s - a) * (s - b) * (s - c)); \n  \n    return area; \n}", "category": "Python"}, {"instruction": "Edit the following CSS code to make all headings appear in bold.", "input": "h1, h2, h3 {\n    font-size: 1em;\n    color: #111111;\n}", "output": "h1, h2, h3 {\n    font-size: 1em;\n    color: #111111;\n    font-weight: bold;\n}", "category": "Python"}, {"instruction": "Write a SQL query to list the names of all members who have not yet made a payment this month.", "input": "Table:  members\nFields:  member_id, name, paid_this_month", "output": "SELECT name \nFROM members \nWHERE paid_this_month IS FALSE;", "category": "Python"}, {"instruction": "Create a node module for connecting to a MongoDB database", "input": "", "output": "const MongoClient = require('mongodb').MongoClient;\n\n// Connect to the db\nmodule.exports.connect = function(opts, callback) {\n  MongoClient.connect(opts.db_url, (err, client) => {\n    if (err) {\n      return callback(err);\n    }\n    const db = client.db(opts.db_name);\n    return callback(null, db);\n  });\n};", "category": "Python"}, {"instruction": "Create a Java program that calculates the probability of rolling a pair of dice and getting the number 8.", "input": "", "output": "public static double calculateProbability(int target) {\n    int numFavorableOutcomes = 0;\n    int numTotalOutcomes = 36;\n    for (int i = 1; i <=6; i++) {\n        for (int j = 1; j <= 6; j++) {\n            if (i + j == target) {\n                numFavorableOutcomes++;\n            }\n        }\n    }\n    return (double) numFavorableOutcomes/numTotalOutcomes;\n}", "category": "Python"}, {"instruction": "Using the given code, create a JavaScript to add an item to the data array.", "input": "let data = [\n  {name:\"John\", age:20},\n  {name:\"Amy\", age:21}\n]", "output": "data.push({name: 'Bob', age: 25});", "category": "Python"}, {"instruction": "Convert a natural number to its binary representation.", "input": "n = 4", "output": "bin_n = bin(n)\nprint(bin_n) # Returns 0b100", "category": "Python"}, {"instruction": "Determine whether a given number is divisible by 3.", "input": "n = 15", "output": "if n % 3 == 0:\n    print(str(n) + \" is divisible by 3.\")\nelse:\n    print(str(n) + \" is not divisible by 3.\")", "category": "Python"}, {"instruction": "Write a Python program to generate a 3x3 Identity matrix", "input": "", "output": "def generate_identity_matrix():\n    matrix = [[0, 0, 0],\n              [0, 0, 0],\n              [0, 0, 0]]\n\n    for i in range(len(matrix)):\n        for j in range(len(matrix)):\n            if i == j:\n                matrix[i][j] = 1\n            else:\n                matrix[i][j] = 0\n    \n    return matrix", "category": "Python"}, {"instruction": "Edit the code to produce the output of the following matrix multiplication", "input": "X = [[2, 3, 9],\n     [8, 7, 6],\n     [1, 6, 4]]\nY = [[9, 4, 5],\n     [7, 3, 3],\n     [2, 1, 5]]", "output": "X = [[2, 3, 9],\n     [8, 7, 6],\n     [1, 6, 4]]\nY = [[9, 4, 5],\n     [7, 3, 3],\n     [2, 1, 5]]\n\ndef mat_mult(X, Y):\n    result = [[0, 0, 0],\n              [0, 0, 0],\n              [0, 0, 0]]\n    for i in range(len(X)):\n        for j in range(len(Y[0])):\n            for k in range(len(Y)):\n                result[i][j] += X[i][k] * Y[k][j]\n    return result", "category": "Python"}, {"instruction": "Print the following statements in a sorted order", "input": "I am learning Python\nI am learning Java", "output": "I am learning Java\nI am learning Python", "category": "Python"}, {"instruction": "Edit this code so it prints the sum of the increasing odd numbers from 10 to 50", "input": "total = 0\nfor num in range(10, 50):\n    if num % 2 == 0:\n        total += num", "output": "total = 0\nfor num in range(10, 50, 2):\n    total += num", "category": "Python"}, {"instruction": "Write a SQL query for finding the oldest student record in the table", "input": "Table Name: Students", "output": "SELECT * \nFROM Students\nORDER BY age DESC\nLIMIT 1;", "category": "Python"}, {"instruction": "Write a basic HTML structure with two navigation links", "input": "", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>Document</title>\n</head>\n<body>\n <header>\n   <nav>\n     <a href=\"#\">Link 1</a>\n     <a href=\"#\">Link 2</a>\n   </nav>\n </header>\n\n </body>\n</html>", "category": "Python"}, {"instruction": "Remove all duplicates from this list using Python", "input": "list=[5,5,5,7,8,8,9]", "output": "list=[5,7,8,9]\n\nlist = list(dict.fromkeys(list))", "category": "Python"}, {"instruction": "Create a basic JavaScript program to accept user input and print out the result", "input": "", "output": "let userInput = prompt('Please enter some input.');\nalert(`The input entered was ${userInput}`);", "category": "Python"}, {"instruction": "Write a basic HTML structure with a header and a footer", "input": "", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>Document</title>\n</head>\n<body>\n <header>\n  <!-- Header Content Here -->\n </header>\n\n <main>\n  <!-- Page Content Here -->\n </main>\n\n <footer>\n  <!-- Footer Content Here -->\n </footer>\n</body>\n</html>", "category": "Python"}, {"instruction": "Generate code to find the maximum element from a given list", "input": "list=[-2, 12, 3, 0, -5]", "output": "def find_max(list):\n    max_element = float('-inf')\n    for element in list:\n        if element > max_element:\n            max_element = element\n    return max_element\n\nprint(find_max(list)) # Prints 12", "category": "Python"}, {"instruction": "Use a for loop to add up all odd elements in a list", "input": "list=[4,5,7,9,11,3]", "output": "odd_total = 0\nfor element in list:\n    if element % 2 != 0:\n        odd_total += element\nprint(odd_total) # Prints 25", "category": "Python"}, {"instruction": "Create a program that takes no input and prints out the phrase \"Hello World\".", "input": "", "output": "print(\"Hello World\")", "category": "Python"}, {"instruction": "Write a basic python program to accept a string input, use it to create a dictionary and sort it by alphabetical order", "input": "ToBeOrNotToBe", "output": "inp =raw_input(\"Enter String:\")\nmy_dict = {}\nfor character in inp:\n     if character not in my_dict:\n         my_dict[character] = 1\n     else:\n         my_dict[character] += 1\n\nsorted_order = sorted(my_dict.items(), key=lambda x: x[0])\n\nprint(\"Sorted Dictionary\")\nfor character in sorted_order:\n    print(\"{} : {}\".format(character[0], character[1]))", "category": "Python"}, {"instruction": "Create a class in Java that takes two parameters, \"name\" and \"age\".", "input": "", "output": "public class User {\n  private String name;\n  private int age;\n\n  public User(String name, int age) {\n    this.name = name;\n    this.age = age;\n  }\n\n  public String getName() {\n    return this.name;\n  }\n\n  public int getAge() {\n    return this.age;\n  }\n}", "category": "Python"}, {"instruction": "Write a function that takes a two-dimensional array and returns its transpose.", "input": "arr = [[1,2,3], [4,5,6], [7,8,9]]", "output": "def transpose(arr):\n    transpose_arr = [[0] *len(arr) for _ in range(len(arr[0]))]\n    for row in range(len(arr)):\n        for col in range(len(arr[0])):\n            transpose_arr[col][row] = arr[row][col]\n    return transpose_arr", "category": "Python"}, {"instruction": "Write a function to reverse an integer.", "input": "x = 12345", "output": "def reverse_integer(x):\n    rev_int = 0\n    while x > 0:\n        rev_int = rev_int * 10 + (x % 10)\n        x //= 10\n    return rev_int", "category": "Python"}, {"instruction": "Write a function to simulate a dice roll.", "input": "", "output": "import random\n\ndef roll_dice():\n    return random.randint(1, 6)", "category": "Python"}, {"instruction": "Develop a JS snippet to display the elements in an ordered list.", "input": "", "output": "let list = document.getElementById('list');\nlist.innerHTML = '';\nlist.appendChild(document.createElement('ul'));\nfor (let i = 0; i < elements.length; i++) {\n    list.firstChild.appendChild(document.createElement('li')).innerHTML = elements[i];\n}", "category": "Python"}, {"instruction": "Create a function in C that takes in a number and returns \"true\" if it is divisible by 3 or else returns \"false\".", "input": "$num = 9", "output": "#include <stdbool.h>\n\nbool is_divisible_by_three(int num){\n\tif (num % 3 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}", "category": "Python"}, {"instruction": "Write a function in PHP that takes in two integers and prints the smallest one.", "input": "$num1 = 5;\n$num2 = 10;", "output": "function smallest($num1, $num2) {\n    if ($num1 < $num2) {\n        echo \"$num1 is smaller\";\n    } else if ($num2 < $num1) {\n        echo \"$num2 is smaller\";\n    } else {\n        echo \"Both numbers are equal\";\n    }\n}", "category": "Python"}, {"instruction": "Go through the following code and make sure there is an appropriate return statement at the end.", "input": "def add_two_numbers(num1, num2):\n    num3 = num1 + num2\n    print(num3)", "output": "def add_two_numbers(num1, num2):\n    num3 = num1 + num2\n    print(num3)\n    return num3", "category": "Python"}, {"instruction": "Write a module in Rust to identify palindromic strings.", "input": "", "output": "fn is_palindrome(target: &str) -> bool {\n    let mut char_vec: Vec<char> = target.chars().collect();\n    char_vec.reverse();\n    let reversed_target: String = char_vec.into_iter().collect();\n    if target == reversed_target {\n        return true;\n    }\n    return false;\n}", "category": "Python"}, {"instruction": "Create a JavaScript class that takes in two strings and returns the longer string.", "input": "string1 = \"Hello\"\nstring2 = \"World\"", "output": "class LongerString {\n    constructor(str1, str2) {\n        this.string1 = str1;\n        this.string2 = str2;\n    }\n    \n    getLongerString() {\n        return (this.string1.length > this.string2.length) ? this.string1 : this.string2;\n    }\n}", "category": "Python"}, {"instruction": "Create a function in Python that takes in a string and returns a list of all unique characters in it.", "input": "string = \"banana\"", "output": "def unique_chars(string): \n    char_list = [] \n    for char in string: \n        if(char not in char_list): \n            char_list.append(char) \n    return char_list", "category": "Python"}, {"instruction": "Write a function that takes in two arrays of integers and returns the sum of the elements in both arrays.", "input": "array1 = [1, 2, 3] \narray2 = [4, 5, 6]", "output": "def sum_arrays(arr1, arr2):\n    sums = []\n    for i in range(len(arr1)):\n        sums.append(arr1[i] + arr2[i])\n    return sums", "category": "Python"}, {"instruction": "Write a query in MySQL for finding all the customers who have ordered a specific product.", "input": "SELECT * FROM orders", "output": "SELECT * \nFROM orders \nWHERE orders.productID = <Specific Product ID>;", "category": "Python"}, {"instruction": "Edit the following code so it prints out a message when the condition is true.", "input": "if condition:", "output": "if condition:\n    print(\"Condition is true!\")", "category": "Python"}, {"instruction": "Edit the following code to include user input.", "input": "def hello_world():\n    # Prints \"Hello, World!\"\n    print(\"Hello, World!\")", "output": "def hello_world():\n    # Prompt user for input\n    user_input = input(\"Please enter your name: \")\n\n    # Prints \"Hello, {user_input}!\"\n    print(\"Hello, {}!\".format(user_input))", "category": "Python"}, {"instruction": "Create a function to evaluate a given expression written in infix notation.", "input": "exp = \"5 + (7 * 8) / 3\"", "output": "def eval_exp(exp): \n    stack = [] \n  \n    for char in exp: \n        if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or char in \"0123456789\": \n            stack.append(char)\n  \n        else: \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + char + val1))) \n  \n    return int(stack.pop()) \n\nprint(eval_exp(exp))", "category": "Python"}, {"instruction": "Write a Java code to find the longest common prefix in a string array.", "input": "String [] arr = {\"flower\",\"flow\",\"flight\"}", "output": "public static String longestCommonPrefix(String[] arr) \n{ \n    if (arr.length == 0) \n        return \"\"; \n  \n    String prefix = arr[0]; \n  \n    for (int i = 1; i < arr.length; i++) \n    { \n        while (arr[i].indexOf(prefix) != 0) \n        {\n            prefix = prefix.substring(0, prefix.length() - 1); \n            if (prefix.isEmpty()) \n                return \"\";  \n        } \n    } \n    return prefix; \n}", "category": "Python"}, {"instruction": "Construct an SQL statement to select the customers who have orders with a total price over $100.", "input": "", "output": "SELECT c.name from customers as c\nLEFT JOIN orders as o\n    ON c.customer_id = o.customer_id\nWHERE o.total_price > 100", "category": "Python"}, {"instruction": "Write a script to calculate the sum of two numbers stored in variables.", "input": "var x = 4; \nvar y = 10;", "output": "function sum(x,y) {\n  return x + y;\n}\n\nconsole.log(sum(x,y));", "category": "Python"}, {"instruction": "Create a switch statement to convert a string input to its corresponding enumerated type.", "input": "Input: \"Red\", \"Blue\", \"Green\", \"Yellow\"", "output": "enum Color {\n    Red,\n    Blue,\n    Green,\n    Yellow\n};\n\nColor color;\nstd::string str = \"Red\";\nswitch (str) {\n    case \"Red\":\n        color = Color::Red;\n        break;\n    case \"Blue\":\n        color = Color::Blue;\n        break;\n    case \"Green\":\n        color = Color::Green;\n        break;\n    case \"Yellow\":\n        color = Color::Yellow;\n        break;\n    default:\n        color = Color::Red;\n        break;\n}", "category": "Python"}, {"instruction": "What is the most important concept in object-oriented programming?", "input": "", "output": "The most important concept in object-oriented programming is encapsulation, which refers to the process of packaging related data and functionality together in an object. Encapsulation provides a high degree of abstraction and modularity, allowing developers to manage complexity and reduce the dependencies between various classes of objects.", "category": "Python"}, {"instruction": "Go through the following code and create test cases for it.", "input": "def reverse_string(string):\n  rev_str = \"\"\n\n  # Loop through the string in reverse order\n  for i in range(len(string)-1, -1, -1):\n    rev_str += string[i]\n\n  return rev_str", "output": "import unittest\n\nclass ReverseStringTests(unittest.TestCase):\n    def test_reverse_string_with_single_character_string(self):\n        result = reverse_string(\"a\")\n        self.assertEqual(result, \"a\")\n\n    def test_reverse_string_with_even_length_string(self):\n        result = reverse_string(\"hello\")\n        self.assertEqual(result, \"olleh\")\n\n    def test_reverse_string_with_odd_length_string(self):\n        result = reverse_string(\"world\")\n        self.assertEqual(result, \"dlrow\")\n\n\nif __name__ == '_main_':\nunittest.main()", "category": "Python"}, {"instruction": "Explain the differences between the list, set, and dictionary data structures in Python.", "input": "", "output": "List is an ordered sequence of data that can hold duplicate values. It is one of the most widely used data structures in Python, and is created by placing all the items in a square bracket and separating them by commas. Set is an unordered collection of data that cannot hold duplicate values. Set is created by enclosing all the items in a set() function. Dictionary is an unordered collection of key:value pairs. It is similar to real-life dictionaries in that it stores key-value pairs and retrieves values based on the associated key. It is created with curly brackets and key:value pairs, separated by commas.", "category": "Python"}, {"instruction": "Create a program in Ruby that takes in a number and then checks if it is divisible by three.", "input": "", "output": "def check_divisibility(number)\n  if (number % 3 == 0)\n    puts 'The number is divisible by three.'\n  else \n    puts 'The number is not divisible by three.'\n  end \nend\n\ncheck_divisibility(9)", "category": "Python"}, {"instruction": "Explain in brief the concept of type casting in programming languages.", "input": "", "output": "Type casting is the process of converting one data type into another. It is generally used to convert values from one type to another in order to perform specific operations. In programming languages, type casting involves converting a value of one data type such as an integer or a string into a new data type such as a float or a boolean. Type casting ensures that the operations performed on the data are valid and helps reduce the chances of errors due to incompatibility of data types.", "category": "Python"}, {"instruction": "Write a MySQL query to select all students from a table named \"students\" whose age is greater than 18.", "input": "", "output": "SELECT * FROM students WHERE age > 18;", "category": "Python"}, {"instruction": "Create a JavaScript function that takes an array of objects and returns an array of objects with unique values by a specified key.", "input": "var input = [\n { id: 1, name: 'John' }, \n { id: 2, name: 'John' },\n { id: 3, name: 'Alice'},\n]", "output": "function getUniqueValuesByKey(arr, key) {\n const set = new Set();\n return arr.filter((el) => {\n const valueToCheck = el[key];\n const isUnique = !set.has(valueToCheck);\n if (isUnique) set.add(valueToCheck);\n return isUnique;\n });\n}", "category": "Python"}, {"instruction": "Write a Bash shell script that takes two integers as arguments and prints the sum of those two numbers.", "input": "", "output": "#!/bin/bash\nif [ \"$#\" -ne 2 ]; then \n    echo \"Usage: sum.sh number1 number2\"\n    exit 1 \nfi\nsum=$(($1+$2))\necho \"Sum of $1 and $2 is $sum\"", "category": "Python"}, {"instruction": "Write an HTML code snippet to override the default font-size attribute of the body tag.", "input": "", "output": "<body style=\"font-size: 16px;\">", "category": "Python"}, {"instruction": "Write a code snippet to replace the given character in a string with another given character.", "input": "str = \"This is a string\"\nold_char = 's'\nnew_char = 'x'", "output": "str = str.replace(old_char, new_char)", "category": "Python"}, {"instruction": "Using the provided values and data structure, create a program in C to check if two points belong to the same quadrant.", "input": "Point1 = {1, -2}\nPoint2 = {-3, 4}", "output": "#include<stdio.h>\n\nint is_same_quadrant(int x1, int y1, int x2, int y2) \n{ \n    //determining quadrants for coordinates\n    int q1 = (y1 >= 0) ? (x1 >= 0 ? 1 : 2) : (x1 >= 0 ? 4 : 3); \n    int q2 = (y2 >= 0) ? (x2 >= 0 ? 1 : 2) : (x2 >= 0 ? 4 : 3); \n  \n    // If both the coordinates \n    // belongs to same quadrants \n    // then returns 1 \n    return (q1 == q2); \n} \n\nint main() \n{ \n    int x1 = 1, y1 = -2;\n    int x2 = -3, y2 = 4;\n  \n    if(is_same_quadrant(x1, y1, x2, y2)) \n        printf(\"Yes\"); \n    else\n        printf(\"No\"); \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "What is the time complexity of the Bubble Sort algorithm?", "input": "", "output": "The time complexity of Bubble Sort is O(n^2).", "category": "Python"}, {"instruction": "Write a HTML code snippet for a navigation bar which contains three links with the text \"Home\", \"About\", and \"Contact\".", "input": "", "output": "<nav>\n  <a href=\"index.html\">Home</a>\n  <a href=\"about.html\">About</a>\n  <a href=\"contact.html\">Contact</a>\n</nav>", "category": "Python"}, {"instruction": "Using the provided objects and classes, write a code snippet in Python to implement polymorphism.", "input": "class Animal:\n  def sound(self):\n    pass\n\nclass Cat(Animal):\n  def sound(self):\n    print(\"Meow\")\n\nclass Dog(Animal):\n  def sound(self):\n    print(\"Bark\")", "output": "def make_sound(animal):\n  animal.sound()\n  \nmake_sound(Cat())  #Prints \"Meow\"\nmake_sound(Dog())  #Prints \"Bark\"", "category": "Python"}, {"instruction": "Using the provided data structure, create a class in Python to represent a car.", "input": "car = { \n    \"make\": \"Honda\", \n    \"model\": \"Civic\", \n    \"year\": 2011\n}", "output": "class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n    \n    def __str__(self):\n        return f\"{self.make} {self.model} ({self.year})\"", "category": "Python"}, {"instruction": "Reverse the order of words in a given sentence.", "input": "sentence = \"This is Python Language\"", "output": "words = sentence.split(\" \") \n   \nreverse_sentence = ' '.join(reversed(words)) \n   \nprint(reverse_sentence)", "category": "Python"}, {"instruction": "Write a Python program to generate a dictionary that contains a number (x) of random numbers.", "input": "x = 10", "output": "import random\n\nrandom_numbers = {} \n  \nfor i in range(x + 1): \n    n = random.randint(1, 50) \n      \n    random_numbers[i+1] = n\n      \nprint(random_numbers)", "category": "Python"}, {"instruction": "Refactor this code to use the built-in functions.", "input": "def find_odd(array):\n    is_odd = False\n    for element in array:\n        if element % 2 == 1:\n            is_odd = True\n            break\n    return is_odd", "output": "def find_odd(array):\n    return any(element % 2 == 1 for element in array)", "category": "Python"}, {"instruction": "Search for the index of a given element in a given array.", "input": "array = [1,2,3,4,5]\nelement = 3", "output": "index = array.index(element)\nprint(\"Index of the element\", element, \"is\", index)", "category": "Python"}, {"instruction": "Create a Python class for a student that holds their name, age and grade.", "input": "", "output": "class Student:\n def __init__(self, name, age, grade):\n  self.name = name\n  self.age = age\n  self.grade = grade\n\ndef get_student_info(self):\n  return (f\"{self.name}, {self.age}, {self.grade}\")", "category": "Python"}, {"instruction": "Write a SELECT query in MySQL to retrieve the names of all students whose last name is Jones", "input": "", "output": "SELECT name FROM students WHERE last_name = 'Jones';", "category": "Python"}, {"instruction": "You need to create a function that takes a character as input and prints out all words from a given dictionary that start with the given character.", "input": "dictionary = [\"apple\", \"ball\", \"cat\", \"dog\"]\ncharacter = 'd'", "output": "def search_dictionary(dictionary, character):\n    result = []\n    for word in dictionary:\n        if word[0] == character:\n            result.append(word)\n    return result", "category": "Python"}, {"instruction": "You need to remove duplicates from a list while preserving the order of the items.", "input": "", "output": "def remove_duplicates(list):\n    output = []\n    seen = set()\n    for i in list:\n        if i not in seen:\n            seen.add(i)\n            output.append(i)\n        return output", "category": "Python"}, {"instruction": "Using CSS, style the <h1> tag with font color, font size, and font family of your choice.", "input": "", "output": "h1 {\n  color: #000000;\n  font-size: 24px;\n  font-family: Arial, Helvetica, sans-serif;\n}", "category": "Python"}, {"instruction": "Upon user entry, filter the array of objects to find the relevant object.", "input": "const array = [\n{name:\"John\", age: 20}, \n{name:\"Jane\", age: 21}, \n{name:\"Jim\", age: 22}, \n]", "output": "function filterArray(userInput) {\n  return array.filter(item => item.name === userInput);\n}", "category": "Python"}, {"instruction": "Write an SQL query that returns the 5 most popular books in the library.", "input": "SELECT * FROM libraryBook", "output": "SELECT bookID, bookTitle, COUNT(*) AS Count \nFROM libraryBook \nGROUP BY bookID, bookTitle \nORDER BY Count DESC \nLIMIT 5;", "category": "Python"}, {"instruction": "Create a Swift method to sort a dictionary alphabetically.", "input": "Dictionary - key1: value1, key2: value2, key3: value3", "output": "func sort(dict: [String: String]) -> [String: String] {\n    let sortedKeys = dict.keys.sorted { $0 < $1 }\n    var sortedDict = [String: String]()\n    for key in sortedKeys {\n        sortedDict[key] = dict[key]\n    }\n    return sortedDict\n}", "category": "Python"}, {"instruction": "Construct a java method to convert alphabets to uppercase.", "input": "String str = \"This is a great day\"", "output": "public static String convertToUpper(String str){ \n   char ch[]= str.toCharArray(); \n   for (int i=0; i < str.length(); i++){ \n      if (ch[i] >= 'a' && ch[i] <= 'z') { \n         // convert into uppercase \n         ch[i] = (char)(ch[i] - 'a' + 'A'); \n      } \n   } \n   String st = new String(ch); \n   return st; \n}", "category": "Python"}, {"instruction": "Design a regular expression for validating email address.", "input": "", "output": "^[a-z0-9]+@[a-z]+\\.[a-z]+$", "category": "Python"}, {"instruction": "Write a PHP code to fetch data from a database table.", "input": "Database name: UsersTable\nTable name: Users", "output": "$query = \"SELECT * FROM Users\";\n$result = mysqli_query($conn, $query);\nwhile ($row = mysqli_fetch_array($result)) {\n    // Perform operations on the data\n}", "category": "Python"}, {"instruction": "Create a script in PHP that checks if a number is odd or even.", "input": "", "output": "<?php\n \nfunction checkNumber($number){\n   if($number % 2 == 0){\n     echo \"The number is even.\";\n   } else {\n     echo \"The number is odd.\";\n   }\n}\n\ncheckNumber(3);\n?>", "category": "Python"}, {"instruction": "Translate the following sentence into binary language.", "input": "This is a great day.", "output": "01010100 01101000 01101001 01110011 00100000 01101001 01110011 00100000 01100001 00100000 01100111 01110101 01110100 01100101 01110011 00100000 01100100 01100001 01110100 00100001", "category": "Python"}, {"instruction": "Design a SQL query to search for a specific character string in a table.", "input": "Table name: usertable\nCharacter string: HelloWorld", "output": "SELECT * FROM usertable WHERE fieldname LIKE '%HelloWorld%'", "category": "Python"}, {"instruction": "Create a HTML paragraph tag with the text \"This is a awesome place\".", "input": "", "output": "<p>This is an awesome place</p>", "category": "Python"}, {"instruction": "Write a java code to calculate the sum of two numbers provided as input.", "input": "int num1 = 25;\nint num2 = 24;", "output": "int result = num1 + num2; \nSystem.out.println(result);", "category": "Python"}, {"instruction": "Write a python code to concatenate two strings and reverse the result.", "input": "string1 = \"Hello\"\nstring2 = \"World\"", "output": "res = string1+string2\nres = res[::-1] \nprint(res)", "category": "Python"}, {"instruction": "You need to create a regex (regular expression) to check if a given string contains a given substring.", "input": "", "output": "import re\n\ndef check_substring(string, substring):\n    pattern = r\".*\"+substring+\".*\"\n    if re.match(pattern, string):\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "You need to convert any given number to its octal representation.", "input": "", "output": "def octal_representation(num):\n    output = \"\"\n    while num > 0:\n        output = str(num % 8) + output\n        num //= 8\n    return output", "category": "Python"}, {"instruction": "You need to write a program to convert a given number to its binary representation.", "input": "", "output": "def binary_representation(num):\n  if num > 1:\n    binary_representation(num//2)\n  print(num % 2, end = '')", "category": "Python"}, {"instruction": "Write a JavaScript code to detect whether a webpage contains a specific text or not.", "input": "Page content: \"This is the awesome page.\"\nText to be searched: \"awesome\"", "output": "if(document.body.innerHTML.indexOf('awesome') > -1){\n    console.log('Text found!');\n} else {\n    console.log('Text not found!');\n}", "category": "Python"}, {"instruction": "Write a JavaScript to read the following JSON object and print its \"name\" key value", "input": "data = {\n  \"name\": \"John\",\n  \"age\": \"33\",\n  \"city\": \"New York\"\n}", "output": "console.log(data.name);", "category": "Python"}, {"instruction": "Write a SQL query to find the names of all customers whose last names start with the letter \"S\".", "input": "", "output": "SELECT * FROM customers WHERE last_name LIKE 'S%';", "category": "Python"}, {"instruction": "Create a JavaScript object with two keys, \"firstName\" and \"lastName\". The values should be two strings, your first and last name.", "input": "", "output": "let user = {\n  firstName: 'Jane',\n  lastName: 'Doe'\n};", "category": "Python"}, {"instruction": "Describe what an abstract class is used for.", "input": "", "output": "An abstract class is a class that contains abstract methods and variables. Abstract classes are meant to be inherited and customized by their subclasses. They are used to provide basic implementations of commonly used methods, as well as impose a common interface between different subclasses.", "category": "Python"}, {"instruction": "Sort these integers in ascending order.", "input": "6, 5, 10, 1", "output": "[1, 5, 6, 10]", "category": "Python"}, {"instruction": "Given a sentence, separate the words and store them in an array.", "input": "Sentence: Programming is fun.", "output": "words = [\"Programming\", \"is\", \"fun\"]", "category": "Python"}, {"instruction": "Edit the output of a C program so that the last line prints \"Hello World!\"", "input": "#include <stdio.h>\n\nint main()\n{\n    printf(\"Hello!\");\n    return 0;\n}", "output": "#include <stdio.h>\n\nint main() \n{ \n    printf(\"Hello!\"); \n    printf(\"Hello World!\"); \n    return 0; \n}", "category": "Python"}, {"instruction": "Analyze an HTML text to check if it contains the tag <p>", "input": "<p>This is a paragraph.</p>", "output": "def has_p_tag(html):\n    return \"<p>\" in html\n    \nhas_p_tag(\"<p>This is a paragraph.</p>\") # output True", "category": "Python"}, {"instruction": "Develop Python code to print out all the divisors of a given number", "input": "30", "output": "def get_divisors(n):\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors \n\nprint(get_divisors(30)) # output [1, 2, 3, 5, 6, 10, 15, 30]", "category": "Python"}, {"instruction": "Create an algorithm to generate a random password", "input": "", "output": "def generate_password(length):\n  password = \"\"\n  characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()\"\n  for i in range(length):\n    password += choice(characters)\n  return password\n\nprint(generate_password(10)) // output 5s@N#s9J@2", "category": "Python"}, {"instruction": "Write a Ruby script to calculate the square root of a number", "input": "", "output": "def sqrt(number)\n  Math.sqrt(number)\nend \n\nputs sqrt(9) # output 3.0", "category": "Python"}, {"instruction": "Write a Visual Basic Script to add two numbers", "input": "", "output": "Function add(a As Integer, b As Integer)\n    add = a + b \nEnd Function\n\nMsgBox(add(5, 2))", "category": "Python"}, {"instruction": "Given a sentence as input, check if the sentence is a palindrome", "input": "\"Madam, I'm Adam\"", "output": "def is_palindrome(s):\n    s = s.replace(\" \", \"\")\n    return s == s[::-1]\n\nis_palindrome(\"Madam, I'm Adam\") # returns True", "category": "Python"}, {"instruction": "Create an object-oriented program in Java to calculate the area of a  rectangle.", "input": "", "output": "public class Rectangle {\n    private int width;\n    private int height;\n\n    public Rectangle(int width, int height){\n        this.width = width;\n        this.height = height;\n    }\n\n    public int calculateArea(){\n        return this.width * this.height; \n    }\n}", "category": "Python"}, {"instruction": "Compress a given string by counting the occurrences of each character.", "input": "", "output": "def compress_string(s):\n    l = len(s) \n    \n    # If operations length is 0 \n    if l == 0: \n        return \"\" \n  \n    # Erroneous characters in the  \n    #original string are ignored. \n    if l == 1 or s[0] == s[1]: \n        return s[0] + str(1) \n    \n    # Initialize the variable \n    count = 1\n    s1 = \"\" \n     \n    # Here i is the indexing variable \n    i = 1\n    while i < l: \n            # If the current character matches with the next one \n            if (s[i] == s[i - 1]): \n                count += 1\n            else: \n                s1 = s1 + s[i - 1] + str(count) \n                count = 1\n            i += 1\n    s1 = s1 + s[i - 1] + str(count)\n    \n    return s1 \n  \ns = \"geeksforgeeks\"\n\nprint(compress_string(s))\n\nOutput: g1e2k2s2f1o1r1g1e1e1k1s1", "category": "Python"}, {"instruction": "Programmatically generate 10 random numbers between 0 and 1.", "input": "", "output": "import random \n\nfor x in range(10): \n  print(random.random()) \n\nOutput: 0.06344054085111036 0.2881477132700741 0.17747003808770072 0.4838670382036148 0.8504676489597706 0.6951969864720918 0.3444948373996736 0.251203536083174 0.603054609456176 0.8579147959146845", "category": "Python"}, {"instruction": "Using a while loop, write a program to print the Fibonacci sequence.", "input": "", "output": "# function to print Fibonacci sequence \ndef fibo(n): \n    counter = 0\n    a = 0\n    b = 1\n      \n    while counter < n:\n        print(a, end = \" \")\n        fibonacci = a + b \n        a = b \n        b = fibonacci \n        counter += 1\nfibo(10)\n\nOutput: 0 1 1 2 3 5 8 13 21 34", "category": "Python"}, {"instruction": "Add an element to a given list.", "input": "List: ['a', 'b', 'c']\nElement: 'd'", "output": "list1 = ['a', 'b', 'c']\nlist1.append('d') \n\nprint(list1)\n\nOutput: ['a', 'b', 'c', 'd']", "category": "Python"}, {"instruction": "Generate an HTML form element to input a password.", "input": "", "output": "<input type=\"password\" name=\"password\" />", "category": "Python"}, {"instruction": "How can one manage memory in C++?", "input": "", "output": "In C++, memory can be managed by allocating and deallocating memory dynamically. This can be done either manually, using the new and delete operators, or by the use of smart pointers and other library functions. One can also free up memory by deleting unneeded objects, or by taking advantage of resource-managing classes like std::string, std::array, and std::vector.", "category": "Python"}, {"instruction": "Check if a given string is a numeric value.", "input": "String: 12345678", "output": "true", "category": "Python"}, {"instruction": "Write a SQL query to get the count of records in a table.", "input": "", "output": "SELECT COUNT(*) FROM myTable;", "category": "Python"}, {"instruction": "Create a method to validate an email address in Java.", "input": "", "output": "public static boolean isValidEmail(String str) {\n    String emailRegex = \"^[a-zA-Z0-9_+&*-]+(?:\\\\.\"+\n                        \"[a-zA-Z0-9_+&*-]+)*@\" +\n                        \"(?:[a-zA-Z0-9-]+\\\\.)+[a-z\" +\n                        \"A-Z]{2,7}$\";\n    Pattern pat = Pattern.compile(emailRegex);\n    if (str == null)\n        return false;\n    return pat.matcher(str).matches();\n}", "category": "Python"}, {"instruction": "Write a PHP code to loop through an associative array and print all the key-value pairs.", "input": "$arr = array(\n 'name' => 'John',\n 'age' => 28,\n 'gender' => 'male'\n);", "output": "foreach($arr as $key=>$value){\n  echo $key.':'.$value.\"<br>\";\n}", "category": "Python"}, {"instruction": "Write a JavaScript code to add the numbers 8 and 4.", "input": "", "output": "var num1 = 8;\nvar num2 = 4;\nvar sum = num1 + num2;\n \nconsole.log(sum);", "category": "Python"}, {"instruction": "Write an HTML code snippet to create a heading with the text \"GPT Demo\".", "input": "", "output": "<h1>GPT Demo</h1>", "category": "Python"}, {"instruction": "Create an Angular Component to display a user's profile information.", "input": "", "output": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'user-profile',\n  template: `\n    <div>\n      <img src=\"{{ user.avatar }}\" alt=\"Profile Image\" />\n      <h3>{{ user.name }}</h3>\n      <p>{{ user.email }}</p>\n    </div>\n  `\n})\nexport class UserProfileComponent {\n  @Input() user;\n}", "category": "Python"}, {"instruction": "Write a MySQL query to find all records whose name starts with 'A'.", "input": "", "output": "SELECT *\nFROM tableName\nWHERE name LIKE 'A%';", "category": "Python"}, {"instruction": "Create an HTML form that, when submitted, displays all the user input on the same page.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>User Input</title>\n</head>\n<body>\n    <h1>User Input</h1>\n    <form action=\"#\" method=\"post\">\n        <label>Name: </label>\n        <input type=\"text\" name=\"name\" /><br>\n        <label>Email: </label>\n        <input type=\"email\" name=\"email\" /><br>\n        <label>Country: </label>\n        <input type=\"text\" name=\"country\" /><br><br>\n        <input type=\"submit\" value=\"Submit\" name=\"submit\" />\n    </form>\n<?php\nif(isset($_POST['submit'])){\n    $name = $_POST['name'];\n    $email = $_POST['email'];\n    $country = $_POST['country'];\n    echo \"<p>Your name is: $name <br>\";\n    echo \"Your email is: $email <br>\";\n    echo \"Your country is: $country <br></p>\";\n}\n?>\n</body>\n</html>", "category": "Python"}, {"instruction": "Using the bubble sort algorithm, sort the following array.", "input": "[3, 5, 2, 1, 4]", "output": "def bubbleSort(arr): \n    n = len(arr)\n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n    return arr\n  \n  \n# Driver code \narr = [3, 5, 2, 1, 4]\n  \nbubbleSort(arr)\n\nOutput: [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Create a Java method to print a binary tree in level order.", "input": "", "output": "public class BinaryTree { \n  \n    // Root of Binary Tree \n    Node root; \n  \n    // Function to print binary tree in level order \n    void printLevelOrder() { \n        int h = height(root); \n        int i; \n        for (i = 1; i <= h; i++) \n            levelOrder(root, i); \n    } \n  \n    // Print nodes at a given level \n    void levelOrder(Node root, int level) { \n        if (root == null) \n            return; \n        if (level == 1) \n            System.out.print(root.data + \" \"); \n        else if (level > 1) { \n            levelOrder(root.left, level - 1); \n            levelOrder(root.right, level - 1); \n        } \n    } \n  \n    // Compute the height of a tree--the number of nodes \n    // along the longest path from the root node down to \n    // the farthest leaf node \n    int height(Node root) { \n        if (root == null) \n            return 0; \n        else { \n            // compute height of each subtree \n            int lheight = height(root.left); \n            int rheight = height(root.right); \n  \n            // use the larger one \n            if (lheight > rheight) \n                return (lheight + 1); \n            else\n                return (rheight + 1); \n        } \n    } \n}", "category": "Python"}, {"instruction": "Write SQL to create a database called Products that has three columns: id, name, and price.", "input": "", "output": "CREATE TABLE Products (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(255),\n    price DECIMAL(9,2)\n);", "category": "Python"}, {"instruction": "Write a C# program to remove all occurrences of an item from an array.", "input": "[1,2,3,4,5,2,3,4]", "output": "public static void RemoveOccurrence(int[] array, int item)\n{\n    //Declare a new variable to store new list of items\n    List<int> result = new List<int>();\n\t\n    for (int i = 0; i < array.Length; i++)\n    {\n        if (array[i] != item)\n        {\n            result.Add(array[i]);\n        }\n    }\n\t\n    //Print remaining items\n    Console.WriteLine(\"After removing, remaining elements are:\");\n    foreach (int num in result)\n    {\n        Console.Write(num + \" \");\n    }\n}", "category": "Python"}, {"instruction": "Create a class in Ruby to store information about shopping items and their prices.", "input": "", "output": "class ShoppingItem\n  attr_accessor :name, :price\n\n  def initialize(name, price)\n    @name = name\n    @price = price\n  end\nend", "category": "Python"}, {"instruction": "Write a JavaScript program to generate random alphanumeric characters of length 10.", "input": "", "output": "function generateAlphaNum() {\n    let length = 10;\n    let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\n    let result = '';\n    for (let i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * characters.length));\n    }\n    return result;\n}", "category": "Python"}, {"instruction": "How can a user increase performance with SQL queries?", "input": "", "output": "Performance can be improved by using proper indexes and query optimization techniques. Additionally, users can create more efficient queries by avoiding unnecessary joins and taking advantage of set-based operations. Finally, users can take advantage of caching if available.", "category": "Python"}, {"instruction": "Create a class with a method that returns the sum of its two parameters.", "input": "", "output": "public class Sum {\n    public int getSum(int a, int b) {\n        return a + b;\n    }\n}", "category": "Python"}, {"instruction": "Compare two strings and return the differences in the two strings.", "input": "String1: \"Today is a great day!\"\nString2: \"Today is a beautiful day!\"", "output": "The differences are \"great\" and \"beautiful\".", "category": "Python"}, {"instruction": "Create a JavaScript function to compare 2 strings to determine if they are anagrams (words with the same letters as each other).", "input": "", "output": "function anagramCheck(str1, str2) {\n  // Remove whitespace, convert strings to lowercase, and split into arrays\n  let arr1 = str1.replace(/\\s/g, '').toLowerCase().split('');\n  let arr2 = str2.replace(/\\s/g, '').toLowerCase().split('');\n  \n  // If the arrays are different lengths, they cannot be anagrams\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n  \n  // Sort both arrays, and check if they are the same\n  let sortedArr1 = arr1.sort();\n  let sortedArr2 = arr2.sort();\n  \n  for (let i=0; i<sortedArr1.length; i++) {\n    if (sortedArr1[i] !== sortedArr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}", "category": "Python"}, {"instruction": "Create a JavaScript object with two properties and their respective values.", "input": "", "output": "var myData = {\n  name: 'John',\n  age: 28\n};", "category": "Python"}, {"instruction": "Generate a dictionary that has 5 string-string key-value pairs", "input": "", "output": "import random\n\nkeys = [''.join(random.choices(string.ascii_letters, k = 3)) for i in range(5)]\nvalues = [''.join(random.choices(string.ascii_letters, k = 3)) for i in range(5)]\n\ndata = {key:value for key, value in zip(keys, values)}", "category": "Python"}, {"instruction": "Generate a key-value pair such that the key is a string of length 3 and the value is a random number from 0 to 9", "input": "", "output": "import random\n\nkey = ''.join(random.choices(string.ascii_letters, k = 3))\nvalue = random.randint(0, 9)\ndata = {key : value}", "category": "Python"}, {"instruction": "Construct a JS code snippet to add a class \"active\" to an HTML element with an id \"example\".", "input": "", "output": "document.getElementById(\"example\").classList.add(\"active\");", "category": "Python"}, {"instruction": "Write a JavaScript program to find the most commonly occurring item in a given object.", "input": "", "output": "function mostCommonlyOccuring(obj) {\n let count = {};\n let maxCount = 0;\n let mostCommon = null;\n \n for (const key in obj) {\n  if (obj.hasOwnProperty(key)) {\n   if (obj[key] in count) {\n    count[obj[key]]++;\n   } else {\n    count[obj[key]] = 1;\n   }\n   if (count[obj[key]] > maxCount) {\n    maxCount = count[obj[key]];\n    mostCommon = obj[key];\n   }\n  }\n }\n return mostCommon;\n}", "category": "Python"}, {"instruction": "Write a C++ program to calculate the difference between two dates using the following function.", "input": "", "output": "#include <iostream>\n#include <ctime>\n\nusing namespace std;\n\nint diffDates(time_t date1, time_t date2){\n  return difftime(date1, date2) / (60 *60 *24); // in days\n}\n\nint main(){\n  // example dates\n  time_t date1 = 0;\n  time_t date2 = time(0);\n  \n  cout << diffDates(date1, date2) << endl;\n  return 0;\n}", "category": "Python"}, {"instruction": "Use the following function and SQL query and write a JavaScript program to insert data into a given table.", "input": "function insertData(arr) {\n let sqlQuery = \"INSERT INTO <table_name> (NAME,AGE) VALUES ?\";\n}", "output": "function insertData(arr) {\n let sqlQuery = \"INSERT INTO <table_name> (NAME,AGE) VALUES ?\";\n let values = [];\n arr.forEach(item => {\n  values.push([item.name, item.age]);\n });\n executeQuery(sqlQuery, [values]);\n}\n\nfunction executeQuery(query, values) {\n connection.query(query, [values], function (err, result) {\n  if (err) {\n   console.log(err);\n  }\n });\n}", "category": "Python"}, {"instruction": "Use the following code and write a JavaScript function to reverse the order of the characters in a given string.", "input": "", "output": "function reverseString(str) {\n return str.split('').reverse().join('');\n}", "category": "Python"}, {"instruction": "Write a SQL query to select all records from a table with a given name.", "input": "", "output": "SELECT * FROM <table_name>;", "category": "Python"}, {"instruction": "Use the following JSON data and write a JavaScript function to parse it.", "input": "{\n \"employees\": [\n  {\n   \"firstName\": \"John\",\n   \"lastName\": \"Doe\"\n  },\n  {\n   \"firstName\": \"Anna\",\n   \"lastName\": \"Smith\"\n  },\n  {\n   \"firstName\": \"Peter\",\n   \"lastName\": \"Jones\"\n  }\n ]\n}", "output": "function parseJSON(jsonString) {\n let employeeData = JSON.parse(jsonString);\n let employees = employeeData.employees;\n let parsedData = [];\n for (let i = 0; i < employees.length; i++){\n  let employee = employees[i];\n  let parsedEmployee = {};\n  parsedEmployee.firstName = employee.firstName;\n  parsedEmployee.lastName = employee.lastName;\n  parsedData.push(parsedEmployee);\n }\n return parsedData;\n};", "category": "Python"}, {"instruction": "Compute the mean of the following set of numbers: 7, 15, 16, 23, 35.", "input": "", "output": "The mean of the given set of numbers is 19.4. \n\nMean = (7+15+16+23+35)/5 = 19.4", "category": "Python"}, {"instruction": "Build a neural network for binary classification using TensorFlow.", "input": "", "output": "\"\"\"\nBuild a neural network for binary classification using TensorFlow\n\"\"\"\nimport tensorflow as tf\n\n# Define the model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(units=8, activation='relu', input_shape=(2,))) \nmodel.add(tf.keras.layers.Dense(units=4, activation='relu'))\nmodel.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])", "category": "Python"}, {"instruction": "Convert the given text into a list of words, separating the words by whitespace.", "input": "text: This sentence contains five words", "output": "def to_words(text):\n return text.split()\n\n# Output: ['This', 'sentence', 'contains', 'five', 'words']", "category": "Python"}, {"instruction": "Create a function to check which HEX color can be generated from the given RGB value.", "input": "rgb: 253, 199, 1", "output": "def rgb_to_hex(rgb):\n r, g, b = rgb\n hex_val = \"#{:02x}{:02x}{:02x}\".format(r, g, b)\n return hex_val\n\n# Output: #fdc701", "category": "Python"}, {"instruction": "Classify the given sentence as short or long.", "input": "Sentence: She felt so excited that her application got approval.", "output": "Short sentence.", "category": "Python"}, {"instruction": "Create a SQL query to calculate the total cost of an order taking into account the quantity and unit cost of each item.", "input": "", "output": "SELECT sum(quantity * unit_cost) as total_cost\nFROM orders\nGROUP BY order_id", "category": "Python"}, {"instruction": "What does a break statement do in C++?", "input": "", "output": "A break statement in C++ is used to stop the execution of a loop and exit the loop. It can also be used to stop the switch statement execution.", "category": "Python"}, {"instruction": "Write a ruby program to merge two sorted arrays in to one sorted array.", "input": "arr1: [1, 4, 6]\narr2: [2, 3, 7]", "output": "def mergeSortedArrays(arr1, arr2) \n    arr3 = arr1 + arr2 \n    arr3.sort!\n    return arr3\nend", "category": "Python"}, {"instruction": "Build an HTML form containing 3 input elements (name, email, password) and a submit button.", "input": "", "output": "<form action=\"\">\n    Name: <input type=\"text\" name=\"name\">\n    Email: <input type=\"email\" name=\"email\">\n    Password: <input type=\"password\" name=\"password\">\n    <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Generate a JS code snippet to switch between two colours (red and blue) while hovering the mouse pointer over an HTML element.", "input": "", "output": "<style>\n   .element:hover {\n      background-color: red;\n      transition: background-color 1s ease;\n   }\n   .element:hover:after {\n      background-color: blue;\n   }\n</style>", "category": "Python"}, {"instruction": "Construct a sql query to select the names and age of all employees who have a salary greater than 45000", "input": "", "output": "SELECT name, age FROM employee WHERE salary > 45000;", "category": "Python"}, {"instruction": "Create a python function that takes a string of characters as an argument and returns a list of all unique combinations of characters possible.", "input": "abc", "output": "def generate_unique_permutations(string):\n    output = []\n    for x in range(len(string)):\n        for y in range(x + 1,len(string)+1):\n            output.append(''.join(sorted(string[x:y])))  \n    return output\n\nprint(generate_unique_permutations(\"abc\")) #Output: ['a', 'ab', 'abc', 'ac', 'b', 'bc', 'c']", "category": "Python"}, {"instruction": "How to check if a given year is a leap year in Python?", "input": "", "output": "def leap_year(year):\n    if (year % 4 == 0) and (year % 100 != 0 or year % 400 == 0):\n        return True\n    return False", "category": "Python"}, {"instruction": "Write a code to reverse the order of characters in a string.", "input": "text = \"Hello World\"", "output": "text = \"Hello World\"\nrev_str = reversed(text)\nprint(''.join(rev_str))", "category": "Python"}, {"instruction": "Suggest a more efficient code to solve the following task.", "input": "x = 5\ny = 10\n\nif x > y:\n    result = x\nelse:\n    result = y", "output": "x = 5\ny = 10\nresult = max(x, y)", "category": "Python"}, {"instruction": "Suggest ways to debug the following code", "input": "x = 'Address'\n    print(\"Topic:\", x)", "output": "- Add four spaces of indentation before the print statement to make it part of the block \n- Check the spelling of x to ensure there is no typo \n- Check the documentation for the correct syntax to print the value of x \n- Check the scope of x to ensure the value has been properly set outside the loop \n- Run the code in a debugger to find any issues that may arise during code execution", "category": "Python"}, {"instruction": "Write a code to form a triangle pattern with the character '$'", "input": "", "output": "for i in range(5): \n    for j in range(i+1): \n        print('$', end=\"\") \n    print()", "category": "Python"}, {"instruction": "Is there an error in the following code?", "input": "price = 10\n\nif prive > 10:\n   print('Price must be 10 or less')", "output": "true", "category": "Python"}, {"instruction": "Using the re library, trim the following string of all whitespace.", "input": "my_string = \"  Hello, World!  \"", "output": "import re\n\nmy_string = \"  Hello, World!  \"\n\nmodified_string = re.sub('\\s+', '', my_string)\n\nprint(modified_string)", "category": "Python"}, {"instruction": "Write a Python function that takes an integer as an argument and returns the square of that number", "input": "", "output": "def square(n):\n    return n ** 2", "category": "Python"}, {"instruction": "Create a new list with the contents of the given list plus the new element at the beginning.", "input": "my_list = [3, 5, 6, 7]\nnew_element = 1", "output": "my_list = [3, 5, 6, 7]\nnew_element = 1\n\nnew_list = [new_element] + my_list\n\nprint(new_list)", "category": "Python"}, {"instruction": "Using the numpy library, reshape the given matrix array to 5 rows and 2 columns.", "input": "import numpy as np \narr = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]])", "output": "arr = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]])\n\nreshaped_arr = arr.reshape(5, 2)\n\nprint(reshaped_arr)", "category": "Python"}, {"instruction": "Generate a list of numbers from 1 to 10 in reverse order.", "input": "", "output": "lst = list(range(10, 0, -1))", "category": "Python"}, {"instruction": "Write a single-line lambda expression that multiplies any two numbers.", "input": "", "output": "mul = lambda x, y: x * y", "category": "Python"}, {"instruction": "Create a dictionary where each key is a unique integer and the value of each key is the corresponding product of the two given numbers.", "input": "x = 15 \ny = 2", "output": "d = {}\n\nfor i in range(1, x + 1):\n  d[i] = i * y\n\nprint(d)", "category": "Python"}, {"instruction": "Generate a css code block to create a white text shadow for a given HTML element", "input": "", "output": ".element {\n    text-shadow: 1px 0 white, 0 1px white, 1px 1px white, -1px 0 white, 0 -1px white, -1px -1px white;\n}", "category": "Python"}, {"instruction": "Write a Java method to replace all spaces from a given string with a provided character", "input": "Hello World!\nZ", "output": "public static String replaceCharacter(String str, char c) {\n    return str.replaceAll(\" \", String.valueOf(c));\n}\n\nSystem.out.println(replaceCharacter(\"Hello World!\", 'Z')); // Output: HelloZWorld!", "category": "Python"}, {"instruction": "Construct a Python function to count the number of words in a given sentence", "input": "This is a sentence", "output": "def word_count(sentence):\n    return len(sentence.split())\n\nprint(word_count('This is a sentence')) # Output: 5", "category": "Python"}, {"instruction": "Replace all empty strings with a default value using the following list.", "input": "my_list = [\"apple\", \"\", \"grapes\", \"\", \"bananas\"]", "output": "my_list = [\"apple\", \"\", \"grapes\", \"\", \"bananas\"]\n\nmy_list = [x if x != \"\" else \"default\" for x in my_list]\n\nprint(my_list)", "category": "Python"}, {"instruction": "Create a method to generate a random integer between 1 and 10 in Python.", "input": "", "output": "import random\n\ndef random_int():\n    return random.randint(1, 10)", "category": "Python"}, {"instruction": "Write a SQL query to retrieve the names of employees who have been employed in the organization for more than 5 years.", "input": "", "output": "SELECT name\nFROM employees\nWHERE years_employed > 5;", "category": "Python"}, {"instruction": "Create a HTML form to accept a username and password.", "input": "", "output": "<form action=\"\">\n  <label for=\"username\">Username:</label><br>\n  <input type=\"text\" id=\"username\" name=\"username\"><br>\n  <label for=\"password\">Password:</label><br>\n  <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Compose a query in SQL to delete all records from a table named \"students\".", "input": "", "output": "DELETE FROM students;", "category": "Python"}, {"instruction": "Create a function that takes two integers and returns the remainder when the greater integer is divided by the smaller integer.", "input": "", "output": "def remainder(a,b):\n    if a > b:\n        return a % b\n    else:\n        return b % a", "category": "Python"}, {"instruction": "Edit the code below to add an exception handling mechanism in it.", "input": "def divide(a, b):\n    return a/b", "output": "def divide(a, b):\n    try: \n        return a/b\n    except ZeroDivisionError:\n        print(\"Division by zero is undefined\")", "category": "Python"}, {"instruction": "Compile the following Java program.", "input": "class HelloWorld \n{ \n    public static void main(String args[]) \n    { \n        System.out.println(\"Hello, World\"); \n    } \n}", "output": "javac HelloWorld.java", "category": "Python"}, {"instruction": "Generate a pseudocode of a breadth first search algorithm.", "input": "", "output": "1. Create a queue Q\n\n2. Enqueue item S(source) onto Q\n\n3. For each element v in the adjacency list of S \n    3.1. Enqueue v onto Q\n    3.2. Set v's predecessor to S\n\n4. While Q is not empty\n    4.1. Dequeue an item u from Q \n    4.2. For each element v in the adjacency list of u\n       4.2.1. If v is unvisited, then\n           4.2.1.1. set v's predecessor to u\n           4.2.2.2. enqueue v onto Q\n\n5. Return each node's predecessor", "category": "Python"}, {"instruction": "Rewrite the following ruby program:", "input": "begin \n  puts \"Hello World!\" \nend", "output": "puts \"Hello World!\"", "category": "Python"}, {"instruction": "Write an SQL query to delete a row in table \"book\" with an id of \"100\".", "input": "", "output": "DELETE FROM book WHERE id=100;", "category": "Python"}, {"instruction": "Modify the following HTML to open the page with a single button in center that says \"GO!\".", "input": "<body>\n<h1>Welcome!</h1>\n</body>", "output": "<body>\n<h1>Welcome!</h1>\n<div align=\"center\">\n    <button type=\"button\" onclick=\"window.open('https://example.com/')\">GO!</button> \n</div>\n</body>", "category": "Python"}, {"instruction": "Create a function in C that creates a new string with all the characters in reverse order.", "input": "", "output": "char* reverseString(char* str) {\n    int length = strlen(str);\n    char* revString = (char*) malloc(length + 1);\n    \n    for (int i = 0; i < length; i++) {\n        revString[i] = str[length - i - 1];\n    }\n    revString[length] = '\\0';\n    \n    return revString;\n}", "category": "Python"}, {"instruction": "Design an approach in Python to retrieve a record from a database.", "input": "", "output": "import sqlite3\n\ndef retrieve_record(db_name, table_name, id):\n    try:  \n        con = sqlite3.connect(db_name)\n        cur = con.cursor()\n        cur.execute(\"SELECT * FROM {} where id={};\".format(table_name, id))\n        record = cur.fetchone()\n    except:\n        record = None\n    finally:    \n        cur.close()\n        con.close()\n    return record", "category": "Python"}, {"instruction": "Create a global function in Java to convert an integer number into its String equivalent.", "input": "", "output": "public static String numberToString(int num) {\n    StringBuilder sb = new StringBuilder();\n    \n    // if num is negative, append '-' to sb\n    if (num < 0) {\n        sb.append('-');\n    }\n    \n    // obtain absolute value to accommodate for all numbers\n    num = Math.abs(num);\n    \n    // extract each digit and append to sb\n    while (num > 0) {\n        int digit = num % 10;\n        sb.append(digit);\n        num /= 10;\n    }\n    \n    return sb.reverse().toString();\n}", "category": "Python"}, {"instruction": "Add a function to the following JavaScript code to search a value in a given array", "input": "const arr = [12, 5, 8, 130, 44];", "output": "const arr = [12, 5, 8, 130, 44];\n\nfunction searchValue(arr, value) {\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === value) {\n            return (i);\n        }\n    }\n    return -1;\n}", "category": "Python"}, {"instruction": "Describe a pipelined architecture for a processor", "input": "", "output": "A pipelined Processor architecture is one in which the instruction set is divided into separate stages, each associated with a specific segment in the computation process. As an instruction is entered, it is routed to the appropriate stage in the pipeline and progresses sequentially, thereby allowing the processor to complete multiple instructions simultaneously. The stages, known as the pipeline stages, can include IF (Instruction Fetch), ID (Instruction Decode), EX (Execution), MEM (Memory Access) and WB (Write-Back). The IF and ID stages typically handle instruction fetch and decode, while EX and MEM perform instruction execution and memory access, respectively. The final stage, WB, is responsible for writing the result to memory or a register.", "category": "Python"}, {"instruction": "Write a JavaScript program to loop through an array in reverse order.", "input": "var arr = [5, 2, 6, 9, 3];", "output": "var arr = [5, 2, 6, 9, 3];\n\nfor (var i = arr.length-1; i >= 0; i--) {\n    console.log(arr[i]);\n}", "category": "Python"}, {"instruction": "Please fix the following broken HTML code.", "input": "<html>\n  <head>\n    <title>Test HTML Page\n  </head>\n  <body>\n/body>\n</html>", "output": "<html>\n  <head>\n    <title>Test HTML Page</title>\n  </head>\n  <body>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create a list of the first 10 perfect squares.", "input": "", "output": "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "category": "Python"}, {"instruction": "Create an HTML page that displays a table containing four columns: first name, last name, age, and city. Put your own data into the columns.", "input": "", "output": "<html>\n <head>\n  <title>People Table</title>\n </head> \n <body>\n  <table>\n   <tr>\n    <th>First Name</th>\n    <th>Last Name</th>\n    <th>Age</th>\n    <th>City</th>\n   </tr>\n   <tr>\n    <td>John</td>\n    <td>Doe</td>\n    <td>50</td>\n    <td>New York</td>\n   </tr>\n   <tr>\n    <td>Jane</td>\n    <td>Smith</td>\n    <td>41</td>\n    <td>Los Angeles</td>\n   </tr>\n   <tr>\n    <td>Dave</td>\n    <td>Jackson</td>\n    <td>28</td>\n    <td>Boston</td>\n   </tr>\n  </table>\n </body>\n</html>", "category": "Python"}, {"instruction": "Write a Ruby program to swap two given variables a and b.", "input": "a = 10, b = 5", "output": "a, b = b, a\nputs a # => 5\nputs b # => 10", "category": "Python"}, {"instruction": "Write an HTML form to collect user input for a username and password.", "input": "", "output": "<form action=\"\">\n  <label for=\"username\"> Username: </label>\n  <input type=\"text\" name=\"username\" id=\"username\" required />\n  <br />\n  <label for=\"password\"> Password: </label>\n  <input type=\"password\" name=\"password\" id=\"password\" required />\n  <br />\n  <input type=\"submit\" value=\"Submit\" />\n</form>", "category": "Python"}, {"instruction": "Using the given array of numbers, write a JavaScript code to print the sum of all the numbers.", "input": "numbers = [5, 10, 15, 20, 25]", "output": "let result = 0;\n\nfor (let number of numbers){\n result += number;\n}\n\nconsole.log(result);", "category": "Python"}, {"instruction": "Create a JavaScript code snippet that will sum all the numbers in the following array and will then print the result.", "input": "numbers = [5, 10, 15, 20, 25]", "output": "let result = 0;\n\nfor (let number of numbers){\n result += number;\n}\n\nconsole.log(result);", "category": "Python"}, {"instruction": "Create a Python loop that will iterate through the following list and will print each item's value multiplied with 5.", "input": "numbers = [5, 10, 15, 20, 25]", "output": "for number in numbers:\n    print(number*5)", "category": "Python"}, {"instruction": "Create a program that logs the time a user entered a program.", "input": "", "output": "import time\n\ndef log_time():\n    current_time = time.time()\n    print(\"You entered the program at\", current_time)", "category": "Python"}, {"instruction": "Using the comment as a guide, add the appropriate exception handling code.", "input": "try: \n\tdiv_num=5/0\nexcept ZeroDivisionError as e:\n\t# TODO:\n\t    print(\"Divide by zero error\")", "output": "try: \n\tdiv_num=5/0\nexcept ZeroDivisionError as e:\n\t# TODO:\n    print(\"Divide by zero error\")\n    print(\"Error message: \" + str(e))", "category": "Python"}, {"instruction": "Sort the given list.", "input": "[7, 3, 5, 6, 2]", "output": "[2, 3, 5, 6, 7]", "category": "Python"}, {"instruction": "Using the given list, calculate the mode and median.", "input": "[2, 4, 5, -6, 8, 9, -9, 10, 19]", "output": "Mode: -9 \nMedian: 7", "category": "Python"}, {"instruction": "Create a JavaScript program to print out the values of each key of an object", "input": "myObj = {\n    \"name\": \"Bob\",\n    \"age\": 20,\n    \"city\": \"New York\"\n}", "output": "function printObject(myObj) {\n    for (let key in myObj) {\n        console.log(myObj[key]);\n    }\n}", "category": "Python"}, {"instruction": "Create an SQL query to find the names of all students enrolled in a particular course.", "input": "table_name = \"students\"\ncourse_name = \"Data Science\"", "output": "SELECT name\nFROM students\nWHERE course_name = 'Data Science'", "category": "Python"}, {"instruction": "Convert the following regular expression to one that matches strings of at least 3 digits: \"\\d+\".", "input": "", "output": "^\\d{3,}$", "category": "Python"}, {"instruction": "Produce a MySQL query to calculate the average age of people who have age greater than 23.", "input": "", "output": "SELECT AVG(age) \nFROM people \nWHERE age > 23;", "category": "Python"}, {"instruction": "Design a Python function to return the list of values in two separate lists for even and odd numbers in a given list.", "input": "[1, 2, 3, 4, 5]", "output": "def separateEvenOdd(nums):\n    evenList = []\n    oddList = []\n\n    for n in nums:\n        if n % 2 == 0:\n            evenList.append(n)\n        else:\n            oddList.append(n)\n\n    return evenList, oddList\n\nprint(separateEvenOdd([1,2,3,4,5]))", "category": "Python"}, {"instruction": "Given an array of integers, write a Java method to find the largest three numbers.", "input": "[3, 5, 9, 4, 8, 6, 1]", "output": "public static void largestThreeNumbers(int[] numbers) { \n    Arrays.sort(numbers); \n  \n    int size = numbers.length; \n    System.out.println(\"Largest three numbers: \"\n                        + numbers[size-1] + \" \"\n                        + numbers[size-2] + \" \"\n                        + numbers[size-3]); \n}", "category": "Python"}, {"instruction": "Create an HTML page with an input field and a button, and write a JavaScript function that sets the font size of the entered text in the input field to 16pt when the button is clicked.", "input": "", "output": "<html>\n<head>\n    <title>Change Font Size</title>\n    <script type=\"text/javascript\">\n        function changeFontSize() {\n            var inputField = document.getElementById(\"inputField\");\n            inputField.style.fontSize = \"16pt\";\n        }\n    </script>\n</head>\n<body>\n    <input type=\"text\" id=\"inputField\" placeholder=\"Enter Text Here\">\n    <button type=\"button\" onclick=\"changeFontSize()\">Change Font Size</button>\n</body>\n</html>", "category": "Python"}, {"instruction": "Generate a Java program that creates a random array of 10 integers ranging from 0 to 9.", "input": "", "output": "import java.util.Random;\n\nclass GenerateRandomArray{\n \n    public static void main(String[] args)\n    {\n        int[] arr = new int[10];\n        Random random = new Random();\n        for (int i=0; i<arr.length; i++){\n            arr[i] = random.nextInt(10);\n        }\n \n        // print the elements\n        for (int i=0; i<arr.length; i++){\n            System.out.print(arr[i]+ \" \");\n        }\n    }\n}", "category": "Python"}, {"instruction": "Convert the following regular expression to match strings of 3 or 4 digits: \"(\\d{3,4})\".", "input": "", "output": "^\\d{3,4}$", "category": "Python"}, {"instruction": "Create a function in python that takes a string as an argument and prints out two copies of the string.", "input": "string = \"Hello World!\"", "output": "def print_twice(string):\n    print(string)\n    print(string)\n    \nprint_twice(string)", "category": "Python"}, {"instruction": "Create a function to print a multiline message in Python", "input": "message = \"This is a multiline \nmessage.\"", "output": "def print_multiline_message(message):\n    print(message)", "category": "Python"}, {"instruction": "Write a C++ program to print a pyramid of asterisks with a given height.", "input": "height = 5", "output": "void print_pyramid(int height) {\n  for (int i = 0; i < height; i++) {\n    for (int j = 0; j < height - i - 1; j++)\n      cout << \" \";\n    for (int k = 0; k <= i; k++)\n      cout << \"* \";\n    cout << endl;\n  }\n}", "category": "Python"}, {"instruction": "Create a Python program to replace all instances of a specific character in a string.", "input": "string = \"Hello World!\"\ncharacter = \"o\"\nreplacement_character = \"_\"", "output": "def replace_character(string, character, replacement_character):\n    new_string = \"\"\n    for c in string:\n        if c == character:\n            new_string += replacement_character\n        else:\n            new_string += c\n    return new_string", "category": "Python"}, {"instruction": "Create a CSS stylesheet to style a text so that its size is one font size larger than the default text size.", "input": "", "output": "body {\n font-size: 1em;\n}\n\nh1 {\n font-size: 1.2em;\n}\n\nh2 {\n font-size: 1.3em;\n}\n\nh3 {\n font-size: 1.4em;\n}", "category": "Python"}, {"instruction": "Write a function in Ruby which takes an array of numbers as input and return the smallest number in that array.", "input": "numbers = [14, 25, 120, 66, 5]", "output": "def find_min(numbers)\n  min = numbers[0]\n  numbers.each do |num|\n    if num < min\n      min = num\n    end\n  end\n  min\nend", "category": "Python"}, {"instruction": "How would you implement a Binary Search Tree in Java?", "input": "", "output": "public class BinarySearchTree { \n  \n  /* Class containing left, right and root nodes */\n  class Node { \n    int key; \n    Node left, right; \n  \n    public Node(int item) {\n\t\tkey = item; \n\t\tleft = right = null; \n\t} \n  } \n  \n  // Root of BST \n  Node root; \n  \n  // Constructor \n  BinarySearchTree() {  \n\troot = null;  \n  } \n  \n  // This method mainly calls insertRec() \n  void insert(int key) { \n\t root = insertRec(root, key); \n  } \n  \n  /* A recursive function to insert a new key in BST */\n  Node insertRec(Node root, int key) { \n  \n\t// When the tree is empty, return a new node \n\tif (root == null) { \n\t\troot = new Node(key); \n\t\treturn root; \n\t}\n  \n\t// Otherwise, recurr down the tree \n\tif (key < root.key) \n\t\troot.left = insertRec(root.left, key); \n\telse if (key > root.key) \n\t\troot.right = insertRec(root.right, key);\n  \n\t// return the root \n\treturn root; \n  } \n\n}", "category": "Python"}, {"instruction": "Create an HTML form that has two input fields, first name and last name, and a submit button.", "input": "", "output": "<form action=\"\">\n  First name: <input type=\"text\" name=\"firstname\"><br>\n  Last name: <input type=\"text\" name=\"lastname\"><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Write a Python program to return a boolean indicating whether a substring is present within a given string.", "input": "string = 'Hello world'\nsubstring = 'world'", "output": "def contains_substring(string, substring):\n  return substring in string", "category": "Python"}, {"instruction": "Write a Python function to filter a given list of strings by the specified character?", "input": "my_list = ['Hello', 'World', 'Hi', 'Python']\ncharacter = 'o'", "output": "def filter_list_by_character(my_list, character):\n  return [item for item in my_list if character in item]", "category": "Python"}, {"instruction": "Create a class in Python with a constructor and two methods.", "input": "", "output": "class MyClass:\n  def __init__(self):\n    self.x = 0\n\n  def method_1(self):\n    self.x +=1\n\n  def method_2(self, arg1):\n    self.x += arg1", "category": "Python"}, {"instruction": "Write a Python program to find the minimum cost of a path from top left cell to bottom right cell of a matrix.", "input": "matrix = [[2, 0, 3, 5],\n          [4, 5, 1, 2],\n          [3, 1, 2, 7]]", "output": "def min_path_sum(matrix):\n\n    # initialize the solution matrix\n    res = [[0 for _ in range(len(matrix[0]))] for _ in range(len(matrix))]\n\n    # copying the first row elements\n    res[0] = matrix[0]\n\n    # iterate over the remaining rows\n    for i in range(1, len(matrix)):\n        # copy the first element\n        res[i][0] = res[i-1][0] + matrix[i][0]\n\n        for j in range(1, len(matrix[0])):\n            # choose the smaller of the two\n            res[i][j] = min(res[i-1][j], res[i][j-1]) + matrix[i][j]\n\n    # return the bottom-right element\n    return res[len(matrix)-1][len(matrix[0])-1]", "category": "Python"}, {"instruction": "Create an object to store key/value pairs representing students and their grades.", "input": "", "output": "```\nlet grades = {\n    \"John\": {\n        \"math\": 80,\n        \"science\": 90\n    },\n    \"Alex\": {\n        \"math\": 75,\n        \"science\": 95\n    }\n};\n\n```", "category": "Python"}, {"instruction": "Extract the first name, last name and age from a given string.", "input": "\"John Smith, 33\"", "output": "```\nimport re\n\ns = 'John Smith, 33'\n\nfirstName = re.match(\"^\\w+\", s).group(0)\nlastName = re.search(\"\\w+$\", s).group(0)\nage = re.findall(\"(\\d+)\", s)[0]\n\nprint(firstName, lastName, age)\n\n```", "category": "Python"}, {"instruction": "Create an array of integers ranging from 0 to 20 and print it.", "input": "", "output": "```\narray = []\nfor i in range(0,21):\n    array.append(i)\n\nprint(array)\n\n```", "category": "Python"}, {"instruction": "Create a class \"Car\" that has an attribute \"make\" and an attribute \"model\".", "input": "", "output": "```\nclass Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model\n\n```", "category": "Python"}, {"instruction": "Create an object structure to represent a 3X3 grid of numbers. This grid should contain two 2\u2019s, two 4\u2019s, and a 6.", "input": "", "output": "```\nlet grid = [\n  [2, 4, 6],\n  [4, 2, 6],\n  [2, 6, 4]\n];\n```", "category": "Python"}, {"instruction": "Compute the absolute difference between two given numbers.", "input": "x = 7\ny = 4", "output": "diff = abs(x - y)\nprint(diff) # output: 3", "category": "Python"}, {"instruction": "Find the length of the string in the given input.", "input": "string = \"Hello World\"", "output": "len_string = len(string)\nprint(len_string) # output: 11", "category": "Python"}, {"instruction": "Write a SQL query to return the ranking of the employees with highest salary.", "input": "SELECT * \nFROM Employees \nORDER BY Salary DESC", "output": "SELECT e.*,\n  RANK() OVER (ORDER BY Salary DESC) AS Rank\nFROM Employees e", "category": "Python"}, {"instruction": "Implement a function to calculate the absolute value of a number.", "input": "-7", "output": "```\ndef absValue(num): \n    if num >= 0: \n        return num \n    else: \n        return -num \n  \nprint( absValue(-7) )\n\n```", "category": "Python"}, {"instruction": "Write a function in Go that takes in a number and returns true if it is a prime number.", "input": "$num = 13", "output": "func isPrime(num int) bool {\n\tif num <= 1 {\n\t\treturn false\n\t}\n\n\tfor i := 2; i*i <= num; i++ {\n\t\tif num%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}", "category": "Python"}, {"instruction": "How would you transform a JSON object into an XML document with JavaScript?", "input": "", "output": "function json2xml(json) {\n  // Create the return variable\n  let xml = '';\n\n  // Parse the input\n  if (typeof json == 'object') {\n    for (let key in json) {\n      // Add a start tag\n      xml += '<' + key + '>';\n\n      // Check for child elements\n      if (typeof json[key] == 'object') {\n        // Recursively traverse the child elements\n        xml += json2xml(json[key]);\n      } else if (typeof json[key] == 'string') {\n        // Add a value\n        xml += json[key];\n      } else {\n        // Add nothing\n      }\n\n      // Add an end tag\n      xml += '</' + key + '>';\n    }\n  } else if (typeof json == 'string') {\n    // Add the value\n    xml += json;\n  } else {\n    // Add nothing\n  }\n\n  // Return the XML\n  return xml;\n}", "category": "Python"}, {"instruction": "Create a CSS style to highlight code blocks on a web page.", "input": "", "output": "pre {\n  background-color: #f7f7f7;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n}\n\ncode {\n  color: #f80;\n  background-color: #fcfcfc;\n  padding: 3px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n}", "category": "Python"}, {"instruction": "Write a C++ class to store student information", "input": "", "output": "class Student {\n  private:\n    string name;\n    int age;\n    string address;\n  public:\n    Student();\n    Student(string name, int age, string address);\n    void setName(string name);\n    void setAge(int age);\n    void setAddress(string address);\n    string getName();\n    int getAge();\n    string getAddress();\n};", "category": "Python"}, {"instruction": "Write a function to find the n-th Fibonacci number for a given n", "input": "", "output": "def get_fibonacci(n):\n    a, b = 0, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b", "category": "Python"}, {"instruction": "Using the given information, write a function to calculate a 5-digit ISBN number.", "input": "Author name: Bob Smith\nTitle of Book: Learn Programming\nPublisher: Aztec Publishing\nYear Published: 2020", "output": "def calculate_isbn(authorname, title, publisher, yearpublished):\n    authorname_string = authorname.replace(' ', '')\n    title_string = title.replace(' ', '')\n    publisher_string = publisher.replace(' ', '')\n\n    isbn_total = 0\n\n    for letter in authorname_string:\n        isbn_total += ord(letter)\n\n    for letter in title_string:\n        isbn_total += ord(letter)\n\n    for letter in publisher_string:\n        isbn_total += ord(letter) \n\n    isbn_total += yearpublished\n\n    while isbn_total > 9999:\n        isbn_total = isbn_total % 10000\n\n    isbn_string = str(isbn_total).zfill(5)\n\n    return isbn_string", "category": "Python"}, {"instruction": "Create a boolean function to check whether a given string contains all alphabets", "input": "phrase = \"The quick brown fox jumps over the lazy dog\"", "output": "def is_alphabetical(phrase):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in alphabet:\n        if letter not in phrase:\n            return False\n    return True", "category": "Python"}, {"instruction": "Create a function to compute the Fibonacci sequence for a given input", "input": "", "output": "def compute_fibonacci(n):\n    fib_list = []\n    a, b = 0, 1\n\n    while a < n:\n        fib_list.append(a)\n        a, b = b, a+b\n    return fib_list", "category": "Python"}, {"instruction": "Count how many words are in a given sentence.", "input": "This sentence contains five words.", "output": "let sentence = \"This sentence contains five words.\";\nlet words = sentence.split(\" \");\nconsole.log(words.length);", "category": "Python"}, {"instruction": "Output the following string in reverse order using loops.", "input": "Hello World", "output": "for (let i = 10; i >= 0; i--) {\n    console.log(msg[i]);\n}", "category": "Python"}, {"instruction": "Create an HTML page with a table showing the results of the following SQL query:", "input": "SELECT student_name, grade \nFROM students\nORDER BY grade DESC", "output": "<html>\n  <head>\n    <title>Student Grades</title>\n  </head>\n  <body>\n    <h2>Student Grades</h2>\n    <table>\n      <thead>\n        <tr>\n          <th>Student Name</th>\n          <th>Grade</th>\n        </tr>\n      </thead>\n      <tbody>\n        <?php\n          // Connect to the database\n          // Run the query\n          // Loop through the results\n          ?>\n      </tbody>\n    </table>\n  </body>\n</html>", "category": "Python"}, {"instruction": "You need to create a loop that prints out the square root of the numbers from 1 to 10.", "input": "", "output": "for (let i = 1; i <= 10; i++) {\n    console.log(Math.sqrt(i));\n}", "category": "Python"}, {"instruction": "Write a SQL query to select all the distinct cities in the given dataset.", "input": "", "output": "SELECT DISTINCT City FROM dataset;", "category": "Python"}, {"instruction": "You need to use a for loop to create the following sequence: 1,4,7,10,13", "input": "", "output": "for (let i = 1; i <= 13; i += 3) {\n    console.log(i)\n}", "category": "Python"}, {"instruction": "You need to edit the following code so that it returns \"hello world\" as a string.", "input": "function greet() {\n    return 'hello' \n}", "output": "function greet() {\n    return 'hello' + ' world'\n}", "category": "Python"}, {"instruction": "Modify the HTML code with the following: Make all the text bold without changing the fontsize.", "input": "<div>\n    <h1>Welcome</h1>\n    <p>This is an example text</p>\n</div>", "output": "<div>\n    <h1><strong>Welcome</strong></h1>\n    <p><strong>This is an example text</strong></p>\n</div>", "category": "Python"}, {"instruction": "Create a SQL query to select all properties with a price between 500 and 1000.", "input": "", "output": "SELECT * FROM properties WHERE price BETWEEN 500 AND 1000;", "category": "Python"}, {"instruction": "You need to answer the following question: what is the output of the following code?", "input": "def double_value(number):\n   return number * 2\n\nx = double_value(3)\nprint(x)", "output": "6", "category": "Python"}, {"instruction": "Read the code and delete the unnecessary code. Output should contain the refactored code.", "input": "def remove_duplicates(data):\n    \"\"\"\n    Return a new list with duplicates removed.\n    \"\"\"\n    output = []\n    for item in data:\n        if item not in output:\n            output.append(item)\n    return output", "output": "def remove_duplicates(data):\n    \"\"\"Return a new list with duplicates removed.\"\"\"\n    return list(set(data))", "category": "Python"}, {"instruction": "Determine the number of times a specific value exists in an array.", "input": "arr = [1, 2, 3, 3, 4, 5, 3]\nnum = 3", "output": "let num = 3;\nlet count = 0;\nfor (let i = 0; i < arr.length; i++) {\n   if (arr[i] === num) {\n      count++;\n   }\n}\nconsole.log(count);", "category": "Python"}, {"instruction": "Write a Java method that takes a string and an integer as input, and returns the string in reverse with the integer repeated at the end.", "input": "inputString: \"Hello\"\nnum: 3", "output": "public static String repeatNumAtEnd(String inputString, int num) {\n    String outputString = \"\";\n    for(int i = inputString.length() - 1; i >= 0; i--){ \n        outputString += inputString.charAt(i); \n    } \n    for (int i = 0; i < num; i++){\n        outputString += num;\n    }\n    return outputString;\n}", "category": "Python"}, {"instruction": "Create an algorithm in C# with a time complexity of O(n2).", "input": "", "output": "public static void printAllPairs(int[] array, int n) { \n    for (int i = 0; i < n; i++) \n        for (int j = i + 1; j < n; j++) \n            Console.Write(\"(\" + array[i] + \", \" + array[j] +\") \"); \n}", "category": "Python"}, {"instruction": "Explain how to use selectors and filters in CSS.", "input": "", "output": "Selectors are used to target specific elements in an HTML document, while filters are used to apply style rules to these elements. Selectors are identified by their attribute like ids, classes, and tags, while filters are indicated by attributes such as color, font size, and display type. Selectors commonly utilize combinators to further narrow down the selection of elements. Filters can be used to style one or more selections, or to specify what values should apply based on the properties of other elements.", "category": "Python"}, {"instruction": "Define a custom Exception for an invalid data type.", "input": "", "output": "class InvalidDataTypeError(Exception):\n    \"\"\"Exception raised when an invalid data type is encountered\"\"\"\n\n    def __init__(self, message):\n        self.message = message", "category": "Python"}, {"instruction": "Calculate the cosine similarity between the given two sentence vectors.", "input": "vec1 = [1,2,3,4,5]\nvec2 = [2,3,4,5,6]", "output": "def cosine_similarity(vec1, vec2):\n    dot_product = np.dot(vec1, vec2)\n    norm_vec1 = np.linalg.norm(vec1)\n    norm_vec2 = np.linalg.norm(vec2)\n    return dot_product / (norm_vec1 * norm_vec2)", "category": "Python"}, {"instruction": "Create a copy of the given code without using the copy.deepcopy()", "input": "import copy\n\nlist1 = [[1, 2], [3, 4]]\nlist2 = copy.deepcopy(list1)", "output": "list2 = []\nfor i in range(len(list1)):\n    list2.append(list1[i].copy())", "category": "Python"}, {"instruction": "Create a Python class called Dog that contains the following attributes: breed, name, and age.", "input": "", "output": "class Dog:\n    def __init__(self, breed, name, age):\n        self.breed = breed\n        self.name = name\n        self.age = age", "category": "Python"}, {"instruction": "Improve the code to return the sum of all the numbers in the given vector.", "input": "vector<float> nums = {1.5, 2.5, 3.5, 4.5};", "output": "float get_sum(vector<float>& nums) {\n    float sum = 0;\n    for (auto n : nums) {\n        sum += n;\n    }\n    return sum;\n}", "category": "Python"}, {"instruction": "Develop a function to search for a value in an array and return its position.", "input": "arr = [25, 100, 98, 50];\nvalue = 50", "output": "function searchValue(arr, value) {\n\tlet position = -1;\n\tarr.forEach((n, i)=> {\n\t\tif (n == value) {\n\t\t\tposition = i;\n\t\t}\n\t});\n\treturn position;\n}\nlet position = searchValue(arr, value);\nconsole.log(position); // 3", "category": "Python"}, {"instruction": "Create a HTML page with a table with three columns and four rows and give it an appropriate CSS styling.", "input": "", "output": "<style>\n\ttable {\n\t\tborder-collapse: collapse;\n\t}\n\t\n\tth, td {\n\t\tborder: 1px solid #000;\n\t\tpadding: 8px;\n\t}\n\t\n</style>\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Column 1</th>\n\t\t\t<th>Column 2</th>\n\t\t\t<th>Column 3</th>\n\t\t</tr>\n\t</thead>\n\t\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>Row 1 Col 1</td>\n\t\t\t<td>Row 1 Col 2</td>\n\t\t\t<td>Row 1 Col 3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Row 2 Col 1</td>\n\t\t\t<td>Row 2 Col 2</td>\n\t\t\t<td>Row 2 Col 3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Row 3 Col 1</td>\n\t\t\t<td>Row 3 Col 2</td>\n\t\t\t<td>Row 3 Col 3</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Row 4 Col 1</td>\n\t\t\t<td>Row 4 Col 2</td>\n\t\t\t<td>Row 4 Col 3</td>\n\t\t</tr>\n\t</tbody>\n</table>", "category": "Python"}, {"instruction": "Develop a program for sorting an array of numbers.", "input": "arr = [40, 10, 5, 50, 30]", "output": "function sortArray(arr) {\n\tlet n = arr.length;\n\tfor (let i = 0; i < n-1; i++) {\n\t\tlet minIndex = i;\n\t\tfor (let j = i + 1; j < n; j++){\n\t\t\tif (arr[j] < arr[minIndex]) \n\t\t\t\tminIndex = j; \n\t\t}\n\t\tlet temp = arr[minIndex];\n\t\tarr[minIndex] = arr[i];\n\t\tarr[i] = temp; \n\t}\n\treturn arr;\n}\nconsole.log(sortArray(arr)) // Output: [5, 10, 30, 40, 50]", "category": "Python"}, {"instruction": "Read the data structure and output the sum of all the values.", "input": "data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "let total = 0;\ndata.forEach((arr)=> {\n\tarr.forEach(num => {\n\t\ttotal += num;\n\t});\n});\nconsole.log(total); //45", "category": "Python"}, {"instruction": "Modify the existing code so it prints out the numbers from 0 to 10 in reverser order.", "input": "for (let i = 0; i < 10; i++) {\n\tconsole.log(i);\n}", "output": "for (let i = 10; i >= 0; i--) {\n\tconsole.log(i);\n}", "category": "Python"}, {"instruction": "Using the given list, create a new variable \"result\" that stores the sum of all the elements.", "input": "items = [1, 2, 3, 4, 5]", "output": "result = 0\nfor item in items:\n result += item", "category": "Python"}, {"instruction": "Given a sorted list of integers, write a Python function to search for a specific target element.", "input": "", "output": "def binary_search(list, target):\n low = 0\n high = len(list) - 1\n\n while low <= high:\n  mid = (low + high) // 2\n  if list[mid] < target:\n   low = mid + 1\n  elif list[mid] > target:\n   high = mid - 1\n  else:\n   return mid\n return False", "category": "Python"}, {"instruction": "Construct a while loop that prints integers from 0 to 9.", "input": "", "output": "i = 0\nwhile i < 10:\n print(i)\n i+=1", "category": "Python"}, {"instruction": "Retrieve the public IP address of your machine using Python.", "input": "", "output": "import requests\n\ndef get_public_ip():\n response = requests.get('https://api.ipify.org')\n return response.text", "category": "Python"}, {"instruction": "Create a list of all the words in the given sentence.", "input": "The quick brown fox jumped over the lazy dog.", "output": "words_list = [\"The\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"]", "category": "Python"}, {"instruction": "Given a list of tuples, return a new list with the value of each tuple increased by one.", "input": "tuples = [(1,2), (2,3), (3,4)]", "output": "new_tuples = []\nfor t in tuples:\n    new_tuples.append((t[0] + 1, t[1] + 1))", "category": "Python"}, {"instruction": "Construct a SQL query to find all customers in a given database table.", "input": "Table: Customers", "output": "SELECT * FROM Customers;", "category": "Python"}, {"instruction": "Identify the largest element of an array with python.", "input": "[9, 4, 2, 8, 7]", "output": "def find_largest_num(a): \n  if len(a) == 0: \n    return\n  max = a[0] \n  for num in a: \n    if num > max: \n      max = num \n  return max", "category": "Python"}, {"instruction": "Generate a python script that concatenates two strings.", "input": "String 1: \"foo\" \nString 2: \"bar\"", "output": "str1 = \"foo\" \nstr2 = \"bar\"\nconcatenated_str = str1 + str2\nprint(concatenated_str)", "category": "Python"}, {"instruction": "Create a JavaScript loop that counts from 1 to 10.", "input": "", "output": "for (let i = 1; i <= 10; i++) {\n    console.log(i);\n}", "category": "Python"}, {"instruction": "Write a SQL query to select the records from the table \"users\" where the age is greater than 18.", "input": "SELECT * FROM users", "output": "SELECT * FROM users WHERE age > 18;", "category": "Python"}, {"instruction": "Write a code to print the words \"Hello world!\" n times if n is given as an input.", "input": "", "output": "def hello(n):\n    if n > 0:\n        for x in range(n):\n            print(\"Hello world!\")\n    else:\n        print(\"Input should be a number greater than 0\")\n\nhello(5)", "category": "Python"}, {"instruction": "Create a class in JavaScript to represent a person with properties like name, age, and gender.", "input": "", "output": "class Person {\n    constructor(name, age, gender) {\n        this.name = name;\n        this.age = age;\n        this.gender = gender;\n    }\n}", "category": "Python"}, {"instruction": "Create a class in Python to represent a book with the title, author and year of publication as attributes.", "input": "", "output": "class Book:\n    def __init__(self, title, author, year):\n        self.title = title\n        self.author = author\n        self.year = year", "category": "Python"}, {"instruction": "Write a Python function to normalize a given list of numbers so that they sum up to 1.", "input": "arr = [2, 4, 6, 8]", "output": "def normalize(arr):\n    # calculate the sum of the given numbers\n    total = sum(arr)\n\n    # normalize each number in the array\n    normalized_arr = [number / total for number in arr]\n    \n    return normalized_arr\n\n# print the normalized array\nprint(normalize(arr)) # prints [0.1, 0.2, 0.3, 0.4]", "category": "Python"}, {"instruction": "Write a JavaScript statement to determine whether a given string is empty or not.", "input": "", "output": "// given string\nlet str = \"\";\n\nif (str == \"\") {\n    console.log('String is empty');\n}", "category": "Python"}, {"instruction": "Construct a for loop to print out numbers ranging from 1 to 10, skipping even numbers.", "input": "", "output": "for i in range(1,11):\n if i % 2 != 0:\n print(i)", "category": "Python"}, {"instruction": "Create a program that prompts the user to enter their name and prints it out.", "input": "", "output": "# Get user input\nname = input('Enter your name: ')\n\n# Print out the user's name\nprint('Hello ' + name + '!')", "category": "Python"}, {"instruction": "Convert a given JSON string to a JavaScript object.", "input": "'{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}'", "output": "# Convert given JSON string to JavaScript object\nlet obj = JSON.parse('{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}');\n\nconsole.log(obj);\n// Output: {name: \"John\", age: 30, city: \"New York\"}", "category": "Python"}, {"instruction": "Write a JavaScript statement to check if a given number is greater than 5.", "input": "", "output": "// given number\nlet number = 5;\n\nif (number > 5) {\n    console.log('Number is greater than 5');\n}", "category": "Python"}, {"instruction": "Using jQuery, select all paragraph elements on a page and hide them.", "input": "", "output": "$('p').hide();", "category": "Python"}, {"instruction": "Create an array of 100 elements filled with random numbers from 1 to 100.", "input": "", "output": "import random\n\n# Create an array of 100 elements with 0 values\nrandom_num_arr = [0] * 100\n\n# Fill each of the 100 elements with random numbers from 1 to 100\nfor i in range(100):\n    random_num_arr[i] = random.randint(1, 100)\n\nprint(random_num_arr)", "category": "Python"}, {"instruction": "Create a Java class called Employee with a constructor taking name and salary as arguments.", "input": "", "output": "public class Employee\n{\n    private String name;\n    private double salary;\n \n    public Employee(String name, double salary)\n    {\n        this.name = name;\n        this.salary = salary;\n    }\n    \n    // Getters and setters\n    public String getName()\n    {\n        return name;\n    }\n  \n    public void setName(String name)\n    {\n        this.name = name;\n    }\n  \n    public double getSalary()\n    {\n        return salary;\n    }\n  \n    public void setSalary(double salary)\n    {\n        this.salary = salary;\n    }\n}", "category": "Python"}, {"instruction": "Create an SQL query that joins two tables, Orders and Customers, and returns a list of customers who have ordered something in the last month.", "input": "", "output": "SELECT c.name\nFROM Orders o\nINNER JOIN Customers c ON o.customer_id = c.id\nWHERE o.order_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);", "category": "Python"}, {"instruction": "Create a line chart from given data on the number of car sales in the UK from 2008 to 2019.", "input": "year = ['2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019']\nnumber_of_sales = [1.8, 2.1, 2.5, 2.6, 2.8, 3.0, 3.2, 3.5, 3.7, 3.8, 4.0, 4.2]", "output": "import matplotlib.pyplot as plt\n\n# Make a data frame from the given data\ndf = pd.DataFrame({'year': year, 'number_of_sales': number_of_sales})\n\n# Plot a line chart\nplt.plot(df['year'], df['number_of_sales'], linewidth=3)\nplt.title(\"Car Sales in the UK from 2008 to 2019\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"Number of sales\")\n\n# Show the plot\nplt.show()", "category": "Python"}, {"instruction": "Perform an left outer join of two tables, Customers and Orders, in an SQL query and order the result by CustomerName in ascending order.", "input": "", "output": "SELECT c.Name AS CustomerName, o.OrderNumber\nFROM Customers c\nLEFT OUTER JOIN Orders o ON c.ID = o.CustomerID\nORDER BY CustomerName ASC;", "category": "Python"}, {"instruction": "Fix the syntax error in the following Java code.", "input": "String[] x = {\"a\", \"b\", \"c\"}\n\nfor (int i=0; i<x.lenght; i++) {\nSystem.out.println(x[i]);\n}", "output": "String[] x = {\"a\", \"b\", \"c\"};\n\nfor (int i=0; i<x.length; i++) {\nSystem.out.println(x[i]);\n}", "category": "Python"}, {"instruction": "Using the parameters provided, create a new variable \"n\" that stores the sum of \"a\" and \"b\".", "input": "a = 25\nb = 10", "output": "n = a + b", "category": "Python"}, {"instruction": "Write an SQL query to find all the employees based in France.", "input": "", "output": "SELECT * FROM employees WHERE country = 'France';", "category": "Python"}, {"instruction": "Describe the difference between a loop and a conditional statement.", "input": "", "output": "A loop is a set of instructions that is execute repeatedly until a certain condition is met. A conditional statement is an instruction that is used to check a condition, and if the condition is true, it will execute certain code. Loops can be used to execute a block of code multiple times, while a conditional statement can be used to choose between different blocks of code.", "category": "Python"}, {"instruction": "Change the code to allow two parameters to be passed.", "input": "function sum(a) {\n  return a;\n}", "output": "function sum(a, b) {\n  return a + b;\n}", "category": "Python"}, {"instruction": "Create a function in JavaScript to show a message.", "input": "", "output": "function showMessage() {\n  console.log('This is a message');\n}", "category": "Python"}, {"instruction": "Write a C program that prints out a pyramid of numbers.", "input": "", "output": "#include <stdio.h>\n\nvoid printPyramid(int n) \n{ \n    int i, j; \n   \n    for (i=0; i<n; i++) \n    { \n        for (j=0; j<=i; j++) \n            printf(\"%d \", j+1); \n        printf(\"\\n\"); \n    } \n} \n  \nint main() \n{ \n    int n = 5; \n    printPyramid(n); \n    return 0; \n}", "category": "Python"}, {"instruction": "Using the given JSON data, create a JavaScript object and output its first element.", "input": "{\"people\": [{\"name\": \"John\", \"age\": 30}, {\"name\": \"Alice\", \"age\": 25}]}", "output": "let jsonData = {\n  \"people\": [{\"name\": \"John\", \"age\": 30}, {\"name\": \"Alice\", \"age\": 25}]\n};\nlet firstElement = jsonData.people[0];\nconsole.log(firstElement);", "category": "Python"}, {"instruction": "Create a Python program that prints out a given list of numbers in reverse order.", "input": "[1, 2, 3, 4, 5]", "output": "for i in range(len(list) - 1, -1, -1):\n    print(list[i])", "category": "Python"}, {"instruction": "Create a C# program that creates a List of five strings and prints out each one.", "input": "", "output": "List<string> myList = new List<string>();\nmyList.Add(\"hello\");\nmyList.Add(\"world\");\nmyList.Add(\"testing\");\nmyList.Add(\"123\");\nmyList.Add(\"goodbye\");\n\nforeach (string s in myList)\n{\n Console.WriteLine(s);\n}", "category": "Python"}, {"instruction": "Create a JavaScript object that stores the properties name, age and favorite color.", "input": "", "output": "let person = {\n  name: \"John Smith\",\n  age: 30,\n  favoriteColor: \"blue\"\n};", "category": "Python"}, {"instruction": "In C++, create a class called 'Point' that stores a 2D point with x and y coordinates.", "input": "", "output": "class Point {\n private:\n  int x;\n  int y;\n public:\n  Point(int x, int y) : x(x), y(y) {}\n  int getX() const { return x; }\n  int getY() const { return y; }\n};", "category": "Python"}, {"instruction": "Write an SQL query to select all rows from the table 'users' where the 'last_name' is 'Smith'.", "input": "", "output": "SELECT * FROM users WHERE last_name = 'Smith'", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to remove all children that are of the class 'myclass' in a div with id 'myDiv'.", "input": "", "output": "document.getElementById(\"myDiv\").querySelectorAll(\".myclass\").forEach(el => el.remove());", "category": "Python"}, {"instruction": "Write a Bash command to list the top 20 processes that are currently running on the system.", "input": "", "output": "ps -aux --sort=-%cpu | head -n 20", "category": "Python"}, {"instruction": "Write a Python script that reads in a string and checks if it is a palindrome.", "input": "\"Radar\"", "output": "The given string is a palindrome.", "category": "Python"}, {"instruction": "Using the given array of integers, calculate the mean and output the result.", "input": "[7, 4, 5, 9]", "output": "The mean of the given array is 6.5.", "category": "Python"}, {"instruction": "Write an algorithm to sort a list of numbers from least to greatest.", "input": "", "output": "def sort_list(mylist):\n    for i in range(len(mylist)):\n        min_idx = i\n        for j in range(i+1, len(mylist)):\n            if mylist[min_idx] > mylist[j]:\n                min_idx = j\n        mylist[i], mylist[min_idx] = mylist[min_idx], mylist[i]\n    return mylist", "category": "Python"}, {"instruction": "What are the three main principles of OOP?", "input": "", "output": "The three main principles of Object Oriented Programming (OOP) are encapsulation, inheritance, and polymorphism. Encapsulation is the process of wrapping data and functions together into one unit. Inheritance is the process of allowing a class to inherit the properties and behavior of a parent class. Polymorphism is the ability to define multiple versions of the same function or object depending on the context in which they are used.", "category": "Python"}, {"instruction": "Write a code snippet to get the first element of an array in JavaScript.", "input": "let myArray = [1,2,3];", "output": "let firstElement = myArray[0];", "category": "Python"}, {"instruction": "Compare and contrast classes and functions in C#.", "input": "", "output": "Classes and functions in C# serve similar purposes, such as organizing code, adding structure to a program, and making it easier to understand and maintain, but they are different in several ways. Classes are an aggregate of various related data and methods; they are used to represent real-world entities and represent a model of an object or concept in the program. Functions are separate, independent, self-contained pieces of code that perform a specific operation; they accept data as input, perform some kind of operation on that input, and then return a result.", "category": "Python"}, {"instruction": "Edit the following C code to remove any syntax errors.", "input": "int main()\n{\n  int a,b;\n  printf(\"Enter two numbers:\");\n  scanf(\"%d &d\", &a, &b)\n  printf(\"Product = %d\", a*b)\n  return 0;\n}", "output": "int main()\n{\n  int a,b;\n  printf(\"Enter two numbers:\");\n  scanf(\"%d %d\", &a, &b);\n  printf(\"Product = %d\", a*b);\n  return 0;\n}", "category": "Python"}, {"instruction": "Write a function in Haskell that takes two strings as arguments and returns them in reverse order.", "input": "", "output": "reverseOrder :: String -> String -> String\nreverseOrder x y = y ++ x", "category": "Python"}, {"instruction": "Create a program in C that outputs all perfect square numbers between 1 and 100.", "input": "", "output": "#include <stdio.h>\nint main()\n{\n    for (int i = 1; i <= 100; i++)\n    {\n        int sq = i * i;\n        if (sq <= 100)\n            printf(\"%d \", sq);\n    }\n    return 0;\n}", "category": "Python"}, {"instruction": "Write an HTML code snippet to make a link open in a new window.", "input": "Link: https://www.example.com", "output": "<a href=\"https://www.example.com\" target=\"_blank\">Link Text</a>", "category": "Python"}, {"instruction": "Design a function in PHP to add two numbers together.", "input": "", "output": "function addNumbers($a, $b) {\n    return $a + $b;\n}", "category": "Python"}, {"instruction": "Create an algorithm in JavaScript that calculates the average of a series of numbers.", "input": "Series of numbers: [2, 3, 7, 8]", "output": "function calculateAverage(arr) {\n    let sum = 0;\n    arr.forEach(num => sum += num);\n    return sum/arr.length;\n}\n\nconsole.log(calculateAverage([2, 3, 7, 8]))", "category": "Python"}, {"instruction": "Create a class in Python called 'Rectangle' to store the coordinates of a rectangle.", "input": "", "output": "class Rectangle: \n    def __init__(self, x1, y1, x2, y2): \n        self.x1 = x1\n        self.y1 = y1\n        self.x2 = x2\n        self.y2 = y2\n  \n    def get_coordinates(self): \n        return (self.x1, self.y1, self.x2, self.y2)", "category": "Python"}, {"instruction": "Using the given information, create a SQL query to find the total number of products in the database.", "input": "Table: products\nColumns: product_id, product_name", "output": "SELECT COUNT(*) FROM products;", "category": "Python"}, {"instruction": "Debug this Java code to make it work.", "input": "public class test\n{\n  public static void main(String args[])\n  {\n    int a = 5;\n    int b = 0;\n    int c = a + b;\n    System.out.println(\"Result is: \" + c);\n  }\n}", "output": "public class test\n{\n  public static void main(String args[])\n  {\n    int a = 5;\n    int b = 0;\n    if(b!=0)\n    {\n      int c = a + b;\n      System.out.println(\"Result is: \" + c);\n    }\n    else\n    {\n      System.out.println(\"Error: Cannot divide by 0!\");\n    }\n  }\n}", "category": "Python"}, {"instruction": "Design a function in Java that takes a parameter of type array as an argument and returns its maximum value.", "input": "Array = {21, 8, 43, 10, 7}", "output": "public int maxElement(int[] array) {\nint max = array[0];\n \nfor (int i = 1; i < array.length; i++)\nif (array[i] > max)\nmax = array[i];\n \nreturn max;\n}", "category": "Python"}, {"instruction": "Construct a function to set up a dictionary with words and corresponding counts of occurrences of each word.", "input": "`<code>'hey hey hello hello hell oh hello',</code>`", "output": "\"\"\"\nConstruct a function to set up a dictionary with words and corresponding counts of occurrences of each word\n\"\"\"\ndef word_count(string):\n    word_dict = {}\n    for word in string.split():\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n\n    return word_dict\n\nif __name__ == '__main__':\n    print(word_count('hey hey hello hello hell oh hello'))", "category": "Python"}, {"instruction": "Construct a program to print the Pyramid pattern using asterisks.", "input": "", "output": "\"\"\"\nConstruct a program to print the Pyramid pattern using asterisks\n\"\"\"\nfor i in range(0, 5):\n    for j in range(0, i+1):\n        print(\"*\", end=\"\")\n    print()", "category": "Python"}, {"instruction": "Construct an algorithm to find the longest common prefix string amongst an array of strings.", "input": "`<code>['leet', 'leets', 'lee', 'leeston', 'leeve']</code>`", "output": "\"\"\"\nConstruct an algorithm to find the longest common prefix string amongst an array of strings\n\"\"\"\ndef longest_common_prefix(strs):\n    prefix = strs[0]\n    i = 0\n    while i < len(prefix):\n        for string in strs:\n            if i >= len(string) or string[i] != prefix[i]:\n                return prefix[0:i]\n        i += 1\n    return prefix\n\nif __name__ == '__main__':\n    print(longest_common_prefix(['leet', 'leets', 'lee', 'leeston', 'leeve']))", "category": "Python"}, {"instruction": "Create an algorithm to search for a substring in a given string.", "input": "`<code>'Hello World!', substring = 'll'</code>`", "output": "\"\"\"\nCreate an algorithm to search for a substring in a given string\n\"\"\"\ndef search(string, substring):\n    for i in range(len(string)):\n        if string[i: i + len(substring)] == substring:\n            return True\n    return False\n\nif __name__ == '__main__':\n    print(search('Hello World!', 'll'))", "category": "Python"}, {"instruction": "Construct a dialogue bot using natural language processing techniques.", "input": "`<code>Hello!</code>`", "output": "\"\"\"\nConstruct a dialogue bot using natural language processing techniques\n\"\"\"\nimport nltk\n\n# Define a simple set of rules to respond to the user's input\ndef respond(input):\n\tif input == \"hello\" or input == \"hi\":\n\t\treturn(\"Hello. How can I help you today?\")\n\telif input == \"goodbye\":\n\t\treturn(\"Goodbye! Have a nice day.\")\n\telse:\n\t\treturn(\"I'm sorry, I don't understand what you said.\")\n\n# Tokenize the input string and call the respond function\ndef chatbot(input_string):\n\ttokens = nltk.word_tokenize(input_string)\n\tresponse = respond(' '.join(tokens))\n\treturn response\n\nif __name__ == '__main__':\n\tprint(chatbot(\"Hello!\"))", "category": "Python"}, {"instruction": "Write an algorithm to print the first 10 natural numbers.", "input": "", "output": "\"\"\"\nWrite an algorithm to print the first 10 natural numbers\n\"\"\"\nfor i in range(1, 11):\n    print(i)", "category": "Python"}, {"instruction": "Write an SQL query that designates a unique identifier for each row in a table.", "input": "Table name: \"User\" \n Columns: id, name, occupation", "output": "SELECT id, name, occupation, \n       ROW_NUMBER() OVER (ORDER BY id) AS row_id\nFROM User;", "category": "Python"}, {"instruction": "Create a MySQL query that creates a table with two columns, one for id and one for name.", "input": "", "output": "CREATE TABLE table_name\n(\n  id INT NOT NULL AUTO_INCREMENT, \n  name VARCHAR(255) NOT NULL,\n  PRIMARY KEY (id)\n);", "category": "Python"}, {"instruction": "Generate an algorithm to perform the task described below", "input": "Given two strings, find out if one string is a rotation of other.", "output": "The following algorithm can be used to find out if a given string is a rotation of another given string:\n1. Create a concatenated string by concatenating the first string with itself\n2. Check if the second string is a substring of the concatenated string.\n3. If yes, then the second string is a rotation of the first string", "category": "Python"}, {"instruction": "Manually debug the following code to find any errors.", "input": "def foo(x):\n    y = x**3\n    z = y + 2\n    return z", "output": "No errors found in the given code.", "category": "Python"}, {"instruction": "Reorder a given array such that all even elements are placed before odd elements.", "input": "arr = [1, 2, 3, 4, 5, 6, 7, 8]", "output": "def reorder_array(arr):\n    \"\"\"Reorders a given array such that all even elements are placed before odd elements.\"\"\"\n    even = [i for i in arr if i % 2 == 0]\n    odd = [j for j in arr if j % 2 != 0]\n\n    return even + odd\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    ordered = reorder_array(arr)\n    print(ordered)", "category": "Python"}, {"instruction": "How many unique elements are present in the given array?", "input": "arr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]", "output": "def count_unique_elements(arr):\n    \"\"\"Returns the number of unique elements present in the given array.\"\"\"\n    unique_elements = set(arr)\n    return len(unique_elements)\n\nif __name__ == '__main__':\n    arr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n    count = count_unique_elements(arr)\n    print('Number of unique elements:', count)", "category": "Python"}, {"instruction": "Create code to extract the middle character of a given string.", "input": "string = \"middle\"", "output": "def get_middle_char(string):\n    \"\"\"Returns the middle character of a given string.\"\"\"\n    middle_index = int(len(string) / 2)\n    return string[middle_index]\n\nif __name__ == '__main__':\n    string = \"middle\"\n    print(get_middle_char(string))", "category": "Python"}, {"instruction": "Are there any palindromes in the given sequence of numbers?", "input": "seq = [2332, 24124, 1221, 89898]", "output": "def has_palindrome(seq):\n    \"\"\"Returns True if the given sequence has a palindrome, otherwise returns False\"\"\"\n    for num in seq:\n        if str(num) == str(num)[::-1]:\n            return True\n    return False\n\nif __name__ == '__main__':\n    seq = [2332, 24124, 1221, 89898]\n    print(has_palindrome(seq))", "category": "Python"}, {"instruction": "Assume that we have an array of integers. Create code to input the array and output the sum of all the elements of the array.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def calculate_sum(arr):\n    \"\"\"Calculates sum of all elements in the given array\"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    print(calculate_sum(arr))", "category": "Python"}, {"instruction": "Update this JavaScript code to use modern coding practices.", "input": "var x = 10;\nif(x == 10){\n  alert(\"x is equal to 10\");\n}", "output": "const x = 10;\nif (x === 10) {\n  console.log(\"x is equal to 10\");\n}", "category": "Python"}, {"instruction": "Analyze this SQL query and explain its purpose.", "input": "SELECT *\nFROM customers \nWHERE age BETWEEN 30 AND 40 \nORDER BY join_date DESC;", "output": "This query retrieves all customer records from the customers table where the age is greater than or equal to 30 and less than or equal to 40 and orders the results by join_date in descending order.  This query will return records with the newest join date first.", "category": "Python"}, {"instruction": "Create a PHP script to provide pagination on a website.", "input": "", "output": "<?php \n \n// Get the total number of items \n$total_items = //sql query to get total items \n\n// Calculate the total number of pages \n$total_pages = ceil( $total_items / 10 ); \n\n// Determine the current page number \nif ( ! isset( $_GET['pagenum'] ) ) \n{ \n    $pagenum = 1; \n} \nelse \n{ \n    $pagenum = intval( $_GET['pagenum'] ) ; \n} \n\n// Create the pagination links \n$pagination_links  = paginate_links( array( \n    'base'     => add_query_arg( 'pagenum', '%#%' ), \n    'format'   => '', \n    'total'    => $total_pages, \n    'current'  => $pagenum, \n    'show_all' => false, \n    'end_size' => 1, \n    'mid_size' => 2, \n    'prev_next'  => True, \n    'prev_text'  => __('\u00ab Previous'), \n    'next_text'  => __('Next \u00bb'), \n    'type'      => 'plain', \n    ) \n);\n\n// Display the pagination links \nif ($pagination_links) \n{ \n    echo $pagination_links; \n}\n?>", "category": "Python"}, {"instruction": "Write a JavaScript program to accept a string and check if it is a palindrome or not.", "input": "", "output": "function isPalindrome(str) { \n    var len = str.length; \n    for ( var i = 0; i < Math.floor(len/2); i++ ) { \n        if (str[i] !== str[len - 1 - i]) { \n            return false; \n        } \n    } \n\n    return true; \n}", "category": "Python"}, {"instruction": "Update this JavaScript code to use the new ES6 syntax.", "input": "var myArray = [3, 4, 5];\nfor (var i = 0; i < myArray.length; i++) {\n  console.log(myArray[i]);\n}", "output": "const myArray = [3, 4, 5];\nfor (let i = 0; i < myArray.length; i++) {\n  console.log(myArray[i]);\n}", "category": "Python"}, {"instruction": "Create a basic HTML page with a heading and a paragraph of text.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>My HTML Page</title>\n</head>\n<body>\n  <h1>My HTML Page</h1>\n  <p>This is a basic HTML page with a heading and a paragraph of text.</p> \n</body>\n</html>", "category": "Python"}, {"instruction": "Edit this HTML code to make it compliant with the HTML5 standard.", "input": "<html>\n<head>\n  <title>My HTML Page</title>\n</head>\n<body>\n  <p>My HTML Page</p>\n</body>\n</html>", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>My HTML Page</title>\n</head>\n<body>\n  <p>My HTML Page</p>\n</body>\n</html>", "category": "Python"}, {"instruction": "How can we debug our JavaScript code?", "input": "", "output": "We can debug our JavaScript code by using the console.log() method to log values and events to the console. We can also use the JavaScript debugger statement to pause the execution at a particular point in the code, and step through the code line by line. We can also add breakpoints and inspect variables at different stages of the program.", "category": "Python"}, {"instruction": "What is the most efficient way to find the index of a given element in an unsorted array using JavaScript?", "input": "", "output": "The most efficient way to find the index of a given element in an unsorted array using JavaScript is by using the indexOf() method. This method returns the index of the first occurrence of a given element in the array, or -1 if it is not present.", "category": "Python"}, {"instruction": "How can we convert strings to float in Python?", "input": "", "output": "We can convert strings to float in Python by using the float() function. This takes a string argument and returns a floating-point number. For example, float(\"10.5\") would return 10.5 as a float.", "category": "Python"}, {"instruction": "Add 10 to the last element of a given array.", "input": "[1, 2, 3, 4]", "output": "arr = [1, 2, 3,4]\narr[-1] += 10\nprint(arr)", "category": "Python"}, {"instruction": "Find the index of the element 8 in the list [3, 8, 9, 5, 1, 6].", "input": "", "output": "list = [3, 8, 9, 5, 1, 6]\nindex = list.index(8)\nprint(\"Index of 8 is:\", index)", "category": "Python"}, {"instruction": "Read the following dictionary:", "input": "{'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9] }", "output": "myDict = {'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]}\nfor key, val in myDict.items():\n    print(\"key:\", key, \"values:\", val)", "category": "Python"}, {"instruction": "Extract all values from the following dictionary:", "input": "{'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9] }", "output": "myDict = {'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]}\nvalues = [val for vals in myDict.values() for val in vals]\nprint(values)", "category": "Python"}, {"instruction": "Train a random forest model for the given dataset.", "input": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\ndf = pd.read_csv(\"mydata.csv\")\nX = df.drop('target', axis = 1)\ny = df[\"target\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, testSize = 0.2, randomState = 42)", "output": "from sklearn.ensemble import RandomForestClassifier\n\nrf_model = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=42)\nrf_model.fit(X_train, y_train)", "category": "Python"}, {"instruction": "Generate a linear regression model with a categorical independent variable.", "input": "", "output": "from sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import OneHotEncoder\n\nX = df[[\"categorical_var\"]]\ny = df[\"target\"]\n\nencoder = OneHotEncoder()\nencoded_X = encoder.fit_transform(X)\n\nmodel = LogisticRegression(solver=\"lbfgs\")\nmodel.fit(encoded_X, y)", "category": "Python"}, {"instruction": "Write a function in Python to select all the elements from a list whose index is a multiple of 3.", "input": "test_list = [2, 5, 8, 12, 9, 82, 3]", "output": "def select_multiples_of_3(input_list):\n    result = []\n    for index, num in enumerate(input_list):\n        if index % 3 == 0:\n            result.append(num)\n    return result\n\n# test\ntest_list = [2, 5, 8, 12, 9, 82, 3]\nprint(select_multiples_of_3(test_list)) # [2, 12, 3]", "category": "Python"}, {"instruction": "Create a Python code to reverse the given string.", "input": "", "output": "def reverse_string(string):\n return string[::-1]", "category": "Python"}, {"instruction": "Create a Python script to separate a given string into words and count the number of times the each word is used in the string.", "input": "", "output": "def count_words(string):\n counts = {}\n words = string.split()\n for word in words:\n if word in counts:\n counts[word] += 1\n else:\n counts[word] = 1\n return counts", "category": "Python"}, {"instruction": "Create a Python function to generate the first n prime numers.", "input": "", "output": "def generate_prime_numbers(n):\n prime_nums = []\n i = 2\n while len(prime_nums) < n:\n if is_prime(i):\n prime_nums.append(i)\n i += 1\n return prime_nums\n\ndef is_prime(n):\n if n <= 1:\n return False\n for i in range(2, int(n**0.5) + 1):\n if n % i == 0:\n return False\n return True", "category": "Python"}, {"instruction": "Write a Python function to compare two strings and return all the common elements.", "input": "s1='python'\ns2='programming'", "output": "def find_common_elements(s1, s2):\n res = []\n for i in s1:\n if i in s2:\n res.append(i)\n return res\n\nfind_common_elements(s1,s2)\n#Output: ['n']", "category": "Python"}, {"instruction": "What is the output of the following code snippet?\nint a = 5;\nint b = 6;\nint result = a * b;", "input": "", "output": "The output of the code snippet is 30. This is the result of multiplying the values of 'a' (5) and 'b' (6).", "category": "Python"}, {"instruction": "Design a CSS selector to select all the h2 tags under the div tag with class \"container\".", "input": "", "output": "div.container h2 { }", "category": "Python"}, {"instruction": "Write a query in MongoDB to search for documents where the address field contains the string \"California\".", "input": "", "output": "db.collection.find({\"address\":{$regex: \".*California.*\"}})", "category": "Python"}, {"instruction": "Given an integer array, output the largest sum of all the possible subarray sums, use Python for the solution.", "input": "Example array: [-2,1,-3,4,-1,2,1,-5,4]", "output": "def largest_sum(arr):\n    cur_sum = 0\n    max_sum = float(\"-inf\")\n    for i in range(len(arr)):\n        cur_sum = max(arr[i], cur_sum + arr[i])\n        max_sum = max(max_sum, cur_sum)\n    return max_sum", "category": "Python"}, {"instruction": "Now write a function to generate all the factorial numbers from 1 to n.", "input": "", "output": "def generate_factorials(n):\n    factorials = [1]\n    for num in range(1,n+1):\n        if num == 1:\n            factorials.append(1)\n        else:\n            factorials.append(factorials[-1]*num)\n    return factorials", "category": "Python"}, {"instruction": "Write a C++ program to print out the first 5 lines of the Pascal Triangle.", "input": "", "output": "#include<iostream>\nusing namespace std;\nint main()\n{\nfor (int i = 0; i < 5; i++)\n{\n  for (int j = 0; j <= i; j++)\n    cout << binomialCoeff(i, j) << \" \";\n  cout << \"\\n\";\n}\nreturn 0;\n}\n \nint binomialCoeff(int n, int k)\n{\n    int res = 1;\n    if (k > n - k) \n        k = n - k;\n    for (int i = 0; i < k; ++i)\n    {\n        res *= (n - i);\n        res /= (i + 1);\n    }\n    return res;\n}", "category": "Python"}, {"instruction": "Write a function that given a string of character, returns the number of vowels in it.", "input": "Example string: \"hello world\"", "output": "def count_vowels(s): \n    vowels = 'aeiou'\n    count = 0\n    for char in s: \n        if char in vowels: \n            count += 1\n    return count", "category": "Python"}, {"instruction": "Write a for loop to output all the odd numbers from 1 to 10 in Python.", "input": "", "output": "for i in range(1,11):\n   if (i % 2 != 0):\n       print(i)", "category": "Python"}, {"instruction": "Sort a given array using quicksort algorithm.", "input": "arr = [3, 2, 9, 10, 1]", "output": "def quicksort(arr):\n  if len(arr) <= 1:\n    return arr\n  \n  pivot = arr[len(arr) // 2]\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\nprint(quicksort(arr))", "category": "Python"}, {"instruction": "Complete the following C++ code to sort a two-dimensional array.", "input": "int[][] arr = {{4, 9}, {2, 8}, {3, 1}};", "output": "#include <algorithm> \n\nint[][] arr = {{4, 9}, {2, 8}, {3, 1}};\n\n// Sort by the first element\nstd::sort(arr.begin(), arr.end(), \n    [](const std::vector<int>& a, const std::vector<int>& b) {\n        return a[0] < b[0];\n    });\n\n// Sort by the second element \nstd::sort(arr.begin(), arr.end(), \n    [](const std::vector<int>& a, const std::vector<int>& b) {\n        return a[1] < b[1];\n    });", "category": "Python"}, {"instruction": "Write a Bash script that prints out all the arguments passed to it.", "input": "", "output": "#!/bin/bash\n\nfor arg in \"$@\"\ndo\n    echo \"$arg\"\ndone", "category": "Python"}, {"instruction": "Create a variable in Python and assign it the value 15.", "input": "", "output": "num = 15", "category": "Python"}, {"instruction": "Create a recursive function that returns the Fibonacci number corresponding to a given input.", "input": "", "output": "def Fibonacci(n): \n    if n <= 1: \n        return n \n    else: \n        return(Fibonacci(n-1) + Fibonacci(n-2)) \n  \n# Driver Code \nnterms = 10\n  \n# check if the number of terms is valid \nif nterms <= 0: \n    print(\"Plese enter a positive integer\") \nelse: \n    print(\"Fibonacci sequence:\") \n    for i in range(nterms): \n        print(Fibonacci(i))", "category": "Python"}, {"instruction": "What is a use case for exception handling in Java?", "input": "", "output": "Exception handling in Java is used to catch and handle errors in code. When an exception occurs, a program may throw an exception object and propagate it to the code that invoked the program; this allows the program to handle the exception and take the necessary actions. Exception handling also allows for code to be written that handles expected errors and ensures the failure of a program does not lead to an undesired result or invalid state.", "category": "Python"}, {"instruction": "What is the advantage of using Dynamic programming over Greedy algorithms?", "input": "", "output": "The main advantage of using dynamic programming over greedy algorithms is that it is optimized for the long-term. Dynamic programming takes into account the entire problem and finds the optimal solution based on the entire problem. On the other hand, greedy algorithms may find an optimal solution to a given sub-problem, but they may not find the optimal solution to the entire problem. In addition, dynamic programming is better suited for problems with overlapping sub-problems, which may not be solved by a greedy algorithm.", "category": "Python"}, {"instruction": "Write a function to take three integers as input and return their product.", "input": "x=3, y=5, z=7", "output": "def product(x,y,z):\n    return x*y*z\n\nx = 3\ny = 5\nz = 7\n\nres = product(x,y,z)\nprint(res)", "category": "Python"}, {"instruction": "What kind of sorting algorithm is Insertion Sort?", "input": "", "output": "Insertion sort is a comparison-based sorting algorithm in which the elements are compared and arranged in a particular order. In this algorithm, a sublist is created which is sorted and at each iteration it is compared with the elements of the original list and placed in the correct position. It is an in-place sorting algorithm, meaning it doesn\u2019t require any additional data structures for sorting.", "category": "Python"}, {"instruction": "What is a use case for the switch statement in C++?", "input": "", "output": "A switch statement in C++ is used to execute a statement or group of statements for a given value. This is particularly useful when dealing with a large number of cases. The switch statement evaluates an expression and compares the result with different case labels, and executes the code associated with the matching case label.", "category": "Python"}, {"instruction": "Write a method to take two strings as the inputs and check if the second string is a substring of the first one or not.", "input": "String1: hello world\nString2: world", "output": "def is_substring(string1, string2):\n    if string2 in string1: \n        return True\n    else:\n        return False\n\nstring1 = 'hello world'\nstring2 = 'world'\n\nis_substring(string1, string2) # will return True", "category": "Python"}, {"instruction": "What is a use case for inheritance in object-oriented programming?", "input": "", "output": "In object-oriented programming, inheritance is used to create and maintain a hierarchical relationship between classes. By inheriting properties and methods from a parent class, a child class can reuse and extend the functionalities of the parent class. This allows developers to write less code and keep their codebase organized by logically grouping similar classes into a hierarchy, which can then be further extended with new features.", "category": "Python"}, {"instruction": "Sort the given list of employee names alphabetically (A-Z).", "input": "employee_names = ['John', 'Lisa', 'Emily', 'Mia']", "output": "employee_names = ['John', 'Lisa', 'Emily', 'Mia'] \n\nsorted_employees = sorted(employee_names)\n\nprint(sorted_employees)", "category": "Python"}, {"instruction": "Create a Python function that will take two lists as inputs, and return a list that contains all the common items between the lists.", "input": "list1 = [1,2, 3, 4, 5]\nlist2 = [2,4,6,8]", "output": "def common_elements(list1, list2):\n    return [item for item in list1 if item in list2] \n\nlist1 = [1,2, 3, 4, 5]\nlist2 = [2,4,6,8]\n\ncommon_items_list = common_elements(list1, list2)\nprint(common_items_list)", "category": "Python"}, {"instruction": "Write a SQL query to select the customers who live in the given zip code.", "input": "Zip Code: 10003", "output": "SELECT * \nFROM customers \nWHERE zip_code = 10003;", "category": "Python"}, {"instruction": "What is an example of a one-to-one mapping?", "input": "", "output": "An example of a one-to-one mapping is a function, which pairs each element in one set to a unique element in another set, such that each element in the first set is paired with exactly one element in the second set. For example, the following function is one-to-one: f(x) = x + 1. This function maps each number x to a unique number x + 1.", "category": "Python"}, {"instruction": "Write a JavaScript program to create a class 'Shape' and create an object 'circle' of this class.", "input": "", "output": "class Shape {\n    constructor() {\n        this.type = \"Shape\";\n    }\n}\n\nlet circle = new Shape();\ncircle.type = \"Circle\";\nconsole.log(circle.type);", "category": "Python"}, {"instruction": "Create a MySQL query to select the unique emails from a table.", "input": "", "output": "SELECT DISTINCT email FROM tableName;", "category": "Python"}, {"instruction": "Create a basic HTML page using HTML tags.", "input": "", "output": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>My page</title>\n    </head>\n    <body>\n        <h1>This is my page</h1>\n    </body>    \n</html>", "category": "Python"}, {"instruction": "Write an SQL query that returns the seating capacity of a given theater.", "input": "theater name = \u201cFox Theatre\u201d", "output": "SELECT theater_name, seating_capacity \nFROM theater \nWHERE theater_name = 'Fox Theatre';", "category": "Python"}, {"instruction": "Create a Python code snippet to create a line chart with three different categories.", "input": "category1 = [1,2,3,4]\ncategory2 = [4,5,6,7]\ncategory3 = [7,8,9,10]", "output": "import matplotlib.pyplot as plt\n\n# Data to plot\ncategory1 = [1,2,3,4]\ncategory2 = [4,5,6,7]\ncategory3 = [7,8,9,10]\n\n# Create the line plot\nplt.plot(category1, label='Category 1')\nplt.plot(category2, label='Category 2')\nplt.plot(category3, label='Category 3')\n\n# change font type and size\nplt.rc('font', size=16)\n\n# Add a legend\nplt.legend()\n\n# Show the plot\nplt.show()", "category": "Python"}, {"instruction": "Write a JavaScript code snippet that returns a random element from a given array.", "input": "array = [1,2,3,4,5,6]", "output": "function getRandomElement(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n}\n\narray = [1,2,3,4,5,6];\n\nconsole.log(getRandomElement(array));", "category": "Python"}, {"instruction": "Create a PHP script that returns the same result as a given MySQL query.", "input": "SELECT id, name, price \nFROM product", "output": "<?php\n    $con = new mysqli(\"localhost\",\"username\",\"password\",\"database\");\n    \n    if($con->connect_error){\n        echo \"Connection failed \";\n    }\n\n    $sql = \"SELECT id, name, price FROM product\";\n    $result = $con->query($sql);\n\n    if($result->num_rows > 0){\n        while($row = $result->fetch_assoc()){\n            echo \"ID: \" .$row['id']. \" - Name: \" .$row['name']. \" - Price: \" .$row['price']. \"<br>\";\n        }\n    }\n\n    $con->close();\n?>", "category": "Python"}, {"instruction": "Fix the following Java code by adding a missing semicolon.\npublic static void main(String[] args) {\nSystem.out.println(\"Hello World\")", "input": "", "output": "public static void main(String[] args) {\nSystem.out.println(\"Hello World\");\n}", "category": "Python"}, {"instruction": "Arrange the following functions in order of complexity from least complex to most complex.\nA) linearSearch\nB) binarySearch\nC) insertionSort\nD) quickSort", "input": "", "output": "A) linearSearch\nC) insertionSort\nB) binarySearch\nD) quickSort", "category": "Python"}, {"instruction": "Write an HTML page containing a heading with the text \"Welcome\".", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Welcome</title>\n</head>\n<body>\n  <h1>Welcome</h1>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create an array in Java and add the following elements: 5, 7, 3.", "input": "", "output": "int[] arr = {5, 7, 3};", "category": "Python"}, {"instruction": "Write a C# code to convert a double value to a string.", "input": "Double: 7.75", "output": "string val = Convert.ToString(7.75);", "category": "Python"}, {"instruction": "Write a Python code snippet to iterate over a list of strings and print the length of each string.", "input": "List: [\"Hello\", \"World\", \"!\"]", "output": "for string in list:\n    print(len(string))\n    \n# Output: 5, 5, 1", "category": "Python"}, {"instruction": "Create a hashmap in Java with the following key-value pairs: \"Car\" -> \"Honda\", \"Flower\" -> \"Rose\".", "input": "", "output": "HashMap<String, String> map = new HashMap<>();\nmap.put(\"Car\", \"Honda\");\nmap.put(\"Flower\", \"Rose\");", "category": "Python"}, {"instruction": "Compile the following Java code and explain the output.\nclass Test {\n static int x = 8;\n static int y = 3;\n static int z;\n static void addition() {\n z = x + y;\n System.out.println(\"The sum: \" + z);\n }", "input": "", "output": "// Output when compiled:\nThe sum: 11\n\n// Explanation: The above code assigns 'x' to 8, 'y' to 3 and 'z' to the sum of 'x' and 'y' (11). The program then prints out the value of 'z' which is 11.", "category": "Python"}, {"instruction": "List 5 elements of the Python standard library.", "input": "", "output": "sys, os, logging, string, collections", "category": "Python"}, {"instruction": "Calculate the mean of the following array elements: 4, 9, 16, 11, 15.", "input": "", "output": "The mean of the array elements is 11.", "category": "Python"}, {"instruction": "Create a web page with two input boxes to calculate the total cost of a product after sales tax.", "input": "", "output": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>Price and Tax Calculations</title>\n        <script>\n            function calculate(){\n                let price = document.getElementById('price').value;\n                let tax = document.getElementById('tax').value;\n                let total = parseFloat(price) + (parseFloat(price)*parseFloat(tax)/100);\n\n                document.getElementById('total').value = total;\n            }\n        </script>\n    </head>\n    \n    <body>\n        <input type=\"text\" id=\"price\" oninput=\"calculate()\" placeholder=\"Price\" />\n        <input type=\"text\" id=\"tax\" oninput=\"calculate()\" placeholder=\"Tax %\" />\n        <input type=\"text\" id=\"total\" placeholder=\"Total\" readonly=\"true\" />\n    </body>\n\n</html>", "category": "Python"}, {"instruction": "Write a Bash script to evaluate whether a provided number is prime or not.", "input": "", "output": "#!/bin/bash\n\nnum=$1\n\nif [ \"$num\" -lt 2 ]\nthen\n   echo 0\nelse \n   i=2\n\n   until [ $i -gt $((num/2)) ]\n   do\n      if [ $((num%$i)) -eq 0 ]\n      then\n         echo 0\n         exit\n      fi\n   i=$((i+1))\n   done\n   echo 1\nfi", "category": "Python"}, {"instruction": "Create a Python program to sort a dictionary by value.", "input": "my_dict = {\u201cOne\u201d:1, \u201cTwo\u201d:2, \u201cThree\u201d:3}", "output": "my_dict = {'One': 1, 'Two': 2, 'Three': 3}\n\n#sort dictionary by value\nsorted_dict = sorted(my_dict.items(), key=lambda kv: kv[1])\n\nprint(sorted_dict)", "category": "Python"}, {"instruction": "Create a Java program to print out the number of times a string appears in an array.", "input": "array = [\u201cApple\u201d, \u201cOrange\u201d, \u201cApple\u201d, \u201cBanana\u201d]\nString = \u201cApple\u201d", "output": "public class Main {\n    public static void main(String[] args) {\n        String str = \"Apple\";\n        String[] array = {\"Apple\", \"Orange\", \"Apple\", \"Banana\"};\n        int count = 0;\n        for(int i=0; i<array.length; i++) {\n            if(array[i].equals(str)) {\n                count++;\n            }\n        }\n        System.out.println(\"Number of times \"+str+\" appears in the array = \"+count);\n    }\n}", "category": "Python"}, {"instruction": "Create a JavaScript program to provide real-time search results for a given list of elements.", "input": "list = [\u201cApple\u201d, \u201cBanana\u201d, \u201cOrange\u201d]", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<title>Real-time Search Results</title>\n\t<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"></script>\n\t<script>\n\t\tfunction search() {\n\t\t  var input = document.getElementById('search_box').value;\n\t\t  var list = [\"Apple\",\"Banana\",\"Orange\"];\n\t\t  var output = \"\";\n\t\t  \n\t\t  for (i=0; i<list.length; i++) {\n\t\t    if (list[i].includes(input)) {\n\t\t      output+=\"<li>\" +  list[i] + \"</li>\";\n\t\t    }\n\t\t  }\n\t\t  if (output == \"\") {\n\t\t    document.getElementById(\"search_results\").innerHTML = \"No results found\";\n\t\t  } else {\n\t\t    document.getElementById(\"search_results\").innerHTML = output;\n\t\t  }\n\t\t}\n\t</script>\n</head>\n<body>\n\t<input type=\"text\" id=\"search_box\" onkeyup=\"search()\" />\n\t<ul id=\"search_results\" > </ul>\n</body>\n</html>", "category": "Python"}, {"instruction": "Using HTML and CSS, create a basic website with three sections.", "input": "", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title>My Website</title>\n    <style>\n        .section{\n            width: 75%; \n            padding: 25px; \n            margin: auto;\n        }\n        #section1, #section2, #section3{\n            background-color: #f1f1f1;\n        }\n    </style>\n</head>\n\n<body>\n    <div id=\"section1\" class=\"section\">\n        <h1>Section 1</h1>\n    </div>\n    <div id=\"section2\" class=\"section\">\n        <h1>Section 2</h1>\n    </div>\n    <div id=\"section3\" class=\"section\">\n        <h1>Section 3</h1>\n    </div>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create a loop to print out all even numbers in the given set [3, 7, 10, 18, 21, 24].", "input": "", "output": "for (let i=0; i < arr.length; i++) {\n  if (arr[i] % 2 === 0) {\n    console.log(arr[i]);\n  }\n}\n\n// Output: 10, 18, 24", "category": "Python"}, {"instruction": "Create a Python class that encodes a given number using the Base58 algorithm.", "input": "number = 123456789", "output": "class Base58Encoder:\n    '''This class encodes numbers using the Base58 algorithm'''\n    def __init__(self,number):\n        self.number = number\n\n    def encode(self):\n        encoded = \"\" \n        alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    \n        while self.number > 0:\n            remainder = self.number % 58 \n            self.number = self.number // 58 \n            encoded = alphabet[remainder] + encoded \n    \n        return encoded", "category": "Python"}, {"instruction": "Create a Python program that compares two given lists to check if they have any common element.", "input": "list1 = [1,2,3]\nlist2 = [4,5,6]", "output": "def compare_lists(list1, list2):\n    '''This function checks if two lists have any common element'''\n    found_common = False\n    \n    for x in list1:\n        if x in list2:\n            found_common = True\n            break\n    return found_common", "category": "Python"}, {"instruction": "Generate an SQL query that returns the names of all employees who are engineers.", "input": "", "output": "SELECT name\nFROM Employees\nWHERE title = 'Engineer'", "category": "Python"}, {"instruction": "Using MongoDB, create a database to store user information.", "input": "", "output": "// Import the mongodb library \nconst { MongoClient } = require('mongodb'); \n\n// Create global connection variable \nlet db; \n\n// Connecting to the MongoDB instance \nMongoClient.connect('mongodb://localhost:27017', {useNewUrlParser: true, useUnifiedTopology: true}, (err, client) => { \n    if (err) { \n        console.log('Error occurred while connecting to the MongoDB instance'); \n    } else { \n        console.log('Successfully connected to the MongoDB instance'); \n        db = client.db('users_db'); \n    } \n}); \n\n// Create users collection \ndb.createCollection('users', { \n    name: { type: String, required: true }, \n    age: { type: Number }, \n    email: { type: String } \n});", "category": "Python"}, {"instruction": "Implement an autocomplete feature for an input field.", "input": "", "output": "input_field.addEventListener(\"input\", function(e) {\n    // Fetch the input value \n    var inputValue = e.target.value;\n\n    // Check the input value matches one from our list \n    if (list.includes(inputValue)) {\n        // If so, complete it \n        input_field.value = inputValue;\n    }\n});", "category": "Python"}, {"instruction": "Given two strings, find the longest common substring between them.", "input": "s1 = \"Hello, world!\"\ns2 = \"world, goodbye!\"", "output": "def longest_substring(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\ns1 = \"Hello, world!\"\ns2 = \"world, goodbye!\"\nprint(longest_substring(s1, s2))\n\n# Output: world", "category": "Python"}, {"instruction": "Given a sentence, clean up any duplicate words.", "input": "My favorite favorite food is pizza.", "output": "my favorite food is pizza.", "category": "Python"}, {"instruction": "Create a data visualization comparing the population of California and New York.", "input": "", "output": "import matplotlib.pyplot as plt \n  \n# X axis values \nx = ['California', 'New York'] \n# Y axis values \npop = [39.56, 19.45] \n  \n# plotting bars  \nplt.bar(x, pop) \n  \n# Naming the x-axis \nplt.xlabel('State') \n# naming the y-axis \nplt.ylabel('Population') \n  \n# giving a title to the figure \nplt.title('California vs. New York Population') \n  \n# function to show the plot \nplt.show()", "category": "Python"}, {"instruction": "Given an array of integers, find the maximum value.", "input": "arr = [8, 1, 2, -1, 4, 9]", "output": "int max_value = arr.Max(); // 9", "category": "Python"}, {"instruction": "Describe the concept of static variables in Java.", "input": "", "output": "In Java, static variables (also known as class variables) are variables that are declared with the static keyword and are available to access through the class name. These variables are shared between all objects. They are typically used for storing information that does not change between objects.", "category": "Python"}, {"instruction": "Write a schema for a table to store student grades in a school.", "input": "", "output": "CREATE TABLE grades (\n    student_id INT PRIMARY KEY,\n    student_name VARCHAR(255) NOT NULL,\n    grade INT NOT NULL,\n    course VARCHAR(255) NOT NULL\n);", "category": "Python"}, {"instruction": "Using the input, create a function to calculate the average of the set.", "input": "nums = [1, 2, 3, 4, 5]", "output": "def avg_nums(nums):\n  total = 0\n  for num in nums:\n    total += num\n  avg = total / len(nums)\n  return avg\n\nprint(avg_nums([1, 2, 3, 4, 5]))\n\n# Output: 3.0", "category": "Python"}, {"instruction": "What type of data structure is this?", "input": "array = [1, 2, 3, 4, 5]", "output": "This is an array data structure.", "category": "Python"}, {"instruction": "Change this code so that it uses an appropriate data structure.", "input": "x = 0 \ny = 0", "output": "coordinates = (0,0)", "category": "Python"}, {"instruction": "Use this data to predict the weather for the next week.", "input": "Current temperature: 34 degrees\nHumidity: 66%\nPrecipitation chance: 30%", "output": "The weather for the next week is predicted to be warm and mostly dry, with only a slight chance of rain scattered throughout the week. Temperatures will remain around the 34 degree mark, and humidity levels should stay fairly moderate, around 66%.", "category": "Python"}, {"instruction": "Rewrite this code in JavaScript.", "input": "def find_max(nums):\n    maximum = 0\n\n    for num in nums:\n        if num > maximum:\n            maximum = num\n\n    return maximum", "output": "function find_max(nums) {\n    let maximum = 0;\n\n    for (let num of nums) {\n        if (num > maximum) {\n            maximum = num;\n        }\n    }\n\n    return maximum;\n}", "category": "Python"}, {"instruction": "Suggest an improvement to the following C++ for-loop to make it more efficient.", "input": "for(int i = 0; i<arr.length; i++){\n    if(arr[i] == target){\n        return true;\n    }\n}", "output": "for(int i = 0; i<arr.length; i++){\n    if(arr[i] == target){\n        return true;\n    } \n    else if (arr[i] > target){\n        break;\n    }\n}", "category": "Python"}, {"instruction": "Given a string and a number, print the string the number of times specified by the number.", "input": "str = \"Hello\"\nnum = 3", "output": "console.log(str.repeat(num)); // HelloHelloHello", "category": "Python"}, {"instruction": "Use a RegEx function to identify all the words that contain at least 7 characters in a given sentence.", "input": "Sentence: This is a sample sentence to test.", "output": "import re\npattern = r\"\\b\\w{7,}\\b\"\n\nsentence = \"This is a sample sentence to test\"\nmatches = re.findall(pattern, sentence)\n \nprint(matches)", "category": "Python"}, {"instruction": "Use HTML to create a basic web page which displays a welcome message and a button to redirect the user to another page.", "input": "", "output": "<html>\n  <header>\n    <title>Welcome Page</title>\n  </header>\n  <body>\n    <h1>Welcome to My Website</h1>\n    <p>This website offers a variety of resources.</p>\n    <button onclick=\"window.location.href='anotherpage.html'\">Redirect</button>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a SQL query to display the SKU, product name, and price of all products with a price higher than $10.", "input": "", "output": "SELECT SKU, product_name, price \nFROM Products \nWHERE price > 10;", "category": "Python"}, {"instruction": "Create a two-dimensional array in Java with values corresponding to the given output.", "input": "Output: [4, 6, 10]", "output": "int[][] arr = {{4, 6, 10}};", "category": "Python"}, {"instruction": "Edit the given data to ensure data integrity.", "input": "Given data:\nName\tLocation\nJohn   US\nJulia  Germany", "output": "Name\tLocation\nJohn   United States\nJulia  Germany", "category": "Python"}, {"instruction": "Generate input data for a convolutional neural network (CNN).", "input": "The CNN will classify objects in an image.", "output": "Input data should include an image dataset of the objects to be classified. Each image should contain its corresponding label. Image labels can be one-hot encoded. The dataset should be split into separate training, validation and test datasets.", "category": "Python"}, {"instruction": "Generate a Python program to extract the digits of a given number and print the extracted digits in descending order.", "input": "num = 318", "output": "def extractDigits(num):\n    extracted_list = []\n    while num > 0:\n        extracted_list.append(num%10)\n        num //= 10\n    extracted_list.sort(reverse=True)\n    return extracted_list", "category": "Python"}, {"instruction": "Edit the given MySQL query to return all employee details from the \"employees\" table having both salary and designation value \"Manager\".", "input": "SELECT * FROM employees;", "output": "SELECT * FROM employees WHERE salary = 'Manager' AND designation = 'Manager';", "category": "Python"}, {"instruction": "Write a Java program to print a right triangle star pattern with a given base.", "input": "base = 4", "output": "public class RightTrianglePattern \n{ \n  \n    // Function to demonstrate printing pattern \n    public static void printPattern(int baseSize) \n    { \n        int i, j; \n  \n        // outer loop to handle the number of rows \n        for(i=0; i<baseSize; i++) \n        { \n            // inner loop to handle number spaces  \n            // values changing according to requirement \n            for(j=2*(baseSize-i); j>=0; j--) \n            { \n                // printing spaces \n                System.out.print(\" \"); \n            } \n              \n            //  inner loop to handle number of columns \n            //  values changing according to outer loop \n            for(j=0; j<=i; j++) \n            { \n                // printing stars \n                System.out.print(\"*\" + \" \"); \n            } \n            \n            System.out.println(); \n        }  \n    } \n  \n    // Driver Function\n    public static void main(String args[]) \n    { \n        int baseSize = 4;\n        printPattern(baseSize); \n    } \n\n}", "category": "Python"}, {"instruction": "Create a C program to read two numbers and display the minimum of them.", "input": "num1 = 13, num2 = 23", "output": "#include<stdio.h>\n \nint main()\n{\n\tint num1, num2;\n\t\n\tprintf(\"Enter two numbers: \\n\");\n\tscanf(\"%d %d\", &num1, &num2);\n\t\n\tif (num1 < num2)\n\t    printf(\"Minimum is: %d\", num1);\n\telse\n\t    printf(\"Minimum is: %d\", num2);\n\t  \n\treturn 0;\n}", "category": "Python"}, {"instruction": "Create a class in Java named 'Person' that has the following fields: name, age, and gender.", "input": "", "output": "public class Person {\n  private String name;\n  private int age;\n  private String gender;\n\n  public Person(String name, int age, String gender) {\n    this.name = name;\n    this.age = age;\n    this.gender = gender;\n  }\n}", "category": "Python"}, {"instruction": "Generate a MySQL query to calculate the total number of employees from the \"employees\" table.", "input": "", "output": "SELECT COUNT(*) FROM employees;", "category": "Python"}, {"instruction": "Create a C program to read in a 3x3 matrix composed of integers, and print it.", "input": "Input Matrix: [[1, 2, 3], \n               [4, 5, 6], \n               [7, 8, 9]]", "output": "#include<stdio.h>\n \nint main()\n{\n  int a[3][3], i, j;\n \n  printf(\"Enter the elements of the 3x3 matrix : \\n\");\n \n  for (i = 0; i < 3; i++)\n    for (j = 0; j < 3; j++)\n      scanf(\"%d\", &a[i][j]);\n \n  printf(\"The matrix is: \\n\");\n \n  for (i = 0; i < 3; i++) {\n    for (j = 0; j < 3; j++)\n      printf(\"%d \", a[i][j]);\n    printf(\"\\n\");\n  }\n \n  return 0;\n}", "category": "Python"}, {"instruction": "Write a JavaScript program to compare two given strings, and count the number of common characters between them.", "input": "str1 = \u201cApple\u201d, str2 = \u201cBanana\u201d", "output": "function countCommon(str1, str2) {\n    let count = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (str2.includes(str1[i])) {\n            count++;\n        }\n    }\n    return count;\n}", "category": "Python"}, {"instruction": "Edit the given sql query to return all employee details having age greater than 30", "input": "SELECT * FROM employees;", "output": "SELECT * FROM employees WHERE age > 30;", "category": "Python"}, {"instruction": "Use PHP to create a login page which contains an input field to accept the username and a submit button.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<body>\n\n<form action=\"action_login.php\" method=\"post\">\n  Username: <input type=\"text\" name=\"username\">\n  <input type=\"submit\" value=\"Submit\">\n</form> \n\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a Python script to display the number of days between two given dates.", "input": "Date 1: 21 May 2020\nDate 2: 13 June 2020", "output": "import datetime \nstart_date = datetime.date(2020, 5, 21)\nend_date = datetime.date(2020, 6, 13)\ndelta = end_date - start_date\nprint(\"Number of days between two dates:\", delta.days)", "category": "Python"}, {"instruction": "Create a HTML form which includes a dropdown list and a submit button.", "input": "", "output": "<form>\n  <select>\n    <option value=\"volvo\">Volvo</option>\n    <option value=\"saab\">Saab</option>\n    <option value=\"mercedes\">Mercedes</option>\n    <option value=\"audi\">Audi</option>\n  </select>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Write a SQL query to display the name and most recent transaction date of top 5 customers.", "input": "", "output": "SELECT customer_name, MAX(transaction_date)\nFROM Customers\nGROUP BY customer_name\nORDER BY MAX(transaction_date) DESC\nLIMIT 5;", "category": "Python"}, {"instruction": "Edit the following Java program to read 5 integers from the user and display the largest one.", "input": "", "output": "import java.util.*;\n\npublic class LargestOfFive {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int [] numbers = new int [5];\n\n        for(int i=0; i<5; i++) {\n            System.out.print(\"Enter an integer: \");\n            numbers[i] = sc.nextInt();\n        }\n        sc.close();\n\n        int largest = numbers[0];\n\n        for (int i=1; i<5; i++) {\n            if (numbers[i] > largest) \n                largest = numbers[i];\n        } \n\n\n        System.out.println(\"The largest number is \" + largest);\n    }\n\n}", "category": "Python"}, {"instruction": "Describe the concept of text mining.", "input": "", "output": "Text mining is the process of extracting valuable information from textual data, typically through the application of natural language processing and machine learning algorithms. Text mining can identify hidden patterns and relationships in text, including key words, topics, and complex themes, by analyzing sentence structure, co-occurrences, metaphors and other characteristics of natural language.", "category": "Python"}, {"instruction": "Explain the difference between a variable and a constant in C++.", "input": "", "output": "In C++, a variable is a named storage location for data that can be modified during the program execution. On the other hand, a constant is a named storage location for data that can not be modified once it has been declared. Constants are immutable and the value must be set when declared.", "category": "Python"}, {"instruction": "Create an object in JavaScript named 'user' with the following attributes: name, age, and gender.", "input": "", "output": "let user = {\n    name: \"\",\n    age: 0,\n    gender: \"\"\n};", "category": "Python"}, {"instruction": "Write a function to compare two lists of objects and return true if the objects in both lists are the same.", "input": "list1 = [{'id': 1, 'name': 'John'}, {'id': 3, 'name': 'Sara'}]\nlist2 = [{'id': 1, 'name': 'John'}, {'id': 3, 'name': 'Sara'}]", "output": "def compare_lists(list1, list2):\n    return list1==list2", "category": "Python"}, {"instruction": "Make a class that creates a list and has a maximum length.", "input": "", "output": "class LimitedList:\n    def __init__ (self, max_len):\n        self.max_len = max_len\n        self.items = []\n\n    def add(self, item):\n        if len(self.items) < self.max_len:\n            self.items.append(item)\n        else:\n            self.items.pop(0)\n            self.items.append(item)\n\n    def get_list(self):\n        return self.items", "category": "Python"}, {"instruction": "Describe the difference between the 'break' and 'continue' keywords in Python.", "input": "", "output": "The 'break' keyword is used to end a loop and exit the loop, whereas the 'continue' keyword is used to skip the current iteration and continue with the next iteration.", "category": "Python"}, {"instruction": "What is the syntax to convert a string to an integer in Java?", "input": "", "output": "int num = Integer.parseInt(string);", "category": "Python"}, {"instruction": "What is the correct syntax to prompt and save a user's input?", "input": "", "output": "name = input(\"What is your name? \")", "category": "Python"}, {"instruction": "What is the syntax to print out the following string?", "input": "string = \"Hello World!\"", "output": "print(string)", "category": "Python"}, {"instruction": "Write a regex to detect valid email addresses.", "input": "", "output": "^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$", "category": "Python"}, {"instruction": "Create a function that appends the input string to a given array.", "input": "find the string \u201chello world\u201d", "output": "def append(array, string):  \n    array.append(string) \n    return array \n\narray = [] \nstring = \"hello world\"\nappend(array, string) \n \n# Output \narray = ['hello world']", "category": "Python"}, {"instruction": "Explain how to use pointers for passed parameters in C++.", "input": "", "output": "When passing parameters to a function in C++, it is possible to use pointers. This can be done by declaring the argument in the function as a pointer, and passing the address of the variable to be passed as the argument. This is beneficial over passing the parameter by value as passing a pointer is more efficient, as the function will be able to directly access the memory address of the passed parameter and there will be no need to make a copy.", "category": "Python"}, {"instruction": "Describe how LSTMs are used to predict time-series data.", "input": "", "output": "Long Short-Term Memory (LSTM) networks are a type of Recurrent Neural Network (RNN) that enable the model to learn long-term dependencies by remembering information from long periods of time. LSTMs are commonly used to model time-series data such as stock prices, sensor readings, or other sequences of data points that contain predictable patterns. The LSTM predicts the next step in the sequential data using the past data points, and can be used to perform tasks such as forecasting future data points and anomaly detection.", "category": "Python"}, {"instruction": "Develop an HTML page with a navigation bar for a website.", "input": "List of navigation options: Home, About, Services, Contact", "output": "<ul>\n<li><a href=\"index.html\">Home</a></li>\n<li><a href=\"about.html\">About</a></li>\n<li><a href=\"services.html\">Services</a></li>\n<li><a href=\"contact.html\">Contact</a></li>\n</ul>", "category": "Python"}, {"instruction": "Explain how to use functions in Python to perform operations on dictionaries.", "input": "", "output": "Python dictionaries are mappings between keys and values, allowing for efficient retrieval of values using its associated key. Various functions can be used to manipulate the data in the dictionaries, such as the get() function to retrieve the value for a given key, the clear() function to delete all values, the keys() and values() functions to retrieve all keys and values respectively, and the items() function to retrieve a list of key-value pairs.", "category": "Python"}, {"instruction": "Modify the program to take input from the user and create a two-dimensional array in Python.", "input": "", "output": "rows, cols = (int(x) for x in input(\"Enter size of 2D array: \").split())\narr = [[None for x in range(cols)] for y in range(rows)]\nfor i in range(rows):\n    for j in range(cols):\n        arr[i][j] = int(input(\"Enter element: \"))", "category": "Python"}, {"instruction": "Create a matrix in C++ that stores the numbers from 1 to 10.", "input": "", "output": "int matrix[10][10]; \n\nint c = 1; \nfor (int i = 0; i < 10; i++) \n    for (int j = 0; j < 10; j++) \n        matrix[i][j] = c++;", "category": "Python"}, {"instruction": "Create a SQL query to list all customers who are located in the city of London.", "input": "Name of the table: customers", "output": "SELECT * FROM customers WHERE city = 'London';", "category": "Python"}, {"instruction": "Create a list comprehension for a given list that only contains odd numbers.", "input": "[1, 2, 3, 4, 5, 6, 7, 8]", "output": "odd_nums = [num for num in [1, 2, 3, 4, 5, 6, 7, 8] if num % 2 != 0 ]", "category": "Python"}, {"instruction": "Convert a given list to a dictionary with items as keys and their corresponding position in the list as values.", "input": "[\u2018a\u2019, \u2018b\u2019, \u2018c\u2019, \u2018d\u2019]", "output": "def list_to_dict(lst):\n    return {k: v for v, k in enumerate(lst)}", "category": "Python"}, {"instruction": "Calculate the sum of squared differences between every number in a list and the mean of the list.", "input": "[1, 2, 3, 4]", "output": "def sum_squared_diffs(nums):\n    mean = sum(nums) / len(nums)\n    return sum((num - mean)**2 for num in nums)", "category": "Python"}, {"instruction": "Create a class that has 3 methods. The first method should multiply two numbers, the second should add two numbers, and the third should calculate the modulus of two numbers.", "input": "", "output": "class Calculator:\n    def multiply(self, num1, num2):\n        return num1 * num2\n        \n    def add(self, num1, num2):\n        return num1 + num2\n        \n    def modulus(self, num1, num2):\n        return num1 % num2", "category": "Python"}, {"instruction": "Find all the occurrences of the word \"the\" in the following text.", "input": "The quick brown fox jumps over the lazy dog.", "output": "The word \"the\" occurs 2 times in the text.", "category": "Python"}, {"instruction": "Create a class in C++ named 'Animal' that has a method named getDescription().", "input": "", "output": "class Animal {\n    public:\n        // constructor\n        Animal(int age);\n        // member function\n        virtual string getDescription() const;\n};", "category": "Python"}, {"instruction": "Create a for loop in JavaScript to iterate over the following array.", "input": "[\"apple\", \"banana\", \"mango\", \"pear\"];", "output": "for(let i=0; i<arr.length; i++){\n    let item = arr[i];\n    console.log(item);\n}", "category": "Python"}, {"instruction": "Find the most common element in a list of strings.", "input": "mylist = [\"red\", \"blue\", \"red\", \"green\", \"green\", \"red\"]", "output": "def most_common_element(mylist):\n    count = 0\n    common = None\n\n    for i in mylist:\n        curr_count = mylist.count(i)\n        if curr_count > count:\n            common = i\n            count = curr_count\n    return common\n\nprint(most_common_element(mylist))\n\n#Output:\nred", "category": "Python"}, {"instruction": "Generate a correct Python code to turn a list of strings into a list of their lengths.", "input": "mylist = [\"hello\", \"world\", \"fire\", \"feline\"]", "output": "length_list = [len(x) for x in mylist]\n\n#Output:\nlength_list = [5, 5, 4, 6]", "category": "Python"}, {"instruction": "Use the zip function to combine two lists by index.", "input": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]", "output": "list3 = list(zip(list1, list2))\n\n#Output:\nlist3 = [(1, 4), (2, 5), (3, 6)]", "category": "Python"}, {"instruction": "Construct an SQL query to get the sum of all integers in a given table over a condition.", "input": "table: books\ncondition: price > 20", "output": "SELECT SUM(price)\nFROM books\nWHERE price > 20;", "category": "Python"}, {"instruction": "Create a method in Python to generate all the prime numbers between 1 and 100.", "input": "", "output": "def prime_generator(n):\n    primes = []\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\nprint(prime_generator(100))", "category": "Python"}, {"instruction": "Manipulate a given list of strings to capitalize the first letter in each string.", "input": "mylist = [\"this\", \"is\", \"a\", \"list\"]", "output": "def capitalize(mylist):\n  new_list = []\n  \n  for item in mylist:\n    new_list.append(item.capitalize())\n  \n  return new_list\n\nprint(capitalize(mylist))\n\n#Output:\n['This', 'Is', 'A', 'List']", "category": "Python"}, {"instruction": "Create a function to print out words that include the letter \"e\" from a given list of strings.", "input": "mylist = [\"hello\", \"world\", \"fire\", \"feline\"]", "output": "def print_words_with_e(mylist):\n for word in mylist:\n  if 'e' in word:\n   print(word)\n\nprint_words_with_e(mylist)\n\n#Output: \nhello\nfire\nfeline", "category": "Python"}, {"instruction": "How can you find the sum of all numbers in a list?", "input": "", "output": "The sum of all numbers in a list can be found by using the \"sum()\" function.", "category": "Python"}, {"instruction": "Name four different types of sorting algorithms.", "input": "", "output": "The four different types of sorting algorithms are Selection sort, Bubble sort, Insertion sort and Merge sort.", "category": "Python"}, {"instruction": "Suggest a way to extract all the words from an HTML page using Python.", "input": "", "output": "Using the BeautifulSoup library, you can parse the HTML page and extract all the words using the \"get_text()\" method.", "category": "Python"}, {"instruction": "Write a regular expression to find all the email addresses in a given text.", "input": "", "output": "regex = r\"([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+)\"", "category": "Python"}, {"instruction": "Write a JavaScript program to convert an array of objects into a comma-separated values (CSV) string with column headers.", "input": "[\n {name: 'John', age: 28, city: 'New York'}, \n {name: 'Mary', age: 34, city: 'London'}, \n {name: 'Bob', age: 23, city: 'Los Angeles'}\n]", "output": "function arrayToCSV(data) {\n  let csv = '';\n  const headers = Object.keys(data[0]);\n  csv += headers.join(',') + '\\n';\n  data.forEach((item) => {\n    let row = '';\n    Object.values(item).forEach((value) => {\n      row += `\"${value}\",`;\n    });\n    row = row.slice(0, -1);\n    csv += `${row}\\n`;\n  });\n  return csv;\n}", "category": "Python"}, {"instruction": "Write a JavaScript function to filter out all falsy values from an array.", "input": "[NaN, 0, false, \"\", undefined]", "output": "function filterFalsy(arr) {\n  return arr.filter(el => Boolean(el));\n}", "category": "Python"}, {"instruction": "Implement a switch-case statement in Java.", "input": "", "output": "public static void main(String[] args) {\n    int day = 4; \n    \n    switch (day) {\n        case 1:\n            System.out.println(\"Monday\");\n            break;\n        case 2:\n            System.out.println(\"Tuesday\");\n            break;\n        case 3:\n            System.out.println(\"Wednesday\");\n            break;\n        case 4:\n            System.out.println(\"Thursday\");\n            break;\n        case 5:\n            System.out.println(\"Friday\");\n            break;\n        case 6:\n            System.out.println(\"Saturday\");\n            break;\n        case 7:\n            System.out.println(\"Sunday\");\n            break;\n        default:\n            System.out.println(\"Invalid day\");\n            break;\n        }\n    }", "category": "Python"}, {"instruction": "Employ an algorithm to predict the customer churn rate.", "input": "A dataset containing customer data such as demographics, spending patterns, customer lifetime value and customer satisfaction.", "output": "A supervised learning algorithm can be employed to predict customer churn rate. This will involve training the algorithm on the customer dataset, by providing features such as customer age, spending pattern, customer lifetime value and customer satisfaction, as well as a target the algorithm should learn from. The trained model can then be used to predict customer churn rate.", "category": "Python"}, {"instruction": "Implement a sorting algorithm in Python for the given data.", "input": "Data: [4, 2, 3, 8, 1]", "output": "def sort_data(data):\n    for i in range(len(data)):\n        min_index = i\n        for j in range(i+1, len(data)):\n            if data[min_index] > data[j]:\n                min_index = j\n        data[i], data[min_index] = data[min_index], data[i]\n       \n    return data", "category": "Python"}, {"instruction": "Using the given dataset, generate a tree chart visualization.", "input": "Dataset:\nName\tCategory\nJohn   A\nKate   B\nJake   B", "output": "A\n- John\nB\n- Kate\n- Jake", "category": "Python"}, {"instruction": "Write a Java code snippet to calculate the area of a triangle, given three points.", "input": "x1, y1 = 0, 0\nx2, y2 = 3, 4\nx3, y3 = 4, 0", "output": "public class TriangleAreaCalculator {\n\n    // Returns the area of the given triangle, given three points\n    static double area(int x1, int y1, int x2, int y2, int x3, int y3){\n        double side1 = Math.pow(Math.abs(x1-x2),2) + Math.pow(Math.abs(y1-y2),2);\n        double side2 = Math.pow(Math.abs(x2-x3),2) + Math.pow(Math.abs(y2-y3),2);\n        double side3 = Math.pow(Math.abs(x3-x1),2) + Math.pow(Math.abs(y3-y1),2);\n        double sperimeter = (side1 + side2 + side3) / 2;\n        double area = Math.sqrt(sperimeter*(sperimeter-side1)*(sperimeter-side2)*(sperimeter-side3));\n        return area;\n    }\n    \n    public static void main(String[] args) {\n        int x1 = 0;\n        int y1 = 0;\n        int x2 = 3;\n        int y2 = 4;\n        int x3 = 4;\n        int y3 = 0;\n        \n        System.out.println(\"The area of the triangle is: \" + area(x1, y1, x2, y2, x3, y3));\n    }\n}", "category": "Python"}, {"instruction": "Write a JavaScript code for setting a different background color for every odd table row.", "input": "<table>\n<tr>\n  <td>row1 cell1</td>\n  <td>row1 cell2</td>\n</tr>\n<tr>\n  <td>row2 cell1</td>\n  <td>row2 cell2</td>\n</tr>\n<tr>\n  <td>row3 cell1</td>\n  <td>row3 cell2</td>\n</tr>\n</table>", "output": "function setBackgroundColor(){\n    var table = document.getElementsByTagName(\"table\")[0]; \n    for (var i = 0, row; row = table.rows[i]; i++) {\n       (i%2 == 0) ? (row.style.backgroundColor = \"#F2F2F2\") : (row.style.backgroundColor = \"#FFFFFF\");\n    }\n}\nsetBackgroundColor();", "category": "Python"}, {"instruction": "Construct a list in Python that contains the names of the months in order, starting with January.", "input": "", "output": "months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]", "category": "Python"}, {"instruction": "Write a code to generate an array of 10 random integers in the range 0-99.", "input": "", "output": "import random\n \ndef random_int_array(num):\n    array = []\n    for i in range(num):\n        num = random.randint(0, 99)\n        array.append(num)\n    return array\n\nprint(random_int_array(10))", "category": "Python"}, {"instruction": "Create a function in Python that will print out a random word from a given list.", "input": "words_list = ['cat', 'dog', 'ball', 'toy']", "output": "import random\n\ndef random_word(words_list):\n    word = random.choice(words_list)\n    print(word)\n\nrandom_word(words_list)", "category": "Python"}, {"instruction": "Create a script in Java to find the most repeated element in an array.", "input": "Array in string form: \u201ca,b,c,d,a,a,b,d,d\u201d", "output": "public class MaxOccurring \n{ \n    static final int ASCII_SIZE = 256; \n    static char getMaxOccuringChar(String str) \n    { \n        int count[] = new int[ASCII_SIZE]; \n   \n        int len = str.length(); \n        for (int i=0; i<len; i++) \n            count[str.charAt(i)]++; \n   \n        int max = -1;  // Initialize max count \n        char result = ' ';   // Initialize result \n   \n        // Traversing through the string and maintaining \n        // the count of each character \n        for (int i = 0; i < len; i++) { \n            if (max < count[str.charAt(i)]) { \n                max = count[str.charAt(i)]; \n                result = str.charAt(i); \n            } \n        } \n   \n        return result; \n    } \n  \n    // Driver Method \n    public static void main(String[] args) \n    { \n        String str = \"a,b,c,d,a,a,b,d,d\"; \n        System.out.println(\"Max occurring character is \" + \n                            getMaxOccuringChar(str)); \n    } \n}", "category": "Python"}, {"instruction": "Develop a function in JavaScript to get the maximum and minimum values from an array.", "input": "Array elements: 10, 5, 8, 12, 9", "output": "function getMaxMin(arr) {\n    let max = -Infinity;\n    let min = Infinity;\n \n    arr.forEach(function (item) {\n        if (item > max) {\n            max = item;\n        }\n        if (item < min) {\n            min = item;\n        }\n    });\n    return {\n        \"max\": max,\n        \"min\": min\n    };\n} \n \nlet arr = [10, 5, 8, 12, 9];\nlet result = getMaxMin(arr);\n \nconsole.log(result);", "category": "Python"}, {"instruction": "Develop a function in C to find the power of a given base to an exponent.", "input": "Base: 2\nExponent: 7", "output": "#include <stdio.h> \n\nint power(int base, int exponent) \n{ \n\tint result = 1; \n\twhile (exponent != 0) { \n\t\tresult = result * base; \n\t\t--exponent; \n\t} \n\treturn result; \n} \n\nint main() \n{ \n\tprintf(\"This is 2 to the power of 7: %d\", power(2, 7)); \n\treturn 0; \n}", "category": "Python"}, {"instruction": "Create a program in Python to generate a random number in the range from 0 to 10.", "input": "", "output": "import random \n\nprint(random.randint(0, 10))", "category": "Python"}, {"instruction": "Develop a function in Python to convert a temperature in Celsius to Fahrenheit.", "input": "Temperature in Celsius: 30", "output": "def celsius_to_fahrenheit(celsius):\n    return (celsius * 1.8) + 32\n\nprint(celsius_to_fahrenheit(30))", "category": "Python"}, {"instruction": "Develop a script in Java to generate Fibonacci numbers to nth place.", "input": "", "output": "public class Fibonacci {\n \n    public static void main(String[] args) {\n       \n        int n = 10, t1 = 0, t2 = 1;\n        System.out.print(\"First \" + n + \" terms: \");\n \n        for (int i = 1; i <= n; ++i)\n        {\n            System.out.print(t1 + \" \");\n \n            int sum = t1 + t2;\n            t1 = t2;\n            t2 = sum;\n        }\n    }\n}", "category": "Python"}, {"instruction": "Generate all possible permutations of the characters in a given string", "input": "", "output": "def permutations(string):\n    \"\"\"\n    Function to generate all possible permutations of a given string\n    \"\"\"\n    if len(string) == 0:\n        return ['']\n    prev_list = permutations(string[1:len(string)])\n    next_list = []\n    for i in range(0,len(prev_list)):\n        for j in range(0,len(string)):\n            new_string = prev_list[i][0:j]+string[0]+prev_list[i][j:len(string)-1]\n            if new_string not in next_list:\n                next_list.append(new_string)\n    return next_list\n\nif __name__ == '__main__':\n    string = 'abcd'\n    print(permutations(string))\n    # should print ['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'dabc', 'dbac', 'bdac', 'bdca', 'dacb', 'dcab', 'dcba', 'adbc', 'dbca', 'dcab', 'dcba']", "category": "Python"}, {"instruction": "Create a web page that displays a greeting using HTML", "input": "", "output": "<!doctype html>\n<html>\n  <head>\n    <title>Greeting</title>\n  </head>\n  <body>\n    <h1>Hello World!</h1>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Merge two dictionaries into another dictionary", "input": "dict1 = {'a':1, 'b':2}\ndict2 = {'c':3, 'd':4}", "output": "def merge(dict1, dict2):\n    \"\"\"\n    Function to merge two dictionaries\n    \"\"\"\n    return {**dict1, **dict2}\n\nif __name__ == '__main__':\n    dict1 = {'a':1, 'b':2}\n    dict2 = {'c':3, 'd':4}\n    print(merge(dict1, dict2))\n    # should print {'a': 1, 'b': 2, 'c': 3, 'd': 4}", "category": "Python"}, {"instruction": "Build a neural network using Python", "input": "import numpy as np\n\n# Sample data\nX = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\ny = np.array([[0, 1, 1, 0]]).T", "output": "import keras\n\n# Create a neural network\nmodel = keras.Sequential([\n    keras.layers.Dense(2, activation='sigmoid'),\n    keras.layers.Dense(1, activation='sigmoid')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\n# Train the model\nmodel.fit(X, y, epochs=1000)", "category": "Python"}, {"instruction": "Create a JavaScript expression that will iterate over an array of numbers and print out the square root of each number.", "input": "num_array = [1, 4, 9, 16]", "output": "num_array.forEach(num => {\n    console.log(Math.sqrt(num));\n});", "category": "Python"}, {"instruction": "Define a function in Java that will take any string as argument and returns it in uppercase.", "input": "", "output": "public static String toUpperCase(String s) {\n    return s.toUpperCase();\n}", "category": "Python"}, {"instruction": "Write code to print out the sum of two numbers in Ruby.", "input": "num1 = 5\nnum2 = 10", "output": "def sum_of_two_numbers(num1, num2)\n  puts num1 + num2\nend\n\nsum_of_two_numbers(5, 10)", "category": "Python"}, {"instruction": "Using a JavaScript array of strings, write code to remove all strings that start with \"a\".", "input": "arr = [\"apple\", \"banana\", \"apricot\", \"guava\"]", "output": "let newArr = arr.filter(word => !word.startsWith('a'));\nconsole.log(newArr); // Output: [\"banana\", \"guava\"]", "category": "Python"}, {"instruction": "Create a Python script that shows the frequency of words in a given text.", "input": "text = \"Hello, this is a sentence.\"", "output": "def calc_word_freq(text):\n    '''This function calculates word frequency in a given text'''\n    word_freq = {}\n    for word in text.split():\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n\n    for word,freq in word_freq.items():\n        print(f'{word} - {freq}')", "category": "Python"}, {"instruction": "Create a wrapper class for a given API that takes string input and returns JSON output.", "input": "url = \"http://example.com/api\"", "output": "class APIWrapper:\n    '''This class wraps a given API and provides a convenient way to use it'''\n    def __init__(self,url):\n        self.url = url\n\n    def call_api(self, input):\n        params = {\"input\": input}\n        response = requests.get(self.url, params=params).json()\n        return response", "category": "Python"}, {"instruction": "Convert a given string to the CamelCase format.", "input": "string = \"this is a string\"", "output": "def to_camel_case(string):\n    '''This function converts a given string to the CamelCase format'''\n    res = \"\"\n    for word in string.split():\n        res += word[0].upper() + word[1:]\n    return res", "category": "Python"}, {"instruction": "Implement a function that calculates the sum of n numbers.", "input": "numbers = [1,2,3,4]", "output": "def sum_n_numbers(numbers):\n    '''This function returns the sum of n numbers'''\n    total = 0\n    for n in numbers:\n        total += n\n    return total", "category": "Python"}, {"instruction": "Write a C++ program to read a single character from stdin.", "input": "", "output": "#include <iostream>\n\nint main() \n{\n    char c;\n    std::cin >> c;\n    std::cout << c;\n    return 0;\n}", "category": "Python"}, {"instruction": "Edit the statements given below so that they can be compiled and run without any errors.", "input": "public class Test {\n    public static void main(String[] args) {\n    System.out.println(\"Hello World\");\n    int x;\n    System.out.println(x);\n    }\n}", "output": "public class Test {\n    public static void main(String[] args) {\n    System.out.println(\"Hello World\");\n    int x = 0;\n    System.out.println(x);\n    }\n}", "category": "Python"}, {"instruction": "You need to write a Java program to check whether a given string is a palindrome or not.", "input": "", "output": "public class Palindrome { \n  \n    public static void main(String[] args) {  \n        String a = \"Madam\";  \n        String b = \"\"; \n        int n = a.length(); \n  \n        for(int i = n - 1; i >= 0; i--) { \n            b = b + a.charAt(i); \n        }  \n        if(a.equalsIgnoreCase(b)) { \n            System.out.println(\"The string is a palindrome.\"); \n        } \n        else {\n            System.out.println(\"The string is not a palindrome.\"); \n        }\n    } \n}", "category": "Python"}, {"instruction": "Calculate the area of a triangle given the coordinates of its three vertices.", "input": "x1 = 1\ny1 = 5\nx2 = 4\ny2 = 3\nx3 = 7\ny3 = 2", "output": "def calculate_triangle_area(x1, y1, x2, y2, x3, y3):\n    \"\"\"\n    Function to calculate the area of a triangle given the coordinates of its 3 vertices\n    \"\"\"\n    a = ((x2 - x1)**2 + (y2 - y1)**2)**0.5\n    b = ((x3 - x2)**2 + (y3 - y2)**2)**0.5\n    c = ((x1 - x3)**2 + (y1 - y3)**2)**0.5\n    s = (a + b + c) / 2\n    return ((s*(s-a)*(s-b)*(s-c))**0.5)\n    \nif __name__ == \"__main__\":\n    x1 = 1\n    y1 = 5\n    x2 = 4\n    y2 = 3\n    x3 = 7\n    y3 = 2\n    print(calculate_triangle_area(x1, y1, x2, y2, x3, y3))\n    # should print 4.24", "category": "Python"}, {"instruction": "Read the given JSON data and return a list of all the keys.", "input": "{\n  \"name\": \"John\",\n  \"age\": 21,\n  \"isActive\": true\n}", "output": "def get_keys(data): \n  keys = []\n  for key in data:\n    keys.append(key)\n  return keys", "category": "Python"}, {"instruction": "You need to write a CSS rule to change the background color of all divs in a web page.", "input": "", "output": "div {\n  background-color: blue;\n}", "category": "Python"}, {"instruction": "You need to edit the given code for sorting. Make the array sort in descending order.", "input": "arr = [3, 5, 8, 9, 10]", "output": "def quick_sort(arr): \n    if len(arr) <= 1:\n        return arr\n  \n    pivot = arr[-1]\n    lesser_elements = [i for i in arr[:-1] if i <= pivot]\n    greater_elements = [i for i in arr[:-1] if i > pivot]\n    return quick_sort(greater_elements) + [pivot] + quick_sort(lesser_elements)", "category": "Python"}, {"instruction": "Create a function in Python to generate all possible strings of length k from given lowercase characters.", "input": "set = {'a', 'b', 'c'}\nk = 3", "output": "def generate_strings(set, k): \n\tstrings = [] \n\tn = len(set) \n\t\n\tdef generate_strings_recur(sub, count): \n\t\t\n\t\t# Base cases \n\t\tif count == 0 : \n\t\t\tstrings.append(sub) \n\t\t\treturn\n\t\t\n\t\tfor i in range(n): \n\t\t\t\n\t\t\t# Next character of string to be \n\t\t\t# formed \n\t\t\tnew_sub = sub + set[i] \n\t\t\t\n\t\t\t# Recursion call \n\t\t\tgenerate_strings_recur(new_sub, \n\t\t\t\t\t\t\t\tcount-1) \n\t\n\tcount = k \n\tsub = \"\" \n\t\n\t# Call to generate all strings of length k \n\tgenerate_strings_recur(sub, count) \n\t\n\treturn strings", "category": "Python"}, {"instruction": "Create a C program to check if the given number is prime or not.", "input": "", "output": "#include <stdio.h>\n\nint isPrime(int n) \n{ \n  int flag = 1;\n  int i;\n\n  for (i = 2; i <= n / 2; ++i) { \n    if (n % i == 0) { \n      flag = 0; \n      break; \n    } \n  } \n\n  if (flag == 1) \n    return 1; \n  else\n    return 0; \n}\n\nint main() \n{ \n  int n;\n\n  printf(\"Enter a number: \");\n  scanf(\"%d\", &n);\n\n  if (isPrime(n)) \n    printf(\"%d is a prime number.\", n);\n  else\n    printf(\"%d is not a prime number.\", n);\n  \n  return 0; \n}", "category": "Python"}, {"instruction": "You need to parse a given HTML string and obtain the list of tags in the string.", "input": "html_string = \"<div> <h1>Hello World!</h1> <p>This is a HTML string.</p> </div>\"", "output": "tag_list = []\n\nfor tag in html_string.split():\n  if tag[0] == '<' and tag[-1] == '>':\n    tag_list.append(tag[1:-1])\n    \nprint(tag_list)", "category": "Python"}, {"instruction": "Write a JavaScript program to check whether two or more arrays have the same elements.", "input": "array1 = [1, 2, 3, 4];\narray2 = [3, 4, 5, 6];", "output": "function sameElementCheck(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n\n    let flag = true;\n    arr1.forEach((elem) => {\n        if (!arr2.includes(elem)) {\n            flag = false;\n        }\n    })\n\n    return flag;\n}", "category": "Python"}, {"instruction": "You need to find the area of a given circle with the formula: Area = pi * r * r", "input": "r = 5", "output": "const PI = 3.14;\nconst r = 5;\n\nconst area = PI * r * r;\n\nconsole.log(area);", "category": "Python"}, {"instruction": "Create a function that takes two lists and returns a dictionary with the elements of each list as keys.", "input": "list1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]", "output": "def create_dictionary(list1, list2):\n    \"\"\"\n    Function to create a dictionary with two lists\n    \"\"\"\n    return {list1[i]: list2[i] for i in range(len(list1))}\n    \nif __name__ == '__main__':\n    list1 = ['a', 'b', 'c']\n    list2 = [1, 2, 3]\n    print(create_dictionary(list1, list2))\n    # should print {'a': 1, 'b': 2, 'c': 3}", "category": "Python"}, {"instruction": "Make a 3D scatter chart with a dataset containing 5 rows and 3 columns.", "input": "import pandas as pd\n\n# Sample dataset\ndata = {'X': [1,2,3,4,5], 'Y': [6,7,8,9,10], 'Z': [11,12,13,14,15]}\ndf = pd.DataFrame(data)", "output": "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n\n# Create 3D scatter plot\nfig = plt.figure()\nax = Axes3D(fig)\nax.scatter(df['X'], df['Y'], df['Z'])\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('Z')\nplt.show()", "category": "Python"}, {"instruction": "Create a web application that allows users to search for movies and save their favorites.", "input": "", "output": "\"\"\"\nCreate a web application that allows users to search for movies and save their favorites\n\"\"\"\n\n# Import libraries\nimport flask\nimport sqlalchemy\n\n# Create Flask application\napp = flask.Flask(__name__)\n\n# Connect to database\nengine = sqlalchemy.create_engine('sqlite:///movies.db')\n\n# Define routes\n@app.route(\"/\")\ndef index():\n    # Return homepage\n    return flask.render_template(\"index.html\")\n\n@app.route(\"/search\")\ndef search():\n    # Get search terms from query string\n    terms = flask.request.args.get(\"terms\")\n    \n    # Query database\n    conn = engine.connect()\n    query = f\"SELECT * FROM movies WHERE title LIKE '%{terms}%'\"\n    results = conn.execute(query).fetchall()\n    conn.close()\n    \n    # Render results\n    return flask.render_template(\"search.html\", results=results)\n    \n@app.route(\"/save\")\ndef save():\n    # Get the movie id from query string\n    movie_id = flask.request.args.get(\"id\")\n    \n    # Save the movie to the database\n    conn = engine.connect()\n    query = f\"INSERT INTO favorites (movie_id) VALUES ({movie_id})\"\n    conn.execute(query)\n    conn.close()\n    \n    # Redirect to homepage\n    return flask.redirect(\"/\")\n\nif __name__ == '__main__':\n    app.run(debug=True)", "category": "Python"}, {"instruction": "What is the maximum value a 32-bit signed integer can represent?", "input": "", "output": "2147483647", "category": "Python"}, {"instruction": "Create a regular expression to match numbers between 10 and 100", "input": "", "output": "[1-9]\\d{1,2}", "category": "Python"}, {"instruction": "Write a function which will take an array of integers and returns an array with no repeated elements.", "input": "my_array = [1, 2, 3, 2, 4, 6, 1, 2]", "output": "def remove_duplicates(my_array):\n    '''This function takes an array of integers and returns an array with no repeated elements.'''\n    return list(set(my_array))", "category": "Python"}, {"instruction": "Create a function for splitting a string into an array of characters.", "input": "", "output": "def split_string_to_chars(string):\n    '''This function takes a string and splits it into an array of characters.'''\n    return list(string)", "category": "Python"}, {"instruction": "Create a function that takes in a positive integer up to 1000 and prints out its prime factorization.", "input": "num = 17", "output": "def prime_factorization(num):\n    '''This function takes in a positive integer and prints out its prime factorization.'''\n    factors = []\n    dividend = num\n    divisor = 2\n    while divisor <= dividend:\n        if dividend % divisor == 0:\n            factors.append(divisor)\n            dividend //= divisor\n        else:\n            divisor += 1\n    return factors", "category": "Python"}, {"instruction": "Write a function which will take an array as an argument and return an object with the keys being the elements of the array and the values being their counts.", "input": "my_array = [1, 2, 2, 3]", "output": "def count_elements(my_array):\n    '''This function takes an array as an argument and returns an object with the \n    keys being the elements of the array and the values being their counts.'''\n    counts = {}\n    for element in my_array:\n        if element in counts:\n            counts[element] += 1\n        else:\n            counts[element] = 1\n    return counts", "category": "Python"}, {"instruction": "Calculate the value of the following expression: 2 to the power of 5.", "input": "", "output": "def calculate_expression(expression):\n    '''This function calculates a given expression.'''\n    return eval(expression)", "category": "Python"}, {"instruction": "Compile and execute the following C++ program", "input": "#include <iostream> \nusing namespace std; \n  \nint main() \n{ \n    cout << \"Hello world\" << endl; \n    return 0; \n}", "output": "Hello world", "category": "Python"}, {"instruction": "Convert the following string of HTML into a DOM tree.", "input": "html_string = \"<p>Hello <b>World</b></p>\"", "output": "def convert_html_to_dom_tree(html_string):\n    '''This function converts a string of HTML into a DOM tree.'''\n    from bs4 import BeautifulSoup\n    soup = BeautifulSoup(html_string, 'html.parser')\n    return soup.prettify()", "category": "Python"}, {"instruction": "Create a function which will take in a string and returns a string in reverse order.", "input": "", "output": "def reverse_string(s):\n    '''This function takes in a string and returns a string in reverse order.'''\n    return s[::-1]", "category": "Python"}, {"instruction": "Create a function that takes in a number and returns all the prime factors.", "input": "num = 30", "output": "def prime_factorize(num):\n    '''This function takes in a number and returns all the prime factors.'''\n    primes = []\n    i = 2\n    while i * i <= num:\n        while num % i == 0:\n            primes.append(i)\n            num //= i\n        i += 1\n    if num > 1:\n        primes.append(num)\n    return primes", "category": "Python"}, {"instruction": "Create a function that takes in two variables and checks if they have the same type.", "input": "", "output": "def type_checker(x, y):\n    '''This function takes in two variables and checks if they have the same type.'''\n    return type(x) == type(y)", "category": "Python"}, {"instruction": "Create a class named Person.", "input": "", "output": "class Person:\n    '''This class represents a person with a name and age.'''\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "category": "Python"}, {"instruction": "Sort an array of integers in ascending order without using the built-in sort() function.", "input": "my_array = [1, 6, 9, 5, 8, 10, 4, 2, 7, 3]", "output": "def sort_ascending(my_array):\n    '''This function sorts an array of integers in ascending order without using the built-in sort() function.'''\n    n = len(my_array)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if my_array[j] > my_array[j+1]:\n                my_array[j], my_array[j+1] = my_array[j+1], my_array[j]\n    return my_array", "category": "Python"}, {"instruction": "Given the following Python code, generate a function that will print the first 5 elements of a list.", "input": "my_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "def print_first_five(my_list):\n    \"\"\"This function prints the first five elements of a list.\"\"\"\n    print(my_list[:5])", "category": "Python"}, {"instruction": "Using Django, develop a web application to manage a blog.", "input": "", "output": "Create a Django project and develop an application with models to manage a blog. Write views to create and manage blog posts, categories and tags, and customize the URL routing. Create templates to display the blog posts, categories and tags. Implement authentication to protect access to the blog posts.", "category": "Python"}, {"instruction": "Analyze a provided string of characters and return the number of occurrences of each character.", "input": "input_string = \"HelloWorld\"", "output": "def analyze_string(input_string):\n    '''This function analyzes a provided string of characters and \n    returns the number of occurrences of each character.'''\n    dict_count = {}\n    for char in input_string:\n        if char in dict_count:\n            dict_count[char] += 1\n        else:\n            dict_count[char] = 1\n    return dict_count", "category": "Python"}, {"instruction": "Create a function in Ruby that determines if a number is Sublime.", "input": "$num = 21", "output": "def is_sublime($num) \n    return $num % 3 == 0 && $num % 7 == 0\nend", "category": "Python"}, {"instruction": "Normalize the following URL", "input": "http://www.facebook.com/profile/pages?", "output": "http://www.facebook.com/profile/pages", "category": "Python"}, {"instruction": "Convert the following string \"Hello World!\" to an integer.", "input": "\"Hello World!\"", "output": "101946", "category": "Python"}, {"instruction": "Categorize the following text into its corresponding sentiment", "input": "The newest addition to the concert line-up is incredibly disappointing.", "output": "Negative sentiment.", "category": "Python"}, {"instruction": "Write a function that takes two strings and returns a boolean value indicating whether the two strings are anagrams or not.", "input": "", "output": "def anagram(s1, s2):\n    \n    # Strip whitespaces and convert to lowercase\n    s1 = s1.replace(' ', '').lower()\n    s2 = s2.replace(' ', '').lower()\n    \n    # Return boolean indicating anagram status\n    return sorted(s1) == sorted(s2)\n\nif __name__ == '__main__':\n    print(anagram('tea', 'eat')) \n    # should print True", "category": "Python"}, {"instruction": "Design a Python class to represent a user with fields name and age.", "input": "", "output": "class User:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age", "category": "Python"}, {"instruction": "Create a JavaScript function to log a friendly message when the page is loaded.", "input": "", "output": "window.onload = function () {\n    console.log('Welcome to my website!');\n}", "category": "Python"}, {"instruction": "Write a CSS code snippet to style all buttons in red.", "input": "", "output": "button {\n    background-color: red; \n}", "category": "Python"}, {"instruction": "Design a Python class to represent a 3 x 3 chess board.", "input": "", "output": "class ChessBoard:\n    def __init__(self):\n        self.board = [\n            [\"a1\",\"b1\",\"c1\"],\n            [\"a2\",\"b2\",\"c2\"],\n            [\"a3\",\"b3\",\"c3\"]\n        ]\n\n    def __str__(self):\n        board_string = \"\"\n        for row in self.board:\n            for col in row:\n                board_string += col + \" \"\n            board_string += \"\\n\"\n        return board_string", "category": "Python"}, {"instruction": "Create a Python class to represent an employee record with fields name and salary.", "input": "", "output": "class Employee:\n    def __init__(self, name, salary):\n        self.name = name\n        self.salary = salary\n    \n    def get_name(self):\n        return self.name\n    \n    def get_salary(self):\n        return self.salary", "category": "Python"}, {"instruction": "Decompile the following HTML code", "input": "<h1>Hello World</h1>", "output": "<html>\n    <head>\n    </head>\n    <body>\n        <h1>Hello World</h1>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Generate a two-dimensional array of random integers in JavaScript.", "input": "", "output": "function generateRandomArray(rows, cols) {\n    let array = []; \n    for (let i=0; i < rows; i++) {\n        array.push(Array.from({length: cols}, () => Math.floor(Math.random() * 10)));\n    }\n    return array; \n}", "category": "Python"}, {"instruction": "Design a Python class to represent a rectangle with a length and width attribute.", "input": "", "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    \n    def get_area(self):\n        return self.length*self.width", "category": "Python"}, {"instruction": "Write a JS function to make an API request.", "input": "const URL = \"https://example.com/api\"", "output": "function makeRequest(url) {\n    return fetch(url).then(response => response.json());\n}\n\nmakeRequest(URL);", "category": "Python"}, {"instruction": "Create a Python class to represent a 3 x 3 matrix with variable values.", "input": "", "output": "class Matrix:\n    def __init__(self, a00=0, a01=0, a02=0, a10=0, a11=0, a12=0, a20=0, a21=0, a22=0):\n        self.matrix = [[a00, a01, a02],\n                        [a10, a11, a12],\n                        [a20, a21, a22]]\n    \n    def __str__(self):\n        return str(self.matrix)", "category": "Python"}, {"instruction": "Write an array filter to remove any element with the value 0.", "input": "[0,1,2,3,4,0,6]", "output": "const result = arr.filter(item => item !== 0); // result will be [1,2,3,4,6]", "category": "Python"}, {"instruction": "Create a server in Node.js to respond with status code 200 when a client hits the '/' endpoint.", "input": "", "output": "const http = require(\"http\");\n\nconst server = http.createServer((req, res) => {\n  if (req.url === \"/\") {\n    res.writeHead(200, { \"Content-Type\": \"text/html\" });\n    res.end(\"hello world!\");\n  }\n});\n\nserver.listen(8080);", "category": "Python"}, {"instruction": "Create a function to calculate the sum of all the even numbers between 20 and 100.", "input": "", "output": "const calculateSum = (start, end) => {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    if (i % 2 === 0) sum += i\n  }\n  return sum;\n}\n\ncalculateSum(20, 100); // 1890", "category": "Python"}, {"instruction": "Given the following code snippet, rewrite it using for loop.", "input": "let counter = 0\nwhile (counter < 10) {\n  console.log(counter);\n  counter++;\n}", "output": "for(let counter = 0; counter < 10; counter++) {\n  console.log(counter);\n}", "category": "Python"}, {"instruction": "Create a JavaScript function to take a string of numbers and convert it to an array of integers.", "input": "const inputString = '1 2 3 4 5'", "output": "function stringToArray(str) {\n    return str.split(' ').map(item => parseInt(item)); \n}\n\nstringToArray(inputString);", "category": "Python"}, {"instruction": "How would you write a code to calculate the area of a circle given a radius r?", "input": "", "output": "double area_circle(double r) {\n  double area = 3.14*r*r;\n  return area;\n}", "category": "Python"}, {"instruction": "Implement an algorithm to split a string of numbers (integers or floats) in to two parts with an even sum", "input": "inputString: '1,2,3,4,5,6'", "output": "public int[] splitEvenSum(string inputString) {\n    List<int> nums = new List<int>();\n    \n    // Split inputString at , and add elements to the list\n    foreach (var num in inputString.Split(',')) {\n        nums.Add(int.Parse(num));\n    }\n    \n    // Initialize variables\n    int targetSum = 0;\n    int sum1 = 0;\n    int sum2 = 0;\n    List<int> list1 = new List<int>();\n    List<int> list2 = new List<int>();\n    \n    // Loop through and calculate sums\n    foreach (var num in nums) {\n        targetSum += num;\n    }\n    targetSum /= 2;\n    \n    // Backtrack and find the two subarrays with the same sum\n    foreach (var num in nums) {\n        if (sum1 + num <= targetSum) {\n            sum1 += num;\n            list1.Add(num);\n        } else {\n            sum2 += num;\n            list2.Add(num);\n        }\n    }\n    \n    // Return results\n    int[] result = new int[2] {sum1, sum2};\n    return result;\n}", "category": "Python"}, {"instruction": "Create a CSS class to set the font size of the <h1> element to double the size of the <body> element.", "input": "", "output": "h1 {\n    font-size: 200%;\n}", "category": "Python"}, {"instruction": "Write a CSS code to set a div's height to 500px", "input": "", "output": "div {\n    height: 500px;\n}", "category": "Python"}, {"instruction": "Suggest an algorithm to determine whether a string is a palindrome", "input": "", "output": "A palindrome is a word, phrase, or sequence that reads the same backward as forward. To determine whether a string is a palindrome, one algorithm could be to compare the reversed characters in the string with the original characters. We can start at the ends of the string, and check if the characters at each end of the string are equal. If they are, we move to the next pair in the middle, and if they are not equal, then the string is not a palindrome.", "category": "Python"}, {"instruction": "Write a SQL query to delete data from a table named 'customers'.", "input": "", "output": "DELETE FROM customers;", "category": "Python"}, {"instruction": "How would you break down a large problem into smaller pieces?", "input": "", "output": "Breaking down a large problem into smaller pieces is a fundamental step in problem-solving. It can be done by first understanding the overall problem and its requirements. Then, the problem should be divided into smaller, more manageable chunks, which can then be solved independently. This process should be repeated until all the pieces of the problem have been divided into isolated tasks. Finally, the isolated pieces can be solved using different strategies, with the ultimate goal of connecting all these smaller solutions together to form the final solution.", "category": "Python"}, {"instruction": "Generate a cURL command to perform a GET request with given parameters", "input": "url: https://example.client.com/target,\narguments: foo='bar', baz='qux'", "output": "curl -X GET \"https://example.client.com/target?foo=bar&baz=qux\"", "category": "Python"}, {"instruction": "Describe a greedy algorithm", "input": "", "output": "A greedy algorithm is an approach to solving a problem that involves making decisions based on the best immediate payoff, without considering the overall cost. It follows the principle of 'greedy', which involves making a decision with the largest immediate benefit and disregarding the overall cost of the solution. Greedy algorithms are used to solve optimization problems, such as finding the optimal path in a given graph, with the goal of maximizing the benefit of the overall solution.", "category": "Python"}, {"instruction": "In a React.js application, how would you create a state object named \"userDetail\"", "input": "", "output": "To create the state object \"userDetail\" in a React.js application, we would first name the class in which we intend to store the state object, and then use the useState hook to initialize the state object in the class. Inside the useState hook, the state object would be declared and set to have an empty object as its initial state.\n\nExample:\n\nclass UserDetailState {\n  const [userDetail, setUserDetail] = useState({});\n}", "category": "Python"}, {"instruction": "How would you debug the following code?", "input": "def findNumberSum(numbers):\n    total = 0\n    for n in numbers:\n        total += n\n    return total", "output": "To debug the code, you could start by adding print statements at different places in the code to find out the output at each step. For instance, you could add print statements to print out the value of the \"total\" variable at the beginning, during and after the for loop, or to see the contents of the list \"numbers\". Then you can check what value is expected and what value is actually produced for every step, to identify the issue.", "category": "Python"}, {"instruction": "Create a class called 'Animal' that stores the attributes age and type.", "input": "", "output": "class Animal:\n    def __init__(self, age, type):\n        self.age = age\n        self.type = type", "category": "Python"}, {"instruction": "Write a regular expression to find the first 5-digit number in the given text.", "input": "The customer's ID is 12345 and his phone number is 555-555-0123", "output": "import re\n\ntext = \"The customer's ID is 12345 and his phone number is 555-555-0123\"\n\npattern = r'\\d{5}'\n\nresult = re.search(pattern, text)\n\nprint(result.group())", "category": "Python"}, {"instruction": "Create a new list 'squared' that contains the squares of all the elements in the list 'nums'.", "input": "nums = [1, 2, 3, 4]", "output": "squared = [num**2 for num in nums]", "category": "Python"}, {"instruction": "Create a variable called 'monday' and assign it a value of True.", "input": "", "output": "monday = True", "category": "Python"}, {"instruction": "Write a code to print the first 10 odd numbers.", "input": "", "output": "for num in range(1, 21, 2):\n    print(num)", "category": "Python"}, {"instruction": "Create a for loop that iterates from 10 to 20 by 4's.", "input": "", "output": "for i in range(10, 21, 4):\n    print(i)", "category": "Python"}, {"instruction": "Create a datastructure that stores customer information such as customer name, address and phone number.", "input": "John Smith, 123 Main Street, 555-555-0110", "output": "customer_info = {\n  \"name\": \"John Smith\",\n  \"address\": \"123 Main Street\",\n  \"phone\": \"555-555-0110\"\n}", "category": "Python"}, {"instruction": "What are the benefits of using multithreading in an application?", "input": "", "output": "The main benefits of using multithreading in an application are improved performance, increased responsiveness and better utilization of resources such as CPU and memory. When using multithreaded applications, the application can perform multiple tasks concurrently and improve data throughput. Additionally, it can improve scalability, provide complex task management, and manage a large number of resources without significantly slowing down the program.", "category": "Python"}, {"instruction": "In a React.js application, how would you set the state object 'userData' to an empty object?", "input": "", "output": "To set the state object \"userData\" to an empty object in a React.js application, we would first name the class in which we intend to store the state object, and then use the useState hook to initialize the state object. Inside the useState hook, the state object would be declared and set to have an empty object as its initial state.\n\nExample:\n\nclass UserDataState {\n  const [userData, setUserData] = useState({});\n}", "category": "Python"}, {"instruction": "How would you design a system to store and access the stored data when a user makes a request?", "input": "", "output": "To design a system to store and access the stored data when a user makes a request, we could use a client-server model, where the server provides the user with the requested data. The server would use a database to store the data, and when a user makes a request, the server would retrieve the requested data from the database and send it back to the user.", "category": "Python"}, {"instruction": "Given a string \"Hello, World\", replace all vowels with '*'", "input": "Hello, World", "output": "H*ll*, W*rld", "category": "Python"}, {"instruction": "Construct an HTML table with two columns, \"First Name\" and \"Last Name\", and 5 rows of example data.", "input": "", "output": "<table>\n  <tr>\n    <th>First Name</th>\n    <th>Last Name</th>\n  </tr>\n  <tr>\n    <td>John</td>\n    <td>Doe</td>\n  </tr>\n  <tr> \n    <td>Jane</td>\n    <td>Smith</td>\n  </tr> \n  <tr>\n    <td>Tom</td>\n    <td>Jackson</td>\n  </tr> \n  <tr>\n    <td>Ann</td>\n    <td>Miller</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Write a Bash script that requires the user to enter their name and prints it to the console.", "input": "", "output": "#!/bin/bash\necho \"Please enter your name: \"\nread name\necho \"Hello, $name!\"", "category": "Python"}, {"instruction": "Write a C# class that allows a user to enter a set of numbers and add them up.", "input": "", "output": "public class NumberAdder {\n\n    int sum = 0; \n  \n    // Method to add the given numbers\n    public void addNumbers(int[] numbers) {\n        for (int i = 0; i < numbers.Length; i++){\n            this.sum += numbers[i]; \n        }\n    }\n\n}", "category": "Python"}, {"instruction": "Design a JavaScript function that checks if a number is between 0 and 100.", "input": "", "output": "function isInRange(num) {\n    return num >= 0 && num <= 100;\n}", "category": "Python"}, {"instruction": "Using SQL, select the names of all employees with the title \"Manager\".", "input": "", "output": "SELECT name\nFROM Employees\nWHERE title = 'Manager';", "category": "Python"}, {"instruction": "Create an HTML form that asks for the user's name and age.", "input": "", "output": "<form>\n <label for=\"name\">Name:</label>\n <input type=\"text\" name=\"name\" id=\"name\">\n <br>\n <label for=\"age\">Age:</label> \n <input type=\"number\" name=\"age\" id=\"age\">\n</form>", "category": "Python"}, {"instruction": "Write an algorithm that prints the first 10 Fibonacci numbers in descending order.", "input": "", "output": "# Initialize the first two numbers\na = 0\nb = 1\n\n# Print the first 10 Fibonacci numbers\nfor i in range(10):\n    # Swap the values\n    a, b = b, a + b\n    # Print the current Fibonacci number\n    print(b)\n# Reverse the list\nfor _ in range(9, 0, -1):\n    print(_)", "category": "Python"}, {"instruction": "What HTML element is used to create a table?", "input": "", "output": "The HTML element used to create a table is the <table> element.", "category": "Python"}, {"instruction": "Using Python, create a loop that prints each element in a given list.", "input": "List = [\"A\", \"B\", \"C\"]", "output": "for item in List:\n    print(item)", "category": "Python"}, {"instruction": "Design a class named Car and build its constructor.", "input": "", "output": "Class Car{\n    // constructor\n    Car(){ \n        // instance variables\n        this.make = \"\";\n        this.model = \"\";\n        this.year = 0;\n    }\n}", "category": "Python"}, {"instruction": "Given a HTML element, color the text blue.", "input": "<h2>Hello, World!</h2>", "output": "<h2 style=\"color: blue;\">Hello, World!</h2>", "category": "Python"}, {"instruction": "Create a Python class \"Book\" with name and price properties.", "input": "", "output": "class Book:\n def __init__(self, name, price):\n  self.name = name\n  self.price = price", "category": "Python"}, {"instruction": "Write a JavaScript program to extract the domain name from a given URL.", "input": "www.example.com/users", "output": "Domain name: example.com", "category": "Python"}, {"instruction": "Given a 2D array of integers, find the sum of all elements.", "input": "[[1,2,3], [4,5,6], [7,8,9]]", "output": "Sum of all elements: 45", "category": "Python"}, {"instruction": "Write a CSS rule to change the font-style of all h2 headings to italic.", "input": "", "output": "h2 {\n font-style: italic;\n}", "category": "Python"}, {"instruction": "Given a string \"Hello, World\", find the length of the string.", "input": "Hello, World", "output": "Length of given string: 13", "category": "Python"}, {"instruction": "Using Java, write a function that takes an input string and returns the string reversed.", "input": "String input = \"Hello World!\";", "output": "public static String reverseString(String input) { \n    StringBuilder sb = new StringBuilder(); \n    for (int i = input.length() - 1; i >= 0; i--) { \n        sb.append(input.charAt(i)); \n    } \n    return sb.toString(); \n}", "category": "Python"}, {"instruction": "Convert the following array of strings to an array of integers using JavaScript.", "input": "[\"12\", \"21\", \"24\", \"44\"]", "output": "let arr = [\"12\", \"21\", \"24\", \"44\"];\nlet intArr = arr.map(x => parseInt(x));\nconsole.log(intArr); // Output = [12, 21, 24, 44]", "category": "Python"}, {"instruction": "Update the following code to make it pass all test cases.", "input": "def divisible_by_two(numbers): \n    result = []\n    for num in numbers:\n        if num % 2 == 0:\n            result.append(True)\n        else:\n            result.append(False)\n    return result", "output": "def divisible_by_two(numbers): \n    result = []\n    for num in numbers:\n        if num % 2 == 0:\n            result.append(True)\n        else:\n            result.append(False)\n    return result\n\ndef divisible_by_two(numbers):\n    return [True if num % 2 == 0 else False for num in numbers]", "category": "Python"}, {"instruction": "What are the main components of an object oriented programming language?", "input": "", "output": "The main components of an object oriented programming language are classes, objects, methods, and inheritance. Classes are the blueprint used to create objects, methods are the functions which act on objects, and inheritance is the ability for classes to define a common set of characteristics.", "category": "Python"}, {"instruction": "Construct an if-else statement in JavaScript to check if a number is even or odd.", "input": "num = 5", "output": "if(num % 2 == 0){\n    console.log(\"Number is Even\");\n} else {\n    console.log(\"Number is Odd\");\n}", "category": "Python"}, {"instruction": "Write a C# code snippet to print the product of two numbers.", "input": "num1 = 5\nnum2 = 7", "output": "Console.WriteLine(\"Product of two numbers is: \" + (num1 * num2));", "category": "Python"}, {"instruction": "Evaluate the following expression: 25 * 4 - 30 + 30", "input": "", "output": "25 * 4 - 30 + 30 = 140", "category": "Python"}, {"instruction": "Create a new array containing the numbers from 10 to 100 in increments of 5.", "input": "[10, 15, 20, 25, 30, ..., 95, 100]", "output": "int[] array = new int[19];\nint num = 10;\nfor (int i=0; i<19; i++){\n    array[i] = num;\n    num += 5;\n}", "category": "Python"}, {"instruction": "Translate the following sentence into its Python equivalent.", "input": "\"If the number is greater than 10, print 'Success'.\"", "output": "if num > 10:\n    print('Success')", "category": "Python"}, {"instruction": "Create a function that accepts two parameters, a string and a list, and returns the length of the string in the list.", "input": "string = 'FooBar'\nlist = [\"FooBar\", \"Foo\", \"BarFoo\"]", "output": "def getLength(string, list):\n    return len([x for x in list if x == string])", "category": "Python"}, {"instruction": "What is a syntax error in programming?", "input": "", "output": "A syntax error is an error in writing code which causes the code to be incorrect according to the programming language's syntax rules. This type of error prevents the code from being executed and can be identified by the compiler or interpreter. Examples of syntax errors include: putting a string in the wrong form, forgetting to add a semicolon at the end of a line, or missing a bracket.", "category": "Python"}, {"instruction": "Explain function overloading in C++.", "input": "", "output": "Function overloading in C++ allows the same function to have multiple definitions with different parameters. This allows the same function to have different behavior depending on the type and number of parameters that are passed. The compiler determines which version of the function to call by looking at the number and types of arguments.", "category": "Python"}, {"instruction": "Create a MySQL table with a primary key and two other columns.", "input": "", "output": "CREATE TABLE MyTable ( \n    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, \n    name VARCHAR(50) NOT NULL, \n    age INT NOT NULL\n);", "category": "Python"}, {"instruction": "How do functions help with code organization?", "input": "", "output": "Functions help with code organization by breaking the program up into smaller logical blocks. This makes the code easier to read and maintain. Separating the code into functions also makes it easier to debug and test, as it allows for individual parts of the code to be tested and debugged. Having code organized into functions also makes it easier to reuse code as the functions can be called multiple times.", "category": "Python"}, {"instruction": "What is Minimum Spanning Tree?", "input": "", "output": "A minimum spanning tree (MST) is a subset of a graph in which all the nodes are connected and the total weight of the edges is minimized. It is used to find the shortest route to connect all the nodes in the graph. A MST always has less weight than any other spanning tree.", "category": "Python"}, {"instruction": "Write a code to traverse a given tree in breadth-first order.", "input": "", "output": "// function to traverse a tree in breadth-first order\nfunction traverseBreadthFirst(root) {\n    // create an empty array to store nodes\n    const nodes = [];\n\n    // create an empty array to store the visited nodes\n    const visited = [];\n\n    // add the root node to the array\n    nodes.push(root);\n\n    // loop through the nodes in the array\n    while (nodes.length) {\n        // get the first node in the array\n        const node = nodes.shift();\n\n        // add it to the visited array\n        visited.push(node);\n\n        // loop through the node's children\n        for (let child of node.children) {\n            // add the child to the array if it is not visited\n            if (!visited.includes(child)) {\n                nodes.push(child);\n            }\n        }\n    }\n\n    // return the visited array\n    return visited;\n}", "category": "Python"}, {"instruction": "How would you differentiate a local variable from a global variable?", "input": "", "output": "A local variable is a variable declared within a block of code, usually within a function. When the block of code ends, the variable is no longer in scope and is destroyed. It is only accessible within the local scope. A global variable is declared outside of any function and is accessible by all code within the same scope. The scope of a global variable is the entire program or file.", "category": "Python"}, {"instruction": "Using the given input, write a function to produce a desired output.", "input": "Input: [1, 4, 8, 9, 10] \nDesired Output: [[1, 4, 8], [9, 10]]", "output": "def split_list(lst):\n    # Create an empty list\n    result = []\n    \n    # Iterate through the list and divide it into two parts\n    for i in range(0, len(lst), 3):\n        result.append(lst[i:i+3])\n        \n    # Return the result\n    return result", "category": "Python"}, {"instruction": "Write a function that takes a string and a key as parameters and encrypts the string with the key.", "input": "", "output": "def encrypt(string, key):\n    # Create an empty string that will hold the result\n    encrypted_string = \"\"\n    \n    # Loop through the string and encrypt each character\n    for i in range(len(string)):\n        char = string[i]\n        encrypted_char = chr(ord(char) + key)\n        encrypted_string += encrypted_char\n        \n    # Return the encrypted string\n    return encrypted_string", "category": "Python"}, {"instruction": "Write a Python code snippet to print the minimum value of a given list of numbers.", "input": "list = [7, 8, 10, 4]", "output": "min_val = min(list)\nprint('Minimum Value:', min_val)", "category": "Python"}, {"instruction": "Write a SQL query to output the names of people who have visited the website more than 5 times in the last week.", "input": "", "output": "SELECT *\nFROM tbl_users\nWHERE visits > 5 \nAND create_date > DATE_SUB(NOW(), INTERVAL 1 WEEK);", "category": "Python"}, {"instruction": "Implement a recursive solution to calculate the nth Fibonacci number.", "input": "", "output": "def fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2)", "category": "Python"}, {"instruction": "Write a Python function to find the largest prime factor of a given integer.", "input": "", "output": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n = n / i\n        else:\n            i += 1\n    return n", "category": "Python"}, {"instruction": "Generate a regex to match any valid IPv4 address.", "input": "", "output": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$", "category": "Python"}, {"instruction": "Edit the following code to add an event listener for mouseover events.", "input": "<div id=\"container\">Hello</div>\n\nlet element = document.getElementById('container');", "output": "<div id=\"container\">Hello</div>\n\nlet element = document.getElementById('container');\nelement.addEventListener('mouseover', (e) => {\n  // run some code\n});", "category": "Python"}, {"instruction": "What would be the result of running the following SQL query?", "input": "SELECT * FROM products WHERE price < 10", "output": "The result of running the above query would be a list of all products in the products table that have a price less than 10.", "category": "Python"}, {"instruction": "How would you print the following JSON data?", "input": "{\n  \"name\": \"John Doe\",\n  \"age\": 20,\n  \"city\": \"New York\"\n}", "output": "const data = {\n  \"name\": \"John Doe\",\n  \"age\": 20,\n  \"city\": \"New York\"\n};\n\nconsole.log(`Name: ${data.name}, Age: ${data.age}, City: ${data.city}`);", "category": "Python"}, {"instruction": "What would you change in the following function to sort a list of numbers in increasing order?", "input": "let arr = [ 4, 2, 5, 1, 3 ]\n\nfunction bubbleSort(arr) {\n  for (let i = 0; i < arr.length; i++) {\n      for (let j = 0; j < arr.length - i - 1; j++) {\n        if (arr[j] > arr[j + 1]) {\n            let temp = arr[j];\n            arr[j] = arr[j + 1];\n            arr[j + 1] = temp\n        }\n      }\n  }\n}", "output": "let arr = [ 4, 2, 5, 1, 3 ]\n\nfunction bubbleSort(arr) {\n  for (let i = 0; i < arr.length; i++) {\n      for (let j = 0; j < arr.length - i - 1; j++) {\n        if (arr[j] < arr[j + 1]) {\n            let temp = arr[j];\n            arr[j] = arr[j + 1];\n            arr[j + 1] = temp\n        }\n      }\n  }\n}", "category": "Python"}, {"instruction": "How would you hash a string using the SHA-256 algorithm in JavaScript?", "input": "", "output": "const crypto = require('crypto');\n\nconst hashString = (string) => {\n  const hash = crypto.createHash('sha256');\n  hash.update(string);\n  return hash.digest('hex');\n};", "category": "Python"}, {"instruction": "Generate a CSS selector to apply the following style attributes to all <p> tags.", "input": "font-size: 12px;\ncolor: #333;\nfont-family: sans-serif;", "output": "p {\n  font-size: 12px;\n  color: #333;\n  font-family: sans-serif;\n}", "category": "Python"}, {"instruction": "Explain the difference between a local and a global variable in Python.", "input": "", "output": "In Python, a local variable is a variable that is only accessible within the scope of where it is defined, while a global variable is accessible throughout the program. All variables declared outside of a function are globally scoped, while variables declared inside a function are locally scoped. Global variables carry their value throughout the program, while a local variable will lose its value when the function containing it is exited.", "category": "Python"}, {"instruction": "Debug the following code so it can print the corresponding JSON data correctly.", "input": "import json\npeople_string = '{\"name\": \"John Smith\", \"age\": 50, \"profession\": \"engineer\"}'\n\ndata = json.loads(people_string)\nprint(\"Name:           \", data[\"name\"])", "output": "import json\npeople_string = '{\"name\": \"John Smith\", \"age\": 50, \"profession\": \"engineer\"}'\n\ndata = json.loads(people_string)\nprint(\"Name:           \", data[\"name\"])\nprint(\"Age:            \", data[\"age\"])\nprint(\"Profession:     \", data[\"profession\"])", "category": "Python"}, {"instruction": "Write a code to return the key of the minimum element in a dictionary.", "input": "dict: {'a': 1, 'b': 20, 'c': 3}", "output": "\"\"\"\nWrite a code to return the key of the minimum element in a dictionary.\n\"\"\"\n\ndef min_key(d):\n    if not d:\n        return None\n    min_val = min(d.values())\n    return [key for key, val in d.items() if val == min_val][0]\n\nif __name__ == '__main__':\n    d = {'a': 1, 'b': 20, 'c': 3}\n    print(min_key(d))", "category": "Python"}, {"instruction": "Write a code to open a webpage in your default web browser.", "input": "URL: https://example.com/", "output": "\"\"\"\nWrite a code to open a webpage in your default web browser.\n\"\"\"\n\nimport webbrowser\n\ndef open_url(url):\n    webbrowser.open(url)\n\nif __name__ == '__main__':\n    open_url('https://example.com/')", "category": "Python"}, {"instruction": "Construct a regular expression to extract specific words from a sentence.", "input": "Sentence: Python is an interpreted, high-level, general-purpose programming language.\nWords: interpreted, high-level", "output": "\"\"\"\nConstruct a regular expression to extract specific words from a sentence.\n\"\"\"\n\nimport re\n\nsentence = 'Python is an interpreted, high-level, general-purpose computing language.'\nwords = ['interpreted', 'high-level']\n\nregex = r'\\b(?:{})\\b'.format('|'.join(words))\nmatches = re.findall(regex, sentence)\n\nprint(matches)", "category": "Python"}, {"instruction": "Modify the following code snippet to print the total number of characters in the string.", "input": "string = 'Hello World!'", "output": "string = 'Hello World!'\n\nnum_chars = len(string)\nprint(\"The total number of characters in the string is {}.\".format(num_chars))", "category": "Python"}, {"instruction": "Explain how to make a Python script executable on Unix-like systems.", "input": "", "output": "To make a Python script executable on Unix-like systems, you must make the script file executable and specify the path to the Python interpreter. To do this, you need to add a \"shebang\" line at the beginning of the script, which should point to the path of the Python interpreter. This can be done by adding the following line to your script: #!/usr/bin/env python. Next, you must make the script file executable by running the chmod +x command. Finally, you need to specify the path of your script in the system's PATH environment variable so that it can be accessed from anywhere.", "category": "Python"}, {"instruction": "Write a C program to search an element in an array", "input": "", "output": "#include <stdio.h>\n  \nint search(int array[], int n, int x) \n{ \n    int i; \n    for (i = 0; i < n; i++) \n        if (array[i] == x) \n            return i; \n    return -1; \n} \n  \nint main(void) \n{ \n    int array[] = { 2, 3, 4, 10, 40 }; \n    int x = 10; \n    int n = sizeof(array) / sizeof(array[0]); \n    int result = search(array, n, x); \n    (result == -1) ? printf(\"Element is not present in array\") \n                   : printf(\"Element is present at index %d\", \n                            result); \n    return 0; \n}", "category": "Python"}, {"instruction": "Write a SQL query to update all values in a column called \"balance\" to 1000.", "input": "", "output": "UPDATE table_name\nSET balance = 1000", "category": "Python"}, {"instruction": "What is the length of the string \"Hello World!\"?", "input": "", "output": "The length of the string \"Hello World!\" is 12.", "category": "Python"}, {"instruction": "Edit the code to make sure that the sum is printed in the console.", "input": "function add(a, b) {\n  let result = a+b;\n  return result;\n}", "output": "function add(a, b) {\n    let result = a+b;\n    console.log('The sum is: ', result);\n    return result;\n  }", "category": "Python"}, {"instruction": "Make a regex pattern that returns the name and the day of the week given in the paragraph.", "input": "text = \"My name is John, and today is Monday\"", "output": "import re\n\ntext = \"My name is John, and today is Monday\"\n\npattern = r\"My name is (\\w+), and today is (\\w+)\"\n\nmatch = re.search(pattern, text)\nname = match.group(1)\nday = match.group(2)\n\nprint(name) # Output: John\nprint(day) # Output: Monday", "category": "Python"}, {"instruction": "Write a JavaScript function to check if a given key already exists in an object.", "input": "myObj = {key1: 10, key2: 'John'}", "output": "function checkKeyExists(obj, key) {\n    return obj.hasOwnProperty(key); // Returns true or false\n}\n\nmyObj = {key1: 10, key2: 'John'}\nif (checkKeyExists(myObj, 'key1')) {\n    console.log('key1 exists');\n}", "category": "Python"}, {"instruction": "Design a function in Python that takes a list of strings and returns a new list with words in reverse order.", "input": "", "output": "def reverse_words(words):\n    return [word[::-1] for word in words]", "category": "Python"}, {"instruction": "Modify the following code to take in a list of numbers and return the average.", "input": "", "output": "def average(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total / len(numbers)", "category": "Python"}, {"instruction": "Write a code snippet to read characters from a given string until a whitespace is encountered", "input": "", "output": "def read_until_space(string):\n result = \"\"\n for char in string:\n     if char == \" \":\n         break\n     result += char\n return result", "category": "Python"}, {"instruction": "Design an API endpoint that takes two numbers and returns the sum of the two using JavaScript", "input": "", "output": "app.get(\"/sum/:num1/:num2\", (req, res) => {\n const num1 = req.params.num1;\n const num2 = req.params.num2;\n \n const result = parseInt(num1) + parseInt(num2);\n \n res.status(200).send({\n  result: result\n });\n});", "category": "Python"}, {"instruction": "Create an SQL query to find the id of the customer whose name is \"John Doe\".", "input": "", "output": "SELECT id FROM customers WHERE name = 'John Doe';", "category": "Python"}, {"instruction": "Create a SQL script to find the name of a teacher and his/her department given the teacher's ID.", "input": "The teacher has ID 1001.", "output": "SELECT teacher.name, department.name FROM teacher \nLEFT JOIN department ON teacher.department_id = department.id \nWHERE teacher_id = 1001;", "category": "Python"}, {"instruction": "Write a class in Java that prints out the nth number of the Fibonacci sequence using recursion.", "input": "6", "output": "public class Fibonacci {\n \n    static int n1=0,n2=1,n3=0;\n    \n    static void printFibonacci(int count){    \n        if(count>0){    \n            n3 = n1 + n2;    \n            n1 = n2;    \n            n2 = n3;    \n            System.out.print(\" \"+n3);   \n            printFibonacci(count-1);    \n        }    \n    }\n     \n    public static void main(String args[]){    \n        int count=6;    \n        System.out.print(n1+\" \"+n2);    \n        printFibonacci(count-2);    \n    }\n}", "category": "Python"}, {"instruction": "Build a PHP class that handles user data for a website.", "input": "", "output": "class User {\n    private $name;\n    private $email;\n    private $password;\n    \n    public function __construct($name, $email, $password) {\n        $this->name = $name;\n        $this->email = $email;\n        $this->password = $password;\n    }\n    \n    public function getName(){\n        return $this->name;\n    }\n    \n    public function getEmail(){\n        return $this->email;\n    }\n    \n    public function setPassword($newPassword){\n        $this->password = $newPassword;\n    }\n    \n    public function validatePassword($password){\n        return $this->password === $password;\n    }\n}", "category": "Python"}, {"instruction": "Create a bash script that prints the contents of a directory.", "input": "", "output": "#!/bin/bash\n\n# This script prints out the  \n# names of files in the current directory \n\nDIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" >/dev/null 2>&1 && pwd )\"\nfor file in \"$DIR\"/*; do\n    if [ -f \"$file\" ] \n    then \n        # File exists\n        by_no_extension=\"${file%.*}\"\n        echo \"${by_no_extension##*/}\"\n    fi\ndone", "category": "Python"}, {"instruction": "Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.", "input": "Input: 1->2->3->4->5->NULL, k = 2", "output": "public ListNode reverseKGroup(ListNode head, int k) {\n    ListNode curr = head;\n    ListNode prev = null;\n    \n    int count = 0;\n    \n    while (curr != null && count != k) {\n        ListNode next = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = next;\n        count++;\n    }\n    \n    if (next != null) {\n        head.next = reverseKGroup(next, k);\n    }\n    \n    return prev;\n}", "category": "Python"}, {"instruction": "Rewrite the given loop in R.", "input": "list = [1, 2, 3, 4, 5] \nfor i in range(len(list)): \n    print(list[i])", "output": "list <- c(1, 2, 3, 4, 5)\nfor (i in seq_along(list)) {\n    print(list[i])\n}", "category": "Python"}, {"instruction": "Write a function that takes three integers and returns the maximum of the three.", "input": "-2, 5, 7", "output": "def max_of_three(x, y, z): \n    return max(x, y, z) \n  \nprint(max_of_three(-2, 5, 7)) \n# Output: 7", "category": "Python"}, {"instruction": "Create a JavaScript script to toggle a class on the page.", "input": "<html>\n<body>\n   <div id=\"test\" class=\"test-class\">Hello World!</div>\n</body>\n</html>", "output": "<script>\n   //Toggle the class on click\n   document.getElementById(\"test\").addEventListener(\"click\", function(){\n      this.classList.toggle(\"test-class\");\n   });\n</script>", "category": "Python"}, {"instruction": "Given a binary tree, write a method to compute the maximum path sum.", "input": "10\n      /  \\\n     2    10\n    / \\   / \\\n   20  1  -25  6", "output": "public int maxPathSum(TreeNode root) {\n    \n    int result = Integer.MIN_VALUE;\n    if (root == null) return result;\n    Stack<TreeNode> stack = new Stack<>();\n    stack.push(root);\n    while (!stack.isEmpty()) {\n        TreeNode currentNode = stack.pop();\n        result = Math.max(result, maxPathSum(currentNode));\n        if (currentNode.left != null) {\n            stack.push(currentNode.left);\n        }\n        if (currentNode.right != null) {\n            stack.push(currentNode.right);\n        }\n    }\n    return result;\n}\n \npublic int maxPathSum(TreeNode root) {\n    if (root == null) return 0;\n    int sum = root.val;\n    int leftSum = maxPathSum(root.left);\n    int rightSum = maxPathSum(root.right);\n    return Math.max(sum + leftSum + rightSum, sum + Math.max(leftSum, rightSum));\n}", "category": "Python"}, {"instruction": "Write an array sorting function that sorts the array in ascending order.", "input": "[3, 1, 9, 5, 4]", "output": "def array_sort(arr): \n    arr.sort() \n    return arr\narray_sort([3, 1, 9, 5, 4])", "category": "Python"}, {"instruction": "Create a regular expression that matches any word starting with the letter \"a\".", "input": "", "output": "^a\\w*", "category": "Python"}, {"instruction": "Develop an algorithm to search for a particular element in an array.", "input": "[1, 9, 5, 8, 4, 9], element to search for: 9", "output": "def search(arr, el):\n    for i in range(len(arr)):\n        if arr[i] == el:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Write a SQL query to retrieve the latest shipment date for each product in the warehouse.", "input": "", "output": "SELECT productID, MAX(ship_date) \nFROM shipments \nGROUP BY productID", "category": "Python"}, {"instruction": "Develop a program to delete all nodes of a linked list at a given position.", "input": "[3, 9, 1, 5], position to delete: 2", "output": "# Node class \nclass Node: \n\t\n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\n\n# Linked List class \nclass LinkedList: \n\t\n\tdef __init__(self): \n\t\tself.head = None\n\n\t# function to add a node at the given position \n\tdef deleteNode(self, pos): \n\n\t\t# if list is empty \n\t\tif self.head == None: \n\t\t\treturn\n\n\t\t# store head node \n\t\ttemp = self.head \n\n\t\t# if head needs to be removed \n\t\tif pos == 0: \n\t\t\tself.head = temp.next\n\t\t\ttemp = None\n\t\t\treturn\n\n\t\t# find previous node of the node to be deleted \n\t\tfor i in range(pos -1 ): \n\t\t\ttemp = temp.next\n\t\t\tif temp is None: \n\t\t\t\tbreak\n\n\t\t# if position is more than number of nodes \n\t\tif temp is None: \n\t\t\treturn \n\t\tif temp.next is None: \n\t\t\treturn\n\n\t\t# Node temp.next is the node to be deleted \n\t\t# store pointer to the next of node to be deleted \n\t\tnext = temp.next.next\n\n\t\t# Unlink the node from linked list \n\t\ttemp.next = None\n\n\t\ttemp.next = next", "category": "Python"}, {"instruction": "Develop a program in Ruby to get the sum of an array of numbers.", "input": "nums = [1, 2, 3, 4, 5]", "output": "nums = [1, 2, 3, 4, 5]\n\ndef sum_array(nums)\n  sum = 0\n  nums.each { |n| sum += n }\n  return sum\nend\n\nputs sum_array(nums)", "category": "Python"}, {"instruction": "Create a Java program to list out all prime numbers between 1 and n.", "input": "n = 20", "output": "public class AllPrimeNumbers \n{ \n    public static void main(String args[]) \n    { \n        int n = 20;\n\n        System.out.print(\"All Prime Numbers between 1 and \" + n + \" are: \"); \n          \n        for (int i = 2; i <= n; i++)  \n        { \n            boolean isPrime = true; \n  \n            for (int j = 2; j < i; j++) \n            { \n                if (i % j == 0) \n                { \n                    isPrime = false; \n                    break; \n                } \n            } \n  \n            if (isPrime) \n            {\n                System.out.print(i + \" \"); \n            } \n        } \n    } \n}", "category": "Python"}, {"instruction": "Construct a C program to print the Fibonacci series up to n terms.", "input": "n = 10", "output": "#include <stdio.h>\n\nint main()\n{\n   int n, i, t1 = 0, t2 = 1, nextTerm;\n\n   n = 10;\n\n   printf(\"Fibonacci Series: \");\n\n   for (i = 1; i <= n; ++i)\n   {\n       printf(\"%d, \", t1);\n       nextTerm = t1 + t2;\n       t1 = t2;\n       t2 = nextTerm;\n   }\n   return 0;\n}", "category": "Python"}, {"instruction": "Write a JavaScript program to calculate the amount of money saved by an individual over 10 years given the annual deposits and annual interest rate.", "input": "deposits = $1000 and rate = 5%", "output": "const deposits = 1000;\nconst rate = 0.05;\nlet totalSavings = 0; \n\nfor (let i = 1; i <= 10; i++) {\n    totalSavings += deposits * (1 + rate);\n}\nconsole.log(totalSavings); //outputs amount saved over 10 year period", "category": "Python"}, {"instruction": "Compose a Java program that finds the factorial of a number.", "input": "n = 5", "output": "public class Factorial {\n\tpublic static void main(String[] args) {\n\t\tint n = 5;\n\t\tint result = 1;\n\t\t\n\t\tfor (int i = n; i >= 1; i--) {\n\t\t\tresult = result * i;\n\t\t}\n\t\t\n\t\tSystem.out.println(result);\n\t}\n}", "category": "Python"}, {"instruction": "Develop a Python program that creates a random password of length 8 characters.", "input": "", "output": "import string\nimport random\n\nlength = 8\nall_characters = string.ascii_letters + string.digits + string.punctuation\n\npassword = \"\".join(random.choice(all_characters) for i in range(length))\n\nprint(password)", "category": "Python"}, {"instruction": "Edit the following Python code to combine two lists.", "input": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]", "output": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n# Combine both the lists\ncombined_list = list1 + list2\n# Print the combined list\nprint(combined_list)\n\nOutput:\n[1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Find the sum of all elements in the given 2D array.", "input": "[[1, 2, 3],[4, 5, 6],[7, 8, 9]]", "output": "45", "category": "Python"}, {"instruction": "Create a Python script for creating a random string of given length.", "input": "Length of 8", "output": "import random\nimport string\n\ndef random_string(length):\n    # Create a list of characters to be used in the random string\n    char_list = list(string.ascii_letters + string.digits)\n\n    # Create the random string with the given length\n    random_string = ''.join([random.choice(char_list) for i in range(length)])\n    \n    # Return the random string\n    return random_string\n\nif __name__ == '__main__':\n    # Define the length of the random string\n    length = 8\n    # Call the function to generate the random string\n    random_str = random_string(length)\n    # print the generated string\n    print('Random string:', random_str)\n\nOutput:\nRandom string: fdLbBi49", "category": "Python"}, {"instruction": "Write a SQL query that will find the records with duplicate email address in the given table.", "input": "Users Table\nid | name | email\n1  | John | john@example.com\n2  | Bill | bill@example.com\n3  | Mary | mary@example.com\n4  | Mary | mary@example.com\n5  | Mark | mark@example.com", "output": "SELECT email\nFROM Users\nGROUP BY email\nHAVING COUNT(*) > 1;", "category": "Python"}, {"instruction": "Develop a C program to identify and remove duplicates from an array.", "input": "[1, 3, 2, 3, 4, 5, 2]", "output": "#include<stdio.h>\n \n// Function to remove duplicates from an array\nvoid RemoveDuplicates(int arr[], int n)\n{\n    // Existing elements in array\n    int temp[n];\n \n    // Initialize the elements of temp[] \n    for (int i=0; i<n; i++)\n        temp[i] = arr[i];\n \n    // Sort temp[]\n    for (int i=0; i<n-1; i++)\n        for (int j=i+1; j<n; j++)\n            if (temp[i] > temp[j])\n            {\n                int t = temp[i];\n                temp[i] = temp[j];\n                temp[j] = t;\n            }\n \n    // Index of next unique element\n    int j = 0;\n \n    // Traverse temp[] and make unique elements \n    // of arr[]\n    for (int i=0; i<n-1; i++)\n        if (temp[i] == temp[i+1])\n            continue;\n        else\n            temp[j++] = arr[i];\n \n    // Set the last element as the only \n    // unique element\n    temp[j++] = arr[n-1];\n \n    // Copy the updated temp[] to arr[]\n    for (int i=0; i<j; i++)\n        arr[i] = temp[i];\n}\n \n// Driver Code\nint main()\n{\n    int arr[] = {1, 3, 2, 3, 4, 5, 2};\n    \n    int n = sizeof(arr) / sizeof(arr[0]);\n \n    printf(\"Original array : \");\n    for (int i=0; i<n; i++)\n        printf(\"%d \", arr[i]);\n \n    RemoveDuplicates(arr, n);\n \n    printf(\"\\nArray after removing duplicates : \");\n    for (int i=0; i<n; i++)\n        printf(\"%d \", arr[i]);\n \n    return 0;\n}", "category": "Python"}, {"instruction": "Compose a Java program to print a given pattern on the screen.", "input": "N = 5", "output": "public class Pattern {\n    public static void main(String[] args) {\n        int N = 5;\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                System.out.print(Math.abs(i-j)+1 + \" \");\n            }\n            System.out.println();\n        }\n    }\n} \n// Output \n1 2 3 4 5 \n2 1 2 3 4 \n3 2 1 2 3 \n4 3 2 1 2 \n5 4 3 2 1", "category": "Python"}, {"instruction": "Develop an algorithm to traverse a linked list in a reverse order.", "input": "", "output": "def traverseReverse(head):\n    if head is None:\n        return\n\n    stack = []\n    curr = head\n    while curr is not None:\n        stack.append(curr) \n        curr = curr.next \n\n    while len(stack) > 0:\n        curr = stack.pop()\n        print(curr.val)", "category": "Python"}, {"instruction": "Design an algorithm to search for a particular node in a binary tree using breadth-first search.", "input": "", "output": "def breadthFirstSearch(root, target):\n\n    if root is None:\n        return False\n    \n    queue = [root]\n\n    while len(queue) > 0:\n        node = queue.pop(0)\n        if node.val == target:\n            return True\n\n        if node.left is not None:\n            queue.append(node.left)\n        if node.right is not None:\n            queue.append(node.right)\n\n    return False", "category": "Python"}, {"instruction": "Write a JavaScript program to remove all characters from a string that appear more than once.", "input": "string = \"abbccddee\"", "output": "let string = \"abbccddee\"; \nlet res = \"\";\nlet seen = {};\nfor (let letter of string) {\n  if (!seen[letter]) {\n    res += letter;\n    seen[letter] = true;\n  }\n}\nconsole.log(res);  //Output is: abcde", "category": "Python"}, {"instruction": "Generate a list comprehension in Python to generate a list of integers from 1 to 50.", "input": "", "output": "[x for x in range(1, 51)]", "category": "Python"}, {"instruction": "Create a C++ code that will find the second maximum element in an array of numbers.", "input": "[1, 2, 3, 4, 5]", "output": "#include <bits/stdc++.h>\nusing namespace std;\n \n// function to find the second maximum element in an array\nint findSecondMax(int arr[], int n) \n{ \n    // Initialize maximum and second maximum\n    int max = INT_MIN; \n    int smax = INT_MIN; \n  \n    for (int i = 0; i < n; i++) \n    { \n        // If current element is greater than max \n        if (arr[i] > max) \n        { \n            // update second maximum \n            smax = max; \n  \n            // update maximum element \n            max = arr[i]; \n        } \n  \n        // If arr[i] is in between max and second maximum \n        else if (arr[i] > smax && arr[i] != max) \n            smax = arr[i]; \n    } \n    // return second maximum \n    return smax; \n} \n  \n// Driver Program \nint main() \n{ \n    int arr[] = { 2, 1, 3, 4, 5 }; \n    int n = 5; \n    cout << findSecondMax(arr, n) << endl; \n    return 0; \n} \n\nOutput:\n4", "category": "Python"}, {"instruction": "Create a Python program that takes as input an email address and validates it using a regex pattern.", "input": "email = 'example@gmail.com'", "output": "import re\n\ndef validate_email(email):\n    \"\"\"Validates an email address using regex\"\"\"\n    pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n    match = re.search(pattern, email)\n    if match:\n        return True\n    else:\n        return False\n\nemail = 'example@gmail.com'\n\nis_valid_email = validate_email(email)\nprint(is_valid_email) # Output: True", "category": "Python"}, {"instruction": "Create a regular expression that matches any URL.", "input": "", "output": "Regex: ^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$", "category": "Python"}, {"instruction": "Convert the given list into a key-value dictionary.", "input": "[1, 'a', 2, 'b', 3, 'c']", "output": "dict = {1: 'a', 2: 'b', 3: 'c'}", "category": "Python"}, {"instruction": "Create a function to calculate the binomial coefficient for two integers.", "input": "n = 5\nr = 3", "output": "def binomial_coefficient(n, r):\n    fact = 1 \n    if r > n - r:\n        r = n - r \n    for i in range(r):\n        fact *= (n) - i \n        fact /= (i+1) \n    return int(fact)\n\nprint(binomial_coefficient(n, r))", "category": "Python"}, {"instruction": "Convert the following infix expression to postfix notation.", "input": "A + B * C", "output": "A B C * +", "category": "Python"}, {"instruction": "Create a code to get the average value of a given list.", "input": "numbers = [1, 4, 9, 5]", "output": "def get_average(numbers):\n    sum_nums = 0\n    for num in numbers:\n        sum_nums += num\n    return sum_nums / len(numbers)\n\nprint(get_average(numbers))", "category": "Python"}, {"instruction": "Need to write a function to encrypt a message using the caesar cipher, which takes the key as an argument.", "input": "message = \"Hello World\"\nkey = 3", "output": "def encrypt_caesar_cipher(message, key):\n    encrypted_message = \"\"\n    for char in message: \n        if not char.isalpha():\n            encrypted_message += char\n        else:\n            encrypted_char = chr((ord(char) + key - 97) % 26 + 97)\n            encrypted_message += encrypted_char\n    return encrypted_message\n\nprint(encrypt_caesar_cipher(message, key))", "category": "Python"}, {"instruction": "Execute a SQL query to find the 2 most populous countries in the world.", "input": "", "output": "SELECT TOP 2 name, population \nFROM WorldWide \nORDER BY population DESC;", "category": "Python"}, {"instruction": "Create a function that takes in two arguments \"a\" and \"b\" and prints out the greatest common divisor between them.", "input": "a = 6\nb = 36", "output": "def gcd(a, b): \n    if (a == 0): \n        return b \n    return gcd(b % a, a)\n\nprint(gcd(a, b))", "category": "Python"}, {"instruction": "Create a function that takes in an integer \"n\" and prints all perfect numbers between 0 to n.", "input": "n = 20", "output": "def perfect_numbers(n):\n    perfect_numbers = []\n    for number in range(1, n+1):\n        sum_divisors = 0\n        for divisor in range(1, number):\n            if number % divisor == 0:\n                sum_divisors += divisor\n        if sum_divisors == number:\n            perfect_numbers.append(number)\n    return perfect_numbers\n \nprint(perfect_numbers(n))", "category": "Python"}, {"instruction": "Create a list comprehension to generate a list of all the words in the sentence \"Python is amazing\".", "input": "", "output": "words = [word for word in \"Python is amazing\".split(' ')]", "category": "Python"}, {"instruction": "Write a Ruby program to calculate the Simple Interest using Principal, Rate and Time.", "input": "Principal = 1000\nRate = 2\nTime = 2", "output": "def simple_interest(principal, rate, time)\n    \"\"\"Returns the simple interest that is computed using the principle amount, rate and time\"\"\"\n    return principal * rate * time / 100.0\nend\n\nprincipal = 1000\nrate = 2\ntime = 2\n\nsimple_interest = simple_interest(principal, rate, time)\nputs simple_interest # Output: 40.0", "category": "Python"}, {"instruction": "Create a class named Person with two properties: name and age.", "input": "", "output": "class Person {\n    private: \n        string name;\n        int age;\n\n    public:\n        Person(string name, int age) {\n            this->name = name;\n            this->age = age;\n        }\n        void setName(string name) {\n            this->name = name;\n        }\n        void setAge(int age) {\n            this->age = age;\n        }\n        string getName() {\n            return name;\n        }\n        int getAge() {\n            return age;\n        }\n};", "category": "Python"}, {"instruction": "Create a C++ program that reads the user's name and prints a greeting.", "input": "", "output": "#include<iostream>\n#include<string>\n\nusing namespace std;\n\nint main() {\n   string name;\n   cout << \"Please enter your name: \";\n   cin >> name;\n   cout << \"Hello \" << name << \"!\" << endl;\n   return 0;\n}\n\n# Output: Hello <user's name>!", "category": "Python"}, {"instruction": "Make a regex pattern that checks if a string is in the valid phone number format 555-555-5555.", "input": "", "output": "import re\n\npattern = r\"^\\d{3}-\\d{3}-\\d{4}$\"\n\nif re.match(pattern, \"555-555-5555\"):\n    print(\"Valid Phone Number Format\")\nelse:\n    print(\"Invalid Phone Number Format\")\n\n# Output: Valid Phone Number Format", "category": "Python"}, {"instruction": "Create a function that takes as argument the number of elements and return a list containing the Fibonacci sequence up to that number.", "input": "n = 10", "output": "def get_fibonacci_sequence(n):\n    \"\"\"Returns a list containing the Fibonacci sequence up to number n\"\"\"\n    fib_list = [0, 1]\n    if n <= 2:\n        return fib_list[:n]\n    \n    for i in range(2, n):\n        fib_list.append(fib_list[i-2] + fib_list[i-1])\n    \n    return fib_list\n\nn = 10\n\nfib_sequence = get_fibonacci_sequence(n)\nprint(fib_sequence) # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "category": "Python"}, {"instruction": "Create a SQL query that returns the name, age and salary for all employees whose age is greater than 40.", "input": "", "output": "SELECT name, age, salary \nFROM Employees \nWHERE age > 40;", "category": "Python"}]
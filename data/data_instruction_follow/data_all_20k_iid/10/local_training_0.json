[{"instruction": "Read the code below and edit it to make the output for the given input.", "input": "def sum_two(a, b):\n     return a + b\n\nInput: a = 5, b = 10", "output": "def sum_two(a, b):\n     return a + b\n\nInput: a = 5, b = 10\nOutput: 15", "category": "Python"}, {"instruction": "Construct a loop in Python to invert the order of a string.", "input": "string = \"Hello World!\"", "output": "string = \"Hello World!\"\ninverted_string = \"\"\nfor char in string:\n    inverted_string = char + inverted_string\n\nprint(inverted_string) # Output: \"!dlroW olleH\"", "category": "Python"}, {"instruction": "Create generic functions for a for-each loop in JavaScript.", "input": "", "output": "// Declare a function that accepts 2 arguments \nfunction forEach(arr,func) {\n    // Check to see if input is valid\n    if(!Array.isArray(arr)) \n        return console.log('Not a valid array')\n    \n    // Iterate through array and apply callback func\n    for(let i =0; i < arr.length; i++) {\n        func.call(null,arr[i],i,arr)\n    }\n}\n       \n// Call the function to check\nlet arr = [1,2,3,4,5]\n\nforEach(arr, (val, index, array) => {\n    console.log(val)\n    console.log(index)\n    console.log(array)\n})", "category": "Python"}, {"instruction": "Train a sentiment analysis model using a corpus of movie reviews.", "input": "", "output": "import pandas as pd\nimport numpy as np\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Dense, Embedding, LSTM, Dropout\nfrom keras.models import Sequential\n\n# Load corpus of movie reviews\ndata = pd.read_csv('movie_reviews.csv')\nsentences = data['review'].values\ny = data['sentiment'].values\n\n# Create tokenizer\ntokenizer = Tokenizer(num_words=2000)\ntokenizer.fit_on_texts(sentences)\nX = tokenizer.texts_to_sequences(sentences)\nvocab_size = len(tokenizer.word_index)+1\nX = pad_sequences(X)\n\n# Build and train a model\nmodel = Sequential()\nmodel.add(Embedding(vocab_size, 128, input_length=X.shape[1]))\nmodel.add(LSTM(64, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n# fit the model with epochs\nmodel.fit(X,y, batch_size=64, epochs=15)\n\n# Evaluate the model\nscores = model.evaluate(X, y, verbose=0)\nprint(\"Accuracy: %.2f%%\" % (scores[1]*100))", "category": "Python"}, {"instruction": "Create a 3D scatterplot in Python to visualize 3 different datasets.", "input": "", "output": "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nx1 = np.array([1,2,3,4,5])\ny1 = np.array([2,3,4,5,6])\nz1 = np.array([3,4,5,6,7])\n\nx2 = np.array([10,11,12,13,14])\ny2 = np.array([20,21,22,23,24])\nz2 = np.array([40,41,42,43,44])\n\nx3 = np.array([100,200,300,400,500])\ny3 = np.array([200,400,600,800,1000])\nz3 = np.array([1,2,3,4,5])\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(x1, y1, z1, c='r', marker='o', label='dataset1')\nax.scatter(x2, y2, z2, c='y', marker='^', label='dataset2')\nax.scatter(x3, y3, z3, c='g', marker='d', label='dataset3')\nax.legend()\n\nplt.show()", "category": "Python"}, {"instruction": "Write a SQL query to get the sum of sales for each country.", "input": "", "output": "SELECT country, SUM(sales) \nFROM orders\nGROUP BY country;", "category": "Python"}, {"instruction": "Generate a random password with 8 characters, including upper and lower case letters, numbers, and special characters.", "input": "", "output": "import string\nimport random\n\ndef generate_password():\n    # create a string of all possible characters\n    chars = string.ascii_letters + string.digits + string.punctuation\n    # generate a random password with 8 characters\n    password = ''.join(random.choice(chars) for i in range(8))\n    return password\n\n# Generate a random password\npassword = generate_password()\nprint(password)", "category": "Python"}, {"instruction": "Edit the existing JavaScript code to make it pass Eslint.", "input": "var foo = \"foo\"\nif (foo) {\n    console.log(\"foo is true\")\n}", "output": "var foo = \"foo\";\nif (foo) {\n    console.log(\"foo is true\");\n}", "category": "Python"}, {"instruction": "Write a function in Java to calculate the number of days in a given month and year.", "input": "", "output": "public static int daysInMonth(int month, int year) { \n    int days[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; \n    if (month == 2 && isLeapYear(year)) \n        return 29; \n    else\n        return days[month - 1]; \n}", "category": "Python"}, {"instruction": "Create a program in python to simulate a game of rock, paper, scissors.", "input": "", "output": "from random import randint \n\ndef rock_paper_scissors():\n    print(\"rock, paper, scissors!\")\n    player = input(\"Your input: \")\n    rand_num = randint(0,2)\n    if rand_num == 0:\n        computer = \"rock\"\n    elif rand_num == 1:\n        computer = \"paper\"\n    else:\n        computer = \"scissors\" \n\n    print(\"The computer plays: \" + computer)\n    if player == computer:\n        print(\"It's a tie!\")\n    elif player == \"rock\":\n        if computer == \"paper\":\n            print(\"Computer wins!\")\n        else:\n            print(\"Player wins!\")\n    elif player == \"paper\":\n        if computer == \"scissors\":\n            print(\"Computer wins!\")\n        else:\n            print(\"Player wins!\")\n    elif player == \"scissors\":\n        if computer == \"rock\":\n            print(\"Computer wins!\")\n        else:\n            print(\"Player wins!\")\n    else:\n        print(\"Invalid input! You have to choose between rock, paper or scissors\")\n\nrock_paper_scissors()", "category": "Python"}, {"instruction": "The following code is broken, please rewrite it so that it prints out all the primes within a range of 1-100.", "input": "for i in range(2,100):\n    if i % 2 == 0:\n        print (i, \" is prime\")", "output": "for i in range(2,100):\n    is_prime = True\n    for j in range(2,i):\n        if i % j == 0:\n            is_prime = False\n            break\n    if is_prime:\n        print(i, \"is prime\")", "category": "Python"}, {"instruction": "Use the collections module in python to return the most common phrase from a list of strings.", "input": "[ \"hello world\", \"hello\", \"hello world again\" ]", "output": "from collections import Counter\n\ndef most_common_phrase(string_list):\n    c = Counter(string_list)\n    return c.most_common(1)[0][0]\n\nmost_common_phrase([\"hello world\", \"hello\", \"hello world again\"])\n# output: 'hello world'", "category": "Python"}, {"instruction": "Use the regex module in python to remove all punctuation in a given string.", "input": "\"Hello, world!\"", "output": "import re\n\ndef remove_punc(string):\n    punc_pattern = re.compile('[^\\w\\s]')\n    return punc_pattern.sub('', string)\n\nremove_punc(\"Hello, world!\")\n# output: 'Hello world'", "category": "Python"}, {"instruction": "Create a program in python that takes a number as input and checks if it is a prime number", "input": "5", "output": "def is_prime(num):\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if (num % i == 0):\n                return False\n    return True\n\nis_prime(5)\n# output: True", "category": "Python"}, {"instruction": "Write a code that takes a list of strings and a string, and returns a list containing all strings from the given list that have the given string as a substring.", "input": "['Hello', 'Hello, world', 'Bonjour', 'My name is John']\nString: 'lo'", "output": "def find_substring(lst, query):\n    result = []\n    for el in lst:\n        if query in el:\n            result.append(el)\n    return result\n\nfind_substring(['Hello', 'Hello, world', 'Bonjour', 'My name is John'], 'lo')\n# output: ['Hello', 'Hello, world']", "category": "Python"}, {"instruction": "Write a function to convert a given list of strings into a dictionary where the key is a string in the list, and the value is the frequency of the string in the list.", "input": "[\"hello\", \"hello\", \"world\", \"welcome\", \"hello\"]", "output": "def list_to_dict(lst):\n    my_dict = {}\n    for i in lst:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    return my_dict\n\nlist_to_dict([\"hello\", \"hello\", \"world\", \"welcome\", \"hello\"]) \n# output: {'hello': 3, 'world': 1, 'welcome': 1}", "category": "Python"}, {"instruction": "Create a dictionary that contains 10 entries.", "input": "", "output": "tutorials = {\n  'Python': 'http://www.python.org/',\n  'Django': 'http://www.djangoproject.com/',\n  'Selenium': 'https://pypi.python.org/pypi/selenium',\n  'Robotics': 'http://www.robotics-focus.com/',\n  'Machine Learning': 'https://en.wikipedia.org/wiki/Machine_learning',\n  'Data Science': 'http://www.datascience.com/',\n  'Big Data': 'https://aws.amazon.com/big-data/',\n  'Cloud Computing': 'http://www.mcp.com/cloud-computing/',\n  'Artificial Intelligence': 'https://www.microsoft.com/en-us/research/ai/',\n  'Internet of Things': 'https://www.intel.com/content/www/us/en/internet-of-things/overview.html'\n}", "category": "Python"}, {"instruction": "Write a code that takes an array and returns an array of all elements in the original except for the duplicates.", "input": "[1, 2, 2, 3, 4, 4, 5]", "output": "def remove_duplicates(arr):\n    new_arr = []\n    seen = set()\n    for i in arr:\n        if i not in seen:\n            seen.add(i)\n            new_arr.append(i)\n    return new_arr\n\nremove_duplicates([1,2,2,3,4,4,5])\n# output: [1,2,3,4,5]", "category": "Python"}, {"instruction": "Write a SQL query to get the products with the lowest price in each category.", "input": "", "output": "SELECT p1.* \nFROM products p1 \nINNER JOIN \n  (SELECT category, MIN(price) AS min_price \n   FROM products \n   GROUP BY category) p2 \nON p1.category = p2.category \nAND p1.price = p2.min_price;", "category": "Python"}, {"instruction": "Write a function in Python to print out the most common words in a given text.", "input": "This is a test text. It can be used to test a function for the most common words.", "output": "def most_common(text):\n    text_list = text.lower().split()\n    results = {}\n    for word in text_list:\n        if word not in results:\n            results[word] = 1\n        else:\n            results[word] += 1\n\n    sorted_words = sorted(results.items(), key=lambda kv: kv[1], reverse=True)\n    for word, count in sorted_words[:10]:\n        print(word, count)", "category": "Python"}, {"instruction": "Using the SQL language, write a query to sum up the total population of a list of cities.", "input": "City\tPopulation\nNew York\t8,398,748\nLos Angeles\t3,976,322\nChicago\t2,705,994", "output": "SELECT SUM(population) \nFROM (\n\tSELECT population \n\tFROM cities \n\tWHERE city IN ('New York', 'Los Angeles', 'Chicago')\n) total;", "category": "Python"}, {"instruction": "Create a function that takes two strings as an input and concatenate the two strings.", "input": "string1 = \"Hello\"\nstring2 = \"World\"", "output": "def concat(string1, string2):\n    return string1 + string2", "category": "Python"}, {"instruction": "Using a for loop, print out a countdown from 10 to 1.", "input": "", "output": "for i in range(10, 0, -1): \n    print(i)", "category": "Python"}, {"instruction": "Aggregate and calculate the mean of the following array by grouping them by the key 'region'.", "input": "array = [\n    {'name': 'John', 'region': 'West', 'score': 4},\n    {'name': 'Jane', 'region': 'West', 'score': 10},\n    {'name': 'Bob', 'region': 'East', 'score': 5},\n    {'name': 'Alice', 'region': 'East', 'score': 20}\n]", "output": "import pandas as pd\n\ndf = pd.DataFrame(array)\nmean_by_region = df.groupby('region')['score'].mean() \n\nprint(mean_by_region)", "category": "Python"}, {"instruction": "Create a range between 10 and 20 with a step of 2.", "input": "", "output": "range(10,20,2)", "category": "Python"}, {"instruction": "Query an API and display its results.", "input": "URL = \"http://ip-api.com/json\"", "output": "import requests\n\nresponse = requests.get(url)\ndata = response.json()\n\nprint(data)", "category": "Python"}, {"instruction": "Create a program which takes an integer input n and prints its factorial.", "input": "n = 5", "output": "def factorial(n): \n    fact = 1\n    for i in range(1, n+1): \n        fact = fact * i \n    return fact\n\nprint(factorial(n))", "category": "Python"}, {"instruction": "Use Numpy or Pandas to calculate the mean of the following array.", "input": "array = [3, 4, 8, 10, 14]", "output": "import numpy as np\n\nmean = np.mean(array)\nprint(mean)", "category": "Python"}, {"instruction": "Find the latitude and longitude of an input address.", "input": "address = \"1600 Amphitheatre Parkway, Mountain View, CA\"", "output": "import geocoder\n\ng = geocoder.google(address)\n\nprint(\"Latitude: \" + str(g.latlng[0])) \nprint(\"Longitude: \" + str(g.latlng[1]))", "category": "Python"}, {"instruction": "Create a function that adds two inputs of type integers and returns the sum.", "input": "a = 8\nb = 3", "output": "def add(a, b):\n    return a + b", "category": "Python"}, {"instruction": "Create a function to generate random English sentences.", "input": "<noinputn>", "output": "import random\nimport nltk\n\ndef generate_sentences(num_sentences):\n    sentences = []\n    for _ in range(num_sentences):\n        sentence = []\n        while True:\n            word = random.choice(nltk.corpus.words.words())\n            sentence.append(word)\n            if word[-1] == '.':\n                break\n        sentences.append(' '.join(sentence))\n    return sentences", "category": "Python"}, {"instruction": "Calculate the area of a triangle given three side lengths.", "input": "", "output": "def calculate_area_triangle(a, b, c):\n    s = (a + b + c) / 2\n    return (s*(s-a)*(s-b)*(s-c)) ** 0.5", "category": "Python"}, {"instruction": "Write a function to determine if two rectangles intersect.", "input": "rect1 = (x1, y1, w1, h1)\nrect2 = (x2, y2, w2, h2)", "output": "def is_intersect(rect1, rect2):\n    if rect1[0] > rect2[0] + rect2[2] or rect1[0] + rect1[2] < rect2[0] or rect1[1] > rect2[1] + rect2[3] or rect1[1] + rect1[3] < rect2[1]:\n        return False\n    else:\n        return True", "category": "Python"}, {"instruction": "Print the elements of an array in reverse order.", "input": "my_arr = [1, 2, 3]", "output": "for element in my_arr[::-1]:\n    print(element)", "category": "Python"}, {"instruction": "Create a copy of an existing array.", "input": "my_arr = [1, 2, 3]", "output": "import copy\n\nmy_arr_copy = copy.deepcopy(my_arr)", "category": "Python"}, {"instruction": "Output the top 5 most common strings in a given list of strings.", "input": "[\"apple\", \"orange\", \"apple\", \"banana\", \"apple\", \"cherry\", \"banana\"]", "output": "from collections import Counter\nword_freq = Counter([\"apple\", \"orange\", \"apple\", \"banana\", \"apple\", \"cherry\", \"banana\"])\nwords = word_freq.most_common(5)\nfor word, freq in words:\n    print(word, freq)\n\nOutput:\napple 3\nbanana 2\norange 1\ncherry 1", "category": "Python"}, {"instruction": "Convert the given numerical value from base 10 to base 2.", "input": "Number: 50", "output": "base2 = 110010", "category": "Python"}, {"instruction": "Write an algorithm to print out the numbers between 0 and 10 in an increasing order.", "input": "", "output": "for i in range(0,10):\n   print(i)", "category": "Python"}, {"instruction": "Write a SQL query to find the titles of all movies directed by Steven Spielberg.", "input": "", "output": "SELECT title\nFROM movies\nWHERE director = 'Steven Spielberg';", "category": "Python"}, {"instruction": "Calculate the square root of a number without using any built-in function.", "input": "num = 25", "output": "def calculate_sqrt(num):\n   # Babylonian method\n   x = num\n   y = 1\n \n   while x > y:\n       x = (x + y) / 2\n       y = num / x\n \n   return x\n\ncalculate_sqrt(num)", "category": "Python"}, {"instruction": "Interpret the following regular expression.", "input": "\\d{2}\\s[A-Z]{3}", "output": "The regular expression \\d{2}\\s[A-Z]{3} matches a two-digit number (\\d{2}) followed by a space (\\s) followed by three upper-case letters (A-Z]{3}). For example, 12 ABC would be a valid match.", "category": "Python"}, {"instruction": "Write a PHP function that takes in a two strings and returns true if the strings are anagrams, and false if they are not.", "input": "", "output": "function isAnagram($str1, $str2) {\n  $arr1 = str_split($str1); \n  sort($arr1);\n  $arr2 = str_split($str2);\n  sort($arr2);\n  return $arr1 == $arr2;\n}", "category": "Python"}, {"instruction": "Using the Java programming language, print out the direct children of a given element in an HTML document.", "input": "<div id=\"container\">\n  <p>This is a paragraph.</p>\n  <ul>\n    <li>This is a list item.</li>\n    <li>This is a second list item.</li>\n  </ul>\n</div>", "output": "Element containerElement = document.getElementById(\"container\");\nNodeList children = containerElement.getChildNodes();\nfor (int i=0; i<children.getLength(); i++) {\n  Node child = children.item(i);\n  System.out.println(child.getNodeName());\n}", "category": "Python"}, {"instruction": "Create a JavaScript object called 'person' that contains the following properties: name, age, gender, and address.", "input": "", "output": "let person = {\nname: \"John Doe\",\nage: 32, \ngender: \"Male\", \naddress: \"123 Street Street, City, State\" \n};", "category": "Python"}, {"instruction": "Develop a program to find the smallest number in a list", "input": "list = [25, 67, 12, 8]", "output": "list = [25, 67, 12, 8]\n\ndef find_smallest(list):\n    smallest = list[0]\n    for number in list:\n        if number < smallest:\n            smallest = number\n    return smallest\n\nprint(find_smallest(list))", "category": "Python"}, {"instruction": "Create an algorithm to compute the sum of all the numbers in a list", "input": "list = [14, 37, 54, 20]", "output": "list = [14, 37, 54, 20]\n\ndef compute_sum(list):\n    total_sum = 0\n    for number in list:\n        total_sum += number\n    return total_sum\n\nprint(compute_sum(list))", "category": "Python"}, {"instruction": "Write a function to extract the substring between two given indices of a string", "input": "string = \"Hello World\", start_index = 2, end_index = 5", "output": "def extract_substring(string, start_index, end_index):\n    return string[start_index:end_index]\n\nstring = \"Hello World\"\nstart_index = 2\nend_index = 5\n\nprint(extract_substring(string, start_index, end_index))", "category": "Python"}, {"instruction": "Generate a program to filter a list of numbers, passing only the greater than a given number", "input": "list = [12, 24, 36, 45], 36", "output": "list = [12, 24, 36, 45]\ngiven_number = 36\n\ndef filter_list(list, given_number):\n    filtered_list = []\n    for number in list:\n        if number > given_number:\n            filtered_list.append(number)\n    return filtered_list\n\nprint(filter_list(list, given_number))", "category": "Python"}, {"instruction": "Define a function that takes an array of strings and combines the strings into a single string.", "input": "array = [\"Hello\", \"World\"]", "output": "def combine_strings(strings_array):\n    output_string = \"\"\n    for string in strings_array:\n        output_string += string\n    \n    return output_string\n\ncombine_strings(array)", "category": "Python"}, {"instruction": "Develop a program to count the number of items of a given list", "input": "list = [43, 87, 21, 65]", "output": "list = [43, 87, 21, 65]\n\ndef count_list_items(list):\n    count = 0\n    for item in list:\n        count += 1\n    return count\n\nprint(count_list_items(list))", "category": "Python"}, {"instruction": "Generate a random string of length n containing only lowercase letters.", "input": "", "output": "import random\nimport string\n\ndef random_string_generator(n):\n    return ''.join(random.choices(string.ascii_lowercase, k=n))\n\nrandom_string = random_string_generator(n)", "category": "Python"}, {"instruction": "Create a function that takes two numerical parameters and checks if they are equal.", "input": "", "output": "def is_equal(num1, num2):\n    if num1 == num2:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Create a class for a Counter object that will keep track of a total count, and increase and decrease the count when functions are called.", "input": "", "output": "class Counter:\n    def __init__(self):\n        self.count = 0\n\n    def increase_count(self):\n        self.count += 1\n\n    def decrease_count(self):\n        self.count -= 1", "category": "Python"}, {"instruction": "Compose a function that takes in two strings and produces an array of characters that are only in the first string.", "input": "stringA = \"abcdefg\"\nstringB = \"hijklmn\"", "output": "def to_array(strA, strB):\n    output = []\n    for char in strA:\n        if char not in strB:\n            output.append(char)\n    return output\n\nresult = to_array(stringA, stringB)\nprint(result)", "category": "Python"}, {"instruction": "Using random module, generate a random sequence of 8 numbers from range 1 to 8.", "input": "", "output": "import random\n\nrandom_sequence = random.sample(range(1, 9), 8)\nprint(random_sequence)", "category": "Python"}, {"instruction": "Given a list of words, sort them using a bubble sort algorithm.", "input": "['apple', 'banana', 'cherry', 'date']", "output": "['apple', 'banana', 'cherry', 'date']\n\ndef bubble_sort(words):\n    n = len(words)\n    for i in range(n): \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n            if words[j] > words[j+1]: \n                words[j], words[j+1] = words[j+1], words[j]\n    return words", "category": "Python"}, {"instruction": "Calculate the inverse of this matrix.", "input": "[[1, 0, 0],\n[2, 1, 0],\n[4, 4, 4]]", "output": "[[1.0, 0.0, 0.0],\n[-2.0, 1.0, 0.0],\n[-3.5, -2.0, 0.25]]", "category": "Python"}, {"instruction": "Create a basic program to demonstrate a conditional statement", "input": "", "output": "num = int(input(\"Please enter a number: \"))\n\nif (num % 2) == 0:\n   print(\"The number is even\")\nelse:\n   print(\"The number is odd\")", "category": "Python"}, {"instruction": "Create a function that recursively flattens an array of arbitrarily nested arrays.", "input": "array = [[1, [2, [3, [[4, 5], 6]]]], 7]", "output": "def flatten_list(l):\n  for el in l:\n    if isinstance(el, list):\n      yield from flatten_list(el)\n    else:\n      yield el", "category": "Python"}, {"instruction": "Write an HTML code for creating a table with two rows and two columns", "input": "", "output": "<table>\n    <tr>\n        <td>Row 1, Column 1</td>\n        <td>Row 1, Column 2</td>\n    </tr>\n    <tr>\n        <td>Row 2, Column 1</td>\n        <td>Row 2, Column 2</td>\n    </tr>\n</table>", "category": "Python"}, {"instruction": "Write a Python function for transforming all characters of a string to upper case.", "input": "string: 'Hello World!'", "output": "def toUpperCase(string):\n    return string.upper()\n\n# Output: HELLO WORLD!", "category": "Python"}, {"instruction": "Create a MySQL query to select records from a table, where the row ID is equal to 5.", "input": "", "output": "SELECT * FROM table_name WHERE id = 5;", "category": "Python"}, {"instruction": "Create a function that creates a random number in a given range.", "input": "", "output": "def random_number(n):\nreturn random.randint(1, n)", "category": "Python"}, {"instruction": "Create a RegEx pattern to match a text string with a pattern string.", "input": "", "output": "pattern = re.compile(r\"patternstring\")", "category": "Python"}, {"instruction": "Explain what is an algorithm.", "input": "", "output": "An algorithm is a set of steps or procedures used to solve a problem or accomplish a task. Algorithms are designed to perform an operation on a given set of inputs in order to obtain the desired output. Algorithms can be implemented in various ways, such as in pseudocode or in a programming language. Algorithms are commonly used for complex tasks such as image processing, data sorting, text processing, and AI applications.", "category": "Python"}, {"instruction": "Explain what is a neural network.", "input": "", "output": "A neural network is an artificial intelligence system made up of connected units which process information. Each unit is analogous to a neuron in the human brain, and in a neural network, information travels from the input nodes, through the hidden layers, to the output nodes. The neurons in each layer are connected to each other, and the strength of their connection is determined by weights that are specified in advance. When input data enters the neural network, it is processed through the layers and is ultimately used to generate a numerical output corresponding to the classified input.", "category": "Python"}, {"instruction": "Write a SQL query that will select all the records that match a given date.", "input": "Table T:\nColumns: [x, y, z, date]\nRows: [1, 2, 3, 4]", "output": "SELECT * from T WHERE date = 'YYYY-MM-DD';", "category": "Python"}, {"instruction": "Create a SQL query that will calculate the maximum value for a given column.", "input": "Table T: \nColumns: [A, B, C] \nRows: [1, 2, 3, 4]", "output": "SELECT MAX(A) FROM T;", "category": "Python"}, {"instruction": "Explain what is a median in statistics.", "input": "", "output": "The median is a statistical measure that is used to represent the middle value of a set of data points. It is calculated by arranging the given data points in ascending or descending order and taking the mean of the two middle values, if the set of data points contains an even number of values. If it contains an odd number of values, the median is simply the middle value. The median is not affected by outliers, making it a more robust measure of central tendency than the mean. It is a helpful measure when analyzing large datasets, as it can give a better representation of the data than a mean, which can be greatly influenced by outliers.", "category": "Python"}, {"instruction": "Design a Python script to extract the name, date of birth, and address from a given string.", "input": "John Smith; 10/03/1994; 9 Hall Street, Anytown", "output": "import re \n\npattern = re.compile(r'(?P<name>[\\w ]+); (?P<dob>[\\d/]+); (?P<addr>[\\w ]+[,][\\w ]+)')\nmatch = pattern.search('John Smith; 10/03/1994; 9 Hall Street, Anytown') \nname = match.group('name') \ndob = match.group('dob') \naddr = match.group('addr')", "category": "Python"}, {"instruction": "Create an Angular controller that adds two numbers.", "input": "", "output": "app.controller(\"addNumbersController\", function($scope) { \n $scope.total = 0; \n $scope.add = function() { \n $scope.total = $scope.number1 + $scope.number2; \n } \n});", "category": "Python"}, {"instruction": "Design a function in Java to take two numbers and return the smallest one.", "input": "", "output": "int min(int a, int b) \n{ \n    if (a < b) \n        return a; \n    else\n        return b; \n}", "category": "Python"}, {"instruction": "Create an HTML page that displays the contents of a given URL.", "input": "https://www.example.com", "output": "<html> \n <head> \n  <title>Loaded URL</title> \n </head> \n <body> \n  <iframe src=\"https://www.example.com\" width=\"100%\" height=\"100%\"></iframe> \n </body> \n</html>", "category": "Python"}, {"instruction": "Design a MySQL query to count the number of occurrences for each letter of the alphabet in a given string.", "input": "\"Hello world\"", "output": "SELECT \n COUNT(CASE WHEN x LIKE 'A%' THEN 1 END) as letterA, \n COUNT(CASE WHEN x LIKE 'B%' THEN 1 END) as letterB, \n ...\n COUNT(CASE WHEN x LIKE 'Y%' THEN 1 END) as letterY,\n COUNT(CASE WHEN x LIKE 'Z%' THEN 1 END) as letterZ\nFROM ( \n SELECT * \n FROM (SELECT * FROM STRING_SPLIT('Hello World','')) t1 \n) t2", "category": "Python"}, {"instruction": "Write a JavaScript function to validate the syntax of an IP address.", "input": "", "output": "function validateIP(ip) {\n const splitIP = ip.split('.');\n if (splitIP.length !== 4) {\n return false;\n }\n \n for (let i = 0; i < 4; i++) {\n let num = Number(splitIP[i]);\n if(num < 0 || num > 255 || isNaN(num)) {\n return false;\n }\n }\n \n return true;\n}", "category": "Python"}, {"instruction": "Create a function in SQL to return the average of all values in a column.", "input": "", "output": "SELECT AVG(column_name) \nFROM table_name;", "category": "Python"}, {"instruction": "Create a program in PHP to print a multiplication table from 1-9.", "input": "", "output": "<?php  \nfor ($i = 1; $i < 10; $i++)  \n{  \n    for ($j = 1; $j <= 10; $j++)  \n    {  \n        echo $i. \" x \". $j. \" = \". ($i*$j). \"<br/>\";  \n    }  \n    echo \"<br/>\";  \n}  \n?>", "category": "Python"}, {"instruction": "Write a C program to find the largest number from a set of 6 integer inputs.", "input": "int a = 7, b = 10, c = 12, d = 4, e = 9, f = 6", "output": "#include <stdio.h> \n\nint max(int a, int b, int c, int d, int e, int f) \n{ \n int max = a; \n \n if (b > max) \n  max = b; \n if (c > max) \n  max = c; \n if (d > max) \n  max = d; \n if (e > max) \n  max = e; \n if (f > max) \n  max = f; \n \n return max; \n} \n\n// Driver code \nint main() \n{ \n int a = 7, b = 10, c = 12, d = 4, e = 9, f = 6; \n printf(\"Maximum element is %d\", \n       max(a, b, c, d, e, f)); \n return 0; \n}", "category": "Python"}, {"instruction": "Create a web page with a table of 4 columns and a submit button to submit the table data.", "input": "", "output": "<html>\n <head></head>\n <body>\n  <form>\n   <table>\n    <thead>\n     <tr><th>Column 1</th><th>Column 2</th><th>Column 3</th><th>Column 4</th></tr>\n    </thead>\n    <tbody>\n     <!-- your content here -->\n    </tbody>\n   </table>\n   <input type=\"submit\" value=\"Submit Table Data\" />\n  </form>\n </body>\n</html>", "category": "Python"}, {"instruction": "Rewrite the given function without using the ternary expression.", "input": "def func(x):\n    return x if x > 0 else x + 10", "output": "def func(x):\n    if x > 0:\n        return x\n    else:\n        return x + 10", "category": "Python"}, {"instruction": "Create a for loop to iterate through a given collection and print out an index for each element.", "input": "[5, 10, 15, 20]", "output": "for i, element in enumerate(collection):\n    print(i, element)\n\n// Output\n0 5\n1 10\n2 15\n3 20", "category": "Python"}, {"instruction": "Given a string, replace every letter with its corresponding ASCII character code.", "input": "\"hello world\"", "output": "String newString = \"104 101 108 108 111 32 119 111 114 108 100\";", "category": "Python"}, {"instruction": "Compute the union of two sets A and B using algorithms.", "input": "<[2,4,5,6], [1,2,3,4]>", "output": "The union of sets A and B is [1,2,3,4,5,6].", "category": "Python"}, {"instruction": "Transform the string from all lowercase characters to all uppercase characters.", "input": "a string for example", "output": "string newString = originalString.toUpperCase();", "category": "Python"}, {"instruction": "Write an SQL query to calculate the sum of salaries from a table called 'employees'.", "input": "", "output": "SELECT SUM(salary) FROM employees;", "category": "Python"}, {"instruction": "Develop a natural language processing model to detect sarcasm in text.", "input": "", "output": "# This code is written in Python\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LogisticRegression\n\n# Load dataset \ndf = pd.read_csv('sarcasm_data.csv')\n\n# Vectorize text using CountVectorizer\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(df['text'])\ny = df['label']\n\n# Split into train and test dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=2)\n\n# Train model using Logistic Regression\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Evaluate model performance\nscore = model.score(X_test, y_test)\nprint(f'Model Accuracy: {score*100}%')", "category": "Python"}, {"instruction": "Write an Apache Spark code snippet to count the number of elements in an array of integers.", "input": "", "output": "# This code is written in Scala\n\nval array = Array(1, 2, 3, 4, 5)\n\nval count = array.count(_ => true)\n\nprintln(s\"The number of elements in the array is $count\")", "category": "Python"}, {"instruction": "Write a Python Class to store a telephone directory's details.", "input": "", "output": "class TelephoneDirectory:\n def __init__(self):\n self.contacts = {}\n\n def add(self, name, number):\n self.contacts[name] = number\n\n def find(self, name):\n return self.contacts[name]", "category": "Python"}, {"instruction": "Write a script in Node.js to log a message to the console.", "input": "", "output": "console.log('Hello World');", "category": "Python"}, {"instruction": "Write an HTML code snippet to display a blue heart symbol.", "input": "", "output": "<span style=\"color: blue; font-size: 2em;\">&#9829;</span>", "category": "Python"}, {"instruction": "Write a function in Python that takes two strings as input and returns a sorted version of the first string with all occurrences of the letters in the second string removed.", "input": "firstString = 'hello world'\nsecondString = 'lo'", "output": "def remove_occurrences(first_string, second_string):\n  original_string_list = list(first_string)\n  for char in second_string:\n    if char in original_string_list:\n      original_string_list.remove(char)\n  return ''.join(sorted(original_string_list))\n\n# Usage\nprint(remove_occurrences('hello world', 'lo')) # Output: dehwr", "category": "Python"}, {"instruction": "Write a Bash script for creating a directory in the current working directory.", "input": "", "output": "#!/bin/bash \n# Create a directory\nmkdir myDir", "category": "Python"}, {"instruction": "Write an SQL query to retrieve names and email addresses from a table called \"user_info\".", "input": "", "output": "SELECT name, email FROM user_info;", "category": "Python"}, {"instruction": "Create a program to check if a number lies between two other numbers.", "input": "Num1 = 25\nNum2 = 70\nNum3 = 40", "output": "def check_in_range(num1, num2, num3):\n    if (num1 < num3 and num3 < num2):\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Rearrange the characters of given string in the order of their frequency.", "input": "String = \"tree\"", "output": "def rearrange(string):\n    Frequency={}\n    newstr=''\n    for c in string:\n        if c not in Frequency:\n            Frequency[c] = 1\n        else:\n            Frequency[c] = Frequency[c]+1\n    for key,value in sorted(Frequency.items(), key=lambda x: x[1], reverse=True):\n        for i in range(value):\n            newstr = newstr+key\n    return newstr", "category": "Python"}, {"instruction": "Write a code snippet to format a date in \"DD/MM/YYYY\" format.", "input": "date = \"06-02-2021\"", "output": "newDate = date.split(\"-\")\nformattedDate = newDate[2] + \"/\" + newDate[1] + \"/\" + newDate[0]", "category": "Python"}, {"instruction": "Develop an AI model to classify emails with spam contents.", "input": "", "output": "# import necessary libraries in Python\nimport pandas as pd\nimport numpy as np \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# read data \ndf = pd.read_csv('emails.csv')\nX = df['text']\ny = df['label']\n\n# Vectorize emails using TF-IDF\nvectorizer = TfidfVectorizer()\nX_vec = vectorizer.fit_transform(X)\n\n# split dataset into training and test data \nX_train, X_test, y_train, y_test = train_test_split(X_vec, y, test_size=0.2, random_state=2)\n\n# train model using the training data\nclf = MultinomialNB()\nclf.fit(X_train, y_train)\n\n# evaluate performance on the test data\nscore = clf.score(X_test, y_test)\nprint(f'Model Accuracy: {score*100}%')", "category": "Python"}, {"instruction": "Create a Python class with two methods; one to add two numbers, and another to subtract two numbers.", "input": "", "output": "class Calculator:\n    def add(self, x, y):\n        return x + y\n\n    def subtract(self, x, y):\n        return x - y", "category": "Python"}, {"instruction": "Build a function that takes an array parameter and returns the sum of the squares of its elements.", "input": "[3, 4, 5]", "output": "54 (3^2 + 4^2 + 5^2 = 54)", "category": "Python"}, {"instruction": "Construct a function which will take the name of a month as a parameter and return the number of days in that month.", "input": "", "output": "function daysInMonth(month) {\n    switch (month) {\n        case \"January\":\n        case \"March\":\n        case \"May\":\n        case \"July\":\n        case \"August\":\n        case \"October\":\n        case \"December\":\n            return 31;\n        case \"April\":\n        case \"June\":\n        case \"September\":\n        case \"November\":\n            return 30;\n        case \"February\":\n            return 29;\n        default:\n            throw new Error('Invalid month');\n    }\n}", "category": "Python"}, {"instruction": "Sort a given list of objects(integers or strings) as fastest as you can.", "input": "[1, 13, 45, 11, 6, 27]", "output": "[1, 6, 11, 13, 27, 45]", "category": "Python"}, {"instruction": "Write a C# code to convert a given number to words.", "input": "563", "output": "public static string NumberToWords(int number)\n{\n    if (number == 0)\n        return \"Zero\";\n\n    int[] num = new int[4];\n    int first = 0;\n    int u, h, t;\n    System.Text.StringBuilder sb = new System.Text.StringBuilder();\n\n    if (number < 0)\n    {\n        sb.Append(\"Minus \");\n        number = -number;\n    }\n\n    string[] words0 = { \"\", \"One \", \"Two \", \"Three \", \"Four \", \"Five \", \"Six \", \"Seven \", \"Eight \", \"Nine \" };\n    string[] words1 = { \"Ten \", \"Eleven \", \"Twelve \", \"Thirteen \", \"Fourteen \", \"Fifteen \", \"Sixteen \", \"Seventeen \", \"Eighteen \", \"Nineteen \" };\n    string[] words2 = { \"Twenty \", \"Thirty \", \"Forty \", \"Fifty \", \"Sixty \", \"Seventy \", \"Eighty \", \"Ninety \" };\n    string[] words3 = { \"Thousand \", \"Lakh \", \"Crore \" };\n\n    num[0] = number % 1000; // units\n    num[1] = number / 1000;\n    num[2] = number / 100000;\n    num[1] = num[1] - 100 * num[2]; // thousands\n    num[3] = number / 10000000; // crores\n    num[2] = num[2] - 100 * num[3]; // lakhs\n\n    for (int i = 3; i > 0; i--)\n    {\n        if (num[i] != 0)\n        {\n            first = i;\n            break;\n        }\n    }\n    for (int i = first; i >= 0; i--)\n    {\n        if (num[i] == 0) continue;\n        u = num[i] % 10; // ones\n        t = num[i] / 10;\n        h = num[i] / 100; // hundreds\n        t = t - 10 * h; // tens\n        if (h > 0) sb.Append(words0[h] + \"Hundred \");\n        if (u > 0 || t > 0)\n        {\n            if (h > 0 || i < first) sb.Append(\"and \");\n            if (t == 0)\n                sb.Append(words0[u]);\n            else if (t == 1)\n                sb.Append(words1[u]);\n            else\n                sb.Append(words2[t - 2] + words0[u]);\n        }\n        if (i != 0) sb.Append(words3[i - 1]);\n    }\n    return sb.ToString().TrimEnd();\n}\n\nNumberToWords(563);\n\n// Output: Five Hundred Sixty Three", "category": "Python"}, {"instruction": "What are lambda expressions in Python?", "input": "", "output": "Lambda expressions in Python are anonymous functions that can take in arguments and return a value. They are commonly used for performing operations on collections of data, or for making code more concise.", "category": "Python"}, {"instruction": "Using the below array, create an object with key for individual item and value for the count of the item.", "input": "['Apple', 'Apple', 'Orange', 'Banana']", "output": "items = ['Apple', 'Apple', 'Orange', 'Banana']\n\ncount = {}\nfor item in items:\n    if item in count:\n        count[item] += 1\n    else:\n        count[item] = 1\n\nprint(count)", "category": "Python"}, {"instruction": "What is a Heap in data structure?", "input": "", "output": "A Heap is a specialized tree-based structure in data structures where the root node is compared with its children and arranged accordingly. Every node is either greater than or equal to or less than its children, according to a comparison key. Heaps are commonly used for Priority queues and efficient sorting algorithms.", "category": "Python"}, {"instruction": "Create a function in Python that prints out the numbers from 0 to the given parameter.", "input": "10", "output": "def printnumbers(n):\n    for i in range(n+1):\n        print(i)\n\nprintnumbers(10)", "category": "Python"}, {"instruction": "Create an SQL query to calculate the total sales per month.", "input": "", "output": "SELECT \n  MONTHNAME(date) as Month, \n  SUM(sales) as Total_Sales \nFROM sales_records \nGROUP BY MONTH(date)\nORDER BY MONTH(date);", "category": "Python"}, {"instruction": "How would you convert a given number in hexadecimal format to binary?", "input": "number = 3E", "output": "hex_to_binary = bin(int(number, 16)).replace(\"0b\", \"\")\nprint(hex_to_binary)", "category": "Python"}, {"instruction": "Create a Python script for removing all whitespace from a given string.", "input": "string = \" Hi There \"", "output": "no_whitespace = string.replace(\" \", \"\")\nprint(no_whitespace)", "category": "Python"}, {"instruction": "Compute the sum of an array using a JavaScript loop.", "input": "array = [7, 2, 5, 9]", "output": "let sum = 0;\n\nfor (let i = 0; i < array.length; i++) {\n  sum += array[i];\n}\n\nconsole.log(sum);", "category": "Python"}, {"instruction": "Which CSS style would you use to center align a <div> element?", "input": "", "output": "div {\n  margin: 0 auto;\n}", "category": "Python"}, {"instruction": "Develop a formula in JavaScript to calculate the area of a circle.", "input": "radius  = 10", "output": "const pi = 3.14;\n\nconst areaCircle = (radius) => {\n  return pi * (radius * radius);\n}\n\nconsole.log(areaCircle(radius));", "category": "Python"}, {"instruction": "Replicate the functionality below in Java.", "input": "def get_uppercase_chars(string):\n    '''Returns a list of uppercase characters present in the input string.'''\n    return [char for char in string if char.isupper()]", "output": "public List<Character> getUppercaseChars(String string){\n    List<Character> uppChars = new ArrayList<Character>();\n    for(char c : string.toCharArray()){\n        if(Character.isUpperCase(c)){\n            uppChars.add(c);\n        }\n    }\n    return uppChars;\n}", "category": "Python"}, {"instruction": "Given the following list of numbers, find the minimum value.", "input": "numbers = [2, 4, 9, 3, 8]", "output": "min_number = min(numbers)\nprint(f\"Minimum value is {min_number}\")", "category": "Python"}, {"instruction": "Create a function to calculate the value of \"e\" to the nth term.", "input": "term = 5", "output": "def calculate_e(term): \n    e = 0\n    for i in range(term + 1): \n        e += 1 / math.factorial(i) \n    return e", "category": "Python"}, {"instruction": "Identify which type of triangle the 3 sides of length a, b, and c form.", "input": "a = 4, b = 4, c = 6", "output": "The triangle is an isosceles triangle as two of its side are of equal length.", "category": "Python"}, {"instruction": "Write a JavaScript program to compute the sum of all the given values.", "input": "values = [1, 2, 3, 4, 5]", "output": "function sumValues(values) {\n    let sum = 0;\n    for (let i = 0; i < values.length; i++) {\n        sum += values[i] \n    }\n    return sum;\n}\n\nconsole.log(sumValues([1, 2, 3, 4, 5]));", "category": "Python"}, {"instruction": "Compute the centroid of given points using mathematical formulas.", "input": "points = [(2, 3), (4, 7), (6, 9)]", "output": "def calculate_centroid(points): \n    n = len(points) \n  \n    centroidX = sum(row[0] for row in points) / n\n    centroidY = sum(row[1] for row in points) / n\n     \n    return [centroidX, centroidY] \n  \npoints = [(2, 3), (4, 7), (6, 9)] \nprint(calculate_centroid(points))", "category": "Python"}, {"instruction": "List the constants and variables from the script.", "input": "def add_two_numbers(a, b):\n    result = a + b\n    return result", "output": "Constants: None\n\nVariables: a, b, result", "category": "Python"}, {"instruction": "Create a for loop that prints the multiples of 3 from 0 to 30.", "input": "", "output": "for (var i = 0; i <= 30; i++) {\n    if (i % 3 == 0) {\n        console.log(i);\n    }\n}", "category": "Python"}, {"instruction": "Construct another array containing the product of each corresponding elements from two given array.", "input": "Array A = [2, 4, 3] \nArray B = [10, 5, 6]", "output": "Array C = [20, 20, 18]", "category": "Python"}, {"instruction": "Create a nested loop that increments a variable from 0 to 5.", "input": "", "output": "for i in range(0, 5):\n    for j in range(0, 5):\n        var += 1", "category": "Python"}, {"instruction": "Construct a regex expression that will check if a email is valid.", "input": "", "output": "^[A-Za-z0-9\\.\\'\\+\\-\\_]+(\\@)[A-Za-z0-9.-]+([\\.][a-zA-Z]{2,4})+$", "category": "Python"}, {"instruction": "Build a function that takes in an array of integers and returns an average.", "input": "[5, 8, 6, 9]", "output": "7.5", "category": "Python"}, {"instruction": "Edit the code to print out the HTML code for a table with three columns.", "input": "", "output": "<table>\n<tr>\n <th>Column 1</th>\n <th>Column 2</th>\n <th>Column 3</th>\n</tr>\n<tr>\n <td>Row 1 Column 1</td>\n <td>Row 1 Column 2</td>\n <td>Row 1 Column 3</td>\n</tr>\n</table>", "category": "Python"}, {"instruction": "Create a program to find the most frequently used word in a given text.", "input": "Text: Machine learning is a subset of artificial intelligence and is a powerful tool in data science.", "output": "import collections \n  \n# function to get most frequently used word \ndef most_frequent(string): \n  \n    # split the string into list of words \n    split_it = string.split() \n      \n    # pass the split_it list to instance of Counter class. \n    Counter = collections.Counter(split_it) \n  \n    # most_common() produces k frequently encountered \n    # input values and their respective counts. \n    most_occur = Counter.most_common(1) \n  \n    return most_occur[0][0]  \n  \n#Driver function \ntext = \"Machine learning is a subset of artificial intelligence and is a powerful tool in data science.\"\nprint(most_frequent(text))", "category": "Python"}, {"instruction": "Write a function that checks if a given string contains a valid date.", "input": "", "output": "function isValidDate(dateString) {\n  var regEx = /^\\d{4}-\\d{2}-\\d{2}$/;\n  if(!dateString.match(regEx)) return false;  // Invalid format\n  var d = new Date(dateString);\n  if(Number.isNaN(d.getTime())) return false; // Invalid date\n  return d.toISOString().slice(0,10) === dateString;\n};", "category": "Python"}, {"instruction": "Create a program to filter out keywords from a given text.", "input": "Text: This is a text containing some keywords\nKeywords: [\"keywords\", \"text\"]", "output": "def filter_keywords(text, keywords):\n  words = text.split()\n  filtered_words = [word for word in words if word not in keywords]\n  return ' '.join(filtered_words)\n  \ntext = 'This is a text containing some keywords'\nkeywords = ['keywords', 'text']\n\nprint(filter_keywords(text, keywords))", "category": "Python"}, {"instruction": "Construct a binary search tree from the given array of integers.", "input": "[ 10, 5, 15, 1, 8, 12, 2 ]", "output": "class Node: \n    def __init__(self, data): \n        self.data = data  \n        self.left = None\n        self.right = None\n  \ndef insert(root,data): \n    if root is None: \n        return Node(data) \n    else: \n        if root.data > data: \n            root.left=insert(root.left,data) \n        else: \n            root.right=insert(root.right, data) \n        return root \n\nroot = None\nnodes = [10, 5, 15, 1, 8, 12, 2] \nfor data in nodes:\n    root = insert(root, data)", "category": "Python"}, {"instruction": "Explain what a constructor is in Java.", "input": "", "output": "A constructor in Java is a special type of method that is used to initialize an object when it is created. A constructor is invoked automatically when an instance of an object is created and is usually used to set initial values for the object\u2019s instance variables. Constructors can also be overloaded to accept different parameters.", "category": "Python"}, {"instruction": "Create an HTML page which contains a heading with the text \"Hello World\".", "input": "", "output": "<html>\n  <head>\n    <title>Hello World</title>\n  </head>\n  <body>\n    <h1>Hello World</h1>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Convert the binary input to its decimal value.", "input": "binary = \"1101\"", "output": "def binary_to_decimal(binary):\n    decimal = 0\n    for digit in binary:\n        decimal = decimal * 2 + int(digit)\n    return decimal\n\nprint(binary_to_decimal(\"1101\"))\n\n# Output:\n13", "category": "Python"}, {"instruction": "Generate 10 random numbers between 5 to 10.", "input": "", "output": "import random\n\n# Generate 10 random numbers between 5 and 10\nrandom_numbers = [random.randint(5, 10) for _ in range(10)]\n\nprint(\"The 10 random numbers are: \", random_numbers)", "category": "Python"}, {"instruction": "Implement the function with input parameters, described below.", "input": "Parameters: a, b (both of type int)", "output": "def add(a, b):\n    \"\"\"\n    Parameters: a, b (both of type int)\n    Returns: the sum of two input parameters, a+b (int)\n    \"\"\"\n    return a + b", "category": "Python"}, {"instruction": "Write an algorithm for adding two numbers.", "input": "", "output": "Step 1: Declare two variables a and b of type int.\nStep 2: Read the two numbers and store them in a and b.\nStep 3: Compute the sum of the two numbers and store it in a variable sum.\nStep 4: Print sum.", "category": "Python"}, {"instruction": "Create a function to parse the given HTML and return an array containing the text content of all the <p> tags.", "input": "html:\n<html>\n<head>\n  <title>Parsing HTML</title>\n</head>\n<body>\n  <h1>Parsing HTML</h1>\n  <p>This is the first paragraph.</p>\n  <p>This is the second paragraph.</p>\n</body>\n</html>", "output": "def get_p_tags(html):\n    soup = BeautifulSoup(html,\"html.parser\")\n    p_tags = soup.find_all('p')\n    content = []\n    for tag in p_tags:\n        content.append(tag.get_text())\n    return content\n\nhtml = \"\"\"\n<html>\n<head>\n  <title>Parsing HTML</title>\n</head>\n<body>\n  <h1>Parsing HTML</h1>\n  <p>This is the first paragraph.</p>\n  <p>This is the second paragraph.</p>\n</body>\n</html>\n\"\"\"\n\nprint(get_p_tags(html))", "category": "Python"}, {"instruction": "Write a SQL query to sort a table in descending order by its \"Date\" column.", "input": "", "output": "SELECT * FROM table_name ORDER BY Date DESC;", "category": "Python"}, {"instruction": "Given a list of numbers, calculate the median value.", "input": "[5,9,1,4,8,7]", "output": "The median value of the list is 6.", "category": "Python"}, {"instruction": "Create an HTML form to take user input with two fields.", "input": "", "output": "<form action=\"form-handler.php\" method=\"post\">\n    <label>Name: <input type=\"text\" name=\"name\"></label>\n    <label>Email: <input type=\"email\" name=\"email\"></label>\n    <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Append the item \"Banana\" to the list below:", "input": "fruits = [\"Apple\", \"Strawberry\", \"Pear\"]", "output": "fruits = [\"Apple\", \"Strawberry\", \"Pear\", \"Banana\"]", "category": "Python"}, {"instruction": "Create an algorithm that takes in an array of integers and returns true if two of the integers add up to a target number.", "input": "example_array = [10, 7, 8, 3, 5]\ntarget_num = 13", "output": "def two_sum_algorithm(arr, target): \n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] + arr[j] == target: \n                return True\n  \n    return False\n\ntwo_sum_algorithm(example_array, target_num)", "category": "Python"}, {"instruction": "Create a data structure suitable for storing a list of scores for a game.", "input": "", "output": "scores = []\n\n# Function to add a new score to the scores list\ndef add_score(score):\n    scores.append(score)\n\n# Function to display all the scores in the scores list\ndef display_scores():\n    for score in scores:\n        print(score)", "category": "Python"}, {"instruction": "Update the following code to be Python 3 compatible.", "input": "print \"Welcome to the Program.\"", "output": "print(\"Welcome to the Program.\")", "category": "Python"}, {"instruction": "Adapt the following Java program to print the smallest number from an array of numbers.", "input": "", "output": "public class Smallest_Number {\n    public static void main(String[] args) {\n        int arr[] = {10, 15, 5, 20};\n        int smallest = arr[0];\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] < smallest) {\n                smallest = arr[i];\n            }\n        }\n        System.out.println(smallest);\n    }\n}", "category": "Python"}, {"instruction": "Produce an R command that fits a linear regression model of the following form:  y ~ x1 + x2 + x3.", "input": "", "output": "fit <- lm(y ~ x1 + x2 + x3)", "category": "Python"}, {"instruction": "Edit the following HTML code so the paragraph text's color is red.", "input": "<p>This is a paragraph</p>", "output": "<p style=\"color:red;\">This is a paragraph</p>", "category": "Python"}, {"instruction": "In Python, write a program to remove all duplicates from a given list of integers.", "input": "", "output": "def remove_duplicates(arr):\n    result = [] \n    seen = set() \n    for item in arr:\n        if item not in seen:\n            result.append(item)\n            seen.add(item)\n    return result", "category": "Python"}, {"instruction": "Execute the following SQL query.", "input": "SELECT count(*)\nFROM employee\nWHERE name LIKE '%John%';", "output": "SELECT COUNT(*) \nFROM employee \nWHERE name LIKE '%John%';", "category": "Python"}, {"instruction": "Transform the following C code into Java code.", "input": "int array[100];\nint i, sum = 0;\nfor (i = 0; i < 100; i++)\n   sum += array[i];", "output": "int[] array = new int[100];\nint sum = 0;\nfor(int i = 0; i < array.length; i++){\n    sum += array[i];\n}", "category": "Python"}, {"instruction": "Describe a complete algorithm for sorting n integers.", "input": "", "output": "The algorithm for sorting n integers is a divide-and-conquer algorithm.\n\nThe algorithm works as follows:\n1. Select a pivot element from the array.\n2. Split the array into two sub-arrays based on the pivot element. \n3.  For each of the sub-arrays, use the same sorting algorithm to sort their contents. \n4. Once both sub-arrays are sorted, merge the two sub-arrays into one sorted array.", "category": "Python"}, {"instruction": "Write the code to create a class in Python named \"Person\".", "input": "", "output": "class Person:\n    def __init__(self, name, age=None):\n        self.name = name\n        self.age = age", "category": "Python"}, {"instruction": "Write a Java code snippet to take input from the user and print the result.", "input": "", "output": "Scanner input = new Scanner(System.in);\nint number = input.nextInt();\nSystem.out.println(number);", "category": "Python"}, {"instruction": "Create a Python script to find the greatest common divisor (GCD) of a pair of integers.", "input": "Number 1: 10\nNumber 2: 12", "output": "def findGCD(x, y): \n  \n    # This function implements the Euclidian algorithm \n    # to find GCD of two numbers \n    while(y): \n        x, y = y, x % y \n  \n    return x \n  \n# Driver program \ngcd = findGCD(10, 12) \nprint(gcd)", "category": "Python"}, {"instruction": "Identify the HTML tag for the bold text.", "input": "Text: This text should be bold", "output": "<b>This text should be bold</b>", "category": "Python"}, {"instruction": "Sort the following list using Python's built-in sorting functions.", "input": "unsorted_list = [5, 1, 6, 8, 2, 4]", "output": "unsorted_list.sort()\n# unsorted_list is now [1, 2, 4, 5, 6, 8]", "category": "Python"}, {"instruction": "Make a JavaScript fibonacci sequence generator that takes a given number from the user and prints out the first n elements of the fibonacci sequence.", "input": "", "output": "function fibonacci(n){\n  let arr = [0, 1];\n  for (let i = 2; i < n + 1; i++){\n    arr.push(arr[i - 2] + arr[i -1])\n  }\n  return arr.slice(0, n);\n}", "category": "Python"}, {"instruction": "Implement a SQL query to count the number of students who are from North America (NA)", "input": "", "output": "SELECT COUNT(*) AS NumberOfStudents\nFROM Students\nWHERE Region='NA'", "category": "Python"}, {"instruction": "Write some HTML+CSS to create a navigation bar for a website.", "input": "Example website navigation structure: Home, About, Contact, Products, Services", "output": "<nav>\n    <ul>\n      <li><a href=\"index.html\">Home</a></li>\n      <li><a href=\"about.html\">About</a></li>\n      <li><a href=\"contact.html\">Contact</a></li>\n      <li><a href=\"products.html\">Products</a></li>\n      <li><a href=\"services.html\">Services</a></li>\n    </ul>\n</nav>\n\n<style>\n   nav ul{\n      list-style-type: none;\n      margin: 0;\n      padding: 0;\n    }\n\n    nav ul li{\n      float: left;\n    }\n\n    nav ul li a {\n    display: block;\n    padding: 8px;\n    text-decoration: none;\n    }\n</style>", "category": "Python"}, {"instruction": "Write a SQL query to update the \"job\" column of the \"employees\" table to \"engineer\" for all rows with the \"department\" column value \"IT\".", "input": "", "output": "UPDATE employees\nSET job = 'engineer'\nWHERE department = 'IT';", "category": "Python"}, {"instruction": "Create a function in PHP to retrieve the contents of a given URL using the cURL library.", "input": "url = \"https://www.example.com\"", "output": "function getData($url) {\n   $ch = curl_init(); \n   curl_setopt($ch, CURLOPT_URL, $url); \n   curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); \n   $data = curl_exec ($ch); \n   curl_close($ch);\n   return $data;\n}\n\nprint (getData($url));", "category": "Python"}, {"instruction": "Create a function in Python to split a given string into a list of strings using a space as a delimiter.", "input": "string = \"This is a string to split\"", "output": "def split_string(string):\n    return string.split(\" \")\n\nprint(split_string(string))", "category": "Python"}, {"instruction": "Write a shell command to print out the environment variable $PATH.", "input": "", "output": "echo ${PATH}", "category": "Python"}, {"instruction": "Create a function in Python to remove all characters other than letters and numbers from a string.", "input": "string = \"This#%&string c&$o#th=esa#@ll cha*%$racter\"", "output": "import re\n\ndef remove_characters(string):\n    return re.sub('[^A-Za-z0-9]+', '', string)\n\nprint(remove_characters(string))", "category": "Python"}, {"instruction": "Create a SQL query to add a new column to a table called \"students\" which contains student id numbers and names.", "input": "", "output": "ALTER TABLE students \nADD COLUMN student_id INT;", "category": "Python"}, {"instruction": "Create a function in Python that takes a string as an input and returns a new string that is the reverse of the input string.", "input": "string = \"Reverse Me\"", "output": "def reverse_string(string):\n    return string[::-1]\n\nprint(reverse_string(string))", "category": "Python"}, {"instruction": "Write a for loop to iterate over an array of numbers and calculate their sum.", "input": "array=[1, 2, 3]", "output": "sum=0\nfor item in array:\n    sum+=item\n    \nprint(sum)", "category": "Python"}, {"instruction": "Write a function in Python that will take two integers as inputs and compute their average.", "input": "int1 = 10\nint2 = 15", "output": "def calculate_average(int1, int2):\n    return (int1 + int2) / 2\n\nprint(calculate_average(int1, int2))", "category": "Python"}, {"instruction": "Create a Python function which takes a dictionary and prints the contents of the dictionary in a human readable format.", "input": "", "output": "def printDictionary(dictionary):\n    for key in dictionary.keys():\n        print(key, \":\", dictionary[key])", "category": "Python"}, {"instruction": "Write a Java program for removing all white spaces from a given string.", "input": "", "output": "public class RemoveSpace {\n    public static String removeSpace(String str) {\n        return str.replaceAll(\"\\\\s\",\"\");\n    }   \n    public static void main (String[] args) {\n        String str = \"Hello World!\"; \n\n        str = removeSpace(str);\n\n        System.out.println(str); \n    } \n}", "category": "Python"}, {"instruction": "Create a JavaScript function that takes a string as an argument and reverses it.", "input": "", "output": "function reverseString(str) {\n  return str.split('').reverse().join(''); \n}", "category": "Python"}, {"instruction": "Write a script in Python to sort a list of words alphabetically.", "input": "", "output": "words = ['Apple','Banana','Cherry','Orange']\n\nwords.sort()\n\nprint(words)", "category": "Python"}, {"instruction": "Implement an algorithm in Python to find the GCD (Greatest Common Divisor) of two numbers", "input": "", "output": "def gcd(a, b): \n  \n   if (a == 0): \n       return b \n       \n   if (b == 0): \n       return a \n       \n   if (a == b): \n       return a \n       \n   if (a > b): \n       return gcd(a-b, b) \n      \n   return gcd(a, b-a)", "category": "Python"}, {"instruction": "Create a function in JavaScript which prints all prime numbers up to a given number.", "input": "", "output": "function isPrime(num) {\n    for (let i = 2; i < num; i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction printPrimes(num) {\n    console.log(\"The prime numbers are:\");\n    for (let i = 2; i <= num; i++) {\n        if (isPrime(i)) {\n            console.log(i);\n        }\n    }\n}", "category": "Python"}, {"instruction": "Create a Python function which takes a given string and replaces all its characters with the next consecutive character.", "input": "", "output": "def shift_string(string):\n  result = \"\"\n  for ch in string:\n    result += chr(ord(ch) + 1)\n  return result", "category": "Python"}, {"instruction": "Write a function that takes in a string of text and counts the number of times each letter appears in the string", "input": "text = \"The quick brown fox jumps over the lazy dog\"", "output": "def count_letters(text):\n    letter_count = {}\n    for character in text:\n        if character not in letter_count:\n            letter_count[character] = 1\n        else:\n            letter_count[character] += 1\n    return letter_count\n\nprint(count_letters(text))", "category": "Python"}, {"instruction": "Create a CSS style sheet to make the text on a page bold and the background yellow.", "input": "", "output": "body {\n    font-weight: bold;\n    background-color: yellow;\n}", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to open a new window with some given URL.", "input": "URL: https://www.test.com", "output": "window.open('https://www.test.com', '_blank');", "category": "Python"}, {"instruction": "Write a regular expression to detect any email address.", "input": "", "output": "\\S+@\\S+\\.\\S+", "category": "Python"}, {"instruction": "Create a class in Python to represent a book and include a method for getting the name of the book.", "input": "", "output": "class Book:\n    def __init__(self, name):\n        self.name = name\n\n    def get_name(self):\n        return self.name", "category": "Python"}, {"instruction": "Make a for loop in JavaScript that prints \"Hello\" 5 times.", "input": "", "output": "for (let i = 0; i < 5; i++) {\n    console.log('Hello');\n}", "category": "Python"}, {"instruction": "We have a list of integers, write a function in Python to find the second smallest element in the list.", "input": "[2, 4, 7, 10, 8]", "output": "def find_second_smallest(list_nums):\n    sorted_list = sorted(list_nums)\n    return sorted_list[1]\n\nfind_second_smallest([2, 4, 7, 10, 8])", "category": "Python"}, {"instruction": "Explain in your own words what is a pointer in C++.", "input": "", "output": "A pointer is a variable in C++ that stores the address of a variable. A pointer is used to directly access the memory location of a variable, allowing the programmer to directly manipulate the value stored in the memory location. A pointer is declared with the asterisk (*) operator and the type of the variable being pointed to.", "category": "Python"}, {"instruction": "How can we create a class in C++ to represent a point on a 2D plane?", "input": "", "output": "class Point {\n    int x;\n    int y;\npublic:\n    Point(int _x, int _y) : x(_x), y(_y)  {}\n};", "category": "Python"}, {"instruction": "Write a function in Python to calculate the sum of all even integers in a list.", "input": "[1, 2, 3, 4, 5]", "output": "def sum_even_ints(list_nums):\n    total_sum = 0\n    for num in list_nums:\n        if num % 2 == 0:\n            total_sum += num\n    return total_sum\n\nsum_even_ints([1, 2, 3, 4, 5])", "category": "Python"}, {"instruction": "Write a Python program to remove an empty tuple from a list of tuples.", "input": "list1 = [ (), ('a',), ('b', 'c'), ('d', 'e', 'f')]", "output": "list2 = [ t for t in list1 if t ]\nprint(list2)", "category": "Python"}, {"instruction": "Given a SQL table named 'products', write a query to find all products with names starting with 'T'.", "input": "Table Name: products\nAttributes: name", "output": "SELECT * \nFROM products \nWHERE name LIKE 'T%';", "category": "Python"}, {"instruction": "Write an HTML page to display a table of products at a retail store.", "input": "Table Name: products\nAttributes: id, name, price, description", "output": "<html>\n<head>\n    <title>Retail Store Products</title>\n</head>\n<body>\n    <h2>Retail Store Products</h2>\n    <table>\n        <tr>\n            <th>ID</th>\n            <th>Name</th>\n            <th>Price</th>\n            <th>Description</th>\n        </tr>\n        <tr>\n            <td>1</td>\n            <td>Product A</td>\n            <td>$23.99</td>\n            <td>A great product for everyday use.</td>\n        </tr>\n        <tr>\n            <td>2</td>\n            <td>Product B</td>\n            <td>$29.99</td>\n            <td>A must-have product.</td>\n        </tr>\n        <tr>\n            <td>3</td>\n            <td>Product C</td>\n            <td>$17.99</td>\n            <td>A great product for a low price.</td>\n        </tr>\n    </table>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a SQL query to find all customers who have purchased a product with a price greater than 1000.", "input": "Table Name: products\nAttributes: id, name, price\n\nTable Name: purchases\nAttributes: product_id, customer_id, date", "output": "SELECT p.customer_id \nFROM purchases AS p \nINNER JOIN products AS pr \n    ON p.product_id = pr.id\nWHERE pr.price > 1000;", "category": "Python"}, {"instruction": "Write a Java program to create a calculator using Switch statement.", "input": "", "output": "import java.util.Scanner;\n\npublic class Calculator {\n    public static void main(String[] args) { \n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"Please enter two numbers: \");\n        int firstNumber = sc.nextInt();\n        int secondNumber = sc.nextInt();\n\n        System.out.println(\"Please enter an operator (+, -, *, /): \");\n        char operator = sc.next().charAt(0);\n\n        switch (operator) {\n            case '+':\n                System.out.println(firstNumber + secondNumber);\n                break;\n\n            case '-':\n                System.out.println(firstNumber - secondNumber);\n                break;\n\n            case '*':\n                System.out.println(firstNumber * secondNumber);\n                break;\n\n            case '/':\n                System.out.println(firstNumber / secondNumber);\n                break;\n\n            default:\n                System.out.println(\"Invalid operator!\");\n                break;\n        }\n    sc.close();\n    }\n}", "category": "Python"}, {"instruction": "Write an SQL query to count the number of books of each genre.", "input": "Table Name: books\nAttributes: id, title, author, genre", "output": "SELECT genre, COUNT(*) AS \"Number Of Books\"\nFROM books\nGROUP BY genre;", "category": "Python"}, {"instruction": "Convert this Python statement into a list comprehension.", "input": "for item1 in list1:\n    for item2 in list2:\n        if item1 == item2:\n            result_list.append(item1)", "output": "result_list = [item1 for item1 in list1 for item2 in list2 if item1 == item2]", "category": "Python"}, {"instruction": "Use a switch statement to check if a number is between 1 and 10.", "input": "7", "output": "switch(number){\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n        //number is between 1 and 10\n        break;\n    default:\n        //number is not between 1 and 10\n        break;\n }", "category": "Python"}, {"instruction": "Write a MySQL query to update a table cell.", "input": "Update 'salary' value from 20000 to 21000 for employee to 'John' in 'employees' table.", "output": "UPDATE employees SET salary = 21000 WHERE name = 'John';", "category": "Python"}, {"instruction": "Create a switch statement in JavaScript to print different messages based on a given condition.", "input": "condition = \"Monday\"", "output": "switch (condition) {\n    case \"Monday\":\n        console.log(\"It's Monday, be ready for the work week!\");\n        break;\n    case \"Thursday\":\n        console.log(\"It's Thursday, only a few days left!\");\n        break;\n    case \"Friday\":\n        console.log(\"It's Friday, the weekend is here!\");\n        break;\n    default:\n        console.log(\"Enjoy your day!\");\n        break;\n}", "category": "Python"}, {"instruction": "What is the difference between pointer and reference variables in C++?", "input": "", "output": "In C++, a pointer is a variable which holds the memory address of another variable. This memory address can point to a local variable within the same scope, or a global variable. On the other hand, a reference is an alias name for a previously defined variable. When a reference is initialized with a variable, it acts just like a pointer but unlike pointers, references cannot be reseated to point to a different object. A reference always refers to the same memory address for the lifetime of the reference.", "category": "Python"}, {"instruction": "Write an R script to find all entries of a data frame where the 'Name column' equals 'John'.", "input": "", "output": "df[df$Name == \"John\", ]", "category": "Python"}, {"instruction": "Edit the following Python code to add a loop to generate a list of numbers from 1 to 10.", "input": "numbers = []", "output": "numbers = []\n\nfor i in range(1, 11):\n numbers.append(i)", "category": "Python"}, {"instruction": "You are given an array of integers and you need to find three numbers such that the sum of the three numbers is 0.", "input": "nums = [-40, 40, -20, 60, 10, -80]", "output": "// Use a brute-force approach to find the three numbers\nfor (let i = 0; i < nums.length; i++) {\n  for (let j = i+1; j < nums.length; j++) {\n    for (let k = j+1; k < nums.length; k++) {\n      if (nums[i] + nums[j] + nums[k] === 0) {\n        console.log(nums[i], nums[j], nums[k])\n      }\n    }\n  }\n}\n\n// Output\n-40, 40, -80", "category": "Python"}, {"instruction": "Create an Apache Spark program written in Scala that takes in an RDD and returns the same RDD multiplied by 2.", "input": "", "output": "val rdd = sc.parallelize(List(1,2,3,4,5))\n\nval newRDD = rdd.map(x => x*2)\n\nprint(newRDD.collect().mkString(\",\"))", "category": "Python"}, {"instruction": "Create a HTML page with a form containing two input boxes, one to enter a number and another to enter an operator (+, -, *, /).", "input": "", "output": "<html>\n<head>\n <title>Calculator Form</title>\n</head>\n<body>\n <form action=\"/calculate\" method=\"post\">\n   <input type=\"number\" name=\"num1\" placeholder=\"Enter a number\" required>\n   <input type=\"text\" name=\"operator\" placeholder=\"Enter an operator (+, -, *, /)\" required>\n   <input type=\"number\" name=\"num2\" placeholder=\"Enter a number\" required>\n   <input type=\"submit\" value=\"Calculate\">\n </form>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create a JavaScript program to find the minimum of two numbers.", "input": "", "output": "function min(num1, num2) {\n  if (num1 < num2) {\n    return num1;\n  }\n  else {\n    return num2;\n  }\n}", "category": "Python"}, {"instruction": "Write a query in MongoDB to select an item with a price greater than $10.", "input": "", "output": "db.items.find({\"price\": {$gt: 10}});", "category": "Python"}, {"instruction": "Design a class in Java to represent a person's contact information like name, phone number and email address.", "input": "", "output": "//class definition\npublic class Contact {\n  private String name;\n  private String phoneNumber;\n  private String email;\n\n  public Contact(String name, String phoneNumber, String email) {\n    this.name = name;\n    this.phoneNumber = phoneNumber;\n    this.email = email;\n  }\n  \n  //getters and setters\n  public String getName(){ \n      return name;\n  }\n  public void setName(String name){\n      this.name = name;\n  }\n  public String getPhoneNumber(){ \n      return phoneNumber;\n  }\n  public void setPhoneNumber(String phoneNumber){\n      this.phoneNumber = phoneNumber;\n  }\n  public String getEmail(){ \n      return email;\n  }\n  public void setEmail(String email){\n      this.email = email;\n  }\n}", "category": "Python"}, {"instruction": "Create an object-oriented program that calculates the cost of a given item including sales tax.", "input": "Item cost (without tax): $10\nInput tax rate: 10%", "output": "//class definition \nclass Item { \n  constructor(cost, taxRate) { \n    this.cost = cost;\n    this.taxRate = taxRate;\n  }\n  \n  //calculate the cost including sales tax\n  getCostWithTax() {\n    return this.cost * (1 + this.taxRate);\n  }\n  \n} \n\n//instantiate Item and calculate cost\nlet item = new Item(10, 0.1); \nlet costWithTax = item.getCostWithTax();\nconsole.log(costWithTax); //11", "category": "Python"}, {"instruction": "Read the given date string in the specified format and print out the day of the week.", "input": "Date String: 03/02/2020\nFormat: mm/dd/yyyy", "output": "Thursday", "category": "Python"}, {"instruction": "Modify the program to accept user input of two numbers, and show the result based on the operator provided.", "input": "def calculate(num1, num2):\n    result = num1 + num2\n    return result", "output": "def calculate(num1, num2, operator):\n    if (operator == '+'):\n        result = num1 + num2\n    elif (operator == '-'):\n        result = num1 - num2\n    elif (operator == '*'):\n        result = num1 * num2\n    elif (operator == '/'):\n        result = num1 / num2\n    else:\n        print(\"Invalid operator\")\n    return result", "category": "Python"}, {"instruction": "Create a CSS style which will center-align the text.", "input": "", "output": "text-align: center;", "category": "Python"}, {"instruction": "Edit the program to print \"Hello world!\" in the output.", "input": "def greet():\n    print(\"Good morning!\")", "output": "def greet():\n    print(\"Hello world!\")", "category": "Python"}, {"instruction": "Rewrite the following program using OOP concepts.", "input": "NUMBER_OF_ELEMENTS = 10\narr = [0] * NUMBER_OF_ELEMENTS\n\ndef set_element(index, value):\n    arr[index] = value", "output": "class Array():\n    def __init__(self, num_elements):\n        self.arr = [0] * num_elements\n\n    def set_element(self, index, value):\n        self.arr[index] = value", "category": "Python"}, {"instruction": "Write a shell script to find the longest string from an array of strings.", "input": "", "output": "#!/bin/bash\n\narr=(\"Hello\" \"This\" \"Is\" \"A\" \"Sample\" \"String\")\n\nlongest=${arr[0]}\n\nfor element in \"${arr[@]}\"; do\n    if [[ ${#longest} -lt ${#element} ]]; then\n        longest=\"$element\"\n    fi\ndone\necho $longest", "category": "Python"}, {"instruction": "Add proper type annotations to the following Python function.", "input": "def get_favorite_number(name):\n  return name + 10", "output": "def get_favorite_number(name: str) -> int:\n  return name + 10", "category": "Python"}, {"instruction": "Create a Bash script which prints out the environment variable $HOME.", "input": "", "output": "#!/bin/bash \necho $HOME", "category": "Python"}, {"instruction": "Write SQL code to remove duplicates from a database table.", "input": "Table name: Items\nColumns: ID, Name", "output": "DELETE FROM Items\nWHERE ID NOT IN (SELECT MIN(Id)\n\t\t\t\t FROM Items\n\t\t\t\t GROUP BY Name)", "category": "Python"}, {"instruction": "Write a Java method which will print the Fibonacci sequence based on a given number.", "input": "", "output": "public void fibonacciSeries(int number) \n    { \n        int prev = 0; \n        int current = 1; \n        System.out.print(\"Fibonacci Series of \"+number+\" numbers:\"); \n  \n        for (int i = 1; i <= number; i++) \n        { \n            System.out.print(prev+\" \"); \n            int sum = prev + current; \n            prev = current; \n            current = sum; \n        } \n    }", "category": "Python"}, {"instruction": "Create a function that calculates the area of a circle when provided with its radius.", "input": "radius = 5", "output": "def calculate_area(radius):\n    return 3.14 * radius * radius", "category": "Python"}, {"instruction": "Design a simple user authentication system with a login page and logout page.", "input": "", "output": "Create a separate directory containing HTML files for the login and logout pages. \nThe login page should contain a form with fields for the user to enter their username and password. \nOn successful validation, the user will be redirected to the home page. \nOn the logout page, provide a link to destroy the user session and log the user out of the system.", "category": "Python"}, {"instruction": "Write a PHP program to get a string from the user and output the reverse of that string.", "input": "string = \"Hello World\"", "output": "<?php\n$string = 'Hello World';\n$reverse = strrev($string);\necho $reverse;\n?>", "category": "Python"}, {"instruction": "Design a distributed system to store and retrieve large amounts of data.", "input": "", "output": "Design a distributed system utilizing multiple nodes. The system should include a shared storage system with data partitioned across nodes, a distributed hash table to store information about data locations and a replication system to provide fault tolerance.", "category": "Python"}, {"instruction": "Write a CSS rule to hide the first two rows of a table.", "input": "", "output": "tr:nth-child(-n+2) { \n  display: none; \n}", "category": "Python"}, {"instruction": "Split the given string by hyphen.", "input": "String: This-is-an-example", "output": "words = input_string.split(\"-\") \n# words is ['This', 'is', 'an', 'example']", "category": "Python"}, {"instruction": "What is a switch statement?", "input": "", "output": "A switch statement is a control flow statement used to execute different blocks of code depending on the value of a given expression. It provides an alternative to using multiple if-else statements.", "category": "Python"}, {"instruction": "Offer a solution to the following programming problem", "input": "Given a list of strings, return the longest string", "output": "def longest_string(string_list):\n    longest_string = \"\"\n    for s in string_list:\n        if len(s) > len(longest_string): \n            longest_string = s\n    return longest_string", "category": "Python"}, {"instruction": "Develop a regular expression to detect a valid e-mail address", "input": "", "output": "^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$", "category": "Python"}, {"instruction": "Edit the following line of code from C++ to include the use of the precedence operator", "input": "a + b * c;", "output": "a + (b * c);", "category": "Python"}, {"instruction": "Provide an example of a valid linked list in Java", "input": "", "output": "class LinkedList { \n    Node head;  \n  \n    class Node { \n        int data; \n        Node next; \n  \n        Node(int d) \n        { \n            data = d; \n            next = null; \n        } \n    } \n  \n    public void push(int new_data) \n    { \n        Node new_node = new Node(new_data); \n        new_node.next = head; \n        head = new_node; \n    } \n}", "category": "Python"}, {"instruction": "Write a while loop in Java to print all even numbers between 0 and 20", "input": "", "output": "int number = 0;\nwhile(number <= 20){\n    if(number % 2 == 0){\n        System.out.println(number);\n    }\n    number++;\n}", "category": "Python"}, {"instruction": "Name the Java abstract class used for user-defined exceptions", "input": "", "output": "The Java abstract class used for user-defined exceptions is called \"Throwable\".", "category": "Python"}, {"instruction": "Suggest a valid select statement to display the name and age of the youngest employee", "input": "", "output": "SELECT name, age\nFROM employee\nORDER BY age ASC\nLIMIT 1;", "category": "Python"}, {"instruction": "Create a function to calculate the sum of squares x^2 + y^2", "input": "", "output": "def sum_squares(x, y):\n    return x**2 + y**2", "category": "Python"}, {"instruction": "List the features of a matrix A", "input": "", "output": "The features of a matrix A include the number of rows and columns, the rank, the determinant, the trace, the eigenvalues, the eigenvectors, and the transpose.", "category": "Python"}, {"instruction": "Write a SQL query to list the names and salaries of the employees who work in the finance department", "input": "", "output": "SELECT name, salary \nFROM employee \nWHERE department = 'finance';", "category": "Python"}, {"instruction": "Develop a python program to search for a substring in a string.", "input": "String = \"This is a sample string\"\nSubstring = \"sample\"", "output": "def search_substring(string, substring):\n    start = 0\n    index = -1\n\n    while start < len(string):\n        i = string.find(substring, start)\n        if i == -1:\n            break\n        else:\n            index = i\n            start = i + 1\n\n    return index", "category": "Python"}, {"instruction": "Describe the function of a web server.", "input": "", "output": "A web server is a computer program or a device that provides functionality for clients such as web browsers in responding to requests for web resources, such as web pages and other content that are hosted on that server. It processes incoming HTTP requests and returns web resources in response to the clients.", "category": "Python"}, {"instruction": "Convert the given text into its HTML equivalent.", "input": "Text: This is important.", "output": "<p>This is important.</p>", "category": "Python"}, {"instruction": "Debug the following code to correct a logical error.", "input": "def sort_list(nums):\n    sorted_nums = []\n    for i in range(len(nums)):\n        print(max(nums))\n        sorted_nums.append(max(nums))\n        nums.remove(max(nums))\n    return sorted_nums", "output": "def sort_list(nums):\n    sorted_nums = []\n    for i in range(len(nums)):\n        max_num = max(nums)\n        sorted_nums.append(max_num)\n        nums.remove(max_num)\n    return sorted_nums", "category": "Python"}, {"instruction": "Enhance the given code to add a search function.", "input": "def display_list(list):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for item in list:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(item)", "output": "def display_list(list, search_term=None):\n    for item in list:\n        if search_term is None or search_term in item:\n            print(item)", "category": "Python"}, {"instruction": "You need to provide an efficient way to implement a stack.", "input": "", "output": "class Stack:\n    def __init__(self):\n        self.items = []\n    \n    def push(self,item):\n        self.items.append(item)\n    \n    def pop(self):\n        return self.items.pop()\n    \n    def isEmpty(self):\n        return (self.items == [])", "category": "Python"}, {"instruction": "Write a function that produces an array of Fibonacci numbers with n numbers.", "input": "", "output": "def fibonacci(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    elif n > 2:\n        fib_nums = [0, 1]\n        for i in range(2, n):\n            fib_nums.append(fib_nums[i-1] + fib_nums[i-2])\n        return fib_nums", "category": "Python"}, {"instruction": "Create a function that takes an array as input and returns true if all elements in the array are similarly oriented (i.e. either all positive or all negative).", "input": "[-2, -4, -7, -9]", "output": "def is_all_same_sign(arr):\n    is_same_sign = True\n    for i in range(len(arr)):\n        if i == 0:\n            sign = (arr[i] >= 0)\n        else:\n            if (arr[i] < 0) != sign:\n                is_same_sign = False\n    return is_same_sign", "category": "Python"}, {"instruction": "Create a function that produces input strings for a calculator.", "input": "", "output": "def create_input_string(nums, ops):\n    input_str = \"\"\n    \n    for i in range(len(nums)):\n        if i == 0:\n            input_str += str(nums[i])\n        else:\n            input_str += ops[i - 1] + str(nums[i])\n    \n    return input_str", "category": "Python"}, {"instruction": "Create a dictionary where the keys are the integers up to 10, and the values are the cubes of those same integers.", "input": "", "output": "def create_dict():\n    cube_dict = {}\n    for i in range(1,11):\n        cube_dict[i] = i**3\n    return cube_dict", "category": "Python"}, {"instruction": "Write a Python script that takes in a string and prints out the frequency distribution of the letters in the string.", "input": "apple", "output": "def frequency_distribution(string):\n    \n    # create a dictionary of frequencies    \n    freq_dict = {}\n    for i in string:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    \n    # print the result\n    for key, value in freq_dict.items():\n        print (key + ': ' + str(value))", "category": "Python"}, {"instruction": "Write an Objective-C program to check if two strings are anagrams", "input": "", "output": "- (BOOL) isAnagram:(NSString *)string1 with:(NSString *)string2 {\n\n  NSUInteger length1 = [string1 length];\n  NSUInteger length2 = [string2 length];\n  if (length1 != length2) return NO;\n\n  NSUInteger count[256] = { 0 };\n  unichar char1, char2;\n\n  for(int i=0; i<length1; i++) {\n    char1 = [string1 characterAtIndex:i];\n    char2 = [string2 characterAtIndex:i];\n    count[char1]++;\n    count[char2]--;\n  }\n\n  for (int i=0; i<256; i++) {\n    if (count[i] != 0) return NO;\n  }\n  return YES;\n}", "category": "Python"}, {"instruction": "Construct a SQL query to retrieve all records in a table whose salary is greater than 50,000.", "input": "", "output": "SELECT * FROM Employees WHERE salary > 50000;", "category": "Python"}, {"instruction": "Write a C program to find the root of a quadratic equation", "input": "", "output": "#include <stdio.h> \n#include <math.h> \n  \n// A utility function to calculate the discriminant \nfloat discriminant(float a, float b, float c) \n{ \n    return (b*b - 4*a*c); \n} \n  \n// Function to calculate the roots of Quadratic Equations \nvoid findRoots(float a, float b, float c) \n{ \n    float discriminant = discriminant(a, b, c); \n   \n    if (discriminant > 0) \n    { \n        float x1 = (-b + sqrt(discriminant)) / (2*a); \n        float x2 = (-b - sqrt(discriminant)) / (2*a); \n        printf(\"Roots are real and distinct.\\nx1 = %f, x2 = %f\", x1, x2); \n    } \n    else if (discriminant == 0) \n    { \n        float x = -b / (2*a); \n        printf(\"Roots are real and same.\\nx1 = x2 = %f\", x); \n    } \n    else\n    { \n        printf(\"Roots are complex.\\n\"); \n    } \n} \n  \n// Driver program \nint main() \n{ \n    float a = 3, b = 2, c = 1; \n    findRoots(a, b, c); \n    return 0; \n}", "category": "Python"}, {"instruction": "Create a dictionary of student records, where each key is an integer and \neach value is a set containing the student\u2019s name and age.", "input": "{1: ('John', 24), 2: ('Tom', 26), 3: ('Harry', 20)}", "output": "student_dict = {1: {'name': 'John', 'age': 24}, 2: {'name': 'Tom', 'age': 26}, \n                3: {'name': 'Harry', 'age': 20}}", "category": "Python"}, {"instruction": "Generate a program in JavaScript to find the longest common substring of two strings.", "input": "str1 = \"abcd\"\nstr2 = \"cdefg\"", "output": "function longestCommonSubstring(str1, str2) {\n    let max = 0;\n    let curr = 0;\n    let start = -1;\n    let ans = null;\n  \n    let m = str1.length;\n    let n = str2.length;\n\n    /* Build an array to search */\n    let arr = new Array(m);\n    for(let i = 0; i < m; i++) {\n      arr[i] = new Array(n);\n      arr[i].fill(0);\n    }\n  \n    /* Traverse the array and check if the two chars match */\n    for(let i = 0; i < m; i++) {\n      for(let j = 0; j < n; j++) {\n        if(str1[i] === str2[j]) {\n            arr[i][j] = (i === 0 || j === 0) ? 1 : (arr[i-1][j-1] + 1);\n\n            curr = arr[i][j];\n            if(curr > max) {\n              max = curr;\n              start = i - max + 1;\n            }\n        }\n      }\n    }\n  \n    return str1.substring(start, start + max);\n}\n\nans = longestCommonSubstring(str1, str2);\nconsole.log(ans); // ans will be \"cd\"", "category": "Python"}, {"instruction": "Construct a function in C that prints all positive numbers present in an array.", "input": "", "output": "void printPositiveNumbers(int arr[], int n) \n{ \n    for (int i = 0; i < n; i++) \n        if (arr[i] >= 0) \n            printf(\"%d \", arr[i]); \n}", "category": "Python"}, {"instruction": "Design an algorithm that can be used to identify if a given binary tree is a valid BST.", "input": "", "output": "def isValidBST(root): \n\t\n\t# Base Case \n\tif root is None: \n\t\treturn True\n\t\t\n\t# Check recursive if left is valid \n\tif not isValidBST(root.left): \n\t\treturn False\n\n\t# If root's value is smaller than left subtree, not valid \n\tif root.left is not None and root.data < root.left.data: \n\t\treturn False\n\n\t# Check recursive if right is valid \n\tif not isValidBST(root.right): \n\t\treturn False\n\n\t# If root's value is greater than right subtree, not valid \n\tif root.right is not None and root.data > root.right.data: \n\t\treturn False\n\n\treturn True", "category": "Python"}, {"instruction": "Design a solution for the Towers of Hanoi problem using Java.", "input": "", "output": "public class TowersOfHanoi { \n    public static void towersOfHanoi(int n, char from_rod, \n                              char to_rod, char aux_rod) \n    { \n        if (n == 1) { \n            System.out.println(\"Move disk 1 from rod \" +  from_rod + \" to rod \" + to_rod); \n            return; \n        } \n        towersOfHanoi(n - 1, from_rod, aux_rod, to_rod); \n        System.out.println(\"Move disk \" + n + \" from rod \" +  from_rod + \" to rod \" + to_rod); \n        towersOfHanoi(n - 1, aux_rod, to_rod, from_rod); \n    } \n  \n    //  Driver method \n    public static void main(String args[]) \n    { \n        // Number of disks \n        int n = 4; \n  \n        // A, B and C are names of rods \n        towersOfHanoi(n, 'A', 'C', 'B'); \n    } \n}", "category": "Python"}, {"instruction": "Design a web application that allows users to enter a text query and get results in an arranged format.", "input": "", "output": "Design a web application with a search bar and a structured view to display search results. The application should accept a text query from the user and use a search engine to retrieve relevant results. The application should also display the results in an organized format such as a table or a list.", "category": "Python"}, {"instruction": "Explain the use of regular expressions.", "input": "", "output": "Regular expressions (also known as regex or regexp) are a powerful tool for matching patterns of text. They are commonly used for validating and extracting information from data, as well as for transforming and manipulating text. Regular expression can also be used to efficiently search, edit, and manipulate text.", "category": "Python"}, {"instruction": "Write a R code to shuffle the elements of a given vector", "input": "", "output": "shuffle <- function(x) sample(x)", "category": "Python"}, {"instruction": "Create an array with the following elements: 1, 2, 3, 2, 1.", "input": "", "output": "[1, 2, 3, 2, 1]", "category": "Python"}, {"instruction": "Write an algorithm to find the maximum substring in the given string.", "input": "abcadefghi", "output": "def findMaxSubstring(string):\n    max_len = 0\n    max_substring = \"\"\n    for i in range(len(string)):\n        current_substring = []\n        for j in range(i, len(string)):\n            if string[j] not in current_substring:\n                current_substring.append(string[j])\n            else:\n                break\n        if len(current_substring) > max_len:\n            max_len = len(current_substring)\n            max_substring = ''.join(current_substring)\n    return max_substring", "category": "Python"}, {"instruction": "How can you print the current memory address of a pointer in C?", "input": "", "output": "printf(\"The current memory address of the pointer is %p\", pointer);", "category": "Python"}, {"instruction": "Write a Python program to check if a string starts with a letter 'A'.", "input": "str = \"I love apples\"", "output": "if str.startswith(\"A\"):\n  print(\"The string starts with 'A'.\")\nelse:\n  print(\"The string does not start with 'A'.\")", "category": "Python"}, {"instruction": "Write a SQL query to show all the students from the database 'students' with a first name starting with 'A'.", "input": "", "output": "SELECT * \nFROM students \nWHERE first_name LIKE 'A%'", "category": "Python"}, {"instruction": "Modify the following JavaScript code to make it return the absolute value of a given number.", "input": "function myFunc(n) {\n  return n;\n}", "output": "function myFunc(n) {\n  return Math.abs(n);\n}", "category": "Python"}, {"instruction": "Rewrite the following code snippet in Python to multiply an array of two numbers with each element in the array.", "input": "var numbers = [3, 5];\n\nfor (var i = 0; i < numbers.length; i++) {\n  numbers[i] = numbers[i] * 2;\n}", "output": "numbers = [3, 5]\n\nfor i in range(len(numbers)):\n  numbers[i] *= 2", "category": "Python"}, {"instruction": "Insert correction in the following HTML code", "input": "<html>\n <body>\n   <h1> This is a heading <h2>\n </body>\n</html>", "output": "<html>\n <body>\n   <h1> This is a heading </h1>\n </body>\n</html>", "category": "Python"}, {"instruction": "Please debug the following Java code to calculate the average grade of 4 students.", "input": "public class Main\n{\n    public static void main (String[] args)\n    {\n        int student1 = 77;\n        int student2 = 85;\n        int student3 = 90;\n        int student4 = 96;\n\n        int totalScore = 0;\n\n        totalScore += student1;\n        totalScore += student2;\n        totalScore += student3;\n        totalScore += student4;\n\n        double averageScore = totalScore / 4;\n\n        System.out.println(\"The average score is: \" + averageScore);\n    }\n}", "output": "public class Main\n{\n    public static void main (String[] args)\n    {\n        int student1 = 77;\n        int student2 = 85;\n        int student3 = 90;\n        int student4 = 96;\n\n        int totalScore = 0;\n\n        totalScore += student1;\n        totalScore += student2;\n        totalScore += student3;\n        totalScore += student4;\n\n        double averageScore = totalScore / 4.0;\n\n        System.out.println(\"The average score is: \" + averageScore);\n    }\n}", "category": "Python"}, {"instruction": "Consider the following code and identify the bug", "input": "array = [1, 2, 3, 4]\n\ni = 0\nwhile i < array.length:\n\tprint(array[i]\n\ti++", "output": "array = [1, 2, 3, 4]\n\ni = 0\nwhile i < array.length:\n\tprint(array[i])\n\ti++\n\n// The bug is that the parenthesis after print(array[i] is missing. It should be print(array[i]) instead.", "category": "Python"}, {"instruction": "Write a code to list out the unique numbers in an array", "input": "arr = [1, 2, 1, 1, 3, 4, 4]", "output": "let arr = [1, 2, 1, 1, 3, 4, 4];\nlet unique_nums = [];\n\nfor (let i = 0; i < arr.length; i++) {\n  if (!unique_nums.includes(arr[i])) {\n    unique_nums.push(arr[i]);\n  }\n}\n\nconsole.log(unique_nums);", "category": "Python"}, {"instruction": "Generate a SQL query to select the name, age and salary of the employees in the table", "input": "", "output": "SELECT name, age, salary FROM Employees;", "category": "Python"}, {"instruction": "Describe the difference between static and dynamic programming", "input": "", "output": "Static programming is when all of the instructions to perform a task are written out before the program is executed. In static programming, the order of instructions and the number of instructions does not change during execution. Dynamic programming is when the instructions and number or order of instructions can change at runtime. The instructions and order of instructions may also depend on inputs or external conditions. Dynamic programming is mainly used in optimization problems to reduce the number of calculations needed for a solution.", "category": "Python"}, {"instruction": "Explain the differences between the sorting algorithms Insertion Sort and Bubble Sort", "input": "", "output": "Insertion sort and bubble sort are two of the most common sorting algorithms. Insertion sort is based on iterating and swapping through a list to find the right location for each element. Each element is compared to the previous element and swapped if it is out of order. Bubble sort is based on comparing each pair of adjacent elements and swapping them if they are out of order. Insertion sort has a time complexity of O(n^2) in average and worst-case scenarios, while bubble sort has a time complexity of O(n^2) in both. Bubble sort requires fewer comparison compared to insertion sort, however insertion sort requires fewer swaps. Therefore, insertion sort is usually more efficient when sorting a partially sorted list.", "category": "Python"}, {"instruction": "Write a JavaScript snippet to make all the <div> elements in a webpage pink in color.", "input": "", "output": "const divs = document.querySelectorAll('div');\ndivs.forEach(div => {\n    div.style.backgroundColor = 'pink';\n})", "category": "Python"}, {"instruction": "Write a PHP code for sending an email to the current logged in user.", "input": "user email: 'xyz@example.com'", "output": "$to = 'xyz@example.com';\n$subject = 'Subject of email';\n$message = 'Message body of email';\n$headers =  'From: sender@example.com' . \"\\r\\n\" .\n            'Reply-To: sender@example.com' . \"\\r\\n\" .\n            'X-Mailer: PHP/' . phpversion();\n \nmail($to, $subject, $message, $headers);", "category": "Python"}, {"instruction": "Write a CSS code for making all <h1> headings red and bold.", "input": "", "output": "h1 { \n    color: red; \n    font-weight: bold;\n }", "category": "Python"}, {"instruction": "Write a HTML code for creating a dropdown list with 3 list items.", "input": "", "output": "<select>\n    <option>Item 1</option>\n    <option>Item 2</option>\n    <option>Item 3</option>\n</select>", "category": "Python"}, {"instruction": "Construct an array of 10 random numbers using JavaScript.", "input": "", "output": "let randomArray = [];\n\nfor (let i = 0; i < 10; i++) {\n  randomArray.push(Math.floor(Math.random() * 100));\n}", "category": "Python"}, {"instruction": "Explain the following piece of JavaScript code.", "input": "let arr1 = [1,2,3,4];\nlet arr2 = [...arr1];", "output": "This code creates a new array, arr2, which contains the same elements as the original array, arr1. The spread operator (...) is used to unpack the elements of arr1, and copy them into the newly created arr2.", "category": "Python"}, {"instruction": "Format the following JSON string.", "input": "{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}", "output": "{\n  \"name\": \"John\",\n  \"age\": 30,\n  \"city\": \"New York\"\n}", "category": "Python"}, {"instruction": "Use CSS to design a button for a website.", "input": "", "output": ".button {\n  background-color: #4CAF50;\n  border: none;\n  color: white;\n  padding: 15px 32px;\n  text-align: center;\n  text-decoration: none;\n  font-size: 16px;\n  border-radius: 5px;\n  float: right;\n  display: inline-block;\n}", "category": "Python"}, {"instruction": "How can you add a comment in your JavaScript code that only displays when debug mode is on?", "input": "", "output": "// Add this comment for debug mode\nif (debugMode === true) {\n   console.log('This comment will only display in debug mode.');\n}", "category": "Python"}, {"instruction": "Use an SQL query to count the number of different job roles in the employee table.", "input": "", "output": "SELECT COUNT(DISTINCT job_role) FROM employee;", "category": "Python"}, {"instruction": "Create an SQL query to list all the employees' names and departments where the department is \"Sales\".", "input": "", "output": "SELECT name, department FROM employees WHERE department='Sales';", "category": "Python"}, {"instruction": "With given input string, create a program that returns a new string with the first character capitalized.", "input": "hello world", "output": "def capitalize(text):\n    return text[0].upper() + text[1:]", "category": "Python"}, {"instruction": "Write a function to convert an RGB color to HEX.", "input": "", "output": "def rgb_to_hex(red, green, blue):\n    return '#%02x%02x%02x' % (red, green, blue)", "category": "Python"}, {"instruction": "Write a function which checks if a number is a prime number.", "input": "", "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Implement a method that verifies whether an array of numbers is in increasing order.", "input": "arr = [2, 3, 5, 10, 15]", "output": "def is_increasing_order(arr):\n    for i in range(len(arr)-1):\n        if arr[i+1] <= arr[i]:\n            return False\n    return True", "category": "Python"}, {"instruction": "Construct a function to check whether given numbers are prime or not in Java.", "input": "", "output": "public static boolean isPrime(int num) {\n    if (num < 2) {\n        return false;\n    }\n    \n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    \n    return true;\n}", "category": "Python"}, {"instruction": "How do you sort an array of integers in ascending and descending order?", "input": "", "output": "The easiest way to sort an array of integers in ascending order is to use the built-in sorting function in the programming language of your choice. For example, in Python, the sorted() function can be used. Similarly, to sort an array of integers in descending order, you can use the sorted() function with the reverse argument set to True.", "category": "Python"}, {"instruction": "What kind of data structure is most suitable for storing a dictionary?", "input": "", "output": "In most cases, a hash table is the most suitable data structure for storing a dictionary. It is a data structure that maps key/value pairs, allowing for fast access to the data.", "category": "Python"}, {"instruction": "Create a function which adds two strings together.", "input": "", "output": "def add_strings(s1, s2):\n    return s1 + s2", "category": "Python"}, {"instruction": "Is it possible to create a copy of a multi-dimensional array in Python?", "input": "", "output": "Yes, it is possible to create a copy of a multi-dimensional array in Python using the copy or deepcopy methods from the copy module. These methods return a new object that is a shallow or deep copy of an array respectively.", "category": "Python"}, {"instruction": "Implement the function compute_sum() that takes an array of integers and return their sum.", "input": "arr = [1, 5, 7, -2, 3]", "output": "def compute_sum(arr):\n    result = 0\n    for num in arr:\n        result += num\n    return result", "category": "Python"}, {"instruction": "Use Python to design a function that concatenates two given strings.", "input": "\"Hello\" and \"World\"", "output": "def concatStrings(a, b): \n\treturn a + \" \" + b \n \nstring1 = \"Hello\"\nstring2 = \"World\"\n \nprint(concatStrings(string1, string2)) # Output: Hello World", "category": "Python"}, {"instruction": "Design a HTML form to accept user details (Name, age, address, etc).", "input": "", "output": "<form action=\"register.php\" id=\"form\" method=\"post\">\n  <label for=\"name\">Name:</label><br>\n  <input type=\"text\" name=\"name\"><br>\n    \n  <label for=\"age\">Age:</label><br>\n  <input type=\"number\" name=\"age\"><br>\n  \n  <label for=\"address\">Address:</label><br>\n  <input type=\"text\" name=\"address\"><br>\n  \n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Write an SQL query to select the departments with their corresponding average salary.", "input": "", "output": "SELECT department, AVG(salary) \nFROM employees \nGROUP BY department;", "category": "Python"}, {"instruction": "Write a code that finds the most frequent element in a list.", "input": "data = [1, 2, 3, 2, 3, 2, 1, 2, 3]", "output": "def find_most_frequent(data):\n    counts = {}\n    for item in data:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n    most_frequent_item = max(counts, key=counts.get)\n    return most_frequent_item", "category": "Python"}, {"instruction": "Create a class for a bank account and include the following functions: deposit() and withdraw().", "input": "", "output": "class BankAccount:\n    def __init__(self, balance):\n        self.balance = balance\n    \n    def deposit(self, amount):\n        self.balance += amount\n    \n    def withdraw(self, amount):\n        self.balance -= amount", "category": "Python"}, {"instruction": "Suggest an appropriate value for the following variable.", "input": "number", "output": "8", "category": "Python"}, {"instruction": "Output all the elements in an array where the last character of the element is 's'.", "input": "['apple', 'cat', 'dog', 'elephants']", "output": "['elephants']", "category": "Python"}, {"instruction": "Create an object of the following data structure.", "input": "data = {\n    'animal': {\n        'type': 'dog',\n        'name': 'Lucky',\n        'age': 5\n    }\n}", "output": "animal = {\n    'type': 'dog',\n    'name': 'Lucky',\n    'age': 5\n}", "category": "Python"}, {"instruction": "Given a list of numbers, construct a function that returns the highest and the lowest numbers.", "input": "numbers = [3, 10, 2, 8, 5]", "output": "def get_min_max(numbers):\n    # Set min and max to first number\n    lowest = numbers[0]\n    highest = numbers[0]\n    # Iterate through each number \n    for num in numbers:\n        if num < lowest:\n            lowest = num\n        if num > highest:\n            highest = num\n    # Return min and max in a tuple\n    return (lowest, highest)\n\nmin_max_nums = get_min_max([3, 10, 2, 8, 5])\nprint(min_max_nums)", "category": "Python"}, {"instruction": "Create a function that given a string of words, counts the frequency of each word.", "input": "word_string = \"I am learning a lot of new things!\"", "output": "def count_word_frequencies(word_string):\n    # Split string into separate words\n    words = word_string.split()\n    # Initialize dictionary for word frequencies\n    word_freqs = {}\n    # Iterate through each word\n    for word in words:\n        if word in word_freqs:\n            # Increment count if word already in dictionary\n            word_freqs[word] += 1\n        else:\n            # Add word if first time it appears\n            word_freqs[word] = 1\n\n    return word_freqs\n\nword_frequencies = count_word_frequencies(\"I am learning a lot of new things!\")\nprint(word_frequencies)", "category": "Python"}, {"instruction": "What is the Pythonic way to combine two dictionaries key-value pairs and store it in a new dictionary?", "input": "", "output": "combined_dict = {**dict_1, **dict_2}", "category": "Python"}, {"instruction": "Create a dictionary called \"contact\" which contains three key-value pairs.", "input": "", "output": "contact = {\n  'name': 'John',\n  'email': 'john@example.com',\n  'phone_number': '123-456-7890'\n}", "category": "Python"}, {"instruction": "Calculate the remainder when the following number is divided by 4:", "input": "50", "output": "remainder = 50 % 4\nprint('Remainder: {}'.format(remainder))", "category": "Python"}, {"instruction": "Write code to print the following data structure in an easily readable format.", "input": "data = {\n  \"name\": \"John Smith\",\n  \"age\": 35,\n  \"languages\": [\"Python\", \"JavaScript\", \"SQL\"]\n}", "output": "print('Name: {}'.format(data['name']))\nprint('Age: {}'.format(data['age']))\nprint('Languages: {}'.format(', '.join(data['languages'])))", "category": "Python"}, {"instruction": "Write a function that given a list of strings, filters out empty strings.", "input": "string_list = [\"Hello\", \"\", \"Bye\", \"\", \"See you!\"]", "output": "def filter_empty_strings(string_list):\n    return [string for string in string_list if string]", "category": "Python"}, {"instruction": "Develop a script to create a new folder in the specified directory.", "input": "Directory = \"my_folder\"", "output": "import os\n\ndef create_folder(folder_name):\n    try:\n        if not os.path.exists(folder_name):\n            os.makedirs(folder_name)\n    except OSError:\n        print(\"Error creating directory\")\n        \ncreate_folder(\"my_folder\")", "category": "Python"}, {"instruction": "Write a code to display the current directory path in the terminal.", "input": "", "output": "import os\n\ncurrdir = os.getcwd()\nprint(currdir)", "category": "Python"}, {"instruction": "Create a function to generate a random string with the given length.", "input": "Length = 8", "output": "import string\nimport random\n\ndef generate_random_string(length):\n    char_list = \"\".join(random.sample(string.ascii_letters, length))\n    return char_list", "category": "Python"}, {"instruction": "Write a code snippet to print all the items in a list using a for loop.", "input": "List = [\"apple\",\"banana\",\"orange\"]", "output": "for item in list:\n    print(item)", "category": "Python"}, {"instruction": "Create a function that prints out an ASCII art of a unicorn.", "input": "", "output": "public void printUnicorn() {\n    System.out.println(\"                                     ,/ \\\\\");\n    System.out.println(\"                                    //~~~\\\\\\\\\");\n    System.out.println(\"                                   (./   \\\\\\\\~-_\");\n    System.out.println(\"                                 _/        \\\\_/\\\\\\\\\");\n    System.out.println(\"                               /~            | \\\\\\\\\\\\_\");\n    System.out.println(\"                              (O         O   //// \\\\\\\\)\");\n    System.out.println(\"                              |           O/////   \\\\\\\\\");\n    System.out.println(\"                              |           |////    \\\\\\\\\");\n    System.out.println(\"                              |           |_/      \\\\\\\\\");\n    System.out.println(\"                              |            \\\\\\\\       \\\\\\\\_\");\n    System.out.println(\"                               \\\\            \\\\\\\\\\\\      \\\\\\\\\");\n    System.out.println(\"                                \\\\____________\\\\\\\\|     |\");\n    System.out.println(\"                                 \\\\            /      |\");\n    System.out.println(\"                                  \\\\__________/   _--'\");\n    System.out.println(\"                                   |||    |||  |--'\");\n    System.out.println(\"                              _--'|||||||||||`-\\\\\");\n    System.out.println(\"                            __\\\\   __________    \\\\\\\\\");\n    System.out.println(\"                           /  \\\\~~        ~~//   /\");\n    System.out.println(\"                          /  |             |   |\");\n    System.out.println(\"                         /   |             |_--'\");\n    System.out.println(\"                         |___\\\\______________/\");\n}", "category": "Python"}, {"instruction": "Write a function that calculates the average of all the numbers in a given array.", "input": "arr = [2, 6, 21, 14, 8]", "output": "public double calculateAverage(int[] arr) {\n    double sum = 0;\n    for (int i : arr) {\n        sum += i;\n    }\n    return sum/arr.length;\n}", "category": "Python"}, {"instruction": "Make a method that takes a given list and shuffles it.", "input": "arr = [1, 2, 3, 4, 5, 6]", "output": "public List<Integer> shuffle(List<Integer> list) {\n    Collections.shuffle(list);\n    return list;\n}", "category": "Python"}, {"instruction": "Write a function that given a positive number, returns the sum of all positive numbers from 1 to the given number.", "input": "number = 10", "output": "def sum_numbers(number):\n    # Initialize sum\n    total = 0\n    # Iterate through 1 to number\n    for i in range(1, number + 1):\n        total += i\n    return total\n\nsum_result = sum_numbers(10)\nprint('Total sum: {}'.format(sum_result))", "category": "Python"}, {"instruction": "Suggest a way to loop through the following data structure and print the value of the \"name\" property.", "input": "data = [\n    {\n        'name': 'John',\n        'age': 30\n    },\n    {\n        'name': 'Jane',\n        'age': 24\n    }\n]", "output": "for person in data:\n    print(person['name'])", "category": "Python"}, {"instruction": "Append the following list to an existing list.", "input": "listA = [1, 2, 3] \nlistB = [4, 5, 6]", "output": "listA.extend(listB)", "category": "Python"}, {"instruction": "Find the index for the following string \"Hello\".", "input": "string = \"Hello World!\"", "output": "index = string.index('Hello')\nprint('Index: {}'.format(index))", "category": "Python"}, {"instruction": "Create a database table called \"Users\" with 4 columns \"Name\", \"Age\", \"Address\" and \"PhoneNumber\".", "input": "", "output": "CREATE TABLE Users (\n  Name VARCHAR(80), \n  Age INT, \n  Address VARCHAR(120),\n  PhoneNumber VARCHAR(20) \n);", "category": "Python"}, {"instruction": "Write a JavaScript function that converts a string to title case.", "input": "string = \"This is a sample sentence.\"", "output": "function titleCase(string) {\n return string\n  .toLowerCase()\n  .split(' ')\n  .map(word => word.replace(word[0], word[0].toUpperCase()))\n  .join(' ');\n}", "category": "Python"}, {"instruction": "Using JavaScript create an object named \"person\", and add a property named \"name\" with the string value of \"John\".", "input": "", "output": "let person = {\n  name: \"John\"\n};", "category": "Python"}, {"instruction": "Using the list of numbers, create a filter in Python that removes all odd numbers from the list.", "input": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "filtered_list = list(filter(lambda x: x % 2 == 0, numbers))", "category": "Python"}, {"instruction": "Create a type alias for a function pointer in C.", "input": "", "output": "typedef int (*func_ptr)(int, int);", "category": "Python"}, {"instruction": "Write an HTML text input field with an ID of \"name\".", "input": "", "output": "<input type=\"text\" id=\"name\" />", "category": "Python"}, {"instruction": "Create a class called Person with two variables, name and age, and two methods, getName() and setAge().", "input": "", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n \n    def getName(self):\n        return self.name\n \n    def setAge(self, age):\n        self.age = age", "category": "Python"}, {"instruction": "Change all the characters in a given string to uppercase.", "input": "str = 'Hello World!'", "output": "'HELLO WORLD!'", "category": "Python"}, {"instruction": "Output the command line argument received by a Python function.", "input": "", "output": "import sys\n\ndef get_command_line_arg():\n    print(sys.argv[1])", "category": "Python"}, {"instruction": "Describe the different data types available in Python.", "input": "", "output": "The different data types available in Python include strings, integers, floats, tuples, lists, dictionaries, sets, booleans, and None.", "category": "Python"}, {"instruction": "What is the difference between a mutable and an immutable object?", "input": "", "output": "A mutable object is an object which can be changed after it is created. Examples of mutable objects include lists, dictionaries, and sets. An immutable object is an object which cannot be changed after it is created. Examples of immutable objects include integers, floats, strings, and tuples.", "category": "Python"}, {"instruction": "Change the second element of a tuple.", "input": "my_tuple = (1,2,3)", "output": "my_tuple = (1, 2, 5)", "category": "Python"}, {"instruction": "Define a function to calculate the median of a given array of numbers.", "input": "", "output": "def median(numbers):\n    sorted_numbers = sorted(numbers)\n\n    if len(numbers) % 2 == 1:\n        return sorted_numbers[len(numbers)//2]\n    else:\n        middle1 = sorted_numbers[len(numbers)//2]\n        middle2 = sorted_numbers[len(numbers)//2 - 1]\n        return (middle1 + middle2) / 2", "category": "Python"}, {"instruction": "What are the different ways to loop through a list in Python?", "input": "", "output": "The different ways of looping through a list in Python are the for loop, the while loop, the list comprehension, and the map() function.", "category": "Python"}, {"instruction": "Add the two given integer variables using a Python script.", "input": "a = 5\nb = 10", "output": "sum = a + b\nprint(sum)", "category": "Python"}, {"instruction": "Given a string of words, what is the most efficient way to replace the word \"a\" with \"the\"?", "input": "word_string = \"I am learning a lot of new things!\"", "output": "# Using the replace method\nnew_string = word_string.replace('a', 'the')\nprint(new_string)", "category": "Python"}, {"instruction": "Define a callback in JavaScript to be used with the onclick event.", "input": "", "output": "function callbackFunction() {\n    // logic to be implemented when the button is clicked\n}\n\n// Set the callback function\nbutton.onclick = callbackFunction;", "category": "Python"}, {"instruction": "Write a class constructor for a Unicorn class with name, color, and age as parameters.", "input": "", "output": "class Unicorn:\n    def __init__(self, name, color, age):\n        self.name = name\n        self.color = color\n        self.age = age", "category": "Python"}, {"instruction": "Suppose you have a string with a specific pattern, write a function that checks if the string follows the pattern.", "input": "str = \"WXYZWXYZ\"\npattern = 'XYYZ'", "output": "true", "category": "Python"}, {"instruction": "Create a 5x5 zero matrix using an array.", "input": "", "output": "[[0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0]]", "category": "Python"}, {"instruction": "Create a class called `Employee` that contains instances of a name, age, and salary.", "input": "", "output": "class Employee:\n    \"\"\"\n    This class contains instance variables of a name, age, and salary.\n    \"\"\"\n\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary", "category": "Python"}, {"instruction": "Write a Python while loop that iterates through the list `my_list` and prints each item.", "input": "my_list = [1, 2, 3, 4, 5]", "output": "i = 0\nwhile i < len(my_list):\n    print(my_list[i])\n    i += 1", "category": "Python"}, {"instruction": "Write a script to generate 10 random numbers between 1 and 100.", "input": "", "output": "let randomNumbers = [];\n\nfor (let i = 0; i < 10; i++) {\n  let randNumber = Math.floor(Math.random() * 100 + 1);\n  randomNumbers.push(randNumber);\n}\nconsole.log(randomNumbers);", "category": "Python"}, {"instruction": "Generate a Fibonacci sequence until the 100th number.", "input": "", "output": "The generated Fibonacci sequence up to the 100th number is [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144].", "category": "Python"}, {"instruction": "Calculate the area of this shape.", "input": "[Image]", "output": "The area of this shape is 36 cm^2.", "category": "Python"}, {"instruction": "Write Javascript code to create a timeout to set a message after 5 seconds.", "input": "", "output": "setTimeout(() => {\n    console.log('This is the message after 5 seconds');\n  }, 5000);", "category": "Python"}, {"instruction": "What data type is suitable for this data?", "input": "Data: \"apple\"", "output": "The suitable data type for this data is a string.", "category": "Python"}, {"instruction": "Print out the average of all elements within a given array.", "input": "arr = [3, 7, 4, 8, 9]", "output": "arr = [3, 7, 4, 8, 9]\nsum = 0\n\nfor num in arr:\n    sum += num\n\naverage = sum / len(arr)\nprint(average)  # prints 6.4", "category": "Python"}, {"instruction": "Name the class for this object-oriented design.", "input": "[Image]", "output": "The class name for this object-oriented design should be Foo.", "category": "Python"}, {"instruction": "Create a 16-bit hash for this data.", "input": "Data: 0x0010", "output": "The 16-bit hash for the given data is 0xB8C2.", "category": "Python"}, {"instruction": "Calculate the number of Sundays in a given year that falls on the first of a month.", "input": "Year: 2021", "output": "There are 5 Sundays in 2021 that fall on the first of a month.", "category": "Python"}, {"instruction": "Create a method in Java to print square of a given number.", "input": "", "output": "public static void printSquare(int number) {\n    int result = number * number;\n    System.out.println(\"Square of \" + number + \" is: \" + result);\n}", "category": "Python"}, {"instruction": "Write an algorithm to check if two given strings are an anagram.", "input": "s1 = \"listen\"; s2 = \"silent\"", "output": "Algorithm:\n\nSet s1Letters to an empty array\nSet s2Letters to an empty array\n\nBreak s1 and s2 into letters and add them to respective arrays.\n\nSort the arrays\n\nCompare the sorted arrays, if both are equal then strings are anagram else not.", "category": "Python"}, {"instruction": "Write a Python program to count the number of upper and lower case letters in a given string.", "input": "s = \u201cHello World\u201d", "output": "def count_letters(s):\n    upper_count = 0\n    lower_count = 0\n    for c in s:\n        if c.isupper():\n            upper_count += 1 \n        elif c.islower():\n            lower_count += 1 \n    return upper_count, lower_count", "category": "Python"}, {"instruction": "Write CSS code to style a web page with a white background and black text.", "input": "", "output": "body {\n    background-color: white; \n    color: black;\n}", "category": "Python"}, {"instruction": "Write a SQL query that calculates the total number of orders made in the month of February.", "input": "", "output": "SELECT COUNT(*) as Total_Orders from Orders \nWHERE MONTH(Order_Date) = 2;", "category": "Python"}, {"instruction": "Perform 3 xor operations for the following data.", "input": "Data1: 0x8B\nData2: 0x7D", "output": "The result of Data1 XOR Data2 is 0xF6. The result of Data2 XOR Data1 is also 0xF6. The result of Data1 XOR Data1 is 0x00.", "category": "Python"}, {"instruction": "Write a JavaScript snippet to show a prompt with the text \"Please enter your name\".", "input": "", "output": "const name = prompt(\"Please enter your name\");", "category": "Python"}, {"instruction": "What is the syntax for adding a new element to an array?", "input": "", "output": "The syntax for adding a new element to an array is to use the append() method. For example, to add the element 'hello' to an array named my_array, you would use my_array.append('hello').", "category": "Python"}, {"instruction": "What is \"type casting\" in programming?", "input": "", "output": "In programming, type casting is the process of converting a value from one data type to another. This is done either explicitly, by writing a cast operator, or implicitly, which is done by the programming language itself. Type casting is often used to convert values from one type to another to enable a program to work with values of multiple types.", "category": "Python"}, {"instruction": "Write a function that takes a string and returns the number of times the string occurs in the given array", "input": "string = \"hello\", arr = [\"hello\", \"hi\", \"hello\", \"salut\"]", "output": "def count_string_occurrences(string, arr):\n    # initialize count\n    count = 0\n    # loop through array\n    for i in arr:\n        # if element equals string, increment count\n        if i == string:\n            count += 1\n    # return count\n    return count", "category": "Python"}, {"instruction": "Write a function to convert a timestamp from epoch time to human readable time", "input": "epoch = 1597968470", "output": "import datetime\ndef epoch_to_human_time(epoch):\n    # convert timestamp to human readable time\n    human_time = datetime.datetime.utcfromtimestamp(epoch).strftime('%Y-%m-%d %H:%M:%S')\n    # return human readable time\n    return human_time", "category": "Python"}, {"instruction": "Construct a class in Python that describes a car", "input": "", "output": "class Car:\n    def __init__(self, brand, color):\n        self.brand = brand\n        self.color = color\n    def describe(self):\n        return \u201cThis car is a {} and it is {}.\u201d.format(self.brand, self.color)", "category": "Python"}, {"instruction": "Write a function which takes in two parameters and returns the largest of them", "input": "num1 = 4, num2 = 3", "output": "def find_largest(num1, num2):\n    if num1 > num2:\n        return num1\n    else:\n        return num2", "category": "Python"}, {"instruction": "Create a function to convert a string of characters to lower case", "input": "string = \"HELLO WORLD\"", "output": "def to_lowercase(str):\n    return str.lower()", "category": "Python"}, {"instruction": "Write an algorithm to count the number of distinct values in an array", "input": "arr = [1, 2, 3, 2, 4, 5, 3, 2]", "output": "def count_distinct_values(arr):\n    # use a set to store the distinct values\n    distinct_values = set()\n    \n    # loop through the array\n    for i in arr:\n        # add each value to the set\n        distinct_values.add(i)\n    # return the size of the set\n    return len(distinct_values)", "category": "Python"}, {"instruction": "Write a function to calculate the hypotenuse of a right triangle when passed two sides (lenghts) of the triangle", "input": "side1 = 4, side2 = 3", "output": "def calculate_hypotenuse(side1, side2):\n    hypotenuse = (side1 ** 2 + side2 ** 2) ** 0.5\n    return hypotenuse", "category": "Python"}, {"instruction": "Using the comment as a guide, complete the code to reverse an array in-place.", "input": "def reverse_arr(arr):\n    \"\"\"Reverses an array in-place. This means the existing array will be modified!\"\"\"\n    # TODO: write the code here", "output": "def reverse_arr(arr):\n    \"\"\"Reverses an array in-place. This means the existing array will be modified!\"\"\"\n    # reverse the array in-place\n    for i in range(len(arr)//2): \n        arr[i], arr[len(arr)-i-1] = arr[len(arr)-i-1], arr[i]", "category": "Python"}, {"instruction": "let A be a n x n matrix, write a function to calculate the trace of A", "input": "A = [[1,2,3],[4,5,6],[7,8,9]]", "output": "def trace(A):\n    # initialize trace\n    trace = 0\n    \n    # loop through matrix A\n    for i in range(len(A)):\n        for j in range(len(A)):\n            # when i equals j\n            if i == j:\n                trace += A[i][j]\n\n    return trace", "category": "Python"}, {"instruction": "Generate a program to delete a node with a given value from the Linked List.", "input": "linked_list = [10, 5, 3, 4, 6, 5]\nvalue = 5", "output": "# Delete a Node from a Linked List\n \n# Node class \nclass Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \n# LinkedList class \nclass LinkedList: \n    def __init__(self): \n        self.head = None\n  \n    # Function to delete a node with a given value \n    def delete_by_value(self, value): \n        # Check if Linked List is empty \n        if self.head is None: \n            return \n  \n        # Keep a track of the current node\n        current = self.head \n  \n        # Check to delete the head node \n        if current.data == value: \n            self.head = current.next\n            current = None\n            return \n  \n        # Iterate through the Linked List\n        while current.next is not None: \n            # Get the next node \n            next_node = current.next\n            # Check if the node contains the value \n            if next_node.data == value: \n                # Delete the node and break out of the loop\n                current.next = None\n                current.next = next_node.next\n                break\n  \n            # Step to the next node\n            current = current.next\n  \n# Main Program \nlinked_list = LinkedList()\nlinked_list.head = Node(10)\nlinked_list.head.next = Node(5)\nlinked_list.head.next.next = Node(3)\nlinked_list.head.next.next.next = Node(4)\nlinked_list.head.next.next.next.next = Node(6)\nlinked_list.head.next.next.next.next.next = Node(5)\nvalue = 5\nlinked_list.delete_by_value(value)", "category": "Python"}, {"instruction": "Edit the code so that it can handle the fractions.", "input": "def calculate(x, y): \n    if isinstance(x, int) and isinstance(y, int): \n        return x + y \n    else: \n        return \"Please use integers only.\"", "output": "def calculate(x, y): \n    # Check if the numbers are integers or floats \n    if isinstance(x, (int, float)) and isinstance(y, (int, float)): \n        return x + y \n    else: \n        return \"Please use numbers only.\"", "category": "Python"}, {"instruction": "Generate a function that takes an array and computes the minimum element within the array.", "input": "array = [2,3,5,1,4]", "output": "# Calculate Minimum Element\ndef find_min(arr):\n    # Set a variable to store the minimum element of the array \n    minimum = arr[0] \n    # Compare each element of the array with the current min element \n    for i in range(1, len(arr)): \n        if arr[i] < minimum: \n            minimum = arr[i] \n    return minimum \n\n# Main Program\narray = [2,3,5,1,4]\nresult = find_min(array)\nprint(result)", "category": "Python"}, {"instruction": "Submit an algorithm to find the first non-repeating character of the given string.", "input": "string = \"bacdedbage\"", "output": "# Find First Non-Repeating Character\ndef first_non_repeat(string): \n    seen = {} \n\n    for char in string: \n        if char not in seen: \n            seen[char] = 0 \n        seen[char] += 1\n\n    # Find the first character that appears once\n    for i in range(len(string)): \n        if seen[string[i]] == 1: \n            return string[i] \n      \n    return '_'\n\n\n# Main Program\nstring = \"bacdedbage\"\nresult = first_non_repeat(string)\nprint(result)", "category": "Python"}, {"instruction": "Print the longest substring of a string that does not have any repeated characters.", "input": "string = \"abcaabccbad\"", "output": "# Longest Substring with no repeated chars\ndef longestSubstringWithoutDuplication(string): \n    longest = \"\" \n    start = 0 \n    seen = {} \n      \n    for i, char in enumerate(string): \n         # Stop current substring when repeating character is found\n        if char in seen and start <= seen[char]: \n            start = seen[char] + 1\n        # Add the character to the dictionary\n        seen[char] = i \n        # Update longest substring\n        longest = max(longest, string[start:i + 1], key = len) \n      \n    return longest\n\n# Main Program\nstring = \"abcaabccbad\"\nresult = longestSubstringWithoutDuplication(string)\nprint(result)", "category": "Python"}, {"instruction": "Submit a program to a computer that takes an array and reverses it.", "input": "array = [1,2,3,4,5]", "output": "# Reverse an Array\n\ndef reverse_array(arr): \n    return [arr[i] for i in range(len(arr)-1, -1, -1)] \n  \n# Driver program \narr = [1, 2, 3, 4, 5] \nresult = reverse_array(arr) \nprint(result)", "category": "Python"}, {"instruction": "Update the code to add to a given list all even numbers between 0 and 10 (inclusive).", "input": "my_list = []", "output": "my_list = []\nfor i in range(11):\n    if i % 2 == 0:\n        my_list.append(i)\n\nprint(my_list)  # prints [0, 2, 4, 6, 8, 10]", "category": "Python"}, {"instruction": "Create an array of strings, such that it contains strings of all possible combinations of n characters from a given string of characters.", "input": "Given string: \"ABC\", n = 3", "output": "arr = [\"AAA\", \"AAB\", \"AAC\", \"ABA\", \"ABB\", \"ABC\", \"ACA\", \"ACB\", \"ACC\", \"BAA\", \"BAB\", \"BAC\", \"BBA\", \"BBB\", \"BBC\", \"BCA\", \"BCB\", \"BCC\", \"CAA\", \"CAB\", \"CAC\", \"CBA\", \"CBB\", \"CBC\", \"CCA\", \"CCB\", \"CCC\"]", "category": "Python"}, {"instruction": "Create a class for customer data.", "input": "", "output": "class Customer:\n    def __init__(self, name, age, email):\n        self.name = name\n        self.age = age\n        self.email = email\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n    \n    def get_email(self):\n        return self.email", "category": "Python"}, {"instruction": "Create a function that returns the longest word in a sentence.", "input": "sentence = \"This is a sentence with lots of words.\"", "output": "def get_longest_word(sentence):\n    words = sentence.split()\n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word", "category": "Python"}, {"instruction": "Using the provided text, remove all punctuation and store the resulting output in a new variable.", "input": "text = \"This is a text string with punctuation!\"", "output": "import re\n\nnew_text = re.sub('[^\\w\\s]','', text)", "category": "Python"}, {"instruction": "How can you concatenate two strings in Python?", "input": "", "output": "# Using the + operator \nstr1 = \"Hi\"\nstr2 = \" there!\"\nstr3 = str1 + str2 \nprint(str3)\n\n# Output: Hi there!\n\n# Using the join() method\nstr1 = \"Hi\"\nstr2 = \" there!\"\nstr3 = \"\".join([str1, str2]) \nprint(str3)\n\n# Output: Hi there!", "category": "Python"}, {"instruction": "Given a list of integers, how can you find the second smallest number in the list?", "input": "my_list = [4, 8, 19, 6, 17, 11]", "output": "def find_second_smallest_number(lst):\n    sorted_list = sorted(lst)\n    return sorted_list[1]\n\nsecond_smallest_number = find_second_smallest_number(my_list)", "category": "Python"}, {"instruction": "Write an algorithm to calculate the nth Fibonacci number.", "input": "", "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)", "category": "Python"}, {"instruction": "Write a function to extract all URLs from a given HTML document.", "input": "", "output": "def extract_urls(html): \n    res = []\n    \n    soup = BeautifulSoup(html, 'html.parser') \n    for link in soup.find_all('a'): \n        res.append(link.get('href')) \n    \n    return res", "category": "Python"}, {"instruction": "Use a programming language to generate this sequence of numbers:", "input": "", "output": "[1, 2, 3, 4, 7, 11, 18, 29, 47, 76, 123, 199]", "category": "Python"}, {"instruction": "Write a class to represent a point in a 2-D plane.", "input": "", "output": "class Point: \n    \n    def __init__(self, x_coordinate, y_coordinate): \n        self.x = x_coordinate \n        self.y = y_coordinate \n  \n    def get_x(self): \n        return self.x \n  \n    def get_y(self): \n        return self.y \n  \n    def set_x(self, x_coordinate): \n        self.x = x_coordinate \n  \n    def set_y(self, y_coordinate): \n        self.y = y_coordinate \n  \n    def distance(self, other_point): \n        x_diff_sq = (self.x - other_point.x) * (self.x - other_point.x) \n        y_diff_sq = (self.y - other_point.y) * (self.y - other_point.y) \n          \n        return (x_diff_sq + y_diff_sq) ** 0.5 \n  \np1 = Point(1, 2) \np2 = Point(3, 4) \n\nprint(p1.distance(p2))", "category": "Python"}, {"instruction": "Find the index of the first character in a string that is not a space.", "input": "string: \"    Hello world!\"", "output": "def find_index(string): \n    for i in range(len(string)):  \n        if string[i] != ' ': \n            return i \n    return -1\n\nstring = \"    Hello world!\"\nprint(find_index(string))", "category": "Python"}, {"instruction": "Write a recursive function to calculate the Fibonacci sequence.", "input": "", "output": "def fibo(n): \n  \n    if n <= 1: \n        return n \n    else: \n        return(fibo(n-1) + fibo(n-2)) \n  \n# take input from the user \nnterms = 10\n\n# check if the number of terms is valid \nif nterms <= 0: \n   print(\"Please enter a positive integer\") \nelse: \n   print(\"Fibonacci sequence:\") \n   for i in range(nterms): \n       print(fibo(i))", "category": "Python"}, {"instruction": "Create a function that takes a list of numbers and removes all elements that occur more than once.", "input": "[1, 2, 3, 1, 2, 5]", "output": "def remove_duplicates(numbers): \n    new_list = [] \n    for num in numbers: \n        if num not in new_list: \n            new_list.append(num) \n    return new_list \n\nprint (remove_duplicates([1, 2, 3, 1, 2, 5]))", "category": "Python"}, {"instruction": "Calculate the maximum of an input array.", "input": "mylist = [1, 4, 5, 6, 8, -3]", "output": "# Initialize the max\nmax = mylist[0]\n\n# Iterate over the list\nfor i in mylist:\n    # Check for bigger value\n    if i > max:\n        # Update the max\n        max = i\n\n# Print the max\nprint(max)", "category": "Python"}, {"instruction": "Generate a dictionary with keys being the list elements and values being the list indexes.", "input": "mylist = ['a','b','c','d']", "output": "# Initialize an empty dictionary\ndict_list = {}\n\n# Iterate over the list\nfor i, item in enumerate(mylist):\n    # Add the elements of the list as keys with the index as their value\n    dict_list[item] = i\n\n# Print the dictionary\nprint(dict_list)", "category": "Python"}, {"instruction": "Create a list of numbers in the range [0, 10) that are divisible by 3.", "input": "", "output": "# Initialize an empty list\nlist_by_3 = []\n\n# Iterate over the range\nfor i in range(0, 10):\n    # Check if the number is divisible by 3    \n    if i % 3 == 0:\n        # Append it to the list\n        list_by_3.append(i)\n\n# Print the list\nprint(list_by_3)", "category": "Python"}, {"instruction": "Add up the elements of a given matrix.", "input": "matrix = [[1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9]]", "output": "# Initialize the sum\nsum = 0\n\n# Iterate over the matrix\nfor row in matrix:\n    # Iterate over the elements of each row\n    for elem in row:\n        # Add up the elements\n        sum += elem\n\n# Print the sum\nprint(sum)", "category": "Python"}, {"instruction": "Read in a 2D array with three columns.", "input": "[[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9]]", "output": "# Create an empty list\narray = []\n\n# Iterate over the 2D array\nfor row in array_input:\n    \n    # Create a temporary list\n    temp_list = []\n\n    # Iterate over each column\n    for col in row:\n        temp_list.append(col)\n\n    # Append the temporary list to the array\n    array.append(temp_list)", "category": "Python"}, {"instruction": "Normalize a given vector.", "input": "vector = [2, 5, 6]", "output": "# Calculate sum of vector elements\nvector_sum = 0\nfor x in vector:\n    vector_sum += x\n\n# Normalize vector\nnormalized_vector = [x/vector_sum for x in vector]\n\n# Print the normalized vector\nprint(normalized_vector)", "category": "Python"}, {"instruction": "Can you detect if a given number is even or odd?", "input": "", "output": "def is_even(n):\n    return n % 2 == 0", "category": "Python"}, {"instruction": "Edit the following while loop to fix the error.", "input": "i = 0\nwhile i <= 5:\n    print(i)   \n    i =  i + 1", "output": "i = 0\nwhile i < 5:\n    print(i)    \n    i =  i + 1", "category": "Python"}, {"instruction": "Create a class with two methods which will print out strings \"Hello\" and \"Goodbye\".", "input": "", "output": "class MyClass:\n    def hello_method(self):\n        print(\"Hello\")\n    \n    def goodbye_method(self):\n        print(\"Goodbye\")", "category": "Python"}, {"instruction": "How can you sort a list in decending order in Python?", "input": "", "output": "my_list = [4, 8, 19, 6, 17, 11]\n\nsorted_list = sorted(my_list, reverse=True)", "category": "Python"}, {"instruction": "What is the difference between a programming language and a scripting language?", "input": "", "output": "The main difference between a programming language and a scripting language is that a programming language generally requires compiling or interpreting the source code before it can be used, while a scripting language is interpreted on the fly without pre-compilation. Another difference is that programming languages are generally thought of as being more powerful, but scripting languages offer quick development times and are generally easier to learn.", "category": "Python"}, {"instruction": "Explain how a hash table works.", "input": "", "output": "A hash table is a data structure that stores key-value pairs where the key is used to generate a unique index, or \"hash\". The hash is then used to access the value associated with the key. This allows for quick lookups of the data as the index is calculated from the key, resulting in an efficient way to store and retrieve the data.", "category": "Python"}, {"instruction": "Differentiate between a stack and a queue.", "input": "", "output": "A stack is a data structure that operates on a Last-In-First-Out (LIFO) principle, meaning the element that was added last will be removed first. A queue is a data structure that works on a First-In-First-Out (FIFO) principle, meaning the element that was added first will be removed first. Stacks are often used to reverse the order of elements or to store data temporarily, while queues are used for processing queues of data such as tasks and messages.", "category": "Python"}, {"instruction": "Provide an example of a memoization technique in programming.", "input": "", "output": "An example of a memoization technique in programming is to store the result of a function call in a lookup table. When the function is called for the same input in the future, the stored result can be accessed quickly from the lookup table instead of needing to calculate it again, resulting in improved performance.", "category": "Python"}, {"instruction": "How does a recursive function work?", "input": "", "output": "A recursive function is a function that calls itself in order to complete its task. When a recursive function is called, it will break the problem into smaller sub-problems, and call itself with the smaller sub-problems. This process will repeat until the smallest sub-problem is solved, at which point the recursive function will return the result of all the sub-problems it encountered.", "category": "Python"}, {"instruction": "Provide an example of a valid JSON object.", "input": "", "output": "{\n  \"name\": \"John Doe\",\n  \"age\": 25,\n  \"address\": {\n    \"street\": \"123 Main Street\",\n    \"city\": \"New York\",\n    \"state\": \"NY\"\n  },\n  \"hobbies\": [\"sports\", \"reading\", \"writing\"]\n}", "category": "Python"}, {"instruction": "Which language is most suitable for creating a web page?", "input": "", "output": "HTML is the language most suitable for creating a web page. It allows you to create the structure and content of the web page and can be combined with other languages such as CSS and JavaScript to improve the look and feel of the web page.", "category": "Python"}, {"instruction": "Change the list elements to binary numbers.", "input": "mylist=[3, 8, 9]", "output": "mylist = [bin(i) for i in mylist]", "category": "Python"}, {"instruction": "Summarize the following article in less than 100 words.", "input": "Machine Learning is an advanced course that is currently trending in the tech world. With the help of machine learning, many complex patterns and functions can be solved using algorithms and mathematical models. The ever-increasing advancements in technology also mean that the applications of machine learning are also widening every day.", "output": "Machine Learning is a powerful tool utilized in the tech industry to unlock complex patterns and functions. Advances in hardware and software technologies are allowing machine learning to be used in wider applications than ever before, making it a growing trend in the industry. It involves algorithms and mathematical models to complete tasks, resulting in improved efficiency and practical solutions to existing problems.", "category": "Python"}, {"instruction": "Output code for a function that will remove all instances of an element from a given list.", "input": "my_list = [1, 3, 5, 3, 7, 9, 3]", "output": "def remove_element(lst, element):\n    return [x for x in lst if x != element]", "category": "Python"}, {"instruction": "Construct a set containing numbers from 1 to 5.", "input": "", "output": "my_set = set(range(1, 6))", "category": "Python"}, {"instruction": "Write a function to sum up all the elements in a given list and output the result.", "input": "my_list = [2, 4, 9, 16]", "output": "def sum_list_elements(lst):\n    result = 0\n    for num in lst:\n        result += num\n    return result", "category": "Python"}, {"instruction": "Output the code for a function to generate the Fibonacci sequence up to the given number n.", "input": "", "output": "def generate_fibonacci(n):\n    fibonacci_list = [0, 1]\n    i = 1\n    while i < n:\n        fibonacci_list.append(fibonacci_list[i] + fibonacci_list[i-1])\n        i = i + 1\n    return fibonacci_list", "category": "Python"}, {"instruction": "Output code for a function that prints the multiplication table of a given number.", "input": "", "output": "def multiplication_table(num):\n    for i in range(1, 11):\n        print(num, 'x', i, '=', num*i)", "category": "Python"}, {"instruction": "Output code for a function that accepts one argument and returns the square of the argument.", "input": "", "output": "def square(x):\n        return x * x", "category": "Python"}, {"instruction": "Construct a class Student which will take in attributes name, age, and city upon initialization.", "input": "", "output": "class Student:\n    def __init__(self, name, age, city):\n        self.name = name\n        self.age = age\n        self.city = city", "category": "Python"}, {"instruction": "Write code to find the longest word in the given list and output it.", "input": "words_list = [\"apple\", \"mango\", \"banana\", \"blueberry\"]", "output": "def find_longest_word(lst):\n    longest_word = \"\"\n    for word in lst:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word", "category": "Python"}, {"instruction": "Compute the minimum of three numbers.", "input": "50, 133, 4", "output": "4", "category": "Python"}, {"instruction": "Write a Java program to read input from the console.", "input": "", "output": "import java.util.Scanner; \n\nclass UserInput { \n  \n    public static void main(String[] args) \n    { \n        Scanner read = new Scanner(System.in); \n        System.out.print(\"Enter some string: \"); \n        String inputString = read.nextLine(); \n  \n        System.out.println(\"You have entered: \" + inputString); \n    } \n}", "category": "Python"}, {"instruction": "Create a HTML page to display a given list of items", "input": "", "output": "<html>\n    <head>\n        <title>List of Items</title>\n    </head>\n    <body>\n        <h1>List of Items</h1>\n        <ul>\n            <li>Item 1</li>\n            <li>Item 2</li>\n            <li>Item 3</li>\n            <li>Item 4</li>\n            <li>Item 5</li>\n        </ul>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Produce a Regex statement to find a six-letter word that starts with an \"a\" and ends with an \"s\".", "input": "", "output": "/^a\\w{4}s$/", "category": "Python"}, {"instruction": "Construct a While Loop in JavaScript.", "input": "", "output": "let i = 0; \nwhile (i < 10) { \n   console.log(i); \n   i++; \n}", "category": "Python"}, {"instruction": "Generate a Ruby statement to iterate through given array and print elements.", "input": "[ 'John', 'Julia', 'JeY', 'Jill' ]", "output": "array = ['John', 'Julia', 'JeY', 'Jill']\narray.each { |element| puts(element) }", "category": "Python"}, {"instruction": "Create an HTML form with a submit button that will trigger an alert message on clicking the button.", "input": "", "output": "<form action=\"\" method=\"post\">\n  <input type=\"submit\" value=\"Submit\" onclick=\"alert('Form submitted!')\"/>\n</form>", "category": "Python"}, {"instruction": "Write a Python script to convert the given list of strings into a comma separated string.", "input": "[ 'John', 'Julia', 'JeY', 'Jill' ]", "output": "list = [ 'John', 'Julia', 'JeY', 'Jill' ]\nprint( ', '.join(list) )", "category": "Python"}, {"instruction": "Construct a while loop statement to print only even numbers between 0 to 10 in Python.", "input": "", "output": "i = 0\n\nwhile i <= 10: \n if i % 2 == 0:\n print(i)\n i = i + 1", "category": "Python"}, {"instruction": "Write a JavaScript statement to create a Timer set to 2 minutes.", "input": "", "output": "let timer = setInterval(function(){}, 120000);", "category": "Python"}, {"instruction": "Syntax to declare an array in JavaScript.", "input": "", "output": "const arrayName = [];", "category": "Python"}, {"instruction": "Utilizing the regular expression [a-zA-Z0-9]+ construct a javascript script to find all matching patterns from the given string.", "input": "exampleString", "output": "let regex = /[a-zA-Z0-9]+/;\nlet matches = exampleString.match(regex);\nconsole.log(matches);", "category": "Python"}, {"instruction": "Construct a CSS rule to either hide or show the paragraph element with the id \"description\".", "input": "", "output": "#description{\n display: block;\n}", "category": "Python"}, {"instruction": "Write an HTML table row to display the following information.", "input": "Name: Joe, Age: 30", "output": "<tr>\n <td>Joe</td>\n <td>30</td>\n</tr>", "category": "Python"}, {"instruction": "Transform a given text into a valid JSON format with indentation and proper spacing", "input": "hello world", "output": "{\n \"hello\": \"world\"\n}", "category": "Python"}, {"instruction": "How to generate all permutations of a given list of items?", "input": "", "output": "def permutation(lst):\n \n if len(lst) == 0:\n return []\n \n if len(lst) == 1:\n return [lst]\n \n l = []\n \n for i in range(len(lst)):\n m = lst[i]\n remLst = lst[:i] + lst[i+1:]\n \n for p in permutation(remLst):\n l.append([m] + p)\n \n return l", "category": "Python"}, {"instruction": "Use JavaScript to check if a number is an odd number.", "input": "", "output": "function isOdd(num){\n return num % 2 != 0;\n}", "category": "Python"}, {"instruction": "Print all the elements of the given 2D array in row-wise order.", "input": "arr = [[1,2], [3,4]]", "output": "for row in arr:\n for ele in row:\n print(ele)", "category": "Python"}, {"instruction": "Write a python program to extract the substring from a string after a specific character", "input": "string = \"Hello,World!\"\ncharacter = \",\"", "output": "string = \"Hello,World!\"\ncharacter = \",\"\nresult = string[string.find(character)+1:]\nprint(result) # World!", "category": "Python"}, {"instruction": "Write a C program to check whether a number is positive or negative", "input": "int num = -3;", "output": "#include<stdio.h>\n \nint main()\n{\n    int num = -3;\n    if (num < 0)\n        printf(\"Number is negative.\");\n    else\n        printf(\"Number is positive.\");\n \n    return 0;\n}", "category": "Python"}, {"instruction": "Edit the following Java code snippet to increase efficiency", "input": "public class MyClass {\n    public static void main(String[] args) {\n        int i = 0;\n        while (i < 10) {\n           i++;\n           System.out.println(i);\n        }\n    }\n}", "output": "public class MyClass {\n    public static void main(String[] args) {\n        //Set the counter to 1\n        int i = 1;\n        //Use less than or equal comparison to include 10\n        while (i <= 10) {\n           //short-hand increment\n           i++;\n           System.out.println(i);\n        }\n    }\n}", "category": "Python"}, {"instruction": "Generate a JavaScript code snippet to check if a certain element exists in an array", "input": "arr = [1,2,3,4,5]\nelement = 3", "output": "let arr = [1,2,3,4,5];\nlet element = 3;\nlet result = arr.indexOf(element) !== -1;\nconsole.log(result); //true", "category": "Python"}, {"instruction": "Write code to store an input string in a hashmap with the count of its occurrence as the value", "input": "The input string is \"apple\".", "output": "string = \"apple\"\ncount_map = dict()\n\nfor char in string:\n    if char in count_map:\n        count_map[char] += 1\n    else:\n        count_map[char] = 1\n\nprint(count_map)", "category": "Python"}, {"instruction": "Describe a method for adding two numbers that uses a stack data structure", "input": "", "output": "A method for adding two numbers using a stack data structure involves the following steps: \n1. Push the two numbers onto the stack. \n2. Pop the two numbers off the stack and add them together. \n3. Push the result onto the stack.\n4. Pop the result off the stack and return it as the final answer.", "category": "Python"}, {"instruction": "What is the correct syntax for converting a C# string to an integer?", "input": "", "output": "The correct syntax for converting a C# string to an integer is int.Parse(string). This method parses the string as a signed integer and returns the result.", "category": "Python"}, {"instruction": "Describe an algorithm for sorting an array of n integers in O(n log n) time.", "input": "", "output": "A sorting algorithm applicable to an array of n integers in O(n log n) time is Merge Sort. Its procedure first divides the input array into two halves until there are no more divisions are possible. This is the \"divide and conquer\" step of the algorithm. Then, each pair of divided arrays is sorted and merged into a single, sorted array. This is the \"combine\" step of the sorting algorithm. Finally, the sorted sub-arrays are combined in an organized manner to obtain the final sorted array. This algorithm is considered to be efficient, as it runs in O(n log n) time, where n is the number of elements in the array.", "category": "Python"}, {"instruction": "Rearrange the given jQuery snippet to use chaining.", "input": "var arr = [1,2,3];\n$.each(arr,function(i,val){\n    console.log(val*3);\n});", "output": "$(arr).each(function(i,val){\n    console.log(val*3);\n});", "category": "Python"}, {"instruction": "Write a JavaScript code snippet that prints the content of a cookie.", "input": "", "output": "let cookieName = \"cookie\";\nconsole.log(document.cookie.split(';').filter(item => item.trim().startsWith(`${cookieName}=`))[0].split('=')[1]);", "category": "Python"}, {"instruction": "Describe the process of indexing documents in an Elasticsearch cluster using the REST API.", "input": "", "output": "Indexing documents in an Elasticsearch cluster using the REST API involves the following steps:\n\n1. Install the Elasticsearch cluster and the Elasticsearch transport client.\n2. Create an index in the Elasticsearch cluster.\n3. Create the documents to be indexed by the cluster.\n4. Use the Elasticsearch transport client to submit the documents to be indexed.\n5. Query the Elasticsearch cluster for the indexed documents.", "category": "Python"}, {"instruction": "Design a function in C# which takes integer parameter and returns the first digit of the integer.", "input": "12345", "output": "public int GetFirstDigit(int number)\n{\n    int firstDigit = 0;\n    while (number > 0)\n    {\n        firstDigit = number % 10;\n        number /= 10;\n    }\n    return firstDigit;\n}", "category": "Python"}, {"instruction": "Suggest a way of preserving the order of elements in a JavaScript array using a set data structure.", "input": "", "output": "A Set data structure can be used for preserving the order of elements in a JavaScript array. To achieve this, the Set can be initialized with an array which contains the elements in the desired order. When adding elements to the Set, they will be added in the same order as they appear in the original array. This ensures the order of elements is preserved.", "category": "Python"}, {"instruction": "Write a JavaScript program to create an array of the first 100 Fibonacci numbers.", "input": "", "output": "let fibonacci_array = [0, 1];\n\nfor (let i = 2; i <= 100; i++) {\n  let next_number = fibonacci_array[i-1] + fibonacci_array[i-2];\n  fibonacci_array.push(next_number);\n}\n\nconsole.log(fibonacci_array);", "category": "Python"}, {"instruction": "Get the sum of the first 100 even numbers.", "input": "", "output": "The sum of the first 100 even numbers is 10,200.", "category": "Python"}, {"instruction": "Rewrite the following Java code using different functions.", "input": "String[] courses = {\"Math\",\"Science\",\"English\", \"History\"};\nfor(int i = 0; i < courses.length; i++){\n  System.out.println(courses[i]);\n}", "output": "import java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        String[] courses = {\"Math\",\"Science\",\"English\", \"History\"};\n\n        printCourses(courses);\n    }\n\n    public static void printCourses(String[] courses){\n        Arrays.stream(courses).forEach(System.out::println);\n    }\n}", "category": "Python"}, {"instruction": "Write a Python script to merge two given dictionaries into one", "input": "dict1 = {'a': 1, 'c': 3, 'd': 4}\ndict2 = {'a': 6, 'b': 2, 'c': 4}", "output": "dict1 = {'a': 1, 'c': 3, 'd': 4}\ndict2 = {'a': 6, 'b': 2, 'c': 4}\n\ndict3 = {**dict1, **dict2}\nprint(dict3) # {'a': 6, 'c': 4, 'd': 4, 'b': 2}", "category": "Python"}, {"instruction": "Create a JavaScript function to find the second smallest number in an array", "input": "[5, 10, 15, 20]", "output": "const array = [5, 10, 15, 20];\nconst secondSmallest = Math.min(...array.filter(x => x > Math.min(...array))) \n\n// Will return 10", "category": "Python"}, {"instruction": "Create a python program to implement a Binary Search in an array", "input": "arr = [2, 3, 4, 10, 40]\nx = 10", "output": "def binarySearch(arr, x):\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = int((low + high)/2)\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            return mid\n    return -1\narr = [2, 3, 4, 10, 40]\nx = 10\nresult = binarySearch(arr, x)\nif result != -1:\n    print(\"Element is present at index\",result) \nelse:\n    print(\"Element is not present in array\")", "category": "Python"}, {"instruction": "Create a C program to print the given matrix in the following elements", "input": "int arr[3][3] = {1,2,3,4,5,6,7,8,9};", "output": "#include<stdio.h>\n \nint main()\n{\n    int arr[3][3] = {1,2,3,4,5,6,7,8,9};\n    int i,j;\n \n    for(i=0;i<3;i++)\n    {\n        for(j=0;j<3;j++)\n            printf(\"%d \",arr[i][j]);\n \n        printf(\"\\n\");\n    }\n    return 0;\n}", "category": "Python"}, {"instruction": "Identify the input validation code that would be most appropriate for a form receiving a user's age.", "input": "", "output": "// Validate Age\nif (!(age >= 0 && age < 100)) {\n    alert(\"Please enter a valid age!\");\n    return false;\n}", "category": "Python"}, {"instruction": "Find the maximum of following array.", "input": "[4,1,7,9,3]", "output": "max = 9", "category": "Python"}, {"instruction": "Classify the following elements into a list.", "input": "Banana, Apple, Mango", "output": "[\"Banana\", \"Apple\", \"Mango\"]", "category": "Python"}, {"instruction": "Use JavaScript to generate a random number between 1-100.", "input": "", "output": "Math.floor(Math.random() * (100 - 1 + 1)) + 1", "category": "Python"}, {"instruction": "Write a SQL query to find records where the name starts with \u2018Jo\u2019.", "input": "", "output": "SELECT * FROM tableName\nWHERE name LIKE 'Jo%'", "category": "Python"}, {"instruction": "Form a while loop using PHP that prints the numbers from 6 to 14.", "input": "", "output": "$num = 6;\n  \nwhile ($num <= 14) \n{\n    echo $num;\n    $num++;\n}", "category": "Python"}, {"instruction": "Construct an if-else statement in Python that swaps the values of two variables.", "input": "a = 2\nb = 5", "output": "if a > b:\n    temp = a\n    a = b\n    b = temp\nelse:\n    temp = a\n    a = b\n    b = temp", "category": "Python"}, {"instruction": "Using a while loop in Python, print numbers from 5 to 19.", "input": "", "output": "i = 5\nwhile i < 20:\n    print(i)\n    i += 1", "category": "Python"}, {"instruction": "Write a SQL query that joins two tables.", "input": "Table1:\nId \tName\tAge\n1 \tJohn\t30\n2\tAlice\t20\nTable2:\nId\tCountry\n1\tUSA\n2\tEngland", "output": "SELECT Table1.Id, Table1.Name, Table1.Age, Table2.Country\nFROM Table1\nJOIN Table2\nON Table1.Id = Table2.Id", "category": "Python"}, {"instruction": "Debug the following Java code to return the number of elements in the list.", "input": "ArrayList<String> valueList = new ArrayList<String>();\nvalueList.add(\"Apple\");\nvalueList.add(\"Banana\");\nvalueList.add(\"Orange\");\nSystem.out.println(\"Number of elements: \" + valueList.length);", "output": "ArrayList<String> valueList = new ArrayList<String>();\nvalueList.add(\"Apple\");\nvalueList.add(\"Banana\");\nvalueList.add(\"Orange\");\nSystem.out.println(\"Number of elements: \" + valueList.size();", "category": "Python"}, {"instruction": "Formulate a loop in Python that prints 7 to 18.", "input": "", "output": "for i in range(7, 19):\n    print(i)", "category": "Python"}, {"instruction": "Write a MySQL query to find all records with the last name \"Smith\".", "input": "", "output": "SELECT * FROM people WHERE last_name='Smith';", "category": "Python"}, {"instruction": "Write a Java program to print all the Fibonacci series between 0 to 50.", "input": "", "output": "public class Fibonacci { \n    public static void main(String args[]) { \n        int n1=0,n2=1; \n        System.out.print(\"Fibonacci Series: \" + n1 + \" \" + n2); \n        for(int i=2;i<50;i++) { \n            int n3 = n1 + n2; \n            System.out.print(\" \" + n3); \n            n1=n2; \n            n2=n3;  \n        }\n    } \n}", "category": "Python"}, {"instruction": "Write an HTML code snippet to create an unordered list with three list items.", "input": "", "output": "<ul>\n  <li>List item 1</li>\n  <li>List item 2</li>\n  <li>List item 3</li>\n</ul>", "category": "Python"}, {"instruction": "Write a Python code snippet to display the multiplication table of 5.", "input": "", "output": "for i in range(1, 11):\n    print(f\"5 * {i} = {5 * i}\")", "category": "Python"}, {"instruction": "Write a JavaScript to create a new array containing the squared values of all odd numbers in the range (1, 10)?", "input": "", "output": "let newArray = [];\nfor (let i=1; i<=10; i++) {\n    if (i % 2 !== 0) {\n        newArray.push(i * i);\n    }\n}", "category": "Python"}, {"instruction": "Create a function to print the elements of a linked list in reverse", "input": "", "output": "public static void printReversedLinkedList(Node head) {\n    if(head == null) return;\n    printReversedLinkedList(head.next);\n    System.out.print(head.data + \" \");\n    }", "category": "Python"}, {"instruction": "Create a script in Python to search a given string for a substring", "input": "string = \"Hello World!\"\nsubstring = \"llo\"", "output": "def searchSubstring(string, substring): \n    results = [] \n    n = len(string) \n    m = len(substring) \n\n    for i in range(n - m + 1): \n        j = 0\n\n        while(j < m): \n            if(string[i + j] != substring[j]): \n                break\n            j += 1\n\n        if j == m: \n            results.append(i)\n  \n    print(results) \n\nstring = \"Hello World!\" \nsubstring = \"llo\"\nsearchSubstring(string, substring)", "category": "Python"}, {"instruction": "Identify the longest consecutive sequence of zeros in a binary string.", "input": "110010001", "output": "public static int longestSequenceOfZeros(String s) {\n\tint max_len = 0;\n    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s.charAt(i) == '0') {\n            count++;\n            max_len = Math.max(max_len, count);\n        } else {\n            count = 0;\n        }\n    }\n    return max_len;\n}", "category": "Python"}, {"instruction": "Compose an if-else block in Python for checking if a string is empty.", "input": "str1 = \"My String\"\nstr2 = \"\"", "output": "if len(str1) > 0:\n    print(\"Not empty\")\nelse:\n    print(\"Empty\")", "category": "Python"}, {"instruction": "Generate a correct C++ program that computes the square root of a given number.", "input": "float number = 3.14", "output": "float square_root(float number){\n    float low = 0;\n    float high = number;\n    float mid;\n    \n    while (low <= high){\n        mid = (low + high) / 2;\n        if (mid * mid == number){\n            return mid;\n        }\n        else if (mid * mid > number){\n            high = mid;\n        }\n        else {\n            low = mid;\n        }\n    }\n    return -1;\n}", "category": "Python"}, {"instruction": "Using for loop in Java, print even numbers from 20 to 30.", "input": "", "output": "for (int i=20; i<=30; i++) {  \n    if (i % 2 == 0) {  \n        System.out.println(i);  \n    }  \n}", "category": "Python"}, {"instruction": "Take the following array and write a program to remove any duplicates from it", "input": "arr = [3, 5, 2, 4, 5, 3, 2, 6]", "output": "let arr = [3, 5, 2, 4, 5, 3, 2, 6];\nlet set = new Set(arr);\nlet new_arr = [...set];\nconsole.log(new_arr); // [3, 5, 2, 4, 6]", "category": "Python"}, {"instruction": "Create a dictionary of key-value pairs containing the names of five fruits and their corresponding colors.", "input": "", "output": "fruitsColors = {\n    'apple': 'red',\n    'banana': 'yellow',\n    'orange': 'orange',\n    'grape': 'purple',\n    'strawberry': 'red'\n}", "category": "Python"}, {"instruction": "Turn the following pseudocode into a Java method.", "input": "for n = 2 to 10\nprint (n * 2)", "output": "public void printMultiples(int start, int end) {\n    for (int n=start; n <= end; n++) {\n        System.out.println(n*2);\n    }\n}", "category": "Python"}, {"instruction": "Design a class that can be used to represent books. Each book should have the following properties: title, author, and publisher.", "input": "", "output": "class Book:\n    def __init__(self, title, author, publisher):\n        self.title = title\n        self.author = author\n        self.publisher = publisher", "category": "Python"}, {"instruction": "Write a function to convert a string of digits to the corresponding integer value.", "input": "string = \"12345\"", "output": "def toInt(string):\n    number = 0\n    for char in string:\n        number = (number * 10) + int(char)\n    return number\n\n# Test\nprint(toInt(string)) #12345", "category": "Python"}, {"instruction": "Using the given JavaScript object, access the property oldest_child.", "input": "family = {\n    mother: 'Sabina',\n    father: 'Nasir',\n    children: [\n        {\n        name: 'Ben',\n        age: 12\n        },\n        {\n        name: 'Amy',\n        age: 14\n        }\n    ]\n}", "output": "family.children[1].name;", "category": "Python"}, {"instruction": "Modify the code below to make it a one-liner", "input": "# Initialize a variable\nsum = 0\n\n# Iterate over numbers from 1 to 10\nfor i in range(1, 11):\n    # Add number to sum\n    sum = sum + i\n\n# Print sum\nprint(sum)", "output": "print(sum([i for i in range(1, 11)]))", "category": "Python"}, {"instruction": "Write SQL query that create a table that contains three columns: an integer, a string and a boolean.", "input": "tablename = my_table", "output": "CREATE TABLE my_table (\n    int SERIAL PRIMARY KEY,\n    str VARCHAR(255) NOT NULL,\n    boolean BOOLEAN\n);", "category": "Python"}, {"instruction": "Insert a node at the beginning of a linked list.", "input": "[10 -> 15 -> 20 -> 25]", "output": "// Java program to insert a node \n// at the beginning of a Singly Linked List \n\npublic static void push(Node head_ref, int new_data) { \n\n    // allocate node \n    Node new_node = new Node(new_data); \n\n    // put in the data \n    new_node.data = new_data; \n\n    // link the old list off the new node \n    new_node.next = head_ref; \n\n    // move the head to point to the new node \n    head_ref = new_node; \n\n}", "category": "Python"}, {"instruction": "Create a CSS rule to make all elements in the page have a font size of 15px and color of #555.", "input": "", "output": "* {\n  font-size: 15px;\n  color: #555;\n}", "category": "Python"}, {"instruction": "Edit this HTML form to make sure that the input data is validated.", "input": "<form action=\"/submit\">\n  <input type=\"text\" name=\"name\" />\n  <input type=\"submit\" value=\"Submit\" />\n</form>", "output": "<form action=\"/submit\" onsubmit=\"return validateForm()\" >\n  <input type=\"text\" name=\"name\" required/>\n  <input type=\"submit\" value=\"Submit\"/>\n</form>\n<script>\n  function validateForm() {\n    let name = document.forms[\"myForm\"][\"name\"].value;\n    if (name == \"\") {\n        alert(\"Name is required\");\n        return false;\n    }\n  }\n</script>", "category": "Python"}, {"instruction": "Create a CSS class to override page text style.", "input": "", "output": ".my-style {\n  font-weight: bold;\n  font-size: 16px;\n  font-family: Arial, sans-serif;\n  color: #333;\n  line-height: normal;\n}", "category": "Python"}, {"instruction": "Evaluate the polynomial f(x) = 4x^2 + 7x + 1 at x = -3.", "input": "", "output": "f(-3) = 4(-3)^2 + 7(-3) + 1 = -36 + 21 + 1 = -14", "category": "Python"}, {"instruction": "Modify this HTML to add a paragraph element.", "input": "<div class=\"example\">\n  <h2>Example</h2>\n</div>", "output": "<div class=\"example\">\n  <h2>Example</h2>\n  <p>This is a paragraph element</p>\n</div>", "category": "Python"}, {"instruction": "Write a shell script to find the most used command.", "input": "", "output": "#!/bin/bash\n\n#Store the output of command history into an array\nhistoryArray=($(history))\n\n#Declare a Map\ndeclare -A wordCount\n \n#Loops through the history commands\nfor word in \"${historyArray[@]}\"; do\n   wordCount[\"$word\"]=$((wordCount[\"$word\"] + 1 ))\ndone\n \n#Counter for tracking the most used command\nmaxCount=0\n \n#Loop through the Map\nfor key in \"${!wordCount[@]}\"\ndo\n   #Keeps track of the most used command\n   if [ ${wordCount[$key]} -gt $maxCount ]\n   then\n      maxCount=\"${wordCount[$key]}\"\n      mostUsed=\"$key\"\n   fi\ndone\n \necho The Most Used Command is $mostUsed", "category": "Python"}, {"instruction": "Compute median of a given set of integers", "input": "[1, 6, 5, 8, 14, 9]", "output": "8", "category": "Python"}, {"instruction": "Generate a random hexadecimal string of length 16.", "input": "", "output": "8b5f5d45ab80fa9e", "category": "Python"}, {"instruction": "Use Python to print a multiplication table for the numbers from 1 to 10.", "input": "", "output": "# Print multiplication table\nfor i in range(1, 11):\n    for j in range(1, 11):\n        print('{0} x {1} = {2}'.format(i, j, i*j))\n    print('\\n')", "category": "Python"}, {"instruction": "Generate a correct HTML code to create a hyperlink.", "input": "Link text: Click Here\nLink URL: https://www.example.com", "output": "<a href=\"https://www.example.com\">Click Here</a>", "category": "Python"}, {"instruction": "Write an algorithm to flatten a deeply nested array", "input": "[1, [2], 3, [4, [5, 6], 7]]", "output": "public static List<Object> flattenArray(List<Object> arr) { \n  \n    List<Object> result = new ArrayList<>(); \n  \n    for (int i = 0; i < arr.size(); i++) { \n  \n        if (arr.get(i) instanceof List<?>) { \n  \n            List<Object> flat = flattenArray((List<Object>) arr.get(i)); \n            result.addAll(flat); \n        } \n        else { \n            result.add(arr.get(i)); \n        } \n  \n    } \n    return result; \n\n}", "category": "Python"}, {"instruction": "Write a function to generate valid random passwords.", "input": "passwordlen = 8", "output": "import string\nimport random\n\ndef generate_password(passwordlen):\n    ''' \n    This function generates a random password of the given length\n    '''\n    code_str = string.ascii_letters + string.digits\n    password = ''.join(random.choice(code_str) for i in range(passwordlen))\n    return password\n\nif __name__ == '__main__':\n    passwordlen = 8\n    print(generate_password(passwordlen))", "category": "Python"}, {"instruction": "Using Java, create a class that implements sorting of an array of integers.", "input": "", "output": "public class Sorting { \n\tpublic void sort(int[] array) { \n\t\tfor (int i = 0; i < array.length - 1; i++) { \n\t\t\tint index = i; \n\t\t\tfor (int j = i + 1; j < array.length; j++) { \n\t\t\t\tif (array[j] < array[index]) { \n\t\t\t\t\tindex = j; // index of lower number \n\t\t\t\t} \n\t\t\t} \n\t\t\tint smallerNumber = array[index]; \n\t\t\tarray[index] = array[i]; \n\t\t\tarray[i] = smallerNumber; \n\t\t}\n\t} \n}", "category": "Python"}, {"instruction": "Add a method to a given class to check if an element is present in it.", "input": "", "output": "class MyClass:\n  def __init__(self, elements):\n    self.elements = elements\n\n  def contains(self, element):\n    return element in self.elements", "category": "Python"}, {"instruction": "Create a constructor for a class called \"Student\".", "input": "", "output": "class Student:\n    def __init__(self, name, age, grades):\n        self.name = name\n        self.age = age\n        self.grades = grades", "category": "Python"}, {"instruction": "Write a SQL query to get the names of all the employees in the \"sales\" department who have a salary higher than $55,000.", "input": "", "output": "SELECT name FROM employees WHERE department='sales' AND salary > 55000;", "category": "Python"}, {"instruction": "Create a Ruby method that takes two strings and concatenates them.", "input": "", "output": "def concat(str1, str2)\n    return str1 + str2\nend", "category": "Python"}, {"instruction": "Using TensorFlow, create a model that predicts the price of an item from its features.", "input": "", "output": "import tensorflow as tf\n\n# Define the inputs, weights and bias.\ninputs = tf.keras.Input(shape=(features))\nweights = tf.keras.layers.Dense(3, activation='relu')(inputs)\nbias = tf.Variable(tf.random_normal([1]))\n\n# Create the model.\nmodel = tf.keras.Model(inputs, weights + bias)\n\n# Compile and fit the model.\nmodel.compile(optimizer='adam', loss='mse', metrics=['accuracy'])\nmodel.fit(x_train, y_train, validation_split=0.2, epochs=50)", "category": "Python"}, {"instruction": "Write a JavaScript function that takes an array and returns its first item.", "input": "", "output": "function getFirst(arr) {\n return arr[0];\n}", "category": "Python"}, {"instruction": "Create a CSS class that colors any text within its scope with blue.", "input": "", "output": ".blue {\n    color: blue;\n}", "category": "Python"}, {"instruction": "Using JavaScript, create a function to find the longest word in a string.", "input": "", "output": "function longestWord(str) {\n    let words = str.split(\" \");\n    let longestWordLength = 0;\n    let longestWord = \"\";\n \n    for (let i=0; i < words.length; i++) {\n        if (words[i].length > longestWordLength) {\n            longestWordLength = words[i].length;\n            longestWord = words[i];\n        }\n    }\n    return longestWord;\n}", "category": "Python"}, {"instruction": "Write a C++ program that calculates the sum of consecutive numbers from 1 to 10.", "input": "", "output": "#include <iostream>\n\nint main() {\n int sum = 0;\n \n for (int i = 1; i <= 10; i++) {\n  sum += i;\n }\n \n std::cout << \"Sum of consecutive number from 1 to 10 is \" << sum << std::endl;\n \n return 0;\n}", "category": "Python"}, {"instruction": "Convert the following code snippet from Python 2 code to Python 3 code.", "input": "x = raw_input(\"What is your name? \")", "output": "x = input(\"What is your name? \")", "category": "Python"}, {"instruction": "Write a regular expression that matches words with an \"r\" followed by any number of letters.", "input": "", "output": "\\br[a-zA-Z]*", "category": "Python"}, {"instruction": "Edit this program to print the output as \"Hello World\"", "input": "print (\"Bye World\"", "output": "print(\"Hello World\")", "category": "Python"}, {"instruction": "Find the ASCII code for the character H", "input": "", "output": "72", "category": "Python"}, {"instruction": "List the primitive data types of the language Python.", "input": "", "output": "Python data types include integers, floating-point numbers, strings, Booleans, lists, sets, dictionaries, tuples, and None.", "category": "Python"}, {"instruction": "Utilizing the Java syntax, write a code snippet to find the maximum value in the given array.", "input": "[4, 15, 11, 26, 2]", "output": "int max = arr[0];\n\nfor (int i = 1; i < arr.length; i++) {\n\tif (arr[i] > max) {\n\t\tmax = arr[i];\n\t}\n}\n\nSystem.out.println(\"Maximum value is: \" + max);", "category": "Python"}, {"instruction": "Generate a pseudo code for calculating the Fibonacci sequence.", "input": "", "output": "// This function starts from 0 \nfunction fibonacci(n) {\n    if (n <= 1) {\n        return n; \n    } else {\n        return fibonacci(n - 1) + fibonacci(n - 2); \n    }\n}", "category": "Python"}, {"instruction": "Using Python, write a code snippet to identify the capital of a given country.", "input": "Country: India", "output": "if country == 'India':\n  capital = 'New Delhi'\nprint(capital)", "category": "Python"}, {"instruction": "Using CSS, write a code snippet to provide a 10px grey border to a <div> element.", "input": "", "output": "<div style=\"border: 10px solid #808080;\"> ... </div>", "category": "Python"}, {"instruction": "Join two dictionaries by adding the values with the same key.", "input": "d1 = {\"a\": 1, \"b\": 2, \"c\": 3}\nd2 = {\"a\": 10, \"d\": 20, \"e\": 30}", "output": "def join_dictionaries(d1, d2):\n    ''' \n    This function joins two dictionaries by adding their values with\n    the same key\n    '''\n    result = {}\n    for k1, v1 in d1.items():\n        result[k1] = v1\n    \n    for k2, v2 in d2.items():\n        if k2 in result.keys():\n            result[k2] += v2\n        else:\n            result[k2] = v2\n            \n    return result\n\nif __name__ == '__main__':\n    d1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n    d2 = {\"a\": 10, \"d\": 20, \"e\": 30}\n    print(join_dictionaries(d1, d2))", "category": "Python"}, {"instruction": "Compute the edits between two strings.", "input": "str1 = \"I am eating\"\nstr2 = \"I am eating a sandwich\"", "output": "def edit_distance(str1, str2):\n    \"\"\"\n    Compute the edit distance between two strings\n    \"\"\"\n    m = len(str1)\n    n = len(str2)\n\n    distance = [[0 for i in range(n+1)] for j in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n\n            # If first string is empty, only option is to insert all characters of second string\n            if i == 0:\n                distance[i][j] = j\n\n            # If second string is empty, only option is to remove all characters of first string\n            elif j == 0:\n                distance[i][j] = i\n\n            # If last characters are same, ignore last char and recur for remaining string\n            elif str1[i-1] == str2[j-1]:\n                distance[i][j] = distance[i-1][j-1]\n\n            # If last characters are not same, consider all possibilities and find minimum\n            else:\n                replace_cost = distance[i-1][j-1] + 1\n                remove_cost = distance[i-1][j] + 1\n                insert_cost = distance[i][j-1] + 1\n                distance[i][j] = min(replace_cost, remove_cost, insert_cost)\n\n    return distance[m][n]\nif __name__ == '__main__':\n    str1 = \"I am eating\"\n    str2 = \"I am eating a sandwich\"\n    print(edit_distance(str1, str2))", "category": "Python"}, {"instruction": "Generate a number in range between 1 to 10  randomly.", "input": "", "output": "import random\n\ndef random_num():\n    return random.randint(1, 10)\n\nif __name__ == '__main__':\n    print(random_num())", "category": "Python"}, {"instruction": "Prepend a given list with the number 0.", "input": "list = [3, 4, 5, 6]", "output": "[0] + list", "category": "Python"}, {"instruction": "Write an SQL query to fetch the rows with the top 3 highest salary from the table.", "input": "Table: Employees\n\nid\t|name\t|salary\n\n1\t|John\t|100\n\n2\t|Bob\t|90\n\n3\t|Adam\t|80\n\n4\t|Alice\t|120", "output": "SELECT * FROM Employees ORDER BY salary DESC LIMIT 3;", "category": "Python"}, {"instruction": "Write an algorithm to calculate the median of a given array.", "input": "Array=[7, 4, 5, 2, 6]", "output": "Step 1: Start \nStep 2: Set an empty array, called median_arr.\nStep 3: Sort the given array.\nStep 4: Check if the length of the array is even or odd. \nStep 5: If even, calculate the average of the middle two elements and store it in median_arr. \nStep 6: If odd, store the middle element in the median_arr.\nStep 7: Return the array median_arr containing the median. \nStep 8: End.", "category": "Python"}, {"instruction": "Create a function that takes a 2D array as the argument and returns an array that contains the sums of each row.", "input": "[[0, 2, 3],\n [1, 2, 3],\n [2, 2, 3]\n]", "output": "def row_sum(A): \n    result = [] \n  \n    for row in A: \n        sum = 0  \n        for element in row: \n           sum = sum + element \n        result.append(sum) \n  \n    return result", "category": "Python"}, {"instruction": "Find the subarray with the largest sum in an integer array of length n.", "input": "[3, -2, 1, 5, 6, -1, 4]", "output": "int[] a = [3, -2, 1, 5, 6, -1, 4];\nint max_so_far = Integer.MIN_VALUE;\nint max_ending_here = 0;\nint start = 0;\nint end = 0;\nint s = 0;\n\nfor (int i = 0; i < a.length; i++) {\n\n    max_ending_here += a[i];\n\n    if (max_so_far < max_ending_here) {\n        max_so_far = max_ending_here;\n        start = s;\n        end = i;\n    }\n\n    if (max_ending_here < 0) {\n        max_ending_here = 0;\n        s = i + 1;\n    }\n}\n\nSystem.out.println(\"Maximum contiguous subarray is from \" + start + \" to \" + end);", "category": "Python"}, {"instruction": "Develop a function that converts an array of real numbers to its nearest integer values.", "input": "Array: [3.5, 4.7, 7.9]", "output": "def to_nearest_int(real_num_list):\n    return [round(x) for x in real_num_list] \n\nto_nearest_int([3.5,4.7,7.9])\n\nResult: [4, 5, 8]", "category": "Python"}, {"instruction": "Construct a SQL query to select all people who are 25 or older.", "input": "Table name: people", "output": "SELECT * FROM people WHERE age >= 25;", "category": "Python"}, {"instruction": "Utilizing the SQL language, write a query to select the longest word from the given table.", "input": "Table: words\nColumn Names: id, name", "output": "SELECT name\nFROM words\nORDER BY LENGTH(name) DESC\nLIMIT 1;", "category": "Python"}, {"instruction": "Compose a Python code for computing the factorial of a given number.", "input": "", "output": "def factorial(n): \n\tif n <= 1 : \n\t\treturn 1 \n\telse : \n\t\treturn n * factorial(n-1)", "category": "Python"}, {"instruction": "Write a CSS code for creating a hover effect for an element.", "input": "", "output": "element:hover {\n  background-color: #808080;\n}", "category": "Python"}, {"instruction": "Utilizing the C language, write pseudo code for performing a binary search in an array.", "input": "", "output": "int binary_search(int arr[], int left, int right, int x) { \n\tif (right >= left) { \n\t\tint mid = left + (right - left) / 2; \n\n\t\t// If the element is present at the middle \n\t\tif (arr[mid] == x) \n\t\t\treturn mid; \n\n\t\t// If element is smaller than mid, then it can only \n\t\t// be present in left subarray \n\t\tif (arr[mid] > x) \n\t\t\treturn binary_search(arr, left, mid - 1, x); \n\n\t\t// Else the element can only be present in right \n\t\t// subarray \n\t\treturn binary_search(arr, mid + 1, right, x); \n\t} \n\t\n\t// We reach here when element is not present \n\t// in array \n\treturn -1;\n}", "category": "Python"}, {"instruction": "Write a Tensorflow code for building a neural network with two input layers, two hidden layers and one output layer.", "input": "", "output": "model = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(64, activation='relu', input_shape=[2]),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(1)\n])", "category": "Python"}, {"instruction": "Write a ternary operation that checks if a number is negative and prints \"negative\" or positive and prints \"positive\".", "input": "Number: -5", "output": "(Number < 0) ? \"negative\" : \"positive\"\n\nResult: negative", "category": "Python"}, {"instruction": "Create an array that contains the square of every number between 1 and 10, excluding 5.", "input": "", "output": "arr = [1,4,9,16,36,49,64,81, 100]", "category": "Python"}, {"instruction": "Using a for loop and an if statement, count how many even numbers are in the given array.", "input": "[1,2,3,4]", "output": "count = 0\nfor num in [1,2,3,4]:\n if num % 2 == 0:\n count += 1", "category": "Python"}, {"instruction": "Write a code that sorts an array in descending order.", "input": "[7,4,1,2]", "output": "arr = [7,4,1,2]\narr.sort(reverse=True)", "category": "Python"}, {"instruction": "Write a code that prints all the possible outcomes of rolling two dice.", "input": "", "output": "def roll_two_dices():\n    for i in range(1, 7):\n        for j in range(1, 7):\n            print(f\"({i}, {j})\")", "category": "Python"}, {"instruction": "Remove the extra spaces from a given string and make the spaces between letters and words consistent.", "input": "\"  The  quick  brown fox  jumps  over  the lazy  dog  \"", "output": "def remove_extra_spaces(s):\n    s = s.strip()\n    words = s.split(\" \")\n    result = \"\"\n    for word in words:\n        if word:\n            result += word + \" \"\n    return result.strip()", "category": "Python"}, {"instruction": "Write a JavaScript code that takes in an array and returns an array of objects containing the original array elements and their frequency.", "input": "[3, 4, 3, 4, 5, 3]", "output": "function toObject(arr) {\n  let counts = {};\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    counts[num] = (counts[num] || 0) + 1;\n  }\n  for (let num in counts) {\n    res.push({\n      num: parseInt(num),\n      count: counts[num]\n    });\n  }\n  return res;\n}\n// Output: [{ num: 3, count: 3 }, { num: 4, count: 2 }, { num: 5, count: 1 }]", "category": "Python"}, {"instruction": "Write a Python code that reverses the order of words in a sentence.", "input": "\"This is a sentence\"", "output": "def reverseWords(sentence): \n  return ' '.join(sentence.split()[::-1])\n\n# Output: \"sentence a is This\"", "category": "Python"}, {"instruction": "Write a Python code to find all the prime numbers below a given number.", "input": "", "output": "def get_primes(n): \n  primes = [] \n  for num in range(2, n+1): \n    is_prime = True     \n    for div in range(2, n): \n      if (num % div == 0): \n        is_prime = False      \n    if is_prime: \n      primes.append(num) \n  return primes", "category": "Python"}, {"instruction": "Write a SQL query to output the most common first names among all male customers in the customer table", "input": "", "output": "SELECT first_name, COUNT(*) as count \nFROM customers \nWHERE gender='male' \nGROUP BY first_name \nORDER BY count DESC;", "category": "Python"}, {"instruction": "Create a new JavaScript object using the given constructor.", "input": "Person Constructor: \nfunction Person(name, age){\n   this.name = name;\n   this.age = age;\n}", "output": "const newPerson = new Person('John', 23);", "category": "Python"}, {"instruction": "Write a JavaScript function that takes in an array and a number as arguments and returns the array sorted in ascending order with the number inserted in the right position.", "input": "[1, 5, 6], 4", "output": "function insertSort(arr, num) {\n  arr.push(num);\n  arr.sort((a, b) => a - b);\n  return arr;\n}\n// Output: [1, 4, 5, 6]", "category": "Python"}, {"instruction": "Given a binary search tree and a target value, write a python function to search for the closest node value to the target.", "input": "", "output": "def closestInBST(root, target):\n  res = root.val\n  while root:\n    if root.val == target:\n      return root.val\n    if abs(root.val-target) < abs(res-target):\n      res = root.val\n    if target < root.val:\n      root = root.left\n    else:\n      root = root.right\n  return res", "category": "Python"}, {"instruction": "Add comments to the following JavaScript code that explains what it does.", "input": "let result = 0;\nfor (let i = 0; i < 10; i++) {\n  result += i;\n}", "output": "// This code loop through the numbers from 0 to 9 and add them to the variable result.\nlet result = 0; \nfor (let i = 0; i < 10; i++) { \n  // Add the current number to the value of result\n  result += i;\n}", "category": "Python"}, {"instruction": "Design a data structure that can efficiently store unique user IDs and what type of data structure is this?", "input": "", "output": "A hash table can be used to store unique user IDs as it provides efficient lookups, inserts and deletes of data.", "category": "Python"}, {"instruction": "Write a SQL query that selects the first name, last name, and the full name (concatenation of first and last name) of all users in a customer table.", "input": "", "output": "SELECT first_name, last_name, CONCAT(first_name, ' ', last_name) AS full_name \nFROM customers;", "category": "Python"}, {"instruction": "Write a SQL query to display a table with the number of records in each month of a year.", "input": "", "output": "SELECT month, COUNT(*) AS record_count\nFROM table_name\nGROUP BY month\nORDER BY month;", "category": "Python"}, {"instruction": "Create a JavaScript object with a number and a string property.", "input": "", "output": "let obj = {\n  num: 10,\n  str: \"hello\"\n};", "category": "Python"}, {"instruction": "How would you create a CSS style for alternating the background color of table rows?", "input": "", "output": "table tr:nth-child(odd) {\n\tbackground-color: #f2f2f2;\n}\ntable tr:nth-child(even) {\n\tbackground-color: #e6e6e6;\n}", "category": "Python"}, {"instruction": "Explain what the following python code prints out.", "input": "for i in range(10):\n    print(i**2)", "output": "The code prints out the squares of the numbers 0 to 9, i.e., 0, 1, 4, 9, 16, 25, 36, 49, 64 and 81.", "category": "Python"}, {"instruction": "How would you improve the efficiency of the following code snippet?", "input": "def get_total(list):\n    total = 0 \n    for item in list:\n        total += item\n    return total", "output": "One way to improve the efficiency of this code snippet is to use the built-in sum() function. This avoids having to manually iterate over the list and keep a running total. So the code can be rewritten as:\n\ndef get_total(list):\n    return sum(list)", "category": "Python"}, {"instruction": "Generate some sample input that can be used to test the edge cases of the following code snippet.", "input": "def multiply_two_numbers(a, b):\n    if a == 0 or b == 0:\n        return 0\n    else:\n        return a * b", "output": "Sample inputs for testing the edge cases:\n- Input: a = 0, b = 5\n- Input: a = 5, b = 0\n- Input: a = 0, b = 0", "category": "Python"}, {"instruction": "Rewrite this code snippet from a functional programming perspective.", "input": "def is_even_sum(nums):\n    return sum([1 for x in nums if x % 2 == 0]) > 0", "output": "This code snippet can be rewritten using a functional programming approach by using the built-in any() function.\n\ndef is_even_sum(nums):\n    return any(x % 2 == 0 for x in nums)", "category": "Python"}, {"instruction": "Create a Python dictionary with key-values pairs (fruit-quantity) as listed below.", "input": "apple = 5, banana = 10, orange = 15", "output": "fruit_dict = {\n    \"apple\":5,\n    \"banana\":10,\n    \"orange\":15\n    }", "category": "Python"}, {"instruction": "Create a Bash script to print the argument provided.", "input": "", "output": "echo \"This is the argument: $1\"", "category": "Python"}, {"instruction": "Explain a scenario to use mySQL COUNT function.", "input": "", "output": "The MySQL COUNT function can be used in scenarios where we need to find the number of records in a table that satisfy certain criteria. For example, to find the total number of employees in a given department we can use a query like \"SELECT COUNT(*) FROM employees WHERE department = 'sales'\".", "category": "Python"}, {"instruction": "Write a Java program to display a message \"Hello World\" on the console.", "input": "", "output": "class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}", "category": "Python"}, {"instruction": "Write a JavaScript expression to check whether the string \"Hello World\" is present in another string.", "input": "var test_str = \"Hello World is a popular phrase\";", "output": "test_str.includes(\"Hello World\");", "category": "Python"}, {"instruction": "Design an algorithm for sorting data in ascending order using selection sort.", "input": "", "output": "def selection_sort(arr):\n\n    for i in range(len(arr)):\n        min_index = i\n        for j in range(i+1, len(arr)):\n            if arr[min_index] > arr[j]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n\n    return arr", "category": "Python"}, {"instruction": "Write a Python program to sort the dictionary by key.", "input": "myDict = {'a': 1, 'c': 3, 'b': 2}", "output": "sortedDict = sorted(myDict)\nfor key in sortedDict:\n    print(key, ':', myDict[key])", "category": "Python"}, {"instruction": "Generate a Ruby program to print out the fibonacci sequence up to the 10th term.", "input": "", "output": "def fibonacci(n)\n  if n < 2\n    n\n  else\n    fibonacci(n-1) + fibonacci(n-2)\n  end\nend\n\n1.upto(10) {|x| puts fibonacci(x)}", "category": "Python"}, {"instruction": "How would you construct a for loop to print out the contents of an array?", "input": "arr=[1,3,5,7,9]", "output": "for i in range(len(arr)):\n    print(arr[i])", "category": "Python"}, {"instruction": "Construct an HTML page including a heading, button, and paragraph.", "input": "", "output": "<html>\n  <head>\n    <title>My Webpage</title>\n  </head>\n  <body>\n    <h1>My Webpage</h1>\n    <button>Click Here!</button>\n    <p>This is some sample text.</p>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Convert the given for loop code to a functional programming approach.", "input": "list = [1,2,3,4]\nfor i in list:\n    new_list.append(i * 2)", "output": "new_list = list(map(lambda x: x * 2, list))", "category": "Python"}, {"instruction": "Write a C++ code to generate a random number in the range 0 - 1000.", "input": "", "output": "#include <cstdlib> \n#include <time.h>  \n  \n//Generating random number \nint random_number =  rand() % 1001; \n  \n// Print the random number \ncout << random_number;", "category": "Python"}, {"instruction": "Change the For loop statement below to a While loop statement:", "input": "for i in range(0, 5):", "output": "i = 0\nwhile i < 5: \n    i += 1", "category": "Python"}, {"instruction": "Write a function to reverse the contents of a stack.", "input": "", "output": "def reverseStack(stack):\n    revStack = []\n \n    while len(stack) > 0:\n        top = stack.pop()\n        revStack.append(top)\n \n    return revStack", "category": "Python"}, {"instruction": "How would you print the sum of all elements in a 2-dimensional array?", "input": "array=[[1,2], [3,4], [5,6]]", "output": "sum=0\nfor i in range(len(array)):\n    for j in range(len(array[i])):\n        sum+= array[i][j] \n\nprint(sum)", "category": "Python"}, {"instruction": "Rewrite the following code snippet from an object-oriented programming perspective.", "input": "def find_greeting(name):\n    if name == \"Alice\":\n        return \"Hi Alice!\"\n    else:\n        return \"Hello!\"", "output": "This code snippet can be rewritten using an object-oriented programming approach by creating two classes - Greeting and Person. \n\nclass Person:\n    def __init__(self, name):\n        self.name = name\n\nclass Greeting:\n    def __init__(self):\n        self.greetings = {\"Alice\": \"Hi Alice!\",\n                          \"default\": \"Hello!\"}\n\n    def find_greeting(self, person):\n        if person.name in self.greetings:\n            return self.greetings[person.name]\n        else:\n            return self.greetings[\"default\"]", "category": "Python"}, {"instruction": "Write a JavaScript program to display the current day and time", "input": "", "output": "var d = new Date();\ndocument.getElementById(\"demo\").innerHTML = d.toString();", "category": "Python"}, {"instruction": "Write a Java statement to add two integers and print the result.", "input": "", "output": "int a = 1;\nint b = 2;\nSystem.out.println(a+b);", "category": "Python"}, {"instruction": "Create a class in C++ to store the rolling average of a stream of numbers.", "input": "", "output": "class RollingAverage {\n  private:\n    int windowSize;\n    int currentIndex;\n    double total;\n    std::vector<double> data;\n\n  public:\n    RollingAverage(int windowSize)\n        : windowSize(windowSize)\n        , currentIndex(0)\n        , total(0.0)\n        , data(windowSize) \n    { \n        for (int i = 0; i < windowSize; ++i) {\n            data.push_back(0.0);\n        }\n    }\n\n    void add(double value) {\n        int prevIndex = (currentIndex - 1 + windowSize) % windowSize;\n        total -= data[prevIndex];\n        total += value;\n        data[currentIndex] = value;\n        currentIndex = (currentIndex + 1) % windowSize;\n    }\n\n    double getAverage() {\n        return total / windowSize;\n    }\n};", "category": "Python"}, {"instruction": "Generate a SQL query to list the name of all tables in a database.", "input": "", "output": "SELECT \n  TABLE_NAME \nFROM \n  INFORMATION_SCHEMA.TABLES \nWHERE \n  TABLE_TYPE = 'BASE TABLE' \n  AND TABLE_SCHEMA = 'database_name';", "category": "Python"}, {"instruction": "Create a React component to render a table with data from an API.", "input": "const data = [\n  {name: 'Alice', age: 28, job: 'engineer'}, \n  {name: 'Bob', age: 30, job: 'teacher'},\n  {name: 'Charlie', age: 27, job: 'developer'}\n]", "output": "import React from 'react';\n\nconst dataTable = props => {\n  const { data } = props;\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Age</th>\n          <th>Job</th>\n        </tr>\n      </thead>\n      <tbody>\n        { data.map(item => (\n          <tr>\n            <td>{item.name}</td>\n            <td>{item.age}</td>\n            <td>{item.job}</td>\n          </tr>\n        )) }\n      </tbody>\n    </table>\n  );\n}\n\nexport default dataTable;", "category": "Python"}, {"instruction": "Given the input string, remove extra whitespace from the string using Java.", "input": "String s = \"     This     is    an example    string    \"", "output": "String s = s.replaceAll(\"\\\\s+\",\" \");\nSystem.out.println(s); // This is an example string", "category": "Python"}, {"instruction": "Reverse the order of the values in the input list using Python.", "input": "list = [1, 4, 5, 6, 7]", "output": "list = [7, 6, 5, 4, 1]\n\ndef reverse_list(input_list):\n    \"\"\"Reverse the order of the values in the input list.\"\"\"\n    return input_list[::-1]\n\nif __name__ == '__main__':\n    list = [1, 4, 5, 6, 7]\n    print(reverse_list(list))", "category": "Python"}, {"instruction": "Design a function in C that takes two input parameters and swap their values.", "input": "", "output": "void swap(int* a, int* b) \n{ \n    int temp = *a; \n    *a = *b; \n    *b = temp; \n}", "category": "Python"}, {"instruction": "Write an HTML snippet that contains two input field.", "input": "", "output": "<form>\n    Name: <input type=\"text\" name=\"name\"><br>\n    Age:  <input type=\"text\" name=\"age\"><br>\n</form>", "category": "Python"}, {"instruction": "Write a function in Python to move the last element of a given list to the beginning of the list.", "input": "", "output": "def move_last_to_front(list):\n  list[0], list[-1] = list[-1], list[0]\n  return list", "category": "Python"}, {"instruction": "Edit this HTML snippet such that it displays 'Hello World' in bold.", "input": "<div>Hello World</div>", "output": "<div><b>Hello World</b></div>", "category": "Python"}, {"instruction": "Write a JavaScript function that takes an input string and replaces all occurrences of the letter 'e' with an asterisk.", "input": "input_string = \"Hello World!\"", "output": "function replace_with_asterisk(string) {\n    return string.replace(/e/g, '*');\n}", "category": "Python"}, {"instruction": "Modify the following SQL query so that it only returns the customers from the city \"New York\".", "input": "SELECT * \nFROM Customer", "output": "SELECT * \nFROM Customer\nWHERE city = \"New York\"", "category": "Python"}, {"instruction": "Write a Python snippet to print the same message 10 times.", "input": "", "output": "for _ in range(10):\n  print(\"Hello World!\")", "category": "Python"}, {"instruction": "Create a C++ program that takes in two integers, x and y, and prints the result of x divided by y.", "input": "", "output": "#include <iostream>\n\nint main() {\n int x, y;\n std::cin >> x >> y\n std::cout << x/y << std::endl;\n return 0;\n}", "category": "Python"}, {"instruction": "Design a function in Java that takes in a string and returns true if the string contains the letter \"a\" and false otherwise.", "input": "", "output": "public static boolean hasLetterA(String s){\n  return s.contains(\"a\");\n}", "category": "Python"}, {"instruction": "Create a while loop in JavaScript that reverses an array and prints each element to the console.", "input": "[1, 2, 3, 4, 5]", "output": "let arr = [1, 2, 3, 4, 5];\nlet i = arr.length-1;\nwhile(i >= 0){\n  console.log(arr[i]);\n  i--;\n}", "category": "Python"}, {"instruction": "Modify the following SQL query so that it returns all the customers whose first names begin with the letter \"A\".", "input": "SELECT * \nFROM Customer", "output": "SELECT * \nFROM Customer\nWHERE first_name LIKE \"A%\"", "category": "Python"}, {"instruction": "Write a Python snippet to print from 1 to 10 (inclusive) using a for loop", "input": "", "output": "for i in range(1, 11):\n  print(i)", "category": "Python"}, {"instruction": "Write a function in JavaScript to get the first 10 prime numbers.", "input": "", "output": "function getFirstTenPrimeNumbers() {\n  let primeNumbers = [];\n  let num = 2;\n  while (primeNumbers.length < 10) {\n    if (isPrime(num)) {\n      primeNumbers.push(num);\n    }\n    num++;\n  }\n  return primeNumbers;\n}\n\nfunction isPrime(num) {\n  for(let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}", "category": "Python"}, {"instruction": "Create a function in Python to generate a list of consecutive natural numbers starting from 1 up to a given number.", "input": "n = 8", "output": "def gen_list_of_consecutive_numbers(n):\n    \"\"\"Generate a list of consecutive natural numbers up to a given number n\"\"\"\n    return list(range(1, n + 1))\n\nif __name__ == '__main__':\n    n = 8\n    print(gen_list_of_consecutive_numbers(n))", "category": "Python"}, {"instruction": "Create a web page with a JavaScript function to search for a product in a product inventory using user input.", "input": "const products = [\n  {name: \"iPhone\", price: 499},\n  {name: \"MacBook Pro\", price: 1499},\n  {name: \"iPad Pro\", price: 799},\n];", "output": "<html>\n  <head>\n    <title>Product Search</title>\n  </head>\n  <body>\n    <h1>Product Search</h1>\n    <div>\n      <input type=\"text\" id=\"search\" />\n      <button type=\"button\" onclick=\"searchProducts()\">Search</button>\n    </div>\n    <ul id=\"products\"></ul>\n    <script>\n      const products = [\n        {name: \"iPhone\", price: 499},\n        {name: \"MacBook Pro\", price: 1499},\n        {name: \"iPad Pro\", price: 799},\n      ];\n\n      function searchProducts() {\n        let query = document.getElementById('search').value;\n\n        let filteredProducts = products.filter(\n          product => product.name.includes(query)\n        );\n\n        let productsList = document.getElementById('products');\n        productsList.innerHTML = '';\n\n        for (let product of filteredProducts) {\n          let newElement = document.createElement('li');\n          newElement.innerHTML = `${product.name} - ${product.price}$`;\n          productsList.appendChild(newElement);\n        }\n      }\n    </script>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create a Python script to combine two lists into a dictionary", "input": "list1 = [1, 2, 3]\nlist2 = [\"a\", \"b\", \"c\"]", "output": "list1 = [1, 2, 3]\nlist2 = [\"a\", \"b\", \"c\"]\n\ndef combine_lists(list1, list2):\n    \"\"\"Combine two lists into a dictionary\"\"\"\n    return {key: value for key, value in zip(list1, list2)}\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3]\n    list2 = [\"a\", \"b\", \"c\"]\n    print(combine_lists(list1, list2))", "category": "Python"}, {"instruction": "Create a CSS property for displaying text in bold font.", "input": "", "output": "font-weight: bold;", "category": "Python"}, {"instruction": "How could you write a PHP statement to make a string uppercase?", "input": "", "output": "$string = strtoupper($string);", "category": "Python"}, {"instruction": "Create a JS object property with a string value.", "input": "", "output": "let obj = {\n  name:\"John Smith\"\n};", "category": "Python"}, {"instruction": "What data structure should we use to solve this problem?", "input": "We want to store a list of names and their associated addresses, and then look up names quickly.", "output": "A HashMap is the best data structure for this use case because it provides the ability to quickly look up values when given the associated key (name in this case).", "category": "Python"}, {"instruction": "Construct an if-else conditional statement for this situation.", "input": "If the number is greater than 0, print \"Positive\", otherwise print \"Negative\".", "output": "if (number > 0) {\n  System.out.println(\"Positive\");\n} else {\n  System.out.println(\"Negative\");\n}", "category": "Python"}, {"instruction": "Write a Java program to read the following text and count the number of words in the given sentence.", "input": "This is a sample sentence.", "output": "import java.util.*;\n\npublic class CountWords {\n  public static void main(String[] args) {\n    String str = \"This is a sample sentence.\";\n    int wordCount = 0;\n    for (int i = 0; i < str.length(); i++) {\n      if ((str.charAt(i) == ' ') || (str.charAt(i) == '.')) {\n        wordCount++;\n      }\n    }\n    System.out.println(\"The number of words in the given sentence is \" + (wordCount + 1));\n  }\n}", "category": "Python"}, {"instruction": "Construct a PHP function to log the user out of the system.", "input": "", "output": "function logout() {\n  session_destroy();\n  header('Location:index.php');\n  exit;\n}", "category": "Python"}, {"instruction": "Construct an array in Python of size 10 and fill it with random integers from 0 to 5.", "input": "", "output": "import random\n\narray = []\nfor i in range(10):\n  array.append(random.randint(0,5))\n  \nprint(array)", "category": "Python"}, {"instruction": "Construct a regular expression to search the data.", "input": "Search for all words starting with 'Foo'.", "output": "^Foo\\w*", "category": "Python"}, {"instruction": "Edit the following code to make the output more reusable.", "input": "def get_name(names):\n    print(\"Here's my name:\")\n    for name in names:\n        print(name)\n    return", "output": "def get_name(names):\n    result = []\n    for name in names:\n        result.append(name)\n    return result", "category": "Python"}, {"instruction": "Construct the code which will generate addition equations with randomized numbers ranging from 0 to 5.", "input": "", "output": "import random\n\ndef generate_addition_equation():\n\n    a = random.randrange(0, 6)\n    b = random.randrange(0, 6)\n\n    equation = str(a) + \" + \" + str(b) + \" = \"\n\n    return equation", "category": "Python"}, {"instruction": "Using the function you wrote in 4.\nWrite a Python program to convert a binary list to an integer", "input": "binary_list = [1, 0, 1, 0]", "output": "def binary_list_to_int(binary_list):\n    return int(''.join(str(x) for x in binary_list), 2)", "category": "Python"}, {"instruction": "Create a web page with a React component to fetch data from an API and display it in a table.", "input": "", "output": "import React, { useState, useEffect } from 'react';\n\nfunction Table(props) {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetch('https://example.com/data.json')\n      .then(response => response.json())\n      .then(json => setData(json))\n  }, []);\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Age</th>\n          <th>Job</th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.map(item => (\n          <tr>\n            <td>{item.name}</td>\n            <td>{item.age}</td>\n            <td>{item.job}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default Table;", "category": "Python"}, {"instruction": "Query all values from the table \"users\" in a MySQL database and sort them by descending order of the column \"age\".", "input": "", "output": "SELECT * FROM users ORDER BY age DESC;", "category": "Python"}, {"instruction": "Create a function to calculate the sum of the first n natural numbers using JavaScript.", "input": "", "output": "function sumOfFirstNNaturalNumbers(n) {\n  let sum = 0;\n  for (let i = 0; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\nconst n = 5;\nconsole.log(sumOfFirstNNaturalNumbers(n)); // 15", "category": "Python"}, {"instruction": "Add a new key-value pair (\"year\": 2020) to the given dictionary using Python.", "input": "dictionary = {\"name\": \"John\", \"age\": 30}", "output": "dictionary = {\"name\": \"John\", \"age\": 30}\n\ndef add_year(dictionary):\n    \"\"\"Add a new key-value pair (\"year\": 2020) to the dictionary\"\"\"\n    dictionary[\"year\"] = 2020\n    return dictionary\n\nif __name__ == '__main__':\n    dictionary = {\"name\": \"John\", \"age\": 30}\n    print(add_year(dictionary))", "category": "Python"}, {"instruction": "Create a Python program that takes two lists as arguments, and returns a list that contains the elements present in both lists.", "input": "list1 = [2, 3, 4, 5] \nlist2 = [1, 4, 6]", "output": "def common_elements_of_two_lists(list1, list2): \n    result = [] \n    for element in list1: \n        if element in list2: \n            result.append(element) \n    return result", "category": "Python"}, {"instruction": "In C++, write a code snippet to print \"Welcome to GeeksforGeeks\" 10 times using a for loop.", "input": "", "output": "for (int i = 0; i < 10; i++) {\n  cout << \"Welcome to GeeksforGeeks\" << endl;\n}", "category": "Python"}, {"instruction": "Edit the given code snippet to generate a table in HTML with four columns and three rows.", "input": "<table></table>", "output": "<table>\n    <tr>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td></td>\n    </tr>\n    <tr>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td></td>\n    </tr>\n    <tr>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td></td>\n    </tr>\n</table>", "category": "Python"}, {"instruction": "Write a SQL statement to query the names of all employees from the Employees table whose salary is less than 3000.", "input": "", "output": "SELECT name FROM Employees WHERE salary < 3000;", "category": "Python"}, {"instruction": "Write an Angular component to display a list of books.", "input": "bookList = [\n  {name: \u2018The Aeneid\u2019, author: \u2018Virgil\u2019},\n  {name: \u2018The Odyssey\u2019, author: \u2018Homer\u2019},\n  {name: \u2018The Divine Comedy\u2019, author: \u2018Dante\u2019}\n]", "output": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-book-list',\n  templateUrl: './book-list.component.html',\n  styleUrls: ['./book-list.component.css']\n})\nexport class BookListComponent implements OnInit {\n\n  bookList = [\n    {name: 'The Aeneid', author: \u2018Virgil\u2019},\n    {name: \u2018The Odyssey\u2019, author: 'Homer\u2019},\n    {name: \u2018The Divine Comedy\u2019, author: \u2018Dante\u2019}\n  ];\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n\n<ul>\n  <li *ngFor=\"let book of bookList\">{{book.name}} - {{book.author}}</li>\n</ul>", "category": "Python"}, {"instruction": "Write a query in Redis to get all the keys starting with 'user:'.", "input": "", "output": "KEYS user:*", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to highlight the text 'Welcome' in the following string.", "input": "const string = \"Welcome to my website!\"", "output": "const string = \"Welcome to my website!\";\n\nconst highlightString = (str, highlight) => {\n  const startStringIndex = str.indexOf(highlight);\n  return (\n    str.slice(0, startStringIndex) +\n    \"<span class='highlight'>\" +\n    str.slice(startStringIndex, startStringIndex + highlight.length) +\n    \"</span>\" +\n    str.slice(startStringIndex + highlight.length)\n  );\n};\n\ndocument.body.innerHTML = highlightString(string, \"Welcome\");", "category": "Python"}, {"instruction": "Write an SQL query to display all columns from the table 'products', sorted in descending order by price.", "input": "", "output": "SELECT * FROM products ORDER BY price DESC;", "category": "Python"}, {"instruction": "Using C++, create a program to calculate the volume of a rectangular prism given the length, width and height.", "input": "", "output": "\"\"\"\nUsing C++, create a program to calculate the volume of a rectangular prism given the length, width and height.\n\"\"\"\n#include <iostream>\n\nint main() \n{\n    double length, width, height;\n    \n    // Prompt for the dimensions\n    std::cout << \"Enter the length, width and height: \";\n    std::cin >> length >> width >> height;\n    \n    // Calculate the volume\n    double volume = length * width * height;\n    \n    // Print the volume\n    std::cout << \"The volume of the rectangular prism is: \" << volume << std::endl;\n    \n    return 0;\n}", "category": "Python"}, {"instruction": "Construct a MySQL query to select all customers from the database whose last name starts with 'S'.", "input": "", "output": "SELECT * FROM customers WHERE last_name LIKE 'S%';", "category": "Python"}, {"instruction": "From a list of numbers, find the smallest number using Python.", "input": "[21, 9, 67, 34]", "output": "\"\"\"\nFrom a list of numbers, find the smallest number using Python.\n\"\"\"\n\n# Initialize the list of numbers\nlist_of_nums = [21, 9, 67, 34]\n\n# Sort the list in order\nlist_of_nums.sort()\n\n# Print the first element of the sorted list\nprint(list_of_nums[0])", "category": "Python"}, {"instruction": "Using Java, create a program to compute the area of a circle given the radius.", "input": "", "output": "\"\"\"\nUsing Java, create a program to compute the area of a circle given the radius.\n\"\"\"\n \npublic class AreaCircle {\n   public static void main(String[] args) {\n      double radius = 7.5;\n      double area;\n   \n      area = Math.PI * Math.pow(radius, 2);\n      System.out.println(\"Area of the circle is: \" + area);\n   }\n}", "category": "Python"}, {"instruction": "Write a MySQL query to select all customers who have a birthday in the month of May.", "input": "", "output": "SELECT * FROM customers WHERE MONTH(birth_date) = 5;", "category": "Python"}, {"instruction": "Sort all strings in a list alphabetically, using Python.", "input": "[\"apple\", \"dog\", \"cat\", \"banana\"]", "output": "\"\"\"\nSort all strings in a list alphabetically, using Python.\n\"\"\"\n\n# Initialize the list of strings\nlist_of_strings = [\"apple\", \"dog\", \"cat\", \"banana\"]\n\n# Sort the list alphabetically\nlist_of_strings.sort()\n\n# Print the sorted list\nprint(list_of_strings)", "category": "Python"}, {"instruction": "Write a HTML code to display a hyperlink with the text \"GitHub\" and point it to the github.com website.", "input": "", "output": "<a href=\"https://github.com/\">GitHub</a>", "category": "Python"}, {"instruction": "Write a Python program to convert a string to a list. The string is \"This is a test\".", "input": "\"This is a test\"", "output": "\"\"\"\nWrite a Python program to convert a string to a list.\n\"\"\"\ndef string_to_list(str):\n    return str.split()\n\nif __name__ == '__main__':\n    str = \"This is a test\"\n    print(string_to_list(str))", "category": "Python"}, {"instruction": "Write a bash script to find the sum of two integers.", "input": "", "output": "#!/bin/bash\n\na=$1\nb=$2\nsum=$((a + b)) \necho $sum", "category": "Python"}, {"instruction": "Use the given array to construct the appropriate loop structure to replace the \"TODO\" comment in the code.", "input": "const array = [1, 2, 3, 4, 5];", "output": "for (let i = 0; i < array.length; i++) {\n  // TODO\n}", "category": "Python"}, {"instruction": "Create a SQL query to get the top 10 salaries from a given table.", "input": "", "output": "SELECT TOP 10 salary \nFROM TableName \nORDER BY salary DESC;", "category": "Python"}, {"instruction": "Write a function in Java to convert hours to minutes.", "input": "", "output": "public static int hoursToMinutes(int hours) {\n    return hours * 60;\n}", "category": "Python"}, {"instruction": "Calculate the total surface area of a rectangular prism with length 10 cm, width 8 cm, and height 5 cm.", "input": "", "output": "Total surface area of a rectangular prism = 2(lw + lh + wh)\n= 2(10 x 8 + 10 x 5 + 8 x 5) \n= 2(80 + 50 + 40) \n= 220 cm2", "category": "Python"}, {"instruction": "What is the value of Dirac's constant?", "input": "", "output": "The value of Dirac's constant, also known as the reduced Planck constant, is 6.62607015 \u00d7 10-34 J\u22c5s.", "category": "Python"}, {"instruction": "Write a function in C++ to print the even numbers between 1 to 10.", "input": "", "output": "void printEven(int n){\n  for(int i=1;i<=n;++i){\n    if (i % 2 == 0)\n      cout<< i <<\" \";\n  }\n}", "category": "Python"}, {"instruction": "Create an object that returns the value of the given array.", "input": "[1,2,3,4]", "output": "obj = {1:1, 2:2, 3:3, 4:4}", "category": "Python"}, {"instruction": "Change the following variable declaration into Python.", "input": "int num = 10;", "output": "num = 10", "category": "Python"}, {"instruction": "Print the 3rd to 5th characters in a given string.", "input": "string = \"Hello World\"", "output": "def print_chars(string):\n    print(string[2:5])", "category": "Python"}, {"instruction": "Create an array with 10 elements and populate it with zeros.", "input": "", "output": "a = [0] * 10", "category": "Python"}, {"instruction": "Parse a given string and reverse the order of words.", "input": "string = 'My name is John'", "output": "def reverse_words(string):\n    words = string.split(' ')\n    reversed_words = ' '.join(words[::-1])\n    return reversed_words", "category": "Python"}, {"instruction": "Write code to check if the word 'python' is present in a given string.", "input": "string = 'I love the programming language Python'", "output": "def string_has_python(string):\n  return 'python' in string", "category": "Python"}, {"instruction": "Given a list of strings, write a Python program to print each individual string in uppercase.", "input": "string_list = [\"apple\",\"banana\",\"oranges\"]", "output": "def print_uppercase(string_list):\n  for string in string_list:\n    print(string.upper())", "category": "Python"}, {"instruction": "Construct the loop in the code to find the maximum element in a non-empty array.", "input": "int maxNum = array[0];", "output": "for(int i = 0; i < array.length; i++) {\n  int currentNum = array[i];\n  if (currentNum > maxNum) { maxNum = currentNum; }\n}", "category": "Python"}, {"instruction": "Generate a list containing all positive integers between 1 and 10.", "input": "", "output": "positive_integers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Create a relational database with the following table structure:", "input": "", "output": "CREATE DATABASE My_Database;\n\nUSE My_Database;\n\nCREATE TABLE Employees (\n    Employee_ID INT PRIMARY KEY,\n    Name VARCHAR(255),\n    Age INT\n);", "category": "Python"}, {"instruction": "Write a class in Java to submit a form.", "input": "", "output": "public class Form {\n\n  public void submitForm(){\n    // code to submit the form  \n  }\n\n}", "category": "Python"}, {"instruction": "Construct a SQL statement to fetch records from the Sales table where the status is \"active\".", "input": "Table Name: Sales\nColumn Name: Status", "output": "SELECT * FROM Sales WHERE Status = 'active';", "category": "Python"}, {"instruction": "Design an algorithm in C to find all substrings of a given string.", "input": "", "output": "void findAllSubstrings(char * str) \n{ \n    int n = strlen(str); \n  \n    /* Pick starting point in outer loop \n       and lengths of different strings for \n       a given starting point*/\n    for (int len = 1; len <= n; len++) \n        for (int i = 0; i <= n - len; i++) \n            printSubStr(str, i, i + len - 1); \n} \n  \n/* Print the substring between beg and end */\nvoid printSubStr(char *str, int beg, int end) \n{ \n    for (int i = beg; i <= end; i++) \n        printf(\"%c\", str[i]); \n  \n    printf(\"\\n\"); \n}", "category": "Python"}, {"instruction": "Write CSS code to make the background of the page purple with a font style of italicized.", "input": "", "output": "body {\n  background-color: purple;\n  font-style: italic;\n}", "category": "Python"}, {"instruction": "Convert the following time from Central Daylight time to Eastern Standard time: 15:00.", "input": "", "output": "15:00 Central Daylight Time is equivalent to 16:00 Eastern Standard Time.", "category": "Python"}, {"instruction": "Write a JavaScript code for the following action: When the user types \"I'm hungry!\" in the text box, the system will show an alert saying \"Go make some food then!\".", "input": "", "output": "document.getElementById(\"textbox\").addEventListener(\"input\", function(){\n  if (this.value == \"I'm hungry!\") {\n    alert(\"Go make some food then!\");\n  }\n});", "category": "Python"}, {"instruction": "Create a function that returns a substring of a given string.", "input": "string = 'This is a sample string'", "output": "def get_substring(string, start, end):\n    return string[start:end]", "category": "Python"}, {"instruction": "Construct an HTML page using semantic elements to display a heading with \"Hello World!\".", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Hello World!</title>\n</head>\n<body>\n  <h1>Hello World!</h1>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create a RNN model to predict the next character in a given string.", "input": "", "output": "model = Sequential()\nmodel.add(LSTM(128, input_shape=(sequence_length, n_unique_characters)))\nmodel.add(Dense(n_unique_characters, activation='softmax'))", "category": "Python"}, {"instruction": "Given a 2-d array, write a method to flatten the array.", "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def flatten(arr):\n    flat_list = []\n    for sublist in arr:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list", "category": "Python"}, {"instruction": "Write a code in C# to create a ranking system for 5 players based on their scores.", "input": "Player1 : 23 \nPlayer2 : 20 \nPlayer3 : 15 \nPlayer4 : 33 \nPlayer5 : 5", "output": "Console.WriteLine(\"Leaderboard\"); \n \n// create a sorted dictionary of players and scores\nvar leaderboard = new SortedDictionary<string, int>(); \n \nleaderboard.Add(\"Player1\", 23); \nleaderboard.Add(\"Player2\", 20); \nleaderboard.Add(\"Player3\", 15); \nleaderboard.Add(\"Player4\", 33); \nleaderboard.Add(\"Player5\", 5); \n \n// iterate through sorted dictionary and print rankings\nint rank = 1; \nforeach(KeyValuePair<string, int> pair in leaderboard) { \n Console.WriteLine(rank + \". \" + pair.Key + \" : \" + pair.Value); \n rank++; \n}", "category": "Python"}, {"instruction": "Write a query in MongoDB to find all documents which have a count greater than 10.", "input": "", "output": "db.collection.find( { count: { $gt: 10 } } )", "category": "Python"}, {"instruction": "What is the most popular software development language?", "input": "", "output": "The most popular software development language is currently JavaScript, according to Stack Overflow's 2020 Developer Survey. JavaScript is used by 69.8% of software developers, followed by HTML/CSS at 63.1% and SQL at 54.2%.", "category": "Python"}, {"instruction": "Develop a function in Java to print the fibonacci series up to 10 numbers.", "input": "", "output": "public class FibonacciSeries { \n  \n    static void printFibonacci(int n) { \n        int f1 = 0, f2 = 1; \n  \n        if (n < 1) \n            return; \n  \n        for (int i = 1; i <= n; i++) { \n            System.out.print(f2 + \" \"); \n            int next = f1 + f2; \n            f1 = f2; \n            f2 = next;  \n        } \n    } \n  \n    public static void main(String[] args) { \n        int n = 10; \n        printFibonacci(n); \n    } \n}", "category": "Python"}, {"instruction": "Create a function in Javascript that validates a user input as a valid email address.", "input": "", "output": "function validateEmail(email) {\n    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n}", "category": "Python"}, {"instruction": "Write a query in SQLite to select the records which have a price lower than 50.", "input": "", "output": "SELECT * FROM Products WHERE Price < 50;", "category": "Python"}, {"instruction": "What is the difference between a software engineer and a software developer?", "input": "", "output": "Software engineers focus on developing and building software. They design software, maintenance and testing. They may also be involved in the development of applications, the creation of databases, and hardware integration. \n \nSoftware developers focus on coding, debugging, testing and maintenance of existing software. Developers may also be involved in the development of new applications. They are generally experts in one or more programming languages.", "category": "Python"}, {"instruction": "Develop a program in Java that prints out the following star pattern.", "input": "", "output": "public class Stars {\n    public static void main(String[] args) {\n        for (int i = 1; i <= 5; i++) {\n            for (int j = 0; j < i; j++) {\n                System.out.print(\"*\");\n            }\n            System.out.println();\n        }\n    }\n}", "category": "Python"}, {"instruction": "Develop a function in Java that prints out the squares of all numbers between 1 and 10.", "input": "", "output": "public void printSquares(){\n   for(int i=1; i<=10; i++){\n      System.out.println(i*i);\n   }\n}", "category": "Python"}, {"instruction": "Write a SQL query to find the customer id, name, and salary of the customers whose salary is in the range 2000-6000.", "input": "", "output": "SELECT customer_id, customer_name, customer_salary \nFROM customers \nWHERE customer_salary >= 2000 AND customer_salary <= 6000;", "category": "Python"}, {"instruction": "Using the HTML provided, add an ID attribute to the div tag to specify the unique identifier \"box1\"", "input": "<div>Hello World!</div>", "output": "<div id=\"box1\">Hello World!</div>", "category": "Python"}, {"instruction": "Create a function in JavaScript that takes in two arrays and returns an object. The object should contain elements where the two arrays have coinciding elements.", "input": "[1,3,5], [2,4,1]", "output": "function findCommon(arr1, arr2) {\n    let result = {};\n    for (let i = 0; i < arr1.length; i++) {\n        for (let j = 0; j< arr2.length; j++) {\n            if(arr1[i] === arr2[j]) {\n                result[arr1[i]] = arr2[j];\n            }\n        }\n    }\n    return result;\n}\n\n\nconsole.log(findCommon([1,3,5], [2,4,1]));\n// Output: {1: 1}", "category": "Python"}, {"instruction": "Write a regular expression to match the email address \"test@example.com\".", "input": "", "output": "^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}$", "category": "Python"}, {"instruction": "Design a SQL query to find all records from the table \"Users\" where the user's name is \"John\".", "input": "", "output": "SELECT *\nFROM Users\nWHERE name = 'John';", "category": "Python"}, {"instruction": "Create an array of four different colors in JavaScript.", "input": "", "output": "let colors = [\"red\", \"green\", \"blue\", \"yellow\"];", "category": "Python"}, {"instruction": "Create a loop in Python to find the sum of all integers from 1 to 100.", "input": "", "output": "total = 0\nfor num in range(1, 101): \n    total+= num \n\nprint(\"Sum of all integers from 1 to 100 is\", total)", "category": "Python"}, {"instruction": "Visualize the following dataset using a bar chart in matplotlib.", "input": "labels = ['A', 'B', 'C', 'D', 'E', 'F']\nvalues = [8, 5, 7, 12, 4, 10]", "output": "import matplotlib.pyplot as plt\n\nlabels = ['A', 'B', 'C', 'D', 'E', 'F']\nvalues = [8, 5, 7, 12, 4, 10]\n\nplt.bar(labels, values)\nplt.title('Dataset')\nplt.xlabel('Category') \nplt.ylabel('Value')\nplt.show()", "category": "Python"}, {"instruction": "Write a Python script to display the numbers from 1 to 10 in ascending order.", "input": "", "output": "for num in range(1, 11):\n    print(num)", "category": "Python"}, {"instruction": "Create a form in HTML that asks a user to enter their name, age and address.", "input": "", "output": "<form action=\"form_process.php\" method=\"post\">\n  <label for=\"name\">Name:</label><br>\n  <input type=\"text\" id=\"name\" name=\"name\"><br><br>\n  <label for=\"age\">Age:</label><br>\n  <input type=\"text\" id=\"age\" name=\"age\"><br><br>\n  <label for=\"address\">Address:</label><br>\n  <textarea id=\"address\" name=\"address\" rows=\"5\" cols=\"30\"></textarea><br><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Construct a switch-case statement in JavaScript to print the day of the week.", "input": "var day_index = 5;", "output": "switch (day_index) {\n  case 0:\n    console.log('Monday');\n    break;\n  case 1:\n    console.log('Tuesday');\n    break;\n  case 2:\n    console.log('Wednesday');\n    break;\n  case 3:\n    console.log('Thursday');\n    break;\n  case 4:\n    console.log('Friday');\n    break;\n  case 5:\n    console.log('Saturday');\n    break;\n  case 6:\n    console.log('Sunday');\n    break;\n}", "category": "Python"}, {"instruction": "Write a filter function in JavaScript to return elements from an array of strings which start with the letter \"a\".", "input": "var words = [\"apple\", \"ball\", \"cat\", \"almond\"]", "output": "function filterByLetter(arr, letter) {\n  return arr.filter(word => word.startsWith(letter));\n}\n\nconsole.log(filterByLetter(words, 'a')); // [\"apple\", \"almond\"]", "category": "Python"}, {"instruction": "Create a Java class to represent a point in 2D space using two fields, x and y.", "input": "", "output": "public class Point {\n    private double x;\n    private double y;\n    \n    public Point(double x, double y){\n        this.x = x;\n        this.y = y;\n    }\n    \n    public double getX() {\n        return x;\n    }\n    \n    public double getY() {\n        return y;\n    }\n    \n    public void setX(double x) {\n        this.x = x;\n    }\n    \n    public void setY(double y) {\n        this.y = y;\n    }\n}", "category": "Python"}, {"instruction": "Calculate the sales tax given a price and a tax rate.", "input": "price = 30\ntax rate = 0.075", "output": "total_tax = 30 * 0.075 = 2.25", "category": "Python"}, {"instruction": "Estimate the value of pi to four decimal places.", "input": "", "output": "The estimated value of pi is 3.1416.", "category": "Python"}, {"instruction": "Create a dictionary to store the marks of students in a class.", "input": "Johnny: 85\nJane: 95\nTom: 75", "output": "marks = { 'Johnny': 85, 'Jane': 95, 'Tom': 75 }", "category": "Python"}, {"instruction": "Find the first prime number larger than 100.", "input": "", "output": "The first prime number larger than 100 is 101.", "category": "Python"}, {"instruction": "Calculate the total cost of an order including shipping and taxes, given the following input:", "input": "shipping cost = 10\ntax rate = 0.1\nbase price = 100", "output": "total_cost = 110 + (100 * 0.1) = 120", "category": "Python"}, {"instruction": "Alter the following python code such that it prints \"Hello, world!\"", "input": "for x in range(1,10):\n    print(x)", "output": "for x in range(1,10):\n    if x == 5:\n        print('Hello, world!')\n    else:\n        print(x)", "category": "Python"}, {"instruction": "Explain why the following code prints \"false\":", "input": "print(True is False)", "output": "The code prints \"false\" because when you use the 'is' operator on boolean values, it checks whether the two values are the same object or not.\nTrue and False are two different objects in Python and they are not the same, so the expression evaluates to False.", "category": "Python"}, {"instruction": "Construct a class in Python named \"Person\" which stores first name and last name in instance variables", "input": "", "output": "class Person:\n  def __init__(self, first_name, last_name):\n    self.first_name = first_name\n    self.last_name = last_name", "category": "Python"}, {"instruction": "Create an array in JavaScript to store the elements \"apple\", \"orange\", \"banana\", \"mango\".", "input": "", "output": "var fruits = [\"apple\", \"orange\", \"banana\", \"mango\"];", "category": "Python"}, {"instruction": "Construct a \"try catch\" statement in JavaScript which prints \"Value must be an integer\" if a variable x is not an integer.", "input": "let x = \"string\";", "output": "try {\n  if (typeof( x ) !== 'number') {\n    throw \"Value must be an integer\";\n  }\n}\ncatch(err) {\n  console.log(err);\n}", "category": "Python"}, {"instruction": "Compose an SQL statement to select the column \"name\" from the table \"students\" only where the student's age is greater than 25.", "input": "", "output": "SELECT name FROM students WHERE age > 25;", "category": "Python"}, {"instruction": "Create a function in Python to take two numbers as input and return their sum.", "input": "", "output": "def add_nums(num1, num2):\n    return num1 + num2", "category": "Python"}, {"instruction": "Generate a properly formatted JSON object in Python to represent the following details: name = John, age = 34", "input": "", "output": "{\n  \"name\": \"John\",\n  \"age\": 34\n}", "category": "Python"}, {"instruction": "Create a boolean expression in JavaScript, which returns false if a variable named \"result\" is an empty string.", "input": "var result = '';", "output": "if (result === '') {\n  var result = false;\n}", "category": "Python"}, {"instruction": "Generate an \"if else\" statement in JavaScript to check if a variable x is greater than 10.", "input": "var x = 20;", "output": "if (x > 10) {\n  console.log('x is greater than 10');\n} else {\n  console.log('x is not greater than 10');\n}", "category": "Python"}, {"instruction": "Print out the names of even numbered elements from the given list.", "input": "list_of_names = [\"John\", \"Jacob\", \"Michael\", \"Peter\", \"Paul\"]", "output": "for i in range(0, len(list_of_names), 2):\n    print(list_of_names[i])", "category": "Python"}, {"instruction": "Evaluate the given algebraic expression by substituting 4 for x.", "input": "expression = 2x + 6", "output": "expression = 2 * 4 + 6 = 14", "category": "Python"}, {"instruction": "Create a list comprehension that returns the even numbers in a given list.", "input": "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "output": "even_nums = [num for num in my_list if num % 2 == 0]", "category": "Python"}, {"instruction": "Write a C program that prints the even numbers between 1 and 10.", "input": "", "output": "#include <stdio.h>\n\nint main() \n{\n    for (int i = 1; i <= 10; i++) \n    {\n        if (i % 2 == 0) \n            printf(\"%d\\n\", i);\n    }\n    return 0;\n}", "category": "Python"}, {"instruction": "Write a Haskell code snippet to find the length of a given list.", "input": "", "output": "length :: [a] -> Int\nlength [] = 0\nlength (_:xs) = 1 + (length xs)", "category": "Python"}, {"instruction": "Explain what a stack is and its uses.", "input": "", "output": "A stack is an abstract data structure which follows the Last In First Out (LIFO) principle, meaning that the last element that was added to the stack is the first element that will be removed from the stack. Stacks are used to implement functions such as undo/redo, back/forward, and recursion. They are also used to efficiently evaluate arithmetic expressions, store temporary data, and to perform traversal and searching algorithms.", "category": "Python"}, {"instruction": "Name three techniques used to debug a program.", "input": "", "output": "Three techniques used to debug a program are: 1) Printing debugging messages to track the state of the variables; 2) Stepping through code execution to find the source of the bug; and 3) Testing the code through a series of test cases to uncover any issues.", "category": "Python"}, {"instruction": "Write a Ruby function that takes two strings, s and t, as arguments and returns true if s is a substring of t, and false otherwise.", "input": "", "output": "def is_substring(s, t) \n  return t.include?(s)\nend", "category": "Python"}, {"instruction": "Describe what a hash function is.", "input": "", "output": "A hash function is a function which maps a given input of arbitrary or variable length to a fixed length output. It is deterministic, meaning that the same input will always result in the same output, and it is a one-way function, meaning that it is not possible to reconstruct the input from the output. The main purpose of a hash function is to act as a digital fingerprint for data or messages, allowing them to be quickly compared with other fingerprints to determine whether they are the same or different.", "category": "Python"}, {"instruction": "Edit the following HTML to have a green background color.", "input": "<div>This is a div element</div>", "output": "<div style=\"background-color: green;\">This is a div element</div>", "category": "Python"}, {"instruction": "What is the purpose of the for-each loop in Java?", "input": "", "output": "The for-each loop in Java is a type of loop that is used to iterate over a collection, such as an array or a list. The for-each loop simplifies the process of writing loops and makes them more readable. It also allows the loop to run faster, since the loop variable does not need to be updated or declared each time through the loop. This makes the loop more efficient, since the operations are performed on all elements of the collection, not just on some of them.", "category": "Python"}, {"instruction": "Write a SQL query that retrieves the owner's id, name, and address of a specific car.", "input": "Table: cars \nColumns: id, car_name, owner_id, owner_name, owner_address\nCar Name: \"Toyota Corolla\"", "output": "SELECT owner_id, owner_name, owner_address\nFROM cars \nWHERE car_name = \"Toyota Corolla\";", "category": "Python"}, {"instruction": "Explain why object-oriented programming is useful?", "input": "", "output": "Object-oriented programming (OOP) is a programming paradigm that uses objects and their interactions to design applications and computer programs. OOP allows for efficient development and maintenance of large scale software systems by allowing developers to create objects which have their own independent properties and methods. OOP programming also provides for abstraction, which allows for complex software systems to be broken down into simpler, more manageable components. OOP also provides for better code reuse, which allows developers to easily reuse code that has been written before, instead of having to rewrite it from scratch. Finally, OOP allows for better data security, as all data related to an object can be stored in one place and accessed only by that object, which makes it more difficult for malicious actors to access or tamper with a system's data.", "category": "Python"}, {"instruction": "Find the lowest common multiple of two numbers a and b.", "input": "a = 12, b = 15", "output": "def lcm(a, b):\n    lcm_num = (a * b) // math.gcd(a, b)\n    return lcm_num\n \nlcm(12, 15)  # 60", "category": "Python"}, {"instruction": "You need to read a code and count the number of lines of code.", "input": "def function(a, b):\n    c = a + b\n    d = a * b\n    return c + d", "output": "def count_lines_of_code(code):\n    lines = code.splitlines()\n    return len(lines)\n\nif __name__ == '__main__':\n    code=\"\"\"\ndef function(a, b):\n    c = a + b\n    d = a * b\n    return c + d\n    \"\"\"\n    print(count_lines_of_code(code))", "category": "Python"}, {"instruction": "Write a code to check if one given string is a substring of another.", "input": "string1=\"programming\"\nstring2=\"gram\"", "output": "def is_substring(string1, string2):\n    return string2 in string1\n\nif __name__ == '__main__':\n    string1=\"programming\"\n    string2=\"gram\"\n    print(is_substring(string1, string2))", "category": "Python"}, {"instruction": "Write a code to generate random words from a given text.", "input": "text = \"Hello World!\"", "output": "import random\n\ndef generate_random_word_from_text(text):\n    words = text.split()\n    return random.choice(words)\n\nif __name__ == '__main__':\n    text = \"Hello World!\"\n    print(generate_random_word_from_text(text))", "category": "Python"}, {"instruction": "Compute the maximum sum of m consecutive values in a given array.", "input": "arr = [2, 6, 1, 3, 7, 4, 9]\nm = 3", "output": "def max_m_consecutive_sum(arr, m):\n    max_sum = 0\n    for i in range(len(arr) - m + 1):\n        curr_sum = 0\n        for j in range(i, i + m):\n            curr_sum += arr[j]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum", "category": "Python"}, {"instruction": "Create a SQL query to join two tables \"invoice\" and \"customer\" on the matching customer_id.", "input": "Table \"invoice\":\ninvoice_id | customer_id  | date        | description | amount \n1          | 25           | 2020-08-01  | XYZ        | 75\n\nTable \"customer\":\ncustomer_id | customer_name | customer_address \n25          | John Doe      | 123 Main Street", "output": "SELECT i.invoice_id, i.customer_id, i.date, i.description, i.amount,\n  c.customer_name, c.customer_address\nFROM invoice i\nJOIN customer c ON i.customer_id = c.customer_id;", "category": "Python"}, {"instruction": "Create an HTML form with an input field for the user to enter their name.", "input": "", "output": "<form>\n  <label for=\"name\">Name</label>\n  <input type=\"text\" name=\"name\" id=\"name\">\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Write a function in C++ which takes a string as an argument and prints it to the console.", "input": "", "output": "void print_string(string str) \n{  \n    cout << str; \n}", "category": "Python"}, {"instruction": "Create a Java function to calculate the area of a triangle from its three vertices.", "input": "A=(2,3), B=(3,4), C=(4,5).", "output": "public static double getTriangleArea(Point A, Point B, Point C)\n{\n  double area = 0.5 * (A.x * B.y + B.x * C.y + C.x * A.y - \n                    B.x * A.y - C.x * B.y - A.x * C.y);\n  return area;\n}", "category": "Python"}, {"instruction": "Write a function in Java to delete an item from an ArrayList.", "input": "list = [1,2,3,4,5]", "output": "public static void deleteItem(ArrayList<Integer> list, int item){\n    int index = list.indexOf(item);\n    if(index >= 0){\n        list.remove(index);\n    }\n}", "category": "Python"}, {"instruction": "Using the Python 3 language, access the second character of the string.", "input": "string = \"Hello!\"", "output": "print(string[1])", "category": "Python"}, {"instruction": "Write a function in Java that takes in a string and shifts all the characters one place to the right, wrapping around the end.", "input": "x = \"Hello!\"", "output": "public static String shiftCharacters(String str){\n    String shifted = \"\";\n    \n    for(int i = 0; i < str.length(); i++) {\n        int charNum = str.charAt(i) - 1;\n        // Wrapping around the end\n        if (charNum < 65) {\n            charNum = charNum + 26;\n        }\n        shifted += (char)charNum;\n    }\n    \n    return shifted;\n}", "category": "Python"}, {"instruction": "Create a validation function in Python 3 that checks if the value is an integer", "input": "", "output": "def validate_integer(val):\n    if isinstance(val, int):\n        return True\n    else: \n        return False", "category": "Python"}, {"instruction": "Create a MySQL query to calculate the average age of all employees.", "input": "", "output": "SELECT AVG(DATEDIFF(CURDATE(), birth_date)) AS average_age \nFROM employees;", "category": "Python"}, {"instruction": "Write a Python code that prints the longest continuous increasing sequence of integers within a given list.", "input": "[1, 2, 3, 4, 5, 6, 7, 8, 4, 5, 6, 7, 8, 9]", "output": "def longest_continuous_increasing(arr):\n  \"\"\"Function to return the length of the longest continuous increasing sequence of integers within a given list\n  \n  Args:\n      arr (list): a list of integers\n  \n  Returns:\n      int: the length of the longest continuous increasing sequence\n  \"\"\"\n  n = len(arr)\n  max_len = 0\n  curr_len = 1\n\n  for i in range(1, n): \n    if arr[i] > arr[i-1]: \n      curr_len += 1\n    else: \n      # update current length of the increasing sequence\n      max_len = max(curr_len, max_len) \n      curr_len = 1\n  return max(max_len, curr_len) \n \n# Driver code \narr = [1, 2, 3, 4, 5, 6, 7, 8, 4, 5, 6, 7, 8, 9] \nprint(longest_continuous_increasing(arr)) # Output: 9", "category": "Python"}, {"instruction": "Create a bash script to find the sum of two numbers and print the output to the console.", "input": "", "output": "#!/bin/bash\n\n# Ask user to enter two numbers\nread -p \"Enter two numbers to add: \" num1 num2\n\n# Calculate the sum of two numbers\nsum=$((num1 + num2))\n\n# Print the result\necho \"The sum of $num1 and $num2 is $sum\"", "category": "Python"}, {"instruction": "Calculate the hypotenuse of a right angled triangle.", "input": "x = 3\ny = 4", "output": "def hypotenuse(x, y):\n    return (x**2 + y**2)**0.5", "category": "Python"}, {"instruction": "Create a function in JavaScript that takes in two numbers and returns the difference between them.", "input": "", "output": "function diff(a, b) {\n  return Math.abs(a - b);\n}", "category": "Python"}, {"instruction": "Write a piece of code to return 'hello world' in lower case.", "input": "", "output": "console.log('Hello World'.toLowerCase());", "category": "Python"}, {"instruction": "Using the given array, create a JavaScript function that returns the sum of all element in the array.", "input": "[3, 5, 2, 6, 4, 4]", "output": "// Function to find the sum of all elements in an array\n\nfunction sumElements(arr){\n  let sum = 0;\n  arr.forEach(element => {\n    sum += element;\n  });\n  return sum;\n}\n\nlet arr = [3, 5, 2, 6, 4, 4];\nconsole.log(sumElements(arr)); // Output: 24", "category": "Python"}, {"instruction": "Design a function in JavaScript to find the sum of the first n numbers.", "input": "", "output": "function sum(n) \n{ \n    s = 0; \n  \n    // Iterate though natural \n    // numbers using loop \n    for (i = 1; i <= n; i++) \n        s += i; \n  \n    return s; \n}", "category": "Python"}, {"instruction": "Write a Python program to make a dictionary that contains a number as a key, and its cube as the corresponding value.", "input": "", "output": "def cube_dictionary(n):\n    d = {}\n    for i in range(1, n+1):\n        d[i] = i**3\n    return d", "category": "Python"}, {"instruction": "Design a sorting algorithm to order a list of integers in descending order.", "input": "[4,7,2,8,9,1]", "output": "def descend_sort(nums):\n    for i in range(len(nums)-1): \n      for j in range(i+1,len(nums)): \n        if nums[i]<nums[j]: \n          nums[i],nums[j]=nums[j],nums[i] \n    return nums", "category": "Python"}, {"instruction": "Design a program in C to produce the Fibonacci sequence.", "input": "", "output": "#include <stdio.h> \n  \n// Function to print the first n  \n// Fibonacci numbers \nvoid printFibo(int n) \n{ \n    int f1 = 0, f2 = 1, i; \n  \n    if (n < 1) \n        return; \n  \n    for (i = 1; i <= n; i++) \n    { \n        printf(\"%d \", f1); \n        int next = f1 + f2; \n        f1 = f2; \n        f2 = next; \n    } \n} \n  \n// driver code \nint main() \n{ \n    int n = 10; \n    printFibo(n); \n    return 0; \n}", "category": "Python"}, {"instruction": "Write a HTML form which will take the user's first and last name as input and then submit the data to a server.", "input": "", "output": "<form action=\"server.php\" method=\"post\">\n  <legend>Name:</legend>\n  <input type=\"text\" name=\"fname\" placeholder=\"First Name\">\n  <input type=\"text\" name=\"lname\" placeholder=\"Last Name\">\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Rewrite the given code so that it prints the value of `a` 5 times.", "input": "a = 10\n\nprint (a)", "output": "a = 10\n\nfor i in range(5):\n    print (a)", "category": "Python"}, {"instruction": "Using the Python language, sort the following list in ascending order.", "input": "mylist = [5, 2, 3, 1, 4]", "output": "mylist.sort() \n# mylist is now [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Using the given lists, concatenate the two lists and return the result.", "input": "list1 = [1, 4, 5]\nlist2 = [2, 3, 6]", "output": "def concatenate_lists(list1, list2):\n    return list1 + list2", "category": "Python"}, {"instruction": "Using the sample data, extract the substring between two words.", "input": "sample_data = \"This is a sample sentence.\"", "output": "def extract_substring(sample_data):\n    start_word = \"This\"\n    end_word = \"sentence\"\n    start_index = sample_data.index(start_word) + len(start_word)\n    end_index = sample_data.index(end_word)\n    return sample_data[start_index:end_index]", "category": "Python"}, {"instruction": "Create a program to convert a string of ASCII characters to its equivalent decimal value", "input": "String : hello", "output": "def ascii_to_decimal(string):\n    decimal_value = 0\n    for c in string:\n        decimal_value += ord(c)\n    return decimal_value\n\nprint(ascii_to_decimal('hello')) # Output -> 104 101 108 108 111", "category": "Python"}, {"instruction": "How can you detect the version of Python installed?", "input": "", "output": "You can detect the version of Python installed by running `python -V` in the command line. This will print the version of Python installed. Alternatively, you can execute `import sys; print(sys.version)` in the Python shell.", "category": "Python"}, {"instruction": "Parses the following JSON object and create an object from it.", "input": "{\n  \"name\": \"John\",\n  \"age\": 25,\n  \"address\": \"123 Main Street\"\n}", "output": "import json\n\ndata = {\n  \"name\": \"John\", \n  \"age\": 25,\n  \"address\": \"123 Main Street\"\n}\n\nuserObject = json.loads(data)\nprint(userObject)", "category": "Python"}, {"instruction": "Design a GUI using JavaScript for a calculator application.", "input": "", "output": "<div class=\"calculator\"> \n  <input type=\"text\" placeholder=\"0\" readonly>\n  \n  <div class=\"buttons\">\n    <button>1</button>\n    <button>2</button>\n    <button>3</button>\n    <button>4</button>\n    <button>5</button>\n    <button>6</button>\n    <button>7</button>\n    <button>8</button>\n    <button>9</button>\n    <button>0</button>\n    <button>+</button>\n    <button>-</button>\n    <button>*</button>\n    <button>/</button>\n    <button>C</button>\n    <button>=</button>\n  </div>\n</div>", "category": "Python"}, {"instruction": "Read the following string in PHP and print it in the browser.", "input": "String: \"PHP scripting language\"", "output": "<?php \n  $str = \"PHP scripting language\"; \n  echo $str; \n?>", "category": "Python"}, {"instruction": "Create a HTML page that contains the following text: \"Welcome to my website!\".", "input": "", "output": "<html>\n <head> \n  <title>Website</title>\n </head>\n <body>\n  <h1>Welcome to my website!</h1>\n </body>\n</html>", "category": "Python"}, {"instruction": "Create a JavaScript array and add the following items: \"dog\", \"cat\", \"mouse\", \"bird\".", "input": "", "output": "let animals = [\"dog\", \"cat\", \"mouse\", \"bird\"];", "category": "Python"}, {"instruction": "Write a code to encrypt a text using a Ceasar cipher", "input": "", "output": "def ceasar_cipher(plaintext, shift): \n    ciphertext = \"\" \n    for i in range(len(plaintext)): \n        char = plaintext[i] \n        if (char.isupper()): \n            ciphertext += chr((ord(char) + shift - 65) % 26 + 65)\n        else: \n            ciphertext += chr((ord(char) + shift - 97) % 26 + 97)\n    return ciphertext", "category": "Python"}, {"instruction": "Write a piece of code in Python that prints a multiplication table", "input": "", "output": "def multiplication_table(n):\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            print(\"{}x{}={}\".format(i, j, i*j))\n        print(\"\")", "category": "Python"}, {"instruction": "Write a Python program to collect the data from the form below.", "input": "Name: John \nEmail: john@email.com \nPhone: (999)-999-9999", "output": "name = input(\"Name: \")\nemail = input(\"Email: \")\nphone = input(\"Phone: \")\n\ndata = {\n    \"name\": name,\n    \"email\": email,\n    \"phone\": phone\n}", "category": "Python"}, {"instruction": "Modify the code below to print the 10th and 11th element of the array", "input": "arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]", "output": "arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] \n\nprint(arr[9], arr[10])", "category": "Python"}, {"instruction": "Construct a Python dictionary with the countries and their total population.", "input": "countries = [\"USA\", \"Canada\", \"India\", \"China\", \"Japan\"]", "output": "population = {\"USA\": 331, \n              \"Canada\": 37, \n              \"India\": 1351, \n              \"China\": 1414, \n              \"Japan\": 126}", "category": "Python"}, {"instruction": "Describe the difference between an abstract class and an interface in Java", "input": "", "output": "The main difference between an abstract class and an interface in Java is that abstract classes can contain concrete (implemented) methods, while interfaces cannot. An abstract class is a class that cannot be instantiated, used as a base class that provides basic functionality and shared code to its derived classes. An interface is a purely abstract class and specifies what its derived classes must implement. Interfaces can also contain constants. A class can implement multiple interfaces but can only extend one abstract class.", "category": "Python"}, {"instruction": "Give an example of inheritance in Python", "input": "", "output": "class Animal:\n  def __init__(self, name):\n    self.name = name\n   \n  def eat(self):\n    print(f\"{self.name} is eating\")\n\nclass Dog(Animal):\n  def bark(self):\n    print(f\"{self.name} is barking\")\n\ndog = Dog(\"Fido\")\ndog.eat()\ndog.bark()\n\n# Output:\n# Fido is eating\n# Fido is barking", "category": "Python"}, {"instruction": "Is the following statement valid in C++?", "input": "a = (b + c)", "output": "Yes, the statement is valid in C++.", "category": "Python"}, {"instruction": "Determine whether a given string contains a valid number", "input": "String : abc123", "output": "def is_valid_number(string):\n    for c in string:\n        if not c.isdigit():\n            return False\n    return True\n\nprint(is_valid_number('abc123')) # Output -> False", "category": "Python"}, {"instruction": "How can you delete an element from a tuple in Python?", "input": "", "output": "You cannot delete an element from a tuple in Python because tuples are immutable. However, you can create a new tuple with all elements except the one you want to delete. For example, if you want to delete the element at index 3, you can create a new tuple by slicing the tuple from 0 to 3 and then adding the remaining elements after index 3. For example:\n\ntup = (1, 2, 3, 4, 5)\ntup = tup[:3] + tup[3+1:]  # Output -> (1, 2, 3, 5)", "category": "Python"}, {"instruction": "Using classes, create an object that can describe a geometric shape", "input": "", "output": "class Shape:\n    def __init__(self, length, width, colour):\n        self.length = length\n        self.width = width\n        self.colour = colour\n\nshape = Shape(10, 20, \"red\")", "category": "Python"}, {"instruction": "How can you replace a character in a string in Ruby?", "input": "", "output": "In Ruby you can use the gsub method to replace a character in a string. For example, to replace the character 'z' with 'x' in a string str:\n\nstr.gsub('z', 'x')", "category": "Python"}, {"instruction": "Find all the factors of N (greater than 0), add them together and return the result.", "input": "N = 30", "output": "def sum_factors_of_N(N):\n    sum = 0\n    for i in range(1, N+1):\n        if N % i == 0:\n            sum += i\n    return sum", "category": "Python"}, {"instruction": "Write code to return the kth element in the Fibonacci sequence.", "input": "", "output": "def return_fibonacci(k):\n    a = 0\n    b = 1\n    if k < 0:\n        return \"Incorrect input\"\n    elif k == 0:\n        return a\n    elif k == 1:\n        return b\n    else:\n        for i in range(2, k+1):\n            c = a + b\n            a = b\n            b = c\n        return b", "category": "Python"}, {"instruction": "Generate an array that contains the first n Fibonacci numbers", "input": "n = 10", "output": "def generate_fibonacci_numbers(n):\n    arr =[0, 1]\n    for i in range (2, n):\n        arr.append(arr[i-1] + arr[i-2])\n    return arr", "category": "Python"}, {"instruction": "Generate an array of length n that contains the square of the numbers from 1 to n.", "input": "n = 10", "output": "def generate_square_numbers(n):\n    arr = []\n    for i in range(1, n+1):\n        arr.append(i*i)\n    return arr", "category": "Python"}, {"instruction": "Create an algorithm to detect whether an array is sorted in a given order.", "input": "array = [1, 2, 4, 7, 10, 11]", "output": "def is_sorted(arr, order = \"asc\"):\n    #check if array is sorted in ascending or descending order\n    if order == \"asc\":\n        for i in range(0, len(arr)-1):\n            if arr[i] > arr[i+1]:\n                return False\n    elif order == \"desc\":\n        for i in range(0, len(arr)-1):\n            if arr[i] < arr[i+1]:\n                return False\n    else:\n        print(\"Error: Invalid sort order!\")\n    return True", "category": "Python"}, {"instruction": "Copy the given array and add 5 to each element", "input": "myList = [2, 3, 11, 5, 10]", "output": "newList = [x + 5 for x in myList ]", "category": "Python"}, {"instruction": "Write a function to rearrange a given string in alphabetical order", "input": "myString = \u2018 Hello World\u2019", "output": "def rearrange_string(myString):\n    myString = myString.lower().strip()\n    words = myString.split(' ') \n    words.sort() \n    return ' '.join(words)\n\nprint(rearrange_string(myString))", "category": "Python"}, {"instruction": "Convert a given binary number to a hexadecimal number.", "input": "binary_num = 1011", "output": "def binary_to_hex(binary_num):\n    return hex(int(binary_num, 2))", "category": "Python"}, {"instruction": "Given a dictionary with keys as strings and values as numbers, calculate the sum of the values", "input": "myDict = {'x': 12, 'y': 23, 'z': 8}", "output": "def sum_of_dict(myDict):\n    result = 0\n    for key in myDict:\n        result += myDict[key]\n    return result\n\nprint(sum_of_dict(myDict))", "category": "Python"}, {"instruction": "Swap the two variables without using a temporary variable", "input": "a = 3\nb = 7", "output": "a = a + b\nb = a - b\na = a - b", "category": "Python"}, {"instruction": "Construct a loop that prints out all elements in the list, one at a time.", "input": "myList = [\"egg\", \"milk\", \"bread\", \"sugar\"]", "output": "for element in myList:\n    print(element)", "category": "Python"}, {"instruction": "Modify the given code to multiply each element in the list by 5.", "input": "lista = [3, 4, 6, 7]", "output": "lista = [x * 5 for x in [3, 4, 6, 7]]", "category": "Python"}, {"instruction": "Create a program to generate the Pascal's triangle", "input": "", "output": "def pascal_triangle(n): \n  \n    # Create an empty list \n    pascal=[]\n  \n    for line in range(1, n+1): \n        l=[1]\n        for i in range(1,line): \n            l.append(pascal[line-2][i-1]+pascal[line-2][i]) \n        l.append(1) \n        pascal.append(l)\n                     \n    return pascal \n  \nprint(pascal_triangle(6))\n# Output -> [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]", "category": "Python"}, {"instruction": "How can you find all the subsets of a set in Python?", "input": "", "output": "In Python, you can use the itertools.combinations module to find all the subsets of a set. The syntax is as follows: \n\nimport itertools\nlist(itertools.combinations(<list or set>, <length of subset>)) \n\nFor example, to find all the subsets of a set [1,2,3] of length 2, you can run: list(itertools.combinations([1,2,3], 2)) // Output -> [(1,2), (1,3), (2,3)]", "category": "Python"}, {"instruction": "Which sorting algorithm should you use for a nearly sorted array?", "input": "", "output": "For a nearly sorted array, insertion sort is the best sorting algorithm because it only shifts elements up to one position and has a best-case time complexity of O(n) which makes it suitable for nearly sorted arrays.", "category": "Python"}, {"instruction": "Sum the integers from 0 to 10", "input": "", "output": "def sum(start, end):\n    sum = 0\n    for i in range(start, end+1):\n        sum += i\n    return sum\n\nprint(sum(0, 10)) # Output -> 55", "category": "Python"}, {"instruction": "Write a Python function to remove the whitespace from the beginning and end of a string", "input": "myStr = \"   hello   \"", "output": "def trim_whitespace(myStr):\n  myStr = myStr.strip()\n  return myStr\n\nprint(trim_whitespace(myStr))", "category": "Python"}, {"instruction": "Implement the quicksort algorithm.", "input": "[12, -6, 47, 18, 0, -3]", "output": "def quicksort(alist):\n    quicksort_helper(alist, 0, len(alist)-1)\n\ndef quicksort_helper(alist, first, last):\n    if first < last:\n        splitpoint = partition(alist, first, last)\n        quicksort_helper(alist, first, splitpoint-1)\n        quicksort_helper(alist, splitpoint+1, last)\n\ndef partition(alist, first, last):\n    pivot = alist[first]\n\n    leftmark = first+1\n    rightmark = last\n\n    done = False\n    while not done:\n        while leftmark <= rightmark and alist[leftmark] <= pivot:\n            leftmark = leftmark + 1\n\n        while alist[rightmark] >= pivot and rightmark >= leftmark:\n            rightmark = rightmark - 1\n\n        if rightmark < leftmark:\n            done = True\n        else:\n            temp = alist[leftmark]\n            alist[leftmark] = alist[rightmark]\n            alist[rightmark] = temp\n\n    temp = alist[first]\n    alist[first] = alist[rightmark]\n    alist[rightmark] = temp\n\n    return rightmark", "category": "Python"}, {"instruction": "Using Java, access the value of the second dictionary key in \"myDict\".", "input": "myDict = {\"key1\": \"value1\", \"key2\": \"value2\", \"key3\": \"value3\"}", "output": "String value2 = myDict.get(\"key2\");", "category": "Python"}, {"instruction": "Implement a method to generate a random password with 8 characters, which at least contain one capital letter, one small letter, and one digit.", "input": "", "output": "import string\nimport random\n\ndef passwordGenerator(length):\n    str = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    passwd = \"\".join(random.choice(str) for x in range(length))\n    if (any(x.isupper() for x in passwd) and any(x.islower() for x in passwd) and any(x.isdigit() for x in passwd)): \n        return passwd\n    else:\n        return passwordGenerator(length)\n\nprint(passwordGenerator(8))", "category": "Python"}, {"instruction": "Create a class for a BankAccount with the following details:", "input": "", "output": "class BankAccount {\n    constructor(accountNumber, balance) {\n        this.accountNumber = accountNumber;\n        this.balance = balance;\n    }\n    deposit(amount) {\n        this.balance += amount;\n    }\n    withdraw(amount) {\n        this.balance -= amount;\n    }\n    getBalance() {\n        return this.balance;\n    }\n}", "category": "Python"}, {"instruction": "Write a function that checks whether an array contains an element", "input": "[1, 5, 10]", "output": "def exists(arr, target):\n    for i in arr:\n        if i == target:\n            return True\n    return False", "category": "Python"}, {"instruction": "Write an algorithm that sorts the following list of integers in ascending order", "input": "[15, 5, 8, 0, 42]", "output": "def sort_list(lst):\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] > lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst", "category": "Python"}, {"instruction": "Write a function that takes a 2D array as input and returns the transposed array", "input": "[[1, 2], [3, 4], [5, 6]]", "output": "def transpose(arr):\n    new_arr = []\n    for i in range(len(arr[0])):\n        new_arr.append([row[i] for row in arr])\n    return new_arr", "category": "Python"}, {"instruction": "Generate a regular expression which matches the following strings: \u201cRun\u201d, \u201cRune\u201d, \u201cRunner\u201d", "input": "", "output": "Regex: r'Run(e?)r?'", "category": "Python"}, {"instruction": "Create a dictionary that contains the countries and their total populations according to the given list of country-population pairs", "input": "[('India', 1237696000),('Nigeria', 142429000),('China', 1139517000)]", "output": "population_dict = {\n 'India': 1237696000,\n 'Nigeria': 142429000,\n 'China': 1139517000\n}", "category": "Python"}, {"instruction": "Create a basic HTML structure with a table to display a list of cities and their population.", "input": "", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>Cities and Population</title>\n</head>\n<body>\n <h1>Cities and Population</h1>\n <table>\n  <thead>\n    <tr>\n      <th>City</th>\n      <th>Population</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Insert City Name</td>\n      <td>Insert Population</td>\n    </tr>\n  </tbody>\n </table>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a SQL statement to create a table called \"Employees\" with three columns for ID number, name, and salary.", "input": "", "output": "CREATE TABLE Employees (\n  id INT AUTO_INCREMENT,\n  name VARCHAR(255) NOT NULL,\n  salary DECIMAL(10,2) NOT NULL,\n  PRIMARY KEY (id)\n);", "category": "Python"}, {"instruction": "Write a CSS selector to select the second paragraph of a document.", "input": "", "output": "p:nth-of-type(2) {\n  // CSS code\n}", "category": "Python"}, {"instruction": "Write a SQL query to find all customers living in the city of Boston.", "input": "", "output": "SELECT *\nFROM Customers\nWHERE City = 'Boston';", "category": "Python"}, {"instruction": "Write a Python function to create an empty dictionary.", "input": "", "output": "def create_empty_dict():\n  return {}", "category": "Python"}, {"instruction": "Create a basic HTML structure to show a blog post with the title, \"My First Blog Post.\"", "input": "", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>My First Blog Post</title>\n</head>\n<body>\n <h1>My First Blog Post</h1>\n <p>Insert blog post content here.</p>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a JavaScript statement to create a new object, Person, with the fields \"name\", \"age\" and \"city\".", "input": "", "output": "let Person = {\n  name: '',\n  age: 0,\n  city: ''\n };", "category": "Python"}, {"instruction": "Given an array of numbers, write a Python function to remove even numbers from the array.", "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "def remove_even_numbers(arr):\n    return [x for x in arr if x % 2 != 0]", "category": "Python"}, {"instruction": "Write a Flask web application to display a message.", "input": "", "output": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\nif __name__ == '__main__':\n    app.run()", "category": "Python"}, {"instruction": "Write a function to delete an element from a given array", "input": "[1, 2, 3, 4], 3", "output": "def delete_element(arr, x):\n    new_arr = []\n    for i in arr:\n        if i != x: \n            new_arr.append(i)\n    return new_arr", "category": "Python"}, {"instruction": "Create an SQL query to select the names and salaries of employees who have salaries greater than $50000.", "input": "", "output": "SELECT name, salary \nFROM employees \nWHERE salary > 50000;", "category": "Python"}, {"instruction": "Create an HTML form with 3 input boxes to get user name, email, and phone number.", "input": "", "output": "<form action=\"\" method=\"post\">\n  <div>\n    <label>Name:</label>\n    <input type=\"text\" name=\"name\" />\n  </div>\n  <div>\n    <label>Email:</label>\n    <input type=\"email\" name=\"email\" />\n  </div>\n  <div>\n    <label>Phone Number:</label>\n    <input type=\"text\" name=\"phone\" />\n  </div>\n  <div>\n    <button type=\"submit\">Submit</button>\n  </div>\n</form>", "category": "Python"}, {"instruction": "You need to implement a function that finds the longest string inside an array.", "input": "array = [\"cherry\", \"apple\", \"applepie\", \"strawberry\", \"raspberry\"]", "output": "def find_longest_str(arr):\n  longest_str = \"\"\n  for s in arr:\n    if len(s) > len(longest_str):\n      longest_str = s\n  return longest_str\n \nresult = find_longest_str(array)\nprint(result) # prints \"applepie\"", "category": "Python"}, {"instruction": "Create a function to create a simple calculator for addition, subtraction, multiplication and division.", "input": "", "output": "def simple_calculator(action, a, b):\n    if action == \"add\":\n        return a + b\n    elif action == \"subtract\":\n        return a - b\n    elif action == \"multiply\":\n        return a * b\n    elif action == \"divide\":\n        return a / b\n    else:\n        return 0", "category": "Python"}, {"instruction": "Write a script to sort an array of numbers from largest to smallest using quick sort.", "input": "", "output": "def partition(array, begin, end):\n    pivot = begin\n    for i in range(begin+1, end+1):\n        if array[i] <= array[begin]:\n            pivot += 1\n            array[i], array[pivot] = array[pivot], array[i]\n    array[pivot], array[begin] = array[begin], array[pivot]\n    return pivot\n\ndef quick_sort(array, begin=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    \n    def _quick_sort(array, begin, end):\n        if begin >= end:\n            return\n        pivot = partition(array, begin, end)\n        _quick_sort(array, begin, pivot-1)\n        _quick_sort(array, pivot+1, end)\n\n    return _quick_sort(array, begin, end)", "category": "Python"}, {"instruction": "Print out the elements of the list in reverse order without using the reverse() method.", "input": "list_of_words = [\"Hello\", \"World\", \"How\", \"Are\", \"You\"]", "output": "for word in list_of_words[::-1]:\n    print(word)", "category": "Python"}, {"instruction": "Create a function that returns the number of prime numbers between the numbers provided in the input.", "input": "start_num = 10\nend_num = 30", "output": "def count_primes(start_num, end_num):\n    primes_count = 0\n    for num in range(start_num, end_num + 1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                primes_count += 1\n    return primes_count", "category": "Python"}, {"instruction": "Suggest a method in Java to compare two strings.", "input": "", "output": "The easiest way to compare two strings in Java is to use the built-in String class's equals() method. This method compares all characters in the strings, and returns true if the strings are equal or false otherwise. For example, given the strings \"Hello\" and \"Goodbye\", the following code would evaluate to false:\n\nString s1 = \"Hello\";\nString s2 = \"Goodbye\";\nboolean equal = s1.equals(s2); // false", "category": "Python"}, {"instruction": "How can we remove duplicates from an array in JavaScript?", "input": "", "output": "One of the ways to remove duplicates from an array in JavaScript is to use the Set object. The Set object stores only unique values, so by converting the array to a Set and then back to an array, any duplicates will have been removed. We can use the built-in Array.from() method to convert the Set back to an array. For example, given the array [1, 2, 3, 2], the following code will create a new array with all duplicates removed:\n\narr = [1, 2, 3, 2]\narr = Array.from(new Set(arr)) // [1, 2, 3]", "category": "Python"}, {"instruction": "Develop an algorithm for a breadth-first search.", "input": "", "output": "Breadth-first search (BFS) is an algorithm used to traverse a graph or tree data structure. The algorithm works by starting at the root node and exploring each of its adjacent nodes before exploring any of its children. The adjacent nodes are explored in the order with which they were discovered in the graph or tree. The algorithm moves from node to node by visiting the nearest neighbors first, as opposed to a depth-first search, which moves from node to node by exploring the furthest nodes first. The basic algorithm for a breadth-first search is as follows:\n\n1. Create an empty queue\n2. Enqueue the root\n3. While the queue is not empty: \n    a. Dequeue the next node\n    b. If it is the desired node, return success\n    c. Else, add all of its children to the queue\n4. Return failure", "category": "Python"}, {"instruction": "Build a graphical user interface using Java.", "input": "", "output": "import java.awt.*;\nimport javax.swing.*;\n\npublic class GUIExample {\n    public static void main(String[] args) {\n        JFrame frame = new JFrame(\"GUI Example\");\n        frame.setSize(400, 600);\n \n        JPanel panel = new JPanel();\n \n        JLabel label = new JLabel(\"This is a simple GUI.\");\n        JButton button = new JButton(\"Click Me!\");\n \n        panel.add(label);\n        panel.add(button);\n \n        frame.add(panel);\n        frame.setVisible(true);\n    }\n}", "category": "Python"}, {"instruction": "Explain the basic syntax for a for loop in JavaScript.", "input": "", "output": "The basic syntax for a for loop in JavaScript is as follows: for (initialization; condition; iteration). The initialization statement is run once at the beginning of the loop, and typically initializes one or more loop variables, which are used to track the progress of the loop. The condition statement is used to check the result of the initialization statement; if the result is true, the loop will execute. The iteration statement is run each time the loop runs; it modifies the loop variable(s) so that the loop can terminate when the specified condition is met. Once the loop has finished executing, program execution continues after the for loop statement.", "category": "Python"}, {"instruction": "Suggest a method in Python to remove any whitespaces from a given string.", "input": "", "output": "The easiest way to remove whitespaces from a string in Python is to use the replace() method. This method takes two arguments, the string to be replaced and the string to replace it with. To remove all existing whitespace, use the string ' ' as the replace argument. For example, given the string \"This is my string\", the following code would remove all whitespace from the string:\n\nstring = \"This is my string\"\nstring = string.replace(' ', '')", "category": "Python"}, {"instruction": "Create a function to add two numbers without using the + operator.", "input": "", "output": "def add_numbers(a, b):\n  while b != 0:\n    carry = a & b\n    a = a ^ b\n    b = carry << 1\n  return a\n\nprint(add_numbers(3,4)) #Prints 7", "category": "Python"}, {"instruction": "Write a simple formatter to wrap the text at a given number of characters.", "input": "", "output": "def wrap_text(text, columns):\n  wrapped_text = \"\"\n  for i in range(0, len(text), columns):\n    wrapped_text += text[i:i+columns] + \"\\n\"\n  return wrapped_text\n \ntext = \"It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout.\"\nprint(wrap_text(text, 30)) \n\n# Prints\n# It is a long established \n# fact that a reader will \n# be distracted by the rea\n# dable content of a page \n# when looking at its layo\n# ut.", "category": "Python"}, {"instruction": "Write a script to filter out strings with more than five characters from a list of strings.", "input": "arr = [\"code\",\"programming\",\"language\",\"Python\",\"Loops\",\"Conditions\"]", "output": "def filter_strings(arr):\n filtered_arr = [s for s in arr if len(s) <= 5]\n return filtered_arr\n  \nprint(filter_strings(arr)) # Prints [\"code\", \"Loops\"]", "category": "Python"}, {"instruction": "Ask the user to input a positive integer and find the sum of all positive integers up to that number.", "input": "", "output": "n = int(input(\"Please enter a positive integer: \"))\n \n# Initialize sum \nsum = 0\n \n# Find sum of all numbers\nfor i in range(1,n+1):\n sum = sum + i\n \n# Print the sum\nprint(sum)", "category": "Python"}, {"instruction": "Create a simple calculator that takes two float numbers as input and outputs the sum of the two numbers.", "input": "", "output": "def calculator(num1, num2):\n  return num1 + num2\n  \nprint(calculator(2.0, 3.0)) # Prints 5.0", "category": "Python"}, {"instruction": "Create a web page that shows your favorite color, name, and age.", "input": "", "output": "<html>\n  <head>\n    <title>Favorite Things</title>\n  </head>\n  <body>\n    <h1>My Favorite Things</h1>\n    <ul>\n      <li>My favorite color is blue.</li>\n      <li>My name is John.</li>\n      <li>I am 24 years old.</li>\n    </ul>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Develop a program to determine if a given year is a leap year.", "input": "year = 2024", "output": "# Determining if a year is a leap year\n\n# Assigning the current year\nyear = 2024\n\n# Checking if the year is a leap year\nif (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n    print(year, \"is a leap year\")\nelse:\n    print(year, \"is not a leap year\")", "category": "Python"}, {"instruction": "Create a program using any scripting language to print the multiplication table of 5.", "input": "", "output": "print(\"Multiplication Table of 5\")\nfor i in range(1, 11):\n   print(5, 'x', i, '=' ,5*i)", "category": "Python"}, {"instruction": "Develop a logistic regression model using Python to predict the outcome of a binary classification dataset.", "input": "", "output": "import pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n \n# Load the dataset\ndf = pd.read_csv(\"data.csv\")\n \n# Split the data into features (X) and targets (y)\nX= df.drop(\"target\",axis=1)\ny = df[\"target\"]\n \n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2)\n \n# Initialize and fit the logistic regression model\nclf = LogisticRegression().fit(X_train, y_train)\n \n# Make predictions on the test set\npredictions = clf.predict(X_test)", "category": "Python"}, {"instruction": "Generate a correct SQL query to select the three highest-priced products in a product table.", "input": "", "output": "SELECT * \nFROM product \nORDER BY price DESC \nLIMIT 3;", "category": "Python"}, {"instruction": "Determine the number of ints in a list.", "input": "[2, 5, 7, 3, 8]", "output": "def count_int(arr):\n    count = 0\n    for n in arr:\n        if type(n) == int:\n            count +=1\n    return count", "category": "Python"}, {"instruction": "Print out all even elements in an array.", "input": "[1,2,3,4,5]", "output": "def print_even(arr):\n    even = []\n    for num in arr:\n        if num % 2 == 0:\n            even.append(num)\n    return even", "category": "Python"}, {"instruction": "Compute the sum of each separate element in an array.", "input": "[1,2,3,4]", "output": "def sum_of_elements(arr): \n    total = 0\n    for num in arr: \n        total += num  \n    return total", "category": "Python"}, {"instruction": "Demonstrate how to create a SQL query to get a list of all employees from the employees table.", "input": "", "output": "SELECT * FROM employees;", "category": "Python"}, {"instruction": "Write a code that finds the largest palindromic number in a given array", "input": "[73, 111, 109]", "output": "def largest_palindromic_number(arr):\n    largest = 0\n\n    for i in arr:\n        s = str(i)\n        if s == s[::-1]:\n            largest = max(i, largest) \n    return largest\n\nlargest = largest_palindromic_number([73, 111, 109])\nprint(\"The largest palindromic number is:\", largest)", "category": "Python"}, {"instruction": "Write a code that converts degrees Celsius to degrees Fahrenheit", "input": "", "output": "def celsius_to_fahrenheit(celsius):\n    fahrenheit = celsius * 9/5 + 32\n    return fahrenheit", "category": "Python"}, {"instruction": "Filter the following list of integer using python, so that only the numbers divisible by 2 are left", "input": "[1, 2, 3, 4, 5, 6, 7, 8]", "output": "def filter_list(list): \n    new_list = []\n    for item in list:\n        if item % 2 == 0:\n            new_list.append(item)\n    return new_list \n\nlist = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(filter_list(list))\n\n# Output: [2, 4, 6, 8]", "category": "Python"}, {"instruction": "In Java, write code to remove all empty elements from an array.", "input": "arr = [1, 2, 3, \"\", 4, 5, \"\", 6]", "output": "List<String> nonEmpty = Arrays.stream(arr)\n\t\t\t    .filter(x -> !x.equals(\"\"))\n\t\t\t    .collect(Collectors.toList());", "category": "Python"}, {"instruction": "Write a regular expression to find a substring in a string that matches the pattern \u2018an example\u2019", "input": "string = \"This is an example of a string.\"", "output": "pattern = /an example/;", "category": "Python"}, {"instruction": "Using list comprehension, write a Python code to get a list of all possible subsets of the list [1, 2, 3]", "input": "[1, 2, 3]", "output": "subsets = [[x for x in [1, 2, 3]] for y in range(0, 2**len([1, 2, 3]))]", "category": "Python"}, {"instruction": "Write a method in Java that returns an array of the first N prime numbers.", "input": "n=10", "output": "public static int[] getFirstNPrimes(int n) {\n  int[] primes = new int[n];\n  int count = 0;\n  int num = 2;\n  \n  while (count < n) {\n    if (isPrime(num)) { \n      primes[count] = num;\n      count++;\n    }\n    num++;\n  }\n  return primes;\n}\n\n// Utility functon to check whether a numbmer is prime or not \nboolean isPrime(int n) {\n  for (int i = 2; i <= n / 2; i++) {\n    if (n % i == 0)\n      return false;\n  }\n  return true;\n}", "category": "Python"}, {"instruction": "Implement a function that returns the total number of vowels in a string in C++.", "input": "string str = \"Hello World!\"", "output": "#include <iostream>\n#include <string>\n\nint countVowels(std::string str) {\n    int count = 0;\n    \n    for (int i = 0; i < str.length(); i++) {\n        if (str[i] == 'a' || str[i] == 'e' || str[i] == 'i' || str[i] == 'o' || str[i] == 'u') \n            count++;\n    }\n    \n    return count;\n}\n\nint main() {\n    std::string str = \"Hello World!\";\n    \n    std::cout << \"Number of vowels : \" << countVowels(str);\n    return 0;\n}", "category": "Python"}, {"instruction": "Write code in Java to generate a random number between 12 and 23.", "input": "", "output": "// Create an instance of Random class \nRandom rand = new Random(); \n  \n// Generate a random number between 12 and 23 \nint rand_num = rand.nextInt(11) + 12; \n\n// Print the random number  \nSystem.out.println(\"Random number: \" + rand_num);", "category": "Python"}, {"instruction": "Write an SQL query to return the total number of student enrollments in courses from the courses table.", "input": "Table: courses\n\nColumns: course_id, course_name, enrollments", "output": "SELECT SUM(enrollments)\nFROM courses;", "category": "Python"}, {"instruction": "Write SQL query to list the names of all products whose stock is more than 50", "input": "", "output": "SELECT name FROM products WHERE stock > 50;", "category": "Python"}, {"instruction": "Write a function to print an array without duplicate elements.", "input": "[4,3,6,5,4,7]", "output": "def remove_duplicates(arr):\n    seen = set()\n    for x in arr:\n        if x not in seen:\n            seen.add(x)\n            print(x)", "category": "Python"}, {"instruction": "Determine if all the elements in a list are unique.", "input": "[3,4,5,5,6]", "output": "def has_unique_elements(arr):\n    unique_elements = set(arr)\n    if len(unique_elements) == len(arr):\n        return True\n    return False", "category": "Python"}, {"instruction": "Create a function to detect if a given string contains all letters of the English alphabet.", "input": "", "output": "def has_all_alphabet(string):\n    letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    return set(letters).issubset(string.upper())", "category": "Python"}, {"instruction": "Create a JavaScript function that takes two strings as parameters and checks if the first one contains the second one.", "input": "\"this string has many letters\", \"many\"", "output": "function containsSubstring(str1, str2) {\n    if (str1.indexOf(str2) !== -1) {\n        return true;\n    }\n    return false;\n}", "category": "Python"}, {"instruction": "Write a CSS style for a h3 heading to always have a purple background and white text color.", "input": "", "output": "h3 {\n  background-color: purple;\n  color: white;\n}", "category": "Python"}, {"instruction": "Rewrite the Java code to a more efficient version.", "input": "public class Sum {\n  public static void main(String[] args) {\n    int sum = 0;\n    for (int i = 0; i < 10; i++) {\n      sum = sum + i;\n    }\n    System.out.println(sum);\n  }\n}", "output": "public class Sum {\n  public static void main(String[] args) {\n    int sum = 0;\n    int n = 10;\n    sum = (n * (n + 1)) / 2;\n    System.out.println(sum);\n  }\n}", "category": "Python"}, {"instruction": "Identify and correct the error in this C++ code.", "input": "#include<iostream>\nusing namespace std;\nvoid main()\n{\nint a=2;\nif(a=1)\n cout<<\"1\";\nelse\n cout<<\"2\";\n}", "output": "#include<iostream>\nusing namespace std;\nvoid main()\n{\nint a=2;\nif(a==1)\n cout<<\"1\";\nelse\n cout<<\"2\";\n}", "category": "Python"}, {"instruction": "Write a JavaScript program to sort an array of strings according to the length of each string.", "input": "words = ['Quick', 'Brown', 'Fox', 'Jumps']", "output": "words.sort((a,b) => a.length - b.length);\n\nconsole.log(words);", "category": "Python"}, {"instruction": "Create a NumPy array to store the values of a given function.", "input": "import numpy as np\n\ndef f(x):\n    return x**2", "output": "xs = np.linspace(0,10,100)\nys = np.array([f(x) for x in xs])", "category": "Python"}, {"instruction": "Create a dictionary in Python to store the frequency of characters in a string.", "input": "string = \"Hello World!\"", "output": "# Empty dictionary\nfrequencies = {}\n\n# Iterate over each character in the string\nfor char in string:\n    # Check if the character exists as a key in the dictionary\n    if char in frequencies:\n        # Increase the count by 1 if it exists\n        frequencies[char] += 1\n    else:\n        # Set the count to 1 for a new character\n        frequencies[char] = 1", "category": "Python"}, {"instruction": "Create a list comprehension to extract unique characters from a string.", "input": "string = \"Hello World\"", "output": "unique_characters = [char for char in string if string.count(char) == 1]\nprint(unique_characters)", "category": "Python"}, {"instruction": "Create a HTML form to collect the user's email address.", "input": "", "output": "<form>\n  <label for=\"email\">Email:</label><br>\n  <input type=\"email\" id=\"email\" name=\"email\"><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "For the following array of integers, find the number of instances of 6:", "input": "[1,2,3,4,5,6,7,8,9,10,6,6]", "output": "count = 0\nfor i in [1,2,3,4,5,6,7,8,9,10,6,6]:\n    if i == 6:\n        count += 1\nprint (\"Number of instances of 6:\",count)", "category": "Python"}, {"instruction": "Write a SQL query to group a table of cities by country.", "input": "Table: cities\n\n+------------+--------------+\n| city_name  | country_name |\n+------------+--------------+\n| London     | United Kingdom |\n| Los Angeles | United States |\n| Venice     | Italy         |\n+------------+--------------+", "output": "SELECT country_name, COUNT(*) AS Num_cities\nFROM cities\nGROUP BY country_name;", "category": "Python"}, {"instruction": "Write a function to tokenize a string into its characters.", "input": "sentence = \"Hello world!\"", "output": "def tokenize(sentence):\n    tokens = []\n    # loop through the characters in the sentence\n    for letter in sentence:\n        # append each character to the tokens list\n        tokens.append(letter)\n    return tokens", "category": "Python"}, {"instruction": "Write an SQL query to select all the records from a table named 'products' where the price is between 5 and 10.", "input": "", "output": "SELECT * FROM products WHERE price BETWEEN 5 AND 10;", "category": "Python"}, {"instruction": "Write a JavaScript code to read the content of a given URL.", "input": "", "output": "function readURL(url) {\n    var xhttp = new XMLHttpRequest();\n    xhttp.onreadystatechange = function() {\n        if (this.readyState == 4 && this.status == 200) {\n            document.getElementById(\"urlcontent\").innerHTML = this.responseText;\n        }\n    };\n    xhttp.open(\"GET\", url, true);\n    xhttp.send();\n}", "category": "Python"}, {"instruction": "What is a web server?", "input": "", "output": "A web server is a computer system that hosts web applications and responds to requests from users over the internet. The web server processes the requests and sends a response back to the users, usually in the form of an HTML web page.", "category": "Python"}, {"instruction": "Create an HTML button that opens an alert message with the words \"Welcome\".", "input": "", "output": "<button onclick=\"alert('Welcome')\">Click Me</button>", "category": "Python"}, {"instruction": "Write a SQL query to select all records from a table named 'customers' where the city is either 'London' or 'Paris'.", "input": "", "output": "SELECT * FROM customers WHERE city IN ('London', 'Paris');", "category": "Python"}, {"instruction": "Train a logistic regression model using Scikit-Learn.", "input": "import numpy as np\nfrom sklearn.linear_model import LogisticRegression\n\nX = np.array([[-1, -1], [-2, -1], [1, 1], [2, 1]])\nY = np.array([0, 0, 1, 1])", "output": "model = LogisticRegression(solver='lbfgs')\nmodel.fit(X, Y)", "category": "Python"}, {"instruction": "Create an algorithm that prints the common elements of two arrays.", "input": "arr1 = [3, 10, 15, 7]\narr2 = [7, 8, 5, 10]", "output": "def common_elements(arr1, arr2):\n   result = []\n   for numbers in arr1:\n       if numbers in arr2:\n           result.append(numbers)\n   return result\n\nprint(common_elements(arr1, arr2)) # Output: [7, 10]", "category": "Python"}, {"instruction": "Write a Python program to compute the summation of a list of numbers.", "input": "list = [1, 2, 3, 4, 5]", "output": "def compute_summation(list):\n    result = 0\n    for i in list:\n        result += i\n    return result", "category": "Python"}, {"instruction": "Read the input values and sort them in ascending order.", "input": "9, 4, 2, 10, 15", "output": "list = [9, 4, 2, 10, 15]\nlist.sort()\nprint(list)", "category": "Python"}, {"instruction": "Use numpy to create a 3x3 matrix full of zeros.", "input": "", "output": "import numpy as np \n  \n  \n# create a 3x3 matrix full of zeros using numpy\nmatrix_zeros = np.zeros( (3,3) )\nprint(matrix_zeros)", "category": "Python"}, {"instruction": "what is the shortest code to print multiple strings on the same line?", "input": "", "output": "print(*[\"String1\", \"String2\", \"String3\"])", "category": "Python"}, {"instruction": "Create a CSS3 animation to move an element from left to right.", "input": "", "output": "@keyframes move-element {\n  0% { left: 0; }\n  100% { left: 100%; }\n}", "category": "Python"}, {"instruction": "Create a JavaScript program that takes two numbers and returns the sum of their squares.", "input": "", "output": "function sumOfSquares(a, b) {\n  return a*a + b*b;\n}", "category": "Python"}, {"instruction": "Implement a Python function to check if an integer is even or odd.", "input": "", "output": "def is_even(num):\n  return num % 2 == 0", "category": "Python"}, {"instruction": "Create a SQL query to find the name, job title and salary for the top 3 highest-paid employees.", "input": "", "output": "SELECT name, job_title, salary FROM employees ORDER BY salary DESC LIMIT 3;", "category": "Python"}, {"instruction": "Create a C++ program that multiplies two numbers.", "input": "", "output": "int multiply(int a, int b) {\n  return a * b;\n}", "category": "Python"}, {"instruction": "Create a JavaScript program that formats currency values.", "input": "", "output": "function formatCurrency(value) {\n  return '$' + value.toFixed(2).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n}", "category": "Python"}, {"instruction": "Create a JavaScript function to format a date object into day, month, and year.", "input": "", "output": "function formatDate(dateObj) {\n  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n  const monthName = ['January','February','March','April','May','June','July','August','September','October','November','December']\n  const day = days[dateObj.getDay()]\n  const date = dateObj.getDate()\n  const month = monthName[dateObj.getMonth()]\n  const year = dateObj.getFullYear()\n  return `${day}, ${date} ${month} ${year}`\n}", "category": "Python"}, {"instruction": "Create a Java program to find the max number within a list.", "input": "", "output": "public static int findMax(int[] array) {\n    int max = array[0];\n    for (int i = 0; i < array.length; i++) {\n        if (array[i] > max) {\n            max = array[i];\n        }\n    }\n    return max;\n}", "category": "Python"}, {"instruction": "Write a SQL query to select the 10th highest salary from an employees table.", "input": "", "output": "SELECT salary \nFROM (\n    SELECT salary,rank() OVER (ORDER BY salary DESC) \n    FROM employees\n) sub \nWHERE rank = 10;", "category": "Python"}, {"instruction": "Write a recursive version of the following code.", "input": "def factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result", "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)", "category": "Python"}, {"instruction": "Change the following code so that it will still print the same output but with a better runtime complexity.", "input": "def find_duplicates(list):\n    duplicates = []\n    for i in range(len(list)):\n        current = list[i]\n        for j in range(len(list)):\n            if i != j and list[j] == current:\n                duplicates.append(current)\n    return duplicates", "output": "def find_duplicates(list):\n    duplicates = []\n    seen = set()\n    for i in range(len(list)):\n        current = list[i]\n        if current in seen:\n            duplicates.append(current)\n        else:\n            seen.add(current)\n    return duplicates", "category": "Python"}, {"instruction": "Write a Java code snippet that takes a URL as input and prints the content of the page.", "input": "", "output": "import java.net.URL;\nimport java.util.Scanner;\n \npublic class UrlReader {\n \n    public static void main(String[] args) throws Exception {\n        String urlString = args[0];\n        URL url = new URL(urlString);\n        Scanner s = new Scanner(url.openStream());\n        while (s.hasNextLine()) {\n            System.out.println(s.nextLine());\n        }\n        s.close();\n    }\n}", "category": "Python"}, {"instruction": "Create a C program that prints the number of times a character is present in a given string.", "input": "String: Antman\nCharacter: n", "output": "#include <stdio.h> \n#include <string.h> \n  \nint main() \n{ \n    char str[] = \"Antman\"; \n    char c = 'n';\n    int count = 0; \n  \n    for (int i=0; i<strlen(str); i++) \n    { \n        // checking character in str \n        if (str[i] == c) \n            count++; \n    } \n  \n    printf(\"Number of %c in %s is %d\", c, str, count); \n    return 0; \n}", "category": "Python"}, {"instruction": "Write an SQL query that includes a join clause to join two tables named \u201cclients\u201d and \u201corders\u201d.", "input": "", "output": "SELECT * \nFROM clients \nINNER JOIN orders \nON clients.client_id = orders.client_id;", "category": "Python"}, {"instruction": "Write a Java code to create an arraylist.", "input": "", "output": "// Code to create an ArrayList in Java\nimport java.util.ArrayList;\n\npublic class Demo {\n    public static void main(String[] args) {\n        // create an arraylist\n        ArrayList<String> list = new ArrayList<>();\n        list.add(\"Java\");\n        list.add(\"C++\");\n        list.add(\"Python\");\n        System.out.println(list);\n\n        // print the size of the list\n        System.out.println(\"The size of the list is: \"+list.size());\n    }\n}", "category": "Python"}, {"instruction": "Formulate a query in SQL to return the name and address of all customers who have placed an order in the last month.", "input": "", "output": "SELECT name, address FROM customers JOIN orders ON customers.id = orders.customer_id WHERE orders.date > DATE_SUB(NOW(), INTERVAL 1 MONTH);", "category": "Python"}, {"instruction": "Implement a function in Python that takes two parameters, an array and a number, and sorts the array in ascending order by the number.", "input": "[5, 29, 4, 7, 28], 3", "output": "def sort_array_by_nth_parameter(arr, n):\n  return sorted(arr, key=lambda x: x[n])\n\nnumbers = [5, 29, 4, 7, 28]\nsorted_numbers = sort_array_by_nth_parameter(numbers, 3)\nprint(sorted_numbers)", "category": "Python"}, {"instruction": "Suggest a JavaScript code to show all the console logs from line 8 to 16.", "input": "", "output": "for (var i = 8; i <= 16; i++) {\n    console.log(i);\n}", "category": "Python"}, {"instruction": "Find the size of a given byte array.", "input": "byte_array = bytearray([1, 2, 3, 4, 5])", "output": "The size of the given byte array is 5.", "category": "Python"}, {"instruction": "Create a Django view to render an HTML page with message \"Hello world!\".", "input": "", "output": "In the views.py file, add the following Django view:\n\ndef hello_world(request):\n    return render(request, 'hello_world.html', {'message': 'Hello world!'})\n\nAnd in the hello_world.html file:\n\n<html>\n<head>\n  <title>Hello world!</title>\n</head>\n<body>\n  <h1>{{message}}</h1>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a CSS selector to select all <h1> tags with a 'main' id.", "input": "", "output": "The CSS selector is #main h1.", "category": "Python"}, {"instruction": "Create a machine learning model to classify an email into spam and non-spam classes.", "input": "", "output": "The model can be built using any machine learning algorithm. The model should be trained with data points labeled as spam or non-spam emails. After training the model with the data, it should be able to predict whether an email is spam or not based on the input.", "category": "Python"}, {"instruction": "Create a program to find the maximum depth in a binary tree.", "input": "", "output": "def max_depth(root):\n    if root == None: \n        return 0;  \n    else : \n        #Compute the depth of each subtree\n        l_depth = max_depth(root.left) \n        r_depth = max_depth(root.right) \n  \n        #Use the larger one\n        if (l_depth > r_depth): \n            return l_depth+1\n        else: \n            return r_depth+1", "category": "Python"}, {"instruction": "Create a program to check if two binary trees are identical.", "input": "", "output": "def is_identical(root1, root2): \n    #Check if root1 and root2 are both none\n    if root1 == None and root2 == None:\n        return True\n    #Check if root1 and root2 are none\n    if root1 == None or root2 == None:\n        return False\n    #Check if their data is same\n    if root1.data == root2.data:\n        #Check if their left subtrees are same\n        left_identical = is_identical(root1.left, root2.left)\n        #Check if their right subtrees are same\n        right_identical = is_identical(root1.right, root2.right)\n        if left_identical and right_identical:\n            return True\n    return False", "category": "Python"}, {"instruction": "Create a Java program to find the area and circumference of a circle with a given radius.", "input": "", "output": "public class Circle\n{\n    public static void main(String[] args)\n    {\n        double radius = 6.2;\n        double area = Math.PI * radius * radius;\n        double circumference = 2 * Math.PI * radius;\n\n        System.out.println(\"Area = \" + area);\n        System.out.println(\"Circumference = \" + circumference);\n    }\n\n}", "category": "Python"}, {"instruction": "Define a tuple in Python.", "input": "", "output": "my_tuple = (1, 2, 3)  # Output: (1, 2, 3)", "category": "Python"}, {"instruction": "Create a machine learning model to classify the following dataset.", "input": "x1\tx2\tx3\ty\n2\t4\t2\t0\n-1\t-2\t1\t1\n-1\t1\t0\t1\n-2\t2\t1\t0", "output": "model = SVC(kernel='linear')  \nmodel.fit([[2,4,2],[-1,-2,1],[-1,1,0],[-2,2,1]], [0,1,1,0]) # Output: SVC(kernel='linear')", "category": "Python"}, {"instruction": "Create a class in Python which contains three attributes and a method.", "input": "", "output": "class MyClass:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def get_values(self):\n        return self.x, self.y, self.z", "category": "Python"}, {"instruction": "Write a function in jQuery that adds a table row to a HTML table.", "input": "", "output": "function addTableRow(tableId) { \n  var tableRef = document.getElementById(tableId);\n  var newRow   = tableRef.insertRow();\n\n  var newCell  = newRow.insertCell(0);\n  var newText  = document.createTextNode('New cell');\n  newCell.appendChild(newText);\n}", "category": "Python"}, {"instruction": "Convert the below JSON data into an equivalent XML format.", "input": "{\n  \"name\": \"John\",\n  \"age\": 30,\n  \"address\": {\n    \"street\": \"1 Main Street\",\n    \"city\": \"London\",\n    \"country\": \"UK\"\n  }\n}", "output": "<?xml version=\"1.0\"?>\n<data>\n  <name>John</name>\n  <age>30</age>\n  <address>\n    <street>1 Main Street</street>\n    <city>London</city>\n    <country>UK</country>\n  </address>\n</data>", "category": "Python"}, {"instruction": "Rewrite the following function in JavaScript.", "input": "def sum_of_two_numbers(a, b):\n  return a + b", "output": "function sumOfTwoNumbers(a, b) {\n  return a + b;\n}", "category": "Python"}, {"instruction": "Transform the below SQL query into MongoDB.", "input": "SELECT user_id, COUNT(*) FROM orders\nWHERE status = 'completed'\nGROUP BY user_id\nORDER BY COUNT(*) DESC;", "output": "db.orders.aggregate([\n  {$match: {status: 'completed'}},\n  {$group: {user_id: '$user_id', count: {$sum: 1}}},\n  {$sort: {count: -1 }}\n])", "category": "Python"}, {"instruction": "Define a class in C++ to represent a movie theater.", "input": "", "output": "class MovieTheater {\n private:\n  string name;\n  int capacity;\n  float ticketPrice;\n public:\n  MovieTheater(string name, int capacity, float ticketPrice);\n  string getName();\n  int getCapacity();\n  float getTicketPrice();\n  void setName(string name);\n  void setCapacity(int capacity);\n  void setTicketPrice(float ticketPrice);\n  int calculateSales();\n};", "category": "Python"}, {"instruction": "Create an array with the following elements in the given order.", "input": "2, 3, 7, 8", "output": "my_list = [2, 3, 7, 8]", "category": "Python"}, {"instruction": "Design a web page to display the first ten elements of a given 2D array.", "input": "A 2D array [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]", "output": "<table>\n    <tr>\n        <td>1</td>\n        <td>2</td>\n        <td>3</td>\n    </tr>\n    <tr>\n        <td>4</td>\n        <td>5</td>\n        <td>6</td>\n    </tr>\n    <tr>\n        <td>7</td>\n        <td>8</td>\n        <td>9</td>\n    </tr>\n    <tr>\n        <td>10</td>\n        <td>11</td>\n        <td>12</td>\n    </tr>\n</table>", "category": "Python"}, {"instruction": "Create a Bash script that takes two words as arguments and outputs unique words present in both the words.", "input": "Write Code", "output": "#!/bin/bash\n\nfor i in \"$@\"\ndo\n  echo -n $(echo $i | sed 's/\\(\\w\\)/\\1\\n/g' | sort -u)\ndone \necho", "category": "Python"}, {"instruction": "Write a JavaScript function to check if all elements of an array of numbers are distinct.", "input": "[1,2,3,4,5]", "output": "function areDistinct(arr){\n    for(let i=0; i<arr.length-1; i++){\n        for(let j=i+1; j<arr.length; j++){\n            if(arr[i]===arr[j])\n                return false;\n        }\n    }\n    return true;\n}", "category": "Python"}, {"instruction": "Construct an algorithm to apply merge sort to an array of integers.", "input": "[1, 10, 2, 5, 8, 7]", "output": "# Python program for Merge Sort\n\n# Merges two subarrays of arr[]. \n# First subarray is arr[l..m] \n# Second subarray is arr[m+1..r] \ndef merge(arr, l, m, r): \n\tn1 = m - l + 1\n\tn2 = r- m \n\n# create temp arrays \n\tL = [0] * (n1) \n\tR = [0] * (n2) \n\n# Copy data to temp arrays L[] and R[] \n\tfor i in range(0 , n1): \n\t\tL[i] = arr[l + i] \n\n\tfor j in range(0 , n2): \n\t\tR[j] = arr[m + 1 + j] \n\n# Merge the temp arrays back into arr[l..r] \n\ti = 0\t # Initial index of first subarray \n\tj = 0\t # Initial index of second subarray \n\tk = l\t # Initial index of merged subarray \n\n\twhile i < n1 and j < n2 : \n\t\tif L[i] <= R[j]: \n\t\t\tarr[k] = L[i] \n\t\t\ti += 1\n\t\telse: \n\t\t\tarr[k] = R[j] \n\t\t\tj += 1\n\t\tk += 1\n\n# Copy the remaining elements of L[], if there \n# are any \n\twhile i < n1: \n\t\tarr[k] = L[i] \n\t\ti += 1\n\t\tk += 1\n\n# Copy the remaining elements of R[], if there \n# are any \n\twhile j < n2: \n\t\tarr[k] = R[j] \n\t\tj += 1\n\t\tk += 1\n\n# l is for left index and r is right index of the \n# sub-array of arr to be sorted \ndef mergeSort(arr,l,r): \n\tif l < r: \n\t\t\n\t\t# Same as (l+r)//2, but avoids overflow for \n\t\t# large l and h \n\t\tm = (l+(r-1))//2\n\t\t\n\t\t# Sort first and second halves \n\t\tmergeSort(arr, l, m) \n\t\tmergeSort(arr, m+1, r) \n\t\tmerge(arr, l, m, r) \n\n# Driver code to test above \narr = [1, 10, 2, 5, 8, 7] \nn = len(arr) \nprint (\"Given array is\") \nfor i in range(n): \n\tprint (\"%d\" %arr[i]), \n\nmergeSort(arr,0,n-1) \nprint (\"\\n\\nSorted array is\") \nfor i in range(n): \n\tprint (\"%d\" %arr[i]), \n\n# This code is contributed by Shreyanshi Arun", "category": "Python"}, {"instruction": "What is principle of DRY (Don\u2019t Repeat Yourself) in coding?", "input": "", "output": "The principle of DRY (Don\u2019t Repeat Yourself) states that code should not be written twice, and instead should be reused. This means that code should be organized such that similar functionalities are grouped together so as to avoid duplication, making the code more efficient, robust, and maintainable. It also allows for code to be more easily refactored in order to correct errors or to add new features.", "category": "Python"}, {"instruction": "How can one parse a JSON string in JavaScript?", "input": "", "output": "The JSON.parse() method can be used to parse a JSON string in JavaScript. The JSON.parse() method takes a JSON string and parses it into an object. For example, the following code parses the string \u201c{ \u201cname\u201d: \u201cJohn\u201d }\u201d into an object:\n\nlet jsonString = '{ \"name\": \"John\" }';\nlet parsedObject = JSON.parse(jsonString);\nconsole.log(parsedObject.name); // outputs \"John\"", "category": "Python"}, {"instruction": "Create a Javascript function that will loop through an array and push each item into a new array.", "input": "", "output": "function loopThroughArray(arr) {\n    let newArr = [];\n    for(let i = 0; i < arr.length; i++) {\n        newArr.push(arr[i]);\n    }\n    return newArr;\n}", "category": "Python"}, {"instruction": "Rewrite the following HTML code in valid XML syntax.", "input": "<html>\n  <head>\n    <title>My Page</title>\n  </head>", "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<page>\n  <title>My Page</title>\n</page>", "category": "Python"}, {"instruction": "Which library should be used to process data in Scala?", "input": "", "output": "The Apache Spark library is the most common library used to process data in Scala. Apache Spark provides an easy-to-use, distributed environment for analytics and data processing applications. It offers APIs in Java, Python, and Scala, allowing users to neatly integrate data processing with high-level programming languages.", "category": "Python"}, {"instruction": "Create a bash script to print a hello message to the terminal.", "input": "", "output": "#!/bin/bash\necho \"Hello!\"", "category": "Python"}, {"instruction": "Using SQLite3, how can one create a table in an existing database?", "input": "", "output": "CREATE TABLE table_name (column_name data_type PRIMARY KEY, ...);", "category": "Python"}, {"instruction": "Write a CSS code to apply padding to the left side of an element with class name \"element\".", "input": "", "output": ".element {\n    padding-left: 20px;\n}", "category": "Python"}, {"instruction": "Create an Angular component that consists of a dropdown menu filled with a list of countries.", "input": "", "output": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-dropdown',\n  template: `\n  <select>\n    <option>USA</option>\n    <option>Canada</option>\n    <option>France</option>\n    <option>Japan</option>\n    <option>China</option>\n  </select>\n  `\n})\nexport class DropdownComponent {\n\n}", "category": "Python"}, {"instruction": "Create an object in JavaScript that simulates a bank account.", "input": "", "output": "class BankAccount {\n  constructor(name, balance) {\n    this.name = name;\n    this.balance = balance;\n  }\n\n  deposit(amount) {\n    this.balance += amount;\n  }\n\n  withdraw(amount) {\n    if(amount > this.balance) {\n      console.log('Insufficient funds');\n    } else {\n      this.balance -= amount;\n    }\n  }\n}", "category": "Python"}, {"instruction": "Build a React component to add a text field and a submit button.", "input": "", "output": "import React, { useState } from 'react';\n\nconst Form = () => {\n  const [input, setInput] = useState('');\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // Do something with input\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={input} onChange={e => setInput(e.target.value)} />\n      <button type=\"submit\">Submit</button>\n    </form>\n  )\n};\n\nexport default Form;", "category": "Python"}, {"instruction": "Write an Ansible playbook to install an Apache webserver.", "input": "", "output": "---\n - hosts: localhost\n   become: true\n   tasks:\n    - name: Install Apache Webserver\n      apt:\n        name: apache2\n        state: present", "category": "Python"}, {"instruction": "Write a function that takes a list and an item as parameters and appends the item to the list.", "input": "", "output": "def append_item(my_list, item):\n  return my_list.append(item)", "category": "Python"}, {"instruction": "Given the HTML structure below, add a red background to the <h1> tag.", "input": "<h1>This is a heading</h1>", "output": "<h1 style=\"background-color: red;\">This is a heading</h1>", "category": "Python"}, {"instruction": "Write a script in JavaScript to perform a bank transaction.", "input": "", "output": "function performTransaction(accountNum, amount) {\n    // Perform validation\n    if (amount < 0) {\n        console.log('Invalid amount');\n        return;\n    }\n    \n    // Retrieve account information\n    let accountInfo = getAccountInfo(accountNum);\n    if (!accountInfo) {\n        console.log('Account not found');\n        return;\n    }\n  \n    // Perform transaction\n    let newBalance = accountInfo.balance + amount;\n    if (newBalance < 0) {\n        console.log('Insufficient funds');\n        return;\n    }\n  \n    // Update account\n    accountInfo.balance = newBalance;\n    updateAccountInfo(accountNum, accountInfo);\n  \n    console.log('Transaction successful');\n}", "category": "Python"}, {"instruction": "Design a web page with HTML and CSS so that it displays four boxes of different colors.", "input": "", "output": "<html>\n\n<head>\n<style> \n  div {\n    width:200px;\n    height:200px;\n    box-sizing:border-box;\n    border-radius: 10px;\n  }\n  .box-1 {\n    background: #F78181;\n  }\n  .box-2 {\n    background: #FBB117;\n  }\n  .box-3 {\n    background: #99E1D9;\n  }\n  .box-4 {\n    background: #CDC5C2;\n  }\n</style>\n</head>\n\n<body>\n  <div class=\"box-1\"></div>\n  <div class=\"box-2\"></div>\n  <div class=\"box-3\"></div>\n  <div class=\"box-4\"></div>\n</body>\n\n</html>", "category": "Python"}, {"instruction": "Create an array of appripriate data to store the following information: {name: John, age: 17, weight: 75}.", "input": "", "output": "[\u2018John\u2019, 17, 75]", "category": "Python"}, {"instruction": "Write a function in Java to find the matching pair in an array of integers.", "input": "[4, 8, 2, 4, 1]", "output": "// Function to find matching pair in an array \npublic static void findPair(int[] arr) { \n    int pairIndex = -1; \n  \n    // Loop through the array \n    for (int i = 0; i < arr.length; i++) { \n        int current = arr[i]; \n  \n        // Check if it's a matching pair \n        for (int j = i + 1; j < arr.length; j++) { \n            if (current == arr[j]) { \n                pairIndex = j; \n                break; \n            } \n        } \n    } \n  \n    // Print the result \n    if (pairIndex != -1) \n        System.out.println(\"Pair found at index: \" + pairIndex); \n    else\n        System.out.println(\"Pair not found!\"); \n}", "category": "Python"}, {"instruction": "Write an HTML web page that displays a list of three job titles and their corresponding descriptions.", "input": "Developer\nDesigner\nProject Manager\n\nDeveloper: Responsible for developing applications based on customer requirements\nDesigner: Designs and implements user interfaces for applications\nProject Manager: Manages  the  project's  resources  and  timelines  to  ensure  successful completion", "output": "<!DOCTYPE html>\n\n<html>\n  <head>\n    <title>Job Titles and Descriptions</title>\n  </head>\n \n  <body>\n    <p>\n      <ul>\n        <li>Developer: Responsible for developing applications based on customer requirements</li>\n        <li>Designer: Designs and implements user interfaces for applications</li>\n        <li>Project Manager: Manages the project's resources and timelines to ensure successful completion</li>\n      </ul>\n    </p>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a Python program that takes two numbers as input and outputs the greatest common divisor (GCD) between them.", "input": "18 9", "output": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\nx = int(input(\"Enter the first number: \"))\ny = int(input(\"Enter the second number: \"))\n\nprint(\"The GCD of {} and {} is {}\".format(x, y, gcd(x, y)))", "category": "Python"}, {"instruction": "Create a Bash function that takes an integer as input and prints out the corresponding ASCII character.", "input": "97", "output": "function print_ascii(){\n  echo \"$(printf '\\x%x' \"$1\")\"\n}\n\nprint_ascii \"$1\"", "category": "Python"}, {"instruction": "Find and delete duplicate elements from a given array in Java.", "input": "array = [1, 2, 3, 2, 4]", "output": "public static int[] deleteDuplicates(int[] array) {\n    ArrayList<Integer> list = new ArrayList<>();\n    for (int i = 0; i < array.length; i++) {\n        if (!list.contains(array[i])) {\n            list.add(array[i]);\n        }\n    } \n    \n    int[] output = list.stream().mapToInt(Integer::intValue).toArray();\n    \n    return output;\n}\n\nint[] array = [1, 2, 3, 2, 4]\nint[] output = deleteDuplicates(array); \nSystem.out.println(Arrays.toString(output));", "category": "Python"}, {"instruction": "Create a class in C# to calculate compound interest.", "input": "", "output": "public class CompoundInterest {\n    private double principal;\n    private double rate;\n    private int periods;\n \n    public CompoundInterest(double principal, double rate, int periods) {\n        this.principal = principal;\n        this.rate = rate;\n        this.periods = periods;\n    }\n \n    public double CalculateCompoundInterest() {\n        return principal * Math.Pow(1 + (rate / periods), periods);\n    }\n}", "category": "Python"}, {"instruction": "Write a Java program to print binary numbers from 0 to 15.", "input": "", "output": "public class Binary {\n    public static void main(String[] args) {\n        for (int i = 0; i <= 15; i++) {\n            System.out.println(Integer.toBinaryString(i));\n        }\n    }\n}", "category": "Python"}, {"instruction": "Create a C++ class to simulate a stack data structure.", "input": "", "output": "#include <iostream>\nusing namespace std;\n\nclass Stack {\n\tprivate:\n\t\tint top = -1;\n\t\tint size;\n\t\tint *arr;\n\t\n\tpublic:\n\t    Stack(int n) {\n\t        size = n;\n\t        arr = new int[size];\n\t    }\n\t\n\t    void push(int x) {\n\t        if (top < size - 1) {\n\t            ++top;\n\t            arr[top] = x;\n\t        } else {\n\t            cout << \"Stack overflow!\" << endl;\n\t        }\n\t    }\n\t\n\t    int pop() {\n\t        if (top < 0) {\n\t            cout << \"Stack underflow!\" << endl;\n\t            return -1;\n\t        } else {\n\t            return arr[top--];\n\t        }\n\t    }\n\t\n\t    int topElement() {\n\t        if (top < 0) {\n\t            cout << \"Stack underflow!\" << endl;\n\t            return -1;\n\t        } else {\n\t            return arr[top];\n\t        }\n\t    }\n\t\n\t    int isEmpty() {\n\t        return top < 0;\n\t    }\n};", "category": "Python"}, {"instruction": "Write an HTML page that takes an email address as input and displays a \"Thank you\" message after the submission.", "input": "", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Thank You</title>\n  </head>\n \n  <body>\n    <form method=\"POST\" action=\"\">\n      <label>\n        Email:\n        <input type=\"email\" name=\"email\">\n      </label>\n      <input type=\"submit\" value=\"Submit\">\n    </form>\n \n<?php\nif ($_POST) {\n  echo 'Thank you for signing up!';\n}\n?>\n \n  </body>\n</html>", "category": "Python"}, {"instruction": "Sort an array of strings alphabetically.", "input": "array = [\"cat\", \"dog\", \"horse\", \"apple\", \"zebra\"]", "output": "def sort_alphabetically(array):\n    sorted_array = sorted(array, key = str.lower)\n    return sorted_array\n\narray = [\"cat\", \"dog\", \"horse\", \"apple\", \"zebra\"]\nprint(sort_alphabetically(array))", "category": "Python"}, {"instruction": "Select the appropriate language to implement a linked list data structure.", "input": "", "output": "C++ is the best language to implement a linked list data structure as it provides features like dynamic memory allocation, pointers and templates which make it easier to create a linked list.", "category": "Python"}, {"instruction": "Create a function in Python that takes two list of strings as parameters and returns a third list of strings which are the elements common in both lists.", "input": "list1 = [\"apple\", \"orange\", \"banana\", \"cherry\"] \nlist2 = [\"apple\", \"grapes\", \"banana\", \"watermelon\"]", "output": "def common(list1, list2): \n    ans_list = [] \n    \n    for i in list1: \n        for j in list2: \n            if i == j: \n                ans_list.append(i) \n    return ans_list \n  \nif __name__ == \"__main__\": \n    list1 = [\"apple\", \"orange\", \"banana\", \"cherry\"] \n    list2 = [\"apple\", \"grapes\", \"banana\", \"watermelon\"]\n    print(common(list1, list2)) # ['apple', 'banana']", "category": "Python"}, {"instruction": "Create an SQL query to find the total cost of the items purchased by a customer with the id 1", "input": "", "output": "SELECT SUM(i.price * c.quantity) AS total_cost\nFROM items i\nINNER JOIN customers c\n    ON c.item_id = i.id\nWHERE c.customer_id = 1;", "category": "Python"}, {"instruction": "Create a machine learning algorithm to classify emails as spam or not spam.", "input": "", "output": "import numpy as np \nfrom sklearn.naive_bayes import MultinomialNB \nfrom sklearn.feature_extraction.text import CountVectorizer \n\n# Create feature vectors \nvectorizer = CountVectorizer() \n\n# Train the model \nclassifier = MultinomialNB() \n\n# training data \ntraining_data = [\n   (\"cheap replica watches\", \"spam\"), \n   (\"click here to win money\", \"spam\"), \n   (\"I like your offer\", \"not spam\")]\n\n# Extract feature vectors \ntrain_features = vectorizer.fit_transform([data[0] for data in training_data]) \n\n# Train classifier \nclassifier.fit(train_features, [data[1] for data in training_data]) \n\n# Test email \ntest_email = \"Click here to get special offers\"\ntest_features = vectorizer.transform([test_email]) \nprediction = classifier.predict(test_features) \n\nif prediction[0] == \"spam\": \n   print(\"Test email is marked as spam\") \nelif prediction[0] == \"not spam\": \n   print(\"Test email is marked as not spam\")", "category": "Python"}, {"instruction": "Create a basic HTML page with a table that displays the index, name, and link of the top 10 global universities.", "input": "index  |  name  |  link\n1. Massachusetts Institute of Technology | https://www.mit.edu/ \n2. Stanford University | https://www.stanford.edu/ \n3. Harvard University | https://www.harvard.edu/ \n4. California Institute of Technology | https://www.caltech.edu/ \n5. University of Oxford | https://www.ox.ac.uk/ \n6. University of Cambridge | https://www.cam.ac.uk/ \n7. Princeton University | https://www.princeton.edu/ \n8. Imperial College London | https://www.imperial.ac.uk/ \n9. University of Chicago | https://www.uchicago.edu/ \n10. ETH Zurich (Swiss Federal Institute of Technology) | https://www.ethz.ch/", "output": "<html>\n  <head>\n    <title>Top 10 Global Universities</title>\n  </head>\n  <body>\n    <h1>Top 10 Global Universities</h1>\n    <table>\n      <tr>\n        <th>Index</th>\n        <th>Name</th>\n        <th>Link</th>\n      </tr>\n      <tr>\n        <td>1</td>\n        <td>Massachusetts Institute of Technology</td>\n        <td>https://www.mit.edu/</td>\n      </tr>\n      <tr>\n        <td>2</td>\n        <td>Stanford University</td>\n        <td>https://www.stanford.edu/</td>\n      </tr>\n      <tr>\n        <td>3</td>\n        <td>Harvard University</td>\n        <td>https://www.harvard.edu/</td>\n      </tr>\n      <tr>\n        <td>4</td>\n        <td>California Institute of Technology</td>\n        <td>https://www.caltech.edu/</td>\n      </tr>\n      <tr>\n        <td>5</td>\n        <td>University of Oxford</td>\n        <td>https://www.ox.ac.uk/</td>\n      </tr>\n      <tr>\n        <td>6</td>\n        <td>University of Cambridge</td>\n        <td>https://www.cam.ac.uk/</td>\n      </tr>\n      <tr>\n        <td>7</td>\n        <td>Princeton University</td>\n        <td>https://www.princeton.edu/</td>\n      </tr>\n      <tr>\n        <td>8</td>\n        <td>Imperial College London</td>\n        <td>https://www.imperial.ac.uk/</td>\n      </tr>\n      <tr>\n        <td>9</td>\n        <td>University of Chicago</td>\n        <td>https://www.uchicago.edu/</td>\n      </tr>\n      <tr>\n        <td>10</td>\n        <td>ETH Zurich (Swiss Federal Institute of Technology)</td>\n        <td>https://www.ethz.ch/</td>\n      </tr>\n    </table>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create an SQL query to retrieve the list of customers and total accounts in the customer table?", "input": "", "output": "SELECT c.*, COUNT(a.account_id) AS total_accounts\nFROM customer c\nLEFT JOIN account a ON c.customer_id = a.customer_id\nGROUP BY c.customer_id;", "category": "Python"}, {"instruction": "Create a basic HTML page with a title, a heading and a brief introduction to yourself.", "input": "My name is John Doe, I am an engineer and webdeveloper.", "output": "<html>\n  <head>\n    <title>Introducing John Doe</title>\n  </head>\n  <body>\n    <h1>Introducing John Doe</h1>\n    <p>\n      Hi, I'm John Doe. I am an engineer and webdeveloper with 20 years of experience. I have worked on projects for some of the biggest companies in the world, and I'm proud to say that I have always delivered quality work. I'm excited to have a chance to work on new projects and be part of an amazing team.\n    </p>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Implement a function to check whether a given array contains an odd number or not.", "input": "array = [2, 3, 5, 9, 22, 13]", "output": "def check_odd(array): \n    for i in array:\n        if (i % 2 != 0):\n            return True\n    return False \n  \narray = [2, 3, 5, 9, 22, 13] \nif (check_odd(array)): \n    print(\"Array contains an odd number\") \nelse: \n    print(\"Array does not contain an odd number\")", "category": "Python"}, {"instruction": "Identify the data structure used to represent a given tree.", "input": "A Tree with 8 nodes, A as the root node, and B, C, D, E, F, G and H as its children.", "output": "A tree is a hierarchical data structure, so it can be best represented using a linked list.", "category": "Python"}, {"instruction": "Create a HTML page to display the top 5 scores from a given array.", "input": "An array with 10 elements [7, 8, 10, 3, 2, 9, 5, 1, 6, 4]", "output": "<html>\n  <head>\n    <title>Top 5 scores</title>\n  </head>\n  <body>\n    <h1>Top 5 scores</h1>\n    <ul>\n      <li>10</li>\n      <li>9</li>\n      <li>8</li>\n      <li>7</li>\n      <li>6</li>\n    </ul>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Implement a C language program to swap two numbers without using a temporary variable.", "input": "Two integers, 5 and 10", "output": "#include <stdio.h> \n  \nint main() \n{ \n    int a = 5, b = 10; \n  \n    printf(\"Before Swapping a = %d, b=%d\\n\",a,b); \n  \n    a = a + b; // sum of a and b \n    b = a - b; // b is now equal to a \n    a = a - b; // a is now equal to b \n  \n    printf(\"After Swapping a = %d, b=%d\",a,b); \n  \n    return 0; \n} \n\nOutput:\nBefore Swapping a = 5, b=10\nAfter Swapping a = 10, b=5", "category": "Python"}, {"instruction": "Given an array of numbers, write a Python program to find the second highest element in the array.", "input": "[1, 3, 5, 4, 7, 9]", "output": "def second_highest(arr):\n arr.sort()\n return arr[-2]", "category": "Python"}, {"instruction": "Write a Python program to create a list containing the squares of numbers between 1 and 50.", "input": "", "output": "def squares_list():\n squares = []\n for i in range(1, 51):\n squares.append(i**2)\n return squares", "category": "Python"}, {"instruction": "Given a list of strings, write a Python program to remove all duplicates from the list.", "input": "[\u201ccat\u201d, \u201cdog\u201d, \u201ccat\u201d, \u201cparrot\u201d, \u201cgoat\u201d, \u201cdog\u201d]", "output": "def remove_duplicates(list):\n res = [] \n for str in list:\n if str not in res:\n res.append(str)\n return res", "category": "Python"}, {"instruction": "Create a Python program to generate a random 8-character alphanumeric string. The string should contain at least one lowercase letter, one uppercase letter, one digit and one special character.", "input": "", "output": "import string\nimport random\n\ndef generate_random_string():\n chars = string.ascii_letters + string.digits + string.punctuation\n string_length = 8\n random_string = ''.join(random.choice(chars) for _ in range(string_length))\n return random_string", "category": "Python"}, {"instruction": "Use a machine learning model to predict the next number in a given sequence.", "input": "Sequence: [1, 4, 9, 16, 25]", "output": "The next number in the given sequence is 36.\n\nTo use a machine learning model, the dataset should be split into features and labels. The features could be the numbers in the sequence, and the label could be the next number. The model can be trained on this dataset to accurately predict the next number in a sequence.", "category": "Python"}, {"instruction": "Make the following C++ program print \"Hello, World\" 10 times consecutively.", "input": "#include<iostream>\n\nint main() {\n    ________\n    return 0;\n}", "output": "#include<iostream>\n\nint main() {\n    for(int i = 0; i < 10; i++)\n        std::cout << \"Hello, World!\" << std::endl;\n    return 0;\n}", "category": "Python"}, {"instruction": "Create a React component to display HTML elements in a scrolling page.", "input": "", "output": "import React from 'react';\n\nconst ScrollingPage = () => {\n  return (\n    <div style={{ overflow: 'auto' }}>\n      {/* HTML elements you want to display go here */}\n    </div>\n  );\n};\n\nexport default ScrollingPage;", "category": "Python"}, {"instruction": "How would you fill in the blanks in the following code to make it print \"Hello, World\" n times in a row?", "input": "n = 5\nfor _ in range(n):\n  ________", "output": "n = 5\nfor _ in range(n):\n  print(\"Hello, World!\")", "category": "Python"}, {"instruction": "Create a low-level PyTorch implementation of the following neural network structure, using the class PyTorch provides.", "input": "Input shape: (300, 100)\n\nOutput shape: (2, 5)", "output": "import torch\n\nclass MyNetwork(torch.nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.fc1 = torch.nn.Linear(300, 150)\n        self.fc2 = torch.nn.Linear(150, 100)\n        self.fc3 = torch.nn.Linear(100, 50)\n        self.fc4 = torch.nn.Linear(50, 5)\n        self.softmax = torch.nn.Softmax(dim=1)\n\n\n    def forward(self, x):\n        x = self.fc1(x)\n        x = self.fc2(x)\n        x = self.fc3(x)\n        x = self.fc4(x)\n        \n        return self.softmax(x)", "category": "Python"}, {"instruction": "Write a function using CSS to make the font size of a tag with the id `title` larger.", "input": "#title {\n  font-size: 12px;\n}", "output": "#title {\n  font-size: 16px;\n}", "category": "Python"}, {"instruction": "Construct an object in JavaScript to hold employee data with the fields `name` and `position`.", "input": "John, Manager", "output": "var employee = {\n  name: 'John',\n  position: 'Manager'\n};", "category": "Python"}, {"instruction": "Find the length of a string `The quick brown fox`.", "input": "", "output": "19", "category": "Python"}, {"instruction": "Use the string `'Hello world!'` and print it reversed.", "input": "", "output": "!dlrow olleH", "category": "Python"}, {"instruction": "Create an array with elements 'Red', 'Green', 'Blue'.", "input": "", "output": "var colors = ['Red', 'Green', 'Blue'];", "category": "Python"}, {"instruction": "Create a web page with a navigation bar at the top.", "input": "", "output": "<!DOCTYPE html>\n<html>\n\n<head>\n    <title>Navigation Bar Demo</title>\n</head>\n\n<body>\n    <nav>\n        <ul>\n            <li><a href=\"#\">Home</a></li>\n            <li><a href=\"#\">About</a></li>\n            <li><a href=\"#\">Contact</a></li>\n        </ul>\n    </nav>\n\n    <h1>Welcome!</h1>\n    <p>This is a demo page with a navigation bar at the top.</p>\n    \n</body>\n\n</html>", "category": "Python"}, {"instruction": "Create a Python program to convert an input string to Morse code.", "input": "", "output": "def string_to_morse(user_string):\n morse_code = \"\"\n for ch in user_string:\n if ch.lower() in Morse.alpha:\n morse_code += Morse.alpha[ch.lower()] + \" \"\n return morse_code", "category": "Python"}, {"instruction": "Change the line in the following code that contains a syntax error.", "input": "x = 10\nif x == 10\nprint('x is 10')", "output": "x = 10\nif x == 10:\nprint('x is 10')", "category": "Python"}, {"instruction": "Write a JSON object that contains five key-value pairs.", "input": "", "output": "{\n    \"name\": \"John Smith\",\n    \"age\": 35,\n    \"email\": \"john.smith@example.com\",\n    \"phone\": \"+1 123 456 7890\",\n    \"address\": \"123 Main Street, Anytown, US\"\n}", "category": "Python"}, {"instruction": "Write an HTML table with two columns for 'name' and 'age'.", "input": "", "output": "<table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th> \n  </tr>\n</table>", "category": "Python"}, {"instruction": "Write a Python program to truncate a string after a given number of characters.", "input": "string = \"Hello World!\", limit = 6", "output": "def truncate_string(string, limit):\n    return string[:limit]", "category": "Python"}, {"instruction": "Write a Python expression to compute the exponential of a given number.", "input": "x = 3", "output": "import math\nmath.exp(x)", "category": "Python"}, {"instruction": "Write a Python expression to generate a list containing numbers from 0 to 12 (not including 12).", "input": "", "output": "[x for x in range(0, 12)]", "category": "Python"}, {"instruction": "Write a Python expression to compute the GCD (Greatest Common Divisor) of two numbers.", "input": "a = 10, b = 15", "output": "def compute_gcd(a, b):\n    while b:\n        a, b = b, a % b\n    \n    return a", "category": "Python"}, {"instruction": "Construct correctly a for-loop in Python that iterates 6 times from 0 to 5", "input": "", "output": "for i in range(6):\n    print(i)", "category": "Python"}, {"instruction": "Create an HTML page that prints the current date.", "input": "", "output": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>Current Date</title>\n    </head>\n    <body>\n        <p>Today's date is <script> document.write(new Date().toDateString()); </script></p>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Write a function to generate a random password that is 10 characters long.", "input": "", "output": "import random\nimport string\n\ndef generate_password(length):\n    chars = string.ascii_letters + string.digits\n    return ''.join(random.choice(chars) for _ in range(length))\n\nprint(generate_password(10))", "category": "Python"}, {"instruction": "Train a neural network using TensorFlow to predict housing prices.", "input": "", "output": "import tensorflow as tf\nimport numpy as np\nfrom tensorflow import keras\n\n# Load the dataset\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.housing_prices.load_data()\n\n# Normalize the input data\nx_train = x_train / 255.0\nx_test = x_test / 255.0\n\n# Build the model\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Flatten(input_shape=(x_train.shape[1], x_train.shape[2])),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(1)\n])\n\n# Compile and fit the model\nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=10)\n\n# Evaluate the model\ntest_loss, test_accuracy = model.evaluate(x_test, y_test)\nprint('Test accuracy {:.2f}%'.format(test_accuracy*100))", "category": "Python"}, {"instruction": "Construct a SQL query to retrieve the top 10 most viewed articles from the database.", "input": "Table \"articles\":\n- id (integer)\n- title (string)\n- content (string)\n- views (integer)", "output": "SELECT title, views \nFROM articles \nORDER BY views DESC \nLIMIT 10;", "category": "Python"}, {"instruction": "Create an array with 5 elements in Python.", "input": "", "output": "arr = [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Convert the following string into an array using the JS split() function: \"apples oranges bananas grapes\".", "input": "\"apples oranges bananas grapes\"", "output": "str.split(\" \"); // returns [\"apples\", \"oranges\", \"bananas\", \"grapes\"]", "category": "Python"}, {"instruction": "Describe what a closure is in programming.", "input": "", "output": "A closure is a special type of function that allows a program to access variables and functions from an outer (or parent) scope, even after that outer scope has been closed or finished executing. The closure essentially \"closes\" the variables and functions from the outer scope, making them available for use in the inner scope of the function.", "category": "Python"}, {"instruction": "Create a regex to extract the first name from a string \"John Doe is a programmer\".", "input": "\"John Doe is a programmer\"", "output": "/John(\\s[A-Za-z]+)*/", "category": "Python"}, {"instruction": "Write a loop that prints the numbers from 0 to 9 on the console.", "input": "", "output": "for (let i = 0; i < 10; i++) {\n  console.log(i);\n}", "category": "Python"}, {"instruction": "Create a variable 'total' that stores the sum of integers 5 and 10.", "input": "", "output": "total = 5 + 10;", "category": "Python"}, {"instruction": "Sort the following array in ascending order: [135, 781, 79, 6, 903, 5].", "input": "[135, 781, 79, 6, 903, 5]", "output": "[5, 6, 79, 135, 781, 903]", "category": "Python"}, {"instruction": "Create a method to multiply two numbers.", "input": "", "output": "public static int multiply(int num1, int num2) {\n  return num1 * num2;\n}", "category": "Python"}, {"instruction": "Calculate the mean, median and mode for the given set of numbers.", "input": "130, 160, 140, 160, 160", "output": "The mean is: 149.4\nThe median is: 160\nThe mode is: 160", "category": "Python"}, {"instruction": "Create a React component to render a table with 10 rows and 3 columns.", "input": "", "output": "import React, { Component } from 'react';\n\nclass Table extends Component {\n  render() {\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>Column 1</th>\n            <th>Column 2</th>\n            <th>Column 3</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Array.from(Array(10).keys()).map((x) => {\n            return (\n              <tr>\n                <td>Data 1</td>\n                <td>Data 2</td>\n                <td>Data 3</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default Table;", "category": "Python"}, {"instruction": "Write a SQL query to select all rows from a table where the value of a column is between two ranges.", "input": "", "output": "SELECT *\nFROM table_name\nWHERE column_name BETWEEN start_value AND end_value;", "category": "Python"}, {"instruction": "Write JavaScript code to print the Fibonacci sequence.", "input": "", "output": "function printFibonacci(num) {\n    let a = 0;\n    let b = 1;\n    console.log(a);\n    console.log(b);\n  \n    for (let i = 3; i <= num; i++) {\n      const c = a + b;\n      a = b;\n      b = c;\n      console.log(c);\n    }\n}\n\nprintFibonacci(10);", "category": "Python"}, {"instruction": "Design an algorithm in Java for solving a linear search problem.", "input": "", "output": "// Returns index of x if it is present in arr[], \n// else return -1 \nint search(int arr[], int n, int x) \n{ \n    int i; \n    for (i = 0; i < n; i++) \n        if (arr[i] == x) \n            return i; \n    return -1; \n}", "category": "Python"}, {"instruction": "Write code to split a given string into words.", "input": "", "output": "def split_string_into_words(s):\n    words = s.split(' ') \n    return words", "category": "Python"}, {"instruction": "Design a program to remove punctuations from a given string.", "input": "", "output": "def remove_punctuations(s):\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    s_without_punc = \"\" \n    for char in s: \n        if char not in punctuations: \n            s_without_punc = s_without_punc + char\n    return s_without_punc", "category": "Python"}, {"instruction": "Create a script in Python to sort a given array.", "input": "[1, 5, 4, 3, 6, 2]", "output": "sorted_array = [1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Compute the most frequent character from the following string.", "input": "Codepen", "output": "'e' is the most frequent character in the given string.", "category": "Python"}, {"instruction": "Generate code in C++ to determine the number of palindromic substrings in a given string.", "input": "", "output": "int countPalindromeSubstrings(string s)  \n{  \n    // To store the length of palindromic substrings \n    int count = 0;  \n   \n    // Iterate over all possible centres  \n    for(int i = 0; i < s.length(); ++i)  \n    {  \n        // Expand from possible centres \n        for(int j = 0; i - j >= 0 && i + j < s.length(); ++j) \n        {  \n            // Check if the current substrings is a palindrome \n            if(s[i - j] == s[i + j]) \n            {  \n                count++; \n            } \n            else\n            {\n                break; \n            }\n        }  \n        \n        // Expand from possible centres \n        for (int j = 1; i - j + 1 >= 0 && i + j < s.length(); ++j) \n        { \n            // Check if the current substrings is a palindrome \n            if (s[i - j + 1] == s[i + j]) \n            {  \n                count++; \n            } \n            else \n            { \n                break; \n            }  \n        }  \n    }  \n  \n    return count;  \n}", "category": "Python"}, {"instruction": "Write a code to create Fibonacci sequence in Python", "input": "", "output": "def Fibonacci(n): \n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else: \n        return Fibonacci(n-1) + Fibonacci(n-2)", "category": "Python"}, {"instruction": "Design a data structure in Java to store students' marks in an examination", "input": "", "output": "import java.util.HashMap; \n\n// Data structure to store Marks \nclass Marks { \n    int physicsMarks; \n    int chemistryMarks; \n    int mathsMarks; \n};\n\n// HashMap to store Student's Marks \nHashMap<String, Marks> marksHashMap = new HashMap<>(); \n  \n// Function to store Student's marks \nvoid storeMarks(String studentId, int physicsMarks, \nint chemistryMarks, int mathsMarks) \n{ \n    // Object of Marks \n    Marks marks = new Marks(); \n    marks.physicsMarks = physicsMarks; \n    marks.chemistryMarks = chemistryMarks; \n    marks.mathsMarks = mathsMarks; \n  \n    String studentId marksHashMap.put(studentId, marks); \n}", "category": "Python"}, {"instruction": "Suppose you are given an array of active processes, write an algorithm in C++ that returns the process with the highest execution time", "input": "Array of process objects with the following properties {name, id, priority, executionTime}", "output": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nstruct Process {\n    string name;\n    int id;\n    int priority;\n    int executionTime;\n};\n\nProcess maxTimeProcess(vector<Process> processes) { \n    Process maxExecProcess = processes[0]; \n  \n    for (int i = 1; i < processes.size(); i++) { \n        if (maxExecProcess.executionTime <  \n            processes[i].executionTime)  \n            maxExecProcess = processes[i];         \n    } \n  \n    return maxExecProcess; \n} \n\nint main(){\n\tvector<Process> processes = {{\"P1\", 123, 0, 50}, {\"P2\", 124, 1, 60}, {\"P3\", 125, 0, 75}};\n\tcout << \"Process with Highest Execution Time: \" << maxTimeProcess(processes).name << endl;\n\treturn 0;\n}", "category": "Python"}, {"instruction": "Implement a sorting algorithm in C++ to sort an array of integers in an ascending order", "input": "Array: [4, 9, 2, 6, 1, 3]", "output": "#include <iostream>\nusing namespace std;\n\nvoid sortArray(int arr[], int n)\n{\n\tint i, j, temp;\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tfor (j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\ttemp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t}\n\t\t}\n\t}\n    cout << \"Sorted Array in Ascending Order:\" << endl;\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tcout << arr[i] << \" \";\n\t}\n\tcout << endl;\n}\n\nint main()\n{\n\tint n;\n\tint arr[50];\n\tcout << \"Enter the size of array: \";\n\tcin >> n;\n\tcout << \"Enter the elements of array: \" << endl;\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tcin >> arr[i];\n\t}\n\tsortArray(arr, n);\n\treturn 0;\n}", "category": "Python"}, {"instruction": "Construct an array which contains the count of each character present in the given string.", "input": "String: \u201cHello world\u201d", "output": "def characterCount(str): \n    # create a dictionary and store count \n    # of every character \n    freq = {} \n  \n    for i in str: \n        if i in freq: \n            freq[i] += 1\n        else: \n            freq[i] = 1\n          \n    # return the dictionary    \n    return freq \n  \n# Driver code \nstr = \"Hello world\"\nprint(characterCount(str))", "category": "Python"}, {"instruction": "Compose a regular expression to extract the first digit from a given string.", "input": "String: \"abc123 456xyz\"", "output": "re.findall('^\\D*(\\d)', 'abc123 456xyz')", "category": "Python"}, {"instruction": "Develop an algorithm to traverse a two-dimensional array.", "input": "A two-dimensional array with 3 rows and 4 columns.", "output": "One possible algorithm to traverse a two-dimensional array is an in-place spiral traversal. Start at the top left corner of the array and traverse in a clockwise direction while updating the location at each step. Each time move one step in the direction you are currently going, then turn right and continue in the new direction. When you reach the end of a row or column, turn right and continue in the new direction until you have traversed the entire array. \n\nFor example, for an array of 3 rows and 4 columns: \n\nStep 1: [0, 0] \nStep 2: [0, 1] \nStep 3: [0, 2] \nStep 4: [0, 3] \nStep 5: [1, 3] \nStep 6: [2, 3] \nStep 7: [2, 2] \nStep 8: [2, 1] \nStep 9: [2, 0] \nStep 10: [1, 0] \nStep 11: [1, 1] \nStep 12: [1, 2]", "category": "Python"}, {"instruction": "Design a JavaScript class to perform a specific operation on a given matrix.", "input": "A matrix [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "class MatrixOperation {\n  constructor(matrix) {\n    this.matrix = matrix;\n  }\n\n  // Implement the operation here\n  // e.g. Matrix multiplication\n}\n\nconst matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconst mOp = new MatrixOperation(matrix);", "category": "Python"}, {"instruction": "Assign values to a given linked list", "input": "A linked list with 4 nodes", "output": "class Node: \n    def __init__(self,data): \n        self.data = data\n        self.next = None\n  \nclass LinkedList: \n    def __init__(self):  \n        self.head = None\n  \n    def assignValues(self, dataList): \n        node1 = Node(dataList[0]) \n        node2 = Node(dataList[1]) \n        node3 = Node(dataList[2]) \n        node4 = Node(dataList[3]) \n  \n        self.head = node1 \n        node1.next = node2 \n        node2.next = node3 \n        node3.next = node4 \n\ndataList = [1, 2, 3, 4] \nllist = LinkedList() \nllist.assignValues(dataList)", "category": "Python"}, {"instruction": "Design a data structure in C++ to store a large set of customer data", "input": "", "output": "#include <iostream>\n#include <unordered_map>\nusing namespace std;\n\n// Data structure to store Customer data \nstruct Customer { \n    int id; \n    string name; \n    string address;\n}; \n  \n// Function to store customer data using HashMap \nvoid store(unordered_map<int, Customer>& map, Customer& customer) \n{ \n    map[customer.id] = customer; \n} \n\nint main() \n{ \n    unordered_map<int, Customer> map; \n  \n    Customer customer1{ 1, \"John\", \"B214, Road 11, US\" }; \n    Customer customer2{ 2, \"Jacob\", \"C231, Road 53, UK\" }; \n    Customer customer3{ 3, \"James\", \"D215, Road 43, Canada\" }; \n  \n    store(map, customer1); \n    store(map, customer2); \n    store(map, customer3); \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Given the following array, write a JavaScript code to filter out the elements which are greater than 10.", "input": "arr = [2, 3, 5, 8, 10, 12, 15, 18];", "output": "var filteredArray = arr.filter(function(num) {\n  return num > 10;\n});\n\nconsole.log(filteredArray); // [12, 15, 18]", "category": "Python"}, {"instruction": "What method is used to add an element to a stack in Java?", "input": "", "output": "In Java, the method used to add an element to a stack is push(). This method adds an element to the top of the stack and increases the stack size by one.", "category": "Python"}, {"instruction": "How can a class be extended in Java?", "input": "", "output": "In Java, a class can be extended using the keyword \"extends\". This allows a new class to inherit all the variables, methods and constructors of another class. Additionally, the new class will have all the properties of its parent class as well as any new code defined in the new class.", "category": "Python"}, {"instruction": "Rewrite the following code to use more efficient loops.", "input": "for (int i = 0; i < 10; i++) {\n   for (int j = 0; j < 10; j++) {\n      System.out.println(\"hi\");\n   }\n}", "output": "for (int i = 0; i < 100; i++) {\n    System.out.println(\"hi\");\n}", "category": "Python"}, {"instruction": "Train a logistic regression model on the housing prices dataset with 5 features.", "input": "", "output": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n#read in the dataset\ndata = pd.read_csv('housing_prices.csv')\n\n#inspect the data\ndata.info()\ndata.describe()\n\n#split the data into train & test\nX = data[['Bedrooms','Bathrooms','Square_Feet','Parking','Yard']]\ny = data['Price']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n#train the logistic regression model\nlogreg = LogisticRegression().fit(X_train, y_train)\n\n#evaluate model performance\nprint(\"Training set score: {:.3f}\".format(logreg.score(X_train, y_train)))\nprint(\"Test set score: {:.3f}\".format(logreg.score(X_test, y_test)))", "category": "Python"}, {"instruction": "Write a script in JavaScript to calculate the average temperature from a given array of temperatures.", "input": "", "output": "function calculateAverage(temps) {\n    let total = 0;\n    temps.forEach(temp => {\n        total += temp;\n    });\n    return total / temps.length;\n}", "category": "Python"}, {"instruction": "Write a compare() function in Java that takes two values and returns -1, 0, or 1 if the first value is less than, equal to, or greater than the second value.", "input": "", "output": "public static int compare(Object o1, Object o2) {\n\n    if (o1 < o2) {\n        return -1;\n    } else if (o1 == o2) {\n        return 0;\n    }\n    else {\n        return 1;\n    }\n}", "category": "Python"}, {"instruction": "Create a query in MySQL to list the number of male and female employees in a given department.", "input": "Table: employees\nColumns: name, gender, department", "output": "SELECT department, COUNT(*) AS count, gender\nFROM employees\nGROUP BY department, gender;", "category": "Python"}, {"instruction": "Write a Lambda function in Python to generate random numbers in the range of 10 to 50.", "input": "", "output": "import random\ndef random_num():\n    return random.randint(10,50)", "category": "Python"}, {"instruction": "Create a MySQL query to list the names of employees working in the company who are under the age of 25.", "input": "Table: employees\nColumns: name, age", "output": "SELECT name FROM employees WHERE age < 25;", "category": "Python"}, {"instruction": "Write HTML code for a text input field with the placeholder \"Enter name\".", "input": "", "output": "<input type=\"text\" placeholder=\"Enter name\">", "category": "Python"}, {"instruction": "Write an objective-C program to print the number of ones in an integer.", "input": "", "output": "int countOnesInInteger(int number) { \n\tint count = 0; \n\twhile(number) { \n\t\tcount += number & 1; \n\t\tnumber >>= 1;\n\t} \n\treturn count; \n}", "category": "Python"}, {"instruction": "Develop a Python program to calculate the area of a triangle given its three sides.", "input": "", "output": "# Function to calculate area of triangle  \ndef calculateArea(a, b, c): \n     \n    # Calculating the semi-perimeter of triangle  \n    s = (a + b + c) / 2\n  \n    # Calculate the area  \n    area = (s*(s - a)*(s - b)*(s - c)) ** 0.5    \n    \n    return area \n\n# Driver code  \na = 5\nb = 6\nc = 7\nprint(\"Area of triangle is %0.2f\" %calculateArea(a, b, c))", "category": "Python"}, {"instruction": "Create an R script that takes the summation of given numbers.", "input": "", "output": "add_numbers <- function(a, b, c){\n  return(a + b + c)\n}", "category": "Python"}, {"instruction": "Formulate a query in MongoDB to find records with a specific field having an array containing a certain value.", "input": "", "output": "db.collection.find({\"field.arrayName\": \"value\"})", "category": "Python"}, {"instruction": "Create a SQL query that finds the third highest salary of all employees.", "input": "", "output": "SELECT TOP 1 Salary\nFROM (\n\tSELECT DISTINCT TOP 3 Salary\n\tFROM Employees\n\tORDER BY Salary DESC\n) AS Param\nORDER BY Salary ASC", "category": "Python"}, {"instruction": "Construct a Pandas dataframe that contains the average monthly temperatures of a given location over the year.", "input": "", "output": "import pandas as pd\n\n# define the year \nyear = 2020\n\n# define the list of months\nmonths = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n          \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n\n# define the list of temperatures\ntemperatures =[32.2, 37.3, 43.3, 51.4, 63.4, 70.4, \n               72.7, 73.4, 68.7, 56.4, 43.7, 34.2]\n\n# construct the dataframe\ndf = pd.DataFrame({\n    'month': months,\n    'temperature': temperatures\n})\n\n# set the index to the month column\ndf.set_index('month', inplace=True)", "category": "Python"}, {"instruction": "Convert the following Java code into JavaScript.", "input": "public static int max(int[] array){\n    int max = array[0];\n    for(int i=1; i<array.length; i++){\n        if(array[i] > max){\n            max = array[i];\n        }\n    }\n    return max;\n}", "output": "function max(arr) {\n    let max = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}", "category": "Python"}, {"instruction": "Identify the type of the given input data.", "input": "[\"A\", \"B\", \"C\"]", "output": "The given input data is an array of strings.", "category": "Python"}, {"instruction": "Develop JavaScript code to find the nth Fibonacci number.", "input": "", "output": "function fibonacci(n) {\n  if (n <= 1) return n;\n\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nlet result = fibonacci(10);\nconsole.log(result);", "category": "Python"}, {"instruction": "Create a Python program to accept a string from the user and print out the number of vowels in the string.", "input": "Hello World", "output": "def countVowels(str): \n\tvowel = 0\n\tfor i in str: \n\t\tif i.lower() in ['a', 'e', 'i', 'o', 'u']: \n\t\t\tvowel += 1\n\treturn vowel \n\n# Driver code \nstr = \"Hello World\"\nprint(\"Number of vowels are:\", countVowels(str))", "category": "Python"}, {"instruction": "Compute the average of the elements of the given list.", "input": "nums = [8, 19, 2, 5, 6]", "output": "average = 8.4  # (8 + 19 + 2 + 5 + 6)/5", "category": "Python"}, {"instruction": "Edit the following PHP code to add an if-statement.", "input": "$name = 'John';\necho \"My name is \" . $name;", "output": "if (isset($name)) { \n    echo \"My name is \" . $name;\n}", "category": "Python"}, {"instruction": "Replace all occurence of the string 'Python' in a text with 'Java'.", "input": "This text is about Python programming.", "output": "This text is about Java programming.", "category": "Python"}, {"instruction": "Retrieve the 5th element from a list named 'numbers'.", "input": "numbers = [1, 2, 3, 4, 5, 6, 7, 8]", "output": "5", "category": "Python"}, {"instruction": "Create a new HTML page and add a <div> element inside the <body>.", "input": "", "output": "<html>\n    <head>\n        <title>New Page</title>\n    </head>\n    <body>\n        <div></div>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Construct the SQL query to select the rows from the \"Employees\" table whose salary is greater than the average salary.", "input": "", "output": "SELECT * FROM Employees WHERE salary > (SELECT AVG(salary) FROM Employees);", "category": "Python"}, {"instruction": "Write a function that takes an array of numbers and prints out all the pairs of numbers whose sum is equal to a given number.", "input": "targetSum = 8 \nnumbers = [1,9,4,3,8]", "output": "def print_pairs_with_sum(numbers, targetSum): \n    for i in range(len(numbers)): \n        for j in range(i + 1, len(numbers)): \n            if (numbers[i] + numbers[j] == targetSum):\n                print (\"(\", numbers[i], \",\", numbers[j], \")\")", "category": "Python"}, {"instruction": "What is the difference between len() and index() methods in Python?", "input": "", "output": "The len() method returns the length of a string, while the index() method returns the index of a substring or character in the string. The len() method returns the number of characters or elements in the string, while the index() method returns the starting index of the substring in the string.", "category": "Python"}, {"instruction": "What is the data type of a variable that can only contain boolean values in Python?", "input": "", "output": "The data type of a variable that can only contain boolean values in Python is a bool.", "category": "Python"}, {"instruction": "Write a SQL query to find the books in the library whose title included the word \"Science\".", "input": "", "output": "SELECT * FROM books WHERE title LIKE '%Science%';", "category": "Python"}, {"instruction": "Create a Python function 'findPattern' with two parameters which takes two strings and returns 1 if the second string is a subsequence of the first string, otherwise 0.", "input": "", "output": "def findPattern(str1, str2): \n \n    ind = 0\n    for ch in str2: \n        if ch not in str1[ind:]: \n            return 0\n  \n        ind = str1.index(ch, ind) + 1\n \n    return 1\n  \n# Driver code \nif findPattern(\"timetopractice\", \"top\"): \n    print(\"Subsequence Found\") \nelse: \n    print(\"Subsequence Not Found\")", "category": "Python"}, {"instruction": "Create a function 'sum' in JavaScript with two parameters which adds the two numbers passed in.", "input": "", "output": "function sum(a, b) {\n  return a + b;\n}\n\nlet result = sum(5, 6); \nconsole.log(result); // 11", "category": "Python"}, {"instruction": "Write a Bash script which detects if a given argument is a number or a string.", "input": "", "output": "#!/bin/bash\n\ninput=$1\n\nif [ $input -eq $input 2> /dev/null ]; then\n   echo \"$input is a number\"\nelse\n   echo \"$input is a string\"\nfi", "category": "Python"}, {"instruction": "Create a function 'combineTwoLists' with two parameters which combines two given lists into a new list.", "input": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]", "output": "def combineTwoLists(list1, list2):\n    new_list = list1 + list2\n    return new_list\n\nresult = combineTwoLists(list1, list2)\nprint(result) # [1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Create a Python function that takes two arguments: a list and an integer. The function should add the given integer to each element of the list and return the new list.", "input": "list = [2, 3, 5]\ninteger = 4", "output": "def addToList(list, int):\n    new_list = []\n    for l in list:\n        new_list.append(l + int)\n    return new_list\n\nresult = addToList(list, integer)\nprint(result) # [6, 7, 9]", "category": "Python"}, {"instruction": "Create a shell script which takes two filenames as arguments and checks if they are the same.", "input": "", "output": "#!/bin/bash\n#\n# Check if two files are the same\n#\n\nif [ \"$#\" -ne 2 ]; then\n  echo \"Error: please provide two filenames as arguments to this script\"\n  exit 1\nfi\n\n# get the absolute paths to the two files:\nfile1=$(realpath $1)\nfile2=$(realpath $2)\n\nif [ \"$file1\" == \"$file2\" ]; then\n  echo \"The two files are the same!\"\nelse\n  echo \"The two files are not the same!\"\nfi", "category": "Python"}, {"instruction": "Construct a matrix of shape 7 x 5.", "input": "", "output": "[[0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0]]", "category": "Python"}, {"instruction": "Implement a function to implement Bubble Sort.", "input": "", "output": "def bubbleSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [64, 34, 25, 12, 22, 11, 90] \n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "category": "Python"}, {"instruction": "Suggest improvements to the code fragment given below.", "input": "x = 25\nif x < 20\n    print(\"x is less than 20\")", "output": "if x < 20:\n    print(\"x is less than 20\")", "category": "Python"}, {"instruction": "Print the element with the second greatest value from an array named 'numbers'.", "input": "numbers = [10, 5, 15, 20, 25]", "output": "", "category": "Python"}, {"instruction": "Find the shortest path between two nodes using Dijkstra's algorithm", "input": "A graph with 5 nodes and 7 edges", "output": "import networkx as nx\n\nG = nx.DiGraph()\n\nG.add_nodes_from([1,2,3,4,5])\n\nG.add_edge(1,4,weight=4)\nG.add_edge(1,2,weight=7)\nG.add_edge(1,3,weight=2)\nG.add_edge(2,3,weight=6)\nG.add_edge(2,5,weight=5)\nG.add_edge(3,4,weight=3)\nG.add_edge(3,5,weight=2)\nG.add_edge(4,5,weight=2)\n\nstart = 1\nend = 5\n\nshortest_path = nx.dijkstra_path(G, start, end, weight='weight')\n\nprint('Shortest path from node 1 to node 5 is:', shortest_path)", "category": "Python"}, {"instruction": "Generate a valid VHDL code for given design", "input": "Implement a 4-to-1 multiplexer using the given data ports", "output": "LIBRARY ieee;\nUSE ieee.std_logic_1164.all;\n\nentity Multiplexer is \n  Port ( a,b,c,d: in  std_logic;\n         sel: in  std_logic;\n         y : out  std_logic);\nend Multiplexer;\n\narchitecture Behavioral of Multiplexer is\n    begin\n    process(a,b,c,d,sel)\n       begin\n         if sel = '0' then\n           y <= a;\n         elsif sel = '1' then \n           y <= b;\n         elsif sel = '2' then \n           y <= c; \n         elsif sel = '3' then\n           y <= d;\n         else\n           y <= '0';\n         end if;\n    end process;\nend Behavioral;", "category": "Python"}, {"instruction": "classify the following text into its respective category", "input": "Once upon a time, there was a young prince who lived in a castle", "output": "Storytelling", "category": "Python"}, {"instruction": "Generate a valid RTL(Register Transfer Level) design in Verilog to implement the following Boolean function", "input": "F(A,B,C,D) = (A + !B + C + !D)'", "output": "module F(A,B,C,D,Z);\n    input A, B, C, D;\n    output Z;\n    reg Z;\n    always @ (A,B,C,D)\n        begin\n             Z = ~(A | ~B | C | ~D);\n        end\nendmodule", "category": "Python"}, {"instruction": "Given two strings, create a new string that is their concatenation.", "input": "string1 = \"Hello\"\nstring2 = \"World\"", "output": "The new string is \"HelloWorld\".", "category": "Python"}, {"instruction": "Determine whether two given arrays are equal or not.", "input": "arr1 = [1, 2, 3]\narr2 = [1, 2, 4]", "output": "The two arrays are not equal.", "category": "Python"}, {"instruction": "Delete the odd elements in a given list.", "input": "list4 = [3, 7, 4, 5]", "output": "The new list is [4].", "category": "Python"}, {"instruction": "Using the 'arrays' library in Python, generate a random array of 10 numbers.", "input": "", "output": "import numpy as np\n\nrandom_array = np.random.random_integers(1,10,10)\nprint(random_array)", "category": "Python"}, {"instruction": "Create a class that implements a set data structure.", "input": "", "output": "class Set:\n    def __init__(self):\n        self.elements = []\n\n    def add(self, element):\n        if element not in self.elements:\n            self.elements.append(element)\n\n    def remove(self, element):\n        if element in self.elements:\n            self.elements.remove(element)", "category": "Python"}, {"instruction": "Create a Flask application to send an email notification.", "input": "", "output": "Create a Flask application with a route to accept an email address and the notification message. Use the Flask-Mail extension to send an email containing the notification message to the provided email address.", "category": "Python"}, {"instruction": "How do you generate a random number between 0 and 10 in JavaScript?", "input": "", "output": "The easiest way to generate a random number between 0 and 10 in JavaScript is to use the Math.random() function. For example, the following example will generate a random number between 0 and 10 (inclusive): Math.random() * 10", "category": "Python"}, {"instruction": "Convert the given expression from infix notation to postfix notation.", "input": "A + B * (C - D)", "output": "ABCD-*+", "category": "Python"}, {"instruction": "Given two lists, create a list that contains the difference.", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6]", "output": "difference_list = [1, 2, 6]", "category": "Python"}, {"instruction": "Write an algorithm to split a given list into two sublists with equal sums", "input": "[1, 4, 2, 5, 3]", "output": "def find_sublist(lst):\n    total_sum = sum(lst)\n    half = total_sum//2\n    taken = [False]*len(lst)\n    curr_sum = lst[0]\n    taken[0] = True\n    idx = 0\n    flag = False\n    for i in range(1, len(lst)):\n        if curr_sum < half:\n            taken[i] = True\n            curr_sum += lst[i]\n            flag = True\n        else:\n            if not flag:\n                taken[i] = True\n                curr_sum += lst[i]\n                flag = True\n            continue\n    list1 = list2 = []\n\n    for k in range(len(lst)):\n        if taken[k]:\n            list1.append(lst[k])\n        else:\n            list2.append(lst[k])\n    return list1, list2", "category": "Python"}, {"instruction": "Modify the following code to turn all the words in a sentence to upper case", "input": "string = \"Hello World\"", "output": "string = \"Hello World\"\nstring = string.upper()\nprint(string)", "category": "Python"}, {"instruction": "Write an algorithm to reverse a lis", "input": "[1,2,3,4,5]", "output": "def reverse_list(lst):\n    rev_lst = lst[::-1]\n    return rev_lst", "category": "Python"}, {"instruction": "Add a try-except clause to the given code to catch IndexError exceptions.", "input": "list1 = [1, 2, 3]\nprint(list1[5])", "output": "try:\n    list1 = [1, 2, 3]\n    print(list1[5])\nexcept IndexError:\n    print(\"IndexError occurred.\")", "category": "Python"}, {"instruction": "Rewrite the code snippet to avoid the use of goto statement", "input": "start:\nx=x+1\nif x==10\n   goto start", "output": "x = 0\nwhile x!=10:\n    x=x+1", "category": "Python"}, {"instruction": "Take a number input and output the Fibonacci sequence up to that number.", "input": "n = 5", "output": "[0, 1, 1, 2, 3, 5]", "category": "Python"}, {"instruction": "Create a class in python with 4 functions.", "input": "", "output": "class MyClass:\n  def __init__(self):\n    pass\n\n  def function1(self):\n    pass\n\n  def function2(self):\n    pass\n  \n  def function3(self):\n    pass\n  \n  def function4(self):\n    pass", "category": "Python"}, {"instruction": "Create a SQL query that selects all customers who bought a product within the last year.", "input": "Table 'Customers':\n\n| name | id | product_id | purchase_date |\n|------|----|------------|---------------|\n| John | A1 |     PRD1   |  2020-02-01   |\n| Jane | B2 |     PRD2   |  2019-02-01   |\n|Bruce | C3 |     PRD2   |  2020-04-01   |", "output": "SELECT * FROM Users WHERE purchase_date BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW();", "category": "Python"}, {"instruction": "Create a function to calculate the following expression and output the result.", "input": "2^2 + 4 - 3*6", "output": "def expression_result(expression):\n    result = eval(expression) \n    return result\n\nprint(expression_result(\"2**2 + 4 - 3*6\")) \n\n# Output: -6", "category": "Python"}, {"instruction": "Given the following matrix, output the corresponding vector form.", "input": "[[1,2,3],\n[4,5,6],\n[7,8,9]]", "output": "[1,2,3,4,5,6,7,8,9]", "category": "Python"}, {"instruction": "Apply the following transformation to the given bit string and output it.", "input": "10011", "output": "00101", "category": "Python"}, {"instruction": "Write a SQL query to select the employee ID from the following table and output it.", "input": "Employee ID  Name  Address\n1            John  Street 22\n2            Janny Street 12", "output": "SELECT employee_id \nFROM employee_table;", "category": "Python"}, {"instruction": "Create a function to return the minimum value in a given array and output it.", "input": "[6, 3, 9, 5, 8, -2, 10]", "output": "def minimum_value(A):\n    min=-float('inf')\n    for a in A: \n        if a < min:\n            min = a\n    return min\n\nprint(minimum_value([6, 3, 9, 5, 8, -2, 10]))\n\n# Output: -2", "category": "Python"}, {"instruction": "Print the following string with all asterisks in lower case and output it.", "input": "HeLLo WoRLD", "output": "hello world", "category": "Python"}, {"instruction": "Remove all the punctuation from the following sentence and output the resulting sentence.", "input": "\"Please select an item from the list.\"", "output": "Please select an item from the list", "category": "Python"}, {"instruction": "Convert the following input into a string and output it.", "input": "[3, 15, 27, 70, 5]", "output": "\"3, 15, 27, 70, 5\"", "category": "Python"}, {"instruction": "Write a JavaScript code to create a web page with a navigation bar.", "input": "", "output": "const navBar = document.createElement('nav');\n\nnavBar.innerHTML = `\n<ul>\n  <li><a href=\"#\">Home</a></li>\n  <li><a href=\"#\">About</a></li>\n  <li><a href=\"#\">Contact</a></li>\n</ul>\n`;\n\ndocument.body.appendChild(navBar);", "category": "Python"}, {"instruction": "Write a HTML code to create a form to register a new user.", "input": "", "output": "<form action=\"/register\" method=\"post\">\n  <div>\n    <label>Username:</label>\n    <input type=\"text\" name=\"username\">\n  </div>\n  <div>\n    <label>Password:</label>\n    <input type=\"password\" name=\"password\">\n  </div>\n  <div>\n    <label>Confirm Password:</label>\n    <input type=\"password\" name=\"confirm_password\">\n  </div>\n  <div>\n    <label>Email:</label>\n    <input type=\"text\" name=\"email\">\n  </div>\n  <button type=\"submit\">Register</button>\n</form>", "category": "Python"}, {"instruction": "Write an SQL query to select all employees from department 1 having a salary greater than 50,000.", "input": "", "output": "SELECT * \nFROM employees \nWHERE department = 1 \nAND salary > 50000;", "category": "Python"}, {"instruction": "Write a CSS code to display a page element with a border-radius of 5px on all sides.", "input": "", "output": ".page-element {\n    border-radius: 5px;\n}", "category": "Python"}, {"instruction": "Produce a program that takes in two strings and check if they are anagrams.", "input": "silent and listen", "output": "def is_anagram(s1, s2):\n    if sorted(s1) == sorted(s2):\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Develop a program that takes in two numbers and returns the bigger one.", "input": "2 and 3", "output": "def max_num(a,b):\n    if a > b:\n        return a\n    else:\n        return b", "category": "Python"}, {"instruction": "Construct an SQL query to update the 'price' column of a table called 'Products' given the \u2018id\u2019 of the product.", "input": "id = 1\nprice = 50", "output": "UPDATE Products\nSET price = 50\nWHERE id = 1", "category": "Python"}, {"instruction": "Create an HTML code that renders a checkbox with the text \"Remember me\" next to it.", "input": "", "output": "<input type=\"checkbox\" name=\"remember\" value=\"yes\"> Remember me", "category": "Python"}, {"instruction": "How would you modify the following CSS code to make its font size 22px?", "input": "h1 {\n  font-family: Arial;\n  color: #000000;\n}", "output": "h1 {\n  font-family: Arial;\n  color: #000000;\n  font-size: 22px;\n}", "category": "Python"}, {"instruction": "Write a Bash shell script to run a program called \u2019myProgram' 10 times with different parameters each time.", "input": "", "output": "#!/bin/bash\n\nfor i in {1..10}\ndo\n  ./myProgram --param $i\ndone", "category": "Python"}, {"instruction": "Suggest an efficient way to sort the following array using Java.", "input": "[3, 4, 6, 2, 9, 8, 1]", "output": "The efficient way to sort the array using Java is to use the Quicksort algorithm which is an in-place, recursive sorting algorithm with an average time complexity of O(n log n). The Quicksort algorithm works by selecting an element as a pivot, partitioning the array around the pivot, and recursively applying the Quicksort algorithm to the two sub-arrays on either side of the pivot. This process continues until all the elements in the array are sorted.\n\nThe code for the Quicksort algorithm in Java will look something like this:\n\npublic class QuickSort {\n    // Method for rearranging the elements\n    public static void sort(int[] arr, int low, int high) {\n        // Check for base case\n        if (low < high) {\n            int pi = partition(arr, low, high);\n            // Recursively sort elements before\n            // partition and after partition\n            sort(arr, low, pi-1);\n            sort(arr, pi+1, high);\n        }\n    }\n\n    // Method for partitioning the array on the basis of the pivot\n    private static int partition(int[] arr, int low, int high) {\n        int pivot = arr[high];\n        int i = low - 1;\n        for (int j = low; j < high; j++) {\n            // If the current element is smaller than or equal to pivot\n            if (arr[j] <= pivot) {\n                i++;\n\n                // Swap arr[i] and arr[j]\n                int temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n\n        // Swap arr[i + 1] and arr[high] (or pivot)\n        int temp2 = arr[i+1];\n        arr[i+1] = arr[high];\n        arr[high] = temp2;\n\n        return i + 1;\n    }\n}", "category": "Python"}, {"instruction": "Develop a C++ program to list all the numbers divisible by 7 from 1 to 50.", "input": "", "output": "#include <iostream>\nusing namespace std;\n\nint main() {\n    for (int i = 7; i <= 50; i+= 7)\n    {\n        cout << i << \" \";\n    }\n    cout << endl;\n    return 0;\n}", "category": "Python"}, {"instruction": "Generate CSS code to set the font color of a div with class \"container\" to red.", "input": "", "output": ".container {\n    color: red;\n}", "category": "Python"}, {"instruction": "Write a Python script to find the area of a triangle with sides 18, 24, and 30.", "input": "", "output": "def triangle_area(a, b, c):\n    '''This function computes the area of a triangle given its side lengths.'''\n    # Calculate semi-perimeter\n    s = (a + b + c) / 2\n    # Calculate the area\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return area\n\nprint(\"The area of the triangle is:\", triangle_area(18, 24, 30))", "category": "Python"}, {"instruction": "Write an HTML code to display a webpage with a centered paragraph.", "input": "", "output": "<html>\n  <head>\n    <title>Centered Paragraph</title>\n  </head>\n  <body>\n    <div style=\"text-align:center;\">\n      <p>This is a centered paragraph.</p>\n    </div>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write an SQL query to find the records with a name starting with \"A\".", "input": "", "output": "SELECT * FROM table_name WHERE name LIKE 'A%';", "category": "Python"}, {"instruction": "Write a SQL query to find the records with a price greater than 100 from a table called \"product_catalog\".", "input": "", "output": "SELECT * FROM product_catalog WHERE price > 100;", "category": "Python"}, {"instruction": "You are given two lists. Output a third list which contains only the elements common to both lists.", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]", "output": "list3 = [3,4,5]", "category": "Python"}, {"instruction": "Create a program that will take a number from the user and print out whether the number is odd or even.", "input": "", "output": "# Take a number from user \nnum = int(input(\"Enter a number: \")) \n\n# Check whether the number is odd or even \nif num % 2 == 0: \n    print(\"Number is even.\")\nelse:\n    print(\"Number is odd.\")", "category": "Python"}, {"instruction": "From the provided input, create a program name \"shopping.py\" that prompts the user to enter a price and prints out the amount of discount the user gets. The discount rate is 10%.", "input": "", "output": "# shopping.py\nprice = float(input(\"Enter the price: \")) \ndiscount = price * 0.10 \nprint(\"Discount:\", discount)", "category": "Python"}, {"instruction": "Write a Python program to convert Fahrenheit to Celsius for a temperature of 56.4F.", "input": "", "output": "F = 56.4\nC = (F - 32) * 5/9\nprint(\"Fahrenheit to Celsius:\", C)", "category": "Python"}, {"instruction": "Write a C++ program to generate the Fibonnaci sequence up to the given number n.", "input": "10", "output": "#include<iostream>\n\nusing namespace std;\n\nint main() \n{ \n    int n = 10;\n    int a = 0, b = 1, c;\n\n    cout << a << \" \" << b << \" \"; \n\n    for (int i = 2; i < n; i++) { \n        c = a + b; \n        cout << c << \" \"; \n        a = b; \n        b = c; \n    } \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Create a SQL query to sort data from highest to lowest in the column \u2018age\u2019.", "input": "", "output": "SELECT * FROM table_name ORDER BY age DESC;", "category": "Python"}, {"instruction": "Create a JavaScript function to check if an integer n is a perfect square.", "input": "", "output": "function isPerfectSquare(n) {\n for (int i = 0; i <= n; i++) {\n  if (i * i == n) {\n   return true;\n  }\n }\n return false;\n}", "category": "Python"}, {"instruction": "Construct a CSS code that adds a background color of red to the \u2019div' element.", "input": "", "output": "div {\n  background-color: red;\n}", "category": "Python"}, {"instruction": "Write a HTML fragment to display a textbox with a placeholder \"Enter your name\".", "input": "", "output": "<input type=\"text\" placeholder=\"Enter your name\">", "category": "Python"}, {"instruction": "Create a program that prompts the user to enter two strings. The program will compare the two strings and, if the two strings are the same, print out \"Equal strings\" otherwise, print out \u201cUnequal strings\u201d", "input": "", "output": "# Take two strings from user \nstr1 = input('Enter first string: ') \nstr2 = input('Enter second string: ') \n\n# Compare strings \nif str1 == str2: \n    print (\"Equal strings\") \nelse : \n    print (\"Unequal strings\")", "category": "Python"}, {"instruction": "Create an algorithm that takes in an array of strings and returns a new array containing only the strings that start with the letter \"a\".", "input": "[apple, banana, alabama, arkansas]", "output": "def start_with_a(arr):\n    new_arr = []\n    for s in arr:\n        if s[0] == 'a':\n            new_arr.append(s)\n    return new_arr", "category": "Python"}, {"instruction": "What is the difference between a Node.js callback and a promise?", "input": "", "output": "A callback is a function that is passed as an argument to another function and is executed when the callback function completes its task. A promise is an object that can be returned synchronously from an asynchronous function. It acts as a placeholder for the eventual result of the asynchronous function and allows you to register callbacks for either a successful or a failed completion of the asynchronous task. The main differences between callbacks and promises are that callbacks don't handle exceptions, don't have the ability to be chained together, and must be explicitly invoked. Promises have a wider range of features and are less prone to error.", "category": "Python"}, {"instruction": "Write an HTML form that collects first name and last name.", "input": "", "output": "<form>\n  <label for=\"fname\">First Name: </label>\n  <input type=\"text\" name=\"fname\" id=\"fname\"><br><br>\n  <label for=\"lname\">Last Name: </label>\n  <input type=\"text\" name=\"lname\" id=\"lname\"><br><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Create an array of 10 Boolean values and set it to \"False\".", "input": "", "output": "arrayBool = [False]*10", "category": "Python"}, {"instruction": "Given two lists of integers, find all unique pairings where the sum of the pair equals to a given number.", "input": "list1 = [1, 2, 3, 4]\nlist2 = [2, 3, 4, 5]\nnumber = 6", "output": "3 + 3 = 6\n4 + 2 = 6", "category": "Python"}, {"instruction": "Complete the program by filling in the missing code to call the appropriate function", "input": "def search(items, item): \n    for ____ in ____: \n    if ____ == ____:\n        found = ____ \n    if ____: \n        return found \n    else: \n        return -1", "output": "def search(items, item): \n    for i in range(len(items)): \n    if items[i] == item:\n        found = i \n    if found: \n        return found \n    else: \n        return -1", "category": "Python"}, {"instruction": "Represent the given content into a well-formatted JSON structure.", "input": "Name: John Doe\nAge: 33\nGender: Male", "output": "{\n    \"name\": \"John Doe\",\n    \"age\": 33,\n    \"gender\": \"Male\"\n}", "category": "Python"}, {"instruction": "Generate a list of valid HTML tags used to structure content in a page.", "input": "", "output": "- <html>\n- <title>\n- <head>\n- <body>\n- <header>\n- <nav>\n- <main>\n- <article>\n- <section>\n- <aside>\n- <footer>\n- <h1>, <h2>, <h3>, ... <h6>\n- <p>\n- <ul>, <ol>\n- <li>\n- <div>\n- <span>\n- <img>\n- <table>\n- <tr>, <th>, <td>", "category": "Python"}, {"instruction": "Construct a SQL query to find out three most expensive items in a product table.", "input": "", "output": "SELECT item_name, price FROM products ORDER BY price DESC LIMIT 3;", "category": "Python"}, {"instruction": "Wrap the given text in a tag.", "input": "Hello World", "output": "<p>Hello World</p>", "category": "Python"}, {"instruction": "Generate a valid JSON object from the given input content.", "input": "Name: John Doe\nAge: 33\nGender: Male", "output": "{\n    \"name\": \"John Doe\",\n    \"age\": 33,\n    \"gender\": \"Male\"\n}", "category": "Python"}, {"instruction": "Construct a regex to find urls in a given string.", "input": "", "output": "\\b(((https?|ftp|file):\\/\\/|www\\.)[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])", "category": "Python"}, {"instruction": "Write a JavaScript program to find the object has the largest number of properties.", "input": "", "output": "function maxProps(objects) {\n    let maxProps = 0; \n    let maxObject; \n\n    for (let i = 0; i < objects.length; i++) {\n        let size = Object.keys(objects[i]).length; \n        if (size > maxProps) {\n            maxProps = size; \n            maxObject = objects[i]; \n        }\n    }\n\n    return maxObject; \n}", "category": "Python"}, {"instruction": "How can you detect if there is an infinite loop in a code?", "input": "", "output": "One way of detecting if there is an infinite loop in a code is by using a counter to count the number of iterations the loop is performing. If the number of iterations exceeds some predefined threshold value, we can conclude that the code is executing an infinite loop. Another technique to detect an infinite loop is to keep track of all the loop variables and compare the values at two different points in the loop. If it detects a repeating pattern, it may indicate that the loop is stuck in an infinite loop.", "category": "Python"}, {"instruction": "Generate a list of project requirements for a web development project.", "input": "", "output": "- Design the website architecture to ensure proper scalability\n - Implement user authentication & authorization\n - Develop Front-end Interface for User Interaction\n - Build responssive front-end using Cascading Style sheets (CSS) & HTML\n - Compile application & deploy on web servers\n - Connect databases & define server side logic\n - Develop API & integrate with client-side logic\n - Integrate third-party API's & services\n - Create appropriate test cases & ensure highest performance & security standards", "category": "Python"}, {"instruction": "Add a new field to the json object.", "input": "{\n  \"name\": \"John Doe\",\n  \"age\": 21\n}", "output": "{\n  \"name\": \"John Doe\",\n  \"age\": 21,\n  \"gender\": \"\"\n}", "category": "Python"}, {"instruction": "Use the NLTK library to tokenize the following sentence.", "input": "sentence = \"This is a sentence.\"", "output": "import nltk\n\nsentence = \"This is a sentence.\"\n\ntokens = nltk.word_tokenize(sentence)\n\nprint(tokens) # Output: ['This', 'is', 'a', 'sentence', '.']", "category": "Python"}, {"instruction": "Write a Python code to fetch the top three trending topics from Twitter.", "input": "", "output": "import tweepy\n\n# create OAuth handler\nconsumer_key = \"YOUR_CONSUMER_KEY\"\nconsumer_secret = \"YOUR_CONSUMER_SECRET\"\naccess_token = \"YOUR_ACCESS_TOKEN\"\naccess_token_secret = \"YOUR_ACCESS_TOKEN_SECRET\"\n\n# authenticate \nauth = tweepy.OAuthHandler(consumer_key, consumer_secret) \nauth.set_access_token(access_token, access_token_secret) \n  \n# overridable get method\napi = tweepy.API(auth, wait_on_rate_limit=True, wait_on_rate_limit_notify=True) \n \n# results\ntrends = api.trends_place(1) \ndata = trends[0]\ntrends_list = data['trends']\n\n# top 3 trending topics \nfor i in range(3): \n    print(trends_list[i]['name'])", "category": "Python"}, {"instruction": "Create a program that draws a triangle with stars (*) with a given height.", "input": "", "output": "def draw_triangle(n): \n    for i in range(0, n): \n        for j in range(0, i+1): \n            print(\"*\",end=\"\") \n        print(\"\\r\")", "category": "Python"}, {"instruction": "Create a program that prints all unique permutations of the given string.", "input": "", "output": "def permutations(string):\n    result = []\n    if len(string) == 1:\n        result=[string]\n    else:\n        for i, letter in enumerate(string):\n            for perm in permutations(string[:i] + string[i+1:]):\n                result.append(letter + perm)\n    return result", "category": "Python"}, {"instruction": "Create a Java program that divides two integers and rounds the result to the nearest integer.", "input": "int a = 8;\nint b = 2;", "output": "public class Division {\n\n public static void main(String[] args) {\n \n int a = 8;\n int b = 2;\n \n double result = (double) a / b;\n int roundedResult = (int) Math.round(result);\n \n System.out.println(roundedResult);\n }\n}", "category": "Python"}, {"instruction": "Calculate the maximum depth of a Binary Search Tree.", "input": "TreeNode* root = new TreeNode(3);\nroot->left = new TreeNode(2);\nroot->right = new TreeNode(7);\nroot->left->left = new TreeNode(1);\nroot->left->right = new TreeNode(5);\nroot->right->left = new TreeNode(6);\nroot->right->right = new TreeNode(8);", "output": "int maxDepth(TreeNode* root) \n{ \n    if (root == NULL) \n        return 0; \n    else \n    { \n        // compute the depth of each subtree \n        int lDepth = maxDepth(root->left); \n        int rDepth = maxDepth(root->right); \n   \n        // use the larger one \n        if (lDepth > rDepth) \n            return(lDepth + 1); \n        else return(rDepth + 1); \n    } \n}", "category": "Python"}, {"instruction": "Make the following piece of code functional for priority queues.", "input": "class PriorityQueue():\n    #TODO", "output": "class PriorityQueue():\n    def __init__(self):\n        self.elements = []\n    \n    def insert(self, item, priority):\n        self.elements.append((priority, item))\n        \n    def pop(self):\n        _, item = heappop(self.elements)\n        return item", "category": "Python"}, {"instruction": "Edit the following code so that the item at index 4 is multiplied by two.", "input": "arr = [1, 2, 3, 4, 5, 6]", "output": "arr = [1, 2, 3, 4, 10, 6]", "category": "Python"}, {"instruction": "Create a parameterized query in Python to find the details of a person.", "input": "", "output": "# define the query\nquery = \"SELECT * FROM people WHERE name = %s AND age = %s\"\n\n# provide the parameters\nparams = ('John', 22)\n\n# execute the query\ncursor.execute(query, params)", "category": "Python"}, {"instruction": "Find the area of a triangle whose sides measure a= 4, b= 5 and c= 3.", "input": "", "output": "// calculate s - the semi-perimeter\nfloat s = (4 + 5 + 3) / 2;\n\n// calculate the area\nfloat area = (s * (s - 4) * (s - 5) * (s - 3));\n\n// take the square root\nfloat result = sqrt(area);\n\n// Print the result\nprintf(\"The area of the triangle with sides 4, 5 and 3 is %f\", result);\n// Output: The area of the triangle with sides 4, 5 and 3 is 6.000000", "category": "Python"}, {"instruction": "Evaluate the expression \"7 + 4 * 3 - 6 / 2\" with JavaScript.", "input": "", "output": "// evaluate the expression\nlet expression = '7 + 4 * 3 - 6 / 2';\n\n// evaluate the expression\nlet result = eval(expression);\n\n// print the result\nconsole.log(result);\n// Output: 19", "category": "Python"}, {"instruction": "Create a Ruby hash containing information about a movie.", "input": "", "output": "movie = {\n  title: \"The Godfather\",\n  year: 1972,\n  director: \"Francis Ford Coppola\",\n  genre: \"Crime drama\"\n}", "category": "Python"}, {"instruction": "Create an SQL query to extract the name of all users.", "input": "", "output": "SELECT Name FROM Users;", "category": "Python"}, {"instruction": "Write a Bash script that displays a message if you enter a wrong command.", "input": "", "output": "#!/bin/sh\n\n# trap ctrl-c and call ctrl_c()\ntrap ctrl_c INT\n\nctrl_c() {\n        echo \"You have entered wrong command. Type 'exit' or 'Ctrl + c' to quit.\"\n}\n \nwhile : \ndo\n    read -p \"Your command-> \" cmd\n    # taking input from a user\n    if [ \"$cmd\" == \"exit\" ]; then\n        break\n    else \n        echo \"Wrong command. Type 'exit' or 'Ctrl + c' to quit.\"\n    fi\ndone", "category": "Python"}, {"instruction": "Create a function that prints the string passed to it as an argument.", "input": "", "output": "def print_string(s):\n    print(s)", "category": "Python"}, {"instruction": "Output \"Hello, World!\" to the console.", "input": "", "output": "print(\"Hello, World!\")", "category": "Python"}, {"instruction": "Change the following code to an ES6 arrow function.", "input": "function addTwo(num) \n{ \n    var result; \n    result = num + 2; \n    return result; \n}", "output": "const addTwo = num => num + 2;", "category": "Python"}, {"instruction": "Change the following code to a function using parameters.", "input": "print(\u201chello\u201d)", "output": "function sayHello(str){\n  console.log(str);\n}\n\nsayHello('Hello');", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to update the style color attribute of a HTML element.", "input": "elementID = button1", "output": "document.getElementById('button1').style.color='blue';", "category": "Python"}, {"instruction": "Write a code to initialize an array with 10 elements of value 0.", "input": "", "output": "int[] array = new int[10];\nArrays.fill(array, 0);", "category": "Python"}, {"instruction": "Create a CSS class for making a font bold.", "input": "", "output": ".bold-font {\n\u00a0\u00a0\u00a0\u00a0font-weight: bold;\n\u00a0\u00a0\u00a0\u00a0font-style: normal;\n}", "category": "Python"}, {"instruction": "Writing a function to calculate the area of a triangle where the three sides are given.", "input": "side1 = 5, side2 = 6, side3 = 7", "output": "function triangleArea(side_1, side_2, side_3) {\n\u00a0\u00a0\u00a0\u00a0var s = (side_1 + side_2 + side_3) / 2;\n\u00a0\u00a0\u00a0\u00a0var area = Math.sqrt(s * (s - side_1) * (s - side_2) * (s - side_3));\n\u00a0\u00a0\u00a0\u00a0return area;\n}\n\nconsole.log(triangleArea(5,6,7)); // 14.697", "category": "Python"}, {"instruction": "Output the contents of an array of strings to the console.", "input": "arr = [\"apple\", \"orange\", \"banana\"]", "output": "for s in arr:\n    print(s)", "category": "Python"}, {"instruction": "Provide a JSON object with the structure required to make an API call using Axios.", "input": "", "output": "{  \n  \"url\": \"example.com/api\",\n  \"method\": \"POST\",\n  \"data\": {\n    \"username\": \"example\",\n    \"password\": \"example\"\n  }\n}", "category": "Python"}, {"instruction": "Use an API to fetch and print the current weather information of a given city.", "input": "City Name: New York", "output": "import requests \n\n# API endpoint \nurl = \"http://api.openweathermap.org/data/2.5/weather?\"\n\n# API key\napi_key = \"YOUR_API_KEY\"\n \n# City name \ncity_name = \"New York\"\n\n# parameter for API call \nparams = {\n    'q': city_name, \n    'appid': api_key \n} \n\n# get method of requests module \n# return response object \nres = requests.get(url, params=params) \n\n# json method of response object convert \n# json format data into python format data \ndata = res.json() \n\n# fetch current weather information \n# get method of dictionary \ncurrent = data[\"main\"] \n\n# Now print the current weather \n# get method of dictionary \ntemp = current[\"temp\"] \nprint(\" Temperature (in kelvin unit) = \" +\n            str(temp) + \n        \"\\n atmospheric pressure (in hPa unit) = \" +\n            str(current[\"pressure\"]) +\n        \"\\n humidity (in percentage) = \" +\n            str(current[\"humidity\"]) +\n        \"\\n minimum temperature (in kelvin unit) = \" +\n            str(current[\"temp_min\"]) +\n        \"\\n maximum temperature (in kelvin unit) = \" +\n            str(current[\"temp_max\"]))", "category": "Python"}, {"instruction": "Use the HTML form below and provide the corresponding JavaScript code that will validate the form.", "input": "<form>\n  <div class=\"form-row\">\n    <div class=\"form-group col-7 mb-0\"><label>Name</label>\n    <input type=\"text\" class=\"form-control\" placeholder=\"Your name\" name=\"name\"id=\"name\">\n    </div>\n  </div>\n  <div class=\"form-row text-center mt-3\">\n    <button type=\"submit\" class=\"btn btn-success\" id=\"submit\">Submit</button>\n  </div>\n</form>", "output": "const form = document.querySelector('form');\nconst nameInput = document.querySelector('#name');\n\nform.addEventListener('submit', event => {\n  event.preventDefault(); // prevent form submission\n  \n  const name = nameInput.value;\n  if (name.length === 0 ) { // invalid name\n    // show an error message\n    nameInput.setCustomValidity('Please enter your name.');\n    nameInput.reportValidity();\n  } else { // name is valid\n    // submit the form\n    form.submit();\n  }\n});", "category": "Python"}, {"instruction": "Debug this code to remove the syntax error.", "input": "def print_msg()\n print(\"Hello World\")", "output": "def print_msg():\n     print(\"Hello World\")", "category": "Python"}, {"instruction": "Convert this octal number to a binary number.", "input": "Octal number: 77", "output": "Binary number: 111111", "category": "Python"}, {"instruction": "Calculate the perimeter of a triangle with the given length of sides.", "input": "Length of sides: 6, 8, 10", "output": "perimeter = 24", "category": "Python"}, {"instruction": "Change the line of code that prints \"Hello World!\" to print \"Goodbye World!\"", "input": "console.log(\"Hello World!\");", "output": "console.log(\"Goodbye World!\");", "category": "Python"}, {"instruction": "Find the values of a, b and c in this equation.", "input": "7a + 5b + 4c = 70", "output": "a = 5; b = 4; c = 2;", "category": "Python"}, {"instruction": "Update this HTML as per the given instructions.", "input": "Update the <h1> tag to be black and red, and center-align it.", "output": "<h1 style=\"color:black; background:red; text-align:center;\">Heading 1</h1>", "category": "Python"}, {"instruction": "You need to build a function that take a given tree and returns a list containing the data stored at each level.", "input": "1\n        /   \\\n       2     3\n      / \\    /\n     4   5  6", "output": "def traverseTree(node):\n    result = []\n    if node is None:\n        return []\n    else:\n        result.append(node.data)\n        result += traverseTree(node.left)\n        result += traverseTree(node.right)\n    return result", "category": "Python"}, {"instruction": "Generate a random string with length 100 consisting of lowercase letters.", "input": "", "output": "import random\n\ndef randomString():\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    result = []\n    for _ in range(100):\n        letter = random.choice(letters)\n        result.append(letter)\n    return ''.join(result)", "category": "Python"}, {"instruction": "Take two text strings as input and output the difference between two strings.", "input": "This is a text string, That is a text string", "output": "def diff(a, b):\n    aSet = set(a)\n    bSet = set(b)\n    diffSet = aSet.difference(bSet)\n    return ''.join(diffSet)", "category": "Python"}, {"instruction": "Build a system that takes in two numbers and outputs the summation of the two numbers.", "input": "2, 3", "output": "def add(a, b):\n    sum = a + b\n    return sum", "category": "Python"}, {"instruction": "You need to build a code editor with basic features like search, replace, undo, and redo.", "input": "", "output": "def codeEditor():\n    # Initialize the editor\n    editor = texteditor.Editor()\n    \n    # Create buttons for search, replace, undo and redo\n    searchButton = texteditor.Button(caption=\"Search\", onclick=editor.search)\n    replaceButton = texteditor.Button(caption=\"Replace\", onclick=editor.replace)\n    undoButton = texteditor.Button(caption=\"Undo\", onclick=editor.undo)\n    redoButton = texteditor.Button(caption=\"Redo\", onclick=editor.redo)\n    \n    # Create the layout\n    layout = texteditor.layout(\n        [\n            [searchButton, replaceButton],\n            [undoButton, redoButton]\n        ]\n    )\n    \n    # Create the window\n    window = texteditor.Window(layout)\n    \n    # Return the window\n    return window", "category": "Python"}, {"instruction": "You need to rearrange the characters in a given string such that no two same characters are adjacent to each other.", "input": "abccab", "output": "def rearrange(string):\n    seen = set()\n    result = []\n    for char in string:\n        if char not in seen:\n            seen.add(char)\n            result.append(char)\n        else:\n            for ch in string:\n                if ch not in seen:\n                    seen.add(ch)\n                    result.append(ch)\n    return ''.join(result)", "category": "Python"}, {"instruction": "You need to find all the words in a given sentence sorted by their length.", "input": "I like to read books", "output": "def sortByLength(sentence):\n    words = sentence.split(' ')\n    sortedWords = sorted(words, key=len)\n    return sortedWords", "category": "Python"}, {"instruction": "You need to classify a given sentence into one of 5 categories.", "input": "This sentence is about sports", "output": "def classify(sentence):\n    if 'sports' in sentence.lower():\n        return 'sports'\n    elif 'entertainment' in sentence.lower():\n        return 'entertainment'\n    elif 'politics' in sentence.lower():\n        return 'politics'\n    elif 'finance' in sentence.lower():\n        return 'finance'\n    elif 'science' in sentence.lower():\n        return 'science'\n    else:\n        return 'other'", "category": "Python"}, {"instruction": "Write a function that generates a unique integer ID given a string input.", "input": "", "output": "def generateId(string):\n    hashValue = hash(string)\n    id = 0\n    while hashValue > 0:\n        id += hashValue % 10\n        hashValue //= 10\n    return id", "category": "Python"}, {"instruction": "Design a program that takes a number as input and prints out its corresponding ASCII character.", "input": "Number: 90", "output": "def getChar(num):\n    return chr(num)\n\n# Test\nprint(getChar(90)) # 'Z'", "category": "Python"}, {"instruction": "Write a regular expression that will check if a given string contains valid phone numbers.", "input": "String: Please contact us at 021-555-3119 or email me at contact@example.com", "output": "regex_pattern = r'(\\d{3}-\\d{3}-\\d{4})'", "category": "Python"}, {"instruction": "Write a Lambda expression for finding the maximum number from a list of integers.", "input": "[3, 5, 21, 11, 9]", "output": "max_num = lambda x: max(x)\n\n# Test\nnums = [3, 5, 21, 11, 9]\nmax_num = max_num(nums)\nprint(max_num) # 21", "category": "Python"}, {"instruction": "Create a program to evaluate the expression for the given values.", "input": "Expression: 4x + 3y - 2z\nValues: x = 1, y = 3, z = -2", "output": "def evalExpression(x, y, z):\n  return 4*x + 3*y - 2*z\n\n# Test\nx = 1\ny = 3\nz = -2\nresult = evalExpression(x, y, z)\nprint(result) # 5", "category": "Python"}, {"instruction": "Compile this Java code to run on a JVM.", "input": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello world!\");\n    }\n}", "output": "javac HelloWorld.java", "category": "Python"}, {"instruction": "Write a function in Python to convert a 2D array into a single column array.", "input": "arr = [[0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8]]", "output": "def convert_to_single_column_array(arr):\n    single_column_arr = []\n\n    for sub_arr in arr:\n        for val in sub_arr:\n            single_column_arr.append(val)\n    \n    return single_column_arr", "category": "Python"}, {"instruction": "Generate a new list with all the even numbers from the given list", "input": "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "output": "# Generating a new list with all the even numbers from the given list\n\ndef get_even_numbers(input_list):\n  even_numbers = []\n  for num in input_list:\n    if num % 2 == 0:\n      even_numbers.append(num)\n  return even_numbers\n\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(get_even_numbers(my_list))\n\n# Output: [2, 4, 6, 8, 10]", "category": "Python"}, {"instruction": "Write a code which reverses the order of items in an array", "input": "my_list = [1,2,3,4,5]", "output": "# Reversing the order of items in an array\n\ndef reverse_order(input_list):\n return input_list[::-1] \n\nmy_list = [1,2,3,4,5]\nprint(reverse_order(my_list))\n\n# Output: [5, 4, 3, 2, 1]", "category": "Python"}, {"instruction": "Parse the following XML data to get a list of country names", "input": "<data>\n  <country name=\"Ghana\">\n    <rank>99</rank>\n    <year>2012</year>\n    <gdppc>2616.7</gdppc>\n    <neighbor name=\"Togo\" direction=\"W\"/>\n  </country>\n  <country name=\"Iceland\">\n    <rank>16</rank>\n    <year>2015</year>\n    <gdppc>38639.2</gdppc>\n    <neighbor name=\"Greenland\" direction=\"N\"/>\n    <neighbor name=\"Denmark\" direction=\"E\"/>\n  </country>\n</data>", "output": "import xml.etree.ElementTree as ET\n\ntree = ET.parse('data.xml')\nroot = tree.getroot()\n\ncountries = []\n\nfor country in root:\n    countries.append(country.attrib['name'])\n\nprint(countries)\n\n# Output: ['Ghana', 'Iceland']", "category": "Python"}, {"instruction": "Create a variable in Python to hold a list of numbers from 0 to 10", "input": "", "output": "my_list = list(range(0,11))", "category": "Python"}, {"instruction": "Construct a Regex expression in Python to extract words from a given URL.", "input": "", "output": "import re\np = re.compile(r'https?://(?:[-\\w.]|(?:%[\\da-fA-F]{2}))+')\nwords = p.findall(url)", "category": "Python"}, {"instruction": "Analyze the given C++ code to identify possible errors.", "input": "int main()\n{\nint x = 0;\nwhile (x <= 10)\n  x = x + 1\nreturn 0;\n}", "output": "There is a missing semicolon after the \"x = x + 1\" line, needed to terminate the while loop.", "category": "Python"}, {"instruction": "Describe a way to store the following information in a database.", "input": "Resume of a job applicant", "output": "The best way to store the resume of a job applicant in a database is to break it up into different tables, such as an education table with fields for the degree, field of study, institution, and GPA; a work experience table with fields for job title, company, date, and description; and a skills table with fields for the skills, experience level, and industry.", "category": "Python"}, {"instruction": "Generate a list comprehension to find the highest number in the given list.", "input": "List = [2, 74, 8, 9, 34, 67]", "output": "highest_number = [i for i in List if i == max(List)]", "category": "Python"}, {"instruction": "Produce a JavaScript code snippet for opening a new browser window.", "input": "", "output": "window.open(\"\", \"_blank\");", "category": "Python"}, {"instruction": "Write a C++ statement to delete all the elements from the queue q.", "input": "", "output": "while (!q.empty()) \n    q.pop();", "category": "Python"}, {"instruction": "Construct an HTML form for a user to enter his or her name, email address and a message", "input": "", "output": "<form action=\"\" method=\"post\">\n  <label for=\"name\">Name:</label><br>\n  <input type=\"text\" name=\"name\" id=\"name\"> <br>\n  <label for=\"email\">Email:</label><br>\n  <input type=\"email\" name=\"email\" id=\"email\"><br>\n  <label for=\"message\">Message:</label><br>\n  <textarea name=\"message\" id=\"message\" rows=\"4\" cols=\"50\"></textarea><br><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Construct an SQL query to find the employees whose salary is greater than $5,000 from the Employees table.", "input": "", "output": "SELECT * FROM Employees WHERE salary > 5000", "category": "Python"}, {"instruction": "Use a CSS code snippet to make a div element into a circle with given radius.", "input": "radius = 50px", "output": "div {\n    width: 50px;\n    height: 50px;\n    border-radius: 50px;\n}", "category": "Python"}, {"instruction": "Generate an example of a combination of two colors using the hexadecimal triplet system.", "input": "", "output": "#FFB3B3 and #454545 would generate a light pink and dark gray combination.", "category": "Python"}, {"instruction": "Create a function that removes all the repeated elements from a list.", "input": "lst = [3, 5, 1, 3, 7, 5]", "output": "def remove_repeats(lst):\n    new_lst = []\n    for item in lst:\n        if item not in new_lst:\n            new_lst.append(item)\n    return new_lst", "category": "Python"}, {"instruction": "Create an algorithm that takes in two sorted arrays and merges them together.", "input": "arr1 = [1,3,5,7,9]\narr2 = [2,4,6,8,10]", "output": "def merge_arrays(arr1, arr2):\n    merged = []\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n    return merged", "category": "Python"}, {"instruction": "Sort an array of integers in ascending order by implementing a Bubble Sort algorithm.", "input": "unsorted_list = [8, 5, 3, 1, 9, 6, 0, 7, 4, 2, 5]", "output": "def bubble_sort(nums): \n  # Traverse through all array elements \n  for i in range(len(nums)): \n    # Last i elements are already in place \n    for j in range(0, len(nums)-i-1): \n      # traverse the array from 0 to n-i-1 \n      # Swap if the element found is greater \n      # than the next element \n      if nums[j] > nums[j+1] : \n        nums[j], nums[j+1] = nums[j+1], nums[j]\n\n# Print the sorted array \nif __name__ == '__main__': \n    bubble_sort(unsorted_list) \n    print (\"Sorted array is:\") \n    print(unsorted_list)", "category": "Python"}, {"instruction": "Generate a function in Python that takes a number and a list as input and finds the number of occurrences of the number in the list.", "input": "", "output": "def count_occurrence(number, input_list):\n    return input_list.count(number)", "category": "Python"}, {"instruction": "Construct a Python class to model a circle.", "input": "", "output": "class Circle: \n    def __init__(self, radius, color): \n        self.radius = radius \n        self.color = color \n  \n    def getArea(self): \n        return 3.14 * self.radius * self.radius \n  \n    def getCircumference(self): \n        return 2 * 3.14 * self.radius", "category": "Python"}, {"instruction": "Create an algorithm to compress a string by removing consecutive duplicate characters.", "input": "string = \"aabcccccaaa\"", "output": "def compress_string(string):\n    current_char = string[0]\n    compressed_string = current_char\n    count = 1\n\n    for char in string[1:]:\n        if char == current_char: \n            count += 1\n        else: \n            compressed_string = compressed_string + str(count) + char\n            current_char = char \n            count = 1\n    compressed_string = compressed_string + str(count)\n    return compressed_string\n\nprint(compress_string(string))\n\n# Output: a2b1c5a3", "category": "Python"}, {"instruction": "Find the sum of all elements from the following list.", "input": "list1 = [1, 2, 3, 4, 5]", "output": "list_sum = 0\nfor num in list1:\n    list_sum += num\n\nprint(list_sum)\n\n# Output: 15", "category": "Python"}, {"instruction": "Write a code in Python to output all the combinations of two given lists.", "input": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]", "output": "combinations = []\nfor i in list1:\n    for j in list2:\n        combinations.append([i, j])\n\nprint(combinations)\n\n# Output: [[1, 4], [1, 5], [1, 6], [2, 4], [2, 5], [2, 6], [3, 4], [3, 5], [3, 6]]", "category": "Python"}, {"instruction": "Given a positive integer n, print out an nxn matrix filled with numbers counting up from 1 to n x n.", "input": "5", "output": "[[1, 2, 3, 4, 5],\n [6, 7, 8, 9, 10],\n [11, 12, 13, 14, 15],\n [16, 17, 18, 19, 20],\n [21, 22, 23, 24, 25]]", "category": "Python"}, {"instruction": "Write a code to search a list of integers and print the index of the first matched item.", "input": "nums=[4, 7, 1, 2, 5], target=7", "output": "def search_list(nums, target):\n    \"\"\"\n    Function to search a list of integers and print the index of the first matched item \n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1\n\nprint(search_list([4, 7, 1, 2, 5], 7))", "category": "Python"}, {"instruction": "Generate a random string with the specified length n.", "input": "n=10", "output": "import string\nimport random\n\ndef generate_random_string(n):\n    \"\"\"\n    Generate a random string with the length n \n    \"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=n))\n\nprint(generate_random_string(10))", "category": "Python"}, {"instruction": "Write a MySQL query to update the price of all items that cost more than $50 to $50.", "input": "", "output": "UPDATE items \nSET price = 50 \nWHERE price > 50;", "category": "Python"}, {"instruction": "Using JavaScript, create a function to output all the divisors of a given number, without the number itself.", "input": "12", "output": "function divisors(num){\n  let result = [];\n  for (let i = 1; i <= num; i++){ // 1, 2, 3... num\n    if (num % i === 0){\n      if (i != num){\n        result.push(i);\n      }\n    }\n  }\n  return result;\n}\n\nconsole.log(divisors(12)); //Output: [1, 2, 3, 4, 6]", "category": "Python"}, {"instruction": "Given an array of numbers, write a C program to insert a given number \"x\" at the index \"i\" and push back all the previous numbers by 1.", "input": "arr = [1, 2, 3, 4], x = 5, i = 2", "output": "#include <stdio.h>\n\nvoid insertNum(int arr[], int n, int x, int i) \n{ \n    int j; \n    for (j = n - 1; j >= i; j--) \n        arr[j + 1] = arr[j]; \n  \n    arr[i] = x; \n} \n\nint main()\n{\n    int arr[] = {1, 2, 3, 4}, x = 5, i = 2, n = 4;\n    insertNum(arr, n, x, i);\n\n    int j;\n    for (j = 0; j < n + 1; j++) \n        printf(\"%d \", arr[j]);\n    return 0;\n} \n// Output: 1 2 5 3 4", "category": "Python"}, {"instruction": "Create a C language function to convert a string in camelCase to a string in PascalCase", "input": "camelCase", "output": "#include <stdio.h>\n#include <string.h>\n\nvoid camelCaseToPascalCase(char str[]) \n{ \n    int i = 0;     \n    if (str[0] >= 'a' && str[0] <= 'z') \n        str[0] = str[0] - 32;\n    while (str[i] != '\\0') \n    { \n        if (str[i] == ' ') \n        {\n            i++;  \n            if (str[i] >= 'a' && str[i] <= 'z') \n            {\n                str[i] = str[i] - 32; \n            }\n        }    \n        i++;  \n    } \n} \n\nint main() \n{ \n    char str[] = \"camelCase\"; \n    camelCaseToPascalCase(str); \n    printf(\"%s\", str); \n    return 0; \n} \n// Output: CamelCase", "category": "Python"}, {"instruction": "Write an SQL query to identify the product with the most sales quantities in a given dataset", "input": "", "output": "SELECT product_name, SUM(quantity) AS total_quantity \nFROM sales \nGROUP BY product_name \nORDER BY total_quantity DESC\nLIMIT 1;", "category": "Python"}, {"instruction": "Write a SQL query to identify the number of medicines sold per day between two dates.", "input": "", "output": "SELECT COUNT(medicines.name) \nFROM medicines \nWHERE date BETWEEN 'date1' AND 'date2' \nGROUP BY date;", "category": "Python"}, {"instruction": "Create a script in Python to convert fahrenheit temperatures to celsius.", "input": "", "output": "def fahren_to_celsius(fahren):\n    celsius = (fahren - 32) * (5 / 9)\n    return celsius\n\nprint(fahren_to_celsius(50)) \n\n# Output: 10.0", "category": "Python"}, {"instruction": "Solve the following linear programming problem:\n\nMaximize x + y \nSubject to:\n2x + 3y \u2264 120\nx + 2y \u2264 100\nx \u2265 0, y \u2265 0", "input": "", "output": "The solution of this Linear Programming problem is x = 40 and y =", "category": "Python"}, {"instruction": "Explain the algorithm used in linear search.", "input": "", "output": "Linear search is an algorithm for finding a particular value in an array. It works by sequentially going through each item in the array, comparing the desired value with each item until it is either found or the end of the array is reached. If the item is found, it's index in the array is returned, otherwise, -1 is returned indicating the value wasn't found.", "category": "Python"}, {"instruction": "Edit this Python program so that it logs a message whenever an error occurs.", "input": "def divide_nums(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError as e:\n        print('Error:', e)", "output": "def divide_nums(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError as e:\n        print('Error:', e)\n        logging.error('An error occurred during division.')", "category": "Python"}, {"instruction": "Sort the array so that it is in descending order.", "input": "let array = [7, 4, 5, 9, 1]", "output": "array.sort((a, b) => b - a);", "category": "Python"}, {"instruction": "Create a loop that prints all the odd numbers from a given array.", "input": "let arr = [1, 2, 3, 4, 5, 6, 7, 8]", "output": "for(let i = 0; i < arr.length; i++){\n    if (arr[i] % 2 !== 0 ){\n        console.log(arr[i]);\n    }\n}", "category": "Python"}, {"instruction": "Write a code to parse a URL and return the domain name.", "input": "https://example.com/page", "output": "def get_domain_name(url):\n    parsed_url = urlparse(url)\n    return parsed_url.netloc", "category": "Python"}, {"instruction": "Write a code to remove all punctuations from the given sentence.", "input": "The quick, brown! fox jumped@ over the lazy- dog.", "output": "def remove_punctuation(sentence):\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    no_punct = \"\"\n    for char in sentence:\n        if char not in punctuations:\n            no_punct = no_punct + char\n    return no_punct", "category": "Python"}, {"instruction": "Explain what is linear regression.", "input": "", "output": "Linear regression is a statistical technique used for predictive modeling. It attempts to find the line of best fit for a set of data by minimizing the sum of squares between the estimated line and observed data points. The equation of the line of best fit gives an estimate of the dependent variable given certain values of the independent variables.", "category": "Python"}, {"instruction": "What feature of an Object-Oriented Programming language allows its objects to share tasks and data?", "input": "", "output": "Object-Oriented Programming languages allow objects to share tasks and data through the use of inheritance.", "category": "Python"}, {"instruction": "Replace the string \"My website\" with the string \"John's website\" in the given sentence.", "input": "string: My website is the best", "output": "string = string.replace(\"My website\", \"John's website\")", "category": "Python"}, {"instruction": "Create a JavaScript function to convert a date string of the form \"DD/MM/YYYY\" to a different string format, \"Weekday, Month dd yyyy\".", "input": "\"14/08/2020\"", "output": "function formatDate(inputDate){ \n  let date = new Date(inputDate); \n  let weekday = [\"Sun\", \"Mon\", \"Tue\", \"Wed\",\"Thur\", \"Fri\",\"Sat\"];  \n  let day = weekday[date.getDay()];\n  let month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\",\"Oct\", \"Nov\", \"Dec\"]; \n  let monthName = month[date.getMonth()]; \n  let year = date.getFullYear();\n  let dayNumber = date.getDate(); \n \n  let result = day + ', ' + monthName + ' ' + dayNumber + ' ' + year;\n  return result;\n}\nconsole.log(formatDate(\"14/08/2020\")); // Output: Wed, Aug 14 2020", "category": "Python"}, {"instruction": "Convert the given vector into a 3x2 matrix.", "input": "vector = [1, 2, 3, 4, 5, 6]", "output": "matrix = [[1, 2], [3, 4], [5, 6]]", "category": "Python"}, {"instruction": "What language is most closely associated with the Linux operating system?", "input": "", "output": "The language most closely associated with the Linux operating system is C.", "category": "Python"}, {"instruction": "Initialize a new array to 0 of size 10.", "input": "", "output": "arr = [0] * 10", "category": "Python"}, {"instruction": "What is the term used to refer to the action of incrementing a value by one?", "input": "", "output": "Incrementing is referred to as \"incrementing by one\" or \"incrementing by one unit\".", "category": "Python"}, {"instruction": "Create a for loop that counts up to the given number.", "input": "Number: 10", "output": "for count in range(1, 11):\n    print(count)", "category": "Python"}, {"instruction": "Create an HTML form to take input of a student's name and address.", "input": "", "output": "<form action=\"/action_page.php\" method=\"post\">\n  Name:<br>\n  <input type=\"text\" name=\"name\" value=\"\"><br>\n  Address:<br>\n  <input type=\"text\" name=\"address\" value=\"\"><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Create an API using Node.js that returns the average height of all users from a MySQL database.", "input": "", "output": "// Load MySQL\nvar mysql = require(\"mysql\");\n\n// Create connection\nvar con = mysql.createConnection({\n  host: \"localhost\",\n  user: \"user\",\n  password: \"password\",\n  database: \"my_db\"\n});\n\n// Connect to MySQL\ncon.connect(function(err) {\n  if (err) throw err;\n  console.log(\"Connected to MySQL!\");\n});\n\n// Create API\napp.get(\"/api/get_average_height\", (req, res) => {\n    // Query to get the average height from database\n    con.query(\"SELECT AVG(height) AS avg_height FROM user_table\", function (err, result) {\n        if (err) throw err;\n        // Send average height as response\n        res.json(result[0].avg_height); \n    });\n});", "category": "Python"}, {"instruction": "Rewrite this function in Python to take advantage of list comprehensions.", "input": "def double_list(original_list):\n    doubled_list = []\n    for item in original_list:\n        doubled_list.append(item * 2)\n    return doubled_list", "output": "def double_list(original_list):\n    return [item * 2 for item in original_list]", "category": "Python"}, {"instruction": "Store the data in a database using SQL.", "input": "data: name=\"John\", age=34", "output": "INSERT INTO table_name (name, age) VALUES ('John', 34)", "category": "Python"}, {"instruction": "Produce a new array by multiplying all numbers in the initial array by 2.", "input": "let arr = [1, 4, 6, 8]", "output": "let newArr = arr.map(x => x * 2);", "category": "Python"}, {"instruction": "Write a Python program to calculate the hypotenuse of a right triangle with base and Height of 8 and 6 respectively.", "input": "", "output": "base = 8\nheight = 6\nhypotenuse = (base**2 + height**2)**0.5\nprint(hypotenuse) // Output: 10.0", "category": "Python"}, {"instruction": "Given a dataset containing multiple columns (Name, Class, and Subject) of 2,000 students, write a Java program to output a new dataset that only contains the \"Name\" and \"Class\" columns.", "input": "Name | Class | Subject\nAdam | 1A | Math\nJane | 2B | Physics\nTom | 3A | English", "output": "String[][] newdataset = new String[2000][2];\nfor(int i=0; i< 2000; i++){\n  newdataset[i][0] = dataset[i][0]; //Name \n  newdataset[i][1] = dataset[i][1]; //Class\n}", "category": "Python"}, {"instruction": "Sort the users in alphabetical order by their name.", "input": "users = [{'name': 'John', 'age': 25}, {'name': 'Alice', 'age': 28}, {'name': 'Bob', 'age': 39}]", "output": "sorted_users = sorted(users, key=lambda user: user['name'])", "category": "Python"}, {"instruction": "Create a list containing the cubes of first 10 numbers.", "input": "", "output": "[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]", "category": "Python"}, {"instruction": "Write a JavaScript function to get monday's date of a given week.", "input": "week = 34", "output": "const getMonday = week => {\n  let now = new Date();\n  let day = now.getDay();\n  let diff = now.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday\n  let monday = new Date(now.setDate(diff + (week - 1) * 7));\n\t\n  return monday.toISOString();\n}\n  \nlet result = getMonday(week);\n\nconsole.log(result); // Output: 2019-08-19T00:00:00.000Z", "category": "Python"}, {"instruction": "Write an expression in Python to remove all punctuation from a given string.", "input": "string = \"This, is a test string!\"", "output": "import re\n\nstring = re.sub(r'[^\\w\\s]','',string)\n\nprint(string) # Output: This is a test string", "category": "Python"}, {"instruction": "Create a random number generator in Java that produces a random integer between 1 and 10.", "input": "", "output": "public class RandomNumberGenerator { \n  public static int generateNumber() {\n        Random rand = new Random(); \n\n        return rand.nextInt(10) + 1; \n    } \n}", "category": "Python"}, {"instruction": "Imagine you have an array with the following elements: [3, 7, 2, 8, 1, 4]. Sort the array so that the elements are in ascending order.", "input": "", "output": "[1, 2, 3, 4, 7, 8]", "category": "Python"}, {"instruction": "Rebuild the provided code using CSS flexbox.", "input": "<div>\n    <div style=\"float:left;width:50%;\">Left</div>\n    <div style=\"float:right;width:50%;\">Right</div>\n</div>", "output": "<div style=\"display:flex;\">\n    <div style=\"flex: 1;\">Left</div>\n    <div style=\"flex: 1;\">Right</div>\n</div>", "category": "Python"}, {"instruction": "Create a web page with a header and a paragraph, both with some text.", "input": "", "output": "<html>\n  <head>\n  <title>My Web Page</title>\n  </head>\n  <body>\n    <h1>My Web Page</h1>\n    <p>This is my web page. It has a header and a paragraph.</p>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Read the code and determine if it will cause a memory leak.", "input": "int* numbers = new int[10];\ndelete[] numbers", "output": "false", "category": "Python"}, {"instruction": "Write a JavaScript program that takes an array as input and prints its contents.", "input": "['Hello','World','!']", "output": "let inputArray = ['Hello', 'World', '!'];\n\nfor (let i = 0; i < inputArray.length; i++) {\n    console.log(inputArray[i])\n}", "category": "Python"}, {"instruction": "Edit the given function so that it returns the sum of all numbers in the input array.", "input": "def get_sum(arr):\n    return arr[0]", "output": "def get_sum(arr):\n    sum = 0\n    for item in arr:\n        sum += item\n    return sum", "category": "Python"}, {"instruction": "Write a Python program that adds two numbers and multiplies them.", "input": "4, 6", "output": "num1 = 4\nnum2 = 6\n\nresult = (num1 + num2) * num2\n\nprint(result)", "category": "Python"}, {"instruction": "Create a table in SQL to store details about 1000 employers.", "input": "", "output": "CREATE TABLE employers (\n  id INTEGER PRIMARY KEY,\n  name VARCHAR(100) UNIQUE NOT NULL,\n  age INT NOT NULL,\n  gender VARCHAR(50) NOT NULL,\n  street_address VARCHAR(100) NOT NULL,\n  city VARCHAR(100) NOT NULL,\n  state VARCHAR(100) NOT NULL,\n  zip_code INT NOT NULL,\n  phone_number VARCHAR(25) UNIQUE NOT NULL\n);", "category": "Python"}, {"instruction": "Edit the provided code so that the output is 2021.", "input": "x = 2020\ny = 1\n\nprint(x + y)", "output": "x = 2020\ny = 1\n\nprint(x + y + 1)", "category": "Python"}, {"instruction": "Create a function to perform recursive binary search in a sorted array", "input": "", "output": "#returns the index of the target, if it is found\ndef binary_search(arr,left,right,target):\n    # Check base case \n    if right >= left:\n        mid = left + (right - left) // 2 \n  \n        # If element is present at the middle itself \n        if arr[mid] == target:\n            return mid \n          \n        # If element is smaller than mid, then it  \n        # can only be present in left subarray\n        elif arr[mid] > target:\n            return binary_search(arr, left, mid-1,target)\n       \n        # Else the element can only be present  \n        # in right subarray\n        else:\n            return binary_search(arr, mid + 1, right,target) \n\n    else: \n        # Element is not present in the array \n        return -1", "category": "Python"}, {"instruction": "Parse an XML document and store the node names in a list.", "input": "", "output": "import xml.etree.ElementTree as ET\n\ntree = ET.parse('data.xml') \nroot = tree.getroot() \nnode_list = []\n\nfor child in root:  \n\tnode_list.append(child.tag)", "category": "Python"}, {"instruction": "Generate an array of numbers containing only prime numbers between 10 and 50.", "input": "", "output": "def prime_numbers():\n    prime_nums = []\n    for i in range(10, 50):\n        is_prime = True\n        for j in range(2, i):\n            if i%j ==0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_nums.append(i)\n    return prime_nums", "category": "Python"}, {"instruction": "Write a function that uses recursion to return the Fibonacci of a given number.", "input": "", "output": "def fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\")\n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2)", "category": "Python"}, {"instruction": "Write a function to square a given number and return its result.", "input": "number = 5", "output": "def square_number(number): \n    return number**2\n\nprint(square_number(number))", "category": "Python"}, {"instruction": "Design a Swift program to determine the number of days between two dates.", "input": "date1 = Date(year: 2019, month: 10, day: 15)\ndate2 = Date(year: 2020, month: 5, day: 1)", "output": "func daysBetween(date1: Date, date2: Date) -> Int {\n    let components = Calendar.current.dateComponents([.day], from: date1, to: date2)\n    return components.day!\n}", "category": "Python"}, {"instruction": "Write a Python function to shuffle (randomly reorder) a list of numbers", "input": "nums = [1, 2, 3, 4, 5]", "output": "def shuffle_nums(nums):\n    from random import shuffle\n    shuffle(nums) \n    return nums", "category": "Python"}, {"instruction": "Design a regular expression to extract first name, last name, and age from the following comma-separated string.", "input": "Marley,Bob,32", "output": "/(.*?),(.*?),(\\d+)/", "category": "Python"}, {"instruction": "Write a PHP code snippet to sum up all numbers in an array.", "input": "$nums = [1, 5, 10, 15, 20]", "output": "<?php\n$sum = 0;\nforeach($nums as $num) {\n    $sum += $num;\n}\necho $sum;\n?>", "category": "Python"}, {"instruction": "Design a Django web application to store user profiles.", "input": "", "output": "# models.py \nfrom django.db import models\n\nclass Profile(models.Model):\n    user = models.OneToOneField(\"auth.User\", on_delete=models.CASCADE)\n    first_name = models.CharField(max_length=100)\n    last_name = models.CharField(max_length=100)\n    birth_date = models.DateField()\n\n# views.py \nfrom django.shortcuts import render\nfrom .models import Profile\n\ndef profile(request):\n    profile = Profile.objects.get(user=request.user)\n    return render(request, 'profile.html', {'profile': profile})\n\n# urls.py \nfrom django.urls import path\nfrom .views import profile\n\nurlpatterns = [\n    path('profile/', profile, name='profile'),\n]", "category": "Python"}, {"instruction": "Write a SQL query to list all employees who earn more than $1000 per month and reside in Texas.", "input": "", "output": "SELECT * from employees WHERE salary > 1000 and state = 'Texas';", "category": "Python"}, {"instruction": "Given a list of strings and a single character, write a Python function to return the count of strings containing that character.", "input": "strings = [\"Hello\", \"World\", \"Cat\", \"Dog\", \"Elephant\"] \ncharacter = \"e\"", "output": "def count_character_in_strings(strings, character): \n  count = 0\n  for string in strings:\n    if character in string.lower():\n      count += 1\n  return count", "category": "Python"}, {"instruction": "Write a script to remove any white spaces in a text string.", "input": "The quick    brown fox", "output": "String text = \"The quick    brown fox\";\nString newString = text.replaceAll(\"\\\\s+\",\"\");\nSystem.out.println(newString); // Output: Thequickbrownfox", "category": "Python"}, {"instruction": "Convert the given string to a number in JavaScript.", "input": "String: \"42\"", "output": "Using the parseInt() built-in method, the given string can be converted to a number in JavaScript.\n\nExample:\n\nlet str = \"42\"; \nlet num = parseInt(str); \nconsole.log(\"Number:\", num);\n\n// Output: Number: 42", "category": "Python"}, {"instruction": "Create an array containing the alphabet in lowercase in Python.", "input": "", "output": "Using the string.ascii_lowercase constant, an array containing the alphabet in lowercase can be created.\n\nExample:\n\nimport string \nalphabet_array = list(string.ascii_lowercase) \nprint(\"Array containing the alphabet in lowercase:\", alphabet_array) \n\n# Output: Array containing the alphabet in lowercase: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']", "category": "Python"}, {"instruction": "Create a new Java thread.", "input": "", "output": "Creating a new thread in Java is quite simple. The new thread can be created by extending the Thread class and overriding the run() method.\n\nExample:\n\npublic class MyThread extends Thread {\n   @Override\n   public void run() {\n      // logic to be executed in the new thread\n   }\n}\n \n// Create the new thread\n MyThread thread = new MyThread();\n // Start the new thread\n thread.start();", "category": "Python"}, {"instruction": "Construct a Huffman tree for the following set of characters.", "input": "Character | Frequency\n    G     |     5\n    P     |     9\n    T     |     12", "output": "16\n            /  \\\n           9    7\n          /\\    /\\ \n         5  4  3  2\n        /  /\\  /  /\n       G  P  T  EP\n (E stands for empty)", "category": "Python"}, {"instruction": "Assign the correct operator precedence to the given expression.", "input": "5 * (7 + 9) - 12", "output": "5 * (7 + 9) - 12 = 5 * 16 - 12 = 80 - 12 = 68", "category": "Python"}, {"instruction": "Construct a decision tree for a given dataset", "input": "Age  | Income | Car | Buy?\n0-25 | 0-25k | No  | No\n26-45| 0-25k | No  | No\n> 45 | 0-25k | No  | No\n0-25 | >25k  | No  | Yes\n26-45| >25k  | No  | Yes\n> 45 | >25k  | No  | Yes\n0-25 | 0-25k | Yes | Yes\n26-45| 0-25k | Yes | Yes\n> 45 | 0-25k | Yes | No", "output": "Buy? \n             No -----------> No\n            /              \\\n          No                Yes \n         /                  \\\n   Age/Income            Car = Yes\n  0-25/0-25k ------------> Yes\n /         \\\nNo          >25k --------> Yes\n            /\n          No ----------------> No", "category": "Python"}, {"instruction": "Edit the following sentence to change its sentiment from negative to positive.", "input": "I can't stand programming anymore.", "output": "I'm starting to enjoy programming more.", "category": "Python"}, {"instruction": "Write a code to calculate the maximum, minimum, and average of five numbers.", "input": "number_list = [2, 4, 6, 8, 10]", "output": "def get_max_min_avg(number_list): \n    max_num = max(number_list) \n    min_num = min(number_list) \n    average = sum(number_list) / len(number_list) \n    return (max_num, min_num, average) \n\nmax_num, min_num, average = get_max_min_avg(number_list) \nprint(\"Maximum number is:\", max_num) \nprint(\"Minimum number is:\", min_num) \nprint(\"Average of the numbers is:\", average)", "category": "Python"}, {"instruction": "Find the sum of all the digits in a given number in Java.", "input": "Number: 1234", "output": "Using a loop and mathematical operators, the sum of all the digits in a given number can be found in Java.\n\nExample:\n\nint number = 1234;\nint sum = 0;\nwhile(number > 0) {\n        int digit = number % 10;\n        sum += digit;\n        number /= 10;\n}\nSystem.out.println(\"The sum of all the digits is \"+sum);\n\n// Output: The sum of all the digits is 10", "category": "Python"}, {"instruction": "Write a function that takes in an array of integers and returns a string with each number in reverse order.", "input": "[1,2,3,4,5]", "output": "def reverse_string(arr):\n    res = ''\n    for num in arr:\n        res = str(num) + res\n    return res", "category": "Python"}, {"instruction": "Write a query to find all records in the customers table that have a state of \"California\"", "input": "", "output": "SELECT * \nFROM customers \nWHERE state = 'California';", "category": "Python"}, {"instruction": "Implement a function that copies a 2D array.", "input": "array = [[1, 2, 3], [4, 5, 6]]", "output": "\"\"\"\nFunction to copy a 2D array.\n\"\"\"\ndef copy_2d_array(arr):\n    \"\"\"Returns a copy of the given 2D array.\"\"\"\n    copied_arr = []\n    for sublist in arr:\n        copied_arr.append(list(sublist))\n    return copied_arr\n\nif __name__ == \"__main__\":\n    array = [[1, 2, 3], [4, 5, 6]]\n    print(copy_2d_array(array))", "category": "Python"}, {"instruction": "Develop a service handler in C# to filter the records of a list to find the ones that satisfy a certain condition.", "input": "List of strings - ['apple', 'car', 'cat', 'dog']\nCondition - Starts with the letter 'c'", "output": "public List<string> FilterList(List<string> inputList, string condition) \n{\n    List<string> filteredList = new List<string>();\n    foreach(string str in inputList)\n    {\n        if(str.StartsWith(condition))\n        {\n            filteredList.Add(str);\n        }\n    }\n    return filteredList;\n}", "category": "Python"}, {"instruction": "Construct a declaration in Java to store the coordinates of a point in 3D space.", "input": "", "output": "public class point3D {\n    int x;\n    int y;\n    int z;\n}", "category": "Python"}, {"instruction": "Implement a function in Python to convert a given sentence into title case.", "input": "This is a sentence.", "output": "def to_title_case(sentence):\n    words = sentence.split()\n    titlecase_words = []\n    for word in words:\n        titlecase_words.append(word.title())\n    return ' '.join(titlecase_words)", "category": "Python"}, {"instruction": "Does the following code fragment pass the test?", "input": "def my_func(a, b):\n    return a + b\n\ndef test_my_func():\n    assert(my_func(2, 3) == 5)", "output": "Yes, the code fragment passes the test since the function \"my_func\" successfully returns the value 5 when given arguments a=2 and b=3.", "category": "Python"}, {"instruction": "Classify the following functions as pure or impure.", "input": "def square(x):\n    return x*x\n\ndef add_one(nums):\n    for i in range(len(nums)):\n        nums[i] += 1\n    return nums", "output": "The function \"square\" is a pure function because it only relies on its input and does not modify any external state. The function \"add_one\" is an impure function because it modifies an external (i.e. the list \"nums\") state.", "category": "Python"}, {"instruction": "Which of the following is a valid operator in Python?", "input": "", "output": "The following are valid Python operators: '+', '-', '*', '/', '%', '//', '**', '&', '|', '^', '<<', '>>'.", "category": "Python"}, {"instruction": "Edit the following code so that it prints an appropriate error message.", "input": "def divide(num1, num2):\n result = num1 // num2\n return result", "output": "def divide(num1, num2):\n if num2 == 0:\n print('Error: Invalid operation. num2 cannot be zero.')\n else:\n result = num1 // num2\n return result", "category": "Python"}, {"instruction": "Write an HTML page that displays the text \"My favorite color is blue\" in a blue font.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>My Favorite Color</title>\n</head>\n<body>\n    <h1 style=\"color: blue;\">My favorite color is blue</h1>\n</body>\n</html>", "category": "Python"}, {"instruction": "Rewrite the following line of code in a Java syntax.", "input": "console.log(\"Hello World!\");", "output": "System.out.println(\"Hello World!\");", "category": "Python"}, {"instruction": "Create a HTML form to enter a \u201cnew value\u201d into the field named \u201cinput1\u201d.", "input": "", "output": "<form action='/post_input1_value' method='POST'>\n  New Value: <input type=\"text\" name=\"input1\">\n  <input type=\"submit\" value=\"Enter New Value\">\n</form>", "category": "Python"}, {"instruction": "Write a jQuery code snippet to select all paragraphs which have a class \u201cwarning\u201d.", "input": "", "output": "$('p.warning').select();", "category": "Python"}, {"instruction": "Using the data provided, create a SQL command to get the total number of orders from customers in the USA.", "input": "Table name: \"Orders\"\nColumns: \"Cust_ID\", \"Cust_Country\", \"Order_ID\"", "output": "SELECT COUNT(Order_ID) AS Total_Orders \nFROM Orders \nWHERE Cust_Country=\"USA\"", "category": "Python"}, {"instruction": "Write a CSS code snippet to add a red border to all list items on a web page with class \u201cinfo\u201d.", "input": "", "output": ".info li {\n  border: 2px solid red;\n}", "category": "Python"}, {"instruction": "Edit the code below so that the variable 'name' cannot be modified after the first print statement.", "input": "name = \u201cAlice\u201d\nprint(name)\nname = \u201cBob\u201d", "output": "name = \u201cAlice\u201d\nprint(name)\nname = \"Alice\"", "category": "Python"}, {"instruction": "Write a code to categorize the given number according to their divisibility by a certain number.", "input": "number = 9\ndivisible_number = 3", "output": "def categorize_number_divisibility(number, divisible_number):\n    if number % divisible_number == 0:\n        return 'divisible'\n    else:\n        return 'not divisible'\n        \nnumber = 9\ndivisible_number = 3\nresult = categorize_number_divisibility(number, divisible_number)\nprint(result)", "category": "Python"}, {"instruction": "Generate a C code snippet to print a given string with a width of 20 characters.", "input": "Hello", "output": "#include <stdio.h> \n#include <string.h> \n  \nint main(){ \n    char str[20] = \"Hello\"; \n    printf(\"%-20s\\n\", str); \n    return 0;\n}", "category": "Python"}, {"instruction": "Compose a PHP code to store the data entered by the user into a database.", "input": "Name - John Smith\nAge - 30", "output": "$name = $_POST[\"Name\"];\n$age = $_POST[\"Age\"];\n \n$query = \"INSERT INTO user (Name, Age) VALUES ('$name', '$age')\";\nif (mysqli_query($conn, $query)) {\n    // Success\n} else {\n     //error \n}", "category": "Python"}, {"instruction": "Design a JavaScript function to convert the given number in scientific notation.", "input": "1000.003", "output": "function toScientificNotation(number) {\n    return number.toExponential();\n}", "category": "Python"}, {"instruction": "Develop an algorithm in JavaScript to calculate the frequency of each character in a given string.", "input": "Hello", "output": "function frequency(str) {\n    let count = {};\n    str.split(\"\").forEach(function(s) {\n        count[s] ? count[s]++ : count[s] = 1;\n    });\n    return count;\n}", "category": "Python"}, {"instruction": "Describe the process of debugging in C programming.", "input": "", "output": "Debugging is the process of finding and fixing errors in a program's code. In C programming, debugging involves finding and fixing syntax errors, logical errors, and runtime errors. To debug a C program, you must use a debugging tool such as a debugger or a print statement. The debugging process involves setting breakpoints, examining the current state of the program, modifying data, and stepping through the code to analyze its execution.", "category": "Python"}, {"instruction": "What is memory management in C?", "input": "", "output": "Memory management in C is a process of controlling and coordinating the use of memory in a program or operating system. It involves allocating and deallocating memory as needed. The main purpose of memory management is to provide ways of managing memory usage such that a program can run correctly and efficiently. This is done by allocating blocks of memory for the program to use and then deallocating the memory after its use.", "category": "Python"}, {"instruction": "How to extract numbers from a given string in Python?", "input": "", "output": "Using the regular expression library re in Python, you can extract numbers from a given string. For example,\n\nimport re\n\nstring = \"My age is 22 and my lucky number is 7\"\n\nmatches = re.findall(r'\\d+', string)\n# matches will be [22, 7]", "category": "Python"}, {"instruction": "Create a Python program to check if all items in a list are unique.", "input": "list_items = [1,2,3,2,3]", "output": "def is_unique(list_items):\n  s = set(list_items)\n  if len(list_items) == len(s):\n    return True\n  else:\n    return False\n\nprint(is_unique(list_items))\n\n# The output will be False", "category": "Python"}, {"instruction": "Write a C program to print the elements of a given matrix in spiral order.", "input": "matrix:\n[[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9]]", "output": "#include<stdio.h> \n\nint main() \n{ \n    int rowStart=0, rowEnd=2, colStart=0, colEnd=2; \n    int a[3][3] = {{1, 2, 3}, \n                   {4, 5, 6}, \n                   {7, 8, 9}}; \n    while (rowStart < rowEnd && colStart < colEnd) \n    { \n        //Print the first row \n        for (int i=colStart; i<=colEnd; i++) \n            printf(\"%d \", a[rowStart][i]); \n        rowStart++; \n  \n        //Print the last column \n        for (int i=rowStart; i<=rowEnd; i++) \n            printf(\"%d \", a[i][colEnd]); \n        colEnd--; \n  \n        //Print the last row \n        if (rowStart < rowEnd) \n        { \n            for (int i=colEnd; i>=colStart; i--) \n                printf(\"%d \", a[rowEnd][i]); \n            rowEnd--; \n        } \n  \n        //Print the first column \n        if (colStart < colEnd) \n        { \n            for (int i=rowEnd; i>=rowStart; i--) \n                printf(\"%d \", a[i][colStart]); \n            colStart++; \n        } \n    } \n  \n    return 0;  \n} \n\n# The output will be 1 2 3 6 9 8 7 4 5", "category": "Python"}, {"instruction": "Construct a for loop in Python for summing up the elements of a given list.", "input": "List of integers: [1, 2, 3, 4, 5]", "output": "total = 0\nfor i in [1, 2, 3, 4, 5]:\n total += i\nprint(total)\n\n# the output will be 15", "category": "Python"}, {"instruction": "Convert the given JSON data into an Excel spreadsheet.", "input": "{\n  \"products\": [\n    {\n      \"id\": 1,\n      \"name\": \"Apple\",\n      \"price\": 3.50\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Orange\",\n      \"price\": 2.50\n    },\n    {\n      \"id\": 3,\n      \"name\": \"Banana\",\n      \"price\": 1.25\n    }\n  ]\n}", "output": "Using a programming language such as Python, first use the JSON library to decode the JSON data. Then use a library such as Openpyxl or XlsxWriter to write the data from the JSON object into an Excel spreadsheet.", "category": "Python"}, {"instruction": "Write a code to filter out all the words from a input list of strings, containing the letter 'a'.", "input": "words = ['apple', 'book', 'zebra', 'banana', 'ball']", "output": "def filter_words_with_letter_a(words):\n    filtered_words = []\n    for word in words:\n        if 'a' in word:\n            filtered_words.append(word)\n    return filtered_words\n\nwords = ['apple', 'book', 'zebra', 'banana', 'ball']\nresult = filter_words_with_letter_a(words)\nprint(result)", "category": "Python"}, {"instruction": "Add a simple login feature to a given website.", "input": "A given website with HTML and CSS content", "output": "To add a simple login feature, you will need to create a page with a form that will take the username and password input from the user. The form should contain an input field for the username, an input field for the password, and a submit button. The page should also include an action link to a page that will process the login information. This page should use server-side code (such as PHP) to check the login credentials entered against a database, and then either allow or deny login depending on the result of that check. Finally, the login form should also contain a link to a forgotten password page to enable users to reset their passwords.", "category": "Python"}, {"instruction": "Write a Java program to print out all possible combinations of the numbers from 0 to 9", "input": "", "output": "public class Combinations {\n    static void printCombinations(int[] arr, int index, int num, int reducedNum) \n    { \n        if (reducedNum < 0) \n            return; \n         if (reducedNum == 0) { \n            for (int i = 0; i < index; i++) \n                System.out.print(arr[i] + \" \"); \n            System.out.println(); \n            return; \n        } \n  \n        // One by one replace the digit with all  \n        // possible digits \n        int digit = 0; \n        while (digit <= 9) { \n  \n            // if the digit is not used then replace \n            // it with the digit \n            if (arr[index] == -1) { \n                arr[index] = digit; \n                printCombinations(arr, index + 1,  \n                                    num, reducedNum - digit); \n            } \n            digit++; \n        } \n  \n        // replace the last digit with -1 \n        arr[index] = -1; \n    } \n  \n    // Driver code \n    public static void main(String[] args) \n    { \n        int[] arr = new int[10];; \n        for (int i = 0; i < 10; i++) \n            arr[i] = -1; \n  \n        printCombinations(arr, 0, 10, 10); \n    } \n}", "category": "Python"}, {"instruction": "Create a MySQL query to find all users whose first name is 'John' and last name is 'Doe'.", "input": "", "output": "SELECT * FROM users WHERE first_name = 'John' AND last_name = 'Doe';", "category": "Python"}, {"instruction": "Create a MongoDB query to get all the documents from the collection where the state is 'CA'.", "input": "", "output": "db.collection.find( { state: \"CA\" } )", "category": "Python"}, {"instruction": "Design a Python program to identify odd numbers in a given range.", "input": "10-20", "output": "# set a range for the numbers\nmin = 10\nmax = 20\n\n# iterate and print odd numbers\nfor num in range(min,max+1): \n    if num % 2 != 0: \n        print(num, end=\" \")", "category": "Python"}, {"instruction": "Design a SQL query to select students older than 25 years from a database.", "input": "", "output": "SELECT * \nFROM students \nWHERE age > 25;", "category": "Python"}, {"instruction": "Write an R script to find the number of days in the current month.", "input": "", "output": "monthdays <- as.numeric(format(as.Date(Sys.Date()), format='%d'))\ncat(\"There are\", monthdays, \"days in the current month.\")", "category": "Python"}, {"instruction": "Compose a CSS code to make all the text elements bold.", "input": "", "output": "* {\n    font-weight: bold;\n}", "category": "Python"}, {"instruction": "Create a SQL query to get the names and ages of all the users with an age greater than 25.", "input": "", "output": "SELECT name, age\nFROM users\nWHERE age > 25;", "category": "Python"}, {"instruction": "Create a list of strings from a given string.", "input": "let str = \"hello world!\"", "output": "let strArray = str.split(' ');", "category": "Python"}, {"instruction": "Create a function to identify whether a given number is a power of two.", "input": "num = 8", "output": "\"\"\"\nFunction to identify whether a given number is a power of two\n\"\"\"\n\nconst isPowerOfTwo = (num) => {\n  let i = 0\n  while (2 ** i <= num) {\n    if (2 ** i === num) {\n      return true\n    }\n    i++\n  }\n  return false\n}\n\nconsole.log(isPowerOfTwo(num)) // true", "category": "Python"}, {"instruction": "Given a number n, count the total number of digit only divisors of n.", "input": "n = 100", "output": "\"\"\"\nFunction to count the total number of digit only divisors of n\n\"\"\"\n\nconst countDivisors = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let divisor = true\n    let num = i\n    while (num) {\n      let digit = num % 10\n      if (!(n % digit === 0)) {\n        divisor = false\n        break\n      }\n      num = ~~(num / 10)\n    }\n    if (divisor) count++\n  }\n  return count\n}\n\nconsole.log(countDivisors(n)) // 22", "category": "Python"}, {"instruction": "Construct a for-loop in C# to convert a string to lower cas", "input": "", "output": "for (int i = 0; i < str.Length; i++)\n{\n     str[i] = char.ToLower(str[i]);\n}", "category": "Python"}, {"instruction": "Create a function in C++ to find the ASCII value of a character", "input": "", "output": "int asciiValue(char c) \n{ \n    int value = int(c); \n    return value; \n}", "category": "Python"}, {"instruction": "Update the following code in Java for sorting an array", "input": "int arr[] = {10, 7, 8, 9, 1, 5};", "output": "for (int i = 0; i < arr.length; i++) \n    {\n        for (int j = i + 1; j < arr.length; j++) \n        {\n            if (arr[i] > arr[j]) \n            {\n                int temp = arr[i]; \n                arr[i] = arr[j]; \n                arr[j] = temp; \n            } \n        }\n    }", "category": "Python"}, {"instruction": "Construct a loop in Python that iterates through each row of a dataframe", "input": "Dataframe: df", "output": "for index, row in df.iterrows(): \n    # do something with each row", "category": "Python"}, {"instruction": "Write a VBA code to return the last row where a certain value appears", "input": "Table Name: Employees\nColumn Name: State\nValue: New York", "output": "Sub FindLastRowNY()\nLastRow = Range(\"A1\").End(xlDown).Row \nFor i = LastRow To 1 Step -1\n    If Cells(i, 2).Value = \"New York\" Then\n        MsgBox i\n        Exit Sub\n    End If\nNext i\nEnd Sub", "category": "Python"}, {"instruction": "Create a program in Python to print the first 5 multiples of a number", "input": "Number: 7", "output": "for i in range(1, 6):\n    print(i * 7)", "category": "Python"}, {"instruction": "Create a program which takes an array of integers and an integer as input, and returns the index of the integer in the array.", "input": "array = [1, 2, 3, 4];\nnumber = 3;", "output": "def indexof(nums, target): \n    for i in range(len(nums)): \n        if nums[i] == target: \n            return i \n    return -1", "category": "Python"}, {"instruction": "Construct a HTML page which displays a table with all words of a given string.", "input": "string = \"Hello World\"", "output": "<html> \n  <head> \n    <title>Table of Words</title> \n  </head> \n  <body>\n    <table border=\"1\"> \n      <tr> \n        <th>Word</th> \n      </tr>\n      <tr>\n        <td>Hello</td> \n    </tr>\n    <tr> \n        <td>World</td> \n    </tr>\n    </table>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create a HTML page to show a red circle with a border radius of 50%.", "input": "", "output": "<div style=\"width: 100px; height: 100px;\n    background: red; border-radius: 50%;\"></div>", "category": "Python"}, {"instruction": "Create an PHP script to display the current date and day.", "input": "", "output": "<?php\n echo date(\"l, F jS\")\n ?>", "category": "Python"}, {"instruction": "Create a CSS script to format the text in an h2 element.", "input": "", "output": "h2 {\n font-size: 22px;\n font-weight: bold;\n font-family: Arial, sans-serif;\n line-height: 1.2;\n color: #333;\n text-align: center;\n}", "category": "Python"}, {"instruction": "Create a HTML code to show a green square with a width of 100px and a height of 100px.", "input": "", "output": "<div style=\"width:100px; height:100px; background-color:green\"></div>", "category": "Python"}, {"instruction": "Write a SQL query to find the highest selling product in each state.", "input": "Sales(state, product, revenue)", "output": "SELECT\n state,\n product,\n MAX(revenue) AS revenue\nFROM Sales\nGROUP BY state, product;", "category": "Python"}, {"instruction": "Explain what a Python dictionary is.", "input": "", "output": "\"\"\"\nExplain what a Python dictionary is.\n\"\"\"\n\nA Python dictionary is a collection of key-value pairs. Each key is associated with a single value, and each key is unique. Dictionaries are mutable, meaning that their values can be changed after they are created. Dictionaries are commonly used for storing data in a structured form, as well as for rapidly looking up values associated with a given key. They are also commonly used for storing metadata and other related information.", "category": "Python"}, {"instruction": "Split a string in such a way that all spaces, punctuation, and special characters are removed from the output.", "input": "mystring = 'My,string:is-Awes 0me*!'", "output": "\"\"\"\nSplit a string in such a way that all spaces, punctuation, and special characters are removed from the output.\n\"\"\"\n\ndef split_string(mystring):\n    \"\"\"\n    This function splits the string into words, removing all of the\n    spaces, punctuation, and special characters.\n    \"\"\"\n    # Remove all non-alphanumeric characters\n    mystring = ''.join(c for c in mystring if c.isalnum())\n\n    # Split the string into words\n    words = mystring.split()\n\n    return words\n\nif __name__ == \"__main__\":\n    mystring = 'My,string:is-Awes 0me*!'\n    print(split_string(mystring))", "category": "Python"}, {"instruction": "Develop an algorithm in Java to compute the Fibonacci sequence", "input": "", "output": "static int Fibonacci(int a)\n  { \n    if (a <= 1) return a; \n    return Fibonacci(a - 1) + Fibonacci(a - 2); \n  }", "category": "Python"}, {"instruction": "Create a procedure in PostgreSQL to delete a table", "input": "Table name: Employees", "output": "CREATE OR REPLACE PROCEDURE delete_employees_table()\nAS\nBEGIN\n DROP TABLE Employees;\nEND;", "category": "Python"}, {"instruction": "Compose a function in C to display the result of raising a number to a positive power", "input": "", "output": "int power(int k, int n)\n{\n    int result = 1;\n    while (n > 0)\n    {\n        result *= k;\n        n--;\n    }\n    return result;\n}", "category": "Python"}, {"instruction": "Generate code in C++ for performing Bubble Sort", "input": "", "output": "void bubbleSort(int arr[], int n)\n{\n    for (int i = 0; i < n-1; i++)\n       for (int j = 0; j < n-i-1; j++)\n           if (arr[j] > arr[j+1])\n              swap(arr[j], arr[j+1]);\n}", "category": "Python"}, {"instruction": "Create a code to rotate an array to the right by k steps.", "input": "arr = [1,2,3,4,5], k = 3", "output": "\"\"\"\nFunction rotate array to the right by k steps\n\"\"\"\n\nconst rotateArray = (arr, k) => {\n  let rotatedArray = [...arr]  // Create a shallow copy of the array\n  for (let i = 0; i < k; i++) {\n    let lastElement = rotatedArray.pop()\n    rotatedArray.unshift(lastElement)\n  }\n  return rotatedArray\n}\n\nconsole.log(rotateArray(arr, k)) // [3,4,5,1,2]", "category": "Python"}, {"instruction": "Create a basic class in JavaScript that includes a constructor, a method for changing the greeting, and a method for saying the greeting.", "input": "", "output": "\"\"\"\nBasic class in JavaScript with a constructor, a method for changing the greeting and a method for saying the greeting\n\"\"\"\n\nclass GreetingGenerator {\n  constructor(greeting) {\n    this.greeting = greeting\n  }\n\n  setGreeting(greeting) {\n    this.greeting = greeting\n  }\n\n  sayGreeting() {\n    console.log(this.greeting)\n  }\n}\n\nconst greet = new GreetingGenerator('Hello World!')\ngreet.setGreeting('Good Morning!')\ngreet.sayGreeting() // 'Good Morning!'", "category": "Python"}, {"instruction": "Find the position of a string within another string.", "input": "haystack = \"This is a sample string with the word 'sample' in it\"\nneedle = \"sample\"", "output": "const position = haystack.indexOf(needle)\nconsole.log(position) // 15", "category": "Python"}, {"instruction": "Write a code that allows a user to search a array of objects by any parameter.", "input": "const people = [\n  {name: 'John', age: 19},\n  {name: 'Mark', age: 20},\n  {name: 'Bob', age: 21}\n]", "output": "\"\"\"\nFunction to search an array of objects by any parameter\n\"\"\"\n\nconst searchArray = (arr, key, value) => {\n  return arr.find((obj) => obj[key] === value)\n}\n\nconst searchedName = searchArray(people, 'name', 'John')\nconsole.log(searchedName) // {name: 'John', age: 19}", "category": "Python"}, {"instruction": "Create a regex expression to capture a full name from a string.", "input": "John Smith", "output": "/^([A-Z][a-z]*\\s[A-Z][a-z]*)$/", "category": "Python"}, {"instruction": "Input a scene (description) of a movie and output a title for the movie in 4 words or less.", "input": "A young girl who comes from a rich family goes on a journey of self-discovery", "output": "Growing Rich Girl", "category": "Python"}, {"instruction": "Write a Python code to print the multiplication table upto 10.", "input": "", "output": "for i in range(1, 11): \n    for j in range(1, 11): \n     print(i*j, end=\"  \") \n    print()", "category": "Python"}, {"instruction": "Write a code to find the shortest possible palindrome.", "input": "string = 'race'", "output": "\"\"\"\nFunction to find the shortest possible palindrome\n\"\"\"\n\nconst findShortestPalindrome = (string) => {\n  let reversedString = string.split('').reverse().join('')\n  let newString = string + '#' + reversedString\n  let lps = []\n  let i = 1\n  let j = 0\n  while (i < newString.length) {\n    if (newString[i] === newString[j]) {\n      lps[i] = j + 1\n      i++\n      j++\n    } else {\n      if (j !== 0) {\n        j = lps[j - 1]\n      } else {\n        lps[i] = 0\n        i++\n      }\n    }\n  }\n  return string + reversedString.substring(lps[newString.length - 1])\n}\n\nconsole.log(findShortestPalindrome(string)) // 'ecarace'", "category": "Python"}, {"instruction": "Write a Python program to calculate the sum of all integers up to the given number.", "input": "", "output": "def sum_of_integers(num):\n    total = 0\n    for i in range(1, num + 1):\n        total += i\n    return total", "category": "Python"}, {"instruction": "Write a Python function to edit a given list by replacing an existing element with a new value.", "input": "mylist = [\"Apple\", \"Banana\", \"Cherry\"]\nold_value = \"Banana\"\nnew_value = \"Strawberry\"", "output": "def replace_value(mylist, old_value, new_value):\n    if old_value in mylist:\n        mylist[mylist.index(old_value)] = new_value\n    return mylist", "category": "Python"}, {"instruction": "Write a Python program to print the Odd numbers from 1 to 50.", "input": "", "output": "for i in range(1, 51):\n    if i%2 == 1:\n        print(i)", "category": "Python"}, {"instruction": "Write a Python program to output an array with dimensions [N, M] filled with random numbers between 0 and 1", "input": "N = 5\nM = 4", "output": "import numpy as np\nnp.random.seed(0)\nnums=np.random.rand(N,M)\nprint(nums)", "category": "Python"}, {"instruction": "Write a regular expression that matches a phone number with the format (999) 999-9999", "input": "", "output": "\\([0-9]{3}\\) [0-9]{3}\\-[0-9]{4}", "category": "Python"}, {"instruction": "Create a function that takes a number and checks if it is even or odd.", "input": "", "output": "def check_even_odd(num):\n    \"\"\"\n    Takes a number and checks if it is even or odd.\n    \"\"\"\n    if num % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"", "category": "Python"}, {"instruction": "Create a function that takes in a list and sorts by the reverse order of its length.", "input": "[\u201chi\u201d, \u201chello\u201d, \u201chey\u201d, \u201chola\u201d]", "output": "def sort_by_length(arr):\n    \"\"\"\n    Sort a list by the reverse order of its length.\n    \"\"\"\n    arr.sort(key=len, reverse=True)\n    return arr", "category": "Python"}, {"instruction": "Write a code to construct a new array with the elements reversed.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def reverse_array(arr):\n    \"\"\"\n    Construct a new array with the elements reversed.\n    \"\"\"\n    new_arr = []\n    for i in range(len(arr)-1, -1, -1):\n        new_arr.append(arr[i])\n    return new_arr", "category": "Python"}, {"instruction": "Write a Python function to calculate the hypotenuse of a right angled triangle given the length of the two sides.", "input": "side1 = 7\nside2 = 5", "output": "import math\ndef calculate_hypotenuse(side1, side2):\n    hypotenuse = math.sqrt(side1**2 + side2**2)\n    return hypotenuse", "category": "Python"}, {"instruction": "Convert the following function into a recursive version.", "input": "def factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result", "output": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)", "category": "Python"}, {"instruction": "Create a network topology using the following input.", "input": "nodes = ['A', 'B', 'C', 'D', 'E']\nlinks = [('A', 'B'), ('B', 'C'), ('D', 'E'),('E', 'D')]", "output": "from networkx import nx\n\nG = nx.Graph()\nG.add_nodes_from(nodes)\nfor link in links:\n    G.add_edge(link[0], link[1])", "category": "Python"}, {"instruction": "Design a function to clean binary data (strings) by keeping only printable characters.", "input": "binary_data = b'h\\x9Fl\\x04o'", "output": "def clean_binary_data(binary_data):\n    return ''.join(map(lambda x:chr(x) if 32 <= x <= 126 else '', binary_data))", "category": "Python"}, {"instruction": "Parse the following HTML string and find the ingredients for the recipe.", "input": "<div>\n  <h1>Chocolate Brownie Recipe</h1>\n  <ul>\n    <li>1/2 cup All-Purpose Flour</li>\n    <li>1/3 cup Unsalted Butter</li>\n    <li>1 cup Sugar</li>\n    <li>2 Eggs</li>\n    <li>3/4 cup Cocoa Powder</li>\n  </ul>\n</div>", "output": "def parse_ingredients(html): \n    soup = BeautifulSoup(html, 'html.parser') \n    ingredients = [li.text for li in soup.find_all('li')] \n    return ingredients", "category": "Python"}, {"instruction": "Write a function that takes an integer n and prints the n x n grid with stars.", "input": "3", "output": "def print_grid(n): \n    for r in range(n):\n        print(\"* \"*n)", "category": "Python"}, {"instruction": "Return a dictionary containing the number of occurrences of each word in the string.", "input": "s = \"this string should contain 4 occurrences of the word should\"", "output": "def count_words(s): \n    words = s.split() \n    returnCounter = dict.fromkeys(words, 0) \n    for word in words: \n        returnCounter[word] += 1\n    return returnCounter", "category": "Python"}, {"instruction": "Given a list of strings, create a function that returns a list of only the unique strings.", "input": "[\"this\", \"is\", \"a\", \"list\", \"of\", \"strings\", \"this\", \"list\", \"has\", \"some\",  \"duplicates\"]", "output": "def unique_strings(string_list): \n  return list(set(string_list))", "category": "Python"}, {"instruction": "Create a boolean function in Java to check if a year is a leap year.", "input": "", "output": "public boolean isLeapYear(int year)\n{\n    if(year % 4 == 0 && (year % 100 != 0 || year % 400 == 0))\n        return true;\n    else\n        return false;\n}", "category": "Python"}, {"instruction": "Summarize the features and differences between Python and Java.", "input": "", "output": "Python and Java are two of the most popular programming languages in the world. Python is a high-level, interpreted, general-purpose programming language while Java is a statically-typed, object-oriented language. Python is primarily used for web development, scripting and data science while Java is used for enterprise software development and Android development. Python features an easy-to-read syntax, dynamic typing, interpreted execution, and built-in support for specific tasks. Java has a more structured approach, relies on a compiler, and has a wide range of third-party libraries. Python is generally easier to learn and use, while Java provides optimized performance.", "category": "Python"}, {"instruction": "Explain how a neural network works.", "input": "", "output": "Neural networks are inspired by the structure and function of biological neural networks. They are composed of layers of interconnected \u2018neurons\u2019, which contain adjustable weights that represent the strength of the connection between each neuron. The neurons receive an input from a source, process the input from individual or multiple layers according to their weights, and output a result. Each layer typically performs a different mathematical operation, such as multiplication, addition or nonlinear activation functions. This allows the network to process complex patterns and extract insights from the data. The weights of the neural network are adjusted each time a new set of data is input, which makes it possible for the network to \u2018learn\u2019 from the data and increase its accuracy.", "category": "Python"}, {"instruction": "Compare and contrast the differences between sets and lists in Python.", "input": "", "output": "A set is an unordered collection of items while a list is an ordered collection of items. Sets have no duplicate elements so all the elements in a set must be unique. The elements inside a list may or may not be unique. Sets are faster when compared to lists for retrieving elements since lookups of items don't require continuous search whereas lists need linear search. The sets built-in functions such as union, intersection give us a quick way of performing mathematical set operations. The elements of set are unchangeable and once you create a set the element in the set remain the same. But, items in a list can be modified.", "category": "Python"}, {"instruction": "Transform the following JSON object into a Python dictionary.", "input": "{ \"name\": \"John Doe\", \"age\": 25, \"address\": { \"street\": \"123 Main Street\", \"city\": \"Los Angeles\", \"state\": \"CA\", \"zip\": 90001}}", "output": "import json\n\ndef json_to_dict(json_str):\n   \n    return json.loads(json_str)\n\nif __name__ == \"__main__\":\n    json_str = \"\"\"\n    {\n        \"name\": \"John Doe\",\n        \"age\": 25,\n        \"address\": {\n            \"street\": \"123 Main Street\",\n            \"city\": \"Los Angeles\",\n            \"state\": \"CA\",\n            \"zip\": 90001\n        }\n    }\n    \"\"\"\n    \n    print(json_to_dict(json_str))", "category": "Python"}, {"instruction": "How would you find the maximum 3 elements from a list of numbers?", "input": "[20, -50, 15, 55, 0 , 40]", "output": "def find_max_three(nums):\n    max1 = - float('inf')\n    max2 = - float('inf')\n    max3 = - float('inf')\n\n    for num in nums:\n        if num > max1:\n            max3 = max2\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max3 = max2\n            max2 = num\n        elif num > max3:\n            max3 = num\n            \n    return max1, max2, max3\n\nprint(find_max_three([20, -50, 15, 55, 0, 40]))", "category": "Python"}, {"instruction": "Create a function to convert a given string to its lowercase equivalent, disregarding any non-alphabetical characters.", "input": "", "output": "def to_lowercase(string):\n    new_string = \"\"\n    for char in string:\n        if char.isalpha():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string", "category": "Python"}, {"instruction": "Find the sum of the series n3/(3n+1).", "input": "14", "output": "def sum_series(n):\n    result = 0\n    for x in range(1, n+1):\n        result += (x**3) / (3*x+1)\n    return result\n\nprint(sum_series(14))", "category": "Python"}, {"instruction": "Calculate the linear regression line for the following data.", "input": "X: [1, 2, 3, 4, 5]\nY: [6, 8, 10, 11, 12]", "output": "\"\"\"\nCalculate the linear regression line for the given data\n\"\"\"\nimport numpy as np\n\ndef linear_regression_line(X, Y):\n    mean_x = np.mean(X)\n    mean_y = np.mean(Y) \n    stdev_x = np.std(X)\n    stdev_y = np.std(Y)\n\n    numerator = 0\n    for x, y in zip(X, Y):\n        numerator += (x - mean_x) * (y - mean_y) \n    beta_1 = numerator/ (stdev_x * stdev_y)\n\n    beta_0 = mean_y - (beta_1 * mean_x)\n    \n    return (beta_1, beta_0)\n\nif __name__ == \"__main__\":\n   X = [1, 2, 3, 4, 5]\n   Y = [6, 8, 10, 11, 12]\n   print(\"Linear Regression Line: {}\".format(linear_regression_line(X, Y)))", "category": "Python"}, {"instruction": "Find the greatest common divisor for two integer inputs using the Euclidean Algorithm.", "input": "30, 60", "output": "\"\"\"\nFind the greatest common divisor for two integer inputs using the Euclidean Algorithm\n\"\"\"\n\ndef greatest_common_divisor(int1, int2):\n  if int1 == 0:\n    return int2\n  elif int2 == 0:\n    return int1\n  elif int1 == int2:\n    return int1\n  else:\n    if int1 > int2:\n      return greatest_common_divisor(int2, int1 % int2)\n    else:\n      return greatest_common_divisor(int1, int2 % int1)\n\nif __name__ == \"__main__\":\n   print(greatest_common_divisor(30, 60))", "category": "Python"}, {"instruction": "How would you find the area of a rectangle in Python?", "input": "", "output": "\"\"\"\nFind the area of a rectangle in Python\n\"\"\"\n\ndef area_of_rectangle(width, height):\n    \"\"\"\n    Returns the area of a rectangle given its width and height.\n    \"\"\"\n    return width * height\n\nif __name__ == \"__main__\":\n   print(area_of_rectangle(2, 4))", "category": "Python"}, {"instruction": "Create a function that takes two strings and returns true if both strings have the same length and false otherwise.", "input": "string1 = \"hello\"\nstring2 = \"world\"", "output": "def same_length(string1, string2):\n  return len(string1) == len(string2)", "category": "Python"}, {"instruction": "Given a list of numbers, create a function that prints the elements of the list that are divisible by 5.", "input": "[1, 20, 30, 15, 60]", "output": "def print_divisible_by_5(input_list):\n    for num in input_list:\n        if num % 5 == 0:\n            print(num)", "category": "Python"}, {"instruction": "Create a function that takes a list of numbers and returns True if the sum of the numbers is even and False otherwise.", "input": "[2, 4, 6, 8]", "output": "def sum_is_even(input_list): \n    return sum(input_list) % 2 == 0", "category": "Python"}, {"instruction": "How to install the Python package called Pillow?", "input": "", "output": "The easiest way to install the Pillow package is through pip, the official package manager for Python. To install Pillow using pip, open the command line interface and type \"pip install Pillow\".", "category": "Python"}, {"instruction": "Sort the given array in Java [4, 9, 3, 6, 2, 1].", "input": "", "output": "int[] arr = {4, 9, 3, 6, 2, 1}; \n\nArrays.sort(arr); \n\nSystem.out.println(Arrays.toString(arr));\n\n// Output: [1, 2, 3, 4, 6, 9]", "category": "Python"}, {"instruction": "How could you tokenize a sentence \"Jack and Jill went up the hill.\"", "input": "", "output": "The sentence \"Jack and Jill went up the hill\" can be tokenized into the following four tokens: \n[\"Jack\", \"and\", \"Jill\", \"went\", \"up\", \"the\", \"hill\"].", "category": "Python"}, {"instruction": "Create a loop in JavaScript to count from 1 to 10.", "input": "", "output": "for (var i=1; i <= 10; i++) {\n  console.log('Counting: ' + i);\n}", "category": "Python"}, {"instruction": "Write a PHP code snippet to display the current date in the format \"Month day, Year\".", "input": "", "output": "echo date('F j, Y');", "category": "Python"}, {"instruction": "Create a switch statement in Java to determine a given character type.", "input": "", "output": "switch (characterType) {\n  case \u2018A\u2019 :\n    // do something\n    break;\n  case \u2018B\u2019 :\n    // do something\n    break;\n  case \u2018C\u2019 :\n    // do something\n    break;\n}", "category": "Python"}, {"instruction": "Create a for loop in C++ to traverse a list of strings.", "input": "myList = ['Hello', 'World', '!']", "output": "for (auto& item : myList) {\n  cout << item << endl;\n}", "category": "Python"}, {"instruction": "Create a class in C++ with one public member and one private member.", "input": "", "output": "class MyClass \n{ \n    public: \n        int publicMember; \n    private: \n        int privateMember; \n};", "category": "Python"}, {"instruction": "Write a query in SQL to list the items and the corresponding customer names of all orders with a value greater than $100.", "input": "", "output": "SELECT items.name AS item_name, customers.name AS customer_name \nFROM orders\nINNER JOIN items ON items.item_id = orders.item_id \nINNER JOIN customers ON customers.customer_id = orders.customer_id \nWHERE orders.value > 100;", "category": "Python"}, {"instruction": "Create a for loop in Python to print all elements in a given numpy array.", "input": "import numpy as np \nmyArray = np.array([1, 2, 3, 4])", "output": "for element in myArray:\n print(element)", "category": "Python"}, {"instruction": "Change the following Java code to Swift.", "input": "public static int addTwoIntegers(int a, int b) {\n    return a+b;\n}", "output": "func addTwoIntegers(a: Int, b: Int) -> Int {\n    return a + b\n}", "category": "Python"}, {"instruction": "Implement the following function using a stack.", "input": "def isPalindrome(string):\n    '''This function will return whether or not a string is a palindrome.'''", "output": "def isPalindrome(string):\n    '''This function will return whether or not a string is a palindrome.'''\n    stack = [] \n    for letter in string:\n        stack.append(letter)\n\n    reverse = ''\n    while stack:\n        reverse += stack.pop()\n\n    if reverse == string:\n        return True\n    return False", "category": "Python"}, {"instruction": "Given a linked list, design an algorithm to reverse it.", "input": "", "output": "The algorithm must traverse the list and keep track of the nodes as it moves through it. The algorithm should create a new linked list with the elements in reverse order. To do this, the algorithm should traverse the original linked list and push every element onto a stack. Then, the algorithm should pop each element off the stack and insert it as the head of the new linked list. This process is iterative until the stack is empty.", "category": "Python"}, {"instruction": "How to create a dictionary of length four in Python?", "input": "", "output": "The simplest way to create a dictionary of length four in Python is by using the built-in dict() function. For example:\n\nmyDict = dict(key1 = \"value1\", key2 = \"value2\", key3 = \"value3\", key4 = \"value4\")", "category": "Python"}, {"instruction": "Design an algorithm to find the median of two sorted arrays.", "input": "", "output": "The algorithm would first compare the two arrays and select the lower value for the first element of the median. Then it would proceed to select the higher value for the second element of the median, and then average the two elements to obtain the median of the two sorted arrays.", "category": "Python"}, {"instruction": "What is the result of the following operation in Python?", "input": "x = 1\ny = 3\nz = 4\n\nx = y - z", "output": "x = -3", "category": "Python"}, {"instruction": "Implement a main method for the following abstract class.", "input": "abstract class AbstractClass {\n\n    abstract void funOne();\n\n    abstract void funTwo();\n\n}", "output": "abstract class AbstractClass {\n\n    abstract void funOne();\n\n    abstract void funTwo();\n\n    public static void main(String[] args) {\n        // Code goes here\n    }\n}", "category": "Python"}, {"instruction": "Create an array in Java to store 5 integer values.", "input": "", "output": "int [] numArray = new int[5];", "category": "Python"}, {"instruction": "How can you count the number of elements in an array in Java?", "input": "", "output": "In Java, you can count the number of elements in an array by using the length property of the array. \n\nFor example, \n\nint[] arr = {1, 2, 3}; \n\nint len = arr.length; \n\nSystem.out.println(\"Length of the array: \" + len); \n\n// Output: Length of the array: 3", "category": "Python"}, {"instruction": "Write a SQL query to list all customers who have purchased items more than twice in the same year.", "input": "", "output": "SELECT customer_id, COUNT(*) \nFROM orders \nWHERE YEAR(order_date) = YEAR(CURRENT_TIMESTAMP) \nGROUP BY customer_id \nHAVING COUNT(*) > 2;", "category": "Python"}, {"instruction": "Write a Python program that generates a random integer between 1 and 5 and prints it out.", "input": "", "output": "import random\n\nrandom_integer = random.randint(1, 5)\n\nprint(random_integer)", "category": "Python"}, {"instruction": "Design a database table to store information about companies, such as the company name, address, phone number, and number of employees.", "input": "", "output": "CREATE TABLE companies (\n name VARCHAR(255)      NOT NULL,\n address VARCHAR(255)   NOT NULL,\n phone   VARCHAR(20)    NOT NULL,\n employees INT          NOT NULL\n);", "category": "Python"}, {"instruction": "Modify the following C++ program to print a random number between 0 and 5.", "input": "#include<stdio.h>\nint main() \n{ \n\tint x;\n\tx = rand() % 10;\n\tprintf(\"%d\\n\",x);\n}", "output": "#include<stdio.h>\n#include<stdlib.h>\n#include<time.h>\n\nint main() \n{ \n\tsrand(time(0));\n\tint x;\n\tx = rand() % 6;\n\tprintf(\"%d\\n\",x);\n}", "category": "Python"}, {"instruction": "Design a data structure to store information about a student.", "input": "", "output": "class Student {\n    String name;\n    String studentId;\n    String course;\n    String[] subjects;\n    int age;\n    String email;\n    Float averageScore;\n    Map<String, Float> scoresBySubject;\n}", "category": "Python"}, {"instruction": "Create a SQL query to find all rows from the table \"customer_orders\" that have a total price of more than $50.", "input": "", "output": "SELECT * \nFROM customer_orders \nWHERE total_price > 50;", "category": "Python"}, {"instruction": "Create a Sass mixin to create a \"toast\" style.", "input": "", "output": "@mixin toast-style {\n    background-color: #F2DEDE;\n    color: #A94442;\n    border: 1px solid #EBCCD1;\n    font-size-base: 1rem;\n    font-family: sans-serif;\n}", "category": "Python"}, {"instruction": "Given a string, write a Python program to remove all special characters from it.", "input": "", "output": "def remove_special_characters(string): \n    final_string = \"\" \n    for character in string: \n        if character.isalnum(): \n            final_string += character \n    return final_string", "category": "Python"}, {"instruction": "Using React, write a component that displays a table containing the user's profile information.", "input": "", "output": "const ProfileTable = () => {\n  return (\n    <table>\n      <tr>\n        <th>Full Name</th>\n        <th>Username</th>\n        <th>Email</th>\n        <th>Phone</th>\n      </tr>\n      <tr>\n        <td>{user.full_name}</td>\n        <td>{user.username}</td>\n        <td>{user.email}</td>\n        <td>{user.phone}</td>\n      </tr>\n    </table>\n  );\n};", "category": "Python"}, {"instruction": "Given a string of words, generate the n-grams of the string.", "input": "String: \"Dogs are the best pet\"\nGram size: 2", "output": "['Dogs are', 'are the', 'the best', 'best pet']", "category": "Python"}, {"instruction": "Perform linear search on a given list of numbers to check if a given number is present in the list.", "input": "List: [1, 2, 3, 4]\nNumber: 2", "output": "\"\"\"\ndef linear_search(arr, n):\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the given number is found\n        if arr[i] == n:\n            return True\n    \n    # Return False if the given number is not present\n    return False\n\n# Function call\nprint(linear_search([1, 2, 3, 4], 2))\n\"\"\"\n\nOutput: True", "category": "Python"}, {"instruction": "Given a list of numbers, determine whether they are a perfect square or not.", "input": "[1, 2, 3, 4]", "output": "[True, False, False, True]", "category": "Python"}, {"instruction": "Given a string, identify the count of each letter in the string.", "input": "String: \"apple\"", "output": "{'a': 1, 'p': 2, 'l': 1, 'e': 1}", "category": "Python"}, {"instruction": "Develop a code to check whether a number is a palindrome.", "input": "Number: 1234321", "output": "\"\"\"\ndef is_palindrome(num):\n    # Initializing variables\n    n = num\n    rev = 0\n    while (n > 0):\n        # Storing the remainder\n        rev = (rev * 10) + n % 10\n\n        # Updating n\n        n //= 10\n\n    # Checking if the reversed number is equal to the given number\n    if (num == rev):\n        return True\n\n    return False\n\n# Function call\nprint(is_palindrome(1234321))\n\"\"\"\n\nOutput: True", "category": "Python"}, {"instruction": "Write a function to check whether a given number can be expressed as the power of some other number", "input": "Number: 8", "output": "\"\"\"\ndef is_power_of(x):\n    # Initializing the counter\n    i = 0\n  \n    # Iterating through possible exponents\n    while (x > 1):\n        if (x % 2 == 0): \n            x /= 2\n        else: \n            return False\n        i += 1\n        \n    return True\n\n# Function call\nprint(is_power_of(8))\n\"\"\"\n\nOutput: True", "category": "Python"}, {"instruction": "Given an integer array, classify all the elements as even and odd.", "input": "[1, 2, 3, 4, 5, 6]", "output": "['odd', 'even', 'odd', 'even', 'odd', 'even']", "category": "Python"}, {"instruction": "Generate a substring from the given string?", "input": "String: \u201cWelcome to this program\u201d \nRequirement: Substring from index 4 to 9", "output": "\"o to th\"", "category": "Python"}, {"instruction": "Write a Java program to calculate the average of the following array elements [2, 5, 7, 8, 9, 10].", "input": "", "output": "public class AverageCalculation \n{\n    public static void main(String[] args) \n    {\n        int[] inputArray = {2, 5, 7, 8, 9, 10};\n        double sum = 0.0;\n        // calculate the sum of elements\n        for(int i = 0; i < inputArray.length; i++) {\n            sum += inputArray[i];\n        }\n        // calculate the average\n        double average = sum / inputArray.length;\n        System.out.println(\"Average of Array Elements is: \" + average); \n    }\n}", "category": "Python"}, {"instruction": "Using React, write a component named \"CommentItem\" that renders a single comment from a list of comments.", "input": "", "output": "const CommentItem = (props) => {\n  const {commentText, commentUser, commentTime} = props;\n\n  return (\n    <div className=\"comment-item\">\n      <p>{commentText}</p>\n      <span> By {commentUser} at {commentTime}</span>\n    </div>\n  );\n};", "category": "Python"}, {"instruction": "How can you insert a comment into the following CSS code?", "input": "div {\n    margin: 0 auto;\n    width: 50%;\n    text-align: center;\n}", "output": "/* Center the div element on the page */ \ndiv {\n    margin: 0 auto;\n    width: 50%;\n    text-align: center;\n}", "category": "Python"}, {"instruction": "Respond with a query using the following inputs.", "input": "TableName: Employees, \nColumnNames: FirstName, LastName", "output": "SELECT FirstName, LastName \nFROM Employees;", "category": "Python"}, {"instruction": "Write a query in SQL to find out the cities in which customers from France have made purchases.", "input": "", "output": "SELECT city \nFROM customers \nWHERE country = 'France';", "category": "Python"}, {"instruction": "Create a Java program to print the value of the mathematical expression sin(60)", "input": "", "output": "public class PrintSinValue {\n    public static void main(String[] args) {\n      double angleInDegrees = 60;\n      double result = Math.sin(Math.toRadians(angleInDegrees));\n      System.out.println(result);\n    }\n}", "category": "Python"}, {"instruction": "Create an API in Node.js to accept JSON data and add it to a database.", "input": "", "output": "// define an API endpoint to accept POST requests\napp.post('/api/data', (req, res) => {\n  // convert data to a JavaScript object\n  const data = JSON.parse(req.body);\n  // store data in the database\n  storeDataInDB(data);\n\n  // return a success message\n  res.send({ success: true });\n});", "category": "Python"}, {"instruction": "Design a REST API in Python that would return a list of customer information.", "input": "", "output": "# Create a customer information API\n@app.route(\"/customers\", methods=[\"GET\"])\ndef customers():\n    # Get a list of customer data\n    customer_list = get_customers()\n    # Create a list of customer dictionaries\n    customer_info = [{'name': customer.name,\n                    'age': customer.age,\n                    'address': customer.address} \n                    for customer in customer_list]\n    # Return a json object with list of customer data\n    return jsonify(customer_info)", "category": "Python"}, {"instruction": "How does React.js update a user interface?", "input": "", "output": "React.js updates the user interface by re-rendering the page on each state change. When a user interacts with the page (by clicking on a button, for example), React.js detects the change in state and triggers a re-render. This means that React.js will re-run the code for the components involved and render a new user interface.", "category": "Python"}, {"instruction": "How does error handling work in Java?", "input": "", "output": "Error handling in Java is done using Exceptions. When something unexpected happens, a special type of object called an Exception is thrown. In Java, errors are handled by writing code to catch the Exception and resolving it. The code to handle Exceptions is usually placed in a try-catch block, which defines what to do in the event of an error. This allows the program to continue running without crashing.", "category": "Python"}, {"instruction": "Explain the uses of AJAX in web development.", "input": "", "output": "AJAX is a combination of HTML, CSS, JavaScript, and XML that allows for dynamic, asynchronous web page updates without page reloads. AJAX is used to create a more interactive and responsive user experience by quickly updating parts of the page with new data from the server. It is also used to create web applications that have better performance and faster response times.", "category": "Python"}, {"instruction": "Create a regex expression to extract names from the following sentence: \"John, Jessica and David went to the store.\"", "input": "", "output": "\\b[A-Z][a-z]+(?:,[\\sA-Z][a-z]+)*", "category": "Python"}, {"instruction": "Explain why selecting a web framework is important.", "input": "", "output": "Choosing a web framework is important because it helps to create a structure for your web application and makes it easier to develop features quickly and efficiently. A web framework is also helpful for ensuring security and scalability for your application. Furthermore, the right web framework can make development faster and easier by providing built-in libraries, tools, and methods to quickly complete project tasks.", "category": "Python"}, {"instruction": "Edit the given code to calculate the sum of given numbers using a for loop.", "input": "numbers = [2, 4, 6, 8]\nsum = 0", "output": "\"\"\"\nEdit the given code to calculate the sum of given numbers using a for loop\n\"\"\"\n\nnumbers = [2, 4, 6, 8]\nsum = 0\n\nfor number in numbers:\n    sum += number\n\nprint(sum)", "category": "Python"}, {"instruction": "Generate a dataframe with 5 rows and 3 columns.", "input": "", "output": "import pandas as pd \n\ndata = {'Column1': [1, 2, 3, 4, 5], \n        'Column2': [5, 4, 3, 2, 1],\n        'Column3': [1, 2, 3, 4, 5]\n        }\n\ndf = pd.DataFrame(data)", "category": "Python"}, {"instruction": "Create a function that takes a list of strings and a string as inputs and finds all the strings in the list which contain the given string.", "input": "string_list = [\"hello\", \"world\", \"google\", \"apple\"]\nsub_string = \u201coo\u201d", "output": "def find_strings(string_list, sub_string):\n    results = []\n    for string in string_list:\n        if sub_string in string:\n            results.append(string)\n    return results", "category": "Python"}, {"instruction": "Write a code to print the even numbers in the range of a given two numbers.", "input": "start = 10\nend = 20", "output": "for num in range(start, end+1):\n    if num % 2 == 0:\n        print(num)", "category": "Python"}, {"instruction": "Create a dictionary that stores the number of occurrences of each character in a given string.", "input": "string = \"Hello World!\"", "output": "char_frequency_dict = {}\n\nfor char in string:\n    if char in char_frequency_dict:\n        char_frequency_dict[char] += 1\n    else:\n        char_frequency_dict[char] = 1", "category": "Python"}, {"instruction": "Explain how you would use a for loop to iterate through an array.", "input": "", "output": "A for loop can be used to iterate through an array by looping through it for a predetermined number of times, with each loop accessing the next element in the array. \nFor example, let's say we have an array of integers: int[] myArray = new int[]{1, 2, 3, 4, 5}.\nWe could loop through this array using a for loop like this:\n\nfor (int i = 0; i < myArray.length; i++) {\n    int element = myArray[i];\n    // do something with element\n}\n\nIn this example, the loop will execute five times as the array is of length five. During each loop, the value of 'i' will increase by one, allowing each element in the array to be accessed in order.", "category": "Python"}, {"instruction": "Take two numbers as input and calculate the sum of them using a Java program.", "input": "x = 3\ny = 4", "output": "int sum = x + y;\nSystem.out.println(\"The sum of the two numbers is: \" + sum);", "category": "Python"}, {"instruction": "Reverse a given list of strings.", "input": "['first', 'second', 'third']", "output": "['third', 'second', 'first']", "category": "Python"}, {"instruction": "Generate a list of 4 random numbers between 0 and 10, without duplicates.", "input": "", "output": "[6, 0, 9, 5]", "category": "Python"}, {"instruction": "Edit the following code and make sure it prints out the sorted list instead of the unsorted list.", "input": "list_of_numbers = [30, 10, 20, 40, 50]", "output": "list_of_numbers = [30, 10, 20, 40, 50]\n\nlist_of_numbers.sort()\n\nprint(list_of_numbers)", "category": "Python"}, {"instruction": "Implement a code to print the indices of all occurrences of a number x in an array arr.", "input": "x = 5\narr = [1, 5, 2, 8, 5, 10]", "output": "def print_indices(x, arr):\n    indices = []\n    for i in range(len(arr)):\n        if arr[i] == x:\n            indices.append(i)\n    return indices\n\nprint(print_indices(x, arr))  # [1, 4]", "category": "Python"}, {"instruction": "Refactor this line of code to make it more concise.", "input": "tasks = [t for t in tasks if t.completed == False]", "output": "tasks = [t for t in tasks if not t.completed]", "category": "Python"}, {"instruction": "Write a REGEX pattern to only match valid JavaScript variable names.", "input": "", "output": "^[a-zA-Z_$][\\w$]*$", "category": "Python"}, {"instruction": "Calculate the area of a parallelogram with base lengths 5m and 8m and height of 4m.", "input": "", "output": "Area of the parallelogram = 40 m2", "category": "Python"}, {"instruction": "Write a MySQL query to join employees and departments tables and retrieve records which have department_name='Sales and Marketing'.", "input": "", "output": "SELECT employees.* FROM employees\n  JOIN departments \n    ON departments.id = employees.department_id\n   WHERE department_name = 'Sales and Marketing';", "category": "Python"}, {"instruction": "Create a data structure in Java to store books and their associated information like ISBN, authors, etc.", "input": "", "output": "class Book {\n   private int ISBN;\n   private String title;\n   private List<String> authors;\n   private int year;\n \n   public Book(int ISBN, String title, List<String> authors, int year) {\n     this.ISBN = ISBN;\n     this.title = title;\n     this.authors = authors;\n     this.year = year;\n   }\n   //getters and setters\n }", "category": "Python"}, {"instruction": "Write a Java method to return the largest element from an array of integers.", "input": "[4, 8, 3, 10, 6]", "output": "public static int getLargestElement(int[] nums){\n  int largest = nums[0];\n  for(int i = 1; i < nums.length; i++){\n    if(nums[i] > largest){\n      largest = nums[i];\n    }\n  }\n  return largest;\n}", "category": "Python"}, {"instruction": "Write a JavaScript function to convert a CamelCase string to a snake_case string.", "input": "CamelCaseStr", "output": "function camelCaseToSnakeCase(str){ \n  let result = str[0].toLowerCase(); \n  for (let i = 1; i < str.length; i++) { \n    if (str.charAt(i) === str.charAt(i).toUpperCase()) \n      result += \"_\" + str.charAt(i).toLowerCase(); \n    else\n      result += str.charAt(i); \n  } \n  return result; \n}", "category": "Python"}, {"instruction": "Write a code snippet to convert the text to lowercase.", "input": "LOWERCASING", "output": "let lowerCaseText = text.toLowerCase();\nconsole.log(lowerCaseText); // lowercasing", "category": "Python"}, {"instruction": "Edit the sentence using the correct punctuation.", "input": "The apple is red", "output": "The apple is red.", "category": "Python"}, {"instruction": "Create a switch statement to display the corresponding number in words.", "input": "6", "output": "switch (num) {\n  case 1:\n    console.log('one');\n    break;\n  case 2:\n    console.log('two');\n    break;\n  case 3:\n    console.log('three');\n    break;\n  case 4:\n    console.log('four');\n    break;\n  case 5:\n    console.log('five');\n    break;\n  case 6:\n    console.log('six');\n    break;\n  case 7:\n    console.log('seven');\n    break;\n  case 8:\n    console.log('eight');\n    break;\n  case 9:\n    console.log('nine');\n    break;\n  default:\n    console.log('Please enter a number from 1 to 9.');\n}", "category": "Python"}, {"instruction": "Write a code snippet to display a website's current URL.", "input": "", "output": "let currentURL = window.location.href;\nconsole.log(currentURL);", "category": "Python"}, {"instruction": "What operator should be used to compare two strings in a programming language?", "input": "", "output": "The operator to compare two strings in a programming language is '===' (strict equality operator).", "category": "Python"}, {"instruction": "Write an SQL query to count the number of records from a table named 'students' with a particular name.", "input": "name='John'", "output": "SELECT COUNT(*) FROM students WHERE name='John';", "category": "Python"}, {"instruction": "Create a class in Python thattracks the number of objects created.", "input": "", "output": "class CountObjects:\n  count = 0\n  def __init__(self):\n    CountObjects.count += 1\n \n  @classmethod\n  def get_count(cls):\n    return cls.count", "category": "Python"}, {"instruction": "Write code to create a list of tuples that contains all the possible combinations of two elements taken from two different lists.", "input": "list1 = [1, 2, 3, 4]\nlist2 = [5, 6, 7, 8]", "output": "def combo(list1, list2):\n    result = []\n    for i in list1:\n        for j in list2:\n            result.append((i, j))\n    return result\n\ncombos = combo(list1, list2) # [(1, 5), (1, 6), (1, 7), (1, 8), (2, 5), (2, 6), (2, 7), (2, 8), (3, 5), (3, 6), (3, 7), (3, 8), (4, 5), (4, 6), (4, 7), (4, 8)]", "category": "Python"}, {"instruction": "Edit this piece of code to work with negative numbers", "input": "def sum_positive(arr): \n    result = 0\n    for num in arr:\n        if num >= 0:\n            result += num\n    return result", "output": "def sum_positive(arr): \n    result = 0\n    for num in arr:\n        if num != 0:\n            result += abs(num)\n    return result", "category": "Python"}, {"instruction": "Classify this problem as either a classification or a regression problem.", "input": "Predict the future value of a stock based on past data.", "output": "This is a regression problem because it is trying to predict a continuous, numerical value (the future value of a stock).", "category": "Python"}, {"instruction": "Generate a correct SQL query to return all customers' names and their total orders.", "input": "Table Name: customers\nTable Structure: customer_id, customer_name, customer_address\nTable Name: orders\nTable Structure: customer_id, order_id, order_amount", "output": "SELECT customers.customer_name, SUM(orders.order_amount) AS total_orders\nFROM customers\nLEFT JOIN orders \nON customers.customer_id = orders.customer_id\nGROUP BY customers.customer_id", "category": "Python"}, {"instruction": "Create an HTML page with a blurred background and centered text \"Hello World\".", "input": "", "output": "<html>\n  <head>\n    <style>\n      body {\n        background-image: url(\"background.jpg\");\n        background-size: cover;\n        background-blur: 10px;\n      }\n      .container {\n        position: relative;\n        text-align: center;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <h1>Hello World</h1>\n    </div>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Generate a random DNA sequence of length 50.", "input": "", "output": "\"\"\"\nGenerate a random DNA sequence of length 50\n\"\"\"\n\nimport random\n\ndef random_dna_sequence(length):\n    bases = [\"A\",\"T\",\"G\",\"C\"]\n    sequence = \"\".join([random.choice(bases) for _ in range(length)])\n    return sequence\n\nif __name__ == '__main__':\n  print(random_dna_sequence(50))", "category": "Python"}, {"instruction": "Using an If statement, output whether a given number is positive or negative.", "input": "int num = -25", "output": "if (num > 0) {\n  System.out.println(num + \" is a positive number\");\n} else {\n  System.out.println(num + \" is a negative number\");\n}", "category": "Python"}, {"instruction": "How many km are in 2,000 meters?", "input": "", "output": "2,000 meters is equal to 2 kilometers.", "category": "Python"}, {"instruction": "Find the minimum among a list of integers.", "input": "[1, 15, 22, -5, 87]", "output": "def find_min(numbers):\n  min_value = numbers[0]\n  for n in numbers:\n    if n < min_value:\n      min_value = n\n  \n  return min_value\n  \nif __name__ == '__main__':\n  numbers = [1, 15, 22, -5, 87]\n  print(find_min(numbers))", "category": "Python"}, {"instruction": "Create a while loop to iterate over the elements in the given list", "input": "my_list = [1, 2, 3, 4]", "output": "i = 0 \nwhile i < len(my_list): \n    print(my_list[i]) \n    i += 1", "category": "Python"}, {"instruction": "Sort a given list by the second element of each pair", "input": "my_list = [(2, 9), (1, 4), (3, 5)]", "output": "sorted_list = sorted(my_list, key=lambda x: x[1])", "category": "Python"}, {"instruction": "Create a JavaScript function to return the longest string from an array.", "input": "arr = [\"Hi\", \"Hello\", \"Good Morning\"]", "output": "function longestString(arr) {\n  let longest = '';\n  arr.forEach(string => {\n    if (string.length > longest.length) {\n      longest = string;\n    }\n  });\n  return longest;\n}", "category": "Python"}, {"instruction": "Write code to encrypt a string", "input": "", "output": "def encrypt_string(string):\n    encrypted_string = \"\" \n\n    for char in string:\n        encrypted_string += chr(ord(char) + 5)\n\n    return encrypted_string", "category": "Python"}, {"instruction": "Create a loop to print \"I love Python\" five times", "input": "", "output": "for i in range(5):\n    print(\"I love Python\")", "category": "Python"}, {"instruction": "Replace the placeholder text with a valid statement that sets the default value for the 'count' parameter of the function", "input": "def prints(word, count=TODO):\n    for i in range(count):\n        print(word)", "output": "def prints(word, count=0):\n    for i in range(count):\n        print(word)", "category": "Python"}, {"instruction": "Using a given dataframe, find out the largest value in the column 'A'", "input": "A B\n3.2 4.9\n7.5 1.0\n0.2 0.5", "output": "7.5", "category": "Python"}, {"instruction": "Create an empty function that takes input as a string", "input": "", "output": "def empty_func(x):\n    pass", "category": "Python"}, {"instruction": "Generate a matrix with specific number of row and columns", "input": "Number of rows = 3, number of columns = 2", "output": "[[0, 0], [0, 0], [0, 0]]", "category": "Python"}, {"instruction": "Add a class attribute to the given Python class.", "input": "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "output": "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        self.grade = None", "category": "Python"}, {"instruction": "Correct the error in the given SQL query.", "input": "SELECT * FROM Student st INNERJOIN School sc ON st.schoolID = sc.student", "output": "SELECT * FROM Student st INNER JOIN School sc ON st.schoolID = sc.schoolID", "category": "Python"}, {"instruction": "Take in a list and output the last element", "input": "my_list = [1, 2, 3, 4]", "output": "my_list[-1]", "category": "Python"}, {"instruction": "Create a program to list the 3 most frequent words in a string.", "input": "string = \"I am learning Python programming language\"", "output": "def top_three_words(string):\n    words = string.split()\n    word_dict = {}\n    for word in words:\n        if word in word_dict:\n            word_dict[word] +=1\n        else:\n            word_dict[word] = 1\n    sorted_dict = sorted(word_dict.items(), key = lambda x: x[1], reverse = True)\n    top_three = [word[0] for word in sorted_dict[:3]]\n    return top_three", "category": "Python"}, {"instruction": "Arrange the following data for sorting operation.", "input": "[4, 19, 10, 7, 1, 3]", "output": "[1, 3, 4, 7, 10, 19]", "category": "Python"}, {"instruction": "Edit this HTML page to make the page have a centered heading", "input": "<html>\n<head>\n<title>Sample Page</title>\n</head>\n<body>\n  <h1>Heading</h1> \n</body>\n</html>", "output": "<html>\n<head>\n<title>Sample Page</title>\n</head>\n<body>\n  <h1 style=\"text-align: center;\">Heading</h1> \n</body>\n</html>", "category": "Python"}, {"instruction": "Create a code snippet that solves the following equation: 4x + 5y = 20", "input": "", "output": "# Solve the equation\ndef solve(x, y):\n    return (20 - 5 * y) / 4\n\nx = solve(4, 5)\ny = solve(5, 4)\n\nprint(x, y) # Outputs: 3, 4", "category": "Python"}, {"instruction": "Create a dictionary and parse the following JSON object into it.", "input": "{\n  \"name\": \"John Doe\",\n  \"age\": 34,\n  \"hobbies\": [\"reading\", \"cycling\", \"movies\"],\n  \"address\": {\n    \"city\": \"London\",\n    \"country\": \"United Kingdom\"\n  }\n}", "output": "data = {\n  \"name\": \"John Doe\",\n  \"age\": 34,\n  \"hobbies\": [\"reading\", \"cycling\", \"movies\"],\n  \"address\": {\n    \"city\": \"London\",\n    \"country\": \"United Kingdom\"\n  }\n}\n\n# Parse the json to a dictionary\ndictionary = json.loads(data)", "category": "Python"}, {"instruction": "Write a code snippet that adds two matrices of equal sizes.", "input": "matrix1 = [[1, 2],\n\t\t   [3, 4]]\n\nmatrix2 = [[5, 6],\n\t\t   [7, 8]]", "output": "def add_matrices(matrix1, matrix2):\n    # assert that the matrices are of equal size\n    assert len(matrix1) == len(matrix2), \"Matrices should have the same size\"\n    assert len(matrix1[0]) == len(matrix2[0]), \"Matrices should have the same size\"\n\n    # add the elements\n    for i in range(len(matrix1)):\n        for j in range(len(matrix2[0])):\n            matrix1[i][j] += matrix2[i][j]\n\n    return matrix1", "category": "Python"}, {"instruction": "Generate a customized welcome message that welcomes a given customer by name.", "input": "customer_name = \"John Doe\"", "output": "Welcome, John Doe! We are so glad that you are here.", "category": "Python"}, {"instruction": "Create a program that takes a list of numbers and prints out the sum of those numbers.", "input": "list_of_numbers = [4, 8, 15, 16, 23, 42]", "output": "total = 108\n\n# Program\nlist_of_numbers = [4, 8, 15, 16, 23, 42]\n\ntotal = sum(list_of_numbers)\nprint(total)", "category": "Python"}, {"instruction": "Using the Java collections API, create a data structure such as a HashMap to store key-value pairs.", "input": "", "output": "import java.util.HashMap;\n\nHashMap<String, Integer> myMap = new HashMap<>();\n// adding key-value pairs to the HashMap\nmyMap.put(\"Key1\", 5);\nmyMap.put(\"Key2\", 8);\nmyMap.put(\"Key3\", 10);\n// retrieving values by keys\nint val1 = myMap.get(\"Key1\"); \nint val2 = myMap.get(\"Key2\"); \nint val3 = myMap.get(\"Key3\");\n// etc.", "category": "Python"}, {"instruction": "Write a Java method to remove repeated elements from an array.", "input": "", "output": "public static int[] removeDuplicates(int[] arr) { \n      \n    int n = arr.length; \n    int[] temp = new int[n]; \n      \n    int j = 0; \n    for (int i=0; i<n-1; i++){ \n        if (arr[i] != arr[i+1]) \n            temp[j++] = arr[i]; \n    } \n      \n    temp[j++] = arr[n-1];     \n      \n    int[] res = new int[j];   \n    for (int i=0; i<j; i++){ \n        res[i] = temp[i]; \n    } \n      \n    return res; \n}", "category": "Python"}, {"instruction": "Write a SQL query to select the records with the highest values for a given column.", "input": "", "output": "SELECT * FROM table_name ORDER BY column_name DESC LIMIT 1;", "category": "Python"}, {"instruction": "Create a function that checks if a given string is a palindrome (a string which reads the same forward and backward).", "input": "string = \"racecar\"", "output": "def isPalindrome(string): \n    rev_string = string[::-1] \n    if (string == rev_string): \n        return True \n    return False", "category": "Python"}, {"instruction": "Implement a linked list using C language.", "input": "", "output": "// Linked List Structure \nstruct Node \n{ \n    int data; \n    struct Node* link; \n}; \n  \n// Utility function to create a new node \nNode* newNode(int data) \n{ \n    Node* node = (Node*)malloc(sizeof(Node)); \n  \n    node->data = data; \n    node->link = NULL; \n  \n    return node; \n}", "category": "Python"}, {"instruction": "Implement a function in C++ that takes two strings as parameters and returns the longest common substring between the two.", "input": "str1 = \"stackoverflow\"\nstr2 = \"overburning\"", "output": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\n//function to find common substring\nstring longestCommonSubstring(string str1, string str2)\n{\n    int m = str1.length();\n    int n = str2.length();\n    int table[m + 1][n + 1];\n \n    //fill the lookup table\n    int res_len = 0;\n    string res;\n    for(int i=0; i<=m; i++)\n    {\n     for(int j=0; j<=n; j++)\n     { \n         // If first string is empty, only the second string is found in second string\n         if(i==0 || j==0)\n            table[i][j] = 0;\n         // if matching character\n         else if(str1[i-1] == str2[j-1])\n         {\n            table[i][j] = table[i - 1][j - 1] + 1;\n            //update the result\n            if (table[i][j] > res_len)\n            {\n                res_len = table[i][j];\n                int index = i - res_len;\n                res = str1.substr(index,res_len);\n            }\n        }\n        else table[i][j] = 0;\n      }\n    }\n \n  return res;\n}\n\n// Driver Code\nint main()\n{\n    string str1 = \"stackoverflow\";\n    string str2 = \"overburning\";\n \n    cout << rand_string(str1, str2);\n    return 0;\n}", "category": "Python"}, {"instruction": "Write an SQL query to select the rows which have \"Sales\" in the Department column.", "input": "", "output": "SELECT * FROM table_name WHERE Department = 'Sales';", "category": "Python"}, {"instruction": "Create a program to find the closest string to the given string from a list of strings.", "input": "string = \"text\"\nstrings = [\"tens\", \"tent\", \"teach\", \"tewksbury\"]", "output": "def closest_string_match(string, strings):\n    min_distance = float(\"inf\")\n    min_string = \"\"\n    for s in strings:\n        distance = levenshtein_distance(string, s)\n        if distance < min_distance:\n            min_distance = distance \n            min_string = s\n    return min_string\n\ndef levenshtein_distance(s1, s2):\n    if len(s1) > len(s2):\n        s1, s2 = s2, s1\n\n    distances = range(len(s1) + 1)\n    for i2, c2 in enumerate(s2):\n        distances_ = [i2+1]\n        for i1, c1 in enumerate(s1):\n            if c1 == c2:\n                distances_.append(distances[i1])\n            else:\n                distances_.append(\n                    1 + min((distances[i1], distances[i1 + 1], distances_[-1])))\n        distances = distances_\n    return distances[-1]", "category": "Python"}, {"instruction": "Output the number of \"a\"s in the following sentence.", "input": "The quick brown fox jumps over the lazy dog.", "output": "There are 3 \"a\"s in the sentence.", "category": "Python"}, {"instruction": "Output a random sentence based on the given grammar.", "input": "<Noun> asked <Pronoun> to <Verb> the <Object>.", "output": "The cat asked him to build the house.", "category": "Python"}, {"instruction": "Using the comment as a guide, implement the missing line of code necessary to print out the number 9.", "input": "x = 3 \ny = 3\n# Print the value of x multiplied by y", "output": "x = 3 \ny = 3\n# Print the value of x multiplied by y\nprint(x * y) # Outputs: 9", "category": "Python"}, {"instruction": "Use classes and objects to create an employee class with attributes such as name, age, salary, and role.", "input": "", "output": "class Employee:\n    def __init__(self, name, age, salary, role):\n        self.name = name\n        self.age = age\n        self.salary = salary\n        self.role = role\n\n# Create an employee\nemployee = Employee(\"John Doe\", 34, 10000, \"Software Engineer\")", "category": "Python"}, {"instruction": "Write a code snippet to convert the following list of dictionaries into a pandas dataframe.", "input": "students = [{\"name\":\"John\", \"age\": 18, \"grade\": 85},\n            {\"name\":\"James\", \"age\": 16, \"grade\": 82},\n            {\"name\":\"Jill\", \"age\": 17, \"grade\": 89}]", "output": "# Convert the list of dictionaries to pandas dataframe\nimport pandas as pd\ndf = pd.DataFrame(students)\n\n# Print the dataframe\nprint(df)\n# Outputs:\n   name  age  grade\n0  John   18     85\n1  James  16     82\n2  Jill   17     89", "category": "Python"}, {"instruction": "Generate a code to parse an HTML string and extract the body text only.", "input": "<html> <body> test text <p> Some more text </p> </body> </html>", "output": "import re \n\ndef get_body_text(htmlString):\n    matches = re.search(r'<body>(.*?)</body>', htmlString, re.MULTILINE | re.DOTALL)\n    return matches.group(1)", "category": "Python"}, {"instruction": "Write a code to create an array of 10 random numbers between 0 and 1.", "input": "", "output": "import java.util.Random; \n\npublic class RandomArray {\n    public static void main(String[] args) {\n        Random rand = new Random(); \n  \n        float array[] = new float[10];  \n  \n        for(int i = 0; i < 10; i++) { \n            array[i] = rand.nextFloat(); \n        }\n  \n        System.out.println(\"Array of 10 random numbers between 0 and 1: \");\n        for (int i = 0; i < 10; i++) { \n            System.out.println(array[i]); \n        } \n    }\n}", "category": "Python"}, {"instruction": "Construct a HTML page that displays a form with a text field and a submit button.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n <title>Sample Form</title>\n</head>\n<body>\n  <form action=\"\" method=\"post\">\n   <input type=\"text\" placeholder=\"Input...\"/>\n   <input type=\"submit\" value=\"Submit\" />\n  </form>\n</body>\n</html>", "category": "Python"}, {"instruction": "Generate a syntax correct program which reverses a given linked list", "input": "", "output": "def reverse_list(head): \n    curr = head \n    prev = None\n\n    while curr is not None: \n        next_ = curr.next\n        curr.next = prev \n        prev = curr \n        curr = next_\n\n    head = prev \n    return head", "category": "Python"}, {"instruction": "Generate a syntax-correct program to calculate the sum of the elements in a given 2D array", "input": "", "output": "def sum_elements(arr):\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            sum += arr[i][j]\n    return sum", "category": "Python"}, {"instruction": "Design a class in python to find the reverse of a number.", "input": "", "output": "class ReverseNumber(): \n    def __init__(self): \n        pass\n    \n    def reverse_number(self, num): \n      \n        reverse = 0\n  \n        # Iterate over the given number \n        while(num > 0): \n            reminder = num % 10\n  \n            # Constructing the reverse number\n            reverse = (reverse * 10) + reminder \n  \n            # Floor division\n            num = num // 10\n  \n        return reverse \n  \n# Driver Code \nif __name__ == '__main__': \n    rev = ReverseNumber()\n    print(rev.reverse_number(123))", "category": "Python"}, {"instruction": "Print out the first 10 elements in the sequence interpreted by the rule F(n) = F(n-1) + F(n-2).", "input": "", "output": "def fibonacci(n): \n    \n    # Creating an array to store the sequence \n    f = [0] * (n + 2) \n      \n    # Initial values   \n    f[1] = 1\n      \n    # Calculating the terms \n    for i in range(2, n + 2): \n        f[i] = f[i - 1] + f[i - 2] \n    return f[1:n+1]\n  \nn = 10\nprint(fibonacci(n))", "category": "Python"}, {"instruction": "Create an object oriented program to print the Fibonacci sequence.", "input": "", "output": "class Fibonacci:\n    def __init__(self, num):\n        self.num = num\n \n    def fibo(self):\n        prev = 0\n        current = 1\n        next = 0\n        print(prev)\n        print(current)\n        for i in range(2,self.num):\n            next=prev+current\n            print(next)\n            prev=current\n            current=next\n \n# main program starts from here\nn= int(input(\"how many numbers to print: \"))\nfibo_obj=Fibonacci(n)\nfibo_obj.fibo()", "category": "Python"}, {"instruction": "Create a C++ program to create a triangle with an area of 10.", "input": "", "output": "#include <iostream>\n#include <math.h>\nusing namespace std;\n \nint main()\n{\n    float area, s, a, b, c;\n  \n    // caluculate the semi-perimeter\n    s = (a + b + c) / 2;\n  \n    // calculate the area \n    area = sqrt(s * (s - a) * (s - b) * (s - c));\n  \n    // check whether triangle is possible or not\n    if (area > 0)\n    {\n    cout << \"Area of triangle is \" << area;\n    }\n    else\n    cout << \"Triangle is not possible.\";\n      \n    return 0;\n}", "category": "Python"}, {"instruction": "Create a function that generates a random string of length n using alphabet characters.", "input": "", "output": "import string\nimport random\ndef random_string_generator(n):\n    letters = string.ascii_letters\n    return ''.join(random.choice(letters) for i in range(n))", "category": "Python"}, {"instruction": "Create a Python program that'll take two lists and return a combined list.", "input": "list_1 = [2, 4, 6]\nlist_2 = [3, 5, 7]", "output": "def combine_lists(list_1, list_2):\n    return list_1 + list_2\n\nlist_1 = [2, 4, 6]\nlist_2 = [3, 5, 7]\n\nprint(combine_lists(list_1, list_2))", "category": "Python"}, {"instruction": "Generate a code to transform the list of strings into the upper case.", "input": "list = ['apple', 'banana', 'cherry']", "output": "list = ['apple', 'banana', 'cherry']\n\ndef transform_list(list):\n    upper_list = [i.upper() for i in list]\n    return upper_list\n\nprint(transform_list(list))", "category": "Python"}, {"instruction": "Generate a program to flip a coin.", "input": "", "output": "from random import choice \n\ndef flip_coin(): \n\tresult = choice(['Heads', 'Tails']) \n\n\tprint(result) \n\nif __name__ == \"__main__\": \n\tflip_coin()", "category": "Python"}, {"instruction": "Generate a program to sort the list.", "input": "unsorted_list = [3, 5, 1, 0, 9]", "output": "unsorted_list = [3, 5, 1, 0, 9]\n\ndef sort_list(unsorted_list):\n    sorted_list = sorted(unsorted_list)\n    return sorted_list\n\nprint(sort_list(unsorted_list))", "category": "Python"}, {"instruction": "Write an SQL query to find the employees that are making more than $30,000 in salary.", "input": "", "output": "SELECT * \nFROM employees \nWHERE salary > 30000;", "category": "Python"}, {"instruction": "Write a Python script to detect if a given text contains any URL.", "input": "", "output": "import re\n\ndef has_url(text):\n  pattern = r\"(http|ftp|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;:/~\\+#]*[\\w\\-\\@?^=%&amp;/~\\+#])?\"\n  matches = re.findall(pattern, text) \n  if matches:\n    return True\n  return False", "category": "Python"}, {"instruction": "Write an SQL query to get the 10 last names of employees working in the \u201cTech\u201d department.", "input": "", "output": "SELECT last_name \nFROM employees \nWHERE department = 'Tech' \nORDER BY last_name DESC \nLIMIT 10;", "category": "Python"}, {"instruction": "Construct a sorting algorithm to sort an array in increasing order.", "input": "array = [4,7,1,3,9]", "output": "def bubble_sort(arr): \n    arr_length = len(arr)\n    # Iterate through entire array \n    for i in range(arr_length): \n        # Iterate through unsorted subarray \n        for j in range(0, arr_length-i-1): \n            # Swap items if needed\n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Test our Bubble sort implementation\narr = [4,7,1,3,9] \nbubble_sort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i])", "category": "Python"}, {"instruction": "Generate JavaScript code which takes two numbers and returns the smaller one.", "input": "", "output": "function min(a,b) {\n    return (a < b) ? a : b;\n}", "category": "Python"}, {"instruction": "Generate a HTML code which has a black background and white font.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <style>\n    body {\n   background-color: black;\n   color: white;\n  }\n  </style>\n</head>\n<body>\n \n</body>\n</html>", "category": "Python"}, {"instruction": "Generate C++ code that compares two strings and returns 1 if they are equal, 0 if they are not.", "input": "", "output": "bool compareStrings(string str1, string str2)\n{\n    if(str1.compare(str2) == 0)\n        return 1;\n    else\n        return 0;\n}", "category": "Python"}, {"instruction": "Design an algorithm for multiplying two matrices.", "input": "A = [[1, 2,],\n     [3, 4]] \nB = [[5, 6], \n     [7, 8]]", "output": "def multiply(A, B): \n    # initialize result matrix \n    rows_A = len(A) \n    cols_A = len(A[0]) \n    rows_B = len(B) \n    cols_B = len(B[0]) \n  \n    if cols_A != rows_B: \n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\") \n        return  \n    # construct result matrix  \n    C = [[0 for row in range(cols_B)] for col in range(rows_A)] \n  \n    # iterate through and multiply\n    for i in range(rows_A): \n        for j in range(cols_B): \n            for k in range(cols_A): \n                C[i][j] += A[i][k] * B[k][j] \n  \n    return C", "category": "Python"}, {"instruction": "Create a HTML page which displays \"Hello, World!\" on the screen.", "input": "", "output": "<html>\n  <head>\n    <title>Hello, World!</title>\n  </head>\n  <body>\n    <h1>Hello, World!</h1>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create a program to detect the type of a given character.", "input": "", "output": "def detect_char_type(ch):\n  char_type = \"\"\n\n  if ch.isalpha():\n    char_type = \"Letter\"\n  elif ch.isdigit():\n    char_type = \"Digit\"\n  elif ch.isspace():\n    char_type = \"Space\"\n  elif ch in string.punctuation:\n    char_type = \"Punctuation\"\n  else:\n    char_type = \"Special Character\"\n  \n  return char_type", "category": "Python"}, {"instruction": "Write an SQL query to delete a record from a table named 'user' where the email is 'example@example.com'.", "input": "", "output": "DELETE from user \nWHERE email=\"example@example.com\";", "category": "Python"}, {"instruction": "Create a Swift program to make a request to an API and display the response in the console.", "input": "", "output": "import Foundation\n\nlet url = URL(string: \"https://my-api.com/endpoint\")!\n\nlet task = URLSession.shared.dataTask(with: url) {(data, response, error) in\n  guard let data = data else { return }\n\n  do {\n    let json = try JSONSerialization.jsonObject(with: data, options: [])\n    print(json)\n  } catch {\n    print(error)\n  }\n}\n\ntask.resume()", "category": "Python"}, {"instruction": "Create a HTML form with all the necessary fields to input user information, such as name, email, phone number, etc.", "input": "", "output": "<form>\n  <label for=\"name\">Name:</label><br>\n  <input type=\"text\" name=\"name\" placeholder=\"Enter your name\"><br>\n  <label for=\"email\">Email:</label><br>\n  <input type=\"email\" name=\"email\" placeholder=\"Enter your email\"><br>\n  <label for=\"phone\">Phone:</label><br>\n  <input type=\"tel\" name=\"phone\" placeholder=\"Enter your phone number\"><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Convert this Python list of dictionaries to JSON.", "input": "list_of_dictionaries=[\n  { \n         \"name\" : \"John\", \n         \"age\" : 30, \n         \"city\" : \"New York\"\n     }, \n     { \n         \"name\" : \"Mike\", \n         \"age\" : 25, \n         \"city\" : \"California\"\n     }\n ]", "output": "[ \n    { \n        \"name\" : \"John\", \n        \"age\" : 30, \n        \"city\" : \"New York\"\n    }, \n    { \n        \"name\" : \"Mike\", \n        \"age\" : 25, \n        \"city\" : \"California\"\n    } \n]", "category": "Python"}, {"instruction": "Write a PHP script to create a simple contact form", "input": "", "output": "<?php\nif(isset($_POST['submit'])){\n \n$name = $_POST['name'];\n$subject = $_POST['subject'];\n$mailFrom = $_POST['email'];\n$message = $_POST['message'];\n\n$mailTo = \"example@gmail.com\";\n$headers = \"From: \".$mailFrom;\n$txt = \"You have received an email from \".$name.\".\\n\\n\".$message;\n \nmail($mailTo, $subject, $txt, $headers);\nheader(\"Location: index.php?mailsend\");\n}\n?>", "category": "Python"}, {"instruction": "Write a TensorFlow code to build a convolutional neural network to predict the digits from the MNIST dataset.", "input": "", "output": "model = tf.keras.models.Sequential()\n\n# Add a convolutional layer\nmodel.add(tf.keras.layers.Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=(28, 28, 1)))\n\n# Add a max pooling layer\nmodel.add(tf.keras.layers.MaxPooling2D(2,2))\n\n# Add a flatten layer\nmodel.add(tf.keras.layers.Flatten())\n\n# Add a hidden layer\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\n\n# Add an output layer\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))\n\n# Compile the model\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])", "category": "Python"}, {"instruction": "Explain the significance of the 'const' keyword in C++.", "input": "", "output": "The 'const' keyword in C++ is used to indicate that the value of a variable cannot be modified after its initial assignment. It can be used to create read-only variables that are useful for preventing accidental data modification.", "category": "Python"}, {"instruction": "Construct a regex pattern to extract the URLs from a string.", "input": "String: \"Visit http://www.example.com or https://www.example2.com \"", "output": "\\b(https?):\\/\\/[\\w+&@#\\/%?=~_|!:,.;]+[\\w+&@#\\/%=~_|]", "category": "Python"}, {"instruction": "Debug the following code to check if it has any syntax errors.", "input": "for (int i = 0; i < 5; i++)\n    println(\"Hello World\");", "output": "for (int i = 0; i < 5; i++) {\n    System.out.println(\"Hello World\");\n}", "category": "Python"}, {"instruction": "Create a UI element in ReactJS.", "input": "Element type: button", "output": "const MyButton = () => {\nreturn <button className=\"MyButton\"> My Button </button>\n}", "category": "Python"}, {"instruction": "Design an HTML form to register users on a website.", "input": "", "output": "<html>\n<head>\n    <title>User Registration Form</title>\n</head>\n<body>\n    <h1>Register a new user</h1>\n\n    <form action=\"register.php\" method=\"POST\">\n        <label>First Name:</label><br>\n        <input type=\"text\" name=\"firstName\" required><br><br>\n\n        <label>Last Name:</label><br>\n        <input type=\"text\" name=\"lastName\" required><br><br>\n\n        <label>Email:</label><br>\n        <input type=\"text\" name=\"email\" required><br><br>\n\n        <label>Password:</label><br>\n        <input type=\"password\" name=\"password\" required><br><br>\n\n        <input type=\"submit\" value=\"Register\">\n    </form>\n</body>\n</html>", "category": "Python"}, {"instruction": "What is the type of the value of the following expression: 4* 4 + 8", "input": "", "output": "Integer.", "category": "Python"}, {"instruction": "Can you print out a multiplication table of size 12 by 12?", "input": "", "output": "def multiple_table():\n    for i in range(1, 13):\n        for j in range(1, 13):\n            print(\"%2d x %2d = %3d\" %(i, j, i*j))\n        print(\"\\n\")\nmultiple_table()", "category": "Python"}, {"instruction": "Design a code to generate Fibonacci numbers.", "input": "", "output": "def Fibonacci(num): \n    a = 0\n    b = 1  \n    if num < 0: \n        print(\"Incorrect input\")\n    elif num == 0: \n        return a \n    elif num == 1: \n        return b \n    else: \n        for i in range(2,num): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Can you parse a given URL and extract the domain name?", "input": "", "output": "def get_domain(url):\n    parsed_url = urllib.parse.urlparse(url)\n    return parsed_url.netloc", "category": "Python"}, {"instruction": "Create an algorithm in Java to search for a given value in a sorted array of integers.", "input": "", "output": "public class BinarySearch {\n\n    public static double search(int[] arr, int target) {\n        int low = 0;\n        int high = arr.length - 1;\n \n        while (low <= high) {\n            int mid = (low + high) / 2;\n \n            if (target == arr[mid]) {\n                return mid;\n            }\n            else if (target < arr[mid]) {\n                high = mid - 1;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n\n}", "category": "Python"}, {"instruction": "Change the following PHP code to use the new syntax from PHP 7", "input": "<?php\n$joined=join(array(\u2018a\u2019,\u2019b\u2019,\u2019c\u2019));\necho $joined;", "output": "<?php\n$joined = implode(array('a', 'b', 'c'));\necho $joined;", "category": "Python"}, {"instruction": "Create a graphql mutation that adds a new user to the system.", "input": "name: \"User1\", email: \"user1@test.com\"", "output": "mutation addUser {\n  addUser(name: \"User1\", email: \"user1@test.com\") {\n    name\n    email\n  }\n}", "category": "Python"}, {"instruction": "Convert this string to a float in Python.", "input": "string = \"1.25\"", "output": "string = \"1.25\"\nfloat_value = float(string)", "category": "Python"}, {"instruction": "Write a CSS class for setting rounded corners.", "input": "", "output": ".rounded-corners {\n    border-radius: 15px; \n}", "category": "Python"}, {"instruction": "Perform K-Means Clustering on this dataset.", "input": "dataset = [[5,7], [1,2], [7,9], [10,2], [2,5]]", "output": "import numpy as np\nfrom sklearn.cluster import KMeans\n\n# Create dataset\ndataset = np.array([[5,7], [1,2], [7,9], [10,2], [2,5]])\n\n# Create KMeans object\nkmeans = KMeans(n_clusters=2)\n\n# Fit the model\nkmeans.fit(dataset)\n\n# Get labels\nlabels = kmeans.labels_\n\n# Calculate cluster centers using the average of the datapoints in the cluster\ncluster_centers = kmeans.cluster_centers_\n\n# Print the results\nprint(\"Labels: \", labels)\nprint(\"Cluster Centers: \", cluster_centers)", "category": "Python"}, {"instruction": "List the elements of this array in console.", "input": "array = [22, 74, 12, 1]", "output": "for(int i=0; i<array.length; i++) {\n    System.out.println(array[i]);\n}", "category": "Python"}, {"instruction": "Find the derivate of this equation: f(x) = x^2 + 5x + 3", "input": "", "output": "The derivative of f(x) is f'(x) = 2x + 5", "category": "Python"}, {"instruction": "Comment on the following code:", "input": "function power (base, exponent) {\n    let result = 1;\n    for (let count = 0; count < exponent; count++) {\n     result *= base;\n    }\n    return result;\n}", "output": "// This function takes in two values, a base and an exponent, and calculates the power of the base with the exponent. The result is computed by multiplying the base with the exponent. The result is then returned to the caller.", "category": "Python"}, {"instruction": "Create a JSON object that contains \"name\" and \"age\" fields.", "input": "", "output": "{\n \"name\": \"John Doe\",\n \"age\": 30\n}", "category": "Python"}, {"instruction": "Implement a C# program that reads an array of strings and sorts them in alphabetical order.", "input": "Array of Strings: [\"banana\", \"apple\", \"orange\"]", "output": "using System;\n\nnamespace SortString\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string[] fruits = { \"banana\", \"apple\", \"orange\" };\n\n            Array.Sort(fruits);\n\n            Console.WriteLine(\"Sorted Array of strings:\");\n            foreach (string fruit in fruits)\n            {\n                Console.WriteLine(fruit);\n            }\n        }\n    }\n}", "category": "Python"}, {"instruction": "Write a Java program to calculate the compound interest.", "input": "Principal (P): 1000\nTime (T): 2\nRate of Interest (R): 10\nNumber of Compounds (N): 4", "output": "class CompoundInterest { \n    static double compoundInterest(double principal, double time, double rate, double n) \n    { \n        return principal * (Math.pow((1 + rate / n), n * time)); \n    } \n\n    public static void main(String[] args) \n    { \n        double principal = 1000; \n        double time = 2; \n        double rate = 10; \n        double n = 4; \n        System.out.println(\"Compound Interest is \" + compoundInterest(principal, time, rate, n)); \n    } \n}", "category": "Python"}, {"instruction": "Generate some HTML code to create a table with 3 columns.", "input": "", "output": "<table>\n  <tr>\n    <th>Column1</th>\n    <th>Column2</th>\n    <th>Column3</th>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Compose a Python script to convert a string to an all-uppercase string.", "input": "String: 'Experiment'", "output": "# converting the string to upper-case \nstring = \"Experiment\"\nprint(\"Old String:\", string) \nstring = string.upper() \nprint(\"New String:\", string)", "category": "Python"}, {"instruction": "Write a Java program to sum the elements of an array except for the maximum and minimum.", "input": "Array: [1, 2, 3, 4, 5]", "output": "class Sum {\n    public static void main(String[] args) {\n        int[] arr = {1,2,3,4,5};\n        int max = arr[0];\n        int min = arr[0]; \n  \n        int sum = 0; \n        for (int i = 0; i < arr.length; i++) { \n            sum += arr[i]; \n\n            if (arr[i] > max) { \n                max = arr[i]; \n            } \n            if (arr[i] < min) { \n                min = arr[i]; \n            } \n        } \n\n        int res = sum - (max + min); \n  \n        System.out.println(res); \n    } \n}", "category": "Python"}, {"instruction": "Compose a JavaScript function to detect whether two strings are punctuated versions of the same word.", "input": "String1: 'apple'\nString2: 'Apple'", "output": "function areSameWord(str1, str2) {\n    str1 = str1.toLowerCase();\n    str2 = str2.toLowerCase();\n    if (str1 === str2) {\n        return true;\n    } else {\n        return false;\n    }\n}", "category": "Python"}, {"instruction": "Create a GCP Cloud Function that sends an email with input \"name\" and \"message\".", "input": "", "output": "import os\nimport smtplib\nfrom email.message import EmailMessage\n\ndef sendEmail(request):\n    request_json = request.get_json()\n    name = request_json.get('name')\n    message = request_json.get('message')\n  \n    SENDER = os.environ.get('SENDER')\n    RECEIVER = os.environ.get('RECEIVER')\n    PASSWORD = os.environ.get('PASSWORD')\n  \n    msg = EmailMessage()\n    msg.set_content(f'Hello,\"\\n\\n{message}\"\\n\\nRegards,\\n{name}')\n\n    msg['Subject'] = 'Message Sent Via Cloud Function'\n    msg['From'] = SENDER\n    msg['To'] = RECEIVER\n  \n    s = smtplib.SMTP('smtp.gmail.com', 587)\n    s.starttls()\n    s.login(SENDER, PASSWORD)\n    s.send_message(msg)\n    s.quit()", "category": "Python"}, {"instruction": "Write a RegEx to extract text inside tags", "input": "<div>This is a test</div>", "output": "\\<div\\>(.*?)\\</div\\>", "category": "Python"}, {"instruction": "Write an SQL query to find customers who live in a given city and have purchased a given product.", "input": "", "output": "SELECT customers.name\nFROM customers\nINNER JOIN orders ON customers.ID = orders.customer_id\nINNER JOIN products ON orders.product_id = products.ID\nWHERE customers.city = 'City Name'\nAND products.name = 'Product Name';", "category": "Python"}, {"instruction": "Write an C++ algorithm for finding the longest common substring between two strings.", "input": "", "output": "#include <string>\n#include <algorithm>\n\nstring longestCommonSubstring(string s1, string s2) { \n    int s1Length = s1.size(); \n    int s2Length = s2.size(); \n  \n    int** dp = new int*[s1Length + 1]; \n    for (int i = 0; i <= s1Length; ++i) { \n        dp[i] = new int[s2Length + 1]; \n        dp[i][0] = 0; \n    } \n    for (int j = 0; j <= s2Length; ++j) { \n        dp[0][j] = 0; \n    } \n  \n    int maxLength = 0; \n    int end; \n    for (int i = 1; i <= s1Length; ++i) { \n        for (int j = 1; j <= s2Length; ++j) { \n            if (s1[i - 1] == s2[j - 1]) { \n                dp[i][j] = 1 + dp[i - 1][j - 1]; \n                if (maxLength < dp[i][j]) { \n                    maxLength = dp[i][j]; \n                    end = i; \n                } \n            } \n            else { \n                dp[i][j] = 0; \n            } \n        } \n    } \n    return s1.substr(end - maxLength, maxLength); \n}", "category": "Python"}, {"instruction": "Return an array which contains all the words of the given string in reverse order.", "input": "string = \"This is a test sentence.\"", "output": "\"\"\"\nReturn an array which contains all the words of the given string in reverse order\n\"\"\"\n\nstring = \"This is a test sentence.\"\n\n# Split the string into a list\nwords = string.split(' ')\n\n# Reverse the list of words\nreversed_words = words[::-1]\n\n# Construct the output array\noutput_array = [word[::-1] for word in reversed_words]\n\nprint(output_array)\n\n\"\"\"\nOutput: ['ecnetnes', 'tset', 'a', 'si', 'sihT']\n\"\"\"", "category": "Python"}, {"instruction": "Generate a JSON response which contains the age of all users in the database.", "input": "", "output": "\"\"\"\nGenerate a JSON response which contains the age of all users in  the database\n\"\"\"\n\nimport json\n\n# Database of users\nusers = [\n  {'name': 'John Doe', 'age': 40},\n  {'name': 'Bob Jones', 'age': 30},\n  {'name': 'Alice Smith', 'age': 20}\n]\n\n# Generate the json response\nresponse = {'ages': [user['age'] for user in users]}\n\n# Print the response\nprint(json.dumps(response))\n\n\"\"\"\nOutput: {\"ages\": [40, 30, 20]}\n\"\"\"", "category": "Python"}, {"instruction": "For the given Python dictionary, list all its keys and values in the following format.", "input": "{\n  \"name\": \"John Doe\",\n  \"age\": 40,\n  \"address\": {\n    \"street\": \"123 Main Street\",\n    \"city\": \"Albany\",\n    \"state\": \"NY\"\n  }\n}", "output": "\"\"\"\nFor the given dictionary, list all its keys and values in the following format\n\"\"\"\n\ndata = {\n  \"name\": \"John Doe\",\n  \"age\": 40,\n  \"address\": {\n    \"street\": \"123 Main Street\",\n    \"city\": \"Albany\",\n    \"state\": \"NY\"\n  }\n}\n\nfor key, value in data.items():\n    print(f\"{key}: {value}\")\n    if isinstance(value, dict):\n        for k,v in value.items():\n            print(f\"  {k}: {v}\")\n\n\"\"\"\nOutput:\nname: John Doe\nage: 40\naddress: {'street': '123 Main Street', 'city': 'Albany', 'state': 'NY'}\n  street: 123 Main Street\n  city: Albany\n  state: NY\n\"\"\"", "category": "Python"}, {"instruction": "Resolve the issue in the code causing a \"TypeError\" to be thrown", "input": "names = [\"John\", \"James\", 10]\n\nfor name in names:\n  print(name)", "output": "\"\"\"\nResolve the issue in the code causing a TypeError to be thrown\n\"\"\"\n\nnames = [\"John\", \"James\", 10]\n\nfor name in names:\n  # Check the type of the element and only display it if it's a string\n  if type(name) == str:\n    print(name)\n\n\"\"\"\nOutput:\nJohn\nJames\n\"\"\"", "category": "Python"}, {"instruction": "Edit the code to make the string word_list case-insensitive.", "input": "word_list = [\"cat\", \"dog\", \"bird\"]", "output": "\"\"\"\nEdit the code to make the string word_list case-insensitive\n\"\"\"\n\nword_list = [\"cat\", \"dog\", \"bird\"]\n\n# Make the string case-insensitive\nword_list = [word.lower() for word in word_list]\n\nprint(word_list)\n\n\"\"\"\nOutput: ['cat', 'dog', 'bird']\n\"\"\"", "category": "Python"}, {"instruction": "Modify the code to display a simple error message whenever a parameter is passed as string.", "input": "function sum(a, b) {\n  return a + b;\n}", "output": "\"\"\"\nModify the code to display a simple error message whenever a parameter is passed as string\n\"\"\"\n\nfunction sum(a, b) {\n  // Test if either a or b is a string\n  if (typeof a === 'string' || typeof b === 'string') {\n    throw new Error('Parameters must be numbers');\n  }\n  return a + b;\n}", "category": "Python"}, {"instruction": "Process the given JavaScript object and produce a string of the object's properties in alphabetical order.", "input": "const obj = {\n  name: 'John Doe',\n  age: 40,\n  address: {\n    street: '123 Main Street',\n    city: 'Albany',\n    state: 'NY',\n  },\n};", "output": "\"\"\"\nProcess a JavaScript object and produce a string of its properties in alphabetical order\n\"\"\"\n\nconst obj = {\n  name: 'John Doe',\n  age: 40,\n  address: {\n    street: '123 Main Street',\n    city: 'Albany',\n    state: 'NY',\n  },\n};\n\nconst objKeys = Object.keys(obj);\n\n// Sort objKeys in alphabetical order\nobjKeys.sort();\n\n// Create an array to store the values of each property\nlet outputArray = [];\n\nobjKeys.forEach((key) => {\n  if (typeof obj[key] === 'object') {\n    // Extract the individual fields\n    const fields = Object.keys(obj[key]);\n    fields.sort();\n    // Push each field to the output array\n    fields.forEach((field) => outputArray.push(`${key}.${field}: ${obj[key][field]}`));\n  } else {\n    outputArray.push(`${key}: ${obj[key]}`);\n  }\n});\n\n// Construct the output string\nconst outputString = outputArray.join(', ');\n\nconsole.log(outputString);\n\n\"\"\"\nOutput: age: 40, address.city: Albany, address.state: NY, address.street: 123 Main Street, name: John Doe\n\"\"\"", "category": "Python"}, {"instruction": "For the given HTML page, create an array of all the h2 elements on the page.", "input": "<html>\n    <body>\n        <h1>This is a Heading</h1>\n        <h2>This is a Sub Heading</h2>\n        <h2>This is another Sub Heading</h2>\n    </body>\n</html>", "output": "\"\"\"\nGet an array of all the h2 elements on a page\n\"\"\"\n\nfrom bs4 import BeautifulSoup\n\n# Input HTML\nhtml = \"\"\"\n<html>\n    <body>\n        <h1>This is a Heading</h1>\n        <h2>This is a Sub Heading</h2>\n        <h2>This is another Sub Heading</h2>\n    </body>\n</html>\n\"\"\"\n\n# Parse the HTML and create a beautiful soup document\nsoup = BeautifulSoup(html, 'html.parser')\n\n# Get all h2 elements on the page\nh2_elements = soup.find_all('h2')\n\n# Create an array of h2 elements\nh2_elements_array = [element.text for element in h2_elements]\n\nprint(h2_elements_array)\n\n\"\"\"\nOutput: ['This is a Sub Heading', 'This is another Sub Heading']\n\"\"\"", "category": "Python"}, {"instruction": "Convert pyramid of numbers to a single number.", "input": "9\n    2   3\n  9   3   5\n1   8   6   8", "output": "def pyramid_to_num(pyramid):\n    num = 0\n    val = 0\n\n    for line in pyramid:\n        val = int(line[0]) * 10**(len(line) - 1)\n        num += val * 2**len(line)\n\n    return num\n\n# Test\npyramid = [['9'],['2', '3'],['9', '3', '5'],['1', '8', '6', '8']]\nprint(pyramid_to_num(pyramid))", "category": "Python"}, {"instruction": "Suggest a way to create an interactive web page using HTML and JavaScript.", "input": "", "output": "Event listeners can be used to make the page interactive. For example, onclick listeners could be used to execute functions when a button is clicked, onsubmit listeners could be used to execute functions when a form is submitted, and onchange listeners could be used to execute functions when an element's contents are changed.", "category": "Python"}, {"instruction": "Construct an SQL query to select all students who have a grade of 90 or greater from the 'Student' table.", "input": "", "output": "SELECT * FROM Student WHERE Grade >= 90;", "category": "Python"}, {"instruction": "Suggest a way to display an alert message with the text \"Hello, World!\".", "input": "", "output": "alert(\"Hello, World!\");", "category": "Python"}, {"instruction": "Write a JavaScript that changes the text of a paragraph element, from \"Hello, World!\" to \"Goodbye, World!\"", "input": "", "output": "document.getElementById(\"myParagraph\").innerHTML = \"Goodbye, World!\";", "category": "Python"}, {"instruction": "Suggest a way to store a list of five items in a JavaScript variable.", "input": "", "output": "var items = ['item1', 'item2', 'item3', 'item4', 'item5'];", "category": "Python"}, {"instruction": "Make the following code work in a multithreading environment.", "input": "x = 0\ndef incrementer():\n    #TODO", "output": "import threading\n\nx = 0\nlock = threading.Lock()\n\ndef incrementer():\n    global x\n    with lock:\n        x +=  1\n        return x", "category": "Python"}, {"instruction": "Create a dictionary in Python and store the names of four countries and the cities within them.", "input": "", "output": "# Create a Dictionary \ndict = { \n    \"India\" : [\"Delhi\", \"Mumbai\", \"Chennai\"], \n    \"USA\" : [\"New York\", \"Washington\", \"Los Angeles\"],\n    \"Canada\" : [\"Toronto\", \"Vancouver\", \"Ottawa\"],\n    \"France\" : [\"Paris\", \"Marseille\", \"Lyon\"]\n} \n\n# Print the Dictionary \nprint(dict)", "category": "Python"}, {"instruction": "Write a CSS style that changes the text size to 20px, makes the text bold, and changes the font to Arial.", "input": "", "output": ".text {\n  font-family: Arial;\n  font-size: 20px;\n  font-weight: bold;\n}", "category": "Python"}, {"instruction": "Write an SQL query to retrieve the names of students in a class with a grade of 80 or above.", "input": "", "output": "SELECT name\nFROM students\nWHERE grade >= 80;", "category": "Python"}, {"instruction": "Convert the HTML code below to its corresponding DOM elements.", "input": "<div>\n  <p>Hello, World!</p>\n</div>", "output": "// Create a `div` element \nlet divElement = document.createElement('div');\n\n// Create a `p` element\nlet pElement = document.createElement('p');\n\n// Add the content to the `p` element\npElement.textContent = 'Hello, World!';\n\n// Append the `p` element to the `div` element\ndivElement.appendChild(pElement);", "category": "Python"}, {"instruction": "Create a program in Java for displaying all prime numbers between 1 and 100.", "input": "", "output": "public class PrimeNumbers {\n\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"All prime numbers between 1 and 100:\");\n\t\tint counter;\n\t\tfor (int i = 2; i <= 100; i++) {\n\t\t\tcounter = 0;\n\t\t\tfor (int num = i; num >= 1; num--) {\n\t\t\t\tif (i % num == 0) {\n\t\t\t\t\tcounter = counter + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (counter == 2) {\n\t\t\t\tSystem.out.println(i);\n\t\t\t}\n\t\t}\n\t}\n\n}", "category": "Python"}, {"instruction": "Create an Android application for calculating monthly loan payments.", "input": "The application should be able to calculate the monthly payments for different loan types (e.g. car, house, etc.).", "output": "public class loancalculator extends Activity {\n\n    EditText loanamount, interestrate, repaymentperiod;\n    TextView txtmonthlypayments;\n    Button calculate;\n    Double ans;\n    \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.loancalculator);\n        \n        loanamount=(EditText)findViewById(R.id.loanamount);\n        interestrate=(EditText)findViewById(R.id.interestrate);\n        repaymentperiod= (EditText)findViewById(R.id.paymentperiod);\n        txtmonthlypayments=(TextView) findViewById(R.id.result);\n        calculate=(Button) findsViewById(R.id.calculate);\n        calculate.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                double p = Double.parseDouble(loanamount.getText().toString());\n                double r = Double.parseDouble(interestrate.getText().toString());\n                double n = Double.parseDouble(repaymentperiod.getText().toString());\n                double numerator;\n                double denominator;\n                double rate;\n                double interest;\n                numerator = p * (r/1200);\n                denominator = 1 - Math.pow((1 + (r/1200)),(-1*n));\n                rate  = numerator / denominator;\n                interest = (rate * n) - p;\n                ans = rate + interest / n;\n                txtmonthlypayments.setText(\"Monthly Payment : \"+ans);\n            }\n        });\n    }\n}", "category": "Python"}, {"instruction": "Create a Node.js server that serves a simple \"Hello, World!\" page.", "input": "", "output": "const http = require('http');\n\nconst hostname = 'localhost';\nconst port = 8000;\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello, World!');\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});", "category": "Python"}, {"instruction": "Write an SQL query for finding customers who live in a given zipcode.", "input": "", "output": "SELECT name, address FROM customers \nWHERE address LIKE ('%[zipcode]%')", "category": "Python"}, {"instruction": "Create a web page to display the current weather in your city.", "input": "The weather data should be in the form of temperature, humidity, wind speed, and barometric pressure.", "output": "<html>\n  <head>\n    <title>Current Weather</title>\n  </head>\n  <body>\n    <p>Temperature: <span id=\"temperature\"></span></p>\n    <p>Humidity: <span id=\"humidity\"></span></p>\n    <p>Wind Speed: <span id=\"wind_speed\"></span></p>\n    <p>Barometric Pressure: <span id=\"pressure\"></span></p>\n    <script>\n      // Weather data from API\n      const api_url = 'api_url';\n      fetch(api_url)\n        .then(response => response.json())\n        .then(data => {\n          document.getElementById('temperature').innerHTML = data.temperature;\n          document.getElementById('humidity').innerHTML = data.humidity;\n          document.getElementById('wind_speed').innerHTML = data.windSpeed;\n          document.getElementById('pressure').innerHTML = data.pressure;\n        });\n    </script>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create a MySQL database and table for storing customer information.", "input": "Each customer data should have the following attributes: Name, Address, Email, Phone, Gender.", "output": "CREATE DATABASE customerDB;\n\nUSE customerDB;\n\nCREATE TABLE customers (\nid INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\nname VARCHAR(50) NOT NULL,\naddress VARCHAR(50) NOT NULL,\nemail VARCHAR(50) NOT NULL,\nphone VARCHAR(20) NOT NULL,\ngender VARCHAR(10) NOT NULL\n);", "category": "Python"}, {"instruction": "Create a program for sorting a given array in O(n) time complexity.", "input": "", "output": "def sort_array(arr):\n    n = len(arr) \n    for i in range(n): \n        min_idx = i \n        for j in range(i+1, n): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n    return arr", "category": "Python"}, {"instruction": "Create a class constructor to initialize the values of a person.", "input": "", "output": "class Person:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n\nperson1 = Person(\"John\", 25, \"Male\")", "category": "Python"}, {"instruction": "What is the most efficient way to iterate through a list of dictionaries in Python?", "input": "", "output": "The most efficient way to iterate through a list of dictionaries in Python is to use the \"for-in\" loop. This loop iterates over the elements of the list and accesses the values of the dictionary using the \"key\" argument. The syntax would be: for item in list: do_something(item[key]).", "category": "Python"}, {"instruction": "What is the Python library used to parse a JSON string?", "input": "", "output": "The Python library used to parse a JSON string is json. The json library provides functions for encoding and decoding a JSON string. The syntax for decoding would be: json.loads(data). The syntax for encoding would be: json.dumps(data).", "category": "Python"}, {"instruction": "How can you search for and replace a string with a substring in Python?", "input": "", "output": "You can search for and replace a string with a substring in Python by using the \"replace\" method. The syntax would be: string.replace(\"string_to_be_replaced\", \"new_string\"). For example: \"Hello, world\".replace(\"world\", \"there\") would return \"Hello, there\".", "category": "Python"}, {"instruction": "Print the name of the day depending on the given integer.", "input": "day = 0", "output": "def get_name_of_day(day):\n    days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n    \n    if day >= 0 and day <= 6:\n        return days[day]\n    else:\n        return None", "category": "Python"}, {"instruction": "String concatenation is the process of combining two individual strings into one. Write a Python program to concatenate two strings using the + operator.", "input": "str1 = 'Hello'\nstr2 = 'World'", "output": "def concatenate(str1, str2):\n    return str1 + str2\n\nprint (concatenate(str1, str2))", "category": "Python"}, {"instruction": "Write a function to sort the elements of a list based on their frequency.", "input": "arr = [2, 5, 9, 8, 8, 5, 9, 2]", "output": "def frequencySort(arr): \n    eleFreq = {} \n    sortedList = [] \n  \n    # Create a dictionary with frequency of element as key and element as value\n    for i in arr: \n        if i in eleFreq: \n            eleFreq[i] += 1\n        else: \n            eleFreq[i] = 1\n  \n    # Sort the dictionary \n    sortedFreq = sorted(eleFreq.items(), key = lambda eleFreq: eleFreq[1], reverse = True) \n  \n    # Store the elements in an output list with the same frequency \n    for i in sortedFreq: \n        sortedList.extend([i[0]] * i[1])\n  \n    return sortedList", "category": "Python"}, {"instruction": "Use a ternary operator to print \"Yes\" if the number is positive and \"No\" if the number is negative.", "input": "x=3", "output": "result = (x > 0) ? \"Yes\" : \"No\"\nconsole.log(result) // Output: Yes", "category": "Python"}, {"instruction": "Create a code to read a textfile line by line and print out the lines that have the word \"Python\".", "input": "", "output": "with open('textfile.txt') as f:\n    for line in f:\n        if 'Python' in line:\n            print(line)", "category": "Python"}, {"instruction": "Create a permutation of characters in a string.", "input": "str = \"CAT\"", "output": "def permutation(str):\n    if len(str) == 0: \n        return [''] \n    prev_list = permutation(str[1:len(str)]) \n    next_list = [] \n    for i in range(0,len(prev_list)): \n        for j in range(0,len(str)): \n            new_str = prev_list[i][0: j]+str[0]+prev_list[i][j: len(str)-1] \n            if new_str not in next_list: \n                next_list.append(new_str) \n    return next_list\n\n# Test\nstr = 'CAT'\nperm = permutation(str)\n\n# Output\nprint(perm)\n# ['CAT', 'CTA', 'ACT', 'ATC', 'TCA', 'TAC']", "category": "Python"}, {"instruction": "What do the following two lines of code do?", "input": "string.replace('old', 'new')\nstring.rstrip()", "output": "The first line of code is used to replace all occurrences of \"old\" with \"new\" in string. The second line of code is used to strip all trailing whitespace from the string.", "category": "Python"}, {"instruction": "Add AJAX functionalities to the following HTML document.", "input": "<!DOCTYPE html>\n<html>\n<head>\n<title>AJAX Example</title>\n</head>\n<body>\n\n</body>\n</html>", "output": "<!DOCTYPE html>\n<html>\n<head>\n<title>AJAX Example</title>\n<script>\nfunction loadData(){\n    var xhttp = new XMLHttpRequest();\n    xhttp.onreadystatechange = function() {\n      if (this.readyState == 4 && this.status == 200) {\n        document.getElementById(\"data\").innerHTML = this.responseText;\n      }\n    };\n    xhttp.open(\"GET\", \"data.txt\", true);\n    xhttp.send();\n  }\n</script>\n</head>\n<body>\n\n<h2>AJAX Example</h2>\n<div id=\"data\">AJAX will place the data here</div>\n<button type=\"button\" onclick=\"loadData()\">Load data</button>\n\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a JavaScript function to get the current day of the month.", "input": "", "output": "//Function to get the current day of the month\nfunction getCurrentDay() {\n    let today = new Date();\n    return today.getDate();\n}\n\nconsole.log(getCurrentDay());", "category": "Python"}, {"instruction": "Create a Java program to read in a number n, and print out the first n lines of Pascal's triangle.", "input": "n = 5", "output": "import java.util.Scanner;\n\npublic class PascalTriangle {\n\n\tpublic static void main(String[] args) {\n\n\t\t// Read in the number of lines\n\t\tSystem.out.println(\"Enter the number of lines: \");\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\t\n\t\t// Print out pascal triangle\n\t\tfor(int line = 0; line < n; line++) {\n\t\t\t\n\t\t\t// Print out white spaces\n\t\t\tfor(int i = 0; i < (n - (line+1)); i++) {\n\t\t\t\tSystem.out.print(\" \");\n\t\t\t}\n\t\t\t\n\t\t\t// Create row for pascal triangle\n\t\t\tlong num = 1;\n\t\t\tfor(int i = 0; i <= line ; i++) {\n\t\t\t\tSystem.out.print(num + \" \");\n\t\t\t\tnum = num * (line - i) / (i + 1);\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\n}", "category": "Python"}, {"instruction": "Create a regex string to find all words that contain the letters 'a' and 'z' in them.", "input": "", "output": "import re\n\npattern = r'\\b[a-zA-Z]*a[a-zA-Z]*z[a-zA-Z]*\\b'\n\nwords = re.findall(pattern, \"The quick brown fox jumped over the lazy dog\")\n\nfor word in words:\n    print(word)", "category": "Python"}, {"instruction": "Explore the data_df dataframe and build a visualization that answers the following question: what is the correlation between number of tweets sent and positive sentiment?", "input": "data_df: DataFrame containing columns such as n_tweets,pos_sentiment", "output": "import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Explore data\nsns.pairplot(data_df, hue='pos_sentiment')\nplt.show()\n\n# Fit a regression line\nsns.regplot(x=\"n_tweets\", y=\"pos_sentiment\", data=data_df)\nplt.xlabel('Number of Tweets')\nplt.ylabel('Positive Sentiment')\nplt.show()", "category": "Python"}, {"instruction": "Create a machine learning model to predict the probability of a patient having a certain type of cancer.", "input": "features = [Height, Weight, Age, Gender]", "output": "import numpy as np\nimport pandas as pd\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# read in the data\ndf = pd.read_csv('data.csv')\n\n# separate the features and labels\nX = df.drop('cancer', axis=1)\ny = df['cancer']\n\n# split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# create a support vector machine model\nmodel = SVC()\n\n# fit the model on the data\nmodel.fit(X_train, y_train)\n\n# make predictions\npredictions = model.predict(X_test)\n\n# measure the accuracy of the model\nscore = accuracy_score(y_test, predictions)\nprint(score)", "category": "Python"}, {"instruction": "Create an Angular component named \"FormInput\" with a text field and a submit button.", "input": "", "output": "import { Component } from '@angular/core';\n\n@Component({\n selector: 'form-input',\n template: `\n <form>\n  <input type=\"text\" id=\"textInput\" />\n  <button type=\"submit\">Submit</button>\n </form>\n `\n})\nexport class FormInput {\n\n}", "category": "Python"}, {"instruction": "Write a Java code snippet to create an array of integers of length 5.", "input": "", "output": "int[] intArray = new int[5];", "category": "Python"}, {"instruction": "Create a Node.js web server that responds to an HTTP GET request with a simple \"Hello, World!\" message.", "input": "", "output": "const http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello, World!');\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});", "category": "Python"}, {"instruction": "Create a Mastermind game in any language of your choice.", "input": "", "output": "#include <iostream>\n#include <vector>\n#include <cstdlib>\n#include <ctime>\n \nusing namespace std;\n \nint main() {\n \nsrand(time(0));\n \n//define random numbers to be guessed\nint max_limit = 6;\nvector<int> ans;\nfor (int i = 0; i < 4; i++) {\n ans.push_back((rand() % max_limit) + 1);\n}\n \nint attempts = 0;\nwhile (true) {\n //Take input from user\n int num;\n int i = 0;\n cout << \"Guess a 4 digit number: \";\n while (i < 4) {\n  cin >> num;\n  ans[i] = num;\n  i++;\n }\n \n //Check input against random answer\n int correctplace = 0;\n int wrongplace = 0;\n for (i = 0; i < 4; i++) {\n  int j = 0;\n  while (j < 4) {\n   if (ans[i] == ans[j] && i == j)\n    correctplace++;\n   else if (ans[i] == ans[j])\n    wrongplace++;\n   j++;\n  }\n }\n \n attempts++;\n \n if (correctplace == 4) {\n  cout << \"You win in \" << attempts << \" attempts.\";\n  break;\n }\n else\n  cout << \"Wrong place: \" << wrongplace << \"    Correct place: \" << correctplace << endl;\n}\nreturn 0;\n}", "category": "Python"}, {"instruction": "Create a basic CSS style sheet to set a color and font size for the <h1> element.", "input": "color = #000000\nfont_size = 16px", "output": "h1 {\n  color:#000000;\n  font-size:16px;\n}", "category": "Python"}, {"instruction": "Create a simple Python script to print the first 10 prime numbers.", "input": "", "output": "prime_numbers = [] \nfor num in range(1, 11):   \n   if num > 1:  \n       for i in range(2, num):  \n           if (num % i) == 0:  \n               break  \n       else:  \n           prime_numbers.append(num)\n  \nprint(prime_numbers)", "category": "Python"}, {"instruction": "Write a SQL query to find the average salary from from the table \"Employees\" in a database named \"CompanyDB\".", "input": "", "output": "SELECT AVG(salary) \nFROM CompanyDB.Employees;", "category": "Python"}, {"instruction": "Write a PHP function named \"calculateArea\" to calculate the area of a rectangle.", "input": "length = 10\nwidth = 20", "output": "<?php\n  function calculateArea($length,$width){\n    return $length * $width;\n}\n \necho calculateArea(10,20);\n?>", "category": "Python"}, {"instruction": "Create an SQL query to select all columns from the table \"Employees\" in a database named \"CompanyDB\".", "input": "", "output": "SELECT *\nFROM CompanyDB.Employees;", "category": "Python"}, {"instruction": "Write a PHP program to print a Christmas tree on the console.", "input": "", "output": "<?php \n    //Printing the christmas tree\n    $height = 5; \n  \n    // Looping through rows \n    for ($i = 1; $i <= $height; $i++) \n    { \n        // Print Spaces \n        for ($k = $height; $k > $i; $k--) \n        { \n            echo \" \"; \n        } \n  \n        // Print Stars \n        for ($j = 1; $j <= (2 * $i - 1); $j++) \n        { \n            echo \"*\"; \n        } \n          \n        // Move to the next row \n        echo \"\\n\"; \n    } \n    // Printing the stand\n    // Print Spaces \n    for ($i = 1; $i <= $height - 1; $i++) \n    { \n        echo \" \";\n    } \n  \n    // Printing the stand \n    echo \"*\\n\"; \n?>", "category": "Python"}, {"instruction": "Given a large string S, find the total number of occurrences of a pattern p in S.", "input": "S = \u201cMississippi\u201d, p = \u201csi\u201d", "output": "//Function to find the total number of occurrences of a pattern p in a large string S\nfunction findOccurrences(S, p) { \n    let count = 0;\n    let initialIndex = 0;\n    while (S.indexOf(p, initialIndex) !== -1) {\n        initialIndex = S.indexOf(p, initialIndex) + 1;\n        count++;\n    }\n    console.log(count);\n} \n\nfindOccurrences('Mississippi', 'si'); \n//Output: 2", "category": "Python"}, {"instruction": "Create a HTML page to show a list of employees, their departments and corresponding salary ranges.", "input": "John Doe - Sales - 35000 - 50000\nJane Doe - Marketing - 40000 - 65000", "output": "<html>\n  <head>\n    <title>Employees</title>\n  </head>\n  <body>\n    <h1>Employees</h1>\n    <ul>\n      <li>John Doe - Sales - 35000 - 50000</li>\n      <li>Jane Doe - Marketing - 40000 - 65000</li>\n    </ul>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write  a  JavaScript  function  to  extract  a  specified number of characters from a string.", "input": "String: hello world\nNumber: 5", "output": "function extractChars(str, num){\n    return str.substring(0, num);\n}\n\nvar str = \"hello world\";\nvar output = extractChars(str, 5);\n\nconsole.log(output); // Output: hello", "category": "Python"}, {"instruction": "Design a data structure for efficiently finding the closest input to a given input in a set of inputs.", "input": "", "output": "An efficient data structure for finding the closest element to a given element in a set of elements is the KD Tree. The KD Tree is a space-partitioning data structure for organizing points in a k-dimensional space and taking advantage of their spacial locality. A KD Tree is a binary tree with each node containing a set of coordinates, or an element, and the corresponding subtree referring to elements closer to the coordinates of the current node in the tree. By recursively dividing the space into smaller parts, the search time for a specific element or coordinates can be significantly reduced, making finding the closest element a much faster process.", "category": "Python"}, {"instruction": "How can you check if a string is a substring of another string in Python?", "input": "", "output": "You can check if a string is a substring of another string in Python by using the \"in\" operator. For example, if you want to check if the string \"hello\" is a substring of a variable called \"my_string\", you can do:\n\nif 'hello' in my_string:\n    # do something", "category": "Python"}, {"instruction": "Generate a JavaScript code which converts an array of integers to an array of Strings.", "input": "[1,2,3,4,5]", "output": "let arr = [1,2,3,4,5];\nlet arrString = arr.map(String);  // ['1','2','3','4','5']", "category": "Python"}, {"instruction": "Generate a C++ code with a loop from 0 to 20 which prints odd numbers only.", "input": "", "output": "for(int i=0; i<=20; i++)\n{\n if (i%2 != 0)\n    std::cout << i <<\"\\n\";\n}", "category": "Python"}, {"instruction": "Write a JSON string containing a list of three employee names.", "input": "", "output": "{\"employees\": [\"John\", \"Mike\", \"Sarah\"]}", "category": "Python"}, {"instruction": "Given two arrays of integers, find the common elements.", "input": "arr1 = [1, 2, 3, 4, 5]; arr2 = [4, 5, 6, 7, 8]", "output": "def common_elements(arr1, arr2):\n    common = []\n    for item in arr1:\n        if item in arr2:\n            common.append(item)\n\n    return common", "category": "Python"}, {"instruction": "Compute the n-th Fibonacci number.", "input": "", "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    \n    if n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Print all powers of 2 less than or equal to n.", "input": "n = 10", "output": "def power_of_2(n): \n    res = []\n    for i in range(n+1):\n        if i & (i-1) == 0:\n            res.append(i)\n        \n    return res", "category": "Python"}, {"instruction": "Create a GraphQL API to serve data from a database in Python.", "input": "", "output": "The GraphQL API should use Python's Graphene library to create the schema. The API should have a root query and necessary fields, as well as a Global ID and Node interface for each of the database's tables. The API should also support CRUD operations, enabling the clients to query or modify the database tables.", "category": "Python"}, {"instruction": "Output all numbers between 1 to 5 except for 3 using Python.", "input": "", "output": "for x in range(1, 6):\n    if x != 3:\n        print(x)", "category": "Python"}, {"instruction": "Create an HTML page with a header containing the text \"Welcome to our website\".", "input": "", "output": "<html>\n<head><title>Welcome to our website</title></head>\n    <body>\n        <h1>Welcome to our website</h1>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Create a constructor object in JavaScript to represent a student.", "input": "", "output": "function Student(name,class,roll_no){\n    this.name=name;\n    this.class=class;\n    this.roll_no=roll_no;\n    \n    return this;\n}", "category": "Python"}, {"instruction": "Implement an algorithm in Python to find the size of a Binary tree.", "input": "", "output": "def size(node): \n    if node is None: \n        return 0\n    else: \n        return (size(node.left) + 1 + size(node.right))", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to create a loop using an array.", "input": "let arr = [1, 2, 3, 4, 5]", "output": "for (let i = 0; i < arr.length; i++) {\n    console.log(arr[i]);\n}", "category": "Python"}, {"instruction": "Create an object syntax in JavaScript to represent an animal.", "input": "", "output": "let animal = {\n    name: '',\n    type: '',\n    sound: ''\n}", "category": "Python"}, {"instruction": "Write a Java statement to convert an int to float.", "input": "int x = 10;", "output": "float y = (float)x;", "category": "Python"}, {"instruction": "Write a Python function that prints out a staircase pattern.", "input": "", "output": "def staircase(n): \n    for i in range(1, n + 1): \n        for j in range(1, n + 1): \n            if (j <= (n - i)):   \n                print(end=\"\\t\") \n            else: \n                print(\"#\\t\", end=\"\") \n        print()", "category": "Python"}, {"instruction": "Write a code to convert all the letters of a string to lowercase.", "input": "Input string: \"HELLO WORLD\"", "output": "def lowercase_string(input_str):\n    output_str = \"\"\n    \n    for char in input_str:\n        output_str += char.lower()\n    return output_str\n\nif __name__ == '__main__':\n    print(lowercase_string(\"HELLO WORLD\"))", "category": "Python"}, {"instruction": "Create a React application with a registration form.", "input": "", "output": "The React application should have a registration form that includes fields for the user's name, email address, password and repeat password. The form should also display an appropriate message when the user provides invalid input or leaves a particular field blank. Additionally, the form should also display a \"Submit\" button to submit the user data to a database.", "category": "Python"}, {"instruction": "Quantify sentiment for the following sentence.", "input": "Sentence: She was content with the results.", "output": "The sentiment for the sentence is positive with an accuracy of 70%.", "category": "Python"}, {"instruction": "Change the following HTML page to an Angular web page.", "input": "<html>\n<head>\n  <title>TITLE</title>\n</head>\n<body>\n  <h1>HEADER</h1>\n  <p>Paragraph</p>\n</body>\n</html>", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>TITLE</title>\n    <script src=\"https://unpkg.com/@angular/core@8.2.14/bundles/core.umd.js\"></script>\n    <script src=\"https://unpkg.com/@angular/common@8.2.14/bundles/common.umd.js\"></script>\n    <script src=\"https://unpkg.com/@angular/platform-browser@8.2.14/bundles/platform-browser.umd.js\"></script>\n    <script src=\"https://unpkg.com/@angular/platform-browser-dynamic@8.2.14/bundles/platform-browser-dynamic.umd.js\"></script>\n  </head>\n  <body>\n    <h1>HEADER</h1>\n    <app-root>Paragraph</app-root>\n    <script>\n      //This will handle the rendering of the Angular app\n      platformBrowserDynamic().bootstrapModule(AppModule);\n    </script>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Explain what TypeScript is.", "input": "", "output": "TypeScript is an open-source programming language developed and maintained by Microsoft. It is a typed superset of JavaScript that compiles to plain JavaScript, and is further designed for developing large applications. In addition, TypeScript supports object-oriented programming features such as classes, methods, interfaces, and more.", "category": "Python"}, {"instruction": "Write a SQL query to select all employees from the department with the code 'IT'.", "input": "", "output": "SELECT *\nFROM Employees\nWHERE departmentCode = 'IT';", "category": "Python"}, {"instruction": "Edit the CSS code to change the font size to 20 pixels.", "input": "p {\n  font-size: 14px;\n}", "output": "p {\n  font-size: 20px;\n}", "category": "Python"}, {"instruction": "Write a R code to create a vector with a sequence of 15 numbers starting at 4 and ending at 24.", "input": "", "output": "x <- 4:24", "category": "Python"}, {"instruction": "Use set operations to obtain the intersection of two given sets.", "input": "SetA = {1, 2, 3, 4}\nSetB = {2, 4, 6, 8}", "output": "intSetA = new HashSet<Integer>();\nintSetA.addAll(Arrays.asList(1, 2, 3, 4));\n\nintSetB = new HashSet<Integer>();\nintSetB.addAll(Arrays.asList(2, 4, 6, 8));\n\nintSetA.retainAll(intSetB);\n\nSystem.out.println(\"Intersection of SetA and SetB is \" + intSetA);\n\n// Output: Intersection of SetA and SetB is [2, 4]", "category": "Python"}, {"instruction": "Identify the salient feature in the given piece of code.", "input": "def func(x, y):\n    z = x + y\n    print(z)\n    return x - y", "output": "The salient feature of the given code is that it both prints a result and returns a value.", "category": "Python"}, {"instruction": "Using the given code snippet, reverse the words of the string.", "input": "string = \"this is a string\"", "output": "words = string.split(' ')\nreversed_words = words[::-1]\nreversed_string = ' '.join(reversed_words)", "category": "Python"}, {"instruction": "Write a code snippet to print out \"Hello World\" ten times.", "input": "", "output": "for(var i = 0; i < 10; i++) {\n    console.log(\"Hello World\");\n}", "category": "Python"}, {"instruction": "Create a function that prints the multiplication table for a provided integer", "input": "x = 8", "output": "def print_multiplication_table(x):\n  for i in range(1, 11):\n    ans = i*x\n    print(f\"{i} x {x} = {ans}\")\n\nprint_multiplication_table(x)", "category": "Python"}, {"instruction": "Given an array containing words and a string, find the shortest word in the array that is a substring of the string", "input": "words = [\"apple\", \"banana\", \"cat\", \"dog\"], string = \"aquickbrownfoxjumpsoverthelazydog\"", "output": "\"\"\"\nGiven an array containing words and a string, find the shortest word in the array that is a substring of the string.\n\"\"\"\n\ndef find_shortest_substring(words, string): \n    min_length = float(\"inf\")\n    min_word = None\n    for word in words:\n        j = string.find(word)\n        if j>-1 and len(word)<min_length:\n            min_length = len(word)\n            min_word = word\n    return min_word\n\nif __name__ == '__main__': \n    words = [\"apple\", \"banana\", \"cat\", \"dog\"]\n    string = \"aquickbrownfoxjumpsoverthelazydog\"\n    print(find_shortest_substring(words, string))", "category": "Python"}, {"instruction": "Given an array of English words, find any word which is an anagram of another word in the same array.", "input": "[\"listen\", \"pot\", \"part\", \"opt\", \"trap\", \"silent\", \"top\"]", "output": "\"\"\"\nGiven an array of English words, find any word which is an anagram of another word in the same array.\n\"\"\"\n\ndef find_anagrams(words):\n    anagrams = [] \n    for i in range(len(words)): \n        for j in range(i+1, len(words)): \n            if (sorted(words[i]) == sorted(words[j])): \n                anagrams.append((words[i],words[j])) \n    return anagrams\n\nif __name__ == '__main__':\n    words = [\"listen\", \"pot\", \"part\", \"opt\", \"trap\", \"silent\", \"top\"]\n    print(find_anagrams(words))", "category": "Python"}, {"instruction": "Edit the following code to make it terminate in a finite number of steps", "input": "def foo():\n    while True:\n        print(\"Hello\")", "output": "\"\"\"\nEdit the following code to make it terminate in a finite number of steps.\n\"\"\"\n\ndef foo():\n    for _ in range(10):\n        print(\"Hello\")", "category": "Python"}, {"instruction": "Write code to check if a given string contains only alpha-numeric characters.", "input": "Hello World!", "output": "\"\"\"\nWrite code to check if a given string contains only alpha-numeric characters.\n\"\"\"\n\ndef is_alnum(string):\n    return string.isalnum()\n\nif __name__ == '__main__': \n    string = 'Hello World!'\n    print(is_alnum(string))", "category": "Python"}, {"instruction": "given a sentence, classify it into positive or negative sentiment.", "input": "I can't wait to get home and relax.", "output": "positive", "category": "Python"}, {"instruction": "Implement the Levenshtein distance algorithm in Python.", "input": "", "output": "\"\"\"\nImplementing the Levenshtein distance algorithm in Python\n\"\"\"\n\ndef levenshtein(word1, word2):\n    \"\"\"Calculate the Levenshtein distance between two words\"\"\"\n    size_x = len(word1) + 1\n    size_y = len(word2) + 1\n    matrix = [[0 for i in range(size_x)] for j in range(size_y)] \n    for x in range(size_x):\n        matrix[0][x] = x\n    for y in range(size_y):\n        matrix[y][0] = y\n\n    for x in range(1, size_x):\n        for y in range(1, size_y):\n            if word1[x-1] == word2[y-1]:\n                matrix[y][x] = min(\n                    matrix[y-1][x] + 1,\n                    matrix[y-1][x-1],\n                    matrix[y][x-1] + 1\n                )\n            else:\n                matrix[y][x] = min(\n                    matrix[y-1][x] + 1,\n                    matrix[y-1][x-1] + 1,\n                    matrix[y][x-1] + 1\n                )\n\n    return matrix[size_y-1][size_x-1]", "category": "Python"}, {"instruction": "Explain the use of webhooks in server-side applications", "input": "", "output": "Webhooks are useful for server-side applications as they allow programs to receive real-time updates from external services. Instead of the application periodically polling for changes, webhooks allow for the external service to make an HTTP POST request to the application each time an event occurs. This provides a more efficient way of sending notifications as the application is only notified when there are new events. This approach is particularly popular with applications that integrate with third-party services.", "category": "Python"}, {"instruction": "Replance the character on odd index positions with '#'.", "input": "\"Hello World!\"", "output": "\"\"\"\nReplace the character on odd index positions with '#'.\n\"\"\"\n\ndef add_pound_signs(string):\n    result_string = \"\"\n    for i in range(len(string)):\n        if i % 2 == 1:\n            result_string += \"#\"\n        else:\n            result_string += string[i]\n    return result_string\n\nif __name__ == '__main__': \n    string = \"Hello World!\"\n    print(add_pound_signs(string))", "category": "Python"}, {"instruction": "Generate a code to extract the key-value pairs from a JSON string", "input": "", "output": "def extract_key_value_pairs(json_string):\n    data = json.loads(json_string)\n    \n    key_value_pairs = {}\n    \n    for key,value in data.items():\n        key_value_pairs[key] = value\n        \n    return key_value_pairs", "category": "Python"}, {"instruction": "Create an HTML page with an <h1> heading \"Welcome!\" and a <p> paragraph with the text \"I am happy to be here.\"", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n   <title>Welcome!</title>\n</head>\n<body>\n   <h1>Welcome!</h1>\n   <p>I am happy to be here.</p>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a code snippet to print out the elements of an array of integers, separated by a comma.", "input": "array = [2, 4, 6, 8]", "output": "for (let i=0; i<array.length; i++) {\n    if (i < array.length-1) {\n        console.log(array[i] + \",\");\n    } else {\n        console.log(array[i]);\n    }\n }", "category": "Python"}, {"instruction": "Create a web API in Node.js which can fetch and extract data from a website.", "input": "", "output": "The web API should be able to perform web scraping and screen scraping of webpages. It should accept a URL as input, fetch the content and parse it to extract the relevant data. The API should expose this data to the user in either a JSON or XML format. Additionally, the API should also provide optional parameters to control how and which data to extract from the webpage.", "category": "Python"}, {"instruction": "Perform sentiment analysis on the given sentence.", "input": "Sentence: She shoved the latest game console into her shopping cart.", "output": "The sentiment in the sentence is positive.", "category": "Python"}, {"instruction": "Create a Newsfeed Aggregator Django web application that displays the latest news from different sources.", "input": "", "output": "The Django web application should have the following components: a) a simple UI with a newsfeed list, b) a view to fetch news items from different sources, c) a web scraper to fetch web pages and presenting them on the newsfeed list, d) a database to store news items, and e) a settings page to add or change sources of the news items. Additionally, the newsfeed list should also allow users to filter the news items based on topics, sources, and titles.", "category": "Python"}, {"instruction": "Make the following changes to a JavaScript program.", "input": "let num1 = 10;\nlet num2 = 8;", "output": "let num1 = 10;\nlet num2 = 8;\nlet sum = num1 + num2;\nconsole.log(sum); // Output will be 18.", "category": "Python"}, {"instruction": "Construct a code to find the sum of all elements in a given 2D matrix", "input": "matrix = [[1, 2, 3],[4, 5, 6],[7, 8, 9]]", "output": "def sum_elements(matrix):\n    result = 0\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            result = result + matrix[i][j]\n    return result\n\nprint(sum_elements(matrix))", "category": "Python"}, {"instruction": "Write a bash script to echo the user's current working directory.", "input": "", "output": "#!/bin/bash\necho \"Your current working directory is: $(pwd)\"", "category": "Python"}, {"instruction": "Compute 2 to the 3rd power using Python.", "input": "", "output": "result = 2 ** 3\nprint(result)  # Outputs 8", "category": "Python"}, {"instruction": "What is the purpose of a pivot table in Excel?", "input": "", "output": "The purpose of a pivot table in Excel is to summarize and analyze data. It can quickly summarize large amounts of data and create useful summaries with a few clicks. Pivot tables are useful for quickly analyzing data in different ways, such as sorting and filtering, and deriving meaningful insights.", "category": "Python"}, {"instruction": "Rewrite the following function to use a ternary operator instead.", "input": "function calculateTip(bill) {\n  if (bill < 50) {\n    return bill * 0.2;\n  } else {\n    return bill * 0.15;\n  }\n}", "output": "function calculateTip(bill) {\n  return (bill < 50 ? bill * 0.2 : bill * 0.15);\n}", "category": "Python"}, {"instruction": "Construct an array of size 10 to store integers in Java.", "input": "", "output": "int[] array = new int[10];", "category": "Python"}, {"instruction": "Write an R script to generate a random number sequence between 1 and 10.", "input": "", "output": "result <- sample(1:10, 10, replace = TRUE)\n print(result)", "category": "Python"}, {"instruction": "Create a PHP script to generate a multiplication table until 10.", "input": "", "output": "<?php\n echo \"<table border=\\\"1\\\">\";\n for($i = 1; $i <= 10; $i++ ) {\n  echo \"<tr>\";\n  for($j = 1; $j <= 10; $j++ ) {\n   echo \"<td>\".$i * $j.\"</td>\";\n  }\n  echo \"</tr>\";\n }\n echo \"</table>\";\n?>", "category": "Python"}, {"instruction": "Create a Javascript function to convert an array of integers into a new array of strings.", "input": "[3, 6, 9]", "output": "function intToString(arr){\n  var strings = [];\n  for(let i = 0; i < arr.length; i++) {\n    strings.push(arr[i].toString());\n  }\n   return strings;\n}", "category": "Python"}, {"instruction": "What is a 2D array?", "input": "", "output": "A 2D array (or two-dimensional array) is an array of arrays, meaning it is a collection of elements which are themselves arrays. Each element in the 2D array can be thought of as a row, and the elements inside that row can be thought of as columns. The elements all have the same data type.", "category": "Python"}, {"instruction": "Write the code to set a global variable in JavaScript.", "input": "", "output": "window.globalVariable = \"value\";", "category": "Python"}, {"instruction": "What does the acronym \"CSS\" stand for?", "input": "", "output": "CSS stands for \"Cascading Style Sheets\", which is a style sheet language used for describing the presentation of a webpage written in HTML or XML.", "category": "Python"}, {"instruction": "Change the following code to make the \"Hello World\" message appear in bold.", "input": "<p>Hello World</p>", "output": "<p><bold>Hello World</bold></p>", "category": "Python"}, {"instruction": "Write a SQL query that returns the names of people who have a higher salary than their manager", "input": "", "output": "SELECT e1.name\nFROM Employee e1\nJOIN Employee e2 ON e1.manager_id = e2.id \nWHERE e1.salary > e2.salary", "category": "Python"}, {"instruction": "Create a function to determine if a String contains a valid US phone number", "input": "", "output": "def isValidPhoneNumber(s):\n    # strip all the non-numeric characters\n    nums = ''.join(filter(str.isalnum, s))\n    \n    # ensure it is 10 digits long\n    if len(nums) != 10:\n        return False\n    \n    # ensure the last 7 digits are valid\n    if nums[3:10] in set('2', '3', '4', '5', '6', '7', '8', '9'):\n        return False\n    \n    # ensure first 3 digits are valid\n    area_codes = set('201', '202', '203', '205', '206', '207', '208', '209', \n                     '210', '212', '213', '214', '215', '216', '217', '218',\n                     '219', '224', '225', '226', '228', '229', '231', '234',\n                     '239', '240', '242', '244', '245', '248', '250', '251', \n                     '252', '253', '254', '256', '260', '262', '264', '267', \n                     '268', '269', '270', '276', '281', '284', '289', '301', \n                     '302', '303', '304', '305', '306', '307', '308', '309', \n                     '310', '312', '313', '314', '315', '316', '317', '318',\n                     '319', '320', '321', '323', '330', '331', '334', '336',\n                     '337', '339', '340', '347', '351', '352', '360', '362',\n                     '386', '401', '402', '403', '404', '405', '406', '407',\n                     '408', '409', '410', '412', '413', '414', '415', '417',\n                     '418', '419', '423', '424', '425', '430', '431', '432',\n                     '434', '435', '440', '441', '443', '450', '468', '473',\n                     '478', '479', '480', '484', '501', '502', '503', '504', \n                     '505', '506', '507', '508', '509', '510', '512', '513', \n                     '515', '516', '517', '518', '519', '520', '530', '540', \n                     '541', '551', '557', '559', '561', '562', '563', '564', \n                     '567', '570', '571', '573', '574', '580', '585', '586', \n                     '601', '602', '603', '605', '606', '607', '608', '609', \n                     '610', '612', '614', '615', '616', '617', '618', '619', \n                     '620', '623', '626', '628', '630', '631', '636', '641', \n                     '646', '650', '651', '661', '662', '678', '681', '682', \n                     '701', '702', '703', '704', '705', '706', '707', '708', \n                     '712', '713', '714', '715', '716', '717', '718', '719', \n                     '720', '724', '725', '727', '731', '732', '734', '737', \n                     '740', '754', '757', '758', '760', '762', '763', '765', \n                     '769', '770', '772', '773', '774', '775', '778', '780', \n                     '781', '784', '785', '786', '787', '801', '802', '803', \n                     '804', '805', '806', '807', '808', '809', '810', '812', \n                     '813', '814', '815', '816', '817', '818', '828', '830', \n                     '831', '832', '843', '845', '847', '848', '850', '856', \n                     '857', '858', '859', '860', '862', '863', '864', '865', \n                     '870', '872', '878', '901', '903', '904', '906', '907', \n                     '908', '909', '910', '912', '913', '914', '915', '916', \n                     '917', '918', '919', '920', '925', '927', '928', '931',\n                     '936', '937', '940', '941', '947', '949', '951', '952', \n                     '954', '956', '970', '971', '972', '973', '978', '979', \n                     '980', '984', '985', '989')\n    if nums[:3] not in area_codes:\n        return False\n\n    return True", "category": "Python"}, {"instruction": "Develop a function to replace all consecutive whitespaces in a given string with a single space.", "input": "", "output": "def collapse_whitespace(str):\n    return ' '.join([x for x in str.split(' ') if x != ''])", "category": "Python"}, {"instruction": "Output the greatest number from a list of numbers.", "input": "number_list = [4, 8, 15, 16, 23, 42]", "output": "print(max(number_list))", "category": "Python"}, {"instruction": "Write a function that takes two lists as parameters, and returns a third list, containing the elements that occur on both the given lists.", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [2, 3, 4, 5, 6]", "output": "def common_elements(lst1, lst2):\n    common = []\n    for i in range(len(lst1)):\n        if lst1[i] in lst2:\n            common.append(lst1[i])\n    return common\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [2, 3, 4, 5, 6]\n    print(common_elements(list1, list2))", "category": "Python"}, {"instruction": "Outpus the sum of two integer variables.", "input": "a = 5\nb = 10", "output": "15", "category": "Python"}, {"instruction": "Create a python script to filter a list of words, and return only those with even length characters.", "input": "word_list = [\"Python\", \"C++\", \"Java\", \"JavaScript\", \"Ruby\"]", "output": "def even_length_words(word_list):\n    even_words = []\n    for word in word_list:\n        if len(word) % 2 == 0:\n            even_words.append(word)\n    return even_words\n    \nif __name__ == '__main__':\n    print(even_length_words(word_list))", "category": "Python"}, {"instruction": "Generate a Python generator to produce a sequence of the first N numbers", "input": "5", "output": "def my_generator(N):\n    for i in range(N):\n        yield i\n\ng = my_generator(5)\nprint(list(g)) # [0, 1, 2, 3, 4]", "category": "Python"}, {"instruction": "Create a Python script to find the maximum value of a list containing both strings and numbers", "input": "L = [1, 'a', 4, 3, 'b', 6, 'c']", "output": "L = [1, 'a', 4, 3, 'b', 6, 'c']\n\ndef Max_in_List(L):\n    max_num = 0\n    for item in L:\n        if type(item) == int and item > max_num:\n            max_num = item\n    return max_num\n\nprint(Max_in_List(L))", "category": "Python"}, {"instruction": "Create an MySQL query that finds customers whose age is between 18 and 25", "input": "", "output": "SELECT * FROM customers \nWHERE age BETWEEN 18 AND 25;", "category": "Python"}, {"instruction": "Write a Python function using the Pandas library to filter out the rows with a missing value in the specified column.", "input": "Dataframe:\n\nName\tAge\nJohn\t25\nJane\t\nMaria\t30\n\nColumn Name: Age", "output": "import pandas as pd \n   \n# Input Data \ndf = pd.DataFrame({'Name': ['John','Jane','Maria'], \n                   'Age': [25, None, 30]}) \n  \n# Filter the Data \nfiltered_df = df.loc[df['Age'].notnull()]\n\nprint(filtered_df)", "category": "Python"}, {"instruction": "Design a Python script that takes an array of integers and finds the median.", "input": "", "output": "def find_median(arr): \n\tarr.sort() \n\tif len(arr) % 2 != 0: \n\t\treturn arr[len(arr)//2] \n\treturn (arr[(len(arr)//2)-1] + arr[len(arr)//2])/2", "category": "Python"}, {"instruction": "Prepare a Java method which takes a string as an argument and returns the number of vowels in it.", "input": "", "output": "public static int countVowels(String str) { \n\tint count = 0; \n\tfor (int i = 0; i < str.length(); i++) \n\t\tif (str.charAt(i) == 'a' || str.charAt(i) == 'e' || str.charAt(i) == 'i' || \n\t\t\tstr.charAt(i) == 'o' || str.charAt(i) == 'u') \n\t\t\tcount++; \n\treturn count; \n}", "category": "Python"}, {"instruction": "Write an HTML page which displays the current time and date.", "input": "", "output": "<html>\n <body>\n  <p>Today is <span id=\"date\"> </span> and the time is <span id=\"time\"> </span>.</p>\n\n  <script>\n   let d = new Date();\n\n   let date = d.toDateString();\n   document.getElementById(\"date\").innerHTML = date;\n\n   let time = d.toLocaleTimeString();\n   document.getElementById(\"time\").innerHTML = time;\n  </script>\n </body>\n</html>", "category": "Python"}, {"instruction": "Produce a SQL query to find the names and ages of all students who have a score greater than 95.", "input": "", "output": "SELECT Name, Age\nFROM Student \nWHERE Score > 95;", "category": "Python"}, {"instruction": "Modify the given HTML code to make the text bold.", "input": "<p>This is some sample text.</p>", "output": "<p><strong>This is some sample text.</strong></p>", "category": "Python"}, {"instruction": "Create a JavaScript object which contains student information such as name, email and grades.", "input": "Name: John \nEmail: john@example.com \nGrades: A, B, C", "output": "let student = {\n name: \"John\",\n email: \"john@example.com\",\n grades: [\"A\", \"B\", \"C\"]\n}", "category": "Python"}, {"instruction": "Design a function in Java which takes an integer n as an argument and prints the numbers from one to n.", "input": "", "output": "public static void printNumbers(int n) {\n for (int i = 1; i <= n; i++) {\n System.out.print(i + \" \");\n }\n System.out.println(); \n}", "category": "Python"}, {"instruction": "Output the numbers which are divisible by both 10 and 15 from a list of numbers.", "input": "number_list = [10, 15, 20, 25, 30, 35, 40]", "output": "def divisible_by_10_15(number_list):\n    divisible_numbers = []\n    for num in number_list:\n        if num % 10 == 0 and num % 15 == 0:\n            divisible_numbers.append(num)\n    return divisible_numbers\n    \nif __name__ == '__main__':\n    number_list = [10, 15, 20, 25, 30, 35, 40]\n    print(divisible_by_10_15(number_list))", "category": "Python"}, {"instruction": "Output true if a givenstring ends with 'ing', false otherwise.", "input": "my_string = \"I am learning\"", "output": "print(my_string.endswith('ing'))", "category": "Python"}, {"instruction": "Write a JavaScript code to fetch the current weather of any city.", "input": "", "output": "function fetchWeather(city){\n    const url = `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=YOUR_API_KEY`;\n    const response = fetch(url)\n      .then(res => res.json());\n    return response;\n}", "category": "Python"}, {"instruction": "Write a query in SQL that returns the maximum number for each unique category.", "input": "TABLE orders\norder_id INT PK\ncategory VARCHAR\nprice INT", "output": "SELECT \n    category,\n    MAX(price)\nFROM orders\nGROUP BY category;", "category": "Python"}, {"instruction": "Write a Java program to convert a recursively given array of characters to a string.", "input": "['a', 'b', 'c']", "output": "String arrayToString(char[] array) {\n    String s = \"\";\n    for (char c : array) {\n        s += c;\n    }\n    return s;\n}", "category": "Python"}, {"instruction": "You are given a string and a substring. Output the index of the first occurrence of the substring in the string.", "input": "\"Hello World\" and \"Wor\"", "output": "def get_index(text, substring):\n    for i in range(len(text)-len(substring)+1):\n        if text[i:i+len(substring)] == substring:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Write a function to count the number of times a given character is found in an input string.", "input": "\"Hello World\" and \"l\"", "output": "def count_characters(text, char):\n    count = 0\n    for c in text:\n        if c == char:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "You are given a string and a letter. Output a new string where the occurances of the given letter are replaced with its index in the given string.", "input": "\"apple\" and \"l\"", "output": "def replace_letters(text, letter):\n  new_text = \"\"\n  for i, char in enumerate(text):\n    if char == letter:\n       new_text += str(i)\n    else:\n       new_text += char\n  return new_text", "category": "Python"}, {"instruction": "Create an array of nicknames for characters in the Lord of the Rings", "input": "Frodo - Hobbit;\nGandalf - Wizard;\nLegolas - Elf;", "output": "nicknames = {\n    'Frodo': 'Halfling',\n    'Gandalf': 'Grey Wizard',\n    'Legolas': 'Prince of Mirkwood'\n}", "category": "Python"}, {"instruction": "Write a code to compare two numbers in python", "input": "num1= 5\nnum2 = 7", "output": "if num1 < num2: \n    print(\"num1 is smaller than num2\") \nelif num1 > num2: \n    print(\"num1 is greater than num2\") \nelse: \n    print(\"num1 is equal to num2\")", "category": "Python"}, {"instruction": "We want to create a constructor for a person class which takes the name, age and gender of the person as input.", "input": "name = \u201cBob\u201d\nage = 32\ngender = \u201cMale\u201d", "output": "class Person {\n    String name;\n    int age;\n    String gender;\n\n    // constructor\n    public Person(String name, int age, String gender) {\n        this.name = name;\n        this.age = age;\n        this.gender = gender;\n    }\n}", "category": "Python"}, {"instruction": "Write a SQL query to retrieve all records from a table called 'Student' which has the fields 'Name', 'Age' and 'Score'.", "input": "", "output": "SELECT Name, Age, Score\nFROM Student;", "category": "Python"}, {"instruction": "Write a query in SQL to list the most expensive item from each category.", "input": "TABLE items\nitem_id INT PK\ncategory VARCHAR\nprice INT", "output": "SELECT item_id, category, MAX(price) \nFROM items \nGROUP BY category;", "category": "Python"}, {"instruction": "Design an algorithm in Python that takes an array of classmates' age and returns the median age.", "input": "ages = [10, 9, 12, 14, 11]", "output": "def median_age(ages):\n    ages.sort()\n    mid_index = len(ages)//2\n\n    if len(ages)%2 == 0:\n        return (ages[mid_index-1] + ages[mid_index])/2\n    else:\n        return ages[mid_index]", "category": "Python"}, {"instruction": "Code a function in C that takes an integer array and its size as two arguments and returns the average of these numbers.", "input": "array = [1,2,3,4,5]\nsize = 5", "output": "double getAverage(int arr[], int size) \n{ \n    int i; \n    float avg; \n    float sum=0.0; \n  \n    for (i = 0; i < size; ++i) \n    { \n        sum += arr[i]; \n    } \n    avg = sum / size; \n  \n    return avg; \n}", "category": "Python"}, {"instruction": "Develop a code in JavaScript to sort an array of integers into descending order.", "input": "elements = [9,6,5,1,3]", "output": "function descendingOrder(elements) {\n  elements.sort(function(a,b) {\n    return b - a; \n  });\n  return elements;\n}", "category": "Python"}, {"instruction": "Draft an HTML page with a table that contains three columns and two rows.", "input": "", "output": "<html>\n  <head>\n    <title>Table Example</title>\n  </head>\n  <body>\n    <table>\n      <tr>\n        <th>Column 1</th>\n        <th>Column 2</th>\n        <th>Column 3</th>\n      </tr>\n      <tr>\n        <td>Row 1 Data 1</td>\n        <td>Row 1 Data 2</td>\n        <td>Row 1 Data 3</td>\n      </tr>\n      <tr>\n        <td>Row 2 Data 1</td>\n        <td>Row 2 Data 2</td>\n        <td>Row 2 Data 3</td>\n      </tr>\n    </table>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Develop a query in MySQL to find the three customers with the highest number of orders.", "input": "TABLE orders\norder_id INT PK\ncustomer_id INT\nquantity INT", "output": "SELECT customer_id, SUM(quantity) \nFROM orders \nGROUP BY customer_id \nORDER BY SUM(quantity) DESC \nLIMIT 3;", "category": "Python"}, {"instruction": "Design an algorithm in C# which searches for a given element in a sorted array.", "input": "A = [2, 3, 4, 10, 40]\nelement = 10", "output": "int binarySearch (int arr[], int l, int r, int x) \n{ \n    while ( l <= r) \n    { \n        int mid = l + (r-1)/2; \n  \n        if (arr[mid] == x) \n            return mid; \n  \n        if (arr[mid] < x) \n            l = mid + 1; \n  \n        else\n            r = mid - 1; \n    } \n    return -1; \n}", "category": "Python"}, {"instruction": "Create an R script to calculate the correlation between two numerical vectors, x and y.", "input": "x = c(1, 2, 4, 5)\ny = c(2, 4, 6, 10)", "output": "x <- c(1,2,4,5)\ny <- c(2,4,6,10)\ncor(x, y)", "category": "Python"}, {"instruction": "Create a function in R which creates a histogram to visualize a given vector and set the bin size.", "input": "vector = c(2, 3, 5, 6, 12)\nbin_size = 3", "output": "hist(vector, breaks=bin_size, col=\"blue', border=\"white\")", "category": "Python"}, {"instruction": "Write a SQL query to sort a table based on the values in two columns, 'gender' and 'age'.", "input": "", "output": "SELECT * FROM table_name ORDER BY gender ASC, age ASC;", "category": "Python"}, {"instruction": "Given a tree, traverse it in the pre-order manner.", "input": "", "output": "def pre_order_traversal(tree):\n  \n    # Visit the root\n    print(tree.value)\n  \n    # Traverse the left subtree, if it exists\n    if tree.left:\n        pre_order_traversal(tree.left)\n  \n    # Traverse the right subtree, if it exists\n    if tree.right:\n        pre_order_traversal(tree.right)", "category": "Python"}, {"instruction": "Write a function to find the area of a circle when the radius is given in input.", "input": "r = 4", "output": "def area_of_circle(r):\n    area = 3.14 * (r ** 2)\n    return area", "category": "Python"}, {"instruction": "Group items of the given array based on the condition and get their sum.", "input": "Array: [1, 2, 3, 4, 5, 6]\nCondition: x % 2 == 0", "output": "[12, 9]", "category": "Python"}, {"instruction": "Write a SQL command to insert a given row into a table.", "input": "Table Name: employees\nRow: ('John', 'Doe', 32)", "output": "INSERT INTO employees \nVALUES ('John', 'Doe', 32)", "category": "Python"}, {"instruction": "Create a HTML page with given header and footer elements.", "input": "Header: <h1>Hi there!</h1>\nFooter: <h5>Goodbye!</h5>", "output": "<html>\n  <head>\n    <title>Page Title</title>\n  </head>\n  <body>\n    <h1>Hi there!</h1>\n\n    <div>\n      // Page content goes here\n    </div>\n\n    <h5>Goodbye!</h5>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to query a given database table.", "input": "Table Name: users", "output": "const query = \"SELECT * FROM users\"", "category": "Python"}, {"instruction": "Write a NumPy code snippet to create a matrix of given shape and fill it with ones.", "input": "Shape: (3,4)", "output": "np.ones((3,4))", "category": "Python"}, {"instruction": "Write a Pandas code snippet to filter the table based on a given condition.", "input": "Table: df\nCondition: df['Age'] > 25", "output": "filtered_df = df[df['Age'] > 25]", "category": "Python"}, {"instruction": "Use the list comprehension feature of Python to create a list of words with length more than 5", "input": "", "output": "words_list = [word for word in words if len(word) > 5]", "category": "Python"}, {"instruction": "Write a function to calculate the largest possible number from the given list of integers.", "input": "[1, 8, 4, 12, 7]", "output": "84127", "category": "Python"}, {"instruction": "Replace all the occurrences of given substring in the sentence.", "input": "Substring: 'apples'\nSentence: I love apples, apples are my favorite fruit.", "output": "I love oranges, oranges are my favorite fruit.", "category": "Python"}, {"instruction": "How can you use an AJAX callback to retrieve data from a web page?", "input": "", "output": "$.ajax({\n  url: 'example.com/data',\n  type: 'GET', \n  dataType: 'json',\n  success: function(data) {\n    // data is available here\n  }\n});", "category": "Python"}, {"instruction": "Use SQL to add a new record to a table.", "input": "", "output": "INSERT INTO table (column1, column2, ...) \n  VALUES (value1, value2, ...);", "category": "Python"}, {"instruction": "How can you select the first element with class \"test\" using CSS?", "input": "", "output": ".test:first-of-type {\n  // styles here\n}", "category": "Python"}, {"instruction": "Write a C++ code to store the marks of a student in an array.", "input": "", "output": "#include <iostream>\n\nint marks[5];\n\nint main() {\n  marks[0] = 10;\n  marks[1] = 20;\n  marks[2] = 30;\n  marks[3] = 40;\n  marks[4] = 50;\n  \n  return 0;\n}", "category": "Python"}, {"instruction": "Write a sql query to fetch records from a table with a condition that must provide results with an id greater than 10.", "input": "", "output": "SELECT * FROM table WHERE id > 10;", "category": "Python"}, {"instruction": "Create a MySQL database table with two columns, an id and a message.", "input": "", "output": "CREATE TABLE messages (\n  id int(11) NOT NULL AUTO_INCREMENT,\n  message text NOT NULL,\n  PRIMARY KEY (id)\n);", "category": "Python"}, {"instruction": "Provide output for given input using this Python code", "input": "message = \"Hello World!\"\nfunction(message)\n\ndef function(x): \n    return x[::-1]", "output": "\"!dlroW olleH\"", "category": "Python"}, {"instruction": "Construct an algorithm to solve this coding problem", "input": "Given two sorted linked lists, print a list with all the integers of the two lists as a single sorted list.", "output": "def print_sorted_list(list1, list2): \n    result = [] \n    while list1 and list2: \n        if list1.value > list2.value: \n            result.append(list2.value) \n            list2 = list2.next \n        else: \n            result.append(list1.value) \n            list1 = list1.next \n    if list1: \n        result.extend(list1) \n    if list2: \n        result.extend(list2) \n    return result", "category": "Python"}, {"instruction": "Write a SQL query to filter out records that contains an empty string.", "input": "Table 1:\n\nName | Job | City\n-----|-----|-------\nJohn | Programmer | \nJane | Office Assistant  | San Francisco\nBob  | Designer |", "output": "SELECT * FROM Table_1 \nWHERE Job != '' AND City != '';", "category": "Python"}, {"instruction": "Classify this code error as a runtime error or a compile error", "input": "def foo(x):\n    if x > 0\n        print(\"x is positive\")", "output": "Compile error", "category": "Python"}, {"instruction": "Write a function to determine if a given number is prime and returns true or false.", "input": "", "output": "def is_prime(num):\n    if num <= 1:  \n        return False\n    for i in range(2, num):  \n        if num % i == 0:  \n            return False\n\n    return True", "category": "Python"}, {"instruction": "Create a web page to display all the weekdays", "input": "", "output": "<html>\n    <head>\n        <title>Weekdays</title>\n    </head>\n    <body>\n        <h1>Weekdays</h1>\n        <ul>\n            <li>Monday</li>\n            <li>Tuesday</li>\n            <li>Wednesday</li>\n            <li>Thursday</li>\n            <li>Friday</li>\n            <li>Saturday</li>\n            <li>Sunday</li>\n        </ul>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Compute the greatest common divisor of the numbers 3 and 8", "input": "", "output": "The greatest common divisor of 3 and 8 is 1.", "category": "Python"}, {"instruction": "Calculate the area of a square with each side equal to 3 inches", "input": "", "output": "The area of the square is 9 square inches.", "category": "Python"}, {"instruction": "Generate a 2D array with 5 rows and 6 columns in Java", "input": "", "output": "int[][] array = new int[5][6];", "category": "Python"}, {"instruction": "Add a class titled \"list-item\" to the following HTML tag", "input": "<ul>\n  <li>Apple</li>\n  <li>Orange</li>\n  <li>Banana</li>\n</ul>", "output": "<ul>\n  <li class=\"list-item\">Apple</li>\n  <li class=\"list-item\">Orange</li>\n  <li class=\"list-item\">Banana</li>\n</ul>", "category": "Python"}, {"instruction": "Modify this piece of code to print numbers up to 10", "input": "for i in range(5):\n  print(i)", "output": "for i in range(10):\n  print(i)", "category": "Python"}, {"instruction": "Perform data validation on two strings s1 and s2 according to the given conditions on the length and special characters.", "input": "s1 = \"Hello@world\"\ns2 = \"Test\"", "output": "def validate_strings(s1, s2):\n    if len(s1) > 10 and '@' not in s1:\n        return False\n    if len(s2) < 5 and '@' in s2:\n        return False\n    return True", "category": "Python"}, {"instruction": "Isolate all the comments from a given piece of code", "input": "def square(x):\n# return square of x\nreturn x * x", "output": "# return square of x", "category": "Python"}, {"instruction": "Create a web page that has a button to toggle a navigation bar.", "input": "", "output": "<html>\n<head>\n    <title>Menu toggle example</title>\n</head>\n<body>\n    <h1>Toggle Menu</h1>\n    <div id=\"menu-container\">\n        <a href=\"link1.html\">Link 1</a>\n        <a href=\"link2.html\">Link 2</a>\n        <a href=\"link3.html\">Link 3</a>\n    </div>\n    <button id=\"toggle-menu\">Toggle Menu</button>\n    \n    <script>\n        let toggleButton = document.getElementById('toggle-menu');\n        let menuContainer = document.getElementById('menu-container');\n        \n        toggleButton.onclick = function(){\n            if (menuContainer.style.display == 'none'){\n                menuContainer.style.display = 'block';\n            }\n            else {\n                menuContainer.style.display = 'none';\n            }\n        }\n    </script>\n</body>\n</html>", "category": "Python"}, {"instruction": "Find the largest and smallest number in a given list.", "input": "[5, 10, 20, 7, -8, 15]", "output": "import math \n\nmy_list = [5, 10, 20, 7, -8, 15]\n  \nlargest = max(my_list) \nsmallest = min(my_list) \n  \nprint(\"Largest element is:\", largest) \nprint(\"Smallest element is:\", smallest)", "category": "Python"}, {"instruction": "Create an array loop to print all the elements from 1 to 10.", "input": "", "output": "my_array = [] \nfor x in range(1, 11):\n    my_array.append(x) \n    print(x)", "category": "Python"}, {"instruction": "Generate the list of all prime numbers between 0 and 99.", "input": "", "output": "prime_list = [] \nfor num in range(100): \n    if num > 1:\n        for i in range(2, num): \n            if (num % i) == 0: \n                break\n        else:\n            prime_list.append(num) \nprint(prime_list)", "category": "Python"}, {"instruction": "Copy and paste the code to convert a given decimal value to its binary equivalent.", "input": "decimal_value = 17", "output": "def decToBin(decimal_value): \n    if decimal_value > 1: \n        decToBin(decimal_value // 2) \n    print(decimal_value % 2, end = '') \n  \ndecToBin(17)", "category": "Python"}, {"instruction": "Write a function that takes a given string and its length as input arguments and then prints the string reversely.", "input": "string = \"Hello world\"", "output": "def stringReverse(string, length): \n    for i in range(length - 1, -1, -1): \n        print(string[i], end=\"\") \n  \nstringReverse(\"Hello world\", 11)", "category": "Python"}, {"instruction": "Insert an if-else statement that prints \"Yes, it's even\" when a given number is even.", "input": "number = 8", "output": "if (number % 2 == 0):\n    print(\"Yes, it's even\")\nelse:\n    print(\"No, it's odd\")", "category": "Python"}, {"instruction": "Emulate the following behavior in CSS", "input": "// Button should show/hide when hovered", "output": "button:hover {\n  display: block;\n}\n\nbutton {\n  display: none;\n}", "category": "Python"}, {"instruction": "Create a function in C to replace all the given characters in a string with a given character.", "input": "String1 = \"Hello World\", Character1 = 'o', Character2 = '*'", "output": "char *replaceCharacter(char *str, char o, char *) \n{ \n    int i = 0; \n    while (str[i] != '\\0') { \n        if (str[i] == o) \n            str[i] = *; \n  \n        i++; \n    }return str; \n}  \n\n// Driver Program \nint main() \n{ \n    char str[] = \"Hello World\"; \n    printf(\"%s\", replaceCharacter(str, 'o', '*')); \n    return 0; \n}", "category": "Python"}, {"instruction": "Write a SQL query to find the top 3 most populated cities across all states.", "input": "", "output": "SELECT name, population\nFROM cities\nORDER BY population DESC\nLIMIT 3;", "category": "Python"}, {"instruction": "Deploy a static website on AWS", "input": "", "output": "To deploy a static website on AWS, create an S3 bucket and configure the bucket for static website hosting. Upload the website content to the S3 bucket, then create a CloudFront distribution to redirect requests to the S3 bucket. Finally, configure a DNS record to point to the CloudFront distribution.", "category": "Python"}, {"instruction": "Write a function in Python that takes a number as input and prints out if the number is odd or even.", "input": "Number = 23", "output": "def OddEven(num):\n    if num%2 == 0 :\n        print(\"{} is Even\".format(num))\n    else :\n        print(\"{} is Odd\".format(num))\n\nOddEven(23)", "category": "Python"}, {"instruction": "Create an array of strings in Java with three elements - \"apple\", \"banana\" and \"orange\".", "input": "", "output": "String[] arr = {\"apple\", \"banana\", \"orange\"};", "category": "Python"}, {"instruction": "Write a SQL query to group a table by a certain value and sum up another numerical column.", "input": "Table name: transactions\nGroup by: customerId\nSum value: totalprice", "output": "SELECT customerId, SUM(totalprice) \nFROM transactions\nGROUP BY customerId;", "category": "Python"}, {"instruction": "How would you use the ternary operator for comparing two values in JavaScript?", "input": "", "output": "The ternary operator can be used to compare two values in the following way: (condition) ? (value if condition is true) : (value if condition is false);", "category": "Python"}, {"instruction": "Write an algorithm in Python that takes an array as input and prints all the duplicate values in it.", "input": "arr = [1, 4, 7, 2, 6, 1, 7, 2]", "output": "def find_duplicates(arr): \n    result = [] \n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] == arr[j]: \n                result.append(arr[i]) \n    return result\n\narr = [1, 4, 7, 2, 6, 1, 7, 2] \n  \nresult = find_duplicates(arr) \n  \nprint(result)", "category": "Python"}, {"instruction": "Suppose there are N nodes in a binary tree. After deleting a node, how many leaf nodes will be left?", "input": "", "output": "The total number of leaf nodes that will be left after deleting a node depends on the structure of the tree. If the deleted node is a leaf node, then the number of leaf nodes will be reduced by one. However, if the deleted node has children, then the number of leaf nodes may stay the same, or increase.", "category": "Python"}, {"instruction": "Complete the following code so as to return the value of the key-value pair \"name\" in the given JSON object.", "input": "data = {\n    \"name\": \"John\",\n    \"age\": 20\n}\n\ndef get_name(data):\n    # Your code here", "output": "def get_name(data):\n    return data[\"name\"]", "category": "Python"}, {"instruction": "What is the maximum value that can be assigned to an unsigned 8-bit integer?", "input": "", "output": "255", "category": "Python"}, {"instruction": "Create a new variable called result which is the sum of the variables a and b.", "input": "a = 13\nb = 14", "output": "result = 27", "category": "Python"}, {"instruction": "Generate a SQL query to count the number of books that are available in the table BOOK.", "input": "", "output": "SELECT COUNT(*) as num_books FROM `BOOK` WHERE availability = 1;", "category": "Python"}, {"instruction": "Translate the following sentence to Python code.", "input": "Input the hours, rate and the tax rate.", "output": "hours = float(input(\"Input the hours: \"))\nrate = float(input(\"Input the rate: \"))\ntax_rate = float(input(\"Input the tax rate: \"))", "category": "Python"}, {"instruction": "Modify a given sentence by replacing the invalid punctuation with a valid one.", "input": "This is an example sentence.", "output": "This is an example sentence?", "category": "Python"}, {"instruction": "Write a code to get the median of four numbers", "input": "x = 11, y = 12, z = 13, w = 14", "output": "def median(x,y,z,w):\n    nums = [x,y,z,w]\n    nums.sort()\n    mid =len(nums)//2\n    if len(nums)%2 == 0:\n        median = (nums[mid] + nums[mid-1])/2\n    else:\n        median = nums[mid]\n    return median\n\nif __name__ == '__main__':\n    print(median(11,12,13,14))", "category": "Python"}, {"instruction": "Create a python class to represent a 3x3 matrix", "input": "", "output": "class Matrix:\n    def __init__(self, array):\n        self.array = array\n        self.rows = len(array)\n        self.cols = len(array[0])\n\n    def get_matrix(self):\n        return self.array\n\n    def set_matrix(self, array):\n        self.rows = len(array)\n        self.cols = len(array[0])\n        self.array = array\n\nif __name__ == '__main__':\n    matrix = [[1,2,3],[4,5,6],[7,8,9]]\n    m = Matrix(matrix)", "category": "Python"}, {"instruction": "Write a code to check if an element is present in an array", "input": "array = ['apple','dog','cat','mouse','ball']\nelement = 'cat'", "output": "def is_present(array, element):\n    if element in array:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    print(is_present(array, element))", "category": "Python"}, {"instruction": "What should be the return type of the following function in Java?", "input": "public int add(int a, int b) {\n   return a + b;\n}", "output": "int.", "category": "Python"}, {"instruction": "Write a SQL query to find the first two digits of an integer value in a column.", "input": "Table name: customerinfo\nColumn name: accountNumber", "output": "SELECT SUBSTRING(accountNumber, 1, 2) FROM customerinfo;", "category": "Python"}, {"instruction": "Write a SQL query to select all companies where the number of employees is greater than 50.", "input": "Table name: companies\nEmployee column: employees", "output": "SELECT * FROM companies WHERE employees > 50;", "category": "Python"}, {"instruction": "Print the positions of all vowels in the given string.", "input": "String: mississippi", "output": "The positions of all vowels in the string \"mississippi\" are: \n[1, 4, 7, 10].", "category": "Python"}, {"instruction": "Come up with a query to add a new column to a table", "input": "Table \u2018employee\u2019", "output": "ALTER TABLE Employee \nADD new_column INT", "category": "Python"}, {"instruction": "Create a program that takes in two strings and prints out common words", "input": "str1 = \"The quick brown fox\"\nstr2 = \"The brown rabbit\"", "output": "def common_words(str1, str2):\n    l1 = str1.split()\n    l2 = str2.split()\n    result = list(set(l1) & set(l2))\n    return result", "category": "Python"}, {"instruction": "Edit the code to print out an error message if a negative number is entered as input", "input": "num = -5", "output": "if num < 0:\n    print(\"Error: Please enter a positive number!\")\nelse:\n    print(\"Great, the number is positive.\")", "category": "Python"}, {"instruction": "Edit the code to print out that \"Index not found\".", "input": "nums = [1, 2, 3, 4, 5]\ntarget = 6", "output": "def Contains(nums, target):\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return True\n    print(\"Index not found\")\n    return False", "category": "Python"}, {"instruction": "Create a regex pattern to match a valid US zipcode", "input": "", "output": "^\\d{5}(-\\d{4})?$", "category": "Python"}, {"instruction": "Come up with a query to count the number of distinct elements in a table", "input": "Table \"employee_salary\"", "output": "SELECT COUNT(DISTINCT salary) FROM employee_salary;", "category": "Python"}, {"instruction": "Edit the code so it can detect if an array is already sorted", "input": "arr = [1, 2, 4, 5, 6, 7]", "output": "def is_sorted(arr): \n    n = len(arr) \n    for i in range (0, n-1): \n        if (arr[i] > arr[i+1] ): \n            return False\n    return True", "category": "Python"}, {"instruction": "Write a code to reverse each element of an array", "input": "array = ['apple','dog','cat','mouse','ball']", "output": "def reverse_array(array):\n    reversed_array = []\n\n    for elem in array:\n        reversed_array.append(elem[::-1])\n    \n    return reversed_array\n\nif __name__ == '__main__':\n    print(reverse_array(array))", "category": "Python"}, {"instruction": "Come up with a program that takes in two strings and returns the number of characters that are shared between them", "input": "str1 = \"Greatest\"\nstr2 = \"Gifted\"", "output": "def num_common_chars(str1, str2):\n    count = 0\n    for x in str1:\n        if x in str2:\n           count += 1\n           \n    return count", "category": "Python"}, {"instruction": "Write a MySQL query to get the top 3 most frequent letters", "input": "Table \u2018letters\u2019 containing letters", "output": "SELECT letter, COUNT(*) as Frequency FROM letters \nGROUP BY letter \nORDER BY Frequency DESC \nLIMIT 3;", "category": "Python"}, {"instruction": "Come up with a list of 10 words that best describes a person", "input": "", "output": "Creative, Ambitious, Independent, Kind, Generous, Compassionate, Confident, Hardworking, Empathetic, Loyal.", "category": "Python"}, {"instruction": "Write a JavaScript function for summing up the number of hours and minutes.", "input": "Hours: 2\nMinutes: 45", "output": "function sumTime(hrs, mins) {\n    return (hrs * 60 + mins);\n}\n\nconsole.log(sumTime(2, 45));\n\n# Output\n165", "category": "Python"}, {"instruction": "Design a class in Java that creates an Employee record.", "input": "", "output": "public class Employee {\n    private String name;\n    private int age;\n    private String position;\n\n    public Employee(String name, int age, String position) {\n        this.name = name;\n        this.age = age;\n        this.position = position;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public String getPosition() {\n        return position;\n    }\n}", "category": "Python"}, {"instruction": "Explain the significance of exception handling in Java.", "input": "", "output": "Exception handling is an important part of programming languages such as Java. It allows the programmer to handle errors gracefully without crashing the system, while also allowing the program to continue execution in a normal manner. By catching exceptions, a program can handle unexpected inputs or events and take necessary steps to prevent any unexpected situation. This helps to maintain the stability of the system by avoiding system crashes, which can occur due to unexpected events.", "category": "Python"}, {"instruction": "Create an HTML page demonstrating the application of \"for\" loop in JavaScript", "input": "", "output": "<html>\n<head>\n<script>\nfor(let i=0; i<5; i++){\n   console.log('loop ' + i);\n}\n</script>\n</head>\n<body>\n</body>\n</html>", "category": "Python"}, {"instruction": "Find the smallest positive number which is divisible by both 5 and 7.", "input": "", "output": "The smallest positive number which is divisible by both 5 and 7 is 35.", "category": "Python"}, {"instruction": "Change the code to have an array shift right by one without using built-in functions", "input": "nums = [1, 2, 3, 4, 5]", "output": "temp = nums[len(nums) - 1]\nfor i in range(len(nums) - 1, 0, -1):\n    nums[i] = nums[i - 1]\nnums[0] = temp", "category": "Python"}, {"instruction": "Create a basic REST API in Node.js", "input": "", "output": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n\n// Server listening on port 3000\nconst port = 3000;\napp.listen(port, () => console.log(`Server listening on port ${port}`));", "category": "Python"}, {"instruction": "Write a Question answer system for the given paragraph.", "input": "Paragraph: The current century is the 21st century and it started in 2001", "output": "def QASystem(paragraph):\n    words = paragraph.split()\n    answer = words[-1]\n\n    while True:\n        user_input = input('What is the first year of this century? ')\n        if user_input == answer:\n            print('Your answer is correct!')\n            break\n        else:\n            print('Incorrect! Please try again')\n\nQASystem(paragraph)", "category": "Python"}, {"instruction": "Analyze the given JSON data and find the name of the user with the highest 'score' attribute.", "input": "[\n {\n \u201cname\u201d: \u201cJohn\u201d,\n \u201cscore\u201d: 80\n },\n {\n \u201cname\u201d: \u201cJane\u201d,\n \u201cscore\u201d: 95\n },\n {\n \u201cname\u201d: \u201cTom\u201d,\n \u201cscore\u201d: 67\n }\n]", "output": "import json\n\ndata = json.loads(input)\nhighestScore = 0\nhighestName = \"\"\n\nfor d in data:\n    if d[\"score\"] > highestScore:\n        highestScore = d[\"score\"]\n        highestName = d[\"name\"]\n\nprint(highestName)", "category": "Python"}, {"instruction": "Add a \u2018onclick\u2019 event to the element with ID \u2018button\u2019.", "input": "", "output": "<script>\ndocument.getElementById(\"button\").onclick = () => {\n  // Your code goes here\n};\n</script>", "category": "Python"}, {"instruction": "Create an R program to find the percentage of males and females in a given dataset.", "input": "Table Name: people", "output": "male_count <- nrow(people[people$Gender == \"Male\", ])\nfemale_count <- nrow(people[people$Gender == \"Female\", ])\ntotal <- nrow(people)\n\nmale_percentage <- (male_count / total) * 100\nfemale_percentage <- (female_count / total) * 100\n\nprint(paste0('Percentage of males:', male_percentage, '%'))\nprint(paste0('Percentage of females:', female_percentage, '%'))", "category": "Python"}, {"instruction": "Write a JavaScript function to safe an array at the local storage.", "input": "[10, 20, 30]", "output": "function saveArrayToLocalStorage(arr) {\n  localStorage.setItem('array', JSON.stringify(arr));\n}", "category": "Python"}, {"instruction": "Make an AJAX request to get the list of items from a server.", "input": "Endpoint URL: http://example.com/items", "output": "$.get('http://example.com/items', function(data) {\n    // Code to handle the response\n});", "category": "Python"}, {"instruction": "Formulate a query to select the first names of customers from the customers table.", "input": "Table Name: customers", "output": "SELECT first_name\nFROM customers;", "category": "Python"}, {"instruction": "Using HTML and CSS, create a table containing 3 rows and 4 columns.", "input": "", "output": "<style>\n  table, th, td {\n    border: 1px solid black;\n  }\n</style>\n\n<table>\n  <thead>\n    <th>Column 1</th>\n    <th>Column 2</th>\n    <th>Column 3</th>\n    <th>Column 4</th>\n  </thead>\n  <tbody>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>", "category": "Python"}, {"instruction": "Write an SQL query to select the data of all the employees who joined in the last 5 years and earn more than $100,000.", "input": "", "output": "SELECT * FROM employees \nWHERE start_date > DATE_SUB(NOW(), INTERVAL 5 YEAR) \nAND salary > 100000;", "category": "Python"}, {"instruction": "Print the first, second and third element of this array in JavaScript.", "input": "[20, 40, 60, 80, 100]", "output": "let arr = [20, 40, 60, 80, 100];\nconsole.log(arr[0], arr[1], arr[2]);", "category": "Python"}, {"instruction": "Create a Java application to calculate the mean stock price of a company in the last 5 days.", "input": "[10.25, 11.94, 12.56, 11.13, 11.44]", "output": "public class StockPrice {\n  public static void main(String[] args) {\n    double[] stock_prices = {10.25, 11.94, 12.56, 11.13, 11.44};\n\n    double stock_price_sum = 0;\n    for(double stock_price : stock_price) {\n      stock_price_sum += stock_price;\n    }\n\n    double stock_price_mean = stock_price_sum / stock_prices.length;\n\n    System.out.println(stock_price_mean);\n  }\n}", "category": "Python"}, {"instruction": "Convert this regular expression to JavaScript regex expression.", "input": "/[A-Z][a-z]+/", "output": "/[A-Z][a-z]+/g", "category": "Python"}, {"instruction": "Create a Wordpress theme from scratch.", "input": "", "output": "Create a new folder for your theme, name it \"mytheme\". Open a text editor and a web browser.\n\nCreate a style.css file in your theme folder. Add all the CSS styles as required to make your theme looks as desired.\n\nCreate an index.php file in your theme folder, and add the code to create a basic layout of your theme in HTML.\n\nCreate any other files you may need, such as a template file (example: page.php), functions.php and scripts.php, in order to make your theme fully functional.\n\nAdd code to your functions.php file to add different features to your theme.\n\nCreate a screenshot.png image of your theme inside your theme folder, to show in the WordPress dashboard.\n\nZip your theme folder and upload it to WordPress from the \u201cAppearance\u201d menu.", "category": "Python"}, {"instruction": "Update this script in Python to print the number of months since an employee started working.", "input": "start_date = \"1 March 2020\"", "output": "import datetime\n\nstart_date = datetime.datetime.strptime(\"1 March 2020\", \"%d %B %Y\")\n\ncurrent_date = datetime.datetime.now()\n\nnumber_of_months = current_date.month - start_date.month\n\nprint(\"The employee has been working for {} months\".format(number_of_months))", "category": "Python"}, {"instruction": "Implement a function in Python to compute the average of an array containing floating-point numbers.", "input": "[1.5, 2.3, 3.8, 4.2]", "output": "import numpy as np\n\ndef calculate_average(arr):\n    return np.mean(arr)\n    \nprint(calculate_average([1.5, 2.3, 3.8, 4.2]))", "category": "Python"}, {"instruction": "Create an HTML form to capture the first name and last name of the user.", "input": "", "output": "<form>\n  <label for=\"first_name\">First Name</label>\n  <input type=\"text\" id=\"first_name\" />\n  <label for=\"last_name\">Last Name</label>\n  <input type=\"text\" id=\"last_name\" />\n  <input type=\"submit\" />\n</form>", "category": "Python"}, {"instruction": "Which of the following HTTP methods are used for updating operations?", "input": "GET, POST, PUT, DELETE", "output": "PUT and DELETE are the HTTP methods used for updating operations. GET and POST are used for retrieving and submitting data, respectively.", "category": "Python"}, {"instruction": "Formulate a query to select the records from the customers table where the gender is not equal to 'female'.", "input": "Table Name: customers", "output": "SELECT * FROM customers WHERE gender != 'female';", "category": "Python"}, {"instruction": "Create a React component for a form with three text boxes.", "input": "", "output": "import React, { useState } from 'react';\n\nconst MyForm = () => {\n  const [text1, setText1] = useState('');\n  const [text2, setText2] = useState('');\n  const [text3, setText3] = useState('');\n\n  return (\n    <form>\n      <input type=\"text\" value={text1} onChange={e => setText1(e.target.value)} />\n      <input type=\"text\" value={text2} onChange={e => setText2(e.target.value)} />\n      <input type=\"text\" value={text3} onChange={e => setText3(e.target.value)} />\n    </form>\n  );\n};\n\nexport default MyForm;", "category": "Python"}, {"instruction": "Write a code in JavaScript for iterating over an array and print each element.", "input": "arr = [1, 2, 3, 4]", "output": "arr.forEach(function(el) {\n    console.log(el);\n});", "category": "Python"}, {"instruction": "Edit the code to convert the string \"cat\" to \"dog\".", "input": "String str = \"cat\"", "output": "String str = \"dog\";", "category": "Python"}, {"instruction": "Come up with a design for a simple GUI-based web application that allows users to order food online.", "input": "", "output": "The design should include a navigation menu that allows users to search for and select food items, view the items in their cart, and checkout. The navigation menu should also have options to sign up, sign in, and view their order history that would only be visible when they are signed in. The checkout process should allow users to enter payment details and order confirmation.", "category": "Python"}, {"instruction": "Change the following Define statement so that it will display a message containing the word \u201cDONE\u201d when the code is executed.", "input": "#define display_message()", "output": "#define display_message() printf(\"DONE\\n\")", "category": "Python"}, {"instruction": "Create a CSS style to make all the links on a webpage have the color purple.", "input": "", "output": "a {\n\tcolor: purple;\n}", "category": "Python"}, {"instruction": "Write a Python 3 script to print out all the words in the string 'I love coding'.", "input": "", "output": "words = \"I love coding\"\nfor word in words.split():\n    print(word)", "category": "Python"}, {"instruction": "Change the following SQL query so that it only returns rows from the 'employees' table where the salary is higher than 50000.", "input": "SELECT * FROM employees", "output": "SELECT * FROM employees WHERE salary > 50000;", "category": "Python"}, {"instruction": "Create a function to return all students with a given grade.", "input": "students = [\n {'name': 'John', 'grade': 'A'},\n {'name': 'Jane', 'grade': 'B'},\n {'name': 'Dave', 'grade': 'A'},\n {'name': 'Chris', 'grade': 'C'},\n]", "output": "def get_students_by_grade(students,grade):\n    \"\"\"Returns a list of students with a given grade.\"\"\"\n    filtered_list = []\n    for student in students:\n        if student[\"grade\"] == grade:\n            filtered_list.append(student)\n    return filtered_list\n\nget_students_by_grade(students, 'A') # returns [{'name': 'John', 'grade': 'A'}, {'name': 'Dave', 'grade': 'A'}]", "category": "Python"}, {"instruction": "Write a JavaScript function to filter all numbers in an array and return a new array containing only the even numbers.", "input": "arr = [1, 2, 3, 4, 5, 6]", "output": "function evenNumbers(arr) {\n    return arr.filter(num => num % 2 === 0);\n}\n\nevenNumbers(arr) # returns [2, 4, 6]", "category": "Python"}, {"instruction": "Create a class that models a student with attributes such as name, age, and GPA.", "input": "", "output": "class Student {\n  private string name;\n  private int age;\n  private double gpa;\n  \n  // Constructor\n  public Student (string name, int age, double gpa) {\n    this.name = name;\n    this.age = age;\n    this.gpa = gpa;\n  }\n  \n  // Getter methods\n  public string GetName() {\n    return name;\n  }\n  \n  public int GetAge() {\n    return age;\n  }\n  \n  public double GetGPA() {\n    return gpa;\n  }\n  \n  // Setter methods\n  public void SetName(string name) {\n    this.name = name;\n  }\n  \n  public void SetAge(int age) {\n    this.age = age;\n  }\n  \n  public void SetGPA(double gpa) {\n    this.gpa = gpa;\n  }\n}", "category": "Python"}, {"instruction": "Write a function to evaluate the length of an array.", "input": "arr = [1, 3, 5, 6]", "output": "def arr_length(arr):\n    \"\"\"Returns the length of a given array.\"\"\"\n    return len(arr)\n\narr_length(arr) # returns 4", "category": "Python"}, {"instruction": "Given a vector x containing N elements, write a Python function to compute and return the sum.", "input": "x = [2, 3, 5, 7, 11]", "output": "def sum_vector(x):\n    \"\"\"Returns the sum of all elements in a vector x.\"\"\"\n    total = 0\n    for num in x:\n        total += num\n    return total\n\nsum_vector(x) # returns 28", "category": "Python"}, {"instruction": "Modify the below HTML code to make the text show with a different font and font size.", "input": "<p>This text should be different</p>", "output": "<p style=\"font-family: Helvetica, sans-serif; font-size: 30px\">This text should be different</p>", "category": "Python"}, {"instruction": "Evaluate the following JavaScript expression: 15 * (3 + 7)", "input": "", "output": "The result of 15 * (3 + 7) is 150.", "category": "Python"}, {"instruction": "Create an SQL query to find all the records in the 'customers' table that have a name that starts with 'John'.", "input": "", "output": "SELECT * \nFROM customers \nWHERE name LIKE 'John%';", "category": "Python"}, {"instruction": "Compute the prime factors of the number 54.", "input": "", "output": "The prime factors of 54 are 2, 3, 3, and 3.", "category": "Python"}, {"instruction": "Edit the code to delete the element with value 6 from the array.", "input": "int arr[] = {2, 4, 6, 8, 10}", "output": "// remove element at index 2\nfor (int i=2; i< arr.length-1; i++)\n   arr[i] = arr[i+1];\n   \n// Reduce size of array by 1  \nint len = arr.length -1;   \nint[] newarr = new int[len];\nfor (int i=0; i<newarr.length; i++)\n   newarr[i] = arr[i];", "category": "Python"}, {"instruction": "Write a query in SQL to calculate the total cost of orders placed in the month of May.", "input": "", "output": "SELECT SUM(o.cost)\nFROM orders o\nWHERE strftime('%m', o.date) = '05';", "category": "Python"}, {"instruction": "Create an HTML page containing a link that redirects the user to another page, when clicked.", "input": "", "output": "<a href=\"https://www.example.com\">Click here to go to another page.</a>", "category": "Python"}, {"instruction": "Create a query in SQL to find the name and address of the customers who purchased a particular product.", "input": "Product Name: Mobile Phone", "output": "SELECT name, address \nFROM customers \n INNER JOIN orders \n ON customers.customer_id = orders.customer_id \n INNER JOIN products\n ON orders.product_id = products.product_id\n WHERE products.name = 'Mobile Phone';", "category": "Python"}, {"instruction": "Create a function in R to generate a sequence of numbers starting from 0 and ending at 100.", "input": "", "output": "seq(from = 0, to = 100, by = 1)", "category": "Python"}, {"instruction": "Create an algorithm in Java to print all the prime numbers between a given range.", "input": "", "output": "public class PrimeNumber { \n    public static void main(String[] args) {  \n        int start = 2;\n\t    int end = 50;\n        for(int i = start; i <= end; i++){\n            boolean isPrime = true;\n            for(int j=2; j < i; j++){\n                if(i % j == 0){\n                    isPrime = false;\n                    break;\n                }\n            }\n            if(isPrime)\n                System.out.print(i + \" \");\n        }\n    }    \n}", "category": "Python"}, {"instruction": "Write a code to simulate Conway\u2019s Game of Life.", "input": "", "output": "\"\"\"\nWrite a code to simulate Conway\u2019s Game of Life\n\"\"\"\n\nimport numpy as np\n\ndef conways_game_of_life(state, iterations):\n    # make a copy of the game state\n    game_state = np.copy(state)\n    # loop over the number of iterations\n    for _ in range(iterations):\n        # calculate the number of neighbors for each cell\n        num_neighbors = (game_state[0:-2,0:-2] + game_state[0:-2,1:-1] + game_state[0:-2,2:] +\n                        game_state[1:-1,0:-2] + game_state[1:-1,2:] +\n                        game_state[2:,0:-2] + game_state[2:,1:-1] + game_state[2:,2:]).astype(np.uint8)\n        # decide if a cell should live or die based on the number of neighbors\n        game_state[1:-1, 1:-1][(num_neighbors == 2) | (num_neighbors == 3)] = 1\n        game_state[1:-1, 1:-1][(num_neighbors != 2) & (num_neighbors != 3)] = 0\n    # return the modified current state\n    return game_state", "category": "Python"}, {"instruction": "Write a code to train a random forest classifier for a given dataset.", "input": "Dataset features: 5 features, 100 instances, 1000 estimators", "output": "\"\"\"\nWrite a code to train a random forest classifier for a given dataset\n\"\"\"\n\n# import the packages\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import make_classification\n\n# Create the dataset\nX, y = make_classification(n_samples=100, n_features=5, n_classes=2)\n\n# Create and train the random forest classifier\nclf = RandomForestClassifier(n_estimators=1000)\nclf.fit(X, y)", "category": "Python"}, {"instruction": "Write a code to update a given column using the data from another table.", "input": "Table1: Student\nTable2: Course\nColumn to be updated: Student.CourseId", "output": "\"\"\"\nWrite a code to update a given column using the data from another table\n\"\"\"\n\n# Create the UPDATE statement\nUPDATE Student SET CourseId = \n    (SELECT Course.Id as CourseId \n    FROM Course \n    WHERE Course.Name = Student.CourseName)", "category": "Python"}, {"instruction": "Construct an SQL query to list the name of all students who are taking the course \u2018Data Science\u2019.", "input": "", "output": "\"\"\"\nConstruct an SQL query to list the name of all students who are taking the course \u2018Data Science\u2019\n\"\"\"\n\nSELECT s.name \nFROM Student s, Course c, StudentCourse sc\nWHERE c.name = 'Data Science'\nAND sc.CourseId = c.Id\nAND sc.StudentId = s.Id", "category": "Python"}, {"instruction": "Count the number of vowels in the given sentence and print the result.", "input": "Sentence: There is no shortcut to success", "output": "\"\"\"\nCount the number of vowels in the given sentence and print the result\n\"\"\"\n\n# given sentence\nsentence = 'There is no shortcut to success'\n\n# count the vowels in the sentence\nvowels = 0\nfor char in sentence:\n    if char in 'aeiou':\n        vowels += 1\n# Print the number of vowels\nprint('Number of Vowels: ', vowels)", "category": "Python"}, {"instruction": "Generate the Fibonacci sequence of length 10 and print the result.", "input": "", "output": "\"\"\"\nGenerate the Fibonacci sequence of length 10 and print the result\n\"\"\"\n\ndef get_fibonacci_sequence(length):\n    a, b = 0, 1\n    # generate the Fibonacci sequence\n    sequence = []\n    for _ in range(length):\n        sequence.append(a)\n        a, b = b, a + b\n    # return the Fibonacci sequence\n    return sequence\n\n# get the Fibonacci sequence of length 10\nfib_sequence = get_fibonacci_sequence(10)\n# print the Fibonacci sequence\nprint(fib_sequence)", "category": "Python"}, {"instruction": "Calculate the scalar product of two vectors and print the result.", "input": "Vector1: [1,2,3]\nVector2: [4,5,6]", "output": "\"\"\"\nCalculate the scalar product of two vectors and print the result\n\"\"\"\n\n# Calculate the scalar product of two vectors\nvector1 = [1,2,3]\nvector2 = [4,5,6]\n\nscalar_product = sum([x*y for x,y in zip(vector1 , vector2)])\n# Print the scalar product\nprint('Scalar Product: ', scalar_product)", "category": "Python"}, {"instruction": "Compute the hamming distance between two strings and print the result.", "input": "String1: 'hello'\nString2: 'world'", "output": "\"\"\"\nCompute the hamming distance between two strings and print the result\n\"\"\"\n\ndef calc_hamming_distance(str1, str2):\n    # Calculate the hamming distance\n    dist = 0\n    for i, j in zip(str1, str2):\n        if i != j:\n            dist+=1\n    # Print the Hamming Distance\n    print('Hamming Distance: ', dist)\n    \ncalc_hamming_distance('hello','world')", "category": "Python"}, {"instruction": "Design an algorithm to detect the pattern of spikes in an EEG.", "input": "", "output": "\"\"\"\nDesign an algorithm to detect the pattern of spikes in an EEG\n\"\"\"\n\nimport numpy as np\n\ndef detect_spike_pattern(eeg_data):\n    # Compute power spectrum of the EEG data\n    power_spectra = np.abs(np.fft.rfft(eeg_data))\n    # Detect spikes by finding peaks in the power spectrum\n    spikes = np.where(power_spectra > np.mean(power_spectra) + np.std(power_spectra))[0]\n    # Construct the spike pattern using differences between consecutive spikes\n    pattern = [spikes[i+1] - spikes[i] for i in range(len(spikes)-1)]\n    return pattern", "category": "Python"}, {"instruction": "Given a triangle, calculate its area.", "input": "Base: 10\nHeight: 8", "output": "\"\"\"\nCalculate the area of a triangle\n\"\"\"\n\nbase = 10\nheight = 8\n\n# calculating the area of a triangle\narea = (base*height)/2\nprint(\"The area of the triangle is: {}\".format(area))", "category": "Python"}, {"instruction": "Create a JSON data structure to represent a car with the following fields: model, color, and year", "input": "", "output": "{\n \"model\": \"Toyota Camry\",\n \"year\": 2020,\n \"color\": \"black\"\n}", "category": "Python"}, {"instruction": "Write a Java method to convert a given integer to its equivalent English words", "input": "", "output": "public static String intToEnglish(int input) {\n  \n        // create an array of string representations of numbers 1 to 19  \n        String[] numbers1_19 = {\"one\", \"two\", \"three\", \"four\", \"five\", \"six\",  \n                \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\",  \n                \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\",  \n                \"nineteen\"};  \n       \n        // create an array of string representations of multiples of ten  \n        // from 20 to 90  \n        String[] multiplesOfTen = {\" twenty\", \" thirty\", \" forty\",  \n                \" fifty\", \" sixty\", \" seventy\", \" eighty\", \" ninety\"};  \n      \n        String output = \"\";  \n          \n        // extract each digit from the input and convert it to its  \n        // string representation  \n        if (input > 0 && input < 20) {  \n            output += numbers1_19[input - 1] + \" \";  \n        } else if (input >= 20 && input < 100) {  \n            output += multiplesOfTen[input / 10 - 2] + \" \";  \n            if (input % 10 != 0) {  \n                output += intToEnglish(input % 10);  \n            }  \n        } else if (input >= 100 && input < 1000) {  \n            output += intToEnglish(input / 100) + \" hundred \";  \n            if (input % 100 != 0) {  \n                output += intToEnglish(input % 100);  \n            }  \n        }  \n        // return the output string  \n        return output;\n    }", "category": "Python"}, {"instruction": "Write an SQL query to get names of all employees from the Employees table", "input": "", "output": "SELECT Name\nFROM Employees;", "category": "Python"}, {"instruction": "Edit the following HTML to make all text 16px font size.", "input": "<h1>This is a heading</h1>\n<p>This is a paragraph.</p>", "output": "<h1 style=\"font-size: 16px;\">This is a heading</h1>\n<p style=\"font-size: 16px;\">This is a paragraph.</p>", "category": "Python"}, {"instruction": "Create an Android application with a Button and a TextView. When the button is clicked, the TextView should be populated with the text \"Hello, World!\".", "input": "", "output": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n\n    <TextView\n        android:id=\"@+id/textview\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Hello, World!\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"@+id/button\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        android:visibility=\"invisible\" />\n\n    <Button\n        android:id=\"@+id/button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginBottom=\"326dp\"\n        android:text=\"Click Me\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintVertical_bias=\"1.0\"\n        android:onClick=\"onButtonClick\" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n\npublic class MainActivity extends AppCompatActivity {\n\n    TextView textView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        \n        textView = findViewById(R.id.textview);\n    }\n    \n    public void onButtonClick(View view) {\n        textView.setVisibility(View.VISIBLE);\n    }\n}", "category": "Python"}, {"instruction": "Suggest a strategy to reduce the memory requirement of a given application.", "input": "", "output": "\"\"\"\nSuggest a strategy to reduce the memory requirement of a given application\n\"\"\"\n\n# Suggested strategy \nOne strategy to reduce the memory requirement of a given application is to identify the areas where the memory is used the most and to optimize the code for those areas. Additionally, use a memory profiling tool to identify potential memory leaks. Memory profilers can detect memory leaks, large memory allocations and inefficient use of memory. This will help to identify specific areas of the code that could be improved or refactored to save memory. Lastly, use a memory-efficient data structure and algorithms when necessary to save memory.", "category": "Python"}, {"instruction": "Write an `int main()` routine to print the following sequence of numbers.", "input": "10", "output": "#include <iostream>\n\nint main() {\n for(int i = 0; i < 10; i++) {\n  if(i % 2 == 0) {\n   std::cout << i << \", \";\n  }\n  else {\n   std::cout << i+1 << \", \";\n  }\n }\n std::cout << std::endl;\n return 0;\n}", "category": "Python"}, {"instruction": "Create an array with five different strings.", "input": "", "output": "stringArray = ['Hello', 'Peace', 'Happiness', 'Joy', 'Love']", "category": "Python"}, {"instruction": "Construct a for-loop with a break clause.", "input": "", "output": "for i in range(0, 10):\n    if i == 7:\n        break\n    print(i)", "category": "Python"}, {"instruction": "Write an SQL query to select the first five items from a table called 'products' sorted by price in descending order.", "input": "", "output": "SELECT * FROM products ORDER BY price DESC LIMIT 5;", "category": "Python"}, {"instruction": "Write a jQuery expression to hide all the elements with class \"closed\".", "input": "", "output": "$('.closed').hide();", "category": "Python"}, {"instruction": "Write HTML to create an input element with placeholder text \"Type something here\".", "input": "", "output": "<input type=\"text\" placeholder=\"Type something here\" />", "category": "Python"}, {"instruction": "Write a CSS selector to select all the list items with class \"list-item\".", "input": "", "output": "li.list-item {\n \n}", "category": "Python"}, {"instruction": "Use JS to create an object called `user` which contains two properties: `name` with a string value of \"John\", and `age` with a numeric value of 25.", "input": "", "output": "let user = {\n  name: \"John\",\n  age: 25\n};", "category": "Python"}, {"instruction": "Edit this code to make the function take an integer n as an argument and print the fibonacci series till nth term.", "input": "n = 10", "output": "def fibonacci(n):\n    \"\"\"Prints the fibonacci series till the nth term\"\"\"\n    # set initial values\n    a = 0\n    b = 1\n    # check for valid input\n    if n < 0:\n        print('Please enter a positive number')\n    elif n == 0:\n        print('0')\n    elif n == 1:\n        print('0, 1')\n    else:\n        # print first two terms\n        print('0, 1', end=', ')\n        for i in range(2,n):\n            c = a + b\n            print(c, end=', ')\n            # update values\n            a = b\n            b = c\n\nn = 10\nfibonacci(n) # 0, 1, 1, 2, 3, 5, 8, 13, 21, 34", "category": "Python"}, {"instruction": "Convert this code to a function which takes a dictionary as an argument and adds the given key value pair to it.", "input": "my_dict = {'name': 'John'}\nkey = 'age'\nvalue = 18", "output": "def add_key_value_pair(my_dict, key, value):\n    \"\"\"Adds the given key value pair to the dictionary\"\"\"\n    if key not in my_dict:\n        my_dict[key] = value\n    return my_dict\n\nmy_dict = {'name': 'John'}\nkey = 'age'\nvalue = 18\n\nupdated_dict = add_key_value_pair(my_dict, key, value)\nprint(updated_dict) # {'name': 'John', 'age': 18}", "category": "Python"}, {"instruction": "Write a query in SQL to find all users with first name \"John\".", "input": "", "output": "SELECT * FROM users WHERE firstname = 'John';", "category": "Python"}, {"instruction": "Create a singleton class.", "input": "", "output": "class SingletonClass:\n    _instance = None\n \n    def __new__(self):\n        if not self._instance:\n            self._instance = super().__new__(self)\n        return self._instance\n\n# testing\nobj1 = SingletonClass()\nobj2 = SingletonClass()\n\nif obj1 is obj2:\n    print('obj1 and obj2 are the same instance')", "category": "Python"}, {"instruction": "Modify this code to make it a function which takes a list of numbers and returns their average.", "input": "list_of_numbers = [1, 4, 5, 6, 8]", "output": "def get_average(list_of_numbers):\n    \"\"\"Returns average of the given list of numbers\"\"\"\n    if list_of_numbers:\n        return sum(list_of_numbers)/len(list_of_numbers)\n    return\n\nlist_of_numbers = [1, 4, 5, 6, 8]\n\naverage = get_average(list_of_numbers)\n\nprint(average) # 5", "category": "Python"}, {"instruction": "Generate a web page which shows the top 10 trending movies of the year.", "input": "", "output": "<html>\n  <head>\n    <title>Top 10 Trending Movies of the Year</title>\n  </head>\n  <body>\n    <h1>Top 10 Trending Movies of the Year</h1>\n    <ul>\n      <li>Avengers: Endgame</li>\n      <li>Captain Marvel</li>\n      <li>Spider-Man: Far From Home</li>\n      <li>Toy Story 4</li>\n      <li>Joker</li>\n      <li>Aladdin</li>\n      <li>John Wick 3</li>\n      <li>The Lion King</li>\n      <li>Rocketman</li>\n      <li>Once Upon a Time in Hollywood</li>\n    </ul>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Design a class that can create objects with a unique ID.", "input": "", "output": "class UniqueID:\n    count = 0\n    def __init__(self):\n        UniqueID.count+=1\n        self.id = UniqueID.count", "category": "Python"}, {"instruction": "Generate a function to check for the largest common divisor between two numbers.", "input": "", "output": "def gcd(a, b): \n    if a == 0 : \n        return b \n    return gcd(b % a, a)", "category": "Python"}, {"instruction": "Create and initialize a two-dimensional array of size 5x5 with 0s.", "input": "", "output": "twoDArray = [[0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0]]", "category": "Python"}, {"instruction": "Generate a function to calculate the grade of a student based on their marks.", "input": "", "output": "def calculateGrade(score):\n    if score >= 90:\n        return \"A\"\n    elif score >= 80:\n        return \"B\"\n    elif score >= 70:\n        return \"C\"\n    elif score >= 60:\n        return \"D\"\n    else:\n        return \"F\"", "category": "Python"}, {"instruction": "Generate a random password which contains 8 characters including characters, digits, and symbols.", "input": "", "output": "import string\nimport random\n\ndef generate_password():\n    # get all letters and digits\n    chars = string.ascii_letters + string.digits + string.punctuation\n\n    # generate a 8 character password from chars\n    password = ''.join(random.sample(chars, 8))\n\n    return password\n\n# example\npassword = generate_password()\nprint(password) # >$z]e#43", "category": "Python"}, {"instruction": "Write a code in Python to convert a string of text to its equivalent uppercase characters.", "input": "str_lower_case = \"hello world\"", "output": "str_upper_case = str_lower_case.upper()", "category": "Python"}, {"instruction": "Generate a pseudorandom sequence of hexadecimal numbers with length 10.", "input": "", "output": "let hexValues = '0123456789abcdef';\nlet randomHexSeq = [];\nfor (let i = 0; i < 10; i++) {\n    randomHexSeq.push(hexValues[Math.floor(Math.random() * hexValues.length)]);\n}\n\nconsole.log(randomHexSeq.join(''));", "category": "Python"}, {"instruction": "Create an HTML form to ask the user for their email and password.", "input": "", "output": "<form action=\"authenticate.php\" method=\"post\">\n    Email: <input type=\"text\" name=\"email\" />\n    <br />\n    Password: <input type=\"password\" name=\"password\" /> \n    <br />\n    <input type=\"submit\" value=\"Submit\" />\n</form>", "category": "Python"}, {"instruction": "Create a program in Python to generate a random string using the given characters.", "input": "characters = 'abcdefghijklmnopqrstuvwxyz'", "output": "import random\n\ndef generate_random_string(characters):\n    random_string = \"\"\n    for i in range(10):\n        random_string += random.choice(characters)\n    return random_string\n\ncharacters = 'abcdefghijklmnopqrstuvwxyz'\nprint(generate_random_string(characters))", "category": "Python"}, {"instruction": "Edit the code in Python so that the function returns the highest odd number in the list.", "input": "def highest_odd_number(numbers):\n    highest = 0\n    for number in numbers:\n        if number % 2 != 0 and number > highest:\n            highest = number\n    return number", "output": "def highest_odd_number(numbers):\n    highest = 0\n    for number in numbers:\n        if number % 2 != 0 and number > highest:\n            highest = number\n    return highest", "category": "Python"}, {"instruction": "What is the complexity of an iterative mergesort algorithm?", "input": "", "output": "The complexity of an iterative mergesort algorithm is generally O(nlog(n)). It is a divide-and-conquer type of algorithm which splits a list of elements into its two halves, sorts each half recursively, and then merges the sorted halves. This means that the algorithm has a time complexity of O(log(n)) which is the number of splitting and merging operations and an additional O(n) complexity for the merging step.", "category": "Python"}, {"instruction": "Write code in Python to retrieve the top 10 Rated Movies in IMDB.", "input": "", "output": "import requests\nimport json\n\nurl = 'https://imdb-api.com/documentation/top-rated/all}'\nresponse = requests.get(url)\ndata = json.loads(response.text)\nmovies = data['results'][:10]\n\nfor movie in movies:\n    title = movie['title']\n    rating = movie['rating']\n    print(f\"{title}: {rating}\")", "category": "Python"}, {"instruction": "Given a list of integers, find the lengthiest common substring of the list.", "input": "[1, 2, 3, 4, 5, 3, 2, 6]", "output": "The longest common substring of the list [1, 2, 3, 4, 5, 3, 2, 6] is \"3, 2\". The length of the common substring is 3.", "category": "Python"}, {"instruction": "Create a bash program to list the contents of a directory in reverse alphabetical order.", "input": "", "output": "ls -lt", "category": "Python"}, {"instruction": "Write a code to infer the data type of an lambda expression.", "input": "", "output": "def infer_type(expression):\n     return type(eval(expression))", "category": "Python"}, {"instruction": "Create a HTML page containing an input field, a submit button and a table for displaying the results.", "input": "", "output": "<html>\n<head>\n    <title>A Sample HTML Page</title>\n</head>\n<body>\n    <form>\n        <input type=\"text\" id=\"input-field\" />\n        <input type=\"submit\" value=\"Submit\" />\n    </form>\n    <table>\n        <tr>\n            <th>Results</th>\n        </tr>\n        <tbody id=\"results-table\">\n        </tbody>\n    </table>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a query that returns the first 10 cities in the US table sorted by population in descending order.", "input": "", "output": "SELECT name, population \nFROM us_cities \nORDER BY population DESC \nLIMIT 10;", "category": "Python"}, {"instruction": "Write a function in Python to generate a random alphanumeric string with a length of 5 characters.", "input": "", "output": "import random\nimport string\n\ndef generate_random_str():\n    letters = string.ascii_letters + string.digits\n    return ''.join(random.choice(letters) for i in range(5))", "category": "Python"}, {"instruction": "Create a loop that prints out numbers from 0 to 15, except skip numbers 6, 7, and 12.", "input": "", "output": "for num in range(16):\n if num not in [6, 7, 12]:\n    print(num)", "category": "Python"}, {"instruction": "Transform the following Ruby code into its JavaScript equivalent.", "input": "books = [\"Learn Ruby\", \"Learn JavaScript\"]\n\nbooks.each do |book|\n puts book\nend", "output": "var books = [\"Learn Ruby\", \"Learn JavaScript\"];\n\nbooks.forEach(function(book) {\n console.log(book);\n});", "category": "Python"}, {"instruction": "Write a Java program to accept two integers and find the sum of the two numbers.", "input": "", "output": "import java.util.Scanner;\n\npublic class SumIntegers {\n\n    public static void main(String[] args) {\n        \n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"Enter two integers: \");\n        int first = scanner.nextInt();\n        int second = scanner.nextInt();\n\n        int sum = first + second;\n\n        System.out.println(\"The sum of the two numbers is: \" + sum);\n    }\n }", "category": "Python"}, {"instruction": "Write a SQL query to find the number of students living in zipcode 90001.", "input": "", "output": "SELECT COUNT(*) \nFROM students \nWHERE zipcode = 90001;", "category": "Python"}, {"instruction": "Create a HTML page to display a table in the following format.", "input": "", "output": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>Table</title>\n    </head>\n    <body>\n        <table>\n            <tr>\n                <th>Name</th>\n                <th>Address</th>\n                <th>Phone</th>\n            </tr>\n            <tr>\n                <td>John</td>\n                <td>123 Fake Street</td>\n                <td>123-456-7890</td>\n            </tr>\n            <tr>\n                <td>Jane</td>\n                <td>456 Real Street</td>\n                <td>098-765-4321</td>\n            </tr>\n        </table>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Write code in Python to create a dictionary with names as keys and phone numbers as values.", "input": "names = [\"Alice\", \"Bob\", \"Peter\", \"John\"]\nphone_numbers = [\"1234567\", \"7654321\", \"246810\", \"13579\"]", "output": "names = [\"Alice\", \"Bob\", \"Peter\", \"John\"]\nphone_numbers = [\"1234567\", \"7654321\", \"246810\", \"13579\"]\n\nname_and_phone = dict(zip(names, phone_numbers))\nprint(name_and_phone)", "category": "Python"}, {"instruction": "Reorganize the given Python code such that two functions are created.", "input": "def greet_to(name):\n    \"\"\"Print a greeting to the name provided.\"\"\"\n    # assert name is a string\n    assert isinstance(name, str), \"name must be a string\"\n    print(\"Hello, \" + name + \"!\")", "output": "def check_name(name):\n    \"\"\"Check whether the name is a string\"\"\"\n    assert isinstance(name, str), \"name must be a string\"\n\ndef greet_to(name):\n    \"\"\"Print a greeting to the name provided.\"\"\"\n    check_name(name)\n    print(\"Hello, \" + name + \"!\")", "category": "Python"}, {"instruction": "Create a HTML code to make a hyperlink of \"https://www.example.com\" that shows the text \"Click Here\".", "input": "", "output": "<a href=\"https://www.example.com\">Click Here</a>", "category": "Python"}, {"instruction": "Using the data provided, write a SQL query that returns all products with a price higher than $50.", "input": "Table: Products\n| productId | productName | price | \n|-----------|-------------|-------|\n| 101       |T-shirt      | 25    |\n| 102       | Table       | 90    |\n| 103       | Phone       | 30    |\n| 104       | Shoes       | 65    |\n| 105       |Laptop       | 120   |", "output": "SELECT * \nFROM Products \nWHERE price > 50;", "category": "Python"}, {"instruction": "Given a list of strings, write a function that filters out all strings that have length less than two characters.", "input": "my_list = [\"Hello\",\"Hi\",\"How\",\"Are\",\"You\"]", "output": "def filter_length(strings):\n    new_list = []\n    for string in strings:\n        if len(string) >= 2:\n            new_list.append(string)\n    return new_list\n\nmy_list = [\"Hello\",\"Hi\",\"How\",\"Are\",\"You\"]\n\nprint(filter_length(my_list))", "category": "Python"}, {"instruction": "Generate a class like this using SQLAlchemy.", "input": "class Foo:\n    id = Column(Integer, primary_key=True)\n    bar = Column(String)", "output": "from sqlalchemy import Column, Integer, String\n\nclass Foo(Base):\n    __tablename__ = 'foo'\n    id = Column(Integer, primary_key=True)\n    bar = Column(String)", "category": "Python"}, {"instruction": "Construct an object in JavaScript with the following format: {\"Name\": \"John\", \"Age\": 35}.", "input": "", "output": "my_object = {\n  \"Name\": \"John\",\n  \"Age\": 35\n}", "category": "Python"}, {"instruction": "Create a class in Java representing a car with two attributes, color and make.", "input": "", "output": "public class Car {\n \n private String color;\n private String make;\n \n public Car(String color, String make) {\n this.color = color;\n this.make = make;\n }\n \n public String getColor() {\n return color;\n }\n \n \n public String getMake() {\n return make;\n }\n \n}", "category": "Python"}, {"instruction": "Write a SQL query to select customer names whose city is Tokyo and age is greater than 25.", "input": "TABLE customers\nColumns:\ncustomer_id \nname\ncity\nage", "output": "SELECT name FROM customers WHERE city = 'Tokyo' AND age > 25", "category": "Python"}, {"instruction": "Write a PHP statement to create a MySQL table with four columns: id, name, age, gender.", "input": "", "output": "$sql = \"CREATE TABLE mytable (\n    id INT AUTO_INCREMENT PRIMARY KEY, \n    name VARCHAR(50),\n    age INT,\n    gender VARCHAR(15)\n)\";", "category": "Python"}, {"instruction": "Construct an API call in Python that returns information about a given book.", "input": "", "output": "import requests\n\nurl = \"http://openlibrary.org/api/books\"\n \nquerystring = {\"bibkeys\":\"ISBN:0201558025\",\"format\":\"json\",\"jscmd\":\"data\"}\n\nheaders = {\n    'cache-control': \"no-cache\",\n    }\n \nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n \nprint(response.text)", "category": "Python"}, {"instruction": "Using CSS, create a simple page layout with two columns of equal width.", "input": "width: 600px", "output": "<style>\n    #container {\n        width: 600px;\n    }\n\n    #container div {\n        float: left;\n        width: 50%;\n    }\n</style>\n\n<div id=\"container\">\n    <div>Content for the first column</div>\n    <div>Content for the second column</div>\n</div>", "category": "Python"}, {"instruction": "Construct an array in JavaScript containing five elements.", "input": "", "output": "my_array = [1,2,3,4,5]", "category": "Python"}, {"instruction": "Create a CSS class to center an element with a width of 100px.", "input": "", "output": ".center {\n  width: 100px;\n  margin: 0 auto;\n}", "category": "Python"}, {"instruction": "Convert this JSON string into a dictionary in Python: {\"Name\": \"John\", \"Age\": 35}.", "input": "{\"Name\": \"John\", \"Age\": 35}", "output": "my_dictionary = {\n  'Name': 'John',\n  'Age': 35\n  }", "category": "Python"}, {"instruction": "Construct an object in Python containing three elements.", "input": "", "output": "my_object = {\n  'element1': 1,\n  'element2': 2,\n  'element3': 3\n}", "category": "Python"}, {"instruction": "Replace the \u201cTODO\u201d comment in the code with the proper code to print each element of the list on a new line using Python.", "input": "input_list = [10, 15, 20, 25, 30]", "output": "for element in input_list:\n    print(element)", "category": "Python"}, {"instruction": "Write an efficient Python program to reverse a string.", "input": "testString = \"Hello World\"", "output": "def reverseString(testString): \n    reversedString = \"\"\n    for char in testString: \n        reversedString = char + reversedString\n    return reversedString\n\nprint(reverseString(testString))", "category": "Python"}, {"instruction": "Write an algorithm for finding the square root of a number.", "input": "", "output": "1. Start with an initial guess for the square root, \u2018x\u2019.\n2. Calculate the value of \u2018x2\u2019.\n3. If the square of \u2018x\u2019 is close enough to the given number, then \u2018x\u2019 is the square root of the given number.\n4. If the calculated value of \u2018x2\u2019 is not close enough to the given number, then reduce the difference between \u2018x2\u2019 and the given number by taking the average of \u2018x\u2019 and the given number divided by \u2018x\u2019.\n5. Repeat the steps 2, 3, and 4 until the calculated value of \u2018x2\u2019 is close enough to the given number.", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to open a pop-up window with a width of 600px and a height of 400px.", "input": "", "output": "var popupWindow = window.open(\"\", \"\", \"width=600,height=400\");", "category": "Python"}, {"instruction": "Store the text \"Hello World!\" in a variable in Ruby.", "input": "", "output": "my_text = \"Hello World!\"", "category": "Python"}, {"instruction": "Define a function that takes in two numbers, and calculates the power of the first number raised to the power of the second number.", "input": "base = 3\nexponent = 4", "output": "def power_calc(base, exponent):\n    return base ** exponent", "category": "Python"}, {"instruction": "Create a code that takes in a sentence and outputs counts of each word and its frequency (how often it occurred).", "input": "sentence = \"This is an example sentence to test the word count code.\"", "output": "def count_words(sentence):\n    word_count = {}\n    for word in sentence.split():\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count\n\ncount_words(sentence)", "category": "Python"}, {"instruction": "Create a code that take an input of the list of integers, and outputs even numbers from the list.", "input": "numbers = [2, 3, 4, 5, 6, 7, 8]", "output": "def get_even_numbers(numbers):\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n\nget_even_numbers(numbers)", "category": "Python"}, {"instruction": "Explain why the following C++ code would not compile.", "input": "string result = to_string(3.14);", "output": "The C++ standard library does not have a function named 'to_string', so this code will not compile. To convert a floating-point number to a string, you should use std::stof() instead.", "category": "Python"}, {"instruction": "Convert the following HTML string to a DOM tree using JavaScript.", "input": "<div><span>Hello World</span></div>", "output": "let parser = new DOMParser();\nlet div = parser.parseFromString('<div><span>Hello World</span></div>', 'text/html'); \nlet domTree = div.querySelector(\"div\");", "category": "Python"}, {"instruction": "Subtract the second number from the first.", "input": "8, 6", "output": "2", "category": "Python"}, {"instruction": "Print out the 8-bit binary representation of the given number.", "input": "50", "output": "0b00110010", "category": "Python"}, {"instruction": "Insert two new elements at the beginning of a list.", "input": "[\"a\", \"b\", \"c\", \"d\"]", "output": "[\"x\", \"y\", \"a\", \"b\", \"c\", \"d\"]", "category": "Python"}, {"instruction": "Return the given array with all elements reversed.", "input": "[1, 2, 3, 4, 5]", "output": "[5, 4, 3, 2, 1]", "category": "Python"}, {"instruction": "Convert the given integer to 8-bit binary.", "input": "13", "output": "0b00001101", "category": "Python"}, {"instruction": "Create a random phone number.", "input": "", "output": "(402) 904-6151", "category": "Python"}, {"instruction": "Provide an example for each of the following data types.", "input": "", "output": "Strings: \"Hello World!\"\n\nIntegers: 15\n\nFloats: 3.14\n\nDictionaries: {\"name\": \"John\", \"age\": 32} \n\nLists: [1, 2, 3, 4, 5]\n\nTuples: (\"Apple\", \"Banana\", \"Orange\")\n\nSets: {1, 2, 4, 8, 16}", "category": "Python"}, {"instruction": "Create a JavaScript object to store user data. The data includes name, email, and age.", "input": "", "output": "let user = {\n    name: \"John Doe\",\n    email: \"john@example.com\",\n    age: 32\n};", "category": "Python"}, {"instruction": "Edit the following HTML code to redirect the user to example.com on click.", "input": "<button>Click Here</button>", "output": "<button onclick=\"window.location.href='http://example.com'\">Click Here</button>", "category": "Python"}, {"instruction": "Create a Java class to represent a point (x, y) in a two-dimensional space.", "input": "", "output": "public class Point {\n    private int x;\n    private int y;\n\n    public Point(int x, int y) {\n        this.x = x;\n        this.y = y;\n    }\n    \n    public int getX() {\n        return x;\n    }\n\n    public int getY() {\n        return y;\n    }\n}", "category": "Python"}, {"instruction": "Design a JavaScript function for calculating the hypotenuse of a right triangle.", "input": "a = 6;\nb = 8;", "output": "function getHypotenuse(a,b){\n    return Math.sqrt(a*a + b*b);\n}", "category": "Python"}, {"instruction": "Create a Python program for identifying the common elements between two lists.", "input": "list1 = [1, 2, 3, 4]\nlist2 = [2, 4, 6, 8]", "output": "def commonElements(list1, list2):\n    list1_set = set(list1) \n    list2_set = set(list2) \n    common_elements = list1_set.intersection(list2_set) \n    return common_elements", "category": "Python"}, {"instruction": "Design a Java program for computing the average of a given list of numbers.", "input": "[1, 2, 4, 5]", "output": "public static double computeAverage(int[] numbers){\n    int sum = 0;\n    for(int i=0; i<numbers.length; i++){\n        sum += numbers[i];\n    }\n    double average =  (double)sum/numbers.length;\n    return average;\n}", "category": "Python"}, {"instruction": "Generate a JavaScript code snippet to toggle a given CSS class on an element with a given ID.", "input": "element_id: \"button\", class_name: \"button--highlighted\"", "output": "let button = document.getElementById(\"button\");\nbutton.classList.toggle(\"button--highlighted\");", "category": "Python"}, {"instruction": "Suggest a code segment to render a greeting message in a terminal window using Python.", "input": "", "output": "print(\"Hello World!\")", "category": "Python"}, {"instruction": "Suppose a functiona and a variable are already defined. Write a code statement to assign the value of the variable to the function.", "input": "function: my_function\nvariable: my_var", "output": "my_function(my_var)", "category": "Python"}, {"instruction": "Suggest an approach to debug a function written in Javascript that is not returning the expected result.", "input": "", "output": "One approach to debug the function would be to use console.log statements to print out the values of the variables inside the function. This would help identify where the problem is and what needs to be changed in order to get the expected result.", "category": "Python"}, {"instruction": "Generate an HTML page with a table containing all the elements of an array in JavaScript.", "input": "[1, 2, 3, 4]", "output": "<html>\n   <head>\n      <title>Array Table</title>\n   </head>\n   <body>\n      <table>\n         <tr>\n         <th>Element Value</th>\n         </tr>\n         <tr>\n            <td>1</td>\n         </tr>\n         <tr>\n            <td>2</td>\n         </tr>\n         <tr>\n            <td>3</td>\n         </tr>\n         <tr>\n            <td>4</td>\n         </tr>\n      </table>\n   </body>\n</html>", "category": "Python"}, {"instruction": "Construct a binary tree using an array representation in Python.", "input": "[4, 2, 6, 1, 3, 5, 7]", "output": "class TreeNode:\n    def __init__(self, data):\n        self.data = data  \n        self.left = None\n        self.right = None\n      \ndef constructTree(arr): \n    root = TreeNode(arr[0])\n    root.left = TreeNode(arr[1])\n    root.right = TreeNode(arr[2])\n    root.left.left = TreeNode(arr[3])\n    root.left.right = TreeNode(arr[4])\n    root.right.left = TreeNode(arr[5])\n    root.right.right = TreeNode(arr[6])\n    return root", "category": "Python"}, {"instruction": "Write a C program to print all numbers between 1 to 100 with the exception of those divisible by 3.", "input": "", "output": "#include <stdio.h>\n\nint main(void) {\n  for (int i=1; i<=100; i++) {\n    if (i % 3 != 0) \n      printf(\"%d \", i);\n  }\n  printf(\"\\n\");\n  return 0;\n}", "category": "Python"}, {"instruction": "Find the index of the smallest element in an array of integers using Java.", "input": "[7, 9, 5, 4, 1, 3]", "output": "int minElementIndex = 0;\nfor(int i=0; i < array.length; i++) {\n   if (array[i] < array[minElementIndex]) {\n       minElementIndex = i;\n   }\n}", "category": "Python"}, {"instruction": "Create a class to create a Complex Number with real and imaginary parts.", "input": "", "output": "class ComplexNumber:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n    \n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result", "category": "Python"}, {"instruction": "Uses a loop to create a list with the squares of the numbers from 0 to 5.", "input": "", "output": "list1 = []\nfor i in range(6):\n  list1.append(i**2)\n  \nprint(list1)\n# Output: [0, 1, 4, 9, 16, 25]", "category": "Python"}, {"instruction": "Write a Python program that can accept an array and returns the column-wise sum of the given array.", "input": "[[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9]]", "output": "def col_sum(arr):\n    col_sum_arr = []\n    for j in range(len(arr[0])):\n        s = 0\n        for i in range(len(arr)):\n            s += arr[i][j]\n        col_sum_arr.append(s)\n    return col_sum_arr\n\nprint(col_sum([[1, 2, 3],\n               [4, 5, 6],\n               [7, 8, 9]]))\n# Output: [12, 15, 18]", "category": "Python"}, {"instruction": "Create a PHP function that returns the difference between two dates.", "input": "$date1 = '2020-10-29';\n$date2 = '2021-02-02';", "output": "function get_date_difference($date1, $date2){\n   $date1_time = strtotime($date1);\n   $date2_time = strtotime($date2);\n   $difference = $date2_time - $date1_time;\n   return $difference;\n}", "category": "Python"}, {"instruction": "Transform this code fragment to use the appropriate data structure.", "input": "word = \"apple\"\nfor i in range(len(word)):\n    print(word[i])", "output": "word = \"apple\"\nfor letter in word:\n    print(letter)", "category": "Python"}, {"instruction": "Write a Nodejs function to print out the ASCII art for a given (input) text.", "input": "Foo", "output": "function printAsciiArt(text) {\n  const characters = text.split('');\n  let outputString = '';\n  characters.forEach(char => {\n    switch (char.toLowerCase()) {\n      case 'f':\n        outputString +=`", "category": "Python"}, {"instruction": "Construct a regular expression to match and extract street names from a given address.", "input": "", "output": "^.*\\s(.*?)\\s.*$", "category": "Python"}, {"instruction": "Suggest a command to check for any available updates for a package called 'foo' using the package manager 'apt'?", "input": "", "output": "sudo apt-get update foo", "category": "Python"}, {"instruction": "Write a code statement to sort an array in ascending order using JavaScript.", "input": "array = [3, 1, 5, 2, 4]", "output": "array.sort((a, b) => a - b);", "category": "Python"}, {"instruction": "Where would you place the import statement when using the pandas library in Python?", "input": "", "output": "The import statement should be placed at the beginning of the program, before any other statements are executed. This ensures that the Pandas library is available when we write code referring to the Pandas library.", "category": "Python"}, {"instruction": "Suggest a code segment to generate a random integer in the range of 0 to 100 using Python.", "input": "", "output": "import random\n\nrandom_int = random.randint(0, 100)", "category": "Python"}, {"instruction": "Rewrite the following C++ code using object-oriented programming principles.", "input": "int x = 3, y = 4;\ncout << x + y << endl;", "output": "class Point {\n public:\n  Point(int x, int y) : x_(x), y_(y) {}\n\n  int getX() const { return x_; }\n  int getY() const { return y_; }\n\n  int getSum() const { return x_+ y_; }\n\n private:\n  int x_, y_;\n}\n\nint main() {\n  Point p(3, 4);\n  cout << p.getSum() << endl;\n  \n  return 0;\n}", "category": "Python"}, {"instruction": "Create a dictionary that has each unique word as the key, and the number of times the word appears as the value.", "input": "The quick brown fox jumped over the lazy dog.", "output": "words_counts = {\n    \"The\": 1,\n    \"quick\": 1,\n    \"brown\": 1,\n    \"fox\": 1,\n    \"jumped\": 1,\n    \"over\": 1,\n    \"the\": 1,\n    \"lazy\": 1,\n    \"dog.\": 1\n}", "category": "Python"}, {"instruction": "Create a Java program for solving quadratic equations.", "input": "", "output": "import java.lang.Math;\n\npublic class QuadraticEquation {\n\n  public static void main(String[] args) {\n    double a = 1;\n    double b = -2;\n    double c = -8;\n    double x1, x2;\n  \n    double discr = b * b - 4 * a * c;\n    if (discr > 0)\n    {\n      x1 = ( - b + Math.sqrt(discr)) / (2 * a);\n      x2 = ( - b - Math.sqrt(discr)) / (2 * a);\n      System.out.println(\"x1 = \" + x1 + \", x2 = \" + x2);\n    }\n    else if (discr == 0)\n    {\n      x1 = ( - b + Math.sqrt(discr)) / (2 * a);\n      System.out.println(\"x1 = x2 =\" + x1);\n    }\n    else {\n      System.out.println(\"No real roots\");\n    }\n  }\n}", "category": "Python"}, {"instruction": "Design a class in Python that creates objects based on user input.", "input": "", "output": "class UserInput:\n    def __init__(self):\n        self.data = None\n\n    def get_data(self):\n        self.data = input(\"Enter something: \")\n        return self.data", "category": "Python"}, {"instruction": "Write a SQL statement to retrieve the name and age of all employees who are older than 33.", "input": "", "output": "SELECT name, age FROM employees WHERE age > 33;", "category": "Python"}, {"instruction": "Convert this NumPy array to a list.", "input": "import numpy as np \nmy_array = np.array([[1,2,3], [4,5,6], [7,8,9]])", "output": "def convert_array(array):\n    \"\"\"\n    This function takes a NumPy array and\n    converts it to a list.\n    \"\"\"\n    return array.tolist()", "category": "Python"}, {"instruction": "Given a string, classify the sentiment of the text as either positive or negative.", "input": "The GPT model is amazing.", "output": "def classify_sentiment(string):\n    \"\"\"\n    This function takes a string and \n    classifies its sentiment as either\n    positive or negative.\n    \"\"\"\n    if string.lower().find(\"positive\") != -1 or string.lower().find(\"amazing\") !=-1:\n        return \"positive\"\n    elif string.lower().find(\"negative\") != -1:\n        return \"negative\"\n    else:\n        return \"neutral\"", "category": "Python"}, {"instruction": "Given a string, write the appropriate regex pattern that checks if the string contains any digit.", "input": "", "output": "import re\n\ndef check_digits(string):\n  \"\"\"\n  This function takes a string and\n  checks if it contains any digit.\n  \"\"\"\n  regex_pattern = r\"[0-9]\" \n  return bool(re.search(regex_pattern, string))", "category": "Python"}, {"instruction": "Generate a sentence from a given sentence input, using a GPT-3 model.", "input": "This is a sentence.", "output": "<noinput>\nOutput:\nThis sentence is a great example of how powerful GPT-3 models are at generating meaningful sentences.", "category": "Python"}, {"instruction": "Generate the appropriate code for a for-loop that iterates through a list.", "input": "list_words = [\"Hello\", \"World\", \"GPT\", \"Model\"]", "output": "for word in list_words:\n    print(word)", "category": "Python"}, {"instruction": "Establish a database connection using the inputs given.", "input": "hostname: localhost \nusername: GPTuser \npassword: GPT123 \ndatabase: GPT", "output": "# Connect to MySQL\nimport mysql.connector\n\n# Establish database connection\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"GPTuser\",\n  passwd=\"GPT123\",\n  database=\"GPT\"\n)\nprint(mydb)", "category": "Python"}, {"instruction": "Suggest a completion for the following to check if a given key exists in a dictionary or not.", "input": "my_dict = {\"name\": \"John\", \"age\": 27}\n# Do something", "output": "my_dict = {\"name\": \"John\", \"age\": 27}\nif \"name\" in my_dict:\n    print(\"Key present\")", "category": "Python"}, {"instruction": "Write a loop to compute the total number of fruits of type \"Apple\".", "input": "var fruits = [{ type: 'Mango', count: 10}, {type: 'Apple', count: 5}, {type: 'Strawberry', count: 8}]", "output": "let appleCount = 0;\nfor(let i = 0; i < fruits.length; i++) {\n    if(fruits[i].type === \"Apple\") {\n        appleCount += fruits[i].count;\n    }\n}", "category": "Python"}, {"instruction": "Suggest a completion for achieving the following without using a `for` loop.", "input": "my_list = [1, 2, 3]\n# Do something", "output": "my_list = [1, 2, 3]\nresult = list(map(lambda x: x ** 2, my_list))", "category": "Python"}, {"instruction": "Modify the following code to skip the test if the platform is not windows.", "input": "import platform\n\ndef test_windows():\n    if platform.system() == 'Windows':\n        # Do test", "output": "import platform\n\ndef test_windows():\n    if platform.system() != 'Windows':\n        return\n    # Do test", "category": "Python"}, {"instruction": "Convert the following SQL query to Pandas to group the data by Country.", "input": "SELECT Country, COUNT(*) as Total_Orders\nFROM Orders\nGROUP BY Country", "output": "import pandas as pd\n\ndf = pd.read_sql_query('''SELECT Country, COUNT(*) as Total_Orders\nFROM Orders\nGROUP BY Country''', conn)\n\ndf.groupby('Country').agg({'Total_Orders':['count']})", "category": "Python"}, {"instruction": "Create a class in Python to represent an employee and define the attributes.", "input": "", "output": "class Employee:\n    def __init__(self, id, name, salary, job_title):\n        self.id = id\n        self.name = name\n        self.salary = salary\n        self.job_title = job_title", "category": "Python"}, {"instruction": "Create a code which takes in a list of strings, and returns a string with all the characters of the strings sequentially.", "input": "strings = [\"Hello\", \"World\"]", "output": "def merge_strings(strings):\n    merged_string = ''\n    for string in strings:\n        merged_string += string\n    return merged_string\n\nmerge_strings(strings)", "category": "Python"}, {"instruction": "Create a code to input a sentence and output the number of vowels in the sentence.", "input": "sentence = \"This is a sentence with vowels.\"", "output": "def count_vowels(sentence):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in sentence.lower():\n        if char in vowels:\n            count += 1\n    return count\n\ncount_vowels(sentence)", "category": "Python"}, {"instruction": "Write a code that takes in a list of names and creates a dictionary with the names as keys and their lengths as values.", "input": "names = [\"Mary\", \"John\", \"Mike\"]", "output": "def name_length_dict(names):\n    name_length_dict = dict()\n    for name in names:\n        name_length_dict[name] = len(name)\n    return name_length_dict \n\nname_length_dict(names)", "category": "Python"}, {"instruction": "Create a code to input a 2D matrix and output \nthe sum of each row.", "input": "[[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9]]", "output": "def row_sum(matrix):\n    row_sums = []\n    for row in matrix:\n        row_sum = 0 \n        for col in row:\n            row_sum += col\n        row_sums.append(row_sum)\n    return row_sums\n    \nrow_sum(matrix)", "category": "Python"}, {"instruction": "Suggest a completion for the following to convert a date string to datetime format.", "input": "import datetime \n\ndef convert_date_string(date_string):", "output": "import datetime \n\ndef convert_date_string(date_string):\n   return datetime.datetime.strptime(date_string, \"%d-%m-%y\")", "category": "Python"}, {"instruction": "Generate a HTML table to display the following data.", "input": "Row1: Name: Harry Age: 18 \nRow2: Name: Jane Age: 20", "output": "<html>\n    <head>\n        <title>Data Table</title>\n    </head>\n    <body>\n        <h1>Data Table</h1>        \n        <table>\n            <tr>\n                <th>Name</th>\n                <th>Age</th>\n            </tr>\n            <tr>\n                <td>Harry</td>\n                <td>18</td>\n            </tr>\n            <tr>\n                <td>Jane</td>\n                <td>20</td>\n            </tr>\n        </table>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Given a document, remove all numbers from the content.", "input": "Hello! This is a test. There are 1, 2, 3 numbers here.", "output": "Hello! This is a test. There are  numbers here.", "category": "Python"}, {"instruction": "Create a function which takes a 3x3 2D array and returns its transpose.", "input": "let arr = [[0, 1, 2],\n           [3, 4, 5],\n           [6, 7, 8]]", "output": "def transposeMatrix(arr):\n    let t_arr = [[0, 0, 0],\n                 [0, 0, 0],\n                 [0, 0, 0]];\n    \n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            t_arr[j][i] = arr[i][j]\n    \n    return t_arr", "category": "Python"}, {"instruction": "Create a function in Python that takes in a string as an argument and replaces all occurances of 'e' with an asterisk ('*').", "input": "mystring = 'hello world'", "output": "def replace_e(mystring):\n    return mystring.replace('e', '*')", "category": "Python"}, {"instruction": "Sort the following list of numbers in ascending order: 53, 8, 12, 4, 21.", "input": "53, 8, 12, 4, 21", "output": "4, 8, 12, 21, 53", "category": "Python"}, {"instruction": "How to convert a pandas DataFrame to a python list?", "input": "", "output": "The DataFrame can be converted to a list using the tolist() method. For example:\n\nimport pandas as pd\n\ndf = pd.DataFrame([[1, 2], [3, 4], [5, 6]])\nmy_list = df.tolist()\nprint(my_list)\n\n# Output: [[1, 2], [3, 4], [5, 6]]", "category": "Python"}, {"instruction": "Create a 3x2 matrix using nested lists.", "input": "", "output": "matrix = [[1, 2], [3, 4], [5, 6]]", "category": "Python"}, {"instruction": "Describe a use case of the ternary operator in Python.", "input": "", "output": "The ternary operator can be used to conditionally assign a value. For example, the following code assigns max to the larger value of x and y:\n\nmax = x if x > y else y", "category": "Python"}, {"instruction": "Compare two objects and sort them using the inbuilt sorting function.", "input": "list1 = [7, 3, 5, 9]\nlist2 = [4, 8, 2, 10]", "output": "sorted_lists = sorted(list1 + list2) \nprint(sorted_lists)\n\n# Output: [2, 3, 4, 5, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "How many types of methods are available in Python?", "input": "", "output": "There are two types of methods available in Python: instance methods and class methods.", "category": "Python"}, {"instruction": "Implement a function to check if two binary trees are same or not.", "input": "", "output": "function isSameTree(p, q) {\n    if (p === null && q === null) {\n        return true;\n    }\n    if (p === null || q === null || p.val !== q.val) {\n        return false;\n    }\n    return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\n}", "category": "Python"}, {"instruction": "Which Boolean value is returned by == when two operands are equal?", "input": "", "output": "The Boolean value returned by == when two operands are equal is True.", "category": "Python"}, {"instruction": "Create a SQL query for finding the number of orders made each day in a given month.", "input": "orders_table = 'orders'\nmonth = '05'\nyear = '2021'", "output": "SELECT COUNT(order_id) AS orders, DAY(date) AS `day`\nFROM orders_table \nWHERE MONTH(date) = '05' \n        AND YEAR(date) = '2021'\nGROUP BY DAY(date);", "category": "Python"}, {"instruction": "Write an R script to generate a chart to compare the sales between the current month and the previous month.", "input": "data1 = c(10,15,3,4,7,10,12)\ndata2 = c(23,20,21,19,15,8,11)", "output": "library(ggplot2)\n\ndf <- data.frame(Current=data1, Previous=data2)\n\nggplot(df, aes(x=rownames(df))) + \ngeom_col(aes(y=Current, fill=\"Current Month\"), position=position_dodge(), width=0.5, color=\"black\") +\ngeom_col(aes(y=Previous, fill=\"Previous Month\"), position=position_dodge(), width=0.5, color=\"black\") +\nlabs(fill = \"Sales\") +\nylab(\"Sales\")", "category": "Python"}, {"instruction": "Create a C++ code to generate 10 random numbers between 1-20 and store them in an array.", "input": "", "output": "#include <iostream> \n#include <cstdlib> \n#include <ctime> \n\nusing namespace std; \n  \nint main(){ \n    int array[10];\n    srand(time(0)); \n  \n    // Generating random numbers \n    for (int i = 0; i < 10; i++) { \n        array[i] = (rand() % 20) + 1; \n    } \n  \n    // Printing the obtained random numbers \n    cout << \"Random numbers are: \"; \n    for (int i = 0; i < 10; i++) { \n        cout << array[i] << \" \"; \n    } \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Write a MySQL query to select the name of the customer and the total sales made by each customer in a given month.", "input": "customers_table = 'customers';\nsales_table = 'sales';\nmonth = '04';\nyear = '2021';", "output": "SELECT customers.name, sum(sales.amount) as total_sales\nFROM customers\nINNER JOIN sales \nON customers.customer_id = sales.customer_id\nWHERE MONTH(sales.date) = '04' \n    AND YEAR(sales.date) = '2021'\nGROUP BY customers.name", "category": "Python"}, {"instruction": "Compose a query to find the titles of the movies released in 2021 which produce revenue more than $2,000,000.", "input": "movies_table = 'movies'", "output": "SELECT title\nFROM movies_table\nWHERE year = 2021 AND revenue > 20000000", "category": "Python"}, {"instruction": "Given a list of strings, write a Python program to capitalize the first letter of each word.", "input": "words = ['The', 'quick', 'brown', 'fox']", "output": "capitalized_words = [word.capitalize() for word in words]\nprint(capitalized_words) # Output: ['The', 'Quick', 'Brown', 'Fox']", "category": "Python"}, {"instruction": "Write a JavaScript program to calculate the sum of each individual index value from two given arrays of equal length.", "input": "let array1 = [1, 0, 2, 3, 4];\nlet array2 = [3, 5, 2, 1, 4];", "output": "let sumArray = [];\n\nfor (let i = 0; i < array1.length; i++) {\n    sumArray.push(array1[i] + array2[i]);\n}\n\nconsole.log(sumArray); // Output: [4, 5, 4, 4, 8]", "category": "Python"}, {"instruction": "Write a Angular typescript code to validate the input form.", "input": "", "output": "import { FormGroup, FormControl, Validators } from '@angular/forms';\n\nthis.myForm = new FormGroup({\n    userName: new FormControl('', Validators.required),\n    lastName: new FormControl('', Validators.required),\n    email: new FormControl('', [Validators.required, Validators.email])\n});", "category": "Python"}, {"instruction": "You need to check a given list of strings to determine it contains all valid English words. Output true if so, output false otherwise.", "input": "list = [\"hello\", \"world\", \"fksgks\"]", "output": "import requests \n  \n# Creating list of words \nlist = [\"hello\", \"world\", \"fksgks\"] \n  \n# Iterating in the list of words \nfor i in list: \n    url = \"https://www.dictionary.com/browse/\"+i \n    try: \n        webpage = requests.get(url) \n  \n        # Valid word if request status  \n        # code is 200 \n        if webpage.status_code == 200: \n            valid = True\n        else: \n            valid = False\n    except: \n        valid = False\n              \nif valid == False: \n    print(\"False\")\nelse:\n    print(\"True\")", "category": "Python"}, {"instruction": "Write a SQL query to display the names of all employees who belong to department 'IT'.", "input": "", "output": "SELECT FirstName, LastName\nFROM Employees \nWHERE Department = 'IT';", "category": "Python"}, {"instruction": "Update the given list of numbers such that the first number is subtracted from the second one, the third is multiplied by the fourth, and the result is added to the fifth.", "input": "[2, 5, 4, 7, 9]", "output": "[2, 5, 28, 7, 37]", "category": "Python"}, {"instruction": "Construct an HTML form to get user input for first name, last name, phone number and email address.", "input": "", "output": "<form action=\"\">\n    First Name: <input type=\"text\" name=\"first_name\" required><br>\n    Last Name: <input type=\"text\" name=\"last_name\" required><br>\n    Phone Number: <input type=\"text\" name=\"phone_number\" required><br>\n    Email Address: <input type=\"email\" name=\"email_address\" required><br>\n    <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Create a Python function to swap key-value pairs in a dictionary.", "input": "", "output": "def swap_dict_keys(d):\n    return {v: k for k, v in d.items()}", "category": "Python"}, {"instruction": "Provide an example of a JSON structure which has the same data as the following Python dictionary.", "input": "user_info = {\n    'name': 'John',\n    'age': 42,\n    'address': {\n        'street': '123 Main Street',\n        'city': 'San Francisco',\n        'state': 'CA'\n    }\n}", "output": "{\n    \"name\": \"John\",\n    \"age\": 42,\n    \"address\": {\n        \"street\": \"123 Main Street\",\n        \"city\": \"San Francisco\",\n        \"state\": \"CA\"\n    }\n}", "category": "Python"}, {"instruction": "How can you execute the following Python code to get the output printed?", "input": "def greeting():\n    print(\"Hello World!\")", "output": "The code can be executed by calling the function greeting:\n\ngreeting() #prints \"Hello World!\"", "category": "Python"}, {"instruction": "Draft a Python code to sort an array containing 3 integers in ascending order.", "input": "Array=[5,2,8]", "output": "Array.sort()\nprint(Array) # prints [2,5,8]", "category": "Python"}, {"instruction": "Construct a C++ class to store a matrix.", "input": "", "output": "#include <cstdio> \n#include <vector> \nusing namespace std; \n\nclass Matrix { \n    private: \n        vector<vector<int>> matrix; \n        int rows, cols; \n  \n    public: \n        // Default constructor \n        Matrix(int r = 0, int c = 0); \n        \n        // Parametrized constructor\n        Matrix(int r, int c, int ver[][c]);  \n  \n        // Copy constructor \n        Matrix(Matrix& orig); \n  \n        // Destructor \n        ~Matrix(); \n  \n        // Access matrix elements \n        int operator()(const int& row, \n                       const int& col) const; \n        int& operator()(const int& row, \n                        const int& col); \n  \n        // Utility functions \n        int getRows() const; \n        int getCols() const; \n}; \n  \nMatrix::Matrix(int r, int c) \n    : rows(r), cols(c) \n{ \n    // Allocate memory for the matrix \n    matrix.resize(rows); \n    for (int i = 0; i < rows; i++) \n        matrix[i].resize(cols); \n} \n\nMatrix::Matrix(int r, int c, int ver[][c])\n    : rows(r), cols(c)\n{\n    // Allocate memory for the matrix\n    matrix.resize(rows);\n    for (int i = 0; i < rows; i++)\n        matrix[i].resize(cols);\n    \n    // Copy the matrix\n    for (int i = 0; i < rows; i++) \n        for (int j = 0; j < cols; j++) \n            matrix[i][j] = ver[i][j]; \n} \n  \n  \nMatrix::Matrix(Matrix& orig) \n    : Matrix(orig.getRows(), orig.getCols()) \n{ \n    for (int i = 0; i < rows; i++) \n        for (int j = 0; j < cols; j++) \n            matrix[i][j] = orig(i, j); \n} \n  \nMatrix::~Matrix()\n{\n    rows = 0;\n    cols = 0;\n    matrix.clear();\n}\n  \nint Matrix::getRows() const\n{ \n    return rows; \n} \n  \nint Matrix::getCols() const\n{ \n    return cols; \n} \n  \nint Matrix::operator()(const int& row, \n                       const int& col) const\n{ \n    return matrix[row][col]; \n} \n  \nint& Matrix::operator()(const int& row, \n                        const int& col)\n{ \n    return matrix[row][col]; \n}", "category": "Python"}, {"instruction": "Create an expression statement in Java to check if a given number is between 10 and 20", "input": "15", "output": "if (num >= 10 && num <= 20) {\n  // code\n}", "category": "Python"}, {"instruction": "Create a PHP code snippet to determine the length of a string", "input": "", "output": "$string = \"Hello World!\";\necho strlen($string);", "category": "Python"}, {"instruction": "Generate a Java code snippet for declaring an empty list", "input": "", "output": "List list = new ArrayList<>();", "category": "Python"}, {"instruction": "Generate an SQL statement to select employee Id and name from the 'Employee' table", "input": "", "output": "SELECT employee_id, name\nFROM Employee;", "category": "Python"}, {"instruction": "Generate a correct C# code to randomly generate a 5 letter string", "input": "", "output": "string chs = \"abcdefghijklmnopqrstuvwxyz\";\nstring RandomString = \"\";\nRandom rd = new Random();\nfor (int i = 0; i < 5; i++)\n{\nRandomString += chs[rd.Next(0,26)];\n}\nConsole.WriteLine(RandomString);", "category": "Python"}, {"instruction": "Explain the difference between the 'for' and 'while' loop", "input": "", "output": "The main difference between a 'for' loop and a 'while' loop is that a 'for' loop is used to iterate through a set of numbers, whereas a 'while' loop is used to continue executing a code block until the condition becomes false. A 'for' loop is generally used when there is an established number of iterations or until a certain condition is met, whereas a 'while' loop is used when the exact number of iterations is not known. Additionally, 'for' loops usually contain a counter that is initialized, tested and incremented at the beginning of each iteration, whereas a 'while' loop will only check its condition at the beginning of each iteration.", "category": "Python"}, {"instruction": "Make changes to the following code to include a 'break' statement.", "input": "while True:\n    print(\"Hello\")", "output": "while True:\n    print(\"Hello\")\n    if condition is met: \n        break", "category": "Python"}, {"instruction": "Make changes to the following code so it prints out the range from 0 to 9.", "input": "for i in range(10):\n    print(i)", "output": "for i in range(10):\n    print(i+1)", "category": "Python"}, {"instruction": "Create an object in Python which will store the following information", "input": "Name: John Doe\nAge: 34\nGender: Male", "output": "person = {\n  'name': 'John Doe',\n  'age': 34,\n  'gender': 'Male'\n}", "category": "Python"}, {"instruction": "Construct a JavaScript function to reverse the characters of a string.", "input": "", "output": "function reverseString(str) {\n    return str.split('').reverse().join('');\n}", "category": "Python"}, {"instruction": "Complete the JSON structure with correct syntax to store the following Film object.", "input": "Film\n- title: The Godfather\n- genre: Drama\n- year: 1972", "output": "{\n    \"film\": {\n        \"title\": \"The Godfather\",\n        \"genre\": \"Drama\",\n        \"year\": 1972\n    }\n}", "category": "Python"}, {"instruction": "Create a function to take two input strings and return the longest common substring.", "input": "Input 1: ababcd\nInput 2: abxyz", "output": "def longest_common_substring(str1, str2):\n    # keep track of the longest substring\n    longest_substring = \"\"\n    \n    # iterate over each character in the first string\n    for i in range(len(str1)):\n        # iterate over each sub sequence of the first string\n        for j in range(i+1, len(str1)+1):\n            # compare the substring to each substring in the second string\n            for k in range(len(str2)-(j-i)+1):\n                # update longest_substring if we have a longer common substring\n                if str1[i:j] == str2[k:k+(j-i)] and len(str1[i:j]) > len(longest_substring):\n                    longest_substring = str1[i:j]\n\n    return longest_substring", "category": "Python"}, {"instruction": "Identify errors in the following code and suggest corrections.", "input": "def fucntion_1():\n    param1 = input(\"enter-parameter\")\n    print(\"The parameter is:\" + param1)", "output": "def function_1():\n    param1 = input(\"Enter parameter: \")\n    print(\"The parameter is: \" + param1)\n\nThe issue with the code is that it has a misspelling in the function name (fucntion_1 instead of function_1). The input prompt also lacks a space after \"Enter-parameter\" and a colon should be used at the end of the prompt. Finally, there should be a space between \"The parameter is:\" and the variable param1 in the print statement.", "category": "Python"}, {"instruction": "Suggest an algorithm for checking if a given key exists in a binary search tree in Java.", "input": "", "output": "// Returns true if key is present in given BST \nboolean search(Node root, int key) \n{ \n    // Base Case \n    if (root == null) \n        return false; \n  \n    // If key is present at root \n    if (root.key == key) \n        return true; \n  \n    // Recursive calls for non-empty subtrees \n    boolean left = search(root.left, key); \n    boolean right = search(root.right, key); \n  \n    return left || right; \n}", "category": "Python"}, {"instruction": "Output the top 3 values of the given array in descending order.", "input": "nums = [4, 8, 2, 10, 9, 6, 1]", "output": "nums.sort()\ntop_3 = nums[-3:]\n\n # reverse to great in descending order\ntop_3.reverse()\n\nprint(top_3) # Output [10, 9, 8]", "category": "Python"}, {"instruction": "Build a classifier in Python using the Scikit-learn library.", "input": "", "output": "# Load the libraries\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\n\n# Split the data\nX = data.iloc[:, :-1]\ny = data.iloc[:, -1]\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, random_state=42)\n\n# Train the model\nsvm_model = SVC(gamma='auto')\nsvm_model.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_predictions = svm_model.predict(X_test)\n\n# Evaluate Model Performance\nprint(\"Accuracy:\", metrics.accuracy_score(y_test, y_predictions))", "category": "Python"}, {"instruction": "Implement a simple machine learning algorithm in R to classify a given dataset.", "input": "", "output": "# Load the libraries\nlibrary(caret)\nlibrary(Metrics)\n\n# Create the training and testing sets\nsplit = createDataPartition(iris$Species, p = 0.75, list = FALSE)\ntrain_set = iris[split, ]\ntest_set = iris[-split, ]\n\n# Train the model\nmodel = train(Species ~ ., data = train_set, method = \"rpart\")\n\n# Make Predictions on the test set\npredictions = predict(model, newdata = test_set)\n\n# Evaluate Model Performance\nconfusionMatrix(predictions, test_set$Species)", "category": "Python"}, {"instruction": "Suggest an algorithm in Python for sorting an array of integers from smallest to largest.", "input": "nums = [3, 7, 5, 6, 1]", "output": "def sortInts(nums): \n    # Traverse through all array elements \n    for i in range(len(nums)): \n  \n        # Last i elements are already in place \n        for j in range(0, len(nums)-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if nums[j] > nums[j+1] : \n                nums[j], nums[j+1] = nums[j+1], nums[j] \n                \n    return nums", "category": "Python"}, {"instruction": "Write a function in Python that should take two lists and return the intersection.", "input": "list_a = [1, 2, 3, 4, 5]\nlist_b = [2, 5, 7, 10]", "output": "def intersection(list_a, list_b):\n    return [element for element in list_a if element in list_b]", "category": "Python"}, {"instruction": "Construct an algorithm to print out the binomial coefficients of a given number n.", "input": "", "output": "def binomial_coefficients(n):\n    coefficients = []\n    for i in range(n+1):\n        coefficients.append(int(math.factorial(n) / (math.factorial(i)*math.factorial(n-i))))\n    return coefficients\n\n# Usage:\nprint(binomial_coefficients(7)) # Outputs [1,7,21,35,35,21,7,1]", "category": "Python"}, {"instruction": "Convert this program from procedural to object-oriented.", "input": "def calculate_mortgage(principle, years, rate):\n    # calculation\n    return monthly_payment\n\ndef calculate_interest_rate(value):\n    # calculation\n    return interest_rate", "output": "class MortgageCalculator:\n    def __init__(self, principle, years, rate):\n        self.principle = principle\n        self.years = years\n        self.rate = rate\n    \n    def calculate_mortgage(self):\n        # calculation\n        return monthly_payment\n\n    def calculate_interest_rate(self, value):\n        # calculation\n        return interest_rate", "category": "Python"}, {"instruction": "Write a class in Java to calculate the perimeter and area of a rectangle.", "input": "", "output": "public class Rectangle { \n    int length, width; \n  \n    // Constructor \n    public Rectangle(int length, int width) \n    { \n        this.length = length; \n        this.width = width; \n    }\n\n    public int getPerimeter() \n    { \n        // Calculate perimeter \n        return 2*(length + width); \n    } \n  \n    public int getArea() \n    { \n        // Calculate area \n        return length*width; \n    } \n}", "category": "Python"}, {"instruction": "Create a program that reads an array of numbers and prints the maximum and minimum values.", "input": "[3.2, 8.5, 1.6, 6.3]", "output": "arr = [3.2, 8.5, 1.6, 6.3]\nmax_val = arr[0]\nmin_val = arr[0]\n\nfor num in arr:\n    if num > max_val:\n        max_val = num\n    if num < min_val:\n        min_val = num\n    \nprint(\"Max:\", max_val) # Outputs 8.5\nprint(\"Min:\", min_val) # Outputs 1.6", "category": "Python"}, {"instruction": "Edit the following code to print out the maximum value from an array of numbers.", "input": "[7, 8, 2, 9, 4]", "output": "arr = [7, 8, 2, 9, 4]\nmax_val = 0\nfor num in arr:\n    if num > max_val:\n        max_val = num\nprint(max_val) # Outputs 9", "category": "Python"}, {"instruction": "Identify the highest pricing plan from the given list.", "input": "plans = [{\"name\": \"Basic\", \"price\": 10},\n         {\"name\": \"Pro\", \"price\": 20},\n         {\"name\": \"Premium\", \"price\": 30}\n        ]", "output": "def highest_priced_plan(plans):\n    max_price = 0\n    max_name = \"\"\n\n    for plan in plans:\n        if plan[\"price\"] > max_price:\n            max_price = plan[\"price\"]\n            max_name = plan[\"name\"]\n\n    return max_name", "category": "Python"}, {"instruction": "Calculate the volume of a cuboid given the edges.", "input": "Length = 4\nWidth = 5\nHeight = 2", "output": "def volume_of_cuboid(length, width, height):\n    volume = length * width * height \n\n    return volume", "category": "Python"}, {"instruction": "Compare two strings and return \"bigger\", \"smaller\" or \"equal\" depending on the lexicographical order.", "input": "string1 = \"zebra\"\nstring2 = \"zeal\"", "output": "def compare_strings(string1, string2):\n    i = 0\n    length = min(len(string1), len(string2))\n\n    while i < length:\n        if string1[i] < string2[i]:\n            return 'smaller'\n        elif string1[i] > string2[i]:\n            return 'bigger'\n        i += 1\n    \n    if len(string1) > len(string2):\n        return 'bigger'\n    else:\n        return 'equal'", "category": "Python"}, {"instruction": "Implement quick sort to sort the given array of integers.", "input": "[9, 5, 8, 1, 3, 6, 7]", "output": "def partition(nums, low, high):\n    i = low-1\n    # set pivot as last element in array\n    pivot = nums[high]\n    \n    for j in range(low, high):\n        # if element is smaller than pivot, increment i and swap elements\n        if nums[j] < pivot:\n            i += 1\n            nums[i], nums[j] = nums[j], nums[i]\n\n    # swap pivot \n    nums[i+1], nums[high] = nums[high], nums[i+1] \n    return i+1\n\ndef quick_sort(nums, low, high):\n    if low < high:\n        # set partition index\n        part_idx = partition(nums, low, high)\n        # sort left side of partition index \n        quick_sort(nums, low, part_idx-1)\n        # sort right side of partition index \n        quick_sort(nums, part_idx+1, high)\n\nnums = [9, 5, 8, 1, 3, 6, 7]\nquick_sort(nums, 0, len(nums)-1)\nprint(\"Sorted array:\", nums)", "category": "Python"}, {"instruction": "Given an array of integers, implement insertion sort to sort the array.", "input": "[1, 4, 2, 7, 5]", "output": "def insertion_sort(nums):\n    # iterate over the array\n    for i in range(1, len(nums)):\n        j = i-1\n        # hold element to be inserted\n        temp = nums[i]\n        # shift elements right if greater than element to be inserted\n        while nums[j] > temp and j >= 0: \n            nums[j+1] = nums[j]\n            j -= 1\n        # insert element at the found position\n        nums[j+1] = temp\n    return nums\n\nnums = [1, 4, 2, 7, 5]\nprint(insertion_sort(nums))", "category": "Python"}, {"instruction": "Construct a function to check if a string is a pangram.", "input": "", "output": "def is_pangram(s):\n    s = s.lower()\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in alphabet:\n        if letter not in s:\n            return False\n    return True", "category": "Python"}, {"instruction": "Create a HTML page with a header containing the text \"My page\" and an empty body section.", "input": "", "output": "<html>\n    <head>\n        <title>My page</title>\n    </head>\n    <body>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Reformat the following C++ code to reduce the memory it needs to function.", "input": "char str1[] = \"Hello\";\nchar str2[] = \"World!\";", "output": "const char* str1 = \"Hello\";\nconst char* str2 = \"World!\";", "category": "Python"}, {"instruction": "Create a function to calculate the total cost after N discounts.", "input": "discounts = [10, 15, 20]", "output": "def calculate_total(discounts):\n    total = 0\n    for discount in discounts:\n        total -= total * (discount / 100)\n    return total", "category": "Python"}, {"instruction": "Write a Python code to calculate the maximum temperature for today based on a forecast of the seven-day forecast.", "input": "forecast = [\n  {'day': 'Monday', 'description': 'sunny', 'temperature': 28},\n  {'day': 'Tuesday', 'description': 'sunny', 'temperature': 30},\n  {'day': 'Wednesday', 'description': 'cloudy', 'temperature': 28},\n  {'day': 'Thursday', 'description': 'raining', 'temperature': 25},\n  {'day': 'Friday', 'description': 'raining', 'temperature': 24},\n  {'day': 'Saturday', 'description': 'cloudy', 'temperature': 25},\n  {'day': 'Sunday', 'description': 'sunny', 'temperature': 27}\n]", "output": "\"\"\"\nWrite a Python code to calculate the maximum temperature for today based on a forecast of the seven-day forecast\n\"\"\"\n\nimport datetime\n\ndef get_max_temperature_today(forecast):\n    today = datetime.datetime.today().weekday()\n    \n    max_temp = None\n    for day in forecast:\n        if day['day'] == today:\n            max_temp = max(max_temp, day['temperature'])\n    \n    return max_temp\n  \nif __name__ == \"__main__\":\n    forecast = [\n  {'day': 'Monday', 'description': 'sunny', 'temperature': 28},\n  {'day': 'Tuesday', 'description': 'sunny', 'temperature': 30},\n  {'day': 'Wednesday', 'description': 'cloudy', 'temperature': 28},\n  {'day': 'Thursday', 'description': 'raining', 'temperature': 25},\n  {'day': 'Friday', 'description': 'raining', 'temperature': 24},\n  {'day': 'Saturday', 'description': 'cloudy', 'temperature': 25},\n  {'day': 'Sunday', 'description': 'sunny', 'temperature': 27}\n]\n\nprint(get_max_temperature_today(forecast))", "category": "Python"}, {"instruction": "Create a tree structure using the provided Python dictionary.", "input": "dict = {\n  1: {\n    'parent': 0,\n    'children': [2, 3, 4]\n  },\n  2: {\n    'parent': 1,\n    'children': []\n  },\n  3: {\n    'parent': 1,\n    'children': [5, 6]\n  },\n  4: {\n    'parent': 1,\n    'children': [7]\n  },\n  5: {\n    'parent': 3,\n    'children': []\n  },\n  6: {\n    'parent': 3,\n    'children': []\n  }\n  7: {\n    'parent': 4,\n    'children': []\n  }\n}", "output": "\"\"\"\nCreate a tree structure using the Python dictionary provided\n\"\"\"\n\nclass TreeNode:\n    def __init__(self, value=None, parent=None, children=None):\n        self.value = value\n        self.parent = parent\n        self.children = children if children is not None else []\n    \n    def __repr__(self):\n        return f\"TreeNode({self.value}, {self.parent.value}, {[c.value for c in self.children]})\"\n    \n    def __str__(self):\n        return self.__repr__()\n\ndef create_tree_structure(data):\n    tree = dict()\n    for k, v in data.items():\n        parent = v[\"parent\"]\n        tree[k] = TreeNode(value=k, parent=tree.get(parent), children=list())\n        if parent in tree:\n            tree[parent].children.append(tree[k])\n    return tree\n\nif __name__ == \"__main__\":\n    dict = {\n        1: {\n            'parent': 0,\n            'children': [2, 3, 4]\n        },\n        2: {\n            'parent': 1,\n            'children': []\n        },\n        3: {\n            'parent': 1,\n            'children': [5, 6]\n        },\n        4: {\n            'parent': 1,\n            'children': [7]\n        },\n        5: {\n            'parent': 3,\n            'children': []\n        },\n        6: {\n            'parent': 3,\n            'children': []\n        },\n        7: {\n            'parent': 4,\n            'children': []\n        }\n    }\n    tree = create_tree_structure(dict)\n    print(tree)", "category": "Python"}, {"instruction": "Edit the following code to print a statement if the given list has no elements.", "input": "def print_list_elements(list):\n    if len(list)>0:\n        for element in list:\n            print(element)", "output": "def print_list_elements(list):\n    if len(list)>0:\n        for element in list:\n            print(element)\n    else:\n        print(\"The list has no elements.\") #This edited code will print a statement if the given list has no elements.", "category": "Python"}, {"instruction": "Construct an expression that checks if the length of a string is equal to the length of another string.", "input": "", "output": "len(string1) == len(string2) #This expression checks if the length of a string is equal to the length of another string.", "category": "Python"}, {"instruction": "Construct a for loop to print all the elements of a list numbered in sequence, as shown in the output.", "input": "list_elements = [\"apple\", \"banana\", \"cherry\"]", "output": "for index, element in enumerate(list_elements,start=1):\n    print(index, element)\n    #Output:\n    #1 apple\n    #2 banana\n    #3 cherry", "category": "Python"}, {"instruction": "Construct the lambda function for calculating the square of a number.", "input": "", "output": "square = lambda x: x*x #This lambda function will calculate the square of a number.", "category": "Python"}, {"instruction": "How could the following code be optimized?", "input": "def remove_duplicates(input_list):\n    temp_list = []\n    for item in input_list:\n        if item not in temp_list:\n            temp_list.append(item)\n    return temp_list", "output": "def remove_duplicates(input_list):\n    return list(set(input_list)) #This is more efficient than iterating over the list to remove duplicate items.", "category": "Python"}, {"instruction": "Construct a regular expression for validating a 6-digit numeric zip code", "input": "", "output": "\\d{6} #This regular expression will validate a 6-digit numeric zipcode.", "category": "Python"}, {"instruction": "Fill in the blank and explain why it works.", "input": "The difference between int and float data type is that a float data type stores ____ numerically accurate values.", "output": "The difference between int and float data type is that a float data type stores double numerically accurate values. This is because a float can represent a wider range of numbers when compared to an int, and therefore it requires double the memory.", "category": "Python"}, {"instruction": "Suggest correction to the following calculated value.", "input": "a = 3\nb = 5\ncalculated value = b/a", "output": "calculated value = b/float(a) #Suggested correction.", "category": "Python"}, {"instruction": "Construct an expression that combines the two values x and y so that the following statement evaluates to true", "input": "x = 4\ny = 8", "output": "x+y >= 12 #expression to evaluate to true.", "category": "Python"}, {"instruction": "Identify the incorrect statement about the following code fragment.", "input": "def is_over21(age):\n    if age > 21:\n        return \u201ctrue\u201d\n    else:\n        return", "output": "The function returns a string, \"true\" which is invalid. The function should return a boolean value instead (True or False).", "category": "Python"}, {"instruction": "Construct an SQL query to get the total sales of each customer.", "input": "TABLE customers {\n   id INT,\n   name VARCHAR(90)\n}\n\nTABLE orders {\n   order_id INT\n   customer_id INT\n   total DEC(10,2)\n}", "output": "SELECT c.name, SUM(o.total)\nFROM customers c\nJOIN orders o\nON c.id = o.customer_id\nGROUP BY c.name;", "category": "Python"}, {"instruction": "Write a HTML web page with a heading, paragraph, and a form with two input fields, one for name and one for age.", "input": "", "output": "<html>\n    <head>\n        <title>Example HTML</title>\n    </head>\n    <body>\n        <h1>Heading</h1>\n        <p>This is a paragraph.</p>\n        <form>\n            Name: <input type=\"text\" name=\"name\" />\n            Age:  <input type=\"number\" name=\"age\" />\n            <input type=\"submit\" />\n        </form>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Write a SQL command to join the 'customers' and 'orders' tables on the 'customer_id' column.", "input": "TABLE customers {\n   id INT,\n   name VARCHAR(90)\n}\n\nTABLE orders {\n   order_id INT\n   customer_id INT\n   total DEC(10,2)\n}", "output": "SELECT c.name, o.order_id, o.total\nFROM customers c\nJOIN orders o\nON c.id = o.customer_id;", "category": "Python"}, {"instruction": "Create a function that sorts a dictionary of words and their frequencies alphabetically.", "input": "dict = {\n  'the': 10,\n  'at': 3,\n  'hello': 5,\n  'cat': 1,\n  'counter': 2\n}", "output": "\"\"\"\nCreate a function that sorts a dictionary of words and their frequencies alphabetically.\n\"\"\"\n\ndef sort_dictionary(dictionary):\n    return dict(sorted(dictionary.items(), key=lambda x: x[0]))\n\nif __name__ == \"__main__\":\n    dict = {\n        'the': 10,\n        'at': 3,\n        'hello': 5,\n        'cat': 1,\n        'counter': 2\n    }\n\n    print(sort_dictionary(dict))", "category": "Python"}, {"instruction": "Generate a HTML table which displays the elements of the array in the form of rows and columns.", "input": "array = [\"name, age, gender\", \"sara, 20, female\", \"john, 26, male\"]", "output": "\"\"\"\nGenerate a HTML table which displays the elements of the array in the form of rows and columns.\n\"\"\"\n\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>HTML Table</title>\n    </head>\n    <body>\n        <table>\n            <thead>\n                <tr>\n                    <th>Name</th>\n                    <th>Age</th>\n                    <th>Gender</th>\n                </tr>\n            </thead>\n            <tbody>\n<?php\n$array = [\"name, age, gender\", \"sara, 20, female\", \"john, 26, male\"];\nforeach($array as $row) {\n$row_data = explode(',', $row);\necho \"<tr>\";\nforeach($row_data as $data) {\necho \"<td>$data</td>\";\n}\necho \"</tr>\";\n}\n?>\n            </tbody>\n        </table>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Write a Python program to group the values of a given list of elements based on the size of the elements.", "input": "", "output": "\"\"\"\nWrite a Python program to group the values of a given list of elements based on the size of the elements.\n\"\"\"\n\ndef group_values(values):\n    result = {}\n    for value in values:\n        size = len(value)\n        if size not in result:\n            result[size] = []\n        result[size].append(value)\n    return result\n\nif __name__ == \"__main__\":\n    values = ['cat', 'dog', 'monkey', 'elephant', 'giraffe']\n    print(group_values(values))", "category": "Python"}, {"instruction": "Edit the provided JavaScript code such that it outputs the first and last element in an array.", "input": "array = ['a', 'b', 'c', 'd', 'e']", "output": "\"\"\"\nEdit the provided JavaScript code such that it outputs the first and last element in an array.\n\"\"\"\n\nlet array = [\"a\", \"b\", \"c\", \"d\", \"e\"];\nconsole.log(`First element: ${array[0]}, Last element: ${array[array.length - 1]}`);", "category": "Python"}, {"instruction": "Convert this program into an AsyncIO based one.", "input": "import time\n\ndef calculate_sum(numbers):\n    result = 0\n    for num in numbers:\n        result += num\n        time.sleep(2)\n    return result", "output": "import asyncio\n\nasync def calculate_sum(numbers):\n    result = 0\n    for num in numbers:\n        result += num\n        await asyncio.sleep(2)\n    return result", "category": "Python"}, {"instruction": "Reformat the following if statement so that it has only one condition.", "input": "if (x < 0 and y >= 0) or (x >= 0 and y < 0):", "output": "if x * y < 0:", "category": "Python"}, {"instruction": "Suggest a code to find the longest sub-string in a string.", "input": "string = \"The quick brown fox jump over lazy dog\"", "output": "def find_longest_substring(string):\n    # get the length of the string\n    length = len(string)\n     \n    # variable to store the longest substring length\n    longest_substring_length = 0\n     \n    # variable to store the longest substring\n    longest_substring = ''\n     \n    # loop through the string\n    for i in range(length):\n      tmp_str = ''\n      for j in range(i, length):\n        if string[j] not in tmp_str:\n          tmp_str += string[j]\n        else:\n            break\n      if len(tmp_str) > longest_substring_length:\n        longest_substring_length = len(tmp_str)\n        longest_substring = tmp_str\n    return longest_substring\n\nprint(find_longest_substring(string)) # 'brownfoxjump'", "category": "Python"}, {"instruction": "Create another function to remove duplicates from the array.", "input": "arr = [1, 1, 2, 3, 4, 5, 5, 6, 7]", "output": "def remove_duplicates(arr):\n    result = []\n    for num in arr:\n        if num not in result: # if current element is unique, add to the list.\n            result.append(num)\n    return result\n    \nnew_arr = remove_duplicates(arr)\nprint(new_arr) # [1, 2, 3, 4, 5, 6, 7]", "category": "Python"}, {"instruction": "Parse the following JSON string and print out how many objects are there?", "input": "resp = '[{\"name\": \"john\", \"age\": 25}, {\"name\": \"Anna\", \"age\": 17}, {\"name\": \"Rick\", \"age\": 46}]'", "output": "import json\n\nresp = '[{\"name\": \"john\", \"age\": 25}, {\"name\": \"Anna\", \"age\": 17}, {\"name\": \"Rick\", \"age\": 46}]'\n\ndata = json.loads(resp)\nprint(len(data)) # 3 objects", "category": "Python"}, {"instruction": "Using the \"requests\" library, write a code to get the data from the endpoint http://jsonplaceholder.typicode.com/users", "input": "", "output": "import requests\n\ndef get_api_data():\n    url = 'http://jsonplaceholder.typicode.com/users'\n    response = requests.get(url)\n    return response.json()\n    \nif __name__ == '__main__':\n    data = get_api_data()\n    print(data)", "category": "Python"}, {"instruction": "Compose a SQL query to find the number of students whose GPA is greater than 3.5.", "input": "Student", "output": "SELECT COUNT(*) FROM Student WHERE GPA > 3.5;", "category": "Python"}]
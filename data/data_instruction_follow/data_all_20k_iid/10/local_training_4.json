[{"instruction": "Write a SQL query to find the age difference between two people in a table.", "input": "Table: \"people\"\n\n| name | age |\n|------|-----|\n| John | 30  |\n| Jane | 25  |", "output": "SELECT (max(people.age)-min(people.age)) as age_difference\nFROM people;", "category": "Python"}, {"instruction": "Create a Java program to count and print the distinct elements in an array.", "input": "int[] arr = {1, 2, 3, 2, 1, 4, 3, 2}", "output": "public class DistinctElements { \n    public static void main(String[] args) { \n        int[] arr = {1, 2, 3, 2, 1, 4, 3, 2}; \n  \n        // Initialize all element with the value 0. \n        int[] temp = new int[arr.length]; \n        int visited = -1; \n  \n        for (int i = 0; i < arr.length; i++) { \n            int count = 1; \n            for (int j = i + 1; j < arr.length; j++) { \n                if (arr[i] == arr[j]) { \n                    count++; \n                    temp[j] = visited; \n                } \n            } \n            if (temp[i] != visited) { \n                temp[i] = count; \n            } \n        } \n        for (int i = 0; i < temp.length; i++) { \n            if (temp[i] != visited) { \n                System.out.println(arr[i] + \"->\" + temp[i]); \n            } \n        } \n    } \n}", "category": "Python"}, {"instruction": "Compose a SQL query to retrieve the names of all students that have no assigned major.", "input": "Student", "output": "SELECT studentName FROM Student WHERE major IS NULL;", "category": "Python"}, {"instruction": "Given a sentence, remove all special characters.", "input": "My@name*is\u00a5Sam", "output": "My name is Sam", "category": "Python"}, {"instruction": "Write code to print a multiplication table.", "input": "", "output": "def print_multiplication_table():\n    \"\"\"Prints a multiplication table.\"\"\"\n    # Print the header of the table\n    print('  |  '.join(str(i).ljust(4) for i in range(1, 11)))\n    print('-' * 46)\n\n    # Print the rows of the table\n    for row in range(1, 11):\n        print('  |  '.join(str(row * col).ljust(4) for col in range(1, 11)))\n    \nif __name__ == '__main__':\n    print_multiplication_table()", "category": "Python"}, {"instruction": "Write a code to get the current time in New York City in 24-hour format.", "input": "", "output": "import pytz\nfrom datetime import datetime\n\ndef get_time():\n    new_york = pytz.timezone('America/New_York')\n    curr_time = datetime.now(new_york).strftime('%H:%M')\n    return curr_time\n\nif __name__ == '__main__':\n    print(get_time()) #this will print the current time in 24-hour format in New York City", "category": "Python"}, {"instruction": "Rewrite the following Python code so that it uses a for loop instead of a while loop.", "input": "i = 0\nwhile i < 11:\n    print(i)\n    i += 1", "output": "for i in range(11):\n    print(i)", "category": "Python"}, {"instruction": "Add the following Python function to generate a Fibonacci sequence.", "input": "def fibonacci_sequence(n):\n    \"\"\"Generate a Fibonacci sequence up to n.\"\"\"", "output": "def fibonacci_sequence(n):\n    \"\"\"Generate a Fibonacci sequence up to n.\"\"\"\n    result = []\n\n    first, second = 0, 1\n    while first < n:\n        result.append(first)\n        first, second = second, first + second\n    \n    return result", "category": "Python"}, {"instruction": "Write a code to convert a given English sentence into Pig Latin.", "input": "", "output": "\"\"\"\nWrite a code to convert a given English sentence into Pig Latin.\n\"\"\"\n\ndef pig_latin(sentence):\n    vowel = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    words = sentence.split(\" \")\n    pig_latin_words = []\n\n    for word in words:\n        if word[0] in vowel:\n            pig_latin_words.append(word + \"way\")\n        else:\n            pig_latin_words.append(word[1:] + word[0] + \"ay\")\n    \n    return \" \".join(pig_latin_words)\n\nif __name__ == \"__main__\":\n    sentence = \"This is a sample sentence\"\n    print(pig_latin(sentence))", "category": "Python"}, {"instruction": "Use a Tensorflow model to predict a numerical output from an input.", "input": "Input: [1, 2, 3]\nOutput: 8.5", "output": "import tensorflow as tf\n\n# Define the model.\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(10, activation=\"relu\"),\n    tf.keras.layers.Dense(1)\n])\n\n# Compile the model.\nmodel.compile(optimizer=\"adam\", loss=\"mse\")\n\n# Train the model.\nmodel.fit([1, 2, 3], [8.5], epochs=50)", "category": "Python"}, {"instruction": "Write an HTML document with a heading, a paragraph and a link to www.example.com.", "input": "", "output": "<html>\n  <head>\n    <title>Example HTML</title>\n  </head>\n  <body>\n    <h1>Heading</h1>\n    <p>This is a paragraph.</p>\n    <a href=\"www.example.com\">Link to example.com</a>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create a Java class that prints \"Welcome to my program\" when initialized.", "input": "", "output": "public class Welcome {\n    public Welcome() {\n        System.out.println(\"Welcome to my program\");\n    }\n}", "category": "Python"}, {"instruction": "Compile the following Java program using javac in command line.", "input": "public class MyClass {\n   public static void main(String[] args) {\n      System.out.println(\"Hello World\");\n   }\n}", "output": "javac MyClass.java", "category": "Python"}, {"instruction": "Write a CSS code to display a red box with a black outline of size 25 x 25.", "input": "", "output": ".box {\n  width: 25px;\n  height: 25px;\n  background-color: red;\n  border: 1px solid black;\n}", "category": "Python"}, {"instruction": "Design an object-oriented program to represent a library book.", "input": "", "output": "class LibraryBook {\n  \n  private String title;\n  private String author;\n  private int pageCount;\n  private boolean available;\n  \n  public LibraryBook(String title, String author, int pageCount, boolean available) {\n    this.title = title;\n    this.author = author;\n    this.pageCount = pageCount;\n    this.available = available;\n  }\n  \n  public String getTitle() {\n    return title;\n  }\n  \n  public String getAuthor() {\n    return author;\n  }\n  \n  public int getPageCount() {\n    return pageCount;\n  }\n  \n  public boolean isAvailable() {\n    return available;\n  }\n  \n  public void checkOut() {\n    available = false;\n  }\n  \n  public void checkIn() {\n    available = true;\n  }\n  \n}", "category": "Python"}, {"instruction": "Write an HTML page from scratch to display a user's contact information.", "input": "name: John Doe;\nage: 46;\nphone: +1 (312) 555-4879;\nemail: john.doe@example.com;", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>John Doe's Contact Information</title>\n</head>\n<body>\n    <h2>John Doe</h2>\n    <p>Age: 46</p>\n    <p>Phone: +1 (312) 555-4879</p>\n    <p>Email: john.doe@example.com</p>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a Python algorithm to search a list of numbers for the index of the given element.", "input": "nums = [5,7,11,23,44,30]\nx = 11", "output": "def search(nums, x):\n    for i, n in enumerate(nums):\n        if n == x:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Write a script to create a new array with only the odd numbers from the given array.", "input": "[3, 4, 6, 8, 9, 10]", "output": "def odd_numbers(arr):\n    oddArr = [] # Empty array to be populated\n    for item in arr:\n        if item % 2 != 0: # Check if number is odd\n            oddArr.append(item) # Add to array\n    return oddArr # Return the array", "category": "Python"}, {"instruction": "Write a script to identify the even numbers in the given PHP array.", "input": "$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];", "output": "<?php\n\n$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n// Create an empty array to store even numbers\n$even_numbers = [];\n\n// Loop through the array, check if each element is even\n// If even, add to the even numbers array\nforeach($arr as $item) {\n    if($item % 2 == 0) {\n        array_push($even_numbers, $item);\n    }\n}\n\n// Output the array of even numbers\nprint_r($even_numbers);", "category": "Python"}, {"instruction": "Define a function to merge two sorted arrays into a single sorted array.", "input": "arr1 = [1, 3, 5, 7]\narr2 = [2, 4, 8, 10]", "output": "def merge_arrays(arr1, arr2):\n    arr3 = arr1 + arr2 # Combine the arrays\n    arr3.sort() # Sort the combined array\n    return arr3 # Return the newly sorted array", "category": "Python"}, {"instruction": "Make the following Python function for generating powerset.", "input": "", "output": "def powerset(s):\n    result = [[]]\n    for x in s:\n        result.extend([y + [x] for y in result])\n    return result", "category": "Python"}, {"instruction": "Suggest a completion for the following Python code to find the depth of a given binary tree.", "input": "class Node:\n    def __init__(self, data):\n        self.left = None\n        self.right = None\n        self.data = data\n\ndef maxDepth(node):", "output": "class Node:\n    def __init__(self, data):\n        self.left = None\n        self.right = None\n        self.data = data\n\ndef maxDepth(node):\n    if node is None:\n        return 0\n    else:\n        leftDepth = maxDepth(node.left)\n        rightDepth = maxDepth(node.right)\n\n        if leftDepth > rightDepth: \n            return leftDepth+1\n        else: \n            return rightDepth+1", "category": "Python"}, {"instruction": "Show an example of using the Python module, os.", "input": "", "output": "import os\n\ndirectory = os.getcwd() \nprint(\"The current working directory is\", directory)\n\nfiles = os.listdir(directory) \nprint(\"The files in the current directory are\", files)\n\nfor file in files:\n    if file.endswith(\".py\"):\n        print(\"The Python script\", file, \"is in the current directory\")", "category": "Python"}, {"instruction": "Given a sorted array of size n, create a program to return the kth smallest element.", "input": "", "output": "def findKthSmallestElement(arr, n, k): \n  \n    # To return kth smallest element in \n    # the given array \n    return arr[k-1]", "category": "Python"}, {"instruction": "Write code to identify the first vowel in a string in JavaScript.", "input": "", "output": "function findFirstVowel(str) { \n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for(var i = 0; i < str.length; i++) {\n        if(vowels.indexOf(str[i].toLowerCase()) !== -1)\n            return i;\n    } \n    return -1; \n}", "category": "Python"}, {"instruction": "Design a stack using a dynamic array in Java.", "input": "", "output": "class MyStack { \n    int top; \n    int capacity; \n    int stack[]; \n  \n    // Creating stack \n    MyStack(int capacity) \n    { \n        this.capacity = capacity; \n        stack = new int[capacity]; \n        top = -1; \n    } \n  \n    // Adding an element on top of the stack  \n    public void push(int item) \n    { \n        if (top == capacity - 1){ \n            System.out.println(\"Stack overflow\"); \n        } \n        else{ \n            stack[++top] = item; \n            System.out.println(item + \" pushed into stack\"); \n        } \n    } \n  \n    // Removing an element from the stack \n    public int pop() \n    { \n        if (top == -1) { \n            System.out.println(\"Stack underflow\"); \n            return 0; \n        } \n        else { \n            int item = stack[top--]; \n            return item; \n        } \n    } \n}", "category": "Python"}, {"instruction": "Create a Django model class to represent a User.", "input": "", "output": "from django.db import models\n\nclass User(models.Model):\n    first_name = models.CharField(max_length=50)\n    last_name = models.CharField(max_length=50)\n    email = models.EmailField(unique=True)\n    birth_date = models.DateField()\n    is_active = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)", "category": "Python"}, {"instruction": "Code an R function to compute the running total of a given array of numbers.", "input": "[1, 4, 8, 5, 2, 9]", "output": "RunTotal <- function(numbers) {\n  runningTotal <- 0\n  totals <- c()\n  for (i in 1:length(numbers)) {\n    runningTotal <- runningTotal + numbers[i]\n    totals <- c(totals, runningTotal)\n  }\n  return(totals)\n}", "category": "Python"}, {"instruction": "Construct an artificial neural network of 3-layers to classify handwritten digits.", "input": "", "output": "import numpy as np\nfrom tensorflow.keras.utils import to_categorical\n\n# Create a 3-layer neural network\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(10, input_dim=784, activation='relu'))\nmodel.add(tf.keras.layers.Dense(50, activation='relu'))\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))\n\n# Compile the model\nmodel.compile(\n\toptimizer='adam',\n\tloss='categorical_crossentropy',\n\tmetrics=['accuracy']\n)\n\n# Train the model\nmodel.fit(x_train, y_train, epochs=30, batch_size=128)", "category": "Python"}, {"instruction": "Create a 3D array of size 3 x 3 x 3 which contains all elements equal to 0.", "input": "", "output": "import numpy as np\narr = np.zeros((3, 3, 3))\nprint(arr)", "category": "Python"}, {"instruction": "Given a list of numbers, write a function that returns the index of minimum element.", "input": "[22, 11, 13, 66]", "output": "def min_index(list):\n    min_val = list[0]\n    min_index = 0\n    for i, val in enumerate(list):\n        if val < min_val:\n            min_val = val\n            min_index = i\n    return min_index", "category": "Python"}, {"instruction": "Given a list of numbers, return the list with each number multiplied by two.", "input": "[2, 4, 6, 8]", "output": "def double_list(nums):\n    return [num * 2 for num in nums]", "category": "Python"}, {"instruction": "Write a Perl script to output the 8th character in a given string.", "input": "String = \"SoftwareTestingHelp\"", "output": "$str = \"SoftwareTestingHelp\";\nprint substr($str, 8, 1);", "category": "Python"}, {"instruction": "Create an assembly language program to sort a given array.", "input": "arr = [7, 3, 5, 8, 2]", "output": ".data\n  arr BYTE 7, 3, 5, 8, 2\n  aux BYTE 5 DUP (0)\n\n.code\n  mov esi, 0    ; index of original array\n  mov edi, 0    ; index of aux array\n  mov ecx, 5   ; array length\n  \nsort_loop:\n  mov al, [arr+esi]\n  cmp al, [arr+esi+1]\n  jl swap\n  inc esi\n  jmp increment\nswap:\n  mov [aux+edi], al\n  mov bl, [arr+esi+1]\n  mov [aux+edi+1], bl\n  inc esi\nincrement:\n  inc edi\n  loop  sort_loop\n  mov ecx, 5\n  mov esi, 0\nrewrite:\n  mov [arr+esi], [aux+esi]\n  inc esi\n  loop  rewrite", "category": "Python"}, {"instruction": "Code an R function that takes an array arr as an argument and returns the length of the array.", "input": "arr = c(4, 8, 15, 16, 23, 42)", "output": "get_array_length = function(arr){ \n  return length(arr)\n}", "category": "Python"}, {"instruction": "Develop a SQL query to select numbers between 30 and 40 from a table column called 'ages'.", "input": "", "output": "SELECT * FROM ages WHERE age BETWEEN 30 AND 40;", "category": "Python"}, {"instruction": "Implement a function in PHP that takes in a string s and an integer k as parameters and returns the first k characters of s.", "input": "String = \"SoftwareTestingHelp\"\nInteger = 6", "output": "<?php\nfunction returnKCharacters($s, $k) \n{ \n    return substr($s, 0, $k); \n} \n  \necho returnKCharacters(\"SoftwareTestingHelp\", 6); \n?>", "category": "Python"}, {"instruction": "Write a Bash shell command to extract the first character of each word in the given sentence.", "input": "Sentence = \"This is a test sentence\"", "output": "echo \"${Sentence}\" | awk '{for (i=1;i<=NF;i++) print substr($i,1,1)}'", "category": "Python"}, {"instruction": "Code a Ruby class that returns a phrase defined in its constructor when called.", "input": "", "output": "class Greeting\n  def initialize(phrase)\n    @phrase = phrase\n  end \n  \n  def say_hello\n    @phrase\n  end \nend \n\ngreeting = Greeting.new(\"Hello, World!\")\nputs greeting.say_hello", "category": "Python"}, {"instruction": "Create a web page to display a result of a dictionary containing all countries in the world and its corresponding capital in three columns.", "input": "", "output": "<html>\n<head>\n    <title>Countries and Capitols</title>\n</head>\n<body style=\"background-color: #f9f9f9; font-family: sans-serif; padding: 50px\">\n    <h1 style=\"text-align:center; color: #444444;\">World Countries and Capitols</h1>\n    <p>Below is a list of countries and capitols, presented in three columns: country, capital and continent.</p>\n    <table style=\"width:100%;border: 1px solid #444444; text-align: center; margin:20px auto;\">\n        <tr>\n            <th style=\"background-color:#444444; color: #ffffff\">Country</th>\n            <th style=\"background-color:#444444; color: #ffffff\">Capital</th>\n            <th style=\"background-color:#444444; color: #ffffff\">Continent</th>\n        </tr>\n        <tr>\n            <td>Australia</td>\n            <td>Canberra</td>\n            <td>Oceania</td>\n        </tr>\n        <tr>\n            <td>Brazil</td>\n            <td>Brasilia</td>\n            <td>South America</td>\n        </tr>\n        <tr>\n            <td>China</td>\n            <td>Beijing</td>\n            <td>Asia</td>\n        </tr>\n        <tr>\n            <td>USA</td>\n            <td>Washington D.C.</td>\n            <td>North America</td>\n        </tr>\n    </table>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create a function in JavaScript that takes in a string and performs a bubble sort on it and returns the sorted string.", "input": "string = \"hello world\"", "output": "function bubbleSort(str) {\n    let arr = str.split('');\n    let sorted = false;\n    \n    while (!sorted) {\n        sorted = true;\n        for (let i = 0; i < arr.length; i++) {\n            if (arr[i] > arr[i + 1]) {\n                let temp = arr[i];\n                arr[i] = arr[i + 1];\n                arr[i + 1] = temp;\n                sorted = false;\n            }\n        }\n    }\n    \n    return arr.join('');\n}", "category": "Python"}, {"instruction": "Generate a random alphanumeric string of length 20 using JavaScript.", "input": "", "output": "const randomString = () => {\nlet randomText = '';\nconst possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\nfor (let i = 0; i < 20; i++) {\n  randomText += possible.charAt(Math.floor(Math.random() * possible.length));\n}\nreturn randomText;\n}\n\nconsole.log(randomString());\n\nOutput:\nCIOzNAvOdJhFb3qBaGqD", "category": "Python"}, {"instruction": "Create a 3x4 NumPy array of random integers from 0 to 5.", "input": "", "output": "import numpy as np\narray = np.random.randint(0, 6, size=(3,4))\nprint(array)\n\nOutput:\n[[4 5 4 0]\n [2 1 5 4]\n [3 0 2 0]]", "category": "Python"}, {"instruction": "Read two numbers and output the smallest one.", "input": "7, 4", "output": "def min_num(n1, n2):\n    if n1 < n2:\n        return n1\n    else:\n        return n2\n \nprint(min_num(7, 4))", "category": "Python"}, {"instruction": "Write a function to perform vector addition for two 1D arrays.", "input": "[3, 4], [5, 6]", "output": "def add_vectors(v1, v2):\n    result = []\n    for i in range(len(v1)):\n        result.append(v1[i] + v2[i])\n    return result\n \nprint(add_vectors([3, 4], [5, 6]))", "category": "Python"}, {"instruction": "Create a program that implements a queue.", "input": "", "output": "class Queue:\n    def __init__(self):\n        self.queue = []\n \n    def enqueue(self, data):\n        self.queue.append(data) \n \n    def dequeue(self):\n        return self.queue.pop(0)\n \n    def is_empty(self):\n        return len(self.queue) == 0", "category": "Python"}, {"instruction": "Find the element in a list that occurs most frequently.", "input": "[1, 1, 2, 3, 4, 5, 4, 4, 6, 5]", "output": "4", "category": "Python"}, {"instruction": "Construct a program to shuffle the content of a list.", "input": "", "output": "import random\ndef shuffle_list(lst):\n    for i in range(len(lst)-1, 0, -1):\n        j = random.randint(0, i)\n        lst[i], lst[j] = lst[j], lst[i]\n    return lst", "category": "Python"}, {"instruction": "What does the position argument of the re.sub() method do?", "input": "", "output": "The position argument of the re.sub() method allows you to specify the starting index of the replacement string in the string being processed. This argument can be used to control the placement of a substitution in a string that may contain multiple occurrences of a pattern. If a position is not specified, the default behavior is to start the replacement at the beginning of the string.", "category": "Python"}, {"instruction": "Using data from the Wikipedia API, write a Python program to list the population of India.", "input": "", "output": "import json\nimport requests\n\nurl = 'https://en.wikipedia.org/w/api.php?action=query&format=json&prop=revisions&titles=India'\nresponse = requests.get(url)\ndata = json.loads(response.text)\npopulation = data['query']['pages']['571045']['revisions'][0]['*'].split('\\n')[3].split('=')[1].strip().split('|')[0]\nprint('The population of India is', population)", "category": "Python"}, {"instruction": "Compare the performance of quicksort, mergesort and heapsort on an unsorted array of size 1000.", "input": "", "output": "Quick sort is the fastest amongst quicksort, mergesort, and heapsort. It is an efficient, widely-used sorting algorithm. Quicksort is typically faster than mergesort and heapsort for sorting an unsorted array of size 1000. The worst-case performance of quicksort is O(n^2) and the average-case performance is O(nlogn).\n\nMergesort is an efficient sorting algorithm with worst-case performance of O(nlogn) and the average-case performance of O(nlogn). It is a stable sort, meaning that the relative order of equal sort items is preserved. Mergesort is slower than quicksort for sorting an unsorted array of size 1000 because it has a higher memory footprint due to the need to split and merge the input array.\n\nHeapsort is an efficient sorting algorithm with worst-case performance of O(nlogn) and the average-case performance of O(nlogn) as well. Like quicksort, it is an in-place algorithm, meaning that it does not require additional space for the result. Heapsort is slower than quicksort and mergesort for sorting an unsorted array of size 1000 because it requires more complex data structures and operations to build the heap and find the max or min elements.", "category": "Python"}, {"instruction": "Write a JavaScript function that returns 'true' if a given string is a palindrome, and 'false' otherwise.", "input": "", "output": "function isPalindrome(word){\n  return word == word.split(\"\").reverse().join(\"\");\n}", "category": "Python"}, {"instruction": "Remove the element at a given index from an array.", "input": "arr = [4, 10, 15, 23, 0]\nindex = 3", "output": "def removeIndex(arr, index):   \n    if index < 0 or index >= len(arr): \n        return arr \n    \n    arr.pop(index)  \n    return arr\n\n# driver code\narr = [4, 10, 15, 23, 0]\nindex = 3\nprint(\"Array after removing element at index 3 is:\", removeIndex(arr, index))", "category": "Python"}, {"instruction": "Write a code to replace a substring inside a string with another substring.", "input": "string = \"I am coding in python\"\nsubstring1 = \"coding\"\nsubstring2 = \"hacking\"", "output": "def replaceSubstring(string, substring1, substring2): \n    string = string.replace(substring1, substring2) \n    return string  \n  \n# Driver code\nstring = \"I am coding in python\"\nsubstring1 = \"coding\"\nsubstring2 = \"hacking\"\nprint(\"String after replacement is:\", replaceSubstring(string, substring1, substring2))", "category": "Python"}, {"instruction": "Write a code to insert an element at the beginning of an array.", "input": "arr = [1, 2, 3, 4]\nelement = 0", "output": "def insertAtBegining(arr,element): \n    arr.insert(0, element)    \n    return arr  \n  \n# Driver code \narr = [1, 2, 3, 4]\nelement = 0\nprint(insertAtBegining(arr, element))", "category": "Python"}, {"instruction": "Compare two strings and output true if they are an anagram.", "input": "s1 = \"listen\"\ns2 = \"silent\"", "output": "def isAnagram(s1, s2): \n  \n    # Get lengths of both strings \n    n1 = len(s1) \n    n2 = len(s2) \n  \n    # If lengths of both strings are not same, then they are not anagram \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    s1 = sorted(s1) \n    s2 = sorted(s2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if s1[i] != s2[i]: \n            return False\n  \n    return True\n\n# driver code\ns1 = \"listen\"\ns2 = \"silent\"\nprint(\"The two strings are anagrams:\", isAnagram(s1, s2))", "category": "Python"}, {"instruction": "What is the maximum size of a virtual memory address used by 32-bit Intel 8086 processor?", "input": "", "output": "The maximum size of a virtual memory address used by a 32-bit Intel 8086 processor is 4 gigabytes (2^32 bytes).", "category": "Python"}, {"instruction": "Create a class for a car object with properties such as speed and colour.", "input": "", "output": "class Car:\n    def __init__(self, speed, colour):\n        self.speed = speed\n        self.colour = colour", "category": "Python"}, {"instruction": "Write a function to search for an input string in a given paragraph.", "input": "Paragraph:The quick brown fox jumps over the lazy dog\nString: brown", "output": "def searchString(para, string):\n    for word in para.split(): \n        if word == string:\n            return True \n    return False", "category": "Python"}, {"instruction": "Sort an array of integers from largest to smallest.", "input": "", "output": "def sortArray(arr):\n    arr.sort(reverse = True)\n    return arr", "category": "Python"}, {"instruction": "Write a script to output the square of a number entered by the user.", "input": "", "output": "# prompt user for input\nnum = input(\"Enter a number : \") \n# convert to an int\nnum = int(num)\n# compute the square\nsquare = num**2\n# print the output\nprint(\"The square of\",num,\"is\",square)", "category": "Python"}, {"instruction": "Write a query in SQL to select all employees with last name \"Smith\".", "input": "", "output": "SELECT * FROM employees WHERE last_name = \"Smith\";", "category": "Python"}, {"instruction": "Write an optimization problem in C++ to minimize the cost of a budget planning problem.", "input": "max_cost = 500, budget_items = [{cost: 100, description: PrintBook}, {cost: 250, description: EditBook}]", "output": "#include <iostream>\n#include <vector>\n\nstruct Item {\n    int cost;\n    std::string description;\n};\n\n// Define optimization problem\nint minimizeCost(int max_cost, std::vector<Item> budget_items) { \n   // Initialize min_cost \n   int min_cost = 0; \n\n   // Choose items that add up to max_cost or less\n   for (Item item : budget_items) {\n      if ((min_cost + item.cost) <= max_cost) {\n         min_cost += item.cost;\n      } \n   } \n\n   return min_cost; \n} \n\nint main() {\n   int max_cost = 500;\n   std::vector<Item> budget_items = {\n         {100, \"PrintBook\"},\n         {250, \"EditBook\"}\n   };\n\n   int min_cost = minimizeCost(max_cost, budget_items);\n   std::cout << \"Min cost: \" << min_cost << std::endl;\n\n   return 0;\n}", "category": "Python"}, {"instruction": "Create a function that takes in a name and returns a string that greets the person by name.", "input": "John", "output": "def greet(name):\n    return \"Hello \" + name + \"!\"", "category": "Python"}, {"instruction": "Write a jQuery script to display a popup box when a web page is loaded.", "input": "", "output": "$(document).ready(function(){\n    alert(\"Popup box!\");\n});", "category": "Python"}, {"instruction": "Write a HTML form that submits a user-entered email address to a php script.", "input": "", "output": "<form action=\"receive_email.php\" method=\"post\">\n  <input type=\"email\" name=\"email\" required>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "What happens when a return statement is encountered in a function?", "input": "", "output": "When a return statement is encountered in a function, it denotes the end of function execution and the function immediately returns control to the calling program. The value returned by the function can be accessed by the calling program.", "category": "Python"}, {"instruction": "Describe the difference between function call and function definition.", "input": "", "output": "Function call is an invocation of a function where as a function definition is the code block of the function denoted by its signature, parameters and the code body. Function call happens when the function is invoked with appropriate arguments, while function definition happens when the function is created.", "category": "Python"}, {"instruction": "Create an algorithm for finding the factorial of a number using a for loop.", "input": "", "output": "def factorial(num):\n    final_factorial = 1\n    for i in range(1, num + 1):\n        final_factorial *= i\n    return final_factorial", "category": "Python"}, {"instruction": "Generate an appropriate function in Java to check if a given number is an Armstrong number.", "input": "", "output": "public static boolean isArmstrongNumber(int number) \n{ \n    int originalNumber, remainder, result = 0;\n    originalNumber = number;\n\n    while (originalNumber != 0) \n    { \n        remainder = originalNumber % 10;\n        result += Math.pow(remainder, 3);\n        originalNumber /= 10;\n    } \n    if(result == number) \n        return true; \n    else\n        return false; \n}", "category": "Python"}, {"instruction": "Create an HTML page that displays the name, address, email and phone number of a given user.", "input": "Name: John Doe \nAddress: 123 Main Street \nEmail: john@example.com\nPhone: 987654321", "output": "<html>\n  <head>\n    <title>John Doe's information</title>\n  </head>\n  <body>\n    <h1>John Doe</h1>\n    <p>\n      Address: 123 Main Street <br>\n      Email: john@example.com <br>\n      Phone: 987654321\n    </p>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a function to check if a string contains either 'a' or 'e' or 'i' or 'o' or 'u'.", "input": "", "output": "def contains_vowel(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in string.lower():\n        if char in vowels:\n            return True\n    return False", "category": "Python"}, {"instruction": "Create a function to check an array of strings and return a list of strings that have length of 5.", "input": "[\"Ironman\", \"Spiderman\", \"Hulk\", \"Captain America\", \"Thor\"]", "output": "def filter_5_length(arr):\n    res = []\n    for string in arr:\n        if len(string) == 5:\n            res.append(string)\n    return res", "category": "Python"}, {"instruction": "Write a function to display a temperature in Celsius with the corresponding temperature in Fahrenheit.", "input": "", "output": "def show_temperature(temp): \n    fahrenheit = (temp * 9/5) + 32\n    return '{} degrees Celsius corresponds to {} degrees Fahrenheit'.format(temp, round(fahrenheit, 1))", "category": "Python"}, {"instruction": "Rock-paper-scissors is a classic two player game. Create a program to generate all the possible outcomes of individual rounds in Rock Paper Scissors.", "input": "", "output": "def generate_outcomes():\n    outcomes = []\n    for p1 in ['rock', 'paper', 'scissors']:\n        for p2 in ['rock', 'paper', 'scissors']:\n            outcomes.append((p1, p2))\n    return outcomes", "category": "Python"}, {"instruction": "Write a function that takes an array of integers and returns an array of the same size with each element equal to the product of all the elements in the original array except itself.", "input": "[1, 2, 3]", "output": "def product_array(arr):\n    res = []\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    for i in range(len(arr)):\n        res.append(int(product/arr[i]))\n    return res", "category": "Python"}, {"instruction": "Create a new Keras model with the given input shape and output layer.", "input": "input_shape=(10, 20, 3) \nnum_classes=2", "output": "model = keras.models.Sequential()\n# Add an input layer \nmodel.add(keras.layers.InputLayer(input_shape=input_shape))\n\n# Add one or more dense layers\nmodel.add(keras.layers.Dense(64, activation='relu'))\n\n# Add an output layer for prediction\nmodel.add(keras.layers.Dense(num_classes, activation='softmax'))", "category": "Python"}, {"instruction": "Write code to delete an element of a linked list given its position.", "input": "Linked List: 8->3->65->7\nPosition: 2", "output": "public class LinkedList {\n \n    Node head;\n \n    static class Node {\n        int data;\n        Node next;\n \n        Node(int d) {\n            data = d;\n            next = null;\n        }\n    }\n \n    public void deleteNode(int position) {\n        if (head == null) {\n            return;\n        }\n        Node temp = head;\n\n        if(position == 0){\n            head = temp.next;\n            return;\n        }\n\n        for (int i = 0; temp != null && i < position - 1; i++) {\n            temp = temp.next;\n        }\n\n        if (temp == null || temp.next == null) {\n            return;\n        }\n\n        // Unlink the deleted node from the linked list\n        Node next = temp.next.next;\n        temp.next = next; \n    }\n\n}", "category": "Python"}, {"instruction": "Count the number of times the letter \"o\" appears in this string.", "input": "\"Hello, World!\"", "output": "string = \"Hello, World!\"\ncount = 0\nfor char in string: \n    if char == 'o': \n        count += 1\nprint(count)", "category": "Python"}, {"instruction": "Split a given sentence into a list of words.", "input": "\"My favorite color is red\"", "output": "sentence = \"My favorite color is red\"\nwords = sentence.split()", "category": "Python"}, {"instruction": "Create a function that takes in three parameters, x, y, and z, and returns the maximum value.", "input": "x = 8, y = 4, z = 12", "output": "function maxValue(x, y, z) {\n  return Math.max(x, y, z);\n}", "category": "Python"}, {"instruction": "Given an array, write a function that swaps the elements at indices i and j.", "input": "arr = [3, 5, 7, 4, 9, 2]", "output": "def swap(arr, i, j): \n    temp = arr[i] \n    arr[i] = arr[j] \n    arr[j] = temp", "category": "Python"}, {"instruction": "Generate a Java program for comparing two strings for equality.", "input": "", "output": "public static boolean compareStrings(String str1, String str2) { \n    int str1Length = str1.length();\n    int str2Length = str2.length();\n   \n    if (str1Length != str2Length)\n       return false; \n\n    for (int i=0; i<str1Length; i++){\n        if (str1.charAt(i) != str2.charAt(i))\n            return false;\n    }\n    return true;\n}", "category": "Python"}, {"instruction": "Generate a function in Python to print all prime numbers in a given range.", "input": "", "output": "def print_prime_numbers(start, end): \n      \n    for i in range(start, end + 1): \n        if is_prime_number(i): \n            print(i, end = \" \")\n  \ndef is_prime_number(num): \n      \n    if num > 1: \n          \n        # Iterate from 2 to n / 2  \n        for i in range(2, num//2):  \n            if (num % i) == 0: \n                return False\n        return True\n    else: \n        return False", "category": "Python"}, {"instruction": "Develop an algorithm to find the smallest element in a given array of integers using recursion.", "input": "", "output": "public static int getSmallestElementRecursive(int[] arr, int start, int end) {\n    if (start == end) {\n        return arr[start];\n    }\n \n    int min = getSmallestElementRecursive(arr, start+1, end);\n \n    if (arr[start] < min) {\n        return arr[start];\n    } else {\n        return min;\n    }\n}", "category": "Python"}, {"instruction": "Build an HTML table based on the given data.", "input": "cols = [{\"name\": \"Name\", \"type\": \"string\"}, {\"name\": \"Age\", \"type\": \"number\"}, {\"name\": \"City\", \"type\": \"string\"}]\nrows = [[\"John\", 20, \"London\"], [\"Bob\", 19, \"Paris\"], [\"Alice\", 18, \"New York\"]]", "output": "<table>\n    <tr><th>Name</th><th>Age</th><th>City</th></tr>\n    <tr><td>John</td><td>20</td><td>London</td></tr>\n    <tr><td>Bob</td><td>19</td><td>Paris</td></tr>\n    <tr><td>Alice</td><td>18</td><td>New York</td></tr>\n</table>", "category": "Python"}, {"instruction": "Construct a JavaScript object with three properties: name, age, and profession.", "input": "", "output": "const person = {\n  name: 'John Doe',\n  age: 36,\n  profession: 'developer'\n};", "category": "Python"}, {"instruction": "Write a Haskell function to check if two numbers are evenly divisible.", "input": "", "output": "isEvenDivisible :: Integer -> Integer -> Bool\nisEvenDivisible x y = (x `mod` y) == 0", "category": "Python"}, {"instruction": "Write a SQL command to get a list of customers with order total greater than 500.", "input": "TABLE customers {\n   id INT,\n   name VARCHAR(90),\n   orders TOTAL DEC(10,2)\n}", "output": "SELECT name \nFROM customers \nWHERE orders > 500;", "category": "Python"}, {"instruction": "Rewrite the following Python code to include proper exception handling.", "input": "f = open(\"myfile.txt\")\ntext = f.read()", "output": "try:\n    f = open(\"myfile.txt\")\n    text = f.read()\nexcept IOError:\n    print(\"Error: Could not open file\")\nfinally:\n    f.close()", "category": "Python"}, {"instruction": "Construct a function in Java that takes a sequence of numbers and finds the maximum value in the sequence.", "input": "", "output": "public static int findMax(int[] sequence) {\n    int maxVal = Integer.MIN_VALUE;\n    for (int val : sequence) {\n        if (val > maxVal) {\n            maxVal = val;\n        }\n    }\n    return maxVal;\n}", "category": "Python"}, {"instruction": "Create an HTML div with an ID of \"main\" and a class of \"container\".", "input": "", "output": "<div id=\"main\" class=\"container\"></div>", "category": "Python"}, {"instruction": "Translate the following MATLAB code snippet into R.", "input": "A = [1 2 3; 4 5 6; 7 8 9];\nB = A(1, :)", "output": "A <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3, ncol = 3)\nB <- A[1,]", "category": "Python"}, {"instruction": "Describe what O(n^2) represents in terms of complexity.", "input": "", "output": "O(n^2) represents a time complexity in which the execution time of an algorithm increases in proportion to the square of the input size.", "category": "Python"}, {"instruction": "Write a one-sentence JavaScript statement to make an AJAX call to a website.", "input": "", "output": "$.ajax({url: \"example.com\", method: \"GET\"});", "category": "Python"}, {"instruction": "Write a procedure in PL/SQL that returns the last name of an employee if the ID of the employee is provided as an argument.", "input": "id : Integer", "output": "CREATE OR REPLACE PROCEDURE getLastName(id IN Integer)\nBEGIN\n    SELECT Last_Name\n    INTO Last_Name\n    FROM Employees\n    WHERE Employees.ID = id;\nEND;", "category": "Python"}, {"instruction": "Write a query in SQL to find all records from the \"Customers\" table where the country is the United States.", "input": "", "output": "SELECT * FROM Customers \nWHERE country = 'United States';", "category": "Python"}, {"instruction": "Create a bash script that prints out a block of text that says, \"Hello, World!\".", "input": "", "output": "#!/bin/bash\necho \"Hello, World!\"", "category": "Python"}, {"instruction": "Create a HTML page displaying 3 columns of data", "input": "Data: [\"Name\", \"Age\", \"Gender\"], \n[\"Bob\", 35, \"Male\"], \n[\"John\", 28, \"Male\"], \n[\"Sarah\", 39, \"Female\"]", "output": "<html>\n<head>\n\t<title>Data</title>\n</head>\n\n<body>\n\t<table>\n    \t<thead>\n\t\t\t<th>Name</th>\n            <th>Age</th>\n            <th>Gender</th>\n\t\t</thead>\n\t\t<tbody>\n        \t<tr>\n            \t<td>Bob</td>\n                <td>35</td>\n                <td>Male</td>\n            </tr>\n            <tr>\n            \t<td>John</td>\n                <td>28</td>\n                <td>Male</td>\n            </tr>\n           <tr>\n            \t<td>Sarah</td>\n                <td>39</td>\n                <td>Female</td>\n            </tr>\n\t\t</tbody>\n\t</table>\n\n</body>\n</html>", "category": "Python"}, {"instruction": "Perform an in-place reversal of a linked list", "input": "", "output": "def reverse_list(head): \n    curr = head \n    prev = None\n    while curr: \n        next = curr.next\n        curr.next = prev \n\n        prev = curr \n        curr = next\n\n    head = prev \n    return head", "category": "Python"}, {"instruction": "List the methods used by the os module in python.", "input": "", "output": "The methods used by the os module are: getcwd(), listdir(), mkdir(), rename(), chdir(), rmdir(), stat(), chmod(), remove(), chown(), and many more.", "category": "Python"}, {"instruction": "Create an HTML table containing 3 columns and 4 rows.", "input": "", "output": "<table>\n  <tr>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Use JavaScript to encrypt a given string using MD5 algorithm.", "input": "string = \"This is a test.\"", "output": "let encryptedString = CryptoJS.MD5(string).toString();", "category": "Python"}, {"instruction": "Write a Java code that prints out all the even numbers in a given list.", "input": "list = [2, 3, 4, 5, 6, 7, 8]", "output": "for (int num : list) { \n   if (num % 2 == 0) { \n      System.out.println(num); \n   } \n}", "category": "Python"}, {"instruction": "Construct a query in MySQL to calculate the total salary of all employees in a given department.", "input": "", "output": "SELECT SUM(Salary) \nFROM Employees \nWHERE Department = 'DEPARTMENT-NAME';", "category": "Python"}, {"instruction": "Suggest an algorithm to compute the sum of all prime numbers from 2 to n.", "input": "", "output": "def sum_primes(n):\n    # Initialize sum to 0\n    sum_prime = 0\n\n    # Iterate through all numbers from 0 to n\n    for num in range(2, n+1):\n        is_prime = True\n        \n        # Check whether the number is prime\n        for div in range(2, num):\n            if num % div == 0:\n                is_prime = False\n                break\n        \n        # If the number is prime, add it to the sum\n        if is_prime:\n            sum_prime += num\n\n    # Return the sum\n    return sum_prime", "category": "Python"}, {"instruction": "Given a list of numbers, suggest code that returns the number of distinct elements in the list.", "input": "numbers_list = [1, 2, 3, 2, 4, 5, 1]", "output": "# Get the number of distinct elements in a list\nnumbers_list = [1, 2, 3, 2, 4, 5, 1]\n\n# Create a set from the list \ndistinct_elements = set(numbers_list)\n\n# Return the number of distinct elements \nreturn len(distinct_elements)", "category": "Python"}, {"instruction": "Suggest the best data structure to store a small dictionary of words and their meanings.", "input": "", "output": "# The best data structure to store a small dictionary of words and their meanings is a hash table (dictionary/dict).\n# A hash table is an efficient data structure that uses key-value pairs to store and retrieve data quickly. \n# It performs well in cases where there is a need to search, add and delete elements in a collection. \n# A hash table will allow the user to look up a word in the dictionary quickly.", "category": "Python"}, {"instruction": "Create a JavaScript function which takes a number as an argument and calculates the factorial of that number.", "input": "", "output": "function factorial(n) {\n    if (n == 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}", "category": "Python"}, {"instruction": "You need to write a program that finds all elements in a given array which are larger than their immediate neighbours.", "input": "[3, 5, 1, 6, 8, 4]", "output": "def find_elements_larger_than_neighbours(arr):\n    result = []\n    for index, value in enumerate(arr):\n        if index > 0 and index < len(arr)-1 and value > arr[index-1] and value > arr[index+1]:\n            result.append(value)\n    return result", "category": "Python"}, {"instruction": "Given an input string, write a function that will remove all non-alphanumeric characters.", "input": "Hello World!", "output": "def remove_non_alphanumeric_chars(input):\n    output = \"\"\n    for char in input:\n        if char.isalnum():\n            output += char\n    return output", "category": "Python"}, {"instruction": "Given a list of integers, write a function that will return the largest sum of any two consecutive integers in the list.", "input": "[7, 2, 5, 3]", "output": "def largest_sum_of_consecutive_ints(arr):\n    largest_sum = 0\n    for i in range(len(arr)):\n        if i < len(arr)-1:\n            current_sum = arr[i] + arr[i+1]\n            largest_sum = max(largest_sum, current_sum)\n    return largest_sum", "category": "Python"}, {"instruction": "Create a regular expression that will match all telephone numbers.", "input": "", "output": "\\(?\\d{3}\\)?-?\\s?\\d{3}-?\\s?\\d{4}", "category": "Python"}, {"instruction": "Write a SQL query to fetch the name of employees and the sum of their salaries from the database.", "input": "", "output": "SELECT name, \n    SUM(salary) \nFROM employees \nGROUP BY name;", "category": "Python"}, {"instruction": "Given a list of strings, write a function which will return only strings which start with an uppercase letter.", "input": "String List = [\"hello\", \"World\", \"foo\", \"bar\"]", "output": "def extract_capital_words(string_list):\n    capital_words = []\n    for word in string_list:\n        if word[0].isupper():\n            capital_words.append(word)\n    return capital_words", "category": "Python"}, {"instruction": "Write an SQL query to return names and addresses of all customers.", "input": "", "output": "SELECT name, address\nFROM customers;", "category": "Python"}, {"instruction": "Given a string and a list of words, count the frequency of each word in the string.", "input": "String = \"This is a test string to check the frequency of words\"\nWord List = [\"this\", \"is\", \"test\", \"string\"]", "output": "def count_frequency_of_words(string, word_list):\n    frequency_dict = {}\n    string_words = string.split()\n    for word in word_list:\n        count = 0\n        for s_word in string_words:\n            if s_word.lower() == word.lower():\n                count += 1\n        frequency_dict[word] = count\n    return frequency_dict", "category": "Python"}, {"instruction": "You have been provided with a list of integers. Write a function that multiplies each number in the list by 5.", "input": "[1, 20, 0, 5, 2]", "output": "def multiply_list_by_five(arr):\n    result = []\n    for num in arr:\n        result.append(num * 5)\n    return result", "category": "Python"}, {"instruction": "Replace the vowel characters in a given string with underscores.", "input": "Hello World!", "output": "H_ll_ W_rld!", "category": "Python"}, {"instruction": "Suggest a code that takes a two-dimensional array as input and flattens it.", "input": "arr = [[1,2],[3,4],[5,6]]", "output": "# Suggest a code that takes a two-dimensional array as input and flattens it\ndef flatten_array(arr):\n    # Initialize the result array\n    result_arr = []\n\n    # Iterate the input array\n    for subarr in arr:\n        # Iterate each sub-array and add each element to the result array\n        for elem in subarr:\n            result_arr.append(elem)\n    \n    # Return the result\n    return result_arr", "category": "Python"}, {"instruction": "Write a code to get the age of a person given their year of birth.", "input": "born_year = 2003", "output": "# Get the age of a person given their year of birth\nfrom datetime import date\n\ndef get_age(born_year):\n    # Get current year\n    today_year = date.today().year\n    \n    # Compute the age\n    age = today_year - born_year\n    \n    # Return the result\n    return age", "category": "Python"}, {"instruction": "Sort a list containing numbers and a list containing strings together, in ascending order.", "input": "num_list = [2, 4, 6, 1] \nstring_list = ['zanzibar', 'banana', 'apple']", "output": "# Sort a list containing numbers and a list containing strings together, in ascending order\nnum_list = [2, 4, 6, 1] \nstring_list = ['zanzibar', 'banana', 'apple']\n\n# Combine lists \ncombined_list = num_list + string_list\n\n# Sort the list \ncombined_list.sort()\n\n# Print the result\nprint(combined_list)", "category": "Python"}, {"instruction": "Suggest a code that combines two lists of strings without duplicates.", "input": "list1 = [\"one\", \"two\", \"three\"]\nlist2 = [\"two\", \"four\", \"five\"]", "output": "# Combine two lists of strings without duplicates\nlist1 = [\"one\", \"two\", \"three\"]\nlist2 = [\"two\", \"four\", \"five\"]\n\n# Create a new set that only contains distinct elements\ndistinct_elements = set(list1 + list2)\n\n# Convert the set back to a list\ncombined_list = list(distinct_elements)", "category": "Python"}, {"instruction": "Suggest a method to validate whether an input string is a valid JSON document or not.", "input": "", "output": "# Method to validate whether an input string is a valid JSON document\ndef is_valid_json(input_string):\n    # Try to parse the given string with the json library\n    try:\n        json.loads(input_string)\n        return True\n    # If there is an error while parsing the string, it is not a valid JSON document\n    except json.JSONDecodeError:\n        return False", "category": "Python"}, {"instruction": "Create a regular expression that matches the email address with the domain gmail.com", "input": "", "output": "\\S+@gmail\\.com$", "category": "Python"}, {"instruction": "Create code that will print the elements of a list in reverse order.", "input": "my_list = [1,2,3,4]", "output": "my_list = [1,2,3,4]\nfor i in range(len(my_list)-1,-1,-1):\n    print(my_list[i])", "category": "Python"}, {"instruction": "Write a PHP code to store an array of 5 numbers in a variable.", "input": "", "output": "$numbers = array(1, 2, 3, 4, 5);", "category": "Python"}, {"instruction": "Create a CSS class to style text as italicized.", "input": "", "output": ".italic {\n  font-style: italic;\n}", "category": "Python"}, {"instruction": "Create a class named Dog with parameters name, age and breed.", "input": "", "output": "class Dog:\n    def __init__(self,name, age, breed):\n        self.name = name\n        self.age = age\n        self.breed =  breed", "category": "Python"}, {"instruction": "Write a SQL query to display the customer name, contact number and purchase amount for customers who made a purchase above $500.", "input": "Table name: Customer", "output": "SELECT customer_name, contact_number, purchase_amount \nFROM Customer \nWHERE purchase_amount > 500;", "category": "Python"}, {"instruction": "Produce an algorithm to reverse the elements of an array.", "input": "Array: [1, 2, 3, 4, 5]", "output": "Algorithm:\n\n// Step 1: Set two pointers, start and end initially pointing to 0 and the last element respectively.\nstart = 0; end = arr.length - 1;\n\n// Step 2: Swap the elements at pointer start and end.\nswap(arr[start], arr[end]);\n\n// Step 3: Increment start pointer and decrement end pointer.\nstart++; end--;\n\n// Step 4: Repeat steps 2 and 3 until start and end pointers cross each other.\nwhile (start < end) {\n    swap(arr[start], arr[end]);\n    start++; end--;\n}", "category": "Python"}, {"instruction": "Generate a program in C that computes the sum of two numbers.", "input": "", "output": "#include <stdio.h>\n\nint main()\n{\n     int a, b, sum;\n  \n    /* Input two numbers from user */\n    printf(\"Enter two numbers: \");\n    scanf(\"%d%d\", &a, &b);\n\n    sum = a + b;\n\n    printf(\"Sum = %d\", sum);\n\n    return 0;\n}", "category": "Python"}, {"instruction": "How can be an HTML element moved to the bottom of a page?", "input": "", "output": "The HTML element can be moved to the bottom of a page by using the 'position: absolute' and 'bottom: 0px' CSS properties.", "category": "Python"}, {"instruction": "Create a list of 3 objects in Python.", "input": "", "output": "list = [1, \"hello\", {'name': 'John'}]", "category": "Python"}, {"instruction": "In a React web application, how do you define state?", "input": "", "output": "In React, state is an object that stores data which can be accessed and modified by components. State is used to keep track of dynamic data in a component and can be initialized during the component's constructor or lifecycle methods. Components can modify a component's state using the setState() method and access the state using the this.state syntax.", "category": "Python"}, {"instruction": "Create an api with Django that is able to search through an inputed text.", "input": "", "output": "from django.contrib.auth.models import User\nfrom django.http import HttpResponse\nfrom django.shortcuts import render\nfrom django.views.decorators.csrf import csrf_exempt\nfrom .models import Search\n\n@csrf_exempt\ndef search_text(request):\n    if request.method == 'PUT':\n        data = request.PUT\n        text = data.get('text',None)\n        if text:\n            matches = Search.objects.filter(text__icontains=text)\n            return HttpResponse(matches)\n        else:\n            return HttpResponse(\"Error: No text was provided\")", "category": "Python"}, {"instruction": "In SQL, what is JOIN used for?", "input": "", "output": "JOIN is a SQL command used to retrieve data from two or more related tables. It is used to combine data from multiple tables in a single query, by matching values from each of the tables to create a result set. JOIN can be used to combine rows from different tables based on a common value which is shared by both the tables. Different types of JOINs exist in SQL, including INNER JOIN, LEFT JOIN, RIGHT JOIN, and FULL OUTER JOIN.", "category": "Python"}, {"instruction": "Create a smart contract in solidity for executing a will.", "input": "The will is to be activated when the testator is no longer alive.", "output": "pragma solidity ^0.6.0; \n\ncontract Will {\n    address owner;\n\n    constructor () public {\n        owner = msg.sender;\n    }\n\n    function executeWill () public {\n        // execute will here\n        // code to check if testator is alive\n    }\n}", "category": "Python"}, {"instruction": "Replace all vowels (except y) in the given text with a given character.", "input": "Text: Hello World\nCharacter: #", "output": "H#ll# W#rld", "category": "Python"}, {"instruction": "Output the median of the given list of numbers.", "input": "[1, 4, 7, 9, 12]", "output": "7.5", "category": "Python"}, {"instruction": "Write a function to check if a given number is an Armstrong number or not. An Armstrong number is a-number when the sum of the cubes of its own digits is equal to the number itself.", "input": "", "output": "def isArmstrong(num):\n   # obtain number of digits \n   digits = len(str(num))\n\n   # initialize sum\n   Sum = 0\n\n   # find sum of nth power of digits \n   temp = num \n   while temp > 0:\n      digit = temp % 10\n      Sum = Sum + digit ** digits\n      temp //= 10\n   # return true or false\n   return Sum == num", "category": "Python"}, {"instruction": "Print a message based on the given age.", "input": "Age: 32", "output": "Print(\"Welcome! You are {age} years old\")", "category": "Python"}, {"instruction": "Output the remaining result after subtracting 5 from a given number.", "input": "Number: 17", "output": "12", "category": "Python"}, {"instruction": "Create a JavaScript function to calculate the circle area given the radius.", "input": "", "output": "function circleArea(radius) {\n    return Math.PI * radius * radius;\n}", "category": "Python"}, {"instruction": "Write a Python program to remove the elements that occur only once from a given array.", "input": "[1, 2, 2, 3, 3, 3, 4, 4]", "output": "def remove_once(arr): \n    freq_table  = {} \n    for num in arr: \n        if num in freq_table.keys(): \n            freq_table[num] += 1\n        else: \n            freq_table[num] = 1\n\n    filtered_array = [] \n    for num, freq in freq_table.items(): \n        if freq > 1: \n            filtered_array.append(num) \n    return filtered_array\n\nremove_once([1, 2, 2, 3, 3, 3, 4, 4])\n\n#Output: [2, 3, 4]", "category": "Python"}, {"instruction": "Create a Swift function for checking if a number is even or odd.", "input": "", "output": "func isEven(num: Int) -> Bool {\n    return (num % 2) == 0\n}", "category": "Python"}, {"instruction": "Given a number n, generate a list of tuples of the form (x,n/x) where x divides n.", "input": "n = 30", "output": "def generate_tuples(n):\n    tuples=[]\n    for x in range (1,n+1):\n        if n % x == 0:\n            tuples.append((x,int(n/x)))\n    return tuples", "category": "Python"}, {"instruction": "Create a JavaScript data structure to store a list of 3 books, where each book has a name and a page count.", "input": "Book1: \"Computer Programming Essentials\", 230 pages\nBook2: \"Data Structures and Algorithms\", 180 pages\nBook3: \"Artificial Intelligence Fundamentals\", 282 pages", "output": "let books = [\n  { name: 'Computer Programming Essentials', pages: 230 },\n  { name: 'Data Structures and Algorithms', pages: 180 },\n  { name: 'Artificial Intelligence Fundamentals', pages: 282 }\n];", "category": "Python"}, {"instruction": "Design a code to generate a histogram from given data.", "input": "[2, 3, 5, 6, 9]", "output": "def histogram(lst): \n    frequency = {} \n  \n    for item in lst: \n        frequency[item] = frequency.get(item, 0) + 1 \n  \n    for item in frequency: \n        print(item, '-->', '*' * frequency[item])", "category": "Python"}, {"instruction": "Write a python code to generate permutations of an input string.", "input": "\"abc\"", "output": "def permutations(string): \n    if len(string) == 0: \n        return [] \n  \n    if len(string) == 1: \n        return [string] \n  \n    l = [] \n    for i in range(len(string)): \n       m = string[i] \n       rem_string = string[:i] + string[i+1:] \n       for p in permutations(rem_string): \n           l.append(m + p) \n    return l", "category": "Python"}, {"instruction": "Generate a code to make all the elements of a list positive.", "input": "", "output": "def make_positive(lst): \n    return [abs(x) for x in lst]", "category": "Python"}, {"instruction": "Suggest a python code that returns the average of all the elements in a list.", "input": "", "output": "def avg_list(lst): \n    return sum(lst) / len(lst)", "category": "Python"}, {"instruction": "Generate a python code to remove all the occurrences of the element x from a list y.", "input": "", "output": "def remove_x(x, y):  \n    while x in y: \n        y.remove(x) \n    return y", "category": "Python"}, {"instruction": "Suggest a method to print out a list of prime numbers below a given number n.", "input": "", "output": "def prime_numbers(n): \n    numbers = list(range(2, n + 1)) \n    for i in range(2, n+1): \n        for j in range(i + 1, n+1): \n            if j % i == 0: \n                numbers[j - 2] = 0 \n  \n    return [number for number in numbers if number != 0]", "category": "Python"}, {"instruction": "Write a Python snippet that prints out each item in a given list.", "input": "list = [\"Apple\", \"Banana\", \"Cherry\"]", "output": "for item in list:\n  print(item)", "category": "Python"}, {"instruction": "Given the following input, suggest a python code for computing the Fibonacci number for n.", "input": "", "output": "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n<0: \n        print(\"Incorrect input\") \n    elif n==0: \n        return a \n    elif n==1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n    return b", "category": "Python"}, {"instruction": "Write a function that takes two input parameters, a list and a number, and returns true if the number occurs in the list more than twice.", "input": "", "output": "def appears_twice(lst, num):\n    c = 0\n    for n in lst:\n        if n == num:\n            c += 1\n    if c > 2:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "What data structure should you use to store the result of Q11 so that you can efficiently retrieve the desired result?", "input": "", "output": "The best data structure to store the result of Q11 is a 2D array or matrix. This data structure can be used to efficiently retrieve the longest common subsequence of two strings.", "category": "Python"}, {"instruction": "What is the complexity of the function you wrote in Q6?", "input": "", "output": "The complexity of the Fibonacci function from the previous question is O(2^n).", "category": "Python"}, {"instruction": "Write a function to return the logical XOR between two given boolean variables.", "input": "", "output": "def xor(a, b):\n    return bool(a) != bool(b)", "category": "Python"}, {"instruction": "Create a program to input numerical data which can then be stored and retrieved into/from a database.", "input": "", "output": "def store_data(table_name, data):\n    conn = sqlite3.connect('database.db') \n    cursor = conn.cursor()\n\n    cursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS \"\"\" + table_name + \"(data text)\") \n  \n    insert_query = \"INSERT INTO \" + table_name + \" VALUES (?)\"\n    cursor.execute(insert_query, (data,))\n  \n    conn.commit() \n  \ndef retrieve_data(table_name):\n    conn = sqlite3.connect('database.db')\n    cursor = conn.cursor()\n\n    return_query = \"SELECT * FROM \" + table_name\n    cursor.execute(return_query) \n    return cursor.fetchall()", "category": "Python"}, {"instruction": "Given a tree, write a program to find the maximum depth of the tree.", "input": "", "output": "def max_depth(node):\n    if node is None:\n        return 0\n    else:\n        left_depth = max_depth(node.left)\n        right_depth = max_depth(node.right)\n        if left_depth > right_depth:\n            return left_depth + 1\n        else: \n            return right_depth + 1", "category": "Python"}, {"instruction": "Given a JSON string, try to parse it into a Python dictionary.", "input": "myJSON = '{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}'", "output": "import json\n\nmyDict = json.loads(myJSON)\nprint(myDict)", "category": "Python"}, {"instruction": "Suggest an efficient algorithm for sorting the following list.", "input": "[7, 1, 4, 8, 9, 2]", "output": "def sort(array): \n    length = len(array) \n  \n    for i in range(length): \n  \n        j = i \n        while j > 0 and array[j-1] > array[j]: \n            # Swap elements\n            array[j], array[j-1] = array[j-1], array[j] \n            j -= 1\n\n    return array", "category": "Python"}, {"instruction": "Write a web page using HTML, CSS, and JavaScript that displays the following text: \"Welcome to my website!\".", "input": "", "output": "<!doctype html>\n<html>\n  <head>\n    <title>My website</title>\n  </head>\n  <body>\n    <div class=\"container\">\n      <h1>Welcome to my website!</h1>\n    </div>\n    <script>\n      console.log('Welcome to my website!');\n    </script>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a code snippet to create a table named \"users\" with two columns: user_id and user_name.", "input": "", "output": "CREATE TABLE users (\n    user_id INTEGER PRIMARY KEY,\n    user_name TEXT\n);", "category": "Python"}, {"instruction": "Insert the following data into the users table: user_id = 5, user_name = \"Alex\".", "input": "", "output": "INSERT INTO users (user_id, user_name) VALUES (5, \"Alex\");", "category": "Python"}, {"instruction": "Create a Python program to merge two lists by alternating elements.", "input": "list1 = [2, 3, 5, 7]; \nlist2 = [4, 8, 10];", "output": "def merge(list1, list2):\n    mergedList = []\n    for x,y in zip_longest(list1,list2): \n        mergedList.extend([x,y]) \n    return mergedList", "category": "Python"}, {"instruction": "Construct a Javascript program to return the largest element of an array.", "input": "", "output": "function largestElement(arr){\n    var max = arr[0];\n    for(var i=1;i<arr.length;i++){\n        if(arr[i]>max){\n            max=arr[i];\n        }\n    }\n    return max;\n}", "category": "Python"}, {"instruction": "Create a program which calculates the median of an array.", "input": "[3, 5, 4, 1, 7]", "output": "\"\"\"\nCreate a program which calculates the median of an array\n\"\"\"\n\ndef median(arr): \n    n = len(arr) \n    arr.sort() \n  \n    if n % 2 == 0: \n        return (arr[n//2] + arr[n//2-1])/2\n    else: \n        return arr[n//2]\n\nif __name__ == '__main__':\n    print(median([3, 5, 4, 1, 7]))", "category": "Python"}, {"instruction": "Sort an array of characters in alphabetic order.", "input": "['x', 'q', 'b', 'j']", "output": "\"\"\"\nSort an array of characters in alphabetic order\n\"\"\"\n\ndef sort_alphabetically(arr):\n    arr.sort()\n    return arr\n\nif __name__ == '__main__':\n    print(sort_alphabetically(['x', 'q', 'b', 'j']))", "category": "Python"}, {"instruction": "Code a function to solve the Tower of Hanoi puzzle.", "input": "", "output": "\"\"\"\nCode a function to solve the Tower of Hanoi puzzle\n\"\"\"\n\ndef tower_of_hanoi(n, source, aux, dest): \n    if n == 1: \n        print(\"Move disk 1 from rod\", source, \"to rod\", dest)\n        return\n    tower_of_hanoi(n-1, source, dest, aux) \n    print(\"Move disk\", n, \"from rod\", source, \"to rod\", dest) \n    tower_of_hanoi(n-1, aux, source, dest) \n\nif __name__ == '__main__':\n    n = 3\n    tower_of_hanoi(n, 'A', 'B', 'C')", "category": "Python"}, {"instruction": "Create a program to calculate the area and the perimeter of a rectangle.", "input": "length = 4\nwidth = 5", "output": "\"\"\"\nCreate a program to calculate the area and the perimeter of a rectangle\n\"\"\"\n\ndef area_perimeter(length, width): \n    area = length * width\n    perimeter = 2 * (length + width)\n    return area, perimeter\n\nif __name__ == '__main__':\n    print(area_perimeter(4, 5))", "category": "Python"}, {"instruction": "Write a code which generates the Fibonacci sequence.", "input": "", "output": "\"\"\"\nWrite a code which generates the Fibonacci sequence\n\"\"\"\n\ndef generate_fibonacci_sequence(n): \n    a = 0\n    b = 1\n    if n == 1: \n        print(a) \n    else: \n        print(a) \n        print(b) \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n            print(c) \n\nif __name__ == '__main__':\n    n = 9\n    generate_fibonacci_sequence(n)", "category": "Python"}, {"instruction": "Create a function that takes in a list and an index and swaps the elements at the given indices.", "input": "list = [1, 2, 3, 4]\nindex_1 = 0\nindex_2 = 2", "output": "def swap_elements(lst, index_1, index_2):\n    '''This function takes in a list and two indices and swaps the elements at the given indices.'''\n    lst[index_1], lst[index_2] = lst[index_2], lst[index_1]\n    return lst", "category": "Python"}, {"instruction": "Create a function to determine whether one string is a substring of another.", "input": "string_1 = \"abcdefgh\"\nstring_2 = \"efg\"", "output": "def is_substring(string_1, string_2):\n    '''This function takes two strings and returns a boolean indicating whether\n    string_2 is a substring of string_1.'''\n    return string_2 in string_1", "category": "Python"}, {"instruction": "Create a function to find common elements in two lists.", "input": "list_1 = [1, 2, 3]\nlist_2 = [2, 3, 4]", "output": "def find_common_elements(list_1, list_2):\n    '''This function will find the common elements in two lists.'''\n    return [val for val in list_1 if val in list_2]", "category": "Python"}, {"instruction": "Create a function to scale a number by the given factor.", "input": "factor = 0.5", "output": "def scale_value(x, factor):\n    '''This function will scale the given number by the given factor.'''\n    return x * factor", "category": "Python"}, {"instruction": "Complete the function to correctly check if a number is even.", "input": "def is_even(number):\n    '''This function should return true if the number is even and false if the number is odd.'''\n    # TODO", "output": "def is_even(number):\n    '''This function should return true if the number is even and false if the number is odd.'''\n    return (number % 2) == 0", "category": "Python"}, {"instruction": "Are there any recognizable design patterns used in the code?", "input": "def double_all(numbers):\n    ''' This function takes in a list of numbers as an argument and returns a new list with all the numbers doubled. '''\n    doubled_numbers = []\n    for number in numbers:\n        doubled_numbers.append(number * 2)\n    return doubled_numbers", "output": "Yes, the code uses the Iterator pattern to loop over the elements of the list.", "category": "Python"}, {"instruction": "Fill the missing values below to make the function work properly.", "input": "def compound_calculation(x, y, z=?):\n    '''This function calculates the compound amount at the given rate.'''\n    return (x + y) * z", "output": "def compound_calculation(x, y, z=1.1):\n    '''This function calculates the compound amount at the given rate.'''\n    return (x + y) * z", "category": "Python"}, {"instruction": "For the given code, fill the missing values for the parameters.", "input": "def compute_squared(x, y=?, z=?):\n    '''This function computes the sum of the squared values of x, y, and z.'''\n    return x ** 2 + y ** 2 + z ** 2", "output": "def compute_squared(x, y=0, z=0):\n    '''This function computes the sum of the squared values of x, y, and z.'''\n    return x ** 2 + y ** 2 + z ** 2", "category": "Python"}, {"instruction": "Edit the following Java program to sort a given array.", "input": "int[] array={16, 5, 1, 8, 10};", "output": "public static void sortArray(int[] array) {\n    int temp;\n    for (int i = 0; i < array.length; i++) { \n        for (int j = i + 1; j < array.length; j++) {  \n            if (array[i] > array[j]) { \n                temp = array[i]; \n                array[i] = array[j]; \n                array[j] = temp; \n            } \n        } \n    }\n}", "category": "Python"}, {"instruction": "Compile a C program to display the prime numbers from 1 to 100.", "input": "", "output": "#include <stdio.h> \nint main() \n{  \n    int i, j, flag; \n    printf(\"Prime numbers between 1 to 100 are: \\n\");  \n    for(i=2; i<=100; i++) \n    { \n        flag = 0; \n        for(j=2; j<i; j++) \n        { \n            if(i%j == 0) \n            { \n                flag = 1; \n                break; \n            } \n        } \n        if(flag == 0) \n            printf(\"%d  \", i);  \n    } \n    return 0;  \n}", "category": "Python"}, {"instruction": "Rearrange the elements of the array [3, 1, 2, 5, 4] in ascending order.", "input": "[3, 1, 2, 5, 4]", "output": "[1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Display the dice sum of two random numbers from 1 to 6.", "input": "", "output": "// Generating two random numbers from 1 to 6\nlet rand1 = Math.floor(Math.random() * 6) + 1; \nlet rand2 = Math.floor(Math.random() * 6) + 1; \n\n// Calculating and displaying the dice sum \nlet diceSum = rand1 + rand2; \nconsole.log(\"Dice sum: \" + diceSum);", "category": "Python"}, {"instruction": "Write a Python program to fetch and print the top five headlines from a given news website.", "input": "News Website: CNN", "output": "import requests\nfrom bs4 import BeautifulSoup\n \nurl = 'http://www.cnn.com/'\nresponse = requests.get(url)\nhtml_content = response.text\n \nsoup = BeautifulSoup(html_content, \"lxml\")\ntop_headlines = soup.find_all('h3',{'class':'cd__headline'})\n \nfor headline in top_headlines[:5]:\n print(headline.text)", "category": "Python"}, {"instruction": "Create a JavaScript function to merge two variables into a single object.", "input": "var a = {name: 'John', age: 21};\nvar b = {surname: 'Doe', gender: 'male'};", "output": "function merge(a, b) { \n  return Object.assign({}, a, b); \n}\nlet result = merge(a, b); \nconsole.log(result); // {name: 'John', age: 21, surname: 'Doe', gender: 'male'}", "category": "Python"}, {"instruction": "Create an HTML page of a multi-step registration form.", "input": "Step 1: Name and Email \n Step 2: Address \n Step 3: Password", "output": "<html>\n<head>\n <title>Registration Form</title>\n <style>\n  body {\n   font-family: sans-serif;\n  }\n  .container {\n   width: 500px;\n   margin: 0 auto;\n  }\n  .form-steps {\n   padding: 20px 0;\n  }\n  .form-step {\n   padding: 10px;\n   border: 1px solid #ccc;\n   background-color: #eee;\n  }\n  .active {\n   background-color: #cdeb8e;\n  }\n  button {\n   background-color: #3f51b5;\n   color: #fff;\n   padding: 8px 15px;\n   border: 0;\n   margin-top: 20px;\n  }\n </style>\n</head>\n<body>\n <div class=\"container\">\n <div class=\"form-steps\">\n  <div class=\"form-step active\"><p>Step 1: Name and Email</p></div>\n  <div class=\"form-step\"><p>Step 2: Address</p></div>\n  <div class=\"form-step\"><p>Step 3: Password</p></div>\n </div>\n <form>\n  <input type=\"text\" placeholder=\"Name\" />\n  <input type=\"text\" placeholder=\"Email\" />\n  <input type=\"text\" placeholder=\"Address\" />\n  <input type=\"password\" placeholder=\"Password\" />\n  <button>Submit</button>\n </form>\n </div>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create a blog post using React JS.", "input": "Blog Title: Why React is the Best Framework", "output": "import React from \"react\"; \nconst BlogPost = () => {\n return (\n  <div>\n   <h1>Why React is the Best Framework</h1>\n   <p>\n    React is one of the most popular JavaScript frameworks today and is used by many companies and developers. It boasts of its component-based architecture and powerful features that make web development easier and faster.\n   </p>\n   <p>\n    React provides developers with a component-based library that allows them to break down complex user interfaces into smaller and more manageable pieces, making it easier to develop and maintain websites. This component-based approach to web development also allows for code reuse, which makes it more efficient.\n   </p>\n   <p>\n    React is also known for its speed and performance, which makes it an ideal choice for high-performance web applications. With its virtual DOM, React allows developers to quickly update web pages by only rendering components that have changed, which significantly reduces page load time and boosts performance.\n   </p>\n   <p>\n    React's component-based library also provides developers with customizability, making it easy to develop websites with specific requirements. In addition, with its various tools and libraries, developers can easily integrate existing systems and APIs into their applications.\n   </p>\n   <p>\n    Overall, React is an ideal framework for web development, offering developers all the benefits of a component-based architecture and efficient development tools. It offers great speed, performance, and customizability, making it a great choice for any web development project.\n   </p>\n  </div>\n );\n};\n\nexport default BlogPost;", "category": "Python"}, {"instruction": "Write a JavaScript program to validate the given input against a set of rules.", "input": "Rules: Length should be equal to 7\nInput = 'example'", "output": "let input = 'example';\nif (input.length === 7) {\n console.log('Input is valid');\n} else {\n console.log('Input is not valid');\n}", "category": "Python"}, {"instruction": "Write an efficient Python program to remove duplicate characters from the given string.", "input": "String: Hello world", "output": "He lwrd", "category": "Python"}, {"instruction": "Parse the following string and store each key-value pair into a dictionary.", "input": "\"name=John, age=45, gender=m\"", "output": "s = \"name=John, age=45, gender=m\"\n\nd = dict()\nfor x in s.split(','):\n    d[x.split('=')[0].strip()] = x.split('=')[1].strip()", "category": "Python"}, {"instruction": "Edit the code to add an additional parameter.", "input": "def find_sum(x, y):\n    return x + y", "output": "def find_sum(x, y, z):\n    return x + y + z", "category": "Python"}, {"instruction": "Write a function to give the intersection of two unsorted linked lists.", "input": "", "output": "def intersection(head1, head2):\n    s = set()\n    current1 = head1\n    current2 = head2\n    while current1 is not None:\n        s.add(current1.data)\n        current1 = current1.next\n    result = []\n    while current2 is not None:\n        if current2.data in s:\n            result.append(current2.data)\n        current2  = current2.next\n    return result", "category": "Python"}, {"instruction": "Construct a for-loop to print all numbers from 1 to n, separated by a space.", "input": "", "output": "for i in range(1, n + 1):\n    print(i, end=\" \")", "category": "Python"}, {"instruction": "Print a binary tree level by level, starting from the root level.", "input": "", "output": "#include<iostream>\n#include<queue>\nusing namespace std;\n\n// A Binary Tree Node\nstruct Node\n{\n    int data;\n    struct Node *left, *right;\n};\n \n// Function to print the level order traversal of the tree\nvoid levelOrder(struct Node *root)\n{\n    // Base Case\n    if (root == NULL)  return;\n \n    // Create an empty queue for level order traversal\n    queue<Node *> q;\n   \n    // Enqueue Root and initialize height\n    q.push(root);\n \n    while (q.empty() == false)\n    {\n        // Print front of queue and remove it from queue\n        struct Node *node = q.front();\n        cout << node->data << \" \";\n        q.pop();\n \n        /* Enqueue left child */\n        if (node->left != NULL)\n            q.push(node->left);\n \n        /*Enqueue right child */\n        if (node->right != NULL)\n            q.push(node->right);\n    }\n}", "category": "Python"}, {"instruction": "Rewrite the following code using lambda expression instead.", "input": "def square(x):\nreturn x * x", "output": "square = lambda x: x * x", "category": "Python"}, {"instruction": "You need to edit the wrong sentence appropriately.", "input": "I likes ice cream.", "output": "I like ice cream.", "category": "Python"}, {"instruction": "Write a Java program to find the element that appears maximum number of times in an array.", "input": "int [] arr1 = {2, 8, 7, 2, 8, 2, 6}", "output": "public class MaxElement \n{\n    public static void main(String[] args) \n    {\n        int[] arr1 = {2, 8, 7, 2, 8, 2, 6};\n\n        int count = 1;\n        int max_element=arr1[0];\n        int temp_count;\n        for (int i = 0; i < arr1.length; i++)\n        {\n            temp_count = 1;\n            for (int j = i+1; j < arr1.length; j++)\n            {\n                if(arr1[i] == arr1[j]){\n                    temp_count++;\n                }\n            }\n\n            if(temp_count > count){\n                count = temp_count;\n                max_element=arr1[i];\n            }\n        }\n        \n        System.out.println(\"Max Element : \"+max_element);\n    }\n}", "category": "Python"}, {"instruction": "Design a function in Javascript to filter out the values of an array that are greater than 10.", "input": "[2, 10, 11, 19, 3, 4]", "output": "const filteredArray = arr => arr.filter(num => num <= 10);\nconsole.log(filteredArray([2, 10, 11, 19, 3, 4])); // Output: [2, 10, 3, 4]", "category": "Python"}, {"instruction": "Output the contents of the array [\"Hello\", \"World\", \"AI\", \"Machine Learning\"] using a for loop.", "input": "", "output": "for (let i = 0; i < array.length; i++) {\n console.log(array[i]);\n}", "category": "Python"}, {"instruction": "Suggest a better approach to sort the given array.", "input": "[4, 3, 8, 6, 7, 9, 2, 1]", "output": "def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range (1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    left = quick_sort(left)\n    right = quick_sort(right)\n    return left + [pivot] + right", "category": "Python"}, {"instruction": "Write a PHP script to print the current date and time in the following format: '27-April-2020 05:30:00'.", "input": "", "output": "<?php \n  echo date(\"d-F-Y H:i:s\"); \n?>", "category": "Python"}, {"instruction": "What is the product of 16 and 4?", "input": "", "output": "The product of 16 and 4 is 64.", "category": "Python"}, {"instruction": "Create a basic API that queries a database and returns a result in a certain format", "input": "", "output": "import\u00a0sqlite3\n\n# Create a connection to the db\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\n# Define a function that queries the db and fetches the required table\ndef query_db(table):\n\tquery = f\"SELECT * FROM {table}\"\n\tc.execute(query)\n\tall_rows = c.fetchall()\n\treturn all_rows\n\n# Create a function to format the result in json\ndef format_result(rows):\n\tjson_result = []\n\tfor row in rows:\n\t\trow_dict = {\n\t\t\t\"id\": row[0], \n\t\t\t\"value\": row[1]\n\t\t\t}\n\t\tjson_result.append(row_dict)\n\treturn json_result\n\n# Define a basic API endpoint to fetch the db result\nimport flask\napp = flask.Flask(__name__)\n@app.route('/api/result', methods=['GET'])\ndef fetch_result():\n\trows = query_db('table')\n\tresult = format_result(rows)\n\treturn flask.jsonify(result)\n\nif __name__ == \"__main__\":\n\tapp.run()", "category": "Python"}, {"instruction": "Write a C# code to check whether an integer is a prime number.", "input": "", "output": "public class PrimeNumberCheck\n{\n    public bool IsPrime(int n)\n    {\n        if (n < 2)return false;\n        if (n % 2 == 0) return (n == 2);\n        int m = (int)Math.Sqrt(n);\n        for (int i = 3; i <= m; i += 2)\n        {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}", "category": "Python"}, {"instruction": "Using HTML and CSS, create an input form with fields for name and address", "input": "", "output": "<form>\n  <label>Name:</label><br>\n  <input type=\"text\" name=\"name\"><br>\n  <label>Address:</label><br>\n  <textarea name=\"address\" rows=\"4\" cols=\"50\"></textarea><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Write a CSS code to make a header element bold", "input": "", "output": "h1 {\n  font-weight: bold;\n}", "category": "Python"}, {"instruction": "Modify a jQuery code to make an element translucent", "input": "", "output": "$(document).ready(function(){\n  $(\"#targetElement\").css(\"opacity\", \"0.5\");\n});", "category": "Python"}, {"instruction": "Write a code to generate all string combinations of a given alphabet", "input": "", "output": "def generate_strings(alphabet): \n    n = len(alphabet)  \n  \n    # Run a loop for all elements in array one by one \n    for i in range(1 << n): \n  \n        # Create a string s of length n \n        s = \"\" \n        for j in range(n): \n  \n            # Check if jth bit of i is set or not \n            # and if set append character j to s \n            if i & (1 << j): \n                s += alphabet[j] \n  \n        # Print the generated string \n        print(s)", "category": "Python"}, {"instruction": "Write a Python script that can convert a string to pig latin", "input": "", "output": "def pig_latin(text):\n    words = text.split()\n    Latin_words = []\n    # loop through every word \n    for word in words:\n        # seperate consonants from vowels\n        firstletter = word[0]\n        if firstletter.lower() in 'aeiou':\n            Latin_word = word+'ay'\n        else:\n            Latin_word = word[1:]+firstletter+'ay'\n        Latin_words.append(Latin_word)\n    return \" \".join(Latin_words)", "category": "Python"}, {"instruction": "Discuss the purpose of data cleaning", "input": "", "output": "The purpose of data cleaning is to ensure that the data is in an accurate and usable form. This involves eliminating or correcting errors such as missing data, incorrect data, duplicate data, and outliers. It also involves replacing invalid values with valid ones, standardizing data formats and converting data from one format to another, and filling in missing values with imputed values. Data cleaning is an important step in the data analysis pipeline, and it is necessary to ensure that your data is in an appropriate and reliable form before performing any analysis on it.", "category": "Python"}, {"instruction": "Complete the following Python code so it prints even numbers from 0 to 10.", "input": "for num in range(0, 10):\n    if", "output": "for num in range(0, 10):\n    if num % 2 == 0:\n        print(num)", "category": "Python"}, {"instruction": "Construct a simple algorithm to check if a number is prime", "input": "11", "output": "def is_prime(n):\n    # check if n is divisible by any number between 2 and n-1 \n    for i in range (2, n):\n        # if a number is divisible, then return False\n        if (n % i == 0):\n            return False\n    # if n is only divisible by itself, return True\n    return True\n\nif __name__ == '__main__':\n    n = 11\n    if(is_prime(n)):\n        print(n, \"is a prime number\")\n    else:\n        print(n, \"is not a prime number\")", "category": "Python"}, {"instruction": "Discuss some of the common applications of ranking algorithms.", "input": "", "output": "Ranking algorithms are commonly used for a wide range of applications such as web search, recommender systems, spam filtering, and sentiment analysis. In web search, ranking algorithms are used to rank websites according to relevance, so that the most relevant website appears first in the search results. Recommender systems use ranking algorithms to rank items according to user preference, so that the user can be recommended the item that best suits their preferences. Spam filtering is another application where ranking algorithms are used to identify and filter out unsolicited messages. Last but not least, sentiment analysis also uses ranking algorithms to analyze customer feedback, so that companies can identify customer sentiment and take the necessary steps to address it.", "category": "Python"}, {"instruction": "Find the number of times a particular number is repeated in an array.", "input": "[2, 3, 6, 8, 8, 5, 4, 8]", "output": "The number 8 is repeated 3 times in the array.", "category": "Python"}, {"instruction": "Compare and contrast function overloading and function overriding.", "input": "", "output": "Function overloading is when two or more functions have the same name but different parameters. This can be used to create multiple definitions of a single function that can be used to support different data types. Function overriding is when a derived class extends a base class and redefines its virtual methods. This allows for derived classes to have specialized behavior for a certain method, while still allowing for the base class to be used when that behavior isn't needed. Thus, function overloading allows for a single function to have different behavior, while function overriding allows a derived class to specialize a method of the base class.", "category": "Python"}, {"instruction": "Search for the given element in the given list and return true if it is found otherwise return false.", "input": "List: [4, 7, 8, 9], elem: 9", "output": "true", "category": "Python"}, {"instruction": "Write regex to match the pattern xaaab.", "input": "", "output": "^xaaab$", "category": "Python"}, {"instruction": "Given the two array elements, swap their positions in the array.", "input": "Array: [7, 4, 5, 6], i = 0, j = 2", "output": "Array: [5, 4, 7, 6]", "category": "Python"}, {"instruction": "Suggest a completion to the following class definition that creates a constructor to initialize a Person object.", "input": "class Person:\n    def __init__(self):", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "category": "Python"}, {"instruction": "Name three advantages of using dynamic programming", "input": "", "output": "Three advantages of using dynamic programming are:\n\n1. It provides optimal solutions to many real world problems.\n2. It allows us to solve problems that can be broken down into overlapping subproblems.\n3. It drastically reduces the computation time by avoiding repeated calculation of the same results.", "category": "Python"}, {"instruction": "Identify the operations used to calculate the sum of the given array of numbers.", "input": "Array: [2, 3, 8, 9]", "output": "The sum of the given array of numbers is calculated using the addition operation.", "category": "Python"}, {"instruction": "How would you remove duplicates from a Python list?", "input": "", "output": "The most straight-forward approach is to add the elements to a set while iterating over the original list and then build a new list out of the set.\n\nExample: \n\noriginal_list = [1,2,2,3,3,4] \n\nnew_list = list(set(original_list)) \n\nprint(new_list) \n# Output [1, 2, 3, 4]", "category": "Python"}, {"instruction": "Create a vectorized version of this code snippet in MATLAB.", "input": "for i = 1:n\n c = a(i,:).*b;\nend", "output": "c = a.*b;", "category": "Python"}, {"instruction": "What is a hash table and explain why it is an important data structure?", "input": "", "output": "A hash table is a data structure that stores data in an associative manner. It is typically implemented using an array combined with a hash function. The purpose of the hash function is to map data to array indices and facilitate efficient searches. Hash tables are important as they provide fast access to data, and can also be used to detect duplicate values.", "category": "Python"}, {"instruction": "Write a function that takes two strings and returns the total number of occurrences of the second string in the first.", "input": "string1 = \"hello world\"\nstring2 = \"world\"", "output": "def count_occurrences(string1, string2): \n    \n    # Initialize count to 0\n    count = 0\n    \n    # Iterate over the first string\n    for i in range(len(string1)): \n        # Slice the element from i to length of second string\n        temp = string1[i: i + len(string2)] \n  \n        # If sliced string and second string are equal, \n        # increase count by one\n        if temp == string2: \n            count+= 1\n  \n    return count", "category": "Python"}, {"instruction": "Create a HTML page containing a form with three input boxes.", "input": "", "output": "<html>\n  <body>\n    <form>\n      <input type=\"text\" name=\"box1\" />\n      <input type=\"text\" name=\"box2\" />\n      <input type=\"text\" name=\"box3\" />\n    </form>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to round a number 3.7 to nearest integer.", "input": "", "output": "Math.round(3.7);", "category": "Python"}, {"instruction": "Create a MySQL query to calculate the average length of time spent by customers on your website.", "input": "", "output": "SELECT AVG(TIMEDIFF(session_end_time, session_start_time)) AS Average_Time_Spent FROM customers;", "category": "Python"}, {"instruction": "Categorize the following sentence as either positive or negative sentiment: \"I had the worst experience with this product\".", "input": "I had the worst experience with this product", "output": "Negative sentiment", "category": "Python"}, {"instruction": "Create a SQL query to retrieve the names and birthdates of all employees in a table called \"employees\".", "input": "", "output": "SELECT name, birthdate FROM employees;", "category": "Python"}, {"instruction": "What is the appropriate action to take when a user enters a wrong password in a login form?", "input": "", "output": "The appropriate action is to show an error message and to prevent the user from re-submitting the login form until the correct password is entered.", "category": "Python"}, {"instruction": "Rewrite a react class component as a functional component.", "input": "class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { name: 'John' };\n  }\n\n  handleChange = (e) => {\n    this.setState({ name: e.target.value });\n  };\n\n  render() {\n    return (\n      <div>\n        <input\n          value={this.state.name}\n          onChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n}", "output": "const App = () => {\n  const [name, setName] = useState('John');\n\n  const handleChange = (e) => {\n    setName(e.target.value);\n  };\n\n  return (\n    <div>\n      <input\n        value={name}\n        onChange={handleChange}\n      />\n    </div>\n  );\n}", "category": "Python"}, {"instruction": "Create a Racket function that takes two strings as an input and returns the length of the longest common substring.", "input": "String1 = \"hello world\"\nString2 = \"world hello\"", "output": "(define (getLongestCommonSubstring string1 string2)\n    (define max-len 0)\n    (define s1-len (string-length string1))\n    (define s2-len (string-length string2))\n    (for ((i 0 (+ i 1)))\n        (< i s1-len)\n        (for ((j 0 (+ j 1)))\n            (< j s2-len)\n            (let ((cur-len 0))\n            (when (equal? (string-ref string1 i) (string-ref string2 j))\n                (while (and (< i s1-len)\n                       (< j s2-len)\n                       (equal? (string-ref string1 i) (string-ref string2 j))) \n                (set! cur-len (+ cur-len 1))\n                (set! i (+ i 1))\n                (set! j (+ j 1)))\n            (when (> cur-len max-len)\n                (set! max-len cur-len))\n            )\n        )\n    )\n    max-len\n)", "category": "Python"}, {"instruction": "Create a id with a structure of JSON and explain the components of the JSON structure.", "input": "", "output": "JSON is made up of two parts; objects, which are composed of pairs of keys and values, and arrays, which contain a sequence of values. Objects are surrounded by curly braces, and each key is separated from its value using a colon. Arrays are surrounded by square brackets and each value is separated by a comma. Both objects and arrays have nestable structure; this means that they can be nested inside each other. In a JSON document, the outermost structure will usually be an object or an array.", "category": "Python"}, {"instruction": "Write a PHP script to encode a string using base64.", "input": "String for encoding: abcdefg", "output": "<?php\n$string = \"abcdefg\";\n$encodedString = base64_encode($string); \necho $encodedString;\n?>", "category": "Python"}, {"instruction": "Create a Swift playground page that takes two strings as an input and prints their concatenation.", "input": "", "output": "import Foundation \n\nprint(\"Enter two strings:\") \nlet string1 = readLine()! \nlet string2 = readLine()!\n\nlet concatenatedString = string1 + string2 \n\nprint(\"The concatenated string is: \\(concatenatedString)\")", "category": "Python"}, {"instruction": "Explain the difference between static and non-static methods in Java.", "input": "", "output": "Static methods are methods that are associated with a class, rather than objects of that class. They can be invoked without having an instance of the class present, using the class name itself. Non-static methods are associated with objects of the class, and can only be used after instantiating an object. Additionally, static methods have access to static variables, whereas non-static methods do not.", "category": "Python"}, {"instruction": "Write a function that takes two lists as an argument and returns the elements that are common to both the lists in Python.", "input": "list1 = [1, 2, 3, 4]\nlist2 = [2, 3, 4, 5]", "output": "def common_elements(list1, list2):\n    common_list = [element for element in list1 if element in list2]\n    return common_list", "category": "Python"}, {"instruction": "Create a SQL query to modify a table by adding one new column.", "input": "Table Name: Customers\nColumn to Add: City", "output": "ALTER TABLE Customers\nADD City VARCHAR(255);", "category": "Python"}, {"instruction": "Write a Ruby program to create a class called \"Person\" with variables such as name, age, gender, etc.", "input": "", "output": "class Person \n  attr_accessor :name, :age, :gender \n  \n  def initialize(name, age, gender) \n    @name = name \n    @age = age\n    @gender = gender\n  end \nend", "category": "Python"}, {"instruction": "Given a matrix, write a program to rotate it by 90 degrees clockwise.", "input": "matrix = [[1,2,3], \n          [4,5,6], \n          [7,8,9]]", "output": "def rotateMatrix(matrix):\n    N = len(matrix[0])\n    for i in range(N // 2):\n        for j in range(i, N - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[N - 1 - j][i]\n            matrix[N - 1 - j][i] = matrix[N - 1 - i][N - 1 - j]\n            matrix[N - 1 - i][N - 1 - j] = matrix[j][N - 1 - i]\n            matrix[j][N - 1 - i] = temp\n\nrotateMatrix(matrix)", "category": "Python"}, {"instruction": "Given a dictionary, write a program to create a new dictionary where the values are the keys and the keys are the values.", "input": "{\"apple\": 1, \"banana\": 2, \"carrot\": 3}", "output": "def reverse_dict(d):\n    new_d = {v:k for k, v in d.items()}\n    return new_d\n\nd = {\"apple\": 1, \"banana\": 2, \"carrot\": 3}\nprint(reverse_dict(d))", "category": "Python"}, {"instruction": "Parse a JSON string and print all the key-value pairs in alphabetical order.", "input": "{\n \"orange\": 4,\n \"apple\": 1,\n \"banana\": 2\n}", "output": "import json\n\ndef parse_json(json_str):\n    data = json.loads(json_str)\n\n    for key, values in sorted(data.items()):\n        print(key, \"=\", values)\n\nparse_json('{\"orange\": 4, \"apple\": 1, \"banana\": 2 }')", "category": "Python"}, {"instruction": "Write a JavaScript program for converting a two-dimensional array into a one-dimensional array.", "input": "[\n    [1,2],\n    [3,4],\n    [5,6]\n]", "output": "function twoDToOneD(arr) {\n    let res = [];\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr[i].length; j++) {\n            res.push(arr[i][j]);\n        }\n    }\n    return res;\n}", "category": "Python"}, {"instruction": "Write a function that receives an array and removes every odd element from it.", "input": "[1, 2, 3, 4, 5, 6, 7, 8]", "output": "def remove_odd(arr):\n    return [i for i in arr if i % 2 == 0]", "category": "Python"}, {"instruction": "Fix the code so that it increments the number by 10 each time.", "input": "num = 0\nwhile num <= 10:\n    num += 1", "output": "num = 0\nwhile num <= 10:\n    num += 10", "category": "Python"}, {"instruction": "Classify text whether it is opinionated or objective.", "input": "Today's climate is the warmest it has ever been.", "output": "Opinionated", "category": "Python"}, {"instruction": "explain the concept of static variables in a programming language", "input": "", "output": "Static variables are variables which retain their value over multiple function calls. They are declared with the \"static\" keyword and can be accessed within the same scope in which they were declared. Static variables can be declared at the class level or at the function level and are typically used to maintain some state information across multiple calls to the same function or data between multiple instances of the same class. Static variables are commonly used to maintain a count of the number of times a function has been called, to store configuration information for the entire program, or to maintain a cumulative data value that is modified within a loop.", "category": "Python"}, {"instruction": "Generate an array with the following pattern [2, 4, 8, 16, ....1024]", "input": "", "output": "def generate_pattern(x):\n    arr = []\n    for i in range(11):\n        arr.append(x**i)\n    return arr", "category": "Python"}, {"instruction": "Parse a given XML element.", "input": "<root><book>Python for Dummies</book></root>", "output": "def parse_xml(element):\n    root = element.find('root')\n    book = root.find('book').text\n    return book", "category": "Python"}, {"instruction": "Optimize the following C code with a faster algorithm.", "input": "// C Program to find the minimum element in an array\n#include <stdio.h>\nint main()\n{\n   int array[100], minimum, size, c, location = 1;\n \n   printf(\"Enter the number of elements in array\\n\");\n   scanf(\"%d\",&size);\n \n   printf(\"Enter %d integers\\n\", size);\n \n   for ( c = 0 ; c < size ; c++ )\n      scanf(\"%d\", &array[c]);\n \n   minimum = array[0];\n \n   for ( c = 1 ; c < size ; c++ )\n   {\n      if ( array[c] < minimum )\n      {\n         minimum = array[c];\n         location = c+1;\n      }\n   }\n \n   printf(\"Minimum element is present at location %d and it's value is %d.\\n\", location, minimum);;\n   return 0;\n}", "output": "#include <stdio.h>\nint main()\n{\n   int array[100], minimum, size, c;\n \n   printf(\"Enter the number of elements in array\\n\");\n   scanf(\"%d\",&size);\n \n   printf(\"Enter %d integers\\n\", size);\n \n   for ( c = 0 ; c < size ; c++ )\n      scanf(\"%d\", &array[c]);\n \n   minimum = array[0];\n \n   // Optimization\n   int start  = 1;\n   int end  = size-1;\n   while(start <= end){\n     int mid = (start + end)/2;\n     if(array[mid] < minimum){\n       minimum = array[mid];\n       end = mid - 1;\n     } else {\n       start = mid + 1;\n     }\n   } \n \n   printf(\"Minimum element is %d.\\n\", minimum);\n   return 0;\n}", "category": "Python"}, {"instruction": "Calculate 3 to the 5th power.", "input": "", "output": "243", "category": "Python"}, {"instruction": "Write a Mongoose query to remove a document with a date field that has a value of 2021-01-05.", "input": "", "output": "Model.remove({date: '2021-01-05'});", "category": "Python"}, {"instruction": "Write a SQL query to update the status of all rows in the \u2018customers\u2019 table from active to inactive.", "input": "", "output": "UPDATE customers SET status = 'inactive' WHERE status = 'active';", "category": "Python"}, {"instruction": "Calculate the area of a triangle with base b=4 and height h = 5.", "input": "", "output": "The area of the triangle is 10 square units.", "category": "Python"}, {"instruction": "Convert the following hexadecimal number FA to its binary form.", "input": "FA", "output": "11111010", "category": "Python"}, {"instruction": "Output a Regex expression to match all dates in the following format dd/mm/yyyy", "input": "", "output": "^(0[1-9]|[12][0-9]|3[01])\\/(0[1-9]|1[0-2])\\/[0-9]{4}$", "category": "Python"}, {"instruction": "Implement a tournament bracket for a single elimination tournament using C programming.", "input": "", "output": "#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX_NUM_TEAMS 8\n\nstruct team { \n  int teamID; \n  char name[30]; \n};\n\nstruct bracket {\n  struct team *teams;\n  int numTeams;\n  int winningTeam;\n};\n\nvoid createBracket(struct bracket *bracket, int numTeams) {\n  bracket->teams = calloc(numTeams, sizeof(struct team));\n  bracket->numTeams = numTeams; \n  int matchups[numTeams/2][2] = {0};\n  \n  // Generate a list of matchups\n  int i, j;\n  for (i = 0; i < numTeams/2; i++) {\n    for (j = 0; j < 2; j++) {\n      int randID = rand() % numTeams;\n      int found = 0;\n      int k;\n      for (k = 0; k < i*2+j; k++) {\n        if (randID == matchups[k/2][k%2]) {\n          found = 1;\n          break;\n        }\n      }\n      if (!found) {\n        matchups[i][j] = randID;\n      }\n      else {\n        j--;\n      }\n    }\n  }\n  \n  // Generate list of teams\n  for (i = 0; i < numTeams; i++) {\n    struct team t;\n    t.teamID = i;\n    // Randomly generate team name\n    int n;\n    for (n = 0; n < 30; n++) {\n      t.name[n] = (rand() % 26) + 'a';\n    }\n    bracket->teams[i] = t;\n  }\n  \n  // Initialize the bracket with teams\n  for (i = 0; i < numTeams/2; i++) {\n    bracket->teams[matchups[i][0]].opponent = matchups[i][1];\n    bracket->teams[matchups[i][1]].opponent = matchups[i][0];\n  } \n}\n\nvoid evaluateBracket(struct bracket *bracket, int winningTeam) {\n  bracket->winningTeam = winningTeam;\n  \n  int count = 0;\n  int currTeam = winningTeam;\n  int opponent;\n  \n  while (currTeam != 0) {\n    opponent = bracket->teams[currTeam].opponent;\n    bracket->teams[opponent].opponent = -1;\n    currTeam = opponent;\n    count++;\n  }\n  if (count >= bracket->numTeams/2) {\n    printf(\"Winner: %s\\n\", bracket->teams[winningTeam].name);\n  }\n  else {\n    printf(\"The team %s has been eliminated from the tournament\\n\", bracket->teams[winningTeam].name);\n  }\n}", "category": "Python"}, {"instruction": "Create a Ruby class for a customer and add attributes for name, age and address.", "input": "", "output": "class Customer\n  attr_accessor :name, :age, :address\n\n  def initialize(name, age, address)\n    @name = name\n    @age = age\n    @address = address\n  end\nend", "category": "Python"}, {"instruction": "What are the features of the Cython coding language?", "input": "", "output": "Cython is a programming language that combines the speed and flexibility of Python with the static typing system of C and C++. Features of Cython include type inference, function overloading, optional static type declarations, operator and operator overloading, fast C data types, integration with C/C++ libraries, and performance enhancements through code such as Just In Time (JIT) compilation and optimization.", "category": "Python"}, {"instruction": "Write a code for creating multiple variables with a single statement in Python.", "input": "", "output": "x, y, z = 1, 2, 3", "category": "Python"}, {"instruction": "Write a script for swapping two variables in Ruby.", "input": "", "output": "x, y = y, x", "category": "Python"}, {"instruction": "Generate a valid SQL query that finds out the number of rows stored in a table", "input": "", "output": "SELECT COUNT(*) FROM table_name;", "category": "Python"}, {"instruction": "Create a web page that contains three input boxes for a user to input name, age, and gender.", "input": "", "output": "<html>\n    <head>\n        <title>Input Form</title>\n    </head>\n    <body>\n        <form>\n            Name:<br>\n            <input type=\"text\" name=\"name\"><br>\n            Age:<br>\n            <input type=\"number\" name=\"age\"><br>\n            Gender:<br>\n            <input type=\"radio\" name=\"gender\" value=\"male\"> Male<br>\n            <input type=\"radio\" name=\"gender\" value=\"female\"> Female<br><br>\n            <input type=\"submit\">\n        </form>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Use the reduce method in JavaScript to find the maximum value in a given array.", "input": "[1, 2, 3, 4, 5]", "output": "let maxNum = [1, 2, 3, 4, 5].reduce(function(a, b){\n    return Math.max(a, b)\n});", "category": "Python"}, {"instruction": "Create a script in Bash to navigate to a given directory and list all its contents.", "input": "", "output": "#!/bin/bash\n\n# Navigates to the given directory\ncd $1\n\n# Print all contents of the directory\nls", "category": "Python"}, {"instruction": "Create an algorithm to traverse a binary tree in pre-order in Python.", "input": "", "output": "# A function to do preorder tree traversal\ndef preOrder(root):\n  \n    # Base Case\n    if root is None:\n        return\n \n    # First print the data of node\n    print(root.data),\n \n    # Then recur on left child\n    preOrder(root.left)\n \n    # Finally recur on right child\n    preOrder(root.right)", "category": "Python"}, {"instruction": "Write code in Python to extract all the words from a sentence and store them in an array.", "input": "\"Hello World!\"", "output": "words = sentence.split(\" \")", "category": "Python"}, {"instruction": "Compose a for loop in Java to print the numbers from 4 to 1 one line.", "input": "", "output": "for (int i = 4; i > 0; i--) {\n    System.out.print(i + \" \");\n}", "category": "Python"}, {"instruction": "Write a SQL query to find the top 3 most visited websites on a specific day.", "input": "", "output": "SELECT name, COUNT(*) as visits \nFROM websites\nWHERE date = 'DD-MM-YYYY'\nGROUP BY name\nORDER BY visits DESC\nLIMIT 3;", "category": "Python"}, {"instruction": "Write an expression using operator overloading in C++ to simulate addition of two objects.", "input": "", "output": "// Operator Overloading in C++ \nclass MyClass \n{ \n    public: \n        int x; \n  \n        // Overload + operator to add two objects. \n        MyClass operator +(const MyClass &obj) \n        { \n            MyClass res; \n            res.x = x + obj.x; \n            return res; \n        } \n};", "category": "Python"}, {"instruction": "Design a function in JavaScript to take in two strings as parameters and return true if the strings are anagrams and false otherwise.", "input": "", "output": "function isAnagram(string1, string2) { \n  \n    // Convert both strings to lowercase \n    var s1 = string1.toLowerCase(); \n    var s2 = string2.toLowerCase(); \n  \n    // To sort the strings and \n    // remove all spaces \n    s1 = s1.replace(/ /g, '').split('').sort().join(''); \n    s2 = s2.replace(/ /g, '').split('').sort().join(''); \n  \n    if (s1 == s2) \n        return true; \n    else\n        return false; \n}", "category": "Python"}, {"instruction": "Create a switch statement in Swift to display \"The number is greater than 10\" when the given number is greater than 10.", "input": "", "output": "switch number {\n case _ where number > 10: \n    print(\"The number is greater than 10\") \n default: \n    break \n}", "category": "Python"}, {"instruction": "Write an algorithm in Java to reverse an array.", "input": "[1, 2, 3, 4, 5]", "output": "int[] reverse = new int[arr.length]; \n \nint j = arr.length; \n  \n// Initializing the index of reverse array \nint i; \n  \nfor (i = 0; i < arr.length; i++)  \n{ \n    reverse[j - 1] = arr[i]; \n  \n    j--; \n}", "category": "Python"}, {"instruction": "Create an if-else statement in C++ to check if an integer number is greater than 0.", "input": "", "output": "if (number > 0) \n   cout << number << \" is greater than 0\" << endl;\nelse\n   cout << number << \" is not greater than 0\" << endl;", "category": "Python"}, {"instruction": "Use the reduce method in JavaScript to add a given array of numbers together.", "input": "[1, 2, 3, 4, 5]", "output": "let sum = [1, 2, 3, 4, 5].reduce((acc, currentVal) => acc + currentVal, 0);", "category": "Python"}, {"instruction": "Create a series of nested for loops in Java to print the numbers from 1 to 10 in descending order on a single line.", "input": "", "output": "for (int i = 10; i >= 1; i--) \n    System.out.print(i + \" \");", "category": "Python"}, {"instruction": "What is the difference between deep learning and traditional AI?", "input": "", "output": "The primary difference between deep learning and traditional AI is the way they process and interpret data. Deep learning uses a multi-layered artificial neural network in order to learn the patterns and features in data, while traditional AI uses symbolic reasoning and rule-based algorithms to process data. Deep learning is capable of learning complex patterns and features, often outperforming traditional AI methods, while traditional AI is limited to processing pre-defined and structured data.", "category": "Python"}, {"instruction": "Develop a query in SQL to display all columns from a table named 'products' with a product price greater than 10.", "input": "", "output": "SELECT * FROM products WHERE price > 10;", "category": "Python"}, {"instruction": "Create a basic HTML skeleton for a web page.", "input": "", "output": "<html>\n  <head>\n    <title>Basic Webpage</title>\n  </head>\n  <body>\n\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create an HTML form that takes the user's name, email, and photo and saves it in a database.", "input": "", "output": "<form method=\"post\" action=\"submit.php\">\n  <input type=\"text\" name=\"name\" placeholder=\"Name\" required>\n  <input type=\"email\" name=\"email\" placeholder=\"Email\" required>\n  <input type=\"file\" name=\"photo\" placeholder=\"Photo\" required>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Using PHP, write a code to print out the current date and time in the following format: Thursday, December 18 at 4:30 PM", "input": "", "output": "echo date('l, F j \\a\\\\t g:i A');", "category": "Python"}, {"instruction": "Write a Python program that uses the function \"get_name\" to ask the user for their full name and then prints it back to them.", "input": "", "output": "def get_name():\n    \"\"\"Gets a user's full name .\"\"\"\n    first_name = input(\"What is your first name? \")\n    last_name = input(\"What is your last name? \")\n    return first_name + \" \" + last_name\n\nif __name__ == '__main__':\n    name = get_name()\n    print(\"Your name is\", name)", "category": "Python"}, {"instruction": "Implement a comparison operator that takes two strings as arguments and returns true if the strings are equal and false otherwise.", "input": "", "output": "def equals(str1, str2):\n    \"\"\"Compares two strings to see if they are equal.\"\"\"\n    return str1 == str2", "category": "Python"}, {"instruction": "Write a Python program to find the sum of Fibonacci numbers till the number 7.", "input": "", "output": "def fibonacci(n): \n    f1 = 0\n    f2 = 1\n    sum_fib = 0\n    for i in range(2, n + 1): \n        next_term = f1 + f2 \n        sum_fib += next_term\n        f1 = f2\n        f2 = next_term \n    return sum_fib\n\nprint(fibonacci(7))", "category": "Python"}, {"instruction": "Write a lambda expression to show the first character of a string.", "input": "", "output": "x = lambda a : a[0]\nprint(x(\"Hello\"))", "category": "Python"}, {"instruction": "Generate a random string of length 5 with only lowercase alphabetic characters.", "input": "", "output": "import string\nimport random\n\ndef generate_random_string(length):\n    allowed_characters = string.ascii_lowercase\n    return ''.join(random.choices(allowed_characters, k=length))\n\nrandom_string = generate_random_string(5)\nprint(random_string)", "category": "Python"}, {"instruction": "Design a CSS class with a width of 400px and a height of 200px and a border of 3px dotted yellow.", "input": "", "output": ".myClass {\n    width: 400px;\n    height: 200px;\n    border: 3px dotted yellow;\n}", "category": "Python"}, {"instruction": "Write a two-column HTML table with the film names as the first column and the release year as the second column.", "input": "Harry Potter (2001)\nAvengers (2012)\n\n<noinput>", "output": "<table>\n  <tr>\n    <th>Film Name</th>\n    <th>Release Year</th>\n  </tr>\n  <tr>\n    <td>Harry Potter</td>\n    <td>2001</td>\n  </tr>\n  <tr>\n    <td>Avengers</td>\n    <td>2012</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Generate code for a function that takes a string and returns its reverse.", "input": "", "output": "def reverseStr(string): \n    reversedString = \"\" \n    for i in range(len(string) -1, -1, -1): \n        reversedString += string[i] \n    return reversedString", "category": "Python"}, {"instruction": "Create a HTML web page with a header, a body and a footer section.", "input": "", "output": "<html>\n  <head>\n    <title>My Web Page</title>\n  </head>\n  <body>\n    <!-- content goes here -->\n  </body>\n  <footer>\n    <!-- footer content goes here -->\n  </footer>\n</html>", "category": "Python"}, {"instruction": "Convert the following list into a dictionary in Python: [1, 2, 3, 4, 5].", "input": "", "output": "my_dict = {1:1, 2:2, 3:3, 4:4, 5:5}", "category": "Python"}, {"instruction": "Create a tensorflow model to predict the probability of rain given an input dataset.", "input": "Weather dataset", "output": "The following steps can be taken to create a tensorflow model to predict the probability of rain given an input dataset:\n\n1. Preprocess and clean the input data.\n2. Split the data into training and testing datasets.\n3. Build a neural network model with the input dataset.\n4. Compile the model with a suitable loss function, optimizer, and metrics.\n5. Train the model and evaluate the performance.\n6. Predictions can be made by passing a new input into the model.", "category": "Python"}, {"instruction": "Construct a machine learning model to classify a given dataset into two class labels.", "input": "Dataset", "output": "Using a dataset with two class labels (e.g., yes/no, 0/1, etc.), a machine learning model can be constructed, for example, by using a Support Vector Machine (SVM) method with a suitable kernel. The inputs to the model would be the features from the dataset and the output would be the predicted class labels. The SVM algorithm would be trained with the input dataset and the class labels, and then tested with a test dataset to measure the accuracy of the model.", "category": "Python"}, {"instruction": "Create a SQL query to find the average length of time for all purchases.", "input": "Table structure: \nPurchase (Customer_ID, Purchase_Date, Purchase_Length)", "output": "SELECT AVG(Purchase_Length) as Average_Purchase_Length \nFROM Purchase;", "category": "Python"}, {"instruction": "Find a way to solve this particular problem using regex.", "input": "Given a string \"A-C-E-G-I\", create a new string \"ACE-GI\".", "output": "The following regex expression can be used to solve this problem: \n(?<=.)(?=-.)|(?<!-.)", "category": "Python"}, {"instruction": "Write a function that takes an array of integers and returns an array of the same length with each element multiplied by 2.", "input": "[1, 2, 3]", "output": "def multiplyByTwo(arr):\n    multipliedArr = []\n    for i in arr:\n        multipliedArr.append(i*2)\n    return multipliedArr", "category": "Python"}, {"instruction": "Manipulate the string \"Hello, World!\" using the correct Python function that will replace the word \"Hello\" with \"Goodbye\".", "input": "", "output": "def goodbye_world(string):\n    \"\"\"Replaces the word Hello with Goodbye in the string.\"\"\"\n    return string.replace(\"Hello\", \"Goodbye\")", "category": "Python"}, {"instruction": "Write code to take two numbers and determine if their product is even.", "input": "8, 12", "output": "def is_sum_even(num1, num2):\n    \"\"\"Checks if the product of two numbers is even or odd.\"\"\"\n    sum = num1 * num2\n    return sum % 2 == 0\n\nif __name__ == \"__main__\":\n    is_even = is_sum_even(8, 12)\n    print(\"Is the sum even? \", is_even)", "category": "Python"}, {"instruction": "Sort the given list according to the last three digits of every number.", "input": "[332, 555, 898, 876]", "output": "def sort_list(numbers):\n    \"\"\"Sorts a list of numbers according to the last three digits of each number.\"\"\"\n    return sorted(numbers, key=lambda x: x % 1000)", "category": "Python"}, {"instruction": "Take a string and remove all the duplicated words within it.", "input": "", "output": "def remove_duplicates(string):\n    \"\"\"Removes all repeated words from a string.\"\"\"\n    words = string.split()\n    seen = set()\n    result = []\n    for word in words:\n        if word not in seen:\n            seen.add(word)\n            result.append(word)\n    return \" \".join(result)", "category": "Python"}, {"instruction": "Create a function in JavaScript that takes in a number and a power, and returns the result of the power operation on the number.", "input": "num = 2, pow = 5", "output": "function power(num, pow) {\n    let result = 1;\n    for (let i = 1; i <= pow; i++) {\n        result *= num;\n    }\n    return result;\n}", "category": "Python"}, {"instruction": "Create a method named 'combine' to combine two strings.", "input": "String str1 = \"Hello\";\nString str2 = \"World\";", "output": "public String combine(String str1, String str2) {\n    return str1+str2;\n}", "category": "Python"}, {"instruction": "Create a JavaScript function named 'calculateAge' that determines a person's age based on the birth year given.", "input": "", "output": "function calculateAge(birthYear) {\n  let age = 2019 - birthYear;\n  return age;\n}", "category": "Python"}, {"instruction": "Create a class named 'Car' with the given properties.", "input": "class Car: Make, Model, Year", "output": "class Car:\n  def __init__(self, make, model, year):\n    self.make = make\n    self.model = model\n    self.year = year", "category": "Python"}, {"instruction": "Generate an HTML element which displays the phrase \"Hello, World!\"", "input": "", "output": "<p>Hello, World!</p>", "category": "Python"}, {"instruction": "What is the Python equivalent of the C++ code snippet?", "input": "#include <iostream>\n\nint main() {\n std::cout << \"Hello, World!\" << std::endl;\n return 0;\n}", "output": "print(\"Hello, World!\")", "category": "Python"}, {"instruction": "Write a code to filter out numbers which are divisible by 3 and 5 from a given list.", "input": "list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "output": "def filter_3_5(nums): \n    return [num for num in nums if num % 3 == 0 and num % 5 == 0]\n\nprint(filter_3_5(list))", "category": "Python"}, {"instruction": "Using jQuery, write a script to select all elements with the classname \"highlight\".", "input": "", "output": "$('.highlight').each(function () { \n    $(this).addClass('selected'); \n});", "category": "Python"}, {"instruction": "Write a code to convert a list of comma or semicolon separated strings into a single string.", "input": "list = ['apple', 'orange', 'banana']", "output": "def convert_list_to_str(list):\n    return \";\".join(list) \n\nprint(convert_list_to_str(list))", "category": "Python"}, {"instruction": "Given a collection of integers, write a code to sort the integers in ascending order.", "input": "arr = [5, 7, 3, 8, 10]", "output": "arr = [5, 7, 3, 8, 10]\n\n# Sort the array\narr.sort()\n\nprint(f\"Sorted list: {arr}\")", "category": "Python"}, {"instruction": "Create a HQL query to sort records by descending order.", "input": "", "output": "SELECT *\nFROM table\nORDER BY column DESC", "category": "Python"}, {"instruction": "Write a SQL query to select only unique rows.", "input": "", "output": "SELECT DISTINCT *\nFROM table", "category": "Python"}, {"instruction": "Write a Python program to create a Caesar Cipher encryption algorithm.", "input": "", "output": "def cipher(input_str, key):\n  output_str = \"\"\n\n  for char in input_str:\n    if char.isalpha():\n      # Encrypt each character\n      ascii_value = ord(char)\n      ascii_value = ascii_value + (key % 26)\n      if char.isupper():\n        if ascii_value > ord(\"Z\"):\n          ascii_value -= 26\n      elif char.islower():\n        if ascii_value > ord(\"z\"):\n          ascii_value -= 26  \n      output_str += chr(ascii_value)\n    else:\n      output_str += char\n\n  return output_str\n\nif __name__ == '__main__':\n  # Sample input\n  input_str = 'Hello World!'\n  key = 5\n  print('Original input: {}'.format(input_str))\n\n  # Encryting the string\n  cipher_str = cipher(input_str, key)\n  print('Encrypted input: {}'.format(cipher_str))\n\n  # Decrypting the string\n  plain_text = cipher(cipher_str, -key)\n  print('Decrypted input: {}'.format(plain_text))", "category": "Python"}, {"instruction": "Given a sequence of strings, write a code to check if all the strings in the sequence are unique.", "input": "arr = [\"cat\",\"dog\",\"mouse\"]", "output": "arr = [\"cat\",\"dog\",\"mouse\"]\n\n# Check if the strings are unique\ndef is_unique(arr):\n    seen = set()\n    for item in arr:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True\n\nif is_unique(arr):\n    print(\"All the strings in the sequence are unique.\")\nelse:\n    print(\"Some of the strings in the sequence are not unique.\")", "category": "Python"}, {"instruction": "Given three numbers, write a code to find the maximum among them.", "input": "x = 10\ny = 15\nz = 5", "output": "x = 10\ny = 15\nz = 5\n\n# Find the maximum\nmax_val = max(x, y, z)\n\nprint(f\"The maximum among {x}, {y}, and {z} is {max_val}.\")", "category": "Python"}, {"instruction": "Write a function that returns the day of the week given a date.", "input": "date = '2020-12-30'", "output": "date = '2020-12-30'\n\nimport datetime\n\ndef getDayofWeek(date):\n    # Convert the string to datetime\n    d = datetime.datetime.strptime(date, \"%Y-%m-%d\")\n    # Return the day of the week\n    return d.strftime(\"%A\")\n\nprint(f\"The day of the week for {date} is {getDayofWeek(date)}.\")", "category": "Python"}, {"instruction": "Write an R statement to calculate the probability of getting a number greater than 5 from a range of 1 to 10.", "input": "", "output": "# Calculate the probability\nprobability = mean(x > 5)\n\nprint(f\"Probability of getting a number greater than 5 from a range of 1 to 10 is {probability}.\")", "category": "Python"}, {"instruction": "Compile and execute this program using the C++ compiler.", "input": "#include <iostream>\n\nint main() {\n std::cout << \"Hello, World!\" << std::endl;\n return 0;\n}", "output": "The program can be compiled with the command \"g++ <filename>\".\nThe program can be executed with the command \"./a.out\" (assuming the output file is named \"a.out\").", "category": "Python"}, {"instruction": "Write a for loop in JavaScript that iterates 10 times and prints a message each time.", "input": "", "output": "for (let i = 0; i < 10; i++) {\n    console.log(`Iteration number ${i}`);\n}", "category": "Python"}, {"instruction": "Write a Java program that prompts the user to enter two strings and outputs whether the two strings are anagrams.", "input": "", "output": "import java.util.HashMap;\n\npublic class Anagram { \n\n    // Utility method to check whether two strings are anagram or not \n    static boolean areAnagram(String A, String B) { \n  \n        // If length of both strings is not same, then they can't be anagram\n        if (A.length() != B.length()) \n            return false; \n  \n        // Make a copy of string\n        A = A.toLowerCase(); \n        B = B.toLowerCase(); \n  \n        // Create a hash map\n        HashMap<Character, Integer> map = new HashMap<>(); \n  \n        // Iterate through both strings and increment count\n        // in hash map \n        for (int i = 0; i < A.length(); i++) { \n            char ch = A.charAt(i); \n  \n            if (map.containsKey(ch)) {\n                int f = map.get(ch); \n                f++; \n                map.put(ch, f); \n            } else {\n                map.put(ch, 1); \n            }\n        } \n  \n        for (int i = 0; i < B.length(); i++) {\n            char ch = B.charAt(i); \n            if (map.containsKey(ch)) {\n                int f = map.get(ch); \n\n                // If char is not present, then by default \n                // f would be 0\n                if (f == 0) \n                    return false; \n  \n                f--; \n                map.put(ch, f); \n            } else {\n                return false; \n            }\n        }\n        return true;\n    } \n  \n    // Driver code \n    public static void main (String[] args) throws java.lang.Exception { \n        String A = \"listen\";\n        String B = \"silent\";\n        if (areAnagram(A, B)) {\n            System.out.println(\"The two strings are anagrams of each other.\");\n        } else {\n            System.out.println(\"The two strings are not anagrams of each other.\");\n        }\n    } \n}", "category": "Python"}, {"instruction": "Take the following pandas DataFrame, and convert it to a NumPy array.", "input": "import pandas as pd\n\ndf = pd.DataFrame([[1,2,3], [4,5,6], [7,8,9]])", "output": "import numpy as np\n\ndf_array = np.array(df)", "category": "Python"}, {"instruction": "Output the letter frequency from a text", "input": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.", "output": "Letter frequency: \n\nL: 1\nO: 2\nR: 2\nE: 2\nM: 2\nI: 2\nP: 2\nS: 2\nU: 2\nD: 1\nA: 2\nC: 2\nT: 2\nG: 1", "category": "Python"}, {"instruction": "Create a new list of strings of length greater than 5 from another list", "input": "[\"apple\", \"banana\", \"carrot\"]", "output": "long_words = [word for word in [\"apple\", \"banana\", \"carrot\"] if len(word) > 5]", "category": "Python"}, {"instruction": "Design a stack class for a language of your choice", "input": "", "output": "class Stack:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, item):\n        self.stack.append(item)\n\n    def pop(self):\n        self.stack.pop()\n\n    def peek(self):\n        return self.stack[-1]\n\n    def is_empty(self):\n        return not self.stack", "category": "Python"}, {"instruction": "Calculate the greatest common divisor of 36 and 24", "input": "", "output": "The greatest common divisor of 36 and 24 is 12.", "category": "Python"}, {"instruction": "Identify the dependent and independent variables in the following equation", "input": "y=x^2+5", "output": "Independent variable: x \nDependent variable: y", "category": "Python"}, {"instruction": "Generate a data frame with two columns: 'product' and 'price'", "input": "product1: Burger\nprice1: $6\nproduct2: Fries\nprice2: $2", "output": "import pandas as pd\n\ndata = {'product':['Burger', 'Fries'], 'price':[6, 2]}\n\ndf = pd.DataFrame(data)\n\nprint(df)", "category": "Python"}, {"instruction": "Provide an example of using Python's range() function to generate a range of numbers.", "input": "", "output": "# Print numbers from 0 to 9\nfor x in range(10):\n  print(x)\n\n# Print numbers from 3 to 8\nfor x in range(3, 9):\n  print(x)\n\n# Print numbers from 3 to 8 incrementing by 2\nfor x in range(3, 9, 2):\n  print(x)", "category": "Python"}, {"instruction": "How could you modify the following HTML to include a class attribute?", "input": "<div id=\"message\">Hello World!</div>", "output": "<div id=\"message\" class=\"my-class\">Hello World!</div>", "category": "Python"}, {"instruction": "Replace the following line of Javascript to appy the data-attribute to the element.", "input": "document.getElementById(\"message\").append(\"My Message\");", "output": "document.getElementById(\"message\").setAttribute(\"data-text\", \"My Message\");", "category": "Python"}, {"instruction": "What is the proper way to check if a variable of type String is empty in Bash?", "input": "", "output": "if [ -z \"$var\" ]; then \n    echo \"The variable is empty.\"\nfi", "category": "Python"}, {"instruction": "Given an integer, calculate the sum of the numbers till that number.", "input": "num = 7", "output": "# set the sum to 0\nsum = 0\n\n# loop from 1 to 7\nfor i in range(1, num+1):\n   # add each number to \"sum\"\n   sum += i\n\n# print the sum\nprint(sum)\n28", "category": "Python"}, {"instruction": "Print the length and the middle element of the given array.", "input": "arr = [1, 2, 3, 4, 5]", "output": "# print the length of array\nprint(len(arr))\n5\n \n# print the middle element of array\nmidIndex = len(arr) // 2\nprint(arr[midIndex])\n3", "category": "Python"}, {"instruction": "Change the capitalization of the a text string.", "input": "Hello World", "output": "hello world", "category": "Python"}, {"instruction": "Under the given dictionary, write a code to replace the value at a given key.", "input": "dictionary = {\n    'name': 'David',\n    'age': 20\n}\nkey = 'name'\nvalue = 'Eddie'", "output": "dictionary[key] = value", "category": "Python"}, {"instruction": "Find the value of a variable in a given environment.", "input": "env={'key1': 1, 'key2': 2}\nvariable=\"key2\"", "output": "value = env[variable]", "category": "Python"}, {"instruction": "Implement a quick sort algorithm for a given array list.", "input": "", "output": "def quick_sort(A):\n    quick_sort_helper(A, 0, len(A) - 1)\n\ndef quick_sort_helper(A, start, end):\n    if start < end:\n        p_index = partition_list(A, start, end)\n        quick_sort_helper(A, start, p_index - 1)\n        quick_sort_helper(A, p_index + 1, end)\n\ndef partition_list(A, start, end):\n    pivot = A[end]\n    p_index = start\n    for i in range(start, end):\n        if A[i] <= pivot:\n            A[i], A[p_index] = A[p_index], A[i]\n            p_index += 1\n    A[p_index], A[end] = A[end] , A[p_index]\n    return p_index", "category": "Python"}, {"instruction": "Generate a list of all the divisors of a given number.", "input": "", "output": "def generateDivisors(n): \n    divisors = [] \n    for i in range(1, n + 1): \n        if n % i == 0: \n            divisors.append(i) \n              \n    return divisors", "category": "Python"}, {"instruction": "Given a list of numbers and a target, write an algorithm to determine if the list contains a subset that sums up to the target.", "input": "", "output": "def subsetsum(arr, target):\n    n = len(arr)\n    dp = [[False for x in range(target + 1)] for y in range(n + 1)]\n    dp[0][0] = True\n\n    for i in range(1, n+1):\n        for j in range(target + 1):\n            dp[i][j] = dp[i-1][j] or (arr[i-1] <= j and dp[i-1][j - arr[i-1]])\n    return dp[n][target]", "category": "Python"}, {"instruction": "Write a code in Python that will take a string as input and return it with the words in reverse order.", "input": "", "output": "def reverseWords(s):\n    words = s.split(\" \")\n    words.reverse()\n    return \" \".join(words)", "category": "Python"}, {"instruction": "Write a SQL query that will get the name, age, and current salary of all employees who are older than 30.", "input": "", "output": "SELECT name, age, current_salary\nFROM employees\nWHERE age > 30", "category": "Python"}, {"instruction": "Given the following string, provide a function to reverse it.", "input": "\"Hello World!\"", "output": "def reverseString(s):\n    return s[::-1]", "category": "Python"}, {"instruction": "Create a Regex expression that will match strings that contain the word \"hello\".", "input": "", "output": "\\bhello\\b", "category": "Python"}, {"instruction": "Write a code in Java that will get all the elements from an array that are greater than the given number.", "input": "", "output": "public static List<Integer> getElementsGreaterThan(int[] array, int number) {\n    List<Integer> result = new ArrayList<>();\n    for (int element : array) {\n        if (element > number) {\n            result.add(element);\n        }\n    }\n    return result;\n}", "category": "Python"}, {"instruction": "An array of integers is given, write a function to print the second largest element of the array.", "input": "", "output": "def secondLargest(arr):\n    first = 0\n    second = 0\n    for i in range(len(arr)):\n        if arr[i] > first:\n            second, first = first, arr[i]\n        elif (arr[i] > second and arr[i] < first):\n            second = arr[i]\n    return second", "category": "Python"}, {"instruction": "Create a function in Python that will return the maximum difference between any two numbers present in an array.", "input": "", "output": "def max_difference(arr):\n    difference = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[j] - arr[i] > difference:\n                difference = arr[j] - arr[i]\n    return difference", "category": "Python"}, {"instruction": "Based on the following input array, return the largest two numbers in the array.", "input": "numbers = [10, 9, 8, 7, 6, 5]", "output": "# return the two largest numbers in the array\nlargestOne = max(numbers)\nnumbers.remove(largestOne)\nlargestTwo = max(numbers)\n \nprint(largestOne, largestTwo)\n10 9", "category": "Python"}, {"instruction": "Write an Objective-C program for printing the factorial of a number 5.", "input": "Integer number: 5", "output": "#include <stdio.h>\n\nint factorial(int n)\n{\n    int result = 1;\n    for (int i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\nint main()\n{\n    int input = 5;\n    int result = factorial(input);\n    printf(\"The factorial of %d is %d\", input, result);\n    return 0;\n}", "category": "Python"}, {"instruction": "Construct a while loop in C for printing even numbers from 0 to 10.", "input": "", "output": "int num = 0;\nwhile(num <= 10)\n{\n    printf(\"%d \", num);\n    num += 2;\n}", "category": "Python"}, {"instruction": "Generate a Swift program for adding two numbers given as input.", "input": "Input 1: 5\nInput 2: 10", "output": "func addTwoNumbers(number1: Int, number2: Int) -> Int {\n    let result = number1 + number2\n    return result\n}\n\nlet input1 = 5\nlet input2 = 10\nlet result = addTwoNumbers(number1: input1, number2: input2)\nprint(\"The result of addition is \\(result)\")", "category": "Python"}, {"instruction": "Design a shell script for sorting the elements of a given array [2, 5, 1, 8, 4].", "input": "Array elements: [2, 5, 1, 8, 4]", "output": "#!/bin/bash\n\n#array elements\narr=(2 5 1 8 4)\n\n#Sorting the array in ascending order\nfor((i=0;i<4;i++))\ndo\n    for((j=0;j<4-i;j++))\n    do\n        if [ ${arr[j]} -gt ${arr[$((j+1))]} ]\n        then\n           # swap\n           temp=${arr[j]}\n           arr[$j]=${arr[$((j+1))]}\n           arr[$((j+1))]=$temp\n        fi\n    done\ndone\necho ${arr[*]}", "category": "Python"}, {"instruction": "Construct an if-else block in Java to determine if the number 15 is an even number or an odd number.", "input": "Integer: 15", "output": "int num = 15;\n\nif(num % 2 == 0)\n{\n  System.out.println(\"Even\");\n}\nelse\n{\n  System.out.println(\"Odd\");\n}", "category": "Python"}, {"instruction": "Execute a valid query using PostgreSQL for finding the title of all movies released in the year 2000.", "input": "", "output": "SELECT title\nFROM movies\nWHERE release_year = 2000;", "category": "Python"}, {"instruction": "Formulate a MATLAB expression for calculating the sum of the first 10 natural numbers.", "input": "", "output": "answer = sum(1:10)", "category": "Python"}, {"instruction": "Write an SQL statement for creating a table called \"movies\".", "input": "", "output": "CREATE TABLE movies (\n id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, \n title VARCHAR(255),\n genre VARCHAR(255),\n release_year INT,\n rating DECIMAL(2,1)\n);", "category": "Python"}, {"instruction": "Create a CSS block for changing the background color of a webpage to yellow.", "input": "", "output": "body {\n    background-color: yellow;\n}", "category": "Python"}, {"instruction": "Create a basic form in HTML containing two input boxes for first name and surname.", "input": "", "output": "<html>\n  <head>\n    <title>User Information Form</title>\n  </head>\n  <body>\n    <form>\n      First Name:<br>\n      <input type=\"text\" name=\"firstname\"><br>\n      Surname:<br>\n      <input type=\"text\" name=\"surname\"><br><br>\n      <input type=\"submit\">\n    </form>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Given a string, write a code to print the length of the string.", "input": "string = \"Hello world!\"", "output": "print(len(string))\n12", "category": "Python"}, {"instruction": "Create a CSS style for a <p> tag to make it bold, italic and center-aligned.", "input": "", "output": "p {\n  font-weight: bold;\n  font-style: italic;\n  text-align: center;\n}", "category": "Python"}, {"instruction": "Create a regex to extract links from a block of text", "input": "Text: The website www.example.com has great resources", "output": "Regex: https?://[\\w\\d./]+", "category": "Python"}, {"instruction": "Create a Python loop that iterates for 10 times.", "input": "", "output": "for i in range(10):\n    ...", "category": "Python"}, {"instruction": "Create a C# class that contains a constructor.", "input": "", "output": "public class Example{\n    public int num;\n    \n    public Example(int num){\n        this.num = num;\n    }\n}", "category": "Python"}, {"instruction": "Construct a query in SQL to group records by some value.", "input": "Table: \n\n+-----------+-----------+\n| Item      | Category  |\n+-----------+-----------+\n| Pencil    | Office    |\n| Phone     | Electronics|\n| Pen       | Office    |\n| Monitor   | Electronics|\n+-----------+-----------+", "output": "SELECT Item, Category \nFROM table \nGROUP BY Category;", "category": "Python"}, {"instruction": "Create an array in C++ of 10 integers and assign them all to 0.", "input": "", "output": "int numbers[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};", "category": "Python"}, {"instruction": "Write a function in Python to return the first n digits of the Fibonacci sequence.", "input": "n = 5", "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n\nfibonacci(n)", "category": "Python"}, {"instruction": "Create a JavaScript loop with the condition i < 5.", "input": "", "output": "for (let i = 0; i < 5; i++) {\n  ...\n}", "category": "Python"}, {"instruction": "Construct an HTML form element to define a required input field.", "input": "", "output": "<input type=\"text\" required>", "category": "Python"}, {"instruction": "Create a CSS class that aligns its content left.", "input": "", "output": ".left-align {\n  text-align: left;\n}", "category": "Python"}, {"instruction": "Write a regular expression to match the phrase \"hello people\"", "input": "", "output": "/hello\\s+people/", "category": "Python"}, {"instruction": "Create a SQL query to sort a table by its numerical contents.", "input": "Table: \n\n+-----------+-----------+\n| Name      | Score     |\n+-----------+-----------+\n| John      |     90    |\n| Mary      |     80    |\n| Miguel    |     75    |\n| Fanny     |     99    |\n+-----------+-----------+", "output": "SELECT * \nFROM table \nORDER BY Score;", "category": "Python"}, {"instruction": "Write a function to print the spiral ordering of an input matrix.", "input": "[[1, 2, 3], \n [4, 5, 6], \n [7, 8, 9]]", "output": "def spiralPrint(m, n, a) : \n    k = 0; l = 0\n  \n    ''' k - starting row index \n        m - ending row index \n        l - starting column index \n        n - ending column index \n        i - iterator '''\n  \n  \n    while (k < m and l < n) : \n          \n        # Print the first row from the remaining rows  \n        for i in range(l, n) : \n            print(a[k][i], end = \" \") \n              \n        k += 1\n  \n        # Print the last column from the remaining columns  \n        for i in range(k, m) : \n            print(a[i][n - 1], end = \" \") \n              \n        n -= 1\n  \n        # Print the last row from the remaining rows  \n        if ( k < m) : \n              \n            for i in range(n - 1, (l - 1), -1) : \n                print(a[m - 1][i], end = \" \") \n              \n            m -= 1\n          \n        # Print the first column from the remaining columns  \n        if (l < n) : \n            for i in range(m - 1, k - 1, -1) : \n                print(a[i][l], end = \" \") \n              \n            l += 1\n  \na = [ [1, 2, 3, 4, 5, 6], \n      [7, 8, 9, 10, 11, 12],  \n      [13, 14, 15, 16, 17, 18] ] \n        \nspiralPrint(3, 6, a)", "category": "Python"}, {"instruction": "Write an SQL query that returns the average age for students in a specific class.", "input": "", "output": "SELECT AVG(age)\nFROM students\nWHERE class = 'XYZ';", "category": "Python"}, {"instruction": "Write a Python program to determine if an input string is a valid IP address.", "input": "", "output": "import re\ndef isValidIP(ip): \n    # check if the string is a valid IP address\n    regex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)'''\n    # compile the regex \n    pattern = re.compile(regex) \n    \n    # Pass the string in search() method\n    if(pattern.search(ip)):  \n        return True\n    else:  \n        return False\n    \n# Driver Code\nprint(isValidIP(\"192.168.0.1\"))", "category": "Python"}, {"instruction": "Given two strings, sort them in alphabetically ascending order.", "input": "\"javascript\"\n\"python\"", "output": "def sort_str(str1, str2): \n    # extract the words from the strings \n    str1_list = list (map (str, str1)) \n    str2_list = list (map (str, str2)) \n  \n    # sort the strings \n    str1_list.sort() \n    str2_list.sort() \n  \n    # join the chars of the strings \n    sorted_str1 = ''.join(str1_list) \n    sorted_str2 = ''.join(str2_list) \n  \n    # check if the words are the same \n    if (sorted_str1 == sorted_str2): \n        return True\n    else: \n        return False\n            \nprint(sort_str(\"javascript\", \"python\"))", "category": "Python"}, {"instruction": "Create a sass function to change the text color of a web page", "input": "", "output": "@function text-color($text-color, $background-color) {\n  // Calculate how much Black and White needs to be in the text to be readable\n  $res: 0;\n  $black: 0;\n  $white: 0;\n\n  @if (lightness($background-color) > 50) {\n    // Use black on light backgrounds\n    $black: 100%;\n    $white: (1 - ( (255 - ( lightness($text-color) * 2.55)) / ( lightness($background-color) * 2.55 ) ) ) * 100%;\n  } @else {\n    // Use white on dark backgrounds\n    $black: (1 - (( lightness($text-color) * 2.55) / ( 255 - (lightness($background-color) *  2.55)))) * 100%;\n    $white: 100%;\n  }\n\n  $res: ( $black < $white ) ? mix(black, $text-color, $black) : mix(white, $text-color, $white );\n\n  @return $res;\n\n}", "category": "Python"}, {"instruction": "Write an XPATH expression to select an element with a specific id", "input": "", "output": "//*[@id=\"myElement\"]", "category": "Python"}, {"instruction": "Create a Node.js module to return the highest value in an array", "input": "", "output": "const findHighestValue = arr => {\n  let highest = null;\n  arr.forEach(num => {\n    if (!highest || num > highest) {\n      highest = num;\n    }\n  });\n  return highest;\n};\n\nmodule.exports = findHighestValue;", "category": "Python"}, {"instruction": "Create a postgres query to select all rows from a table named 'employee' where the age is greater than 25", "input": "", "output": "SELECT * FROM employee WHERE age > 25;", "category": "Python"}, {"instruction": "What is the maximum number of columns allowed in a MySQL table?", "input": "", "output": "The maximum number of columns allowed in a MySQL table is 4096.", "category": "Python"}, {"instruction": "Create a div in HTML with a background color of 'blue'.", "input": "", "output": "<div style=\"background-color:blue;\"></div>", "category": "Python"}, {"instruction": "Write a function in Python to iterate over the items in a dictionary.", "input": "dict = {'Apple':1, 'Orange':2, 'Mango':3}", "output": "def iterate_dictionary(dict): \n  for key in dict: \n    print(key, ':', dict[key]) \n\niterate_dictionary(dict)", "category": "Python"}, {"instruction": "Create a basic HTML page with a <title> tag and a <h1> tag.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Create a basic HTML page</title>\n</head>\n<body>\n  <h1>Hello, World!</h1>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create a set in Java from a given array of numbers.", "input": "Array: [2, 3, 5, 4, 2, 3]", "output": "int[] arr = {2, 3, 5, 4, 2, 3};\nSet<Integer> set = new HashSet<Integer>();\nfor (int i : arr) {\n    set.add(i);\n}", "category": "Python"}, {"instruction": "Split a given string on the separator \u201c:\u201d.", "input": "sentence = \"This:is:a:string\"", "output": "sentence.split(':') \n# Output: ['This', 'is', 'a', 'string']", "category": "Python"}, {"instruction": "Construct a while loop in Python to print all numbers less or equal to 10.", "input": "", "output": "i = 1\n\nwhile(i <= 10):\n  print(i)\n  i += 1", "category": "Python"}, {"instruction": "Create a MySQL query to update the date in the 'date' column of the 'employees' table.", "input": "", "output": "UPDATE employees SET date = NOW() WHERE ID = <id>;", "category": "Python"}, {"instruction": "Generate a Jupyter notebook to display a scatterplot of a given dataset.", "input": "Data: [[5.1, 3.5], [1.4, 2.3], [3.3, 4.3], [3.6, 2.7]]", "output": "#Import relevant packages \nimport pandas as pd \nimport matplotlib.pyplot as plt\n\n#Create dataframe\ndata = [[5.1, 3.5], [1.4, 2.3], [3.3, 4.3], [3.6, 2.7]]\ndf = pd.DataFrame(data, columns = ['x','y']) \n  \n#Create scatterplot\nplt.scatter(x=df[\"x\"], y=df[\"y\"])\n\n#Name axes\nplt.xlabel('x')\nplt.ylabel('y')\n\n#Show figure\nplt.show()", "category": "Python"}, {"instruction": "Annotate the given code with its function", "input": "def foo(a, b): \n    c = a + b \n    return c", "output": "def foo(a, b): \n# This function adds two numbers and returns the sum\n    c = a + b\n    return c", "category": "Python"}, {"instruction": "Divide the list into two equal halves and output them.", "input": "list_c = [1,2,3,4,5,6]", "output": "list1 = [1,2,3]\nlist2 = [4,5,6]", "category": "Python"}, {"instruction": "Parse the following string to obtain all the digits.", "input": "str1 = \"Price of the product is $128.\"", "output": "'128'", "category": "Python"}, {"instruction": "Create and fill a 2-dimensional list with the dimensions n and m.", "input": "n = 3, m = 5", "output": "list_2d = [[0 for i in range(m)] for j in range(n)]", "category": "Python"}, {"instruction": "Output the size of the below list.", "input": "list_a = [1, 2, 3, 4]", "output": "4", "category": "Python"}, {"instruction": "Extract the values of the keys of a given dictionary.", "input": "Dictionary = {'name': 'John', 'age': 35, 'job': 'teacher'}", "output": "name - John\nage - 35\njob - teacher", "category": "Python"}, {"instruction": "Write a python script that takes user input and prints out the squares of the numbers", "input": "", "output": "# Take input from user\nnumbers = input(\"Enter numbers: \") \n  \n# split the string \nnumbers = list(map(int, numbers.split(' '))) \n  \n# Loop to print the squares of numbers\nfor number in numbers:\n    print(number*number)", "category": "Python"}, {"instruction": "Create a dictionary comprehension for the given data.", "input": "{\"A\":1, \"B\":2, \"C\":3, \"D\":4}", "output": "Dict = {key: value for key, value in {\"A\":1, \"B\":2, \"C\":3, \"D\":4}.items()}", "category": "Python"}, {"instruction": "Train a machine learning model to predict whether a customer is likely to purchase a product.", "input": "", "output": "import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Read data and split into training and test sets\ndata = pd.read_csv(\"customer_data.csv\")\nX = data.drop(\"target\", axis=1)\ny = data.target\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Train the model\nclf = RandomForestClassifier()\nclf.fit(X_train, y_train)\n\n# Evaluate the model\nscore = clf.score(X_test, y_test)\nprint(\"Model accuracy:\", score)", "category": "Python"}, {"instruction": "Write a regular expression to check if a string ends with \"py\".", "input": "", "output": "import re\n\npattern = r\"py$\"\n\n# Check if a string ends with \"py\"\nif re.search(pattern, \"test.py\"):\n  print(\"String ends with 'py'.\") # Output: String ends with 'py'.", "category": "Python"}, {"instruction": "Create a function that takes as input a string and evaluates its quantity to true or false.", "input": "", "output": "def is_empty(str):\n  ''' This function takes as input a string and evaluates its \n      quantity to true or false.\n  '''\n  if len(str.strip()) == 0:\n    return True\n  else:\n    return False", "category": "Python"}, {"instruction": "Take the following matrix and transpose it.", "input": "matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]", "output": "transposed_matrix = [\n  [1, 4, 7],\n  [2, 5, 8],\n  [3, 6, 9]\n]", "category": "Python"}, {"instruction": "Create a GraphQL query to get the data from the given API.", "input": "{\n  users {\n    id\n    name\n    email\n  }\n}", "output": "query getData {\n  users {\n    id\n    name\n    email\n  }\n}", "category": "Python"}, {"instruction": "Create an HTTP request to get the data from the given API and parse it into a JSON object.", "input": "https://example.com/api/getData", "output": "import requests \n\nurl = \"https://example.com/api/getData\"\nresponse = requests.get(url)\ndata = response.json()", "category": "Python"}, {"instruction": "Create a PHP script to insert values into a table", "input": "The table name is 'users' and the fields are username, email and password", "output": "<?php\n// Create connection object\n$conn = new mysqli('hostname', 'username', 'password', 'database_name');\n\n// Set the query string\n$sql = \"INSERT INTO users (username, email, password) VALUES (?, ?, ?)\";\n\n// Prepare a statement\n$stmt = $conn->prepare($sql);\n\n// Bind parameters to the query\n$stmt->bind_param('sss', $username, $email, $password);\n\n// Execute the statement\n$stmt->execute();\n?>", "category": "Python"}, {"instruction": "Write a shell script that download and install the latest version of Python 3.", "input": "", "output": "# Get the latest version of Python\nlatest_python=$(curl -s https://www.python.org/ftp/python/)\n# Get the filename from the link\npython_filename=\"${latest_python##*/}\"\n# Download the version\nwget https://www.python.org/ftp/python/$python_filename\n# Unpack the file\ntar -xzf $python_filename\n# Install Python\ncd $python_filename\n./configure --prefix=/usr/local/bin\nmake\nmake install", "category": "Python"}, {"instruction": "Write a function that transposes a 2D array from column-major format to row-major format.", "input": "The array is [[1,2,3],[4,5,6],[7,8,9]]", "output": "def transpose(matrix):\n    row_major = []\n    row, col = len(matrix), len(matrix[0])\n    for i in range(col):\n        row_major.append([])\n        for j in range(row):\n            row_major[i].append(matrix[j][i])\n\n    return row_major", "category": "Python"}, {"instruction": "Create a program that prints \"Hello World\" on the screen.", "input": "", "output": "print('Hello World')", "category": "Python"}, {"instruction": "Given the following list, write a program to sort it in ascending order.", "input": "[3, 4, -5, 6, 1, -2]", "output": "def bubbleSort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                \n    return arr \n\narr = [3, 4, -5, 6, 1, -2]\nprint(bubbleSort(arr))", "category": "Python"}, {"instruction": "Write a code to check if two rectangles overlap with each other.", "input": "rect1 = (0,0,10,10)\nrect2 = (8,8,12,12)", "output": "def check_overlap(rect1, rect2):\n    x1, y1, w1, h1 = rect1\n    x2, y2, w2, h2 = rect2\n    \n    x_overlap = max(0, min(x1 + w1, x2 + w2) - max(x1, x2))\n    y_overlap = max(0, min(y1 + h1, y2 + h2) - max(y1, y2))\n    overlap_area = x_overlap * y_overlap\n    \n    return (overlap_area > 0)", "category": "Python"}, {"instruction": "Create a function that rotates a given array by one element to the right.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def rotate_arr(arr):\n    return arr[-1:] + arr[:-1]", "category": "Python"}, {"instruction": "Given two numbers, find their LCM.", "input": "a = 15\nb = 10", "output": "30", "category": "Python"}, {"instruction": "To an integer array, apply a modulo operation.", "input": "arr = [3, 4, 5, 6]\nm = 2", "output": "[1, 0, 1, 0]", "category": "Python"}, {"instruction": "Calculate the nth fibonacci number in the series.", "input": "n = 10", "output": "55", "category": "Python"}, {"instruction": "Read the following code and identify the name of the function.", "input": "x = 4\ndef test():\n    return x", "output": "test", "category": "Python"}, {"instruction": "From a given string, remove all the punctuations.", "input": "This is a string with puncutation, and it is not good.", "output": "This is a string with puncutation and it is not good", "category": "Python"}, {"instruction": "Create a function to filter out all numbers evenly divisible by 5.", "input": "numbers = [10, 30, 45, 50, 16, 41]", "output": "def divisible_by_five(numbers):\n  new_list = []\n  for num in numbers:\n    if num % 5 == 0:\n      new_list.append(num)\n  return new_list", "category": "Python"}, {"instruction": "Given a binary tree, write a function to print out the elements in level order.", "input": "", "output": "def levelOrder(root): \n    if root is None: \n        return\n    queue = [] \n    queue.append(root)  \n    while(len(queue) > 0): \n        print (queue[0].data), \n        node = queue.pop(0)  \n        if node.left is not None: \n            queue.append(node.left) \n        if node.right is not None: \n            queue.append(node.right)", "category": "Python"}, {"instruction": "Create a list comprehension to convert each element to its square root.", "input": "my_list = [1, 4, 9, 16, 25]", "output": "squared_list = [x**0.5 for x in my_list]", "category": "Python"}, {"instruction": "Write a RegEx expression to find substrings of length 5 that are lowercase.", "input": "", "output": "import re\n\npattern = r\"[a-z]{5}\"\n\nre.findall(pattern, string)", "category": "Python"}, {"instruction": "Write a function 'divideList' which takes a list and an integer, and divides the list into n groups.", "input": "list = [1, 2, 3, 4, 5]\nn = 2", "output": "def divideList(list, n):\n    nList = [[] for _ in range(n)]\n    for item in list:\n        nList[item % n].append(item)\n    return nList\n\nprint(divideList([1, 2, 3, 4, 5], 2))\n\nOUTPUT:\n[[1, 3, 5], [2, 4]]", "category": "Python"}, {"instruction": "Design a function 'sortString' which takes a string of words and sorts each word alphabetically.", "input": "string = \"zebra cat dog\"", "output": "def sortString(string):\n    words = string.split(\" \")\n    sortedWords = [word for word in words]\n    for i in range(len(sortedWords)):\n        sortedWords[i] = \"\".join(sorted(sortedWords[i]))\n    return \" \".join(sortedWords)\n\nprint(sortString(\"zebra cat dog\"))\n\nOUTPUT:\n abcerz cdgot", "category": "Python"}, {"instruction": "Define a function that takes three numbers and returns the average of them.", "input": "", "output": "def average(a, b, c):\n    return (a + b + c) / 3", "category": "Python"}, {"instruction": "Create a Python function 'checkInteger' that takes a number and returns true if the number is an integer, false otherwise.", "input": "number = 3.2", "output": "def checkInteger(number):\n    if number == int(number):\n        return True\n    else:\n        return False\n\nprint(checkInteger(3.2))\n\nOUTPUT:\nFalse", "category": "Python"}, {"instruction": "Write a function 'combineStrings' which takes two strings and returns the combined string.", "input": "string1 = \"Hello\"\nstring2 = \"World\"", "output": "def combineStrings(string1, string2):\n    return string1 + string2\n\nprint(combineStrings('Hello', 'World'))\n\nOUTPUT:\nHelloWorld", "category": "Python"}, {"instruction": "Write a Python code to check if the given string contains only digits.", "input": "string = \"12345\"", "output": "def checkDigits(string):\n    for char in string:\n        if char not in '1234567890':\n            return False\n    return True\n\nprint(checkDigits('12345'))\n\nOUTPUT:\nTrue", "category": "Python"}, {"instruction": "What is the output of the following Python code?\n\nstring = \"Hello World\"\nstring = string[::-1]", "input": "", "output": "dlroW olleH", "category": "Python"}, {"instruction": "Build a Python program to generate a prime numbers list in a given range.", "input": "", "output": "def prime_numbers(start_num, end_num):\n    prime_nums_list = []\n    for num in range(start_num, end_num + 1):  \n        # all prime numbers are greater than 1  \n        if num > 1:  \n            for i in range(2,num):  \n                if (num % i) == 0:  \n                    break  \n            else:  \n                prime_nums_list.append(num)\n\n    return prime_nums_list", "category": "Python"}, {"instruction": "Determine the output of the following function.\n\ndef getSum(arr):\n    total = 0\n    for i in arr:\n        total += i\n    return total\n\narr = [2, 4, 6]", "input": "", "output": "12", "category": "Python"}, {"instruction": "Select the correct answer from the following options to complete the Java code:\n\nint a = 12, b = 6;\nint result = ________", "input": "", "output": "a * b;", "category": "Python"}, {"instruction": "Modify a given program to replace each element in an array with the sum of all elements before it.", "input": "[1,2,3,4]", "output": "def pref_sum(a):\n    output = [a[0]]\n    for i in range(1, len(a)):\n        output.append(a[i] + output[i-1])\n    return output", "category": "Python"}, {"instruction": "Create an algorithm in Python to print the string \u201cwelcome\u201d n times.", "input": "", "output": "def print_welcome(n):\n    for i in range(n):\n        print(\"Welcome\")", "category": "Python"}, {"instruction": "Categorize each of the following strings as palindrome or not in Java.", "input": "\"madam\", \"DAD\", \"superman\", \"abcdef\"", "output": "Palindrome: madam, DAD\n\nNot Palindrome: superman, abcdef", "category": "Python"}, {"instruction": "Write a class in Java to convert a decimal number to its binary equivalent.", "input": "", "output": "public class DecToBin { \n    // function to convert from Decimal to binary \n    public static String decToBin(int n) \n    { \n        String res = \"\"; \n        while (n > 0) { \n            res = (n % 2) + res; \n            n = n / 2; \n        } \n        return res; \n    } \n  \n    // Driver code \n    public static void main (String[] args) \n    { \n        int num = 8; \n        System.out.println(\"Binary equivalent of \" +num+ \" is :\" + decToBin(num)); \n    } \n}\n# Output: Binary equivalent of 8 is :1000", "category": "Python"}, {"instruction": "Write a class in JavaScript that can be used to create an instance of a Date.", "input": "", "output": "class DateInstance { \n    constructor() { \n        this.date = new Date(); \n    } \n  \n    getDate() { \n        return this.date; \n    } \n  \n    setDate(dateValue) { \n        this.date = dateValue; \n    } \n} \n  \n# Test \ndateInstance = new DateInstance(); \nprint(dateInstance.getDate()); \n# Output: Thu Jan 02 2020 16:30:24 GMT+0530 (India Standard Time)", "category": "Python"}, {"instruction": "Design an algorithm to rotate a given array in clockwise direction by a given index.", "input": "array = [1, 2, 3, 4, 5] index = 2", "output": "def rotateArray(arr, index):\n    n = len(arr)\n    temp = []\n\n    for i in range(n):\n        temp.append(arr[(i + index) % n])\n    \n    for i in range(n):\n        arr[i] = temp[i]\n        \n    return arr\n\n# Test\narr = [1, 2, 3, 4, 5] \nindex = 2\nrotated = rotateArray(arr, index)\n\n# Output  \nprint(rotated)\n# [3, 4, 5, 1, 2]", "category": "Python"}, {"instruction": "Create a function 'removeLetters' that takes a string and removes all instances of a given letter from it.", "input": "String = \"This string contains multiple letter t's.\"\nLetter = 't'", "output": "def removeLetters(inputString, letter):\n    outputString = \"\"\n    for c in inputString:\n        if c != letter:\n            outputString = outputString + c\n    return outputString\n\nprint(removeLetters(\"This string contains multiple letter t's.\", 't'))\n\nOUTPUT:\n\"This string contains multiple letter s.\"", "category": "Python"}, {"instruction": "Write a function 'hasRepeats' that checks if a list has two of the same elements.", "input": "list = [1, 3, 9, 5, 3]", "output": "def hasRepeats(list):\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[i] == list[j]:\n                return True\n    return False\n\nprint(hasRepeats([1, 3, 9, 5, 3]))\n\nOUTPUT:\nTrue", "category": "Python"}, {"instruction": "Write a HTML page to set a background color for a table with the color code '#e6e6fa'.", "input": "", "output": "<!DOCTYPE html>\n<html> \n  <head> \n    <title>Table with Background Color</title> \n  </head> \n \n  <body> \n    <h1>Table with Background Color</h1>\n  \n    <table style=\"background-color: #e6e6fa;\">\n      <tr>\n        <th>Name</th>\n        <th>Age</th>\n        <th>Occupation</th>\n      </tr>\n    </table>\n  </body> \n</html>", "category": "Python"}, {"instruction": "Write a JavaScript function to replace all non-alphabetical characters in a string with the symbol \u2018#\u2019.", "input": "Given string: \"Hello, world!\"", "output": "function replaceNonAlphabets(str){\n  return str.replace(/[^a-zA-Z]/g, '#');\n}", "category": "Python"}, {"instruction": "Create a web server in Node.js.", "input": "", "output": "const http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World\\n');\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});", "category": "Python"}, {"instruction": "Use openssl to generate a RSA public/private key pair.", "input": "", "output": "openssl genpkey -algorithm RSA -out rsa_key.pem -pkeyopt rsa_keygen_bits:2048", "category": "Python"}, {"instruction": "Design an HTML form with five input fields and three buttons", "input": "", "output": "<form>\n <input type=\"text\" name=\"name\" placeholder=\"Name\">\n <input type=\"number\" name=\"age\" placeholder=\"Age\">\n <input type=\"email\" name=\"email\" placeholder=\"Email\">\n <input type=\"password\" name=\"password\" placeholder=\"Password\">\n <input type=\"text\" name=\"address\" placeholder=\"Address\">\n <input type=\"submit\" value=\"Submit\">\n <input type=\"reset\" value=\"Reset\">\n <input type=\"button\" value=\"Cancel\">\n</form>", "category": "Python"}, {"instruction": "Create a function that filters an array for all numbers greater than the given number.", "input": "", "output": "def filter_array(arr, num):\n    return [x for x in arr if x > num]", "category": "Python"}, {"instruction": "Write a SQL query to minmize the output of employee salaries without firing them.", "input": "TABLE employee_info \n(\n    emp_ID INT PRIMARY KEY,\n    emp_name VARCHAR,\n    salary int\n)", "output": "UPDATE employee_info\nSET salary = (salary * 0.95)", "category": "Python"}, {"instruction": "Build a convolution neural network using tensorflow that takes a single input and classify it into one of three categories.", "input": "", "output": "import tensorflow as tf\n\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Conv2D(32, 3, activation=\"relu\", input_shape=(28, 28, 1)))\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(64, activation=\"relu\"))\nmodel.add(tf.keras.layers.Dense(3, activation=\"softmax\"))\n\nmodel.compile(optimizer=\"adam\",\n              loss=\"categorical_crossentropy\",\n              metrics=[\"accuracy\"])", "category": "Python"}, {"instruction": "Create a function that returns the product of two integers.", "input": "", "output": "def multiply_int(x, y):\n    return x * y", "category": "Python"}, {"instruction": "Create a Tkinter app with a label and a button.", "input": "", "output": "import tkinter as tk\n\nroot = tk.Tk()\nframe = tk.Frame(root)\nframe.pack()\n\nlabel = tk.Label(frame, text=\"Hello World!\")\nlabel.pack()\n\nbutton = tk.Button(frame, text=\"Exit\", command=frame.quit)\nbutton.pack()\n\nroot.mainloop()", "category": "Python"}, {"instruction": "Build a relational database using SQL and answer the following query: \n\"return the titles of all movies released in the year 2000.\"", "input": "", "output": "SELECT title FROM movies\nWHERE year = 2000;", "category": "Python"}, {"instruction": "Evaluate this code and output the result.", "input": "x = 5\ny = 7\nz = 8", "output": "x = 5\ny = 7\nz = 8\n\nresult = (x + y) * z\nprint(result)\n\n# Output: 75", "category": "Python"}, {"instruction": "Use regex to extract specific words between two delimiters in a sentence.", "input": "string = \"This is a string with multiple words and special characters !@#\"", "output": "import re\n\nstring = \"This is a string with multiple words and special characters !@#\"\nmatches = re.findall(r'(?<= ).*?(?= )', string)\nprint(matches)\n\n# Output: ['is', 'a', 'string', 'with', 'multiple', 'words', 'and', 'special']", "category": "Python"}, {"instruction": "Write a POST request to update a user's name in the following JSON format.", "input": "{\n \"id\": \"123456\",\n \"name\": \"John Doe\"\n}", "output": "import requests\n\ndata = {\n \"id\": \"123456\",\n \"name\": \"John Doe\"\n}\n\nurl = \"http://example.com/update-user-name\"\n\nresponse = requests.post(url, json=data)", "category": "Python"}, {"instruction": "Write Pseudocode for a simple sorting algorithm that sorts an input array.", "input": "[3, 5, 8, 2, 7]", "output": "FUNCTION Sort(input)\n  SET i to 0\n  WHILE i < LENGTH OF input\n    SET max to i\n    SET j to i + 1\n    WHILE j < LENGTH OF input\n      IF input[j] > input[max] THEN\n        SET max to j\n      END IF\n      SET j to j + 1\n    END WHILE\n    IF max != i THEN\n      SWAP input[i] with input[max]\n    END IF\n    SET i to i + 1\n  END WHILE \nRETURN input\nEND FUNCTION", "category": "Python"}, {"instruction": "Use Polyglot to detect the language of the following sentence", "input": "Dies ist ein Satz.", "output": "from polyglot.detect import Detector\n\nsentence = \"Dies ist ein Satz.\"\n\ndetector = Detector(sentence)\nprint(detector.language.name)\n\n# Output: German", "category": "Python"}, {"instruction": "Analyze the following modified code and explain what the modified code does", "input": "int x = 10;\nif (x == 10)\n  x = x + 10;\nelse\n  x = x - 10;", "output": "The modified code checks if the value of the variable x is equal to 10. If it is, it adds 10 to x, otherwise it subtracts 10. So the value of x will now be 20 if it was 10 initially, or 0 if it was not.", "category": "Python"}, {"instruction": "Write an algorithm that verifies whether an integer is a prime number", "input": "", "output": "def prime_check(n):\n    if n < 2: \n        return False\n    if n == 2: \n        return True\n    if not n & 1: \n        return False\n    for x in range(3, int(n**0.5) + 1, 2):\n        if n % x == 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "give an example of a natural language processing task solved using supervised learning.", "input": "", "output": "One example of a natural language processing task solved using supervised learning is sentiment analysis. Through supervised learning, sentiment analysis models classify text as sentimentally positive or negative, with inputs such as words, phrases, and conversations. Supervised learning algorithms are often used to train the model by using labeled data, such as customer reviews that have been labeled as positive or negative. With enough data, supervised learning algorithms learn to determine the sentiment associated with given text.", "category": "Python"}, {"instruction": "Write a function to check for palindrome", "input": "str = \"abcba\"", "output": "def is_palindrome(str): \n    # First convert all to the same case\n    str = str.lower()\n    return str == str[::-1]", "category": "Python"}, {"instruction": "From a given list, remove all elements that have a prime index.", "input": "list = [4, 7, 10, 11, 14]", "output": "def remove_primes(list):\n   modified_list = []\n   for idx, num in enumerate(list):\n       if is_prime(idx) == False:\n           modified_list.append(num)\n   return modified_list", "category": "Python"}, {"instruction": "Write a Ruby program to check for the existence of a given value in an array.", "input": "Given array: [1,2,3,4,5], value to be checked: 3", "output": "arr = [1,2,3,4,5]\n\nif arr.include?(3)\n    puts 'Value 3 present in the array.'\nend", "category": "Python"}, {"instruction": "Given a string, convert all lowercase characters to uppercase.", "input": "str = 'hello World'", "output": "str.upper()", "category": "Python"}, {"instruction": "You are given a 2D array and you need to rotate it 90 degrees clockwise.", "input": "array = [\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12],\n    [13, 14, 15, 16],\n  ]", "output": "def rotate90(arr):\n    new_arr = [[row[i] for row in arr[::-1]] for i in range(len(arr[0]))]\n    return new_arr", "category": "Python"}, {"instruction": "How can we create an exclusive truth table using the boolean operators in Python?", "input": "", "output": "truth_table = {\"p\": [True, False],\n               \"q\": [True, False], \n               \"p \u2295 q\": [(not(p) and q) or (p and not(q)) for p in truth_table[\"p\"] for q in truth_table[\"q\"]]}", "category": "Python"}, {"instruction": "Using the arrays below, write a for loop in JavaScript to print out the sum of the two arrays.", "input": "array1 = [1,2,3] \narray2 = [4,5,6]", "output": "let sum = 0;\nfor (let i = 0; i < array1.length; i++) {\n    sum += array1[i] + array2[i];\n}\nconsole.log(sum);", "category": "Python"}, {"instruction": "How can we handle multiple parameters in a single function in JavaScript?", "input": "", "output": "We can handle multiple parameters in a single function by using the spread operator (...) which will allow us to pass any number of arguments to the function.", "category": "Python"}, {"instruction": "Given a list of strings, how can we print each string on a new line in C?", "input": "[\"Hello\", \"world\"]", "output": "for (int i = 0; i < 2; i++) {\n    printf(\"%s\\n\", list[i]);\n}", "category": "Python"}, {"instruction": "Write an HTML page to display three columns with headings \u2018Name\u2019, \u2018Age\u2019 and \u2018Occupation\u2019 in a table layout.", "input": "", "output": "<!DOCTYPE html>\n<html> \n  <head> \n    <title>Simple Table Layout</title> \n  </head> \n \n  <body> \n    <h1>Table with Three Columns</h1>\n  \n    <table>\n      <tr>\n        <th>Name</th>\n        <th>Age</th>\n        <th>Occupation</th>\n      </tr>\n    </table>\n  </body> \n</html>", "category": "Python"}, {"instruction": "Write a for loop in JavaScript that prints numbers from 0 to 5.", "input": "", "output": "for(let i=0; i<=5; i++) {\n    console.log(i);\n}", "category": "Python"}, {"instruction": "Convert this function from a for loop to a while loop.", "input": "def cumsum(lst):\n    sum = 0\n    new_lst = []\n    for n in lst:\n        sum += n\n        new_lst.append(sum)\n    return new_lst", "output": "def cumsum(lst):\n    sum = 0\n    new_lst = []\n    i = 0\n    while i < len(lst):\n        sum += lst[i]\n        new_lst.append(sum)\n        i += 1\n    return new_lst", "category": "Python"}, {"instruction": "Explain why this code doesn't work.", "input": "def celsius_to_fahrenheit(celsius):\n    return celsius + 5", "output": "This code doesn't work because it doesn't follow the formula for converting Celsius temperatures to Fahrenheit. The formula for converting Celsius to Fahrenheit is F = (C * 9/5) + 32, where F is the Fahrenheit temperature and C is the Celsius temperature. The code provided only adds 5 to the Celsius temperature, which is incorrect and results in an incorrect conversion.", "category": "Python"}, {"instruction": "Create a function to filter out positive numbers from a given array.", "input": "numbers = [-5, 3, 7, -2, 4, 9]", "output": "def filter_positives(numbers):\n    result_list = []\n    for element in numbers:\n        if element >= 0:\n            result_list.append(element)\n    return result_list", "category": "Python"}, {"instruction": "Convert this string from uppercase to lowercase.", "input": "my_string = \"HELLO WORLD\"", "output": "my_string = my_string.lower()", "category": "Python"}, {"instruction": "Classify the given article into its corresponding category.", "input": "Article: \n\nThe 2020 Tokyo Olympics is postponed until 2021 due to the ongoing pandemic.", "output": "Sports", "category": "Python"}, {"instruction": "Create 4 variables with the following data types with appropriate values:", "input": "", "output": "a = 10  # integer\nb = \"Hello\"  # string\nc = [1,2,3]  # list\nd = { \"name\": \"John\", \"age\": 30 }  # dictionary", "category": "Python"}, {"instruction": "Create a basic REST API for getting information about weather for specific cities.", "input": "3 cities with their respective latitude and longitude: \n- New York City (40.7128\u00b0N, 74.0060\u00b0W)\n- Los Angeles (34.0522\u00b0N, 118.2437\u00b0W)\n- San Francisco (37.7749\u00b0N, 122.4194\u00b0W)", "output": "// This is a basic example of a REST API that returns weather information for specific cities.\n\napp.get('/weather', (req, res) => {\n  const cityNames = req.query.cities.split(',');\n  const cities = {\n    'New York City': { lat: 40.7128, lng: 74.0060 },\n    'Los Angeles': { lat: 34.0522, lng: 118.2437 },\n    'San Francisco': { lat: 37.7749, lng: 122.4194 },\n  }\n\n  let results = [];\n  for (const city of cityNames) {\n     results.push(getWeather(cities[city]));\n  }\n\n  res.send(results);\n});\n\nfunction getWeather({lat, lng}) {\n  // Code to make external API call to get weather information\n}", "category": "Python"}, {"instruction": "Write a short class in Python that will print a custom message when created.", "input": "", "output": "class CustomMessage:\n    def __init__(self):\n        print(\"This is a custom message!\")", "category": "Python"}, {"instruction": "Write a JavaScript function 'formatDate' which takes a date as string in the format \"YYYYMMDD\" and returns it in the format \"MM/DD/YYYY\"", "input": "date = \"20210320\"", "output": "function formatDate(date) {\n    let newDate = date.substr(0, 4) + \"/\" + date.substr(4, 2) + \"/\" + date.substr(6);\n    return newDate;\n}\n\nconsole.log(formatDate(\"20210320\"))\n\nOUTPUT:\n03/20/2021", "category": "Python"}, {"instruction": "Design a C++ function 'removeDuplicates' to remove all duplicate elements from an array and return the new length of the array.", "input": "arr = [1, 3, 1, 5, 5]", "output": "int removeDuplicates(int arr[], int n) \n{  \n    int j = 0; \n    for (int i=0; i<n-1; i++){\n        if (arr[i] == arr[i+1])\n            continue; \n        else\n            arr[j++] = arr[i]; \n    }\n    arr[j++] = arr[n-1]; \n  \n    return j; \n}", "category": "Python"}, {"instruction": "Create two variables x and y with values 0 and 1 respectively and assign x to y using the arithmetic operators.", "input": "", "output": "x = 0\ny = 1\ny = x", "category": "Python"}, {"instruction": "Design a function in JavaScript to print all natural numbers between 1 to n.", "input": "", "output": "function printNumbers (n) {\n    for (let i = 1; i <= n; i++) {\n        console.log(i);\n    }\n}", "category": "Python"}, {"instruction": "Construct a bubblesort algorithm in Python.", "input": "", "output": "def bubbleSort(array): \n\tn = len(array) \n\tfor i in range (n): \n\t\tfor j in range(0, n-i-1): \n\t\t\tif array[j] > array[j+1] : \n\t\t\t\tarray[j], array[j+1] = array[j+1], array[j] \n\narr = [64, 34, 25, 12, 22, 11, 90] \nbubbleSort(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(n): \n\tprint (\"%d\" %arr[i]),", "category": "Python"}, {"instruction": "Determine the frequency of each word in a sentence using a hashmap in JavaScript.", "input": "s = \"This is a test sentence\"", "output": "let string = \"This is a test sentence\";\nlet wordsArray = string.split(\" \"); \nlet frequencyMap = {};\nwordsArray.forEach(word => {\n    frequencyMap[word] = frequencyMap[word] ? frequencyMap[word] + 1 : 1;\n});\nconsole.log(frequencyMap);\n// Output: {This: 1, is: 1, a: 1, test: 1, sentence: 1}", "category": "Python"}, {"instruction": "Create a program in Java that takes an array with two integers as input and prints the multiplication of those two input integers.", "input": "arr = [3, 4]", "output": "public class Main {\n  public static void main(String[] args) {\n    int[] arr = {3,4};\n    \n    int num1 = arr[0];\n    int num2 = arr[1];\n    int result = num1 * num2;\n    \n    System.out.println(result);\n  }\n}", "category": "Python"}, {"instruction": "Write a PHP program that prints the contents of a multidimensional array.", "input": "arr = [[1,2], [3,4]]", "output": "<?php\n   $arr = [[1,2], [3,4]];\n   \n   function printArray($arr) {\n       foreach($arr as $row) {\n           foreach($row as $element){\n               echo $element.\" \";\n           }\n           echo \"<br>\";\n       }\n   }\n   printArray($arr);\n?>", "category": "Python"}, {"instruction": "Construct a recursive function in JavaScript that calculates the total sum of an array.", "input": "arr = [1, 2, 3, 4, 5, 6]", "output": "function sumArray(arr) { \n    if (arr.length === 0) { \n      return 0; \n    } \n    return arr[0] + sumArray(arr.slice(1)); \n} \nlet result = sumArray(arr); \nconsole.log(result); // 21", "category": "Python"}, {"instruction": "Populate an array with numbers from 1 to 10 in Python.", "input": "", "output": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Write a shell script to print all the environment variables in use.", "input": "", "output": "# Using Bash:\n\n# Print the environment variables\nfor var in $(env); do\n    echo \"$var\";\ndone", "category": "Python"}, {"instruction": "Generate a random boolean value using JavaScript.", "input": "", "output": "# Using JavaScript:\nlet boolean = Math.random() >= 0.5;\nconsole.log(boolean);", "category": "Python"}, {"instruction": "Parse a given XML string and print all the attributes present in the 'employee' tag.", "input": "<employee name=\"John\" id=\"123\" position=\"Manager\" dept=\"Sales\" />", "output": "# Using Python: \n\nimport xml.etree.ElementTree as ET\n\nxml_string = \"<employee name=\"John\" id=\"123\" position=\"Manager\" dept=\"Sales\" />\"\n\n# Parse the XML\nroot = ET.fromstring(xml_string)\n\n# Iterate through the child nodes\nfor child in root:\n    # Print all the attributes\n    for (name, value) in child.attrib.items():\n         print(name + \": \" + value)\n         \n# Output: \n# name: John\n# id: 123\n# position: Manager\n# dept: Sales", "category": "Python"}, {"instruction": "Construct an SQL query to find all records where the column \u2018department\u2019 equals \u2018sales\u2019.", "input": "", "output": "SELECT * FROM table WHERE department  = 'sales';", "category": "Python"}, {"instruction": "Create a function in Java to take a sentence as input and return a list of all the words in the sentence.", "input": "I am a student", "output": "# Using Java:\npublic static List<String> getWords(String sentence) {\n    List<String> words = new ArrayList<>();\n    String[] wordsArray = sentence.split(\"\\\\s+\");\n    for (String word : wordsArray) {\n        words.add(word);\n    }\n    return words;\n}", "category": "Python"}, {"instruction": "Create a program to encrypt a given text using any encryption technique.", "input": "Hello", "output": "# Using Python:\n \nplain_text = \"Hello\"\n\n# Simple substitution encryption\nalphabet = ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\nencrypted_text = \"\"\n\nfor plain_letter in plain_text:\n    if plain_letter in alphabet:\n        encrypted_letter = alphabet[(alphabet.index(plain_letter) + 3) % 26]\n    else:\n        encrypted_letter = plain_letter\n    encrypted_text += encrypted_letter\n    \nprint(\"Encrypted Text:\", encrypted_text) # Output: Khoor", "category": "Python"}, {"instruction": "Create an interface for a number guessing game using HTML, CSS, and JavaScript.", "input": "", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Number Guessing Game</title>\n    <style>\n        * {\n            padding: 0;\n            margin: 0;\n        }\n        #guessing-game-container {\n            min-height: 100vh;\n            padding: 20px;\n            background: #f5f5f5;\n            text-align: center;\n        }\n        .form-group {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            flex-direction: column;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"guessing-game-container\">\n        <div>\n            <h1>Guess a number between 1 and 100!</h1>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"guess\">Guess:</label>\n            <input type=\"number\" id=\"guess\">\n        </div>\n        <button id=\"submit-guess-btn\">Submit</button>\n        <div id=\"guess-notification\">\n        </div>\n    </div>\n</body>\n<script>\n    const minNum = 1;\n    const maxNum = 100;\n    let correctNum = Math.floor(Math.random() * (maxNum - minNum + 1)) + minNum;\n    const submitBtn = document.getElementById(\"submit-guess-btn\");\n    const guessNotification = document.getElementById(\"guess-notification\");\n\n    submitBtn.addEventListener(\"click\", function() {\n        const guessInput = document.getElementById(\"guess\");\n        const guess = parseInt(guessInput.value);\n        if (Number.isNaN(guess)) {\n            guessNotification.innerHTML = \"Please enter a valid number\";\n        } else if (guess < minNum || guess > maxNum) {\n            guessNotification.innerHTML = `Number must be between ${minNum} and ${maxNum}`;\n        } else if (guess !== correctNum) {\n            guessNotification.innerHTML = `Guess is ${guess < correctNum ? \"too low\" : \"too high\"}`;\n        } else {\n            guessNotification.innerHTML = \"Correct!\";\n        }\n    });\n</script>\n</html>", "category": "Python"}, {"instruction": "Generate a valid HTML page given the body contents.", "input": "<h1>Hello World!</h1>\n<p>This is a simple HTML page.</p>", "output": "<html>\n    <head>\n    </head>\n    <body>\n        <h1>Hello World!</h1>\n        <p>This is a simple HTML page.</p>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Generate a valid XML tag to represent the following:", "input": "Name: User; Attribute: id; Attribute Value: 47", "output": "<User id=\"47\" />", "category": "Python"}, {"instruction": "Suggest a 3D modelling software for creating 3D designs.", "input": "", "output": "Blender is a free and open source 3D modelling software which can be used to create 3D designs.", "category": "Python"}, {"instruction": "Summarize a MySQL query that prints out the names and grades of students from a table.", "input": "Students (name, grade)\n\nHarry, A\n\nSelman, B\n\nLinda, A", "output": "SELECT name, grade FROM Students; \n\nThis query will return the names and grades of all students from the Students table. For example, it will return \"Harry A\" and \"Selman B\" and \"Linda A\".", "category": "Python"}, {"instruction": "Convert a list to a string.", "input": "my_list = [\"a\", \"b\", \"c\", \"d\"]", "output": "my_list = [\"a\", \"b\", \"c\", \"d\"]\n\n# Convert the list to a string \nmy_string = ''.join(my_list)\n\nprint(my_string) # Output: abcd", "category": "Python"}, {"instruction": "Create a simple webpage to welcome visitors with a centered heading \"Welcome\".", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n <title>Welcome</title>\n <style>\n  h1 {\n  text-align: center;\n  }\n </style>\n</head>\n<body>\n<h1>Welcome</h1>\n</body>\n</html>", "category": "Python"}, {"instruction": "Find the top 10 customers based on total purchase amount from the \"customers\" data table.", "input": "", "output": "SELECT TOP 10 c.id, c.name, SUM(d.amount) as total_purchase \nFROM customers c\nINNER JOIN details d ON c.id = d.customer_id\nGROUP BY c.id, c.name\nORDER BY total_purchase DESC;", "category": "Python"}, {"instruction": "Create a class Employee in Java which contains the name, age and salary of the employee.", "input": "", "output": "public class Employee {\n    private String name;\n    private int age;\n    private double salary;\n    \n    public Employee() { }\n    \n    public Employee(String name, int age, double salary) {\n        this.name = name;\n        this.age = age;\n        this.salary = salary;\n    }\n    \n    public String getName() {\n        return this.name;\n    }\n    \n    public int getAge() {\n        return this.age;\n    }\n    \n    public double getSalary() {\n        return this.salary;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public void setAge(int age) {\n        this.age = age;\n    }\n    \n    public void setSalary(double salary) {\n        this.salary = salary;\n    }\n}", "category": "Python"}, {"instruction": "Create a C# method to get the current system time", "input": "None", "output": "public DateTime GetCurrentTime() {\n    return DateTime.Now;\n}", "category": "Python"}, {"instruction": "Create a MongoDB document containing the following data", "input": "Name: John\nAge: 32\nOccupation: Engineer", "output": "{\n  name: \"John\",\n  age: 32,\n  occupation: \"Engineer\"\n}", "category": "Python"}, {"instruction": "Identify the type of error in the below given syntax", "input": "a < 45", "output": "Syntax Error. The correct syntax should be \"a < 45\".", "category": "Python"}, {"instruction": "Build a web service that returns a list of all the customers in a MySQL database.", "input": "", "output": "# Using Python:\n\n# Imports\nimport mysql.connector\n\n# Database connection\nmydb = mysql.connector.connect(\n    host=\"<hostname>\",\n    user=\"<username>\",\n    passwd=\"<password>\",\n    database=\"<database_name>\"\n)\n\n# Query\nmycursor = mydb.cursor()\n\nmycursor.execute(\"SELECT * FROM customers\")\n\n# Fetch results\nmyresult = mycursor.fetchall()\n\n# Return results\nfor x in myresult:\n    print(x)", "category": "Python"}, {"instruction": "Create a text box containing the given text", "input": "Textbox Text: Welcome", "output": "<input type=\"text\" value=\"Welcome\" />", "category": "Python"}, {"instruction": "Create a C++ class to store data of an employee", "input": "Employee Data: employee_id, name, salary", "output": "class Employee{\nprivate:\n    int employeeId;\n    String name;\n    int salary;\n\npublic:\n    Employee(int employeeId, String name, int salary){\n        this->employeeId = employeeId;\n        this->name = name;\n        this->salary = salary;\n    }\n\n    int getEmployeeId(){\n        return employeeId;\n    }\n\n    String getName(){\n        return name;\n    }\n\n    int getSalary(){\n        return salary;\n    }\n}", "category": "Python"}, {"instruction": "Create a REST API endpoint to retrieve specific user data from the database", "input": "A relational database with a user table containing: user_id, email, phone_number", "output": "@app.route('/user', methods=['GET'])\ndef get_user():\n    user_id = request.args.get('user_id')\n    user = db.execute('SELECT * FROM user WHERE user_id = ?', (user_id,)).fetchone()\n    if user is None:\n`.        abort(404)\n\n    return jsonify(user)", "category": "Python"}, {"instruction": "Suggest a data structure in Python to represent a binary search tree.", "input": "", "output": "A Binary Search Tree (BST) can be represented using the dictionary data structure in Python. Each node in the tree will be represented by a dictionary containing the keys: \u2018value\u2019, \u2018left\u2019, and \u2018right\u2019. \u2018value\u2019 refers to the numeric or string value of the node, \u2018left\u2019 refers to the dictionary representation of the left child and \u2018right\u2019 refers to the dictionary representation of the right child.", "category": "Python"}, {"instruction": "Rewrite the following JavaScript snippet to use a ternary statement.", "input": "let x = 10;\n\nif (x > 0) {\n  x = x + 5;\n} else {\n  x = x - 5;\n}", "output": "let x = 10;\n\nx = x > 0 ? x + 5 : x - 5;", "category": "Python"}, {"instruction": "Write a query in PostgreSQL to find the total number of students with an A grade.", "input": "", "output": "SELECT COUNT(*) FROM Students WHERE grade = 'A';\n\nThis query will return the total number of students with an A grade.", "category": "Python"}, {"instruction": "Create a JavaScript function to get the last item of an array.", "input": "", "output": "function getLastItem(arr) {\n return arr[arr.length - 1];\n}", "category": "Python"}, {"instruction": "How would you modify the query to print the average grade of the students?", "input": "SELECT name, grade FROM Students;", "output": "SELECT AVG(grade) FROM Students; \n\nThis query will return the average grade of all students from the Students table.", "category": "Python"}, {"instruction": "Create a Node.js server to handle POST requests", "input": "None", "output": "const http = require('http');\nconst fs = require('fs');\nconst port = 3000;\n\nconst server = http.createServer((req, res) => { \n    if (req.method == 'POST') {\n        let body = '';\n        req.on('data', chunk => {\n            body += chunk.toString(); \n        });\n        req.on('end', () => {\n            console.log(body);\n            res.end('ok');\n        });\n    }\n});\n\nserver.listen(port);\nconsole.log(`Server listening on port ${port}`);", "category": "Python"}, {"instruction": "Design a CSS grid container with 3 columns of equal size.", "input": "", "output": ".container {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n}", "category": "Python"}, {"instruction": "Define a function in Python that takes a number as an argument and returns its cube.", "input": "", "output": "def cube(number):\n    return number**3", "category": "Python"}, {"instruction": "Edit the following JavaScript function to convert Celsius to Fahrenheit.", "input": "function toFahrenheit(celsius) {\n  return celsius * 9/5 + 32;\n}", "output": "function toFahrenheit(celsius) {\n  return celsius * 9/5 + 32;\n}\n\nfunction toCelsius(fahrenheit) {\n  return (fahrenheit - 32) * 5/9;\n}", "category": "Python"}, {"instruction": "Given a string, create a method to remove all empty spaces and punctuation from the string.", "input": "\"Hello, world !\"", "output": "def remove_punctuation(string):\n    return string.replace(' ', '').replace(',', '').replace('!', '')", "category": "Python"}, {"instruction": "Design a binary search tree that has the following values in the given order - 5, 4, 11, 6, 10, 8.", "input": "", "output": "5\n      /   \\\n     4     11\n    / \\    / \\  \n   N   6  10  8", "category": "Python"}, {"instruction": "Design an algorithm to summarize a long text.", "input": "", "output": "def summarize_text(text): \n    # Split the text into sentences \n    sentences = text.split('.') \n    # Compute the frequency of each sentence \n    sentence_frequencies = {} \n    for sent in sentences: \n        # Clean the sentences \n        clean_sent = sent.strip().lower() \n        # Count the frequency of the sentence \n        if clean_sent in sentence_frequencies: \n            sentence_frequencies[clean_sent] += 1\n        else: \n            sentence_frequencies[clean_sent] = 1\n  \n    # Rank the sentences based on frequency \n    ranked_sentences = sorted(sentence_frequencies.items(), key=lambda x: x[1], reverse=True) \n  \n    # Return the top 3 sentences as the summary \n    summary = [] \n    for sent in ranked_sentences[:3]: \n        summary.append(sent[0]) \n  \n    return \".\".join(summary)", "category": "Python"}, {"instruction": "Write a code to calculate how many seconds are in 14 hours.", "input": "", "output": "seconds = 14 * 60 * 60\nprint(seconds)\nOutput: 50400 seconds", "category": "Python"}, {"instruction": "Generate a SQL query to retrieve a list of all the movies released in 2019.", "input": "", "output": "SELECT * FROM movies WHERE year = 2019;", "category": "Python"}, {"instruction": "Initialize a variable with a list containing numbers from 1-100.", "input": "", "output": "list_numbers = [i for i in range(1,101)]", "category": "Python"}, {"instruction": "Implement a function that can convert a number from one number system to another.", "input": "Input: The number 60 in binary to be converted to decimal.", "output": "def binary_to_decimal(binary):\n    decimal = 0 \n    length = len(binary) \n    for digit in range(0, length): \n        decimal += int(binary[digit]) * pow(2, length - digit - 1) \n    return decimal \n\nprint(binary_to_decimal(\"60\"))\nOutput: 24", "category": "Python"}, {"instruction": "Create a method to find the shortest word in a given array of strings.", "input": "", "output": "def shortest_word(arr):\n    shortest_word = arr[0]\n    for word in arr[1:]:\n        if len(word) < len(shortest_word):\n            shortest_word = word\n    return shortest_word", "category": "Python"}, {"instruction": "Write an operation that adds all the numbers in a given list.", "input": "[32, 15, 45, 56, 16]", "output": "sum = 164", "category": "Python"}, {"instruction": "Create a `JavaScript` array containing 10 numbers from 10 to 19 in reverse order.", "input": "", "output": "let arr = [19, 18, 17, 16, 15, 14, 13, 12, 11, 10];", "category": "Python"}, {"instruction": "Write a `Python` program to parse an HTML document and store the tags in a list.", "input": "", "output": "from bs4 import BeautifulSoup \n  \n# data stored in a string \nhtml_doc = \"\"\" \n<html><head><title>Parser Demo</title></head> \n<body> \n<h1>This is Heading1</h1> \n<h2>This is Heading2</h2> \n</body></html> \n\"\"\"\n  \n# passing the html document to \n# BeautifulSoup() for parsing \nsoup = BeautifulSoup(html_doc, 'html.parser') \n  \n# parsing tags from the document \ntags = [tag.name for tag in soup.find_all()] \n\nprint(tags)", "category": "Python"}, {"instruction": "Write an `SQL` query to select the empoloyee's name and department who were hired after `Jan 2020`.", "input": "", "output": "SELECT name, department\nFROM employees\nWHERE hire_date > '2020-01-01';", "category": "Python"}, {"instruction": "Create a `CSS` rule to change the background color of a div element with the class name `main-div` to blue.", "input": "", "output": ".main-div {\n    background-color: blue;\n}", "category": "Python"}, {"instruction": "Write a Java code to encrypt a password using `sha1` hash.", "input": "String password = \"password123\";", "output": "String hash = MessageDigest.getInstance(\"SHA-1\").digest(password.getBytes(StandardCharsets.UTF_8));", "category": "Python"}, {"instruction": "Create a Python dictionary with the student's name as the key and marks as the value.", "input": "data = {\n    \"Ann\": 78, \n    \"John\": 92,\n    \"Bob\": 67\n}", "output": "student_marks = {\n    \"Ann\": 78, \n    \"John\": 92,\n    \"Bob\": 67\n}", "category": "Python"}, {"instruction": "Write a JavaScript code to filter an array of strings that begin with the letter `A` and have a length of 5.", "input": "let arr = [\"Apple\", \"Banana\", \"Ant\", \"Cat\", \"Arson\"];", "output": "let result = arr.filter(str => str[0] === 'A' && str.length === 5);", "category": "Python"}, {"instruction": "Write a `PHP` script to sort an associative array based on its values.", "input": "$data = array(\"John\"=>45, \"Bob\"=>67, \"Ann\"=>55);", "output": "function sortByValue($data) {\n    asort($data);\n    return $data;\n}", "category": "Python"}, {"instruction": "Construct a loop through this string of characters to check for the letter \u2018x\u2019. Report what the loop index was when the letter \u2018x\u2019 was found.", "input": "string = \"abcedfghijx\"", "output": "string = \"abcedfghijx\"\n\nfor idx, char in enumerate(string):\n    if char == 'x':\n        print(f\"The loop index was {idx} when the letter 'x' was found.\")\n        break", "category": "Python"}, {"instruction": "Write a query to find all unique numbers in the column 'quantity' from the database table 'Orders'.", "input": "", "output": "SELECT DISTINCT quantity FROM Orders", "category": "Python"}, {"instruction": "Edit the following JavaScript code so that it rounds a number to the nearest integer.", "input": "function roundNumber(x) {\n return x + 0.5;\n}", "output": "function roundNumber(x) {\n return Math.round(x);\n}", "category": "Python"}, {"instruction": "Write an SQL query to select all records from a table named \"Employees\" and order the records by their salary in descending order.", "input": "", "output": "SELECT * FROM Employees ORDER BY Salary DESC;", "category": "Python"}, {"instruction": "Given two strings, find and replace the first instance of the string1 with string2.", "input": "string1 = \"apple\";\nstring2 = \"apricot\";\nstring3 = \"One apple a day keeps the doctor away\"", "output": "string output = string3.Replace(string1, string2);\n// Output: One apricot a day keeps the doctor away", "category": "Python"}, {"instruction": "Compare two strings in C# and return a Boolean indicating whether they are anagrams.", "input": "string1 = \"listen\";\nstring2 = \"silent\"", "output": "public static bool AreAnagrams(string string1, string string2)\n{\n    if (String.Concat(string1.OrderBy(c => c)) == \n        String.Concat(string2.OrderBy(c => c)))\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\n\nbool result = AreAnagrams(\"listen\", \"silent\");", "category": "Python"}, {"instruction": "How do you perform error handling in JavaScript?", "input": "", "output": "In JavaScript, error handling can be done with try...catch statements. The syntax of the try...catch statement consists of a try block followed by one or more catch clauses. The try block contains the code that may throw an error, whereas the catch block contains the code that will be executed if an error is thrown. The error object can be used to get information about the error.", "category": "Python"}, {"instruction": "Write a basic SQL query to retrieve all students from the table \"Students\" and order them by their \"grade\".", "input": "", "output": "SELECT * FROM Students ORDER BY grade;", "category": "Python"}, {"instruction": "Create an object-oriented programming class in Java named \"Car\" with three private instance variables \"make\", \"speed\" and \"color\".", "input": "", "output": "public class Car { \n    private String make; \n    private int speed; \n    private String color; \n \n    public Car() { \n        this.make = \"default\"; \n        this.speed = 100; \n        this.color = \"black\"; \n    } \n \n    public Car(String make, int speed, String color) { \n        this.make = make; \n        this.speed = speed; \n        this.color = color; \n    } \n \n    // getter methods \n    public String getMake() { \n        return this.make; \n    } \n \n    public int getSpeed() { \n        return this.speed; \n    } \n \n    public String getColor() { \n        return this.color; \n    } \n \n    // setter methods \n    public void setMake(String make) { \n        this.make = make; \n    } \n \n    public void setSpeed(int speed) { \n        this.speed = speed; \n    } \n \n    public void setColor(String color) { \n        this.color = color; \n    } \n}", "category": "Python"}, {"instruction": "Write a Python program for calculating the sum of a given array of numbers.", "input": "[2, 3, 4, 5]", "output": "def calculateSum(arr): \n   sum = 0\n   for num in arr: \n      sum += num  \n   return sum \n\nprint(calculateSum([2, 3, 4, 5]))", "category": "Python"}, {"instruction": "Given a sentence, create a method to capitalize every word in the sentence.", "input": "hello world", "output": "def capitalize_words(string):\n    return ' '.join(word.capitalize() for word in string.split())", "category": "Python"}, {"instruction": "Write a SQL query that updates the name of a specified employee in the 'employees' table.", "input": "employee_id: 101, employee_name: John", "output": "UPDATE employees \nSET employee_name='John'\nWHERE employee_id=101;", "category": "Python"}, {"instruction": "Identify the type of operator in the expression.", "input": "Expression: 7 > 5", "output": "Relational Operator.", "category": "Python"}, {"instruction": "Write a lambda expression to select all the strings from a given array whose length is less than 5.", "input": "arr = [\"Hello\", \"Bye\", \"Morning\", \"Evening\", \"Hi\", \"Bye Bye\"]", "output": "filtered = list(filter(lambda x : len(x) < 5, arr))", "category": "Python"}, {"instruction": "Describe the purpose of an API.", "input": "", "output": "An API (Application Programming Interface) is a set of programming instructions and standards used for interacting with a software application or web service. It generally enables a developer to access specific features of an application or web service, such as data or functionality, to build integrated applications. APIs provide a way to write code which interacts with other external services in a secure and efficient manner.", "category": "Python"}, {"instruction": "Compile a Java class named \"Example\".", "input": "", "output": "javac Example.java", "category": "Python"}, {"instruction": "Install Numpy in Python using pip.", "input": "", "output": "pip install numpy", "category": "Python"}, {"instruction": "What is the minimum number of arguments needed to call the function \"foo\".", "input": "", "output": "The minimum number of arguments needed to call the function \"foo\" is 0.", "category": "Python"}, {"instruction": "Write a function to output \"Thank you\" three times.", "input": "", "output": "def say_thanks():\n\tfor i in range(3):\n\t\tprint(\"Thank you\")", "category": "Python"}, {"instruction": "Write a function to compare two strings and return the number of character positions at which the strings in the two strings differ from each other.", "input": "str1 = \"apple\"\nstr2 = \"animal\"", "output": "def compare_strings(s1, s2):\n    count = 0\n    for i in range(min(len(s1), len(s2))):\n        if s1[i] != s2[i]:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Create a React component that takes a zipcode as an input and displays related information about the zipcode in a formatted way.", "input": "", "output": "import React from \"react\";\n\n//React component\nconst ZipCodeInformation = (props) => {\n    const zipCode = props.zipCode;\n\n    return (\n        <div>\n            <h2>Zip Code Information</h2>\n            <ul>\n                <li>Zip Code: {zipCode}</li>\n                <li>City: TBD</li>\n                <li>State: TBD</li>\n            </ul>\n        </div>\n    );\n};\n\nexport default ZipCodeInformation;", "category": "Python"}, {"instruction": "Write a code to generate a list of numbers from 10 to 20 (inclusive).", "input": "", "output": "list_nums = [i for i in range(10, 21)]", "category": "Python"}, {"instruction": "Suggest a data structure to store the student details for a school.", "input": "", "output": "A dictionary could be used to store the student details. Each key could be the student's name, and each value could be a tuple containing the student's age, grade and classes.\n\nstudent_data = {\n    'John' : (15, 8, ['Math', 'English']),\n    'Mary' : (14, 7, ['Science', 'History'])\n}", "category": "Python"}, {"instruction": "Design a program to search for a given string within an array of strings.", "input": "arr = ['hello', 'world', 'how', 'are', 'you']\ngiven_str = 'how'", "output": "def search(arr, given_str):\n    for item in arr:\n        if item == given_str:\n            return True\n    return False", "category": "Python"}, {"instruction": "Write a Node.js code to call an API and print the output.", "input": "", "output": "const request = require('request'); \n  \n// Print the output of the api\nrequest('https://example.com/api', { json: true }, (err, res, body) => { \n  if (err) { \n    return console.log(err); \n  } \n  console.log(body.output); \n});", "category": "Python"}, {"instruction": "Create an API by combining the given HTML and JavaScript code.", "input": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Test API</title>\n</head>\n\n<body>\n\n<div id=\"output\"></div>\n\n<script>  \n  let name = \"John\"; \n  document.getElementById(\"output\").innerHTML = `Hello, ${name}`;\n</script>\n\n</body>\n</html>", "output": "let getGreeting = (name) => {\n  return `Hello, ${name}`;\n}\n\nlet outputElement = document.getElementById(\"output\");\n\nlet getName = () => {\n  return \"John\";\n}\n\nconst render = (message, element) => {\n  element.innerHTML = message;\n}\n\nrender(getGreeting(getName()), outputElement);", "category": "Python"}, {"instruction": "Combine the following two commands into a single shell script.", "input": "echo \"FileName: File1\"\ncat File1.txt", "output": "#!/bin/bash\necho \"FileName: File1\"\ncat File1.txt", "category": "Python"}, {"instruction": "Write an R program to generate a frequency table for the given data.", "input": "data <- c(\"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"E\", \"C\", \"A\", \"B\")", "output": "# Create a vector\ndata <- c(\"A\", \"B\", \"C\", \"A\", \"A\", \"B\", \"E\", \"C\", \"A\", \"B\")\n\n# Generate frequency table\nfreq <- table(data) \n\n# Print the result \nprint(freq)", "category": "Python"}, {"instruction": "Edit the given Bash script to output only the lines with double digit numbers.", "input": "#!/bin/bash\nnumlist=\"25 3 1 2 46 4 5 21 7 9 6 10\"\nfor i in $numlist\ndo\n    echo \"Number $i\"\ndone", "output": "#!/bin/bash\nnumlist=\"25 3 1 2 46 4 5 21 7 9 6 10\"\nfor i in $numlist\ndo\n    if [[ $i =~ [0-9][0-9] ]]\n    then\n    echo \"Number $i\"\n    fi\ndone", "category": "Python"}, {"instruction": "Write a SQL code to generate a new table called \"Customers\" by selecting all columns from the \"Orders\" table.", "input": "", "output": "SELECT *\nINTO Customers\nFROM Orders;", "category": "Python"}, {"instruction": "Edit the given C program to print the output in a tabular form using printf.", "input": "#include<stdio.h>\n \nint main(){\n   \n   int n=5;\n   int i;\n   int arr[n];\n   \n   //Adding elements in array\n   for(i=0;i<n;i++){\n      arr[i] = i + 20;\n   }\n   \n   //Printing elements in array\n    for(i=0;i<n;i++){\n      printf(\"%d\\n\",arr[i]);\n   }\n  \n   return 0;\n}", "output": "#include<stdio.h>\n \nint main(){\n   \n   int n=5;\n   int i;\n   int arr[n];\n   \n   //Adding elements in array\n   for(i=0;i<n;i++){\n      arr[i] = i + 20;\n   }\n   \n   //Printing elements in array\n    for(i=0;i<n;i++){\n      printf(\"Number %d: %d\\t\", i+1, arr[i]);\n   }\n  \n   return 0;\n}", "category": "Python"}, {"instruction": "Write a function in C that minimizes the cost of a given parameter using gradient descent.", "input": "The parameter is w(t+1) = w(t) - alpha * Le(w)\nHere, alpha= 0.3 and Le(w) = 14w^2 + 8 * w - 7", "output": "#include<stdio.h>\n \n//Function to calculate L(w)\ndouble Fun(double w){\n    double Le = 14 * (w * w) + 8 * w - 7;\n    return Le;\n} \n\n//Function to calculate w(t+1) using Gradient descent\ndouble GradientDescent(double w, double alpha){\n    double w_next;\n    w_next = w - alpha * Fun(w);\n    return w_next;\n}\n\nint main(){\n   //Initialise values\n   double alpha=0.3 , w=0.0 , w_next;\n   \n   //Calculate new value of weights\n   w_next = GradientDescent(w, alpha);\n   \n   //Print new value of weights\n   printf(\"New Value of w = %0.3f\\n \", w_next);\n \n   return 0;\n}", "category": "Python"}, {"instruction": "Write a script in Python that can classify a sentence as positive or negative.", "input": "The movie was terrible and boring.", "output": "import nltk\nfrom nltk.sentiment import SentimentIntensityAnalyzer\n\nsentence = \"The movie was terrible and boring.\"\nanalysis = SentimentIntensityAnalyzer()\nscore = analysis.polarity_scores(sentence)\nif score[\"compound\"] >= 0.5:\n    output = \"positive\"\nelse:\n    output = \"negative\"\n\nprint(\"The sentiment of the sentence is:\", output)", "category": "Python"}, {"instruction": "Write code in Python to calculate the area of a triangle given 3 sides.", "input": "side1 = 12\nside2 = 15\nside3 = 10", "output": "def areaTriangle( side1, side2, side3): \n    # calculate the semi-perimeter \n    s = (side1 + side2 + side3) / 2\n    \n    # calculate the area \n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    return area \n\n# Driver code \nside1 = 12\nside2 = 15\nside3 = 10\n\n# calculate area \narea = areaTriangle(side1, side2, side3) \n\n# print\nprint(\"Area of a triangle is :{0:0.2f}\".format(area))", "category": "Python"}, {"instruction": "Make an SQL query for calculating the average salary of employees.", "input": "Employee table with the column \"salary\"", "output": "SELECT AVG(salary) FROM Employee;", "category": "Python"}, {"instruction": "Develop a JavaScript object for storing the name and occupation of an employee.", "input": "name = 'John Doe', occupation = 'Programmer'", "output": "const employee = {\n    name: 'John Doe',\n    occupation: 'Programmer'\n}", "category": "Python"}, {"instruction": "Design a function in Python for computing the multiplication of 3 numbers.", "input": "4, 5, 6", "output": "def multiply_three(a, b, c):\n    return a * b * c\n\nmultiply_three(4, 5, 6) # returns 120", "category": "Python"}, {"instruction": "Write a SQL query for listing students who are 18 years old.", "input": "Student table with the columns \"name\" and \"age\"", "output": "SELECT name FROM Student WHERE age = 18;", "category": "Python"}, {"instruction": "Write a function to remove a given element from an array of integers.", "input": "arr = [2, 3, 4, 5, 6]\nremove_element = 4", "output": "def remove_element(arr, remove_element):\n    new_arr = []\n    for item in arr:\n        if item != remove_element: \n            new_arr.append(item)\n    return new_arr", "category": "Python"}, {"instruction": "What is the cosine similarity between two vectors?", "input": "", "output": "Cosine similarity is a measure of similarity between two non-zero vectors of an inner product space that measures the cosine of the angle between them. It is a normalized measure of similarity, ranging from -1 (completely different) to 1 (exactly similar). The cosine similarity is given by the dot product of the two vectors divided by their magnitudes.", "category": "Python"}, {"instruction": "Write Python code to group list elements into sublists of particular length.", "input": "[1,2,3,4,5,6,7,8]", "output": "def group_by_length(arr, k): \n\tn = len(arr)\n\tgroups = [arr[i:i+k] for i in range(0, n, k)] \n\treturn groups\n\na = [1,2,3,4,5,6,7,8] \nk = 3\nprint(group_by_length(a, k))", "category": "Python"}, {"instruction": "Write a JavaScript code to print the pyramid pattern for a given number of rows.", "input": "7", "output": "function pyramid(n) { \n  for (let i = 0; i < n; i++) { \n      let str = '';  \n      for (let j = 0; j < n-i; j++) { \n        str = str + ' '; \n    } \n    for (let k = 0; k <= i; k++ ) { \n        str = str + '* '; \n    } \n    console.log(str); \n  } \n} \n  \npyramid(7);", "category": "Python"}, {"instruction": "Define a class named 'Employee' that stores the ID, name, and age of a person.", "input": "", "output": "class Employee:\n    def __init__(self, ID, name, age):\n        self.ID = ID\n        self.name = name\n        self.age = age\n \n    def get_info(self):\n        return (self.ID, self.name, self.age)", "category": "Python"}, {"instruction": "Create a loop that prints out the numbers from 30 to 0, going in reverse.", "input": "", "output": "for i in range(30, -1, -1):\n    print(i)", "category": "Python"}, {"instruction": "Create a function that creates a tuple of the given arguments and returns the tuple.", "input": "a=\"A\"\nb=\"B\"", "output": "def create_tuple(a, b):\n    return (a, b)", "category": "Python"}, {"instruction": "Modify the code so that it checks if the number input is an integer or a decimal.", "input": "number = input(\"Please input a number: \")", "output": "number = input(\"Please input a number: \")\n\nif type(number) == int:\n    print(\"Input is an integer\")\nelse:\n    print(\"Input is a decimal\")", "category": "Python"}, {"instruction": "Create a list comprehension that finds all elements that are divisible by 3 in a given list.", "input": "numbers =[1, 5, 8, 10, 15, 20]", "output": "def divisible_by_three(numbers):\n    res = [num for num in numbers if num % 3 == 0]\n    return res", "category": "Python"}, {"instruction": "Write a function in JavaScript that takes 2 parameters of type string and concatenates them.", "input": "param1 = \"hello\"\nparam2 = \"world\"", "output": "function concatenate(str1, str2){\n  return str1 + str2;\n}\n\nconsole.log(concatenate(param1,param2)); // \"helloworld\"", "category": "Python"}, {"instruction": "Write a SQL query to extract all the orders placed on a given date.", "input": "order_date = \"2020-01-01\"", "output": "SELECT * \nFROM orders \nWHERE order_date = '2020-01-01';", "category": "Python"}, {"instruction": "Construct a for loop in C# for picking out numbers that are divisible by 3.", "input": "numbers = [1, 2, 3, 4, 5, 6, 7]", "output": "foreach (int num in numbers) {\n    if (num % 3 == 0) {\n        Console.WriteLine(num);\n    }\n}", "category": "Python"}, {"instruction": "Write a JavaScript expression to generate a random integer between 1 and 25.", "input": "", "output": "var randNumber = Math.floor(Math.random() * 25) + 1;", "category": "Python"}, {"instruction": "Replace all occurrences of one character with another in a given string.", "input": "string: Hello there\ncharacters: 'o' and 'a'", "output": "Hella there", "category": "Python"}, {"instruction": "Retrieve data from an SQL database.", "input": "Table name: users", "output": "SELECT * FROM users;", "category": "Python"}, {"instruction": "Create a function that returns the evaluation metric of a model.", "input": "", "output": "def Evaluate(model):\n    metrics = model.evaluate()\n    return metrics", "category": "Python"}, {"instruction": "Determine the angle of the triangle given its three sides.", "input": "a = 5, b = 6, c = 7", "output": "The angle between side a and b is 53.13\u00b0.", "category": "Python"}, {"instruction": "Write an outbound rule in Firewall to block traffic from a certain IP address.", "input": "IP address: 123.123.123.123", "output": "sudo iptables -A OUTPUT -s 123.123.123.123 -j DROP", "category": "Python"}, {"instruction": "Draft a pseudo-code to implement a linear search algorithm in an array.", "input": "", "output": "ALGORITHM LinearSearch(arr, value)\n    SET i = 0\n    WHILE i < arr.length\n        IF arr[i] == value\n            RETURN i\n        ELSE \n            SET i = i + 1\n    RETURN -1", "category": "Python"}, {"instruction": "Create a program in JavaScript to edit the existing string by replacing some of its character.", "input": "string = \"Hello world!\"\nreplacement = \"Bye world!\"", "output": "let str = \"Hello world!\";\n\nlet changedStr = str.replace(\"Hello\", \"Bye\");\nconsole.log(changedStr); // Bye world!", "category": "Python"}, {"instruction": "Convert a number from decimal to octal in Python.", "input": "number = 109", "output": "decimal  = 109    \noctal = format(decimal, 'o')  \n\nprint(\"Decimal:\", decimal)\nprint(\"Octal:\", octal)", "category": "Python"}, {"instruction": "Write a function that takes two strings as parameters and returns whether they are an anagram of each other or not.", "input": "string1 = \"abcde\"\n\nstring2 = \"edcba\"", "output": "def is_anagram(string1, string2):\n    if sorted(string1) == sorted(string2):\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    string1 = \"abcde\"\n    string2 = \"edcba\"\n\n    result = is_anagram(string1, string2)\n    print(result)", "category": "Python"}, {"instruction": "Boil down a JavaScript object into an array of key-value pairs.", "input": "object = {a: 1, b: 2, c: 3}", "output": "const kvPairs = Object.entries(object);\n// [['a', 1], ['b', 2], ['c', 3]]", "category": "Python"}, {"instruction": "Create a procedure in C# to print a string.", "input": "my_string", "output": "void PrintString(string my_string) {\n  Console.WriteLine(my_string);\n}\n\nPrintString(\"my_string\");", "category": "Python"}, {"instruction": "Construct an SQL statement that deletes all records from the \"blog_posts\" table.", "input": "", "output": "DELETE FROM blog_posts;", "category": "Python"}, {"instruction": "Create a program in Python that takes two numbers as input and prints the result of the multiplication of those numbers.", "input": "num_1 = 10\nnum_2 = 15", "output": "num_1 = 10\nnum_2 = 15\nprint(num_1 * num_2)", "category": "Python"}, {"instruction": "Find the position of the substring \"is\" in the string.", "input": "string = \"This is an example\"", "output": "string = \"This is an example\"\nprint(string.find(\"is\"))", "category": "Python"}, {"instruction": "Write a query to find the author with the highest number of books in each year.", "input": "", "output": "SELECT year, author, MAX(books) AS most_books\nFROM authors\nGROUP BY year;", "category": "Python"}, {"instruction": "Write a function to compare two strings. The function should return true if the strings are equal and false if the strings are not equal.", "input": "string_1 = \"Hello\"\nstring_2 = \"World\"", "output": "def compare_strings(string_1, string_2):\n if string_1 == string_2:\n    return True\n else:\n    return False", "category": "Python"}, {"instruction": "Add code to this function to return the square of the input number.", "input": "def square_number(number):\n1", "output": "def square_number(number):\n   return number*number", "category": "Python"}, {"instruction": "Create a program in Python that sorts the following list and prints the sorted version of the list.", "input": "mylist = [1, 5, 9, 2, 6, 8]", "output": "mylist = [1, 5, 9, 2, 6, 8]\nmylist.sort()\nprint(mylist)", "category": "Python"}, {"instruction": "Write a query to find the sum of all authors' books in the database.", "input": "", "output": "SELECT SUM(books) FROM authors;", "category": "Python"}, {"instruction": "Create a function in Java that filters a given array by a specific number.", "input": "int[] arr = {4, 2, 10, 15, 8, 7}; \nint K = 9;", "output": "public static int[] filterArrayByK(int[] arr, int k) { \n\tint i, j, index = 0; \n\tint[] filteredArray = new int[arr.length]; \n\n\tfor (i = 0; i < arr.length; i++) { \n\t\tif (arr[i] <= k) { \n\t\t\tfilteredArray[index] = arr[i]; \n\t\t\tindex++; \n\t\t} \n\t} \n\n\tint[] result = new int[index]; \n\tfor (j = 0; j < index; j++) { \n\t\tresult[j] = filteredArray[j]; \n\t} \n\n\treturn result; \n}", "category": "Python"}, {"instruction": "Edit the following JavaScript code to make an AJAX call to a specific URL.", "input": "", "output": "var xhr = new XMLHttpRequest();\nxhr.open('GET', 'https://example.com/ajax_call', true);\nxhr.send();", "category": "Python"}, {"instruction": "Develop an algorithm to calculate the circumference of a circle provided the radius.", "input": "radius = 5", "output": "def calculate_circumference(radius):\n  circumference = 2*3.14*radius\n  return circumference", "category": "Python"}, {"instruction": "Construct a regular expression to match strings containing only alphabets.", "input": "", "output": "/^[a-zA-Z]+$/", "category": "Python"}, {"instruction": "Write a SQL query to delete a row from the \"CITY\" table where the city is \"Frankfurt\".", "input": "", "output": "DELETE FROM CITY WHERE CITY = 'Frankfurt';", "category": "Python"}, {"instruction": "Create a machine learning model to predict a binary class.", "input": "", "output": "# import the necessary libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# preprocess the data\ndf = pd.read_csv('data.csv')\nX = df.drop('target', axis=1)\ny = df['target']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# train the model\nlr = LogisticRegression().fit(X_train, y_train)\n\n# evaluate the model\ntrain_score = lr.score(X_train, y_train)\ntest_score = lr.score(X_test, y_test)\nprint(f\"Train score: {train_score}\")\nprint(f\"Test score: {test_score}\")", "category": "Python"}, {"instruction": "Write a Ruby program to remove duplicate elements from the given array.", "input": "arr = [1, 2, 2, 3, 4, 4]", "output": "def remove_duplicates(arr) \n  arr.uniq \nend \n  \nputs remove_duplicates([1, 2, 2, 3, 4, 4]) # should print [1, 2, 3, 4]", "category": "Python"}, {"instruction": "Suppose you are given a array of 0s,1s and 2s . Write a program to sort the given input array.", "input": "", "output": "def sortArray(arr): \n      \n    # loop to run for every element in the array \n    for i in range(len(arr)): \n          \n        # loop to run for elements till the sorted part \n        for j in range(0, len(arr)-i-1): \n  \n            # If a element is found to be greater than its next element then swap them \n            if arr[j] == 2 and arr[j+1] in [0,1]: \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n            elif arr[j] == 1 and arr[j+1] == 0: \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n                  \n    return arr", "category": "Python"}, {"instruction": "Offer a solution for converting a bank of binary strings, represented as an array, to Decimal numbers.", "input": "", "output": "def binaryToDecimal(binary): \n    # to store decimal number \n    decimal, i = 0, 0\n    while(binary != 0): \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i = i + 1\n    return decimal", "category": "Python"}, {"instruction": "Create an HTML page with a Table, which lists out the names and usernames of 4 people.", "input": "Jenny, jenny123\nJohn, john123\nAlice, alice123\nBob, bob123", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Table example</title>\n  </head>\n  <body>\n    <h1>Names and Usernames</h1>\n    <table>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Username</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>Jenny</td>\n          <td>jenny123</td>\n        </tr>\n        <tr>\n          <td>John</td>\n          <td>john123</td>\n        </tr>\n        <tr>\n          <td>Alice</td>\n          <td>alice123</td>\n        </tr>\n        <tr>\n          <td>Bob</td>\n          <td>bob123</td>\n        </tr>\n      </tbody>\n    </table>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Design a program to solve a 3x3 Sudoku puzzle.", "input": "", "output": "# A Backtracking program  \n# in Python to solve Sudoku problem  \n  \n# A Utility Function to print the Grid  \ndef print_grid(arr): \n    for i in range(9): \n        for j in range(9): \n            print(arr[i][j]), \n        print ('n') \n  \n# Function to Find the entry in the Grid that is still  not used \n# Searches the grid to find an entry that is still unassigned. If \n# found, the reference parameters row, col will be set the location \n# that is unassigned, and true is returned. If no unassigned entries \n# remain, false is returned. \n# 'l' is a list  variable that has been passed from the solve_sudoku function \n# to keep track of incrementation of Rows and Columns \ndef find_empty_location(arr,l): \n    for row in range(9): \n        for col in range(9): \n            if(arr[row][col]==0): \n                l[0]=row \n                l[1]=col \n                return True\n    return False\n  \n# Returns a boolean which indicates whether any assigned entry \n# in the specified row matches the given number. \ndef used_in_row(arr,row,num): \n    for i in range(9): \n        if(arr[row][i] == num): \n            return True\n    return False\n  \n# Returns a boolean which indicates whether any assigned entry \n# in the specified column matches the given number. \ndef used_in_col(arr,col,num): \n    for i in range(9): \n        if(arr[i][col] == num): \n            return True\n    return False\n  \n# Returns a boolean which indicates whether any assigned entry \n# within the specified 3x3 box matches the given number \ndef used_in_box(arr,row,col,num): \n    for i in range(3): \n        for j in range(3): \n            if(arr[i+row][j+col] == num): \n                return True\n    return False\n  \n# Checks whether it will be legal to assign num to the given row,col \n# Returns a boolean which indicates whether it will be legal to assign \n# num to the given row,col location. \ndef check_location_is_safe(arr,row,col,num): \n      \n    # Check if 'num' is not already placed in current row, \n    # current column and current 3x3 box \n    return not used_in_row(arr,row,num) and not used_in_col(arr,col,num) and not used_in_box(arr,row - row%3,col - col%3,num) \n  \n# Takes a partially filled-in grid and attempts to assign values to \n# all unassigned locations in such a way to meet the requirements \n# for Sudoku solution (non-duplication across rows, columns, and boxes) \ndef solve_sudoku(arr): \n      \n    # 'l' is a list variable that keeps the record of row and col in find_empty_location Function     \n    l=[0,0] \n      \n    # If there is no unassigned location, we are done     \n    if(not find_empty_location(arr,l)): \n        return True\n      \n    # Assigning list values to row and col that we got from the above Function  \n    row=l[0] \n    col=l[1] \n      \n    # consider digits 1 to 9 \n    for num in range(1,10): \n          \n        # if looks promising \n        if(check_location_is_safe(arr,row,col,num)): \n              \n            # make tentative assignment \n            arr[row][col]=num \n  \n            # return, if success, ya! \n            if(solve_sudoku(arr)): \n                return True\n  \n            # failure, unmake & try again \n            arr[row][col] = 0\n              \n    # this triggers backtracking         \n    return False \n  \n# Driver main function to test above functions \nif __name__==\"__main__\": \n      \n    # creating a 2D array for the grid \n    grid=[[0 for x in range(9)]for y in range(9)] \n      \n    # assigning values to the grid \n    grid=[[3,0,6,5,0,8,4,0,0], \n          [5,2,0,0,0,0,0,0,0], \n          [0,8,7,0,0,0,0,3,1], \n          [0,0,3,0,1,0,0,8,0], \n          [9,0,0,8,6,3,0,0,5], \n          [0,5,0,0,9,0,6,0,0], \n          [1,3,0,0,0,0,2,5,0], \n          [0,0,0,0,0,0,0,7,4], \n          [0,0,5,2,0,6,3,0,0]] \n      \n    # if sucess print the grid \n    if(solve_sudoku(grid)): \n        print_grid(grid)\n    else: \n        print \"No solution exists\"", "category": "Python"}, {"instruction": "Generate a for loop in Java for printing integers from 0 to 10.", "input": "", "output": "for (int i = 0; i <= 10; i++) {\n    System.out.println(i);\n}", "category": "Python"}, {"instruction": "Design a program to generate prime numbers between 1 and 50.", "input": "", "output": "# Program to print the prime numbers between 1 and 50\n \nfor num in range(1, 51):\n\n   # prime numbers are greater than 1\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:  \n           print(num)", "category": "Python"}, {"instruction": "Develop a Java program to check if an input number is an Armstrong number.", "input": "", "output": "public class ArmstrongNumber {\n \tpublic static void main(String[] args) {\n \t\tint number = 407; \n \t\t// sample input\n \n \t\t// calculate the length of the number\n \t\tint lengthOfNumber = String.valueOf(number).length();\n \n \t\tint tempNumber = number;\n \n \t\tint sum = 0; \n \n \t\twhile (tempNumber != 0) {\n \t\t\tint digit = tempNumber % 10;\n \t\t\tsum = sum + (int) Math.pow(digit, lengthOfNumber);\n \t\t\ttempNumber = tempNumber / 10;\n \t\t}\n \n \t\tif (sum == number)\n \t\t\tSystem.out.println(number + \" is an Armstrong number.\");\n \t\telse\n \t\t\tSystem.out.println(number + \" is not an Armstrong number.\");\n \t}\n }", "category": "Python"}, {"instruction": "Formulate an algorithm that helps you arrange a given set of numbers in ascending order.", "input": "[7, 4, 8, 9, 11]", "output": "1. Take two variables, say x and y. \n2. Assign x the value of the first element in the list and y the value of the second element.\n3. Compare x and y. \n4. If x > y, swap them.\n5. Now x is the smallest and move to the next element in the list. Repeat from step 2 with y and new element.\n6. At the end of the array, the list is sorted.", "category": "Python"}, {"instruction": "Write JavaScript code to disable a form element with an id of 'name'.", "input": "", "output": "document.getElementById(\"name\").disabled = true;", "category": "Python"}, {"instruction": "Compile the given piece of code and identify any errors.", "input": "int main() \n{\n cout << \"Hello World!\";\n  return 0;\n }", "output": "No errors present.", "category": "Python"}, {"instruction": "Create a variable in R and assign it with a string value of \"Hello World\".", "input": "", "output": "my_string <- \"Hello World\"", "category": "Python"}, {"instruction": "Design an SQL query for displaying the names and ages of all employees.", "input": "Employee table with the columns \"name\" and \"age\"", "output": "SELECT name, age FROM Employee;", "category": "Python"}, {"instruction": "Construct a query to find all records in the table with a particular value.", "input": "Table Name: employees\nValue: John", "output": "SELECT * FROM employees WHERE name = 'John';", "category": "Python"}, {"instruction": "What is the command to print all the characters in a given string?", "input": "", "output": "for c in string:\n    print(c)", "category": "Python"}, {"instruction": "What is the command to add a new key-value pair (\"country\": \"Australia\") to the following dictionary?", "input": "{\n    \"name\": \"Dave\",\n    \"age\": 32\n}", "output": "d = {\n    \"name\": \"Dave\",\n    \"age\": 32,\n    \"country\": \"Australia\"\n}", "category": "Python"}, {"instruction": "What is the command to delete all occurrences of the element \"5\" from a given Python array?", "input": "", "output": "arr = [3, 4, 5, 2, 5, 1, 5]\narr = [x for x in arr if x != 5]", "category": "Python"}, {"instruction": "Compute the square root of the number 25 and store the output in a variable called 'output'.", "input": "", "output": "import math\noutput = math.sqrt(25)", "category": "Python"}, {"instruction": "Construct a program to compute the sum of two numbers and display the result.", "input": "number1 = 5\nnumber2 = 10", "output": "total = number1 + number2\nprint(\"The total is\", total)", "category": "Python"}, {"instruction": "Update the code to sum the numbers from 0 to 10 and store the result in the 'total' variable.", "input": "total = 0", "output": "total = 0\nfor i in range(11):\n    total += i", "category": "Python"}, {"instruction": "Create a function that takes a String and adds a period punctuation mark at the end.", "input": "phrase = \"I am having a good day\"", "output": "def add_period(phrase):\n    if not isinstance(phrase, str):\n        raise ValueError(\"phrase should be a String\")\n    return phrase + \".\"", "category": "Python"}, {"instruction": "What is the command to find the length of a given list?", "input": "", "output": "list_length = len(list)", "category": "Python"}, {"instruction": "Write an HTML code to produce an ordered list with the following numbers: 9, 15, 3, 4.", "input": "", "output": "<ol>\n <li>9</li>\n <li>15</li>\n <li>3</li>\n <li>4</li>\n</ol>", "category": "Python"}, {"instruction": "Modify the following function to only take numbers greater than 10.", "input": "def filter(numbers):\n    return [n for n in numbers if n % 2 == 0]\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "output": "def filter(numbers):\n    return [n for n in numbers if n > 10 and n % 2 == 0]\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Edit the following code to make it generate a random number between 1 and 10.", "input": "import random\n\ndef generate_random_number():\n    return random.randint(0, 11)", "output": "import random\n\ndef generate_random_number():\n    return random.randint(1, 10)", "category": "Python"}, {"instruction": "Write a method in Java to return a reversed version of a given string.", "input": "", "output": "public static String reverseString(String s) {\n  StringBuilder sb = new StringBuilder();\n  for (int i = s.length() - 1; i >= 0; i--) {\n    sb.append(s.charAt(i));\n  }\n  return sb.toString();\n}", "category": "Python"}, {"instruction": "Reorganize the given list of strings into a dictionary in JavaScript.", "input": "[ \"name\": \"John\", \"age\": 30, \"city\": \"New York\" ]", "output": "const strList = [ \"name\": \"John\", \"age\": 30, \"city\": \"New York\" ];\nconst strDict = {};\n\nfor (i = 0; i < strList.length; i++) {\n    const keyValue = strList[i].split(': ');\n    strDict[keyValue[0]] = keyValue[1];\n}\n\nconsole.log(strDict);\n// Output: { name: \"John\", age: 30, city: \"New York\" }", "category": "Python"}, {"instruction": "Classify the given text as \"positive\" or \"negative\" using Natural Language Processing.", "input": "This movie is terrible.", "output": "negative", "category": "Python"}, {"instruction": "Generate a list of 10 numbers in Python where each number is a multiple of 7 and greater than 40", "input": "", "output": "[x for x in range(41, 100) if x % 7 == 0]\n# Output: [42, 49, 56, 63, 70, 77, 84, 91, 98]", "category": "Python"}, {"instruction": "Create a Node.js express server to serve a web page when the root route is requested.", "input": "", "output": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n    res.send('<p>This is the homepage</p>');\n});\n\napp.listen(3000, () => {\n    console.log('Server is listening at port 3000');\n});", "category": "Python"}, {"instruction": "Using the given JSON string, parse the string and convert it into an object or array in JavaScript", "input": "{ \"name\": \"John\", \"age\": 30, \"city\": \"New York\" }", "output": "const parsedObject = JSON.parse('{ \"name\": \"John\", \"age\": 30, \"city\": \"New York\" }');\nconsole.log(parsedObject);\n// Output: {name: \"John\", age: 30, city: \"New York\"}", "category": "Python"}, {"instruction": "Write a function in C++ to convert a list to a tuple.", "input": "", "output": "#include <tuple>\n#include <vector>\n\ntemplate<typename Items>\nauto list_to_tuple(const Items& items) {\n    std::tuple<Items> result;\n    std::copy(items.begin(), items.end(), std::tuple_cat(result));\n    return result;\n}", "category": "Python"}, {"instruction": "Group the objects of an array into bunches of 3 using JavaScript.", "input": "[1, 4, 7, 9, 12, 16, 19]", "output": "const groupOfThree = (arr) => {\n    const chunks = [];\n    let i;\n    for (i = 0; i < arr.length; i+=3) {\n        chunks.push(arr.slice(i, i+3));\n    }\n    return chunks;\n}\n\nconsole.log(groupOfThree([1, 4, 7, 9, 12, 16, 19]));\n// Output: [[1,4,7], [9,12,16], [19]]", "category": "Python"}, {"instruction": "Using the given datasets and Scikit-Learn, develop a K Nearest Neighbors (KNN) classifier.", "input": "import pandas as pd\ndf = pd.read_csv(\"data.csv\")", "output": "from sklearn.neighbors import KNeighborsClassifier \nX = df.iloc[:,:-1].values \ny = df.iloc[:,-1].values \nknn = KNeighborsClassifier(n_neighbors=3) \nknn.fit(X, y)", "category": "Python"}, {"instruction": "Edit the code given below so it can compute the sum of two numeric inputs.", "input": "def add_two_numbers(x, y):\n\t# TODO: Write code that computes and returns the sum of two numeric inputs", "output": "def add_two_numbers(x, y):\n  # Compute and return the sum of two numeric inputs\n  return x + y", "category": "Python"}, {"instruction": "Calculate the hypotenuse of a right triangle when the other two sides are 4 and 5.", "input": "", "output": "The hypotenuse of a right triangle with sides 4 and 5 is 6.40312.", "category": "Python"}, {"instruction": "Write a MongoDB query to select all documents in a collection where the field 'category' is 'clothes'.", "input": "", "output": "db.collection.find({ \"category\": \"clothes\" })", "category": "Python"}, {"instruction": "Create a code to update the values of an array elements with their cube.", "input": "[1, 2, 3, 4, 5]", "output": "def cubeArrayElements(arr): \n  \n    for i in range(0, len(arr)): \n        arr[i] = arr[i]*arr[i]*arr[i] \n    \n    return arr", "category": "Python"}, {"instruction": "Write a JavaScript function to compute the true false ratio of a given array.", "input": "[0, 1, 1, 0, 0]", "output": "function trueFalseRatio(arr){\n    let trueCount = 0;\n    let falseCount = 0;\n    \n    arr.forEach(val => {\n        if(val === 0){\n            falseCount++;\n        } else {\n            trueCount++;\n        }\n    });\n    return {\n        true: trueCount, \n        false: falseCount\n    };\n}", "category": "Python"}, {"instruction": "Write a code snippet to find the most frequent number greater than 100 from a list of numbers.", "input": "[102, 130, 102, 140, 150, 60, 70, 102, 140]", "output": "def most_frequent(nums):\n    # Initialize a dictionary to count the frequency \n    # of each number in the list\n    count = {}\n\n    # Iterate through the list and increase the \n    # count of each number in the dictionary\n    for num in nums:\n        if num> 100:\n            if num not in count:\n                count[num] = 1\n            else:\n                count[num] += 1\n    \n    # Find the most frequent number\n    max_count = 0\n    most_frequent_num = 0\n    for k,v in count.items():\n        if v> max_count:\n            most_frequent_num = k\n            max_count = v\n    return most_frequent_num", "category": "Python"}, {"instruction": "Create an HTML form to allow a user to enter their contact information.", "input": "Fields requested: Name, Email, Phone number", "output": "<form action=\"contactinfo.php\" method=\"POST\">\n  <label>Name</label>\n  <input type=\"text\" name=\"name\" />\n \n  <label>Email</label>\n  <input type=\"text\" name=\"email\" />\n  \n  <label>Phone Number</label>\n  <input type=\"text\" name=\"phone\" />\n  \n  <input type=\"submit\" value=\"Submit\" />\n</form>", "category": "Python"}, {"instruction": "Create a C++ object to represent a 2D point.", "input": "", "output": "class Point2D {\n   private:\n     double x;\n     double y;\n   public:\n     Point2D(double x_coordinate, double y_coordinate);\n     double get_x();\n     double get_y();\n};\n\nPoint2D::Point2D(double x_coordinate, double y_coordinate) {\n   x = x_coordinate;\n   y = y_coordinate;\n}\n\ndouble Point2D::get_x() {\n   return x;\n}\n\ndouble Point2D::get_y() {\n   return y;\n}", "category": "Python"}, {"instruction": "Write a MySQL query to insert new records in an 'Employees' table.", "input": "Table Name: Employees\nRecords to add: \nName: John, Age: 28, Job Title: Programmer\nName: Alice, Age: 24, Job Title: Designer", "output": "INSERT INTO Employees (Name, Age, Job_Title)\n VALUES ('John', 28, 'Programmer'),\n        ('Alice', 24, 'Designer');", "category": "Python"}, {"instruction": "Create a web page that shows a short biography of the given person.", "input": "Person: Marie Curie", "output": "<html>\n  <head>\n    <title>Biography of Marie Curie</title>\n  </head>\n  <body>\n    <h1>Marie Curie</h1>\n    <p>Marie Curie (1867-1934) was a Polish physicist and chemist who conducted pioneering research on radioactivity and discovered the elements radium and polonium. She was twice awarded the Nobel Prize, first in physics in 1903, and again in 1911 in chemistry. She is one of the most famous female scientists in history, and continues to be an inspiration to scientists around the world.</p>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create a basic C# program to print out the current date and time.", "input": "", "output": "using System;\n\npublic class Program \n{\n    public static void Main()\n    {\n        Console.WriteLine(DateTime.Now.ToString());\n    }\n}", "category": "Python"}, {"instruction": "Create a basic Python script to accept two numbers from the user and \nprint out the sum.", "input": "", "output": "num1 = int(input(\"Enter the first number: \"))\nnum2 = int(input(\"Enter the second number: \"))\n\n# add two numbers\nsum = num1 + num2\n\n# display the sum\nprint(\"The sum of {0} and {1} is {2}\".format(num1, num2, sum))", "category": "Python"}, {"instruction": "Identify and display all the data types within the column 'price' in a table named 'products'.", "input": "", "output": "SELECT DISTINCT data_type \nFROM products \nWHERE column_name = 'price';", "category": "Python"}, {"instruction": "Generate a JavaScript code to get the key names of an object.", "input": "key names of the following object\nlet obj = {name: \"John\", age: 30, job: \"teacher\"};", "output": "let objKeyNames = Object.keys(obj); \nconsole.log(objKeyNames); // outputs [\"name\", \"age\", \"job\"]", "category": "Python"}, {"instruction": "Generate a Bash script to grep a given line from the command output.", "input": "grep the line \"The result is\" from the following command\n\"echo \"The result is 120\"\"", "output": "#!/bin/bash\n\nCMD=\"echo \"The result is 120\"\"\n\neval $CMD | grep -o \"The result is.*\"", "category": "Python"}, {"instruction": "Create a SQL database containing three tables.", "input": "", "output": "CREATE TABLE Employee (\n  Id INT NOT NULL UNIQUE PRIMARY KEY,\n  Name VARCHAR(50) NOT NULL,\n  Age INT NOT NULL\n);\n\nCREATE TABLE Department (\n  Id INT NOT NULL UNIQUE PRIMARY KEY,\n  Name VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE Employee_Department (\n  EmployeeId INT NOT NULL UNIQUE,\n  DepartmentId INT NOT NULL UNIQUE\n);", "category": "Python"}, {"instruction": "Implement a Python class that prints a given given text when a certain condition is satisfied.", "input": "Print a text \"Endless fun\" when the numbers given in a list equals to 10", "output": "class MyClass:\n    def __init__(self, given_list):\n        self.given_list = given_list\n    \n    def check_equal_to_10(self):\n        if len(self.given_list) == 0:\n            return False\n        for num in self.given_list:\n            if num != 10:\n                return False\n        print(\"Endless fun\")\n        return True", "category": "Python"}, {"instruction": "Create a React component to sort an array of strings.", "input": "arr = [\"test\", \"data\", \"string\"]", "output": "import React from 'react';\n\nclass SortComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      strings: this.props.strings\n    };\n  }\n  \n  // sorting function\n  sort = (strings) => {\n    return strings.sort();\n  }\n  \n  render() {\n    let sortedStrings = this.sort(this.state.strings);\n    return (\n      <div>\n        <div>Sorted strings: </div>\n        {sortedStrings.map((str) => <div>{str}</div>)}\n      </div>\n    );\n  }\n}\n\n// Usage\n<SortComponent strings={[\"test\", \"data\", \"string\"]} />", "category": "Python"}, {"instruction": "Edit the following HTML to give a baseline styling to the body.", "input": "<body>\n    <h2>Hello World</h2>\n</body>", "output": "<body style=\"margin: 0; padding: 0; font-family: sans-serif; box-sizing: border-box; font-size: 16px; line-height: 1.5; background-color: #f5f5f5; color: #222222;\">\n    <h2>Hello World</h2>\n</body>", "category": "Python"}, {"instruction": "Create an Android app with a button to switch between light and night mode.", "input": "", "output": "public class MainActivity extends AppCompatActivity {\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    \n    // Get reference to button\n    Button switchModeButton = (Button) findViewById(R.id.switch_mode_button);\n    switchModeButton.setOnClickListener(new View.OnClickListener() {\n      @Override\n      public void onClick(View view) {\n        AppCompatDelegate.setDefaultNightMode(\n                  AppCompatDelegate.getDefaultNightMode() == AppCompatDelegate.MODE_NIGHT_YES ?\n                          AppCompatDelegate.MODE_NIGHT_NO : AppCompatDelegate.MODE_NIGHT_YES\n        );\n        recreate();\n      }\n    });\n  }  \n}", "category": "Python"}, {"instruction": "Create a regular expression that matches strings starting with \"Hello\".", "input": "", "output": "let regex = /^Hello/;", "category": "Python"}, {"instruction": "Implement a shell script to retrieve the IP address of a website.", "input": "", "output": "#!/bin/bash\n\nif [ $# -eq 0 ]; then\n    echo \"Error: No arguments supplied.\"\n    exit 1\nfi\n\nip=$( dig +short $1 )\necho $ip", "category": "Python"}, {"instruction": "Parse a JSON string and print each key-value pair to the console.", "input": "'{\"name\": \"John\", \"age\": 30, \"likes\": [\"sports\", \"chess\"]}'", "output": "const jsonStr = '{\"name\": \"John\", \"age\": 30, \"likes\": [\"sports\", \"chess\"]}';\nlet jsonObj = JSON.parse(jsonStr);\n\nfor (let key in jsonObj) {\n console.log(`${key}: ${jsonObj[key]}`);\n}", "category": "Python"}, {"instruction": "Given a list of integers, find the smallest and the largest of the set.", "input": "[1, 9, 45, -5, 23, 18]", "output": "let list = [1, 9, 45, -5, 23, 18];\nlet smallest = Math.min(...list);\nlet largest = Math.max(...list);\n\nconsole.log(\"Smallest: \" + smallest + \", Largest: \" + largest);", "category": "Python"}, {"instruction": "Perform an insertion sort on the given list.", "input": "List: [9, 5, 4, 8, 6]", "output": "def insertionSort(arr):\n   # Traverse through 1 to len(arr) \n   for i in range(1, len(arr)): \n  \n     key = arr[i] \n  \n     # Move elements of arr[0..i-1], that are \n     # greater than key, to one position ahead \n     # of their current position\n     j = i-1\n     while j >= 0 and key < arr[j] : \n             arr[j + 1] = arr[j] \n             j -= 1\n     arr[j + 1] = key \n  \n  \n# Driver code\narr = [9, 5, 4, 8, 6]\ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"% d\" % arr[i])\n# Output: Sorted array is: 4 5 6 8 9", "category": "Python"}, {"instruction": "Sum up the values in the given list using a for loop.", "input": "List: [2, 3, 6, 4, 8]", "output": "total = 0\nfor number in [2, 3, 6, 4, 8]:\n    total += number\nprint(\"Total: \", total) # Output: Total: 23", "category": "Python"}, {"instruction": "Write a JavaScript function to format a given number to HH:MM:SS.", "input": "// Given a number of seconds input\nlet secs = 85", "output": "const formatTime = (secs) => {\n    let d = new Date(0);\n    d.setSeconds(secs);\n\n    let hh = d.getHours().toString().padStart(2, '0'); \n    let mm = d.getMinutes().toString().padStart(2, '0'); \n    let ss = d.getSeconds().toString().padStart(2, '0'); \n\n    return `${hh}:${mm}:${ss}`;\n}", "category": "Python"}, {"instruction": "Write a function that takes a numerical parameter and returns True if it is positive and False if it is negative.", "input": "", "output": "def is_positive(num):\n    if num > 0:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    num = 5\n    result = is_positive(num)\n    print(result)", "category": "Python"}, {"instruction": "Write a code to find elements in an array that is divisible by a given number.", "input": "arr = [5, 15, 20, 25, 30]", "output": "# Function to find elements in an array that is \n# divisible by a given number \ndef isDivisible(arr, num): \n  \n    # Stores result \n    res = [] \n  \n    # Iterate over all elements \n    for i in range(0,len(arr)): \n  \n        # If remainder is 0 then add elements \n        # to result \n        if (arr[i] % num == 0): \n            res.append(arr[i]) \n  \n    return res \n  \n# Driver code \narr = [5, 15, 20, 25, 30] \nnum = 5\n  \n# Print result \nprint(isDivisible(arr,num))", "category": "Python"}, {"instruction": "Create a Java web application that displays a welcome message.", "input": "", "output": "import java.io.IOException;\nimport java.io.PrintWriter;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n@WebServlet(\"/welcome\")\npublic class WelcomeServlet extends HttpServlet {\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tresponse.setContentType(\"text/html\");\n\t\tPrintWriter out=response.getWriter(); \n\t\tString title=\"Welcome to Website\";\n\t\tString docType=\"<!doctype html\";\n\t\tout.println(docType +\n\t\t\t\t\"<html>\\n\" +\n\t\t\t\t\"<head><title>\" + title + \"</title></head>\\n\" +\n\t\t\t\t\"<body bgcolor=\\\"#f0f0f0\\\">\\n\" +\n\t\t\t\t\"<h1>Welcome to My Website!</h1>\\n\" +\n\t\t\t\t\"</body></html>\");\n\t}\n}", "category": "Python"}, {"instruction": "Explain the purpose of each line of code in the following program.", "input": "\"\"\"\ndef fun(x):\n    y = x * 2\n    return y\n\"\"\"", "output": "\"\"\"\nThe first line of code defines a function named `fun` which takes a single parameter `x`.\n\nThe second line multiplies the parameter `x` by 2 and assigns the resulting value to a new variable called `y`. \n\nThe third line returns the value stored in `y` as the output of the function.\n\"\"\"", "category": "Python"}, {"instruction": "Create an example of a deep learning neural network in Keras.", "input": "", "output": "\"\"\"\nExample of a deep learning neural network in Keras\n\"\"\"\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n#Create a Sequential model\nmodel = Sequential()\n\n#Add a Dense layer with 32 neurons and an input shape of 10\nmodel.add(Dense(32, activation='relu', input_shape=(10,)))\n\n#Add a second Dense layer with 16 neurons\nmodel.add(Dense(16, activation='relu'))\n\n#Add an output layer with 1 neuron\nmodel.add(Dense(1, activation='sigmoid'))", "category": "Python"}, {"instruction": "Create a SQL query to select the name, job title and salary of all employees who work in the Sales department.", "input": "", "output": "SELECT name, job_title, salary\nFROM employees\nWHERE department = 'Sales'", "category": "Python"}, {"instruction": "Develop a code in R that returns the maximum from a list.", "input": "", "output": "#function to return maximum\nmax <- function(x)\n{\n  max_num <- 0 #Initialize maximum number\n  for (i in x)\n  {\n    if (i > max_num)\n    {\n      max_num <- i\n    }\n  }\n  return (max_num)\n}\n \n#Test\nlist <- c(10, 30, 20, 5, 100)\nmaximum <- max(list)\nprint(maximum)", "category": "Python"}, {"instruction": "Build a CNN model in Keras to detect cancer from a provided dataset.", "input": "", "output": "# Importing the libraries\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\n\n# Initialising the CNN\nclassifier = Sequential()\n\n# Step 1 - Convolution\nclassifier.add(Conv2D(32, (3, 3), input_shape = (64, 64, 3), activation = 'relu'))\n\n# Step 2 - Pooling\nclassifier.add(MaxPooling2D(pool_size = (2, 2)))\n\n# Adding a second convolutional layer\nclassifier.add(Conv2D(32, (3, 3), activation = 'relu'))\nclassifier.add(MaxPooling2D(pool_size = (2, 2)))\n\n# Step 3 - Flattening\nclassifier.add(Flatten())\n\n# Step 4 - Full connection\nclassifier.add(Dense(units = 128, activation = 'relu'))\nclassifier.add(Dense(units = 1, activation = 'sigmoid'))\n\n# Compiling the CNN\nclassifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n\n# Part 2 - Fitting the CNN to the images\n\nfrom keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(rescale = 1./255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\n\ntest_datagen = ImageDataGenerator(rescale = 1./255)\n\ntraining_set = train_datagen.flow_from_directory('dataset/training_set',\n                                                 target_size = (64, 64),\n                                                 batch_size = 32,\n                                                 class_mode = 'binary')\n\ntest_set = test_datagen.flow_from_directory('dataset/test_set',\n                                            target_size = (64, 64),\n                                            batch_size = 32,\n                                            class_mode = 'binary')\n\nclassifier.fit_generator(training_set,\n                         samples_per_epoch = 8000,\n                         nb_epoch = 25,\n                         validation_data = test_set,\n                         nb_val_samples = 2000)", "category": "Python"}, {"instruction": "Implement a matrix multiplication program in Java.", "input": "", "output": "public class MatrixMultiplication \n{\n    static int N = 5; \n  \n    static int[][] multiply(int[][] A,  \n                     int[][] B) \n    { \n        int[][] C = new int[N][N]; \n  \n        for (int i = 0; i < N; i++) \n        { \n            for (int j = 0; j < N; j++) \n            { \n                for (int k = 0; k < N; k++) \n                { \n                    C[i][j] += A[i][k] * B[k][j]; \n                } \n            } \n        } \n        return C; \n    } \n  \n    static void printMatrix \n                           (int[][] matrix) \n    { \n        for (int i = 0; i < N; i++) \n        { \n            for (int j = 0; j < N; j++) \n            { \n                System.out.print(matrix[i][j] + \" \"); \n            } \n            System.out.println(); \n        } \n    } \n  \n    public static void main (String[] args) \n    { \n        int[][] A = { { 1, 1, 1 },  \n                      { 2, 2, 2 },  \n                      { 3, 3, 3 },  \n                      { 4, 4, 4 },  \n                      { 5, 5, 5 } }; \n  \n        int[][] B = { { 1, 1, 1 },  \n                      { 2, 2, 2 },  \n                      { 3, 3, 3 },  \n                      { 4, 4, 4 },  \n                      { 5, 5, 5 } }; \n  \n        int[][] C = multiply(A, B); \n        printMatrix(C); \n    } \n}", "category": "Python"}, {"instruction": "Develop an R program that returns the node of a linked list.", "input": "", "output": "# Defining a node \nNode <- function(value){\t \n   this$value <- value\n   this$next <- NULL\n   return(this)\n} \n\t\n# Defining a Linked List \nLinkedList <- function(){ \n   this$head <- NULL\n   this$tail <- NULL\n\t\n   # Function to add an element in the linked list \n   addNode <- function(value){\n        newnode <- Node(value) \n\t\t\n        # If the Linked List has no node \n        if(is.null(this$head)){ \n            this$head <- newnode\n            this$tail <- newnode \n        } else { \n\t\t\t\n            # Point tail node to newly added node\n            this$tail$next <- newnode \n            this$tail <- newnode \n        } \n\t\t\n        # Return the new linked list\n        return(this) \n   } \n\t\n   # Return the linked list\n   return(list(addNode = addNode)) \n}", "category": "Python"}, {"instruction": "Construct a function to check for an anagram in Python.", "input": "", "output": "def anagram_check(s1, s2):\n    s1 = s1.replace(' ','').lower()\n    s2 = s2.replace(' ','').lower()\n    \n    if(sort(s1) == sort(s2)):\n        return True\n    \n    return False\n    \ndef sort(s):\n    return sorted(s)", "category": "Python"}, {"instruction": "Update the given Python program to reverse a string.", "input": "def reverse_string(s): \n    #insert code here\n    return s", "output": "def reverse_string(s):\n    return s[::-1]", "category": "Python"}, {"instruction": "Construct a SQL query to find all first names from the table \"Employees\" beginning with \"J\".", "input": "Table: Employees\nColumn: First_Name", "output": "SELECT First_Name FROM Employees WHERE First_Name LIKE 'J%';", "category": "Python"}, {"instruction": "Construct a function to convert currency amount from USD to INR.", "input": "Current USD to INR ratio: 1 USD = 73.20 INR", "output": "def currency_convert(amount):\n   \n    #Convert amount from USD to INR\n    inr = amount * 73.20 \n    \n    #return the converted currency\n    return inr\n  \n#Test\namount = int(input(\"Enter amount of currency in USD:\")) \n  \nprint(\"The amount in INR:\",currency_convert(amount))", "category": "Python"}, {"instruction": "Construct a SQL query to identify the sum contained in the column \"Price\" from the table \"Orders\".", "input": "Table: Orders\nColumn: Price", "output": "SELECT SUM(Price) FROM Orders;", "category": "Python"}, {"instruction": "Build a HTML page using the given CSS class", "input": "CSS Classes:\n\n.container {\n    width: 300px;\n    height: 200px;\n    background-color: blue;\n}\n\n.text {\n    color: white;\n    font-family: Arial;\n    font-size: 16px;\n    padding: 15px;\n    text-align: center;\n}", "output": "<html>\n<head>\n<style>\n.container {\n    width: 300px;\n    height: 200px;\n    background-color: blue;\n}\n\n.text {\n    color: white;\n    font-family: Arial;\n    font-size: 16px;\n    padding: 15px;\n    text-align: center;\n}\n</style>\t\n</head>\n\n<body>\n\n<div class=\"container\">\n  <div class=\"text\">Hello World!</div>\n</div>\n\n</body>\n</html>", "category": "Python"}, {"instruction": "Reverse the following list of numbers.", "input": "[1, 2, 3, 4]", "output": "def reverse_list(nums):\n    return nums[::-1]\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4]\n    reversed_list = reverse_list(numbers)\n    print(reversed_list)", "category": "Python"}, {"instruction": "Write a function that takes a list of strings and counts the number of each string that contains the letter \"a\".", "input": "['foo', 'bar', 'baz']", "output": "def count_words_with_letter_a(arr):\n    count = 0\n    for s in arr:\n        if 'a' in s:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    words = ['foo', 'bar', 'baz']\n    count = count_words_with_letter_a(words)\n    print(count)", "category": "Python"}, {"instruction": "Create an example of data visualization using Python's matplotlib library.", "input": "", "output": "\"\"\"\nExample of data visualization using Python's matplotlib library\n\"\"\"  \nimport matplotlib.pyplot as plt\n\n#Create two datasets\nx_values = [1, 2, 3, 4, 5]\ny_values = [1, 4, 9, 16, 25]\n\n#Plot the data\nplt.plot(x_values, y_values)\n\n#Label the axes\nplt.xlabel('x values')\nplt.ylabel('y values')\n\n#Show the plot\nplt.show()", "category": "Python"}, {"instruction": "Write a JavaScript function to create an array with given size and filled with the characters given in second argument.", "input": "3, \"*\"", "output": "```\nfunction createArray(size, character) {\n    let arr = []; \n    for (let i = 0; i < size; i++) { \n        arr[i] = character; \n    } \n    return arr; \n};\n```", "category": "Python"}, {"instruction": "explain the meaning of the following line of code in terms a novice programmer can understand.", "input": "arr.sort(reverse=True)", "output": "This line of code will sort the array `arr` in descending order. That is, the array's elements will be arranged in a descending order, with the highest element at the first index, the second highest at the second index, and so on.", "category": "Python"}, {"instruction": "Explain different types of sorting algorithms in brief.", "input": "", "output": "There are several types of sorting algorithms which can be used to sort a list of items. The most common ones are Bubble Sort, Insertion Sort, Selection Sort, Quick Sort, Merge Sort and Heap Sort. \n\nBubble Sort works by repeatedly swapping adjacent elements if they are in the wrong order. Insertion Sort works by inserting elements one by one into the correct sorted position. Selection Sort works by repeatedly selecting the minimum (or maximum) element of the unsorted part and placing it at the beginning of the sorted part. Quick Sort works by selecting a pivot element and partitioning the array around the pivot in order to find the correct position of the pivot. Merge Sort works by dividing the array into two halves, sorting each half recursively, and then merging them back together. Heap Sort works by first creating a Max Heap from the list, and then continuously extracting the maximum element from the heap until the list is sorted.", "category": "Python"}, {"instruction": "Create a CSS stylesheet and include styles for basic elements such as headings, paragraphs, and links.", "input": "", "output": "h1 { \n  font-size: 2em; \n  color: #444; \n} \np { \n  font-size: 1em; \n  color: #666; \n} \n\na { \n  color: #069; \n  text-decoration: none; \n}", "category": "Python"}, {"instruction": "In JavaScript, construct a function that takes two string arguments and returns the concatenation of the two strings.", "input": "", "output": "function concatStrings(str1, str2) {\n  return str1 + str2;\n}", "category": "Python"}, {"instruction": "Write a SQL query to update the price of a product with ID 1023 to 5.", "input": "", "output": "UPDATE product \n   SET price = 5 \n WHERE id = 1023;", "category": "Python"}, {"instruction": "Write an algorithm in C that prints a string in reverse.", "input": "Hello", "output": "char str[] = \"Hello\";\nint len = strlen(str);\n\nfor (int i = len-1; i >= 0; i--) {\n  printf(\"%c\", str[i]);\n}", "category": "Python"}, {"instruction": "Create an Angular project and include the necessary dependencies for routing.", "input": "", "output": "ng new angular-project\ncd angular-project\nnpm install --save @angular/router", "category": "Python"}, {"instruction": "Write an algorithm in Java to reverse the words in a string.", "input": "The quick brown fox", "output": "String[] words = input.split(\"\\\\s\");\nString reversedString = \"\";\n \nfor (int i = words.length - 1; i >= 0; i--) \n{\n   reversedString += words[i] + \" \";\n}\n\nSystem.out.println(reversedString);", "category": "Python"}, {"instruction": "In Java, construct a data structure for storing employee information, including name, age, phone number, and address.", "input": "", "output": "public class Employee {\n    String name;\n    int age;\n    String phoneNumber;\n    String address;\n \n public Employee(String name, int age, String phoneNumber, String address) {\n    this.name = name;\n    this.age = age;\n    this.phoneNumber = phoneNumber;\n    this.address = address;\n }\n\n    // Getters and Setters\n....\n}", "category": "Python"}, {"instruction": "Parse and extract the dates from a given text.", "input": "The conference will be held on Wednesday, June 16th, 2021", "output": "import re\n\ntext = \"The conference will be held on Wednesday, June 16th, 2021\"\n\n# Extract dates\ndates = re.findall(r'\\d{1,2}[-/.]\\d{1,2}[-/.]\\d{2,4}',text) \n\n# Print the dates\nfor date in dates:\n    print(date)\n    \n# Output\n# 06/16/2021", "category": "Python"}, {"instruction": "Create a new class in Python that extends the existing class named 'Base'.", "input": "", "output": "Class NewClass (Base):\n  def __init__(self):\n    super().__init__()", "category": "Python"}, {"instruction": "Edit this HTML code to add a link element in the head of the page.", "input": "<html>\n  <head>\n    <title>Example page</title>\n  </head>\n  <body>\n  </body>\n</html>", "output": "<html>\n  <head>\n    <title>Example page</title>\n    <link href=\"style.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Solve this regular expression problem.", "input": "A string should start with a letter, contain only letters and numbers, and should be at least 8 characters in length.", "output": "/^[A-Za-z][A-Za-z0-9]{7,}$/", "category": "Python"}, {"instruction": "Represent the function y = 3x + 4 in JavaScript.", "input": "", "output": "y = 3*x + 4;", "category": "Python"}, {"instruction": "Name the coding language used for developing native apps for Android.", "input": "", "output": "Java", "category": "Python"}, {"instruction": "Create a pseudocode to solve the FizzBuzz problem.", "input": "", "output": "```\n#For numbers from 1 through 100\nfor i from 1 to 100:\n    #If the number is divisible by both 3 and 5\n    if i is divisible by 3 and 5:\n        #Print FizzBuzz\n        print \"FizzBuzz\"\n    #If the number is divisible only by 3\n    elif i is divisible by 3:\n        #Print Fizz\n        print \"Fizz\"\n    #If the number is divisible only by 5\n    elif i is divisible by 5:\n        #Print Buzz\n        print \"Buzz\"\n    #Otherwise\n    else: \n        #Print the number\n        print i\n```", "category": "Python"}, {"instruction": "Create a MySQL query to delete all the entries with the name \"John\" in the table \"users\".", "input": "", "output": "DELETE FROM users WHERE name=\"John\";", "category": "Python"}, {"instruction": "Create a code to validate an email address using Regular Expressions.", "input": "", "output": "```\nimport re\n\n#Function to validate an email\ndef is_valid_email(email):\n    regex = '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n    if (re.search(regex, email)):  \n        return True  \n    else:  \n        return False\n\n#Test the function\nif(is_valid_email(\"abc@gmail.com\")): \n    print(\"Valid Email\")  \nelse : \n    print(\"Invalid Email\") \n#Output: Valid Email\n```", "category": "Python"}, {"instruction": "Create an HTML form with two dropdowns to select from different countries and cities.", "input": "", "output": "<form action=\"\">\n  <label>Country:</label>\n  <select id=\"country\">\n    <option value=\"\">-- Select Country --</option>\n    <option value=\"us\">USA</option>\n    <option value=\"uk\">UK</option>\n  </select>\n  <label>City:</label>\n  <select id=\"city\">\n    <option value=\"\">-- Select City --</option>\n    <option value=\"ny\" class=\"us\">New York</option>\n    <option value=\"la\" class=\"us\">Los Angeles</option>\n    <option value=\"london\" class=\"uk\">London</option>\n    <option value=\"oxford\" class=\"uk\">Oxford</option>\n  </select>\n</form>\n\n<script>\n  const countrySelect = document.querySelector('#country');\n  const citySelect = document.querySelector('#city');\n\n  countrySelect.addEventListener('change', (e) => {\n    const selectedOption = e.target.value;\n    citySelect.innerHTML = '<option value=\"\">-- Select City --</option>';\n    document.querySelectorAll('.${selectedOption}').forEach((option) => {\n      citySelect.innerHTML += option.outerHTML;\n    });\n  });\n</script>", "category": "Python"}, {"instruction": "Inspect the given code and find any possible bugs.", "input": "def find_sum(lst):\n    \"\"\"Return the sum of a given list of numbers.\"\"\"\n    res = 0\n    for x in list:\n        res += x\n    return res", "output": "def find_sum(lst):\n    \"\"\"Return the sum of a given list of numbers.\"\"\"\n    res = 0\n    for x in lst:\n        res += x\n    return res # was missing, was iterating over list instead of lst.", "category": "Python"}, {"instruction": "Create a function in JavaScript that takes a string and a number as arguments, and returns a string with the first number of characters (specified by the number argument) replaced with the character '@'.", "input": "string = 'Hello World'\nnumber = 4", "output": "function replaceWithAt(str, num){\n  let replaceString = '';\n  let i = 0;\n  while (i < num) {\n    replaceString += '@';\n    i++;\n  } \n  return str.replace(str.substring(0, num), replaceString);\n}\n\nconsole.log(replaceWithAt(string, number));", "category": "Python"}, {"instruction": "Create a function in Python that takes two lists as arguments and returns a dictionary with elements of the first list as keys and elements of the second list as values.", "input": "list1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]", "output": "def zip_lists(list1, list2):\n  zipped_dict = {}\n  for k, v in zip(list1, list2):\n    zipped_dict[k] = v\n  return zipped_dict\n\nprint(zip_lists(list1, list2))", "category": "Python"}, {"instruction": "Implement a sorting algorithm to sort a given array of size 10.", "input": "array: [2, 3, 5, 7, 1, 4, 6, 9, 8, 0]", "output": "void sort(int array[], int arraySize) { \n    for (int i = 0; i < arraySize-1; i++)   \n        for (int j = 0; j < arraySize-i-1; j++)  \n            if (array[j] > array[j+1])  \n            { \n                int temp = array[j]; \n                array[j] = array[j+1]; \n                array[j+1] = temp; \n            } \n}", "category": "Python"}, {"instruction": "Design a simple calculator program using a switch statement.", "input": "", "output": "\"\"\"\nDesign a simple calculator program using a switch statement\n\"\"\"\n\ndef calculator(operator, x, y):\n    switch = {\n        '+': x + y,\n        '-': x - y,\n        '*': x * y,\n        '/': x / y\n    }\n    return switch.get(operator, \"Invalid operator\")\n\nif __name__ == \"__main__\":\n    print(calculator('+', 2, 3))\n    print(calculator('*', 4, 2))\n    print(calculator('/', 6, 3))\n    print(calculator('&', 8, 2))", "category": "Python"}, {"instruction": "Write a function that takes a sentence and returns the reversed version of that sentence.", "input": "Hello, world!", "output": "\"\"\"\nWrite a function that takes a sentence and returns the reversed version of that sentence\n\"\"\"\n\ndef reverse_sentence(sentence):\n    word_list = sentence.split()\n    reversed_str = \" \".join(word_list[::-1])\n    return reversed_str\n\nif __name__ == \"__main__\":\n    print(reverse_sentence(\"Hello, world!\"))", "category": "Python"}, {"instruction": "Create a class called \"Vector\" with x and y coordinates.", "input": "", "output": "\"\"\"\nCreate a class called \"Vector\" with x and y coordinates\n\"\"\"\nclass Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nif __name__ == \"__main__\":\n    v = Vector(2, 3)\n    print (v.x, v.y)", "category": "Python"}, {"instruction": "Given a string, print all its permutations.", "input": "british", "output": "\"\"\"\nGiven a string, print all its permutations\n\"\"\"\ndef permute(string):\n    if len(string) == 1:\n        return string\n    permutations = []\n    for i,c in enumerate(string):\n        for perm in permute(string[:i]+string[i+1:]):\n            permutations.append(c+perm)\n    return permutations\n\nif __name__ == \"__main__\":\n    print (permute(\"british\"))", "category": "Python"}, {"instruction": "Create an algorithm that takes two numbers a and b and returns the largest number.", "input": "a = 5, b = 6", "output": "\"\"\"\nAn algorithm that takes two numbers a and b and returns the largest number\n\"\"\"\n\ndef get_largest_number(a, b):\n    if (a > b):\n        return a\n    else:\n        return b\n    \nif __name__ == \"__main__\":\n    print (get_largest_number(5, 6))", "category": "Python"}, {"instruction": "Output an array with all the prime numbers between 2 and n.", "input": "6", "output": "[2, 3, 5]", "category": "Python"}, {"instruction": "Write a function that given a list of unique integers, returns the sum of the non-duplicated integer elements.", "input": "[1, 2, 2, 3, 4, 5, 6]", "output": "def sumNonDuplicates(arr):\n    sum = 0\n    for num in arr:\n        if arr.count(num) == 1:\n            sum += num\n    return sum", "category": "Python"}, {"instruction": "Write a SQL query to list the salary of all employees as a percentage of the salary of the highest paid employee.", "input": "", "output": "SELECT name, (salary / (SELECT MAX(salary) FROM employee)) * 100 AS salary_percentage\nFROM employee;", "category": "Python"}, {"instruction": "Automatically reformat the following code to be more readable:", "input": "for (int i=0;i<n;i++){int j=0;System.out.println(\"The value of j is: \"+j);", "output": "for (int i = 0; i < n; i++) {\n    int j = 0;\n    System.out.println(\"The value of j is: \" + j);\n}", "category": "Python"}, {"instruction": "Create a query that displays the employees who are completed more than 20 years in the company.", "input": "", "output": "SELECT * FROM employees WHERE years_in_company > 20;", "category": "Python"}, {"instruction": "Given an array containing integers, calculate the sum of the elements in each row and print the result.", "input": "[[1, 2, 3], [4, 5, 6]]", "output": "[6, 15]", "category": "Python"}, {"instruction": "Parse a string of words and output an array containing only the uppercase words.", "input": "\"I Love Coding\"", "output": "['I', 'LOVE', 'CODING']", "category": "Python"}, {"instruction": "Given an array, reverse the elements inside it so that the first element becomes the last and vice versa.", "input": "[1, 2, 3, 4]", "output": "[4, 3, 2, 1]", "category": "Python"}, {"instruction": "Output the word which has maximum frequency in a given string.", "input": "The sun has set and the moon has risen.", "output": "the", "category": "Python"}, {"instruction": "Generate HTML table with a given list of dictionaries.", "input": "[{'name': 'John', 'age': 20}, {'name': 'Alice', 'age': 22}]", "output": "<table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>John</td>\n    <td>20</td>\n  </tr>\n  <tr>\n    <td>Alice</td>\n    <td>22</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Design a function in Ruby to calculate the exponent of a given base and exponent.", "input": "", "output": "def exponent(base, exp)\n  result = 1\n  exp.times { result *= base }\n  result\nend", "category": "Python"}, {"instruction": "Format this list such that each element is in a new line.", "input": "list_of_numbers = [1,2, 3, 4, 5]", "output": "\"\"\"\nFormat this list such that each element is in a new line\n\"\"\"\n\nlist_of_numbers = [1,2, 3, 4, 5]\n\n# Format the list such that each element is in a new line\nfor num in list_of_numbers:\n    print(num)", "category": "Python"}, {"instruction": "Create a code to sort this list in a descending order", "input": "my_list = [1,9,3,5,7]", "output": "\"\"\"\nSort this list in a descending order\n\"\"\"\n\nmy_list = [1,9,3,5,7]\n\n# Sort the list in a descending order\nmy_list.sort(reverse=True)\nprint(my_list)", "category": "Python"}, {"instruction": "Modify the following Keras model to add one 1D convolutional layer before the last layer.", "input": "model = Sequential()\nmodel.add(Dense(64, activation='relu', input_dim=100))\nmodel.add(Dense(1, activation='sigmoid'))", "output": "model = Sequential()\nmodel.add(Dense(64, activation='relu', input_dim=100))\nmodel.add(Conv1D(32, 3))\nmodel.add(Dense(1, activation='sigmoid'))", "category": "Python"}, {"instruction": "Write a HTML form to take in two user inputs and display their sum.", "input": "", "output": "<html>\n  <body>\n    <form>\n      Enter Number 1: <input type=\"text\" name=\"num1\" /> <br />\n      Enter Number 2: <input type=\"text\" name=\"num2\" /> <br />\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n    <script>\n      function calculateSum() {\n        let num1 = document.forms[\"form\"][\"num1\"].value;\n        let num2 = document.forms[\"form\"][\"num2\"].value;\n        document.write(\"Sum of the two numbers is: \" + (num1 + num2));\n      }\n    </script>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Compile the following C++ code:\n\n#include <iostream>\nusing namespace std;\n\nint main() {\n  cout << \"Hello World!\";\n  return 0;\n}", "input": "", "output": "g++ -o [filename] [filename].cpp", "category": "Python"}, {"instruction": "Write a regular expression to match the following sentence: \"Mary had a little lamb\".", "input": "", "output": "/Mary\\s+had\\s+a\\s+little\\s+lamb/", "category": "Python"}, {"instruction": "Write a Python code snippet to generate a list of the first five powers of the number 2.", "input": "", "output": "[2**0, 2**1, 2**2, 2**3, 2**4]", "category": "Python"}, {"instruction": "Write a C++ code snippet to create an infinite loop.", "input": "", "output": "while (true) {\n  //infinite loop code here\n}", "category": "Python"}, {"instruction": "Compute the average of the following numbers: 45, 20, 15, 100, 75.", "input": "", "output": "54", "category": "Python"}, {"instruction": "Find the two elements in a given array that sums up to the target number.", "input": "[1, 8, 10, 12], target = 18", "output": "def two_sum_elements(arr, target):\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return [arr[i], arr[j]]\n    return None\n\nprint(two_sum_elements([1, 8, 10, 12], 18)) # Outputs: [8, 10]", "category": "Python"}, {"instruction": "Create a lambda function in Python that collects all the numbers between 0 and 10 that are divisible by 3.", "input": "", "output": "lambda x: [x for x in range(0, 11) if x % 3 == 0]", "category": "Python"}, {"instruction": "Count the length of this string.", "input": "my_string = 'Hello World!'", "output": "\"\"\"\nCount the length of this string\n\"\"\"\n\nmy_string = 'Hello World!'\n\n# Count the length of this string\nlength = len(my_string)\nprint(length)", "category": "Python"}, {"instruction": "Delete the last three elements from this list.", "input": "my_list = [1, 4, 6, 7, 6, 8, 9]", "output": "\"\"\"\nDelete the last three elements from this list\n\"\"\"\n\nmy_list = [1, 4, 6, 7, 6, 8, 9]\n\n# Delete the last three elements from this list\nmy_list = my_list[:-3]\nprint(my_list)", "category": "Python"}, {"instruction": "Extend the range from 25 to 35.", "input": "my_list = list(range(25))", "output": "\"\"\"\nExtend the range from 25 to 35\n\"\"\"\n\nmy_list = list(range(25, 36))\nprint(my_list)", "category": "Python"}, {"instruction": "Create a python dictionary consisting of the names of the seven dwarfs and a list of their ages.", "input": "", "output": "\"\"\"\nCreate a python dictionary consisting of the names of the seven dwarfs and a list of their ages\n\"\"\"\n\ndwarfs = {\"Doc\": 84, \n          \"Grumpy\": 67,\n          \"Happy\": 76,\n          \"Sleepy\": 75,\n          \"Sneezy\": 71,\n          \"Dopey\": 76,\n          \"Bashful\": 70}\nprint(dwarfs)", "category": "Python"}, {"instruction": "Change the value of the second element of this list to 'cricket'.", "input": "sports_list = ['soccer', 'rugby', 'hockey']", "output": "\"\"\"\nChange the value of the second element of this list to 'cricket'\n\"\"\"\n\nsports_list = ['soccer', 'rugby', 'hockey']\n\n# Change the value of the second element of this list to 'cricket'\nsports_list[1] = 'cricket'\nprint(sports_list)", "category": "Python"}, {"instruction": "Add 'excellent' as the last element in this list.", "input": "sports_list = ['soccer', 'rugby', 'hockey']", "output": "\"\"\"\nAdd 'excellent' as the last element in this list\n\"\"\"\n\nsports_list = ['soccer', 'rugby', 'hockey']\n\n# Add 'excellent' as the last element in this list\nsports_list.append('excellent')\nprint(sports_list)", "category": "Python"}, {"instruction": "Calculate the sum of the elements in this list.", "input": "my_list = [2,5,4,7,5]", "output": "\"\"\"\nCalculate the sum of the elements in this list\n\"\"\"\n\nmy_list = [2,5,4,7,5]\n\n# Calculate the sum of the elements in this list\ntotal = 0\nfor num in my_list:\n    total += num\n\nprint(total)", "category": "Python"}, {"instruction": "Classify the following statement as an example of a Boolean expression: \"2 * 3 - 5 > 11\".", "input": "2 * 3 - 5 > 11", "output": "True", "category": "Python"}, {"instruction": "Write a JavaScript function that takes a string as an argument and produces a new string with the duplicated characters removed.", "input": "", "output": "function removeDuplicates(str) {\n    let result = '';\n    let seen = new Set();\n\n    for (let char of str) {\n        if (!seen.has(char)) {\n            seen.add(char);\n            result += char;\n        }\n    }\n\n    return result;\n}", "category": "Python"}, {"instruction": "Create a program to convert a bi-dimensional array into a single array.", "input": "[[1, 2], [3, 4]]", "output": "def flatten_array(array):\nresult = []\nfor sub_array in array:\n    result.extend(sub_array)\nreturn result\n\nprint(flatten_array([[1, 2], [3, 4]])) # Outputs: [1,2,3,4]", "category": "Python"}, {"instruction": "Create a regular expression to match the pattern of a 4-digit credit card number such as '1234 5678 9012 3456'.", "input": "", "output": "import re\npattern = re.compile(r'^[0-9]{4}\\s[0-9]{4}\\s[0-9]{4}\\s[0-9]{4}$')", "category": "Python"}, {"instruction": "Create a bash script to create a folder with a given name", "input": "folder_name = my_folder", "output": "#!/bin/bash\n\nfolder_name=\"my_folder\"\nmkdir $folder_name", "category": "Python"}, {"instruction": "Write a Ruby function that takes an array as input and returns a new array with only unique elements", "input": "[1, 2, 2, 3, 4, 5]", "output": "def uniq_array(arr)\n  return arr.uniq \nend", "category": "Python"}, {"instruction": "Write a regular expression in JavaScript to check the validity of an email.", "input": "", "output": "/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/", "category": "Python"}, {"instruction": "Correct the following C++ code by adding missing syntax.", "input": "int a;\nif (a == 0", "output": "int a;\nif (a == 0) {\n\n}", "category": "Python"}, {"instruction": "Create a machine learning model in Python to predict the total surface area of a cube given its side length", "input": "side_length = 3", "output": "import numpy as np\nfrom sklearn.linear_model import LinearRegression \n\n# Data\nX_train = np.array([1, 2, 3, 4, 5]).reshape(-1, 1)\ny_train = np.array([6, 12, 18, 24, 30])\n\n# Model \nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Prediction\nside_length = 3 \npred = model.predict([[side_length]])\nprint('The surface area for a cube with side length %.2f is %.2f' % (side_length, pred[0]))", "category": "Python"}, {"instruction": "Write a sql query that takes the maximum of a particular column", "input": "Table: employees\nColumns: name, salary", "output": "SELECT MAX(salary) FROM employees;", "category": "Python"}, {"instruction": "Create a bash script that generates a random 3 letter string with no duplicates in it.", "input": "", "output": "#!/bin/bash\nTMP_STR=\"\"\n\nfor i in {1..3}\ndo\n  RANDOM_NUM=$((RANDOM % 26 + 65))\n  CHAR=$(printf \"\\x$(printf %x $RANDOM_NUM)\")\n  while [[ $TMP_STR =~ $CHAR ]]\n  do\n    RANDOM_NUM=$((RANDOM % 26 + 65))\n    CHAR=$(printf \"\\x$(printf %x $RANDOM_NUM)\")\n  done\n  TMP_STR+=$CHAR\ndone\necho $TMP_STR", "category": "Python"}, {"instruction": "Write an SQL query that calculates the total order value for each delivery zone in the \u2018zones\u2019 table.", "input": "", "output": "SELECT zone, SUM(price*quantity) AS 'Total Order Value' \nFROM orders JOIN zones ON orders.zone_id = zones.zone_id\nGROUP BY zone;", "category": "Python"}, {"instruction": "Write a SQL query that finds the average of a given table's \"Salary\" column.", "input": "", "output": "SELECT AVG(Salary) FROM Employees;", "category": "Python"}, {"instruction": "Create a code that creates a 3D array of size 4x4x4.", "input": "", "output": "int[][][] array3D = new int[4][4][4];", "category": "Python"}, {"instruction": "Given an array with negative and positive numbers, create a function to find the smallest positive number inside the array.", "input": "int[] array = {-3, -2, -1, 1, 2, 3, 4};", "output": "int smallestPositive = Integer.MAX_VALUE;\nfor (int i = 0; i < array.length; i++) {\n if (array[i] > 0 && array[i] < smallestPositive) {\n  smallestPositive = array[i];\n }\n}\nSystem.out.println(smallestPositive);", "category": "Python"}, {"instruction": "Recreate a function that sorts the elements of an array using bubble sort.", "input": "int[] array = {4, 3, 6, 5, 1, 2};", "output": "void bubbleSort(int array[]) {\n int temp;\n for(int i = 0; i < array.length; i++) {\n  for(int j = 0; j < array.length - 1; j++) {\n   if(array[j] > array[j+1]) {\n    temp = array[j];\n    array[j] = array[j+1];\n    array[j+1] = temp;\n   }\n  }\n }\n}", "category": "Python"}, {"instruction": "Create a program that takes two inputs, an array of strings and an array of integers. Output an array with the strings at the same indices as the integers.", "input": "String[] strings = {\"cat\", \"dog\", \"bird\", \"fish\"};\n    int[] indices = {1, 0, 3, 2};", "output": "String[] output = new String[4];\nfor(int i = 0; i < strings.length; i++) {\n output[indices[i]] = strings[i];\n}\nSystem.out.println(Arrays.toString(output));", "category": "Python"}, {"instruction": "Create a DynamoDB table called \"Users\" with a primary key as \"UserID\".", "input": "", "output": "aws dynamodb create-table --table-name Users --attribute-definitions \nAttributeName=UserID,AttributeType=S \n--key-schema AttributeName=UserID,KeyType=HASH \n--provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5", "category": "Python"}, {"instruction": "Write a regular expression to match a 4 digit zip code.", "input": "", "output": "import re\n\n# Zip code should consist of four digits.\nzip_code_regex = re.compile(r'\\d{4}')", "category": "Python"}, {"instruction": "Create a HTML page that takes two text strings as inputs and outputs the longest one.", "input": "", "output": "<html>\n  <head>\n    <title>Input and Compare Strings</title>\n  </head>\n  <body>\n    Enter two strings:\n    <input type=\"text\" id=\"str1\" />\n    <input type=\"text\" id=\"str2\" />\n    <input type=\"button\" value=\"Submit\" onclick=\"compareStrings()\" />\n    <div id=\"result\"/>\n    <script>\n      function compareStrings() {\n          let str1 = document.getElementById(\"str1\").value;\n          let str2 = document.getElementById(\"str2\").value;\n          let longest = (str1.length > str2.length) ? str1 : str2; \n          document.getElementById(\"result\").innerHTML = \"The longest string is: \" + longest;\n      }\n   </script>\n  </body>\n</html>", "category": "Python"}, {"instruction": "In Java, write a program that prints a certain phrase five times.", "input": "", "output": "public class PrintPhrase {\n    public static void main(String[] args) {\n        for (int i = 0; i < 5; i++) {\n            System.out.println(\"Hello world!\");\n        }\n    }\n}", "category": "Python"}, {"instruction": "Produce a regex pattern to validate a US phone number format", "input": "", "output": "^\\s*(?:\\+?(\\d{1,3}))?[-. (]*(\\d{3})[-. )]*(\\d{3})[-. ]*(\\d{4})(?: *x(\\d+))?\\s*$", "category": "Python"}, {"instruction": "Write a JavaScript statement to extract the last four characters from the string", "input": "This is a sample string.", "output": "var lastFour = myString.slice(-4);", "category": "Python"}, {"instruction": "You are given a matrix. Construct a for loop to check if any of the elements in the matrix is 0.", "input": "matrix = [[1,2,3],[4,0,6],[7,8,9]]", "output": "def check_zero(matrix):\n    for row in matrix:\n        for num in row:\n            if num == 0:\n                return True\n    return False\n\nprint(check_zero(matrix))", "category": "Python"}, {"instruction": "Create a function to convert a given word to title case.", "input": "", "output": "def to_title_case(word):\n    return word[0].upper() + word[1:].lower()", "category": "Python"}, {"instruction": "Write a RegEx to match all numeric strings that start with 6 and contain 4 characters.", "input": "", "output": "^6\\d{3}$", "category": "Python"}, {"instruction": "Initialize a list of length n using an input n.", "input": "n = 10", "output": "my_list = [0] * n\nprint(my_list)", "category": "Python"}, {"instruction": "Create a script to transpose a matrix.", "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]]", "output": "def transpose_matrix(matrix):\n    transposedMatrix = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0])) ]\n    return transposedMatrix\n\ntransposedMatrix = transpose_matrix(matrix)\nprint(transposedMatrix)", "category": "Python"}, {"instruction": "Generate a random password that complies with certain conditions.", "input": "", "output": "import random\nimport string\n\ndef generate_password(length):\n    password = ''.join(random.choice(string.ascii_letters + string.digits) for i in range(length))\n    if any(char.islower() for char in password) and any(char.isupper() for char in password) and any(char.isdigit() for char in password):\n        return password\n\ngenerated_password = generate_password(8)\nprint(generated_password)", "category": "Python"}, {"instruction": "Reverse the words of a given sentence but keep the order of the words intact.", "input": "I am a programmer", "output": "def reverse_words(sentence):\n    words = sentence.split(' ')\n    reversed_words = [word[::-1] for word in words]\n    return ' '.join(reversed_words)\n\nprint(reverse_words('I am a programmer')) # Outputs: \"I ma a remmargorp\"", "category": "Python"}, {"instruction": "With a Java program, convert a string to all lowercase letters.", "input": "myString = \"HeLlO WoRlD\"", "output": "String lowerString = myString.toLowerCase(); \nSystem.out.println(lowerString); // Outputs \"hello world\"", "category": "Python"}, {"instruction": "With a PHP script, compare two numerical values and return the largest of the two.", "input": "$x = 9;\n$y = 12;", "output": "if ($x > $y) \n    echo $x;\nelse\n    echo $y;", "category": "Python"}, {"instruction": "Create a function in Python that takes one parameter, a list, and outputs the list in reverse.", "input": "myList = [1, 2, 3, 4]", "output": "def reverseList (list): \n  list.reverse() \n  return list\n  \nreverseList(myList) # Returns [4, 3, 2, 1]", "category": "Python"}, {"instruction": "Create a function to classify the following sentence into \"positive\" or \"negative\".", "input": "The movie was bad", "output": "def classify_sentence(sentence):\n  if \"bad\" in sentence:\n    return \"negative\"\n  else:\n    return \"positive\"\n\n# Driver code\nsentence = \"The movie was bad\"\nprint(\"Sentence is classified as:\", classify_sentence(sentence))\n\nOutput: Sentence is classified as: negative", "category": "Python"}, {"instruction": "Print the character at the specified index in a given string.", "input": "s = \"Hello World!\"\nindex = 5", "output": "s = \"Hello World!\"\nindex = 5\n\nprint(\"Character at index\", index, \"is:\", s[index])\n\nOutput: Character at index 5 is: W", "category": "Python"}, {"instruction": "Edit this code to fix the bug in the program", "input": "def print_longest_word(words):\n longest_word = \"\"\n for word in words:\n if len(word) > len(longest_word):\n longest_word = word\n print(longest_word)\nwords = [\"hello\", \"cat\"]\nprint_longest_word(words)", "output": "def print_longest_word(words):\n longest_word = \"\"\n for word in words:\n if len(word) > len(longest_word):\n longest_word = word\n print(longest_word)\nwords = [\"hello\", \"cat\"]\nprint_longest_word(words)\n\nif len(words) > 0:\n longest_word = words[0]\n for word in words:\n if len(word) > len(longest_word):\n longest_word = word\n print(longest_word)", "category": "Python"}, {"instruction": "Write a SQL query to generate a table that contains the number of customers per county", "input": "", "output": "SELECT county, COUNT(*) AS 'Number of Customers'\nFROM Customers\nGROUP BY county;", "category": "Python"}, {"instruction": "Compose an R expression to determine the median of a vector", "input": "", "output": "median(x)", "category": "Python"}, {"instruction": "Write a MySQL query to select all the products that have a price greater than 10.", "input": "", "output": "SELECT * FROM products WHERE price > 10;", "category": "Python"}, {"instruction": "Create a JavaScript dictionary object using the following data.", "input": "apple: red\norange: orange\nbanana: yellow", "output": "const fruits = {\n    apple: 'red',\n    orange: 'orange',\n    banana: 'yellow'\n};", "category": "Python"}, {"instruction": "Create an HTML form with two input fields to take two numbers and a submit button to submit the form.", "input": "", "output": "<form>\n  <input type=\"number\" name=\"num1\">\n  <input type=\"number\" name=\"num2\">\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Write a regular expression to match a string that contains the word \"Hello\" at the start of the string.", "input": "", "output": "^Hello.*", "category": "Python"}, {"instruction": "How would you define a class in Python to represent a college student?", "input": "", "output": "class CollegeStudent:\n    def __init__(self, name, year, major):\n        self.name=name\n        self.year=year\n        self.major=major\n        \n    def get_name(self): \n       return self.name \n   \n    def get_year(self): \n       return self.year \n       \n    def get_major(self): \n       return self.major", "category": "Python"}, {"instruction": "Use Tensorflow to classify a given input dataset of animals as cats or dogs.", "input": "Input dataset contains images of cats and dogs.", "output": "import tensorflow as tf \n#get the dataset\ndataset = load_dataset()\n\n# create the input pipeline\niterator = dataset.make_initializable_iterator()\nnext_element = iterator.get_next()\n\n#build the model\nmodel=Sequential()\n#input layer\nmodel.add(Conv2D(32,(3,3), activation='relu',input_shape=(input_width,input_height,input_channels)))\n#max pooling\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n#flatten\nmodel.add(Flatten)\n#hidden layer\nmodel.add(Dense(64,activation='relu'))\n#output layer\nmodel.add(Dense(2,activation='sigmoid'))\n\n#train model\nmodel.compile(optimizer='SGD', Loss=\"binary_crossentropy\",metrics=['accuracy'])\nmodel.fit(dataset,epochs=5)", "category": "Python"}, {"instruction": "Create a method in Java that takes in a string and prints its contents in reverse.", "input": "String s= \"Hello World!\"", "output": "public class ReverseString {\npublic void printReverseString(String s) {\n for(int i= s.length()-1; i>=0; i--) {\n char c = s.charAt(i);\n System.out.print(c);\n }\n System.out.println();\n }\n}", "category": "Python"}, {"instruction": "Extract the first 3 characters of an input string using Python.", "input": "String = \"Hello World!\"", "output": "string = \"Hello World!\"\n\n#Extract first 3 characters \nfirst_3_characters = string[0:3]\n\nprint(first_3_characters)", "category": "Python"}, {"instruction": "Make a Swift program to print out the first three characters of a given string.", "input": "String word = \"Hello\";", "output": "import Foundation\n\nlet word = \"Hello\"\nlet characters = word.prefix(3)\nprint(characters)", "category": "Python"}, {"instruction": "Implement a function in Python that calculates the median of a given input array.", "input": "[5, 2, 6, 8, 10]", "output": "def calculateMedian(arr):\n    n = len(arr)\n    arr.sort()\n \n    if n % 2 == 0:\n        median1 = arr[n//2]\n        median2 = arr[n//2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = arr[n // 2]\n \n    return median\n \nprint(\"Median is: \" + str(calculateMedian([5, 2, 6, 8, 10])))", "category": "Python"}, {"instruction": "Create an Android application with an activity that displays a string \"Welcome to Android\".", "input": "", "output": "package com.example.welcome;\n\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.widget.TextView;\n\npublic class MainActivity extends AppCompatActivity {\n\n@override\nprotected void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.activity_main);\n\nTextView textView = findViewById(R.id.textView);\ntextView.setText(\"Welcome to Android!\");\n}\n}", "category": "Python"}, {"instruction": "Write a query in SQL to find all records where the value of a field is greater than 50.", "input": "", "output": "SELECT * FROM <table_name> WHERE <column_name> > 50;", "category": "Python"}, {"instruction": "Write a query in MySQL to find all records in a table, sorted by a column in descending order.", "input": "", "output": "SELECT * FROM <table_name> ORDER BY <column_name> DESC;", "category": "Python"}, {"instruction": "Format the following HTML tags correctly.", "input": "<html><head> <title>hello world</title></head></html>", "output": "<html>\n  <head>\n    <title>Hello World</title>\n  </head>\n</html>", "category": "Python"}, {"instruction": "Write a query in SQL to display all records from the 'Users' table.", "input": "", "output": "SELECT * FROM Users;", "category": "Python"}, {"instruction": "Write a JavaScript program that given an array of integers, prints the maximum and minimum value of the array.", "input": "numbers = [2, 3, 6, 9, 5]", "output": "// Code in JavaScript\n\nconst numbers = [2, 3, 6, 9, 5];\nlet max = numbers[0];\nlet min = numbers[0];\n\nfor(let i=0; i<numbers.length; i++){\n    if(numbers[i] > max){\n        max = numbers[i];\n    }\n    if(numbers[i] < min){\n        min = numbers[i];\n    }\n}\n \nconsole.log('Max value is', max);\nconsole.log('Min value is', min);", "category": "Python"}, {"instruction": "Build a web application that allows users to search for recipes based on ingredients.", "input": "", "output": "# Set up the project using a web framework such as Flask\n# Import necessary libraries such as Pandas, Numpy and SQLite\n# Create database and import recipe dataset\n# Create the user interface\n# Set up routes\n# Create a search form\n# Execute a SQL query to access the recipes that match the search query\n# Display the recipe results\n# Add pagination\n# Add sorting options", "category": "Python"}, {"instruction": "Given a list of words, write a Python function to print the frequency of occurrence of each word in the list.", "input": "['foo', 'bar', 'foo', 'baz', 'bar']", "output": "def word_frequency(words):\n    freq = {}\n    for word in words:\n        if word not in freq:\n            freq[word] = 0\n        freq[word] += 1    \n    for word, count in freq.items():\n        print('{}: {}'.format(word, count))\n        \nword_frequency(['foo', 'bar', 'foo', 'baz', 'bar'])", "category": "Python"}, {"instruction": "Design an API to pull company data from an external source.", "input": "", "output": "\"\"\"\nAPI to pull company data from an external source.\n\nParameters:\n1. company_id: Unique id of the company\n2. fields: List of strings of fields to include in the response\n\nReturns:\nA JSON containing the specified fields from the external source.\n\"\"\"\n\ndef get_company_data(company_id, fields):\n    # use an external API to fetch the data\n    response = requests.get(f\"http://example.com/api/company?id={company_id}\")\n    data = response.json()\n    response_data = {}\n    for field in fields:\n        response_data[field] = data[field]\n    return response_data", "category": "Python"}, {"instruction": "Update the following code so that it prints the numbers from 0-9 instead of 0-8.", "input": "for i in range(8):\n    print(i)", "output": "for i in range(10):\n    print(i)", "category": "Python"}, {"instruction": "Develop a Python function to calculate a Fibonacci number based on a given index.", "input": "", "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n        \n    elif n==1: \n        return 0\n    \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)", "category": "Python"}, {"instruction": "In the given JavaScript class, add a method to calculate the area of a square.", "input": "class Square {\n    constructor(length) {\n        this.length = length;\n    }\n}", "output": "class Square {\n    constructor(length) {\n        this.length = length;\n    }\n\n    calcArea() {\n        return this.length * this.length;\n    }\n}", "category": "Python"}, {"instruction": "Suppose you have a dictionary containing the records of some student marks. Write a Python program to calculate the average marks of all the students.", "input": "student_mark_dict = {\n    'John': [50, 70, 60],\n    'Harry': [20, 60, 80],\n    'Tom': [90, 70, 80] \n}", "output": "def averageMarks(student_mark_dict):\n    total = 0\n    total_marks = 0\n    for key, value in student_mark_dict.items():\n        total += sum(value)\n        total_marks += len(value)\n        \n    return total/total_marks", "category": "Python"}, {"instruction": "Create a function in PHP that takes an array of strings as an argument and returns an array containing only the strings with at least 3 characters.", "input": "array = ['hi', 'hello', 'world']", "output": "function filter_short_words($words) {\n  $filtered = array();\n  foreach($words as $word) {\n    if (strlen($word) >= 3) {\n      array_push($filtered, $word);\n    }\n  }\n  return $filtered;\n}", "category": "Python"}, {"instruction": "Write a query in SQL to find the total number of people who currently work in the software engineering department.", "input": "", "output": "SELECT COUNT(*) \nFROM Employees \nWHERE Department = 'Software Engineering';", "category": "Python"}, {"instruction": "Write a JavaScript code to loop over all elements in a given array.", "input": "arr = [1,2,3]", "output": "for (let i = 0; i < arr.length; i++) {\n    console.log(arr[i]);\n}", "category": "Python"}, {"instruction": "Update the following code to sum the elements in a given list", "input": "list = [1,3,4,5]", "output": "sum = 0\nfor elem in list:\n    sum += elem", "category": "Python"}, {"instruction": "What language is the following code written in?", "input": "for (i=0; i<n; i++)", "output": "C or C++", "category": "Python"}, {"instruction": "Parse the following list of names into separate strings.", "input": "names = [\"John Smith\", \"Alice Bryant\", \"Bob Johnson\", \"Harry Evans\"]", "output": "for name in names:\n    first_name, last_name = name.split(' ')\n    print('First name: {} ; Last name: {}'.format(first_name, last_name))\n\n# Output\nFirst name: John ; Last name: Smith\nFirst name: Alice ; Last name: Bryant\nFirst name: Bob ; Last name: Johnson\nFirst name: Harry ; Last name: Evans", "category": "Python"}, {"instruction": "Add the missing parentheses and brackets for the for loop.", "input": "for x range(0, 5):\nprint(x)", "output": "for x in range(0, 5):\n    print(x)", "category": "Python"}, {"instruction": "Edit this code to add a try-except block to catch any errors.", "input": "def repeat(string, repeats): \n    for i in range(repeats): \n        print(string) \n \nrepeat(\"Hello World!\", 5)", "output": "def repeat(string, repeats): \n    try:\n        for i in range(repeats): \n            print(string)\n    except:\n        print(\"Error occured\")\n \nrepeat(\"Hello World!\", 5)", "category": "Python"}, {"instruction": "Convert the following code from imperative style to functional style.", "input": "list = [1,2,3,4,5]\nfor x in list:\n    if x % 2 == 0:\n        print(x)", "output": "list = [1,2,3,4,5]\nevens = list(filter(lambda x: x % 2 == 0, list))\nprint(evens)", "category": "Python"}, {"instruction": "Rewrite the following function as a lambda function.", "input": "def fahrenheit(T):\n    return ((float(9)/5)*T + 32)", "output": "fahrenheit = lambda T : ( ( float(9) / 5 )*T + 32 )", "category": "Python"}, {"instruction": "Given a string, develop a function to find out how many words are present in it.", "input": "string = 'Hello world!'", "output": "def countWords(string):\n    return len(string.split())", "category": "Python"}, {"instruction": "Develop a CSS selector to display all divs.", "input": "", "output": "div {\n    display: block;\n}", "category": "Python"}, {"instruction": "A given array contains the numbers 1, 5, 9 and 13. Write a function to find out if 15 is present in the array or not.", "input": "array = [1, 5, 9, 13]", "output": "def findNumber(array):\n    return 15 in array", "category": "Python"}, {"instruction": "What data type does the following variable belong to: 500?", "input": "", "output": "integer", "category": "Python"}, {"instruction": "Develop a function in Python to delete the duplicates of a given string.", "input": "string = 'Hello World!'", "output": "def deleteDuplicates(string):\n    unique_string = ''\n    for i in string:\n        if i not in unique_string:\n            unique_string += i\n    return unique_string", "category": "Python"}, {"instruction": "Add a method in JavaScript for an object to find the sum of all its elements.", "input": "class MyObject {\n    constructor(elements) {\n      this.elements = elements;\n    }\n}", "output": "class MyObject {\n    constructor(elements) {\n      this.elements = elements;\n    }\n    \n    sumElements() {\n        let sum = 0;\n        this.elements.forEach(element => {\n            sum += element;\n        });\n        return sum;\n    }\n}", "category": "Python"}, {"instruction": "Explain the use of a for loop in programming and when you would use it.", "input": "", "output": "A for loop is a type of loop used in programming to execute a set of code multiple times. For loops use an iterable object to iterate over a sequence of statements, such as a list or a string. For loops are typically used to traverse through a sequence of elements, perform a set of calculations or operations on each element, and once the operations are complete, move on to the next element until the list has been exhausted. For loops can also be used to execute a set of statements a certain number of times, or while a certain condition is true. One example would be iterating through a list of numbers and printing their sum to the console. Another example would be running a loop until a certain value is reached or exceeded, such as in calculating the factorial of a number.", "category": "Python"}, {"instruction": "Create a function to convert a given quantiy of money from one currency to another.", "input": "amount: 10\nfrom_currency: USD\nto_currency: GBP", "output": "def convert_currency(amount, from_currency, to_currency):\n    # use a free online currency conversion API like Fixer\n    # to convert an amount from one currency to another\n    response = requests.get(f\"http://data.fixer.io/api/convert?access_key=<your_key>&from={from_currency}&to={to_currency}&amount={amount}\")\n    return response.json()[\"result\"]", "category": "Python"}, {"instruction": "Write a SQL query that returns all records from the \"customer\" table sorted by first name.", "input": "", "output": "SELECT * FROM customer ORDER BY first_name;", "category": "Python"}, {"instruction": "Create a new branch of the current project on Github.", "input": "", "output": "git checkout -b <new_branch_name>", "category": "Python"}, {"instruction": "Generate a Python code to calculate the compound interest.", "input": "Principal = 2000 \nRate of Interest = 0.09 \nTime = 5", "output": "# Python program to calculate compound interest \n\ndef compound_interest(principal, rate, time): \n\n    # Calculates compound interest \n    CI = principal * (pow((1 + rate / 100), time)) \n\n    print(\"Compound interest is\", CI) \n\n# Driver Code \ncompound_interest(2000, 0.09, 5)", "category": "Python"}, {"instruction": "Construct an SQL query to select the total number of employees in the table 'Employees'.", "input": "", "output": "SELECT COUNT(*) FROM Employees;", "category": "Python"}, {"instruction": "Create an algorithm for counting the occurences of a specific character in a string.", "input": "String: \"GPT Learning\"\nCharacter: \"t\"", "output": "//Declare a variable to store the count \nint count = 0\n\n//Loop through the string\nfor i = 0 to (string length) { \n\n   //Check if the character matches the given one \n   if string[i] == character{ \n       //Increment the count \n       count++ \n   } \n\n} \n\n//Print out the count \nprint(count)", "category": "Python"}, {"instruction": "Generate pseudocode for a program that takes in an integer and prints out all the factors of the given integer.", "input": "int num = 18", "output": "//Pseudocode \n \n//Function to obtain the factors of given input\nfunction obtainFactors(int num){ \n\n //Variable to store the factors \n List factors = [] \n\n //Loop through all number less than the given input \n for i = 1 to num { \n\n    //Check if a particular number is a factor of the given input \n    if num % i == 0 { \n\n       //Add the number to the list of factors \n       factors.add(i) \n    } \n } \n \n //Print out the list of factors \n print(factors) \n}", "category": "Python"}, {"instruction": "Write a C++ program that displays the following text.", "input": "", "output": "#include<iostream>\n\nint main(){ \n  std::cout << \"Hello GPT Community!\"<< std::endl;\n  return 0;\n}", "category": "Python"}, {"instruction": "Generate a random string containing 10 lowercase alphabets using JavaScript.", "input": "", "output": "let randomString = '';\nfor (let i=0;i<10;i++) {\n  randomString += String.fromCharCode(Math.floor(Math.random() * (122 - 97 + 1)) + 97);\n}\nconsole.log(randomString);", "category": "Python"}, {"instruction": "Using MapReduce, calculate the average age of the users in a given dataset.", "input": "", "output": "map(key, value)\n{\n  age = value.age\n  emit(null, age)\n}\n\nreduce(key, values)\n{\n  total = 0\n  count = 0\n  foreach (value in values)\n  {\n    total = total + value\n    count = count + 1\n  }\n  avg_age = total/count\n  emit(null, avg_age)\n}", "category": "Python"}, {"instruction": "Construct an SQL query to delete all records from the table 'Employees' with a given salary.", "input": "Salary = 1100", "output": "DELETE FROM Employees WHERE salary = 1100;", "category": "Python"}, {"instruction": "Write a MySQL query to find the names of all the students who took both math and science classes.", "input": "", "output": "SELECT students.name\nFROM students\nWHERE EXISTS (\n  SELECT 1 FROM classes\n  WHERE classes.student_id = students.id\n  AND classes.subject IN ('math','science')\n  GROUP BY classes.student_id\n  HAVING COUNT(DISTINCT classes.subject) = 2\n);", "category": "Python"}, {"instruction": "Use CSS to create a dark mode version of the following website.", "input": "Link to a website: https://example.com", "output": "body {\n  background-color: #2d2d2d;\n  color: #ffffff;\n}\n\n// Set the typeface\nbody {\n  font-family: \"Open Sans\", Helvetica, sans-serif;\n}\n\n// Create the dark mode toggle switch\n.dark-mode-toggle{\n  margin-left: 10px;\n}\n\n// Create a dark background for all elements\n * {\n  background-color: #2d2d2d;\n}\n\n// Change the link color\na {\n  color: #38a9ff;\n}\n\n// Change the button color\nbutton {\n  background-color: #38a9ff;\n  border-radius: 10px;\n  color: #2d2d2d;\n}", "category": "Python"}, {"instruction": "What is the maximum length of a URL as defined in RFC 2396?", "input": "", "output": "According to RFC 2396, the maximum length of a URL is 2048 characters.", "category": "Python"}, {"instruction": "Automate calculations in Excel by writing a VBA program to calculate the sum of two columns.", "input": "", "output": "Sub columns_sum()\n  Dim cell As Range\n  Dim first_sum As Integer, second_sum As Integer\n \n  For Each cell In Range(\"A1:A5\")\n    first_sum = first_sum + cell.Value\n  Next cell\n \n  For Each cell In Range(\"B1:B5\")\n    second_sum = second_sum + cell.Value\n  Next cell\n \n  Range(\"D3\").Value = first_sum + second_sum\n \nEnd Sub", "category": "Python"}, {"instruction": "Write a web scraper using BeautifulSoup to extract a list of tweets from a site.", "input": "Target site: https://twitter.com/", "output": "import requests\nfrom bs4 import BeautifulSoup\n\nwebsite_url = requests.get('https://twitter.com/').text\n\nsoup = BeautifulSoup(website_url,'html.parser')\n\ntweets_list = []\nfor tweet in soup.findAll('div',{'class':'tweet'}):\n    text = tweet.find('p',{'class':'tweet-text'}).text\n    tweets_list.append(text)\n\nprint(tweets_list)", "category": "Python"}, {"instruction": "Implement a function, sumOfSquares, that takes two integers and calculates the sum of their squares.", "input": "", "output": "def sumOfSquares(num1, num2):\n    return num1**2 + num2**2", "category": "Python"}, {"instruction": "Using GraphQL, write a query to get name, age and address of all instructors in a training center.", "input": "", "output": "query {\n  instructors {\n    name\n    age\n    address\n  }\n}", "category": "Python"}, {"instruction": "Create a function to take two integers and return the larger one.", "input": "", "output": "def larger(num1, num2):\n    \"\"\"Takes two integers and returns the larger one.\n\n    Args:\n        num1 (int): The first integer.\n        num2 (int): The second integer.\n\n    Returns:\n        int: The larger of the two given integers.\n    \"\"\"\n    return max(num1, num2)", "category": "Python"}, {"instruction": "Update the following JSON array to increment the \"age\" value of every user by 5 years.", "input": "[\n  {\n    \"name\": \"Alice\",\n    \"age\": 25\n  },\n  {\n    \"name\": \"Bob\",\n    \"age\": 30\n  }\n]", "output": "[\n  {\n    \"name\": \"Alice\",\n    \"age\": 30\n  },\n  {\n    \"name\": \"Bob\",\n    \"age\": 35\n  }\n]", "category": "Python"}, {"instruction": "Suggest a function to convert a given tuple of strings into a dictionary.", "input": "", "output": "def tuple_to_dict(tup):\n    return {tup[i] : tup[i+1] for i in range(0, len(tup), 2)}", "category": "Python"}, {"instruction": "Develop a Java program that prints all the leap years up to a given year.", "input": "Year = 2020", "output": "public class LeapYear {  \n    public static void main(String[] args) {  \n      \n\t      int year = 2020;  \n\t\n        System.out.println(\"Leap years up to \"+year+\" are :\");     \n        for (int i = 1; i <= year; i++) {  \n            if (i % 4 == 0) {  \n                if (i % 100 == 0) {  \n                    if (i % 400 == 0) {  \n                        System.out.print(i + \" \");  \n                    }  \n                } else {  \n                    System.out.print(i + \" \");  \n                }  \n            }  \n        }  \n    }  \n}", "category": "Python"}, {"instruction": "Develop an algorithm for bubble sorting.", "input": "[5, 2, 1, 8, 0, 9, 4]", "output": "#Function to sort an array using bubble sort\ndef bubbleSort(arr):\n  #Loop through all elements in the array\n  for i in range(len(arr)):\n    #Loop through all elements up to the one larger than the one at the current position\n    for j in range(0, len(arr)-i-1):\n      #Swap elements if necessary\n      if arr[j] > arr[j+1] :\n        arr[j], arr[j+1] = arr[j+1], arr[j]\n\n#Driver code\narr = [5,2,1,8,0,9,4]\nbubbleSort(arr)", "category": "Python"}, {"instruction": "Create a PHP script to broadcast a message on a given web page.", "input": "Input Web Page URL: https://www.example.com/message\nMessage: This is a broadcast message", "output": "<?php\n$url = 'https://www.example.com/message';\n$message = 'This is a broadcast message';\n\n// Create a cURL handle\n$ch = curl_init();\n\n// Set the URL and other options\ncurl_setopt($ch, CURLOPT_URL, $url);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $message);\n\n// Execute the request and get the response\n$response = curl_exec($ch);\n$status_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\nif ($status_code == 200) {\n    echo 'Message sent successfully';\n} else {\n    echo 'Error occurred while sending message';\n}\n##\n9. Instruction: Create a function in Python that encodes a given string into a Base64 string.\n9. Input:\n<noinput>\n9. Output:\ndef base64_encode(string):\n    encoded_string = base64.b64encode(string.encode('utf-8'))\n    return encoded_string.decode('utf-8')", "category": "Python"}, {"instruction": "Write a query in SQL to count the number of users with a given email address.", "input": "Table: users\nEmail address: example@example.com", "output": "SELECT COUNT(*)\nFROM users\nWHERE email = 'example@example.com'", "category": "Python"}, {"instruction": "Generate CNN-LSTM model in Keras.", "input": "", "output": "# define CNN model\nmodel_cnn = Sequential([\n    Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n    MaxPool2D(),\n    Flatten(),\n    Dense(100, activation='relu'),\n    Dense(10, activation='softmax')\n])\n\n# define RNN model\nmodel_lstm = Sequential()\nmodel_lstm.add(LSTM(128, input_shape=(28, 28, 32)))\nmodel_lstm.add(Dense(100, activation='relu'))\nmodel_lstm.add(Dense(10, activation='softmax'))\n\n# define the model\nmodel = Sequential()\nmodel.add(Convolution2D(32, 3, 3, input_shape=(28, 28, 1), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(LSTM(128))\nmodel.add(Dense(100, activation='relu'))\nmodel.add(Dropout(.2))\nmodel.add(Dense(10, activation='softmax'))", "category": "Python"}, {"instruction": "Using a hash table, construct a program to find all of the pairs of an array whose sum is equal to a given target", "input": "arr = [2,7,5,3,1,9]\ntarget = 8", "output": "# Using a hash table, construct a program to find all of the pairs of an array whose sum is equal to a given target\n\ndef find_pairs(arr, target):\n    seen = {}\n    pairs = []\n    for num in arr:\n        if target-num in seen:\n            pairs.append((num, target-num))\n        seen[num] = True\n    return pairs\n\nprint(find_pairs(arr, target)) # [(2, 6), (1, 7)]", "category": "Python"}, {"instruction": "Replace every character in a given string with its corresponding ASCII code", "input": "string = \"Hello\"", "output": "# Replace every character in a given string with its corresponding ASCII code\n\ndef encode_string(string):\n    result = \"\"\n    for char in string:\n        result += str(ord(char))\n    return result\n\nprint(encode_string(string)) # \"72 101 108 108 111\"", "category": "Python"}, {"instruction": "Create a function to allocate resources to parties", "input": "data = [[\"Joe\",5],[\"John\",3],[\"Mary\",2]]", "output": "# Create a function to allocate resources to parties\n\ndef allocate(data):\n    total = 0\n    for item in data: \n        total += item[1] \n    allocation = [i[1]/total for i in data] \n    return allocation\n\nprint(allocate(data)) # [0.5, 0.3, 0.2]", "category": "Python"}, {"instruction": "Print all unique combinations of an array of integers", "input": "nums = [1,2,3]", "output": "# Print all unique combinations of an array of integers\n\ndef all_combinations(nums):\n  result = [[]]\n  for num in nums:\n    temp_result = []\n    for res in result:\n      temp_result.append(res + [num])\n    result.extend(temp_result)\n  return result\n\nprint(all_combinations(nums)) # [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]", "category": "Python"}, {"instruction": "Construct an HTML form with five input fields: Name, Username, Password, Email, and Phone number.", "input": "", "output": "<html> \n  <body> \n    <form> \n      <label for=\"name\">Name:</label> \n      <input type=\"text\" id=\"name\" name=\"name\"> \n      <br> \n      <label for=\"username\">Username:</label> \n      <input type=\"text\" id=\"username\" name=\"username\"> \n      <br> \n      <label for=\"password\">Password:</label> \n      <input type=\"password\" id=\"password\" name=\"password\"> \n      <br> \n      <label for=\"email\">Email:</label> \n      <input type=\"text\" id=\"email\" name=\"email\"> \n      <br> \n      <label for=\"phone\">Phone number:</label> \n      <input type=\"number\" id=\"phone\" name=\"phone\"> \n      <br> \n    </form> \n  </body> \n</html>", "category": "Python"}, {"instruction": "Format a given number to a specified number of decimal places", "input": "num = 12.34567", "output": "# Format a given number to a specified number of decimal places\n\nnum = 12.34567\nformatted_num = \"{:.2f}\".format(num)\nprint(formatted_num) # 12.35", "category": "Python"}, {"instruction": "Write the SQL query to return a list of unique values from a table called products with a column called categories.", "input": "", "output": "SELECT DISTINCT categories FROM products;", "category": "Python"}, {"instruction": "Write a function that takes two parameters called firstName and lastName and prints them in the format of firstName + lastName.", "input": "", "output": "def printFullName(firstName, lastName):\n  print(firstName + \" \" + lastName)", "category": "Python"}, {"instruction": "Write the code to create a random number between 1 and 10 in JavaScript.", "input": "", "output": "Math.floor(Math.random() * 10) + 1;", "category": "Python"}, {"instruction": "Create a new Bash script and print \"This is my first script\" to the terminal.", "input": "", "output": "#!/bin/bash\necho \u201cThis is my first script\u201d", "category": "Python"}, {"instruction": "Write the JavaScript code to create an array called fruits and add three values to it.", "input": "", "output": "const fruits = [\"apple\", \"banana\", \"orange\"];", "category": "Python"}, {"instruction": "Write the code to add a key-value pair to an existing dictionary in JavaScript.", "input": "myDictionary = {\n \"name\": \"John\",\n \"age\" : 24\n}", "output": "myDictionary[\"location\"] = \"NY\";", "category": "Python"}, {"instruction": "Write the code to connect a database in Node.JS.", "input": "myDatabaseName", "output": "const mysql = require('mysql');\n\n// Connect\nconst database = mysql.createConnection({\n  host: 'localhost',\n  user: 'admin',\n  password: 'password',\n  database: 'myDatabaseName'\n});\n\n//Connect\ndatabase.connect(function(err) { \n  if (err) throw err;\n});", "category": "Python"}, {"instruction": "Create a program that creates a dictionary containing only the squares of numbers up to n", "input": "n = 10", "output": "# Create a program that creates a dictionary containing only the squares of numbers up to n\n\nn = 10\ndict_squares = {x: x*x for x in range(1, n+1)}\nprint(dict_squares) # {1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100}", "category": "Python"}, {"instruction": "Parse an XML document using Python.", "input": "", "output": "import xml.etree.ElementTree as ET\n\ntree = ET.parse(\"file.xml\")\nroot = tree.getroot()\n\nfor child in root:\n    print(f\"{child.tag}: {child.text}\")", "category": "Python"}, {"instruction": "Create a class in Java that performs the following task: print out all characters of a given string along with their position in the string.", "input": "", "output": "public class PrintPosition {\n    public static void printPosition(String str) {\n        for (int i = 0; i < str.length(); i++) {\n            System.out.println(\"Character '\" + str.charAt(i) + \"' is at position \" + i);\n        }\n    }\n}", "category": "Python"}, {"instruction": "Create a SQL database with two separate tables named \"Students\" and \"Courses\" to store relevant information about student records.", "input": "", "output": "CREATE TABLE Students (\n    student_id INT NOT NULL AUTO_INCREMENT,\n    student_name VARCHAR(50) NOT NULL,\n    student_age INT NOT NULL,\n    PRIMARY KEY (student_id)\n);\n\nCREATE TABLE Courses (\n    course_id INT NOT NULL AUTO_INCREMENT,\n    course_name VARCHAR(50) NOT NUL,\n    course_duration INT NOT NULL,\n    student_id INT NOT NULL,\n    PRIMARY KEY (course_id),\n    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n);", "category": "Python"}, {"instruction": "You need to make a function that takes in a number and its reverse and checks whether the two numbers are equal or not.", "input": "x = 65\ny = 56", "output": "def check_equal(x, y)\n{\n    if (x == (y * -1)) \n    {\n        return true;\n    } \n    else \n    {\n        return false;\n    }\n}", "category": "Python"}, {"instruction": "Print a right angled triangle with stars.", "input": "", "output": "*\n**\n***", "category": "Python"}, {"instruction": "Compute the sum of 2 numbers using Python code.", "input": "a = 10\nb = 5", "output": "a + b = 15", "category": "Python"}, {"instruction": "Create a unit test for a given function to reverse a list of strings.", "input": "", "output": "import unittest \n\ndef reverse_strings_list(lst):\n  return lst[::-1]\n\nclass TestReverseStrings(unittest.TestCase):\n  def test_reverse_strings_list(self):\n    self.assertEqual(reverse_strings_list([\"one\",\"two\",\"three\"]), \n      [\"three\", \"two\", \"one\"])", "category": "Python"}, {"instruction": "Write a basic CSS style to apply color red to all links.", "input": "", "output": "a {\n  color: red;\n}", "category": "Python"}, {"instruction": "Generate code to rearrange a given array of integers.", "input": "[2, 4, 6, 8]", "output": "def rearrange_array(arr):\n  arr.sort()\n  return arr", "category": "Python"}, {"instruction": "Use a neural network to classify handwritten digits from the MNIST dataset.", "input": "", "output": "import tensorflow as tf\nfrom tensorflow.keras.datasets import mnist\n\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n# Reshape and normalize the data\nx_train = x_train.reshape((60000, 28, 28, 1))\nx_train = x_train / 255.0\nx_test = x_test.reshape((10000, 28, 28, 1)) \nx_test = x_test / 255.0\n\n# Build and compile the model\nmodel = tf.keras.models.Sequential([\n tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(28, 28, 1)),\n tf.keras.layers.MaxPooling2D(2, 2),\n tf.keras.layers.Flatten(),\n tf.keras.layers.Dense(128, activation='relu'),\n tf.keras.layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n loss='sparse_categorical_crossentropy', \n metrics=['accuracy'])\n\n# Train the model\nmodel.fit(x_train, y_train, epochs=5)\n\n# Evaluate the model\ntest_loss, test_acc = model.evaluate(x_test, y_test)\n\nprint('Test accuracy:', test_acc)", "category": "Python"}, {"instruction": "You need to sort the given array in descending order.", "input": "array = [23, 16, 11, 45, 32]", "output": "sorted_array = sorted(array, reverse=True)", "category": "Python"}, {"instruction": "You need to implement a depth-first search algorithm to search for a value in a given tree.", "input": "", "output": "def dfs(root, value):\n    if root is None:\n        return False\n    if root.val == value:\n        return True\n\n    left = dfs(root.left, value)\n    right = dfs(root.right, value)\n    return left or right", "category": "Python"}, {"instruction": "You need to collect user input to get the total sum of numbers.", "input": "", "output": "total = 0\nwhile True:\n    num = input(\"Please enter a number (enter '0' to finish): \")\n    if num == '0':\n        break\n    total += int(num)\n\nprint(\"The total sum of numbers is:\", total)", "category": "Python"}, {"instruction": "Write a function to parse a string and return a set of unique words.", "input": "string = \"Hello world this is a test string\"", "output": "def parse(string):\n    words = set()\n    for word in string.split(\" \"):\n        words.add(word)\n    return words", "category": "Python"}, {"instruction": "Write code to merge two data dictionaries into one new dictionary.", "input": "dic1 = {\"a\":1, \"b\":2}\ndic2 = {\"c\":3, \"d\":4}", "output": "new_dict = {**dic1, **dic2}", "category": "Python"}, {"instruction": "Construct a JSON response object to return the given data in a key-value format.", "input": "user_name = \"John Doe\"\n user_age = 20", "output": "response = {\n            \"user_name\": user_name,\n            \"user_age\": user_age\n            }", "category": "Python"}, {"instruction": "You need to complete the following code snippet to display 'hello world' on the console.", "input": "", "output": "print(\"Hello world\")", "category": "Python"}, {"instruction": "You need to modify an array to delete the third element of the array.", "input": "array = [1, 2, 3, 4, 5]", "output": "del array[2]", "category": "Python"}, {"instruction": "Debug the given Java program to make it print out the value of x.", "input": "public class DebugBug {\n    public static void main(String[] args) {\n        int x = 10;\n        print(x);\n    }\n    public static void print(int x) {\n    }\n}", "output": "public class DebugBug {\n    public static void main(String[] args) {\n        int x = 10;\n        print(x);\n    }\n    public static void print(int x) {\n        System.out.println(x);\n    }\n}", "category": "Python"}, {"instruction": "Combine the two given strings into one string in the given order.", "input": "string1 = \"hello\"\nstring2 = \"world\"", "output": "string1 + string2 = \"helloworld\"", "category": "Python"}, {"instruction": "Explain what a linked list data structure is in one sentence.", "input": "", "output": "A linked list is a linear data structure where each node is connected to the next node by a pointer.", "category": "Python"}, {"instruction": "Create a Java class called 'Rectangle' that has two properties: length and width.", "input": "", "output": "public class Rectangle { \n\n    // length and width parameters \n    private double length; \n    private double width; \n  \n    //Empty constructor \n    public Rectangle(){\n    }\n  \n    //Initialized constructor\n    public Rectangle(double length, double width) { \n        this.length = length; \n        this.width = width; \n    } \n  \n    // setters and getters \n    public void setLength(double length) { \n        this.length = length;\n    } \n    public double getLength() { \n        return length; \n    } \n  \n    public void setWidth(double width) { \n        this.width = width; \n    } \n    public double getWidth() { \n        return width; \n    }    \n}", "category": "Python"}, {"instruction": "Convert the following deep learning model definition code to use the Keras API.\n\nmodel = Sequential() \nmodel.add(Dense(256, activation=\"relu\", input_dim=20)) \nmodel.add(Dense(128, activation=\"sigmoid\")) \nmodel.add(Dense(64, activation=\"softmax\")) \nmodel.add(Dense(1, activation=\"linear\"))", "input": "", "output": "import keras \n\nmodel = keras.Sequential()\nmodel.add(keras.layers.Dense(256, activation=\"relu\", input_dim=20))\nmodel.add(keras.layers.Dense(128, activation=\"sigmoid\"))\nmodel.add(keras.layers.Dense(64, activation=\"softmax\"))\nmodel.add(keras.layers.Dense(1, activation=\"linear\"))", "category": "Python"}, {"instruction": "Rewrite the following code to use the ternary operator in Python:\n\nif x > 0:\n    result = \"positive\"\nelse:\n    result = \"negative\"", "input": "", "output": "result = \"positive\" if x > 0 else \"negative\"", "category": "Python"}, {"instruction": "How would you create a function that takes a list of strings as an argument and returns the total number of characters in all the strings together?", "input": "", "output": "def count_characters(stringList):\n    count = 0\n    for string in stringList: \n        count += len(string)\n    return count", "category": "Python"}, {"instruction": "Explain the differences between an array and an arraylist in Java.", "input": "", "output": "An array is a static data structure, while an array list is a dynamic data structure. An array has a fixed size which cannot be changed, while an array list can be dynamically resized. Elements in an array must be of the same type, while an array list can store elements with different types. Arrays can have multiple dimensions, while array lists can only have one dimension. Furthermore, arrays are much faster to access than array lists.", "category": "Python"}, {"instruction": "Write a SQL query to select users who have a username that starts with \"S\".", "input": "", "output": "SELECT *\nFROM users \nWHERE username LIKE 'S%';", "category": "Python"}, {"instruction": "What is the syntax required to create an array of objects using JavaScript?", "input": "", "output": "An array of objects can be created using the syntax below:\n\nlet arrayOfObjects = [\n  { key1: 'value1', key2: 'value2' },\n  { key1: 'value3', key2: 'value4' },\n  { key1: 'value5', key2: 'value6' }\n];", "category": "Python"}, {"instruction": "Write a scanf for an integer array of size 10.", "input": "", "output": "#include<stdio.h>\nint main()\n{\n    int a[10];\n    for (int i = 0; i < 10; i++) \n        scanf(\"%d\", &a[i]);\n    return 0;\n}", "category": "Python"}, {"instruction": "You need to build an API endpoint to support role-based authentication.", "input": "User roles: 'admin', 'manager', 'employee'", "output": "def authentication(role):\n    if role == 'admin':\n        return 'Admin privileges granted.'\n    elif role == 'manager':\n        return 'Manager privileges granted.'\n    elif role == 'employee':\n        return 'Employee privileges granted.'\n    else:\n        return 'Login failed. Invalid role.'", "category": "Python"}, {"instruction": "Write a JavaScript function that takes a number as an argument and finds the sum of all the numbers in a given range (based on the given number).", "input": "", "output": "function sumOfNumInRange(n) {\n  let total = 0\n  for (let i=1; i<=n; i++) {\n    total += i;\n  }\n  return total;\n}", "category": "Python"}, {"instruction": "Create a Python function to find the pair of numbers that have the highest product in an array of numbers", "input": "[1, 2, 4, 8, 10]", "output": "def find_max_product(nums):\n  max_product = 0\n  for i in range(len(nums)):\n    for j in range(i+1, len(nums)):\n      product = nums[i] * nums[j]\n      if product > max_product:\n        max_product = product\n  return max_product", "category": "Python"}, {"instruction": "Output the factorial of 7", "input": "", "output": "The factorial of 7 is 5040.", "category": "Python"}, {"instruction": "Create a Python function that takes two arguments, a positive integer and a boolean, and return the word \"yes\" if the boolean is true and the number is even, else it should return the word \"no\".", "input": "", "output": "def check_number(number, condition):\n    if condition and number % 2 == 0:\n        return \"yes\"\n    else:\n        return \"no\"", "category": "Python"}, {"instruction": "Given a string, write a Python function that will remove all the vowels from it.", "input": "", "output": "def remove_vowels(string):\n    vowels = {'a', 'e', 'i', 'o', 'u'}  \n    return ''.join(c for c in string if c not in vowels)", "category": "Python"}, {"instruction": "Output the first 20 prime numbers", "input": "", "output": "The first 20 prime numbers are: 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71.", "category": "Python"}, {"instruction": "Write a JavaScript function that will take a string and returns the reverse of that string", "input": "", "output": "function reverseString(str) {\n    return str.split(\"\").reverse().join(\"\");\n  }", "category": "Python"}, {"instruction": "Look at the code and explain what is it doing.", "input": "def double_list(list):\n    \"\"\"Doubles every value in the list.\"\"\"\n    for idx, item in enumerate(list):\n        list[idx] = item * 2", "output": "This code takes a list as an argument and iterates through it using a for loop. For each element in the list, the code multiplies it to 2 and assigns it back (replacing the existing element) in the same list. At the end, every element in the list is doubled in value.", "category": "Python"}, {"instruction": "Create a C# program that takes a string input from the user and outputs its length.", "input": "", "output": "using System;\n\nnamespace StringLength\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Please enter a string: \");\n            string input = Console.ReadLine();\n            Console.WriteLine($\"The length of the string is: {input.Length}\");\n        }\n    }\n}", "category": "Python"}, {"instruction": "Create a function in C++ that takes in two integers, multiplies them and then prints the result.", "input": "", "output": "#include <iostream>\n \n// Function that takes in two integers, multiplies them and then prints the result\nvoid multiplyAndPrint(int num1, int num2)\n{\n    int result = num1 * num2;\n    std::cout << \"The result is: \" << result << std::endl;\n}", "category": "Python"}, {"instruction": "Create a CSS class to make a <div> element have a width of 50%, a height of 75px, and a blue background color.", "input": "", "output": ".divStyle { \n  width: 50%;\n  height: 75px;\n  background-color: blue;\n}", "category": "Python"}, {"instruction": "Rewrite this HTML code so that it is valid HTML5.", "input": "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head> \n  <title>Example website</title>\n</head> \n<body>\n  <h1>My example website</h1>\n  <p>This is some example text</p>\n</body> \n</html>", "output": "<!DOCTYPE html>\n<html>\n  <head> \n    <title>Example website</title>\n  </head> \n  <body>\n    <h1>My example website</h1>\n    <p>This is some example text</p>\n  </body> \n</html>", "category": "Python"}, {"instruction": "Write a function to generate a list of integers from 0 to 10.", "input": "", "output": "def generate_list():\n    return list(range(11))", "category": "Python"}, {"instruction": "Create a code to generate a list of all numbers between a given start and end number.", "input": "start = 10\nend = 20", "output": "def create_list(start, end):\n    \"\"\"\n    Create a code to generate a list of all numbers between a given start and end number\n    \"\"\"\n    number_list = []\n    for num in range(start, end+1):\n        number_list.append(num)\n    return number_list\n\nstart = 10\nend = 20\n\nresult = create_list(start, end)\nprint(result) #[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]", "category": "Python"}, {"instruction": "For the given string, write a code to print out the longest word in the string.", "input": "test_string = \"This is an example sentence.\"", "output": "def longest_word_in_string(string):\n    \"\"\"\n    A function to print out the longest word in a given string\n    \"\"\"\n    words = string.split(\" \")\n    longest_word =  max(words, key=len)\n    return longest_word\n\ntest_string = \"This is an example sentence.\"\n\nlongest = longest_word_in_string(test_string)\nprint(longest) # example", "category": "Python"}, {"instruction": "Create a code to find all common elements in two list and store it in a new list.", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]", "output": "def find_common(list1, list2):\n    \"\"\"\n    Find all common elements in two list and store it in a new list\n    \"\"\"\n    new_list = []\n    for item1 in list1:\n        for item2 in list2:\n            if item1 == item2:\n                new_list.append(item1)\n                \n    return new_list\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\n\nresult = find_common(list1, list2)\nprint(result) # [3, 4, 5]", "category": "Python"}, {"instruction": "Write a code to check whether two numbers are divisible by each other.", "input": "num1 = 8\nnum2 = 4", "output": "def divisible_by_each_other(num1, num2):\n    \"\"\"\n    A function to check whether two numbers are divisible by each other\n    \"\"\"\n    if num1 % num2 == 0 or num2 % num1 == 0:\n        return True\n    else:\n        return False\n\nnum1 = 8\nnum2 = 4\n\nresult = divisible_by_each_other(num1, num2)\nprint(result) # True", "category": "Python"}, {"instruction": "Write a code to calculate the mean of the list of integers provided.", "input": "nums = [10, 20, 30, 40, 50]", "output": "def calc_mean(nums):\n    \"\"\"\n    Calculate the mean of a list of integers\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    else:\n        sum_of_nums = sum(nums)\n        mean = sum_of_nums/len(nums)\n        return mean\n\nnums = [10, 20, 30, 40, 50]\nmean = calc_mean(nums)\nprint(mean) # 30", "category": "Python"}, {"instruction": "Using the dictionary provided, write a code to print out the values in the dictionary.", "input": "dict1 = {\"A\":\"Apple\",\"B\":\"Banana\",\"C\":\"Cherry\"}", "output": "dict1 = {\"A\":\"Apple\",\"B\":\"Banana\",\"C\":\"Cherry\"}\n\nfor key in dict1:\n  print(dict1[key])\n\n# Output \nApple\nBanana\nCherry", "category": "Python"}, {"instruction": "Create a function that finds the highest peak in an array of elevation data.", "input": "[9, 10, 12, 15, 7, 8, 11]", "output": "def find_peak(arr):\n    max_h = arr[0]\n    max_i = 0\n    # traverse the array\n    for i in range(len(arr)):\n        if arr[i] > max_h:\n            max_h = arr[i]\n            max_i = i \n    return max_h, max_i", "category": "Python"}, {"instruction": "Write a function in JavaScript to create and return a copy of an object.", "input": "", "output": "function cloneObject(obj) {\n    let clone = {};\n    for (let key in obj) {\n        if (typeof obj[key] === 'object') {\n            clone[key] = cloneObject(obj[key]);\n        } else {\n            clone[key] = obj[key];\n        }\n    }\n    return clone;\n}", "category": "Python"}, {"instruction": "Create a database query in MySQL to delete \"Inactive\" status records from a table named 'users'.", "input": "", "output": "DELETE FROM users WHERE status = 'Inactive';", "category": "Python"}, {"instruction": "Design an algorithm in Python for reversing a linked list.", "input": "", "output": "def reverse(head): \n    prev = None\n    curr = head \n    while(curr is not None): \n        next = curr.next\n        curr.next = prev \n        prev = curr \n        curr = next\n    head = prev \n    return head", "category": "Python"}, {"instruction": "Design a Java class to store user information.", "input": "", "output": "public class User {\n    private String name;\n    private int age;\n    private String email;\n  \n    // getters and setters\n  \n    public User(String name, int age, String email) {\n        this.name = name;\n        this.age = age;\n        this.email = email;\n    }\n}", "category": "Python"}, {"instruction": "Create a program which takes a given list and returns a list with only the unique elements.", "input": "[3, 5, 7, 9, 5, 3, 7]", "output": "my_list = [3, 5, 7, 9, 5, 3, 7]\nunique_list = list(set(my_list))\n\nprint(unique_list)  #Output: [3, 5, 7, 9]", "category": "Python"}, {"instruction": "Calculate the total sum of digits in the given integer.", "input": "1234", "output": "sum_of_digits = 0\nnum = 1234\n\nwhile num > 0:\n    digit = num % 10\n    sum_of_digits += digit\n    num //= 10\n\nprint(sum_of_digits)  #Output: 10", "category": "Python"}, {"instruction": "Create a function to take in a given array, rotate it by one, so that the last element of the array is now the first element.", "input": "[1, 2, 3, 4, 5]", "output": "def rotate_list(arr):\n     length = len(arr) \n     temp = arr[length - 1] \n\n     for i in range(length-1, 0, -1):\n        arr[i] = arr[i-1] \n     arr[0] = temp \n      \n     return arr\n \nmy_list = [1, 2, 3, 4, 5]\nprint(rotate_list(my_list))  #Output: [5, 1, 2, 3, 4]", "category": "Python"}, {"instruction": "Reimplement the function below, so that it takes in two int arguments and returns their sum instead of using the existing global variable x.", "input": "x = 4\n\ndef add_x(y):\n  return x + y", "output": "def add_x(x, y):\n  return x + y", "category": "Python"}, {"instruction": "Given a list of integers, write a function that takes the list and returns only the odd numbers in the list.", "input": "", "output": "def extract_odd_numbers(numbers):\n    return [x for x in numbers if x % 2 != 0]", "category": "Python"}, {"instruction": "Rewrite the following function so that it takes in an int argument and returns the factorial of that number.", "input": "def calc_factorial(x):\n    total = 1\n    if x == 0:\n        return 1\n    for num in range(1, x+1):\n        total *= num \n    return total", "output": "def calc_factorial(x):\n    if x == 0:\n        return 1\n    else: \n        return x * calc_factorial(x - 1)", "category": "Python"}, {"instruction": "Generate a C++ program that sorts the elements in an array using the quick sort algorithm.", "input": "", "output": "#include<iostream>\nusing namespace std;\n \nint partition (int arr[], int low, int high)\n{\n    int pivot = arr[high];    // pivot\n    int i = (low - 1);  // Index of smaller element\n \n    for (int j = low; j <= high- 1; j++)\n    {\n        if (arr[j] <= pivot)\n        {\n            i++;    // increment index of smaller element\n            swap(arr[i], arr[j]);\n        }\n    }\n    swap(arr[i + 1], arr[high]);\n    return (i + 1);\n}\n \n \nvoid quickSort(int arr[], int low, int high)\n{\n    if (low < high)\n    {\n        int pi = partition(arr, low, high);\n \n        quickSort(arr, low, pi - 1);\n        quickSort(arr, pi + 1, high);\n    }\n}\n \nvoid printArray(int arr[], int n)\n{\n    for (int i=0; i < n; i++)\n        cout << arr[i] << \" \";\n}", "category": "Python"}, {"instruction": "Add CSS styling to the <body> element so that the background color of a webpage is white.", "input": "", "output": "body {\n    background-color: #FFFFFF;\n}", "category": "Python"}, {"instruction": "Using HTML, create a form with 3 text input fields and 2 buttons.", "input": "", "output": "<form action=\"\" method=\"post\">\n  <input type=\"text\" name=\"field1\" /> \n  <input type=\"text\" name=\"field2\" /> \n  <input type=\"text\" name=\"field3\" /> \n  <input type=\"submit\" name=\"submit1\" value=\"Submit\" />\n  <input type=\"submit\" name=\"submit2\" value=\"Cancel\" />\n</form>", "category": "Python"}, {"instruction": "Create a Ruby program to generate a random 9-digit alphanumeric string.", "input": "", "output": "characters =  ['0'..'9', 'A'..'Z', 'a'..'z'].map { |range| range.to_a }.flatten\nrandom_string = (0...9).map { characters[rand(characters.length)] }.join\nputs random_string", "category": "Python"}, {"instruction": "Create a function \"distance\" that takes two sets of coordinates in the form of [x1, y1] and [x2, y2] and computes the Euclidean distance between them.", "input": "", "output": "def distance(c1, c2):\n    \"\"\"Function to calculate Euclidean distance between two sets of coordinates\"\"\"\n    x1, y1 = c1\n    x2, y2 = c2\n    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)", "category": "Python"}, {"instruction": "Construct an SQL query to count the number of houses with four bedrooms.", "input": "", "output": "SELECT COUNT(*) \nFROM Houses \nWHERE bedrooms = 4;", "category": "Python"}, {"instruction": "Setup a postgres database using Docker.", "input": "", "output": "docker run --name some-postgres -e POSTGRES_PASSWORD=mySecretPassword -d postgres", "category": "Python"}, {"instruction": "Compile this Java program and output the result.", "input": "public class HelloWorld\n{\n public static void main(String[] args)\n {\n  System.out.println(\"Hello World\");\n }\n}", "output": "$ javac HelloWorld.java\n$ java HelloWorld\nHelloWorld", "category": "Python"}, {"instruction": "Create a function \"getGrade\" to get a grade based on a numeric score.", "input": "", "output": "def getGrade(score):\n    if score >= 90:\n        return \"A\"\n    elif score >= 80:\n        return \"B\"\n    elif score >= 70:\n        return \"C\"\n    elif score >= 60:\n        return \"D\"\n    else:\n        return \"F\"", "category": "Python"}, {"instruction": "Implement a function in Java that finds the average of two given integers.", "input": "", "output": "public static int averageOfTwoIntegers(int a, int b) { \n    return (a + b) / 2; \n}", "category": "Python"}, {"instruction": "Write a function in JavaScript to verify that a given email address is valid or not.", "input": "", "output": "function isValidEmail(email) { \n    // Regular expression for validating an email address \n    const re = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/; \n    return re.test(String(email).toLowerCase()); \n}", "category": "Python"}, {"instruction": "Create an HTML page with a form containing a checkbox.", "input": "", "output": "<html>\n  <body>\n    <form>\n      <input type=\"checkbox\" />\n    </form>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Use JavaScript to print out the string \"Hello, World!\".", "input": "", "output": "console.log(\"Hello, World!\");", "category": "Python"}, {"instruction": "Using jQuery, update the HTML code to provide the user a toggle switch that changes the text from \"off\" to \"on\" when clicked.", "input": "<div>\n    <p>Status: <span class='status'>off</span></p>\n</div>", "output": "<div>\n    <p>Status: <span class='status'>off</span>\n        <button onclick=\"toggleStatus()\">Toggle</button>\n    </p>\n\n    <script>\n        function toggleStatus() {\n            $('.status').text($('.status').text() === 'off' ? 'on' : 'off');\n        }\n    </script>\n</div>", "category": "Python"}, {"instruction": "Generate a code that prints out all the perfect squares between 1 and 500.", "input": "", "output": "for i in range(1,501):\n    num = i**2\n    if num < 501:\n        print(num)", "category": "Python"}, {"instruction": "Generate a program that accepts an integer array and returns its median value", "input": "", "output": "def median(arr):\n    arr.sort()\n    if len(arr)%2 != 0:\n        return arr[len(arr)//2]\n    else:\n        return (arr[(len(arr)//2)-1]+arr[len(arr)//2])/2", "category": "Python"}, {"instruction": "Generate a python code program that removes punctuation from a given string.", "input": "", "output": "def remove_punctuation(s):\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    s_without_punct = \"\"\n    for char in s:\n        if char not in punctuations:\n            s_without_punct = s_without_punct + char\n    return s_without_punct", "category": "Python"}, {"instruction": "Using HTML and CSS, create a page layout with two columns and a header row.", "input": "", "output": "<html>\n  <head>\n    <style>\n      .table {  \n        display: table; \n        width: 100%;\n      }\n      .table-row {  \n        display: table-row;\n      }\n      .table-cell { \n        display: table-cell;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"table\">\n      <div class=\"table-row\">\n        <div class=\"header table-cell\">Header</div>\n      </div>\n      <div class=\"table-row\">\n        <div class=\"table-cell\">Column 1</div>\n        <div class=\"table-cell\">Column 2</div>\n      </div>\n    </div>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create a program that takes in an array of integers as input and returns a sorted array in ascending order.", "input": "[7, 3, 5, 9, 11, 10]", "output": "def sort_ints(arr):\n    return sorted(arr)\n\nmy_list = [7, 3, 5, 9, 11, 10]\nprint(sort_ints(my_list))  #Output: [3, 5, 7, 9, 10, 11]", "category": "Python"}, {"instruction": "Write a code to perform linear search in an array of integers.", "input": "", "output": "def linear_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1", "category": "Python"}, {"instruction": "What type of search algorithm is used to find the shortest path between two points?", "input": "", "output": "The type of search algorithm used to find the shortest path from two points is called Dijkstra's Algorithm.", "category": "Python"}, {"instruction": "Edit the following code to generate a boolean array with True for odd numbers and False for even numbers", "input": "a = [1, 2, 3, 4, 5]", "output": "import numpy as np\n\na = [1, 2, 3, 4, 5]\nb = np.array([i % 2 for i in a])", "category": "Python"}, {"instruction": "Write a Python program to find the group of three numbers in a list that has the greatest product.", "input": "list = [2, 3, -2, -3, 4, -5]", "output": "def find_greatest_product(lst):\n    products = []\n    for i in range(len(lst)-2):\n        for j in range(i+1, len(lst)-1):\n            for k in range(j+1, len(lst)):\n                products.append(lst[i] * lst[j] * lst[k])\n    return max(products)", "category": "Python"}, {"instruction": "Write a code to get the current weather information for a given city.", "input": "city = \"New York\"", "output": "import requests\nimport json\n\ndef get_weather_information(city):\n    url = 'http://api.openweathermap.org/data/2.5/weather?q={},<APIKEY>'.format(city)\n\n    response = requests.get(url)\n    data = json.loads(response.text)\n    return data\n\nif __name__ == '__main__':\n    print(get_weather_information(\"New York\"))", "category": "Python"}, {"instruction": "Write a function that expects a string as a parameter and returns all the words in the string with the length greater than three", "input": "This is a test string", "output": "def greater_than_three(string):\n    words = string.split(\" \")\n    result = []\n    for word in words:\n        if len(word) > 3:\n            result.append(word)\n    return result", "category": "Python"}, {"instruction": "Split a string into an array of characters in JavaScript.", "input": "", "output": "The JavaScript method split() can be used to split a string into an array of characters. It takes one parameter, the separator, which can be a single character or multiple characters. The following example splits a string into an array of characters using an empty string as a separator:\n\nvar str = \"Hello World!\";\nvar chars = str.split('');\nconsole.log(chars);\n    \n// Output: [\"H\", \"e\", \"l\", \"l\", \"o\", \" \", \"W\", \"o\", \"r\", \"l\", \"d\", \"!\"]", "category": "Python"}, {"instruction": "Illustrate the procedure for creating a database table.", "input": "", "output": "Creating a database table involves the following steps:\n1. Connect to the desired database.\n2. Create a SQL statement to define the table's structure and establish fields, field types, primary keys, etc.\n3. Execute the SQL statement to create the table.\n4. Close the database connection.", "category": "Python"}, {"instruction": "How to write a try-catch statement in Java?", "input": "", "output": "try {\n    // code to be tried\n} catch (Exception e) {\n    // code to be executed if exception occurs\n}", "category": "Python"}, {"instruction": "Create an event handler for the onmouseover event in HTML.", "input": "", "output": "<script> \nfunction showTooltip() {\n    // code to show tooltip\n}\n\ndocument.onmouseover = showTooltip;\n</script>", "category": "Python"}, {"instruction": "Write a Java program to define a class for a Dice object.", "input": "", "output": "class Dice {\n    private int number;\n    private int roll_count = 0;\n    Random random = new Random();\n\n    public int roll() {\n        roll_count++;\n        number = random.nextInt(6) + 1;\n        return number;\n    }\n\n    public int getNumber() {\n        return number;\n    }\n\n    public int getRollCount() {\n        return roll_count;\n    }\n}", "category": "Python"}, {"instruction": "Write a Python function to create a matrix of given size filled with zeros.", "input": "3", "output": "def create_matrix(size):\n    matrix = []\n    for i in range(size):\n        row = []\n        for j in range(size):\n            row.append(0)\n        matrix.append(row)\n    return matrix", "category": "Python"}, {"instruction": "Write an SQL query to calculate the maximum salary earned by each employee in the table \"salary\" which has columns \"employee_name\" and \"salary\".", "input": "", "output": "SELECT employee_name, MAX(salary) FROM salary GROUP BY employee_name;", "category": "Python"}, {"instruction": "Write a SQL query to print all the data in a table \"scoreboard\" with columns \"name\", \"score\", and \"category\".", "input": "", "output": "SELECT name, score, category FROM scoreboard;", "category": "Python"}, {"instruction": "Suggest a completion for the following JavaScript to define a class.", "input": "class Bird {", "output": "class Bird {\n    constructor(name, color) {\n        this.name = name;\n        this.color = color;\n    }\n\n    // Add another method or property\n    \n    fly() {\n        console.log(`${this.name} is flying`);\n    }\n}", "category": "Python"}, {"instruction": "Create a SQL query that performs a SELECT operation on a table \"employee\" with columns Id, Name, Age.", "input": "", "output": "SELECT Id, Name, Age FROM employee;", "category": "Python"}, {"instruction": "Convert the following character stream into a number.", "input": "char_stream = \u201c8kk573\"", "output": "num = 8573", "category": "Python"}, {"instruction": "Write a code to generate a random password containing at least one symbol, one number, one lowercase letter and one uppercase letter", "input": "", "output": "import string\nimport random\n\ndef generate_password(length):\n    symbols = string.punctuation\n    numbers = string.digits\n    lowercase = string.ascii_lowercase\n    uppercase = string.ascii_uppercase\n    \n    characters = symbols + numbers + lowercase + uppercase\n    password = random.choice(symbols) + random.choice(numbers) + random.choice(lowercase) + random.choice(uppercase)\n    \n    for _ in range(length-4):\n        password += random.choice(characters)\n        \n    return password", "category": "Python"}, {"instruction": "Suggest a code to do the following task: Input a string and output the count of all the characters occuring in the string.", "input": "String: \"Hello World\"", "output": "string = \"Hello World\"\n\ndef count_characters(string):\n    count_dict = {}\n    for char in string:\n        if char not in count_dict:\n            count_dict[char] = 1\n        else:\n            count_dict[char] += 1\n    return count_dict\n\nprint(count_characters(string))", "category": "Python"}, {"instruction": "Suggest a code to extract the first and last occuring characters from a string.", "input": "String: \"Hello World!\"", "output": "string = \"Hello World!\"\n\nfirst_char = string[0]\nlast_char = string[-1]\n\nprint(first_char, last_char)", "category": "Python"}, {"instruction": "Outpus the sum of all blocks in the following oracle database table.", "input": "Table Name: orders\nColumn Names: order_id, quantity, price\nRow 1: 12345, 5, 120\nRow 2: 67890, 10, 150", "output": "sum_of_all_blocks = 1750", "category": "Python"}, {"instruction": "Write an Angular directive to make a text field required.", "input": "<input type=\"text\" name=\"name\">", "output": "<input type=\"text\" name=\"name\" required>", "category": "Python"}, {"instruction": "Edit the following HTML form to validate an email address.", "input": "<form>\n    <input type=\"text\" name=\"email\">\n    <input type=\"submit\" value=\"Submit\">\n</form>", "output": "<form>\n    <input type=\"email\" name=\"email\" pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\" required>\n    <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Create a MySQL table named \"movies\" with the following columns: id, title, and release_date.", "input": "", "output": "CREATE TABLE movies (\n    id INT NOT NULL AUTO_INCREMENT,\n    title VARCHAR(255) NOT NULL,\n    release_date DATE NOT NULL,\n    PRIMARY KEY (id)\n);", "category": "Python"}, {"instruction": "Generate 5 random numbers between 1 and 10 using a PHP script.", "input": "", "output": "<?php \nfor($i=0; $i<5; $i++){\n  echo rand(1, 10).\" \"; \n} \n?>", "category": "Python"}, {"instruction": "Create a Java class named \"Card\" to represent a standard playing card. The class should contain a constructor which takes the card's suit and number as parameters. It should also contain two getter methods to get the suit and number of the card.", "input": "< noinput >", "output": "public class Card {\n    private String suit;\n    private int number;\n\n    public Card(String suit, int number) {\n        this.suit = suit;\n        this.number = number;\n    }\n\n    public String getSuit() {\n        return suit;\n    }\n    public int getNumber() {\n        return number;\n    }\n}", "category": "Python"}, {"instruction": "Generate a code to identify duplicate elements in a list", "input": "", "output": "def find_duplicates(lst):\n    duplicate_elements = []\n    for element in lst:\n        if lst.count(element) > 1 and element not in duplicate_elements:\n            duplicate_elements.append(element)\n    return duplicate_elements\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5, 6, 1]\n    print(find_duplicates(lst))", "category": "Python"}, {"instruction": "Generate an algorithm that creates a Fibonacci sequence", "input": "", "output": "def Fibonacci_sequence(length): \n    fib_seq = [0, 1]\n    if length == 1:\n        return [0]\n    elif length == 2:\n        return fib_seq\n    else:\n        for i in range(2, length):\n            fib_seq.append(fib_seq[i - 1] + fib_seq[i - 2])\n        return fib_seq\n\nif __name__ == '__main__':\n    length = 7\n    print(Fibonacci_sequence(length))", "category": "Python"}, {"instruction": "Write a SQL query to find the ids and names of all users in the Users table who have address \"New York\".", "input": "", "output": "SELECT id, name FROM Users WHERE address = \"New York\";", "category": "Python"}, {"instruction": "Create a SQL query to select the rows with column B equal to \"test\" and column C equal to \"example\"", "input": "", "output": "SELECT * FROM table\nWHERE B = 'test'\n  AND C = 'example'", "category": "Python"}, {"instruction": "Output the output of the following python script.", "input": "Python Script:\n\nx = 5\ny = 7\n\ndef add(x, y):\n    return x + y\n\nadd(x, y)", "output": "12", "category": "Python"}, {"instruction": "Output the name of the variable type in the following expression.", "input": "Expression: 5 + 6j", "output": "complex", "category": "Python"}, {"instruction": "Check if the following string contains any uppercase characters and output the result.", "input": "String: hello world!", "output": "False", "category": "Python"}, {"instruction": "Output the following string after applying a base64 encoding.", "input": "String: Hello World!", "output": "SGVsbG8gV29ybGQh", "category": "Python"}, {"instruction": "Implement a function to concatenate two arrays.", "input": "Array 1: [1,2,3] \nArray 2: [5,6]", "output": "def concatenate_arrays(arr1, arr2):\n    new_array = arr1 + arr2\n    return new_array\n\narr1 = [1,2,3]\narr2 = [5,6]\nprint(concatenate_arrays(arr1, arr2))", "category": "Python"}, {"instruction": "Create a loop to iterate through all the values in the following list.", "input": "List: [2,7,16,2,9]", "output": "list = [2,7,16,2,9]\n\nfor val in list:\n    print(val)", "category": "Python"}, {"instruction": "Suggest a code to print the first three positions in an array.", "input": "Array = [1,2,3,4,5]", "output": "arr = [1,2,3,4,5]\n\nprint(arr[0:3])", "category": "Python"}, {"instruction": "Write a code to calculate the gravitational force between two objects", "input": "Two objects with a mass of 3kg and 10kg are separated by 10m.", "output": "def gravitational_force(m1, m2, r):\n    G = 6.67 * 10**-11\n    f = G*(m1*m2/r**2)\n    return f\n    \nif __name__ == '__main__':\n    m1 = 3\n    m2 = 10\n    r = 10\n    force = gravitational_force(m1, m2, r)\n    print(force)", "category": "Python"}, {"instruction": "Design a data structure that can be used to store student records with the fields 'name', 'age', 'major', and 'graduation_year'.", "input": "", "output": "A dictionary can be used to store student records. The keys in this dictionary will correspond to the student name and the values will be another dictionary that contains the other fields such as 'age', 'major', and 'graduation_year'.", "category": "Python"}, {"instruction": "Create a simple php website using the following data records.", "input": "[\n  {\n    \"firstname\": \"Oliver\",\n    \"lastname\": \"Smith\",\n    \"address\": \"1234 Main Street, City, Country\"\n  },\n  {\n    \"firstname\": \"John\",\n    \"lastname\": \"Doe\",\n    \"address\": \"5678 Long Road, City, Country\"\n  },\n  {\n    \"firstname\": \"Chris\",\n    \"lastname\": \"Fitzgerald\",\n    \"address\": \"9123 Eagle Street, City, Country\"\n  }\n]", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Simple PHP Website</title>\n</head>\n<body>\n  <?php\n    $data = [\n      [\n        \"firstname\" => \"Oliver\",\n        \"lastname\" => \"Smith\",\n        \"address\" => \"1234 Main Street, City, Country\"\n      ],\n      [\n        \"firstname\" => \"John\",\n        \"lastname\" => \"Doe\",\n        \"address\" => \"5678 Long Road, City, Country\"\n      ],\n      [\n        \"firstname\" => \"Chris\",\n        \"lastname\" => \"Fitzgerald\",\n        \"address\" => \"9123 Eagle Street, City, Country\"\n      ]\n    ]; \n\n    foreach($data as $person) {\n      echo '<p>';\n      echo $person['firstname'] . ' ' . $person['lastname'] . '<br/>';\n      echo $person['address'];\n      echo '</p>';\n    }\n  ?>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write CSS code to style a list of items with color green, font-size 14px and font-weight bold.", "input": "", "output": "li {\n    color: green;\n    font-size: 14px;\n    font-weight: bold;\n}", "category": "Python"}, {"instruction": "Write a code to print out all numbers between 1 and n divisible by 3 and 5 without using a loop.", "input": "", "output": "def print_numbers(n): \n    x = list(range(1,n+1)) \n    print([i for i in x if i % 3 == 0 and i % 5 == 0]) \n \n# Driver code \nn = 15\nprint_numbers(n)", "category": "Python"}, {"instruction": "Write a code to train a sentiment classification model on the IMDB sentiment analysis dataset.", "input": "", "output": "# import libraries \nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# load the data\nimdb = pd.read_csv('imdb.csv')\n\n# Create feature vectors for training\nvectorizer = CountVectorizer() \nX = vectorizer.fit_transform(imdb.TEXT)\ny = imdb.SENTIMENT\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=42)\n \n# Train a logistic regression classifier\nlr = LogisticRegression(solver='lbfgs').fit(X_train, y_train)\n\n# Evaluate the model performance\naccuracy = lr.score(X_test, y_test)\nprint('Accuracy of sentiment classification model:', accuracy)", "category": "Python"}, {"instruction": "Create a function to find the area of a circle by taking the radius as an argument.", "input": "", "output": "def area_of_circle(radius):\n    \"\"\"\n    This function takes a radius as input and returns the area of the circle.\n\n    Parameters:\n    radius (float): The radius of the circle.\n\n    Returns:\n    float: The area of the circle.\n    \"\"\"\n    return 3.14 * (radius ** 2)", "category": "Python"}, {"instruction": "Write a code to add two matrices of any size.", "input": "[[1, 2, 3],\n [4, 5, 6]]\n+\n[[7, 8, 9],\n [10, 11, 12]]", "output": "def matrix_addition(mat1, mat2):\n    # check whether two matrices are of same size\n    if(len(mat1) != len(mat2)):\n        return 'Not possible to add matrices'\n    else: \n        # adding elements of mat1 and mat2\n        result = [[0 for col in range(len(mat1[0]))] for row in range(len(mat1))]\n        for i in range(len(mat1)):\n            for j in range(len(mat1[0])):\n                result[i][j] = mat1[i][j] + mat2[i][j]\n    return result\n\n# initializing two matrices\nmat1 = [[1, 2, 3], [4, 5, 6]]\nmat2 = [[7, 8, 9], [10, 11, 12]]\n\nprint(matrix_addition(mat1, mat2))", "category": "Python"}, {"instruction": "Develop an R script to print the squares of the first 10 natural numbers.", "input": "", "output": "list=1:10\nlist_squared = list^2\nprint(list_squared)", "category": "Python"}, {"instruction": "Modify the existing code to enable user input so the user can enter their own number and have the average of those two numbers returned.", "input": "def find_average(a, b):\n    return (a + b) / 2", "output": "def find_average():\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    return (a + b) / 2", "category": "Python"}, {"instruction": "Given a string consisting of alphanumeric characters, separate it into left and right parts so that the left part contains only digits and the right part contains only letters.", "input": "String: Ab243rG", "output": "left, right = '', ''\nfor char in string:\n    if char.isdigit():\n        left += char\n    else:\n        right += char", "category": "Python"}, {"instruction": "Develop a function in Python which prints the name of the day (eg. \"Monday\") given any date as an argument.", "input": "Date: October 13th, 2020", "output": "def get_day(date):\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n    day_index = date.weekday()\n    return days[day_index]\n\nprint(get_day(date(2020, 10, 13)))", "category": "Python"}, {"instruction": "Write a JavaScript method for validating a form.", "input": "", "output": "function validateForm(form){\n  let valid = true;\n  for(let i=0; i < form.length; i++){\n    let field = form[i];\n    if(field.value.trim() === ''){\n      valid = false;\n    }\n  }\n  return valid;\n}", "category": "Python"}, {"instruction": "Write a JavaScript method to toggle font size on a webpage.", "input": "", "output": "function toggleFontSize(){\n  let fontSize = document.body.style.fontSize;\n  if(fontSize === \"\") {\n    document.body.style.fontSize = \"2rem\";\n  } else{\n    document.body.style.fontSize = \"\"\n  }\n}", "category": "Python"}, {"instruction": "Describe a method for sorting a list of integers using selection sort.", "input": "list = [3, 6, 8, 9, 5]", "output": "def selection_sort(list):\n    # Traverse through all array elements \n    for i in range(len(list)): \n      \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        list[i], list[min_idx] = list[min_idx], list[i] \n  \n# Driver code to test above \nlist = [3, 6, 8, 9, 5] \nselection_sort(list) \nprint (\"Sorted array\") \nfor i in range(len(list)): \n    print(\"%d\" %list[i])", "category": "Python"}, {"instruction": "Create a program that takes as input an array of numbers and calculates the sum of all numbers in the array.", "input": "arr = [10,20,30,40]", "output": "def get_sum(input_arr):\n    \"\"\"Returns the sum of all numbers in an input array\"\"\"\n    sum = 0\n    for num in input_arr:\n        sum += num\n    return sum\n\narr = [10,20,30,40]\ntotal = get_sum(arr)\nprint(total) # Output: 100", "category": "Python"}, {"instruction": "Create an HTML table with a header row and two columns.", "input": "", "output": "<table>\n <tr>\n    <th>Column 1</th>\n    <th>Column 2</th> \n </tr>\n</table>", "category": "Python"}, {"instruction": "Compute the number of ways to make a change of N with coins of given denominations.", "input": "N = 4; Coins = {1,2,3}", "output": "def change(n, coins): \n    m = len(coins) \n    table = [[0 for x in range(m)] for x in range(n+1)] \n\n    # Fill the entries for 0 value case (n = 0) \n    for i in range(m): \n        table[0][i] = 1\n\n    # Fill rest of the table entries in bottom-up manner \n    for i in range(1, n+1): \n        for j in range(m): \n            # Count of solutions including coins[j] \n            x = table[i - coins[j]][j] if i-coins[j] >= 0 else 0\n\n            # Count of solutions excluding coins[j] \n            y = table[i][j-1] if j >= 1 else 0 \n\n            # total count \n            table[i][j] = x + y \n    return table[n][m-1]", "category": "Python"}, {"instruction": "Develop an algorithm to determine if a given integer is an Armstrong number or not.", "input": "153", "output": "def is_armstrong_number(num): \n  \n    # initialize sum \n    sum = 0\n    temp = num \n    while temp > 0: \n        digit = temp % 10\n        sum += digit ** 3 \n        temp //= 10\n  \n    if num == sum: \n        return True\n    return False", "category": "Python"}, {"instruction": "Create an algorithm for finding the minimum element in an array of integers.", "input": "[3, 7, 14, 2, 11]", "output": "def find_min(array):\n    min_element = array[0] \n    for i in range(1, len(array)):\n        if array[i] < min_element: \n            min_element = array[i] \n    return min_element", "category": "Python"}, {"instruction": "Change this sentence into a valid mathematical expression.", "input": "Four minus five", "output": "4 - 5", "category": "Python"}, {"instruction": "Find the index of the maximum value.", "input": "[3, 5, 9, 11, 18, 23, 27]", "output": "5", "category": "Python"}, {"instruction": "Write a loop statement to delete all even numbers from the given array.", "input": "[1, 2, 3, 4, 5]", "output": "arr = [1, 2, 3, 4, 5]\nfor i in range(len(arr)):\n    if arr[i] % 2 == 0:\n        del arr[i]", "category": "Python"}, {"instruction": "Write a query in SQL to select all columns from \"Users\" table where the name is \"John\".", "input": "", "output": "SELECT * FROM Users WHERE Name=\"John\";", "category": "Python"}, {"instruction": "Find the sum of the first 10 natural numbers using a loop in C.", "input": "", "output": "// Function to find the sum of first n natural numbers \nint findSum(int n) \n{ \n    int sum = 0; \n    for (int i = 0; i <= n; i++) \n    sum = sum + i; \n  \n    return sum; \n} \n  \n// Driver program \nint n = 10; \nprintf(\"Sum of first %d natural numbers is %d\\n\", n, findSum(n)); \n# Output \nSum of first 10 natural numbers is 55", "category": "Python"}, {"instruction": "Create an HTML element that prints \"Hello, World!\" on the screen using JavaScript.", "input": "", "output": "<script> \n      document.write(\"Hello, World!\"); \n</script>", "category": "Python"}, {"instruction": "Create a function in Java that finds the difference between the largest and the smallest elements in a given array.", "input": "[1, 5, 10, 20]", "output": "public static int arrayMaxMinDiff(int[] arr) {\n\t\n\t// Initialize greatest and smallest\n  \tint max = arr[0]; \n  \tint min = arr[0]; \n  \n \t// Iterate the array and find the max & min\n  \tfor (int i = 0; i < arr.length; i++) {\n    \t\tif (arr[i] > max) \n      \t\t\tmax = arr[i]; \n    \t\tif (arr[i] < min) \n      \t\t\tmin = arr[i]; \n  \t}\n  \n  \t// Calculate & return the difference\n  \tint diff = max - min; \n  \treturn diff; \n}\n// Driver Code \nint[] arr = {1, 5, 10, 20}; \nint diff = arrayMaxMinDiff(arr); \nSystem.out.println(\"Difference between largest & smallest elements = \" + diff); \n# Output\nDifference between largest & smallest elements = 19", "category": "Python"}, {"instruction": "Write an SQL statement to add a new row with values in the given products table.", "input": "Table Name: products\nColumns: product_id, product_name, product_price\nValues: 5373, 'Disc', 15.99", "output": "INSERT INTO products (product_id, product_name, product_price)\nVALUES (5373, 'Disc', 15.99)", "category": "Python"}, {"instruction": "Create an algorithm in Python that converts a given number from base 10 to binary.", "input": "8", "output": "def base10_to_binary(n):\n\n    # Create an empty binary array\n    binary_arr = [0] * (int(math.log2(n)) + 1) \n  \n    # Iterate through binary array\n    for i in range(len(binary_arr) - 1, -1, -1): \n        if n >= pow(2, i): \n            n -= pow(2, i) \n            binary_arr[len(binary_arr) - i - 1] = 1\n  \n    return binary_arr \n  \n# Driver Code \nn = 8\nprint(base10_to_binary(n)) # [1, 0, 0, 0]", "category": "Python"}, {"instruction": "Find the product of the elements of a given array in Python.", "input": "[1, 2, 3]", "output": "def product(arr): \n    product = 1\n  \n    # Iterate the array \n    for i in arr: \n        product = product * i \n  \n    return product \n  \n# Driver Code \narr = [1, 2, 3] \nprint(product(arr)) # 6", "category": "Python"}, {"instruction": "Create a conditional statement in Java that prints \"Welcome!\" if the given argument is \"Hi\".", "input": "\"Hi\"", "output": "if (argument.equals(\"Hi\")) {\n    System.out.println(\"Welcome!\");\n}", "category": "Python"}, {"instruction": "Create an algorithm that takes two numbers, a and b, and finds their greatest common divisor (GCD).", "input": "a = 12, b = 18", "output": "// Algorithm to find the GCD of two numbers\n\n// Function to find GCD \nfunction findGCD(a, b) { \n    // If both a and b are 0 \n    if (a == 0 && b == 0) \n        return 0; \n  \n    // If a is 0, GCD is b \n    if (a == 0) \n        return b; \n  \n    // If b is 0, GCD is a \n    if (b == 0) \n        return a; \n  \n    // Find GCD recursively \n    return findGCD(b, a % b); \n}\n\n// Variable to hold a and b\nvar a = 12;\nvar b = 18;\n\n// Find GCDs\nvar gcd = findGCD(a, b); \n  \n// Print GCD\nconsole.log(\"The GCD of\", a, \"and\", b, \"is\", gcd);", "category": "Python"}, {"instruction": "Create a program in Java to check whether the given word is a palindrome or not.", "input": "\"radar\"", "output": "public class Palindrome{ \n    public static boolean checkPalindrome(String str){ \n        int i=0,j=str.length()-1; \n        while(i<j){ \n            if(str.charAt(i) != str.charAt(j)) \n                return false; \n            i++;j--; \n        } \n        return true; \n    } \n}", "category": "Python"}, {"instruction": "Develop an algorithm to find the maximum consecutive repeating character in a given string.", "input": "\"aaaaabcdddddefgggg\"", "output": "def find_max_consecutive_repeating_character(str): \n    maxCount = 0\n    tempCount = 1\n    previous = ''\n\n    # count the number of occurrences\n    # of same character. \n    for i in range(len(str)): \n        if str[i] == previous:\n            tempCount += 1\n\n        else: \n            # Update maximum if required \n            if tempCount > maxCount: \n                maxCount = tempCount \n\n            tempCount = 1\n            previous= str[i] \n\n    return maxCount", "category": "Python"}, {"instruction": "Find the maximum of the numbers in a given array.", "input": "[1, 23, 87, -5, 33]", "output": "def find_max(arr): \n    max_element = arr[0] \n    for i in range(1, len(arr)):\n        if arr[i] > max_element:\n            max_element = arr[i]\n    return max_element", "category": "Python"}, {"instruction": "Develop a program to generate a random number in a given range.", "input": "Lower = 5 and Upper = 20", "output": "import random\n\ndef generate_random_number(lower, upper):\n    return random.randint(lower, upper)", "category": "Python"}, {"instruction": "Write an SQL query that returns the name of all users from the \"Users\" table.", "input": "", "output": "SELECT Name FROM Users;", "category": "Python"}, {"instruction": "Write a SQL query to select all books published after 2015 and sorted alphabetically.", "input": "", "output": "SELECT *\nFROM books\nWHERE YEAR(publication_year) > 2015\nORDER BY book_title ASC;", "category": "Python"}, {"instruction": "Process the curl request and output a JSON from it.", "input": "curl --location --request GET 'https://api.example.com/user/12'", "output": "var request = new XMLHttpRequest();\nrequest.open('GET', 'https://api.example.com/user/12', true);\n\nrequest.onload = function () {\n  // begin accessing JSON data here\n  var data = JSON.parse(this.response);\n\n  if (request.status >= 200 && request.status < 400) {\n    console.log(data);\n  } else {\n    console.log('error');\n  }\n}\n\nrequest.send();", "category": "Python"}, {"instruction": "Create a Java code snippet that takes two integers as parameters and prints the larger one.", "input": "", "output": "public static void printMax(int a, int b) {  \n    if (a > b)\n        System.out.println(a);\n    else\n        System.out.println(b);\n}", "category": "Python"}, {"instruction": "Rewrite the following javascript code such that it prints the numbers 1 to 10.", "input": "for(var i = 0; i > 10; i++) {\n    console.log(i);\n}", "output": "for(var i = 1; i <= 10; i++) {\n    console.log(i);\n}", "category": "Python"}, {"instruction": "Classify the following random forest algorithm instance given the parameters.", "input": "max_depth=5, n_estimators=5", "output": "The given random forest algorithm instance is a supervised learning algorithm with a maximum tree depth of 5 and 5 estimators.", "category": "Python"}, {"instruction": "Write a Java program to display a pattern of numbers.", "input": "", "output": "class PatternTest\n{\n    public static void main(String[] args)\n    {\n        int[][] pattern = {\n            {1,2,3},\n            {4,5,6},\n            {7,8,9}\n        };\n\n        for (int i=0; i<pattern.length; i++) \n        {\n            for (int j=0; j<pattern[i].length; j++) \n            {\n                System.out.print(pattern[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}", "category": "Python"}, {"instruction": "Suggest an algorithm for finding the maximum sum for all subarrays.", "input": "arr = [2, 3, -5, 4]", "output": "The algorithm for finding the maximum sum for all subarrays can be solved using a divide and conquer approach.\n\nFirst, divide the array into two parts by splitting it in half at its middle index. Then, calculate the maximum subarray sum for each of the two parts recursively. Finally, return the greater of the two sums plus the value at the middle index of the array. This will be the maximum sum of all subarrays.", "category": "Python"}, {"instruction": "Create a custom min-heap data structure in Python.", "input": "", "output": "class MinHeap:\n    def __init__(self):\n        self.heap = [] \n \n    def parent(self, i): \n        return (i-1)/2 \n \n    def insertKey(self, k): \n        self.heap.append(k) # Insert the new element at the end of the heap \n        i = len(self.heap)-1 \n        self.heapifyup(i) \n  \n    def heapifyup(self, i): \n        # If the current node is smaller than the parent node \n        # Swap the two nodes \n        if i != 0 and self.heap[int(self.parent(i))] > self.heap[i]: \n            self.heap[int(self.parent(i))], self.heap[i] = self.heap[i], self.heap[int(self.parent(i))]\n            self.heapifyup(self.parent(i))\n  \n    def remove(self):\n        # Get the value of the root node \n        root = self.heap[0] \n        # Move the last element of the heap to the top \n        self.heap[0] = self.heap[-1] \n        # Delete the last element of the heap \n        self.heap.pop()\n        if len(self.heap) > 0:\n            self.heapifydown(0)\n        return root\n  \n    def heapifydown(self, i):\n        # Get the left and right indices \n        left = 2*i+1\n        right = 2*i+2\n        small = i # Make the current node the small node \n  \n        # Compare the left child with the small node \n        if left < len(self.heap) and self.heap[left] < self.heap[small]:\n            small = left\n  \n        # Compare the right child with the small node \n        if right < len(self.heap) and self.heap[right] < self.heap[small]:\n            small = right\n \n        # If any of the children of the current node is smaller than \n        # the current node, then swap the current node with the small node \n        if small != i:\n            self.heap[small], self.heap[i] = self.heap[i], self.heap[small] \n            self.heapifydown(small)", "category": "Python"}, {"instruction": "Find all the prime factors of a given integer.", "input": "100", "output": "def prime_factors(n):\n    # Empty list to store prime factors \n    lst = [] \n    \n    # Divide by 2 while the number is \n    # divisible by 2  \n    while n % 2 == 0: \n        lst.append(2)\n        n = n / 2\n          \n    # n must be odd, now \n    # check all the numbers from 3 to \n    # the square root of n  \n    for i in range(3, int(n**0.5)+1): \n        # check for divisibility of i by n  \n        while n % i== 0: \n            lst.append(i) \n            n = n / i \n          \n    # If n is a prime number then it \n    # will only be divisible by itself  \n    if n > 2:\n        lst.append(n)\n      \n    return lst\n\n# Test  \nprint(prime_factors(100))\n\n# Output\n[2, 2, 5, 5]", "category": "Python"}, {"instruction": "Generate a list that contains the Armstrong numbers in a given range.", "input": "100", "output": "# Code \ndef armstrong_numbers(n): \n    # Empty list to store Armstrong numbers \n    lst = [] \n  \n    for i in range(1, n + 1): \n        s = 0\n        # To find the power \n        m = len(str(i)) \n  \n        # Finding Armstrong numbers \n        temp = i \n        while temp > 0: \n            digit = temp % 10\n            s += digit ** m \n            temp //= 10\n  \n        # Adding the number to list \n        if i == s: \n            lst.append(i) \n  \n    return lst\n\n# Test    \nprint(armstrong_numbers(100)) \n\n# Output\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 153, 370, 371, 407]", "category": "Python"}, {"instruction": "Automatically remove vowels from a sentence.", "input": "Hello, World!", "output": "def remove_vowels(sentence):\n    # Create an empty string.  \n    result = \"\" \n    for letter in sentence:  \n        # Select those characters that are not vowels. \n        if letter not in \"aeiouAEIOU\": \n            result += letter  \n  \n    return result\n\n# Test\nprint(remove_vowels(\"Hello, World!\")) \n\n# Output\nHll, Wrld!", "category": "Python"}, {"instruction": "Create a Python class to encode a string of characters using a Caesar cipher.", "input": "", "output": "class CaesarCipher:\n  \n    def __init__(self, shift):\n        self.shift = shift\n    \n    def encode(self, string):\n        cipher = ''\n        for char in string: \n            if char == ' ':\n                cipher = cipher + char\n            elif  char.isupper():\n                cipher = cipher + chr((ord(char) + self.shift - 65) % 26 + 65)\n            else:\n                cipher = cipher + chr((ord(char) + self.shift - 97) % 26 + 97)\n        return cipher\n\n# Test \ncipher = CaesarCipher(3)\nprint(cipher.encode(\"Hello, World!\"))\n\n# Output\nKhoor, Zruog!", "category": "Python"}, {"instruction": "Generate a list of integers up to the given number n.", "input": "50", "output": "lst = list(range(1, 51)) \nprint(lst)\n\n# Output\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]", "category": "Python"}, {"instruction": "Create a custom encryption algorithm to encode a string of characters.", "input": "Test", "output": "def custom_encrypt(string):\n    result = ''\n    \n    # Loop over each character\n    for character in string: \n        # Get the Unicode code point of the character \n        # and add two to it\n        code = ord(character) + 2 \n        # Convert the code point back to character \n        # and add it to the result\n        result += chr(code) \n\n    # Return the encrypted string\n    return result\n\n# Test the custom_encrypt() function\nencoded_str = custom_encrypt('Test')\nprint(encoded_str)\n# Output: Vguv", "category": "Python"}, {"instruction": "Select the student's name whose matric number is 151763 from the database in MySQL.", "input": "Table \"Students\":\nName      |  Matric No  \nJames     |  151763   \nDavid     |  143563   \nJohn      |  166895", "output": "SELECT Name \nFROM Students \nWHERE Matric No = 151763;", "category": "Python"}, {"instruction": "Write a regular expression to match the valid hex color code.", "input": "", "output": "/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/", "category": "Python"}, {"instruction": "List the books in alphabetical order using JavaScript.", "input": "Books = [\"Alice in Wonderland\", \"To Kill a Mockingbird\", \"The Cat in the Hat\", \"Wuthering Heights\"];", "output": "Books.sort();\nconsole.log(Books);", "category": "Python"}, {"instruction": "Find the minimum number from the given array in Java.", "input": "int arr[]={10, 50, 18, 63, 27};", "output": "int min = arr[0]; \nfor (int i = 1; i < arr.length; i++) \n    if (arr[i] < min) \n        min = arr[i]; \n  \nSystem.out.println(min);", "category": "Python"}, {"instruction": "Write a TensorFlow 2.0 program that calculates the mean of an array.", "input": "[1, 2, 3, 4, 5]", "output": "import tensorflow as tf\n\narr = [1, 2, 3, 4, 5]\n\narr_tensor = tf.constant(arr)\nmean_tensor = tf.reduce_mean(arr_tensor)\n\nwith tf.Session() as sess:\n    mean_value = sess.run(mean_tensor)\nprint(mean_value)", "category": "Python"}, {"instruction": "Create a function called check_restaurant_availability that returns True if a restaurant is open and False if it's closed.", "input": "restaurant_status = {\n    \"monday\": \"closed\",\n    \"tuesday\": \"open\",\n    \"wednesday\": \"closed\",\n    \"thursday\": \"open\",\n    \"friday\": \"closed\",\n    \"saturday\": \"open\",\n    \"sunday\": \"closed\"\n}", "output": "def check_restaurant_availability(restaurant_status):\n    day = datetime.date.today().strftime(\"%A\").lower()\n    return restaurant_status[day] == \"open\"", "category": "Python"}, {"instruction": "Write an SQL query to find the maximum number of orders for each state.", "input": "Orders (id, customer_id, state, order_num)", "output": "SELECT state, MAX(order_num) FROM Orders GROUP BY state;", "category": "Python"}, {"instruction": "Transform the following code into an array of objects in JavaScript.", "input": "var data = [\n    [\"John\", 27], \n    [\"Mark\", 22],\n    [\"David\", 32]\n    ]", "output": "var data = [\n    {name: \"John\", age: 27},\n    {name: \"Mark\", age: 22},\n    {name: \"David\", age: 32}\n];", "category": "Python"}, {"instruction": "Generate 5 random numbers from 1 to 10.", "input": "", "output": "import random\n\nnumbers = random.sample(range(1, 11), 5)\nprint(numbers)\n\n# Output\n# [3, 9, 6, 8, 5]", "category": "Python"}, {"instruction": "Replace all vowels with 'x' in a given string.", "input": "myString = \"Python Programmer\"", "output": "def replace_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    new_string = \"\"\n    for char in string:\n        if char in vowels:\n            new_string += \"x\"\n        else:\n            new_string += char\n    return new_string\n\nprint(replace_vowels(myString))\n\n# Output\n# Pxthxn Prxgrxmmxr", "category": "Python"}, {"instruction": "Simulate a coin toss using Python.", "input": "", "output": "import random\n\ndef coin_toss():\n  result = random.choice([\"heads\", \"tails\"])\n  return result\n\nprint(coin_toss())", "category": "Python"}, {"instruction": "Create an object that holds 3 attributes, each with its own value.", "input": "", "output": "class MyObject:\n \n    def __init__(self, attr1, attr2, attr3):\n        self.attr1 = attr1\n        self.attr2 = attr2\n        self.attr3 = attr3\n\nobj = MyObject('value1', 'value2', 'value3')", "category": "Python"}, {"instruction": "Given a list of strings, how can you join them all together into a single sentence?", "input": "words = [\"hello\", \"world\", \"foo\", \"bar\"]", "output": "sentence = ' '.join(words)\nprint(sentence) # 'hello world foo bar'", "category": "Python"}, {"instruction": "Given two strings s1 and s2, how can you check if s2 is a substring of s1?", "input": "s1 = \"testString\"\ns2 = \"String\"", "output": "if s2 in s1:\n  print(\"s2 is a substring of s1\")\nelse:\n  print(\"s2 is not a substring of s1\")", "category": "Python"}, {"instruction": "Sort a list of user objects by their age", "input": "users = [{'name': 'John', 'age': 10}, {'name': 'Peter', 'age': 20}, {'name': 'Chris', 'age': 15}]", "output": "sorted_users = sorted(users, key=lambda k: k['age'])", "category": "Python"}, {"instruction": "Create a database query in MySQL to display the salary of the employees who work in the \"Accounts\" department.", "input": "Table \"Employees\":\nName  |  Department  |  Salary\nJohn  |  Accounts    |  $55,000\nJane  |  HR          |  $45,000\nGeorge|  IT          |  $60,000", "output": "SELECT Name, Salary\nFROM Employees\nWHERE Department = 'Accounts';", "category": "Python"}, {"instruction": "Given a list of strings, how can you categorize each string into one of the two categories: short and long?", "input": "list = [\"Hello\", \"World\", \"Foo\", \"Bar\"]", "output": "for s in list:\n    if len(s) <=3:\n        category = \"short\"\n    else:\n        category = \"long\"\n    print(f\"{s} : {category}\")", "category": "Python"}, {"instruction": "How can you fill a 2D array with zeros?", "input": "", "output": "my_2d_array = [[0 for col in range(3)] for row in range(3)]", "category": "Python"}, {"instruction": "How can you reverse a given string using a while loop?", "input": "string = \"hello\"", "output": "new_string = \"\"\nindex = len(string) - 1\nwhile index >= 0:\n    new_string += string[index]\n    index -= 1\nprint(new_string) # olleh", "category": "Python"}, {"instruction": "Given a unsorted array, sort it using the quick sort algorithm.", "input": "[5, 4, 8, 7, 1, 3, 10, 9]", "output": "def quickSort(nums): \n    if len(nums) <= 1: \n        return nums\n    pivot = nums[len(nums) // 2] \n    left = [x for x in nums if x < pivot]\n    middle = [x for x in nums if x == pivot] \n    right = [x for x in nums if x > pivot] \n    return quickSort(left) + middle + quickSort(right)\n  \n   \nnums = [5, 4, 8, 7, 1, 3, 10, 9] \nprint(quickSort(nums))", "category": "Python"}, {"instruction": "Create a JavaScript function which takes a string and returns the longest word in it.", "input": "\"This is an example string\"", "output": "function longestWord(str) { \n    let words = str.split(' '); \n    let longestWord = words.reduce((longest, current) => { \n       if (current.length > longest.length) \n          return current; \n       else\n          return longest; \n    }, ''); \n    return longestWord; \n} \n\nconsole.log(longestWord(\"This is an example string\"));", "category": "Python"}, {"instruction": "Transpile the following code into C#.", "input": "var a = 10;\nvar b = 20;\nvar c = a + b;", "output": "int a = 10;\nint b = 20;\nint c = a + b;", "category": "Python"}, {"instruction": "Fill in the blanks in the following SQL query to select the names of customers who have placed more than one order.", "input": "SELECT customer_name FROM Orders WHERE order_count __________ 1", "output": "SELECT customer_name FROM Orders WHERE order_count > 1", "category": "Python"}, {"instruction": "Process the following array of numbers to get the max, min, and average scores.", "input": "scores = [90, 75, 70, 85, 80]", "output": "const scores = [90, 75, 70, 85, 80];\n\nlet maxScore = Math.max(...scores);\nlet minScore = Math.min(...scores);\nlet avgScore = scores.reduce((a, b) => a + b, 0) / scores.length;\n\nconsole.log(`Max Score = ${maxScore}`);\nconsole.log(`Min Score = ${minScore}`);\nconsole.log(`Average Score = ${avgScore}`);", "category": "Python"}, {"instruction": "Generate a correct json output from given data", "input": "name: \"John Doe\"\nage: 23", "output": "{\n \"name\": \"John Doe\",\n \"age\": 23\n}", "category": "Python"}, {"instruction": "Select the last two elements from a given list", "input": "mylist = [1,2,3,4,5]", "output": "last_two_elements = mylist[-2:]\nprint(last_two_elements)\n\n# Output\n# [4, 5]", "category": "Python"}, {"instruction": "Generate an HTML table to display the countries and their population.", "input": "Country  |  Population\nChina    |  1449107485\nIndia    |  1369153466\nUSA      |   330765152", "output": "<table>\n  <tr>\n    <th>Country</th>\n    <th>Population</th>\n  </tr>\n  <tr>\n    <td>China</td>\n    <td>1449107485</td>\n  </tr>\n  <tr>\n    <td>India</td>\n    <td>1369153466</td>\n  </tr>\n  <tr>\n    <td>USA</td>\n    <td>330765152</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Design a loop in Python to find the maximum value from a given array.", "input": "array = [50, 10, 8, 1000, 1024]", "output": "maxValue = array[0]\nfor i in range(1, len(array)): \n    if array[i] > maxValue: \n        maxValue = array[i] \nprint(maxValue)", "category": "Python"}, {"instruction": "Replace the following python code to print out the length of a given string.", "input": "string = 'Hello world'\nprint(string)", "output": "string = 'Hello world'\nprint(len(string))", "category": "Python"}, {"instruction": "Generate an HTML page with a heading and a paragraph.", "input": "", "output": "<html>\n<head>\n    <title>My page</title>\n</head>\n<body>\n    <h1>My Page</h1>\n    <p>This is the content of my page.</p>\n</body>\n</html>", "category": "Python"}, {"instruction": "What is the difference between int and float data types?", "input": "", "output": "The main difference between int and float data types is that an int is a data type used to represent whole numbers, while a float is a data type used to represent numbers with decimal points. An int has a greater range of values than a float, but a float is more precise.", "category": "Python"}, {"instruction": "Create a python list with the following numbers: 27, 44, 28, 34", "input": "", "output": "my_list = [27, 44, 28, 34]", "category": "Python"}, {"instruction": "How many bytes of memory does a 32-bit system have?", "input": "", "output": "A 32-bit system has 4GB of memory, or 4,294,967,296 bytes.", "category": "Python"}, {"instruction": "Analyze this text using spaCy.", "input": "Text: Modern technologies are revolutionizing the way we live and work.", "output": "import spacy\n\nnlp = spacy.load(\"en_core_web_sm\")\n\ndoc = nlp(\"Modern technologies are revolutionizing the way we live and work.\")\n\nfor token in doc:\n    print(token.text, token.lemma_, token.pos_, token.tag_, token.dep_,\n            token.shape_, token.is_alpha, token.is_stop)", "category": "Python"}, {"instruction": "Preprocess this data using Python.", "input": "Data:\n[\n  {\n    \"A\": 1,\n    \"B\": 2,\n    \"C\": 3\n  },\n  {\n    \"A\": 2,\n    \"B\": 3,\n    \"C\": 5\n  },\n  {\n    \"A\": 4,\n    \"B\": 1,\n    \"C\": 9\n  }\n]", "output": "import pandas as pd \n\ndata = [\n  {\n    \"A\": 1,\n    \"B\": 2,\n    \"C\": 3\n  },\n  {\n    \"A\": 2,\n    \"B\": 3,\n    \"C\": 5\n  },\n  {\n    \"A\": 4,\n    \"B\": 1,\n    \"C\": 9\n  }\n]\n\ndf = pd.DataFrame(data)\n\npreprocessed_data = df.apply(lambda x: (x - x.mean()) / x.std())", "category": "Python"}, {"instruction": "Convert this C code to Java.", "input": "int addTwoNumbers(int a, int b)\n{\n    return a + b;\n}", "output": "public int addTwoNumbers(int a, int b)\n{\n    return a + b;\n}", "category": "Python"}, {"instruction": "Generate a random string using C#.", "input": "String length: 8", "output": "var randomString = \"\";\nvar possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\nfor (var i = 0; i < 8; i++)\n    randomString += possible.charAt(Math.floor(Math.random() * possible.length));\n\nconsole.log(randomString);", "category": "Python"}, {"instruction": "Write an if-else statement in Python to print \"Grater than 10\" if a number is greater than 10, and \"Less than 10\" if a number is less than 10.", "input": "Number: 8", "output": "if 8 > 10:\n  print(\"Grater than 10\")\nelse:\n  print(\"Less than 10\")", "category": "Python"}, {"instruction": "Create a while loop in Java to break at the first even number found.", "input": "", "output": "int i = 0;\nwhile (i <= 10) {\n    if (i % 2 == 0) {\n        break;\n    }\n    i++;\n}", "category": "Python"}, {"instruction": "Convert this Ruby code to Python.", "input": "def add_two_numbers(a, b)\n  a + b \nend", "output": "def add_two_numbers(a, b):\n  return a + b", "category": "Python"}, {"instruction": "Use class inheritance to create an object in Java.", "input": "", "output": "// Base class \nclass Vehicle \n{ \n   String brand = \"Ford\"; \n   public void honk() \n   { \n      System.out.println(\"Tuut, tuut!\"); \n   } \n} \n  \n// sub class \nclass Car extends Vehicle \n{ \n   String modelName = \"Mustang\"; \n   public static void main(String[] args) \n   { \n      // Create an object of Car \n      Car myCar = new Car(); \n  \n      // Call the honk method (From the Vehicle class) on the myCar object \n      myCar.honk(); \n  \n      // Display the value of the brand attribute (from the Vehicle class) and the value of the modelName from the Car class \n      System.out.println(myCar.brand + \" \" + myCar.modelName);   \n   } \n}", "category": "Python"}, {"instruction": "Generate HTML element using Javascript.", "input": "Tag name: p", "output": "let p_element = document.createElement('p');", "category": "Python"}, {"instruction": "Write an algorithm to insert a new element in a given sorted array.", "input": "", "output": "def insert(arr, num): \n    # start from the rightmost element\n    i = len(arr) - 1\n    while ( i >= 0 and arr[i] > num):\n        arr[i+1] = arr[i]\n        i -= 1\n  \n    arr[i+1] = num", "category": "Python"}, {"instruction": "How would you access the value of the key 'name' in the following dictionary?", "input": "my_dict = {\n 'name': 'John',\n 'age': 22\n}", "output": "my_dict['name']", "category": "Python"}, {"instruction": "Create a React component to display a greeting message.", "input": "", "output": "import React from 'react';\n\nfunction Greeting(props) {\n  return <h1>Hello, {props.name}!</h1>;\n}\n\nexport default Greeting;", "category": "Python"}, {"instruction": "Using a while loop, print the numbers from 1 to 10.", "input": "", "output": "i = 1\nwhile i <= 10:\n    print(i)\n    i += 1", "category": "Python"}, {"instruction": "Using a for loop, print the characters of a string.", "input": "string = \"Programming\"", "output": "for ch in string:\n    print(ch)", "category": "Python"}, {"instruction": "Implement a code which reverses a given string.", "input": "String: \"Hello World\"", "output": "def reverse_string(string): \n    rev_string = \"\" \n    for i in range(len(string)-1, -1, -1): \n        rev_string += string[i] \n    return rev_string \n\nprint(reverse_string(\"Hello World\"))\n\nOutput:\ndlroW olleH", "category": "Python"}, {"instruction": "Create a code which prints a multiplication table of given size.", "input": "Size: 4", "output": "def print_multiplication_table(n): \n    for i in range(1, n+1): \n        for j in range(1, n+1): \n            print(i*j, end=\"\\t\") \n        print(\"\\n\") \n\nprint_multiplication_table(4)\n\nOutput:\n1\t2\t3\t4\t\n2\t4\t6\t8\t\n3\t6\t9\t12\t\n4\t8\t12\t16", "category": "Python"}, {"instruction": "Rotate the given array by k steps.", "input": "Array: [1,2,3,4,5]\nk: 2", "output": "def rotate_array(arr, k): \n    for i in range(k): \n        arr.insert(0, arr.pop()) \n    return arr\n\nprint(rotate_array([1,2,3,4,5],2))\n\nOutput:\n[4, 5, 1, 2, 3]", "category": "Python"}, {"instruction": "Compute the maximum subarray sum for the given array.", "input": "Array: [-2,1,-3,4,-1,2,1,-5,4]", "output": "def max_subarray_sum(arr): \n    max_so_far = 0 \n    max_ending_here = 0\n\n    for i in range(len(arr)): \n        max_ending_here += arr[i] \n\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here \n\n        if max_ending_here < 0: \n            max_ending_here = 0 \n    \n    return max_so_far\n\nprint(max_subarray_sum([-2,1,-3,4,-1,2,1,-5,4]))\n\nOutput:\n6", "category": "Python"}, {"instruction": "Write a code for concatenating two arrays.", "input": "Array1: [1,2,3]\nArray2: [4,5,6]", "output": "def concat_arrays(arr1, arr2): \n    return arr1 + arr2\n\nprint(concat_arrays([1,2,3], [4,5,6]))\n\nOutput:\n[1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Write a code which takes two strings and prints its longest common subsequence.", "input": "String1: \"ABCDGH\"\nString2: \"AEDFHR\"", "output": "def longest_common_subsequence(str1, str2): \n    m = len(str1) \n    n = len(str2) \n\n    matrix = [[0 for x in range(n+1)] for x in range(m+1)] \n\n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0: \n                matrix[i][j] = 0\n            elif str1[i-1] == str2[j-1]: \n                matrix[i][j] = matrix[i-1][j-1] + 1\n            else: \n                matrix[i][j] = max(matrix[i-1][j], matrix[i][j-1]) \n\n    result = \"\"\n    i = m \n    j = n \n\n    while i > 0 and j > 0: \n\n        if str1[i-1] == str2[j-1]: \n            result += str1[i-1] \n            i -= 1\n            j -= 1\n\n        elif matrix[i-1][j] > matrix[i][j-1]: \n            i -= 1\n        else: \n            j -= 1\n    \n    return result[::-1] \n\nprint(longest_common_subsequence(\"ABCDGH\", \"AEDFHR\"))\n\nOutput:\nADH", "category": "Python"}, {"instruction": "Write a code for creating an array with values from 0 to n.", "input": "n = 5", "output": "def create_array(n): \n    array = []\n    for i in range(n+1): \n        array.append(i)\n    return array\n\nprint(create_array(5))\n\nOutput:\n[0, 1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Write a SQL query to select the grocery items under $50 from the table.", "input": "Table \"Grocery\":\nID  |  Name  |  Price \n1   |  Apple |   15\n2   |  Banana|   20\n3   |  Kale  |   7\n4   |  Orange|   45", "output": "SELECT Name, Price\nFROM Grocery\nWHERE Price <= 50;", "category": "Python"}, {"instruction": "Implement a code that checks if a given word is palindrome.", "input": "Word: malayalam", "output": "def is_palindrome(word): \n    reversed_word = word[::-1]\n    if reversed_word == word: \n        return True\n    else: \n        return False\n\nprint(is_palindrome(\"malayalam\"))\n\nOutput:\nTrue", "category": "Python"}, {"instruction": "Run the code and identify the output.", "input": "def string_compressor(string): \n    length = len(string) \n    compressed = \"\" \n    count = 1 \n    i = 1\n    while i < length: \n        if string[i] == string[i - 1]: \n            count += 1\n        else: \n            compressed = compressed + string[i - 1] + str(count) \n            count = 1\n        i += 1\n    compressed = compressed + string[i - 1] + str(count) \n    return compressed\nprint(string_compressor(\"aabcccccaaa\"))", "output": "a2b1c5a3", "category": "Python"}, {"instruction": "Create a SQL query to find all users who have a premium account.", "input": "", "output": "SELECT * FROM users WHERE account_type='premium';", "category": "Python"}, {"instruction": "Order the following array of dictionaries by their \"priority\" key.", "input": "my_list =[\n    {\n        'name': 'Task 1',\n        'priority': 4\n    },\n    {\n        'name': 'Task 2',\n        'priority': 6\n    },\n    {\n        'name': 'Task 3',\n        'priority': 2\n    },\n    {\n        'name': 'Task 4',\n        'priority': 8\n    },\n]", "output": "my_list.sort(key=lambda x: x['priority'])\nprint(my_list)", "category": "Python"}, {"instruction": "Create a function to capitalize all the words of a sentence.", "input": "sentence = \"this is a test\"", "output": "def capitalize_words(sentence):\n    \"\"\"This function capitalizes all the words of a sentence\"\"\"\n    words = sentence.split()\n    capitalized_words = []\n    for word in words:\n        capitalized_words.append(word.capitalize())\n    return ' '.join(capitalized_words)\n\nprint(capitalize_words(sentence))", "category": "Python"}, {"instruction": "Implement quick sort on an array.", "input": "unsorted_nums = [2, 8, 1, 5, 9]", "output": "def partition(arr, low, high): \n    i = (low-1)\n    pivot = arr[high]\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i = i+1\n            arr[i], arr[j] = arr[j], arr[i] \n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return (i+1) \n\ndef quick_sort(arr, low, high): \n    if low < high:\n        pi = partition(arr, low, high) \n        quick_sort(arr, low, pi-1) \n        quick_sort(arr, pi+1, high)\n\nquick_sort(unsorted_nums, 0, len(unsorted_nums)-1)\nprint(unsorted_nums)", "category": "Python"}, {"instruction": "Find the sum of the elements of an array.", "input": "arr = [1,2,3,4]", "output": "def find_sum(arr):\n    \"\"\"This function finds the sum of the elements of an array\"\"\"\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n\nsum = find_sum(arr)\nprint(\"The sum of the elements of the array is:\", sum)", "category": "Python"}, {"instruction": "Construct a function to convert feet to meters.", "input": "", "output": "def feet_to_meters(feet):\n    \"\"\"This function converts feet to meters\"\"\"\n    meters = feet * 0.3048\n    return meters", "category": "Python"}, {"instruction": "Provide a code for creating a function which receives an array of characters and prints them.", "input": "['A', 'B', 'C', 'D']", "output": "def print_array_of_chars(arr): \n    for ch in arr: \n        print(ch) \n        \nprint_array_of_chars(['A', 'B', 'C', 'D'])\n\nOutput:\nA\nB\nC\nD", "category": "Python"}, {"instruction": "Find all unique values in a given dataset", "input": "dataset = [['A', 4], ['B', 5], ['A', 3], ['C', 2]]", "output": "# Get all the values from the dataset\nall_values = [value for _, value in dataset]\n\n# Get the unique values\nunique_values = set(all_values)\n\nprint(unique_values)\n\n# Output\n# {2, 3, 4, 5}", "category": "Python"}, {"instruction": "Find the most frequent value in a list", "input": "mylist = [1,2,3,4,4,4,4,5,5]", "output": "from collections import Counter\n\ndef get_most_frequent_value(mylist):\n    counted_list = Counter(mylist)\n    return counted_list.most_common(1)[0][0]\n\nmost_frequent_value = get_most_frequent_value(mylist)\nprint(most_frequent_value)\n\n# Output\n# 4", "category": "Python"}, {"instruction": "Measure the execution time of a given python script.", "input": "", "output": "import time\n \ndef measure_time():\n  # Start the timer\n  start = time.time()\n \n  # Execute the code\n  # ----- Code to be measured ------\n  # -------------------------------\n \n  # Stop the timer\n  end = time.time()\n  \n  # Return the difference\n  return end - start\n\nexecution_time = measure_time()\nprint(execution_time)", "category": "Python"}, {"instruction": "Create a sorting algorithm to quickly sort an array of integers", "input": "Array: [5, 4, 6, 7, 1]", "output": "function quickSort(arr) {\n  if (arr.length <= 1) { \n    return arr;\n  }\n  let pivot = arr.pop();\n  let left = [];\n  let right = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < pivot) {\n      left.push(arr[i]);\n    } else {\n      right.push(arr[i]);\n    }\n  }\n  return quickSort(left).concat([pivot], quickSort(right));\n}\n\nconsole.log(quickSort([5, 4, 6, 7, 1])); // [1, 4, 5, 6, 7]", "category": "Python"}, {"instruction": "Write code to count how many times a character appears in a string", "input": "String: \"Apple\"\nCharacter: \"p\"", "output": "let string = 'Apple';\nlet count = 0;\n\nfor (let i = 0; i < string.length; i++) {\n  if (string[i] == 'p') {\n    count++;\n  }\n}\n\nconsole.log(count); //2", "category": "Python"}, {"instruction": "Construct a regular expression to match a given string", "input": "String: \"Hello World!\"", "output": "/^Hello\\sWorld!$/", "category": "Python"}, {"instruction": "Compose a JavaScript code to sum all odd numbers in the range", "input": "From 1 to 10,", "output": "let sum = 0;\nfor (let i = 1; i <= 10; i++) {\n  if (i % 2 != 0) {\n      sum += i;\n  }\n}\nconsole.log(sum); //25", "category": "Python"}, {"instruction": "Generate CSS code to change the font size of the given element", "input": "Element: <h1>\nFont size: 26px", "output": "h1 {\n  font-size: 26px;\n}", "category": "Python"}, {"instruction": "Write a code to delete the element at a given index in an array", "input": "Example array: [4, 5, 6, 7, 8]\nIndex: 2", "output": "let array = [4, 5, 6, 7, 8];\nlet index = 2;\narray.splice(index, 1);\nconsole.log(array);\n// Output: [4, 5, 7, 8]", "category": "Python"}, {"instruction": "Write JavaScript to print the following output", "input": "4 6 8", "output": "for(let i = 4; i <= 8; i += 2) {\n  console.log(i);\n}", "category": "Python"}, {"instruction": "Gather information about a given product", "input": "HTC U12+", "output": "The HTC U12+ is a flagship Android phone manufactured by HTC Corporation. It features a 6-inch LCD display, 12MP dual rear camera, 8MP front camera, 6GB of RAM, and 64GB of storage. It also has NFC and a 3,420 mAh battery.", "category": "Python"}, {"instruction": "Explain what is the value of the variable x after this following code is executed:", "input": "x = 5\ny = x + 9", "output": "The value of x after the code is executed is 5. After y is assigned the value of x + 9, the value of x is unchanged.", "category": "Python"}, {"instruction": "Write a Java code snippet to print the following line of text: \u201cHello, World!\u201d", "input": "", "output": "System.out.println(\"Hello, World!\");", "category": "Python"}, {"instruction": "Using the given code, create a function \"calculate_area\" which will take two integer parameters and calculate the area of a rectangle.\n\ndef calculate_area(length, width):\n    #TODO\n    pass", "input": "", "output": "def calculate_area(length, width):\n    return length * width", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to log the following string to the console: \u201cToday is a great day!\u201d", "input": "", "output": "console.log(\"Today is a great day!\");", "category": "Python"}, {"instruction": "Write a Python script to create a webserver that can respond to \"GET\" requests from a web browser.", "input": "", "output": "import http.server\nimport socketserver\n\nPORT = 8080\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n    print(\"Serving at port\", PORT)\n    httpd.serve_forever()", "category": "Python"}, {"instruction": "Generate a code this that calculates the gross salary including allowance", "input": "Basic salary: 10,000\nAllowance: 4,000", "output": "let basicSalary = 10000;\nlet allowance = 4000;\nlet grossSalary = basicSalary + allowance;\n\nconsole.log(grossSalary); //14,000", "category": "Python"}, {"instruction": "Write the most efficient JavaScript function to reverse a given array.", "input": "const array = [1, 2, 3, 4, 5]", "output": "function reverseArray(array) {\n  let leftIndex = 0;\n  let rightIndex = array.length - 1;\n  while (leftIndex < rightIndex) {\n    const temp = array[leftIndex];\n    array[leftIndex] = array[rightIndex];\n    array[rightIndex] = temp;\n    leftIndex++;\n    rightIndex--;\n  }\n  return array;\n}", "category": "Python"}, {"instruction": "Create a JSON object with the following data: three fruits of each color {red: [apple, watermelon, strawberry], green apple, kiwi, honeydew], yellow: [banana, lemon, mango]}", "input": "", "output": "{\n  \"red\": [\"apple\", \"watermelon\", \"strawberry\"],\n  \"green\": [\"apple\", \"kiwi\", \"honeydew\"],\n  \"yellow\": [\"banana\", \"lemon\", \"mango\"]\n}", "category": "Python"}, {"instruction": "Implement a python class named 'Temperature' that ranks a temperature value as cold, warm, or hot given a threshold value of 30.", "input": "", "output": "class Temperature:\n  def __init__(self, value, threshold=30):\n    self.value = value\n    self.threshold = threshold\n\n  def rank(self):\n    if self.value < self.threshold:\n        return \"cold\"\n    elif self.value == self.threshold:\n        return \"warm\"\n    else:\n        return \"hot\"", "category": "Python"}, {"instruction": "Rewrite the following piece of code in Python.", "input": "for (i = 0; i < 10; i++)\n    if (i % 2 == 0)\n        printf(\"%d\", i);", "output": "for i in range(10):\n    if i % 2 == 0:\n        print(i)", "category": "Python"}, {"instruction": "Write a function in C to print numbers from 1 to 100 each in a new line.", "input": "", "output": "#include<stdio.h>\n \n// Function to print number from 1 to 100\nvoid printNumbers() {\n    // Loop to print the numbers from 1 to 100\n    for (int i = 1; i <= 100; i++) {\n        printf(\"%d\\n\", i);\n    }\n}", "category": "Python"}, {"instruction": "Create a function in Java that changes a given string to uppercase.", "input": "This is a sample string.", "output": "String input = \"This is a sample string\";\n\nString upper = input.toUpperCase();\n\nSystem.out.println(upper);", "category": "Python"}, {"instruction": "Create a program using C++ to check whether a given number is a prime number.", "input": "15", "output": "int n = 15;\nbool prime = true;\nfor(int i = 2; i < n; i++)\n{\n    if (n % i == 0)\n    {\n        prime = false;\n        break;\n    }\n}\n\nif (prime)\n{\n    cout << \"The number is prime\";\n}\nelse\n{\n   cout << \"The number is not prime\";\n}", "category": "Python"}, {"instruction": "Create a program in Python that searches for a word in a string.", "input": "This is a sample string\nword", "output": "def search(string, word):\n    if word in string:\n       return \"The word is present in the sentence\"\n    else: \n       return  \"The word is not present in the sentence\"", "category": "Python"}, {"instruction": "Create a program in Java to reverse a sentence.", "input": "This is a sample sentence.", "output": "String input = \"This is a sample sentence\";\n\nString reversed = new StringBuffer(input)\n             .reverse()\n             .toString();\n    \nSystem.out.println(reversed);", "category": "Python"}, {"instruction": "Write a JavaScript function that takes a string and an array of strings. Return an array with elements from the string filtered by the array of strings provided.", "input": "string = \"Apple, Banana, Orange, Kiwi\"; \narray = [\"Apple\", \"Orange\"]", "output": "function filterStrings(string, arr) {\n  let strings = string.split(', ');\n  let result = [];\n  for (let str of strings) {\n    if (arr.includes(str)) {\n      result.push(str);\n    }\n  }\n  return result;\n}", "category": "Python"}, {"instruction": "Fix the bug in the following code by modifying the function is_star_jumping_high_enough:\n\ndef is_star_jumping_high_enough(star_height):\n    \"\"\"return true if star height is greater than 5\"\"\"\n    if star_height < 5:\n        return True", "input": "", "output": "def is_star_jumping_high_enough(star_height):\n    \"\"\"return true if star height is greater than 5\"\"\"\n    if star_height > 5:\n        return True", "category": "Python"}, {"instruction": "Write a C# method that takes in an integer and multiplies it by 5", "input": "", "output": "public static int multiplyBy5(int num) {\n    return num * 5;\n}", "category": "Python"}, {"instruction": "Write a Python function that finds and returns the number of occurrences of a particular character in a string.", "input": "", "output": "def countChar(string, char):\n  ctr = 0\n  for s in string:\n    if s == char:\n      ctr += 1\n  return ctr", "category": "Python"}, {"instruction": "Implement a JavaScript ES6 class 'Rectangle' that has two properties length and breadth.", "input": "", "output": "class Rectangle {\n  constructor(length, breadth) {\n    this.length = length;\n    this.breadth = breadth;\n  }\n}", "category": "Python"}, {"instruction": "Create an HTML page with a navigation bar that links to three other HTML pages.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n<title>My Navigation Page</title>\n</head>\n<body>\n<div>\n  <a href=\"page1.html\">Page 1</a>\n  <a href=\"page2.html\">Page 2</a>\n  <a href=\"page3.html\">Page 3</a>\n</div>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a Bash shell script to print all argument values passed to the script.", "input": "", "output": "#!/bin/bash\nfor i in \"$@\"\ndo\n  echo \"$i\"\ndone", "category": "Python"}, {"instruction": "Write a C++ function that takes in a linked list and a value, and inserts the value as the head node of the list.", "input": "list = [7, 8, 10]\n  value = 5", "output": "Node* insertFront(Node* head, int value) {\n  Node* tmp = new Node;\n  tmp->data = value;\n  tmp->next = head;\n  head = tmp;\n  return head;\n}", "category": "Python"}, {"instruction": "Compute the edit distance between two provided words using the Levenshtein algorithm.", "input": "word1 = \"cat\"\nword2 = \"bat\"", "output": "def levenshteinDistance(word1, word2):\n  m = len(word1)\n  n = len(word2)\n  \n  dp = [[0 for i in range(n + 1)] for j in range(m + 1)] \n  \n  for i in range(m + 1): \n    for j in range(n + 1): \n      if i == 0: \n        dp[i][j] = j\n        \n      elif j == 0: \n        dp[i][j] = i\n      \n      elif word1[i - 1] == word2[j - 1]: \n        dp[i][j] = dp[i - 1][j - 1] \n      \n      else: \n        dp[i][j] = 1 + min(dp[i][j - 1],  \n                            dp[i - 1][j],  \n                            dp[i - 1][j - 1]) \n\n  return dp[m][n]", "category": "Python"}, {"instruction": "Write a Java method that takes in a string and returns an array containing all the possible permutations of this string.", "input": "", "output": "public static ArrayList<String> allPermutations(String inputString){\n    ArrayList<String> permutations = new ArrayList<>();\n    if (inputString.length() == 0) {\n        permutations.add(\"\");\n        return permutations;\n    }\n\n    char first = inputString.charAt(0);\n    String remainder = inputString.substring(1);\n    ArrayList<String> words = allPermutations(remainder);\n    for (String word : words) {\n        for (int j = 0; j <= word.length(); j++) {\n            permutations.add(insertCharAt(word, first, j));\n        }\n    }\n    return permutations;\n}\n\npublic static String insertCharAt(String word, char c, int i) {\n    String start = word.substring(0, i);\n    String end = word.substring(i);\n    return start + c + end;\n}", "category": "Python"}, {"instruction": "Create a CSS stylesheet that colors the background of a webpage with a random color whenever the page is refreshed.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n<title>Random Background</title>\n<style type=\"text/css\">\n  body {\n    background-color: <?php echo '#'.str_pad(dechex(mt_rand(0, 0xFFFFFF)), 6, '0', STR_PAD_LEFT); ?>;\n  }\n</style>\n</head>\n<body>\n\n</body>\n</html>", "category": "Python"}, {"instruction": "Write an HTML page that displays a single line of text saying \"Hello World\".", "input": "", "output": "<html>\n    <head>\n        <title>Hello World</title>\n    </head>\n    <body>\n        <p>Hello World</p>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Design a text-based game in C++ in which the player can move around the game world.", "input": "", "output": "#include <iostream>\n#include <string>\n\nstd::string room_name;\nint player_position_x = 0;\nint player_position_y = 0;\n\nvoid move_player(int x, int y) {\n    player_position_x += x;\n    player_position_y += y;\n    room_name = get_room_name(player_position_x, player_position_y);\n    std::cout << \"Moved to \" << room_name << std::endl;\n}\n\nstd::string get_room_name(int x, int y) {\n    std::string name;\n    // implement function to return the name of the room at given coordinates\n \n    return name;\n}\n\nint main() {\n    while(true) {\n        std::string input;\n        std::cout << \"Where do you want to go?\" << std::endl;\n        std::cin >> input;\n        // implement function to interpret user input and move the player accordingly\n    }\n    return 0;\n}", "category": "Python"}, {"instruction": "Using the given code, implement the function \"add_two_numbers\" which will take two integers and return their sum.", "input": "def add_two_numbers(x, y):\n    #TODO\n    pass", "output": "def add_two_numbers(x, y):\n    return x + y", "category": "Python"}, {"instruction": "Explain the use of try-except statements in Python", "input": "", "output": "Try-except statements are used to handle errors and exceptions in Python. The general syntax for a try-except statement is try: ...except: ... The code that could potentially raise an exception is put inside the try block, while the code to handle the exception is put inside the except block. If an exception occurs, the code inside the except block is executed and the program execution continues normally afterwards. If no exception occurs, the code inside the except block is skipped.", "category": "Python"}, {"instruction": "What is an example of a flag in programming?", "input": "", "output": "A flag is a boolean (true/false) value that is used to track the state of a program or condition. It can be used to execute certain statements depending on the value of the flag. For example, a program can have a flag that keeps track of whether the user has logged in or not. If the flag is set to true, certain features of the program are enabled; if it is set to false, these features are disabled.", "category": "Python"}, {"instruction": "Define a function to calculate the product of three numbers.", "input": "", "output": "def product_of_three(a, b, c): \n\treturn a * b * c", "category": "Python"}, {"instruction": "Rewrite the code block in an optimized way.", "input": "nums = [1, 2, 3, 4, 5, 6]\nnew_nums = []\nfor num in nums:\n\tnew_nums.append(num + 1)", "output": "nums = [1, 2, 3, 4, 5, 6]\nnew_nums = [num + 1 for num in nums]", "category": "Python"}, {"instruction": "Rewrite the following selection sort algorithm in Python.", "input": "def selectionSort(arr):\n  for i in range(len(arr)):\n    minIndex = i\n    for j in range(i + 1, len(arr)):\n      if arr[minIndex] > arr[j]:\n        minIndex = j\n    arr[i], arr[minIndex] = arr[minIndex], arr[i]", "output": "def selection_sort(arr):\n  for i in range(len(arr)):\n    min_index = i\n    for j in range(i + 1, len(arr)):\n      if arr[min_index] > arr[j]:\n        min_index = j\n    arr[i], arr[min_index] = arr[min_index], arr[i]", "category": "Python"}, {"instruction": "Given the following Java code, can you spot the error?", "input": "public class MyClass {\n  int x = 10;\n  int y = 20;\n\n  public static int add(int x, int y) {\n    int sum = x + y;\n    return sum;\n  }\n}", "output": "The method add() is a static method and cannot directly access the instance variables x and y. The error can be fixed by passing in the two parameters x and y to the add() method: \n\npublic static int add(int x, int y) {\n    int sum = x + y;\n    return sum;\n}", "category": "Python"}, {"instruction": "Write a function in Javascript to return the second highest number in an array.", "input": "Array: [1, 2, 3, 11, 4, 5]", "output": "function secondHighestNumber(arr) {\n  let sortedArr = arr.sort(function(a, b) {\n    return b - a;\n  });\n\n  return sortedArr[1];\n}", "category": "Python"}, {"instruction": "Compare two dictionaries for equality and return the result.", "input": "a = {1:4, 2:5, 3:6} \nb = {2:5, 3:6, 1:4}", "output": "def compare_dicts(a, b): \n\t# Check key-value pairs in both dicts \n\tif a.items() == b.items(): \n\t\treturn True\n\telse: \n\t\treturn False\n\n# Output \nprint(compare_dicts(a, b))", "category": "Python"}, {"instruction": "Combine the following two items in an array.", "input": "Item1: 2\nItem2: [3, 4, 5]", "output": "[2, 3, 4, 5]", "category": "Python"}, {"instruction": "How can we convert a sql query into pandas code?", "input": "", "output": "We can use the read_sql_query() function in the pandas library to convert a SQL query into pandas code. The read_sql_query() function takes the SQL query and a connection object as argument and returns the corresponding DataFrame object.", "category": "Python"}, {"instruction": "Given a Python dictionary, create a function to return the most common key in the dictionary.", "input": "d = {\n  'a': 4,\n  'b': 3,\n  'c': 2,\n  'd': 2\n}", "output": "def most_common_key(d):\n  counts = [(key, value) for key, value in d.items()]\n  max_count = max(counts, key=lambda item: item[1])\n  return max_count[0]", "category": "Python"}, {"instruction": "TGiven the following C++ code, implement a function to reverse a string.", "input": "#include <string>\n\nstd::string myString = \"hello world\";", "output": "#include <string>\n#include <algorithm>\n\nstd::string myString = \"hello world\";\n\nstd::string reverseString(const std::string &str) {\n  std::string reversedStr(str.rbegin(), str.rend());\n  return reversedStr;\n}", "category": "Python"}, {"instruction": "Design a SQL query to find the books published after 2015.", "input": "", "output": "SELECT * FROM books WHERE year > 2015;", "category": "Python"}, {"instruction": "What is the difference between a static method and an instance method in Python?", "input": "", "output": "A static method is a method that does not have access to the instance of the class and so it can't be used to access instance variables. A static method is associated with the class itself, not with any particular instance. A static method is often used to create utility functions that don't need to be accessed from instance level. \n\nAn instance method requires an object or instance of a class to work. An instance method can access the instance variables of the class and has access to the self object which is an instance of the class. An instance method can also access static methods and static variables of the class.", "category": "Python"}, {"instruction": "Verify that the following web development code is correct.", "input": "<html>\n  <head>\n    <title>My first web page</title>\n  </head>\n  <body>\n    <p>Hello World!</p>\n  </body>\n</html>", "output": "Yes, the code is correct.", "category": "Python"}, {"instruction": "Write a JavaScript program to group an array of objects based on a property and sum up the values of the grouped objects.", "input": "arr = [\n   {name: 'John', salary: 100},\n   {name: 'Heather', salary: 200},\n   {name: 'John', salary: 300},\n   {name: 'Heather', salary: 400}\n]", "output": "let groupedArray = arr.reduce((acc, cur) => {\n  let result = acc.find(item => item.name === cur.name);\n  if (!result) {\n    result = {name: cur.name, salary: 0};\n    acc.push(result);\n  }\n  result.salary += cur.salary;\n  return acc;\n}, []);\n\nconsole.log(groupedArray);", "category": "Python"}, {"instruction": "Clean up the following HTML string so it can be rendered properly.", "input": "HTML string:\n\n<div>\n  <h1>This is a header</h2>\n  <p>paragraph<p>\n</div>", "output": "<div>\n  <h1>This is a header</h1>\n  <p>paragraph</p>\n</div>", "category": "Python"}, {"instruction": "Construct a SQL query to find the top 3 highest scored games.", "input": "", "output": "SELECT name, score\nFROM Games\nORDER BY score DESC\nLIMIT 3;", "category": "Python"}, {"instruction": "What are the properties of a good algorithm?", "input": "", "output": "A good algorithm should have the following properties: correctness, completeness, accuracy, robustness, time complexity, memory complexity, scalability, and reusability. The correctness of an algorithm means that it should produce the correct output for every possible input. The completeness refers to whether the algorithm will terminate and produce a result for every input. Accuracy refers to the correctness of the results. Robustness refers to the ability of the algorithm to handle unpredictable input and produce the same output every time. Time and memory complexity refers to how much time and memory the algorithm takes to execute. Scalability indicates how well the algorithm can handle larger inputs and outputs, and reusability means how easy it is for other programmers to use the algorithms for their own purposes.", "category": "Python"}, {"instruction": "Create a function for printing each letter of a string on a separate line.", "input": "str = \"Hello World\"", "output": "def print_letter_separately(str): \n\tfor letter in str: \n\t\tprint(letter) \n\n# Output \nprint_letter_separately(str)", "category": "Python"}, {"instruction": "Write a SQL query to return the names of all employees who make over $50,000.", "input": "", "output": "SELECT name FROM employees WHERE salary > 50000;", "category": "Python"}, {"instruction": "Create a function in Python that will take two parameters: a string and an integer, and return the string repeated the amount of times specified by the integer.", "input": "", "output": "def repeat(string, num_repetitions):\n    return string * num_repetitions", "category": "Python"}, {"instruction": "Write a Python code snippet to prompt the user to enter their age and store that value in a variable called \"age\".", "input": "", "output": "age = int(input(\"Please enter your age: \"))", "category": "Python"}, {"instruction": "Create a list comprehension statement in Python that prints all the even numbers from a list of numbers from 1 to 10.", "input": "", "output": "[n for n in range(1, 11) if n % 2 == 0]", "category": "Python"}, {"instruction": "Write a query in SQL to find the names and age of all employees that work in the IT department.", "input": "", "output": "SELECT name, age FROM employees\nWHERE department = 'IT';", "category": "Python"}, {"instruction": "Write a Python program that prints all numbers from 1 to 100 that are divisible by both 5 and 7.", "input": "", "output": "for num in range(1, 101):\n    if (num%5==0) and (num%7==0):\n        print(num)", "category": "Python"}, {"instruction": "What type of function does the following code represent?", "input": "function foo(x, y) {\n return x * y;\n}", "output": "This code represents a multiplication function.", "category": "Python"}, {"instruction": "Given an acute angled triangle, write a function to compute its area using Heron's formula.", "input": "", "output": "def heron_area(a, b, c): \n\t# calculate the semi-perimeter \n\ts = (a + b + c) / 2\n\n\t# calculate the area \n\tarea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\treturn area", "category": "Python"}, {"instruction": "Convert the following if-else statement written in JavaScript to a ternary operator.", "input": "if (x > 0) {\n result = true;\n} else {\n result = false;\n}", "output": "let result = (x > 0) ? true : false;", "category": "Python"}, {"instruction": "How would you create a function in JavaScript that returns a string that contains the word \u201cHello\u201d 5 times?", "input": "", "output": "function helloFiveTimes() {\n return \"Hello \" + \"Hello \" + \"Hello \" + \"Hello \" + \"Hello \";\n}", "category": "Python"}, {"instruction": "Write an if-else statement in C# that returns \u201cHello World!\" if the value of variable `x` is greater than 10, otherwise return \u201cGoodbye World!\u201d", "input": "", "output": "if(x > 10) {\n  Console.WriteLine(\"Hello World!\");\n} else {\n  Console.WriteLine(\"Goodbye World!\");\n}", "category": "Python"}, {"instruction": "Find the median of this sequence of numbers: 4, 3, 7, 10.", "input": "", "output": "6", "category": "Python"}, {"instruction": "Write a for loop that prints all odd numbers between 1 and 10.", "input": "", "output": "for(let i = 1; i <= 10; i++){\n if(i % 2 !== 0) {\n  console.log(i);\n }\n}", "category": "Python"}, {"instruction": "Write a JavaScript code that returns the current date in the format \u201cWednesday, November 20, 2019\u201d.", "input": "", "output": "let today = new Date();\nlet day = today.getDay();\nlet daylist = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];\nlet month = today.getMonth()+1;\nlet year = today.getFullYear();\n\nlet result = daylist[day]+\", \"+month+\" \"+today.getDate()+\", \"+year;", "category": "Python"}, {"instruction": "Update the following SQL query to return all the values in the `students` table.", "input": "SELECT * FROM students where age > 20;", "output": "SELECT * FROM students;", "category": "Python"}, {"instruction": "What is a stack in Computer Science?", "input": "", "output": "A stack is a data structure that works on the principle of Last in First Out (LIFO). It is used to store and retrieve elements in a particular order, and all operations of insertion and retrieval are performed at one end of the stack, referred to as the top. There are two main operations in a stack: Push - adds an item to the top, and Pop - removes an item from the top.", "category": "Python"}, {"instruction": "How can you complete the console.log statement so that it prints the value of the variable `a`?", "input": "let a = 5;\nconsole.log(", "output": "console.log(a);", "category": "Python"}, {"instruction": "Write a SQL query to list the name of customers and associated shipping addresses.", "input": "", "output": "SELECT c.name, s.address\nFROM customers c\nINNER JOIN shipping_address s\nON c.id = s.customer_id", "category": "Python"}, {"instruction": "Write a C# program to sort a given array using the Quick Sort algorithm.", "input": "array = [8, 4, 1, 9, 6]", "output": "using System;\n\nnamespace QuickSortExample\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int[] array = { 8, 4, 1, 9, 6 };\n            int left = 0;\n            int right = array.Length - 1;\n\n            quickSort(array, left, right);\n\t\n            Console.WriteLine(\"Sorted array is:\");\n            foreach (int val in array)\n            {\n                Console.WriteLine(val);\n            }\n            \n        }\n\n        static void quickSort(int[] array, int left, int right)\n        {\n            if (left < right)\n            {\n                int pivotIndex = partition(array, left, right);\n\t\n                quickSort(array, left, pivotIndex - 1);\n                quickSort(array, pivotIndex + 1, right);\n            }\n        }\n\n        static int partition(int[] array, int left, int right)\n        {\n            int pivot = array[right];\n            int pivotIndex = left;\n\t\n            for (int i = left; i < right; i++)\n            {\n                if (array[i] <= pivot)\n                {\n                    swap(array, i, pivotIndex);\n                    pivotIndex++;\n                }\n            }\n\n            swap(array, right, pivotIndex);\n \n            return pivotIndex;\n        }\n\n        static void swap(int[] array, int i, int j)\n        {\n            int temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n    }\n}", "category": "Python"}, {"instruction": "What is the maximum value of an integer in Java?", "input": "", "output": "In Java, the maximum value of an integer is 2147483647.", "category": "Python"}, {"instruction": "Write a function in Python that takes a number and returns the square of the number.", "input": "x = 15", "output": "def square(x):\n    \"\"\"This function takes an integer x and returns its square\"\"\"\n    return x * x\n    \nx = 15\nprint(square(x)) # prints 225", "category": "Python"}, {"instruction": "Write an SQL query to select the employees with a monthly salary greater than or equal to $3000.", "input": "", "output": "SELECT FirstName, LastName, Salary\nFROM Employees\nWHERE Salary >= 3000", "category": "Python"}, {"instruction": "How to remove duplicates from a list in Python?", "input": "", "output": "In Python, duplicates can be removed from a list by converting the list to a set. Sets are unordered collections of unique elements. They do not allow duplicate elements, thus when a list is converted to a set, all duplicates are removed.\n\nFor example, if the list is named my_list, then the set can be constructed as follows:\n\nmy_set = set(my_list)", "category": "Python"}, {"instruction": "You need to read a code and detect if there are any security vulnerabilities. Output true if there are any vulnerabilities, output false if there are none.", "input": "def secret_function(username, password):\n    if username == 'myusername' and password == 'mypassword':\n        return True\n    else:\n        return False", "output": "true", "category": "Python"}, {"instruction": "Write a SQL query to select the top 2 most recently hired employees.", "input": "", "output": "SELECT FirstName, LastName\nFROM Employees\nORDER BY HireDate DESC\nLIMIT 2", "category": "Python"}, {"instruction": "You need add two numbers without using '+' operator.", "input": "2 and 3", "output": "The solution is to use the bitwise XOR operator. The XOR operator will return a 1 if either of the two given numbers is a 1, but will return a 0 if both of them are either 1 or 0.\n\nTherefore, the solution is:\n\nnum1 = 2\nnum2 = 3\nresult = num1 ^ num2", "category": "Python"}, {"instruction": "Write a Java program to print out a triangle of stars.", "input": "3", "output": "*\n**\n***", "category": "Python"}, {"instruction": "We have a given string. Replace every occurrence of 'a' with 'A'", "input": "string = 'I like apples'", "output": "string = 'I like Apples'", "category": "Python"}, {"instruction": "How to find the number of elements within a list in Python?", "input": "", "output": "The number of elements in a list can be obtained using the len() method in Python.\nFor example, if the list is named my_list, the number of elements can be obtained as len(my_list).", "category": "Python"}, {"instruction": "Write a Java program to replace the first occurrence of a given character with '*'.", "input": "String = \"Hello World!\"\nCharacter = 'o'", "output": "String str = \"Hello World!\";\n\nString newStr = str.replaceFirst(\"o\", \"*\");\n\nSystem.out.println(newStr);", "category": "Python"}, {"instruction": "Use HTML to create a webpage with a text input field and a button.", "input": "", "output": "<html>\n  <body>\n    <input type=\"text\" id=\"text_input\" />\n    <button onclick=\"handleInput()\">Submit</button>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Generate 5 random numbers between 0 and 9 using JavaScript.", "input": "", "output": "let randomNums = [];\n\nfor(let i = 0; i < 5; i++){\n  let num = Math.floor(Math.random() * 10);\n  randomNums.push(num);\n}\n\nconsole.log(randomNums);", "category": "Python"}, {"instruction": "Write a C# program to create a function that takes an integer as parameter and prints its double value.", "input": "", "output": "public static void DoubleValue(int val) \n{ \n    Console.WriteLine(val * 2); \n}", "category": "Python"}, {"instruction": "Sort an array in C using selection sort.", "input": "int nums[] = {5, 2, -3, 10, 23, 99, -1, 7, 93, 0};", "output": "int nums[] = {-3, -1, 0, 2, 5, 7, 10, 23, 93, 99};\n\nvoid selection_sort(int nums[], int n) {\n    int i, j, min_idx; \n  \n    // One by one move boundary of unsorted sub-array \n    for (i = 0; i < n-1; i++) {\n        // Find the minimum element in unsorted array \n        min_idx = i; \n        for (j = i+1; j < n; j++) {\n            if (nums[j] < nums[min_idx]) \n            min_idx = j; \n        }\n  \n        // Swap the found minimum element with the first element \n        swap(&nums[min_idx], &nums[i]); \n    } \n}", "category": "Python"}, {"instruction": "Create a loop in PHP that prints out the numbers 0 to 10.", "input": "", "output": "for($i = 0; $i <= 10; $i++){\n    echo $i.' ';\n}", "category": "Python"}, {"instruction": "Create a loop in JavaScript that logs \"Hello, World!\" to the console 5 times.", "input": "", "output": "for (let i=0; i<5; i++){\n  console.log('Hello, World!');\n}", "category": "Python"}, {"instruction": "Create a RegEx pattern to match any sequences of characters that contains an \"a\".", "input": "", "output": "let pattern = /a+/;", "category": "Python"}, {"instruction": "Apply a style that changes the color of the text \"Hello, World!\" to red.", "input": "<span>Hello, World!</span>", "output": "<span style=\"color:red;\">Hello, World!</span>", "category": "Python"}, {"instruction": "Create a for loop in JavaScript that iterates through a given array and prints each element.", "input": "arr = [\"a\",\"b\",\"c\",\"d\"]", "output": "arr = [\"a\",\"b\",\"c\",\"d\"];\nfor (let i = 0; i < arr.length; i++){\n    console.log(arr[i]); \n}", "category": "Python"}, {"instruction": "Convert a 2D array into a 1D array.", "input": "array = [[1, 2], [3, 4]]", "output": "array = array.reshape(-1, ).tolist()", "category": "Python"}, {"instruction": "Write a java program to print the frequencies of all characters in a string.", "input": "string = \"mississippi\"", "output": "public class Frequency { \n\tstatic void characterFrequency(String str) \n\t{ \n\t\t// size of the string 'str' \n\t\tint n = str.length(); \n\n\t\t// 'freq[]' implemented as hash table \n\t\tint freq[] = new int[256]; \n\n\t\t// accumulate freqeuncy of each character \n\t\t// in 'str' \n\t\tfor (int i = 0; i < n; i++) \n\t\t\tfreq[str.charAt(i)]++; \n\n\t\t// traverse 'str' from left to right \n\t\tfor (int i = 0; i < n; i++) { \n\n\t\t\t// if frequency of character str.charAt(i) \n\t\t\t// is not equal to 0 \n\t\t\tif (freq[str.charAt(i)] != 0) { \n\n\t\t\t\t// print the character along with its \n\t\t\t\t// frequency \n\t\t\t\tSystem.out.print(str.charAt(i)); \n\t\t\t\tSystem.out.print(freq[str.charAt(i)] + \" \"); \n\n\t\t\t\t// update frequency of str.charAt(i) to \n\t\t\t\t// 0 so that the same character is not printed \n\t\t\t\t// again \n\t\t\t\tfreq[str.charAt(i)] = 0; \n\t\t\t} \n\t\t} \n\t} \n\n\t// Driver code \n\tpublic static void main(String args[]) \n\t{ \n\t\tString str = \"mississippi\"; \n\t\tcharacterFrequency(str); \n\t} \n}", "category": "Python"}, {"instruction": "Write a SQL query to find all customers whose first name is 'John'.", "input": "", "output": "SELECT * FROM customers\nWHERE first_name = 'John';", "category": "Python"}, {"instruction": "Create a JavaScript to switch between two div components.", "input": "", "output": "function switchDiv(){ \n   if(document.getElementById(\"div1\").style.display == \"none\"){ \n      document.getElementById(\"div1\").style.display = \"block\"; \n      document.getElementById(\"div2\").style.display = \"none\"; \n   } else { \n      document.getElementById(\"div1\").style.display = \"none\"; \n      document.getElementById(\"div2\").style.display = \"block\"; \n   }\t\n}", "category": "Python"}, {"instruction": "Create a MySQL query to select five distinct cities from the given table.", "input": "+----+-----------+\n| id | city      |\n+----+-----------+\n|  1 | New York  |\n|  2 | London    |\n|  3 | Tokyo     |\n|  4 | Singapore |\n|  5 | Sydney    |\n|  6 | Moscow    |\n+----+-----------+", "output": "SELECT DISTINCT city\nFROM table_name\nLIMIT 5;", "category": "Python"}, {"instruction": "Name four significant members of the Python community.", "input": "", "output": "Guido van Rossum, Kenneth Reitz, Monty Python, and Brett Cannon.", "category": "Python"}, {"instruction": "Write a React component to show the current date.", "input": "", "output": "import React from 'react';\n\nfunction CurrentDate(){\n  const date = new Date().toLocaleDateString();\n\n  return (\n    <div>\n      {date}\n    </div>\n  )\n}\n\nexport default CurrentDate;", "category": "Python"}, {"instruction": "Console log \"Hello\" seven times in JavaScript.", "input": "", "output": "for (let i = 0; i < 7; i++) { \n  console.log('Hello'); \n}", "category": "Python"}, {"instruction": "Write an SQL query to find the names of all students with a score higher than 75.", "input": "", "output": "SELECT name\nFROM students\nWHERE score > 75;", "category": "Python"}, {"instruction": "Create a class to store and print information about a book.", "input": "", "output": "class Book:\n    def __init__(self, title, author, publisher, pages):\n        self.title = title\n        self.author = author\n        self.publisher = publisher\n        self.pages = pages\n   \n    def print_info(self):\n        print(f\"Title: {self.title}\")\n        print(f\"Author: {self.author}\")\n        print(f\"Publisher: {self.publisher}\")\n        print(f\"Pages: {self.pages}\")", "category": "Python"}, {"instruction": "Generate a valid JSON object that describes the given user information.", "input": "Name: John\nAge: 33\nLocation: New York", "output": "{\n  \"name\": \"John\",\n  \"age\": 33,\n  \"location\": \"New York\"\n}", "category": "Python"}, {"instruction": "Edit the given HTML structure to center the content in the page.", "input": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>My First Web Page</title>\n</head>\n<body>\n\n</body>\n</html>", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>My First Web Page</title>\n</head>\n<body style =\"text-align:center;\">\n\n</body>\n</html>", "category": "Python"}, {"instruction": "Rewrite the code using a while loop to count down from the number 5 to 0.", "input": "", "output": "let num = 5;\nwhile (num >= 0) {\n    console.log(num);\n    num--;\n}", "category": "Python"}, {"instruction": "Create a program in C++ to find the largest number in an array of integers.", "input": "arr = [10, 20, 15, 12, 5]", "output": "#include <iostream>\nusing namespace std;\n\nint findMax(int arr[], int n) \n{ \n    int max = arr[0]; \n  \n    for (int i = 1; i < n; i++) \n        if (arr[i] > max) \n            max = arr[i]; \n  \n    return max; \n} \n  \nint main() \n{  \n    int arr[] = {10, 20, 15, 12, 5}; \n    int n = sizeof(arr) / sizeof(arr[0]); \n  \n    int max = findMax(arr, n); \n  \n    cout << \"Maximum element in array is \" << max; \n    return 0; \n}", "category": "Python"}, {"instruction": "Design a SQL query to select all the rows from a table where the field \"ISBN\" is not equal to zero.", "input": "SELECT * FROM table_name;", "output": "SELECT * \nFROM table_name \nWHERE ISBN <> 0;", "category": "Python"}, {"instruction": "Modify the code to make an HTTP request to a given URL.", "input": "request = {\n    type: \"GET\"\n}", "output": "let request = {\n    type: \"GET\",\n    url: \"https://example.com\",\n    success: function(response) {\n      console.log(response);\n    }\n};\n$.ajax(request);", "category": "Python"}, {"instruction": "Create a function to sort the given array of numbers in descending order.", "input": "[7, 2, 5, 1, 4]", "output": "def sort_number(arr): \n    arr.sort(reverse=True) \n    return arr \n\narr = [7, 2, 5, 1, 4]\n  \nprint(sort_number(arr)) \n\n# Output: [7, 5, 4, 2, 1]", "category": "Python"}, {"instruction": "Multiply two vectors of the same size.", "input": "Vector1 = [1, 2, 3] \nVector2 = [4, 5, 6]", "output": "resultantVector = [4, 10, 18]", "category": "Python"}, {"instruction": "Write a SQL query to find all records with age greater than 20 in the 'users' table.", "input": "", "output": "SELECT * FROM users WHERE age > 20;", "category": "Python"}, {"instruction": "Create a function that encodes a message into a Vigenere cipher", "input": "", "output": "def vigenere_encode(message, key):\n    encoded_message = \"\"\n    key_index = 0\n    for character in message:\n        if character.isalpha():\n            shift_amount = ord(key[key_index]) % 26\n            key_index += 1\n            if key_index == len(key):\n                key_index = 0  \n            shifted_char_code = ord(character) + shift_amount\n            if shifted_char_code > ord('z'):\n                shifted_char_code -= 26\n            encoded_message += chr(shifted_char_code)\n        else:\n            encoded_message += character\n    return encoded_message", "category": "Python"}, {"instruction": "Create an algorithm to encourage work balance and productivity in remote work.", "input": "", "output": "One algorithm to encourage work balance and productivity in remote work is a scheduling algorithm that assigns workloads over manageable working windows with rest periods in between to allow for breaks and recovery. This algorithm can be designed to set maximum and minimum limit for each allocated workload and for duration for the rest periods, based on the individual's productive and rest needs. It can be used to monitor and manage workloads to ensure that workers do not experience fatigue or workload overload. Additionally, the algorithm can be designed to keep track of work performance over time to provide appropriate feedback and recommendations in order to help workers optimize their performance.", "category": "Python"}, {"instruction": "Make a C++ program that counts the number of unique elements in an array.", "input": "int arr[] = {1, 5, 3, 6, 2, 3, 5};", "output": "#include <iostream>\n#include <unordered_set>\n\nint main()\n{\n    int arr[] = {1, 5, 3, 6, 2, 3, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    \n    // Create a unordered_set to store all elements\n    std::unordered_set<int> s;\n    \n    // Insert all elements in the set\n    for (int i = 0; i < size; i++)\n        s.insert(arr[i]);\n    \n    // Size of the set will be total count of distinct elements\n    std::cout << \"Number of distinct elements: \" << s.size();\n    \n    return 0;\n}", "category": "Python"}, {"instruction": "Write a function that sorts its arguments in descending order.", "input": "nums = [4, 8, 10, 3, 5]", "output": "def sort_descending(*args):\n    args = list(args)\n    for i in range(len(args)-1):\n        for j in range(i+1, len(args)):\n            if args[i] < args[j]:\n                args[i], args[j] = args[j], args[i]\n    return args", "category": "Python"}, {"instruction": "Given two strings, write a Python code to delete all occurrences of the second string from the first string.", "input": "str1 = \"abcabcabcabcabcabcabcabcabcabc\"\nstr2 = \"abc\"", "output": "def delete_occurrences(str1, str2):\n    return str1.replace(str2, '')", "category": "Python"}, {"instruction": "Write a function to find the index of the point that lies closest to the origin.", "input": "points = [[1,1],[-1,2],[3,-4]]", "output": "def closest_point(points):\n    min_dist = float('inf')\n    for i in range(len(points)):\n        dist = points[i][0]**2 + points[i][1]**2 \n        if dist < min_dist:\n            min_dist = dist\n            closest_index = i\n\n    return closest_index", "category": "Python"}, {"instruction": "Write a code to multiply two matrices, assuming the two matrices can be multiplied.", "input": "A = [[1, 2], [3, 4]] \nB = [[5, 6], [7, 8]]", "output": "def multiply_matrices(A, B):\n    if len(A[0]) != len(B):\n        raise ValueError(\"Matrices cannot be multiplied\")\n\n    rows_A = len(A)\n    columns_A = len(A[0])\n    rows_B = len(B)\n    columns_B = len(B[0])\n\n    result = [[0 for column in range(columns_B)] for row in range(rows_A)]\n\n    for row in range(rows_A):\n        for column in range(columns_B):\n            for k in range(columns_A):\n                result[row][column] += A[row][k] * B[k][column]\n\n    return result", "category": "Python"}, {"instruction": "Given 3 lists a, b, and c, write a Python code to calculate the dot product of a and b and store the result in c.", "input": "a = [3, 4, 5] \nb = [6, 7, 8]\nc = []", "output": "def dot_product(a, b, c):\n    if len(a) != len(b):\n        raise ValueError(\"Length of Lists cannot differ\")\n    dp = 0\n    for i in range(len(a)):\n        dp += a[i]*b[i]\n    c.append(dp)", "category": "Python"}, {"instruction": "Write a JavaScript code snippet that will add two numbers.", "input": "", "output": "let num1 = 5;\nlet num2 = 8; \nlet sum = num1 + num2;\nconsole.log(sum);", "category": "Python"}, {"instruction": "Create a CSS style sheet to set font size of all headings to 20px, font weight to bold and color to blue.", "input": "", "output": "h1, h2, h3, h4, h5, h6 {\n    font-size: 20px;\n    font-weight: bold;\n    color: blue;\n}", "category": "Python"}, {"instruction": "Create a JavaScript function that takes three parameters: a number, a sign, and another number. The function should use the sign to determine which arithmetic operation it should perform and output the result.", "input": "", "output": "function calculate(num1, operator, num2) {\n    switch (operator) {\n        case '+':\n            return num1 + num2\n        case '-':\n            return num1 - num2\n        case '*':\n            return num1 * num2\n        case '/':\n            return num1 / num2\n        default:\n            return 'Operation invalid'\n    }\n}", "category": "Python"}, {"instruction": "Determine the output of the following JavaScript code when x = 2:", "input": "x = 2\nif (x < 0) {\n    console.log('x is negative');\n} else if (x > 0) {\n    console.log('x is positive');\n} else {\n    console.log('x is zero');\n}", "output": "x is positive", "category": "Python"}, {"instruction": "Identify the type of join used in the following SQL query:", "input": "SELECT *\nFROM orders\nJOIN customers\nON orders.customer_id = customer.id", "output": "This is an inner join which is used to select rows from two or more related tables. The join allows rows from both tables to be retrieved if the two rows share a common value in the joined columns.", "category": "Python"}, {"instruction": "Create a HTML web page with four different headings.", "input": "", "output": "<html>\n<head>\n    <title>Headings Page</title>\n</head>\n<body>\n    <h1>Heading 1</h1>\n    <h2>Heading 2</h2>\n    <h3>Heading 3</h3>\n    <h4>Heading 4</h4>\n</body>\n</html>", "category": "Python"}, {"instruction": "Print the first 10 Fibonacci numbers using a loop.", "input": "", "output": "a, b = 0, 1\nfor i in range(10):\n    print(a)\n    a, b = b, a + b", "category": "Python"}, {"instruction": "Create a SQL query to extract all the \"first_name\" and \"last_name\" columns from the \"students\" table.", "input": "", "output": "SELECT first_name, last_name\nFROM students;", "category": "Python"}, {"instruction": "Create a Python program to calculate the mean, median, and mode of a given set of data.", "input": "data = [1, 4, 6, 3, 8, 9]", "output": "def calculate_mean(data):\n    '''Function to calculate mean of data'''\n    mean = sum(data) / len(data)\n    return mean\n\ndef calculate_median(data):\n    '''Function to calculate median of data'''\n    data.sort()\n    mid_index = len(data) // 2\n    median = data[mid_index]\n    return median\n\ndef calculate_mode(data):\n    '''Function to calculate mode of data'''\n    count_dict = {}\n    mode_list = []\n    # count the frequency of each element\n    for i in data:\n        count_dict[i] = data.count(i)\n    # find the maximum frequency\n    max_freq = max(count_dict.values())\n    # find all elements with maximum frequency\n    for k,v in count_dict.items():\n        if max_freq == v:\n            mode_list.append(k)\n    return mode_list\n\ndata = [1, 4, 6, 3, 8, 9]\nmean = calculate_mean(data)\nmedian = calculate_median(data)\nmode = calculate_mode(data)\n\nprint(f\"Mean of data is: {mean}\")\nprint(f\"Median of data is: {median}\")\nprint(f\"Mode of data is: {mode}\")", "category": "Python"}, {"instruction": "Create a SQL query to find the top 5 movies with highest ratings in a database.", "input": "", "output": "SELECT name, rating \nFROM Movies \nORDER BY rating DESC \nLIMIT 5;", "category": "Python"}, {"instruction": "Write a JavaScript program to get the current user's timezone offset from UTC in minutes.", "input": "", "output": "let offset_minutes = new Date().getTimezoneOffset();\nconsole.log(offset_minutes);", "category": "Python"}, {"instruction": "Create a HTML email template with placeholder information from a JavaScript object.", "input": "var data = {\n    firstname: 'John',\n    lastname: 'Doe',\n    email: 'johndoe@example.com'\n};", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Email Template</title>\n</head>\n<body>\n    <h1>Hello, {{data.firstname}} {{data.lastname}}!</h1>\n    <p>This is an automated email sent to you at {{data.email}}.</p>\n    <p>Thank you!</p>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create a function that takes a string as input and returns a copy of the string with all punctuation marks removed", "input": "", "output": "def remove_punctuation(text):\n    punctuation_chars = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    output = \"\"\n    for char in text:\n        if char not in punctuation_chars:\n            output += char\n    return output", "category": "Python"}, {"instruction": "Write a function that takes two strings and searches for all the occurrences of the first string in the second and returns the positions of the pattern within the string.", "input": "string1 = \"aa\"\nstring2 = \"aaaaaa\"", "output": "def pattern_occurences(string1, string2):\n    positions = []\n    for i in range(len(string2)):\n        if string1 == string2[i:i+len(string1)]:\n            positions.append(i)\n    return positions", "category": "Python"}, {"instruction": "Create a function that takes an array of numbers and a target number as input, and returns true if the target number is present in the given array, false otherwise.", "input": "list1 = [1,2,3,4]\ntarget = 2", "output": "def contains_target(list1, target):\n    return target in list1", "category": "Python"}, {"instruction": "Create a function that converts any number to its hexadecimal representation", "input": "", "output": "def to_hexadecimal(num):\n    return hex(num)", "category": "Python"}, {"instruction": "Write a function to concatenate two strings without using the concatenation operator \"+\".", "input": "", "output": "def concat(string1, string2):\n    result = \"\"\n    for i in string1:\n        result += i\n    for j in string2:\n        result += j\n    return result", "category": "Python"}, {"instruction": "Design a class in Python to store a book's title, author, and number of pages.", "input": "", "output": "class Book:\n    def __init__(self, title, author, pages):\n        self.title = title\n        self.author = author\n        self.pages = pages\n\n    def get_title(self):\n        return self.title\n\n    def get_author(self):\n        return self.author\n\n    def get_pages(self):\n        return self.pages", "category": "Python"}, {"instruction": "Create a function in JavaScript to input two strings and output their combined length.", "input": "", "output": "function combinedLength(string1, string2) {\n  return string1.length + string2.length;\n}", "category": "Python"}, {"instruction": "Create a numerical sequence using Ruby code with 4 elements.", "input": "", "output": "[1, 2, 4, 8]", "category": "Python"}, {"instruction": "Write a script in JavaScript to find the sum of all the numbers in an array.", "input": "", "output": "function arraySum(arr) {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}", "category": "Python"}, {"instruction": "Rewrite the following SQL query into its equivalent MongoDB query.", "input": "SELECT * FROM customers WHERE age > 30", "output": "db.customers.find({ age: { $gt: 30 } });", "category": "Python"}, {"instruction": "Write a script in Python to find the longest word in a given string.", "input": "sample_string = \"This is a sample string containing a few words\"", "output": "def longest_word(sample_string):\n    words_list = sample_string.split()\n    longest_word = \"\"\n    for word in words_list:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word", "category": "Python"}, {"instruction": "Write an SQL query to select one row from a table where two conditions are met.", "input": "Table: \u2018products\u2019 \nCondition 1: category is \u2018clothing\u2019 \nCondition 2: rating is greater than 3", "output": "SELECT * FROM products\nWHERE category = 'clothing'\nAND rating > 3\nLIMIT 1;", "category": "Python"}, {"instruction": "Design a class in Python to store a user profile information such as name, age, city, etc.", "input": "", "output": "class UserProfile:\n    def __init__(self, name, age, city):\n        self.name = name\n        self.age = age\n        self.city = city\n\n    def get_name(self):\n        return self.name\n\n    def get_age(self):\n        return self.age\n\n    def get_city(self):\n        return self.city", "category": "Python"}, {"instruction": "Write an SQL query to find the maximum salary of an employee in the same department as the given employee.", "input": "Employee name: \u2018John Doe\u2019\nDepartment: \u2018Finance\u2019", "output": "SELECT MAX(salary)\nFROM employees\nWHERE department = 'Finance'\nAND NOT employee_name = 'John Doe';", "category": "Python"}, {"instruction": "Create a block of HTML code to display a table with 6 columns and 10 rows.", "input": "", "output": "<table>\n <thead>\n  <tr>\n   <th>Column 1</th>\n   <th>Column 2</th>\n   <th>Column 3</th>\n   <th>Column 4</th>\n   <th>Column 5</th>\n   <th>Column 6</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td>Row 1</td>\n   <td>Row 1</td>\n   <td>Row 1</td>\n   <td>Row 1</td>\n   <td>Row 1</td>\n   <td>Row 1</td>\n  </tr>\n  <tr>\n   <td>Row 2</td>\n   <td>Row 2</td>\n   <td>Row 2</td>\n   <td>Row 2</td>\n   <td>Row 2</td>\n   <td>Row 2</td>\n  </tr>\n  ...\n  <tr>\n   <td>Row 10</td>\n   <td>Row 10</td>\n   <td>Row 10</td>\n   <td>Row 10</td>\n   <td>Row 10</td>\n   <td>Row 10</td>\n  </tr>\n </tbody>\n</table>", "category": "Python"}, {"instruction": "Create an algorithm to detect plagiarized text.", "input": "", "output": "One algorithm to detect plagiarized text is to compare text fragments of the document to a database of known plagiarized content. The algorithm can be refined by using natural language processing methods like vectorization and clustering to identify text parallelism and code similarity between the document and the content in the database. The algorithm also can weight the comparison based on similarity scores and can be further improved by utilizing machine learning models to identify more subtle aspects of plagiarism, such as paraphrasing, translations, and synonyms.", "category": "Python"}, {"instruction": "Design a class in Python to store information about a car, such as its make, year, and mileage.", "input": "", "output": "class Car:\n    def __init__(self, make, year, mileage):\n        self.make = make\n        self.year = year\n        self.mileage = mileage\n\n    def get_make(self):\n        return self.make\n\n    def get_year(self):\n        return self.year\n\n    def get_mileage(self):\n        return self.mileage", "category": "Python"}, {"instruction": "Given the following HTML code, add a class attribute to the <nav> element:", "input": "<nav>\n    <ul>\n        <li><a href=\"/\">Home</a></li>\n        <li><a href=\"/about/\">About</a></li>\n        <li><a href=\"/contact/\">Contact</a></li>\n    </ul>\n</nav>", "output": "<nav class=\"main-nav\">\n    <ul>\n        <li><a href=\"/\">Home</a></li>\n        <li><a href=\"/about/\">About</a></li>\n        <li><a href=\"/contact/\">Contact</a></li>\n    </ul>\n</nav>", "category": "Python"}, {"instruction": "Generate an algorithm that sorts the elements of an array.", "input": "[6, 3, 8, 9, 4]", "output": "def sort_array(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in correct position\n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\n# Driver code to test above \narr = [6, 3, 8, 9, 4] \nsort_array(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "category": "Python"}, {"instruction": "Explain how you would loop over a list of dictionaries to extract all the values", "input": "", "output": "To loop through a list of dictionaries, you can use a for loop. For example:\n\nmy_list = [{\"name\": \"John Doe\"}, {\"age\": 25}]\nfor item in my_list:\n    for key, value in item.items():\n        print(key, \":\", value)\n\nThis will loop through each item in the list as a dictionary, and for each dictionary, it will loop through all the key-value pairs and print them out.", "category": "Python"}, {"instruction": "Determine the type of an object.", "input": "\"Hello\"", "output": "type(\u201cHello\u201d)", "category": "Python"}, {"instruction": "Create a function that takes two arguments, a number and a string, and returns the string repeated the specified number of times.", "input": "4, \"Hello\"", "output": "def repeatString(n, s):\n    return s * n\n\nrepeatString(4, \"Hello\")", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to loop through an array and return the sum of all the elements.", "input": "[1, 2, 3, 4]", "output": "let arr = [1, 2, 3, 4];\nlet sum = 0;\n \nfor (let i = 0; i < arr.length; i++) {\n  sum += arr[i];\n}\n\nconsole.log(sum);", "category": "Python"}, {"instruction": "Create a function that takes a sentence as a string and returns a string containing the sentence in reverse order.", "input": "\"I am learning to code\"", "output": "public String reverse(String sentence) {\n    StringBuilder reversedSentence = new StringBuilder();\n    \n    String[] words = sentence.split(\" \");\n    \n    for (int i = words.length - 1; i >= 0; i--) {\n        reversedSentence.append(words[i]);\n        reversedSentence.append(\" \");\n    }\n    \n    return reversedSentence.toString().trim();\n}", "category": "Python"}, {"instruction": "Write a short Java program to generate a random value from 1 to 10.", "input": "", "output": "import java.util.Random;\n\npublic class genRandom {\n   public static void main(String[] args) {\n      // create instance of Random class\n      Random rand = new Random();\n\n      // Generate random integers in range 0 to 10\n      int randomNum = rand.nextInt(11);\n\n      // Print random integers\n      System.out.println(\"Random Number :\" + randomNum);\n   }\n}", "category": "Python"}, {"instruction": "Design a web page using HTML and CSS.", "input": "", "output": "<html>\n  <head>\n    <title>My webpage</title>\n  </head>\n  <body>\n    <h1>Hello World!</h1>\n    <p>Welcome to my webpage.</p>\n  </body>\n</html>\n<style>\n  body {\n    font-family: Arial, sans-serif;\n    font-size: 16px;\n  }\n</style>", "category": "Python"}, {"instruction": "Write a Node.js program to create a server.", "input": "", "output": "const http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'text/plain');\n    res.end('Hello World\\n');\n});\n\nserver.listen(port, hostname, () => {\n    console.log(`Server running at http://${hostname}:${port}/`);\n});", "category": "Python"}, {"instruction": "Write code in Java to print all the unique elements in an array.", "input": "", "output": "public void printUnique(int[] array) {\n  Set<Integer> set = new HashSet<>();\n\n  for (int i : array) {\n    set.add(i);\n  }\n\n  System.out.println(set);\n\n}", "category": "Python"}, {"instruction": "Create a search query in MySQL.", "input": "Table users\nid name email\n1 John john@email.com\n2 Mary mary@somedomain.com", "output": "SELECT * FROM users WHERE name LIKE '%ary%';", "category": "Python"}, {"instruction": "Write a piece of C++ code to find the absolute value of a number.", "input": "", "output": "int absolute_value(int num)\n{\n    if (num < 0)\n    {\n        num = -num;\n    }\n\n    return num;\n}", "category": "Python"}, {"instruction": "Create a SQL query to fetch the data from the following tables.", "input": "Table A\nid name\n1 John\n2 Mary\n\nTable B\nid age\n1 20\n2 25", "output": "SELECT a.name, b.age\nFROM tableA a\nINNER JOIN tableB b\nON a.id = b.id;", "category": "Python"}, {"instruction": "Create an infinite loop in C.", "input": "", "output": "while (1) {\n  // code goes here\n  }", "category": "Python"}, {"instruction": "Write Java code to calculate the sum of first n natural numbers.", "input": "", "output": "public class SumNatural {\n    public static void main(String[] args) {\n        int num = 20, sum = 0;\n        for(int i = 1; i <= num; ++i)\n        {\n            sum += i;\n        }\n        System.out.println(\"Sum = \" + sum);\n    }\n}", "category": "Python"}, {"instruction": "Given a list of numbers, find the number which appears the most times in the list.", "input": "[2, 3, 4, 2, 3, 2, 3, 2]", "output": "The number which appears the most times in the list is 2, which appears 4 times.", "category": "Python"}, {"instruction": "Convert a given string to its lowercase version", "input": "Python", "output": "lower_case = \"python\"", "category": "Python"}, {"instruction": "Write an R code snippet to normalize data stored in a vector.", "input": "[1,2,3,6]", "output": "normalize <- function(v) {\n  (v - min(v)) / (max(v) - min(v))\n}\n\nnormalize([1,2,3,6])", "category": "Python"}, {"instruction": "Create a list comprehension for the following code.", "input": "number_list = []\nfor x in range(10):\n    if x % 2 == 0:\n        number_list.append(x)", "output": "number_list = [x for x in range(10) if x % 2 == 0]", "category": "Python"}, {"instruction": "Create a function to find the standard deviation of a list of numbers", "input": "[2,4,4,4,5,5,7,9]", "output": "def std_deviation(data): \n    n = len(data) \n\t \n    mean = sum(data) /n \n    sum_sqr = sum(pow(x-mean,2) for x in data) \n    stdev = sqrt(sum_sqr/n) \n\t\n    return stdev \n    \nstd_deviation([2,4,4,4,5,5,7,9])", "category": "Python"}, {"instruction": "Create a Java program that takes two strings s and t as input and checks if t is an anagram of s", "input": "s = \"abc\", t = \"bac\"", "output": "public class Anagram { \n  \n    static void isAnagram(String s1, String s2) { \n        // Removing all white spaces from s1 and s2 \n        String copyOfs1 = s1.replaceAll(\"\\\\s\", \"\"); \n        String copyOfs2 = s2.replaceAll(\"\\\\s\", \"\"); \n  \n        // Initially setting status as true \n        boolean status = true; \n  \n        if (copyOfs1.length() != copyOfs2.length()) { \n            // Setting status as false if copyOfs1 and copyOfs2 doesn't have same length \n            status = false; \n        }  \n        else { \n            // Changing the case of characters of both copyOfs1 and copyOfs2 and \n            // converting them to char array \n            char[] s1Array = copyOfs1.toLowerCase().toCharArray(); \n            char[] s2Array = copyOfs2.toLowerCase().toCharArray(); \n  \n            // Sorting both s1Array and s2Array \n            Arrays.sort(s1Array); \n            Arrays.sort(s2Array); \n  \n            // Checking whether s1Array and s2Array are equal \n            status = Arrays.equals(s1Array, s2Array); \n        } \n  \n        // Output the Message\n        if (status) \n            System.out.println(s1 + \" and \" + s2 + \" are anagrams\"); \n        else\n            System.out.println(s1 + \" and \" + s2 + \" are not anagrams\"); \n    } \n  \n    public static void main(String[] args) \n    { \n        isAnagram(\"abc\", \"bac\");\n    } \n}", "category": "Python"}, {"instruction": "Create a function to convert a string containing numbers in scientific notation to an integer.", "input": "inputString: \"1.0e7\"", "output": "int convertSciNotation(String inputString) {\n    int outputInteger = (int)Math.pow(10, Double.parseDouble(inputString.substring(inputString.indexOf('e') + 1)));\n    return outputInteger;\n}", "category": "Python"}, {"instruction": "Create a Java method which takes a String and an integer as inputs and concatenates the integer to the beginning of the string.", "input": "inputString: \"This is a test\"\nnum: 38", "output": "public static String prependIntToString(String inputString, int num) {\n    String outputString = num + \"\" + inputString;\n    return outputString;\n}", "category": "Python"}, {"instruction": "Write a Java program to filter out the common characters in two given strings.", "input": "", "output": "public static String filterCommonCharacters(String str1, String str2) {\n    StringBuilder sb = new StringBuilder();\n    // Traverse both strings\n    for (int i = 0; i < str1.length(); i++) {\n        // Check if str2 contains str1[i]\n        boolean found = false;\n        for (int j = 0; j < str2.length(); j++) {\n            if (str1.charAt(i) == str2.charAt(j)) \n                found = true;\n        }\n        // Append the character if it is not present in str2\n        if (found == false)\n            sb.append(str1.charAt(i));  \n    }  \n    return sb.toString();\n}", "category": "Python"}, {"instruction": "Write an SQL query to list the customer names and the total amount of orders placed by them.", "input": "", "output": "SELECT c.name AS 'Customer Name', SUM(o.total_cost) AS 'Total Amount'\nFROM Customers c\nLEFT JOIN Orders o ON c.customer_id = o.customer_id\nGROUP BY c.name;", "category": "Python"}, {"instruction": "Create a SQL query to list the customers who have not completed any orders.", "input": "", "output": "SELECT * \nFROM Customers c\nLEFT JOIN Orders o ON c.customer_id = o.customer_id\nWHERE o.order_id IS NULL;", "category": "Python"}, {"instruction": "Write an HTML page to display a given data table.", "input": "", "output": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>Table Display</title>\n    </head>\n    <body>\n        <table>\n            <tr>\n                <th>Name</th>\n                <th>Age</th>\n            </tr>\n            <tr>\n                <td>John</td>\n                <td>21</td>\n            </tr>\n            <tr>\n                <td>Jane</td>\n                <td>25</td>\n            </tr>\n            <tr>\n                <td>Joe</td>\n                <td>30</td>\n            </tr>\n        </table>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Write a C# program to remove the leading and trailing spaces in a given string.", "input": "", "output": "public static string RemoveLeadingAndTrailingSpaces(string str)  \n{  \n    // To remove leading spaces  \n    while (str.StartsWith(\" \"))  \n    {  \n        str = str.Substring(1);  \n    }  \n   \n    // To remove trailing spaces  \n    while (str.EndsWith(\" \"))  \n    {  \n        str = str.Substring(0, str.Length - 1);  \n    }  \n   \n    return str;  \n}", "category": "Python"}, {"instruction": "What is the most efficient sorting algorithm for a large data set?", "input": "", "output": "The Quick Sort algorithm is one of the most efficient sorting algorithms for large data sets. It works by finding a pivot element in the array, and then dividing the array into two parts based on the pivot element. All elements that are lesser than the pivot element are placed to the left, and all elements that are greater than the pivot element are placed to the right. The Quick Sort algorithm then recursively divides and sorts the left and right parts until the entire array is sorted. It has a worst-case time complexity of O(n^2), but its average case time complexity is O(nlogn) which makes it an efficient sorting algorithm.", "category": "Python"}, {"instruction": "Write a JavaScript program to classify a given array of strings into two groups- one which contains elements that can be parsed into numbers and one which can't.", "input": "", "output": "function classify(arr) {\n  let nums = [];\n  let strs = [];\n  arr.forEach(el => {\n    if (!isNaN(el)) nums.push(el);\n    else strs.push(el);\n  });\n  return [nums, strs];\n}", "category": "Python"}, {"instruction": "Write a C++ program to find the kth smallest element in an unsorted array using minimum number of comparisons.", "input": "", "output": "#include<algorithm>\n#include<math.h>\n\nusing namespace std;\n\nint kthSmallest(int arr[], int n, int k) \n{ \n    sort(arr, arr + n); \n  \n    return arr[k - 1]; \n} \n\n// Function to find the kth smallest element \nint kthSmallestWComp(int arr[], int n, int k) \n{ \n    // Initialize values of left and right \n    int left = -2147483648, right = 2147483647, ans = -1; \n    while (left <= right) \n    { \n        int mid = (left + right) / 2; \n        int countLtEqMid = 0, countGtMid = 0; \n  \n        // Loop to count total less than equal mid \n        for (int i = 0; i < n; i++) \n            if (arr[i] <= mid) \n                countLtEqMid++; \n        // Loop to count total greater than mid \n        for (int i = 0; i < n; i++) \n            if (arr[i] > mid) \n                countGtMid++; \n  \n        if (countLtEqMid < k && k <= (countLtEqMid + countGtMid)) \n        { \n            ans = mid; \n            left = mid + 1; \n        } \n        else if (countLtEqMid >= k) \n            right = mid - 1; \n  \n        else\n            left = mid + 1; \n    } \n    return ans; \n}", "category": "Python"}, {"instruction": "Create a Regular Expression that validates a USA phone number", "input": "", "output": "^\\+?1?\\s?\\(?\\d{3}\\)?[\\s\\-]?\\d{3}[\\s\\-]?\\d{4}$", "category": "Python"}, {"instruction": "Write a SAS Procedure to mean generate a boxplot", "input": "", "output": "proc boxplot data=dataset;\n  plot y*x;\nrun;", "category": "Python"}, {"instruction": "Create a vector in R to count the occurrences of a given number in an array", "input": "arr = c(1,1,2,2,2,2,3,3,4,4,4)", "output": "vector <- c()\nfor (i in arr) {\n  count <- length(which(arr == i))\n  vector <- c(vector, count)\n}", "category": "Python"}, {"instruction": "Create a Macros in Excel to transpose a given set of data", "input": "", "output": "Sub Transpose() \n \n    Dim ReadyRange As Range \n \n     \n \n    Set ReadyRange = Selection \n \n    ReadyRange.Copy \n \n    ReadyRange.PasteSpecial xlPasteAll, Transpose:=True \n \nEnd Sub", "category": "Python"}, {"instruction": "Write a function in SQL to find the maximum value in a table", "input": "Table name: scores", "output": "SELECT MAX(score) \n  FROM scores;", "category": "Python"}, {"instruction": "Create a Haskell function to calculate a number raised to a certain power", "input": "", "output": "pow' :: (Num a, Integral b) => a -> b -> a\npow' x p = x^p", "category": "Python"}, {"instruction": "Write a MySQL query to find the name of a customer whose last name is 'Smith' and has the highest credit limit.", "input": "", "output": "SELECT name\nFROM Customers\nWHERE lastname = 'Smith'\nORDER BY creditlimit DESC\nLIMIT 1;", "category": "Python"}, {"instruction": "Define a function that takes an array of integers and returns an array of the squares of the input values.", "input": "[2, 4, 6]", "output": "def array_squares(arr):\n    return list(map(lambda x: x**2 , arr))", "category": "Python"}, {"instruction": "How can you execute a beta test using a web application?", "input": "", "output": "To execute a beta test using a web application, you can create a prototype or minimum viable version of the web application and allow a limited number of users to access it. You can gather feedback from these users on the usability and performance of the application, which can be then used to make improvements before launching the app. Additionally, you can invite more users to join the beta program, so that you can get a wide range of user experiences and insights that can help make the web application robust.", "category": "Python"}, {"instruction": "Explain the concept of a priority queue", "input": "", "output": "A priority queue is a type of data structure where each element has an associated priority. A priority queue can be used to store and manage data where the highest priority elements are retrieved first. Elements in the priority queue are ordered according to their priority, with the highest priority element at the front of the queue and the lowest priority element at the back.", "category": "Python"}, {"instruction": "Implement a machine learning model in Python to predict customer churn.", "input": "", "output": "import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\n# Load dataset\ncustomers = pd.read_csv(\"customers.csv\")\n\n# Split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(\n    customers.drop('Churn', axis=1), \n    customers.Churn,\n    test_size=0.2, \n    random_state=42)\n\n# Create model\nmodel = LogisticRegression()\n\n# Fit and make predictions\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n\n# Calculate accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))", "category": "Python"}, {"instruction": "Compile a given C++ program using the G++ compiler.", "input": "", "output": "g++ program.cpp -o program", "category": "Python"}, {"instruction": "Develop a Ruby program to check a given string for palindromes.", "input": "", "output": "def palindrome?(str) \n    str_rev = str.reverse \n    str == str_rev\nend", "category": "Python"}, {"instruction": "Create a Dockerfile to containerize an existing web application.", "input": "", "output": "FROM ubuntu:latest\n\n# Install the necessary packages\nRUN apt-get update && apt-get install -y \\\n    apache2 \\\n    php \\\n    libapache2-mod-php\n\n# Copy the web application files from host to container\nCOPY . /var/www/html\n\n# Set Apache as the default startup command\nCMD [\"apachectl\", \"-D\", \"FOREGROUND\"]", "category": "Python"}, {"instruction": "Develop a C program to compute the factorial of a given number n.", "input": "", "output": "#include <stdio.h>\n \nint factorial(int n)\n{\n    int res = 1, i;\n    \n    for (i = 2; i <= n; i++)\n        res *= i;\n    return res;\n}\n\nint main()\n{\n    int n;    \n    \n    scanf(\"%d\", &n);\n    printf(\"%d\", factorial(n));\n        \n    return 0;\n}", "category": "Python"}, {"instruction": "Modify the given C# program to count all the vowels in a given string.", "input": "string str = \"This is a sample string.\";", "output": "string str = \"This is a sample string.\";\nint count = 0; \n \nforeach (char ch in str) \n{ \n    switch (ch) \n    { \n        case 'a': \n        case 'e': \n        case 'i': \n        case 'o': \n        case 'u': \n            count++; \n            break; \n    } \n} \n\nConsole.WriteLine(\"Number of vowels in the given string: \" + count);", "category": "Python"}, {"instruction": "Create a function in PHP to check a given string for palindromes.", "input": "", "output": "<?php\n \nfunction checkPalindrome($str)\n{\n    // Reverse the given string\n    $revstr = strrev($str); \n  \n    // Checking if the string is equal to its reverse  \n    if ($str == $revstr) \n        return true;\n    else\n        return false;\n}\n?>", "category": "Python"}, {"instruction": "Write a Tensorflow program to perform binary classification on a given dataset.", "input": "", "output": "import tensorflow as tf\n\nmnist = tf.keras.datasets.mnist\n\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\nx_train, x_test = x_train / 255.0, x_test / 255.0\n\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Flatten(input_shape=(28, 28)),\n  tf.keras.layers.Dense(128, activation='relu'),\n  tf.keras.layers.Dense(2, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=5)\n\nmodel.evaluate(x_test,  y_test, verbose=2)", "category": "Python"}, {"instruction": "Write a function in Java that sorts a given array of integers.", "input": "", "output": "public static int[] sortArray(int[] arr) { \n    int n = arr.length; \n  \n    for (int i = 0; i < n-1; i++) \n        for (int j = 0; j < n-i-1; j++) \n            if (arr[j] > arr[j+1]) \n            { \n                // swap arr[j+1] and arr[i] \n                int temp = arr[j]; \n                arr[j] = arr[j+1]; \n                arr[j+1] = temp; \n            } \n    return arr; \n}", "category": "Python"}, {"instruction": "Provide a Python function to calculate the number of times a word appears in a given string", "input": "\"This is a sample string. There are some words in this string.\"", "output": "def count_words(s): \n    tokens = s.split() \n    word_freq = {} \n    for token in tokens: \n        if token in word_freq: \n            word_freq[token] += 1\n        else: \n            word_freq[token] = 1\n        \n    return word_freq", "category": "Python"}, {"instruction": "Explain how to convert an expression from postfix notation to infix notation", "input": "", "output": "Infix notation is a way of writing an expression in which the operators are placed between the operands, such as 2 + 5, whereas postfix notation is a way of writing an expression in which the operators are placed after the operands, such as 2 5 +. To convert an expression from postfix notation to infix notation, scan the expression from left to right. If an operand is encountered, simply push it onto a stack. If an operator is encountered, pop two operands from the stack and place the operator in between them. Finally, push the resulting expression back onto the stack and repeat this until the end of the expression is reached.", "category": "Python"}, {"instruction": "Write a function to produce a copy of an array", "input": "[1, 2, 3, 4]", "output": "def copy_array(arr): \n    new_arr = list(arr) \n    return new_arr", "category": "Python"}, {"instruction": "Suggest an improvement for the following piece of code", "input": "def addTwoNumbers(a, b):\n    return a + b", "output": "def addTwoNumbers(a, b):\n    try:\n        if type(a) == str or type(b) == str:\n            raise TypeError('Inputs must be of type int or float')\n        return a + b\n    except TypeError as e:\n        print(e)", "category": "Python"}, {"instruction": "Generate a Python script that implements a Linked List data structure.", "input": "", "output": "# define Node\nclass Node(object):\n\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n# define LinkedList\nclass LinkedList:\n\n    def __init__(self, head=None):\n        self.head = head\n    \n    def insert(self, node):\n        current = self.head\n        if not self.head:\n            self.head = node\n        else:\n            while current.next:\n                current = current.next\n            current.next = node\n\n     def delete_node(self, data):\n        current = self.head\n        while current.data != data and current.next is not None:\n            previous = current\n            current = current.next\n        if current.data == data:\n            if current == self.head:\n                self.head = current.next\n            else:\n                previous.next = current.next", "category": "Python"}, {"instruction": "Provide an answer to the following question", "input": "What is the maximum size of an array in Java?", "output": "The maximum size of an array in Java is determined by the amount of memory that the JVM has available to allocate. In practice, this means that the maximum size of an array is typically limited to the amount of free memory available on the heap. Generally speaking, the maximum size of an array can range from a few thousand to somewhere around 2 billion elements.", "category": "Python"}, {"instruction": "Create a SQL query to find the top 3 performing products in a given store.", "input": "Table Name: products", "output": "SELECT ProductName, SUM(QuantitySold) AS Popularity\nFROM products\nGROUP BY ProductName\nORDER BY Popularity DESC \nLIMIT 3;", "category": "Python"}, {"instruction": "Develop a JavaScript program to print the average of a given set of numbers.", "input": "", "output": "function findAverage(numbers) {\n\tlet sum = 0;\n\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tsum += numbers[i];\n\t}\n\n\treturn sum / numbers.length;\n}", "category": "Python"}, {"instruction": "Generate a list of 1000 random numbers between 1 and 1000 using Python.", "input": "", "output": "import random\n\nrandom_list = [random.randint(1, 1000) for _ in range(1000)]", "category": "Python"}, {"instruction": "Convert a string representation of a JSON object to an actual JSON object in Python.", "input": "'{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'", "output": "import json\n\njson_string = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\n\njson_object = json.loads(json_string)", "category": "Python"}, {"instruction": "What is the best approach to solve this problem?", "input": "Given an array of integers, find the longest continuous increasing subarray within the array.", "output": "The best approach to solve this problem is to use the sliding window technique. This involves iterating through the array and keeping track of the start and end points of a window. We check to see if the elements of the window are increasing and update the start and end points accordingly. When the window becomes longer than the longest subarray found so far, we update the longest subarray. The time complexity of this approach is O(n).", "category": "Python"}, {"instruction": "List two advantages and two disadvantages of using a linked list data structure", "input": "", "output": "Advantages of using a linked list data structure: \n1. A linked list can grow and shrink in size as needed since nodes can be dynamically allocated. \n2. Nodes can be added at any point in the list without traversing the whole list. \n\nDisadvantages of using a linked list data structure: \n1. Time efficiency is reduced  since nodes must be searched sequentially. \n2. Memory efficiency is reduced since each node requires additional space to store references to the next node.", "category": "Python"}, {"instruction": "Create a HTML form for entering first name and last name.", "input": "", "output": "<form> \n  <label>First name:</label> \n  <input type=\"text\" name=\"first_name\" /> \n  <br><br> \n  <label>Last name:</label> \n  <input type=\"text\" name=\"last_name\" /> \n  <br><br> \n  <input type=\"submit\" value=\"Submit\" /> \n</form>", "category": "Python"}, {"instruction": "Find the maximum and minimum number in the following array with JavaScript.", "input": "[20, 40, 10, 30, 50]", "output": "let numbers = [20, 40, 10, 30, 50];\n\nlet minNumber = Math.min(...numbers);\nlet maxNumber = Math.max(...numbers);", "category": "Python"}, {"instruction": "Implement an algorithm to sort the following array.", "input": "[3, 5, 4, 6, 1, 2]", "output": "def sortArray(array):\n    n = len(array)\n    for i in range(n):\n        min_index = i\n        for j in range(i+1, n):\n            if array[min_index] > array[j]:\n                min_index = j\n        array[i], array[min_index] = array[min_index], array[i]\n    return array", "category": "Python"}, {"instruction": "Create a React component that renders a list of items.", "input": "items = [\"Apple\", \"Banana\", \"Cherry\"]", "output": "import React from 'react';\n\nconst ListView = (props) => {\n    return (\n        <div>\n            {\n                props.items.map((item, index) => (\n                    <li key={index}>{item}</li>\n                ))\n            }\n        </div>\n    );\n}\n\nexport default ListView;", "category": "Python"}, {"instruction": "Create a function that determines if two words are anagrams.", "input": "Fire, fry", "output": "def is_anagram(word1, word2):\n    word1 = word1.upper()\n    word2 = word2.upper()\n    return sorted(word1) == sorted(word2)", "category": "Python"}, {"instruction": "Identify the key differences between a set and a dictionary in Python.", "input": "", "output": "The key difference between a set and a dictionary in Python is that a set stores unordered elements while a dictionary stores key-value pairs. Additionally, dictionaries have a set of keys that are unique and immutable, while sets are unordered collections of unique and immutable elements. Sets are more efficient for searching and testing for membership, while dictionaries are more efficient for retrieving specific values.", "category": "Python"}, {"instruction": "Edit a given HTML string so that every word is displayed in bold.", "input": "<div>This is a sample sentence.</div>", "output": "<div>\n<strong>This</strong> <strong>is</strong> <strong>a</strong> <strong>sample</strong> <strong>sentence.</strong>\n</div>", "category": "Python"}, {"instruction": "Generate a random password of length 8 using Python.", "input": "", "output": "import random\n\ndef generate_password(length):\n    chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\n    password = \"\"\n    for i in range(length):\n        index = random.randint(0, len(chars)-1)\n        password += chars[index]\n    return password\n\nlength = 8\npassword = generate_password(length)\nprint(\"Here's your random password:\", password)", "category": "Python"}, {"instruction": "Normalize a column \"Weight\" in a Pandas dataframe.", "input": "", "output": "import pandas as pd\n\n# Read data from csv file\ndf = pd.read_csv(\"data.csv\")\n\n# Normalize the column \"Weight\"\ndf['Weight']=(df['Weight']-df['Weight'].min())/(df['Weight'].max()-df['Weight'].min())\n\n# Print the dataframe\nprint(df)", "category": "Python"}, {"instruction": "Write a SQL query to retrieve all the rows from the table \"Products\" that contain the product category \"Furniture\".", "input": "", "output": "SELECT * FROM Products WHERE product_category = 'Furniture';", "category": "Python"}, {"instruction": "Write a Ruby function that reverses a string.", "input": "", "output": "def reverse_string(str)\n    return str.reverse\nend", "category": "Python"}, {"instruction": "Write a C# function to find the largest among three given numbers.", "input": "3, 10, 4", "output": "public int LargestNumber(int a, int b, int c)\n{\n    if (a >= b && a >= c)\n        return a;\n    else if (b >= a && b >= c)\n        return b;\n    else\n        return c;\n}", "category": "Python"}, {"instruction": "Calculate the sine of a given angle using JavaScript.", "input": "45", "output": "let angle = 45;\nlet sine = Math.sin(angle * (Math.PI/180));\nconsole.log(sine);", "category": "Python"}, {"instruction": "Design a function in R to check if a variable is a character or not.", "input": "", "output": "is.character <- function(x){\n  return(is.character(x))\n}", "category": "Python"}, {"instruction": "Create a JavaScript object to store a user's information.", "input": "", "output": "let user = {\n  firstName : 'John',\n  lastName : 'Doe',\n  age : 30,\n  job : 'Software Engineer'\n};", "category": "Python"}, {"instruction": "Given a string and an index, create a function to return the character at the given index in the string.", "input": "string = \"Hello\"\nindex = 3", "output": "def get_char(string, index):\n    return string[index]\n\nresult = get_char(string, index)\nprint(result)\n\n# Output: l", "category": "Python"}, {"instruction": "Implement an algorithm to find the number of occurrences of a substring in a string.", "input": "string = \"This is a test\"\nsubstring = \"is\"", "output": "def count_substring(string, substring):\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n\n    return count\n\nresult = count_substring(string, substring)\nprint(result)\n\n# Output: 2", "category": "Python"}, {"instruction": "Explain what a linked list is and what operations can you perform on it.", "input": "", "output": "A linked list is a linear data structure consisting of a sequence of nodes, where each node contains a data element and a pointer to the next node. Operations that can be performed on a linked list include insertion, deletion, traversal, and searching.", "category": "Python"}, {"instruction": "Write an SQL query to get the name and date of birth of all the people born in the year 1975.", "input": "", "output": "SELECT name, date_of_birth \nFROM people \nWHERE YEAR(date_of_birth) = '1975';", "category": "Python"}, {"instruction": "Construct a C# class that stores a student's ID and name and defines a method to return the ID.", "input": "", "output": "public class Student\n{\n   private int id;\n   private string name;\n\n   public Student(int id, string name)\n   {\n     this.id = id;\n     this.name = name;\n   }\n\n   public int GetID()\n   {\n     return this.id;\n   }\n}", "category": "Python"}, {"instruction": "Define a function in JavaScript that returns true if a given number is even.", "input": "", "output": "function isEven(num) {\n return num % 2 === 0;\n}", "category": "Python"}, {"instruction": "Design a while loop in C++ that prints every third number between 1 and 10.", "input": "", "output": "int count = 1;\nwhile (count <= 10) {\n if (count % 3 == 0) {\n cout << count << endl;\n }\n count++;\n}", "category": "Python"}, {"instruction": "Construct an if statement for Python that checks if a given number is greater than 5.", "input": "", "output": "num = 7\nif num > 5:\n print(\"The number is greater than 5\")", "category": "Python"}, {"instruction": "Write a regular expression to check if a string an upper case letter followed by at least 4 digits.", "input": "", "output": "^[A-Z]\\d{4,}$", "category": "Python"}, {"instruction": "Create a JavaScript statement that generates a random number between 1 and 10.", "input": "", "output": "Math.floor(Math.random() * 10) + 1;", "category": "Python"}, {"instruction": "Design a SQL statement to select all the customers from the database with last name 'Smith'.", "input": "", "output": "SELECT * \nFROM customers \nWHERE last_name = 'Smith';", "category": "Python"}, {"instruction": "Create a for loop in Perl that adds all the numbers from 1 to 5.", "input": "", "output": "my $sum = 0;\nfor (my $i = 1; $i <= 5; $i++) {\n    $sum += $i;\n}\nprint $sum;", "category": "Python"}, {"instruction": "Construct a while loop in PHP that prints \"Hello, World!\" 4 times.", "input": "", "output": "<?php\n$count = 0;\nwhile ($count < 4) {\n    echo \"Hello, World!\";\n    $count++;\n}\n?>", "category": "Python"}, {"instruction": "Given the following data set, calculate the mean of the values.", "input": "[45, 63, 76, 89, 47]", "output": "double mean = (45 + 63 + 76 + 89 + 47) / 5;", "category": "Python"}, {"instruction": "You are provided with some sample data and you need to detect if there are any outliers present in the data set or not. Output true if any outlier is present, output false if there is no outlier.", "input": "[3, 4, 5, 15, 16]", "output": "true", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to calculate the present value of a future one-time cash payment.", "input": "let futureValue = 10000;\nlet rate = 0.06;\nlet periods = 10;", "output": "let presentValue  = futureValue / Math.pow(1 + rate, periods);", "category": "Python"}, {"instruction": "Create a SQL query to list the names of vehicles manufactured before the year 2000.", "input": "", "output": "SELECT name FROM vehicles WHERE year < 2000;", "category": "Python"}, {"instruction": "You need to identify if a given string is an anagram of another string or not. Output \"true\" if it is an anagram, output \"false\" if it is not.", "input": "String s1 = \"abcd\";\nString s2 = \"dcab\";", "output": "true", "category": "Python"}, {"instruction": "Create an array of five random numbers.", "input": "", "output": "int[] randomNumbers = new int[] { 8, 5, 2, 1, 9 };", "category": "Python"}, {"instruction": "Compute a % b.", "input": "a = 10, b = 3", "output": "int result = 10 % 3; // result is 1", "category": "Python"}, {"instruction": "Compute the median of the following list: [2, 5, 9, 12].", "input": "", "output": "double median = (5+9)/2.0; // median is 7.0", "category": "Python"}, {"instruction": "Write a function that takes in an array of strings as input and returns the longest string in the array.", "input": "[\"Apple\", \"Banana\", \"Orange\"]", "output": "string longestString(string[] strArr) {\n    string longest = \"\";\n    for (string str : strArr) {\n        if (str.length() > longest.length()) {\n            longest = str;\n        }\n    }\n    return longest;\n}", "category": "Python"}, {"instruction": "Create a switch statement that evaluates an integer from 0 to 5 and outputs a description of the number.", "input": "num = 4", "output": "// program to create a switch statement that evaluates an integer\nswitch(num) {\n    case 0: \n        console.log(\"num is 0\")\n        break;\n    case 1: \n        console.log(\"num is 1\")\n        break;\n    case 2: \n        console.log(\"num is 2\")\n        break;\n    case 3: \n        console.log(\"num is 3\")\n        break;\n    case 4: \n        console.log(\"num is 4\")\n        break;\n    case 5: \n        console.log(\"num is 5\")\n        break;\n    default:\n        console.log(\"num is not between 0 and 5\")\n        break;\n}", "category": "Python"}, {"instruction": "Retrieve the third character from a string using its index.", "input": "word = \"Hello\"", "output": "// program to retrieve the third character from a string using its index \nlet third_char = word[2]\nconsole.log(third_char)", "category": "Python"}, {"instruction": "Write an if statement to check if a string is equal to \"Hello\".", "input": "word = \"Hello\"", "output": "// program to check if a string is equal to \"Hello\"\nif (word == \"Hello\") {\n    console.log(\"String is equal to 'Hello'\")\n}", "category": "Python"}, {"instruction": "Create a function that takes two arguments, a number and a list, and returns a list with all elements from the original list multiplied by the number.", "input": "num = 2\nlst = [1, 2, 3, 4]", "output": "# function to multiply each element of list by number \ndef lst_multiply(num, lst):\n    new_lst = []\n    for num in lst:\n        new_lst.append(num * num)\n    return new_lst\n\n# main program\nprint(lst_multiply(num, lst))", "category": "Python"}, {"instruction": "Use a while loop to iterate over a list of numbers and find the first even number", "input": "numbers = [7, 3, 5, 11, 13]", "output": "# while loop to iterate over list of numbers\ni = 0 \nwhile i < len(numbers):\n    if numbers[i] % 2 == 0:\n        break\n    i += 1\n\n# main program\nif i < len(numbers):\n    print(\"First even number is \", numbers[i])\nelse:\n    print(\"No even numbers found\")", "category": "Python"}, {"instruction": "Construct an object that contains the properties for an employee\u2019s name, phone number, and salary.", "input": "", "output": "# construct employee object\nclass Employee:\n    def __init__(self, name, phone, salary):\n        self.name = name\n        self.phone = phone\n        self.salary = salary", "category": "Python"}, {"instruction": "Update a variable to be the negative of its value.", "input": "x = 5", "output": "# negative function\ndef negative(x):\n    return -x\n\n# main program\nx = negative(x)\nprint(x)", "category": "Python"}, {"instruction": "Create a valid HTML code snippet to create a list.", "input": "", "output": "<ul>\n  <li>item 1</li>\n  <li>item 2</li>\n  <li>item 3</li>\n</ul>", "category": "Python"}, {"instruction": "Create a method to filter an array and return all elements that are greater than or equal to 10.", "input": "arr = [1, 2, 6, 10, 14, 18]", "output": "# method to filter an array \ndef filter(arr):\n    new_arr = []\n    for element in arr:\n        if element >= 10:\n            new_arr.append(element)\n    return new_arr\n\n# main program\nprint(filter(arr))", "category": "Python"}, {"instruction": "Given an array of strings, find the string that is the most common in the array.", "input": "[\"Apple\", \"Banana\", \"Apple\", \"Orange\"]", "output": "String mostCommon = \"\";\nint maxCount = 0;\n\nfor (int i = 0; i < strArr.length; i++) {\n    int count = 0;\n    for (int j = 0; j < strArr.length; j++) {\n        if (strArr[i].equals(strArr[j])) {\n            count++;\n            if (count > maxCount) {\n                mostCommon = strArr[i];\n                maxCount = count;\n            }\n        }\n    }\n}\n\n// mostCommon is \"Apple\"", "category": "Python"}, {"instruction": "Create an object that stores the following key, value pairs: {name: John, age: 20, nationality: American}.", "input": "", "output": "Object person = {\n    \"name\": \"John\",\n    \"age\": 20,\n    \"nationality\": \"American\"\n};", "category": "Python"}, {"instruction": "Calculate the probability of drawing four aces from a standard deck of cards.", "input": "", "output": "double probability = (4.0/52.0)*(3.0/51.0)*(2.0/50.0)*(1.0/49.0); // probability is 0.0045248868778280541", "category": "Python"}, {"instruction": "Write a Java program that searches an array for a given value and returns the index at which it is found.", "input": "int[] arr = {3, 4, 6, 7, 8, 10};\nint searchValue = 8;", "output": "public static int searchArray(int[] arr, int searchValue) {\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] == searchValue) {\n            return i;\n        }\n    }\n    return -1;\n}", "category": "Python"}, {"instruction": "Create a variable that stores the result of the following function: 10 * 10 + 12 / 3.", "input": "", "output": "int result = 44;", "category": "Python"}, {"instruction": "Create a string with alternating characters from two other given strings.", "input": "string str1 = \"HELLO\";\nstring str2 = \"WORLD\";", "output": "string result = \"HWEOLLRODL\";", "category": "Python"}, {"instruction": "Reverse the following array of integers.", "input": "[1, 5, 7, 9, 10]", "output": "int[] reversedArray = new int[] { 10, 9, 7, 5, 1 };", "category": "Python"}, {"instruction": "Build a Bash script that takes two argument and write a function to swap the values of the arguments.", "input": "a = 10\nb = 20", "output": "#!/bin/bash\n\n# bash script to swap two arguments\n\n# function to swap two numbers\nswap(){\n    local temp=$1\n    1=$2\n    2=$temp\n}\n\n# main program \nswap $a $b\necho \"swapped values: a = $a and b = $b\"", "category": "Python"}, {"instruction": "How can this code be optimized?", "input": "def set_similarity(a, b): \n    same = 0\n    for i in a:\n        if i in b:\n            same += 1\n    return same/max(len(a),len(b))", "output": "def set_similarity(a, b): \n    return len(set(a).intersection(set(b)))/max(len(a),len(b))", "category": "Python"}, {"instruction": "Create a JavaScript code snippet to get a list of all the elements in an array with even index.", "input": "let arr = [1,2,3,4,5,6];", "output": "let evenIndexArr = arr.filter((elem, index) => index % 2 === 0);", "category": "Python"}, {"instruction": "Write a React component to render a table with 4 columns and 5 rows.", "input": "", "output": "class MyTable extends Component {\n render() {\n return (\n <table>\n <tr>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n </tr>\n <tr>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n </tr>\n <tr>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n </tr>\n <tr>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n </tr>\n <tr>\n <td>1</td>\n <td>2</td>\n <td>3</td>\n <td>4</td>\n </tr>\n </table>\n );\n }\n}", "category": "Python"}, {"instruction": "Write a function to extract a specific key from a dictionary.", "input": "{'a':1, 'b':2, 'c':3}", "output": "def extract_key(dictionary, key):\n    return dictionary.get(key)", "category": "Python"}, {"instruction": "Create a class called Vehicle with members model, manufacturer, and color.", "input": "", "output": "class Vehicle:\n    def __init__(self, model, manufacturer, color):\n        self.model = model\n        self.manufacturer = manufacturer\n        self.color = color", "category": "Python"}, {"instruction": "Using C++, write a program to sort an array of strings alphabetically.", "input": "[\"Hello\", \"World\", \"This\", \"Is\", \"A\", \"Test\"]", "output": "#include<iostream>\n#include<algorithm>\nusing namespace std;\n  \nint main() \n{ \n    string arr[] = { \"Hello\", \"World\", \"This\", \"Is\", \"A\", \"Test\" }; \n    int n = sizeof(arr) / sizeof(arr[0]); \n  \n    sort(arr, arr + n); \n  \n    for (int i = 0; i < n; i++) \n        cout << arr[i] << \" \"; \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Using HTML, create a navigation bar with 3 links \"Home\", \"About\", and \"Contact\".", "input": "", "output": "<nav>\n  <a href=\"home.html\">Home</a> -\n  <a href=\"about.html\">About</a> -\n  <a href=\"contact.html\">Contact</a>\n</nav>", "category": "Python"}, {"instruction": "Write a PHP script to print out all the odd numbers between 10 and 50.", "input": "", "output": "for ($i=10; $i<=50; $i++){\n    if ($i%2 != 0){\n        echo $i.\"\\n\";\n    }\n}", "category": "Python"}, {"instruction": "Using HTML, create a <div> element with an id \"mainBox\" and a width of 75%.", "input": "", "output": "<div id=\"mainBox\" style=\"width:75%\"></div>", "category": "Python"}, {"instruction": "Write an SQL query to select the name and age of all customers in London.", "input": "", "output": "SELECT name, age FROM Customers WHERE city = 'London';", "category": "Python"}, {"instruction": "Using CSS, write a code snippet to display a text shadow with a blur radius of 8px.", "input": "", "output": "text-shadow: 0px 0px 8px rgb(0, 0, 0);", "category": "Python"}, {"instruction": "Using Java, write a program to sort a provided array of integers in ascending order.", "input": "[2, 5, 3, 1, 9, 4]", "output": "public class SortIntArray{\n    public static void main(String[] args) {\n        int[] intArray = {2, 5, 3, 1, 9, 4};\n\n        Arrays.sort(intArray); \n\n        System.out.println(\"Sorted elements are:\");\n        for(int i : intArray){\n            System.out.println(i);\n        }\n    }\n}", "category": "Python"}, {"instruction": "Design a Java class for representing a stack data structure.", "input": "", "output": "public class MyStack {\n    int top; \n    int[] stackArray; \n  \n    // Constructor to initialize \n    public MyStack(int capacity) { \n        stackArray = new int[capacity]; \n        top = -1; \n    } \n  \n    // Push an element to the top of the stack\n    public void push(int data) { \n        stackArray[++top] = data; \n    } \n  \n    // Pop an element from the top of the stack \n    public int pop() { \n        return stackArray[top--]; \n    } \n  \n    // peek or peak an element from the top of the stack \n    public int peek() { \n        return stackArray[top]; \n    } \n  \n    // Check if the stack is empty \n    public boolean isEmpty() { \n        return (top == -1); \n    } \n  \n    // Return the size of the stack \n    public int size() { \n        return top + 1; \n    } \n}", "category": "Python"}, {"instruction": "Create a PHP function to check if a given string starts with a given substring.", "input": "", "output": "function startsWith($string, $input) {\n    return substr($string, 0, strlen($input)) === $input;\n}", "category": "Python"}, {"instruction": "Write Android code for creating an intent for taking a photo.", "input": "", "output": "Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\nif (takePictureIntent.resolveActivity(getPackageManager()) != null) {\n    startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE);\n}", "category": "Python"}, {"instruction": "Create an HTML form containing four text inputs: Name, Email, Phone Number and Address.", "input": "", "output": "<form>\n  <label>Name:\n    <input type=\"text\" name=\"name\">\n  </label>\n  <label>Email:\n    <input type=\"text\" name=\"email\">\n  </label>\n  <label>Phone Number:\n    <input type=\"text\" name=\"phone\">\n  </label>\n  <label>Address:\n    <input type=\"text\" name=\"address\">\n  </label>\n</form>", "category": "Python"}, {"instruction": "Write HTML code to create a table containing the following information: Name, Age, Gender.", "input": "", "output": "<table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n    <th>Gender</th>\n  </tr>\n  <tr>\n    <td>John Smith</td>\n    <td>30</td>\n    <td>Male</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Create a SQL statement to retrieve all data from the \"users\" table where the \"name\" field is equal to \"John Smith\".", "input": "", "output": "SELECT * FROM users \nWHERE name = 'John Smith';", "category": "Python"}, {"instruction": "Construct a for loop to iterate over a range of 10 numbers, printing out the square of each.", "input": "", "output": "for i in range(1, 11):\n    print(i*i)", "category": "Python"}, {"instruction": "Write a code to decode a given URL encoded string.", "input": "%40%7C%2523%5B", "output": "def decode_url(string):\n    string = string.replace('%40', '@')\n    string = string.replace('%7C', '|')\n    string = string.replace('%2523', '#')\n    string = string.replace('%5B', '[')\n    return string", "category": "Python"}, {"instruction": "Write a code to get the current US Dollar to Euro exchange rate from the European Central Bank.", "input": "", "output": "\"\"\"\nGet the current Euro to US Dollar exchange rate from the European Central Bank\n\"\"\"\n\nimport requests\nimport json\n\ndef get_currency_exchange_rate():\n    url = 'https://api.exchangeratesapi.io/latest?base=USD'\n    response = requests.get(url)\n    data = json.loads(response.text)\n    return data['rates']['EUR']\n\nif __name__ == '__main__':\n    print(get_currency_exchange_rate())", "category": "Python"}, {"instruction": "Create a function that given two strings, returns a new string with the characters of the two strings alternating.", "input": "('abcd', 'efgh')", "output": "def alternating_strings(str1, str2):\n    result = \"\"\n    \n    for i in range(min(len(str1), len(str2))):\n        result += str1[i] + str2[i]\n    \n    # take care of the rest of the elements\n    if len(str1) > len(str2):\n        result += str1[len(str1)-1]\n    else:\n        result += str2[len(str2)-1]\n    \n    return result", "category": "Python"}, {"instruction": "Write a HTML tag to create an ordered list.", "input": "", "output": "<ol>\n...\n</ol>", "category": "Python"}, {"instruction": "Write a MySQL statement to select the first 5 customers in the 'customers' table.", "input": "", "output": "SELECT * FROM customers LIMIT 5;", "category": "Python"}, {"instruction": "Generate an object using JavaScript that contains the numbers from 1 to 10.", "input": "", "output": "const myObject = {\n \"1\": 1,\n \"2\": 2, \n \"3\": 3, \n \"4\": 4, \n \"5\": 5, \n \"6\": 6, \n \"7\": 7, \n \"8\": 8, \n \"9\": 9, \n \"10\": 10\n};", "category": "Python"}, {"instruction": "Write a SVG code to create a circle with red radius of 25px.", "input": "", "output": "<svg width=\"50\" height=\"50\">\n  <circle cx=\"25\" cy=\"25\" r=\"25\" fill=\"red\" />\n</svg>", "category": "Python"}, {"instruction": "Write a Java program to print 'Hello World' five times.", "input": "", "output": "public class HelloWorld {\n public static void main(String[] args) {\n for(int i = 0; i < 5; i++) {\n System.out.println(\"Hello World\");\n }\n }\n}", "category": "Python"}, {"instruction": "Write a CSS selector to target all paragraphs.", "input": "", "output": "p { \n  /* CSS rules... */ \n}", "category": "Python"}, {"instruction": "Write Python code to generate a random integer between 1 and 10,000 (inclusive).", "input": "", "output": "import random\n\nnum = random.randint(1, 10000)\nprint(\"Random integer between 1 and 10,000:\", num)", "category": "Python"}, {"instruction": "Convert the following JavaScript code to valid C++ code.", "input": "let arr = [1, 2, 3];\nlet sum = 0;\nfor (let i = 0; i < arr.length; i++) {\n sum += arr[i];\n}", "output": "int arr[] = {1, 2, 3}; \nint sum=0; \nfor (int i=0; i<3; i++) \n{ \n sum += arr[i]; \n}", "category": "Python"}, {"instruction": "Describe the process of Gradient Descent algorithm.", "input": "", "output": "Gradient Descent is an algorithm used for finding the minimum value of a given function by iteration. The process begins with initializing the parameters at a random value and then computing the gradient of the cost function. The gradient can then be used to update the parameters in the direction of steepest descent. The process is then repeated until a local minimum of the cost function is achieved.", "category": "Python"}, {"instruction": "Write code for converting each character of a string to uppercase.", "input": "String: \"gpt is great\"", "output": "let upperCaseStr = \"\";\nfor (let char of str) {\n\tupperCaseStr += char.toUpperCase();\n}\nconsole.log(\"Uppercase string:\", upperCaseStr);", "category": "Python"}, {"instruction": "Solve this math problem using Python code.", "input": "Problem: Find the 3 terms in an arithmetic progression whose sum is 42 and the common difference is 5.", "output": "#Find the first term\na = (42/3) - (2*5)\na = 10\n\n#Find the other two terms\nb = a + 5\nc = b + 5\n\n#Print the answer\nprint(\"The 3 terms in an arithmetic progression whose sum is 42 and the common difference is 5 are:\", a, b, c)", "category": "Python"}, {"instruction": "Classify the types of sentences in the given text.", "input": "The quick brown fox jumped over the lazy dog. She jumped happily.", "output": "The first sentence is a declarative sentence.\nThe second sentence is an exclamatory sentence.", "category": "Python"}, {"instruction": "Construct the SQL query needed to create a table with given columns.", "input": "Table name: customers \nColumns: ID (INT), Name (VARCHAR (100)), Phone (INT), City (VARCHAR (100))", "output": "CREATE TABLE customers (\n    ID INT,\n    Name VARCHAR(100),\n    Phone INT,\n    City VARCHAR(100)\n);", "category": "Python"}, {"instruction": "Write code for finding the maximum of two numbers given as input.", "input": "x=15, y=17", "output": "let maxNum = 0;\n\nif (x > y) {\n    maxNum = x;\n} else {\n    maxNum = y;\n}\n\nconsole.log(\"The maximum of x and y is:\", maxNum);", "category": "Python"}, {"instruction": "Create a dictionary from a given list of tuples.", "input": "[('a', 1), ('b', 2), ('c', 3)]", "output": "def list_to_dict(tuples_list):\n    result = {}\n    for tuple_ in tuples_list:\n        result[tuple_[0]] = tuple_[1]\n    \n    return result", "category": "Python"}, {"instruction": "Create a code that takes two strings and checks whether they are a pair or not.", "input": "('AB', 'CD')", "output": "def is_pair(str1, str2):\n    return str1[0] == str2[0] and str1[1] == str2[1]", "category": "Python"}, {"instruction": "Calculate the standard deviation of the given set of numbers.", "input": "[9, 2, 5, 4, 12, 7, 8, 11, 9, 3, 7, 4, 12, 5, 4, 10, 9, 6, 9, 4]", "output": "Standard deviation of the given set of numbers: 3.26", "category": "Python"}, {"instruction": "Find the index of an element in a given list.", "input": "list = [1, 2, 3, 4, 5]\nelement = 3", "output": "2", "category": "Python"}, {"instruction": "Given a string, remove all characters except for alphabets and write the new string.", "input": "my_string = \"Hello, world!\"", "output": "Hello world", "category": "Python"}, {"instruction": "Calculate the number of days between two given dates in Python.", "input": "date1 = '2020-09-13'\ndate2 = '2021-02-06'", "output": "122", "category": "Python"}, {"instruction": "What is the command to install Flask using pip?", "input": "", "output": "The command to install Flask using pip is \"pip install flask\".", "category": "Python"}, {"instruction": "Design a HTML page to register a new user.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<body>\n<h2>User Registration</h2>\n\n<form action=\"/action_page.php\">\n  Username:<br>\n  <input type=\"text\" name=\"username\" value=\"\"><br>\n  Email:<br>\n  <input type=\"text\" name=\"email\" value=\"\"><br><br>\n  <input type=\"submit\" value=\"Submit\">\n</form> \n\n</body>\n</html>", "category": "Python"}, {"instruction": "Construct a Java switch statement to check whether a given number is positive, negative, or zero.", "input": "Number: -7", "output": "int number = -7;\n\nswitch (number) {\n case 0: \n  System.out.println(\"Zero\");\n  break;\n case > 0:\n  System.out.println(\"Positive\");\n  break;\n case < 0:\n  System.out.println(\"Negative\");\n  break;\n}", "category": "Python"}, {"instruction": "Using Python, write a function to format a given date.", "input": "Date: \"2021-02-14\"\nFormat: \"dd/mm/yyyy\"", "output": "def format_date(date, date_format):\n date = date.split('-') \n day = date[2]\n month = date[1]\n year = date[0]\n if date_format == \"dd/mm/yyyy\": \n  formatted_date = day + \"/\" + month + \"/\" + year\n return formatted_date", "category": "Python"}, {"instruction": "What is the syntax to return the total number of elements in an array using JavaScript?", "input": "", "output": "The syntax to return the total number of elements in an array using JavaScript is as follows:\n\narray.length;", "category": "Python"}, {"instruction": "Create a MySQL query that returns the sum of the points scored by all students.", "input": "Table Name: student_points\nTable Structure: student_id INTEGER, points INTEGER", "output": "SELECT SUM(points) \nFROM student_points;", "category": "Python"}, {"instruction": "What data type is best suited to store a list of students' names?", "input": "", "output": "A list of students' names can best be stored using a string data type. Strings are character sequences, making them well-suited for storing text-based information such as names. Storing a list of student names as a string is also more efficient memory-wise than other data types, since strings are immutable and can be reused for different values.", "category": "Python"}, {"instruction": "Design a JavaScript function named \"calculate\" that calculates the mean of a given array.", "input": "Array: [1, 5, 8, 9, 10]", "output": "function calculate(array) {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  let mean = sum / array.length; \n  return mean;\n}", "category": "Python"}, {"instruction": "Generate an array in Python of size 10 filled with Random numbers between 1 to 100.", "input": "", "output": "import random\narr = [random.randint(1,100) for i in range(10)]", "category": "Python"}, {"instruction": "Write a function in Python to compress a given string.", "input": "aabcccccaaa", "output": "def compression(string):\n    output = \"\"\n    count = 1\n    curr_char = string[0]\n    for char in string[1:]:\n        if char == curr_char:\n            count += 1\n        else:\n            output += curr_char + str(count)\n            curr_char = char\n            count = 1\n    output += curr_char + str(count)\n    return output\n\nprint(compression('aabcccccaaa'))\n# Output: a2b1c5a3", "category": "Python"}, {"instruction": "Edit the following HTML code snippet to give the <body> tag the class 'main'.", "input": "<html>\n    <head>\n        <title>Page Title</title>\n    </head>\n</html>", "output": "<html>\n    <head>\n        <title>Page Title</title>\n    </head>\n    <body class=\"main\">\n    </body>\n</html>", "category": "Python"}, {"instruction": "Categorize the given text into different class.", "input": "The patient has a fever, headache and sore throat", "output": "Category 1 - Symptoms: fever, headache, sore throat\nCategory 2 - Illness: unknown", "category": "Python"}, {"instruction": "Generate a random string in JavaScript of length 5 containing only characters from 'A' to 'Z'.", "input": "", "output": "let randomStr = '';\nconst possibleChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\nfor (let i = 0; i < 5; i++ ){\n    let randomIndex = Math.floor(Math.random() * possibleChars.length);\n    let randomChar = possibleChars.charAt(randomIndex); \n    randomStr += randomChar\n}\nconsole.log(randomStr);", "category": "Python"}, {"instruction": "Create a web application using Flask in Python that displays the current date and time.", "input": "", "output": "from flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef current_datetime():\n    from datetime import datetime\n    now = datetime.now()\n    return render_template('template.html', current_datetime = now)\n\nif __name__ == \"__main__\":\n\tapp.run(debug = True)\n\ntemplate.html:\n<html>\n    <head>\n        <title> Current Date and Time</title>\n    </head>\n    <body>\n        <h1> Current Date and Time </h1>\n        <p> The current date and time is {{ current_datetime }}</p>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Create an array in Python of size 10 filled with zeroes.", "input": "", "output": "arr = [0] * 10", "category": "Python"}, {"instruction": "Create a SQL query to fetch all user names from a table.", "input": "Table name: users\nTable structure: user_id INTEGER, user_name VARCHAR", "output": "SELECT user_name \nFROM users;", "category": "Python"}, {"instruction": "How can a string be converted to a list in Python?", "input": "", "output": "A string can be converted to a list in Python by using the list() function. The syntax for this is: \n\nlist(string);\n\nFor example, to convert the string \"apple\" to a list, you would use: \n\nlist(\"apple\");", "category": "Python"}, {"instruction": "Create a function to print a Diamond shape.", "input": "Size: 5", "output": "def print_diamond(size):\n    for i in range(1, size + 1):\n        print(\" \" * (size - i) + \"*\" * (2 * i - 1))\n    for i in range(size - 1, 0, -1):\n        print(\" \" * (size - i) + \"*\" * (2 * i - 1))", "category": "Python"}, {"instruction": "Compute the Fibonacci sequence upto n.", "input": "", "output": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)", "category": "Python"}, {"instruction": "Given a list of numbers, create a function that finds the two elements that sum to a given target number.", "input": "nums = [2, 45, 7, 9, 15]\ntarget = 16", "output": "def two_sum(nums, target):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [i, j]\n\nresult = two_sum(nums, target)\nprint(result) \n\n# Output: [2, 3]", "category": "Python"}, {"instruction": "Create a simple program to sort an array of integers from smallest to largest.", "input": "[7,3,1,9,2]", "output": "def sort_array(arr):\n    arr.sort()\n    return arr \n\nresult = sort_array([7,3,1,9,2])\nprint(result)\n\n# Output: [1,2,3,7,9]", "category": "Python"}, {"instruction": "Create a function called ask_age() that prints \"What is your age?\" and also returns the users input.", "input": "", "output": "def ask_age(): \n    print('What is your age?')\n    age = input()\n    return age", "category": "Python"}, {"instruction": "Implement a stack data structure using linked lists.", "input": "", "output": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.next = None\n\nclass Stack:\n\tdef __init__(self):\n\t\tself.head = None\n\t\tself.num_elements = 0\n\n\tdef push(self, element):\n\t\tnew_node = Node(element)\n\t\tif self.head == None:\n\t\t\tself.head = new_node\n\t\telse:\n\t\t\tnew_node.next = self.head\n\t\t\tself.head = new_node\n\t\tself.num_elements += 1\n\t\t\n\tdef pop(self):\n\t\tif self.is_empty():\n\t\t\treturn None\n\t\ttemp = self.head\n\t\tself.head = self.head.next\n\t\tself.num_elements -= 1\n\t\treturn temp.data\n\n\tdef is_empty(self):\n\t\tif self.num_elements == 0:\n\t\t\treturn True\n\t\treturn False\n\n\tdef top(self):\n\t\tif self.head:\n\t\t\treturn self.head.data\n\t\treturn None", "category": "Python"}, {"instruction": "Write a function to classify a news article by its tone.", "input": "", "output": "def classifyArticle(article):\n    tone_dict = {\n        'positive': 0,\n        'neutral': 0,\n        'negative': 0\n    }\n    for token in article:\n        if token in pos_words:\n            tone_dict['positive'] += 1\n        elif token in neg_words:\n            tone_dict['negative'] += 1\n        else:\n            tone_dict['neutral'] += 1\n\n    sorted_tones = sorted(tone_dict.items(), key=lambda x:x[1], reverse=True)\n    return sorted_tones[0][0]", "category": "Python"}, {"instruction": "Create a function to parse and print the date in DD-MM-YYYY format.", "input": "date_string = '01 Jan 2018'", "output": "def parseDate(date_string):\n    date_list = date_string.split()\n    month_dict = {\n        'Jan': '01', \n        'Feb': '02',\n        'Mar': '03',\n        'Apr': '04',\n        'May': '05',\n        'Jun': '06',\n        'Jul': '07',\n        'Aug': '08',\n        'Sep': '09',\n        'Oct': '10',\n        'Nov': '11',\n        'Dec': '12'\n    }\n    day = date_list[0]\n    month = month_dict[date_list[1]]\n    year = date_list[2]\n\n    return day + \"-\" + month + \"-\" + year", "category": "Python"}, {"instruction": "Design a function to remove all duplicate words from a sentence.", "input": "\"This is this is a sentence with with repeats repeats\"", "output": "def removeDuplicates(txt):\n    newTxt = []\n    txt = txt.split()\n\n    for x in txt:\n        if x not in newTxt:\n            newTxt.append(x)\n\n    return \" \".join(newTxt)", "category": "Python"}, {"instruction": "Rewrite the following function to function asynchronously.", "input": "function example(data) {\n    console.log('Started processing data');\n    output = process(data);\n    console.log('Finished processing data');\n    return output;\n}", "output": "async function example(data) {\n    console.log('Started processing data');\n    let output = await process(data);\n    console.log('Finished processing data');\n    return output;\n}", "category": "Python"}, {"instruction": "Implement a method to sort a list of numbers using the quick sort algorithm.", "input": "[10, 3, 9, -2, 8, 7]", "output": "def quickSort(arr): \n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quickSort(left) + middle + quickSort(right)", "category": "Python"}, {"instruction": "Analyze this code for potential runtime errors.", "input": "def factorial(n):\n    result = 1\n    if n >= 0:\n        for i in n:\n            result *= i\n        return result", "output": "This code may result in a runtime error because an iterable is expected as an argument for the for loop, but the argument passed is a number rather than an iterable. Additionally, the if-statement does not have an else block making it possible for the function to return None instead of a number. To fix the code, the argument passing to the for loop should be changed to range(n) and the if-statement should have an else block that returns 1 if n is smaller than 0.", "category": "Python"}, {"instruction": "Compile a piece of code written in Python language.", "input": "", "output": "python -c \"import py_compile; py_compile.compile('foo.py')\"", "category": "Python"}, {"instruction": "Create an expression tree for the expression (2+3)*4.", "input": "", "output": "*\n        / \\\n       +   4\n      / \\\n     2   3", "category": "Python"}, {"instruction": "Rewrite this function using a recursive algorithm.", "input": "def factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result", "output": "def factorial(n): \n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "category": "Python"}, {"instruction": "Identify which is the given data type", "input": "Data: [1,2,3]", "output": "The given data is a list.", "category": "Python"}, {"instruction": "Create a function to append a new element to a list.", "input": "", "output": "def append_list(my_list, new_element):\n    my_list.append(new_element)\n    return my_list", "category": "Python"}, {"instruction": "What is static typing in programming?", "input": "", "output": "Static typing is a type of type system where the type of each variable is determined at compile-time instead of at runtime. This means that the variables and their types are checked at compile-time of the program and any type mismatch will result in an error. This leads to better performance as it prevents runtime errors due to type mismatch and also makes the code more readable.", "category": "Python"}, {"instruction": "Write a code to implement an LRU (Least Recently Used) cache.", "input": "", "output": "class LRUCache:\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.cache = {}\n        self.lru = list()\n           \n    # get an item from the cache and update its timestamp\n    def get(self, key):\n        if key in self.cache:\n            self.lru.remove(key)\n            self.lru.append(key)\n            return self.cache[key]\n        else:\n            return -1\n             \n    # add a new item to the cache, discard the least recently used item if cache is full \n    def put(self, key, value):\n        if len(self.cache) >= self.capacity:\n            self.cache.pop(self.lru[0])\n            self.lru.pop(0)\n        if key in self.cache: \n            self.lru.remove(key)\n        self.cache[key] = value\n        self.lru.append(key)", "category": "Python"}, {"instruction": "Extract the following records from the given table using a SQL query", "input": "Table name: Student", "output": "SELECT * FROM Student WHERE age > 18;", "category": "Python"}, {"instruction": "Create a SQL query which returns the records from the following table only for the year 2010.", "input": "Table name: Record", "output": "SELECT * FROM Record WHERE year = 2010;", "category": "Python"}, {"instruction": "Create a C program which implements the following algorithm:", "input": "Given an array of size n, print all distinct elements in the array in sorted order.", "output": "#include<stdio.h>\n\n// A utility function to swap elements at two indexes in an array\nvoid swap(int arr[], int i, int j)\n{\n\tint temp = arr[i];\n\tarr[i] = arr[j];\n\tarr[j] = temp;\n}\n\n// Function to print distinct elements in an array\nvoid printDistinct(int arr[], int n)\n{\n\t// Pick all elements one by one\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\t// Check if the picked element is already printed\n\t\tint j;\n\t\tfor (j=0; j<i; j++)\n\t\t\tif (arr[i] == arr[j])\n\t\t\t\tbreak;\n\n\t\t// If not printed earlier, then print it\n\t\tif (i == j)\n\t\t\tprintf(\"%d \", arr[i]);\n\t}\n}\n\n// Driver program\nint main()\n{\n\tint arr[] = {6, 10, 5, 4, 9, 120, 4, 6, 10};\n\tint n = sizeof(arr)/sizeof(arr[0]);\n\n\t// Function calling\n\tprintDistinct(arr, n);\n\n\treturn 0;\n}", "category": "Python"}, {"instruction": "Write a dictionary comprehension to mapp the following list", "input": "[('a',0),('b',1),('c',2)]", "output": "{key: value for (key,value) in [('a',0),('b',1),('c',2)]}", "category": "Python"}, {"instruction": "Check if the two strings are anagrams", "input": "bombe\nbemob", "output": "def is_anagram(str1, str2): \n    return sorted(str1) == sorted(str2)", "category": "Python"}, {"instruction": "Write a loop to print the characters of a string in reverse order", "input": "myString", "output": "for i in range(len(myString)-1,-1,-1):\n    print(myString[i])", "category": "Python"}, {"instruction": "Compute the sum of two integer inputs separated by a space", "input": "1 5", "output": "6", "category": "Python"}, {"instruction": "Sort the elements of an array in ascending order using Bubble Sort algorithm in C++.", "input": "arr[] = {4, 5, 2, 9, 3}", "output": "#include <iostream>\nusing namespace std;\n  \nint main() \n{ \n    int arr[] = {4, 5, 2, 9, 3};\n    int n = sizeof(arr)/sizeof(arr[0]); \n  \n    // bubble sort algorithm \n    for (int i = 0; i < n-1; i++)      \n     \n        // Last i elements are already in place    \n        for (int j = 0; j < n-i-1; j++)  \n            if (arr[j] > arr[j+1]) \n                swap(arr[j], arr[j+1]); \n  \n    cout << \"Sorted array: \\n\"; \n    for (int i=0; i < n; i++) \n        cout << arr[i] << \" \"; \n    cout << endl; \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Print the total number of characters in a given string using JavaScript.", "input": "", "output": "let str = \"Hello World!\";\nlet num_chars = str.length;\nconsole.log(`The string has ${num_chars} characters.`);", "category": "Python"}, {"instruction": "Debug this Python code and explain why it was not running.", "input": "def string_split(string, n):\nwords = string.split(\" \")\nfor x in words[:n]:\nprint(\" \".join(words[:x]))", "output": "def string_split(string, n):\n    words = string.split(\" \")\n    for x in range(n):\n        print(\" \".join(words[:x]))\n\nThe code was not running as initially written because the range used in the for loop was not provided. Inside the for loop, the variable x needed to be given a range (e.g. range(n)) so that it can iterate over each of the elements of the words list properly. The loop should have looked like this: for x in range(n):.", "category": "Python"}, {"instruction": "Print the fibonacci sequence of length 10", "input": "", "output": "def fibonacci(length): \n    result = [] \n    a, b = 0, 1\n    for _ in range(length): \n        result.append(a) \n        a, b = b, a + b \n    return result", "category": "Python"}, {"instruction": "Write a PHP program to check if a given string ends with the specified character.", "input": "$string = \"Hello World!\"", "output": "<?php\n$string = \"Hello World!\";\n \n$last_character = $string[strlen($string) - 1];\n \nif ($last_character == \"!\")\n    echo \"$string ends with '!'\";\nelse \n    echo \"$string does not end with '!'\";\n?>", "category": "Python"}, {"instruction": "Create an HTML page to list the students in a class list in a table.", "input": "", "output": "<html>\n  <head>\n    <title>Class List</title>\n  </head>\n  <body>\n    <h2>Class List</h2>\n    <table>\n      <tr>\n        <th>Name</th><th>Age</th><th>Gender</th>\n      </tr>\n      <tr>\n        <td>John Doe</td><td>21</td><td>Male</td>\n      </tr>\n      <tr>\n        <td>Catrine Smith</td><td>18</td><td>Female</td>\n      </tr>\n      <tr>\n        <td>John Wilkins</td><td>19</td><td>Male</td>\n      </tr>\n    </table>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a Python code snippet to sort a dictionary by its values in ascending order.", "input": "dictionary = {'a': 5, 'b': 2, 'c': 4}", "output": "sorted_dictionary = dict(sorted(dictionary.items(), key=lambda item: item[1]))\nprint(sorted_dictionary) # result: {'b': 2, 'c': 4, 'a': 5}", "category": "Python"}, {"instruction": "Write a code snippet to convert a list in Python to a set.", "input": "list1 = [1,2,3,4,5]", "output": "set1 = set(list1) # set1 will now contain [1,2,3,4,5]", "category": "Python"}, {"instruction": "Predict the output of this JavaScript function.", "input": "function divideThree(x) {\n\treturn x / 3;\n}\n\nconsole.log(divideThree(9));", "output": "The output of this function is 3.", "category": "Python"}, {"instruction": "Parse a given JSON string and extract all the values of the key \"name\".", "input": "json_str = '{\"name\": \"Jack\", \"age\": 22, \"status\": \"Active\"}'", "output": "import json\n\nparsed = json.loads(json_str)\nname_list = []\n\nfor key, value in parsed.items():\n    if key == 'name':\n        name_list.append(value)\n\nprint(name_list)", "category": "Python"}, {"instruction": "Implement a Bubble Sort algorithm.", "input": "list = [10, 5, 9, 25, 1]", "output": "def bubbleSort(list): \n    n = len(list) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if list[j] > list[j+1] : \n                list[j], list[j+1] = list[j+1], list[j] \n  \n# Driver code to test above \nlist = [10, 5, 9, 25, 1]\nbubbleSort(list) \nprint (\"Sorted array :\") \nprint(list)", "category": "Python"}, {"instruction": "Make the following sentence capitalized.", "input": "the quick brown fox", "output": "The Quick Brown Fox", "category": "Python"}, {"instruction": "Count the number of occurrences of each character in a given string and print the output.", "input": "str = \"abbabbabbb\"", "output": "from collections import Counter\nstr = \"abbabbabbb\"\nletters = Counter(str)\nfor key, value in letters.items():\n    print(f\"Character {key} occurs {value} time(s)\")", "category": "Python"}, {"instruction": "Develop a PHP program to extract a substring from a given string.", "input": "string = \"Hello World!\", start = 1, length = 8", "output": "<?php\n    $string =\"Hello World!\";\n    $start = 1;\n    $length = 8;\n    $extractedString = substr($string, $start, $length);\n    echo $extractedString;\n?>", "category": "Python"}, {"instruction": "Using the provided list of numbers, compute the average", "input": "[1, 4, 7, 10]", "output": "def calculate_average(numbers):\n    return sum(numbers) / len(numbers)", "category": "Python"}, {"instruction": "Analyze and explain the output of the following C program.", "input": "#include<stdio.h>\nint main(){\n int x,y;\n  x=2;\n   y=++x*5;\n   printf(\"%d\\n\",y);\n}", "output": "The output of this program is \"15\". This is because the pre-increment operator (++) is used in the statement \"y=++x*5\". This means that the value of x is first incremented by 1 and then used in the statement. Therefore, the value of x is 3 and y is assigned the value 3*5 which is 15.", "category": "Python"}, {"instruction": "Create a HTML web page which shows the news for the day.", "input": "", "output": "<html>\n<head>\n  <title>Today's News</title>\n</head>\n<body>\n  <h1>Today's News</h1>\n  <div class=\"news-container\">\n    <div class=\"news-article\"> ... </div>\n    <div class=\"news-article\"> ... </div>\n    <div class=\"news-article\"> ... </div>\n  </div>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a JavaScript program to find the greatest common divisor (GCD) of two given positive numbers.", "input": "x = 18\ny = 12", "output": "function gcd(x, y)  { \n\tif (y == 0)  \n\t\treturn x; \n\telse\n\t\treturn gcd(y, x % y); \n}\t \n\nconsole.log(gcd(18, 12));", "category": "Python"}, {"instruction": "About a given number n, can you write a JavaScript program to find the sum of all the numbers that are greater than 0 and less than n?", "input": "n = 5", "output": "var sum = 0; \n  \nfor (var i = 1; i < n; i++) { \n    sum = sum + i; \n} \n\nconsole.log(sum)", "category": "Python"}, {"instruction": "Can you create a PHP function to remove all the special characters in a given string?", "input": "string = \"Hello World!@#$%\"", "output": "function removeSpecialCharacters($string) { \n  $pattern = '/[^A-Za-z0-9]/';\n  return preg_replace($pattern, '', $string); \n} \n\necho removeSpecialCharacters($string);", "category": "Python"}, {"instruction": "Create a SQL query to show the name and salary of all employees in the database with the role of Manager.", "input": "", "output": "SELECT name, salary\nFROM Employees\nWHERE role = 'Manager';", "category": "Python"}, {"instruction": "Write a JavaScript program that prints all the even numbers from 0 to a given number n.", "input": "n = 10", "output": "for (var i = 0; i <= n; i++) {\n  if (i % 2 == 0) {\n    console.log(i);\n  }\n}", "category": "Python"}, {"instruction": "Split the following string into a list of words.", "input": "string = \"this is a string\"", "output": "words = string.split(' ')", "category": "Python"}, {"instruction": "Suggest a complete snippet of HTML code to create a simple form.", "input": "", "output": "<form>\n  <label>Name:</label><br>\n  <input type=\"text\" name=\"name\"><br>\n  <label>Email:</label><br>\n  <input type=\"email\" name=\"email\"><br><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Suggest a suitable HTML tag to display the following headline.", "input": "This is the headline", "output": "<h1>This is the headline</h1>", "category": "Python"}, {"instruction": "Describe a method to solve an equation of the form ax + b = 0.", "input": "", "output": "The equation ax + b = 0 can be solved by subtracting b from both sides and then dividing both sides by a. This will yield the solution x = -b/a.", "category": "Python"}, {"instruction": "Suggest a valid JSON dictionary for the following data.", "input": "Name: John, Age: 32, Profession: Developer", "output": "{\"Name\": \"John\", \"Age\": 32, \"Profession\": \"Developer\"}", "category": "Python"}, {"instruction": "Fill in the code to implement a for loop to get the sum of all the elements in a list.", "input": "my_list = [1, 2, 3, 4, 5]", "output": "total = 0\nfor i in my_list:\n total += i", "category": "Python"}, {"instruction": "Reformat the following HTML code to make it better readable.", "input": "<div><ul><li>Item 1</li><li>Item 2</li></ul></div>", "output": "<div>\n  <ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n  </ul>\n</div>", "category": "Python"}, {"instruction": "Suggest a JavaScript code to generate a random alphanumeric string of 8 characters.", "input": "", "output": "let randomString = Math.random().toString(36).substring(2, 10);\nconsole.log(randomString);", "category": "Python"}, {"instruction": "Create a SQL query to select the top 5 most expensive items from a table.", "input": "", "output": "SELECT * FROM TABLE_NAME\nORDER BY PRICE DESC\nLIMIT 5;", "category": "Python"}, {"instruction": "Provide an appropriate name for a Python module that contains a class for a user.", "input": "", "output": "The appropriate name for the module could be \"user_class.py\".", "category": "Python"}, {"instruction": "Suggest a completion to the following React component.", "input": "import React from 'react';\n\nclass MyComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {", "output": "import React from 'react';\n\nclass MyComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            age: 0\n        };\n    }\n}", "category": "Python"}, {"instruction": "Compute the occurrence of each character in a given string.", "input": "my_string = \"Hello World!\"", "output": "def compute_occurrences(my_string):\n    count_dict = {}\n    for c in my_string:\n        count_dict[c] = count_dict.get(c, 0) +1\n    return count_dict\n\n# test\nmy_string = \"Hello World!\"\nprint(compute_occurrences(my_string)) # {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}", "category": "Python"}, {"instruction": "Calculate the union of two given sets in Java.", "input": "Set 1: {1, 2, 3}\nSet 2 : {3, 4, 5}", "output": "Set<Integer> set1 = new HashSet<>();\nset1.add(1);\nset1.add(2);\nset1.add(3);\n\nSet<Integer> set2 = new HashSet<>();\nset2.add(3);\nset2.add(4);\nset2.add(5);\n\nSet<Integer> union = new HashSet<>(set1);\nunion.addAll(set2);\n\nSystem.out.println(union); // [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Format the below Epoch time (in milliseconds) to a date format in PHP.", "input": "Time: 1574395883358", "output": "echo date(\"Y-m-d H:i:s\", 1574395883358/1000);\n// Output: 2019-11-23 23:54:43", "category": "Python"}, {"instruction": "Rewrite the following SQL query so that it produces the same result but in an efficient way.", "input": "SELECT * FROM Orders WHERE OrderId IN (SELECT OrderId FROM OrderItems WHERE ProductId IN (SELECT ProductId FROM Products WHERE CategoryId = 2))", "output": "SELECT Orders.* \nFROM Orders \nINNER JOIN OrderItems \nON Orders.OrderId = OrderItems.OrderId \nINNER JOIN Products \nON OrderItems.ProductId = Products.ProductId\nWHERE Products.CategoryId = 2", "category": "Python"}, {"instruction": "Develop a code in Java to calculate the BMI given the height and weight of a person.", "input": "", "output": "public double calculateBMI(double height, double weight){\n   double bmi;\n   height = height/100;\n   bmi = weight / Math.pow(height, 2);\n   return bmi;\n}", "category": "Python"}, {"instruction": "Suggest an algorithm for sorting a list of integers.", "input": "[7, 4, 5, 10, 3]", "output": "// Bubble Sort Algorithm\n// Set a flag to indicate whether there are any swaps during the current iteration\n// Initialize the flag to false and iterate until the flag turns true\n// During the iteration, compare each pair of adjacent elements and swap them if necessary\n// After each iteration, set the flag to false\n// If it is still false after iteration, break the loop since the list must be sorted\n\nvar list = [7, 4, 5, 10, 3];\nvar flag = false;\nwhile (flag === false) {\n    flag = true;\n    for (var i=0; i<list.length -1; i++) {\n        if (list[i] > list[i+1]) {\n            var temp = list[i];\n            list[i] = list[i+1];\n            list[i+1] = temp;\n            flag = false;\n        }\n    }\n}\nconsole.log(list); // prints [3, 4, 5, 7, 10]", "category": "Python"}, {"instruction": "Create a SQL query to find the total revenue for services in the month of February.", "input": "", "output": "SELECT SUM(t.total)\nFROM orders o\nINNER JOIN order_items t ON o.order_id = t.order_id\nINNER JOIN products p ON t.product_id = p.product_id\nWHERE p.type = 'service' \n  AND MONTH(o.order_date) = 2\n  AND YEAR(o.order_date) = YEAR(CURDATE());", "category": "Python"}, {"instruction": "Create a C++ algorithm to compute the Fibonacci sequence.", "input": "", "output": "#include <iostream> \n\nint fibonacci(int n) { \n    if (n <= 1) \n        return n; \n    return fibonacci(n - 1) + fibonacci(n - 2); \n} \n  \nint main() { \n    int n = 10; \n    std::cout << \"The Fibonacci number at position \" << n << \" is \" << fibonacci(n); \n    return 0; \n}", "category": "Python"}, {"instruction": "Create a Java class to represent a TV show.", "input": "", "output": "public class TVShow {\n  private String title; \n  private String network;\n  private String genre;\n  private int episodes;\n  \n  public TVShow(String t, String n, String g, int e) {\n    title = t;\n    network = n;\n    genre = g;\n    episodes = e;\n  }\n  \n  public String getTitle() {\n    return title;\n  }\n  \n  public String getNetwork() {\n    return network;\n  }\n  \n  public String getGenre() {\n    return genre;\n  }\n  \n  public int getEpisodes() {\n    return episodes;\n  }\n}", "category": "Python"}, {"instruction": "Create a SQL query to find the total sales for product category \u2018clothing\u2019.", "input": "", "output": "SELECT SUM(t.total)\nFROM orders o\nINNER JOIN order_items t ON o.order_id = t.order_id\nINNER JOIN products p ON t.product_id = p.product_id\nWHERE p.category = 'clothing';", "category": "Python"}, {"instruction": "Debug the code to encounter the issue mentioned in the comment.", "input": "def validate_password(password):\n    if len(password) < 8:\n        # bug: print message\n        return False\n    else:\n        return True", "output": "def validate_password(password):\n    if len(password) < 8:\n        # bug: print message\n        print('Password must be at least 8 characters.')\n        return False\n    else:\n        return True", "category": "Python"}, {"instruction": "Design an algorithm to find the shortest path in a maze using JavaScript.", "input": "", "output": "function findShortestPath(maze) {\n    let visited = new Set();\n\n    let queue = [];\n    queue.push({\n        row: 0,\n        col: 0\n    });\n\n    let minLength = Number.POSITIVE_INFINITY;\n\n    while (queue.length > 0) {\n        let node = queue.shift();\n        let row = node.row;\n        let col = node.col;\n        let length = node.length;\n\n        // Reached the end\n        if (row === maze.length - 1 && col === maze[0].length - 1) {\n            minLength = Math.min(minLength, length);\n        }\n\n        // Add neighbors\n        if (row - 1 >= 0 && maze[row - 1][col] === 0\n            && !visited.has(row - 1 + '_' + col)) {\n            queue.push({\n                row: row - 1,\n                col: col,\n                length: length + 1\n            });\n            visited.add(row - 1 + '_' + col);\n        }\n\n        if (row + 1 < maze.length && maze[row + 1][col] === 0\n            && !visited.has(row + 1 + '_' + col)) {\n            queue.push({\n                row: row + 1,\n                col: col,\n                length: length + 1\n            });\n            visited.add(row + 1 + '_' + col);\n        }\n\n        if (col - 1 >= 0 && maze[row][col - 1] === 0\n            && !visited.has(row + '_' + (col - 1))) {\n            queue.push({\n                row: row,\n                col: col - 1,\n                length: length + 1\n            });\n            visited.add(row + '_' + (col - 1));\n        }\n\n        if (col + 1 < maze[0].length && maze[row][col + 1] === 0\n            && !visited.has(row + '_' + (col + 1))) {\n            queue.push({\n                row: row,\n                col: col + 1,\n                length: length + 1\n            });\n            visited.add(row + '_' + (col + 1));\n        }\n    }\n\n    return minLength;\n}", "category": "Python"}, {"instruction": "Using list comprehension, create a list of even numbers between 1 and 20 in Python.", "input": "", "output": "even_nums_list = [num for num in range(1, 21) if num % 2 == 0]", "category": "Python"}, {"instruction": "Implement an algorithm to reverse a string in Java.", "input": "", "output": "public static String reverseString(String s) {\n  char[] arr = s.toCharArray();\n  int n = arr.length;\n\n  for (int i = 0; i < n/2; i++) {\n    char temp = arr[i];\n    arr[i] = arr[n-i-1];\n    arr[n-i-1] = temp;\n  }\n  return new String(arr);\n}", "category": "Python"}, {"instruction": "Create a feature for predicting a customer's subscription plan based off their purchase history.", "input": "The customer has purchased 2 shirts, 1 hat, and 3 pairs of jeans in the past month.", "output": "The prediction feature should calculate the customer's current subscription plan by taking into account the items they have purchased. It could use factors such as item types, quantity of items purchased, time since purchase, cost of items, sale promotions, combinations of items, and so forth. The feature should use a combination of analyzed data and established weights for each factor to accurately predict the customer's most likely subscription plan.", "category": "Python"}, {"instruction": "Write a JavaScript function that takes an array of strings and returns true if the strings are in sorted order.", "input": "array = [\"apple\", \"boy\", \"cat\", \"dog\"]", "output": "function isSorted(arr) {\n    let isSorted = true;\n    for (let i=1;i<arr.length;i++){\n        if(arr[i-1] > arr[i]){\n            isSorted = false;\n            break; \n        }\n    }\n    return isSorted;\n}\n\nconsole.log(isSorted([\"apple\", \"boy\", \"cat\", \"dog\"]));\n\n// Output\n// true", "category": "Python"}, {"instruction": "Generate an array of 10 random numbers between 1 and 100 using Python", "input": "", "output": "import random\n\ndef generate_random_array(n):\n    array= []\n    for _ in range(n):\n        array.append(random.randint(1, 100))\n    return array\n\nprint(generate_random_array(10))\n\n// Output\n// [14, 20, 32, 84, 59, 45, 11, 34, 57, 19]", "category": "Python"}, {"instruction": "Write a C# method that takes an array of integers and shuffles it.", "input": "array = [1, 2, 3, 4, 5, 6]", "output": "public static void shuffle(int[] array) \n{ \n    // Random variable \n    Random rand = new Random(); \n\n    for (int i = 0; i < array.Length; i++) \n    { \n        // Choose a random index \n        int index = rand.Next(i, array.Length); \n\n        // Swap \n        int temp = array[i]; \n        array[i] = array[index]; \n        array[index] = temp; \n    } \n}\n\n// Output\n// [3, 4, 5, 6, 1, 2]", "category": "Python"}, {"instruction": "Count the number of vowels in a sentence.", "input": "\"Hi there, how are you doing?\"", "output": "int countVowels = 0;\nString sentence = \"Hi there, how are you doing?\";\nfor (int i = 0; i < sentence.length(); i++) {\n    if (sentence.charAt(i) == 'a' || sentence.charAt(i) == 'e' || sentence.charAt(i) == 'i' \n    || sentence.charAt(i) == 'o' || sentence.charAt(i) == 'u') {\n        countVowels++;\n    }\n}\nSystem.out.println(\"Number of vowels in the string: \" + countVowels);", "category": "Python"}, {"instruction": "Create an array of ten unique numbers within the range 10 to 50.", "input": "", "output": "int[] numbers = {10, 13, 16, 23, 25, 37, 41, 45, 48, 50};", "category": "Python"}, {"instruction": "Generate a random string of length 8 that only contains alphabets.", "input": "", "output": "// Initialize an array containing all the letters of the alphabet\nString[] alphabet = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \n                     \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n \nString randomString = \"\";\nRandom random = new Random();\n \nfor (int i=0; i<8; i++) {\n    int index = random.nextInt(alphabet.length);\n    randomString += alphabet[index];\n}\nSystem.out.println(randomString); // Prints a random 8-character string consisting of alphabets", "category": "Python"}, {"instruction": "Edit the code so that it calculates the exponential of a given number.", "input": "public double calculatePower(double base, double power) {\n    return base * power;\n}", "output": "public double calculatePower(double base, double power) {\n    return Math.pow(base, power);\n}", "category": "Python"}, {"instruction": "Build a Python program to transform a string in a dictionary.", "input": "String: \" John, 26, Movie Watch, Jane, 31, Book Reader, Charlotte, 25, Music Listener\"", "output": "people_dict = {\n    'John': {'age': 26, 'hobby': 'Movie Watch'},\n    'Jane': {'age': 31, 'hobby': 'Book Reader'}, \n    'Charlotte': {'age': 25, 'hobby': 'Music Listener'}\n}", "category": "Python"}, {"instruction": "Explain the purpose of this function.", "input": "def mean(list):\n    total = 0\n    for item in list:\n        total += item\n    return total / len(list)", "output": "This function takes a list of numbers as an argument and returns the mean value, which is the sum of all the values divided by the number of values in the list.", "category": "Python"}, {"instruction": "Create a function to find the index of the first occurrence of a given number in a list", "input": "", "output": "def find_index(lst, num):\n  for index, val in enumerate(lst):\n    if val == num:\n      return index", "category": "Python"}, {"instruction": "Write an expression to calculate the average of the values in the following list", "input": "lst = [3, 8, 13, 5, 9]", "output": "average = sum(lst) / len(lst)", "category": "Python"}, {"instruction": "How do you remove the last item from a list in Python?", "input": "", "output": "list.pop()", "category": "Python"}, {"instruction": "Given the following two lists, create a new list containing the elements of both lists", "input": "list1 = [1, 2, 3]\nlist2 = [4, 5]", "output": "list3 = list1 + list2\nprint(list3)", "category": "Python"}, {"instruction": "Sort this list in ascending order", "input": "lst = [7, 11, 4, 9, 2, 10]", "output": "lst.sort()\nprint(lst)", "category": "Python"}, {"instruction": "Write a Java method that takes a string and prints out the number of occurrences of each letter in the string.", "input": "String = \"adda123de3f\"", "output": "public static void printLetterOccurrences(String str) {\n    int[] alphabet = new int[26];\n    for (int i = 0; i < str.length(); i++) {\n        if (str.charAt(i) >= 'a' && str.charAt(i) <= 'z')\n            alphabet[str.charAt(i) - 'a']++;\n    }\n    for (int i = 0; i < 26; i++) {\n        if (alphabet[i] > 0) {\n            System.out.println(\"Number of Occurrences of \" + (char)(i + 'a') \n                    + \" is \" + alphabet[i]); \n        }\n    }\n}\n\n// Output\n// Number of Occurrences of a is 2 \n// Number of Occurrences of d is 2 \n// Number of Occurrences of e is 1 \n// Number of Occurrences of f is 1", "category": "Python"}, {"instruction": "Given a list of numbers, print the numbers and their corresponding squares", "input": "list = [4, 5, 7, 8]", "output": "for num in list:\n    print(f\"{num} --> {num*num}\")", "category": "Python"}, {"instruction": "Write a loop in Python to print all the numbers from 0 to 10", "input": "", "output": "for i in range(0, 11):\n  print(i)", "category": "Python"}, {"instruction": "How to check if a given number is even or odd using Python?", "input": "", "output": "def is_even_or_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"", "category": "Python"}, {"instruction": "Create a JSON object from the following data provided:", "input": "Name: John Smith\nAge: 34\nCountry: US", "output": "{\n  \"Name\": \"John Smith\",\n  \"Age\": 34,\n  \"Country\": \"US\"\n}", "category": "Python"}, {"instruction": "Write a code in ReactJS that renders the title of a given page on the screen.", "input": "", "output": "import React from \"react\";\n\nfunction App() {\n  const title = \"My Page Title\"\n\n  return (\n    <div>\n      <h1>{title}</h1>\n    </div>\n  );\n}\n\nexport default App;", "category": "Python"}, {"instruction": "Reverse a given string.", "input": "\"Hello World!\"", "output": "# Initialize the input string\nstring = \"Hello World!\"\n \n# Get the string length\nstringLength = len(string)\n \n# Create an empty string for storing the reversed string\nreversedString = \"\"\n \n# Iterate over the input string in reverse order\nfor i in range(stringLength -1, -1, -1):\n    reversedString += string[i]\n \n# Print the reversed string\nprint(reversedString) # Prints !dlroW olleH", "category": "Python"}, {"instruction": "Describe the general syntax of an if statement in Java.", "input": "", "output": "In Java, the syntax of an if statement is as follows:\n\nif (condition) {\n    // Code to execute if condition is true\n}", "category": "Python"}, {"instruction": "Fill in the blanks at the end of the Java code to find the sum of an array.", "input": "public int sumArray(int[] arr){\n    int sum = 0;\n    ______________\n    ______________\n    return sum;\n}", "output": "public int sumArray(int[] arr){\n    int sum = 0;\n    for(int i=0; i<arr.length;i++){\n        sum+=arr[i];\n    }\n    return sum;\n}", "category": "Python"}, {"instruction": "Write a function to check if a given binary tree is a valid binary search tree", "input": "", "output": "def isValidBST(root): \n      \n    # Check empty tree  \n    if root is None: \n        return True\n          \n    # Check left subtree recursively  \n    if not isValidBST(root.left): \n        return False\n  \n    # if left is not None then check it has \n    # correct data or not i.e. left node's data \n    # should be less than root's data \n    if (root.left is not None and\n        root.data < root.left.data): \n        return False\n      \n    # Check right subtree recursively  \n    if not isValidBST(root.right): \n        return False\n      \n    # if right is not None then check it has \n    # correct data or not i.e. right node's data \n    # should be greater than root's data \n    if (root.right is not None and\n        root.data > root.right.data): \n        return False\n      \n    # If all conditions satisfied  \n    # then return True  \n    return True", "category": "Python"}, {"instruction": "Change the data type of the following list to a dictionary.", "input": "list = ['John', '26', 'Movie Watch', 'Jane', '31', 'Book Reader', 'Charlotte', '25', 'Music Listener']", "output": "people_dict = {\n    'John': {'age': 26, 'hobby': 'Movie Watch'},\n    'Jane': {'age': 31, 'hobby': 'Book Reader'}, \n    'Charlotte': {'age': 25, 'hobby': 'Music Listener'}\n}", "category": "Python"}, {"instruction": "Write Python code to generate a random password of 8 alphanumeric characters.", "input": "", "output": "import string\nimport random\n\ndef generate_password():\n    chars = string.ascii_letters + string.digits\n    size = 8\n    return ''.join(random.choice(chars) for _ in range(size))\n\nprint(generate_password())\n\n// Output:\n// h5Kp0FHc", "category": "Python"}, {"instruction": "Demonstrate how to use an arraylist in Java.", "input": "", "output": "import java.util.ArrayList;\n\npublic class ArrayListExample {\n    public static void main(String[] args) {\n        // Create an arraylist \n        ArrayList<String> list = new ArrayList<String>(); \n  \n        // Adding elements to the list \n        list.add(\"Adam\"); \n        list.add(\"Bob\"); \n        list.add(\"Charlie\"); \n  \n        // Printing elements in the list \n        System.out.println(list); \n  \n        // Accessing elements using get() method \n        String name = list.get(1); \n        System.out.println(\"Name at index 1 is : \" + name); \n  \n        // Adding elements at a specific index \n        list.add(1, \"David\"); \n        System.out.println(\"Updated list : \"+list); \n  \n        // Removing elements from a list \n        list.remove(\"Adam\"); \n        System.out.println(\"Updated list : \"+list); \n  \n        // Check if an element exists in a list \n        boolean isPresent = list.contains(\"Bob\"); \n        System.out.println(\"Bob is present in the list : \" + isPresent); \n    } \n}\n\n// Output:\n// [Adam, Bob, Charlie] \n// Name at index 1 is : Bob\n// Updated list : [Adam, David, Bob, Charlie]\n// Updated list : [David, Bob, Charlie]\n// Bob is present in the list : true", "category": "Python"}, {"instruction": "Fix the Python code below to make the script work.", "input": "import json\n\ndata = {\n  \"name\": \"John Doe\",\n  \"age\": 20\n}\n\nwith open(\"data.txt\", \"w\") as outfile:\n    json.dump(data, outfile)", "output": "import json\n\ndata = {\n  \"name\": \"John Doe\",\n  \"age\": 20\n}\n\nwith open(\"data.txt\", \"w\") as outfile:\n    json.dump(data, outfile, indent=4)", "category": "Python"}, {"instruction": "Edit the following JavaScript code to reverse the characters of a given string.", "input": "", "output": "function reverseString(string) {\n  let reversedString = \"\";\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n  return reversedString;\n}", "category": "Python"}, {"instruction": "Create an HTML form with three text fields\u2014name, age and gender.", "input": "", "output": "<form>\n <label for=\"name\">Name:</label>\n <input type=\"text\" id=\"name\" name=\"name\">\n <br>\n <label for=\"age\">Age:</label>\n <input type=\"text\" id=\"age\" name=\"age\">\n <br>\n <label for=\"gender\">Gender:</label>\n <input type=\"text\" id=\"gender\" name=\"gender\">\n</form>", "category": "Python"}, {"instruction": "Design a class in Java that can store a list of books and their associated authors.", "input": "", "output": "public class BookCollection {\n  private ArrayList<Book> books;\n  private ArrayList<String> authors;\n\n  public BookCollection() {\n    this.books = new ArrayList<Book>();\n    this.authors = new ArrayList<String>();\n  }\n\n  public void addBook(Book book) {\n    this.books.add(book);\n  }\n  \n  public void addAuthor(String author) {\n    this.authors.add(author);\n  }\n  \n  public ArrayList<Book> getBooks() {\n    return this.books;\n  }\n  \n  public ArrayList<String> getAuthors() {\n    return this.authors;\n  }\n}", "category": "Python"}, {"instruction": "Change the variable names in the following Python code.", "input": "x1 = 10\ny1 = 20", "output": "a = 10\nb = 20", "category": "Python"}, {"instruction": "Write an SQL query to select the names of all employees from the table 'employees' with an age greater than 25.", "input": "", "output": "SELECT name FROM employees WHERE age > 25;", "category": "Python"}, {"instruction": "Create a class in Java that can store a list of students and the courses they are enrolled in.", "input": "", "output": "public class StudentList {\n  private ArrayList<Student> students;\n  private ArrayList<String> courses;\n\n  public StudentList() {\n    this.students = new ArrayList<Student>();\n    this.courses = new ArrayList<String>();\n  }\n\n  public void addStudent(Student student) {\n    this.students.add(student);\n  }\n  \n  public void addCourse(String course) {\n    this.courses.add(course);\n  }\n  \n  public ArrayList<Student> getStudents() {\n    return this.students;\n  }\n  \n  public ArrayList<String> getCourses() {\n    return this.courses;\n  }\n}", "category": "Python"}, {"instruction": "Design a class in Java that can store student information.", "input": "", "output": "public class Student {\n  private String name;\n  private int age;\n  private String course;\n\n  public Student(String name, int age, String course) {\n    this.name = name;\n    this.age = age;\n    this.course = course;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n  public String getName(){\n    return name;\n  }\n  \n  public void setAge(int age){\n    this.age = age;\n  }\n\n  public int getAge(){\n    return age;\n  }\n  \n  public void setCourse(String course){\n    this.course = course;\n  }\n\n  public String getCourse(){\n    return course;\n  }\n}", "category": "Python"}, {"instruction": "What is the primary purpose of object-oriented programming?", "input": "", "output": "The primary purpose of object-oriented programming is to create software systems that are modular, reusable, and maintainable. By modeling real-world objects and their behavior as individual components, object-oriented programming enables developers to create and manage complex systems in an organized and efficient manner. It also allows the code to be easily modified and adapted to fit the changing needs of the user. Additionally, object-oriented programming makes software more secure, as all the code is contained within individual objects which can be handled securely.", "category": "Python"}, {"instruction": "What is the purpose of an abstract data type in software engineering?", "input": "", "output": "The purpose of an abstract data type in software engineering is to allow for the creation of data structures which have a certain behavior, without having to specify exactly how the data is represented in memory. Abstract data types are useful for organizing large amounts of data in complex systems, as they provide a clear interface for users to interact with the data without requiring them to understand the underlying implementation. By separating the data structures from the algorithms that operate on them, abstract data types can also reduce the complexity of software development.", "category": "Python"}, {"instruction": "Format this JSON data as per a specific schema.", "input": "{\n    \"name\": \"John\",\n    \"age\": 20,\n    \"height_cm\": 178,\n    \"weight_kg\": 73\n}", "output": "{\n    \"name\": \"John\",\n    \"age\": 20,\n    \"info\": {\n        \"height_cm\": 178,\n        \"weight_kg\": 73\n    }\n}", "category": "Python"}, {"instruction": "Explain what a Turing machine is.", "input": "", "output": "A Turing machine is a mathematical model of computation that was initially developed by Alan Turing in 1936. It is a device that can read and write symbols on a strip of tape according to a set of instructions. The tape is divided into individual squares, each of which can hold one symbol at a time. The machine can move either right or left one square at a time, and has a set of instructions that determine how its internal state changes based on which symbol it reads. The Turing machine is a powerful tool for understanding computation, as it can be used to simulate any algorithm or computation.", "category": "Python"}, {"instruction": "Edit this JavaScript code to use the correct syntax for the switch statement.", "input": "if (action == 'play') {\n  console.log('Playing...');\n} else if (action == 'stop') {\n  console.log('Stopping...');\n} else {\n  console.log('Undefined action');\n}", "output": "switch (action) {\n  case 'play':\n    console.log('Playing...');\n    break;\n  case 'stop':\n    console.log('Stopping...');\n    break;\n  default:\n    console.log('Undefined action'); \n}", "category": "Python"}, {"instruction": "Identify a potential bug in the following code.", "input": "def add(a, b):\n    c = a + b\n    return c", "output": "A potential bug in this code is that if the parameters a and b are passed in as strings instead of numbers, then the resulting c will be a concatenation of the two strings rather than a mathematical addition. To avoid this error, the parameters should be converted to the appropriate data type before performing the addition.", "category": "Python"}, {"instruction": "Create a Java 8 Stream to filter a list of objects by a given field.", "input": "[\n    {'name': 'John', 'age': 20},\n    {'name': 'Smith', 'age': 30},\n    {'name': 'Bill', 'age': 40}\n]", "output": "List<Object> list = Arrays.asList({\n    {'name': 'John', 'age': 20},\n    {'name': 'Smith', 'age': 30},\n    {'name': 'Bill', 'age': 40}\n});\n\nStream<Object> stream = list.stream();\n\n// Filter records whose age greater than 25\nstream.filter(record -> (int) record.get(\"age\") > 25).forEach(System.out::println);", "category": "Python"}, {"instruction": "Compile a C program to print the number of arguments passed.", "input": "#include <stdio.h>\n\nint main(int argc, char *argv[]) {\n    printf(\"number of arguments passed: %d\\n\", argc);\n    return 0;\n}", "output": "gcc -o program program.c", "category": "Python"}, {"instruction": "Build a linear regression model using Python's scikit learn library.", "input": "import pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame({\n    'x': [2.5, 0.5, 2.2, 1.9, 3.1, 2.3, 2, 1, 1.5, 1.1],\n    'y': [2.4, 0.7, 2.9, 2.2, 3, 2.7, 1.6, 1.1, 1.6, 0.9]\n    })\n\nX = data['x'].values.reshape(-1, 1)\ny = data['y'].values.reshape(-1, 1)", "output": "from sklearn.linear_model import LinearRegression\n\n# Create linear regression model\nmodel = LinearRegression()\n\n# Train the model using the training set\nmodel.fit(X, y)\n\n# Make predictions using the testing set\ny_pred = model.predict(X)", "category": "Python"}, {"instruction": "Create a simple web page with a div element and a child paragraph element.", "input": "", "output": "<!DOCTYPE html>\n<html>\n    <head>\n    <title>Simple Web Page</title>\n    </head>\n\n    <body>\n        <div>\n            <p>The quick brown fox jumps over the lazy dog.</p>\n        </div>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Write a function returning the factorial of a given number in Python.", "input": "", "output": "def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n-1)", "category": "Python"}, {"instruction": "Write a method that prints out all the prime numbers between 1 and 100.", "input": "", "output": "public static void printPrimeNumbers(){ \n    System.out.println(\"Prime numbers between 1 to 100 are : \"); \n    for (int i = 1; i <= 100; i++) { \n        boolean isPrime = true;\n        for (int j = 2; j < i; j++) { \n            if (i % j == 0) { \n                isPrime = false;\n                break; \n            } \n        } \n        if (isPrime) \n            System.out.print(i + \" \"); \n    } \n} \n\n// Output:\n// Prime numbers between 1 to 100 are : \n// 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97", "category": "Python"}, {"instruction": "Edit this CSS code to make the background-color of the body green.", "input": "body {\n    font-family: sans-serif;\n    width: 75%;\n    margin: 0 auto;\n}", "output": "body {\n    font-family: sans-serif;\n    width: 75%;\n    margin: 0 auto;\n    background-color: green;\n}", "category": "Python"}, {"instruction": "Implement a method in JavaScript that checks if a String is a palindrome.", "input": "String = \"racecar\"", "output": "function checkPalindrome(str){\n    let revStr = str.split('').reverse().join(''); \n    return (str == revStr);\n}\n\ncheckPalindrome(\"racecar\"); // returns true", "category": "Python"}, {"instruction": "Write a Java Method that takes an array of integers and returns true if the array is sorted in ascending order.", "input": "array = [7, 18, 24, 55, 98]", "output": "public static boolean isSorted(int[] array) { \n    int n = array.length; \n    int temp = array[0]; \n  \n    for (int i = 1; i < n; i++) { \n        if (temp > array[i]) \n            return false; \n        temp = array[i]; \n    } \n  \n    return true; \n}", "category": "Python"}, {"instruction": "Write a method that prints out a square of size n.", "input": "n=5", "output": "public static void printSquare(int n) { \n    for (int i = 0; i < n; i++) { \n        for (int j = 0; j < n; j++) { \n            System.out.print(\"* \"); \n        }  \n        System.out.println(); \n    } \n} \n   \n// Output: \n/*       \n  * * * * * \n  * * * * * \n  * * * * * \n  * * * * * \n  * * * * * \n*/", "category": "Python"}, {"instruction": "Change this existing Java code to generate the \"Jesus Christ\" string.", "input": "String str = \"Holy\";", "output": "String str = \"Holy\";\nString jesusChrist = str + \" \" + \"Jesus Christ\";\nSystem.out.println(jesusChrist);", "category": "Python"}, {"instruction": "Modify the given HTML code to create a form element with two text boxes and a submit button.", "input": "<h2>My Form</h2>", "output": "<h2>My Form</h2>\n<form>\n    <label for=\"name\">Name:</label><br>\n    <input type=\"text\" name=\"name\"><br>\n    <label for=\"email\">Email:</label><br>\n    <input type=\"text\" name=\"email\"><br>\n    <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Write JavaScript to swap two elements in an array.", "input": "array = [10, 20, 30, 40]", "output": "function swap(array, index1, index2) {\n    let temp = array[index1];\n    array[index1] = array[index2];\n    array[index2] = temp; \n} \n\nlet array = [10, 20, 30, 40];\nswap(array, 0, 2);\nconsole.log(array);\n\n// Output: [30, 20, 10, 40]", "category": "Python"}, {"instruction": "Classify the given article as spam or ham.", "input": "Hello everyone, this is a spam message.", "output": "Spam", "category": "Python"}, {"instruction": "Clean the given data in Python by replacing NaN and None with 0.", "input": "import pandas as pd\n\ndata = [[1, 'John', None], [2, 'Jane', 18], [3, 'Rudy', NaN]]\ndf = pd.DataFrame(data, columns = ['id', 'name', 'age'])", "output": "import pandas as pd\n\ndata = [[1, 'John', None], [2, 'Jane', 18], [3, 'Rudy', NaN]]\ndf = pd.DataFrame(data, columns = ['id', 'name', 'age'])\n\ndf.fillna(0, inplace = True)", "category": "Python"}, {"instruction": "Apply the filter method in JavaScript to return only those elements of a given array that are not null.", "input": "const array = [1, null, 2, undefined, 3, NaN];", "output": "const filteredArray = array.filter(el => el != null);", "category": "Python"}, {"instruction": "Create an MySQL table with four columns: \"id\", \"name\", \"age\", and \"city\".", "input": "", "output": "CREATE TABLE table_name (\n    id int(11) NOT NULL AUTO_INCREMENT,\n    name varchar(50) NOT NULL,\n    age int(11) NOT NULL,\n    city varchar(50) NOT NULL,\n    PRIMARY KEY (id)\n);", "category": "Python"}, {"instruction": "Write a script for finding the largest number in the given array.", "input": "const array = [4, 8, 2, 6, 9, 3]", "output": "let largestNum = array[0];\n\nfor (let num of array) {\n    if (num > largestNum) {\n        largestNum = num;\n    }\n}\n\nconsole.log(largestNum);", "category": "Python"}, {"instruction": "Create a function in JavaScript to check if an array is empty.", "input": "", "output": "function isArrayEmpty(arr) {\n    return arr.length === 0;\n}", "category": "Python"}, {"instruction": "Create a script for sorting the given array in decreasing order.", "input": "const array = [5, 10, 8, 6, 4, 9, 2]", "output": "const sortedArray = array.sort((a, b) => b - a);", "category": "Python"}, {"instruction": "Create an array from elements 0 to 10 in JavaScript.", "input": "", "output": "const array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];", "category": "Python"}, {"instruction": "Deploy a basic HTML page to a server.", "input": "", "output": "Clone the repository containing the HTML page to the server.\nConfigure the web server so that it will serve the HTML page when requested.", "category": "Python"}, {"instruction": "Implement a linked list in Python.", "input": "", "output": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert_at_head(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def append(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            return\n        curr_node = self.head\n        while curr_node.next is not None: \n            curr_node = curr_node.next\n        curr_node.next = new_node\n\n    def delete_by_value(self, data):\n        if self.head is None:\n            return\n        curr_node = self.head\n        if curr_node.data == data:\n            self.head = curr_node.next\n            return\n        prev_node = curr_node\n        while curr_node is not None:\n            if curr_node.data == data:\n                break\n            prev_node = curr_node\n            curr_node = curr_node.next\n        if curr_node is None:\n            return\n        prev_node.next = curr_node.next", "category": "Python"}, {"instruction": "Please generate a system variable in C language.", "input": "", "output": "#include <stdlib.h>\nint system_variable = 5;", "category": "Python"}, {"instruction": "Return a subset of a given array of size K", "input": "arr = [3, 6, 2, 5, 7, 4], K = 3", "output": "def subset(arr, K): \n    n = len(arr) \n    subset_arr = [0]; \n      \n    for i in range (0, n): \n        x = len(subset_arr) \n        for j in range(0, x): \n              \n            # Generate subset by adding \n            # elements of A\n            temp = [] \n            temp = subset_arr[j] \n            temp.append(arr[i]) \n              \n            # Append in the list \n            subset_arr.append(temp) \n              \n    # Return K size subset \n    length = len(subset_arr) \n    if (length >= K): \n        return subset_arr[length - K:] \n    else: \n        return -1\n    \nprint(subset(arr, K))", "category": "Python"}, {"instruction": "Describe the steps for implementing a convolutional neural network.", "input": "", "output": "The steps for implementing a convolutional neural network involve selecting the network architecture, preparing the dataset, defining the features, creating the layers and connections, training the network using an optimizer, and evaluating the model\u2019s performance.", "category": "Python"}, {"instruction": "Create a function in Python for reversing a list.", "input": "my_list = [1,2,3,4,5]", "output": "def reverse_list (my_list):\n  return my_list[::-1]\n  \nreverse_list(my_list)", "category": "Python"}, {"instruction": "Identify the advantages of using deep learning models.", "input": "", "output": "The advantages of using deep learning models include: the ability to handle large and complex datasets; the ability to achieve better generalization performance; greater accuracy than traditional machine learning algorithms; the ability to capture non-linear relationships; and improved efficiency.", "category": "Python"}, {"instruction": "Write a function in Python for printing a given 2D array.", "input": "arr = [[1,2,3], [4,5,6], [7,8,9]]", "output": "def print_2D_array(arr):\n  for row in arr:\n    for element in row:\n      print(element,end=\" \")\n    print()\n\nprint_2D_array(arr)", "category": "Python"}, {"instruction": "You are given a list of numbers. Write a program to check if the given list is a palindrome or not.", "input": "[1, 2, 3, 2, 1]", "output": "def is_palindrome(arr):\n  rev_arr = arr[::-1]\n  if arr == rev_arr:\n    return True\n  else:\n    return False\n\nprint(is_palindrome([1, 2, 3, 2, 1]))", "category": "Python"}, {"instruction": "Rewrite the following for loop code using a list comprehension.", "input": "arr = [1,2,3,4,5]\nfor i in arr:\n  arr[i] = arr[i] + 1", "output": "arr = [x+1 for x in [1,2,3,4,5] ]\n\nprint(arr)", "category": "Python"}, {"instruction": "Manipulate a given list to get a single string.", "input": "[\"Hello\", \"World\", \"!\"]", "output": "def create_string(arr):\n  string = ''\n  for elem in arr:\n    string += elem\n  return string\n\nprint(create_string(['Hello', 'World', '!']))", "category": "Python"}, {"instruction": "Compute the maximum product of two integers in an array.", "input": "[-4, 2, -3, 6]", "output": "def max_product(arr):\n    max1 = max(arr)\n    arr.remove(max1)\n    max2 = max(arr)\n    return max1 * max2\n\nprint(max_product([-4, 2, -3, 6]))", "category": "Python"}, {"instruction": "You are given a string of symbols. Write a program to remove all the symbols and get a valid text string.", "input": "\"This , is an example string %\"", "output": "def remove_symbols(string):\n  text_string = ''\n  for c in string:\n    if c.isalpha() or c.isdigit():\n      text_string += c\n  \n  return text_string\n\nprint(remove_symbols(\"This , is an example string %\"))", "category": "Python"}, {"instruction": "Write a function to multiply two numbers in Java.", "input": "5, 8", "output": "public static int multiply(int x, int y){\n  return x * y;\n}\n\nSystem.out.println(multiply(5, 8));", "category": "Python"}, {"instruction": "You are given two strings. Write a function that checks whether the two strings are an anagram or not.", "input": "\"listen\", \"silent\"", "output": "def is_anagram(str1, str2):\n  str1 = str1.lower()\n  str2 = str2.lower()\n  if sorted(str1) == sorted(str2):\n    return True\n  else:\n    return False\n\nprint(is_anagram('listen', 'silent'))", "category": "Python"}, {"instruction": "Write a SQL query to retrieve all the rows from a table called \"customers\".", "input": "", "output": "SELECT * FROM customers;", "category": "Python"}, {"instruction": "You are given an array of integers. Write a program to find the maximum number in this array.", "input": "[10, 5, 11, 23, 9]", "output": "def max_int(arr):\n  max_val = arr[0]\n  for i in range(1, len(arr)):\n    if arr[i] > max_val:\n      max_val = arr[i]\n  return max_val\n\nprint(max_int([10, 5, 11, 23, 9]))", "category": "Python"}, {"instruction": "Generate a random 2-digit number using JavaScript.", "input": "", "output": "Math.floor(Math.random() * 100);", "category": "Python"}, {"instruction": "Given a person's name and the current time, print the difference in time from the person's birthday.", "input": "name = \"John\"\ntime = datetime.datetime(2021, 3, 25, 10, 0, 0)", "output": "birthday = datetime.datetime.strptime(name + \" birthdate\", \"%Y-%m-%d\")\ntime_diff = time - birthday\nprint(\"The difference in time from \" + name + \"'s birthday is \" + str(time_diff))", "category": "Python"}, {"instruction": "Develop an algorithm for sorting a given list in ascending order.", "input": "my_list = [5,1,4,2,8]", "output": "def sort_list(my_list): \n  for i in range(len(my_list)):\n    for j in range(i+1, len(my_list)):\n      if my_list[i] > my_list[j]: \n        my_list[i], my_list[j] = my_list[j], my_list[i]\n  return my_list\n\nsort_list(my_list)", "category": "Python"}, {"instruction": "Generate an array of 20 random numbers between 0 and 10 (inclusive).", "input": "", "output": "import random \n  \narr = [] \nfor i in range(20): \n    arr.append(random.randint(0, 10))\n    \narr", "category": "Python"}, {"instruction": "Write a code snippet for generating a unique identifier for a particular object.", "input": "", "output": "import uuid\n\ndef generate_id(object): \n  return uuid.uuid4()", "category": "Python"}, {"instruction": "Describe the process of web scraping.", "input": "", "output": "Web scraping is the process of extracting data from websites using automated software. It involves sending a request to the web server, processing the HTML, locating the relevant data, and saving it. The process usually involves using web crawlers and parsing data using regular expressions or custom logic.", "category": "Python"}, {"instruction": "Using the existing code as guidance, add a 2nd player and 2nd input field to the game.", "input": "playername1=input(\"What is your name? \")\nplayer_score1=0\n\nif turn==1:\n\tplayer_score1+=1\n\nprint(\"It is now \" + playername1 + \" turn. You have \" + str(player_score1) + \" points\")", "output": "playername1=input(\"What is your name? \")\nplayername2=input(\"What is your opponent's name? \")\nplayer_score1=0\nplayer_score2=0\n\nif turn==1:\n\tplayer_score1+=1\n\nif turn==2:\n\tplayer_score2+=1\n\nprint(\"It is now \" + playername1 + \"'s turn. You have \" + str(player_score1) + \" points\")\nprint(\"It is now \" + playername2 + \"'s turn. You have \" + str(player_score2) + \" points\")", "category": "Python"}, {"instruction": "Create a list containing a given number of random numbers.", "input": "", "output": "import random\n\ndef random_list(length):\n\trand_list = []\n\tfor i in range(length):\n\t\trand_list.append(random.randint(0,100))\n\treturn rand_list", "category": "Python"}, {"instruction": "Write a sorting algorithm that sorts an array using a bubble sort.", "input": "nums=[3,4,1,2,9,6]", "output": "def bubble_sort(nums):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums", "category": "Python"}, {"instruction": "Write a function that prints a message saying 'Hello world!'", "input": "", "output": "def say_hello():\n\tprint(\"Hello world!\")", "category": "Python"}, {"instruction": "Add a new element to the end of a list.", "input": "mylist=[2,5,7]", "output": "mylist.append(9)", "category": "Python"}, {"instruction": "Write a function in Python that takes two parameters and returns a list containing those two numbers", "input": "", "output": "def make_list(a, b):\n  return [a, b]", "category": "Python"}, {"instruction": "Given a Python list, write the code to flatten it", "input": "l1=[1,2,3,[4,[5,6]]]", "output": "def flatten(nums):\n    flattened_list = []\n    for elem in nums:\n        if type(elem) == list:\n            flattened_list.extend(flatten(elem))\n        else:\n            flattened_list.append(elem)\n    return flattened_list\n\nflatten(l1)", "category": "Python"}, {"instruction": "When should the `break` keyword be used in a loop?", "input": "", "output": "The break keyword should be used in a loop when the loop needs to be terminated before it has finished executing its normal iterations. The break statement will cause the loop to exit immediately, bypassing any remaining code in the loop.", "category": "Python"}, {"instruction": "Create a parameterized SQL query to get all records from a table where the given field has a value greater than the given input.", "input": "Fields: age\nInput: 20", "output": "SELECT * FROM table_name WHERE age > 20;", "category": "Python"}, {"instruction": "Build a flask server to handle a GET request to the route '/test'.", "input": "", "output": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/test', methods=['GET'])\ndef test():\n    return \"This is a test\"\n\nif __name__ == '__main__':\n    app.run()", "category": "Python"}, {"instruction": "Create a CSS animation to apply an interesting effect to a given element.", "input": "", "output": "element {\n  -webkit-animation: myAnimation 2s ease-in forwards;    \n  animation: myAnimation 2s ease-in forwards;\n}\n\n@-webkit-keyframes myAnimation {\n  from {\n    transform: scale(1);\n  }\n  to {\n    transform: scale(1.5);\n  }\n}\n@keyframes myAnimation {\n  from {\n    transform: scale(1);\n  }\n  to {\n    transform: scale(1.5);\n  }\n}", "category": "Python"}, {"instruction": "Create a React component that renders the provided state data in a table", "input": "state = {\n  data: [\n    { name: 'John', age: 20 },\n    { name: 'Alice', age: 18 }\n  ]\n}", "output": "import React from 'react';\n\nclass Table extends React.Component {\n  render() {\n    const state = this.props.state;\n    const dataRows = state.data.map(rowData => (\n      <tr>\n        <td>{rowData.name}</td>\n        <td>{rowData.age}</td>\n      </tr>\n    ));\n\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Age</th>\n          </tr>\n        </thead>\n        <tbody>{dataRows}</tbody>\n      </table>\n    );\n  }\n}\nexport default Table;", "category": "Python"}, {"instruction": "Generate a string of 5 random characters from the characters A through Z.", "input": "", "output": "import random\n\ndef random_string():\n    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    random_string = ''.join(random.choice(chars) for i in range(5))\n    return random_string\n\nprint(random_string())", "category": "Python"}, {"instruction": "Write an API endpoint to get the average annual temperature of a given city.", "input": "", "output": "@app.route(\"/get_average_annual_temp/<city>\", methods=['GET'])\ndef get_average_annual_temp(city):\n    # Get the average annual temperature of the given city\n    temp = get_average_annual_temperature(city)\n    # Return the average temperature in json format\n    return jsonify({'temp': temp})", "category": "Python"}, {"instruction": "Construct an if-else statement in Java for printing the square root of a given number.", "input": "", "output": "if (x >= 0) {\n  System.out.println(Math.sqrt(x));\n} else {\nSystem.out.println(\"The number is negative\");\n}", "category": "Python"}, {"instruction": "Write a function in Python for calculating the area of a circle.", "input": "", "output": "def area_circle(r):\n  return 3.14 * r**2", "category": "Python"}, {"instruction": "Train a sentiment classification model on the given data.", "input": "Training Data:\n\nI love this new phone!  Positive\nThis phone is terrible!  Negative", "output": "import nltk \nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\n\n# Preprocess data\ntraining_data = [('I love this new phone!', 'positive'), ('This phone is terrible!', 'negative')]\nall_words = []\ndocuments = []\nfor (sent, category) in training_data:\n    words = word_tokenize(sent)\n    words = [word.lower() for word in words if word not in stopwords.words()]\n    documents.append((words, category))\n    all_words.extend(words)\n\n# Create feature set\ndistinct_words = set(all_words)\nfeature_set = [({word: (word in tokenized_sentence) for word in distinct_words}, category) for (tokenized_sentence, category) in documents]\n\n# Train model\nclassifier = nltk.NaiveBayesClassifier.train(feature_set)", "category": "Python"}, {"instruction": "Write pseudocode to find the average of two numbers.", "input": "", "output": "set total to 0\nset count to 0\n\nwhile numbers left to process\n    add next number to total\n    increment count\nend while\n\ncalculate average by dividing total by count\n\nprint average", "category": "Python"}, {"instruction": "Using the given SQL command, print out all rows from the \"users\" table.", "input": "SELECT * FROM users", "output": "SELECT * FROM users; \n \nThis will return all rows from the \"users\" table.", "category": "Python"}, {"instruction": "Write a JUnit test case to test if the sum of two numbers is correct.", "input": "", "output": "@Test\npublic void testSum(){\n    int x = 1;\n    int y = 2;\n    int expectedSum = 3;\n    int actualSum = x+y;\n \n    assertEquals(expectedSum, actualSum);\n}", "category": "Python"}, {"instruction": "Write a Python function to compute the factorial of an integer.", "input": "", "output": "def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)", "category": "Python"}, {"instruction": "You should write a MySQL command to count how many records in the table \"users\".", "input": "", "output": "SELECT COUNT(*) FROM users;", "category": "Python"}, {"instruction": "Create a JavaScript function that converts all the characters in a string to uppercase.", "input": "", "output": "function toUpperCase(string) {\n return string.toUpperCase();\n}", "category": "Python"}, {"instruction": "Write a function that takes a string as an argument, reverses the characters, and returns the reversed string.", "input": "", "output": "def reverse_string(string):\n    reversed_string = \"\"\n    for i in range(len(string)-1, -1, -1):\n        reversed_string += string[i]\n    return reversed_string", "category": "Python"}, {"instruction": "Construct a for-loop to iterate over a list.", "input": "list = [1, 2, 3, 4]", "output": "for i in list:\n    print(i)", "category": "Python"}, {"instruction": "Create a switch statement for the following string:", "input": "input = \u201ccat\u201d", "output": "switch(input) {\n    case 'cat':\n        console.log('meow'); \n        break;\n    default:\n        console.log('unknown input') \n        break;\n}", "category": "Python"}, {"instruction": "Create a tree data structure for the following information:", "input": "a) Naruto\nb) Sasuke\nc) Boruto\nd) Sarada", "output": "Naruto\n    /    \\\n  Sasuke  Boruto\n            \\\n             Sarada", "category": "Python"}, {"instruction": "What is a JavaScript Promise?", "input": "", "output": "A JavaScript Promise is an object that represents the eventual completion of an asynchronous operation. A Promise object can be either resolved (successful) or rejected (failed). It provides a unified API for handling asynchronous operations, no matter when the operations are completed.", "category": "Python"}, {"instruction": "Write a SQL command to count the number of rows from a table \u2018Orders\u2019.", "input": "", "output": "SELECT COUNT(*) FROM Orders;", "category": "Python"}, {"instruction": "How can you count the frequency of each word in a given string?", "input": "This is a string", "output": "str = \"This is a string\" \nwords = str.split()\ncount = {} \n  \nfor word in words: \n    if word in count: \n        count[word] += 1\n    else: \n        count[word] = 1\n        \nprint(count)\n\n# Output: {'This': 1, 'is': 1, 'a': 1, 'string': 1}", "category": "Python"}, {"instruction": "Create a basic REST API in python that takes a string as input and returns the reversed string", "input": "", "output": "from fastapi import FastAPI\n@app.get(\"/reverse-string/{string}\")\n\ndef reverse_string(string: str):\n    return string[::-1]", "category": "Python"}, {"instruction": "Build a model using scikit-learn that classifies the given text data into \u2018Positive\u2019 or \u2018Negative\u2019.", "input": "The customer service was great, and I will definitely recommend this product to others.", "output": "from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LogisticRegression\n\n# Create arrays for the features and the label\nX = ['The customer service was great, and I will definitely recommend this product to others.'] \ny = ['Positive']\n\n# Create a CountVectorizer for parsing/counting words\ncv = CountVectorizer()\n \n# Parse the data with the vectorizer\nX = cv.fit_transform(X)\n \n# Create train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n \n# Create the model, train it, then test it\nmodel = LogisticRegression() \nmodel.fit(X_train, y_train) \nmodel.score(X_test, y_test)", "category": "Python"}, {"instruction": "Please write a program to create a JavaScript function that is used to validate an email address.", "input": "", "output": "// Function to validate email address \nfunction validateEmail(email) {\n  var pattern = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; \n  \n  if (pattern.test(email)) {\n    return true;\n  } else {\n    return false;\n  }\n}", "category": "Python"}, {"instruction": "Write an algorithm to remove vowels from a string.", "input": "", "output": "def remove_vowels(string): \n      \n    # vowels list\n    vowels = ['a', 'e', 'i', 'o', 'u']  \n    stringWithoutVowels = \"\" \n      \n    for x in string: \n        if x not in vowels: \n            stringWithoutVowels += x \n              \n    return stringWithoutVowels", "category": "Python"}, {"instruction": "Create a C++ function that finds the frequency of each character in a string and stores in a hashtable.", "input": "", "output": "#include <iostream>\n#include <unordered_map>\n\nstd::unordered_map<char, int> character_frequency(std::string str)\n{ \n    std::unordered_map<char, int> frequency; \n    for (char c : str) \n        frequency[c]++; \n    return frequency; \n}", "category": "Python"}, {"instruction": "You should create a Java program to implement a binary search.", "input": "", "output": "public class BinarySearch \n{ \n    // Returns index of x if it is present in arr[l.. \n    // r], else return -1 \n    public int binarySearch(int arr[], int l, int r, int x) \n    { \n        if (r >= l) { \n            int mid = l + (r - l) / 2; \n  \n            // If the element is present at the \n            // middle itself \n            if (arr[mid] == x) \n                return mid; \n  \n            // If element is smaller than mid, then \n            // it can only be present in left subarray \n            if (arr[mid] > x) \n                return binarySearch(arr, l, mid - 1, x); \n  \n            // Else the element can only be present \n            // in right subarray \n            return binarySearch(arr, mid + 1, r, x); \n        } \n  \n        // We reach here when element is not present \n        // in array \n        return -1; \n    } \n  \n}", "category": "Python"}, {"instruction": "Create a function that outputs the minimum and maximum ofa list of numbers.", "input": "list = [1, 3, 7, -2, 4]", "output": "def minmax(list)\n    min = list[0]\n    max = list[0]\n    for num in list[1:]:\n        if num < min:\n            min = num\n        if num > max:\n            max = num\n\n    return min, max", "category": "Python"}, {"instruction": "Generate valid HTML tags for a two-column table.", "input": "", "output": "<table>\n    <tr>\n        <th> Column 1 </th>\n        <th> Column 2 </th>\n    </tr>\n    <tr>\n        <td> </td>\n        <td> </td>\n    </tr>\n</table>", "category": "Python"}, {"instruction": "What is the purpose of a try-catch block in Python?", "input": "", "output": "The try-catch block is used in Python to handle exceptions. It is a construct used to catch and handle any unexpected errors that may occur in a program, allowing the program to continue running instead of crashing. The statements under the try block are the ones that may raise the exception, and the except block contains code that will be executed if an error does occur. The finally block is generally used to perform clean-up operations, regardless of whether an error occurs or not.", "category": "Python"}, {"instruction": "Create a dictionary to store the key-value pairs and print out the values of the dictionary keys.", "input": "myDict = {\n    \"cat\" : \"meow\",\n    \"dog\" : \"bark\",\n    \"horse\" : \"neigh\"\n}", "output": "for key, value in myDict.items(): \n    print(value) \n\n# Output\nmeow\nbark\nneigh", "category": "Python"}, {"instruction": "What is the difference between a for loop and a while loop in Java?", "input": "", "output": "The main difference between for and while loop is that for loop is used when we already know the number of times the loop should iterate, while a while loop is used when the number of iterations is not known in advance. Another difference is that for loop is more convenient for looping through arrays/collections of objects, while a while loop is used for performing more complex computations.", "category": "Python"}, {"instruction": "Identify the type of the following variable:\n$$\na = 5\n$$", "input": "", "output": "The type of 'a' is an integer.", "category": "Python"}, {"instruction": "Print out the 5th number of the Fibonacci sequence.", "input": "", "output": "5", "category": "Python"}, {"instruction": "Generate a code snippet to convert a given string to uppercase", "input": "", "output": "function toUpperCase(str) {\n  return str.toUpperCase();\n}", "category": "Python"}, {"instruction": "Edit the given code to make it more readable", "input": "while(i <= num) {\n  output += i;\n  i++\n}", "output": "let i = 0;\nwhile(i <= num) {\n  output += i;\n  i++;\n}", "category": "Python"}, {"instruction": "What is the meaning of static in Java?", "input": "", "output": "In Java, the static keyword is used to indicate that an entity is associated with a class rather than an instance of a class. It can be used to denote class variables, class methods and other class elements, and is also used in various access modifiers. Static members are associated with the class itself, rather than any particular instance of the class.", "category": "Python"}, {"instruction": "How do you display the contents of an array in reverse order?", "input": "", "output": "The contents of an array can be displayed in reverse order by using the reverse() method or by using a for loop. \n\nFor example, to display the content of the array [1, 2, 3, 4], the following code can be used:\n\n// Using reverse()\nlet arr = [1, 2, 3, 4];\narr.reverse();\nconsole.log(arr); // Output: [4, 3, 2, 1]\n\n// Using a for loop\nlet arr = [1, 2, 3, 4];\nfor (let i = arr.length - 1; i >= 0; i--) {\n    console.log(arr[i]); // Output: 4 3 2 1\n}", "category": "Python"}, {"instruction": "Generate a code snippet to find the highest common factor of two given numbers", "input": "", "output": "function highestCommonFactor(m, n) {\n  if (m === 0 || n === 0) {\n      return 0;\n  }\n\n  let a = Math.max(m, n);\n  let b = Math.min(m, n);\n\n  while (b !== 0) {\n      let c = b;\n      b = a % b;\n      a = c;\n  }\n\n  return a;\n}", "category": "Python"}, {"instruction": "Rewrite the given code block to make the loops more efficient", "input": "let x = 0;\nlet y = 0;\nfor (let i = 0; i < 10; i++) {\n y = y + i;\n for (let j = 0; j < 10; j++) {\n  x = x + j;\n }\n}", "output": "let x = 0;\nlet y = 0;\nfor (let i = 0; i < 10; i++) {\n y += i;\n x += (10 * i);\n}", "category": "Python"}, {"instruction": "Identify the bug in the given code snippet.", "input": "function double_sum(nums) {\n for (let i = 0; i <= nums.length; i++) {\n  sum += nums[i] * 2;\n }\n}", "output": "The bug in the code is that it is looping one time too many. The correct version should use a less than or equal operator ('<=') instead of a less than operator ('<') in the for loop.", "category": "Python"}, {"instruction": "Generate a code snippet to sort the given array in ascending order.", "input": "let arr = [3, 5, 7, 2, 1]", "output": "let arr = [3, 5, 7, 2, 1]\narr.sort(function(a,b){return a-b});\nconsole.log(arr);", "category": "Python"}, {"instruction": "Create a MySQL table and insert data into it.", "input": "", "output": "CREATE TABLE persons (\n    firstname TEXT NOT NULL,\n    lastname TEXT NOT NULL\n);\n\nINSERT INTO persons (firstname, lastname)\nVALUES ('John', 'Doe'), ('Jane', 'Doe');", "category": "Python"}, {"instruction": "You should edit this code and make it into a working code that prints \"Hello, world!\"", "input": "cout << \"Hello, World!\"", "output": "#include <iostream>\n\nint main() {\n    std::cout << \"Hello, World!\" << std::endl;\n    return 0;\n}", "category": "Python"}, {"instruction": "Construct a program to parse a JSON array.", "input": "[{\"name\":\"John\", \"age\":30},{\"name\":\"Alice\", \"age\":25}]", "output": "import json\n\ndata = [{\"name\":\"John\", \"age\":30},{\"name\":\"Alice\", \"age\":25}]\n\nfor entry in data:\n    name = entry['name']\n    age = entry['age']\n    print(f'The name is {name} and age is {age}')", "category": "Python"}, {"instruction": "Output the top 3 strings from the given array that have the greatest length", "input": "let arr = [\"Pineapple\", \"Apple\",\"Banana\", \"Strawberry\", \"Grape\"]", "output": "let top3 = arr.sort((a, b) => b.length - a.length).slice(0, 3);\nconsole.log(top3); // Output: [\"Pineapple\", \"Strawberry\", \"Banana\"]", "category": "Python"}, {"instruction": "Using the existing code as a guide, construct a function to validate user input.", "input": "username=input(\"Enter your username: \")\npassword=input(\"Enter your password: \")", "output": "def validate_input(username, password):\n\tif len(username) < 5 or len(username) > 80:\n\t\treturn False\n\tif len(password) < 8 or len(password) > 16:\n\t\treturn False\n\treturn True", "category": "Python"}, {"instruction": "Compare the performance of Grover's algorithm and classical search algorithms.", "input": "", "output": "Grover's algorithm is a quantum algorithm that offers exponential speedup over classical search algorithms. As an example of how it works, assume we want to find an element in a database of size N. For a classical algorithm, the best search time is O(log N). In contrast, Grover's algorithm provides a search time of only O((log N)^2). Thus, using Grover's algorithm, the search time is reduced by a factor of log N for a given problem size. Furthermore, Grover's algorithm does not require any additional memory to store data, as it operates directly on the states of the quantum system. This can also provide significant advantages compared to classical search algorithms.", "category": "Python"}, {"instruction": "Edit the provided CSS rule to make all elements with the class \"myClass\" have a bold font-weight.", "input": ".myClass { \n  font-size: 16px;\n}", "output": ".myClass { \n  font-size: 16px;\n  font-weight: bold;\n}", "category": "Python"}, {"instruction": "Reorganize the provided data into an HTML table.", "input": "students = [\n  {name: 'John', age: 23},\n  {name: 'Sarah', age: 26 },\n]", "output": "<table>\n <tr>\n  <th>Name</th>\n  <th>Age</th>\n </tr>\n <tr>\n  <td>John</td>\n  <td>23</td>\n </tr>\n <tr>\n  <td>Sarah</td>\n  <td>26</td>\n </tr>\n</table>", "category": "Python"}, {"instruction": "Filter the provided array by returning only even numbers.", "input": "numbers = [1, 2, 3, 4, 5]", "output": "numbers = [2, 4]", "category": "Python"}, {"instruction": "Create a CSS rule to set the body's font size to 12px.", "input": "", "output": "body {\n font-size: 12px;\n}", "category": "Python"}, {"instruction": "Write an SQL query to get the sum of the values in a column.", "input": "tableName: myTable\ncolumnName: myColumn", "output": "SELECT SUM(myColumn) FROM myTable", "category": "Python"}, {"instruction": "Append a string \"Welcome to the party\" at the end of the provided array.", "input": "words = [\"Hello\", \"there\"]", "output": "words = [\"Hello\", \"there\", \"Welcome to the party\"]", "category": "Python"}, {"instruction": "Given a list of numbers, extend the list such that it contains the square of the elements present in the list.", "input": "numbers = [1,2,3]", "output": "numbers = [1,2,3,1,4,9]", "category": "Python"}, {"instruction": "Generate a set of five English words starting with the letter \"P\".", "input": "", "output": "panther, plane, purple, parking, planet", "category": "Python"}, {"instruction": "Create a Python program to generate the Fibonacci series between 0 and 10.", "input": "", "output": "def FibonacciSequence():\n  a, b = 0, 1\n  for _ in range(10):\n    yield a\n    a, b = b, a + b\n\nfor num in FibonacciSequence():\n  print(num)", "category": "Python"}, {"instruction": "Calculate the circumference of a circle.", "input": "Radius: 3", "output": "18.85", "category": "Python"}, {"instruction": "Design a webpage with a given template.", "input": "Template: Pink and Purple with three-column layout", "output": "<html>\n<head>\n  <title>Pink and Purple Layout</title>\n  <style>\n    body {\n      background-color: pink;\n    }\n    #container {\n      display: flex;\n    }\n    #container > div {\n      flex: 1;\n      background-color: purple;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"container\">\n    <div></div>\n    <div></div>\n    <div></div>\n  </div>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create an array of the numbers from 1 to 10.", "input": "", "output": "let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];", "category": "Python"}, {"instruction": "Obtain the type of the data in the given code.", "input": "let number = 10;", "output": "number is of type number.", "category": "Python"}, {"instruction": "Write a query to retrieve all the customer names from an orders table.", "input": "Table Name: Orders", "output": "SELECT CustomerName FROM Orders;", "category": "Python"}, {"instruction": "Create a function to collect all the alphabets from a given string.", "input": "The string is \"My name is John!\"", "output": "//Function to collect all the alphabets\nfunction getAlphabets(str) {\n  const result = [];\n  for(let i=0; i < str.length; i++) {\n    if(str[i].match(/[a-z]/i)) {\n      result.push(str[i]);\n    }\n  }\n  return result;\n}\n\n//Call function and pass the string as parameter\nlet alphabets = getAlphabets(\"My name is John!\"); \nconsole.log(alphabets); // Output: [\"M\", \"y\", \"n\", \"a\", \"m\", \"e\", \"i\", \"s\", \"J\", \"o\", \"h\"]", "category": "Python"}, {"instruction": "Compare two strings to determine if they are equal or not.", "input": "String1: \"Hello World\"\nString2: \"Hello World\"", "output": "true", "category": "Python"}, {"instruction": "Implement a stack data structure in Java.", "input": "", "output": "// Stack class \nclass Stack \n{ \n    static final int MAX = 1000; \n    int top; \n    int a[] = new int[MAX]; // Maximum size of Stack \n  \n    boolean isEmpty() \n    { \n        return (top < 0); \n    } \n    Stack() \n    { \n        top = -1; \n    } \n  \n    boolean push(int x) \n    { \n        if (top >= (MAX-1)) \n        { \n            System.out.println(\"Stack Overflow\"); \n            return false; \n        } \n        else\n        { \n            a[++top] = x; \n            System.out.println(x + \" pushed into stack\"); \n            return true; \n        } \n    } \n  \n    int pop() \n    { \n        if (top < 0) \n        { \n            System.out.println(\"Stack Underflow\"); \n            return 0; \n        } \n        else\n        { \n            int x = a[top--]; \n            return x; \n        } \n    } \n\n    int peek() \n    { \n        if (top < 0) \n        { \n            System.out.println(\"Stack Underflow\"); \n            return 0; \n        } \n        else\n        { \n            int x = a[top]; \n            return x; \n        } \n    } \t\n}", "category": "Python"}, {"instruction": "Write a JavaScript program to replace all the vowels in a given string with '*'.", "input": "", "output": "function replaceVowels(str) {\n  return str.replace(/[aeiou]/gi, '*');\n}", "category": "Python"}, {"instruction": "Create a Java class that prints the Fibonacci sequence between 0 and 10.", "input": "", "output": "public class Fibonacci {\n\n  public static void main(String[] args) {\n    printFibonacci();\n  }\n\n  public static void printFibonacci() {\n    int n1 = 0;\n    int n2 = 1;\n    int n3;\n\n    System.out.print(n1 + \" \" + n2);\n\n    for (int i = 0; i < 8; i++) {\n      n3 = n1 + n2;\n      System.out.print(\" \" + n3);\n      n1 = n2;\n      n2 = n3;\n    }\n  }\n\n}", "category": "Python"}, {"instruction": "Make sure the following code runs without errors.", "input": "def calculate_sum(numbers):\n      total = 0\n      for number in numbers\n          total += number\n      return total", "output": "def calculate_sum(numbers):\n      total = 0\n      for number in numbers:\n          total += number\n      return total", "category": "Python"}, {"instruction": "Describe how to use the following code to generate random numbers.", "input": "import random\n\ndef random_with_N_digits(n):\n    range_start = 10**(n-1)\n    range_end = (10**n)-1\n    return random.randint(range_start, range_end)", "output": "// To generate random numbers using the code provided:\n// 1. Specify number of digits to generate\n// 2. Use the random_with_N_digits function to generate the random number\n// 3. Pass the desired number of digits as the argument in the function\n// 4. The function will return a random number between 10^(n-1) and 10^n-1\n// 5. Use the returned random number for the desired purpose", "category": "Python"}, {"instruction": "Suggest a Python code to parse an XML document.", "input": "", "output": "# Parse an XML document using Python\nimport xml.etree.ElementTree as ET\n\n# load the XML document\ntree = ET.parse('document.xml')\n# get the root element\nroot = tree.getroot()\n# loop through all the elements\nfor element in root.findall('element'):\n    # print the attributes of all elements\n    print(element.attrib)", "category": "Python"}, {"instruction": "Explain how to implement a heap sort algorithm in Java.", "input": "", "output": "// To implement a heap sort algorithm in Java:\n// 1. Build a min heap from the input data.\n// 2. At the top of the heap, obtain the minimum element.\n// 3. Exchange the minimum element with the last element of the heap.\n// 4. Reduce the size of the heap by one and heapify the root of the heap.\n// 5. Repeat steps 2-4 until all the elements are sorted.\n// 6. Return the sorted array.", "category": "Python"}, {"instruction": "Describe how to add an element in a linked list in Python.", "input": "", "output": "// To add an element in a linked list in Python:\n// 1. Create a new node containing the value to be added\n// 2. Set the \"next\" attribute of the new node to point to the current head node\n// 3. Set the head node to be the newly created node\n// 4. Increase the size of the linked list by 1", "category": "Python"}, {"instruction": "Create an integer array using Java and sort it using the bubble sort algorithm.", "input": "", "output": "// Create an integer array\nint[] array = {4, 2, 6, 1, 3};\n\n// Sort the array using the bubbleSort function\nbubbleSort(array);\n\n// Write a function to implement the bubbleSort algorithm\npublic static int[] bubbleSort(int[] array) {\n    int len = array.length;\n    for (int i = 0; i < len; i++) {\n        for (int j = 0; j < len; j++) {\n            if (array[j] > array[j+1]) {\n                int temp = array[j];\n                array[j] = array[j+1];\n                array[j+1] = temp;\n            }\n        }\n    }\n    return array;\n}\n// The sorted array is [1, 2, 3, 4, 6]", "category": "Python"}, {"instruction": "Describe how to use the following code to sort an array in ascending order.", "input": "function bubbleSort(arr) {\n    let len = arr.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < len; j++) {\n            if (arr[j] > arr[j+1]) {\n               let temp = arr[j];\n               arr[j] = arr[j+1];\n               arr[j+1] = temp;\n            }\n        }\n    }\n    return arr;\n}", "output": "// To sort an array in ascending order using the bubble sort algorithm:\n// 1. Initialize the array to be sorted\n// 2. Iterate over the array and compare adjacent elements\n// 3. If the element on the left is greater than the element on the right, swap them\n// 4. Repeat steps 2 and 3 until the array is sorted\n// 5. Return the sorted array", "category": "Python"}, {"instruction": "Write a short JavaScript code snippet to detect a browser language and display a response message in that particular language.", "input": "", "output": "// get the current browser language\nvar language = navigator.language || navigator.userLanguage;\n\nif (language === \"en\") {\n    console.log(\"Hello, welcome to the website!\");\n} \nelse if (language === \"de\") {\n    console.log(\"Hallo, willkommen auf der Webseite!\");\n}\nelse if (language === \"fr\") {\n    console.log(\"Bonjour, bienvenue sur le site Web!\");\n}\nelse {\n    console.log(\"Welcome to the website!\");\n}", "category": "Python"}, {"instruction": "Write a query to display the average age of the students.", "input": "Table Name: Students", "output": "SELECT AVG(Age) FROM Students;", "category": "Python"}, {"instruction": "Show how this array could be sorted using the insertion sort algorithm.", "input": "[3, 4, 8, 1, 5]", "output": "// Initial Array\n[3, 4, 8, 1, 5]\n\n// 1st Pass\n[3, 4, 8, 1, 5] // Move 8 to the left\n[3, 4, 1, 8, 5]\n\n// 2nd Pass\n[3, 4, 1, 8, 5] // Move 4 to the left\n[3, 1, 4, 8, 5]\n\n// 3rd Pass\n[3, 1, 4, 8, 5] // Move 3 to the left\n[1, 3, 4, 8, 5]\n\n// 4th Pass\n[1, 3, 4, 8, 5] // Move 8 to the right\n[1, 3, 4, 5, 8]\n\n// Final Array\n[1, 3, 4, 5, 8]", "category": "Python"}, {"instruction": "Consider the following program. Find out the output without running it.", "input": "my_list = [1, 1, 2, 3, 5, 8]\n\nfor x in my_list:\n    if x%2 == 0:\n        print(x)", "output": "2\n8", "category": "Python"}, {"instruction": "Change the following code so that it prints the list elements in reverse order.", "input": "arr = [1, 2, 3, 4, 5]\n\nfor x in arr:\n    print(x)", "output": "arr = [1, 2, 3, 4, 5]\n\nfor x in arr[::-1]:\n    print(x)", "category": "Python"}, {"instruction": "Implement a binary search on the given array.", "input": "Array = [1, 4, 5, 6, 7, 9]", "output": "\"\"\"\nImplement a binary search on a given array\n\"\"\"\n\ndef binary_search(arr, element):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end)//2\n        if arr[mid] == element:\n            return True\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return False\n\nif __name__ == '__main__':\n    arr = [1, 4, 5, 6, 7, 9]\n    element = 7\n    result = binary_search(arr, element)\n    print(result)\n\n# Output\n# True", "category": "Python"}, {"instruction": "Visualize the following on a line chart.", "input": "Data points = [12, 13, 19, 20, 25]", "output": "import matplotlib.pyplot as plt\n\ndata_points = [12, 13, 19, 20, 25]\n\nplt.plot(data_points)\nplt.ylabel(\"data points\")\nplt.xlabel(\"index\")\nplt.title(\"Line chart of data points\")\n\nplt.show()", "category": "Python"}, {"instruction": "Write a code to get the value of pi (to 6 decimal places) using mathematical methods.", "input": "", "output": "\"\"\"\nCalculate the value of pi using mathematical methods\n\"\"\"\n\ndef calculate_pi():\n    pi = 0  \n    n = 1000\n    for n in range(n):\n        pi += ((-1)**n)/(2*n+1)\n    pi = pi*4\n    return round(pi, 6)\n\nif __name__ == '__main__':\n    print(calculate_pi())\n\n# Output\n# 3.141593", "category": "Python"}, {"instruction": "Create a Python function which takes an array and returns true if the array contains all unique values.", "input": "array = [1, 2, 3, 2]", "output": "\"\"\"\nCreate a Python function which takes an array and returns \ntrue if the array contains all unique values\n\"\"\"\n\ndef is_unique(arr):\n    seen = set()\n    for x in arr: \n        if x in seen: \n            return False\n        seen.add(x)\n    return True\n    \nif __name__ == '__main__':\n    arr = [1,2,3,2]\n    result = is_unique(arr)\n    print(result)\n    \n# Output\n# False", "category": "Python"}, {"instruction": "Incorporate the following change in the given code.", "input": "def calculate_area(base, height):\n    area = base*height\n    area = float(area)\nChange: Calculate area of the triangle in square meters.", "output": "def calculate_area(base, height):\n    area = 0.5*base*height\n    area = float(area)*(10**-6)\n    return area", "category": "Python"}, {"instruction": "Create a function that takes a string and returns a new string with each character capitalized.", "input": "String = \"hello!\"", "output": "\"\"\"\nCreate a function that takes a string and returns a new string with each character capitalized\n\"\"\"\n\ndef capitalize(string):\n    new_string = \"\"\n    for c in string:\n        new_string += c.upper()\n    return new_string\n    \nif __name__ == '__main__':\n    string = \"hello!\"\n    result = capitalize(string)\n    print(result)\n\n# Output\n# HELLO!", "category": "Python"}, {"instruction": "Generate a Frequency Table for the following sequence of characters using Python.", "input": "'aabbccddee'", "output": "# Create a frequency table for the given sequence\n# using Python\nfrom collections import Counter\n\nstring = 'aabbccddee'\n# create the Counter object\nfreq_table = Counter(string)\n# print the output\nprint(freq_table)\n\n# Output\nCounter({'a': 2, 'b': 2, 'c': 2, 'd': 2, 'e': 2})", "category": "Python"}, {"instruction": "Output the even numbers between 0 and 10.", "input": "", "output": "2, 4, 6, 8, 10", "category": "Python"}, {"instruction": "Calculate the factorial of a given number.", "input": "The number is 7", "output": "5040", "category": "Python"}, {"instruction": "Write SQL code to find the product details of the item with ID 1234.", "input": "", "output": "SELECT * FROM products WHERE id = 1234;", "category": "Python"}, {"instruction": "Create a JavaScript class that returns the area and circumference of a circle when given the radius.", "input": "", "output": "class Circle {\n  constructor(radius) {\n    this._radius = radius;\n  }\n \n  get area() {\n    return Math.PI * this._radius * this._radius;\n  }\n \n  get circumference() {\n    return 2 * Math.PI * this._radius;\n  }\n}", "category": "Python"}, {"instruction": "Create a Swift function to find the sum of elements in an array of integers.", "input": "let arr = [1,2,3,4,5]", "output": "func sumOfElements(arr: [Int]) -> Int {\n let sum = arr.reduce(0, +)\n return sum\n}", "category": "Python"}, {"instruction": "Create a JavaScript function that prints out the numbers from 1 to n.", "input": "", "output": "function printNumbers(n) {\n for (let i = 1; i <= n; i++) {\n console.log(i);\n }\n}", "category": "Python"}, {"instruction": "Print out the content of a two-dimensional array.", "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def print_2d_array(arr):\n    for row in arr:\n        for el in row:\n            print(el, end=' ')\n        print(\"\")", "category": "Python"}, {"instruction": "Create a method to reverse a linked list.", "input": "", "output": "def reverse_list(head): \n  \n    prev = None\n    current = head \n    while(current is not None): \n        next = current.next\n        current.next = prev \n        prev = current \n        current = next\n    head = prev \n    return head", "category": "Python"}, {"instruction": "Calculate the result of raising 2 to the power of 6.", "input": "", "output": "64", "category": "Python"}, {"instruction": "Create a function to find if a given input is a prime number or not.", "input": "", "output": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False        \n    return True", "category": "Python"}, {"instruction": "Create a program to find the sum of all the even numbers from 1 to n.", "input": "", "output": "def find_sum(n):  \n    sum = 0\n    for i in range (1, n): \n        if (i % 2 == 0): \n            sum = sum + i \n    return sum", "category": "Python"}, {"instruction": "You need to read a list of strings, split each into 2 substrings, and output the 2 substrings as a tuple.", "input": "['international', 'imagination', 'skyscraper']", "output": "def split_words(string_list):\n    new_list = []\n    for string in string_list:\n        mid = int(len(string)/2) \n        new_list.append( (string[:mid], string[mid:]) )\n    return new_list", "category": "Python"}, {"instruction": "Create a method to checkout the content of dictionary.", "input": "", "output": "def check_dict(dictionary):\n    for key in dictionary:\n        print(key + \": \" + str(dictionary[key]))", "category": "Python"}, {"instruction": "Retrieve the number of letters in the following phrase .", "input": "\"May the force be with you!\"", "output": "22", "category": "Python"}, {"instruction": "Implement a reverse method to reverse the content of an array.", "input": "[1, 2, 3, 4, 5]", "output": "def reverse(arr): \n    n =len(arr) \n    for i in range(n // 2): \n        temp = arr[i] \n        arr[i] = arr[n - i - 1] \n        arr[n - i - 1] = temp\n  \n    return arr", "category": "Python"}, {"instruction": "Create a method to print all the prime numbers up to n.", "input": "", "output": "def print_prime_numbers(n):\n    primes = [] \n    for num in range(2, n + 1): \n        is_prime = True\n        for i in range(2, num): \n            if (num % i == 0): \n                is_prime = False\n                break\n        if is_prime: \n            primes.append(num) \n    print(primes)", "category": "Python"}, {"instruction": "Use the 'subprocess' library to execute a shell command and store its output.", "input": "command = \"echo hello world\"", "output": "import subprocess\n\nresult = subprocess.run(command, shell=True, capture_output=True)\nprint(result.stdout.decode('utf-8'))", "category": "Python"}, {"instruction": "Write a C# program to create the list of prime numbers in a given range.", "input": "", "output": "public class PrimeNumber\n{\n static void Main()\n {\n int n1 = 2;\n int n2 = 10;\n while (n1 < n2)\n {\n bool isPrime = true;\n for (int i = 2; i <= n1 / 2; i++)\n {\n if (n1 % i == 0)\n {\n isPrime = false;\n break;\n }\n }\n if (isPrime)\n Console.Write(n1 + \" \");\n n1++;\n }\n }\n}", "category": "Python"}, {"instruction": "Build a deep learning model in Python to predict the stock price of a given company.", "input": "", "output": "# import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# import data\ndata = pd.read_csv('stock_data.csv')\n\n# preprocess data\nX = data.iloc[:,:-1].values\ny = data.iloc[:,-1].values\n\n# split into training set and test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# feature scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\n# build the model\nimport keras\nfrom keras.layers import Dense\nfrom keras.models import Sequential\n\nmodel = Sequential()\nmodel.add(Dense(units=6, activation='relu', input_dim=4))\nmodel.add(Dense(units=4, activation='sigmoid'))\nmodel.add(Dense(units=1, activation='linear'))\nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae','accuracy'])\nmodel.fit(X_train, y_train, epochs=20, batch_size=10)\n\n# test the model\ny_pred = model.predict(X_test)\n\n# evaluate the model\nfrom sklearn.metrics import r2_score\nr2_score(y_test, y_pred)", "category": "Python"}, {"instruction": "Write an R script to find the correlation between two variables.", "input": "", "output": "# read the data\ndat <- read.csv(\"data.csv\")\n\n# calculate the correlation\ncor(dat$var1, dat$var2)", "category": "Python"}, {"instruction": "Write a JavaScript function to sort an array of integers.", "input": "", "output": "function sortArray(arr) {\n return arr.sort(function(a, b) {\n  return a - b;\n });\n}", "category": "Python"}, {"instruction": "Write code to retrieve data from a given MySQL table.", "input": "Table Name: Books", "output": "SELECT * FROM Books;", "category": "Python"}, {"instruction": "Explain in simple terms what is a tree structure in data structures.", "input": "", "output": "A tree structure in data structures is a hierarchical structure composed of a root node connected to one or more nodes each of which is connected to one or more other nodes. It is a non-linear data structure that allows efficient insertion and retrieval of data.", "category": "Python"}, {"instruction": "Augment the following HTML structure to include a link to a CSS document.", "input": "<head>\n <meta charset=\"UTF-8\">\n <title>My Webpage</title>\n</head>", "output": "<head>\n <meta charset=\"UTF-8\">\n <title>My Webpage</title>\n <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n</head>", "category": "Python"}, {"instruction": "What is a callback function in JavaScript?", "input": "", "output": "A callback function in JavaScript is a function that is passed as an argument to another function and is executed after the outer function has finished executing.", "category": "Python"}, {"instruction": "Name three types of looping structures in Java.", "input": "", "output": "The three types of looping structures in Java are for-loops, while-loops, and do-while loops.", "category": "Python"}, {"instruction": "Improve the following HTML structure.", "input": "<div>\n<h2>Welcome!</h2>\n<p>This is my website.</p>\n</div>", "output": "<div>\n <h2>Welcome!</h2>\n <p>Hello and welcome to my website. Here, you can find all the information you need to know about me.</p>\n</div>", "category": "Python"}, {"instruction": "Create a loop in JavaScript that prints the numbers from 1 to 10 in the console.", "input": "", "output": "for (let i = 1; i <= 10; i++) {\n    console.log(i);\n}", "category": "Python"}, {"instruction": "Create a Linked List in C++.", "input": "", "output": "// create a struct to represent a node\nstruct node \n{ \n    int data; \n    struct node* next; \n}; \n  \n// function to insert an element in the Linked List \nvoid push(struct node** head_ref, int newdata) \n{ \n    // allocate memory for the node \n    struct node* newnode = (struct node*) malloc(sizeof(struct node)); \n  \n    // adding data to the node \n    newnode->data = newdata; \n  \n    // make next point to the previous head \n    newnode->next = (*head_ref); \n  \n    // move the head point to the new node \n    (*head_ref) = newnode; \n}", "category": "Python"}, {"instruction": "Construct a SQL query to get all CustomerIDs from the Orders table if their OrderTotal is greater than 500.", "input": "", "output": "SELECT CustomerID\nFROM Orders\nWHERE OrderTotal > 500;", "category": "Python"}, {"instruction": "What will be the result of the following Ruby code?", "input": "a = 11\nb = 3\nc = a % b", "output": "The result of the code will be 2.", "category": "Python"}, {"instruction": "Construct an XML element with tag 'hello' and the text 'Welcome to my website'.", "input": "", "output": "<hello>Welcome to my website</hello>", "category": "Python"}, {"instruction": "Write a function in Python that takes a list of numbers and returns the greatest difference between any two numbers in the list.", "input": "test_list = [4, 6, 8, 10, 3, 1, 9]", "output": "def greatest_difference(numbers_list):\n    max_difference = 0\n    for num1 in numbers_list:\n        for num2 in numbers_list:\n            if num1 != num2:\n                difference = abs(num1 - num2)\n                if difference > max_difference:\n                    max_difference = difference\n    \n    return max_difference\n\ngreatest_difference(test_list)", "category": "Python"}, {"instruction": "To what type of data can the following MySQL query return?", "input": "SELECT *\nFROM table1 t1\nINNER JOIN table2 t2\nON t1.id = t2.id", "output": "The query can return results of any combination of columns from the two tables. It will return a set of records with the matching id from Table 1 and Table 2.", "category": "Python"}, {"instruction": "Describe in one sentence what is wrong with the following Java code.", "input": "public class Main {\n    public static void main(String[] args) {\n        int y;\n        y = 10 + 5;\n        y -= 30;\n    }\n}", "output": "The code does not do anything with the value of y, meaning that it is not being used.", "category": "Python"}, {"instruction": "Write a Java program to find the sum of elements in a 3x3 matrix.", "input": "", "output": "// Java program to find sum of elements in a matrix \npublic class Matrix \n{ \n\tpublic static void main(String[] args) \n\t{ \n\t\t// Initialize matrix \n\t\tint[][] matrix = {{1, 2, 3}, \n\t\t\t\t\t\t{4, 5, 6}, \n\t\t\t\t\t\t{7, 8, 9}}; \n\n\t\t// Initialize sum \n\t\tint sum = 0; \n\n\t\t// Compute sum of elements \n\t\tfor (int i = 0; i < 3; i++) \n\t\t\tfor (int j = 0; j < 3; j++) \n\t\t\t\tsum = sum + matrix[i][j]; \n\n\t\t// Print Sum \n\t\tSystem.out.println(\"Sum of elements is: \" + sum); \n\t} \n}", "category": "Python"}, {"instruction": "Write a SQL query to find the most expensive item in the table.", "input": "", "output": "SELECT * FROM items ORDER BY price DESC LIMIT 1;", "category": "Python"}, {"instruction": "Explain what is wrong with the following SQL statement.", "input": "SELECT column1, column2 FROM myTable;", "output": "The statement does not specify which records in MyTable it is attempting to retrieve, so it will return all columns of all records in the table.", "category": "Python"}, {"instruction": "Create a class to represent a two-dimensional vector.", "input": "", "output": "class Vector2D(object):\n  '''Class to represent a two-dimensional vector'''\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n  \n  def __add__(self, other):\n    return Vector2D(self.x + other.x, self.y + other.y)\n  \n  def __sub__(self, other):\n    return Vector2D(self.x - other.x, self.y - other.y)\n  \n  def __mul__(self, scalar):\n    return Vector2D(self.x * scalar, self.y * scalar)", "category": "Python"}, {"instruction": "In Python, write code to identify whether a given string contains only numeric values.", "input": "", "output": "# To identify whether a given string contains only numeric values in Python:\n# 1. Use the isdigit method of the str object\n# 2. Pass the given string as an argument to the isdigit method\n# 3. The method will return True if the given string contains only numeric values,\n#    and False otherwise\n\n# Example\ngiven_string = \"1234\"\n\nif given_string.isdigit():\n    print(\"The given string contains only numeric values\")  \nelse:\n    print(\"The given string does not contain only numeric values\")", "category": "Python"}, {"instruction": "Write a script in JavaScript to parse an XML document.", "input": "", "output": "// To parse an XML document in JavaScript:\n// 1. Use the DOMParser to load the XML document into an XML Document object\n// 2. Use the getElementsByTagName method to obtain all the elements with a specific tag in the document\n// 3. Use the getElementsByTagNameNS method to obtain all the elements with a specific tag and namespace in the document\n// 4. Use the getAttribute method to obtain the attribute values of the desired elements\n// 5. Use the getElementsByClassName method to obtain all the elements with a specific class in the document  \n// 6. Parse the elements and create a custom object according to the returned XML.", "category": "Python"}, {"instruction": "Generate a 5-element tuple of random numbers between 5 and 15 using Python.", "input": "", "output": "import random\n\nrandom_tuple = tuple(random.randint(5, 15) for _ in range(5))", "category": "Python"}, {"instruction": "Write a CSS selector to apply a font-size of 16px to every element with a class of \"heading\".", "input": "", "output": ".heading {\n  font-size: 16px;\n}", "category": "Python"}, {"instruction": "Create a SQL query to find the average salary of all employees in the department labeled \"sales\".", "input": "", "output": "SELECT AVG(salary) \nFROM Employees \nWHERE department = 'sales';", "category": "Python"}, {"instruction": "Suggest a syntax to create a PHP class for a user.", "input": "", "output": "class User {\n  public $name;\n  public $age;\n\n  function __construct($name, $age) {\n    $this->name = $name;\n    $this->age = $age;\n  }\n}", "category": "Python"}, {"instruction": "Write a Python function to count the letters in a given sentence and return a dictionary of letter counts.", "input": "sentence = \"Hello World!\"", "output": "def letter_counts(sentence):\n  count_dict = {}\n  for char in sentence:\n    if char.isalpha():\n      if char in count_dict:\n        count_dict[char] += 1\n      else:\n        count_dict[char] = 1\n  return count_dict", "category": "Python"}, {"instruction": "Create a JavaScript variable to store the current date and time.", "input": "", "output": "let datetime = new Date();", "category": "Python"}, {"instruction": "Generate an array of odd numbers up to and including the number 10.", "input": "", "output": "let numbers = [1, 3, 5, 7, 9];", "category": "Python"}, {"instruction": "Create a JavaScript object to represent a person's name and age.", "input": "", "output": "let person = {\n  name: \"John Doe\",\n  age: 25\n};", "category": "Python"}, {"instruction": "Write a bash script to list the content of the current directory.", "input": "", "output": "#!/bin/bash\n\nls", "category": "Python"}, {"instruction": "In C++, search a given string for a given sub-string.", "input": "string = \"This is a string\"\n    sub_string = \"ing\"", "output": "size_t found = string.find(sub_string);\nif (found != string::npos) {\n    // sub-string found\n} else {\n    // sub-string not found\n}", "category": "Python"}, {"instruction": "Rewrite the following code into a generator.", "input": "def some_function(nums):\n  output = []\n  for x in nums:\n    y = x ** 2\n    output.append(y)\n  return output", "output": "def some_function(nums):\n  for x in nums:\n    yield x ** 2", "category": "Python"}, {"instruction": "Find the sum of the elements in a given list of numbers.", "input": "[1, 2, 3, 4, 5]", "output": "sum(list_of_numbers)", "category": "Python"}, {"instruction": "Calculate the average from a given list of integers.", "input": "[1, 2, 3, 4, 5]", "output": "sum(list_of_numbers) / len(list_of_numbers)", "category": "Python"}, {"instruction": "Concatenate the two strings below, with a space inserted between them.", "input": "A = \"Hello\"\nB = \"World!\"", "output": "A + ' ' + B", "category": "Python"}, {"instruction": "Generate a 3x3 matrix of random real numbers in the range of 0.0 to 1.0.", "input": "", "output": "import numpy as np\nnp.random.RandomState(0).rand(3, 3)", "category": "Python"}, {"instruction": "Edit the following HTML code to add an additional radio button with the label \"orange\".", "input": "<input type=\"radio\" name=\"fruit\" value=\"apple\"> Apple<br>\n<input type=\"radio\" name=\"fruit\" value=\"banana\"> Banana", "output": "<input type=\"radio\" name=\"fruit\" value=\"apple\"> Apple<br>\n<input type=\"radio\" name=\"fruit\" value=\"banana\"> Banana<br>\n<input type=\"radio\" name=\"fruit\" value=\"orange\"> Orange", "category": "Python"}, {"instruction": "Write a function in Python to check if two strings are an anagram or not.", "input": "", "output": "def is_anagram(str1, str2): \n    if len(str1) != len(str2): \n        return False \n  \n    s1 = sorted(str1) \n    s2 = sorted(str2) \n  \n    if s1 == s2: \n        return True\n  \n    return False", "category": "Python"}, {"instruction": "Analyze the given Java code and identify the errors.", "input": "public class TestClass {\n   public static void main (String[] args) {\n      int x = 10;\n      int y = 20\n      int z = x + y;\n      system.out.println(\"The sum is: \" + z);\n   }\n}", "output": "The errors are:\n1. The semicolon at the end of line 2 is missing.\n2. The line 4 should be `System.out.println(\"The sum is: \" + z);` (the capital S is missing).\n3. The line 5 is an extra line which should be removed.", "category": "Python"}, {"instruction": "Create a new MySQL table to store user data.", "input": "Table structure: \nUser_ID, FirstName, LastName, Email", "output": "CREATE TABLE User_Data (\nUser_ID INT,\nFirstName VARCHAR (20) NOT NULL,\nLastName VARCHAR (20) NOT NULL,\nEmail VARCHAR (50) NOT NULL,\n PRIMARY KEY (User_ID)\n);", "category": "Python"}, {"instruction": "Create a dictionary of fruits and their respective colors.", "input": "", "output": "fruits = {\n \"apple\": \"red\",\n \"banana\": \"yellow\",\n \"grape\": \"purple\"\n}", "category": "Python"}, {"instruction": "Using the provided HTML, add a class attribute to the h1 tag so its style can be updated.", "input": "<h1>My Website</h1>", "output": "<h1 class=\"myClass\">My Website</h1>", "category": "Python"}, {"instruction": "Write a JavaScript code to add two numbers using a prompt.", "input": "", "output": "let a = prompt('Enter the first number:');\nlet b = prompt('Enter the second number:');\nlet sum = parseInt(a) + parseInt(b);\nconsole.log(sum);", "category": "Python"}, {"instruction": "Create a list of car models that includes \"Honda Accord\", \"Toyota Corolla\", and \"Ford F150\".", "input": "", "output": "car_models = [\"Honda Accord\", \"Toyota Corolla\", \"Ford F150\"]", "category": "Python"}, {"instruction": "Write a Python code to print \"Hello World!\" on the console.", "input": "", "output": "print(\"Hello World!\")", "category": "Python"}, {"instruction": "Generate a random string with 10 characters.", "input": "", "output": "let randomString = Math.random().toString(36).substring(2, 12);", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to center text in a div element with id \"myDiv\".", "input": "", "output": "document.getElementById('myDiv').style.textAlign = \"center\";", "category": "Python"}, {"instruction": "Create a Python dictionary with keys \"A\", \"B\", \"C\" and each key value should be the length of corresponding key.", "input": "", "output": "{\"A\": 1, \"B\": 1, \"C\": 1}", "category": "Python"}, {"instruction": "Using the code below, update the function to find the average of two numbers.", "input": "def find_average(num1, num2): \n  total = num1 + num2", "output": "def find_average(num1, num2): \n  total = num1 + num2 \n  average = total / 2\n  return average", "category": "Python"}, {"instruction": "Create a CSS rule to make all h1 elements red in color.", "input": "", "output": "h1 {\n  color: red;\n}", "category": "Python"}, {"instruction": "Write a SQL query to select the row with the customer id \"CID001\" from the customers table.", "input": "", "output": "SELECT * FROM customers WHERE customer_id = 'CID001';", "category": "Python"}, {"instruction": "Find the average salary of the given table.", "input": "Table structure:\nEmployee_ID  Name   Department   Salary", "output": "SELECT AVG (Salary) \nFROM Employee ;", "category": "Python"}, {"instruction": "Write an HTML page including the given text.", "input": "This is a test page", "output": "<html>\n  <head>\n    <title>Test Page</title>\n  </head>\n  <body>\n    <h1>This is a test page</h1>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a query in SQL to list the employee information from the given Employee table in descending order of their salaries.", "input": "Table structure:\nEmployee_ID  Name   Department   Salary", "output": "SELECT * FROM Employee \nORDER BY Salary DESC;", "category": "Python"}, {"instruction": "Manipulate the given list in Python to include the new element at the beginning.", "input": "list = [1, 2, 3]\nnew_element = 0", "output": "list = [0] + list \nlist.insert(0, new_element)", "category": "Python"}, {"instruction": "Create a Python program to generate a random string of 5 characters.", "input": "", "output": "import random\n\ndef generate_random_string():\n  characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n  random_string = ''\n  for x in range(5):\n    random_string += random.choice(characters)\n  \n  return random_string\n\nprint(generate_random_string())", "category": "Python"}, {"instruction": "Identify the most efficient data structure to store a list of strings.", "input": "", "output": "A linked list is the most efficient data structure for storing a list of strings, as it offers constant-time insertions and deletions.", "category": "Python"}, {"instruction": "Explain how to perform a bubble sort on a given array.", "input": "", "output": "// To perform a bubble sort on a given array:\n// 1. Iterate over the array and compare adjacent elements\n// 2. If the element on the left is greater than the element on the right, swap them\n// 3. After each pass, the largest element in the array will \"bubble\" up to the right\n// 4. Continue to iterate and swap until the array is sorted\n// 5. Return the sorted array", "category": "Python"}, {"instruction": "Print the following 2D matrix in row-major order.", "input": "[[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9]]", "output": "1 4 7 2 5 8 3 6 9", "category": "Python"}, {"instruction": "Read the input text and reverse it character by character.", "input": "This is a sample text", "output": "txet elpmas a si sihT", "category": "Python"}, {"instruction": "Create a Java program that reads two numbers from the user and prints the sum.", "input": "", "output": "import java.util.Scanner;\n\npublic class Sum {\n\npublic static void main(String[] args) {\n \nScanner sc = new Scanner(System.in);\n \nSystem.out.println(\"Enter first number:\");\nint num1 = sc.nextInt();\n \nSystem.out.println(\"Enter second number:\");\nint num2 = sc.nextInt();\n \nint sum = num1 + num2;\n \nSystem.out.println(\"The sum is: \"+sum);\n \n }\n}", "category": "Python"}, {"instruction": "What is the purpose of the \"break\" keyword in C language?", "input": "", "output": "The \"break\" keyword is used to immediately break out of a loop in the C programming language. It can also be used to break out of a switch statement. It is used to terminate a loop or switch statement and transfer program control to the next statement after the loop or switch.", "category": "Python"}, {"instruction": "Create a Python program to extract all unique words from a given sentence.", "input": "This sentence contains multiple words.", "output": "sentence_words = set(sentence.split())\nunique_words = set(word for word in sentence_words if word not in visited_words)\nprint(unique_words)\n# Output: {'contains', 'words', 'multiple', 'This'}", "category": "Python"}, {"instruction": "Transform the following sentence into a declarative sentence.", "input": "Do your homework every day.", "output": "You should do your homework every day.", "category": "Python"}, {"instruction": "Write an R function to calculate the mean of a numerical vector.", "input": "", "output": "calc_mean <- function(x) {\n    mean(x)\n}", "category": "Python"}, {"instruction": "Create a class in Python that implements a stack.", "input": "", "output": "class Stack: \n    def __init__(self): \n        self.stack = []\n\n    def push(self,element): \n        self.stack.append(element)  \n\n    def pop(self): \n        return self.stack.pop()\n\n    def peek(self):\n        return self.stack[-1]", "category": "Python"}, {"instruction": "Classify the following statement.", "input": "I must finish the project by tomorrow.", "output": "Imperative sentence.", "category": "Python"}, {"instruction": "Create a C++ program to calculate the sum of numbers in an array.", "input": "std::vector<int> numbers = {1, 2, 3, 4, 5};", "output": "#include <iostream>\n#include <vector>\n \nint sumArray(std::vector<int> &nums)\n{\n    int sum = 0;\n    for (int num : nums) {\n        sum += num;\n    }\n    return sum;\n}\n \nint main()\n{\n    std::vector<int> nums = {1, 2, 3, 4, 5};\n    std::cout << \"Sum: \" << sumArray(nums);\n    return 0;\n}", "category": "Python"}, {"instruction": "Identify and explain the Big O runtime complexity of this algorithm.", "input": "def find_sum(numbers): \n    total = 0\n    for num in numbers:\n        total += num\n    return total", "output": "O(n), where n is the number of elements in the list. This algorithm has linear time complexity, because the amount of operations performed is directly dependent on the number of elements in the list.", "category": "Python"}, {"instruction": "Write a JavaScript function for reversing a string.", "input": "", "output": "function reverseString(str) {\n    let revStr = '';\n    for(let i = str.length-1; i >= 0; i--) {\n        revStr += str[i];\n    }\n    return revStr;\n}", "category": "Python"}, {"instruction": "Convert this number from decimal to binary.", "input": "128", "output": "10000000", "category": "Python"}, {"instruction": "Generate the Fibonacci sequence up to the 10th number.", "input": "", "output": "0, 1, 1, 2, 3, 5, 8, 13, 21, 34", "category": "Python"}, {"instruction": "Write SQL code to find the names of students who are enrolled in all three classes.", "input": "Table name: students\nColumns: student_id, name, class1, class2, class3", "output": "SELECT name\nFROM students\nWHERE class1 = 1 AND class2 = 1 AND class3 = 1;", "category": "Python"}, {"instruction": "Sort the given words in lexicographical order.", "input": "apple, cat, flower, dog", "output": "apple, cat, dog, flower", "category": "Python"}, {"instruction": "Describe how to use the following code to calculate the sum of all elements in an array in Java.", "input": "public static int calcSum(int[] arr) {\n    int sum = 0;\n    for (var i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}", "output": "// To calculate the sum of all elements in an array using the code provided:\n// 1. Initialize the array of integers to be summed\n// 2. Use the calcSum function to iterate over the array and sum all of its elements\n// 3. Return the calculated sum from the calcSum function", "category": "Python"}, {"instruction": "Write a SQL query to find the highest salary of a employee in the salary table?", "input": "", "output": "SELECT MAX(salary) FROM salary;", "category": "Python"}, {"instruction": "What is the purpose of the \"if-else\" statement in JavaScript?", "input": "", "output": "The if-else statement is a control statement in JavaScript that is used to execute a block of code if a certain condition is true, and a different block of code if the condition is false. It is a type of decision-making statement which allows a program to execute a certain code depending on a certain condition.", "category": "Python"}, {"instruction": "Create a HTML page that displays the words \"Hello, World!\" in different colors.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Hello World Page</title>\n    <style>\n        h1 {\n            color: red;\n        }\n\n        h2 {\n            color: blue;\n        }\n\n        h3 {\n            color: green;\n        }\n    </style>\n</head>\n<body>\n    <h1>Hello, World!</h1>\n    <h2>Hello, World!</h2>\n    <h3>Hello, World!</h3>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a C++ program to print all prime numbers between 1 and 100.", "input": "", "output": "#include<iostream>  \nusing namespace std;  \nint main()  \n{  \n int i, j,flag;   \n for (i = 2; i <= 100; i++)  \n {  \n     flag = 0;  \n     for (j = 2; j <= i / 2; j++)  \n     {  \n         if (i % j == 0)\n         {  \n             flag = 1;  \n             break;  \n         }  \n     }  \n     if (flag == 0)  \n         cout << i << \" \";  \n }  \n return 0;  \n}", "category": "Python"}, {"instruction": "Merge the two lists below together.", "input": "list_a = [1,2,3] \nlist_b = [4,5,6]", "output": "[1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Convert the following string to camelCase.", "input": "this_string_should_be_converted_to_camelCase", "output": "thisStringShouldBeConvertedToCamelCase", "category": "Python"}, {"instruction": "Generate a list of 10 random capital letters.", "input": "", "output": "['X', 'Z', 'J', 'G', 'M', 'B', 'Y', 'Q', 'C', 'T']", "category": "Python"}, {"instruction": "Modify the following Java program to find the area of a rectangle.", "input": "public class Area\n{\n public static void main(String[] args)\n {\n double radius = 10;\n double area = 3.14 * radius * radius;\n\n System.out.println(\"The area of the circle = \"+area);\n }\n}", "output": "public class Area\n{\n public static void main(String[] args)\n {\n double length = 10;\n double width = 5;\n double area = length * width;\n\n System.out.println(\"The area of the rectangle = \"+area);\n }\n}", "category": "Python"}, {"instruction": "Suggest a sorting algorithm to sort the following array in descending order.", "input": "arr = [17, 21, 4, 7, 29, 34, 11]", "output": "A Bubble Sort algorithm could be used to sort the given array in descending order. This algorithm compares adjacent elements in the array and swaps them if the element on the left is larger than the element on the right. This process is continued until the array is sorted.", "category": "Python"}, {"instruction": "Write a CSS style to add a yellow background to the body of a webpage.", "input": "", "output": "body {\n  background-color: yellow;\n}", "category": "Python"}, {"instruction": "Create a bash script that prints out \"Hello World\" five times.", "input": "", "output": "#!/bin/bash\n \nfor i in `seq 1 5`;\ndo\n  echo \"Hello World!\"\ndone", "category": "Python"}, {"instruction": "Create an empty set in Python and add the following items into it: \"A\", \"B\", \"C\"", "input": "", "output": "mySet = {\"A\", \"B\", \"C\"}", "category": "Python"}, {"instruction": "Write a function that takes a string and returns a dictionary counting each character in the string.", "input": "", "output": "def character_count(str): \n    res = {} \n  \n    for keys in str: \n        res[keys] = res.get(keys, 0)+1\n        \n    return res", "category": "Python"}, {"instruction": "Create a HTML page with a heading 2 of \"Operating System\".", "input": "", "output": "<html>\n<head>\n    <title>Operating System</title>\n</head>\n<body>\n    <h2>Operating System</h2>\n\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a function in Java to sort a given array of numbers into ascending order.", "input": "int[] array = {11, 7, 18, 2, 5, 8};", "output": "public static void sortAscending(int[] array) \n{ \n    // Sort the array in ascending order \n    Arrays.sort(array); \n  \n    System.out.println(\"Array in Ascending Order: \"); \n    for (int i = 0; i < array.length; i++)  \n    { \n        System.out.print(array[i] + \" \"); \n    } \n}", "category": "Python"}, {"instruction": "Find the minimum element in an unordered array given in Python.", "input": "arr = [17, 21, 4, 7, 29, 34, 11]", "output": "min_ele = arr[0]\nfor i in range (1, len(arr)):\n    if (min_ele > arr[i]):\n       min_ele = arr[i] \n    \nprint(\"Minimum element in array is\", min_ele)", "category": "Python"}, {"instruction": "Write a function in Python that takes in two strings and concatenates them together with a space in between.", "input": "", "output": "def my_concat(string1, string2)\n    return string1 + ' ' + string2", "category": "Python"}, {"instruction": "Suggest a data structure to store the following data.", "input": "Names of fruits and vegetables in an online grocery store", "output": "A HashMap could be a suitable data structure to store the names of fruits and vegetables in an online store. The keys should be the names of the fruits and vegetables, and the values should store a description or additional information about them. For example, the key could be \"Banana\" and the value could be \"A yellow-skinned fruit with a sweet taste\".", "category": "Python"}, {"instruction": "Write a for loop in Java to print all the numbers in a given list.", "input": "int[] list = {21, 34, 54, 77, 92};", "output": "for (int i = 0; i < list.length; i++) {\n System.out.println(list[i]);\n}", "category": "Python"}, {"instruction": "Write a SQL query that finds, in a table of employees, the names and titles of all employees who work in the Marketing department.", "input": "Table: Employees\n\n| EmployeeID | Name | Department   | Title                   |\n|------------|------|--------------|-------------------------|\n| 1          | Bob  | Marketing    | Senior Marketing Manager |\n| 2          | Joe  | Finance      | Financial Analyst       |\n| 3          | Jane | Marketing    | Marketing Manager       |\n| 4          | Alex | Sales        | Sales Representative     |", "output": "SELECT Name, Title \nFROM Employees \nWHERE Department = 'Marketing';", "category": "Python"}, {"instruction": "Suggest an algorithm for finding the maximum element in an unordered array given in JavaScript.", "input": "let array = [9, 4, 15, 10, 6, 20];", "output": "// max is assign to 0 as a starting point\nlet max = 0;\n\nfor (let i=0; i < array.length; i++) {\n  // If the current value of i is greater than max, max will be updated\n  if (array[i] > max) { \n    max = array[i];\n  }\n}\n\nconsole.log(max); // Output: 20", "category": "Python"}, {"instruction": "Create a function to generate a random integer between two given numbers.", "input": "", "output": "import random\ndef rand_int(low, high):\n\treturn random.randint(low,high)", "category": "Python"}, {"instruction": "Analyze the following text and produce the sentiment score.", "input": "Text: I am extremely disappointed with the customer service I received.", "output": "Sentiment score: -2.", "category": "Python"}, {"instruction": "Create a function in Python that returns all permutations of a string.", "input": "", "output": "def get_all_permutations(string):\n \n  if len(string) == 1:\n    return [string]\n \n  permutations = []\n  for index, char in enumerate(string):\n    slice_string  = string[:index] + string[index+1:]\n    for permutation in get_all_permutations(slice_string):\n      permutations.append(char + permutation)\n\n  return permutations", "category": "Python"}, {"instruction": "Write a function in PHP to convert a string to an array.", "input": "String: \"A,B,C\"", "output": "function convertStringToArray($string) {\n  return explode(\",\", $string);\n}", "category": "Python"}, {"instruction": "Create an array of column names in a MySQL query.", "input": "Column Names: item_name, item_price", "output": "SELECT `item_name`, `item_price` FROM TableName;", "category": "Python"}, {"instruction": "Retrieve a random record from a MySQL table.", "input": "Table Name: MemberTable", "output": "SELECT * FROM MemberTable ORDER BY RAND() LIMIT 1;", "category": "Python"}, {"instruction": "Write a SQL command to search for data containing a case-insensitive substring.", "input": "Table Name: ItemTable\nColumn Name: ItemDescription\nSearch Term: Chair", "output": "SELECT * FROM ItemTable WHERE LOWER(ItemDescription) LIKE '%chair%';", "category": "Python"}, {"instruction": "Design a GUI in Python to accept user input and display a welcome message.", "input": "Message: Welcome to our website!", "output": "import tkinter as tk\n\nwindow = tk.Tk()\n\nlabel = tk.Label(text='Please enter your name:')\nlabel.pack()\n\nname = tk.Entry(window, width=25)\nname.pack()\n\ndef greet_user():\n\twelcome = \"Welcome to our website, \" + name.get()\n\t\n\tgreeting = tk.Label(text=welcome)\n\tgreeting.pack()\n\nbtn = tk.Button(window, text='Submit', command=greet_user)\nbtn.pack()\n\nwindow.mainloop()", "category": "Python"}, {"instruction": "Explain how can one sort a list of strings alphabetically in Java.", "input": "", "output": "One can use the Collections.sort() method to perform an alphabetical sort of a list of strings in Java. For example, List<String> myList = new ArrayList<String>(); myList.add(\"Joe\"); myList.add(\"Bob\"); myList.add(\"Tom\"); Collections.sort(myList); This will sort the strings alphabetically in the list.", "category": "Python"}, {"instruction": "Write a function in C# to calculate the area of a circle from its radius.", "input": "Radius: 5", "output": "public double GetAreaOfCircle(double radius)\n{\n    return Math.PI * Math.Pow(radius, 2);\n}", "category": "Python"}, {"instruction": "Produce a SELECT query in PostgreSQL to search for all existing entries with a specified ID.", "input": "Property ID: 15", "output": "SELECT * FROM TableName WHERE PropertyID='15';", "category": "Python"}, {"instruction": "Create a drop-down list with menu items in HTML.", "input": "List Items: Home, About Us, Contact Us, Careers", "output": "<select>\n  <option value=\"Home\">Home</option>\n  <option value=\"AboutUs\">About Us</option>\n  <option value=\"ContactUs\">Contact Us</option>\n  <option value=\"Careers\">Careers</option>\n</select>", "category": "Python"}, {"instruction": "Calculate the sum of the numbers given in the following list using Python.", "input": "my_list = [1, 2, 3, 4, 5]", "output": "my_list = [1, 2, 3, 4, 5]\n\n# Calculate the sum \nsum_nums = sum(my_list)\n\nprint(sum_nums) \n# Output: 15", "category": "Python"}, {"instruction": "Create a program in JavaScript to calculate the area of a triangle with given side lengths.", "input": "side_1 = 10\nside_2 = 10\nside_3 = 8", "output": "let side_1= 10;\nlet side_2= 10;\nlet side_3= 8;\n \n//calculate the permiter of triangle \nlet perimiter = (side_1 + side_2 + side_3)/2;\n \n//calculate the area of triangle using Heron's formula \nlet area = Math.sqrt(perimiter*(perimiter-side_1)*(perimiter-side_2)*(perimiter-side_3));\n \nconsole.log(area);", "category": "Python"}, {"instruction": "Write a function in Python to assign the value 0 for special values, i.e. empty strings and NaN.", "input": "my_list = [5, 2, 3, None, '', 8]", "output": "def assign_values(list): \n    for i, val in enumerate(list): \n        if not val or val != val: \n            list[i] = 0\n            \n    return list\n\nmy_list = [5, 2, 3, None, '', 8] \nresult = assign_values(my_list) \nprint(result) \n# Output: [5, 2, 3, 0, 0, 8]", "category": "Python"}, {"instruction": "Create a program in SQL to display the name and salary of the employees whose salary is equal to the average salary of the employees.", "input": "Table A\n\nid | name  | salary\n-----------------\n1 | John  | 35000\n2 | Peter | 50000 \n3 | Dave  | 70000", "output": "SELECT name, salary \nFROM TableA\nWHERE salary = (SELECT AVG(salary) FROM TableA);", "category": "Python"}, {"instruction": "In C++, write a function to allocate memory for an array of integers.", "input": "size = 5", "output": "// C++ program to allocate memory for an array of integers \n\n#include<iostream> \nusing namespace std; \n  \nint* allocatearray(int size) \n{ \n    // Allocate memory for given number of integers \n    int *ptr = new int[size]; \n  \n    // Initialize the array \n    for (int i = 0; i < size; i++) \n        ptr[i] = i+10; \n  \n    return ptr; \n} \n  \n// Main function \nint main() \n{ \n    int size = 5; \n    int *ptr = allocatearray(size); \n  \n    cout << \"Array elements are \"; \n    for (int i = 0; i < size; i++) \n        cout << ptr[i] << \" \"; \n  \n    cout << endl; \n  \n    delete[] ptr; \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Write an expression in JavaScript to convert a given number of minutes to seconds.", "input": "minutes = 55", "output": "let minutes = 55;\nlet seconds = minutes * 60;\n\nconsole.log(seconds); //3300", "category": "Python"}, {"instruction": "Describe how a bubble sort algorithm works.", "input": "", "output": "Bubble sort is a sorting algorithm in which adjacent elements in an array are compared and swapped if they are not in the correct order. The algorithm steps through the array multiple times, comparing adjacent elements and swapping them if the elements are not in the correct order. This process is repeated until all elements in the array are sorted.", "category": "Python"}, {"instruction": "Create a while loop in JavaScript to print out all the numbers between 20 and 30.", "input": "", "output": "let i = 20;\nwhile (i <= 30) {\n  console.log(i);\n  i++;\n}", "category": "Python"}, {"instruction": "Generate a for loop in Java to display all the numbers between 1 and 10.", "input": "", "output": "for (int i = 1; i <= 10; i++) {\n\tSystem.out.println(i);\n}", "category": "Python"}, {"instruction": "Modify the code snippet to filter all records from a table using SQL.", "input": "Table Name: StudentTable\nFilter Type: Accepted", "output": "SELECT * FROM StudentTable WHERE Accepted='True';", "category": "Python"}, {"instruction": "Construct a REST API to get the list of current events from a Web Calendar application.", "input": "", "output": "Endpoint: \u2018/api/v1/events\u2019\nHTTP Method: GET\nResponse Format: JSON\nResponse:\n{\n  \"status\": 200,\n  \"events\": [\n    { \"eventId\": 1,\n      \u201cdescription\u201d: \u201cCompany Meeting\u201d,\n      \"dateTime\": \"2020-11-05T09:00:00\"\n    },\n    { \n      \"eventId\": 2,\n      \u201cdescription\u201d: \u201cBoard Meeting\u201d,\n      \"dateTime\": \"2020-11-08T14:00:00\"\n    }\n  ]\n}", "category": "Python"}, {"instruction": "Identify two coding languages used by Python developers.", "input": "", "output": "Two coding languages used by Python developers are Python and C++.", "category": "Python"}, {"instruction": "Format the following date according to ISO 8601 standard.", "input": "date = 'January 5 2021'", "output": "from datetime import datetime\n\ndate = 'January 5 2021'\nformatted_date = datetime.strptime(date, '%B %d %Y').isoformat()\nprint(formatted_date)", "category": "Python"}, {"instruction": "Edit the following code to make it print out the sum of two numbers.", "input": "num1 = 10\nnum2 = 5\n\nprint(num1 * num2)", "output": "num1 = 10\nnum2 = 5\n\nprint(num1 + num2)", "category": "Python"}, {"instruction": "Write a Python program to add two matrices.", "input": "matrix1 = [[3, 5],\n           [6, 2]]\n\nmatrix2 = [[1, 2],\n           [3, 4]]", "output": "def add_matrices(mat1, mat2):\n    \"\"\"\n    This function takes two 2D matrices and adds them,\n    returning a new 2D matrix.\n    \"\"\"\n    output = []\n    \n    for i in range(len(mat1)):\n        row_m1 = mat1[i]\n        row_m2 = mat2[i]\n        row_sum = []\n        for j in range(len(row_m1)):\n            row_sum.append(row_m1[j] + row_m2[j])\n        output.append(row_sum)\n        \n    return output\n    \nresult = add_matrices(matrix1, matrix2)", "category": "Python"}, {"instruction": "Modify the following function to print out the 'type' of each argument.", "input": "def print_args(arg1, arg2):\n    print(\"Arg 1:  %s\" % arg1)\n    print(\"Arg 2:  %s\" % arg2)", "output": "def print_args(arg1, arg2):\n    print(\"Arg 1: %s\" % str(type(arg1))) \n    print(\"Arg 2: %s\" % str(type(arg2))) \n    print(\"Arg 1:  %s\" % arg1)\n    print(\"Arg 2:  %s\" % arg2)", "category": "Python"}, {"instruction": "Convert the following JSON string to a Python dictionary.", "input": "{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}", "output": "import json\n\njson_str = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\npy_dict = json.loads(json_str)\n\n# py_dict would be {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}", "category": "Python"}, {"instruction": "Organize the following array of objects in ascending order by the 'name' field.", "input": "[ \n  { name: 'Jill', lastname: 'Smith' }, \n  { name: 'Bob', lastname: 'Jones' },\n  { name: 'Jack', lastname: 'Bauer' }\n]", "output": "let arr = [ \n  { name: 'Jill', lastname: 'Smith' }, \n  { name: 'Bob', lastname: 'Jones' },\n  { name: 'Jack', lastname: 'Bauer' }\n];\n\narr.sort((a, b) => (a.name > b.name) ? 1 : -1);\n  \nconsole.log(arr);", "category": "Python"}, {"instruction": "Identify which of the two strings is a valid URL.", "input": "str1 = \"http://example.com/blog\"\nstr2 = 'example.com/blog'", "output": "str1 is a valid URL, whereas str2 is not.", "category": "Python"}, {"instruction": "Find the longest word in the given sentence.", "input": "Sentence: \u201cThe cow jumped over the moon.\u201d", "output": "longest_word = max(sentence.split(), key=len)", "category": "Python"}, {"instruction": "Output the concatenation of two strings.", "input": "String1: \"Hello\"\nString2: \"world\"", "output": "print(string1 + string2)", "category": "Python"}, {"instruction": "Define a function to collect unique values from a list of dictionaries based on the \"key\" field.", "input": "list = [{'name': 'Apple', 'price': 100}, {'name': 'Mango', 'price': 90}, {'name': 'Apple', 'price': 200}]", "output": "def collect_unique(dic_list, key):\n    unique_values = set()\n    for item in dic_list:\n        val = item.get(key)\n        if val is not None:\n            unique_values.add(val)\n    return list(unique_values)", "category": "Python"}, {"instruction": "What is the difference between sort() and sorted()?", "input": "", "output": "The sort() method sorts the elements of a given iterable in ascending order. It modifies the original list in place and does not return a value. The sorted() method on the other hand, returns an iterable sorted list without modifying the original sequence. It takes an optional 'key' argument to specify a function to be called on each list element prior to making comparisons.", "category": "Python"}, {"instruction": "Given a string, write a program to remove the leading and trailing white spaces from the string and output the modified string.", "input": "String: \"Hello world   \"", "output": "# Python program to remove leading and trailing white spaces from a string \n  \n# Function to remove leading and trailing white spaces \ndef removeWhitespaces(string): \n    # Remove leading and trailing whitespaces \n    newString = string.strip() \n  \n    # Returns the new string with leading and trailing \n    # whitespaces removed \n    return newString \n  \n# Driver program \ninputString = \"Hello world   \"\n  \n# Printing the modified string \nprint(removeWhitespaces(inputString))", "category": "Python"}, {"instruction": "Explain the purpose of the count() method.", "input": "", "output": "The count() method is used to count the number of times a particular item appears in a list. It takes the element as an argument and returns the count of the specified element in the list.", "category": "Python"}, {"instruction": "Construct a try-catch block in C#.", "input": "", "output": "try \n{\n   // Code here\n}\ncatch(Exception ex)\n{\n   // Handle exceptions\n}", "category": "Python"}, {"instruction": "Generate code to parse the following HTML.", "input": "<div>\n    <h1>Heading</h1>\n    <p>Content 1 </p>\n    <ul>\n      <li>Item 1</li>\n      <li>Item 2</li>\n    </ul>\n</div>", "output": "def parse_html(html):\n    root = BeautifulSoup(html, 'html.parser')\n    heading = root.find('h1').text\n    content1 = root.find('p').text\n    items = [li.text for li in root.find_all('li')]\n    return {\n        'heading': heading,\n        'content1': content1,\n        'items': items\n    }", "category": "Python"}, {"instruction": "Debug the following bash script to ensure it works as intended.", "input": "#!/bin/bash\n\necho \"Show a list of running processes\"\nps", "output": "#!/bin/bash\n\necho \"Show a list of running processes\"\nps aux | grep -v grep | awk '{print $2 \"  \" $11}'", "category": "Python"}, {"instruction": "Write an expression to verify the validity of a given password in Python.", "input": "", "output": "import re \n  \ndef check(password): \n  \n    #Define pattern rules\n    pattern = r\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}\"\n      \n    if (re.search(pattern,password)): \n        return True\n    else: \n        return False \n  \n# Driver code     \npassword = \"Geronimo1\"\nif (check(password)): \n    print(\"Valid Password\") \nelse: \n    print(\"Invalid Password\")", "category": "Python"}, {"instruction": "Update the following SQL table column with the values in another column.", "input": "Table A \n\nid | column_1 | column_2\n--------------------\n1  |        25|      NULL\n2  |        29|      NULL", "output": "UPDATE TableA\nSET column_2 = column_1\nWHERE column_2 IS NULL;", "category": "Python"}, {"instruction": "Create a program to calculate the standard deviation of an array of numbers.", "input": "arr = [10, 8, 12, 5, 9]", "output": "def stdev(arr):\n    n = len(arr)\n    mean = sum(arr) / n\n    variance = sum((x - mean) ** 2 for x in arr) / n\n    return (variance ** 0.5)", "category": "Python"}, {"instruction": "Develop an algorithm to print out the following pattern.", "input": "", "output": "def print_pattern():\n    for i in range(1, 5):\n        for j in range(1,i+1):\n            print(j, end=\" \")\n        print()", "category": "Python"}, {"instruction": "Design a function to find the average of a given array.", "input": "array = [1, 2, 3]", "output": "def array_mean(array):\n    total = 0\n    for num in array:\n        total += num\n    mean = total / len(array)\n    return mean", "category": "Python"}, {"instruction": "Develop a function to find all elements in a given array which appear more than once.", "input": "nums = [4, 3, 6, 7, 3, 8, 4, 9]", "output": "def find_duplicates(nums):\n    duplicates = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j]:\n                duplicates.append(nums[i])\n    return duplicates", "category": "Python"}, {"instruction": "Develop a program that takes a number and prints \"true\" if it is a prime number, and \"false\" otherwise.", "input": "", "output": "def is_prime(number):\n  if number<1:\n    return False\n  for check in range(2,number):\n    if number%check==0:\n      return False\n  return True", "category": "Python"}, {"instruction": "Write a function that collects elements from two given arrays and creates a new array.", "input": "array1 = [1, 2, 3] \narray2 = [4, 5, 6]", "output": "def collect(array1, array2):\n    result = array1 + array2 \n    return result", "category": "Python"}, {"instruction": "Create a coding program that sorts a given list of numbers into ascending order.", "input": "[4, 3, 2, 5, 9, 1, 8]", "output": "def ascending_order(arr): \n\n# Bubble sort algorithm. \n    n = len(arr) \n   \n    # Traverse through all array elements \n    for i in range(n): \n   \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n   \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n                \n    return arr\n\n# Test \narr = [4, 3, 2, 5, 9, 1, 8]\n\nascending_order(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "category": "Python"}, {"instruction": "Develop an algorithm in Python to calculate the factorial of a given number n.", "input": "", "output": "def factorial(n): \n   if n == 0: \n       return 1\n   elif n > 0: \n       return n * factorial(n-1) \n   else: \n       return \"Enter a positive integer\"", "category": "Python"}, {"instruction": "Write a JavaScript function that takes two integers and returns true if the numbers are equal and false otherwise.", "input": "", "output": "function isEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    return false;\n}", "category": "Python"}, {"instruction": "Create an HTML table with three columns and five rows.", "input": "", "output": "<table>\n  <tr>\n    <th>Column 1</th>\n    <th>Column 2</th>\n    <th>Column 3</th>\n  </tr>\n  <tr>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Generate a random string of 8 characters with at least 1 digit.", "input": "", "output": "import random\n\ndef generate_random_string():\n    chars = string.ascii_letters + string.digits\n    return ''.join(random.choice(chars) for _ in range(8))", "category": "Python"}, {"instruction": "Write a SQL statement to get all records from a table which has id between 5 and 10.", "input": "", "output": "SELECT * FROM table_name WHERE id BETWEEN 5 AND 10;", "category": "Python"}, {"instruction": "Write a JavaScript function that swaps the values of two variables.", "input": "", "output": "function swap(a, b) {\n    let temp = a;\n    a = b;\n    b = temp;\n}", "category": "Python"}, {"instruction": "Find the length of a given string using JavaScript.", "input": "str = \"I'm a GPT model\"", "output": "let str = \"I'm a GPT model\";\nlet length = str.length;\nconsole.log(length); // 16", "category": "Python"}, {"instruction": "Calculate the sum of the first 10 Fibonacci numbers in Java.", "input": "", "output": "class Fibonacci \n{ \n    static int fib(int n) \n    { \n        if (n <= 1) \n            return n; \n        return fib(n-1) + fib(n-2); \n    } \n  \n    public static void main (String args[]) \n    { \n        int num = 10, sum = 0; \n        for (int i = 1; i <= num; i++) \n        { \n            sum += fib(i); \n        } \n        System.out.println(sum); \n    } \n}", "category": "Python"}, {"instruction": "Create a function that calculates the average of given list of numbers.", "input": "[10, 15, 20, 25, 30]", "output": "def mean(nums):\n    sum = 0\n    for i in nums:\n      sum += i\n    return sum / len(nums)", "category": "Python"}, {"instruction": "You need to code a program that prints the absolute difference between two numbers.", "input": "15 and 10", "output": "def difference(num1, num2):\n    return abs(num1 - num2)", "category": "Python"}, {"instruction": "Calculate the sum of all the prime numbers between a given range.", "input": "15 and 20", "output": "def sum_of_primes(start, end): \n    sum = 0\n    for i in range(start, end + 1):\n        if isPrime(i): \n            sum = sum + i \n    return sum\n    \ndef isPrime(num): \n    if num > 1: \n        for i in range(2, num): \n            if (num % i) == 0: \n                return False\n        return True\n    else: \n        return False", "category": "Python"}, {"instruction": "Formulate a query to select the rows based on multiple conditions", "input": "SELECT * FROM fruit WHERE color='red' AND quantity > 5", "output": "No output required", "category": "Python"}, {"instruction": "Create a program in C to find the difference between the smallest and the largest number in a given array.", "input": "array = { 100, 2, 11, 1, 5, 34, 45 }", "output": "#include<stdio.h> \n\n// Function to find the difference between smallest and largest element in given array \nint findDifference(int array[], int n) \n{   \n    int max = 0; \n    int min = array[0]; \n  \n    // Find maximum and minimum element in array \n    for (int i = 0; i < n; i++)  \n    { \n        if (array[i] > max) \n            max = array[i]; \n          \n        if (array[i] < min) \n            min = array[i]; \n    } \n    return (max - min); \n} \n\n// Driver Code \nint main() \n{ \n    int array[] = { 100, 2, 11, 1, 5, 34, 45 }; \n    int n = sizeof(array)/sizeof(array[0]); \n    printf(\"Difference between largest and smallest element: %d\",findDifference(array, n)); \n    return 0; \n}", "category": "Python"}, {"instruction": "Write a function in Java to calculate the sum of the even numbers in a given range of integers.", "input": "Start: 10 \nEnd: 20", "output": "// Java Program to calculate the sum of all even \n// numbers in a given range \n\npublic static int sumOfEvenInRange(int n1, int n2) { \n    int sum = 0; \n      \n    // calculating the sum of all even numbers in given range \n    for (int i = n1; i <= n2; i++) { \n        // if num is even then add it \n        if (i % 2 == 0) { \n            sum += i; \n        } \n    } \n    return sum; \n}", "category": "Python"}, {"instruction": "Explain how to create a custom exception in Python.", "input": "", "output": "To create a custom exception in Python, you will have to subclass Exception class and define your own exception class. For example: \n \nclass MyCustomException(Exception):\n  pass \n \nThen you can use the exception in a try-except block to handle expected errors:\n \ntry: \n  ...\nexcept MyCustomException: \n  ...", "category": "Python"}, {"instruction": "Create a Pandas DataFrame from a given dictionary of lists.", "input": "data = {'Year': [2020, 2021, 2022],\n 'Sales': [50000, 70000, 60000]}", "output": "import pandas as pd\n\ndf = pd.DataFrame(data)", "category": "Python"}, {"instruction": "Suggest a method to remove a given item from a given list.", "input": "", "output": "def remove_item(lst, item):\n if item in lst:\n    lst.remove(item)", "category": "Python"}, {"instruction": "Implement a method to check if a given string has all unique characters.", "input": "", "output": "def has_unique_chars(string): \n  chars = set() \n  for char in string: \n    if char in chars: \n      return False \n    else: \n      chars.add(char) \n  return True", "category": "Python"}, {"instruction": "Create a Django view that displays all the books stored in the library's database.", "input": "", "output": "def library_books_view(request):\n books = Book.objects.all()\n context = {'books': books}\n return render(request, 'library/books.html', context)", "category": "Python"}, {"instruction": "Modify the following HTML to apply an external style sheet.", "input": "<html> \n  <head> \n    <title>This Is a Test</title> \n  </head> \n  <body>\n    <h1>Hello World!</h1> \n  </body>\n</html>", "output": "<!DOCTYPE html>\n<html> \n  <head> \n    <title>This Is a Test</title> \n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"> \n  </head> \n  <body>\n    <h1>Hello World!</h1> \n  </body>\n</html>", "category": "Python"}, {"instruction": "Modify the following python code so that it accepts two numbers as input and returns the maximum of those numbers.", "input": "def get_max(num1):\n return num1", "output": "def get_max(num1, num2):\n return max(num1, num2)", "category": "Python"}, {"instruction": "Format a given string according to a given pattern.", "input": "string = 'John Doe, 25'\npattern = '{lastname}, {firstname} {age}'", "output": "formatted_string = pattern.format(firstname = string.split()[0], lastname = string.split()[1], age = string.split()[2])", "category": "Python"}, {"instruction": "Construct a python class to store a person's data like name, age, and hobbies.", "input": "", "output": "class Person:\n     def __init__(self, firstname, lastname, age, hobbies):\n           self.firstname = firstname\n           self.lastname = lastname\n           self.age = age\n           self.hobbies = hobbies", "category": "Python"}, {"instruction": "Clean up the following json data so that all the fields are consistent with the same data type.", "input": "{\n    \"person\": {\n        \"fullname\": {\n            \"firstname\": \"John\",\n            \"lastname\": \"Smith\"\n        },\n        \"age\": 45,\n        \"hobbies\": [\"sample hobbby 1\", \"sample hobby2\", 3]\n    }\n}", "output": "{\n    \"person\": {\n        \"fullname\": {\n            \"firstname\": \"John\",\n            \"lastname\": \"Smith\"\n        },\n        \"age\": 45,\n        \"hobbies\": [\"sample hobbby 1\", \"sample hobby2\"]\n    }\n}", "category": "Python"}, {"instruction": "Create a function to sort a given set of strings in dictionary order.", "input": "", "output": "def sort_dict(arr):\n\tarr.sort(key=lambda s: [s.lower(), s])\n\treturn arr", "category": "Python"}, {"instruction": "Write a function to flatten a given array of lists.", "input": "[[1,2], [3,4], [5,6]]", "output": "def flatten(arr):\n    output_list = []\n    for sublist in arr:\n        for item in sublist:\n            output_list.append(item)\n    return output_list", "category": "Python"}, {"instruction": "You need to code a program that converts a given number of days to years, month and days.", "input": "450 days", "output": "def convertToYMD(num_days):\n\n    years = int(num_days/365)\n    rem_days = num_days % 365\n    months = int(rem_days / 30)\n    days = rem_days % 30\n    return [years, months, days]", "category": "Python"}, {"instruction": "Implement a recursive binary search on a given sorted list.", "input": "[-4, -2, 0, 6, 7, 8]", "output": "def binary_search(arr, num, start, end): \n    if start >= end: \n        return None\n  \n    mid = start + (end - start)//2\n    if arr[mid] == num: \n        return mid \n  \n    if arr[mid] < num: \n        return binary_search(arr, num, mid+1, end) \n    else: \n        return binary_search(arr, num, start, mid-1)", "category": "Python"}, {"instruction": "Construct a python method to get the nth Fibonacci number.", "input": "", "output": "def get_nth_fibonacci(n):\n if n == 0 or n == 1:\n return n\n else:\n return get_nth_fibonacci(n-1) + get_nth_fibonacci(n-2)", "category": "Python"}, {"instruction": "Edit the following code to check for even numbers in the array.", "input": "arr = [1, 2, 3, 4, 5]", "output": "arr = [1, 2, 3, 4, 5]\n\nfor i in arr: \n if i % 2 == 0 : \n print(i)", "category": "Python"}, {"instruction": "Create a customer management system using Python and the Django web framework.", "input": "", "output": "Steps for creating a customer management system using Python and the Django web framework:\n1. Create a Django project\n2. Add customers app to the project \n3. Create a model for customers in the customers app\n4. Update the customers app's views function to include the logic for adding, deleting, and updating customers\n5. Add customers app the the project's urls.py file to map requests to the views functions\n6. Create and update templates in the customers app to provide the UI\n7. Run the Django project to launch the web application", "category": "Python"}, {"instruction": "Construct a GraphQL query for retrieving posts for the selected user.", "input": "", "output": "query {\n  selectedUser {\n    posts {\n      title\n      body\n      createdAt\n      comments {\n        body\n        author {\n          name\n        }\n      }\n    }\n  }\n}", "category": "Python"}, {"instruction": "Suggest an algorithm to calculate the multiplication of two integers without using the operator '*'.", "input": "", "output": "One approach is to use a loop to iterate over and add the second number (multiplicand) to the first number (multiplier) the number of times specified by the multiplicand. This would result in the product of the two integers. For example, to calculate 3 \u00d7 4, we would start with 0, add 4 three times (resulting in 12), and the final result is 12.\n\n// pseudocode\nfunction multiply(int a, int b) \n{\n  if (b == 0) {\n    return 0;\n  }\n  int result = 0;\n  for (int i = 0; i < b; i++) {\n    result += a;\n  }\n  return result;\n}", "category": "Python"}, {"instruction": "Write a C# method to check if a string contains a specific substring.", "input": "", "output": "public bool ContainsSubstring(string text, string substring) {\n    return text.Contains(substring);\n}", "category": "Python"}, {"instruction": "Can you retrieve the item at index 3 from the following array?", "input": "int[] arr = {11, 30, 45, 19, 20, 60};", "output": "int itemAtIndex3 = arr[3];\n// itemAtIndex3 is equal to 19", "category": "Python"}, {"instruction": "Suggest a way to improve the C++ program.", "input": "#include <iostream>\n\nint main() {\n std::cout << \"Hello, World!\" << std::endl;\n return 0;\n}", "output": "#include <iostream>\n\nint main() {\n std::cout << \"Hello, World!\" << std::endl;\n std::cout << \"This is a C++ program.\" << std::endl;\n return 0;\n}", "category": "Python"}, {"instruction": "Edit this HTML code to add a meta tag.", "input": "<head>\n    <title>This is a title</title>\n</head>", "output": "<head>\n    <title>This is a title</title>\n    <meta name=\"description\" content=\"\">\n</head>", "category": "Python"}, {"instruction": "Find the longest common subsequence for two strings in C++.", "input": "String 1: \"abcdef\"\nString 2: \"abdee\"", "output": "int LCS(string X, string Y, int m, int n)\n{\n    int L[m + 1][n + 1];\n    int i, j;\n\n    for (i = 0; i <= m; i++)\n    {\n        for (j = 0; j <= n; j++)\n        {\n            if (i == 0 || j == 0)\n                L[i][j] = 0;\n            else if (X[i - 1] == Y[j - 1])\n                L[i][j] = L[i - 1][j - 1] + 1;\n            else\n                L[i][j] = max(L[i - 1][j], L[i][j - 1]);\n        }\n    }\n\n    return L[m][n];\n}", "category": "Python"}, {"instruction": "Compress a string using Huffman coding in Python.", "input": "String: \"aaabbcc\"", "output": "def get_freq_list(s): \n      \n    # dictionaries are efficient for such a task \n    freq_list = {} \n  \n    for char in s: \n        if char in freq_list.keys(): \n            freq_list[char] += 1\n        else: \n            freq_list[char] = 1\n  \n    return freq_list \n  \ndef create_huffman_tree(freq_list): \n  \n    # create a priority queue \n    # to pop two minimum element each time \n    priority_queue = [] \n    for key in freq_list.keys(): \n        node = Node(key, freq_list[key]) \n        heapq.heappush(priority_queue, node) \n  \n    while len(priority_queue) > 1: \n        left_node = heapq.heappop(priority_queue) \n        right_node = heapq.heappop(priority_queue) \n  \n        new_node = Node(None, \n              left_node.freq + right_node.freq, \n              left_node, \n              right_node) \n        heapq.heappush(priority_queue, new_node) \n  \n    huffman_tree = heapq.heappop(priority_queue) \n    return huffman_tree \n    \ndef compress_string(huffman_tree, symbols): \n  \n    # create a character-code dict\n    code_dict = {} \n    _generate_codes(huffman_tree, '', code_dict) \n  \n    # encode the string \n    encoded_str = '' \n    for char in symbols: \n        encoded_str += code_dict[char] \n  \n    return encoded_str", "category": "Python"}, {"instruction": "Write a regular expression to find all occurrences of a pattern in a string.", "input": "String: \"The quick brown fox jumps over the lazy dog\"\nPattern: \"fox\"", "output": "/fox/g", "category": "Python"}, {"instruction": "What is the output of this Java program?", "input": "public class Main {\n    public static void main(String [] args) {\n        String name = \"John\";\n        int age = 34;\n        System.out.println(\"My name is \" + name + \" and I am \" + age + \" years old.\");\n    }\n}", "output": "My name is John and I am 34 years old.", "category": "Python"}, {"instruction": "Create a database table in SQL.", "input": "Table Name: User\nColumns: user_id, username, password", "output": "CREATE TABLE User (\n   user_id INT NOT NULL,\n   username VARCHAR(50) NOT NULL,\n   password VARCHAR (50) NOT NULL,\n   PRIMARY KEY(user_id)\n);", "category": "Python"}, {"instruction": "Sort an array of integers in C++.", "input": "[4, 2, 9, 5, 1, 3]", "output": "int array [] = {4, 2, 9, 5, 1, 3};\nint n = sizeof(array)/sizeof(array[0]);\n \n//sort the array\nstd::sort(array, array+n);\n \n//print the sorted array\nfor (int i=0; i<n; i++)\n   cout << array[i] << \" \";", "category": "Python"}, {"instruction": "Find and remove the bug from this Python code.", "input": "def function(a):\n    b = a / 0.5\n    c = a / 2.0\n    if b == c:\n        return \"equal\"\n    else:\n        return \"not equal\"", "output": "def function(a):\n    b = a * 2\n    c = a * 0.5\n    if b == c:\n        return \"equal\"\n    else:\n        return \"not equal\"", "category": "Python"}, {"instruction": "Identify the correct output of this Java program given the input.", "input": "Input: Hello", "output": "Hello", "category": "Python"}, {"instruction": "Create a Perl regular expression to verify if a given string is a valid email address.", "input": "", "output": "if ($string =~ m/^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}$/) {\n print \"Valid email address\\n\";\n}", "category": "Python"}, {"instruction": "Write an HTML page that displays a red box.", "input": "", "output": "<html>\n    <head>\n        <title>Red Box</title>\n    </head>\n    <body>\n        <div style=\"width: 200px;height: 200px;background-color: red;\"></div>\n    </body>\n</html>", "category": "Python"}, {"instruction": "What python library can be used for working with JSON data?", "input": "", "output": "The Python library 'json' can be used for working with JSON data.", "category": "Python"}, {"instruction": "Suggest an approach to add items to an array in JavaScript.", "input": "", "output": "A common approach to add items to an array in JavaScript is to use the Array.push() method. This method adds the item to the end of the array. \n\nFor example: \nlet arr = [1, 2, 3];\narr.push(4); // [1, 2, 3, 4]", "category": "Python"}, {"instruction": "Write a JavaScript code to sort an array of numbers in descending order.", "input": "", "output": "let arr = [4, 5, 2, 1, 8];\narr.sort((a, b) => b - a); // [8, 5, 4, 2, 1]", "category": "Python"}, {"instruction": "Write a code to generate a list of all possible permutations of a given string.", "input": "\"ABC\"", "output": "def get_permutations(string):\n    if len(string) == 0:\n        return []\n    if len(string) == 1:\n        return [string]\n \n    permutations = []\n    for i, char in enumerate(string):\n        for permutation in get_permutations(string[:i] + string[i+1:]):\n            permutations.append(char + permutation)\n \n    return permutations\n\nif __name__ == \"__main__\":\n    print(get_permutations(\"ABC\"))", "category": "Python"}, {"instruction": "Write an algorithm that takes in an array and determines if it is a valid BST.", "input": "[9, 7, 3, 15, 20]", "output": "def is_valid_bst(arr):\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n\n    root_val = arr[0]\n    left_subtree = [i for i in arr if i < root_val]\n    right_subtree = [i for i in arr if i > root_val]\n\n    if sorted(left_subtree) == left_subtree and sorted(right_subtree, reverse=True) == right_subtree:\n        return (is_valid_bst(left_subtree) and is_valid_bst(right_subtree))\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    print(is_valid_bst([9, 7, 3, 15, 20]))", "category": "Python"}, {"instruction": "Compute the sum of all even numbers between 1 and 50.", "input": "", "output": "def sum_even(num):\n    total = 0 \n    for i in range(1, num+1):\n        if i % 2 == 0:\n            total += i\n    return total\n\nif __name__ == \"__main__\":\n    print(sum_even(50))", "category": "Python"}, {"instruction": "Write a function to filter a given list such that all any string starting with an 'S' is removed from the list.", "input": "['Swallow', 'Duck', 'Finch', 'Parrot']", "output": "def filter_list(lst):\n    return [elem for elem in lst if not elem.startswith('S')]\n\nif __name__ == \"__main__\":\n        print(filter_list(['Swallow', 'Duck', 'Finch', 'Parrot']))", "category": "Python"}, {"instruction": "Create a web scraper that can collect data from the same web page.", "input": "https://example.com/movies", "output": "\"\"\"\nA web scraper that can collect data from the same web page\n\"\"\"\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef get_data(url):\n    response = requests.get(url)\n    parser = BeautifulSoup(response.text, 'html.parser')\n    movies = parser.find_all('div', {'class': 'movie-card'})\n    data = []\n    for movie in movies:\n        title = movie.find('h3').get_text()\n        year = movie.find('div', {'class': 'movie-year'}).get_text()\n        rating = movie.find('div', {'class': 'movie-rating'}).get_text()\n        data.append({\n            'title': title,\n            'year': year,\n            'rating': rating\n        })\n    return data\n\nif __name__ == \"__main__\":\n    data = get_data('https://example.com/movies')\n    print(data)", "category": "Python"}, {"instruction": "Code a recursive solution for counting the number of characters in a given string.", "input": "example", "output": "def count_chars(string):\n    if len(string) == 0:\n        return 0\n    return 1 + count_chars(string[1:])", "category": "Python"}, {"instruction": "Develop a C program to calculate the average of three numbers and display the result to the user.", "input": "", "output": "#include <stdio.h>\n\n// Function to calculate the average of three numbers \nint average(int num1, int num2, int num3) \n{ \n    return (num1 + num2 + num3) / 3; \n} \n\nint main() \n{ \n    int num1, num2, num3; \n    printf(\"Enter three numbers: \");\n    scanf(\"%d %d %d\",&num1, &num2, &num3); \n\n    printf(\"Average of the three numbers is %d\", average(num1, num2, num3)); \n    return 0; \n}", "category": "Python"}, {"instruction": "Create a CSS selector to target all <p> elements with the class \"description\".", "input": "", "output": "p.description {\n\n}", "category": "Python"}, {"instruction": "Write a Java program to read and print out the characters of a given string one by one.", "input": "Hello World", "output": "class Test \n{ \n  public static void main(String[] args) \n  { \n    String str = \"Hello World\"; \n    for (int i = 0; i < str.length(); i++) { \n        System.out.print(str.charAt(i)); \n    } \n  } \n}", "category": "Python"}, {"instruction": "Create an HTML page containing a text field and a button.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Input Form</title>\n</head>\n<body>\n  <form>\n    <input type=\"text\" />\n    <input type=\"submit\" value=\"Submit\" />\n  </form>\n</body>\n</html>", "category": "Python"}, {"instruction": "Develop a Python program to generate a list with numbers in range 3 to 12.", "input": "", "output": "# Generate a list with numbers in range 3 to 12 \nmy_list = list(range(3, 13)) \nprint(my_list) # [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "category": "Python"}, {"instruction": "Suggest a way to delete an item from a python list.", "input": "", "output": "You can use the built-in method \"remove\" to delete an item from a python list. \n\nFor example:\n\nmy_list = [1, 2, 3, 4, 5]\nmy_list.remove(4) # Remove item 4 from the list\n\nThe list will now be: [1, 2, 3, 5]", "category": "Python"}, {"instruction": "Develop a SQL query to display the employees who work in the Sales department.", "input": "", "output": "SELECT * \nFROM Employees \nWHERE Department = 'Sales';", "category": "Python"}, {"instruction": "Develop a Python program to find the most frequent element in an array.", "input": "[3, 5, 1, 2, 4, 5, 5, 4, 2]", "output": "def most_frequent_element(arr):\n    count = 0\n    for i in arr:\n        current_count = arr.count(i)\n        if current_count > count:\n            count = current_count\n            most_frequent_element = i\n    return most_frequent_element\n\narr = [3, 5, 1, 2, 4, 5, 5, 4, 2]\nprint(most_frequent_element(arr)) # 5", "category": "Python"}, {"instruction": "Explain what the following function in Python does.", "input": "def print_max_element_idx(arr):\n    max_num = arr[0]\n    max_idx = 0\n    i = 1\n    while i < len(arr):\n        if arr[i] > max_num:\n            max_idx = i\n            max_num = arr[i]\n        i += 1\n    return max_idx", "output": "This function takes an array as input and then iterates through it. It keeps track of the maximum number and its index. At the end, it returns the index at which the maximum number is located.", "category": "Python"}, {"instruction": "Write a SQL query to select the first name and last name of all employees whose salary is greater than $50,000.", "input": "", "output": "SELECT first_name, last_name\nFROM employees\nWHERE salary > 50000;", "category": "Python"}, {"instruction": "Suggest a way to convert a JSON object to a string in JavaScript.", "input": "", "output": "The JSON.stringify() method can be used to convert a JSON object to a string in JavaScript. It takes two parameters: the object to be stringified and an optional replacer to modify the values before they are stringified. The result is a JSON-formatted string.\n\nExample: \nconst object = {'name': 'John', 'age': 25};\nconst string = JSON.stringify(object); \nconsole.log(string);  // '{\"name\": \"John\", \"age\": 25}'", "category": "Python"}, {"instruction": "Combine the two lists below using Python to produce a single list containing all elements from both.", "input": "list_one = [1, 2, 3]\nlist_two = [4, 5, 6]", "output": "list_one = [1, 2, 3]\nlist_two = [4, 5, 6]\ncombined_list = list_one + list_two\nprint(combined_list) # Output: [1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Compare two given JSON objects and create a merged object.", "input": "Object A: {\n\t\"name\": \"John\",\n\t\"age\": 35,\n\t\"interests\": [\"music\"]\n}\nObject B: {\n\t\"name\": \"John\",\n\t\"hobbies\": [\"cycling\"]\n}", "output": "def merge_json(json_a, json_b):\n # Create a new object\n merged = dict()\n # Iterate through the keys in both objects\n for key in json_a.keys() | json_b.keys():\n   # Merge the values of matching keys\n   if key in json_a and key in json_b:\n     if isinstance(json_a[key], list) and isinstance(json_b[key], list):\n       merged[key] = json_a[key] + json_b[key]\n     else:\n       merged[key] = [json_a[key], json_b[key]]\n   # Add keys that only exist in one object\n   elif key in json_a:\n     merged[key] = json_a[key]\n   elif key in json_b:\n     merged[key] = json_b[key]\n # Return the merged object\n return merged", "category": "Python"}, {"instruction": "Create a function to format a given number to two decimal places.", "input": "", "output": "def format_number(num):\n return '{0:.2f}'.format(num)", "category": "Python"}, {"instruction": "Write a Python function to find the most common element in a given list.", "input": "", "output": "def most_common(myList):\n  return max(set(myList), key=myList.count)", "category": "Python"}, {"instruction": "How can we generate a random number within a given range in Python?", "input": "", "output": "import random\n\nrandomNumber = random.randint(minNum, maxNum)", "category": "Python"}, {"instruction": "What is the syntax for creating an array in JavaScript?", "input": "", "output": "let myArray = [element1, element2, ...elementN];", "category": "Python"}, {"instruction": "How can we create a dictionary in JavaScript?", "input": "", "output": "let myDict = {\n  key1: value1,\n  key2: value2\n}", "category": "Python"}, {"instruction": "Write a function in Python to extract the first 5 characters of a string.", "input": "string = \"This is a sample string.\"", "output": "def get_first_five_characters(string):\n  return string[:5]\n\nprint(get_first_five_characters(string)) # Output: 'This '", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to check if a given string contains the substring 'hello'.", "input": "", "output": "if (str.indexOf('hello') !== -1) {\n  console.log('The string contains the substring hello');\n}", "category": "Python"}, {"instruction": "What is the syntax for creating a class in Python?", "input": "", "output": "class MyClass:\n    <statement(s)>", "category": "Python"}, {"instruction": "Write a function in C++ to insert an item into a linked list.", "input": "", "output": "void insertItem(Node*& root, int data) {\n  Node* newNode = new Node; \n  newNode->data = data; \n  newNode->next = root; \n  root = newNode; \n}", "category": "Python"}, {"instruction": "In a Java program, write a method to find the longest common subsequence of two strings.", "input": "", "output": "public static String longestCommonSubsequence(String s1,String s2) {\n   int l1 = s1.length();\n   int l2 = s2.length();\n\n   int[][] aux = new int[l1+1][l2+1];\n   for (int i = 0; i < l1; i++) {\n      for (int j = 0; j < l2; j++) {\n         if (s1.charAt(i) == s2.charAt(j))\n            aux[i+1][j+1] = aux[i][j] + 1;\n         else\n            aux[i+1][j+1] = Math.max(aux[i+1][j], aux[i][j+1]);\n      }\n   }\n   StringBuilder sb = new StringBuilder();\n   for (int i = l1, j = l2; i != 0 && j != 0; ) {\n      if (aux[i][j] == aux[i-1][j])\n         i--;\n      else if (aux[i][j] == aux[i][j-1])\n         j--;\n      else {\n         sb.append(s1.charAt(i-1));\n         i--;\n         j--;\n      }\n   }\n   return sb.reverse().toString();\n}", "category": "Python"}, {"instruction": "Construct an MySQL query to select records from a table named 'employees' where salary is between 50000 and 100000.", "input": "", "output": "SELECT * FROM employees WHERE salary BETWEEN 50000 AND 100000;", "category": "Python"}, {"instruction": "Create a PostgreSQL database with a table to store user details.", "input": "", "output": "Steps for creating a PostgreSQL database with a table to store user details:\n1. Connect to PostgreSQL database.\n2. Create database demodb.\n3. Create table to store user details.\n  Columns:\n  id - INT\n  name - VARCHAR\n  address - VARCHAR\n  email - VARCHAR\n  date_of_birth - DATE\n4. Apply constraints to the table.\n5. Grant read and write access to the database.", "category": "Python"}, {"instruction": "Provide an example of a recursive Python function to calculate the factorial of a number.", "input": "", "output": "def calculateFactorial(n):\n  if n == 0:\n    return 1\n\n  return n * calculateFactorial(n - 1)", "category": "Python"}, {"instruction": "Create an Express application for a web store with endpoints for adding products, deleting products and viewing products.", "input": "", "output": "Steps for creating an Express application for a web store:\n1. Install Express in the project.\n2. Create the routes for the endpoints.\n3. Create the controllers that handle the request logic.\n4. Add the required models for the endpoints.\n5. Use express.static() to enable static files.\n6. Create and enable middleware for authentication.\n7. Set up a testing environment.\n8. Create the view for the application.", "category": "Python"}, {"instruction": "Upgrade the following JavaScript code to use ES6 features.", "input": "function addNumbers(num1, num2) {\n  return num1 + num2;\n}", "output": "const addNumbers = (num1, num2) => num1 + num2;", "category": "Python"}, {"instruction": "Implement an Insertion Sort algorithm in Java.", "input": "", "output": "public static void insertSort(int[] arr) {\n  for (int i = 1; i < arr.length; i++) {\n    int currentElement = arr[i];\n    int j = i - 1;\n    while (j >= 0 && arr[j] > currentElement) {\n      arr[j + 1] = arr[j];\n      j--;\n    }\n    arr[j + 1] = currentElement;\n  }\n}", "category": "Python"}, {"instruction": "Suggest a for loop for printing all elements in an array.", "input": "int a[] = {11, 22, 33, 44, 55};", "output": "for (int i=0; i<sizeof(a)/sizeof(a[0]); i++) {\n    cout << a[i] << \" \";\n}", "category": "Python"}, {"instruction": "Suggest a way to convert a decimal number to binary.", "input": "int number = 15", "output": "string decimalToBinary(int number) {\n    string binaryNum = \"\";\n    while(number > 0) {\n        binaryNum = (number % 2 == 0 ? \"0\" : \"1\") + binaryNum;\n        number = Math.trunc(number / 2);\n    }\n    return binaryNum;\n}", "category": "Python"}, {"instruction": "Write a Haskell program to convert a given string to an Integer.", "input": "string text = \"12345\"", "output": "stringToInt :: String -> Int\nstringToInt x = read x :: Int", "category": "Python"}, {"instruction": "Suggest a way to sort a given array using insertion sort algorithm.", "input": "int arr[] = {82, 2, 25, 14, 5, 9}", "output": "void insertionSort(int arr[], int n) {\n    int i, key, j;\n    for (i = 1; i < n; i++) { \n        key = arr[i]; \n        j = i - 1; \n        while (j >= 0 && arr[j] > key) { \n            arr[j + 1] = arr[j]; \n            j = j - 1; \n        } \n        arr[j + 1] = key; \n    }\n}", "category": "Python"}, {"instruction": "Parse a given XML document using the ElementTree module.", "input": "<note>\n  <to>John</to>\n  <from>Alice</from>\n  <heading>Greeting</heading>\n  <body>Hi John, how are you?</body>\n</note>", "output": "import xml.etree.ElementTree as ET\n\ntree = ET.parse('data.xml')\nroot = tree.getroot()\n\nfor child in root:\n print(child.tag, child.attrib, child.text)", "category": "Python"}, {"instruction": "Create a SQL query to join two tables called Employees and Departments.", "input": "Employees table has the following columns:\nEmp_ID: int\nName: string\nAge: int\nDept_ID: int\n\nDepartments table has the following columns:\nDept_ID: int\nDept_Name: string\nLocation: string", "output": "SELECT e.Name, e.Age, d.Dept_Name, d.Location\nFROM Employees e\nINNER JOIN Departments d \nON e.Dept_ID = d.Dept_ID;", "category": "Python"}, {"instruction": "Generate a PHP code to determine if a number is odd or even.", "input": "$num = 3", "output": "<?php\n\nfunction isEven($num) {\n    return ($num%2 == 0);\n}\n\n$num = 3;\n \nif(isEven($num)) {\n    echo $num.\" is even\";\n} else {\n    echo $num.\" is odd\";\n}\n\n?>", "category": "Python"}, {"instruction": "Construct a MySQL query to find the 3 employees with the highest salaries.", "input": "", "output": "SELECT name, salary FROM employees ORDER BY salary DESC LIMIT 3;", "category": "Python"}, {"instruction": "Build a program in C to find all prime numbers within a given range.", "input": "int lower = 1;\nint upper = 20;", "output": "#include <stdio.h>  \nvoid primeCount(int lower, int upper) \n{ \n    while (lower < upper) { \n        int flag = 0; \n  \n        for (int i = 2; i <= lower / 2; ++i) { \n            if (lower % i == 0) { \n                flag = 1; \n                break; \n            } \n        } \n  \n        if (flag == 0) \n            printf(\"%d \", lower); \n  \n        ++lower; \n    } \n} \n  \n// Driver program \nint main() \n{ \n    int lower = 1;\n    int upper = 20;\n    primeCount(lower, upper); \n    return 0; \n}", "category": "Python"}, {"instruction": "Construct a HTML code which opens a popup window.", "input": "", "output": "<html>\n    <head>\n        <title>Popup Window</title>\n    </head>\n    <body>\n    \n  <!-- Trigger/Open The Modal -->\n  <button id=\"myBtn\">Open Popup Window</button>\n  \n  <!-- The Modal -->\n  <div id=\"myModal\" class=\"modal\">\n\n    <!-- Modal content -->\n    <div class=\"modal-content\">\n      <span class=\"close\">&times;</span>\n      <p>This is the popup window!</p>\n    </div>\n\n  </div>\n\n  <script>\n    // Get the modal\n    var modal = document.getElementById(\"myModal\");\n\n    // Get the button that opens the modal\n    var btn = document.getElementById(\"myBtn\");\n\n    // Get the <span> element that closes the modal\n    var span = document.getElementsByClassName(\"close\")[0];\n\n    // When the user clicks the button, open the modal \n    btn.onclick = function() {\n        modal.style.display = \"block\";\n    }\n\n    // When the user clicks on <span> (x), close the modal\n    span.onclick = function() {\n        modal.style.display = \"none\";\n    }\n\n    // When the user clicks anywhere outside of the modal, close it\n    window.onclick = function(event) {\n        if (event.target == modal) {\n            modal.style.display = \"none\";\n        }\n    }\n  </script>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Generate a code in C to check if a sentence is a palindrome.", "input": "char str[] = \"amanama\"", "output": "#include <stdio.h> \n#include <string.h> \n\n// Function to check if a string is palindrome \nbool isPalindrome(char str[]) \n{ \n\t// Start from leftmost and rightmost corners of str \n\tint l = 0; \n\tint h = strlen(str)-1; \n\n\t// Keep comparing characters while they are same \n\twhile (h > l) \n\t{ \n\t\tif (str[l++] != str[h--]) \n\t\t\treturn false; \n\t} \n\treturn true; \n} \n\n// Main function \nint main() \n{ \n\tchar str[] = \"amanama\"; \n\n\tif (isPalindrome(str)) \n\t\tprintf(\"Yes\"); \n\telse\n\t\tprintf(\"No\"); \n\n\treturn 0; \n}", "category": "Python"}, {"instruction": "Write pseudocode to sort a given list of integers using bubble sort.", "input": "", "output": "# Set a swap flag to true\nswap = true \n# While the flag is true\nwhile swap \n  # Set the swap flag to false\n  swap = false\n  # Iterate through the list\n  for i in range(len(list) - 1):\n    # Swap adjacent element if they are out of order\n    if list[i] > list[i + 1]:\n      temp = list[i]\n      list[i] = list[i + 1]\n      list[i + 1] = temp\n      # Set the flag back to true\n      swap = true", "category": "Python"}, {"instruction": "Write an algorithm in Python which reads a string and reorders it alphabetically.", "input": "string s = 'dcba'", "output": "def reorder_string(s):\n    s = sorted(s)\n    return ''.join(s)\n\nprint(reorder_string('dcba'))", "category": "Python"}, {"instruction": "Build a program in C++ which finds the largest element in an array.", "input": "int arr[] = {2, 3, 5, 8, 9}", "output": "#include <iostream> \nusing namespace std;\n\n// Finds the largest element in the array \nint findLargestElement(int arr[], int n) \n{ \n\t// Initialize maximum element \n\tint max = arr[0]; \n\n\t// Traverse array elements from second and \n\t// compare every element with current max \n\tfor (int i = 1; i < n; i++) \n\t\tif (arr[i] > max) \n\t\t\tmax = arr[i]; \n\n\treturn max; \n} \n\n// Driven program \nint main() \n{ \n\tint arr[] = {2, 3, 5, 8, 9}; \n\tint n = sizeof(arr) / sizeof(arr[0]); \n\t\n\tcout << \"Largest Element = \" << findLargestElement(arr, n); \n\t\n\treturn 0; \n}", "category": "Python"}, {"instruction": "Write a code to parse a JSON string into Python objects.", "input": "json_string = '{\"name\": \"John Doe\", \"age\": 42 }'", "output": "import json\n\njson_string = '{\"name\": \"John Doe\", \"age\": 42 }'\ndata = json.loads(json_string)\n\nprint(data['name']) # John Doe\nprint(data['age']) # 42", "category": "Python"}, {"instruction": "Write a function to compute a hash code for a string.", "input": "", "output": "def hash(string):\n    result = 0\n    for char in string:\n        result += ord(char)\n    return result", "category": "Python"}, {"instruction": "Write an SQL query to find the average, minimum, and maximum age of all users in the \"users\" table.", "input": "Table: Users\nColumns: id, name, age", "output": "SELECT AVG(age) as avg_age, MIN(age) as min_age, MAX(age) as max_age\nFROM Users;", "category": "Python"}, {"instruction": "Given a list of strings, write a program to combine them into one string with a space between each element.", "input": "lst = ['This', 'is', 'a', 'list', 'of', 'strings']", "output": "result = \" \".join(lst)\nprint(result) # This is a list of strings", "category": "Python"}, {"instruction": "Write a code snippet to delete all elements from a linked list.", "input": "", "output": "# Function to delete all the elements \n# of the linked list \ndef deleteList(head_node): \n    # Store head node \n    curr = head_node \n    prev = None\n\n    # Traverse the list and delete \n    # each node one by one \n    while(curr): \n        # Next node  \n        next = curr.next\n        # Free the current node \n        curr = None\n        # Update prev and curr node \n        prev = curr \n        curr = next", "category": "Python"}, {"instruction": "Write a SQL query to summarize the sales of each product.", "input": "Table: Sales\nColumns: product, quantity", "output": "SELECT product, SUM(quantity) AS total_sales\nFROM Sales\nGROUP BY product;", "category": "Python"}, {"instruction": "Construct a function in Java to validate whether an input integer is a prime number.", "input": "int n = 7", "output": "public static boolean isPrime(int n) \n{ \n    // Corner case \n    if (n <= 1) \n        return false; \n  \n    // Check from 2 to n-1 \n    for (int i = 2; i < n; i++) \n        if (n % i == 0) \n            return false; \n  \n    return true; \n}", "category": "Python"}, {"instruction": "Generate PHP code to validate a username and password.", "input": "", "output": "$userName = \"user123\";\n$password = \"12345\";\n\nif (empty($userName) || empty($password)) {\n    echo \"Error: username and password cannot be empty.\";\n    exit;\n} \n$valid = true;\nif (strlen($userName) < 5 || strlen($password) < 8) {\n    $valid = false;\n}\nif (preg_match('/[^a-zA-Z0-9_]/', $userName) || preg_match('/[^a-zA-Z0-9_]/', $password)) {\n    $valid = false;\n}\n \nif ($valid == false) {\n    echo \"Error: invalid username or password.\";\n    exit;\n}", "category": "Python"}, {"instruction": "Design a function with the following output.", "input": "", "output": "def sayHi(name):\n    print(\"Hi \"+name+\"! How are you today?\")", "category": "Python"}, {"instruction": "Edit the following code to make it run without errors.", "input": "def squared(num):\n    return num * num\n \nnum = 5\nprint(squared(5)", "output": "def squared(num):\n    return num * num\n \nnum = 5\nprint(squared(5))", "category": "Python"}, {"instruction": "Modify the following code to get the desired output.", "input": "for i in range(1, 7):\n    for j in range(1, i):\n        print(j)", "output": "for i in range(1, 7):\n    for j in range(1, i+1):\n        print(j, end=' ')\n    print()", "category": "Python"}, {"instruction": "Provide a function to find the length of a string.", "input": "", "output": "def length(s):\n    i = 0\n    for ch in s:\n        i += 1\n    return i", "category": "Python"}, {"instruction": "Create an algorithm to detect if a string is a palindrome or not.", "input": "", "output": "def isPalindrome(s): \n    reversedString = s[::-1] \n  \n    if (s == reversedString): \n        return True\n    return False", "category": "Python"}, {"instruction": "Construct a loop to output all the elements from a list.", "input": "['a', 'b', 'c', 'd']", "output": "for i in range(len(arr)):\n    print(arr[i])", "category": "Python"}, {"instruction": "Write a Java code to calculate the maximum value in an array.", "input": "", "output": "public static int getMax(int[] array) {\n  int max = array[0];\n  for (int i=1; i < array.length; i++) {\n    if (array[i] > max) {\n        max = array[i];\n    }\n  }\n  return max;\n}", "category": "Python"}, {"instruction": "Find the closest decimal approximation of 0.875.", "input": "", "output": "0.88", "category": "Python"}, {"instruction": "Read the given code block and debug it.", "input": "def main():\n print(\"Hey I'm here\")\n if n == 0: \n  print(\"Hey I'm there\")\nmain()", "output": "Error: n is not defined.\n\nThe given code is trying to use the variable n, which is not declared. To fix this, it should be declared before the if statement. The modified code is as follows:\n\ndef main():\n print(\"Hey I'm here\")\n n = 0\n if n == 0: \n  print(\"Hey I'm there\")\nmain()", "category": "Python"}, {"instruction": "Create a basic neural network model to distinguish between cats and dogs.", "input": "", "output": "Model Building Code:\nmodel = Sequential([\n    Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),\n    MaxPooling2D(2,2),\n    Conv2D(64, (3,3), activation='relu'),\n    MaxPooling2D(2,2),\n    Flatten(),\n    Dense(512, activation='relu'),\n    Dense(1, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])", "category": "Python"}, {"instruction": "Construct a for loop to show the multiplication table of 3.", "input": "", "output": "for(i=1;i<=10;i++) {\n  console.log(3 + \" x \" + i + \" = \" + (3 * i));\n}", "category": "Python"}, {"instruction": "You are given a list of items. Output a list of items and their respective frequencies.", "input": "[1,2,2,4,5,2,3,4,5,6]", "output": "1: 1\n2: 3\n3: 1\n4: 2\n5: 2\n6: 1", "category": "Python"}, {"instruction": "Build a regular expression to check if a string only contains numbers.", "input": "", "output": "^[0-9]+$", "category": "Python"}, {"instruction": "Write a database query to retrieve the names of all authors.", "input": "", "output": "SELECT name \nFROM authors;", "category": "Python"}, {"instruction": "Write a function that takes a sentence and returns the string with all occurrences of the longest word removed.", "input": "\"This is a very long sentence\"", "output": "def remove_longest_word(sentence): \n    # Split the sentence into words \n    words = sentence.split(' ')\n\n    # Find the longest word \n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word): \n            longest_word = word \n\n    # Remove all occurrences of the longest word\n    new_sentence = [] \n    for word in words:\n        if word != longest_word: \n            new_sentence.append(word) \n    \n    # Join the list back into a string and return it \n    return \" \".join(new_sentence)\n\nprint(remove_longest_word(\"This is a very long sentence\")) # This is a sentence", "category": "Python"}, {"instruction": "Create a function that takes a list of numbers and returns the index of the largest number.", "input": "[2, 5, 12, 3, 4]", "output": "def find_largest_number(nums): \n    # Initialize the index of the largest number.\n    largest_index = 0\n\n    # Loop through the list of numbers and\n    # compare each number to the other. \n    # Update the index of the largest number. \n    for i in range(len(nums)):\n        if nums[i] > nums[largest_index]:\n            largest_index = i\n    \n    # Return the index of the largest number.\n    return largest_index\n\nprint(find_largest_number([2, 5, 12, 3, 4])) # 2", "category": "Python"}, {"instruction": "How would you modify the following code to make it more efficient?", "input": "def find_word(word, text):\n    if word in text:\n        return \"Word found\"\n    else:\n        return \"Word not found\"", "output": "def find_word(word, text):\n    # Use the 'in' operator to check if the word is in the text\n    if word in text:\n        return \"Word found\"\n    else:\n        return \"Word not found\"\n\n# Use the 'count' method to check if the word is in the text more efficiently\nif text.count(word) > 0:\n    return \"Word found\"\nelse:\n    return \"Word not found\"", "category": "Python"}, {"instruction": "Write a function that takes in two strings as input and outputs True if they are anagrams, False otherwise.", "input": "s1 = \u201csilent\u201d\ns2 = \u201clisten\u201d", "output": "def anagrams(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    s1_arr = list(s1)\n    s2_arr = list(s2)\n    s1_arr.sort()\n    s2_arr.sort()\n    for i in range(len(s1_arr)):\n        if s1_arr[i] != s2_arr[i]:\n            return False\n    return True", "category": "Python"}, {"instruction": "Generate a sentence using the given array of words:", "input": "arr = ['This', 'is', 'a', 'sentence']", "output": "This is a sentence.", "category": "Python"}, {"instruction": "Swap the contents of two variables.", "input": "a = 10\nb = 15", "output": "a, b = b, a", "category": "Python"}, {"instruction": "Generate a function which will validate a phone number using regular expression.", "input": "", "output": "def validate_phone(phone_number):\n    regex = '^\\+?(\\d[\\d-. ]+)?(\\([\\d-. ]+\\))?[\\d-. ]+\\d$'\n    if re.match(regex, phone_number):\n        return True\n    return False", "category": "Python"}, {"instruction": "Construct a class to represent a student", "input": "", "output": "class Student():\n  def __init__(self, first_name, last_name, email, street, city, state, zip_code):\n    self.first_name = first_name\n    self.last_name = last_name\n    self.email = email\n    self.street = street\n    self.city = city\n    self.state = state\n    self.zip_code = zip_code\n  \n  def change_email(self, new_email):\n    self.email = new_email", "category": "Python"}, {"instruction": "Compute the sum of two given lists", "input": "[2,3,4], [1,2,3]", "output": "def sum_lists(lst1, lst2):\n    \"\"\"\n    Compute the sum of two given lists.\n    \"\"\"\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i] + lst2[i])\n    return new_list\n\nlst1 = [2,3,4]\nlst2 = [1,2,3]\nsum_lst = sum_lists(lst1, lst2)\nprint(sum_lst)", "category": "Python"}, {"instruction": "Implement a non-recursive algorithm to compute the factorial of a given number", "input": "7", "output": "def factorial(n): \n    res = 1 \n    # Calculate value of \n    # factorial in for loop \n    for i in range(2,n+1): \n        res = res * i \n    return res \n\nn = 7\nprint(\"Factorial of\",n,\"is\",factorial(n))", "category": "Python"}, {"instruction": "Create an SQL query to select all records from a table", "input": "", "output": "SELECT * FROM table_name;", "category": "Python"}, {"instruction": "Return a new array after removing duplicates from a given array.", "input": "[1, 2, 3, 2, 3, 4]", "output": "def remove_duplicates(arr):\n    \"\"\"\n    Return a new array after removing duplicates from a given array.\n    \"\"\"\n    new_arr = []\n    for num in arr:\n        if num not in new_arr:\n            new_arr.append(num)\n    return new_arr\n\narr = [1, 2, 3, 2, 3, 4]\nnew_arr = remove_duplicates(arr)\nprint(new_arr)", "category": "Python"}, {"instruction": "Create a set of webhook functions in Node.js", "input": "", "output": "/* Node.js webhook functions */\n\nconst express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\n\n// Init express\nconst app = express();\n\n// Add body parser\napp.use(bodyParser.json());\n\n// Create webhook functions\nconst webhooks = {\n  // Create a webhook for an event\n  onEvent: (req, res) => {\n    // Handle request\n  },\n  // Create a webhook for an action\n  onAction: (req, res) => {\n    // Handle request\n  },\n  // Create a webhook for a job\n  onJob: (req, res) => {\n    // Handle request\n  }\n};\n\n// Add webhook handlers\nObject.keys(webhooks).forEach(hook => {\n  app.post(`/hooks/${hook}`, webhooks[hook]);\n});\n\n// Start server\napp.listen(3000);", "category": "Python"}, {"instruction": "Return the index of a given value in a list.", "input": "[1,2,3], 3", "output": "def find_index(lst, value):\n    \"\"\"\n    Return the index of a given value in a list.\n    \"\"\"\n    for i, v in enumerate(lst):\n        if v == value:\n            return i\n    return -1\n\nlst = [1,2,3]\nval = 3\nfind_index(lst, val)", "category": "Python"}, {"instruction": "Create a function that takes two strings and returns a new string containing the first three characters of each string combined.", "input": "\"Hello\"\n\"World\"", "output": "def combine_first_three(string1, string2): \n    # Get the first three characters of each string \n    string1 = string1[:3]\n    string2 = string2[:3]\n\n    # Combine the first three characters of each string \n    combined_string = string1 + string2\n\n    # Return the new string \n    return combined_string\n\nprint(combine_first_three(\"Hello\", \"World\")) # HelWor", "category": "Python"}, {"instruction": "Generate a list comprehension that has the multiples of 3 between 0 and 30", "input": "", "output": "multiples_of_3 = [x for x in range(0, 31) if x % 3 == 0]", "category": "Python"}, {"instruction": "Find the minimum of two given numbers.", "input": "4, 6", "output": "def min_two(a, b):\n  if a < b:\n    return a\n  else:\n    return b\n\nmin_val = min_two(4, 6)\nprint(min_val)", "category": "Python"}, {"instruction": "Implement the code in the input to the output", "input": "def do_something(data):\n    # TODO: Your code here\n    pass", "output": "def do_something(data):\n    # Your code here\n    result = 1\n    for num in data:\n        result *= num\n    return result", "category": "Python"}, {"instruction": "Create a class that creates a stack object and implements push and pop functions", "input": "", "output": "class Stack: \n\tdef __init__(self): \n\t\tself.stack = [] \n\n\t# This method adds an element at the top of the stack \n\tdef push(self, item): \n\t\tself.stack.append(item) \n \n\t# This method removes the topmost element and returns it \n\tdef pop(self): \n\t\tif self.is_empty(): \n\t\t\treturn None\n\t\treturn self.stack.pop() \n  \n\t# This method returns the topmost element without removing it \n\tdef peek(self): \n\t\tif self.is_empty(): \n\t\t\treturn None\n\t\treturn self.stack[-1] \n  \n\t# This method returns true or false depending on whether the stack is empty or not \n\tdef is_empty(self): \n\t\treturn len(self.stack) == 0", "category": "Python"}, {"instruction": "Reverse the string given in the input", "input": "Hello world", "output": "s = \"Hello world\" \ns = s[::-1] \nprint(s)", "category": "Python"}, {"instruction": "Generate a list that has the all even numbers between 1 and 50, inclusive.", "input": "", "output": "even_nums_list = [x for x in range(1,51) if x % 2 == 0]", "category": "Python"}, {"instruction": "Write a function to return the index of an item in an array.", "input": "arr = [1, 2, 3, 4, 5]\nx = 4", "output": "def index(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Modify the given code to multiply two n x n matrices.", "input": "def multiply(m1, m2, n):\n    result = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        for j in range(n): \n            result[i][j] = 0", "output": "def multiply(m1, m2, n):\n    result = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                result[i][j] += m1[i][k] * m2[k][j]\n    return result", "category": "Python"}, {"instruction": "Sort the given array using insertion sort", "input": "[5, 1, 4, 2, 8]", "output": "def insertion_sort(arr):\n    \"\"\"\n    Sort given array using insertion sort\n    \"\"\"\n    # Traverse through the array \n    for i in range(1, len(arr)): \n        key = arr[i] \n  \n        # Move elements of arr[0..i-1], that are \n        # greater than key, to one position ahead \n        # of their current position \n        j = i - 1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \n    return arr\n\narr = [5, 1, 4, 2, 8]\nsorted_arr = insertion_sort(arr)\nprint(sorted_arr)", "category": "Python"}, {"instruction": "Create a function to compute the square root of a given number", "input": "9", "output": "def sqrt(n):\n    \"\"\"\n    Compute the square root of a given number\n    \"\"\"\n    r = n\n    while r*r > n:\n        r = (r + n/r) // 2\n    return r\n\nn = 9\nval = sqrt(n)\nprint(val)", "category": "Python"}, {"instruction": "Create a function that takes the string of the current time and returns the time in minutes.", "input": "\"12:30PM\"", "output": "def convert_to_minutes(time): \n    # Split the time into hours and minutes \n    h, m = map(int, time.split(':'))\n\n    # Add 12 to the hours if the time is PM \n    if time.endswith('PM'): \n        h += 12\n    return h * 60 + m\n\nprint(convert_to_minutes(\"12:30PM\")) # 750", "category": "Python"}]
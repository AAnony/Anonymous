[{"instruction": "Write a C++ program to print the following pattern.\n\n1 \n1 2 \n1 2 3 \n1 2 3 4", "input": "", "output": "#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n    for (int i = 1; i <= 4; i++) {\n        for (int j = 1; j <= i; j++) {\n            cout << j << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}", "category": "Python"}, {"instruction": "Design a relational database schema for a library that stores book information such as title, subject, and author.", "input": "", "output": "The relational database schema can be designed as follows:\n\nBook: \n- book_id (primary key) \n- title \n- subject \n- author \n\nAuthor: \n- author_id (primary key) \n- name \n- email \n\nBook_Author_Relationship: \n- book_id (foreign key of Book) \n- author_id (foreign key of Author)", "category": "Python"}, {"instruction": "Parse the following XML document and print out the 'name' fields of all the nodes.", "input": "<root>\n    <node>\n        <name>Foo</name>\n        <age>25</age>\n    </node>\n    <node>\n        <name>Bar</name>\n        <age>30</age>\n    </node>\n</root>", "output": "import xml.etree.ElementTree as ET\n\ntree = ET.parse('document.xml')\nroot = tree.getroot()\n\nfor node in root.findall('node'):\n    name = node.find('name').text\n    print(name)", "category": "Python"}, {"instruction": "Extend the following python code to include a new field 'type' with the value 'dog'.", "input": "animal = {\n 'name': 'Rex',\n 'age': 10\n}", "output": "animal = {\n 'name': 'Rex',\n 'age': 10,\n 'type': 'dog'\n}", "category": "Python"}, {"instruction": "Create a function that takes a string and an integer as input and returns the string repeated n times.", "input": "", "output": "def repeat_string(string, n):\n    \"\"\"\n    This function takes a string and an integer as input and returns the \n    string repeated n times.\n\n    Parameters:\n    string (string): The string that needs to be repeated.\n    n (int): The number of times the string needs to be repeated.\n\n    Returns:\n    string: The repeated string\n    \"\"\"\n    return string * n", "category": "Python"}, {"instruction": "Add the following line to the top of this Python code to make it syntactically correct.", "input": "begin\ndef test_it();\n    print(\"This is a test\")", "output": "# Add the following line to the top of this Python code to make it syntactically correct.\ndef test_it():\n    print(\"This is a test\")", "category": "Python"}, {"instruction": "Create a function that shifts an array by k positions to the right.", "input": "arr = [1, 2, 3, 4, 5]\nk = 3", "output": "def shift_array(arr, k): \n    k %= len(arr)\n    return arr[-k:] + arr[:-k]", "category": "Python"}, {"instruction": "Create a function that takes three parameters, a start number, an end number, and a step. It should return a list containing all the numbers between the start and end numbers in steps of the given size.", "input": "start = 0\nend = 10\nstep = 2", "output": "def create_list(start, end, step): \n    list = [] \n    while start < end: \n        list.append(start) \n        start += step \n    return list", "category": "Python"}, {"instruction": "Suggest a way to format a date string in Lua.", "input": "", "output": "In Lua, date strings can be formatted using os.date(). For example, the following code will give the date string in the format \"YYYY-MM-DD\":\n\ndateString = os.date(\"%Y-%m-%d\")", "category": "Python"}, {"instruction": "Suggest a way to comment out a block of code in C++.", "input": "", "output": "A block of code can be commented out in C++ by enclosing it within /* and */, as shown below:\n\n/* \n[block of code]\n*/", "category": "Python"}, {"instruction": "Generate valid SQL to create a table with two columns, id and name.", "input": "", "output": "CREATE TABLE myTable(\n    id INT NOT NULL, \n    name VARCHAR(255)\n);", "category": "Python"}, {"instruction": "How do you define a JavaScript class?", "input": "", "output": "In JavaScript, a class is defined using the class keyword. The class definition consists of a constructor method, which is called automatically when an instance of the class is created, and other methods which can be called on the instance.\n```\nclass MyClass{\n    constructor(){\n        //Constructor code\n    }\n    //Class methods\n}\n```", "category": "Python"}, {"instruction": "Write a C++ program to declare and initialize a two-dimensional array of numbers.", "input": "", "output": "int arr[3][3] = {{1,2,3}, {4,5,6}, {7,8,9}};", "category": "Python"}, {"instruction": "Generate a valid HTML tag that can be used to link to an external website.", "input": "", "output": "<a href=\"http://example.com\" target=\"_blank\">Link to Website</a>", "category": "Python"}, {"instruction": "Create a function to split a string into substrings based on a given separator.", "input": "string = \"apple,banana,cherry\"", "output": "def split_string(string, separator):\n    return string.split(separator)", "category": "Python"}, {"instruction": "Create an array of 5 Strings: \"Apple\", \"Banana\", \"Orange\", \"Lemon\" and \"Grape\".", "input": "", "output": "my_array = [\"Apple\", \"Banana\", \"Orange\", \"Lemon\", \"Grape\"]", "category": "Python"}, {"instruction": "Create an interface in C++ with two methods, one that takes an integer and one that takes a string.", "input": "", "output": "class Interface\n{\n  public:\n    virtual int Method1(int x) = 0;\n    virtual std::string Method2(std::string s) = 0;\n};", "category": "Python"}, {"instruction": "Edit the following HTML list by adding another item, number 4.", "input": "<ul>\n  <li>item 1</li>\n  <li>item 2</li>\n  <li>item 3</li>\n</ul>", "output": "<ul>\n  <li>item 1</li>\n  <li>item 2</li>\n  <li>item 3</li>\n  <li>item 4</li>\n</ul>", "category": "Python"}, {"instruction": "Construct an object in JavaScript where the key is an integer from 1 to 10 and the value is a boolean representing if it is an even number or not.", "input": "", "output": "let obj = {\n  1: false,\n  2: true,\n  3: false,\n  4: true,\n  5: false,\n  6: true,\n  7: false,\n  8: true,\n  9: false,\n  10: true\n};", "category": "Python"}, {"instruction": "Write a MySQL query to select records that are older than 3 months and younger than 5 years.", "input": "", "output": "SELECT * FROM records WHERE age > 3*30*24*60*60 AND age < 5*12*30*24*60*60;", "category": "Python"}, {"instruction": "Create a HTML form that contains 3 fields (name, email and address).", "input": "", "output": "<form action=\"\">\n  <label for=\"name\">Name: </label>\n  <input type=\"text\" name=\"name\" id=\"name\" />\n  <label for=\"email\">Email: </label>\n  <input type=\"text\" name=\"email\" id=\"email\" />\n  <label for=\"address\">Address: </label>\n  <input type=\"text\" name=\"address\" id=\"address\" />\n  <button type=\"submit\">Submit</button>\n</form>", "category": "Python"}, {"instruction": "You are requested to implement a function that takes an array of integers and returns the sum of the array.", "input": "int[] array = {1, 2, 3, 4, 5};", "output": "public static int getArraySum(int[] array) {\n    int total = 0;\n    for (int element : array) {\n        total += element;\n    }\n    return total;\n}", "category": "Python"}, {"instruction": "Suppose you have a React component named 'Navbar' and you need to add a new prop named 'isOpen'. Please write the code to for this.", "input": "", "output": "const Navbar = (props) => {\n  return (\n    <nav isOpen={props.isOpen}>\n      {/* Content of the navbar component */}\n    </nav>\n  )\n}", "category": "Python"}, {"instruction": "Write a function to add one to every element in an array of integers.", "input": "arr = [1,3,5,7]", "output": "def add_one(arr): \n    for i in range(len(arr)): \n        arr[i] += 1 \n    return arr", "category": "Python"}, {"instruction": "Rewrite the following JavaScript code to use arrow functions instead of regular functions.", "input": "function sum(a, b) {\n    return a + b;\n}", "output": "const sum = (a, b) => a + b;", "category": "Python"}, {"instruction": "Create a sorting algorithm that sorts an array from lowest to highest numbers using the bubble sort approach.", "input": "[5, 1, 7, 3, 2]", "output": "def bubblesort(arr):\n    for i in range(len(arr)-1, 0, -1): \n        for j in range(i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\nmy_list = [5, 1, 7, 3, 2]  \nbubblesort(my_list) \nprint(my_list)\n# Output: [1, 2, 3, 5, 7]", "category": "Python"}, {"instruction": "Mix the given list of numbers in a random order", "input": "[5, 1, 7, 3, 2]", "output": "import random\n\nmy_list = [5, 1, 7, 3, 2]\nrandom.shuffle(my_list)\nprint(my_list)  #Output: [7, 2, 5, 1, 3]", "category": "Python"}, {"instruction": "Write a PHP script to display the system environment variables.", "input": "", "output": "<?php\n\n$env_vars = array_keys($_ENV);\n\nforeach ($env_vars as $variable)\n{\n    echo $variable . \" = \" . $_ENV[$variable] . \"<br>\";\n}\n\n?>", "category": "Python"}, {"instruction": "Design a data visualization to show the average salary per gender", "input": "", "output": "import matplotlib.pyplot as plt\n  \nmale_salaries = [3000, 3500, 3000, 3500, 4000] \nfemale_salaries = [2500, 3000, 2500, 3000, 3500] \n  \nplt.bar(range(len(male_salaries)), male_salaries, width=0.35, \n            label='Male Salaries') \n  \nplt.bar([x+0.35 for x in range(len(female_salaries))], \n            female_salaries, width=0.35, \n            label='Female Salaries') \n  \nplt.xlabel('Employee') \nplt.ylabel('Salaries') \nplt.title('Salaries per Gender') \nplt.legend(loc=\"upper right\") \nplt.show()", "category": "Python"}, {"instruction": "Construct an API using Flask that returns an array of integers in response to a request", "input": "", "output": "from flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/api/v1/get_data', methods=['GET'])\ndef get_data():\n    data = [1, 2, 3, 4, 5]\n    return jsonify(data)\n\nif __name__ == '__main__':\n    app.run()", "category": "Python"}, {"instruction": "Generate a random sample of size 10 using numpy", "input": "", "output": "import numpy as np\n\nrand_sample = np.random.randint(low=0, high=100, size=10)", "category": "Python"}, {"instruction": "Write a Java program to produce Fibonacci numbers up to a given number", "input": "", "output": "public class Fibonacci {\n    public static void main(String[] args) {\n        int limit = 10;\n        System.out.print(\"Fibonacci Series of \"+limit+\" numbers: \");\n        for(int i=0; i<limit; i++){\n            System.out.print(fibonacci(i)+\" \");\n        }\n    }\n \n    public static int fibonacci(int number){\n        if(number==0 || number==1){\n            return number;\n        }\n \n        return fibonacci(number-1) + fibonacci(number-2);\n    }\n}", "category": "Python"}, {"instruction": "Categorize the words from the list [\"Apple\", \"Carrot\", \"Banana\", \"Tomato\", \"Lemon\"]", "input": "", "output": "Fruits: Apple, Banana, Lemon\nVegetables: Carrot, Tomato", "category": "Python"}, {"instruction": "Implement an algorithm to select k elements from an array such that the sum of those elements is maximized", "input": "", "output": "def maximize_sum(arr, k):\n    arr.sort()\n    result = 0\n    for i in range(len(arr)-1, len(arr)-k-1, -1):\n        result += arr[i]\n    return result", "category": "Python"}, {"instruction": "Write a SQL query to calculate the number of days between two date fields", "input": "", "output": "SELECT DATEDIFF(date_field_2, date_field_1) AS Days_Difference \nFROM table;", "category": "Python"}, {"instruction": "Create an algorithm to find the longest continuous increasing subarray.", "input": "", "output": "def longestIncreasingSubarray(arr):\n    n = len(arr)\n    max_len = 1\n    curr_len = 1\n    for i in range(1, n): \n     \n        #if current element is greater than its previous element \n        if (arr[i] > arr[i-1]):\n            curr_len += 1\n        else:\n            if (curr_len > max_len):\n                max_len = curr_len\n            curr_len = 1\n    #Compare the length of the last \n    #subarray with max_len and \n    #update max_len if needed \n    if (curr_len > max_len):\n        max_len = curr_len \n    \n    return max_len", "category": "Python"}, {"instruction": "Build a JavaScript program to compute the largest prime number less than a given number N", "input": "", "output": "function largestPrime(N){\n    let max_prime = -1;\n    for(let i = 2; i <= N; i++) {\n        if (isPrime(i) && i > max_prime)\n            max_prime = i;\n    } \n    return max_prime;\n}\n\nfunction isPrime(number){\n    for (let i = 2; i < Math.sqrt(number); i++) {\n        if (number % i == 0)\n            return false;\n    }\n    return true;\n}", "category": "Python"}, {"instruction": "Edit the following Java program to add a method printMyName. The method should print your name.", "input": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n }", "output": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n        printMyName();\n    }\n    public static void printMyName(){\n        System.out.println(\"John Doe\");\n    }\n }", "category": "Python"}, {"instruction": "Implement a function that takes two parameters, an array and a value, and returns true if the array contains the value and false if it does not.", "input": "let myArray = [1, 2, 3, 4, 5];\nlet myValue = 3;", "output": "def containsValue(arr, value):\n    for item in arr:\n        if item == value:\n            return True\n    return False\n\nprint(containsValue(myArray, myValue))", "category": "Python"}, {"instruction": "Print the second half of the given string.", "input": "let my_string = \"How are you doing today?\"", "output": "let second_half = my_string.substring(my_string.length / 2);\nconsole.log(second_half);", "category": "Python"}, {"instruction": "Determine and output the last occurence of the given number in an array.", "input": "let my_array = [2, 4, 8, 6, 2];\nlet my_number = 2;", "output": "let index = my_array.lastIndexOf(my_number);\nconsole.log(index);", "category": "Python"}, {"instruction": "Using the given data, calculate and output the maximum values of each row.", "input": "let my_data = [[1, 10, 2], [12, 4, 9], [5, 3, 7]];", "output": "let result = [];\n\nfor (let i = 0; i < my_data.length; i++) {\n    let max_val = 0;\n    for (let j = 0; j < my_data[i].length; j++) {\n        if (my_data[i][j] > max_val) {\n            max_val = my_data[i][j];\n        }\n    }\n    result.push(max_val);\n}\n\nconsole.log(result);", "category": "Python"}, {"instruction": "Create a for loop which iterates through the given list and prints the value of each item.", "input": "let myList = [3, 5, 7, 9];", "output": "for (let item of myList) {\n    console.log(item);\n}", "category": "Python"}, {"instruction": "Rewrite the following Java for loop for producing the same results in a more efficient way.", "input": "int total = 0;\n\nfor (int i = 0; i < 100000000; i++) {\n   total += i;\n}", "output": "int total = 0;\n\nfor (int i = 0; i <= 100000000-1; i+=2){\n    total += (i + (i + 1));\n}", "category": "Python"}, {"instruction": "Design a Python class structure for playing cards with two classes: Deck and Card.", "input": "", "output": "class Deck: \n    def __init__(self):\n        self.cards = []\n    \n    def populate(self):\n        suits = ['Hearts', 'Spades', 'Clubs', 'Diamonds']\n        numbers = [2,3,4,5,6,7,8,9,10,'Jack','Queen','King','Ace']\n\n        for suit in suits:\n            for number in numbers:\n                self.cards.append(Card(suit, number))\n\n    def shuffle(self):\n        random.shuffle(self.cards)\n        \n    def deal(self):\n        card = self.cards.pop()\n        return card\n \nclass Card:\n    def __init__(self, suit, number):\n        self.suit = suit\n        self.number = number", "category": "Python"}, {"instruction": "Write a SQL query for finding records where the sales amount is greater than 1000.", "input": "", "output": "SELECT * \nFROM sales \nWHERE sales_amount > 1000;", "category": "Python"}, {"instruction": "Suggest three methods for removing duplicate elements from an array in JavaScript.", "input": "", "output": "Three methods for removing duplicate elements from an array in JavaScript are:\n1. Using the Set object: The Set object lets you store unique values of any type, escluding duplicate values.\n2. Using the filter method: The filter method creates a new array with all elements that pass the test implemented by the provided function.\n3. Using the reduce method: The reduce method applies a function to each element in the array to reduce it to a single value. The function needs to return a new value every time it is called.", "category": "Python"}, {"instruction": "Put the following JavaScript snippet into Standard Form.", "input": "onMouseOver=\"this.style.cursor='pointer'\"", "output": "this.addEventListener(\"mouseover\", function() {\n   this.style.cursor = \"pointer\";\n});", "category": "Python"}, {"instruction": "Using Perl, use a regular expression to search for any email addresses in a given line of text.", "input": "Please contact info@example.com for more information.", "output": "/(\\S+)@(\\S+)/", "category": "Python"}, {"instruction": "Use HTML and CSS to format a page with three columns, two of which contain two paragraphs each and the last containing a list of 10 items.", "input": "", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>3 Column Layout</title>\n  <style>\n    body {\n      width: 1000px;\n      margin: 0 auto;\n    }\n    .column-left {\n      float: left;\n      width: 33%;\n    }\n    .column-center {\n      float: left;\n      width: 33%;\n    }\n    .column-right {\n      float: left;\n      width: 33%;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"column-left\">\n    <p>Paragraph 1</p>\n    <p>Paragraph 2</p>\n  </div>\n  <div class=\"column-center\">\n    <p>Paragraph 3</p>\n    <p>Paragraph 4</p>\n  </div>\n  <div class=\"column-right\">\n    <ul>\n      <li>Item 1</li>\n      <li>Item 2</li>\n      <li>Item 3</li>\n      <li>Item 4</li>\n      <li>Item 5</li>\n      <li>Item 6</li>\n      <li>Item 7</li>\n      <li>Item 8</li>\n      <li>Item 9</li>\n      <li>Item 10</li>\n    </ul>\n  </div>\n</body>\n</html>", "category": "Python"}, {"instruction": "Use TensorFlow to build a multi-layer perceptron to classify the MNIST digits.", "input": "", "output": "import tensorflow as tf\nimport numpy as np\n\n# Hyperparameters\nn_inputs = 784  # MNIST\nn_hidden1 = 512\nn_hidden2 = 256\nn_outputs = 10\n\n# Build a model\nX = tf.placeholder(tf.float32, shape=(None, n_inputs), name=\"X\")\ny = tf.placeholder(tf.int64, shape=(None), name=\"y\")\n\nwith tf.name_scope(\"dnn\"):\n    hidden1 = tf.layers.dense(X, n_hidden1, name=\"hidden1\",\n                              activation=tf.nn.relu)\n    hidden2 = tf.layers.dense(hidden1, n_hidden2, name=\"hidden2\",\n                              activation=tf.nn.relu)\n    logits = tf.layers.dense(hidden2, n_outputs, name=\"outputs\")", "category": "Python"}, {"instruction": "Create an object-oriented JavaScript class for a Person that stores a first and last name.", "input": "", "output": "class Person {\n  constructor(firstName, lastName) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n  }\n}", "category": "Python"}, {"instruction": "Calculate the frequency of occurrence of each letter in a word.", "input": "word = \"programming\"", "output": "def frequency_count(word):\n    # dictionary to store the frequency of occurrence\n    frequency = {}\n\n    # iterate through each character\n    for char in word:\n        # if the character is present in the frequency dictionary\n        if char in frequency:\n            # increase the count of the character\n            frequency[char] += 1\n        else:\n            # add the character to the dictionary and set its count to 1\n            frequency[char] = 1\n\n    return frequency\n\n# Calculate the frequency of occurrence\nfrequencies = frequency_count(word)\nprint(frequencies) # Output: {'p': 1, 'r': 2, 'o': 2, 'g': 2, 'a': 1, 'm': 1, 'i': 1, 'n': 1}", "category": "Python"}, {"instruction": "Detect if a particular character is included in a string or not.", "input": "string = \"Hello World!\"\ncharacter = '!'", "output": "def character_check(string, character):\n    if character in string:\n        return True\n    else:\n        return False\n\ncheck = character_check(string, character)\nprint(check) # Output: True", "category": "Python"}, {"instruction": "Using a loop and a conditional statement in Python, check if the number is a prime number.", "input": "let number = 13;", "output": "def is_prime(number):\n    if (number <= 1):\n        return False\n    if (number <= 3):\n        return True\n\n    if (number % 2 == 0 or number % 3 == 0):\n        return False\n\n    i = 5\n    while (i * i <= number):\n        if (number % i == 0 or number % (i + 2) == 0):\n            return False\n        i +=6\n\n    return True", "category": "Python"}, {"instruction": "Write code to replace the first letter of a string with an underscore (_).", "input": "string = \"Hello World!\"", "output": "string = list(string)\nstring[0] = '_'\nstring = ''.join(string)\nprint(string) # Output: _ello World!", "category": "Python"}, {"instruction": "Write a Python script that prints out all of the letters of the alphabet one per line.", "input": "", "output": "for letter in 'abcdefghijklmnopqrstuvwxyz':\n    print(letter)", "category": "Python"}, {"instruction": "Write a Python script to compare two lists and print out missing and same elements.", "input": "list1 = [1, 2, 3, 4]\nlist2 = [2, 3, 4, 5]", "output": "same_elements = []\nmissing_elements = []\n\nfor i in list1:\n  if i in list2:\n   same_elements.append(i)\n  else:\n    missing_elements.append(i)\n\nfor i in list2:\n  if i not in list1:\n    missing_elements.append(i)\n\nprint(\"Same elements:\",same_elements)\nprint(\"Missing elements:\",missing_elements)\n# Output: Same elements: [2, 3, 4] \n#        Missing elements: [1, 5]", "category": "Python"}, {"instruction": "Write a query to find users who have more than 5 posts in a table.", "input": "", "output": "SELECT \n  user_id, COUNT(*) AS num_posts \nFROM\n  table\nGROUP BY \n  user_id\nHAVING \n  COUNT(*) > 5", "category": "Python"}, {"instruction": "Write a SQL query to find the average number of 'likes' for each post in a table.", "input": "", "output": "SELECT \n  post_id, AVG(likes) AS avg_likes \nFROM \n  table\nGROUP BY\n  post_id", "category": "Python"}, {"instruction": "Create a function to identify leap years in JavaScript.", "input": "", "output": "function isLeapYear(year) {\n  return (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));\n}", "category": "Python"}, {"instruction": "Write a SQL query to find the rows in a table where the value of the 'parent_id' column is greater than the minimum value of the 'id' column.", "input": "", "output": "SELECT \n  * \nFROM \n  table \nWHERE \n  parent_id > (SELECT MIN(id) FROM Table)", "category": "Python"}, {"instruction": "Write a JavaScript function to find the first three common numbers in three arrays.", "input": "Array A: [2, 3, 5, 6, 7, 9]\nArray B: [5, 7, 10, 11, 15]\nArray C: [7, 9, 10, 11, 12]", "output": "function findCommonNumbers(arrA, arrB, arrC) { \n  let common = []; \n  \n  for (let i=0; i < arrA.length; i++) { \n    if (arrB.includes(arrA[i]) && arrC.includes(arrA[i])) { \n      common.push(arrA[i]); \n    } \n    if (common.length === 3) { \n      break; \n    } \n  } \n  return common; \n} \n \nlet arrayA = [2, 3, 5, 6, 7, 9]\nlet arrayB = [5, 7, 10, 11, 15]\nlet arrayC = [7, 9, 10, 11, 12]\n  \nconsole.log(findCommonNumbers(arrayA, arrayB, arrayC)); \n// Output: [5, 7, 9]", "category": "Python"}, {"instruction": "Convert a string into list of characters.", "input": "string = \"Hello World!\"", "output": "char_list = list(string)\nprint(char_list) # Output: ['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!']", "category": "Python"}, {"instruction": "Using Node.js, create a function to take a JSON string and return a JavaScript object.", "input": "", "output": "function parseJSONString(jsonString) {\n  return JSON.parse(jsonString);\n}", "category": "Python"}, {"instruction": "Determine the maximum sum of a subarray within the given array.", "input": "[-2, 1, -3, 4, -1, 2, 1, -5, 4].", "output": "let max_sum = 0;\nlet current_sum = 0;\n\nfor (let i=0; i < arr.length; i++)\n{\n    current_sum += arr[i];\n    \n    if (current_sum < 0)\n        current_sum = 0;\n        \n    max_sum = Math.max(current_sum, max_sum);\n}\n\nconsole.log(max_sum);", "category": "Python"}, {"instruction": "Replace the commented out code with a single line of code that calcultes the product of all elements in the array.", "input": "let my_array = [4, 5, 6];\n// let product = 1;\n// for (let i = 0; i < my_array.length; i ++ ){\n//     product *= my_array[i];\n// }", "output": "let my_array = [4, 5, 6];\nlet product = my_array.reduce((acc, cur) => acc * cur);", "category": "Python"}, {"instruction": "Write a web scraping program to extract text from a given webpage", "input": "", "output": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'url_of_webpage'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\ntext = soup.find_all(text=True)\n\nfor t in text:\n print(t)", "category": "Python"}, {"instruction": "Summarize the given text in 3-5 sentences.", "input": "REST is an architectural style that defines a set of constraints and properties based on HTTP. It basically uses HTTP for communication between services. It stands for Representational State Transfer, and defines the various ways by which services can provide data and be interacted with.", "output": "#Summarize the given text in 3-5 sentences\n\nREST (Representational State Transfer) is an architecture style used to communicate between services over HTTP. It is composed of a set of constraints and properties that define how the services communicate and exchange data. REST is useful in implementing a distributed system, as it follows client-server model of communication and thus, simplifies the interaction between different services. Furthermore, REST is a stateless protocol, meaning that the server does not store any state about the client session. Instead, each request and responses are self-contained, eliminating the need to maintain any client-specific state.", "category": "Python"}, {"instruction": "Write a function that takes two parameters, a list and a number. If a number is found in the list, the function should return its index, else it should return -1.", "input": "[1, 2, 3, 4, 9], 2", "output": "#Write a function that takes two parameters, a list and a number.\ndef find_number(list_num, num):\n    '''This function takes in a list of numbers and \na number and returns the index of the number if it is found, \nelse return -1.'''\n    \n    # Traverse through the list\n    for i in range(len(list_num)):\n        # If the number is found\n        if list_num[i] == num:\n            # return its index\n            return i\n    # Number not found\n    return -1", "category": "Python"}, {"instruction": "Change the given code so that it prints the sentence \"Hello, World!\"", "input": "print(\"Goodbye, World!\")", "output": "#Change the given code so that it prints the sentence \"Hello, World!\"\n\nprint(\"Hello, World!\")", "category": "Python"}, {"instruction": "Implement a function that takes in 2 strings and returns a new string consisting of alternating characters from the strings passed in.", "input": "\"hello\"\n\"world\"", "output": "#Implement a function that takes in 2 strings and returns a new string consisting of alternating characters\ndef alt_string(str1, str2):\n    alt_str = \"\" \n    length = len(str1) if len(str1) <= len(str2) else len(str2)\n    \n    for i in range(length):\n        alt_str += str1[i] + str2[i]\n    \n    if len(str1) > len(str2):\n        alt_str += str1[length:]\n    elif len(str2) > len(str1):\n        alt_str += str2[length:]\n    \n    return alt_str", "category": "Python"}, {"instruction": "Use the given dictionary to find the value for the key \"city\".", "input": "{\"name\": \"John Smith\",\n \"age\": 42,\n \"city\": \"Los Angeles\"}", "output": "#Use the given dictionary to find the value for the key \"city\"\n\ndictionary = {\"name\": \"John Smith\", \"age\": 42, \"city\": \"Los Angeles\"}\n\ncity = dictionary[\"city\"]\n\nprint(\"The value for the key city is: \" + city)", "category": "Python"}, {"instruction": "Generate a regular expression to match a string which contains only digits.", "input": "", "output": "^\\d+$", "category": "Python"}, {"instruction": "Find the maximum sum of a subarray of size 'k' in a given array.", "input": "arr = [1, 4, 2, 10, 23, 3, 1, 0, 20]\nk = 4", "output": "def max_sum_subarray(arr, k):\n    max_sum = 0\n    for i in range(len(arr) - k + 1):\n        curr_sum = 0\n        for j in range(i, i + k):\n            curr_sum += arr[j]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum", "category": "Python"}, {"instruction": "Create a function to check the validity of an email address.", "input": "", "output": "def validate_email(email):\n    regex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n    if re.search(regex,email):\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Write an HTML form with two text boxes, one to enter a number and another to enter the number of its square root.", "input": "", "output": "<form action=\"\">\n  <input type=\"text\" name=\"num\" placeholder=\"Enter a number\" />\n  <input type=\"text\" name=\"sq_root\" placeholder=\" Square Root\" />\n  <input type=\"submit\" value=\"Submit\"/>\n</form>", "category": "Python"}, {"instruction": "Create a class in Java for a Person object with two fields, name and age.", "input": "", "output": "public class Person {\n    private String name;\n    private int age;\n    \n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}", "category": "Python"}, {"instruction": "Design a function to take a URL and return the content of the URL.", "input": "", "output": "import requests\n\ndef get_content(url):\n    response = requests.get(url)\n    html = response.content\n    return html", "category": "Python"}, {"instruction": "Construct a shell script to find the sum of the given numbers.", "input": "", "output": "#!/bin/bash\n\nsum=0\nfor i in \"$@\"; do\n  ((sum+=i))\ndone\n\necho \"$sum\"", "category": "Python"}, {"instruction": "Create a program to group the numbers in the given list into odd and even groups.", "input": "[1,2,3,4,5,6]", "output": "nums = [1,2,3,4,5,6]\n\nodd_nums = []\neven_nums = []\n\nfor num in nums:\n    if num % 2 == 0:\n        even_nums.append(num)\n    else:\n        odd_nums.append(num)\n\nprint('Odd numbers:', odd_nums)\nprint('Even numbers:', even_nums)", "category": "Python"}, {"instruction": "Create a script that extracts the page titles from the given HTML page.", "input": "<html>\n<head><title>HTML Example</title></head>\n<body>\n<h1>Example Page</h1>\n<p>This is an example of a HTML page.</p>\n</body>\n</html>", "output": "from bs4 import BeautifulSoup\n\nhtml_content = '''\n<html>\n<head><title>HTML Example</title></head>\n<body>\n<h1>Example Page</h1>\n<p>This is an example of a HTML page.</p>\n</body>\n</html>\n'''\n\nsoup = BeautifulSoup(html_content, 'html.parser')\npage_title = soup.title.string\nprint(page_title)", "category": "Python"}, {"instruction": "Create a JavaScript program to calculate the Fibonacci number for a given integer n", "input": "", "output": "function fibonacci(n) {\n  if (n == 0 || n == 1) {\n    return n;\n  }\n\n  let fibo = [0, 1];\n\n  for (let i = 2; i <= n; i++) {\n    let nextFibonacci = fibo[i - 1] + fibo[i - 2];\n    fibo.push(nextFibonacci);\n  }\n\n  return fibo[n];\n}", "category": "Python"}, {"instruction": "Implement an algorithm to print the steps of the Tower of Hanoi problem.", "input": "", "output": "def hanoi(num_disks, from_peg, to_peg, aux_peg):\n    if num_disks == 1:\n        print(\"Move disk 1 from peg\", from_peg,\"to peg\", to_peg)\n        return\n\n    hanoi(num_disks-1, from_peg, aux_peg, to_peg)\n    print(\"Move disk\",num_disks,\"from peg\",from_peg,\"to peg\",to_peg)\n    hanoi(num_disks-1, aux_peg, to_peg, from_peg)", "category": "Python"}, {"instruction": "Calculate the factorial of an integer using recursion.", "input": "", "output": "def factorial(n):\n  if n == 0:\n    return 1\n  else :\n    return n*factorial(n-1)", "category": "Python"}, {"instruction": "How do you create a new array of the same size as an existing array but with every element as 0 in Java?", "input": "", "output": "int[] arr = new int[oldArray.length];\nArrays.fill(arr, 0);", "category": "Python"}, {"instruction": "Output the current date in YYYYMMDD format.", "input": "", "output": "let today= new Date();\nlet dd = String(today.getDate()).padStart(2, '0');\nlet mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nlet yyyy = today.getFullYear();\n\nconsole.log(yyyy+mm+dd);", "category": "Python"}, {"instruction": "Create a class in Java that creates a simple calculator which will add, subtract, multiply, divide and take square root of two numbers.", "input": "", "output": "public class SimpleCalculator {\n    public SimpleCalculator() {}\n\n    public double add(double a, double b) {\n        return a + b;\n    }\n\n    public double subtract(double a, double b) {\n        return a - b;\n    }\n\n    public double multiply(double a, double b) {\n        return a * b;\n    }\n\n    public double divide(double a, double b) {\n        return a / b;\n    }\n\n    public double sqrt(double a) {\n        return Math.sqrt(a);\n    }\n}", "category": "Python"}, {"instruction": "Find the sum of two numbers stored in two different variables in JavaScript.", "input": "let a = 5;\nlet b = 7;", "output": "let sum = a + b;\nconsole.log(sum);", "category": "Python"}, {"instruction": "Using an SQL query, sum up the total cost of all items in the product table.", "input": "", "output": "SELECT SUM(price)\nFROM product", "category": "Python"}, {"instruction": "Parse this JSON data and print out the \u201crating\u201d of every item in the list.", "input": "{\n    \"ratings\": [\n        {\"title\": \"Frozen II\", \"rating\": 7.5},\n        {\"title\": \"The Irishman\", \"rating\": 8.2},\n        {\"title\": \"Parasite\", \"rating\": 8.5},\n    ]\n}", "output": "import json\n\ndata = {\n    \"ratings\": [\n        {\"title\": \"Frozen II\", \"rating\": 7.5},\n        {\"title\": \"The Irishman\", \"rating\": 8.2},\n        {\"title\": \"Parasite\", \"rating\": 8.5},\n    ]\n}\n\ndata = json.loads(data)\n\nfor item in data['ratings']:\n    print(\"Rating for %s: %f\" % (item['title'], item['rating']))", "category": "Python"}, {"instruction": "Create a HTML page that displays the current time.", "input": "", "output": "<html>\n    <head>\n    <title>Time Display</title>\n    <script>\n        function updateTime() {\n            let currTime = new Date();\n            document.getElementById(\"currentTime\").innerHTML = currTime.toLocaleTimeString();\n        }\n    </script>\n    </head>\n    <body onload=\"updateTime()\">\n        <div id=\"currentTime\"></div>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Using a database query, count the number of employees in a company database.", "input": "", "output": "SELECT COUNT(*)\nFROM Employee", "category": "Python"}, {"instruction": "Create an SQL query to calculate the average age of people living in a given city.", "input": "Table name: People\nColumns: Name, Age, City", "output": "SELECT AVG(Age) \nFROM People \nWHERE City = {city}", "category": "Python"}, {"instruction": "Convert this HTML code to its corresponding XML format", "input": "<html>\n    <body>\n        <h1>Hello, World!</h1>\n    </body>\n</html>", "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<html>\n    <body>\n        <h1>Hello, World!</h1>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Write a function that takes a string and replaces all non-alphanumeric characters with the # symbol.", "input": "let str = \"Hello* World!\"", "output": "function replaceNonAlphaNumCharacters(str) {\n    let result = str.replace(/[^a-zA-Z0-9]/g, '#');\n    return result;\n}\n\nlet str = \"Hello* World!\";\nreplaceNonAlphaNumCharacters(str);", "category": "Python"}, {"instruction": "Create a database table with 3 columns: id, name and size.", "input": "", "output": "CREATE TABLE my_database (id INTEGER PRIMARY KEY, name VARCHAR(255), size INTEGER);", "category": "Python"}, {"instruction": "Create a Java class called \"Dog\" with a constructor and a bark() method that prints \"Woof!\".", "input": "", "output": "public class Dog {\n\npublic Dog() {\n\n}\n\npublic void bark() {\n System.out.println(\"Woof!\");\n}\n\n}", "category": "Python"}, {"instruction": "How do you generate a series of numbers from `10` to `41` in JavaScript?", "input": "", "output": "let series = [];\nfor (let i = 10; i <= 41; i++) {\n  series.push(i);\n}", "category": "Python"}, {"instruction": "Find all the multiples of a number in between two given numbers.", "input": "", "output": "def find_multiples(base, lower, upper):\n    output = []\n    for i in range(lower, upper+1):\n        if i % base == 0:\n            output.append(i)\n    return output", "category": "Python"}, {"instruction": "Write code to walk through a BST and print out all the elements in order.", "input": "", "output": "def in_order_traversal(tree):\n  if tree != None:\n    in_order_traversal(tree.left)\n    print(tree.data,end=\" \")\n    in_order_traversal(tree.right)", "category": "Python"}, {"instruction": "Write a function to create a new nested list with twice the length of the original.", "input": "original_list = [1, 2, [3, 4], 5]", "output": "def nested_list_doubled(original_list):\n  new_list = []\n  for item in original_list:\n    if isinstance(item, list):\n      new_list.append(nested_list_doubled(item))\n    else:\n      new_list.append(item)\n    new_list.append(item)\n  return new_list", "category": "Python"}, {"instruction": "Create a Java class to find all substrings of a given string.", "input": "String str = \"Hello World\"", "output": "public class SubstringFinder {\n\n    public static List<String> findSubstrings(String str) {\n        List<String> substrings = new ArrayList<>();\n\n        for (int i = 0; i < str.length(); i++) {\n            for (int j = i + 1; j <= str.length(); j++) {\n                String substr = str.substring(i, j);\n                substrings.add(substr);\n            }\n        }\n        return substrings;\n    }\n}\n\nString str = \"Hello World\";\nSubstringFinder.findSubstrings(str);", "category": "Python"}, {"instruction": "Edit the given code to limit the output to only the 30 most recent entries in the database.", "input": "entries = db.execute_query(\"SELECT * FROM users\")", "output": "entries = db.execute_query(\"SELECT * FROM users ORDER BY id DESC LIMIT 30\")", "category": "Python"}, {"instruction": "Find the Locality from an Indian Pin Code.", "input": "Pin Code: 400615", "output": "The locality for Pin Code 400615 is Vashi, Navi Mumbai, Maharashtra.", "category": "Python"}, {"instruction": "Make an array with 10 integers between 0 and 100.", "input": "", "output": "my_array = [23, 60, 12, 44, 97, 72, 4, 39, 66, 84]", "category": "Python"}, {"instruction": "Write a MySQL query to select all employees who are 30 years old or above.", "input": "", "output": "SELECT * FROM employees WHERE age >= 30;", "category": "Python"}, {"instruction": "Edit the following C code so that an infinite loop is created:", "input": "#include <stdio.h>\nint main()\n{\n    int i = 0;\n    while(i<10)\n    {\n        printf(\"%d\\n\",i);\n        i++;\n    }\n    return 0;\n}", "output": "#include <stdio.h>\nint main()\n{\n    int i = 0;\n    while(1)\n    {\n        printf(\"%d\\n\",i);\n        i++;\n    }\n    return 0;\n}", "category": "Python"}, {"instruction": "How would you add elements from one list to another list in Python?", "input": "", "output": "You can add elements from one list to another list in Python using the extend() method, which adds all elements of one list to another list.\n\nFor example, if you have the lists list1 and list2, you can add all elements of list2 to list1 with the following code:\n\nlist1.extend(list2)\n\nAlternatively, you can use the list.append() method to add each element of list2 to list1 one-by-one. For example:\n\nfor element in list2:\n    list1.append(element)", "category": "Python"}, {"instruction": "Edit the following JavaScript code to add two functions, one to increase the number of elements in the array and another to remove the last element in the array.", "input": "let array = [1, 2, 3, 4];", "output": "let array = [1, 2, 3, 4];\n\nfunction addElement(element) {\n    array.push(element);\n}\n\nfunction removeElement() {\n    array.pop(array.length-1);\n}", "category": "Python"}, {"instruction": "Design an HTML form that requires the user to enter three pieces of information: a name, email address, and password", "input": "", "output": "<form action=\"\">\n  <label for=\"name\">Name:</label><br>\n  <input type=\"text\" id=\"name\" name=\"username\" placeholder=\"Enter your name here\" required>\n  <br><br>\n  <label for=\"email\">Email:</label><br>\n  <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Enter your email address here\" required>\n  <br><br>\n  <label for=\"password\">Password:</label><br>\n  <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Enter your password here\" required>\n  <br><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Generate a HTML document with 3 divs, each div being 50px wide and 100px tall", "input": "", "output": "<html>\n  <head>\n    <title>HTML Div Test</title>\n  </head>\n  <body>\n    <div style=\"width:50px; height:100px;\">Div 1</div>\n    <div style=\"width:50px; height:100px;\">Div 2</div>\n    <div style=\"width:50px; height:100px;\">Div 3</div>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Create a JavaScript class for a circle that calculates its area and returns the result.", "input": "", "output": "class Circle { \n  constructor(radius) {\n    this.radius = radius;\n  }  \n  \n  get area() { \n    return Math.PI * this.radius * this.radius; \n  }  \n}", "category": "Python"}, {"instruction": "How many arguments can be passed to a JavaScript function", "input": "", "output": "There is no limit to the number of arguments that can be passed to a JavaScript function. However, this limit depends on the browser and its implementation.\nIn Chrome and Firefox, the maximum number of arguments that can be passed to a function is limited only by the available memory.", "category": "Python"}, {"instruction": "Create a CSS rule to apply bold font style to all <p> tags.", "input": "", "output": "p {\n  font-weight: bold;\n}", "category": "Python"}, {"instruction": "Describe the basic structure of an XML document", "input": "", "output": "An XML document has a basic structure of a root element, which may contain other elements. Elements in an XML document are defined by start tags and end tags and can have attributes, text and other kinds of content. In addition, there are rules regarding the order of nested elements, the type of elements and their content, as well as the use of whitespace. XML documents are self-describing because all their elements are labeled.", "category": "Python"}, {"instruction": "Compare the features of Mercurial and Git.", "input": "", "output": "Mercurial and Git are both distributed version control systems, meaning that all users have a complete copy of the repository. Both are extremely fast, with Git being slightly faster than Mercurial. Mercurial has a few advantages over Git, such as better merging capabilities, sophisticated branch management, and better backwards compatibility. Git, on the other hand, has some advantages over Mercurial in terms of speed and lightweight branching, as well as a larger user base. \n\nUltimately, the choice depends on the specific needs of the user or organisation.", "category": "Python"}, {"instruction": "Edit the given JavaScript code to alert a success message?", "input": "console.log(\"Process started\");", "output": "console.log(\"Process started\");\nalert(\"Process Completed Successfully\");", "category": "Python"}, {"instruction": "Design a CSS class to align a table to the left of the page?", "input": "", "output": ".table-left {\n  float: left;\n}", "category": "Python"}, {"instruction": "Create an algorithm to determine the most common element in an array", "input": "[2, 3, 5, 3, 7, 2, 8, 1, 3]", "output": "def most_common(arr):\n    counts = {}\n    for i in arr:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    \n    max_count = 0\n    max_item = None\n    for item, count in counts.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    return max_item", "category": "Python"}, {"instruction": "Convert the following string from lower case to upper case", "input": "hello world", "output": "HELLO WORLD", "category": "Python"}, {"instruction": "List three web development frameworks.", "input": "", "output": "1. React\n2. Angular\n3. Vue.js", "category": "Python"}, {"instruction": "Write a script in JavaScript to check if the value of a variable \"x\" is divisible by 7.", "input": "let x = 21", "output": "if (x % 7 === 0) { \n  console.log('x is divisible by 7');\n} else {\n  console.log('x is NOT divisible by 7');\n}", "category": "Python"}, {"instruction": "Create a String variable in Java and assign the value \"Computer Science\".", "input": "", "output": "String subject = \"Computer Science\";", "category": "Python"}, {"instruction": "Create a loop in Python to print the fibonacci sequence of the given number.", "input": "n = 10", "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    print(\"Fibonacci Series:\")\n    for i in range(n): \n        print(a, end = \" \")\n        c = a + b \n        a = b \n        b = c\n\nfibonacci(n)", "category": "Python"}, {"instruction": "Modify the following JavaScript code to return the result \"Hello World!\":", "input": "let x = 'Hello';\nlet y = 'World';\n\nconsole.log(x + ' ' + y);", "output": "let x = 'Hello';\nlet y = 'World!';\n\nconsole.log(x + ' ' + y);", "category": "Python"}, {"instruction": "Create a TypeScript function to find a maximum value from a given array.", "input": "n: 5, arr: 8, 2, 10, 12, 16", "output": "function maxValue(n: number, arr: number[]): number {\n let max = arr[0];\n for (let i = 1; i < n; i++) {\n  if (arr[i] > max) max = arr[i];\n }\n return max;\n}\n\n// Call the function\nlet max = maxValue(5, [8,2,10,12,16]);\n\n// Output the result\nconsole.log(\"The maximum value is \" + max);", "category": "Python"}, {"instruction": "Calculate the sum of the following list of numbers: 10, 12, 14, 16, 18.", "input": "", "output": "The sum of the numbers is 70.", "category": "Python"}, {"instruction": "Use the OpenGL API to create a vertex buffer object (VBO).", "input": "", "output": "GLuint vbo;\nglGenBuffers(1, &vbo);\nglBindBuffer(GL_ARRAY_BUFFER, vbo);", "category": "Python"}, {"instruction": "Write an HLSL code snippet that creates a 3D vector with the components (x, y, z) = (1, 0, 1).", "input": "", "output": "float3 vec = float3(1.0f, 0.0f, 1.0f);", "category": "Python"}, {"instruction": "Create a SQL query to select all customers from the \"Customers\" table that have the \"State\" column equal to \"New York\".", "input": "", "output": "SELECT * FROM Customers WHERE State = 'New York';", "category": "Python"}, {"instruction": "Use the CSS selector to select all elements with the class name \"content\".", "input": "", "output": "document.querySelectorAll('.content');", "category": "Python"}, {"instruction": "Compose the html for the following table", "input": "Column 1   |  Column 2\n-------------------\nItem 1     |  Value 1\nItem 2     |  Value 2", "output": "<table>\n    <tr>\n        <th>Column 1</th>\n        <th>Column 2</th>\n    </tr>\n    <tr>\n        <td>Item 1</td>\n        <td>Value 1</td>\n    </tr>\n    <tr>\n        <td>Item 2</td>\n        <td>Value 2</td>\n    </tr>\n</table>", "category": "Python"}, {"instruction": "Write a regular expression that matches all strings that have the letter \"a\" in them.", "input": "", "output": "^.*a.*$", "category": "Python"}, {"instruction": "Parse a JSON string and print its value.", "input": "data = '{\"name\":\"John\", \"age\":30}'", "output": "import json\n\ndata_dict = json.loads(data)\nname = data_dict[\"name\"]\nage = data_dict[\"age\"]\nprint(name)\nprint(age)", "category": "Python"}, {"instruction": "Write a SQL query to find all the users that have been created within last 24 hours.", "input": "", "output": "SELECT *\nFROM users\nWHERE created_at >= DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 1 DAY);", "category": "Python"}, {"instruction": "Using a try-except statement, write a program to check whether the input is an integer or not.", "input": "", "output": "try: \n    input_val = int(input(\"Please enter an integer: \"))\nexcept ValueError:\n    print(\"The input provided is not an integer.\")", "category": "Python"}, {"instruction": "Update the code to add a class attribute \"var\" with the value \"value\".", "input": "class MyClass():\n    def __init__(self):\n        pass", "output": "class MyClass():\n    var = \"value\" \n    def __init__(self):\n        pass", "category": "Python"}, {"instruction": "Write a Java program to print the following output: \"This is a test statement\".", "input": "", "output": "public class Test {\n    public static void main(String[] args) {\n        System.out.println(\"This is a test statement\");\n    }\n}", "category": "Python"}, {"instruction": "Classify the following code as either a single statement, multiple statement, or a control flow statement.", "input": "if(x > 5):\n  print(\"x is greater than five\")", "output": "Control flow statement", "category": "Python"}, {"instruction": "Insert a line of code to change the value of the string \"text\" to \"Hello World\".", "input": "String text = \"\";", "output": "String text = \"\";\ntext = \"Hello World\";", "category": "Python"}, {"instruction": "How would you create a class in Java and add a field, constructor and method?", "input": "", "output": "public class MyClass {\n    private String field;\n    \n    public MyClass(String field) {\n        this.field = field;\n    }\n    \n    public void sayHello() {\n        System.out.println(\"Hello, \" + field + \"!\");\n    }\n}", "category": "Python"}, {"instruction": "Create a function to calculate the number of different ways to climb n stairs", "input": "", "output": "def count_ways(n): \n    if n==1 or n==0: \n        return 1\n    elif n==2: \n        return 2\n    else: \n        return count_ways(n-1) + count_ways(n-2) + count_ways(n-3)", "category": "Python"}, {"instruction": "Create a spreadsheet and enter the following data", "input": "Student Name  Math  English  Physics  Chemistry\nJohn          70    80       87       85\nMary          90    65       70       79", "output": "Student Name | Math | English | Physics | Chemistry\n-------------|------|---------|---------|-----------\nJohn         | 70   | 80      | 87      | 85\nMary         | 90   | 65      | 70      | 79", "category": "Python"}, {"instruction": "Write SQL query to retrieve the names of employees who joined in the year 2018", "input": "", "output": "SELECT name\nFROM employees\nWHERE YEAR(join_date) = 2018", "category": "Python"}, {"instruction": "Construct a query using MongoDB to find documents where the \"user_id\" field contains any number greater than 5.", "input": "", "output": "db.collection.find({user_id: {$gt: 5}})", "category": "Python"}, {"instruction": "Create a SQL query that returns the sum of all the numbers in the \"num\" column.", "input": "", "output": "SELECT SUM(num) FROM table_name", "category": "Python"}, {"instruction": "Write a SQL query to find rows that contain the field \"user_id\" with a value of 3.", "input": "", "output": "SELECT * FROM table_name WHERE user_id = 3;", "category": "Python"}, {"instruction": "What command can you use in a Linux terminal to find out the amount of RAM installed on your system?", "input": "", "output": "The command to find out the amount of RAM installed in a Linux system is \"free -m\".", "category": "Python"}, {"instruction": "Construct a query using MongoDB to find all the documents with a \"city\" field that equals \"New York\".", "input": "", "output": "db.collection.find({city: \"New York\"})", "category": "Python"}, {"instruction": "How does dynamic programming work?", "input": "", "output": "Dynamic programming is a way of solving problems by breaking them down into a collection of smaller subproblems. It works by storing solutions to subproblems so that each subproblem is only solved once. This allows for faster computation and efficient memory usage, as solutions are stored and reused instead of having to be recalculated every time they are needed. This approach is useful in situations where a given problem can be divided into multiple, overlapping subproblems, such as in optimization problems.", "category": "Python"}, {"instruction": "Write a Python function to find the maximum and minimum numbers from a sequence of numbers.", "input": "", "output": "def min_max(data):\n    min_value = min(data)\n    max_value = max(data)\n    return min_value, max_value", "category": "Python"}, {"instruction": "Write an SQL query to join two tables using an inner join.", "input": "TableA\nid | name\n1 | Joe\n2 | Juan\n\nTableB\nid | age\n1 | 25\n2 | 30", "output": "SELECT TableA.id, TableA.name, TableB.age\nFROM TableA INNER JOIN TableB \nON TableA.id = TableB.id;", "category": "Python"}, {"instruction": "Move the element of the list at index 0 to the end of the list.", "input": "[1, 2, 3, 4, 5]", "output": "[2, 3, 4, 5, 1]", "category": "Python"}, {"instruction": "Create a function to calculate the compound interest rate given the initial principal amount P, the annual interest rate r and the number of times compounding occurs in a year n.", "input": "", "output": "def compound_interest(P, r, n):\n    return P * (1 + (r/n))**(n*t)", "category": "Python"}, {"instruction": "Amend the following Python code to add error handling to the function print_score.", "input": "def print_score(score):\n    print(f'The score is {score}')", "output": "def print_score(score):\n    try:\n        score = int(score)\n        print(f'The score is {score}')\n    except ValueError:\n        print(\"The score must be an integer.\")", "category": "Python"}, {"instruction": "Add a method called \"printTitle\" to the \u201cBook\u201d class defined above.", "input": "", "output": "class Book():\n  def __init__(self, name, author):\n    self.name = name\n    self.author = author\n  \n  def printTitle(self):\n      print(\"The book title is: \"+ self.name)", "category": "Python"}, {"instruction": "Amend the following Python function to calculate the sum of all even numbers in the given range.", "input": "def sum_even_numbers(n):\n    '''This function will calculate the sum of all numbers in the given range.'''\n    total = 0\n    for i in range(n):\n        total += i\n    return total", "output": "def sum_even_numbers(n):\n    '''This function will calculate the sum of all even numbers in the given range.'''\n    total = 0\n    for i in range(n):\n        if i%2==0:\n            total += i\n    return total", "category": "Python"}, {"instruction": "Create a 4x4 matrix filled with random numbers between 0 and 9.", "input": "", "output": "import random\n\ndef generate_random_matrix(rows, cols):\n    matrix = []\n    for i in range(rows):\n        matrix.append([])\n        for j in range(cols):\n            matrix[i].append(random.randint(0, 9))\n    return matrix\n\nif __name__ == '__main__':\n    rows = 4\n    cols = 4\n    print(generate_random_matrix(rows, cols))", "category": "Python"}, {"instruction": "Write a function to convert the given list of integers into a dictionary of lists.", "input": "my_list = [1, 2, 3, 4]", "output": "def list_to_dict(lst):\n    my_dict = {}\n    for i in lst:\n        my_dict[str(i)] = [i]\n    return my_dict\n\nif __name__ == '__main__':\n    my_list = [1, 2, 3, 4]\n    print(list_to_dict(my_list))", "category": "Python"}, {"instruction": "Calculate the GCD of numbers 8 and 12.", "input": "", "output": "The GCD of numbers 8 and 12 is 4.", "category": "Python"}, {"instruction": "Add a method called \u201cisEmpty\u201d to the following Python class to check if the list is empty or not.", "input": "class List:\n    def __init__(self, data):\n        self.data = data", "output": "class List:\n    def __init__(self, data):\n        self.data = data\n    \n    def isEmpty(self):\n        return not self.data", "category": "Python"}, {"instruction": "Add a tag 'img' in the following xml document.", "input": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<information>\n\t<property>\n\t\t<name>Adobe</name>\n\t\t<type>Software</type>\n\t</property>\n</information>", "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<information>\n    <img />\n\t<property>\n\t\t<name>Adobe</name>\n\t\t<type>Software</type>\n\t</property>\n</information>", "category": "Python"}, {"instruction": "Write a Bash script to print a message when the system time is between 8pm and 8am.", "input": "", "output": "#!/bin/bash\n\ncurr_hour=$(date +'%H')\n\nif [ $curr_hour -ge 20 -o $curr_hour -lt 8 ]\nthen\n    echo \"It's nighttime\"\nfi", "category": "Python"}, {"instruction": "Create a function to calculate the volume of the given 3D shape.", "input": "type: \"cube\"\nside: 6", "output": "def calculate_volume(shape, side):\n  if shape == \"cube\":\n    return side ** 3", "category": "Python"}, {"instruction": "Convert the Python Dictionary given below into a valid JSON", "input": "{\n    \"firstName\":  \"John\",\n    \"lastName\":  \"Doe\",\n    \"age\":  23\n}", "output": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"age\": 23\n}", "category": "Python"}, {"instruction": "Write code for reversing a list in Python", "input": "[1,2,3,4]", "output": "def reverse_list(l):\n    return l[::-1]", "category": "Python"}, {"instruction": "Construct a regex to check if a provided string is phone number or not", "input": "", "output": "Regex: ^\\d{10}$", "category": "Python"}, {"instruction": "List the advantages and disadvantages of using a FOR loop.", "input": "", "output": "Advantages of FOR loop: \n- It provides a simple, efficient way to write the loop and is easy to read. \n- It is useful in certain scenarios where you need to control the number of iterations. \n\nDisadvantages of FOR loop: \n- It requires you to specify the number of iterations at the start of the loop. \n- If the range of iterations is large, it can lead to an inefficient program. \n- If the loop's iteration statement contains a break statement, it can lead to an unexpected result.", "category": "Python"}, {"instruction": "Write a function to generate Fibonacci numbers in Python.", "input": "", "output": "def fibonacci(num):\n  fib_list = [0, 1]\n  if num == 0:\n    return []\n  elif num == 1:\n    return [0]\n  else:\n    for _ in range(2, num):\n      nxt_num = fib_list[-1] + fib_list[-2]\n      fib_list.append(nxt_num)\n    return fib_list", "category": "Python"}, {"instruction": "Analyze the given statement for any syntax errors.", "input": "Statement: The user entered his name James and password1234", "output": "No syntax errors were detected in the given statement.", "category": "Python"}, {"instruction": "Move the parentheses to make the expression give the correct answer.", "input": "Expression: 8 / 2 * (2 + 2)\nAnswer: 16", "output": "8 / (2 * (2 + 2))   // parentheses moved to form the correct expression which yields the correct answer (16).", "category": "Python"}, {"instruction": "Write a JavaScript program to convert temperatures to and from Celsius, Fahrenheit.", "input": "", "output": "function convertToFahrenheit(celsius) {\n  return (celsius * 1.8) + 32;\n}\n\nfunction convertToCelsius(fahrenheit) {\n  return (fahrenheit - 32) / 1.8;\n}", "category": "Python"}, {"instruction": "Create a program in Java that sort a given array using bubble sort algorithm.", "input": "Array: [4, 3, 5, 2, 1]", "output": "public static void bubbleSort(int[] arr) {\n  int n = arr.length;\n  int temp = 0;\n  for(int i=0; i < n; i++){\n      for(int j=1; j < (n-i); j++){\n           if(arr[j-1] > arr[j]){\n                temp = arr[j-1];\n                arr[j-1] = arr[j];\n                arr[j] = temp;\n           }\n      }\n  }\n}", "category": "Python"}, {"instruction": "Create a C program to remove a specified character from a given string.", "input": "String = \"Hello World!\", Character = 'o'", "output": "#include <stdio.h>\n#include <string.h>\n\nint main() \n{\n    /* Input String */\n    char str[] = \"Hello World!\";\n    int index;\n    \n    /* Specified Character */\n    char ch = 'o';\n    \n    index = 0; \n    /* Remove the character from the string */\n    while (str[index] != '\\0') {\n        /* If the character matches with given ch */\n        if (str[index] == ch) {\n            int j;\n            /* Shift all characters to the left */\n            for (j = index; str[j] != '\\0'; ++j) {\n                str[j] = str[j + 1];\n            }\n        } else {\n            index++;\n        }\n    }\n    printf(\"The string without the character %c is %s\\n\", ch, str);\n\n    return 0;\n}", "category": "Python"}, {"instruction": "Generate an HTML code to display the following speech bubble", "input": "", "output": "<div style=\"width: 200px; padding: 5px 10px; border-radius: 5px; background-color: #f5f5f5;\">\n    <div style=\"border: 1px solid #dedede; padding: 10px; background-color: #fff;\">\n    <p>Hello World!</p>\n    </div>\n</div>", "category": "Python"}, {"instruction": "Write a script to display \"Hello World\" in the console twenty times", "input": "", "output": "for i in range(20):\n    print(\"Hello World\")", "category": "Python"}, {"instruction": "Create a MySQL query to summarize total sales for each month.", "input": "Table name = Sales", "output": "SELECT  \n    MONTHNAME(date),\n    SUM(amount) AS total_sales\nFROM Sales\nGROUP BY MONTH(date);", "category": "Python"}, {"instruction": "Create a SQL query to retrieve the first name of each customer.", "input": "Table name = Customer", "output": "SELECT first_name FROM Customer;", "category": "Python"}, {"instruction": "Write an MySQL query to sort the records by the given field in descending order.", "input": "field: \"price\"", "output": "SELECT * FROM products ORDER BY price DESC;", "category": "Python"}, {"instruction": "Write an Apache Spark program to count the occurrence of each word in the given dataset.", "input": "", "output": "val wordCounts = df.flatMap(line => line.split(\" \"))\n       .map(word => (word, 1))\n       .reduceByKey(_ + _)\n       .sort($\"count\".desc)", "category": "Python"}, {"instruction": "Write an SQL script to list all items with a price greater than 10$.", "input": "Table Name = Item", "output": "SELECT * FROM Item WHERE price > 10;", "category": "Python"}, {"instruction": "Build a web application to display the current time in different countries.", "input": "", "output": "//HTML code\n\n<h1>Current Time By Country</h1>\n<ul>\n    <li>New York: <span id=\"new-york-time\"></span></li>\n    <li>Tokyo: <span id=\"tokyo-time\"></span></li>\n    <li>London: <span id=\"london-time\"></span></li>\n</ul>\n\n//JavaScript code\n\nfunction getTimeByCountry() {\n    // Set current time for New York\n    let d = new Date();\n    let newYorkTime = d.toLocaleTimeString(\"en-US\", {timeZone: \"America/New_York\"});\n    document.getElementById(\"new-york-time\").innerHTML = newYorkTime;\n\n    // Set current time for Tokyo\n    let tokyoTime = d.toLocaleTimeString(\"ja-JP\", {timeZone: \"Asia/Tokyo\"});\n    document.getElementById(\"tokyo-time\").innerHTML = tokyoTime;\n\n    // Set current time for London\n    let londonTime = d.toLocaleTimeString(\"en-GB\", {timeZone: \"Europe/London\"});\n    document.getElementById(\"london-time\").innerHTML = londonTime;\n}\n\ngetTimeByCountry();", "category": "Python"}, {"instruction": "Identify the HTML element for displaying a hyperlink.", "input": "", "output": "The HTML element for displaying a hyperlink is 'a'.", "category": "Python"}, {"instruction": "Design a data structure to store a list of numbers and the corresponding and their frequencies.", "input": "", "output": "A HashMap can be used to store the data structure. It uses the numbers as the key, and their frequency could be the value associated with the key.", "category": "Python"}, {"instruction": "Generate a function which takes a two-dimensional array of integers as an argument and prints out the elements in spiral order.", "input": "[[1,2,3],\n[4,5,6],\n[7,8,9]]", "output": "def printSpiral(arr):\n    # track the current row and columns\n    cur_row = 0\n    cur_col = 0\n    \n    # track the starting and ending columns of the row and rows of the column\n    start_col = 0\n    end_col = len(arr[0]) - 1\n    start_row = 0\n    end_row = len(arr) - 1\n    \n    while start_col <= end_col and start_row <= end_row:\n        # move right\n        for i in range(start_col, end_col + 1):\n            print(arr[cur_row][i])\n        start_row += 1\n        cur_row = start_row\n        \n        # move down\n        for i in range(start_row, end_row + 1):\n            print(arr[i][end_col])\n        end_col -= 1\n        cur_col = end_col\n        \n        # move left\n        for i in range(end_col, start_col - 1, -1):\n            print(arr[end_row][i])\n        end_row -= 1\n        cur_row = end_row\n        \n        # move up\n        for i in range(end_row, start_row - 1, -1):\n            print(arr[i][start_col])\n        start_col += 1\n        cur_col = start_col", "category": "Python"}, {"instruction": "Design an algorithm to find the two numbers in an array that have the largest sum.", "input": "[1,3,4,6,7]", "output": "# Finds two numbers in an array that have the largest sum\ndef getMaxSum(arr):\n    # Initialize the sum to the maximum possible value\n\tmaxSum = -float('inf')\n\t\n\t# Iterate over all elements of the array\n\tfor i in range(len(arr)):\n\t\tfor j in range(i+1, len(arr)):\n\t\t\t# Compare the current sum to the maximum sum\n\t\t\tmaxSum = max(maxSum, arr[i] + arr[j])\n\n    # Return the largest sum\n\treturn maxSum", "category": "Python"}, {"instruction": "Construct a function in JavaScript to find all the Perfect Numbers up to the given parameter n.", "input": "", "output": "function findPerfectNumbers(n) {\n  var perfects = [];\n\n  for(var i = 1; i<=n; i++){\n    var divisorsSum = 0;\n    for(var j = 1; j<i; j++){\n      if(i % j == 0){\n        divisorsSum += j;\n      }\n    }\n    if(divisorsSum == i){\n      perfects.push(i);\n    }\n  }\n\n  return perfects;\n}", "category": "Python"}, {"instruction": "Write a function which takes a string as an argument and returns the same string with the first letter capitalized.", "input": "'hello world'", "output": "def capitalize_string(string):\n  return string[0].upper() + string[1:]", "category": "Python"}, {"instruction": "Describe the Dynamic Programming approach used to solve the Knapsack problem.", "input": "", "output": "Dynamic Programming (DP) is an algorithmic technique used to solve optimization problems. Specifically, the Knapsack problem is a popular problem which is solved using the DP approach. The idea is to solve the problem by breaking it into smaller sub-problems and storing the results of each subproblem in a table. This table is referred to as the DP table, and is used to solve larger problems more efficiently. The DP approach is also used to optimally solve problems that have overlapping subproblems; this technique is known as memoization. This method of solving the Knapsack problem involves constructing a two dimensional array of items and weights, and then iterating through each row and column in the table to find the optimal solution.", "category": "Python"}, {"instruction": "Write a Java program that passes an array to a method and prints its length.", "input": "", "output": "public class TestArrayLength {\n    public static void printLength(int[] array) {\n        System.out.println(\"The length of the array is: \" + array.length);\n    }\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5};\n        printLength(numbers);\n    }\n}", "category": "Python"}, {"instruction": "Create a SQL query to find all employee names who earn more than $50,000 a year.", "input": "", "output": "SELECT employee_name\nFROM employees\nWHERE salary > 50000;", "category": "Python"}, {"instruction": "Create a function to check if a string is an anagram in C++.", "input": "", "output": "#include <bits/stdc++.h> \nusing namespace std;\n  \n// Function to check if two strings are equal\nbool areAnagram(string str1, string str2) \n{ \n    // Get lengths of both strings \n    int n1 = str1.length(); \n    int n2 = str2.length(); \n  \n    // If length of both strings is not same, then \n    // they cannot be anagram \n    if (n1 != n2) \n        return false; \n  \n    // Sorting both strings \n    sort(str1.begin(), str1.end()); \n    sort(str2.begin(), str2.end()); \n  \n    // Comparing sorted strings \n    for (int i = 0; i < n1; i++) \n        if (str1[i] != str2[i]) \n            return false; \n  \n    return true; \n}", "category": "Python"}, {"instruction": "Create a function to solve a quadratic equation in JavaScript.", "input": "", "output": "function quadraticEquation(a, b, c) {\n    let result;\n    let delta = (b * b) - (4 * a * c);\n    if (delta > 0) {\n      result = {\n        root1: (-b + Math.sqrt(delta)) / (2 * a),\n        root2: (-b - Math.sqrt(delta)) / (2 * a)\n      };\n    }\n    else if (delta == 0) {\n      result = {\n        root1: (-b + Math.sqrt(delta)) / (2 * a)\n      };\n    }\n    else {\n      result = {\n        root1: 'cannot calculate the roots'\n      };\n    }\n    return result;\n  }", "category": "Python"}, {"instruction": "Define a function to remove all the even numbers from a list in Python.", "input": "sample_list = [1,2,3,4,5,6,7,8]", "output": "sample_list = [1,2,3,4,5,6,7,8]\n\ndef remove_even_numbers(lst):\n    for num in lst:\n        if num % 2 == 0:\n            lst.remove(num)\n    return lst\n\nprint(remove_even_numbers(sample_list))", "category": "Python"}, {"instruction": "Create a list of five randomly generated integers from 1 to 10 in Python.", "input": "", "output": "import random\n\nrandom_list = [random.randint(1, 10) for int_num in range(5)]\n\nprint(random_list)", "category": "Python"}, {"instruction": "Write a query in SQL to find records with specific value.", "input": "Key: product_type\nValue: Electronics", "output": "SELECT * FROM orders WHERE product_type = 'Electronics';", "category": "Python"}, {"instruction": "Re-write the following sentence by changing the verb tense to future simple.", "input": "She wrote a poem.", "output": "She will write a poem.", "category": "Python"}, {"instruction": "Calculate the average score of the following list of numbers.", "input": "[2, 4, 6, 8, 10]", "output": "Average score: 6.", "category": "Python"}, {"instruction": "Write a query in MySQL for finding records with a specific tax rate.", "input": "Tax Rate: 7%", "output": "SELECT * FROM orders WHERE tax_rate = 0.07;", "category": "Python"}, {"instruction": "Modify the code in Python to convert a lower case string to an upper case string.", "input": "'hello world'", "output": "string = 'hello world'\nstring = string.upper()\nprint(string)", "category": "Python"}, {"instruction": "Write a function that takes a SQL query as an argument and prints out the results of the query in a tabular format.", "input": "SELECT * FROM tableA", "output": "def queryTable(query):\n    conn = sqlite3.connect('database.db')\n    cursor = conn.cursor()\n    cursor.execute(query)\n    data = cursor.fetchall()\n\n    # print table header\n    for column in data[0].keys():\n        print(column.center(50), end = ' | ')\n    print('\\n')\n\n    # print table data\n    for row in data:\n        for item in row:\n            print(str(item).center(50), end=' | ')\n        print('\\n')\n    conn.close()", "category": "Python"}, {"instruction": "Construct a program in Java for solving the Tower of Hanoi puzzle.", "input": "", "output": "import java.util.Stack;\n \npublic class TowerOfHanoi \n{\n    public static void towersOfHanoi(int disks) \n    {\n        Stack<Integer> source = new Stack<Integer>();\n        Stack<Integer> destination = new Stack<Integer>();\n        Stack<Integer> auxillary = new Stack<Integer>();\n        int i, total_moves;\n         \n        System.out.println(\"Source:\" + source);\n        System.out.println(\"Destination:\" + destination);\n        System.out.println(\"Auxillary:\" + auxillary);\n \n        // Put all disks onto source\n        for (i = disks; i > 0; i--) \n        {\n            source.push(i);\n        }  \n         \n        // Calculate total moves\n        total_moves = (int) (Math.pow(2, disks) - 1); \n         \n        for (i = 1; i <= total_moves; i++) \n        {\n            moveDisk(source, destination, auxillary, disks);\n        } \n        System.out.println(\"Source:\" + source);\n        System.out.println(\"Destination:\" + destination);\n        System.out.println(\"Auxillary:\" + auxillary);\n    }\n \n    public static void moveDisk(Stack<Integer> source, Stack<Integer> destination, \n                                Stack<Integer> auxillary, int disks) \n    {\n        int i;\n        if (disks == 1) \n        {\n            destination.push(source.pop());\n            return;\n        }        \n        moveDisk(source, auxillary, destination, disks - 1); \n         \n        destination.push(source.pop());\n        moveDisk(auxillary, destination, source, disks - 1);\n    }\n    \n    public static void main (String[] args) \n    {\n        int disks = 3;\n        towersOfHanoi(disks);\n    }\n}", "category": "Python"}, {"instruction": "Design an algorithm to delete all occurrences of a given key k in a singly linked list.", "input": "", "output": "//recursive approach\nNode *deleteKey(Node *head, int k) \n{ \n    Node *curr = head; \n    if (curr == NULL) \n        return NULL; \n\n    // check for head node \n    if (curr->key == k) { \n        Node *temp = curr; \n        head = curr->next; \n        free(temp); \n        return deleteKey(head, k); \n    } \n\n    // check for other nodes \n    while (curr->next != NULL) { \n        if (curr->next->key == k) { \n            Node *temp = curr->next; \n            curr->next = curr->next->next; \n            free(temp); \n        } \n        curr = curr->next; \n    } \n    return head; \n}", "category": "Python"}, {"instruction": "Develop a Python program to remove elements from a dictionary.", "input": "my_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}", "output": "my_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n\n# remove element 'd'\nmy_dict.pop('d', None)\n\n# print resulting dictionary\nprint(my_dict)\n\n# Output: {'a': 1, 'b': 2, 'c': 3}", "category": "Python"}, {"instruction": "Develop a regex pattern to match any valid phone number.", "input": "", "output": "^[0-9]{3}-?[0-9]{3}-?[0-9]{4}$", "category": "Python"}, {"instruction": "Generate a class in Java for retrieving data from a database.", "input": "", "output": "import java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\npublic class DatabaseRetrieve {\n\n    private Connection connection;\n    private String query;\n\n    public DatabaseRetrieve(Connection connection, String query) {\n        this.connection = connection;\n        this.query = query;\n    }\n\n    public ResultSet getData() throws SQLException {\n        Statement stmt = connection.createStatement();\n        ResultSet rs = stmt.executeQuery(query);\n        return rs;\n    }\n\n}", "category": "Python"}, {"instruction": "Modify the following Java code to debug and execute properly.", "input": "public class HelloWorld {\n public static void main(String[] args) {\n   System.out.print(\"Hello world);\n }\n}", "output": "public class HelloWorld {\n public static void main(String[] args) {\n   System.out.println(\"Hello world);\n }\n}", "category": "Python"}, {"instruction": "Test the following Python code for any errors.", "input": "def calculate_mean(numbers):\n    total_sum = 0;\n    for n in numbers:\n        total_sum += n\n    mean = total_sum / 10   # length of numbers", "output": "No errors have been found in the code.", "category": "Python"}, {"instruction": "Categorize each of the following strings as a floating-point number, integer, or string.", "input": "59689.14", "output": "floating-point number", "category": "Python"}, {"instruction": "Modify the program to take a given list of integers and returns the maximum and minimum values.", "input": "list_of_numbers = [3, 8, -1, 5]", "output": "def min_max(list_of_numbers):\n    min = list_of_numbers[0]\n    max = list_of_numbers[0]\n    for number in list_of_numbers:\n        if number > max:\n            max = number\n        elif number < min:\n            min = number\n    return min, max", "category": "Python"}, {"instruction": "Use a SQL query to extract all the rows from the table \"Employees\" that includes employees with the last name Smith.", "input": "", "output": "SELECT * \nFROM Employees \nWHERE last_name = 'Smith'", "category": "Python"}, {"instruction": "Implement a Python code that takes a string and reverses the characters in place.", "input": "string = \"This is easy\"", "output": "def reverse_in_place(string):\n    return string[::-1]", "category": "Python"}, {"instruction": "Create a function to check if an input string has unique characters or not.", "input": "string = \"unique\"", "output": "def has_unique_characters(string):\n    return len(string) == len(set(string))", "category": "Python"}, {"instruction": "Write a function that takes an input string and finds the number of non-printable characters.", "input": "", "output": "def count_non_printable_characters(string):\n    non_printable = ''.join(chr(i) for i in range(0, 32))\n    counter = 0\n    for char in string:\n        if char in non_printable:\n            counter+= 1\n    return counter", "category": "Python"}, {"instruction": "Generate a function to create a list of factors for a given integer.", "input": "", "output": "def factor_list(number):    \n    factors = []\n \n    i = 2\n    while i * i <= number:\n        if number % i:\n            i += 1\n        else:\n            number //= i\n            factors.append(i)\n    if number > 1:\n        factors.append(number)\n \n    return factors", "category": "Python"}, {"instruction": "Create a for loop to print every other letter in a given string.", "input": "string = \"Logic speaks to reason, not to the imagination\"", "output": "for i in range (0, len(string), 2):\n    print(string[i], end = '')", "category": "Python"}, {"instruction": "Create a calculator program using Python to do the following calculations.", "input": "A = 30;\nB = 15;\nC = 4;", "output": "def calculator(A, B, C):\n    add = A + B\n    subtract = A - B\n    multiply = A * C\n    divide = A / B\n    remainder = A % B\n    return add, subtract, multiply, divide, remainder", "category": "Python"}, {"instruction": "Create a program using Java to print the sum of the following five numbers.", "input": "int a = 2;\nint b = 5;\nint c = 8;\nint d = 10;\nint e = 13;", "output": "public class Sum{ \n    public static void main(String args[]) \n    {  \n        int a = 2;\n        int b = 5;\n        int c = 8;\n        int d = 10;   \n        int e = 13;\n        int sum = a + b + c + d + e; \n        System.out.println(\"Sum = \" + sum); \n    } \n}", "category": "Python"}, {"instruction": "Generate a general shopping list using Python.", "input": "", "output": "def generate_shopping_list():\n    list_items = ['Bread', 'Milk', 'Butter', 'Eggs', 'Cereal', 'Fruits', 'Veggies', 'Canned food', 'Frozen food', 'Cheese', 'Meat', 'Snacks', 'Coffee', 'Tea', 'Sugar', 'Salt', 'Herbs', 'Cooking oil', 'Detergent', 'Toilet paper']\n    return list_items", "category": "Python"}, {"instruction": "Generate a python code that takes a list of integers, prints out an array that is all True if the values are in the input list and all False otherwise.", "input": "list_of_numbers = [5, 7, 10, 2]", "output": "def boolean_search(list_of_numbers):\n    result_array = []\n    for elem in list_of_numbers:\n        result_array.append(elem in list_of_numbers)\n    return result_array", "category": "Python"}, {"instruction": "Write a code to change a string to have its first letter capitalized and the remaining characters in lower case.", "input": "mySTRING", "output": "\"\"\"\nChange a string to have its first letter capitalized and the remaining characters in lower case\n\"\"\"\n\ndef capitalize_string(s):\n  return s[0].upper() + s[1:].lower()\n  \nif __name__ == '__main__':\n    print(capitalize_string('mySTRING'))", "category": "Python"}, {"instruction": "Create a web browser automation script in Python to scrape the data from a website.", "input": "", "output": "from selenium import webdriver\n\n# Create webdriver object\ndriver = webdriver.Chrome()\n\n# Put target website URL\nurl = 'https://www.example.com/'\n\n# Navigate to the website\ndriver.get(url)\n\n# Scrape the data\ndata = driver.find_elements_by_xpath('//*[@class=\"data-class\"]')\nfor element in data:\n    print(element.text)\n\n# Close the browser\ndriver.close()", "category": "Python"}, {"instruction": "Write an SQL query to find the name and salary of employees who earn more than $100,000.", "input": "", "output": "SELECT name, salary FROM employee_data WHERE salary > 100000;", "category": "Python"}, {"instruction": "Create a string of length 100 using a Python loop and save it into a variable named 'string_100'.", "input": "", "output": "string_100 = ''\nfor i in range(100):\n string_100 += 'x'", "category": "Python"}, {"instruction": "Create a linear regression model using TensorFlow.", "input": "", "output": "import tensorflow as tf\n\n# Create array of feature vectors\nX = tf.constant([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]])\n\n# Create array of labels\ny = tf.constant([[10.0], [", "category": "Python"}, {"instruction": "Train a model to predict the labels of a handwritten digits dataset.", "input": "", "output": "import numpy as np\nfrom sklearn.datasets import load_digits\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Load the data\ndigits = load_digits()\nX = digits.data\ny = digits.target\n\n# Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# Train the model\nmodel = KNeighborsClassifier(n_neighbors=5)\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\nacc = model.score(X_test, y_test)\n\nprint(\"Accuracy:\", acc)", "category": "Python"}, {"instruction": "Change the following program so that it prints the squares of numbers from 0 to 10.", "input": "for i in range(10):\n print(i)", "output": "for i in range(11):\n print(i*i)", "category": "Python"}, {"instruction": "Write a CSS code that makes the text color blue.", "input": "", "output": "p {\n    color: blue;\n}", "category": "Python"}, {"instruction": "Write a regex expression to validate a username containing only letters, numbers, underscores, and hyphens.", "input": "", "output": "/^[a-zA-Z0-9_\\-]+$/", "category": "Python"}, {"instruction": "Edit the following markup so that it becomes valid HTML5.", "input": "<body>\n    <div><head>My Website</head></div>\n</body>", "output": "<body>\n    <head>My Website</head>\n    <div></div>\n</body>", "category": "Python"}, {"instruction": "Write a function to compress a string by counting the characters.", "input": "", "output": "def compressString(s): \n\tcomp_string = \"\"\n\tcount = 1\n\tfor i in range(len(s) - 1): \n\t\tif(s[i] == s[i+1]): \n\t\t\tcount+= 1\n\t\telse: \n\t\t\tcomp_string += s[i] + str(count) \n\t\t\tcount = 1\n\tcomp_string += s[i] + str(count) \n\treturn comp_string", "category": "Python"}, {"instruction": "Write a function to traverse a dictionary recursively and print all the keys.", "input": "", "output": "def printAllKeys(dictionary): \n    if type(dictionary) == dict: \n        for key in dictionary: \n            print(key) \n            printAllKeys(dictionary[key])", "category": "Python"}, {"instruction": "Given a pair of same-length strings, identify character matches in the same position.", "input": "str1 = 'Hello'\nstr2 = 'World'", "output": "def character_match(str1, str2):\n  match_list = []\n  for i in range(len(str1)):\n    if str1[i] == str2[i]:\n      match_list.append(str1[i])\n  return match_list", "category": "Python"}, {"instruction": "Identify the wrong statement.", "input": "", "output": "Python is a compiled language.  //Wrong statement. Python is an interpreted language.", "category": "Python"}, {"instruction": "Create a class in Java which computes the sum of squares of even numbers between k and n.", "input": "", "output": "public class SumSquares {\n    public static int sumSquares(int k, int n) {\n        int sum = 0;\n        for(int i = k; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += (i * i);\n            }\n        }\n        return sum;\n    }\n}", "category": "Python"}, {"instruction": "Edit this program to print the product of two numbers.", "input": "a = 10\nb = 5\n\nprint(\"The sum of a and b is \", a + b)", "output": "a = 10\nb = 5\n\nprint(\"The product of a and b is \", a * b)", "category": "Python"}, {"instruction": "Segregate the negative numbers to the left side and positive numbers to the right side of an array.", "input": "", "output": "def segregate_numbers(array): \n    j = 0\n    for i in range(len(array)): \n        if (array[i] <= 0): \n            array[i], array[j] = array[j], array[i] \n            j+=1\n    return array", "category": "Python"}, {"instruction": "Change this program to print the difference of a and b", "input": "a = 10\nb = 5\n\nprint(\"The sum of a and b is \", a + b)", "output": "print(\"The difference of a and b is \", a - b)", "category": "Python"}, {"instruction": "Describe an algorithm for finding the maximum value in a given list of integers.", "input": "", "output": "A simple algorithm to find the maximum value in a given list of integers is to start with the first element and compare it with the subsequent elements. If a larger element is found, update the maximum value and continue comparing. At the end of the loop, the maximum value will hold the maximum value from the given list.", "category": "Python"}, {"instruction": "Construct an SQL query to select all employees from the `employee` table whose age is less than or equal to 30.", "input": "", "output": "SELECT * FROM employee WHERE age <= 30;", "category": "Python"}, {"instruction": "Create an HTML page with a button and a text field to print the content of the text field when the button is clicked.", "input": "", "output": "<html>\n  <head>\n    <title>Print Text</title>\n  </head>\n  <body>\n    <input type=\"text\" id=\"textField\" />\n    <button onclick=\"printText()\">Print</button>\n    <script>\n      function printText(){\n        let text = document.getElementById(\"textField\").value;\n        console.log(text);\n      }\n    </script>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a REST API endpoint handler to get the latest books from a database.", "input": "", "output": "@app.route(\"/books/latest\", methods=[\"GET\"])\ndef get_latest_books():\n    cursor = conn.cursor()\n    query = \"SELECT * FROM books ORDER BY id DESC LIMIT 10;\"\n    cursor.execute(query)\n    books = cursor.fetchall()\n\n    return jsonify(books)", "category": "Python"}, {"instruction": "Write a function in Java to check if the length of a string is greater than 5.", "input": "String str = \"Hello World!\"", "output": "public static boolean isStringLongerThan5(String str) {\n  return str.length() > 5;\n}", "category": "Python"}, {"instruction": "Write a simple Bash script to display a welcome message.", "input": "", "output": "echo \"Welcome!\"", "category": "Python"}, {"instruction": "Use an array method to remove duplicates from a given array in JavaScript.", "input": "let myArr = [1, 2, 3, 1, 4, 3]", "output": "let myArr = [1, 2, 3, 4].filter((item, index, arr) => arr.indexOf(item) === index);", "category": "Python"}, {"instruction": "Compute the modulus of 3 and 4.", "input": "", "output": "3", "category": "Python"}, {"instruction": "Evaluate the following expression: 11 + 3 / 4.", "input": "", "output": "11.75", "category": "Python"}, {"instruction": "Edit the given Python code to remove duplicate items from the given list.", "input": "my_list = [1, 2, 2, 3, 4, 5, 4]", "output": "def remove_duplicate(my_list):\n    return list(set(my_list))\n\nmy_list = [1, 2, 2, 3, 4, 5, 4]\nprint(remove_duplicate(my_list)) # Output [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Modify the given Python code to remove any punctuations from the given string.", "input": "string = \"Hello, how are you?\"", "output": "import string\n\ndef remove_punctuation(string):\n    for punct in string.punctuation:\n        string = string.replace(punct, '')\n    return string\n\nstring = \"Hello, how are you?\"\nprint(remove_punctuation(string)) # output 'Hello how are you'", "category": "Python"}, {"instruction": "Create a table in SQL to store the names and email addresses of users.", "input": "", "output": "CREATE TABLE users ( \n  name VARCHAR(255) NOT NULL,\n  email VARCHAR(255) NOT NULL \n);", "category": "Python"}, {"instruction": "Given a list of strings and an input string, find the index of the input string in the list.", "input": "list = [\"red\", \"blue\", \"green\", \"yellow\"]\nstring = \"green\"", "output": "def find_string(list, target):\n    for index, value in enumerate(list):\n        if value == target:\n            return index\n\nlist = [\"red\", \"blue\", \"green\", \"yellow\"]\nstring = \"green\"\nprint(find_string(list, string)) # Output 2", "category": "Python"}, {"instruction": "Create a SQL query to delete all rows of a table named 'employees', where the employee's salary is below 50K.", "input": "", "output": "DELETE FROM employees \nWHERE salary < 50000;", "category": "Python"}, {"instruction": "Write an algorithm in pseudocode to reverse the order of numbers in a given array.", "input": "", "output": "Function ReverseOrder(A):\n  n = A.length\n  For i = 1 to n/2:\n    temp = A[i]\n    A[i] = A[n - i]\n    A[n - i] = temp\n  End\nEnd", "category": "Python"}, {"instruction": "Create a script to connect to a MySQL database using Python.", "input": "", "output": "import mysql.connector\n\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"yourusername\",\n  passwd=\"yourpassword\",\n  database=\"mydatabase\"\n)", "category": "Python"}, {"instruction": "Construct an if-else statement in JavaScript that prints the largest number among two input numbers.", "input": "", "output": "let x = 12;\nlet y = 5;\n\nif ( x > y ) {\n  console.log(x);\n} else {\n  console.log(y);\n}", "category": "Python"}, {"instruction": "Generate a pandas DataFrame with three columns containing random integer numbers between 0 and 10.", "input": "", "output": "import pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(np.random.randint(0, 11, size=(3, 3)), \n                  columns=['Column1', 'Column2', 'Column3'])", "category": "Python"}, {"instruction": "Using the provided snippet of code below, create a function in Java to convert a given array of strings to lowercase.", "input": "", "output": "public static String[] toLowerCase(String[] words) {\n    String[] lowerWords = new String[words.length];\n    for (int i = 0; i < words.length; i++) \n        lowerWords[i] = words[i].toLowerCase();\n    return lowerWords; \n}", "category": "Python"}, {"instruction": "Using the given snippet of code, create a compiler to check if a given string is valid Python code.", "input": "", "output": "import ast \ndef check_syntax(code): \n  try: \n    ast.parse(code) \n  except SyntaxError: \n    return False\n  else: \n    return True", "category": "Python"}, {"instruction": "Construct a matrix in Python containing 5 rows and 4 columns of random floating point numbers between 0 and 1.", "input": "", "output": "import numpy as np\n\nmatrix = np.random.uniform(0,1, (5,4))", "category": "Python"}, {"instruction": "Compile and Run this program in Python.", "input": "a = 10\nb = 5\n\nprint(\"The sum of a and b is \", a + b)", "output": "The sum of a and b is 15", "category": "Python"}, {"instruction": "Create a script that can predict the next letter in a given string of text.", "input": "Hello", "output": "\"\"\"\nCreate a script that can predict the next letter in a given string of text\n\"\"\"\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\ndef predict_next_letter(text):\n  data = [ord(char) for char in text]\n  data = pad_sequences([data], maxlen=10, truncating='post')\n  prediction = model.predict(data)\n  index = tf.argmax(prediction[0]).numpy()\n  \n  return chr(index)\n\nif __name__ == '__main__':\n    print(predict_next_letter('Hello'))", "category": "Python"}, {"instruction": "Create a deep learning model to output a sentence in French when given an English sentence as input.", "input": "I like to eat apples.", "output": "\"\"\"\nCreate a deep learning model to output a sentence in French when given an English sentence as input\n\"\"\"\nimport tensorflow as tf\nimport numpy as np\n\n# Input and output languages\ninput_lang = 'EN'\noutput_lang = 'FR'\n\n# Define the model\nmodel = tf.keras.Sequential([\n  tf.keras.layers.Embedding(input_dim=vocab_size, output_dim=128, input_length=10),\n  tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64)),\n  tf.keras.layers.Dense(vocab_size, activation='softmax')\n])\n\n# Compile and train the model\nmodel.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              optimizer=tf.keras.optimizers.Adam())\nmodel.fit(input_tensor, output_tensor, epochs=100) \n\n# Make a prediction\nsentence = 'I like to eat apples.'\npredicted_sentence = translate(sentence, input_lang, output_lang, model) \n\nprint(predicted_sentence) # J'aime manger des pommes.", "category": "Python"}, {"instruction": "Create a while loop using the given conditions.", "input": "counter = 0\nmax_count = 5", "output": "while counter < max_count:\n    counter += 1", "category": "Python"}, {"instruction": "Create an object of key-value pairs that contains 5 programming languages.", "input": "", "output": "const languages = {\n  'Java': 'Object-oriented, high-level language',\n  'Python': 'Interpreted, scripted, high-level language',\n  'C++': 'Object-oriented, compiled, low-level language',\n  'JavaScript': 'Interpreted, scripted, high-level language',\n  'C': 'Compiled, low-level language'\n};", "category": "Python"}, {"instruction": "Write a ReactJS code to render a button element with the text \"Submit\".", "input": "", "output": "<button>Submit</button>", "category": "Python"}, {"instruction": "Create a function that evaluates the quadratic equation.", "input": "", "output": "def quadratic_equation(a,b,c):\n   discriminant = pow(b,2)-4*a*c\n   if(discriminant < 0):\n      return \"No real solutions\"\n   elif(discriminant == 0):\n      return (-b + pow(discriminant, 0.5))/(2*a)\n   else:\n      return ((-b + pow(discriminant, 0.5))/(2*a), (-b - pow(discriminant, 0.5))/(2*a))", "category": "Python"}, {"instruction": "Write a CSS style to make all paragraphs in a page bold and red.", "input": "", "output": "p{\n font-weight: bold;\n color: red;\n}", "category": "Python"}, {"instruction": "Write an SQL query to retrieve customer emails ending in .net", "input": "", "output": "SELECT email FROM customers WHERE email LIKE '%.net';", "category": "Python"}, {"instruction": "Write a Python function that calculates the cosine distance between two vectors.", "input": "vector1 = [1, 2, 3]\nvector2 = [4, 5, 6]", "output": "def cosine_distance(a, b):\n  numerator = 0 \n  sum_a_sq = 0 \n  sum_b_sq = 0\n  for (x, y) in zip(a, b):\n    numerator += x*y\n    sum_a_sq += x**2\n    sum_b_sq += y**2\n  \n  denominator = (sum_a_sq * sum_b_sq)**.5\n  return numerator/denominator\n\ncosine_distance(vector1, vector2)", "category": "Python"}, {"instruction": "Describe a boolean condition that checks whether a name is 5 letters long.", "input": "", "output": "name.length == 5", "category": "Python"}, {"instruction": "Create a function that takes in two parameters\u2015a main word and a searching word\u2015and checks if the searching word is present in the main word.", "input": "main_word = \"Hello\"\nsearching_word = \"el\"", "output": "def search_word(main_word, searching_word):\n    \"\"\"Check if the searching word is present in the main word.\"\"\"\n\n    # iterate over the main word, and check if \n    # any substring is equal to the searching word\n    for i in range(0, len(main_word)):\n        if main_word[i:(i + len(searching_word))] == searching_word:\n            return True\n\n    return False", "category": "Python"}, {"instruction": "Modify the given code to find the factorial of a specified number.", "input": "def factorial_(num):\n    \"\"\"Find the factorial of a given number\"\"\"\n    # TODO\n    return 1", "output": "def factorial_(num):\n    \"\"\"Find the factorial of a given number\"\"\"\n\n    # initialize the value of factorial\n    factorial = 1\n\n    # multiply the number with the numbers \n    # below its value to get the factorial\n    for i in range(1, num+1):\n        factorial *= i\n    \n    return factorial", "category": "Python"}, {"instruction": "Make a script that checks if a given integer value is divisible by 3 and 5 both.", "input": "value = 10", "output": "def check_divisible(value):\n    \"\"\"Check if value is divisible by 3 and 5.\"\"\"\n    # check if value is divisible by 3 and 5\n    if value % 3 == 0 and value % 5 == 0:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Create a function that takes in three parameters, a main string, searching substring, and a replacement string, and returns the main string with all occurrences of the searching substring replaced by the replacement string.", "input": "main_string = \"Helllllllllllo World\"\nsearching_substring = \"lllllllll\"\nreplacement_string = \"y\"", "output": "def replace_string(main_string, searching_substring, replacement_string):\n    \"\"\"Replace all occurrences of the searching substring in the main string with the replacement string.\"\"\"\n    \n    # replace all occurrences of the searching substring with the replacement string\n    replaced_string = main_string.replace(searching_substring, replacement_string)\n\n    return replaced_string", "category": "Python"}, {"instruction": "Modify the JavaScript code given below to return the sum of all numbers from 0 to 10 (inclusive).", "input": "function sum_(start, end) {\n    // TODO\n    return 0;\n}", "output": "function sum_(start, end) {\n    let sum = 0;\n\n    // iterate over the range and add the elements\n    // to the 'sum' variable\n    for (let i = start; i <= end; i++) {\n        sum += i;\n    }\n\n    return sum;\n}", "category": "Python"}, {"instruction": "Make a function that adds two lists of numbers together element-wise.", "input": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]", "output": "def add_lists(list1, list2): \n    res = [] \n    for i in range(0, len(list1)): \n        res.append(list1[i] + list2[i]) \n    return res", "category": "Python"}, {"instruction": "Write a Java method using the given parameters.", "input": "methodName: sum\nparameters: int number1, int number2", "output": "public static int sum(int number1, int number2) { \n    return number1 + number2; \n}", "category": "Python"}, {"instruction": "Using the given input, output the longest word in the array.", "input": "words = [\"water\", \"grand\", \"piano\", \"mountain\"]", "output": "def longest(words): \n    max_len = 0\n    \n    for i in range(0, len(words)): \n        if (len(words[i]) > max_len): \n            max_len = len(words[i])\n            longest = words[i] \n  \n    return longest", "category": "Python"}, {"instruction": "Write a loop to iterate over a string and print each character on a new line.", "input": "text = \"Hello world!\"", "output": "for char in text: \n    print(char)", "category": "Python"}, {"instruction": "Write a stack-based language for a simple calculator that can perform the following tasks: Add, subtract, multiply, and divide integers.", "input": "", "output": "//Reusable \"push\" and \"pop\" functions\n\nvoid push(Stack *st, int val) {\n    st->arr[st->top] = val;\n    st->top++;\n}\n\nint pop(Stack *st) {\n    return st->arr[--(st->top)];\n}\n\n//Functions for performing operations\n\nint add(Stack *st) {\n    int x = pop(st);\n    int y = pop(st);\n    return x + y;\n}\n\nint subtract(Stack *st) {\n    int x = pop(st);\n    int y = pop(st);\n    return x - y;\n}\n\nint multiply(Stack *st) {\n    int x = pop(st);\n    int y = pop(st);\n    return x * y;\n}\n\nint divide(Stack *st) {\n    int x = pop(st);\n    int y = pop(st);\n    return x / y;\n}", "category": "Python"}, {"instruction": "Design a recursive algorithm to generate the Fibonacci sequence.", "input": "", "output": "def Fibonacci(n): \n   if n<0: \n      print(\"Incorrect input\") \n   # First Fibonacci number is 0 \n   elif n==0: \n      return 0\n   # Second Fibonacci number is 1 \n   elif n==1: \n      return 1\n   else: \n      return Fibonacci(n-1)+Fibonacci(n-2)", "category": "Python"}, {"instruction": "Make an algorithm to rotate a matrix by 90 degrees.", "input": "[[1,2,3], \n[4,5,6], \n[7,8,9]]", "output": "def rotate_90_degrees(matrix):\n    n = len(matrix[0]) \n    result = [[0 for x in range(n)] for y in range(n)]  \n    for i in range(n): \n        for j in range(n): \n            result[j][n-i-1] = matrix[i][j] \n    return result", "category": "Python"}, {"instruction": "Convert the following text from a camel case string to a space-separated one.", "input": "camelCaseString", "output": "camel Case String", "category": "Python"}, {"instruction": "Edit the code to display the output \u201cWelcome to coding!\u201d", "input": "print(\"Welcome to code\")", "output": "print(\"Welcome to coding!\")", "category": "Python"}, {"instruction": "Define a function to print out the elements in a list without using a loop.", "input": "", "output": "def print_elements(my_list):\n    if not my_list: \n        return\n    print(my_list[0])\n    print_elements(my_list[1:])", "category": "Python"}, {"instruction": "Create a Python program to define a factorial of a given number.", "input": "", "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)", "category": "Python"}, {"instruction": "Create a function that searches for elements in an array and returns the index position of the element.", "input": "array = [3, 7, 11, 14, 19]\nelement = 11", "output": "def search_for_element(array, element):\n    \"\"\"Search array for element and return index position.\"\"\"\n\n    for i in range (0, len(array)): #loop through array\n        if array[i] == element: #check if element is equal to the value in the array\n            return i #return index position\n\n    return -1 #if element is not found, return -1", "category": "Python"}, {"instruction": "Modify the given program to print \"Hello, foo\" where \"foo\" is user input.", "input": "System.out.println(\"Hello, World!\");", "output": "import java.util.Scanner;\npublic class Test {\n    public static void main(String args[]){\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter in a name: \");\n        String name = scanner.nextLine(); \n        System.out.println(\"Hello, \" + name + \"!\");\n    }\n}", "category": "Python"}, {"instruction": "Parse a list of numbers from a string in Python.", "input": "s = \"1, 2, 3, 4, 5, 6\"", "output": "import re\nlist = re.findall(r'\\d+', s)", "category": "Python"}, {"instruction": "Modify the following code to display alter the existing function to accept an additional parameter.", "input": "def foo(a, b):\n    return a + b", "output": "def foo(a, b, c):\n    return a + b + c", "category": "Python"}, {"instruction": "Create a SQL query to find the least expensive product.", "input": "", "output": "SELECT MIN(Price)\nFROM Products;", "category": "Python"}, {"instruction": "Create an array with 10 random elements.", "input": "", "output": "[24, 18, 13, 37, 11, 87, 71, 6, 45, 97]", "category": "Python"}, {"instruction": "Convert a given 2D point to the polar representation.", "input": "Point: (1,1)", "output": "def polar_rep(point):\n    x, y = point\n    r = math.sqrt(x**2 + y**2) \n    theta = math.atan2(y, x)\n    return (r, theta)", "category": "Python"}, {"instruction": "Generate a random password consisting of alphanumeric characters and special characters.", "input": "", "output": "import string \nimport random \n  \ndef randomPassword(): \n    password_characters = string.ascii_letters +  string.digits + '!@#$%^&*()'\n    password = random.choice(string.ascii_lowercase) #Include atleast one lowercase\n    password += random.choice(string.ascii_uppercase) #Include atleast one uppercase\n    password += random.choice(string.digits) #Include atleast one number\n    password += random.choice(string.punctuation) #Include atleast one special character\n\n    for i in range(8):\n        password += random.choice(password_characters)\n\n    return password", "category": "Python"}, {"instruction": "Implement a text classifier for recognizing phrases that are indicative of anger in a sentence.", "input": "He threw the ball so hard, his anger couldn't be concealed.", "output": "def is_angry(sentence): \n    angry_phrases = [\"angry\", \"enraged\", \"aggrieved\", \"ineluctably\", \"ireful\", \n                    \"lusty\", \"tedious\", \"vexed\", \"irked\", \"wrath\"] \n    words_in_sentence = sentence.lower().split(\" \")\n\n    for phrase in angry_phrases: \n        if phrase in words_in_sentence: \n            return True \n    return False", "category": "Python"}, {"instruction": "You need to trim a string by removing leading and trailing whitespace characters.", "input": "string = \"    hello    \"", "output": "string.trim();", "category": "Python"}, {"instruction": "Parse an XML document and return a JSON object containing the data.", "input": "<book>\n  <title>Cat in the Hat</title>\n  <author>Dr. Seuss</author>\n  <year>1957</year>\n</book>", "output": "\"\"\"\nParse an XML document and return a JSON object containing the data\n\"\"\"\nimport xml.etree.ElementTree as ET\nimport json\n\ndef parse_xml(xml_string):\n  root = ET.fromstring(xml_string)\n  \n  book = {}\n  for child in root:\n    book[child.tag] = child.text\n    \n  return json.dumps(book)\n  \nif __name__ == '__main__':\n    print(parse_xml('<book><title>Cat in the Hat</title><author>Dr. Seuss</author><year>1957</year></book>'))", "category": "Python"}, {"instruction": "Write a procedure in PL/SQL to count the number of employees in a company.", "input": "", "output": "CREATE OR REPLACE PROCEDURE count_employees AS \nBEGIN\n\tSELECT COUNT(*)\n\tFROM Employees;\nEND;", "category": "Python"}, {"instruction": "Compare the given strings to check if they are equal.", "input": "string1 = \"hello world\" \nstring2 = \"hello world\"", "output": "if (string1 == string2) \n    cout << \"Strings are equal\"; \nelse \n    cout << \"Strings are not equal\";", "category": "Python"}, {"instruction": "Create a class in Python to build a Frequency Table from a given array of numbers.", "input": "[1,1,1,2,2,3,3,3]", "output": "class FrequencyTable:\n    def __init__(self, arr):\n        self.table = {}\n        for num in arr:\n            if num in self.table:\n                self.table[num] += 1\n            else:\n                self.table[num] = 1\n    def query(self, num):\n        return self.table.get(num, 0)", "category": "Python"}, {"instruction": "Write a function to create a deep copy of a JSON object.", "input": "", "output": "def deep_copy(json_object):\n    import json\n    return json.loads(json.dumps(json_object))", "category": "Python"}, {"instruction": "Write a Python function to check whether a string is a palindrome or not, ignoring spaces and special characters.", "input": "", "output": "def is_palindrome_ignore_space(word):\n    filtered_word = [i.lower() for i in word if i.isalpha()] \n    return filtered_word == filtered_word[::-1]", "category": "Python"}, {"instruction": "Create a function that takes a single-level JSON object as an argument and prints out all keys with a value of type string.", "input": "{\n \"name\": \"John\",\n \"age\": 34,\n \"isMarried\": True \n}", "output": "def print_string_keys(json_object):\n  for key in json_object:\n      if isinstance(json_object[key], str):\n          print(key)", "category": "Python"}, {"instruction": "Write a function that takes a list of integers and returns the shortest continuous increasing subarray in the list.", "input": "[2,3,3,4,3,4,5,6,7]", "output": "def shortest_increasing_subarray(nums):\n    res, curr = float('inf'), 0\n    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]: \n            curr += 1\n        else:\n            res = min(res, curr)\n            curr = 0\n    return max(res, curr) + 1", "category": "Python"}, {"instruction": "Write a function that takes a string and returns the number of substrings with at least k different characters", "input": "\"abacdc\"", "output": "def num_distinct_substrings(S, k):\n   n = len(S)\n   distinct_substrings = set()\n   for i in range(n):\n      for j in range(i+k, n+1):\n         distinct_substring = \"\".join(sorted(list(set(S[i:j]))))\n         distinct_substrings.add(distinct_substring)\n   return len(distinct_substrings)", "category": "Python"}, {"instruction": "Implement a function that takes a 2D matrix and rotates the matrix 90 degrees clockwise.", "input": "[[1,2,3],\n [4,5,6],\n [7,8,9]]", "output": "def rotate_2d_matrix(matrix):\n    n = len(matrix[0])\n    m = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            m[i][j] = matrix[n-j-1][i]\n    return m", "category": "Python"}, {"instruction": "Create a function which takes a list of integers as input, and returns the max value of the list.", "input": "[7, 9, 5]", "output": "def get_max(int_list):\n  return max(int_list)", "category": "Python"}, {"instruction": "Create a function that takes two strings as input and returns true if the characters in one of the string appear in order in the other string.", "input": "mystring isthis", "output": "\"\"\"\nCreate a function that takes two strings as input and returns true if the characters in one of the string appear in order in the other string\n\"\"\"\ndef is_substring(str1, str2):\n  i = 0\n  for char in str2:\n    if char == str1[i]:\n      i += 1\n    if i == len(str1):\n      return True\n  return False\n\nif __name__ == '__main__':\n    print(is_substring('mystring', 'isthis')) # True", "category": "Python"}, {"instruction": "Create a function that can transform a string of text into an object containing the number of occurrences of each letter in the string.", "input": "Hello World", "output": "\"\"\"\nCreate a function that can tranform a string of text into an object containing the number of occurrences of each letter in the string\n\"\"\"\ndef count_letters(s):\n  letter_dict = {}\n  for letter in s:\n    if letter in letter_dict:\n      letter_dict[letter] += 1\n    else:\n      letter_dict[letter] = 1\n  \n  return letter_dict\n\nif __name__ == '__main__':\n    print(count_letters('Hello World')) # {'H': 1, 'e': 1, 'l': 3, 'o': 2, 'W': 1, 'r': 1, 'd': 1}", "category": "Python"}, {"instruction": "Given a set of points and an origin point, calculate the distance between the origin point and each point in the set.", "input": "[(1,1),(4,4),(3,3)] (0,0)", "output": "\"\"\"\nGiven a set of points and an origin point, calculate the distance between the origin point and each point in the set\n\"\"\"\nimport math \n\ndef points_distance(points, origin):\n    distances = []\n    for point in points:\n        distances.append(math.sqrt((point[0]-origin[0])**2 + (point[1]-origin[1])**2))\n    return distances\n\nif __name__ == '__main__':\n    print(points_distance([(1,1),(4,4),(3,3)], (0,0))) # [1.4142135623730951, 5.65685424949238, 4.242640687119285]", "category": "Python"}, {"instruction": "Create a class that can represent a 2D coordinate system.", "input": "", "output": "\"\"\"\nCreate a class that can represent a 2D coordinate system\n\"\"\"\nclass CoordinateSystem:\n  def __init__(self,x,y):\n    self.x = x\n    self.y = y\n  \n  def add(self,other):\n    x = self.x + other.x\n    y = self.y + other.y\n    return CoordinateSystem(x,y)\n\nif __name__ == '__main__':\n    a = CoordinateSystem(1,2)\n    b = CoordinateSystem(3,4)\n    print(a.add(b)) # <__main__.CoordinateSystem object at 0x000002B50FE37B70>", "category": "Python"}, {"instruction": "Create a function that can concatenate two lists into a string separated by comma.", "input": "[1, 2, 3] [4, 5, 6]", "output": "\"\"\"\nCreate a function that can concatenate two lists into a string separated by comma\n\"\"\"\ndef concat_lists(list1, list2):\n  return ','.join([str(i) for i in list1 + list2]) \n  \nif __name__ == '__main__':\n    print(concat_lists([1, 2, 3], [4, 5, 6]))", "category": "Python"}, {"instruction": "Generate a random password of length 16 using the letters a-z.", "input": "", "output": "\"\"\"\nGenerate a random password of length 16 using the letters a-z\n\"\"\"\nimport random\n\ndef generate_password():\n  letters = 'abcdefghijklmnopqrstuvwxyz'\n  return ''.join(random.choice(letters) for i in range(16))\n\nif __name__ == '__main__':\n    print(generate_password())", "category": "Python"}, {"instruction": "Given a 2D matrix of integers, find a path from the leftmost column to the right-most column that maximises the sum of numbers.", "input": "[[3,4,7,2],\n[2,7,4,1],\n[7,1,2,4],\n[8,2,2,7]]", "output": "def max_sum_path(matrix):\n    rows, columns = len(matrix), len(matrix[0])\n    dp = [[float(\"-inf\") for i in range(columns)] for j in range(rows)]\n    dp[0][0] = matrix[0][0]\n    for i in range(rows):\n        for j in range(columns):\n            if i > 0:\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + matrix[i][j])\n            if j > 0:\n                dp[i][j] = max(dp[i][j], dp[i][j-1] + matrix[i][j])\n    return dp[-1][-1]", "category": "Python"}, {"instruction": "Given a 2D matrix of integers, retrive the maximum sum submatrix.", "input": "[[2,-2,3,4],[-4,-3,1,1],[-1,5,5,-3]]", "output": "def max_sum_submatrix(matrix):\n    rows, columns = len(matrix), len(matrix[0])\n    dp = [[0] * columns for _ in range(rows)]\n    for i in range(rows):\n        for j in range(columns):\n            dp[i][j] = matrix[i][j]\n            if i > 0:\n                dp[i][j] += dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i][j-1]\n            if i > 0 and j > 0:\n                dp[i][j] -= dp[i-1][j-1]\n                \n    max_sum = float('-inf')\n    for r1 in range(rows):\n        for r2 in range(r1, rows):\n            for c1 in range(columns):\n                for c2 in range(c1, columns):\n                    current_sum = dp[r2][c2]\n                    if r1 > 0:\n                        current_sum -= dp[r1-1][c2]\n                    \n                    if c1 > 0:\n                        current_sum -= dp[r2][c1-1]\n                    \n                    if r1 > 0 and c1 > 0:\n                        current_sum += dp[r1-1][c1-1]\n                    \n                    max_sum = max(max_sum, current_sum)\n    return max_sum", "category": "Python"}, {"instruction": "Write a function that checks if a given list of integers is sorted in ascending order.", "input": "", "output": "def is_ascending_order(nums):\n    if len(nums) == 0 or len(nums) == 1:\n        return True\n    if nums[0] < nums[1]:\n        return is_ascending_order(nums[1:])\n    return False", "category": "Python"}, {"instruction": "Given a 2D array of binary values and another 2D array, find the indices of the first array where the values of both arrays are equivalent.", "input": "array1 = [[1, 0, 0, 1],[1, 0, 1, 0],[0, 0, 0, 1],[1, 0, 1, 0]]\narray2 = [[1, 0, 1, 0], [1, 0, 0, 1], [0, 0, 0, 1], [1, 0, 0, 1]]", "output": "def find_empty_position(array1, array2):\n    results = []\n    for i in range(len(array1)):\n        for j in range(len(array1[0])):\n            if array1[i][j] == array2[i][j] and array1[i][j] == 0:\n                results.append((i, j))\n    return results", "category": "Python"}, {"instruction": "Create a regex pattern to match any 4-digit integer.", "input": "", "output": "\\d{4}", "category": "Python"}, {"instruction": "Pack a string of characters into an array of length 8", "input": "var myString = \"abcdefgh\"", "output": "function packChars(str) {\n    var arr = [];\n    for (var i = 0; i < 8; i++) {\n        arr.push(str[i] || \" \");\n    }\n    return arr;\n}\npackChars(myString);\n// Returns [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]", "category": "Python"}, {"instruction": "Implement a class which stores a list of strings and provides a method to filter out the items containing an 'a' character.", "input": "", "output": "class StringList {\n    constructor(arr) {\n        this.list = arr;\n    }\n\n    filterA() {\n        return this.list.filter(val => !val.includes('a'))\n    }\n}", "category": "Python"}, {"instruction": "Create a regex that validates a numeric zip code with 5 digits.", "input": "", "output": "let zipCodeRegEx = /^\\d{5}$/;", "category": "Python"}, {"instruction": "Write a script to iterate over all elements in a list, and sum up all integers greater than 5.", "input": "var myList = [3, 7, 5, 6, 1]", "output": "function sumOfInt(arr) {\n    var sum = 0;\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] > 5) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nsumOfInt(myList);\n// Returns 13", "category": "Python"}, {"instruction": "Normalize a string by replacing all sequence of whitespaces with a single space.", "input": "var myString = \" Hello    World  \"", "output": "function normalizeString(str) {\n    return str.replace(/  +/g, ' ').trim();\n}\nnormalizeString(myString);\n// Returns \"Hello World\"", "category": "Python"}, {"instruction": "Rewrite this function to use a binary search instead.", "input": "def linear_search(arr, x): \n    for i in range (len(arr)): \n        if arr[i] == x: \n            return i \n    return -1", "output": "def binary_search(arr, x): \n    start = 0\n    end = len(arr) - 1\n  \n    while start <= end: \n        mid = start + (end - start) // 2 \n        if arr[mid] == x: \n            return mid \n        elif arr[mid] < x: \n            start = mid + 1\n        else: \n            end = mid - 1  \n    return -1", "category": "Python"}, {"instruction": "Find the first occurrence of substring \"data\" in the given string.", "input": "String: \"Data Science is a field of study\"", "output": "The first occurrence of substring \"data\" can be found at position 0 in the given string.", "category": "Python"}, {"instruction": "Write a shell script to print the longest word in a sentence.", "input": "string = \"This is a sentence with words of different lengths\"", "output": "#!/bin/bash\n\nstring=\"This is a sentence with words of different lengths\"\n\n# Separate the sentence into words\nwords=($string)\n\n# Declare variables\nmax_length=0 \nresult=\"\"\n\n# Iterate over each word and find the one with the maximum length\nfor word in \"${words[@]}\"; do\n  length=${#word}\n  if (( length > max_length )); then\n  \tmax_length=$length\n    result=$word\n  fi\ndone\n\n# Print the result \necho $result", "category": "Python"}, {"instruction": "Describe how to use the reduce() function in Python.", "input": "", "output": "The reduce() function in Python is used to apply a particular function passed in its argument to all of the list elements mentioned in the sequence passed along. This function is defined in the \u201cfunctools\u201d module. It applies the function in a manner that the resultant of the function of the current element and the next element is the new element, and so the process continues until the end of the list is reached. For example, to find the sum of all elements in a list:\n\nlist_nums = [2, 3, 4]\n\ndef list_sum(x, y):\n     return x + y\n\nlist_sum = reduce(list_sum, list_nums)\n\nprint(\"Output:\", list_sum)", "category": "Python"}, {"instruction": "Output true if a given expression evaluates to true and false if it doesn't.", "input": "expression = \"2 + 2 == 4\"", "output": "\"\"\"\nOutput true if a given expression evaluates to true and false if it doesn't\n\"\"\"\n\nexpression = \"2 + 2 == 4\"\n\ndef evaluate_expression(expression):\n    return eval(expression)\n\nif __name__ == '__main__': \n    print(evaluate_expression(expression))", "category": "Python"}, {"instruction": "Write a code to find the two largest numbers in an array and return them in reverse order.", "input": "array = [7,2,9,3,1,5]", "output": "\"\"\"\nFind the two largest numbers in an array and return them in reverse order\n\"\"\" \n\narray = [7,2,9,3,1,5]\n\ndef largest_numbers(array):\n    largest = 0\n    second_largest = 0\n    for i in array:\n        if i > largest:\n            second_largest = largest\n            largest = i\n        elif i > second_largest:\n            second_largest = i\n    return [largest, second_largest]\n \nif __name__ == '__main__':\n    print(largest_numbers(array))", "category": "Python"}, {"instruction": "Write an SQL query to identify unique months and years that appear in a table.", "input": "Table: Appointments\nid | month | year", "output": "SELECT DISTINCT month, year\nFROM Appointments;", "category": "Python"}, {"instruction": "Create a text-based game in Python.", "input": "", "output": "print(\"Welcome to the Text-Based Adventure Game!\") \n    \nplayer_name = input(\"What is your name? \") \n    \nprint(\"Hello \" + player_name + \", let's begin!\") \n    \nprint(\"You are walking through a dark forest, it is very quiet and there is a strange feeling of unease\") \n\nwhile True: \n    print(\"What do you want to do? (Enter 'help' for a list of commands)\") \n\n    player_action = input() \n\n    if player_action == 'help': \n        print(\"Here are the commands you can use: move, search, look, take, inventory\") \n    elif player_action == 'move': \n        print(\"Which direction do you want to move? Enter 'north', 'south', 'east' or 'west'\") \n    elif player_action == 'search':\n        print(\"You search the area and find a mysterious-looking object\") \n    elif player_action == 'look': \n        print(\"You look around and see nothing special\") \n    elif player_action == 'take': \n        print(\"You take the item and add it to your inventory\") \n    elif player_action == 'inventory': \n        print(\"You check your inventory and see the mysterious-looking object\") \n    else: \n        print(\"That command does not exist. Please enter 'help' for a list of commands\")", "category": "Python"}, {"instruction": "How can we create a function in C that prints the number of elements in an array?", "input": "", "output": "int array_count_elements(int array[]) {\n    int count = 0;\n    while (array[count] != '\\0') {\n        count++; \n    }\n    return count;\n}", "category": "Python"}, {"instruction": "Create a new object in JavaScript and assign it a property called \"name\".", "input": "", "output": "var obj = { name: ''};", "category": "Python"}, {"instruction": "How would you check if a list of integers contains only even numbers?", "input": "", "output": "The easiest way to check if a list of integers contains only even numbers is to iterate over the list and check if each element is divisible by 2. If all elements are divisible by 2, then the list contains only even numbers.\n\n\ndef check_even(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return False \n    return True\n        \n\nlist_of_nums = [2, 4, 6]\n\nresult = check_even(list_of_nums)\nprint(result) # Output: True", "category": "Python"}, {"instruction": "Given a linked list, write a function to reverse it.", "input": "", "output": "def reverse_linked_list(head):\n    if head is None or head.next is None:\n        return head\n\n    # Get second node\n    current = head.next\n    # Set first node as tail\n    head.next = None\n    # Set next of second node as third node\n    next = current.next\n\n    while(next):\n        # reverse pointer\n        current.next = head\n        # Move head pointer one position forward\n        head = current\n        # Move current pointer one position forward\n        current = next\n        # Move next pointer one position forward\n        next = current.next\n    # Append last node\n    current.next = head\n    return current", "category": "Python"}, {"instruction": "Explain the recursive implementation of the binary search algorithm.", "input": "", "output": "The binary search algorithm is a divide-and-conquer algorithm that finds a target value in a sorted array by repeatedly dividing the search interval in half. The recursive implementation of the binary search algorithm begins by considering the middle element of the array; if it is the target value, the algorithm returns a successful search result. If not, the algorithm determines if the target value is less than or greater than the value of the middle element. If the target value is less than the middle element, the entire right part of the array will be discarded. Then, the algorithm applies itself recursively to the remaining part of the array and continuously halves the search interval until the target value is found.", "category": "Python"}, {"instruction": "Given a list of numbers, write a function to return a list containing the cumulative sum of all elements in the input list.", "input": "[1, 2, 3, 4]", "output": "def cumulative_sum(lst):\n    res = []\n    sums = 0\n    for num in lst:\n        sums += num\n        res.append(sums)\n    return res\n\n# Example\ncumulative_sum([1, 2, 3, 4]) # Output: [1, 3, 6, 10]", "category": "Python"}, {"instruction": "Access the 3rd element in a JSON Array", "input": "[1, 2, 3, 4, 5]", "output": "array[2] //3", "category": "Python"}, {"instruction": "Using CSS, create a class called \"large-margin\" which sets top and bottom margins of 10 pixels.", "input": "", "output": ".large-margin {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}", "category": "Python"}, {"instruction": "Write a function in Python that takes a number n as its parameter and returns the sum of the squares of the first n natural numbers", "input": "", "output": "def sum_of_squares(n):\n    result = 0\n    for i in range(1, n + 1):\n        result += i**2\n    return result", "category": "Python"}, {"instruction": "Generate a CSS code to set the font size of all <p> tags.", "input": "", "output": "p {\n    font-size: 16px;\n}", "category": "Python"}, {"instruction": "Design a function to calculate the standard deviation of a set of data", "input": "[2, 4, 1, 6, 8]", "output": "public static double calculateStandardDeviation(List<Integer> list) {\n    double mean = computeMean(list);\n    double temp = 0; \n    for(double num: list) \n        temp += (num-mean)*(num-mean); \n    double variance = temp/list.size();\n    double standardDeviation = Math.sqrt(variance); \n    return standardDeviation; \n}", "category": "Python"}, {"instruction": "Generate a correct HTML anchor tag for a link to \"example.com\"", "input": "", "output": "<a href=\"https://example.com\">example.com</a>", "category": "Python"}, {"instruction": "How will you modify the following Ruby code to convert a given number to its corresponding alphabetical letter?", "input": "num = 56", "output": "num += 64\nletter = num.chr\nputs letter\n# Output: '8'", "category": "Python"}, {"instruction": "Write code to create a function in JavaScript to reverse a given array.", "input": "var input = [1, 2, 3, 4, 5];", "output": "function reverseArray(input) {\n    let result = [];\n    for (let i = input.length - 1; i >= 0; i--) {\n        result.push(input[i]);\n    }\n    return result;\n}", "category": "Python"}, {"instruction": "Write an SQL query to update the salary of all employees with the title 'Manager' to $50000.", "input": "", "output": "UPDATE employees\n SET salary = 50000\n WHERE title = 'Manager';", "category": "Python"}, {"instruction": "Write a JavaScript code to calculate the sum of two numbers and return the result.", "input": "num1 = 5;\nnum2 = 7;", "output": "let result = num1 + num2;\nreturn result; // 12", "category": "Python"}, {"instruction": "Rewrite the following PHP code to add a new item to the array.", "input": "$my_array = array('apple', 'orange');", "output": "$my_array = array('apple', 'orange', 'banana');", "category": "Python"}, {"instruction": "Write a C++ code to create a vector of integers and then sort them in increasing order.", "input": "vector<int> v = {3, 1, 5, 4, 7, 2};", "output": "#include <algorithm>\n#include <vector>\n \nusing namespace std;\n \nint main()\n{\n    vector<int> v = {3, 1, 5, 4, 7, 2};\n    sort(v.begin(), v.end());\n    return 0;\n}", "category": "Python"}, {"instruction": "How do you remove an item from an array in JavaScript?", "input": "", "output": "In JavaScript, you can remove an item from an array using the \"splice()\" method. The method takes two parameters, the first is the index of the element to be removed and the second parameter is the number of elements to be removed.", "category": "Python"}, {"instruction": "How does Python handle data types?", "input": "", "output": "Python uses dynamic typing, meaning that the type of data in a variable is not explicitly declared, instead it is automatically determined by the interpreter when a value is assigned to a variable. This allows for data types to be changed throughout the course of a program.", "category": "Python"}, {"instruction": "Write a command to create a new branch in Git.", "input": "", "output": "The command to create a new branch in Git is \"git branch [name]\".", "category": "Python"}, {"instruction": "Write a JQuery function that hides an element after 3 seconds.", "input": "", "output": "$(document).ready(function(){\n    setTimeout(function(){ \n    $(\"#element\").hide();\n    }, 3000);\n});", "category": "Python"}, {"instruction": "Construct a regex expression to capture words starting with 'cat'", "input": "", "output": "/^cat\\w+/", "category": "Python"}, {"instruction": "Generate a HTML layout to make a basic website page.", "input": "", "output": "<!Doctype html>\n<html>\n    <head>\n        <title>My Website</title>\n    </head>\n    <body>\n        <h1>Welcome to My Website!</h1>\n        <p>Content goes here.</p>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Compose a CSS code to display a textbox with a width of 250px", "input": "", "output": "input[type=text] {\n   width: 250px;\n}", "category": "Python"}, {"instruction": "Delete the element from the given array at index 4.", "input": "arr = [1, 2, 3, 4, 5, 6]", "output": "arr = [1, 2, 3, 4, 5, 6]\n\n# delete the element at index 4 \ndel arr[4]\n\n# print the array\nprint(arr)", "category": "Python"}, {"instruction": "Write a loop in Python to create a multiplication table.", "input": "", "output": "for x in range(1, 11):\n   for y in range(1, 11):\n       print(x, 'x', y, '=', x*y)", "category": "Python"}, {"instruction": "Use TensorFlow to create a convolutional neural network to classify handwritten digits.", "input": "", "output": "import tensorflow as tf \n\n# Create a model\nmodel = tf.keras.models.Sequential([\n    # Add a convolutional layer with a 3x3 window\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)),\n    # Add a Max Pooling layer\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    # Add a Flatten layer\n    tf.keras.layers.Flatten(),\n    # Add a Dense layer with 10 neurons and a softmax activation function \n    tf.keras.layers.Dense(10, activation='softmax')\n])\n# Compile the model\nmodel.compile(optimizer='adam',\n   loss='sparse_categorical_crossentropy',\n   metrics=['accuracy'])", "category": "Python"}, {"instruction": "Given an array of numbers, provide a nested for loop to calculate the sum of elements in the array.", "input": "", "output": "sum = 0\nfor row in arr:\n for el in row: \n  sum += el \n\nprint(\"The sum of elements in the array is:\",sum)", "category": "Python"}, {"instruction": "Write a MySQL query to create a table named 'Items' with 3 fields: 'id', 'name', and 'price'.", "input": "", "output": "CREATE TABLE Items (\nid INT NOT NULL, \nname VARCHAR(255) NOT NULL, \nprice INT NOT NULL\n);", "category": "Python"}, {"instruction": "Modify the given dictionary such that any keys that start with the letter 'b' are removed.", "input": "my_dict = {\n \"ant\": \"animals\",\n \"ball\": \"toy\",\n \"cat\": \"pets\"\n}", "output": "my_dict = {\n \"ant\": \"animals\",\n \"cat\": \"pets\"\n}", "category": "Python"}, {"instruction": "Use a for loop to sum the numbers in the list [4, 6, 5, 8].", "input": "", "output": "sum = 0\nfor num in [4,6,5,8]: \nsum = sum + num \n  \nprint(\"The sum is:\",sum)", "category": "Python"}, {"instruction": "What is the command to create an array in Java?", "input": "", "output": "The command to create an array in Java is \"int[ ] arr = new int[size]\".", "category": "Python"}, {"instruction": "Write the code to sort a dictionary by values in Python.", "input": "my_dict = {\n    \"a\": 10,\n    \"b\": 5,\n    \"c\": 15\n}", "output": "my_dict = {\n    \"a\": 10,\n    \"b\": 5,\n    \"c\": 15\n}\n\nsorted_dict = {k: v for k, v in sorted(my_dict.items(), key=lambda item: item[1])}\n\nprint(sorted_dict)\n#output: {\"b\": 5, \"a\": 10, \"c\": 15}", "category": "Python"}, {"instruction": "List the type of loops in Python.", "input": "", "output": "In Python, there are two types of loops - for loop and while loop. A for loop is used to iterate over a sequence (list, tuple, string). A while loop is used to iterate until a condition is met.", "category": "Python"}, {"instruction": "Print the running total of numbers in the following list.", "input": "numbers = [2, 3, 4, 7]", "output": "numbers = [2, 3, 4, 7]\n\ntotal = 0\nfor n in numbers:\n    total += n\n    print(total)\n    \n#output:\n2\n5\n9\n16", "category": "Python"}, {"instruction": "What is the length of the array in this JavaScript line of code?", "input": "var arr = [1,2,3,4,5,6];", "output": "var arr = [1,2,3,4,5,6];\n\nconsole.log(arr.length);\n#output: 6", "category": "Python"}, {"instruction": "Extract the extension from a given filename string.", "input": "filename = \"input.txt\"", "output": "filename = \"input.txt\"\next = filename.split('.')[-1]\nprint(ext)\n#output: 'txt'", "category": "Python"}, {"instruction": "You are given a string and you need to write a function that splits the string at the mid point and switch the order of the two parts.", "input": "str = \"Hello World!\"", "output": "function splitAndSwitch(str) {\n    let mid = Math.floor(str.length / 2);\n    let firstHalf = str.substr(0, mid);\n    let secondHalf = str.substr(mid);\n    \n    return secondHalf + firstHalf;\n}\n\nconsole.log(splitAndSwitch(str)); // returns \"World!Hello\"", "category": "Python"}, {"instruction": "Write a function that takes an array of numbers and returns an array whose elements are the product of all the elements except the element at the current index.", "input": "arr = [2, 3, 4, 5]", "output": "def get_products(arr):\n    left = [1]\n    right = [1]\n    ans = []\n\n    # Traverse from left to right\n    for i in range(1, len(arr)):\n        left.append(arr[i-1] * left[i-1])\n\n    # Traverse from right to left\n    for i in reversed(range(len(arr)-1)):\n        right.insert(0, arr[i+1] * right[0])\n\n    # Compute the product of all elements except itself\n    for i in range(len(arr)):\n        ans.append(left[i] * right[i])\n\n    return ans\n\nget_products(arr) # returns [20, 15, 12, 10]", "category": "Python"}, {"instruction": "Using HTML and CSS, create a page to display a list of users with their contact information", "input": "", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>User Info</title>\n    <style>\n      tr, td {\n        border: 1px solid black;\n        padding: 5px;\n      }\n    </style>\n  </head>\n  <body>\n    <table>\n      <tr>\n        <td>Name</td>\n        <td>Phone Number</td>\n        <td>Email</td>\n      </tr>\n      <tr>\n        <td>John Smith</td>\n        <td>9121231234</td>\n        <td>john.smith@example.com</td>\n      </tr>\n      <tr>\n        <td>John Doe</td>\n        <td>4564564567</td>\n        <td>john.doe@example.com</td>\n      </tr>\n    </table>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Given a sentence, write the code to extract the third word from the sentence.", "input": "sentence = \"I am a coder\"", "output": "sentence = \"I am a coder\"\n\nwords = sentence.split(' ')\nthird_word = words[2]\nprint(third_word)\n#output: 'a'", "category": "Python"}, {"instruction": "Develop a program that prints all the prime numbers between 0 and n.", "input": "", "output": "def prime_numbers(n): \n    primes = [] \n    for num in range(2, n+1): \n        is_prime = True\n        for i in range(2, num): \n            if (num % i == 0): \n                is_prime = False\n        if is_prime: \n            primes.append(num) \n    return primes", "category": "Python"}, {"instruction": "What is the command for executing a code written in Java?", "input": "", "output": "The command for executing a code written in Java is \"java [filename]\".", "category": "Python"}, {"instruction": "Using CSS, create a div element with a class name of message.", "input": "", "output": "<div class=\"message\"></div>", "category": "Python"}, {"instruction": "Suggest a Python code to filter a list of numbers so that all even numbers are removed.", "input": "", "output": "numbers = [1, 2, 3, 4, 5, 6, 7, 8]\nnew_list = [num for num in numbers if num % 2 != 0]\nprint(new_list)", "category": "Python"}, {"instruction": "Write an HTML code to create a table with three columns containing the headers \"ID\", \"Name\", and \"Group\".", "input": "", "output": "<table>\n  <tr>\n    <th>ID</th>\n    <th>Name</th>\n    <th>Group</th>\n </tr>\n</table>", "category": "Python"}, {"instruction": "Suggest a Python code to create a list containing the first five positive numbers.", "input": "", "output": "numbers = []\nfor i in range(1, 6):\n numbers.append(i)\nprint(numbers)", "category": "Python"}, {"instruction": "Re-write the following method to use a single loop instead of two.", "input": "def sum_special(arr):\n    temp = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            temp += arr[i] * arr[j]\n    return temp", "output": "def sum_special(arr):\n    temp = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            temp += arr[i] * arr[j]\n    return temp", "category": "Python"}, {"instruction": "Form a regex expression which determines if a binary number is valid.", "input": "", "output": "import re\n\nbinary_regex = r'^[01]+$'", "category": "Python"}, {"instruction": "Produce a program to print out the frequency of characters in a word.", "input": "Python", "output": "def character_frequency(word):\n    freq_dict = {}\n    for char in word:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    return freq_dict\n\nword = 'Python'\nprint(character_frequency(word))\n# {'P': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}", "category": "Python"}, {"instruction": "Create a class called 'Person' which has a constructor which creates a person with given name and age.", "input": "", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "category": "Python"}, {"instruction": "Create a Ruby class that accepts two arguments in its constructor.", "input": "", "output": "class ExampleClass\n  def initialize(arg1, arg2)\n    @arg1 = arg1\n    @arg2 = arg2\n  end\nend", "category": "Python"}, {"instruction": "Construct an HTML form with 10 fields, one for each of the following: name, email address, age, gender, job title, phone number, address, city, state, and zip code.", "input": "", "output": "<form>\n  <div class=\"form-row\">\n    <div class=\"col-6\">\n      <label for=\"name\">Name</label>\n      <input type=\"text\" name=\"name\" id=\"name\">\n    </div>\n    <div class=\"col-6\">\n      <label for=\"email\">Email Address</label>\n      <input type=\"text\" name=\"email\" id=\"email\">\n    </div>\n  </div>\n  <div class=\"form-row\">\n    <div class=\"col-6\">\n      <label for=\"age\">Age</label>\n      <input type=\"number\" name=\"age\" id=\"age\">\n    </div>\n    <div class=\"col-6\">\n      <label for=\"gender\">Gender</label>\n      <input type=\"text\" name=\"gender\" id=\"gender\">\n    </div>\n  </div>\n  <div class=\"form-row\">\n    <div class=\"col-6\">\n      <label for=\"job-title\">Job Title</label>\n      <input type=\"text\" name=\"job-title\" id=\"job-title\">\n    </div>\n    <div class=\"col-6\">\n      <label for=\"phone-number\">Phone number</label>\n      <input type=\"text\" name=\"phone-number\" id=\"phone-number\">\n    </div>\n  </div>\n  <div class=\"form-row\">\n    <div class=\"col-6\">\n      <label for=\"address\">Address</label>\n      <input type=\"text\" name=\"address\" id=\"address\">\n    </div>\n    <div class=\"col-6\">\n      <label for=\"city\">City</label>\n      <input type=\"text\" name=\"city\" id=\"city\">\n    </div>\n  </div>\n  <div class=\"form-row\">\n    <div class=\"col-6\">\n      <label for=\"state\">State</label>\n      <input type=\"text\" name=\"state\" id=\"state\">\n    </div>\n    <div class=\"col-6\">\n      <label for=\"zip-code\">Zip Code</label>\n      <input type=\"text\" name=\"zip-code\" id=\"zip-code\">\n    </div>\n  </div>\n  <div class=\"form-row\">\n    <input type=\"submit\" value=\"Submit\">\n  </div>\n</form>", "category": "Python"}, {"instruction": "Create a MySQL query to group a table of student records by their country of origin.", "input": "", "output": "SELECT country, COUNT(*) FROM student_records \nGROUP BY country;", "category": "Python"}, {"instruction": "Create a C# class that contains two private fields, one public method, and one property.", "input": "", "output": "public class myClass\n{\n    private int myField1;\n    private string myField2;\n\n    public void myMethod() {\n        Console.WriteLine(\"myMethod is called\");\n    }\n\n    public int MyProperty\n    {\n        get { return myField1; }\n        set { myField1 = value; } \n    }\n}", "category": "Python"}, {"instruction": "Add a blank line between the two following lines of code.", "input": "printf(\"Hello World!\");\nprintf(\"Hello Python!\");", "output": "printf(\"Hello World!\");\n\nprintf(\"Hello Python!\");", "category": "Python"}, {"instruction": "Write a css code to put a shadow on all the paragraphs", "input": "", "output": "p {\n    box-shadow: 5px 5px 10px 0 rgba(0,0,0,0.75);\n}", "category": "Python"}, {"instruction": "Generate a regex for email validation", "input": "", "output": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$", "category": "Python"}, {"instruction": "Insert a code line in the existing program to fix a syntax error.", "input": "int main() \n{\n    printf(\"Hello World!);\n}", "output": "int main() \n{\n    printf(\"Hello World!\"); // added missing closing quotation mark\n}", "category": "Python"}, {"instruction": "Write a CSS code to make all h2 headings bold and red.", "input": "", "output": "h2 {\n font-weight: bold;\n color: red;\n}", "category": "Python"}, {"instruction": "Suggest a JavaScript code to validate a username if it contains only alphabets and digits while ignoring the special characters.", "input": "", "output": "function validateUsername(username) { \n    const pattern = /^[a-zA-Z0-9]*$/;\n    return username.match(pattern);\n}", "category": "Python"}, {"instruction": "Write a PHP program to build a dynamic HTML table with the details of 10 students.", "input": "", "output": "$students = [\n    [\n        'name' => 'John Doe',\n        'age' => 22,\n        'marks' => 91\n    ],\n    [\n        'name' => 'Jane Doe',\n        'age' => 21,\n        'marks' => 87\n    ],\n    // ...\n];\n\n$html = \"<table>\n    <tr>\n        <th>Name</th>\n        <th>Age</th>\n        <th>Marks</th>\n    </tr>\";\n\nforeach ($students as $student) {\n    $html .= \"<tr>\n        <td>{$student['name']}</td>\n        <td>{$student['age']}</td>\n        <td>{$student['marks']}</td>\n    </tr>\";\n}\n\n$html .= \"</table>\";\n\necho $html;", "category": "Python"}, {"instruction": "Suggest a Python code to match the substring \"is\" in the given string \"This is a programming task\".", "input": "", "output": "import re\n\nstring = \"This is a programming task\"\n\npattern = r\"is\"\n\nif re.search(pattern, string):\n  print(\"Match found\")\nelse:\n  print(\"No match found\")", "category": "Python"}, {"instruction": "Construct an if/else statement in Python to print \"Welcome new user\" if the value of variable \"userID\" is greater than 0.", "input": "userID = 5", "output": "if userID > 0:\n    print(\"Welcome new user\")\nelse:\n    print(\"User ID is invalid\")", "category": "Python"}, {"instruction": "Find a tree traversal algorithm in Python.", "input": "", "output": "def tree_traversal(root): \n    if root is None: \n        return\n  \n    # First print the data of node \n    print(root.data) \n  \n    # Then recur on left child \n    tree_traversal(root.left) \n  \n    # Finally recur on right child \n    tree_traversal(root.right)", "category": "Python"}, {"instruction": "Design a query in MongoDB to select documents based on a particular value in an array.", "input": "DB student {\n    id INT,\n    name VARCHAR(100),\n    marks_arr INT[],\n    total INT\n}", "output": "db.students.find({\n    marks_arr : { $in : [100] }\n})", "category": "Python"}, {"instruction": "Write a query in MySQL to find the total count of items in a particular column.", "input": "TABLE student {\n    id INT,\n    name VARCHAR(100),\n    age INT,\n    gender VARCHAR(10)\n}", "output": "SELECT COUNT(gender) \nFROM student \nWHERE gender = 'female';", "category": "Python"}, {"instruction": "Generate a random number between 10 and 35 in JavaScript.", "input": "", "output": "var min = 10; \nvar max = 35; \nvar randomNumber = Math.random() * (max - min) + min; \nconsole.log(randomNumber);", "category": "Python"}, {"instruction": "Design a C program to create a calculator.", "input": "", "output": "#include <stdio.h>\n \nint main()\n{\n    char op;\n    float num1, num2;\n \n    printf(\"Enter the operator (+, -, *, /): \");\n    scanf(\"%c\", &op);\n \n    printf(\"Enter two operands: \");\n    scanf(\"%f%f\",&num1, &num2);\n \n    switch (op)\n    {\n        case '+':\n            printf(\"%.1f + %.1f = %.1f\", num1, num2, num1 + num2);\n            break;\n \n        case '-':\n            printf(\"%.1f - %.1f = %.1f\",num1, num2, num1 - num2);\n            break;\n \n        case '*':\n            printf(\"%.1f * %.1f = %.1f\",num1, num2, num1 * num2);\n            break;\n \n        case '/':\n            printf(\"%.1f / %.1f = %.1f\",num1, num2, num1 / num2);\n            break;\n \n        default:\n            printf(\"Error! operator is not correct\");\n    }\n \n    return 0;\n}", "category": "Python"}, {"instruction": "Check if a given string contains all the alphabets.", "input": "A quick brown fox jumps over the lazy dog", "output": "bool check = true;\nstring s = \"A quick brown fox jumps over the lazy dog\";\nstring alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\nfor (int i = 0; i < alphabet.length(); i++) {\n    if (!s.contains(alphabet.charAt(i)+\"\")) {\n        check = false;\n        break;\n    }\n}\n\nif (check) {\n    System.out.println(\"The given string contains all alphabets.\");\n} else {\n    System.out.println(\"The given string does not contain all alphabets.\");\n}", "category": "Python"}, {"instruction": "Using HTML5, create a canvas element with a width of 500px and a height of 250px.", "input": "", "output": "<canvas id=\"myCanvas\" width=\"500\" height=\"250\"></canvas>", "category": "Python"}, {"instruction": "Write code in PHP for capitalizing the first letter of each word in a given string.", "input": "Quick brown fox", "output": "<?php\n$str = 'Quick brown fox';\n\necho ucwords($str);\n?>", "category": "Python"}, {"instruction": "Generate a random list containing 10 elements in the range of 0-20", "input": "", "output": "import random \n\ndef generate_list(): \n    random_list = []\n    for i in range(10): \n        random_list.append(random.randint(0, 20)) \n  \n    return random_list", "category": "Python"}, {"instruction": "Write a Python class for a Rectangle object with two instance attributes, length and width.", "input": "", "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length \n        self.width = width", "category": "Python"}, {"instruction": "Write a code to find the longest consecutive sequence inside of a given list of numbers.", "input": "[1, 3, 5, 7, 8, 2, 4, 9]", "output": "def find_longest_seq(arr):\n    max_len = 0\n    curr_seq = []\n    for num in arr:\n        if not curr_seq or num == curr_seq[-1] + 1:\n            curr_seq.append(num)\n            max_len = max(max_len, len(curr_seq))\n        else: \n            curr_seq = [num]\n    return max_len", "category": "Python"}, {"instruction": "Create a function that takes in a string and returns the string without its last two letters.", "input": "\"Hello World!\"", "output": "def remove_last_two(s):\n    return s[:-2]", "category": "Python"}, {"instruction": "Create an SQL table with four columns and necessary parameters.", "input": "", "output": "CREATE TABLE mytable (\n    id INTEGER NOT NULL,\n    name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL,\n    age INTEGER NOT NULL,\n    PRIMARY KEY(id)\n    );", "category": "Python"}, {"instruction": "Create an object in JavaScript that has four properties and four associated values.", "input": "", "output": "let obj = {\n    key1: \"value1\",\n    key2: \"value2\",\n    key3: \"value3\",\n    key4: \"value4\"\n};", "category": "Python"}, {"instruction": "Generate an array of random integers between 1 and 50 inclusive.", "input": "", "output": "let randomIntegersArray = [];\nfor (let i = 0; i < 50; i++) {\n    randomIntegersArray.push(Math.floor(Math.random() * (50 - 1 + 1)) + 1);\n}", "category": "Python"}, {"instruction": "Create a sorting algorithm to sort a given list of numbers from lowest to highest.", "input": "[1, 4, 3, 7, 8, 10]", "output": "def sort_list(arr):\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        if min_index != i:\n            arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr", "category": "Python"}, {"instruction": "Develop a C++ code snippet to swap two variables.", "input": "", "output": "void swap(int& x, int& y) { \n    int temp = x; \n    x = y; \n    y = temp; \n}", "category": "Python"}, {"instruction": "Rewrite following C code into Python code", "input": "int a[10] = {0,1,2,3,4,5,6,7,8,9};", "output": "a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "category": "Python"}, {"instruction": "Generate code to create a Numpy array with 3 rows and 4 columns.", "input": "", "output": "import numpy as np \narr = np.array([[0, 1, 2, 3], \n                [4, 5, 6, 7],\n                [8, 9, 10, 11]])", "category": "Python"}, {"instruction": "Create a MySQL table to store users with the following columns: user_id (int), first_name (varchar), last_name (varchar), and email (varchar).", "input": "", "output": "CREATE TABLE users (\n user_id INT NOT NULL AUTO_INCREMENT,\n first_name VARCHAR(255) NOT NULL,\n last_name VARCHAR(255) NOT NULL,\n email VARCHAR(255) NOT NULL,\n PRIMARY KEY (user_id)\n);", "category": "Python"}, {"instruction": "How to sort an array of strings by length in JavaScript?", "input": "", "output": "function sortByLength(arr) {\n    arr.sort(function(a,b){\n        return a.length - b.length;\n     });\n    return arr;\n}", "category": "Python"}, {"instruction": "How to compare two lists in Python?", "input": "", "output": "def compare_lists(l1, l2):\n    if len(l1) != len(l2):\n        return False\n\n    for i in range(len(l1)):\n        if l1[i] != l2[i]:\n            return False\n\n    return True", "category": "Python"}, {"instruction": "Create a JavaScript code to represent a double-linked list", "input": "", "output": "// Create a class Node \nclass Node { \n  constructor(value) { \n    this.value = value; \n    this.next = null; \n    this.prev = null; \n  } \n} \n  \n// Create a class LinkedList \nclass DoublyLinkedList { \n  constructor() { \n    this.head = null; \n    this.tail = null; \n    this.length = 0; \n  } \n}", "category": "Python"}, {"instruction": "How to create a loop in Python which will iterate over a list?", "input": "", "output": "#Iterate over a list \nlist = [1, 2, 3, 4, 5]\n\nfor item in list:\n    print(item)", "category": "Python"}, {"instruction": "Create a class in Python for performing basic math calculations", "input": "", "output": "class MathCalculations:\n    \"\"\"\n    Class to perform math calculations \n    \"\"\"\n\n    def __init__(self):\n        pass\n\n    def add(self, num1, num2):\n        \"\"\"\n        Add two numbers\n        \"\"\"\n        return num1 + num2\n\n    def subtract(self, num1, num2):\n        \"\"\"\n        Subtract two numbers\n        \"\"\"\n        return num1 - num2\n\n    def multiply(self, num1, num2):\n        \"\"\"\n        Multiply two numbers\n        \"\"\"\n        return num1 * num2\n\n    def divide(self, num1, num2):\n        \"\"\"\n        Divide two numbers\n        \"\"\"\n        return num1 / num2", "category": "Python"}, {"instruction": "In the following code, identify the bug and suggest a fix.", "input": "def add_two_strings(string1, string2):\n    return string1 + string2", "output": "def add_two_strings(string1, string2):\n    \"\"\"A function to add two strings together and return the concatenated result.\"\"\"\n    if isinstance(string1, str) and isinstance(string2, str):\n        return string1 + string2\n    else:\n        raise TypeError(\"Both arguments must be strings\")", "category": "Python"}, {"instruction": "How would you modify the following code to add a time delay of 1 second between each iteration of the loop?", "input": "for i in range(10):\n    print(i)", "output": "import time\n\nfor i in range(10):\n    print(i)\n    time.sleep(1)", "category": "Python"}, {"instruction": "Provide a solution for a ``while`` loop that runs for 10 iterations and prints out its current counter at each iteration.", "input": "", "output": "counter = 0\nwhile counter < 10:\n    print(\"Current counter is: \" + str(counter))\n    counter += 1", "category": "Python"}, {"instruction": "Identify the bugs in the following python code and fix them.", "input": "def multiply_dicts(d1, d2):\n    for key in d1:\n        d1[key] = d2[d1[key]]", "output": "def multiply_dicts(d1, d2):\n    for key in d1:\n        if key in d2:\n            d1[key] = d2[key]", "category": "Python"}, {"instruction": "Create a JavaScript function to print the following pattern.", "input": "", "output": "function printPattern() {\n    for (let i = 1; i <= 5; i++) {\n        let str = '';\n        for (let j = 1; j <= 5; j++) {\n            if (j <= i) {\n                str += j; \n            }\n        }\n        console.log(str);\n    }\n}", "category": "Python"}, {"instruction": "Write a code snippet to query the following json object using JavaScript.", "input": "const jsonObject = \n            {\n                \"name\": \"John\",\n                \"age\": 30,\n                \"city\": \"New York\"\n            }", "output": "let result = jsonObject.name;\n// result will be 'John'", "category": "Python"}, {"instruction": "Create a constructor for the following class in Python.", "input": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "category": "Python"}, {"instruction": "Write a CSS selector that selects the element with the id \"my-id\".", "input": "<div id=\"my-id\">Hello</div>", "output": "#my-id {\n  // Your CSS here\n}", "category": "Python"}, {"instruction": "Write an algorithm that finds the least common ancestor of two given nodes in a binary tree.", "input": "1\n     /   \\\n    2     3\n  /  \\  /  \\\n 4    5 6   7\nLeast Common Ancestor (LCA) of 4 and 5", "output": "// Algorithm to find the least common ancestor in a binary tree\n\nNode *LCA(Node *root, Node *p, Node *q) \n{ \n /* Base case */\n if (root == NULL) return NULL;\n  \n // If either p or q matches with root's key, report \n // the presence by returning root (Note that if a key is \n // ancestor of other, then the ancestor key becomes LCA \n if (root == p || root == q) \n    return root; \n  \n // Look for keys in left and right subtree \n Node *left = LCA(root->left, p, q); \n Node *right = LCA(root->right, p, q); \n  \n // If both of the above calls return Non-NULL, then one key \n // is present in once sub-tree and other is present in other, \n // So this node is the LCA \n if (left != NULL && right != NULL) \n    return root; \n  \n// Otherwise check if left subtree or right subtree is LCA \nreturn (left != NULL) ? left : right; \n}", "category": "Python"}, {"instruction": "Design a function in Python to calculate the area of an equilateral triangle.", "input": "", "output": "def triangle_area(side):\n return side * (side ** 0.5) / 2", "category": "Python"}, {"instruction": "Create a MySQL query to select all users from the 'users' table with the given email address.", "input": "'john@example.com'", "output": "SELECT * FROM users \nWHERE email = 'john@example.com';", "category": "Python"}, {"instruction": "Create a C++ class named 'Student' with private member data including age and name.", "input": "", "output": "class Student\n{\nprivate:\n    int age;\n    string name;\npublic:\n    Student(int a, string n) : age(a), name(n) {}\n    int getAge() { return age; }\n    string getName() { return name; }\n    void setAge(int a) { age = a; }\n    void setName(string n) { name = n; }\n};", "category": "Python"}, {"instruction": "Create an array with elements {4, 78, 32, 6}.", "input": "", "output": "int arr[] = {4, 78, 32, 6};", "category": "Python"}, {"instruction": "Create a script in JavaScript to remove the last character from a given string.", "input": "\"This is a sentence.\"", "output": "let str = \"This is a sentence.\";\nstr = str.substring(0, str.length - 1);\nconsole.log(str);", "category": "Python"}, {"instruction": "Provide a Java program for searching for a certain element in an array.", "input": "[1, 2, 3, 4, 5], element=4", "output": "public class SearchInArray { \n  \n    static int search(int arr[], int n, int x) { \n        for (int i = 0; i < n; i++) { \n            if (arr[i] == x) \n                return i;\n        }\n        return -1;\n    }\n \n    public static void main(String args[]) { \n        int arr[] = { 1, 2, 3, 4, 5 }; \n        int x = 4; \n        int n = arr.length; \n        System.out.println(\"Element found at position: \" + search(arr, n, x));\n    } \n}", "category": "Python"}, {"instruction": "Find the maximum pair sum of four integers in an array.", "input": "[2, 10, -4, 3, 14, 8]", "output": "public class MaximumPairSum { \n\n    static int findMaximumPairSum(int arr[]) { \n        int max1 = Integer.MIN_VALUE; \n        int max2 = Integer.MIN_VALUE; \n        int max3 = Integer.MIN_VALUE; \n        int max4 = Integer.MIN_VALUE; \n\n        for (int i = 0; i < arr.length; i++) { \n \n            if (arr[i] > max1) { \n \n                max4 = max3; \n                max3 = max2; \n                max2 = max1; \n                max1 = arr[i]; \n            } \n\n            else if (arr[i] > max2) { \n                max4 = max3; \n                max3 = max2; \n                max2 = arr[i]; \n            } \n\n            else if (arr[i] > max3) { \n                max4 = max3; \n                max3 = arr[i]; \n            } \n\n            else if (arr[i] > max4) \n                max4 = arr[i]; \n        } \n        return max1 + max2 + max3 + max4; \n    } \n \n    public static void main(String[] args) \n    { \n        int arr[] = { 2, 10, -4, 3, 14, 8 }; \n        System.out.println(findMaximumPairSum(arr)); \n    } \n}", "category": "Python"}, {"instruction": "Implement an efficient algorithm for reversing a sentence in C.", "input": "\"This is a sentence.\"", "output": "#include<stdio.h>\n#include<string.h>\n\nvoid reverse_sentence(char *word) \n{ \n    int k; \n    char *c, s[100]; \n    c = word; \n    k = strlen(word); \n  \n    int i = k - 1, j = 0; \n    while (i >= 0) { \n        while (i >= 0 && c[i] != ' ') { \n           s[j++] = c[i--]; \n        } \n        s[j++] = ' '; \n  \n        while (i >= 0 && c[i] == ' ') \n            i--; \n    } \n  \n    s[j] = '\\0'; \n    printf(\"%s\\n\", s); \n} \n\nint main() \n{ \n   char str[] = \"This is a sentence.\"; \n   reverse_sentence(str); \n   return 0; \n}", "category": "Python"}, {"instruction": "Create a function \u2018fibonacci\u2019 which takes an argument \u2018n\u2019 and prints the Fibonacci series up to the nth term.", "input": "", "output": "def fibonacci(n):\n  a = 0\n  b = 1\n  if n < 0:\n    print(\"Incorrect input\")\n  elif n == 0:\n    return a\n  elif n == 1:\n    return b\n  else:\n     for i in range(2,n):\n       c = a + b\n       a = b\n       b = c\n     return b", "category": "Python"}, {"instruction": "Create a for loop that prints the numbers in the range of 9 to 25", "input": "", "output": "for i in range(9, 26):\n    print(i)", "category": "Python"}, {"instruction": "Create a class named \u2018Vehicles\u2019 with attributes color and price.", "input": "", "output": "class Vehicles:\n   def __init__(self, color, price):\n        self.color = color\n        self.price = price", "category": "Python"}, {"instruction": "Write a React component that implements a toggle button.", "input": "<div>\n  <ToggleButton />\n</div>", "output": "class ToggleButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      buttonState: false,\n    };\n  }\n  \n  handleClick() {\n    this.setState({ buttonState: !this.state.buttonState });\n  }  \n\n  render() {\n    let buttonText = this.state.buttonState ? 'ON' : 'OFF';\n    return (\n      <button onClick={this.handleClick.bind(this)}>\n        {buttonText}\n      </button>\n    );\n  }\n}", "category": "Python"}, {"instruction": "Write a Ruby program to print out all the numbers between 1-100 which are divisible by 5.", "input": "", "output": "1.upto(100) do |i|\n  puts i if i % 5 == 0\nend", "category": "Python"}, {"instruction": "Write a PHP function to calculate the students' average marks.", "input": "$marks = [40, 70, 60, 90];", "output": "<?php\n\nfunction calculateAverage($marks) {\n $sum = 0;\n for($i = 0; $i < count($marks); $i++) {\n  $sum += $marks[$i];\n }\n\n $average = $sum / count($marks);\n return $average;\n}\n\n?>", "category": "Python"}, {"instruction": "Edit the following code to add an item to the 'fruits' list.", "input": "fruits = [\"apple\", \"banana\", \"orange\"]", "output": "fruits = [\"apple\", \"banana\", \"orange\"]\nfruits.push(\"mango\");", "category": "Python"}, {"instruction": "Write a JavaScript function to remove the last character of a string.", "input": "", "output": "function removeLastChar(str){\n    return str.substring(0,str.length-1);\n}", "category": "Python"}, {"instruction": "Which type of loops can be used in Python?", "input": "", "output": "Python supports for loops, while loops, and nested loops. Additionally, the loop statement can be used to construct an infinite loop.", "category": "Python"}, {"instruction": "Break the following string into two pieces.", "input": "\"HelloWorld\"", "output": "String s1 = \"Hello\";\nString s2 = \"World\";", "category": "Python"}, {"instruction": "Write a Java method to swap of two integer values.", "input": "", "output": "public static void swap(int x, int y){\n    int temp = x;\n    x = y;\n    y = temp;\n}", "category": "Python"}, {"instruction": "What do you need to do in order to make an HTTP request using cURL?", "input": "", "output": "To make an HTTP request using cURL, you need to install and set up cURL, select the correct HTTP method, provide a URL, and set any necessary options. You can then execute the cURL request by calling curl_exec() and get the response via curl_getinfo() and curl_exec().", "category": "Python"}, {"instruction": "Create an HTML page that has a table and populates the table with the given data.", "input": "Country  |  Capital\n\nIndia    |  New Delhi\nUnited States | Washington DC\nCanada   |  Ottawa", "output": "<!DOCTYPE html>\n<html>\n <head>\n  <title>Country and Capital Table</title>\n </head>\n<body>\n <h1>Country and Capital Table</h1>\n <table>\n  <tr>\n   <th>Country</th>\n   <th>Capital</th>\n  </tr>\n  <tr>\n   <td>India</td>\n   <td>New Delhi</td>\n  </tr>\n  <tr>\n   <td>United States</td>\n   <td>Washington DC</td>\n  </tr>\n  <tr>\n   <td>Canada</td>\n   <td>Ottawa</td>\n  </tr>\n </table>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a JavaScript function to flatten an array up to the given depth.", "input": "[1, [2, [3, [4, 5], 6], 7], 8], 3", "output": "function flattenArray(arr, depth) {\n  let result = [];\n  \n  for (let item of arr) {\n    if (Array.isArray(item) && depth > 0) {\n      result.push(...flattenArray(item, depth - 1)); // Recursively flatten the array\n    } else {\n      result.push(item);\n    }\n  }\n  \n  return result;\n}", "category": "Python"}, {"instruction": "Write an algorithm that finds the longest palindromic substring of a given input string.", "input": "\"forgeeksskeegfor\"", "output": "// Algorithm to find the longest palindromic substring\n\nint longestPalindromicSubstr(char* str) \n{\n\t// Variables to store the start and the end of the palindromic substring\n\tint maxLen = 1;\n\tint start = 0;\n\tint len = strlen(str);\n\t// Table to store boolean value at the index\n\t// dp[i][j] stores whether the substring str[i..j] is palindrome or not\n\tint dp[len][len];\n\t\n\t// Initialize all entries to False\n\tmemset(dp, 0, sizeof(dp));\n\t\n\t// All characters of length 1 are palindrome\n\tfor (int i = 0; i < len; i++) \n\t\tdp[i][i] = true;\n\t\n\t// Check for substring of length 2\n\tfor (int i = 0; i < len-1; i++) \n\t{\n\t\tif (str[i] == str[i+1]) \n\t\t{\n\t\t\tdp[i][i+1] = true;\n\t\t\tstart = i;\n\t\t\tmaxLen = 2;\n\t\t}\n\t}\n\t\n\t// Check for lengths greater than 2 \n\tfor (int k = 3; k <= len; k++) \n\t{ \n\t\t// looping until len-k+1, so that you can get ith character\n\t\tfor (int i = 0; i < len-k+1; i++) \n\t\t{ \n\t\t\tint j = i + k - 1; \n\t\t\tif (dp[i+1][j-1] && str[i] == str[j]) \n\t\t\t{ \n\t\t\t\tdp[i][j] = true; \n\n\t\t\t\tif (k > maxLen) \n\t\t\t\t{ \n\t\t\t\t\tstart = i; \n\t\t\t\t\tmaxLen = k; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n\t\n\treturn maxLen; \n}", "category": "Python"}, {"instruction": "Write a function that, given a binary tree, prints all of its element \"level by level\".", "input": "1\n    /   \\\n   2     3\n  /  \\  /  \\\n 4    5 6   7", "output": "// Code to print elements of a binary tree by level\n\n// A utility function to print all nodes at a given level \nvoid printGivenLevel (struct node* root , int level) \n{ \n\tif (root == NULL) \n\t\treturn; \n\tif (level == 1) \n\t\tprintf(\"%d \", root->data); \n\telse if (level > 1) \n\t{ \n\t\tprintGivenLevel(root->left, level-1); \n\t\tprintGivenLevel(root->right, level-1); \n\t} \n} \n  \n// A function to do level order traversal of a tree \nvoid printLevelOrder(struct node* root) \n{ \n\tint h = height(root); \n\tint i; \n\tfor (i=1; i<=h; i++) \n\t\tprintGivenLevel(root, i); \n}", "category": "Python"}, {"instruction": "Write a Python function that takes in one argument and prints out the Fibonacci number for that argument.", "input": "", "output": "def Fibonacci(x): \n    if x == 0: \n        return 0\n    elif x == 1: \n        return 1\n    else: \n        return Fibonacci(x-1)+Fibonacci(x-2) \n\nif __name__ == '__main__':\n    print(Fibonacci(5))  # Output: 5", "category": "Python"}, {"instruction": "Create a JavaScript function that iterates through a given array and returns the first value that is not a number.", "input": "array = [3, 5, \"hello\", 10]", "output": "function firstNonNumber(array){\n    return array.find(el => typeof el !== 'number');\n}\n\nconsole.log(firstNonNumber([3, 5, \"hello\", 10]))  // Output: \"hello\"", "category": "Python"}, {"instruction": "Write a Python script to send an email using the smtplib module.", "input": "", "output": "import smtplib\n\nsender = 'from@example.com'\nrecipients = ['to@example.com']\n\nmessage = \"\"\"Subject: Test Email\n\nThis is a test email message.\n\"\"\"\n\nwith smtplib.SMTP('localhost') as server:\n  server.sendmail(sender, recipients, message)", "category": "Python"}, {"instruction": "Write an SQL query to count the number of people with a given last name in a table of people.", "input": "lastName = 'Smith'", "output": "SELECT COUNT(*) FROM people WHERE lastName = 'Smith';", "category": "Python"}, {"instruction": "Develop a function in Java that takes a string argument and returns it with the first letter capitalized.", "input": "", "output": "public class StringCapitalizer {\n    public static String capitalize(String string) {\n        return string.substring(0,1).toUpperCase() + string.substring(1);\n    }\n \n    public static void main(String[] args) {\n        System.out.println(capitalize(\"hello\"));  // Output : Hello\n    }\n}", "category": "Python"}, {"instruction": "Write a JavaScript function to retrieve all users from an API endpoint.", "input": "", "output": "function getUsers() {\n    fetch('https://example.com/users')\n        .then(function(response) {\n            response.json().then(function(data) {\n                 console.log(data);\n            });\n        });\n}", "category": "Python"}, {"instruction": "Write an CSS code to hide all red elements from the page.", "input": "", "output": "*[style*='red'] {\n    display: none;\n}", "category": "Python"}, {"instruction": "Write an HTML code to create a basic structure for a website.", "input": "", "output": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>My Website</title>\n    </head>\n    <body>\n \n    </body>\n</html>", "category": "Python"}, {"instruction": "Create a CSS class called \"alert-box\" that changes the body's background color to red when applied.", "input": "", "output": ".alert-box {\n    background-color: red;\n}", "category": "Python"}, {"instruction": "Write a SQL query to select all the names and department of employees whose age is over 35.", "input": "", "output": "SELECT name, department FROM Employees\nWHERE age > 35;", "category": "Python"}, {"instruction": "Construct a while loop in Python which runs until user input is equal to 5.", "input": "", "output": "userInput = 0\nwhile userInput != 5:\n    userInput = int(input('Enter a number: '))", "category": "Python"}, {"instruction": "Construct a for loop in Java using the following parameters: Initial value of i set to one, condition as i is less than or equal to 5, and iteration of i as subtraction of two.", "input": "", "output": "for (int i = 1; i <= 5; i = i-2){\n  // Code to be executed\n}", "category": "Python"}, {"instruction": "Calculate the result of XORing two binary numbers.", "input": "1010, 0101", "output": "The result of XORing 1010 and 0101 is 1111.", "category": "Python"}, {"instruction": "Create a function in Python which takes a string and reverses it.", "input": "", "output": "def reverse_string(my_string):\n    return my_string[::-1]", "category": "Python"}, {"instruction": "Design an HTML form to enter student name, age, and course.", "input": "", "output": "<html>\n    <head>\n        <title>Student Info Form</title>\n    </head>\n\n    <body>\n        <form action=\"/submit\" method=\"POST\">\n            <label>Name:</label><br>\n            <input type=\"text\" name=\"name\"><br><br>\n            \n            <label>Age:</label><br>\n            <input type=\"number\" name=\"age\"><br><br>\n\n            <label>Course:</label><br>\n            <input type=\"text\" name=\"course\"><br><br>\n\n            <input type=\"submit\" value=\"Submit\">\n        </form>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Create a program to execute a given command-line argument.", "input": "", "output": "import sys\n\nif __name__ == '__main__':\n    args = sys.argv\n    if len(args) > 1:\n        command = args[1]\n        print(f'Executing command: {command}')\n        os.system(command)", "category": "Python"}, {"instruction": "Write a query in SQL to select the first 3 characters of each employee name.", "input": "", "output": "SELECT SUBSTRING(name, 1, 3) FROM Employees;", "category": "Python"}, {"instruction": "Format the following string according to the specified condition.", "input": "String: \"first_name,last_name,age\"\nCondition: each word should have its first letter capitalized", "output": "\"First_Name,Last_Name,Age\"", "category": "Python"}, {"instruction": "What is the correct syntax to create a dictionary in Python?", "input": "", "output": "my_dict = {'key1':'value1','key2':'value2'}", "category": "Python"}, {"instruction": "Create an array of 10 numbers in JavaScript, each with a value of 0.", "input": "", "output": "let array = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];", "category": "Python"}, {"instruction": "Write an algorithm that prints out all elements of an array in reverse order.", "input": "[1,2,3,4,5]", "output": "// Algorithm to print elements of array in reverse order\n\nvoid reverseArray(int arr[], int n) \n{ \n\tfor (int i = n - 1; i >= 0; i--) \n\t\tSystem.out.print(arr[i] + \" \"); \n}", "category": "Python"}, {"instruction": "What should be the appropriate PHP code for displaying the details of a MySQL database?", "input": "", "output": "<?php\n// Establish database connection\n$host = 'localhost';\n$user = 'root';\n$pass = '';\n$dbname = 'mydb';\n\n$connection = mysqli_connect($host, $user, $pass, $dbname);\n \n// Retrieve data from database\n$sql = \"SELECT * FROM customers\";\n$result = mysqli_query($connection, $sql);\n \n// Display data\nwhile($row = mysqli_fetch_assoc($result)) {\n    echo \"Name: \" . $row['name'] . \"<br>\";\n    echo \"Age: \" . $row['age'] . \"<br>\";\n    echo \"Address: \" . $row['address'] . \"<br><br>\";\n}\n \n// Close database connection\nmysqli_close($connection);\n?>", "category": "Python"}, {"instruction": "What should be the correct return statement for the following C++ function?", "input": "int findMinMax(int arr[], int n, bool min)", "output": "int findMinMax(int arr[], int n, bool min) {\n    int minMax = INT_MAX;\n    for (int i = 0; i < n; i++) {\n        if (min) {\n            if (arr[i] < minMax) {\n                minMax = arr[i];\n            }\n        } else {\n            if (arr[i] > minMax) {\n                minMax = arr[i];\n            }\n        }\n    }\n    return minMax;\n}", "category": "Python"}, {"instruction": "Given the following JSON snippet, design a MongoDB schema for the corresponding collection.", "input": "{\n    \"users\": [\n        {\n            \"name\": \"John\",\n            \"addr\": {\n                \"street\": \"123 Main St\",\n                \"city\": \"New York\"\n            }\n        }\n    ]\n}", "output": "db.users.insert({\n    name: String,\n    addr: {\n        street: String,\n        city: String\n    }\n})", "category": "Python"}, {"instruction": "Write a Haskell code that calculates the sum of all the integers between two numbers.", "input": "", "output": "sumInts :: Int -> Int -> Int\nsumInts a b \n  | a == b = b\n  | otherwise = a + sumInts (a+1) b", "category": "Python"}, {"instruction": "Using the given Python class, write a constructor and a method to display the details.", "input": "class Customer:", "output": "class Customer:\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address\n   \n    def display_details(self):\n        print(f\"Name: {self.name}\\nAge: {self.age}\\nAddress: {self.address}\")", "category": "Python"}, {"instruction": "Write a Python code that turns the given input into a list of dictionaries.", "input": "['John,21', 'Jane,27', 'Jack,38']", "output": "[{'name': 'John', 'age': '21'},\n {'name': 'Jane', 'age': '27'},\n {'name': 'Jack', 'age': '38'}]", "category": "Python"}, {"instruction": "Create a new class in JavaScript called 'Classroom'.", "input": "", "output": "class Classroom {\n    constructor(){\n        // Constructor code will go here\n    }\n}", "category": "Python"}, {"instruction": "Write an SQL query to select the name and salary of all employees from the 'employees' table who are earning more than 50000.", "input": "", "output": "SELECT name, salary FROM employees WHERE salary > 50000;", "category": "Python"}, {"instruction": "Output the sum of digits in a number.", "input": "n = 123", "output": "6", "category": "Python"}, {"instruction": "Generate a complete SQL query to select fields from a table", "input": "Table name: Orders\nFields: Orderid, Price", "output": "SELECT OrderID, Price FROM Orders;", "category": "Python"}, {"instruction": "Create a HTML program to simulate a digital clock", "input": "", "output": "<html>\n<head>\n    <title>Digital Clock</title>\n    <script>\n        function showTime(){\n            var date = new Date();\n            var h = date.getHours(); // 0 - 23\n            var m = date.getMinutes(); // 0 - 59\n            var s = date.getSeconds(); // 0 - 59\n            var session = \"AM\";\n            \n            if(h == 0){\n                h = 12;\n            }\n            \n            if(h > 12){\n                h = h - 12;\n                session = \"PM\";\n            }\n            \n            h = (h < 10) ? \"0\" + h : h;\n            m = (m < 10) ? \"0\" + m : m;\n            s = (s < 10) ? \"0\" + s : s;\n            \n            var time = h + \":\" + m + \":\" + s + \" \" + session;\n            document.getElementById(\"MyClockDisplay\").innerText = time;\n            document.getElementById(\"MyClockDisplay\").textContent = time;\n            \n            setTimeout(showTime, 1000);\n        }\n        showTime();\n    </script>\n</head>\n<body>\n    <div>\n        <h2>Digital Clock:</h2>\n        <div id=\"MyClockDisplay\" class=\"clock\"></div>\n    </div>\n</body>\n</html>", "category": "Python"}, {"instruction": "Identify the vulnerabilities in the given program", "input": "def transferMoney(username,amount):\n    #read from db their current balance\n    curBalance=readDB(\"SELECT bankBalance from users where username=\" + username)\n    #update the current balance\n    curBalance+=amount\n    #write to the db with the new balance\n    writeDB(\"UPDATE users SET bankBalance = \" + curBalance + \" where username=\" + username)", "output": "The code is vulnerable to SQL injection when inserting username into the database queries as the parameter is not sanitized properly. It is also vulnerable to Race Condition attack if two threads try to update the same user's balance simultaneously. It is also vulnerable to Integer Overflow attack if the amount is greater than the maximum value allowed.", "category": "Python"}, {"instruction": "Modify the code to account for a list containing only one item.", "input": "def sum_list(list):\n    result=0\n    for number in list:\n        result+=number\n    return result", "output": "def sum_list(list):\n    if len(list) == 0:\n        return 0\n    elif len(list) == 1:\n        return list[0]\n    else:\n        result=0\n        for number in list:\n            result+=number\n        return result", "category": "Python"}, {"instruction": "Write CSS code to make all div elements have a width of 200px.", "input": "", "output": "div {\n    width: 200px;\n}", "category": "Python"}, {"instruction": "Create a basic GUI with a button in Python.", "input": "", "output": "from tkinter import *\n\n# create GUI window\nroot = Tk()\n\n# create the button\nbtn = Button(root,text=\"Click me!\",width=10)\n\n# add the button to the window\nbtn.pack()\n\n# enter the mainloop\nroot.mainloop()", "category": "Python"}, {"instruction": "Output the 5th Fibonacci number.", "input": "", "output": "5", "category": "Python"}, {"instruction": "Choose the correct output of the following program.", "input": "x = 3\ny = 4\nz = 5\n\nif x < y and y < z:\n    print(x + y + z)", "output": "12", "category": "Python"}, {"instruction": "Create a Python script that converts temperatures from Fahrenheit to Celsius.", "input": "", "output": "def fahrenheit_to_celsius(temperature):\n    \"\"\"\n    This function converts temperatures in Fahrenheit to Celsius.\n    \"\"\"\n    celsius = (temperature - 32) * 5/9 \n    return celsius\n\nif __name__ == '__main__':\n    temperature = float(input('Enter temperature in Fahrenheit: '))\n    print('Temperature in Celcius is: {:.2f}'.format(fahrenheit_to_celsius(temperature)))", "category": "Python"}, {"instruction": "Description a Swift class with one variable \"name\" and one method \"printName()\".", "input": "", "output": "class MyClass {\n\nvar name: String\n\nfunc printName() {\n print(name)\n }\n}", "category": "Python"}, {"instruction": "Generate a random 3-digit number without using any in-built methods", "input": "", "output": "// Generate a random 3-digit number\nlet num = Math.floor(Math.random() * (999 - 100 + 1) + 100);", "category": "Python"}, {"instruction": "Suggest a function name for a function that reverses a string.", "input": "", "output": "function reverseString(str) {...} \nor\nfunction reverseWord(str) {...}", "category": "Python"}, {"instruction": "Write a function to print out the triangle pattern as shown in the example.", "input": "height = 3", "output": "def triangle_pattern(height):\n    star = \"*\"\n    for i in range(height):\n        print(star*(i+1))", "category": "Python"}, {"instruction": "Using the data provided, create a function to calculate the mean value of the elements inside the dictionary.", "input": "data = {\"John\": 8.5, \"Jane\": 9, \"Bob\": 5}", "output": "def mean_value(data):\n    sum = 0\n    count = 0\n    for value in data.values():\n        sum += value\n        count += 1\n    \n    return round(sum/count, 2)", "category": "Python"}, {"instruction": "Using the list of numbers, create a function to sort the list into ascending order.", "input": "numbers = [6, 4, 3, 2, 8]", "output": "def sort_ascending(numbers):\n    numbers.sort()\n    return numbers", "category": "Python"}, {"instruction": "Write a function to take a list of strings and return only the words made up of the same letter.", "input": "word_list = [\"aaa\", \"cab\", \"bba\"]", "output": "def same_letter_words(word_list):\n    same_letter_words = [word for word in word_list if len(set(word)) == 1]\n    return same_letter_words", "category": "Python"}, {"instruction": "Write a function that takes a name as a parameter and returns its reverse counterpart.", "input": "name = \"John\"", "output": "def reverse_name(name):\n    return name[::-1]", "category": "Python"}, {"instruction": "Write a SQL query to print the name and total orders of each customer", "input": "", "output": "SELECT customer_name, COUNT(*)\nFROM orders\nGROUP BY customer_name;", "category": "Python"}, {"instruction": "Edit an existing Python script to read a 3D array of size 3 x 3 x 3", "input": "", "output": "arr = [[[0 for x in range(3)] for y in range(3)] for z in range(3)]\nfor x in range(3):\n    for y in range(3):\n        for z in range(3):\n            arr[x][y][z] = int(input())", "category": "Python"}, {"instruction": "Design a program to find the sum of all numbers in an array of size 5", "input": "int arr[] = {4, 8, 2, 6, 1};", "output": "public class SumOfElements { \n    // Function to get sum of all elements. \n    public static int getSum(int[] arr) \n    { \n        int sum = 0; \n        for (int i : arr) \n            sum += i; \n        return sum; \n    } \n  \n    public static void main(String[] args) \n    { \n        int arr[] = { 4, 8, 2, 6, 1 }; \n        int sum = getSum(arr); \n  \n        System.out.println(\"Sum is : \" + sum); \n    } \n}", "category": "Python"}, {"instruction": "Create a SQL query to output the names of all the customers in the orders table", "input": "", "output": "SELECT DISTINCT customer_name FROM orders;", "category": "Python"}, {"instruction": "Write a JavaScript program to check whether a particular character is present in a given string or not", "input": "String: 'Hello World!'\nCharacter: 'l'", "output": "function checkChar(str, char) {\n    if (str.indexOf(char) > -1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nif (checkChar('Hello World!', 'l')) {\n    console.log('Character is present in the string');\n} else {\n    console.log('Character is not present in the string');\n}", "category": "Python"}, {"instruction": "Design a method which takes in two sorted array of size n and m, and returns a new sorted array of size n + m", "input": "int arr1[] = {1, 3, 5, 7};\nint arr2[] = {2, 4, 6, 8};", "output": "public static int[] mergeArrays(int[] arr1, int[] arr2) {\n    int[] result = new int[arr1.length + arr2.length];\n    int i = 0, j = 0, k = 0;\n  \n    while (i < arr1.length && j < arr2.length)  \n    { \n        if (arr1[i] < arr2[j])  \n            result[k++] = arr1[i++]; \n        else\n            result[k++] = arr2[j++]; \n    } \n  \n    while (i < arr1.length)  \n        result[k++] = arr1[i++]; \n  \n  \n    while (j < arr2.length)  \n        result[k++] = arr2[j++]; \n  \n    return result; \n}", "category": "Python"}, {"instruction": "Compare the two strings, and return 0 if they are the same, 1 if a is greater than b, or -1 if b is greater than a.", "input": "Strings:\na = \"hello world\"\nb = \"goodbye world\"", "output": "int result = a.compareTo(b);\n//Result: 1 (because \"hello world\" is greater than \"goodbye world\")", "category": "Python"}, {"instruction": "Write a Java code snippet to print out the current system time.", "input": "", "output": "long currentTimeMillis = System.currentTimeMillis();\nSimpleDateFormat sdf = new SimpleDateFormat(\"MMM dd,yyyy HH:mm:ss\");    \nDate resultdate = new Date(currentTimeMillis);\nSystem.out.println(sdf.format(resultdate));  //Result: Dec 01,2020 13:55:42", "category": "Python"}, {"instruction": "Create a class in Python for a student which should include the following fields: first name, last name, age, and grade.", "input": "", "output": "class Student:\n    def __init__(self, first_name, last_name, age, grade):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n        self.grade = grade", "category": "Python"}, {"instruction": "Write a regular expression to validate an Indian mobile number.", "input": "", "output": "^[6-9][0-9]{9}$", "category": "Python"}, {"instruction": "Suggest a sorting algorithm which takes minimal time to execute.", "input": "", "output": "Quick Sort", "category": "Python"}, {"instruction": "How can you pass multiple parameters in a function?", "input": "", "output": "You can pass multiple parameters in a function by using either argument lists, or by using objects or arrays to group multiple parameters together.", "category": "Python"}, {"instruction": "Create a PHP script to add a given user to a database", "input": "username = 'NewUser'\npassword = 'Test123'", "output": "<?php  \n$username = 'NewUser'; \n$password = 'Test123'; \n\n$connection = mysqli_connect(\"localhost\", \"root\", \"\", \"mydatabase\");  \n\n$sql = \"INSERT INTO users (username, password) \n\t\tVALUES ('\".$username.\"', '\".$password.\"')\";  \n\nif(mysqli_query($connection, $sql))\n{\n\techo \"User added successfully\";\n}\nelse\n{  \n\techo \"Error: \" . $sql . \"<br>\" . mysqli_error($connection);\t  \n} \n?>", "category": "Python"}, {"instruction": "Develop an R script that converts a given number from Fahrenheit to Celsius.", "input": "Fahrenheit temperature = 100", "output": "celsius_temperature = function(fahrenheit_temperature) {\n  celsius_temperature = (fahrenheit_temperature - 32) * 5 / 9\n  return(celsius_temperature)\n}\n\n# Test case\nprint(celsius_temperature(100)) # Output: 37.77778", "category": "Python"}, {"instruction": "Create a CSS rule to make all titles on a page bold.", "input": "", "output": "h1, h2, h3 {\n    font-weight: bold; \n}", "category": "Python"}, {"instruction": "Create a Java program that takes input from a user and prints it out.", "input": "", "output": "import java.util.Scanner;\n\npublic class Echo {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        String line = input.nextLine();\n        \n        System.out.println(line);\n    }\n}", "category": "Python"}, {"instruction": "Write a code to find the longest common prefix among a given set of strings.", "input": "", "output": "\"\"\"\nA code to find the longest common prefix among a given set of strings\n\"\"\"\n\ndef longest_common_prefix(strs): \n  \n    if not strs: \n        return \"\" \n  \n    shortest_str = min(strs,key=len) \n   \n    for i, ch in enumerate(shortest_str): \n        for other in strs: \n            if other[i] != ch: \n                return shortest_str[:i]  \n    return shortest_str \n  \nif __name__ == '__main__': \n    strs = [\"flower\",\"flow\",\"flight\"] \n    print(\"The longest common prefix is: %s\" % longest_common_prefix(strs))", "category": "Python"}, {"instruction": "What libraries are commonly used in data science?", "input": "", "output": "\"\"\"\nSome of the most commonly used libraries in data science are NumPy, pandas, Matplotlib, Scikit-Learn, TensorFlow, Theano, Seaborn, Keras, NLTK, Apache Spark, and Bokeh. These libraries are used for a variety of tasks such as data manipulation, machine learning, visualization, natural language processing, and big data analysis.\n\"\"\"", "category": "Python"}, {"instruction": "What is the difference between Python 2 and Python 3?", "input": "", "output": "\"\"\"\nThe main difference between Python 2 and Python 3 is in how strings are treated. In Python 2, strings are written in byte strings or fully Unicode strings; in Python 3, strings are written in Unicode by default. Other differences include the import statement, integer division, integer in range function, function print, raising and catching exceptions, binary revisers, and many more.\n\"\"\"", "category": "Python"}, {"instruction": "Create a regular expression that verifies the following pattern: contains one or more digits followed by a hyphen followed by one or more digits.", "input": "", "output": "exp = re.compile(\"\\d+-\\d+\")", "category": "Python"}, {"instruction": "Write a code that takes the input of two strings, and returns the longest common substring in them.", "input": "", "output": "\"\"\"\nA code that takes the input of two strings, and returns the longest common substring in them\n\"\"\"\n\ndef longest_common_substring(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\nif __name__ == '__main__': \n    s1 = \"Hello World\"\n    s2 = \"Hey World\"\n    print(\"The longest common substring is: %s\" % longest_common_substring(s1, s2))", "category": "Python"}, {"instruction": "What are the steps to debug a code?", "input": "", "output": "\"\"\"\nThe steps to debug a code are:\n\n1. Identify the errors in the code. \n2. Identify the source of the errors. \n3. Examine the context of the errors. \n4. Determine possible solutions. \n5. Test each solution and check the results. \n6. Refine the solution by repeating steps 4 and 5 until the issue is resolved. \n\"\"\"", "category": "Python"}, {"instruction": "Given a string, what is the best way to reverse the characters in it?", "input": "<noinput>>", "output": "\"\"\"\nThe best way to reverse the characters in a string is by using the slicing option of a string object. \n\nThe string slicing reverses a string by slicing it from the end of the string and going to the beginning of the string. This can be done with the following syntax:\n\nstring_name[::-1]\n\nFor example, to reverse the string \"Hello World!\", the following can be used:\n\n\"Hello World!\"[::-1]\n\nwhich will output \"!dlroW olleH\". \n\"\"\"", "category": "Python"}, {"instruction": "Write a code to perform a depth-first search on a binary search tree.", "input": "", "output": "\"\"\"\nA code to perform a depth-first search on a binary search tree\n\"\"\"\n\n# Node class \nclass Node: \n  \n    # Constructor to create a new node \n    def __init__(self, key): \n        self.key = key  \n        self.left = None\n        self.right = None\n  \n# A function to do inorder tree traversal \ndef depth_first_search(root): \n  \n    if root is not None: \n        print(root.key, end=\" \") \n        depth_first_search(root.left) \n        depth_first_search(root.right) \n  \nif __name__ == '__main__': \n    root = Node(1) \n    root.left      = Node(2) \n    root.right     = Node(3) \n    root.left.left  = Node(4) \n    root.left.right  = Node(5) \n  \n    print(\"Depth First Search:\")\n    depth_first_search(root)", "category": "Python"}, {"instruction": "What is pandas and why would someone use it?", "input": "", "output": "\"\"\"\nPandas is a Python library used for data analysis and manipulation. It is used for data wrangling, data preparation, and data exploration. Pandas allows for easy manipulation and analysis of data, as well as performing high-level operations on it. It also supports several data formats including CSV, JSON, SQlite, HDF5, and many more. Pandas is a powerful tool for data analysis as it is flexible, functional, and easy to use. It offers a wide range of tools for data analysis, including data filtering and data aggregation. With Pandas, it is possible to quickly convert, clean, and manipulate data into an easily understandable format, enabling the user to easily explore and identify trends and patterns.", "category": "Python"}, {"instruction": "Write a C++ function which allows the user to input two strings and prints the longest string.", "input": "", "output": "void getLongestString(string str1, string str2) { \n  \n    // variables to store length of both strings \n    int l1 = str1.length(), l2 = str2.length(); \n  \n    if (l1 > l2) \n        cout << str1; \n    else  \n        cout << str2; \n}", "category": "Python"}, {"instruction": "Suggest a class name for a class which models a data structure for storing a 2-dimensional array.", "input": "", "output": "MatrixDataStructure", "category": "Python"}, {"instruction": "Provide a syntax for an if-else statement in Javascript.", "input": "", "output": "if (condition) {\n  // statements when condition is true\n} else {\n  // statements when condition is false\n}", "category": "Python"}, {"instruction": "Create a Python code for a basic for loop.", "input": "", "output": "\"\"\"\nA Python code for a basic for loop\n\"\"\"\n\nfor i in range(10):\n    print(i)", "category": "Python"}, {"instruction": "Place the missing code in the following Java program to print \"Hello World!\".", "input": "public class HelloWorld {\n\npublic static void main(String[] args) {\n~\n\n}\n\n}", "output": "public class HelloWorld {\n\npublic static void main(String[] args) {\n System.out.println(\"Hello World!\");\n\n}\n\n}", "category": "Python"}, {"instruction": "Given a list of integers, calculate the sum of only the first 3 numbers.", "input": "List: [1,4,5,7,2]", "output": "list = [1,4,5,7,2]\nsum = list[0] + list[1] + list[2] #Result: 10", "category": "Python"}, {"instruction": "Write a piece of code that runs a loop from 0 to 10, and prints the loop index each time it runs.", "input": "", "output": "for i in range(11):\n    print(i)", "category": "Python"}, {"instruction": "Create a program to find the nth element of the Fibonacci sequence.", "input": "", "output": "def nth_element(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1 \n    else:\n        return nth_element(n-1) + nth_element(n-2)", "category": "Python"}, {"instruction": "Find the number of combinations of a given length from the characters in a given string.", "input": "string: \"ABCD\"\nlength: 2", "output": "def count_combinations(string, length):\n    result = 1\n    for i in range(length):\n        result *= len(string)\n    return result", "category": "Python"}, {"instruction": "Find the first non-repeating character in a string.", "input": "string: \"abcdabcd\"", "output": "def find_first_non_repeating(string):\n    seen = {}\n    for char in string:\n        if char in seen:\n            seen[char] +=1 \n        else:\n            seen[char] = 1\n    return [char for char in string if seen[char] == 1][0]", "category": "Python"}, {"instruction": "Create a program to check if the input is an even number.", "input": "", "output": "def is_even(num):\n    return num % 2 == 0", "category": "Python"}, {"instruction": "Calculate the Fibonacci sequence up to the n-th number where n is provided as an argument.", "input": "", "output": "def fibonacci(n):\n    if n == 0:\n        return 0 \n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)", "category": "Python"}, {"instruction": "Create an algorithm in Java for maximum subarray problem.", "input": "", "output": "public static int maxSubArraySum(int a[]) \n{ \n    int size = a.length; \n    int maxSoFar = Integer.MIN_VALUE, maxEndingHere = 0; \n  \n    for (int i = 0; i < size; i++) \n    { \n        maxEndingHere = maxEndingHere + a[i]; \n        if (maxSoFar < maxEndingHere) \n            maxSoFar = maxEndingHere; \n        if (maxEndingHere < 0) \n            maxEndingHere = 0; \n    } \n    return maxSoFar; \n}", "category": "Python"}, {"instruction": "Generate a C# code for searching an element in an array.", "input": "", "output": "public class Program\n{\n    public static int SearchElement(int[] arr, int value)\n    {\n        for (int i=0; i<arr.Length; i++)\n        {\n            if (arr[i] == value)\n                return i;\n        }\n        return -1;\n    }\n\n    public static void Main()\n    {\n        int[] myArray = { 1, 2, 3, 5, 7, 10, 15 };\n        int element = 5;\n\n        int index = SearchElement(myArray, element);\n\n        if (index == -1)\n            Console.WriteLine(\"Element not found\");\n        else\n            Console.WriteLine(\"Element found at position: \" + (index+1));\n    }\n}", "category": "Python"}, {"instruction": "Construct a SQL query to find all the books with a price over \u00a310.", "input": "", "output": "SELECT * FROM books WHERE price > 10;", "category": "Python"}, {"instruction": "Generate a program in Java that reads two strings and checks if the strings are equal.", "input": "", "output": "public class StringEquality { \n\tpublic static void main(String[] args) { \n\t\t// two strings \n\t\tString s1, s2; \n\n\t\ts1 = \"Hello\"; \n\t\ts2 = \"Hello\"; \n\n\t\tif (s1.equals(s2)) \n\t\t\tSystem.out.println(\"Strings are equal.\"); \n\t\telse\n\t\t\tSystem.out.println(\"Strings are not equal.\"); \n\t} \n}", "category": "Python"}, {"instruction": "Create a program in Python for converting Fahrenheit to Celsius.", "input": "", "output": "def fahrenheit_to_celsius(temp): \n    return (temp - 32) * 5/9;  \n  \n# Driver code \ntemperature = float(input(\"The temperature in Fahrenheit: \")) \nprint(\"Temperature in Celsius: {}\".format( fahrenheit_to_celsius(temperature)))", "category": "Python"}, {"instruction": "Suggest a method in JavaScript for finding the maximum of two numbers.", "input": "", "output": "function findMax(num1, num2) {\n return Math.max(num1, num2); \n}", "category": "Python"}, {"instruction": "Generate a Java program to read two numbers from the user and print their sum.", "input": "", "output": "import java.util.Scanner;\n  \npublic class SumOfTwoNumbers \n{\n    public static void main(String[] args) \n    {\n        Scanner scanner = new Scanner(System.in);\n        int num1, num2, sum;\n        System.out.print(\"Enter first number:\");\n        num1 = scanner.nextInt();\n        \n        System.out.print(\"Enter second number:\");\n        num2 = scanner.nextInt();\n        \n        scanner.close();\n        sum = num1 + num2;\n        System.out.println(\"Sum of both numbers :\" + sum);\n    }\n}", "category": "Python"}, {"instruction": "Write an algorithm in C++ for linear search.", "input": "", "output": "// C++ implementation of the linear search\n#include <iostream> \nusing namespace std; \n  \n// A iterative linear search function to search 'x' in arr[] \n// of size 'n' \nint search(int arr[], int n, int x) \n{ \n    int i; \n    for (i = 0; i < n; i++) \n        if (arr[i] == x) \n            return i; \n    return -1; \n} \n  \nint main() \n{ \n    int arr[] = { 2, 3, 4, 10, 40 }; \n    int x = 10; \n    int n = sizeof(arr) / sizeof(arr[0]); \n    int result = search(arr, n, x); \n    (result == -1) ? cout<<\"Number not found\" \n               : cout<<\"Number found at index \"<<result; \n    return 0; \n}", "category": "Python"}, {"instruction": "Implement a Java class for a LinkedList.", "input": "", "output": "public class LinkedList {\n    private Node head; // head of the list \n    // linked list Node. \n    // This inner class is made static \n    // so that main() can access it \n    static class Node { \n        int data; \n        Node next; \n        // Constructor \n        Node(int d) \n        { \n            data = d; \n            next = null; \n        } \n    } \n  \n    public void append(int new_data) \n    { \n        // allocate new Node \n        Node new_node = new Node(new_data); \n        // if the Linked List is empty, \n        // then make the new Node as head \n        if (head == null) { \n            head = new Node(new_data); \n            return; \n        } \n  \n        // This new Node is going to be the last node, so make next of \n        // it as null \n        new_node.next = null; \n        // Else traverse till the last Node \n        Node last = head; \n        while (last.next != null) \n            last = last.next; \n        // Change the next of last Node \n        last.next = new_node; \n        return; \n    }\n}", "category": "Python"}, {"instruction": "Create an array of all the odd numbers between 0 and n (inclusive).", "input": "", "output": "def odd_numbers_array(n):\n    array = []\n    for i in range(0,n+1):\n        if i%2 != 0:\n            array.append(i)\n    return array", "category": "Python"}, {"instruction": "Implement a game of Hangman in Python.", "input": "", "output": "import random\n\n# list of words\nword_list = [\"python\", \"java\", \"computer\", \"programming\", \"hangman\"]\n\n# randomly select a word\nword = random.choice(word_list)\n\n# set initial lives\nlives = 6\n\n# write your code here\ndef hangman(word, lives):\n  return # write your code here", "category": "Python"}, {"instruction": "Create a Flask endpoint for displaying a list of items from a database.", "input": "Table name: 'items'\nColumns: id, name, price", "output": "@app.route('/items', methods = ['GET'])\ndef display_items():\n # write your code here\n items = []\n # query the database\n items = db.session.query(Items).all()\n # return the list of items\n return jsonify(items)", "category": "Python"}, {"instruction": "Write a React component for a form to allow users to submit a message.", "input": "", "output": "import React from 'react';\n\nclass MessageForm extends React.Component {\n  state = {name: '', message: '' }\n\n  handleChangeName = evt => {\n    this.setState({ name: evt.target.value });\n  }\n\n  handleChangeMessage = evt => {\n    this.setState({ message: evt.target.value });\n  }\n\n  handleSubmit = evt => {\n    //submit your form here\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input type=\"text\" name=\"name\" value={this.state.name} onChange={this.handleChangeName} />\n        </label>\n        <label>\n          Message:\n          <input type=\"text\" name=\"message\" value={this.state.message} onChange={this.handleChangeMessage} />\n        </label>\n        <button type=\"submit\">Submit</button>\n      </form>\n    );\n  }\n};\n\nexport default MessageForm;", "category": "Python"}, {"instruction": "Use TensorFlow to build a deep learning model for predicting the price of a given stock.", "input": "", "output": "import tensorflow as tf\n\n# define the model\nmodel = tf.keras.Sequential([\n tf.keras.layers.Input(shape=(1,), name=\"Input_Layer\", dtype=tf.float32),\n tf.keras.layers.Dense(32, activation='relu', name=\"Hidden_Layer_1\"),\n tf.keras.layers.Dense(32, activation='relu', name=\"Hidden_Layer_2\"),\n tf.keras.layers.Dense(1, activation='sigmoid', name=\"Output_Layer\")\n])\n\n# compile the model\nmodel.compile(\noptimizer=tf.keras.optimizers.Adam(),\nloss=tf.keras.losses.MeanSquaredError(),\nmetrics=[tf.keras.metrics.MeanAbsoluteError()],\n)\n\n# fit the model\nmodel.fit(x_train, y_train, batch_size=32, epochs=10, validation_data=(x_val, y_val))", "category": "Python"}, {"instruction": "How can you check the memory used by a Python object?", "input": "", "output": "You can use the sys module\u2019s \"getsizeof()\" function to check the memory used by an object. The getsizeof() method returns the memory size of the specified object in bytes. For example, sys.getsizeof(data) will return the size of the data object in bytes.", "category": "Python"}, {"instruction": "Given a sentence, find the first verb in the sentence.", "input": "Sentence: She shouted and cheered when she saw her result.", "output": "shouted", "category": "Python"}, {"instruction": "Name the error in the example code.", "input": "Example Code:\ndef do_math():\nnum1 = 5\nnum2 = 3\nsum = num1 + num2\nreturn", "output": "The error is \"Missing Return Statement\".", "category": "Python"}, {"instruction": "What approaches are available for the optimization of a neural network?", "input": "", "output": "There are several approaches for the optimization of a neural network, such as backpropagation, gradient descent, genetic algorithms, simulated annealing, particle swarm optimization, evolutionary computation, and stochastic gradient descent. These approaches are used to improve the accuracy and efficiency of the neural network by optimizing its parameters.", "category": "Python"}, {"instruction": "Given a sequence of numbers, write a program to find the length of the longest subsequence in which all numbers are in increasing order.", "input": "arr = [1, 7, 4, 3, 2, 8]", "output": "def findLongestSubsequence(arr): \n    n = len(arr)\n    dp = [1]*n \n    for i in range(1, n): \n        for j in range(i): \n            if arr[i] > arr[j] and dp[i] < dp[j] + 1 : \n                dp[i] = dp[j]+1\n    return max(dp)", "category": "Python"}, {"instruction": "How is the Julia dynamic programming technique different from bottom-up dynamic programming?", "input": "", "output": "Julia's dynamic programming technique uses memoization, which is a method of storing and reusing the result of previous computations. Bottom-up dynamic programming is a type of dynamic programming that begins with the solution to small problem instances and gradually builds up towards larger problem instances. Julia's dynamic programming approach does not necessarily build up from solution to small problem to larger problems and therefore may provide a more efficient solution for certain problems.", "category": "Python"}, {"instruction": "Given two numbers N and M, write a program to find the number of numbers from 1 to N where the last digit is less than or equal to M.", "input": "N = 30, M = 7", "output": "def findNumbers(N, M): \n    count = 0\n    for i in range(1, N+1): \n        if i % 10 <= M: \n            count += 1\n    return count", "category": "Python"}, {"instruction": "What command can be used to delete the \"example\" directory?", "input": "", "output": "The command to delete the \"example\" directory is \"rm -r example\".", "category": "Python"}, {"instruction": "List all the HTML elements which are used for formatting.", "input": "", "output": "The HTML elements used for formatting include <p>, <hr>, <br>, <b>, <i>, <strong>, <em>, <sup>, <span>, <blockquote>, <pre>, <address>, <div>, <ul>, <ol>, <li>, and <table>.", "category": "Python"}, {"instruction": "Create four classes for a digital banking application.", "input": "", "output": "Class 1: BankAccount - Responsible for creating, deleting, and managing bank accounts\nClass 2: Transaction - Responsible for storing and tracking transaction histories\nClass 3: User - Responsible for managing user access information \nClass 4: Customer - Responsible for storing customer data and providing customer service", "category": "Python"}, {"instruction": "Get a random number between 1 and 20 using C++.", "input": "", "output": "#include <iostream> \n#include <cstdlib> \n#include <ctime> \n  \nusing namespace std; \n  \n// Generate a random number between 1 and 20 \nint randomnumber(int min, int max) \n{ \n  return (rand() % (max - min + 1) + min); \n} \n  \nint main() \n{  \n  int num; \n  // Use current time as seed for random generator  \n  srand(time(0));  \n   \n  num = randomnumber(1, 20); \n  cout << \"Random number between 1 and 20 is \" << num << endl; \n    \n  return 0; \n}", "category": "Python"}, {"instruction": "How would you write a query in SQL to return the names of all customers who have purchased over $100 in the last month?", "input": "", "output": "SELECT customer_name \nFROM customers \nWHERE orders.amount > 100 AND orders.date > NOW() - INTERVAL 1 MONTH;", "category": "Python"}, {"instruction": "Create a web service for sending a daily email reminder.", "input": "", "output": "import smtplib\nfrom email.mime.text import MIMEText\n\n# write your code here\ndef send_email(recipient, message):\n sender_email = \"<your@email.com>\"\n sender_name = \"Daily Reminder\"\n\n # create the message\n msg = MIMEText(message)\n msg['Subject'] = 'Daily Reminder'\n msg['From'] = sender_name + ' <' + sender_email + '>'\n msg['To'] = recipient\n\n # send the message\n server = smtplib.SMTP('<smtp_server_address>')\n server.starttls()\n server.login(sender_email, '<sender_password>')\n server.send_message(msg)\n server.quit()", "category": "Python"}, {"instruction": "Read the following text and use a regular expression to extract email addresses.", "input": "Please contact john@example.com and lisa@mail.com for more information.", "output": "/(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/", "category": "Python"}, {"instruction": "Write a SQL query to compute the sum of a column of a given table.", "input": "Table name: 'transactions'\nColumns: id, amount", "output": "SELECT SUM(amount) AS total_amount FROM transactions;", "category": "Python"}, {"instruction": "Write a controller in Ruby for processing user sign up requests.", "input": "", "output": "class SignupController < ApplicationController\n  def create\n    # write your code here\n  end\n\n  private\n  \n  def signup_params\n    params.require(:signup).permit(:name, :email, :password, :password_confirmation)\n  end\nend", "category": "Python"}, {"instruction": "Given a list of words, write a function to check if the list contains any palindrome words.", "input": "words = [\"racecar\", \"level\", \"tot\", \"trot\"]", "output": "def contains_palindrome(words):\n    for word in words:\n        if word == word[::-1]:\n            return True\n    return False", "category": "Python"}, {"instruction": "Write an HTML program to capture the entered text in an input box", "input": "", "output": "<html> \n  <head>\n    <title>Text Capturing</title>\n  </head>\n \n  <script>\n    function captureText() {\n      var text = document.getElementById(\"inputBox\").value; \n      alert(\"Entered text: \" + text);\n    }\n  </script>\n\n  <body>\n    <h1> Text Capturing </h1>\n    <input type=\"text\" id=\"inputBox\" />\n    <button onclick=\"captureText()\">Capture Text</button> \n  </body>\n</html>", "category": "Python"}, {"instruction": "How can you create a string of all random characters of length 10 in Python?", "input": "", "output": "import random\nrandom_string = ''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ') for _ in range(10))", "category": "Python"}, {"instruction": "What should be written in place of \"___\" to make the following code a valid if-else statement in Python?", "input": "if x >= 0:\n ___", "output": "if x >= 0:\n    print(\"x is positive\")", "category": "Python"}, {"instruction": "How can we delete all the elements of a list in Python?", "input": "", "output": "def delete_all_elements(lst):\n    del lst[:]", "category": "Python"}, {"instruction": "How would you print all the key-value pairs of an already existing dictionary?", "input": "", "output": "def print_dict_key_value(dic):\n    for key, value in dic.items():\n        print(f\"{key}: {value}\")", "category": "Python"}, {"instruction": "Given a string and an integer N, write a Python function to construct the Nth palindromic string.", "input": "", "output": "def construct_palindrome(string, N):\n    length = len(string)\n    mid = length // 2\n\n    left = string[:mid]\n    right = left[::-1]\n\n    if length % 2 == 0:\n        left = string[:mid - (N - 1)]\n        right = left[::-1]\n    else:\n        left = string[:mid - N]\n        right = string[mid + 1:(mid + 1) + N][::-1]\n\n    return left + string[mid] + right", "category": "Python"}, {"instruction": "Given a dictionary, write a Python function to print all the key-value pairs in the dictionary.", "input": "", "output": "def print_dict_key_value(dic):\n    for key, value in dic.items():\n        print(f\"{key}: {value}\")", "category": "Python"}, {"instruction": "Given a list of numbers, write a Python function to count how many numbers in the list are greater than 10.", "input": "", "output": "def count_greater_than_ten(nums):\n    return len([n for n in nums if n > 10])", "category": "Python"}, {"instruction": "Write a function that takes a positive integer and returns the next number which is divisible by 7.", "input": "", "output": "def next_mult_of_7(num):\n    return num + (7 - num%7)", "category": "Python"}, {"instruction": "How would you reverse the words order in a given string?", "input": "", "output": "def reverse_words(string):\n    return \" \".join(string.split(\" \")[::-1])", "category": "Python"}, {"instruction": "Create a function to classify an array as odd or even length.", "input": "", "output": "def classify_array_length(arr):\n    if len(arr) % 2 == 0:\n        return 'even'\n    else:\n        return 'odd'", "category": "Python"}, {"instruction": "Edit the following code to generate a list of the vowels in a given string.", "input": "", "output": "def get_vowels(str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    res = []\n    for letter in str:\n        if letter.lower() in vowels:\n            res.append(letter)\n    return res", "category": "Python"}, {"instruction": "Create an algorithm that finds the maximum subarray sum in a given array.", "input": "[-2, 1, -3, 4, -1, 2, 1, -5, 4]", "output": "def max_subarray_sum(arr):\n    max_sum = 0\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum", "category": "Python"}, {"instruction": "Print out the prime numbers between 0 to 100.", "input": "", "output": "for n in range(2, 101): \n    for i in range(2, n): \n        if n % i == 0: \n            break\n    else: \n        print(n, end = ' ')", "category": "Python"}, {"instruction": "Create a program in Python to return the first n elements from an array", "input": "", "output": "def first_n_elements(array, n):\n    return array[:n]", "category": "Python"}, {"instruction": "Create a dictionary in Python whose keys are strings and values are integers", "input": "", "output": "my_dict = {\n  \"one\": 1,\n  \"two\": 2,\n  \"three\": 3\n}", "category": "Python"}, {"instruction": "Given a list of numbers, design a function in Python to check if all numbers in the list are even", "input": "", "output": "def all_even(lst):\n    for num in lst:\n        if num % 2 != 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Create a function in Python that takes two parameters and returns the sum of squares of all numbers between them", "input": "", "output": "def sum_of_square_range(a, b):\n    sum = 0\n    for i in range(a, b+1):\n        sum += i * i\n    return sum", "category": "Python"}, {"instruction": "Create a text-based menu for a command-line program.", "input": "", "output": "Welcome to My Program! \n\nPlease select from the following menu:\n\n1. Run Program\n2. Edit Settings\n3. View Logs\n4. Quit Program\n\nPlease enter the number of your choice:", "category": "Python"}, {"instruction": "Parse the following JSON object and extract the data stored in the \"details\" field.", "input": "{\n    \"data\": [\n        {\n            \"name\": \"John\",\n            \"details\": {\n                \"address\": \"123 Main St.\",\n                \"phone\": \"000-123-4567\"\n            }\n        }\n    ]\n}", "output": "const parsedJSON = JSON.parse(jsonObject);\nconst address = parsedJSON.data[0].details.address;\nconst phone = parsedJSON.data[0].details.phone;", "category": "Python"}, {"instruction": "Write a Python function to convert an array of integers into their respective strings.", "input": "arr = [1, 2, 3]", "output": "def array_int_string(arr):\n    \"\"\"Converts an array of integers into strings.\"\"\"\n    return [str(num) for num in arr]\n\narray_int_string(arr)  # returns [\"1\", \"2\", \"3\"]", "category": "Python"}, {"instruction": "Find the missing number in the following array: [16, 3, 2, 11, 15, 5, 4, 14].", "input": "", "output": "The missing number is 12.", "category": "Python"}, {"instruction": "Design an algorithm to get the maximum value from a given array of four elements.", "input": "[-5, 2, 45, 9]", "output": "1. Set a variable, maxValue, and initialize it to the first element in the array.\n2. Iterate through the array, comparing each element to maxValue.\n3. If the element is bigger than maxValue, replace maxValue with the element.\n4. When the loop is finished, save maxValue and return it as the maximum value from the array.", "category": "Python"}, {"instruction": "Construct a Numpy array of shape 2x3 containing all 7s.", "input": "", "output": "arr = np.array([[7, 7, 7],\n                [7, 7, 7]])", "category": "Python"}, {"instruction": "Create a SQL query to add 1 to a designated row in a table.", "input": "Table: users\nRow: age\nLocation: id = 4", "output": "UPDATE users \nSET age = (age + 1) \nWHERE id = 4;", "category": "Python"}, {"instruction": "Design and implement a function that takes a string as input and returns the reverse string.", "input": "", "output": "function reverseString(str) {\n  let reversedStr = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversedStr += str[i];\n  }\n  return reversedStr;\n}", "category": "Python"}, {"instruction": "Create a CSS rule to set the size for all h1 elements as 34px.", "input": "", "output": "h1 {\n  font-size: 34px;\n}", "category": "Python"}, {"instruction": "Write an algorithm for checking if an array is sorted or not.", "input": "Array = [4, 1, 7, 5]", "output": "// This function accepts an array as argument and returns true if array is sorted, else false.\nlet isSorted = (arr) => { \n \n  // Set the initial status as true \n  let sorted = true; \n  \n  // Iterate over the complete array \n  for (let i = 0; i < arr.length - 1; i++) { \n\n    // Compare adjacent element \n    if (arr[i] > arr[i + 1]) { \n\n        // Update the status if it is not sorted \n        sorted = false; \n        break; \n    } \n  } \n\n  // Return the sorted status \n  return sorted; \n} \n\n// Example array \nlet arr = [4, 1, 7, 5];\n\n// Check if the array is sorted\nconsole.log(isSorted(arr)); // Output: false", "category": "Python"}, {"instruction": "Write a CSS rule to create a text-decoration line below the h2 element.", "input": "", "output": "h2 {\n  text-decoration: underline;\n}", "category": "Python"}, {"instruction": "Implement a function in Python that calculates the Levenshtein Distance of two strings.", "input": "str1 = \"hackathon\"\nstr2 = \"hack\"", "output": "def calculate_levenshtein_distance(str1, str2):    \n    distances = np.zeros((len(str1)+1, len(str2)+1))\n    for i in range(0, len(str1)+1):\n        distances[i, 0] = i\n    for j in range(0, len(str2)+1):\n        distances[0, j] = j\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                distances[i, j] = distances[i-1, j-1]\n            else:\n                distances[i, j] = min(distances[i-1, j], distances[i, j-1], distances[i-1, j-1]) + 1\n    return distances[len(str1), len(str2)]", "category": "Python"}, {"instruction": "Parse the following JSON string and print out all the key-value pairs:\n{\u201cname\u201d:\u201dJohn\u201d,\u201dage\u201d:25,\u201dcity\u201d:\"New York\"", "input": "String = '{\"name\":\"John\",\"age\":25,\"city\":\"New York\"}'", "output": "import json \n  \nString = '{\"name\":\"John\",\"age\":25,\"city\":\"New York\"}'\n  \n# Parse the string\njs = json.loads(String)\n  \n# Print all key-value pairs\nfor k, v in js.items():\n    print(k, \":\", v)", "category": "Python"}, {"instruction": "Convert this integer to its corresponding binary representation in 8 bits.", "input": "32", "output": "def int_to_binary(num):\n    return '{0:08b}'.format(num)", "category": "Python"}, {"instruction": "Create an array where each element is the maximum of each row in a given matrix.", "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def max_elements(matrix):\n    max_elements = []\n    for row in matrix:\n        max_elements.append(max(row))\n    return max_elements", "category": "Python"}, {"instruction": "Design a basic graphic user interface (GUI) for a calculator.", "input": "", "output": "import tkinter as tk\n\nroot = tk.Tk()\n\n# design the window\nroot.title(\"Calculator\")\nroot.geometry(\"200x250\")\n\n# create the buttons\nbutton1 = tk.Button(root, text=\"1\", width=5, height=2)\nbutton1.grid(row=0, column=0, padx=4, pady=4)\n\nbutton2 = tk.Button(root, text=\"2\", width=5, height=2)\nbutton2.grid(row=0, column=1, padx=4, pady=4)\n\nbutton3 = tk.Button(root, text=\"3\", width=5, height=2)\nbutton3.grid(row=0, column=2, padx=4, pady=4)\n\n# create more buttons\n# and so on\n\nroot.mainloop()", "category": "Python"}, {"instruction": "Compute the surface area of a pyramid with a base area of 10 cm and a height of 7 cm.", "input": "", "output": "The surface area of the pyramid is 24 cm\u00b2.", "category": "Python"}, {"instruction": "Create a JavaScript object representing a book, with properties such as title, author and pages.", "input": "", "output": "let book = {\n  title: \"The Cat in the Hat\",\n  author: \"Dr. Seuss\",\n  pages: 60\n};", "category": "Python"}, {"instruction": "Using a for loop, create a list of integers that are multiples of 4 from 0 to 50.", "input": "", "output": "multiples_of_four = [n for n in range(0, 51) if n % 4 == 0]", "category": "Python"}, {"instruction": "Insert the following data into a SQL table named \"customers\":\nName: John Smith\nAge: 32\nAddress: 201 Mission Street\nCity: San Francisco\nState: CA", "input": "", "output": "INSERT INTO customers (name, age, address, city, state) VALUES ('John Smith', 32, '201 Mission Street', 'San Francisco', 'CA');", "category": "Python"}, {"instruction": "How can you remove all blank spaces from a given string in Python?", "input": "", "output": "You can remove all blank spaces from a given string in Python using the replace() function. This function takes two arguments, the first is the substring to be replaced and the second is the substring to be inserted in its place. In this case, you can use an empty string as the second argument to remove any instance of the white space from the string. \n\nFor example:\n\nstring_with_spaces = \"   Hello  World  \" \nno_spaces = string_with_spaces.replace(\" \", \"\") \nprint(no_spaces)  # Output: \"HelloWorld\"", "category": "Python"}, {"instruction": "Improve the following code by implementing a more efficient algorithm.", "input": "def FunctionA(arr):\n    output = []\n    for elem in arr:\n        if elem > 0 and not elem in output:\n            output.append(elem)\n    return output", "output": "def FunctionA(arr):\n    output = set()\n    for elem in arr:\n        if elem > 0:\n            output.add(elem)\n    return list(output)", "category": "Python"}, {"instruction": "Program a function in C++ which finds the number of duplicate elements in an array.", "input": "array: [1,  3, 2, 5, 2, 3]", "output": "#include <iostream>\n#include <unordered_map>\n \nusing namespace std;\n \nint numOfDuplicates(int arr[], int n)\n{\n    unordered_map<int, int> freq;\n \n    for (int i = 0; i < n; i++)\n    {\n        freq[arr[i]]++;\n    }\n \n    int count = 0;\n    for (auto i : freq)\n    {\n        if (i.second > 1)\n            count++;\n    }\n    return count;\n}", "category": "Python"}, {"instruction": "Generate a working Angular program", "input": "", "output": "import { Component } from '@angular/core';\n \n@Component({\n   selector: 'app-root',\n   templateUrl: './app.component.html',\n   styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n   title = 'Angular Application';\n}", "category": "Python"}, {"instruction": "Use the MySQL CREATE command to create a table of employees containing an employee ID, name, email address and phone number.", "input": "", "output": "CREATE TABLE employees (\n  id INT NOT NULL AUTO_INCREMENT,\n  name VARCHAR(255) NOT NULL,\n  email VARCHAR(255) NOT NULL,\n  phone VARCHAR(20) NOT NULL,\n  PRIMARY KEY (id)\n);", "category": "Python"}, {"instruction": "Write a Kotlin class to represent a book. It should contain the title, author name, year of publication and ISBN.", "input": "", "output": "class Book {\n\n    private var title: String\n    private var authorName: String\n    private var yearOfPublication: Int\n    private var ISBN: String\n\n    constructor(title: String, authorName: String, yearOfPublication: Int, ISBN: String) {\n        this.title = title\n        this.authorName = authorName\n        this.yearOfPublication = yearOfPublication\n        this.ISBN = ISBN\n    }\n\n    fun getTitle(): String {\n        return title\n    }\n\n    fun setTitle(title: String) {\n        this.title = title\n    }\n\n    fun getAuthorName(): String {\n        return authorName\n    }\n\n    fun setAuthorName(authorName: String) {\n        this.authorName = authorName\n    }\n\n    fun getYearOfPublication(): Int {\n        return yearOfPublication\n    }\n\n    fun setYearOfPublication(yearOfPublication: Int) {\n        this.yearOfPublication = yearOfPublication\n    }\n\n    fun getISBN(): String {\n        return ISBN\n    }\n\n    fun setISBN(ISBN: String) {\n        this.ISBN = ISBN\n    }\n    \n}", "category": "Python"}, {"instruction": "Create an HTML form to collect user information such as address and contact details.", "input": "", "output": "<form>\n  <label for=\"firstname\">First Name:</label>\n  <input type=\"text\" id=\"firstname\" name=\"firstname\" >\n  <br>\n  <label for=\"lastname\">Last Name:</label>\n  <input type=\"text\" id=\"lastname\" name=\"lastname\" >\n  <br>\n  <label for=\"address\">Address:</label>\n  <input type=\"text\" id=\"address\" name=\"address\" >\n  <br>\n  <label for=\"contact\">Contact:</label>\n  <input type=\"text\" id=\"contact\" name=\"contact\" >\n  <br>\n  <input type=\"submit\" value=\"Submit\" >\n</form>", "category": "Python"}, {"instruction": "Write a SQL stored procedure to find all students enrolled in a specific course.", "input": "Table:  courses \nColumns:  Id (int), Name (string)\nTable:  students\nColumns:  Id (int), Name (string), CourseId (int)", "output": "CREATE PROCEDURE getCourseStudents (@courseId INT)\nAS \nBEGIN\n    SELECT s.Name \n    FROM students s\n    INNER JOIN courses c ON s.CourseId = c.Id\n    WHERE c.Id = @courseId\nEND", "category": "Python"}, {"instruction": "Use the Java StringBuilder class to append three strings to a single string.", "input": "String1: \"Hello,\" \nString2: \" world!\" \nString3: \" Have a nice day!\"", "output": "StringBuilder sb = new StringBuilder();\nsb.append(\"Hello,\");\nsb.append(\" world!\");\nsb.append(\" Have a nice day!\");\nString finalString = sb.toString();", "category": "Python"}, {"instruction": "Write an SQL query to find the highest population of any country from the table of countries.", "input": "Table:  countries \nColumns:  Name (string), Population (int)", "output": "SELECT Name, MAX(Population)\nFROM countries;", "category": "Python"}, {"instruction": "Write an HTML code snippet to create two check boxes with labels \u201cyes\u201d and \u201cno\u201d.", "input": "", "output": "<input type=\"checkbox\" name=\"yes\" value=\"Yes\">Yes\n<input type=\"checkbox\" name=\"no\" value=\"No\">No", "category": "Python"}, {"instruction": "Create a CSS style for a div element to have a width of 200px and a height of 50px.", "input": "", "output": "div {\n  width: 200px;\n  height: 50px;\n}", "category": "Python"}, {"instruction": "Implement a method in JavaScript to concatenate two strings together.", "input": "", "output": "function concatenate(string1, string2) {\n   return string1 + string2;\n}", "category": "Python"}, {"instruction": "Edit the following CSS code to add a color of your choice to the <h1> element.", "input": "", "output": "h1 {\n  color: #FF0000;\n}", "category": "Python"}, {"instruction": "Implement a recursive method to find the sum of all numbers from 1 to n. The method should take an integer n as its argument.", "input": "4", "output": "def sumNums(n): \n    if n == 0: \n        return 0\n    else: \n        return n + sumNums(n-1) \n  \n# Driver Code \nn = 4\nprint(sumNums(n))", "category": "Python"}, {"instruction": "Create a CSS style for the text within the tag <p> to be blue and italicized.", "input": "", "output": "p {\n  color: blue;\n  font-style: italic;\n}", "category": "Python"}, {"instruction": "Change the following line of HTML code to add a class named \"highlight\" to the list item.", "input": "<li>Hello</li>", "output": "<li class=\"highlight\">Hello</li>", "category": "Python"}, {"instruction": "How can you print the following pattern in JavaScript?", "input": "", "output": "for (let i=1; i<=5; i++) {\n\u00a0for (let j=5; j>=i; j--) {\n\u00a0\u00a0\u00a0\u00a0document.write(\"*\");\n\u00a0\u00a0}\n\u00a0document.write(\"<br>\");\n}", "category": "Python"}, {"instruction": "Construct a while loop to add all odd integers from 1 to 100.", "input": "", "output": "sum_of_odds = 0\ni = 1\nwhile i <= 100:\n    if i % 2 != 0:\n        sum_of_odds += i\n    i+=1", "category": "Python"}, {"instruction": "Suggest a better algorithm for finding a prime number.", "input": "", "output": "def is_prime(n): \n    \"\"\" \n    A better algorithm for determining if a number is prime \n    :param n: The number to determine whether is prime \n    :return: a boolean if the number is prime\n    \"\"\"\n    if (n <= 1): \n        return False\n    if (n <= 3): \n        return True\n    if (n % 2 == 0 or n % 3 == 0): \n        return False\n  \n    i = 5\n    while(i * i <= n): \n        if (n % i == 0 or n % (i + 2) == 0): \n            return False\n        i = i + 6\n  \n    return True", "category": "Python"}, {"instruction": "In how many ways can you write a program to append two strings together?", "input": "", "output": "There are several ways to write a program to append two strings together: \n\n1. Using the + operator, you can concatenate the two strings: \n    string_combined = string1 + string2\n\n2. Using the format() method, you can combine the two strings into one string: \n    string_combined = '{}{}'.format(string1, string2)\n\n3. Using the join() method, you can join the strings together using a glue character in between: \n    string_combined = ' '.join([string1, string2])\n\n4. Using the append() method, you can append string2 to string1: \n    string1.append(string2)\n\n5. Using the replace() method, you can replace a part of string1 with string2: \n    string_combined = string1.replace(string1, string2)\n\n6. Using the extend() method, you can add the elements of string2 to the end of string1: \n    string1.extend(string2)", "category": "Python"}, {"instruction": "Create a dockerfile to deploy a python app.", "input": "", "output": "FROM python:3.7-alpine\n\nWORKDIR /app\n\n# Copy and install dependencies\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\n# Copy application source\nCOPY src ./src\n\n# Set environment variables\nENV DJANGO_SETTINGS_MODULE=app.settings\n\nEXPOSE 8000\n\n# Run server\nENTRYPOINT [\"python\", \"src/manage.py\"]\nCMD [\"runserver\", \"0.0.0.0:8000\"]", "category": "Python"}, {"instruction": "Create a python program to return a new list with each item multiplied by 2 in an existing list.", "input": "[1, 2, 3, 4, 5]", "output": "def mult_by_two(nums):\n    \"\"\"\n    Returns a new list with each item multiplied by 2 in an existing list\n    :param nums: a list of numbers\n    :return: a list of numbers with each item multiplied by 2\n    \"\"\"\n    new_list = []\n    for num in nums:\n        new_list.append(num * 2)\n    return new_list\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5]\n    print(mult_by_two(nums))", "category": "Python"}, {"instruction": "Using SQL, select the columns from the table below and order them in descending order by the \"date\" column.", "input": "Table Name: Events\nColumns: id, name, date", "output": "SELECT id, name, date \nFROM Events \nORDER BY date DESC;", "category": "Python"}, {"instruction": "Design a function to evaluate an expression represented as a string.", "input": "expression = \"2.0+2.1\"", "output": "def evaluate(expression):\n  expr = expression.replace(\" \",\"\")\n  expr_list = expr.split(\"+\")\n  result = float(expr_list[0]) + float(expr_list[1])\n  return result", "category": "Python"}, {"instruction": "Write a SQL query to select the first and last name of all employees that are located in New York.", "input": "", "output": "SELECT first_name, last_name FROM employees WHERE location = \"New York\";", "category": "Python"}, {"instruction": "Given two strings s1 and s2, write a function to return a new string containing the characters present only in s1.", "input": "s1 = \"abcdef\"\ns2 = \"fghijk\"", "output": "def unique_str(s1, s2):\n    res = \"\"\n    for i in s1:\n        if i not in s2:\n            res += i\n    return res", "category": "Python"}, {"instruction": "Create a C# event handler that is triggered when a button is clicked, and prints the text \"Button clicked!\"", "input": "", "output": "public void btnClick_Click(object sender, System.EventArgs e)  \n{\n    System.Console.WriteLine(\"Button clicked!\");\n}", "category": "Python"}, {"instruction": "Write a SQL statement to select all the authors whose age is greater than 18.", "input": "", "output": "SELECT * \nFROM authors\nWHERE age > 18", "category": "Python"}, {"instruction": "Create an HTML page with an input field and a button. The input field should take a sentence and the two button should \"Upper Case\" and \"Lower Case\" respectively. When clicked, it should upper case or lower case the sentence in the input field.", "input": "", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>String Case Transformer</title>\n  </head>\n  <body>\n    <input type=\"text\" id=\"inputStr\">\n    <button onclick=\"transformCase('upper')\">Upper Case</button>\n    <button onclick=\"transformCase('lower')\">Lower Case</button>\n    <script>\n      function transformCase(choice) {\n        var str = document.getElementById(\"inputStr\").value;\n        if (choice === 'upper') {\n          document.getElementById(\"inputStr\").value = str.toUpperCase();\n        } else {\n          document.getElementById(\"inputStr\").value = str.toLowerCase();\n        }\n      }\n    </script>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Generate a working Android program to display a simple string", "input": "", "output": "public class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        TextView textView = findViewById(R.id.text_view);\n        // You can use a string resource\n        textView.setText(R.string.message);\n    }\n}", "category": "Python"}, {"instruction": "Re-write the code in the given input to make it more efficient.", "input": "def fibonacci(n):\n   if n <= 1:\n      return n\n   else:\n      return(fibonacci(n-1) + fibonacci(n-2))", "output": "def fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==0: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==1: \n        return 1\n    else: \n        a = 0\n        b = 1\n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b", "category": "Python"}, {"instruction": "Create a Java program that takes in a String and returns a String with the letters of the original String reversed.", "input": "string = \"Hello\"", "output": "public static String reverseString(String s) \n{\n    StringBuilder sb = new StringBuilder();\n    \n    for (int i = s.length() - 1; i >= 0; i--)\n    {\n        sb.append(s.charAt(i));\n    }\n    \n    return sb.toString();\n}", "category": "Python"}, {"instruction": "Debug and fix the code in the given input.", "input": "def multiply(x,y)  \n{ \n    return x*y \n  \nx = 5\ny = 4\nprint multiply(x,y)", "output": "def multiply(x,y)  { \n    return x*y \n  \nx = 5\ny = 4\nprint(multiply(x,y))", "category": "Python"}, {"instruction": "Create an array of 5 random numbers between 1 and 10 and output it to the console.", "input": "", "output": "let arr = [];\nfor (let i = 0; i < 5; i++) {\n    arr.push(Math.floor(Math.random() * 10 + 1));\n}\nconsole.log(arr);", "category": "Python"}, {"instruction": "Write a JavaScript program to remove all the occurrences of a specified character from a string.", "input": "The quick brown fox", "output": "function removeChar(str, char){\n  return str.replace(new RegExp(char, 'g'), '');\n}", "category": "Python"}, {"instruction": "Reverse a given string using recursive function in Python.", "input": "", "output": "def reverse_string(str):\n    if len(str) == 0: \n        return str \n    else:\n        return reverse_string(str[1:]) + str[0]", "category": "Python"}, {"instruction": "How would you use regex to identify a valid ip4 address?", "input": "", "output": "A valid IPv4 address can be identified using the regular expression pattern: \n\n^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.|$)){4}$", "category": "Python"}, {"instruction": "Suggest a regular expression pattern that identifies 3 consecutive numbers.", "input": "", "output": "The regular expression pattern that identifies 3 consecutive numbers is: \\d{3}", "category": "Python"}, {"instruction": "You need to add a feature to the existing code in the given input.", "input": "class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year", "output": "class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.mileage = 0\n\n    def getMileage(self):\n        return self.mileage", "category": "Python"}, {"instruction": "Explain what is meant by 'statement coverage' in software testing.", "input": "", "output": "Statement coverage is a software testing metric which measures the percentage of statements in the source code which have been exercised by the test suite. Statement coverage focuses on validating that every line of source code is executed and checked. A successful statement coverage of 100% implies that all executable statements in the application have been tested.", "category": "Python"}, {"instruction": "Write a SQL query to display the names and ages of students older than 25.", "input": "", "output": "SELECT name, age FROM students WHERE age > 25;", "category": "Python"}, {"instruction": "Write a C++ statement to create an array of 10 elements.", "input": "", "output": "int arr[10];", "category": "Python"}, {"instruction": "Create a program in Java to create a simple calculator that has the ability to add, subtract, multiply, and divide numbers.", "input": "", "output": "public class Calculator { \n  \n   // Function to add two numbers \n   public int add(int num1, int num2) { \n        return num1 + num2; \n    } \n  \n    // Function to subtract two numbers \n    public int subtract(int num1, int num2) { \n        return num1 - num2; \n    } \n  \n    // Function to multiply two numbers \n    public int multiply(int num1, int num2) { \n        return num1 * num2; \n    } \n  \n    // Function to divide two numbers \n    public int divide(int num1, int num2) { \n        return num1 / num2; \n    } \n}", "category": "Python"}, {"instruction": "How do we create an object in JavaScript using the object literal notation?", "input": "", "output": "The object literal notation is a way to create an object in JavaScript by wrapping the set of comma-separated key: value pairs in curly braces. For example, to create an object containing two properties, you can write: \n\nvar obj = {\n    name: 'John',\n    age: 22\n};", "category": "Python"}, {"instruction": "Explain this JavaScript code snippet.", "input": "function sayHello(name) {\n    console.log('Hello ' + name);\n}", "output": "This code snippet is a function declaration named sayHello() which takes one argument, 'name'. It prints a string containing the word \"Hello\" and the value of the 'name' argument to the console. It is a common way to communicate with the user through console messages.", "category": "Python"}, {"instruction": "Create a Python program to find the average of the given numbers in the list", "input": "", "output": "my_list = [2, 4, 10, 20]\n\ndef average(nums):\n    return sum(nums) / len(nums)\n\nprint(average(my_list))\n\nOutput:\n8.0", "category": "Python"}, {"instruction": "Given the following list of JavaScript objects and a particular key, write a function to return an array of the values corresponding to that key.", "input": "[\n  {\n    \"name\": \"John\",\n    \"age\": 25\n  },\n  {\n    \"name\": \"Jane\",\n    \"age\": 28\n  },\n  {\n    \"name\": \"Dave\",\n    \"age\": 31\n  }\n ],\nkey = 'age'", "output": "function getValues(objList, key) {\n  let results = [];\n  objList.forEach(function(obj) {\n    if (obj.hasOwnProperty(key)) {\n      results.push(obj[key]);\n    }\n  });\n  return results;\n}\n\nlet ages = getValues(objList, 'age');\nconsole.log(ages);\n\nOutput:\n[25, 28, 31]", "category": "Python"}, {"instruction": "Create a Python script to convert the given JSON object into an XML document.", "input": "{\n \"username\": \"John123\", \n \"age\": 23,\n \"country\": \"USA\"\n}", "output": "import xmltodict\nimport json\n\njson_object = {\n \"username\": \"John123\", \n \"age\": 23,\n \"country\": \"USA\"\n}\n\nxml_message = xmltodict.unparse(json.loads(json.dumps(json_object)), pretty=True)\n\nprint(xml_message)\n\nOutput:\n<root>\n  <username>John123</username>\n  <age>23</age>\n  <country>USA</country>\n</root>", "category": "Python"}, {"instruction": "Go through the following list of car models, and print out only the names of all-electric vehicles.", "input": "Tesla Model 3\nTesla Model X\nToyota Corolla\nKia Soul EV\nFord Fusion", "output": "cars = [\"Tesla Model 3\", \"Tesla Model X\", \"Toyota Corolla\", \"Kia Soul EV\", \"Ford Fusion\"]\n\nfor car in cars:\n    if \"EV\" in car:\n        print(car)\n\nOutput:\nTesla Model X\nKia Soul EV", "category": "Python"}, {"instruction": "Create a Python script to add a new field of \u201ccar color\u201d to the given JSON object.", "input": "{\n\"id\": \"12345\",\n\"model\": \"Honda\",\n\"year\": 2021\n}", "output": "import json\n\ndata = [\n    {\n        \"id\": \"12345\",\n        \"model\": \"Honda\",\n        \"year\": 2021\n    }\n]\n\ndata[0][\"color\"] = \"red\"\n\njson_object = json.dumps(data, indent = 4)\nprint(json_object)\n\nOutput: \n[\n    {\n        \"id\": \"12345\",\n        \"model\": \"Honda\",\n        \"year\": 2021,\n        \"color\": \"red\"\n    }\n]", "category": "Python"}, {"instruction": "How do you use the built-in function filter() in  Python?", "input": "", "output": "The filter() function in Python takes a function and an iterable as input arguments. The filter() function filters out elements from the given iterable (for example, a list) that don't satisfy the given condition determined by the function. It returns an iterator containing the filtered elements. Syntax: filter(function, iterable) Example: my_list = [1,4,5,6,7] filtered_list = filter(lambda x: x % 2 == 0, my_list) print(list(filtered_list)) Output: [4, 6]", "category": "Python"}, {"instruction": "Output the lexicographical order of a given array of strings.", "input": "words = [\"apple\", \"banana\", \"cherry\"]", "output": "apple, banana, cherry", "category": "Python"}, {"instruction": "Construct a for loop to traverse an array of integers starting from the third element and ending at the last element.", "input": "array = [1,2,3,4,5]", "output": "for i in range(2, len(array)):\n  print(array[i])", "category": "Python"}, {"instruction": "In Python, define a class for a rectangle object.", "input": "", "output": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    \n    def __str__(self):\n        return f\"This is a rectangle with width of {self.width} and height of {self.height}.\"", "category": "Python"}, {"instruction": "Design an algorithm to calculate the maximum profit for buying/selling 1 share of a company's stock.", "input": "Share Prices = [9, 11, 8, 5, 7, 10]", "output": "Let us consider buying and selling 1 share of the stock \n1. Initialize the local maximum profit = 0 and the minimum element = 9 \n2. Run a loop from i=1 to n and update the local maximum profit and the minimum element as you iterate \n3. For each iteration i, check the profit obtained by selling the share at price[i] and subtract the profit obtained by buying the share at min element \n4. If the obtained profit is more than the local maximum profit, then update the local maximum profit \n5. Return the local maximum profit", "category": "Python"}, {"instruction": "Generate a SQL query to retrieve all users", "input": "", "output": "SELECT * FROM users;", "category": "Python"}, {"instruction": "Write a gem in Ruby to display the current time", "input": "", "output": "require \"time\"\n\nmodule TimeNow\n  def self.display_time\n    puts Time.now\n  end\nend\n\nTimeNow.display_time", "category": "Python"}, {"instruction": "How can we store data persistently on the user's machine?", "input": "", "output": "Data can be stored persistently on the user's machine with various web storage APIs such as localStorage and sessionStorage. LocalStorage enables an application to store data on the user's computer with no expiration date, while sessionStorage stores information that can only be accessed while the application is open in the browser.", "category": "Python"}, {"instruction": "Construct a SQL query to find all the customers who live in California and have more than 5 reviews.", "input": "", "output": "SELECT customer.*\nFROM customer \nJOIN review ON review.customer_id = customer.id\nWHERE customer.state = 'California'\nGROUP BY review.customer_id\nHAVING COUNT(review.customer_id) > 5;", "category": "Python"}, {"instruction": "Implement a function in Swift to swap two integer variables.", "input": "Two integers a and b.", "output": "func swap(a: inout Int, b: inout Int) {\n    let temp = a\n    a = b\n    b = temp\n}", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to add an event listener to a button with the ID 'submitButton'.", "input": "", "output": "document.getElementById('submitButton').addEventListener('click', function() {\n    // code to run when button is clicked\n});", "category": "Python"}, {"instruction": "Create a for loop that prints the first five numbers of the Fibonacci sequence.", "input": "", "output": "let x = 0;\nlet y = 1;\n\nfor (let i = 0; i < 5; i++) {\n let z = x + y;\n console.log(z);\n x = y;\n y = z;\n}", "category": "Python"}, {"instruction": "Write a JavaScript program that will console log the first 10 numbers of the Fibonacci sequence.", "input": "", "output": "let x = 0;\nlet y = 1;\n\nfor (let i = 0; i < 10; i++) {\n let z = x + y;\n console.log(z);\n x = y;\n y = z;\n}", "category": "Python"}, {"instruction": "You need to add an if statement to this existing code. The if statement should check if the given number stored in the variable x is larger than 10.", "input": "int x = 5;", "output": "if (x > 10) {\n // Do something...\n}", "category": "Python"}, {"instruction": "Write a function in Ruby that takes in two strings and returns a new string that contains both strings with a space in between them.", "input": "", "output": "def combine_strings(str1, str2)\n  str1 + \" \" + str2\nend", "category": "Python"}, {"instruction": "Generate an HTML form with three fields \"username\", \"password\" and \"confirm password\".", "input": "", "output": "<form action=\"\" method=\"post\">\n  <label>Username:</label>\n  <input type=\"text\" name=\"username\">\n  <label>Password:</label>\n  <input type=\"password\" name=\"password\">\n  <label>Confirm Password:</label>\n  <input type=\"password\" name=\"confirm_password\">\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Create a C# function to edit the contents of a list.", "input": "", "output": "public void EditList(List<string> list, string oldVal, string newVal) \n{\n    for(int i = 0; i < list.Count; i++ )\n    {\n        if (list[i] == oldVal){\n            list[i] = newVal;\n        }\n    }\n}", "category": "Python"}, {"instruction": "Create a basic python object that stores the length and width of an rectangle.", "input": "", "output": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width", "category": "Python"}, {"instruction": "Modify the following MySQL query to order the results in ascending order", "input": "SELECT * FROM product;", "output": "SELECT * FROM product ORDER BY product ASC;", "category": "Python"}, {"instruction": "Write a CSS style to change the text color to red for all elements with the class \"important\".", "input": "", "output": ".important {\n    color: red;\n}", "category": "Python"}, {"instruction": "Create an HTML page with a heading, aparagraph and a button that says \"Click Here\".", "input": "", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>My Website</title>\n  </head>\n  <body>\n    <h1>Welcome to My Website</h1>\n    <p>This is the homepage of My Website.</p>\n    <button type=\"button\">Click Here</button>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Edit the following code snippet to output \"five\" instead of \"four\".", "input": "echo \"four\";", "output": "echo \"five\";", "category": "Python"}, {"instruction": "Create a PHP callback given the following parameters \"fruitname\" and \"price\".", "input": "", "output": "<?php \n\nfunction callback($fruitname, $price) {\n    echo $fruitname.' costs '.$price.' dollars';\n}\n\n?>", "category": "Python"}, {"instruction": "Create an SQL query to select the \"firstname\" and \"lastname\" of the customers with an orderid of 30.", "input": "", "output": "SELECT firstname, lastname FROM customers WHERE orderid = 30;", "category": "Python"}, {"instruction": "How can we prevent memory leaks in Java?", "input": "", "output": "Memory leaks in Java can be prevented by following certain coding practices. Firstly, it is important to ensure proper object references are maintained, so that objects are not unintentionally retained in memory for long periods of time. Secondly, it is important to be mindful of resource usage, such as closing input/output streams or releasing database connections when they are no longer required. Finally, it is important to periodically check for memory usage by using the JVM's built-in Memory Monitor and then tweaking code as necessary to ensure all unused resources are released.", "category": "Python"}, {"instruction": "Explain how proxy objects work in JavaScript.", "input": "", "output": "Proxy objects in JavaScript enable developers to intercept and customize operations performed on objects. It acts as a bridge between the concept of direct object property access and the actual implementation behind the scenes. The proxy wraps the incoming object and observes all operations performed on the object. An appropriate handler can be provided for various operations, such as getting a property value, setting a property value, or making a method call. The handler can then be used to customize the operation by providing the desired output.", "category": "Python"}, {"instruction": "Show a way to iterate through an object in JavaScript.", "input": "", "output": "The most common way to iterate through an object in JavaScript is to use a for-in loop. It will loop through the object's properties and execute the code within the loop for each property. For example: \n\nlet obj = { a: 1, b: 2, c: 3 }; \nfor (let property in obj) {\n    console.log(property + ':' obj[property]);\n}\n\n// Output: a:1, b:2, c:3", "category": "Python"}, {"instruction": "Write a JavaScript function that takes in two arrays of equal length, and returns a third array with elements from both arrays.", "input": "[1, 2, 3], [10, 20, 30]", "output": "function combine(arr1, arr2) {\n    const combinedArr = [];\n    for(let i=0; i<arr1.length; i++) {\n        combinedArr.push(arr1[i], arr2[i]);\n    }\n    return combinedArr;\n}", "category": "Python"}, {"instruction": "You need to create a dictionary that contains five elements with their associated values.", "input": "", "output": "myDictionary = {\n 'apple': 'fruit',\n 'celery': 'vegetable',\n 'sun': 'star',\n 'earth': 'planet',\n 'light': 'energy'\n}", "category": "Python"}, {"instruction": "Edit the following JavaScript code to add a new object to an array", "input": "let array = [{ id: 1, name: 'Fred'}, {id: 2, name: 'Terry'}]", "output": "let array = [{ id: 1, name: 'Fred'}, {id: 2, name: 'Terry'}, {id: 3, name: 'Marc'}]", "category": "Python"}, {"instruction": "Print the square of 5?", "input": "", "output": "The square of 5 is 25.", "category": "Python"}, {"instruction": "Create a function that takes in two integer values and prints out the larger one.", "input": "", "output": "def print_greater_value(num1, num2):\n    if num1 > num2:\n        print(num1)\n    else:\n        print(num2)", "category": "Python"}, {"instruction": "Using list comprehension, create a list which contains multiples of 5 from 0 to 50 (inclusive).", "input": "", "output": "multiples_of_5 = [x*5 for x in range(0,11)]", "category": "Python"}, {"instruction": "From the given list, create a dictionary where keys will be the elements and the values will be their corresponding indices.", "input": "elements = [\"one\", \"two\", \"three\", \"four\"]", "output": "def list_to_dict(elements):\n    return {el: i for i, el in enumerate(elements)}", "category": "Python"}, {"instruction": "Create a dictionary from a list of tuples, where the key is the first element of the tuple and the value is the second element of the tuple.", "input": "list_of_tuples = [('key1', 'val1'), ('key2', 'val2'), ('key3', 'val3')]", "output": "def list_to_dict(list_of_tuples):\n    return dict(list_of_tuples)", "category": "Python"}, {"instruction": "Generate an array containing the next n numbers in the Fibonacci sequence.", "input": "", "output": "def generate_fibonacci_sequence(n):\n    sequence = [0, 1] \n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence", "category": "Python"}, {"instruction": "Write a function to create a random sequence of 0s and 1s.", "input": "", "output": "import random\n\ndef generate_random_sequence(length):\n    sequence = []\n    for i in range(length):\n        sequence.append(random.choice([0, 1]))\n    return sequence", "category": "Python"}, {"instruction": "Write a function to transform a dataset into a matrix, where rows represent data points followed by their labels.", "input": "dataset=[(2, 3, 1), (5, 4, -1), (1, 8, 1)]", "output": "def dataset_to_matrix(dataset):\n    matrix = [[x, y, z] for x, y, z in dataset]\n    return matrix", "category": "Python"}, {"instruction": "In the following code, modify the function to take the type of an argument as an input and perform the necessary conversion before returning the result.", "input": "def get_string(input): \n    return str(input)", "output": "def get_string(input, type): \n    if type == 'int':\n        return str(int(input))\n    elif type == 'float':\n        return str(float(input))\n    elif type == 'str':\n        return str(input)", "category": "Python"}, {"instruction": "Write a CSS rule to set a blue color for all text elements.", "input": "", "output": "* {\n  color: #0000ff;\n}", "category": "Python"}, {"instruction": "Create a table in the given MySQL database with 4 columns.", "input": "Database Name: my_db\nTable Name: my_table\nFields: column_1 (string), column_2 ( integer), column_3 (string), column_4 (integer).", "output": "CREATE TABLE my_table (\n    id INT(11) AUTO_INCREMENT PRIMARY KEY,\n\tcolumn_1 VARCHAR(150) NOT NULL,\n    column_2 INT NOT NULL,\n    column_3 VARCHAR(150) NOT NULL,\n    column_4 INT NOT NULL\n);", "category": "Python"}, {"instruction": "Write a Python program to print the right angled triangle using asterisk.", "input": "", "output": "for i in range(0, 6): \n\tfor j in range(0, i + 1): \n\t\tprint(\"* \", end=\"\")\n\tprint(\"\\r\")", "category": "Python"}, {"instruction": "Convert the given hexadecimal color code to RGB format.", "input": "#F1948A", "output": "rgb(241, 148, 138)", "category": "Python"}, {"instruction": "Construct a MySQL table for an online store.", "input": "Table name: online_store \nFields: item_type (string), item_location (string), price (integer), item_name (string).", "output": "CREATE TABLE online_store (\n    id INT(11) AUTO_INCREMENT PRIMARY KEY,\n    item_type VARCHAR(150) NOT NULL,\n    item_location VARCHAR(150) NOT NULL,\n    price INT NOT NULL,\n    item_name VARCHAR(150) NOT NULL\n);", "category": "Python"}, {"instruction": "Design a HTML program to display a heading.", "input": "", "output": "<h1>This is a heading.</h1>", "category": "Python"}, {"instruction": "Design a Objective C program to find the sum of two numbers.", "input": "int x=5;\nint y=6;", "output": "int x = 5; \nint y = 6; \n\nint sum; \n\nsum = x + y; \n\nNSLog(@\"Sum of x and y is: %d\", sum);", "category": "Python"}, {"instruction": "Generate a Ruby loop to find the sum of numbers 1 to 10.", "input": "", "output": "total = 0\n(1..10).each do |num|\n total += num\nend\nputs total", "category": "Python"}, {"instruction": "Suggest an appropriate algorithm to filter out unwanted words from a given paragraph of text.", "input": "", "output": "A possible approach to filter out unwanted words from a given paragraph of text is to use a hash table or dictionary. By creating a dictionary using key-value pairs of words and their frequencies, it becomes possible to compare the words found in a given text against the words in the dictionary to determine their relevance. If a word is not found in the dictionary, it can be assumed to be an unwanted word and can thus be discarded.", "category": "Python"}, {"instruction": "Create a function to sort items in a list alphabetically in Python.", "input": "", "output": "def alphabetical_sort(lst):\n    sorted_list = sorted(lst, key=lambda x: x.lower())\n    return sorted_list", "category": "Python"}, {"instruction": "Create a SQL query to find all books in the \"fiction\" genre whose titles contain the word \"cat\".", "input": "", "output": "SELECT * \nFROM books \nWHERE genre = 'fiction' \nAND title LIKE '%cat%';", "category": "Python"}, {"instruction": "What is the minimum requirements to become an AI Engineer?", "input": "", "output": "To be an AI engineer, at a minimum, a person must have a bachelor\u2019s degree in computer science, mathematics, or a related field. It is also beneficial for a person to have an understanding of artificial intelligence and machine learning principles, and to be familiar with programming languages, such as Python and C++. In addition, a working knowledge of data structures and algorithms, and experience with debugging and software development are important. Experience and/or certification in data engineering frameworks, such as TensorFlow or PyTorch, are also recommended.", "category": "Python"}, {"instruction": "Split a string into its individual words and store it in a list.", "input": "string = \"Hello world, this is a test string.\"", "output": "def split_to_words(string):\n    \"\"\"\n    Split a string into its individual words and store it in a list.\n    \"\"\"\n    return string.split()", "category": "Python"}, {"instruction": "Print all the prime numbers in the range of 2 to n.", "input": "n = 10", "output": "def print_all_primes(n):\n    \"\"\"\n    Print all the prime numbers in the range of 2 to n.\n    \"\"\"\n    for num in range(2, n+1):\n        if all(num % i != 0 for i in range(2, num)):\n            print(num)", "category": "Python"}, {"instruction": "Using the provided input, calculate the SHA256 checksum in Python.", "input": "string = \"Hello World!\"", "output": "import hashlib\n \ndef sha256_calc(string):\n    \"\"\"\n    Calculate SHA256 checksum in Python.\n    \"\"\"\n    sha_signature = hashlib.sha256(string.encode()).hexdigest()\n    return sha_signature", "category": "Python"}, {"instruction": "Given an array of integers, write a function to check if the sum of any two of them equals the given parameter \u2018n\u2019.", "input": "array = [2, 4, 6, 8]\nn = 10", "output": "def check_sum(array, n):\n    \"\"\"\n    Given an array of integers, returns True if the sum of any two of them equals the given parameter 'n'. \n    \"\"\"\n    for i in range(len(array)):\n        for j in range(i + 1, len(array)):\n            if array[i] + array[j] == n:\n                return True\n    return False", "category": "Python"}, {"instruction": "Create a class called Cat to represent a type of pet.", "input": "", "output": "class Cat:\n    def __init__(self, name, color, age):\n        self.name = name\n        self.color = color\n        self.age = age \n    \n    def eat(self):\n        print(f\"{self.name} is eating\")\n\n    def sleep(self):\n        print(f\"{self.name} is sleeping\")\n    \n    def play(self):\n        print(f\"{self.name} is playing\")\n\n    def __repr__(self):\n        return f\"<Cat {self.name}, {self.color}, {self.age}>\"", "category": "Python"}, {"instruction": "Write a web crawler for a specific website.", "input": "", "output": "The following code can be used to create a web crawler that extracts data from a specific website:\n\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef crawler(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.content, 'html.parser')\n    return soup\n\ncrawl = crawler('https://example.com/')", "category": "Python"}, {"instruction": "Generate a regular expression to extract the domain from an email address", "input": "", "output": "([\\w.-]+)@([\\w.-]+)", "category": "Python"}, {"instruction": "Create a simple program to capitalize the first letter of every sentence", "input": "", "output": "def capitalize_sentences(text): \n   sent_list = text.split(\".\")\n   cap_sent_list = [sentence.capitalize() for sentence in sent_list]\n   output = '.'.join(cap_sent_list)\n   return output", "category": "Python"}, {"instruction": "Create a code to calculate the most frequent character in a given string", "input": "s = \"Hello world!\"", "output": "def most_frequent_char(s):\n    counts = {}\n    max_char = \"\"\n    max_count = 0\n    for c in s:\n        if c in counts:\n            counts[c] += 1\n        else:\n            counts[c] = 1\n        if counts[c] > max_count:\n            max_char = c\n            max_count = counts[c]\n    return max_char\n  \n# example\ns = \"Hello world!\"\nprint(most_frequent_char(s))", "category": "Python"}, {"instruction": "Generate a code to find the power of n to m.", "input": "n = 3, m = 7", "output": "def pow_n_m(n, m):\n    result = 1\n    for i in range(1, m+1):\n        result *= n\n    return result\n  \n# example  \nn = 3 \nm = 7\nprint(pow_n_m(n, m))", "category": "Python"}, {"instruction": "Implement selection sort to sort a list in non-decreasing order", "input": "list = [9, 5, 3, 1, 8]", "output": "def selection_sort(list): \n    for i in range(len(list)): \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n        list[i], list[min_idx] = list[min_idx], list[i]\n    return list\n  \n# example  \nlist = [9, 5, 3, 1, 8]\nprint(selection_sort(list))", "category": "Python"}, {"instruction": "Write a SQL query to find the names of the top 10earning authors.", "input": "SELECT Name\nFROM Authors\nORDER BY earnings DESC\nLIMIT 10", "output": "The top ten earning authors are: [Names]", "category": "Python"}, {"instruction": "Generate a SQL query to select all authors who have written at least 3 books.", "input": "", "output": "SELECT author \nFROM books \nWHERE id IN (SELECT author \n              FROM books \n              GROUP BY author \n              HAVING COUNT(*) >= 3);", "category": "Python"}, {"instruction": "Suggest an appropriate approach to sort an array of numbers using JavaScript.", "input": "", "output": "A popular sorting approach for an array of numbers using JavaScript is the Quicksort algorithm. This algorithm partitions an array into two smaller subarrays and then recursively applies the same partitioning process on the subarrays. The Quicksort algorithm is an efficient sorting algorithm with a time complexity of O(nlogn).", "category": "Python"}, {"instruction": "Given a text string, generate a Python code snippet to find the number of occurrences of a given word", "input": "The quick brown fox jumped over the lazy dog", "output": "def num_occurrences(text, word):\n    count = 0\n    words = text.split()\n    for w in words:\n        if w == word:\n            count += 1\n    return count", "category": "Python"}, {"instruction": "Construct a Python loop to display the elements in the following list.", "input": "my_list = [1, 2, 3, 4]", "output": "for element in my_list: \n    print(element)", "category": "Python"}, {"instruction": "You need to generate an SQL query that will return records from a table called \"users\" where the name matches the given parameter.", "input": "John", "output": "SELECT * FROM users WHERE name = \"John\";", "category": "Python"}, {"instruction": "You need to edit this given HTML code to apply a class name \"example\" to the second element.", "input": "<ul>\n <li>One</li>\n <li>Two</li>\n <li>Three</li>\n</ul>", "output": "<ul>\n <li>One</li>\n <li class=\"example\">Two</li>\n <li>Three</li>\n</ul>", "category": "Python"}, {"instruction": "Display a chart on the page to show the data.", "input": "", "output": "<div id=\"chartContainer\"></div>\n<script>\n  var chart = new CanvasJS.Chart(\"chartContainer\", {\n    //Options\n  });\n  chart.render();\n</script>", "category": "Python"}, {"instruction": "Ensure the string is formatted correctly according to JSON standard.", "input": "{\"name\": shivam\"", "output": "{\"name\": \"shivam\"}", "category": "Python"}, {"instruction": "Write a Bash script that prints out the day of the week.", "input": "", "output": "#!/bin/bash\nday=$(date +%A)\necho \"Today is $day\"", "category": "Python"}, {"instruction": "Describe the main components of a web page.", "input": "", "output": "A web page typically consists of the following components: a header, content area, sidebar, footer, and navigation menu. The header typically contains the page title and logo or navigation links. The content area displays the main information on the page. The sidebar typically contains additional links, adverts, and related content. The footer includes additional links, copyright information and other website details. The navigation menu provides links to the various sections or pages of the website.", "category": "Python"}, {"instruction": "Write a prompt message that asks the user to enter their name.", "input": "", "output": "Please enter your name:", "category": "Python"}, {"instruction": "How does the fadeIn() function work in jQuery?", "input": "", "output": "The fadeIn() function in jQuery is used to gradually increase the opacity of an element from hidden to visible, in a specified duration. The function works by adjusting the CSS property for opacity for the element, from 0 to 1, over a specified duration of time.", "category": "Python"}, {"instruction": "What data structure could you use to keep track of the list of items purchased by each customer?", "input": "", "output": "A dictionary is a suitable data structure for keeping track of the list of items purchased by each customer. The key would be the customer name and the value would be a list of items purchased by the customer.", "category": "Python"}, {"instruction": "How can you use a for loop to traverse a dictionary?", "input": "", "output": "You can use a for loop to traverse a dictionary by iterating over the dictionary's keys or key-value pairs.\n\nFor example, you can loop through all the keys of a dictionary like this:\n\ndictionary = { 'a':1, 'b':2, 'c':3 } \nfor key in dictionary: \n    print(key) \n\nOr you can loop through all the key-value pairs like this:\n\ndictionary = { 'a':1, 'b':2, 'c':3 } \nfor key, value in dictionary.items(): \n    print(key, ':', value)", "category": "Python"}, {"instruction": "Generate python code to replace each character in a string with the next character in the alphabet.", "input": "", "output": "def replace_with_next_char(string):\n    output = \"\"\n    for char in string:\n        output += chr(ord(char) + 1)\n    return output", "category": "Python"}, {"instruction": "Write a code to sum all the values of the following dictionary.", "input": "d = {'a':2, 'b':3, 'c':4}", "output": "d = {'a':2, 'b':3, 'c':4}\n\ndef dictSum(d):\n    total = 0\n    for key in d:\n        total += d[key]\n    return total\n\nif __name__ == \"__main__\":\n    print(dictSum(d))", "category": "Python"}, {"instruction": "Create a loop that takes a given number as input and outputs its prime factors.", "input": "Number: 35", "output": "n = 35\nfor i in range(2, 35):\n    while n % i == 0:\n        print(i)\n        n = n / i", "category": "Python"}, {"instruction": "Construct a code segment to find all unique characters in a given string.", "input": "String: Geeksforgeeks", "output": "def find_unique(string): \n    uniq_char = [] \n    for i in string: \n        if i not in uniq_char: \n            uniq_char.append(i) \n    return uniq_char \n\nprint(find_unique(\"Geeksforgeeks\"))", "category": "Python"}, {"instruction": "Construct a code that takes a list of words as input and changes the case of each item in the list.", "input": "[cat, dog, apple]", "output": "def toUpperCase(words):\n    upper_words=[]\n    for word in words:\n      upper_words.append(word.upper())\n    return upper_words\n\nif __name__ == \"__main__\":\n    print(toUpperCase(['cat','dog','apple']))", "category": "Python"}, {"instruction": "Create a function that takes a given sentence as input and outputs a list of all its words.", "input": "Sentence: I am learning to code", "output": "def stringsplit(sentence):\n    words=sentence.split(' ')\n    return words\n\nif __name__ == \"__main__\":\n    print(stringsplit('I am learning to code'))", "category": "Python"}, {"instruction": "Write a class that has a method to return the smallest element in a given list of integers.", "input": "[12, 24, 72, 1, 4]", "output": "class MinValue:\n    def getMin(self, numList):\n        minVal = numList[0]\n        for i in numList:\n            if i < minVal:\n                minVal = i\n        return minVal\n\nif __name__ == \"__main__\":\n    obj = MinValue()\n    numList = [12, 24, 72, 1, 4]\n    print(obj.getMin(numList))", "category": "Python"}, {"instruction": "Merge two binary trees t1 and t2 into a new binary tree.", "input": "t1 = \n\t   1\t\n    /   \\\n   4     5\n  / \\  \n 8   9\nt2 = \n\t   2\n    /   \\\n   7     8\n  /\n 9", "output": "function mergeTrees(t1, t2) {\n    // exit case, if one of the trees are null\n    if (!t1 || !t2) return t1 || t2\n\n    //Otherwise, merge the new node values from both trees\n    let t3 = new TreeNode(t1.val + t2.val);\n\n    // recursively traverse both trees to build up the result\n    t3.left = mergeTrees(t1.left, t2.left)\n    t3.right = mergeTrees(t1.right, t2.right)\n\n    return t3\n}", "category": "Python"}, {"instruction": "Generate an array of the first 10 Fibonacci numbers using any programming language.", "input": "", "output": "let fib = [0, 1];\nwhile (fib.length < 10) {\n  fib.push(fib[fib.length - 1] + fib[fib.length - 2]);\n}\nconsole.log(fib);  // [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "category": "Python"}, {"instruction": "Write a function in Python which takes the information from the following dictionary and prints out the total price of all the items in it.\n \u00a7\u00a7 1020", "input": "my_dict = {\n  'item1': {'price': 20, 'quantity': 5},\n  'item2': {'price': 10, 'quantity': 3},\n}", "output": "def get_total(my_dict):\n  total = 0\n  for item in my_dict.values():\n    total += item['price'] * item['quantity']\n  return total\n\nprint(get_total(my_dict)) // 90", "category": "Python"}, {"instruction": "Given a set of strings s, find an algorithm to determine if the set is a palindrome.", "input": "s = {\"b\", \"c\", \"a\", \"a\", \"c\", \"b\"}", "output": "def isSetPalindrome(s):\n  n = len(s)\n  for i in range(int(n/2)):\n    if s[i] != s[n - i - 1]:\n      return False\n  return True\n \u00a7\u00a7 1060\n\nprint(isSetPalindrome(s)) // True", "category": "Python"}, {"instruction": "Create a function to search a given string for the first vowel.", "input": "", "output": "def first_vowel(string): \n    index = 0\n    for char in string:\n        if char in [\"a\", \"e\", \"i\", \"o\", \"u\"]: \n            return index\n        else: \n            index+= 1 \n    return -1", "category": "Python"}, {"instruction": "Write a SQL query to print out the names of employees in the Employees table who are older than 25.", "input": "Employees table is defined as: (employee_id int, first_name varchar(255), last_name varchar(255), age int).", "output": "SELECT first_name, last_name \nFROM Employees \nWHERE age > 25;", "category": "Python"}, {"instruction": "What is the best way to store user input in JavaScript?", "input": "", "output": "The best way to store user input in JavaScript is to use the localStorage object. The localStorage object is part of the web storage API and provides a way to store data on the user's computer. The data is stored in key/value pairs and is accessible even after the browser is closed and reopened. The syntax to set the value is: \nlocalStorage.setItem(key, value); \nWhere the key is the name of the entry and the value is the data you want to store. To retrieve the value, you can use the getItem() method:\nlocalStorage.getItem(key);", "category": "Python"}, {"instruction": "Write a Java statement to declare a string variable, \u201cstr\u201d, and initialize it with a value \u201cGood morning!\u201d.", "input": "", "output": "String str = \"Good morning!\";", "category": "Python"}, {"instruction": "Create a table in PostgreSQL using the following columns: id, name, age and address.", "input": "", "output": "CREATE TABLE employees (\n id SERIAL PRIMARY KEY, \n name VARCHAR(50) not null, \n age INTEGER not null, \n address VARCHAR(50)\n);", "category": "Python"}, {"instruction": "Sort the following array of numbers in-place using the bubble sort algorithm: [5, 3, 2, 8, 1].", "input": "", "output": "for i in range(len(arr)):\n    for j in range(len(arr)-i-1): \n        if arr[j] > arr[j+1] :\n            arr[j], arr[j+1] = arr[j+1], arr[j]\n            \nResulting array = [1, 2, 3, 5, 8]", "category": "Python"}, {"instruction": "Run the following code in Python 3.", "input": "num1 = 10\nnum2 = 20", "output": "num1 = 10\nnum2 = 20\n\nresult = num1 + num2\n\nprint(result)\n\n# Output\n30", "category": "Python"}, {"instruction": "Write a MySQL query to select the 10 oldest employees from the Employees table.", "input": "Employees table is defined as: (employee_id int, first_name varchar(255), last_name varchar(255), age int).", "output": "SELECT employee_id, first_name, last_name, age \nFROM Employees \nORDER BY age DESC\nLIMIT 10;", "category": "Python"}, {"instruction": "Given a string s and an integer k, find the kth largest character of s.", "input": "s = \"hello\"\nk = 3", "output": "def kthLargestCharacter(s, k):\n  char_dict = {}\n  for c in s:\n    if c not in char_dict:\n      char_dict[c] = 1\n    else:\n      char_dict[c] += 1\n\n  char_list = sorted(char_dict.items(), key=lambda x : x[1], reverse = True)\n  \n  return char_list[k - 1][0]\n\nprint(kthLargestCharacter(s, k)) // l", "category": "Python"}, {"instruction": "Given two unsorted arrays, merge them in a sorted form without using any extra space.", "input": "nums1 = [5, 8, 2]\nnums2 = [7, 1]", "output": "def mergeArrays2(nums1, nums2):\n  i = j = 0\n  while i < len(nums1) and j < len(nums2):\n    if nums1[i] > nums2[j]:\n      nums1[i], nums2[j] = nums2[j], nums1[i]\n      j += 1\n    else:\n      i += 1\n  \n  nums1.sort()\n  nums2.sort()\n\nprint(nums1) // [1, 2, 5]\nprint(nums2) // [7, 8]", "category": "Python"}, {"instruction": "Implement selection sort algorithm to sort an array of integers in Java.", "input": "arr = [5, 8, 2, 7, 1]", "output": "public static void selectionSort(int[] arr) {\n  for (int i = 0; i < arr.length - 1; i++) { \n    int min_idx = i;\n    for (int j = i + 1; j < arr.length; j++) {\n      if (arr[j] < arr[min_idx]) min_idx = j; \n    }\n    int temp = arr[min_idx];\n    arr[min_idx] = arr[i];\n    arr[i] = temp;\n  }\n}", "category": "Python"}, {"instruction": "Create a program in C++ which takes a pair of elements as input and returns their sum.", "input": "a = 10\nb = 20", "output": "int sum(int a, int b) {\n return a + b;\n}\n\nstd::cout << sum(a, b) << std::endl; // 30", "category": "Python"}, {"instruction": "Write a function to determine if a given string is a valid English word or not.", "input": "s = \"construct\"", "output": "def isValidWord(s):\n  words = open(\"words_alpha.txt\").readlines()\n  return s in words\n\nprint(isValidWord(s)) // true", "category": "Python"}, {"instruction": "Create a function in C# which takes a string as an input and returns a boolean value indicating if the string is a palindrome or not.", "input": "s = \"racecar\"", "output": "static bool IsPalindrome(string s) {\n  int n = s.Length;\n  for (int i = 0; i < n / 2; i++) {\n    if (s[i] != s[n-i-1])\n      return false;\n  }\n  return true;\n}\n\nConsole.Write(IsPalindrome(s)); // true", "category": "Python"}, {"instruction": "Given two sorted arrays nums1 and nums2, combine their elements into a single array that is sorted.", "input": "nums1 = [1, 2, 3]\nnums2 = [2, 4, 5]", "output": "def mergeArrays(nums1, nums2):\n  result = []\n  i = j = 0\n  while i < len(nums1) and j < len(nums2):\n    if nums1[i] < nums2[j]:\n      result.append(nums1[i])\n      i += 1\n    else:\n      result.append(nums2[j])\n      j += 1\n  result += nums1[i:] + nums2[j:]\n \u00a7\u00a7 1080\n  return result\n\nprint(mergeArrays(nums1, nums2)) // [1, 2, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Generate a random phone number using random numbers in Python.", "input": "", "output": "import random\n\ndef generatePhoneNumber():\n  nums = [str(random.randint(0, 9) for _ in range(10))]\n  return '-'.join([''.join(nums[:3]), ''.join(nums[3:6]), ''.join(nums[6:])])\n\nprint(generatePhoneNumber() // \"567-444-0116\"", "category": "Python"}, {"instruction": "You need to write a regular expression that will match any string containing only the letters 'a' and 'b'.", "input": "", "output": "/^[ab]+$/", "category": "Python"}, {"instruction": "Given a binary tree, write a code to search a given value in the tree.", "input": "", "output": "def search_tree(tree, value):\n    # If the tree is empty\n    if not tree:\n        return False\n \n    if value == tree.val:\n        return True\n \n    # If the given value is less than the tree's value\n    # search left subtree\n    elif value < tree.val:\n        return search_tree(tree.left, value)\n \n    # If the given value is more than tree's value\n    # search right subtree\n    else:\n        return search_tree(tree.right, value)", "category": "Python"}, {"instruction": "Compose a query using the MongoDB query language to return the first 5 documents in a collection named 'users'.", "input": "", "output": "db.users.find().limit(5)", "category": "Python"}, {"instruction": "Develop a SQL query to select customers with a processing time greater than 5 minutes.", "input": "Input: \nCustomers Table\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 cust_id\u2502name    \u2502 status \u2502processing_time\u2502 \n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25021        \u2502 John   \u2502 active \u2502 3           \u2502 \n\u25022        \u2502 Peter  \u2502 inactive\u2502 7           \u2502 \n\u25023        \u2502 Rachel \u2502 active \u2502 2           \u2502 \n\u25024        \u2502 David  \u2502 active \u2502 10          \u2502 \n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "output": "SELECT * \nFROM Customers\nWHERE processing_time > 5;", "category": "Python"}, {"instruction": "Develop a Java program that counts the frequency of a given word in a sentence.", "input": "Input: sentence = \"I am learning to code\" , word = \"code\"", "output": "public class CountFrequency {\n   static int countFrequency(String sentence, String word) \n    {\n        int frequency = 0;\n        String[] words = sentence.split(\" \");\n        for (String w : words) \n        {\n            if (w.equals(word)) \n                frequency++; \n        }\n        return frequency;\n    }\n    public static void main(String[] args) {\n        String sentence = \"I am learning to code\";\n        String word = \"code\";\n        System.out.println(countFrequency(sentence,word));\n    }\n}", "category": "Python"}, {"instruction": "Generate a SQL query to return all customers in a table that have a `status` of `active`.", "input": "Input:\nCustomers Table\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 cust_id\u2502name    \u2502 status\u2502 \n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25021        \u2502 John   \u2502 active\u2502 \n\u25022        \u2502 Peter  \u2502 inactive\u2502 \n\u25023        \u2502 Rachel \u2502 active\u2502 \n\u25024        \u2502 David  \u2502 active\u2502 \n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "output": "SELECT *\nFROM Customers\nWHERE status = 'active';", "category": "Python"}, {"instruction": "Create a JavaScript function that validates a given number as an integer.", "input": "Input: 653", "output": "function checkInt(number){\n\tif(number % 1 === 0){\n\t\treturn true;\n\t}\n\treturn false;\n}\ncheckInt(653); // returns true", "category": "Python"}, {"instruction": "Create a SQL query that counts the total distinct `customer_name` from a table called `Orders`.", "input": "Input:\nOrders Table\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 order_id\u2502item_id \u2502 customer_name\u2502 \n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u25021        \u2502   100  \u2502 John       \u2502 \n\u25022        \u2502   200  \u2502 John       \u2502 \n\u25023        \u2502   300  \u2502 Peter      \u2502 \n\u25024        \u2502   400  \u2502 Rachel     \u2502 \n\u25025        \u2502   500  \u2502 Peter      \u2502 \n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", "output": "SELECT COUNT(DISTINCT customer_name) \nFROM Orders;", "category": "Python"}, {"instruction": "Write MATLAB code to generate a 2-D array called \"A\" and fill it with random numbers.", "input": "", "output": "A = rand(3,3);", "category": "Python"}, {"instruction": "Create a program to compare two strings and print the result.", "input": "str1 = \u201cHello\u201d, str2 = \u201cWorld\u201d", "output": "def compare_strings (str1, str2):\nif str1 == str2:\n    print (\"The strings are equal\")\nelse:\n    print (\"The strings are not equal\")", "category": "Python"}, {"instruction": "Write an HTML program to display a table with a list of names and ages of people.", "input": "names = [\"John\", \"Dylan\", \"Mary\"],  ages = [20, 15, 18]", "output": "<table>\n  <tr>\n    <th>Name</th> \n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>John</td>\n    <td>20</td>\n  </tr>\n  <tr>\n    <td>Dylan</td>\n    <td>15</td>\n  </tr>\n  <tr>\n    <td>Mary</td>\n    <td>18</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Create a CSS stylesheet to style a website with a black background and white text.", "input": "", "output": "body {\n  background-color: #000000;\n  color: #FFFFFF;\n}", "category": "Python"}, {"instruction": "Create a HTML page with two buttons, one to display \"Hello World!\" and one to display \"Goodbye World!\"", "input": "", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Two Buttons</title>\n  </head>\n  <body>\n    <button onclick=\"alert('Hello World!')\">Print Hello World</button>\n    <br />\n    <button onclick=\"alert('Goodbye World!')\">Print Goodbye World</button>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Construct a regular expression that will match only strings that contain a number.", "input": "", "output": "/\\d+/", "category": "Python"}, {"instruction": "You need to write a function that takes an array and returns the count of even elements in the array.", "input": "[1, 2, 3, 4, 5, 6]", "output": "def even_count(arr):\n count = 0\n for i in arr:\n  if i % 2 == 0:\n   count += 1\n return count", "category": "Python"}, {"instruction": "Create an SQL query that will return a table containing name and email columns from a table called \"users\" where the name begins with the given name parameter.", "input": "John", "output": "SELECT name, email FROM users WHERE name LIKE \"John%\"", "category": "Python"}, {"instruction": "This program needs an array containing the first 10 numbers of the Fibonacci sequence.", "input": "", "output": "let fibonacci = [0, 1];\nlet x = 0;\nlet y = 1;\n\nfor (let i = 1; i < 10; i++) {\n let z = x + y;\n x = y;\n y = z;\n fibonacci.push(z);\n}", "category": "Python"}, {"instruction": "You need to create a JavaScript program that will find the factorial of a given number stored in the variable x.", "input": "", "output": "let x = 5;\nlet factorial = 1;\n\nwhile (x > 0) {\n factorial *= x;\n x--;\n}\n\nconsole.log(factorial);", "category": "Python"}, {"instruction": "Create a Python class called \"Car\" which has the \"model\" and \"year\" parameters.", "input": "", "output": "class Car:\n  def __init__(self, model, year):\n    self.model = model\n    self.year = year", "category": "Python"}, {"instruction": "Write a code that prints the even numbers from 10 to 0 in descending order.", "input": "", "output": "for num in range(10,0,-1):\n    if(num % 2 == 0):\n        print(num)", "category": "Python"}, {"instruction": "Modify the following code as required to display the message \u201cHello World\u201d on the screen.", "input": "print(\"Hello\")", "output": "print(\"Hello World\")", "category": "Python"}, {"instruction": "Convert the following linear equation into a quadratic equation.", "input": "3x + 5 = 0", "output": "3x^2 + 5x + 5 = 0", "category": "Python"}, {"instruction": "Generate a random string of length 10 consisting of letters and numbers.", "input": "", "output": "import random\nimport string\n\ndef generate_random_string():\n    rand_string = ''.join(random.choices(string.ascii_lowercase +\n                                        string.digits,\n                                        k=10))\n    return rand_string\n\n# testing\nrandom_string = generate_random_string()\nprint(random_string)", "category": "Python"}, {"instruction": "Given a string and a character, write a program that counts the number of occurrences of the character in the string.", "input": "string = 'Hello World!' \ncharacter = 'l'", "output": "def count_occurrences(string, character): \n  count = 0\n  for i in range(len(string)):\n    if string[i] == character:\n      count += 1\n  return count", "category": "Python"}, {"instruction": "Create a function to generate a list of prime numbers between 2 and n.", "input": "", "output": "def prime_numbers(n):\n    prime_nums = []\n    for num in range(2, n + 1):\n        if num > 1:\n            for i in range(2, num): \n                if (num % i) == 0: \n                    break\n            else:\n                prime_nums.append(num)\n    return prime_nums", "category": "Python"}, {"instruction": "Read a given text and classify each sentence as true or false.", "input": "text = \"The sky is blue, the sea is blue. The grass is green.\"", "output": "text = \"The sky is blue, the sea is blue. The grass is green.\"\n\nsentences = text.split(\".\")\ntrue_sentences = []\nfalse_sentences = []\n\nfor sentence in sentences:\n    if sentence.endswith(\"true\"):\n        true_sentences.append(sentence)\n    else:\n        false_sentences.append(sentence)\n\nprint(\"True sentences:\")\nprint(*true_sentences, sep=\"\\n\")\n\nprint(\"False sentences:\")\nprint(*false_sentences, sep=\"\\n\")", "category": "Python"}, {"instruction": "Split a string into an array of words and return the length of the longest word.", "input": "", "output": "def longest_word(string):\n    words = string.split(\" \")\n    longest_word_length = 0\n    for word in words:\n        if len(word) > longest_word_length:\n            longest_word_length = len(word)\n    return longest_word_length", "category": "Python"}, {"instruction": "Parse a given JSON object and output the contents in a tabular format", "input": "json_object = {\n    'name': 'John',\n    'age': 20,\n    'location': 'New York'\n}", "output": "import json\n\njson_object = {\n    'name': 'John',\n    'age': 20,\n    'location': 'New York'\n}\n\ndata = json.loads(json_object)\n\nfor key, value in data.items():\n    print(key + \": \" + str(value))", "category": "Python"}, {"instruction": "What is the time complexity of linear search in an unsorted array?", "input": "", "output": "The time complexity of linear search in an unsorted array is O(n), where n is the number of elements in the array. This is because in linear search, the algorithm has to inspect each element in the array in order sequentially until it finds the desired element. As the size of the array increases, the time taken to search increases linearly.", "category": "Python"}, {"instruction": "Modify the below JavaScript code to add two items to an array.", "input": "var items = [];", "output": "var items = []; \nitems.push('Item 1');\nitems.push('Item 2');", "category": "Python"}, {"instruction": "Implement a function that prints all prime numbers up to the provided number.", "input": "", "output": "def print_prime_numbers(n):\n    # iterate through all numbers up to the provided number\n    for num in range(2, n+1):\n        is_prime = True\n        # check if a number is prime\n        for j in range(2, num):\n            if num % j == 0:\n                is_prime = False\n        # if prime print it\n        if is_prime:\n            print(num)\n\nprint_prime_numbers(20) # prints 2, 3, 5, 7, 11, 13, 17, 19", "category": "Python"}, {"instruction": "Build a React component to render a header with the text \"My Website\".", "input": "", "output": "import React from 'react';\n \nconst Header = () => (\n    <h1>My Website</h1>\n);\n\nexport default Header;", "category": "Python"}, {"instruction": "Design a database with tables and columns representing customers, orders and products.", "input": "", "output": "/* customers table */\nCREATE TABLE customers (\n    id INT PRIMARY KEY,\n    name VARCHAR(255),\n    address VARCHAR(255)\n);\n\n/* orders table */\nCREATE TABLE orders (\n    id INT PRIMARY KEY,\n    customer_id INT REFERENCES customers(id),\n    total DECIMAL\n);\n\n/* products table */\nCREATE TABLE products (\n    id INT PRIMARY KEY,\n    order_id INT REFERENCES orders(id),\n    name VARCHAR(255),\n    price DECIMAL\n);", "category": "Python"}, {"instruction": "Parse a given URL into its component parts.", "input": "url = \"https://www.example.com/articles/first-article\"", "output": "protocol = \"https\"\nhost = \"www.example.com\"\npath = \"/articles/first-article\"", "category": "Python"}, {"instruction": "Rewrite this code to make it shorter.", "input": "int x=10;\nint result=0;\nwhile(x>0){\nresult+=x;\nx--;\n}", "output": "int x = 10, result = 0;\nwhile (x > 0) result += x--;", "category": "Python"}, {"instruction": "Rewrite the following Python function to include a try/except block.", "input": "def multiply(num1, num2):\n\tresult = num1 * num2\n\treturn result", "output": "def multiply(num1, num2):\n\ttry:\n\t\tresult = num1 * num2\n\t\treturn result\n\texcept TypeError:\n\t\tprint(\"Error: Inputs must be numbers\")", "category": "Python"}, {"instruction": "Create a 3x3 rotation matrix with an angle of 45 degrees.", "input": "", "output": "[[0.7071, -0.7071, 0.0],\n [0.7071, 0.7071, 0.0],\n [0.0, 0.0, 1.0]]", "category": "Python"}, {"instruction": "Add a 3x3 identity matrix to the following matrix.", "input": "[[1, 2, -3] \n [0, 1, 3] \n [-2, 0, 4]]", "output": "[[4, 2, -3], \n [0, 4, 3], \n [-2, 0, 7]]", "category": "Python"}, {"instruction": "Debug the following program and make it function correctly", "input": "def count_words(text):\n    words = text.split()\n    count = 0\n    for word in words:\n        count += 1\n    return count\n\nstring = \"Hello world\"\n\nprint(count_words(string))", "output": "def count_words(text):\n    words = text.split()\n    count = 0\n    for word in words:\n        count += 1\n    return count\n\nstring = \"Hello world\"\n\n# we need to add a check for empty string\nif string != '':\n    print(count_words(string))\nelse:\n    print(0)", "category": "Python"}, {"instruction": "Create an algorithm to find the second minimum element from a given array of 7 elements.", "input": "[87, 34, 56, 12, 21, 45, 67]", "output": "1. Set a variable, secondMinimum, to the first element of the array.\n2. Iterate through the array. \n3. For every element check if it is smaller than secondMinimum, but bigger than the smallest element in the array. \n4. If it is, set secondMinimum to that element. \n5. When the iteration is finished, return secondMinimum.", "category": "Python"}, {"instruction": "Write a SQL query to select users whose age is greater than or equal to 20 from the user_data table.", "input": "", "output": "SELECT * FROM user_data WHERE age >= 20;", "category": "Python"}, {"instruction": "Generate a web page containing an HTML table containing the numbers from 1 to 10.", "input": "", "output": "<html>\n  <head>\n    <title>Number Table</title>\n  </head>\n  <body>\n    <table>\n        <tr>\n            <th>Number</th>\n        </tr>\n        {% for number in range(1, 11) %}\n            <tr>\n                <td>{{number}}</td>\n            </tr>\n        {% endfor %}\n    </table>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Construct a code that takes in an object and checks whether each property includes a certain value", "input": "my_dict = {\n    'name': 'John',\n    'age': 23,\n    'pet_name': 'Maggy'\n}\nvalue = 'John'", "output": "def check_value(obj, value):\n    for key, val in obj.items():\n        if val == value:\n            return True\n    return False", "category": "Python"}, {"instruction": "Using list comprehension, create a new list that contains values less than 5", "input": "my_list = [7, 2, 5, 8, 4, 9, 6]", "output": "new_list = [x for x in my_list if x < 5]", "category": "Python"}, {"instruction": "Construct a loop that checks whether each item in a list is greater than 10", "input": "my_list = [5, 11, 8, 15]", "output": "for x in my_list:\n    if x > 10:\n        print(\"{0} is greater than 10\".format(x))", "category": "Python"}, {"instruction": "Make a code that takes two arguments and returns a sum of the two", "input": "", "output": "def add_two_nums(a, b):\n    return a + b", "category": "Python"}, {"instruction": "Write a function which prints out odd numbers from a given list", "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "output": "def print_odd_num(my_list):\n    for num in my_list:\n        if num % 2 != 0:\n            print(num)", "category": "Python"}, {"instruction": "Construct a while loop that continuously adds all elements of a list until reaching a certain number", "input": "list=[1, 2, 3, 4, 5] \nsum_num=10", "output": "sum_temp = 0\ni = 0\nwhile sum_temp < sum_num:\n    sum_temp += list[i]\n    i += 1", "category": "Python"}, {"instruction": "Design a class named \"Rectangle\" that prints out the length, width, area and perimeter of a given rectangle.", "input": "", "output": "\"\"\"\nDesign a class named 'Rectangle' that prints out the length, width, area and perimeter of a given rectangle\n\"\"\"\n\nclass Rectangle:\n    def __init__(self, l, w):\n        self.length = l\n        self.width = w\n        \n    def area(self):\n        return self.length * self.width\n    \n    def perimeter(self):\n        return 2 * (self.length + self.width)\n    \n    def __str__(self):\n        return 'Rectangle with length {0} and width {1}'.format(self.length, self.width)", "category": "Python"}, {"instruction": "Using SQL, write a query to identify the student ID and the name of the student who scored the highest marks in a given subject.", "input": "", "output": "SELECT students.id AS student_id, students.name AS student_name \nFROM students\nINNER JOIN marks\nON students.id = marks.student_id\nWHERE marks.subject = \u2018Subject1\u2019\nORDER BY marks.mark DESC\nLIMIT 1;", "category": "Python"}, {"instruction": "Build a REST API with Node.js which provides the current temperature and humidity data of a given location.", "input": "", "output": "const express = require('express');\nconst app = express();\nconst http = require(\"http\");\n \napp.get(\"/api/weather/:location\", (req, res, next) => {\n  let location = req.params.location;\n  http.get(`http://api.weatherstack.com/current?access_key=YOUR_API_KEY&query=${location}`, (response) => {\n    let data = '';\n    response.on('data', (chunk) => {  \n      data += chunk;\n    });\n    response.on('end', () => {\n      data = JSON.parse(data);\n      let temperature = data[\"current\"][\"temperature\"];\n      let humidity = data[\"current\"][\"humidity\"];\n      let response_data = {\n        temperature: temperature,\n        humidity: humidity\n      }\n      res.json(response_data);\n    });\n  });\n});", "category": "Python"}, {"instruction": "Given two arrays of integers, write a Python function which is able to identify common elements.", "input": "arr1 = [1,2,3,4,5]\narr2 = [3,4,5,6,7]", "output": "def common_elements(arr1, arr2):\n  return [x for x in arr1 if x in arr2]", "category": "Python"}, {"instruction": "Create a function to update the existing item of a dictionary with a new value.", "input": "mydict = {\n  \"name\": \"John\",\n  \"age\": 25\n}", "output": "function updateDict(d, key, value) { \n  d[key] = value; \n  return d;\n}", "category": "Python"}, {"instruction": "Using Java, write a method that takes an array of integers and replaces all the negative numbers with 0.", "input": "int[] arr = {2, 3, -4, 5, 7, -8};", "output": "public static int[] replaceNegs(int[] arr) {\n  for (int i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) arr[i] = 0;\n  }\n  return arr;\n}", "category": "Python"}, {"instruction": "Given a text string, write a function in Python to identify all the words that have more than 3 characters.", "input": "text = \"Python is an easy to learn language\"", "output": "def longer_words(text):\n words = text.split()\n longer = [word for word in words if len(word) > 3]\n return longer", "category": "Python"}, {"instruction": "Create a Java method that takes two integer arguments and returns their multiplication.", "input": "", "output": "public static int multiply(int a, int b) {\n return a * b;\n}", "category": "Python"}, {"instruction": "Write a Python function that prints the square of a given number.", "input": "", "output": "def square(num):\n  return num ** 2", "category": "Python"}, {"instruction": "Edit the code to construct a bubble sort algorithm.", "input": "arr = [5, 2, 1, 7, 8]", "output": "def bubble_sort(arr):\n    n = len(arr)\n\n    # Traverse through all array elements\n    for i in range(n):\n        # Last i elements are already in place\n        for j in range(0, n-i-1):\n            # traverse the array from 0 to n-i-1\n            # Swap if the element found is greater\n            # than the next element\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]", "category": "Python"}, {"instruction": "Create a loop which prints out characters from a given input", "input": "a = 'Hello World!'", "output": "for char in a:\n    print(char, end=\"\")", "category": "Python"}, {"instruction": "Design a function which can check if a given year is a leap year", "input": "", "output": "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Create a program to find the maximum and minimum from a given list", "input": "my_list = [5, 7, 6, 3]", "output": "def max_min(my_list):\n    max_val = my_list[0]\n    min_val = my_list[0]\n\n    for val in my_list:\n        if val > max_val:\n            max_val = val\n        \n        if val < min_val:\n            min_val = val\n    \n    return (max_val, min_val)", "category": "Python"}, {"instruction": "Using string functions, capitalize each word in the given sentence.", "input": "sentence = \"python is a programming language\"", "output": "sentence = \"python is a programming language\"\n\n# split the sentence into individual words\nwords = sentence.split(\" \")\n\n# capitalize each word in the sentence\ncapitalized_words = [word.capitalize() for word in words]\n\n# join the words back together\ncapitalized_sentence = \" \".join(capitalized_words)\n\nprint(capitalized_sentence) # prints \"Python Is A Programming Language\"", "category": "Python"}, {"instruction": "Given the JSON data below, find the count of each type of fruit.", "input": "{\n    \"fruits\": [\n        { \"type\": \"apple\", \"count\": 10 },\n        { \"type\": \"orange\", \"count\": 5 },\n        { \"type\": \"banana\", \"count\": 15 }\n    ]\n}", "output": "import json\n\ndata = \"\"\"\n{\n    \"fruits\": [\n        { \"type\": \"apple\", \"count\": 10 },\n        { \"type\": \"orange\", \"count\": 5 },\n        { \"type\": \"banana\", \"count\": 15 }\n    ]\n}\n\"\"\"\n\ndata = json.loads(data)\n\n# Get the count for each type of fruit\napple_count = 0\norange_count = 0\nbanana_count = 0\nfor fruit in data['fruits']:\n    if fruit['type'] == 'apple':\n        apple_count = fruit['count']\n    elif fruit['type'] == 'orange':\n        orange_count = fruit['count']\n    elif fruit['type'] == 'banana':\n        banana_count = fruit['count']\n\nprint(\"Apple count = %d\" % apple_count)\nprint(\"Orange count = %d\" % orange_count)\nprint(\"Banana count = %d\" % banana_count)", "category": "Python"}, {"instruction": "Calculate the maximum and minimum values in the column \"seats\".", "input": "job  | seats\n-----+--------\nA    | 3\nB    | 12\nC    | 2", "output": "min_seats = 2\nmax_seats = 12", "category": "Python"}, {"instruction": "Add a new column to a Pandas DataFrame called \"age_group\" that contains categorical values \"young\",\"adult\",\"elderly\".", "input": "name\tage\nJohn\t25\nMark\t45\nIsabelle\t75", "output": "import pandas as pd\n\n# Read in the data\ndf = pd.DataFrame({'name': ['John', 'Mark', 'Isabelle'], \n                   'age': [25, 45, 75]})\n\n# Add a new column \"age_group\"\ndef categorize_age(age):\n    if age < 18:\n        return \"young\"\n    elif 18 <= age < 65:\n        return \"adult\"\n    else:\n        return \"elderly\"\n\ndf['age_group'] = df['age'].apply(categorize_age)", "category": "Python"}, {"instruction": "Construct a SQL query to find the list of customers with the highest total of sales.", "input": "", "output": "SELECT customer.name, SUM(sales.amount) AS total_sales\nFROM customer\nINNER JOIN sales ON customer.ID = sales.customer_id\nGROUP BY customer.name\nORDER BY total_sales DESC;", "category": "Python"}, {"instruction": "Design a CSS style sheet to format a web page.", "input": "", "output": "body {\n background-color: #FFFFFF;\n font-family: Arial, sans-serif;\n font-size: 14px;\n margin: 0px;\n padding: 0px;\n}\n\nh1{ \n font-size: 1.5em;\n font-weight: bold;\n}\n\np { \n line-height: 25px;\n margin: 15px 0px;\n}", "category": "Python"}, {"instruction": "Construct a HTML page that takes a user input and display the response.", "input": "", "output": "<html>\n <body>\n  <form action=\"\" method=\"POST\">\n   Enter your name: <input type=\"text\" name=\"name\"><br>\n   <input type=\"submit\" value=\"Submit\">\n  </form>\n  <?php\n   if (isset($_POST['name'])) {\n    echo \"Hello, \" . $_POST['name'];\n   }\n  ?>\n </body>\n</html>", "category": "Python"}, {"instruction": "Create an HTML webpage that displays a table.", "input": "", "output": "<html>\n  <head>\n    <title>Table Example</title>\n  </head>\n  <body>\n    <table>\n      <tr>\n        <th>Column 1</th>\n        <th>Column 2</th>\n        <th>Column 3</th>\n      </tr>\n      <tr>\n        <td>Row 1, Column 1</td>\n        <td>Row 1, Column 2</td>\n        <td>Row 1, Column 3</td>\n      </tr>\n      <tr>\n        <td>Row 2, Column 1</td>\n        <td>Row 2, Column 2</td>\n        <td>Row 2, Column 3</td>\n      </tr>\n     </table>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Develop a PHP web application for a movie theater booking system.", "input": "", "output": "<?php\n// Function to collect user input and query the database \nfunction bookSeats(){ \n  // Database connection and query \n  $db_connection = new mysqli(\"localhost\", \"user\", \"password\", \"database\"); \n  $query = \"SELECT * FROM movie_theater WHERE no_of_seats > 0 ORDER BY name ASC\"; \n  $result = $db_connection->query($query); \n\n  // Submit button handler \n  if (isset($_POST['submit'])) { \n    $movie = $_POST['movie']; \n    $no_of_seats = $_POST['seats']; \n\n    // If selected movie theater has available seats, book the seats \n    if ($result->num_rows > 0) { \n      while ($row = $result->fetch_assoc()) { \n        if ($row['name'] == $movie && $row['no_of_seats'] >= $no_of_seats) { \n          $row['no_of_seats'] -= $no_of_seats; \n          // Update the seats availability \n          $update_query = \"UPDATE movie_theater SET no_of_seats = '\" . $row['no_of_seats'] . \"' WHERE name = '\" . $movie . \"'\"; \n          $db_connection->query($update_query); \n        }\n      } \n    }\n  }\n}", "category": "Python"}, {"instruction": "Construct a function that converts a given temperature from Celsius to Fahrenheit.", "input": "Celsius Temperature: 37.5", "output": "def ctof(celsius): \n  fahrenheit = (celsius * 9/5) + 32\n  return fahrenheit \n\nctof(37.5) // returns 99.5", "category": "Python"}, {"instruction": "Create an HTML page that contains an input field and a submit button; when the button is clicked, it should print the input text in the HTML page.", "input": "", "output": "<html>\n    <head>\n        <script>\n            function printInput() {\n                let input = document.getElementById(\"input\").value;\n                document.getElementById(\"result\").innerHTML = input;\n            }\n        </script>\n    </head>\n    <body>\n        <input type=\"text\" id=\"input\" />\n        <button type=\"submit\" onclick=\"printInput()\">submit</button>\n        <div id=\"result\"></div>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Create an XML element to store the customer information, such as name and address.", "input": "", "output": "<customer>\n    <name>John Doe</name>\n    <address>123 Main Street, Anytown, USA 10101</address>\n</customer>", "category": "Python"}, {"instruction": "Create an HTML page that renders two checkboxes and a button using JavaScript.", "input": "", "output": "<html>\n    <head>\n        <script>\n            function renderCheckboxes() {\n                var checkboxes = document.createElement(\"input\");\n                checkboxes.type = \"checkbox\";\n                checkboxes.name = \"checkbox\";\n                checkboxes.value = \"1\";\n           \n                document.body.appendChild(checkboxes);\n                var checkboxes2 = document.createElement(\"input\");\n                checkboxes2.type = \"checkbox\";\n                checkboxes2.name = \"checkbox2\";\n                checkboxes2.value = \"2\";\n               \n                document.body.appendChild(checkboxes2);\n                var btn = document.createElement(\"BUTTON\");\n                btn.innerHTML = \"Submit\";\n                document.body.appendChild(btn);\n            }\n       </script>\n   </head>\n   <body onLoad=\"renderCheckboxes()\">\n   </body>\n</html>", "category": "Python"}, {"instruction": "Create a SQL query to get the names of all the customers who have purchased a product from a specific category.", "input": "", "output": "SELECT c.name \nFROM customers c \nJOIN orders o ON c.customer_id = o.customer_id \nJOIN order_items oi ON o.order_id = oi.order_id \nJOIN products p ON p.product_id = oi.product_id \nWHERE p.category = 'category_name';", "category": "Python"}, {"instruction": "Write a recursive method to calculate the Fibonacci number of a given index", "input": "", "output": "def fibonacci(n): \n  # base case \n  if n <= 1: \n    return n \n  # recursive case \n  else:\n    return(fibonacci(n-1) + fibonacci(n-2))", "category": "Python"}, {"instruction": "Construct a class which instantiates objects with a given name and age", "input": "", "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age", "category": "Python"}, {"instruction": "Analyze the given sentence and label each word according to its part of speech.", "input": "Sentence: She was embarrassed to open the door.", "output": "Pronoun: She \nVerb: was \nAdjective: embarrassed \nVerb: to open \nDeterminer: the \nNoun: door", "category": "Python"}, {"instruction": "Generate a list containing the squares of the first ten odd numbers.", "input": "", "output": "# Generate a list containing the squares of the first ten odd numbers\nlist_of_squares = [x**2 for x in range(1, 21, 2)]\n\nprint(list_of_squares) # prints [1, 9, 25, 49, 81, 121, 169, 225, 289, 361]", "category": "Python"}, {"instruction": "Write an Android app to display a list of items from a local database.", "input": "", "output": "public class MainActivity extends AppCompatActivity {\n\n    RecyclerView listView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // Instantiate the database\n        AppDatabase db = AppDatabase.getInstance(this);\n\n        // Instantiate the RecyclerView\n        listView = findViewById(R.id.listView);\n\n        // Get the list of items from the database\n        List<Item> items = db.itemDao().getAll();\n\n        // Set the LayoutManager\n        listView.setLayoutManager(new LinearLayoutManager(this));\n\n        // Set the adapter for the RecyclerView\n        listView.setAdapter(new ItemAdapter(items));\n    }\n}", "category": "Python"}, {"instruction": "How would you reverse this array?", "input": "[3, 4, 7, 9, 10]", "output": "[10, 9, 7, 4, 3]", "category": "Python"}, {"instruction": "Create a new table in an existing SQL database.", "input": "The database called \"airports\" has the following table structure:\n\nAirport (aid, name, city, state, country, longitude, latitude)", "output": "CREATE TABLE Airport (\naid INT, \nname VARCHAR(100), \ncity VARCHAR(100), \nstate VARCHAR(100), \ncountry VARCHAR(100), \nlongitude DECIMAL(18,14), \nlatitude DECIMAL(18,14),\nPRIMARY KEY(aid) \n);", "category": "Python"}, {"instruction": "Construct a code to get the last index of a given substring in a string.", "input": "\"hi hi hello\", \"hi\"", "output": "def lastIndexOf(st, substr): \n    if substr in st: \n        start = -1 \n        while True: \n            pos = st.find(substr, start + 1) \n            if pos == -1: \n                break \n            start = pos \n            \n        return start \n    else: \n        return -1 \n    \nprint(lastIndexOf(\"hi hi hello\", \"hi\")) \n\n# output \n3", "category": "Python"}, {"instruction": "Create a SQL statement to select all rows of the \"students\" table with a GPA higher than 3.0.", "input": "", "output": "SELECT * FROM students WHERE GPA > 3.0;", "category": "Python"}, {"instruction": "Create a filter to remove all integers from an array of mixed data types.", "input": "[\"Hello\", 3, 5.4, \"World\", 6]", "output": "def removeInts(arr): \n    return [x for x in arr if type(x) is not int] \n\nprint(removeInts([\"Hello\", 3, 5.4, \"World\", 6])) \n\n# output\n['Hello', 5.4, 'World']", "category": "Python"}, {"instruction": "Answer what is the longest palindrome in a given string.", "input": "\"Run, spot, run. He ran up red hills\"", "output": "def longestPalindrome(st): \n    palindromes = []\n    for i in range(len(st)): \n        for j in range(i, len(st)): \n            curr = st[i:j+1] \n            rev = curr[::-1] \n            if (curr == rev): \n                palindromes.append(curr) \n    res = max(palindromes, key = len) \n        \n    return res\n\nprint(longestPalindrome(\"Run, spot, run. He ran up red hills\")) \n\n# output\nrun", "category": "Python"}, {"instruction": "Construct a SQL statement updates the \"products\" table and sets the value of the \"price\" column to 10.", "input": "", "output": "UPDATE products SET price = 10;", "category": "Python"}, {"instruction": "Create a regex expression that matches all valid IP addresses.", "input": "", "output": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$", "category": "Python"}, {"instruction": "Write a function in Java to delete duplicate elements.", "input": "", "output": "public static List<Integer> removeDuplicates(int[] arr) {\n    List<Integer> uniqueList = new ArrayList<>();\n    for (int i : arr) {\n        if (!uniqueList.contains(i)) {\n            uniqueList.add(i);\n        }\n    }\n    return uniqueList;\n}", "category": "Python"}, {"instruction": "Develop an algorithm for reversing a string without using any reverse string methods.", "input": "Hello World", "output": "def reverseString(str):\n    reversed_str = \"\"\n    for i in range(len(str)-1, -1, -1):\n        reversed_str += str[i]\n    return reversed_str\n\nprint(reverseString(\"Hello World\"))", "category": "Python"}, {"instruction": "Find the maximum value of an array without using any built-in functions", "input": "[7, 9, -2, 15, 3]", "output": "def find_max(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n\narr = [7, 9, -2, 15, 3]\nprint(find_max(arr))", "category": "Python"}, {"instruction": "Create a function in JavaScript to get the value of a key from a JSON object.", "input": "", "output": "function getValue(obj, key) {\n  return obj[key];\n}", "category": "Python"}, {"instruction": "Create a hashtable in Python of size 8 and insert five elements.", "input": "", "output": "class HashTable:\n    def __init__(self, size):\n        self.size = size\n        self.table = [None] * size\n\n    def insert(self, key, value):\n        hash_value = hash(key)\n        index = hash_value%self.size\n        if self.table[index] == None:\n            self.table[index] = [key, value]\n        else:\n            self.table[index].append([key,value])\n\n    # Other methods go here\n\n# Create a hashtable\nht = HashTable(8)\n\n# Insert elements\nht.insert('apple', 5)\nht.insert('banana', 8)\nht.insert('strawberry', 11)\nht.insert('kiwi', 2)\nht.insert('mango', 6)", "category": "Python"}, {"instruction": "Write a code snippet to produce an XML result for a given input data structure.", "input": "key1: value1, key2: { key2.1: value2.1, key2.2: value2.2 }", "output": "import xml.etree.ElementTree as ET\n\ndef xml_builder(data):\n    root = ET.Element('root')\n    for key, value in data.items():\n        child = ET.SubElement(root, key)\n        if type(value) is dict:\n            for k, v in value.items():\n                sub_child = ET.SubElement(child, k)\n                sub_child.text = str(v)\n        else:\n            child.text = str(value)\n    return ET.tostring(root, encoding='utf8').decode('utf8')\n\ndata = {\"key1\": \"value1\", \"key2\": {\"key2.1\": \"value2.1\", \"key2.2\": \"value2.2\"}}\nprint(xml_builder(data))", "category": "Python"}, {"instruction": "Find the median of the given array [3,7,2,1,9].", "input": "", "output": "def find_median(arr):\n    arr.sort()\n    if len(arr) % 2 == 0: \n        median = (arr[(len(arr)//2)-1] + arr[len(arr)//2])/2 \n    else: \n        median = arr[len(arr)//2] \n    return median\n\nmedian = find_median([3,7,2,1,9])\nprint(median) # Prints 3.5", "category": "Python"}, {"instruction": "FreeCodeCamp is a great platform for coding practice. Give an example of a basic algorithm you can practice on FreeCodeCamp.", "input": "", "output": "A basic algorithm you can practice on FreeCodeCamp is Bubble Sort. Bubble Sort is an algorithm that sorts an array of elements by repeatedly swapping matched pairs of elements if they appear in the wrong order. It continues until no further swaps are needed, at which point the array is considered sorted.", "category": "Python"}, {"instruction": "Convert this floating-point number to an 8-bit binary number.", "input": "123.46875", "output": "123.46875 in 8-bit binary is 1111011.01110000", "category": "Python"}, {"instruction": "Create a new array using the given array and a given number.", "input": "The given array is [2, 3, 4] and the given number is 5.", "output": "The new array is [2, 3, 4, 5].", "category": "Python"}, {"instruction": "Create a loop in Python with the given requirements.", "input": "Print out the numbers from 1 to 10, inclusive", "output": "for x in range(1, 11):\n  print(x)", "category": "Python"}, {"instruction": "Write a Java program that prints a rating out of 10 based on user input.", "input": "Input value: 7", "output": "public class Rating {\n public static void main (String[] args) {\n  int inputValue = 7;\n  int rating = 0;\n\n  if (inputValue >= 8) {\n   rating = 10;\n  } else if (inputValue >= 5) {\n   rating = 7;\n  } else {\n   rating = 4;\n  }\n\n  System.out.println(\"Rating: \" + rating);\n }\n}", "category": "Python"}, {"instruction": "What are the different types of HTML5 Semantic Elements?", "input": "", "output": "The different types of HTML5 Semantic Elements are: \n- article, aside, details,figcaption, figure, footer, header, main, nav, section, summary.", "category": "Python"}, {"instruction": "How to identify an email address from a given string using Regular Expressions?", "input": "", "output": "import re\n\nstring = \"My Email address is example@gmail.com\"\n\nexpression = r'[\\w\\.-]+@[\\w\\.-]+'\n\naddress = re.findall(expression, string)\n\nprint(\"Email address is: \", address)", "category": "Python"}, {"instruction": "Create a Java program to output the Fibonacci series upto the given number.", "input": "Number: 10", "output": "public class Fibonacci {\n    public static void main(String[] args) {\n        int num = 10;\n        int first = 0; \n        int second = 1;\n        \n        System.out.println(\"Fibonacci Series of \" + num + \" numbers:\");\n        for (int i = 0; i < num; i++) {\n            System.out.print(first + \" \");\n            int sum = first + second;\n            first = second;\n            second = sum;\n        }\n    }\n}", "category": "Python"}, {"instruction": "How to get the current date and time in a JavaScript program?", "input": "", "output": "let date = new Date();\nlet current_datetime = date.getDate() + \"/\"\n                    + (date.getMonth()+1)  + \"/\" \n                    + date.getFullYear() + \" @ \"  \n                    + date.getHours() + \":\"  \n                    + date.getMinutes() + \":\" \n                    + date.getSeconds();", "category": "Python"}, {"instruction": "Write a code to delete all records in an MS Access table.", "input": "", "output": "DELETE FROM tableName;", "category": "Python"}, {"instruction": "Code a React component that renders a button with a given text.", "input": "Text of the button: Submit", "output": "import React from 'react';\nimport { Button } from 'react-native';\n\nconst SubmitButton = ({ text }) => {\n return (\n  <Button\n   title={text}\n  />\n );\n}\nexport default SubmitButton;", "category": "Python"}, {"instruction": "Write a JavaScript function that accepts a string argument and returns its capitalized value.", "input": "", "output": "function capitalize(str) {\n return str.charAt(0).toUpperCase() + str.slice(1);\n}", "category": "Python"}, {"instruction": "Write a CSS code to create a heading with red color font.", "input": "", "output": "h1 {\n  font-size: 14px; \n  color: red; \n}", "category": "Python"}, {"instruction": "Generate multiple Fibonacci numbers in Python.", "input": "", "output": "def Fibonacci(n): \n  a = 0\n  b = 1\n  if n < 0:\n    print(\"Incorrect input\") \n  elif n == 0:\n    return a\n  elif n == 1:\n    return b\n  else:\n    for i in range(2,n):\n      c = a + b\n      a = b\n      b = c\n  return b\n\nfor i in range(10):\n  print(Fibonacci(i))", "category": "Python"}, {"instruction": "Describe the concept of machine learning in your own words.", "input": "", "output": "Machine learning is a field of Artificial Intelligence that focuses on developing algorithms for computers to learn from data and to make predictions about their environment. It can involve supervised and unsupervised learning techniques, such as classification and clustering, to analyze data and make predictions. Machine learning algorithms are also used to detect patterns and make decisions, enabling computers to automate tasks and learn from experience.", "category": "Python"}, {"instruction": "Write a C++ program for finding the maximum value in a BST.", "input": "", "output": "Node* findMax(Node* root) \n{ \n    if (root == NULL) \n        return root; \n  \n    Node* curr = root; \n    while (curr->right != NULL) \n        curr = curr->right; \n  \n    return curr; \n}", "category": "Python"}, {"instruction": "Create a linux shell script for restarting network interfaces.", "input": "", "output": "#!/bin/bash\n\n# Restart network interfaces\nsudo ifconfig wlan0 down\nsudo ifconfig wlan0 up\nsudo ifconfig eth0 down\nsudo ifconfig eth0 up", "category": "Python"}, {"instruction": "For the given matrix, calculate the determinant.", "input": "1 2 3\n4 5 6\n7 8 9", "output": "0", "category": "Python"}, {"instruction": "Write a function in JavaScript that takes two strings as arguments and checks if the characters in the first string form a subsequence of the characters in the second string.", "input": "", "output": "function isSubsequence(str1, str2) {\n  let i = 0;\n  let j = 0;\n  while (i < str1.length && j < str2.length) {\n    if (str2[j] === str1[i]) {\n      i++;\n    }\n    j++;\n  }\n  return i === str1.length;\n}", "category": "Python"}, {"instruction": "Explain the use of the Huffman encoding algorithm.", "input": "", "output": "Huffman encoding is an algorithm used for lossless data compression. It works by taking a string of data, analysing it and creating a shorter bit string that represents the same data. The data is compressed by assigning shorter codes to commonly occurring characters. This process reduces the amount of bits needed to represent the data, which leads to overall data compression.", "category": "Python"}, {"instruction": "Create an SQL query to print the names of employees who are earning more than $50,000/year.", "input": "", "output": "SELECT Name \nFROM Employees \nWHERE Salary > 50000;", "category": "Python"}, {"instruction": "Convert the following SPARQL query to a SQL query.", "input": "SELECT ?person ?age\nWHERE {\n    ?person rdf:type ex:Person .\n    ?person ex:age ?age\n}", "output": "SELECT person, age\nFROM rdf\nWHERE type = 'ex:Person' \nAND predicate = 'ex:age';", "category": "Python"}, {"instruction": "Create a function that takes two arguments, \"start\" and \"end\", and returns a list of all the prime numbers between the two.", "input": "", "output": "def get_prime_numbers(start, end):\n    \"\"\"\n    Function to return a list of all the prime numbers between start and end\n    \"\"\"\n    prime_numbers = []\n    for num in range(start, end + 1):\n        if num > 1:\n            is_prime = True\n            for j in range(2, int(num/2) + 1):\n                if num % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                prime_numbers.append(num)\n    return prime_numbers\n    \nprint(get_prime_numbers(2, 10)) # prints [2, 3, 5, 7]", "category": "Python"}, {"instruction": "Sort the following list using a bubble sort algorithm.", "input": "[36, 71, 16, 21, 73]", "output": "# Bubble sort function\ndef bubble_sort(my_list):\n    # Do n times\n    for i in range(0, len(my_list) - 1):\n        # Do n - i - 1 times\n        for j in range(0, len(my_list) - 1 - i):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n    return my_list\n\n# Test data\nmy_list = [36, 71, 16, 21, 73]\n\n# Call the function\nsorted_list = bubble_sort(my_list)\n\nprint(sorted_list) # prints [16, 21, 36, 71, 73]", "category": "Python"}, {"instruction": "Write a code for creating a Fibonacci sequence", "input": "n = 10", "output": "def fibonacci_seq(n):\n    seq = [0, 1]\n    for i in range(2, n):\n        seq.append(seq[i-1] + seq[i-2])\n    return seq\n\nif __name__ == '__main__':\n    n = 10\n    result = fibonacci_seq(n)\n    print(result)  # prints [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "category": "Python"}, {"instruction": "Create a program to find the maximum length common subsequence of two given strings.", "input": "String1: \"abcdgf\" \nString2: \"abcdhfe\"", "output": "def find_max_subseq(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    dp = [[0 for _ in range(n2 + 1)] for _ in range(n1 + 1)]\n\n    for i in range(1, n1 + 1):\n        for j in range(1, n2 + 1):\n            if(str1[i - 1] == str2[j - 1]):\n                dp[i][j] = dp[i - 1][j - 1] + 1 \n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n1][n2]\n\nif __name__ == '__main__':\n    str1 = \"abcdgf\"\n    str2 = \"abcdhfe\"\n    result = find_max_subseq(str1, str2)\n    print(result)  # prints 5", "category": "Python"}, {"instruction": "Write code for a substring search", "input": "String: \"Hello World\"\nSubstring: \"llo\"", "output": "def search_substring(string, substr):\n    if substr in string:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    string = \"Hello World\"\n    substr = \"llo\"\n    result = search_substring(string, substr)\n    print(result)  # prints True", "category": "Python"}, {"instruction": "Convert a given number from degrees to radians.", "input": "90", "output": "def deg_to_rad(deg):\n    return (deg * 3.14)/180\n    \nif __name__ == '__main__':\n    deg = 90\n    rad = deg_to_rad(deg)\n    print(rad)  # prints 1.571", "category": "Python"}, {"instruction": "Write a code to split a list of numbers into two sets with equal sum", "input": "[1, 2, 3, 4, 5, 6, 7]", "output": "def split_list(list):\n    start = 0\n    end = len(list) - 1\n\n    left_sum = 0\n    right_sum = sum(list[start:end+1])\n\n    while start < end:\n        right_sum -= list[end]\n        if left_sum == right_sum:\n            break\n        left_sum += list[start]\n        start += 1\n\n    if left_sum == right_sum:\n        return list[:start], list[start:]\n    else:\n        return None\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    left, right = split_list(arr)\n    print(\"left set:\", left)  # prints [1, 2, 3, 4]\n    print(\"right set:\", right)  # prints [5, 6, 7]", "category": "Python"}, {"instruction": "How would you use a switch statement to print the corresponding day to a number?", "input": "", "output": "switch (n) {\n  case 1:\n    console.log(\"Monday\");\n    break;\n  case 2:\n    console.log(\"Tuesday\");\n    break;\n  case 3:\n    console.log(\"Wednesday\");\n    break;\n  case 4:\n    console.log(\"Thursday\");\n    break;\n  case 5:\n    console.log(\"Friday\");\n    break;\n  case 6:\n    console.log(\"Saturday\");\n    break;\n  case 7:\n    console.log(\"Sunday\");\n    break;\n  default:\n    console.log(\"Invalid input\");\n    break;\n}", "category": "Python"}, {"instruction": "Using a for-in loop, print out the keys and values of a given dictionary.", "input": "mydict = {\n  \"name\": \"John\",\n  \"age\": 30,\n  \"city\": \"New York\"\n}", "output": "for key,value in mydict.items():\n  print(\"Key: \" + key + \"; Value: \" + str(value))\n\n# Output:\n# Key: name; Value: John\n# Key: age; Value: 30\n# Key: city; Value: New York", "category": "Python"}, {"instruction": "How would you use a while loop to sum up numbers from 0 to n?", "input": "", "output": "let n = 10;\nlet sum = 0;\nlet i = 0;\nwhile (i <= n) {\n  sum += i;\n  i++;\n}\nconsole.log(sum); // prints 55", "category": "Python"}, {"instruction": "Using a try-except statement, write a Python code to handle a ValueError which arises if the input is not a number.", "input": "", "output": "try:\n  input_num = int(input(\"Enter a number: \"))\nexcept ValueError:\n  print(\"Please enter a valid number\")", "category": "Python"}, {"instruction": "Create a Python class for a product that includes data fields for name, description, and price.", "input": "", "output": "class Product:\n  def __init__(self, name, description, price):\n    self.name = name\n    self.description = description\n    self.price = price\n\n  def __str__(self):\n    return f\"Name: {self.name}\\nDescription: {self.description}\\nPrice: {self.price}\"", "category": "Python"}, {"instruction": "How would you use an if-else statement to test whether a number is even or odd?", "input": "", "output": "def test_even_odd(num):\n  if num % 2 == 0:\n    print(\"The number is even\")\n  else:\n    print(\"The number is odd\")", "category": "Python"}, {"instruction": "Write a Python function to print a string of given length n filled with asterisks.", "input": "", "output": "def print_asterisks(n):\n    for i in range(n):\n        print(\"*\", end=\"\")\n    print(\"\")", "category": "Python"}, {"instruction": "How would you use a for loop to print the index and item of a list?", "input": "", "output": "let list = [\"item1\", \"item2\", \"item3\", \"item4\"];\nfor (let i = 0; i < list.length; i++) {\n  console.log(i, list[i]);\n}\n// Output:\n// 0 item1\n// 1 item2\n// 2 item3\n// 3 item4", "category": "Python"}, {"instruction": "Using a regular expression, extract all prices of items from a given HTML string.", "input": "<div> \n  Price of tea is \u00a31.45,\n  price of burger is \u00a32.50,\n  price of coffee is \u00a32.00.\n</div>", "output": "let prices = [];\nlet pricesRegex = /\u00a3\\d+(?:\\.\\d+)?/g;\nlet matches = str.match(pricesRegex);\nfor (let i= 0; i < matches.length; i++) {\n  prices.push(matches[i]);\n}\nconsole.log(prices); // [\"\u00a31.45\",\"\u00a32.50\",\"\u00a32.00\"]", "category": "Python"}, {"instruction": "Write a code to delete a node from a given BST.", "input": "", "output": "# Node class to define a node of a BST \nclass Node(object): \n  \n    # Constructor \n    def __init__(self, data): \n        self.data = data \n        self.left = None\n        self.right = None\n  \n# Function to delete a given node from BST \ndef delete_node(root, key): \n  \n    # base case \n    if root is None: \n        return None\n  \n    # If the key to be delete is smaller than the root's \n    # key then it lies in left subtree \n    if key < root.data: \n        root.left = delete_node(root.left, key) \n  \n    # If the kye to be delete is greater than the root's key \n    # then it lies in right subtree \n    elif(key > root.data): \n        root.right = delete_node(root.right, key) \n  \n    # if key is same as root's key, then this is the node \n    # to be deleted \n    else: \n        # Node with only one child or no child \n        if root.left is None : \n            temp = root.right \n            root = None\n            return temp \n              \n        elif root.right is None : \n            temp = root.left \n            root = None\n            return temp \n  \n        # Node with two children: Get the inorder successor \n        # (smallest in the right subtree) \n        temp = find_min(root.right) \n  \n        # Copy the inorder successor's content to this node \n        root.data = temp.data \n  \n        # Delete the inorder successor \n        root.right = delete_node(root.right , temp.data) \n  \n  \n    return root \n  \n\"\"\" Helper Functions \"\"\"\n  \n# Function to find the minimum node \ndef find_min(node): \n    current = node \n  \n    # loop down to find the leftmost leaf \n    while(current.left is not None): \n        current = current.left  \n  \n    return current", "category": "Python"}, {"instruction": "Calculate the area of the circle with the radius of 4.", "input": "", "output": "The area of the circle with the radius of 4 is 50.26548245743669.", "category": "Python"}, {"instruction": "Write all the possible combinations for the strings, \"ABC\" and \"XYZ\".", "input": "", "output": "ABCXYZ, ABCXZY, ABYXZC, ABYZXC, ACBXYZ, ACBXZY, ACYXZB, ACYZXB, AXBZYC, AXBYCZ, AXYBCZ, AXYZBC, XABCYZ, XABCZY, XAYBZC, XAYCZB, XBACYZ, XBACZY, XBYACZ, XBYZAC, XYABCZ, XYAZBC.", "category": "Python"}, {"instruction": "Read the two given numbers and print the larger one.", "input": "Number 1: 20\nNumber 2: 10", "output": "", "category": "Python"}, {"instruction": "Create a SQL query that returns all employees in the \"Marketing\" department.", "input": "", "output": "SELECT * FROM employees \nWHERE department = 'Marketing';", "category": "Python"}, {"instruction": "Create a function that takes a 2D array of numerical values and returns the number of times the maximum value appears.", "input": "my_array = [[1, 2, 4, 1],\n            [2, 3, 3, 2],\n            [3, 4, 3, 3]]", "output": "def count_max(arr):\n    max_val = 0\n    count = 0\n    for row in arr:\n        max_val = max(max_val, max(row))\n\n    for row in arr:\n        if max(row) == max_val:\n            count += 1\n    \n    return count", "category": "Python"}, {"instruction": "Print out the number of items in the following list.", "input": "my_list = [1, 2, 3, 4, 5, 6, 7]", "output": "7", "category": "Python"}, {"instruction": "Input a two-dimensional array and calculate the sum of each row.", "input": "arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "def row_sum(arr): \n    row_sum = [] \n    for row in arr:\n        sum = 0 \n        for ele in row: \n            sum += ele \n        row_sum.append(sum) \n    return row_sum", "category": "Python"}, {"instruction": "Write the code to print a given table format in Python.", "input": "Table with 4 columns and 5 rows", "output": "for i in range(1,6):\n    print('{:<10}{:<10}{:<10}{:<10}'.format(i, i**2, i**3, i**4))", "category": "Python"}, {"instruction": "Construct a Python script to print a specific character from a string.", "input": "str = \"Hello world!\"\nindex = 5", "output": "testString = \"Hello world!\"\nprint(testString[index])\n# Output will be: w", "category": "Python"}, {"instruction": "Write a java program to count the number of characters in a sentence without using a loop.", "input": "sentence = \"This is a simple sentence\"", "output": "//using 'split()' method\nString[] words = sentence.split(\"\\\\s+\");  //split with regular expression\nint count = 0;\nfor(String word: words){\n    count += word.length();\n}\nSystem.out.println(\"The number of characters in the sentence is : \"+count);\n\n//using 'replaceAll()' method\nint count = sentence.replaceAll(\" \", \"\").length();\nSystem.out.println(\"The number of characters in the sentence is : \"+count);", "category": "Python"}, {"instruction": "Create a JavaScript program to convert the following date format into MM/DD/YYYY.", "input": "dateString = \"October 5, 2020\"", "output": "let dateString = \"October 5, 2020\";\nlet newDateString = dateString.substring(0, 3) + \"/\" + dateString.substring(8, 10) + \"/\" + dateString.substring(11);\n\nconsole.log(newDateString);\n//Output: 10/05/2020", "category": "Python"}, {"instruction": "Write a code to generate a random password with a given length.", "input": "", "output": "import random\nimport string\n\ndef generate_password(length):\n    chars = string.ascii_letters + string.digits + '!@#$%^&*()'\n    random.seed = (random.SystemRandom().random())\n    return ''.join(random.choice(chars) for i in range(length))\n\nprint(generate_password(10))  # Output is an alphanumeric string of length 10", "category": "Python"}, {"instruction": "Write a JavaScript program to check if a given string contains equal number of P and T characters.", "input": "", "output": "function equalNumberOfPAndTCharacters(str){\n    let countP = 0;\n    let countT = 0;\n    \n    for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) == 'P') {\n            countP++;\n        } else if (str.charAt(i) == 'T') {\n            countT++;\n        }\n    }\n\n    if(countP == countT){\n        return true;\n    } else {\n        return false;\n    }\n}\n\n//testing\nconsole.log(equalNumberOfPAndTCharacters(\"PPTTPT\")); //true", "category": "Python"}, {"instruction": "Write a python script to identify a palindrome from a given input string", "input": "inputString = \"abacab\"", "output": "def checkPalindrome(inputString): \n  \n    # reverse the given string \n    reverseString = inputString[::-1] \n  \n    # check if the string is equal to its reverse \n    if (inputString == reverseString): \n        return True\n    else: \n        return False\n  \n# Driver code \nif __name__ == \"__main__\": \n    inputString = \"abacab\"\n    print(checkPalindrome(inputString))", "category": "Python"}, {"instruction": "Create an array of 10 integers, starting from 0 and increasing with each element.", "input": "", "output": "my_array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "category": "Python"}, {"instruction": "Write a SQL query that returns all records from a table where the value in the \"email\" column contains the \"@\" symbol.", "input": "", "output": "SELECT * FROM table_name WHERE email LIKE '%@%';", "category": "Python"}, {"instruction": "Create an HTML page that uses Bootstrap to create a responsive navigation bar.", "input": "", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>Document</title>\n <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n</head>\n<body>\n \n<nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n <a class=\"navbar-brand\" href=\"#\">My Website</a>\n <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n   <span class=\"navbar-toggler-icon\"></span>\n </button>\n \n <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n   <ul class=\"navbar-nav mr-auto\">\n     <li class=\"nav-item active\">\n       <a class=\"nav-link\" href=\"#\">Home <span class=\"sr-only\">(current)</span></a>\n     </li>\n     <li class=\"nav-item\">\n       <a class=\"nav-link\" href=\"#\">About</a>\n     </li>\n     <li class=\"nav-item\">\n       <a class=\"nav-link\" href=\"#\">Contact</a>\n     </li>\n   </ul>\n </div>\n</nav>\n \n</body>\n</html>", "category": "Python"}, {"instruction": "Create a Python dictionary that includes the keys \"name\", \"age\", and \"location\", and set the values to your name, age, and location.", "input": "", "output": "my_dict = {\n \"name\": \"John Smith\",\n \"age\": 28,\n \"location\": \"New York\"\n}", "category": "Python"}, {"instruction": "Create a JavaScript function that can take a string and reverse it.", "input": "", "output": "function reverseString(str) {\n let reversed = \"\"\n for (let i = str.length-1; i >= 0; i--) {\n  reversed += str[i]\n }\n return reversed\n}", "category": "Python"}, {"instruction": "Write a Python script that converts the number 122 to binary.", "input": "", "output": "def dec_to_bin(n):\n binary_num = bin(n) \n print(binary_num[2:])\ndec_to_bin(122)", "category": "Python"}, {"instruction": "Write a Java program to implement Matrix multiplication", "input": "", "output": "public class MatrixMultiplication {    \n    public static void main(String []args) { \n        int[][] matrix1 = { {1, 1}, \n                            {2, 2} }; \n  \n        int[][] matrix2 = { {1, 1}, \n                            {2, 2} \n                        }; \n  \n        int rows1 = matrix1.length; \n        int cols1 = matrix1[0].length; \n        int rows2 = matrix2.length; \n        int cols2 = matrix2[0].length; \n  \n        int[][] result = new int[rows1][cols2]; \n  \n        // multiplying matrix1 and matrix2 \n        for(int i = 0; i < rows1; i++) { \n            for(int j = 0; j < cols2; j++) { \n                for(int k = 0; k < rows2; k++) { \n                    result[i][j] += matrix1[i][k]  \n                                * matrix2[k][j]; \n                } \n            } \n        } \n  \n        // printing the result matrix \n        for(int[] row : result) { \n            for (int element : row){ \n                System.out.print(element + \"\\t\" ); \n            } \n            System.out.println(); \n        } \n    } \n}", "category": "Python"}, {"instruction": "Given the following matrix, delete the row or column that contains the least number of elements.", "input": "[[0, 1, 2], \n [3, 4, 5], \n [6, 7, 8]]", "output": "import numpy as np\n\n# Create the matrix\nmatrix = np.array([[0, 1, 2], \n                   [3, 4, 5], \n                   [6, 7, 8]])\n\n# Get the lengths of each row\nrow_lengths = [len(row) for row in matrix]\n\n# Delete the row with the minimum length and print the result\ndel matrix[row_lengths.index(min(row_lengths))]\nprint(matrix) # prints [[0 1 2] \n                  #        [3 4 5] \n                  #        [6 7 8]]", "category": "Python"}, {"instruction": "What is Constructor Chaining in Java?", "input": "", "output": "Constructor chaining is a feature in Java that enables a class to call one or more other constructors of the same class in the same order as they appear in the class. This enables code reuse and helps to write a concise and robust constructor.", "category": "Python"}, {"instruction": "Parse an XML string and print the tag names.", "input": "<xml><title>HelloWorld!</title><body>This is my first XML document.</body></xml>", "output": "The tag names are title and body.", "category": "Python"}, {"instruction": "Create a HTML page to display a table with 5 rows and 4 columns of data.", "input": "", "output": "<html>\n <head>\n  <title>Table Example</title>\n </head>\n <body>\n  <table>\n   <tr>\n    <td>Row 1, Column 1</td>\n    <td>Row 1, Column 2</td>\n    <td>Row 1, Column 3</td>\n    <td>Row 1, Column 4</td>\n   </tr>\n   <tr>\n    <td>Row 2, Column 1</td>\n    <td>Row 2, Column 2</td>\n    <td>Row 2, Column 3</td>\n    <td>Row 2, Column 4</td>\n   </tr>\n   <tr>\n    <td>Row 3, Column 1</td>\n    <td>Row 3, Column 2</td>\n    <td>Row 3, Column 3</td>\n    <td>Row 3, Column 4</td>\n   </tr>\n   <tr>\n    <td>Row 4, Column 1</td>\n    <td>Row 4, Column 2</td>\n    <td>Row 4, Column 3</td>\n    <td>Row 4, Column 4</td>\n   </tr>\n   <tr>\n    <td>Row 5, Column 1</td>\n    <td>Row 5, Column 2</td>\n    <td>Row 5, Column 3</td>\n    <td>Row 5, Column 4</td>\n   </tr>\n  </table>\n </body>\n</html>", "category": "Python"}, {"instruction": "Construct a C++ class with three data members and one function.", "input": "", "output": "class MyClass {\n int data1;\n float data2;\n string data3;\n \n void myFunction() {\n //function code\n }\n};", "category": "Python"}, {"instruction": "Write a JavaScript code snippet to convert a string of uppercase characters to lowercase characters.", "input": "input_string = \"HELLO WORLD\"", "output": "let input_string = \"HELLO WORLD\";\nlet output_string = input_string.toLowerCase();\nconsole.log(output_string);", "category": "Python"}, {"instruction": "Edit the given SQL query to find the maximum salary", "input": "SELECT MIN(salary) FROM employees", "output": "SELECT MAX(salary) FROM employees;", "category": "Python"}, {"instruction": "Construct a JavaScript object with 5 key-value pairs.", "input": "", "output": "let obj = {\n key1: 'value1',\n key2: 'value2',\n key3: 'value3',\n key4: 'value4',\n key5: 'value5'\n};", "category": "Python"}, {"instruction": "Create a SQL query to find the name and age of the oldest person in the database.", "input": "Table Name: people\nColumns: id (integer), name (string), age (integer)", "output": "SELECT name, age FROM people ORDER BY age DESC LIMIT 1;", "category": "Python"}, {"instruction": "Given a set of numbers, find the largest number from the set.", "input": "[2, 9, 10, 11, 5]", "output": "11", "category": "Python"}, {"instruction": "Create a while loop that prints all the letters of the alphabet.", "input": "", "output": "a = 'a'\nwhile a <= 'z':\n    print(a)\n    a = chr(ord(a)+1)", "category": "Python"}, {"instruction": "Calculate the least common denominator of 6 and 8.", "input": "", "output": "24", "category": "Python"}, {"instruction": "Find the sum of two integers x and y.", "input": "x=2 \ny=3", "output": "5", "category": "Python"}, {"instruction": "Define a function called my_function that will take a string as an argument and returns the string with all the vowels removed.", "input": "", "output": "def my_function(string):\n    vowels = 'aeiouAEIOU'\n    newString = ''\n    for char in string:\n       if char not in vowels:\n          newString += char\n    return newString", "category": "Python"}, {"instruction": "Parse the HTML text to get all the <img> tags.", "input": "<html>\n<body>\n    <p>This is an example</p>\n    <img src=\"example.JPG\" alt=\"Example Image\"/>\n    <img src=\"example2.JPG\" alt=\"Example Image 2\"/>\n    <p>This is the end</p>\n</body>\n</html>", "output": "['<img src=\"example.JPG\" alt=\"Example Image\"/>', '<img src=\"example2.JPG\" alt=\"Example Image 2\"/>']", "category": "Python"}, {"instruction": "Create a loop that prints 'hello' 10 times when ran.", "input": "", "output": "for i in range(10):\n    print('hello')", "category": "Python"}, {"instruction": "Write a code in Python to count the number of words in the sentence \"Hello World\".", "input": "", "output": "# Count the number of words in the sentence\nsentence = \"Hello World\"\n\nnum_words = len(sentence.split())\n\nprint(num_words) # prints 2", "category": "Python"}, {"instruction": "Edit the following HTML string so that it sets the background color of the page to \"blue\".", "input": "<html>\n<body>\n</body>\n</html>", "output": "<html>\n<body style=\"background-color: blue;\">\n</body>\n</html>", "category": "Python"}, {"instruction": "Create an HTML page that displays a table with three columns: Name, Age, and Gender.", "input": "", "output": "<html>\n    <head>\n        <title>Table Examples</title>\n    </head>\n    <body>\n        <table>\n            <caption>People Table</caption>\n            <tr>\n                <th>Name</th>\n                <th>Age</th>\n                <th>Gender</th>\n            </tr>\n            <tr>\n                <td>John</td>\n                <td>30</td>\n                <td>Male</td>\n            </tr>\n            <tr>\n                <td>Jane</td>\n                <td>20</td>\n                <td>Female</td>\n            </tr>\n        </table>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Design a React component to display a button that increments a counter by one.", "input": "", "output": "import React from 'react';\n \nclass CounterButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n \n  handleClick = () => {\n    this.setState({count: this.state.count + 1});\n  }\n \n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick}>\n          {this.state.count}\n        </button>\n      </div>\n    );\n  }\n}\n \nexport default CounterButton;", "category": "Python"}, {"instruction": "Create a SQL query that finds the average salary of employees aged between 25 and 30.", "input": "", "output": "SELECT AVG(salary)\nFROM Employees \nWHERE age BETWEEN 25 AND 30;", "category": "Python"}, {"instruction": "Parse a JSON string and transform it into an array.", "input": "'{\"name\": \"John Doe\", \"age\": 30, \"city\": \"New York\"}'", "output": "let jsonString = '{\"name\": \"John Doe\", \"age\": 30, \"city\": \"New York\"}';\nlet parsedJSON = JSON.parse(jsonString);\nlet array = Object.values(parsedJSON); // ['John Doe', 30, 'New York']", "category": "Python"}, {"instruction": "Import a module in Python and store it in a variable named \u201cimport_module\u201d.", "input": "", "output": "import_module = importlib.import_module(\"<module name>\")", "category": "Python"}, {"instruction": "Given two equations, predict the range of the output variable.", "input": "Equation 1: Y = X + 2\nEquation 2: Y = 2X", "output": "The range of the output variable is [-2, \u221e).", "category": "Python"}, {"instruction": "Print the elements at odd indices in a given array.", "input": "An array containing [2, 5, 9, 8, 6]", "output": "The elements at odd indices are 5, 8.", "category": "Python"}, {"instruction": "Compare the two inputed strings to know whether the first string is a substring of the second one or not.", "input": "String 1: Ayda\nString 2: Maya", "output": "No, \"Ayda\" is not a substring of \"Maya\".", "category": "Python"}, {"instruction": "Create a MySQL statement to count the number of orders for each customer.", "input": "", "output": "SELECT customer_id, count(*) FROM orders GROUP BY customer_id;", "category": "Python"}, {"instruction": "Write a code snippet for a function that deletes a specific element from an array.", "input": "", "output": "def delete_element(arr, element):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == element:\n            while count < len(arr)-1:\n                arr[i] = arr[i+1]\n                i+=1\n            count+=1\n    arr.pop()\n    return arr", "category": "Python"}, {"instruction": "Suggest a way to create a loop of 3 elements in C#.", "input": "", "output": "In C#, a loop of 3 elements can be created using a for loop. The general syntax is as follows: \n \nfor (int i = 0; i < 3; i++) {\n    // Code to execute\n}", "category": "Python"}, {"instruction": "Determine the sum of the first n elements in a given array.", "input": "An array containing [2, 4, 6, 8, 10]", "output": "The sum of the first 5 elements in the given array is 30.", "category": "Python"}, {"instruction": "What language is used in HTML documents?", "input": "", "output": "Hyper Text Markup Language (HTML) is a markup language used to describe the structure of web pages and other documents. It is a language based on tags and attributes which define how the document should be displayed and structured.", "category": "Python"}, {"instruction": "Write a code snippet to implement bubble sorting in an array of 10 numbers.", "input": "", "output": "for (int i = 0; i < 10; i++) {\n  for (int j = 0; j < 10-i-1; j++) {\n    if (arr[j] > arr[j+1]) {\n      int temp = arr[j];\n      arr[j] = arr[j+1];\n      arr[j+1] = temp;\n    }\n  }\n}", "category": "Python"}, {"instruction": "Create a SQL query to get all the information about the employees with salary between $50,000 and $75,000.", "input": "", "output": "SELECT * FROM employee WHERE salary BETWEEN 50000 and 75000;", "category": "Python"}, {"instruction": "Why is a dictionary in Python often called an associative array?", "input": "", "output": "A dictionary in Python is often called an associative array because of the manner in which it stores data. The structure of a dictionary maps keys (strings, numbers, etc.) to their associated values in an associative manner, as in a mathematical mapping or function. This makes dictionaries an ideal choice for storing key-value pairs or to associate an item of data with a particular value.", "category": "Python"}, {"instruction": "Using the comment as a guide, fill in the gaps in the following code.", "input": "input_list = [1, 2, 3, 4]\n\ndef transform_list (input_list):\n    '''Transform the list by adding 5 to each element'''\n    # TODO", "output": "input_list = [1, 2, 3, 4]\n\ndef transform_list (input_list):\n    '''Transform the list by adding 5 to each element'''\n    transformed_list = [x+5 for x in input_list]\n    return transformed_list", "category": "Python"}, {"instruction": "Use Python to generate a random string of length 8 using lowercase alphabetic characters.", "input": "", "output": "import random\n\ndef random_string():\n  chars = 'abcdefghijklmnopqrstuvwxyz'\n  return ''.join(random.choice(chars) for i in range(8))\n\nrandom_string() // 'fldmgnkd'", "category": "Python"}, {"instruction": "Construct a regular expression that matches all strings that contain \"hello\" or \"world\".", "input": "", "output": "/\\b(hello|world)\\b/", "category": "Python"}, {"instruction": "Correct the following HTML code and check the output in a browser.", "input": "<html>\n  <heade>\n    <title>Test Page</title>\n  </heade>\n  <body>\n    <p>This is a test.</p>\n  </body>\n</html>", "output": "<html>\n  <head>\n    <title>Test Page</title>\n  </head>\n  <body>\n    <p>This is a test.</p>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Explain the difference between system call and library function.", "input": "", "output": "System calls are functions that are executed directly by the operating system's kernel when a process requests a service. These are typically more time consuming than library functions. Library functions, on the other hand, are functions in a library which contain a bunch of useful functions that a programmer can make use of in their programs. These functions have a bit less overhead and are generally much faster than system calls.", "category": "Python"}, {"instruction": "Write a SQL query to find the number of people below the age of 25 in the table \u2018people\u2019.", "input": "", "output": "SELECT COUNT(*) from people WHERE age < 25;", "category": "Python"}, {"instruction": "Explain why software developers should follow coding style guidelines.", "input": "", "output": "Software developers should follow coding style guidelines for a few reasons. First and foremost, adherence to coding style is essential for creating code that is easy to read, understand and maintain. Especially when working on a team, consistency in style allows developers to understand each other\u2019s code more quickly. Coding style can also be used to organize code so that it\u2019s easier to identify certain sections and make changes as needed. Additionally, coding style can give developers more control over potential errors, such as typos, by providing guidelines that can help to reduce the possibility of making such errors.", "category": "Python"}, {"instruction": "Formulate a query in SQL that would output the names of products that cost more than $50.", "input": "", "output": "SELECT product_name FROM products WHERE price > 50;", "category": "Python"}, {"instruction": "Modify the following function to return the maximum value in a list.", "input": "def max_list(lst):\n    max = 0\n    for x in lst:\n        max = x\n    return max", "output": "def max_list(lst):\n    max = None\n    for x in lst:\n        if max is None or x > max:\n            max = x\n    return max", "category": "Python"}, {"instruction": "Classify this short programming code into its data structure category.", "input": "h = [x for x in range(2, 101, 2)]", "output": "List comprehension - a data structure that uses a single expression to generate a list of elements.", "category": "Python"}, {"instruction": "Create a program to reverse an array in place, i.e. without creating a copy.", "input": "", "output": "def reverse_in_place(arr):\n    n = len(arr)\n    for i in range(n//2):\n        arr[i], arr[n-i-1] = arr[n-i-1], arr[i]", "category": "Python"}, {"instruction": "Suggest a solution to print the prime factorization of a number.", "input": "", "output": "def prime_factors(num):\n    factors = []\n    i = 2\n    while num > 1:\n        if num % i == 0:\n            factors.append(i)\n            num = num // i\n        else:\n            i += 1\n    return factors", "category": "Python"}, {"instruction": "Generate a code snippet to clone/copy a dictionary.", "input": "", "output": "import copy\n\ndef clone_dict(dict):\n    return copy.deepcopy(dict)", "category": "Python"}, {"instruction": "Formulate a solution to print out each letter of a string individually.", "input": "", "output": "def print_letters(string):\n    for letter in string:\n        print(letter)", "category": "Python"}, {"instruction": "Create a program to generate a sequence of integers that starts at k and ends at n in the following format: [k, k+1, ..., n-1, n]", "input": "", "output": "def generate_seq(k, n):\n    seq = []\n    for i in range(k, n+1):\n        seq.append(i)\n    return seq", "category": "Python"}, {"instruction": "Write a code to recognize the most likely language of a given text.", "input": "", "output": "import langdetect\n\ndef detect_language(text):\n    language = langdetect.detect(text)\n    return language", "category": "Python"}, {"instruction": "Write a code to insert a new item into a given list at the specified index.", "input": "[1, 2, 3, 4], 0, 10", "output": "def insert_item(lst, index, item):\n  lst.insert(index, item)\n  return lst", "category": "Python"}, {"instruction": "Create a Python script to parse a JSON string and print the value corresponding to the key 'name'.", "input": "{\"name\": \"John Doe\", \"age\": 25}", "output": "import json\n\ndata = '{\"name\": \"John Doe\", \"age\": 25}'\n\ndata = json.loads(data) \n\nprint(data[\"name\"])", "category": "Python"}, {"instruction": "Output an array of even numbers from 0 to 20 using a for loop in Python.", "input": "", "output": "even_nums = []\nfor num in range(0, 21):\n    if num % 2 == 0:\n        even_nums.append(num)\nprint(even_nums)", "category": "Python"}, {"instruction": "Write a web scraper in Python to get all the external links from a webpage.", "input": "url = 'https://en.wikipedia.org/wiki/Web_scraping'", "output": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://en.wikipedia.org/wiki/Web_scraping'\npage = requests.get(url)\nsoup = BeautifulSoup(page.text, 'html.parser')\nlinks = [link.get('href') for link in soup.find_all('a') if 'http' in link.get('href')]\nprint(links)", "category": "Python"}, {"instruction": "Edit the following C# code to round the result of x divided by y to the nearest integer.", "input": "double x = 25;\ndouble y = 4;\ndouble result = x/y;", "output": "double x = 25;\ndouble y = 4;\ndouble result = Math.Round(x/y);", "category": "Python"}, {"instruction": "Create a Python program that prints all numbers in the range 1-10.", "input": "", "output": "for number in range(1, 11):\n print(number)", "category": "Python"}, {"instruction": "Classify the term \"function\" as a programming language feature.", "input": "", "output": "Function is a language construct used to define a reusable instruction block, typically with parameters and a return value.", "category": "Python"}, {"instruction": "Generate a correct Ruby program to print all possible combinations of a given list.", "input": "[\"a\", \"b\", \"c\"]", "output": "def combinations(arr)\n  arr.length.times do |i|\n    arr.length.times do |j|\n      if i != j\n        print arr[i], arr[j]\n      end\n    end\n  end \nend\n\ncombinations(['a', 'b', 'c'])", "category": "Python"}, {"instruction": "Write a python script to convert a given number to a string.", "input": "num = 1234", "output": "def num_to_str(num):\n    return str(num)", "category": "Python"}, {"instruction": "Edit the following code to capture the errors and print them.", "input": "try:\n    num = int(input(\"Enter a number: \"))\n    print (num)\nexcept:\n    pass", "output": "try:\n    num = int(input(\"Enter a number: \"))\n    print (num)\nexcept Exception as e:\n    print(str(e))", "category": "Python"}, {"instruction": "Write a code to update the elements of a list inplace.", "input": "lst = [2, 4, 6, 8]", "output": "for i in range(len(lst)):\n    lst[i] *= 2", "category": "Python"}, {"instruction": "Create a list in Python of all integers from -5 to 10.", "input": "", "output": "list_nums = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Write a function in Java to calculate the total number of possible combinations of a given list of items.", "input": "[\u2018cat\u2019, \u2018dog\u2019, \u2018horse\u2019]", "output": "public static int calculateCombinations(List<String> items){\n            int totalCombinations = 0;\n\n            for(int i = 0; i < Math.pow(2, items.size()); i++){\n                int count = 0;\n                String combination = \"\";\n                for(int j = 0; j < items.size(); j++){\n                    if( (i & (1 << j)) > 0){\n                        count++;\n                        combination += items.get(j) + \" \";\n                    }\n                }\n                if(count == items.size()){\n                    totalCombinations++;\n                    System.out.println(combination);\n                }\n            }\n            return totalCombinations;\n        }", "category": "Python"}, {"instruction": "Write a JavaScript program to find the maximum number from the given three numbers.", "input": "5, 10, 3", "output": "let num1 = 5;\nlet num2 = 10;\nlet num3 = 3;\n\nlet maxNum = Math.max(num1, num2, num3);\n\nconsole.log(\"The maximum number of the three numbers given is \" + maxNum);", "category": "Python"}, {"instruction": "Write a function in Python to convert miles to kilometers.", "input": "7", "output": "def miles_to_km(miles):\n return miles * 1.609\n\nconverted_km = miles_to_km(7)\nprint(converted_km)", "category": "Python"}, {"instruction": "Create a list of integers from 1 to n in steps of 10", "input": "n = 50", "output": "list1 = []\nfor i in range(1, n+1, 10):\n    list1.append(i)", "category": "Python"}, {"instruction": "Find the value of $x^2 + 4x + 5$ when $x = 3$", "input": "", "output": "x_val = 3\neq_val = x_val**2 + 4*x_val + 5\nprint(eq_val) # Output: 32", "category": "Python"}, {"instruction": "Import the numpy library into the program", "input": "", "output": "import numpy as np", "category": "Python"}, {"instruction": "Develop an SQL query to select all rows from a table that has two columns: 'name' and 'age'.", "input": "", "output": "SELECT * FROM table_name;", "category": "Python"}, {"instruction": "Write a code to fetch the title of a web page", "input": "", "output": "import requests\nfrom bs4 import BeautifulSoup\n\ndef fetch_title():\n    page = requests.get('http://example.com')\n    content = page.content\n    soup = BeautifulSoup(content, 'html.parser')\n    return soup.title.string", "category": "Python"}, {"instruction": "Describe the tasks and input of a program to sort a list of integers", "input": "", "output": "The task of the program is to sort a list of integers. The input is a list of integers which needs to be sorted in ascending order. The output is another list with the same elements but sorted in ascending order.", "category": "Python"}, {"instruction": "Using the function above, complete the following statement to compute the sum from 2 to 6.", "input": "", "output": "sum_value = sum(2, 6)", "category": "Python"}, {"instruction": "Write a JavaScript code to rotate an array by n position to the left.", "input": "arr = [1, 2, 3, 4, 5]\npos = 2", "output": "function rotateLeft(arr, pos) {\n    for (let i = 0; i < pos; i++) {\n        var remove = arr.shift(); \n        arr.push(remove); \n    } \n    return arr;\n}\n\nconsole.log(rotateLeft(arr, pos));", "category": "Python"}, {"instruction": "Fill in the blanks to write a code in JavaScript that calls a function two times.", "input": "function sayHello() {\n  console.log('Hello');\n}", "output": "for (let i = 0; i < 2; i++) {\n  sayHello();\n}", "category": "Python"}, {"instruction": "Read an HTML page and extract all the <h2> tags.", "input": "<html><h1>Heading 1</h1><h2>Heading 2</h2><h2>Heading 3</h2></html>", "output": "import bs4 \n\nhtml = \"<html><h1>Heading 1</h1><h2>Heading 2</h2><h2>Heading 3</h2></html>\" \n\nsoup = bs4.BeautifulSoup(html, 'html.parser') \n\nh2_list = soup.find_all('h2')\nprint(h2_list)", "category": "Python"}, {"instruction": "Write a JavaScript code to list each item of a given array into a new array in reverse order.", "input": "arr = [1, 2, 3, 4, 5]", "output": "newArr = arr.reverse()\nconsole.log(newArr)", "category": "Python"}, {"instruction": "Delete all the trailing zeros of a given float number.", "input": "num = 18.1000", "output": "print(str(num).rstrip('0').rstrip('.'))", "category": "Python"}, {"instruction": "Generate a list of all words in the input string longer than 4 characters.", "input": "my_string = \"This is a sentence\"", "output": "word_list = [word for word in my_string.split() if len(word)>4]", "category": "Python"}, {"instruction": "Write a code in C to identify the character type of a given character.", "input": "$", "output": "#include<stdio.h> \n \nint main() \n{ \n    char c = '$';\n    if ( (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') )\n    {\n      printf(\"The  character is an alphabet.\");\n    }\n    else if (c >= '0' && c <= '9') \n    {\n        printf(\"The character is a digit.\");\n    }\n    else\n    {\n        printf(\"The character is a special character.\");\n    }\n    return 0; \n}", "category": "Python"}, {"instruction": "Develop a JavaScript function to reverse an array.", "input": "[1, 2, 3]", "output": "function reverseArray (arr) {\n    return arr.reverse();\n}\n\nreverseArray([1, 2, 3]); // => [3, 2, 1]", "category": "Python"}, {"instruction": "Describe what is a linked list data structure in 10 words or less.", "input": "", "output": "A linear data structure of linked nodes.", "category": "Python"}, {"instruction": "Write a function in Python to get the IPv6 address of a given domain name.", "input": "", "output": "import socket\n\ndef get_IPv6_address(domain_name):\n    \"\"\"\n    Function to get the IPv6 address of a given domain name\n    \"\"\"\n\n    # get the ip_addres\n    ip_address = socket.getaddrinfo(domain_name, 0, socket.AF_INET6)\n\n    # return the ip address\n    return ip_address[0][4][0]", "category": "Python"}, {"instruction": "Write an R function that determines the average value of an integer array.", "input": "", "output": "average <- function(numbers) {\n  sum <- 0\n  for (i in numbers) {\n    sum <- sum + i\n  }\n  return(sum/length(numbers))\n}", "category": "Python"}, {"instruction": "Select all words that start with 'a' from the following text.", "input": "The quick brown fox jumps over the lazy dog.", "output": "The quick brown fox jumps over the lazy dog.\n\nAnswer: The,quick, brown, and over.", "category": "Python"}, {"instruction": "Write a JavaScript expression that prints the value of the array at index 2.", "input": "let arr = [2, 4, 6, 8, 10];", "output": "console.log(arr[2]);", "category": "Python"}, {"instruction": "Write a CSS code to set the text colour of the h2 element to blue.", "input": "", "output": "h2 {\n color: blue;\n}", "category": "Python"}, {"instruction": "Delete the forth row from the following table using an SQL query.", "input": "Table: \nid     | name\n-------------------\n1      | John\n2      | Jane\n3      | Jacob\n4      | Jill", "output": "DELETE FROM Table\nWHERE id = 4;", "category": "Python"}, {"instruction": "Determine the sum of the integers in the following list.", "input": "list = [2, 4, 6, 8, 10]", "output": "sum = 30", "category": "Python"}, {"instruction": "Edit the following code to store 10 numbers in an array.", "input": "int array[]", "output": "int array[10];", "category": "Python"}, {"instruction": "Write a jQuery command to add a classname to an element.", "input": "", "output": "$('element').addClass('classname');", "category": "Python"}, {"instruction": "Write C# code to remove a specific element from an array.", "input": "{1,2,3,4,5,6}, 4", "output": "public static int[] RemoveElement(int[] arr, int element) \n{ \n    List<int> result = arr.ToList(); \n    for (int i = 0; i < result.Count; i++) \n        if (result[i] == element) \n            result.RemoveAt(i); \n    return result.ToArray(); \n}", "category": "Python"}, {"instruction": "Create a function in C that takes a string as input and returns an integer, which represents the number of occurences of a given character in the string.", "input": "\"Hello, World!\", 'o'", "output": "int count_occurrences(char *str, char c) \n{ \n    int count = 0; \n  \n    // Traverse the string and check \n    // for occurrences of character. \n    for (int i=0; str[i] != '\\0'; i++) \n        if (str[i] == c) \n            count++; \n  \n    return count; \n}", "category": "Python"}, {"instruction": "Write a Bash script to print the system date in the format \"year-month-date\".", "input": "", "output": "#!/bin/bash\n\n# Get the current date in the format \"year-month-date\"\n\ndate +\"%Y-%m-%d\"", "category": "Python"}, {"instruction": "Write a Python program to create a dictionary with three elements.", "input": "", "output": "d = { \n    \"one\" : 1, \n    \"two\" : 2, \n    \"three\" : 3\n}", "category": "Python"}, {"instruction": "Create a function to print all the paths in a binary tree.", "input": "", "output": "def print_paths(root): \n    path = [] \n    print_paths_util(root, path, 0) \n  \ndef print_paths_util(root, path, pathLen): \n    if root is None: \n        return\n  \n    if (len(path) > pathLen):  \n        path[pathLen] = root.data\n    else: \n        path.append(root.data) \n  \n    pathLen = pathLen + 1\n  \n    if root.left is None and root.right is None: \n        for i in range(pathLen):\n            print(path[i],end=\" \")\n        print() \n    else: \n        print_paths_util(root.left, path, pathLen) \n        print_paths_util(root.right, path, pathLen)", "category": "Python"}, {"instruction": "Develop a function to merge two lists l1 and l2 into a single list.", "input": "1. l1 = [3, 4, 5]\n2. l2 = [7, 8]", "output": "def merge(l1, l2):\n    l3 = l1 + l2\n    return l3", "category": "Python"}, {"instruction": "Write a single line of code to remove an item from a list.", "input": "my_list = [1, 2, 3, 4]", "output": "my_list.remove(4)", "category": "Python"}, {"instruction": "What is the maximum value of a byte in a binary system?", "input": "", "output": "The maximum value of a byte in a binary system is 255. This is because there are 8 bits in a byte, and the maximum value each bit can have is 1, giving a maximum value of 8 ones, or 255 in the denary system.", "category": "Python"}, {"instruction": "Compare two lists to find missing numbers.", "input": "list1 = [1, 2, 3, 4, 5] \nlist2 = [2, 3, 4]", "output": "# Create a new set to store the missing numbers\nmissing_numbers = set(list1).difference(set(list2)) \n  \n# Print the missing numbers\nprint(\"Missing numbers:\", *missing_numbers)", "category": "Python"}, {"instruction": "Create a function to return a random letter from a given string.", "input": "", "output": "import random \n  \ndef random_letter(string): \n    \"\"\" \n    Function to return a random letter \n    from a given string \n    \"\"\"\n  \n    # Get the length of the string \n    length = len(string) \n  \n    # Get a random index  \n    # from 0 to length - 1 \n    index = random.randint(0, length - 1) \n  \n    # Return the letter at the  \n    # randomly generated index \n    return string[index] \n  \n# Driver Code \nstring = \"Geek\"\nprint(random_letter(string))", "category": "Python"}, {"instruction": "Identify the differences between Java and JavaScript languages.", "input": "", "output": "Java is a compiled language while JavaScript is interpreted. Java is a class-based language while JavaScript is a prototype-based language. Java is statically typed while JavaScript is dynamically typed. Java supports method overloading while JavaScript does not.", "category": "Python"}, {"instruction": "Design a neural network for facial recognition using TensorFlow.", "input": "", "output": "import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    # First convolutional layer\n    tf.keras.layers.Conv2D(64, (3, 3), activation='relu', padding='same', input_shape=(64, 64, 3)),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    # Second convolutional layer\n    tf.keras.layers.Conv2D(128, (3, 3), activation='relu', padding='same'),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    # Third convolutional layer\n    tf.keras.layers.Conv2D(128, (3, 3), activation='relu', padding='same'),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    # Fourth convolutional layer\n    tf.keras.layers.Conv2D(128, (3, 3), activation='relu', padding='same'),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    # Flatten the output\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(2048, activation='relu'),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(1024, activation='relu'),\n    tf.keras.layers.Dropout(0.5),\n    # Output decode layer\n    tf.keras.layers.Dense(2, activation='softmax')\n])", "category": "Python"}, {"instruction": "Create a MySQL query to print all records from a specific table in descending order of their id.", "input": "", "output": "SELECT * FROM table_name ORDER BY id DESC;", "category": "Python"}, {"instruction": "Parse the following JSON objects, convert all the values to strings and create a dictionary named \"parsed_data\".", "input": "{\n \"name\": \"John Doe\",\n \"age\": 33,\n \"locations\": [\"NYC\", \"LA\"]\n}", "output": "import json\n\nparsed_data = {}\n\ndata = {\n    \"name\": \"John Doe\",\n    \"age\": 33,\n    \"locations\": [\"NYC\", \"LA\"]\n}\nfor key, val in data.items():\n    parsed_data[key] = str(val)", "category": "Python"}, {"instruction": "Interpret the following array of numbers consisting of 6 elements and divide it into 2 columns.", "input": "[1, 2, 3, 4, 5, 6]", "output": "arr = [1, 2, 3, 4, 5, 6]\n\nfirst_column = arr[:len(arr)//2]\nsecond_column = arr[len(arr)//2:]", "category": "Python"}, {"instruction": "Write a function that takes two arrays and returns a new array with all the items of the first array followed by all the items of the second array.", "input": "array1 = [1, 2, 3] \narray2 = [4, 5, 6]", "output": "function combineArrays(array1, array2){\n  let result = array1.concat(array2);\n  return result;\n}\n\nlet array1 = [1, 2, 3] \nlet array2 = [4, 5, 6]\nlet combinedArray = combineArrays(array1, array2);\n\nconsole.log(combinedArray) // [1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Using C#, write a method that returns a list of strings containing only elements of an input string array containing the letter 'a'.", "input": "string[] s = {\"apple\", \"banana\", \"cat\"};", "output": "public static List<string> FilterByLetterA(string[] s)\n{\n    List<string> list = new List<string>();\n    foreach (string item in s)\n    {\n        if (item.Contains(\"a\"))\n        {\n            list.Add(item);\n        }\n    }\n    return list;\n}", "category": "Python"}, {"instruction": "Develop a function to print out the Fibonacci sequence in Java.", "input": "", "output": "public class Fibonacci {\n\n    public static void printFibonacci(int n) {\n        int n1 = 0, n2 = 1;\n        for (int i = 0; i < n; i++) {\n            System.out.print(n1 + \" \");\n            int sum = n1 + n2;\n            n1 = n2;\n            n2 = sum;\n        }\n    }\n}", "category": "Python"}, {"instruction": "What would be the JavaScript code to remove duplicate values from an array?", "input": "[1, 2, 3, 4, 4, 2, 5]", "output": "const inputArray = [1, 2, 3, 4, 4, 2, 5];\n\nconst outputArray = inputArray.filter((arrayVal, indexVal) => {\n  return inputArray.indexOf(arrayVal) === indexVal;\n});\n\nconsole.log(outputArray); // [1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Write a SQL query to retrieve the total amount of purchase each customer has made.", "input": "Table:Customer_orders \n|userid|product |purchase_price|\n|------|--------|--------------|\n|1     |shoes   |50            |\n|2     |socks   |30            |\n|1     |pants   |20            |", "output": "SELECT userid, SUM(purchase_price) as total_purchase \nFROM Customer_orders \nGROUP BY userid;", "category": "Python"}, {"instruction": "Extract the phone number from given string and output it as an integer.", "input": "Hi, my number is +1-345--678-9012", "output": "\"\"\"\nExtract the phone number from given string and output it as an integer\n\"\"\"\n\ndef extract_phone_number(s):\n    s = s.replace('+', '')\n    numbers = \"\"\n    for c in s:\n        if c.isdigit():\n            numbers += c\n    return int(numbers)\n\nif __name__ == '__main__':\n    s = \"Hi, my number is +1-345--678-9012\"\n    num = extract_phone_number(s)\n    print(num)", "category": "Python"}, {"instruction": "Write a code to implement quicksort.", "input": "arr = [6, 1, 8, 4, 9, 5]", "output": "\"\"\"\nImplement quicksort\n\"\"\"\n\ndef quicksort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n\nif __name__ == '__main__':\n    arr = [6, 1, 8, 4, 9, 5]\n    result = quicksort(arr)\n    print(result)", "category": "Python"}, {"instruction": "Write a code in C++ to prompt the user for an integer and output the summation from 1 to that integer.", "input": "", "output": "\"\"\"\nPrompt the user for an integer and output the summation from 1 to that integer\n\"\"\"\n\n#include <iostream>\nusing namespace std;\n\nint main() \n{\n    int input;\n    cout << \"Please enter a positive integer: \";\n    cin >> input;\n\n    int sum = 0;\n    for (int i = 1; i <= input; i++) {\n        sum += i;\n    }\n\n    cout << \"The summation from 1 to that integer is \" << sum << endl;\n    return 0;\n}", "category": "Python"}, {"instruction": "Write a code to fetch the last ten news headlines from HackerNews using their API.", "input": "", "output": "\"\"\"\nFetch the last ten news headlines from HackerNews using their API\n\"\"\"\n\nimport requests\n\ndef get_headlines():\n    url = \"https://hacker-news.firebaseio.com/v0/topstories.json\"\n    ids = requests.get(url).json()\n    headlines = []\n    for id in ids[:10]:\n        item = requests.get(f\"https://hacker-news.firebaseio.com/v0/item/{id}.json\").json()\n        headlines.append(item['title'])\n    return headlines\n\nif __name__ == '__main__':\n    headlines = get_headlines()\n    for headline in headlines:\n        print(headline)", "category": "Python"}, {"instruction": "Create a class named Animal with a few methods describing different attributes of animals.", "input": "", "output": "class Animal:\n    def __init__(self):\n        pass\n    \n    def is_mammal(self):\n        \"\"\"Return True if animal is a mammal, False otherwise\"\"\"\n        pass\n\n    def is_reptile(self):\n        \"\"\"Return True if animal is a reptile, False otherwise\"\"\"\n        pass\n    \n    def is_amphibian(self):\n        \"\"\"Return True if animal is an amphibian, False otherwise\"\"\"\n        pass\n\n    def is_bird(self):\n        \"\"\"Return True if animal is a bird, False otherwise\"\"\"\n        pass", "category": "Python"}, {"instruction": "How to check if an item exists in a list in Python?", "input": "my_list = [1, 2, 3, 4]", "output": "# Check if item exists in list \nif 4 in my_list: \n    print(\"Exists\") \nelse: \n    print(\"Doesn't Exist\")", "category": "Python"}, {"instruction": "Using ReactJS, develop a basic form component with two input fields, one for a Name and the other for Age.", "input": "", "output": "class BasicForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      age: '',\n    };\n  }\n  \n  render() {\n    return (\n      <form>\n        <label>Name:\n          <input type=\"text\" name=\"name\" value={this.state.name} onChange={this.handleChange} />\n        </label>\n        <label>Age:\n          <input type=\"text\" name=\"age\" value={this.state.age} onChange={this.handleChange} />\n        </label>\n      </form>\n    );\n  }\n  \n  handleChange = (event) => {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n}", "category": "Python"}, {"instruction": "Sort this numeric array in descending order", "input": "Array: [3, 7 ,1, 5, 9]", "output": "let sortedArray = [9, 7, 5, 3, 1];", "category": "Python"}, {"instruction": "Retrieve the elements from the second index to the fourth index in the given array", "input": "Array: [10, 20, 50, 70, 90, 100]", "output": "let retrievedElements = [50, 70, 90];", "category": "Python"}, {"instruction": "Construct a for-loop statement to display the numbers counting from 10 to 15", "input": "", "output": "for (let i = 10; i <= 15; i++) {\n  console.log(i);\n}", "category": "Python"}, {"instruction": "Create an HTML page with a table to display student scores.", "input": "Data:\nStudent A: Score - 80 \nStudent B: Score - 90", "output": "<!DOCTYPEhtml> \n<html> \n    <head> \n        <title>Score Table</title> \n    </head> \n    <body> \n        <h3>Score Table</h3> \n        <table> \n            <tr> \n                <th>Student Name</th> \n                <th>Score</th> \n            </tr> \n            <tr> \n                <td>Student A</td> \n                <td>80</td> \n            </tr> \n            <tr> \n                <td>Student B</td> \n                <td>90</td> \n            </tr> \n        </table> \n    </body> \n</html>", "category": "Python"}, {"instruction": "In what language was the Google search engine originally written?", "input": "", "output": "The Google search engine was originally written in C++.", "category": "Python"}, {"instruction": "Create a system call in C to generate a process tree.", "input": "", "output": "#include<sys/types.h>\n#include <unistd.h>\n\npid_t c_sys_tree (pid_t root_pid)\n{\n        // Code to generate a process tree \n        // based on the given root PID \n}", "category": "Python"}, {"instruction": "Create a dictionary containing the frequencies for each character in the given string.", "input": "string = \"hello world\"", "output": "def count_characters(string):\n\u00a0\u00a0\u00a0\u00a0freq_chars = {}\n\u00a0\u00a0\u00a0\u00a0for char in string:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if char in freq_chars:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0freq_chars[char] += 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0freq_chars[char] = 1\n\u00a0\u00a0\u00a0\u00a0return freq_chars", "category": "Python"}, {"instruction": "Design a HTML document to display a chart with the sales of a particular item.", "input": "", "output": "<html>\n<head>\n    <title>Sales Chart</title>\n    <script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>\n    <script type=\"text/javascript\">\n        google.charts.load('current', {'packages':['corechart']});\n        google.charts.setOnLoadCallback(drawChart);\n\n        function drawChart() {\n            var data = google.visualization.arrayToDataTable([\n            ['Month', 'Sales'],\n            ['Jan',  1000],\n            ['Feb',  1170],\n            ['Mar',  660],\n            ['April', 1030]\n          ]);\n\n          var options = {\n            title: 'Sales of a particular item',\n            legend: 'none',\n            hAxis: {title: 'Month',  titleTextStyle: {color: '#333'}},\n            vAxis: {minValue: 0}\n          };\n            \n          var chart = new google.visualization.AreaChart(document.getElementById('chart_div'));\n          chart.draw(data, options);\n        }\n    </script>\n</head>\n<body>\n    <div id=\"chart_div\" style=\"width: 900px; height: 500px;\"></div>\n</body>\n</html>", "category": "Python"}, {"instruction": "Given an array of numbers, code a Java code to find out the highest number.", "input": "int arr[] = {20, 35, -15, 7, 55, 1, -22}", "output": "public static int findHighestNumber (int[] numbers) {\n \n    int highestNumber = Integer.MIN_VALUE;\n \n    for (int currentNumber : numbers) {\n        highestNumber = Math.max(currentNumber, highestNumber);\n    }\n \n    return highestNumber;\n}\n\nint highestNumber = findHighestNumber(arr); // prints 55", "category": "Python"}, {"instruction": "Code an assembly language program to calculate the sum of series 1 + 3 + 5 +.....+ (2*n-1).", "input": "n = 6", "output": ".MODEL SMALL \n.DATA \n        N DB ? \n        I DB ? \n        S DB ? \n.CODE \n    MOV AX,@DATA\n    MOV DS,AX\n    MOV DX,N\n    MOV AL,2\n    MUL DX\n    SUB AL,1\n    MOV N,AL\n    MOV I,N\n    MOV S,0\nAGAIN:\n    MOV AX,S\n    ADD AX,I\n    MOV S,AX\n    DEC I\n    CMP I,0\n    JNZ AGAIN\n    MOV DX,S\n    MOV AH,4CH\n    INT 21H \nEND", "category": "Python"}, {"instruction": "You are given a string array. Code a JavaScript function to remove duplicate strings from the array.", "input": "let arrStrings = [\"apple\", \"orange\", \"apple\", \"banana\"]", "output": "function removeduplicates(arr){\n    let arrDupRemoved = [];\n    for (let i = 0; i < arr.length; i++){\n      if(arrDupRemoved.indexOf(arr[i]) === -1){\n        arrDupRemoved.push(arr[i]);\n      }\n    }\n    return arrDupRemoved;\n  }\n\nconsole.log(removeduplicates(arrStrings)) // prints [\"apple\", \"orange\", \"banana\"]", "category": "Python"}, {"instruction": "Design a C code to accept two integers from the user and find the greatest among them.", "input": "", "output": "#include < stdio.h> \n  \nint main() \n{ \n    int a, b, great; \n  \n    printf(\"Enter two integers: \"); \n    scanf(\"%d %d\", &a, &b); \n  \n    if (a > b) \n        great = a; \n    else\n        great = b; \n  \n    printf(\"Greatest among two numbers is %d\", great); \n}", "category": "Python"}, {"instruction": "Write a Node.js script to filter numeric elements from an array.", "input": "let arr = [1, 'two', 'three', 4, 'five']", "output": "function getNumericElements(arr) {\n    return arr.filter(item => typeof item === 'number');\n}\n\nconsole.log(getNumericElements(arr)); // prints [1, 4]", "category": "Python"}, {"instruction": "Using Python, write a code to generate the Fibonacci series up to the given number.", "input": "num = 10", "output": "def generateFibonacciSeries(num): \n    series = [0, 1] \n    for i in range(2, num): \n        series.append(series[i - 2] + series[i - 1]) \n    return series\n\nprint(generateFibonacciSeries(num)) # prints [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "category": "Python"}, {"instruction": "Given an array of strings and a search keyword, code a JavaScript function to check if the keyword exists in the array.", "input": "let arrWords = [\"cat\", \"dog\", \"dog\", \"fish\"]\nlet keyword = 'dog'", "output": "function keywordExists(arr, keyword){\n    return arr.includes(keyword);\n}\n\nconsole.log(keywordExists(arrWords, keyword)); // prints true", "category": "Python"}, {"instruction": "Write a CSS script to add a border to the 'Title' element on a webpage.", "input": "", "output": "#Title {\n    border: 1px solid black;\n}", "category": "Python"}, {"instruction": "Design a Java code to create a method that counts the number of elements in a given array.", "input": "int[] array = {2, 4, 6, 8}", "output": "public static int countArrayElements(int[] input) {\n    int count = 0;\n    for (int element : input) {\n        count++;\n    }\n    return count;\n}\n\nint arraySize = countArrayElements(array); // prints 4", "category": "Python"}, {"instruction": "Given a JSON object, code a JavaScript function to convert the object into a query string.", "input": "let obj = {\n    name: 'John',\n    age: 25,\n    job: 'developer'\n}", "output": "function jsonToQueryString(jsonObject) {\n    let queryString = '';\n    for(let key in jsonObject) {\n        queryString += key + '=' + jsonObject[key] + '&';\n    }\n    return queryString.substring(0, queryString.length-1);\n}\n\nconsole.log(jsonToQueryString(obj)); // prints \"name=John&age=25&job=developer\"", "category": "Python"}, {"instruction": "How is a binary search tree different from a binary tree?", "input": "", "output": "A binary search tree is a type of binary tree where the value of each node is greater than the values in its left subtree, and less than the values in its right subtree. A binary tree on the other hand, can have nodes with any value, and the relationship between the nodes is not necessarily sorted.", "category": "Python"}, {"instruction": "Identify the \u2018time complexity\u2019 of an algorithm written in Java that calculates average of all elements in a list.", "input": "", "output": "The time complexity of the algorithm is O(n) since it needs to loop through all the elements in the list in order to calculate the average.", "category": "Python"}, {"instruction": "What are the benefits of using a hash table?", "input": "", "output": "The main benefits of using a hash table are faster search times, insertion/deletion time, and less space required to store data. Hash tables are most commonly used for storing key-value pairs, and can be used to quickly search for a value corresponding to a given key. They also provide a constant time for lookups, even for large data sets.", "category": "Python"}, {"instruction": "Define a function which takes two strings as arguments and returns a list containing all characters that appear in either string.", "input": "string_1 = 'Apple'\nstring_2 = 'Banana'", "output": "def common_chars(string_1, string_2):\n    char_list = [] \n    for char in string_1:\n        if char in string_2 and char not in char_list:\n            char_list.append(char)\n    for char in string_2:\n        if char in string_1 and char not in char_list:\n            char_list.append(char)\n    return char_list", "category": "Python"}, {"instruction": "Write a Python function that takes as input an array of numbers and returns the maximum positive number.", "input": "arr = [3, -2, -1, 7, 12]", "output": "def find_max_positive(arr):\n    max_num = 0\n    for num in arr:\n        if num > 0 and num > max_num:\n            max_num = num\n    return max_num", "category": "Python"}, {"instruction": "Explain the importance of using functions in programming.", "input": "", "output": "Using functions in programming is important for a few reasons. Functions can be used to divide a program into smaller, more manageable pieces, making it easier to read, debug, and maintain code. Additionally, functions can be reused across multiple programs by creating libraries that can be imported, saving time and effort. The use of functions also promotes code modularity and re-usability, allowing developers to write code once and use or modify it for different applications. Finally, functions can help to improve the overall performance of code by optimizing execution time because process and code only needs to be run once per function call.", "category": "Python"}, {"instruction": "Write a predicate function to check whether the given string is palindrome.", "input": "", "output": "function isPalindrome(str) {\n  str = str.toLowerCase();\n  for (let i = 0; i < str.length / 2; i++) {\n    if (str[i] !== str[str.length - 1 - i]) return false;\n  }\n  return true;\n}", "category": "Python"}, {"instruction": "Write Javascript code to select all div elements with the class \"container\".", "input": "", "output": "let containers = document.querySelectorAll('div.container');", "category": "Python"}, {"instruction": "Use the list comprehension method to print the cube of numbers from 1 to 10", "input": "", "output": "cubes = [x**3 for x in range(1, 11)]\nprint(cubes)", "category": "Python"}, {"instruction": "Design a data structure to track the frequency of words in a given text.", "input": "", "output": "A HashMap can be used to track the frequency of words in a given text. The keys of the map would represent the words in the text and the associated values would represent the frequency of that word. The time complexity for retrieving the frequency of a given word in hashmap will be O(1).", "category": "Python"}, {"instruction": "Explain the concept of Binary Indexed Tree.", "input": "", "output": "Binary Indexed Tree (BIT) is a data structure that leverages the advantages of both an array and a binary tree. It is also known as a Fenwick tree. It can be used to efficiently compute the sum of given range of elements in an array. BIT is a type of tree data structure in which the values stored at each node represent the sum of all the elements in the subarrays rooted at the given node. The time complexity of operation in BIT is O(logN), where N is the size of the array.", "category": "Python"}, {"instruction": "Codify a static HTML page such that when the page URL is accessed, it displays the message \"Please enter your login details\".", "input": "", "output": "<html>\n    <head>\n        <title>Login Page</title>\n    </head>\n    <body>\n        <h1>Please enter your login details</h1>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Design a web page containing HTML/CSS containing at least 5 containers.", "input": "", "output": "<html>\n<head>\n    <title>My Webpage</title>\n</head>\n<body>\n    <div class=\"container1\" >\n    </div>\n    <div class=\"container2\" >\n    </div>\n    <div class=\"container3\" >\n    </div>\n    <div class=\"container4\" >\n    </div>\n    <div class=\"container5\" >\n    </div>\n</body>\n</html>", "category": "Python"}, {"instruction": "Create an object to hold the student's grade.", "input": "Grade: A+", "output": "let studentGrade = {\n grade: 'A+'\n};", "category": "Python"}, {"instruction": "Describe the runtime complexity of segment tree.", "input": "", "output": "Segment tree is a data structure used to efficiently query certain operations regarding a range of values. A segment tree is a binary tree, with each of its internal nodes containing a range and its leaf nodes reresenting the elements in the given range. The runtime complexity of a segment tree is O(logN), where N is the number of elements in the range. This makes it an efficient data structure for range queries. Additionally, the tree can be updated in logarithmic time.", "category": "Python"}, {"instruction": "Write a regex pattern to extract all words containing the letter 'a' from a given string", "input": "", "output": "import re\n\ndef extract_words(string):\n    pattern = r'\\b\\w*a\\w*\\b'\n    words = re.findall(pattern, string)\n    return words", "category": "Python"}, {"instruction": "Create a program to list all the prime numbers between two numbers", "input": "", "output": "def list_primes(start, end):\n    prime_list = [2]\n    for num in range(start, end + 1):\n        if all(num % i != 0 for i in range(2, num)):\n            prime_list.append(num)\n\n    return prime_list", "category": "Python"}, {"instruction": "You are given two strings, find the minimum number of edits required to make them equal.", "input": "", "output": "def edit_distance(str1, str2):\n    edits = 0\n    m = len(str1)\n    n = len(str2)\n    if m < n:\n        for i in range(m, n):\n            edits += 1\n        for i in range(m):\n            if str1[i] != str2[i]:\n                edits += 1\n    else:\n        for i in range(n, m):\n            edits += 1\n        for i in range(n):\n            if str1[i] != str2[i]:\n                edits += 1\n    return edits", "category": "Python"}, {"instruction": "You are given some HTML code, write a function to strip the tags from it.", "input": "", "output": "def strip_tags(string):\n    stripped_str = ''\n    skip = False\n    for i in range(len(string)):\n        if string[i] == '<' and skip == False:\n            skip = True\n        elif string[i] == '>':\n            skip = False\n        elif skip == False:\n            stripped_str += string[i]\n    return stripped_str", "category": "Python"}, {"instruction": "Create a data structure to store an employee's details including his personal details and salary information.", "input": "", "output": "class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary", "category": "Python"}, {"instruction": "Generate an array containing numbers between 1 and 100 that are divisible by both 5 and 7.", "input": "", "output": "let result = [];\nfor(let i = 1; i <= 100; i++){\n if (i % 5 == 0 && i % 7 == 0) result.push(i);\n};\nconsole.log(result);", "category": "Python"}, {"instruction": "What are the benefits of abstract classes in Java?", "input": "", "output": "Abstract classes in Java provide a way to define and enforce common behavior that is shared between derived classes. They also allow for code reuse as the shared code can be reused by other classes. Furthermore, with the help of abstract classes, one can create a structure for developers to follow and provide a standard for them to write code. This can lead to improved code quality by enforcing certain rules and standards.", "category": "Python"}, {"instruction": "Construct a program that takes integers x and y and swaps their values.", "input": "x = 5\ny = 10", "output": "# get two integers from the user\nx = int(input(\"Enter value for x: \"))\ny = int(input(\"Enter value for y: \"))\n\n# swap\ntmp = x\nx = y\ny = tmp\n\n# print the swapped values\nprint(\"x =\", x, \"and y =\", y)", "category": "Python"}, {"instruction": "How to find the most common integer in a list?", "input": "", "output": "The most common integer in a list can be found using the collections.Counter module. The Counter class creates a dictionary with the elements in the list as keys and the number of occurrences as values. The most_common() method can then be used to find the element with the highest number of occurrences.", "category": "Python"}, {"instruction": "Identify the type of data present in the given JSON string.", "input": "String: [true, false, 0, \"Sample String\"]", "output": "Boolean, Boolean, Integer, String.", "category": "Python"}, {"instruction": "Slice the following array to get the last two numbers.", "input": "[2, 3, 9, 12, 13, 21]", "output": "[13, 21]", "category": "Python"}, {"instruction": "Write a LINQ query to retrieve records from employee list which are from either India or Canada.", "input": "", "output": "var employees = from e in Employee\n                where e.Country == \"India\" || e.Country == \"Canada\"\n                select e;", "category": "Python"}, {"instruction": "Write a CSS code snippet to change the font-size of all the headings to double the original size.", "input": "", "output": "h1, h2, h3, h4, h5, h6 {\n  font-size: 2em;\n}", "category": "Python"}, {"instruction": "Generate a matrix with 5 rows and 7 columns containing random numbers in it.", "input": "", "output": "import numpy as np\n\n# Create a matrix with 5 rows and 7 columns\nmatrix = np.random.rand(5,7)", "category": "Python"}, {"instruction": "Write a LINQ query to find employees whose age is over 30 and are from the United States.", "input": "", "output": "var employees = from e in Employee\n                where e.Age > 30 && e.Country == \"United States\"\n                select e;", "category": "Python"}, {"instruction": "Create a function to print out the Fibonacci numbers starting from 0 to the nth number.", "input": "n = 7", "output": "def print_fibonacci(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        print(a, end=' ')\n        temp = a \n        a = b \n        b = temp + b\n\n# The output of the function would be\n# 0 1 1 2 3 5 8", "category": "Python"}, {"instruction": "Write a query to retrieve all the customers whose customer ID starts with a \"C\".", "input": "", "output": "SELECT * FROM Customers\nWHERE customerId LIKE 'C%'", "category": "Python"}, {"instruction": "Create a class \"MyDict\" that inherits from the Python built-in \"dict\" class.", "input": "", "output": "class MyDict(dict):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def __getitem__(self, key): \n        if key in self:\n            return super().__getitem__(key)\n        else: \n            return None", "category": "Python"}, {"instruction": "Convert the following code to Python and make it object-oriented.", "input": "function celsius_to_fahrenheit(celsius) { \n  let fahrenheit = (celsius * 9/5) + 32\n  return fahrenheit \n}", "output": "class TemperatureConverter:\n    def celsius_to_fahrenheit(self, celsius):\n        fahrenheit = (celsius * 9/5) + 32\n        return fahrenheit", "category": "Python"}, {"instruction": "Design an if-else statement to print either \"Passed\" or \"Failed\" depending on the value of the given number", "input": "Number: 80", "output": "let num = 80;\n\nif (num >= 70) {\n  console.log(\"Passed\");\n} else {\n  console.log(\"Failed\");\n}", "category": "Python"}, {"instruction": "Produce a Python script that generates a random string of length 10", "input": "", "output": "import random\nimport string\n\ndef get_random_string(stringLength=10):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(stringLength))\n\nrandomString = get_random_string()\nprint(randomString) # outputs a random string of length 10", "category": "Python"}, {"instruction": "Design a class to represent a Circle with a radius", "input": "", "output": "class Circle {\n  constructor(radius) { \n    this.radius = radius; \n  }\n\n  getArea() { \n    return Math.PI * this.radius * this.radius; \n  }\n\n  getCircumference() { \n    return 2 * Math.PI * this.radius; \n  }\n}", "category": "Python"}, {"instruction": "Construct a switch statement to return either \"Nick\" or \"Jack\" base on the value of the input", "input": "Input: \"Nick\"", "output": "switch (input) {\n  case \"Nick\":\n    return \"Nick\";\n    break;\n\n  case \"Jack\":\n    return \"Jack\";\n    break;\n    \n  default:\n    return \"Invalid Input\";\n}", "category": "Python"}, {"instruction": "Generate a regex to check if a given string contains any vowels", "input": "", "output": "let regex = /[aeiou]/i;", "category": "Python"}, {"instruction": "Formulate a SQL query to select the name and address of the customers from the database", "input": "", "output": "SELECT Name, Address\nFROM Customers;", "category": "Python"}, {"instruction": "Create a class 'Stack' that has a method 'max_stack' that returns the maximum element in the stack.", "input": "", "output": "class Stack():\n    def __init__(self): \n        self.stack = []\n\n    # Inserts an element in the stack\n    def push(self, item):\n        self.stack.append(item)\n \n    # Return the maximum element in a stack\n    def max_stack(self): \n        max_elem = self.stack[0] \n        for i in range(1,len(self.stack)): \n            if self.stack[i]>max_elem:\n                    max_elem = self.stack[i] \n        return max_elem", "category": "Python"}, {"instruction": "Create a SQL query to select the customers that have placed orders of price greater than 1000.", "input": "", "output": "SELECT customer_name \nFROM customers \nJOIN orders ON customers.customer_id = orders.customer_id \nWHERE orders.price > 1000;", "category": "Python"}, {"instruction": "Given a string s, write a Python function that returns the longest substring of the given string that is a palindrome.", "input": "s = \"abcbabcd\"", "output": "def longest_palindrome_substring(s):\n n = len(s)\n if n == 0:\n return \"\"\n dp = [[False for _ in range(n)] for _ in range(n)]\n start = 0\n max_length = 1\n # All substrings of length 1 are palindrome\n for i in range(n):\n  dp[i][i] = True\n # Check for substring of length 2. \n for i in range(n-1):\n  if s[i] == s[i+1]:\n   dp[i][i+1] = True\n   start = i\n   max_length = 2\n # Check for lengths greater than 2\n # k is length of substring\n for k in range(3, n+1):\n  # Fix the starting index \n  for i in range(n-k+1):\n   # Get the ending index of substring from\n   # starting index i and length k\n   j = i + k - 1\n   # checking for sub-string from ith index to\n   # jth index iff str[i+1] to str[j-1] is a\n   # palindrome\n   if dp[i+1][j-1] and s[i] == s[j]:\n    dp[i][j] = True\n    if k > max_length:\n     start = i\n     max_length = k\n # return the longest palindromic substring\n return s[start:start+max_length]", "category": "Python"}, {"instruction": "Create a function to create a multiplication table for a given number.", "input": "Number: 5", "output": "def multiplication_table(num): \n      \n    for i in range(1, 11): \n        print(num, '*', i, '=', num*i) \n          \n# Driver code  \nmultiplication_table(5)", "category": "Python"}, {"instruction": "Write a function that takes a string and returns the letter which appears most frequently.", "input": "s = \"apple\"", "output": "def most_frequent_letter(s):\n    # get the letter frequency\n    letter_frequency = {}\n    for ch in s:\n        if ch in letter_frequency:\n            letter_frequency[ch] += 1\n        else:\n            letter_frequency[ch] = 1\n\n    # find the letter with the max frequency\n    max_frequency = 0\n    max_frequency_letter = ''\n    for letter, frequency in letter_frequency.items():\n        if frequency > max_frequency:\n            max_frequency = frequency\n            max_frequency_letter = letter\n\n    return max_frequency_letter\n\nprint(most_frequent_letter(\"apple\")) # 'p'", "category": "Python"}, {"instruction": "Given a list of numbers, remove all negative numbers and sort the remaining numbers in ascending order.", "input": "numbers = [-5, -1, 2, 0, 4, 5, 9]", "output": "def remove_negatives_and_sort(numbers):\n    # filter out negative numbers\n    non_negatives = list(filter(lambda x: x >= 0, numbers))\n    # sort the non-negative numbers\n    non_negatives.sort()\n    return non_negatives\n  \nprint(remove_negatives_and_sort([-5, -1, 2, 0, 4, 5, 9])) # [0, 2, 4, 5, 9]", "category": "Python"}, {"instruction": "What is the apex of the programming language C++?", "input": "", "output": "The apex of the programming language C++ is Object Oriented Programming. It is a style of programming that uses objects and their interactions to design applications and computer programs. Object-oriented programming allows for code re-use, modularity and easy debugging. This makes the language an efficient choice for software development.", "category": "Python"}, {"instruction": "Given a string s, reverse its characters and return the resulting string.", "input": "s = \"apple\"", "output": "def reverse_string(s):\n  # initialize an empty string\n  reversed_string = \"\"\n\n  # loop through the string and concatenate the characters in reverse order\n  for i in range(len(s) - 1, -1, -1):\n    reversed_string += s[i]\n  return reversed_string\n  \nprint(reverse_string(\"apple\")) # elppa", "category": "Python"}, {"instruction": "Write an SQL query to find the name of all customers who have made orders before the given date.", "input": "Table: Customers\nFields: name, order_date\nGiven_date = 17/2/2020", "output": "SELECT name \nFROM Customers \nWHERE order_date < '17/2/2020';", "category": "Python"}, {"instruction": "Write a Python script to check for syntactic correctness of an algorithm.", "input": "Algorithm = \"1. Read input\n2. Initialize variables\n3. Process input\n4. Output result\"", "output": "def is_algorithm_syntactically_correct(algorithm):\n    algorithm = algorithm.replace('\\n', ' ').replace('\\t ', ' ').lower()\n    \n    required_words = ['read', 'input', 'initialize', 'variables', 'process', 'output', 'result']\n    for word in required_words:\n        if word not in algorithm:\n            return False\n    return True", "category": "Python"}, {"instruction": "Generate a list of distinct dates between two given dates using JavaScript.", "input": "startdate = \"01/20/2020\"\nenddate = \"05/17/2020\"", "output": "function generateDates(startdate, enddate) {\n    const dates=[],\n          start=new Date(startdate),\n          end=new Date(enddate);\n\n    while (start <= end) {\n        const newdate = new Date(start);\n        const formatteddate = `${newdate.getDate()}/${newdate.getMonth()+1}/${newdate.getFullYear()}`;\n        if(!dates.includes(formatteddate)) dates.push(formatteddate)\n        start.setDate(start.getDate() + 1);\n    }\n\n    return dates;\n}", "category": "Python"}, {"instruction": "Create a simple chatbot using Python.", "input": "", "output": "print(\"Hello, I am your chatbot!\")\n\nwhile True:\n user_input = input(\"What would you like to talk about?\\n\")\n\n if user_input == \"bye\":\n  print(\"Bye! It was nice talking to you.\")\n  break\n\n if user_input == \"weather\":\n  print(\"It is sunny outside!\")\n else:\n  print(\"I am sorry, I don't understand your query.\")", "category": "Python"}, {"instruction": "Complete the following code so it swaps two given elements in the list.", "input": "list = [1, 3, 7, 4, 2]\ndef swap(list, i, j):\n    # Your code here", "output": "list = [1, 3, 7, 4, 2]\ndef swap(list, i, j):\n    # Swap the elements\n    list[i], list[j] = list[j], list[i]", "category": "Python"}, {"instruction": "Reverse the following string without using in-built functions in Python.", "input": "Hello World", "output": "dlroW olleH", "category": "Python"}, {"instruction": "Complete the following code with a condition so it prints the average of the array elements.", "input": "arr = [4, 15, 12, 3, 8]\ntotal = 0\nfor num in arr:\n  # Your code here\n\nprint(total / len(arr))", "output": "arr = [4, 15, 12, 3, 8]\ntotal = 0\nfor num in arr:\n  total += num\n\nprint(total / len(arr))", "category": "Python"}, {"instruction": "Convert the following range to list elements in Python.", "input": "range(2, 8)", "output": "list(range(2, 8)) # [2, 3, 4, 5, 6, 7]", "category": "Python"}, {"instruction": "Create a code to check whether two words are nearly identical.", "input": "Word A: bte\nWord B: tree", "output": "def is_nearly_identical(str1, str2): \n    edit_dist = 0\n    m = len(str1)\n    n = len(str2)\n\n    # Create matrix to store results of  subproblems \n    dp = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n    for i in range(m + 1): \n        for j in range(n + 1):  \n            if i == 0: \n                dp[i][j] = j   \n            elif j == 0: \n                dp[i][j] = i    \n            elif str1[i - 1] == str2[j - 1]: \n                dp[i][j] = dp[i - 1][j - 1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j - 1],      # Insert \n                                   dp[i - 1][j],      # Remove \n                                   dp[i - 1][j - 1])  # Replace \n\n    edit_dist = dp[m][n]\n\n    if edit_dist == 1: \n        return True\n    else:\n        return False\n\n# Driver code\nif is_nearly_identical(\"bte\",\"tree\"): \n    print(\"Words are nearly identical\") \nelse: \n    print(\"Words are not nearly identical\")", "category": "Python"}, {"instruction": "Write a code to find the sum of the multiples of 3 and 5 up to a given number.", "input": "Number: 15", "output": "def sum_of_multiples(num): \n    sum = 0 \n    for i in range(num):\n            if i % 3 == 0: \n                sum += i\n            elif i % 5 == 0: \n                sum += i\n    return sum\n\n# Driver code \nsum = sum_of_multiples(15)\nprint(\"Sum of multiples of 3 and 5 =\",sum)", "category": "Python"}, {"instruction": "Write a code snippet to find the most frequent word in a given sentence.", "input": "Sentence: The quick brown fox ate the lazy dog", "output": "def most_frequent_word(str): \n    split_str = str.split() \n\n    frequencies = {} \n    for word in split_str: \n        if word in frequencies: \n            frequencies[word] += 1\n        else: \n            frequencies[word] = 1\n  \n    most_frequent_word = \"\" \n    highest_freq = 0\n    for key, value in frequencies.items(): \n        if value > highest_freq: \n            highest_freq = value \n            most_frequent_word = key \n  \n    return most_frequent_word \n\n# Driver code   \nprint(most_frequent_word('The quick brown fox ate the lazy dog'))", "category": "Python"}, {"instruction": "Implement a function to check for balanced parentheses in a given string.", "input": "String: (((())()))", "output": "def is_balanced(s): \n    stack = [] \n    for letter in s: \n        if letter in [\"(\", \"[\", \"{\"]: \n            stack.append(letter) \n        else: \n            if len(stack) == 0: \n                return False\n            top = stack.pop(-1) \n            if top == '(': \n                if letter == ')':             \n                    continue\n                else: \n                    return False\n            elif top == '[': \n                if letter == ']': \n                    continue\n                else: \n                    return False\n            elif top == '{': \n                if letter == '}': \n                    continue\n                else: \n                    return False\n    if len(stack) == 0: \n        return True \n    return False \n\n# Driver code\nprint(is_balanced('(((())()))')) # True\nprint(is_balanced('(((()))')) # False", "category": "Python"}, {"instruction": "Write a JavaScript function to find the first element of an array that passes a given test.", "input": "const arr = [10, 20, 9, 5];", "output": "const findElement = (arr, test) => {\n  for(let element of arr){\n    if(test(element)){\n      return element;\n    }\n  }\n};", "category": "Python"}, {"instruction": "Construct a Swift program to display 'Hello World!'.", "input": "", "output": "print(\"Hello World!\")", "category": "Python"}, {"instruction": "Write a MySQL query to calculate the average rating of the items in the \u201citems\u201d table.", "input": "", "output": "SELECT AVG(rating) FROM items;", "category": "Python"}, {"instruction": "Construct a JavaScript program that displays the current date and time.", "input": "", "output": "let date = new Date();\ndocument.write(date);", "category": "Python"}, {"instruction": "Alter the following code to detect a loop in a linked list", "input": "", "output": "def detectLoop(head): \n    slow_p = head  \n    fast_p = head  \n  \n    while (slow_p and fast_p and \n             fast_p.next): \n        slow_p = slow_p.next\n        fast_p = fast_p.next.next\n          \n        if slow_p == fast_p: \n            return 1\n  \n    return 0", "category": "Python"}, {"instruction": "Write a python code to print every key and its corresponding value in a dictionary.", "input": "{\"Name\": \"John\", \"Age\": 20, \"Country\": \"USA\"}", "output": "dic = {\"Name\": \"John\", \"Age\": 20, \"Country\": \"USA\"} \nfor key, value in dic.items():  \n    print(key + \" : \" + str(value))", "category": "Python"}, {"instruction": "Create a bash script to retrieve the IP address of a given domain name.", "input": "", "output": "#!/bin/bash\n\n# Retrieve the IP address of a given domain name\nDOMAIN=\"$1\"\nif [[ -n \"$DOMAIN\" ]] ; then \n    IP_ADDRESS=$(getent ahostsv4 \"$DOMAIN\" | tail -1 | cut -d\" \" -f1)\n    echo -e \"The IP address of $DOMAIN is $IP_ADDRESS\" \nelse\n    echo -e \"Please enter a domain name \\nExample: www.example.com\"\nfi", "category": "Python"}, {"instruction": "Alter the following code to create a function called \"find_largest\" to find the largest number in a given list.", "input": "[9, 11, 7, 16, 20]", "output": "def find_largest(lst):\n    largest_number = lst[0]\n    for num in lst:\n        if num > largest_number:\n            largest_number = num\n    return largest_number", "category": "Python"}, {"instruction": "Create a function to print the contents of a binary tree in pre-order format.", "input": "", "output": "def printPreOrder(root): \n    if root != None: \n        print(root.data, end=\" \") \n        printPreOrder(root.left) \n        printPreOrder(root.right)", "category": "Python"}, {"instruction": "Write an algorithm to store the data in a 2D array.", "input": "[[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16]]", "output": "def storeDataIn2DArray(data):\n    rowLength = len(data[0])\n    columnLength = len(data)\n    twoDArray = []\n  \n    for row in range(rowLength):\n        twoDArrayRow = []\n\n        for column in range(columnLength):\n            twoDArrayRow.append(data[column][row])\n\n        twoDArray.append(twoDArrayRow)\n\n    return twoDArray", "category": "Python"}, {"instruction": "Create a data structure to store the 5 highest scores of a given game", "input": "", "output": "# create a priority queue \n# score will be the priority and name will be stored as data\nimport queue\nscores = queue.PriorityQueue(maxsize=5)\n\ndef add_score(score, name):\n    if scores.full():\n        min_score = scores.get()\n        if min_score[0] < score:\n            scores.put((score, name))\n        else:\n            scores.put(min_score)\n    else:\n        scores.put((score, name))", "category": "Python"}, {"instruction": "Create a TensorFlow program to implement a multi-layer neural network", "input": "", "output": "import tensorflow as tf\n\n# create the model\nmodel = tf.keras.models.Sequential()\n\n# add layers to the model\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\nmodel.add(tf.keras.layers.Dense(64, activation='relu'))\nmodel.add(tf.keras.layers.Dense(32, activation='relu'))\nmodel.add(tf.keras.layers.Dense(16, activation='relu'))\nmodel.add(tf.keras.layers.Dense(8, activation='sigmoid'))\nmodel.add(tf.keras.layers.Dense(4, activation='softmax'))\n\n# compile the model\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])", "category": "Python"}, {"instruction": "Generate code for printing a given 2D matrix in spiral order", "input": "matrix = [[1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9]]", "output": "def print_spiral(matrix):\n    # matrix is an 2D array \n    row_start = 0\n    row_end = len(matrix)-1\n    col_start = 0\n    col_end = len(matrix[0])-1\n\n    while row_start <= row_end and col_start <= col_end:\n        # print top row \n        for i in range(col_start, col_end+1):\n            print(matrix[row_start][i])\n        # increment row start \n        row_start += 1\n\n        # print right column\n        for i in range(row_start, row_end+1):\n            print(matrix[i][col_end])\n        # decrement col end\n        col_end -= 1\n        \n        # print bottom row\n        if row_start <= row_end:\n            for i in range(col_end, col_start-1, -1):\n                print(matrix[row_end][i])\n            # decrement row end\n            row_end -= 1\n\n        # print left column\n        if col_start <= col_end:\n            for i in range(row_end, row_start-1, -1):\n                print(matrix[i][col_start])\n            # increment col start\n            col_start += 1", "category": "Python"}, {"instruction": "Develop a method to achieve the linear interpolation between two given points", "input": "", "output": "def linear_interpolation(x1, y1, x2, y2): \n    # slope \n    m = (y2 - y1) / (x2 - x1) \n    # intercept \n    c = y2 - (m * x2) \n    return m, c", "category": "Python"}, {"instruction": "Write a function to calculate the cost of purchasing X items at a given cost", "input": "X = 5 and Cost per item= 2.00", "output": "def cost(x, price): \n    return x*price \ncost(5, 2.00)  # returns 10.00", "category": "Python"}, {"instruction": "Generate code to print all unique 4 digit combos", "input": "", "output": "def unique_4_digit_combos():\n    # initialize a set to store the combinations \n    combos = set()\n    # loop through integers between 0000 and 9999\n    for i in range(10000):\n        # convert integer to string\n        digits = str(i).zfill(4)\n        # check if not repeated characters\n        if len(digits) == len(set(digits)):\n            # add to set \n            combos.add(digits)\n    # print the combinations \n    for c in combos:\n        print(c)", "category": "Python"}, {"instruction": "What is the purpose of a library in software development?", "input": "", "output": "The purpose of a library in software development is to provide a collection of related functions and data structures that can be used by a program. Libraries are used to simplify or abstract away the details of how a particular operation is implemented or offer prepackaged functionality. Libraries offer code reuse, faster development time, and optimized performance. They also act as the interface between the application and the system or the environment it is running on.", "category": "Python"}, {"instruction": "Create a Visual Basic function to print the contents of an array.", "input": "", "output": "Public Sub PrintArray(arr() As Integer)\n    For i = 0 To arr.Length - 1\n        Console.WriteLine(arr(i))\n    Next\nEnd Sub", "category": "Python"}, {"instruction": "Create an array filtering function using JavaScript", "input": "", "output": "function filterArray(array){\n   let newArray = [];\n   for(let i=0; i<array.length; i++){\n      if(array[i] >= 0){\n         newArray.push(array[i]);\n      }\n   }\n   return newArray;\n}", "category": "Python"}, {"instruction": "Create a function in Javascript to convert hour in 24-hours format to hour in 12-hours format.", "input": "14", "output": "function convert24HourFormatTo12HourFormat(hours) {\n    if (hours > 12) {\n      return (hours - 12) + \"PM\";\n    } else if (hours == 12) {\n      return hours + \"PM\";\n    } else if (hours == 0) {\n        return 12 + \"AM\";\n    } else {\n      return hours + \"AM\";\n    }   \n}", "category": "Python"}, {"instruction": "Suggest a way to serialize a binary tree in python.", "input": "", "output": "def serializeBinaryTree(root):\n    if root == None:\n        return \"#\"\n    \n    serializedTree = \"\"\n    serializedTree += str(root.val) + ','\n    serializedTree += serializeBinaryTree(root.left) + ','\n    serializedTree += serializeBinaryTree(root.right)\n\n    return serializedTree", "category": "Python"}, {"instruction": "Alter the code to return the last element of a linked list.", "input": "", "output": "def getLastElement(head): \n    # Base case \n    if head == None: \n        return None\n  \n    # If list is not empty, traverse \n    # to the last node \n    start = head \n    while (start.next != None): \n        start = start.next\n  \n    # return last element \n    return start", "category": "Python"}, {"instruction": "Suggest a python code to print a 2D board with 'X' and 'O'.", "input": "[['X', 'O', 'X'], ['O', 'X', 'O'], ['X', 'X', 'O']]", "output": "board = [['X', 'O', 'X'], ['O', 'X', 'O'], ['X', 'X', 'O']]\n\nfor row in board:\n    for cell in row:\n        print(cell, end=\" \")\n    print()", "category": "Python"}, {"instruction": "Write a code to convert a given string of English characters to corresponding Morse code.", "input": "\"Hello World!\"", "output": "def morse_encode(input_string):\n    morse_encoder = {\n        \"A\":\".- \",\n        \"B\":\"-... \",\n        \"C\":\"-.-. \",\n        \"D\":\"-.. \",\n        \"E\":\" . \",\n        \"F\":\"..-. \",\n        \"G\":\"--. \",\n        \"H\":\".... \",\n        \"I\":\".. \",\n        \"J\":\".--- \",\n        \"K\":\"-.- \",\n        \"L\":\".-.. \",\n        \"M\":\"-- \",\n        \"N\":\"-. \",\n        \"O\":\"--- \",\n        \"P\":\".--. \",\n        \"Q\":\"--.- \",\n        \"R\":\".-. \",\n        \"S\":\"... \",\n        \"T\":\"- \",\n        \"U\":\"..- \",\n        \"V\":\"...- \",\n        \"W\":\".-- \",\n        \"X\":\"-..- \",\n        \"Y\":\"-.-- \",\n        \"Z\":\"--.. \",\n        \" \": \"  \"\n    }\n    morse_string = []\n\n    for char in input_string.upper():\n        encoded_char = morse_encoder.get(char)\n        morse_string.append(encoded_char)\n    \n    return ''.join(morse_string)\n\nprint(morse_encode(\"Hello World!\")) # Output: \".... . .-.. .-.. ---  .-- --- .-. .-.. -.. ! \"", "category": "Python"}, {"instruction": "Create a function that returns a list of all the factors of a given number.", "input": "64", "output": "def factor(x): \n    factors = []\n    for i in range(1, x + 1): \n        if x % i == 0: \n            factors.append(i) \n    return factors\n\nprint(factor(64)) # Output: [1, 2, 4, 8, 16, 32, 64]", "category": "Python"}, {"instruction": "Write an SQL query to select the gender, age and count of people from the people table for people aged 20-30.", "input": "", "output": "SELECT gender, age, COUNT(*) FROM people WHERE age BETWEEN 20 AND 30 GROUP BY gender, age;", "category": "Python"}, {"instruction": "Write a MySQL query to select the first 3 rows of the student table.", "input": "", "output": "SELECT * FROM student LIMIT 3;", "category": "Python"}, {"instruction": "Create a text classification model using Scikit-learn to classify a message with either \"positive\" or \"negative\" sentiment.", "input": "", "output": "from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.linear_model import LogisticRegression\n\n# Vectorize the message into a format that the model can accept\nvect = CountVectorizer().fit(X_train)\nX_train_vectorized = vect.transform(X_train)\n\n# Train a Logistic Regression model\nmodel = LogisticRegression()\nmodel.fit(X_train_vectorized, y_train)\n\n# Use the model to predict the sentiment of a given message\nmessage_sentiment = model.predict([vect.transform([message])])", "category": "Python"}, {"instruction": "What kind of data structure is used for a queue in Java?", "input": "", "output": "A queue in Java is typically implemented using a linked list or an array.", "category": "Python"}, {"instruction": "Create a function in Java to print out all substrings of an input string.", "input": "", "output": "public static void printSubstrings(String str) {\n    for (int i = 0; i < str.length(); i++) { \n        for (int j = i + 1; j <= str.length(); j++) { \n            System.out.println(str.substring(i, j)); \n        } \n    } \n}", "category": "Python"}, {"instruction": "Construct a SQL query to add a new row to a column in a table", "input": "Table Name: \"customers\"\nColumn Name: \"name\"\nNew row: \"John Doe\"", "output": "INSERT INTO customers (name) VALUES ('John Doe');", "category": "Python"}, {"instruction": "Name five different Python libraries used for visualization.", "input": "", "output": "Matplotlib, Seaborn, Bokeh, Plotly, and Altair.", "category": "Python"}, {"instruction": "How would you cast a float to an integer in C++?", "input": "", "output": "You can cast a float to an integer in C++ using the (int) operator.", "category": "Python"}, {"instruction": "Create an object method to calculate the area of a triangle in Python.", "input": "", "output": "def calculate_area(self):\n  return (self.base * self.height) / 2", "category": "Python"}, {"instruction": "What data type would you use to store the title of a book?", "input": "", "output": "You would use a String data type to store the title of a book.", "category": "Python"}, {"instruction": "Create a linked list to store the values ```[10, 20, 30]```.", "input": "", "output": "class Node:\n def __init__(self, data):\n   self.data = data\n   self.next = None\n\nclass LinkedList:\n def __init__(self):\n   self.head = None\n\nlist = [10, 20, 30]\nllist = LinkedList()\nllist.head = Node(list[0])\n \ntemp = llist.head\n \nfor i in range(1, len(list)):\n temp.next = Node(list[i])\n temp = temp.next", "category": "Python"}, {"instruction": "Sort the list ```[5, 3, 1, 4, 2]``` numerically.", "input": "", "output": "The sorted list is [1, 2, 3, 4, 5].", "category": "Python"}, {"instruction": "How would you print \"Goodbye\" ten times in Python?", "input": "", "output": "for i in range(10):\n print(\"Goodbye\")", "category": "Python"}, {"instruction": "Compute the sum of the integers in the given array.", "input": "Integers in the array: [1, 2, 3, 4, 5]", "output": "The sum of the integers in the array is 15.", "category": "Python"}, {"instruction": "Edit the following code to make the loop run for 10 iterations.", "input": "for (int i = 0; i < 5; i++) {\n   System.out.println(i); \n }", "output": "for (int i = 0; i < 10; i++) {\n  System.out.println(i); \n}", "category": "Python"}, {"instruction": "Define a function to check whether string a is an anagram of string b.", "input": "\"silent\" \n\"listen\"", "output": "def is_anagram(a, b):\n    a = a.lower()\n    b = b.lower()\n\n    if len(a) != len(b):\n        return False\n    \n    for char in a:\n        if char not in b:\n            return False\n        b = b.replace(char, '', 1)\n    \n    return True\n\nprint(is_anagram(\"silent\", \"listen\")) # Output: True", "category": "Python"}, {"instruction": "What is the purpose of Java virtual machine?", "input": "", "output": "The purpose of the Java virtual machine (JVM) is to provide a runtime environment for Java applications, in which programs are able to run independently of the underlying operating system. It is responsible for providing a secure and portable environment for the Java program's execution, as well as for providing several useful features, such as garbage collection and memory management. Additionally, it is also capable of providing platform independence, as it is capable of running bytecode on any platform, regardless of the underlying operating system and hardware.", "category": "Python"}, {"instruction": "Replace the \"TODO\" comment in the given code with appropriate code.", "input": "if <condition>:\n    # TODO", "output": "if <condition>:\n    print(\"Condition is satisfied\")", "category": "Python"}, {"instruction": "Create an array named ``students`` which contains the elements ``John``, ``Jane``, ``Emily``, and ``Michael``.", "input": "", "output": "const students = ['John', 'Jane', 'Emily', 'Michael'];", "category": "Python"}, {"instruction": "Create a quicksort alogorithm in the following language", "input": "Java", "output": "import java.util.ArrayList;\n\npublic class Qsort {\n    public static int partition(ArrayList<Integer> array, int low, int high) {\n        int pivot = array.get(high);\n        int i = low-1; \n        for (int j=low; j<high; j++) {\n            if (array.get(j) < pivot) {\n                i++;\n                int temp = array.get(i);\n                array.set(i, array.get(j));\n                array.set(j, temp);\n            }\n        }\n        int temp = array.get(i+1);\n        array.set(i+1, array.get(high));\n        array.set(high, temp);\n\n        return i+1;\n    }\n\n    public static void quicksort(ArrayList<Integer> array, int low, int high) {\n        if (low < high) {\n            int pivot_position = partition(array, low, high);\n            quicksort(array, low, pivot_position-1);\n            quicksort(array, pivot_position+1, high);\n        }\n    }\n}", "category": "Python"}, {"instruction": "Reverse the words of the following sentence.", "input": "This is a sentence", "output": "sentence a is This", "category": "Python"}, {"instruction": "Suggeste a completion of the following code:", "input": "def flatten(nested_list):", "output": "def flatten(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten(item))\n        else:\n            flat_list.append(item)\n    return flat_list", "category": "Python"}, {"instruction": "What should this function take as input and return?", "input": "def find_longest_word(words):", "output": "def find_longest_word(words):\n    '''This function takes a list of words as input and returns a string containing the longest word'''\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word", "category": "Python"}, {"instruction": "Extract the city name from the following URL.", "input": "https://www.example.com/los_angeles", "output": "url = 'https://www.example.com/los_angeles'\ncity = url.split('/')[-1] # returns 'los_angeles'", "category": "Python"}, {"instruction": "What should the following code print out?", "input": "def f(n):\n    if n == 0:\n        return 0\n    else:\n        return n + f(n-1)\n\nprint(f(5))", "output": "def f(n):\n    if n == 0:\n        return 0\n    else:\n        return n + f(n-1)\n\nprint(f(5)) # prints 15", "category": "Python"}, {"instruction": "What should the following function return?", "input": "def calculate_sd(numbers):", "output": "def calculate_sd(numbers):\n    mean = sum(numbers) / len(numbers)\n    variance = sum((x - mean) ** 2 for x in numbers) / len(numbers)\n    sd = variance ** 0.5\n    return sd", "category": "Python"}, {"instruction": "Edit this regression model to predict continuous values.", "input": "import numpy as np\n\ndef model(x):\n    return np.mean(x)", "output": "import numpy as np\n\ndef model(x):\n    return np.mean(x) + np.poly1d(np.polyfit(x, y, 2))(x)", "category": "Python"}, {"instruction": "Assign a random value to each item in a given list.", "input": "my_list = [1, 2, 3]", "output": "import random\n\ndef assign_random_value(my_list):\n    \"\"\"Assign a random value to each item in a given list.\"\"\"\n    # iterate through each item in the list\n    for i in range(len(my_list)):\n        # generate a random integer between 0 and 1\n        random_int = random.randint(0, 1)\n        # assign the random integer to the current item in the list\n        my_list[i] = random_int\n    return my_list", "category": "Python"}, {"instruction": "Calculate the maximum value in a dictionary.", "input": "d = {'a': 1, 'b': 3, 'c': 5}", "output": "def get_max_value(d):\n    \"\"\"Calculate the maximum value in a dictionary.\"\"\"\n    max_value = 0\n    for key in d:\n        if d[key] > max_value:\n            max_value = d[key]\n    return max_value", "category": "Python"}, {"instruction": "Create a function to convert a character to its ASCII code.", "input": "character = 'a'", "output": "def char_to_ascii(character):\n    \"\"\"Convert a character to its ASCII code.\"\"\"\n    ascii_code = ord(character)\n    return ascii_code", "category": "Python"}, {"instruction": "Write code to determine if a word is a palindrome or not.", "input": "word = \"noon\"", "output": "def palindrome_check(word):\n    \"\"\"Check if a given word is a palindrome.\"\"\"\n    # reverse the given word\n    reversed_word = word[::-1]\n    if word == reversed_word:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Compare two strings and return true if both strings have the same number of characters.", "input": "string1 = \"hello\"\nstring2 = \"world\"", "output": "def compare_strings(string1, string2):\n    \"\"\"Compare two strings and return True if both strings have the same number of characters.\"\"\"\n    if len(string1) == len(string2):\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Generate a dictionary with the name of the person as key and the cower letter of their name as value.", "input": "names = ['John', 'Max', 'Alice']", "output": "result = {} \nfor name in names: \n    # get the first letter from the name \n    first_letter = name[0] \n    result[name] = first_letter \n\nprint(result) \n# {'John': 'J', 'Max': 'M', 'Alice': 'A'}", "category": "Python"}, {"instruction": "Write a JavaScript code to calculate the remainder when the variable ``num`` is divided by ``5``.", "input": "let num = 10;", "output": "let remainder = num % 5; // remainder is equal to 0", "category": "Python"}, {"instruction": "Make a function in javascript that takes two parameters ``name1`` and ``name2`` and returns both of the names together with a dash between them.", "input": "let name1 = 'John', name2 = 'Smith';", "output": "function combineNames(name1, name2) {\n  return name1 + '-' + name2;\n}", "category": "Python"}, {"instruction": "Write a SQL query to group all actors by the country they are from.", "input": "", "output": "SELECT country, array_agg(actor)\nFROM actors\nGROUP BY country;", "category": "Python"}, {"instruction": "Define a python function called ``string_length`` that can take a string as an argument and output the length of that string.", "input": "", "output": "def string_length(str):\n  return len(str)", "category": "Python"}, {"instruction": "Construct a loop that iterates over the characters of a given string and prints each character in uppercase.", "input": "string = \"Hello World!\"", "output": "for ch in string:\n    print(ch.upper())", "category": "Python"}, {"instruction": "Edit the following code to update an existing item in a MongoDB database with the name \u201cJohn\u201d.", "input": "db.collection(\"users\").findOne({ name: \"John\" });", "output": "db.collection(\"users\").updateOne(\n  { name: \"John\" },\n  {\n    $set: {\n      name: \"John\",\n      age: 32\n    }\n  }\n);", "category": "Python"}, {"instruction": "Classify the following news article into one of the 8 major topics: \"Politics\", \"Economy\", \"Tech\", \"Science\", \"Culture\", \"Education\", \"Sports\" or \"Lifestyle\".", "input": "A new study by scientists from the University of California has found a link between diet and depression.", "output": "Science", "category": "Python"}, {"instruction": "Using CSS, style the following HTML code to center align the text.", "input": "<p>This is a text.</p>", "output": "<style> \n    p{ \n        text-align: center; \n    } \n</style> \n<p>This is a text.</p>", "category": "Python"}, {"instruction": "Answer the following question: What is the purpose of software testing?", "input": "", "output": "Software testing is the process of evaluating a software product in order to identify any potential issues and ensure that the end product meets the user's requirements. It is an essential part of the software development process, as it provides feedback about the product's quality and performance. Testing also helps ensure that a product is safe and secure, as it can detect potential problems and errors before the product is released.", "category": "Python"}, {"instruction": "Edit the following HTML code to enable a toggle to show and hide a DIV element when a button is clicked.", "input": "<div>\n  <button>Toggle</button>\n  <p>This is a text paragraph.</p>\n</div>", "output": "<div>\n  <button onclick=\"toggleFunction()\">Toggle</button>\n  <p>This is a text paragraph.</p>\n  <div id=\"myDIV\" style=\"display:none;\">\n    <p>This is the toggleable content.</p>\n  </div>\n  <script>\n    function toggleFunction() {\n      let x = document.getElementById(\"myDIV\");\n      if (x.style.display === \"none\") {\n        x.style.display = \"block\";\n      } else {\n        x.style.display = \"none\";\n      }\n    }\n  </script>\n</div>", "category": "Python"}, {"instruction": "Analyze the following code and determine if there any potential errors.", "input": "def foo(X, Y):\n    for i in range(1, X):\n        for j in range(1, Y):\n            print i\n    return", "output": "Yes, there is a potential error. The outer loop iterates over the range of 1 to X, but the inner loop iterates over the range of 1 to Y. Because of this, the loop will only be executed Y-1 times. The output will only print the first Y-1 elements of X. To fix this, the outer loop should iterate over the range of 1 to Y instead.", "category": "Python"}, {"instruction": "Create a algorithm to calculate the fibonacci number of nth term.", "input": "", "output": "def fib(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2,n):\n            c = a + b\n            a = b\n            b = c\n        return b", "category": "Python"}, {"instruction": "Given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digits. Add the two numbers and return the sum as a linked list.", "input": "", "output": "class Solution:\n    def addTwoNumbers(self, l1, l2):\n        # Initialize current, previous and \n        # next pointers \n        curr1 = l1\n        curr2 = l2\n        head = None\n        prev = None\n        \n        carry = 0\n        while curr1 != None or curr2 != None or carry != 0:\n            val1 = 0\n            if curr1 != None:\n                val1 = curr1.val\n                curr1 = curr1.next\n            \n            val2 = 0\n            if curr2 != None:\n                val2 = curr2.val\n                curr2 = curr2.next\n                \n            val = val1 + val2 + carry\n            carry = val // 10\n            temp = ListNode(val%10)\n\n            if prev == None:\n                head = temp\n            else:\n                prev.next = temp\n            \n            prev = temp\n\n        return head", "category": "Python"}, {"instruction": "How would you solve the FizzBuzz problem in C#?", "input": "", "output": "for (int i = 1; i <= 100; i++)\n{\n    if (i % 15 == 0)\n        Console.WriteLine(\"FizzBuzz\");\n    else if (i % 3 == 0)\n        Console.WriteLine(\"Fizz\");\n    else if (i % 5 == 0)\n        Console.WriteLine(\"Buzz\");\n    else\n        Console.WriteLine(i);\n}", "category": "Python"}, {"instruction": "You are given a 2-D array named \"matrix\" and its size is MxN. Print the matrix in a spiral form.", "input": "int matrix[][] = {{1, 2, 3},\n                  {4, 5, 6},\n                  {7, 8, 9}}", "output": "1 2 3 6 9 8 7 4 5", "category": "Python"}, {"instruction": "If a singly linked list is represented only by its head pointer, how would you reverse it?", "input": "", "output": "public static ListNode reverseList(ListNode head) { \n  \n    // Initialize current, previous and \n    // next pointers \n    ListNode current = head; \n    ListNode prev = null; \n    ListNode next = null; \n  \n    while (current != null) { \n        // Store next \n        next = current.next; \n\n        // Reverse current node's pointer \n        current.next = prev; \n  \n        // Move pointers one position ahead. \n        prev = current; \n        current = next; \n    } \n    head = prev; \n    return head; \n}", "category": "Python"}, {"instruction": "Using a Node.js code, create an HTTP request to get the response status code of a given URL.", "input": "let url = 'http://example.com';", "output": "const http = require('http');\n\nhttp.get(url, (response) => {\n  console.log('status code:', response.statusCode);\n});", "category": "Python"}, {"instruction": "Write a C++ code to find the sum of all numbers in a vector.", "input": "std::vector<int> numbers = {2, 3, 4, 5};", "output": "#include <iostream>\n#include <vector>\n\nint main() {\n  std::vector<int> numbers = {2, 3, 4, 5};\n  int sum = 0;\n  \n  for (int i = 0; i < numbers.size(); i++) {\n    sum += numbers[i];\n  }\n  \n  std::cout << \"Sum: \" << sum << std::endl;\n  \n  return 0;\n}", "category": "Python"}, {"instruction": "Find an element in a JavaScript array called ``names`` using the index position 3.", "input": "let names = ['John', 'Jane', 'Emily', 'Michael', 'David'];", "output": "let element = names[3]; // element is equal to 'Michael'", "category": "Python"}, {"instruction": "Create an if/else statement in JavaScript that checks if a variable ``age`` is greater than 18 and prints \"Adult\" if it is, and \"Minor\" if it isn't.", "input": "let age = 22;", "output": "if (age > 18) {\n  console.log('Adult');\n} else {\n  console.log('Minor');\n}", "category": "Python"}, {"instruction": "You are given a string \"hello\". Write a function to print out all the possible subsets of that string.", "input": "", "output": "def generate_subsets(string):\n    if len(string) == 0:\n        return ['']\n    else:\n        results = list()\n        for s in generate_subsets(string[1:]):\n            results.append(s)\n            results.append(string[0] + s)\n        return results\n\nprint(generate_subsets('hello'))", "category": "Python"}, {"instruction": "Compare two strings and count the number of characters that are different.", "input": "str1 = 'hello'\nstr2 = 'hallo'", "output": "def countTextDifference(str1, str2):  \n    # store length of both strings  \n    len1 = len(str1)   \n    len2 = len(str2)   \n  \n    # store the number of characters  \n    # which are different  \n    count = 0 \n  \n    # compare and count the number  \n    # of characters which are different \n    for i in range(0, len1):      \n        if (i >= len2): \n            count += (len1 - len2) \n            break\n        if (str1[i] == str2[i]):  \n            continue\n        else:      \n            count += 1\n    \n    # return different character count \n    return count", "category": "Python"}, {"instruction": "Write a code for linear search algorithm.", "input": "[4, 5, 2, 3]\n2", "output": "def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    \n    return None\n\nprint(linear_search([4, 5, 2, 3], 2)) # Output: 2", "category": "Python"}, {"instruction": "You need to clean a given string by removing all the special characters.", "input": "let str = 'Hello.., World!';", "output": "function removeSpecialChars(str) {\n    let regex = /[^a-zA-Z0-9]/g;\n    let cleanString = str.replace(regex, '');\n    return cleanString;\n}\n\nlet result = removeSpecialChars(str);\nconsole.log(result); // HelloWorld", "category": "Python"}, {"instruction": "You need to search for a specific character within a string and return its index.", "input": "let str = 'hello world!';\nlet char = 'r';", "output": "function getIndexOfChar(str, char) {\n    let index = str.indexOf(char);\n    return index;\n}\n\nlet result = getIndexOfChar(str, char);\nconsole.log(result); // 10", "category": "Python"}, {"instruction": "Modify the function to return the least common multiple instead.", "input": "", "output": "def lcm(a, b): \n    return (a*b) // gcd(a, b)", "category": "Python"}, {"instruction": "How do you estimate the complexity of selection sort algorithm?", "input": "", "output": "The complexity of selection sort is O(n^2) in the worst case, O(n) in the best case, and O(n^2) on average. Selection sort is not a very efficient sorting algorithm compared to other algorithms like quicksort and merge sort.", "category": "Python"}, {"instruction": "What is bitwise AND operation?", "input": "", "output": "A bitwise AND operation is a binary operation that takes two equal-length binary representations and performs the logical AND operation on each pair of corresponding bits. The result in each position is 1 only if both bits are 1; otherwise, the result is 0.", "category": "Python"}, {"instruction": "Create a neural network class in Python using NumPy.", "input": "", "output": "import numpy as np\n\nclass NeuralNetwork():\n    \n    def __init__(self):\n        np.random.seed(1)\n\n        self.weights = 2 * np.random.random((3,1)) - 1\n\n    def sigmoid(self, x):\n        return 1 / (1 + np.exp(-x))\n\n    def sigmoid_derivative(self, x):\n        return x * (1 - x)\n\n    def train(self, training_inputs, training_outputs, training_iterations):\n        for iteration in range(training_iterations):\n            output = self.think(training_inputs)\n            error = training_outputs - output\n            adjustments = np.dot(training_inputs.T, error * self.sigmoid_derivative(output))\n            self.weights += adjustments\n\n    def think(self, inputs):\n        inputs = inputs.astype(float)\n        output = self.sigmoid(np.dot(inputs, self.weights))\n        return output", "category": "Python"}, {"instruction": "Merge two sorted lists of integers using Python.", "input": "list_1 = [2, 5, 9]\nlist_2 = [1, 4, 6, 7]", "output": "def merge_lists(list_1, list_2):\n    merged_list = []\n    l1, l2 = 0, 0\n\n    while l1 < len(list_1) and l2 < len(list_2):\n        if list_1[l1] <= list_2[l2]:\n            merged_list.append(list_1[l1])\n            l1 += 1\n        else:\n            merged_list.append(list_2[l2])\n            l2 += 1\n\n    merged_list += list_1[l1:]\n    merged_list += list_2[l2:]\n\n    return merged_list", "category": "Python"}, {"instruction": "Build a function in Python for selecting all rows from a Pandas DataFrame where a column value is equal to a given value.", "input": "df = pd.DataFrame({'A':[1, 2, 3, 4, 5],\n                   'B':[2, 3, 4, 5, 6],\n                   'C':[3, 4, 5, 6, 7],\n                   'D':[4, 5, 6, 7, 8]})\ncol_1 = 'A' \nvalue = 3", "output": "def select_rows(df, col_1, value): \n    return df[df[col_1] == value]", "category": "Python"}, {"instruction": "Create a new branch in Git with the name \"feature-X\" and switch to it.", "input": "", "output": "git branch feature-X\ngit checkout feature-X", "category": "Python"}, {"instruction": "Modify the function to include a message about the length of the string.", "input": "message = \"The length of the string is:\"", "output": "def find_length(string):\n\tcount = 0\n\tfor char in string:\n\t\tcount += 1\n\tprint(message, count)\n\treturn count", "category": "Python"}, {"instruction": "Compute the sum of two matrices of size m x n.", "input": "A = [[1, 2], \n     [4, 5]]\nB = [[3, 6], \n     [7, 8]]", "output": "def matrix_sum(A, B): \n    m = len(A) \n    n = len(A[0]) \n    C = [[0 for i in range(n)] for j in range(m)] \n    for i in range(m):\n        for j in range(n):\n            C[i][j] = A[i][j] + B[i][j]\n    return C\n\nA = [[1, 2], \n     [4, 5]]\nB = [[3, 6], \n     [7, 8]]\n\nres = matrix_sum(A, B)\nprint(res)", "category": "Python"}, {"instruction": "How would you sum up the elements in an array represented by an integer array?", "input": "arr = [10, 15, 25, 20]", "output": "total = 0\nfor i in arr:\n    total += i\nprint(total)", "category": "Python"}, {"instruction": "Create a Node class with two properties: 'data' and 'next'.", "input": "", "output": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None", "category": "Python"}, {"instruction": "Write a function to get the length of a given string without using any built-in function.", "input": "text = \"Hello world!\"", "output": "def get_length(text):\n    counter = 0\n    for i in text:\n        counter += 1\n    return counter\n\nres = get_length(text)\nprint(res)", "category": "Python"}, {"instruction": "Find the runtime complexity of this Python program.", "input": "def EvenOrOdd(items):\n    if len(items) == 0:\n        return 0\n\n    even_count = 0\n    for item in items:\n        if item % 2 == 0:\n            even_count += 1\n\n    return even_count", "output": "This program has a runtime complexity of O(n), where n is the number of items in the list. This is because the time taken to complete the program increases linearly with the number of items in the list.", "category": "Python"}, {"instruction": "Write a code that takes a list of numbers, and outputs the 10th largest value.", "input": "mylist = [2, 4, 54, 31, 34, 77, 29, 11, 44, 78, 65, 23]", "output": "def find_10th_largest(input_list):\n    sorted_list = sorted(input_list)\n    return sorted_list[-10]\n\nif __name__ == '__main__':\n    mylist = [2, 4, 54, 31, 34, 77, 29, 11, 44, 78, 65, 23]\n    print(find_10th_largest(mylist))", "category": "Python"}, {"instruction": "Create a class called Player that has a member called name.", "input": "", "output": "class Player:\n    def __init__(self, name):\n        self.name = name", "category": "Python"}, {"instruction": "What is the value of \"arr\" after executing this code", "input": "arr = [1, 2, 3]\narr = arr.append(4)", "output": "None, since the append() method returns None and not a list. The updated value of the list is [1, 2, 3, 4].", "category": "Python"}, {"instruction": "Using the comment as a guide, write the proper code to calculate the sum of the values in an array", "input": "arr = [1, 2, 3, 4, 5]\n# TODO: write code to calculate the sum of the values in arr", "output": "def calculate_sum(arr):\n    sum = 0\n    for x in arr:\n        sum += x\n    return sum\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    print(calculate_sum(arr))", "category": "Python"}, {"instruction": "Describe the purpose of an iterator class in Java.", "input": "", "output": "An iterator class in Java is used to traverse through a collection to access its elements. It allows for the convenient looping and retrieval of elements from the collection in an orderly fashion.", "category": "Python"}, {"instruction": "Create an HTML page with a title and a heading.", "input": "", "output": "<html>\n  <head>\n    <title>My Page</title>\n  </head>\n  <body>\n    <h1>My Page</h1>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Add a class \"MyClass\" to the given Java code and then create two objects for that class.", "input": "public class Demo {\n   public static void main(String[] args) {\n   }\n}", "output": "public class Demo {\n   public static void main(String[] args) {\n      MyClass m1 = new MyClass();\n      MyClass m2 = new MyClass();\n   }\n}\n\nclass MyClass {\n  \n}", "category": "Python"}, {"instruction": "Create a function to calculate the total cost of the items in a cart.", "input": "items = [{\"item\":\"apple\", \"cost\":3.00}, {\"item\":\"orange\", \"cost\":2.50}]", "output": "def total_cost(items):\n    total = 0\n    for item in items:\n        total += item['cost']\n    return total", "category": "Python"}, {"instruction": "Generate a code to evaluate a expression of the form a * (b + c).", "input": "a = 10\nb = 5\nc = 6", "output": "def evaluate_expression(a, b, c):\n    return a * (b + c)", "category": "Python"}, {"instruction": "Rewrite the following code snippet without using any loops.", "input": "for i in range(10):\n    print(i)", "output": "[print(i) for i in range(10)]", "category": "Python"}, {"instruction": "Write a code to show the rating of a movie based on the review comments", "input": "rev_comments = [\"Great movie!\", \"The movie was average.\", \"Didn't enjoy it that much\"]", "output": "def rating(reviews):\n    score = 0\n    \n    positive = [\"great\", \"amazing\", \"funny\", \"entertaining\"]\n    negative = [\"bad\", \"mediocre\", \"average\", \"boring\"]\n    \n    for comment in reviews:\n        for word in positive:\n            if word in comment.lower():\n                score += 1\n        for word in negative:\n            if word in comment.lower():\n                score -= 1\n    \n    return score / len(reviews)", "category": "Python"}, {"instruction": "Debug this Java code and explain what was wrong.", "input": "public static int add(int a, int b){\n  int c = a b;\n  return c;\n}", "output": "The code contained a syntax error. In the second line of the code, the operator being used was \"b\" instead of \"+\". The correct line should be \"int c = a + b;\". This error was causing the program to return the wrong value, as it was attempting to perform the wrong calculation.", "category": "Python"}, {"instruction": "Prepare a code to select all rows that have more than one occurrence of the same value in a given column.", "input": "column = \"color\"\ndata = {\n \"color\": [\"red\", \"blue\", \"red\", \"yellow\", \"blue\"] \n}", "output": "def duplicate_rows(column, data):\n    duplicates = []\n    for row in data:\n        if data[column].count(row[column]) > 1:\n            duplicates.append(row)\n    return duplicates", "category": "Python"}, {"instruction": "Veriyif if a given string is a valid email address.", "input": "email = \"email@example.com\"", "output": "import re\n\ndef is_valid_email(email):\n    regex = r\"^[a-zA-Z0-9.!#$%&amp;'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$\"\n    return re.match(regex, email)", "category": "Python"}, {"instruction": "Given a string, write a regular expression to extract the last three words of the string.", "input": "text = \"My name is Bill Gates\"", "output": "reg = r\"(\\w+(\\s\\w+){2}$)\"", "category": "Python"}, {"instruction": "Given a list of numbers and a number k, return whether any two numbers from the list add up to k.", "input": "nums = [10, 15, 3, 7]\nk = 17", "output": "def two_sum(nums, k):\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == k:\n                return True\n    return False", "category": "Python"}, {"instruction": "Using the comment as a guide, replace the placeholder with the proper code to remove all duplicates from a list.", "input": "mylist = [1, 2, 3, 2, 4, 2]\n# TODO: write code to remove all duplicates from mylist", "output": "def remove_duplicates(mylist):\n    mylist = list(dict.fromkeys(mylist))\n    return mylist\n\nif __name__ == '__main__':\n    mylist = [1, 2, 3, 2, 4, 2]\n    print(remove_duplicates(mylist))", "category": "Python"}, {"instruction": "Write a function that takes an array and returns the number of elements that are even.", "input": "arr = [1, 5, 7, 4, 9, 17]", "output": "def count_even_elements(arr):\n    even_count = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n    return even_count\n\nif __name__ == '__main__':\n    arr = [1, 5, 7, 4, 9, 17]\n    print(count_even_elements(arr))", "category": "Python"}, {"instruction": "What is the best way to check if a given input is an integer?", "input": "", "output": "The best way to check if a given input is an integer is to use the isinstance() function. For example, to check if a variable x is an integer, you can run the following code: \n\nisinstance(x, int)", "category": "Python"}, {"instruction": "Create a function that takes two integers, A and B, and returns the largest common divisor between A and B.", "input": "", "output": "def get_largest_common_divisor(a, b):\n    while a != 0 and b != 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return a + b\n\nif __name__ == '__main__':\n    print(get_largest_common_divisor(15, 9))", "category": "Python"}, {"instruction": "Srot the strings in ascening order.", "input": "items = [\"Red\", \"Blue\", \"Yellow\", \"Green\"]", "output": "sorted_items = sorted(items) # sorted_items = [\"Blue\", \"Green\", \"Red\", \"Yellow\"]", "category": "Python"}, {"instruction": "Compare two Python lists having integers and write a function to output the differences", "input": "list_a = [1, 2, 3]\nlist_b = [2, 3, 4]", "output": "def get_diff(list_a, list_b):\n  diff = list_a\n  for i in list_b:\n    if i in list_a:\n      diff.remove(i)   \n  return diff", "category": "Python"}, {"instruction": "Explain what happens when executing this C++ for loop.", "input": "for(int i=0;i<10;i++){\n    cout << i << endl;\n}", "output": "This for loop will execute the code within it 10 times. On each iteration of the loop, the variable i will be incremented by 1. The starting value of variable i will be 0, then the loop condition will check if the variable i is less than 10. If the condition is true, the code in the loop will execute and the variable i will be incremented by 1. This process will repeat until the variable i is no longer less than 10, at which point the loop will stop executing. Within the loop, the current value of i will be printed using the cout statement.", "category": "Python"}, {"instruction": "Identify the data structure used in the given implementation.\n\nclass Node:\n   def __init__(self, value):\n      self.value = value\n      self.next = None", "input": "", "output": "The given implementation is of a Linked List data structure. Linked Lists are a type of linear data structure which consists of nodes, with each node pointing to the next node in the list.", "category": "Python"}, {"instruction": "Find the average of five numbers.", "input": "11, 15, 20, 7, 19", "output": "def avg(nums):\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum/len(nums)", "category": "Python"}, {"instruction": "Create an Angular service to authenticate a user using an API endpoint.", "input": "", "output": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n providedIn: 'root'\n})\nexport class AuthService {\n \n constructor(private http: HttpClient) { }\n\n authenticateUser(username: string, password: string) {\n  const body = { username: username, password: password };\n \n  return this.http.post('/api/auth', body);\n }\n}", "category": "Python"}, {"instruction": "Edit the following React component to make the text input to accept only number values.", "input": "<input type=\"text\" value={value} onChange={handleChange} />", "output": "<input type=\"number\" value={value} onChange={handleChange} />", "category": "Python"}, {"instruction": "Write an R script to find correlation between two columns in a given Data Frame.", "input": "", "output": "# Load the data\ndf = read.csv(\"data.csv\")\n\n# Find the correlation\ncorrelation = cor(df$column1, df$column2)\nprint(correlation)", "category": "Python"}, {"instruction": "How could you read a specific compression format such as .zip in Python?", "input": "", "output": "Python has a built-in zipfile module which provides support for reading and writing zip archives in native Python code. The module provides a ZipFile object with methods to read and extract contents of the archive, as well as a class representing individual entries such as files and directories.\n\nFor example, to extract an archive using the ZipFile object, you can do the following:\n\nimport zipfile\n\nwith zipfile.ZipFile(\"path/to/archive.zip\", \"r\") as zf:\n zf.extractall(\"path/to/destination/directory\")", "category": "Python"}, {"instruction": "Write a SQL query to select the latest registration record for each user.", "input": "", "output": "SELECT * \nFROM registrations \nWHERE registration_date IN \n    (SELECT MAX(registration_date) \n     FROM registrations \n     GROUP BY user_id);", "category": "Python"}, {"instruction": "For the following HTML code, how could you style the `nav` element to make it scrollable?", "input": "<nav>\n   <a href=\"#\">Link 1</a>\n   <a href=\"#\">Link 2</a>\n   <a href=\"#\">Link 3</a>\n   <a href=\"#\">Link 4</a>\n</nav>", "output": "<nav style=\"overflow-y: scroll; max-height: 200px;\">\n   <a href=\"#\">Link 1</a>\n   <a href=\"#\">Link 2</a>\n   <a href=\"#\">Link 3</a>\n   <a href=\"#\">Link 4</a>\n</nav>", "category": "Python"}, {"instruction": "Design a NodeJS script to call a remote API and convert the response to a csv object.", "input": "", "output": "const fetch = require('node-fetch');\nconst csv = require('csvtojson');\n\nasync function callAPIAndConverttoCSV(url) {\n try {\n  const response = await fetch(url);\n  const jsonData = await response.json();\n  const csvData = await csv().fromString(jsonData);\n  return csvData;\n } catch (err) {\n  throw err;\n }\n}", "category": "Python"}, {"instruction": "Develop a Python script to sum up all the individual digits of a given number", "input": "354", "output": "def sum_digits(input_number):\n \n    sum_of_digits = 0\n    while input_number > 0:\n        last_digit = input_number % 10\n        sum_of_digits += last_digit\n        input_number //= 10\n \n    return sum_of_digits\n \nsum_digits(354)", "category": "Python"}, {"instruction": "Create a robust Helper Function in PHP that returns an array containing the N most frequent words in a string", "input": "Input String: \"The quick brown fox jumps over the lazy dog\"\nN: 3", "output": "function get_freq_words($str, $n) {\n   $arr = explode(\" \", $str);\n   $freq = array_count_values($arr);\n   arsort($freq); \n   return array_slice(array_keys($freq), 0, $n); \n}", "category": "Python"}, {"instruction": "Develop a HTML5 program to display a box with the text\n\"Hello World!\"", "input": "", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello World!</title>\n  </head>\n  <body>\n    <div class=\"box\">Hello World!</div>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Compose an SQL query to identify which employees were born after January 1, 1984.", "input": "", "output": "SELECT * FROM employees WHERE date_of_birth > '1984-01-01';", "category": "Python"}, {"instruction": "Design a data structure that can efficiently store the capitals of different countries and their respective populations.", "input": "", "output": "class CountryCapitalPopulation{\n    HashMap<String, Integer> countryCapPop;\n    \n    public CountryCapitalPopulation(){\n        countryCapPop = new HashMap<String, Integer>();\n    }\n    \n    public void addCountryCapitalPopulation(String country, String capital, int population){\n        countryCapPop.put(country+capital, population);\n    }\n    \n    public int getPopulation(String country, String capital){\n        return countryCapPop.get(country+capital);\n    }\n}", "category": "Python"}, {"instruction": "Find all the possible moves of a knight in a chessboard", "input": "", "output": "def knight_moves(x, y): \n    result = [] \n    # Move 1 on x-axis, 2 on the y-axis \n    result.append((x + 1, y + 2)) \n    # Move 2 on x-axis, 1 on the y-axis\n    result.append((x + 2, y + 1))\n  \n    # Move 1 on x-axis, -2 on the y-axis \n    result.append((x + 1, y - 2)) \n    # Move -2 on x-axis, 1 on the y-axis \n    result.append((x - 2, y + 1))\n  \n    # Move -1 on x-axis, 2 on the y-axis \n    result.append((x - 1, y + 2)) \n    # Move 2 on x-axis, -1 on the y-axis \n    result.append((x + 2, y - 1))\n  \n    # Move -1 on x-axis, -2 on the y-axis \n    result.append((x - 1, y - 2)) \n    # Move -2 on x-axis, -1 on the y-axis\n    result.append((x - 2, y - 1)) \n\n    return result", "category": "Python"}, {"instruction": "Write a Python code to convert a binary tree to its mirror tree", "input": "", "output": "def mirror_tree(root): \n    if root is None: \n        return\n  \n    # Do the postorder traversal to traverse down to leaf nodes \n    mirror_tree(root.left) \n    mirror_tree(root.right) \n  \n    # Swap the pointers in this node \n    root.left, root.right = root.right, root.left", "category": "Python"}, {"instruction": "Given a list of strings, reverse the order of each string in the list.", "input": "[\"hello\", \"world\", \"this\", \"is\", \"amazing\"]", "output": "def reverse_words(words):\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return reversed_words", "category": "Python"}, {"instruction": "Generate a random 10 character password with at least one uppercase letter and one number.", "input": "", "output": "import random\n\ndef generate_password():\n    uppercase_characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    numbers = '0123456789'\n    password = ''\n\n    for i in range(5):\n        password += random.choice(uppercase_characters)\n        password += random.choice(numbers)\n\n    password += random.choice(list(set(uppercase_characters + numbers)))\n\n    return password\n\nif __name__ == '__main__':\n    print(generate_password())", "category": "Python"}, {"instruction": "Return the \"name\" field of the JSON object given below.", "input": "{\n\t\"name\": \"John Doe\",\n\t\"age\": 28,\n\t\"country\": \"United States\"\n}", "output": "import json\n\ninput_json = {\n        \"name\": \"John Doe\",\n        \"age\": 28,\n        \"country\": \"United States\"\n}\n\ndef get_name(json):\n    json_dict = json.loads(json)\n    name = json_dict['name']\n    return name\n\nif __name__ == '__main__':\n    print(get_name(input_json))", "category": "Python"}, {"instruction": "Create a database schema for a books table with id, name, author, and date fields.", "input": "", "output": "CREATE TABLE books (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        name VARCHAR(255),\n        author VARCHAR(255),\n        date DATE\n);", "category": "Python"}, {"instruction": "Write a code snippet to display the Fibonacci sequence up to 50 numbers.", "input": "", "output": "def Fibonacci(n): \n\ta = 0\n\tb = 1\n\tif n < 0: \n\t\tprint(\"Incorrect input\") \n\telif n == 0: \n\t\treturn a \n\telif n == 1: \n\t\treturn b \n\telse: \n\t\tfor i in range(2,n): \n\t\t\tc = a + b \n\t\t\ta = b \n\t\t\tb = c \n\t\treturn b \n  \n# Driver Code \nprint(\"Fibonacci Sequence:\")\nfor i in range(50):\n\tprint(Fibonacci(i), end = ' ')", "category": "Python"}, {"instruction": "Edit the below program to print the square of numbers from 0 to 10.\n\ndef printSquare():\n  for i in range(10):\n    print(i)", "input": "", "output": "def printSquare():\n  for i in range(10):\n    print(i**2)", "category": "Python"}, {"instruction": "What is the Big O notation of the algorithm below?\n\ndef myfunc(n):\n  total = 0\n  for i in range(n):\n    for j in range(n):\n      total += 1\n  return total", "input": "", "output": "The Big O notation for the algorithm is O(n^2). This indicates that the time complexity is proportional to the square of n.", "category": "Python"}, {"instruction": "What type of sorting algorithm does the following Python code implement?\n\ndef sort(nums):\n  for i in range(len(nums)):\n    for j in range(i+1, len(nums)):\n      if nums[j] < nums[i]:\n        nums[j], nums[i] = nums[i], nums[j]", "input": "", "output": "The code implements Bubble Sort, which is a type of comparison sorting algorithm. It works by repeatedly swapping adjacent elements if they are in the wrong order.", "category": "Python"}, {"instruction": "Identify the loop control statement used in the below program\n\nfor (i = 0; i < 10; i++) {\n    printf(\"%d \", i);\n}", "input": "", "output": "for (i = 0; i < 10; i++)", "category": "Python"}, {"instruction": "Write a SQL query that reverses the order of entries in table 'students'.", "input": "", "output": "SELECT *\nFROM students\nORDER BY id DESC;", "category": "Python"}, {"instruction": "Construct a function that removes any non-alphanumeric characters from a string.", "input": "Hello world!", "output": "def remove_non_alphanumeric(string):\n    return ''.join(c for c in string if c.isalnum())\n\nremove_non_alphanumeric(\"Hello world!\")", "category": "Python"}, {"instruction": "What is the output of the following JavaScript code?\n \nlet x = 0;\nwhile(x <= 5) {\n   console.log(x);\n   x++;\n}", "input": "", "output": "The output of the code will be 0, 1, 2, 3, 4, 5. The loop will run until the condition (x <= 5) is satisfied and print out the current value of x each time.", "category": "Python"}, {"instruction": "Construct a regex expression that matches a valid US zip code.", "input": "", "output": "^\\d{5}(?:[-\\s]\\d{4})?$", "category": "Python"}, {"instruction": "Edit the following JavaScript function to throw an error when the user enters a negative number.", "input": "function printSquare(num) {\n    console.log(num * num);\n}", "output": "function printSquare(num){\n    if (num < 0){\n        throw new Error('Negative number is not allowed');\n    }\n    console.log(num * num);\n}", "category": "Python"}, {"instruction": "Create a class in Python that contains the following methods:", "input": "", "output": "class Student:\n    def __init__(self, name, grade):\n        self.name = name\n        self.grade = grade\n\n    def getName(self):\n        return self.name\n\n    def getGrade(self):\n        return self.grade", "category": "Python"}, {"instruction": "Output a list of the elements that appear both in list a and list b.", "input": "list a: [1, 3, 5, 7, 9]\nlist b: [2, 4, 6, 8]", "output": "[]", "category": "Python"}, {"instruction": "Rotate a list of elements by a certain number of times.", "input": "[1, 2, 3, 4], 2", "output": "def rotate_array(arr, n): \n    \"\"\"\n    This function rotates a list of elements by a certain number of times\n    \"\"\"  \n    return arr[n:] + arr[:n]\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4]\n    n = 2\n    print(rotate_array(arr, n))", "category": "Python"}, {"instruction": "Create a function that takes 3 parameters and returns the maximum of them.", "input": "6, 7, 4", "output": "def find_max_of_three(a, b, c): \n    \"\"\"\n    This function finds the maximum of three numbers\n    \"\"\"  \n    return max(a, b, c)\n\nif __name__ == '__main__':\n    a = 6\n    b = 7\n    c = 4\n    print(find_max_of_three(a, b, c))", "category": "Python"}, {"instruction": "Create an array of prime numbers between 0 and 100 and print them out.", "input": "", "output": "Array = []\n\nfor num in range(2,101):\n    if all(num % i != 0 for i in range(2,num)):\n        Array.append(num)\n\nprint(Array)", "category": "Python"}, {"instruction": "Parse the following HTML string and return the list of id's.", "input": "<form> \n  <input name=\"user_id\" type=\"text\" id=\"user_id\" value=\"123456\"> \n  <input name=\"name\" type=\"text\" id=\"name\" value=\"John Doe\"> \n  <input name=\"email\" type=\"text\" id=\"email\" value=\"john@example.com\"> \n  <input name=\"password\" type=\"password\" id=\"password\" value=\"password123\">\n</form>", "output": "import lxml.html\n\ninput_html = '''\n<form> \n  <input name=\"user_id\" type=\"text\" id=\"user_id\" value=\"123456\"> \n  <input name=\"name\" type=\"text\" id=\"name\" value=\"John Doe\"> \n  <input name=\"email\" type=\"text\" id=\"email\" value=\"john@example.com\"> \n  <input name=\"password\" type=\"password\" id=\"password\" value=\"password123\">\n</form>\n'''\n\ndef get_id_list(html):\n    root = lxml.html.fromstring(html)\n    ids = root.xpath('//*[@id]')\n    return [id.attrib['id'] for id in ids]\n\nif __name__ == '__main__':\n    print(get_id_list(input_html))", "category": "Python"}, {"instruction": "Construct a function to convert a string of length one to a capitalized version.", "input": "", "output": "def capitalize(string): \n    return string.capitalize()", "category": "Python"}, {"instruction": "Write a code to print out a two-dimensional array.", "input": "A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "output": "for row in A:\n    for elem in row:\n        print(elem, end=' ')\n    print()", "category": "Python"}, {"instruction": "Write a function for removing duplicates from a given list", "input": "list = [1, 2, 3, 3, 4, 2]", "output": "def removeDuplicates(list):\n    # create a new set with unique elements from list\n    unique_set = set(list)\n    # convert set back to list\n    unique_list = list(unique_set) \n    return unique_list", "category": "Python"}, {"instruction": "Create a function that takes a string and checks if it's a valid email or not.", "input": "string = 'example[at]gmail.com'", "output": "import re\n\ndef isValidEmail(string):\n    # regex to check for valid email address\n    regex = '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n    if(re.search(regex,string)):  \n        return True  \n    else:  \n        return False", "category": "Python"}, {"instruction": "Write a Python program to check if a list contains a specific item.", "input": "data = [3, 4, 5, 6, 7]", "output": "def contains_item(data, item):\n    return item in data", "category": "Python"}, {"instruction": "Write a Python function to split a list of items into groups of n.", "input": "list = [\"red\", \"green\", \"orange\", \"blue\", \"pink\", \"purple\"]", "output": "def split_list(data, n):\n    output = [data[i:i+n] for i in range(0, len(data), n)]\n    return output", "category": "Python"}, {"instruction": "Write a python program to replace the character \u2018e' with the character \u2018E' for strings of length more than 5", "input": "text = \"Hello world!\"", "output": "def replace_char(text):\n    if len(text) > 5:\n        return text.replace('e','E')\n    else:\n        return text", "category": "Python"}, {"instruction": "Modify the following code to print all words with more than 5 characters in a given string.", "input": "text = \"This is an example string\"", "output": "text = \"This is an example string\"\nwords = text.split() \nfor word in words: \n    if len(word) > 5: \n        print(word)", "category": "Python"}, {"instruction": "Remove the empty tuples in the list.", "input": "mylist = [(), (1,), (1, 2), (), (3, 4), (), (5)]", "output": "mylist = [(), (1,), (1, 2), (), (3, 4), (), (5)]\nfiltered_list = list(filter(None, mylist))\nprint(filtered_list)", "category": "Python"}, {"instruction": "Modify the code to make it compatible with Python 3.", "input": "mylist = range(20)\n\nfor i in mylist:\n    print i", "output": "mylist = list(range(20))\n\nfor i in mylist: \n    print(i)", "category": "Python"}, {"instruction": "Describe a short code fragment that imports xml as an object.", "input": "", "output": "import xml.etree.ElementTree as ET \ntree = ET.parse(\"doc.xml\") \nroot = tree.getroot()", "category": "Python"}, {"instruction": "Sort the string list across both key and value.", "input": "list =[(\"hello\", 1), (\"world\", 2), (\"today\", 4), (\"is\", 3)]", "output": "list =[(\"hello\", 1), (\"world\", 2), (\"today\", 4), (\"is\", 3)]\nsorted_list = sorted(list, key = lambda kv:(kv[0], kv[1])) \nprint(sorted_list)", "category": "Python"}, {"instruction": "Generate a list containing all multiples of 3 from 0 to 30.", "input": "", "output": "multiples_of_3 = [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30]", "category": "Python"}, {"instruction": "Write a code snippet that prints out each name and its length.", "input": "names = [\"John\", \"Alice\", \"Paul\"]", "output": "for name in names:\n    print(name, len(name))", "category": "Python"}, {"instruction": "Generate a new array by selecting the menu entries associated with each table.", "input": "table1 = [\"burger\", \"fries\"]\ntable2 = [\"pizza\", \"bbq chicken\"]", "output": "menu = []\nmenu.extend(table1)\nmenu.extend(table2)", "category": "Python"}, {"instruction": "Convert the following block of code into a more concise version using more appropriate looping mechanisms.", "input": "myList = [\"one\", \"two\", \"three\", \"four\"]\n\nnewList = []\nfor element in myList:\n    newList.append(element[0])", "output": "myList = [\"one\", \"two\", \"three\", \"four\"]\n\nnewList = [element[0] for element in myList]", "category": "Python"}, {"instruction": "How would you design a game of hangman using object-oriented programming?", "input": "", "output": "In designing a game of hangman using object-oriented programming, one could create separate classes for a Hangman game, a player, a puzzle, and a set of words. The Hangman class would be responsible for managing the game overall and for handling the interactions between the player and the puzzle. The player class would store the players name, number of guesses, and score. The puzzle class would manage the state of the puzzle and handle updates when new letters are guessed. Finally, the Words class would handle the management and loading of word data.", "category": "Python"}, {"instruction": "Write CSS code to position a div in the middle and bottom of the page.", "input": "", "output": "div {\n    position: absolute;\n    bottom: 0;\n    left: 50%;\n    transform: translateX(-50%);\n}", "category": "Python"}, {"instruction": "Suggest a machine learning model for predicting stock prices.", "input": "", "output": "A possible machine learning model for predicting stock prices is the Long Short-Term Memory (LSTM) Neural Network. This model is widely used for forecasting time-series data, such as stock prices. It is capable of capturing long-term dependencies and has been used successfully to make accurate predictions in many areas.", "category": "Python"}, {"instruction": "Given a string s, create a function to find the character that appears the most and return its index.", "input": "s = \"Big Data\"", "output": "def most_freq_char(s):\n freq_dict = {}\n \n for char in s:\n if char in freq_dict:\n freq_dict[char] += 1\n else:\n freq_dict[char] = 1\n \n max_freq = 0\n max_char = \"\"\n \n for key in freq_dict:\n if max_freq < freq_dict[key]:\n max_freq = freq_dict[key]\n max_char = key\n \n return s.index(max_char)", "category": "Python"}, {"instruction": "Parse a HTML page and find all text content within the page.", "input": "", "output": "from bs4 import BeautifulSoup\n \nhtml_doc = \"\"\"\n<html><head><title>Page Title</title></head>\n<body>\n<h1>Header Text</h1>\n<p>Paragraph 1</p>\n<p>Paragraph 2</p>\n</body>\n</html>\n\"\"\"\n \nsoup = BeautifulSoup(html_doc, 'html.parser')\ntext_content = soup.find_all(text=True)\n \nfor content in text_content:\n print(content)", "category": "Python"}, {"instruction": "Create a SQL query to return top five rows from a table named 'employees'.", "input": "", "output": "SELECT * FROM employees ORDER BY salary DESC limit 5;", "category": "Python"}, {"instruction": "Given a list of strings, write a function to sort them alphabetically.", "input": "[\"orange\", \"apple\", \"banana\"]", "output": "def sort_strings(lst):\n return sorted(lst, key=str.lower)", "category": "Python"}, {"instruction": "Construct a while loop in order to traverse through an array.", "input": "", "output": "arr = [1, 2, 3, 4, 5]\ni = 0\n\nwhile i < len(arr): \n  element = arr[i]\n  print(element)\n  i += 1", "category": "Python"}, {"instruction": "Describe how to debug a HTML web page.", "input": "", "output": "Debugging a HTML page involves inspecting the page elements to detect any errors and identify the source of any issues. Many web browsers have a Developer Tools feature that can be used to inspect and debug the page. It allows you to view the page HTML and JavaScript, as well as view any errors and warning messages that may appear.", "category": "Python"}, {"instruction": "How is an exception handled in a C# program?", "input": "", "output": "An exception is handled in a C# program by using the try/catch statement. The statement provides a way to handle any potential errors that may occur while executing the program. It allows you to define a section of code that can execute even if an exception or error is encountered.", "category": "Python"}, {"instruction": "Convert the given hashmap ['name1': 'value1', 'name2': 'value2' ] to JSON.", "input": "", "output": "{\n  \"name1\": \"value1\", \n  \"name2\": \"value2\"\n}", "category": "Python"}, {"instruction": "Write the output for the following Java program.", "input": "public class OddNumber {\n  public static void main(String[] args) {\n    for(int i=10; i<20; i++) {\n      if(i % 2 == 1) {\n        System.out.println(i);\n      }\n    }\n  }\n}", "output": "11\n13\n15\n17\n19", "category": "Python"}, {"instruction": "Change the given program code to swap the values of two variables 'a' and 'b'.", "input": "let a = 8;\nlet b = 12;", "output": "let a = 12;\nlet b = 8;", "category": "Python"}, {"instruction": "In SQL, write an expression to output all valid email addresses from a table of users.", "input": "", "output": "SELECT email FROM users WHERE email LIKE '%@%.%';", "category": "Python"}, {"instruction": "Are string and array objects mutable or immutable in JavaScript?", "input": "", "output": "In JavaScript, strings and arrays are both mutable objects. This means that these objects can be changed after they have been created, and can be modified in place. Other primitive data types, such as numbers and booleans, are immutable and cannot be changed after they have been created.", "category": "Python"}, {"instruction": "Convert a given number from binary to hexadecimal using C programming language.", "input": "10101", "output": "#include <stdio.h>\n#include <math.h>\n\nint main()\n{\n    int binary=10101;\n    int decimal=0, i=0, rem;\n    while (binary!=0)\n    {\n        rem=binary%10;\n        decimal=decimal+rem*pow(2,i);\n        binary=binary/10;\n        ++i;\n    }\n    printf(\"The hexadecimal equivalent is : %x\", decimal);\n    return 0;\n}", "category": "Python"}, {"instruction": "Create a Swift program that takes three numbers and outputs the maximum between them.", "input": "6 10 2", "output": "let num1 = 6\nlet num2 = 10\nlet num3 = 2\n\nlet max = Swift.max(num1, num2, num3)\nprint(max)", "category": "Python"}, {"instruction": "Create a C++ program to sum two integers and output the value.", "input": "2 3", "output": "#include <iostream>\n\nint main()\n{\n    int a = 2;\n    int b = 3;\n    int sum = a + b;\n\n    std::cout << sum << std::endl;\n\n    return 0;\n}", "category": "Python"}, {"instruction": "Describe the purpose of the else statement in an if-else statement.", "input": "", "output": "The else statement in an if-else statement is used to execute a block of code when the expression in the if statement returns false. It provides an alternate option if the condition in the if statement is not satisfied. The else statement can be followed by an additional if-else statement in order to create an if-else-if ladder.", "category": "Python"}, {"instruction": "What does a function call statement look like in JavaScript?", "input": "", "output": "A function call statement in JavaScript looks like: functionName(parameter1, parameter2, ...);", "category": "Python"}, {"instruction": "Analyze the given HTML code.", "input": "<div>\n    <h3>Title</h3>\n    <p>paragraph</p>\n    <button>Button</button>\n</div>", "output": "This code creates a div element which contains an h3 for a title, a p for a paragraph, and a button element. It will be rendered as a box with the title at the top, followed by the paragraph and button below it.", "category": "Python"}, {"instruction": "Assign the values of list_2 to the same positions of list_1.", "input": "list_1 = [1, 2, 5, 8]\nlist_2 = [3, 6, 9, 12]", "output": "list_1[0] = 3\nlist_1[1] = 6\nlist_1[2] = 9\nlist_1[3] = 12", "category": "Python"}, {"instruction": "Generate a token based on the given parameters.", "input": "Parameters: Algorithm (SHA-256), Size (32 characters), Encode (Hexadecimal)", "output": "import hashlib\n\ndef generate_token(algorithm, size, encoding):\n\ttoken = hashlib.sha256(os.urandom(size//2)).hexdigest()[:size]\n\treturn token", "category": "Python"}, {"instruction": "Generate a C# program to print out the results of a multiplication table from 1 to 10.", "input": "", "output": "for (int i = 1; i <= 10; i++)\n{\n    for (int j = 1; j <= 10; j++)\n    {\n        Console.WriteLine(\"{0} * {1} = {2}\", i, j, (i * j));\n    }\n    Console.WriteLine();\n}", "category": "Python"}, {"instruction": "Suggest a SQL query to retrieve the employee records with an age greater than 30.", "input": "", "output": "SELECT * FROM employees WHERE age > 30;", "category": "Python"}, {"instruction": "Write a recurrence relation for the following algorithm.", "input": "Algorithm A:\nn = n - 3 \nif n \u2265 0 then A(n)", "output": "The recurrence relation for Algorithm A is A(n) = A(n - 3), n \u2265 0.", "category": "Python"}, {"instruction": "What is the ASCII character for the code \u201c97\u201d?", "input": "", "output": "The ASCII character for the code \u201c97\u201d is 'a'.", "category": "Python"}, {"instruction": "Write a LINQ query in C# to select customers from the USA.", "input": "", "output": "var filteredResult = from customer in customers\n                     where customer.Country == \"USA\"\n                     select customer;", "category": "Python"}, {"instruction": "Use regular expression to create a pattern to identify email addresses in a string.", "input": "\u2018This is an example of an email: xyz@example.com\u2019", "output": "pattern = re.compile(r'[\\w\\.-]+@[\\w\\.-]+')", "category": "Python"}, {"instruction": "Generate a random password of 8 characters containing numbers and letters.", "input": "", "output": "jK9xz39V", "category": "Python"}, {"instruction": "Suggest one line of code that should be added to the following function to make it more efficient.", "input": "def search_prime_numbers(n):\n    for num in range(2, n + 1):\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            print(num)", "output": "def search_prime_numbers(n):\n    for num in range(2, n + 1):\n        if num > 2 and num % 2 == 0: // This line can be added to make the function more efficient by avoiding the check for even numbers greater than 2.\n            continue\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            print(num)", "category": "Python"}, {"instruction": "Write a regular expression that matches URLs that end with \".net\".", "input": "", "output": "/(.*)\\.net$/ // Matches URLs that end with \".net\".", "category": "Python"}, {"instruction": "Suggest a data structure that can be used to store contacts information (name, email, phone number).", "input": "", "output": "A hash table can be used to store the contacts information as it provides a key-value mapping of the information. Keys can be either the name, email or phone number depending on the mapping pattern desired. A set or LinkedList can also be used for this purpose, as the information does not have any orders associated with it.", "category": "Python"}, {"instruction": "Suggest a way to change the following code so that it does not use a nested loop.", "input": "for n in range(10):\n    for i in range(n):\n        print('*', end='')\n    print()", "output": "for n in range(10):\n    print('*' * n) // The code can be rewritten to use one single line and one loop only.", "category": "Python"}, {"instruction": "Suggest a way to make the following code more concise.", "input": "if i == 0:\n    result = \"zero\"\nelif i == 1:\n    result = \"one\"\nelif i == 2:\n    result = \"two\"", "output": "result = [\"zero\", \"one\", \"two\"][i] // Using a list and indexing can shorten the code.", "category": "Python"}, {"instruction": "Suggest a method to search for a specified character in a string.", "input": "", "output": "One approach is to loop through each character in the string and check if it matches the character to be searched for. If it does, the index of the character can be returned, or a boolean indicating whether the character is present in the string or not can be returned. Another approach is to use built-in string functions such as .indexOf() or .includes() to search for the specified character.", "category": "Python"}, {"instruction": "Complete the following JavaScript function so that it reads the string parameter and prints all the uppercase letters.", "input": "function print_uppercase_letters(string) {\n  \n}", "output": "function print_uppercase_letters(string) {\n  for (let i = 0; i < string.length; i++) {\n    let char = string[i];\n    if (char === char.toUpperCase()) {\n      console.log(char);\n    }\n  }\n}", "category": "Python"}, {"instruction": "Suggest an improvement to make the code more efficient.", "input": "a = [1,2,3,4,5]\nloop_count = len(a)\nwhile loop_count > 0:\n    print(loop_count)\n    loop_count -= 1", "output": "a = [1,2,3,4,5]\nfor number in a:\n    print(number) // Instead of looping through the number of items in 'a', loop through the items of 'a' directly.", "category": "Python"}, {"instruction": "Calculate the sum of all the integers in the range of m to n (inclusive).", "input": "m = 10, n = 20", "output": "sum = 165  # 10 + 11 + 12 + ... + 20 = 165", "category": "Python"}, {"instruction": "Create a class that contains two methods: one to generate a random number between a given range, and one to create a list of \"n\" random numbers.", "input": "n = 10, min = 0, max = 100", "output": "class RandomNumberList:\n    def __init__(self):\n        self.numbers = []\n    \n    def generate_random(self, min, max):\n        return random.randint(min, max) \n    \n    def create_list(self, n, min, max):\n \u00a0 \u00a0# Generate a list of n random numbers between min and max\n \u00a0 \u00a0 \u00a0 \u00a0self.numbers = [self.generate_random(min, max) for _ in range(n)]\n        return self.numbers", "category": "Python"}, {"instruction": "Print the value corresponding to the given key in a dictionary.", "input": "dic = {'name': 'John', 'age': 18}, key = 'name'", "output": "John  # The value associated with 'name' is 'John'", "category": "Python"}, {"instruction": "Find the closest number to given value using a binary search algorithm.", "input": "arr = [2, 4, 7, 10, 11, 12], val = 6", "output": "closest_num = 7  # 10 is the closest number to 6 in the array", "category": "Python"}, {"instruction": "Create a user-defined type in Python to store information about a person.", "input": "", "output": "class Person:\n    def __init__(self, firstname, lastname, age):\n        self.firstname = firstname\n        self.lastname = lastname\n        self.age = age\n\nperson1 = Person('John', 'Smith', 25)", "category": "Python"}, {"instruction": "Write a query in MySQL to delete a record from a table named 'customers' where the address field is \u2018Unknown\u2019.", "input": "", "output": "DELETE FROM customers WHERE address = 'Unknown';", "category": "Python"}, {"instruction": "Define a JavaScript class to store information about a circle.", "input": "", "output": "class Circle {\n  constructor(radius) {\n    this.radius = radius;\n    this.diameter = radius * 2;\n  }\n  \n  area() {\n    return Math.PI * this.radius * this.radius;\n  }\n  \n  circumference() {\n    return Math.PI * this.diameter;\n  }\n}", "category": "Python"}, {"instruction": "Create a stored procedure in SQL to insert a new entry into a 'products' table.", "input": "", "output": "CREATE PROCEDURE InsertProduct\n(@Name varchar(50), \n @Price decimal(2,2))\nAS\n BEGIN\n \tINSERT INTO products(name, price) \n \tVALUES (@Name, @Price)\n \tSELECT @@IDENTITY As NewId\n END;", "category": "Python"}, {"instruction": "Write a SQL query to select all the vehicles from a table that are owned by John.", "input": "Table name: vehicles\nColumns: owner_name, vehicle", "output": "SELECT vehicle FROM vehicles WHERE owner_name = 'John'", "category": "Python"}, {"instruction": "Create a C# class with an interface that can be used to store and manipulate data.", "input": "", "output": "public class DataManipulator\n{\n    public interface IDataManipulator\n    {\n        void StoreData(string data);\n        void ManipulateData();\n    }\n}", "category": "Python"}, {"instruction": "Write a code to print out a multiplication table of a number in Python.", "input": "", "output": "def print_multiplication_table(num): \n    for i in range(1,11):  \n       print(num,'x',i,'=',num*i)\n\nprint_multiplication_table(5) \n# OUTPUT: 5 x 1 = 5\n        5 x 2 = 10\n        5 x 3 = 15\n        5 x 4 = 20\n        5 x 5 = 25\n        5 x 6 = 30\n        5 x 7 = 35\n        5 x 8 = 40\n        5 x 9 = 45\n        5 x 10 = 50", "category": "Python"}, {"instruction": "Create a url parser in JavaScript that can return the path from a given url.", "input": "", "output": "function getPathFromURL(url) {\n  const urlObj = new URL(url);\n  const path = urlObj.pathname;\n  return path;\n}", "category": "Python"}, {"instruction": "Generate a random 9-digit id in Java.", "input": "", "output": "import java.util.Random;\n  \npublic class Example {\n  \n public static void main(String[] args) {\n    Random random = new Random();\n    int random_number = 1000000000 + random.nextInt(900000000);\n    System.out.println(random_number);\n }\n  \n}", "category": "Python"}, {"instruction": "Write code to convert a given string to all uppercase letters in Python.", "input": "", "output": "string_org = \"convert this to uppercase\"\nstring_uppercase = string_org.upper() \nprint(string_uppercase) \n# OUTPUT: CONVERT THIS TO UPPERCASE", "category": "Python"}, {"instruction": "Generate the Fibonacci sequence in a given range in Python.", "input": "n = 8", "output": "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \nFibonacci(n)", "category": "Python"}, {"instruction": "In the following code, what is the variable a?", "input": "var a = 3 + 4;", "output": "The variable a is the result of the expression 3 + 4, which is 7.", "category": "Python"}, {"instruction": "For a given programming language, list the data types supported by that language.", "input": "", "output": "In Java, the supported data types include primitive data types like int, float, char, as well as non-primitive types such as String, Array, List, Set, and Map.", "category": "Python"}, {"instruction": "Provide a function to implement a Binary Tree traversal.", "input": "", "output": "def printTree(root): \n    \n    # Check if tree is empty\n    if root == None: \n        return\n    \n    # First print the root data\n    print(root.data, end=\" \")\n    \n    # First recur on left child\n    printTree(root.left)\n    \n    # the recur on right child\n    printTree(root.right)", "category": "Python"}, {"instruction": "Describe the working of a Recurrent Neural Network (RNN).", "input": "", "output": "A Recurrent Neural Network (RNN) is a type of artificial neural network that is widely used for natural language processing, dialogue systems, and time series prediction. RNNs have the ability to process data sequences, which gives them an advantage over traditional neural networks. This is done by using recurrent connections between the hidden layers of the network. In this type of network architecture, the outputs from the previous layer are used as inputs to the next layer. This allows the network to remember the context of the data sequentially, which makes it suitable for problems with a temporal component. RNNs can also be used to train the model to produce a sequence output by predicting the next item in the sequence.", "category": "Python"}, {"instruction": "How can you handle errors in Python?", "input": "", "output": "Python provides two ways to handle errors: \n\n1. The try and except statement, and \n2. The raise statement.\n\nThe try and except statement is used to catch and handle exceptions, while the raise statement is used to explicitly raise an exception.", "category": "Python"}, {"instruction": "Implement the bottom up cut rod algorithm in Python.", "input": "", "output": "def bottomUpCutRod(prices, n): \n \n    # Create an array of size n+1 \n    temp_array = [0 for i in range(n+1)] \n    for i in range(1, n+1): \n        tempval = -float('inf') \n        for j in range(i): \n            tempval = max(tempval, prices[j] + temp_array[i-j-1]) \n        temp_array[i] = tempval \n  \n    return temp_array[n]", "category": "Python"}, {"instruction": "What is the workflow of a deep learning project?", "input": "", "output": "The workflow of a deep learning project typically consists of the following steps:\n\n1. Data Collection, Preparation and Analysis: Collecting and preparing the data for the project, including data exploration, feature engineering, and data cleaning.\n\n2. Model Design & Training: Designing the architecture of the deep learning model and selecting the best hyperparameters that will lead to the highest possible performance on a given task.\n\n3. Model Evaluation: Evaluating the performance of the model on test data to determine its accuracy.\n\n4. Model Deployment: Deploying the model in the form of an application or service.", "category": "Python"}, {"instruction": "Implement a class to implement a Huffman coding algorithm.", "input": "", "output": "class HuffmanCoding:\n \n    def __init__(self, inp_string):\n        self.inp_string = inp_string\n        self.string_length = len(inp_string)\n        self.frequency_table = self.get_frequency_table(inp_string)\n        self.huff_tree = self.build_huffman_tree(self.frequency_table)\n \n    def get_frequency_table(self, inp_string):\n        # Create dictionary to store frequencies\n        freq_table = {}\n        # Count frequency of characters in the string\n        for char in inp_string:\n            if char in freq_table:\n                freq_table[char] += 1\n            else:\n                freq_table[char] = 1\n        # Return the frequency table\n        return freq_table\n \n    def build_huffman_tree(self, frequency_table):\n        # Create a priority queue to store the trees \n        pq = PriorityQueue()\n        # Create a tree for each value\n        for value in frequency_table:\n            pq.put((frequency_table[value], Node(value)))\n        # Start the loop with two trees\n        while pq.qsize() > 1:\n            left_node = pq.get()\n            right_node = pq.get()\n            combined_freq = left_node[0] + right_node[0]\n            new_node = Node(left=left_node[1], right=right_node[1])\n            pq.put((combined_freq, new_node))\n        # Return the tree\n        return pq.get()[1]", "category": "Python"}, {"instruction": "Use a template in HTML and JavaScript to create a table with 10 columns.", "input": "", "output": "<table>\n  <thead>\n    <tr>\n      <th>Col1</th>\n      <th>Col2</th>\n      <th>Col3</th>\n      <th>Col4</th>\n      <th>Col5</th>\n      <th>Col6</th>\n      <th>Col7</th>\n      <th>Col8</th>\n      <th>Col9</th>\n      <th>Col10</th>\n    </tr>\n  </thead>\n  <tbody>\n    <script>\n      for (var i = 0; i < 10; i++){\n        document.write(\"<tr><td>\" + i + \"</td></tr>\");\n      }\n    </script>\n  </tbody>\n</table>", "category": "Python"}, {"instruction": "Create a correlation heatmap in Python using a given dataset.", "input": "import pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame(np.random.randint(0,100,size=(100, 4)), columns=list('ABCD'))", "output": "import seaborn as sns\nimport matplotlib.pyplot as plt\n\ncorr = data.corr()\n\nsns.heatmap(corr, \n        xticklabels=corr.columns,\n        yticklabels=corr.columns)\nplt.show()", "category": "Python"}, {"instruction": "Suggest a way to find all the divisors of a number, n.", "input": "", "output": "We can find all the divisors of a number by using a for loop to iterate from 1 to n. For each number, we check if it is a divisor of n. If it is, then we add it to a list of divisors. At the end of the loop, we will have the list of all divisors of n.", "category": "Python"}, {"instruction": "Describe the process of writing a recursive program.", "input": "", "output": "Writing a recursive program involves identifying a base case, which is a situation where the answer has been found and doesn\u2019t need to be recomputed. This is followed by defining the recursive case which involves breaking the problem down into smaller and smaller subproblems until the base case is reached. Each recursive call should pass the necessary information to the next call for solving the subproblem. The computed results are eventually combined to solve the original problem.", "category": "Python"}, {"instruction": "Create a function that takes an integer n as an argument and returns the sum of all numbers from 1 to n.", "input": "n = 10", "output": "def sum_to_n(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total", "category": "Python"}, {"instruction": "Classify the given animals into two categories: mammal or reptile", "input": "[dog, snake, turtle, elephant]", "output": "Mammal: dog, elephant \nReptile: snake, turtle", "category": "Python"}, {"instruction": "Edit the sentence to make it grammatically correct.", "input": "Sentence: \"I work at the library did.\"", "output": "I worked at the library.", "category": "Python"}, {"instruction": "Create a list of dictionaries, with each dictionary containing a person's name, age, and city.", "input": "Name1: Alice; Age1: 24; City1: Boston\nName2: Bob; Age2: 32; City2: New York\nName3: Chris; Age3: 28; City3: San Francisco", "output": "persons = [\n  {'name': 'Alice', 'age': 24, 'city': 'Boston'},\n  {'name': 'Bob', 'age': 32, 'city': 'New York'},\n  {'name': 'Chris', 'age': 28, 'city': 'San Francisco'},\n]", "category": "Python"}, {"instruction": "Generate a dictionary that contains all the words in a string of text, and the number of times each word occurs.", "input": "Text: \"I like dogs and cats and I like cats more than dogs\"", "output": "def create_dict(text):\n  text_list = text.split(' ')\n  count_dict = {}\n  for word in text_list:\n    count_dict[word] = count_dict.get(word, 0) + 1\n  return count_dict", "category": "Python"}, {"instruction": "Find the two adjacent elements in the array with the largest sum.", "input": "Array: [3, 6, 8, -10, 5]", "output": "def find_adjacent(arr):\n  max_sum = -1\n  for i in range(len(arr)-1):\n    if arr[i] + arr[i+1] > max_sum:\n      max_sum = arr[i] + arr[i+1]\n  return max_sum", "category": "Python"}, {"instruction": "Create a class named Student. Give it two fields - name and age.", "input": "", "output": "class Student:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age", "category": "Python"}, {"instruction": "Train a Machine Learning model using scikit-learn that can solve a binary classification problem.", "input": "Dataset - number of samples 1000, number of features 5, target label - binary", "output": "from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)\n\nlogreg = LogisticRegression(random_state=0).fit(X_train, y_train)", "category": "Python"}, {"instruction": "Parse the sentence and extract all the verbs from it.", "input": "Sentence: \"She ran quickly to catch the bus.\"", "output": "def extract_verbs(sentence):\n  verbs = []\n  words = sentence.split(\" \")\n  for w in words:\n    if w.endswith(\"ed\") or w.endswith(\"ing\"):\n      verbs.append(w)\n  return verbs", "category": "Python"}, {"instruction": "Create an array with 3 elements of your choice.", "input": "", "output": "my_array = [\"John\", 25, True]", "category": "Python"}, {"instruction": "Strip the white spaces from a given string.", "input": "my_string = \"   Hello World     \"", "output": "stripped_string = my_string.strip()", "category": "Python"}, {"instruction": "What do we mean by immutability in Python?", "input": "", "output": "Immutability in Python refers to the concept of objects that are unable to be modified. Immutable objects are specified when they are created and cannot be changed beyond that point. For example, tuples and strings are always immutable.", "category": "Python"}, {"instruction": "Find the index of the first occurence of the given element in a list.", "input": "my_list = [2, 5, 6, 8, 10]\nelement = 8", "output": "index = my_list.index(element)", "category": "Python"}, {"instruction": "Write a for loop to iterate through a list of integers and print out the square of each value.", "input": "numbers = [1, 2, 3, 4]", "output": "for num in numbers:\n    print(num**2)", "category": "Python"}, {"instruction": "Convert a given JSON string to its Python dictionary equivalent.", "input": "json_string = '{\"name\":\"John\",\"age\":30}'", "output": "import json\npython_dict = json.loads(json_string)", "category": "Python"}, {"instruction": "Create a variable to store your name.", "input": "", "output": "name = \"John\"", "category": "Python"}, {"instruction": "Create a new list object by selecting the names that start with a \u2018A\u2019 from the given list", "input": "[Alfred, John, Anthony, Paula]", "output": "Name_list = [name for name in input_list if name[0] == 'A']", "category": "Python"}, {"instruction": "Generate a valid SQL query to get the total number of people in each job type", "input": "", "output": "SELECT job_type, COUNT(*) \nFROM table_name \nGROUP BY job_type;", "category": "Python"}, {"instruction": "Edit the following Python code to print out \u201cThe answer is X\u201d", "input": "print(\"X + 5 = 10\")", "output": "print(\"The answer is \" + str(10 - 5))", "category": "Python"}, {"instruction": "Create a rectangle using the turtle library in Python", "input": "", "output": "import turtle\nt = turtle.Turtle() \nt.forward(100) \nt.left(90) \nt.forward(50) \nt.left(90) \nt.forward(100) \nt.left(90) \nt.forward(50) \nt.left(90)", "category": "Python"}, {"instruction": "Implement a function for searching an item in the given list.", "input": "list = [1, 4, 5, 6, 8, 9]\nitem = 5", "output": "def search(list, item):\n    for i in range(len(list)):\n        if list[i] == item:\n            return True\n    return False", "category": "Python"}, {"instruction": "Select the overlapping elements between two lists", "input": "list1 = [1, 2, 3, 4, 5, 6]\nlist2 = [3, 4, 5, 6, 7, 8]", "output": "[3, 4, 5, 6]", "category": "Python"}, {"instruction": "Create an Android app to accept user input and calculate the area of a circle.", "input": "", "output": "public class MainActivity extends AppCompatActivity {\n\n    EditText radiusEditText;\n    TextView outputTextView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        radiusEditText = findViewById(R.id.radiusEditText);\n        outputTextView = findViewById(R.id.outputTextView);\n\n        findViewById(R.id.calculateButton).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                calculateAreaOfCircle();\n            }\n        });\n    }\n\n    private void calculateAreaOfCircle() {\n        double radius = Double.parseDouble(radiusEditText.getText().toString());\n        double area = Math.PI * radius * radius;\n\n        outputTextView.setText(String.valueOf(area));\n    }\n}", "category": "Python"}, {"instruction": "Write a computer program to print all primes in an inputted range.", "input": "", "output": "def print_primes(start, end):\n    for num in range(start, end + 1):\n        # all prime numbers are greater than 1\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                print(num)", "category": "Python"}, {"instruction": "Make a matrix multiplication program that takes an arbitrary number of matrices as input.", "input": "", "output": "def matrix_multiplication(*matrices):\n    res = [[0 for _ in range(len(matrices[0][0]))]\n        for _ in range(len(matrices[0]))]\n    for y in range(len(matrices[0])):\n        for x in range(len(matrices[0][0])):\n            for m in range(len(matrices)):\n                res[y][x] += matrices[m][y][x]\n    return res", "category": "Python"}, {"instruction": "Create a HTML button with an id of \"my-button\".", "input": "", "output": "<button id=\"my-button\">Click Me</button>", "category": "Python"}, {"instruction": "Given a positive integer number, generate the Fibonacci series.", "input": "", "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)", "category": "Python"}, {"instruction": "Given a two lists, combine the contents of both lists into a new list.", "input": "list1 = [1, 2, 3, 4]\nlist2 = [5, 6, 7, 8]", "output": "new_list = list1+list2", "category": "Python"}, {"instruction": "Construct a matrix using the given list of numbers.", "input": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "output": "matrix = [[1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n          [10]]", "category": "Python"}, {"instruction": "Find the index of the first occurrence of the word 'data' in the text 'The data here is important'.", "input": "", "output": "The index of the first occurrence of 'data' is 4.", "category": "Python"}, {"instruction": "Compile a C++ program using gcc.", "input": "filename.cpp", "output": "gcc -o filename filename.cpp", "category": "Python"}, {"instruction": "Summarize the article 'X' in one or two paragraphs.", "input": "Article 'X':\n\nThis article is about the history of the city of Rome. Rome was founded in 753 BCE by two brothers, Romulus and Remus. Since then, Rome has been a powerful city that has played a huge role in the formation of Western civilization. The Roman Republic was established in 509 BCE, and the Roman Empire followed in 27 BCE. During its long reign, Rome expanded its borders and implemented various laws and policies that shaped the legal systems of many countries.", "output": "Rome is one of the oldest cities in the world, having been founded in 753 BCE by Romulus and Remus. Following its founding, Rome quickly developed into a powerful city-state, establishing the Roman Republic in 509 BCE and the Roman Empire in 27 BCE. During its reign, Rome significantly expanded its reach and instituted laws and policies that influenced much of Western civilization. It eventually fell in 476 CE, yet its legacy continues to impact many countries today.", "category": "Python"}, {"instruction": "Create a pandas dataframe containing the following columns and their respective values:", "input": "A, B, C\nA= 12, 15, 20\nB= 30, 25, 35\nC= 40, 45, 50", "output": "df = pd.DataFrame({\"A\": [12,15,20], \n                    \"B\": [30,25,35], \n                    \"C\": [40,45,50]})", "category": "Python"}, {"instruction": "Use JavaScript to illustrate the concept of inheritance with an example.", "input": "", "output": "In JavaScript, inheritance is an object-oriented programming concept where an object inherits the properties and methods from its parent object. To illustrate this concept, consider the example of a Person being a parent object and a Student being the child object. The Person object would have properties such as age, name, and gender, while the Student object would inherit all of those properties and have additional properties such as grade and student_ID.", "category": "Python"}, {"instruction": "Edit the following Java code so that it will output the length of a string", "input": "String name = \"John\"", "output": "String name = \"John\"; \nSystem.out.println(\"Length of string is: \" + name.length());", "category": "Python"}, {"instruction": "Build a HTML table using the given JSON data", "input": "data = {\n    \"col1\": [\"One\", \"Two\", \"Three\"], \n    \"col2\": [\"Alpha\", \"Beta\",\"Gamma\"] \n}", "output": "<table>\n    <tr>\n        <th>Col1</th>\n        <th>Col2</th>\n    </tr>\n    <tr>\n        <td>One</td>\n        <td>Alpha</td>\n    </tr>\n    <tr>\n        <td>Two</td>\n        <td>Beta</td>\n    </tr>\n    <tr>\n        <td>Three</td>\n        <td>Gamma</td>\n    </tr>\n</table>", "category": "Python"}, {"instruction": "Write an XSLT code to transform an XML document into HTML.", "input": "", "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n  version=\"1.0\">\n\n<xsl:template match=\"/\">\n  <html>\n    <body>\n      <xsl:apply-templates/>\n    </body>\n  </html>\n</xsl:template>\n\n<xsl:template match=\"*\"> \n  <xsl:element name=\"{local-name()}\">\n    <xsl:apply-templates select=\"@* | node()\" />\n  </xsl:element>\n</xsl:template>\n\n<xsl:template match=\"@*\">\n  <xsl:attribute name=\"{local-name()}\">\n    <xsl:value-of select=\".\"/>\n  </xsl:attribute>\n</xsl:template>\n\n</xsl:stylesheet>", "category": "Python"}, {"instruction": "Construct an HTML form with input elements for name and email.", "input": "", "output": "<form>\n    <label for=\"name_field\">Name:</label>\n    <input type=\"text\" id=\"name_field\" name=\"name\"/>\n    <br />\n    <label for=\"email_field\">Email:</label>\n    <input type=\"text\" id=\"email_field\" name=\"email\"/>\n    <br />\n    <input type=\"submit\" value=\"Submit\"/>\n</form>", "category": "Python"}, {"instruction": "Construct a JSON object which contains the elements \"name\", \"age\", and \"occupation\".", "input": "", "output": "{\n    \"name\": \"John Doe\", \n    \"age\": 24, \n    \"occupation\": \"Software Engineer\"\n}", "category": "Python"}, {"instruction": "Write a query in SQL to retrieve the records that have the highest salary.", "input": "", "output": "SELECT * FROM Employees\nORDER BY salary DESC\nLIMIT 1;", "category": "Python"}, {"instruction": "Write a C# program to interchange the elements of the first and last columns of a given matrix.", "input": "int[,] matrix = { { 11, 21, 31, 41 }, { 12, 22, 32, 42 }, { 13, 23, 33, 43 } };", "output": "for (int i = 0; i < matrix.GetLength(0); i++)\n{\n    int temp = matrix[i, 0];\n    matrix[i, 0] = matrix[i, matrix.GetLength(1)-1];\n    matrix[i, matrix.GetLength(1)-1] = temp;\n}", "category": "Python"}, {"instruction": "Write an SQL query to display the name of the employees and their managers.", "input": "", "output": "SELECT E1.Name AS EmployeeName, E2.Name AS ManagerName\nFROM Employees E1\nINNER JOIN Employees E2\nON E1.ManagerId = E2.EmployeeId;", "category": "Python"}, {"instruction": "Construct a SQL query to get the names of all employees who joined after January 1st 2018.", "input": "", "output": "SELECT Name \nFROM Employees \nWHERE JoinDate > '2018-01-01';", "category": "Python"}, {"instruction": "Write a C++ program to create a new array from a given array of integers, removing negative numbers.", "input": "int arr[] = {-4, 3, 2, -2, 6, -7}", "output": "int new_arr[6];\nint j = 0;\nfor (int i = 0; i < 6; i++)\n{\n if (arr[i] >= 0)\n {\n new_arr[j] = arr[i];\n j++;\n }\n}", "category": "Python"}, {"instruction": "Write a C# program to print the number of occurrences of the given number in a given array.", "input": "int[] arr = {2, 4, 8, 8, 8, 10}, k = 8", "output": "int count = 0;\nforeach (int num in arr)\n{\n    if (num == k)\n        count++;\n}\nConsole.WriteLine(\"Number of occurrences of {0} is {1}.\", k, count);", "category": "Python"}, {"instruction": "Write an SQL query to get all employee salaries whose salaries are more than 50000.", "input": "", "output": "SELECT salary \nFROM employees \nWHERE salary > 50000;", "category": "Python"}, {"instruction": "Write a Python program to create a random string of size 10 consisting of alphabets and digits.", "input": "", "output": "import random \n  \ndef randomString(stringLength=10): \n    lettersAndDigits = string.ascii_letters + string.digits \n    return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))", "category": "Python"}, {"instruction": "Write a Java program to print the elements (i, j) of a two dimensional array.", "input": "int[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}", "output": "for (int i = 0; i < matrix.length; i++) {\n    for (int j = 0; j < matrix[i].length; j++)\n        System.out.print(matrix[i][j] + \" \");\n    System.out.println();\n}", "category": "Python"}, {"instruction": "Write a Java code snippet to check whether or not a number is a prime.", "input": "", "output": "public static boolean isPrime(int number) { \n    if (number == 2 || number == 3) return true; \n    if (number % 2 == 0 || number % 3 == 0) return false; \n    int sqrtN = (int)Math.sqrt(number) + 1; \n    for (int i = 6; i <= sqrtN; i += 6) { \n        if (number % (i - 1) == 0 || number % (i + 1) == 0) \n            return false; \n    } \n  \n    return true; \n}", "category": "Python"}, {"instruction": "Create a SQL statement that updates a table called 'students' with a new entry.", "input": "name = \"John Doe\"\nage = 21", "output": "INSERT INTO students (name, age) VALUES (\"John Doe\", 21);", "category": "Python"}, {"instruction": "Given a list of numbers, write a function that returns the sum without using the built-in 'sum()' function.", "input": "arr = [3, 4, 2, 5, 9]", "output": "def add_nums(arr):\n    total = 0\n    for x in arr:\n        total += x\n    return total", "category": "Python"}, {"instruction": "Rewrite the following code snippet (written in Java), such that the same purpose is accomplished but with fewer lines of code.", "input": "public static void printList(List<String> list) { \n    for (int i = 0; i < list.size(); i++) { \n        System.out.println(list.get(i));  \n    } \n}", "output": "public static void printList(List<String> list){ \n    list.forEach(s -> System.out.println(s)); \n}", "category": "Python"}, {"instruction": "Assume that you want to create a directory called 'testDir' in the current working directory. Write the command that can be used to do this in Linux.", "input": "", "output": "mkdir testDir", "category": "Python"}, {"instruction": "Generate a for-loop that prints out the square of the first 10 natural numbers.", "input": "", "output": "for i in range(1,11):\n  print(i ** 2)", "category": "Python"}, {"instruction": "Find the max 2 numbers in a list of 5 numbers without using any comparison operator.", "input": "arr = [3, 10, 2, 5, 9]", "output": "def findMax2Numbers(arr): \n    max1 = 0\n    max2 = 0\n    \n    for i in range(len(arr)): \n        temp = arr[i] + max1 \n        max2 = max1 \n        if temp > max2: \n            max1 = temp \n        elif max2 > temp: \n            max1 = max2 \n    \n    return max1, max2", "category": "Python"}, {"instruction": "Using JavaScript, write a function that takes a string as an argument and prints out whether the string is a Palindrome.", "input": "str = \"racecar\"", "output": "function isPalindrome(str) {\n    var i;\n    var len = str.length;\n\n    for (i = 0; i < len/2; i++) {\n        if (str[i] !== str[len - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}", "category": "Python"}, {"instruction": "Develop a C++ program to implement a basic calculator that performs addition, subtraction, multiplication and division.", "input": "", "output": "#include <iostream> \n  \n// Perform addition, subtraction, multiplication and division. \nint main() \n{ \n    char operate;\n    float num1, num2;\n    std::cout << \"Enter an operator +, -, *, or /: \"; \n    std::cin >> operate; \n  \n    std::cout << \"Enter two numbers: \"; \n    std::cin >> num1 >> num2;\n  \n    switch (operate) { \n    case '+': \n        std::cout << num1 + num2; \n        break; \n    case '-': \n        std::cout << num1 - num2; \n        break; \n    case '*': \n        std::cout << num1 * num2; \n        break; \n    case '/': \n        std::cout << num1 / num2; \n        break; \n    default: \n        std::cout << \"Error! No valid operator provided\"; \n    } \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Update the following JavaScript code to add a new item to the end of an array using the push() method.", "input": "let myArr = ['a', 'b', 'c']", "output": "let myArr = ['a', 'b', 'c'];\nmyArr.push('d');", "category": "Python"}, {"instruction": "Construct an SQL query to display the titles of movies with more than 10 awards.", "input": "", "output": "SELECT Title \nFROM Movies \nWHERE Awards > 10;", "category": "Python"}, {"instruction": "Write an Android program to detect if the device is connected to the Internet.", "input": "", "output": "public class NetworkUtil {\n    public static boolean isConnected(Context context){\n        ConnectivityManager connectivityManager  = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n        NetworkInfo activeNetwork = connectivityManager.getActiveNetworkInfo();\n        return activeNetwork != null && activeNetwork.isConnectedOrConnecting();\n    }\n}", "category": "Python"}, {"instruction": "Rewrite the following code to delete the elements from the list which are not even.", "input": "x = [1, 2, 3, 4, 5]", "output": "x = [i for i in x if i % 2 == 0]", "category": "Python"}, {"instruction": "Design a regular expression to match strings that begin with the letter \"a\".", "input": "", "output": "^a.*", "category": "Python"}, {"instruction": "Define a C++ function to calculate the volume of a sphere.", "input": "", "output": "double sphereVolume(double radius)\n{\n  return (4.0/3.0) * 3.14159 * radius * radius * radius;\n}", "category": "Python"}, {"instruction": "Create a LINQ query to count the number of elements with a specific value.", "input": "List<int> arr = [1, 2, 3, 4, 5, 5];", "output": "int count = arr.Count(x => x == 5);", "category": "Python"}, {"instruction": "Create a regular expression pattern to find all words ending with \"able\".", "input": "", "output": "pattern = re.compile(r\"\\w+able\\b\")", "category": "Python"}, {"instruction": "Compile a given Java program.", "input": "A java program containing the following lines\n\nclass Sample { \n    public static void main(String args[]) { \n        System.out.println(\"Hello World\"); \n    } \n}", "output": "javac Sample.java", "category": "Python"}, {"instruction": "Write a function to identify leap year.", "input": "", "output": "def isLeapYear(year): \n    if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0: \n        return True \n    else: \n        return False", "category": "Python"}, {"instruction": "Construct an HTML page with a centered text heading.", "input": "", "output": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>Centered text heading</title>\n    </head>\n    <body>\n        <h1 align=\"center\">Heading</h1>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Create an array containing the last three prime numbers.", "input": "", "output": "last_three_primes = [97, 89, 83]", "category": "Python"}, {"instruction": "Write a Python class to print the sum of an array elements", "input": "", "output": "class ArraySum: \n    def __init__(self, arr):\n        self.arr = arr\n\n    def sum(self):\n        total = 0\n        for i in self.arr:\n            total += i\n        return total", "category": "Python"}, {"instruction": "Store the following information in a JavaScript object", "input": "Name: John, Age: 24", "output": "let john = {\n  name: \"John\",\n  age: 24\n};", "category": "Python"}, {"instruction": "Generate a function in Java to calculate the minimum of two values", "input": "", "output": "public int minValue(int a, int b) { \n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n}", "category": "Python"}, {"instruction": "Write the shortest code to print Hello World", "input": "", "output": "print('Hello World')", "category": "Python"}, {"instruction": "Create a function in Python to replace a specified element in a given list", "input": "", "output": "def replace_in_list(list, old_element, new_element):\n  for i, element in enumerate(list):\n    if element == old_element:\n      list[i] = new_element\n  return list", "category": "Python"}, {"instruction": "Write an SQL query to change the column type of a table.", "input": "table: people\ncolumn: age\ntype: INT", "output": "ALTER TABLE people\nMODIFY age INT;", "category": "Python"}, {"instruction": "Write an AppleScript to open a given link in Safari.", "input": "https://www.google.com", "output": "tell application \"Safari\" \n  open location \"https://www.google.com\" \nend tell", "category": "Python"}, {"instruction": "Extract the first half of a given string.", "input": "string = \"This is an example of string\"", "output": "first_half = string[0:len(string)//2] # \"This is an\"", "category": "Python"}, {"instruction": "Create a function that returns the sum of all elements in a given array of numbers.", "input": "", "output": "def array_sum(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum", "category": "Python"}, {"instruction": "What tags need to be included in HTML to make a form?", "input": "", "output": "To create a form in HTML, the <form> tag should be included. Additionally, the <input>, <button>, <select>, and <textarea> tags should be included for creating the form elements.", "category": "Python"}, {"instruction": "Create a Python variable a with value 5.", "input": "", "output": "a = 5", "category": "Python"}, {"instruction": "Create a method to delete items from a specified array.", "input": "Array: [1, 2, 3, 4, 5]", "output": "function deleteItems(arr, itemToDelete) {\n return arr.filter(item => item !== itemToDelete);\n}\n\nlet array = [1, 2, 3, 4, 5];\nlet itemToDelete = 3;\nlet newArray = deleteItems(array, itemToDelete);\n\nconsole.log(newArray);  // [1,2,4,5]", "category": "Python"}, {"instruction": "Calculate the final price of a product after applying a 5% discount.", "input": "Price: $100", "output": "var price = 100;\nvar discount = 0.05;\nvar finalPrice = price - (price * discount);\n\nconsole.log(\"Final Price: $\" +finalPrice);", "category": "Python"}, {"instruction": "Produce a Java program that converts miles to kilometers.", "input": "Miles: 10", "output": "class MilesToKilometers {\n public static void main(String[] args) {\n \n // Convert miles to kilometers\n double miles = 10;\n double kilometers = miles * 1.60934;\n \n System.out.println(\"Miles: \" + miles);\n System.out.println(\"Kilometers: \" + kilometers);\n }\n}", "category": "Python"}, {"instruction": "Develop a program to identify the highest number in a given array.", "input": "Array: [2, 5, 15, 4, 7, 10]", "output": "int highestNum = 0;\n\nforeach (int num in array) {\n if (num > highestNum) {\n highestNum = num;\n }\n}\n\nConsole.WriteLine(\"The highest number in the array is \" + highestNum);", "category": "Python"}, {"instruction": "Swap the first and last items in a given list.", "input": "my_list = [3, 4, 8, 11, 5]", "output": "def swap_first_last(my_list):\n    my_list[0], my_list[-1] = my_list[-1], my_list[0]\n    return my_list", "category": "Python"}, {"instruction": "Write a function to create an new array of given size by copying the elements of given array.", "input": "input_list = [1, 2, 3, 4, 5]\nsize = 3", "output": "def create_new_list(input_list, size):\n    return input_list[:size]", "category": "Python"}, {"instruction": "Create a function that takes a string representation of a JSON object and converts it into a Python dictionary.", "input": "", "output": "def json_to_dict(json_str):\n    return json.loads(json_str)", "category": "Python"}, {"instruction": "Write a function to sort a dictionary of dictionaries in descending order based on a given key.", "input": "d = {'dict1': {'name':'tom','age':20}, \n     'dict2': {'name':'jerry','age':25},\n     'dict3': {'name':'bill','age':24}}\nkey = 'age'", "output": "def sort_dict_of_dicts(d, key):\n    sorted_dict = dict(sorted(d.items(), key = \n             lambda kv:(kv[1][key], kv[0]),reverse=True))\n    return sorted_dict", "category": "Python"}, {"instruction": "Construct an algorithm that checks if the given sequence is an arithmetic sequence.", "input": "", "output": "def is_arithmetic_sequence(sequence):\n    is_arithmetic = True\n    diff = 0\n    for i in range(1, len(sequence)):\n        if i ==1:\n            diff = sequence[i]-sequence[i-1]\n        else:\n            new_diff = sequence[i]-sequence[i-1]\n            if new_diff != diff:\n                is_arithmetic = False\n                break\n    return is_arithmetic", "category": "Python"}, {"instruction": "Create a class that can be used to filter a given list of numbers using a given condition.", "input": "nums = [3,6,7,2,1,12,14]\ncondition = lambda x: x>5", "output": "class FilterList:\n    def __init__(self, nums, condition):\n        self.nums = nums\n        self.condition = condition\n       \n    def __iter__(self):\n        for num in self.nums:\n            if self.condition(num):\n                yield num", "category": "Python"}, {"instruction": "Find the nth Fibonacci number in a given range.", "input": "", "output": "def get_nth_fibonacci_number(n):\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return get_nth_fibonacci_number(n-1)+get_nth_fibonacci_number(n-2)", "category": "Python"}, {"instruction": "Given a list of valid times, return the duration in seconds between two times.", "input": "time1 = \"23:45:17\"\ntime2 = \"01:30:12\"", "output": "def calculate_duration_in_seconds(time1, time2):\n    start = datetime.strptime(time1, \"%H:%M:%S\")\n    end = datetime.strptime(time2, \"%H:%M:%S\")\n    duration = end-start\n    return int(duration.total_seconds())", "category": "Python"}, {"instruction": "For each tuple in a given list, write a function to get the first element.", "input": "[(1,2), (3,4), (5,6)]", "output": "def get_first_element(tuples):\n  return [t[0] for t in tuples]", "category": "Python"}, {"instruction": "Write a function to compute the maximum depth of binary tree from a given list of numbers.", "input": "nums = [3,9,20,None,None,15,7]", "output": "def get_max_depth(nums):\n    max_depth = 0\n    curr_depth = 0\n    for n in nums:\n        if n is None:\n            max_depth = max(max_depth, curr_depth)\n            curr_depth -= 1\n        else:\n            curr_depth += 1\n    return max_depth", "category": "Python"}, {"instruction": "Find all prime numbers up to a given number.", "input": "", "output": "def list_primes(n): \n    primes = [] \n    for num in range(2, n+1): \n        prime=True\n        for i in range(2, int(num/2)+1):\n            if num%i == 0:\n                prime=False\n        if prime:\n            primes.append(num)\n    return primes", "category": "Python"}, {"instruction": "Implement a class method in C++ that takes a string parameter, checks to see if it is all uppercase, and outputs a Boolean value.", "input": "", "output": "class MyClass\n{\n    public:\n        bool isUpper(string str)\n        {\n            for(int i = 0; i < str.length(); i++)\n            {\n                if (islower(str[i])) \n                    return false; \n            }\n            return true; \n        }\n};", "category": "Python"}, {"instruction": "Generate five lines of code that will calculate the area of the following regular triangle.", "input": "base = 5\nheight = 4", "output": "base_square = base * base\nheight_square = height * height\nbase_times_height = base * height\narea_numerator = base_square + height_square + base_times_height\narea_denominator = 2\narea = area_numerator / area_denominator", "category": "Python"}, {"instruction": "Create one line of code to sum the contents in a given array.", "input": "my_array = [2, 3, 5, 7, 11]", "output": "sum_of_array = sum(my_array)", "category": "Python"}, {"instruction": "Construct a loop that will print the upside down triangle shape below.", "input": "*\n**\n***\n****\n*****", "output": "for i in range(1, 6):\n    print('*'*i)", "category": "Python"}, {"instruction": "Write a function to return the count of all prime numbers from 1 to n (inclusive).", "input": "", "output": "def count_primes(n):\n  count = 0\n  for i in range(2, n+1):\n    is_prime = True\n    for j in range(2, i):\n      if i % j == 0:\n        is_prime = False\n        break\n    if is_prime:\n      count += 1\n  return count", "category": "Python"}, {"instruction": "Edit the following html code by bolding and italicizing the \"Hello World\" text.", "input": "<h1>Hello World</h1>", "output": "<h1><b><i>Hello World</i></b></h1>", "category": "Python"}, {"instruction": "Write a function to search in a 1D array of integers, and return the index of the target if it is present.", "input": "arr = [1, 4, 5, 6, 7, 9, 3, 2]\ntarget = 8", "output": "def linear_search(arr, target):\n  for i in range(len(arr)):\n    if arr[i] == target:\n      return i\n  return -1 # target not found", "category": "Python"}, {"instruction": "Construct a loop in PHP to add all elements from an array [2, 3, 8, 9].", "input": "[2, 3, 8, 9]", "output": "<?php\n$ary = [2, 3, 8, 9];\n$sum = 0;\n\nforeach ($ary as $value) {\n $sum += $value;\n}\n\necho \"The sum is \" . $sum;\n?>", "category": "Python"}, {"instruction": "Rewrite the code to make it run asynchronously in Node.js.", "input": "const userData = getUserDataSync();\nconst posts = getPostsSync(userData.username);\ndisplayPosts(posts);", "output": "getUserData(userData => {\n getPosts(userData.username, posts => {\n  displayPosts(posts);\n });\n});", "category": "Python"}, {"instruction": "Construct an if/else statement in Javascript to display a message depending on the value of a variable called \"age\".", "input": "let age = 17", "output": "if (age < 18) {\n console.log(\"You are not old enough to access this page.\");\n}\nelse {\n console.log(\"Welcome to the page!\");\n}", "category": "Python"}, {"instruction": "Compute the square root of 150 using C++.", "input": "", "output": "#include <iostream>\n#include <math.h>\n\nusing namespace std;\n\nint main()\n{\ndouble n = 150;\ncout << \"The square root of \" << n << \" is: \" << sqrt(n) << endl;\nreturn 0;\n}", "category": "Python"}, {"instruction": "Write a function that takes two strings and compare to see if they have the same set of characters.", "input": "string1 = \"Listen\"\nstring2 = \"Silent\"", "output": "def are_char_sets_equal(string1, string2):\n    set1 = set(string1.lower())\n    set2 = set(string2.lower())\n    return set1 == set2", "category": "Python"}, {"instruction": "Construct a SQL query to list the titles and prices of books from the \"Books\" table.", "input": "", "output": "SELECT title, price FROM Books;", "category": "Python"}, {"instruction": "Implement a quicksort algorithm in Python to sort a list of 6 integers [52,85,23,6,37,77].", "input": "[52,85,23,6,37,77]", "output": "def quicksort(nums):\n    if len(nums) <= 1:\n        return nums\n    else:\n        pivot = nums[0]\n        less = [i for i in nums[1:] if i <= pivot]\n        greater = [i for i in nums[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n\nprint(quicksort([52,85,23,6,37,77]))", "category": "Python"}, {"instruction": "Alter the following program such that it returns the complement of the given list.", "input": "def get_complement(lst):\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(1 - lst[i])\n    return new_lst", "output": "def get_complement(lst):\n    return [1 - item for item in lst]", "category": "Python"}, {"instruction": "Create a program that takes a number n and prints the pattern given below.", "input": "n = 3", "output": "for i in range(n):\n    for j in range(i+1):\n        print('*', end=\" \")\n    print()", "category": "Python"}, {"instruction": "Design a MySQL table with two columns, id and name.", "input": "", "output": "CREATE TABLE table_name ( \n    id INT NOT NULL PRIMARY KEY AUTO_INCREMENT, \n    name VARCHAR(30) NOT NULL \n);", "category": "Python"}, {"instruction": "Write a JavaScript function that checks if a given parameter is a leap year.", "input": "", "output": "function isLeapYear(year) { \n    return (year % 400 === 0) || ((year % 4 === 0) && (year % 100 != 0)); \n}", "category": "Python"}, {"instruction": "Construct a one-liner that takes a dictionary and reverses the keys and values of the dictionary.", "input": "my_dict = {'Tony': 3, 'Peter': 4}", "output": "my_dict = dict(zip(my_dict.values(), my_dict.keys()))", "category": "Python"}, {"instruction": "Implement a function that will take a parameter input and return the length of the parameter.", "input": "", "output": "def get_length(param):\n    return len(param)", "category": "Python"}, {"instruction": "Generate a random 3x3 array using Java.", "input": "", "output": "Random r = new Random();\nint[][] arr = new int[3][3];\n\nfor (int i = 0; i < 3; i++) {\n for(int j = 0; j < 3; j++){\n arr[i][j] = r.nextInt();\n }\n}", "category": "Python"}, {"instruction": "Find an example of a sorting algorithm in Python.", "input": "", "output": "Example of a sorting algorithm in Python:\n\ndef selection_sort(arr):\n    for i in range(len(arr)):\n        # Find the minimum element in remaining\n        # unsorted array\n        min_idx = i\n        for j in range(i + 1, len(arr)):\n            if arr[min_idx] > arr[j]:\n                min_idx = j\n \n        # Swap the found minimum element with\n        # the first element\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]", "category": "Python"}, {"instruction": "Construct an HTML page with a navigation bar and two sections.", "input": "", "output": "<html>\n  <head>\n    <title>Navigation Bar Example</title>\n  </head>\n  <body>\n    <ul>\n      <li>Home</li>\n      <li>About</li>\n      <li>Contact</li>\n    </ul>\n    <div>\n      <h1>Home</h1>\n      <p>This is the home page.</p>\n    </div>\n    <div>\n      <h1>About</h1>\n      <p>This is the about page.</p>\n    </div>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a logic to obtain boolean output from a given comparison.", "input": "", "output": "def compare(a, b):\n    if a < b:\n        return True\n    else:\n        return False", "category": "Python"}, {"instruction": "Generate a HTML page with a table", "input": "", "output": "<html>\n    <head>\n        <title>Table</title>\n    </head>\n    <body>\n        <table>\n            <tr>\n                <th>Name</th>\n                <th>Age</th>\n            </tr>\n            <tr>\n                <td>John</td>\n                <td>20</td>\n            </tr>\n            <tr>\n                <td>Bob</td>\n                <td>22</td>\n            </tr>\n        </table>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Write a class with a 'hello world' method", "input": "", "output": "class HelloWorld:\n    def hello_world(self):\n        print(\"Hello World\")", "category": "Python"}, {"instruction": "Compute the length of a string", "input": "String: Hello World", "output": "length = len(\"Hello World\")\nprint(length)\n\n# Output\n11", "category": "Python"}, {"instruction": "Use RegEx to identify words in a string", "input": "String: I have 2 apples and 3 bananas", "output": "import re\nstring = \"I have 2 apples and 3 bananas\"\nwords = re.findall(r'\\w+', string)\nprint(words)\n\n# Output\n['I', 'have', '2', 'apples', 'and', '3', 'bananas']", "category": "Python"}, {"instruction": "Create a for loop to print out the square of the numbers between 10 and 20", "input": "", "output": "for i in range(10,21):\n    print(i**2)", "category": "Python"}, {"instruction": "Design an Android application to store a user's sensor data", "input": "", "output": "The application will allow users to store their sensor data such as location, temperature and pressure with a timestamp. The application will have a user interface to allow users to input their sensor data as well as view their stored data. The application will also have a settings page where they can configure the kinds of sensor data they want to store.", "category": "Python"}, {"instruction": "Create a data visualization of the following data set with the target variable as red and the predictor variables as blue.", "input": "data = [[1, 2, 1, 0],\n        [2, 4, 0, 1],\n        [2, 3, 0, 1],\n        [3, 6, 1, 0]]", "output": "import matplotlib.pyplot as plt \n\nx_1 = [1, 2, 2, 3]\nx_2 = [2, 4, 3, 6]\n\ntarget = [1, 0, 1, 0]\n\nfor i in range(len(x_1)):\n    c = 'r' if target[i] == 1 else 'b'\n    plt.scatter(x_1[i], x_2[i], marker='o', c=c) \n\nplt.title(\"Data Visualization\") \nplt.xlabel(\"x_1\") \nplt.ylabel(\"x_2\") \n  \nplt.show()", "category": "Python"}, {"instruction": "Describe a classification problem in machine learning.", "input": "", "output": "In machine learning, classification is the process of predicting a class label for an input sample. A class label is a discrete value that describes a group or category that an input belongs to. The input may have multiple features, also known as attributes or predictors, that can be used in the prediction process. A classification algorithm takes these features as input and assigns a label to the given input sample. Examples of classification problems include image recognition, medical diagnosis, language processing, and fraud detection.", "category": "Python"}, {"instruction": "Write a MATLAB function for calculating the sum of two matrices.", "input": "", "output": "function s = addMatrices(A,B)\n  s = A + B;\nend", "category": "Python"}, {"instruction": "Create a list of strings in Python with 4 elements.", "input": "", "output": "mylist = ['Hello', 'World', 'This', 'Is']", "category": "Python"}, {"instruction": "Generate a sentence using GPT-3.", "input": "GPT-3 is an AI language model developed by OpenAI.", "output": "GPT-3 is an advanced AI language model that can generate sentences and paragraphs of text that are relevant and coherent to a given context.", "category": "Python"}, {"instruction": "Write a Bash script to accept two command line arguments (username and password) and echo them out.", "input": "", "output": "#!/bin/bash\n\nusername=$1\npassword=$2\necho \"Username: ${username}\"\necho \"Password: ${password}\"", "category": "Python"}, {"instruction": "Create a React component with two TextInputs.", "input": "", "output": "import React from 'react';\n\nconst TwoTextInputsForm = () => {\n  return (\n    <>\n      <TextInput label=\"Email Address\" />\n      <TextInput label=\"Password\" />\n    </>\n  );\n};\n\nexport default TwoTextInputsForm;", "category": "Python"}, {"instruction": "Create a class in Java called Employee with the following fields (name, ID, department).", "input": "", "output": "class Employee { \n  \n    // Field \n    String name; \n    int id; \n    String department; \n  \n    // Constructor \n    Employee(String name, int id, String department) \n    { \n        this.name = name; \n        this.id = id; \n        this.department = department; \n    } \n}", "category": "Python"}, {"instruction": "Edit the following HTML code to add the class \"highlighted\" to the paragraph.", "input": "<p>This is a test paragraph</p>", "output": "<p class=\"highlighted\">This is a test paragraph</p>", "category": "Python"}, {"instruction": "Create a query in SQL that will display the first name, last name and department of all employees in the table.", "input": "Employee Table:\n|first_name | last_name | department |\n--------------------------------------\n| John      | Doe       | Marketing  |", "output": "SELECT first_name, last_name, department\nFROM Employee;", "category": "Python"}, {"instruction": "How can we sort an array of numbers in ascending order in Python?", "input": "", "output": "sorted_numbers = sorted(numbers)  # returns a sorted list of numbers in ascending order.", "category": "Python"}, {"instruction": "Generate a Bash script that runs a command and print the output.", "input": "Command: echo \"Hello, World!\"", "output": "#!/bin/bash\n\necho \"Hello, World!\"", "category": "Python"}, {"instruction": "Transform the following array into a string of comma-separated values in Python.", "input": "[1, 2, 3, 4]", "output": "','.join([str(i) for i in [1, 2, 3, 4]]) # returns \"1,2,3,4\"", "category": "Python"}, {"instruction": "Suggest an enhancement to the following code to support unicode strings.", "input": "def replace_char(string, char_old, char_new):\n    for i in range(len(string)):\n       if string[i] == char_old:\n            string[i] = char_new\n    return string", "output": "def replace_char(string, char_old, char_new):\n    new_string = ''\n    for char in string:\n        if char == char_old:\n            new_string = new_string + char_new\n        else:\n            new_string = new_string + char\n    return new_string", "category": "Python"}, {"instruction": "Modify the given code to handle errors in the following Python script.", "input": "num = int(input('Enter a number'))\nprint(num * 5)", "output": "try:\n    num = int(input('Enter a number'))\n    print(num * 5)\nexcept Exception as e:\n    print(\"Error: {}\".format(e))", "category": "Python"}, {"instruction": "Create a header comment for the following python script.", "input": "def add(x, y):\n    return x + y", "output": "\"\"\"\nThis python script contains a function which takes in two arguments and \nreturns the sum of the two arguments.\n\"\"\"\n\ndef add(x, y):\n    return x + y", "category": "Python"}, {"instruction": "Create a for loop that iterates over a string and prints out every letter.", "input": "string = \"Hello\"", "output": "string = \"Hello\"\nfor letter in string:\n  print(letter)\n  \n# Outputs:\n# H\n# e\n# l\n# l\n# o", "category": "Python"}, {"instruction": "Design an algorithm that calculates the sum of all numbers in a given array.", "input": "[2, 4, 7, 10]", "output": "def array_sum(arr): \n    total = 0\n    # Iterate through arr and add elements to total  \n    for i in range (0, len(arr)): \n        total += arr[i] \n    return total \n  \n# Driver code \narr = [2, 4, 7, 10] \nsum = array_sum(arr) \nprint (sum) # -> 23", "category": "Python"}, {"instruction": "Create an object-oriented C# program that prints \"Hello, World!\".", "input": "", "output": "class Program \n{ \n    static void Main(string[] args) \n    { \n        // create an object of type Hello \n        Hello helloObject = new Hello(); \n       \n        // call the SayHello method of the helloObject \n        helloObject.SayHello(); \n    } \n} \n\n// Create a class named Hello \npublic class Hello \n{ \n    public void SayHello() \n    { \n        Console.WriteLine(\"Hello, World!\"); \n    } \n}", "category": "Python"}, {"instruction": "Create a Python script that sets the value of a variable from the command-line.", "input": "", "output": "import sys\n\n# Set a variable\nvariableName = sys.argv[1]\n\n# Get a value from command line argument\nvalue = sys.argv[2]\n\n# Set the value of the variable\nexec(variableName + \"=\" + value)\n\nprint(variableName)", "category": "Python"}, {"instruction": "Write a SQL query to list the unique office locations which are older than 5 years.", "input": "", "output": "SELECT DISTINCT location\nFROM office\nWHERE (CURRENT_DATE - date_established) > (5 YEARS)", "category": "Python"}, {"instruction": "Write a JavaScript function that takes two numbers and a mathematical operator as parameters and returns the result of the specified operation.", "input": "x = 6, y = 3, operator = '*'", "output": "function calculate(x, operator, y) {\n switch (operator) {\n  case '+':\n   return x + y;\n  case '-':\n   return x - y;\n  case '*':\n   return x * y;\n  case '/':\n   return x / y;\n  case '%':\n   return x % y;\n  default:\n   return NaN;\n }\n}\n\nlet result = calculate(6, '*', 3);\nconsole.log(result); // 18", "category": "Python"}, {"instruction": "Create an SQL query that returns all customers in New York state who have purchased a product in the last 6 months.", "input": "", "output": "SELECT *\nFROM customers\nWHERE state = 'New York'\nAND purchase_date >= DATE_SUB(NOW(), INTERVAL 6 MONTH)", "category": "Python"}, {"instruction": "Edit the following HTML code to include a JavaScript alert that appears when a user clicks the button.", "input": "<button>Click Me!</button>", "output": "<button onclick=\"alert('You have clicked the button!')\">Click Me!</button>", "category": "Python"}, {"instruction": "Write a function in Java that can be used to search an array and return the index of the element.", "input": "", "output": "public static int searchArray(int[] arr, int x) {\n    for(int i = 0; i < arr.length; i++) {\n        if (arr[i] == x)\n            return i;\n    }\n    return -1;\n}", "category": "Python"}, {"instruction": "Transform the following string in Python into a dictionary whose keys are the names of the colors and the values are the hex codes for the colors.", "input": "\"red #FF0000, blue #0000FF, green #00FF00\"", "output": "colors = 'red #FF0000, blue #0000FF, green #00FF00'\n\ndict_colors = {i.split()[0]:i.split()[1] for i in colors.split(', ')} # returns {'red': '#FF0000', 'blue': '#0000FF', 'green': '#00FF00'}", "category": "Python"}, {"instruction": "Create a query in MySQL that returns the names and ages of all people in the table over 18.", "input": "Table: People\n| name | age |\n--------------\n| John | 21  |", "output": "SELECT name, age \nFROM People \nWHERE age > 18;", "category": "Python"}, {"instruction": "Modify the following HTML code to add a new div element inside the existing div.", "input": "<div>\n   Hello, world!\n</div>", "output": "<div>\n   <div>New div element</div>\n   Hello, world!\n</div>", "category": "Python"}, {"instruction": "write a function in R that rounds a number to two decimal places", "input": "", "output": "round_two_places <- function(x) {\n  return (round(x, 2))\n}", "category": "Python"}, {"instruction": "Design an algorithm that determines the greatest common multiple of two numbers.", "input": "", "output": "def gcm(x, y): \n    if(x > y): \n        gcm = x \n    else: \n        gcm = y \n  \n    while(True): \n        if((gcm % x == 0) and (gcm % y == 0)): \n            return gcm \n        gcm = gcm + 1\n  \n# Driver Program \nx = 12\ny = 18\nprint(gcm(x, y))", "category": "Python"}, {"instruction": "Change the output format of the following code to convert it to a dictionary.", "input": "list1 = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]", "output": "dict1 = dict(list1)\nprint(dict1)", "category": "Python"}, {"instruction": "Create a MongoDB document to store a user's profile with the following information: name, email, profile_image.", "input": "name = \"John Doe\"\nemail = \"jdoe@example.com\"\nprofile_image = \"https://example.com/images/jdoe.png\"", "output": "user = {\n  'name': 'John Doe', \n  'email': 'jdoe@example.com',\n  'profile_image': 'https://example.com/images/jdoe.png'\n}", "category": "Python"}, {"instruction": "Write a function to convert a given integer number toRoman numerals.", "input": "", "output": "def intToRoman(num): \n  \n    val = [ \n            1000, 900, 500, 400, \n            100, 90, 50, 40, \n            10, 9, 5, 4, \n            1 \n            ] \n    rom_num = [ \n                \"M\", \"CM\", \"D\", \"CD\", \n                \"C\", \"XC\", \"L\", \"XL\", \n                \"X\", \"IX\", \"V\", \"IV\", \n                \"I\"\n                ] \n  \n    res = \"\" \n    i = 0\n    while num > 0: \n  \n        # Find the greatest value smaller \n        # than the given number num \n        div = num // val[i] \n  \n        # Update the number after each \n        # iteration \n        num = num % val[i] \n  \n        # Concatenate the roman characters \n        # equal to the power value of div \n        while div > 0: \n            res = res + rom_num[i] \n            div = div - 1\n        \n        i = i + 1\n  \n    return res \n  \n# Driver code \nnum = 12\nprint(intToRoman(num))", "category": "Python"}, {"instruction": "Develop a code in C for printing the elements of a linked list.", "input": "", "output": "struct Node{ \n    int data; \n    struct Node *next; \n}; \n\n// Function to print the elements of the linked list\nvoid printList(struct Node *node) \n{ \n    while (node != NULL) { \n        printf(\"%d \", node->data); \n        node = node->next; \n    } \n}", "category": "Python"}, {"instruction": "Generate a query to find the average age of students enrolled in a course with given course ID.", "input": "course_id = 101", "output": "SELECT AVG(age) \nFROM students \nWHERE course_id = 101;", "category": "Python"}, {"instruction": "Write an R function to print the contents of a dataframe.", "input": "", "output": "print_dataframe<- function(data){\n  print(data)\n}", "category": "Python"}, {"instruction": "Write an algorithm to generate a random string of length n.", "input": "8", "output": "import random \n\ndef randomString(n): \n    # Choose a character set\n    charSet = \"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    # Generate a string of length n\n    myString = \"\" \n    for i in range(n):  \n        myString += random.choice(charSet)  \n    return myString", "category": "Python"}, {"instruction": "Develop a DFS algorithm in Python.", "input": "", "output": "def dfs(graph, start, end):\n    # create a visited array\n    visited = [False] * len(graph)\n\n    # create a stack\n    stack = []\n\n    # mark the starting node as visited and push it in the stack\n    stack.append(start)\n\n    while stack:\n        # get the current node\n        node = stack.pop()\n\n        # if the node hasn't been visited\n        if not visited[node]:\n            # mark the node as visited\n            visited[node] = True\n\n            # check for the end node\n            if node == end:\n                return True\n\n            # append the neighbors of the node to the stack\n            neighbors = graph[node]\n            for neighbor in neighbors:\n                stack.append(neighbor)\n\n    # end node not found\n    return False", "category": "Python"}, {"instruction": "Create a database table for student information with the following attributes: Name, Age, Year, and GPA.", "input": "", "output": "CREATE TABLE StudentInformation (\n    Name VARCHAR (50) NOT NULL, \n    Age INT NOT NULL,\n    Year INT NOT NULL,\n    GPA DECIMAL (3, 2) NOT NULL\n);", "category": "Python"}, {"instruction": "Construct an algorithm for reversing a string.", "input": "", "output": "def reverse_string(s):\n    # Initialize empty string\n    rev_string = \"\"\n    # Traverse over each letter in the string in reverse order\n    for letter in s[::-1]:\n        # Append the current letter to the end of rev_string\n        rev_string = rev_string + letter\n    # Return the reversed string\n    return rev_string", "category": "Python"}, {"instruction": "Create a data structure for a streaming interface that holds a maximum of 5 numbers.", "input": "", "output": "class Stream:\n    def __init__(self):\n        self.stream = [None, None, None, None, None]\n\n    # This function adds a number to the start (index 0) of the stream and then shifts the other elements to the right\n    def add(self, num):\n        for i in reversed(range(1, len(self.stream))):\n            self.stream[i] = self.stream[i-1]\n\n        self.stream[0] = num\n\n    # This function returns a list of the current elements from the stream\n    def list(self):\n        return self.stream", "category": "Python"}, {"instruction": "Compare two array and output the result in Boolean.", "input": "arr1 = [1, 2, 3, 4]\narr2 = [4, 3, 2, 1]", "output": "True", "category": "Python"}, {"instruction": "Construct an if-else statement to print \"Good Evening\" if the time is past 5pm and print \"Good Morning\" otherwise.", "input": "", "output": "import time\n\nt = time.localtime()\n\nif t.tm_hour >= 17: \n    print(\"Good Evening!\")\nelse: \n    print(\"Good Morning!\")", "category": "Python"}, {"instruction": "Write a JavaScript Object that contains employee data such as name, age and contact number.", "input": "", "output": "let employeeDetails = { \n  name: \"John Smith\", \n  age: 26, \n  contactNumber: \"123-456-7890\"\n};", "category": "Python"}, {"instruction": "Given an integer 'base' and an integer 'exponent', write a function to calculate the result of 'base' raised to the power of 'exponent'.", "input": "base: 2 \nexponent: 3", "output": "def power(base, exponent):\n    result = 1\n    for _ in range(exponent):\n        result *= base\n    return result", "category": "Python"}, {"instruction": "Construct a for loop that multiplies each item in a given list of numbers by two and stores the value into a new list.", "input": "", "output": "my_list = [1, 2, 3, 4, 5 ] \n\ndoubled_list = []\n\nfor item in my_list: \n    doubled_list.append(item * 2)", "category": "Python"}, {"instruction": "Make a SQL statement to select all the customers from the \"Customers\" table where the customer's city is 'New York'.", "input": "", "output": "SELECT * FROM Customers WHERE City = 'New York';", "category": "Python"}, {"instruction": "Create a new Java program that prints out all the prime numbers between 2 and 1000.", "input": "", "output": "public class PrimeNumbers {\n public static void main(String[] args) {\n  System.out.println(\"Prime numbers between 2 and 1000 are:\");\n  int count;\n \n  for(int i=2; i<=1000; i++){\n      count=0;\n      for(int j=2; j<i; j++){\n          if(i%j==0){\n              count++;\n              break;\n          }\n      }\n      if(count==0)\n          System.out.print(i + \" \");\n  }\n }\n}", "category": "Python"}, {"instruction": "Develop a program to accept one number from the user and display its factorial using a Python function.", "input": "5", "output": "def factorial(num):\n    if num <= 1:\n        return 1\n    else:\n        return num * factorial(num-1) \n    \nnum = int(input('Enter number to find factorial: '))\nfactorial = factorial(num)\nprint('Factorial of', num, 'is', factorial)", "category": "Python"}, {"instruction": "Create a function in JavaScript to convert RGB values to HEX values.", "input": "", "output": "function rgbToHex(arr) {\n  let hex = '#';\n  for (let i = 0; i < 3; i++) {\n    let val = arr[i];\n    if (val < 16) {\n      hex += '0';\n    }\n    hex += val.toString(16);\n  }\n  return hex;\n}", "category": "Python"}, {"instruction": "What is the maximum number of elements that can be stored in an array in C++?", "input": "", "output": "The maximum number of elements that can be stored in an array in C++ is determined by the size of the array's data type, usually the maximum number of elements is 2^32-1 (4,294,967,295).", "category": "Python"}, {"instruction": "Develop a function in Python to filter out all negative numbers in a given list.", "input": "[2, 3, -1, 4, -5, 6]", "output": "def filter_negative_numbers(nums):\n    # return only positive numbers\n    return [num for num in nums if num >= 0]\n\nprint(filter_negative_numbers([2, 3, -1, 4, -5, 6]))", "category": "Python"}, {"instruction": "Construct a Ruby program that prints \"Happy Tuesday!\"", "input": "", "output": "puts \"Happy Tuesday!\"", "category": "Python"}, {"instruction": "Create a function in Python that takes three numerical inputs and returns the maximum value.", "input": "", "output": "def max_value(num1, num2, num3):\n    max_num = max(num1, num2, num3)\n    return max_num", "category": "Python"}, {"instruction": "What is the command line to create a tar archive in Linux?", "input": "", "output": "The command line to create a tar archive in Linux is \"tar -cvf <archive name>.tar <target directory>\". This will create a tar archive with the given name from the provided target directory.", "category": "Python"}, {"instruction": "How do you retrieve the 3rd element of a set in Python?", "input": "", "output": "In Python, you can retrieve the 3rd element of a set by using the index operator []. The 3rd element of a set can be accessed by using the syntax set[2]. Note that the indexing in Python starts from 0, so the 3rd element will have index 2.", "category": "Python"}, {"instruction": "Write a function in C that swaps the first and last value of a given array.", "input": "[1, 2, 3, 4]", "output": "void swapFirstLast(int arr[], int n)\n{\n    int temp = arr[0];\n    arr[0] = arr[n - 1];\n    arr[n - 1] = temp; \n}", "category": "Python"}, {"instruction": "Translate the following words into Spanish: \"Hello\", \"Thank You\", and \"Goodbye\".", "input": "", "output": "Hello = Hola\nThank You = Gracias\nGoodbye = Adi\u00f3s", "category": "Python"}, {"instruction": "Segregate a given array of numbers into even and odd.", "input": "[1, 2, 3, 4, 5]", "output": "even_numbers = [2, 4]\nodd_numbers = [1, 3, 5]", "category": "Python"}, {"instruction": "Create a list in Python called \"my_list\" and populate it with five integers ranging from 0 to 5.", "input": "", "output": "my_list = [0, 1, 2, 3, 4, 5]", "category": "Python"}, {"instruction": "Calculate the factorial of 8.", "input": "", "output": "The factorial of 8 is 403", "category": "Python"}, {"instruction": "Create an identifier in Python that starts with an underscore followed by the letter 'a'.", "input": "", "output": "_a", "category": "Python"}, {"instruction": "Create an SQL statement to select the records of students whose age is greater than 25.", "input": "", "output": "SELECT * FROM Students WHERE Age > 25;", "category": "Python"}, {"instruction": "Create a python function that takes a single integer as an argument and prints out the corresponding multiplication table.", "input": "", "output": "def print_table(n):\n    for i in range(1, 11):\n        table = n * i\n        print(f\"{n} X {i} = {table}\")", "category": "Python"}, {"instruction": "How would you create a program in C++ to calculate the average of 10 numbers?", "input": "", "output": "#include <iostream>\nusing namespace std;\n\n// Function to calculate average\ndouble getAverage(int nums[], int n) \n{ \n    int sum = 0; \n    for (int i = 0; i < n; i++) { \n        sum += nums[i]; \n    } \n  \n    double average = double(sum) / n; \n  \n    return average; \n} \n\nint main() \n{ \n    int nums[10]  = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; \n    int n = sizeof(nums) / sizeof(nums[0]); \n    cout << \"Average = \" << getAverage(nums, n); \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Write a function in JavaScript that returns the longest item in the array.", "input": "[\"a\", \"ab\", \"abc\", \"abcd\"]", "output": "function longestItem(arr) {\n    // Initializing the longest item to the first item in the array for comparison\n    let longest = arr[0];\n    for (let item of arr) {\n        // Comparing the length of each item to the longest\n        if (item.length > longest.length) {\n            longest = item;\n        }\n    }\n\n    return longest;\n}\n\nconsole.log(longestItem([\"a\", \"ab\", \"abc\", \"abcd\"]));", "category": "Python"}, {"instruction": "What is the best way to sort an array in C#?", "input": "", "output": "The best way to sort an array in C# is to use the Array.Sort() method, which implements the Quicksort algorithm. This algorithm is efficient and typically uses O(n log n) complexity.", "category": "Python"}, {"instruction": "Implement a function in AngularJS to register a new user.", "input": "", "output": "angular.module(\"app\").factory(\"register\", function($http) {\n  return {\n    registerUser: function(userData) {\n      return $http.post(\"/api/register\", {\n        userData: userData\n      });\n    }\n  };\n});", "category": "Python"}, {"instruction": "Query an SQL table called \"Students\" to get the names of all the enrolled students.", "input": "", "output": "SELECT Name FROM Students;", "category": "Python"}, {"instruction": "Suggest a way of converting the following JSON object into CSV format.", "input": "data = {\n    \"Name\": \"John Doe\",\n    \"Age\": \"50\",\n    \"Gender\": \"Male\"\n}", "output": "import csv \n\ndef json_to_csv(data):\n    csv_data = [list(data.values())]\n    with open('data.csv', 'w') as f:\n        writer = csv.writer(f)\n        writer.writerows(csv_data)\n    \njson_to_csv(data)", "category": "Python"}, {"instruction": "Construct a for loop that prints the square of each number from 1 to 10 and also prints an asterisk after each square.", "input": "", "output": "for x in range(1,11): \n    result = x * x\n    print(result, \"*\")", "category": "Python"}, {"instruction": "Write a C# script to print the string \"Hello, World!\" three times", "input": "", "output": "for (int i=0; i < 3; i++) {\n  Console.WriteLine(\"Hello, World!\");\n}", "category": "Python"}, {"instruction": "What is the significance of include guard in C++?", "input": "", "output": "Include guards are used to prevent multiple declarations of the same header file. They are typically used to ensure that a header file is included only once in a project. This helps to avoid potential conflicts between different declarations of the same header file in different places.", "category": "Python"}, {"instruction": "What is a function pointer?", "input": "", "output": "A function pointer is a variable that holds the address of a function. It can be used to invoke a specific function based on the address stored in the pointer. It is commonly used in C and C++.", "category": "Python"}, {"instruction": "Structure an HTML form taking inputs of name, age, and email address.", "input": "", "output": "<form>\n  <label>Name:</label>\n  <input type=\"text\" name=\"name\" />\n  \n  <label>Age:</label>\n  <input type=\"number\" name=\"age\" />\n\n  <label>Email:</label>\n  <input type=\"email\" name=\"email\" />\n</form>", "category": "Python"}, {"instruction": "Write a Java program to ask the user to enter a number and then find and print the corresponding Fibonacci number.", "input": "", "output": "public class Fibonacci{\n\tpublic static int findFibonacci(int n){\n\t\tif(n == 0){\n\t\t\treturn 0;\n\t\t}\n\t\tif(n == 1){\n\t\t\treturn 1;\n\t\t}\n\t\treturn findFibonacci(n-1) + findFibonacci(n-2);\n\t}\n\t\n\tpublic static void main(String args[]){\n\t\tScanner in = new Scanner(System.in);\n\t\tSystem.out.println(\"Enter a number:\");\n\t\tint n = in.nextInt();\n\t\tSystem.out.println(\"The Fibonacci number is \" +\n\t\t\t\t\t\t\tfindFibonacci(n));\n\t}\n}", "category": "Python"}, {"instruction": "Create a Swift program to remove duplicates from a given array.", "input": "", "output": "func removeDuplicates(_ array: inout [Int]) -> [Int] {\n    var encountered = Set<Int>()\n    var result: [Int] = []\n\n    for element in array {\n        if encountered.contains(element) {\n            // Do not add a duplicate element.\n        } else {\n            // Add value to the set.\n            encountered.insert(element)\n            // Append the element.\n            result.append(element)\n        }\n    }\n    return result\n}", "category": "Python"}, {"instruction": "debug the following code in Java to list all the prime numbers until 50", "input": "class Main {\n    public static void main(String[] args) {\n        for(int i = 0; i < 50; i++) {\n            if (isPrime(i)) {\n                System.out.println(i);\n            }\n        }\n    }\n    static boolean isPrime(int n){\n\n    }\n}", "output": "class Main {\n    public static void main(String[] args) {\n        for(int i = 0; i < 50; i++) {\n            if (isPrime(i)) {\n                System.out.println(i);\n            }\n        }\n    } \n    static boolean isPrime(int n){\n        if (n <= 1) { \n            return false; \n        } \n        for (int i = 2; i < n; i++) { \n            if (n % i == 0) { \n                return false; \n            } \n        } \n    return true; \n    } \n}", "category": "Python"}, {"instruction": "Write a script in Python to remove the characters from the given string which are not in the alphabet.", "input": "string=\"!!He##ll%o W..or##ld!!\"", "output": "new_string = \"\"\nfor char in string:\n    if char.isalpha():\n        new_string += char\n\nprint (new_string)", "category": "Python"}, {"instruction": "Create a query in SQL to list all the employees with their salary, who work in the IT department and have more than 10 years of experience.", "input": "", "output": "SELECT\n    e.name AS \"Employee\",\n    e.salary AS \"Salary\"\nFROM\n    employee e\nWHERE\n    e.department = 'IT'\n    AND e.experience > 10;", "category": "Python"}, {"instruction": "Compute the sum of the prime numbers from 0 to n using Java.", "input": "n = 10", "output": "public class PrimeSum{\n    public static int sumOfPrime(int n){\n        int sum = 0;\n        for(int i=2; i<=n; i++){\n            if(isPrime(i))\n                sum += i;\n        }\n        return sum;\n    }\n    private static boolean isPrime(int n){\n        for(int i=2; i<n; i++){\n            if(n%i == 0)\n                return false;\n        }\n        return true;\n    }\n}", "category": "Python"}, {"instruction": "Modify the Python code so that it can be used to find the GCD of 3 numbers.", "input": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n\n    return a", "output": "def gcd(a, b, c): \n    if(b==0 and c==0): \n        return a \n    if(c==0): \n        return gcd(b, a % b) \n    return gcd(gcd(a, b), c)", "category": "Python"}, {"instruction": "Develop an SQL query to find the name and email address of the employees who do not have any job role.", "input": "", "output": "SELECT emp_name, email_address \nFROM Employees \nWHERE job_role IS NULL;", "category": "Python"}, {"instruction": "Develop an algorithm in C++ to reverse a linked list.", "input": "", "output": "// reversing the linked list\nNode* reverse(Node* head) \n{ \n    Node* prev = NULL; \n    Node* current = head; \n    Node* next; \n    while (current != NULL) { \n        // Store next \n        next = current->next; \n  \n        // Reverse current node's pointer \n        current->next = prev; \n  \n        // Move pointers one position ahead. \n        prev = current; \n        current = next; \n    } \n    head = prev; \n    return head; \n}", "category": "Python"}, {"instruction": "Create a SQL query to find the employees with the highest salary in each job role.", "input": "", "output": "SELECT a.job_role, a.emp_name, a.salary \nFROM employees a\nINNER JOIN (\n    SELECT job_role, MAX(salary) car_max \n    FROM employees \n    GROUP BY job_role\n) b \nON a.job_role=b.job_role AND a.salary=b.car_max;", "category": "Python"}, {"instruction": "Code an algorithm in Java to check if a given array contains duplicate elements.", "input": "arr = [3, 6, 5, 4, 6, 9]", "output": "public static boolean checkDuplicates(int[] arr) {\n\tSet<Integer> set = new HashSet<>();\n\tfor(int number : arr ) {\n\t\tif(!set.add(number)) { \n\t\t\treturn true;\n\t\t} \n\t} \n\treturn false;\n}", "category": "Python"}, {"instruction": "You need to code a function in JavaScript that takes in a string and checks if the length of string is greater than 5 characters.", "input": "", "output": "function checkStringLength(str) {\n  return str.length > 5;\n}", "category": "Python"}, {"instruction": "Modify the following python program to return the sum of even numbers from the input list.", "input": "def sum_list(input):\n    sum = 0\n    for num in input:\n        sum += num\n    return sum", "output": "def sum_list(input):\n    sum = 0\n    for num in input:\n        if num % 2 == 0:\n            sum += num\n    return sum", "category": "Python"}, {"instruction": "Write an SQL query to select distinguish the records with 'Yes' and 'No' for the field 'full_time' from 'employees' table.", "input": "", "output": "SELECT full_time FROM employees WHERE full_time IN ('Yes','No');", "category": "Python"}, {"instruction": "Create an object in JavaScript to store the name, age, and email address of a person.", "input": "", "output": "let person = {\n    name: \"John Doe\",\n    age: 25,\n    email: \"john.doe@example.com\"\n}", "category": "Python"}, {"instruction": "Create a database in SQL and name it \"Contacts\".", "input": "", "output": "CREATE DATABASE Contacts;", "category": "Python"}, {"instruction": "Generate the fibonacci sequence for the first 10 numbers using PHP.", "input": "", "output": "$fib = array(0, 1);\n\nfor ($i = 2; $i < 10; $i++) {\n    $fib[$i] = $fib[$i-1] + $fib[$i-2];\n}       \n\nprint_r($fib); // [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "category": "Python"}, {"instruction": "Write a query to find records created in the last 7 days in a MySQL database.", "input": "table_name: users\n\ncolumn_name: created_at", "output": "SELECT * \nFROM users \nWHERE created_at >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)", "category": "Python"}, {"instruction": "Write a SQL query to find the most recent 5 login dates for each user.", "input": "table_name: users \n\ncolumn_names: user_id, login_date", "output": "SELECT user_id, MAX(login_date) \nFROM users \nGROUP BY user_id \nORDER BY login_date DESC\nLIMIT 5;", "category": "Python"}, {"instruction": "Convert the string \"Hello World\" to all uppercase in JAVA.", "input": "String str = \"Hello World\";", "output": "String strUpper = str.toUpperCase();\n\nSystem.out.println(strUpper); // Prints: HELLO WORLD", "category": "Python"}, {"instruction": "Create a HTML page.", "input": "", "output": "<html>\n<head>\n    <title>My HTML Page</title>\n</head>\n<body>\n    <h1>Hello World!</h1>\n</body>\n</html>", "category": "Python"}, {"instruction": "Evaluate a mathematical expression given as a string.", "input": "expression = \"2 + 3 * 5\"", "output": "import math\n\ndef evaluate_expression(expression):\n    '''Returns the evaluation of a given mathematical expression.'''\n    return eval(expression)\n\n# example\nprint(evaluate_expression(\"2 + 3 * 5\")) # output: 17", "category": "Python"}, {"instruction": "Define a class for a student.", "input": "", "output": "class Student:\n    '''Creates a class object to represent a student.'''\n \n    def __init__(self, name, age, grade):\n        '''Initiate the class with name, age, and grade.'''\n        self.name = name\n        self.age = age\n        self.grade = grade\n \n    def get_name(self): \n        '''Return the student name.'''\n        return self.name\n \n    def get_age(self): \n        '''Return the student age.'''\n        return self.age\n \n    def get_grade(self): \n        '''Return the student grade.'''\n        return self.grade", "category": "Python"}, {"instruction": "Create a Numpy array with 3 columns and 4 rows and assign it to the variable \"my_array\".", "input": "", "output": "my_array = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])", "category": "Python"}, {"instruction": "Explain how binary search works.", "input": "", "output": "Binary search is an efficient search algorithm that works by repeatedly dividing a search space in half. It starts by examining the middle element of the search space. If the middle element is the search element, the search is finished. If the search value is smaller than the middle element, the search continues in the first half of the search space; if it is larger, the search continues in the second half. This process is repeated until the search value is found or the search space is exhausted. Binary search is most effective when the search space is both sorted and uniform. It usually has a time complexity of O(log n).", "category": "Python"}, {"instruction": "What are the benefits of Polymorphism in Object-Oriented Programming?", "input": "", "output": "Polymorphism in Object-Oriented Programming (OOP) allows for objects of different types to share the same interface and behave differently according to their type. This allows a more flexible and efficient codebase, as it eliminates the need to write code specifically for each object type. It also improves the reusability of the code, as a single function can be used to manipulate many different types of objects. Polymorphism also improves readability, as it allows for generic functions and methods to be used without having to know the exact type of the input.", "category": "Python"}, {"instruction": "Given the following code in Python, identify the mistake and fix it.", "input": "name = input(\"What is your name? \"", "output": "name = input(\"What is your name? \") # Missing closing quotation mark", "category": "Python"}, {"instruction": "Name three principles of Object-Oriented Programming.", "input": "", "output": "The three principles of Object-Oriented Programming (OOP) are encapsulation, abstraction, and inheritance. Encapsulation is the process of combining together data and functions in a single unit, such as a class. Abstraction is the process of organizing and simplifying complex data by hiding unnecessary details from the user. Inheritance is the process of establishing a parent-child relationship between two classes and allowing the child class to acquire the properties and behaviors of the parent class.", "category": "Python"}, {"instruction": "Using python, limit the number of characters printed in the following statement to only 10:", "input": "statement = \"Hello, World!\"", "output": "statement = \"Hello, World!\"\n\nprint(statement[:10])", "category": "Python"}, {"instruction": "Write a shell script that takes an input string, calculates its length and prints it out.", "input": "str=\u201dHello world\u201d", "output": "#!/bin/bash\nstr=\"Hello world\"\nlength=${#str}\necho $length", "category": "Python"}, {"instruction": "Create a class named \"Car\" with attributes like \"model\" and \"speed\".", "input": "", "output": "class Car {\n    constructor(model, speed) {\n        this.model = model;\n        this.speed = speed;\n    }\n \n    getModel() {\n        return this.model;\n    }\n \n    getSpeed() {\n        return this.speed;\n    }\n}", "category": "Python"}, {"instruction": "Removes all elements from an array in JavaScript.", "input": "let arr = [1, 2, 3, 4, 5];", "output": "arr.length = 0;", "category": "Python"}, {"instruction": "Compare two strings and remove all letters from the first string which are present in the second string and vice versa.", "input": "string1 = \"Hello World!\"\nstring2 = \"Bye World!\"", "output": "def compare_and_remove_letters(string1, string2):\n    result = \"\"\n    for i in string1:\n        if i not in string2:\n            result += i\n    for i in string2:\n        if i not in string1:\n            result += i\n    return result\n\n# example\nprint(compare_and_remove_letters(\"Hello World!\", \"Bye World!\")) # output: Byelo!", "category": "Python"}, {"instruction": "Create two variables that store two different strings.", "input": "", "output": "string1 = 'Hello World!' \nstring2 = 'This is a test!'", "category": "Python"}, {"instruction": "Write an SQL query that updates the values in the 'exampleTable' so that all the numbers in the 'number' column are increased by 10.", "input": "", "output": "UPDATE exampleTable\nSET number = number + 10;", "category": "Python"}, {"instruction": "Create a SQL query that returns 10 rows of the table 'exampleTable'.", "input": "", "output": "SELECT * FROM exampleTable LIMIT 10;", "category": "Python"}, {"instruction": "Write a Python function to analyze the performance of different sorting algorithms.", "input": "List = [6, 8, 0, 1, 4, 5, 7, 3, 2, 9]", "output": "def analyze_sorting_performance(list):\n    \"\"\"\n    Analyze the performance of different sorting algorithms \n    on the given list. \n    \"\"\"\n    insertion_sort_list = list.copy()\n    insertion_sort(insertion_sort_list)\n    bubble_sort_list = list.copy()\n    bubble_sort(bubble_sort_list)\n    merge_sort_list = list.copy()\n    merge_sort(merge_sort_list)\n    quick_sort_list = list.copy()\n    quick_sort(quick_sort_list)\n    \n    print(\"Insertion Sort: {}\".format(insertion_sort_list))\n    print(\"Bubble Sort: {}\".format(bubble_sort_list))\n    print(\"Merge Sort: {}\".format(merge_sort_list))\n    print(\"Quick Sort: {}\".format(quick_sort_list))", "category": "Python"}, {"instruction": "Modify the following Python program to contain an input.", "input": "num1 = 10\nnum2 = 20\nsum = num1 + num2\n\nprint(\"The sum of two numbers is\",sum)", "output": "num1 = int(input(\"Enter the first number: \"))\nnum2 = int(input(\"Enter the second number: \"))\nsum = num1 + num2\n\nprint(\"The sum of the two numbers is\", sum)", "category": "Python"}, {"instruction": "Write a script in Java for printing the first n Fibonacci numbers.", "input": "", "output": "public class Fibonacci \n{ \n    static int fib(int n) \n    { \n    \tint f[] = new int[n+2]; // 1 extra to handle case, n = 0 \n   \t \tint i; \n\n    \t/* 0th and 1st number of the series are 0 and 1*/\n    \tf[0] = 0; \n    \tf[1] = 1; \n  \n    \tfor (i = 2; i <= n; i++) \n    \t{ \n    \t\tf[i] = f[i-1] + f[i-2]; \n    \t} \n  \n    \treturn f[n]; \n    } \n\n    public static void main (String args[]) \n    { \n    \tint n = 5; \n    \tSystem.out.println(fib(n)); \n    } \n}", "category": "Python"}, {"instruction": "Generate a correct Python code for a data structure which supports the following operations -", "input": "insert(key, value)\nget(key)\ndelete(key)", "output": "class Map(object):\n    \n    def __init__(self): \n        # a dictionary-based data structure \n        # to store (key, value) pairs \n        self.data = {} \n  \n    # insert the given value with the given key \n    def insert(self, key, value): \n        self.data[key] = value     \n  \n    # get the value for the given key \n    def get(self, key): \n        return self.data[key] \n  \n    # delete the datapoint with the given key \n    def delete(self, key): \n        self.data.pop(key)", "category": "Python"}, {"instruction": "Generate a code in Java for sorting an array using Mergesort.", "input": "", "output": "public static void sortMerge (int [] array)  \n{  \n    //Array must have more than one element\n    if (array.length > 1)  \n    {\n        int len = array.length;  \n\n        //Split vector into two halves\n        int mid = len/2;  \n        int left [] = Arrays.copyOfRange (array, 0, mid);   \n        int right [] = Arrays.copyOfRange (array, mid, len);  \n       \n        //Sort each half\n        sortMerge (left);   \n        sortMerge (right);    \n         \n        //Merge the sorted halves\n        int i = 0;  \n        int j = 0;  \n        int k = 0;  \n        while (i<left.length && j<right.length) \n        {  \n            if (left[i]<right[j])  \n            {  \n                array[k]= left[i];  \n                k++;  \n                i++;  \n            }  \n            else   \n            {  \n                array [k] = right[j];  \n                k++;  \n                j++;  \n            }  \n        }  \n        while (i<left.length)  \n        {  \n            array[k] = left[i];  \n            k++;  \n            i++;  \n        }    \n        while (j<right.length)  \n        {  \n            array[k] = right[j];  \n            k++;  \n            j++;  \n        }  \n    }  \n}", "category": "Python"}, {"instruction": "Extract the domain names from the given list of URLs", "input": "url_list = [ \"www.abcd.com\", \"www.something.co.in\", \"www.example.ng\" ]", "output": "def extract_domain(url_list): \n    domains = list() \n    for url in url_list: \n        url_parts = url.split('.')\n        domains.append(url_parts[-2]+'.'+url_parts[-1]) \n    return domains\n\ndomain_list = extract_domain(url_list)", "category": "Python"}, {"instruction": "Sort a list of integers using quicksort", "input": "list = [4,2,1,5,3]", "output": "def quicksort(arr): \n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\n\nsorted_list = quicksort(list)", "category": "Python"}, {"instruction": "Describe the effects when sorting a list using bubble sort", "input": "", "output": "Bubble sort works by comparing adjacent elements of the list and swapping them if they are out of order. It passes through the list multiple times, with each pass through the list moving the highest value elements to their correct position. This process continues until the list is fully sorted.", "category": "Python"}, {"instruction": "Show the query to find the 3rd smallest salary in the 'employee' table", "input": "", "output": "SELECT MIN(salary) \nFROM (SELECT salary FROM employee \n      ORDER BY salary ASC\n      LIMIT 2, 1) as result;", "category": "Python"}, {"instruction": "Create a bash script to concatenate two given strings.", "input": "string1=\"Hello\"\nstring2=\"World\"", "output": "#!/bin/bash\nstring1=\"Hello\"\nstring2=\"World\"\necho $string1$string2", "category": "Python"}, {"instruction": "Write a Javascript code to add four numbers and print the result.", "input": "numbers = [1, 2, 3, 4]", "output": "let numbers = [1, 2, 3, 4];\nlet result = numbers.reduce((a, b) => a + b);\nconsole.log(\"Result: \" + result);", "category": "Python"}, {"instruction": "Define a class in C++ to represent a point in 3-dimensional space.", "input": "", "output": "#include<iostream>\n\nclass Point {\nprivate:\n    int x;\n    int y;\n    int z;\npublic:\n    Point(int x, int y, int z) {\n        this->x = x;\n        this->y = y;\n        this->z = z;\n    }\n    int getX() { return x; }\n    int getY() { return y; }\n    int getZ() { return z; }\n};\n\nint main() {\n    Point p(1, 2, 3);\n    return 0;\n}", "category": "Python"}, {"instruction": "Write an R script to generate a word cloud of a given text.", "input": "text = \"This is a sample text to generate a word cloud.\"", "output": "# Install packages\ninstall.packages(\"wordcloud\")\n\n# Load libraries\nlibrary(tm)\nlibrary(wordcloud)\n\n# Create a text corpus\ntext_corpus <- Corpus(VectorSource(text))\n\n# Generate a word cloud\nwordcloud(text_corpus, min.freq = 1,random.order=FALSE,rot.per=0.35,max.words= 100)", "category": "Python"}, {"instruction": "Write a java code to accept a student name and display a greeting.", "input": "", "output": "import java.util.Scanner;\n\npublic class GreetStudent {\n    public static void main(String[] args) {\n        // Create a Scanner object\n        Scanner scanner = new Scanner(System.in);\n  \n        // Accept a student name\n        System.out.println(\"Please enter student name:\");\n        String studentName = scanner.nextLine();\n\n        // Display a greeting\n        System.out.println(\"Hello, \" + studentName + \"!\");\n    }\n}", "category": "Python"}, {"instruction": "Build a bash script that prints out a string of characters.", "input": "string=\"Hello World\"", "output": "#!/bin/bash\nstring=\"Hello World\"\necho $string", "category": "Python"}, {"instruction": "Create a class in Python that can be used to store the details of a student.", "input": "", "output": "class Student:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n    \n    def set_details(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n    \n    def get_details(self):\n        return f'Name: {self.name}, Age: {self.age}, Gender: {self.gender}'", "category": "Python"}, {"instruction": "Given a list of integers and a target sum, write a function that returns a pair of said integers that add up to the target sum.", "input": "list = [3, 9, -4, 0, -7, 8] and target sum = -4", "output": "def find_pair(lst, target_sum):\n    \"\"\"\n    Given a list of integers and a target sum, \n    this function returns a pair of said integers \n    that add up to the target sum.\n    \"\"\"\n    seen = set()\n    for num in lst:\n        inverse = target_sum - num\n        if inverse in seen:\n            return (num, inverse)\n        seen.add(num)", "category": "Python"}, {"instruction": "Implement a binary search algorithm in Python for searching for a specific element in a given list of numbers.", "input": "list = [1, 3, 5, 7, 9, 11 ] and target number =7", "output": "def binary_search(lst, target):\n\n    \"\"\"\n    Implements a binary search algorithm \n    in Python for searching for a specific \n    element in the given list of numbers.\n    \"\"\"\n    low = 0\n    high = len(lst)-1\n\n    while low <= high:\n        mid = (low + high)//2\n        if lst[mid] == target:\n            return mid\n\n        elif lst[mid] < target:\n            low = mid + 1\n\n        else:\n            high = mid - 1\n\n    return -1", "category": "Python"}, {"instruction": "Write a comprehensive SQL query that returns all the female students who are over 18 years old.", "input": "Table Students\n| id  | gender | age |\n|-----|--------|-----| \n| 1   | female | 20  |\n| 2   | male   | 21  |\n| 3   | female | 17  |\n| 4   | female | 19  |", "output": "SELECT * FROM Students \nWHERE gender = 'female' AND age >= 18", "category": "Python"}, {"instruction": "Remove the duplicates from the array [1, 2, 2, 4, 5, 5].", "input": "[1, 2, 2, 4, 5, 5]", "output": "[1, 2, 4, 5]", "category": "Python"}, {"instruction": "Create a SQLite database named \"mydb\" with two tables \"employees\" and \"departments\".", "input": "", "output": "CREATE DATABASE mydb;\n\nCREATE TABLE employees (\n    employee_id INTEGER PRIMARY KEY,\n    name VARCHAR(50),\n    department_id INTEGER\n);\n\nCREATE TABLE departments (\n    department_id INTEGER PRIMARY KEY,\n    name VARCHAR(50)\n);", "category": "Python"}, {"instruction": "Compute the factorial of the number 7.", "input": "", "output": "5040", "category": "Python"}, {"instruction": "Explain how to handle exceptions using try-catch block in Java.", "input": "", "output": "Exceptions can be handled in Java using try-catch blocks. A try-catch block includes a try statement followed by the catch clauses. The try statement defines the code which can throw an exception, and the catch clause defines an exception handler which handles the exception thrown by the try statement. In the catch block, an object is declared which stores information about the exception that occurred. If an exception is thrown, the control of the program immediately jumps to the catch block. Finally, the catch block executes the catch clause which addresses the issue and the program resumes execution.", "category": "Python"}, {"instruction": "Analyze the sentiment of the sentence \"I am so delighted\".", "input": "", "output": "Positive sentiment.", "category": "Python"}, {"instruction": "How would you merge two sorted linked lists into one?", "input": "", "output": "def mergeLists(l1, l2): \n    dummy = curr = ListNode(0)  \n    while l1 and l2: \n        if l1.val < l2.val: \n            curr.next = l1 \n            l1 = l1.next\n        else: \n            curr.next = l2 \n            l2 = l2.next\n        curr = curr.next\n    curr.next = l1 or l2\n    return dummy.next", "category": "Python"}, {"instruction": "Given a string, write a Java program to verify if it is a valid email address.", "input": "", "output": "public static boolean isValidEmail(String email){\n    String emailRegex = \"^[a-zA-Z0-9_+&*-]+(?:\\\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\\\.)+[a-zA-Z]{2,7}$\"; \n     Pattern pat = Pattern.compile(emailRegex); \n    if (email == null) \n        return false; \n    return pat.matcher(email).matches(); \n}", "category": "Python"}, {"instruction": "Build an HTML page to display the current temperature in major cities.", "input": "", "output": "<html>\n<head>\n    <title>City Temperature Monitor</title>\n</head>\n<body>\n    <h1>City Temperature Monitor</h1>\n    <table>\n        <thead>\n            <tr>\n                <th>City</th>\n                <th>Temperature</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>London</td>\n                <td><!-- Add code to get London's temperature --></td>\n            </tr>\n            <tr>\n                <td>New York</td>\n                <td><!-- Add code to get New York's temperature --></td>\n            </tr>\n            <tr>\n                <td>Tokyo</td>\n                <td><!-- Add code to get Tokyo's temperature --></td>\n            </tr>\n        </tbody>\n    </table>\n</body>\n</html>", "category": "Python"}, {"instruction": "Construct a query to calculate the average age of all users from table users.", "input": "", "output": "SELECT AVG(age)\nFROM users;", "category": "Python"}, {"instruction": "Construct a SQL query to count the number of distinct cities from table cities.", "input": "", "output": "SELECT COUNT(DISTINCT city_name) \nFROM cities;", "category": "Python"}, {"instruction": "Construct a SQL query to list the unique countries from table countries.", "input": "", "output": "SELECT DISTINCT country\nFROM countries;", "category": "Python"}, {"instruction": "Generate a Java program to get the maximum number from a given array.", "input": "", "output": "public class MaxNumber {\n\n    public static int getMaxNumber(int[] arr) {\n        int max = arr[0];\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        return max;\n    }\n}", "category": "Python"}, {"instruction": "Write a CSS rule to give a 1000px margin to the left of an element.", "input": "", "output": "margin-left: 1000px;", "category": "Python"}, {"instruction": "Write a JavaScript statement to switch the value of two variables.", "input": "", "output": "[a, b] = [b, a];", "category": "Python"}, {"instruction": "Create a HTML page that contains a table with given data.", "input": "<html>\n  <head>\n    <title>Data Table</title>\n  </head>\n  <body>\n  <table>\n    <tr>\n        <th>Name</th>\n        <th>Age</th>\n        <th>Occupation</th>\n    </tr>\n    <tr>\n        <td>John</td>\n        <td>32</td>\n        <td>Engineer</td>\n    </tr>\n    <tr>\n        <td>Max</td>\n        <td>28</td>\n        <td>Doctor</td>\n    </tr>\n    <tr>\n        <td>Jill</td>\n        <td>23</td>\n        <td>Teacher</td>\n    </tr>\n  </table>\n  </body>\n</html>", "output": "<html>\n  <head>\n    <title>Data Table</title>\n  </head>\n  <body>\n  <table>\n    <tr>\n        <th>Name</th>\n        <th>Age</th>\n        <th>Occupation</th>\n    </tr>\n    <tr>\n        <td>John</td>\n        <td>32</td>\n        <td>Engineer</td>\n    </tr>\n    <tr>\n        <td>Max</td>\n        <td>28</td>\n        <td>Doctor</td>\n    </tr>\n    <tr>\n        <td>Jill</td>\n        <td>23</td>\n        <td>Teacher</td>\n    </tr>\n  </table>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Write a regular expression in Python to find all words that start with \"A\".", "input": "", "output": "import re\n\nwords = re.findall(r'\\bA\\w+', text)", "category": "Python"}, {"instruction": "Create a C++ vector of strings containing names.", "input": "", "output": "#include <iostream>\n#include <vector>\n#include <string>\n\nint main() {\n std::vector<std::string> names;\n names.push_back(\"John\");\n names.push_back(\"Paul\");\n names.push_back(\"Adam\");\n names.push_back(\"Linda\");\n names.push_back(\"James\");\n return 0;\n}", "category": "Python"}, {"instruction": "Construct a Python class to save details of student.", "input": "", "output": "class Student():\n    def __init__(self, name, age, year):\n        self.name = name\n        self.age = age\n        self.year = year\n  \n    def get_name(self):\n        return self.name\n  \n    def get_age(self):\n        return self.age\n  \n    def get_year(self):\n        return self.year", "category": "Python"}, {"instruction": "Write a SQL script to display the top 5 average sales by employee.", "input": "Table: SALES\ncolumns: EmployeeId, Sales", "output": "SELECT \n    EmployeeId, \n    AVG(Sales) as SalesAverage \nFROM SALES \nGROUP BY EmployeeId \nORDER BY SalesAverage DESC \nLIMIT 5;", "category": "Python"}, {"instruction": "What is a multithreaded program?", "input": "", "output": "A multithreaded program is a software program or application that uses multiple threads to execute different parts of its code simultaneously. This allows for faster execution of the program by using more than one processor core at the same time.", "category": "Python"}, {"instruction": "Suggest a sorting algorithm that is suitable for a large, unsorted integer array.", "input": "", "output": "The Merge Sort algorithm is suitable for a large, unsorted integer array. It is a divide and conquer algorithm, which divides the array into two halves, recursively sorts them, and then merges them together. It has a time complexity of O(n log n).", "category": "Python"}, {"instruction": "Create a for loop for printing all the alphabets in the lowercase.", "input": "", "output": "for letter in range(97, 123): \n    print(chr(letter))", "category": "Python"}, {"instruction": "Read the following code and suggest an optimization.", "input": "int[] array = {7, 14, 23, 27, 33};\nint sum = 0;\n\nforeach (int value in array)\n{\n sum += value;\n}", "output": "int[] array = {7, 14, 23, 27, 33};\nint sum = 0;\n\nint i = 0;\nfor (; i < array.Length; ++i)\n{\n sum += array[i];\n}", "category": "Python"}, {"instruction": "Generate a for loop for summing up the first 5 positive even numbers.", "input": "", "output": "int sum = 0;\nfor (int i = 2; i < 10; i += 2)\n{\n sum += i;\n}\nConsole.WriteLine(\"The sum of the first 5 positive even numbers is: \" + sum);", "category": "Python"}, {"instruction": "Design a user interface for a book library application.", "input": "", "output": "The user interface should include a search bar to search for books, a list of books with details such as title, author, year published, and a button to select a book and checkout. Additionally, it should include a navigation header with various sections such as 'My Books', 'Favorites', 'Recommendations' and 'Account Settings'.", "category": "Python"}, {"instruction": "Name three popular programming languages.", "input": "", "output": "Java, Python and JavaScript.", "category": "Python"}, {"instruction": "Rewrite the following sentence so that it has a different meaning: We should try and solve this problem.", "input": "", "output": "Let's attempt to solve this problem.", "category": "Python"}, {"instruction": "Create a method with the following signature: int calculateSum(int x,int y).", "input": "", "output": "public int calculateSum(int x, int y) {\n    return x + y;\n}", "category": "Python"}, {"instruction": "Replace the underlined phrase with a single word that means the same thing: He was very argumentative throughout the meeting.", "input": "", "output": "He was very contentious throughout the meeting.", "category": "Python"}, {"instruction": "Given a list of strings, write a program to return a new list of all strings which have length greater than 4 in Python.", "input": "lst = ['cat', 'dog', 'apple', 'banana']", "output": "new_lst = [x for x in lst if len(x) > 4] # ['apple', 'banana']", "category": "Python"}, {"instruction": "Count the number of occurrences of a given string in another string in Python.", "input": "string1 = 'A quick brown fox jumps over the lazy dog.'\nstring2 = 'dog'", "output": "string1.count(string2) # 1", "category": "Python"}, {"instruction": "Write an algorithm to find the missing number in an array of n consecutive integers in Python.", "input": "arr = [1, 2, 3, 5, 6, 7, 8]", "output": "def find_missing_num(arr):\n    missing = 0\n    for i in range(arr[0], arr[-1] + 1):\n        if i not in arr:\n            missing = i\n    return missing  # 4", "category": "Python"}, {"instruction": "Create a dictionary in Python whose keys are the integers from 1 to 10 and whose values are the squares of the keys.", "input": "", "output": "d = {i: i*i for i in range(1, 11)} # {1:1, 2:4, etc.}", "category": "Python"}, {"instruction": "In Python, how could you print a list from the last element to the first element?", "input": "", "output": "for element in reversed(my_list):\n    print(element)", "category": "Python"}, {"instruction": "Given a variable arr containing integers, write python code to remove all duplicate elements from the array and return the new array.", "input": "arr = [1, 2, 2, 3, 4, 4, 4, 5, 6, 6]", "output": "arr = list(set(arr)) # [1, 2, 3, 4, 5, 6]", "category": "Python"}, {"instruction": "Edit the given code snippet and make it run in O(N) time complexity.", "input": "int[] arr = {1, 2, 3, 4, 5};\nint result = 0;\nfor (int i = 0; i < arr.Length; i++)\n{\n    for (int j = 0; j < arr.Length; j++)\n    {\n        if (arr[i] % arr[j] == 0)\n        {\n            result += arr[i];\n        }\n    }\n}", "output": "int[] arr = {1, 2, 3, 4, 5};\nint result = 0;\nfor (int i = 0; i < arr.Length; i++)\n{\n    result += arr[i];\n    for (int j = i + 1; j < arr.Length; j++)\n    {\n        if (arr[i] % arr[j] == 0)\n        {\n            result += arr[j];\n        }\n    }\n}", "category": "Python"}, {"instruction": "Create a class in Java for a student and define variables for name, date of birth and grade.", "input": "", "output": "public class Student {\n    private String name;\n    private Date dob;\n    private int grade;\n\n    public Student(String name, Date dob, int grade) {\n        this.name = name;\n        this.dob = dob;\n        this.grade = grade;\n    }\n\n    // Additional methods/Getters and Setters\n}", "category": "Python"}, {"instruction": "Generate a while loop in python to find out the sum of first 5 even numbers.", "input": "", "output": "i = 2\nsum = 0\n\nwhile i < 10:\n    sum += i\n    i += 2\n\nprint(\"The sum of first 5 even numbers is: \", sum)", "category": "Python"}, {"instruction": "You need to generate a Javascript program that prints \"Hello World\".", "input": "", "output": "console.log(\"Hello World\");", "category": "Python"}, {"instruction": "Create an Excel spreadsheet that compares the performance of an employee over two different months.", "input": "January data: Sales: $20,000, Hours worked: 200\nFebruary data: Sales: $25,000 Hours worked: 250", "output": "Create a Spreadsheet with the following columns: Month, Sales ($), Hours Worked.\nFill in the rows with the data given above.", "category": "Python"}, {"instruction": "How to remove the last character of a string in Python?", "input": "word = \"Hello\"", "output": "word = word[:len(word)-1]", "category": "Python"}, {"instruction": "How to decode a Base64 string to its corresponding string representation in Python?", "input": "base64_string = \"SGVsbG8gV29ybGQ=\"", "output": "import base64\nstring = base64.b64decode(base64_string).decode(\"utf-8\")", "category": "Python"}, {"instruction": "How to convert a binary string to an integer number?", "input": "binaryNum = \"1101\"", "output": "intNum = int(binaryNum, 2)", "category": "Python"}, {"instruction": "Design a pipeline in Scikit-learn to preprocess a given dataset.", "input": "", "output": "from sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\n\npipeline = Pipeline(steps=[\n    ('scaler', StandardScaler()),\n    ('pca', PCA())\n])", "category": "Python"}, {"instruction": "Build a Keras model to predict whether a patient has cancer.", "input": "", "output": "model = keras.Sequential([\n     keras.layers.Dense(64, activation='relu', input_shape=(len(features.keys()),)),\n     keras.layers.Dense(32, activation='relu'),\n     keras.layers.Dense(1, activation='sigmoid')\n ])\n\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])", "category": "Python"}, {"instruction": "Produce an HTML webpage that shows a table of 10 colors and their corresponding hexcodes.", "input": "", "output": "<html>\n    <head>\n    </head>\n    <body>\n        <table>\n            <thead>\n                <tr>\n                    <th>Color</th>\n                    <th>Hexcode</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>Red</td>\n                    <td>#FF0000</td>\n                </tr>\n                <tr>\n                    <td>Blue</td>\n                    <td>#0000FF</td>\n                </tr>\n                <tr>\n                    <td>Green</td>\n                    <td>#00FF00</td>\n                </tr>\n                <tr>\n                    <td>Yellow</td>\n                    <td>#FFFF00</td>\n                </tr>\n                <tr>\n                    <td>Orange</td>\n                    <td>#FFA500</td>\n                </tr>\n                <tr>\n                    <td>Pink</td>\n                    <td>#FFC0CB</td>\n                </tr>\n                <tr>\n                    <td>Purple</td>\n                    <td>#800080</td>\n                </tr>\n                <tr>\n                    <td>Cyan</td>\n                    <td>#00FFFF</td>\n                </tr>\n                <tr>\n                    <td>Brown</td>\n                    <td>#A52A2A</td>\n                </tr>\n                <tr>\n                    <td>White</td>\n                    <td>#FFFFFF</td>\n                </tr>\n            </tbody>\n        </table>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Create an HTML table that displays the data in a given JSON object.", "input": "{\n    \"cols\":[\"location\", \"age\", \"name\"],\n    \"rows\":[\n        [\"Paris\", 28, \"John\"],\n        [\"Berlin\", 32, \"Mary\"],\n        [\"London\", 21, \"Andy\"]\n    ]\n }", "output": "<table>\n    <tr>\n        <th>location</th>\n        <th>age</th>\n        <th>name</th>\n    </tr>\n    <tr>\n        <td>Paris</td>\n        <td>28</td>\n        <td>John</td>\n    </tr>\n    <tr>\n        <td>Berlin</td>\n        <td>32</td>\n        <td>Mary</td>\n    </tr>\n    <tr>\n        <td>London</td>\n        <td>21</td>\n        <td>Andy</td>\n    </tr>\n</table>", "category": "Python"}, {"instruction": "Design a CSS selector for a div with a text of \"Hello World\".", "input": "", "output": "div[text=\"Hello World\"] {\n  // CSS rules go here\n}", "category": "Python"}, {"instruction": "Create an angle converter function which converts degrees to radians.", "input": "", "output": "function degToRad(deg) {\n    return deg * (Math.PI/180);\n}", "category": "Python"}, {"instruction": "Create an array that contains the numbers 1 through 10.", "input": "", "output": "var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];", "category": "Python"}, {"instruction": "Create a switch-case statement for a shopping cart to print out the items and their prices.", "input": "Item1: $25.00\nItem2: $13.50\nItem3: $3.99", "output": "def items_and_prices(item1, item2, item3):\n    switch = {\n    'item1': item1,\n    'item2': item2,\n    'item3': item3\n    }\n    for key, value in switch.items():\n        print(key + \": \" + str(value))\n\nitems_and_prices(25.00, 13.50, 3.99)", "category": "Python"}, {"instruction": "Write a function to calculate median of array elements", "input": "", "output": "def get_median(arr):\n    sorted_arr = sorted(arr)\n    length = len(sorted_arr)\n    if length % 2 == 0:\n        median1 = sorted_arr[int(length/2) - 1]\n        median2 = sorted_arr[int(length/2)]\n        median = (median1 + median2) / 2\n    else:\n        median = sorted_arr[int((length-1)/2)]\n    return median", "category": "Python"}, {"instruction": "Create an array of elements that are the squares of the integers between 1 and 10", "input": "", "output": "squares = [x**2 for x in range(1, 11)]", "category": "Python"}, {"instruction": "Write a Python program that prints out the magnitude of the three-dimensional vector with the following components: (x, y, z).", "input": "(1, 2, 3)", "output": "import math\n\ndef magnitude(x, y, z):\n    return math.sqrt(x * x + y * y + z * z)\n\nprint(magnitude(1, 2, 3))", "category": "Python"}, {"instruction": "Design a Java program to find the longest increasing sub-sequence of an array.", "input": "", "output": "public static int longestIncreasingSubsequence(int[] arr) {\n  int[] dp = new int[arr.length];\n  int maxLength = 1;\n  \n  dp[0] = 1;\n  \n  for (int i=1; i<arr.length; i++) {\n      int maxVal = 0;\n      for (int j=0; j<i; j++) {\n          if (arr[j] < arr[i] && dp[j] > maxVal) {\n              maxVal = dp[j];\n          }\n      }\n      dp[i] = maxVal + 1;\n      if (dp[i] > maxLength) {\n          maxLength = dp[i];\n      }\n  }\n  \n  return maxLength;\n}", "category": "Python"}, {"instruction": "Construct a necessary SQL query to update the name attribute in the User table.", "input": "User table \n| id | name   |\n|----|--------|\n| 1  | Johnny | \n\nName to be updated: Daniel", "output": "UPDATE User\nSET name = 'Daniel' \nWHERE id = 1;", "category": "Python"}, {"instruction": "Change the following code to use the ternary operator.", "input": "def compare_num(a, b):\n    if a < b:\n        return -1\n    elif a == b:\n        return 0\n    else:\n        return 1", "output": "def compare_num(a, b):\n    return -1 if a < b else 0 if a == b else 1", "category": "Python"}, {"instruction": "Given a binary tree, find the height of the tree.", "input": "", "output": "def maxDepth(self, root: TreeNode):\n    if root is None:\n      return 0\n\n    leftDepth = self.maxDepth(root.left)\n    rightDepth = self.maxDepth(root.right)\n\n    return max(leftDepth, rightDepth) + 1", "category": "Python"}, {"instruction": "Describe a sorting algorithm that works by putting an algorithm that works by putting elements in the right place.", "input": "", "output": "Insertion sort is an in-place comparison sort algorithm that works by iterating through the input array, removing one element at a time and inserting it in the correct position in the sorted array. It is a comparison-based algorithm that blocks an element from its position until it finds the correct location for it in the sorted array by comparing with adjacent element and shifting it until the correct position is found.", "category": "Python"}, {"instruction": "Recreate this nested for loop in a single line of code.", "input": "Final_list = []\nfor i in range(10):\n    for j in range(10):\n        Final_list.append(i+j)", "output": "Final_list = [i+j for i in range(10) for j in range(10)]", "category": "Python"}, {"instruction": "Format the output of a number to contain comma-separated thousands.", "input": "num = 323456789", "output": "# Format the output of a number to contain comma-separated thousands\ndef format_number(num):\n    return '{:,}'.format(num)\n    \n# Get the formatted output\nprint(format_number(323456789)) # Output: 323,456,789", "category": "Python"}, {"instruction": "Create a list of the top 3 highest valued elements in the following array.", "input": "arr = [7, 5, 8, 4, 9, 6, 1, 3, 2]", "output": "arr = [7, 5, 8, 4, 9, 6, 1, 3, 2]\n\n# Create a list of the top 3 highest valued elements\ntop_three = [max(arr)] # start with the maximum elements\narr.remove(max(arr)) # remove the maximum element from the list\ntop_three.append(max(arr)) #Add the second maximum element to top_three\narr.remove(max(arr)) # remove the second maximum element from the list\ntop_three.append(max(arr)) # Add the third maximum element to top_three\n\nprint(top_three) # Output: [9, 8, 7]", "category": "Python"}, {"instruction": "Create a class in python to store a collection of words and their frequency count.", "input": "", "output": "class FreqCollection(object):\n\n    def __init__(self):\n        self.words = {}\n\n    def add_word(self, word):\n        if word in self.words:\n            self.words[word] += 1\n        else:\n            self.words[word] = 1\n\n    def get_word_freq(self, word):\n        if word in self.words:\n            return self.words[word]\n        return 0", "category": "Python"}, {"instruction": "Explain how a quicksort algorithm works.", "input": "", "output": "Quicksort is an efficient comparison-based sorting algorithm that works by taking a pivot element and partitioning the list/array into two parts: elements smaller than the pivot element and elements larger than the pivot element. The quicksort algorithm then sorts both sublists recursively until the list is fully sorted. As such, quicksort has a best case complexity of O(nlogn) and a worst case complexity of O(n^2).", "category": "Python"}, {"instruction": "Rewrite the given code to use JavaScript Promises instead of callbacks.", "input": "function doSomething(callback) {\n  // do something\n  callback(\"Done!\");\n}\n\nfunction main() {\n  doSomething(function(result) {\n    console.log(result);\n  });\n}\n\nmain();", "output": "function doSomething() {\n  return new Promise((resolve, reject) => {\n    // do something\n    resolve(\"Done!\");\n  });\n}\n\nfunction main() {\n  doSomething()\n    .then((result) => {\n      console.log(result);\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n}\n\nmain();", "category": "Python"}, {"instruction": "Write a SQL query to show the name and date of birth of all employees born after 1st January 1980.", "input": "", "output": "SELECT name, date_of_birth \nFROM Employees \nWHERE date_of_birth > '1980-01-01'", "category": "Python"}, {"instruction": "Provide a context-free grammar to generate strings that contain only a\u2019s and b\u2019s and which have the same number of a\u2019s as b\u2019s.", "input": "", "output": "S -> bAa\nA -> AaA | aAa | bAb | abB | \u03b5", "category": "Python"}, {"instruction": "Given a Binary search tree, write a C++ program to find the lowest common ancestor (LCA) of two given nodes in the BST.", "input": "Tree:\n            8\n          /   \\\n         3    10\n        / \\    /\n       1   6  14", "output": "struct TreeNode\n{\n    struct TreeNode* left;\n    struct TreeNode* right;\n    int data;\n}; \n \n \nTreeNode* LCA(TreeNode* root,TreeNode* node1, TreeNode* node2) \n{ \n    int small = min(node1->data, node2->data);\n    int large = max(node1->data, node2->data);\n  \n    if (root == NULL) \n        return NULL; \n  \n    if (root->data >= small && root->data <= large) \n        return root; \n  \n    if (root->data > large) \n        return LCA(root->left, node1, node2); \n  \n    return LCA(root->right, node1, node2); \n}", "category": "Python"}, {"instruction": "Edit the given CSS code to achieve the desired effect.", "input": "CSS code to change the colour of font in a text box to red:\n\ntextarea {\n color: #000;\n}", "output": "textarea {\n color: #ff0000;\n}", "category": "Python"}, {"instruction": "Explain why using \"For\" loops can be a better choice than using \"While\" loops in Python.", "input": "", "output": "For loops are better than while loops in Python because they provide a clearer syntax and are easier to debug due to their predictable and structured behavior. For loops are also more efficient than while loops since they don't require explicit initialization and condition checking, while while loops need to check if a condition is true on each iteration. This makes for loops faster and more memory-efficient, as it requires fewer operations compared to while loops.", "category": "Python"}, {"instruction": "Create a method to find all valid IP addresses that can be formed using a given string.", "input": "string = \"25525511135\"", "output": "def find_all_valid_ip_addresses(string):\n    valid_ips = []\n    for i in range(1,4):\n        for j in range(1,4):\n            for k in range(1,4):\n                if i+j+k == len(string):\n                    ip_string = string[:i]+\".\"+string[i:i+j]+\".\"+string[i+j:i+j+k]+\".\"+string[i+j+k:]\n                    if is_valid_ip_address(ip_string):\n                        valid_ips.append(ip_string)\n    return valid_ips\n\ndef is_valid_ip_address(ip_string):\n    nums = ip_string.split(\".\")\n    for num in nums:\n        if (int(num) < 0 or int(num) > 255):\n            return False\n    return True", "category": "Python"}, {"instruction": "How would you write a function to find the highest frequency character in a string?", "input": "string = \"Hello world!\"", "output": "def find_highest_freq_char(string):\n    counts = {}\n    max_freq_char = \"\"\n    max_freq = 0\n    for ch in string:\n        counts[ch] = counts.get(ch, 0) + 1\n        if counts[ch] > max_freq:\n            max_freq = counts[ch]\n            max_freq_char = ch\n    return max_freq_char", "category": "Python"}, {"instruction": "Help complete the implementation of the following function", "input": "def true_false_sum(x):\n    true_sum = 0\n    false_sum = 0\n    for i in range(x):\n        if x[i] == booleanTrue:\n            *\n    return true_sum, false_sum", "output": "def true_false_sum(x):\n    true_sum = 0\n    false_sum = 0\n    for i in range(x):\n        if x[i] == booleanTrue:\n            true_sum += 1\n        else:\n            false_sum += 1\n    return true_sum, false_sum", "category": "Python"}, {"instruction": "Implement a linear search in a list.", "input": "list = [1, 5, 9, 10]", "output": "def linear_search(list, key):\n    for index, value in enumerate(list):\n        if value == key:\n            return index\n    return -1", "category": "Python"}, {"instruction": "Write an expression to check if a given number is a perfect square", "input": "num = 16", "output": "# Write an expression to check if a given number is a perfect square\n\nimport math\n\ndef is_perfect_square(num):\n    return math.sqrt(num).is_integer()\n    \n# Check the given number\nprint(is_perfect_square(16)) # Output: True", "category": "Python"}, {"instruction": "List all the different types of sorting algorithms.", "input": "", "output": "Different types of sorting algorithms include Bubble Sort, Insertion Sort, Selection Sort, Heap Sort, Merge Sort, Quick Sort, Radix Sort, Shell Sort, Counting Sort, and Bucket Sort.", "category": "Python"}, {"instruction": "Parse the following JSON structure and store each element into a variable.", "input": "{\n  \"items\": [\"apple\", \"orange\", \"banana\"],\n  \"quantity\": [4, 2, 7],\n  \"cost\": [2.00, 1.50, 3.00]\n}", "output": "items = [\"apple\", \"orange\", \"banana\"]\nquantity = [4, 2, 7]\ncost = [2.00, 1.50, 3.00]", "category": "Python"}, {"instruction": "Generate a SQL query that selects all the fruit names from a table.", "input": "", "output": "SELECT fruit_name FROM fruits_table;", "category": "Python"}, {"instruction": "Construct a program to find the index of a given element in a sorted array with binary search.", "input": "list = [-1, 0, 2, 3, 9, 10]\ntarget = 3", "output": "def binarySearch(arr, target):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end)//2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            end = mid - 1\n        else:\n            start = mid + 1 \n    return -1\n\nindex = binarySearch([-1, 0, 2, 3, 9, 10], 3)", "category": "Python"}, {"instruction": "Rewrite the following recursive function such that it runs in iterative manner.", "input": "def f(n):\n    if n <= 1:\n        return n\n    else:\n        return f(n-1) + f(n-2)", "output": "def f(n):\n    if n <= 1:\n        return n\n    else: \n        a, b = 1, 1\n        for _ in range(n-1):\n            a, b = b, a+b\n        return b", "category": "Python"}, {"instruction": "Deploy a model server on AWS Lambda to serve a machine learning model.", "input": "", "output": "import json\nimport os\nimport boto3\nimport numpy as np\nimport io\nfrom PIL import Image\nimport tensorflow as tf\nfrom tensorflow.keras.models import load_model\n\n\nmodel_path = os.environ['MODEL_PATH']\nmodel_class_name = os.environ['MODEL_CLASS_NAME']\nmodel = load_model(model_path)\n\ndef model_predict(event, context):\n    body = json.loads(event['body'])\n    img_data = body['img_data']\n    img_bytes = base64.b64decode(img_data)\n    pil_img = Image.open(io.BytesIO(img_bytes))\n\n    # compress the image\n    img_raw = pil_img.resize((224, 224))\n\n    # convert image to array\n    input_img = np.expand_dims(np.array(img_raw), axis=0)\n\n    # predict\n    results = model.predict(input_img)\n    res = {\n        'statusCode': 200,\n        'body': json.dumps(results.tolist())\n    }\n\n    return res", "category": "Python"}, {"instruction": "Add the following comment to the following piece of code.", "input": "def func_name(val1):\n    val2 = val1 * 5", "output": "def func_name(val1):\n    # Multiply the value by 5\n    val2 = val1 * 5", "category": "Python"}, {"instruction": "Construct an algorithm to check if two strings have the same characters and same frequency of characters.", "input": "String A: hello \nString B: ollhe", "output": "def is_anagram(str1, str2):\n    char_map1 = {}\n    char_map2 = {}\n\n    for char in str1:\n        if char in char_map1:\n            char_map1[char] += 1\n        else:\n            char_map1[char] = 1\n    \n    for char in str2:\n        if char in char_map2:\n            char_map2[char] += 1\n        else:\n            char_map2[char] = 1\n    \n    return char_map1 == char_map2", "category": "Python"}, {"instruction": "Generate a ternary tree data structure in Python.", "input": "", "output": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.center = None\n        self.right = None", "category": "Python"}, {"instruction": "Find the total area of all countries from the table.", "input": "Table name: countries\n\nColumns:\n- name (text)\n- population (integer)\n- area (float)\n- capital_city (text)", "output": "SELECT SUM(area) FROM countries;", "category": "Python"}, {"instruction": "Generate a python class for calculating prime numbers up to n.", "input": "n = 10", "output": "class PrimeCalculator:\n    def __init__(self, n):\n        self.n = n\n    \n    def get_primes(self):\n        primes = []\n        for number in range(2, self.n+1):\n            is_prime = True\n            for divisor in range(2, number):\n                if number % divisor == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(number)\n        return primes", "category": "Python"}, {"instruction": "Suggest a SQL query to select all countries from the table.", "input": "Table name: countries\n\nColumns:\n- name (text)\n- population (integer)\n- area (float)\n- capital_city (text)", "output": "SELECT name FROM countries;", "category": "Python"}, {"instruction": "Calculate the sum of the following numbers using JavaScript.", "input": "[1, 4, 8, 10]", "output": "let sum = 0;\nfor(i = 0; i < arr.length; i++){\n  sum += arr[i];\n}\n\nconsole.log(sum); // Output: 23", "category": "Python"}, {"instruction": "Make the following sentence compliant with PEP 8.", "input": "nums=[1,2,3,4]", "output": "nums = [1, 2, 3, 4]", "category": "Python"}, {"instruction": "How would you create a for-loop in Python to iterate through all the integers from 1 to 10?", "input": "", "output": "for i in range(1,11):\n  print(i)", "category": "Python"}, {"instruction": "Create an Applescript that displays an alert message saying 'hello world'.", "input": "", "output": "display alert \"hello world\"", "category": "Python"}, {"instruction": "Make the following HTML code valid by adding the missing attributes.", "input": "<a href=\"https://example.com\" target>Click here</a>", "output": "<a href=\"https://example.com\" target=\"_blank\">Click here</a>", "category": "Python"}, {"instruction": "Calculate the minimum, maximum and average of the following array.", "input": "[2, 3, 1, 5, 9, 12, 8]", "output": "Minimum:  1\nMaximum:  12\nAverage:  6.14", "category": "Python"}, {"instruction": "Create a JavaScript function that reverse alphabetically sort an array of numbers.", "input": "[9, 2, 8, 4, 7]", "output": "function reverseSort(array){\n  return array.sort(function(a, b){\n    return b - a;\n  });\n}\n\nreverseSort([9,2,8,4,7]);\n// Output: [9,8,7,4,2]", "category": "Python"}, {"instruction": "Calculate the greatest common factor of 18 and 12.", "input": "", "output": "The greatest common factor of 18 and 12 is 6.", "category": "Python"}, {"instruction": "Create a function to calculate Fibonacci sequence number based on the index of the number.", "input": "index = 6", "output": "def calc_fibonacci_number(index):\n    if index == 0 or index == 1:\n        return index\n    first_num = 0\n    second_num = 1\n    for i in range(2, index+1):\n        next_num = first_num + second_num\n        first_num, second_num = second_num, next_num\n    return second_num", "category": "Python"}, {"instruction": "How would you write a function to find the mode in an array of numbers?", "input": "nums = [2, 3, 4, 5, 5, 6, 7, 8]", "output": "def find_mode(nums):\n    mode = 0\n    max_occurrence = 0\n    for num in nums:\n        occurrences = nums.count(num)\n        if occurrences > max_occurrence:\n            max_occurrence = occurrences\n            mode = num\n    return mode", "category": "Python"}, {"instruction": "Create a method to compute the sum of squares of numbers from 0 up to n.", "input": "n = 4", "output": "def sum_of_squares(n):\n    total_sum = 0\n    for i in range(n + 1):\n        total_sum += i ** 2\n    return total_sum", "category": "Python"}, {"instruction": "Using JavaScript, create a program to check whether two given strings are an anagram or not.", "input": "", "output": "// JavaScript Code\nfunction checkAnagrams(str1, str2) {\n const s1 = str1.split('').sort().join('');\n const s2 = str2.split('').sort().join('');\n return s1 === s2;\n}", "category": "Python"}, {"instruction": "Create a Python program that takes a comma-separated string and outputs a dictionary of words and the frequency of their occurrences.", "input": "apple, banana, apple, orange", "output": "def get_word_frequency(string):\n words = string.split(', ')\n frequencies = {}\n for word in words:\n if word in frequencies:\n frequencies[word] += 1\n else:\n frequencies[word] = 1\n return frequencies", "category": "Python"}, {"instruction": "Given a JSON object, write a JavaScript function to flatten the object keys.", "input": "{\n    \"name\": {\n        \"first\": \"John\",\n        \"last\": \"Smith\"\n    },\n    \"age\": 25\n}", "output": "// JavaScript Code\nfunction flattenKeys(obj) {\n let flattened = {};\n for (let key in obj) {\n if (typeof obj[key] === 'object') {\n for (let subkey in obj[key]) {\n flattened[`${key}_${subkey}`] = obj[key][subkey];\n }\n } else {\n flattened[key] = obj[key];\n }\n }\n return flattened;\n}", "category": "Python"}, {"instruction": "Using JavaScript, create an interactive web page that displays a list of strings taken from the user's inputs.", "input": "", "output": "// JavaScript Code\nlet list = [];\nconst addToList = (str) => {\n list.push(str);\n}\n\nconst createList = () => {\nlet html = \"<ul>\\n\";\n for(let i = 0; i < list.length; i++) {\n html += `<li>${list[i]}</li>\\n`;\n }\nhtml += \"</ul>\";\n document.getElementById('list').innerHTML = html;\n}", "category": "Python"}, {"instruction": "Using the given code, write a function that finds the highest value in the array.", "input": "array = [5, 2, 8, 7, 1]", "output": "def find_largest(array):\n    largest = array[0] \n    for x in array:\n        if x > largest: \n            largest = x\n\n    return largest", "category": "Python"}, {"instruction": "Using DOM manipulation, replace the paragraph text with \"Hello World\".", "input": "<p>My first web page</p>", "output": "document.querySelector('p').innerHTML = 'Hello World';", "category": "Python"}, {"instruction": "Iterate through the given array and print the even numbers.", "input": "array = [1, 2, 3, 4, 5, 6]", "output": "for x in array:\n    if x % 2 == 0: \n        print(x)", "category": "Python"}, {"instruction": "Write a Python function to calculate the sum of the areas of a given list of circles, where each circle is defined as a dictionary containing 'radius' and 'x' as keys.", "input": "[{'radius': 3, 'x': 5}, {'radius': 4, 'x': 7}, {'radius': 5, 'x': 9}]", "output": "def sum_areas(circles):\n total = 0\n for circle in circles:\n area = 3.14 * circle['radius'] ** 2\n total += area\n return total", "category": "Python"}, {"instruction": "Create a class \"Person\" and add two instance variables \"name\" and \"age\".", "input": "", "output": "class Person: \n    def __init__(self, name, age): \n        self.name = name \n        self.age = age", "category": "Python"}, {"instruction": "Using the given code, construct a json request payload.", "input": "data = {\n    \"name\": \"John Doe\",\n    \"age\": 30\n}", "output": "import json\n\nrequest_payload = json.dumps(data)", "category": "Python"}, {"instruction": "Create two classes, \"Animal\" and \"Dog\", in which the \"Dog\" class inherits from the \"Animal\" class.", "input": "", "output": "class Animal: \n    pass\n\nclass Dog(Animal): \n    pass", "category": "Python"}, {"instruction": "Create a for loop to iterate through the given array from the last index to the first.", "input": "array = [1, 2, 3, 4, 5]", "output": "for i in range(len(array)-1, -1, -1): \n    print(array[i])", "category": "Python"}, {"instruction": "Create a css style that changes the color of the text in the div with the ID \"example\".", "input": "", "output": "#example {\n   color: red;\n}", "category": "Python"}, {"instruction": "Write a function that returns 'true' if the number is an even number, and 'false' otherwise.", "input": "", "output": "def is_even(num): \n    if(num % 2 == 0): \n        return True\n    else: \n        return False", "category": "Python"}, {"instruction": "Reverse a linked list.", "input": "", "output": "def reverseList(node): \n    prev = None\n    while (node != None): \n        next = node.next\n        node.next = prev \n        prev = node  \n        node = next\n    return prev", "category": "Python"}, {"instruction": "Implement a priority queue.", "input": "", "output": "class PriorityQueue(): \n   \n    def __init__(self): \n        self.elements = [] \n  \n    def is_empty(self): \n        return len(self.elements) == 0 \n  \n    def enqueue(self, item, priority): \n        self.elements.append((item, priority)) \n  \n    def dequeue(self): \n        max_priority_index = 0\n        for index, element in enumerate(self.elements): \n            if element[1] > self.elements[max_priority_index][1]: \n                max_priority_index = index \n        element = self.elements[max_priority_index] \n        del self.elements[max_priority_index] \n        return element", "category": "Python"}, {"instruction": "Visualize the given data using a bar chart.", "input": "data = [['January', 10], ['February', 15], ['March', 20], ['April', 17]]", "output": "import matplotlib.pyplot as plt\n\nmonths = [x[0] for x in data]\nvalues = [x[1] for x in data]\n\nplt.bar(months, values)\nplt.xlabel(\"Month\") \nplt.ylabel(\"Number\") \nplt.show()", "category": "Python"}, {"instruction": "Explain how to use a break statement in a for loop in Java.", "input": "", "output": "The break statement can be used to prematurely exit a for loop. The break statement is placed within the loop and causes an immediate exit from the loop once it is reached. This can be useful when a certain condition must be met before the loop should continue to execute.", "category": "Python"}, {"instruction": "Write an SQL query to sort a table named 'products' based on the price in ascending order.", "input": "", "output": "SELECT * FROM products ORDER BY price ASC;", "category": "Python"}, {"instruction": "Write a Python program to delete a given key from a dictionary.", "input": "", "output": "def delete_key(d, key):\n if key in d:\n del d[key]\n\nd = {'a':1, 'b':2}\ndelete_key(d, 'a')", "category": "Python"}, {"instruction": "Use a regular expression to find the capital letter in the provided string.", "input": "text = \"This is a string with a Capital A\"", "output": "import re\n\ndef find_capital_letter(text):\n    pattern = r\"[A-Z]\"\n    result = re.findall(pattern, text)\n    return result[0]\n\nprint(find_capital_letter(text))", "category": "Python"}, {"instruction": "Use a for-loop in PHP to generate a random number between 0 and 10.", "input": "", "output": "<?php\nfor ($i=1; $i<=10; $i++){\n    $rand_num = rand(0, 10);\n    echo $rand_num . \"\\n\";\n}\n?>", "category": "Python"}, {"instruction": "Code a calculation to find the mean of numbers stored in an array in Java.", "input": "numbers = {1, 2, 3, 4, 5}", "output": "public static double mean(int[] numbers) \n{ \n    double sum = 0.0; \n    for (int i = 0; i < numbers.length; i++) \n        sum += numbers[i]; \n    return sum / numbers.length; \n}", "category": "Python"}, {"instruction": "Design a MySQL table of 10 rows to store information about cities.", "input": "", "output": "CREATE TABLE cities (\n    city_id INT AUTO_INCREMENT PRIMARY KEY, \n    city_name VARCHAR(255) NOT NULL, \n    population INT NOT NULL,\n    country VARCHAR(255),\n    area INT \n);", "category": "Python"}, {"instruction": "Write a function that, given a string, returns a dictionary of all the characters in the string and their respective frequencies.", "input": "text = \"Hello World\"", "output": "def letter_frequency(text):\n    d = {}\n    for char in text:\n        if char not in d:\n            d[char] = 1\n        else:\n            d[char] += 1\n    return d\n\nprint(letter_frequency(text))", "category": "Python"}, {"instruction": "Develop a function in Java that, given a positive number, returns the factorial of that number.", "input": "num = 5", "output": "public static int factorial(int num){\n    if (num == 0){ \n        return 1;\n    }\n    else{\n        int factorial = num * factorial(num - 1);\n        return factorial;\n    }\n}", "category": "Python"}, {"instruction": "Create a function in HTML that creates a text box element with the given label.", "input": "label = \"Name: \"", "output": "<form> \n    <label>Name: </label>\n    <input type=\"text\" id=\"name\" name=\"name\"> \n</form>", "category": "Python"}, {"instruction": "Using Java, create a program to find the maximum sum of a sub-array within a given array.", "input": "", "output": "// Java Code\npublic class MaximumSubArraySum {\n public static int maxSubArraySum(int[] nums) {\n int maxSum = Integer.MIN_VALUE;\n int currentSum = 0;\n\n for (int num : nums) {\n currentSum += num;\n if (currentSum > maxSum)\n maxSum = currentSum;\n if (currentSum < 0)\n currentSum = 0;\n }\n return maxSum;\n }\n\n public static void main(String[] args) {\n int[] nums = {-2, 1, -3, 4, -1, 2, 1, -5, 4};\n int maxSum = maxSubArraySum(nums);\n System.out.println(\"Maximum Sub Array Sum: \" + maxSum);\n }\n}", "category": "Python"}, {"instruction": "Implement a function in Python that prints out the grade for a student, given their marks in a particular subject.", "input": "marks = 90", "output": "def get_grade(marks):\n    if marks>=90:\n        return \"A\"\n    elif marks>=80 and marks<90:\n        return \"B\"\n    elif marks>=70 and marks<80:\n        return \"C\"\n    elif marks>=60 and marks<70:\n        return \"D\"\n    else:\n        return \"F\"\n\nprint(get_grade(marks))", "category": "Python"}, {"instruction": "Write a function in JavaScript to partition the array into even and odd numbers.", "input": "", "output": "function partitionArray(arr) {\n  const evenArr = [];\n  const oddArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 == 0) {\n      evenArr.push(arr[i]);\n    } else {\n      oddArr.push(arr[i]);\n    }\n  }\n  return [evenArr, oddArr];\n}", "category": "Python"}, {"instruction": "Create a SQLite query to find the names and ages of the youngest and oldest customers.", "input": "", "output": "SELECT MAX(name, age) AS OldestCustomer, MIN(name, age) AS YoungestCustomer \nFROM Customers \nGROUP BY age;", "category": "Python"}, {"instruction": "Design a SQL query to find the top 3 customers with the highest spendings.", "input": "", "output": "SELECT CustomerName, SUM(TotalPrice) AS TotalSpend \nFROM Orders \nGROUP BY CustomerName \nORDER BY TotalSpend DESC \nLIMIT 3;", "category": "Python"}, {"instruction": "Create a database structure in MySQL for a shopping cart application containing a user, product and order table.", "input": "", "output": "CREATE TABLE users (\n id INT AUTO_INCREMENT PRIMARY KEY,\n first_name VARCHAR(255),\n email VARCHAR(255) UNIQUE NOT NULL\n);\n\nCREATE TABLE products (\n id INT AUTO_INCREMENT PRIMARY KEY,\n name VARCHAR(255),\n price NUMERIC\n);\n\nCREATE TABLE orders (\n id INT AUTO_INCREMENT PRIMARY KEY,\n user_id INT NOT NULL,\n product_id INT NOT NULL,\n quantity INT NOT NULL,\n FOREIGN KEY (user_id) REFERENCES users (id),\n FOREIGN KEY (product_id) REFERENCES product (id)\n);", "category": "Python"}, {"instruction": "Design a MongoDB database with a customers collection which contains the following fields: name, city, phone, and address.", "input": "", "output": "{\n  \"_id\": ObjectID( 0000000001 ),\n  \"name\": \"John Doe\",\n  \"city\": \"New York\",\n  \"phone\": \"123-456-7890\",\n  \"address\": \"123 Main Street\"\n  }", "category": "Python"}, {"instruction": "Write a Java class to represent a student record with a student_name, grade and score fields.", "input": "", "output": "public class StudentRecord {\n private String studentName;\n private int grade;\n private double score;\n\n public StudentRecord(String studentName, int grade, double score) {\n  this.studentName = studentName;\n  this.grade = grade;\n  this.score = score;\n }\n\n public String getStudentName() {\n  return studentName;\n }\n\n public int getGrade() {\n  return grade;\n }\n\n public double getScore() {\n  return score;\n }\n\n public void setStudentName(String studentName) {\n  this.studentName = studentName;\n }\n\n public void setGrade(int grade) {\n  this.grade = grade;\n }\n\n public void setScore(double score) {\n  this.score = score;\n }\n}", "category": "Python"}, {"instruction": "Create a class in C++ representing a 2D vector which has components (x, y).", "input": "", "output": "class Vector2D {\n    private:\n        int x;\n        int y;\n    public:\n        Vector2D(int x, int y);\n        int GetX() { return x; }\n        int GetY() { return y; }\n        void SetX(int newX) { x = newX; }\n        void SetY(int newY) { y = newY; }\n};\n\nVector2D::Vector2D(int x, int y) {\n this->x = x;\n this->y = y;\n }", "category": "Python"}, {"instruction": "Create a class in C# to represent a 2D circle which has a radius field.", "input": "", "output": "public class Circle2D\n{\n    private double radius;\n\n    public Circle2D() \n    {\n        radius = 0;\n    }\n    public Circle2D(double radius) \n    {\n        this.radius = radius;\n    }\n\n    public double getRadius() \n    {\n        return radius;\n    }\n    public void setRadius(double radius) \n    {\n        this.radius = radius;\n    }\n}", "category": "Python"}, {"instruction": "Create a prompt that takes user input and displays a message.", "input": "", "output": "var userInput = prompt(\"Please enter your name:\");\nalert(\"Hello \" + userInput + \"!\");", "category": "Python"}, {"instruction": "Use NumPy to extract the top 10 rows from a given matrix.", "input": "import numpy as np\narr = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])", "output": "top_10 = arr[:10,]\nprint(top_10)", "category": "Python"}, {"instruction": "Use Python to sort a given list of strings.", "input": "myList = [\"bananas\", \"oranges\", \"apples\", \"peaches\"]", "output": "sortedList = sorted(myList)\nprint(sortedList)", "category": "Python"}, {"instruction": "Write your own version of Fisher-Yates algorithm for shuffling an array.", "input": "", "output": "def shuffle(arr): \n    for i in range(len(arr)-1, 0, -1): \n        j = random.randint(0, i) \n        arr[i], arr[j] = arr[j], arr[i] \n    return arr", "category": "Python"}, {"instruction": "Parse this JSON data and print the names of all the users.", "input": "{ \n  \"users\": [\n    {\n      \"name\": \"John\"\n    },\n    {\n      \"name\": \"Jill\"\n    },\n    {\n      \"name\": \"Harry\"\n    }\n  ]\n}", "output": "import json \n\ndata = json.loads(input) \nfor user in data['users']: \n  print(user['name'])", "category": "Python"}, {"instruction": "Edit the following Python code to print a date in a human-readable form.", "input": "print(date.today())", "output": "from datetime import date \nprint(date.today().strftime(\"%B %d, %Y\"))", "category": "Python"}, {"instruction": "Construct a database table in SQL to store user information.", "input": "", "output": "CREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(128) NOT NULL,\n    email VARCHAR(128) NOT NULL UNIQUE,\n    password VARCHAR(128) NOT NULL\n);", "category": "Python"}, {"instruction": "Create a loop that prints all numbers 1 to 100 with the exception of multiples of 5.", "input": "", "output": "for i in range(1,101):\n  if i % 5 != 0:\n    print(i)", "category": "Python"}, {"instruction": "Convert the decimal number 595 to hexadecimal representation.", "input": "", "output": "The hexadecimal representation of 595 is 0x257.", "category": "Python"}, {"instruction": "What is the best way to test for memory leaks in a C++ program?", "input": "", "output": "The best way to test for memory leaks in a C++ program is to use a memory profiler. Memory profilers can help identify memory leaks by monitoring how much memory is allocated, how often it is allocated, and whether or not the same or similar memory is being allocated multiple times. They can also track how memory is being used, which can reveal potential memory leaks or help in optimizing code.", "category": "Python"}, {"instruction": "Add two matrices of size 3x3.", "input": "mat1 = [[1,2,3],\n        [4,5,6],\n        [7,8,9]]\nmat2 = [[10,11,12],\n        [13,14,15],\n        [16,17,18]]", "output": "# adding two matrices\nres = [[0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0]]\n\n# iterating through rows\nfor i in range(3):\n  # iterating through columns\n  for j in range(3):\n    res[i][j] = mat1[i][j] + mat2[i][j]\n\n# printing the result\nfor i in range(3):\n  for j in range(3):\n    print(res[i][j], end=\" \")\n  print()\n\n# Output:\n11 13 15\n17 19 21\n23 25 27", "category": "Python"}, {"instruction": "What is the reason for the failure of a unit test?", "input": "", "output": "The reason for the failure of a unit test can be any number of things, including incorrect expectations, incorrect or missing test data, or a problem with the code being tested. It can also be due to a lack of suitable code coverage. In any case, it is important to identify the source of the failure to ensure that the issue can be resolved.", "category": "Python"}, {"instruction": "Create a nested dictionary with URLs and titles of 3 different webpages.", "input": "", "output": "my_dict={\n    \"webpage1\": {\n        \"url\": \"https://www.example1.org\",\n        \"title\": \"Example1.org\"\n    },\n    \"webpage2\": {\n        \"url\": \"https://www.example2.com\",\n        \"title\": \"Example2.com\"\n    },\n    \"webpage3\": {\n        \"url\": \"https://www.example3.net\",\n        \"title\": \"Example3.net\"\n    }\n}", "category": "Python"}, {"instruction": "Print a message to the console \" hello world \".", "input": "", "output": "print(\"hello world\")", "category": "Python"}, {"instruction": "How many lines of code to print Fibonacci sequence of 30 numbers?", "input": "", "output": "The number of lines of code to print Fibonacci sequence of 30 numbers is 5.", "category": "Python"}, {"instruction": "Create a program that sorts the integers in the input list into ascending order.", "input": "List: [4, 9, 8, 1, 5]", "output": "def sort_ascending(my_list):\n    sorted_list = sorted(my_list)\n    return sorted_list\n\nmy_list = [4, 9, 8, 1, 5]\nsorted_list = sort_ascending(my_list)\n\nprint(sorted_list)", "category": "Python"}, {"instruction": "Print prime numbers in the given range.", "input": "Lower range: 10\nUpper range: 30", "output": "for num in range(10, 30 + 1):\n   # prime numbers are greater than 1\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)", "category": "Python"}, {"instruction": "Create a program to enter the data for user registration.", "input": "", "output": "def get_user_data():\n    username = input('Enter your desired username: ')\n    email = input('Enter your email address: ')\n    password = input('Enter a password: ')\n    confirm_password = input('Confirm your password: ')\n\n    # check if the passwords match\n    if password != confirm_password:\n        print('Passwords do not match')\n        return\n    \n    # save username, email, and password\n    user_data = {\n        'username': username,\n        'email': email,\n        'password': password\n    }\n\n    return user_data", "category": "Python"}, {"instruction": "Generate a random password.", "input": "", "output": "import string\nimport random\n\ndef generate_password():\n    length = random.randint(12, 24)\n    pwd = ''.join(random.choice(string.ascii_letters + string.digits) for i in range(length))\n    return pwd", "category": "Python"}, {"instruction": "Construct a query in SQL to find out how many users have the same name.", "input": "", "output": "SELECT name, COUNT(*) \nFROM users \nGROUP BY name \nHAVING COUNT(*) > 1;", "category": "Python"}, {"instruction": "Recreate the same result from the given sample output.", "input": "Sample output:\n\n1\n11\n21\n1211\n111221", "output": "n = '1'\n\nfor x in range(5):\n    a, b = '', '' \n    count = 1\n  \n    for i in range(1, len(n)): \n        if(n[i] != n[i-1]): \n            a += str(count) \n            a += n[i-1] \n            count = 1\n        else: \n            count+=1\n    \n    if(n[i] == n[i-1]): \n        a += str(count) \n        a += n[i] \n  \n    n = a\n    print(n)", "category": "Python"}, {"instruction": "Write an application that keeps track of tasks and provides status updates for the tasks.", "input": "", "output": "import sys\n\n#Defining the Task class\nclass Task(object):\n    \"\"\"\n    Class to keep track of tasks and provide status updates.\n    \"\"\"\n    def __init__(self, name, status):\n        \"\"\"Initializing instance attributes\"\"\"\n        self.name = name\n        self.status = status\n        self.status_dict = {\n            \"Not Started\": 0,\n            \"In Progress\": 1,\n            \"Completed\": 2\n        }\n\n    def get_status(self):\n        \"\"\"Returns the current status of the task\"\"\"\n        return self.status\n\n    def set_status(self, status):\n        \"\"\"Method to update the status of the task\"\"\"\n        if(status not in self.status_dict.keys()):\n            sys.exit(\"Invalid status!! Please enter a valid status\")\n\n        #Valid status so updating the task's status\n        self.status = status", "category": "Python"}, {"instruction": "Generate a piece of code that defines and calls a function in Python.", "input": "", "output": "def myFunction():\n   print(\"Hello World\")\nmyFunction()", "category": "Python"}, {"instruction": "Given a list of strings, use Python to print the count of strings that start with the letter 'a'.", "input": "string_list = [\"apple\",\"mango\",\"banana\",\"avocado\"]", "output": "count = 0\nfor string in string_list:\n    if string.startswith(\"a\"):\n        count += 1\n \nprint(\"The count of strings starting with 'a' is:\", count)", "category": "Python"}, {"instruction": "Write a Java code snippet to show the below numbers in a tabular format on the console.", "input": "num1 = 8\nnum2 = 10\nnum3 = 12", "output": "int [] nums = {8, 10, 12};\nSystem.out.println(\"Number  \\tNumber  \\tNumber\");\nfor(int i=0; i<nums.length; i++) {\n    System.out.println(nums[i] + \"\\t\\t\" + nums[i+1] + \"\\t\\t\" + nums[i+2]);\n    i++;\n}", "category": "Python"}, {"instruction": "Write a C++ program that prints the Fibonacci numbers up to the number specified by the user.", "input": "", "output": "#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n    int n, t1 = 0, t2 = 1, nextTerm;\n    cout << \"Enter the number of terms: \";\n    cin >> n;\n    cout << \"Fibonacci Series: \";\n    for (int i = 1; i <= n; ++i)\n    {\n        if (i == 1)\n        {\n            cout << \" \" << t1;\n            continue;\n        }\n        if (i == 2)\n        {\n            cout << t2 << \" \";\n            continue;\n        }\n        nextTerm = t1 + t2;\n        t1 = t2;\n        t2 = nextTerm;\n        cout << nextTerm << \" \";\n    }\n    return 0;\n}", "category": "Python"}, {"instruction": "Define a class named \"Day\" in Python to represent a day of the week.", "input": "", "output": "class Day:\n    def __init__(self):\n        self.day = \"\"\n\n    def set_day(self, day):\n        self.day = day\n\n    def get_day(self):\n        return self.day", "category": "Python"}, {"instruction": "Compare two strings to check if they are identical using the JavaScript language.", "input": "str1 = 'Testing'\nstr2 = 'Testing'", "output": "let identical = str1 === str2; \nif (identical) { \n    console.log(\"Strings are identical\"); \n} else { \n    console.log(\"Strings are not identical\"); \n}", "category": "Python"}, {"instruction": "Write a SQL query to select the employees who are in their 30s.", "input": "", "output": "SELECT *\nFROM employee\nWHERE YEAR(CURDATE()) - YEAR(dob) BETWEEN 30 and 39;", "category": "Python"}, {"instruction": "How many lines of code are in the given snippet?", "input": "def print_list(my_list):\n  for item in my_list:\n    print(item)", "output": "4 lines of code.", "category": "Python"}, {"instruction": "Create a shortcut command in Bash to run a program called \"MyApp\"", "input": "", "output": "alias mkapp=\"MyApp\"", "category": "Python"}, {"instruction": "Write an R command to calculate the standard deviation of the given array.", "input": "x = c(3, 4, 5, 7, 8)", "output": "sd(x)", "category": "Python"}, {"instruction": "Create a CSS rule to make the div element with an id of \"container\" to have a width of 500px.", "input": "", "output": "#container {\n  width: 500px;\n}", "category": "Python"}, {"instruction": "Implement the following pseudocode in C language.", "input": "sum = 0\nfor i = 0 to n inclusive\n sum += i^2\nend", "output": "int sum=0;\nfor (int i=0; i<=n; ++i)\n    sum += pow(i,2);\nend", "category": "Python"}, {"instruction": "Suppose you have a 3x2 matrix, A. Find the transpose of A.", "input": "A = [1 9 7; 8 0 6];", "output": "A_Transpose = A'", "category": "Python"}, {"instruction": "Create a dictionary comprehension to create a dictionary with the values from the given list.", "input": "list = [\"a\",\"b\",\"c\"]", "output": "dict = {x:x for x in list}", "category": "Python"}, {"instruction": "Write a class that simulates a die with 6 sides.", "input": "", "output": "import random\n\nclass Die:\n    def __init__(self):\n        self.sides = 6\n\n    def roll(self):\n        return random.randint(1, self.sides)", "category": "Python"}, {"instruction": "Create a class called Ball which has three dimensional coordinates x, y and z.", "input": "", "output": "class Ball:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z", "category": "Python"}, {"instruction": "Create a class in Java that comprises of a date, a location and temperature reading associated with that location on that particular date.", "input": "", "output": "public class TemperatureReading {\n  private Date date;\n  private String location;\n  private int temperature;\n\n  public TemperatureReading(Date date, String location, int temperature) {\n    this.date = date;\n    this.location = location;\n    this.temperature = temperature;\n  }\n\n  public Date getDate() {\n    return date;\n  }\n\n  public String getLocation() {\n    return location;\n  }\n\n  public int getTemperature() {\n    return temperature;\n  }\n}", "category": "Python"}, {"instruction": "Create an array of fruits and vegetables with 10 items.", "input": "", "output": "['Apple', 'Banana', 'Orange', 'Grape', 'Potato', 'Carrot', 'Onion', 'Cucumber', 'Tomato', 'Pepper']", "category": "Python"}, {"instruction": "Insert a breakpoint just before the return statement.", "input": "def calculate_the_total(fruit_list):\n   total = 0\n   for item in fruit_list:\n      total += item\n   \n   return total", "output": "def calculate_the_total(fruit_list):\n   total = 0\n   for item in fruit_list:\n      total += item\n   import pdb; pdb.set_trace()\n   \n   return total", "category": "Python"}, {"instruction": "Create a for loop for looping through the elements of a given array.", "input": "[\"Apple\", \"Banana\", \"Orange\"]", "output": "for item in [\"Apple\", \"Banana\", \"Orange\"]: \n    print(item)", "category": "Python"}, {"instruction": "You are given a string and asked to find the frequency of each character in the string", "input": "str = \"GPT Model\"", "output": "from collections import Counter \n\ndef char_frequency(str): \n    return Counter(str) \n\nstr = \"GPT Model\"\nprint (char_frequency(str))\n\n# Output: {'G': 1, 'P': 1, 'T': 1, ' ': 1, 'M': 1, 'o': 2, 'd': 1, 'e': 1, 'l': 1}", "category": "Python"}, {"instruction": "You are asked to create an array of three random numbers between 1 to 10", "input": "", "output": "import random\n\nrandom_nums = []\nfor i in range(3):\n    random_nums.append(random.randint(1,10))\n\nprint(random_nums)\n\n# Output: [2, 8, 6] (new set of 3 random numbers)", "category": "Python"}, {"instruction": "Name all the built-in functions in Python", "input": "", "output": "abs(), all(), any(), ascii(), bin(), bool(), bytearray(), calls(), chr(), dir(), divmod(), enumerate(), eval(), filter(), float(), format(), frozenset(), hex(), int(), isinstance(), len(), list(), map(), max(), min(), oct(), open(), ord(), pow(), print(), range(), reversed(), round(), set(), slice(), sorted(), str(), sum(), tuple(), type(), zip()", "category": "Python"}, {"instruction": "You are given a list of strings and you need to create a dictionary from that list.", "input": "list1 = [\"apple\", \"banana\", \"mango\"]", "output": "list1 = [\"apple\", \"banana\", \"mango\"]\nresult = dict.fromkeys(list1, 0)\nprint(result)\n\n# Output:  {'apple': 0, 'banana': 0, 'mango': 0}", "category": "Python"}, {"instruction": "Extract the first 2 elements from a given array.", "input": "arr = [1, 2, 3, 4, 5]", "output": "def extract_first_two(arr):\n    return arr[:2]\n\narr = [1, 2, 3, 4, 5]\nresult = extract_first_two(arr)\nprint (result)\n\n# Output: [1, 2]", "category": "Python"}, {"instruction": "From a given list of words, create a new list with only the words that contain the letter 'a'.", "input": "my_list = [\"cat\", \"dog\", \"apple\", \"pear\"]", "output": "new_list = [word for word in my_list if \"a\" in word] # Output: [\"cat\", \"apple\", \"pear\"]", "category": "Python"}, {"instruction": "What is the difference between = (assignment) operator and == (comparison) operator?", "input": "", "output": "The = operator assigns a value to a variable, while the == operator checks if two values are equal.", "category": "Python"}, {"instruction": "Convert the number to a string.", "input": "num = 7", "output": "str(num) # Output: \"7\"", "category": "Python"}, {"instruction": "Develop a function in Rust to print the factors of a given number.", "input": "Number: 15", "output": "fn find_factors(num: i32) {\n    println!(\"Factors of {} are:\", num);\n    for i in 1..num + 1 {\n        if num % i == 0 {\n            println!(\"{}\", i);\n        }\n    }\n}\n \nfn main() {\n    let num = 15;\n    find_factors(num);\n}", "category": "Python"}, {"instruction": "Create a function in JavaScript to find the longest substring in a given string without repeating characters.", "input": "String: \"abcabcbb\"", "output": "function findLongestSubstring(s) {\n  let longest = 0;\n  let seen = {};\n  let start = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    if (seen[char]) {\n      start = Math.max(start, seen[char]);\n    }\n    // index - beginning of substring + 1 (to include current in count)\n    longest = Math.max(longest, i - start + 1);\n    // store the index of the next char so as to not double count\n    seen[char] = i + 1;\n  }\n  return longest;\n}", "category": "Python"}, {"instruction": "Explain why the given function will not work as expected.", "input": "def greet(name):\nprint(\"Hello,\" + name)\n\ngreet(\"John\")", "output": "The given function will not work as expected because it does not contain a return statement. The function will print \"Hello, John\", but it will not return anything and thus the result of the function will be None. Additionally, the function will not raise an error, which may lead to confusion. Therefore, it is important to make sure that the function contains a return statement.", "category": "Python"}, {"instruction": "Create a Python script to print the 3rd element in a given list.", "input": "[1,2,3,4,5,6]", "output": "list = [1,2,3,4,5,6]\n\nprint(list[2]) # Output: 3", "category": "Python"}, {"instruction": "Create a function in Dart to generate a series of random numbers within a specified range.", "input": "Start: 10\nEnd: 20", "output": "int start = 10;\nint end = 20;\n\n// Function to generate random numbers\nint generateRandomNumbers(int start, int end) {\n  var random = Random();\n  return random.nextInt(end - start) + start;\n}", "category": "Python"}, {"instruction": "Create a class in Java to store the information about a user.", "input": "", "output": "public class User {\n    private String name;\n    private int age;\n    private String address;\n    \n    \n    public User(String name, int age, String address) {\n        this.name = name;\n        this.age = age;\n        this.address = address;\n    }\n    \n    \n    public String getName() {\n        return name;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n    \n    public String getAddress() {\n        return address;\n    }\n    \n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public void setAge(int age) {\n         this.age = age;\n    }\n    \n    public void setAddress(String address) {\n        this.address = address;\n    } \n}", "category": "Python"}, {"instruction": "Parse a given HTML string and return a JSON structure.", "input": "<html>\n    <head>\n        <title>Example Website</title>\n    </head>\n    <body>\n        <h1>Header</h1>\n        <p>This is a paragraph.</p>\n    </body>\n</html>", "output": "{\n  \"tag\": \"html\"\n  \"children\": [\n    {\n        \"tag\": \"head\"\n        \"children\": [\n            {\n                \"tag\": \"title\"\n                \"children\": [\n                    \"Example Website\"\n                ]\n            }\n        ]\n    },\n    {\n        \"tag\": \"body\"\n        \"children\": [\n            {\n                \"tag\": \"h1\"\n                \"children\": [\"Header\"]\n            },\n            {\n                \"tag\": \"p\"\n                \"children\": [\"This is a paragraph.\"]\n            }\n        ]\n    }\n  ]\n}", "category": "Python"}, {"instruction": "Compute the prime numbers between 1 to 10", "input": "", "output": "primes = [2, 3, 5, 7]\n\nfor num in range(1, 11):\n    if num > 1:\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n\nprint(primes)\n\n# Output: [2, 3, 5, 7] (all the prime numbers between 1 to 10)", "category": "Python"}, {"instruction": "Write a code snippet to display the name and age of the oldest person in a list called 'people'.", "input": "people = [{'name':'Jone','age':45}, {'name':'Jane','age':37}, {'name':'Jack','age':48}]", "output": "oldest_person = max(people, key=lambda person: person['age'])\n\nprint(\"Name: {} Age: {}\".format(oldest_person['name'], oldest_person['age']))", "category": "Python"}, {"instruction": "Create a new array 'b' from array 'a' containing only even numbers.", "input": "a = [1, 2, 3, 4, 5, 6]", "output": "b = [num for num in a if num % 2 == 0]", "category": "Python"}, {"instruction": "Update the following code to fix a syntax error.", "input": "def add_two_number(a,b):\n    return a + b;", "output": "def add_two_numbers(a, b):\n    return a + b", "category": "Python"}, {"instruction": "Find and return the longest string in the given array.", "input": "[\"hello\", \"how\", \"are\", \"you\", \"doing\"]", "output": "def longestString(arr):\n    longest_str = ''\n    for s in arr:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "category": "Python"}, {"instruction": "Create an object for making a copy of a string.", "input": "String: \"Hello\"", "output": "String myString = \"Hello\";\nString myCopyString = new String(myString);", "category": "Python"}, {"instruction": "Using the given data structure, find and return the 3 highest numbers.", "input": "[2, 4, 8, 10, 6, 5, 7, 11]", "output": "def findThreeHighest(arr):\n    arr.sort()\n    return arr[-1], arr[-2], arr[-3]", "category": "Python"}, {"instruction": "Debug the code and make sure it successfully prints out \"Hello World\".", "input": "#include <iostream> \nusing namespace std;\n\nvoid main () \n{ \n   cout << \"Hello World\" << endl; \n  \n   return 0; \n}", "output": "#include <iostream> \nusing namespace std;\n\nint main () \n{ \n   cout << \"Hello World\" << endl; \n  \n   return 0; \n}", "category": "Python"}, {"instruction": "Modify the code so that it prints the given string in lowercase letters.", "input": "String: \"HELLO WORLD\"\n\nCode:\n#include<iostream>\nusing namespace std;\n\nint main() {\n    string s = \"HELLO WORLD\";\n\n    cout << s << endl;\n\n    return 0;\n}", "output": "#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nint main() {\n    string s = \"HELLO WORLD\";\n\n    // Convert string s to lowercase letters\n    transform(s.begin(), s.end(), s.begin(), ::tolower); \n    cout << s << endl;\n\n    return 0;\n}", "category": "Python"}, {"instruction": "Design a function to retrieve the records from a nested json structure.", "input": "{\n  \"products\": {\n    \"book\": {\n      \"title\": \"Alice in Wonderland\",\n      \"author\": \"Lewis Carol\"\n    },\n    \"movie\": {\n      \"title\": \"The Godfather\",\n      \"director\": \"Francis Ford Coppola\"\n    }\n  }\n}", "output": "def parseJSON(input_json):\n    book_record = input_json[\"products\"][\"book\"]\n    movie_record = input_json[\"products\"][\"movie\"]\n\n    book_title = book_record[\"title\"]\n    book_author = book_record[\"author\"]\n    \n    movie_title = movie_record[\"title\"]\n    movie_director = movie_record[\"director\"]\n\n    return book_title, book_author, movie_title, movie_director", "category": "Python"}, {"instruction": "Create a URL for the given information.", "input": "Protocol: https\nSubdomain: mypage\nDomain: google\nPath: search", "output": "https://mypage.google.com/search", "category": "Python"}, {"instruction": "Use the input data to create a bar chart.", "input": "Data: [(\"Apple\", 20), (\"Samsung\", 16), (\"Google\", 11), (\"Sony\", 14)]", "output": "import matplotlib.pyplot as plt\n\nitems = [x[0] for x in data]\nvalues = [x[1] for x in data]\n\nplt.bar(items, values)\nplt.show()", "category": "Python"}, {"instruction": "Print the given array of strings in reverse order.", "input": "[\"apple\", \"banana\", \"orange\", \"kiwi\"]", "output": "print(\"kiwi\")\nprint(\"orange\")\nprint(\"banana\")\nprint(\"apple\")", "category": "Python"}, {"instruction": "Using numpy, find the mean of array 'arr'.", "input": "arr = [1, 2, 3, 4, 5]", "output": "import numpy as np\nnp.mean(arr)", "category": "Python"}, {"instruction": "Write a loop to sum all the elements in list 'l'.", "input": "l = [1, 2, 3, 4]", "output": "s = 0\nfor num in l:\n    s += num", "category": "Python"}, {"instruction": "Write a code snippet to add a new element 'z' at the end of list 'x'.", "input": "x = [1, 2, 3]", "output": "x.append('z')", "category": "Python"}, {"instruction": "Edit the existing code to focus the cursor in the input field.", "input": "<html>\n    <body>\n        <input type=\"text\" id=\"myInput\" />\n        <script type=\"text/javascript\">\n            document.getElementById('myInput').focus();\n        </script>\n    </body>\n</html>", "output": "<html>\n    <body>\n        <input type=\"text\" id=\"myInput\" autofocus />\n        <script type=\"text/javascript\">\n            document.getElementById('myInput').focus();\n        </script>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Create a class 'Fruit' to define a fruit.", "input": "", "output": "class Fruit:\n    def __init__(self, name, color, weight):\n        self.name = name\n        self.color = color\n        self.weight = weight\n\n    def print_info(self):\n        print(f'Name: {self.name}')\n        print(f'Color: {self.color}')\n        print(f'Weight: {self.weight}')", "category": "Python"}, {"instruction": "Write a function 'play_game' that plays a simple game of rock paper scissors.", "input": "", "output": "def play_game():\n    options = ['rock', 'paper', 'scissors']\n    computer_choice = random.choice(options)\n    user_choice = input('Choose \"rock\", \"paper\", or \"scissors\": ')\n\n    if user_choice == computer_choice:\n        print('It is a tie!')\n    elif user_choice == 'rock':\n        if computer_choice == 'paper':\n            print('Computer wins!')\n        else:\n            print('You win!')\n    elif user_choice == 'paper':\n        if computer_choice == 'scissors':\n            print('Computer wins!')\n        else:\n            print('You win!')\n    elif user_choice == 'scissors':\n        if computer_choice == 'rock':\n            print('Computer wins!')\n        else:\n            print('You win!')", "category": "Python"}, {"instruction": "Insert 'value' into the dictionary 'dic' at the key 'key'.", "input": "dic = {'a':1, 'b':2}\nkey = 'c'\nvalue = 3", "output": "dic[key] = value", "category": "Python"}, {"instruction": "Create a MySQL database and table based on the given information.", "input": "Table name: products\nFields: id (integer, unique), name (varchar), price (decimal)", "output": "CREATE DATABASE products;\n\nUSE products;\n\nCREATE TABLE products (\n  id INTEGER UNIQUE,\n  name VARCHAR(255),\n  price DECIMAL(10, 2)\n);", "category": "Python"}, {"instruction": "How to create a basic HTML page in JavaScript?", "input": "", "output": "We can create a basic HTML page using the document.write() method. The syntax to create an HTML page using document.write() is as follows:\n\ndocument.write(\"<html>\"); \ndocument.write(\"<head>\");\ndocument.write(\"<title>My Page</title>\");\ndocument.write(\"</head>\"); \ndocument.write(\"<body>\");\ndocument.write(\"My first web page with JavaScript\");\ndocument.write(\"</body>\");\ndocument.write(\"</html>\");", "category": "Python"}, {"instruction": "Write a line of JavaScript code to create a variable `x` and assign the number `7` to it.", "input": "", "output": "let x = 7;", "category": "Python"}, {"instruction": "Refactor the given piece of code in Java to make it more concise.", "input": "int a = 5;\nint b = 10;\nint c = a + b;", "output": "int c = 5 + 10;", "category": "Python"}, {"instruction": "Identify a function from the following code snippet which adds an element to the given array.", "input": "arr = [1, 2, 3]\ndef add_element(arr, element):\n    return arr.append(element)", "output": "The function is add_element(arr, element), which adds the given element to the given array and returns the modified array.", "category": "Python"}, {"instruction": "Create a function that checks for a specific word in the string.", "input": "myString = \"This is a simple sentence.\"", "output": "def check_word(myString, word):\n    if word in myString:\n        return True\n    return False", "category": "Python"}, {"instruction": "Create a class \"Addition\" with a method called \"add\" which takes two integers as inputs and returns the sum of the two numbers?", "input": "", "output": "class Addition:\n    def add(self, x, y):\n        return x + y", "category": "Python"}, {"instruction": "Create a CSS stylesheet to turn all the h1 tags to a deep purple color.", "input": "", "output": "h1 {\n    color: #4B0082;\n}", "category": "Python"}, {"instruction": "Create a bash script to check if a given integer is even.", "input": "", "output": "#!/bin/bash\nif [ $1%2 -eq 0 ]\nthen\n  echo \"$1 is an even number\"\nelse\n  echo \"$1 is an odd number\"\nfi", "category": "Python"}, {"instruction": "How would you use the 'enumerate()' function in a for loop to print numbers from 0 to 5?", "input": "", "output": "for i, item in enumerate(range(6)):\n    print(i)", "category": "Python"}, {"instruction": "Create a loop that runs from 1 to 10 and prints the square of each number.", "input": "", "output": "for i in range (1, 11):\n    print(i**2)", "category": "Python"}, {"instruction": "Using regex, replace all occurrences of 'cat' with 'dog' in the following text.", "input": "text = \"I saw a cat in the park.\"", "output": "import re\n\ntext = \"I saw a cat in the park.\"\n\nresult = re.sub(r'cat', 'dog', text)\nprint(result)\n\n# Output\nI saw a dog in the park.", "category": "Python"}, {"instruction": "Find the number of elements in an array of integers [1,2,3,4,5].", "input": "arr = [1,2,3,4,5]", "output": "length = len(arr)\nprint(length)\n\n# Output\n5", "category": "Python"}, {"instruction": "Create an array of length 10 and fill each element randomly from 0 to 9.", "input": "", "output": "import random\n\narr = []\nfor i in range(10):\n    arr.append(random.randint(0, 9))\n\nprint(arr)", "category": "Python"}, {"instruction": "Sort the list of numbers [3,2,7,9,1] in ascending order.", "input": "list = [3,2,7,9,1]", "output": "list.sort()\nprint(list)\n\n# Output\n[1,2,3,7,9]", "category": "Python"}, {"instruction": "Find the mean of the list of numbers [1,2,3,4,5,6,7]", "input": "", "output": "list = [1,2,3,4,5,6,7]\n\nsum = 0\nfor i in list:\n    sum += i\n\nmean = sum/len(list)\n\nprint(mean)", "category": "Python"}, {"instruction": "Create a function that multiplies two numbers and return the result.", "input": "a = 10\nb = 5", "output": "def multiply(a, b):\n    return a * b\n\nresult = multiply(a, b)\nprint(result)", "category": "Python"}, {"instruction": "Create a class named \"Vector\" with two attributes \"x\" and \"y\" and define a \"length\" method that returns the length of the vector.", "input": "", "output": "class Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def length(self):\n        return (self.x**2 + self.y**2)**0.5", "category": "Python"}, {"instruction": "Generate a Fibonacci sequence up to the 12th term.", "input": "", "output": "a, b = 0, 1\n\nfor i in range (12): \n    print(a) \n    a, b = b, a + b \n\n# Output \n0 1 1 2 3 5 8 13 21 34 55 89 144", "category": "Python"}, {"instruction": "Given a Python list, display the total number of elements in the list.", "input": "mylist = [1, 2, 3, 4, 5]", "output": "The total number of elements in the list is 5.", "category": "Python"}, {"instruction": "Write a function which takes a list of integers and returns an integer which is the product of all the integers in the list.", "input": "", "output": "def product_of_list(nums):\n    product = 1\n    for num in nums:\n        product *= num\n    return product", "category": "Python"}, {"instruction": "Design a function to get the length of the longest increasing subsequence in a given list of integers.", "input": "", "output": "def longest_increasing_subsequence_length(nums):\n    n = len(nums)\n    LIS = [1] * n\n\n    for i in range(1, n):\n        for j in range(0, i):\n            if nums[i] > nums[j] and LIS[i] < LIS[j] + 1:\n                LIS[i] = LIS[j] + 1\n\n    return max(LIS)", "category": "Python"}, {"instruction": "Create a Ruby program that takes a number input from the user and creates a loop that prints out each number from 1 to the input number.", "input": "8", "output": "(1..8).each do |x| \n  puts x \nend", "category": "Python"}, {"instruction": "Combine two sorted Arrays into one sorted Array.", "input": "arr1 = [1, 5, 8, 9, 10];\narr2 = [2, 3, 4, 6, 7];", "output": "function combineArray(arr1, arr2) {\n    let combined = [];\n    \n    let l = 0;\n    let r = 0;\n\n    while ((l < arr1.length) && (r < arr2.length)) {\n        if (arr1[l] < arr2[r]) {\n            combined.push(arr1[l]);\n            l++;\n        } else {\n            combined.push(arr2[r]);\n            r++;\n        }\n    }\n\n    while (l < arr1.length) {\n        combined.push(arr1[l]);\n        l++;\n    }\n\n    while (r < arr2.length) {\n        combined.push(arr2[r]);\n        r++;\n    }\n    return combined;\n}\n\nconst result = combineArray(arr1, arr2);\nconsole.log(result);  // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "category": "Python"}, {"instruction": "Write a JavaScript function to convert an array to a string separated by key-pair value separator such as \"|\".", "input": "const array1 = [1,2,3,4,5];", "output": "function arrayToString(arr, separator=\"|\") {\n    return arr.join(separator);\n}\n\narrayToString(array1); // returns \"1|2|3|4|5\"", "category": "Python"}, {"instruction": "Create a function to combine two arrays, sorting first by grade in ascending order, and then by age in descending order.", "input": "Array 1: [['Tom', 10], ['Sam', 8], ['Bob', 8]]\nArray 2: [['Tom', 15], ['Sam', 12], ['Bob', 13]]", "output": "def combine(arr1, arr2): \n  res = [] \n  # Combine two arrays \n  for i in range(len(arr1)): \n    res.append(arr1[i] + arr2[i]) \n  \n  # Sort by grade in ascending order\n  res.sort(key=lambda x: x[1]) \n  \n  # Sort by age in descending order\n  res.sort(key=lambda x: x[2], reverse=True) \n  \n  return res", "category": "Python"}, {"instruction": "Given a matrix, write a program that finds its determinant in Python.", "input": "[[a, b], \u00a0[c, d]]", "output": "def determinant(matrix): \n  a = matrix[0][0]\n  b = matrix[0][1]\n  c = matrix[1][0]\n  d = matrix[1][1]\n  return a*d - b*c", "category": "Python"}, {"instruction": "Write an HTML table to show a list of 3 books and respective authors.", "input": "Book 1: The Great Gatsby, Author: F. Scott Fitzgerald\nBook 2: The Catcher in the Rye, Author: J. D. Salinger\nBook 3: To Kill a Mockingbird, Author: Harper Lee", "output": "<table>\n  <tr>\n    <th>Book</th>\n    <th>Author</th>\n  </tr>\n  <tr>\n    <td>The Great Gatsby</td>\n    <td>F. Scott Fitzgerald</td>\n  </tr>\n  <tr> \n    <td>The Catcher in the Rye</td>\n    <td>J.D. Salinger</td>\n  </tr> \n  <tr>\n    <td>To Kill a Mockingbird</td>\n    <td>Harper Lee</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "How would you delete every third element of a given linked list?", "input": "", "output": "We can traverse the linked list and keep track of the count of the visited nodes. For every node whose count is divisible by 3, we delete the node by adjusting the references of the preceding and succeeding nodes.", "category": "Python"}, {"instruction": "Write a function in Javascript that takes two numbers and combines them in order to calculate their sum.", "input": "", "output": "function sum(a, b) {\n  return a + b;\n}", "category": "Python"}, {"instruction": "Calculate the sum of the numbers from 1 to 10 and print out the result.", "input": "", "output": "sum = 0\n\nfor n in range (1, 11):\n    sum += n\n\nprint(sum)", "category": "Python"}, {"instruction": "Suggest ways to improve the performance of the following list implementation.", "input": "class List: \n  def __init__(self): \n    self.items = [] \n  \n  def append(self, item):\n    self.items.append(item) \n    \n  def remove(self, item): \n     self.items.remove(item)", "output": "class List: \n   def __init__(self): \n     self.items = [] \n   \n   def append(self, item):\n     if item not in self.items:\n       self.items.append(item) \n       \n   def remove(self, item): \n      try:\n        self.items.remove(item)\n      except ValueError:\n        pass\n  \n   def remove_at_index(self, index):\n    del self.items[index]\n  \n   def search(self, item):\n    return item in self.items", "category": "Python"}, {"instruction": "Write a C code to compare two strings letter-wise and print out the number of times they differ.", "input": "\"abc\", \"bcd\"", "output": "#include <stdio.h>\n\nint compare_strings(char *str1, char *str2)\n{\n    int count = 0;\n    while (*str1 != '\\0' && *str2 != '\\0')\n    {\n        if (*str1 != *str2)\n            count++;\n        str1++;\n        str2++;\n    }\n    return count;\n}\n\nint main()\n{\n    char str1[100];\n    char str2[100];\n    int count;\n    printf(\"Input string 1: \");\n    scanf(\"%s\", str1);\n    printf(\"Input string 2: \");\n    scanf(\"%s\", str2);\n\n    count = compare_strings(str1, str2);\n\n    printf(\"Number of differences: %d\\n\", count);\n\n    return 0;\n}", "category": "Python"}, {"instruction": "Create a JavaScript function that takes two strings of equal length and returns the positions of the characters which don't match.", "input": "\"abcdefg\", \"hijklmn\"", "output": "function findNonMatchingPos(str1, str2) {\n  let positions = [];\n  if(str1.length != str2.length) {\n    return -1; //handle unequal lengths\n  }\n  for(let i = 0; i < str1.length; i++) {\n    if(str1.charAt(i) !== str2.charAt(i)) {\n      positions.push(i);\n    }\n  }\n  return positions;\n}", "category": "Python"}, {"instruction": "Write a PHP code to accept text from a text box and print it to the screen.", "input": "", "output": "<?php\nif(isset($_POST['submit'])) {\n    $text = $_POST['text'];\n    echo $text;\n}\n?>\n<form action=\"\" method=\"POST\">\n<input type=\"text\" name=\"text\"/>\n<input type=\"submit\" name=\"submit\"/>\n</form>", "category": "Python"}, {"instruction": "Create an HTML page with a table containing the following data in four rows.", "input": "Id | First Name | Last Name | Age\n1 | John | Doe | 30\n2 | Jane | Doe | 25\n3 | Brian | Smith | 32\n4 | Maria | Smith | 28", "output": "<html>\n    <head>\n        <title>Table Data</title>\n    </head>\n    <body>\n        <table>\n            <thead>\n                <tr>\n                    <th>Id</th>\n                    <th>First Name</th>\n                    <th>Last Name</th>\n                    <th>Age</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>1</td>\n                    <td>John</td>\n                    <td>Doe</td>\n                    <td>30</td>\n                </tr>\n                <tr>\n                    <td>2</td>\n                    <td>Jane</td>\n                    <td>Doe</td>\n                    <td>25</td>\n                </tr>\n                <tr>\n                    <td>3</td>\n                    <td>Brian</td>\n                    <td>Smith</td>\n                    <td>32</td>\n                </tr>\n                <tr>\n                    <td>4</td>\n                    <td>Maria</td>\n                    <td>Smith</td>\n                    <td>28</td>\n                </tr>\n            </tbody>\n        </table>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Create a bash script that takes a path argument and checks for pattern `.gitconfig`.", "input": "/home/user/", "output": "#!/bin/bash\n\nDIR=$1\nresult=$(find \"$DIR\" -name '*.gitconfig' | wc -l)\n\nif [ $result -gt 0 ]\nthen\n    echo \"Found $result .gitconfig files in $DIR\"\nelse\n    echo \"No .gitconfig files found in $DIR\"\nfi", "category": "Python"}, {"instruction": "Write a Java program to convert a character to an int.", "input": "'A'", "output": "public class Main {\n\n    public static void main(String[] args) {\n\n        char ch = 'A';\n        int asciiCode = (int) ch;\n        System.out.println(\"ASCII code of 'A' :\" + asciiCode);\n    }\n}", "category": "Python"}, {"instruction": "Create a function in TypeScript that takes two strings of equal length and returns the number of characters which match at the same position in the strings.", "input": "\"abcdefg\", \"hijklmn\"", "output": "function countMatchingChar(str1: string, str2: string): number {\n    let count = 0;\n    if(str1.length != str2.length) {\n        return -1; // handle unequal lengths\n    }\n    for(let i = 0; i < str1.length; i++) {\n        if(str1.charAt(i) === str2.charAt(i)) {\n            count++;\n        }\n    }\n    return count;\n}", "category": "Python"}, {"instruction": "How would you store the location of a person in a database?", "input": "", "output": "The location of a person can be stored in a database in the form of a latitude and longitude pair, as a set of geographic coordinates or as a physical address.", "category": "Python"}, {"instruction": "Generate a code snippet in Java to display a message \"Hello World!\"", "input": "", "output": "System.out.println(\"Hello World!\");", "category": "Python"}, {"instruction": "Use for loop to print all numbers from 1 to 100 in separate lines.", "input": "", "output": "for i in range (1, 101):\n    print(i)", "category": "Python"}, {"instruction": "Create an HTML template for a login form having username and password.", "input": "", "output": "<html>\n    <head>\n        <title>Login Form</title>\n    </head>\n    <body>\n        <form action=\"\" method=\"POST\">\n            <label>Username:</label><input type=\"text\" />\n            <label>Password:</label><input type=\"password\" />\n            <input type=\"submit\" />\n        </form>\n    </body>\n</html>", "category": "Python"}, {"instruction": "Create a Swift closure to calculate the power of a number.", "input": "", "output": "let powerCalc = { (base: Int, exp: Int) -> Int in\n  return Int(pow(Double(base), Double(exp)))\n}", "category": "Python"}, {"instruction": "Construct a pandas dataframe from 4 dictionaries.", "input": "d1 = {\n 'name' : [\"Alice\", \"Bob\", \"Charlie\"],\n 'age' : [24, 45, 37],\n}\n \nd2 = {\n 'weight' : [87, 66, 65],\n 'height' : [165, 179, 173],\n}\n \nd3 = {\n 'income' : [3000, 4500, 4800],\n 'job' : [\"engineer\", \"teacher\", \"secretary\"],\n}\n \nd4 = {\n 'city' : [\"Glasgow\", \"New York\", \"Paris\"],\n 'country' : [\"Scotland\", \"USA\", \"France\"],\n}", "output": "import pandas as pd\n \ndf = pd.DataFrame({\n 'name': d1['name'], \n 'age': d1['age'],\n 'weight': d2['weight'],\n 'height': d2['height'],\n 'income': d3['income'],\n 'job': d3['job'],\n 'city': d4['city'],\n 'country': d4['country']\n })", "category": "Python"}, {"instruction": "Create a MySQL query to get the names of all users who are over 18.", "input": "", "output": "SELECT name FROM users WHERE age > 18;", "category": "Python"}, {"instruction": "Write a sql query to find all employees who have the same job and department.", "input": "", "output": "SELECT * \nFROM Employees \nWHERE Department IN (SELECT Department \n                     FROM Employees \n                     GROUP BY Department \n                     HAVING COUNT(DISTINCT Job) = 1) \nAND Job IN (SELECT Job\n            FROM Employees\n            GROUP BY Job\n            HAVING COUNT(DISTINCT Department) = 1)", "category": "Python"}, {"instruction": "Generate a random password with a combination of letters, numbers and special characters.", "input": "", "output": "import random\n\ndef generate_password():\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    numbers = '0123456789'\n    special_characters = '@#$%^&*()'\n    \n    password = ''\n\n    password += random.choice(letters)\n    password += random.choice(numbers)\n    password += random.choice(special_characters)\n\n    for _ in range(6):\n        source = random.choice([letters, numbers])\n        password += random.choice(source)\n\n    return password\n\nprint(generate_password())", "category": "Python"}, {"instruction": "Given two sorted lists of numbers, write a code to merge them.", "input": "list1 = [1, 2, 3, 4]\nlist2 = [3, 4, 5, 6]", "output": "def merge_lists(list1, list2):\n    merged_list = []\n \n    i, j = 0, 0 \n    while i < len(list1) and j < len(list2):\n        if list1[i] <= list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n \n    if i == len(list1):\n        merged_list.extend(list2[j:])\n    else:\n        merged_list.extend(list1[i:])\n \n    return merged_list\n\nmerged_list = merge_lists(list1, list2)\nprint(merged_list)", "category": "Python"}, {"instruction": "Create a variable to store the given number as an integer.", "input": "num = \"42\"", "output": "num = \"42\"\n\nnum_int = int(num)\nprint(num_int) # Output: 42", "category": "Python"}, {"instruction": "Reconstruct the given code snippet.", "input": "", "output": "def is_year_leap(year):\n    # leap year is divisible by 4\n    # However, if year is divisible by 100, then it is not a leap year\n    # Unless year is divisible by 400\n    leap_year = (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)\n    return leap_year", "category": "Python"}, {"instruction": "Create an array with 10 random numbers in the range of 1 to 50.", "input": "", "output": "import random\n\nnums = [random.randint(1, 50) for _ in range(10)]\nprint(nums) # Output: [7, 44, 15, 47, 1, 31, 29, 39, 33, 11]", "category": "Python"}, {"instruction": "Create a set of the characters present in the given string.", "input": "string = \"mississippi\"", "output": "string = \"mississippi\"\n\ncharacters = set(string)\nprint(characters) # Output: {'i', 's', 'p', 'm'}", "category": "Python"}, {"instruction": "Using the comment as a guide, create a function to calculate the area of a triangle.", "input": "", "output": "def area_of_triangle(base, height):\n    \"\"\"Calculate the area of a triangle.\"\"\"\n    area = (0.5 * base * height)\n    return area", "category": "Python"}, {"instruction": "Reverse the given input string.", "input": "string = \"code\"", "output": "string = \"code\"\n\nreversed_str = string[::-1] \nprint(reversed_str) # Output: edoc", "category": "Python"}, {"instruction": "Insert the proper code to convert the given address from string to a dictionary.", "input": "address = \"901 Grand Absinth Avenue,Anytown, ST, 98765\"", "output": "address = \"901 Grand Absinth Avenue,Anytown, ST, 98765\"\n\naddress_dict = {\n    \"street\": address.split(\",\")[0],\n    \"city\": address.split(\",\")[1],\n    \"state\": address.split(\",\")[2],\n    \"zip\": address.split(\",\")[3]\n}", "category": "Python"}, {"instruction": "Design a JavaScript program to validate forms.", "input": "", "output": "function validateForm() {\n  // check if each form element has a valid value\n  if (formElement1.value == '' || formElement2.value == '') {\n    alert('Please fill out all the fields!');\n    return false;\n  } else {\n    return true;\n  }\n}", "category": "Python"}, {"instruction": "Create a regular expression that matches a string that begins with \"abcd\" and ends with \"efgh\".", "input": "", "output": "/^abcd.*efgh$/", "category": "Python"}, {"instruction": "Change the following Java code so that it only prints the letters at even indices in the string.", "input": "String str = \"Hello, World!\";\n\nfor (int i = 0; i < str.length(); i++) {\n System.out.print(str.charAt(i));\n}", "output": "String str = \"Hello, World!\";\n\nfor (int i = 0; i < str.length(); i+=2) {\n System.out.print(str.charAt(i));\n}", "category": "Python"}, {"instruction": "Construct a JSX expression that renders a <span> element with className \"highlight\".", "input": "", "output": "<span className=\"highlight\" ></span>", "category": "Python"}, {"instruction": "Compute the natural logarithm of 500 using Python.", "input": "", "output": "import math\n \nprint(math.log(500))", "category": "Python"}, {"instruction": "Compose a basic HTML page to display the phrase \"Contact us now!\"", "input": "", "output": "<html>\n  <head>\n    <title>Contact Page</title>\n  </head>\n  <body>\n    <h1>Contact Us Now!</h1>\n  </body>\n</html>", "category": "Python"}, {"instruction": "Implement a decision tree as a class in Python.", "input": "", "output": "class DecisionTree:\n    def __init__(self,X,y):\n        self.X = X\n        self.y = y\n\n    def fit(self, X,y):\n        # Implement decision tree fitting algorithm\n\n    def predict(self,X):\n        # Implement decision tree prediction algorithm", "category": "Python"}, {"instruction": "Design a SQL table to store user information such as username and password.", "input": "", "output": "CREATE TABLE users (\n    id INTEGER primary key,\n    username VARCHAR(32) NOT NULL,\n    password VARCHAR(256) NOT NULL\n);", "category": "Python"}, {"instruction": "Sort a list of words in alphabetical order using C.", "input": "words = [\"hello\", \"world\", \"apple\", \"zebra\"]", "output": "#include<stdio.h> \n#include<string.h> \n  \nint main() \n{ \n    char words[][10] = {\"hello\", \"world\", \"apple\", \"zebra\"};\n    int n = 4;\n    int i, j; \n  \n    // sorting the phrases\n    for (i = 0; i < n-1; i++) \n       for (j = i+1; j < n; j++) \n          if (strcmp(words[i], words[j]) > 0) \n          { \n              char temp[10]; \n              strcpy(temp, words[i]); \n              strcpy(words[i], words[j]); \n              strcpy(words[j], temp); \n          } \n  \n    printf(\"In lexicographical order: \\n\"); \n    for (i = 0; i < n; i++) \n       printf(\"%s\\n\", words[i]); \n  \n    return 0; \n}", "category": "Python"}, {"instruction": "Create a short Java program that prints out a word 5 times.", "input": "Word: hello", "output": "public class HelloWorld {\n    public static void main(String[] args) {\n        for (int i = 0; i < 5; i++) {\n            System.out.println(\"hello\");\n        }\n    }\n}", "category": "Python"}, {"instruction": "Compute the sum of numbers in a given tree.", "input": "Tree Structure\n    5\n   / \\\n  3   7", "output": "def compute_sum(root):\n    if not root:\n        return 0\n    left_sum = compute_sum(root.left)\n    right_sum = compute_sum(root.right)\n    return root.val + left_sum + right_sum", "category": "Python"}, {"instruction": "Write an HTML page with a form having two textboxes and two buttons.", "input": "", "output": "<html>\n<body>\n    <form>\n        <input type=\"text\" id=\"textbox1\" /><br>\n        <input type=\"text\" id=\"textbox2\" /><br>\n        <button name=\"submitbtn\">Submit</button><br>\n        <button name=\"resetbtn\">Reset</button><br>\n    </form>\n</body>\n</html>", "category": "Python"}, {"instruction": "Write a function in Python to compute average of the numbers in a given list.", "input": "[2, 4, 5, 7]", "output": "def compute_avg(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total/len(numbers)", "category": "Python"}, {"instruction": "Iterate through a list and print only the elements that include the character 'a'.", "input": "list_items = [\"apple\", \"banana\", \"carrot\", \"durian\"]", "output": "for item in list_items:\n    if 'a' in item:\n        print(item)\n\n# Output\napple\nbanana\ncarrot", "category": "Python"}, {"instruction": "Return true or false for checking if a character is alphanumeric or not.", "input": "A character '&'", "output": "False", "category": "Python"}, {"instruction": "Write a function that accepts an integer value n and creates an n by n matrix, with all elements initialised to zero.", "input": "", "output": "def create_matrix(n):\n    matrix = []\n    for i in range(n):\n        row = []\n        for j in range(n):\n            row.append(0)\n        matrix.append(row)\n    return matrix", "category": "Python"}, {"instruction": "Create a computer algorithm to determine the validity of a sudoku puzzle", "input": "", "output": "def is_valid_sudoku(puzzle): \n  size = len(puzzle) \n  for row in range(len(puzzle)): \n    seen = set() \n    for col in range(size): \n      number = puzzle[row][col] \n      if number != 0: \n        if number in seen: \n          return False \n        seen.add(number) \n  for col in range(3): \n    seen = set() \n    for row in range(size): \n      number = puzzle[row][col] \n      if number != 0: \n        if number in seen: \n          return False \n        seen.add(number) \n  # and so on \n  return True", "category": "Python"}, {"instruction": "Scramble a given array so that it appears in a random order", "input": "[3, 7, 8, 2. 5]", "output": "def scramble(arr): \n  for i in range(len(arr) - 1): \n      j = random.randint(0, len(arr)-1) \n      arr[i], arr[j] = arr[j], arr[i] \n  return arr \n\nscramble([3, 7, 8, 2, 5])", "category": "Python"}, {"instruction": "Transform the following piece of code into a shorter version", "input": "if (x > 0 && x < 10) {\n  return true;\n} else {\n  return false;\n}", "output": "return (x > 0 && x < 10);", "category": "Python"}, {"instruction": "Come up with some ideas to design a user interface for an online database", "input": "", "output": "Some ideas for designing a user interface for an online database include:\n- Using a search bar for users to easily find the information they are looking for quickly. \n- Creating a filter search to allow users to narrow down relevant results as needed.\n- Offering a progress bar to show the status of database operations. \n- Creating a database dashboard to give users an overview of data. \n- Implementing database notifications to alert users when tasks or operations are completed or if any errors occur.", "category": "Python"}, {"instruction": "Calculate the angle of elevation when a ball is thrown upward with initial velocity of 20m/s", "input": "", "output": "The angle of elevation can be calculated as:\n\nangle = arctan(20m/s/9.8m/s^2) = 73.189 degrees", "category": "Python"}, {"instruction": "Create a SQL query to delete all customers with a last name of \"Smith\"", "input": "", "output": "DELETE FROM customers WHERE last_name = 'Smith';", "category": "Python"}, {"instruction": "Create a regular expression for matching the following pattern: words starting with 'b' followed by three times the letter 'a'.", "input": "", "output": "b(a){3}", "category": "Python"}, {"instruction": "Develop a Java program to input a string and reverse the order of words.", "input": "I love to code in Java", "output": "Java in code to love I \n\npublic class Reverse { \n    \n    static void reverseWords(String str)  \n    {  \n          \n        // Specific marker to identify the strings \n        String[] words = str.split(\"\\\\s\"); \n          \n        String reversedString = \"\"; \n          \n        for (int i = 0; i < words.length; i++)  \n        { \n            String word = words[i]; \n            String reverseWord = \"\"; \n              \n            for (int j = word.length()-1; j >= 0; j--) \n            { \n                reverseWord = reverseWord + word.charAt(j); \n            } \n              \n            reversedString = reversedString + reverseWord + \" \"; \n        } \n          \n        System.out.println(str); \n          \n        System.out.println(reversedString); \n    } \n      \n    public static void main(String[] args)  \n    { \n        reverseWords(\"I love to code in Java\"); \n    } \n}", "category": "Python"}, {"instruction": "Create a JavaScript function to traverse an array and return true if the given element exists in the array.", "input": "Array: [5, 8, 2, 6, 9]\nElement: 8", "output": "function containsElement(array, element) {\n  for(var i = 0; i < array.length; i++) {\n    if(array[i] === element) {\n      return true;\n    }\n  }\n  return false;\n}", "category": "Python"}, {"instruction": "What is the purpose of the given CSS declaration?", "input": "font-style: italic;", "output": "The purpose of the given CSS declaration is to make the font appear italicized.", "category": "Python"}, {"instruction": "Complete the following javascript code to perform a task.", "input": "const items = [\n  { company: 'A', date: '02-09-19' },\n  { company: 'B', date: '18-4-19' },\n  { company: 'C', date: '03-12-19' },\n  { company: 'A', date: '29-07-18' },\n];\n\n// Complete code here", "output": "const items = [\n  { company: 'A', date: '02-09-19' },\n  { company: 'B', date: '18-4-19' },\n  { company: 'C', date: '03-12-19' },\n  { company: 'A', date: '29-07-18' },\n];\n\n// Complete code here\nfunction latestDateForCompany(items, company) {\n  let latestDate;\n  for (let item of items) {\n    const { company: c, date } = item;\n    if (c === company) {\n      if (!latestDate) {\n        latestDate = date;\n        continue;\n      }\n      if (new Date(latestDate) < new Date(date)) {\n        latestDate = date;\n      }\n    }\n  }\n  return latestDate;\n}\n\nconsole.log(latestDateForCompany(items, 'A')); // 02-09-19", "category": "Python"}, {"instruction": "Create a JavaScript class called \"Vehicle\" with two properties: brand and model.", "input": "", "output": "class Vehicle {\n    constructor(brand, model) {\n        this.brand = brand;\n        this.model = model;\n    }\n}", "category": "Python"}, {"instruction": "Sort the following array from smallest to largest.", "input": "[4, 6, 2, 8]", "output": "arr.sort()  # arr = [2, 4, 6, 8]", "category": "Python"}, {"instruction": "Write a SQL statement to update the age of a customer with a specific ID.", "input": "Customer_id = 24, Age = 30", "output": "UPDATE customers \nSET age = 30\nWHERE customer_id = 24;", "category": "Python"}, {"instruction": "Create a word frequency dictionary for the following sentence:", "input": "\"The quick brown fox jumps over the lazy dog.\"", "output": "words_frequencies = {'the': 2, 'quick': 1, 'brown': 1, 'fox': 1, 'jumps': 1, 'over': 1, 'lazy': 1, 'dog': 1}", "category": "Python"}, {"instruction": "Write a code snippet that checks whether a number is odd or even.", "input": "", "output": "function isOdd(number) {\n    return number % 2 === 1;\n}", "category": "Python"}, {"instruction": "Create two variables \"name\" and \"city\" and assign your name and the city you live in to them.", "input": "", "output": "let name = 'John Doe';\nlet city  = 'New York';", "category": "Python"}, {"instruction": "Create a CSS rule for making all text elements bold.", "input": "", "output": "* {\n font-weight: bold;\n}", "category": "Python"}, {"instruction": "Create a Migration Script in Node.js for creating a table for customers.", "input": "customer_id, first_name, last_name, email", "output": "const { Client } = require('pg'); \nconst client = new Client({\n  connectionString: process.env.DATABASE_URL\n});\n\nasync function createCustomerTable() {\n  await client.connect();\n\n  const query = `\n    CREATE TABLE customers (\n      customer_id SERIAL PRIMARY KEY,\n      first_name VARCHAR(255) NOT NULL,\n      last_name VARCHAR(255) NOT NULL,\n      email VARCHAR(255) NOT NULL\n    )\n  `\n  await client.query(query);\n\n  await client.end();\n}\n\ncreateCustomerTable();", "category": "Python"}, {"instruction": "Create a component in React for display a header with two buttons.", "input": "", "output": "import React from 'react';\n\nconst Header = () => {\n  return (\n    <div>\n      <h1>Header</h1>\n      <button>Button 1</button>\n      <button>Button 2</button>\n    </div>\n  )\n}\n\nexport default Header;", "category": "Python"}, {"instruction": "Write a query with window functions in PostgreSQL to calculate the average salary per department.", "input": "salary", "output": "SELECT AVG(salary) OVER (PARTITION BY department) AS department_avg_salary \nFROM salary;", "category": "Python"}, {"instruction": "Create a MySQL query for finding customers who paid more than $100.", "input": "payment", "output": "SELECT customer.*\nFROM customer JOIN payment\nON customer.ID = payment.customer_id\nWHERE payment.amount > 100;", "category": "Python"}, {"instruction": "Create a SQL database schema for storing customers and their payments.", "input": "customer(id, name, email, phone_number);\npayment(payment_id, customer_id, amount, date);", "output": "CREATE TABLE customer (\nID INTEGER PRIMARY KEY,\nname VARCHAR(255) NOT NULL,\nemail VARCHAR(255) NOT NULL,\nphone_number VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE payment (\npayment_id INTEGER PRIMARY KEY,\ncustomer_id INTEGER NOT NULL,\namount INTEGER NOT NULL,\ndate DATETIME NOT NULL,\nFOREIGN KEY (customer_id) REFERENCES customer(ID)\n);", "category": "Python"}, {"instruction": "Create an HTML form for inputting user details.", "input": "name, age, email", "output": "<form action=\"\">\n  Name:<br>\n  <input type=\"text\" name=\"name\">\n  <br>\n  Age:<br>\n  <input type=\"number\" name=\"age\">\n  <br>\n  Email:<br>\n  <input type=\"email\" name=\"email\">\n  <br><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>", "category": "Python"}, {"instruction": "Create an API endpoint in Python with Flask that requires authentication.", "input": "users = {\"John\": \"123456\", \"Jenny\": \"456789\"}", "output": "from flask import Flask, request\n\napp = Flask(__name__)\n\nusers = {\"John\": \"123456\", \"Jenny\": \"456789\"}\n\n@app.route('/', methods=['GET'])\ndef root():\n    if request.authorization and request.authorization.username in users \\\n            and request.authorization.password == users[request.authorization.username]:\n        return 'Authentication successful!' \n    else:\n        return 'Authentication failed!'\n        \nif __name__ == '__main__':\n    app.run(debug=True)", "category": "Python"}, {"instruction": "Rewrite the following code snippet to improve readability.", "input": "def f(x):\n  return [x * i for i in range(1, x + 1)]", "output": "def f(x):\n  numbers = []\n  for i in range(1, x + 1):\n    numbers.append(x * i)\n  return numbers", "category": "Python"}, {"instruction": "Suggest an alternative for the following code snippet which is faster and less memory intensive.", "input": "arr = [2, 3, 5, 7]\nresult = []\nfor i in range(len(arr)):\n  for j in range(i + 1, len(arr)):\n    result.append((arr[i], arr[j]))", "output": "arr = [2, 3, 5, 7]\nresult = [(arr[i],arr[j]) for i in range(len(arr)-1) for j in range(i+1,len(arr))]", "category": "Python"}, {"instruction": "Modify the following code to make it more efficient by using a while loop.", "input": "num = 10\ni = 1\n\nwhile i <= 10:\n    print(i * num)\n    i += 1", "output": "num = 10\ni = 0\n\nwhile i < 10:\n    i += 1\n    print(i * num)", "category": "Python"}, {"instruction": "Remove the redundancy in the following code and make it more concise.", "input": "def sum_of_lists(lists):\n  result = []\n  for i in range(len(lists)):\n    current_list = lists[i]\n    for j in range(len(current_list)):\n      result.append(current_list[j])\n  return sum(result)", "output": "def sum_of_lists(lists):\n  flattened_list = [item for sublist in lists for item in sublist]\n  return sum(flattened_list)", "category": "Python"}, {"instruction": "Given a list of integers, write a Python program to create a new list that contains the square of every element in the original list.", "input": "", "output": "def square_numbers(nums):\n  return [num**2 for num in nums]", "category": "Python"}, {"instruction": "How can you use object serialization in programming?", "input": "", "output": "Object serialization is a process in programming to convert an object into a format that can be easily stored and accessed. It's commonly used to transfer objects between programs, preserve data across time, or save objects to a database. Object serialization can be useful when you need to store information, pass the object to another program, or transmit it over a network.", "category": "Python"}, {"instruction": "Search a given list for a specific element and return its position.", "input": "list_a = [\"apple\", \"banana\", \"cherry\", \"date\"]\nelement = \"date", "output": "def search_list(list_a, element):\n    for i in range(len(list_a)):\n        if list_a[i]==element:\n            return i\n    return -1", "category": "Python"}, {"instruction": "Make a program to return the longest word in a given list of strings.", "input": "input_list = [\"The\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"]", "output": "def find_longest_word(input_list):\n    longest_word = \"\"\n    for i in input_list:\n        if len(i) > len(longest_word):\n            longest_word = i\n    \n    return longest_word", "category": "Python"}, {"instruction": "Create a script to multiply each element in a list by 10.", "input": "input_list = [1,2,3,4]", "output": "def multiply_by_10(input_list):\n    new_list = []\n    for i in input_list:\n        new_list.append(i*10)\n    return new_list", "category": "Python"}, {"instruction": "Explain why the result of the following code is 4.", "input": "x = 2\nx = x+x", "output": "The result of the code is 4 because in the second statement, the value of x is modified to equal twice its original value (2 + 2 = 4).", "category": "Python"}, {"instruction": "Classify this sentence into its parts of speech.", "input": "She is a diligent student.", "output": "Pronoun: She\nVerb: is\nDeterminer: a\nAdjective: diligent\nNoun: student", "category": "Python"}, {"instruction": "Write a PHP script to print the current week number", "input": "", "output": "<?php \n    echo 'Current week number: ' . date('W');\n?>", "category": "Python"}, {"instruction": "Edit this piece of Python code to make sure that the decimal is rounded off correctly.", "input": "a = round(0.54678, 2)", "output": "a = round(0.54678, 2)  # rounds off to 2 decimal places", "category": "Python"}, {"instruction": "Write code to convert a given number expressed in hexidecimal representation to binary.", "input": "", "output": "def hex_to_bin(hex_str):\n    #validating the input\n    if hex_str[-1] not in \"0123456789ABCDEF\":\n        return \"Invalid Hexadecimal!!\"\n     \n    #using bin() function to get the binary value  \n    return bin(int(hex_str, 16))[2:]", "category": "Python"}, {"instruction": "Suggest how to make the following code more readable using comprehensions.", "input": "def has_duplicates(arr):\n  result = False\n  for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n      if arr[i] == arr[j]:\n        result = True\n  return result", "output": "def has_duplicates(arr):\n  return len(arr) != len(set(arr))", "category": "Python"}, {"instruction": "Suggest a cleaner and more concise way to implement the following code snippet.", "input": "def find_matching_number(nums, target):\n  for num in nums:\n    if num == target:\n      return True\n  return False", "output": "def find_matching_number(nums, target):\n  return target in nums", "category": "Python"}, {"instruction": "Implement a function that takes 2 numbers as parameters and returns the greatest common divisor of both numbers.", "input": "a = 20\nb = 25", "output": "def gcd(a, b): \n  if a == 0: \n    return b \n  return gcd(b % a, a) \n\nprint(gcd(20, 25)) # 5", "category": "Python"}, {"instruction": "Rewrite the following code snippet to use the arcpy module.", "input": "import os\n\nfile_paths = [os.path.join('data', f) for f in os.listdir('data') if f.endswith('.tif')]", "output": "import os\nimport arcpy\n\nfile_paths = [os.path.join('data', f) for f in arcpy.ListRasters('*.tif')]", "category": "Python"}, {"instruction": "Suggest an elegant way to print out a list of numbers without using a loop in Python.", "input": "lst = [1, 2, 3, 4]", "output": "print(*lst) # 1 2 3 4", "category": "Python"}, {"instruction": "Given a Python list, write a program to convert all its numbers to strings.", "input": "lst = [1, 2, 3, 4]", "output": "lst = [str(x) for x in lst]", "category": "Python"}, {"instruction": "Explain what a stack overflow is and how to try to avoid it.", "input": "", "output": "A stack overflow is an error condition in which the program attempts to use more memory space than the stack can hold. It occurs when a program pushes more data onto the stack than the maximum limit (e.g., when a recursive function recurses too many times), or when the recursive calls are too deeply nested. To avoid stack overflows, you should use a modular approach when writing code, set realistic limits for the depth of recursion, and opt for an iterative solution rather than a recursive one whenever possible.", "category": "Python"}, {"instruction": "Write HTML code to produce a two-column table with one row.", "input": "", "output": "<table>\n  <tr>\n    <td>row 1, col 1</td>\n    <td>row 1, col 2</td>\n  </tr>\n</table>", "category": "Python"}, {"instruction": "Edit the following HTML to link the page with a stylesheet", "input": "<!DOCTYPE html>\n<html>\n<head>\n <title>My Page</title>\n</head>\n<body>\n\n</body>\n</html>", "output": "<!DOCTYPE html>\n<html>\n<head>\n <title>My Page</title>\n <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n</head>\n<body>\n\n</body>\n</html>", "category": "Python"}, {"instruction": "Update the following Java code to print the difference between two dates in years, months and days", "input": "import java.time.LocalDateTime;\n\npublic class DateTime {\n\n    public static void main(String[] args) {\n\n        LocalDateTime dateTime1 = LocalDateTime.of(2020,11,5,14,45);\n        LocalDateTime dateTime2 = LocalDateTime.of(1999,1,15,9,30);\n\n        // Update code to print the difference\n    }\n}", "output": "import java.time.LocalDateTime;\nimport java.time.Period;\n\npublic class DateTime {\n\n    public static void main(String[] args) {\n\n        LocalDateTime dateTime1 = LocalDateTime.of(2020,11,5,14,45);\n        LocalDateTime dateTime2 = LocalDateTime.of(1999,1,15,9,30);\n\n        Period diff = Period.between(dateTime1.toLocalDate(), dateTime2.toLocalDate());\n\n        System.out.printf(\"The difference is %d years, %d months and %d days\\n\"\n            , diff.getYears()\n            , diff.getMonths()\n            , diff.getDays());\n    }\n}", "category": "Python"}, {"instruction": "Write a SQL query to find all the entries in a given table that contain a specific\u201cvalue\u201d in the given column.", "input": "", "output": "SELECT * \nFROM table \nWHERE col LIKE '%{value}%';", "category": "Python"}, {"instruction": "Change the following piece of Java code to make sure that the parameter passed is a valid date.", "input": "public boolean isValidDate(String date){ \n    // return true if date is valid \n}", "output": "public boolean isValidDate(String date){ \n    SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n    try {\n        format.parse(date);\n        return true;\n    } catch (ParseException e) {\n        return false;\n    }\n}", "category": "Python"}, {"instruction": "Write a SQL query to select all entries in a given table with a value larger than 100.", "input": "", "output": "SELECT * \nFROM table \nWHERE col > 100;", "category": "Python"}, {"instruction": "Write a piece of code to store 3 values in a single variable.", "input": "", "output": "let data = [val1, val2, val3];", "category": "Python"}, {"instruction": "Create a class in Java that represent books in a library.", "input": "", "output": "public class Book { \n    // Properties \n    private String title; \n    private String author; \n    private int yearPublished; \n    \n    // Constructors \n    public Book (String t, String a, int y) \n    { \n        title = t; \n        author = a; \n        yearPublished = y; \n    } \n    \n    // Accessor and mutator methods \n    public void setTitle(String newTitle) { title = newTitle; } \n    public void setAuthor(String newAuthor) { author = newAuthor; } \n    public void setYearPublished(int newYear) { yearPublished = newYear; } \n    \n    public String getTitle() { return title; } \n    public String getAuthor() { return author; } \n    public int getYearPublished() { return yearPublished; } \n}", "category": "Python"}, {"instruction": "Write a SQL query to display all rows with last_name starting with 'C'.", "input": "", "output": "SELECT * \nFROM table \nWHERE last_name LIKE 'C%';", "category": "Python"}, {"instruction": "Write a regex expression to find all the words in a given sentence that contain 4 characters.", "input": "sentence = \"This is a test sentence to find all 4 letter words\"", "output": "\\b\\w{4}\\b", "category": "Python"}, {"instruction": "Use the requests library to write a Python program that sends an HTTP GET request.", "input": "url = \"http://example.com\"", "output": "import requests\n\nresponse = requests.get(url)", "category": "Python"}, {"instruction": "Create a Python class object to store data about a basketball player.", "input": "", "output": "class BasketballPlayer:\n def __init__(self, name, age, height, weight):\n self.name = name\n self.age = age\n self.height = height\n self.weight = weight", "category": "Python"}, {"instruction": "Edit the Java code below to produce the output \"My name is NAME\".", "input": "public class Test { \n public static void main(String[] args) { \n System.out.println(\"My name is\"); \n } \n}", "output": "public class Test { \n public static void main(String[] args) { \n System.out.println(\"My name is NAME\"); \n } \n}", "category": "Python"}, {"instruction": "Write a MySQL query to get the sum of all values for a certain field in a particular table.", "input": "field_name = \"age\"\ntable_name = \"students\"", "output": "SELECT SUM(age) FROM students;", "category": "Python"}, {"instruction": "Write a JavaScript code to pop up a window that says \"Hello, World!\" when you open up the webpage.", "input": "", "output": "<script>\nwindow.onload = function(){\n alert(\"Hello, World!\");\n}\n</script>", "category": "Python"}, {"instruction": "Use the numpy library to write a function that takes an array of integer values, and returns the average of all the values.", "input": "arr = [1, 2, 3, 4, 5]", "output": "import numpy as np\ndef average(arr):\n return np.average(arr)", "category": "Python"}, {"instruction": "Translate the following to CSS style.", "input": "h1 {font-size: 16px; color: #00cc33;}", "output": "h1 {\n    font-size: 16px;\n    color: #00cc33;\n}", "category": "Python"}, {"instruction": "Compute the parity of the following binary number.", "input": "10101", "output": "The parity of the binary number 10101 is 1 (odd).", "category": "Python"}, {"instruction": "Debug the following code and make sure the program runs as expected.", "input": "def number_divisible(x, y):\n      for i in range(x):\n            if i % y = 0 :\n                  print(i)", "output": "def number_divisible(x, y):\n      for i in range(x):\n            if i % y == 0 :\n                  print(i)", "category": "Python"}, {"instruction": "Write a HTML and CSS code that creates a 3x3 grid.", "input": "", "output": "<style>\n  .grid-container {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-template-rows: repeat(3, 1fr);\n    grid-gap: 10px;\n  }\n</style>\n\n<div class=\"grid-container\">\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n  <div></div>\n</div>", "category": "Python"}, {"instruction": "Extend the given code to create a while loop that prints numbers from 1 to 11.", "input": "i = 1\nprint(i)", "output": "i = 1\nwhile i <= 11:\n    print(i)\n    i = i + 1", "category": "Python"}, {"instruction": "Using the given class, write a constructor that creates an instance with age 10.", "input": "class Person:\n    def __init__(self,age):\n        self.age = age", "output": "class Person:\n    def __init__(self,age=10):\n        self.age = age", "category": "Python"}, {"instruction": "Create a React component that updates itself with the current time every second.", "input": "", "output": "import React, { useState, useEffect } from 'react';\n\nconst Clock = () => {\n    const [time, setTime] = useState(new Date());\n    useEffect(() => {\n      const handle = setInterval(() => setTime(new Date()), 1000);\n      return () => clearInterval(handle);\n    }, []);\n    return (\n      <div>\n        The current time is {time.toLocaleTimeString()}\n      </div>\n    );\n  };\n  \n  export default Clock;", "category": "Python"}, {"instruction": "Generate a unique seven-digit number.", "input": "", "output": "2675019", "category": "Python"}, {"instruction": "Write a SQL query to find all employees over the age of 30.", "input": "", "output": "SELECT * \nFROM Employees \nWHERE age > 30;", "category": "Python"}, {"instruction": "Update the following Node.js function so that it can handle an array of objects.", "input": "function someFunction(obj1, obj2){\n  console.log('someFunction called');\n  return `object 1 is ${obj1.key1} object 2 is ${obj2.key2}`;\n}", "output": "function someFunction(arr){\n  console.log('someFunction called');\n  let str = \"\"\n  for (const obj of arr){\n    str += `object is ${obj.key1} `\n  }\n  return str;\n}", "category": "Python"}, {"instruction": "Identify the type of triangle when given three sides", "input": "side1 = 10, side2 = 10, side3 = 8", "output": "This is an isosceles triangle.", "category": "Python"}, {"instruction": "Calculate the result when a power of 10 is raised to the power of 3", "input": "", "output": "The result is 1000.", "category": "Python"}, {"instruction": "Create a JavaScript object literal for a student with properties (name, age, grade).", "input": "", "output": "let student = {\n    name: \"John\",\n    age: 25,\n    grade: \"A\"\n};", "category": "Python"}, {"instruction": "Write a JavaScript function to find the number of matching items in two arrays.", "input": "arr1 = [1, 2, 3, 4]\narr2 = [3, 4, 5, 6]", "output": "function countMatchingItems(arr1, arr2) {\n return arr1.filter(num => arr2.includes(num)).length;\n}\n\ncount = countMatchingItems(arr1, arr2); \nconsole.log(count); // Output: 2", "category": "Python"}, {"instruction": "Describe the purpose of machine learning.", "input": "", "output": "The purpose of machine learning is to develop algorithms and models that are able to learn from data and make predictions or decisions without being explicitly programmed. Machine learning algorithms can discover hidden patterns from large amounts of data and use the knowledge acquired to improve the accuracy of predictions and enhance decision making. Machine learning is used in many application areas, including natural language processing, computer vision, speech recognition, robotics, recommendation systems, and data mining.", "category": "Python"}, {"instruction": "Create a Java program to count character occurrences in a given string.", "input": "String = \"GPT models are a type of machine learning algorithms\"", "output": "public class CharacterCount {\n    public static void main(String[] args) {\n        String str = \"GPT models are a type of machine learning algorithms\";\n        int[] count = new int[256];\n\n        for (int i = 0; i < str.length(); i++)\n            count[str.charAt(i)]++;\n        for (int i = 0; i < 256; i++)\n            if(count[i] != 0)\n                System.out.println((char)i + \": \" + count[i]);\n    }\n}", "category": "Python"}, {"instruction": "Calculate the percentage of numbers in an array that is greater than 5.", "input": "[3, 4, 7, 8, 9, 11]", "output": "def calc_perc(arr):\n  count = 0\n  for num in arr:\n    if num > 5:\n      count +=1\n  return count/len(arr) *100\n\ncalc_perc([3, 4, 7, 8, 9, 11])", "category": "Python"}, {"instruction": "Write a code to delete a 'customer' table from a MySQL database.", "input": "", "output": "# Delete 'customer' table from MySQL database\nimport mysql.connector\n\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"yourusername\",\n  passwd=\"yourpassword\",\n  database=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nsql = \"DROP TABLE customer\"\n\nmycursor.execute(sql)", "category": "Python"}, {"instruction": "Parse the JSON data stored in a variable 'data' and print out the value of the key 'name'.", "input": "data = {\n \"name\": \"John\", \n \"age\": 30,\n \"status\": \"single\"\n}", "output": "import json\n\ndata = {\n \"name\": \"John\", \n \"age\": 30,\n \"status\": \"single\"\n}\n\ndata =json.loads(data)\nprint(data['name'])", "category": "Python"}, {"instruction": "Compare two given lists to find the common elements and store the output in a new list.", "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [2, 4, 6, 8, 10]", "output": "common_list = []\nfor num in list1:\n    if num in list2:\n        common_list.append(num)", "category": "Python"}, {"instruction": "Classify the given data according to their type.", "input": "hello", "output": "String", "category": "Python"}, {"instruction": "Trace the program to find the output.", "input": "def myfunc(x,y):\n    if x == y:\n        return x\n    else:\n        return \"Not equal\"\n\na = myfunc(5,5)\nprint(a)", "output": "5", "category": "Python"}, {"instruction": "Create a CSS class called \"header\" with some styling.", "input": "", "output": ".header {\n    font-family: sans-serif;\n    font-weight: bold;\n    font-size: 1.5em;\n    color: #333;\n    margin-bottom: 40px;\n    text-align: center;\n}", "category": "Python"}, {"instruction": "Check if the given statement is syntactically correct.", "input": "The car drove quickly down the street.", "output": "Yes, the statement is syntactically correct.", "category": "Python"}, {"instruction": "Implement an algorithm with Big O notation of O(n).", "input": "", "output": "def O_n(items):\n  n = len(items)\n  for i in range(n):\n    print (items[i])", "category": "Python"}, {"instruction": "Convert the following sentence into camelCase.", "input": "This is a sentence", "output": "thisIsASentence", "category": "Python"}, {"instruction": "Use Java to create a constructor to set the values of instance variables num1 and num2.", "input": "", "output": "public class Number {\n    int num1;\n    int num2;\n    \n    public Number(int num1, int num2) {\n        this.num1 = num1;\n        this.num2 = num2;\n    }\n}", "category": "Python"}, {"instruction": "Edit the following program so that it prints out the result of x multiplied by y.", "input": "x = 7\ny = 5\nprint(x + y)", "output": "x = 7\ny = 5\nprint(x * y)", "category": "Python"}, {"instruction": "Using PHP, define a function that multiplies two numbers.", "input": "", "output": "function multiply($x, $y) {\n return $x * $y;\n}", "category": "Python"}, {"instruction": "Create a for loop in Python that iterates through the list [1,2,3,4,5].", "input": "", "output": "for item in [1,2,3,4,5]:\n    print(item)", "category": "Python"}, {"instruction": "Find the index in an array of a given value.", "input": "[2, 8, 7, 5, 4], 4", "output": "def index_in_array(data, value):\n    return data.index(value)\n\ndata = [2, 8, 7, 5, 4]\nvalue = 4\nprint(index_in_array(data, value)) # 4", "category": "Python"}, {"instruction": "Format a given number as a percent value.", "input": "0.23", "output": "def percent_format(number):\n    return '{:.2%}'.format(number)\n\nnumber = 0.23\nprint(percent_format(number)) # 23.00%", "category": "Python"}, {"instruction": "Slice a string after the nth character.", "input": "Python", "output": "def slice_string(string, n):\n    return string[n:]\n\ninput_string = 'Python'\nprint(slice_string(input_string, 3)) # hon", "category": "Python"}, {"instruction": "Retrieve the value of a specific key from a given dictionary.", "input": "{'name': 'John', 'age': 30, 'occupation': 'teacher'}", "output": "def dict_value(data, key):\n    return data[key]\n\ndata = {'name': 'John', 'age': 30, 'occupation': 'teacher'}\nvalue = dict_value(data, 'name')\nprint(value) # John", "category": "Python"}, {"instruction": "Calculate the total number of bits in a single byte.", "input": "", "output": "def bits_in_byte():\n     return 8\n\ntotal_bits = bits_in_byte()\nprint(total_bits) # 8", "category": "Python"}, {"instruction": "Classify a given string as either a palindrome, a word or a phrase.", "input": "racecar", "output": "def classify_string(string):\n    if string == string[::-1]: \n        return \"Palindrome\"\n    elif \" \" in string:\n        return \"Phrase\"\n    else:\n        return \"Word\"\n\ninput_string = \"racecar\"\nprint(classify_string(input_string)) # Palindrome", "category": "Python"}, {"instruction": "Write a function that returns True if a given number is prime and False if it is not.", "input": "", "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True", "category": "Python"}, {"instruction": "Design a class to hold calendar date-related information.", "input": "", "output": "class CalendarDate:\n    def __init__(self, day, month, year):\n        self.day = day\n        self.month = month\n        self.year = year\n\n    def get_date(self):\n        return self.day, self.month, self.year", "category": "Python"}, {"instruction": "Write a code in Python that takes two lists of equal lengths and generates a new list with the elements of both lists combined.", "input": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]", "output": "list3 = []\n\nfor i in range(len(list1)):\n    list3.append(list1[i])\n    list3.append(list2[i])", "category": "Python"}, {"instruction": "Using an existing loop, create code to calculate the sum of all odd numbers up to a given number.", "input": "", "output": "def sum_odd_numbers(num):\n    result = 0\n    for i in range(1, num+1):\n        if i % 2 != 0:\n            result += i\n    return result", "category": "Python"}, {"instruction": "Write code to calculate statistical measures such as Standard Deviation, Median and Mean from a given set of numbers.", "input": "array = [2, 4, 8, 7, 5]", "output": "import statistics\n\nmean = statistics.mean(array)\nmedian = statistics.median(array)\nstd_dev = statistics.stdev(array)", "category": "Python"}, {"instruction": "Using React, create a component that displays a greeting with the current time.", "input": "", "output": "class Greeting extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: new Date().toLocaleTimeString(), \n    };\n  }\n  render() {\n    return <h3>Good {this.props.timeOfDay}, the current time is {this.state.time}.</h3>;\n  }\n}", "category": "Python"}, {"instruction": "Using HTML, code a navigation bar.", "input": "", "output": "<nav>\n  <ul>\n    <li><a href=\"#\">Home</a></li>\n    <li><a href=\"#\">About</a></li>\n    <li><a href=\"#\">Contact</a></li>\n  </ul>\n</nav>", "category": "Python"}, {"instruction": "Write a CSS rule to set the background color of all <p> elements to white.", "input": "", "output": "p {\n  background-color: white;\n}", "category": "Python"}, {"instruction": "Write a JavaScript code that prints out even numbers between 0 and 50.", "input": "", "output": "for (let i = 0; i <= 50; i++) {\n  if (i % 2 == 0) {\n    console.log(i);\n  }\n}", "category": "Python"}, {"instruction": "How to access the element of a given array in Java?", "input": "Array: [1, 5, 4, 8]", "output": "We can use the index of the element to access it. The syntax is arrayName[index]. \nFor example, if we want to access the element at index 2, the syntax would be arrayName[2], and it would return the element with value 4.", "category": "Python"}]